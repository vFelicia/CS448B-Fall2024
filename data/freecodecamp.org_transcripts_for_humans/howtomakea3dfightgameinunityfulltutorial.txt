With timestamps:

00:00 - what is up guys fah here here from
00:03 - awesometubes.com whoa haven't said that
00:05 - in a while anyways before we start
00:07 - creating anything i am going to preview
00:09 - the game that we're gonna create so i'm
00:11 - gonna hit the play button and you will
00:13 - see now that we have our warriors that
00:16 - they will fight each other don't mind
00:18 - the buttocks that you can see from the
00:20 - character so you see the enemies chasing
00:22 - us and trying to attack us actually he
00:24 - hit me pay attention to the health bars
00:27 - at the top left and top right corner and
00:29 - by the way i can hold the shield like
00:31 - this when i hold the shield he is not
00:33 - able to attack
00:35 - and now when i lower the shield he will
00:37 - be able to attack you can hear the
00:40 - public
00:41 - behind in the background let me just up
00:43 - the volume a little bit
00:45 - so you can hear them cheering
00:48 - they like when blood is spit anyways i'm
00:50 - going to attack the enemy and as you can
00:52 - see i am dealing more damage because hey
00:55 - i don't want to lose in the game that
00:57 - i'm creating i don't want to embarrass
00:58 - myself
00:59 - and
01:00 - when his health gets to zero basically i
01:04 - have to hit him two more times so one
01:05 - more time back you see now he is dead
01:08 - and voila i have one and the enemy's
01:11 - health is zero as you can see at the top
01:15 - right corner
01:16 - basically this is the game that we're
01:18 - going to create we have melee battle
01:20 - system something we did not do before we
01:22 - have enemy ai that enemy can detect
01:25 - where the player is and it will chase
01:27 - that player also when the player goes
01:29 - away a little from the enemy
01:32 - the enemy starts chasing the player
01:34 - again so let's start creating this i
01:37 - mean a new project let me close this one
01:39 - because i don't want it to be open
01:41 - let me close it like this so right click
01:43 - here and finally it's closed anyways
01:46 - this is our project here we have our
01:48 - sample thing this is a new 3d project by
01:50 - the way so you're simply going to go and
01:52 - create a new 3d project name it however
01:54 - you want to name it i named this one
01:56 - warrior fight game
01:57 - this sample scene i am going to change
02:00 - the gameplay just so
02:02 - i like to name things correctly and we
02:04 - are going to import the assets by the
02:06 - way the assets and the complete project
02:09 - are available for you to download link
02:11 - is in the description below
02:14 - so select all of these assets model
02:17 - sounds textures and ui and simply drag
02:20 - and drop them right here inside of unity
02:23 - of course it will take a moment or two
02:25 - for unity to load all of this you know
02:28 - the procedure it takes some time to
02:30 - import the 3d assets
02:32 - and uh yeah while we wait i can sing to
02:35 - you or we can stop the video let's
02:38 - actually try the singing
02:40 - i'm just kidding i'm gonna stop the
02:41 - video and come back when everything is
02:42 - finished
02:43 - finally unity took mercy upon us and it
02:46 - has imported all the assets and we can
02:48 - start building our game the first thing
02:50 - that i want to do is create the terrain
02:53 - or the ground where we are going to
02:54 - stand and for that i'm simply going to
02:56 - right click here in the hierarchy panel
02:58 - and go under 3d object and create a
03:01 - simple cube voila this is our terrain
03:05 - now of course not this cube we aren't
03:06 - going to stand on a cube actually we are
03:08 - but i'm going to resize it and i'm going
03:11 - to call it ground
03:12 - for the scale x i'm going to say 100
03:16 - for scale y 0.1 because i want to make
03:19 - it you know thin like this i don't want
03:21 - to make it you know lar i don't know
03:22 - what's opposite of tin don't judge me
03:25 - anyways i'm going to say here z 100 as
03:27 - well voila this is what we have this is
03:30 - going to be our terrain now of course it
03:32 - is not pretty at all i don't want this
03:35 - whiteness tearing my eyes apart so if
03:38 - you pay attention here inside of the
03:41 - folders or the acids that we have
03:43 - imported we have textures inside of
03:45 - textures we only have this grass texture
03:47 - if i open it this is the grass texture
03:49 - basically this somebody took a shot in
03:51 - his
03:52 - backyard anyways what we're gonna do
03:54 - here
03:55 - is we are inside of the textures i'm
03:57 - going to right click and create a new
04:00 - material so here it is right click and
04:02 - create so again it's right click
04:05 - and go under create and material this is
04:07 - what we want and i'm going to call this
04:09 - one ground material
04:12 - and we are going to apply it on the
04:14 - ground so now i can drag and drop this
04:16 - on the ground and this is how you make
04:18 - game objects look cool basically because
04:21 - pay attention to our ground it's white
04:24 - if i put this material on it it's still
04:26 - white though but what i can do for
04:28 - example is i can change the color to now
04:30 - red or dark or silver or whatever
04:34 - but i can also drag and drop this grass
04:36 - inside of this albedo or albedo and you
04:39 - don't have my highlight tool here it is
04:41 - so if i take here as you can see i have
04:44 - the grass
04:45 - and if i drag and drop it right here
04:50 - it will display that grass
04:53 - voila on our ground voila this is how
04:56 - you make things look good in unity and
04:59 - in 3d
05:00 - but
05:01 - there is more to these materials and
05:04 - shaders now this is the first time i
05:06 - mentioned shaders so what are shaders
05:07 - basically a shader determines how that
05:10 - material or the texture that is applied
05:13 - to that material looks like so if i take
05:16 - here pay attention i have the standard
05:19 - shader this is on the drop down list
05:21 - right here so here it is i'm
05:24 - highlighting that with my highlight tool
05:26 - so when you click on that it's a
05:28 - drop-down list and you can play with all
05:29 - the different shaders you have built in
05:31 - of course there are others that you can
05:33 - import from the asset store but these
05:35 - are built in
05:36 - what i like to use is this one unlit
05:38 - texture and you see it's already a
05:41 - little bit different it's a little bit
05:43 - darker so the grass looks a little bit
05:45 - darker in comparison to what it looked
05:49 - like a moment ago and i encourage you to
05:53 - experiment with these shaders so that
05:55 - you can see their effects not every
05:57 - shader will make your material look good
05:59 - maybe some will look bad others will
06:01 - look better but you can find that out if
06:03 - you experiment so for example if i go
06:05 - here i don't know nature and say speed
06:07 - tree maybe this will not make it look
06:09 - good well basically it's a little
06:10 - lighter and some shaders also have
06:13 - other fields here where you can add a
06:15 - texture you can have a normal texture
06:18 - now i'm not going to go into that that's
06:20 - a different topic and i don't know too
06:23 - much about it but basically when you
06:25 - combine these textures like a normal map
06:28 - another texture some other textures that
06:30 - come along with it you make your
06:32 - material look or the game object that
06:34 - has that material look good anyways what
06:37 - you need to do is simply experiment with
06:39 - these just experiment try them out and
06:41 - see different effects that you will get
06:44 - and that's how you learn the best
06:46 - now moving forward we have our ground
06:48 - and again the scale x is 100 and z is
06:51 - 100 y is 0.1 why well because potential
06:55 - if i set the y for example at 100 i
06:58 - don't want this what the hell is this
06:59 - you see we don't want this we only want
07:02 - our ground so we want to make it look
07:04 - like a ground that's why i put the scale
07:06 - so that it's not too large on the y-axis
07:10 - so moving forward if i go back in assets
07:12 - and models we have the arena here inside
07:16 - of the models folder so in the models
07:19 - folder we have the arena if i click here
07:21 - this is our arena if i drag and drop it
07:23 - here it is this is the arena
07:27 - now of course it's too small so we need
07:29 - to resize it make sure it is positioned
07:32 - at 0 0 0 for x y and z and i am going to
07:36 - call it battle arena so this is the name
07:38 - of the game object
07:40 - and the scale for x y and z is going to
07:44 - be 25 so 25 25 25 and voila this is our
07:49 - arena it already has materials applied
07:52 - on it
07:53 - if you click on the drop down list you
07:54 - will see all of these different game
07:56 - objects
07:57 - that are put together to make this arena
08:00 - if i you know deactivate some of them so
08:02 - if i let's try to activate these you see
08:04 - the effect if i deactivate them well
08:06 - they are gone so that is another thing
08:09 - that you can experiment but basically
08:10 - these are just 3d models put together so
08:13 - put together to create this battle arena
08:15 - you can see here we have some people's
08:17 - spectating or whatever yeah this weeder
08:20 - look at that weirdo yeah these two yeah
08:22 - that probably up to something
08:24 - anyways i don't know what i'm saying but
08:26 - this is our battle arena now moving
08:29 - forward we are going to import our
08:31 - character and here he is our warrior now
08:34 - one thing to note is this is a headless
08:36 - warriors if i drag and drop him here and
08:38 - if i go to him voila this is a headless
08:42 - warrior like a headless swordsman but of
08:45 - course we are going to make him
08:48 - with head so i don't know how you say
08:51 - head what's opposite of headless
08:53 - head head on us i don't know anyways
08:55 - this is our game object so what i'm
08:57 - gonna do is
08:58 - first of all i'm going to take and
09:00 - rename it so from body underscore 0 i'm
09:02 - going to rename it to warrior
09:05 - next we need to apply this head on him
09:07 - so if you pay attention to the head now
09:09 - it's too big we are not gonna
09:11 - we're not gonna do this to him
09:14 - pay attention to the head look at that
09:18 - we're not gonna do this to him we are
09:20 - going to resize the head a little so i'm
09:22 - going to resize it let's say here head
09:25 - is going 1-1-1 actually no
09:28 - so the head is going to be
09:30 - 1.5
09:31 - 1.5 and 1.5 yeah exactly so 1.5 for the
09:36 - head this is totally fine
09:39 - and we need to select the warrior
09:42 - click on this drop down list to go
09:45 - through all of the elements that make
09:47 - him or to his body parts so click on the
09:50 - warrior then this
09:52 - bip001 click on that drop-down list and
09:54 - again you have
09:55 - vip001 pelvis click on that one and let
09:58 - me just resize this here then we are
10:00 - going to go under spine then spine1 then
10:03 - spine two man this model is killing me
10:06 - then we have the neck and right here we
10:07 - have the head
10:09 - so what you can also do is in the search
10:11 - bar if i take the highlight tool here
10:14 - you have the search bar in the hierarchy
10:16 - panel you can also select the search bar
10:19 - and you can type here for example head
10:21 - and it will find it for you it's this
10:23 - one right here bip001
10:25 - head
10:26 - so this is the part of the body that we
10:29 - need so now we're gonna drag and drop
10:31 - the head right here normally we don't
10:33 - have to do this because
10:34 - other models come with the head but this
10:37 - model is like this
10:38 - so what i'm gonna do is i am going to
10:40 - resize it or actually reposition it so
10:43 - i'm going to say zero point
10:49 - this is going to be for the x for the y
10:51 - it's going to be 0.012
10:56 - and for the z it's going to be negative
10:59 - zero point let's say here i don't gonna
11:02 - leave it just at zero
11:04 - just as y'all leave the z at zero
11:07 - and i think his head is all it's also
11:10 - still too big
11:11 - so yeah this is okay and let's take here
11:14 - and resize the head a little bit so the
11:15 - scale is going to be 0.47
11:18 - for x y and z i think now it's okay so
11:22 - when you select the head set the scale
11:24 - to 0.47
11:27 - that is 0.47 for x y and z the position
11:30 - x x is going to be negative 0.0274
11:35 - and y is going to be
11:37 - 0.012
11:39 - and yeah this is where our head is going
11:42 - to be exactly and it looks good it looks
11:44 - good actually it looks like it's already
11:46 - built on him
11:49 - anyways as i said we are not going to do
11:50 - this
11:51 - that often because most models come with
11:53 - the head but this one is like this and
11:55 - what we can do or
11:57 - yeah anyways select the warrior now
12:00 - and what i'm gonna do is i'm going to
12:03 - click on this add component here and we
12:06 - are going to filter for character
12:08 - controller this is a built-in controller
12:10 - that comes with unity so if i select it
12:12 - here again it's under add component and
12:15 - filter here character controller as i
12:17 - said this is a built-in controller and i
12:20 - don't know if you can see the green
12:21 - things around him so yeah i've turned
12:23 - off the ground in the battle arena so we
12:25 - can see this capsule thing around him
12:28 - basically this character controller
12:30 - comes with a collider and also comes
12:33 - with a
12:34 - rigid body
12:36 - in it so we don't have to apply these
12:38 - things this green thing that you can see
12:40 - is a collider that's around our player
12:42 - so what we can do is we can
12:45 - re-position it so i'm going to put it on
12:48 - y 0.96
12:50 - and for the x i'm going to leave it z
12:53 - i'm going to leave it a radius however
12:55 - is going to be 0.25
12:58 - and voila you see the radius it will
13:00 - resize that collider now it can be a
13:02 - little lower i don't know for example
13:04 - 0.21 yeah and you can see now it is
13:08 - around our player well around the middle
13:11 - of him
13:12 - and this is as i said the character
13:14 - controller that we are going to use in
13:17 - order to make him move and by the way
13:19 - let me just put him like this so if i
13:23 - put him like this and if i hit the play
13:25 - button actually where is my camera he is
13:27 - standing still now even though we have a
13:29 - rigid body we have a velocity in our
13:31 - character controller
13:33 - we still need to apply gravity on him so
13:35 - we need to apply gravity and in order to
13:38 - apply gravity basically we do that vi
13:40 - script
13:41 - so it's time to get our hands dirty
13:44 - let's go back in the assets and right
13:45 - click here and create a new folder which
13:48 - i'm going to call scripts
13:50 - inside of the scripts folder we are
13:52 - going to right click
13:54 - and create our player move script and by
13:58 - the way before we continue what i'm
14:00 - going to do is go back here in assets
14:02 - and right click and create a folder this
14:04 - one is going to be our prefabs
14:07 - and click here in the prefabs and drag
14:09 - and drop the warrior so bam this is our
14:12 - warrior prefab now so we don't have to
14:15 - worry about
14:16 - deleting this game object from the scene
14:18 - and doing all of this from beginning
14:21 - so if we go back in the script we have
14:22 - the player move script drag and drop it
14:25 - on the warrior
14:26 - and now hit apply here so that that
14:29 - change applies to the prefab now one
14:32 - thing i want to get out right now i like
14:35 - when i go
14:36 - and spontaneously have things that i
14:38 - need to explain why we need to hit apply
14:41 - to make that change apply to the prefab
14:43 - and you if you're watching my tutorials
14:45 - you've probably heard me saying that
14:47 - like a thousand times
14:49 - well this prefab right here is basically
14:52 - now the original game object of this
14:55 - warrior that we have in the hierarchy so
14:57 - let me just take it so this warrior here
14:59 - in the prefabs folder is the original
15:01 - one this one right here is a copy of it
15:05 - any change we apply to this copy for
15:08 - example if i go here and if i attach an
15:10 - audio source component pay attention
15:12 - here i have attached an audio source
15:14 - component on the copy in the hierarchy
15:17 - the original one the warrior here in the
15:20 - prefabs folder he does not have that
15:22 - audio source applied on him because we
15:25 - attached that one on the copy
15:27 - if you want to have the original have
15:31 - this audio source because you attached
15:33 - it you will need to click on this apply
15:35 - and this apply
15:37 - applies that to the original prefab
15:40 - which is right here here it is the
15:42 - original prefab in the prefabs folder so
15:45 - if i select that warrior prefab in the
15:48 - prefabs folder it has the audio source
15:51 - component attached on him now but pay
15:53 - attention now if i go here to warrior
15:55 - and remove and this is the warrior in
15:57 - the hierarchy the copy if i now remove
16:01 - the audio source component the original
16:03 - still has the source component the audio
16:06 - because we did not hit apply
16:08 - but pay attention to the difference now
16:10 - if however i select the warrior inside
16:13 - of the prefabs folder the original one
16:16 - and if i go here for example and filter
16:18 - for a rigid body component and if i
16:20 - apply that rigid body component on the
16:22 - original
16:23 - what do you think for the copy it will
16:25 - have the rigid body applied because we
16:27 - applied it on the original
16:30 - and the copy
16:32 - will simply follow because it's a copy
16:34 - of the original but if we apply to the
16:36 - copy then we need to click apply to make
16:39 - that change applied to that prefab the
16:41 - original one as well so if i remove now
16:44 - from the warrior prefab the original one
16:47 - we also don't have it on the copy prefab
16:51 - so i hope this clears things out if not
16:54 - ask what is not clear in the comments
16:57 - below so let me go here actually this is
17:00 - from the previous one the one that i
17:02 - have
17:04 - previewed it so moving forward this is
17:06 - the new one that we are going to code
17:08 - from scratch let me just click here and
17:11 - hold enter to give a little bit space so
17:14 - what do we need for our player move
17:18 - first of all we need our private
17:20 - character controller and i'm going to
17:23 - call it char
17:24 - controller like this not character but
17:26 - char like this
17:28 - short for character
17:30 - we will also need an animator but we
17:32 - will do that later on we also need here
17:34 - public float movement
17:37 - speed which is by default three and pay
17:39 - attention i set it to be public which
17:42 - means it is editable in the inspector
17:44 - panel and what do i mean by this when i
17:46 - say it is editable in the expect
17:49 - inspector panel that means a public
17:50 - variable is visible here in the
17:52 - inspector pay attention here now you see
17:55 - we have it right here let me click on
17:56 - the highlight tool and here it is so we
17:59 - have it it's right here which means we
18:02 - can manipulate this value if i set here
18:04 - value five now we have the value five
18:06 - and not three so if i put it back at
18:08 - three it is three basically the value
18:11 - that we put here in the inspector panel
18:12 - will override the value that is here
18:16 - so we have the movement speed we also
18:18 - have a public float gravity this is what
18:20 - i was talking about which is 9.8
18:23 - this is the gravity
18:25 - in real life as well we also have a
18:28 - public float rotation so rotation speed
18:32 - which is going to be equal to 0.15 f
18:36 - we also have a public float
18:39 - a rotate
18:40 - degrees per second which is going to be
18:44 - equal to
18:45 - 180 degrees per second
18:48 - so these are the variables that we need
18:50 - to get started and the first thing that
18:52 - i'm going to do is inside of the awake
18:55 - function of course we have the start but
18:57 - i'm going to change it to awake if you
18:59 - are also following my tutorials you know
19:01 - that i like to initialize things in the
19:03 - awake function because the order of
19:06 - execution goes like this when we run our
19:08 - game this is the first function
19:11 - that is called the second function that
19:13 - is called is on enable this one right
19:16 - here and this is the second function
19:19 - and the third function is start
19:23 - so start is the third function but by
19:25 - default when we create a project we have
19:27 - start and update of course we can use
19:29 - start for initialization and in some
19:31 - cases it is better to use start over
19:34 - awake for example and i know somebody
19:36 - will ask when is that case
19:38 - well if you are initializing something
19:41 - in the awake function and you need to
19:42 - get a reference for that then initialize
19:44 - it in the awake but get a reference in
19:46 - the start function this goes for example
19:49 - if you
19:50 - select a player in the main menu will
19:52 - you initialize the player in the
19:54 - gameplay scene in awake but you need to
19:56 - follow it with the camera then in the
19:58 - camera
19:59 - use the code that will find the player
20:01 - in the start function we will have
20:03 - examples for this and some other
20:04 - tutorials so don't worry about that
20:06 - anyways i'm going to say here char
20:08 - controller is equal to
20:11 - get component character controller
20:14 - and voila we are basically done with our
20:16 - character controller what is the next
20:19 - thing to do is go here
20:21 - and create void move and this is a
20:24 - function that we're going to use to move
20:27 - which we're going to call in the update
20:29 - and here we're going to have move
20:32 - so what are we going to do here first of
20:35 - all we are going to test if input
20:38 - get axis and here we are going to say
20:42 - vertical like this
20:44 - is greater than 0
20:46 - which means if we have either press the
20:50 - up arrow key or the w key on our
20:53 - keyboard because if i take here quickly
20:55 - the highlight tool and this is the
20:57 - coordinate system so here we have y here
21:01 - we have x and here we have z because
21:04 - this is a 3d game
21:06 - and basically up on the y is plus down
21:10 - is minus on the x axis to the right is
21:13 - plus which means the positive side and
21:16 - on the left is negative and for the z
21:19 - forward is the positive and backwards is
21:22 - the negative and basically here this we
21:26 - are testing if we are touching the
21:28 - vertical axis which is the y-axis that's
21:32 - the vertical axis but we're going to use
21:34 - this to move our character forward and
21:37 - right here below we're going to say else
21:40 - if input dot get axis and here we're
21:43 - going to say vertical if that is less
21:46 - than zero
21:48 - then that means we're going downwards
21:50 - and to paint a clear picture i'm going
21:52 - to use here print
21:54 - and i'm going to say the value is and
21:56 - i'm going to say here plus and we're
21:58 - going to use this input and vertical so
22:01 - that you can see the output actually
22:04 - of this what this value will be
22:08 - so if i go back here in unity and let me
22:10 - go into the console
22:12 - and clear it so if i hit the play button
22:15 - pay attention now as long as i'm not
22:16 - pressing anything it will be zero but
22:18 - when i start pressing so i started
22:20 - pressing actually did not so now i'm
22:22 - gonna start pressing and i'm pressing
22:23 - the up arrow key
22:25 - and this is what we have let me just go
22:27 - here because it happened so fast it's in
22:29 - the update function it
22:32 - updates every frame in a second so pay
22:34 - attention here this is where i started
22:36 - to press and notice the value is 0.04
22:39 - then
22:40 - 0.096 then 0.14
22:43 - then 2 1 then 3 1 up to 1. so it goes
22:48 - from 0 up to 1 in these increments that
22:51 - we just saw so 0.1 then 0.15 then 0.2
22:55 - sun and so forth you get my point and
22:57 - for the negative if you press down that
22:59 - is the s key or the down arrow key you
23:03 - will get from zero to negative one and
23:06 - you saw the increments it goes slowly
23:08 - from zero up to one if you want to go
23:11 - directly from zero to one then you will
23:13 - use get axis raw
23:16 - get axis raw has the same exact
23:18 - effect it will detect when you click or
23:22 - actually when you press the up arrow key
23:23 - or the w key or
23:26 - when you press the s key or the down
23:28 - down arrow key but when you press the up
23:31 - key and w it will return from zero to
23:33 - one but it will go directly from zero to
23:35 - one it will not go in these increments
23:38 - that we just saw you can print this and
23:39 - see for yourself now one other thing
23:43 - that i don't like about this code is
23:45 - this right here not the word vertical
23:48 - but instead me hard coding values this
23:51 - is something i don't like to do so if we
23:54 - go here in unity and go back in the
23:56 - project tab
23:58 - inside of the scripts folder i'm going
24:00 - to right click and create a new script
24:02 - that i'm going to call tags so tags and
24:06 - here i'm going to double click it we're
24:08 - not going to attach it on any game
24:10 - object and i am going to remove this
24:13 - public class declaration
24:15 - so what are we going to do why why this
24:18 - why did this go right here so what are
24:21 - we going to do with in our class well
24:24 - first of all i'm going to create here a
24:26 - public class
24:28 - called axes
24:30 - and here we're going to have a public
24:32 - constant string and i'm going to call
24:36 - this one vertical so vertical axis which
24:40 - is going to be equal to vertical like
24:43 - this
24:44 - and we're also going to have a public
24:46 - constant
24:47 - string and this one is going to be
24:48 - horizontal so horizontal
24:52 - axis which is going to be equal to
24:54 - horizontal as you can assume because
24:56 - we're going to have vertical and
24:57 - horizontal now don't mind these red
25:00 - errors that i have this because my
25:02 - computer was open
25:04 - for such many time or for so long so i
25:07 - have to close visual studio and reopen
25:10 - it again
25:11 - to make this actually work so now when
25:14 - it's open bam here it is
25:17 - so now everything is working like a
25:19 - charm
25:20 - as i said i don't like hard coding
25:22 - values like here because if we use this
25:25 - on two places or even more it can happen
25:27 - that i misspelled something because if i
25:29 - type vertical with lowercase v it's not
25:32 - going to work even though the word is
25:33 - the same so capitalization needs to be
25:36 - the same and when we use it like this
25:39 - when you when we declare it in a single
25:41 - place we can simply do this we instead
25:43 - of typing it like this we simply say
25:46 - here
25:47 - axis dot vertical axis and bam this is
25:50 - it and here we do the same thing axis
25:53 - that vertical axis and back it's the
25:55 - same exact thing except here
25:58 - we have it in one place and notice here
26:00 - this constant constant will not change
26:02 - same like in math now you don't have to
26:04 - be imaginious to know that but basically
26:06 - if i do something like this if i say
26:08 - axis that vertical axis is equal to me
26:11 - changing it it is not going to work
26:14 - because it's a constant
26:17 - anyways moving forward now we are
26:20 - detecting if we touch
26:22 - or if we press the up arrow key or the w
26:24 - key and here if we press the down arrow
26:26 - key and the s key so if we press the up
26:29 - arrow key we want to move forward and in
26:31 - order to do that we're going to see here
26:33 - vector 3 move direction is going to be
26:36 - equal to transform forward what the hell
26:39 - is this transform forward well if i
26:41 - hover over it says the blue axis of the
26:44 - transform in the world space in order to
26:47 - paint a clear picture if i take my
26:49 - warrior here inside of the scene and i
26:51 - zoom him on him do you see this blue
26:54 - axis this blue
26:55 - arrow that i'm taking and dragging him
26:58 - this is that axis indicating the forward
27:01 - so no matter where he is because we can
27:03 - rotate him if i do something like this
27:06 - and i rotate him you see now forward is
27:08 - this way not the way where it was so
27:11 - basically it was this way forward but
27:13 - when we rotate him
27:15 - you saw what i mean and this right here
27:18 - that transform forward is telling us the
27:21 - move direction is to move forward so now
27:24 - we're simply going to say move direction
27:26 - dot y minus equals gravity multiplied
27:29 - with time dot delta time in order to
27:32 - apply gravity this is what i was talking
27:34 - about in the beginning so
27:36 - when we attached actually the character
27:38 - controller i said that we need to
27:40 - manually apply gravity to our character
27:43 - and this is how we do it this is how we
27:45 - apply gravity by subtracting from y
27:48 - gravity multiplied with time dot delta
27:50 - time why time that delta time well
27:52 - because
27:53 - we are calling the move function in the
27:56 - update and if you want to smooth out
27:58 - things because update is called every
28:00 - frame or actually once per frame if we
28:03 - have 60 frames in a second that's 60
28:06 - times in a single second this function
28:07 - will be called which means this one will
28:09 - be called as well because we are calling
28:11 - it in the update now if we subtract from
28:14 - y gravity only which is 9.8 that's a
28:18 - very very it's going to happen very fast
28:21 - it's a huge number and we are
28:22 - subtracting that every frame 60 times in
28:24 - a second that's why we need to multiply
28:26 - it with time that delta time and time
28:28 - dot delta time is the difference
28:32 - between each frame so how many time it
28:34 - took to go from last frame to the next
28:36 - one that is the delta time and it's a
28:39 - very low value and this why on that that
28:41 - is the reason why we use it to
28:43 - smooth things out
28:45 - so moving forward we have here applying
28:48 - our gravity the next thing to do is
28:49 - simply call our character controller and
28:51 - move in order to move our game object so
28:54 - we pass here the move direction this is
28:56 - where we want to move multiplied with
28:58 - the movement speed
29:00 - multiplied with the time dot delta time
29:02 - to smooth things out again smoothing
29:04 - things out with time dot delta time same
29:07 - reason as what i explained right here
29:10 - and this is we're moving
29:12 - in this direction but we are multiplying
29:15 - that with the speed movement in order to
29:18 - speed up the movement
29:20 - now what i'm going to do is here for our
29:23 - negative or actually when it's lower
29:25 - than zero that means we need to go
29:27 - backwards so i'm simply going to copy
29:29 - these lines of code and paste them right
29:31 - here
29:32 - and since we don't have transform
29:34 - backwards
29:36 - we have forward but we don't have
29:37 - backward i'm simply going to use the
29:39 - negative so i'm going to say minus
29:41 - transform forward which is simply the
29:44 - negative up forward what is what is
29:47 - negative
29:48 - forward it's backwards think of it as
29:51 - opposites
29:52 - so this is going to have the same effect
29:54 - except backwards and here we are using
29:58 - move direction which is now backwards
30:00 - multiplying that with the movement speed
30:02 - multiply that with the time dot delta
30:04 - time and we can test it out so if i go
30:06 - here and one thing another tip from me
30:10 - take notes when i say these tips if you
30:12 - want for example if this is where you
30:14 - want your camera to look for example in
30:17 - your scene or when you run the game
30:19 - instead of using the camera and
30:21 - positioning it i know i don't know it's
30:23 - 10 20 30 position for example and this
30:26 - is where that position is or dragging it
30:28 - and dropping it simply what you're gonna
30:31 - do is position here the view how you
30:34 - want it or where you want the camera to
30:36 - look in the scene select the main camera
30:39 - in the hierarchy and on mac hold shift
30:42 - and command on windows it's control
30:44 - command and press f so when you press f
30:47 - so now pay attention where the camera is
30:49 - exactly same place where we are looking
30:51 - in our scene
30:53 - now that we have that done i can hit the
30:55 - play button and i can test this out so
30:57 - we have the player in voila i'm pressing
30:59 - the w key now i'm pressing the arrow key
31:02 - up arrow key and w is moving forward i'm
31:04 - pressing the back arrow key and now i'm
31:06 - pressing the s key he is moving
31:09 - backwards
31:11 - so a lot this works
31:13 - the next thing on our agenda is to
31:15 - rotate our game object or the player so
31:18 - let me just go here and this one is for
31:20 - the move and here void rotate
31:24 - and this one is for the rotate which we
31:26 - are going to call right here in the move
31:28 - so we're going to say a rotate like this
31:30 - because
31:31 - move is called in the update and we can
31:33 - safely call rotate below it or you can
31:36 - simply take the rotate outside and you
31:38 - can call it here it does not matter it's
31:40 - the exact same effect
31:43 - so in the rotate we are going to say
31:46 - here vector 3 which is the rotation
31:49 - underscore direction by default i'm
31:51 - going to say it's equal to vector 3 0.
31:53 - this is the default one because
31:56 - vector 3 0 is a shorthand for writing
32:00 - vector 3 0 0 0 for x y and z because
32:03 - we're going to detect input again we're
32:05 - going to say if
32:07 - input dot get axis and we're going to
32:09 - see here x is horizontal axis if that
32:12 - value is greater or actually if it's
32:16 - lower than zero
32:17 - and here we're going to say else if
32:19 - input dot get axis and again here x is
32:23 - that horizontal now here we're gonna
32:25 - test if it's
32:27 - greater than zero
32:29 - and we're gonna do the following so if
32:31 - it's lower than zero that means we are
32:32 - pressing the a key
32:34 - again this is the coordinate system this
32:37 - is the horizontal axis meaning the
32:39 - x-axis going to the right side is the
32:41 - positive going to the left side
32:44 - is the negative so if we press the a key
32:47 - or the left arrow key we're going to the
32:49 - left side which is negative which means
32:51 - this right here will be lower than zero
32:53 - if that is the case we're simply gonna
32:55 - say here rotation direction is gonna be
32:58 - equal to transform that
33:01 - transform point or actually transform
33:03 - direction and here we're gonna say
33:06 - vector three dot left
33:08 - now i'm simply going to copy this and
33:11 - paste it here and you can assume that
33:12 - here it's going to be vector3 dot right
33:15 - and by the way this one is going to be
33:16 - separate so we're not going to do
33:18 - if else or else if and why why did he
33:21 - give me this axis here anyway here i'm
33:24 - going to say if input get axis
33:27 - we are not going to use if else simply
33:29 - we're going to do if and if
33:33 - because
33:34 - we can press these buttons
33:36 - simultaneously so if we press the a key
33:38 - or the d key they will cancel each other
33:40 - out
33:41 - anyways moving forward what is this
33:43 - transform direction well if i hover over
33:46 - it's gonna say transforms the direction
33:47 - from local space to world space what is
33:51 - that what is local space what is world
33:53 - space
33:54 - let's go back in unity to explain the
33:55 - local space if i take the warrior
33:58 - and of course i'm gonna go in the scene
33:59 - first and zoom in on the warrior this is
34:02 - my warrior game object if i right click
34:04 - on him and create an empty game object
34:07 - that i am going to tag here with this
34:09 - orange or yellow tag you see this game
34:12 - object right now inside of our so he's
34:15 - basically inside of our game object our
34:17 - hero if i move him here and now he is in
34:21 - front of him if i take the x set it at
34:24 - zero take the y set it at zero take the
34:26 - z set it at zero now he is back at the
34:29 - center and his center is around his
34:33 - warrior player that he's his local axis
34:36 - that is the local axis his own origin so
34:40 - his own origin of that game object and
34:43 - with origin i mean where that game
34:46 - object goes when we set 0 0 0 for x y
34:49 - and z or when we reset the position on
34:51 - the transform where does he go that is
34:54 - his origin or his local axes local
34:58 - position that is if i go here you see
35:00 - transform direction from local space to
35:02 - world space
35:03 - but what is the world space well world
35:06 - space is all of this here you see
35:08 - everything that we see here so where our
35:11 - cube is are actually our ground where
35:13 - our battle arena is where our player is
35:15 - that is unity's world space and this is
35:18 - where we are moving when we move this
35:21 - character we are moving him in the
35:22 - unity's world space that's where
35:25 - everything happens so we are
35:27 - transforming the direction here which is
35:30 - vector 3 left
35:32 - and if you go here a shorthand for
35:34 - writing negative 1 for x 0 0 for y and z
35:38 - and the right is positive 1 for x 0 for
35:41 - x for y and z basically we are
35:44 - transforming this into the world space
35:47 - and this will transform it into the left
35:50 - side of our game object inside of
35:53 - world space and it will do the same
35:55 - thing here for the right direction
35:59 - so now that we have the input for the
36:01 - left and the right direction we have
36:03 - here the rotation direction right here
36:05 - we are going to say if input dot or
36:08 - actually now we need to
36:09 - rotate our game object so we're going to
36:11 - say if a rotation direction is not equal
36:14 - to vector3.0
36:17 - so if it's not equal to zero
36:20 - that means that we have here input and
36:22 - that's the reason why i'm setting it
36:23 - here to be equal to zero because we are
36:25 - resetting it every time
36:28 - if we don't reset it res at it reset it
36:32 - here then the value that we get here
36:35 - will stay the same and here it will stay
36:37 - the same every single time so we need to
36:39 - basically reset it here to zero so
36:42 - vector three zero but if it's not equal
36:44 - to vector three zero that means we got
36:46 - input here
36:47 - so what we're gonna do is simply we're
36:48 - gonna say transform a rotation e is
36:51 - equal to quaternion dot rotate towards
36:55 - and this will rotate from
36:58 - rotation that is from the transform
37:00 - rotation to rotation it's going to be
37:03 - quaternion look rotation it's going to
37:06 - be a rotation direction
37:08 - in the given speed
37:10 - and or actually degrees and the degrees
37:13 - is going to going to be a rotate degrees
37:16 - per second multiplied with time dot
37:18 - delta time
37:20 - what the hell is going on here teacher
37:23 - what are you doing you are driving me
37:25 - crazy and okay let me just calm down
37:28 - calm down i'm gonna not drive drive you
37:30 - crazy anymore anyways
37:32 - you see here transform rotation is gonna
37:34 - be equal to this rotate towards you see
37:37 - here rotates a rotation from towards two
37:42 - this is from
37:43 - so it will rotate from this rotation
37:46 - to this rotation in basically these or
37:49 - this degrees but
37:51 - this is clear it will rotate from the
37:53 - current rotation it has towards this
37:55 - rotation right here now look rotation
37:57 - basically creates a rotation with a
37:59 - specified forward and upward direction
38:04 - basically this will do the following
38:06 - since we are rotating around the y-axis
38:10 - this is the y-axis and it will create a
38:12 - rotation around the y-axis and the
38:14 - forward will be
38:16 - placed on the y-axis basically if the y
38:19 - rotates over here so now y
38:22 - is here then the forward will be here
38:24 - you get my point now the reason for that
38:26 - is because let me take our warrior
38:30 - you see here pay attention pay attention
38:32 - to the blue axis so this one right here
38:34 - if i rotate him you see
38:36 - you see how the blue axis rotates along
38:39 - with him basically this is what we are
38:41 - doing with look rotation it will look at
38:43 - the rotation from the y-axis it will
38:45 - basically rotate it from the y-axis
38:48 - which is what we want we want to rotate
38:50 - on the y-axis
38:51 - and this is the degrees by which we are
38:54 - rotating the game object so rotation
38:56 - degrees per second that we added here
38:58 - 180 multiply that with the delta time to
39:01 - smooth it out if we don't smooth it out
39:04 - every frame we will rotate exactly 180
39:07 - degrees and that will be fast
39:10 - really fast so if you want to test it
39:12 - out you can do it by simply doing this
39:14 - right here basically let me just do it
39:16 - just to test out and show you the
39:18 - effects of the smooth time so if i go
39:21 - here and if i run the game so pay
39:24 - attention now if i rotate you see this
39:26 - is what happens when you rotate like
39:27 - this you see this is what happens
39:29 - because we are rotating so fast
39:31 - this is 180 degrees per second if we
39:34 - don't multiply it with the delta time to
39:36 - smooth it out
39:38 - then you saw the effect exact same thing
39:40 - will happen for this year if you don't
39:41 - multiply without the time exact same
39:43 - thing will happen here if you don't
39:45 - multiply that with time dot delta time
39:48 - but if i hit the play button now that we
39:50 - are multiplying that with delta time pay
39:52 - attention now i'm gonna press right
39:53 - right actually so right you see how he's
39:56 - rotating now smoothly and left and he's
39:58 - rotating also smoothly so now we can
40:00 - move and rotate so now our game object
40:03 - can move and rotate at the same
40:07 - time you see
40:08 - moving and rotating and voila
40:11 - so i'm pressing left and i'm pressing
40:13 - right and he's rotating towards the
40:15 - direction where i am pressing
40:20 - voila this is how we move a character
40:22 - and how we rotate a character so the
40:25 - next thing to do is to make the camera
40:28 - follow the player of course we also need
40:29 - to animate him but using the camera to
40:32 - follow him will be much easier because
40:34 - there is less code involved so i'm going
40:36 - to right click here and go on create and
40:38 - see sharp script and i'm going to call
40:40 - this one camera follow and i'm going to
40:42 - show you two ways how can we make the
40:45 - camera follow the player because this is
40:46 - programming there is always more than
40:50 - one
40:51 - way to solve a problem so select the
40:54 - main camera and drag and drop the camera
40:56 - follow script on the main camera so drag
40:59 - and drop the camera follow script on the
41:01 - main camera i'm simply going to double
41:03 - click it and open it here in visual
41:06 - studio and let me just tag the class and
41:08 - we don't need here that many lines of
41:11 - code basically we need the following so
41:13 - we need a private transform which i'm
41:16 - going to call target
41:18 - and this is going to be our player we
41:19 - will get to it in a moment we also need
41:22 - a private vector3 offset now
41:26 - it's a private variable because i don't
41:28 - want it to be accessible in other
41:30 - classes but i also want it to be visible
41:32 - here in the inspector panel because i
41:34 - want to edit it so in order to do that
41:37 - we simply open square bracket and type
41:39 - serialize
41:40 - serialize field and voila so open square
41:44 - bracket close square bracket in between
41:46 - type
41:47 - serialize field because now
41:49 - if i go back in unity that private
41:51 - variable will be visible here in the
41:53 - inspector panel bam and here it is
41:55 - right here
41:58 - and you can simply remove what did i do
42:01 - so let's go back here and you can simply
42:03 - let me just hide this
42:05 - so you can simply remove this line of
42:06 - code to test it out to see for yourself
42:09 - if you remove it it will not be visible
42:11 - in the inspector panel anymore
42:14 - so moving forward from the awake
42:17 - function not the start i'm gonna get the
42:19 - target so i'm gonna say target is gonna
42:21 - be equal to game object find the game
42:23 - object with the tag player tag dot
42:26 - transform because we're getting the
42:27 - transform property again two things two
42:30 - issues we have here first of all this
42:32 - right here is a no no i don't like it so
42:35 - we need to go back here in our tags and
42:37 - we're gonna create a public class called
42:39 - tags
42:41 - and we're simply going to have a public
42:43 - constant string
42:45 - player underscore tag which is going to
42:47 - be equal to player this is the first
42:49 - thing and the first issue same as with
42:51 - our axes and i explained that why
42:54 - so if i go back here remove this
42:57 - and we're gonna say tags dot player tag
42:59 - it's the same exact effect now in order
43:01 - for this to work you need to make sure
43:03 - that your player the warrior when you
43:06 - select him and right here you have the
43:09 - tag property in the inspector panel you
43:11 - see where i'm pointing with the mouse
43:13 - you can click on it so let me just hide
43:15 - here and you can click on it and you
43:17 - need to select the player tag by default
43:19 - i think it's from unity 5 version and
43:22 - upwards
43:23 - you have here
43:25 - a tag player if by any chance you don't
43:27 - have it you're gonna click here on add
43:30 - tag so click on add tag and now here we
43:33 - see tag and list is empty click on this
43:35 - plus button so this small plus button
43:38 - right here that i just pointed to
43:40 - so when you click on it it will open
43:42 - this short window you would you will
43:44 - type here your tag
43:46 - click save and then that tag will be
43:49 - available to you
43:51 - so uh now that you created a tag you're
43:53 - simply gonna select the game object go
43:56 - here and tag it so click on the tag you
43:58 - want to tag it and pay attention please
44:00 - please this is a tip so note it down
44:03 - if the name here is player with p
44:06 - capital case p it needs to be the same
44:09 - exact name right here if you type here
44:11 - lowercase p it will not work even though
44:13 - it's the exact same word so
44:15 - capitalization also needs to be in order
44:18 - this is really important
44:20 - so now we have a reference to our player
44:22 - we have the offset here inside of our or
44:26 - actually below the update we're gonna
44:27 - create void
44:28 - follow player and we are going to call
44:31 - this function inside of the late update
44:35 - function so no update but late update
44:37 - function and what the hell is a late
44:39 - update
44:40 - well let me first explain
44:42 - we have the update function
44:44 - and we have the fixed update function
44:47 - update function is called every frame in
44:50 - a second basically if we have 60 frames
44:52 - in a second
44:54 - then it will be called 60 times update
44:56 - function is good for moving a game
44:58 - object using the transform property or
44:59 - the character controller as we are
45:01 - already doing and also for getting input
45:04 - which we are also doing here so we're
45:05 - getting input we do that in the update
45:07 - function
45:09 - fixed update function is not called
45:11 - every frame but it's called in a fixed
45:13 - number frame intervals what does that
45:15 - mean it's basically called every third
45:17 - or fourth frame and this right here is
45:19 - dependent or that is dependent on if we
45:22 - go under edit
45:24 - and go here under project settings and
45:26 - then time if you take a look here let me
45:29 - just clear it with the pencil you see
45:31 - here this fixed time step is set to 0.02
45:35 - it's dependent on that time basically
45:37 - fixed update function will be called
45:39 - every 0.02
45:42 - of a second
45:43 - and it's good for physics calculations
45:46 - so if you want to move your game object
45:48 - using the rigid body you will do it in
45:50 - the fixed update but what the heck now
45:52 - is the late update well late update is
45:55 - same as update it will be called every
45:57 - frame but it will be called after the
46:00 - update finishes so if we have something
46:02 - like this for example i don't know int a
46:05 - b and c and we want to say here c is
46:08 - equal to a plus b
46:10 - this calculation will be already done
46:13 - and we can use the value of c in the
46:15 - late update and it will be this value
46:17 - here calculating a plus b and it will
46:20 - give us the value c and we will be able
46:22 - to use that in the late update late
46:25 - update is really good for using code or
46:27 - typing out code that will be
46:29 - for for example like this in order to
46:31 - follow the player because we are moving
46:34 - the player as you can see here in the
46:35 - update so in the update we will
46:37 - calculate his position and he will
46:39 - arrive at that position
46:41 - so now in the late update we already
46:43 - know where the player's position is and
46:45 - we can follow him smoothly
46:48 - now in order to follow the player
46:49 - smoothly what we simply need to do is we
46:52 - need to say transform that position our
46:54 - own position of the camera
46:56 - is equal to target
46:58 - player so the target which is the player
47:01 - transform as you can see right here and
47:03 - we're going to use the player transform
47:05 - to
47:06 - transform direction or actually
47:08 - transform the point and we're going to
47:11 - transform the point off set so offset
47:15 - and basically let me just go here i'm
47:17 - going to name it offset
47:19 - position not to be confused with that
47:20 - wrapper offset it's offset position
47:23 - what is transform point you see here
47:25 - transforms position from local space to
47:28 - world space again basically
47:31 - same thing as what we did with transform
47:33 - direction it will transform this point
47:36 - from the local point of the target but
47:38 - pay attention here pay attention please
47:40 - we're using here target which is the
47:42 - player's transform as you can see here
47:45 - so it's the player's transform it will
47:47 - transform that point
47:49 - from the position of the player so from
47:52 - the position of the player it will
47:54 - transform that point
47:56 - and it will transform it from his local
47:59 - position to the world position and if we
48:03 - test it out right now the beauty here is
48:06 - that our main camera now has these
48:10 - visible inspector variables for the
48:12 - offset x y and z and what we can do when
48:14 - i hit the play button you will see now
48:16 - where the camera is it's basically here
48:17 - but what i can do is i can move here the
48:19 - y-axis i can move the z-axis you see now
48:23 - and i can set it where exactly i want it
48:26 - to be in order to follow our player and
48:28 - i can set here zero for our y-axis and
48:32 - basically
48:33 - what i'm going to do is i'm going to set
48:35 - this at 30.
48:37 - so 30 for the camera for the rotation
48:39 - and 0 for the rotation y
48:42 - but if i hit the play button now you
48:44 - will see that it will transform now that
48:46 - position and what i can do is this
48:49 - so voila
48:50 - you see now this is how i can make the
48:52 - camera follow the player now of course
48:54 - here for these values i'm going to say
48:55 - 2.25 for the y
48:58 - and for the z negative
49:00 - 1.9 or actually it can be a little
49:03 - closer
49:04 - something like this maybe negative one
49:07 - this depends on you but now
49:09 - pay attention now that we saved or
49:11 - actually we did not save these values
49:12 - because we are in the play mode
49:14 - what i'm gonna do is click on this gear
49:16 - icon you see the gear icon on the camera
49:19 - so click on the gear icon and it will
49:21 - open this list here and you're gonna
49:22 - click on copy component
49:25 - so when you copy the component now and
49:27 - if i go back here you will see that the
49:29 - values are back to zero because we edit
49:31 - edited
49:33 - those values inside of the gameplay mode
49:36 - which means they will not be saved in
49:38 - order to save it we did that gear icon
49:41 - copy values so now that we have them
49:42 - copied we're gonna see here paste
49:44 - component values bam and voila so now we
49:48 - have the values here negative one for z
49:50 - 2.25 for y and if we test this out right
49:54 - now if i hit the play button you will
49:56 - think that the camera is going to follow
49:57 - the player which actually is the case
49:59 - but if i rotate you'll see what is
50:01 - happening
50:02 - this is not the effect that we want to
50:05 - achieve now we got carried away we
50:07 - programmed the position of our camera
50:09 - but we did not take the rotation into
50:12 - consideration and i like to do things
50:13 - like this i like to show what is the
50:15 - problem and i like to show what is the
50:17 - solution to the problem because we are
50:19 - rotating our character we saw that so we
50:21 - are rotating the character right here as
50:23 - you can see and let me just move this
50:25 - backwards so we are rotating the
50:27 - character but we also need to rotate the
50:29 - camera so here i need to say transform
50:31 - that rotation is going to be equal to
50:34 - target dot rotation simple like that
50:36 - because our transform rotation is the
50:39 - rotation of the camera
50:41 - so transform referring to this class or
50:43 - that game object that's holding this
50:45 - class so transform and rotation is going
50:47 - to be equal to the target rotation and
50:49 - target that rotation is the player's
50:52 - rotation so the rotation of the player
50:55 - game object and now if we go back in
50:58 - unity and if i hit the play button you
51:01 - will see that when we rotate our player
51:04 - we will also rotate you see rotating the
51:06 - player rotating the camera and we can
51:09 - move the z-axis let's say negative two
51:11 - yeah negative two for the z-axis
51:14 - remember that or actually just close the
51:16 - game select the main camera and set
51:18 - negative two for the z-axis so negative
51:22 - two if i hit the play button again
51:25 - now we move forward we rotate the camera
51:28 - rotates along with the player
51:32 - so this is how we do it we also set the
51:34 - position and the rotation if we also
51:37 - want to follow the rotation of the game
51:38 - object
51:40 - now is there another way to make the
51:42 - camera follow the player a more simple
51:44 - way of course it is because this is
51:45 - programming this is creating an
51:47 - application and there are multiple ways
51:50 - always to solve a certain problem
51:53 - this one is much simpler and for that
51:56 - i'm simply going to duplicate the main
51:57 - camera
51:58 - and i'm going to set this main camera
52:00 - turn off the first one the main one and
52:02 - this one i'm going to rename to camera
52:05 - in player so i'm going to rename it to
52:07 - camera and player and i'm also going to
52:09 - remove the camera follow script because
52:10 - we don't need it so remove component so
52:13 - remove the component camera follow
52:15 - script
52:16 - and what i'm gonna do is simply drag and
52:18 - drop this camera on the warrior game
52:20 - object and it will make it a child of
52:23 - the game object so basically now
52:25 - wherever we move if i hit the play
52:27 - button because the parent is moving you
52:29 - see now the child is moving as well and
52:32 - the best thing here is you can position
52:33 - the child wherever you want so we can
52:36 - say the x position for the camera is
52:37 - going to be 0 the y position 2.7 and the
52:41 - z position can be negative let's say 1.8
52:45 - so negative
52:46 - 1.8 will be the
52:50 - z
52:50 - position and rotation we can leave 30
52:53 - for x only and basically this is how it
52:55 - looks like so you can rotate it like
52:57 - this however you want it but i'm gonna
52:59 - set it at 30. again you can experiment
53:01 - with this this is totally up to you
53:04 - the more you try the more you will learn
53:06 - i encourage you to try all the time so
53:09 - experiment with it
53:11 - now that we have this camera as a child
53:14 - of our player game object i'm simply
53:15 - going to hit play and when wherever the
53:18 - player goes and however he rotates the
53:21 - camera simply follows without a script
53:23 - because
53:24 - what the parent game object does the
53:26 - child will follow and the warrior here
53:29 - is the parent the top most parent all
53:31 - game objects when you click on the drop
53:32 - down list on the warrior all these game
53:34 - objects are children of the warrior game
53:37 - object and if we click here on the drop
53:39 - down list for this vip00
53:42 - these footsteps are children or a child
53:45 - game object of this
53:46 - vip001 so on and so forth you get my
53:49 - point but they all are
53:51 - the
53:52 - child of the topmost parent which is the
53:54 - warrior now we need to hit apply because
53:56 - we attach this camera in the player but
53:58 - again this is another solution depending
54:01 - on your situation so sometimes you also
54:03 - want to have the camera inside as a
54:05 - child and it will follow the player
54:07 - wherever
54:09 - he goes and it's more simple basically
54:12 - we did two ways one was using a script
54:14 - and another one is simply making the
54:16 - camera game object as a child and it
54:19 - will follow the parent wherever the
54:21 - parent goes the next thing to do is to
54:24 - create the animations and we're gonna go
54:26 - here in the models and here we have the
54:28 - animation so right here i am going to
54:31 - right click here where all these
54:32 - animations are so right click and i'm
54:34 - gonna create and i'm going to create an
54:36 - animator controller so click here and
54:39 - i'm going to call it
54:40 - warrior controller
54:43 - like this
54:44 - because if i select the game object
54:47 - which is our warrior you will see that
54:48 - he already has an animator component
54:51 - attached on him so here it is
54:54 - and we simply need to drag and drop this
54:56 - animator controller the one that we have
54:57 - just created we need to drag and drop
54:59 - him right here in this empty field and
55:02 - then we can add animations to it and we
55:05 - can control it vi code so if i take here
55:08 - the warrior controller drag and drop it
55:10 - here bam so this is the controller now
55:12 - we have it attached on the animator of
55:14 - the warrior the next thing to do is go
55:17 - inside of the animator tab itself and
55:19 - this is where we are going to create the
55:21 - animations now if you don't have this
55:24 - tab what you're gonna do
55:26 - is the following go under window and
55:28 - then you have here animation and here it
55:30 - is animator tab so this one right here
55:33 - so you have the animation you have the
55:34 - animator
55:35 - we want the anime tour so animator this
55:38 - one right here now in order to create
55:40 - these animations basically we don't need
55:42 - to they are already created here but we
55:44 - only need to connect them with the
55:45 - controller so while you're in the
55:47 - animator tab right here right click and
55:50 - create state and empty so right click
55:54 - create state empty voila this is going
55:57 - to be the idle animation and in order to
55:59 - rename this one you see the name is new
56:01 - state if you want to rename it simply
56:03 - click on it
56:05 - and now here in the inspector panel you
56:07 - will see here at the top let me just go
56:10 - here and clear the console or actually
56:11 - clear the pencil so here it is you see
56:14 - the state this is where you will
56:16 - rename it in here where it says motion
56:20 - is where we are going to drag and drop
56:22 - the motions or our animations so here
56:25 - new state is going to be idle
56:27 - and simply what we need to do here is
56:29 - you see we have the idle zero and we
56:32 - have the idle attack so if i select this
56:35 - one this is that animation if i go here
56:37 - and preview it so click the animation
56:40 - basically clicking on the drop down list
56:42 - for this idol and here we have idle
56:45 - underscore zero now if i preview it so
56:48 - if i zoom in on this preview here at my
56:50 - bottom right corner and this is the idle
56:53 - animation i'm not gonna preview the
56:56 - whole animation because it's long so go
56:58 - back here in animator click on idle and
57:01 - here where i said that you need to drag
57:02 - and drop that animation or motion
57:05 - right next to it you have a little
57:08 - circle let me show that circle it's
57:11 - right here you see
57:13 - when you click on that circle you will
57:15 - be able to select these animations so
57:17 - here we have idle zero and select the
57:19 - idle zero and voila idle zero is not
57:23 - here
57:24 - why
57:25 - well if we go here in the console it
57:26 - says
57:28 - animation clip idle zero cannot be used
57:30 - in the state idol legacy animation clips
57:32 - are not allowed in animator controller
57:35 - what does that mean basically it means
57:37 - the way how we import them so we need to
57:39 - select all of these animations so select
57:41 - from attack 0 to idle attack 0 and walk
57:45 - select all of these animations
57:48 - and right here now inside of the
57:50 - inspector panel on my right side you see
57:52 - here we have model tab we have the rig
57:54 - animation material model so on and so
57:56 - forth
57:58 - click on the rig tab
58:00 - in the rig tab we're going to change the
58:02 - animation type from legacy to generic so
58:04 - again click here generic click on the
58:07 - drop down list where it says legacy
58:09 - which is right here this right here you
58:13 - see
58:13 - when you click on that drop down list
58:15 - you will change it from legacy to
58:16 - generic and you will hit apply and bam
58:20 - unity will you see like re-import these
58:24 - assets with this animation type but it
58:26 - will re-import these assets right here
58:28 - only these animations and of course it
58:31 - takes a little bit of time where i can
58:33 - use it to sing no no
58:38 - i had fun recording these videos man
58:40 - anyways animation type will be generic
58:43 - and you hit apply and you see unity
58:45 - re-imports them and voila we are good to
58:47 - go
58:48 - so now select the idle animation click
58:50 - on the circle and now select the idle
58:53 - underscore zero animation it works here
58:56 - is our idle animation i can even now
58:58 - preview it if i select the warrior
59:01 - inside of the hierarchy panel and if i
59:03 - go into the animation tab so not
59:06 - the animator tab but animation which is
59:08 - located here window animation in
59:11 - animation this is the animation tab so i
59:14 - can click here the play button to
59:16 - preview it and now we are previewing
59:18 - the
59:19 - we are basically previewing the
59:22 - idle animation for our player c is like
59:25 - moving this is all diagonal animation
59:27 - everything here that you see is
59:28 - basically the idle animation and why am
59:32 - i
59:33 - why am i actually
59:34 - running the game anyways this is the
59:36 - idol animation as you just saw
59:39 - so let's go back and create the rest of
59:41 - these animations so we have here the
59:43 - idol we are also going to have the walk
59:44 - animation so right click here create an
59:47 - empty state and i'm going to call this
59:49 - one walk
59:50 - and i'm going to click on the little
59:52 - circle and i am going to select the walk
59:54 - animation
59:56 - we are also going to have the attack
59:58 - animation so right click here
60:00 - empty state and this one is going to be
60:03 - attack
60:04 - one
60:05 - and like this
60:07 - we are also going to have another one
60:10 - for the attack but let me just click
60:12 - here on the circle and for the attack
60:14 - one i'm going to select attack
60:16 - underscore zero
60:18 - and let me just preview it quickly so
60:20 - attack underscore zero
60:22 - yeah this is the one i want
60:24 - and right click again and create an
60:26 - empty and this one is going to be attack
60:29 - two rename it to attack two and for the
60:32 - state i'm going to select attack
60:34 - underscore one but let me quickly
60:36 - preview it here so attack underscore one
60:38 - if i preview it yeah exactly these two
60:42 - so underscore or attack underscore zero
60:45 - and attack underscore one and the last
60:47 - one is gonna be creed empty
60:50 - and this one is going to be our defend
60:53 - animation so defend like this and for
60:56 - our defend animation i'm going to click
60:58 - on the circle and
61:01 - here we have counter attack damage
61:03 - defense underscore zero so select the
61:06 - defense underscore zero again if we
61:09 - preview it
61:10 - it will be this one you see he's like
61:12 - moving his arm upwards to defend from
61:16 - the attack
61:18 - so now we have these animations
61:20 - we
61:21 - need to
61:22 - now create a script and handle these
61:25 - animations via script so when we move we
61:27 - want to simulate or play that move
61:29 - animation when we attack we want to play
61:30 - the attack animation you get my point
61:32 - but how can we do that
61:35 - well in order to do that we first need
61:38 - to create something that is called a
61:40 - parameter so we need to create something
61:42 - that is called a parameter and here
61:45 - click on the plus sign so click on the
61:47 - plus sign
61:48 - and the first parameter that we're going
61:50 - to create is going to be the walk
61:51 - parameter and if you notice i clicked on
61:53 - the plus sign and selected the bull so
61:55 - i'm going to do it again so delete it
61:56 - click on the plus sign and this one is
61:58 - going to be a boolean we are going to
62:00 - call him walk
62:01 - so a boolean walk parameter
62:05 - now the next parameter we're going to
62:07 - click on the plus sign here and we're
62:09 - going to create a trigger and this one
62:11 - is going to be defend
62:13 - and we're going to click on the plus
62:15 - button here and create another trigger
62:17 - this one is going to be attack one
62:19 - click on the plus button trigger and
62:21 - again attack but now two so attack one
62:24 - and two walk defend attack one and
62:27 - attack two
62:29 - these are parameters because we need to
62:31 - have transitions what are transitions if
62:34 - i right click on the idle animation and
62:36 - i click here make transition i can now
62:39 - point on the walk animation and click on
62:41 - it bam you see this white line going
62:43 - from idle to walk that means this is a
62:46 - transition from idle to walk animation
62:49 - that means when we call this transition
62:51 - in our code we will go from idle to walk
62:55 - animation but this transition in order
62:57 - for it to happen it needs to have a
62:59 - condition and this condition
63:01 - is right here when you click on this
63:04 - line here this arrow when you click on
63:06 - it it goes blue and you have the
63:08 - properties here in the inspector panel
63:10 - when you scroll a little bit down you
63:11 - will see here conditions and it's a list
63:14 - where we can click on this plus sign to
63:16 - add a condition well the conditions are
63:19 - going to be these right here these
63:21 - parameters
63:22 - so for example
63:24 - if i click on the plus sign here and i'm
63:26 - going to go from idle to walk
63:29 - when the walk parameter is equal to true
63:31 - and notice here in the drop down list i
63:32 - can select true or false because when we
63:35 - created this parameter it was a boolean
63:37 - boolean has a value true or false
63:39 - so we will go from idle to walk
63:42 - animation when the walk parameter is or
63:46 - has a value true and we will set that in
63:48 - our code so we will set it in the code
63:52 - for it to have the true
63:53 - value and when that happens we will
63:56 - transition from idle to walk animation
63:58 - similarly right click on the walk
64:00 - animation and make transition to the
64:02 - idol and now we have two arrows one
64:05 - pointing from idle to walk and another
64:07 - from walk to idle so click on that arrow
64:10 - and now i'm gonna click on the plus
64:11 - button here and the walk here is gonna
64:14 - be false because when walk is true we
64:16 - are gonna walk when walk is false we are
64:18 - gonna go back to the idle animation
64:23 - now we are also going to go from our
64:26 - idol to attack so click on idle make
64:28 - transition to attack
64:31 - and we're also going to make transition
64:32 - from attack back to idle so click on
64:35 - this
64:35 - transition from idle to attack and the
64:38 - condition here is going to be attack
64:40 - simply this right here attack one
64:42 - because we're gonna go from idle to
64:45 - attack one it's a trigger we will
64:47 - trigger that in our code we will see if
64:49 - something is not clear right now wait
64:51 - until we get to the code part then i
64:54 - will have more material to explain it
64:55 - more clearly to you we will see it
64:57 - visually and it will be even more clear
65:00 - so we are also going to go from idle to
65:02 - attack 2 and make transition back so
65:05 - click on the transition from idle to
65:07 - attack to and the condition is going to
65:09 - be
65:10 - attacked you don't worry about the
65:12 - transition from attack to idol we will
65:15 - cover that so don't worry we will cover
65:17 - that but basically
65:20 - from attack 2 to idle the transition or
65:22 - the parameter is gonna be when walk is
65:25 - equal to false same here from attack one
65:28 - to idle the transition is gonna be when
65:31 - walk is equal to false because
65:33 - why when walk is equal to false
65:36 - because we're also going to have from
65:37 - walk to attack one and from attack one
65:40 - back to walk and this transition from
65:43 - walk to attack one is also going to have
65:46 - a attack one trigger parameter but this
65:49 - parameter here when we want to go back
65:51 - from attack to walk that's when the walk
65:54 - will be equal to true and similarly here
65:57 - so from attack
65:59 - to back to walk and from walk to attack
66:02 - two click on the transition from walk to
66:04 - attack two click on the plus button
66:07 - and here we're gonna select attack to
66:10 - trigger
66:11 - and from attack two back to the walk
66:14 - walk will be true but we will do
66:16 - something else here as well so don't
66:18 - worry about that we will come to it we
66:21 - are also going to go in our code and
66:23 - then everything will be clear now we are
66:25 - also going to go from idle to defend and
66:28 - back from defend to idle so when we want
66:30 - to go from idle to defend that's when
66:33 - defend will be equal to true so when we
66:35 - click here actually this defend
66:37 - parameter excuse me we're going to
66:39 - delete it it's going to be a boolean so
66:41 - click here bool and defend is going to
66:44 - be a boolean parameter not a trigger so
66:47 - attacks are gonna be triggers but here
66:49 - we're gonna go from idle to defend
66:51 - when the defend parameter is equal to
66:54 - true
66:55 - and we are gonna go back
66:58 - from defend to idol when defend is equal
67:03 - to false
67:04 - right here now we're also going to go
67:06 - from walk
67:07 - to the defend
67:09 - and here we're going to set the
67:10 - condition defense is going to be equal
67:13 - to true but we're not gonna go back from
67:15 - defend to walk we're only gonna be able
67:17 - to go back from defense to idol
67:20 - nation now this is for setting them up
67:23 - we will see them again in action we will
67:26 - see them in action don't worry about
67:29 - that
67:30 - now before we start coding because we're
67:33 - gonna go here in assets and scripts and
67:35 - i'm gonna right click here and i'm going
67:37 - to create a new c sharp script and this
67:39 - one is going to be character animations
67:42 - this is where we are going to create our
67:45 - animations so this is where the
67:48 - animation magic is going to happen but
67:51 - one thing to note is remember those
67:53 - parameters that we used now let me
67:56 - demonstrate that so here we're going to
67:58 - have a private animator and i'm going to
68:00 - call him anim
68:01 - and in the awake function we are going
68:04 - to get a reference to it so anim is
68:06 - equal to get component animator
68:09 - component voila
68:11 - now this is where we are going to create
68:14 - our animations and our first animation
68:16 - i'm going to delete the update function
68:18 - is going to be public void walk which
68:21 - takes a bull so bull walk parameter and
68:25 - in order to execute it we need to call
68:28 - here anim set bool and that bull is
68:31 - going to be our walk parameter and we're
68:34 - going to set the value to this walk that
68:36 - we pass right here so we're going to set
68:39 - that walk
68:40 - because we need to call it with the name
68:42 - that's why we named it here if we go
68:44 - here in the animator
68:46 - and if we go into the parameters you see
68:48 - the name is walk it's same as with find
68:51 - game object with tags so the same with
68:53 - tagging we need to have the name here
68:55 - you see the walk it's capital w so also
68:58 - here it needs to be capital w or
69:00 - otherwise it will not work now this is
69:04 - what i was talking about a minute ago
69:07 - before we create these you see we have
69:09 - these parameters and you know i hate
69:11 - hard coding so we're going to go here in
69:13 - tags now when i say i hate hard coding
69:15 - there are there are some exceptions
69:18 - where you will use hard coding like this
69:20 - instead of creating it here but we will
69:22 - see examples of that in some other
69:24 - tutorial don't worry about that
69:26 - so don't worry that you will never use
69:28 - hard code but if you're going to use it
69:30 - often it's better to put it here in a
69:32 - single script so here i'm going to
69:34 - create a public class that i'm going to
69:36 - call animation tags so or actually not
69:40 - animations animation tag with without s
69:44 - here
69:44 - and here we're going to have a public
69:47 - constant strength this one is going to
69:49 - be the walk parameter
69:52 - and we're going to see here walk so the
69:53 - value is going to be equal to walk
69:55 - capital w so capital double u or
69:58 - otherwise it will not work because the
70:00 - names need to match up if here you have
70:02 - a lowercase w so if here you have a
70:05 - lowercase w then here as well you will
70:08 - use the lowercase the point is the name
70:10 - you put here
70:11 - for the parameter it needs to be exactly
70:14 - the same name you put right here
70:18 - so we also have a public constant string
70:21 - defense or defend
70:24 - parameter which is going to be equal to
70:26 - defend like this this is the value this
70:28 - is the name and we're also going to have
70:31 - a public constant
70:33 - so it's not connection what am i doing
70:35 - here const
70:37 - string and this is going to be attack
70:39 - underscore one underscore trigger
70:44 - which is gonna be equal to attack one
70:47 - like this
70:48 - and public
70:50 - so it's public constant string not
70:53 - public it's public
70:56 - and instead of using here attack
70:58 - underscore 2 underscore trigger because
71:01 - i want to differentiate them i think it
71:03 - will be better if we put them like this
71:05 - so it's attack
71:07 - underscore trigger underscore 1
71:10 - and attack underscore trigger underscore
71:13 - two because i can see this one until
71:15 - clearly when there are at the end of the
71:17 - name one instead of when they are in the
71:20 - middle of the variable name
71:24 - so now we have everything basically and
71:26 - we can go here in our character
71:28 - animations here for our walk instead of
71:31 - using this we're simply going to call
71:33 - our animation tags dot and we're going
71:36 - to call the walk parameter bam here it
71:39 - is we are also going to have a public
71:41 - void defend
71:43 - animation and here are also going to
71:45 - have a bull defend which is a parameter
71:48 - that we're going to pass
71:49 - and here we're simply going to call
71:51 - animset bull and you call the
71:54 - parameter by the name so let me explain
71:56 - that so animation tags dot defend
71:59 - parameter and here i'm going to call
72:02 - defend and yes i notice here that i did
72:05 - not type
72:06 - parameter so i need to go back here in
72:09 - tags and it's the default parameter
72:11 - thank you very much
72:13 - you see here i'm calling set bool
72:15 - because when we created this parameter
72:18 - we created it as a bull when i click on
72:20 - the plus button and click bull it's
72:21 - created as a bool so you will call set
72:24 - bool if it's an integer you will call
72:26 - set int if it's a float set float if
72:29 - it's a trigger set trigger which we will
72:31 - see right now so here we're also going
72:33 - to have a public void
72:35 - attack underscore
72:38 - one
72:39 - and here we're simply going to call anim
72:41 - set trigger not target but set trigger
72:44 - and simply here we're going to call
72:46 - animation tags so animation tags dot
72:50 - attack one trigger bam it's like that
72:52 - you see set trigger
72:54 - and for attack two i'm gonna duplicate
72:56 - this and paste it and here instead of
72:58 - attack one i'm gonna say attack two and
73:01 - here instead of underscore one i'm going
73:03 - to say under score two and basically
73:07 - that is that bam we are done with our
73:10 - animations
73:12 - see this is a class and this is how i
73:14 - like to do things i like to create a
73:16 - separate class for everything and this
73:18 - is how unity prefers it now this is not
73:20 - my wisdom
73:22 - i've heard that i don't know what was
73:24 - the name will goatstein or or that allen
73:27 - guy the guys who do official unity
73:29 - tutorials i was watching one of their
73:31 - tutorials and yes i watch tutorials
73:33 - don't judge me i mean i'm saying don't
73:34 - judge me but you should also watch other
73:36 - tutorials as well
73:38 - anyways
73:39 - i heard him saying that unity prefers
73:41 - that you have a separate class for every
73:43 - separate task so i like to separate my
73:45 - tasks so here this class will only
73:47 - handle animations and now when we want
73:49 - to call these animations for example the
73:51 - move or the walk
73:53 - we simply go here in the move script
73:55 - and right here below our private
73:57 - character controller we're going to say
73:59 - private character animations and i'm
74:02 - going to call this one player animations
74:04 - or player animation how we want to say
74:06 - and here in the awake i'm going to say
74:08 - player animations is equal to get
74:10 - component
74:11 - character animations i'm calling it
74:14 - character animations the class name
74:16 - because we are also going to attach this
74:18 - on our enemies now before i animate
74:21 - anything i'm gonna go here in unity and
74:23 - we need to attach that script on the
74:25 - warrior if we don't attach it it will
74:27 - not work so select the warrior click on
74:30 - add component and filter for character
74:32 - animations and click on
74:34 - that script and hit apply so that that
74:36 - change also applies to the prefab
74:41 - so if we go back now in our visual
74:44 - studio so if i go back here at the
74:46 - bottom i'm going to create void animate
74:48 - and this is going to animate the walk so
74:50 - animate walk this is how i'm going to
74:52 - name it
74:53 - so animate walk
74:55 - and how are we going to animate the walk
74:57 - well basically i said that the move
75:00 - direction
75:01 - it has it is moving so it has velocity
75:05 - we can test it out so we can call here
75:08 - if
75:09 - move actually i'm saying move direction
75:11 - but it's actually a character
75:13 - controller so excuse me for that one so
75:15 - the character controller we're using it
75:17 - to move
75:18 - so we can test it out so we're going to
75:19 - say here if our character
75:21 - controller.velocity that square root
75:23 - magnitude is not equal to zero
75:27 - then we are going to animate we are
75:29 - going to call playeranimations dot walk
75:32 - is equal to true
75:34 - else here we are going to call player
75:37 - playeranimations.walk is equal to false
75:40 - bam bam bam what is this why are you
75:43 - bamming teacher i don't know why i'm
75:45 - banning but what this here is
75:48 - we have our character controller and we
75:50 - are going to get the velocity you see
75:51 - the velocity is the
75:54 - velocity speed over time if we are
75:56 - moving velocity will increase over time
75:58 - only if we are standing still now this
76:00 - is from physics i'm not i'm not no
76:02 - physics guru i just know this from
76:05 - looking online it's really very simple
76:08 - so as i was saying
76:09 - if we are moving velocity will increase
76:12 - over time if we are standing still
76:14 - velocity will not increase think of it
76:16 - like you have a gas pedal in your car
76:18 - and when you are pushing the gas pedal
76:20 - to the end you know the car does not go
76:22 - from one from zero to 100 in a second no
76:25 - it goes slowly over time well that
76:27 - slowly over time is the velocity
76:30 - so if the velocity and the square root
76:32 - magnitude you see this square root
76:34 - magnitude and i need to do it like this
76:36 - because for some reason visual studio is
76:38 - giving me here
76:40 - some errors i don't know warnings for
76:42 - whatever reason but let me go here
76:43 - character controller so char controller
76:46 - dot velocity you see the current
76:48 - relative velocity of the character
76:50 - meaning if he's moving or not that the
76:52 - square root magnitude it returns the
76:54 - length of this vector because the square
76:56 - root magnitude
76:58 - basically this velocity is a vector
77:00 - value a vector has a value of x y and z
77:03 - and why that because we have speed on
77:05 - the x y and z axis and it will return
77:08 - that speed this square root magnitude
77:11 - will make that
77:13 - value one which basically means if that
77:16 - value is not equal to zero we are moving
77:20 - so if that value the velocity is square
77:23 - root magnitude think of the square root
77:25 - magnitude simply converting this value
77:28 - into a one
77:30 - so number one value
77:33 - if
77:33 - this velocity has any value if it's zero
77:36 - then it will return zero the square root
77:38 - magnet will return zero if we are
77:39 - standing still if we are moving we will
77:41 - have any value here we will convert that
77:43 - value to one which will not be equal to
77:45 - zero meaning we are moving meaning we
77:47 - will animate the walk
77:49 - meaning
77:50 - if we are not moving then we will not
77:53 - animate the walk instead we will animate
77:57 - the idle animation before we proceed to
77:59 - test this out we need to call the
78:01 - animate walk in the update function so
78:04 - animate walk function call it in the
78:07 - update function
78:08 - and now we are ready to test things out
78:11 - so if i go back here in unity and if i
78:14 - hit the play button
78:16 - when i move we will see that we are not
78:19 - animating now what is the reason pay
78:21 - attention here to the idle animation
78:23 - this blue line when this blue line
78:24 - finishes now i'm gonna go to walk
78:26 - animation and walk animation freezes
78:30 - what the hell is going on teacher you
78:32 - said that this right here will work and
78:34 - why is it not working first of all let
78:37 - me fix these animations so if i double
78:40 - click on the idle animation here we need
78:41 - to make sure that the loop time is
78:44 - checked so when you select the idle if
78:47 - you double click on it it will take you
78:48 - here to the settings of the animation
78:51 - and if you scroll a little bit down you
78:53 - have this loop time which is right here
78:56 - that i have circled right now
78:58 - this loop time it needs to be checked
79:00 - because the idle animation needs to loop
79:02 - and when you check it hit apply at the
79:05 - bottom left or excuse me bottom right
79:08 - corner
79:08 - also do the same thing for the walk
79:10 - select it double click it
79:12 - scroll down hit the loop time and hit
79:14 - apply because again
79:16 - the walk animation needs to loop it
79:18 - needs to play over and over and over
79:20 - again for us to be able to simulate the
79:22 - walking and the idle animation the
79:25 - defend animation here
79:28 - so select it for the defend animation we
79:30 - will leave it for later we will see what
79:32 - we are going to do with it because we
79:33 - are going to add some extra code for
79:35 - that as well
79:36 - so we will leave it for now these attack
79:38 - animations are not going to loop but now
79:41 - since these animations are looping if i
79:43 - hit the play button pay attention here
79:44 - in the animator you see animations are
79:47 - moving you see this blue line it means
79:49 - that the animation is playing but if i
79:51 - try to move you see i'm moving
79:54 - but you see all only now the animation
79:57 - is playing
79:59 - i don't know if you see this and you pay
80:00 - attention here you see what's going on
80:02 - you see here now what is the reason for
80:05 - this
80:06 - well the reason for this are these
80:08 - transitions so we need to fix them if
80:10 - you select the transition from idle to
80:12 - walk animation you will notice here that
80:14 - we have conditions we set the conditions
80:16 - to be true that is okay
80:18 - but you also have these settings here
80:20 - and you have the exit time and pay
80:22 - attention here this exit time
80:25 - transitions has a fixed exit time and if
80:27 - i hover over the exit time it will say
80:29 - exit time and normalize time from
80:31 - current state basically this means
80:33 - this exit time is how much time we have
80:37 - before we exit from the animation and
80:39 - usually this means that we will let the
80:41 - animation to play till the end which we
80:43 - saw the blue line was
80:44 - filling up in the idle animation and
80:48 - only when the blue line has finished
80:50 - filling up that's when we
80:53 - transitioned to the walk animation so in
80:55 - order to fix that we're gonna uncheck
80:58 - the has exit time and the transition
81:00 - duration we are going to see at point
81:02 - one because we want to transition as
81:04 - fast as we can
81:06 - from our idle to the walk animation
81:09 - now in regards to the walk animation
81:11 - we're gonna do the same thing so click
81:13 - here the transition from walk to idle
81:16 - uncheck has exit time fixed duration is
81:20 - gonna be equal to point one simple like
81:23 - that
81:24 - so what about transitions from idle to
81:28 - attack basically we can test these two
81:30 - out first so if i hit the play button
81:31 - now
81:32 - pay attention now i'm gonna hit or now
81:34 - i'm gonna start walking you see as soon
81:36 - as i started walking he started to walk
81:38 - you see as soon as i started to walk and
81:41 - here what we need to do is
81:43 - er the transition or actually the
81:46 - condition is false but i think in the
81:47 - code
81:48 - so else
81:50 - player animations walk is equal to false
81:53 - something weird is going on here because
81:56 - the parameter here is okay it's false
81:58 - and we saw that in the animation nothing
82:00 - is wrong so let me try this i'm going to
82:03 - print here and i'm going to say
82:06 - the velocity is colon and i'm going to
82:09 - say plus character controller or char
82:13 - controller dot velocity dot square root
82:16 - magnitude and i'm going to print that
82:18 - out to see the value quickly so if i go
82:20 - here let me just clear the console
82:23 - and if i hit the play button we will see
82:25 - that initially it's set to zero but now
82:27 - i'm gonna start moving so now it's nine
82:29 - nine points so on and so forth i'm
82:31 - stopping so i stopped moving
82:34 - whoa
82:36 - never saw this before
82:38 - you see i'm i don't move but for some
82:41 - reason the character controller still
82:43 - has velocity
82:44 - now i'm really not sure what is going on
82:46 - but let me try this
82:48 - let me try to stop our character
82:50 - controller instantly so basically here
82:53 - we're checking if input so on and so
82:56 - forth
82:57 - if we have input we will move our
82:59 - character controller else if we don't
83:01 - have input so basically here if we don't
83:04 - have any input to move the character
83:08 - then we're simply going to say character
83:10 - controller dot move and here we're going
83:12 - to pass vector 3 0
83:15 - again vector 3 0 is a shorthand for
83:18 - writing 0 0 0 for x y and z
83:21 - and basically it will stop the character
83:24 - controller from moving so if i go back
83:26 - here in unity and clear the console
83:30 - and if i hit the play button
83:33 - so if we go now and if i stop
83:35 - then it stops you see we just need to
83:38 - stop it but i'm not sure why it's not
83:40 - stopping on its own i'm using the same
83:42 - code from the project that i showed in
83:46 - the beginning it's the exact same code
83:48 - i'm following that it worked like a
83:50 - charm and did not use this character
83:52 - controller move zero but basically if
83:54 - you have this issue this is how you will
83:56 - fix it and if i get to bottom of this
83:58 - issue i will create a video talking
84:00 - about what the issue was it's really
84:02 - interesting to see but this is how we
84:03 - fixed it so yeah you need to improvise
84:06 - in programming as well
84:08 - so
84:09 - this is how we stopped our character
84:11 - controller to make sure that the square
84:12 - root magnitude is equal to zero indeed
84:16 - so what i'm gonna do again is test it
84:18 - out so that we can see an action our
84:20 - transition so
84:21 - if i
84:22 - walk now you see automatically he goes
84:25 - from idle to walk i'm gonna stop
84:27 - automatically he goes back from walk to
84:30 - idle animation the reason for that is
84:32 - because we edited these transitions so
84:35 - we don't have the exit time transition
84:37 - duration is zero basically exit time
84:39 - will allow us
84:41 - to finish the animation before we
84:43 - transition to another animation and
84:44 - transition duration is
84:48 - how much seconds it will take for this
84:50 - transition to happen so we set it point
84:53 - one we want to happen as fast as
84:55 - possible and we saw this in action so
84:57 - now things are clear you see here
84:59 - we go from idle to walk when the walk
85:02 - parameter is equal to true this is what
85:03 - we're doing here parameter walk is equal
85:05 - to true
85:07 - and if i go into character animations
85:09 - and
85:09 - set bool this is the walk parameter we
85:12 - set it to this walk parameter that we
85:15 - have here and we specified that walk to
85:18 - be either true or false so if it's true
85:20 - it will transition from idle to walk and
85:22 - if it's false it will transition back
85:25 - from walk to idle and we talked about
85:29 - these
85:29 - parameter
85:31 - conditions or settings exit time fixed
85:33 - duration so on and so forth we explain
85:35 - what they are and what they did and so
85:38 - now the animation is a little clearer if
85:42 - not a lot more clear what we are doing
85:45 - here now this is in regards to the idle
85:48 - and the walk animation we of course have
85:50 - these transitions that we need to fix
85:52 - but i would rather first test it out and
85:54 - then we will proceed to fix them so that
85:56 - we can see it in action and make the
85:58 - animation concept even more clear so for
86:01 - that we need to go here in our project
86:03 - and script folder and right click here
86:05 - and we are going to create a c sharp
86:07 - script that i'm going to call player
86:09 - attack input and this is where we're
86:12 - going to get the input for the attack
86:15 - and we are going to proceed to attack so
86:17 - of course we need to attach this on our
86:19 - warrior character and i'm going to hit
86:21 - apply
86:22 - and now we're going to double click and
86:24 - open this script in visual studio the
86:26 - first thing that i'm going to do is tag
86:28 - the class here at the bottom and give a
86:31 - little bit of space so that i can scroll
86:33 - up and down and we can see more clearly
86:35 - what am i doing here so for now the one
86:39 - thing that we need for our player attack
86:41 - input is going to be our character
86:43 - animations and i set it to be private
86:46 - because we will use get component
86:48 - and i'm going to name it player
86:50 - animation and inside of the awake
86:53 - function so change start to awake
86:56 - we're going to say player animation is
86:58 - equal to get component and we're going
87:00 - to get here the character animations
87:03 - component like this
87:05 - so what is the next thing to do well the
87:08 - next thing to do is to detect input so
87:11 - we need to detect input in order to
87:13 - simulate the attacks and we will
87:15 - simulate them with the animation
87:17 - so when we press our key code let's say
87:20 - j and k so when we press j we will
87:23 - defend ourselves and when we press k
87:26 - we will attack so here if our input get
87:29 - key and we're going to see here key code
87:33 - dot j so when we press j we are gonna
87:36 - defend ourselves so defend when j
87:40 - pressed
87:41 - and simply here we are going to call our
87:44 - player animation so we're going to say
87:46 - player animation
87:47 - defend and here we're going to say true
87:50 - because if you remember
87:52 - if i go back here in unity and inside of
87:55 - the animator component or actually in
87:57 - the animator panel you see here defend
88:00 - we will go from idle to defend when
88:03 - defend is equal to true and we will go
88:04 - from walk to defend when defend is equal
88:09 - to true
88:11 - now going back here we set it to be
88:13 - equal to true which means that
88:16 - when this is called we will play the
88:18 - defend animation now this is when the
88:20 - key is pressed
88:23 - what we want to do when the key is
88:24 - released well we want to see here if
88:27 - input dot
88:28 - get key
88:30 - down and this is going to be key code so
88:33 - key
88:34 - code dot j
88:36 - same key when we press it and when we
88:38 - release it we are going to say here
88:40 - player animation defend now is equal to
88:43 - false we will test this out in a moment
88:45 - we will see some issues and we will fix
88:47 - them one by one because i like to first
88:49 - show you the problem and then show you
88:51 - how to get to bottom of that problem
88:54 - and here we're also going to say if
88:55 - input
88:57 - get key and we're going to see here key
89:00 - code k so when we press k
89:03 - we are going to attack but we have two
89:05 - attacks if you remember if i go back
89:07 - here in unity you see here we have
89:08 - attack two and we have attack one this
89:11 - is in our animator panel so here they
89:13 - are attack two and attack one so if i
89:15 - select the warrior here and if i zoom in
89:18 - on him you will see here that if i
89:20 - select the attack one animation you see
89:23 - now this is how he is attacking if i
89:24 - select attack two
89:26 - this is how he is attacking
89:29 - so
89:30 - how can we call these animations because
89:33 - i want to randomize that and in order to
89:35 - randomize it when we press our key code
89:37 - k we're going to test here if our random
89:40 - dot range from 0 to 2 if it's greater
89:43 - than zero now to declare this right here
89:47 - right away
89:48 - or actually to explain it
89:50 - you see this random range will return a
89:52 - random value between two numbers when we
89:55 - use integers if i hover over here you
89:57 - see it's it is using integers if we say
90:00 - here f and here f it will think that we
90:02 - are using floats which you will see here
90:04 - when i hover over random float as you
90:06 - can see random range for a float but if
90:08 - i remove f
90:10 - and set it to be an integer or actually
90:13 - just remove f it will think we have
90:15 - integers why is this important because
90:18 - when it comes to integers
90:20 - this number here is inclusive and this
90:22 - number here is exclusive what does that
90:25 - mean that means that inside of this
90:27 - random range it will include this number
90:29 - but it will not include this number
90:31 - which means basically here it will
90:33 - return either zero or one
90:36 - two will not be returned it will return
90:37 - either zero or one and if we have here
90:39 - for example five
90:41 - it will return zero one two
90:44 - three and four but it will not return
90:46 - five so five is
90:48 - excluded but if they are a float so if i
90:51 - say here f so two f and zero f that
90:55 - means we can either get zero one or two
90:58 - or in between decimal point numbers
91:00 - so when it comes to a float both numbers
91:03 - are included when it comes to an integer
91:07 - then the second number is not included
91:09 - which means this will either return zero
91:11 - or one which means 50 50 chance to
91:14 - perform one attack or the second attack
91:17 - so here i'm going to simply say
91:19 - playeranimation.attack1
91:22 - and here i'm going to say else and i'm
91:25 - simply going to save attack animation
91:27 - too so player animation and attack to
91:30 - animation and voila we are good to go
91:33 - and since this is already being called
91:36 - in the update function we can safely
91:39 - test it out so we need to go here in
91:41 - unity
91:42 - and pay attention now what is going to
91:44 - happen so here i'm going to hit the play
91:47 - button
91:48 - pay attention to these animations so
91:50 - let's say i press k
91:52 - you see i pressed k
91:55 - so what is happening first of all we
91:56 - need to wait for our random integer to
92:00 - pass and let me just go here quickly so
92:02 - here i'm calling attack one and here i'm
92:04 - calling attack two and in character
92:06 - animations
92:07 - so here animations attack trigger one
92:09 - and here we have attack trigger two so
92:12 - let's go back here again and what is
92:13 - going on pay attention what is happening
92:16 - here so i'm gonna press it and now we
92:17 - have attack two but again we need to
92:20 - wait for the idle animation to finish
92:23 - because we did not check for these
92:25 - transitions and now he's attacking and
92:27 - you see how much it takes to play the
92:30 - attack animation so we need to fix this
92:34 - and of course in order to fix this we
92:35 - are going to fix the transitions so the
92:38 - transition from idle to attack one so
92:41 - here it's not gonna have an exit time
92:44 - and for the transition duration i'm
92:46 - going to see here point three this is
92:49 - from idle to attack one but when it
92:52 - comes to attack one back to idle it's
92:55 - gonna have an exit time
92:57 - and here the transition duration i'm
93:00 - going to say 0.1 so the transition
93:02 - duration will be 0.1
93:04 - but it will have an exit time with the
93:06 - value of one
93:08 - for our transition from idle to attack
93:12 - two we are not going to have exit time
93:13 - and point three will be that transition
93:16 - duration
93:17 - for
93:18 - this transition from attack two back to
93:20 - idle we are going to
93:22 - check the exit time and the value will
93:24 - be one and here the transition duration
93:27 - will be equal to one now when it comes
93:30 - from our attack or from walk to the
93:34 - attack animation so this one right here
93:36 - to attack one
93:37 - uncheck exit time point three for the
93:40 - transition duration
93:43 - going back here from attack one to walk
93:46 - we are not gonna have or actually exit
93:47 - time is going to be one
93:49 - and transition duration is going to be
93:51 - equal to six
93:53 - and similarly here from walk to attack
93:56 - two we are not going to have an exit
93:58 - time but 0.3 for the transition duration
94:02 - and for our other transition
94:05 - same as with from attack one to walk we
94:08 - will use the same thing for attack two
94:09 - to walk so exit time will be one and
94:13 - transition duration will be 0.6
94:16 - and for our defense so we are also going
94:18 - to fix defend now because it will have
94:20 - the same issue it will have the same
94:21 - issue as we just saw so we are going to
94:24 - see here uncheck exit time and point
94:26 - three for our
94:29 - transition duration we're gonna do the
94:30 - same exact thing here from walk to
94:33 - defend so uncheck exit time 0.3 for
94:36 - transition duration and going back from
94:38 - defend to the idle animation
94:42 - one for the exit time 0.6 for the
94:44 - transition duration
94:46 - so now let's test it out and see what we
94:49 - have here so if i go and test it out
94:51 - again so pay attention now
94:53 - did you see i don't know if you see here
94:55 - that we are attacking with two we
94:58 - attacked just two what is you see here i
95:00 - just pressed the number i just pressed
95:02 - it once you see i pressed the animation
95:05 - only once as you can see here so again
95:08 - but it's attacking multiple times
95:11 - you see here now i'm not even pressing a
95:13 - button now you're like okay teacher do
95:15 - you know what you're doing i do know
95:17 - what i'm doing but i want to show you so
95:19 - let's go back here what is the problem
95:21 - the problem is here get key
95:23 - so we should not use get key because get
95:26 - key
95:27 - returns true while the user holds down
95:29 - the key basically when we press and when
95:31 - we hold the key now of course i did not
95:33 - hold the key what i did is i simply
95:38 - i simply pressed it but since this is
95:41 - called in the update function which is
95:44 - run
95:45 - every frame in a second
95:47 - it can happen that i held
95:49 - unintentionally for two three frames
95:51 - while i press the button it was
95:53 - basically held in quotes
95:57 - and those two three frames caught that
95:59 - and it is called that many times so what
96:02 - we need we only need to detect
96:04 - when we press down the button and
96:06 - basically for that we are going to say
96:07 - get key down so you see here get key
96:11 - down this is what we need and here also
96:14 - we're gonna say get key down and here
96:16 - we're gonna say get key up i wanted to
96:18 - write it before but for some reason i
96:20 - wrote down get key down will detect when
96:23 - you press the button only once so when
96:26 - you press it and even if you hold it it
96:28 - will detect that only once get key up
96:32 - it will detect
96:34 - when you
96:35 - release the pressed key we're gonna use
96:38 - this when we press this right here we're
96:40 - gonna hold the shield and when we
96:42 - release it then we will release or lower
96:46 - down the shield now that we are using
96:48 - get key down let's go here and let's
96:50 - test it out so if i hit here the
96:53 - play button so if i hit the play button
96:55 - pay attention now so if i press the key
96:57 - you see now automatically only one time
97:00 - it is executed and only one time we go
97:03 - into the animation now one thing that
97:05 - you're noticing is that the animation is
97:08 - very slow so you see now he's like a
97:11 - slow motion when he attacks you saw that
97:13 - in order to fix that you're simply going
97:15 - to select and let me just go here take
97:18 - the highlight tool so you're gonna click
97:20 - on the animation right here the motion
97:24 - state that is and right here you have
97:26 - the speed of that animation so it's
97:29 - right here where i'm pointing and for
97:31 - attack one we're gonna say the speed is
97:33 - going to be four
97:34 - and for attack two we're gonna say the
97:36 - speed is three that means it will run
97:38 - four times as faster than its original
97:41 - speed and
97:43 - this one the other one will run three
97:45 - times faster than its original speed
97:48 - basically so this is what we are saying
97:51 - so now if i test it out so if i go here
97:53 - and hit the play button
97:56 - if i press you see now how fast it is so
97:58 - it's playing these animations fast we
98:00 - are transitioning from one animation to
98:02 - another fast you see everything is
98:03 - basically working now you see and you
98:06 - can see here inside of the animator the
98:08 - animations that are being played so when
98:10 - i press here automatically it goes to
98:11 - attack two when it finishes it go back
98:13 - to idle so on and so forth when i press
98:15 - the shield you see he is holding his
98:18 - hand but i also release the button so if
98:19 - i press it and hold it you see now he
98:22 - also gets back
98:23 - we need to fix this now in order for you
98:26 - to understand what i just said we are
98:28 - going to import the shield and the sword
98:31 - so if i go here in models
98:33 - and here we have our weapon so here is
98:36 - our weapon this one right here did i
98:39 - imported no for some reason i did not so
98:41 - basically this is our weapon this right
98:43 - here and the weapon i'm going to call it
98:46 - sword
98:47 - and we're going to click on the warrior
98:49 - drop down list then vip object then
98:51 - pelvis here then spine then spine one
98:54 - spine two then neck
98:56 - then a right clavicle upper arm i know
99:00 - this is tedious and here is our right
99:02 - hand this is where we are going to
99:03 - position our shield on the right hand
99:06 - what you can do is you can type our hand
99:08 - and here it is so this one right here
99:11 - the r hand
99:13 - and you're going to select the sword
99:15 - and for the position here x i'm going to
99:17 - say negative 0.0389
99:22 - for the position why i'm going to say
99:24 - zero 0.0128
99:27 - [Music]
99:29 - and for the z i'm going to say 0.0034
99:34 - now the rotation x is going to be
99:36 - negative
99:37 - negative 1 to seven
99:40 - the rotation y is going to be equal to
99:42 - negative 100 and the rotation z is going
99:44 - to be negative one or four so negative
99:48 - one hundred and four basically that is
99:50 - that this is how we are going to hold
99:53 - our sword as you see right here
99:55 - now for the shield so we're going to go
99:58 - back in models and now we have shields
100:00 - and here it is and i'm going to rename
100:02 - it to shield this one is going to be
100:04 - positioned under the left hand so simply
100:06 - type here l hand and here it is when i
100:10 - say type here i mean right here in the
100:12 - hierarchy search tab so this one right
100:15 - here you simply type l hand
100:17 - and here it is this sounds like some i
100:20 - don't know some swordsman l hand anyways
100:24 - take the shield and attach it here on
100:26 - the l hand
100:28 - and let me just reposition it so for the
100:30 - x position is going to be 0.041
100:34 - for the y it's going to be negative
100:36 - 0.008
100:39 - for the z it's going to be negative
100:41 - 0.005
100:44 - and the rotation
100:46 - 98 for the x
100:48 - for the y 81
100:50 - for the z it's going to be 180 and
100:53 - basically that is that so this is our
100:55 - shield and this is our sport again pause
100:58 - the video here if you want to copy these
101:00 - exact values where the shield is
101:02 - positioned and as you can assume when i
101:05 - was preparing this project i have
101:07 - positioned this experimented moving it
101:09 - up down left and right
101:11 - until i got it to the place where or to
101:16 - the position where i want it to be
101:19 - and basically now we have our
101:23 - shield and we have our sword now let me
101:25 - select the sword and you can also pause
101:26 - the video for the sword so if you want
101:28 - to position it so this is where we can
101:31 - position our sword
101:33 - and voila this is it so now if i go and
101:37 - test this out you will see this in
101:38 - action way better so now we have the
101:41 - sword if you see we are holding the
101:43 - sword and if i press the key you see now
101:45 - we are attacking with the sword we are
101:47 - stabbing come on stab okay he's stabbed
101:49 - and stabbed pay attention now if i hit
101:52 - this for the shield you see he simply
101:54 - holds it up and lowers it down if i hit
101:57 - the j key and hold it you see again he
102:00 - plays the animation and now you see what
102:02 - is happening here the animation is not
102:04 - working basically now the reason for
102:06 - that is if i select the warrior and go
102:09 - to the defense zero one animation this
102:11 - is that animation this is how the full
102:13 - animation looks like you see this right
102:15 - here he basically
102:17 - puts the shield up
102:20 - and then he lowers it down in the same
102:22 - animation what we need to do is we need
102:25 - to freeze the animation where we are
102:27 - somewhere around here so at the middle
102:30 - approximately or frame i don't know
102:32 - frame 30 frame whatever so basically
102:35 - when we are here somewhere something
102:37 - like this this is where we are going to
102:38 - freeze
102:40 - the animation so that it stops
102:43 - and in order to do that we need to go
102:45 - back in visual studio and inside of the
102:47 - character animations right here at the
102:49 - bottom below our attack too
102:52 - we're going to create here void
102:54 - freeze
102:56 - animation and not free but freeze
102:59 - so it's freeze animation like this
103:03 - and here we're simply going to say
103:05 - anime.speed is equal to zero now setting
103:08 - the speed of the animator and anim is
103:11 - our animator if we set the speed to zero
103:13 - that means we will basically turn it off
103:15 - shut it down it will not move the speed
103:17 - is zero
103:18 - and in order to turn it back or make it
103:22 - work like normal so we're going to say
103:23 - public void on freeze animation
103:28 - and here since we are unfreezing we are
103:30 - going to say anime speed is equal to 1
103:33 - again so 0 and 1 is the speed for the
103:35 - animation 0 stopping the animation
103:38 - completely so stopping that animation
103:41 - completely
103:42 - and again for our freezing we are going
103:45 - to set zero and voila we are good to go
103:49 - now this freeze animation we are going
103:51 - to call inside of this animation right
103:54 - here we are going to use animation
103:56 - events
103:57 - now you see this animation that we have
104:00 - imported so i'm gonna see here clear you
104:02 - see this animation defense it's read
104:04 - only if you pay attention here it says
104:06 - read only read only means that we can
104:10 - only display this animation we cannot
104:12 - edit this animation in any way we cannot
104:14 - delete these steps for the animation see
104:16 - we cannot right click and remove
104:17 - properties i cannot add any animation
104:20 - events right here
104:22 - and in order to do that what we need to
104:24 - do is locate this animation so defense
104:28 - zero here it is it's inside of the
104:30 - models and animation
104:33 - defense underscore zero and this is the
104:35 - animation clip so we want the animation
104:38 - clip which is inside of this game object
104:40 - you see here that i've circled but this
104:43 - is the clip that we want you see this
104:45 - defense underscore zero what you're
104:48 - gonna do is you're going to take this
104:50 - clip
104:51 - and you're going to hold command on mac
104:54 - on windows you're going to hold control
104:56 - and you're going to press d
104:58 - this will duplicate it so now we have an
105:00 - independent defense animation as you can
105:02 - see right here we have an independent
105:05 - defense animation what does it mean to
105:08 - be independent well it means that our
105:10 - animation is
105:12 - not dependent on this one right here on
105:15 - this defense that we have imported and
105:17 - we're going to rename it to defense
105:19 - animation
105:21 - and now i'm also going to check this
105:23 - loop time right here so pay attention
105:26 - when you click on this defense animation
105:27 - you will have a loop time here check it
105:30 - because we want the loop time to be
105:31 - checked
105:32 - and if i go here in animator and select
105:34 - the defend animation
105:36 - what i'm going to do is change the
105:38 - motion here for the clip so this right
105:40 - here exactly where this is pointing so
105:42 - this one i'm going to click on this
105:44 - little circle right here
105:46 - and filter for our defense animation so
105:49 - click here
105:50 - defense animation here it is
105:53 - now because it's independent it's not
105:55 - read only if i select it here it's not
105:58 - read only anymore it's basically now we
106:00 - can edit it so we can hit here the
106:02 - recording button we can add more to this
106:04 - animation so on and so forth but this
106:07 - means that we can press
106:08 - this button
106:10 - notice this and actually not this right
106:12 - here so clear you see this right here
106:15 - that i've just circled inside of the
106:17 - animation tab that is called an
106:19 - animation event keyframe so i can go for
106:21 - example here and let's say i don't know
106:24 - at frame 20 exactly here
106:26 - i want to add an animation event so i'm
106:29 - going to click on that button that i
106:30 - just showed you this one right here that
106:32 - you see
106:33 - so click on it when you click on it and
106:36 - let me just hide the highlight tool so
106:38 - when you click on it you will see now
106:40 - that in the inspector panel first of all
106:42 - you will see here at that frame you see
106:45 - this blue line
106:46 - that's the animation event and when you
106:48 - click on it you see the properties here
106:50 - in the inspector panel basically this is
106:53 - a drop down list that we can click here
106:55 - and we can select which one of these
106:57 - functions we want to be executed when we
107:00 - hit this frame
107:02 - so when we hit this frame and go over
107:04 - this animation event inside of this
107:06 - animation
107:07 - so i want to freeze the animation so i'm
107:09 - going to click here and select freeze
107:11 - animation so now when we play this
107:13 - animation and we get to this point right
107:16 - here it will hit or pass on this
107:20 - animation event which has this function
107:22 - here and this function is right here
107:25 - inside of our character animation script
107:27 - so it will execute this function
107:30 - and in order to unfreeze the animation
107:33 - we need to go in our attack input and
107:35 - right here key code up
107:38 - we need to call here
107:41 - playeranimation.unfreeze animation in
107:43 - order for this to work so here we are
107:44 - going to unfreeze because inside of this
107:47 - animation we are freezing it in our
107:49 - animator does not work
107:51 - so in order for this to work we need to
107:53 - unfreeze the animation and make
107:56 - the animator work like normal
108:00 - so if i go here and hit the play button
108:03 - pay attention now if i hold press and
108:05 - hold the key code j you see now he is
108:07 - holding you see now he is holding his
108:09 - shield you see he is basically holding
108:12 - if i release the button he releases the
108:15 - shield and this is how we can see this
108:18 - way better so i'm gonna go here inside
108:22 - of the scene
108:23 - and here is our player he's playing his
108:25 - idol animation so pay attention on the
108:27 - scene view i'm gonna press j you see he
108:30 - is holding the shield and i'm pressing
108:32 - the g key and holding it i'm currently
108:34 - holding it and now i have released it
108:36 - and he released that animation so
108:39 - basically we simulated this with our
108:42 - animation and with our code again what
108:45 - we did is in our character animation we
108:47 - froze that so we are calling freeze
108:50 - animation which will be called at this
108:52 - exact frame so defense animation at this
108:56 - frame right here it will be called so
108:57 - this is the frame right here and it will
109:00 - be called at that frame it will go
109:02 - inside of the script which has this
109:04 - freeze animation function it will
109:05 - execute here
109:07 - and in our player attack when we release
109:09 - the key so get key up defend when ga is
109:12 - pressed down
109:14 - and here we're going to say
109:17 - release defense
109:19 - when j is released
109:23 - so when j key is released so when we
109:25 - release it we unfreeze the animation and
109:28 - set the defend animation to false to go
109:31 - back to the idol animation
109:34 - and now we can finally create our enemy
109:38 - because we have all the ingredients
109:39 - basically our enemy is going to be the
109:41 - duplicate of our player so what i'm
109:44 - gonna do here is duplicate the warrior
109:46 - and i'm going to change him to so his
109:48 - name actually to enemy so now we have
109:51 - the enemy name here we are not gonna
109:53 - have the character controller so you're
109:55 - gonna remove that we are also going to
109:57 - remove player move script and player
109:59 - attack input the only thing that we are
110:01 - going to leave here is the character
110:03 - animations
110:05 - now we are also going to have a box
110:06 - collider so attach a box collider on the
110:09 - enemy but what i'm gonna do is i'm going
110:12 - to take the enemy and move him here
110:15 - so right here and i'm going to rotate
110:17 - him 180 degrees on the y so that he is
110:19 - facing the player basically as you can
110:21 - see right there the enemy is over there
110:24 - you can see him
110:25 - so now
110:27 - let me first edit this boss collider
110:29 - because it's not in place
110:31 - so for the y position of the box
110:34 - collider or the offset it's going to be
110:37 - point 92 z we're not going to touch as
110:40 - you can see i'm editing these right here
110:44 - so the center for the whites point 92
110:48 - the size x is going to be 0.28
110:52 - the size y is going to be 1.81
110:55 - and the size z is going to be 0.34
110:59 - and voila this is our collider right now
111:02 - i'm also going to take the character
111:04 - animation and move it right here below
111:06 - our box collider yes continue break the
111:08 - prefab i don't care because
111:11 - we're gonna go here into navigation now
111:13 - what is this navigation what is this
111:17 - right here
111:18 - well this navigation is first of all you
111:21 - can locate it here under window and then
111:23 - a i and then navigation and probably
111:25 - this tab will be floating like this so
111:27 - it will be floating i'm gonna dock it
111:29 - right here where my inspector panel is
111:32 - and what you're going to do inside of
111:34 - this navigation is that we are going to
111:36 - bake our areas bake the objects that we
111:40 - are basically going to use for
111:42 - navigation so if i go on the fourth tab
111:45 - here so pencil and clear you see the
111:47 - four tab which is object when you select
111:50 - that then you click on this right here
111:52 - mesh renderers so select on that click
111:56 - there
111:57 - and you see all of these game objects so
111:59 - we're going to select all of these draw
112:01 - calls and the ground and we're not going
112:03 - to select anything else so all of these
112:06 - and the ground basically i'm going to
112:09 - click here navigation static and i'm
112:10 - going to say walkable but for these draw
112:13 - calls let me select them and uncheck
112:16 - that and navigate actually navigation
112:17 - static but not walkable
112:19 - so these are going to be not walkable
112:21 - and the ground is going to be walkable
112:24 - the word says itself so it's
112:27 - self-explanatory basically walkable
112:29 - means we can walk on it we will be able
112:31 - to navigate on it
112:33 - and non-walkable is none or not walkable
112:38 - so all of these draw calls they're going
112:39 - to be not walkable click first
112:42 - navigation static and then not walkable
112:44 - then click on the ground which is our
112:47 - cube which is where our game objects are
112:49 - standing which is our battlefield
112:52 - and navigation static and then walkable
112:54 - so when you do that this is how you
112:57 - denote to unity's ai system on the
112:59 - navigation
113:00 - that we can walk on these areas
113:03 - basically these are not walkable so it
113:04 - will avoid them but these that are
113:07 - walkable we can walk on them and i'm
113:09 - going to go now in the bake tab right
113:11 - next to the object tab we have the bake
113:13 - tab
113:14 - and simply click here big at the bottom
113:16 - right corner when you click on that bam
113:18 - unity will do its thing and you see here
113:20 - these blue lines or
113:22 - this is light blue or light green i
113:24 - don't know what this color is so don't
113:26 - judge me anyways
113:28 - this what has this color this light blue
113:31 - or green
113:32 - this means that it is navigationable we
113:34 - can walk on these but those that don't
113:36 - have for example like this right here
113:38 - this is not navigationable and we cannot
113:40 - walk on these areas
113:42 - why is this important so now i'm going
113:44 - to go back in the inspector panel and
113:45 - clear this t mesh from the search this
113:48 - is important because now we can select
113:50 - our enemy and i can attach another
113:53 - component which is the nav mesh agent so
113:56 - i'm going to click add component and nav
113:58 - mesh agent attach it
114:00 - remove the character script or actually
114:02 - move it down
114:03 - and this is our nav mesh agent now here
114:06 - for the angular speed i'm going to set
114:08 - it 800 this is basically the rotation
114:10 - speed of the enemy how fast he will
114:12 - rotate so this is the only thing that
114:14 - i'm gonna change so how fast he will
114:17 - rotate
114:19 - now that we have the enemy and we have
114:21 - baked the walkable areas we attached the
114:24 - navmash agent i'm gonna go inside of the
114:26 - scripts folder and right click here and
114:28 - i'm going to create a new c sharp script
114:31 - and this one is going to be our enemy
114:34 - controller so i'm going to call it
114:37 - enemy so come on enemy controller
114:41 - and select the enemy game object itself
114:44 - so select it and drag and drop the enemy
114:47 - controller on the enemy now before we
114:50 - continue let's go here in the prefabs
114:52 - and drag and drop the enemy prefab right
114:54 - here inside of the prefabs folder and
114:58 - now we can go here in enemy and i can
115:00 - double click this enemy controller
115:02 - script and i can open it in visual
115:03 - studio let me just
115:05 - tag the class here and voila yeah of
115:08 - course why not why should not visual
115:10 - studio give me these red errors again
115:13 - it's been open too much this happened
115:15 - already so i need to close it and i need
115:18 - to reload it or open it again for this
115:22 - to work for some reason it happens like
115:24 - this sometimes so
115:26 - i don't know why don't tell don't ask me
115:29 - because i don't know
115:30 - anyways in order for us to use the nav
115:33 - mesh agent we need to see here using
115:36 - unity engine dot ai
115:39 - which is
115:40 - well where our nav mesh agent is located
115:43 - ai is for artificial intelligence i'm
115:46 - also going to create here a public enum
115:48 - that i'm going to call enemy state
115:51 - and inside of this public enum i'm going
115:53 - to create two state we are all either
115:55 - going to have the chase state or the
115:57 - attack state so either chase or the
116:00 - attack
116:02 - now here
116:03 - inside of our enemy controller right
116:05 - here right below that is we are going to
116:08 - have a reference to a private
116:11 - character animation which i'm going to
116:13 - call enemy anim so enemy anim underscore
116:16 - anime we are also going to have a
116:18 - private nav mesh
116:20 - agent which is the nav agent that we
116:22 - have attached he is going to help us
116:25 - navigate and we will see that in a
116:26 - second
116:27 - so navmesh agent which i'm going to call
116:30 - nav agent
116:32 - we are also going to have a private
116:34 - transform which is going to be our
116:35 - player target
116:38 - we are also going to have a public float
116:41 - move underscore speed which is going to
116:43 - be equal to 3.5 this is the movement
116:45 - speed of our navmesh agent
116:48 - we are also going to have a public float
116:51 - attack distance so attack underscore
116:53 - distance which is going to be equal to
116:55 - one f now this attack distance is the
116:57 - distance how close can we get to our
117:00 - player before we start to attack
117:03 - basically how close we get to the player
117:05 - before we start attacking so attack
117:07 - distance
117:08 - public float chase
117:11 - after
117:13 - attack
117:14 - distance
117:16 - which is going to be equal to one f and
117:17 - is going to be chase underscore player
117:20 - so chase player after attack basically
117:23 - if we attack and after that attack the
117:26 - player decides to run
117:28 - this is going to be the distance we will
117:30 - allow him to run before we start
117:32 - attacking or chasing him we will see
117:34 - that don't worry we are also going to
117:36 - have a private float
117:38 - wait
117:39 - before
117:40 - attack time which is going to be equal
117:42 - to three this is how many seconds we're
117:44 - gonna wait before we attack we will see
117:46 - this in a second
117:48 - and our private float attack
117:51 - timer and this one is going to denote
117:53 - when we start or when should we attack
117:58 - and of course we also need this enemy
118:00 - state so here i'm going to create a
118:01 - private enemy state which i'm going to
118:04 - call enemy underscore
118:06 - underscore state
118:09 - like this
118:11 - so now inside of the awake function so
118:14 - awake change start to awake we need to
118:17 - get ourselves some references first of
118:19 - all we are going to get our enemy atom
118:22 - so enemy anim is going to be equal to
118:24 - get component
118:26 - character animations
118:29 - and we are also going to get the nav
118:30 - agent which is going to be equal to get
118:32 - component nav mesh agent
118:35 - we are also going to get our player so
118:37 - we're going to say player target is
118:39 - going to be equal to game object
118:41 - find the game object with the tag
118:44 - tags dot player tag
118:47 - dot transform to get the player and this
118:50 - is what we need for now
118:51 - inside of the start function
118:54 - so right here in the start so create the
118:56 - start function
118:58 - inside of the start function we are
118:59 - going to set the enemy state to be equal
119:02 - to enemy state chase
119:05 - and our attack
119:07 - timer is going to be equal to weight
119:10 - before attack time now in order to
119:12 - understand this we need to create two
119:14 - functions
119:15 - so right here we're going to create void
119:17 - chase player
119:20 - like this
119:21 - chase player and right below we're going
119:23 - to create void
119:24 - attack player like this
119:27 - and in the update function if the enemy
119:31 - so enemy state
119:33 - enemy underscore state is equal to enemy
119:36 - state chase
119:38 - so if it's equal to the chase we're
119:40 - going to chase the player
119:42 - if our enemy underscore state so
119:46 - underscore
119:48 - come on here enemy underscore state is
119:51 - equal to enemy state
119:53 - attack
119:55 - then we are going to attack our player
119:57 - like this so we're going to attack him
120:00 - okay now let's code it out don't worry
120:02 - when i code this out i will revise the
120:04 - code again and it will be very clear
120:06 - what is happening
120:08 - so as you can see here
120:10 - in our chase we are going to say nav
120:12 - agent set destination so set the
120:15 - destination come on man set destination
120:18 - player target.position what the hell is
120:21 - this you see set destination is the sets
120:24 - or updates the destination triggering
120:26 - the calculation for a new path basically
120:28 - the destination where the nav agent
120:30 - should go will be our player's position
120:33 - this is the destination nav agent that
120:36 - speed is going to be equal to move speed
120:39 - so this is the speed of the nav agent
120:41 - that we are going to use
120:43 - and if our nav agent velocity that
120:47 - square root magnitude is equal to zero
120:51 - then we are going to say enemy anim dot
120:54 - walk and we're going to see here false
120:57 - and this is basically the same thing as
120:59 - with our player else except here we will
121:01 - not have those issues that we have with
121:03 - that we had actually with our players so
121:06 - here we have now true
121:08 - and right here below we're going to test
121:10 - if our vector 3 distance between the
121:14 - transform that position which is the
121:16 - current position of the enemy and our
121:18 - player target that position
121:21 - if that is less than or equal to the
121:23 - attack distance meaning we are in the
121:25 - distance where we can attack
121:27 - enemy state is gonna be equal to enemy
121:30 - state attack
121:32 - basically we can test this out because
121:34 - we set here the enemy state to chase and
121:37 - here we're gonna set this to chase so we
121:39 - can explain this right here if i go in
121:42 - unity
121:43 - and if i take my
121:45 - warrior so i'm gonna take the warrior
121:47 - and i'm gonna move him a little bit here
121:49 - so a little bit away from the enemy and
121:51 - before we test this out if you remember
121:54 - we created the enemy by duplicating the
121:56 - player so what you need to do is select
121:59 - the enemy and make sure that the player
122:01 - tag is not selected because if we go
122:03 - back here in our script we will get the
122:05 - player target by using the find game
122:07 - object with the tag so tag player it
122:10 - will search for that same tag so you
122:12 - need to be careful with this so select
122:14 - the enemy and go here and i'm going to
122:16 - click on add tag and click on the plus
122:19 - button and create an enemy tag
122:21 - and select the enemy and tag the enemy
122:24 - with the enemy tag and i'm going to hit
122:26 - apply button so be careful with this
122:28 - because we are using the code here we're
122:30 - using find game object with the tag
122:33 - player tag
122:34 - and it will be confused if it has two
122:36 - tags and it only needs to find one if
122:39 - it's find game objects with the tag then
122:42 - it will get the array of game objects
122:44 - who have that tag player but when we are
122:46 - searching only for one
122:48 - and we have two in the scene then unity
122:51 - will be confused and your code will be
122:54 - broken so you need to pay attention for
122:56 - that so if i hit the play button now and
122:59 - go back here in the scene view you will
123:01 - see how the enemy is coming closer to
123:03 - the player you see he is going towards
123:05 - the player when he gets where the player
123:07 - is
123:08 - so basically he needs to stop here but
123:10 - we did not tell him to stop he goes here
123:13 - where the player is and voila that is
123:16 - that let me just see here if i take the
123:18 - player and if i position here no he
123:20 - arrived at his destination and that is
123:23 - where the path ends i thought that if i
123:26 - move the player he will
123:27 - re-re-evaluate his destination but no we
123:30 - need to do that through code but let me
123:32 - explain what happened here
123:34 - basically let's go from the top
123:36 - this right here is our character
123:38 - animations and the nav mesh agent that
123:40 - we're using so this is clear this is the
123:42 - transform of the player this is the move
123:44 - speed of our nav agent this is the
123:48 - attack distance and chase player after
123:50 - attack distance we will see this in more
123:53 - depth when we create our attack so don't
123:55 - worry for these two
123:57 - but what is going on here is
124:01 - that we are getting our component
124:02 - character animations we are getting the
124:04 - component nav agent and also we created
124:06 - here these states by the way chase and
124:08 - attack and we set the state enemy by
124:12 - default to be chase and here in the
124:14 - update if the state is equal to chase
124:17 - then we will chase the player
124:19 - and when that happens we are going to go
124:21 - inside of this function so what does
124:23 - this function do basically you see this
124:26 - function here will set the destination
124:28 - meaning the target where should the nav
124:30 - agent go because the nav agent you see
124:34 - this one right here that we have
124:35 - attached on our enemy so let me select
124:38 - the enemy you see the navmesh agent he
124:41 - is the one who knows how to navigate on
124:43 - these
124:44 - green lines or these this green light
124:47 - green area because we bake that using
124:49 - unity's navigation all of that
124:51 - information is available to our nav
124:54 - agent he knows how to navigate in this
124:57 - area
124:58 - and for it to navigate so for the nav
125:02 - agent to go towards a certain position
125:04 - we need to call so we need to call here
125:07 - set the destination
125:09 - so nav agent set its destination to the
125:12 - position where we want to go we want to
125:14 - go towards the player so where the
125:16 - player is this is where we want to go
125:19 - this is our destination
125:21 - and
125:22 - here we set the speed to the movement
125:24 - speed so move speed so that we can move
125:27 - by the speed that we added right here
125:30 - which will
125:32 - set the speed of the nav agent while
125:34 - going towards this destination now you
125:36 - see here our nav agent as if i run the
125:39 - game again
125:40 - and if i click here on the scene you see
125:42 - how the enemy is coming closer to the
125:44 - player so our nav agent has velocity he
125:48 - built inside of it and we talked about
125:51 - velocity it speed over time and i set
125:54 - the example when you press your gas
125:56 - pedal on your car
125:57 - your car does not go from zero to 100 in
126:00 - one second it goes slowly so while
126:03 - you're holding the gas pedal it goes
126:05 - from 10 20 30 40 up to 100 speed that's
126:09 - that is velocity it increases over time
126:12 - basically if the nav agent is moving the
126:15 - velocity has a value and square root
126:17 - magnitude will simply set it to a number
126:20 - meaning if that number is greater than
126:23 - zero so if it's equal to zero basically
126:24 - that means we're not moving so if the
126:27 - velocity's square root magnitude is
126:29 - equal to zero we are not moving which
126:32 - means we are not gonna animate the walk
126:34 - animation
126:35 - else
126:37 - if
126:38 - the square root magnitude is not equal
126:41 - to zero meaning it's greater than zero
126:43 - meaning we are moving
126:45 - then we will set the walk to true and we
126:47 - saw that we're animating our enemy so
126:49 - i'm not going to go back but we saw that
126:51 - in action
126:53 - so the next thing here that we have is
126:54 - our vector 3 distance
126:56 - and this is this measures the distance
126:58 - between two points basically here i'm
127:00 - measuring the distance between the
127:02 - transform position which is the current
127:04 - enemy's position and between the
127:06 - player's position so think of it like
127:09 - this actually here is my highlight tool
127:11 - think of it like this if the enemy is
127:13 - here and the player is here i am
127:14 - measuring this distance between them so
127:17 - this distance between them will be
127:19 - measured and we will check if that
127:22 - distance is less than or equal to the
127:25 - attack distance so if the distance again
127:28 - between the enemy and the player if that
127:31 - distance is lower or equal to the attack
127:34 - distance we are in the range where we
127:36 - can attack then we are going to call
127:38 - here enemy state change it to the attack
127:42 - state which
127:43 - will make this true so if the enemy
127:45 - state is equal to attack
127:47 - we will call the attack function player
127:50 - now inside of this function here what's
127:53 - gonna happen we need to stop our navmesh
127:55 - agent you saw that he reached where the
127:58 - player is and he was moving basically so
128:00 - let's do that again just to test it out
128:03 - to see what i'm talking about so he will
128:05 - reach where the player's destination is
128:07 - you see here he's going towards the
128:09 - player going going going he gets where
128:11 - the player is and he stops but basically
128:13 - he's not moving but
128:14 - he is playing the move animation
128:17 - we don't want that what we need to do
128:19 - here is we need to call nav
128:22 - agent.velocity is equal to vector30 this
128:24 - will completely stop our nav mesh agent
128:28 - it will make him stop in an instance
128:30 - basically this is like you apply instant
128:33 - break on your car and it breaks
128:34 - instantly it does not move an inch after
128:37 - that
128:37 - we're also going to say nav agent is
128:40 - stopped is equal to true basically this
128:42 - will stop nav agent nav agent is now not
128:45 - working when we type here is stopped and
128:47 - if i hover over it will say the property
128:50 - holds the stop or resume condition for
128:53 - the nav agent
128:54 - even here if we set the destination but
128:57 - if we call here is stop so if i say nav
129:00 - agent is stopped and equal to true
129:02 - it will stop it will not try to go to
129:05 - this destination because it is it has
129:08 - instructions to stop
129:11 - so now we stopped the nav agent by these
129:14 - two lines of code the next thing to do
129:16 - is call our enemy walk or enemy anim
129:18 - walk is now equal to false
129:21 - our attack timer plus equals to time
129:24 - dot delta time and if our attack timer
129:28 - is greater than weight so
129:31 - wait before attack time this is where we
129:34 - attack and again we have two attacks so
129:37 - we're going to say if random dot range
129:39 - from zero to two
129:41 - is greater than zero 50 50 chance that
129:44 - we're gonna attack with attack one or
129:46 - attack two so here we're simply going to
129:48 - say enemy anim
129:50 - dot attack one
129:53 - else
129:54 - so not here enemy anim but else
129:58 - else attack two voila and we need to
130:01 - reset here the attack timer so attack
130:03 - timer is equal to zero so that we can
130:06 - basically attack again
130:09 - now
130:10 - we can test this out but we also need to
130:12 - start chasing the player if we can
130:15 - attack because the player can move away
130:17 - from us this right here will stop the
130:19 - game object it will stop it let me test
130:21 - it out and see that for yourself so if i
130:24 - hit the play button now let me just try
130:26 - to move a little bit closer to our enemy
130:28 - so come on just move a little bit closer
130:30 - go here into the scene so pay attention
130:32 - now the enemy will stop near the player
130:33 - so it will stop and it will start
130:35 - attacking you see it starts to attack
130:37 - but if we run away
130:39 - we run away and voila this is that you
130:42 - see but the enemy will continue
130:43 - attacking here does not know that we
130:45 - went
130:46 - so we need to tell it that so we
130:48 - basically need to tell our enemy that we
130:51 - run away
130:52 - so going back here right below this if
130:55 - statement we need to test if our vector
130:58 - 3
130:59 - distance
131:00 - again the distance from the enemy
131:02 - transform position and the distance from
131:05 - our player target position
131:07 - if it's greater
131:09 - than the attack distance
131:11 - plus
131:12 - chase player after attack
131:15 - so if this is true then we're gonna call
131:17 - nav agent is stopped is false
131:21 - enabling nav agent to move enemy state
131:25 - is gonna be equal to enemy state chase
131:28 - so that we can start chasing our player
131:32 - so what is going on here basically we
131:35 - saw that the enemy was coming towards
131:37 - the player we explained that right here
131:40 - we explain what is going on setting the
131:42 - nav agent destination towards the player
131:44 - will make the nav agent move towards the
131:46 - player this is the speed
131:48 - here we are testing if we are moving we
131:50 - will animate if the distance is lower or
131:52 - equal to the attack distance then we
131:54 - will attack this happens when we attack
131:57 - we stop the nav agent from moving we
131:59 - tell him you are stopped don't use nav
132:02 - agent at that time
132:04 - we set the walk to false and now we
132:07 - trigger these attack timers
132:09 - you saw that in the start function here
132:12 - i set the attack timer to be equal to
132:14 - weight before attack time and here i'm
132:16 - adding to the attack timer delta time
132:19 - and when the attack timer has a value
132:22 - greater than weight before attack time
132:24 - we will attack
132:25 - basically this is that when we go here
132:29 - and let me just bring the player closer
132:31 - to the enemy so now pay attention when
132:34 - the player gets as close to the enemy he
132:36 - starts attacking right away so that is
132:38 - that first attack and now he waits you
132:39 - see he waits a little bit then attacks
132:42 - again
132:43 - basically
132:45 - this right here because we set the
132:47 - attack timer to equal to weight before
132:49 - attack time as soon as we add here time
132:52 - delta time to the attack timer it will
132:55 - have a value greater than weight before
132:57 - attack time
132:58 - because again we set it here we set that
133:01 - here to be equal to so when we add a
133:03 - little bit value to it it is greater
133:05 - which means we can attack i want to
133:06 - simulate that because as soon as we get
133:09 - close to the player i want the enemy to
133:11 - attack the player that's why it happened
133:13 - like that
133:14 - and then we reset the attack timer to
133:17 - zero if we don't call this if i remove
133:19 - this from here
133:21 - and if i go back
133:24 - basically let me just turn this off i'm
133:26 - telling now in the word basically too
133:28 - much i don't know for some reason let me
133:30 - just take the warrior and move him a
133:31 - little bit closer to the enemies so that
133:33 - we can
133:35 - test it out faster
133:36 - so if i take the scene view and as soon
133:38 - as the enemy comes here he will attack
133:40 - once
133:41 - and since we are not resetting the
133:43 - attack time you see what is happening
133:45 - basically he is attacking every second
133:47 - now the reason for that is because the
133:50 - attack time will always have a value
133:52 - greater than weight before attack time
133:53 - if we don't reset it back to zero so now
133:56 - we are going to reset it back to zero
133:59 - which will wait this many seconds that
134:01 - we specified right here so now you
134:03 - understand these variables we wait this
134:06 - many seconds three that we specified
134:08 - here before we can attack and we're
134:10 - adding time.deltatime to the attack
134:12 - timer
134:14 - so that eventually it will have a value
134:16 - greater than weight before attack time
134:19 - and this is what we are doing here
134:21 - and basically when we attack again with
134:23 - the word basically so after that when
134:25 - this is true we will test the random
134:28 - range between zero and two if it's
134:29 - greater than zero we will attack
134:32 - with the attack one if it's not greater
134:34 - than zero
134:35 - then we will attack with the attack two
134:37 - same as what we did with our player
134:39 - randomizing the attack and we explained
134:41 - this
134:42 - so now we are coming close to this you
134:44 - see vector 3 distance transform position
134:46 - so if the distance between the enemy and
134:49 - the player is greater than the attack
134:51 - distance which is this one right here so
134:54 - this is the attack distance plus this
134:56 - distance right here so if it's greater
134:58 - the attack distance plus this here we're
135:00 - gonna give just a little space for the
135:02 - player so that he can run away before we
135:04 - start chasing him and we can see that
135:07 - right here so
135:08 - first of all let me take the enemy and
135:10 - i'm going to set
135:12 - the attack distance and 1.3 because and
135:15 - i'm going to hit apply to apply that
135:16 - change to the prefab because i don't
135:19 - want the enemy to come that close to the
135:21 - player he can come at 1.3 distance which
135:24 - is this distance right here you will see
135:25 - now
135:26 - you see this right here is exactly
135:28 - enough and this is how it looks like in
135:31 - our game view and basically you can play
135:33 - with this attack again with the word
135:35 - basically you can play with this attack
135:37 - distance value so the higher the number
135:40 - then
135:41 - the
135:42 - enemy will be far away from the player
135:44 - before he starts attacking but pay
135:46 - attention now when i start to run away
135:47 - you see he will wait a moment or two but
135:50 - before he starts chasing me so he will
135:53 - wait
135:54 - the attack distance plus this chase
135:56 - after attack distance
135:58 - until he starts to chase and here we
136:00 - need to say nav agent is stopped is
136:03 - false because here we set it to be equal
136:05 - to true which will stop the nav agent so
136:08 - set it to true we'll stop it if we don't
136:10 - call here
136:12 - this so if we don't call now it's equal
136:14 - to false to tell the nav agent that he
136:17 - is not stopped anymore
136:19 - pay attention what will happen so if i
136:21 - hit here the play button and the enemy
136:24 - will come close to me so he will come
136:26 - close now he will start attacking but if
136:28 - i try to run away you see he is not
136:29 - following me because he is stopped you
136:32 - see nothing is happening because
136:34 - we need to tell the nav agent his top
136:37 - now is false
136:39 - because again here we set it to be true
136:41 - and now we are telling him you are not
136:43 - stopped anymore you can move and he will
136:45 - start moving and then we simply set the
136:48 - enemy state to chase which again will
136:51 - make this right here true which we'll
136:53 - call the chase player function this will
136:56 - locate where the player is setting the
136:57 - destination to the player's position
137:00 - setting the speed to the nav agent and
137:02 - moving the nav agent animating him all
137:05 - of this stuff that we already explained
137:07 - and we are basically reusing these two
137:09 - functions
137:10 - one after another and here if we get
137:13 - again close to the player then we will
137:15 - say state is attack which will make this
137:18 - true and it will execute the attack
137:20 - player function and we explained
137:22 - everything what is happening in the
137:24 - player attack function so basically we
137:26 - are going from one function to another
137:28 - chasing the player then attacking if he
137:30 - runs away we chase him again and again
137:32 - with the word basically i don't know
137:33 - what's wrong with me so when he runs
137:35 - away we start chasing again when we get
137:38 - close we start attacking again
137:41 - so what is the next step to do because
137:44 - we are attacking
137:45 - but we are not dealing damage and we are
137:48 - not detecting that attack let's fix that
137:51 - so go back in unity and select the
137:52 - warrior here in the scene i'm gonna zoom
137:54 - in on him on him and click on the sword
137:57 - so this is our sword for the player and
138:01 - i am going to right click on the sword
138:03 - game object itself and create an empty
138:06 - game object this one is going to be the
138:08 - attack
138:09 - point
138:10 - and i'm going to tag this attack point
138:13 - with let's say this orange color so that
138:14 - i can move it and let's say somewhere
138:16 - around here i think it's okay so this is
138:19 - where it's going to be at
138:23 - one 0.0018 eight for the y axis just
138:26 - move him a little bit here and basically
138:27 - that is that
138:29 - so this is where the attack point is
138:32 - going to be for our warrior and of
138:34 - course for our enemies gonna be at the
138:36 - same exact place
138:38 - so let me just select the enemy here
138:41 - click on its sword and right click on
138:44 - the sword and create an empty this is
138:46 - going to be the attack point for the
138:48 - enemy
138:49 - and let me just copy this position so
138:54 - 0.001959 for the y-axis and bam and i
138:57 - can also tag it here with the red color
138:59 - so that we can see where it is so we see
139:02 - them both so we see the orange one and
139:04 - we see the red one for the player and
139:05 - for the enemy respectively
139:08 - what is the next thing to do the next
139:10 - thing to do is right click here inside
139:13 - of our scripts folder and create a new c
139:15 - sharp script and i'm going to call this
139:17 - one attack
139:19 - damage and of course as you can assume
139:21 - we are going to attach this on the
139:23 - attack point so select both of these
139:26 - attack points and go here
139:28 - and filter for the attack damage script
139:32 - and basically voila
139:34 - so
139:35 - now i'm gonna double click on the attack
139:38 - damage and here it is so what we're
139:40 - gonna do here is we're going to detect
139:42 - that collision
139:44 - what we need for that collision well we
139:46 - need here a public layer mask which i'm
139:49 - going to call layer we also need a
139:52 - public
139:53 - float radius which is going to be equal
139:55 - to by default one notice it's public we
139:58 - can edit this in the inspector panel
140:01 - we also need the public float damage to
140:03 - deal damage and that by default i'm
140:05 - going to set to be equal to 1 of course
140:07 - because it's public we can change the
140:09 - value in the inspector panel
140:12 - we don't need the start function for
140:14 - this one we only need the update and
140:16 - inside of the update we are going to say
140:18 - here collider
140:20 - array which i'm going to call hits is
140:22 - going to be equal to physics
140:25 - overlap sphere
140:27 - at the transform position using the
140:30 - radius using the layer that we have
140:34 - provided what the hell is going on
140:38 - you see this physics overlap sphere
140:40 - it is going to overlap a sphere at this
140:43 - position with this radius and this layer
140:46 - basically this is the following
140:48 - so if i go here come on what are you
140:51 - doing to me
140:52 - so here is the warrior i'm gonna zoom on
140:54 - the warrior we
140:56 - see where the point is so we see where
140:58 - the point is here it is this orange
141:01 - thing if i take the animation of the
141:03 - warrior and let's say attack zero and
141:05 - point or actually pay attention here i
141:08 - wanted to say pay attention at point
141:09 - actually attack two because attack two
141:11 - you see it's like this he he moves the
141:14 - hand behind him and then he attacks
141:17 - this overlap sphere will create a sphere
141:19 - at that position because we attached
141:22 - this
141:22 - on the attack point that sphere will be
141:26 - created on this position where the
141:28 - attack point is so it will be created
141:31 - like this think of it like this this is
141:33 - my highlight tool here
141:35 - so it will overlap a sphere at this
141:37 - position it will create a sphere like
141:39 - this it's a circle think of it as a
141:41 - circle it will create that circle at
141:43 - this position
141:44 - this is the radius of the circle you
141:46 - know circles have radius so the larger
141:48 - the radius the bigger the circle is
141:51 - and this layer right here means that the
141:55 - circle
141:56 - will search for collisions with game
141:59 - objects that are put on this layer right
142:03 - here now what the hell is this layer
142:06 - this layer is this one right here so if
142:08 - i go here and let me just clear the
142:09 - pencil this is the layer you see here at
142:12 - the hierarchy for every game object you
142:14 - have this layer all game objects are set
142:17 - on a default layer by default when you
142:20 - create them and that layer
142:23 - can be used for collision detections we
142:25 - can do things like this right here we
142:27 - can check here in the code if we are
142:29 - colliding with the game object that is
142:31 - on that layer we can even exclude
142:34 - collisions between layers
142:36 - with well the layer option so what we're
142:39 - gonna do is we're gonna select the
142:41 - warrior let me just pull this we're
142:43 - gonna select the warrior and we're gonna
142:45 - go under layer and we're gonna click on
142:47 - this add layer now this is a drop down
142:49 - list your click on when you click on the
142:51 - layer you have the default ones that are
142:53 - created automatically by unity but we
142:55 - need our own so i'm going to click here
142:57 - on add layer and here i'm going to
142:59 - create two new ones one is going to be
143:01 - the player another one is going to be
143:03 - the enemy
143:04 - so if i select the warrior and click
143:07 - here and we're going to select the
143:08 - player and you see this will pop up do
143:10 - you want to set the layer for all child
143:13 - game objects no only for the parent we
143:15 - don't want these children game objects
143:17 - we don't want the them to have the
143:20 - player layer because the warrior the
143:22 - player he is important so we're going to
143:25 - do the same thing for the enemy click
143:27 - here and select the enemy layer now know
143:29 - this object only hit apply here hit
143:32 - apply here now what is beautiful here is
143:35 - that we can because here in our code we
143:38 - are searching here for collision with
143:40 - the game object that is put on this
143:42 - layer right here you see on this layer
143:44 - right here so what we're gonna do is
143:48 - we are simply gonna select the attack
143:50 - point for the player and we're gonna
143:52 - search for the collision
143:54 - on the enemy layer because the player is
143:57 - attacking the enemy and i'm gonna hit
143:58 - apply to make that change apply to the
144:00 - prefab and here for the enemy i'm going
144:03 - to click on these fold or however these
144:06 - are called these arrows and select the
144:08 - attack point for the enemy and we're
144:10 - gonna search for collision on the player
144:13 - layer
144:14 - and click apply so that that change
144:16 - applies to the prefab because when we
144:18 - attack with the enemy
144:20 - we are attacking the player so we need
144:22 - to search for collisions with the player
144:25 - or for the player layer and here we're
144:28 - searching for collisions with the enemy
144:30 - layer
144:31 - now how can we
144:33 - know if we have collisions well simply
144:35 - simply here because this overlaps here
144:37 - returns an array of hits or array of
144:39 - colliders
144:41 - if we test here if our hits
144:44 - dot length is greater than zero that
144:46 - means we at least have one hit meaning
144:49 - we at least touched one game object so
144:52 - at least one game object is touched with
144:55 - this overlap sphere if the length of the
144:58 - array is greater than zero and here
145:02 - simply we're going to say print and i'm
145:04 - going to say
145:05 - touched the game object
145:09 - and basically we can test this out right
145:10 - now so if i go here in the console and
145:14 - clear everything so clear from the
145:16 - console
145:17 - if i go and try to attack even if the
145:19 - enemy attacks me now so pay attention in
145:21 - the console what will happen you see we
145:23 - are printing this too much you see it's
145:26 - printed like 300 times you see it here
145:28 - in the console we need to limit this so
145:31 - we need to limit this well how can we
145:33 - limit when we touch our game object we
145:35 - can simply see here game object set
145:37 - active is equal to false and this is how
145:40 - we can deactivate
145:42 - the attack point
145:45 - but this will create another issue
145:46 - because again we are dealing damage here
145:48 - remember here we are dealing damage here
145:50 - we are going to get the health script
145:52 - and gonna apply that damage and you saw
145:54 - it was called 300 times in a second
145:57 - so the reason for that is because the
145:59 - game object is active in the scene what
146:01 - will happen now is the following
146:04 - when i go here and when we attack pay
146:06 - attention so only once or actually it
146:09 - managed to attack me two times or
146:11 - actually no i attacked him once so yeah
146:14 - mine was also triggered and enemy was
146:17 - also triggered but now we are not
146:18 - detecting collision between each other
146:20 - anymore
146:22 - so we need a better solution
146:23 - but by now i hope that you get the point
146:26 - why we need to deactivate this game
146:28 - object the reason for that is
146:30 - if we leave it open if we leave it on or
146:32 - actually leave it active you saw that it
146:34 - is every time it touches or detects that
146:37 - collision it will execute the code and
146:39 - here we're gonna do this we're gonna say
146:42 - hits and the element that's it index
146:44 - zero dot get component and we're gonna
146:46 - get the health script component and
146:49 - we're gonna say here apply damage and
146:51 - we're gonna pass the damage for the
146:53 - float now we did not create this but we
146:55 - will create it and this is going to
146:57 - apply damage to our game objects and
147:00 - if we allow it to apply that damage 300
147:03 - times as we saw a moment ago
147:05 - then we cannot play our game our players
147:07 - will die instantly
147:09 - so what we need to do is select these
147:10 - attack points and turn them off so turn
147:12 - one attack point off turn another attack
147:14 - point off and for our warrior
147:17 - so starting with the warrior what i'm
147:18 - gonna do is go here in the player attack
147:21 - input
147:22 - and right here
147:25 - right here below our character animation
147:28 - so below the character animation what
147:30 - i'm going to do is i'm going to create a
147:31 - public game object which is going to be
147:33 - the attack point
147:36 - and at the bottom here
147:39 - i'm going to say void
147:41 - activate
147:42 - underscore attack point
147:45 - and i'm gonna say here attack point set
147:48 - active is true to activate that attack
147:50 - point and below i'm gonna say void
147:53 - deactivate underscore
147:56 - attack point and simply here i'm gonna
147:58 - say attack point set active is equal to
148:02 - false or set it to false
148:05 - but
148:06 - one thing to note here is because we are
148:08 - deactivating here there is a chance that
148:11 - we will deactivate this game object
148:13 - before it's even
148:15 - deactivated here
148:17 - because notice what we're gonna do here
148:19 - we're gonna test if
148:21 - our attack point so attack point
148:25 - is active in hierarchy so if the attack
148:28 - point is active in the hierarchy then we
148:30 - will deactivate it the reason for that
148:32 - is because we're gonna go now
148:34 - and we're gonna take these two
148:36 - animations
148:37 - so we're gonna take the attack zero one
148:40 - and attack zero two or actually attack
148:42 - underscore zero so click it here here it
148:45 - is attack underscore zero and duplicate
148:47 - it
148:48 - and attack underscore one and duplicate
148:51 - it
148:52 - so i'm gonna take the attack that's
148:53 - going to be attack two
148:56 - and this one is going to be attack one
148:58 - so i'm going to name them attack one and
149:01 - attack two and go back in the animator
149:04 - and select this right here and change
149:06 - the motion or the animation clip from
149:08 - attack zero to attack one and for the
149:10 - attack to do the same thing except here
149:13 - we're gonna select attack two because
149:15 - you can assume why we already did this a
149:18 - moment ago we're gonna go in our
149:20 - animation tab right here and for the
149:23 - attack one so i'm gonna preview it so
149:26 - this is how it looks like
149:28 - and
149:29 - here
149:30 - i'm going to click on this
149:33 - animation event and i'm going to select
149:35 - to activate so activate the attack point
149:39 - and when it attacks so somewhere around
149:41 - here i'm going to click another
149:44 - animation event and i'm going to type
149:46 - here deactivate
149:48 - the attack point
149:50 - and for our attack two animation i'm
149:52 - gonna do the same thing for some so
149:55 - somewhere around here here this is where
149:58 - the attack will go or this is where the
150:00 - animation will get and i'm going to call
150:02 - here
150:03 - activate attack point and when it gets
150:06 - here
150:07 - i'm going to call another animation
150:09 - event and i'm going to say here
150:11 - deactivate
150:13 - attack
150:14 - point so you get my point so do you get
150:17 - what i why i'm doing this here because
150:19 - if we attack and we don't hit a player
150:21 - if we get a hit here for the player or
150:24 - for the enemy then we will deactivate
150:26 - the game object but if we attack and we
150:29 - don't get collisions here then when the
150:32 - animation finishes let me go here player
150:35 - attack input when the animation finishes
150:37 - then we will
150:38 - as you can see deactivate these attack
150:41 - points and we're gonna copy these two
150:43 - scripts and go inside of the enemy
150:45 - controller
150:46 - and here right below the enemy state i'm
150:48 - gonna say public game object attack
150:52 - point
150:53 - so declaring the attack point and going
150:56 - here at the bottom so right above the
150:58 - class declaration and calling these two
151:01 - functions
151:02 - and we don't have to do anything for the
151:03 - enemy because the enemy has the same
151:05 - animations we're using the same animator
151:07 - controller for the enemy and for the
151:09 - player so if we go here we have the
151:11 - attack as you can see it has the exact
151:13 - same effect
151:15 - what what is left for us to do is select
151:17 - the warrior and drag and drop his attack
151:20 - point here inside of the player
151:24 - attack input sorry i bugged there for a
151:26 - second so player attack input and for
151:28 - our enemy select the enemy and here for
151:31 - the enemy controller drag and drop the
151:33 - attack point in the attack point and hit
151:36 - apply so that these changes apply to the
151:38 - prefab
151:39 - and basically we are done we can now
151:41 - test things out and i will explain them
151:43 - again so let's go here in the console
151:45 - and see how things goes how things goes
151:47 - how things go notice now if i attack so
151:50 - i'm attacking the point is being
151:51 - activated but we are not hitting the
151:53 - enemy so now you see and the enemy
151:55 - attacked me but now you see why is this
151:58 - here necessary
152:00 - the reason for that is because you saw i
152:02 - attacked the enemy was not there
152:04 - we activated the attack point but
152:08 - we did not have any hit we didn't have
152:10 - any hit here so this will not be
152:13 - executed it will not hit this line of
152:15 - code so game objects active false will
152:17 - never be called
152:19 - meaning when we get to the animation
152:22 - frame where we call this
152:24 - then if the attack point is active this
152:26 - right here will test if it's active
152:29 - meaning we did not call set active or
152:32 - it's basically active if i select the
152:33 - ground
152:34 - and if i click here this is now not
152:37 - active you see when i click on this
152:38 - check box which is right here you see
152:41 - where the check box is
152:42 - right to the left side right to the left
152:45 - to the left side of the layer that's the
152:47 - check box and if we click on it now it's
152:49 - unchecked meaning the game object is not
152:51 - active if it's checked then the game
152:53 - object is active we can even see it in
152:55 - the scene and we are doing this exact
152:59 - thing in the code with this line of code
153:01 - set active is false will not make it
153:03 - active and it's not visible in the scene
153:05 - and true will make it visible and active
153:07 - in the scene so this right here tests if
153:10 - the game object is active if it is then
153:13 - turn it off because we tried to attack
153:16 - we
153:17 - activated it but we did not made any hit
153:20 - so yeah it's not active and now we can
153:22 - test it out so if i go here you see the
153:24 - enemy is attacking in and touch the game
153:26 - object and here i touched him again and
153:28 - now i touched him and now he will attack
153:30 - me and he touched me and now i touch him
153:32 - i know this sounds weird i touch him he
153:34 - touch me but hey don't don't think of
153:37 - anything anyways
153:38 - you get my point and you see
153:41 - how can we detect collision by using
153:43 - this right here now we can safely delete
153:45 - this because we see it is working we
153:47 - printed everything out so we see that we
153:51 - are detecting collision so we are
153:53 - detecting we can touch the player and we
153:55 - can touch the enemy so we can basically
153:58 - attack each other the next thing to do
154:01 - is create this health script that we
154:04 - commented here out so i'm gonna copy
154:06 - this name health script and go here in
154:09 - unity and go back in the project because
154:11 - we need to subtract the health value
154:13 - from our enemy when we attack with the
154:15 - player and vice versa so in the scripts
154:17 - folder right click here and create a new
154:20 - c sharp script name it help script and
154:24 - as you can assume we are going to attach
154:26 - it on the enemy and on the player so
154:28 - select both of them so select them click
154:31 - on add component and click here
154:34 - help or actually filter for the held
154:37 - script and voila here is the health
154:39 - script
154:40 - so we need to double click it and open
154:42 - it here in visual studio let me just tag
154:44 - the class here because inside of our
154:47 - health script we are going to subtract
154:49 - the health value which means that we're
154:51 - going to have here a public float health
154:54 - which by default we can say it's equal
154:56 - to 100 so when we start the game we are
154:58 - going to have 100 for the health
155:03 - now here i'm going to remove
155:05 - start and update and we're going to have
155:07 - here a public void apply damage which
155:11 - will take float damage as a parameter
155:15 - and simply what we're going to do is we
155:17 - are going to see here health
155:20 - so our health variable minus equals the
155:22 - damage that we are passing here as a
155:24 - parameter because we are going to
155:26 - subtract
155:27 - damage from the health now this minus
155:29 - equals is a shorthand for writing health
155:32 - is equal to health minus
155:34 - damage so instead of typing health is
155:37 - equal to health minus damage we can
155:39 - simply say minus equals
155:41 - and it is the same exact effect
155:44 - and here let me just tag it so apply
155:47 - damage
155:48 - and here we're going to test if our
155:50 - health is lower or equal to the value of
155:53 - zero
155:54 - meaning
155:55 - health dropped to zero here we're going
155:58 - to print or we're going to say here
156:01 - the character died so the character died
156:06 - and here in our attack damage now we can
156:08 - uncomment this line of code and you can
156:10 - see here the beauty so we have the
156:12 - damage here which is the parameter we
156:14 - set it to be public basically this one
156:16 - is the local variable and here we have
156:19 - the as you can see we're passing it as a
156:21 - parameter we set it to be public which
156:23 - means we can edit the value in the
156:25 - inspector panel so when we call apply
156:27 - damage we can say for example this value
156:30 - here to be 100 and it will subtract 100
156:33 - from the current health value then it
156:36 - will test if the health value is less
156:39 - than or equal to zero if that's the case
156:41 - we will print that the character has
156:43 - died now in order to
156:44 - see this in action i'm going to go here
156:47 - in the console let me first clear the
156:49 - console that is
156:51 - and if i take the warrior
156:53 - since we are if you select
156:56 - here our warrior and the attack point
156:58 - you will notice that the damage is one
157:00 - if i set the damage to be 20 for example
157:03 - and go here select the enemy and you see
157:06 - here the health is currently 100 you can
157:09 - pay attention right here let me just
157:11 - clear my highlight tool here i'm going
157:14 - to select the enemy and now when i play
157:16 - the game you will pay attention to the
157:17 - health value of the enemies let's go and
157:20 - attack the enemy so here we are and
157:22 - attacking pay attention now it's 80 then
157:25 - 60 40 20 and one more bam you see the
157:29 - character died so the character
157:32 - died
157:34 - now this is not the effect that we want
157:36 - we don't want to print simply in the
157:37 - console the character died instead we
157:39 - want to do some things and in order to
157:42 - do those things we are going to create
157:44 - here a private float
157:47 - x that this is going to be the rotation
157:49 - which is going to be equal to negative
157:51 - 90 because what i'm going to do is let
157:53 - me explain first
157:55 - i'm going to take the warrior here
157:57 - and when one of the game objects dies
158:00 - what i'm gonna do is simply rotate him
158:02 - backwards so rotate him like this
158:04 - negative 90 degrees so he falls on the
158:06 - ground because we don't have a that
158:09 - animation if i go here in models
158:12 - so models and animation we don't have
158:14 - here the death animation so we cannot
158:16 - simulate that with an animation because
158:18 - this 3d model for some reason don't ask
158:20 - me why i don't know
158:22 - so i don't know why doesn't it have the
158:24 - death animation but usually you will
158:26 - have that animation and then you will
158:27 - play that that animation but here we're
158:30 - going to simulate that so we're going to
158:32 - see here private float x that
158:35 - private float that underscore smooth so
158:39 - smooth which is going to be equal to 0.9
158:42 - f
158:43 - uh private float rotate underscore time
158:46 - which is going to be equal to 0.23 f
158:50 - uh private
158:51 - bool which is going to be equal to or
158:54 - name of it is going to be equal to
158:56 - player died
158:58 - so what do we need to do well now we're
159:00 - going to get back the update function so
159:02 - we're going to see here update and here
159:05 - what i'm going to say is if player died
159:08 - so if that is true so if our player has
159:11 - died
159:12 - we are going to do what we are going to
159:14 - call a function that we are going to
159:15 - call rotate after
159:18 - death now of course we did not create
159:21 - this function so let me just go here hit
159:24 - enter to
159:25 - give a little bit more space here come
159:28 - on what are you doing here and here so
159:31 - if player died if this becomes true and
159:34 - by the way by default a boolean
159:37 - value is equal to false so if we simply
159:39 - declare a boolean value like this so if
159:42 - we declare it we don't type it's equal
159:44 - to false or if it's equal to true then
159:47 - by default it will be equal to false
159:49 - that means this right here will not be
159:50 - true we need to set it to be true
159:55 - and here we have this rotate after that
159:57 - so simply here we're going to create
159:59 - this void rotate after death
160:03 - and simply here we're going to call our
160:04 - transform euler angles you see the
160:07 - rotation as euler angles in degrees you
160:10 - see this euler angles is vector 3 so we
160:13 - need to pass a vector 3. so this is
160:15 - going to be equal to
160:17 - new vector 3
160:19 - and we have now values for x y and z for
160:22 - our x we're going to use mat f dot lerp
160:26 - from transform euler angles x
160:30 - towards the x that
160:32 - in time dot delta time multiply that
160:36 - with the that smooth
160:38 - for our y we're going to say transform
160:41 - euler angle is y and for z transform
160:44 - euler angles dot z so what is going on
160:49 - right here so what is this
160:51 - well basically we are going to learn and
160:55 - lerp means you see this math f lerp it
160:58 - linearly interpolates between a and b by
161:00 - t this is a
161:02 - in order to paint the picture this
161:05 - lerp will go from this point to this
161:08 - point in this timely manner so this is
161:11 - point a so this is right here point a
161:15 - and this right here this x that excuse
161:18 - me so let me just go here so this is
161:21 - point a
161:23 - this right here
161:24 - this is point a
161:26 - this x that is point b so here we have
161:30 - point b
161:32 - and t is time so the time interval which
161:35 - is this one right here time dot delta
161:37 - time multiplied with the that smooth
161:39 - that is t or time now again y times that
161:43 - delta time well because
161:45 - to
161:46 - smooth things out and you see here i'm
161:48 - using that smooth so we need to smooth
161:50 - things out
161:52 - again we will go from this value towards
161:54 - this value in this timely interval and
161:57 - the current value of the euler angle x
162:00 - which is the rotation x will be zero
162:03 - we're going to go towards the x that
162:05 - which is negative 90
162:07 - and basically that's what we are doing
162:10 - and in order to activate this what we
162:12 - need to do is here we are going to
162:14 - create an i enumerator not enumerable in
162:17 - numerator and we're going to call this
162:19 - one player or actually we're going to
162:21 - call it a low allow rotate and here
162:25 - we're going to say player died is equal
162:27 - to true to allow the player to die
162:30 - basically it will activate this right
162:32 - here so it will go here in the if
162:35 - statement this will be true and it will
162:37 - activate the rotate after that function
162:40 - then we're going to say yield return new
162:43 - wait for seconds and that's going to be
162:45 - the rotate time which is 0.9 if we go
162:48 - back here this is the rotate item
162:50 - actually 0.23
162:52 - so this is the rotate time
162:55 - and then simply here we are going to
162:57 - call our player diet is equal to false
163:01 - now we will see in a second why are we
163:03 - doing it like this so if i go here if
163:05 - health is less than or equal to zero
163:09 - then we are going to die so we are going
163:11 - to call here starco routine and we're
163:13 - going to call allow rotate co routine
163:16 - which will
163:18 - enable player that is equal to true
163:20 - which will make this true which will go
163:22 - inside of this function and it will
163:24 - rotate so it will go from the current x
163:27 - rotation to this the targeted which is
163:30 - the x depth
163:31 - rotation which is negative 90 in this
163:34 - time interval and we will leave the y
163:37 - and the z rotation intact
163:39 - if i go back now and what i'm gonna do
163:41 - is i'm gonna do that with the player
163:44 - or actually let's test it out on the
163:46 - enemy because we have the same script on
163:48 - the enemy first so if i go here i will
163:50 - need to
163:51 - attack the enemy five times so one
163:54 - two
163:56 - three
163:57 - four and notice now when i hit him five
163:59 - bam you see but
164:01 - basically nothing happened why is that
164:06 - well we need to also deal with some
164:08 - other things such as we need to
164:10 - deactivate these scripts if i select the
164:12 - warrior for the warrior we will need to
164:14 - deactivate his animator player moves on
164:17 - and so forth for the enemy we need to
164:19 - deactivate the nav agent we need to
164:21 - deactivate the enemy controller so we
164:24 - are going to start doing that with this
164:26 - variable so we are going to create here
164:28 - a public bool variable that we are going
164:31 - to call is player so call it is player
164:35 - like this
164:37 - and when we die so when we die here
164:40 - inside of this
164:43 - if statement so if health is less than
164:45 - or equal to zero the first thing that we
164:48 - need to do is we need to say here get
164:50 - component the animator so animator
164:52 - component and we need to say enabled is
164:54 - equal to false so that we can deactivate
164:57 - the animator so deactivate the animator
165:01 - now next we are going to test here if is
165:04 - player so if we have a player we are
165:07 - going to disable his script so we are
165:09 - going to see here get component
165:11 - player move and we're going to say
165:13 - enabled is equal to false we're also
165:16 - going to say get component player attack
165:20 - input and we're going to say enabled is
165:22 - equal to false we're going to do two
165:25 - more things but we will see that in a
165:26 - second else if it's not the player so if
165:29 - it's the enemy
165:30 - then we're going to say here get
165:32 - component and we're going to say enemy
165:34 - controller component enabled is equal to
165:37 - false and we also need to say here get
165:40 - component nav
165:42 - mesh agent like this
165:45 - and we need to say that enabled is equal
165:48 - to false but
165:50 - you see here we cannot do that because
165:52 - we need to go here and type using unity
165:56 - engine dot ai so that we are able to use
166:00 - nav mesh agent as a component and
166:03 - disable it
166:05 - so you see here we have is player and we
166:08 - have else which is not for the player
166:10 - and we are going to differentiate
166:12 - between the player and the enemy because
166:13 - they both
166:15 - carry this health script so what we need
166:18 - to do is go here in unity and select the
166:21 - warrior so the warrior we're going to
166:22 - select him and he is going to have this
166:25 - is player check box checked inside of
166:28 - the hell script i'm going to hit apply
166:30 - to make changes to the prefab so you see
166:32 - here that his player is checked but for
166:34 - the enemy his player will not be checked
166:36 - and i'm also going to hit apply for the
166:38 - enemy so that that change applies to the
166:40 - prefab so for the enemy is player is not
166:43 - going to be checked so let's test this
166:46 - out right now and see if it actually
166:48 - works
166:49 - so if i go here i will need to attack
166:51 - the enemy
166:52 - four or actually five times so one more
166:55 - time notice one more time after i hit
166:57 - the enemy bam you see now the enemy
166:59 - falls and pay attention you see his nav
167:02 - agent is not active his enemy controller
167:05 - is not active so we had to disable those
167:08 - scripts you see we had to disable these
167:11 - scripts in order for this to work
167:13 - because we are simulating the rotation
167:16 - we are simulating the that by simply
167:18 - rotating the character to fall down
167:21 - basically this is what we are doing so
167:22 - he is falling down
167:26 - and
167:26 - this is how we are simulating that
167:30 - but since we had the enemy controller
167:32 - script which was attached on the enemy
167:35 - we also had the nav agent which was also
167:38 - attached on the enemy they are
167:40 - interrupting this process right here so
167:42 - we had to disable them so we had to
167:44 - disable them right here so enabled is
167:46 - equal to false basically means this if i
167:49 - select the enemy and i disable his enemy
167:52 - controller script and i run the game you
167:55 - will see now that the enemy is standing
167:57 - over there it's not working because if
167:59 - you pay attention here on the enemy you
168:02 - see where his enemy controller script is
168:04 - you see the check box right here it is
168:06 - disabled meaning this script will not
168:09 - will not function if i enable it bam you
168:12 - see automatically starts
168:14 - running towards me because his script is
168:17 - also running and it is working
168:20 - now let me take here the enemy and what
168:23 - i'm gonna do is for the enemy attack
168:25 - point i'm going to set the damage to be
168:27 - equal to five to make this somewhat a
168:29 - fair battle and i'm also going to take
168:31 - the warrior and set his health to be
168:33 - equal to five so set the health of the
168:37 - player to be equal to five because
168:40 - we want to test this out i want to show
168:42 - you two issues that we have pay
168:43 - attention now when the enemy kills the
168:45 - player bam you see the camera went over
168:48 - here and notice the enemy is still
168:49 - attacking pay attention the enemy is
168:51 - attacking and the player or the camera
168:54 - is at the ground
168:55 - so we need to add two more lines of code
168:58 - here if he is player so if he is player
169:01 - we are going to disable the player move
169:02 - and the attack input and notice here we
169:05 - are disabling the animator for both the
169:07 - enemy and the player so we are disabling
169:11 - for both again the enemy and the player
169:13 - because we don't want their animator to
169:15 - play anymore but here if he is player
169:18 - and we checked the checkbox for the
169:20 - player so we saw how that goes so we
169:22 - check the checkbox if his player then we
169:27 - also need to do two more things we need
169:28 - to
169:30 - say here our camera so camera main
169:33 - dot transform set parent is now equal to
169:37 - null because
169:39 - pay attention here the camera and let me
169:42 - just fold all of these so fold this and
169:45 - this you see the camera is a child of
169:47 - our player so whatever the player does
169:50 - so if the player is being rotated let me
169:52 - select the warrior if i rotate the play
169:54 - you see the camera is following because
169:56 - the camera is a child of the player
169:59 - whatever the player does if he moves
170:01 - left the camera moves along with it if
170:03 - he moves right the camera moves along
170:04 - with him so if he rotates the camera
170:07 - will rotate because it's a child of the
170:10 - warrior game object so what we need to
170:12 - do is we need to set the parent of the
170:14 - camera null meaning
170:17 - the player is not the parent game
170:20 - object for the camera anymore
170:24 - and you also saw that the enemy was
170:26 - attacking so we need to disable the
170:29 - enemy script we need to make the enemy
170:31 - basically not attack the player and we
170:34 - are going to do that by calling here
170:36 - game object
170:37 - find the game object with the tag
170:40 - tags dot enemy tag so enemy
170:44 - underscore tag and we need to create
170:45 - this enemy tag in the tag so going here
170:49 - and here we're going to say public
170:51 - constant string enemy tag is equal to
170:54 - here enemy
170:56 - so we are going to get the enemy and we
170:58 - are going to see here
171:00 - dot
171:01 - get component and we are going to get
171:03 - our enemy controller component and we're
171:06 - going to say that enabled is now equal
171:08 - to false because we want to deactivate
171:12 - our enemy game object we can now test
171:15 - this out but we need to make sure two
171:17 - things first of all you need to make
171:19 - sure that the enemy is tagged with the
171:21 - enemy tag and that the camera main is
171:24 - also tagged so if i go back here select
171:26 - the enemy you see that the enemy is
171:28 - tagged with the enemy tag
171:30 - select the camera in player so this one
171:32 - right here see the camera in player and
171:34 - it's untagged so we need to select this
171:36 - main camera tag it is build by default
171:40 - so by default it is in unity so select
171:42 - the camera in player and put the main
171:45 - camera tag on it because as i said this
171:48 - camera main it's built in unity and if i
171:51 - hover over it will say the first enable
171:53 - camera tagged main camera so in order to
171:56 - do this or use this in our code we need
171:59 - to tag the camera with the main camera
172:02 - and if i test this out now because i
172:05 - have set the health of my player to 5 as
172:08 - soon as the enemy attacks me notice now
172:10 - i'm dead the enemy is standing still he
172:13 - is not attacking me because we disabled
172:16 - his
172:17 - enemy controller script as you can see
172:20 - he is playing his idol animation and i'm
172:23 - land or standing here dead or laying
172:26 - down dead and the camera pay attention
172:28 - the camera is now free if i select here
172:30 - it is you see camera in player is now
172:32 - free it's not under the player game
172:34 - object it's completely free it does not
172:37 - have a parent game
172:39 - object any more basically this is what
172:43 - we did so again here briefly
172:46 - we are testing here if health is less
172:48 - than or equal to zero this is clear when
172:50 - that happens we will disable the
172:52 - animator we want don't want to animate
172:54 - we will allow to rotate and we explain
172:56 - here what we are doing because we only
172:58 - want to rotate 90 degrees angles we are
173:01 - going to allow the rotation wait for the
173:03 - rotate time and disable or set the
173:06 - player that died is equal to false so
173:09 - that we don't
173:10 - so that we don't activate or don't do
173:12 - this anymore because if i remove this
173:14 - right here let me just go and test it
173:16 - out so if i go here and wait for our
173:20 - enemy to come closer
173:23 - come on unity run the program run
173:26 - notice now when the enemy hits me bam
173:28 - you see
173:30 - you see
173:31 - this is the reason why
173:33 - this is the reason why i am allowing and
173:36 - then not allowing so if i say here
173:38 - player died true then we will allow to
173:40 - rotate then we will not allow to rotate
173:42 - you saw the reason why because this
173:44 - right here will execute over and over
173:46 - and over and we don't want to allow it
173:50 - to glitch as you saw a moment uh go
173:55 - so what is the next thing to do the next
173:57 - thing to do is to display the health
174:00 - values
174:02 - to our user so if i go here in unity i'm
174:04 - going to create a ui canvas now i cannot
174:07 - go too much into ui i will cover that in
174:10 - some other video so
174:12 - it will be too much this video is
174:14 - already almost i don't know three hours
174:16 - anyways i'm gonna right click here and
174:18 - go under you and create a image so let's
174:22 - go here and create an image and this is
174:24 - our ui canvas and i'm going to name it
174:26 - to ui canvas
174:28 - and we're going to leave it at screen
174:30 - space overlay which means basically it
174:32 - will overlay the screen but i'm going to
174:34 - set this canvas scaler script to
174:36 - constant pixel size to screen with
174:39 - screen size or scale excuse me not
174:41 - screen with screen size scale with
174:43 - screen size
174:44 - reference resolution is going to be 1280
174:46 - by 720
174:48 - and i'm going to say here 0.5 to match
174:50 - width and height equally basically what
174:52 - i did here is that this canvas will take
174:55 - this reference resolution at
174:57 - like its main resolution and it will try
175:00 - to make these game objects
175:02 - apply or or resize according to this
175:05 - resolution as i said i will cover canvas
175:08 - and everything specific to the canvas in
175:10 - a separate vdo
175:13 - so now i'm going to right click on the
175:15 - canvas and create an empty game object
175:17 - and this empty game object is going to
175:19 - be our player health it's gonna be empty
175:22 - as i already said and we're going to set
175:24 - the width and the height 1280 by 720
175:29 - and the first thing that we are going to
175:30 - do with this player help i'm going to
175:32 - right click here
175:33 - go under ui and create a text
175:36 - component
175:37 - and i'm going to rename it here to
175:39 - player text and there inside of the text
175:43 - we're going to type layer this is what's
175:44 - going to be displayed
175:46 - i'm also going to align the text at the
175:48 - center or actually we're going to align
175:51 - it
175:51 - left but center so left here center but
175:55 - on from the left side
175:57 - the font size is going to be 59 and i
175:59 - know that you currently don't see the
176:01 - text but you will see it in a moment
176:03 - the color is going to be white so click
176:05 - here on the color if you ever worked in
176:06 - photoshop or any other editing software
176:09 - in regards to images you will you will
176:11 - know these options or any text
176:14 - software so you know the alignment you
176:16 - know what is a font size you know what
176:18 - is a font style bold italic normal sun
176:21 - and so forth
176:22 - now for the width of our text i'm going
176:25 - to say
176:26 - 386 and for the height i'm going to say
176:29 - 81
176:30 - i'm also going to set here the anchor at
176:33 - the top left corner basically this will
176:35 - make the center of the player the top
176:38 - left corner so this is the anchor it
176:40 - will make the center of our text top
176:42 - left corner the position x is going to
176:44 - be 214 and the position y is going to be
176:47 - negative 40. so this is for our player
176:51 - the next thing to do is create rbg which
176:54 - is our image i'm simply going to drag
176:56 - and drop it here under the player help
176:58 - so drag and drop the image and i'm going
177:00 - to rename it to bg
177:02 - set the anchor of it to top left corner
177:06 - and the width is going to be 228
177:11 - the height is going to be 29
177:14 - and i'm going to set here the position x
177:16 - at 130
177:18 - and the position y is going to be
177:20 - negative 100 101.
177:23 - now i also need to duplicate this health
177:25 - so i'm going to duplicate it this bg and
177:28 - i'm going to rename it to player health
177:31 - display
177:32 - and for this one we need to go here in
177:35 - our project and ui and we have this
177:37 - health ui which is simply this image
177:39 - this white thing right here
177:41 - but what we need to do is we need to
177:43 - select it
177:44 - and in the inspector panel because if i
177:46 - try to drag and drop it right now here
177:49 - it's not gonna work and let me just
177:51 - clear here i can drag and drop it here
177:54 - for the image to represent to be
177:56 - represented by that image but it's not
177:58 - working now because the default value or
178:00 - the default texture type of this image
178:02 - is set to default
178:04 - you need to click here on this right
178:06 - here where it says texture type
178:08 - so you need to click on that and you
178:10 - need to select the sprite 2d and ui and
178:13 - hit apply at the bottom right corner so
178:16 - now we are able to use this health ui as
178:19 - an ui or actually drag and drop it here
178:22 - and simply create a health ui from it
178:25 - now again you don't see the difference
178:27 - but now i can click on the color and i
178:29 - can change the color to red which you
178:31 - can see but what's most what's more
178:33 - important i can click on this image type
178:36 - inside of the image script i can click
178:38 - on the image type and i can set it to be
178:40 - filled
178:42 - and i can change this from radial to
178:44 - horizontal and pay attention now when i
178:46 - move the slider left and right so you
178:48 - see i'm moving the slider left and right
178:50 - and we are filling
178:51 - up
178:52 - the
178:53 - so we are filling up the image
178:57 - with this red value we are filling it up
178:59 - you see and lowering this is going to be
179:02 - our health this is going to display the
179:05 - health so what i'm going to do is
179:06 - duplicate this player health and rename
179:08 - it to enemy health so here enemy health
179:12 - and i'm going to take the text and it is
179:14 - going to be enemy text
179:18 - and position is 214 but i'm going to set
179:21 - the anchor at the top right corner and
179:24 - the position is going to be negative 214
179:28 - and the alignment is going to be on the
179:30 - right side
179:32 - and here we are going to say enemy like
179:34 - this
179:35 - for the bg we're going to do the same
179:37 - thing so x is 130 set the anchor at the
179:40 - top right corner and this one is going
179:43 - to be negative 130
179:46 - and for our enemy display held so change
179:49 - it from player to enemy health display
179:53 - i'm going to set the anchor at the top
179:55 - right corner and set the x position to
179:58 - negative 130 but you see now we need to
180:01 - change the origin of the fill because it
180:04 - is filling from the right side we need
180:06 - to change it to the left and this is all
180:08 - or this happens in all of these options
180:11 - so right here so you see the fill
180:13 - right here i change it from left to
180:16 - right so select on this drop down let's
180:19 - change it from left to right so now when
180:21 - we fill you see it's going
180:23 - from
180:24 - this side or from the left to the right
180:29 - now what we need to do to make this
180:31 - happen is simply go here in our visual
180:33 - studio and in the health script right
180:35 - here
180:36 - we also need to type below using unity
180:39 - engine a i we need to type using ui so
180:42 - unity engine dot ui
180:44 - and right below our public bull is
180:47 - player we're going to create a private
180:49 - image which i'm going to name health
180:52 - ui
180:54 - and we made it private because we don't
180:56 - want it to be accessed in any other
181:00 - class
181:01 - so don't want it to be accessed in any
181:03 - other class but we also want to drag and
181:05 - drop so we want to drag and drop these
181:07 - health display values
181:10 - in appropriate slots so you see here we
181:13 - don't see them but since we made it
181:15 - private i'm simply going to see here
181:17 - serialize field and it will make them
181:19 - visible now in the inspector panel so
181:23 - you see now they will be visible in the
181:25 - inspector panel so for the warrior
181:28 - drag and drop the player health display
181:31 - and for our enemy health or actually for
181:33 - the enemy drag and drop the enemy health
181:36 - display so for the warrior we have the
181:40 - warrior or player held display for enemy
181:42 - we have the enemy held display and
181:45 - inside of here inside of our apply
181:47 - damage
181:48 - right here after we subtract from the
181:51 - health the damage value
181:53 - we are simply going to see here if our
181:56 - health ui so health ui is not equal to
181:59 - null so we have a reference
182:01 - we're going to say health ui.fill
182:04 - is equal to the health value but we need
182:07 - to divide that by 100 because
182:09 - if you go back here in unity
182:12 - you will see that when you select let's
182:15 - say for the player health display if you
182:16 - select it you will see that the fill
182:18 - amount goes from the value of zero up to
182:22 - one so it goes from zero to one it
182:25 - cannot go from zero to one hundred so
182:27 - from zero to one that's why we are
182:29 - dividing this by 100 because if the
182:32 - health current value is 100
182:34 - and we subtract from it 20 that will be
182:37 - 80 80 divided by 100
182:40 - it's eight
182:41 - so that's why we are actually not 8 but
182:44 - 0.8 excuse me so 80 if we divide 80 by
182:47 - 100 so 100 that's equal to 0.8
182:51 - and it will fill that image amount
182:55 - so if we go back here in unity what i'm
182:57 - going to do is set the warrior health
183:00 - back to 100 and for the enemy health
183:04 - so select the enemy the help is also
183:07 - equal to 100
183:10 - so what we need to do inside or actually
183:14 - now simply test it out so if i hit the
183:16 - play button
183:18 - let's go here and pay attention when the
183:20 - enemy attacks the player you see now pay
183:22 - attention to the player's health value
183:25 - it's decreasing and also when i attack
183:27 - the enemy you see i'm decreasing his
183:29 - health value decreasing even more and
183:31 - even more and even more and when i hit
183:34 - him one more time he dies and as you can
183:36 - see he is lying dead
183:39 - and basically this is how we are going
183:42 - to
183:43 - this is how we are going to display
183:46 - the
183:47 - health value now that we are displaying
183:49 - the health value let's shield ourselves
183:52 - from the enemy and in order to do that
183:54 - i'm going to go here in scripts and
183:56 - right click
183:57 - and go here c-sharp script and create a
184:00 - player shield script as you can assume
184:03 - this is only going to be attached on the
184:05 - player so select the player and drag and
184:08 - drop the player shield script on him hit
184:11 - apply so that that change applies to the
184:12 - prefab
184:14 - go here and double click player shield
184:16 - and this one is going to be a very
184:18 - simple script here we are going to have
184:21 - a private
184:22 - and that is going to be our health
184:24 - script so health script which i'm going
184:26 - to call health script
184:29 - and in the awake function we're going to
184:31 - get the reference it so awake here and
184:34 - we're simply going to say held script is
184:36 - equal to get component health not head
184:39 - off health
184:41 - script component
184:43 - and here we're going to have a public
184:46 - void activate
184:48 - shield which is going to take a bull
184:51 - shield active
184:54 - and what we need to do here first of all
184:57 - we need to go in the health script and
184:59 - we need to create here a public
185:02 - public bull and this one is going to be
185:04 - shield activated
185:07 - and it is public because i want to
185:09 - access it here because i want to see
185:11 - here
185:12 - healthscript.shield activated is equal
185:15 - to this value here shield active so it
185:17 - will be either true or false
185:19 - so that's why i want it to be
185:21 - public i don't want it to be private
185:23 - because if i set it to be private it
185:26 - will not be able to access it here you
185:28 - see
185:29 - is do it's inaccessible due to its
185:32 - protection level so we cannot access it
185:34 - because of its protection level
185:36 - so we need to make it public i but i
185:38 - don't want it to be visible in the
185:40 - inspector panel if i go here and select
185:42 - the warrior pay attention to the player
185:44 - health script i don't want this shield
185:47 - activated to be visible here
185:49 - so what can i do same as here serialize
185:52 - field for the private variable we can
185:54 - say open square bracket hide in
185:56 - inspector for a public variable and it
185:58 - will be hidden
186:00 - in the inspector
186:02 - panel
186:04 - now what we're gonna do with this shield
186:06 - activated is here on top
186:08 - of our apply damage you see
186:11 - i'm going to say if shield activated i'm
186:14 - simply going to say return now you're
186:16 - like but we cannot use return and avoid
186:18 - function
186:20 - yes we cannot use it to return a value
186:22 - but if we say here return this will
186:25 - break out of the function what do i mean
186:27 - by break out of the function
186:30 - imagine like this if this is true when
186:32 - we enter this apply damage function so
186:35 - this is the first thing that we're going
186:37 - to check if this is false then we will
186:38 - proceed down to execute the rest of the
186:42 - code so from here up to the bottom where
186:44 - we have the code inside of this function
186:46 - but if this is true if shield activated
186:49 - is true and we hit this return statement
186:51 - we will exit out of this function so it
186:53 - will go outside and we will not proceed
186:56 - below
186:57 - to execute all of the code that we have
187:01 - so we will not proceed to execute the
187:03 - code basically we will exit out of the
187:06 - function
187:07 - in order to see this in action i'm going
187:09 - to go here in our player attack input
187:11 - right here
187:12 - and right below our public game object
187:14 - attack point we're going to create a
187:16 - private player shield which i'm going to
187:19 - call shield
187:20 - in the awake function we're going to say
187:22 - shield is equal to get component and we
187:25 - are going to say here player shield
187:28 - component
187:30 - and simply here when we defend you see
187:32 - when we defend we are going to say
187:34 - shield dot activate shield is true
187:38 - and when we release the j key we are
187:41 - going to say here shield activate shield
187:44 - is now equal to false
187:46 - which will go inside of this script
187:48 - right here it will call this function
187:50 - and passing here true or false it will
187:52 - assign that value to the health script
187:56 - shield activated
187:57 - which is this value right here again so
188:00 - it's this value right here shield
188:02 - activated
188:03 - and
188:04 - if that is true it will return and break
188:07 - outside of the function and we can test
188:09 - it out if i go back in unity let me just
188:12 - clear the console this works only if you
188:14 - press the j key and hold it you can it
188:17 - does not work if you press and release
188:19 - it if you just press it and release it
188:20 - it will not work so you need to press
188:22 - and hold it pay attention now if i go
188:25 - here
188:27 - so if the enemy attacks me now pay
188:28 - attention to my health it's going to
188:30 - subtract again it's going to subtract
188:33 - and now i'm going to hold the shield pay
188:34 - attention to the health value pay above
188:36 - pay above pay attention above you see
188:38 - the player health value is not
188:40 - is not decreasing
188:42 - while i'm holding if i release now he is
188:45 - going to subtract value if i press and
188:48 - don't hold you see if i press and don't
188:50 - hold it's not going to work so you need
188:52 - to press and
188:54 - hold so press and hold for this to work
188:57 - because
188:58 - this is what we're doing in our attack
189:00 - input if we press the key down then we
189:03 - will defend if we release the key up
189:05 - then we will
189:08 - well release the key and then we will
189:09 - not defend so you need to press and hold
189:12 - for this to work and release then for it
189:16 - to
189:17 - well not
189:18 - defend itself any more
189:22 - so this is for our defense the last
189:24 - thing that is left for us to do is
189:27 - create our sound effects so let's go
189:30 - back in unity and i'm going to right
189:33 - click on our warrior and create an empty
189:35 - game object this is going to be our
189:37 - player sound like this
189:40 - and here we're going to click on add
189:42 - component and filter for the audio
189:44 - source component and voila but i'm also
189:46 - going to uncheck this play unawake
189:49 - checkbox so don't check this because it
189:51 - will play a sound any clip that we
189:53 - attach here on awake we don't want that
189:56 - i'm also going to do the same thing for
189:57 - the enemy right click on the enemy
189:59 - and create an empty game object and
190:01 - we're going to call this one enemy sound
190:05 - and here attach the audio source uncheck
190:08 - play on awake
190:10 - and go here in our project and in
190:12 - scripts and right click and see sharp
190:16 - script i'm going to call this one
190:18 - character sound fx
190:21 - select the enemy sound and the player
190:24 - sound so select them both
190:26 - click on add component and attach the
190:30 - character
190:31 - so character
190:33 - sound effects voila and we do need to
190:37 - hit apply for the enemy and for the
190:39 - warriors so for both of them so that
190:41 - that change applies to the prefab but
190:43 - now open so select the player sound or
190:46 - character effect sound script open it
190:49 - and what we are going to do here is we
190:52 - are going to get a reference to the
190:54 - private audio source
190:56 - so here on top private audio source
190:59 - which i'm going to call sound fx
191:02 - and we're going to do that in the awake
191:04 - function so awake
191:06 - sound fx is equal to get component audio
191:09 - source component
191:12 - we are also going to have here private
191:15 - audio clips so audio clip attack
191:19 - so attack underscore sound underscore
191:22 - one attack underscore sound underscore
191:25 - two
191:26 - and di
191:27 - sound simple like that now they are
191:30 - private but we don't want to allow them
191:32 - to be used in other scripts but we are
191:34 - going to make them serialize field
191:35 - because we are going to drag and drop
191:37 - them
191:38 - and here we are simply going to create a
191:41 - public void
191:42 - attack function underscore one so attack
191:46 - one and we are going to play the attack
191:48 - one sound so we're simply going to say
191:50 - sound
191:51 - fx dot audio clip or simply clip is
191:54 - equal to
191:56 - attack sound one
191:58 - and simply call sound effects dot play
192:00 - to play that sound effect it's simple
192:02 - like this programming is beautiful if
192:05 - you want to change a clip that's
192:06 - attached to the audio source dot clip so
192:09 - you say sound effects or the audio
192:11 - source dot clip is equal to the clip you
192:13 - want to attach
192:15 - sound effects or the audio source that
192:17 - play to play that sound and i'm going to
192:19 - duplicate this function and this here is
192:22 - going to be attack 2 and we're going to
192:24 - attach the attack to sound
192:27 - and here we're going to have our die
192:29 - sound so public void die and we are
192:31 - going to attach here the die sound and
192:34 - play the die sound it's simple as that
192:40 - now this character sound we are going to
192:42 - have in our health script we are going
192:44 - to have it in our player attack so let
192:47 - me just go here player attack help and
192:50 - enemy controller
192:52 - now what we need to do is we need to
192:55 - declare here uh private in the health
192:58 - script that is so private and we're
193:00 - going to see here character sound
193:02 - effects
193:03 - and we can call it sound effects so i
193:06 - can call it sound come on
193:09 - sound effects like this
193:11 - and inside of the awake function so void
193:15 - awake
193:16 - we are going to say here sound fx is
193:20 - equal to get component in children like
193:23 - this and we're going to say character
193:26 - sound effects now why get component in
193:30 - children because if we go back here you
193:33 - will notice that this player sound is a
193:35 - child of the game object we cannot say
193:37 - get component we use get component on
193:39 - the game object itself so if we for
193:41 - example we have the warrior game object
193:43 - if we want to get the character
193:45 - controller then we will say get
193:46 - component because it's attached on him
193:50 - but if we want to use this script
193:52 - character sound which is attached on the
193:55 - warrior
193:56 - then we need or actually excuse me
193:58 - attached on the player sound that which
194:00 - is a child of the warrior then we need
194:02 - to use get component in children and pay
194:05 - attention this only works if you have
194:08 - if you have only one script attached so
194:11 - if we have a duplicate if we have two
194:12 - player sounds it will work but it will
194:14 - get you one of these it will not get you
194:16 - both it will get you one of these so
194:18 - when you have one like here player sound
194:21 - it only has this character sound effects
194:24 - then you can use get component in
194:26 - children and it will get you that one
194:28 - component and since we are here i'm
194:30 - gonna go quickly in sounds
194:33 - and here we have arena so these are
194:35 - arena sounds unit and these are attack
194:37 - sounds you can preview them you can
194:39 - click on it and preview it here
194:41 - this is attack one or tag zero here we
194:43 - have
194:44 - this one and this one
194:47 - i'm going to attach these two so select
194:49 - the enemy sound and play your
194:51 - i'm gonna attack attach
194:53 - man attack one
194:55 - and man attack two for the sound attack
194:58 - one and two and for the die sound let's
195:01 - see this one
195:03 - yeah this one can do
195:08 - yeah the second one i mean you can play
195:09 - with these and you can
195:11 - take any one that you want so for our
195:13 - player sound i'm going to attach that to
195:16 - and for our enemy sound i'm going to
195:18 - attach i don't know that nine i'm not
195:20 - gonna even check it out so i'm gonna hit
195:22 - here apply and apply for this one as
195:25 - well i'm not even going to check it as i
195:27 - said because well we don't care we have
195:30 - the attack sound we have the dead sound
195:32 - so it's not important how they sound
195:36 - so let's go back here we have the sound
195:38 - effects and we're going to get it here
195:40 - and when we die so this is where we die
195:43 - in our health
195:44 - and if health is less than or equal to
195:47 - zero we are going to call sound effects
195:49 - die and this will work both for the
195:52 - player and both for the enemy so when
195:55 - they die they will display the die sound
195:57 - and before we test it out i'm gonna go
195:59 - also here in our player attack so right
196:01 - here i'm going to create private
196:03 - character sound effects and this is
196:05 - going to be sound effects
196:08 - and simply here sound effects is going
196:10 - to be equal to get component in children
196:14 - character sound effects
196:17 - and i'm going to copy this line of code
196:19 - because we're going to use it in our
196:20 - enemy controller and when we attack so
196:22 - this is where we are attacking so here
196:24 - i'm going to call sound effects dot
196:27 - attack 1 sound
196:29 - and here i'm going to say sound effects
196:31 - dot attack
196:32 - two sound
196:34 - simple as that it's very simple so when
196:36 - we attack with the one attack sound
196:38 - attack one when we attack with the
196:40 - second attack attack two and we're going
196:42 - to do the same thing here for our enemy
196:44 - so if i go here in our enemy
196:47 - right here at the top
196:49 - private character sound effect
196:52 - sound fx
196:54 - right here in the awake below our player
196:56 - target sound effects is equal to get
196:58 - component in children and get that
197:00 - component
197:01 - and when we attack here so let's go in
197:03 - the attack here it is attack and m1 so
197:06 - we are simply going to say sound effects
197:09 - attack
197:10 - one
197:11 - copy this and paste it below and attack
197:14 - you this does not require any
197:15 - explanation because it's
197:16 - self-explanatory i've explained it right
197:18 - here so we are going to call the clip an
197:21 - attack and here simply set the clip to
197:24 - the clip that we want and play it set
197:26 - the clip to the clip that we want and
197:27 - play it and voila it's gonna do that for
197:30 - us and we are calling this when we
197:31 - attack so when we attack we will play
197:33 - attack one sound and attack two sound
197:35 - when we attack with the second attack
197:37 - this is what we are doing for the enemy
197:39 - and for the player as well
197:42 - now in order to spice this up we are
197:44 - basically done with our game so we are
197:47 - done and in order to spice this up what
197:48 - i'm gonna do is right click here and
197:50 - create an empty game object this is
197:52 - going to be our bg sound
197:55 - and i'm going to
197:57 - reset the position and attach two audio
197:59 - source components so audio source here
198:03 - and another audio source so two of them
198:05 - because i'm gonna go here inside of the
198:07 - sounds and arena and we have these arena
198:10 - sounds so you see
198:12 - and this one also
198:14 - [Applause]
198:16 - so pay attention
198:20 - what i'm gonna do is select the bg sound
198:23 - and for the first one attach the arena
198:25 - one sound and for the second one arena
198:28 - underscore two sound and pay attention
198:30 - here play unawake if you don't check it
198:32 - so if it's not checked if i run the game
198:35 - we will not hear these sounds so if i
198:37 - run the game the sounds we don't hear
198:39 - them
198:39 - so make sure that you check these check
198:42 - boxes so i'm gonna check play on awake
198:44 - let me just find it play on awake and
198:45 - loop
198:46 - loop means when the sound effect
198:48 - finishes to play same like on your
198:52 - it's same like in your mp3
198:55 - app so when you click loop it will
198:57 - repeat the song so check here play on
199:00 - awake and loop and notice here it's
199:02 - warning us that we have two audio
199:04 - listeners in our game now the reason for
199:06 - this is because we have one main camera
199:09 - that has an audio listener and we also
199:11 - have another camera that's attached on
199:13 - the player that has a listener so you
199:15 - see here camera here and camera here
199:17 - so i'm gonna take the main camera this
199:19 - one that's not active and remove the
199:21 - audio listener from it because this is
199:23 - the audio listener that will be
199:25 - getting that sound and
199:27 - make us hear the sound effect
199:30 - now also one thing that you have in this
199:32 - audio source is the volume so pay
199:34 - attention here have the volume one it's
199:36 - 100 so i'm gonna lower it
199:39 - for arena one i'm going to say 0.4 for
199:42 - example and for arena 2 i'm going to say
199:45 - i don't know point
199:46 - 25 maybe
199:48 - because i don't want that sound to be
199:50 - heard like we heard it a moment ago it's
199:53 - too loud for our game and practically
199:56 - congratulations this is our game we are
199:59 - finished we can test it out to hear the
200:01 - sound effects
200:02 - so i'm gonna shut up
200:06 - so you see here and let me just check
200:08 - here again we have two listeners
200:10 - so let me just find where they are
200:12 - so we have ui where are these two
200:15 - listeners so we have the main camera we
200:17 - have here
200:18 - camera in player audio listener
200:21 - and event system
200:23 - i don't know where the second listener
200:25 - is it will not hurt our game if you find
200:27 - and just remove it let me just remove it
200:28 - from here so select the camera in player
200:32 - and
200:32 - remove it so let's see if we can hear it
200:34 - now
200:38 - i literally don't know where the second
200:39 - audio listener is but if you find it
200:41 - just remove it i don't care it's not
200:43 - important it will not hurt our game and
200:45 - we can play our game so hear the sound
200:47 - effects
200:48 - and also
200:50 - pay attention to the player's sound
200:52 - death and also for the enemy and their
200:54 - attack sound so pay attention now
201:02 - here
201:04 - i don't think it's i don't think we can
201:06 - hear it because of these sounds so bg
201:07 - sound i don't know this one is going to
201:09 - be at 0.2
201:10 - and this one is going to be at 0.1 so
201:13 - like this so the volume for this one
201:16 - actually i set the pitch here so pitch
201:18 - is at one volume needs to be at point
201:21 - four excuse me for this one and for this
201:22 - one
201:23 - 0.25
201:25 - so it can work now i forgot i said the
201:28 - pitch not the volume so yeah set the
201:30 - volume to 0.4 and 0.25 for the second
201:34 - one so that we can hear it so pay
201:35 - attention now
201:39 - yeah now we can hear it a little bit
201:41 - something like this
201:43 - yeah
201:45 - 0.1
201:46 - or 0.2 for the volume here and for this
201:49 - one is going to be 0.1 finally i decided
201:52 - which volume i want so hit the play
201:54 - button let's test it out finally
201:57 - so you hear it listen to the attack
201:59 - sounds
202:02 - again
202:04 - and again
202:08 - so now when i hit him he will die
202:12 - and you heard
202:13 - the
202:14 - die
202:15 - sound effect
202:17 - and we can also test for the player to
202:19 - see if the player can die so i'm gonna
202:20 - set the health value to five and we will
202:23 - die instantly just so that we can test
202:25 - that the die works for the player as
202:28 - well so pay attention now
202:30 - voila
202:32 - so the die
202:33 - also works for the player he is dead the
202:35 - enemy will be standing still because he
202:39 - well we talked about it we deactivated
202:41 - scripts so on and so forth
202:44 - now congratulations this is a big
202:46 - project even though
202:48 - it's not that big when you look at it
202:49 - visually we don't have 20 players
202:51 - fighting with each other but we learned
202:53 - combat we learned melee battle system we
202:56 - learn how to
202:57 - deal damage how to subtract health and
202:59 - all of the good stuff that you don't see
203:01 - in any other tutorial online basically
203:03 - you cannot find this anywhere else on
203:04 - youtube so yeah thank you awesome dudes
203:08 - and you're welcome anyways if you want
203:10 - more awesome tutorials go on
203:12 - awesometubes.com subscribe there more
203:15 - actually awesomeness.com go on youtube
203:17 - awesometubes and subscribe on my channel
203:20 - and you will have more cool tutorials
203:22 - like these
203:24 - until then fa here here and by the way
203:26 - you can download this complete project
203:28 - so this complete project and all the
203:30 - assets link is in the description below
203:33 - until next time fi here here from
203:34 - awesometubes.com i will see you guys in
203:36 - another video

Cleaned transcript:

what is up guys fah here here from awesometubes.com whoa haven't said that in a while anyways before we start creating anything i am going to preview the game that we're gonna create so i'm gonna hit the play button and you will see now that we have our warriors that they will fight each other don't mind the buttocks that you can see from the character so you see the enemies chasing us and trying to attack us actually he hit me pay attention to the health bars at the top left and top right corner and by the way i can hold the shield like this when i hold the shield he is not able to attack and now when i lower the shield he will be able to attack you can hear the public behind in the background let me just up the volume a little bit so you can hear them cheering they like when blood is spit anyways i'm going to attack the enemy and as you can see i am dealing more damage because hey i don't want to lose in the game that i'm creating i don't want to embarrass myself and when his health gets to zero basically i have to hit him two more times so one more time back you see now he is dead and voila i have one and the enemy's health is zero as you can see at the top right corner basically this is the game that we're going to create we have melee battle system something we did not do before we have enemy ai that enemy can detect where the player is and it will chase that player also when the player goes away a little from the enemy the enemy starts chasing the player again so let's start creating this i mean a new project let me close this one because i don't want it to be open let me close it like this so right click here and finally it's closed anyways this is our project here we have our sample thing this is a new 3d project by the way so you're simply going to go and create a new 3d project name it however you want to name it i named this one warrior fight game this sample scene i am going to change the gameplay just so i like to name things correctly and we are going to import the assets by the way the assets and the complete project are available for you to download link is in the description below so select all of these assets model sounds textures and ui and simply drag and drop them right here inside of unity of course it will take a moment or two for unity to load all of this you know the procedure it takes some time to import the 3d assets and uh yeah while we wait i can sing to you or we can stop the video let's actually try the singing i'm just kidding i'm gonna stop the video and come back when everything is finished finally unity took mercy upon us and it has imported all the assets and we can start building our game the first thing that i want to do is create the terrain or the ground where we are going to stand and for that i'm simply going to right click here in the hierarchy panel and go under 3d object and create a simple cube voila this is our terrain now of course not this cube we aren't going to stand on a cube actually we are but i'm going to resize it and i'm going to call it ground for the scale x i'm going to say 100 for scale y 0.1 because i want to make it you know thin like this i don't want to make it you know lar i don't know what's opposite of tin don't judge me anyways i'm going to say here z 100 as well voila this is what we have this is going to be our terrain now of course it is not pretty at all i don't want this whiteness tearing my eyes apart so if you pay attention here inside of the folders or the acids that we have imported we have textures inside of textures we only have this grass texture if i open it this is the grass texture basically this somebody took a shot in his backyard anyways what we're gonna do here is we are inside of the textures i'm going to right click and create a new material so here it is right click and create so again it's right click and go under create and material this is what we want and i'm going to call this one ground material and we are going to apply it on the ground so now i can drag and drop this on the ground and this is how you make game objects look cool basically because pay attention to our ground it's white if i put this material on it it's still white though but what i can do for example is i can change the color to now red or dark or silver or whatever but i can also drag and drop this grass inside of this albedo or albedo and you don't have my highlight tool here it is so if i take here as you can see i have the grass and if i drag and drop it right here it will display that grass voila on our ground voila this is how you make things look good in unity and in 3d but there is more to these materials and shaders now this is the first time i mentioned shaders so what are shaders basically a shader determines how that material or the texture that is applied to that material looks like so if i take here pay attention i have the standard shader this is on the drop down list right here so here it is i'm highlighting that with my highlight tool so when you click on that it's a dropdown list and you can play with all the different shaders you have built in of course there are others that you can import from the asset store but these are built in what i like to use is this one unlit texture and you see it's already a little bit different it's a little bit darker so the grass looks a little bit darker in comparison to what it looked like a moment ago and i encourage you to experiment with these shaders so that you can see their effects not every shader will make your material look good maybe some will look bad others will look better but you can find that out if you experiment so for example if i go here i don't know nature and say speed tree maybe this will not make it look good well basically it's a little lighter and some shaders also have other fields here where you can add a texture you can have a normal texture now i'm not going to go into that that's a different topic and i don't know too much about it but basically when you combine these textures like a normal map another texture some other textures that come along with it you make your material look or the game object that has that material look good anyways what you need to do is simply experiment with these just experiment try them out and see different effects that you will get and that's how you learn the best now moving forward we have our ground and again the scale x is 100 and z is 100 y is 0.1 why well because potential if i set the y for example at 100 i don't want this what the hell is this you see we don't want this we only want our ground so we want to make it look like a ground that's why i put the scale so that it's not too large on the yaxis so moving forward if i go back in assets and models we have the arena here inside of the models folder so in the models folder we have the arena if i click here this is our arena if i drag and drop it here it is this is the arena now of course it's too small so we need to resize it make sure it is positioned at 0 0 0 for x y and z and i am going to call it battle arena so this is the name of the game object and the scale for x y and z is going to be 25 so 25 25 25 and voila this is our arena it already has materials applied on it if you click on the drop down list you will see all of these different game objects that are put together to make this arena if i you know deactivate some of them so if i let's try to activate these you see the effect if i deactivate them well they are gone so that is another thing that you can experiment but basically these are just 3d models put together so put together to create this battle arena you can see here we have some people's spectating or whatever yeah this weeder look at that weirdo yeah these two yeah that probably up to something anyways i don't know what i'm saying but this is our battle arena now moving forward we are going to import our character and here he is our warrior now one thing to note is this is a headless warriors if i drag and drop him here and if i go to him voila this is a headless warrior like a headless swordsman but of course we are going to make him with head so i don't know how you say head what's opposite of headless head head on us i don't know anyways this is our game object so what i'm gonna do is first of all i'm going to take and rename it so from body underscore 0 i'm going to rename it to warrior next we need to apply this head on him so if you pay attention to the head now it's too big we are not gonna we're not gonna do this to him pay attention to the head look at that we're not gonna do this to him we are going to resize the head a little so i'm going to resize it let's say here head is going 111 actually no so the head is going to be 1.5 1.5 and 1.5 yeah exactly so 1.5 for the head this is totally fine and we need to select the warrior click on this drop down list to go through all of the elements that make him or to his body parts so click on the warrior then this bip001 click on that dropdown list and again you have vip001 pelvis click on that one and let me just resize this here then we are going to go under spine then spine1 then spine two man this model is killing me then we have the neck and right here we have the head so what you can also do is in the search bar if i take the highlight tool here you have the search bar in the hierarchy panel you can also select the search bar and you can type here for example head and it will find it for you it's this one right here bip001 head so this is the part of the body that we need so now we're gonna drag and drop the head right here normally we don't have to do this because other models come with the head but this model is like this so what i'm gonna do is i am going to resize it or actually reposition it so i'm going to say zero point this is going to be for the x for the y it's going to be 0.012 and for the z it's going to be negative zero point let's say here i don't gonna leave it just at zero just as y'all leave the z at zero and i think his head is all it's also still too big so yeah this is okay and let's take here and resize the head a little bit so the scale is going to be 0.47 for x y and z i think now it's okay so when you select the head set the scale to 0.47 that is 0.47 for x y and z the position x x is going to be negative 0.0274 and y is going to be 0.012 and yeah this is where our head is going to be exactly and it looks good it looks good actually it looks like it's already built on him anyways as i said we are not going to do this that often because most models come with the head but this one is like this and what we can do or yeah anyways select the warrior now and what i'm gonna do is i'm going to click on this add component here and we are going to filter for character controller this is a builtin controller that comes with unity so if i select it here again it's under add component and filter here character controller as i said this is a builtin controller and i don't know if you can see the green things around him so yeah i've turned off the ground in the battle arena so we can see this capsule thing around him basically this character controller comes with a collider and also comes with a rigid body in it so we don't have to apply these things this green thing that you can see is a collider that's around our player so what we can do is we can reposition it so i'm going to put it on y 0.96 and for the x i'm going to leave it z i'm going to leave it a radius however is going to be 0.25 and voila you see the radius it will resize that collider now it can be a little lower i don't know for example 0.21 yeah and you can see now it is around our player well around the middle of him and this is as i said the character controller that we are going to use in order to make him move and by the way let me just put him like this so if i put him like this and if i hit the play button actually where is my camera he is standing still now even though we have a rigid body we have a velocity in our character controller we still need to apply gravity on him so we need to apply gravity and in order to apply gravity basically we do that vi script so it's time to get our hands dirty let's go back in the assets and right click here and create a new folder which i'm going to call scripts inside of the scripts folder we are going to right click and create our player move script and by the way before we continue what i'm going to do is go back here in assets and right click and create a folder this one is going to be our prefabs and click here in the prefabs and drag and drop the warrior so bam this is our warrior prefab now so we don't have to worry about deleting this game object from the scene and doing all of this from beginning so if we go back in the script we have the player move script drag and drop it on the warrior and now hit apply here so that that change applies to the prefab now one thing i want to get out right now i like when i go and spontaneously have things that i need to explain why we need to hit apply to make that change apply to the prefab and you if you're watching my tutorials you've probably heard me saying that like a thousand times well this prefab right here is basically now the original game object of this warrior that we have in the hierarchy so let me just take it so this warrior here in the prefabs folder is the original one this one right here is a copy of it any change we apply to this copy for example if i go here and if i attach an audio source component pay attention here i have attached an audio source component on the copy in the hierarchy the original one the warrior here in the prefabs folder he does not have that audio source applied on him because we attached that one on the copy if you want to have the original have this audio source because you attached it you will need to click on this apply and this apply applies that to the original prefab which is right here here it is the original prefab in the prefabs folder so if i select that warrior prefab in the prefabs folder it has the audio source component attached on him now but pay attention now if i go here to warrior and remove and this is the warrior in the hierarchy the copy if i now remove the audio source component the original still has the source component the audio because we did not hit apply but pay attention to the difference now if however i select the warrior inside of the prefabs folder the original one and if i go here for example and filter for a rigid body component and if i apply that rigid body component on the original what do you think for the copy it will have the rigid body applied because we applied it on the original and the copy will simply follow because it's a copy of the original but if we apply to the copy then we need to click apply to make that change applied to that prefab the original one as well so if i remove now from the warrior prefab the original one we also don't have it on the copy prefab so i hope this clears things out if not ask what is not clear in the comments below so let me go here actually this is from the previous one the one that i have previewed it so moving forward this is the new one that we are going to code from scratch let me just click here and hold enter to give a little bit space so what do we need for our player move first of all we need our private character controller and i'm going to call it char controller like this not character but char like this short for character we will also need an animator but we will do that later on we also need here public float movement speed which is by default three and pay attention i set it to be public which means it is editable in the inspector panel and what do i mean by this when i say it is editable in the expect inspector panel that means a public variable is visible here in the inspector pay attention here now you see we have it right here let me click on the highlight tool and here it is so we have it it's right here which means we can manipulate this value if i set here value five now we have the value five and not three so if i put it back at three it is three basically the value that we put here in the inspector panel will override the value that is here so we have the movement speed we also have a public float gravity this is what i was talking about which is 9.8 this is the gravity in real life as well we also have a public float rotation so rotation speed which is going to be equal to 0.15 f we also have a public float a rotate degrees per second which is going to be equal to 180 degrees per second so these are the variables that we need to get started and the first thing that i'm going to do is inside of the awake function of course we have the start but i'm going to change it to awake if you are also following my tutorials you know that i like to initialize things in the awake function because the order of execution goes like this when we run our game this is the first function that is called the second function that is called is on enable this one right here and this is the second function and the third function is start so start is the third function but by default when we create a project we have start and update of course we can use start for initialization and in some cases it is better to use start over awake for example and i know somebody will ask when is that case well if you are initializing something in the awake function and you need to get a reference for that then initialize it in the awake but get a reference in the start function this goes for example if you select a player in the main menu will you initialize the player in the gameplay scene in awake but you need to follow it with the camera then in the camera use the code that will find the player in the start function we will have examples for this and some other tutorials so don't worry about that anyways i'm going to say here char controller is equal to get component character controller and voila we are basically done with our character controller what is the next thing to do is go here and create void move and this is a function that we're going to use to move which we're going to call in the update and here we're going to have move so what are we going to do here first of all we are going to test if input get axis and here we are going to say vertical like this is greater than 0 which means if we have either press the up arrow key or the w key on our keyboard because if i take here quickly the highlight tool and this is the coordinate system so here we have y here we have x and here we have z because this is a 3d game and basically up on the y is plus down is minus on the x axis to the right is plus which means the positive side and on the left is negative and for the z forward is the positive and backwards is the negative and basically here this we are testing if we are touching the vertical axis which is the yaxis that's the vertical axis but we're going to use this to move our character forward and right here below we're going to say else if input dot get axis and here we're going to say vertical if that is less than zero then that means we're going downwards and to paint a clear picture i'm going to use here print and i'm going to say the value is and i'm going to say here plus and we're going to use this input and vertical so that you can see the output actually of this what this value will be so if i go back here in unity and let me go into the console and clear it so if i hit the play button pay attention now as long as i'm not pressing anything it will be zero but when i start pressing so i started pressing actually did not so now i'm gonna start pressing and i'm pressing the up arrow key and this is what we have let me just go here because it happened so fast it's in the update function it updates every frame in a second so pay attention here this is where i started to press and notice the value is 0.04 then 0.096 then 0.14 then 2 1 then 3 1 up to 1. so it goes from 0 up to 1 in these increments that we just saw so 0.1 then 0.15 then 0.2 sun and so forth you get my point and for the negative if you press down that is the s key or the down arrow key you will get from zero to negative one and you saw the increments it goes slowly from zero up to one if you want to go directly from zero to one then you will use get axis raw get axis raw has the same exact effect it will detect when you click or actually when you press the up arrow key or the w key or when you press the s key or the down down arrow key but when you press the up key and w it will return from zero to one but it will go directly from zero to one it will not go in these increments that we just saw you can print this and see for yourself now one other thing that i don't like about this code is this right here not the word vertical but instead me hard coding values this is something i don't like to do so if we go here in unity and go back in the project tab inside of the scripts folder i'm going to right click and create a new script that i'm going to call tags so tags and here i'm going to double click it we're not going to attach it on any game object and i am going to remove this public class declaration so what are we going to do why why this why did this go right here so what are we going to do with in our class well first of all i'm going to create here a public class called axes and here we're going to have a public constant string and i'm going to call this one vertical so vertical axis which is going to be equal to vertical like this and we're also going to have a public constant string and this one is going to be horizontal so horizontal axis which is going to be equal to horizontal as you can assume because we're going to have vertical and horizontal now don't mind these red errors that i have this because my computer was open for such many time or for so long so i have to close visual studio and reopen it again to make this actually work so now when it's open bam here it is so now everything is working like a charm as i said i don't like hard coding values like here because if we use this on two places or even more it can happen that i misspelled something because if i type vertical with lowercase v it's not going to work even though the word is the same so capitalization needs to be the same and when we use it like this when you when we declare it in a single place we can simply do this we instead of typing it like this we simply say here axis dot vertical axis and bam this is it and here we do the same thing axis that vertical axis and back it's the same exact thing except here we have it in one place and notice here this constant constant will not change same like in math now you don't have to be imaginious to know that but basically if i do something like this if i say axis that vertical axis is equal to me changing it it is not going to work because it's a constant anyways moving forward now we are detecting if we touch or if we press the up arrow key or the w key and here if we press the down arrow key and the s key so if we press the up arrow key we want to move forward and in order to do that we're going to see here vector 3 move direction is going to be equal to transform forward what the hell is this transform forward well if i hover over it says the blue axis of the transform in the world space in order to paint a clear picture if i take my warrior here inside of the scene and i zoom him on him do you see this blue axis this blue arrow that i'm taking and dragging him this is that axis indicating the forward so no matter where he is because we can rotate him if i do something like this and i rotate him you see now forward is this way not the way where it was so basically it was this way forward but when we rotate him you saw what i mean and this right here that transform forward is telling us the move direction is to move forward so now we're simply going to say move direction dot y minus equals gravity multiplied with time dot delta time in order to apply gravity this is what i was talking about in the beginning so when we attached actually the character controller i said that we need to manually apply gravity to our character and this is how we do it this is how we apply gravity by subtracting from y gravity multiplied with time dot delta time why time that delta time well because we are calling the move function in the update and if you want to smooth out things because update is called every frame or actually once per frame if we have 60 frames in a second that's 60 times in a single second this function will be called which means this one will be called as well because we are calling it in the update now if we subtract from y gravity only which is 9.8 that's a very very it's going to happen very fast it's a huge number and we are subtracting that every frame 60 times in a second that's why we need to multiply it with time that delta time and time dot delta time is the difference between each frame so how many time it took to go from last frame to the next one that is the delta time and it's a very low value and this why on that that is the reason why we use it to smooth things out so moving forward we have here applying our gravity the next thing to do is simply call our character controller and move in order to move our game object so we pass here the move direction this is where we want to move multiplied with the movement speed multiplied with the time dot delta time to smooth things out again smoothing things out with time dot delta time same reason as what i explained right here and this is we're moving in this direction but we are multiplying that with the speed movement in order to speed up the movement now what i'm going to do is here for our negative or actually when it's lower than zero that means we need to go backwards so i'm simply going to copy these lines of code and paste them right here and since we don't have transform backwards we have forward but we don't have backward i'm simply going to use the negative so i'm going to say minus transform forward which is simply the negative up forward what is what is negative forward it's backwards think of it as opposites so this is going to have the same effect except backwards and here we are using move direction which is now backwards multiplying that with the movement speed multiply that with the time dot delta time and we can test it out so if i go here and one thing another tip from me take notes when i say these tips if you want for example if this is where you want your camera to look for example in your scene or when you run the game instead of using the camera and positioning it i know i don't know it's 10 20 30 position for example and this is where that position is or dragging it and dropping it simply what you're gonna do is position here the view how you want it or where you want the camera to look in the scene select the main camera in the hierarchy and on mac hold shift and command on windows it's control command and press f so when you press f so now pay attention where the camera is exactly same place where we are looking in our scene now that we have that done i can hit the play button and i can test this out so we have the player in voila i'm pressing the w key now i'm pressing the arrow key up arrow key and w is moving forward i'm pressing the back arrow key and now i'm pressing the s key he is moving backwards so a lot this works the next thing on our agenda is to rotate our game object or the player so let me just go here and this one is for the move and here void rotate and this one is for the rotate which we are going to call right here in the move so we're going to say a rotate like this because move is called in the update and we can safely call rotate below it or you can simply take the rotate outside and you can call it here it does not matter it's the exact same effect so in the rotate we are going to say here vector 3 which is the rotation underscore direction by default i'm going to say it's equal to vector 3 0. this is the default one because vector 3 0 is a shorthand for writing vector 3 0 0 0 for x y and z because we're going to detect input again we're going to say if input dot get axis and we're going to see here x is horizontal axis if that value is greater or actually if it's lower than zero and here we're going to say else if input dot get axis and again here x is that horizontal now here we're gonna test if it's greater than zero and we're gonna do the following so if it's lower than zero that means we are pressing the a key again this is the coordinate system this is the horizontal axis meaning the xaxis going to the right side is the positive going to the left side is the negative so if we press the a key or the left arrow key we're going to the left side which is negative which means this right here will be lower than zero if that is the case we're simply gonna say here rotation direction is gonna be equal to transform that transform point or actually transform direction and here we're gonna say vector three dot left now i'm simply going to copy this and paste it here and you can assume that here it's going to be vector3 dot right and by the way this one is going to be separate so we're not going to do if else or else if and why why did he give me this axis here anyway here i'm going to say if input get axis we are not going to use if else simply we're going to do if and if because we can press these buttons simultaneously so if we press the a key or the d key they will cancel each other out anyways moving forward what is this transform direction well if i hover over it's gonna say transforms the direction from local space to world space what is that what is local space what is world space let's go back in unity to explain the local space if i take the warrior and of course i'm gonna go in the scene first and zoom in on the warrior this is my warrior game object if i right click on him and create an empty game object that i am going to tag here with this orange or yellow tag you see this game object right now inside of our so he's basically inside of our game object our hero if i move him here and now he is in front of him if i take the x set it at zero take the y set it at zero take the z set it at zero now he is back at the center and his center is around his warrior player that he's his local axis that is the local axis his own origin so his own origin of that game object and with origin i mean where that game object goes when we set 0 0 0 for x y and z or when we reset the position on the transform where does he go that is his origin or his local axes local position that is if i go here you see transform direction from local space to world space but what is the world space well world space is all of this here you see everything that we see here so where our cube is are actually our ground where our battle arena is where our player is that is unity's world space and this is where we are moving when we move this character we are moving him in the unity's world space that's where everything happens so we are transforming the direction here which is vector 3 left and if you go here a shorthand for writing negative 1 for x 0 0 for y and z and the right is positive 1 for x 0 for x for y and z basically we are transforming this into the world space and this will transform it into the left side of our game object inside of world space and it will do the same thing here for the right direction so now that we have the input for the left and the right direction we have here the rotation direction right here we are going to say if input dot or actually now we need to rotate our game object so we're going to say if a rotation direction is not equal to vector3.0 so if it's not equal to zero that means that we have here input and that's the reason why i'm setting it here to be equal to zero because we are resetting it every time if we don't reset it res at it reset it here then the value that we get here will stay the same and here it will stay the same every single time so we need to basically reset it here to zero so vector three zero but if it's not equal to vector three zero that means we got input here so what we're gonna do is simply we're gonna say transform a rotation e is equal to quaternion dot rotate towards and this will rotate from rotation that is from the transform rotation to rotation it's going to be quaternion look rotation it's going to be a rotation direction in the given speed and or actually degrees and the degrees is going to going to be a rotate degrees per second multiplied with time dot delta time what the hell is going on here teacher what are you doing you are driving me crazy and okay let me just calm down calm down i'm gonna not drive drive you crazy anymore anyways you see here transform rotation is gonna be equal to this rotate towards you see here rotates a rotation from towards two this is from so it will rotate from this rotation to this rotation in basically these or this degrees but this is clear it will rotate from the current rotation it has towards this rotation right here now look rotation basically creates a rotation with a specified forward and upward direction basically this will do the following since we are rotating around the yaxis this is the yaxis and it will create a rotation around the yaxis and the forward will be placed on the yaxis basically if the y rotates over here so now y is here then the forward will be here you get my point now the reason for that is because let me take our warrior you see here pay attention pay attention to the blue axis so this one right here if i rotate him you see you see how the blue axis rotates along with him basically this is what we are doing with look rotation it will look at the rotation from the yaxis it will basically rotate it from the yaxis which is what we want we want to rotate on the yaxis and this is the degrees by which we are rotating the game object so rotation degrees per second that we added here 180 multiply that with the delta time to smooth it out if we don't smooth it out every frame we will rotate exactly 180 degrees and that will be fast really fast so if you want to test it out you can do it by simply doing this right here basically let me just do it just to test out and show you the effects of the smooth time so if i go here and if i run the game so pay attention now if i rotate you see this is what happens when you rotate like this you see this is what happens because we are rotating so fast this is 180 degrees per second if we don't multiply it with the delta time to smooth it out then you saw the effect exact same thing will happen for this year if you don't multiply without the time exact same thing will happen here if you don't multiply that with time dot delta time but if i hit the play button now that we are multiplying that with delta time pay attention now i'm gonna press right right actually so right you see how he's rotating now smoothly and left and he's rotating also smoothly so now we can move and rotate so now our game object can move and rotate at the same time you see moving and rotating and voila so i'm pressing left and i'm pressing right and he's rotating towards the direction where i am pressing voila this is how we move a character and how we rotate a character so the next thing to do is to make the camera follow the player of course we also need to animate him but using the camera to follow him will be much easier because there is less code involved so i'm going to right click here and go on create and see sharp script and i'm going to call this one camera follow and i'm going to show you two ways how can we make the camera follow the player because this is programming there is always more than one way to solve a problem so select the main camera and drag and drop the camera follow script on the main camera so drag and drop the camera follow script on the main camera i'm simply going to double click it and open it here in visual studio and let me just tag the class and we don't need here that many lines of code basically we need the following so we need a private transform which i'm going to call target and this is going to be our player we will get to it in a moment we also need a private vector3 offset now it's a private variable because i don't want it to be accessible in other classes but i also want it to be visible here in the inspector panel because i want to edit it so in order to do that we simply open square bracket and type serialize serialize field and voila so open square bracket close square bracket in between type serialize field because now if i go back in unity that private variable will be visible here in the inspector panel bam and here it is right here and you can simply remove what did i do so let's go back here and you can simply let me just hide this so you can simply remove this line of code to test it out to see for yourself if you remove it it will not be visible in the inspector panel anymore so moving forward from the awake function not the start i'm gonna get the target so i'm gonna say target is gonna be equal to game object find the game object with the tag player tag dot transform because we're getting the transform property again two things two issues we have here first of all this right here is a no no i don't like it so we need to go back here in our tags and we're gonna create a public class called tags and we're simply going to have a public constant string player underscore tag which is going to be equal to player this is the first thing and the first issue same as with our axes and i explained that why so if i go back here remove this and we're gonna say tags dot player tag it's the same exact effect now in order for this to work you need to make sure that your player the warrior when you select him and right here you have the tag property in the inspector panel you see where i'm pointing with the mouse you can click on it so let me just hide here and you can click on it and you need to select the player tag by default i think it's from unity 5 version and upwards you have here a tag player if by any chance you don't have it you're gonna click here on add tag so click on add tag and now here we see tag and list is empty click on this plus button so this small plus button right here that i just pointed to so when you click on it it will open this short window you would you will type here your tag click save and then that tag will be available to you so uh now that you created a tag you're simply gonna select the game object go here and tag it so click on the tag you want to tag it and pay attention please please this is a tip so note it down if the name here is player with p capital case p it needs to be the same exact name right here if you type here lowercase p it will not work even though it's the exact same word so capitalization also needs to be in order this is really important so now we have a reference to our player we have the offset here inside of our or actually below the update we're gonna create void follow player and we are going to call this function inside of the late update function so no update but late update function and what the hell is a late update well let me first explain we have the update function and we have the fixed update function update function is called every frame in a second basically if we have 60 frames in a second then it will be called 60 times update function is good for moving a game object using the transform property or the character controller as we are already doing and also for getting input which we are also doing here so we're getting input we do that in the update function fixed update function is not called every frame but it's called in a fixed number frame intervals what does that mean it's basically called every third or fourth frame and this right here is dependent or that is dependent on if we go under edit and go here under project settings and then time if you take a look here let me just clear it with the pencil you see here this fixed time step is set to 0.02 it's dependent on that time basically fixed update function will be called every 0.02 of a second and it's good for physics calculations so if you want to move your game object using the rigid body you will do it in the fixed update but what the heck now is the late update well late update is same as update it will be called every frame but it will be called after the update finishes so if we have something like this for example i don't know int a b and c and we want to say here c is equal to a plus b this calculation will be already done and we can use the value of c in the late update and it will be this value here calculating a plus b and it will give us the value c and we will be able to use that in the late update late update is really good for using code or typing out code that will be for for example like this in order to follow the player because we are moving the player as you can see here in the update so in the update we will calculate his position and he will arrive at that position so now in the late update we already know where the player's position is and we can follow him smoothly now in order to follow the player smoothly what we simply need to do is we need to say transform that position our own position of the camera is equal to target player so the target which is the player transform as you can see right here and we're going to use the player transform to transform direction or actually transform the point and we're going to transform the point off set so offset and basically let me just go here i'm going to name it offset position not to be confused with that wrapper offset it's offset position what is transform point you see here transforms position from local space to world space again basically same thing as what we did with transform direction it will transform this point from the local point of the target but pay attention here pay attention please we're using here target which is the player's transform as you can see here so it's the player's transform it will transform that point from the position of the player so from the position of the player it will transform that point and it will transform it from his local position to the world position and if we test it out right now the beauty here is that our main camera now has these visible inspector variables for the offset x y and z and what we can do when i hit the play button you will see now where the camera is it's basically here but what i can do is i can move here the yaxis i can move the zaxis you see now and i can set it where exactly i want it to be in order to follow our player and i can set here zero for our yaxis and basically what i'm going to do is i'm going to set this at 30. so 30 for the camera for the rotation and 0 for the rotation y but if i hit the play button now you will see that it will transform now that position and what i can do is this so voila you see now this is how i can make the camera follow the player now of course here for these values i'm going to say 2.25 for the y and for the z negative 1.9 or actually it can be a little closer something like this maybe negative one this depends on you but now pay attention now that we saved or actually we did not save these values because we are in the play mode what i'm gonna do is click on this gear icon you see the gear icon on the camera so click on the gear icon and it will open this list here and you're gonna click on copy component so when you copy the component now and if i go back here you will see that the values are back to zero because we edit edited those values inside of the gameplay mode which means they will not be saved in order to save it we did that gear icon copy values so now that we have them copied we're gonna see here paste component values bam and voila so now we have the values here negative one for z 2.25 for y and if we test this out right now if i hit the play button you will think that the camera is going to follow the player which actually is the case but if i rotate you'll see what is happening this is not the effect that we want to achieve now we got carried away we programmed the position of our camera but we did not take the rotation into consideration and i like to do things like this i like to show what is the problem and i like to show what is the solution to the problem because we are rotating our character we saw that so we are rotating the character right here as you can see and let me just move this backwards so we are rotating the character but we also need to rotate the camera so here i need to say transform that rotation is going to be equal to target dot rotation simple like that because our transform rotation is the rotation of the camera so transform referring to this class or that game object that's holding this class so transform and rotation is going to be equal to the target rotation and target that rotation is the player's rotation so the rotation of the player game object and now if we go back in unity and if i hit the play button you will see that when we rotate our player we will also rotate you see rotating the player rotating the camera and we can move the zaxis let's say negative two yeah negative two for the zaxis remember that or actually just close the game select the main camera and set negative two for the zaxis so negative two if i hit the play button again now we move forward we rotate the camera rotates along with the player so this is how we do it we also set the position and the rotation if we also want to follow the rotation of the game object now is there another way to make the camera follow the player a more simple way of course it is because this is programming this is creating an application and there are multiple ways always to solve a certain problem this one is much simpler and for that i'm simply going to duplicate the main camera and i'm going to set this main camera turn off the first one the main one and this one i'm going to rename to camera in player so i'm going to rename it to camera and player and i'm also going to remove the camera follow script because we don't need it so remove component so remove the component camera follow script and what i'm gonna do is simply drag and drop this camera on the warrior game object and it will make it a child of the game object so basically now wherever we move if i hit the play button because the parent is moving you see now the child is moving as well and the best thing here is you can position the child wherever you want so we can say the x position for the camera is going to be 0 the y position 2.7 and the z position can be negative let's say 1.8 so negative 1.8 will be the z position and rotation we can leave 30 for x only and basically this is how it looks like so you can rotate it like this however you want it but i'm gonna set it at 30. again you can experiment with this this is totally up to you the more you try the more you will learn i encourage you to try all the time so experiment with it now that we have this camera as a child of our player game object i'm simply going to hit play and when wherever the player goes and however he rotates the camera simply follows without a script because what the parent game object does the child will follow and the warrior here is the parent the top most parent all game objects when you click on the drop down list on the warrior all these game objects are children of the warrior game object and if we click here on the drop down list for this vip00 these footsteps are children or a child game object of this vip001 so on and so forth you get my point but they all are the child of the topmost parent which is the warrior now we need to hit apply because we attach this camera in the player but again this is another solution depending on your situation so sometimes you also want to have the camera inside as a child and it will follow the player wherever he goes and it's more simple basically we did two ways one was using a script and another one is simply making the camera game object as a child and it will follow the parent wherever the parent goes the next thing to do is to create the animations and we're gonna go here in the models and here we have the animation so right here i am going to right click here where all these animations are so right click and i'm gonna create and i'm going to create an animator controller so click here and i'm going to call it warrior controller like this because if i select the game object which is our warrior you will see that he already has an animator component attached on him so here it is and we simply need to drag and drop this animator controller the one that we have just created we need to drag and drop him right here in this empty field and then we can add animations to it and we can control it vi code so if i take here the warrior controller drag and drop it here bam so this is the controller now we have it attached on the animator of the warrior the next thing to do is go inside of the animator tab itself and this is where we are going to create the animations now if you don't have this tab what you're gonna do is the following go under window and then you have here animation and here it is animator tab so this one right here so you have the animation you have the animator we want the anime tour so animator this one right here now in order to create these animations basically we don't need to they are already created here but we only need to connect them with the controller so while you're in the animator tab right here right click and create state and empty so right click create state empty voila this is going to be the idle animation and in order to rename this one you see the name is new state if you want to rename it simply click on it and now here in the inspector panel you will see here at the top let me just go here and clear the console or actually clear the pencil so here it is you see the state this is where you will rename it in here where it says motion is where we are going to drag and drop the motions or our animations so here new state is going to be idle and simply what we need to do here is you see we have the idle zero and we have the idle attack so if i select this one this is that animation if i go here and preview it so click the animation basically clicking on the drop down list for this idol and here we have idle underscore zero now if i preview it so if i zoom in on this preview here at my bottom right corner and this is the idle animation i'm not gonna preview the whole animation because it's long so go back here in animator click on idle and here where i said that you need to drag and drop that animation or motion right next to it you have a little circle let me show that circle it's right here you see when you click on that circle you will be able to select these animations so here we have idle zero and select the idle zero and voila idle zero is not here why well if we go here in the console it says animation clip idle zero cannot be used in the state idol legacy animation clips are not allowed in animator controller what does that mean basically it means the way how we import them so we need to select all of these animations so select from attack 0 to idle attack 0 and walk select all of these animations and right here now inside of the inspector panel on my right side you see here we have model tab we have the rig animation material model so on and so forth click on the rig tab in the rig tab we're going to change the animation type from legacy to generic so again click here generic click on the drop down list where it says legacy which is right here this right here you see when you click on that drop down list you will change it from legacy to generic and you will hit apply and bam unity will you see like reimport these assets with this animation type but it will reimport these assets right here only these animations and of course it takes a little bit of time where i can use it to sing no no i had fun recording these videos man anyways animation type will be generic and you hit apply and you see unity reimports them and voila we are good to go so now select the idle animation click on the circle and now select the idle underscore zero animation it works here is our idle animation i can even now preview it if i select the warrior inside of the hierarchy panel and if i go into the animation tab so not the animator tab but animation which is located here window animation in animation this is the animation tab so i can click here the play button to preview it and now we are previewing the we are basically previewing the idle animation for our player c is like moving this is all diagonal animation everything here that you see is basically the idle animation and why am i why am i actually running the game anyways this is the idol animation as you just saw so let's go back and create the rest of these animations so we have here the idol we are also going to have the walk animation so right click here create an empty state and i'm going to call this one walk and i'm going to click on the little circle and i am going to select the walk animation we are also going to have the attack animation so right click here empty state and this one is going to be attack one and like this we are also going to have another one for the attack but let me just click here on the circle and for the attack one i'm going to select attack underscore zero and let me just preview it quickly so attack underscore zero yeah this is the one i want and right click again and create an empty and this one is going to be attack two rename it to attack two and for the state i'm going to select attack underscore one but let me quickly preview it here so attack underscore one if i preview it yeah exactly these two so underscore or attack underscore zero and attack underscore one and the last one is gonna be creed empty and this one is going to be our defend animation so defend like this and for our defend animation i'm going to click on the circle and here we have counter attack damage defense underscore zero so select the defense underscore zero again if we preview it it will be this one you see he's like moving his arm upwards to defend from the attack so now we have these animations we need to now create a script and handle these animations via script so when we move we want to simulate or play that move animation when we attack we want to play the attack animation you get my point but how can we do that well in order to do that we first need to create something that is called a parameter so we need to create something that is called a parameter and here click on the plus sign so click on the plus sign and the first parameter that we're going to create is going to be the walk parameter and if you notice i clicked on the plus sign and selected the bull so i'm going to do it again so delete it click on the plus sign and this one is going to be a boolean we are going to call him walk so a boolean walk parameter now the next parameter we're going to click on the plus sign here and we're going to create a trigger and this one is going to be defend and we're going to click on the plus button here and create another trigger this one is going to be attack one click on the plus button trigger and again attack but now two so attack one and two walk defend attack one and attack two these are parameters because we need to have transitions what are transitions if i right click on the idle animation and i click here make transition i can now point on the walk animation and click on it bam you see this white line going from idle to walk that means this is a transition from idle to walk animation that means when we call this transition in our code we will go from idle to walk animation but this transition in order for it to happen it needs to have a condition and this condition is right here when you click on this line here this arrow when you click on it it goes blue and you have the properties here in the inspector panel when you scroll a little bit down you will see here conditions and it's a list where we can click on this plus sign to add a condition well the conditions are going to be these right here these parameters so for example if i click on the plus sign here and i'm going to go from idle to walk when the walk parameter is equal to true and notice here in the drop down list i can select true or false because when we created this parameter it was a boolean boolean has a value true or false so we will go from idle to walk animation when the walk parameter is or has a value true and we will set that in our code so we will set it in the code for it to have the true value and when that happens we will transition from idle to walk animation similarly right click on the walk animation and make transition to the idol and now we have two arrows one pointing from idle to walk and another from walk to idle so click on that arrow and now i'm gonna click on the plus button here and the walk here is gonna be false because when walk is true we are gonna walk when walk is false we are gonna go back to the idle animation now we are also going to go from our idol to attack so click on idle make transition to attack and we're also going to make transition from attack back to idle so click on this transition from idle to attack and the condition here is going to be attack simply this right here attack one because we're gonna go from idle to attack one it's a trigger we will trigger that in our code we will see if something is not clear right now wait until we get to the code part then i will have more material to explain it more clearly to you we will see it visually and it will be even more clear so we are also going to go from idle to attack 2 and make transition back so click on the transition from idle to attack to and the condition is going to be attacked you don't worry about the transition from attack to idol we will cover that so don't worry we will cover that but basically from attack 2 to idle the transition or the parameter is gonna be when walk is equal to false same here from attack one to idle the transition is gonna be when walk is equal to false because why when walk is equal to false because we're also going to have from walk to attack one and from attack one back to walk and this transition from walk to attack one is also going to have a attack one trigger parameter but this parameter here when we want to go back from attack to walk that's when the walk will be equal to true and similarly here so from attack to back to walk and from walk to attack two click on the transition from walk to attack two click on the plus button and here we're gonna select attack to trigger and from attack two back to the walk walk will be true but we will do something else here as well so don't worry about that we will come to it we are also going to go in our code and then everything will be clear now we are also going to go from idle to defend and back from defend to idle so when we want to go from idle to defend that's when defend will be equal to true so when we click here actually this defend parameter excuse me we're going to delete it it's going to be a boolean so click here bool and defend is going to be a boolean parameter not a trigger so attacks are gonna be triggers but here we're gonna go from idle to defend when the defend parameter is equal to true and we are gonna go back from defend to idol when defend is equal to false right here now we're also going to go from walk to the defend and here we're going to set the condition defense is going to be equal to true but we're not gonna go back from defend to walk we're only gonna be able to go back from defense to idol nation now this is for setting them up we will see them again in action we will see them in action don't worry about that now before we start coding because we're gonna go here in assets and scripts and i'm gonna right click here and i'm going to create a new c sharp script and this one is going to be character animations this is where we are going to create our animations so this is where the animation magic is going to happen but one thing to note is remember those parameters that we used now let me demonstrate that so here we're going to have a private animator and i'm going to call him anim and in the awake function we are going to get a reference to it so anim is equal to get component animator component voila now this is where we are going to create our animations and our first animation i'm going to delete the update function is going to be public void walk which takes a bull so bull walk parameter and in order to execute it we need to call here anim set bool and that bull is going to be our walk parameter and we're going to set the value to this walk that we pass right here so we're going to set that walk because we need to call it with the name that's why we named it here if we go here in the animator and if we go into the parameters you see the name is walk it's same as with find game object with tags so the same with tagging we need to have the name here you see the walk it's capital w so also here it needs to be capital w or otherwise it will not work now this is what i was talking about a minute ago before we create these you see we have these parameters and you know i hate hard coding so we're going to go here in tags now when i say i hate hard coding there are there are some exceptions where you will use hard coding like this instead of creating it here but we will see examples of that in some other tutorial don't worry about that so don't worry that you will never use hard code but if you're going to use it often it's better to put it here in a single script so here i'm going to create a public class that i'm going to call animation tags so or actually not animations animation tag with without s here and here we're going to have a public constant strength this one is going to be the walk parameter and we're going to see here walk so the value is going to be equal to walk capital w so capital double u or otherwise it will not work because the names need to match up if here you have a lowercase w so if here you have a lowercase w then here as well you will use the lowercase the point is the name you put here for the parameter it needs to be exactly the same name you put right here so we also have a public constant string defense or defend parameter which is going to be equal to defend like this this is the value this is the name and we're also going to have a public constant so it's not connection what am i doing here const string and this is going to be attack underscore one underscore trigger which is gonna be equal to attack one like this and public so it's public constant string not public it's public and instead of using here attack underscore 2 underscore trigger because i want to differentiate them i think it will be better if we put them like this so it's attack underscore trigger underscore 1 and attack underscore trigger underscore two because i can see this one until clearly when there are at the end of the name one instead of when they are in the middle of the variable name so now we have everything basically and we can go here in our character animations here for our walk instead of using this we're simply going to call our animation tags dot and we're going to call the walk parameter bam here it is we are also going to have a public void defend animation and here are also going to have a bull defend which is a parameter that we're going to pass and here we're simply going to call animset bull and you call the parameter by the name so let me explain that so animation tags dot defend parameter and here i'm going to call defend and yes i notice here that i did not type parameter so i need to go back here in tags and it's the default parameter thank you very much you see here i'm calling set bool because when we created this parameter we created it as a bull when i click on the plus button and click bull it's created as a bool so you will call set bool if it's an integer you will call set int if it's a float set float if it's a trigger set trigger which we will see right now so here we're also going to have a public void attack underscore one and here we're simply going to call anim set trigger not target but set trigger and simply here we're going to call animation tags so animation tags dot attack one trigger bam it's like that you see set trigger and for attack two i'm gonna duplicate this and paste it and here instead of attack one i'm gonna say attack two and here instead of underscore one i'm going to say under score two and basically that is that bam we are done with our animations see this is a class and this is how i like to do things i like to create a separate class for everything and this is how unity prefers it now this is not my wisdom i've heard that i don't know what was the name will goatstein or or that allen guy the guys who do official unity tutorials i was watching one of their tutorials and yes i watch tutorials don't judge me i mean i'm saying don't judge me but you should also watch other tutorials as well anyways i heard him saying that unity prefers that you have a separate class for every separate task so i like to separate my tasks so here this class will only handle animations and now when we want to call these animations for example the move or the walk we simply go here in the move script and right here below our private character controller we're going to say private character animations and i'm going to call this one player animations or player animation how we want to say and here in the awake i'm going to say player animations is equal to get component character animations i'm calling it character animations the class name because we are also going to attach this on our enemies now before i animate anything i'm gonna go here in unity and we need to attach that script on the warrior if we don't attach it it will not work so select the warrior click on add component and filter for character animations and click on that script and hit apply so that that change also applies to the prefab so if we go back now in our visual studio so if i go back here at the bottom i'm going to create void animate and this is going to animate the walk so animate walk this is how i'm going to name it so animate walk and how are we going to animate the walk well basically i said that the move direction it has it is moving so it has velocity we can test it out so we can call here if move actually i'm saying move direction but it's actually a character controller so excuse me for that one so the character controller we're using it to move so we can test it out so we're going to say here if our character controller.velocity that square root magnitude is not equal to zero then we are going to animate we are going to call playeranimations dot walk is equal to true else here we are going to call player playeranimations.walk is equal to false bam bam bam what is this why are you bamming teacher i don't know why i'm banning but what this here is we have our character controller and we are going to get the velocity you see the velocity is the velocity speed over time if we are moving velocity will increase over time only if we are standing still now this is from physics i'm not i'm not no physics guru i just know this from looking online it's really very simple so as i was saying if we are moving velocity will increase over time if we are standing still velocity will not increase think of it like you have a gas pedal in your car and when you are pushing the gas pedal to the end you know the car does not go from one from zero to 100 in a second no it goes slowly over time well that slowly over time is the velocity so if the velocity and the square root magnitude you see this square root magnitude and i need to do it like this because for some reason visual studio is giving me here some errors i don't know warnings for whatever reason but let me go here character controller so char controller dot velocity you see the current relative velocity of the character meaning if he's moving or not that the square root magnitude it returns the length of this vector because the square root magnitude basically this velocity is a vector value a vector has a value of x y and z and why that because we have speed on the x y and z axis and it will return that speed this square root magnitude will make that value one which basically means if that value is not equal to zero we are moving so if that value the velocity is square root magnitude think of the square root magnitude simply converting this value into a one so number one value if this velocity has any value if it's zero then it will return zero the square root magnet will return zero if we are standing still if we are moving we will have any value here we will convert that value to one which will not be equal to zero meaning we are moving meaning we will animate the walk meaning if we are not moving then we will not animate the walk instead we will animate the idle animation before we proceed to test this out we need to call the animate walk in the update function so animate walk function call it in the update function and now we are ready to test things out so if i go back here in unity and if i hit the play button when i move we will see that we are not animating now what is the reason pay attention here to the idle animation this blue line when this blue line finishes now i'm gonna go to walk animation and walk animation freezes what the hell is going on teacher you said that this right here will work and why is it not working first of all let me fix these animations so if i double click on the idle animation here we need to make sure that the loop time is checked so when you select the idle if you double click on it it will take you here to the settings of the animation and if you scroll a little bit down you have this loop time which is right here that i have circled right now this loop time it needs to be checked because the idle animation needs to loop and when you check it hit apply at the bottom left or excuse me bottom right corner also do the same thing for the walk select it double click it scroll down hit the loop time and hit apply because again the walk animation needs to loop it needs to play over and over and over again for us to be able to simulate the walking and the idle animation the defend animation here so select it for the defend animation we will leave it for later we will see what we are going to do with it because we are going to add some extra code for that as well so we will leave it for now these attack animations are not going to loop but now since these animations are looping if i hit the play button pay attention here in the animator you see animations are moving you see this blue line it means that the animation is playing but if i try to move you see i'm moving but you see all only now the animation is playing i don't know if you see this and you pay attention here you see what's going on you see here now what is the reason for this well the reason for this are these transitions so we need to fix them if you select the transition from idle to walk animation you will notice here that we have conditions we set the conditions to be true that is okay but you also have these settings here and you have the exit time and pay attention here this exit time transitions has a fixed exit time and if i hover over the exit time it will say exit time and normalize time from current state basically this means this exit time is how much time we have before we exit from the animation and usually this means that we will let the animation to play till the end which we saw the blue line was filling up in the idle animation and only when the blue line has finished filling up that's when we transitioned to the walk animation so in order to fix that we're gonna uncheck the has exit time and the transition duration we are going to see at point one because we want to transition as fast as we can from our idle to the walk animation now in regards to the walk animation we're gonna do the same thing so click here the transition from walk to idle uncheck has exit time fixed duration is gonna be equal to point one simple like that so what about transitions from idle to attack basically we can test these two out first so if i hit the play button now pay attention now i'm gonna hit or now i'm gonna start walking you see as soon as i started walking he started to walk you see as soon as i started to walk and here what we need to do is er the transition or actually the condition is false but i think in the code so else player animations walk is equal to false something weird is going on here because the parameter here is okay it's false and we saw that in the animation nothing is wrong so let me try this i'm going to print here and i'm going to say the velocity is colon and i'm going to say plus character controller or char controller dot velocity dot square root magnitude and i'm going to print that out to see the value quickly so if i go here let me just clear the console and if i hit the play button we will see that initially it's set to zero but now i'm gonna start moving so now it's nine nine points so on and so forth i'm stopping so i stopped moving whoa never saw this before you see i'm i don't move but for some reason the character controller still has velocity now i'm really not sure what is going on but let me try this let me try to stop our character controller instantly so basically here we're checking if input so on and so forth if we have input we will move our character controller else if we don't have input so basically here if we don't have any input to move the character then we're simply going to say character controller dot move and here we're going to pass vector 3 0 again vector 3 0 is a shorthand for writing 0 0 0 for x y and z and basically it will stop the character controller from moving so if i go back here in unity and clear the console and if i hit the play button so if we go now and if i stop then it stops you see we just need to stop it but i'm not sure why it's not stopping on its own i'm using the same code from the project that i showed in the beginning it's the exact same code i'm following that it worked like a charm and did not use this character controller move zero but basically if you have this issue this is how you will fix it and if i get to bottom of this issue i will create a video talking about what the issue was it's really interesting to see but this is how we fixed it so yeah you need to improvise in programming as well so this is how we stopped our character controller to make sure that the square root magnitude is equal to zero indeed so what i'm gonna do again is test it out so that we can see an action our transition so if i walk now you see automatically he goes from idle to walk i'm gonna stop automatically he goes back from walk to idle animation the reason for that is because we edited these transitions so we don't have the exit time transition duration is zero basically exit time will allow us to finish the animation before we transition to another animation and transition duration is how much seconds it will take for this transition to happen so we set it point one we want to happen as fast as possible and we saw this in action so now things are clear you see here we go from idle to walk when the walk parameter is equal to true this is what we're doing here parameter walk is equal to true and if i go into character animations and set bool this is the walk parameter we set it to this walk parameter that we have here and we specified that walk to be either true or false so if it's true it will transition from idle to walk and if it's false it will transition back from walk to idle and we talked about these parameter conditions or settings exit time fixed duration so on and so forth we explain what they are and what they did and so now the animation is a little clearer if not a lot more clear what we are doing here now this is in regards to the idle and the walk animation we of course have these transitions that we need to fix but i would rather first test it out and then we will proceed to fix them so that we can see it in action and make the animation concept even more clear so for that we need to go here in our project and script folder and right click here and we are going to create a c sharp script that i'm going to call player attack input and this is where we're going to get the input for the attack and we are going to proceed to attack so of course we need to attach this on our warrior character and i'm going to hit apply and now we're going to double click and open this script in visual studio the first thing that i'm going to do is tag the class here at the bottom and give a little bit of space so that i can scroll up and down and we can see more clearly what am i doing here so for now the one thing that we need for our player attack input is going to be our character animations and i set it to be private because we will use get component and i'm going to name it player animation and inside of the awake function so change start to awake we're going to say player animation is equal to get component and we're going to get here the character animations component like this so what is the next thing to do well the next thing to do is to detect input so we need to detect input in order to simulate the attacks and we will simulate them with the animation so when we press our key code let's say j and k so when we press j we will defend ourselves and when we press k we will attack so here if our input get key and we're going to see here key code dot j so when we press j we are gonna defend ourselves so defend when j pressed and simply here we are going to call our player animation so we're going to say player animation defend and here we're going to say true because if you remember if i go back here in unity and inside of the animator component or actually in the animator panel you see here defend we will go from idle to defend when defend is equal to true and we will go from walk to defend when defend is equal to true now going back here we set it to be equal to true which means that when this is called we will play the defend animation now this is when the key is pressed what we want to do when the key is released well we want to see here if input dot get key down and this is going to be key code so key code dot j same key when we press it and when we release it we are going to say here player animation defend now is equal to false we will test this out in a moment we will see some issues and we will fix them one by one because i like to first show you the problem and then show you how to get to bottom of that problem and here we're also going to say if input get key and we're going to see here key code k so when we press k we are going to attack but we have two attacks if you remember if i go back here in unity you see here we have attack two and we have attack one this is in our animator panel so here they are attack two and attack one so if i select the warrior here and if i zoom in on him you will see here that if i select the attack one animation you see now this is how he is attacking if i select attack two this is how he is attacking so how can we call these animations because i want to randomize that and in order to randomize it when we press our key code k we're going to test here if our random dot range from 0 to 2 if it's greater than zero now to declare this right here right away or actually to explain it you see this random range will return a random value between two numbers when we use integers if i hover over here you see it's it is using integers if we say here f and here f it will think that we are using floats which you will see here when i hover over random float as you can see random range for a float but if i remove f and set it to be an integer or actually just remove f it will think we have integers why is this important because when it comes to integers this number here is inclusive and this number here is exclusive what does that mean that means that inside of this random range it will include this number but it will not include this number which means basically here it will return either zero or one two will not be returned it will return either zero or one and if we have here for example five it will return zero one two three and four but it will not return five so five is excluded but if they are a float so if i say here f so two f and zero f that means we can either get zero one or two or in between decimal point numbers so when it comes to a float both numbers are included when it comes to an integer then the second number is not included which means this will either return zero or one which means 50 50 chance to perform one attack or the second attack so here i'm going to simply say playeranimation.attack1 and here i'm going to say else and i'm simply going to save attack animation too so player animation and attack to animation and voila we are good to go and since this is already being called in the update function we can safely test it out so we need to go here in unity and pay attention now what is going to happen so here i'm going to hit the play button pay attention to these animations so let's say i press k you see i pressed k so what is happening first of all we need to wait for our random integer to pass and let me just go here quickly so here i'm calling attack one and here i'm calling attack two and in character animations so here animations attack trigger one and here we have attack trigger two so let's go back here again and what is going on pay attention what is happening here so i'm gonna press it and now we have attack two but again we need to wait for the idle animation to finish because we did not check for these transitions and now he's attacking and you see how much it takes to play the attack animation so we need to fix this and of course in order to fix this we are going to fix the transitions so the transition from idle to attack one so here it's not gonna have an exit time and for the transition duration i'm going to see here point three this is from idle to attack one but when it comes to attack one back to idle it's gonna have an exit time and here the transition duration i'm going to say 0.1 so the transition duration will be 0.1 but it will have an exit time with the value of one for our transition from idle to attack two we are not going to have exit time and point three will be that transition duration for this transition from attack two back to idle we are going to check the exit time and the value will be one and here the transition duration will be equal to one now when it comes from our attack or from walk to the attack animation so this one right here to attack one uncheck exit time point three for the transition duration going back here from attack one to walk we are not gonna have or actually exit time is going to be one and transition duration is going to be equal to six and similarly here from walk to attack two we are not going to have an exit time but 0.3 for the transition duration and for our other transition same as with from attack one to walk we will use the same thing for attack two to walk so exit time will be one and transition duration will be 0.6 and for our defense so we are also going to fix defend now because it will have the same issue it will have the same issue as we just saw so we are going to see here uncheck exit time and point three for our transition duration we're gonna do the same exact thing here from walk to defend so uncheck exit time 0.3 for transition duration and going back from defend to the idle animation one for the exit time 0.6 for the transition duration so now let's test it out and see what we have here so if i go and test it out again so pay attention now did you see i don't know if you see here that we are attacking with two we attacked just two what is you see here i just pressed the number i just pressed it once you see i pressed the animation only once as you can see here so again but it's attacking multiple times you see here now i'm not even pressing a button now you're like okay teacher do you know what you're doing i do know what i'm doing but i want to show you so let's go back here what is the problem the problem is here get key so we should not use get key because get key returns true while the user holds down the key basically when we press and when we hold the key now of course i did not hold the key what i did is i simply i simply pressed it but since this is called in the update function which is run every frame in a second it can happen that i held unintentionally for two three frames while i press the button it was basically held in quotes and those two three frames caught that and it is called that many times so what we need we only need to detect when we press down the button and basically for that we are going to say get key down so you see here get key down this is what we need and here also we're gonna say get key down and here we're gonna say get key up i wanted to write it before but for some reason i wrote down get key down will detect when you press the button only once so when you press it and even if you hold it it will detect that only once get key up it will detect when you release the pressed key we're gonna use this when we press this right here we're gonna hold the shield and when we release it then we will release or lower down the shield now that we are using get key down let's go here and let's test it out so if i hit here the play button so if i hit the play button pay attention now so if i press the key you see now automatically only one time it is executed and only one time we go into the animation now one thing that you're noticing is that the animation is very slow so you see now he's like a slow motion when he attacks you saw that in order to fix that you're simply going to select and let me just go here take the highlight tool so you're gonna click on the animation right here the motion state that is and right here you have the speed of that animation so it's right here where i'm pointing and for attack one we're gonna say the speed is going to be four and for attack two we're gonna say the speed is three that means it will run four times as faster than its original speed and this one the other one will run three times faster than its original speed basically so this is what we are saying so now if i test it out so if i go here and hit the play button if i press you see now how fast it is so it's playing these animations fast we are transitioning from one animation to another fast you see everything is basically working now you see and you can see here inside of the animator the animations that are being played so when i press here automatically it goes to attack two when it finishes it go back to idle so on and so forth when i press the shield you see he is holding his hand but i also release the button so if i press it and hold it you see now he also gets back we need to fix this now in order for you to understand what i just said we are going to import the shield and the sword so if i go here in models and here we have our weapon so here is our weapon this one right here did i imported no for some reason i did not so basically this is our weapon this right here and the weapon i'm going to call it sword and we're going to click on the warrior drop down list then vip object then pelvis here then spine then spine one spine two then neck then a right clavicle upper arm i know this is tedious and here is our right hand this is where we are going to position our shield on the right hand what you can do is you can type our hand and here it is so this one right here the r hand and you're going to select the sword and for the position here x i'm going to say negative 0.0389 for the position why i'm going to say zero 0.0128 and for the z i'm going to say 0.0034 now the rotation x is going to be negative negative 1 to seven the rotation y is going to be equal to negative 100 and the rotation z is going to be negative one or four so negative one hundred and four basically that is that this is how we are going to hold our sword as you see right here now for the shield so we're going to go back in models and now we have shields and here it is and i'm going to rename it to shield this one is going to be positioned under the left hand so simply type here l hand and here it is when i say type here i mean right here in the hierarchy search tab so this one right here you simply type l hand and here it is this sounds like some i don't know some swordsman l hand anyways take the shield and attach it here on the l hand and let me just reposition it so for the x position is going to be 0.041 for the y it's going to be negative 0.008 for the z it's going to be negative 0.005 and the rotation 98 for the x for the y 81 for the z it's going to be 180 and basically that is that so this is our shield and this is our sport again pause the video here if you want to copy these exact values where the shield is positioned and as you can assume when i was preparing this project i have positioned this experimented moving it up down left and right until i got it to the place where or to the position where i want it to be and basically now we have our shield and we have our sword now let me select the sword and you can also pause the video for the sword so if you want to position it so this is where we can position our sword and voila this is it so now if i go and test this out you will see this in action way better so now we have the sword if you see we are holding the sword and if i press the key you see now we are attacking with the sword we are stabbing come on stab okay he's stabbed and stabbed pay attention now if i hit this for the shield you see he simply holds it up and lowers it down if i hit the j key and hold it you see again he plays the animation and now you see what is happening here the animation is not working basically now the reason for that is if i select the warrior and go to the defense zero one animation this is that animation this is how the full animation looks like you see this right here he basically puts the shield up and then he lowers it down in the same animation what we need to do is we need to freeze the animation where we are somewhere around here so at the middle approximately or frame i don't know frame 30 frame whatever so basically when we are here somewhere something like this this is where we are going to freeze the animation so that it stops and in order to do that we need to go back in visual studio and inside of the character animations right here at the bottom below our attack too we're going to create here void freeze animation and not free but freeze so it's freeze animation like this and here we're simply going to say anime.speed is equal to zero now setting the speed of the animator and anim is our animator if we set the speed to zero that means we will basically turn it off shut it down it will not move the speed is zero and in order to turn it back or make it work like normal so we're going to say public void on freeze animation and here since we are unfreezing we are going to say anime speed is equal to 1 again so 0 and 1 is the speed for the animation 0 stopping the animation completely so stopping that animation completely and again for our freezing we are going to set zero and voila we are good to go now this freeze animation we are going to call inside of this animation right here we are going to use animation events now you see this animation that we have imported so i'm gonna see here clear you see this animation defense it's read only if you pay attention here it says read only read only means that we can only display this animation we cannot edit this animation in any way we cannot delete these steps for the animation see we cannot right click and remove properties i cannot add any animation events right here and in order to do that what we need to do is locate this animation so defense zero here it is it's inside of the models and animation defense underscore zero and this is the animation clip so we want the animation clip which is inside of this game object you see here that i've circled but this is the clip that we want you see this defense underscore zero what you're gonna do is you're going to take this clip and you're going to hold command on mac on windows you're going to hold control and you're going to press d this will duplicate it so now we have an independent defense animation as you can see right here we have an independent defense animation what does it mean to be independent well it means that our animation is not dependent on this one right here on this defense that we have imported and we're going to rename it to defense animation and now i'm also going to check this loop time right here so pay attention when you click on this defense animation you will have a loop time here check it because we want the loop time to be checked and if i go here in animator and select the defend animation what i'm going to do is change the motion here for the clip so this right here exactly where this is pointing so this one i'm going to click on this little circle right here and filter for our defense animation so click here defense animation here it is now because it's independent it's not read only if i select it here it's not read only anymore it's basically now we can edit it so we can hit here the recording button we can add more to this animation so on and so forth but this means that we can press this button notice this and actually not this right here so clear you see this right here that i've just circled inside of the animation tab that is called an animation event keyframe so i can go for example here and let's say i don't know at frame 20 exactly here i want to add an animation event so i'm going to click on that button that i just showed you this one right here that you see so click on it when you click on it and let me just hide the highlight tool so when you click on it you will see now that in the inspector panel first of all you will see here at that frame you see this blue line that's the animation event and when you click on it you see the properties here in the inspector panel basically this is a drop down list that we can click here and we can select which one of these functions we want to be executed when we hit this frame so when we hit this frame and go over this animation event inside of this animation so i want to freeze the animation so i'm going to click here and select freeze animation so now when we play this animation and we get to this point right here it will hit or pass on this animation event which has this function here and this function is right here inside of our character animation script so it will execute this function and in order to unfreeze the animation we need to go in our attack input and right here key code up we need to call here playeranimation.unfreeze animation in order for this to work so here we are going to unfreeze because inside of this animation we are freezing it in our animator does not work so in order for this to work we need to unfreeze the animation and make the animator work like normal so if i go here and hit the play button pay attention now if i hold press and hold the key code j you see now he is holding you see now he is holding his shield you see he is basically holding if i release the button he releases the shield and this is how we can see this way better so i'm gonna go here inside of the scene and here is our player he's playing his idol animation so pay attention on the scene view i'm gonna press j you see he is holding the shield and i'm pressing the g key and holding it i'm currently holding it and now i have released it and he released that animation so basically we simulated this with our animation and with our code again what we did is in our character animation we froze that so we are calling freeze animation which will be called at this exact frame so defense animation at this frame right here it will be called so this is the frame right here and it will be called at that frame it will go inside of the script which has this freeze animation function it will execute here and in our player attack when we release the key so get key up defend when ga is pressed down and here we're going to say release defense when j is released so when j key is released so when we release it we unfreeze the animation and set the defend animation to false to go back to the idol animation and now we can finally create our enemy because we have all the ingredients basically our enemy is going to be the duplicate of our player so what i'm gonna do here is duplicate the warrior and i'm going to change him to so his name actually to enemy so now we have the enemy name here we are not gonna have the character controller so you're gonna remove that we are also going to remove player move script and player attack input the only thing that we are going to leave here is the character animations now we are also going to have a box collider so attach a box collider on the enemy but what i'm gonna do is i'm going to take the enemy and move him here so right here and i'm going to rotate him 180 degrees on the y so that he is facing the player basically as you can see right there the enemy is over there you can see him so now let me first edit this boss collider because it's not in place so for the y position of the box collider or the offset it's going to be point 92 z we're not going to touch as you can see i'm editing these right here so the center for the whites point 92 the size x is going to be 0.28 the size y is going to be 1.81 and the size z is going to be 0.34 and voila this is our collider right now i'm also going to take the character animation and move it right here below our box collider yes continue break the prefab i don't care because we're gonna go here into navigation now what is this navigation what is this right here well this navigation is first of all you can locate it here under window and then a i and then navigation and probably this tab will be floating like this so it will be floating i'm gonna dock it right here where my inspector panel is and what you're going to do inside of this navigation is that we are going to bake our areas bake the objects that we are basically going to use for navigation so if i go on the fourth tab here so pencil and clear you see the four tab which is object when you select that then you click on this right here mesh renderers so select on that click there and you see all of these game objects so we're going to select all of these draw calls and the ground and we're not going to select anything else so all of these and the ground basically i'm going to click here navigation static and i'm going to say walkable but for these draw calls let me select them and uncheck that and navigate actually navigation static but not walkable so these are going to be not walkable and the ground is going to be walkable the word says itself so it's selfexplanatory basically walkable means we can walk on it we will be able to navigate on it and nonwalkable is none or not walkable so all of these draw calls they're going to be not walkable click first navigation static and then not walkable then click on the ground which is our cube which is where our game objects are standing which is our battlefield and navigation static and then walkable so when you do that this is how you denote to unity's ai system on the navigation that we can walk on these areas basically these are not walkable so it will avoid them but these that are walkable we can walk on them and i'm going to go now in the bake tab right next to the object tab we have the bake tab and simply click here big at the bottom right corner when you click on that bam unity will do its thing and you see here these blue lines or this is light blue or light green i don't know what this color is so don't judge me anyways this what has this color this light blue or green this means that it is navigationable we can walk on these but those that don't have for example like this right here this is not navigationable and we cannot walk on these areas why is this important so now i'm going to go back in the inspector panel and clear this t mesh from the search this is important because now we can select our enemy and i can attach another component which is the nav mesh agent so i'm going to click add component and nav mesh agent attach it remove the character script or actually move it down and this is our nav mesh agent now here for the angular speed i'm going to set it 800 this is basically the rotation speed of the enemy how fast he will rotate so this is the only thing that i'm gonna change so how fast he will rotate now that we have the enemy and we have baked the walkable areas we attached the navmash agent i'm gonna go inside of the scripts folder and right click here and i'm going to create a new c sharp script and this one is going to be our enemy controller so i'm going to call it enemy so come on enemy controller and select the enemy game object itself so select it and drag and drop the enemy controller on the enemy now before we continue let's go here in the prefabs and drag and drop the enemy prefab right here inside of the prefabs folder and now we can go here in enemy and i can double click this enemy controller script and i can open it in visual studio let me just tag the class here and voila yeah of course why not why should not visual studio give me these red errors again it's been open too much this happened already so i need to close it and i need to reload it or open it again for this to work for some reason it happens like this sometimes so i don't know why don't tell don't ask me because i don't know anyways in order for us to use the nav mesh agent we need to see here using unity engine dot ai which is well where our nav mesh agent is located ai is for artificial intelligence i'm also going to create here a public enum that i'm going to call enemy state and inside of this public enum i'm going to create two state we are all either going to have the chase state or the attack state so either chase or the attack now here inside of our enemy controller right here right below that is we are going to have a reference to a private character animation which i'm going to call enemy anim so enemy anim underscore anime we are also going to have a private nav mesh agent which is the nav agent that we have attached he is going to help us navigate and we will see that in a second so navmesh agent which i'm going to call nav agent we are also going to have a private transform which is going to be our player target we are also going to have a public float move underscore speed which is going to be equal to 3.5 this is the movement speed of our navmesh agent we are also going to have a public float attack distance so attack underscore distance which is going to be equal to one f now this attack distance is the distance how close can we get to our player before we start to attack basically how close we get to the player before we start attacking so attack distance public float chase after attack distance which is going to be equal to one f and is going to be chase underscore player so chase player after attack basically if we attack and after that attack the player decides to run this is going to be the distance we will allow him to run before we start attacking or chasing him we will see that don't worry we are also going to have a private float wait before attack time which is going to be equal to three this is how many seconds we're gonna wait before we attack we will see this in a second and our private float attack timer and this one is going to denote when we start or when should we attack and of course we also need this enemy state so here i'm going to create a private enemy state which i'm going to call enemy underscore underscore state like this so now inside of the awake function so awake change start to awake we need to get ourselves some references first of all we are going to get our enemy atom so enemy anim is going to be equal to get component character animations and we are also going to get the nav agent which is going to be equal to get component nav mesh agent we are also going to get our player so we're going to say player target is going to be equal to game object find the game object with the tag tags dot player tag dot transform to get the player and this is what we need for now inside of the start function so right here in the start so create the start function inside of the start function we are going to set the enemy state to be equal to enemy state chase and our attack timer is going to be equal to weight before attack time now in order to understand this we need to create two functions so right here we're going to create void chase player like this chase player and right below we're going to create void attack player like this and in the update function if the enemy so enemy state enemy underscore state is equal to enemy state chase so if it's equal to the chase we're going to chase the player if our enemy underscore state so underscore come on here enemy underscore state is equal to enemy state attack then we are going to attack our player like this so we're going to attack him okay now let's code it out don't worry when i code this out i will revise the code again and it will be very clear what is happening so as you can see here in our chase we are going to say nav agent set destination so set the destination come on man set destination player target.position what the hell is this you see set destination is the sets or updates the destination triggering the calculation for a new path basically the destination where the nav agent should go will be our player's position this is the destination nav agent that speed is going to be equal to move speed so this is the speed of the nav agent that we are going to use and if our nav agent velocity that square root magnitude is equal to zero then we are going to say enemy anim dot walk and we're going to see here false and this is basically the same thing as with our player else except here we will not have those issues that we have with that we had actually with our players so here we have now true and right here below we're going to test if our vector 3 distance between the transform that position which is the current position of the enemy and our player target that position if that is less than or equal to the attack distance meaning we are in the distance where we can attack enemy state is gonna be equal to enemy state attack basically we can test this out because we set here the enemy state to chase and here we're gonna set this to chase so we can explain this right here if i go in unity and if i take my warrior so i'm gonna take the warrior and i'm gonna move him a little bit here so a little bit away from the enemy and before we test this out if you remember we created the enemy by duplicating the player so what you need to do is select the enemy and make sure that the player tag is not selected because if we go back here in our script we will get the player target by using the find game object with the tag so tag player it will search for that same tag so you need to be careful with this so select the enemy and go here and i'm going to click on add tag and click on the plus button and create an enemy tag and select the enemy and tag the enemy with the enemy tag and i'm going to hit apply button so be careful with this because we are using the code here we're using find game object with the tag player tag and it will be confused if it has two tags and it only needs to find one if it's find game objects with the tag then it will get the array of game objects who have that tag player but when we are searching only for one and we have two in the scene then unity will be confused and your code will be broken so you need to pay attention for that so if i hit the play button now and go back here in the scene view you will see how the enemy is coming closer to the player you see he is going towards the player when he gets where the player is so basically he needs to stop here but we did not tell him to stop he goes here where the player is and voila that is that let me just see here if i take the player and if i position here no he arrived at his destination and that is where the path ends i thought that if i move the player he will rereevaluate his destination but no we need to do that through code but let me explain what happened here basically let's go from the top this right here is our character animations and the nav mesh agent that we're using so this is clear this is the transform of the player this is the move speed of our nav agent this is the attack distance and chase player after attack distance we will see this in more depth when we create our attack so don't worry for these two but what is going on here is that we are getting our component character animations we are getting the component nav agent and also we created here these states by the way chase and attack and we set the state enemy by default to be chase and here in the update if the state is equal to chase then we will chase the player and when that happens we are going to go inside of this function so what does this function do basically you see this function here will set the destination meaning the target where should the nav agent go because the nav agent you see this one right here that we have attached on our enemy so let me select the enemy you see the navmesh agent he is the one who knows how to navigate on these green lines or these this green light green area because we bake that using unity's navigation all of that information is available to our nav agent he knows how to navigate in this area and for it to navigate so for the nav agent to go towards a certain position we need to call so we need to call here set the destination so nav agent set its destination to the position where we want to go we want to go towards the player so where the player is this is where we want to go this is our destination and here we set the speed to the movement speed so move speed so that we can move by the speed that we added right here which will set the speed of the nav agent while going towards this destination now you see here our nav agent as if i run the game again and if i click here on the scene you see how the enemy is coming closer to the player so our nav agent has velocity he built inside of it and we talked about velocity it speed over time and i set the example when you press your gas pedal on your car your car does not go from zero to 100 in one second it goes slowly so while you're holding the gas pedal it goes from 10 20 30 40 up to 100 speed that's that is velocity it increases over time basically if the nav agent is moving the velocity has a value and square root magnitude will simply set it to a number meaning if that number is greater than zero so if it's equal to zero basically that means we're not moving so if the velocity's square root magnitude is equal to zero we are not moving which means we are not gonna animate the walk animation else if the square root magnitude is not equal to zero meaning it's greater than zero meaning we are moving then we will set the walk to true and we saw that we're animating our enemy so i'm not going to go back but we saw that in action so the next thing here that we have is our vector 3 distance and this is this measures the distance between two points basically here i'm measuring the distance between the transform position which is the current enemy's position and between the player's position so think of it like this actually here is my highlight tool think of it like this if the enemy is here and the player is here i am measuring this distance between them so this distance between them will be measured and we will check if that distance is less than or equal to the attack distance so if the distance again between the enemy and the player if that distance is lower or equal to the attack distance we are in the range where we can attack then we are going to call here enemy state change it to the attack state which will make this true so if the enemy state is equal to attack we will call the attack function player now inside of this function here what's gonna happen we need to stop our navmesh agent you saw that he reached where the player is and he was moving basically so let's do that again just to test it out to see what i'm talking about so he will reach where the player's destination is you see here he's going towards the player going going going he gets where the player is and he stops but basically he's not moving but he is playing the move animation we don't want that what we need to do here is we need to call nav agent.velocity is equal to vector30 this will completely stop our nav mesh agent it will make him stop in an instance basically this is like you apply instant break on your car and it breaks instantly it does not move an inch after that we're also going to say nav agent is stopped is equal to true basically this will stop nav agent nav agent is now not working when we type here is stopped and if i hover over it will say the property holds the stop or resume condition for the nav agent even here if we set the destination but if we call here is stop so if i say nav agent is stopped and equal to true it will stop it will not try to go to this destination because it is it has instructions to stop so now we stopped the nav agent by these two lines of code the next thing to do is call our enemy walk or enemy anim walk is now equal to false our attack timer plus equals to time dot delta time and if our attack timer is greater than weight so wait before attack time this is where we attack and again we have two attacks so we're going to say if random dot range from zero to two is greater than zero 50 50 chance that we're gonna attack with attack one or attack two so here we're simply going to say enemy anim dot attack one else so not here enemy anim but else else attack two voila and we need to reset here the attack timer so attack timer is equal to zero so that we can basically attack again now we can test this out but we also need to start chasing the player if we can attack because the player can move away from us this right here will stop the game object it will stop it let me test it out and see that for yourself so if i hit the play button now let me just try to move a little bit closer to our enemy so come on just move a little bit closer go here into the scene so pay attention now the enemy will stop near the player so it will stop and it will start attacking you see it starts to attack but if we run away we run away and voila this is that you see but the enemy will continue attacking here does not know that we went so we need to tell it that so we basically need to tell our enemy that we run away so going back here right below this if statement we need to test if our vector 3 distance again the distance from the enemy transform position and the distance from our player target position if it's greater than the attack distance plus chase player after attack so if this is true then we're gonna call nav agent is stopped is false enabling nav agent to move enemy state is gonna be equal to enemy state chase so that we can start chasing our player so what is going on here basically we saw that the enemy was coming towards the player we explained that right here we explain what is going on setting the nav agent destination towards the player will make the nav agent move towards the player this is the speed here we are testing if we are moving we will animate if the distance is lower or equal to the attack distance then we will attack this happens when we attack we stop the nav agent from moving we tell him you are stopped don't use nav agent at that time we set the walk to false and now we trigger these attack timers you saw that in the start function here i set the attack timer to be equal to weight before attack time and here i'm adding to the attack timer delta time and when the attack timer has a value greater than weight before attack time we will attack basically this is that when we go here and let me just bring the player closer to the enemy so now pay attention when the player gets as close to the enemy he starts attacking right away so that is that first attack and now he waits you see he waits a little bit then attacks again basically this right here because we set the attack timer to equal to weight before attack time as soon as we add here time delta time to the attack timer it will have a value greater than weight before attack time because again we set it here we set that here to be equal to so when we add a little bit value to it it is greater which means we can attack i want to simulate that because as soon as we get close to the player i want the enemy to attack the player that's why it happened like that and then we reset the attack timer to zero if we don't call this if i remove this from here and if i go back basically let me just turn this off i'm telling now in the word basically too much i don't know for some reason let me just take the warrior and move him a little bit closer to the enemies so that we can test it out faster so if i take the scene view and as soon as the enemy comes here he will attack once and since we are not resetting the attack time you see what is happening basically he is attacking every second now the reason for that is because the attack time will always have a value greater than weight before attack time if we don't reset it back to zero so now we are going to reset it back to zero which will wait this many seconds that we specified right here so now you understand these variables we wait this many seconds three that we specified here before we can attack and we're adding time.deltatime to the attack timer so that eventually it will have a value greater than weight before attack time and this is what we are doing here and basically when we attack again with the word basically so after that when this is true we will test the random range between zero and two if it's greater than zero we will attack with the attack one if it's not greater than zero then we will attack with the attack two same as what we did with our player randomizing the attack and we explained this so now we are coming close to this you see vector 3 distance transform position so if the distance between the enemy and the player is greater than the attack distance which is this one right here so this is the attack distance plus this distance right here so if it's greater the attack distance plus this here we're gonna give just a little space for the player so that he can run away before we start chasing him and we can see that right here so first of all let me take the enemy and i'm going to set the attack distance and 1.3 because and i'm going to hit apply to apply that change to the prefab because i don't want the enemy to come that close to the player he can come at 1.3 distance which is this distance right here you will see now you see this right here is exactly enough and this is how it looks like in our game view and basically you can play with this attack again with the word basically you can play with this attack distance value so the higher the number then the enemy will be far away from the player before he starts attacking but pay attention now when i start to run away you see he will wait a moment or two but before he starts chasing me so he will wait the attack distance plus this chase after attack distance until he starts to chase and here we need to say nav agent is stopped is false because here we set it to be equal to true which will stop the nav agent so set it to true we'll stop it if we don't call here this so if we don't call now it's equal to false to tell the nav agent that he is not stopped anymore pay attention what will happen so if i hit here the play button and the enemy will come close to me so he will come close now he will start attacking but if i try to run away you see he is not following me because he is stopped you see nothing is happening because we need to tell the nav agent his top now is false because again here we set it to be true and now we are telling him you are not stopped anymore you can move and he will start moving and then we simply set the enemy state to chase which again will make this right here true which we'll call the chase player function this will locate where the player is setting the destination to the player's position setting the speed to the nav agent and moving the nav agent animating him all of this stuff that we already explained and we are basically reusing these two functions one after another and here if we get again close to the player then we will say state is attack which will make this true and it will execute the attack player function and we explained everything what is happening in the player attack function so basically we are going from one function to another chasing the player then attacking if he runs away we chase him again and again with the word basically i don't know what's wrong with me so when he runs away we start chasing again when we get close we start attacking again so what is the next step to do because we are attacking but we are not dealing damage and we are not detecting that attack let's fix that so go back in unity and select the warrior here in the scene i'm gonna zoom in on him on him and click on the sword so this is our sword for the player and i am going to right click on the sword game object itself and create an empty game object this one is going to be the attack point and i'm going to tag this attack point with let's say this orange color so that i can move it and let's say somewhere around here i think it's okay so this is where it's going to be at one 0.0018 eight for the y axis just move him a little bit here and basically that is that so this is where the attack point is going to be for our warrior and of course for our enemies gonna be at the same exact place so let me just select the enemy here click on its sword and right click on the sword and create an empty this is going to be the attack point for the enemy and let me just copy this position so 0.001959 for the yaxis and bam and i can also tag it here with the red color so that we can see where it is so we see them both so we see the orange one and we see the red one for the player and for the enemy respectively what is the next thing to do the next thing to do is right click here inside of our scripts folder and create a new c sharp script and i'm going to call this one attack damage and of course as you can assume we are going to attach this on the attack point so select both of these attack points and go here and filter for the attack damage script and basically voila so now i'm gonna double click on the attack damage and here it is so what we're gonna do here is we're going to detect that collision what we need for that collision well we need here a public layer mask which i'm going to call layer we also need a public float radius which is going to be equal to by default one notice it's public we can edit this in the inspector panel we also need the public float damage to deal damage and that by default i'm going to set to be equal to 1 of course because it's public we can change the value in the inspector panel we don't need the start function for this one we only need the update and inside of the update we are going to say here collider array which i'm going to call hits is going to be equal to physics overlap sphere at the transform position using the radius using the layer that we have provided what the hell is going on you see this physics overlap sphere it is going to overlap a sphere at this position with this radius and this layer basically this is the following so if i go here come on what are you doing to me so here is the warrior i'm gonna zoom on the warrior we see where the point is so we see where the point is here it is this orange thing if i take the animation of the warrior and let's say attack zero and point or actually pay attention here i wanted to say pay attention at point actually attack two because attack two you see it's like this he he moves the hand behind him and then he attacks this overlap sphere will create a sphere at that position because we attached this on the attack point that sphere will be created on this position where the attack point is so it will be created like this think of it like this this is my highlight tool here so it will overlap a sphere at this position it will create a sphere like this it's a circle think of it as a circle it will create that circle at this position this is the radius of the circle you know circles have radius so the larger the radius the bigger the circle is and this layer right here means that the circle will search for collisions with game objects that are put on this layer right here now what the hell is this layer this layer is this one right here so if i go here and let me just clear the pencil this is the layer you see here at the hierarchy for every game object you have this layer all game objects are set on a default layer by default when you create them and that layer can be used for collision detections we can do things like this right here we can check here in the code if we are colliding with the game object that is on that layer we can even exclude collisions between layers with well the layer option so what we're gonna do is we're gonna select the warrior let me just pull this we're gonna select the warrior and we're gonna go under layer and we're gonna click on this add layer now this is a drop down list your click on when you click on the layer you have the default ones that are created automatically by unity but we need our own so i'm going to click here on add layer and here i'm going to create two new ones one is going to be the player another one is going to be the enemy so if i select the warrior and click here and we're going to select the player and you see this will pop up do you want to set the layer for all child game objects no only for the parent we don't want these children game objects we don't want the them to have the player layer because the warrior the player he is important so we're going to do the same thing for the enemy click here and select the enemy layer now know this object only hit apply here hit apply here now what is beautiful here is that we can because here in our code we are searching here for collision with the game object that is put on this layer right here you see on this layer right here so what we're gonna do is we are simply gonna select the attack point for the player and we're gonna search for the collision on the enemy layer because the player is attacking the enemy and i'm gonna hit apply to make that change apply to the prefab and here for the enemy i'm going to click on these fold or however these are called these arrows and select the attack point for the enemy and we're gonna search for collision on the player layer and click apply so that that change applies to the prefab because when we attack with the enemy we are attacking the player so we need to search for collisions with the player or for the player layer and here we're searching for collisions with the enemy layer now how can we know if we have collisions well simply simply here because this overlaps here returns an array of hits or array of colliders if we test here if our hits dot length is greater than zero that means we at least have one hit meaning we at least touched one game object so at least one game object is touched with this overlap sphere if the length of the array is greater than zero and here simply we're going to say print and i'm going to say touched the game object and basically we can test this out right now so if i go here in the console and clear everything so clear from the console if i go and try to attack even if the enemy attacks me now so pay attention in the console what will happen you see we are printing this too much you see it's printed like 300 times you see it here in the console we need to limit this so we need to limit this well how can we limit when we touch our game object we can simply see here game object set active is equal to false and this is how we can deactivate the attack point but this will create another issue because again we are dealing damage here remember here we are dealing damage here we are going to get the health script and gonna apply that damage and you saw it was called 300 times in a second so the reason for that is because the game object is active in the scene what will happen now is the following when i go here and when we attack pay attention so only once or actually it managed to attack me two times or actually no i attacked him once so yeah mine was also triggered and enemy was also triggered but now we are not detecting collision between each other anymore so we need a better solution but by now i hope that you get the point why we need to deactivate this game object the reason for that is if we leave it open if we leave it on or actually leave it active you saw that it is every time it touches or detects that collision it will execute the code and here we're gonna do this we're gonna say hits and the element that's it index zero dot get component and we're gonna get the health script component and we're gonna say here apply damage and we're gonna pass the damage for the float now we did not create this but we will create it and this is going to apply damage to our game objects and if we allow it to apply that damage 300 times as we saw a moment ago then we cannot play our game our players will die instantly so what we need to do is select these attack points and turn them off so turn one attack point off turn another attack point off and for our warrior so starting with the warrior what i'm gonna do is go here in the player attack input and right here right here below our character animation so below the character animation what i'm going to do is i'm going to create a public game object which is going to be the attack point and at the bottom here i'm going to say void activate underscore attack point and i'm gonna say here attack point set active is true to activate that attack point and below i'm gonna say void deactivate underscore attack point and simply here i'm gonna say attack point set active is equal to false or set it to false but one thing to note here is because we are deactivating here there is a chance that we will deactivate this game object before it's even deactivated here because notice what we're gonna do here we're gonna test if our attack point so attack point is active in hierarchy so if the attack point is active in the hierarchy then we will deactivate it the reason for that is because we're gonna go now and we're gonna take these two animations so we're gonna take the attack zero one and attack zero two or actually attack underscore zero so click it here here it is attack underscore zero and duplicate it and attack underscore one and duplicate it so i'm gonna take the attack that's going to be attack two and this one is going to be attack one so i'm going to name them attack one and attack two and go back in the animator and select this right here and change the motion or the animation clip from attack zero to attack one and for the attack to do the same thing except here we're gonna select attack two because you can assume why we already did this a moment ago we're gonna go in our animation tab right here and for the attack one so i'm gonna preview it so this is how it looks like and here i'm going to click on this animation event and i'm going to select to activate so activate the attack point and when it attacks so somewhere around here i'm going to click another animation event and i'm going to type here deactivate the attack point and for our attack two animation i'm gonna do the same thing for some so somewhere around here here this is where the attack will go or this is where the animation will get and i'm going to call here activate attack point and when it gets here i'm going to call another animation event and i'm going to say here deactivate attack point so you get my point so do you get what i why i'm doing this here because if we attack and we don't hit a player if we get a hit here for the player or for the enemy then we will deactivate the game object but if we attack and we don't get collisions here then when the animation finishes let me go here player attack input when the animation finishes then we will as you can see deactivate these attack points and we're gonna copy these two scripts and go inside of the enemy controller and here right below the enemy state i'm gonna say public game object attack point so declaring the attack point and going here at the bottom so right above the class declaration and calling these two functions and we don't have to do anything for the enemy because the enemy has the same animations we're using the same animator controller for the enemy and for the player so if we go here we have the attack as you can see it has the exact same effect what what is left for us to do is select the warrior and drag and drop his attack point here inside of the player attack input sorry i bugged there for a second so player attack input and for our enemy select the enemy and here for the enemy controller drag and drop the attack point in the attack point and hit apply so that these changes apply to the prefab and basically we are done we can now test things out and i will explain them again so let's go here in the console and see how things goes how things goes how things go notice now if i attack so i'm attacking the point is being activated but we are not hitting the enemy so now you see and the enemy attacked me but now you see why is this here necessary the reason for that is because you saw i attacked the enemy was not there we activated the attack point but we did not have any hit we didn't have any hit here so this will not be executed it will not hit this line of code so game objects active false will never be called meaning when we get to the animation frame where we call this then if the attack point is active this right here will test if it's active meaning we did not call set active or it's basically active if i select the ground and if i click here this is now not active you see when i click on this check box which is right here you see where the check box is right to the left side right to the left to the left side of the layer that's the check box and if we click on it now it's unchecked meaning the game object is not active if it's checked then the game object is active we can even see it in the scene and we are doing this exact thing in the code with this line of code set active is false will not make it active and it's not visible in the scene and true will make it visible and active in the scene so this right here tests if the game object is active if it is then turn it off because we tried to attack we activated it but we did not made any hit so yeah it's not active and now we can test it out so if i go here you see the enemy is attacking in and touch the game object and here i touched him again and now i touched him and now he will attack me and he touched me and now i touch him i know this sounds weird i touch him he touch me but hey don't don't think of anything anyways you get my point and you see how can we detect collision by using this right here now we can safely delete this because we see it is working we printed everything out so we see that we are detecting collision so we are detecting we can touch the player and we can touch the enemy so we can basically attack each other the next thing to do is create this health script that we commented here out so i'm gonna copy this name health script and go here in unity and go back in the project because we need to subtract the health value from our enemy when we attack with the player and vice versa so in the scripts folder right click here and create a new c sharp script name it help script and as you can assume we are going to attach it on the enemy and on the player so select both of them so select them click on add component and click here help or actually filter for the held script and voila here is the health script so we need to double click it and open it here in visual studio let me just tag the class here because inside of our health script we are going to subtract the health value which means that we're going to have here a public float health which by default we can say it's equal to 100 so when we start the game we are going to have 100 for the health now here i'm going to remove start and update and we're going to have here a public void apply damage which will take float damage as a parameter and simply what we're going to do is we are going to see here health so our health variable minus equals the damage that we are passing here as a parameter because we are going to subtract damage from the health now this minus equals is a shorthand for writing health is equal to health minus damage so instead of typing health is equal to health minus damage we can simply say minus equals and it is the same exact effect and here let me just tag it so apply damage and here we're going to test if our health is lower or equal to the value of zero meaning health dropped to zero here we're going to print or we're going to say here the character died so the character died and here in our attack damage now we can uncomment this line of code and you can see here the beauty so we have the damage here which is the parameter we set it to be public basically this one is the local variable and here we have the as you can see we're passing it as a parameter we set it to be public which means we can edit the value in the inspector panel so when we call apply damage we can say for example this value here to be 100 and it will subtract 100 from the current health value then it will test if the health value is less than or equal to zero if that's the case we will print that the character has died now in order to see this in action i'm going to go here in the console let me first clear the console that is and if i take the warrior since we are if you select here our warrior and the attack point you will notice that the damage is one if i set the damage to be 20 for example and go here select the enemy and you see here the health is currently 100 you can pay attention right here let me just clear my highlight tool here i'm going to select the enemy and now when i play the game you will pay attention to the health value of the enemies let's go and attack the enemy so here we are and attacking pay attention now it's 80 then 60 40 20 and one more bam you see the character died so the character died now this is not the effect that we want we don't want to print simply in the console the character died instead we want to do some things and in order to do those things we are going to create here a private float x that this is going to be the rotation which is going to be equal to negative 90 because what i'm going to do is let me explain first i'm going to take the warrior here and when one of the game objects dies what i'm gonna do is simply rotate him backwards so rotate him like this negative 90 degrees so he falls on the ground because we don't have a that animation if i go here in models so models and animation we don't have here the death animation so we cannot simulate that with an animation because this 3d model for some reason don't ask me why i don't know so i don't know why doesn't it have the death animation but usually you will have that animation and then you will play that that animation but here we're going to simulate that so we're going to see here private float x that private float that underscore smooth so smooth which is going to be equal to 0.9 f uh private float rotate underscore time which is going to be equal to 0.23 f uh private bool which is going to be equal to or name of it is going to be equal to player died so what do we need to do well now we're going to get back the update function so we're going to see here update and here what i'm going to say is if player died so if that is true so if our player has died we are going to do what we are going to call a function that we are going to call rotate after death now of course we did not create this function so let me just go here hit enter to give a little bit more space here come on what are you doing here and here so if player died if this becomes true and by the way by default a boolean value is equal to false so if we simply declare a boolean value like this so if we declare it we don't type it's equal to false or if it's equal to true then by default it will be equal to false that means this right here will not be true we need to set it to be true and here we have this rotate after that so simply here we're going to create this void rotate after death and simply here we're going to call our transform euler angles you see the rotation as euler angles in degrees you see this euler angles is vector 3 so we need to pass a vector 3. so this is going to be equal to new vector 3 and we have now values for x y and z for our x we're going to use mat f dot lerp from transform euler angles x towards the x that in time dot delta time multiply that with the that smooth for our y we're going to say transform euler angle is y and for z transform euler angles dot z so what is going on right here so what is this well basically we are going to learn and lerp means you see this math f lerp it linearly interpolates between a and b by t this is a in order to paint the picture this lerp will go from this point to this point in this timely manner so this is point a so this is right here point a and this right here this x that excuse me so let me just go here so this is point a this right here this is point a this x that is point b so here we have point b and t is time so the time interval which is this one right here time dot delta time multiplied with the that smooth that is t or time now again y times that delta time well because to smooth things out and you see here i'm using that smooth so we need to smooth things out again we will go from this value towards this value in this timely interval and the current value of the euler angle x which is the rotation x will be zero we're going to go towards the x that which is negative 90 and basically that's what we are doing and in order to activate this what we need to do is here we are going to create an i enumerator not enumerable in numerator and we're going to call this one player or actually we're going to call it a low allow rotate and here we're going to say player died is equal to true to allow the player to die basically it will activate this right here so it will go here in the if statement this will be true and it will activate the rotate after that function then we're going to say yield return new wait for seconds and that's going to be the rotate time which is 0.9 if we go back here this is the rotate item actually 0.23 so this is the rotate time and then simply here we are going to call our player diet is equal to false now we will see in a second why are we doing it like this so if i go here if health is less than or equal to zero then we are going to die so we are going to call here starco routine and we're going to call allow rotate co routine which will enable player that is equal to true which will make this true which will go inside of this function and it will rotate so it will go from the current x rotation to this the targeted which is the x depth rotation which is negative 90 in this time interval and we will leave the y and the z rotation intact if i go back now and what i'm gonna do is i'm gonna do that with the player or actually let's test it out on the enemy because we have the same script on the enemy first so if i go here i will need to attack the enemy five times so one two three four and notice now when i hit him five bam you see but basically nothing happened why is that well we need to also deal with some other things such as we need to deactivate these scripts if i select the warrior for the warrior we will need to deactivate his animator player moves on and so forth for the enemy we need to deactivate the nav agent we need to deactivate the enemy controller so we are going to start doing that with this variable so we are going to create here a public bool variable that we are going to call is player so call it is player like this and when we die so when we die here inside of this if statement so if health is less than or equal to zero the first thing that we need to do is we need to say here get component the animator so animator component and we need to say enabled is equal to false so that we can deactivate the animator so deactivate the animator now next we are going to test here if is player so if we have a player we are going to disable his script so we are going to see here get component player move and we're going to say enabled is equal to false we're also going to say get component player attack input and we're going to say enabled is equal to false we're going to do two more things but we will see that in a second else if it's not the player so if it's the enemy then we're going to say here get component and we're going to say enemy controller component enabled is equal to false and we also need to say here get component nav mesh agent like this and we need to say that enabled is equal to false but you see here we cannot do that because we need to go here and type using unity engine dot ai so that we are able to use nav mesh agent as a component and disable it so you see here we have is player and we have else which is not for the player and we are going to differentiate between the player and the enemy because they both carry this health script so what we need to do is go here in unity and select the warrior so the warrior we're going to select him and he is going to have this is player check box checked inside of the hell script i'm going to hit apply to make changes to the prefab so you see here that his player is checked but for the enemy his player will not be checked and i'm also going to hit apply for the enemy so that that change applies to the prefab so for the enemy is player is not going to be checked so let's test this out right now and see if it actually works so if i go here i will need to attack the enemy four or actually five times so one more time notice one more time after i hit the enemy bam you see now the enemy falls and pay attention you see his nav agent is not active his enemy controller is not active so we had to disable those scripts you see we had to disable these scripts in order for this to work because we are simulating the rotation we are simulating the that by simply rotating the character to fall down basically this is what we are doing so he is falling down and this is how we are simulating that but since we had the enemy controller script which was attached on the enemy we also had the nav agent which was also attached on the enemy they are interrupting this process right here so we had to disable them so we had to disable them right here so enabled is equal to false basically means this if i select the enemy and i disable his enemy controller script and i run the game you will see now that the enemy is standing over there it's not working because if you pay attention here on the enemy you see where his enemy controller script is you see the check box right here it is disabled meaning this script will not will not function if i enable it bam you see automatically starts running towards me because his script is also running and it is working now let me take here the enemy and what i'm gonna do is for the enemy attack point i'm going to set the damage to be equal to five to make this somewhat a fair battle and i'm also going to take the warrior and set his health to be equal to five so set the health of the player to be equal to five because we want to test this out i want to show you two issues that we have pay attention now when the enemy kills the player bam you see the camera went over here and notice the enemy is still attacking pay attention the enemy is attacking and the player or the camera is at the ground so we need to add two more lines of code here if he is player so if he is player we are going to disable the player move and the attack input and notice here we are disabling the animator for both the enemy and the player so we are disabling for both again the enemy and the player because we don't want their animator to play anymore but here if he is player and we checked the checkbox for the player so we saw how that goes so we check the checkbox if his player then we also need to do two more things we need to say here our camera so camera main dot transform set parent is now equal to null because pay attention here the camera and let me just fold all of these so fold this and this you see the camera is a child of our player so whatever the player does so if the player is being rotated let me select the warrior if i rotate the play you see the camera is following because the camera is a child of the player whatever the player does if he moves left the camera moves along with it if he moves right the camera moves along with him so if he rotates the camera will rotate because it's a child of the warrior game object so what we need to do is we need to set the parent of the camera null meaning the player is not the parent game object for the camera anymore and you also saw that the enemy was attacking so we need to disable the enemy script we need to make the enemy basically not attack the player and we are going to do that by calling here game object find the game object with the tag tags dot enemy tag so enemy underscore tag and we need to create this enemy tag in the tag so going here and here we're going to say public constant string enemy tag is equal to here enemy so we are going to get the enemy and we are going to see here dot get component and we are going to get our enemy controller component and we're going to say that enabled is now equal to false because we want to deactivate our enemy game object we can now test this out but we need to make sure two things first of all you need to make sure that the enemy is tagged with the enemy tag and that the camera main is also tagged so if i go back here select the enemy you see that the enemy is tagged with the enemy tag select the camera in player so this one right here see the camera in player and it's untagged so we need to select this main camera tag it is build by default so by default it is in unity so select the camera in player and put the main camera tag on it because as i said this camera main it's built in unity and if i hover over it will say the first enable camera tagged main camera so in order to do this or use this in our code we need to tag the camera with the main camera and if i test this out now because i have set the health of my player to 5 as soon as the enemy attacks me notice now i'm dead the enemy is standing still he is not attacking me because we disabled his enemy controller script as you can see he is playing his idol animation and i'm land or standing here dead or laying down dead and the camera pay attention the camera is now free if i select here it is you see camera in player is now free it's not under the player game object it's completely free it does not have a parent game object any more basically this is what we did so again here briefly we are testing here if health is less than or equal to zero this is clear when that happens we will disable the animator we want don't want to animate we will allow to rotate and we explain here what we are doing because we only want to rotate 90 degrees angles we are going to allow the rotation wait for the rotate time and disable or set the player that died is equal to false so that we don't so that we don't activate or don't do this anymore because if i remove this right here let me just go and test it out so if i go here and wait for our enemy to come closer come on unity run the program run notice now when the enemy hits me bam you see you see this is the reason why this is the reason why i am allowing and then not allowing so if i say here player died true then we will allow to rotate then we will not allow to rotate you saw the reason why because this right here will execute over and over and over and we don't want to allow it to glitch as you saw a moment uh go so what is the next thing to do the next thing to do is to display the health values to our user so if i go here in unity i'm going to create a ui canvas now i cannot go too much into ui i will cover that in some other video so it will be too much this video is already almost i don't know three hours anyways i'm gonna right click here and go under you and create a image so let's go here and create an image and this is our ui canvas and i'm going to name it to ui canvas and we're going to leave it at screen space overlay which means basically it will overlay the screen but i'm going to set this canvas scaler script to constant pixel size to screen with screen size or scale excuse me not screen with screen size scale with screen size reference resolution is going to be 1280 by 720 and i'm going to say here 0.5 to match width and height equally basically what i did here is that this canvas will take this reference resolution at like its main resolution and it will try to make these game objects apply or or resize according to this resolution as i said i will cover canvas and everything specific to the canvas in a separate vdo so now i'm going to right click on the canvas and create an empty game object and this empty game object is going to be our player health it's gonna be empty as i already said and we're going to set the width and the height 1280 by 720 and the first thing that we are going to do with this player help i'm going to right click here go under ui and create a text component and i'm going to rename it here to player text and there inside of the text we're going to type layer this is what's going to be displayed i'm also going to align the text at the center or actually we're going to align it left but center so left here center but on from the left side the font size is going to be 59 and i know that you currently don't see the text but you will see it in a moment the color is going to be white so click here on the color if you ever worked in photoshop or any other editing software in regards to images you will you will know these options or any text software so you know the alignment you know what is a font size you know what is a font style bold italic normal sun and so forth now for the width of our text i'm going to say 386 and for the height i'm going to say 81 i'm also going to set here the anchor at the top left corner basically this will make the center of the player the top left corner so this is the anchor it will make the center of our text top left corner the position x is going to be 214 and the position y is going to be negative 40. so this is for our player the next thing to do is create rbg which is our image i'm simply going to drag and drop it here under the player help so drag and drop the image and i'm going to rename it to bg set the anchor of it to top left corner and the width is going to be 228 the height is going to be 29 and i'm going to set here the position x at 130 and the position y is going to be negative 100 101. now i also need to duplicate this health so i'm going to duplicate it this bg and i'm going to rename it to player health display and for this one we need to go here in our project and ui and we have this health ui which is simply this image this white thing right here but what we need to do is we need to select it and in the inspector panel because if i try to drag and drop it right now here it's not gonna work and let me just clear here i can drag and drop it here for the image to represent to be represented by that image but it's not working now because the default value or the default texture type of this image is set to default you need to click here on this right here where it says texture type so you need to click on that and you need to select the sprite 2d and ui and hit apply at the bottom right corner so now we are able to use this health ui as an ui or actually drag and drop it here and simply create a health ui from it now again you don't see the difference but now i can click on the color and i can change the color to red which you can see but what's most what's more important i can click on this image type inside of the image script i can click on the image type and i can set it to be filled and i can change this from radial to horizontal and pay attention now when i move the slider left and right so you see i'm moving the slider left and right and we are filling up the so we are filling up the image with this red value we are filling it up you see and lowering this is going to be our health this is going to display the health so what i'm going to do is duplicate this player health and rename it to enemy health so here enemy health and i'm going to take the text and it is going to be enemy text and position is 214 but i'm going to set the anchor at the top right corner and the position is going to be negative 214 and the alignment is going to be on the right side and here we are going to say enemy like this for the bg we're going to do the same thing so x is 130 set the anchor at the top right corner and this one is going to be negative 130 and for our enemy display held so change it from player to enemy health display i'm going to set the anchor at the top right corner and set the x position to negative 130 but you see now we need to change the origin of the fill because it is filling from the right side we need to change it to the left and this is all or this happens in all of these options so right here so you see the fill right here i change it from left to right so select on this drop down let's change it from left to right so now when we fill you see it's going from this side or from the left to the right now what we need to do to make this happen is simply go here in our visual studio and in the health script right here we also need to type below using unity engine a i we need to type using ui so unity engine dot ui and right below our public bull is player we're going to create a private image which i'm going to name health ui and we made it private because we don't want it to be accessed in any other class so don't want it to be accessed in any other class but we also want to drag and drop so we want to drag and drop these health display values in appropriate slots so you see here we don't see them but since we made it private i'm simply going to see here serialize field and it will make them visible now in the inspector panel so you see now they will be visible in the inspector panel so for the warrior drag and drop the player health display and for our enemy health or actually for the enemy drag and drop the enemy health display so for the warrior we have the warrior or player held display for enemy we have the enemy held display and inside of here inside of our apply damage right here after we subtract from the health the damage value we are simply going to see here if our health ui so health ui is not equal to null so we have a reference we're going to say health ui.fill is equal to the health value but we need to divide that by 100 because if you go back here in unity you will see that when you select let's say for the player health display if you select it you will see that the fill amount goes from the value of zero up to one so it goes from zero to one it cannot go from zero to one hundred so from zero to one that's why we are dividing this by 100 because if the health current value is 100 and we subtract from it 20 that will be 80 80 divided by 100 it's eight so that's why we are actually not 8 but 0.8 excuse me so 80 if we divide 80 by 100 so 100 that's equal to 0.8 and it will fill that image amount so if we go back here in unity what i'm going to do is set the warrior health back to 100 and for the enemy health so select the enemy the help is also equal to 100 so what we need to do inside or actually now simply test it out so if i hit the play button let's go here and pay attention when the enemy attacks the player you see now pay attention to the player's health value it's decreasing and also when i attack the enemy you see i'm decreasing his health value decreasing even more and even more and even more and when i hit him one more time he dies and as you can see he is lying dead and basically this is how we are going to this is how we are going to display the health value now that we are displaying the health value let's shield ourselves from the enemy and in order to do that i'm going to go here in scripts and right click and go here csharp script and create a player shield script as you can assume this is only going to be attached on the player so select the player and drag and drop the player shield script on him hit apply so that that change applies to the prefab go here and double click player shield and this one is going to be a very simple script here we are going to have a private and that is going to be our health script so health script which i'm going to call health script and in the awake function we're going to get the reference it so awake here and we're simply going to say held script is equal to get component health not head off health script component and here we're going to have a public void activate shield which is going to take a bull shield active and what we need to do here first of all we need to go in the health script and we need to create here a public public bull and this one is going to be shield activated and it is public because i want to access it here because i want to see here healthscript.shield activated is equal to this value here shield active so it will be either true or false so that's why i want it to be public i don't want it to be private because if i set it to be private it will not be able to access it here you see is do it's inaccessible due to its protection level so we cannot access it because of its protection level so we need to make it public i but i don't want it to be visible in the inspector panel if i go here and select the warrior pay attention to the player health script i don't want this shield activated to be visible here so what can i do same as here serialize field for the private variable we can say open square bracket hide in inspector for a public variable and it will be hidden in the inspector panel now what we're gonna do with this shield activated is here on top of our apply damage you see i'm going to say if shield activated i'm simply going to say return now you're like but we cannot use return and avoid function yes we cannot use it to return a value but if we say here return this will break out of the function what do i mean by break out of the function imagine like this if this is true when we enter this apply damage function so this is the first thing that we're going to check if this is false then we will proceed down to execute the rest of the code so from here up to the bottom where we have the code inside of this function but if this is true if shield activated is true and we hit this return statement we will exit out of this function so it will go outside and we will not proceed below to execute all of the code that we have so we will not proceed to execute the code basically we will exit out of the function in order to see this in action i'm going to go here in our player attack input right here and right below our public game object attack point we're going to create a private player shield which i'm going to call shield in the awake function we're going to say shield is equal to get component and we are going to say here player shield component and simply here when we defend you see when we defend we are going to say shield dot activate shield is true and when we release the j key we are going to say here shield activate shield is now equal to false which will go inside of this script right here it will call this function and passing here true or false it will assign that value to the health script shield activated which is this value right here again so it's this value right here shield activated and if that is true it will return and break outside of the function and we can test it out if i go back in unity let me just clear the console this works only if you press the j key and hold it you can it does not work if you press and release it if you just press it and release it it will not work so you need to press and hold it pay attention now if i go here so if the enemy attacks me now pay attention to my health it's going to subtract again it's going to subtract and now i'm going to hold the shield pay attention to the health value pay above pay above pay attention above you see the player health value is not is not decreasing while i'm holding if i release now he is going to subtract value if i press and don't hold you see if i press and don't hold it's not going to work so you need to press and hold so press and hold for this to work because this is what we're doing in our attack input if we press the key down then we will defend if we release the key up then we will well release the key and then we will not defend so you need to press and hold for this to work and release then for it to well not defend itself any more so this is for our defense the last thing that is left for us to do is create our sound effects so let's go back in unity and i'm going to right click on our warrior and create an empty game object this is going to be our player sound like this and here we're going to click on add component and filter for the audio source component and voila but i'm also going to uncheck this play unawake checkbox so don't check this because it will play a sound any clip that we attach here on awake we don't want that i'm also going to do the same thing for the enemy right click on the enemy and create an empty game object and we're going to call this one enemy sound and here attach the audio source uncheck play on awake and go here in our project and in scripts and right click and see sharp script i'm going to call this one character sound fx select the enemy sound and the player sound so select them both click on add component and attach the character so character sound effects voila and we do need to hit apply for the enemy and for the warriors so for both of them so that that change applies to the prefab but now open so select the player sound or character effect sound script open it and what we are going to do here is we are going to get a reference to the private audio source so here on top private audio source which i'm going to call sound fx and we're going to do that in the awake function so awake sound fx is equal to get component audio source component we are also going to have here private audio clips so audio clip attack so attack underscore sound underscore one attack underscore sound underscore two and di sound simple like that now they are private but we don't want to allow them to be used in other scripts but we are going to make them serialize field because we are going to drag and drop them and here we are simply going to create a public void attack function underscore one so attack one and we are going to play the attack one sound so we're simply going to say sound fx dot audio clip or simply clip is equal to attack sound one and simply call sound effects dot play to play that sound effect it's simple like this programming is beautiful if you want to change a clip that's attached to the audio source dot clip so you say sound effects or the audio source dot clip is equal to the clip you want to attach sound effects or the audio source that play to play that sound and i'm going to duplicate this function and this here is going to be attack 2 and we're going to attach the attack to sound and here we're going to have our die sound so public void die and we are going to attach here the die sound and play the die sound it's simple as that now this character sound we are going to have in our health script we are going to have it in our player attack so let me just go here player attack help and enemy controller now what we need to do is we need to declare here uh private in the health script that is so private and we're going to see here character sound effects and we can call it sound effects so i can call it sound come on sound effects like this and inside of the awake function so void awake we are going to say here sound fx is equal to get component in children like this and we're going to say character sound effects now why get component in children because if we go back here you will notice that this player sound is a child of the game object we cannot say get component we use get component on the game object itself so if we for example we have the warrior game object if we want to get the character controller then we will say get component because it's attached on him but if we want to use this script character sound which is attached on the warrior then we need or actually excuse me attached on the player sound that which is a child of the warrior then we need to use get component in children and pay attention this only works if you have if you have only one script attached so if we have a duplicate if we have two player sounds it will work but it will get you one of these it will not get you both it will get you one of these so when you have one like here player sound it only has this character sound effects then you can use get component in children and it will get you that one component and since we are here i'm gonna go quickly in sounds and here we have arena so these are arena sounds unit and these are attack sounds you can preview them you can click on it and preview it here this is attack one or tag zero here we have this one and this one i'm going to attach these two so select the enemy sound and play your i'm gonna attack attach man attack one and man attack two for the sound attack one and two and for the die sound let's see this one yeah this one can do yeah the second one i mean you can play with these and you can take any one that you want so for our player sound i'm going to attach that to and for our enemy sound i'm going to attach i don't know that nine i'm not gonna even check it out so i'm gonna hit here apply and apply for this one as well i'm not even going to check it as i said because well we don't care we have the attack sound we have the dead sound so it's not important how they sound so let's go back here we have the sound effects and we're going to get it here and when we die so this is where we die in our health and if health is less than or equal to zero we are going to call sound effects die and this will work both for the player and both for the enemy so when they die they will display the die sound and before we test it out i'm gonna go also here in our player attack so right here i'm going to create private character sound effects and this is going to be sound effects and simply here sound effects is going to be equal to get component in children character sound effects and i'm going to copy this line of code because we're going to use it in our enemy controller and when we attack so this is where we are attacking so here i'm going to call sound effects dot attack 1 sound and here i'm going to say sound effects dot attack two sound simple as that it's very simple so when we attack with the one attack sound attack one when we attack with the second attack attack two and we're going to do the same thing here for our enemy so if i go here in our enemy right here at the top private character sound effect sound fx right here in the awake below our player target sound effects is equal to get component in children and get that component and when we attack here so let's go in the attack here it is attack and m1 so we are simply going to say sound effects attack one copy this and paste it below and attack you this does not require any explanation because it's selfexplanatory i've explained it right here so we are going to call the clip an attack and here simply set the clip to the clip that we want and play it set the clip to the clip that we want and play it and voila it's gonna do that for us and we are calling this when we attack so when we attack we will play attack one sound and attack two sound when we attack with the second attack this is what we are doing for the enemy and for the player as well now in order to spice this up we are basically done with our game so we are done and in order to spice this up what i'm gonna do is right click here and create an empty game object this is going to be our bg sound and i'm going to reset the position and attach two audio source components so audio source here and another audio source so two of them because i'm gonna go here inside of the sounds and arena and we have these arena sounds so you see and this one also so pay attention what i'm gonna do is select the bg sound and for the first one attach the arena one sound and for the second one arena underscore two sound and pay attention here play unawake if you don't check it so if it's not checked if i run the game we will not hear these sounds so if i run the game the sounds we don't hear them so make sure that you check these check boxes so i'm gonna check play on awake let me just find it play on awake and loop loop means when the sound effect finishes to play same like on your it's same like in your mp3 app so when you click loop it will repeat the song so check here play on awake and loop and notice here it's warning us that we have two audio listeners in our game now the reason for this is because we have one main camera that has an audio listener and we also have another camera that's attached on the player that has a listener so you see here camera here and camera here so i'm gonna take the main camera this one that's not active and remove the audio listener from it because this is the audio listener that will be getting that sound and make us hear the sound effect now also one thing that you have in this audio source is the volume so pay attention here have the volume one it's 100 so i'm gonna lower it for arena one i'm going to say 0.4 for example and for arena 2 i'm going to say i don't know point 25 maybe because i don't want that sound to be heard like we heard it a moment ago it's too loud for our game and practically congratulations this is our game we are finished we can test it out to hear the sound effects so i'm gonna shut up so you see here and let me just check here again we have two listeners so let me just find where they are so we have ui where are these two listeners so we have the main camera we have here camera in player audio listener and event system i don't know where the second listener is it will not hurt our game if you find and just remove it let me just remove it from here so select the camera in player and remove it so let's see if we can hear it now i literally don't know where the second audio listener is but if you find it just remove it i don't care it's not important it will not hurt our game and we can play our game so hear the sound effects and also pay attention to the player's sound death and also for the enemy and their attack sound so pay attention now here i don't think it's i don't think we can hear it because of these sounds so bg sound i don't know this one is going to be at 0.2 and this one is going to be at 0.1 so like this so the volume for this one actually i set the pitch here so pitch is at one volume needs to be at point four excuse me for this one and for this one 0.25 so it can work now i forgot i said the pitch not the volume so yeah set the volume to 0.4 and 0.25 for the second one so that we can hear it so pay attention now yeah now we can hear it a little bit something like this yeah 0.1 or 0.2 for the volume here and for this one is going to be 0.1 finally i decided which volume i want so hit the play button let's test it out finally so you hear it listen to the attack sounds again and again so now when i hit him he will die and you heard the die sound effect and we can also test for the player to see if the player can die so i'm gonna set the health value to five and we will die instantly just so that we can test that the die works for the player as well so pay attention now voila so the die also works for the player he is dead the enemy will be standing still because he well we talked about it we deactivated scripts so on and so forth now congratulations this is a big project even though it's not that big when you look at it visually we don't have 20 players fighting with each other but we learned combat we learned melee battle system we learn how to deal damage how to subtract health and all of the good stuff that you don't see in any other tutorial online basically you cannot find this anywhere else on youtube so yeah thank you awesome dudes and you're welcome anyways if you want more awesome tutorials go on awesometubes.com subscribe there more actually awesomeness.com go on youtube awesometubes and subscribe on my channel and you will have more cool tutorials like these until then fa here here and by the way you can download this complete project so this complete project and all the assets link is in the description below until next time fi here here from awesometubes.com i will see you guys in another video
