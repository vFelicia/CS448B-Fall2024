With timestamps:

00:00 - jenkins is an open source automation
00:02 - server which makes it easier to build
00:04 - test and deploy software
00:06 - in this course you'll learn how to build
00:08 - a full devops pipeline using jenkins
00:10 - lenode servers and other tools
00:13 - gwen faraday is your teacher for this
00:14 - course gwen is an experienced software
00:17 - developer and she has created a bunch of
00:19 - popular courses on both her own channel
00:22 - and the free codecamp channel jenkins
00:24 - can help developers automate their
00:25 - software development process and improve
00:28 - their productivity it can also help
00:30 - users obtain a fresh build of their
00:32 - software project more easily
00:34 - jenkins is an important tool for
00:37 - creating a devops pipeline
00:39 - a devops pipeline is a set of processes
00:42 - and tools that enable the continuous
00:44 - delivery of software applications the
00:47 - term devops is a combination of the
00:49 - words development and operations
00:52 - devops pipelines are used to automate
00:54 - the build test and deploy phases of the
00:57 - software development lifecycle the goal
01:00 - of a devops pipeline is to make the
01:02 - software development process more
01:04 - efficient and effective
01:06 - devops pipelines help to automate the
01:08 - tedious and manual tasks that are often
01:11 - involved in software development
01:13 - this automation can help to speed up the
01:16 - software development process and make it
01:18 - more reliable
01:19 - jenkins is a flexible tool that can be
01:22 - used to create custom devops pipelines
01:25 - and that's what you're going to learn
01:26 - about in this course
01:28 - so at the end consider leaving a comment
01:31 - with something you learn in this course
01:34 - hi everyone my name is gwen and in this
01:37 - course on free code camp i'm going to be
01:40 - building a full devops pipeline
01:42 - using tools like jenkins lenode servers
01:46 - for hosting our application as well as
01:49 - our jenkins server we'll be using github
01:52 - as our code repository
01:54 - docker and docker hub and some related
01:57 - tools now to follow along with this
01:59 - tutorial you can see the app that i will
02:02 - be using for deployments
02:04 - on my faraday academy github
02:06 - organization it's called the curriculum
02:09 - app if you followed my youtube channel
02:11 - you might have seen that i actually
02:13 - built this application in maybe 50 or so
02:16 - live streams a few years ago
02:18 - there is also a readme here on github
02:21 - where i have each step in the process
02:23 - listed out as well as links and relevant
02:26 - resources
02:28 - and this architecture diagram of how
02:31 - everything fits together in the process
02:40 - jenkins is a tool used for automation
02:44 - with continuous integration and
02:46 - continuous deployment pipelines
02:49 - the project started in 2004 so it's been
02:53 - around for almost 20 years and it's
02:55 - completely open source
02:58 - right now
02:59 - it claims that it's the most commonly
03:01 - used automation server in software
03:04 - development
03:05 - so why would you want to use jenkins as
03:08 - an app developer
03:09 - it allows you to automatically watch for
03:11 - certain events in your repository
03:14 - and react to those events you can do
03:17 - things like
03:18 - build your code run scripts perform
03:21 - testing
03:22 - and then deploy your app if everything
03:25 - passes
03:26 - or reject the deployment if the test
03:29 - fails
03:30 - either way you will be able to see logs
03:34 - of every step throughout the jenkins
03:36 - pipeline and the results of the
03:37 - deployment
03:40 - jenkins can ensure that all of your
03:41 - tests are run in the same environment or
03:44 - as many environments as you want for
03:47 - consistency
03:49 - another benefit
03:50 - is that jenkins has a very large
03:53 - community that is amassed over almost
03:56 - the last 20 years
03:58 - so there are lots of tutorials and
04:02 - community questions and answers that you
04:04 - can find
04:06 - another feature of jenkins is its
04:07 - plug-in architecture to use jenkins
04:10 - effectively you will want to install the
04:13 - plugins that make sense for your project
04:17 - these plugins can include options for
04:20 - compiling or testing
04:22 - they have a docker plug-in which we will
04:25 - be using as well as a git plug-in that
04:27 - allows us to watch our github repository
04:30 - and react to changes
04:33 - jenkins is self-hosted by default you
04:36 - don't need to pay for an enterprise tier
04:39 - this gives you a lot of options for
04:41 - configuration
04:43 - it's also a tool that has been proven to
04:46 - scale since it's used by so many large
04:48 - companies around the world
04:50 - it's not just large companies that use
04:52 - jenkins however many small or mid-sized
04:55 - companies use this tool as well
04:58 - why do companies use it many of them say
05:01 - that it improves their software delivery
05:03 - cycles by making them faster and more
05:05 - performant
05:07 - what are some of the benefits of using
05:09 - jenkins versus other alternatives
05:12 - there are plenty of new tools in the
05:15 - cicd pipeline space
05:18 - you could choose travis ci or circleci
05:21 - there's also github actions
05:23 - there's get lab ci and many more
05:27 - some of the differences are that jenkins
05:30 - is open source many of the other options
05:32 - are not
05:33 - a big one is that you can self-host
05:35 - without paying for an enterprise plan
05:38 - and you have total control over
05:40 - configuration
05:42 - one thing that might be helpful if
05:44 - you're considering jenkins
05:46 - as an option and comparing it to other
05:48 - alternatives
05:49 - is their jenkins youtube channel
05:52 - they have a lot of information about
05:54 - jenkins
05:56 - and they also have this playlist
05:59 - of real users of jenkins real companies
06:02 - talking about why they chose jenkins
06:05 - and what benefits they see from using it
06:08 - we talked about some of the benefits now
06:10 - let's talk about some of the cons or
06:13 - potential drawbacks of using jenkins
06:16 - so plugins i listed in the pros column
06:18 - because there are hundreds of plugins
06:21 - covering all different kinds of use
06:23 - cases and you can usually find a plugin
06:26 - for what you need in jenkins
06:28 - you also have the option to
06:30 - create one yourself
06:32 - that can also be a drawback though since
06:34 - you are relying on community supported
06:37 - plugins that might not be updated
06:41 - or documented well there can also be
06:44 - some confusing overlap between plugins
06:47 - since anyone can create their own
06:49 - jenkins plugin
06:51 - a common complaint of jenkins is the
06:54 - outdated ui
06:56 - more modern tools have interfaces that
06:58 - are a little bit easier to use than the
07:01 - standard jenkins interface
07:03 - now jenkins does have a newer interface
07:06 - that you can install as a plug-in and
07:08 - use for a lot of things but not
07:10 - everything and that is the blue ocean
07:13 - plug-in
07:15 - we're going to demo that in this
07:16 - tutorial as well
07:19 - another potential drawback
07:21 - is that since it's been around for so
07:23 - long
07:24 - and it's community supported sometimes
07:27 - the documentation or answers that you
07:31 - find can be out of date
07:33 - this is not an uncommon problem for
07:36 - software tools in general
07:39 - overall i think jenkins has pretty good
07:41 - documentation but it is something to be
07:44 - aware of
07:45 - checking and making sure that the
07:47 - documentation you are reading is up to
07:50 - date with the version of jenkins that
07:52 - you are using
07:54 - another huge consideration to keep in
07:57 - mind when choosing jenkins is that it's
08:00 - completely self-hosted and maintained
08:04 - unless you are using a third-party
08:06 - solution to manage your jenkins server
08:09 - you will be the one installing jenkins
08:11 - keeping it up to date
08:13 - managing the controller and agents and
08:15 - all the different aspects of the jenkins
08:17 - pipeline
08:19 - and also ensuring security
08:22 - which can be tricky sometimes using a
08:24 - tool like jenkins where you need to
08:27 - install so many different plugins to use
08:30 - it
08:31 - before we really dive in here i want to
08:34 - make sure we're all on the same page by
08:36 - defining some terms that i'll be using
08:39 - in this tutorial
08:40 - and common terms that you will see
08:43 - when you are using jenkins as well
08:50 - let's go over some of the terms that we
08:52 - will be using in this tutorial just to
08:55 - make sure everyone is on the same page
08:58 - first we use the terms continuous
09:01 - integration and continuous delivery
09:04 - commonly abbreviated as cicd
09:07 - favorite definition for continuous
09:10 - integration actually comes from
09:11 - atlassian
09:13 - it says continuous integration is the
09:15 - practice of automating the integration
09:18 - of coding changes from multiple
09:20 - contributors into a single software
09:22 - project
09:24 - developers can frequently merge code
09:27 - changes into a central repository where
09:30 - it builds and then the tests run
09:34 - continuous integration is a precursor
09:36 - for continuous delivery
09:39 - continuous delivery is responsible for
09:42 - packaging the app
09:43 - and getting it ready to deploy using
09:46 - automated build tools
09:48 - this whole process is known as a
09:51 - pipeline a pipeline is basically a
09:53 - well-defined set of steps
09:56 - that build test and deploy applications
09:59 - automatically
10:01 - it basically takes you through the
10:03 - continuous integration and continuous
10:05 - delivery processes
10:08 - you will see that we also have a build
10:11 - step in our pipeline that we are going
10:13 - to be using
10:15 - if you are new to development or have
10:18 - only used something like javascript
10:21 - maybe you aren't familiar with a build
10:23 - step but generally the build step will
10:26 - spin up an environment
10:28 - compile code and create an executable if
10:31 - that's necessary
10:33 - when we talk about testing code
10:35 - that is a step of the pipeline that will
10:38 - run any unit end-to-end integration or
10:41 - whatever other tests that are needed for
10:44 - the application
10:45 - to make sure that it's ready to deploy
10:48 - into production if the tests pass
10:52 - there are two other terms that are
10:54 - jenkins specific here
10:57 - the first is controller
10:59 - and that's our main instance of jenkins
11:02 - that is running
11:04 - the jenkins controller is responsible
11:06 - for
11:07 - configuration key management
11:10 - plugins and it's a centralized hub to
11:14 - manage all of the agents connecting to
11:16 - it
11:18 - agents are usually containerized
11:20 - environments that will run your pipeline
11:23 - steps
11:24 - these steps are also called a job
11:27 - which means
11:29 - some work that needs to be done the
11:31 - jenkins controller is responsible for
11:35 - assigning it to an agent
11:37 - and then the agent will either spin up
11:40 - and run all the steps of that job
11:43 - through to failure or deployment
11:46 - you can also set the agent to
11:48 - just stay running
11:50 - all the time instead of spinning up for
11:53 - each job that you want to run
12:01 - this is a simple diagram of the
12:04 - architecture
12:05 - for this tutorial so you can visualize
12:08 - what we're going to be doing
12:10 - to the left we have the app development
12:13 - side
12:14 - this is a full stack javascript
12:17 - application used for the demo
12:19 - and code is committed directly to a mono
12:22 - repo in github
12:24 - on the other side we have a lenode
12:27 - account
12:28 - and two servers running in lenode these
12:31 - are called lynodes
12:33 - in that interface
12:34 - one of them is running jenkins
12:37 - also known as the jenkins controller
12:40 - and the other server is using docker to
12:44 - run our application
12:46 - the jenkins controller will be
12:48 - configured to watch the github repo and
12:52 - when it pulls and sees changes it will
12:55 - initiate the cicd process in one of the
12:59 - agents
13:00 - the agents will run all of the steps in
13:02 - the pipeline
13:03 - to check out the code from the branch we
13:06 - designate in github
13:08 - run tests and deploy
13:11 - if everything was successful
13:13 - if the pipeline fails for any reason it
13:16 - will immediately stop and of course not
13:19 - deploy the application
13:21 - and either way we can see the build
13:23 - results and the logs in the main jenkins
13:26 - controller
13:32 - the first step is to sign up for a
13:34 - lenode account
13:36 - if you are a first-time user of lenode
13:40 - when you sign up for an account they
13:42 - will give you a 50 credit
13:44 - that is good for the first 60 days for
13:47 - you to try out
13:48 - that will be more than enough to follow
13:50 - along with everything that we are doing
13:53 - in this tutorial
13:54 - you can sign up for your account with
13:56 - whatever service provider you want or
13:59 - using your email
14:00 - i already have an account so i'm going
14:02 - to skip to the dashboard view
14:05 - you can see i have some servers already
14:08 - running here that i used for testing
14:11 - in this left-hand menu you can see the
14:13 - services that lenode has to offer from
14:16 - lenodes
14:17 - which are servers that you can spin up
14:20 - volumes for storage
14:22 - other things like firewalls
14:25 - if you want to connect your domains
14:28 - they also have an object storage
14:30 - solution
14:32 - for things like images or static
14:34 - resources
14:35 - similar to using aws s3
14:39 - and a marketplace
14:41 - that gives you one-click installs for a
14:44 - lot of popular solutions
14:46 - we are going to be using a couple apps
14:49 - from this marketplace in the tutorial
14:51 - today
14:52 - you can see i clicked marketplace and it
14:54 - went ahead and took me through
14:57 - to create a new node
14:59 - select a marketplace and shows me all of
15:02 - the options here
15:04 - the first server that i am going to
15:06 - create
15:07 - is one that's already set up with
15:09 - jenkins
15:11 - if you were installing jenkins yourself
15:13 - you would have a couple options
15:15 - to install directly or use their
15:18 - official docker container
15:20 - the lenode marketplace option here just
15:22 - installs it directly on the server that
15:24 - we're going to spin up
15:26 - i'm going to scroll down
15:28 - to more options it gives me the option
15:32 - for the linux distro now depending on
15:35 - what option you choose here
15:37 - in the marketplace which one of these
15:39 - you choose
15:41 - you're going to see different options
15:42 - available down here
15:44 - for the jenkins container these are the
15:46 - ones i have to select
15:50 - i'm going to see what's available right
15:51 - now it's only debian 10 that's available
15:54 - for this jenkins server
15:56 - and now i need to select a region
15:59 - i'm just going to select the region
16:01 - closest to me
16:03 - in new jersey usa
16:05 - and then i need to select what kind of
16:08 - server
16:09 - by default it'll show you all of the
16:11 - options with dedicated cpus
16:14 - how many cpus how much ram
16:17 - and these are a little bit more
16:19 - expensive for this tutorial i'm just
16:21 - going to use the cheapest one the nano
16:24 - one gigabyte
16:25 - which if you look at the jenkins
16:27 - documentation is more than enough to
16:30 - run jenkins
16:32 - so i'm going to choose this
16:36 - scroll down
16:37 - this is the name
16:39 - this lenode label is the name
16:42 - that you saw in that first table view
16:45 - so i'm going to give it the name
16:49 - free code
16:51 - camp
16:52 - jenkins
16:54 - you can optionally add tags here
16:57 - about the type of servers the
16:59 - technologies
17:00 - or something else you want to
17:02 - differentiate between the nodes that you
17:05 - spin up
17:06 - i'm just going to leave it blank
17:08 - and now i can choose a root password
17:11 - this password that i enter here
17:14 - is something i can use when i ssh into
17:17 - the server
17:18 - i can also add an ssh key and ssh with
17:22 - the key
17:24 - i'm just going to generate
17:26 - a root password here
17:28 - so i'm going to use my password manager
17:30 - which is bit warden
17:32 - i'm going to come down to generator
17:35 - it generated this unique password it's
17:37 - 30 characters i'll be deleting this
17:40 - server after the tutorial so
17:44 - don't need anything crazy let me do 10
17:46 - characters
17:47 - copy
17:50 - and
17:50 - paste
17:52 - i'm not going to add an ssh key for this
17:54 - i'll just use the password
17:56 - i do want to be sure i saved the
17:58 - password though so what i like to do is
18:01 - come in here
18:02 - i'm gonna add
18:04 - this username and password let me paste
18:06 - in the password
18:08 - and then i called the lenode free
18:10 - codecamp jenkins so i'll just put that
18:12 - in the username
18:18 - save it and then i have the password
18:21 - stored
18:22 - so i can copy it later when i go to ssh
18:25 - i don't need any of these options
18:28 - i can go ahead and hit create
18:32 - it will take a minute it says
18:33 - provisioning
18:36 - while that's going i'm going to create a
18:38 - second linode
18:40 - now for the second one i could just
18:43 - create a custom one
18:45 - but i'm going to go ahead and use their
18:46 - marketplace again
18:49 - and create one with docker already
18:51 - installed and set up so i'm going to use
18:53 - their
18:54 - docker lenode from the marketplace
18:57 - i clicked on that
18:59 - and scroll down for the options
19:02 - so now you can see i have special
19:03 - options for the docker server
19:06 - for this i'm going to leave these
19:08 - options blank
19:10 - instead of using an ssh key again i'm
19:12 - just going to use a password
19:16 - and i'll select
19:18 - the latest debian 11
19:22 - region again i'll do newark new jersey
19:26 - shared cpu nano
19:29 - and
19:30 - this is the server where i'm going to
19:33 - host and run my application
19:35 - so i'm going to say free code camp
19:39 - application for the root password i'm
19:42 - gonna do the same thing
19:43 - generate a password
19:46 - copy
19:48 - enter
19:49 - and then i'll go ahead and
19:53 - add that password
20:04 - create
20:06 - that's provisioning if i go back to my
20:08 - list
20:11 - my free codecamp jenkins is up and
20:13 - running
20:14 - and this one should be done in a minute
20:22 - now let's check out our running instance
20:24 - of jenkins
20:26 - you can go into the jenkins server i
20:28 - just spun up
20:30 - and i can actually access the running
20:32 - instance of jenkins at this ip address
20:35 - i'm going to go ahead and do that
20:37 - it should be at port 8080
20:40 - and usually when you would pull this up
20:43 - you would see a login screen but because
20:46 - this is our first time it's prompting us
20:48 - to enter a password
20:50 - now this password we will have to get
20:53 - from this file when we ssh into our
20:57 - server
20:58 - i'm going to go ahead and do that
21:01 - copy this
21:03 - ssh
21:05 - now i can ssh into the node
21:10 - and it's asking for my password
21:12 - since i didn't set up a key for this
21:15 - instance
21:16 - so i'm going to go ahead and use
21:17 - password authentication
21:20 - and i did save it in my password manager
21:23 - so i'll go ahead and copy the password
21:28 - i'll enter in here
21:30 - and now i'm inside the server
21:33 - so let me go back to jenkins and it said
21:37 - to copy the password from this file
21:40 - let me take a look at that
21:46 - i'm going to cat that file
21:49 - and that prints out the contents so now
21:52 - i can
21:53 - copy this password
21:56 - now if i go back to the browser
21:59 - and i can just paste that password here
22:01 - click continue
22:05 - and since i'm just setting it up for the
22:07 - first time it's asking what plugins i
22:09 - want to start with
22:11 - you can either do this manually or if
22:14 - you're just getting started with jenkins
22:16 - it's probably best to install the
22:17 - suggested plugins you can always add or
22:20 - remove plugins later
22:22 - but as you're using jenkins you'll
22:24 - realize that a lot of plugins depend on
22:27 - other plugins
22:29 - and these suggested plugins just give
22:31 - you a good base to start with
22:34 - so i'm going to click on that
22:38 - it's installing
22:42 - this takes a few minutes
22:44 - now i can create the first admin user
22:48 - i'm going to call this
22:50 - jenkins
22:52 - fcc and now i need a password
22:55 - i'll go ahead and generate this password
22:59 - just a short simple password
23:02 - copy it
23:12 - i'm going to just use a dummy email
23:14 - address here
23:17 - jenkins fcc at
23:22 - this is just a public email address
23:24 - provider
23:26 - and before i go i'm actually going to
23:29 - save
23:30 - this user
23:33 - the username
23:39 - there we go
23:44 - so i'm going to click save and continue
23:48 - i don't have a domain or another
23:50 - configuration so i'll leave this how it
23:52 - is right now
23:53 - i can always access it via this ip at
23:56 - port 8080 so i'm going to save and
23:58 - finish
24:01 - and now jenkins is ready to start using
24:04 - next let's do a quick tour of the
24:07 - jenkins interface
24:15 - to start you can see they have this top
24:17 - navigation
24:18 - and then also this sidebar to the left
24:22 - i'm going to start off with the top
24:24 - since it's a lot simpler
24:26 - so first i have this jenkins fcc that's
24:30 - my username
24:31 - so this is just a quick link to my user
24:34 - profile
24:36 - and go back
24:38 - and i also can see any notifications or
24:41 - warnings or error messages
24:43 - linked here
24:45 - because i clicked on it it took me to my
24:47 - settings page
24:48 - i'm going to go back for now and come
24:51 - back here in a minute
24:52 - go back to dashboard
24:55 - and starting from the top
24:57 - if i click on new item you can see this
25:01 - is a quick link to create
25:03 - a freestyle project or a pipeline so if
25:06 - i want to create jobs i can come here
25:08 - and do that
25:09 - i'll come back here to do that in a
25:11 - minute
25:13 - notice whenever i go into
25:15 - one of these navigation items
25:18 - you can see i get breadcrumbs here
25:20 - where i can navigate back up
25:23 - this people navigation item just lets me
25:27 - manage any users that have access to
25:29 - this jenkins
25:30 - right now i just have the one admin user
25:34 - but really you might have devops and
25:36 - developers and other people
25:38 - with different levels of access to this
25:40 - interface
25:42 - and you can actually give quite
25:44 - fine-grained permissions on
25:46 - what they can or cannot do
25:51 - build history
25:52 - will display information and feedback of
25:55 - the jobs that we run
25:58 - we'll be coming back to that later as
25:59 - well
26:00 - i'm going to skip down to views now
26:04 - you can see there's nothing in
26:06 - this views page yet
26:09 - this is basically a dashboard view of
26:12 - all of your jobs
26:13 - and you can also use this new view link
26:16 - to create
26:17 - kind of custom dashboards for
26:20 - viewing different kinds of jobs or maybe
26:23 - for different users to see different
26:25 - information
26:27 - so i'm going to go back to dashboard
26:30 - now i save manage jenkins for last
26:33 - because this is where all of the
26:34 - configuration and
26:36 - plugins key management
26:39 - this is the page we will be spending
26:41 - most of our time on initially
26:43 - to set everything up so that we can
26:46 - create pipelines and run jobs
26:49 - first at the top
26:50 - you can see that it will let you know
26:53 - when there is a new version of jenkins
26:55 - available
26:57 - actually this is a little bit out of
26:59 - date or the version that i have in this
27:03 - lenode is out of date anyway
27:05 - so it's letting me know
27:08 - and you can see if i scroll down at the
27:10 - bottom here it says the current version
27:13 - that i have
27:15 - which i believe is like maybe 25 minor
27:18 - versions out of date so
27:20 - i do need to go into my server and
27:22 - update that
27:24 - if i want to see information about my
27:26 - current version of jenkins
27:28 - there is an about jenkins section
27:31 - in this manage jenkins dashboard which
27:34 - will take me to a page that also shows
27:36 - my version and information about
27:38 - the version of jenkins that i'm using
27:41 - i'm going to go back
27:44 - now some of the main settings here
27:46 - are your settings to
27:49 - globally
27:50 - configure different things about jenkins
27:52 - and also paths this configuration page
27:55 - will let you manage a lot of the core
27:58 - settings and features of jenkins as well
28:01 - as give you
28:03 - setting options
28:05 - for some of the plugins that you install
28:09 - i'm not going to touch any of these
28:11 - things right now
28:13 - i'm just going to leave them as the
28:15 - default
28:16 - go back to manage jenkins
28:19 - manage plugins
28:21 - this is where we can
28:23 - search for
28:24 - install or
28:26 - update plugins or even remove plugins
28:29 - that we don't need
28:31 - we can do all that from here i'll come
28:32 - back here in a minute because we will be
28:34 - installing a few more plugins
28:37 - i'll go back
28:39 - managing nodes
28:41 - see we have the default node which is
28:44 - the controller
28:45 - now to start i will be running some jobs
28:48 - on this default built-in node
28:51 - which is good for trying things out and
28:53 - getting started but it is recommended
28:55 - that you create nodes just for running
28:59 - jobs
29:00 - and then use this default built-in as
29:03 - the controller
29:04 - without running jobs on this node itself
29:07 - we'll come back to
29:10 - that the other important area that i'm
29:13 - going to point out
29:15 - is this manage credentials
29:18 - when you create other nodes that are
29:20 - going to be able to run jobs
29:22 - you will need to add credentials here to
29:25 - give those nodes permission to
29:28 - access whatever resources they need to
29:31 - and for the controller to communicate
29:33 - with the nodes
29:37 - this is a very simple overview
29:40 - of the jenkins interface
29:43 - next i'm going to add a few plugins and
29:45 - then there's going to be another
29:47 - part of
29:48 - the interface called blue ocean to
29:51 - demonstrate
29:53 - i want to point out here that
29:55 - jenkins
29:56 - has kind of a dated look and feel
29:59 - but it is completely
30:01 - customizable
30:03 - you can use a theme plugin
30:06 - use a theme
30:07 - built by somebody else or create your
30:10 - own
30:10 - css and javascript
30:13 - to make this look and feel however you
30:15 - want
30:17 - i'm not going to be installing a theme
30:20 - but i will be installing kind of a new
30:23 - ui
30:24 - section
30:25 - of this jenkins interface to manage
30:27 - pipelines which is called like i
30:29 - mentioned blue ocean
30:37 - now i'm in the plugin manager
30:39 - and you can see the tabs here
30:42 - updates are for the plugins that
30:45 - i already have and have available
30:47 - updates
30:48 - so i could come and select plugins i
30:51 - want to update
30:52 - and click download now and it will
30:55 - install the update after i restart
30:57 - jenkins
30:58 - which as i'm downloading it does give me
31:00 - the option if i want to go ahead and
31:02 - restart jenkins
31:04 - i'm going to deselect these
31:08 - available is just a list of plugins
31:11 - that i can check off and install as well
31:16 - i'm going to come back to this i can see
31:18 - the plugins that i already have
31:20 - in this installed tab
31:23 - and advanced is some options that i'm
31:25 - not going to look at right now
31:28 - so let me go back to available
31:30 - actually i'm going to go ahead and
31:32 - filter here
31:34 - and first i'm going to look for
31:36 - blue ocean
31:38 - you can see there are several
31:40 - plugins here
31:42 - i'm going to go ahead and install the
31:43 - main blue ocean plugin
31:46 - i'm going to say download now and
31:48 - install after restart
31:53 - it is in the process of downloading and
31:55 - installing
31:57 - you can see and i'm going to check this
31:59 - box at the bottom if you can see it says
32:01 - restart jenkins
32:02 - when
32:04 - installation is complete so now it says
32:06 - jenkins is going to shut down
32:09 - it will just take a minute for jenkins
32:11 - to restart now
32:17 - you can see that this restarting jenkins
32:19 - is running
32:25 - now that it's finished
32:27 - i can log back in
32:31 - so i'm going to go back to the plugin
32:33 - section and manage jenkins manage
32:35 - plugins
32:37 - and i'm going to go to available
32:41 - and this time i'll filter by docker
32:46 - so
32:47 - this first option
32:49 - is the main docker plug-in
32:51 - and there is a second one
32:54 - for docker compose
32:57 - i'm going to do the same thing
32:59 - and download now and install after
33:01 - restart
33:06 - you can see that
33:07 - some of the plugins have dependencies of
33:10 - other plugins like i just
33:13 - the only ones i selected were actually
33:14 - this docker one and the docker compose
33:16 - one
33:17 - but because they have dependencies of
33:19 - docker api and docker commons
33:22 - jenkins is also installing those plugins
33:25 - so it will install the plugin you select
33:27 - as well as any dependent plugins
33:30 - if they aren't installed already
33:34 - this is going to take a few minutes to
33:36 - install these
33:43 - now that we installed those plugins
33:45 - you will see some additional options in
33:48 - some of the settings pages in jenkins
33:51 - and you can also see this new sidebar
33:54 - item saying open blue ocean
33:57 - let me click on that
34:01 - you can see this is a completely
34:02 - different interface
34:04 - because it's a modern ui
34:06 - for pipeline management in jenkins
34:11 - it's still linked to the old interface
34:15 - so if you click on some links here like
34:18 - administration you can see it takes you
34:20 - back to the old interface
34:22 - because blue ocean doesn't have a
34:24 - managed jenkins section
34:27 - let me go back to blue ocean you can
34:29 - also
34:30 - click this kind of exit icon
34:34 - and that takes you back to the regular
34:36 - jenkins dashboard
34:40 - normally you would see a list of the
34:42 - pipelines you create here
34:44 - but since there are no pipelines it
34:45 - gives us this box prompting us to create
34:48 - a new pipeline
34:50 - so that's what we're going to do next
34:58 - let me start by creating a new pipeline
35:01 - it's asking where my repository is
35:04 - hosted
35:05 - which is github
35:07 - and in order to connect to my repository
35:10 - and be able to run jobs
35:12 - i need to
35:13 - [Music]
35:15 - use my github access token so i need to
35:18 - create one
35:20 - this warning in red here is just because
35:22 - i had previously created an access token
35:25 - you probably will not see this
35:28 - i'm going to come here to create an
35:30 - access token
35:31 - it will take me to
35:33 - my github account
35:35 - and i can go straight to the page
35:38 - where i can create an access token
35:41 - if you want to get here
35:43 - on your own you can access this page
35:46 - through settings and developer settings
35:49 - and then personal access tokens
35:53 - you can see that by clicking on the link
35:56 - the necessary permissions that i'm going
35:58 - to need for jenkins
36:00 - are already pre-populated and selected
36:03 - here
36:10 - so i don't need to change anything
36:14 - i just need to
36:16 - give a name to my personal access token
36:19 - and then i can also change the
36:22 - expiration if i want
36:25 - this is just a name so when i look
36:27 - through my tokens in github i can know
36:30 - what the token is for
36:33 - i won't be using this name anywhere in
36:35 - jenkins
36:37 - i'll just be using the token itself
36:42 - so everything else is set already and
36:45 - i'm going to go ahead and generate the
36:47 - token
36:53 - the token does disappear if i leave this
36:56 - page
36:57 - so i'm going to go ahead and copy it
37:02 - and now that it's created
37:06 - i can go back over to
37:08 - jenkins and enter it here
37:11 - and click connect
37:15 - so that worked
37:17 - and now that i'm connected to the github
37:19 - account with my access token
37:23 - it shows me the list of all the
37:25 - organizations that i belong to
37:29 - and i'm going to select the faraday
37:32 - academy organization
37:34 - because that's where the rebuild i want
37:36 - to use is located
37:38 - and in that organization
37:41 - it shows me all 14 repos and i'm going
37:43 - to be using the curriculum app for this
37:46 - tutorial
37:47 - and then i just hit create pipeline
37:50 - now it takes me to this interactive
37:53 - pipeline creator screen and you can see
37:56 - a message just popped up that said no
37:59 - jenkins file located
38:01 - so let me just go to the project in
38:04 - github so you can see what it's talking
38:06 - about
38:07 - and in this repo in github
38:10 - you can see there is no file called
38:13 - jenkins file
38:15 - so by
38:16 - default jenkins
38:20 - will look for a file called jenkins file
38:23 - in the root directory
38:25 - of a repository
38:28 - now what a jenkins file is is a file
38:33 - that
38:34 - contains
38:36 - instructions for a pipeline written as
38:39 - code
38:41 - so you can read
38:43 - the file and see each step
38:47 - defined in the pipeline going from top
38:50 - to bottom divided into
38:53 - stages and steps
38:55 - which we'll talk about in a minute
38:58 - now because this is a file it's checked
39:01 - into git and versioned
39:03 - and can be managed or rolled back
39:07 - just like any other file in git
39:10 - now since the file doesn't already exist
39:13 - in our repository
39:15 - when we create the pipeline in blue
39:18 - ocean
39:19 - and save for the first time
39:21 - it will automatically create a new
39:24 - jenkins file for us and commit it to the
39:27 - repository
39:29 - so let's go through that process now
39:31 - back in jenkins
39:36 - you can see the message down at the
39:38 - bottom here saying
39:40 - a stage is required
39:43 - basically the pipeline is broken down
39:46 - into stages
39:48 - which are like sections
39:52 - every stage has to have at least one
39:54 - step
39:56 - and the steps are what contain the
39:58 - scripts
40:00 - calls to
40:01 - jenkins plugins
40:03 - or other actionable tasks
40:06 - to be carried out in the pipeline
40:10 - both stages and steps
40:14 - can be run in parallel
40:17 - or one after the other
40:19 - you will see this as we go along in the
40:23 - pipeline creator
40:26 - i'm going to name this stage something
40:28 - like checkout code
40:35 - and now i need to add steps
40:38 - so i'm going to add a step here
40:42 - and find the get plugin that i installed
40:46 - earlier
40:48 - and it's asking for the url of my git
40:51 - repo
40:53 - so let me grab that
40:56 - paste it
40:58 - and i need to denote which branch i'm
41:01 - using
41:02 - for the repo i use dev as the default
41:06 - branch
41:07 - so i'm going to use that
41:09 - and now i can click save
41:12 - it says that saving this pipeline will
41:14 - commit a jenkins file to the repository
41:18 - which is exactly what i want
41:21 - and since there is no jenkins file of
41:24 - course it will create a new one for us
41:27 - i'm going to
41:29 - leave the description blank so it will
41:32 - just give me a default commit message
41:35 - and it's pointing to dev so it's going
41:37 - to commit directly to the dev branch
41:40 - so let me save and run that
41:43 - and it
41:44 - failed the first time it was trying to
41:47 - run sometimes it passes on the second
41:49 - try so let me retry
41:51 - and it failed again so let me look at
41:54 - the logs
41:55 - and it says that
41:57 - the recommended get tool is none
42:01 - it gives me some information here on
42:03 - what's going wrong and why it's failing
42:06 - it's saying that git does not exist
42:09 - basically i spun up this server
42:12 - using jenkins from the lenode
42:15 - marketplace
42:16 - but that server does not have git
42:20 - pre-installed on it
42:22 - so i will need to install that directly
42:25 - on my instance
42:27 - and since i don't have any kind of
42:29 - automated setup for the instance i'm
42:31 - just going to ssh directly into it
42:39 - so in lenode i'm going to go to my
42:41 - server
42:43 - and instead of using my own terminal
42:45 - this time i'm going to use the built-in
42:48 - one that they provide in the node
42:51 - it's called lish so i can click launch
42:54 - lish console
42:56 - and it prompts me to log in here
42:59 - so ignore the
43:01 - previous incorrect logins i'm going to
43:03 - log in as root
43:05 - and then grab the password
43:10 - that i saved in my password manager
43:18 - and i successfully sshed in
43:22 - let me make sure that git is not
43:23 - installed i can do that with the get
43:26 - dash version command
43:29 - and it's telling me that git is not
43:32 - found
43:33 - so before i install it i'm going to do
43:36 - an apt update
43:38 - to make sure i have the latest versions
43:40 - of the packages
43:43 - it's telling me that
43:45 - i can upgrade
43:47 - some of the packages i already have
43:48 - installed or they have new versions
43:51 - but i'm not going to do that right now
43:54 - for now i'm just going to do apt install
43:57 - git
43:58 - it's asking me if i want to continue
44:01 - installing
44:02 - 38.3 megabytes
44:05 - and now i should have get installed
44:08 - so let me check again
44:10 - and yes i have git version 2.20
44:15 - and now that i have git installed
44:19 - i'm going to try to rerun my pipeline
44:21 - over here
44:23 - while it's running notice that the
44:24 - colors change
44:27 - so
44:28 - you have the color blue
44:30 - while it's running
44:32 - and then you can see things turn green
44:34 - as they pass
44:36 - and then when everything passes this
44:38 - whole thing turns green
44:40 - as you've seen before red
44:42 - means failure
44:45 - and there's also a yellow state
44:47 - for certain cases like test failure
44:51 - then it can turn yellow so everything is
44:54 - very visual here and
44:56 - you can see that now it passes
44:59 - since i have the correct dependencies
45:01 - installed on the server
45:03 - so this is the most basic version of a
45:08 - pipeline to create in jenkins
45:11 - so let me add a few more steps now
45:17 - now when jenkins created this pipeline
45:20 - as i mentioned before
45:22 - it also created a jenkins file
45:26 - so when i refresh my
45:28 - github here
45:29 - it added the jenkins file and you can
45:32 - see where it says added jenkins here
45:35 - that is the default commit message
45:37 - because we didn't type in a custom one
45:40 - and you can see if we go into the
45:42 - jenkins file
45:44 - this is the stage that we created and
45:48 - the step to check out code
45:51 - with the github plugin
45:53 - jenkins files are usually pretty easy to
45:56 - read because you can see well-named
45:58 - options
45:59 - like
46:00 - which agent you are running the pipeline
46:02 - on
46:04 - a list of
46:05 - stages and then
46:07 - the steps inside of each stage
46:11 - and for the github plugin here i'm using
46:15 - the api that they provide
46:18 - and passing in the github url for the
46:22 - repo and which branch i want to check
46:26 - out
46:29 - so let's explore the interface a little
46:32 - bit and then try to update our pipeline
46:36 - from the top left
46:38 - you can see which pipeline is running i
46:41 - only have one right now
46:43 - if i click on it i can see the history
46:47 - of the jobs that have run
46:49 - and the ending state if they
46:52 - passed failed or are still running
46:55 - and if i go into one of them
46:58 - i can see that it has all the
47:00 - information
47:02 - i don't have any changes yet
47:05 - and i don't have testing that really
47:07 - runs and you can see the fourth tab is
47:10 - for any artifacts
47:12 - that are produced so
47:15 - if i click on this file
47:17 - this is just automatically created by
47:20 - jenkins is not something i explicitly
47:23 - have to create
47:24 - but if we did create some kind of output
47:28 - it would be here with the artifacts on
47:31 - this page
47:32 - the next icon here
47:35 - that looks like refresh
47:37 - will re-run any jobs
47:40 - with the pencil i can edit the pipeline
47:43 - if i click on the gear icon it takes me
47:45 - to settings in the old jenkins ui
47:51 - it takes me directly to the settings for
47:53 - this pipeline
47:58 - and also here if i go to branches
48:02 - and hover over any of the branches in
48:05 - the list here
48:07 - then i get a couple icons here
48:12 - and one of them is edit
48:14 - so i'm going to go ahead and click on
48:16 - that edit icon
48:21 - now there's different ways to arrange a
48:23 - pipeline
48:25 - i can add more stages
48:27 - i can go back to
48:30 - the previous stage and add more steps
48:33 - or i can
48:35 - add stages that run in parallel
48:37 - depending on what i want to do
48:49 - now there are a lot of options
48:52 - for different types of things that i can
48:54 - do in a step
48:57 - some of these like docker and git are
49:00 - from plugins that i've installed
49:02 - i'm just going to use the regular shell
49:04 - script here
49:06 - and for right now
49:09 - i'm just going to list contents of the
49:12 - directory and this will show up in the
49:15 - jenkins logs
49:17 - it's going to create another commit
49:20 - to update the jenkins file
49:23 - so i'm going to add a commit message
49:26 - this time
49:27 - and i'll save and run that
49:30 - and if i go over to my app
49:36 - i can see that
49:38 - next to the jenkins file it shows the
49:40 - new commit message
49:42 - and go into the jenkins file and
49:45 - the new
49:47 - stage and
49:49 - step is updated
49:51 - i guess i forgot to name my stage i
49:53 - thought it was required
49:55 - you can see in jenkins here that when i
49:58 - make updates it's running twice
50:01 - that's because
50:02 - i am committing
50:04 - with the jenkins file directly to the
50:07 - dev branch so that runs but there is
50:10 - also an open pr in my
50:13 - repository
50:14 - this pr 90
50:17 - and i'm making the pr into dev every
50:20 - time i'm updating the jenkins file it's
50:22 - re-running all of the pr's
50:25 - so let me go into here
50:27 - and it's passing
50:29 - it defaulted to the name error here
50:35 - but anyway i can see that
50:38 - it printed everything out
50:45 - let me change that name error
51:01 - so let me rename the stage to log and
51:04 - save that
51:14 - of course now it's going to run again
51:15 - even though i'm just updating
51:18 - the
51:19 - wording in the jenkins file
51:23 - one thing to note here is that services
51:25 - like github do have restrictions on api
51:29 - usage
51:30 - so if you start to see failing jobs here
51:34 - it might not be because of anything
51:36 - you've done wrong in jenkins
51:39 - but you might have hit the limit
51:42 - with the github api
51:44 - and then you'll either have to upgrade
51:46 - your account or wait until it resets i
51:49 - think it resets every hour
51:51 - so sometimes jobs fail because of a cap
51:54 - on api usage
51:57 - but here it looks like everything went
51:59 - fine
52:07 - so now i want to add another script to
52:10 - the pipeline
52:13 - i'm going to come to branches and click
52:15 - edit again
52:17 - and i have this simple log script
52:20 - but let me just run one in parallel so
52:23 - you can see how the jenkins file works
52:26 - i'm going to call this front end unit
52:29 - test
52:32 - add a step here another shell script
52:36 - and i'm going to paste in the command
52:39 - i'm going into the curriculum front
52:43 - directory
52:44 - where my front end is and then run an
52:47 - npm install to install the dependencies
52:51 - and then run npm run test unit so run
52:55 - the unit test
52:58 - and i'll click save there
53:11 - so this is going to run and i'll follow
53:15 - it here i think it is going to fail
53:19 - because i don't actually have node or
53:21 - npm installed on my lenode server
53:34 - so it failed let me look at the logs
53:40 - and indeed it says npm not found
53:46 - so let me go back to lenode
53:49 - and launch the lish console
53:54 - again and i'm still logged in from last
53:57 - time
54:00 - so instead of
54:02 - app install this time
54:05 - i'm going to install
54:08 - node via the recommended command with
54:10 - curl
54:11 - this is for
54:13 - version 16.
54:16 - you don't only have to use version 16
54:19 - but this is just the version that i
54:21 - tested it with it's a stable version
54:33 - it's giving me more instructions here
54:36 - to apt-get install
54:39 - node
54:41 - so i'm going to enter that command
54:47 - and now i'm going to check the node
54:49 - version
54:50 - it says version 16 and let me check the
54:52 - npm version
54:54 - because npm comes with node
54:57 - and i have version 8 of npm
55:02 - so that should be all i need here
55:08 - let me try to rerun this now
55:11 - all the other steps passed this one's
55:13 - still going
55:16 - it hasn't failed yet so that's a good
55:18 - sign
55:24 - while it's running i'm going to switch
55:25 - over to github
55:29 - and go to the jenkins file
55:33 - and you can see that
55:35 - now it adds this parallel command
55:38 - and denotes that these two stages are
55:41 - running in parallel
55:43 - and gives it
55:45 - the title of
55:47 - the first stage for both
55:51 - and then each stage
55:54 - in parallel has its own title and
55:57 - steps
55:58 - of course you could just put this in one
56:00 - stage and have two steps as well
56:04 - but i just wanted to show how it works
56:07 - to run things in parallel in jenkins
56:10 - this is taking a little while so i'm
56:12 - going to fast forward
56:14 - so i actually re-ran this because i
56:17 - closed that other screen
56:19 - you can see that everything passed this
56:23 - time including the new one for tests
56:25 - that i added
56:27 - now that we have a couple basic scripts
56:29 - working let's add some stages so that we
56:32 - can finally deploy the app to docker hub
56:39 - now i'm going to add a build step to our
56:41 - pipeline
56:43 - i'm just going to create a new stage
56:46 - called build
56:47 - and then i can add a regular shell
56:49 - script
56:51 - i'm going to use the shell script to run
56:54 - docker commands
56:56 - so i'll use the regular docker build
56:59 - command
57:00 - to build a docker image
57:03 - from this docker file that i'm pointing
57:05 - to
57:06 - because the docker file isn't in the
57:08 - root directory here it's in a
57:10 - subdirectory so i need to point to that
57:13 - with this dash f flag
57:16 - and i also have to
57:18 - let docker
57:21 - know what is my current context
57:24 - which in this case is the directory i'm
57:25 - already in so i'm just using the period
57:28 - here
57:29 - and now i'm going to commit this
57:39 - now it's building and i'm waiting for it
57:41 - to build
57:43 - i re-recorded this a few times so you
57:45 - can see the numbers skip around a little
57:47 - bit
57:52 - but i'm still going through each step in
57:54 - the process
58:02 - now that the build passed
58:04 - i need two more steps to be able to
58:06 - deploy this to docker home
58:09 - first i need to log in
58:12 - with my docker hub credentials
58:16 - to make sure i'm authorized
58:20 - to push images to my docker hub account
58:28 - to do that i need to use the docker
58:30 - login command
58:32 - and the default place that it points to
58:35 - is dockerhub so i don't have to do
58:37 - anything special here
58:39 - but i do need to use my credentials like
58:42 - my username and password
58:45 - but of course i don't want to store my
58:48 - username and password for docker hub
58:50 - in the jenkins file
58:52 - so i am going to
58:55 - use variables
58:57 - in jenkins
58:59 - so i'm going to add environment
59:00 - variables to my pipeline
59:03 - and then i will just
59:05 - point to those variables
59:08 - from my jenkins file
59:12 - so you can see i can add the docker hub
59:14 - user
59:15 - and the docker hub password i'm going to
59:18 - just add those values in blue ocean
59:22 - if you aren't using blue ocean or you
59:24 - want to use the standard jenkins
59:26 - interface there is also a key manager
59:30 - in the settings over there i think it's
59:32 - a bit easier to do directly in blue
59:34 - ocean here
59:36 - of course i'm not going to show
59:38 - these variables on screen you'll have to
59:41 - enter in your own credentials here
59:44 - and now i'm building and testing just to
59:46 - make sure that my login worked
59:49 - [Music]
59:54 - and indeed it passed
59:56 - the only thing left to do is to add a
59:59 - new stage here to actually push my
60:03 - updated image to docker hub
60:08 - so i'm going to add another shell script
60:12 - and this time i'll use the docker push
60:15 - command
60:16 - i just need to add
60:20 - the name of the container
60:23 - and optionally the tag
60:25 - but the only tag i have right now is the
60:29 - default latest tag
60:32 - so i'm just going to leave that
60:46 - and it failed because it says that an
60:49 - image does not exist
60:52 - so with my username and the name of that
60:54 - image
60:55 - now
60:56 - since i already
60:58 - built and deployed this app a few years
61:00 - ago
61:01 - i already have this in my docker hub
61:05 - however now that i
61:07 - want to push a new image from jenkins
61:11 - i need to
61:12 - tag it during the build step here
61:15 - so i'm going to add a tag to my build
61:18 - script
61:19 - and i can just use the dash t
61:22 - option
61:23 - and i'm going to tag it with the same
61:25 - name that i'm using so my username
61:28 - and then curriculum front and i'll just
61:31 - add latest
61:33 - now let me save and run that and see if
61:36 - it passes
61:43 - and it passed and pushed correctly to
61:47 - dockerhub
61:51 - let me check over in my docker hub
61:53 - interface
61:56 - it's at
61:57 - hub.docker.com
61:58 - and i'm already logged in
62:00 - so i can see that my
62:03 - curriculum app
62:05 - was updated
62:07 - less than a minute ago or rather my
62:09 - curriculum front app which is just the
62:12 - front end
62:16 - congratulations on making it to the end
62:18 - of this video tutorial i hope you were
62:21 - able to learn a lot about
62:23 - jenkins and devops and lenode
62:26 - as always if you have questions or
62:28 - comments please leave them in the
62:30 - comments section below
62:32 - i hope you are also able to check out
62:34 - the follow along readme that is linked
62:37 - in the description
62:39 - it has all of the instructions
62:41 - for of course following along with every
62:44 - step in this video as well as some notes
62:47 - that i took along the way about things
62:50 - that i learned in the process of
62:52 - creating this tutorial
62:54 - i want to thank lenode once again
62:56 - for their grant to free code camp and
62:59 - making educational content like this
63:01 - video possible
63:03 - i hope all of you have a great rest of
63:05 - your week
63:06 - and we'll see you in the next video

Cleaned transcript:

jenkins is an open source automation server which makes it easier to build test and deploy software in this course you'll learn how to build a full devops pipeline using jenkins lenode servers and other tools gwen faraday is your teacher for this course gwen is an experienced software developer and she has created a bunch of popular courses on both her own channel and the free codecamp channel jenkins can help developers automate their software development process and improve their productivity it can also help users obtain a fresh build of their software project more easily jenkins is an important tool for creating a devops pipeline a devops pipeline is a set of processes and tools that enable the continuous delivery of software applications the term devops is a combination of the words development and operations devops pipelines are used to automate the build test and deploy phases of the software development lifecycle the goal of a devops pipeline is to make the software development process more efficient and effective devops pipelines help to automate the tedious and manual tasks that are often involved in software development this automation can help to speed up the software development process and make it more reliable jenkins is a flexible tool that can be used to create custom devops pipelines and that's what you're going to learn about in this course so at the end consider leaving a comment with something you learn in this course hi everyone my name is gwen and in this course on free code camp i'm going to be building a full devops pipeline using tools like jenkins lenode servers for hosting our application as well as our jenkins server we'll be using github as our code repository docker and docker hub and some related tools now to follow along with this tutorial you can see the app that i will be using for deployments on my faraday academy github organization it's called the curriculum app if you followed my youtube channel you might have seen that i actually built this application in maybe 50 or so live streams a few years ago there is also a readme here on github where i have each step in the process listed out as well as links and relevant resources and this architecture diagram of how everything fits together in the process jenkins is a tool used for automation with continuous integration and continuous deployment pipelines the project started in 2004 so it's been around for almost 20 years and it's completely open source right now it claims that it's the most commonly used automation server in software development so why would you want to use jenkins as an app developer it allows you to automatically watch for certain events in your repository and react to those events you can do things like build your code run scripts perform testing and then deploy your app if everything passes or reject the deployment if the test fails either way you will be able to see logs of every step throughout the jenkins pipeline and the results of the deployment jenkins can ensure that all of your tests are run in the same environment or as many environments as you want for consistency another benefit is that jenkins has a very large community that is amassed over almost the last 20 years so there are lots of tutorials and community questions and answers that you can find another feature of jenkins is its plugin architecture to use jenkins effectively you will want to install the plugins that make sense for your project these plugins can include options for compiling or testing they have a docker plugin which we will be using as well as a git plugin that allows us to watch our github repository and react to changes jenkins is selfhosted by default you don't need to pay for an enterprise tier this gives you a lot of options for configuration it's also a tool that has been proven to scale since it's used by so many large companies around the world it's not just large companies that use jenkins however many small or midsized companies use this tool as well why do companies use it many of them say that it improves their software delivery cycles by making them faster and more performant what are some of the benefits of using jenkins versus other alternatives there are plenty of new tools in the cicd pipeline space you could choose travis ci or circleci there's also github actions there's get lab ci and many more some of the differences are that jenkins is open source many of the other options are not a big one is that you can selfhost without paying for an enterprise plan and you have total control over configuration one thing that might be helpful if you're considering jenkins as an option and comparing it to other alternatives is their jenkins youtube channel they have a lot of information about jenkins and they also have this playlist of real users of jenkins real companies talking about why they chose jenkins and what benefits they see from using it we talked about some of the benefits now let's talk about some of the cons or potential drawbacks of using jenkins so plugins i listed in the pros column because there are hundreds of plugins covering all different kinds of use cases and you can usually find a plugin for what you need in jenkins you also have the option to create one yourself that can also be a drawback though since you are relying on community supported plugins that might not be updated or documented well there can also be some confusing overlap between plugins since anyone can create their own jenkins plugin a common complaint of jenkins is the outdated ui more modern tools have interfaces that are a little bit easier to use than the standard jenkins interface now jenkins does have a newer interface that you can install as a plugin and use for a lot of things but not everything and that is the blue ocean plugin we're going to demo that in this tutorial as well another potential drawback is that since it's been around for so long and it's community supported sometimes the documentation or answers that you find can be out of date this is not an uncommon problem for software tools in general overall i think jenkins has pretty good documentation but it is something to be aware of checking and making sure that the documentation you are reading is up to date with the version of jenkins that you are using another huge consideration to keep in mind when choosing jenkins is that it's completely selfhosted and maintained unless you are using a thirdparty solution to manage your jenkins server you will be the one installing jenkins keeping it up to date managing the controller and agents and all the different aspects of the jenkins pipeline and also ensuring security which can be tricky sometimes using a tool like jenkins where you need to install so many different plugins to use it before we really dive in here i want to make sure we're all on the same page by defining some terms that i'll be using in this tutorial and common terms that you will see when you are using jenkins as well let's go over some of the terms that we will be using in this tutorial just to make sure everyone is on the same page first we use the terms continuous integration and continuous delivery commonly abbreviated as cicd favorite definition for continuous integration actually comes from atlassian it says continuous integration is the practice of automating the integration of coding changes from multiple contributors into a single software project developers can frequently merge code changes into a central repository where it builds and then the tests run continuous integration is a precursor for continuous delivery continuous delivery is responsible for packaging the app and getting it ready to deploy using automated build tools this whole process is known as a pipeline a pipeline is basically a welldefined set of steps that build test and deploy applications automatically it basically takes you through the continuous integration and continuous delivery processes you will see that we also have a build step in our pipeline that we are going to be using if you are new to development or have only used something like javascript maybe you aren't familiar with a build step but generally the build step will spin up an environment compile code and create an executable if that's necessary when we talk about testing code that is a step of the pipeline that will run any unit endtoend integration or whatever other tests that are needed for the application to make sure that it's ready to deploy into production if the tests pass there are two other terms that are jenkins specific here the first is controller and that's our main instance of jenkins that is running the jenkins controller is responsible for configuration key management plugins and it's a centralized hub to manage all of the agents connecting to it agents are usually containerized environments that will run your pipeline steps these steps are also called a job which means some work that needs to be done the jenkins controller is responsible for assigning it to an agent and then the agent will either spin up and run all the steps of that job through to failure or deployment you can also set the agent to just stay running all the time instead of spinning up for each job that you want to run this is a simple diagram of the architecture for this tutorial so you can visualize what we're going to be doing to the left we have the app development side this is a full stack javascript application used for the demo and code is committed directly to a mono repo in github on the other side we have a lenode account and two servers running in lenode these are called lynodes in that interface one of them is running jenkins also known as the jenkins controller and the other server is using docker to run our application the jenkins controller will be configured to watch the github repo and when it pulls and sees changes it will initiate the cicd process in one of the agents the agents will run all of the steps in the pipeline to check out the code from the branch we designate in github run tests and deploy if everything was successful if the pipeline fails for any reason it will immediately stop and of course not deploy the application and either way we can see the build results and the logs in the main jenkins controller the first step is to sign up for a lenode account if you are a firsttime user of lenode when you sign up for an account they will give you a 50 credit that is good for the first 60 days for you to try out that will be more than enough to follow along with everything that we are doing in this tutorial you can sign up for your account with whatever service provider you want or using your email i already have an account so i'm going to skip to the dashboard view you can see i have some servers already running here that i used for testing in this lefthand menu you can see the services that lenode has to offer from lenodes which are servers that you can spin up volumes for storage other things like firewalls if you want to connect your domains they also have an object storage solution for things like images or static resources similar to using aws s3 and a marketplace that gives you oneclick installs for a lot of popular solutions we are going to be using a couple apps from this marketplace in the tutorial today you can see i clicked marketplace and it went ahead and took me through to create a new node select a marketplace and shows me all of the options here the first server that i am going to create is one that's already set up with jenkins if you were installing jenkins yourself you would have a couple options to install directly or use their official docker container the lenode marketplace option here just installs it directly on the server that we're going to spin up i'm going to scroll down to more options it gives me the option for the linux distro now depending on what option you choose here in the marketplace which one of these you choose you're going to see different options available down here for the jenkins container these are the ones i have to select i'm going to see what's available right now it's only debian 10 that's available for this jenkins server and now i need to select a region i'm just going to select the region closest to me in new jersey usa and then i need to select what kind of server by default it'll show you all of the options with dedicated cpus how many cpus how much ram and these are a little bit more expensive for this tutorial i'm just going to use the cheapest one the nano one gigabyte which if you look at the jenkins documentation is more than enough to run jenkins so i'm going to choose this scroll down this is the name this lenode label is the name that you saw in that first table view so i'm going to give it the name free code camp jenkins you can optionally add tags here about the type of servers the technologies or something else you want to differentiate between the nodes that you spin up i'm just going to leave it blank and now i can choose a root password this password that i enter here is something i can use when i ssh into the server i can also add an ssh key and ssh with the key i'm just going to generate a root password here so i'm going to use my password manager which is bit warden i'm going to come down to generator it generated this unique password it's 30 characters i'll be deleting this server after the tutorial so don't need anything crazy let me do 10 characters copy and paste i'm not going to add an ssh key for this i'll just use the password i do want to be sure i saved the password though so what i like to do is come in here i'm gonna add this username and password let me paste in the password and then i called the lenode free codecamp jenkins so i'll just put that in the username save it and then i have the password stored so i can copy it later when i go to ssh i don't need any of these options i can go ahead and hit create it will take a minute it says provisioning while that's going i'm going to create a second linode now for the second one i could just create a custom one but i'm going to go ahead and use their marketplace again and create one with docker already installed and set up so i'm going to use their docker lenode from the marketplace i clicked on that and scroll down for the options so now you can see i have special options for the docker server for this i'm going to leave these options blank instead of using an ssh key again i'm just going to use a password and i'll select the latest debian 11 region again i'll do newark new jersey shared cpu nano and this is the server where i'm going to host and run my application so i'm going to say free code camp application for the root password i'm gonna do the same thing generate a password copy enter and then i'll go ahead and add that password create that's provisioning if i go back to my list my free codecamp jenkins is up and running and this one should be done in a minute now let's check out our running instance of jenkins you can go into the jenkins server i just spun up and i can actually access the running instance of jenkins at this ip address i'm going to go ahead and do that it should be at port 8080 and usually when you would pull this up you would see a login screen but because this is our first time it's prompting us to enter a password now this password we will have to get from this file when we ssh into our server i'm going to go ahead and do that copy this ssh now i can ssh into the node and it's asking for my password since i didn't set up a key for this instance so i'm going to go ahead and use password authentication and i did save it in my password manager so i'll go ahead and copy the password i'll enter in here and now i'm inside the server so let me go back to jenkins and it said to copy the password from this file let me take a look at that i'm going to cat that file and that prints out the contents so now i can copy this password now if i go back to the browser and i can just paste that password here click continue and since i'm just setting it up for the first time it's asking what plugins i want to start with you can either do this manually or if you're just getting started with jenkins it's probably best to install the suggested plugins you can always add or remove plugins later but as you're using jenkins you'll realize that a lot of plugins depend on other plugins and these suggested plugins just give you a good base to start with so i'm going to click on that it's installing this takes a few minutes now i can create the first admin user i'm going to call this jenkins fcc and now i need a password i'll go ahead and generate this password just a short simple password copy it i'm going to just use a dummy email address here jenkins fcc at this is just a public email address provider and before i go i'm actually going to save this user the username there we go so i'm going to click save and continue i don't have a domain or another configuration so i'll leave this how it is right now i can always access it via this ip at port 8080 so i'm going to save and finish and now jenkins is ready to start using next let's do a quick tour of the jenkins interface to start you can see they have this top navigation and then also this sidebar to the left i'm going to start off with the top since it's a lot simpler so first i have this jenkins fcc that's my username so this is just a quick link to my user profile and go back and i also can see any notifications or warnings or error messages linked here because i clicked on it it took me to my settings page i'm going to go back for now and come back here in a minute go back to dashboard and starting from the top if i click on new item you can see this is a quick link to create a freestyle project or a pipeline so if i want to create jobs i can come here and do that i'll come back here to do that in a minute notice whenever i go into one of these navigation items you can see i get breadcrumbs here where i can navigate back up this people navigation item just lets me manage any users that have access to this jenkins right now i just have the one admin user but really you might have devops and developers and other people with different levels of access to this interface and you can actually give quite finegrained permissions on what they can or cannot do build history will display information and feedback of the jobs that we run we'll be coming back to that later as well i'm going to skip down to views now you can see there's nothing in this views page yet this is basically a dashboard view of all of your jobs and you can also use this new view link to create kind of custom dashboards for viewing different kinds of jobs or maybe for different users to see different information so i'm going to go back to dashboard now i save manage jenkins for last because this is where all of the configuration and plugins key management this is the page we will be spending most of our time on initially to set everything up so that we can create pipelines and run jobs first at the top you can see that it will let you know when there is a new version of jenkins available actually this is a little bit out of date or the version that i have in this lenode is out of date anyway so it's letting me know and you can see if i scroll down at the bottom here it says the current version that i have which i believe is like maybe 25 minor versions out of date so i do need to go into my server and update that if i want to see information about my current version of jenkins there is an about jenkins section in this manage jenkins dashboard which will take me to a page that also shows my version and information about the version of jenkins that i'm using i'm going to go back now some of the main settings here are your settings to globally configure different things about jenkins and also paths this configuration page will let you manage a lot of the core settings and features of jenkins as well as give you setting options for some of the plugins that you install i'm not going to touch any of these things right now i'm just going to leave them as the default go back to manage jenkins manage plugins this is where we can search for install or update plugins or even remove plugins that we don't need we can do all that from here i'll come back here in a minute because we will be installing a few more plugins i'll go back managing nodes see we have the default node which is the controller now to start i will be running some jobs on this default builtin node which is good for trying things out and getting started but it is recommended that you create nodes just for running jobs and then use this default builtin as the controller without running jobs on this node itself we'll come back to that the other important area that i'm going to point out is this manage credentials when you create other nodes that are going to be able to run jobs you will need to add credentials here to give those nodes permission to access whatever resources they need to and for the controller to communicate with the nodes this is a very simple overview of the jenkins interface next i'm going to add a few plugins and then there's going to be another part of the interface called blue ocean to demonstrate i want to point out here that jenkins has kind of a dated look and feel but it is completely customizable you can use a theme plugin use a theme built by somebody else or create your own css and javascript to make this look and feel however you want i'm not going to be installing a theme but i will be installing kind of a new ui section of this jenkins interface to manage pipelines which is called like i mentioned blue ocean now i'm in the plugin manager and you can see the tabs here updates are for the plugins that i already have and have available updates so i could come and select plugins i want to update and click download now and it will install the update after i restart jenkins which as i'm downloading it does give me the option if i want to go ahead and restart jenkins i'm going to deselect these available is just a list of plugins that i can check off and install as well i'm going to come back to this i can see the plugins that i already have in this installed tab and advanced is some options that i'm not going to look at right now so let me go back to available actually i'm going to go ahead and filter here and first i'm going to look for blue ocean you can see there are several plugins here i'm going to go ahead and install the main blue ocean plugin i'm going to say download now and install after restart it is in the process of downloading and installing you can see and i'm going to check this box at the bottom if you can see it says restart jenkins when installation is complete so now it says jenkins is going to shut down it will just take a minute for jenkins to restart now you can see that this restarting jenkins is running now that it's finished i can log back in so i'm going to go back to the plugin section and manage jenkins manage plugins and i'm going to go to available and this time i'll filter by docker so this first option is the main docker plugin and there is a second one for docker compose i'm going to do the same thing and download now and install after restart you can see that some of the plugins have dependencies of other plugins like i just the only ones i selected were actually this docker one and the docker compose one but because they have dependencies of docker api and docker commons jenkins is also installing those plugins so it will install the plugin you select as well as any dependent plugins if they aren't installed already this is going to take a few minutes to install these now that we installed those plugins you will see some additional options in some of the settings pages in jenkins and you can also see this new sidebar item saying open blue ocean let me click on that you can see this is a completely different interface because it's a modern ui for pipeline management in jenkins it's still linked to the old interface so if you click on some links here like administration you can see it takes you back to the old interface because blue ocean doesn't have a managed jenkins section let me go back to blue ocean you can also click this kind of exit icon and that takes you back to the regular jenkins dashboard normally you would see a list of the pipelines you create here but since there are no pipelines it gives us this box prompting us to create a new pipeline so that's what we're going to do next let me start by creating a new pipeline it's asking where my repository is hosted which is github and in order to connect to my repository and be able to run jobs i need to use my github access token so i need to create one this warning in red here is just because i had previously created an access token you probably will not see this i'm going to come here to create an access token it will take me to my github account and i can go straight to the page where i can create an access token if you want to get here on your own you can access this page through settings and developer settings and then personal access tokens you can see that by clicking on the link the necessary permissions that i'm going to need for jenkins are already prepopulated and selected here so i don't need to change anything i just need to give a name to my personal access token and then i can also change the expiration if i want this is just a name so when i look through my tokens in github i can know what the token is for i won't be using this name anywhere in jenkins i'll just be using the token itself so everything else is set already and i'm going to go ahead and generate the token the token does disappear if i leave this page so i'm going to go ahead and copy it and now that it's created i can go back over to jenkins and enter it here and click connect so that worked and now that i'm connected to the github account with my access token it shows me the list of all the organizations that i belong to and i'm going to select the faraday academy organization because that's where the rebuild i want to use is located and in that organization it shows me all 14 repos and i'm going to be using the curriculum app for this tutorial and then i just hit create pipeline now it takes me to this interactive pipeline creator screen and you can see a message just popped up that said no jenkins file located so let me just go to the project in github so you can see what it's talking about and in this repo in github you can see there is no file called jenkins file so by default jenkins will look for a file called jenkins file in the root directory of a repository now what a jenkins file is is a file that contains instructions for a pipeline written as code so you can read the file and see each step defined in the pipeline going from top to bottom divided into stages and steps which we'll talk about in a minute now because this is a file it's checked into git and versioned and can be managed or rolled back just like any other file in git now since the file doesn't already exist in our repository when we create the pipeline in blue ocean and save for the first time it will automatically create a new jenkins file for us and commit it to the repository so let's go through that process now back in jenkins you can see the message down at the bottom here saying a stage is required basically the pipeline is broken down into stages which are like sections every stage has to have at least one step and the steps are what contain the scripts calls to jenkins plugins or other actionable tasks to be carried out in the pipeline both stages and steps can be run in parallel or one after the other you will see this as we go along in the pipeline creator i'm going to name this stage something like checkout code and now i need to add steps so i'm going to add a step here and find the get plugin that i installed earlier and it's asking for the url of my git repo so let me grab that paste it and i need to denote which branch i'm using for the repo i use dev as the default branch so i'm going to use that and now i can click save it says that saving this pipeline will commit a jenkins file to the repository which is exactly what i want and since there is no jenkins file of course it will create a new one for us i'm going to leave the description blank so it will just give me a default commit message and it's pointing to dev so it's going to commit directly to the dev branch so let me save and run that and it failed the first time it was trying to run sometimes it passes on the second try so let me retry and it failed again so let me look at the logs and it says that the recommended get tool is none it gives me some information here on what's going wrong and why it's failing it's saying that git does not exist basically i spun up this server using jenkins from the lenode marketplace but that server does not have git preinstalled on it so i will need to install that directly on my instance and since i don't have any kind of automated setup for the instance i'm just going to ssh directly into it so in lenode i'm going to go to my server and instead of using my own terminal this time i'm going to use the builtin one that they provide in the node it's called lish so i can click launch lish console and it prompts me to log in here so ignore the previous incorrect logins i'm going to log in as root and then grab the password that i saved in my password manager and i successfully sshed in let me make sure that git is not installed i can do that with the get dash version command and it's telling me that git is not found so before i install it i'm going to do an apt update to make sure i have the latest versions of the packages it's telling me that i can upgrade some of the packages i already have installed or they have new versions but i'm not going to do that right now for now i'm just going to do apt install git it's asking me if i want to continue installing 38.3 megabytes and now i should have get installed so let me check again and yes i have git version 2.20 and now that i have git installed i'm going to try to rerun my pipeline over here while it's running notice that the colors change so you have the color blue while it's running and then you can see things turn green as they pass and then when everything passes this whole thing turns green as you've seen before red means failure and there's also a yellow state for certain cases like test failure then it can turn yellow so everything is very visual here and you can see that now it passes since i have the correct dependencies installed on the server so this is the most basic version of a pipeline to create in jenkins so let me add a few more steps now now when jenkins created this pipeline as i mentioned before it also created a jenkins file so when i refresh my github here it added the jenkins file and you can see where it says added jenkins here that is the default commit message because we didn't type in a custom one and you can see if we go into the jenkins file this is the stage that we created and the step to check out code with the github plugin jenkins files are usually pretty easy to read because you can see wellnamed options like which agent you are running the pipeline on a list of stages and then the steps inside of each stage and for the github plugin here i'm using the api that they provide and passing in the github url for the repo and which branch i want to check out so let's explore the interface a little bit and then try to update our pipeline from the top left you can see which pipeline is running i only have one right now if i click on it i can see the history of the jobs that have run and the ending state if they passed failed or are still running and if i go into one of them i can see that it has all the information i don't have any changes yet and i don't have testing that really runs and you can see the fourth tab is for any artifacts that are produced so if i click on this file this is just automatically created by jenkins is not something i explicitly have to create but if we did create some kind of output it would be here with the artifacts on this page the next icon here that looks like refresh will rerun any jobs with the pencil i can edit the pipeline if i click on the gear icon it takes me to settings in the old jenkins ui it takes me directly to the settings for this pipeline and also here if i go to branches and hover over any of the branches in the list here then i get a couple icons here and one of them is edit so i'm going to go ahead and click on that edit icon now there's different ways to arrange a pipeline i can add more stages i can go back to the previous stage and add more steps or i can add stages that run in parallel depending on what i want to do now there are a lot of options for different types of things that i can do in a step some of these like docker and git are from plugins that i've installed i'm just going to use the regular shell script here and for right now i'm just going to list contents of the directory and this will show up in the jenkins logs it's going to create another commit to update the jenkins file so i'm going to add a commit message this time and i'll save and run that and if i go over to my app i can see that next to the jenkins file it shows the new commit message and go into the jenkins file and the new stage and step is updated i guess i forgot to name my stage i thought it was required you can see in jenkins here that when i make updates it's running twice that's because i am committing with the jenkins file directly to the dev branch so that runs but there is also an open pr in my repository this pr 90 and i'm making the pr into dev every time i'm updating the jenkins file it's rerunning all of the pr's so let me go into here and it's passing it defaulted to the name error here but anyway i can see that it printed everything out let me change that name error so let me rename the stage to log and save that of course now it's going to run again even though i'm just updating the wording in the jenkins file one thing to note here is that services like github do have restrictions on api usage so if you start to see failing jobs here it might not be because of anything you've done wrong in jenkins but you might have hit the limit with the github api and then you'll either have to upgrade your account or wait until it resets i think it resets every hour so sometimes jobs fail because of a cap on api usage but here it looks like everything went fine so now i want to add another script to the pipeline i'm going to come to branches and click edit again and i have this simple log script but let me just run one in parallel so you can see how the jenkins file works i'm going to call this front end unit test add a step here another shell script and i'm going to paste in the command i'm going into the curriculum front directory where my front end is and then run an npm install to install the dependencies and then run npm run test unit so run the unit test and i'll click save there so this is going to run and i'll follow it here i think it is going to fail because i don't actually have node or npm installed on my lenode server so it failed let me look at the logs and indeed it says npm not found so let me go back to lenode and launch the lish console again and i'm still logged in from last time so instead of app install this time i'm going to install node via the recommended command with curl this is for version 16. you don't only have to use version 16 but this is just the version that i tested it with it's a stable version it's giving me more instructions here to aptget install node so i'm going to enter that command and now i'm going to check the node version it says version 16 and let me check the npm version because npm comes with node and i have version 8 of npm so that should be all i need here let me try to rerun this now all the other steps passed this one's still going it hasn't failed yet so that's a good sign while it's running i'm going to switch over to github and go to the jenkins file and you can see that now it adds this parallel command and denotes that these two stages are running in parallel and gives it the title of the first stage for both and then each stage in parallel has its own title and steps of course you could just put this in one stage and have two steps as well but i just wanted to show how it works to run things in parallel in jenkins this is taking a little while so i'm going to fast forward so i actually reran this because i closed that other screen you can see that everything passed this time including the new one for tests that i added now that we have a couple basic scripts working let's add some stages so that we can finally deploy the app to docker hub now i'm going to add a build step to our pipeline i'm just going to create a new stage called build and then i can add a regular shell script i'm going to use the shell script to run docker commands so i'll use the regular docker build command to build a docker image from this docker file that i'm pointing to because the docker file isn't in the root directory here it's in a subdirectory so i need to point to that with this dash f flag and i also have to let docker know what is my current context which in this case is the directory i'm already in so i'm just using the period here and now i'm going to commit this now it's building and i'm waiting for it to build i rerecorded this a few times so you can see the numbers skip around a little bit but i'm still going through each step in the process now that the build passed i need two more steps to be able to deploy this to docker home first i need to log in with my docker hub credentials to make sure i'm authorized to push images to my docker hub account to do that i need to use the docker login command and the default place that it points to is dockerhub so i don't have to do anything special here but i do need to use my credentials like my username and password but of course i don't want to store my username and password for docker hub in the jenkins file so i am going to use variables in jenkins so i'm going to add environment variables to my pipeline and then i will just point to those variables from my jenkins file so you can see i can add the docker hub user and the docker hub password i'm going to just add those values in blue ocean if you aren't using blue ocean or you want to use the standard jenkins interface there is also a key manager in the settings over there i think it's a bit easier to do directly in blue ocean here of course i'm not going to show these variables on screen you'll have to enter in your own credentials here and now i'm building and testing just to make sure that my login worked and indeed it passed the only thing left to do is to add a new stage here to actually push my updated image to docker hub so i'm going to add another shell script and this time i'll use the docker push command i just need to add the name of the container and optionally the tag but the only tag i have right now is the default latest tag so i'm just going to leave that and it failed because it says that an image does not exist so with my username and the name of that image now since i already built and deployed this app a few years ago i already have this in my docker hub however now that i want to push a new image from jenkins i need to tag it during the build step here so i'm going to add a tag to my build script and i can just use the dash t option and i'm going to tag it with the same name that i'm using so my username and then curriculum front and i'll just add latest now let me save and run that and see if it passes and it passed and pushed correctly to dockerhub let me check over in my docker hub interface it's at hub.docker.com and i'm already logged in so i can see that my curriculum app was updated less than a minute ago or rather my curriculum front app which is just the front end congratulations on making it to the end of this video tutorial i hope you were able to learn a lot about jenkins and devops and lenode as always if you have questions or comments please leave them in the comments section below i hope you are also able to check out the follow along readme that is linked in the description it has all of the instructions for of course following along with every step in this video as well as some notes that i took along the way about things that i learned in the process of creating this tutorial i want to thank lenode once again for their grant to free code camp and making educational content like this video possible i hope all of you have a great rest of your week and we'll see you in the next video
