With timestamps:

00:03 - hey guys my name is tiffany thank you
00:05 - for joining me you can't see me but i'm
00:07 - here i decided to do like a little intro
00:10 - to github
00:12 - how do i post a new project to github
00:14 - because i i realized a lot of people
00:16 - they're afraid to use the command line
00:19 - and then or the terminal and then
00:20 - they're also afraid to use get some as a
00:22 - new developer
00:24 - um
00:24 - and you definitely shouldn't be afraid
00:26 - to use it these are tools that are gonna
00:28 - make your life easier once you master
00:30 - them
00:31 - i'm going to be on my profile and then
00:33 - i'm going to go to
00:34 - repositories
00:39 - and remember this is just to get a new
00:42 - get this is just to get a new repository
00:45 - on your
00:46 - github page so when you click on it
00:51 - you are able to see the code and
00:52 - everything so this is the process that
00:54 - we're doing
00:56 - okay
00:57 - so i'm gonna go back to here
01:00 - go to repositories i'm gonna click new
01:03 - this part is fine to do on your um your
01:07 - interface it's fine
01:08 - i'm just gonna call this testing
01:11 - one two three
01:14 - okay and and you could put a description
01:16 - here
01:17 - um testing
01:20 - github
01:22 - repo it's almost a good idea to always
01:24 - do that as well as to initialize with a
01:27 - readme what this readme does
01:30 - is the readme is basically going to
01:33 - allow you the ability
01:34 - for others the ability to
01:38 - to read what's going on before they
01:41 - decide to
01:43 - um want to
01:45 - either make a fork or website or clone
01:48 - it
01:49 - or s or of the sort so the readme is
01:52 - important that's where you put the
01:53 - technologies that you're using that's
01:55 - what you use to give instructions to the
01:58 - user if there's additional instructions
02:01 - so i'm going to create a repository
02:05 - and now i have a repo well not really
02:09 - [Laughter]
02:10 - so what i have now
02:12 - is basically this um readme file
02:16 - that says testing one two three
02:19 - that's all it is and then here it has my
02:21 - description that i had okay
02:24 - so what we're going to do instead of
02:26 - doing these
02:27 - we're going to go through the command
02:29 - line and do this so what i am
02:32 - um
02:34 - going to do is i'm gonna clone this
02:39 - so i'm gonna copy this url
02:43 - so i can put it here
02:45 - so the command that we're gonna use is
02:47 - git
02:48 - clone and then paste the link
02:52 - and this is going to clone what we have
02:54 - so far
02:55 - inside of
02:57 - our
02:59 - repo that we're in in this case it's
03:01 - testing one two three so we're going to
03:03 - enter
03:06 - okay cool okay now clear this
03:10 - clearing just takes you back to the top
03:13 - now if i were to ls
03:15 - ls allows you to list the items that are
03:17 - in this particular folder
03:19 - and right now we have a folder
03:21 - inside of here called testing123
03:24 - okay which is the exact name of our
03:27 - repository now if i wanted to i could
03:30 - have just created a folder
03:32 - on my desktop
03:34 - well i didn't have to really create a
03:35 - folder on my desktop and i always make
03:38 - that mistake of
03:41 - making a folder and then making
03:43 - and then cloning it and then
03:45 - here i have
03:46 - two folders in here but i don't really
03:48 - need it that's a common mistake and i
03:50 - still
03:51 - will sometimes make that mistake as you
03:53 - can tell
03:54 - so i'm going to just go into this
03:57 - testing123 so change directory on a mac
04:00 - it's cd
04:02 - and then if i ls again it should give me
04:04 - that readme file that i was looking for
04:06 - earlier so here is this readme file and
04:09 - if i wanted to open this readme file
04:13 - uh
04:14 - i can do
04:16 - [Music]
04:22 - yeah i'll just go the ad old-fashioned
04:24 - way add project folder
04:28 - and uh
04:32 - actually
04:37 - let's just use this one instead
04:42 - okay so
04:45 - from our desktop if we just go into this
04:48 - testing one two there should be a folder
04:50 - called testing123
04:53 - we should be able to go into that and
04:54 - then if we ls it's going to show what's
04:57 - in this folder and it's just that readme
05:00 - file
05:01 - that's here
05:05 - okay
05:07 - so
05:10 - now i've lost my atom
05:13 - here it is
05:14 - so i want to use this one i'm going to
05:17 - open this one
05:18 - and you see when you open it inside of
05:21 - your text editor
05:22 - it has um
05:25 - like this little
05:26 - link here this is your github this means
05:28 - it's connected to github that's what
05:30 - that means and of course as your doc get
05:31 - files you can get ignored all those
05:34 - things and here's your readme file right
05:36 - so it has your description in it for
05:38 - right now
05:39 - um
05:40 - this is basically for
05:43 - uh future
05:46 - directions
05:48 - on how to use
05:50 - your app
05:52 - um also this is like i mentioned earlier
05:55 - earlier this is where you put the
05:57 - technologies
05:59 - used in app
06:01 - and i'm just writing this down so
06:03 - um hopefully it'll help you um and then
06:06 - also
06:09 - technology is used in app
06:11 - and then
06:12 - any
06:14 - like yeah general directions sometimes
06:17 - if it's a
06:18 - if it's something where you can
06:20 - participate in
06:21 - um
06:22 - like open source project they'll have
06:24 - like directions
06:27 - on how to
06:29 - um
06:30 - contribute
06:33 - to open source
06:36 - so i mean
06:39 - that's another thing that you can
06:41 - utilize this for
06:42 - so as you can see it also has changes
06:45 - highlighted off to the side depending on
06:48 - which text text editor you're using is
06:50 - going to depend on
06:52 - what color it is
06:54 - but these just means that these were
06:56 - added to here to this file
07:00 - i'm also going to
07:02 - add a new file and it's just going to be
07:05 - an html file i'm just going to go ahead
07:07 - and save it and as you can see i'm
07:10 - inside of this directory desktop 123 and
07:13 - then here is the app that i'm in
07:16 - so i'm just going to say test.html
07:22 - and everything tests
07:32 - okay
07:33 - so now we have a new file and then we
07:35 - also have some changes
07:37 - so if i go back to my command line
07:40 - and i do a
07:41 - git
07:42 - status i always recommend doing a get
07:46 - status whenever you're working with git
07:49 - especially if you get a little lost
07:51 - no pun intended
07:53 - it'll kind of tell you what to do in
07:55 - most cases and point you in the right
07:57 - direction
07:58 - so basically what this is telling me
08:01 - is that i have some changes here that
08:03 - i've modified i've got a new file that
08:05 - i've added but it's not in git right now
08:09 - so it's untracked
08:10 - um so it can't really tell me anything
08:13 - about it because i don't have it inside
08:15 - of my repo or my repository
08:19 - and then it says use get add and or get
08:21 - commit dash a and so it's basically
08:24 - telling you what you can do right and it
08:27 - also says at the top here use git add
08:30 - and then the file name
08:31 - and to update what will be committed
08:34 - okay so i'm going to do git add
08:38 - myself personally i do the period i do
08:40 - get add period and that adds all the
08:42 - files
08:43 - um
08:45 - usually if i'm at work and there is only
08:47 - one file or there's only one file that i
08:50 - want to be committed to this
08:52 - particular branch that i work in
08:54 - branches at work so if it's only one
08:57 - particular folder i want to add to this
09:00 - or one file i want to add to it then
09:02 - i'll just add that particular file
09:04 - so i would do something like uh
09:07 - this
09:08 - so i would copy it and then i'm just
09:11 - gonna paste it
09:13 - right
09:14 - and then you could do the same thing
09:15 - with this
09:19 - and then paste this as well so it's
09:22 - basically saying you want to add test
09:24 - html and readme.html
09:27 - and then if i enter
09:29 - i can do another get status
09:32 - okay now instead of red
09:34 - now instead of being in red like it was
09:36 - up here it's green which means hey
09:39 - we're almost there right so these are
09:42 - changes that need to be committed so if
09:44 - i go back over here and refresh
09:47 - it's still not going to show up here
09:50 - inside of my repo because they're not
09:52 - committed and they're definitely not
09:54 - pushed
09:56 - so if i do a git commit
09:59 - dash m always do
10:02 - dash m because that's the message that
10:04 - you're gonna put on github
10:06 - these messages are really important when
10:08 - you're when you're working in a group
10:10 - and they're also important when you have
10:11 - your own project
10:13 - because they're kind of like little
10:15 - reminders of what you did and and um to
10:18 - these files that you're in so it's very
10:20 - important uh i use i tell everybody like
10:24 - make your messages count
10:26 - because one day you're gonna go back and
10:28 - read them sometimes mine can get a
10:30 - little crazy especially while i'm
10:32 - working i'd like to make sure that i
10:34 - know what what these files are
10:37 - because a lot of times i'm doing like a
10:40 - feature that's inside of these files
10:42 - that i'm using or something like that or
10:44 - updates and i want to make sure that i'm
10:46 - keeping track of what i'm updating the
10:49 - whole point of github is so that you can
10:52 - track your changes and everything and i
10:54 - feel like if you're not tracking what
10:57 - you're actually doing
10:58 - like in an actual message if it doesn't
11:01 - make any sense then it's kind of
11:04 - you know ridiculous really because then
11:06 - i mean you can go back and look at the
11:07 - code or whatever but
11:09 - it makes more sense to go ahead and be
11:11 - like okay this is what i actually did in
11:13 - a message rather than reading through
11:15 - all the files
11:20 - so i added a test
11:22 - html file
11:24 - and updated readme
11:28 - with
11:29 - how to use
11:31 - it
11:34 - kind of vague but
11:37 - if i go back and look at this i'll know
11:38 - what i mean
11:41 - okay now it tells me
11:43 - that
11:44 - it tells me my message and it also signs
11:47 - it like an id number and it tells me
11:49 - that it's on master
11:51 - master is going to be
11:54 - the
11:55 - branch that you're on when you first
11:57 - create a new project when you first
11:59 - create a new repo in github
12:03 - this master is going to be what you're
12:05 - on if you want to have another branch
12:08 - which i definitely recommend doing and
12:09 - we'll go over
12:12 - then you'll want to create a new branch
12:15 - and then this will not say branch master
12:18 - it'll say branch whatever name that you
12:21 - call it here
12:22 - but that's for a later video
12:24 - for right now we just want our to get
12:26 - our project up and to do that we can use
12:28 - master
12:29 - and this is under the assumption that
12:31 - you're working on this project on your
12:33 - own and you haven't formulated inside of
12:35 - a group yet you just want your code on
12:37 - github
12:38 - okay so it told me that i've got two
12:41 - files changed and it tells me
12:43 - what has been inserted i haven't deleted
12:45 - anything from these files if i did it
12:48 - would have told me
12:49 - um deletions as well
12:52 - okay
12:53 - and then
12:56 - if we want to push this to our page
12:59 - because still
13:01 - if i refresh over here there's still
13:03 - nothing here
13:04 - it's like oh man it's still not there so
13:07 - if you do a get push origin
13:10 - master
13:12 - origin master is going to be
13:14 - the branch that we're on in this case
13:17 - like i mentioned we're on master so
13:18 - that's that's what we're gonna push to
13:21 - and if i enter it's gonna
13:23 - um work its magic which is basically
13:25 - pushing all of our data up there and it
13:28 - tells you kind of how long it takes and
13:30 - um
13:31 - what it's doing in the process which is
13:33 - cool
13:35 - so if i refresh i should see i should
13:37 - see my files and i do
13:39 - um you see i have my new updates here
13:42 - which it didn't really
13:44 - look how i thought it was going to look
13:46 - but hmm
13:47 - something to think about and then it has
13:49 - my html here that i had just made
13:54 - so that's how you do it if you're
13:56 - looking to
13:58 - push up your project to
14:00 - github this is
14:02 - pretty much the directions you need in
14:03 - order to do it if we want to recount
14:06 - what we did we basically created a new
14:08 - repo in our
14:10 - [Music]
14:11 - or repository in our interface which is
14:14 - over here
14:15 - and then we got the url
14:19 - we cloned it
14:20 - over here
14:22 - let's see
14:23 - i can't go up yes i can
14:25 - we cloned it here
14:28 - to our actual machine
14:30 - and then we went through the process of
14:32 - get status which i told you was a big
14:34 - one to use if you ever get lost
14:36 - um and then we basically after that we
14:41 - um
14:42 - we added our files
14:44 - we committed our files
14:47 - and then we pushed them
14:50 - and that's pretty much it
14:52 - any other changes you'll do the same
14:54 - thing you'll add them
14:57 - and then you could add each individual
14:59 - file if you want
15:01 - like i did here or you can do
15:05 - get
15:06 - ad a
15:08 - which
15:09 - you won't have to list them all out it
15:10 - will just add them off for you
15:13 - and then commit
15:15 - and push that's pretty much it so don't
15:17 - be afraid of the command line guys it's
15:19 - your friend trust me
15:24 - we're going to be working on branching
15:26 - creating your own branch and then
15:28 - pushing up to your branch so branching
15:31 - is important because when you're working
15:32 - as a team
15:34 - you'll want to be working on your own
15:36 - branch so what that means is you have a
15:39 - copy of whatever is in master
15:42 - so
15:43 - this would be my master and if i create
15:46 - a branch then that is mine right that's
15:49 - my branch that's my copy of master
15:53 - and with that copy of master i can make
15:56 - my own changes
15:57 - and then push them up to my branch
16:01 - and then when i get done
16:03 - say that i'm working on a feature to
16:06 - add a navigation to the website right i
16:10 - make my navigation in my branch and then
16:13 - i do a pull request the team looks at it
16:16 - okays it
16:17 - after changes are made and then it gets
16:21 - pushed to master when it's in master
16:24 - it's essentially
16:26 - um that's the branch that you want to
16:28 - put into production you don't want to
16:31 - put your
16:32 - personal branch into production you want
16:34 - to put your master branch into
16:36 - production you want it to be the best
16:38 - updated copy that you can get right so
16:41 - right now
16:42 - if i did a git
16:44 - branch
16:45 - i think i spoke about this in my last
16:47 - video
16:49 - and by the way
16:50 - i'm gonna link the last video up
16:53 - in the link description bar if i haven't
16:55 - already
16:57 - um so i'm gonna do a get branch and
16:59 - that's gonna tell me what branches i
17:01 - have and what current one i'm under so i
17:04 - have a branch called master which
17:06 - everyone has by default whenever you
17:08 - create your github
17:10 - repo
17:11 - and then it's got a asterisk by it
17:13 - meaning it's the current one and it's
17:15 - green so that's the current one that
17:16 - we're on i want to create a new branch
17:20 - in order to do that i'm going to do get
17:23 - branch and then the branch name i'm
17:25 - going to call mine test
17:27 - now it doesn't return anything to you
17:29 - but if you do another get branch
17:32 - now you have a master and a test
17:36 - pretty cool pretty simple
17:38 - if i want to see
17:40 - if i want to be on that test branch then
17:44 - i'm going to do git
17:47 - check out
17:49 - and then the name of the branch
17:52 - and it told me that it switched to
17:54 - branch test if we wanted to check for
17:56 - ourselves
17:58 - now
17:59 - test is highlighted green
18:01 - and
18:02 - um it's got the asterisks by it now
18:05 - another good thing is that when you are
18:07 - inside of your text editor
18:10 - and it's hooked up to your github it'll
18:12 - tell you this one's a little small you
18:14 - may not be able to see it but at the
18:16 - bottom it says hey i'm on my test branch
18:20 - if i moved back
18:23 - very quickly
18:25 - tells me i moved to master
18:27 - and if i go here it's switched back to
18:30 - master
18:31 - so that's kind of a good indication
18:33 - that you are on the right branch
18:37 - believe it or not i use that all day
18:39 - making sure i'm not making updates to
18:41 - the master branch and pushing things up
18:43 - that aren't supposed to be pushed up yet
18:46 - although i haven't made that mistake
18:47 - before but hey it happens
18:49 - so we are in our test branch what i'm
18:52 - gonna do
18:54 - oh i'm going to go here
18:56 - and i'm going to refresh
18:59 - as you can see nothing has happened we
19:02 - got one branch still
19:03 - no changes
19:05 - i'm going to make a change
19:08 - while i'm in test see i'm on my test
19:11 - branch and remember i said something
19:13 - about the navigation so we're going to
19:14 - add to our navigation
19:20 - and this project that i'm working with
19:22 - is for a old youtube series i did with
19:26 - html and css it's just a basic html css
19:29 - website if you want to check that out
19:30 - i'll link that in the description bar
19:32 - above and you can check that out
19:35 - so i'm just going to add a list item tag
19:38 - and it's going to just say test in it
19:41 - that's it
19:42 - so now i'm going to do a git status
19:46 - alright so now
19:48 - we have some things
19:49 - it tells me that i have some changes a
19:51 - file has been modified and these changes
19:54 - are not committed which means they're
19:55 - not saved which means they are not on my
19:57 - branch
20:00 - they're not saved to my branch so to
20:02 - speak so i'm going to save them to my
20:04 - branch because i want to record this
20:05 - change because it's an important change
20:07 - for my project
20:09 - so i'm going to do git add
20:13 - copy this paste it the next thing is git
20:16 - commit and i'm kind of running through
20:18 - this because i did this in the last
20:19 - video
20:20 - this message is just going to say
20:24 - added
20:25 - a link to
20:26 - [Music]
20:28 - nav
20:30 - push
20:32 - i mean
20:33 - enter and then i'm going to push this
20:35 - change
20:37 - origin and instead of master i'm going
20:40 - to do test
20:42 - test is the name of my branch which
20:44 - means that if your branch is called
20:47 - hunky dory
20:48 - then you want to say get push origin
20:50 - hockey dory so it's pushing my changes
20:53 - to this branch now if i go over here we
20:55 - notice some changes happening when i
20:57 - refresh this real quick
20:59 - now it says i have two branches whereas
21:01 - before it said i only had one so if i
21:04 - click on it it now shows this test
21:06 - branch
21:07 - is my branch and it's an active branch
21:10 - okay
21:11 - and then it also shows me hey
21:15 - you just recently pushed to this do you
21:17 - want to make a pull request
21:19 - and that's what it says here so we'll go
21:21 - over that later
21:24 - so like i said the point of a branch so
21:26 - that you could work on your changes make
21:28 - your mistakes before you push them up to
21:30 - master another thing i didn't mention
21:33 - about branching is
21:35 - naming your branch so if i wanted to
21:37 - name a branch
21:39 - name
21:40 - is
21:41 - test
21:43 - here
21:44 - whatever you want to name it you could
21:46 - have underscores
21:48 - you can have
21:49 - dashes if you wanted to
21:52 - you can do camel case as well
21:55 - and then if i enter
21:57 - that's just created a new branch which i
21:59 - don't really need but you see here
22:02 - this is now now my branch name
22:04 - uh
22:06 - you don't want to have a you probably
22:08 - won't want to have a mix of camel case
22:11 - dashes and underscores
22:13 - but if you want to just name your branch
22:15 - name underscore is test all lower case
22:19 - that's probably a better practice or if
22:21 - you want to say
22:22 - name
22:25 - is test
22:26 - camel case then that's a another good
22:28 - thing to do
22:30 - and what i'm talking about is like this
22:33 - get branch name is test
22:37 - so you could do that
22:38 - or
22:39 - you could do name
22:41 - oops dash
22:43 - is
22:45 - dash
22:46 - test all lower case with dashes in
22:48 - between
22:49 - or you can just do underscores name is
22:52 - underscore test so that's another way to
22:55 - do it if you'd like
22:56 - i'd say stay consistent with whatever
22:59 - you're going to use
23:02 - with your branch names you don't want to
23:05 - have them all
23:06 - some of them camel case some of them
23:08 - dashes some of them underscores it gets
23:10 - to be a little
23:11 - crazy to look at
23:16 - so what we're going to do now is we're
23:18 - going to
23:19 - do a pull request at this point so
23:23 - we've
23:25 - got our code up onto github so far
23:28 - we've created a branch we know how to
23:30 - name our branch
23:31 - now we want to make a pull request and
23:34 - have others review it alright so let's
23:38 - get started
23:39 - i'm already in my
23:41 - terminal here i'm in the correct folder
23:44 - that i'm in
23:45 - and i've got my github up and i've also
23:47 - got um
23:50 - my
23:52 - web page up here
23:54 - if i want to make a pull request on the
23:55 - branch i just go here to branches
23:58 - sometimes it'll show up on that main
24:00 - page in yellow if there's been recent
24:02 - changes
24:03 - but for mine it didn't show up but
24:06 - this is another way that you can make a
24:08 - pull request so you just click over here
24:10 - new pull request
24:13 - okay
24:15 - and it has right here
24:17 - this is the commit message
24:19 - that i had and if i want to i could add
24:21 - additional things in this here box
24:24 - i can say
24:27 - this is normally where you would put a
24:29 - more
24:31 - descriptive
24:33 - [Music]
24:35 - description
24:37 - of
24:39 - what it is you accomplished
24:42 - with this
24:45 - branch and pull request
24:50 - also if you have any additional screen
24:53 - shots that you'd like
24:58 - insert them here
25:01 - just to kind of give you as much
25:02 - information about what happened as you
25:04 - can possibly can remember this is what's
25:07 - going to be
25:08 - live
25:09 - right so when you're making a pull
25:11 - request you're basically saying this is
25:13 - as best as it's going to be
25:15 - and i want you to review this so we can
25:17 - make this change live that's what this
25:19 - is
25:21 - and if you haven't already you could
25:23 - assign yourself to this
25:25 - you could assign others if you're in a
25:27 - group
25:29 - as well
25:30 - you can request someone to review it
25:32 - those types of things labels projects
25:35 - milestones they've got a lot of things
25:37 - in here to keep you organized create
25:39 - pull requests
25:43 - all right great so all it has is
25:46 - my my
25:48 - commit message here the number the
25:51 - number of pull requests that it is this
25:53 - happens to be number three
25:55 - and then it has my description if i had
25:57 - any additional information now you could
25:59 - easily since there's no conflicts you
26:01 - could easily just say merge pull request
26:03 - but there's really no fun in doing that
26:05 - and it's really not the right way if
26:08 - that you would like to practice on doing
26:09 - this so i'm going to click command line
26:12 - instructions
26:14 - and it basically gives you the entire
26:16 - instructions on
26:18 - what you need to do
26:42 - okay so i'm just going to go through and
26:44 - follow the directions
26:46 - it's going to fetch the origin which is
26:49 - going to fetch
26:51 - the
26:52 - the main part of this branch which is
26:54 - technically your master
26:58 - the second thing you want to do
27:01 - is you want to check out the branch that
27:04 - is on this master
27:11 - and it's going to tell you that that you
27:13 - have now switched
27:15 - to
27:16 - this new branch
27:18 - from your origin
27:22 - the next thing is
27:24 - get merge master
27:29 - so you're getting the latest changes
27:31 - from master
27:33 - everything's already up to date on my
27:35 - end so i didn't need to make any changes
27:37 - sometimes your branch is behind so you
27:40 - just want to get the latest changes from
27:42 - there
27:44 - if i go over here i now see that i am on
27:49 - test
27:50 - down here hopefully you can see that
27:52 - um and then also now i have a list item
27:56 - called test
27:57 - and if i were to go over here and
27:59 - refresh my page
28:00 - now i have test as a link it doesn't go
28:03 - anywhere i didn't tell it to so it's
28:05 - just a link here
28:07 - okay so i've checked it out everything
28:09 - checks out all right
28:11 - this is something i want to merge into
28:12 - my project or the final piece of project
28:16 - and i'm going to do that now
28:18 - now if i haven't said so already i do
28:20 - recommend that you have somebody else on
28:22 - your team
28:23 - look over your pull request
28:26 - you really shouldn't be reviewing your
28:27 - own pull requests
28:29 - it doesn't really make any sense for you
28:31 - to do so
28:32 - you did the work so you don't want to
28:34 - look over your own work you have you
28:36 - need a second pair of eyes to do so
28:39 - so
28:40 - with that being said i want to merge
28:42 - these changes so i'm going to get
28:44 - checkout master
28:47 - and now switch to master and if i wanted
28:50 - to check that
28:53 - it now shows that master is here and i'm
28:56 - no longer on test
28:59 - now this is the piece that's important
29:02 - this is what merges your branch
29:05 - right here
29:08 - now you may see them show up here um
29:13 - honestly i never make a a commit message
29:16 - here because that's what it's telling
29:18 - you to do i honestly never do that
29:20 - because i already have the message i
29:22 - want
29:23 - um
29:24 - up here that's descriptive enough for me
29:27 - there might be a reason for this if it
29:29 - is i'm not sure
29:31 - but i normally just
29:33 - uh colon
29:34 - cue to get out of them and to take me
29:37 - back to my text editor
29:40 - and this tells you the changes that were
29:42 - made in the files that were updated
29:45 - the very last thing you need to do is
29:47 - just push this into your master branch
29:54 - and that's working its magic it's
29:56 - writing things
29:58 - it's adding things to your master and
30:01 - it's done
30:02 - so if i go back here
30:04 - that message
30:06 - this get push origin master basically
30:09 - um
30:11 - merged
30:12 - my branch into master
30:15 - and
30:16 - it's telling me now that it's merged
30:19 - which is great which means i'm done you
30:22 - could delete the branch from here if
30:23 - you'd like or you could delete it from
30:25 - the terminal i recommend doing it from
30:27 - the terminal we'll do that in a second
30:30 - so
30:31 - this is it
30:33 - now if you click on pull request there's
30:34 - no more if you go back to your code
30:37 - it now has your added link to navbar
30:39 - message here
30:40 - if you click into it
30:42 - you can see that as well
30:45 - if you were to refresh you should still
30:47 - see test because it's now merged in the
30:49 - master and we are on the master branch
30:51 - and everything is up to date
30:53 - so that is all you do
30:55 - if you wanted to delete this branch
30:57 - after you're done with it you don't want
30:58 - it anymore you don't want to see it when
31:00 - you do get branch
31:02 - all you have to do is
31:05 - get branch
31:07 - the name of the branch dash capital d
31:11 - and get rid of that
31:15 - okay where did you get branch again it
31:17 - is gone
31:18 - so that's it guys

Cleaned transcript:

hey guys my name is tiffany thank you for joining me you can't see me but i'm here i decided to do like a little intro to github how do i post a new project to github because i i realized a lot of people they're afraid to use the command line and then or the terminal and then they're also afraid to use get some as a new developer um and you definitely shouldn't be afraid to use it these are tools that are gonna make your life easier once you master them i'm going to be on my profile and then i'm going to go to repositories and remember this is just to get a new get this is just to get a new repository on your github page so when you click on it you are able to see the code and everything so this is the process that we're doing okay so i'm gonna go back to here go to repositories i'm gonna click new this part is fine to do on your um your interface it's fine i'm just gonna call this testing one two three okay and and you could put a description here um testing github repo it's almost a good idea to always do that as well as to initialize with a readme what this readme does is the readme is basically going to allow you the ability for others the ability to to read what's going on before they decide to um want to either make a fork or website or clone it or s or of the sort so the readme is important that's where you put the technologies that you're using that's what you use to give instructions to the user if there's additional instructions so i'm going to create a repository and now i have a repo well not really [Laughter] so what i have now is basically this um readme file that says testing one two three that's all it is and then here it has my description that i had okay so what we're going to do instead of doing these we're going to go through the command line and do this so what i am um going to do is i'm gonna clone this so i'm gonna copy this url so i can put it here so the command that we're gonna use is git clone and then paste the link and this is going to clone what we have so far inside of our repo that we're in in this case it's testing one two three so we're going to enter okay cool okay now clear this clearing just takes you back to the top now if i were to ls ls allows you to list the items that are in this particular folder and right now we have a folder inside of here called testing123 okay which is the exact name of our repository now if i wanted to i could have just created a folder on my desktop well i didn't have to really create a folder on my desktop and i always make that mistake of making a folder and then making and then cloning it and then here i have two folders in here but i don't really need it that's a common mistake and i still will sometimes make that mistake as you can tell so i'm going to just go into this testing123 so change directory on a mac it's cd and then if i ls again it should give me that readme file that i was looking for earlier so here is this readme file and if i wanted to open this readme file uh i can do yeah i'll just go the ad oldfashioned way add project folder and uh actually let's just use this one instead okay so from our desktop if we just go into this testing one two there should be a folder called testing123 we should be able to go into that and then if we ls it's going to show what's in this folder and it's just that readme file that's here okay so now i've lost my atom here it is so i want to use this one i'm going to open this one and you see when you open it inside of your text editor it has um like this little link here this is your github this means it's connected to github that's what that means and of course as your doc get files you can get ignored all those things and here's your readme file right so it has your description in it for right now um this is basically for uh future directions on how to use your app um also this is like i mentioned earlier earlier this is where you put the technologies used in app and i'm just writing this down so um hopefully it'll help you um and then also technology is used in app and then any like yeah general directions sometimes if it's a if it's something where you can participate in um like open source project they'll have like directions on how to um contribute to open source so i mean that's another thing that you can utilize this for so as you can see it also has changes highlighted off to the side depending on which text text editor you're using is going to depend on what color it is but these just means that these were added to here to this file i'm also going to add a new file and it's just going to be an html file i'm just going to go ahead and save it and as you can see i'm inside of this directory desktop 123 and then here is the app that i'm in so i'm just going to say test.html and everything tests okay so now we have a new file and then we also have some changes so if i go back to my command line and i do a git status i always recommend doing a get status whenever you're working with git especially if you get a little lost no pun intended it'll kind of tell you what to do in most cases and point you in the right direction so basically what this is telling me is that i have some changes here that i've modified i've got a new file that i've added but it's not in git right now so it's untracked um so it can't really tell me anything about it because i don't have it inside of my repo or my repository and then it says use get add and or get commit dash a and so it's basically telling you what you can do right and it also says at the top here use git add and then the file name and to update what will be committed okay so i'm going to do git add myself personally i do the period i do get add period and that adds all the files um usually if i'm at work and there is only one file or there's only one file that i want to be committed to this particular branch that i work in branches at work so if it's only one particular folder i want to add to this or one file i want to add to it then i'll just add that particular file so i would do something like uh this so i would copy it and then i'm just gonna paste it right and then you could do the same thing with this and then paste this as well so it's basically saying you want to add test html and readme.html and then if i enter i can do another get status okay now instead of red now instead of being in red like it was up here it's green which means hey we're almost there right so these are changes that need to be committed so if i go back over here and refresh it's still not going to show up here inside of my repo because they're not committed and they're definitely not pushed so if i do a git commit dash m always do dash m because that's the message that you're gonna put on github these messages are really important when you're when you're working in a group and they're also important when you have your own project because they're kind of like little reminders of what you did and and um to these files that you're in so it's very important uh i use i tell everybody like make your messages count because one day you're gonna go back and read them sometimes mine can get a little crazy especially while i'm working i'd like to make sure that i know what what these files are because a lot of times i'm doing like a feature that's inside of these files that i'm using or something like that or updates and i want to make sure that i'm keeping track of what i'm updating the whole point of github is so that you can track your changes and everything and i feel like if you're not tracking what you're actually doing like in an actual message if it doesn't make any sense then it's kind of you know ridiculous really because then i mean you can go back and look at the code or whatever but it makes more sense to go ahead and be like okay this is what i actually did in a message rather than reading through all the files so i added a test html file and updated readme with how to use it kind of vague but if i go back and look at this i'll know what i mean okay now it tells me that it tells me my message and it also signs it like an id number and it tells me that it's on master master is going to be the branch that you're on when you first create a new project when you first create a new repo in github this master is going to be what you're on if you want to have another branch which i definitely recommend doing and we'll go over then you'll want to create a new branch and then this will not say branch master it'll say branch whatever name that you call it here but that's for a later video for right now we just want our to get our project up and to do that we can use master and this is under the assumption that you're working on this project on your own and you haven't formulated inside of a group yet you just want your code on github okay so it told me that i've got two files changed and it tells me what has been inserted i haven't deleted anything from these files if i did it would have told me um deletions as well okay and then if we want to push this to our page because still if i refresh over here there's still nothing here it's like oh man it's still not there so if you do a get push origin master origin master is going to be the branch that we're on in this case like i mentioned we're on master so that's that's what we're gonna push to and if i enter it's gonna um work its magic which is basically pushing all of our data up there and it tells you kind of how long it takes and um what it's doing in the process which is cool so if i refresh i should see i should see my files and i do um you see i have my new updates here which it didn't really look how i thought it was going to look but hmm something to think about and then it has my html here that i had just made so that's how you do it if you're looking to push up your project to github this is pretty much the directions you need in order to do it if we want to recount what we did we basically created a new repo in our or repository in our interface which is over here and then we got the url we cloned it over here let's see i can't go up yes i can we cloned it here to our actual machine and then we went through the process of get status which i told you was a big one to use if you ever get lost um and then we basically after that we um we added our files we committed our files and then we pushed them and that's pretty much it any other changes you'll do the same thing you'll add them and then you could add each individual file if you want like i did here or you can do get ad a which you won't have to list them all out it will just add them off for you and then commit and push that's pretty much it so don't be afraid of the command line guys it's your friend trust me we're going to be working on branching creating your own branch and then pushing up to your branch so branching is important because when you're working as a team you'll want to be working on your own branch so what that means is you have a copy of whatever is in master so this would be my master and if i create a branch then that is mine right that's my branch that's my copy of master and with that copy of master i can make my own changes and then push them up to my branch and then when i get done say that i'm working on a feature to add a navigation to the website right i make my navigation in my branch and then i do a pull request the team looks at it okays it after changes are made and then it gets pushed to master when it's in master it's essentially um that's the branch that you want to put into production you don't want to put your personal branch into production you want to put your master branch into production you want it to be the best updated copy that you can get right so right now if i did a git branch i think i spoke about this in my last video and by the way i'm gonna link the last video up in the link description bar if i haven't already um so i'm gonna do a get branch and that's gonna tell me what branches i have and what current one i'm under so i have a branch called master which everyone has by default whenever you create your github repo and then it's got a asterisk by it meaning it's the current one and it's green so that's the current one that we're on i want to create a new branch in order to do that i'm going to do get branch and then the branch name i'm going to call mine test now it doesn't return anything to you but if you do another get branch now you have a master and a test pretty cool pretty simple if i want to see if i want to be on that test branch then i'm going to do git check out and then the name of the branch and it told me that it switched to branch test if we wanted to check for ourselves now test is highlighted green and um it's got the asterisks by it now another good thing is that when you are inside of your text editor and it's hooked up to your github it'll tell you this one's a little small you may not be able to see it but at the bottom it says hey i'm on my test branch if i moved back very quickly tells me i moved to master and if i go here it's switched back to master so that's kind of a good indication that you are on the right branch believe it or not i use that all day making sure i'm not making updates to the master branch and pushing things up that aren't supposed to be pushed up yet although i haven't made that mistake before but hey it happens so we are in our test branch what i'm gonna do oh i'm going to go here and i'm going to refresh as you can see nothing has happened we got one branch still no changes i'm going to make a change while i'm in test see i'm on my test branch and remember i said something about the navigation so we're going to add to our navigation and this project that i'm working with is for a old youtube series i did with html and css it's just a basic html css website if you want to check that out i'll link that in the description bar above and you can check that out so i'm just going to add a list item tag and it's going to just say test in it that's it so now i'm going to do a git status alright so now we have some things it tells me that i have some changes a file has been modified and these changes are not committed which means they're not saved which means they are not on my branch they're not saved to my branch so to speak so i'm going to save them to my branch because i want to record this change because it's an important change for my project so i'm going to do git add copy this paste it the next thing is git commit and i'm kind of running through this because i did this in the last video this message is just going to say added a link to nav push i mean enter and then i'm going to push this change origin and instead of master i'm going to do test test is the name of my branch which means that if your branch is called hunky dory then you want to say get push origin hockey dory so it's pushing my changes to this branch now if i go over here we notice some changes happening when i refresh this real quick now it says i have two branches whereas before it said i only had one so if i click on it it now shows this test branch is my branch and it's an active branch okay and then it also shows me hey you just recently pushed to this do you want to make a pull request and that's what it says here so we'll go over that later so like i said the point of a branch so that you could work on your changes make your mistakes before you push them up to master another thing i didn't mention about branching is naming your branch so if i wanted to name a branch name is test here whatever you want to name it you could have underscores you can have dashes if you wanted to you can do camel case as well and then if i enter that's just created a new branch which i don't really need but you see here this is now now my branch name uh you don't want to have a you probably won't want to have a mix of camel case dashes and underscores but if you want to just name your branch name underscore is test all lower case that's probably a better practice or if you want to say name is test camel case then that's a another good thing to do and what i'm talking about is like this get branch name is test so you could do that or you could do name oops dash is dash test all lower case with dashes in between or you can just do underscores name is underscore test so that's another way to do it if you'd like i'd say stay consistent with whatever you're going to use with your branch names you don't want to have them all some of them camel case some of them dashes some of them underscores it gets to be a little crazy to look at so what we're going to do now is we're going to do a pull request at this point so we've got our code up onto github so far we've created a branch we know how to name our branch now we want to make a pull request and have others review it alright so let's get started i'm already in my terminal here i'm in the correct folder that i'm in and i've got my github up and i've also got um my web page up here if i want to make a pull request on the branch i just go here to branches sometimes it'll show up on that main page in yellow if there's been recent changes but for mine it didn't show up but this is another way that you can make a pull request so you just click over here new pull request okay and it has right here this is the commit message that i had and if i want to i could add additional things in this here box i can say this is normally where you would put a more descriptive description of what it is you accomplished with this branch and pull request also if you have any additional screen shots that you'd like insert them here just to kind of give you as much information about what happened as you can possibly can remember this is what's going to be live right so when you're making a pull request you're basically saying this is as best as it's going to be and i want you to review this so we can make this change live that's what this is and if you haven't already you could assign yourself to this you could assign others if you're in a group as well you can request someone to review it those types of things labels projects milestones they've got a lot of things in here to keep you organized create pull requests all right great so all it has is my my commit message here the number the number of pull requests that it is this happens to be number three and then it has my description if i had any additional information now you could easily since there's no conflicts you could easily just say merge pull request but there's really no fun in doing that and it's really not the right way if that you would like to practice on doing this so i'm going to click command line instructions and it basically gives you the entire instructions on what you need to do okay so i'm just going to go through and follow the directions it's going to fetch the origin which is going to fetch the the main part of this branch which is technically your master the second thing you want to do is you want to check out the branch that is on this master and it's going to tell you that that you have now switched to this new branch from your origin the next thing is get merge master so you're getting the latest changes from master everything's already up to date on my end so i didn't need to make any changes sometimes your branch is behind so you just want to get the latest changes from there if i go over here i now see that i am on test down here hopefully you can see that um and then also now i have a list item called test and if i were to go over here and refresh my page now i have test as a link it doesn't go anywhere i didn't tell it to so it's just a link here okay so i've checked it out everything checks out all right this is something i want to merge into my project or the final piece of project and i'm going to do that now now if i haven't said so already i do recommend that you have somebody else on your team look over your pull request you really shouldn't be reviewing your own pull requests it doesn't really make any sense for you to do so you did the work so you don't want to look over your own work you have you need a second pair of eyes to do so so with that being said i want to merge these changes so i'm going to get checkout master and now switch to master and if i wanted to check that it now shows that master is here and i'm no longer on test now this is the piece that's important this is what merges your branch right here now you may see them show up here um honestly i never make a a commit message here because that's what it's telling you to do i honestly never do that because i already have the message i want um up here that's descriptive enough for me there might be a reason for this if it is i'm not sure but i normally just uh colon cue to get out of them and to take me back to my text editor and this tells you the changes that were made in the files that were updated the very last thing you need to do is just push this into your master branch and that's working its magic it's writing things it's adding things to your master and it's done so if i go back here that message this get push origin master basically um merged my branch into master and it's telling me now that it's merged which is great which means i'm done you could delete the branch from here if you'd like or you could delete it from the terminal i recommend doing it from the terminal we'll do that in a second so this is it now if you click on pull request there's no more if you go back to your code it now has your added link to navbar message here if you click into it you can see that as well if you were to refresh you should still see test because it's now merged in the master and we are on the master branch and everything is up to date so that is all you do if you wanted to delete this branch after you're done with it you don't want it anymore you don't want to see it when you do get branch all you have to do is get branch the name of the branch dash capital d and get rid of that okay where did you get branch again it is gone so that's it guys
