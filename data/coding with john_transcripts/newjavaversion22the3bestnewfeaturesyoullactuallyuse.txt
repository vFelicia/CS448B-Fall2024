00:00 - a brand new version of java is available
00:02 - right now Java 22 adds a lot of new
00:04 - features some of which are under the
00:06 - hood but there's a few really awesome
00:08 - things that you can take advantage of
00:10 - today whether you're an advanced
00:12 - developer or just starting out first
00:14 - this video is sponsored by jetbrains
00:16 - idees so I've done all my Java coding on
00:19 - this channel for years using intellig
00:21 - idea which is jetbrains amazing IDE for
00:24 - Java I also use it for real in my
00:26 - full-time job hours and hours every day
00:29 - now this channel happens to be focused
00:30 - on Java but jet brains has a full Suite
00:33 - of amazing idees carefully designed
00:35 - around specific programming languages
00:37 - and text stacks intell for Java py charm
00:39 - for python C lion for C and C++ and tons
00:43 - more and since they're all based on the
00:45 - same platform once you're comfortable
00:47 - with one of them you'll feel right at
00:48 - home with any of them jeet's idees offer
00:51 - just a ton of functionality and it's all
00:54 - integrated so well with each other
00:56 - autocomplete best in the business even
00:58 - better with AI full s of debugging tools
01:01 - check unit test support you know it I
01:03 - even did an entire video about it get
01:05 - functionality built right in fully
01:07 - integrated database support and honestly
01:09 - that's just scratching the surface jet
01:11 - brain's idees even have an available AI
01:13 - assistant that can answer questions
01:15 - about your code suggest improvements and
01:17 - refactoring and even generate code and
01:20 - entire Suites of unit tests for you
01:23 - automatically when I was creating my cat
01:25 - class it literally suggested an entire
01:28 - meow method for me this AI understands
01:31 - me deeply so head on over to Jet
01:33 - brains.com
01:35 - or click the link down in the
01:37 - description to learn more and download
01:38 - the perfect jet brains IDE for your
01:41 - needs right now I know you'll be happy
01:43 - you did the first new thing being
01:44 - introduced in Java 22 that we're going
01:46 - to talk about is unnamed variables now
01:49 - you might be thinking what even is an
01:51 - unnamed variable how do you create a
01:53 - variable without a name let's do a quick
01:55 - super simple example here to show you an
01:58 - unnamed variable we'll create a cat of
02:00 - course we would create a cat we'll call
02:01 - it my cat so we'll name it for now
02:04 - equals new cat so here of course my cat
02:07 - variable is named my cat but now in Java
02:10 - 22 instead of giving your variable a
02:12 - normal name like my cat you can instead
02:15 - name it with an underscore so literally
02:18 - you can now say cat underscore or cat
02:21 - blank equals new cat now ever since Java
02:24 - 9 up until now underscore by itself has
02:27 - not been a valid identifier probably
02:29 - because they expected to implement
02:31 - functionality like this at some point so
02:32 - if you're using version 9 to 21 right
02:35 - now go ahead and give this a quick try
02:37 - and you'll see you get a compilation
02:38 - error with Java 22 creating a variable
02:41 - with an underscore blank is creating
02:43 - what they call an unnamed variable so
02:45 - now we have this blank cat variable
02:48 - right so what if we actually wanted to
02:49 - do something with it let's say we wanted
02:51 - to make this cat meow so we're going to
02:52 - call the meow method on it well of
02:54 - course we would just call blank. meow
02:58 - but you can see here that when we
02:59 - actually try and use it we get a
03:01 - compilation error that using blank as a
03:04 - reference is not allowed that's because
03:06 - after you create an unnamed variable
03:09 - you're actually not allowed to use it or
03:11 - reference it at all after it's been
03:13 - created you can't read them you can't
03:16 - pass them as arguments into methods and
03:18 - you can't change their values so that
03:20 - begs the question right John I hear you
03:22 - shouting from the other side of the
03:23 - screen what good is a variable if I
03:25 - can't ever reference it after I create
03:27 - it if I can't actually do anything with
03:29 - it
03:30 - why on Earth did the almighty Council of
03:32 - java sages over at Oracle decide this
03:35 - was something that they wanted to add
03:37 - well that's an excellent question and
03:38 - the answer is well you use it when you
03:41 - don't ever want to or need to reference
03:44 - a variable after you create it so in
03:47 - this example it's just not a good idea
03:49 - to use an unnamed variable for this
03:51 - there's no point in creating this new
03:53 - cat object if you can't ever do anything
03:54 - with it but let's go over a few examples
03:57 - of when it would be a good idea to use
03:59 - use an unnamed variable the first
04:01 - situation is probably one that you're
04:03 - all familiar with so you have a try
04:05 - catch setup and you're catching an
04:07 - exception but you absolutely don't want
04:09 - to and don't care to at all do anything
04:13 - with the actual exception object that
04:15 - you get in the catch so for example
04:18 - let's say that in your try you're
04:20 - creating a new int we'll call it my int
04:23 - and to initialize it you're going to
04:24 - call integer. parse int and you're going
04:27 - to parse some string into an INT let's
04:29 - say that string is 12b now when you call
04:32 - parse int there's a chance that you're
04:34 - going to generate a number format
04:35 - exception if the string that you pass in
04:37 - is not a valid number so to take care of
04:39 - that you'll set up your catch and you'll
04:41 - catch number format exception e and
04:44 - normally you'll just name your number
04:45 - format exception something like this
04:47 - either e or NF exception something like
04:51 - that but here intellig is going to give
04:53 - you a warning it's saying hey you should
04:54 - do something when you catch your
04:56 - exception and normally that's true yes
04:58 - you should but sometimes s you just
05:00 - don't care if the exception happens no
05:02 - big deal just catch it and move on or
05:05 - maybe you do want to do something and
05:06 - you just don't need the exception
05:08 - variable at all to do what you want to
05:10 - do like maybe you just want to print out
05:12 - that is not a number now before Java 22
05:16 - what you might have done is name this
05:18 - variable something like ignored but even
05:21 - better now with the addition of unnamed
05:23 - variables in Java 22 we have a standard
05:26 - way to indicate a variable that you
05:28 - aren't going to use and again if you're
05:30 - using intellig it actually will suggest
05:34 - that as the solution if you hover over
05:36 - catch here it'll say hey your quick fix
05:38 - is rename e to blank and you can go
05:41 - ahead and click it and it takes care of
05:43 - it another great example is when you
05:45 - have an unused variable in your Lambda
05:48 - functions so for example let's say we
05:50 - had a list of cat objects again you knew
05:53 - it was going to be cats let's call it
05:55 - cats equals list of we're going to add
05:58 - three new cats to to our list so new cat
06:01 - new cat and new cat now what if for
06:04 - every cat in this list we just wanted to
06:07 - print out yay cats to the command line
06:10 - well one great way to do that is with a
06:12 - Lambda so we can just say cats. 4 each
06:16 - and for each cat we want to take our cat
06:19 - and we want to print out yay cats but as
06:22 - you can see here we don't actually need
06:25 - this cat variable we need some kind of
06:26 - variable here just to make the syntax of
06:28 - the Lambda happy and if we remove it we
06:30 - get an error so with Java 22 now we can
06:33 - just rename this cat variable to blank
06:36 - just as intellig is suggesting here so
06:38 - now with Java 22 if you're ever in a
06:40 - situation where you need to have a
06:42 - variable name but don't ever need to
06:44 - reference it or use it for anything just
06:46 - go ahead and name it with an underscore
06:48 - and that will not only indicate that you
06:50 - never intend to use it it will also
06:52 - enforce that you can never use it then
06:55 - also of course your co-workers or
06:57 - classmates that see you using it will be
06:58 - jealous that they can't because they're
07:00 - stuck way back in the olden days of java
07:02 - 21 so next have you ever tried to run a
07:05 - multiple file Java program from the
07:07 - command line it probably kind of sucked
07:09 - to try and get it running if you ever
07:11 - got it running at all instead you
07:12 - probably just did what I did and
07:14 - abandoned it completely and started
07:16 - using an IDE well now with a new feature
07:18 - in Java 22 it's way easier let's check
07:21 - it out now if you're an ancient
07:22 - programmer like myself you might
07:24 - remember the olden days where if you
07:26 - wanted to compile and run any Java
07:28 - program it was a two-step process
07:29 - process so first you had to explicitly
07:31 - compile your Java file with Java C then
07:34 - the name of the Java file so cat. Java
07:37 - and only then after your file was
07:39 - compiled Could you actually run it by
07:41 - calling Java cat meow now if you're a
07:44 - really hip and cool programmer like I
07:46 - know that you are you probably already
07:48 - know that since Java 11 you could skip
07:50 - the entire Java C command and just enter
07:53 - Java and the name of your Java file so
07:55 - even if I go in here and delete this
07:58 - class file that it just compiled into I
08:00 - can come back here and just type in Java
08:03 - and then cat. Java and it will
08:05 - automatically compile and run my program
08:08 - for me that's pretty cool but what if
08:10 - you had a program that's more than just
08:12 - one single file you still had to
08:14 - explicitly compile every file in your
08:16 - program with Java C before you could
08:19 - actually run it that means valuable
08:20 - seconds of your life were being wasted
08:22 - away just having to Java C every single
08:24 - file your program had but now with Java
08:26 - 22 that is no longer the case you can
08:28 - now run multifile Java programs just
08:31 - with the Java command on your main class
08:34 - so over here in test. Java you can see
08:37 - that we reference our other cat class
08:40 - that's over in the other file so even
08:42 - though test. Java is a multifile program
08:44 - I can come in here and just type Java
08:47 - test. Java and it will automatically
08:50 - compile and run my program for me all in
08:53 - one single command I think the toughest
08:55 - part of this change will be deciding
08:56 - what you're going to do with all of
08:58 - those critical second that you'll now be
09:00 - saving maybe do a push-up call up that
09:02 - one girl and ask her out trim that beard
09:04 - maybe go outside and see what the Sun
09:06 - looks like nah just kidding you're a
09:08 - programmer you'll find something to do
09:09 - that's actually important like going to
09:11 - complain about Java on Reddit the third
09:13 - feature we're going to talk about is
09:15 - called string templating this is
09:17 - actually a preview feature even in Java
09:19 - 22 so if you want to enable it you need
09:21 - to go into the project structure
09:24 - settings in intellig and then under
09:26 - project click on language level and
09:28 - select 22 preview and then select okay
09:32 - so here's something you've probably done
09:33 - in Java approximately 40 billion times
09:36 - you've combined strings and variables
09:39 - together to create one new string with
09:42 - pluses to concatenate them so for
09:44 - example let's say you've got some
09:46 - variable you know string name equals
09:49 - John and some other variable you know
09:51 - int AG equals 35 and then you want to
09:55 - combine those with some other text to
09:57 - make like a message string so you might
09:58 - do something like string message equals
10:02 - hello my name is then you got to end
10:05 - quote space plus and then name space
10:08 - plus begin your quotes again exclamation
10:11 - point space I am and your quotes plus
10:15 - age plus quote years old and then of
10:19 - course we can print that out if we want
10:21 - to and of course if we go ahead and run
10:23 - this it's going to print out our whole
10:25 - full concatenated string so this works
10:28 - but it can be kind of Clum with all the
10:30 - pluses and the ending quotes and
10:31 - beginning quotes and just kind of
10:33 - unwieldy and hard to read so what you
10:34 - can do now in Java 22 is replace this
10:38 - concatenation with an expression that
10:40 - you embed in the string so instead of
10:43 - end quote plus name plus begin quote
10:46 - here we can have a backslash and then
10:49 - open and close curly braces and then
10:51 - within those curly braces the name of
10:53 - our variable that we want to insert and
10:55 - then we can do the exact same thing with
10:57 - the age here so just backs slash and
11:00 - then in curly braces age now you'll
11:03 - probably notice that right now we get a
11:05 - compilation error here and that's
11:06 - because there's just one more thing
11:07 - that's required to make string
11:09 - templating work properly and that is at
11:11 - the beginning of this string we just
11:12 - need to add St in all caps dot this just
11:16 - tells Java to process this entire
11:18 - expression as a string template and if
11:21 - you have your intellig set up to use
11:23 - Java 22 preview features it will
11:26 - automatically suggest that as a quick
11:28 - fix as well so if you over this it gives
11:30 - us the option to add the St processor
11:34 - where I think this really shines is with
11:36 - text blocks and multi-line strings let
11:39 - me show you what I mean so let's say
11:40 - that instead of just a small string like
11:42 - this we instead had a large multi-line
11:44 - string like some HTML that I am just
11:47 - going to paste in because I am too lazy
11:50 - to type the whole thing out now it's
11:51 - cool that you can use a triple quot like
11:53 - this to make a large you know a text
11:55 - block a multi-line string but when you
11:57 - start having to concatenate in little
11:59 - variables with it it starts to look
12:01 - really messy you know you've got all
12:03 - these extra triple quotes you always
12:05 - have to have a new line after the
12:07 - opening triple quotes and so your ending
12:09 - tag has to be on a separate line from
12:11 - your opening tag it just kind of turns
12:13 - all this into a bit of a mess and now
12:15 - with string templates you can replace
12:17 - all of this wackiness with just slash
12:19 - and then your variable name in curly
12:21 - brackets and then same down here we'll
12:23 - replace all of this which is slash text
12:26 - move this on up and then here at the top
12:28 - add your s TR R do and you're Off to the
12:30 - Races now this I think is awesome it's
12:33 - way more clean and easy to read than
12:35 - what we had before so give all these new
12:37 - Java features to try and let me know
12:39 - what you think and be sure to show them
12:40 - off to everyone in your whole life like
12:43 - make sure Grandma knows about unnamed
12:45 - variables it's crucially important that
12:47 - she stays on the bleeding edge of every
12:49 - new Java release too there are of course
12:51 - other new features that have been added
12:53 - to Java 22 and other recent versions of
12:55 - java that we just didn't have time to go
12:57 - over today so if you or your grandma
12:59 - notice any of these new features that
13:01 - you're curious about that you'd like me
13:03 - to talk about be sure to let me know in
13:05 - the comments below be sure to check out
13:07 - my full Java course linked down in the
13:08 - description below if you haven't already
13:10 - and as always thank you so much for
13:12 - watching and I will see you all next
13:14 - time