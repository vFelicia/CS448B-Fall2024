00:00 - hey guys john here how's it going today
00:02 - we're going to talk all about
00:03 - exception handling in java we're going
00:05 - to be going over
00:06 - what exceptions are how you can handle
00:08 - them with what's called
00:10 - try catch blocks of code what happens
00:12 - when you don't catch them right away
00:14 - some different types of exceptions and
00:16 - what's called the exception
00:17 - hierarchy and finally we're going to
00:19 - learn about finally blocks
00:21 - and what they are and what they do and
00:23 - some super crazy unexpected results you
00:25 - can get if you don't understand
00:27 - what finally blocks do exactly you're
00:29 - definitely going to want to stick around
00:31 - and check that out but first what is an
00:33 - exception an exception is a generally
00:35 - unwanted event that interrupts the
00:39 - normal flow of your program here's a
00:41 - quick example of some simple code
00:43 - that would cause an exception we're
00:44 - trying to parse an
00:46 - int from the string ants you might be
00:49 - familiar with this integer
00:50 - parseint method it just takes a string
00:53 - that you pass in that usually contains
00:55 - a number like one or you know whatever
00:58 - some kind of a number that's
00:59 - uh parsable into an int but here we're
01:02 - trying to
01:03 - parse the end pants let's go ahead and
01:06 - run it we can see we get this number
01:07 - format exception
01:08 - because it can't make a number out of
01:10 - pants trust me
01:12 - try as you might you can't make a number
01:13 - from pants just has to
01:15 - blow up and throw an exception i can't
01:17 - do what you want if you the programmer
01:19 - don't handle this situation
01:20 - your program blows up prints some
01:23 - exception information to the console
01:24 - here that we're looking at and
01:26 - terminates
01:26 - that's it game over but now that is
01:29 - where exception
01:30 - handling comes in so instead of just
01:32 - blowing up and terminating the program
01:33 - you can catch the exception that's
01:35 - thrown and have special code
01:37 - to handle that situation elegantly
01:39 - instead of blowing up
01:40 - in java we do that with try catch code
01:43 - blocks and they look like this
01:46 - first you have a try block and inside
01:48 - the curly brackets here
01:50 - you write any code that you want that
01:53 - might cause an exception in some
01:54 - situations
01:55 - and then underneath that you have a
01:57 - catch block to catch those
01:59 - types of exceptions and then write any
02:01 - code that you want to execute whenever
02:03 - that type of exception
02:04 - happens going back to our pants example
02:06 - from before we go ahead and paste in the
02:08 - code
02:09 - that causes the exception to be thrown
02:12 - in
02:12 - this try block here of course same as
02:15 - before this piece of code will
02:17 - throw a number format exception when we
02:19 - try to parse
02:21 - pants into an integer so we include this
02:24 - catch block that says we will catch a
02:27 - number format exception
02:29 - if it is thrown in the try block
02:32 - get it throw an exception catch an
02:35 - exception it honestly took me
02:37 - way too long into programming to make
02:38 - that connection so in our example when
02:40 - this number format exception is thrown
02:42 - the code inside of our catch block will
02:44 - execute and the program won't have to
02:46 - terminate here so far we don't have any
02:47 - code in our catch block
02:48 - so let's go ahead and add some well
02:50 - basic thing you might want to do is
02:51 - print out a message to the user
02:53 - i wanted to say something like
02:56 - hey dude you can't
03:00 - make an int out of that stop
03:04 - trying to make it happen all right so
03:06 - now when our program tries to parse an
03:09 - end from pants it'll throw an exception
03:11 - that our catch block will catch and
03:12 - we'll see the statement print out let's
03:14 - go ahead and run that
03:16 - and here we see the printout but the
03:17 - program didn't terminate we don't see
03:19 - the big angry stack trace of the
03:21 - exception that we saw last time
03:23 - also it's important to note that if an
03:25 - exception is not thrown
03:26 - this catch block will never be executed
03:29 - so if we
03:30 - go ahead and change this to a normal int
03:32 - string
03:33 - of one we can go ahead and run our
03:35 - program again
03:36 - and we can see we got no output at all
03:38 - the program just finished
03:40 - we can add a little statement here at
03:41 - the end just to prove that the
03:43 - the code is actually running and here
03:45 - run the program again
03:47 - you can see that we finished the program
03:48 - but we never executed this catch block
03:50 - because there was no exception thrown
03:52 - there was no problem
03:53 - so there was nothing that had to catch
03:54 - the exception and handle it
03:56 - it's important to note that the catch
03:58 - block here this type of exception
04:00 - in your catch block uses something
04:02 - called the exception
04:03 - hierarchy and that just means that the
04:05 - type of exception that you put in your
04:07 - catch block
04:08 - will catch only exceptions of that type
04:11 - or any subclass of that exception so as
04:14 - a quick example you'll often see
04:15 - just catch exception e
04:19 - and you can name this exception variable
04:21 - that it catches anything you want
04:22 - often the convention is just to use like
04:24 - the initials of the type of exception
04:27 - that you're handling that's why number
04:29 - format exception was
04:30 - nfe and for exception you'll see
04:33 - exception e so this means it will catch
04:35 - any type of exception at all any class
04:37 - of exception that extends from exception
04:39 - and all of them do this will catch all
04:41 - exceptions and the way we had it before
04:44 - number format exception will catch all
04:46 - types of number format exceptions there
04:47 - could be
04:48 - subclasses of number formatted
04:49 - exceptions for specific types this would
04:51 - catch
04:52 - all of those underneath that umbrella
04:53 - and taking a quick look out of the
04:54 - documentation for a number format
04:56 - exception
04:57 - we can see the we can see the hierarchy
05:00 - that it comes from of course object
05:04 - is the parent of every single class in
05:06 - java and underneath that we have
05:07 - throwables and then right underneath
05:09 - that exception and every type of
05:11 - exception in java is going to be
05:12 - underneath that
05:13 - and a few steps down we find the number
05:14 - format exception
05:16 - one of my favorite terms in programming
05:17 - comes from this
05:19 - when you're catching every type of
05:20 - exception here
05:22 - i've heard it called pokemon exception
05:24 - handling because
05:25 - gotta catch them all now you may have
05:27 - noticed from this uh class a hierarchy
05:29 - here
05:30 - there's also these throwables so it's
05:32 - important to note that there are
05:33 - actually two types of throwables there
05:36 - are exceptions that we're going to talk
05:37 - about here and also
05:38 - errors generally you don't want to be
05:40 - catching errors so you might see some
05:42 - programmers
05:44 - saying catch throwable t here instead of
05:47 - exception e
05:49 - and that's generally not recommended you
05:51 - don't want to be catching just
05:53 - the all throwables because you don't
05:55 - want to catch
05:56 - errors you just want to catch exceptions
05:58 - uh it's it's enough to say it could just
06:00 - cause some really strange
06:01 - unexpected behaviors now in your
06:03 - programs you don't necessarily need to
06:05 - catch your exception right at the exact
06:07 - line that it happens
06:08 - when an exception gets thrown and it's
06:10 - not caught immediately in the method
06:11 - that it's in right then it'll get thrown
06:14 - up to the method that called it that's
06:16 - called the call stack
06:17 - throw an exception goes up the call
06:19 - stack until it is
06:20 - caught by a catch statement like this so
06:23 - for example if we had all of this code
06:26 - and it was in a method
06:29 - just called like get int or something
06:32 - right now we have our try catch in that
06:34 - method but we don't have to
06:36 - often it makes sense to have your try
06:38 - catch in the method
06:40 - that calls the method that's throwing
06:41 - the exception we could
06:43 - refactor it to look like this so what
06:45 - happens here is when this line
06:47 - throws a number format exception and
06:48 - it's not caught immediately in this
06:50 - method
06:51 - it gets thrown up the call stack that
06:54 - just means
06:54 - it's thrown to the method that called
06:57 - this method and in here
06:58 - it's thrown back up to this level in the
07:01 - main method
07:02 - and here we have a try catch
07:05 - so it's going to get thrown out to this
07:06 - level of the call stack and
07:08 - caught by this exception handling code
07:10 - here so let's go ahead and
07:11 - run it yeah our exception handling still
07:14 - worked we've still got the hey dude
07:16 - comment and the code ended with no
07:18 - explosions of an exception
07:20 - and no stack trace printed out to the
07:22 - console another cool thing to note is
07:24 - you can catch
07:24 - multiple types of exceptions with
07:27 - multiple
07:28 - catch blocks so you might have your
07:29 - first catch before like
07:31 - a number format
07:35 - exception and then you could have
07:37 - another block
07:38 - just copy that and paste it to catch a
07:41 - like say maybe a null
07:42 - pointer exception this allows us to have
07:44 - different behavior depending on the type
07:46 - of exception that was thrown
07:48 - say you want to catch different types of
07:49 - exceptions you just want one bit of code
07:52 - to be able to handle
07:53 - multiple different types of exceptions
07:55 - well you're in luck ever since
07:57 - uh java 7 you can have what's called a
08:00 - multi-catch statement and to code one of
08:02 - those we can just
08:03 - get rid of our second catch statement
08:05 - just have number format exception
08:07 - and then to denote the multiple types of
08:09 - exceptions you want to catch here in
08:10 - this block
08:11 - use a bar character the same character
08:13 - you'd use for
08:14 - or statements number format exception or
08:17 - null pointer exception and run the same
08:19 - exception handling code
08:20 - in either case and that way you avoid
08:22 - code duplication while still being able
08:24 - to catch
08:24 - multiple types of exceptions pretty cool
08:27 - finally let's talk about
08:29 - finally blocks but if you want you can
08:31 - include
08:32 - a finally block after your catch block
08:35 - that'll look like this
08:37 - look very similar just finally this
08:40 - all this block does is to contain code
08:42 - that you want to execute
08:44 - whether there was an exception or not it
08:47 - will always execute
08:48 - always always always just as an example
08:52 - let's go ahead and put let's see
08:55 - in the finally block right here
08:59 - so we can see when the finally block is
09:00 - executed just to make things simple
09:02 - we're going to get rid of our extra
09:04 - method here
09:05 - and just put this statement that causes
09:08 - the exception
09:08 - directly in this try block now what will
09:11 - happen is this
09:12 - ants parsing will again
09:15 - throw an exception a number format
09:18 - exception so let's get rid of this null
09:19 - pointer exception catching
09:21 - this will catch the number format
09:22 - exception print out the message to the
09:24 - user
09:25 - and then it will run the finally block
09:28 - again the finally block runs
09:29 - whether there was an exception here or
09:31 - not let's go ahead and
09:33 - run our program and so you can see we
09:36 - caught the exception
09:37 - printed out the hey dude and then
09:40 - printed out
09:41 - in the finally block and real quick an
09:43 - important thing to note when an
09:44 - exception is thrown
09:46 - the rest of the code after that in the
09:47 - try will not be executed
09:49 - so for example we can have a print
09:50 - statement here that says after
09:52 - parsing dance
09:56 - now if we run our program you'll notice
09:59 - it never reaches that piece of code it
10:01 - doesn't get here because an exception
10:03 - was thrown here
10:04 - and out to this catch statement so
10:06 - anyway getting back to our finale
10:08 - after it ran what was in the try which
10:11 - threw an exception
10:12 - ran what was in the catch it finally ran
10:14 - what was
10:15 - in finally and it will execute that
10:17 - whether there's an exception or not so
10:19 - we can change this back to a 1
10:21 - so an exception will not be thrown run
10:23 - our program
10:24 - now we see this this catch block was not
10:27 - executed
10:28 - but we have after parsing pants this
10:32 - didn't throw an exception so it could
10:33 - print this statement and then the catch
10:34 - code never executed because there was
10:36 - never an exception
10:37 - thrown but it still executed the finally
10:41 - code no matter what now when i say no
10:43 - matter what i mean
10:44 - no matter what you can literally have a
10:47 - return
10:48 - statement here in your try you would
10:51 - think that after this code executes and
10:52 - that you get to return it would just
10:54 - return out of this method
10:55 - and not execute anything else but it
10:57 - will always execute your final block
11:00 - see even though you have a return
11:02 - statement here after parsing pants it
11:03 - still runs your finally and here's an
11:05 - even weirder example of the same thing
11:07 - what we have is a simple private method
11:10 - that just returns an
11:11 - int called print a number and and all
11:14 - we've got here is a
11:16 - try catch finally statement we're in the
11:18 - try statement we say
11:19 - return three in the catch statement we
11:22 - say
11:22 - return for and in the final statement we
11:25 - say return
11:26 - five of course what's in this try block
11:28 - won't cause any exceptions
11:30 - so the catch block should never get
11:32 - called
11:33 - but in the try block we're saying return
11:35 - three
11:36 - and in the final block we're saying
11:38 - return five and our main method all
11:40 - we're doing is
11:40 - printing out the result of this method
11:43 - call
11:44 - so let me know what do you think
11:47 - the result of this method should be the
11:50 - answer is
11:52 - five remember what i was saying is the
11:55 - finally
11:56 - code always executes a reach
11:59 - and that and that means that a return
12:01 - statement in your finally
12:03 - will override a return statement
12:06 - in your try or your catch blocks
12:09 - and that could lead to some super
12:11 - unexpected situations
12:13 - so there's something to keep in mind
12:14 - most of the time you are not going to
12:16 - need
12:17 - a return statement and you're finally
12:18 - blocked generally just avoid it and it's
12:20 - also a good
12:22 - java interview question to know about
12:24 - you could be asked about this
12:26 - know the type of behavior that finally
12:28 - has but after seeing this you might be
12:29 - thinking goodness why
12:30 - would i ever need a finale for most of
12:33 - the time you don't most of the time a
12:34 - try catch block
12:35 - is all you need you have some code you
12:37 - want to try that might throw an
12:38 - exception
12:39 - and the catch block handles that
12:40 - exception that's all you have to do but
12:42 - there's certain special situations where
12:43 - you might want to finally block maybe in
12:45 - your try you're doing like a database
12:47 - call
12:47 - or some file input output in your try
12:50 - statement
12:51 - and you always want to close your
12:53 - connection
12:54 - like to the database or to the file
12:56 - stream because that's something you
12:57 - would always want to do
12:59 - um if there's some database issue or a
13:01 - file issue you always want to close that
13:02 - connection and that's kind of thing you
13:04 - would put in your finally block
13:05 - 99 times out of 100 you're probably just
13:07 - going to have
13:08 - a try catch statement if you got some
13:10 - value from this video please let me know
13:11 - with a like it is amazingly appreciated
13:13 - and hit the subscribe button if you'd
13:14 - like to see more java tutorials
13:16 - as they come out see you guys next time