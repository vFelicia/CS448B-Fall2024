00:00 - in a recent video on the channel we
00:01 - coded the bogo sort sorting algorithm in
00:04 - java that was so ridiculous and so
00:05 - inefficient that it took about
00:07 - five hours to sort 14 numbers now the
00:11 - algorithm that we're going to code in
00:12 - this video is even more ridiculous and i
00:14 - think has the potential to be even
00:16 - slower my name is john and i do a new
00:17 - java tutorial video every single week so
00:19 - be sure to subscribe so you don't miss
00:21 - each week's video i also have a full
00:22 - java course available in a link down in
00:24 - the description if you're interested
00:26 - if not that's awesome too i'm thrilled
00:27 - to have you here and as always the full
00:28 - source of this program is available in a
00:30 - link down in the description so go and
00:32 - get it okay the sorting algorithm we're
00:33 - going to implement today is called
00:35 - bozo sort playing off the silliness of
00:37 - bogo sort but this one is even
00:40 - more dumb and ridiculous so with bogosor
00:42 - remember that each time you just shuffle
00:44 - the list into some random order
00:45 - and then just check to see if it was
00:47 - sorted or not and if it wasn't you just
00:48 - kept shuffling the list
00:49 - and that bogo sort video is here in case
00:51 - you haven't seen it this one is similar
00:53 - where you do just check the list to see
00:54 - if it's sorted but if it's not instead
00:56 - of shuffling the list
00:57 - you just take two random elements of the
01:00 - list
01:00 - and swap them with each other so we're
01:02 - checking the list to see if it's sorted
01:03 - and if it's not
01:04 - we take two completely random elements
01:06 - from that list and swap them with each
01:08 - other and then we check the list again
01:09 - to see if it's sorted
01:11 - and we keep going until somehow our list
01:13 - gets perfectly sorted
01:14 - just to get us started i have some
01:15 - pre-written code here that just creates
01:17 - an array of ins
01:18 - here we're just doing five ins to start
01:20 - out with and then it just loops through
01:22 - that array and fills it up with random
01:24 - ends
01:24 - basically between 0 and 10 000 and then
01:26 - here is where we're going to code our
01:28 - wonderfully ridiculously bad
01:30 - sorting algorithm afterwards this just
01:32 - loops through our array and prints out
01:33 - all the numbers hopefully in perfectly
01:35 - sorted order i also have a pre-written
01:37 - private method here is list
01:38 - sorted that just takes in an array of
01:40 - ins and returns a boolean
01:42 - for whether or not that list is in
01:43 - perfect order we'll use this method
01:45 - inside our algorithm to check whether
01:46 - the list is currently sorted so let's
01:48 - just run our program a few times
01:49 - without the sorting algorithm in place
01:51 - and you can see that it's creating an
01:52 - array of random numbers and they're in
01:54 - no particular order at all
01:56 - so as i mentioned before there's just a
01:57 - couple of things that our sorting
01:58 - algorithm actually has to do number one
02:00 - check to see if our array is sorted
02:02 - and number two if it's not sorted
02:04 - randomly choose two elements of that
02:06 - array
02:07 - and swap them and just keep doing that
02:08 - forever until the array is sorted
02:10 - so the first part of our algorithm we
02:12 - need to check if the list is currently
02:14 - in order so to do that our algorithm is
02:16 - going to be pretty simple
02:18 - it's going to be a while loop and the
02:20 - condition of staying in our while loop
02:21 - is going
02:22 - to be while the array is still not
02:24 - sorted so we'll just say not
02:25 - is list sorted and pass in our numbers
02:29 - array
02:29 - so if we're looking at our numbers array
02:31 - and we find that it's not sorted what do
02:32 - we have to do take
02:33 - two random elements of that array and
02:35 - swap them to get two random elements we
02:37 - really need two random indexes inside of
02:39 - our array for example here we have an
02:41 - array of size five so we wanna randomly
02:43 - choose two indexes that are between zero
02:45 - and four
02:46 - so let's get our first random index uh
02:48 - int index
02:49 - one equals we're going to use our rand
02:52 - object that we created up here in order
02:54 - to fill our array in the first place and
02:55 - just call rand.nextint and we want to
02:58 - pass in
02:59 - the length of our numbers array so this
03:01 - will give us one random index of our
03:03 - array but we need two of them so we can
03:04 - swap those two random elements so
03:06 - int index two equals the same thing
03:10 - rand dot next int and pass in numbers
03:13 - dot
03:14 - length so now that we have our two
03:16 - random indexes in our array
03:18 - we just need to swap them so to swap two
03:19 - elements typically you'll use
03:21 - a temp variable so we'll say in temp
03:23 - equals numbers
03:25 - at index one so we'll temporarily save
03:27 - the value with that first index to our
03:29 - temp variable
03:30 - and then we'll assign the value at
03:31 - numbers index
03:33 - one to be whatever the current value is
03:35 - at numbers
03:36 - at index two so now index one has the
03:38 - value that used to be at index two
03:40 - after that we just need to take numbers
03:42 - at index two
03:43 - and assign it to be the value that used
03:45 - to be at index one which is
03:47 - temp while the list is not sorted we're
03:49 - gonna find two random elements
03:51 - and swap them once our array is
03:53 - magically sorted we will leave this
03:55 - while loop
03:55 - and print out our list in perfectly
03:57 - sorted order so let's go ahead and run
03:59 - it with our array of
04:00 - five random ins and see if it works okay
04:05 - all right excellent so it's printing out
04:06 - our random list in perfectly sorted
04:09 - order
04:09 - smallest to largest looks great now
04:11 - let's run it just a few more times to
04:12 - make sure it wasn't just a fluke
04:14 - all right perfect and it's not taking
04:16 - long at all it's pretty much finishing
04:18 - immediately but let's step it up just a
04:19 - little bit instead of sorting
04:21 - five numbers let's just try 12. okay
04:24 - here we go
04:26 - took a little bit longer there about two
04:28 - seconds okay let's just go a little bit
04:29 - higher
04:30 - 13. okay that jump from 12 to 13 seems
04:34 - to be a big jump remember this bososaur
04:37 - algorithm isn't like most sorting
04:38 - algorithms where it's like working its
04:40 - way
04:40 - slowly towards a solution it's really
04:42 - just trying completely random
04:44 - combinations and just seeing if it works
04:46 - so even if one time you run this and it
04:47 - takes just a few seconds to run
04:48 - running it another time on the exact
04:50 - same size of array
04:52 - could take two three ten times as long
04:54 - you don't know it's just completely
04:56 - random how long it could take
04:57 - all right it has finished it only took
04:59 - about seven minutes
05:01 - pretty brutally slow for sorting just 13
05:04 - numbers
05:04 - all right so now we are going to test
05:06 - out 14 integers now remember with bogo
05:09 - sword this took about
05:10 - five hours so with bozo sword is it
05:12 - going to be one hour
05:13 - 10 hours the only way to find out is to
05:16 - run it so there we go it's running as
05:19 - much as i'd love to just stare at this
05:20 - and contemplate what i'm doing with my
05:22 - life
05:22 - i think i'll just see you back here when
05:24 - it finishes so i'll see you then
05:26 - all right our 14 element bozo sort has
05:28 - completed
05:29 - so it started at 10 39 p.m and ended
05:32 - at 12 15 a.m so it took um about an hour
05:36 - and a half now frankly i'm surprised
05:37 - that is
05:38 - way better than the five hours or so it
05:40 - took for bogo sort
05:42 - to do the same thing so we're going to
05:43 - do something here for bozo sort that we
05:45 - didn't do for bogo sort and we are going
05:47 - to
05:48 - step it up to 15 integers and here we go
05:51 - all right we're back and our 15
05:53 - element bozo sort has completed and
05:56 - again it finished
05:56 - way sooner than i expected it to started
05:59 - about 7 15
06:00 - and ended at 9 o'clock so it only took
06:02 - about an hour and 45 minutes
06:04 - now i say only i mean an hour and 45
06:06 - minutes is still a ridiculously huge
06:08 - amount of time
06:09 - to sort just 15 numbers but i expected
06:12 - it to maybe take
06:13 - all day or even longer because i think
06:15 - the time complexity of this algorithm is
06:17 - also big o
06:18 - of n factorial but just because two
06:21 - algorithms have the same big o
06:22 - complexity doesn't mean they will always
06:24 - run
06:24 - in similar amounts of time so i think
06:26 - one of two things could be happening and
06:28 - maybe both
06:28 - number one we could have just gotten
06:30 - super lucky and our random swapping just
06:32 - happened to come to the exact
06:34 - right order really early in the process
06:36 - or what could also be happening
06:37 - is that in bogo sort it had to shuffle
06:39 - the entire array each time but over here
06:41 - in bozo sort all it had to do is take
06:43 - two random elements and swap them
06:45 - and i would think shuffling the whole
06:46 - array takes a lot more time relatively
06:48 - speaking than just swapping two elements
06:50 - and because it has to do those
06:51 - operations probably billions of times in
06:53 - performing this algorithm that's another
06:55 - thing that could make
06:56 - bozosort just a little less terrible
06:58 - than bogosort
06:59 - if you have to pick some completely
07:01 - random sorting algorithm and you have to
07:03 - choose between bogo sort and bozo sort i
07:05 - say bozo sorts your best bet
07:06 - if you enjoyed this video or learned
07:08 - something please be sure to leave a like
07:09 - and hit the subscribe button so you
07:10 - don't miss the brand new java video
07:12 - every single week and i really do
07:13 - appreciate you doing that it's the only
07:14 - way these videos get out to help more
07:16 - people and be sure to grab the full
07:17 - source and the link down in the
07:18 - description if you want to pull this
07:19 - down and run it yourself
07:21 - see in the next video