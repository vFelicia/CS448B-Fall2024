00:00 - if you've been programming in Java for a
00:01 - while you're definitely familiar with
00:03 - arraylists but what about vectors and if
00:06 - you have heard of them you were probably
00:07 - just told to never use them but why
00:10 - we'll show the similarities and
00:11 - differences between arraylists and
00:13 - vectors with some quick live coded demos
00:16 - we'll even find something that vectors
00:18 - do that arraylists don't so stick around
00:20 - and find out I also have a full Java
00:22 - course available with over eight hours
00:24 - of exclusive video lessons covering
00:26 - dozens of topics so go check it out so
00:29 - first as always what exactly are vectors
00:32 - in Java vectors have actually been a
00:34 - part of java since the very first
00:36 - version was released way back in the
00:38 - Stone Age of java also known as
00:41 - 1996. this is before Java even had
00:44 - arraylists arraylists were added in
00:46 - version 1.2 so all a vector is is a
00:50 - collection of objects that offers
00:51 - convenient methods for adding removing
00:54 - and manipulating the elements inside it
00:57 - it uses an array behind the scenes as
00:59 - its underlying data structure to hold
01:01 - the elements but it will automatically
01:03 - grow and Shrink that array as you add or
01:06 - remove elements so in that way it's more
01:08 - convenient to use than a regular array
01:10 - now you might be thinking that sounds an
01:13 - awful lot like an arraylist and
01:15 - you're right on the surface vectors act
01:18 - almost exactly like arraylists do so if
01:21 - they do pretty much exactly the same
01:23 - thing why would you ever choose one over
01:26 - the other how are they actually
01:28 - different why do they both exist so
01:30 - let's start going over some of those
01:31 - differences one of those differences is
01:34 - performance let's dive in and write some
01:36 - quick code to compare how long it takes
01:39 - to say add a million items to an
01:41 - arraylist versus add a million items to
01:44 - a vector okay first let's just declare
01:47 - an INT we'll call it size this is just
01:49 - going to hold the number of elements
01:51 - that we want to add to our arraylist and
01:54 - our Vector so we want to add 1 million
01:57 - items to each of those so first let's go
02:00 - ahead and declare our arraylist we'll
02:02 - make an arraylist of integers and here
02:05 - we're just going to call it arraylist
02:07 - equals new arraylist now we want to time
02:11 - exactly how long it takes to add a
02:14 - million elements to this arraylist so
02:16 - first we need to capture the current
02:19 - time at the beginning just before we
02:21 - start adding the million items so we'll
02:23 - declare a long to hold the current time
02:26 - in Millis we'll call it start and set it
02:28 - equal to system dot current time Millis
02:32 - and now we want to add a million items
02:34 - to our arraylist so all we're going to
02:36 - do is use a for Loop for that so for INT
02:40 - I equals 0 while I is less than size so
02:45 - here that's going to be a million then I
02:47 - plus plus to iterate so each time
02:50 - through that for Loop we are going to
02:51 - add the element I whatever I is at that
02:55 - iteration in the loop to our arraylist
02:58 - so at the end of this for Loop we should
03:00 - have 1 million items in our arraylist
03:02 - and now that we've done that we need to
03:04 - capture the system time after we've
03:06 - added those million elements so long end
03:09 - set that equal to system dot current
03:13 - time in Millis and then we just need to
03:16 - print out the difference between the end
03:18 - time and the start time to see how long
03:20 - it took so we'll go ahead and print out
03:23 - so we'll just say added
03:26 - size elements to arraylist colon space
03:30 - and then we'll record how many
03:32 - milliseconds it took so that would just
03:34 - be end minus start and then we'll add on
03:38 - Ms four milliseconds okay so let's go
03:41 - ahead and run this real quick just to
03:43 - make sure it works as we expect
03:45 - okay so it took 44 milliseconds to add a
03:49 - million items to an arraylist now let's
03:51 - show how we would do that exact same
03:53 - thing but using a vector instead and
03:56 - it's going to look pretty similar so to
03:58 - declare a vector we just say list
04:00 - integer and we'll call our test vector
04:03 - vector equals new Vector now you'll
04:08 - notice just like an arraylist we
04:10 - declared it using the list interface and
04:13 - that's because when Java 1.2 came out
04:16 - with the whole fancy new collections
04:17 - framework with arraylists and maps and
04:20 - sets and all kinds of stuff like that
04:22 - they actually retrofitted Vector to
04:25 - implement the list interface so it is
04:27 - technically a member of the collections
04:30 - framework so what we're going to do is
04:31 - the exact same thing we did to this
04:33 - arraylist we're going to add a million
04:35 - elements to it and it's going to be just
04:37 - about this exact same code so let's go
04:39 - ahead and copy and paste it here one
04:42 - thing we do have to change though is
04:44 - that since up here we're already
04:45 - clearing a start variable here we don't
04:49 - want to declare it again we just want to
04:51 - set it to be the current time Millies
04:53 - here right before we add everything to
04:56 - our Vector so of course here instead of
04:57 - adding to our array list we will add
05:00 - each element to our vector and the same
05:03 - thing goes for the end variable here we
05:05 - don't want to declare it again except
05:07 - now our statement here where we print
05:09 - out how long it took we'll say added
05:11 - size elements to vector and then
05:15 - everything else here will be the same
05:16 - end minus start now will give us the
05:19 - total time it took to add a million
05:22 - items to our Vector so let's go ahead
05:24 - and run this a few times and see if we
05:26 - can see any kind of a pattern with the
05:29 - performance between these two
05:31 - collections so here we go okay so it
05:34 - took 70 milliseconds for arraylist
05:36 - versus 126 for Vector interesting let's
05:40 - keep going let's try again 57 verse 195
05:43 - milliseconds that's almost four times
05:45 - times as long for a vector let's see so
05:49 - we're kind of seeing a pattern here
05:50 - right it seems pretty consistent that
05:53 - adding a million items to an arraylist
05:54 - is much faster noticeably faster than
05:58 - adding a million items to a vector so is
06:01 - that the end of the story here well not
06:03 - quite arraylist might have been faster
06:05 - here but it has to sacrifice something
06:07 - to get that edge over Vector in speed
06:11 - let me show you what I mean let's say
06:13 - that instead of just using a single
06:15 - thread like we were here we're instead
06:17 - going to be operating in a
06:19 - multi-threaded environment so we're
06:21 - going to have two threads try to add
06:24 - elements to an arraylist at the same
06:26 - time and then we're going to have two
06:27 - threads try to add elements to a vector
06:30 - at the same time so let's keep all the
06:32 - code we've got and add another section
06:34 - down here where we're going to use a
06:36 - multi-threaded approach so we'll go
06:38 - ahead and create another list of
06:39 - integers we'll call this one
06:41 - multi-threaded list equals new arraylist
06:46 - we're going to set the start time just
06:48 - like before to be the current time in
06:50 - Millis now there are a ton of ways you
06:53 - can set up multiple threads in a Java
06:55 - program but we're going to do a pretty
06:57 - quick and simple way here now remember
06:59 - what we're going to do is create two
07:01 - separate threads that will run at the
07:03 - same time so they're both going to be
07:04 - trying to add a million items to the
07:07 - same list at the same time so we're
07:09 - going to create a thread we'll call this
07:11 - one T1 For Thread one set it equal to a
07:15 - new thread and here we're going to get a
07:17 - little bit fancy and we are going to use
07:19 - a Lambda to declare what should happen
07:22 - when we kick off this thread now we're
07:25 - not going to dive too much into lambdas
07:27 - in this video but if they have always
07:28 - been a mystery to you go ahead and check
07:30 - out my other video on lambdas here
07:32 - anyway we're going to do a little arrow
07:34 - operator here and then inside these
07:37 - curly braces we can Define what we want
07:40 - our thread to do when we kick it off and
07:43 - so what is this thread going to do well
07:45 - it's going to do eggs exactly what we
07:46 - did before and it's going to go through
07:49 - a for Loop where it adds a million items
07:52 - to our arraylist so I'll just change
07:55 - this to our multi-threaded list and
07:58 - there we go that's it now we want to do
08:00 - the exact same thing with another thread
08:02 - so we're going to copy this and all
08:05 - we're going to do is change T1 to T2 now
08:08 - all this does is create our two thread
08:10 - objects but this code doesn't kick off
08:13 - those threads to actually perform these
08:16 - operations yet all you have to do is
08:19 - call the start method on each thread so
08:22 - T1 dot start and T2 dot start so the
08:26 - start command will kick off that
08:27 - separate thread to perform the work that
08:30 - we've defined here and here but we don't
08:33 - want to continue down in our program
08:35 - past this until we know that both of
08:37 - those threads have completed their work
08:40 - and so in order to do that we just have
08:42 - to call the join method on both of them
08:45 - so t one dot join and t2.join so now
08:49 - both of our threads have completed their
08:51 - work they've both added a million items
08:53 - to our arraylist so now we need to
08:55 - capture the end time so we'll just go on
08:57 - up here and steal this and capture the
09:01 - end time just like we did before and
09:04 - then we'll also print out our results in
09:07 - a similar way but we'll say added
09:09 - elements in a multi-threaded way to
09:14 - arraylist and then we'll do the exact
09:17 - same thing but with a vector so let's go
09:19 - ahead and copy this whole section here
09:22 - paste it down below and all we're going
09:24 - to do is instead of multi-threaded list
09:27 - we're going to say it's a multi-threaded
09:30 - vector and instead of a new array list
09:32 - of course it's going to be a vector and
09:35 - then everywhere we have a multi-threaded
09:37 - list we have to change that to be
09:39 - multi-threaded Vector so there and there
09:42 - and change this to Vector in the output
09:45 - and and also since we've already
09:47 - declared these thread variables we don't
09:50 - need to declare them again here but we
09:52 - can reuse them all right so now let's go
09:54 - ahead and run this again and check out
09:56 - our results so similar results to what
09:59 - we were seeing before it did take a
10:01 - decent amount longer to add these
10:03 - elements in a multi-threaded way to
10:05 - Vector than it did to add them to
10:07 - arraylist let's give it a couple more
10:09 - runs and see what it does okay similar
10:11 - oh that's interesting so in this run we
10:14 - actually got an exception this was an
10:16 - array index out of bounds exception so
10:19 - that's kind of strange right why do we
10:22 - sometimes get an exception and sometimes
10:24 - we don't even worse though here's
10:27 - something that's even more Sinister
10:28 - let's check the actual sizes of both the
10:31 - multi-threaded vector and the
10:34 - multi-threaded list when they're done
10:37 - now of course we would expect them to
10:39 - both have 2 million elements in them
10:41 - every time because we have two threads
10:43 - that are both adding one million
10:45 - elements of piece but let's print out
10:47 - the size of each of them along with our
10:49 - results just to verify that so for the
10:51 - arraylist part we will print out size is
10:55 - multi-threaded list dot size copy that
10:59 - and so down here for the vector size is
11:03 - multi-threaded Vector dot size let's see
11:07 - what we see
11:08 - okay so now in this run our Vector does
11:12 - have exactly two million elements in it
11:14 - just what we would expect but the array
11:16 - list only has a little over 1.5 million
11:20 - elements in it pretty weird right let's
11:23 - run it again and see what else happens
11:26 - so here we got an exception again when
11:29 - it was trying to add to the arraylist
11:31 - and we only got just over 1 million
11:34 - elements in our arraylist and if we keep
11:37 - going we see similarly wacky
11:40 - unpredictable results each and every
11:42 - time so in this situation yes the
11:45 - arraylist performs its task faster but
11:49 - pretty much every time it's not actually
11:52 - getting all the 2 million elements that
11:54 - we would expect added to the arraylist
11:56 - but the vector even though it's taking a
11:59 - little bit more time it's always
12:00 - successfully adding all of the elements
12:03 - even with two threads running at the
12:06 - same time so the big question is why is
12:09 - that happening why do we get such
12:10 - unpredictable results when we tried to
12:13 - use an arraylist in a multi-threaded way
12:15 - well the reason is that operations on an
12:18 - arraylist are not synchronized that
12:21 - means they're not thread safe in other
12:23 - words having multiple threads trying to
12:25 - operate on an arraylist at the same time
12:28 - results in completely non-deterministic
12:32 - wacky Behavior but operations on vectors
12:36 - are synchronized so you can operate on
12:40 - vectors with multiple threads at the
12:42 - same time and not run into these kinds
12:44 - of weird exception situations so that of
12:48 - course can be useful if you're operating
12:51 - with multiple threads but that thread
12:53 - safety comes at a performance cost and
12:56 - if you're not using multiple threads
12:58 - vectors take all of that extra time for
13:01 - no real gain at all however here's a
13:04 - really cool thing let's say you still
13:06 - you don't know about vectors or you
13:07 - don't want to use them you just know
13:09 - about arraylists but you want to use an
13:12 - arraylist in a multi-threaded
13:13 - environment and not have this terrible
13:16 - wacky unpredictable behavior and there
13:18 - actually is something you can do to make
13:21 - your arraylist operations thread safe
13:24 - and it just takes one small change to
13:27 - your code so back up here where we're
13:29 - declaring our multi-threaded list
13:31 - instead of just saying new arraylist you
13:34 - just say collections dot synchronized
13:38 - list and then pass in your new arraylist
13:43 - as a parameter this creates a wrapper
13:46 - around your arraylist so now every time
13:49 - you're performing operations on your
13:51 - multi-threaded list they will all
13:53 - automatically be synchronized just like
13:56 - a vector does so now if we rerun this we
14:00 - can see that it is successfully now
14:03 - adding all 2 million items to the
14:06 - arraylist just exactly as the vector did
14:08 - if we go ahead and run that a few more
14:10 - times we can see this time the arraylist
14:12 - was just a little bit faster than the
14:14 - vector but pretty comparable here again
14:16 - almost exactly the same amount of time
14:18 - and running again performance is almost
14:21 - identical in a multi-threaded
14:22 - environment but now we have a nice
14:24 - arraylist that doesn't randomly explode
14:27 - in spectacular fashion when we do
14:29 - something as simple as trying to add
14:32 - elements into threads now where does
14:35 - that leave us what do we do with these
14:38 - vectors the general recommendation and
14:40 - this is what you'll probably hear if you
14:42 - Snoop around on stack Overflow or ask an
14:45 - experienced developer generally just use
14:49 - arraylist in the relatively rare
14:51 - circumstances that you need to
14:54 - synchronize those individual operations
14:56 - across a whole bunch of different
14:58 - threads you can just use this
15:00 - synchronized list wrapper to take care
15:03 - of that but the vast majority of the
15:05 - time you're just working with a single
15:07 - thread and so if you used a vector you
15:09 - would be sacrificing all that
15:11 - performance for no reason and even if
15:13 - you are using multiple threads it's
15:15 - pretty rare that you actually need to
15:18 - synchronize every little individual
15:20 - operation and it's more likely that
15:22 - you're synchronizing over a few
15:25 - operations like checking to see if
15:26 - something is in the list and then adding
15:29 - it or something like that and for that
15:30 - you'd have to write your own little
15:32 - synchronized method anyway but vectors
15:35 - are still around they've been in there
15:36 - since the very first version of java
15:38 - they're almost definitely not going
15:40 - anywhere anytime soon but for a modern
15:43 - developer they can mostly be seen as a
15:46 - relic of Java's past so you can take a
15:49 - tour through the Museum of java history
15:51 - and say oh vectors but just go ahead and
15:55 - keep using arraylists if you enjoyed
15:57 - this video or learned something please
15:59 - let me know by leaving a like and be
16:00 - sure to hit the Subscribe button so you
16:02 - don't miss each new video check out the
16:03 - course in the link down in the
16:04 - description if you're interested and as
16:06 - always thank you so much for watching I
16:09 - really appreciate you being here with me
16:10 - and I'll see you next time