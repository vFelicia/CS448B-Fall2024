00:00 - if you've been taking a java class or
00:01 - any object-oriented programming class
00:03 - you've probably heard of this thing
00:04 - called polymorphism
00:06 - and you've probably been told that it's
00:07 - really important that it's one of the
00:08 - four core concepts of object-oriented
00:10 - programming but the word just sounds
00:11 - really complicated right what exactly
00:13 - does that mean
00:14 - a lot of classes and books over
00:15 - complicated so in this video we are
00:17 - going to make polymorphism super simple
00:19 - my name is john and i put up a new java
00:20 - tutorial video
00:21 - every single week so be sure to leave a
00:23 - like and hit the subscribe button so you
00:24 - don't miss each week's video i also have
00:26 - a full java course available in the link
00:27 - down in the description if you're
00:28 - interested
00:29 - if not awesome i'm thrilled to have you
00:30 - here and let's get started polymorphism
00:32 - what does that
00:33 - word mean well it really just means many
00:36 - shapes or many forms
00:37 - poly many morphism forms
00:40 - so you're probably thinking okay it
00:42 - means many forms cool but what exactly
00:44 - does that mean to me
00:45 - in java that just means that your
00:47 - classes can do
00:48 - the same thing in different ways i think
00:51 - it's easiest to talk about what exactly
00:53 - polymorphism means in java with an
00:55 - example so i've got a very simple piece
00:56 - of code here where i have an
00:58 - animal class and here i say animal my
01:00 - animal equals new
01:02 - animal and then i call this method on my
01:04 - animal eat
01:05 - myanimal.eat and we can go over to the
01:07 - animal class and see what that eat
01:09 - method
01:10 - does and all it does is print out the
01:12 - word munch to the console so we can go
01:14 - back here and run our program
01:15 - and of course it just prints out the
01:16 - word munch but now let's say i've also
01:18 - got this
01:19 - dog class and my dog class is a subclass
01:22 - of animal it's a child class so here
01:24 - i've got public class
01:25 - dog extends animal and as you probably
01:28 - know when you create a subclass of
01:30 - another class you automatically get all
01:32 - the fields and methods of that parent
01:34 - class
01:34 - so what does that mean here this eat
01:36 - method that's in the animal class
01:37 - i don't have it written in the dog class
01:39 - but because dog
01:40 - extends animal i can go back to my main
01:43 - method and i can create
01:44 - a dog my dog equals new
01:47 - dog and i can call my dog dot
01:50 - eat you can see that that method is
01:52 - available even though we don't
01:54 - explicitly have an eat method
01:56 - in our dog class and we can go ahead and
01:58 - run this program as well and we'll see
01:59 - our animal eat and
02:00 - our dog eat and they both print out
02:03 - munch but now here's where polymorphism
02:05 - comes in
02:05 - even though this dog class automatically
02:07 - gets that eat method and i don't have to
02:09 - do anything
02:09 - by default it has the exact same
02:11 - behavior in other words if i don't do
02:13 - anything my dog is going to
02:15 - eat in exactly the same way as any other
02:17 - animal it just prints out munch
02:19 - because i didn't specify anything else
02:21 - in my dog class but what i can do here
02:23 - in this dog class is
02:24 - override that eat method from the parent
02:27 - animal class
02:27 - and if you want to override a parent
02:29 - method you have to implement the exact
02:31 - same method signature as that parent
02:33 - method so we can see the method
02:35 - signature here is public void
02:36 - eat it's a public method it doesn't have
02:39 - a return type so it's void
02:40 - the method name is eat and it doesn't
02:42 - take in any parameters
02:44 - so over in our dog class we want to
02:45 - implement the exact same method
02:47 - signature to override it
02:48 - so we can just have public void
02:51 - eat and open and close the curly braces
02:54 - what this allows us to do is implement
02:56 - this eat method in a different way for
02:57 - dog than it does for other animals so
03:00 - instead of munch we can say
03:02 - system.out.printline oh maybe
03:04 - chomp chomp we can save that and go back
03:07 - to our main method
03:08 - where we have a regular animal eating
03:10 - and a dog eating but now this
03:12 - dog will eat in a different way than the
03:14 - generic animal eats let's run our
03:16 - program and see what that looks like our
03:18 - animal says munch but our dog says
03:20 - chomp chomp at its core that's what
03:22 - polymorphism is in the java world
03:24 - it's when you have a method in a child
03:26 - class like our eat method in our dog
03:28 - class
03:29 - overrides a method in its parent class
03:31 - our dog classes eat method
03:33 - is overriding the functionality of the
03:35 - eat method in the animal class
03:37 - and because of that we're now doing the
03:39 - same thing in a different form
03:41 - so that's polymorphism our dog class
03:44 - eats in a different way than the animal
03:46 - does
03:46 - our animal class gives a certain default
03:48 - functionality for eating but our dog
03:50 - child
03:51 - class overrides that functionality and
03:52 - does the same thing in a different way
03:55 - and you can have other subclasses that
03:56 - do the exact same thing so i've also got
03:58 - this
03:59 - cat class that also extends animal it's
04:01 - a child of the animal class also
04:03 - back in our main method we can create a
04:06 - cat
04:06 - my cat equals new cat and even though in
04:10 - our cat class we don't yet
04:11 - implement that eat method because we're
04:13 - a child of animal
04:14 - we have it available my cat dot eat
04:17 - and again we can run our program and now
04:20 - our basic animal says munch
04:21 - our dog says chomp chomp because we
04:24 - overrode the eat method from the animal
04:26 - class
04:26 - but when the cat eats it also just says
04:28 - munch because it's not overwriting that
04:30 - eat method yet but we can do that same
04:32 - thing in our cat class
04:33 - public void eat and instead of munch or
04:36 - chomp chomp we can say
04:38 - system.out.printline nom nom nom
04:41 - save that go back to our main method and
04:43 - run our program again
04:44 - and now our animal says munch our dog
04:46 - says chomp chomp and our cat says
04:49 - this is just more polymorphism we're
04:50 - doing the same thing in three different
04:52 - ways
04:53 - many forms we have our parent animal
04:55 - class and we have our dog and cat
04:57 - classes that are both child classes
04:59 - of animal and all of these classes
05:01 - implement that eat method but they do it
05:03 - in a different way
05:04 - same thing in many forms polymorphism
05:07 - now there is one other form of
05:08 - polymorphism in java and that's called
05:10 - method
05:10 - overloading now it's really easy to
05:13 - confuse method overloading
05:15 - with method overriding method overriding
05:18 - is what we already talked about where
05:19 - you have a child
05:20 - class that implements the exact same
05:22 - method signature as a method
05:24 - in the parent class but you can also do
05:26 - what's called method overloading to put
05:28 - it very simply
05:29 - all that method overloading is is when
05:31 - you have two methods in a class that
05:32 - have exactly the same
05:34 - name but take different parameters for
05:37 - example here we have
05:38 - a public void eat method that takes no
05:41 - parameters now of course java won't let
05:43 - us just copy and paste that method and
05:44 - have it twice because we can't have
05:46 - the exact same method with the same
05:48 - parameters but what we can do is have
05:50 - exactly the same method
05:52 - name but with different parameters for
05:54 - example this version of the eat method
05:56 - could take in
05:57 - an int and we'll call it like number of
06:00 - times now you can see that java is no
06:02 - longer complaining about a duplicate
06:04 - because even though these two methods
06:05 - have the same name they have different
06:07 - parameters and that is allowed that is
06:09 - called
06:09 - method overloading of course if you do
06:11 - method overloading like this you would
06:13 - want the different versions of your
06:14 - method to do something a little bit
06:15 - different
06:16 - so because this takes in an int of
06:17 - number of times maybe this method can
06:19 - print out chomp chomp the number of
06:21 - times
06:22 - that is sent in this parameter we can do
06:24 - that with a simple for loop where we
06:25 - have
06:25 - four and i equals zero i less than
06:29 - number
06:30 - of times i plus plus that's the number
06:33 - of times we can
06:34 - have it print out chom chomp so let's
06:35 - save that go back to our main method
06:37 - and instead of calling the eat method
06:39 - without any parameters let's call the
06:40 - eat method that
06:41 - takes an in parameter and we can send in
06:44 - just three and run our program again
06:46 - and now we see that chomp chomp printing
06:47 - out three times but if we want to that
06:49 - regular eat method that doesn't take any
06:51 - parameters is also still available to us
06:54 - so that's another form of polymorphism
06:56 - in java method overloading
06:58 - that's where in one class you have
06:59 - multiple methods with the exact same
07:01 - method name
07:02 - but that take different parameters if
07:04 - you enjoyed this video or learned
07:05 - something please be sure to leave a like
07:06 - and hit the subscribe button so you
07:07 - don't miss the new video every week i
07:09 - really do appreciate you taking the time
07:10 - to watch subscribe and share it's the
07:12 - only way these videos get out to help
07:13 - more people so thanks again and i'll see
07:15 - you next time