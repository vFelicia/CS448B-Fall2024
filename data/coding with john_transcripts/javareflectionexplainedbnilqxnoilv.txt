00:00 - java's reflection api allows you to
00:02 - write a program that can look at itself
00:05 - and even change itself while it's
00:07 - running you can kind of think of it as
00:09 - meta programming now before we get
00:11 - started use reflection at your own risk
00:14 - it's incredibly powerful and allows you
00:16 - to break all the rules of your program
00:18 - and of course with great power comes
00:20 - great responsibility
00:22 - now with that said let's go cause some
00:24 - trouble first though here's an
00:26 - experience i know you've all had you do
00:28 - a search for a simple programming
00:30 - problem you're having like convert
00:32 - timestamp to date java first thing you
00:35 - have to do is scroll down to the stack
00:36 - overflow result because that's the one
00:38 - you really wanted in the first place
00:40 - then you have to click to open up the
00:41 - stack overflow page and then you have to
00:43 - scroll down past the question because
00:45 - you don't care about that to get to what
00:47 - you really want the top answer then you
00:50 - have to highlight and copy the code from
00:52 - that answer so that you can
00:54 - borrow it for your own program but
00:56 - recently i discovered a new search
00:58 - engine called neva let me show you how
01:00 - that exact same thing works with neva so
01:03 - here's the stack overflow result but
01:05 - instead of just giving you a link it
01:07 - literally puts the top
01:09 - answer to that question right here on
01:12 - the search results page and not only
01:13 - that here's the code that goes along
01:15 - with that top answer complete with a
01:17 - button to copy it and you've already
01:19 - gotten what you're looking for this is
01:21 - just one tiny sliver of what neva offers
01:24 - neva puts you back in control of your
01:26 - search how does it do that well first
01:28 - neva is 100
01:30 - ad free that's right no ads not only
01:34 - does that mean a way less annoying and
01:36 - intrusive search experience but it also
01:38 - means that all the results you see are
01:40 - 100
01:41 - real organic results no one can pay to
01:45 - decide what you're allowed to see your
01:47 - data also stays completely private with
01:49 - neva your data is never sold to anyone
01:52 - ever and the neva extension even blocks
01:54 - other sites from tracking you it even
01:56 - comes with a premium vpn bitdefender and
01:59 - a world-class password manager lastpass
02:02 - premium so go check out the special link
02:04 - down in the description below right now
02:06 - exclusively for coding with john viewers
02:09 - to get neva premium absolutely free for
02:11 - one full month or go to neva.com
02:14 - codingwithjohn now let's get to it so
02:17 - first of course what is reflection well
02:19 - reflection is where your code can
02:22 - look at itself
02:24 - already made that joke to examine and
02:26 - change basically any element of any java
02:29 - class right in the middle of your
02:31 - running program so as usual let's start
02:33 - with an example so this is a pretty
02:35 - basic java class called cat and you've
02:37 - probably seen me use something similar a
02:39 - time or two before it has two private
02:42 - instance variables a name and an age it
02:44 - has a constructor that takes in the name
02:46 - and the age to create a new cat and it
02:49 - also has a handful of methods you can
02:51 - call it has a getter for the name and a
02:53 - getter and a setter for the age and then
02:56 - a few other methods down here that just
02:58 - print stuff out for demonstration
02:59 - purposes we have a public method a
03:01 - private method and then a public static
03:04 - method and a private static method so
03:07 - let's hop over to our main method and
03:10 - show how we can use reflection to peek
03:13 - into the structure of that cat class so
03:16 - first let's just go ahead and create a
03:18 - new cat object so we'll say cat my cat
03:21 - equals new cat and we need to pass in a
03:23 - name and an age so we'll pass in stella
03:27 - and six to start out let's see if we can
03:29 - just get all of the fields that are
03:32 - declared inside that cat class so in our
03:35 - case that would be this string name and
03:37 - int age now when you're using reflection
03:40 - to try and get some information about
03:43 - some objects class the first thing
03:45 - you're going to want to do is get that
03:46 - object's class by calling getclass on it
03:49 - so
03:51 - mycat.getclass
03:53 - this getclass method call is your window
03:55 - into a ton of reflection capabilities
03:58 - that java offers and to get a glimpse at
04:01 - all the reflection tools that are
04:02 - available to you just hit dot after get
04:05 - class now there's a lot here and it can
04:07 - get really confusing real quick so let's
04:09 - try not to get too overwhelmed by that
04:11 - right now and we'll just focus on trying
04:13 - to get all the fields that are in that
04:15 - cat class so to get all of the fields
04:18 - that are declared inside that cat class
04:20 - we can call get declared fields now if
04:23 - we hover over this we can see that it
04:26 - returns an array of type field so what
04:29 - we can do is put that array that it
04:31 - returns into a variable so we'll just
04:33 - create a an array of fields we'll call
04:37 - it cat fields and set that equal to the
04:40 - result of this method call and we'll go
04:42 - ahead and import this field the import
04:45 - that we want is
04:47 - java.lang.reflect so now that we have
04:49 - this array of field objects we can loop
04:52 - through them like we would any other
04:54 - array and we can use a for each loop so
04:56 - for field field in
04:59 - cat fields so for each one of those
05:02 - let's just just print out that field's
05:04 - name so to do that all we have to do is
05:06 - just print out field dot get name so
05:10 - let's go ahead and run that and see what
05:12 - it prints out for us
05:13 - okay so it prints out name and age so no
05:16 - big surprises there it did pretty much
05:18 - what we expected it to do but that's
05:19 - kind of cool right i mean we can write
05:21 - code that can actually see the structure
05:24 - of our java class but here's where it
05:26 - starts to get crazy so back over here in
05:29 - our cat class we have this string name
05:32 - field and it is private that means from
05:34 - outside of this class we have no access
05:37 - to this variable we can't view it and we
05:39 - certainly can't change it to some other
05:40 - value and so a lot of times when a
05:42 - variable is private you have things like
05:44 - accessor and mutator methods
05:47 - getters and setters that allow you to
05:49 - view and manipulate that value so in
05:51 - this class we do have a public get name
05:54 - method that returns the name so you can
05:57 - get its value but we don't have a setter
05:59 - for the name so you can't set that value
06:01 - from outside the class the only time it
06:04 - can ever be set is right here in the
06:06 - constructor so when you create a cat
06:08 - object you can set its name but you're
06:10 - never allowed to set its name to
06:12 - anything else at any other time and not
06:15 - only is it private it's also final which
06:18 - means that even if we did have the
06:19 - ability to set it from outside this
06:21 - class once it is set it can never be set
06:24 - to anything else so quickly to
06:25 - demonstrate that back over here in our
06:28 - main method if we take this mycat object
06:31 - which we've initially given the name
06:33 - stella because we can set the name in
06:35 - the constructor if we try and take this
06:38 - my cat and set the name on it to
06:40 - something else like fred it doesn't even
06:43 - compile because it says hey name has
06:46 - private access in that class we aren't
06:48 - allowed to do this and as i mentioned
06:49 - before we don't have a setter for the
06:52 - name either so we can set the age but we
06:54 - can't set the name to something else so
06:57 - we have absolutely no way to change a
06:59 - cat object's name from here in rma
07:02 - method
07:03 - but
07:04 - with reflection
07:05 - all of those rules that i just mentioned
07:08 - go completely out the window without
07:10 - making any changes at all to the actual
07:12 - source code of our cat class we can use
07:15 - reflection to force java to change the
07:18 - name of our cat so here's exactly how
07:21 - you can do that okay so in our program
07:24 - we're already gathering all of the
07:25 - fields that exist inside our cat class
07:29 - and we're looping through each of those
07:30 - fields so now what we want to do is
07:32 - inside this loop we want to look for the
07:35 - individual field that you're interested
07:37 - in which in our case is the name field
07:39 - so what we can say is
07:41 - if
07:42 - field dot get name dot equals
07:46 - the name of the field we're looking for
07:48 - which is name
07:49 - okay so what do we want to do once we
07:52 - find the right field well there's a
07:53 - method we can call on this field called
07:56 - field dot set now this set method
07:59 - actually takes two parameters the first
08:01 - parameter is the object that you want to
08:04 - set that field on so in our case we want
08:07 - to set a name on our my cat object so
08:10 - the object that we want to pass in for
08:11 - our first parameter is just my cat and
08:14 - the next parameter is the value that you
08:16 - want to set that field to so this will
08:18 - be the name that we want to give our cat
08:20 - so let's try to give him the name
08:22 - jimmy mcgill now when you call this set
08:25 - method java makes you handle an
08:28 - exception that it could throw so this is
08:29 - called a checked exception check out my
08:31 - other video on checked and unchecked
08:33 - exceptions if you want to learn more
08:34 - about that but for now i'm just going to
08:36 - go ahead and add a throws declaration
08:39 - here in the method signature okay so now
08:41 - we've got code that is attempting to set
08:44 - the name field on our mycat object to
08:47 - something else let's go ahead and run it
08:50 - and see what happens
08:52 - okay so we do get an exception we get an
08:54 - illegal access exception
08:57 - because we aren't allowed to change a
08:59 - field with modifiers private and final
09:02 - well
09:03 - i guess that's it right end of the road
09:05 - uh even with reflection i guess there's
09:06 - no way to do it
09:08 - of course yes there is a way to do it so
09:11 - here's what you do if you want to get
09:12 - around this pesky hey that field's
09:14 - private and final so you aren't allowed
09:16 - to manipulate a thing so all you have to
09:18 - do is say hey java
09:19 - take that field
09:21 - and make it so it is accessible to me by
09:24 - calling set accessible and passing in
09:27 - true and now if we run our program
09:31 - no exceptions at all but did it actually
09:33 - work did we successfully change the name
09:36 - of our cat let's go ahead and find out
09:39 - so after this for loop our cat's name
09:41 - should be changed so let's go ahead and
09:43 - print it out by just printing out my cat
09:46 - dot get name here we
09:48 - go and poof
09:51 - our cat is now jimmy mcgill the field
09:53 - was private it was final it had already
09:56 - been set to something else and we
09:58 - changed it anyway but of course all this
10:00 - reflection stuff is not just limited to
10:02 - fields you can do similar sorts of
10:04 - things with methods you can get all the
10:07 - methods that are declared inside a class
10:09 - pretty much the same way that we got all
10:11 - the fields that are declared so you can
10:13 - just call
10:17 - dot mycat.getclass.get declared methods
10:20 - and just like get declared fields
10:22 - returned a field array get declared
10:24 - methods returns a method array so we'll
10:28 - call it cat methods and set it equal to
10:31 - the result of our method call here and
10:33 - we need to import this method class
10:35 - which is just java.lang.reflect
10:38 - method first let's just make sure this
10:40 - is working how we expect so
10:42 - let's go ahead and loop through all of
10:44 - our methods with another for loop so for
10:47 - method method
10:49 - in cat methods so for each one of those
10:52 - let's just print out its name to make
10:53 - sure it's working method dot get name
10:57 - here we go
10:59 - okay so it's printing out all the
11:01 - methods that are declared in that class
11:02 - we've got get name this is a public
11:04 - static method set age hey this is
11:06 - private etc etc now you might notice
11:09 - they don't seem to be in any particular
11:10 - order and that's why you always have to
11:12 - loop through them to identify the
11:14 - individual one that you want to work
11:15 - with now one of the really cool things
11:17 - that you can do with a method object is
11:19 - you can execute that method so for
11:22 - example one of the methods in our cat
11:24 - class is just called meow so let's see
11:26 - if we can use reflection here to trigger
11:29 - our meow method so up here in our for
11:32 - loop the first thing we want to do is
11:34 - look for the meow method in our array so
11:37 - if
11:38 - method dot get name
11:40 - dot equals
11:42 - meow
11:43 - now to invoke this method we will
11:45 - actually call method dot you guessed it
11:48 - invoke and this takes parameters that
11:50 - are very similar to when we were calling
11:52 - this set method here the first parameter
11:55 - that it takes is the object that we want
11:57 - to call this method on in our case we
12:00 - want to call the method on our mycat
12:02 - object now in our case this meow method
12:05 - in the cat class
12:07 - doesn't take any parameters so let's
12:09 - actually go and take a look at that meow
12:11 - method here you can see that it's just a
12:13 - public void method and it doesn't take
12:15 - any parameters so then back over here
12:18 - where we're using reflection to invoke
12:20 - that method we don't have to have any
12:22 - other parameters to this invoke call
12:25 - however if the meow method did have
12:27 - parameters all we would need to do is
12:30 - add them in the same order that they
12:32 - need to be passed in here
12:34 - where we're calling the invoke method
12:36 - but since we don't have any we don't
12:38 - have to worry about it i'm also going to
12:39 - go ahead and get rid of these other
12:41 - extra print statements okay so now if we
12:44 - run our code it should call the meow
12:47 - method
12:47 - on our mycat object so let's see okay so
12:51 - it printed out meow
12:53 - and if we go back over to our cat class
12:56 - to our meow method
12:57 - that's exactly what it does so it is
12:59 - successfully calling that method using
13:02 - reflection now in this case this is not
13:04 - particularly impressive right i mean
13:06 - this is a public method we could have
13:08 - just directly called the meow method on
13:11 - our my cat object without using
13:12 - reflection and for public methods where
13:14 - we don't need to use reflection that's
13:16 - what we should have done so to get the
13:18 - exact same outcome without using
13:20 - reflection we could have just called
13:22 - mycat.meow
13:24 - and if we go ahead and run the program
13:26 - you know we get the exact same thing but
13:29 - what if instead you wanted to invoke a
13:32 - private method that you don't have
13:33 - access to here so if we go back over to
13:36 - our cat class we have a private method
13:39 - called hey this is private and so right
13:41 - now if we go back and try to call that
13:45 - hey this is private method on our mycat
13:48 - we get an error that says hey this is
13:50 - private is private you can't call it
13:52 - from here however we can try and call
13:55 - that same method using reflection so
13:58 - instead of looking for the meow method
14:01 - let's have it look for the hey this is
14:03 - private method now if we go ahead and
14:05 - try and run this as is
14:08 - so similar to how we were trying to set
14:10 - the private field before when we try to
14:12 - call a private method even using
14:15 - reflection we get an illegal access
14:17 - exception however the fix for that is
14:20 - also basically identical to what it was
14:23 - for the field so to make it so we can
14:25 - access this method here with reflection
14:27 - we can just call
14:28 - dot set accessible
14:30 - to true so now when we run our program
14:34 - we are able to successfully call that
14:37 - private method from here using
14:39 - reflection
14:40 - one other good thing to know here so you
14:42 - know how when we call this invoke method
14:44 - we have to pass in the object that we
14:47 - want to invoke that method on however
14:50 - some methods are static which means that
14:53 - you don't need an individual object of
14:55 - that class to be able to call that
14:57 - method so if we hop over to our cat
14:59 - class we have an example of a couple of
15:01 - static methods
15:02 - one of them here is called this is a
15:05 - public static method so back here where
15:07 - we're using reflection if we want to be
15:10 - able to call
15:11 - that this is a public static method
15:14 - method without needing a specific cat
15:17 - object all you have to do is pass in
15:19 - null for this parameter here and then if
15:22 - you go ahead and run it it pretty much
15:24 - does what you would expect and also as
15:26 - you might expect this same thing works
15:28 - for a private static method so back here
15:31 - in our cat class we have another method
15:34 - that is private and static and if we try
15:36 - and call that method
15:38 - with reflection
15:40 - as long as we set accessible to true
15:42 - first
15:44 - it works exactly the same way so all of
15:46 - this is pretty cool right it's pretty
15:48 - neat to be able to use reflection and
15:50 - and kind of get a bird's eye view of
15:52 - your program and manipulate things to be
15:55 - able to do whatever you want to do but
15:58 - it kind of leads to a question
16:00 - why would you use this a one reason is
16:04 - it's just really cool it's fun to play
16:06 - around with all the different methods
16:07 - that are available to you and see how
16:09 - you can manipulate your programs on top
16:11 - of that playing around with this for a
16:13 - little bit kind of helps to sink in a
16:15 - little bit of understanding about how
16:18 - some different parts of java work
16:20 - besides that though in the real world
16:22 - reflection is heavily used in things
16:25 - like frameworks the spring framework for
16:28 - example uses reflection all over the
16:31 - place because it has to be compatible
16:33 - with code that hasn't even been written
16:36 - yet when you use a tool like spring it
16:38 - uses reflection to look at all the
16:40 - classes that you've written in your own
16:42 - code and also uses reflection to create
16:45 - objects of those classes and manipulate
16:47 - them and inject them into other classes
16:50 - all that stuff is way more complicated
16:52 - than what we've done here but it uses
16:54 - the same basic tools you also
16:56 - occasionally might have to use
16:58 - reflection to do something a little bit
17:00 - more basic for example occasionally when
17:03 - i'm testing some class that class will
17:05 - have a private field that changes how
17:08 - all of the methods inside that class
17:10 - works and for testing i want to be able
17:13 - to set that private field and then make
17:15 - sure all the methods do what they're
17:16 - supposed to do in situations like that
17:18 - you can use reflection like we did here
17:21 - to force java to set that value however
17:24 - there are definitely downsides of
17:26 - reflection that you need to be aware of
17:28 - the first thing is obviously it's way
17:31 - easy to break everything using
17:33 - reflection if you don't know exactly
17:35 - what you're doing you can create some
17:37 - really wacky bugs that are really really
17:40 - tough to nail down as just a quick
17:42 - example so down here we're using
17:45 - reflection to you know explicitly call
17:47 - this method using its name but if you
17:50 - happen to be you know just a normal
17:52 - developer doing your job and you're
17:54 - going through this cat class and you
17:56 - suddenly say oh you know i see this
17:58 - method here but i think i have a better
18:00 - name for this method so i'm going to go
18:02 - ahead and use you know the ide tools
18:05 - like i should in order to change this
18:06 - method its name um so i can say new
18:09 - method name so this is a completely
18:12 - innocent change to make right it's a
18:14 - private method i can see that oh it's
18:16 - not being used anywhere else in the code
18:18 - obviously it's private so no problem at
18:20 - all
18:21 - but now if i go back over here to our
18:24 - main method and run our program
18:27 - it doesn't do anything at all because
18:30 - the name of that method changed now this
18:32 - if statement is never triggered it never
18:35 - finds that method because it doesn't
18:37 - exist anymore so now our code is just
18:39 - quietly working in a completely
18:41 - different way and it would be a hundred
18:43 - percent unexpected
18:45 - for somebody who's just making an
18:48 - innocent change like that another not so
18:50 - good thing about reflection is because
18:52 - it has to figure out and manipulate all
18:54 - this stuff at runtime it can't do any
18:57 - compile time optimizations so because of
19:01 - that code that uses reflection is
19:03 - usually way slower than code that does
19:06 - the same thing without reflection so
19:08 - with all that said when should you use
19:10 - reflection and when should you not a
19:12 - good rule of thumb is if you can
19:14 - possibly do something without reflection
19:17 - it's best to avoid using it your code
19:20 - will be faster more robust more testable
19:23 - and generally just easier and more
19:25 - pleasant to work with but there are
19:27 - plenty of legitimate uses that we did
19:29 - talk about so if you have to it's a
19:31 - really good tool to have on your tool
19:33 - belt or if you're just some kind of evil
19:35 - reflection genius and you just want to
19:37 - make the world suffer you can do that
19:39 - too if you enjoyed this video or learned
19:41 - something please be sure to like and
19:43 - subscribe it's the best way to make sure
19:45 - that these videos get out to help more
19:47 - people i also have a full java course
19:49 - available in a link down in the
19:50 - description below so if you're
19:52 - interested go check it out it's an
19:54 - amazing way that you can support the
19:56 - channel and get a ton of value and java
19:59 - knowledge in return as always thank you
20:01 - so much for watching i really do
20:02 - appreciate you being here with me and
20:04 - i'll see you next time