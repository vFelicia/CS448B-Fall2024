00:00 - in this video we're going to talk all
00:01 - about the super keyword in java super is
00:03 - one of those keywords that people kind
00:05 - of think they understand how it works
00:06 - but maybe you're not quite clear what
00:08 - exactly it's doing and when you need to
00:09 - use it by the end of this video you'll
00:11 - know exactly what you can do with the
00:12 - super keyword and when and how to use it
00:14 - my name is john i'm a lead java software
00:16 - engineer and i love sharing what i've
00:18 - learned with you in a clear and
00:19 - understandable way i also have a full
00:20 - java course available in the link down
00:22 - in the description if you're interested
00:24 - so let's get to it alright so first
00:25 - things first what is the super keyword
00:28 - used for in general super is used to
00:30 - access things in the parent class the
00:33 - super class of the class you're working
00:35 - on hence the name super so for example
00:37 - if you have a class like this animal
00:39 - class that we have here you might have a
00:41 - class that is a sub class of animal for
00:44 - example a cat class this cat class
00:47 - extends animal so animal is the super
00:50 - class of cat so within the cat class
00:52 - you'll use the super keyword to access
00:55 - things in the animal class there's two
00:58 - main ways you can use the super keyword
01:00 - in your classes the first way that you
01:01 - can use super is to call methods in the
01:04 - super class that you've overridden in
01:06 - the child class so what exactly does
01:08 - that mean why would you want to do that
01:10 - well for example over here in our animal
01:12 - class we have this method public void
01:15 - make noise and all a generic animal does
01:18 - to make noise is print out hello i am an
01:21 - animal seems like the kind of thing an
01:22 - animal would say now the cat class which
01:24 - extends animal would probably make noise
01:27 - in its own specific way so what we might
01:29 - do in our cat class is override the
01:32 - public void make noise method so cats
01:34 - will make noise in their own way so for
01:37 - cat we can print out meow meow meow as a
01:39 - side note because this method overrides
01:42 - the make noise method in the parent
01:44 - animal class although it's not
01:45 - necessarily required it's good practice
01:48 - to use the at override annotation here
01:50 - so now if we go back to our main method
01:52 - and create a new cat
01:54 - my cat equals new cat and call my cat
01:58 - dot make noise it's going to print out
02:01 - meow meow meow but what if inside the
02:03 - cat classes implementation of the make
02:05 - noise method i want to be able to call
02:07 - the parent animal classes version of the
02:10 - make noise method how can i do that well
02:12 - that's where the super keyword comes in
02:15 - so over here in our cat classes make
02:17 - noise method to call the super classes
02:19 - implementation of that make noise method
02:21 - you just use super dot make noise so now
02:25 - when we call the make noise method on a
02:27 - cat it first calls the parent classes
02:30 - implementation of the make noise method
02:32 - which should print out hello i'm an
02:34 - animal and then continues on and prints
02:36 - out meow meow meow and if we go back and
02:38 - run our program again that's exactly
02:40 - what it does you don't necessarily have
02:42 - to be in the child classes
02:43 - implementation of the make noise method
02:46 - in order to call the make noise method
02:47 - in the parent class you can make the
02:49 - same call from any non-static method in
02:51 - this class so for example if we had
02:53 - another method like public void
02:56 - jump you can still call the super
02:58 - classes make noise method from here just
03:00 - as you could over here but in most real
03:02 - world scenarios you'll see that
03:03 - superclass method being called inside
03:06 - the method that is overriding it in the
03:07 - subclass but it's good to know that
03:09 - you're not prevented from doing that if
03:11 - you need to you can also use super to
03:13 - call parent class methods that you don't
03:15 - override in your subclasses but as we'll
03:17 - see there's not really much reason
03:19 - you'll ever need to do that like here in
03:21 - our animal class it has this public void
03:23 - eat method that just prints out munch
03:26 - munch but in the cat subclass we aren't
03:29 - overriding that eat method with anything
03:31 - but since cat is a subclass of the
03:33 - animal class it automatically gets this
03:36 - implementation of the eat method so even
03:38 - though we're not overriding the eat
03:39 - method we can still call my cat dot eat
03:42 - so now it's also printing out lunch
03:44 - munch so in the cat class in any method
03:47 - that we want we can call super.eat if we
03:50 - want to that will of course call the
03:52 - superclass the animal classes
03:54 - implementation of the eat method but in
03:56 - this situation we don't really have to
03:58 - use super we can just call eat and
04:01 - because our cat class isn't overriding
04:04 - the super class's implementation of the
04:06 - eat method by default just calling eat
04:08 - will get us the animal classes
04:10 - implementation of the eat method that's
04:12 - why you only really need to use the
04:13 - super keyword when you specifically want
04:15 - the parent classes implementation of a
04:18 - method that you have overridden in your
04:20 - subclass there are a couple things to
04:22 - note about this though the first thing
04:23 - is you can't just do this from some
04:25 - other random class for example back here
04:27 - in our main method you can't just say
04:30 - hey my cat i want your super class's
04:33 - implementation of the make noise method
04:35 - using something like
04:36 - mycat.super.makenoise
04:39 - it's just not a thing the super keyword
04:41 - can only be used inside a class to refer
04:44 - to that class's super class it's parent
04:47 - class the second thing is that you can't
04:49 - use the super keyword to access any
04:51 - private methods or fields in the parent
04:53 - class since they're private they're
04:55 - still only going to be accessible to
04:57 - that parent class and not anywhere else
04:59 - even if you do use super so if in our
05:02 - animal class we had another method
05:04 - private void do something private hey
05:09 - this method is private if we then go
05:12 - back over to our cat class and try and
05:14 - call super dot do something private
05:17 - we'll get an error that says this method
05:19 - is not visible and that's because it is
05:21 - still private to the animal class but if
05:25 - this method happens to be either public
05:27 - or protected then you're good to go and
05:30 - you'll be able to access it from the
05:31 - subclass using super the second way that
05:34 - you can use the super keyword is to call
05:36 - the parent classes constructors but that
05:38 - seems a little weird right why would you
05:40 - want to do that let's look at an example
05:42 - let's say that here in our animal class
05:44 - we had a new constructor public animal
05:47 - now this animal class has two fields an
05:50 - int age and a string name so in our
05:53 - constructor maybe we want to take in
05:55 - those two values and set them on the
05:57 - object that's being created so we can
05:58 - take in an ant age and a string name and
06:02 - to set those two values we just want to
06:03 - call this dot age equals age and this
06:06 - dot name equals name by the way you can
06:08 - check out this video here if you want to
06:10 - learn all about using the this keyword
06:12 - it'll clear up any questions you might
06:14 - have about how to use this anyway so
06:16 - this constructor allows us to set the
06:18 - animal's age and name when it's being
06:20 - created now over in our cat class we
06:23 - probably want a similar type of
06:24 - constructor right that can take in this
06:26 - cat's name and its age but in our cat
06:28 - class we also have a field that doesn't
06:30 - exist in the animal class because it's
06:32 - specific to cats and that's a string cat
06:34 - food preference field so in our
06:36 - constructor we probably want the ability
06:38 - to set that when the object is being
06:39 - created too so we can create a new
06:41 - constructor public cat that takes in
06:44 - those three fields and sets them on the
06:46 - new cat being created so it takes in an
06:48 - int age string name and a string cat
06:51 - food preference and we can set those
06:54 - three fields in the same way this dot
06:56 - age equals age this dot name equals name
06:59 - and this dot cat food preference equals
07:03 - cat food preference so now we have a
07:05 - constructor that takes in all three of
07:06 - these fields and sets all three of them
07:09 - on the new cat being created but if we
07:11 - look closely there's kind of a little
07:12 - bit of code duplication happening here
07:14 - right so here in our cat constructor
07:16 - we're setting the age and the name
07:17 - that's being passed in but in our animal
07:19 - class we already have a constructor
07:21 - that's doing that so it would be nice if
07:23 - we could use
07:24 - this animal constructor for setting the
07:27 - first two values on our cat and then we
07:29 - just need to set the cat food preference
07:31 - on top of it well the super keyword
07:33 - allows you to do exactly that we can use
07:36 - the super keyword to call the parent
07:38 - classes constructor from here and to do
07:41 - that you just call super and then in
07:44 - parentheses you pass in whatever
07:45 - parameters are required for the
07:47 - superclass constructor that you want to
07:49 - call here we want to call this
07:50 - constructor that takes in the int age
07:53 - and string name so all we have to do is
07:55 - pass in age and name the superclass
07:58 - constructor that we're calling here this
08:00 - animal constructor will take care of
08:02 - setting the age and the name and we only
08:04 - have to worry about setting additional
08:05 - values that are specific to cats which
08:07 - here is just cat food preference using
08:10 - super like this it will call the super
08:12 - classes constructor that matches the
08:15 - parameter types that we pass in but if
08:17 - you try to pass in types that the parent
08:19 - class doesn't have a constructor for
08:20 - like if we added i don't know another
08:22 - string like john the parent class
08:25 - doesn't have any constructor that takes
08:26 - in an int a string and a string so
08:28 - you'll get an error here so now let's
08:30 - try calling this new cat constructor
08:32 - that we made so we need to pass in an
08:34 - age a name and a cat food preference the
08:36 - age is three the name is george and the
08:39 - cat food preference is purina one to
08:42 - make sure those values are being set
08:44 - correctly we can go ahead and print them
08:45 - out
08:46 - mycat.age mycat.name
08:50 - plusmycat.cat food preference and of
08:52 - course we have a three-year-old cat
08:55 - named george who prefers purina one now
08:58 - there are a couple of things you need to
08:59 - know about using super like this to call
09:01 - the superclass's constructor methods the
09:03 - first is that calling the superclass's
09:05 - constructors can only be used inside the
09:08 - subclass constructors it doesn't make
09:10 - any sense to do it in any other method
09:12 - so if you try to do it you'll get an
09:14 - error also when you do use it in a
09:16 - constructor it has to be the very first
09:19 - line of that constructor so if you try
09:22 - to just switch these two lines around
09:23 - and have it set the cat food preference
09:25 - before calling the super class
09:27 - constructor you will get an error saying
09:28 - that the constructor call must be the
09:30 - first statement in a constructor by the
09:32 - way one of my favorite shortcuts for
09:33 - eclipse is pressing alt and the arrow
09:36 - keys to move lines of code up and down i
09:38 - think that's pretty awesome and you can
09:39 - check out this video here to see even
09:41 - more of all the very best eclipse
09:43 - shortcuts to speed up your programming
09:44 - the second thing is not very many people
09:47 - know this but at the very beginning of
09:49 - every constructor method if you don't
09:51 - have any call to super like this java
09:54 - will actually call the parent classes no
09:57 - args constructor implicitly and
09:59 - automatically without you having any
10:01 - code or anything so if you don't have
10:03 - anything like this it's as if you're
10:05 - calling the superclass constructor with
10:07 - no parameters you can always put in the
10:09 - supercall in your constructors if you
10:11 - want but you absolutely don't have to
10:13 - java will do that automatically but that
10:15 - does mean if you want to use any of the
10:17 - other superclass constructors you have
10:19 - to explicitly call it like we did here
10:22 - with the parameters that you want for
10:23 - that constructor otherwise by default it
10:25 - will automatically use the parent
10:27 - classes no args constructor also in that
10:29 - situation where you don't have any
10:31 - specific call to a superclass
10:33 - constructor and it automatically uses
10:35 - that parent class's no args constructor
10:38 - if there isn't a no args constructor for
10:40 - that parent class you're going to get an
10:42 - error so if we go back to our animal
10:43 - class and get rid of this no args
10:46 - constructor and then go back to our cat
10:48 - class now you can see we have an error
10:50 - here because implicitly it's calling
10:53 - that parent classes no args constructor
10:56 - and you get an error because it doesn't
10:57 - exist so in this situation you can
10:59 - either call some different parent class
11:01 - constructor like we did here or you can
11:04 - actually implement that no args
11:06 - constructor in your parent class but
11:08 - that is an error that can be really
11:10 - really tricky to hunt down and
11:11 - understand if you aren't familiar with
11:13 - this so keep that in mind to prevent
11:15 - yourself from banging your head against
11:16 - the wall when you see that type of error
11:18 - in the future if you enjoyed this video
11:19 - or learned something please let me know
11:21 - by hitting the like button and be sure
11:22 - to subscribe so you don't miss each new
11:24 - java tutorial and don't stop now keep up
11:26 - the momentum and check out one of these
11:28 - other videos below to keep on learning
11:30 - as always thank you so much for watching
11:31 - and i'll see you next time