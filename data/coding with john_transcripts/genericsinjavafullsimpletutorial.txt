00:00 - in this video we're going to talk all
00:01 - about generics in java generics can be
00:03 - super confusing the first time you see
00:05 - them with all the t's and question marks
00:07 - and angle brackets and k's and v's but i
00:09 - promise by the end of this video you'll
00:10 - know exactly what generics are why they
00:13 - exist and why they're useful and how you
00:15 - can use them in your own programs my
00:17 - name is john i'm a lead java software
00:18 - engineer and i love sharing what i've
00:19 - learned with you in a clear and
00:21 - understandable way i also have a full
00:22 - job of course available and a link down
00:24 - in the description if you're interested
00:25 - first to have a good understanding of
00:27 - what generics do and why they exist it
00:29 - helps to know the kinds of problems that
00:31 - java developers were running into before
00:34 - generics existed let's say i wanted to
00:36 - create a class where all it would do is
00:38 - hold an integer value that i give it and
00:41 - then print out that integer whenever i
00:43 - wanted to so we might call something
00:45 - like that integer printer you can go
00:47 - ahead and click finish and create that
00:49 - so this class would be pretty simple we
00:50 - would have an integer field for the
00:52 - thing that we want to print so we can
00:54 - call it thing to print and we can have a
00:57 - constructor for this class that takes in
00:59 - this thing to print so that would be
01:01 - public integer printer then it takes in
01:04 - an integer for the thing to print and
01:06 - that would just set this dot thing to
01:08 - print equal to the thing to print that
01:11 - was passed in and we can have one method
01:13 - to actually print this out whenever we
01:15 - want to so that would be public void
01:18 - print and all that does is just print
01:20 - out the thing to print to the console so
01:23 - system.out.printline thing to print so
01:26 - if we wanted to use this integer printer
01:28 - class we would just create an integer
01:30 - printer printer equals new integer
01:33 - printer
01:34 - and pass in the integer that we want to
01:36 - print here in the constructor so let's
01:38 - say we want to print out the number 23
01:40 - now of course we can call printer.print
01:43 - and when we run our program of course it
01:45 - prints out 23. but what if we wanted to
01:47 - do exactly the same thing for a double
01:50 - instead of an integer well we couldn't
01:52 - use this class right because it only
01:54 - holds an integer it doesn't hold a
01:56 - double so what can we do well basically
01:58 - what we have to do is make a copy of
02:01 - this entire class and we can call it
02:03 - double printer and then inside that
02:05 - double printer we would basically have
02:08 - all of the exact same code except
02:10 - instead of integer we would have double
02:13 - so this new class will work great for
02:15 - holding and printing doubles but what if
02:17 - we now want a class that'll do exactly
02:19 - the same thing but work for strings well
02:22 - of course you have to do the exact same
02:23 - thing again you have to copy that class
02:25 - make a new class called string printer
02:28 - and change all these doubles to strings
02:30 - if you want your class to be able to
02:32 - print strings so now we have three
02:34 - completely separate versions of
02:35 - essentially the same kind of class and
02:37 - you can start to see the problem we
02:39 - would need a whole other class if we
02:40 - wanted to do this with floats or dogs or
02:43 - cats or cars or trucks or whatever type
02:46 - of object that we wanted to print so
02:47 - we'd end up with a ton of code
02:49 - duplication and this is with a really
02:51 - simple class if you had a more
02:52 - complicated class the code duplication
02:54 - would be even worse well that is where
02:56 - generics come in generics offer you the
02:59 - ability to have one class like this that
03:01 - is flexible for many many different
03:03 - types so let's go back to our original
03:06 - integer printer and make it generic so
03:08 - first instead of calling it integer
03:10 - printer let's just call it printer
03:11 - because it should be able to print
03:13 - anything now when you want to use
03:14 - generics in a class like this in java
03:17 - right here after the class name in the
03:18 - declaration but before the curly braces
03:21 - you have to define what is called a type
03:23 - parameter and you'll put your type
03:24 - parameter in angle brackets like this by
03:27 - convention in java typically you'll see
03:29 - this type parameter just called t but
03:31 - technically you can call this type
03:33 - parameter whatever you want but i'm
03:36 - going to just be using t so you can kind
03:38 - of get used to seeing it because that's
03:39 - the convention that you'll see elsewhere
03:41 - you can think of it as standing for type
03:43 - in this class what this t represents is
03:46 - the type of thing that this printer is
03:48 - going to be able to hold and print so
03:50 - instead of just having an integer field
03:53 - here it's going to be of type t
03:56 - right now as we're coding this class we
03:58 - don't know what types of things this
04:00 - printer is going to be asked to print
04:02 - but this gives the ability to create
04:04 - printers for any types that you want so
04:07 - of course we also have to change the
04:08 - name of our constructor to just printer
04:10 - to match the class name and that
04:12 - constructor also instead of taking in an
04:14 - integer is going to take in something of
04:17 - type t so now this class is a generic
04:20 - printer for whatever type we want but
04:22 - now how do we actually use this class if
04:25 - we want to for example create an integer
04:28 - printer like we had before well back
04:29 - here in our main method instead of an
04:31 - integer printer now of course we're
04:33 - going to just create a printer but now
04:35 - you can see that we have a warning here
04:37 - that printer is a raw type and
04:39 - references to generic type printer
04:41 - should be parameterized it wants to know
04:43 - the type of thing that we want to be
04:45 - able to print and in this example we
04:47 - want to be able to print integers so how
04:50 - we specify that is in angle brackets
04:52 - here after printer we type in integer
04:56 - that tells java i want a printer for
04:58 - integers and we have a similar warning
05:01 - here to get rid of that you just need to
05:03 - put in angle brackets after the class
05:05 - name printer in older versions of java
05:07 - you used to have to put the type in
05:09 - there again but you don't have to do
05:11 - that anymore this integer here that
05:13 - we're passing in in the angle brackets
05:15 - is what's going to be used as this
05:17 - t-type in this printer object that we
05:20 - are creating now we can run our program
05:22 - as we did before and it still prints out
05:24 - 23. but now what's cool is we can go in
05:27 - and get rid of those two extra classes
05:29 - that we made the double printer and the
05:31 - string printer we can just delete those
05:34 - because now we can use our generic
05:36 - printer class to be able to create
05:38 - printers for doubles and strings also so
05:41 - now all we have to do if we want to
05:42 - create a printer for doubles we just say
05:45 - printer and pass in double or t the type
05:48 - that we want this printer to be able to
05:50 - print we can call it double printer
05:52 - equals new printer and give it a value
05:55 - like 33.5 and we can call
05:57 - doubleprinter.print and of course it
05:59 - prints out 33.5 so now we've created one
06:02 - printer class that can print any type
06:05 - that we get it doubles ants longs floats
06:08 - pigs monkeys cars trucks whatever one
06:10 - thing to note though is that generics
06:12 - don't work with primitive types like
06:14 - lowercase int and lowercase long but all
06:16 - you have to do is just use the wrapper
06:18 - classes like integer and everything
06:20 - should just work the same way one place
06:22 - that you've probably already used
06:23 - generics all the time is with java's
06:26 - collections framework for example if you
06:28 - wanted to create an arraylist you've
06:30 - probably done this where you've
06:32 - specified in angle brackets the type of
06:34 - thing that you want to have in your list
06:37 - so if you want to create an arraylist of
06:38 - cats you say arraylist cat we'll call it
06:41 - cats equals new array list this gives
06:45 - you an arraylist that you can only add
06:47 - cats to so you can say cats.add
06:50 - new cat and that works fine but if you
06:52 - try to do cats.add
06:55 - and pass in a new dog instead you get an
06:58 - error because we specified that cat was
07:01 - the type of thing that this list was
07:02 - going to hold and if we try to give it a
07:04 - dog we get an error in the same way up
07:07 - here where we created a printer for
07:10 - doubles if we try to pass in a string
07:13 - hey there
07:14 - we get a similar error because we told
07:16 - java that this was going to be a printer
07:18 - for doubles and here we're trying to
07:20 - give it a string but you might be
07:21 - thinking well hey john if we want to be
07:23 - able to create a list of anything we
07:25 - want why do we have to deal with all
07:27 - these generics why can't we just create
07:29 - like an array of just objects and then
07:32 - we can put whatever we want in it well
07:34 - it is true that you can do that and your
07:36 - code will work but it won't be type safe
07:39 - at all let me show you what i mean let's
07:41 - say that our arraylist instead of
07:43 - holding cats just holds objects this is
07:45 - the kind of thing you'd have to do if
07:47 - generics didn't exist you just have to
07:49 - create an arraylist that can hold
07:51 - whatever so in this imaginary world
07:53 - without generics we still want to create
07:55 - a list of cats so we've added our new
07:58 - cat to our list but let's say sometime
08:00 - later on in the code we want to be able
08:01 - to get stuff off our list and use it so
08:04 - if we want to get this first cat off the
08:05 - list and put it in a variable we would
08:07 - want to create a cat call it my cat
08:10 - equals cats.get
08:12 - the first element of the list at index
08:14 - 0. but here we get an error that we have
08:17 - a tight mismatch you can't convert from
08:19 - object to cat java doesn't know that
08:21 - this is supposed to be a list of cats it
08:23 - just knows it's a list of objects so we
08:26 - have to tell java yes i know this is a
08:28 - cat so you can go ahead and cast it to a
08:30 - cat so i can store it in this variable
08:32 - but what if instead of adding a cat to
08:34 - the list somebody adds a dog well the
08:37 - code all looks the same there's no
08:39 - compilation errors or anything but of
08:41 - course if you try to run it you're going
08:43 - to get a classcast exception
08:45 - right here on this line because you're
08:48 - trying to cast this element in the list
08:50 - as a cat but it's actually a dog so just
08:53 - having an arraylist that can hold
08:54 - whatever type of object causes all types
08:57 - of these type safety issues and generics
09:00 - solves that problem for us so now we can
09:02 - say yes i want to create a list of cats
09:05 - so then in the code if somebody tries to
09:07 - add a dog to that list they get an error
09:10 - and it won't even compile and also since
09:12 - java knows that this is a list that can
09:15 - only contain cats whenever you get a
09:17 - thing off of that list it is 100
09:19 - guaranteed to be a cat and you don't
09:22 - have to do any special casting that's
09:24 - how generics help us they offer the
09:26 - ability to create classes that can
09:28 - accommodate tons of different types but
09:30 - also the structure and the type safety
09:33 - of knowing exactly which type you're
09:36 - using that class with at the moment but
09:38 - there are even more cool advanced things
09:40 - that you can do with generics let's go
09:42 - back to our generic printer class so
09:44 - right now we can create a printer of
09:46 - whatever class that we want to right but
09:48 - what if instead of being a printer for
09:51 - any type we want this to be a more
09:53 - specialized printer for animals for
09:55 - example i have this cat class here that
09:58 - extends the animal class and i also have
10:01 - a dog class here that extends the animal
10:03 - class so if we want this to just be a
10:05 - printer for any type of animal instead
10:07 - of just saying t we can say t
10:10 - extends
10:11 - animal now back here in our main method
10:13 - we now get an error when we try to
10:15 - create a printer for integers or doubles
10:18 - because now this printer only works for
10:19 - animals so we can create a cat printer
10:22 - and in the constructor we can pass in a
10:25 - new cat or we can create a printer for a
10:28 - dog and pass in a new dog but what's
10:31 - cool about that is now in our printer
10:33 - class since we know that whatever is
10:36 - passed in as this type extends animal
10:39 - any method that is defined in the animal
10:41 - class is available to us in our thing to
10:45 - print variable because we know that this
10:47 - thing to print this t is going to be
10:50 - some type of an animal so now because we
10:52 - know this thing to print is an animal
10:55 - down here in our print method we can
10:56 - call thing to print dot
10:59 - eat because this eat method is available
11:02 - in the animal class so if we didn't have
11:05 - this extends animal if we just took in
11:07 - any type at all we can't call the eat
11:09 - method because this tea type isn't
11:12 - guaranteed to be an animal at all so
11:14 - there's no way to know whether it will
11:16 - have an eat method available on it or
11:17 - not when you do this type of thing it's
11:19 - called a bounded generic because you're
11:21 - giving a certain bound a limit on the
11:23 - type that's able to be passed in you can
11:26 - also use bounds with interfaces let's
11:28 - say you wanted to guarantee that this
11:30 - type implemented the serializable
11:32 - interface you just put in extends
11:34 - serializable you might think that
11:36 - because this is an interface you should
11:38 - put implements here instead of extends
11:40 - but no it's just not the proper syntax
11:42 - it still has to be extends even though
11:44 - it's a little bit weird another cool
11:45 - thing you can do is have multiple bounds
11:47 - let's say you wanted to make sure that
11:48 - it was a subclass of animal and also
11:51 - implemented the serializable interface
11:53 - to do that you can just say extends
11:55 - animal
11:56 - and serializable here with an ampersand
12:00 - and you can list as many things as you
12:01 - want here all separated by ampersands
12:04 - there's just a couple restrictions you
12:05 - can only have one class which makes
12:07 - sense because java doesn't support
12:09 - multiple inheritance and you always have
12:10 - to list the class name first with any
12:13 - interfaces after that if you try to
12:15 - switch it around and put the interface
12:16 - first you'll get an error in addition to
12:18 - having generic classes you can also have
12:20 - generic methods let's say we wanted to
12:23 - make a method that can take in any type
12:25 - of object and print it out with
12:27 - exclamation points private static void
12:30 - let's call it shout since it'll print
12:31 - things out with exclamation points it'll
12:33 - take in some kind of type that we're
12:36 - going to call t we'll call it thing to
12:38 - shout and inside that method all we're
12:41 - going to do is print out that thing to
12:43 - shout with a bunch of exclamation points
12:45 - after it so right now we're getting an
12:47 - error here because java is saying hey t
12:49 - isn't the type what do you want me to do
12:50 - with this to tell java that this t is
12:53 - supposed to be a generic type right here
12:55 - in the method signature right before the
12:57 - return type you put that generic type in
13:01 - angle brackets again you can call this
13:03 - whatever as long as it matches here and
13:06 - in the parameters but by convention
13:08 - you're still just going to see t most of
13:10 - the time so now here in our main method
13:12 - we can call our shout method with
13:13 - whatever we want you can send in a
13:15 - string like john you can send in an int
13:18 - 57 or you can even send in a cat so this
13:22 - can take in any type of parameter that
13:24 - we want to send and when we run it it'll
13:26 - print them out with exclamation points
13:28 - java also supports the ability to have
13:30 - multiple different generic types here so
13:32 - in addition to taking in this t thing to
13:34 - shout we can also take in say
13:36 - the
13:37 - other thing to shout all we have to do
13:39 - is add this v to our angle brackets here
13:42 - and separate them with a comma and now
13:44 - this method will take in two of any sort
13:47 - of type so we can pass in john and 74
13:50 - and also go ahead and print out
13:52 - other thing to shout and that works and
13:55 - is now flexible with any two types at
13:57 - all if you want you can also have
13:59 - multiple generic types like this in your
14:01 - generic classes so over here in our
14:03 - printer class if we wanted to have
14:05 - another field here let's call it v
14:09 - other thing and all we have to do is
14:11 - specify that up here in our angle
14:13 - brackets as well separated by a comma if
14:15 - you happen to want to return one of
14:17 - these generic values that are being
14:19 - passed into your generic methods all you
14:21 - have to do is specify that return type
14:24 - as the return type here so instead of
14:25 - void if you want to return something of
14:28 - type t you just put t here as the return
14:31 - type and then in here of course you just
14:32 - have to return something of type t which
14:35 - can just be this
14:36 - thing to shout the other advanced
14:38 - generics topic i want to talk about is
14:40 - wild cards let's talk about a situation
14:42 - where you might want to use a wild card
14:44 - and then we'll show how you can do it
14:46 - let's say we wanted to be able to create
14:47 - a method that can take in a list that
14:50 - holds any type of objects and we want to
14:52 - be able to print out that list so we
14:55 - might call that print list so how do we
14:57 - specify in the parameters here that we
14:59 - want to be able to take in a list that
15:01 - contains any type of thing you might
15:04 - think that we can just say okay i want
15:05 - to take in a list of objects we can call
15:09 - it my list and all we'll do is just
15:11 - print out that list to the console so
15:13 - now up here we can create a list of
15:16 - integers
15:17 - call it in list
15:19 - equals new array list we can take our
15:22 - int list
15:23 - and add the number three and then we can
15:25 - try and call our print list method with
15:28 - our int list as the parameter but if we
15:31 - try and do that we get an error here
15:32 - that says we can't pass in this list of
15:35 - integers as this parameter that's
15:36 - supposed to be a list of objects but it
15:39 - might feel like you should be able to do
15:40 - that right of course an integer is a
15:42 - subclass of object so shouldn't we be
15:44 - able to pass in just a list of integers
15:47 - well even though integer is a subclass
15:49 - of object a list of integers is not a
15:53 - subclass of a list of objects so this
15:55 - doesn't work this is where a wild card
15:58 - will work to solve your problem so
15:59 - instead of saying that this is a list of
16:01 - objects we say that this is going to be
16:03 - a list of unknown by passing in a
16:06 - question mark this question mark is the
16:09 - wild card you use a wild card a question
16:12 - mark as the type parameter when you're
16:14 - using a generic when you don't know
16:17 - what exactly that generic type is going
16:19 - to be so it's saying hey java i've got
16:21 - this method here and i want it to be
16:23 - able to take in a list of anything but i
16:25 - don't know what it's going to be a list
16:27 - of so now you can call this method with
16:29 - a list of whatever you want in this case
16:31 - we're doing it with a list of integers
16:33 - but you can also do it with a list of
16:35 - anything else let's say we had a list of
16:37 - cats add a new
16:39 - cat to that list change this to catlist
16:42 - here and pass the catlist into our print
16:45 - list method and it now works with lists
16:47 - of both types with no errors you can
16:50 - also have bounded wild cards similarly
16:53 - to how we did in our generic class so
16:55 - instead of being a list of anything at
16:58 - all we can say this has to be a list of
17:00 - something that extends the animal class
17:04 - but now you can see up here that we're
17:05 - getting an error when we're trying to
17:07 - call this method with a list of integers
17:09 - and that's because integer doesn't
17:11 - extend animal we don't get that same
17:14 - error here when we're calling it with a
17:16 - list of cats because cat does extend
17:18 - animal if you enjoyed this video or
17:20 - learned something please let me know by
17:21 - leaving a like and be sure to subscribe
17:23 - so you don't miss each new java tutorial
17:25 - and of course don't stop now keep
17:26 - learning by watching one of the other
17:28 - videos below thank you so much for
17:29 - watching i really appreciate you being
17:31 - here with me i'll see you next time