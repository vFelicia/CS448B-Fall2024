00:00 - hey everybody so today's video is going
00:02 - to be uh just a little bit different
00:04 - we're going to be doing a leet code
00:06 - coding exercise i wanted to do this for
00:09 - a couple of reasons first uh programming
00:11 - exercises are just really cool and a lot
00:13 - of fun and second i think this is a
00:15 - great way that we can apply and solidify
00:18 - any of the java knowledge that you've
00:20 - been learning on your own or in my
00:22 - youtube videos or in my java course
00:24 - which as you know you can find down in
00:26 - the description below so go check it out
00:28 - okay so let's get right to it we're
00:30 - going to be starting with the very first
00:32 - lead code problem called twosum what i
00:34 - want to show in this video is the
00:36 - initial solution that you would probably
00:38 - come up with for this problem and how to
00:40 - do it but after that we're going to talk
00:41 - about a much faster solution that uses a
00:45 - different technique and a way of coming
00:47 - up with the answer to our problem and
00:49 - we'll see exactly how much faster it is
00:51 - and talk about why
00:53 - so the description of our problem is
00:55 - given an array of integers called nums
00:58 - and an integer called target we're
01:01 - supposed to return the indices
01:05 - of the two numbers in that array such
01:07 - that they add up to the given target and
01:11 - so literally over here in the code we
01:13 - are going to implement this two sum
01:15 - method and then as parameters to that
01:17 - method we're going to receive an int
01:19 - array called nums and an int called
01:23 - target and we're just supposed to find
01:25 - the two ins inside this array that add
01:29 - up to the target now there's a couple of
01:32 - restrictions and assumptions that they
01:33 - give us here we can assume that each
01:36 - input will have exactly one solution so
01:40 - that means we should always be able to
01:42 - actually find a solution there will
01:43 - never be an instance where we don't have
01:46 - two numbers in this array that add up to
01:48 - the target but also that we won't have
01:51 - two separate solutions and there's a
01:53 - rule that we can't use the exact same
01:55 - element in the array twice now our
01:57 - solution here will be returned as this
02:00 - int array return type so once we find
02:03 - the indices of the two numbers in our
02:06 - array that add up to the target we're
02:08 - supposed to return an array containing
02:11 - those two indices remember not the two
02:14 - numbers that add up to the target but
02:17 - the indices or the indexes of those two
02:20 - numbers in the array so they provide an
02:22 - example here of this being the nums
02:25 - array that's passed in so we have 2 7 11
02:27 - and 15 with a target of 9. so the goal
02:32 - of our code is to find the two numbers
02:35 - or the indexes the indices of the two
02:38 - numbers in this array that add up to
02:41 - nine so of course we can see that in
02:44 - this array two plus seven equals nine so
02:47 - those are the two numbers that add up to
02:48 - nine but our output should be zero and
02:52 - one because those are the indices
02:54 - of two and seven in our array two
02:58 - is at the index zero it's the zeroth the
03:01 - first element in the array and a 7 is at
03:04 - position 1 in our array so we return an
03:07 - array of 0 and 1. now i like coding in
03:11 - intellij a lot more than i like coding
03:13 - in a browser so i'm going to go ahead
03:15 - and copy this over to intellij so that
03:18 - we can do all our coding and problem
03:20 - solving here and then once we have a
03:21 - solution we're going to submit it just
03:24 - go ahead and paste it into the browser
03:26 - and submit it there i'm also going to go
03:28 - ahead and paste in one example problem
03:31 - just so we can have something to
03:33 - visualize and talk about the way that
03:35 - we're coding the solution so probably
03:37 - the first the most intuitive way that
03:40 - you might come up with a solution the
03:41 - first one that i came up with is just a
03:43 - simple nested for loop so first in the
03:46 - outer for loop we would just loop
03:48 - through all the elements in our nums
03:50 - array and we can just do it like this so
03:53 - for int i
03:55 - equals zero
03:57 - we'll go while i is less than nums dot
04:00 - length and then increment i each time
04:03 - with i plus plus so here in our example
04:06 - problem our input array is 5 2 and 4 and
04:10 - our target number is 6. so this for loop
04:12 - that we've just made would start at the
04:15 - zeroth element of this input array and
04:17 - then just loop one by one through each
04:19 - element in the array until it reaches
04:22 - the end but now inside this for loop we
04:25 - want to have a nested for loop so here's
04:28 - what i think we can do we start with our
04:31 - i at zero the zeroth index of our array
04:34 - which is five so what we can do is loop
04:36 - through each number that's after that
04:39 - five in our array and then add it to
04:42 - five and see if we get the target number
04:45 - so first we could say okay let's take
04:46 - five plus two does that equal six no it
04:49 - does not so five plus two doesn't work
04:52 - next we try five plus four does 5 plus 4
04:55 - equal 6 no now 4 is the last number of
04:59 - our array and so that inner loop will
05:01 - end and then we will increment in the
05:04 - outer loop so instead of starting with 5
05:06 - in this next iteration of our loop we
05:08 - will start with two does two plus four
05:11 - equal six
05:12 - yes it does so we have reached our
05:14 - solution we know there is only exactly
05:17 - one solution so now that we have that
05:19 - solution remember that we have to return
05:21 - the indices of those two numbers not
05:24 - those numbers themselves so we won't
05:26 - return two and four will actually return
05:29 - one and two so with that said let's go
05:32 - ahead and implement our inner for loop
05:34 - here now usually in an inner for loop
05:37 - instead of using i you just use int j
05:40 - now what do we want to initialize j to
05:42 - here we don't want to initialize it to
05:44 - zero like we did for i and that's
05:47 - because we don't want to start by adding
05:49 - the first number to itself and we're not
05:52 - allowed to use the same element twice in
05:55 - our solution so instead of starting with
05:57 - the zeroth element in the array like our
05:59 - outer loop does let's start with
06:01 - whatever the current index that we're
06:03 - looking at in our outer loop plus one so
06:06 - for example in the outer loop if we're
06:08 - currently looking at the value here at
06:11 - index zero in our inner loop we want to
06:14 - be looking at the number at index one so
06:17 - we can do that by just saying i plus
06:20 - 1. however the next part is pretty much
06:22 - the same we do want to keep iterating
06:24 - while j is less than nums dot length so
06:28 - we're starting at one number past the
06:30 - number that we're looking at but then
06:32 - comparing that first number to every
06:34 - other element in the array all the way
06:36 - until the end and then to iterate in our
06:39 - inner for loop well we do the same thing
06:41 - with just j plus plus okay so now inside
06:44 - our inner for loop we have the two
06:47 - values that we want to add up to see if
06:50 - they equal our target so all we have to
06:53 - do at this point is just add the two
06:55 - numbers that we're looking at together
06:56 - check to see if it equals our target and
06:58 - if so return the indices of those two
07:00 - numbers so that's a pretty simple if
07:02 - condition so if the value at index i
07:08 - plus
07:09 - the value at index j
07:12 - equals our target number then we know
07:15 - that we have the solution that we're
07:17 - looking for and we just need to now
07:18 - return those indices and we want to
07:20 - return them as a new int array so we
07:24 - just say return
07:25 - new int array and the two elements of
07:28 - that inter array are going to be our two
07:30 - indices that we're looking at so that
07:31 - would just be i and j so that's pretty
07:35 - much the algorithm now you might notice
07:37 - that we are getting an error over here
07:38 - that we are missing a return statement
07:40 - and that's because uh it's technically
07:42 - possible that we would get to the end of
07:45 - our method here where we say that we're
07:47 - going to return an int array and if we
07:50 - don't happen to find a solution it won't
07:52 - return anything so we have to return
07:54 - something now according to the rules of
07:56 - this leak code problem it's always going
07:58 - to have exactly one solution so in this
08:00 - situation it doesn't matter a whole lot
08:02 - what we return it just has to be
08:04 - some int array so what we can do if we
08:07 - want is just return
08:09 - this nums array that's passed in so
08:12 - let's go ahead and copy and paste our
08:15 - code back over here into lead code and
08:17 - submit it and see what happens okay here
08:19 - we go
08:20 - and
08:21 - okay so uh it succeeded but the runtime
08:25 - was 140 milliseconds which is faster
08:28 - than just about seven percent of all the
08:31 - java submissions for this problem so
08:34 - this isn't a very fast or efficient
08:37 - solution now sometimes with leak code
08:39 - you can submit it another time or two
08:41 - and see if it just happens to run faster
08:43 - in subsequent calls yeah so in this case
08:45 - it took 113 milliseconds which is now
08:48 - about 14
08:50 - but it's still not very good there's
08:51 - still a lot of people who are submitting
08:54 - a faster solution than this so let's see
08:57 - if we can come up with a better way of
08:59 - doing this that's faster so first of all
09:02 - the reason that this solution is so slow
09:05 - is because it has a big o time
09:08 - complexity of n squared so what exactly
09:11 - do i mean by that well any time you have
09:13 - a nested for loop in your algorithm
09:17 - where both the outer for loop and the
09:19 - inner for loop loop over all the items
09:22 - in your array most of the time that's
09:24 - going to give you a quadratic time
09:27 - complexity so that which means a big o
09:29 - of n squared now for small data sets
09:32 - like we have in the problem examples
09:34 - that we've been looking at that time
09:35 - doesn't really matter but once you have
09:38 - thousands or tens of thousands or
09:40 - millions of objects in the array that
09:42 - you're supposed to do your calculation
09:44 - on that kind of time complexity starts
09:47 - to really really matter so even though
09:49 - the operation that it's doing on those
09:51 - two numbers is simple you know it's just
09:52 - adding them up and then comparing them
09:54 - to another number the problem is that
09:56 - it's having to do that comparison you
09:58 - know hundreds of thousands millions or
10:00 - billions of times so what if we could
10:02 - come up with the solution where instead
10:04 - of doing that we could just loop through
10:06 - our array one time and get rid of our
10:10 - nested for loop and to do that we have
10:12 - to come up with a little bit more clever
10:14 - of a solution so let's hop back over to
10:17 - intellij and try and work this out so
10:20 - here's the idea for this faster solution
10:22 - we are going to use a map specifically
10:25 - we're going to be using a hash map now
10:28 - if you want a good refresher on maps or
10:30 - hash maps generally go and check out my
10:32 - video on that but as a quick reminder
10:35 - all a map is is just a collection of key
10:39 - value pairs so when you add a thing to
10:41 - the map you add some search and key and
10:44 - then you also add some value that it
10:46 - maps to and then later what you can do
10:49 - is give the map some certain key and it
10:51 - will retrieve the value that it has
10:54 - stored for that key and the way that the
10:56 - hashmap does that lookup it's super fast
10:59 - it's in what's called constant time so
11:02 - what we're going to do is we're going to
11:03 - loop through our array one time and each
11:06 - iteration through that loop we're going
11:08 - to add something to our map so as we're
11:11 - iterating through our array
11:13 - for each number that we look at
11:15 - what we're actually going to store
11:18 - is the number that we would have to add
11:20 - to this number to get to our target
11:23 - that will be the key
11:25 - that we add to our map so for example
11:28 - let's say we're looping through our
11:29 - array and we start at index zero which
11:32 - is the number five we say okay what
11:34 - would we have to add to five in order to
11:38 - get our target six of course it's one
11:42 - one in this case is known mathematically
11:44 - as the complement which doesn't matter a
11:47 - whole lot but it gives us a good name to
11:49 - talk about it so that complement will be
11:51 - stored as the key that we're going to
11:53 - add to our hashmap and then the value
11:56 - we're going to be storing at that key is
11:58 - the index of that number that we were
12:01 - looking at so as we're looking at the
12:03 - number 5 we know that 1
12:06 - is the complement 5 plus 1 gives us our
12:09 - target 6
12:10 - and the index of this first number that
12:12 - we're looking at is just 0. so we would
12:15 - add to our map a key of 1 which maps to
12:19 - a value of 0. but here's the really
12:22 - crucial part to this algorithm why is
12:25 - this information so useful well the
12:28 - reason is now as we keep iterating
12:31 - through this array we know that if we
12:34 - encounter the number one anywhere along
12:38 - this array we know that we can add that
12:41 - to this number to get our target number
12:44 - so that might take just a minute to sync
12:46 - in but that's the most important part of
12:48 - this algorithm so basically what we're
12:50 - going to do is loop through each number
12:52 - in our array and first we're going to
12:54 - check whether that number already exists
12:57 - as a key in our map and if it does then
13:00 - we know that we've found our match and
13:03 - in that case we just need to return the
13:04 - indices of those two numbers so one of
13:07 - them is the index of the current number
13:09 - that we're looping through and then the
13:11 - index of the other number that we need
13:13 - to return is just going to be stored at
13:16 - that location in our map so let's walk
13:18 - through how the algorithm is going to
13:20 - work for this set of numbers so we just
13:22 - have one for loop that's iterating
13:24 - through this array so first we're
13:25 - looking at the number five now what
13:27 - would we have to add to five to get to
13:29 - six one and we can calculate that by
13:32 - just taking our target minus the current
13:35 - number that we're looking at of course
13:36 - five plus one equals six so in this case
13:40 - one is our complement and this number is
13:42 - index zero in our array so we would add
13:45 - an entry to our map which has a key of 1
13:48 - the complement and a value of 0 which is
13:52 - the index of that number so then we move
13:55 - on to the next element in the array 2.
13:57 - first actually what we do is check to
13:59 - see if 2 already exists as a key in our
14:04 - map so in this case the number 2 doesn't
14:06 - yet exist in our map so then we say okay
14:09 - what number would we have to add to 2 to
14:12 - get to 6 which is 4. so 4 is our
14:15 - complement here so we add that 4 as a
14:18 - key onto our map and the value that we
14:22 - associate with that key is the index of
14:24 - the number that we were looking at which
14:26 - here is 1. so next we move on to the
14:28 - next element in the array which is 4.
14:31 - now first we ask okay does 4 exist as a
14:35 - key in our map yes it does right here so
14:39 - now that we've found that we know that
14:41 - we have a match we know the indexes of
14:43 - the two numbers that add up to our
14:45 - target but how do we know that well
14:47 - right now in our loop we're looking at
14:49 - the number four right so what we've done
14:52 - is gone and look up in our current
14:54 - existing hash map whether we have the
14:56 - number four as a key and we do and the
14:58 - value associated with that key is one
15:01 - now remember this index is where we can
15:04 - find a number
15:06 - that we have to add four to to get to
15:10 - six
15:11 - and now that we have a 4
15:13 - we know that we can add that to the
15:16 - number at this index
15:18 - to get our target so in this case our
15:20 - answer is first the index of the number
15:22 - we're looking at which is 0 1 two index
15:26 - two and the index that we find when we
15:29 - look up that number in the map so we
15:31 - look up four as the key in our map and
15:33 - we get the index one so we return two
15:37 - and one now i promise if you give it a
15:39 - little bit of time maybe re-watch that
15:41 - last section a couple of times it'll all
15:43 - sink in and make sense so with that
15:46 - let's go ahead and actually implement
15:49 - that solution so first let's go ahead
15:51 - and get rid of our inner for loop here
15:54 - because we know that we don't want to
15:55 - use any nested for loops but our outer
15:58 - for loop is still going to do the same
16:00 - thing we're going to loop through all
16:01 - the numbers in our array but before this
16:05 - for loop we want to actually create the
16:07 - hashmap that we're going to be storing
16:09 - all of that information in so to create
16:11 - our map we can just say map
16:13 - now we have to tell java what types that
16:16 - we want to use for our keys and values
16:19 - in our map in this map the keys are just
16:22 - going to be those complements that we
16:24 - calculate so those can just be integers
16:26 - and the values associated with those
16:28 - keys are just going to be the indices of
16:31 - those complements which are also just
16:34 - integers one thing to keep in mind is
16:35 - that you might try to use ins here
16:37 - instead of integers but you're not
16:39 - allowed to use primitive types here so
16:41 - you have to use their wrapper classes so
16:43 - instead of int just make sure you use
16:45 - integer now we need a name for this map
16:47 - variable so because it's going to
16:49 - contain
16:50 - the complements that we store and the
16:52 - indices of those complements we'll just
16:54 - call it complements and then we need to
16:57 - initialize that as a new hash map we
17:00 - just have to open and close the angle
17:02 - brackets here open and close parentheses
17:04 - and there we go okay so now inside our
17:07 - for loop for every number that we're
17:09 - looking at as we loop through our array
17:11 - we first want to see if that number
17:14 - already exists as a key
17:16 - in our complements map so to see if the
17:19 - value that we're looking at already
17:20 - exists in that map or not we can just
17:23 - call a method on that map
17:25 - called
17:26 - dot get and so here as the parameter to
17:29 - this get call we want to pass in the
17:31 - number in the array that we're currently
17:33 - looking at so that's not going to be i
17:35 - because i is the index of the current
17:38 - number that we're looking at the number
17:39 - at that index is nums of i
17:43 - so if the number that we're looking at
17:45 - exists as a key in this array this will
17:48 - retrieve it for us and if it doesn't
17:50 - exist it will just return null so what
17:52 - we can do is store that value in a
17:55 - variable so integer let's just call it
17:58 - complement and then we'll set that equal
18:00 - to the result of this call but actually
18:03 - looking at this because when we get the
18:06 - value that's stored at this key in the
18:08 - array the actual value that it's giving
18:11 - us
18:12 - is the index of the number that has that
18:14 - complement and not the complement itself
18:16 - so a better name for this might be a
18:19 - complement index so now if this
18:22 - complement index is not null we know
18:24 - that we've found a match so we can just
18:27 - say if that complement index is not
18:30 - equal to null then we know that we have
18:32 - a match and we just need to return our
18:35 - two indices so we can just say return
18:38 - new int array now what are the two
18:41 - indices that we want to return so the
18:43 - first index is just i the index of the
18:45 - number that we're currently looping
18:47 - through in our array now next is the
18:49 - index of the number that we can add to
18:52 - that number to get our target which we
18:54 - know is stored at the complement index
18:58 - okay so we know that if we find a hit
19:01 - and our map then we have a match and we
19:04 - can just return the indices but if we
19:06 - don't then we have to calculate the
19:08 - complement and add it to our map so to
19:12 - add an element to a map you just call
19:14 - that map so complements dot
19:17 - put
19:18 - now this put method takes two parameters
19:21 - the key as the first parameter and the
19:23 - value as the second parameter now in
19:25 - this case we said that for the key
19:28 - we wanted it to be the complement of the
19:31 - number that we're looking at which is
19:32 - the number that we have to add to that
19:35 - number to get our target and we can do
19:37 - that just with simple subtraction so we
19:39 - can take our target
19:41 - minus the number that we're currently
19:44 - looking at in our array
19:45 - which is just nums
19:47 - of i and then for our second parameter
19:50 - for the value that we want to store at
19:52 - that key remember we just want it to be
19:54 - the index that we're currently at so
19:56 - that's just i okay so i think that
19:59 - should just about do it so i'm going to
20:01 - go ahead and copy this and then go back
20:05 - over to leak code and paste it in and
20:08 - we'll go ahead and submit it and see how
20:10 - it goes okay
20:12 - okay so it also succeeded but way way
20:16 - faster than our last solution just two
20:19 - milliseconds so it says here that's
20:21 - faster than 94.58
20:24 - of java submissions for this problem so
20:27 - that's way way faster that's like more
20:29 - than 50 times faster than our previous
20:32 - solution it's an insane difference and
20:35 - the reason for that drastic difference
20:38 - is now we're only having to loop through
20:40 - our array exactly one time so now
20:43 - instead of having a time complexity of
20:45 - big o of n squared it's just big o of n
20:49 - which we call a linear time complexity
20:52 - one thing to note about our newer
20:54 - solution though is that it does at least
20:56 - theoretically take up just a little bit
20:58 - more space a little bit more memory and
21:00 - that's because it has to create and
21:02 - manage this hash map so for example in
21:05 - our last few runs
21:07 - so the first run of our initial
21:09 - algorithm was 45.1 megabytes and then 45
21:12 - megabytes and then the memory taken up
21:14 - by our current solution is now 46.2
21:17 - megabytes and there could be a lot of
21:19 - variance even within different runs here
21:21 - on leak code so if i submit it again i
21:23 - might get a different uh runtime and
21:25 - memory let's see so yeah this time we
21:27 - get a three millisecond runtime and 46
21:29 - megabytes of memory so it's not really
21:31 - that big of a difference in memory but
21:34 - it is something to note there could be
21:36 - some algorithms that you can make a
21:37 - whole lot faster with a lot more memory
21:40 - and then you might have to weigh the
21:42 - pros and cons of using that much memory
21:45 - but in this case it's it's so
21:46 - dramatically faster it's not even close
21:49 - and the amount of memory taken up is
21:52 - just negligibly different so it doesn't
21:54 - even matter this is just a way better
21:56 - solution now if you're kind of newer to
21:58 - java or newer to programming in general
22:00 - you might have thought man i never would
22:02 - have thought of that kind of a solution
22:04 - even if you know i maybe i know what a
22:06 - map is and how it works but i never
22:08 - would have thought to use a map to do
22:11 - this kind of look up to avoid having to
22:13 - do all these calculations now i'll just
22:15 - tell you
22:16 - that's totally okay the the more of
22:18 - these kinds of problems that you do and
22:20 - you know you figure out the solutions
22:22 - for or even you watch a video or you
22:23 - look up the solution you kind of learn
22:25 - oh that's a technique i don't really
22:28 - think i would have thought about and
22:29 - then you just stash that away in your
22:31 - head and your arsenal of potential tools
22:34 - for figuring out clever solutions for
22:36 - these kinds of problems just grows and
22:38 - grows so i want to encourage you to just
22:40 - keep at it keep creating things that you
22:43 - enjoy making and if you like try these
22:45 - kinds of programming challenges as well
22:47 - the more you do them the better you're
22:49 - going to get at them i'm really curious
22:51 - what all of you think about videos like
22:52 - this would you like to see more
22:54 - programming challenges do you like doing
22:56 - things like leak code or do you have
22:57 - suggestions for others i would like to
22:59 - be able to come up with some kind of
23:01 - content that i can deliver to you more
23:04 - regularly and something like a coding
23:05 - challenge i think enables me to do that
23:07 - but if you have ideas for other things
23:10 - you'd like to see me do on a more
23:12 - regular basis i would love to hear them
23:14 - so just let me know down in the comments
23:16 - what you think or if you have a way to
23:18 - make
23:19 - this even faster let me know down in the
23:22 - comments too i would love to see that so
23:24 - as always of course like subscribe
23:26 - comment you know the youtube trifecta
23:28 - thank you all so much for watching i
23:31 - really appreciate you being here with me
23:33 - and i'll see you next time