00:00 - you might have heard that Java is a
00:01 - strongly typed language but what does
00:03 - that actually mean especially if you
00:05 - started with Java to learn programming
00:07 - it might not mean much at all to you is
00:09 - being strongly typed a good thing or a
00:11 - bad thing and what does it actually mean
00:13 - to you the programmer as you develop
00:15 - your Java programs we'll talk about all
00:17 - of that with examples in this video my
00:19 - name is John and I'm a lead Java
00:21 - software engineer I also have a full
00:23 - Java course available in a link down in
00:24 - the description if you're interested
00:26 - there you'll find over 8 hours of
00:27 - exclusive videos covering dozens of java
00:30 - topics so if you haven't already go
00:31 - check it out first of course what
00:33 - exactly does being strongly typed mean
00:36 - well that term is one of those things
00:38 - that nerds tend to argue a lot about
00:40 - they just mean that Java is very strict
00:42 - about enforcing data types if you make a
00:45 - variable Java is going to make sure that
00:47 - you tell it explicitly what type that
00:51 - variable is and after that it'll keep an
00:53 - eagle eye on it to make sure you never
00:56 - change that variable to any other type
00:59 - one once a variable is declared its data
01:02 - type will never change so for example
01:05 - when you create a variable for an INT
01:07 - you have to tell Java explicitly int my
01:11 - number equals 10 Java needs to be told
01:15 - that this variable is an INT and if you
01:17 - take that away Java goes I can't resolve
01:19 - this my number you've given me with
01:21 - absolutely no type information at all
01:23 - how am I supposed to figure that out so
01:25 - you put in int and it goes ah okay int
01:29 - thank you now there is one small
01:31 - exception where starting with Java 10
01:33 - Java can sometimes infer the data type
01:37 - of a local variable Without You
01:39 - explicitly telling it so for example
01:41 - here we could actually change int to VAR
01:44 - and Java sees oh you didn't explicitly
01:46 - tell me this was an INT but I can see
01:48 - here that you're immediately assigning
01:50 - an INT value to it when you declare it
01:52 - so that tells me it's an INT thanks but
01:54 - even here the type of this my number
01:57 - variable isn't ambiguous at all to the
01:59 - compiler this my number will still start
02:02 - out as an INT and will always be an INT
02:05 - so even with this feature Java is no
02:07 - less strongly typed than it was before
02:10 - anyway once you declare this variable
02:12 - Java will continue to make sure that
02:14 - this my number only ever holds an INT
02:16 - for the rest of its existence for
02:18 - example if after this you try to assign
02:21 - my number to be casad the compiler will
02:25 - say nah I don't think so a quesadilla
02:27 - although delicious is not a valid
02:30 - try again sir so in Java it's the
02:32 - compiler that's making sure that you're
02:34 - obeying all type rules across the board
02:36 - all the time and because Java is doing
02:39 - this at compile time in addition to
02:41 - being a strongly typed language that
02:43 - means it's also what's called a
02:45 - statically typed language these two
02:47 - terms strongly typed and statically
02:49 - typed they're often confused with each
02:51 - other but they're not really the same
02:53 - being strongly typed just means that
02:55 - Java strictly enforces its type rules
02:57 - but being statically typed means it's
02:59 - strictly enforcing those type rules at
03:02 - compile time specifically now if you've
03:04 - only ever coded in Java or any other
03:07 - strong and statically typed language
03:09 - maybe this all seems like well duh of
03:11 - course you can't just write code that
03:13 - assigns a variable with some type other
03:16 - than the type it was declared with that
03:18 - would be absolute Anarchy what
03:19 - self-respecting programming language
03:21 - could allow such Madness to compile well
03:24 - actually other languages can and do
03:26 - strictly enforce their typing rules but
03:29 - they might do it later at runtime
03:31 - instead of compile time let me show you
03:33 - what I mean this may be the first time
03:35 - ever that a programming language other
03:36 - than Java has been shown on this channel
03:39 - so I think to rank historic events by
03:41 - how noteworthy they are it goes
03:42 - something like moon landing fall of the
03:45 - Roman Empire John codes in Python you'll
03:48 - be telling your grandchildren where you
03:49 - were when you saw this now as we said of
03:51 - course in Java you always have to
03:53 - declare your variable types like int my
03:55 - number equals 10 but in Python you don't
03:59 - you just say my number equals 10 and
04:02 - also no semicolon it's a crazy world of
04:05 - programming languages out there python
04:07 - will always infer the data type of a
04:09 - variable based on what value you give it
04:13 - not only that though you can also do
04:15 - this my number equals burger and that's
04:20 - fine python just goes whatever got it my
04:23 - number is a string now now that's
04:25 - because python is a dynamically typed
04:28 - language so you never have any explicit
04:31 - type declarations you never say this is
04:32 - an INT or a string or a cat or anything
04:34 - like that it figures it all out at
04:37 - runtime as the program is running and as
04:39 - we've shown here it's also flexible so a
04:41 - variable's data type can just change
04:44 - based on whatever value you give it and
04:46 - python doesn't care it'll just make it
04:47 - happen and what people like about that
04:49 - is they can quickly whip up some
04:51 - prototype code without the extra
04:53 - characters of having to Define your data
04:55 - types the trade-off of course is that
04:57 - python doesn't catch potential type
04:59 - errors until runtime and then if there's
05:02 - a problem it'll slam face first into a
05:04 - wall so you can have something like x
05:06 - equals hello and then Y = X + 3 and it
05:11 - doesn't show any errors here but then
05:14 - when you go to actually run it it says
05:16 - oh no you can't concatenate a string to
05:18 - an INT those types aren't compatible
05:20 - what are you thinking in Java those
05:22 - kinds of type mismatches won't even be
05:24 - able to compile so you won't run into
05:26 - those kinds of unexpected type issues at
05:29 - runtime one important thing to note
05:31 - though is that even with this
05:33 - flexibility python is not considered a
05:36 - weekly typed programming language it's
05:38 - still considered to be strongly typed
05:40 - because it does enforce its typing rules
05:43 - it just does it during runtime instead
05:45 - of compile time so it's dynamically
05:47 - typed instead of statically typed so
05:50 - what exactly would be a weakly typed
05:52 - language then well it would be one that
05:54 - is way more forgiving when it comes to
05:56 - types one that plays fast and loose with
05:58 - the rules letting you do just whatever
06:01 - kind of wacky crap you want and then
06:03 - figuring out some way to accomplish
06:05 - whatever ridiculous thing you're asking
06:07 - it to do so a great example is
06:10 - Javascript the famous web scripting
06:12 - language having nothing at all to do
06:14 - with Java except sharing its name
06:16 - basically how it works in JavaScript is
06:19 - whatever you tell it to do it'll find
06:21 - some way to give it a shot so for
06:23 - example if you put in VAR result equal 3
06:27 - + 2 in in quotes let's write the result
06:31 - to the console so we can see what it
06:33 - comes up with console.log result so
06:36 - right now it's not giving any sort of
06:37 - syntax error but what is it going to do
06:40 - here is it going to convert the three to
06:42 - a string and spit out 32 or is it going
06:45 - to convert the two to an INT and spit
06:48 - out five and the answer is it is
06:51 - absolutely going to do one of those
06:53 - things and give you an answer so let's
06:55 - go ahead and run this and we see that it
06:57 - converts the three to a string
06:59 - concatenates them and gives you 32 but
07:02 - what if we changed this plus to a minus
07:06 - so if we run that well now it converts
07:09 - this two to an INT and subtracts 3 minus
07:13 - 2 and gives you one so it does kind of
07:15 - the opposite of what it did before okay
07:17 - so what about three * 2 in quotes let's
07:22 - run that okay so that time it converted
07:25 - the two to an INT and then multiplied
07:27 - them together but now what if we really
07:29 - threw it for a loop let's try to
07:31 - multiply three times burger and see what
07:34 - it does now of course if we did this in
07:36 - Java it would just laugh in our face you
07:39 - can't multiply an INT with a string no
07:41 - I'm not compiling that garbage give me
07:43 - something that at least makes some kind
07:45 - of sense but not JavaScript JavaScript
07:47 - goes oh what we're multiplying an INT
07:50 - with Burger okay yeah no no that sounds
07:52 - like an awesome idea totally makes sense
07:55 - I can totally see why you would want to
07:56 - do that I'll give it a shot and let you
07:58 - know what I get and so if you run it it
08:00 - gives Nan not a number so instead of
08:03 - blowing up with a type mismatch error at
08:06 - compile time like Java would or at
08:08 - runtime like python would it says okay I
08:11 - did my very best to multiply three times
08:13 - Burger but because nothing made sense
08:15 - and it was pretty much impossible I just
08:17 - came up with not a number but I didn't
08:19 - throw any exceptions are you proud of me
08:21 - JavaScript with its weak typing is like
08:23 - a faithful puppy just dying to please
08:25 - its owner willing to try and do whatever
08:28 - you ask it to do no matter how
08:29 - ridiculous it is and Java with its
08:32 - strong typing is like a cat it's like hm
08:35 - what you asked me to do what now why in
08:37 - the world would I want to do something
08:39 - that ridiculous no no just no now give
08:41 - me my dinner and try again when you have
08:44 - something that makes sense then it
08:45 - marches off somewhere to lay down in the
08:47 - sun showing you its butt with its tail
08:49 - in the air maybe that's where all the
08:51 - cat stuff in this Java Channel comes
08:53 - from as always if you enjoyed this video
08:55 - or learn something please let me know by
08:57 - leaving a like and be sure to subscribe
08:58 - so you don't miss each new video thank
09:00 - you so much for watching I really do
09:02 - appreciate it more than anything see you
09:04 - next time