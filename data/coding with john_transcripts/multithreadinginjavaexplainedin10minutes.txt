00:00 - in this video we're going to talk about
00:01 - how you can implement multithreading
00:02 - into your java programs so you'll be
00:04 - able to write java programs that do
00:06 - multiple different things at the same
00:07 - time my name is john i'm a lead java
00:08 - software engineer and i love sharing
00:10 - what i've learned in a clear
00:12 - understandable way so if you like this
00:13 - video be sure to subscribe so you don't
00:14 - miss each new video i also have a full
00:16 - java course available in the link down
00:18 - in the description if you're interested
00:19 - multi-threading is the ability to
00:20 - execute multiple different paths of code
00:23 - at the same time so normally in your
00:25 - java programs it's only using one thread
00:27 - but you have the ability to break off
00:28 - into multiple threads and do multiple
00:30 - things at once and i'm going to show you
00:31 - how to do that right now
00:32 - in java there are two main ways of
00:34 - creating a new thread the first way is
00:36 - to have a class
00:37 - extend the thread class that might sound
00:40 - a little complicated but it's really not
00:41 - so to do that right here next to your
00:43 - main class you're just going to want to
00:44 - create
00:45 - a new java class you can call it
00:48 - whatever you want doesn't matter
00:49 - we'll call it a multi-thread thing now
00:52 - again it doesn't matter what this is
00:53 - called but it does have to
00:55 - extend thread so now that this class
00:58 - extends thread
01:00 - the only other thing you have to do in
01:01 - this class to make it multi-threadable
01:03 - is to override the thread classes run
01:06 - method to do that you just have to type
01:07 - in public
01:08 - void run open close parentheses and then
01:12 - open and close curly braces since we're
01:14 - overriding the thread classes run method
01:16 - here
01:16 - it's good practice to put in an at
01:18 - override
01:20 - annotation here above it so that's
01:21 - really all the setup that you need the
01:22 - only thing you have to do now
01:24 - is write whatever code that you want to
01:26 - run in multiple threads
01:27 - inside this run method so let's just do
01:29 - something really simple here like um
01:31 - count up the numbers uh from one to five
01:33 - so we can just do that with a simple for
01:35 - loop four
01:35 - and i equals one i less than or equal to
01:39 - five i plus plus just system dot out dot
01:43 - print
01:43 - line um i and just to make this a little
01:46 - bit more interesting we're going to make
01:48 - it a
01:48 - sleep for one second between each number
01:50 - it prints out that way we can watch it
01:52 - print out each number one at a time
01:53 - to do that we can just do thread dot
01:55 - sleep and we put in the number of
01:57 - milliseconds we want it to sleep so that
01:58 - can be
01:59 - a thousand thousand milliseconds is one
02:01 - second eclipse is giving us an error
02:02 - here because we have to uh surround a
02:04 - thread.sleep with a try catch so we can
02:06 - just have it automatically do that we
02:07 - don't have to do anything special if we
02:08 - run into any exceptions so this empty
02:10 - catch block is just fine so now we have
02:12 - a class that extends thread and we have
02:14 - overridden
02:15 - the thread classes run method so now how
02:17 - do we go about actually kicking off this
02:20 - code in multiple threads to do that
02:21 - let's go back to our main class and
02:23 - first create an object of that
02:25 - multi-thread
02:26 - thing class that we created call it my
02:28 - thing
02:29 - equals new multi-thread thing
02:32 - now we have this mything object and you
02:34 - and you might think since we implemented
02:36 - the
02:37 - run method that we want to actually call
02:39 - my thing
02:40 - dot run now you can do that that'll work
02:42 - it'll run the code that we wrote in that
02:44 - run method but it won't actually do it
02:46 - in a separate thread to actually kick
02:47 - off a new thread you have to instead
02:49 - call my
02:50 - thing dot start so now what will happen
02:52 - here as soon as it gets to this part in
02:54 - the code
02:54 - java will branch off a brand new thread
02:56 - and start running
02:57 - this run method and after it kicks off
02:59 - that new thread and lets it go do its
03:01 - thing it will proceed down the main
03:02 - thread that it was executing here
03:04 - so now we can go ahead and run it and
03:05 - watch it go with just one thread
03:07 - one two three four five
03:10 - and then the program finishes so that's
03:12 - cool and all but the whole point of this
03:13 - is multi-threading so let's go ahead and
03:14 - create
03:15 - a second thread and watch them go at the
03:17 - same time so let's just copy paste that
03:19 - we'll say my thing
03:20 - two and then copy paste that and say my
03:23 - thing
03:23 - two dot start right after the first my
03:26 - thing
03:26 - now if we run our program we can truly
03:28 - see that we have two different threads
03:30 - counting up
03:31 - one to five at exactly the same time as
03:33 - a quick note if we would have called our
03:35 - run method instead let's go ahead and
03:37 - change these both
03:38 - to use run we can see that it's not
03:40 - actually doing multiple threads it's
03:41 - doing the first
03:42 - my things run printing out one through
03:44 - five and then once that's done it
03:46 - finishes and does the second things a
03:48 - counting of one through five it's not
03:49 - doing them both at the same time so
03:51 - remember you have to use the start
03:52 - method if you actually want multiple
03:54 - concurrent threads
03:55 - now if you want more than just like two
03:57 - threads like this you can create a whole
03:59 - bunch of them very easily by doing
04:00 - something like a for loop
04:01 - or and i equals zero less than five
04:05 - let's say we want to try doing five
04:06 - threads at a time
04:07 - i plus plus we can just take this line
04:10 - copy it in here and the start command
04:13 - here get rid of all this we don't need
04:15 - it anymore and now we'll create and
04:16 - start
04:17 - five threads in this for loop so we can
04:19 - watch that go we have now
04:20 - five threads all counting one through
04:22 - five at exactly the same time
04:24 - to make things a little bit more
04:25 - interesting we can kind of assign a
04:27 - number to each thread so we can see
04:28 - which thread
04:29 - is printing which number to do that we
04:31 - can go back over to our multi-thread
04:33 - thing class and actually create a new
04:36 - constructor so just be public
04:38 - multi-thread thing and we'll actually
04:40 - have it taken a parameter
04:42 - of an int and we'll just call it
04:43 - threadnumber and we'll also
04:45 - create a little class variable here just
04:47 - have it a private and
04:48 - threadnumber and in this constructor
04:50 - we'll just assign this.threadnumber
04:52 - to be equal to the threadnumber that's
04:54 - passed in in the method here so now back
04:56 - here in our main class where we're
04:57 - creating this multi-thread thing object
04:58 - we need to pass in
05:00 - a number for the thread number and here
05:01 - we can just use i because we're going
05:03 - through a for loop anyway
05:04 - but what's neat about that is in our run
05:06 - method instead of just printing out i we
05:08 - can print out
05:09 - a which thread it is so like from thread
05:11 - thread number
05:13 - go back and run our program we can now
05:15 - see which thread is printing which
05:17 - number and we get some kind of
05:18 - interesting results so you might assume
05:19 - that because thread 0 was created first
05:22 - that it would get printed out first but
05:23 - it doesn't
05:24 - in this case thread one happens to be
05:25 - printed first and then three and then
05:26 - two
05:27 - what that tells you is that when you
05:28 - break into multiple threads there's
05:30 - absolutely no guarantee
05:32 - which thread is going to be doing its
05:34 - thing first
05:35 - they're all running at the same time
05:36 - completely independently so there is
05:38 - going to be some slight
05:39 - variance in their timing one of the
05:41 - really cool things about multi-threading
05:42 - is that if one of the threads
05:44 - blows up with some kind of exception it
05:46 - doesn't impact
05:47 - any of the other ones all the other ones
05:49 - just keep going business as usual so to
05:51 - demonstrate that let's
05:52 - actually um make an exception happen in
05:54 - one of the threads
05:55 - so let's just say here in our run method
05:57 - we could just say if
05:58 - thread number equals um three
06:02 - we're just going to flat out throw a new
06:05 - runtime exception so of course this will
06:07 - make thread number three blow up so we
06:09 - can save that
06:10 - go back and run it and we can see that
06:12 - thread number three
06:13 - blows up with a runtime exception after
06:15 - it prints the number one but all the
06:16 - other threads go ahead and continue
06:18 - printing out all their numbers let's go
06:19 - ahead and get rid of
06:20 - that bit of craziness but that even
06:21 - applies to our main thread if in here we
06:23 - go ahead and start
06:24 - all these other threads counting one
06:26 - through five and then immediately
06:28 - run into an exception that won't stop
06:30 - all the other threads from still
06:31 - completing
06:32 - so if here we say throw new runtime
06:34 - exception
06:35 - run our program and we can see that even
06:37 - though we run into a runtime exception
06:39 - in the main thread in our main method
06:41 - all of those other threads that we
06:43 - kicked off continue to run completely
06:44 - independently because there was no
06:46 - exception in those threads
06:47 - now i mentioned there were two ways of
06:48 - creating a multi-threadable
06:50 - java class and the first way was
06:52 - extending
06:53 - the thread class and the other way
06:55 - instead of extending the thread class
06:57 - you can implement the runnable interface
07:00 - what's nice about that is that when you
07:02 - implement the runnable interface the
07:03 - only thing you have to do
07:04 - is have your own implementation of the
07:06 - run method which is the same as if you
07:08 - extend thread so there's really nothing
07:09 - else you have to change about this class
07:11 - but back here in our main method we
07:12 - can't just call start anymore because we
07:14 - don't extend threads so there's a small
07:15 - extra step all i have to do is say
07:17 - thread
07:18 - my thread equals new thread and then
07:21 - pass it
07:22 - that object that implements the runnable
07:23 - interface so for us it's my thing and
07:25 - then instead of my thing.start we'll say
07:27 - my thread.start we'll also get rid of
07:30 - this silly exception but really that's
07:32 - the only other thing that changes you
07:33 - can go ahead and run your program and
07:34 - all of your threads will operate at the
07:36 - same time exactly as they did before
07:38 - so you're probably wondering you know
07:39 - which is better which one should i do
07:41 - you can either extend the thread class
07:43 - like we did first or implement the
07:44 - runnable interface like we have here on
07:46 - one hand if you
07:47 - extend the thread class you get rid of
07:48 - the need to have this little extra line
07:50 - where you're creating a thread
07:52 - but on the other hand i think there is a
07:53 - major advantage to implementing the
07:55 - runnable interface instead of extending
07:57 - thread so the problem here is that if
07:59 - you extend thread
08:00 - you can't extend any other class java
08:03 - doesn't allow multiple inheritance you
08:05 - can only be
08:06 - a subclass of one class and if you are a
08:08 - subclass of thread by extending thread
08:11 - you can't be a subclass of any other
08:13 - class and you're just kind of stuck
08:14 - if you implement runnable you can still
08:16 - have it extend any other class
08:19 - that you might feel like extending that
08:20 - makes sense for your code and also java
08:22 - doesn't limit the number of interfaces
08:24 - you can implement so you can implement
08:26 - another interface here too so although
08:28 - using implements runnable kind of gives
08:30 - you that extra step
08:31 - of having to create a new thread here
08:33 - before you can use it
08:34 - it does give you a whole lot of
08:36 - flexibility to be able to have your
08:38 - multi-threading class extend any other
08:40 - class you might want there are also a
08:41 - few really useful methods on thread that
08:43 - you should know how to use
08:45 - one is mythread.join you can see on the
08:48 - documentation here it says that this
08:50 - method
08:50 - waits for this thread to die and that
08:53 - really is what it does
08:54 - normally when you start a thread the
08:56 - rest of the program will just continue
08:57 - on
08:57 - but if for some reason you want your
08:59 - program to stop and wait for that thread
09:01 - to complete you can just call the join
09:02 - method on that thread and it will stop
09:05 - executing that program until that thread
09:06 - completes so java is making us around
09:08 - this with a try catch so we'll go ahead
09:09 - and do that
09:10 - so here now since we called join right
09:12 - after we start each thread
09:14 - as the program runs it's going to wait
09:16 - for that thread to complete before it
09:17 - starts the next one so it kind of
09:19 - defeats the purpose of multi-threading
09:20 - in this particular program but you can
09:22 - see how it would work if you have one
09:23 - thread
09:24 - that you want to wait for another to
09:26 - complete that's what you would use here
09:28 - you would use
09:29 - the dot join method another method
09:31 - that's good to know is called
09:33 - is alive that just returns a boolean
09:35 - true or false for whether the thread is
09:37 - currently still running so for example
09:39 - in our case while each thread is still
09:41 - counting from one to five if we called
09:43 - is alive on it it would return true but
09:45 - once that thread completes if we called
09:46 - is alive it would return false
09:48 - if you've learned something in this
09:49 - video please let me know by leaving a
09:50 - like and hit the subscribe button so you
09:52 - don't miss each new java tutorial liking
09:53 - commenting and subscribing is the only
09:55 - way these videos get out to help more
09:56 - people so i really do appreciate it
09:58 - thanks a lot for watching i'll see you
09:59 - next time