00:00 - when I was first learning Java in
00:01 - college I remember one of the first
00:03 - things that really stumped me was static
00:05 - versus non-static variables and methods
00:08 - it just wasn't clicking for me and I
00:10 - felt so lost so if you feel the same way
00:12 - believe me it's not just you here we'll
00:14 - go over exactly what the static keyword
00:16 - means for both fields and methods with
00:19 - plenty of examples and you'll know
00:20 - exactly when to make something static or
00:22 - non-static but first I also have a full
00:25 - Java course available in the link down
00:26 - in the description there you'll find
00:28 - over eight hours of exclusive video
00:30 - lessons covering dozens of java topics
00:32 - so if you haven't yet go check it out
00:34 - now so what is static versus non-static
00:37 - well it's often helpful to start with an
00:39 - example so let's do that here so here I
00:41 - have my cat class now this cat class has
00:43 - a few Fields the cat's name its age the
00:47 - number of lives it has remaining because
00:48 - we all know cats start with nine and
00:50 - also this method meow now if you'll
00:53 - notice all these fields on this method
00:55 - are non-static none of these have the
00:58 - static keyword what that means is all of
01:01 - them only apply to individual cat
01:03 - objects and not to the cat class itself
01:06 - now let me show you exactly what I mean
01:08 - by that so to demonstrate let's go over
01:11 - to our main method here and let's go
01:14 - ahead and create a new cat object like
01:16 - this so cat my cat equals new pet and
01:20 - then of course we can say my cat dot
01:23 - meow we can call this meow method on our
01:27 - individual cat object however what we
01:30 - can't do is say cat the class dot meow
01:34 - the cat class can't meow only individual
01:38 - actual cats can meow that's what
01:41 - non-static means they make sense and
01:44 - apply only to individual cat objects and
01:48 - not to the class itself and that kind of
01:51 - makes sense right remember we can think
01:52 - of a class as kind of a blueprint for
01:56 - creating objects of that class this cat
01:59 - class is isn't an actual cat it's just a
02:02 - blueprint of what a cat has and what
02:04 - it's able to do so a cat has a name an
02:07 - age a number of lives remaining and a
02:10 - cat can meow so we can use our cat class
02:13 - to create individual cats and then those
02:16 - individual cats can meow but we can't
02:19 - just tell the cat blueprint to meow it
02:22 - just doesn't make sense so non-static
02:24 - methods can only be called on individual
02:26 - objects now the same goes for these
02:29 - fields here the name the age and the
02:32 - number of lives remaining these are also
02:34 - non-static so we can go back to our main
02:37 - method here and take our my cat object
02:40 - and set its name like this my cat dot
02:43 - name equals Stella and I can set
02:46 - Stella's age my cat.age equals eight and
02:50 - of course you can create more than just
02:52 - one individual cat object you can create
02:54 - as many as you want and since the name
02:56 - and age fields are non-static each
02:58 - individual cat object object that you
03:00 - create can have its own separate name
03:03 - and age and they don't conflict with
03:04 - each other the cat class itself doesn't
03:07 - have its own name and age just each
03:08 - individual cat does so if I tried to
03:11 - just take my cat class and set its name
03:13 - equal to George that just doesn't make
03:16 - sense and it doesn't work and I get an
03:18 - error that tells me this non-static
03:20 - field name can't be referenced from a
03:22 - static context it's just telling me hey
03:25 - this name field is non-static so it only
03:27 - makes sense in the context of an
03:30 - individual cat object not the cat class
03:33 - so then if that's non-static what are
03:36 - static methods in fields static methods
03:38 - and fields are not different per each
03:41 - individual cat object one example of a
03:43 - static field that we can add to our cat
03:45 - class is perhaps a field that holds the
03:48 - total number of cat objects that have
03:51 - been created throughout the life of our
03:53 - program we would want to make that
03:54 - static because that's a common value
03:56 - that's shared among all the objects of
03:59 - the cat class and isn't different per
04:01 - each individual cat so to make that we
04:04 - would declare a private static int and
04:08 - we'll just call it cat count and we'll
04:10 - initialize it to zero static Fields can
04:13 - of course also be public or protected or
04:15 - whatever but in this case we want our
04:17 - cat count to be private so it can't just
04:19 - be manipulated by other classes all
04:21 - around the program we want to have full
04:23 - control of it here in this class so then
04:25 - we can take our static cat count field
04:28 - and then every time the program creates
04:30 - a new cat we want to increment that now
04:33 - that will only happen down here in our
04:35 - Constructor so in here we can just say
04:37 - cat count plus plus so now every time a
04:40 - cat is created we'll increment our cat
04:42 - count that way we can keep track of the
04:43 - total number of cats we created
04:45 - throughout the program so now that we're
04:46 - keeping track of the number of cats
04:48 - created throughout our program how do we
04:50 - actually access that count from outside
04:53 - of this class well that's actually where
04:55 - a static method is perfectly suited so
04:58 - we can create a standard getter method
05:01 - for this cat count field but we'll make
05:03 - the getter method static so that we can
05:05 - get it through the cat class itself and
05:07 - we don't have to get it through an
05:08 - individual cat object so then down here
05:11 - we can say public
05:13 - static int get cat count and then all we
05:17 - have to do in that method is return cat
05:20 - count and then back over in our main
05:22 - method we can call that method on the
05:25 - cat class because it's static so we can
05:27 - say cat dot get cat count and then to
05:30 - make sure that's working we can go ahead
05:33 - and print out our cat count both before
05:36 - and after we create our cat object like
05:40 - this so if everything's working right it
05:42 - should print out zero here at the
05:44 - beginning of the program before any cats
05:45 - are created and then one here at the end
05:47 - after it's been created
05:49 - so let's check it out and yes looks good
05:52 - now it's important to note that
05:55 - non-static fields and methods can never
05:58 - be used without calling them on an
06:00 - individual object and we know that
06:02 - because we can't just call Cat you know
06:04 - our class dot name now similarly though
06:07 - let's go back over to our cat class
06:10 - inside this static get cat count method
06:13 - that we created now inside this static
06:16 - method we are not allowed to refer to
06:19 - any non-static Fields so inside this
06:22 - static method I couldn't print out this
06:25 - cat's age you'll see here I get an error
06:28 - that a non-static field can't be
06:31 - referenced from a static context and the
06:33 - reason is that it just doesn't make
06:35 - sense non-static Fields only make sense
06:38 - in the context of an individual object
06:40 - and they can be different for each
06:42 - individual object so inside a static
06:45 - method when you're kind of operating at
06:47 - the class level instead of the
06:48 - individual object object level it just
06:50 - doesn't make any sense to refer to any
06:53 - non-static field so it's not allowed
06:56 - however the opposite is not the case
06:59 - technically you can access static fields
07:03 - and methods through an individual object
07:06 - so if we go back to our main method here
07:08 - now technically I am allowed to call my
07:12 - cat dot get cat count as you can see I'm
07:15 - not getting any errors here so here I'm
07:18 - calling a static method from an
07:20 - individual object however this is
07:23 - discouraged and you're going to get a
07:25 - warning like I'm getting here it's
07:27 - saying this static method get cat count
07:30 - is being accessed via an instance and
07:33 - it's encouraging you to change it to use
07:36 - the cat class to access it instead of
07:38 - the individual object and so if I want
07:39 - to do that which I should I can just
07:41 - click this suggestion here and it'll fix
07:43 - it for me so you should always access
07:46 - static methods and Fields through the
07:49 - class and not through any individual
07:51 - object so you might ask why though if it
07:53 - works through an individual object why
07:55 - not just use one what does it hurt well
07:57 - the reason is that it can be misleading
07:59 - and confusing if someone sees my
08:02 - cat.getcat count they might think
08:05 - they're getting some kind of account
08:06 - that only applies to this individual cat
08:10 - when in fact it applies to the class as
08:12 - a whole this is even more important when
08:14 - you're modifying something so perhaps
08:16 - you had a static method that modified
08:20 - something on that class if somebody sees
08:22 - that being called with an individual
08:24 - object they might think oh I'm just
08:27 - changing this value for this individual
08:29 - object when in fact they're changing it
08:31 - for the whole class so that's why it's
08:33 - important to always access these static
08:36 - fields and methods through a static
08:38 - context through the class and not
08:40 - through any individual object another
08:42 - great example where you'll see static
08:44 - Fields used all the time is for
08:47 - constants constants are variables that
08:49 - don't ever change they stay the same
08:51 - throughout the entire run time of your
08:53 - program so for our cat class here one
08:56 - value that we might want to have in our
08:58 - program that would be the same for every
09:00 - cat would be a maximum number of lives a
09:03 - cat has which is of course nine so up
09:06 - here we can have a public static final
09:10 - we use the final keyword to make it a
09:13 - constant so it can't be changed later if
09:15 - you want to learn more about final I
09:17 - have a whole video on Final here it'll
09:19 - be an INT and we'll call it Max lives
09:22 - and of course we'll set it equal to nine
09:25 - so this is just saying that for any cat
09:28 - no matter how many lives it might have
09:30 - remaining here at any given time the
09:33 - maximum number of lives for any cat is
09:37 - nine and you can retrieve that value for
09:39 - whatever you need both inside the class
09:41 - here or outside the class just by
09:43 - accessing it through the class name
09:45 - because it's public and it's static so
09:48 - for example maybe it may makes sense
09:49 - that when every cat is created we start
09:52 - its number of lives remaining with the
09:55 - number of Max lives that would make
09:57 - sense so down here in our Constructor
10:00 - while we're creating a new cat we can
10:03 - set its lives remaining equal to Max
10:06 - lives and if for some reason we wanted
10:08 - to access this Max lives field from
10:11 - outside the cat class so back over here
10:14 - in our main class because that field is
10:16 - static we can access it directly on the
10:18 - cat class itself so we can say cat dot
10:21 - Max lives and we can print that out if
10:24 - we like just to prove that it works go
10:26 - ahead and run it and yes we get our
10:28 - maximum lives of nine so the overall
10:31 - question how do you determine whether
10:33 - you should make any given field or
10:36 - method static or non-static well if the
10:39 - method or field that you're creating
10:40 - only makes sense for an individual
10:43 - object an individual instance of that
10:46 - class or if it has to be different
10:48 - forever every object of that class then
10:51 - it will have to be non-static but if
10:53 - it's something more at the class level
10:55 - or something that should be the same or
10:57 - a shared value among all of your class
11:00 - then it probably makes more sense to be
11:03 - static like I said I totally understand
11:05 - that this can be really confusing at
11:07 - first it absolutely was for me but I
11:10 - promise you after a while it will sink
11:12 - in and this holds static versus
11:13 - non-static thing will be something you
11:16 - hardly even have to think about and as
11:17 - always if you enjoyed this video or
11:19 - learned something please let me know by
11:20 - leaving a like and if you didn't go
11:22 - ahead and leave a dislike and Shout at
11:23 - me in the comments thank you so much for
11:25 - watching and being here with me I will
11:27 - see you next time