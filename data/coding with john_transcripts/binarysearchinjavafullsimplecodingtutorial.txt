00:00 - in this video we're going to implement
00:01 - the binary search algorithm in Java
00:04 - binary search sounds like it could be
00:05 - really complicated but it's really not
00:07 - so bad once you understand how it works
00:09 - it's also a great algorithm to learn to
00:11 - write for a beginner I'll also show you
00:13 - how you can do a binary search with just
00:15 - one line of code using Java's built-in
00:17 - libraries as always my full Java course
00:19 - is available in the link down in the
00:21 - description there you'll find over 8
00:22 - hours of exclusive Java lessons covering
00:25 - dozens of topics so go check it out you
00:27 - can also find the full source code for
00:29 - this video in a link down in the
00:30 - description so go grab it first let's
00:32 - just talk about what exactly a binary
00:34 - search is and why it is better than a
00:38 - regular search binary search is just a
00:40 - way that you can check whether a
00:42 - specific value is present inside a
00:46 - sorted array so let's say we had some
00:48 - array of integers for example that was 1
00:52 - 2 4 5 7 9 and 11. all any search
00:58 - algorithm does is just take some number
01:01 - that you give the algorithm let's say we
01:03 - gave it the number nine and it just
01:05 - tells you whether or not that value
01:08 - exists anywhere in the array so normally
01:10 - if you didn't have an algorithm like
01:12 - binary search if you wanted to check
01:14 - whether a given value was in your array
01:16 - you could just iterate through every
01:19 - item in the array checking its value
01:21 - until you found the value that you were
01:24 - looking for now that's totally fine and
01:26 - it does work but the problem is if you
01:28 - have an enormous array of integers it
01:31 - can start to become kind of slow because
01:33 - it has to check every single value in
01:36 - the array until it finds the one that
01:38 - it's looking for but if you know that
01:40 - the array that you're looking at is
01:42 - sorted in order so in the case of
01:44 - integers they go from smallest to
01:46 - largest like we have here then you can
01:49 - instead use the binary search algorithm
01:51 - to get your result much faster than you
01:54 - could with a regular iterative search
01:55 - now it is very important for your binary
01:58 - search to work at all that the values
02:00 - that you're giving it have to be in
02:02 - order that's very important if you're
02:04 - working with an array that is not
02:05 - currently in order you're going to want
02:07 - to sort it in order first and you can do
02:10 - that in any number of ways I've got lots
02:12 - of videos about sorting algorithms so go
02:13 - check them out but I just want to make
02:15 - it clear that it is important your array
02:17 - has to be in order for binary search to
02:19 - work all right so here's how binary
02:21 - search works now instead of just
02:23 - starting at the very beginning of the
02:25 - array and checking every value what
02:27 - we're going to do is first check the
02:30 - value at the very center of the array
02:33 - the middle value of the array the array
02:35 - here has seven elements and so our
02:38 - middle element here is the number five
02:41 - so now that we've selected the middle
02:42 - element in our array what we do is
02:45 - compare it to the number that we're
02:47 - looking for in this case we're looking
02:48 - for the number nine so first we check is
02:51 - this the number that we're looking for
02:52 - and if it is great we're done and we
02:54 - found it but in this case it's not 9
02:56 - does not equal 5 so we have to continue
02:58 - so what we do is say okay is 9 greater
03:02 - than 5 or less than 5. here 9 is greater
03:06 - than five so what does that mean because
03:08 - we know that our array is sorted in
03:11 - order from smallest to largest we know
03:13 - that if the number nine is in this array
03:16 - it is going to be to the right of the
03:20 - number five now the important part of
03:23 - what that means is that we can
03:24 - completely eliminate looking in that
03:28 - entire half of the array that is less
03:31 - than five that is the key to how a
03:33 - binary search is so much faster than a
03:36 - regular iterative search the next step
03:39 - in binary search is basically just to
03:41 - redo the binary search in just that half
03:45 - of the array that might contain the
03:47 - value that we're looking for so
03:49 - basically we're going to do a binary
03:50 - search for the number nine here with
03:53 - just these three values and we're going
03:55 - to do that exactly the same way as we
03:57 - did before so first we're going to
03:59 - choose the the middle element of our
04:01 - array and check its value so here that
04:03 - is now the number nine now we compare
04:06 - that number to the number that we're
04:07 - looking for is nine nine yes it is so we
04:11 - found the number that we were searching
04:13 - for now after the algorithm finds that
04:15 - number all it returns is the index of
04:18 - that number in the entire array so here
04:20 - that 9 is at index so this is 0 1 2 3 4
04:25 - and 5. so our binary search algorithm
04:28 - would return the number five because
04:30 - that is the index where we found the
04:33 - number that we're looking for but if
04:34 - that hadn't been the number we were
04:35 - looking for let's say instead of that we
04:37 - were looking for the number seven well
04:39 - we would just continue doing the exact
04:42 - same steps we did before we would have
04:44 - compared 7 with 9 and said okay 7 isn't
04:47 - equal to 9 okay is it less than 9 or
04:50 - greater than 9 well 7 is less than nine
04:52 - so that means that again because our
04:55 - array is in sorted order from smallest
04:58 - to largest we can complete greatly
05:00 - eliminate the entire right half of that
05:04 - sub array we don't have to look there we
05:06 - know it's not there so then we can
05:08 - repeat that binary search algorithm on
05:11 - just the one small part of the array
05:13 - that's left and then of course we see
05:15 - okay 7 equals 7 so we found our value
05:18 - there so you might be thinking all right
05:20 - well what do you do if the value that
05:23 - you're searching for actually isn't in
05:25 - the array so let's say instead of nine
05:27 - or seven we were looking for the number
05:30 - six well up until this point of the
05:32 - search things would have gone exactly
05:34 - the same way but now we're comparing
05:36 - okay is six equal to 7 well no it's not
05:39 - but the problem is there's nothing else
05:41 - left in the array so we know that it is
05:43 - not present in our array how we handle
05:46 - that usually in a search algorithm we
05:48 - don't throw an exception or anything
05:49 - like that but instead we just return a
05:52 - negative one we know that negative one
05:54 - is not a valid index of the array so we
05:57 - return negative 1 as a way of just
05:58 - saying sorry I didn't find the element
06:00 - that you were looking for in the array
06:02 - so maybe this gives you a glimpse at why
06:04 - the binary search algorithm is so much
06:06 - faster than a regular iterative search
06:08 - let's say that you had an array of like
06:11 - a million items in it now a regular
06:14 - iterative search would just start at the
06:15 - beginning and say okay I've got to check
06:17 - all these million items and see if it's
06:18 - in here but a binary search can start in
06:21 - the middle and say okay is the thing I'm
06:23 - looking for greater than or equal to
06:25 - this and then it can immediately
06:27 - completely remove half of the entire
06:30 - array so in just one step the binary
06:32 - search algorithm reduces the problem
06:35 - that it's dealing with by half I think
06:37 - that's enough of this let's jump right
06:39 - into the code all right so to implement
06:41 - our binary search algorithm first
06:43 - instead of writing our algorithm right
06:46 - there in the main method let's go ahead
06:47 - and create a separate private method
06:49 - that will do the binary search that we
06:51 - will call from our main method so we'll
06:54 - go ahead and make a new method here a
06:56 - private static now the return type of
06:59 - our method is going to be an INT because
07:02 - we want to return the index of the value
07:04 - that we find if we find it we'll call it
07:07 - binary search pretty creative name now
07:10 - our binary search algorithm has to take
07:12 - in two parameters first it has to take
07:14 - in the actual array of ins that it's
07:17 - searching in we'll just call that
07:18 - numbers and then it also has to take in
07:21 - the value that it's searching for so
07:24 - we'll call that one number two find so
07:27 - here's how I think we're going to do
07:28 - this in the code so I think we're going
07:30 - to use two pointers we're going to have
07:32 - one that's at the very first element in
07:35 - our array and one at the very last
07:37 - element in our array and what we're
07:39 - going to do is find the middle value
07:41 - between those two pointers and then we
07:43 - check whether the number that we're
07:45 - looking for is equal to that value or if
07:48 - it's greater than or less than that
07:51 - value let's say that we find that the
07:52 - number that we're looking for is less
07:55 - than that middle value we're going to
07:57 - take that pointer that's currently at
07:59 - the end of our ra and we're going to
08:01 - move it just to the left of that middle
08:04 - number and then we're going to repeat
08:06 - our binary search algorithm with just
08:09 - that half of the array that's contained
08:12 - within our two pointers now if the
08:14 - number that we were looking for happened
08:15 - to be larger than that middle number we
08:18 - would instead take our low pointer and
08:20 - move it just to the right of that middle
08:23 - number and we continue our binary search
08:25 - with just that half of the array so you
08:28 - can kind of see how it works right what
08:29 - we're going to do is keep dividing what
08:32 - we're looking at in half by moving our
08:34 - pointers until we zero in on that one
08:37 - number that we're looking for and then
08:39 - we can return the index of that number
08:41 - so first let's go ahead and create those
08:43 - two pointers that we need they'll just
08:45 - be ins we'll just call these pointers
08:47 - low and high so first we'll create our
08:50 - low pointer so into low equals zero
08:53 - because we want to start it at the very
08:55 - beginning the very first element of our
08:58 - array and we also need another int we'll
09:00 - call it high and we want to start that
09:02 - at the very last index of the array now
09:05 - we can get that index by calling just
09:07 - numbers dot length and then subtracting
09:11 - 1. so the next part of our algorithm is
09:13 - kind of going to be the the main part of
09:15 - it which is actually going to be a while
09:19 - loop now our while loop is basically
09:21 - going to keep looping until our two
09:23 - pointers you know cutting off half of
09:25 - the array as they get closer and closer
09:27 - to each other until our two pointers
09:29 - cross each other so the condition in our
09:32 - while loop is going to be while low is
09:35 - less than or equal to high now that we
09:38 - have all this set up the the first step
09:40 - in this meaty part of the binary search
09:42 - is we have to identify the index of the
09:45 - middle item in the array that we're
09:48 - searching in right now so let's go ahead
09:49 - and create that we'll say int like
09:51 - middle position now that middle position
09:54 - is basically the average of our low and
09:58 - high indices so we can get the average
10:00 - of low and high just by taking low plus
10:05 - high and dividing by two next we need to
10:08 - identify what the value is at that index
10:12 - what actual number is at that spot in
10:15 - the array so we'll use another variable
10:17 - for that we'll call it int middle number
10:20 - and we'll set that equal to the value of
10:24 - our numbers array at that middle
10:27 - position so now what we want to do is
10:30 - check whether the number that we're
10:32 - looking for our number to find is equal
10:35 - to that number or less than or greater
10:38 - than that number first let's check if it
10:40 - is equal to that number so we can say if
10:43 - the number to find is equal to this
10:46 - middle number then that means that our
10:50 - search is done we have found the number
10:52 - that we're looking for so all we have to
10:54 - do is return the index where we found
10:57 - that number and that index X is our
11:00 - middle position variable so all we have
11:02 - to do in this case is return middle
11:05 - position but if this wasn't exactly the
11:07 - number that we're looking for we have to
11:09 - deal with that situation so what if the
11:12 - number that we were looking for our
11:14 - number to find is less than our middle
11:17 - number so in that case remember what we
11:19 - want to do is we want to take our high
11:21 - pointer and move it just to the left of
11:26 - our middle pointer our middle position
11:28 - because we know that the number that
11:30 - we're looking for is less than this
11:32 - middle number right now so to do that we
11:34 - can just take our high pointer and set
11:36 - it equal to the middle position minus
11:40 - one so that'll make it just to the left
11:43 - of that middle position index so now we
11:45 - know that the number that we're looking
11:46 - for is not equal to the middle number we
11:49 - know that it's also not less than the
11:51 - middle number so at this point in the
11:53 - algorithm we know for sure if we put in
11:55 - an else here we know that our number is
11:59 - greater than the middle number so we
12:01 - don't even need to add another if
12:02 - condition if we don't want to you can if
12:04 - you want you can add okay if number to
12:07 - find is greater than middle number if
12:10 - that makes you feel nicer it just makes
12:12 - more sense in your head to have it you
12:14 - totally can but in at this point in the
12:16 - algorithm we just don't really need it
12:18 - because because the way the logic works
12:20 - we know it's not equal because it would
12:22 - have returned already we know that it's
12:24 - not less because it it would hit this if
12:26 - so in this else we know that it is
12:29 - greater now since we know that we can
12:31 - take our low pointer and set it just to
12:34 - the right of that middle position so to
12:36 - do that we'll take low and set it equal
12:38 - to Middle position plus one so now what
12:42 - this while loop will keep doing is
12:44 - moving those high and low pointers
12:47 - closer and closer together each
12:50 - iteration until they meet and eventually
12:52 - find that number that they're looking
12:54 - for or eventually the low pointer will
12:58 - be set to one higher than the high
13:00 - pointer so what that means is our high
13:03 - and low pointers move closer and closer
13:05 - to each other until they met at one
13:08 - single number and then they still didn't
13:10 - find the number that they were looking
13:11 - for and so they crossed each other so at
13:14 - that point it will kick out of this
13:17 - while loop so what that means is outside
13:19 - of this while loop we know that we
13:21 - didn't find the number that we were
13:22 - looking for it wasn't present in the
13:25 - array so all we have to do in that case
13:26 - is report our failure by returning just
13:30 - the number negative one to indicate
13:32 - sorry we didn't find it that is
13:35 - everything we need I think this is a
13:37 - complete binary search algorithm all we
13:39 - need is some code that calls it to do
13:42 - some testing so first we're going to
13:44 - need an array of integers to pass into
13:47 - our search algorithm to start to find
13:49 - some stuff in so we'll just call this
13:50 - interray ins and we'll just go ahead and
13:53 - give it some values let's use the same
13:55 - array that we did in the Whiteboard
13:57 - thing there so that was just one two
13:59 - four five seven nine and eleven so now
14:03 - what we want to do is call the binary
14:06 - search method that we implemented down
14:07 - here and we have to pass in first the
14:10 - array that we want to do the search in
14:12 - so that would just be ins and then we
14:14 - want to put in the number that we're
14:16 - looking for so let's say we want to
14:17 - search for the number nine and then
14:20 - we'll go ahead and print out our results
14:21 - otherwise we'll never know what the
14:23 - result was okay there we go now let's go
14:26 - ahead and run this and see what happens
14:29 - here we go across your fingers okay so
14:31 - it returned five it's saying that the
14:34 - number nine is at index five in our
14:37 - array so let's check to make sure that's
14:38 - right so that'd be zero one two three
14:42 - four and five so that's right it
14:46 - returned the correct value all right so
14:47 - that's one test that is successful but
14:50 - let's head a little bit harder with some
14:52 - more values to make sure that it Returns
14:54 - the right result every time so let's say
14:56 - we were looking for a number that did
14:58 - not exist in our array so let's look for
15:00 - the number eight so if we go ahead and
15:03 - run that we get negative one which is
15:06 - exactly what we're looking for because 8
15:08 - didn't exist in the array the algorithm
15:10 - should report that by returning negative
15:12 - one so let's try some other like edge
15:14 - cases let's say we wanted to look for
15:16 - like the very first thing in the array
15:18 - so let's say we were looking for the
15:20 - number one it should return an index of
15:23 - zero and it does awesome and let's look
15:26 - for the highest element in our array
15:27 - which is 11. and it returns 6 which is
15:31 - correct zero one two three four five six
15:35 - looks good as a quick side note if you
15:37 - want you can change this algorithm to uh
15:40 - instead of using a while loop you can
15:42 - change it to be a recursive algorithm
15:44 - with just a couple of pretty small
15:46 - tweaks now I think I'll leave that as a
15:49 - small exercise for you to figure that
15:50 - out if you're curious I do have an
15:52 - entire video on recursion if you want to
15:55 - go check that out to learn about
15:56 - recursion generally but I'll also link
15:58 - to my recursive solution for this
16:00 - algorithm in the description below so if
16:02 - you get stuck go ahead and check that
16:03 - out now I also mentioned at the
16:05 - beginning of this video that you can do
16:07 - a binary search with just one line of
16:09 - code using Java's built-in libraries so
16:13 - here's how you can do that so what you
16:15 - can do is call arrays dot binary search
16:18 - that is a method provided to you
16:21 - automatically in Java and that's in the
16:25 - java.util.arrays package that's where
16:27 - you can find this class and call this
16:29 - mess method and then you can just pass
16:31 - into this binary search method exactly
16:33 - the same parameters that we passed into
16:36 - our binary search which is first the
16:38 - array that you want to search in so in
16:40 - this case it's ins and the value that
16:42 - you want to search for so again let's go
16:44 - ahead and search for the number nine and
16:47 - let's go ahead and change this to look
16:48 - for the number nine two just so we can
16:49 - compare the results and we also have to
16:51 - go ahead and actually print out the
16:54 - result of our Java Library call so I
16:57 - think that's it let's go ahead and run
16:59 - it and hopefully we get the same output
17:01 - from both of these calls
17:04 - and yes we do we get five from both of
17:07 - them so like so many things Java doesn't
17:09 - force you to reinvent the wheel if you
17:12 - don't want to if you don't want to write
17:13 - your own binary search algorithm you can
17:15 - just use its built-in one just like it
17:18 - has sorting algorithms and stuff built
17:20 - in you just call a sort method and it
17:22 - does it really really well same as for
17:24 - binary search but it's still a really
17:26 - good thing for you to know how to do and
17:29 - understand how it works to code on your
17:31 - own if you enjoyed this video or learned
17:33 - something of course let me know by
17:34 - hitting the like button and be sure to
17:36 - comment let me know what else you'd like
17:37 - to see and of course subscribe so you
17:39 - can see all of that awesome stuff in the
17:42 - future as always thanks so much for
17:43 - watching really do appreciate you being
17:45 - here with me I'll see you next time