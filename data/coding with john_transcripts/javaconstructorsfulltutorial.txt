00:00 - in this video we're going to talk all
00:01 - about constructors in java we'll go over
00:03 - what they are and what they're used for
00:04 - how to use them and how you can create
00:06 - different types of them with some
00:07 - concrete examples my name is john i'm a
00:09 - lead java software engineer and i love
00:11 - sharing what i've learned in a clear
00:12 - understandable way so if you like this
00:14 - video please consider subscribing so you
00:15 - don't miss each new java tutorial i also
00:17 - have a full java course available in a
00:18 - link down in the description if you're
00:19 - interested okay so what exactly is a
00:21 - constructor and what is it used for all
00:24 - a constructor is is a very special type
00:26 - of method that is used to create new
00:28 - objects let's say we have a basic class
00:30 - like this dog class here this dog class
00:32 - serves as a kind of a blueprint for what
00:34 - a dog looks like but if we want to
00:36 - create any actual dog objects we have to
00:38 - use constructors to do that you've
00:40 - probably created java objects in your
00:42 - programs before just by doing something
00:44 - like dog my dog equals new dog well when
00:48 - you see this new keyword followed by the
00:50 - class name itself in this case dog and
00:53 - an open and closed parenthesis this is
00:55 - actually calling a dog constructor
00:57 - method to create a new dog object but
00:59 - over in my dog class you'll see that i
01:02 - don't have any methods at all i have two
01:03 - fields a string name and an int age but
01:06 - i'm still able to use this dog
01:08 - constructor method to create a new dog
01:10 - object so how is that well when you have
01:11 - a class like this dog java kind of
01:14 - assumes that you're going to want to
01:15 - create objects of this class so without
01:17 - you having to do anything at all java
01:19 - creates a default constructor for you
01:22 - now the default constructor doesn't take
01:24 - any arguments at all that's why this
01:25 - open close parentheses is just empty and
01:27 - you'll probably hear people calling it
01:28 - something like the default no args
01:31 - constructor this is what they're talking
01:32 - about all it does is gives me a brand
01:34 - new dog object that's essentially empty
01:37 - so each dog object will have a name and
01:39 - an age but if i go back here and take my
01:41 - my dog object and print out my dog.name
01:46 - it prints out null and that's because
01:48 - this default constructor doesn't set any
01:50 - of the fields on this object but what if
01:52 - i want to be able to set these values
01:54 - when i create a dog right i can't do
01:56 - that with a default constructor if i
01:58 - want to do that i can create my own
02:00 - custom constructor it's pretty similar
02:01 - to other methods but there are some
02:03 - small differences it looks like this
02:04 - public dog open and close parentheses
02:07 - and open and close curly braces so you
02:09 - can see it looks a whole lot like any
02:11 - other method but for a constructor
02:13 - method the name of the method will
02:15 - always be exactly the class name so here
02:17 - it's dog it also won't have any return
02:20 - type here like and or string or not even
02:23 - void it won't have any return type at
02:25 - all in a constructor so what we've just
02:27 - made here is what java had already given
02:29 - us as its default no args constructor it
02:32 - takes no arguments and essentially just
02:33 - gives us a new empty dog object but here
02:36 - in this constructor method body i can
02:38 - set the name of this new dog object
02:40 - that's being created so for example i
02:42 - can take name and set it to kramer so
02:45 - now if i go back and call this same
02:47 - constructor method and i run my program
02:50 - my dog's name is kramer but it's kind of
02:52 - lame to have a dog constructor method
02:54 - that always sets the name to exactly the
02:56 - same thing right you want to be able to
02:58 - customize that name for each individual
03:00 - dog object that you make to do that
03:02 - we'll want to add a parameter to this
03:04 - constructor method so what we can do is
03:06 - take in a string name parameter then you
03:09 - can set this name field with the name
03:11 - variable that's passed in but here's the
03:13 - thing though so if you take name and set
03:15 - it to
03:16 - name so there's something wrong with
03:17 - this right the parameter here is called
03:19 - name but the field on our object is also
03:22 - called name right now when we just put
03:24 - name java assumes that we mean this name
03:26 - parameter that's being passed into the
03:28 - method to solve that we can tell java
03:30 - that we mean the name field on this dog
03:33 - object by using the this keyword now
03:36 - this keyword is probably a whole other
03:38 - topic for another future video for now
03:40 - all you need to know is that you need to
03:42 - use this dot name when you want to refer
03:45 - to the field on the object so that'll
03:47 - take this name field and assign it the
03:49 - value of the name being passed into the
03:51 - method so now back here we can pass in
03:53 - the name as a parameter to our dog
03:55 - constructor let's call it jerry and run
03:58 - our program and we can see that we have
03:59 - a dog named jerry now you aren't limited
04:01 - to just one constructor if you want you
04:03 - can have multiple constructors the only
04:05 - requirement is they have to have
04:06 - different types of parameters so if i
04:09 - just take this method and copy it even
04:11 - if i change the name of this string
04:13 - variable to something else eclipse still
04:15 - gives me an error because i have two
04:16 - different structures that both take a
04:18 - string as its parameter but you're
04:20 - totally allowed to have multiple
04:21 - constructors if they have different
04:23 - parameter types so if instead this took
04:25 - in an int age then we can set this dot
04:28 - age equal to age this is no problem at
04:31 - all so now we can pass in an int an age
04:34 - so i can pass in four and then if i want
04:36 - to print out my dog's age i get four you
04:39 - can also create constructors that take
04:41 - more than one parameter so instead of
04:42 - having separate constructors where one
04:44 - sets the name and one sets the age you
04:46 - can instead make a brand new constructor
04:48 - that takes in the string name and the
04:51 - int age we said this dot age equals age
04:54 - this dot name equals name if we want to
04:56 - use this constructor we just need to
04:57 - pass in a name and an age so for the
05:00 - name let's give it uh george 33 we can
05:04 - print out the name and mydog.age and
05:07 - there we go we've created george the 33
05:09 - year old dog and of course you're not
05:11 - just limited to two parameters like any
05:13 - other java method you can create
05:14 - constructors that take as many
05:16 - parameters as you want there are a
05:17 - couple of more very important things to
05:18 - know so don't bail on me yet one thing
05:20 - is that notice if we go back and take
05:23 - out sending these parameters and just
05:25 - try and use the default no args
05:27 - constructor now we get an error that
05:29 - says the constructor dog with no
05:31 - parameters is undefined but it should be
05:33 - using the default constructor that java
05:34 - gives us for free right so what gives
05:36 - well yes remember if we don't provide
05:38 - any constructor at all java will provide
05:42 - this default no args constructor for
05:44 - free but if we specify any constructor
05:47 - at all ourselves java will not provide
05:50 - that default no args constructor if
05:52 - we've added our own custom constructors
05:54 - and we still want that no args
05:56 - constructor we need to include it
05:58 - ourselves of course that's not hard to
05:59 - do we had it before it's just public dog
06:02 - open close parentheses open and close
06:04 - curly braces another thing is what about
06:06 - situations where you actually don't want
06:08 - any constructor for your class at all
06:10 - for example maybe you have a class like
06:12 - this i have a constants class since all
06:14 - these fields are static i can use any of
06:17 - these constants in this file without
06:18 - having to create any objects so over
06:21 - here i can just say you know constants
06:23 - dot my name i didn't need to create a
06:25 - constant object to get this variable
06:27 - since i never need to create any new
06:29 - objects of this class it kind of makes
06:30 - no sense to have any constructors at all
06:33 - but right now i can still say constants
06:35 - my constants equals new constants java's
06:39 - still giving me this default constructor
06:41 - so what can you do to prevent people
06:42 - from creating new constant objects so
06:45 - what you actually do is go into your
06:46 - class and go ahead and create that no
06:49 - args constructor manually yourself so
06:52 - public constants open close parentheses
06:54 - and open and close curly braces like
06:55 - before but instead of making it public
06:58 - like we did for all our other
06:59 - constructors change this to private and
07:02 - we know that private methods can only be
07:04 - called from within that class right so
07:06 - now if you try to call this constructor
07:08 - from anywhere else like over here in our
07:10 - main method we now see that we get an
07:12 - error this constructor is not visible
07:14 - because it's private but you can still
07:16 - go ahead and use all of its static
07:18 - fields just fine with no problems if you
07:20 - enjoyed this video or learned something
07:21 - please let me know by leaving a like and
07:23 - be sure to subscribe so you don't miss
07:24 - each new java tutorial and if you really
07:26 - want to help and support the channel you
07:27 - can do the fabulous youtube trifecta of
07:29 - leaving a like a comment and hitting the
07:31 - subscribe button i hope this video
07:33 - helped you out and if it did i really
07:34 - appreciate your support i'll see you
07:36 - next time