00:00 - hey everybody how's it going in this
00:02 - video we're going to talk all about
00:04 - double equals versus dot equals in java
00:06 - by the end of this video you're going to
00:08 - have a deep
00:08 - understanding of the difference between
00:10 - double equals and dot equals and know
00:11 - exactly when to use each
00:13 - if this is your first time on this
00:14 - channel i'm john lee java software
00:16 - engineer and i make java tutorial videos
00:18 - just like this one every single week so
00:20 - be sure to hit that subscribe button so
00:21 - you get the new tutorial every week so
00:23 - when you first learned java after you
00:24 - messed with just hello world you
00:26 - probably made some ants right you had
00:28 - int and one equals three you know and
00:31 - and two equals four or maybe you got
00:34 - these ends as input from the user or
00:35 - something
00:36 - and then maybe you wrote something to
00:37 - see if they were equal to each other so
00:38 - you probably did something like
00:39 - if and one is equal to int two
00:43 - then you know what print out the numbers
00:47 - are equal else you print out
00:51 - numbers are not equal and you can run
00:54 - that and of course
00:55 - 3 should not equal 4 so the numbers are
00:56 - not equal and of course if they are
00:58 - equal we set them both to 4
01:00 - we can run it again and we get that the
01:02 - numbers are equal and that absolutely
01:03 - does work perfectly for inst that is
01:05 - what you should be doing
01:06 - but what happens if you do that with a
01:08 - different kind of variable in java so
01:09 - instead of an int you do something
01:10 - that's not a primitive type but it's
01:12 - still a pretty simple type in java a
01:13 - string so let's say instead of ins you
01:15 - have string
01:16 - string one equals new string
01:19 - hello and then you also have string
01:22 - string two
01:23 - equals new string and also give it the
01:25 - exact same value
01:27 - hello so those strings should be
01:28 - identical right but if we paste these
01:30 - values in here and do the exact
01:32 - same comparison we can say strings
01:34 - instead
01:35 - we run that we get the strings are not
01:38 - equal now why is that and we could even
01:40 - like print out both of those strings and
01:42 - prove that they have exactly the same
01:43 - values right string one
01:46 - and string two so we can see they have
01:49 - exactly the same values
01:50 - and yet java thinks they're not equal
01:52 - why is that the whole reason for that
01:54 - all boils down to what java is actually
01:56 - doing
01:57 - when you're doing this double equals
01:58 - check what is actually going on
02:00 - is java is checking the underlying
02:03 - memory location
02:04 - of those two objects so i know that all
02:06 - sounds really technical but it's really
02:07 - not
02:08 - that scary let's talk about what happens
02:09 - when you actually call like
02:11 - new string here what java is doing is
02:14 - creating a brand new object at a new
02:16 - memory location
02:17 - and then creating this variable string
02:19 - one that points to that memory location
02:21 - and the same thing here for the second
02:22 - string it's creating another
02:24 - string object at a different memory
02:26 - location and having creating this
02:28 - variable string two
02:29 - that points to that second location and
02:31 - so what this double equals is actually
02:32 - doing is comparing the memory locations
02:35 - of those two objects and of course
02:37 - they're different so you get false
02:38 - so you might be asking why did it work
02:40 - fine for our int variables when our
02:41 - numbers were the same
02:42 - java correctly said that yes those were
02:44 - equal well in the case of a primitive
02:46 - like an
02:47 - int or a float or a double or a short or
02:50 - a long or any of those
02:51 - other java primitive types primitive
02:54 - variables are
02:55 - referring to their actual values and not
02:57 - the memory locations where an object is
02:59 - stored so when you have something like
03:01 - int and one equals one
03:04 - and and two equals two now in java
03:07 - primitive variables represent
03:09 - that value itself and not a reference to
03:12 - it but for everything that
03:13 - isn't a primitive all variables of every
03:16 - other type
03:16 - are a reference to a memory location
03:18 - that has the object so in short when do
03:20 - you use double equals
03:22 - it's when you are comparing two
03:24 - primitive
03:25 - types boolean byte short int
03:28 - long char float and double so if you are
03:31 - doing anything with those eight
03:32 - primitive types in java
03:34 - feel free to use the double equals and
03:36 - everything will work out great
03:38 - so what about every other object type in
03:40 - the world what do you do when you want
03:42 - to compare
03:43 - two objects that aren't primitive to see
03:45 - if they're equal well you
03:47 - use the dot equals method on your
03:50 - objects
03:50 - and you do that like this it's offered
03:52 - in the string class um so you call
03:54 - string1
03:55 - dot equals and you pass in the other
03:57 - string that you want to check
03:58 - or whether it's equal to and so now we
04:00 - can go ahead and run this code again and
04:02 - see what we see
04:03 - we see the strings are equal and it's
04:05 - working great so now the reason that
04:06 - works is because
04:08 - this equals method has been defined on
04:10 - the string class
04:12 - and if we want to like really nerd out
04:13 - we can like control click and eclipse
04:15 - into this equals
04:16 - method and string and see what it's
04:18 - actually doing to see if these strings
04:20 - are equal
04:21 - but you can see it gets real technical
04:22 - real quick but basically it's going to
04:23 - go through
04:25 - both of those strings and make sure
04:26 - every character matches with every other
04:28 - character in the string and return true
04:29 - if that's the case
04:30 - and if not it'll return false basically
04:32 - for every other type of object you use
04:34 - in java it should offer a dot
04:36 - equals method so you can see if one
04:38 - object of that
04:39 - class equals another object of that
04:41 - class and that'll be the case for just
04:43 - about
04:43 - like every library you use like of
04:45 - course strings
04:46 - collections everything offered in the
04:48 - main java libraries will have
04:49 - implemented an equals method
04:51 - for you to use and you can depend on
04:52 - them so what if you're creating your own
04:54 - classes like i've got a dog class here
04:56 - where i just have an age and a name on a
04:58 - dog and gutters and ciders for that
05:00 - right now i can go back into my program
05:01 - and create two dogs right so i can say
05:03 - dog my dog equals new dog
05:06 - and dog your dog equals new dog
05:10 - and i can try and compare them using dot
05:13 - equals
05:14 - and we'll change this to dogs
05:17 - now you might be thinking now john that
05:18 - should work right you said for
05:19 - everything else but primitives
05:21 - you should use dot equals so let's go
05:23 - ahead and run that and what do you think
05:24 - we're going to get
05:25 - well it says the dogs are not equal so
05:27 - john you said we've got two for
05:29 - primitives we use the double equals and
05:30 - for everything else we use the dot
05:32 - equals and everything will be all right
05:33 - but what went wrong there we have two
05:34 - brand new dogs there couldn't be
05:36 - anything possibly different about them
05:37 - so why aren't they equal
05:39 - and the reason is because this dot
05:41 - equals method hasn't been
05:42 - implemented yet in my dog class and so
05:45 - what happens is if we don't implement
05:47 - the dot equals method
05:48 - in our own classes when we create them
05:51 - it uses the default implementation of
05:53 - the dot equals method
05:54 - from the object class in java the parent
05:57 - of
05:57 - all other classes in java is the object
05:59 - class and it defines a dot equals method
06:02 - so if we don't define one that's the one
06:04 - it uses and
06:06 - guess what you think it does let's
06:08 - actually dive into it and see
06:10 - that's right it just returns the value
06:11 - of the double equals check on the object
06:13 - anyway
06:14 - so the lesson here if you don't actually
06:16 - implement the dot equals method in your
06:18 - class
06:19 - it's just as bad as using the double
06:20 - equals so how do you go about
06:22 - implementing the equals method in your
06:24 - classes
06:25 - all you need to do is go in and actually
06:27 - write that method in your class
06:29 - so you just have to have a public
06:31 - boolean equals is the name of the method
06:33 - boolean is the return type it returns
06:35 - true or false for whether it
06:36 - equals uh the other object being passed
06:39 - in and
06:40 - object is the type that needs to be
06:42 - passed in it's usually called
06:44 - and you write your own implementation of
06:46 - what it means for one dog to be equal to
06:49 - another dog and you return true if
06:50 - they're
06:50 - equal and false if they're not there's a
06:52 - little bit more complexity around that
06:53 - involved like if
06:54 - something other than a dog gets passed
06:56 - in or if it's null or then weird things
06:57 - like that that'll be the subject of
06:58 - another video writing a good equals
07:00 - method
07:00 - but that's basically how you go about
07:02 - doing it now here's some super strange
07:03 - bit of java knowledge that you can use
07:05 - to impress all the nerds out there so
07:07 - let's go ahead and change this back to a
07:09 - double equals
07:10 - right string one and string two and of
07:12 - course as we know java says
07:14 - they're not equal because they're two
07:15 - separate objects and they have separate
07:16 - memory locations
07:18 - but if we change these string
07:19 - declarations into
07:21 - instead of using a new string we just
07:23 - use what's called a string literal
07:25 - and we set it like this which is
07:26 - probably how you're used to setting
07:27 - strings and run it again we get
07:29 - the strings are equal
07:33 - what well that has to do with the
07:34 - strange way that java actually holds
07:37 - these strings behind the scenes when you
07:39 - declare them like this
07:40 - if you have two different variables that
07:41 - refer to the same string
07:43 - literal java will just hold that string
07:46 - literal
07:46 - in one place in memory and have both of
07:49 - those variables
07:50 - refer to that one place if you don't use
07:52 - the new string command so java is doing
07:54 - what is called
07:55 - interning those strings it's kind of a
07:57 - fancy thing it does behind the scenes in
07:59 - order to save memory so if you have a
08:01 - whole bunch of string literal variables
08:02 - that refer to the same string
08:04 - java is going to only condense those
08:06 - down into one memory location to save on
08:08 - memory when it can
08:09 - but if you use new like we had before
08:12 - java won't do that so that's like weird
08:14 - right like sometimes
08:15 - for strings this double equals works and
08:17 - sometimes it doesn't
08:18 - lesson learn though right just don't use
08:20 - it for anything
08:21 - except for your primitive data types
08:23 - that we went over before
08:24 - strings dogs any other type of object in
08:27 - the world that you want to see if two
08:29 - of those objects are equal always use
08:32 - that object's
08:33 - dot equals method for primitives use
08:36 - double equals
08:36 - and you'll be good to go if you learned
08:38 - a little something in this video let me
08:39 - know with a like if you'd like to see
08:40 - more like this every week be sure to hit
08:42 - the subscribe button
08:44 - and thanks for watching i'll see you
08:45 - guys in the next video