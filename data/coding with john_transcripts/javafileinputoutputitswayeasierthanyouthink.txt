00:00 - do you need to write data to a text file
00:01 - or read data from a text file in java
00:03 - that's what we're going to do from
00:04 - scratch in this video i'm going to show
00:06 - you the simplest way to read and write
00:07 - text files in java my name is john and i
00:09 - do a new java tutorial video every
00:11 - single week so please consider
00:12 - subscribing so you don't miss each
00:14 - week's video i also have a full java
00:15 - course available in a link down in the
00:17 - description if you're interested
00:18 - if not that's awesome too i'm thrilled
00:19 - to have you here and as always the full
00:21 - source of this program is available in a
00:23 - link down in the description so go and
00:24 - get it if you look around online you're
00:26 - going to find
00:27 - tons of different ways to do file input
00:29 - and output in java so what i'm going to
00:30 - show you definitely isn't the only way
00:33 - it can be done but it is the way that i
00:34 - think is the simplest and it's the way
00:36 - that i like to use myself
00:37 - let's start with writing data to a text
00:39 - file the class that i like to use most
00:41 - for
00:41 - file output in java is called buffered
00:44 - writer
00:45 - so let's make a new buffered writer
00:46 - object we're going to call it
00:48 - writer and we say equals new buffered
00:51 - writer
00:52 - using eclipse we can go ahead and import
00:53 - buffered writer but if you aren't using
00:55 - a fancy ide
00:56 - the import is java java.io.bufferedrider
00:59 - now notice it's still complaining to us
01:00 - here because this constructor is
01:02 - undefined
01:02 - and that's because we have to actually
01:03 - pass something into this constructor
01:05 - method
01:06 - the reason it needs to take something is
01:07 - because this kind of buffered writer can
01:08 - write to many different things
01:10 - and a file is just one of them so we
01:12 - need to tell it that we want to write to
01:13 - a file and we can do that by saying new
01:16 - file writer
01:17 - and we also need to tell this file
01:18 - writer which file we want it to write
01:20 - and for that we can just pass in the
01:22 - name of the file that we want to create
01:23 - for our output file let's just call it
01:26 - output.txt we also have to import
01:28 - filewriter which is going to be
01:30 - java.io.filewriter and you might notice
01:32 - that now java is complaining that
01:33 - there's this
01:34 - unhandled exception i o exception all
01:36 - that means is that this code can throw
01:38 - an i o exception so we either need to
01:40 - handle it here in a try catch or declare
01:42 - in our main method that we throw it so
01:44 - we should do the right thing and just
01:45 - surround this code
01:46 - with a try catch block and we don't
01:47 - really need to do anything special
01:48 - inside of our catch block
01:50 - if this exception happens we can just
01:51 - print the stack trace and that's fine
01:52 - for our purposes okay
01:54 - now that our writer object has been
01:56 - created honestly the hard part's over
01:58 - all you need to do after that is take
01:59 - your writer object and call
02:02 - writer.write and you just pass in to
02:04 - this write method the string that you
02:05 - want to write to the file so let's just
02:07 - pass in
02:07 - a writing to a file but you're not done
02:10 - quite yet this won't work completely the
02:12 - way it is if you're running this in an
02:13 - ide you might notice that there's a
02:15 - warning for this writer object that says
02:16 - resource leak
02:17 - writer is never closed so what you have
02:19 - to do after you're done writing
02:21 - everything to the file
02:22 - that you want to you need to call
02:24 - writer.close
02:25 - if you forget to do that your file will
02:27 - get created but nothing will be written
02:29 - to it it'll just be blank
02:30 - and you'll be pulling your hair out
02:31 - trying to figure out what you did wrong
02:33 - and it's just this simple you need to
02:34 - remember to close your writer all right
02:36 - now let's go ahead and run it and see
02:37 - what we get
02:38 - okay the program finished successfully
02:40 - we didn't write any console output we
02:42 - just have the file output so let's go
02:43 - and see if that got created successfully
02:45 - if you just specify the file name here
02:47 - in your file writer that's what's called
02:48 - a
02:49 - relative path that just means that
02:50 - output.txt file is going to go right
02:53 - next to wherever your program is on your
02:54 - computer so if you just have a
02:56 - java file it's probably going to be in
02:57 - that same directory if you're using an
02:59 - ide like eclipse it's going to be in
03:01 - your project directory
03:02 - and you can get there very easily from
03:04 - eclipse by just right-clicking anywhere
03:05 - in this file
03:06 - and going to show in system explorer
03:09 - that will open a window that shows your
03:10 - dot java file you just need to go one
03:12 - directory
03:13 - up to go to your project folder so for
03:15 - me that's this file io folder
03:17 - and we can see that it has created this
03:18 - output.txt file so let's just open it up
03:20 - and see what's in it and it just has
03:22 - writing to a file and that's exactly
03:24 - what we wanted it to have now that's
03:25 - just one line of course let's say you
03:27 - wanted to write
03:27 - another line in that file so what you
03:29 - might try is just calling writer.write
03:31 - again and passing in whatever line you
03:33 - want to write like
03:34 - here is another line let's run that
03:36 - again
03:37 - completed successfully now one thing to
03:39 - note the first time that you run this it
03:41 - will create this output.txt file
03:43 - but every time you run it after that it
03:45 - will overwrite that same file now most
03:47 - of the time that's just fine but if
03:48 - there's something in there that you want
03:49 - just
03:50 - remember that it's going to do that it's
03:51 - going to overwrite it so just be careful
03:53 - anyway let's look at our text file and
03:55 - so what happened it actually didn't put
03:56 - this on another line and put it on the
03:58 - same line
03:58 - so what you actually have to do is put a
04:00 - backslash n whenever you want to do a
04:02 - new line
04:02 - so now with our backslash n there let's
04:04 - run our program again completed
04:06 - successfully
04:06 - and now here is another line is on the
04:08 - next line and you can just keep calling
04:10 - this right method for however many lines
04:12 - you need to write to the file but most
04:13 - of the time if you're doing file io
04:15 - you're probably not writing hard-coded
04:17 - values you probably want to write to the
04:18 - file from some variable or some array
04:20 - that you have so let's show an example
04:22 - of doing that let's say we have this
04:23 - array of strings just called names that
04:25 - has three values john carl and jerry
04:27 - well what you can do is loop through
04:28 - that array and write each element to the
04:30 - file so you just have something like for
04:32 - string name in names so for each
04:35 - iteration in this loop we can just do
04:37 - writer dot right first a new line so we
04:40 - don't just smoosh all these names onto
04:41 - one line
04:42 - and then plus name let's run that and
04:45 - you can see we have the original text
04:46 - that we wrote and then
04:47 - every element of our names array on a
04:50 - new line so that's how you output to a
04:52 - relative path where it'll put the file
04:53 - right next to wherever your program is
04:55 - but if you want to put it in some
04:56 - specific spot on your computer you just
04:57 - have to pass it an absolute path
04:59 - here's just an example of an absolute
05:01 - path on my own computer so c
05:03 - users john m example output.txt
05:06 - notice that you do have to put a double
05:07 - backslash otherwise it just won't work
05:09 - right let's run that
05:10 - and now we can see we have this
05:11 - output.txt file in this exact absolute
05:14 - path
05:14 - that we specified and it has all the
05:16 - same content in it all right so now
05:18 - we've written to a file
05:19 - and we've even gotten fancy and wrote
05:21 - the contents of an array into that file
05:23 - now let's learn how to
05:25 - read from a file so to write to a file
05:27 - we used a buffered writer so it might
05:29 - not surprise you that you read from a
05:30 - file we're going to use
05:32 - a buffered reader so buffer reader
05:34 - reader
05:35 - equals new buffered reader import for
05:38 - buffered reader
05:39 - is java dot io dot buffered reader
05:42 - similarly to the buffered writer where
05:44 - we had to pass in
05:45 - a file writer for the buffered reader we
05:47 - have to pass in
05:48 - a file reader new file reader and we
05:51 - pass in either the full or absolute path
05:53 - here again to make it simple we're just
05:54 - going to read the file that we just
05:56 - wrote so just output.txt
05:59 - import file reader which is
06:01 - java.io.filereader
06:02 - and just like the filewriter this could
06:03 - throw an exception so we also want to
06:05 - surround this with another try catch
06:07 - and we'll just have it catch i o
06:08 - exception just like the writer did and
06:10 - still just print a stack trace if any
06:12 - exceptions happen
06:12 - okay now we have our reader object
06:14 - available how do we use it
06:16 - well to read a line of text from our
06:17 - file we just call reader dot
06:20 - this this read line returns a string so
06:22 - for your purposes you might want to save
06:24 - it to a variable or something but just
06:25 - to prove that we're actually reading
06:26 - from the file
06:27 - we're going to just print it out to the
06:29 - console so system.out.printline
06:32 - reader.readline so we're going to read
06:34 - the line from the file and print it out
06:35 - to the console but before we get ahead
06:37 - of ourselves once we're done using the
06:38 - reader in our program
06:40 - we do want to call reader.close as well
06:42 - to close our reader object okay now
06:44 - let's run it and see if we are reading
06:46 - from the file
06:46 - awesome we can see that it did read the
06:48 - first line of the file that we wrote
06:50 - we just wrote writing to a file so this
06:53 - is reading it successfully
06:54 - but if you're reading a file you
06:55 - probably don't want to just read one
06:57 - line you probably want to read
06:58 - each and every line to do that of course
07:00 - you're going to want to use some kind of
07:01 - a loop and here we're going to use
07:03 - a while loop this is going to look a
07:05 - little strange but just stay with me
07:06 - before that while loop let's declare
07:08 - a string to hold each line of text as we
07:11 - read it
07:12 - then in our while loops condition we're
07:14 - actually going to have
07:15 - line equals reader.readline so for each
07:18 - iteration through the loop this is going
07:20 - to read a line of text and put it in
07:22 - this line variable but of course this
07:24 - doesn't equate to true or false so it
07:25 - doesn't really work as a while condition
07:27 - yet so what we want to add is
07:29 - not equals null so what is this doing
07:32 - it's going to read a line of text from
07:33 - our file and put that line of text in
07:35 - our
07:36 - line variable when it has reached the
07:37 - end of the file this line will turn out
07:39 - to be null because there's no other
07:41 - lines to read so we can just say
07:42 - while this line does not equal null loop
07:45 - through the file
07:46 - once the line is null we know we've
07:47 - reached the end of the file and it'll
07:49 - exit the while loop
07:50 - we can get rid of this line now where
07:51 - we're just reading a single line of text
07:53 - inside this while loop all we need is
07:55 - system.out.printline
07:57 - line so this should loop through every
07:59 - single line of our file and print it out
08:00 - to the console
08:01 - and there we go writing to a file here's
08:03 - another line john carl jerry
08:05 - that matches our output text file
08:07 - perfectly if you enjoyed this video or
08:08 - learned something please let me know by
08:10 - liking and subscribing it's the only way
08:11 - these videos get out to help more people
08:13 - and so i really do appreciate it so if
08:14 - you'll do that i'll see you next video