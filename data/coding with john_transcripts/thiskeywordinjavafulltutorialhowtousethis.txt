00:00 - one of the more strange keywords you'll
00:01 - see in java is this but what exactly
00:04 - does this mean and what is it used for
00:06 - in this video we'll go over all the ways
00:08 - this can be used in java so you'll know
00:10 - exactly when you need to use it and what
00:12 - it actually means when you do my name is
00:14 - john i'm a lead java software engineer
00:15 - and i love sharing what i've learned
00:16 - with all of you in a clear and
00:18 - understandable way i also have a full
00:19 - java course available and a link down in
00:21 - the description if you're interested
00:22 - let's get right to it alright so the
00:24 - first way that this keyword can be used
00:26 - in java is to refer to the current
00:28 - object meaning it refers to the object
00:31 - that the method you're currently in was
00:33 - called on but what exactly does that
00:35 - mean and when might you want to do that
00:37 - let's take a look using a simple example
00:39 - so i've got this dog class right all it
00:41 - has is two fields a string name and an
00:43 - int age you probably know that in
00:45 - general it's a good idea to make these
00:47 - fields private and then create getter
00:49 - and setter methods for being able to
00:51 - manipulate and read these values so for
00:53 - example if you wanted to make a setter
00:55 - method for this name variable you
00:57 - probably have something like this public
00:59 - void set name and that would take in the
01:02 - string name that you want to set the
01:04 - name to and then in the method you just
01:05 - want to of course set this name field to
01:08 - be the value of this name being passed
01:11 - into this method right but pretty
01:12 - quickly it's obvious that we have a
01:13 - problem here right the problem is that
01:15 - the field for the name of the dog in our
01:17 - class is called name but the parameter
01:19 - that we have being passed in is also
01:21 - called name as it is right now both of
01:24 - these names that we have here are
01:26 - referring to this name parameter being
01:28 - passed in so all this is doing is just
01:30 - setting this name variable to itself so
01:32 - right now this method does nothing at
01:34 - all to actually set this name field on
01:36 - the object so how do we go about telling
01:39 - java that we want to set this name field
01:42 - to have the value of this name parameter
01:44 - being passed in well that's where the
01:46 - this keyword comes in we can use this
01:48 - dot name to specify to java that we are
01:51 - referring to the field on the object
01:54 - that this method was called on and you
01:56 - can do the same thing when you create
01:57 - your getters so a getter for name could
01:59 - look like public string get name no
02:03 - parameters need to be passed in it'll
02:04 - just return this dot name since there's
02:08 - no conflicting variable that has the
02:09 - exact same name we don't technically
02:11 - have to use this keyword here if we got
02:14 - rid of it of course there's no other
02:16 - name this could possibly be referring to
02:18 - in this method other than this field but
02:20 - it's often good practice to go ahead and
02:21 - use it anyway just for clarity so now we
02:24 - can go and create a dog we'll call it my
02:26 - dog set it equal to new dog then we can
02:30 - take my dog and call set name and pass
02:33 - in kramer then we can go ahead and print
02:35 - it out my dog dot get name just to prove
02:38 - that it's now being set correctly and it
02:40 - is we get kramer so when we're calling
02:42 - the set name method on the my dog object
02:46 - inside that set name method
02:48 - this is referring to the my dog dog
02:51 - object that the set name method was
02:54 - called on so if i'm inside a method in
02:56 - the dog class
02:58 - this will refer to the exact dog object
03:02 - that that method we're inside
03:04 - was called on so if i call my dog.set
03:07 - name
03:08 - inside the set name method this
03:10 - refers to the mydog object itself so
03:13 - this is just saying take the mydog
03:14 - object and set its name to be the value
03:17 - of the name variable being passed in and
03:19 - it doesn't just have to be getters and
03:20 - setters you can use this in any
03:22 - non-static method and you can also use
03:24 - it in constructors in a similar way
03:26 - let's say i wanted to make a new
03:28 - constructor public dog and i wanted to
03:30 - be able to take in the string name and
03:32 - the int age right here in the
03:33 - constructor so i can set them
03:35 - immediately on the object i would just
03:37 - want to do the same thing i did here in
03:38 - the setter method i just say this dot
03:40 - name equals name and this dot age equals
03:44 - age so it works exactly the same way it
03:46 - did in the setter method this dot name
03:48 - and this dot age refer to the name and
03:50 - age fields on the actual dog object
03:53 - that's being created inside this
03:55 - constructor and we set their values
03:57 - using the name and age parameters being
03:59 - passed in by the way if you're a little
04:01 - bit hazy on constructors check out this
04:02 - other video i've got that goes into a
04:04 - deep dive all about constructors it'll
04:06 - clear up all of your questions so you
04:08 - can use this and any constructor to
04:10 - refer to the object being created or in
04:12 - any non-static method to refer to the
04:15 - object that that method was called on
04:17 - however notice i said any non-static
04:19 - method using this is not allowed in any
04:21 - static method let's say i made a public
04:24 - static void print stuff inside of this
04:27 - method if i try to do something like
04:28 - this.name i'm going to get an error that
04:31 - says cannot use this in a static context
04:34 - and that makes sense right the whole
04:35 - point of a static method is that they
04:37 - can be used outside the context of any
04:40 - particular object of that class
04:42 - you can call a static method like this
04:44 - on the class itself without needing any
04:46 - particular object and since this refers
04:48 - to the object that this method would be
04:50 - called on using it in a static method
04:53 - just doesn't make any sense so it's not
04:54 - allowed the other way that this keyword
04:56 - can be used in java is inside
04:58 - constructor methods to call other
05:01 - constructor methods that sounds kind of
05:03 - weird right why would you want to do
05:04 - that so here's an example so we've
05:06 - already created this dog constructor
05:07 - that takes in a name and an age so that
05:10 - you're able to create a new dog with a
05:12 - specific name and an age that you can
05:14 - specify but what if we wanted to create
05:16 - another constructor that takes no
05:17 - arguments at all and just creates a new
05:20 - dog object with some default values for
05:22 - the name and age so we could say public
05:25 - dog takes no parameters right now if we
05:27 - just leave this empty it would create a
05:29 - new dog object but it wouldn't set its
05:31 - name or its age but what we can do from
05:33 - here is call this other constructor and
05:36 - just give it default values for the name
05:38 - and the age and to call that other
05:39 - constructor that's where we use the this
05:42 - keyword we just say this and then pass
05:45 - in the values that we want to use for
05:47 - name and age so a default name for a dog
05:49 - could be fido and maybe we can default
05:51 - its age to zero so when you use the this
05:54 - keyword followed by a parenthesis java
05:56 - knows that you're invoking a constructor
05:58 - and it knows the exact constructor that
06:00 - you're calling just based on the types
06:01 - of the variables that you pass in so
06:03 - because you're passing in a string and
06:05 - an int java knows to call this
06:07 - constructor here that takes in a string
06:09 - and an int so now back here in our code
06:11 - where we're creating a brand new dog
06:13 - just with this basic no args constructor
06:15 - if we don't set a name at all let's get
06:17 - rid of this set name line it will give
06:19 - us the default name of fido and what
06:22 - happened is it called the no args
06:23 - constructor which used this keyword to
06:26 - call this other constructor with the
06:28 - name of fido and the age of zero so
06:31 - often people will use this kind of
06:32 - pattern to have one constructor that
06:34 - takes in a whole bunch of custom values
06:36 - if you want to use it and then have
06:37 - other constructors with fewer parameters
06:39 - or even no parameters and then uses this
06:42 - keyword to call the other constructors
06:44 - with certain default values now if you
06:46 - ever use this to call another
06:48 - constructor your this call has to be the
06:52 - very first statement in your constructor
06:55 - you're not even allowed to do something
06:56 - like
06:57 - system.out.printline hi mom if you're
07:00 - this constructor call is not the very
07:02 - first line in the constructor that
07:04 - you're creating you will get an error
07:06 - you're not allowed to have this call
07:08 - anywhere else you can't use this call
07:10 - and any other methods besides a
07:12 - constructor and it always has to be the
07:14 - very first statement that you make
07:16 - inside your constructor the basic reason
07:18 - for that is that this call to the other
07:20 - constructor actually creates the object
07:23 - and java doesn't want you to have any
07:24 - other code that might try to use that
07:26 - object before it's created if you
07:28 - enjoyed this video or learned something
07:29 - please let me know by hitting the like
07:30 - button and be sure to subscribe so you
07:32 - don't miss each new java tutorial don't
07:34 - stop now go ahead and check out one of
07:35 - these other videos to keep on learning
07:37 - see you next time