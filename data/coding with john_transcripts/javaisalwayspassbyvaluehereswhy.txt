00:00 - one of the biggest points of confusion
00:01 - in java is whether it is passed by value
00:03 - or past by reference we're gonna clear
00:05 - that up once and for all in this video
00:06 - my name is john i'm a lead java software
00:08 - engineer and i love sharing what i've
00:09 - learned in a clear and understandable
00:10 - way so if you like this video consider
00:12 - subscribing so you don't miss each new
00:13 - java tutorial i also have a full java
00:15 - course available in a link down in the
00:16 - description if you're interested at the
00:17 - risk of everybody just leaving the video
00:19 - immediately i will answer the question
00:20 - right away java is always pass by value
00:23 - 100 of the time but the deeper answer is
00:25 - a lot more subtle than that what java
00:27 - actually does is pass references by
00:30 - value let's start with a concrete
00:32 - example so we've got this class cheese
00:34 - all it has is one in field a level of
00:36 - stinkiness so you know exactly how
00:37 - stinky this cheese is and a gutter and
00:39 - setter for the level of stinkiness field
00:40 - so in our main class let's create a
00:42 - cheese my cheese equals new cheese and
00:46 - we're going to set its level of
00:47 - stinkiness to 10. so pretty stinky and
00:49 - if we wanted to we can go ahead and
00:51 - print out that level of stinkiness that
00:53 - we just set and of course that prints
00:54 - out 10. but what if we added a method
00:56 - down here private static void increase
00:59 - stinkiness that takes in a cheese object
01:02 - and sets its level of stinkiness to
01:05 - whatever the current level of sneakiness
01:06 - is plus one and then back up here we
01:09 - could call increase stinkiness and pass
01:12 - in our my cheese object we said java is
01:14 - always passed by value right so what do
01:16 - you think it's going to print out here
01:17 - and it prints out 11. so this method was
01:20 - able to increase the level of stinkiness
01:22 - of this my cheese that we passed in so
01:23 - you might think here that because java
01:25 - is passed by value that any changes to
01:26 - this methods cheese variable wouldn't
01:28 - take effect on the my cheese variable
01:30 - passed into the method but it did so
01:32 - what exactly is happening here let's
01:34 - demonstrate with a highly advanced
01:35 - whiteboarding session so first we've got
01:37 - our mai cheese variable right as you
01:38 - probably know in java this variable
01:40 - doesn't actually hold the object what it
01:42 - holds is a reference
01:44 - to a cheese object so that's basically
01:46 - an address in memory right like zero
01:48 - zero zero one so that points to a
01:51 - certain spot in memory that holds your
01:54 - cheese object with a level of stinkiness
01:56 - of 10. so what's happening when you pass
01:58 - in this my cheese object into this
02:01 - method as a parameter well since java is
02:03 - passed by value and the value of this
02:06 - mycheese variable is the address of a
02:09 - certain object in memory what it does is
02:10 - it copies that value it copies that
02:13 - memory address that's the value of that
02:16 - mycheese object so because it copies
02:18 - that value that memory address this
02:20 - cheese variable ends up pointing to the
02:22 - exact same cheese object in memory as
02:25 - the my cheese variable so in here when
02:27 - we increase the level of stinkiness of
02:30 - this cheese it is changing the contents
02:32 - of this object in memory from 10 to 11.
02:35 - and because these two variables kind of
02:37 - share this same object in memory that
02:39 - change that we made to the cheese
02:41 - variable in the method also takes effect
02:43 - in the my cheese variable that was
02:45 - passed into the method so that's why
02:46 - java can sometimes look like it's passed
02:48 - by reference because it kind of seems
02:50 - like it just passed in a reference to
02:52 - that object but what it's actually doing
02:54 - is passing in the value of the memory
02:57 - address of that object but here's
02:59 - something really weird what if we change
03:00 - this up a bit what if instead we took
03:02 - this cheese variable and set it equal to
03:04 - a new cheese and then set its level of
03:07 - stinkiness to 756 you would think that
03:10 - from what we just saw it would print out
03:11 - 756 here right but it prints out 10. so
03:14 - what's up with that why did what we had
03:16 - before change the contents of this mind
03:18 - cheese variable but this doesn't change
03:19 - it at all and the level of stinkiness
03:21 - here is still 10 on the main cheese
03:22 - variable the way the variable is passed
03:24 - in is still exactly the same as before
03:26 - it's still passing in the value of the
03:27 - address and memory of the maichi's
03:29 - object the key difference is here where
03:31 - we're setting this cheese variable to be
03:34 - a brand new cheese object so when the
03:36 - method starts this cheese object has the
03:38 - exact same address and memory as my
03:40 - cheese but when we say cheese equals new
03:42 - cheese what it's actually doing is
03:43 - creating a brand new cheese object in
03:46 - memory and pointing this cheese variable
03:48 - to it and so it'll now have a different
03:49 - address in memory it'll have something
03:51 - like zero zero zero two and then it's
03:54 - setting that cheese object's level of
03:56 - stinkiness to
03:58 - 756. and this association that it had
04:01 - with this original cheese object up here
04:03 - is completely gone so here we're setting
04:04 - this variable to be a brand new cheese
04:07 - object this cheese variable in the
04:08 - method no longer points to the same
04:10 - address and memory as the maichi's
04:12 - variable that was passed in so that's
04:13 - why changing this new cheese's level of
04:15 - stinkiness to 756 has no impact at all
04:18 - on the my cheese variable that was
04:20 - passed in so if in your method you
04:21 - modify the object that the variable
04:23 - passed in was referencing that change
04:26 - will impact the variable passed in as
04:28 - well but if instead you completely
04:29 - reassign that variable inside your
04:31 - method then it'll have no reference at
04:33 - all to the object and memory that was
04:35 - being referenced by the variable passed
04:37 - into the method that's why it's so
04:38 - important to know that this is how it's
04:39 - working because these differences in
04:41 - functionality that we just saw can be
04:42 - super confusing to a java beginner in
04:44 - some cases it does affect the variable
04:46 - passed in but in others it doesn't and
04:48 - it can feel like a complete mystery why
04:50 - unless you know what we just went over
04:51 - this applies to any type of variable you
04:53 - pass into a method it doesn't matter
04:55 - whether it's an object or whether it's a
04:56 - primitive like an int or a long 100 of
04:59 - the time java is passed by value but
05:01 - when you have an object like cheese that
05:03 - value it passes in is a memory address
05:05 - so it can appear to be passing by
05:07 - reference if you enjoyed this video or
05:09 - learned something let me know by hitting
05:10 - the like button if you have any
05:11 - questions or i got something wrong feel
05:12 - free to yell and scream at me in the
05:14 - comments and if you really want to
05:15 - support the channel you can do the whole
05:16 - youtube trifecta of liking commenting
05:18 - and subscribing thanks so much for
05:20 - watching and i'll see you next time