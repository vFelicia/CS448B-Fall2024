00:00 - annotations are a really cool and useful
00:02 - part of the java language but how can
00:04 - you create your own custom annotations
00:06 - that you can add and then use in your
00:08 - own code in this video we'll go over how
00:10 - to create custom annotations for classes
00:13 - methods and variables my name is john
00:15 - and i'm a lead java software engineer i
00:17 - also have a full java course available
00:18 - in the link down in the description so
00:20 - go check it out but first thanks to
00:22 - mailgun for sponsoring this video
00:24 - mailgun is how modern companies work
00:26 - with email mailgun is easy to use has
00:28 - amazing world-class support and simple
00:31 - but powerful apis that smart developers
00:34 - can use to reach customers at scale so
00:36 - their organization can grow faster they
00:39 - also have a send time optimization
00:41 - feature that automatically finds the
00:43 - perfect time to send an email to each
00:45 - and every individual person on your list
00:48 - at the exact time that they're most
00:50 - likely to engage you can send and track
00:52 - transactional and marketing messages
00:54 - remove invalid email addresses from your
00:56 - list or prevent fake signups from your
00:59 - list in the first place easily their
01:00 - team of experts can help you improve
01:02 - your email deliverability and also drive
01:05 - higher conversion rates with its
01:06 - powerful email api and intuitive email
01:09 - marketing solutions mailgun works
01:11 - through the entire email lifecycle from
01:13 - conception all the way to delivery and
01:15 - it does that for more than 240 billion
01:18 - emails a year for companies like
01:20 - wikipedia dhl toast lyft and microsoft
01:24 - mailgun makes it easier than ever to
01:26 - build connected experiences through
01:28 - email thanks again to mailgun for
01:30 - sponsoring this video try mailgun today
01:32 - by using my link down in the description
01:34 - mailgun.com
01:36 - john now let's get to it so first what
01:39 - exactly is an annotation annotations are
01:41 - a kind of metadata they're supplemental
01:44 - information that you can put into your
01:46 - java code they don't directly affect the
01:49 - code that you annotate but those
01:51 - annotations can be processed by
01:53 - something else such as by the compiler
01:55 - or at run time with some code that you
01:58 - write yourself if you've been coding in
02:00 - java for a while there's probably at
02:01 - least a couple of annotations that
02:03 - you're already familiar with one example
02:05 - is suppress warnings for example if i
02:08 - create some variable like this mycat
02:10 - variable but i never actually use it
02:12 - anywhere else in my code the code will
02:14 - compile just fine but i'll get a warning
02:16 - that my cat is never used most of the
02:19 - time you would want to get rid of a
02:20 - warning like this by either using the
02:22 - variable somewhere or just getting rid
02:24 - of it completely if you don't want to
02:26 - use it but if for any reason you're okay
02:28 - with whatever it's warning you about you
02:30 - can use this suppress warnings
02:32 - annotation to get rid of that warning in
02:34 - the parentheses here you have to specify
02:36 - what kind of warning that you want to
02:38 - suppress so to suppress an unused
02:40 - variable warning you just pass in
02:43 - unused and then you can see the warning
02:45 - goes away so this is an example of an
02:47 - annotation all annotations start with
02:50 - the at symbol followed by the name of
02:52 - the annotation for some annotations
02:54 - that's all you need but for other
02:56 - annotations you can pass in parameters
02:58 - in parentheses afterwards and for some
03:00 - annotations that's even required like it
03:02 - is for suppress warnings here later on
03:04 - in the video we'll talk about how you
03:06 - can add your own custom parameters to
03:08 - your annotations as well and how you can
03:11 - process them in your code annotations
03:13 - can be added to just about anything in
03:14 - java so that means classes variables
03:17 - methods method parameters and even other
03:20 - annotations you'll always put your
03:22 - annotation right before the thing that
03:24 - you want to annotate so for a variable
03:26 - like this we'll put it right before the
03:28 - variable declaration they can
03:30 - technically go on the same line too
03:32 - that's totally fine but most of the time
03:34 - you'll see them separated by a line
03:36 - you're probably familiar with other
03:37 - built-in annotations too but let's get
03:39 - right to the fun part how do you build
03:41 - your own custom annotations let's get
03:44 - into that right now let's say that we
03:45 - wanted to create an annotation that
03:47 - would just apply to a class so we could
03:50 - add it to our cat class here just above
03:53 - the class declaration and we could call
03:55 - it a very important so this can just be
03:58 - used as a label like a signal to some
04:01 - other class that is processing these
04:03 - annotations that this class is very
04:06 - important of course this annotation
04:07 - doesn't exist yet so how do we go about
04:10 - creating it well it turns out that
04:12 - creating an annotation is actually very
04:14 - similar to creating your own class so if
04:17 - we were going to create a new class
04:19 - called very important we would just say
04:21 - public class very important the only
04:24 - thing that we have to do to make this an
04:26 - annotation instead of a regular class
04:28 - is just change class to at
04:31 - interface and
04:33 - that's it that's technically all that
04:35 - you need to create your own bare bones
04:37 - custom annotation however there are a
04:39 - few things that you're going to want to
04:41 - customize about your annotation before
04:43 - you can actually do something with it
04:45 - and ironically to customize your
04:47 - annotation you're going to be using some
04:50 - annotations there are two main
04:51 - annotations that you're going to want to
04:53 - add here the first is at
04:56 - target target allows you to specify
04:59 - exactly which kind of java element this
05:02 - annotation is valid to be used on so in
05:05 - this case we said that we wanted this
05:07 - annotation only to be used on a class
05:10 - and this is where we can specify that if
05:12 - you're okay with this annotation being
05:14 - used on any type of java element that's
05:16 - totally fine and you can leave this out
05:18 - but most of the time you're going to
05:20 - want to specify it to tell java what
05:22 - type of element you want this annotation
05:24 - to be valid for you'll pass in an
05:26 - element type since we want this
05:28 - annotation to be valid only on classes
05:31 - we will use element type dot type so if
05:34 - we go back over to our cat class you can
05:36 - see that we have no errors when we apply
05:38 - the annotation to the class but if we
05:40 - try to annotate a method with the same
05:42 - annotation we get an error and it says a
05:45 - very important is not applicable to
05:47 - method if we did want it to be valid for
05:50 - methods as well we could pass in
05:52 - multiple element types to this target
05:55 - annotation here to do that you just have
05:57 - to pass in your multiple element types
05:59 - as an array so within curly brackets you
06:02 - can just specify your multiple element
06:04 - types
06:05 - separated by commas so elementtype.type
06:08 - makes it valid for classes and
06:10 - elementtype.method will make it valid
06:13 - for methods as well so if we hop back
06:15 - over to our cat class we no longer have
06:17 - an error and you can see over here just
06:19 - all the different element types we could
06:22 - add an annotation to there's everything
06:24 - from a field to a constructor just
06:26 - whatever you want now the next
06:28 - annotation that you're going to want to
06:29 - add to your annotation is one that's
06:32 - called retention this one is a little
06:34 - bit more obscure and can be tough to
06:36 - understand at first
06:38 - 99.9 percent of the time you're just
06:41 - going to want to use retention policy
06:43 - dot runtime runtime just tells java to
06:47 - keep this annotation around through the
06:49 - actual running of your program so that
06:52 - other code can actually look at that
06:54 - annotation and use it while the program
06:56 - is running and that's how we're going to
06:57 - be processing annotations in this
07:00 - tutorial so if it confuses you at all
07:02 - don't worry about it too much and just
07:04 - use runtime the other two possible
07:06 - values you could send in here are source
07:09 - and class source means that java will
07:11 - get rid of this annotation before it
07:14 - even starts to compile your code so
07:16 - that's only used for annotations that
07:18 - only matter before code is even compiled
07:21 - like the suppress warnings annotation
07:23 - class means that java will keep your
07:25 - annotation around through compilation
07:28 - but once your program actually starts up
07:30 - at runtime it'll get rid of it and then
07:32 - of course runtime means that java keeps
07:34 - this annotation around throughout the
07:36 - actual running of the program and then
07:38 - we can access this annotation while the
07:40 - program is running using some fancy
07:43 - reflection code and that's what we're
07:44 - going to be doing here so now that we've
07:46 - created this very important custom
07:48 - annotation and we've applied it to our
07:51 - cat class let's go back to our main
07:54 - method and show how we can go about
07:56 - processing this annotation so we have
07:58 - this my cat object that is an instance
08:01 - of the cat class that we annotated so
08:04 - what we can do is look at the class
08:08 - of this my cat object and then check
08:10 - whether that class
08:12 - has been marked with the very important
08:14 - annotation and then we can have our code
08:16 - do whatever we want it to if it sees the
08:19 - annotation on that class so to do that
08:21 - we'll call mycat.getclass
08:24 - because the class is what has the
08:26 - annotation on it not the object and then
08:28 - we can call a method on it called is
08:31 - annotation present and then we want to
08:34 - pass in as a parameter to this method
08:36 - the name of the annotation that we want
08:38 - to check for so we'll pass in very
08:41 - important.class this method returns true
08:44 - if this class has been annotated with
08:46 - very important and false if not so all
08:49 - we have to do is just surround this with
08:52 - an if so we can say if this class has
08:55 - been marked with the very important
08:57 - annotation we'll just print out this
09:00 - thing is very important and then
09:03 - otherwise if it doesn't have that very
09:05 - important annotation this thing is not
09:08 - very important now if we go ahead and
09:10 - run our program because the cat class
09:13 - has been annotated with very important
09:15 - we get this thing is very important but
09:17 - if instead we had some dog we'll call it
09:20 - my dog equals new dog
09:22 - we'll call him jerry
09:24 - this dog class does not have that
09:26 - annotation so if we run this instead
09:29 - checking my dog instead of my cat
09:32 - we get this thing is not very important
09:35 - so the whole idea here is that you can
09:37 - just look at an object's class and see
09:40 - if that class has the annotation that
09:42 - you're interested in and if it does have
09:44 - that annotation you can put whatever
09:46 - code that you want it to do here of
09:48 - course it can be something super simple
09:50 - like this but it can be as complicated
09:53 - and involved as you want it to be and so
09:55 - that's what can make these annotations
09:57 - so powerful but the basics of just
09:59 - checking for the presence of an
10:01 - annotation is pretty simple next let's
10:03 - create an annotation that's intended to
10:06 - be used only on methods and show how you
10:08 - can process that we'll say public at
10:11 - interface we'll call it run immediately
10:15 - for the retention we'll use the same
10:17 - retention policy as before
10:19 - retentionpolicy.runtime
10:21 - but since we want this to apply only to
10:23 - methods we will use a target of
10:26 - elementtype.method
10:28 - over in our cat class we have a couple
10:31 - of methods that we could add this
10:32 - annotation to let's go ahead and add it
10:34 - to this meow method that all it does is
10:37 - just print out meow but we won't add it
10:40 - to the eat method what we're going to do
10:42 - to process this annotation over in our
10:45 - main method is to use reflection to
10:47 - literally loop through each of the
10:50 - methods in this class and for each
10:53 - method if we find that it's annotated
10:55 - with run immediately we are going to run
10:58 - that method immediately right there so
11:00 - back over here in our main method in
11:03 - order to loop through all the methods in
11:05 - the class we're going to use a plain old
11:08 - for loop now we can get all the declared
11:11 - methods in a class just by calling the
11:14 - get declared methods method on that
11:17 - class this returns an array of method
11:20 - objects and all we have to do is just
11:22 - loop through them so we can just say for
11:24 - each method in this class we will check
11:27 - to see whether that annotation is
11:29 - present on that method and that's done
11:31 - almost exactly the same way we checked
11:34 - for an annotation on the class we can
11:36 - just call method dot is annotation
11:39 - present and then pass in the annotation
11:41 - that we want to check for so here we
11:42 - want to check for run immediately dot
11:45 - class so we said that if this annotation
11:48 - is present on a method we want to run
11:51 - that method immediately right here so
11:54 - here's how we can do that using
11:55 - reflection we can actually use this
11:58 - method object that we have identified
12:01 - has this run immediately annotation we
12:03 - can call the invoke method on it and
12:06 - then we have to pass in as a parameter
12:08 - the object that we want to call that
12:12 - method on so since over here in our cat
12:14 - class we only have one method that is
12:17 - annotated with run immediately what it
12:19 - should do is loop through all the
12:21 - methods that are in this class which is
12:22 - just these two and if it sees that it
12:25 - has this run immediately annotation it
12:28 - should invoke that method immediately so
12:30 - what we should see it do is run this
12:32 - meow method but not this eat method okay
12:36 - so it says meow but it does not say
12:38 - munch so it is immediately invoking the
12:41 - meow method but not the eat method i
12:44 - mentioned earlier that we were going to
12:45 - show how you can add your own parameters
12:48 - to your custom annotations so let's do
12:50 - that now with this run immediately
12:52 - annotation let's say that we wanted to
12:54 - add a parameter for the number of times
12:57 - that it should run that method
12:58 - immediately so for example if we wanted
13:00 - it to run it three times we could pass
13:03 - in times equals three but how do we
13:06 - change this run immediately annotation
13:08 - class to be able to accept that times
13:11 - parameter well right here in the body of
13:14 - our annotation class we can just declare
13:16 - an int
13:17 - times but one thing is a little bit
13:20 - unusual here we technically have to make
13:22 - this a method and not a normal class
13:25 - field so to do that we have to add
13:27 - parentheses like this but for all
13:30 - practical development purposes this
13:32 - basically acts exactly like a normal
13:35 - field so now we can specify this int
13:38 - times parameter when we use this
13:40 - annotation and then back over here in
13:42 - our main method where we're already
13:45 - processing this annotation getting the
13:47 - value of that times parameter is really
13:49 - easy so here inside this if we
13:52 - definitely know that this method has the
13:55 - run immediately annotation first we
13:58 - actually have to retrieve this run
14:00 - immediately annotation from that method
14:03 - and we can actually put that in a run
14:05 - immediately object we'll just call it
14:07 - annotation and we can get that
14:09 - annotation from the method just by
14:12 - calling method dot get annotation and
14:14 - then we again pass in the annotation
14:18 - that we want to retrieve so run
14:19 - immediately dot class so now that we
14:22 - have this annotation object we can just
14:25 - get the times parameter off of that
14:27 - annotation just by calling annotation
14:30 - dot
14:31 - times we said that we wanted to use this
14:33 - times parameter to be the number of
14:35 - times that we invoke this method so
14:38 - here's how you can do that you can just
14:40 - put this invoke call inside a simple for
14:43 - loop so we can say
14:45 - 4 int i
14:47 - equals 0 and we'll keep looping while i
14:50 - is less than the number of times
14:52 - specified in the annotation parameter i
14:55 - plus plus
14:56 - put this invoke call inside the for loop
14:59 - and that should be it now we've
15:01 - specified that we wanted to run this
15:04 - meow method three times so hopefully
15:06 - when we run this program we will see it
15:09 - running the method three times and we do
15:11 - there are a few things to note about
15:14 - these parameters though one thing is
15:16 - that you can't use just any type you
15:18 - want for these parameters they can only
15:20 - be a primitive type like this int a
15:23 - class type a string or an array of any
15:26 - of those so if instead of the int type
15:29 - here we gave it a type of dog we get an
15:32 - error that dog is an invalid type for an
15:36 - annotation member if you do want to use
15:38 - an array as your parameter you just need
15:40 - to add brackets to the type here like
15:42 - this the second thing to know about
15:44 - these parameters is that you can add
15:46 - default values if you want to so it
15:48 - might make sense to default this times
15:50 - parameter to 1 so if you don't pass in a
15:53 - number of times that you want it to run
15:55 - the method it will only run it once to
15:57 - do that all you have to do is after the
15:59 - declaration here is just put default and
16:02 - then whatever you want the value to be
16:04 - if you don't specify any default here
16:06 - you're required to pass in that
16:08 - parameter when you use this annotation
16:10 - but if you do have a default value then
16:13 - it's optional and you can leave it out
16:14 - next let's create and process a custom
16:17 - annotation for a field in a class let's
16:20 - say our new annotation is only intended
16:22 - for string fields on a class like this
16:25 - name so let's go ahead and create it so
16:28 - public at interface let's just call it
16:32 - important string
16:34 - and again we're going to use the same
16:36 - retention policy of runtime but since we
16:39 - want this annotation to be valid only
16:42 - for a field on a class we're going to
16:45 - use element type dot field for the
16:48 - target so now we've created this
16:50 - important string annotation let's go
16:52 - over to our cat class and annotate this
16:55 - string name field with important string
16:59 - now back over in our main method we're
17:01 - going to process this annotation
17:04 - similarly to how we processed the method
17:06 - annotation here we can use
17:08 - mycat.getclass.getdeclaredfields
17:13 - to get all of the fields declared on
17:15 - that class so we can loop through each
17:17 - of the declared fields in the class just
17:19 - like we did with methods so for each
17:22 - field we'll call it field in the
17:24 - declared fields in the class we will
17:27 - check whether that important string
17:30 - annotation is present on this field and
17:33 - then if it is we can just print out the
17:36 - value of that string but in all
17:38 - uppercase because it's so important so
17:40 - at this point in the code we know that
17:42 - this field does have this important
17:44 - string annotation so what we need to do
17:47 - is get the value of this field on this
17:50 - object that we're interested in and we
17:52 - can get the value of this field on this
17:55 - object by calling field dot get and then
17:59 - passing in the object that we want to
18:02 - get that field from so we'd pass in my
18:05 - cat so because this could technically be
18:07 - any type and won't necessarily only be a
18:10 - string first we have to put it into an
18:13 - object variable we'll just call it
18:15 - object value so because this variable is
18:18 - an object and not a string to work with
18:20 - it as a string we first need to safely
18:23 - cast it to a string the easiest way to
18:25 - cast it to a string safely is to just
18:28 - say if this object value is an instance
18:32 - of
18:33 - string now in newer versions of java you
18:36 - don't even have to explicitly cast this
18:39 - object value to a string instead all you
18:42 - have to do is put in the name of the
18:44 - variable that you want it to have for
18:47 - its value as a string so let's say we
18:50 - put in string value here so what this
18:53 - will do is check to see if this object
18:56 - value object
18:58 - is an instance of string
19:00 - and if it is it will automatically cast
19:03 - this to a string and put it in a
19:05 - variable called string value which we
19:08 - can then use inside this if pretty cool
19:11 - we said that for any field that has this
19:13 - annotation we just wanted to print out
19:15 - its value in all caps so we could do
19:17 - that pretty easily here by just saying
19:21 - system.out.printline and then taking the
19:23 - string value and calling to uppercase so
19:26 - since our cat is named stella this
19:29 - should print out stella in all caps when
19:33 - we run our program so let's see and
19:35 - there we go stella
19:37 - and yes i actually do have a cat named
19:40 - stella and this is a picture of her here
19:42 - she's the tiniest sweetest little kitten
19:44 - if you enjoyed this video or learned
19:46 - something please let me know by hitting
19:47 - the like button and be sure to subscribe
19:49 - so you don't miss each new java tutorial
19:51 - and be sure to check out my full java
19:53 - course in a link down in the description
19:54 - if you're interested thank you so much
19:56 - for watching i really do appreciate you
19:58 - being here with me i'll see you next
19:59 - time