00:00 - in this video we're going to talk all
00:01 - about anonymous inner classes in java
00:03 - and the question on everyone's mind how
00:04 - they relate to bigfoot my name's john
00:06 - i'm a lead java software engineer and i
00:08 - love sharing what i've learned in a
00:09 - clear and understandable way so be sure
00:11 - to hit the subscribe button so you don't
00:12 - miss each new java tutorial i also have
00:14 - a full java course available in a link
00:16 - down in the description if you're
00:17 - interested
00:17 - alright so anonymous inner classes this
00:19 - is another one of those things in java
00:21 - that just has a scary sounding
00:23 - complicated sounding name
00:24 - anonymous inner classes it sounds really
00:26 - hidden and shady and weird but they're
00:28 - really not all that complicated and they
00:29 - can be really useful and really cool to
00:31 - use an anonymous inner class is a class
00:34 - with
00:34 - no name that you use to instantiate only
00:37 - one
00:38 - object ever so whenever you use an
00:40 - anonymous inner class you'll always be
00:41 - defining that class and instantiating
00:44 - the single object
00:45 - of that class at the same time in the
00:47 - same java statement this will become a
00:48 - whole lot clearer with an example
00:50 - your anonymous inner class can either
00:52 - extend any existing class or implement
00:54 - any existing interface we'll start with
00:56 - the one that extends another class so
00:58 - let's say we have this type
00:59 - um animal and we want to create a new
01:02 - object of type animal we'll just call it
01:04 - my animal so animal my animal equals new
01:07 - animal just a basic constructor to
01:09 - create a new animal object right and if
01:10 - we hop over to this animal class we can
01:12 - see that it just has one
01:13 - public method called make noise that
01:15 - just prints out yep yep so of course if
01:17 - we took this my animal object and called
01:19 - the make
01:19 - noise method on it of course it would
01:21 - just print out yappy app what if we
01:22 - wanted to create a new type of animal
01:24 - object
01:25 - like a bigfoot that there is only ever
01:27 - going to be exactly
01:28 - one instance of and we want it to be
01:30 - able to make noise in a completely
01:32 - different way
01:33 - than a regular animal object well we can
01:35 - use an anonymous inner class to create
01:37 - our bigfoot so here's how you do it it
01:39 - starts out looking like
01:40 - any other constructor call animal
01:42 - bigfoot equals new
01:44 - animal however if we leave it like this
01:46 - we get a basic plain old animal object
01:48 - if we wanted to find our own new type of
01:49 - animal here we just have to put an open
01:51 - and close curly braces and inside these
01:53 - curly braces are where we put
01:54 - our new classes definition so what we're
01:56 - actually doing here is creating an
01:58 - anonymous
01:59 - subclass of the animal class and writing
02:01 - that class definition right here between
02:03 - these curly braces so in the animal
02:04 - class we have this make noise method
02:06 - right well as a part of this anonymous
02:08 - class definition we can override
02:10 - this make noise method with our own
02:12 - implementation public
02:13 - void make noise now of course we want to
02:16 - have it make noise like a bigfoot would
02:19 - system.out.printline growl
02:24 - perfect sounds exactly like a bigfoot so
02:26 - now if we take this bigfoot object and
02:28 - call
02:28 - make noise on it this regular animal
02:31 - object my animal still says yappy happy
02:32 - app but our bigfoot says
02:36 - this is what anonymous inner classes
02:38 - allow you to do they allow you to create
02:40 - an
02:40 - unnamed subclass of some other class
02:42 - like animal
02:43 - and create one single object of that
02:46 - anonymous class so of course it makes
02:47 - sense to use an anonymous inner class to
02:49 - create
02:50 - a bigfoot object you know a bigfoot
02:51 - object is mysterious you can't go around
02:53 - as a bigfoot object with a big old
02:54 - you know class name of bigfoot on your
02:56 - forehead and you can only ever create
02:58 - one of them we created this one-time use
03:00 - anonymous inner class
03:02 - as a subclass of animal so now later on
03:04 - down in the code because this class that
03:05 - i made doesn't have a name i can't just
03:07 - instantiate another object of that class
03:09 - it's a one-time use class i mentioned
03:11 - that there are two different ways to
03:12 - create an anonymous inner class and one
03:14 - creates a subclass of an existing class
03:16 - like we did here
03:17 - another way is by implementing an
03:19 - interface but the concept is the same
03:21 - you create a one-time
03:22 - use class that implements an interface
03:25 - that you specify
03:26 - one interface that you might be familiar
03:27 - with is the runnable interface you use
03:29 - the runnable interface especially when
03:31 - you want to create a multi-threaded
03:33 - program by the way click up here if
03:34 - you'd like a great video on how to use
03:36 - runnable to create a multi-threaded java
03:38 - program but usually when you want to use
03:39 - a runnable to create a multi-threaded
03:41 - java program you have to create a whole
03:42 - separate class file that implements the
03:44 - runnable interface and then you can
03:45 - finally create an object of that type
03:47 - and get your new thread running instead
03:48 - you can use an anonymous inner class to
03:50 - make it so much easier
03:52 - to do that we can say runable like my
03:55 - anonymous runnable equals new
03:58 - runnable now of course java is giving us
04:00 - an error here because we can't
04:01 - instantiate
04:02 - an interface runnable is an interface
04:04 - it's not a class so what we need to do
04:06 - is create an anonymous inner class here
04:08 - that implements the runnable interface
04:10 - so we'll do the same thing we did above
04:12 - and put in our open and closed curly
04:14 - braces now java knows that we're trying
04:15 - to create an anonymous inner class
04:17 - that implements the runnable interface
04:19 - and it suggests to us here that we need
04:20 - to add the unimplemented run method
04:22 - to properly implement that runnable
04:24 - interface so let's click it
04:26 - and do it when you implement the
04:27 - runnable interface you have to add your
04:28 - own implementation of the run method so
04:30 - that's all we have to do here so we can
04:32 - do whatever we want we can just have it
04:33 - print out prime and anonymous
04:37 - runnable it's good practice to have this
04:39 - at override when you're either
04:40 - implementing an interface method or
04:42 - you're overriding a parent classes
04:44 - method so we should probably also go
04:45 - back and add
04:46 - this at override annotation to our make
04:48 - noise method because we're overriding
04:50 - the animal classes method here but back
04:51 - to our runnable it might look like here
04:53 - that we're creating a new object of a
04:55 - type
04:56 - runnable but we're not remember you
04:58 - can't create an object from an interface
04:59 - you can only create it from a class
05:01 - so even though it looks like we're
05:02 - creating an object of a type runnable
05:04 - we're really creating an object of a
05:06 - class type that doesn't have a name
05:08 - that we're creating here and that's the
05:09 - same up here bigfoot isn't technically
05:11 - an animal object it doesn't have the
05:13 - type animal its type
05:15 - is this anonymous subclass of animal
05:17 - that doesn't have a name but now we can
05:19 - take this my anonymous runnable object
05:21 - and call run on it if we want run that
05:23 - and we get our yap yap yap from our
05:25 - animal our
05:26 - from bigfoot and i'm an anonymous
05:28 - runable from our
05:30 - anonymous runable object and again check
05:32 - out that multithreading video if you
05:33 - want to be able to use
05:35 - your anonymous runnable objects to
05:36 - create a multi-threaded
05:38 - java program so an anonymous inner class
05:40 - can be really useful if you want to
05:41 - create
05:42 - a subclass of some other class and you
05:43 - only ever need one object of the
05:45 - subclass that you're creating like we
05:46 - wanted to create bigfoot as a new type
05:48 - of animal that makes noise in a
05:50 - different way but we'll only ever need
05:52 - one bigfoot or if you need a single
05:53 - object that implements an interface and
05:55 - you don't have to go and create a whole
05:57 - other class file to create the class
05:58 - that implements the interface you can
06:00 - just do it right here
06:01 - in one single statement and get the
06:02 - object that you need if you like this
06:04 - video or learned something please let me
06:05 - know by leaving a like and if you'd like
06:06 - to do me a huge favor you can do the
06:08 - youtube trifecta of leaving a like
06:10 - leaving a comment and of course hitting
06:11 - the subscribe button you guys are doing
06:13 - all of that really does help the channel
06:14 - and get these videos out to help more
06:15 - people so i really do appreciate it
06:17 - alright thanks for watching i'll see you
06:18 - next time
06:25 - can't believe i just did that