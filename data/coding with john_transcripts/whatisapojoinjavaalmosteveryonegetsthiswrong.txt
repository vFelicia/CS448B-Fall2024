00:00 - what exactly is a pojo in java i've seen
00:02 - a lot of other youtube videos that
00:04 - claim to explain what a pojo is that are
00:06 - just wrong
00:07 - pojo sounds weird sounds fancy sounds
00:09 - complicated and it is absolutely
00:11 - none of those things you're gonna know
00:13 - exactly what it is and why there's some
00:14 - confusion around it by the end of this
00:16 - video
00:16 - my name's john and i put up a new java
00:18 - tutorial video every week so hit the
00:20 - subscribe button so you don't miss each
00:21 - week's video i also have a full java
00:22 - course available in the link down in the
00:24 - description if you're interested
00:25 - what is a pojo well you probably know
00:27 - that pojo just stands for
00:29 - plain old java object but what exactly
00:31 - does that mean
00:32 - what makes a class or an object a plain
00:34 - old java object
00:36 - here's exactly what it is a pojo is
00:37 - categorized not so much by what it has
00:39 - to have to be a pojo but what it has to
00:42 - not have there's three basic things
00:44 - it has to not extend any other class so
00:46 - it can't be a child class of another
00:48 - class
00:48 - it can't implement any interfaces and it
00:51 - can't use any fancy outside annotations
00:53 - what those three restrictions amount to
00:54 - it's just a simple class with no extra
00:57 - stuff that can be used by itself you
01:00 - don't need any outside libraries or
01:01 - other classes
01:02 - to use it and that's pretty much all the
01:04 - rules everything that you may have seen
01:05 - about needing
01:06 - like a public no args constructor and
01:08 - getters and setters those are all about
01:10 - something else that we're going to talk
01:11 - about later in this video but that's not
01:13 - the definition of a pojo so for example
01:15 - let's take a look at this
01:16 - cat class this cat class is dead simple
01:19 - public class
01:19 - cat and we have two properties int age
01:22 - and string name
01:24 - this is an example of a pojo it doesn't
01:26 - extend from another class it doesn't
01:27 - implement any interfaces and it doesn't
01:29 - have any fancy outside
01:30 - annotations so this class meets the
01:32 - definition of a pojo
01:33 - now if instead this cat extended
01:36 - an animal class then this would no
01:38 - longer fit the definition of
01:39 - a pojo because now i need this outside
01:42 - animal class in order to use it
01:43 - same thing goes for if it implemented an
01:45 - interface like um
01:47 - makes noise this doesn't fit the
01:49 - definition of a pojo either because i
01:50 - need this outside makes noise interface
01:52 - for it to work
01:53 - and as for the annotations part that's a
01:55 - little bit more complicated but for
01:56 - example there's this annotation called
01:58 - at
01:58 - entity and that's a special hibernate
02:00 - annotation which you need hibernate in
02:02 - order to use
02:02 - so if you had this entity annotation in
02:04 - your class it would no longer be
02:06 - a pojo now the term pojo actually came
02:08 - from this guy named martin
02:10 - fowler who was a programmer who wrote
02:12 - tons of books on software engineering he
02:13 - came up with the term pojo for one of
02:15 - his talks
02:15 - and he said we wondered why people were
02:17 - so against using regular objects in
02:19 - their systems
02:19 - and concluded that it was because simple
02:21 - objects lacked a fancy name
02:23 - so we gave them one and it's caught on
02:25 - very nicely basically people thought
02:26 - they were too cool to use regular
02:28 - objects in their programs so this guy
02:29 - came up with the name pojo in 2000 and
02:31 - everybody's been using it since now
02:33 - here's where i think a lot of people get
02:34 - mixed up they confuse a pojo with a
02:37 - java bean a pojo as we discussed is
02:39 - basically any class that can be used on
02:42 - its own but a java bean has some
02:44 - additional requirements it has to have a
02:46 - public no
02:47 - args constructor all of its properties
02:49 - or instance variables
02:50 - have to be private it has to have public
02:52 - getters and setters as needed
02:54 - and it has to be serializable i've seen
02:56 - a lot of people talk about needing a
02:58 - private new args constructor and getters
03:00 - and setters to be a pojo but that's not
03:02 - at all true it doesn't need that to be a
03:03 - pojo
03:04 - it does need those things to be a java
03:06 - bean for example this cat class here as
03:08 - we know is a pojo but it's not a java
03:10 - bean for a few reasons
03:11 - it does have the public no argus
03:13 - constructor even though it's not
03:14 - explicitly written here java will give
03:16 - it one by default
03:17 - but its instance variables its
03:19 - properties here age and name
03:20 - are not private and there's no getters
03:22 - and setters for them and this class is
03:24 - not serializable so even though it's a
03:26 - pojo it isn't a java bean for example
03:28 - here let's turn this cat
03:29 - pojo into a java bean so we already have
03:32 - the public no args constructed so how
03:33 - can we show that we already have a no
03:35 - args constructor available what exactly
03:37 - is it well we can go back to our main
03:39 - method you probably know that when you
03:40 - create an object you use the class name
03:42 - cat so we'll call it my cat equals new
03:45 - cat
03:46 - and do an open close parenthesis that's
03:48 - it that's a no args constructor
03:50 - it's just a certain kind of constructor
03:51 - that takes no parameters so whenever you
03:54 - say new whatever and you send no
03:55 - parameters that's you using a no args
03:58 - constructor
03:58 - and we didn't have to write that
04:00 - constructor ourselves in our cat class
04:01 - java gave it to us for free but right
04:03 - now our instance variables are not
04:05 - private and we need to make them
04:06 - private so private int age and private
04:10 - string name the next thing we need to be
04:11 - a java bean is to have getters and
04:13 - setters for these
04:14 - properties so we can just go ahead and
04:15 - use eclipse to create those for us we
04:17 - can just right click here
04:18 - go down to source and then generate
04:20 - getters and setters
04:21 - we can just check the getters and
04:23 - setters that we want and click generate
04:25 - and that's all we got to do eclipse has
04:26 - generated our getters and setters
04:28 - automatically now the last thing we need
04:30 - to be a java bean is for this class to
04:32 - be
04:32 - serializable to be serializable all we
04:34 - have to do
04:35 - is implement the serializable interface
04:39 - as a quick note in case you don't know
04:40 - what serializable means it's basically
04:42 - just a label for java that tells java
04:44 - that this class can be written to things
04:45 - like databases and files
04:47 - so now our pojo has become a java bean
04:49 - you'll hear a ton of people talk about
04:51 - pojos when they really mean java beans
04:53 - it's not a huge deal sometimes i even
04:54 - catch myself doing it but you can be
04:56 - happy that you now know the difference
04:58 - if you learned something in this video
04:59 - let me know with a like and be sure to
05:00 - hit the subscribe button so you don't
05:01 - miss each week's video thanks for
05:03 - watching i'll see you next time