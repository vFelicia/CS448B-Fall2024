00:00 - in this video we're going to talk all
00:01 - about upcasting and downcasting in java
00:03 - we'll go over what they are how to use
00:05 - them and how to avoid some problems you
00:07 - might run into when implementing them
00:09 - into your code my name is john i'm a
00:10 - lead java software engineer and i love
00:12 - sharing what i've learned in a clear
00:13 - understandable way so of course if you
00:15 - like this video don't forget to
00:16 - subscribe so you don't miss each new
00:17 - java tutorial i also have a full java
00:19 - course available in a link down in the
00:20 - description if you're interested so
00:22 - first of all what exactly do we mean by
00:24 - upcasting and downcasting upcasting is
00:26 - when you take an object and cast it to
00:28 - its superclass type it's parent type and
00:30 - downcasting is when you take an object
00:32 - and cast it to one of its subtypes a
00:34 - child class let's talk about it with a
00:36 - concrete example so we have this animal
00:38 - class here all it has is one field a
00:41 - string name and one method make noise
00:43 - and here we have another class called
00:45 - dog that extends the animal class it's a
00:48 - sub class of animal it overrides the
00:50 - animal classes make noise method with
00:52 - its own implementation that prints out
00:54 - wolf wolf because it's a dog and it also
00:56 - has one extra method that the animal
00:57 - class doesn't have called growl so with
01:00 - these two classes upcasting would be
01:02 - taking a dog object and casting it as an
01:05 - animal type and down casting would be
01:07 - taking an animal object and casting it
01:10 - to a dog so let's start with up casting
01:12 - taking a dog object and casting it to an
01:14 - animal here's a simple example of how
01:16 - you could do that you can say animal
01:18 - my animal equals new dog if the whole
01:22 - concept of upcasting is new to you this
01:24 - might look a little weird you're
01:25 - probably used to seeing the same class
01:26 - name here as here right so here we're
01:29 - creating a new dog object but casting it
01:31 - to be an animal but you can see there's
01:33 - no real special extra code or anything
01:35 - needed to upcast an object java does all
01:38 - upcasting implicitly without you having
01:40 - to do anything since dog is a subclass
01:43 - of animal that means every dog is an
01:46 - animal so that means java has no problem
01:48 - at all with you doing this and you don't
01:50 - even need any extra casting code like
01:52 - putting animal here in parentheses to
01:54 - cast this you can add this in if you
01:55 - want but you don't need to java will
01:57 - automatically do the upcasting of dog to
02:00 - animal upcasting always works there are
02:02 - never any errors when you try to upcast
02:04 - an object and it always happens
02:06 - automatically without any special added
02:08 - code basically java always allows you to
02:10 - treat an object of a subclass type as an
02:13 - object of its parent type now when you
02:15 - do this the my animal variable here has
02:17 - the type of animal that's called the
02:20 - reference type so you can do anything
02:21 - with this myanimal variable that you
02:23 - could with any other animal variable but
02:25 - since it's treated as an animal variable
02:27 - you can't do things with this variable
02:29 - that only apply to dogs so remember over
02:32 - in our dog class we have this growl
02:34 - method that's only in our dog class and
02:36 - doesn't exist for an animal it only
02:38 - exists for dogs so since over here we
02:40 - actually have an animal object if we try
02:42 - to call my animal dot growl we can see
02:46 - that it doesn't exist we get an error
02:48 - the method growl is undefined for the
02:50 - type animal so even though underneath
02:52 - it's actually a dog object because the
02:54 - my animal variable's reference type is
02:56 - animal we don't have any access to any
02:58 - of the specific dog methods or
03:01 - attributes we only have what's available
03:03 - in animal so then you may be thinking
03:04 - well why do we need up casting in java
03:06 - what does it do for us well let me show
03:08 - you an example let's say we had a method
03:10 - like public static void do animal stuff
03:14 - that takes in a parameter animal we'll
03:17 - just call it animal and in this method
03:19 - we can call animal dot make noise we
03:21 - don't need this broken growl call
03:23 - anymore this method takes an animal
03:25 - right but when you call this method you
03:27 - can send an animal object but you can
03:29 - also send any object that's a subtype of
03:32 - animal it can be a dog a cat a cheetah a
03:34 - camel whatever this method doesn't know
03:36 - and doesn't really care or need to know
03:39 - what type of animal it's being called
03:41 - with it just needs to be an animal and
03:43 - any object that's a subtype of animal is
03:46 - an animal so we can call do animal stuff
03:49 - and pass in our my animal so let's run
03:51 - our program and see what we get and it
03:53 - prints out woof woof and that's because
03:56 - the my animal object that was being
03:57 - passed in was actually a dog and when a
04:01 - dog object makes noise it prints out
04:04 - woof woof in this case the upcasting was
04:06 - done right here when we initialized our
04:08 - animal variable to be a new dog it up
04:11 - casted dog to animal but even if we
04:13 - change this to be a dog and called it my
04:16 - dog and then pass that into our method
04:19 - you can see we still don't have any
04:21 - errors at all because this method is
04:22 - calling for an animal still any subclass
04:25 - of animal is totally valid to call this
04:27 - method with but now the implicit
04:29 - upcasting of dog to animal is happening
04:32 - when this method is being called you
04:33 - don't have to cast this object to an
04:35 - animal before calling this method
04:37 - remember in our animal class each animal
04:39 - has the ability to make noise and each
04:42 - subclass can override this method with
04:44 - their own make noise implementation if
04:46 - they want but what's neat is with that
04:47 - combination of upcasting and method
04:49 - overriding when this method takes its
04:51 - animal object and calls the make noise
04:53 - method on it it will make the correct
04:55 - noise for whichever animal object was
04:57 - passed in dog objects will say woof woof
04:59 - like we already saw and if we change
05:01 - this to be a cat instead of a dog and
05:04 - then pass in my cat we can see that it
05:07 - says meow so without upcasting you would
05:09 - have to take each and every class that
05:12 - you wanted to create a do animal stuff
05:15 - method for and make a separate do animal
05:17 - stuff method for each of them you'd have
05:19 - a separate method for cats dogs hamsters
05:22 - wombats and if later you added a new
05:24 - subclass of animal like a horse you'd
05:26 - have to add a whole new do animal stuff
05:28 - method for them with upcasting you can
05:30 - make one method that operates on any
05:32 - type of animal at all even animals that
05:34 - haven't been created yet one limitation
05:36 - of this though is because this method
05:38 - doesn't know which subtype of animal
05:41 - it's working with you can't use any of
05:43 - the methods that are only in those
05:45 - subclasses so if we change all this back
05:47 - to dog and then call a method with my
05:50 - dog remember we have a method in our dog
05:52 - class called growl that doesn't exist in
05:55 - the animal class so even though we're
05:56 - passing in a dog object to this do
05:58 - animal stuff method we can't call
06:01 - animal.growl so the type of the variable
06:04 - determines which methods you can call
06:06 - but the specific type of the object that
06:08 - this variable is referring to determines
06:11 - which specific implementation of that
06:13 - method will be used when the method is
06:15 - called that's why when this make noise
06:16 - method is called on a dog it says woof
06:18 - and when it's called on a cat it says
06:19 - meow now on to down casting remember up
06:22 - casting always works and always happens
06:24 - automatically all dogs cats and beavers
06:27 - are animals so java has no problem
06:29 - treating any of those as animals but
06:31 - downcasting is different it doesn't
06:33 - happen automatically so you have to do
06:35 - it explicitly and it can throw
06:36 - exceptions if you don't put in the right
06:38 - checks so you have to know what you're
06:40 - doing so first how do you do a downcast
06:42 - let's say we wanted to take our animal
06:45 - object here in this method and downcast
06:47 - it to be a dog how do we do that well
06:49 - all we have to do is say dog my dog
06:52 - equals in parentheses dog animal
06:56 - basically what's happening here is we're
06:57 - telling java hey i know all we have here
07:00 - is an animal variable but trust me i
07:02 - know that this animal is a dog so please
07:05 - cast it as a dog so i can treat it as
07:08 - one and jabba just trusts that you know
07:10 - what you're doing and says okay all
07:11 - right i'll give it a try so now since we
07:14 - have cast this animal to a dog we can
07:17 - treat this my dog variable just as we
07:20 - would any other dog variable so now we
07:22 - can call my dog.growl and if we are
07:24 - actually passing a dog object to our
07:27 - method it works great our dog is making
07:30 - noise with a woof woof and growling with
07:32 - a gur well that worked out great right
07:34 - no problems at all well right there's no
07:35 - problems if we actually are passing in a
07:38 - dog object but what if we aren't what if
07:40 - we instead pass in a cat change all this
07:43 - stuff to cat
07:44 - run our program and see what happens and
07:46 - well our program died and threw a class
07:49 - cast exception and we can see a line
07:51 - where it happened here line 15 we can
07:53 - click on it and it happened here when we
07:55 - were trying to cast this animal as a dog
07:58 - basically what happened here is we told
07:59 - java hey i know we could be taking any
08:02 - type of animal here but trust me this
08:04 - animal is a dog come on would i ever lie
08:06 - to you just go ahead and cast this
08:08 - animal as a dog so we can get growling
08:10 - and java says all right if you know it's
08:11 - always going to be a dog i'll trust you
08:13 - and go ahead and cast this as a dog but
08:15 - then we betrayed that trust and we sent
08:18 - in a cat so when you do that and java
08:20 - tries to cast it to a different object
08:22 - than it really is that's when you get a
08:25 - class cast exception so how can you
08:27 - avoid this what if you still want to be
08:28 - able to take in any type of animal so
08:30 - you can make noise with whatever type of
08:32 - animal is sent in but also if this
08:34 - animal happens to be a dog you want to
08:36 - be able to cast it as a dog so you can
08:38 - growl but you also don't want it to
08:39 - explode if it's not a dog so what do you
08:42 - do what you can do is add a special kind
08:43 - of check to see if this animal object
08:45 - that's being passed in actually is a dog
08:48 - it's pretty simple you can do it like
08:50 - this if animal
08:52 - instance of all one word all lowercase
08:55 - dog open and close your curly braces
08:57 - like any other if statement and then put
08:59 - all of this code involved with casting
09:01 - it as a dog and using it as a dog inside
09:03 - this if block so this instance of check
09:06 - will return true if this animal object
09:08 - that was passed in is actually a dog and
09:11 - false if it's anything else like a cat a
09:13 - lemur or whatever once we know that this
09:15 - animal object actually is a dog we can
09:18 - safely cast it as a dog and we can call
09:21 - our growl method safely and if we pass
09:23 - any other type of animal this instance
09:25 - of check returns false and we skip this
09:27 - whole code block and we avoid having a
09:29 - class cast exception so let's give it a
09:31 - test we're still passing in a cat last
09:33 - time it blew up with that exception so
09:35 - what happens now well all it's doing is
09:37 - saying meow because this make noise
09:38 - method is still being called a cat makes
09:40 - noise by saying meow so that works and
09:42 - since it's not a dog it skips this whole
09:44 - code block and if we change all this
09:45 - stuff back to dog it says yep you
09:48 - actually did pass in a dog so it casts
09:50 - this animal to be a dog and growls so to
09:53 - safely downcast you should always use
09:56 - this instance of check if not you risk
09:58 - getting a classcast exception if the
10:00 - object that you're working with turns
10:01 - out to be a different type than you
10:03 - thought if you enjoyed this video or
10:04 - learned something please let me know by
10:05 - hitting the like button and of course if
10:07 - you really want to support the channel
10:08 - you can do the whole youtube trifecta of
10:10 - leaving a like a comment and hitting the
10:11 - subscribe button so you don't miss each
10:13 - new video i really appreciate those of
10:14 - you who take the time to do that it's
10:16 - the only way these videos get out to
10:17 - help more people so it really means a
10:19 - lot thanks for watching and i'll see you
10:20 - next time