00:00 - in this video we'll walk through exactly
00:01 - how to use the debug tools in your ide
00:04 - to quickly and easily debug your java
00:06 - programs if you're anything like me when
00:08 - you started programming you just put
00:10 - print statements everywhere to try and
00:11 - figure out what was going on but you
00:13 - don't have to do that using the built-in
00:15 - debug tools in your ide makes debugging
00:17 - way faster and easier it's a lot easier
00:19 - to use than you may think and we'll walk
00:21 - through it all in detail my name is john
00:23 - i'm a lead java software engineer and i
00:24 - love sharing what i've learned with you
00:26 - in a clear and understandable way i also
00:28 - have a full job of course available and
00:29 - a link down in the description if you're
00:31 - interested first what exactly do the
00:32 - debug tools in your ide actually do for
00:35 - you well they actually allow you to walk
00:38 - through a live running program step by
00:40 - step line by line and see exactly what
00:43 - is going on every step of the way so
00:45 - literally at any individual line you
00:47 - want you can see exactly what all the
00:49 - variable values are and exactly what's
00:51 - going on your ide gives you really
00:53 - powerful tools for being able to do that
00:55 - and you just need to know the basics of
00:57 - how to use them in this example we're
00:59 - going to be using eclipse but it works
01:01 - in a very similar way with other ides
01:03 - like intellij the buttons and shortcuts
01:06 - might be a little bit different and they
01:07 - might be in a different place but all
01:09 - the basics are the same what a lot of
01:11 - people do when they first try to use the
01:12 - debug tools is they they see over here
01:14 - in the ide like you know right next to
01:16 - the run button is this debug button and
01:18 - they go great i've heard a lot about
01:20 - being able to debug your code in the ide
01:22 - so this must be the command to do that
01:24 - and then go ahead and click it
01:26 - and it doesn't do anything different it
01:28 - just runs their program like it did
01:30 - before you don't understand it and you
01:32 - kind of give up on it so what exactly is
01:34 - happening there why didn't we see
01:35 - anything different when we ran it in
01:37 - debug mode versus just running it
01:39 - normally well the issue is we didn't
01:41 - have any break points in our code so
01:44 - what is a break point well a break point
01:46 - is a spot that you mark in your code so
01:49 - that when you run your program and it
01:51 - gets to that spot in the code it'll
01:53 - pause the execution right there so you
01:55 - can see the state of everything at that
01:57 - spot in the code so let's do an example
01:59 - here so let's say you wanted to put a
02:01 - break point here at line six the easiest
02:04 - way and the way that i tend to use the
02:06 - most is to just double click on this
02:09 - spot right here between the line numbers
02:11 - and the left margin of eclipse if you
02:13 - double click right there you'll see this
02:15 - dot appear that means we've created a
02:17 - break point at this line in the code so
02:19 - let's go ahead and click this debug
02:21 - button to run our program in debug mode
02:23 - and see what happens the first thing you
02:25 - might notice is that the entire view
02:27 - changed when we ran the program in debug
02:29 - mode and hit a breakpoint eclipse
02:31 - automatically changes our perspective to
02:34 - the debug perspective the current
02:35 - perspective that you have selected is up
02:37 - here in the corner so right now we're in
02:39 - the debug perspective normally when you
02:41 - do a basic coding you're going to be in
02:43 - the java perspective you can also see
02:46 - right here in the editor it highlighted
02:48 - line 6 to let us know that that's where
02:50 - it's currently pausing the execution of
02:52 - the program one of the views that it
02:54 - makes available to you in the debug
02:55 - perspective is this variables view the
02:58 - variables view will show you all the
03:00 - variables that are available at the
03:03 - scope of this line in your program so
03:05 - right now there are just two variables
03:07 - available one is this first int variable
03:10 - so that corresponds to the first int int
03:13 - variable that was created here on line
03:15 - five and in the right column here we can
03:16 - see its current value we can see that it
03:19 - has a value of 7. the only other
03:21 - variable available in this scope is the
03:23 - args variable that's passed into every
03:25 - main method in every java program ever
03:27 - this variables view is probably the most
03:30 - basic part of debugging but also the
03:32 - most useful being able to see the value
03:34 - of any variable in your program at any
03:37 - time is super powerful another part of
03:39 - the debug perspective is this debug view
03:42 - over here on the left it'll list out
03:44 - every active thread in the java program
03:46 - that's running we have a pretty simple
03:47 - program right now that only runs on one
03:49 - thread so we only see one thread entry
03:52 - here and this part shows exactly which
03:54 - class and method name and line that it's
03:57 - currently paused on one thing to note is
04:00 - that when it hits a break point and is
04:02 - stopped at a certain line it means that
04:04 - it hasn't executed that line yet so it
04:07 - has executed everything up to that which
04:09 - means it has already created this first
04:12 - end variable and assigned it the value
04:14 - seven here on line five so that's why
04:17 - over here in the variables section we do
04:19 - see the first end having been created
04:21 - and has the value seven but we don't see
04:23 - this second int variable yet so how do
04:26 - we tell eclipse to okay go ahead and
04:28 - execute this line of code and move down
04:31 - to the next one well you do that by
04:33 - using the step over command which is
04:35 - this button right here you can also just
04:37 - use f6 as a shortcut so i'm going to go
04:40 - ahead and click step over now and what
04:42 - that did is execute the line of code
04:44 - that we were on and proceed to the next
04:46 - one so now over here in the variables
04:48 - section we can see that it has created
04:50 - the second int variable and gave it the
04:52 - value of eight so now the execution has
04:54 - paused here on line eight and if we
04:57 - wanted to execute this line of code and
04:59 - proceed to line ten we can just click
05:00 - step over again so what that did is
05:03 - called this add method passing in the
05:05 - first and second end variables and then
05:07 - assigned the result to this sum variable
05:10 - here and we can see that that's exactly
05:11 - what it did we see the new sum variable
05:14 - added with the value of 15. so now we're
05:16 - ready to execute the last line of code
05:18 - in our program that will print out the
05:20 - result so let's go ahead and click that
05:21 - and it stopped here on the closing curly
05:24 - braces of our main method and if we
05:26 - click step over one more time because
05:28 - we've hit the end of our main method
05:30 - that means it's the end of our program
05:32 - let's go ahead and run our program in
05:34 - debug mode again and talk about some
05:36 - other ways that we can navigate through
05:38 - the active running program as we
05:39 - mentioned we can hit the step over
05:41 - button to execute the current line of
05:43 - code that we're on and proceed to the
05:44 - next one but the line that we're
05:46 - currently on line 8 has a method call in
05:49 - it and we know that if we hit step over
05:51 - it'll just execute this entire line of
05:53 - code and then proceed to line 10. but
05:56 - what if we wanted to step inside the
05:58 - execution of this add method and walk
06:01 - through all of the code inside of it
06:03 - well to do that there's this other
06:04 - button here called step into with f5 as
06:08 - a shortcut so if the line of code that
06:10 - you're on has a method call in it you
06:12 - can click step into to step inside the
06:16 - first line of the method being called
06:18 - now that we've done that you might
06:19 - notice that a couple of things have
06:21 - changed over here in the variables view
06:23 - we now have different variables
06:25 - available and that's because we only see
06:27 - the variables that are available inside
06:29 - the scope of the line that we're
06:31 - currently stopped at so in here we only
06:34 - have two variables available to us and
06:36 - that is int 1 and into the first int and
06:39 - second into variables that are inside
06:41 - the main method aren't available inside
06:44 - the scope of this add method another
06:46 - thing to note is that over here in the
06:47 - debug section we now have kind of two
06:50 - entries here the reason there are
06:52 - multiple entries in here now is because
06:54 - we are now one method call deeper in the
06:57 - execution of our code so when you're
06:59 - debugging and you jump inside a method
07:01 - call that next level of method call is
07:04 - added to the stack here and so we can
07:06 - see that we're stopped here at the add
07:08 - method on line 15. but right underneath
07:11 - that we can see that the call to that
07:13 - add method happened right here in the
07:15 - main method on line eight and so if we
07:18 - actually click that entry we can kind of
07:20 - hop back to what is happening inside the
07:23 - scope of that particular spot in that
07:26 - method when we're inside a method like
07:28 - this we can use the step over and step
07:31 - into buttons just like we did before but
07:33 - there's also another command available
07:35 - to us called step return so you might
07:38 - use step return in a situation where
07:40 - you've hit a spot inside a method and
07:43 - you just want to have it execute the
07:44 - rest of the method and return to where
07:47 - it was called from and that's exactly
07:48 - what the step return command will do so
07:51 - if we go ahead and click step return it
07:54 - completes execution of that method that
07:56 - we're in the add method and returns back
07:59 - to the spot where that method was called
08:01 - from if at any point while you're
08:02 - debugging your program if you just want
08:04 - to stop you can just click this
08:06 - terminate button and it will just stop
08:08 - your program right then and there so of
08:10 - course you're not limited to just one
08:12 - break point you can add as many as you
08:14 - like so let's say we wanted to add
08:16 - another breakpoint here at line 10. you
08:18 - can go ahead and double-click the margin
08:20 - right there again to add another
08:21 - breakpoint there are other ways to add
08:23 - breakpoints too so you can right click
08:25 - align and click the toggle breakpoint
08:28 - command and that will add a break point
08:30 - you can also just hit ctrl shift b and
08:32 - that will toggle the break point on
08:34 - whichever current line you're on in
08:36 - addition to being able to step over and
08:38 - step into there's also this resume
08:41 - command so what this resume command will
08:43 - do is continue the execution of your
08:45 - program until it hits another breakpoint
08:48 - so because we have another breakpoint
08:50 - here at line 10 if we go ahead and hit
08:52 - resume it will execute everything right
08:55 - up until line 10 in our code so now if
08:57 - we hit resume again because we don't
09:00 - have any other break points in the rest
09:01 - of our code it just executes the whole
09:03 - rest of the program all the way to the
09:05 - end another thing to note let's go ahead
09:06 - and run our program in debug mode again
09:09 - let's add a break point right here in
09:11 - our add method here on line 15. because
09:14 - we have a breakpoint within this add
09:16 - method right now if we hit the resume
09:18 - button because the add method is called
09:21 - here on line 8 the execution of the
09:23 - program will hit our breakpoint at line
09:25 - 15 and stop there in addition to being
09:28 - able to just observe variable values at
09:31 - any given point in the code the debug
09:33 - tools even allow you to change those
09:36 - variable values arbitrarily at any time
09:39 - you want let's say for example we wanted
09:41 - to just test out what would happen if
09:42 - this first end had a value of 11 but we
09:45 - didn't want to change our code to do
09:48 - that well what you can do is if you're
09:49 - stopped in the debugger at some point in
09:51 - your code you can go into the variables
09:54 - view here and click on the value and
09:56 - edit it to whatever you want so we can
09:58 - change it to 11 right here hit enter and
10:01 - now this first int variable has a value
10:04 - of 11. so far we've just worked with
10:06 - some basic primitive int variables so
10:09 - let's look at how this works when we use
10:11 - some more complex objects now get rid of
10:13 - this method and replace all this with
10:16 - some code that deals with creating cats
10:19 - so let's put a break point right here on
10:21 - the very first line of our code and
10:23 - again run it in debug mode so this line
10:26 - here is going to create a new cat object
10:29 - and pass it the name cramer in the
10:31 - constructor call so the same way as
10:33 - before we can click the step over button
10:35 - to execute that line of code and we can
10:37 - see over here in the variables view we
10:40 - now have a new cat1 variable but what's
10:43 - cool is we can also click this little
10:45 - arrow here and expand that object and
10:48 - see the values of all of its individual
10:51 - fields so we can even see here that it
10:53 - has a name field and its name is kramer
10:56 - and as a quick note we can change the
10:58 - value of these variables here just as
11:00 - easily as we did for the other int
11:02 - variables so i can just click this name
11:05 - cramer here and change it to a jerry you
11:08 - can also change these variables by right
11:09 - clicking and going to change value and
11:12 - then enter whatever value you want and
11:14 - hit okay this next line will set the
11:17 - litter preference on that cat object to
11:19 - tidy cats so right now it is null and if
11:21 - we go over here and step over that line
11:23 - of code to execute it we can see it
11:25 - getting updated to tidycats live right
11:28 - there and stepping over again will set
11:30 - its age to three another kind of cool
11:33 - thing is that over here in the variables
11:35 - section if you execute a line of code
11:37 - and it changes a variable value that
11:40 - variable will be highlighted here in
11:42 - this section so because this last line
11:44 - set its age to 3 we now see this age
11:47 - variable being highlighted in yellow
11:48 - over here in the variables section and
11:50 - the same thing will happen for this cat
11:52 - 2 when we create it so right now it
11:54 - hasn't executed this line of code yet so
11:56 - cat 2 doesn't show up over here in the
11:57 - variables section and if we hit step
11:59 - over we see it being created and it has
12:02 - the name of george so let's go ahead and
12:04 - click the step over button until we get
12:06 - down here to where we are creating an
12:09 - array of these cats so line 16 here will
12:12 - create a new cat array variable called
12:15 - cats so we can step over that and we can
12:16 - see that cat array being created right
12:18 - here but what's neat about that is we
12:20 - can expand this cat's array and see the
12:24 - contents of each index of that array
12:27 - right here right now because we haven't
12:29 - set those indexes of our array to
12:31 - anything they're both null but right
12:33 - here at line 18 we're setting the zeroth
12:36 - position in our cat's array to be cat
12:38 - one so if we step over that the object
12:41 - at the zeroth position in our cats array
12:44 - is this cat variable and we can even
12:46 - expand that right there the same way we
12:48 - did up here and see its current age and
12:51 - litter preference and name of jerry one
12:54 - important thing to note here is you may
12:56 - have noticed these little ids here next
12:59 - to every variable in the variables view
13:01 - this id is auto-generated by eclipse the
13:03 - reason that's useful is because if two
13:05 - variables over here share the exact same
13:08 - id number you can know that those
13:10 - variables represent the exact same
13:13 - objects for example because we set the
13:16 - cat at index 0 to b cat 1 we can see
13:20 - that the ids of those two things match
13:22 - so if we look at the object at index 0
13:25 - in our cats array we see that it has the
13:27 - id of 28 and that matches the id of cat
13:31 - 1 up here which is also 28. so we know
13:35 - that those two things represent exactly
13:37 - the same object in memory the same goes
13:40 - for cat 2 here so if we step over to
13:43 - execute this line of code the cat at
13:45 - index 1 on the array has an id of 40
13:48 - which matches the id of the cat2
13:51 - variable but there are even more really
13:53 - cool things that you can do with the
13:54 - debugger one of the other things you can
13:56 - do is over here in the expressions view
14:00 - the best way to explain this part is
14:01 - probably with an example so let's say i
14:03 - put a cat one dot get age and open and
14:07 - close parentheses so what this section
14:09 - actually does is keep track of what the
14:12 - value of this expression is that you put
14:14 - in
14:15 - at whatever spot in the code that you're
14:17 - currently paused on for example right
14:19 - now because cat 1 doesn't even exist yet
14:22 - before this line 5 gets executed right
14:25 - now we just get an error but if i go
14:27 - ahead and click the step over button to
14:29 - execute that line of code now it tells
14:31 - me that cat1.getage
14:33 - gives me a value of 0 which is right
14:36 - because 0 is the default value for ins
14:38 - but if we go ahead and click step over
14:41 - and then step over again to execute this
14:43 - line that sets that age to three we see
14:46 - that the value of that expression got
14:48 - updated to three of course the
14:50 - expressions that you put here don't need
14:51 - to be this simple so this might be silly
14:53 - but you can even do something like you
14:55 - know cat1.getage times 53 right now that
14:59 - has a value of 159. there could be a
15:02 - situation where you want to know what a
15:04 - certain expression or calculation
15:06 - evaluates to kind of throughout your
15:09 - code as you're proceeding through it and
15:11 - this expressions tool allows you to do
15:13 - that you can have as many expressions as
15:15 - you want and it'll show you the value of
15:17 - all of them at any point your code gets
15:19 - paused in addition to seeing the value
15:21 - of variables over here in the variables
15:24 - view you can also just hover over that
15:27 - variable here in the editor and you can
15:29 - see all the details about that variable
15:31 - and click through them right here you
15:33 - can also highlight any variable and then
15:35 - right click it and go to inspect but
15:38 - that inspect functionality isn't just
15:40 - limited to individual variables you can
15:43 - do that with entire expressions let's
15:45 - continue a few steps down in our code
15:47 - here so now we've created this cat2
15:50 - variable and assigned it a litter
15:52 - preference so what we can do is
15:54 - highlight this entire expression
15:56 - cat2.get litter preference and you can
15:59 - right click that and hit inspect and
16:02 - that will show you what that whole
16:04 - expression evaluates to so right now of
16:06 - course since it's just a getter for
16:08 - litter preference it returns fresh step
16:10 - also as a shortcut if you don't want to
16:12 - right click and go to inspect you can
16:14 - always just hit ctrl shift i that's a
16:17 - shortcut that i probably use every day
16:18 - at my job when i'm debugging one really
16:20 - cool thing about this inspect
16:22 - functionality is you're not even limited
16:24 - to inspecting code that currently exists
16:28 - in your program for example if i wanted
16:30 - to i can come right up here to this spot
16:32 - in the code and write like cat1 dot get
16:36 - name and then i can highlight that
16:38 - expression and hit ctrl shift i to
16:40 - inspect it and it will still tell me the
16:43 - result of that expression to take it a
16:45 - step further you can even use this
16:47 - inspect functionality to change the
16:49 - current state of your program so instead
16:52 - of calling get name let's say this was
16:54 - set name and we set this cat's name to
16:57 - be elaine now let's go ahead and expand
17:00 - this cat1 variable so we can see that
17:02 - its name is currently kramer but now if
17:04 - i come back here and highlight this
17:06 - cat1.set name to elaine and hit ctrl
17:09 - shift i to inspect it it actually
17:12 - executes that line of code and we can
17:15 - see that that cat's name actually did
17:18 - get changed to elaine so this is really
17:20 - powerful functionality that allows you
17:22 - to change the state of your variables
17:24 - kind of any way that you want at any
17:26 - spot in your program another view we
17:28 - have available here in the debug
17:30 - perspective is this breakpoints view the
17:32 - breakpoints view just shows you every
17:34 - current breakpoint that you have in your
17:36 - code so right now we only have one
17:38 - breakpoint here but if we add another
17:40 - one say on line 10 that will show up
17:42 - here as well if we want to inside this
17:45 - view we can click this check box to
17:47 - temporarily disable any individual break
17:50 - point that we want so we can see when i
17:52 - uncheck this breakpoint at line 5 that
17:55 - break point turns from a blue into a
17:57 - white to indicate that it's currently
17:59 - disabled we can also enable or disable
18:02 - individual breakpoints here by
18:03 - right-clicking and going to enable
18:06 - breakpoint or disable breakpoint one
18:08 - thing to note here that i think may
18:10 - sound silly but i've seen trip up so
18:12 - many programmers in the past is this
18:14 - skip all breakpoints button so if you
18:17 - click this button it will temporarily
18:19 - disable all the break points in your
18:21 - entire program and the shortcut to do
18:23 - that is control alt b so what i've seen
18:26 - happen time and time again is people are
18:28 - trying to debug their code and they have
18:30 - break points in them but they see that
18:32 - when they run their program in debug
18:33 - mode it doesn't hit any of them and
18:34 - they're just ripping their hair out
18:36 - wondering what's going on and it's
18:37 - because they either hit this button or
18:39 - accidentally hit the shortcut to disable
18:42 - all the breakpoints now in eclipse it
18:44 - makes it a little bit obvious because it
18:45 - puts a line through the breakpoint but
18:47 - in other ides like intellij when you're
18:50 - skipping all the breakpoints it's not
18:52 - quite as obvious right there in the
18:53 - indicator here's another really cool
18:55 - thing that you can do with breakpoints
18:58 - so let's say in your code you had
19:00 - something like a simple for loop like
19:02 - this so this is just a simple for loop
19:04 - that starts with i equal to 0 and goes
19:07 - while i is less than 10 and increments i
19:09 - each time and then all it does is just
19:11 - print out the value of i each time
19:13 - through the loop so to debug a program
19:15 - like this you can go ahead and put a
19:17 - breakpoint right here inside the for
19:20 - loop and then when you run your program
19:22 - in debug mode when it enters that for
19:24 - loop for the first time it hits that
19:26 - debug point and shows you the value of
19:28 - every variable which for this one is
19:30 - basically just the i variable that
19:31 - starts with a value of zero but now each
19:34 - time you hit the resume button it of
19:36 - course goes into the next iteration of
19:39 - that loop and hits the exact same break
19:41 - point on line six just in the next
19:44 - iteration of the loop so now we can see
19:46 - that we've hit the break point again the
19:47 - same break point on the same line but
19:49 - now i has the value of one and that's
19:52 - fine right you can keep uh resuming your
19:54 - program and each time that you resume it
19:57 - goes back around to the beginning of the
19:58 - for loop so we can keep clicking through
20:00 - this and watch i get updated six seven
20:03 - eight but what if we had a situation
20:05 - where we want to debug our program but
20:07 - we only have a problem in our code when
20:10 - i is seven so right now you would have
20:12 - to run your program in debug mode and
20:14 - then keep clicking resume over and over
20:15 - again until i reaches the value seven
20:19 - and then you can inspect and see what's
20:20 - going on there that's not that big of a
20:22 - deal if your loop only goes through ten
20:24 - times but what if you did it hundreds or
20:26 - thousands of times you'd have to keep
20:28 - clicking resume for hundreds or
20:30 - thousands of times until you get to the
20:31 - exact iteration that's causing you
20:33 - problems so what you can do instead of
20:36 - doing that is use what is called a
20:38 - conditional break point so let's go
20:40 - ahead and stop our code and change this
20:42 - breakpoint into a conditional breakpoint
20:45 - and you do that by right-clicking your
20:46 - breakpoint and going down to breakpoint
20:49 - properties then down here in this
20:51 - section you can check the conditional
20:53 - checkbox then here in this section you
20:55 - have to enter some java code a java
20:57 - expression that evaluates to either true
21:00 - or false and then at each time your
21:02 - program hits the line with your
21:04 - conditional break point it will evaluate
21:06 - what that expression is at that time and
21:09 - if it's false it'll just skip hitting
21:11 - that break point but if it evaluates to
21:13 - true it'll stop at that break point like
21:15 - normal so in this situation we want it
21:17 - to hit our break point and stop when i
21:20 - has the value of seven so for our
21:22 - condition here we can just put i double
21:24 - equals seven and then we can hit apply
21:27 - and close now let's go ahead and run our
21:29 - program again in debug mode and see what
21:32 - happens so we can see that it didn't
21:34 - stop at every single iteration in our
21:36 - for loop it already printed out hello 0
21:38 - hello one all the way up to hello 6 but
21:42 - when i
21:43 - got the value of seven it did hit our
21:46 - break point and stop execution right
21:48 - there when a breakpoint is a conditional
21:50 - breakpoint you can see that the icon
21:52 - changes a little bit to have this
21:53 - question mark right next to the
21:55 - breakpoint symbol i really hope you
21:56 - enjoyed this video and learned something
21:58 - because you don't have to spend the
21:59 - whole rest of your programming life just
22:01 - putting individual print statements
22:03 - everywhere when you're trying to figure
22:05 - out what's causing some kind of bug in
22:07 - your code as always don't stop now keep
22:09 - that learning momentum going by watching
22:11 - one of the other videos below thank you
22:13 - so much for watching i really do
22:14 - appreciate you being here with me see
22:16 - you next time