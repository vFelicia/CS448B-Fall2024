00:00 - in this video we're going to talk all
00:01 - about the final keyword in java we'll go
00:03 - into detail about each of the three ways
00:05 - you can use final
00:06 - if you're new here my name is john and i
00:07 - do a new java tutorial video every
00:09 - single week so if you like this video be
00:11 - sure to leave a like and consider
00:12 - subscribing so you don't miss the new
00:13 - video every week i also have a full java
00:15 - course available in a link down in the
00:17 - description if you're interested let's
00:18 - get to it okay so we're going to talk
00:19 - about the three ways you can use the
00:21 - final keyword in java
00:22 - final classes final methods and final
00:26 - variables let's start with final classes
00:28 - what is a final class
00:30 - let's talk about it using an example so
00:31 - here i've got an animal class
00:33 - and i also have this other class called
00:35 - dog that
00:36 - extends animal it's a subclass a child
00:39 - class
00:39 - of the animal class this is an example
00:41 - of inheritance one of the basic
00:43 - concepts of object-oriented programming
00:45 - since this dog
00:46 - extends the animal class it's a subclass
00:48 - of animal it gets all of the properties
00:50 - and functionality of that animal class
00:52 - and then it can just build more things
00:53 - on top of it but here's where final
00:55 - comes in
00:56 - for classes so where you'll see final
00:58 - for a final class
00:59 - is right here at the top in the class
01:00 - declaration itself so right now i've got
01:02 - public class
01:03 - animal if you have a final class you'll
01:05 - see public
01:06 - final class animal so what happens when
01:09 - you make a class final what it does is
01:11 - prevents other class from being a
01:13 - subclass of this one nothing can extend
01:15 - from it or be a child class of it so now
01:17 - you can see if we hop over to our dog
01:19 - class that extends animal
01:21 - now you can see that eclipse is giving
01:22 - us this error and it says the type dog
01:24 - cannot subclass the final class
01:26 - animal so for classes you want to use
01:28 - this final keyword whenever you want
01:29 - your class to not be extended for
01:32 - whatever reason
01:33 - in practice when i've used final classes
01:35 - in my job
01:36 - it's usually because it just doesn't
01:37 - make any sense for the class to be
01:39 - extended for example
01:40 - if i have a class that just has a whole
01:41 - bunch of values and constants that are
01:43 - used by other classes
01:44 - but usually if you are making something
01:46 - like an animal class it's pretty obvious
01:48 - that you want it to be able to be
01:50 - subclassed and extended and have
01:51 - all different other types of animals
01:53 - that do different things so the majority
01:55 - of time for your basic classes
01:56 - unless you have a good reason to make it
01:57 - final it's probably best to just keep
01:59 - the final keyword
02:00 - off so that you or another programmer
02:02 - can go in and extend this class and have
02:04 - whatever other kind of functionality you
02:05 - need in a subclass
02:06 - number two the second use of final is to
02:09 - make final
02:10 - methods that might seem kind of weird
02:11 - when do you need to make a method final
02:13 - so here we have our animal class that
02:15 - has a couple of fields name and color
02:17 - and getters and setters for those fields
02:19 - but also has this method
02:20 - public void eat and all it does is just
02:22 - print out much munch much now remember
02:24 - my dog class
02:25 - extends that animal class and if you
02:28 - notice we don't
02:29 - implement an eat method here in this
02:31 - class however if i create a dog
02:33 - object i can still call the eat method
02:36 - on that dog
02:37 - even though the eat method doesn't
02:38 - actually exist directly in my dog
02:40 - class i can call it because it exists in
02:43 - the animal class
02:44 - that the dog extends the dog class gets
02:46 - that eat functionality for free because
02:48 - it extends
02:49 - animal and we can show that here in our
02:51 - main method we can create a
02:53 - dog my dog equals new dog
02:56 - and we can call my dog dot eat you can
02:59 - see that that method is available
03:01 - for us to call and if we save and run
03:03 - our code we see that it prints out munch
03:05 - munch munch
03:06 - but back over here in the dog class even
03:08 - though i don't have to implement
03:09 - my own version of the eat method if i
03:11 - don't want to i can get that
03:13 - functionality from the parent animal
03:14 - class
03:15 - i can if i want to override that parent
03:18 - class eat method
03:19 - and implement my own eat method with my
03:22 - own implementation
03:23 - specifically for the dog so here i can
03:25 - write public void
03:26 - eat and instead have it print out
03:29 - a nom nom so now if i save that
03:32 - and go back to my main method and run my
03:35 - program again
03:36 - when my dog eats now instead of going
03:38 - munch munch munch
03:39 - it says nam nom nom but here is where
03:41 - the final keyword for a method comes in
03:44 - if i go back to my animal class and
03:46 - change this eat method
03:48 - to public final void eat that makes it
03:51 - so all subclasses of the animal class
03:53 - like dog can no longer override this eat
03:56 - method
03:57 - with their own implementation so if i
03:59 - save this change and then hop back over
04:00 - to my dog class i can see that now i get
04:02 - an
04:03 - error that says cannot override the
04:05 - final method from animal
04:06 - so you might use this when you have some
04:08 - sort of method in your parent class
04:10 - and you want the functionality of that
04:11 - method to be exactly the same
04:13 - for all children of that class you don't
04:15 - want it to be able to be overridden
04:17 - with their own implementation so
04:18 - sometimes that can make sense if you
04:19 - have some certain method in your parent
04:21 - class that just
04:22 - has to do some certain thing in a very
04:24 - very specific way and you don't want all
04:25 - the child classes to go and mess things
04:27 - up with their own implementation
04:29 - you can use the final keyword in that
04:31 - method in your parent class to prevent
04:32 - the child classes from overriding it so
04:34 - we've talked about final classes
04:36 - final methods now let's talk about the
04:38 - third use of final
04:39 - final variables what is a final
04:42 - variable all a final variable is is a
04:45 - variable that you can only assign
04:47 - one time that's it let's use our mydog
04:51 - object here as an example so instead of
04:53 - just saying dogmydog you can say
04:55 - final dog my dog so what does that mean
04:58 - it means it can only be assigned
04:59 - one time so here we're already
05:01 - initializing this my dog object with
05:03 - new dog so if you didn't have this final
05:05 - keyword you could
05:06 - down here if you wanted to you can go
05:08 - ahead and say my dog
05:10 - equals new dog again and it would create
05:12 - this brand new dog object and assign it
05:14 - to
05:15 - my dog but if we make this my dog
05:18 - final then you can see we get an error
05:21 - down here
05:21 - the final local variable my mydog cannot
05:23 - be assigned because we're already
05:25 - assigning it once up here we can't
05:27 - assign it a second time
05:28 - down here so a final variable after it
05:31 - is assigned
05:31 - one time it can never be assigned again
05:34 - after that so in the example we have
05:36 - here we are initializing this variable
05:38 - on the same line we're declaring it but
05:39 - you don't necessarily have to do that
05:41 - even for a final variable
05:42 - you can get rid of that initialization
05:44 - here and instead move it down here my
05:46 - dog
05:46 - equals new dog and this is totally fine
05:49 - that you're instantiating this my dog on
05:51 - a separate line
05:52 - but now that it has been assigned one
05:54 - time it can never be assigned again
05:56 - after that so why might you use
05:58 - something like this there are many uses
06:00 - for final variables probably the main
06:02 - one that i see and use
06:04 - every single day in my job as a lead
06:05 - java engineer is to create
06:07 - constants let's say for example i need
06:10 - the value of pi
06:11 - for my program i need to know what pi is
06:12 - so i can do a whole bunch of math with
06:14 - it so what i might do is just create a
06:15 - double variable double
06:17 - pi double pi sounds pretty good and say
06:19 - that equals 3.14159
06:22 - and this is you know all fine i could
06:24 - take this pi variable and i could do
06:25 - whatever kind of math i need to do with
06:27 - pi and it would all work but of course
06:28 - the problem is that you in the future or
06:30 - some other programmer
06:31 - can come in here and just set pi to
06:34 - something else
06:34 - pi equals nine and that could just
06:36 - destroy the functionality of your entire
06:38 - program
06:39 - in order to avoid that we can do what we
06:40 - just learned we can make this
06:42 - a final double pi and now we see we get
06:45 - an error here
06:45 - we can't assign it twice so that solves
06:47 - that problem now this value of pi we
06:49 - know
06:49 - is guaranteed to never change but what
06:52 - if i want to use this value of pi
06:54 - not just here in my code but i want to
06:55 - use it in all kinds of places i don't
06:56 - just want to use it in one class now the
06:58 - main way that is done is to create a
07:00 - constant the normal format for a
07:02 - constant is it goes uh kind of right
07:04 - here in your file below the class
07:05 - declaration and it has to be outside of
07:07 - any method so it's usually right about
07:09 - here
07:09 - you'll say public static final
07:13 - and then whatever your normal variable
07:14 - declaration is double
07:16 - pi equals 3.14159 so now i no longer
07:20 - have to go and declare or instantiate
07:22 - this pi variable down here
07:23 - i can just use this pi constant down
07:25 - here to do whatever i need so if i
07:27 - wanted i could do system.out
07:29 - line pi times three i can run that and
07:32 - get nine point four two four seven blah
07:34 - blah blah
07:35 - i can even use it outside of this class
07:37 - itself for example i can hop over to my
07:39 - dog class
07:40 - and um if i want to use in the eat
07:42 - method i wanna use the value for pi
07:44 - i can go and access this public constant
07:47 - to use in my other classes
07:49 - so if i wanted to include printing out
07:51 - pi here
07:52 - in this eat method i could just say plus
07:54 - final example
07:55 - dot pi so even though this pi constant
07:58 - is in a complete other class i can
08:00 - access and use it here safely
08:02 - knowing that it can never be modified
08:03 - and messed up and when we run our
08:05 - program we can now see that we're
08:06 - printing out the value of pi
08:07 - along with that eat method another thing
08:09 - to note here though is that for
08:11 - constants whenever you have a public
08:12 - static final whatever variable here in
08:14 - your class
08:15 - the convention for naming them is a
08:17 - little bit different instead of having
08:18 - normal like
08:19 - camel case like we did here for my dog
08:21 - where you start with a lower case
08:23 - and then for the first letter of every
08:25 - word after that it's uppercase that's
08:27 - called camelcase that's what you
08:28 - normally use
08:29 - for java variables for constants the
08:31 - convention is different
08:33 - we actually use all caps and here we
08:35 - only have one word because it's just
08:37 - pi but if you happen to have multiple
08:38 - words you separate them with underscores
08:41 - like this pie more words so that's
08:44 - important to know that's the convention
08:45 - in java for constant names as a side
08:48 - note you may already know that a
08:49 - constant for pi
08:50 - is already available in a built-in java
08:53 - class
08:53 - and you can access it by just calling
08:55 - math.pi and as you can see
08:57 - it is named in uppercase because that is
08:59 - the java convention for constants
09:01 - and also if you happen to want to have a
09:03 - constant like pi here in your code but
09:05 - you don't want it to be able to be
09:07 - accessed in other classes you only want
09:09 - it
09:09 - accessible in the class you declared it
09:11 - all you have to do is instead
09:12 - make this private instead of public so
09:15 - now that this is private we can go over
09:17 - to our dog class and see where we're
09:18 - trying to use
09:19 - this pie constant it says it's not
09:22 - visible because it's private it's only
09:23 - visible to that class
09:25 - and not visible to this dog class let's
09:28 - go ahead and change this back
09:29 - to public so for variables you'll
09:31 - probably see the final keyword used most
09:33 - often
09:34 - to create constants like this at the top
09:36 - of uh class files
09:37 - but it is also good to remember that you
09:39 - can just use it in the middle of other
09:40 - code too if you enjoyed this video or
09:42 - learned something
09:43 - please let me know by leaving a like and
09:45 - you might be interested in some of the
09:46 - other java videos i put up
09:47 - and consider subscribing too so you
09:49 - don't miss each week's video and it also
09:50 - really helps get these videos out to
09:52 - help more people so i really do
09:53 - appreciate it thanks a lot for watching
09:54 - i'll see you next time