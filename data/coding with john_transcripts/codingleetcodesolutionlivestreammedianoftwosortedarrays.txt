00:03 - thank you
00:05 - okay
00:07 - if everything is working
00:09 - then
00:11 - I should be live
00:13 - um I've never done this before I feel
00:15 - like I'm a thousand years old
00:17 - uh yeah no I mean this is something I
00:20 - should have done
00:22 - I don't know the when I had like 10
00:24 - subscribers instead of now when I have
00:26 - almost a couple hundred thousand which
00:28 - is amazing you guys are awesome
00:30 - um but yeah that makes me absolutely
00:32 - terrified to do something like this
00:33 - because I never have ever eat every
00:35 - other video I've so far done has been
00:37 - obviously pre-recorded and
00:41 - um
00:42 - you know edited to to deliver exactly
00:46 - what I want to you without any of the
00:48 - little things that might go wrong when I
00:51 - do stuff like this so yeah absolutely
00:53 - terrified as what could go on and I've
00:55 - got uh yeah I'm not even positive this
00:58 - is working
01:00 - looks like there are people chatting so
01:03 - hey what happened to your nose so yeah
01:06 - um excellent question how did you notice
01:08 - uh so at the kind of what the reason
01:12 - it's been a while since the last video
01:13 - is uh so obviously there was Christmas
01:16 - and I'm I've been super busy with a wife
01:19 - and now two sons and it's just a mad
01:21 - house around here and I hardly have any
01:22 - time to make them in the first place but
01:24 - then in addition to that
01:26 - um just so right after the new year I
01:27 - just had uh surgery on my nose so I
01:30 - didn't get punched in the face or
01:31 - anything it certainly looks like it but
01:33 - so I had surgery on my nose and just to
01:36 - help me breathe better essentially
01:39 - um it's kind of a fancy septoplasty it's
01:41 - not a rhinoplasty I have the big nose
01:43 - before the surgery and I will continue
01:45 - to have a big nose so don't worry about
01:48 - that nothing's going to change there
01:51 - um yeah so uh
01:54 - yeah this is awesome it was so weird um
01:57 - I I don't know what to do with my hands
01:59 - so I hope everything's working all right
02:01 - and okay so
02:04 - um yeah thank you all for joining it I'm
02:06 - really floored to have like anybody on
02:07 - here listen to me and watch me code
02:10 - um so I'm gonna start this is gonna be
02:11 - like the least professional live stream
02:13 - you've ever seen in your life uh because
02:16 - I've got a laptop I'll show you I've got
02:18 - one a laptop with one screen that I have
02:22 - to do all of this on I don't even have
02:24 - I've got another laptop another separate
02:26 - laptop over here just to watch the chat
02:29 - in case I don't know any in case
02:31 - anything explodes uh but here I've just
02:34 - got the one so now I've got my streaming
02:35 - software and everything you're gonna see
02:37 - it you're gonna see all of how
02:38 - everything is working here
02:40 - um
02:41 - so yeah so the plan here is to do
02:45 - uh leak code four
02:48 - which is a median of two sorted arrays
02:51 - so
02:52 - um and we'll talk about what the problem
02:54 - is here
02:56 - um and
02:59 - so I guess um
03:00 - yeah
03:03 - sorry I'm so distracted by the chat I
03:05 - don't know I don't have a way that I'm
03:07 - supposed to be doing all of this you
03:09 - know kind of down yet so
03:11 - um yeah so anyway let's just get started
03:15 - um of course hit me up in the chat if
03:16 - you have questions or anything along the
03:18 - way I don't know how often I'll be able
03:19 - to like check it I definitely won't be
03:21 - able to answer every single question
03:23 - that's just the way things go but I'll
03:25 - do everything I can because this is all
03:27 - about interacting with you guys and I
03:28 - want to be able to to do that it sounded
03:30 - like a lot of fun so I want to do it
03:32 - all right so we're doing leak code
03:34 - number four the median of two sorted
03:38 - arrays
03:39 - so what they're going to provide us and
03:41 - here's you know we switched over to Java
03:43 - so they give us our little shell of code
03:46 - here
03:48 - um
03:49 - yeah so uh Praveen in the chat says I
03:54 - did this it's an easy problem but why is
03:56 - it listed and hard that's what I thought
03:59 - too when I first saw it
04:01 - um I saw oh this is this looks really
04:03 - easy but the the devil is in in the
04:05 - details and we're going to talk about it
04:06 - a little bit
04:07 - um so it says okay we're going to get
04:09 - two sorted arrays nums one and nums two
04:12 - so they're just arrays of ins they're
04:15 - going to be sorted that means they're
04:16 - going to be
04:17 - smallest to largest each of those
04:20 - separate arrays are sorted already
04:21 - smallest to largest guaranteed we don't
04:23 - have to worry about that
04:25 - um
04:26 - and given that information we need to
04:29 - find the median so like the center
04:33 - number so if you put them all if you did
04:36 - if you take a bunch of numbers in order
04:38 - the center number is the median like
04:41 - literally the number in the middle of
04:42 - that list or if it's an even if there's
04:44 - an even number of objects in that list
04:47 - it's uh the average of the center to
04:51 - uh numbers the center two elements so
04:54 - anyway
04:55 - we're supposed to find the median
04:57 - of
04:59 - the
05:00 - entire collection of those two arrays so
05:04 - like pretend we had those two arrays and
05:05 - they were mashed into one giant sorted
05:08 - array we would need to find the median
05:10 - of of that combined sorted array of
05:13 - these two separate sorted arrays
05:16 - so
05:18 - um and it the the caveat here the reason
05:21 - why it's saying that this is hard
05:26 - is because it's it's saying that the
05:28 - overall runtime complexity should be Big
05:30 - O of uh log of M plus n
05:36 - um so probably what will happen in this
05:39 - video
05:41 - um is that and it's saying that I have a
05:44 - low bit rate so maybe I have to turn off
05:46 - my own preview oh well I'll do that
05:50 - um
05:50 - never done this before I apologize if
05:52 - this is like junk quality I'm really
05:55 - trying to I'm trying to do everything
05:56 - right but we'll see
05:58 - um
05:59 - anyway the reason that that is that this
06:01 - is hard is because it's saying that the
06:02 - overall runtime complexity should be Big
06:04 - O of log of M plus n
06:08 - uh so that's what is really difficult
06:11 - about it I think what we're going to
06:12 - have to do in this particular video I
06:14 - honestly only have like an hour maybe I
06:17 - probably have to be done with this by 11
06:18 - Central uh because I'm gonna have to
06:21 - like literally go help take care of kids
06:24 - so I don't know if we're going to be
06:27 - able to code through the solution that's
06:29 - Big O of log of n plus n I'm going to at
06:32 - least try and talk about it about how it
06:35 - should work and then I might do a
06:37 - subsequent video doing the hard the the
06:39 - faster the better time complexity
06:42 - solution the Big O of n plus n so log of
06:45 - n plus n solution
06:46 - the solution that first comes to
06:49 - probably everybody's mind the naive
06:51 - solution that they call it which I kind
06:53 - of like that they call it a night like
06:54 - people call it a naive solution Ah
06:55 - that's like the lame solution well it's
06:57 - a good solution it's it's a the solution
07:00 - that everybody comes up with uh is what
07:03 - we're going to talk about and Implement
07:05 - at least here we'll at least get through
07:07 - that and then we'll see how much of like
07:08 - the tougher
07:10 - um better faster bigger web M log of M
07:13 - plus n solution we'll see how far we get
07:16 - into that
07:18 - um so so let's say let's let's uh like
07:21 - pull up a whiteboard here
07:23 - um somebody's saying video quality is
07:25 - good so cool YouTube is bugging me
07:29 - apparently everything's good all right
07:31 - so let's say we had
07:33 - um let's draw out how this is going to
07:35 - work we have two uh this is the easier
07:39 - solution uh that isn't going to have the
07:41 - type of Big O
07:43 - uh complexity that they're asking for
07:46 - but it's still going to be pretty darn
07:47 - fast oh sorry I I didn't actually go
07:49 - through the examples
07:51 - I should do that you probably want to
07:52 - see some examples so for example if
07:55 - numbers one comes in and is uh one and
07:57 - three and nums two is just two
08:00 - um
08:02 - the merged array you know if we take
08:05 - those two sorted arrays and merge them
08:07 - into one sorted array the middle number
08:09 - there is two and so that's the median
08:12 - the median is the middle number and then
08:14 - they have another example where they
08:16 - have an even number of elements and the
08:19 - total sorted array so you have one is
08:21 - one two and the other is three four
08:23 - combined that's the merged array is one
08:25 - two three four and the median there is
08:28 - the average of the middle two numbers
08:31 - because it's an even number of elements
08:33 - so it's the average of two and three
08:34 - which is just two plus three divided by
08:36 - 2 is 2.5
08:38 - so that's the output that it expects and
08:41 - there's there's a few constraints that
08:42 - it's giving us
08:44 - um let's see that the nums.1 length
08:47 - equals m oh that's just it's just
08:48 - telling us about the the time complexity
08:50 - they're asking for because they're
08:52 - asking for that so they're saying okay
08:54 - numbers one length is M nums two length
08:57 - is n
08:58 - uh V
09:00 - so the length of each the length of each
09:04 - array won't be more than a thousand
09:06 - and but there could be nothing in it and
09:10 - also the so the total number is going to
09:12 - be there's going to be at least one
09:14 - thing and one of them the total number
09:15 - is going to be somewhere between one and
09:17 - two thousand and the numbers themselves
09:20 - are going to be actually it says nums
09:24 - one I nums two so negative 10 is going
09:27 - to be less than or equal to numbers 1 I
09:31 - yeah I think it's saying like the
09:32 - numbers themselves are going to be
09:33 - between like negative a million and a
09:35 - million
09:36 - if I'm reading this right
09:40 - so
09:43 - um yeah
09:44 - well I don't know so anyway we've got
09:47 - it's kind of simpler than it than it
09:49 - might seem if you start kind of getting
09:50 - too much into some of these constraints
09:51 - here but so we're going to talk about
09:53 - the the kind of naive but good solution
09:58 - um especially if you're more of a
10:00 - beginner to these sorts of problems then
10:01 - I used to always I always just code that
10:03 - IU solution first I have code the first
10:06 - thing that comes to mind and and make
10:08 - sure that I can get a good result and
10:10 - then I kind of think through
10:12 - um the clever way of doing it that could
10:14 - make it go faster and if I can't think
10:16 - of one
10:17 - start the Googling try and figure out
10:19 - what other people have done and learned
10:20 - from it before you work on another Elite
10:22 - code problem
10:24 - uh yeah so let's talk about this let's
10:26 - say we've got
10:28 - um how are we how are we going to do
10:29 - this let's say we've got two
10:31 - two arrays so I'm just going to make up
10:33 - some numbers we say we've got one three
10:36 - three
10:38 - four and six in one array and two three
10:44 - five
10:46 - seven four no that's two three five
10:49 - seven eight it has to be sorted these
10:52 - are both guaranteed to be sorted in
10:53 - order we know that for sure
10:55 - um so basically what we're going to do
10:57 - with our naive solution that we're going
10:59 - to code here is we're going to just
11:02 - combine those two sorted arrays into one
11:05 - larger sorted array and find the median
11:08 - of that
11:09 - uh
11:12 - so that's what we're going to do the the
11:14 - merging of those two arrays is going to
11:16 - be kind of the fun part to code and
11:18 - we'll talk about how we do that I'll
11:19 - give you a hint it's a lot like the
11:21 - merge sort merge works
11:25 - um if you've seen my merge sort video
11:27 - that was a big Revelation to be able to
11:29 - figure out how that merge is supposed to
11:31 - work we're using a similar merge here
11:32 - because the things that we're merging
11:33 - are already in order
11:36 - um okay so basically what we have to do
11:38 - to merge this into one giant array and
11:40 - then we're going to find the median of
11:41 - that giant array uh is we're going to
11:44 - Loop through
11:46 - the
11:47 - the first array and the second array
11:49 - kind of at this at the same time and
11:51 - I'll show you what I mean so let's say
11:53 - we we have like a pointer called I
11:55 - that's the weirdest eye ever that's
11:58 - going to Loop through our
12:00 - uh first array and another one J that's
12:03 - going to Loop through our second one
12:06 - so we'll start by just looking at
12:09 - comparing
12:10 - both of those numbers
12:12 - at
12:14 - in the first array element I and the
12:17 - second array element J
12:19 - so we're going to start comparing the
12:20 - first two numbers of each array
12:22 - and we see which one is smaller
12:26 - and so we're comparing one and two which
12:28 - one is smaller one so then we add 1 to
12:31 - our combined sorted array and then since
12:34 - we used this one from our first array
12:38 - we'll then increment over to look at the
12:41 - next element of that array and then
12:43 - we'll compare these two numbers because
12:45 - we didn't move the one from the the
12:47 - bottom array we'll compare those two
12:48 - numbers and see which one is smaller two
12:51 - or three well two is smaller so we add
12:53 - it to our sorted array it's a terrible
12:55 - two let me see if I can make that a
12:56 - little better
12:57 - so we add that to our combined sorted
12:59 - array and then okay
13:01 - um that was this too so we use that
13:03 - let's move on to look at three and
13:05 - compare three and three which one's
13:07 - smaller they're both the same
13:09 - um so we just use the first one
13:11 - three
13:14 - add it to our sorted array
13:16 - and then again we move our pointer
13:18 - because we use that three and we compare
13:20 - three and three which one's smaller it's
13:22 - three
13:24 - um and we keep moving through this
13:26 - comparing the next two elements of each
13:29 - array and say okay which one of these is
13:31 - smaller and whichever one is smaller we
13:33 - add it to our merged sorted array and
13:36 - then we increment the uh pointer on the
13:40 - array that we pulled that value from
13:44 - and then we keep going until we've
13:46 - exhausted both of our arrays and then we
13:50 - should have one combined sorted array
13:54 - that's kind of the idea that's what
13:55 - we're walking through here so anyway we
13:57 - were we were comparing Okay now what's
13:59 - which is uh smaller three or three well
14:03 - three
14:05 - um doesn't matter they're the same so we
14:07 - picked this three and we'll move our
14:09 - pointer over which is smaller three or
14:12 - four
14:13 - three is oh wait no I okay this is the
14:17 - problem with doing stuff live because
14:19 - I've already added three to the list
14:21 - here twice so I messed up completely at
14:23 - some point along the line when I was
14:24 - making the explanation I added three a
14:26 - few times
14:27 - one extra time
14:29 - okay so anyway we've got three three
14:32 - times
14:33 - which is what we've got here
14:35 - one two three three so now we should be
14:37 - moving over here and comparing four and
14:40 - five
14:40 - which one is smaller four
14:42 - move it over here
14:44 - now we compare five and six which one is
14:47 - smaller
14:49 - five
14:50 - move on to the next one this is like a
14:52 - mess of a of a white board at this point
14:55 - which is uh which is smaller six or
14:58 - seven six is
15:00 - so then we've exhausted this entire top
15:03 - list because we've already
15:06 - accounted for
15:08 - six the last element in that top array
15:11 - so now we just have to keep going we
15:13 - know that every element in the bottom
15:14 - bottom array is bigger than that six
15:16 - which it is it's seven and eight so we
15:18 - have seven and eight
15:20 - so kind of mess it up there with the
15:22 - threes I added too many but
15:24 - we've got it all worked out so now our
15:26 - uh array at the beginning which because
15:29 - I circled too much stuff it used to be
15:31 - one three three four six and two three
15:33 - five seven eight
15:35 - combined those two sorted arrays
15:37 - combined and merged into one sort array
15:40 - is one two three three three four five
15:42 - six seven eight and there should be ten
15:44 - total elements because there's ten
15:46 - elements here so we should have a 10
15:48 - elements okay so now that we have that's
15:51 - the first step in this naive solution is
15:54 - to combine those into one giant sorted
15:56 - array so what we're going to do now is
15:59 - just find the median of this sorted
16:02 - combined array
16:04 - and that just means
16:06 - um you know plucking the if it's odd it
16:09 - would be the exact middle element of
16:11 - that array and if it's an even number of
16:13 - elements it's the average of the middle
16:16 - two so in this case the middle two are
16:18 - three and four and so uh the average of
16:21 - the median of the combined arrays would
16:23 - be 3.5
16:26 - so that's kind of
16:29 - what that's exactly what we're going to
16:31 - do what we're going to code and we're
16:33 - going to submit and delete code and see
16:35 - how fast this naive solution uh runs
16:40 - compared to other Java submissions
16:45 - um okay
16:47 - so I'm going to take a quick
16:49 - second
16:51 - let's see I'm going to take a quick
16:53 - second to
16:55 - go ahead and check out the chat a little
16:57 - bit just to see if anybody has questions
16:59 - one question though if you care a lot
17:01 - about optimization why did you choose
17:03 - Java and not C plus or similar I code in
17:06 - Java
17:08 - and teach Java honestly largely because
17:11 - I have used Java at work for the last
17:15 - 12 years and it's the it's the
17:19 - um
17:20 - it's the programming language that I am
17:21 - most familiar with by far I quoted
17:24 - another stuff mostly in college and a
17:26 - tiny bit after uh professionally but
17:28 - basically all my experiences in Java so
17:31 - um our stuff our submissions are only
17:32 - going to be compared against other Java
17:34 - submissions in lead code anyway that's
17:36 - how that works
17:37 - okay
17:40 - um somebody says it's not a set yeah
17:41 - these are not sets
17:43 - um it's uh in a set there wouldn't be
17:47 - any duplicates so it's and generally
17:50 - sets are also not sorted this is a
17:51 - sorted array it's not exactly a set so
17:54 - we can have duplicate elements like we
17:56 - do here that's totally allowed I don't
17:58 - think there's anything against that in
18:00 - what they
18:02 - um and what they have explained to us
18:06 - uh now I gotta see how to find those
18:08 - middle two numbers we will talk about it
18:10 - um but basically let's talk about it
18:12 - right now how we're going to find the
18:14 - these middle two numbers is
18:17 - um
18:18 - well basically we'll have to account for
18:19 - of course if it's odd or if it's even if
18:22 - it's odd it's easier
18:24 - so
18:25 - um
18:26 - basically all we're going to do is take
18:28 - the length of our combined array
18:31 - and divide it by two and look at the
18:34 - element there in the middle
18:36 - so the length of
18:38 - this array is this combined array is 10.
18:44 - which I guess I could point one two
18:45 - three three
18:46 - we have 10 elements in this combined
18:48 - array
18:49 - so 10 divided by 5 to get to the halfway
18:52 - point or divided by 2 sorry to get to
18:55 - the halfway point is 5. so we can look
18:57 - at the fifth element in that array well
19:00 - I guess we might end up looking at like
19:02 - the
19:03 - the length divided by 2 minus 1 or
19:06 - something to account for uh zero based
19:10 - arrays
19:11 - um so yeah let's pretend that we had
19:13 - like our combined array was one two
19:15 - three something simple
19:17 - so our length is three
19:21 - and if we want to divide our length by 2
19:22 - 3 divided by 2
19:25 - um
19:26 - in the rounding down world is going to
19:29 - be 1 because 3 by 2 is technically 1.5
19:31 - and it would with one with a remainder
19:34 - of 1.
19:36 - so I I make the more more complex
19:39 - Solutions
19:40 - explain things more complexly when I'm
19:43 - on the Fly than I do when I have time to
19:44 - like
19:46 - edit my videos forever anyway
19:48 - so we would look at the first
19:51 - element in this list which is actually
19:54 - the thing at the the element at index
19:58 - one which is the number
20:00 - two
20:01 - the center element in the array here
20:04 - that's pretty much how you do oh you do
20:06 - it you just get the middle element by
20:07 - taking the length of your list and
20:09 - dividing it by two and looking at what's
20:11 - in that index
20:12 - and when you have an even number you
20:14 - have to look at the two middle ones and
20:17 - average them
20:18 - so it's just a tiny bit different math
20:20 - but it's essentially the same you just
20:22 - need to divide it by two and look at one
20:23 - and then look at the one right next to
20:24 - it and combine them
20:26 - so yeah
20:28 - okay
20:29 - let's get to
20:32 - the fun part the coding uh all right
20:36 - now I did start with as I have in the
20:39 - other couple of leak code videos I've
20:40 - made I started with
20:43 - uh you know they give you this solution
20:45 - kind of framework here I took a copy of
20:48 - that and pasted it over in IntelliJ here
20:54 - all right so
20:56 - I have a I had an idea of how this was
20:58 - going to work but I hadn't coded it yet
20:59 - uh coming into this so I hope everything
21:01 - is like not too big of a disaster here
21:03 - even with a naive solution
21:05 - okay so the first thing we want to do we
21:07 - have numbers one and nums two and we
21:11 - need to merge them into that one larger
21:15 - sorted list remember these are sorted we
21:17 - want to combine them into one sorted
21:18 - list so
21:21 - um let's first create our array that's
21:24 - going to hold our sorted elements our
21:26 - combined sorted elements
21:28 - so let's say okay I've got I want to
21:31 - make a new int array let's call it
21:34 - merged
21:37 - maybe just merged
21:39 - merged array
21:41 - I merge into nums because these are
21:43 - those are both called nums and nums one
21:45 - and nums two this is going to be merged
21:46 - nums merge nums
21:49 - equals a new intera and we need to give
21:52 - it a size
21:54 - um
21:55 - because that's how arrays work if you
21:57 - don't want to deal with having to being
22:00 - restricted by sizes use arraylists
22:02 - instead of arrays but here we're being
22:03 - fed in arrays uh let's try and be cool
22:06 - and use arrays
22:07 - so the the size we're going to need to
22:09 - hold all the elements is just the
22:11 - combined size of those two two arrays so
22:13 - that's going to be nums uh we're going
22:16 - to have to get that the those lengths by
22:18 - using nums one that length
22:20 - plus nums two dot length
22:26 - and that's it now we have an array that
22:28 - will hold uh the combined elements of R2
22:31 - input arrays and now we just have to do
22:35 - what we did in a horrific messy way in
22:38 - this now awful looking white board and
22:40 - uh you know go through each of those
22:42 - Rays kind of simultaneously and plucking
22:46 - the lower of the of the two like we look
22:48 - at the first number of both of them and
22:49 - compare them and whichever one number is
22:51 - lower we add to our combined array and
22:53 - then increment and keep doing that
22:55 - finding the lowest number of each array
22:57 - until we have our combined sorted array
23:01 - um so we're going to need
23:03 - there's a number of ways you could do
23:05 - that so I'm trying to think about it
23:08 - um
23:12 - let's let's just give ourselves let's
23:14 - make it simple let's give ourselves just
23:15 - three kind of pointers so like int I
23:18 - equals zero
23:21 - and J equals zero you could combine
23:23 - these two if you want to be real cool I
23:25 - think you can do like int
23:27 - I comma J kind of whatever I'll do it on
23:30 - different lines it's kind of I kind of
23:31 - like to do it end k equals zero so this
23:33 - is going to be like our our pointers
23:36 - for walking through the nums one array
23:39 - so we're going to use I to increment
23:42 - through our nums one array and we're
23:43 - going to use J to increment through our
23:45 - nums 2 array and then as we build our
23:48 - merged nums array we'll use K for uh for
23:54 - like the the iterator there
23:58 - okay
23:59 - so we need three different pointers to
24:01 - do that or the different you know
24:03 - iterators to do that
24:06 - all right so
24:08 - let's say
24:10 - while hmm
24:14 - use system.array copy
24:17 - yeah they're probably they're probably
24:19 - built in ways to do this there's
24:21 - probably like an uh arrays Dot
24:25 - I was there's probably some kind of a a
24:28 - super easy
24:30 - um arrays that whoa what's going on
24:32 - there
24:33 - some kind of a raised dot merge method
24:35 - or something that would take to a raise
24:37 - and merge them without us having to do
24:39 - anything
24:39 - without us having to code it ourselves
24:42 - but that is no fun in that let's code it
24:44 - ourselves and fall flat on our face
24:46 - when we're trying to do it live in front
24:49 - of a pile of people
24:52 - yeah
24:54 - okay
24:55 - all right so we want to essentially Loop
24:58 - through our arrays until we run out of
25:01 - them until we run out of elements in
25:03 - each array
25:04 - so
25:05 - um I think what we're going to do is say
25:08 - okay like while
25:11 - while our I pointer the thing that's
25:15 - walking through nums one while I is less
25:19 - than
25:21 - uh nums1.length
25:25 - and while and also while J is less than
25:30 - nums 2 dot length
25:33 - so we're going to keep going length
25:35 - these are the kinds of things that I can
25:37 - edit out when I have the opportunity you
25:40 - just don't see me typing out things 10
25:42 - 000 times when I get it wrong while I'm
25:43 - recording
25:44 - we're going to walk through we're just
25:46 - going to keep looping here until we've
25:49 - exhausted just one of our input arrays
25:53 - and comparing the elements that we're
25:56 - comparing the two elements that were
25:58 - currently pointed at and adding it to
26:00 - our new array so
26:02 - uh so I'll say
26:04 - while
26:07 - okay
26:10 - we're going to compare we're going to
26:12 - say if
26:14 - nums 1 at I
26:17 - because that's I is what we're using to
26:18 - walk through that array
26:20 - if nums 1 I is less than nums 2 I or J
26:26 - because we're using J to walk through
26:28 - that one
26:29 - then
26:31 - we should add
26:35 - um
26:36 - we should add nums 1 I
26:39 - numbers one of I to our combined array
26:45 - so that means and we're starting with
26:48 - the zeroth element we're using K to walk
26:49 - through our combined array so we're
26:51 - going to set
26:53 - merge nums
26:56 - at K to be equal to
27:00 - nums 1 I
27:05 - I think that works
27:07 - okay and then otherwise we know that
27:13 - the nums 2 is great is uh less than nums
27:17 - one or it's equals and then it doesn't
27:18 - much matter but otherwise
27:21 - we're going to add
27:24 - we're going to set merge nums at K to be
27:26 - equal to
27:28 - nums 2 dot j or nums 2
27:33 - of J
27:36 - it's like the Ultimate Nightmare screen
27:39 - sharing like when you're screen sharing
27:40 - with like two people at work and
27:41 - everybody's watching you code you make a
27:43 - thousand errors and qualify on your face
27:45 - and now
27:48 - it's just a worse version of that but I
27:51 - hope it's at least manageable
27:55 - can I share my solution and you can
27:57 - optimize it
27:58 - sure you can you can share it and uh I
28:01 - probably won't have time in this
28:03 - particular stream to optimize somebody
28:04 - else's uh thing I'll have to be spending
28:07 - time optimizing my own or at least
28:08 - getting my own working
28:11 - um Okay so
28:13 - I think that's all right let me is there
28:15 - any questions so far
28:18 - oh and we also have to in each of these
28:21 - so
28:22 - um we also have to increment I if we
28:24 - used I and we have to increment J if we
28:27 - used J
28:30 - basically if we use the number from nums
28:31 - one we have to increment I and we use
28:33 - the number from nums two we have to
28:34 - increment J so we're looking at the same
28:35 - number again so in each of these
28:37 - occurrences we're going to say okay
28:38 - we're going to say I plus plus because
28:40 - we used the numbers one number and here
28:42 - we're going to say J plus plus because
28:43 - we used the numbers two number and
28:46 - either way we would have added a number
28:49 - to our merged nums array so we need to
28:52 - increment k
28:55 - so next time we add the element
28:58 - to the next uh
29:00 - index of our merged nums array so either
29:04 - way we're going to do K plus plus
29:06 - after that
29:08 - so after this while loop runs
29:12 - either we should be done walking through
29:17 - either the nums one array or the nums 2
29:20 - array but there's probably still
29:22 - elements left in the other one because
29:25 - we're only looping while both of them
29:28 - while we haven't hit the end of both of
29:30 - them yet once we hit the end of one of
29:32 - these arrays it's going to hop out of
29:33 - this while loop so after that we need to
29:36 - exhaust whichever array we still have
29:39 - stuff in and just put the rest of those
29:42 - elements into our merged array because
29:44 - we know they're all greater than
29:46 - everything we've already added so far
29:48 - I hope that makes a little bit of sense
29:51 - so let's just do that so while we can
29:56 - copy some code here so while
29:59 - I is less than nums 1 dot length
30:03 - we're going to
30:06 - uh so basically if there's anything else
30:08 - left in the first list
30:10 - in the first array add them all
30:13 - to
30:14 - um
30:16 - oops I gotta need a semicolon here add
30:18 - them all
30:20 - I think this is Right add them all to
30:25 - the merge nums
30:27 - and increment K both times increment K
30:29 - here too
30:32 - about a thousand people ask for a
30:34 - semicolon there that's pair programming
30:37 - for you
30:38 - when you got a bazillion people
30:40 - watching all at once
30:42 - okay so now this means uh We've
30:45 - definitely exhausted
30:47 - our first nums array and now um we do
30:51 - the same thing with nums too in case
30:53 - that hasn't run out yet
30:56 - but we have to use nums two of j instead
30:59 - of nums one of I
31:01 - and then J plus plus
31:04 - K plus plus I think oh and we have to
31:06 - use J here too
31:09 - copy paste stuff we could get bitten
31:11 - there for sure increment K and I put
31:13 - semicolon at line 15. you must check the
31:15 - values of I and J I don't know why I
31:17 - would have to check the values of I and
31:18 - J
31:20 - the while loop condition should be or
31:22 - you could maybe do it like that
31:27 - um
31:27 - so that's saying so while there's stuff
31:31 - left you could do it either way you
31:32 - could you could use an or here
31:35 - and say okay while there's stuff left in
31:38 - the first list or there's stuff left in
31:41 - the second list
31:42 - or arrays rather but then inside this
31:46 - part here you have to check which one
31:49 - has stuff in it still otherwise you're
31:51 - going to run into like array index out
31:53 - of bounds errors
31:55 - so I think it makes it a little bit
31:56 - easier to just okay for this whole first
31:59 - Loop I'm going to say just just keep
32:01 - looping through while until one of them
32:04 - has reached the end
32:06 - and then at this point we know that one
32:09 - of them is out of elements but we don't
32:11 - really know which
32:12 - um so this just kind of checks both of
32:13 - them so this says okay if there's
32:15 - anything left in I put the rest of that
32:17 - stuff in there otherwise also if there's
32:19 - anything left in j
32:21 - put the rest of that stuff in the merge
32:23 - list it's technically only ever going to
32:25 - run one of these two while Loops I think
32:27 - because one of these should always have
32:30 - already hit that length limit
32:34 - um
32:36 - yeah I think that's right
32:39 - okay
32:41 - all right so now we should have this
32:44 - that should be the end of the merge I
32:46 - think
32:47 - what we might want to do is do like is
32:49 - put this in a method and test it so we
32:52 - don't like write a bunch about that's a
32:54 - good thing to do test early
32:56 - um otherwise we're going to write our
32:57 - code to find the median of these uh of
33:01 - that merged array
33:02 - and it's not going to work and we aren't
33:04 - going to be sure if it's our median
33:05 - check code or our merge code
33:08 - so probably what we should do
33:11 - is
33:12 - put all of this into a method
33:15 - and
33:18 - test that method directly
33:22 - um let's see I don't remember the
33:23 - extract method whoops that's the wrong
33:24 - thing
33:25 - so I can how you do this in a fancy way
33:27 - in IntelliJ if you want to be lazy and
33:29 - you don't want to like copy paste it
33:30 - into a method you can right click it and
33:32 - say refactor extract method
33:35 - and poof it just does the magic for you
33:39 - basically
33:41 - um
33:42 - I will need to customize this a little
33:44 - bit
33:44 - so I'll call this method merge and it'll
33:47 - take in nums 1 and nums two it'll take
33:49 - in so it's already doing this uh so it
33:51 - created a private method for us called
33:54 - merge that takes in
33:55 - two interface and has all the code that
33:58 - we already just wrote and highlighted
34:01 - um but what this isn't doing is
34:02 - returning the merged array
34:05 - so we're going to have to do that
34:07 - we're gonna have to well first of all
34:08 - we're gonna have to say that it instead
34:10 - of void it'll return an intera
34:12 - and also we're gonna have to actually
34:14 - return
34:17 - merged nums
34:20 - okay
34:23 - so after we so then we have to say
34:27 - int well let's copy this int merge nums
34:31 - equals the result of merging those two
34:33 - nums
34:35 - are those two arrays of nums num's one
34:37 - and nums two I'm also going to
34:45 - sorry I gotta think
34:49 - oh this is missing a return statement so
34:51 - it's not going to compile right now for
34:52 - now let's return it needs a double we'll
34:54 - return 0.0
34:55 - we'll return a proper thing once we add
34:57 - the median finding code
34:59 - but right now we're just writing the
35:00 - code that merges those two arrays into
35:02 - one sorted array
35:05 - so I'm going to actually change this
35:07 - method to public and just so I can test
35:11 - it temporarily directly it's not
35:14 - something you typically want to do in
35:15 - production code changing methods to be
35:17 - public just so you can test them don't
35:19 - do that I see a lot of people doing it
35:21 - making a method public for no other
35:23 - reason if they want to test it directly
35:25 - if you're trying to change a method to
35:26 - public just to test it directly
35:28 - it probably means that you should move
35:30 - it to its own class and make it public
35:32 - separately in its own class and test it
35:34 - directly there if it's if it has no need
35:37 - to be called from anywhere else it
35:38 - should be private but I'm lazy here
35:40 - right now and so I'm going to make it
35:41 - public just so I can test it by calling
35:43 - it directly so I also have this solution
35:46 - test class built and ready to go so I
35:49 - can test code during this video if we
35:51 - needed to and hey we need to
35:53 - um but I'm kind of running low on time
35:55 - myself I set myself about an hour to do
35:57 - this before I got to get back to my
35:58 - family
35:59 - so here we go
36:02 - um write a test method and actually I
36:04 - think there's a cool cooler way you can
36:05 - do this so if I want to test this method
36:07 - directly I can right click
36:09 - and what does it generate test
36:14 - so I can say Okay generate me a test it
36:16 - should already be there so generate me a
36:18 - test method for this merge
36:20 - method
36:23 - and poof it's it I mean this is like
36:27 - 15 characters that I got away without
36:30 - having to type but hey I did it a cool
36:31 - way so now we have a test that'll hit
36:34 - this merge method so I want to say let's
36:36 - say I um
36:38 - I'm going to create a new solution
36:40 - object solution solution solution is
36:43 - just the class that we made here to hold
36:45 - our solution
36:46 - not particularly groundbreaking
36:48 - so we're going to create a new object of
36:50 - that class so that we can call our merge
36:52 - method and throw two known uh
36:57 - like two known arrays and make sure that
37:01 - it the solution
37:02 - the merged arrays is what we expect it
37:04 - to be
37:05 - so it should be pretty straightforward
37:07 - so we would say like solution dot merge
37:10 - we're going to call our merge method and
37:12 - send it to interrays let's say new into
37:17 - array
37:19 - I always forget like the syntax of this
37:24 - look here here's a live I don't know how
37:26 - to I don't remember how to do a thing in
37:28 - Java
37:30 - um
37:31 - so it's going to be like
37:36 - um
37:38 - Java array literal
37:42 - oh hey it's something I've clicked
37:43 - before
37:44 - fantastic
37:46 - uh yeah in fact equals what if I want to
37:50 - pass it in as an element
37:54 - this is like the dumbest thing
37:58 - because I think it's different if you
37:59 - want to pass it in as an uh
38:03 - oh here here's some people new and thank
38:06 - you
38:07 - um long
38:10 - use chat GPT chat GPT would shred this
38:13 - in a quarter of a second
38:15 - I'm positive of that it would probably
38:17 - do the hard solution too and wipe the
38:19 - floor with this uh the easy solution
38:21 - that we're coding in so yeah okay
38:23 - um apparently this should work according
38:25 - to people
38:27 - I could do stream.o yeah I guess stream
38:30 - dot of dot flatmap.2 array if I want
38:33 - like 10 steps of it okay so let's say I
38:35 - had like one two
38:39 - that's not right
38:41 - oh because it takes two parameters
38:46 - because it takes two parameters so let's
38:48 - say we had one and three and one of the
38:50 - things here
38:53 - appreciate you all chipping in there I
38:55 - can just look at the chat and there's
38:56 - five people that have so thank you uh
38:59 - long and herfa
39:02 - and prasant and anybody that I missed
39:05 - that told me what to do thank you
39:10 - okay so now we're merging these two
39:12 - arrays what we expect to happen is
39:16 - um
39:17 - that it equals one two and three
39:21 - so let's say uh int array a result we're
39:25 - going to set it equal to this it's
39:26 - probably you know ways to do this with
39:28 - fewer lines we can say Okay assert I
39:31 - think there's like an assert
39:33 - array equals or something like that
39:37 - I'll start with a cert
39:38 - um
39:40 - whoa
39:43 - I think there's an assert maybe one of
39:44 - you guys know what's up with your nose
39:46 - in case you missed the beginning of the
39:47 - stream I had a nose surgery it wasn't a
39:49 - rhinoplasty I had a big nose before I
39:51 - still have a big nose
39:54 - um but it was a surgery to help me
39:56 - breathe better like a supercharged
39:57 - septoplasty now these are coming off
40:00 - tomorrow so I thought oh what better
40:02 - time to do a live stream than
40:04 - uh looking like I got socked in the nose
40:06 - at a bar or something
40:10 - but it's doing well the pain is gone
40:13 - so just to I'm getting all this stuff
40:15 - off tomorrow and it should be a whole
40:16 - new world of breathing really looking
40:17 - forward to it
40:19 - um
40:20 - I think there's nobody's jammed in with
40:22 - I think there's a way a way to do like
40:24 - assert array equals
40:30 - yeah Java assert array equals
40:34 - um
40:35 - yeah surgery equals the third the two
40:37 - object arrays are equal
40:40 - but I think it's gonna it's gonna ask me
40:42 - to uh import this in a static way
40:47 - okay so we're going to say so the result
40:51 - so we expect sorry the result to be a
40:54 - new into array that contains one two
40:58 - three
40:59 - and
41:00 - uh we're going to compare that to our
41:02 - actual result
41:04 - so this should tell us
41:07 - please import the thing there we go
41:10 - so this should tell us
41:12 - um if we have the expected result if
41:14 - when we merge those two arrays we expect
41:15 - to get one two three and it Compares it
41:17 - to our actual result let's run it whoops
41:19 - I don't need a breakpoint run it
41:23 - why don't you want to run oh I already
41:25 - did it okay
41:28 - did it do
41:33 - static end portal oh I've got something
41:35 - wrong I have a wacky import
41:41 - try again
41:44 - and if our test passes cool
41:47 - and let's make sure that once good Sandy
41:49 - checks to make sure like your test can
41:51 - fail so every once in a while uh
41:54 - somebody I'll see you write a test that
41:56 - can never
41:58 - fail ever and so they think their code
42:00 - is working when it's not okay if I
42:01 - compare it to the bad result to a bad
42:03 - result
42:04 - um it fails so that's good that means
42:05 - our merge code should be working we
42:07 - could write like a pile more uh tests we
42:11 - could say okay you know check if one of
42:13 - them is empty and the other one's has
42:15 - elements or and you know or vice versa
42:18 - things like that you should you should
42:20 - in a you know real production code have
42:23 - a whole bunch of tests more than this
42:24 - but this at least shows us the basic
42:26 - merge works it doesn't blow up with a
42:28 - null pointer exception or an array index
42:30 - out of bounds exception or anything
42:31 - weird like that at least with this basic
42:33 - check it's a good sanity check
42:36 - and now our code is a little bit nicer
42:37 - because we have this merge method shoved
42:39 - off here to the side
42:42 - you've got turbinate reduction and
42:43 - septoplasting it did a great relief for
42:45 - me I did have this back to the surgery
42:47 - thing I like four or five years ago had
42:50 - a surgery to fix a deviated septum and
42:52 - it was turbinate reduction septoplasty
42:55 - uvileptomy I don't have a uvula anymore
42:59 - um didn't plan on I don't know if you
43:00 - can see it in the camera ah
43:03 - maybe not that little punching bag
43:04 - everybody has in their mouth
43:06 - it's gone uh that and the tonsils
43:10 - I had everything taken out but
43:12 - apparently the the septoplasty was not
43:14 - as good as it could have been so there
43:16 - somebody else has given it a try and
43:18 - hopefully this guy knows what he's doing
43:20 - so now we have our merged
43:22 - array
43:23 - we just need to Now find the median of
43:25 - that merged array
43:28 - simple enough we have two conditions one
43:31 - that our merged array is an odd length
43:34 - and in which case we just leave the
43:35 - center number and the other case where
43:37 - it's an even length and we just need
43:40 - um the tube Center numbers and we get
43:42 - the average of them
43:44 - so
43:46 - yeah we have just two conditions to work
43:49 - out there
43:54 - okay
43:55 - good excuse to make up a crazy bar fight
43:57 - story if anyone asks
43:58 - yeah well I could that'd be a lot cooler
44:00 - of a thing to nobody asked questions
44:02 - with this that's that's one thing nobody
44:04 - has asked me oh my goodness what
44:06 - happened to your nose except for you
44:07 - guys because I mean and I don't mind I
44:09 - wouldn't do this if I minded
44:11 - I don't mind if people ask but
44:14 - because I guess they think maybe I got
44:16 - punched in the face and that something
44:18 - awful has happened to me
44:20 - okay so first we're gonna check uh do we
44:23 - have an even
44:24 - uh do we have an even
44:27 - combined array here merged nums
44:30 - so oh I should have an if if merge nums
44:35 - uh you guys should know how to find if
44:37 - something is even or odd but if you
44:39 - don't this is how you do it if merge
44:41 - nums dot length mod 2
44:46 - equals 1.
44:49 - so that what this does if you aren't
44:51 - familiar with mods you're brand new to
44:52 - Java or something or to programming in
44:54 - general this divides your length by two
44:57 - and gives you what the remainder is
45:01 - uh yes we are
45:03 - we are doing the mod thing yes thank you
45:05 - um
45:07 - so if uh merge nums.length mod 2 equals
45:11 - one that means we have an odd
45:15 - yeah I don't think we should ever have
45:17 - I'm trying to think if there's any sort
45:18 - of weird situation where I have like
45:20 - zero I shouldn't have a zero combined
45:22 - link that was one of the constraints
45:23 - there should be always be at least one
45:26 - so I think this condition works anyway
45:28 - if your length mod 2 is equal to one you
45:30 - have an odd
45:31 - uh number of elements and so you can
45:33 - return
45:36 - the
45:38 - middle element and the middle element
45:40 - you can get by okay so we're going to
45:43 - look up in our merge nums combined array
45:47 - the element that is at the halfway point
45:51 - so that's merged nums
45:55 - dot length
45:57 - divided by 2
46:00 - . there's always some weird off by one
46:02 - stuff here that could happen but I think
46:04 - this is just right I think I don't think
46:05 - you need to add or subtract one here I
46:07 - think you can just take the length and
46:08 - divide it by two because in the one
46:09 - example that we did have and this
46:11 - jumbled awful mess
46:13 - um where it was just one two and three
46:15 - was combined we could take our length of
46:17 - three
46:18 - divided by two
46:20 - and that in the programming math World
46:24 - gives you one
46:26 - and the one element
46:28 - one is at zero and two is that index one
46:31 - is the correct one so I think that's
46:33 - just right I think that's all I think
46:34 - that's correct I don't think you need to
46:36 - add or subtract one otherwise
46:39 - it's even
46:41 - and so we need to return we don't need
46:43 - this other return statement anymore
46:44 - we'll always be returning something
46:46 - it's even and we need to return
46:48 - something slightly fancier
46:51 - um
46:51 - which is going to be we can still kind
46:54 - of do it in I'm considering whether to
46:56 - do it in one giant line
47:02 - um
47:03 - and also does this just do the the
47:06 - casting like to double magically it
47:08 - seems happy with this return that's this
47:10 - is kind of this is the kind of things
47:11 - that the kind of thing that I do forget
47:12 - sometimes if I need to cast this to a
47:14 - double or if it's going to say I'll just
47:15 - do it myself
47:17 - um
47:20 - it might just do it itself anyway okay
47:26 - testing it into an end just in case
47:28 - maybe
47:29 - shouldn't have to cast this I don't
47:31 - think it it should automatically go from
47:33 - length to double and it doesn't seem to
47:34 - have any problem doing that with this
47:36 - with the thing we're about to have to
47:37 - divide we're about to have to deal with
47:39 - the even case we could have where we
47:40 - could have two Center numbers and we
47:42 - have to find the average of them I think
47:43 - we have to do some casting there to do
47:44 - the math
47:45 - uh to return it otherwise it'll do
47:48 - integer
47:49 - uh it'll do integer math and it won't
47:52 - give them the value that they want
47:55 - it'll be a little bit of a weird
47:57 - situation
47:58 - anyway so we need to return the average
48:01 - of the middle two elements so
48:03 - um one of those elements is going to be
48:06 - I think the same as this other one
48:09 - merged nums
48:13 - here at length divided by two
48:16 - and we need to add that
48:19 - to
48:20 - the element I think it's the one like
48:22 - right behind it let's do a quick uh
48:24 - example here let's undo like a thousand
48:26 - things here
48:27 - let's say where we had
48:30 - just
48:32 - one two one two three four
48:36 - and we needed to find the center two
48:39 - elements so that's uh if we were taking
48:41 - the length which is 4 divided by 2
48:44 - that gives us 2 and 0 1 2 that gives us
48:48 - this element
48:50 - and we need this element and the one
48:51 - before it so we need to subtract one
48:55 - to get the element before it
48:57 - so that answers that question we need to
48:58 - take this and divided by 2
49:02 - minus 1 to get the other element that we
49:04 - need to get the average okay what have I
49:07 - done
49:08 - I need to actually get the rest of that
49:11 - here Plus
49:13 - this whole the other element which is
49:16 - that merged nums blah blah blah blah
49:18 - blah blah minus one
49:21 - and then divide that by two
49:24 - this is where all the double math is
49:26 - going to be weird integer division is
49:27 - floating point in in floating point it's
49:29 - even giving us a warning here IntelliJ
49:31 - is pretty good about this stuff it's
49:32 - like hey you're doing integer math when
49:35 - you probably mean to be doing double
49:37 - math and uh I believe you are correct
49:41 - so I think we need to just take a second
49:44 - and cast these both to doubles
49:48 - so it will do
49:49 - floating Point math for us
49:53 - is it complaining still
49:56 - I don't think so
49:58 - I still have a couple of warnings oh as
50:00 - I got an import that I don't need
50:04 - this method is never used is the other
50:06 - warning
50:08 - check if empty result array uh long I
50:12 - don't think we need to check our
50:13 - resulting array for empty the reason for
50:16 - that is that one of the constraints
50:19 - is that
50:22 - um I think you're always going to have
50:23 - at least one element yeah so
50:25 - one is less than or equal to M plus n
50:29 - so that means
50:31 - even though one or the other array might
50:33 - be be empty one of one of them is always
50:35 - going to have something one or the other
50:37 - is always going to have something so our
50:38 - resulting merged array should never be
50:40 - empty otherwise yeah you could run into
50:42 - all kinds of weird problems here because
50:43 - even the zeroth element doesn't exist
50:45 - you'll get an array index out of bounds
50:47 - and it'll explode if you were writing
50:49 - robust production code you should check
50:50 - for that
50:51 - here I don't think we need to check for
50:53 - it because it's part of the parameters
50:55 - of the
50:56 - of the code that we're given of of the
50:59 - problem that it'll always have something
51:00 - in it
51:02 - yes and somebody else answered that too
51:06 - um well dividing by 2.0 work
51:09 - I don't know if I have to do that that's
51:10 - a good question
51:12 - if Java does a lot of this magic and
51:15 - casting and stuff on its own I don't
51:16 - know if I need to uh maybe we'll just
51:18 - leave it at two like that and see what
51:20 - happens and uh if we have to change it
51:22 - to like
51:23 - had 2.0 we can do that I don't I don't
51:27 - think we need to do it
51:29 - I think it just does the magic of so the
51:32 - result of this should be a double and I
51:36 - think it just magically does the right
51:38 - thing
51:39 - when it divides by two here
51:42 - but I think this should be the end of
51:43 - the code
51:45 - um
51:45 - I think this should work but I'm always
51:47 - this is the scary part where we go ahead
51:49 - and actually put in delete code and see
51:51 - what happens
51:54 - so I don't know let's do it I got
51:55 - nothing else to do and running low on
51:57 - time so let's go back and paste this
52:00 - solution and delete code
52:04 - and first I guess we'll just hit run and
52:07 - make sure it doesn't uh explode
52:13 - okay as I understand it I haven't done
52:15 - like a bazillion lead code problems but
52:17 - like it basically does like a sanity
52:18 - check on a couple of cases and if you
52:20 - when you hit submit it does like the
52:22 - full gamut of test cases so
52:25 - um now let's hit submit and see what
52:27 - happens here
52:31 - oh here we go okay
52:34 - so we have
52:37 - a okay so any first first things first
52:40 - it passed it's accepted um so our code
52:44 - works it does everything it needs to do
52:46 - it's past all their test cases
52:48 - awesome
52:50 - and actually the the run time here is
52:54 - excellent but it might be a little bit
52:56 - misleading so here we go so it's saying
52:58 - the run time is two milliseconds super
53:00 - fast it says we beat a hundred percent
53:02 - of other Java Solutions
53:07 - um
53:08 - but look but if you look at the
53:09 - distribution it's really dark this is
53:11 - like the darkest
53:13 - you can hardly see that
53:15 - but the the distribution is like
53:17 - basically it looks like everybody in the
53:19 - world got two milliseconds and then like
53:21 - hardly anybody after that uh did worse
53:24 - so those are all like super tiny
53:27 - so it might be that even though our
53:29 - solution is as fast as everybody else
53:30 - and saying it beats 100 it's basically
53:32 - as fast as everybody else's
53:35 - um and then memory usage was also great
53:37 - we beat um wow just about everybody
53:40 - I don't know how we're
53:42 - we should be impressed with ourselves
53:43 - that we did it with with such a good
53:45 - memory the other code Solutions I did
53:47 - I'd never hit that good
53:50 - so all right
53:53 - so overall mission accomplished we
53:55 - solved Elite code problem
53:58 - um
53:59 - in the quote-unquote naive way to do it
54:04 - now this is
54:06 - I got rid of all my notes here so this
54:08 - is the way that's like kind of the way
54:10 - you think of it first that okay you can
54:12 - just take the two arrays combine them
54:13 - and find the median easy enough
54:16 - there are ways we could even speed this
54:18 - up if we wanted to for example we don't
54:21 - even necessarily need to
54:23 - like
54:25 - create the merged array and find the
54:27 - middle of it
54:28 - what we could do is kind of is do our
54:32 - our kind of merge code
54:34 - and
54:36 - you know start iterating through both of
54:39 - our arrays at like we as if we were
54:41 - merging
54:43 - but then once we get to because we know
54:46 - the length of both of those arrays once
54:49 - we get to half of what the combined
54:51 - length would be we can stop and we can
54:54 - look at that number
54:55 - we don't even have to create the merged
54:57 - array technically we can just stop
54:59 - halfway through we can just step through
55:01 - you know plugging the lowest number and
55:03 - then stop when we're halfway through
55:04 - look at that number and say okay that's
55:06 - the median if it's if that total was odd
55:09 - and that minus one with the average if
55:11 - it's even so we could even if we could
55:15 - speed this up quite a bit
55:16 - just by doing that and the space
55:18 - complexity as well because we don't have
55:20 - to have this combined into array we can
55:23 - just step through it without actually
55:24 - adding it to an array
55:27 - a separate merged array and just say
55:29 - Okay combine them or don't combine them
55:31 - just walk through them and once you get
55:33 - halfway through you're done you can stop
55:34 - and you can return
55:36 - um I don't have time to code that but
55:38 - that's a
55:40 - um something you can do
55:42 - I'll probably once I'm done with this
55:44 - I'll I'll share this source and put it
55:47 - in the description or something I'll
55:49 - link it in some way it might not happen
55:50 - tonight but I'll make it available to
55:52 - you guys um
55:53 - no problem there so you can do that
55:55 - I'm trying to think if there's any other
55:57 - way to optimize this same type of
55:59 - solution
56:01 - maybe not
56:03 - um so there's not a lot of time I I told
56:06 - my wife I would be done at 11 I've got
56:08 - four minutes
56:10 - um the the thing about this that we that
56:13 - we talked about the beginning in the
56:14 - description here is that the they want
56:17 - the overall runtime complexity to be
56:19 - bigger of the log of M plus n right now
56:22 - our time complexity is Big O of
56:27 - uh M plus n the reason and that's the so
56:32 - it's the Big O of the basically this the
56:34 - the size of our combined
56:38 - um
56:39 - the size of the two com the two arrays
56:42 - combined because we have to Loop through
56:43 - that much stuff to do the merge portion
56:48 - of our solution
56:50 - and that's the you know the long pole
56:51 - that's what's going to take the longest
56:54 - um
56:54 - all this the rest of this stuff is just
56:56 - constant time that we're just looking at
56:58 - the value in the middle of it
57:00 - um
57:01 - so right now our solution is they go of
57:04 - M plus n it's essentially a linear
57:07 - solution which is good and that's why
57:08 - it's
57:09 - super fast just as fast as like every
57:13 - other solution that's on there but
57:15 - technically it's time complexity they
57:17 - want it to be better they want it to be
57:19 - bigger of log of n plus n
57:22 - the we aren't going to be able to talk
57:24 - through that solution
57:26 - now I'm what I'm considering doing is
57:28 - making a separate video it probably
57:30 - won't be live because it's it's really
57:32 - complicated how to do that
57:35 - um
57:36 - but make a separate video of how to do
57:37 - that I'll try and explain it very
57:39 - quickly though
57:42 - um just to kind of get the seed planted
57:43 - in your head whenever you have a
57:46 - logarithmic solution it's typically
57:49 - based on a binary search
57:54 - so that means every time instead of like
57:57 - having to Loop through a whole array for
57:59 - example a log time solution for
58:02 - something would be okay I know I don't
58:04 - have to look at this half so I'll come
58:07 - I'll I'll take my problem and divide it
58:10 - in half and look here and then okay I
58:11 - know I don't have to look at this half
58:13 - so I'll take my problem and divide it
58:14 - into and and then that's how it reduces
58:16 - the size of the problem that's kind of
58:18 - how you can think about a logarithm a
58:20 - logarithmic solution a log a big O of
58:24 - log of n plus n solution
58:27 - well so what you have to actually do is
58:29 - instead of merging both arrays you have
58:31 - to do a clever you have to work out a
58:34 - clever way
58:36 - to to kind of fake it instead of
58:38 - combining them into one shared array you
58:40 - kind of have to
58:43 - you have to you have to
58:46 - man it's real complicated that's I'm
58:48 - glad I'm not able to get to that in this
58:50 - live video because it's really
58:51 - complicated to explain I'm gonna have to
58:53 - take some time to do it
58:54 - but basically what you have to do is
58:59 - try to you kind of attempt to divide the
59:03 - arrays both in half and say did I divide
59:06 - them in half in the right way
59:08 - and if so then where I am is the median
59:11 - and I can use that and if it didn't
59:13 - divide it in half the right way it tries
59:15 - to shift how it divides it and then say
59:17 - divided did I divide the arrays in half
59:19 - the right way now and if so okay then
59:22 - what I'm looking at is the median I can
59:24 - return it and how it finds that Center
59:27 - is the the log
59:30 - is how it gets to that Big O of log of M
59:34 - plus n solution instead of Big O of n
59:36 - plus n
59:38 - but that so that's maybe that's the seed
59:40 - of how uh I can maybe plant it in your
59:43 - brain about how that has to work
59:47 - but um yeah so I'm gonna take I told my
59:49 - wife I'd be done 11 but I'm going to
59:51 - take a few it's 11 right now
59:53 - but
59:55 - um
59:56 - yeah basically a binary search tree is
59:58 - how it's going to do it
60:00 - um Zach forever that's essentially it
60:02 - and arvind why is it accepting it
60:05 - because lead code isn't smart enough to
60:08 - like know the time complexity of what I
60:10 - have given it
60:11 - and it's I'm giving the right answers so
60:14 - it's accepting the solution
60:17 - and another thing about this like the
60:19 - numbers are are small enough that like
60:21 - the time complexity just doesn't matter
60:23 - here that's another kind of frustrating
60:25 - thing about this it's it's not going to
60:26 - give me any arrays that are larger than
60:27 - a thousand elements
60:31 - with a thousand elements I could have
60:33 - like a
60:34 - I could have an awful awful time
60:36 - complexity solution and it's still going
60:38 - to be super fast and in this case this
60:42 - solution is way simpler than the faster
60:45 - solution and so if I were actually
60:47 - coding it to to put into production code
60:49 - and if I was working with this small of
60:51 - data this is the solution I would
60:53 - probably put in
60:55 - um
60:56 - I wouldn't have the way more complex
60:57 - solution that some poor sap in five
60:59 - years has to go and try and upgrade or
61:02 - change something in it he's not going to
61:03 - know what's going on because the
61:04 - solution is so it's too clever to get it
61:07 - down to that time complexity
61:09 - um but
61:11 - so anyway with this size of elements
61:12 - that doesn't really matter that much
61:14 - so that's why it doesn't know it's
61:16 - pretty fast
61:19 - um so yeah just take some other
61:21 - questions and then probably wrap it up
61:22 - and so yeah I really appreciate all of
61:24 - you guys I can't believe it like it's so
61:26 - weird I actually
61:30 - um
61:30 - this is my very first live stream it
61:33 - seems to have actually worked which was
61:35 - 95 of what I was going for I actually
61:39 - got a solution and it was accepted so
61:41 - not too much humiliation later
61:43 - um yes this is definitely going to be
61:44 - available to watch later
61:48 - um
61:50 - sometimes they give a raise with 10
61:51 - million elements yeah that's when you
61:54 - know like okay my my solution took 45
61:56 - minutes to complete which is worse than
61:59 - 98 of everybody else in the world that's
62:01 - how you know okay I need just a better
62:03 - solution but here the numbers are so
62:05 - small
62:07 - in reality the difference doesn't matter
62:09 - and you won't even notice it
62:11 - as we saw here the submission was
62:13 - already super fast
62:17 - um yeah when's the next live stream I
62:18 - don't know uh if people like this I can
62:21 - do more
62:23 - um for sure if I can find good problems
62:26 - to do or it doesn't even have to be
62:28 - elite code it can be something else
62:29 - um
62:30 - let me know what you'd like to see in
62:32 - something like this I'm very open to
62:34 - suggestions
62:36 - um
62:37 - and better go to your wife I better go
62:40 - to my wife I'm stretching it it's 1103.
62:44 - yeah I want to make sure you guys you
62:46 - know are enjoying yourself and I'm able
62:48 - to answer some more questions if you had
62:51 - um
62:51 - anymore but
62:55 - um but yeah if I end up doing any more
62:57 - live streams I'll
62:59 - I don't know I'll make a post like I did
63:00 - for this one I posted something saying
63:02 - hey I'm gonna do it tomorrow and then I
63:04 - put something up that you could that
63:05 - clearly said hey it'd come on this time
63:07 - and it's going to start
63:09 - um in general put up more content I when
63:12 - I started I was able to do a video every
63:14 - single week
63:16 - um I only had one kid then that was a
63:19 - couple of years ago
63:21 - um
63:22 - now it's much tougher I'm lucky if I get
63:25 - one out every I aim for every I try to
63:27 - get it I don't try to not that I try to
63:30 - not let three weeks pass without doing
63:33 - one I try to at least hit that
63:35 - but they take a while to put together
63:37 - and I have very little time outside of
63:40 - work and two kids and wife and
63:43 - family and everything we have to do
63:45 - there's just so little time left in the
63:47 - day I'm doing this at 10 to 11 at night
63:49 - when I should be
63:51 - talking to my wife or sleeping
63:53 - um to squeeze in something like this and
63:55 - there's prep and there's editing there's
63:57 - there's a lot that goes into it and I
63:58 - love doing it I really do and I wish I
64:00 - could do it more I wish I could create
64:01 - more course content do all kinds of
64:04 - stuff that I would love to do more of
64:06 - these live streams
64:08 - um but I put them out as much as I can I
64:10 - hope you guys still enjoy them and uh
64:14 - so yeah longest palindromic substring
64:17 - that would be kind of a fun one
64:20 - so yeah
64:24 - um yeah I should probably go to my wife
64:26 - uh she's expecting me told her 11
64:28 - o'clock I'm a little bit after so I
64:30 - can't thank you all so much for joining
64:32 - um it was a lot of fun I'm glad it
64:34 - worked out
64:36 - um yeah
64:37 - thanks guys so much let me know what
64:39 - else you'd like to see
64:40 - let me know if this was awful or if this
64:42 - was good and yeah I will see you all
64:45 - next time thank you so much for joining
64:48 - take care
64:51 - after that I gotta figure out how to end
64:53 - it stop streaming