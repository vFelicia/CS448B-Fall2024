00:00 - in this video we are going to create a
00:01 - sudoku solver in java
00:03 - it's going to be a full tutorial we're
00:04 - going to start from scratch and show the
00:05 - full process
00:06 - we're going to walk through the code in
00:07 - a way that is easy to understand so
00:09 - you'll be able to write it yourself
00:10 - my name is john and i do a new java
00:11 - tutorial video every single week so be
00:13 - sure to hit the subscribe button so you
00:14 - don't miss each week's video i also have
00:16 - a full java course available in the link
00:18 - down in the description if you're
00:19 - interested
00:19 - as always the full source code for this
00:21 - program is available in the link down in
00:23 - the description so go and get it
00:24 - if you're watching this video you're
00:25 - probably already familiar with the rules
00:27 - of sudoku but just in case let's go over
00:28 - them very quickly what you have is a
00:30 - nine by nine grid of numbers
00:31 - split out into nine three by three
00:34 - squares the goal is to fill out the grid
00:36 - with numbers
00:36 - following some simple rules the rules
00:38 - are just that each row
00:40 - each column and each three by three
00:42 - square must contain all numbers between
00:44 - one through nine basically what that
00:46 - amounts to is you can't have the same
00:47 - number twice
00:48 - in any given row column or three by
00:50 - three square first of all the game board
00:52 - that we're going to start with the grid
00:53 - we're going to use
00:54 - a two-dimensional int array so that's
00:57 - just int double array and we'll just
00:59 - call it board
01:00 - equals and this is the only part i'm
01:02 - going to paste in because i don't feel
01:03 - like typing it all out but this is the
01:04 - syntax you're going to want to use it's
01:06 - a two-dimensional array and with this
01:08 - layout you can kind of see what the
01:09 - board looks like
01:10 - and this board layout is just from a
01:11 - sudoku game generator that i found
01:13 - online so as you can see at the top we
01:14 - have like seven
01:15 - blank two blank five etc that
01:17 - corresponds to over here we have seven
01:19 - zero two zero five here since we have a
01:22 - 2d array of
01:22 - ins we have to use some number here so
01:24 - we'll just use zeros as the placeholder
01:26 - for blanks
01:26 - so now we have our starting sudoku board
01:28 - another thing that we're going to need
01:30 - many times in the algorithm that we
01:31 - write is just the the size of the grid
01:34 - so in this case we have a nine by nine
01:35 - grid so we're going to need that length
01:37 - of nine in a lot of places so let's just
01:38 - create a constant for that so that'll
01:40 - just be a private
01:41 - static final int grid
01:44 - size equals nine the next thing that
01:47 - we're going to need is some helper
01:48 - methods when we place a number in order
01:50 - to see if it's a valid placement
01:52 - we're going to have to see if that
01:53 - number already appears in that row of
01:55 - that column or that 3x3 square and if it
01:57 - does we can't place that number there
01:59 - so to do that we're going to need three
02:00 - helper methods for whether that number
02:02 - already exists in the row column or 3x3
02:04 - square
02:05 - so let's just start with the first one
02:06 - for seeing if that number already exists
02:09 - in the row so we'll just have a private
02:11 - static
02:12 - boolean this is a boolean so we can
02:14 - return true if that number already
02:15 - exists in the row
02:16 - and false if it doesn't is number in row
02:20 - and we're going to need to take in a few
02:22 - parameters the first one is
02:23 - the board itself so an int
02:25 - two-dimensional array
02:27 - called board and next an int for the
02:29 - number that we want to check is in the
02:31 - row and then one more int
02:33 - for the row number itself technically in
02:35 - this case zero through eight because
02:36 - we're going to be dealing with
02:37 - array indexes so for this we're going to
02:39 - want to create a for loop
02:41 - for int i equals zero i less than
02:44 - the grid size which of course is nine i
02:47 - plus plus
02:48 - what we'll do is say if the board in
02:50 - that row that was passed in
02:52 - at the current column of i that we're
02:54 - iterating through
02:55 - if we find that number that we're
02:57 - checking then we want to return
02:59 - true and if we get through that whole
03:00 - for loop and never find the number we
03:02 - know we can return
03:03 - false because we did not find that
03:05 - number in the row so that should do it
03:06 - for
03:06 - our is number in row method now let's
03:09 - create a similar method for
03:11 - is number in column so we still want a
03:14 - few parameters we want the board that
03:15 - stays the same
03:16 - we want the number that we're looking
03:17 - for in that column that stays the same
03:19 - but of course instead of taking in the
03:20 - row as a parameter we're going to take
03:22 - in
03:22 - the column that we're looking at as a
03:24 - parameter and a lot of this method does
03:26 - stay the same that we copied
03:27 - from the row method but instead of
03:29 - looking at the board at row row
03:31 - and column i we're going to be looking
03:33 - at the board at row
03:34 - i and column column for example if we
03:38 - pass in
03:38 - 0 as the column it's going to look at
03:40 - the board at position
03:42 - 0 0 1 0 2 0 3 0 etc
03:46 - all the way up to 8 0 to check if that
03:47 - number exists anywhere else in that
03:49 - column and if we do find it again we
03:50 - return true and if we loop through that
03:52 - whole column and don't find it we know
03:53 - we can return false that number does not
03:55 - exist in that column so those two
03:56 - methods are relatively simple but the
03:58 - method for checking whether that number
04:00 - exists elsewhere in that 3x3 box is a
04:02 - bit more complicated but again we'll
04:04 - start with a copy of the column method
04:06 - and make our modifications
04:07 - we'll just call this um is number in box
04:10 - of course we want to take in the board
04:11 - we want to take in the number that we're
04:13 - looking for but instead of just taking
04:14 - in the column or the row we're actually
04:16 - going to take in both so we can get the
04:17 - exact coordinates of the number that was
04:19 - passed in
04:19 - so we'll just add int row here this
04:22 - one's a little tougher to visualize how
04:23 - we're going to do it but let me see if i
04:24 - can make it make sense
04:25 - for example let's say we need to check
04:27 - if we can add the value
04:28 - 1 to this spot here you know we already
04:30 - have the code that checks the row or the
04:32 - column we see that one doesn't exist
04:34 - there so we need to check this local 3x3
04:36 - box
04:37 - so the method is going to get passed in
04:38 - the coordinates of this box that we're
04:40 - looking at
04:41 - and in that case that would be row one
04:43 - zero
04:44 - one so the row would be one and the
04:46 - column would be zero one
04:47 - two three four so it would pass in one
04:49 - for the row and four for the column what
04:51 - we want to do is get the coordinates of
04:54 - the top
04:54 - left corner of that local 3x3 box so
04:57 - that we can easily traverse that 3x3 box
05:00 - to check if that number already exists
05:01 - anywhere in there but that part is the
05:03 - part that's a little bit tricky how do
05:04 - we do that
05:05 - so we're actually going to need a couple
05:06 - of variables so let's create an int
05:07 - let's call it local
05:09 - box row for example here we come in with
05:11 - a row of 1
05:13 - but we want to start at this position
05:14 - here so we need to get the row of this
05:16 - position how do we do that
05:17 - well what we can do is take the row
05:19 - that's passed in and then subtract
05:21 - row mod so mods if you're not familiar
05:25 - takes the first number and divides it by
05:26 - the second number and gives you the
05:28 - remainder
05:29 - so in our example we have a row of one
05:31 - divided by three
05:32 - as zero with a remainder of one so what
05:35 - we get for our example is
05:36 - one minus one and our local box row will
05:39 - be zero which is exactly what we're
05:41 - looking for
05:41 - same thing for the column int local box
05:44 - column
05:45 - equals column minus column
05:49 - mod three again in our example the
05:51 - column that was passed in was 4
05:53 - so that would evaluate to 4 minus 4 on 3
05:56 - which is 1.
05:57 - 4 minus 1 so the local box column will
05:59 - have the value 3.
06:00 - so our local box row and column will be
06:02 - 0 3.
06:03 - so the zeroth row is this first row here
06:05 - and the fourth column
06:06 - one two three four so that successfully
06:10 - gave us the location
06:11 - of the top left corner of the three by
06:13 - three box we were looking at
06:14 - and this little formula works for any
06:16 - box in the grid all right so now that we
06:18 - have that top left location
06:20 - how do we use it well we need to do a
06:21 - clever little nested for loop
06:23 - we'll say for int i equals
06:27 - local box row go while i is less than
06:30 - local box
06:31 - row plus three i plus plus so that
06:34 - iterates through the three rows in that
06:36 - grid and the same thing for the columns
06:37 - so we'll do four
06:38 - and j equals local box column
06:42 - j less than local box column plus three
06:46 - j plus plus so this will loop us through
06:48 - that exact
06:49 - three by three grid that we want to and
06:51 - then we want to do basically the same
06:52 - thing we did before
06:53 - we want to check if the board at row
06:56 - i and column j if that spot matches the
07:00 - number that we're looking for
07:00 - if we find it we return true and if we
07:03 - get through this entire nested for loop
07:05 - and never find it we know it's not in
07:06 - that three by three box so we can return
07:09 - false all right so now we have our three
07:11 - checks for whether the number is in the
07:12 - row in the column
07:13 - or in the three by three box for
07:15 - convenience when we're writing our
07:16 - algorithm let's write
07:17 - one method that checks all three of
07:19 - those so we can just call it to see if a
07:20 - certain placement is valid
07:22 - so we'll have another private static
07:24 - boolean
07:25 - is valid placement and for that we'll
07:28 - need to take in
07:29 - the board again of course the number
07:31 - that we're going to put in that spot
07:33 - and the coordinates where we want to put
07:35 - it so int row and int
07:37 - column basically here we just need to
07:39 - call those three methods and if they all
07:40 - return false then we know this is a
07:42 - valid placement
07:43 - so we can just say return not is number
07:46 - in row and we need to pass in the board
07:50 - the number that we're looking for and
07:51 - the row and
07:53 - not is number in column
07:57 - pass in the board the number and the
07:59 - column
08:00 - and not is number in box
08:04 - where we pass in the board the number
08:07 - the row
08:08 - and the column okay now with all of
08:11 - those methods in place we can get to the
08:12 - real
08:13 - meat of the algorithm here that's going
08:15 - to be the method that does all the
08:16 - recursion and the backtracking and all
08:18 - the magic
08:18 - that makes this sudoku solver work let's
08:21 - quickly talk about how the algorithm
08:22 - we're going to use works
08:24 - if you've ever played this yourself it's
08:25 - going to be very different from how a
08:27 - human would play it but for a computer
08:28 - it works great
08:29 - this is the start state of our board
08:31 - right what we're going to do is traverse
08:32 - the board
08:33 - row by row and for each square what
08:35 - we're going to do is
08:36 - if it doesn't already have a number in
08:38 - it for that cell we're going to look at
08:39 - all the numbers between 1 and 9 and
08:41 - check whether each of them is valid to
08:42 - add in this space
08:44 - so for the second spot for example
08:45 - between the 7 and the 2 we're going to
08:47 - loop through the numbers 1 through 9
08:48 - until we find a value that is
08:50 - valid for this cell so can we set this
08:51 - value to 1 well no because one is
08:53 - already here in this three by three grid
08:55 - can we set it to two no same reason two
08:58 - is already present in three by three
08:59 - grid
09:00 - can we set it to three yes three isn't
09:03 - anywhere else in this row it isn't
09:04 - anywhere else in this column
09:06 - and it's nowhere else in this three by
09:08 - three grid so we set this value to three
09:10 - and move on
09:11 - and the process will start over
09:12 - recursively from the beginning we loop
09:13 - through the whole grid until we find a
09:15 - value that is not populated yet and it
09:17 - finds this first empty cell
09:18 - and it says okay is the number one valid
09:20 - in the space
09:21 - and yes it is because it doesn't appear
09:23 - anywhere in the row column or three by
09:25 - three square
09:25 - so you might be thinking what happens if
09:27 - we go through each of the numbers
09:28 - between one and nine in a given square
09:30 - and none of them are valid well that's
09:32 - where the backtracking comes in
09:33 - so let's say where for example we were
09:35 - evaluating this square here and we went
09:37 - through all the numbers one through nine
09:38 - and none of them are valid they're all
09:40 - present
09:40 - somewhere in the column the row or the
09:42 - three by three grid well what we do is
09:44 - we backtrack back to the last number
09:45 - that we set
09:46 - in this case this three here and since
09:48 - this number being three didn't result in
09:49 - us being able to solve the board
09:51 - we clear that out and keep trying all
09:53 - the rest of the numbers in that spot
09:54 - between 1 and 9. so can we put a 5 here
09:56 - no it's in the row
09:57 - a 6 is also in the row a 7 is in the
10:00 - grid
10:00 - but an 8 is valid in this spot so we set
10:03 - the cell to eight and move on again and
10:05 - the next iteration would again traverse
10:06 - this whole grid until it finds a blank
10:08 - spot and in the first blank spot it
10:09 - encounters it tries all numbers between
10:11 - one through nine
10:12 - and it keeps going through this process
10:13 - over and over again until it fills out
10:15 - the entire grid with valid moves so
10:18 - for that let's create a new method we're
10:19 - going to have a private
10:21 - static again it'll return a boolean and
10:23 - we'll just call it
10:24 - solve board and it'll take in as a
10:26 - parameter just the 2d
10:28 - into array board so to get started we
10:31 - are going to have a nested for loop so
10:33 - that we can
10:34 - loop through the entire grid so it's
10:35 - just for int row
10:37 - equals zero while the row is less than
10:40 - the grid size which would be nine of
10:42 - course row plus plus
10:44 - and nested inside that four in column
10:48 - equals zero column also less than
10:52 - grid size column
10:55 - plus plus since we're using zeros for
10:57 - the blanks this is a representation of
10:58 - the board kind of how the computer sees
11:00 - it so when we loop through this grid
11:01 - what we're looking for is a space that
11:02 - hasn't been set yet so in our case a
11:04 - blank is a zero so we just want to say
11:06 - if
11:06 - the board at that row and column is
11:10 - equal to zero
11:11 - we are going to do some stuff what does
11:13 - our algorithm say that we do when we
11:14 - encounter a blank well what we do
11:16 - is we start trying every number between
11:18 - one through nine
11:19 - and see if it's valid so let's write the
11:21 - code that loops through all the numbers
11:23 - between one through nine and tries all
11:24 - of them that'll just be another nested
11:26 - for loop yes there are a lot
11:28 - of nested for loops in this algorithm
11:30 - int number to try
11:32 - because it's the number that we're
11:33 - currently trying in this spot we're
11:34 - going to start it at 1
11:36 - and we're going to go while that number
11:37 - to try is less than or equal to
11:40 - that grid size which is nine
11:43 - number two try plus plus so we're
11:46 - looping through every number between one
11:48 - and nine for this spot and we have to
11:49 - check each of those to see if that
11:51 - number in that place
11:52 - is valid luckily we have this nice
11:54 - convenient is valid placement method to
11:56 - do that so we can just say
11:57 - if is valid placement we need to pass in
12:01 - the board
12:02 - the number we're trying the current row
12:05 - that we're looking at
12:06 - and the current column that we're
12:07 - looking at and if that is a valid
12:09 - placement
12:10 - we place the number there to do that we
12:12 - just say board
12:13 - at that row add that column set that
12:16 - equal to
12:17 - the number that we're trying and of
12:19 - course if the first number it tries
12:21 - isn't a valid placement it just goes to
12:22 - the next one
12:23 - so now that we've placed this number
12:25 - that we're trying in this spot
12:26 - this is where the recursion of this
12:28 - algorithm comes in and recursion is
12:30 - sometimes weird to understand but bear
12:32 - with me
12:32 - what we need to do is call this solve
12:35 - board method
12:36 - recursively here passing in that same
12:38 - board
12:39 - so it'll go through all of this code
12:41 - again when it's called recursively
12:42 - so let's talk through an example to see
12:44 - what exactly is happening so let's
12:45 - pretend in this second spot here we
12:47 - tried one it was invalid we tried two it
12:49 - was invalid
12:50 - we tried three and said okay it's valid
12:52 - that's here in this code we saw that it
12:54 - was a valid placement and so we set
12:56 - the number three in that spot so we've
12:59 - set this number three
13:00 - and then we recursively call our solve
13:01 - board method and what it's going to do
13:03 - is again
13:04 - traverse the entire grid finding the
13:06 - first blank spot so now it skips these
13:08 - because they've already been set and the
13:09 - first blank spot that it finds is here
13:11 - and it does the same thing it did before
13:13 - it tries every number between one
13:14 - through nine to see if it's valid first
13:15 - it tries one
13:16 - and that's not in the row it's not in
13:18 - the column it's not in the square so
13:19 - this is a valid placement so again it'll
13:21 - recursively call that solve board method
13:23 - and do the same thing over and over
13:25 - again filling out this whole grid but it
13:26 - won't work yet with exactly what we have
13:28 - here
13:29 - what happens if we're checking a given
13:30 - spot and we go through all the numbers
13:32 - through this for loop here one through
13:33 - nine and
13:34 - none of them are valid well what we
13:35 - actually want to do in that situation
13:37 - is return false returning falsier pretty
13:40 - much just means
13:41 - i can't solve this board it was unable
13:44 - to put a valid number in a certain spot
13:46 - on top of that here though where we're
13:47 - recursively calling this solve board
13:49 - method
13:49 - we need to say if that recursive solve
13:52 - board call returns true so just
13:54 - if solve board board then we want to
13:56 - return true here so basically if we
13:58 - tried this number at this spot
14:00 - and then the recursive call to solve
14:02 - board succeeded
14:03 - which means that all the recursive calls
14:04 - beyond that also succeeded and bubbled
14:06 - back up
14:07 - then we can return true here too this
14:09 - placement resulted in the whole rest of
14:11 - the grid being filled out successfully
14:13 - in the recursive calls
14:14 - but if it didn't and this recursive
14:16 - solve board call returned
14:17 - false we want to have an else here that
14:19 - actually clears out this placement that
14:21 - we tried
14:22 - so board at row and column
14:26 - we want to set back to zero so let's
14:28 - think about what that is
14:29 - actually doing we found that a certain
14:31 - number at a certain spot was valid
14:33 - and we tried placing it there and then
14:35 - we tried to solve the rest of the board
14:37 - and discovered that there was no way it
14:38 - could do it it couldn't figure out how
14:40 - to solve the rest of the board with this
14:41 - number that it was trying
14:42 - so that means that this number that we
14:44 - were trying doesn't actually work even
14:45 - though it's valid here right now
14:47 - we can't solve the rest of the board
14:48 - with this number set in this position so
14:50 - we clear it out and set it back to zero
14:52 - and then it just goes through the next
14:53 - iteration of
14:54 - this for loop here and tries another
14:56 - number there's one last little thing we
14:58 - need in this method and that is at the
15:00 - very end and that is at the very end if
15:02 - it gets through this outer for loop
15:03 - completely then we do want to go ahead
15:05 - and return
15:06 - true if you're struggling to understand
15:08 - exactly how this algorithm is working
15:10 - trust me when i say it is not just you
15:13 - if you're new at all to recursion or
15:15 - especially if you're new to java in
15:16 - general
15:17 - this kind of algorithm with the
15:18 - complexity that we're looking at can
15:19 - take a while to sink in
15:21 - so just give yourself some time to allow
15:22 - that to happen work through it in your
15:24 - head look at the code
15:25 - walk through parts of it step by step
15:27 - and after a while it'll become clear to
15:29 - you how this is working
15:30 - all of this crazy looking logic that we
15:31 - added in here it gives it the ability to
15:33 - basically
15:34 - walk through this entire grid trying out
15:36 - each number in each spot but if
15:38 - eventually it runs into a situation
15:39 - where it can't successfully place
15:42 - any valid numbers in a spot it allows it
15:44 - to backtrack
15:45 - and try different numbers in previous
15:46 - spots and it'll keep going backtracking
15:48 - whenever it has to
15:49 - to perhaps change numbers that it said
15:50 - before that resulted in it being
15:52 - impossible to solve but eventually if
15:53 - you start with a valid
15:55 - solvable board this will come up with a
15:57 - solution and it'll do so very quickly
15:59 - now that we've created this giant
16:01 - monster of a complex method
16:02 - we aren't calling it anywhere yet so
16:03 - let's go back to our main method
16:06 - and call that method to solve this board
16:08 - so we can just say
16:09 - if solve board board if that solve board
16:13 - method returns true then we know that
16:14 - that board was successfully solved so we
16:16 - can just print out system.out.printline
16:19 - solved successfully and if not it's most
16:22 - likely because the board that was
16:23 - entered
16:24 - wasn't a valid board in the first place
16:25 - there are some combinations of numbers
16:27 - that you can put on a starting board
16:28 - where it's actually impossible to come
16:29 - up with a solution so we can just say
16:32 - system.out.printline
16:33 - unsolvable board sad face
16:36 - now after this runs we should have a
16:38 - solved board but we aren't printing it
16:39 - out anywhere so we have to actually
16:41 - print it out to prove that we've solved
16:42 - the board
16:42 - so let's just whip up a quick method uh
16:45 - to print the board
16:46 - pass in our board and we're going to use
16:48 - the helpful stuff any clips to
16:50 - automatically create this method that
16:52 - doesn't exist yet
16:53 - and it gives us this auto-generated
16:55 - method stub so here again we'll just do
16:57 - a nested for loop
16:58 - for int row equals zero row less than
17:02 - the grid size row plus plus
17:05 - same for the columns and column equal
17:08 - zero
17:09 - column less than grid size column
17:12 - plus plus we're going to do system dot
17:15 - out dot print
17:16 - not print line the board at that row
17:20 - and column and then also after each row
17:22 - we want to print a new line so we aren't
17:24 - just printing out all the numbers on one
17:25 - giant line
17:26 - so system.out.printline we don't even
17:29 - need any parameters here we just want
17:31 - the new line and print line with no
17:32 - parameters gives us that
17:33 - so now the moment of truth let's run
17:35 - this program and see if it
17:36 - solves the sudoku board here we go
17:40 - okay it's all successfully and it looks
17:42 - like they are all correct awesome
17:44 - one more thing though this printout kind
17:45 - of stinks it's not laid out in the nice
17:47 - sudoku way it doesn't have all the lines
17:49 - and everything
17:49 - it's fine but it's just not up to my
17:52 - standards yet
17:52 - so what i want it printed out like is
17:54 - like this where we have the
17:56 - the lines between each subgrid basically
17:58 - what we want to do is
18:00 - after every third row we want to put in
18:02 - this line of hyphens to get this line
18:04 - here and here
18:04 - and after every third column we want to
18:06 - put in one of these pipes one of these
18:08 - vertical bars so first let's deal with
18:10 - these
18:10 - horizontal lines after every three rows
18:12 - so back in our print board method
18:14 - just inside this first uh for loop we'll
18:16 - say if
18:17 - row mod 3 equals zero so for every third
18:20 - row
18:21 - and the row is not equal to zero
18:24 - if we don't include this part here it'll
18:26 - also put a row of hyphens at the very
18:28 - top before the first row and we don't
18:30 - want that so for every third row except
18:32 - for that very top one we just want to do
18:34 - system dot out dot print line uh
18:36 - basically we want a whole bunch of
18:37 - hyphens and a new line
18:38 - so how many do we need here looks like
18:40 - 11 of them one two three four five six
18:42 - seven eight nine ten eleven okay let's
18:44 - go ahead and run that and make sure that
18:45 - part of the printout
18:46 - looks good and it does now let's go
18:48 - ahead and do the same thing
18:50 - with the columns where we put that pipe
18:51 - character between every third column so
18:53 - it'll look very similar we'll just say
18:55 - if the column
18:56 - mod 3 equals zero and column
19:00 - not equal zero because again we don't
19:02 - want the pipe before that first column
19:03 - we just want it in between those other
19:05 - sections do system
19:06 - dot out dot print that pipe character
19:09 - run it again and see how it looks
19:11 - beautiful so right now we're just
19:12 - printing out the board at the very end i
19:14 - think it would be really cool if we
19:15 - could print out the board
19:16 - at the beginning too before we solve it
19:18 - so we can see the before and after
19:20 - that's really easy to do we just go up
19:21 - here before we call the solve board
19:23 - method
19:24 - and call our print board method so we're
19:25 - printing it out before it's being solved
19:26 - run it again we should see the before
19:28 - and after and we do that is pretty
19:30 - awesome pretty neat right i think this
19:32 - algorithm
19:33 - is is really interesting if you've ever
19:34 - played sudoku yourself before in the
19:36 - newspaper or on your phone or whatever
19:37 - you would never think about solving a
19:39 - sudoku board
19:40 - like this it would be an absolute
19:42 - nightmare you do it a completely
19:43 - different way
19:44 - doing it as a human but as a computer
19:46 - that can try out just billions of
19:47 - numbers super fast
19:49 - this makes total sense it is really easy
19:51 - for a computer to do it can absolutely
19:53 - take some time to understand
19:54 - exactly how it is working but just give
19:56 - yourself some time to do that follow
19:57 - along and write out the code yourself or
19:59 - go to the link down in the description
20:00 - to download the full source so you don't
20:01 - have to type it out and just take some
20:03 - time to walk through it and play around
20:04 - with it and go online to a sudoku
20:06 - generator plug in the appropriate values
20:07 - here to the board and see how it works
20:09 - if you did enjoy this video or learned
20:11 - something please let me know with a like
20:12 - and be sure to hit that subscribe button
20:14 - so you don't miss each week's video and
20:15 - i really do appreciate you taking the
20:17 - time to like and subscribe it's the only
20:18 - way these videos get out to help more
20:20 - people and so i really do appreciate
20:22 - that thank you so much for watching i
20:23 - will see you next time