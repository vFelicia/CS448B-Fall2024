00:00 - in this video we are going to code the
00:01 - bubble sort sorting algorithm
00:03 - in java even though bubble sort
00:05 - definitely isn't the fastest sorting
00:06 - algorithm in the world
00:07 - it's a really great algorithm for
00:09 - beginners to learn and implement
00:10 - and we're going to see if bubble sort
00:12 - can sort an array of 14
00:14 - ins faster than the five hours or so it
00:16 - took to do it with bogo sort hopefully
00:18 - this is a little faster than that
00:19 - if this is your first time on the
00:20 - channel thanks for watching my name is
00:22 - john and i do a new java tutorial video
00:24 - every single week so be sure to leave a
00:26 - like and hit the subscribe button so you
00:27 - don't miss the new video every week
00:29 - before we get started as always the full
00:31 - source is available in the link down
00:32 - below in the description so go and get
00:34 - it a few weeks ago on this channel
00:36 - we coded a ridiculous sorting algorithm
00:38 - called bogosort that's the sorting
00:40 - algorithm where all you do is
00:42 - randomly shuffle your list and then
00:43 - check to see if it's sorted and if it
00:45 - isn't
00:45 - keep shuffling it until it is that video
00:48 - is here if you want to go check it out
00:49 - that algorithm is obviously silly and it
00:51 - just gets super crazy slow even with
00:53 - just a few values in your list here
00:55 - we'll be coding
00:56 - bubble sort now of course it isn't a
00:58 - super fast sorting algorithm
00:59 - but it is much better than bogo sort
01:02 - first let's just look at a visual
01:03 - representation of how bubble sort works
01:05 - this is a gif that's just taken from
01:07 - wikipedia
01:08 - what it does is it goes through the list
01:09 - starting at the beginning and it
01:10 - compares
01:11 - each number with the number after it and
01:14 - if those two numbers are not in the
01:15 - right order
01:16 - it swaps them and if they are in the
01:18 - right order it just leaves them where
01:19 - they are and then it moves to the next
01:21 - number and compares
01:22 - that number with the one after it and
01:23 - does the same thing and then when it
01:25 - reaches the end of the list
01:26 - it just starts over at the beginning and
01:28 - does the whole thing again you can see
01:29 - in this animation why it's called bubble
01:31 - sort because what happens is like the
01:32 - highest numbers
01:33 - kind of bubble to the top it keeps going
01:35 - through the list over and over again
01:37 - swapping values when they're out of
01:38 - order and it only stops
01:40 - when it goes to the list and doesn't
01:41 - have to swap anything and that's how it
01:43 - knows that the list is finally in order
01:46 - obviously if you go through the list and
01:47 - no two numbers are out of order
01:49 - you know your list is perfectly sorted
01:51 - and that's how this sorting algorithm
01:52 - knows that it's done
01:53 - all right so enough about the conceptual
01:55 - part let's get to coding
01:57 - i have pre-coded here just a little
01:58 - setup that gives us a
02:00 - random list of numbers that we can sort
02:02 - so quickly just to step through it
02:03 - we start out with an array of ins and
02:06 - we'll just make it size 10 so we'll
02:07 - start
02:08 - with just 10 inch that we're sorting and
02:10 - then i have this for loop here
02:11 - that goes through that end array and
02:13 - then fills it up with random ends
02:14 - basically between zero and a million and
02:16 - then once we have that array of random
02:18 - ins print out the before state where of
02:20 - course
02:21 - that list is not in order at all and
02:22 - then we have the spot where we are going
02:24 - to be writing our bubble sort sorting
02:26 - algorithm
02:26 - and then right after that we print out
02:28 - the array again and it should be in
02:30 - perfectly
02:30 - sorted order and this print array method
02:32 - that i'm calling to print the array all
02:34 - it's doing is looping through each
02:35 - element
02:36 - in the array and printing it out okay so
02:38 - here's where we're going to be writing
02:39 - our bubble sort algorithm so i think we
02:41 - want to start with a
02:43 - for loop let's start with the process
02:44 - where it goes from the beginning to the
02:46 - end
02:47 - of the list and for each element it'll
02:49 - check whether it is out of order with
02:50 - the one
02:51 - after it or not and if those two are out
02:52 - of order we swap them and then we move
02:54 - on to the next two
02:55 - so here's what that looks like we're
02:56 - going to create a for loop and we'll
02:58 - just do 4
02:58 - int i equals 0 and we're going to loop
03:01 - while
03:02 - i is less than the length of our numbers
03:05 - list
03:06 - minus one so you might be thinking
03:08 - usually when we're looping through an
03:10 - array
03:10 - we might go until i is less than
03:12 - numbers.length and not numbers.length
03:14 - minus one so why are we doing
03:15 - numbers.length
03:16 - minus one and the reason is when we're
03:18 - looking at the second to last element
03:20 - we'll be comparing it with the one after
03:22 - it which will be the last element
03:23 - so so there's no reason to look at the
03:25 - last element by itself there's nothing
03:27 - after it to compare it with so we just
03:28 - can stop at
03:29 - numbers.length minus one then of course
03:31 - i plus plus two increment i
03:33 - every time through the loop all right
03:34 - now each time through the loop here we
03:36 - want to compare
03:37 - the element of the index we're looking
03:38 - at with the one after it and if they're
03:40 - out of order we want to swap them
03:41 - so we can write that condition with a
03:43 - pretty simple if statement we can just
03:44 - say
03:45 - if numbers i that's the number
03:48 - at index i so the first time through
03:50 - this loop we'll be looking at the very
03:52 - first element the zeroth
03:53 - element in our array is greater than
03:56 - numbers
03:58 - i plus 1. so this will tell us if the
04:01 - number at the index we're looking at
04:02 - is greater than the next number so if
04:05 - this number is greater than the next
04:06 - number these are out of order and we
04:07 - need to swap them
04:08 - and swapping two numbers is kind of a
04:10 - classic programming problem when you
04:11 - want to swap two variables or here
04:13 - just two different elements in an array
04:15 - it's easiest to use
04:16 - a temp variable and i'll show you what i
04:18 - mean here so we can create int
04:20 - temp equals numbers i
04:23 - so temporarily we're going to save the
04:24 - value we have here at index i
04:27 - in our array to this temp variable then
04:29 - we're going to set
04:30 - that value at numbers i to be what is
04:33 - currently at
04:34 - numbers i plus 1. so now our element at
04:37 - index i
04:38 - has what was at i plus 1 and now we have
04:41 - to assign
04:42 - the i plus 1 index to be what was at i
04:45 - and we can do that by using our temp
04:47 - variable so we can say
04:48 - numbers at i plus 1 equals temp
04:52 - and that's why you need this temp
04:53 - variable if you ignore using this temp
04:55 - variable and just set
04:56 - numbers i equals numbers i plus one they
04:58 - both then have exactly the same value
05:00 - and the value you had at the i position
05:03 - is lost and you can't set the i plus one
05:05 - position to it so that's why you
05:06 - temporarily save it
05:08 - to a temp variable like this this is a
05:09 - very classic way to swap two elements in
05:12 - an array or two variables
05:14 - in any programming language all right so
05:15 - now we've coded one iteration of going
05:18 - through the list and swapping the
05:19 - elements that were out of order
05:20 - but going through it just one time won't
05:23 - make it end up in perfect order and we
05:24 - can even run our program to show what i
05:26 - mean
05:26 - so we can see our before state where we
05:28 - have just you know a completely
05:29 - random order and then after right now
05:31 - we're doing just one iteration of the
05:33 - bubble sort process
05:34 - so what that one iteration does while
05:36 - it's going through each element and
05:37 - swapping them if they're out of order
05:39 - what you'll end up with is the highest
05:40 - one will be at the top but all the other
05:42 - ones won't necessarily be in order yet
05:44 - so what the algorithm has to do is keep
05:46 - going through this array over and over
05:47 - again swapping elements that are out of
05:48 - order until it has a perfectly sorted
05:50 - list but that won't happen
05:52 - after just one iteration so how do we
05:53 - code this to iterate through this list
05:55 - over and over again doing that swapping
05:57 - until the array is finally in order well
05:59 - here's what we can do we can create a
06:00 - boolean
06:02 - we'll call it swapped something and
06:04 - initialize it first to true and then
06:06 - what we're going to do is enclose this
06:08 - entire for loop that we currently have
06:10 - in a while loop and the condition we are
06:12 - going to have for our while loop
06:14 - is swapped something you will use the
06:16 - swapped something boolean so each time
06:18 - through this while loop it looks to see
06:20 - if swap something is true and if it is
06:22 - it'll keep going through this while loop
06:24 - right now of course since nothing is
06:25 - changing the swapped something to false
06:27 - ever this will always be true and it'll
06:29 - just loop through this infinitely
06:31 - of course that's not what we want what
06:32 - we actually want to do is right before
06:35 - each time we start going through this
06:37 - for loop we actually want to set
06:40 - swap something to false what we're
06:43 - really going for here is we're trying to
06:44 - tell the program
06:46 - if you go through every element in this
06:47 - list and you didn't have to swap
06:49 - anything
06:49 - then you know it is already in perfect
06:51 - order but if you did have to swap
06:53 - something
06:54 - well you're gonna have to go through it
06:55 - again so that's why here right before we
06:57 - jump into our for loop we want to set
06:59 - swap something to false but then the
07:01 - moment that we
07:02 - find out oh we had to swap something
07:03 - something wasn't in
07:05 - order then we went to set swapped
07:06 - something to true
07:08 - so basically we start optimistically hey
07:10 - we didn't have to swap anything yet but
07:12 - then as we're going through our list and
07:13 - we discover ah there was something
07:15 - that was out of order and we're about to
07:17 - have to swap something
07:18 - we're going to set swap something to
07:20 - true in that situation where it did have
07:22 - to swap something
07:23 - once it gets out of this for loop and
07:24 - goes back to the top of the while loop
07:26 - it said
07:26 - ah yep i just had to swap something my
07:28 - last iteration through this loop so i
07:30 - better go through it again because my
07:31 - list still wasn't in perfect
07:32 - order and you might be thinking what's
07:34 - kind of weird here is we had to start
07:35 - with a swapped something of true
07:37 - that was just to get it in the while
07:39 - loop the first time
07:40 - if we started out with it set to false
07:43 - this value would be false and it
07:44 - wouldn't even enter the while loop at
07:45 - all so as a side note if you wanted to
07:47 - you could rework this with a do while
07:49 - loop and you wouldn't have to start it
07:50 - with true but i just tend to like the
07:52 - cleanliness of a while loop a little
07:53 - better than a do while loop
07:54 - but it would work great with a do while
07:56 - loop as well okay i think that should
07:58 - give
07:58 - us a working bubble sort so let's run
08:01 - our program
08:02 - with 10 random numbers and see if it
08:04 - sorts them on
08:05 - all right there's our before state all
08:07 - crazy and out of order
08:09 - and after we can take a look and it
08:10 - looks like our array is in
08:12 - perfect sorted order and with just 10
08:14 - elements it's very quick
08:16 - runs in about uh one second it looks
08:18 - like so that's pretty cool right we
08:19 - coded our own
08:20 - real sorting algorithm and we've tried
08:22 - it for 10 numbers let's increase that a
08:24 - bit
08:25 - and try to sort um a thousand numbers
08:28 - we'll run that
08:29 - and still finished uh very very quickly
08:32 - there's all the out of order ones
08:33 - and now we should see starting here's
08:36 - the after state and yeah it looks like
08:38 - those are in perfect order
08:39 - great and now let's get a little crazier
08:42 - let's do
08:43 - a hundred thousand elements here we go
08:48 - okay this one's taking a little bit
08:50 - longer it's still running it printed out
08:52 - our uh
08:53 - our unsorted list and now it's it's
08:55 - sorting them before it prints it out
08:58 - see what happens
09:04 - taking a while okay there it goes it
09:06 - looks like it sorted it in
09:08 - order nicely but it did take about
09:11 - about 25 seconds or so so it's kind of a
09:13 - long time it's not a very
09:14 - effective thing for really huge sets of
09:17 - data but if you remember our bogo sort
09:19 - with just
09:20 - 14 elements took something like five
09:22 - hours and here we're sorting a hundred
09:24 - thousand elements
09:25 - in less than 30 seconds so it's
09:26 - definitely not amazing but
09:28 - infinitely better than bogosort next
09:30 - let's step it up and sort
09:33 - a million elements here we go
09:38 - well it takes a while to just print out
09:39 - a million elements but it did finish
09:41 - that here we go
09:46 - bubble sort has a complexity of what's
09:48 - called big o
09:50 - of n squared what that basically means
09:53 - is
09:53 - as the number of elements that we're
09:55 - trying to sort increases
09:56 - the amount of time or the amount of
09:58 - memory needed to do that sorting
10:00 - increases at the rate of the number of
10:02 - elements squared what that means
10:03 - practically for us here in this
10:04 - situation
10:05 - is now that we increased the number of
10:07 - elements that we want to sort from 100
10:09 - 000 to a million
10:10 - it may seem like it should just take
10:12 - maybe 10 times as long to sort that
10:14 - because we have 10 times the number of
10:15 - elements but in reality because this is
10:17 - the big o
10:18 - of n squared it's probably going to take
10:21 - much much
10:22 - longer than just 10 times the amount of
10:24 - time it took
10:25 - to do 100 000. but we'll wait and see it
10:28 - could take
10:29 - uh quite a long time okay finally
10:31 - finished so it went from about 9
10:33 - 15 to 9 52 so it took about 37 minutes
10:37 - for it to finish sorting those 1 million
10:40 - inch so there's a pretty long time it's
10:42 - it's not near as bad as
10:44 - the 5 hours it took to sort 14 ins with
10:47 - bogosort but although this sorting
10:48 - algorithm works just fine
10:50 - it's not efficient enough for you to
10:52 - want to use for large data sets like
10:54 - this
10:54 - with an algorithm that has a complexity
10:56 - of big o of n squared you can kind of
10:58 - think about it that when you
10:59 - double the size of the data set that you
11:01 - want to sort
11:02 - give or take you're going to quadruple
11:04 - the amount of time that it takes so here
11:05 - when we went from sorting a hundred
11:07 - thousand elements to a million
11:09 - we went from taking less than 30 seconds
11:11 - to over 30 minutes so it's taking more
11:13 - than 60 times as long
11:14 - to sort an array 10 times as long if you
11:16 - enjoyed this video or learned something
11:17 - please be sure to let me know with a
11:19 - like and hit the subscribe button if
11:20 - you'd like to see a new java video like
11:22 - this one every single week and really
11:23 - thank you for taking the time to like
11:24 - and subscribe
11:25 - it might not seem like much but it's the
11:26 - only way these videos get out to help
11:28 - more people
11:29 - so i do appreciate it thanks for
11:30 - watching see you next time