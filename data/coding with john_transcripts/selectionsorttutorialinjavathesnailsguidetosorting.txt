00:00 - in this video we're going to be coding
00:01 - the selection sort sorting algorithm
00:03 - from scratch in Java it only takes a few
00:06 - lines of code so it's a great
00:07 - programming exercise for beginner
00:09 - programmers I also have a full Java
00:11 - course available and a link down in the
00:12 - description I've recently added a whole
00:14 - lesson all about Java streams to the
00:16 - course that a lot of people have been
00:18 - asking about so go check it out okay so
00:20 - we'll jump right into the code in just a
00:21 - second but first it's a good idea to
00:24 - talk about exactly how the selection
00:26 - sort algorithm works so let's say you
00:28 - have an array of integers like we have
00:30 - here the job of the selection sort
00:32 - algorithm or any sorting algorithm is to
00:35 - put these elements in their natural
00:36 - order which for integers is going to be
00:38 - least to greatest so let's look at this
00:41 - set of integers as an example so we
00:43 - start at the first position here and
00:45 - what we're going to do is search from
00:47 - this point in the array all the way to
00:49 - the end and remember the index of the
00:51 - smallest number that we find so we do
00:53 - that starting at four so the current
00:55 - lowest number we've seen is four and
00:57 - then we look at five now as five less
00:59 - than four no so 4 is still the lowest
01:01 - that we've seen and then we move on to 1
01:03 - is 1 less than four yes it is so so far
01:07 - one is the lowest number that we've seen
01:09 - and then we'll move on to the two is two
01:11 - less than one no one is still the lowest
01:13 - and then we move on to three is three
01:15 - less than one no one is still the lowest
01:17 - so now we've gotten to the end of the
01:18 - array and we know that the number one is
01:21 - the lowest number that we saw so what
01:23 - we're going to do is Swap this one with
01:26 - this first position that we were looking
01:28 - at so we put the one over here and this
01:31 - 4 over here so now we know that this one
01:35 - is the lowest number in the entire array
01:37 - and that this one is definitely in the
01:40 - right spot next we do the exact same
01:42 - thing but we start at the next position
01:44 - in the array so we're looking at five
01:46 - five is the current lowest number that
01:48 - we've seen and then we move on to four
01:49 - is four less than five yes so now four
01:52 - is the lowest number we've seen then we
01:53 - move on to 2 is 2 less than four yes it
01:56 - is so now two is the lowest we've seen
01:58 - and then we move on to three 3 is not
02:00 - less than 2 and we've now reached the
02:02 - end of the array and 2 is the smallest
02:04 - number that we've seen so what we're
02:06 - going to do is take this 2 and swap it
02:08 - with that position that we started at
02:11 - now we know that the one and the two are
02:14 - in their proper positions and we can
02:15 - move on to starting with this next
02:17 - position and we do the exact same thing
02:19 - we start here and find the lowest number
02:21 - so we start with 4 5 is not less than
02:24 - four three is less than 4 and we're at
02:26 - the end of the array so we do the swap
02:28 - Again by putting the 3 here and the 4
02:31 - here and now we know the 1 2 and 3 are
02:33 - in the right positions and we move on to
02:36 - the next position in the array so we
02:37 - start with the number five and then is
02:39 - four less than five yes it is we reach
02:42 - the end of the array and 4 is the
02:44 - smallest number we've seen so now we
02:45 - swap these two now once we're looking at
02:48 - the very last number in the array we
02:50 - know that there's nothing past it to
02:52 - switch with so we know that it's
02:54 - automatically already in the right place
02:56 - and so that's it we're done we now have
02:58 - the array of integers in the correct
03:01 - natural order now that we understand how
03:03 - selection sort Works let's jump right
03:05 - into the code okay first let's take care
03:07 - of some of the setup the first thing
03:09 - that we're going to need is an array of
03:11 - ins to sort so let's go ahead and create
03:14 - that we're going to make an INT array
03:16 - we'll just call it numbers equals new
03:19 - int array we'll give it some way larger
03:21 - arrays later to see how well the sort
03:24 - performs but for now just for testing
03:26 - purposes we'll start with just having it
03:27 - sort an array of 10 ins okay so now we
03:30 - want to generate some random numbers to
03:32 - put into this array so to Generate
03:34 - random numbers in Java we'll use the
03:36 - random class not just some random class
03:39 - the random class equals new random okay
03:42 - so now we're going to Loop through this
03:44 - numbers array filling it up with random
03:47 - ins so to do that we'll use a for Loop
03:49 - or and I equals zero we'll Loop while I
03:53 - is less than numbers dot length I plus
03:57 - plus all right so for each position in
03:59 - this array we're going to assign it a
04:02 - random number so we'll set numbers at I
04:05 - equal to random dot next int now let's
04:09 - use a wide variety of ants anything
04:11 - between like 0 and 100 000. so now just
04:15 - for testing purposes let's go ahead and
04:17 - print out our array just to make sure
04:19 - we're filling up the array how we think
04:21 - we are now a good way in modern versions
04:23 - of java to get a string representation
04:25 - of an array is to use arrays dot to
04:29 - string and then pass in your array now
04:32 - let's go ahead and run this and make
04:33 - sure we get a nice random selection of
04:37 - ins 10 ins they look pretty random
04:39 - between zero and a hundred thousand so
04:41 - we're all set next what we want to do is
04:43 - make the call to our not yet implemented
04:46 - selection sort method and then what
04:49 - we'll do is implement the selection sort
04:50 - algorithm inside that method so what
04:53 - we'll do is say selection sort and then
04:55 - pass in our numbers array now it's of
04:58 - course complaining that this method
04:59 - doesn't exist yet but IntelliJ makes it
05:02 - easy to go ahead and create this method
05:04 - automatically but then back up here
05:06 - right after we call our selection sort
05:09 - method what we want to do is print out
05:12 - the array again which should at this
05:14 - point be sorted in order from least to
05:17 - greatest so now our only job is to
05:18 - implement the selection sort algorithm
05:21 - here in this method the first thing that
05:22 - might be kind of useful to have here in
05:23 - our selection sort method is a variable
05:25 - that holds the length of our array just
05:28 - because we'll need it in a couple of
05:29 - spots in the algorithm so we'll just
05:31 - create an INT we'll call it length and
05:33 - set it equal to numbers dot length all
05:36 - right now remember we want to start with
05:38 - a loop that goes through every position
05:40 - in the array and then within each
05:42 - iteration of that Loop we'll have
05:45 - another loop that will try to find the
05:47 - smallest element from that point on in
05:49 - the array okay so let's start with the
05:51 - outer loop we'll say 4 int I equal to
05:56 - zero so that's starting at the very
05:57 - first element in the array the zeroth
05:59 - element we'll keep looping while I is
06:02 - less than the length of our array and of
06:04 - course iterate I each time okay so now
06:07 - within each iteration of that Loop we
06:10 - want to find the smallest number from
06:12 - that point on in the array inside this
06:14 - Loop first we're going to want a couple
06:16 - of variables one will be the lowest
06:19 - number that we've found so far while
06:21 - iterating through the rest of the array
06:23 - the second variable will be the index
06:25 - the position in the array where we found
06:28 - that smallest number and that's because
06:29 - once we identify that smallest number we
06:32 - need to know where it was in the array
06:34 - so that we can swap it to the front
06:36 - where it belongs so first let's create a
06:39 - variable for the Min number that we
06:40 - found so far and we'll initialize it to
06:43 - this first value that we're looking at
06:45 - so for example if our outer loop is
06:47 - currently at this number four we'll
06:50 - start with our Min being 4. and then
06:53 - iterate from there to the end of the
06:55 - array trying to find the smallest number
06:56 - so we'll set our Min equal to our
07:00 - numbers array at I and then we'll want
07:03 - that other variable for the index where
07:05 - we found that Min so index of Min we'll
07:08 - set that equal to I so now is when we're
07:11 - going to have this inner loop that Loops
07:13 - from our current position all the way to
07:15 - the end of the array trying to find the
07:18 - minimum number so for that we'll use
07:19 - another for Loop and since we already
07:21 - used I we'll use J for this one and
07:25 - we're going to initialize it to I plus
07:27 - 1. so that's going to be just one past
07:30 - this current starting position and we're
07:32 - going to keep looping while J is less
07:34 - than the length of our array and then of
07:36 - course iterate each time with J plus
07:38 - plus and actually one thing I missed up
07:41 - here in our outer array we don't want to
07:43 - go all the way to the end of the array
07:46 - for this remember we can stop at the
07:49 - second last position in the array
07:51 - because once we get to the very last
07:53 - position there's going to be nothing to
07:54 - swap it with we know that it's already
07:56 - where it goes and so there's no reason
07:58 - to actually look at it so over this
08:00 - outer loop instead of looping while I is
08:02 - less than length we can Loop while I is
08:04 - less than length minus one okay now back
08:07 - to this inner for Loop so it'll be
08:09 - looping from one past our current
08:11 - position in the array all the way to the
08:13 - end trying to find the minimum number so
08:15 - for each number that we run into we're
08:17 - going to say if the value of our numbers
08:20 - array at that position J is less than
08:24 - our current Min then we have found a new
08:27 - smallest number so we need to set our
08:29 - Min equal to the value of our numbers
08:32 - array at position J we have a new
08:35 - minimum and then we want to remember
08:36 - where we found that minimum two so we're
08:38 - going to set index of Min equal to J so
08:42 - now once we are done with this inner for
08:45 - Loop once we have hopped out of this
08:46 - inner for Loop we should have found our
08:49 - minimum number and we should know
08:50 - exactly where it is so going back to our
08:52 - example here let's say we were starting
08:54 - with this number four and we Loop
08:56 - through the entire rest of the array to
08:58 - find the minimum and we've identified oh
09:00 - one is our minimum so we want to take
09:02 - where we found that minimum and swap it
09:05 - with the number that we were starting
09:07 - with like this so here it'd probably be
09:09 - a good idea to implement some kind of a
09:12 - swap method now there's a few things we
09:14 - have to provide to a SWOT method first
09:16 - is the actual array inside which we want
09:19 - to swap two positions and then we need
09:22 - to send in the two positions that we
09:24 - want to swap values at so here we want
09:26 - to swap the numbers that are at position
09:28 - I with the index where we found that
09:33 - minimum number we want to take that
09:34 - smallest number that we found and move
09:36 - it to its correct position in the array
09:38 - all right so now let's go ahead and auto
09:40 - generate this method and we'll rename
09:42 - these in parameters here to make it a
09:44 - little bit more General we'll just call
09:46 - it int a and int B now to do a simple
09:49 - swap of two elements in the array first
09:51 - you're going to need some kind of
09:53 - temporary variable to hold one of them
09:56 - while you do the swap so we'll set int
09:58 - temp equal to our numbers array at
10:01 - position a and then we're going to set
10:04 - our numbers array at a equal to the
10:08 - value of our numbers array at B and then
10:11 - all we have to do is set the value of
10:13 - our numbers array at b equal to that
10:17 - temporary value that we set off to the
10:19 - side now I think that should be it now
10:22 - once it gets out of this outer for Loop
10:24 - the entire array should be sorted in the
10:27 - correct order let's give it a run and
10:29 - see if it works okay so here is our
10:31 - initial completely unsorted array and
10:34 - here it is afterward looks like in
10:37 - perfectly sorted order awesome so we've
10:39 - successfully implemented our selection
10:41 - sort algorithm now comes the fun part
10:43 - where we get to see how well it performs
10:45 - with larger and larger arrays of ins so
10:48 - first let's just take a second and set
10:50 - up some really quick uh timing code so
10:53 - right before we call our selection sort
10:55 - algorithm we're going to create a long
10:57 - to hold the current time we'll call it
10:59 - start time equals system dot current
11:02 - time Millies and then we'll do the exact
11:04 - same thing afterwards but we'll call it
11:06 - end time and then right before we print
11:09 - out our sorted array we'll print out
11:11 - that it took however many milliseconds
11:14 - so we'll calculate that as just end time
11:17 - minus start time and then Ms four
11:22 - milliseconds okay now let's go ahead and
11:23 - give this a run to make sure it works
11:25 - for our teeny tiny array of 10 ins
11:28 - alright so for an array of 10 ins it
11:30 - took basically no time at all which is
11:33 - to be expected now let's take it up a
11:35 - notch and let's say we wanted to sort
11:37 - out let's just say 10
11:40 - 000 ins okay so for ten thousand it went
11:42 - from 0 to 87 milliseconds so it returned
11:46 - pretty quickly but it's kind of starting
11:48 - to slow down now let's do 10 times that
11:50 - and step it up to a hundred thousand
11:53 - here we go okay it's printed out the
11:56 - before State the unsorted array and it's
11:59 - still still running oh okay it finished
12:00 - so it took about 6 500 milliseconds
12:03 - about six and a half seconds to sort a
12:06 - hundred thousand ins so it's starting to
12:08 - get noticeably slow let's try just
12:10 - stepping it up to three hundred thousand
12:12 - taking its sweet time on this one
12:15 - foreign
12:17 - you guys played that new Zelda game I
12:20 - hear it really does live up to the hype
12:21 - I just haven't had time to play it yet
12:22 - but I am looking forward to it oh looks
12:25 - like it finished okay so 300 000 ins
12:27 - took 51 936 milliseconds so about 52
12:31 - seconds almost a full minute so let's go
12:33 - ahead and step it all the way up to 1
12:36 - million good luck computer sorry
12:38 - all right yeah so I think I'm gonna let
12:41 - this do its thing and I'm gonna go do
12:43 - something useful with my life while it
12:45 - runs so I'll see you when it's finished
12:47 - all right so have we finished yes we
12:51 - have and only took 645
12:55 - 000 milliseconds like 10 or 11 minutes
12:57 - that's a pretty long time so you
13:00 - probably wouldn't want your uh
13:01 - production ready Enterprise application
13:04 - to be using selection sort to sort a
13:07 - million ins so we could do 10 million
13:09 - 100 million I'll leave that as an
13:11 - exercise to you the viewer if you have
13:13 - the time to dedicate to that go ahead
13:15 - and leave in the comments below how long
13:17 - it took for your computer to I don't
13:19 - know Source 100 million ins with
13:21 - selection sort now the reason this
13:23 - algorithm is so slow especially compared
13:26 - to things like quick sword merge sort is
13:28 - because selection sort has a Time
13:30 - complexity of what's called Big O of N
13:33 - squared now what that means is as the
13:36 - size of the array that you want to sort
13:38 - grows the time it takes to sort that
13:41 - array grows exponentially now the reason
13:44 - that it's Big O of N squared in
13:46 - particular is that our algorithm has
13:49 - nested for Loops that Loop through every
13:52 - element in the array within itself so
13:55 - that results in a Time complexity of Big
13:57 - O of N squared now if you'd like to code
14:00 - some way faster sorting algorithms check
14:02 - out my videos on quick sort and merge
14:04 - sort if you enjoyed this video or
14:06 - learned something please let me know by
14:07 - leaving a like and be sure to subscribe
14:09 - so you don't miss each new video as
14:11 - always thanks so much for watching I
14:13 - really do appreciate you being here to
14:14 - code with me and I'll see you next time