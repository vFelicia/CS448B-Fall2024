right in this video we will see how to insert a new node in our EE circular linked list insertion and beginning insertion R and an insertion at any specific position right see this is what a doubly circular linked list every node is having three parts data part this pointer is containing address of the next node and this previous pointer is containing address of the previous node right plus here I'm maintaining also tail pointer and head pointer head is containing address of the first node tail is containing address of the last node plus one more thing is see the next pointer of the last node would contain address of the first node right and the previous pointer of the first node would contain address of the last node right to make it a doubly circular linked list this list is having property of both doubly and circular right you can see this this link is bidirectional link right so now we will see first of all you will see how to insert a new node at the beginning of this list I won't I'll create a new node right allocate the memory dynamically using malloc function and here I will insert that node at the beginning right so here I assume that you have created this list means you have hold that create doubly circular link link list function and you have created this list in this list we have three nodes right that we have discussed in the previous video you can check out that video right and now I want to create I will create a new node and I will insert that node here see now how do you like that thing see I hope everybody know how to represent this thing in coding so this is how we are going to represent this node right for this node we will define our own datatype this we have discussed many times in the previous videos struct node is the name of that datatype this complete is the name struct node three parts are they data part one pointer is next pointer one pointer is previous pointer right so these pointers will contain address of the node that is why here will I am writing struct node because here we will write the data type of that thing whose address we are going to store in this pointer right we are maintaining two pointer head and tail so suppose we have created this list by calling that create function and now I am going to define this function in insert at beginning so now this node obviously we will have to create a new node right so for that thing we will take a pointer new node see this thing will already we have discussed many times in the previous videos right now we will allocate memory to this node how you will allocate a dynamic memory location using malloc function right see so the syntax of Milo this you will write that malloc function in the bracket you will write how much size you want size off the name of that datatype you type name is a struct node right and Mel up will return one C now this memory has been allocated how many bytes 12 bytes for for this for integer four bytes for four bytes for this pointer four bytes for this pointer four bytes for pointer in 32bit compiler eight bytes in 64bit compiler 12 bytes so this below piece of 12 bytes and this 500 is what address of the first byte so this malloc will return this pointer to the starting address and Malik will it and what void pointer and this pointer in this point we are going to store this head resna but this pointer is what pointer to node so you have to typecast this thing so how you will type cars to the syntaxes is you will write that there type s trick and this address we are going to store in new node pointer right so now suppose s is 500 and we have stored this inside this new node so now new not new nor corresponding to this node fine now we will ask from the user which data he wants to insert right using printf and scanner and how he will store that data see we cannot directly access these structure members so in data part I want to store now how you will access this data part the pointer to this node is new node so using new node address off the pointer name here you will write that arrow Prater means we'll write this thing in your when you will write a C program and that angular bracket right and here the name of which part I want to access data parts so here I will write data suppose user has entered here seven you can insert null or none but that is of no use because obviously we will we are going to update this point and this point because in this doubly circular linked list no pointer is null pointer right now see how we will insert this thing here now you will check if Phyllis is input in that case what you will do see now we will write a condition if head is equal to is equal to 0 it means there is no node in the list fine and this would be the first node this would be the last node in the list right both head and tail would point to the snowed fine now here you will write head and tail good point to this node that is in head and tail we will store address of this node that is 500 and this 500 is a new mode fine and plus now this good point to itself because the last node is containing address of the first node and this previous pointer of the first node would contain address of the last node but this has the first node this is the last node right so here also 500 and here also 500 in case my list is empty there is no node in the list right so now how we will access this thing both head and tail and all the three wonders new node is pointing to this node so you can access these data these parts using any of these nodes it's up to you right ok suppose I am writing new node P V s is equal to L new node next is equal to head see it is not compulsory that you will write these two lines here right here you can write head of next as equal to head head of previous is equal to head tail of next is equal to head tail of previous is equal to head because all the three 3pointers head tail and new node would be having that same address that is 500 right so it's up to you how you will read this thing now else suppose I have now three nodes in the list and now I want to insert this node here fine now what you will do see here what you need to update this this would be the first node right so now the next pointer would contain address so then now next node that is 200 right so now how we will access this thing new node next so here what you can write new node next equal to from where you can get this 200 in head we have 200 so here you can write head so now here I have 200 means now this is pointing to this node next length now this would point to the previous node so this previous pointer would contain address of the previous node so this would be the previous node now so here how many ok since this part head of previous so here what you can write head of 3 is equal to address of the previous node is 500 from where I can get 500 a new node I have 500 so here I can write new node right so now here I have 500 right so now this is pointing to this node right now you have to set 3 more things now this this previous pointer of the first node because this would be the first node now would contain address of the last node right so now how helixes this thing new node previous so here I can write new node 3 now address of the last node is hundred from where I can get this hundred in tail I have hundred so here I can write things right so now here I have what 100 means now this node this this pointer this pointer is pointing to the last move next thing this pointer see now the last node the next pointer of the last one would contain address from the first node so this address that is 500 this should contain have you Alex is the thing tail of next so here I can write tail off next equal to address of this that is 500 from where I can get 500 in new note I have 500 right so here you will update what here you will write 500 so now this is not pointing to this node right and this is also not pointing to this node anymore fine so now you can see here we have set this link this link this bidirectional link now this is pointing to this node and this 100 so this is pointing to this node so you can see this this link is bidirectional right next thing last thing you need to update what head now head would contain address of this node because this would be the first node now so head is equal to new node because address of the newly created node is if you know the pointer fine now head is containing 500 so head is not pointing to this node now head is pointing to this node right so I guess we are done with that insertion at beginning say now here it is not compulsory that you will write all the lines in this order fine see but in some point you have to take care like this here at first of all you can update these nodes then you know new node next new node pointer means these two pointers so here you can write you know next is equal to head after that new node previous is equal to tail like this rather than head previous is equal to no no no after that you can write head previous is equal to your own but what you need to take care is this head is equal to a new node in this you cannot update first here because if you have updated head is equal to no new node at starting here means head is now pointing to this node now how you will access this thing fine because we have broke we have broken this link and this node is also not pointing to this node because we haven't said this link right so we cannot update head here this you have to take care these points you have to take it after updation of this thing head previous is equal to new node after you can update this head has a head is equal to no no right but it is not compulsory that you will write all the lines in this order as I have written fine plus one more thing what you can do see here new node previous is equal to take a tail here also a new node previous is equal to tail you know next is equal to head and you know next is equal to head right both the lines are same so what you can do before if and else here after taking this data here you can write both the lines thus new node previous this new node next here before offense not after else you can trace out this algorithm this program by writing these two lines here rather than if in if and else block fine plus second cases you can trace out this thing by writing these two lines after else block you will find out the difference you will find out the mistake automatically fine you can write down these line before if it's not after hyphens right so now we will see how to insert a node here at the end of the list so now we will define the function insert it and write this node we have created using these lines only user has entered the data eight here right now we will insert here what do you need to change in this code see if head is equal to 0 means there is no node then this would be fine right all the three lines would be fine as it is in else part you need to change first of all we will set these pointers now this would be the last node right so now the previous pointer of this node would contain address of the previous node right because after inserting this tail would point so this node means tail is equal to a new node but before updating this tail what you need to take care you have to update this thing because here I want to insert address of the this node previous node and from where I can get this hundred in tail I have 100 right so before updating tail first set this link new node previous here what you will write new node previous here you will store what address of this node that is until I have the sadness so now here 100 right this is pointing to this node now now this will go into the next node so here till next tail off next would contain address of this node the next node because this would be the next node after the snow 700 so from where I can get 700 in new node I have 700 so now here I have 700 so now this is not pointing to this move now this is pointing to this move now we have set these two links now you have to set what this link and this link write a new mode next here what you will store the next pointer of the last node would contain address of the first node in a double circular address of the first node is 500 right now here we don't have 500 this new node is pointing not to this now now the address of this first node is always in the head pointer so here you will write head right so here I will write 500 means this is now pointing to this node we will draw this link after setting this link so now this first node previous no no first no to contain address of the last node right so head of beam head of breathe the address of last node is in new node pointer so here I will write new node it means now here I have 700 right so now this is also pointing to this node and this is pointing to this node so we can set this link right like this this link is bidirectional this and this right to make it a double circular fine now last thing you need to obtain this tail pointer now tail would point to this node right in tail we will store 700 so from where I can get 700 in you know LaHaye of 700 so now until I have 700 so now tail is pointing to this node and that is done this is how you will insert a data a new node in the last over the EE circular linked list so I hope you got this coding the diagram is little messed up but I guess you are getting my point fine how you will insert the data at beginning at and at end so now we will see how to insert a new node at any specific position so now we will insert this node right and suppose position is three any position you can take position three means one two three here I want to insert you can say before this after this right here three and after that this would be fourth node position one means here at the beginning on you right now if I give position five it means there is no position five so it should print some proper message that is invalid position right now see how we will insert this thing now suppose position is well it we have inserted position is three so this node I want to insert here at position three one two and three now what do you need to update see here the previous node of this previous pointer of this node would contain address of the previous node that is address of this thing right that is three hundred we will set this link plus the next point of this node would contain address of the next node that is hundred we will set this link press the next pointer of this node would contain address of the next node that is this one this would be the next one that is four hundred here also you will store 400 because the previous point of this node would contain address of the previous node right so now you have update for pointers here now see how we actually update these links see to apne to insert this node here obviously we need to reach to this position now till position 1 because we need some pointer pointing to this node if any pointer is pointing to this node then only we can access this pointer this pointer and this point at this point we can access using the new node for inter only so we need some extra pointer you have to traverse the list till that position suppose in my list I have a 15 nodes and I want to insert at position 10 so first of all I have to reach till position 10 now you can say till position 9 position 1 after that only I can insert there because here we can directly access any node in the list we have to reach we have to traverse the list you can access only sequential at starting in this case we have only what this head pointer and this tail pointer value right now see we will take another pointer you can say 10 pointer right now will ask the user for the position so for that case also you have to take another variable in that variable you will store the position right and for traversing we are taking another variable that is I and I'm initializing this I with one right plus one more thing now suppose position is five then this program should print a proper message that this is invalid position right now you have to find out the length of the list right you have to count the number of node in the list here the length is one two and three so when we the positions are one two and three only right if position is less than one position is greater than this three greater than the length then it should print invalid position right so here I'm also going to call a function that is gate length function and that function would return this length of the list total number of nodes in the list right and that thing also we have discussed when we were discussing the implementation of singly linked list or if you want me to make a video in that case also how to find out the length of the list you can tell me in the comment box right so for storing that length of the list I am taking a variable you can say L right now first of all I ask from the user for the position so this is our using printf and scanf i have us from the user for the position and suppose user has entered position is three right and we have a variable III is equal to one in i we have one only fine now we will call a function you can say get length and that value I am store I will store in this variable that is L so where I am calling that function get length you have to write down the proper code for calculating this when you write the length of the list now gate length function would return three the length is three so in L variable I have al you three right now I would I'll check for the position if position is less than one or position is greater than this L it means here you will print a proper messages that is invalid position in printf else if you can see if position is equal to is equal to one means here only I want to insert insertion insertion are beginning so here I will call that function insert add banging and that we have discussed already right you will directly call this function ends if position is valid and position is not one like in this case position is three then what you will do so now we will allocate memory to this node because here we have only declared this new node pointer we haven't created this node right so now we will allocate the memory using that malloc function and the funk that send text I guess everybody know how to write down that thing and we will ask from the user for the data which data he wants to insert using printf and scanf I guess everybody know the syntax and suppose user has entered minus one now I want to insert this node here now first of all we will traverse this list tail position minus one till two so now I have taken the stamp and we will initialize this temp right and ten put point here because from the first node only we are going to we are going to start our traversing right so the stem should contain address of the first node so now after this only after this declaration after this line in POS I and this L before taking the position here only you can say what temp is equal to head here you can write this line now temp is pointing to this node right now I will start a traversing we will apply a while loop while I less than position minus 1 3 position minus 1 we are going to traverse till then we are going to move the stamp so temp is equal to temp of next and what I plus plus so here you can see I value is 1 position minus 1 position is 3 that is 2 I left one less than 2 yes temp is equal to temp of next temp is pointing to this node temp next is 300 so this 300 would be stored here now so now temp is pointing to this node right 300 I plus plus now I becomes 2 now again check the condition to less than position one to listen to know so now we are going to we are not going to move this temp we are going to stop you will not enter this value we will the control would go out from this while loop right as you can see we have really still position after this I want to insert right so now the coding I will right here so now after this while what you will write how you will insert this thing here see first of all it's better to create these new links rather than updating the previous links because for updating this you have to break these links so rather than breaking the already set links first of all set the new links so update these links here new node previous and you know the next so in new node previous what you will store here address of the previous node that is this node 300 from where I can get 300 in temp I have 300 so here damn means this is pointing to this node now say to this link means how you like says that thing you know that pointer to this node is new node new node next is equal to here I want to store address of the next node that is 100 from where I can get 100 here I have hundred and pointer to this link is temp so you can access this using temp next temp next so here I have hundreds what this is now pointing to this node right now update these links see how you like says this thing here I will store address of the next node that is 400 so temp of next as equal to new node fine now here the previous pointer of this node would contain address of the previous node that is this node that is 400 but how you will access this part of this node is there any pointer to this node we do not have any pointer to this node right see don't consider this tail pointer because suppose in list I have 15 nodes and now I will I'm inserting at position 3 so tail would point to the that 15 node right we cannot access this node using T so I don't consider this tail we cannot access this using the state right now see how we will access this thing we don't have any pointer direct to this node but address of this node is 100 and here I have hundred right this pointer this node is still pointing to this node right we haven't broken this link so now can we access this part yes we can access using temp pointer temp off next so here what you can write temp next it means we have reached temp next means 100 means we have reached till the sadness once we reach to this address right then you can access this part of this part or this part any of the 3 through parts just by writing again an arrow and name of that Puttnam of this part is previous now here I want to store address of previous note that is 400 so from where I can get 400 a new node I have 400 now here I have 400 so this link is no more and this is now pointing to this node now you update this thing temp of next temp of next here you will store address of the next node that is 400 a new node I have 400 so now here also I have 400 so this link is no more and this is also pointing to this node right and this is done this is how we are going to insert a node at any specific position this you need to take care of this thing that if position is 1 then you call that inserted beginning function right in that case we cannot write down these things these lines will not work and now in main function you can call all these function first of all create function then you can call display function then you can call inserted beginning then insert at end insert at position right write down the name of those these function right and after that you can again call the display function right so that's all about insertion in next video we will see how to delete a node from a doubly circular linked list so I've seen the next video till then bye bye take care