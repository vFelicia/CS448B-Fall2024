so in the series of da lectures today i am going to talk about the characteristics of an algorithm i have already discussed what is an algorithm and how to analyze an algorithm means the types of analysis of an algorithm like priority analysis of and positivity analysis right and in this video we will discuss about the properties of an algorithm so ah basically you can say many properties are there but generally what we read in the book are there are five properties of an algorithm first one is input it means an algorithm can have zero or more inputs it's not like that algorithm must have at least one input no there may be an algorithm which which accept no input like what if you want to print uh hello world in that case the input is what nothing you are just printing hello world there is only output there is no input right so algorithm may contain zero input and suppose let us take an example of uh you are writing an algorithm of sum of two numbers in that case input is two numbers two inputs are there right so you can say algorithm can have either zero input or more inputs zero or more welldefined inputs second one is output so we cannot say that algorithm can have zero output means no output would be there no algorithm should have at least one output maybe input may be zero like in hello world input is nothing but output is what yes one output is there you are printing hello world so an algorithm should have at least one output maybe more than one output can be there but at least one output see if there is no output of an algorithm then obviously what is use of that algorithm why we are writing that algorithm right third is what unambiguous or you can say definiteness what does this mean see obviously in algorithm we are writing algorithm is what are the sequence of instruction or steps so every instruction must be clear there should be no ambiguity in those instructions now what does that mean see suppose if you are writing read if you are writing an algorithm for sum of two numbers and you are writing statement read means what what are you reading this is what unambiguous statement it is having multiple meanings and if you will write read a read b it means this statement is having a clear meaning we are reading a variable a we are reading another value for another variable b right so every statement must have a single meaning only one meaning every it means every statement must be unambiguous there should be no ambiguity it should be very clear you can take that real life example in the previous video also i have taken that example like suppose you are if you are preparing t that is also you are you in that case also you are following some steps right and this is what a kind of algorithm so in that case if you say like take a pan put it on flame and add now add means what what to add maybe you can add salt or anything else so that add step that instruction is having multiple meanings that is ambiguous we are not clear about that if you say add water add tea leaves add sugar add milk that has clear statements clear instructions there is no ambiguity right so same in the case of algorithm every instruction must be clear and precise there should be no ambiguity right i hope you got this mind next one is finite finiteness means what every algorithm must contains finite number of steps means the steps must be countable it's not like that you are writing steps infinite steps are there right there is no end like you can take this example if you are writing in program and if you will say while one and if you here print something then this is always true so this would be an infinite loop right it is not going to end until you forcefully terminate it right so it should not be a case something like this every algorithm must have finite number of steps and every instruction within that algorithm must take finite amount of time for execution right it's not like that there is this kind of thing like infinite loop is there so this instruction is having taking mult ah taking infinite time you have to forcefully stop this so algorithm must terminate after a finite number of steps next one is effectiveness means it should perform that task for which you have written that algorithm it should be effective it shouldn't contain any unnecessary statements like the same example that algorithm for t is what four or five number of steps right but those steps are effective ultimately you will get an output ultimately you will get t like for example let us take this example sum of two numbers and here you will write sum is equal to a plus b and here you can print sum here you can say start and here you can say end so this is what in simple algorithm so that output of this algorithm would be obviously the sum of these two numbers it is effective and it is not containing any unnecessary statements like i am not writing here read c because i am not using c anywhere and one more point you can also add like every statement every instruction in that algorithm must be feasible it should not be imaginary right so for those who are interested in competitive coding i just want to inform you that an academy in collaboration with code chef have launched a course to learn competitive programming they'll focus specifically on competitive competitive programming right in that course you can attend live videos live sessions and if you are not able to attend the live session then you can watch the recorded session as well and these uh videos these lectures would be provided by the top educators by the top faculties those who are already toppers of acm icpc and many of them are working in mncs like flipkart and google and they'll teach you all the important topics for competitive programming like dynamic programming greedy algorithm string analysis and all as well as they'll teach you how to solve a particular type of problem like how to solve this type of dynamic programming problem right and if you like their free classes then you can go for their paid subscriptions they will give you the proper structured course so this is the pricing detail and here if you use my code then you will get 10 percent discount my code i'll provide you in the description box you can check out there plus one more thing here if you go for the paid subscription you can then also watch the upcoming uh lectures like on what date another lecture upcoming lecture would be there right so the the link of this course and my code i'll provide you in the description box you can check out there and if you like it then you can go for it so now that's it for this video in the next video i'm going to discuss about asymptotic notations so now i'll see you in the next video till then bye take care