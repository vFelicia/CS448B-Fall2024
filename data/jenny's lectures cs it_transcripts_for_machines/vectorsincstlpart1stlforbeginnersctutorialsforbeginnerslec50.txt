hey everyone I hope you are safe and doing good so in the series of learning C++ programming language we have discussed arrays in C++ 1D array 2D AR and with some coding exercises as well right now next important topic is vectors so I'm not feeling well so please tolerate with me especially my voice so now next topic is vectors in C++ right I hope you have heard a tomm STL standard template Library vectors are part of this thing STL don't worry we'll see what is STL first then we'll come to vectors right but these are extremely important and useful if you are working in C++ or learning C++ right because see if you want to solve those lead code problems and if you have tried one or two then in the solution panel in this case solution side you see a term vector and almost everywhere you see this Vector so what is Vector we'll see in this video how vectors are different from aray if we have aray then why we are using vectors right how to declare a vector how to initialize vectors these things we'll see in this video right so first thing what is stn standard template Library as the name suggest template library right so like in your college or school also you have a library there we have some books right you go to that Library if you you know if you want some book then you get the B book issued from the librarian and you just read read that book or take notes and then return the book to library again right or maybe if you sit in the library and read any book and then you know you can't bring that book to home without get issued from the librarian right right so there are many books anyone you know any student from that University or college can access that book or there are public libraries as well so anyone can go there and access any book right you don't need to purchase each and every book you want right so it is going to save your money as well so same thing in programming also is this this Library this library is a you can say collection of some data structures algorithms and some other components as well that can be used to simplify the development of C++ programs that you can use those functions those algorithms those data structures those are already implemented and stored in that library that we can use to wrer program to wrer project it will save our time as well right so this is what STL basic the main idea of using STL is to reuse the code so that you don't have to write the code again and again suppose if you want to sort something so if you want to write uh um sort something so you will write that complete code of sorting maybe merge sort quick sort or any sort right so rather than writing the complete code of sort in in this Library we have a function for sorting so directly we can use that function right so in one line we can apply sorting in our our program rather than writing the complete code because this complete code code is already written in STL so we can directly use it so obviously it is going to simplify our life right it is going to save our time and our program efficiency would be more because these algorithms these data structures has been implemented with some optimized algorithms so if you use these things already prebuilt know these prebuilt things in our program then definitely it is going to speed up the execution of our program right so there are always you know many plus points or you can say many advantages of using this STL that is why we are now learning STL especially one part is Vector now Vector is part of STL Vector is a class actually so whenever we are going to create or declare a vector you can say we are we are creating an object of that vector class right so it is basically a class like arrow is a derived data type we say a data structure same like vector is we can say it's a class or it's like a container right in STL we have like it's a set of container like vectors list map many data structur stack Q many things we are having in STL that we can use right I hope now you got the basic idea of STL maybe if you are not getting a complete video on STL what is STL we can make a separate video but for this video I hope you got the idea what is STL right and vectors are part of STL right so if you're going to use this STL in our program when you write your program then definitely it is going to save your time and effort right now what are vectors see what are arrays arrays are collection of homogeneous State items like I have an AR array a so here we can store five data items of type integer only same vector vector is also a container it's like a container or collection container means a box like like this is a container like a box so here in this box I have my marker My Ink my pen and everything right mix but we canot say it is a vector because Vector is a collection of in that container Vector container we can store similar type of data items so if this is a vector then I can store only same type of data items like I can store only maybe markers only no ink no pen same data item so this is what a container or a vector if I am storing same type of data item I hope you can relate this kind of thing so now vectors are how vectors are different from arrays now because vectors are Dynamic arrays now what does that mean here I can store five elements I want to store suppose 10 elements then what you have to do just you can declare another array a b of 10 elements right or maybe you have to just resize it 10 so in this case first the aray size was 1 2 3 4 5 next next array would be another array would be created and having 10 size right it's not like that within the same array another five blocks would be allocated no another array would be created so manually you have to change the size of array is fixed it's not Dynamic array size cannot be increased or decreased at run time right but Dynamic array is is what the size of that array or that Vector is like a dynamic array that is used to store the elements and manipulate those elements right and the size of vectors can be automatically increased and decreased at run time while you are inserting an element and deleting an element if you want to insert an element a vector will automatically increase with size right if you delete then automatically will shrink the size we have a function like shrink to fit that function we can apply right that is why vectors are known as Dynamic arrays Vector can change their size at run time automatically means they can increase or decrease their size automatically but how I told you Vector is like a container sequence container sequence means because all the elements of vectors are in a strict linear sequence right like this in a strict sequence suppose this is the vector I to 1 2 3 0 1 5 like this and can be accessed with the help of their position same with array index start from 0 1 2 3 4 something like this and last element is at size minus one and first element is at zero same as ARS right and if this like it is a container so in container like we have a allocator object I mean the container container uses allocator objects to handle the storage needs automatically right so they have an allocator object that is why we are saying like the vectors can increase and decrease their size at runtime right so that a locator object will handle these things the storage needs at run time right now same in arrays these elements are stored in contigous memory location same with vectors these elements are stored in contigous memory locations index start from zero and like this same data type of same kind of element same type of element we can store in one vector these are same with same character character characteristics of arrays only difference is vectors are Dynamic are means they can s change their size at run time automatically automatically right how these are changing how the size is to be increased and like this those things we'll be discussing one by one in coming videos right now I hope the basic idea of vectors are clear to you guys one thing that also different Vector from AR is vectors can also provide bound checking in Array there is no bound checking means if this is an array if suppose this is an array of name a and here if I want to access element 10 so it will give some garve value but ideally it should give an error like the array size is only 1 2 3 4 5 six elements so we cannot access this this is out of bound but it will not give any error so there is no bound checking arrays but vectors provide you bound checking right there are some functions that provide you bound checking right but same if this is Vector suppose this is Vector not AR this is vector vector a right same if you use this these subscript and if you want to access the index 10 then it will not provide you bound checking it will give some garbage value but there are certain functions that do bound checking those functions also we'll see because they are many ways to access elements in a vector either we can use this subscript kind kind of thing or we can use add function right so some in some other function it proide it provide bound checking but if you use this thing to access any element in this case vectors also do not pro provide bound checking so please note these points right now how to declare vectors we use same the vector here we use the type data type or we can say object type because Vector I told you is a class when you are creating a vector means we are creating an object of that class right so object type here we write the vector name right and if you are using using names space STD then it's fine if you're not using that thing then STD here and these this operator scope resolution operator STD scope resolution operator this STD this Vector this is what you can say it's a name space for vectors right okay object type Vector name and size is optional here I'm writing the complete syntax so I'm writing here size as well in bracket in this bracket right so the size is optional you don't need to give size if you don't want to it's okay and if you want to declare a vector with size then you can give right so Vector here the type here Vector names so for example STD vector and I'm taking a vector of type int and numbers that's it I'm not giving any size take another example also s DD Vector like C and WS any data type you can take here it's fine right so these are example of vectors or if you want to declare a vector with size if you want to give size you can give let's take this example I want to modify this thing so here in these brackets five sorry bracket would be these round bracket this is we have declared a vector with size these are with no size so here if there is no size then it would be an numbers it would be an empty Vector right now we cannot store any number but the size can be increased according to our need if you want to store any element then size would be automatically increased automatically here also this is also an empty Vector we cannot store any element right now here but if you want to store something then you can initialize this vector and size would be automatically allocated automatically increased right so these thing would be handled by Vector automatically because this is not array this is dynamic array so like we can say Vector is a array that can shrink and increase its size at execution time automatically right one more thing if you're using this class this Vector then obviously you have to include that vector class Vector Library above like this hash include Vector like this right you cannot directly use this Vector from from standard template Library without using this it's like you have to get issued Vector from STL right because if you want to book any book from that Library you have to get that book issued from librarian you cannot take the book and just bring that book to your home no that is not allowed right so same this thing you have to include this Library Vector then you can use this Vector create your vector and whatever function with the vector we can do in our program so this is simple declaration now how to initialize vectors see there are many methods to initialize vectors right one by one we'll see practically those methods right so now we'll see with help of programs I hope theory part is clear to you guys if you have any doubt you can let me know in comment section so let's create a new file Vector intro. CPP right so first you have to include that have iio stream and then if you're using Vector then Vector right okay now first declare a vector do yourself first any Vector you can declare so here I'm not using that using namespace STD let's use that because rather than writing again again again and again like STD and STD STD in a program simple one time I'll use using namespace STD right although it's not a very good practice to use this line using namespace STD but we are using so let's declare a vector here the type we are taking int and Vector name numbers right sem so this is how we have declared a vector successfully but this is empty vector vector it is not holding any value it cannot hold actually any value right now but it can automatically increase its size if we initialize this Vector so first thing see if you not include let me just show you if you do not include this thing then it will give error see below this line you have a red line identifier Vector is undefined because the compiler doesn't know what is this Vector so you have to include this library because this is the here in this Library this class is in this Library Vector STL standard template Library so now how to initialize declaration is fine first ways we'll discuss three or four ways first way we have a function push back so one by one we can insert element in vectors one element at a time if you want to insert okay now how to use that thing the name of that vector first in which you want to put the value insert the element right so numbers dot we have this push back this method and in bracket just put the value so two same one more suppose element three element I want to initialize like 21 23 right so this is how you can initialize using push back method I hope you got this this is the synx synx would be if you want to write first you will write the vector name dot push back and in bracket you just write value right okay same I told you like we can access the element of vector with using uh index also from 0 to size minus one so if you want to print if you want to print see out at zeroth location what is the value so s same as arrays the vector name uh that is numbers and if you use this bracket I'm simply using this bracket right now but it will not provide you bound checking I'll show you numbers zero it will print two because at zero index we have two so 0 1 2 if I want to access at index 5 so it will not do now bound checking it will give any garbage value see any garb value you will get here right 250 4 1 no bound checking is there but there are certain functions if you use those functions to XIs values that will give you bound check these thing we'll see in next video so right now this is one method of initializing you can put this line in four Loop also right rather than writing three times what we can do is we can just take a four Loop like in I is equal to0 till I less than suppose less than three and I Plus+ every time it will ask like it will enter in this Loop and enter value whatever value you will insert it will insert that value into that Vector right so three times it is going to continue 0 1 2 three times see enter value I'm entering first two then again 34 again 56 so I'm accessing element value at index first so at one we have 34 so it is giving you 34 right so this is how you can put this and push back in like Loop also so this is one method right now second way is if you want to you know populate the vector with the same value multiple times then we can use overload Constructor now how you will do that thing see let's just comment out these things and I have just uh declared a vector without any size so right now right now if you want to know the size of this Vector then how to to uh you know calculate the size we have a function size we have a method size you can just do Vector name do size and it will give the size of this Vector right so right now comment out this line and let me just run this for you the size of the number this Vector is zero right but if you push back any value here it will automatically increase its size double its size right see there are two things size plus capacity these are different thing if I right now if I print same capacity here so for that also we have a method right let me just show you what output you will get here see size is zero capacity is also zero right now right because we haven't give any size okay if if I enter a value one then what do you think what is size what is capacity okay let me show you size is one capacity is also one fine if I insert now see let me I'm going to show you a interesting thing please concentrate here suppose two here two element are there now let me just run this and I'll show you what output you will get here size is two capacity of number is also two okay same now the twist is right now if I insert one more element push back suppose three right okay let's see now now size is three but capacity of numbers is four why so see I'm inserting one value so the size and capacity it's one one element is storing so now one size is one now again I want to insert another element so it is going to double its size so first size was one now one more element so size becomes two means capacity actually becomes two it is going to double it size so capacity is two size also two now third element now it is going to double its size first it was 2 2 into two double means it becomes now four so actually capacity is four but size is because actually we have inserted only three elements so size is three but capacity is four means it can hold four numbers right now right so if I insert one more item see suppose 34 what do you think pause the video and let me know in comment section what should be the size what should be the capacity you right now see this thing is this point is very important you have to clear this point capacity is four size is four okay but now one more thing one more element I want to insert suppose it's 37 now again pause the video and try this out write down in comment section like what is the size what is the capacity so size is 1 2 3 4 5 but capacity this time is 1 2 3 4 four was capacity but I'm inserting Fifth Element so it is going to now double its capacity so capacity becomes eight but actual size is four right see size is five so size is five sorry and capacity is eight so how many element this Vector can store right now eight elements right but actual element we have stored only five if you have stored right now eight elements all the the vector is full and I want to insert ninth element so now it is going to double its size like 16 it becomes right so this is the case capacity is different size is different this is how it is going to handle it is going to you know uh increase its size automatically going to double its size right so to maintain this kind of thing it needs extra memory than array right more memory than array to handle these kind of things so it is going to double like it is going to create another Vector of double capacity and it is going to dump the previous Vector delete or destroy the previous Vector right this is how it going to work okay this is one method of initializing next is if you want to initialize populate the vector with same value multiple times then we can use overloaded Constructor so here what we can do is while declaring same Vector the type vector Vector name and here in bracket we can write down how many number of times that element you want in that Vector suppose 10 times 10 times I want five in this V so if you will print this Vector all the 10 here the number of repetion First argument number of repetion here the value you want to store in this Vector how many times 10 * 5 so uh we can do something like this using Loop we can and I should be less than the size of vector so you don't need to give any hard value how to we have a function size so just give the that Vector dot Vector name dot size it will automatically calculate the size until then it is going to repeat the loop I ++ and you just want to print see out the values so same I'm using this thing to access the values so let me run run this and see it will okay let me just uh write down here new line also endl or slash and you can write let's run this and this five time sorry 10 Time 5 5 5 5 five in the vector so same value if you want to repeat multiple times another thing we have a fill also you can use that fill algorithm also right now same multiple many times same value if you want to put in that Vector you can just use fill algorithm rather than this thing how to use that thing let me show you we have a vector here you have to give size like size of vector is 10 10 value I want to store right so here we have this fill and Vector you have to use some iterator like begin from begin to end numbers dot end and what value I want to give suppose five same and I want to print this thing so same it will give you 5555 10 times so this is how we can use that fill also fill algorithm fill function right we can use initializer list also like we use array in arrays let me show you that thing also rather than this fill I'm using here only no size vectors equal to just give initializer list that's it suppose one we are just giving initializer list and we are initializing Vector this is also one thing so same if you want to print we with for Loop we can print right here size will be automatically calculated and it will give you all the values so it will print all the values of this Vector right so this is another way or we have a vector and using that Vector we can initialize another Vector that is also a case so suppose I have this Vector numbers and another Vector I'm taking Vector in obviously same type we have to take because I want to initialize the second Vector with with these values only so Vector name I'm taking numbers two right and here what you have to give in these brackets this Vector name from because from this Vector I want to take values so numbers dot begin comma numbers dot end the these are the begin and these are iterator functions there are many more iterator functions also that also we'll see one by one whenever we use these functions you'll get it you know familiar with these functions no need to just learn or remember all the functions at first we use these function one by one and you will get these things right don't worry I hope you got the begin and end uh what is the meaning of these iterator why we use this begin means from here and and here right from here to here all the values I want to take and I want to initialize vect number two so here numbers I want to print the second Vector numbers two so same value it will give you 1 4 5 6 8 8 90 this is how with help of another Vector we can initialize our Vector right this is also one way and like this there are many more ways also but most commonly used methods I have told you this is how we can initialize vectors so it's up to you now you have to practice you just declare different different type of vectors initialize those vectors with these methods and all right so in the next video we'll see how to access values from a vector how to modify a vector and there are different different functions all so that we can use with vectors so those thing we'll see in next video right so now I'll see you in the next video till byebye take care