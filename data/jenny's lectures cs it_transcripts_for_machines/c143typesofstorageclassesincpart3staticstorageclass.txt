so in the series of learning C programming we are discussing types of storage class in C we have discussed two types of storage Class Auto and register now we are left with two uh another type that is static and extern so in this video we'll talk about static storage class and out of these four storage class this is very important most of the time you get question from static storage class in know many competitive exam in Gate or net or in other competitive exams right so this is most important stories class and I have already posted some questions on my community post previous year gate questions that we're using static keyword and many of you answer those questions wrong because you don't know what is the meaning of meaning of the static keyword the scope the lifetime everything right but don't worry everything about the static keyword or the static storage class we are going to discuss in this video right every single detail with the help of a program also I'll show you now let's see what is a static storage class so I hope you remember what a storage class tells about a variable four things default value location where that variable would be stored scope and lifetime of the variable right and how to declare a variable with storage class first you will write storage class then the data type and then the name of the variable so you will write first static then data type suppose I'm writing int you can take float care string up to you it's not like that always I take in so you have to take in only you can take float also care also anything you can take right like you can take static care and CH you can take static uh string you can take static float X anything you can take or in you can take right now by default default value of these variables would be for float it would be 0 point this thing for this null for this null for for INT like for static int y Zer so default value would be zero right not garbage value zero fine if you write down static here next is location where these variable would be stored in Ram note in register in Ram not in CPU registor main memory third thing scope and lifetime these two things are very important right maybe till now you are confused like scope and lifetime is same there is no difference right like scope is within the block lifetime is also till the end of that block so both are same but but but you will get yeah scope and lifetime is different thing and you will get this thing in this video right so here for for here for this static storage class scope is within the block block scope right or the method scope in which you are you know uh in the function or in the main function you are declaring that variable within that block only local de declaration is allowed as well as Global declaration is also allowed outside of main you can also write down like static in y but for in Auto and register you cannot write down this thing Global declaration is not allowed only local declaration is allowed now lifetime is what till the end of the program scope is within the block only but lifetime is till the end of the program throughout the program this variable would be alive and it would be dead after the execution of the program after the exit from the program only now I hope it is not confusing if it is then let me just take one example and let me just clear this thing example of this thing is very important because see out of these four storage class the static is the most important storage class almost 95% you know questions you will get from this class only in every competitive exam for from static storage class so this is very important so please concentrate here and just you know focus on the example the program I'm I'm you know taking here I'm going to demonstrate the program one by one no line by line in this program just taking a simple know function display right this is the definition of this function here here I'm calling this function so before that let me just write down the Prototype or you can say the Declaration of this function void display and that's it right two times I'm calling this function in main fun in Main and this is definition here I'm just I'm just taking a variable X static inex right so in main memory one variable would be X so default value of this is I'm not initializing it so default value would be value would be Z not 6 it's zero next line is x +al 10 it means same as xal x + 10 I'm just adding 10 so you can write down this thing either you know uh xal x + 10 or you can write down something like this X Plus equal to 10 so now x value becomes 10 right in print f x is equal to so now what value would be printed x equal 10 right once you know uh when we execute the program from the main function it will be executed then display means we are calling the function so control would be here and after that X would be zero then 10 would be added and then x equal to 10 would be displayed now the next line is this thing so exit from this exit from this uh function now back to here where we were calling the function right so xal 10 would be displayed right next again we are calling display so again control would go to here right next first line is static int X so this time this time x would not be initialized again right maybe you will say static inex again this line is there so default value of x is zero so it would be initialized with zero again then 10 would be added and 10 would be printed x equal to 10 no this thing you need to take care it would retain its previous value this statement would be skipped it would not be executed why so because as and I have told you the lifetime of this variable is throughout the program lifetime means this x is still alive still alive it's not dead after execution After exiting from this function X is still alive because as I have shown you in the previous videos like how the memory layout of this program and application is some memory segment is for code or you can say instruction this is for Global and static variables here we have static and Heap this is the memory layout of the application right so this x would be here here in this memory section a separate memory section is for Global and static variable right so it would retain its previous value it would not be initialized again with zero right or for better understanding if I initialize it with x equal to Z something like this or if you don't write this thing that this also means same thing default value zero so it would not be initialized again this statement would be skipped because lifetime is throughout the program so this x is still alive it's not dead so this line means you can say it's like a it's like birth birth of this x again but if x is alive still alive then why it will take again birth right after it will dead then only it will take birth now yes or no I hope you are able to relate this thing so this would be skipped this line now next line is X same 10 would be added so now this time value becomes 20 so this time x would be 20 that would be printed for this display right why so this thing is because the lifetime is throughout the program but but the scope is with within this function only in this block we are declaring this x so the scope is within within this uh uh block within this function right now what does that mean if I write here print f x equal to percentage D and X if I want to access this x value in main function so it will give error Undeclared X because we are declaring this X in this block in this function so the scope is within this x you can access this x within this this uh function within this block if you write X here it would be Undeclared for the compiler so it will give error that's why I was saying scope is within the block only you cannot access this outside of the block directly but lifetime is throughout the program till the end of the program it will retain its previous value right this is what the lifetime I hope you are getting but see there is a separate section for This Global and static and it will hold the memory throughout the program so better to you know uh know minimize the use of global and static variable if it is necessary to use then only use Global and static variable if not necessary then avoid using Global and static variable because they are holding the memory throughout the program but if rather than static if I don't write anything here it will be considered as Auto at this point of time what is the output of this program I'm not using this there x equal to 0 same x = x + 10 so it would be 10 so x value would be 10 printed then again for this display again control would be here and this time this X is not static this is auto so it would be again initialized because after this block the lifetime is finished you can say life this life of this x is no more this is dead so again it will take birth so in X is equal to Z so it will will be zero again so again + 10 so + 10 and this time 10 so for this both value for this 10 10 would be printed but if you write here static one time 10 would be printed and next time 20 would be printed this point is very important that it is going to retain its previous value right that's why this is tricky question that's why almost in every competive exam out of these four stories class they you know give question for on this static stories class because you miss this point what students do again they will initialize this value again it will call again they will initialize the value but it will retain its value right only one time the static variable would be initialized until the end of the program it will retain its value right I hope now you got this program so let me just know show the output you're going a practical of this thing so let me just create a new file static do c and uh this same we are taking a display function this is just a declaration and in main I'm calling display two times right and this would be the definition of this function we taking static int X is equal to 10 and x + = to 10 sorry and just we are printing the x value right so see rather than next first of all let me just remove this and we are not initializing this thing so by default it will take zero it should take zero we'll check it is taking zero or not let me just run this simple program and show you the output here it would be zero first of all right then 10 would be added and x equal to 10 would be printed in the first function calling in second function calling it would retain its previous value that is 10 then 10 again would be added and value becomes 20 so x equal to 10 x equal to 20 right so this is what static is now if you want to access this x here print F and x x is equal to percentage D and I want to access X in main function right so what it will give it will give error see Undeclared X here here in this it is Undeclared because the scope is within this block only within this block within this display function only within this function only the scope is within this you cannot access this X in main you cannot write down print FX but yeah the lifetime is throughout the program the value would be same value would remain it would remain its previous value lifetime would be same right sorry lifetime would be till the end of the program so I hope now the difference between scope and lifetime is clear to you these both are different thing not same thing right and if I take here int okay this is fine let me just comment comment this out and if I take here int y one more variable and just int Y is equal to 10 and I'm taking y ++ 4 just say Yus minus and just print Y is equal to okay double quotes and comma y so what y value would be printed let's check this out see x value would be 10 and 20 y value would be first time it's 9 next time Al also 9 because y value is 10 Yus minus it becomes 9 9 would be printed in next function call Y would again be initialized with 10 y minus becomes 9 and 9 would be printed because Y is what by default it's Auto variable so it would again be initialized again it would be initialized but static would not be initialized again right so I hope now the static is clear to you guys now here also you can also take like St a i static and let's say care CH that is also fine now this is global so this thing you can access in main function or in any function so in display just I'm writing sln and and CH is equal to percentage C and C sorry it's ch the name of the variable is so we are not initializing it so it will not print anything CS is equal to nothing it is going to print same you can take here float or string or anything you can take right so I'll give you an assignment also we just have to answer that question in comment box right so this is assignment for you guys this is the program you have to to tell the output of this program the same function display we are calling this function I'm just I've just taken a for Loop here 0 to three display I'm calling and this is the body of this display this is the definition two variable I'm taking x and y x++ y ++ and then uh we are printing just X and Y so you have to tell me in comment comment box what is the output of this program I hope the everything about static storage class or static variable is clear to you right in the next we'll see uh that external stories class so now see the next video till then byebye take care