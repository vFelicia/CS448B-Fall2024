in the series of learning C programming we are discussing arrays and C we have discussed Declaration of arrays and initialization of arrays in C in the previous videos in this video I'll talk about memory initialization of arrays means memory representation how arrays are represented into the memory plus accessing of array element how you can access the elements of array these two points with some examples right now see how the memory would be represented to arrays as know how array can be declared like I'm taking just a name of array is a size is five and I'm initializing the array over here only suppose 1 10 0 1 3 five five date items we have declared an initialized the array at the same uh point at the same time this is what compile time initialization of array right now how does this memory would be allocated to this memory I have told you it's like something like this it's a long table of bytes like this right these are byes one b one b one b like this right 1 B is equal to 8 bit fine now see how integer is going to take somewhere it takes two bytes and in some machine it take four bytes it depends right here I'm taking what four bytes you can also take two bytes it's not like that I'm taking four bytes and I'm getting many comments also ma'am integer will integer takes two bytes no four it's not like that now see here how many bites would be allocated to here if I take four bytes for one integer value then here I have five data items means 20 bytes would be allocated right but how and where in the memory it's not like that 10 bytes here here would be allocated then some space and 10 bytes in another location no the important point about memory representation of a is what memory allocation of a is what memory would be represented in the contigous type like the data items uh would be stored in contigous memory allocation right contous means like this one after another here one this this one first of all suppose I'm taking the here address is 2,000 and from here the bytes the memory would be allocated to this array for five data items means 20 bytes so from here till 20 bytes from here to 20 bytes like from uh like this like this 20 bytes in continuous memory allocation would be allocated to this array from 2,000 suppose The Base address is 2,000 it it would be in you know in hexadecimal form but for Simplicity purpose I'm taking 2,000 till the address of last bite would be 2019 right so here just I'm writing something like this I'm writing something like this see in one block in first four bites here here first integer would be stored like one in next 1 2 3 4 in next these four bytes 10 would be stored like this data would be stored so rather than writing something like this I'm just writing I'm just uh know drawing a simple block for the these four bites right so here one would be stored then 10 the next would be next memory allocation then minus one and then three so this is how in consecutive locations continuous memory locations data would be stored it's not like that one here 10 in another location leave some space 10 another location leave some space minus one in another location and in random memory location no this is very important point this is property of array contous memory location would be allocated to all the data items of the array right this is very important here now see here the address of this this is what 2,000 now the address of second element would be what four bytes for this so the address would be 2004 then 8 then 12 and then 16 and this is the address and the index of array would always be started from 0o 0 to size minus 1 0 1 2 3 and 4 size 1 5 1 that is 4 you have to remember this point also the a index would always be started from zero name of this array is what a right now one more point is what this is how the memory would be located this is how the memory representation of this array now second we'll see how how to access the elements of these arrays before that just want to tell you one thing this array the name of the array this is going to store what address of the first element or you can say this this 2000 is known as Base address address Base address of this array means address of the first element so this this name of the array here 2,000 would be store right so now see any variable that store address of any other thing other variable is known as pointer variable so that is why array name is known as a pointer or you can say internal pointer variable it is known as a pointer variable or you can say internal pointer point Y pointer I have told you because it will store address Base address of the array and if if it store address then it is known as obviously pointers are used to store address of other variables right so that is why it is known as pointer variable array name is pointer variable it it Xs as a pointer variable right right now how to access these elements if you want to access the first element of the array we can access the element using the index and name of the array so name of the array is a index of the first element is what zero so this is how you can access the first element the answer you will get one if you want to access this element fourth element of array first second third fourth element is fourth right but the index is three so how to access the fourth element this is how you can access the first element of the AR and if you want to access the fourth element then how you can access name of the array is a and index of fourth element is three and and value will get minus one so this is how you can access the fourth element right now see it's not like that now see Base address is here name of the array is going will store Base address now what about the other address obviously integer will take either two bytes or four bytes so you can calculate directly the other address like if four bytes then next element would be stored at which location 2004 because it is for sure that next element would be stored in the next memory location only contigous memory location that is for sure in arrays right next would be at memory location what you can add 4 bytes that is 2008 that is for sure right now how the address this address is to be calculated if you write in your program a of3 then how a of3 means this address 2012 how this has to be be calculated because we only know the address of Base address of the array means the address of the first element of the array right it's not like that we will first of all go to the first element then second then third then this element and then we will fetch this element no you can directly access any element of the array this is plus point of the array because here Random Access is possible random means you can access any data item of the array in constant time it's not like that you have to go sequentially like for first of all first element then second and third fourth and fifth no directly you can access now how directly you can access how the address is to be calculated this address see the formula is what Base address b stands for Base address plus index which element you want to access into size size of the the data type you are using here I'm using what integer so size of int that's it this is the formula to access any element of the array now here suppose I want to access fourth element fourth element means everybody know index would be three because index is going to be started from zero so index you will use what three into size of integer I'm taking four bytes here plus Base address is stored in this a name of the array that is 2,000 so you can calculate here plus 12 and this one and we know as you can see address of fourth element is this one so directly we can access this data if you want to access second element or uh first element I want to access then I have told you and index value would be 0 so here 2,000 + 0 into 4 0 into 4 means 0 so only 2,000 first ele second element you want to access means index would be Base address is 2,000 plus for second element index is 1 into size is 4 so 2004 as you can see the address is 2004 so you can access any data item in constant time order of one order of one time constant time right random exis is possible here and see this is what uh memory representation and accessing of 1D array more specifically if I say then it's 1D array one dimensional array means only one row and multiple columns we will discuss 2D array as well as multidimensional array in C right so this is what about 1D array now that's for this video I hope you are clear with these two fundamentals now from the next video I'm going to discuss some programs on array I mean maybe two or three programs on array so that you can get the concept clear because in the last two or three videos I have discussed only theory part no practical part so from the next video in two to three videos we will discuss some programs right how to declare initialize and everything how to you know uh print array elements or some programs also like uh finding the largest element from the array smallest element from the array or sum of array these type of programs or if you want me to discuss particular program on array then you can tell me in comment box right so now I'll see you in the next video till then byebye take care