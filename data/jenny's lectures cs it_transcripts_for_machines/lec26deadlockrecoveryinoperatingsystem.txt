preemption of the sources and processes that is optimistic approach second is pessimistic approach pessimistic means termination of process or you can say the killing of processes right now in this case process termination basically two methods are there first is you can kill all the processes which are in deadlocked state maybe sometimes there is a situation that more than two or three processes are there in deadlocked State they are forming a cycle five processes ten processes something like this so what method is kill all the processes which are in deadlocked states see in the previous video you have discussed one example in that case four processes are there in deadlocked state p1 p2 p3 and p4 so the first method is about all the four processes I know you can say kill all the processes but you know killing all the processes who are in deadlocked state may be very costly so the drawback of this case is one it is very costly method to abort all the processes see let us take one example maybe five processes are there which are in deadlocked state p1 p2 p3 p4 and p5 and I say costly in what sense may be suppose p1 and p2 has completed its execution up to 90% fine suppose a 10% this one is 10% in this one is 20% so see when you'll about all the processes then the p1 and p2 will have to then these processes will have to starts their execution from the starting only but see p1 and p2 has almost completed its execution so it is not a good idea to abort these processes so it is not a good idea to about all the processes who are in deadlocked state why so because maybe some processes may have been may have executed may have computed their work for a long time fine and when you will about all the processes then they'll have to recompute all the cases they have they'll have to recompute all its calculation from starting only so that is not a good idea right so next thing is about one process at a time fine and then decide next one decide next one to a boat after deadlock detection means about one process at a time then apply or you can say invoke the deadlock detection algorithm if still detection cycle is there then then choose the next process to abort then again invoke deadlock detection algorithm and keep repeating this step and until what until the deadlock cycle is eliminated but see see drawback of this cases what you are selecting one process and you are calling detection algorithm again selecting one process again calling detection algorithm so this is basically a it contains overhead of invoking the deadlock detection algorithm again and again after each after killing of each process so in this can say the drawback is overhead of calling detection algorithm again and again after termination of each process fine so here here the funda is we should terminate that process when we should terminate that process whose termination will cause minimum overhead and minimum cost to the system now how to have to select that process whose termination will cause the minimum overhead and minimum cost to the system there are many effectors basis on those factors you can select to terminate a process and those factors are so these are some factors to be considered when we are selecting a process to kill like what what is the priority of the process if process is having higher priority then we obviously would on we we don't kill that process we used to kill a process which is having lower priority fine next next may be how long the process has computed may be a process has completed its 90% execution so it's better not to abort that process fine third thing may be how much longer a process will come before execution and before completion fine next fundamentally sources that process has used fine next thing may be whether the process is interactive process or a batch process next thing which is to be considered is how many resources the process needs to complete its execution fine maybe a process needs one one more resource to complete its execution or maybe you another process needs ten more resources for its execution so it's better to abort that process which needs ten resources for completing its execution rather than the process which needs only one resource these are some factors to be considered when our system is selecting a process to kill fine now the optimistic approaches this approaches preemption of resources and processes fine in this case some resources would be forcefully preempted from any process and that resources would be given to another process so that the another processor can complete its execution fine now here here the question is C preempts some resources from process fine but the question is from which process you will preempt the resources so so when when a system is implementing this kind of approach preemption of resources and processes then basically it needs to handle three problems so the three problems are selecting a victim rollback and starvation now what are these problems so selecting a victim means you can say which is a source or which process is to be preempted fine say he here Here I am saying preempts some resources from a process from which process and which resource you will preempt you have to select that one so we will select that process you can say that will cause minimum course truth to the system dual preempted resources from that process now now the minimum cost means many cost factors are there see here also we have considered these cost factors fine when we are we are selecting a process to kill so here also these type of you know cost factors are there like a number of resources a deadlocked processes have holding so here also some cost factors are there which is to be considered when we are selecting a victim process next one dice this roll back now what is this roll back when you select a process and preempt resources from that process then obviously that process cannot continue its normal execution fine then that process has to be rolled back to previous safe state and that process will start says its execution from that safe state only restart you can say restart its execution from that safe state fine our second thing is total roll back you your selecting and you have selected a process you have preempted some resources from that process then you will do total roll back to that process total roll back means you will you can say about that process and that process will restart its execution from its initial point that is total rollback but it's better it's better to roll back a process to previous safe state why so let us take a reallife example suppose I am making this video fine and I have completed almost 50% of the lecture maybe at last at some point of time I told some wrong information so I'll reshoot the this video I'll reshoot the video obviously from the point where I told you that maybe is some wrong information I will not reshoot the video the complete video from starting only if reshoot the video from starting it means total roll back and if I'm shooting the video from that point where I I told you the wrong information then it is known as roll back to some previous safe state fine so that is the roll back fun die in the process process will be roll back to previous T safe state and we'll study started its execution from that safe state second thing is total roll back the process which is selected as a victim is you is to be aborted and that Italy started its execution from its starting point only see it's better what approach is better it's better in that safe state approach better to roll back that process to previous safe state but in that case in that a system has to maintain the information of the state for all the running processes obviously if system has the information in what point what is the previous safe state then only system can roll back to that safe state 'no system can roll back that process to that safe state so system needs to maintain some extra information in this case now what does this starvation problem see in this case we are selecting a process and we are we are preempting resources from that process fine but if again and again same process is selected for preemption then what will happen then starvation problem would be therefore that process that process will never complete its execution will never be able to complete its execution now how to how to ensure that same process would not be selected as a victim again and again so in for this system has to ensure that a particular process can be you know picked as a victim for some finite number of time and how how this thing can be ensured you can say in Khost factor many cost factors we have discussed many cost factors we will consider when we will select a process to preempt so in those cost factors we can include one extra cost factor that is number of roll mix in our all bakes means when you will select a process and preempted resources from that process and that process will have to be rollback so you can select maybe suppose number of roll bakes are 5 set number of roll backs cannot be more than 5 so suppose a process p1 has reached to this point p1 has rolled back five times then again sixth time you cannot select p1 as a victim process you cannot preempt resources from p1 process you have to system how to select some other process so this this number of rollbacks can also be included in cost factors too to avoid this starvation problem so these are two types of recovery approaches optimistic and pessimistic approach so that is all about deadlock in next video I'll start that base replacement techniques I'll provide the link of all the deadlock videos in the description box you can check it out so till then bye bye take care you