and the series of learning programming in c we are discussing about operators in c in my previous videos i have already covered three type of operators arithmetic assignment and increment and decrement operators in this video i will be talking about relational operators what are relational operators types of these operators why to use these operators in a program when to use how to use these operators and we will also write a program simple program and we'll be talking about the output when you use these operators relational operator in your program then what output you will get we'll be talking about all the things in detail in this video right so now let us discuss relational operators in c as the names suggest relational they are going to talk about relations between two things now which type of relations they will not give you that they will not tell you that blood relations like we human have they will compare you can see the values two values right and will give you the result and you can say these are used to check the conditions these are used when in decision making right especially in if else we use these operators so we used to compare two values these operators so you can also called as comparison operators and you can say when we compare the values then what should be the output when you use these operators then what is the output either you will get true or false true means one false means zero in computers memory these true and false these words are stored as numbers true is stored in the form of one force is stored in the form of zero right so now types of relational operators are these are types of relational operator less than greater than less than equal to greater than equal to e this one is equal to two check the equality and this one is not equal to these operators you can also say as equality operator and no inequality operator right and see this is double equal to it is different from a single equal to operator this is what assignment operator as we have discussed in previous video this operator is used to assign the value from the expression from the right hand side to left hand side and this double equal to is what this is what to check some condition to check the equality how you will use these operators let me discuss this thing also see if you write like this if i'm writing 3 less than 5 now what you will get is it true yes 3 is less than 5 means true so now when you use when you write program in computers what you will get you will get output as true would be stored in memory in the form of 1 so you will get 1 right you will get a boolean value either 1 or 0 if i write 3 greater than 5 it will give you result what 0 because it is false if i write this one is less than equal to right i'm writing 3 less than 3 it will give false 0 because 3 no is not less than 3 but if i write 3 less than equal to 3 yes it is not less than but it is equal to 3 then it will give you 1. like this these operators are used to compare two values two operands or two expressions also its not like that we can only use hair constant we can only use here variables we can also use here expressions if i write it like 3 plus 5 and here we write less than 5 plus 5 we can also compare these values these this is what expression or if i write like a plus b less than b plus c this also we can compare right so this is what expression you can also compare expressions you can also compare constant or you can also compare variables like a less than b i can also write like this so using relational operators what you can compare integer value you can also compare floating type of value and you can also compare character if you write like this character how we write a single character enclosed in single quotes less than suppose i am writing here b so this is what character character it is different from this one here a is what simple variable if i am storing here int a is equal to 3 and into b is equal to 5 then here 3 here 5 but this is not 3 and 5. it is in single code it is character so now characters are stored using character system we have already discussed uh in one of my previous video when we were discussing about the data types cache data if you want to say you can check out the video here in the side button so a is what corresponding to a the value a sky value is what 97 less than corresponding to b s i value is what 98 so these values would be compared here so 97 is less than 98 yes true so it will also give you true that is one but you cannot compare strings using these operators like i cannot write here like this one ah suppose i compare jenny and less than you can say here lectures this is what string sequence of characters enclosed within double quotes why so because when you compare like this then it will compare the address means the first address of this one obviously this has been this will be stored in memory every character will be taking one byte one byte one byte one byte every this location is having some memory address right so the starting address suppose this is thousand and this is i don't know the address is two thousand so it will compare those addresses and then it will give you output and we don't know where jenny is stored where lectures have been stored because these are stored in memory like this is a memory so i don't know where these are stored what is the address so this will give you can say some undefined behavior it will show you so we cannot compare in c we cannot compare strings using relational operators there are some other ways to compare strings that also will discuss when will be discussing about strings but using these we can what come we can compare what integer value we can compare float value we can compare character value but we avoid uh comparing float values using these operators i'll talk i'll talk this thing in a program with the help of a program then you will get it better so now let me discuss it with the help of a program so the general syntax to use to write relational operators is what this is relational operator either this one one of these operator this side we have a means arithmetic expression one an arithmetic expression two arithmetic expression means here you can also write some constant value any single variable also or any expression which is combination of constant and variables i have taken these examples also right and we will also talk in a program and you can also compare minus values also like if i write minus 14 greater than 3 then what would be the output but minus 14 is not greater than 3 then it will give 0 you can also compare like float values 4.5 less than 4 it will give what it will give 0 because 4.5 is greater than 4 right and the output is what you will get either 0 or 1 so it is what an integer value so the format specifier you use is what percentage d right always now let me discuss it with program we can also use this arithmetic expression means we'll be using in this expression that arithmetic operators plus minus or divide into our modulo operator right and we will also see the precedence and associativity if we use expression let me write down a program now here i am taking two variables control will go here the first statement of the main function when you compile it when you execute it and value would be assigned to two variables a and b in a i have 18 in b i have nine now next is clear screen next is what printf percentage d format specifier is percentage d means it has to print an integer value a less than b compare a value is what it it is going to fetch value from memory 18 less than 9 no it will give you 0. now this one control will go here now it is what character constant if we have character here character data type so this is what a c value is what a sky value of c is what 99 and b is what 98 is 99 less than 98 no so it will give you false right right i hope you know the meaning of these things no need to uh write down every character let me discuss it with the twisted manner and suppose if i write here like a equal to equal to b it will check if a equal to b is 18 equal to 9 no it will give you false right and if i write here not equal to b yes a is not equal to b then it will give you true it is true fine now let me discuss in a different manner so now see here we have taken five variables so in memory i am assigning the value that memory address to a b c d and e in a i have 18 here we have 9 in cd we don't have anything and e i have 10 right now see next statement is clear screen next is c is equal to b plus plus i am combining arithmetic increment operator also and these these operators also so that you will get you can revise those operators as well now b plus plus this is what post increment post means first of all the original value would be used in this expression and after that value would be incremented so original value of b is what 9 so 9 would be assigned to c first of all and now value of b becomes it would be incremented by 1 9 becomes 10 so now at b what 10 value would be stored right now what is next statement d is equal to b now here whatever value in b that would be assigned to d just take care this thing now b is not 9 b has already updated it is what 10 in the previous statement right now 10 would be assigned to d right now see printf percentage d now we have this one right in this expression this is what relational expression when we use relational operators in any expression that is called as relational expression expression is what combination of you can say operators and operands right here we have abc these are operands or this is what operator so now we have three relational operator in one expression now which one you will evaluate first at that time you have to check associativity of the operator associativity of these relation operator is what left to right means we will walk from this side left to right so while walking from left to right first operator is this one a less than b so this operator would be evaluated first now check a value is 18 b value is 10 it's not 9 please remember this thing right it's 10 now is 18 less than 10 no so that is why this will give you false that is 0 right now this operator would be evaluated 0 less than c value is 9 is 0 less than 9 yes it is true it will give you this one will give you 1 true now check is 1 greater than d d is what 10 no so the final output would be zero it will give you false i hope you got now you got it now the associativity how to uh evaluate if two or more exp two or more operators are there in one expression so let us discuss this thing now now control will go here is b equal to equal to e b value is 10 e value is 10 please don't compare with this 9. if you compare this value 9 and 10 what you will say if these are not equal and it will give you false no it will give you true because b is 10 and e is also 10 that is why try run a program and always assign values always write down this form of variables when you draw it in a program now what about next statement here we have c plus 1 greater than e now what is the value of c 9 9 plus 1 now see okay now here we have c 1 is arithmetic operator one is relational operator two types of operator now you will say which operator we will evaluate first which is the operator which is having higher priority that is why we check the precedence chart to check the priority of the operators an arithmetic operators are having higher priority than relational operators so arithmetic operators would be executed first right so now first of all c plus 1 c is what 9 9 plus 1 is 10 10 greater than e e value is 10 is 10 greater than 10 no is it equal to 10 so false it will give you 0 right let us take this one this is a little complex one here we have arithmetic operators and relational operators arithmetic operators will be evaluated first because they are having higher precedence but arithmetic operators are also two one is this and one is this now which one you will evaluate first check the associativity now associativity is from left to right arithmetic operators are having associative left associativity left to right means we will walk from this side left to right which operators which arithmetic operators comes first this or this this one when we woke from this side so now this would be evaluated first a plus c a value is 18 c value is 9 so total is what 27 i hope you are able to see this what is value of b 10 greater than value of e 10 less than c plus d see now i am not evaluating these operators because higher precedence is this operator arithmetic we have done the with this part now we will be solving this one c plus d c is what 9 d is what 10 so here we will have 19 now in this also we have three relational operator one one the one is this one one is this one one is this one now you will evaluate which one first so here also these operators are having high higher precedence like you can say one after that these operators first higher priority these operators would be evaluated less than or in these operators and after that equality operator so here we have equality operator and less than greater than operator so first which operator would be evaluated which is having higher priority less than and greater than these are having higher priority than equal to so that is why these would be evaluated first but this is also we are having two with of same precedence then we will check associativity associativity is left to right so now we will walk from left to right first relational operator is this one so now check one is this operand and one is this operand for this relational operator because they are going to compare two values only two values now 10 greater than 10 no 10 is equal to 10 so this will give you what force that is 0 right and this side we have 27 equal to equal to now this would be evaluated 0 less than 19 yes so final this will give you 1 now compare this one 27 equal to equal to 1 no so it will give you false that is 0 right i hope you got this now let us take one more example so here we have one more variable that is f we don't have anything in f but when control will go to uh sorry this statement then what value would be assigned to f check out in this expression we have three relational operator so check the associativity which is and these are having same precedence which is which is left to right so is a greater than b a is 18 b is 10 yes so it will give you one now this is 1 greater than d d is what 10 it is not true so this will give you 0 is 0 less than c c is what 9 yes so it will give you 1 so finally in f we will store 1 so now check f not equal to 1 f is what 1 f 1 not equal to 1 but 1 is equal to 1 so it will give you false so that is why the output would be 0 right now if i take floating values ah like i am taking here one floating value is f and g if you take suppose 2.2 and 2.22 right and if you compare these values like suppose if i am comparing like this f less than g then what would be the output yes it is what 2.2 is less than 2.22 so it will give you true fine but if you compare like this f equal to equal to g then also it will give you false right because it is 2.2 it is 2.22 so it is give you it will give you 0 but almost these are equal so suppose if you write like 2.000 1 f and g is what if you compare f and g if you write down f equal to equal to g then also it will give you force but these are almost equal right so see that is why we avoid using these equal to operators and not equal to operators when we use floating point number if you require high high precision then better to avoid these using these operators equal to and not equal to with these numbers the the floating numbers right so let me give you one assignment let me give you one problem and you tell me in the comment box what would be output of that problem either 0 or 1. so the answer of this you have to tell me a plus c equal to equal to b greater than equal to e less than c plus d and not equal to 1 what it will print 100 but please don't run it on your system first of all drier and this program using these values only then tell me what is the output and after that you can run on your computer and you can tell your answer and see here also you can also you can also compare like special characters if we write like plus equal to equal to plus in single quotes we have so it would be evaluated first of all the sky value of plus what is the sky value then it will check yeah these are equal so it will print true and you can also compare like this like this one if you write these less than and equal to symbols in single quotes then it becomes character these are not now operators this is what operator between these two characters so this and this would be evaluated first of all a map to their sky value sky value of this sky value of the and that value would be compare so you can also tell me in the comment box what would be the answer of this thing so i hope you got when we use relational operators like when we use these operators especially when you want to check any condition in if else and in any while loop or do while loop and that time when we will discuss these loops sorry that if else statement the control statement then you will be uh you know more clear about these operators but these operators are used to decide something in decision making we use these operators right these are used to check the conditions fine so that's it about relation operators and see in the next video i'll be talking about logical operators in c so now i'll see in the next video till then bye take