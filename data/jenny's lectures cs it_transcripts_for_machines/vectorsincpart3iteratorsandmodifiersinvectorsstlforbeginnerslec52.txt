hey everyone I hope you are safe and doing good so in the series of learning C++ programming language we are discussing vectors in C++ right so till now we have discussed like what is STL because vectors are part of STL standard template Library what are vectors how to declare a vector how to initialize it how to access Vector elements how to modify Vector elements right now there are basic things we have discussed about vectors but there are more you know member functions that we can use on vectors and these functions these methods are extremely useful when you are using vectors right so you should know about these functions or these member functions right why I'm calling this like member functions because Vector is a class I have told you and whatever Vector we create that acts as a object of that class right so those member function of that vector class we will be using one by one in this video right okay now let's create a file first new file Vector functions. CPP right so first obviously we will include iio stream that header then if you use vectors then you have to include Vector right and then name space first let's create a vector right and suppose Vector is integer and I'm just taking V right so first thing we'll be discussing is iterators so first let me just tell you what is an iterator it's like a pointer but it's not exactly a pointer you know what is a pointer it is a variable that contain address of another variable right okay now iterator is also like pointer but not exactly same iterator and pointers are different right but we can say like an iterator is used uh you know to point the memory address of STL container classes we know Vector is a class we I told you like it's a sequence container it is class so it Itor is like many other sequence container classes also like list map and many more so Vector is used to point the memory address of these container classes right and using Vector we can access what we can do basically we can access the elements of those container and we can perform some operation on those elements right like it's like a pointer like in my class if suppose I'm pointing to someone using this finger like so this is what a pointer so using this pointer this is like an iterator we can say I can call that student like come here rather than calling his or her name or rle number just pointing so it's like a pointer or I can access that student with this pointer only right I hope you're getting my point so same iterator right so using iterator we can access elements okay of that container class like vector or list or map like this right now see and exactly see I don't remember like all the member functions on vectors but there is a side and you also don't need to remember all the things right one by one we'll be using you just learn and remember the frequently used member function right and whenever you use in your program again and again you know the these things would be in your mind I think you don't need to put extra efforts to learn these things you just use these things in your program practice right so there's a website like CPP uh sorry C++ doom and there and there is a website like C+ plus.com and here you will get Vector so here you will get all the functions member functions of vector see member functions right first are iterators so here we have these functions begin and R begin R and C begin C end and like this so we'll be discussing two or three functions and these you will practice remaining function you will practice right so first we'll be using begin and end see as you know when whenever you click on this function uh there is a proper description of this function begin it is going to return the iterator to the beginning return an iterator pointing to the first element in the vector right same end it will Point not to the last element let me show you what is end see this function returns an iterator referring to the past the end element in the vector container not the last element no see what is this past the end this element is theoretical element that would follow the last element in the vector right so after last element and practically if we see there is no last element no element after the last element so basically it does not point to any element right now what does this mean how to use this begin and end let me just show you so suppose this is a vector and I want to print this Vector right using iterator so first you have to you know declare an iterator how to declare you have to write same like vector and whatever the object type of this Vector int right an INT type of iterator we want scope resolution operator and you have to use proper here iterator this and after that name of the iterator x y z a b c any name you can take I'm taking here it right now this is a iterator it okay now with four Loop what we can do we are not taking any normal variable to access to print these element ments like we have done in previous lectures but we will use iterator so we just call on this iterator I sorry I is equal to now first we we want to point this iterator to the beginning of this Vector the first element so which function you will call on this Vector begin V Dot begin right so this function is going to return the iterator to the first element so now this it is pointing to one then it the iterator not equal to the end till then we are going to print the elements right so V Dot end and then we just do Plus+ or Plus+ it or it ++ iterator Plus+ right and simply we are going to print these numbers now uh we have a d referencing operator if because it's like a pointer so if you want to D reference a pointer then we use this this is a d referencing operator star estri estri it so this is how we can access using it trator all the elements right it's like pointer now right so with pointer also if you want to access because in it we have like some address so at this address what is the value using SRI operator we can access that value so that is why this thing right now and if you run this then the okay there is this error this is extra to here right and in Vector also we have this thing so save this and now let's run this see 1 2 3 4 0 78 now why what is we can use only simple variable also like intial to Z I should be less than whatever the size right but here you don't need to you know remember or the size of this Vector you just increase you just put some more variable and that's it you don't need to change the size here right so directly the iterator would move from here to here see now this time this value you will get so you don't need to remember or take care of the size of the vector and you can also do something like this uh we can modify this like if I write + one here so I want to start from two so this also we can do and let's run this see from two it will print two 3 4 like this right and there are many more ways here we can use this begin and end we'll be discussing in you know later videos when we writing more and more programs on vectors right this is just a simple example just to tell you yeah this is how we can use begin and end right so it is pointing to the first element and this will point this element after the end the last element is nine so whatever after this last element it will Point here but practically there is no element so it is not pointing to any particular element so we cannot deference this end now next are this R begin R end means it return the reverse iterator to reverse beginning right and R end so what does this mean if I use a reverse itat suppose let's just copy paste this thing here and let's comment out this thing because this is so these are for begin and end and this thing next whatever we will be discussing here that is for our begin R end so to create a reverse iterator you have to write here reverse iterator Ator right and the iterator name it or any other iterator name also you can take I ABC XY Z anything so let's take R reverse iterator okay now RIT this iterator on this we cannot call this begin function because it is reverse iterator so you have to call R begin right and this RIT not equal to R end till then RIT ++ and while referencing you have to use R so what you think what it will print see this R begin it it will return a reverse iterator pointing to the last element in the vector last element it will point to the last element means it is like reverse beginning so if you want to print that Vector in reverse order we can just use this thing and whenever you increase this the iterator r begin then it will iterate backward right towards the beginning and R end means see R end will point to see this RN it returns a reverse iterator pointing to I mean to the theoretical element preceding the first element in the vector so that is RN before the first element practically obviously there is no element but theoretically we consider that there's a element before the first element so R end will point to that element right so we are moving in reverse order right so this will print this R begin this will point where here to this element nine and whenever we increase this RIT ++ then it will move backward like this right and this R end will point to one element before this first element before one but practically there no there's no element so it will point to no element so uh we cannot deference this thing so it will print what that Vector in reverse order right okay sorry let me just run this again and see it will print it is printing in reverse order to that Vector right same we have some more function like C begin C and for constant so those thing you will try Okay so next is this capacity we have discussed like size and capacity these two uh member function but let's discuss more things size maximum size and capacity these thing let's discuss size it will return the actual size of that Vector how many elements in that Vector right now maximum size maximum number of element that Vector can contain can hold it will return that thing right and capacity means uh it will return on the size of allocated storage capacity for that Vector how size and capacity are different let me just show you with an example so for this I'm creating another Vector let's suppose I'm taking a vector of type care okay we have a e i o these four vs here right so let's print size Max size and capacity size of this Vector is we have a function size size that we directly call on this Vector right same for mix size we have a function mix size and for capacity we have a member function capacity so like this we are printing okay now let's run this and see what's happening here size is four okay let's just decorate a little bit after everything we have a new line operator so here size is four maximum number of element this Vector can hold these number of elements and capacity is also right now four so both size and capacity are same four and four because initially we have initialized only four elements now what we do let's insert one more element here in this Vector so we can use push back push back function right it is going to push a uh element in the last of this Vector right so what I want to push back I O U right now let's just again print all the three things so after pushing back one Vol U I'm just printing again size Max size and capacity so first four this is the capacity and this is the maximum size after inserting size is actually five Max size would be same but capacity is now eight see the difference size and capacity because it is going to double its size right so first four was the size capacity was four now if you insert one more element so it is going to double its size so 1 2 3 4 it becomes 8 right now capacity is eight right now the capacity of this Vector is eight it can store eight element and actual size is five maximum size is I have told you now why this capacity is going to be doubled because to avoid the re you know reallocation of this Vector again and again after each insertion what we do here if I'm inserting this U now so what it will do internally another Vector would be created of capacity 8 and all these values would be copied in that vector and this Vector is to be destroyed dumped right so rather than reallocate getting again and again after each insertion right now capacity is 8 so till 8 I I mean after U we can insert five more element here and there would be no reallocation of the these elements right but after eight if you insert nine element then the capacity would become again double mean 16 right okay so this is the thing size Max size and capacity now if you want to resize for that also we have a thing like resize if you want to change the size of the vector then also we can change but here in this case what will happen let me just show you so now the size of this Vector is what actually five so I want to resize it so how to resize wals dot just call this resize and how many number of element the size would be to store how many elements so here you have to give that n value so that would be three right so right now in this Vector we have a e i o u after resize if you print this Vector if you print this Vector let me just show you what it will print so what it will print after resize till 0 to uh size of that vector and we are using add function to access the elements right now right so see it is going to to print a e I only three elements because we have resized the vector to three so resizing means this is like n the number of element you want to store in that that Vector the size so after three after n number of elements if there are extra elements in that Vector right now so it is going to erase all that elements remove all those elements and destroy those elements because in Vector we have five elements after inserting this U after push push back the U but after resizing it will print only three element a e i removing all the two elements right so yeah it is going to alter the vector elements also this resize this operation sorry this function right and if the vector is here integer let's take integer Vector here int I want to resize this Vector resize 10 I have resized this Vector to 10 so see let's what let's see what it will print see 1 2 3 5 0 0 0 0 0 because it is integer so it would be the remaining element would be initialized to zero because you are not providing any value right now Vector size is five but you have size to 10 now it will insert 10 element here so five are there by default it will insert 0 0 0 right and see here right now the capacity of this Vector is also five but you have to resize you have resized this to 10 so if you want to print here the capacity of this Vector size and capacity let's Sprint both size and capacity of this Vector after resizing see size is 10 capacity is also 10 right here we have empty Reserve sh to fit empty means you have to test whether the vector is empty or not Reserve means request a change in capacity if you want to like reserve a seat if you are setting somewhere in a classroom right and you have reserved a seat next to you and if someone is coming you will say that my friend is coming so this seat is reserved right now there is no one on that seat it's no element but someone is going to come in future you know that thing so you have reserved that thing so capacity is of two seats but right now only one element only only you are sitting there so if you want to reserve extra capacity if you want to uh you know request a change in capacity we can use this Reserve function see request that the vector capacity be at least enough to contain n elements right N means any number of elements you can say okay let's see how to use this empty and Reserve so see the capacity was 10 and after the size size was also 10 but but if you want to reserve the capacity to 100 so what we can do like I know I'll be inserting 100 elements uh you know uh in this program later so rather than reallocating again and again after the insertion you know for capacity because capacity is going to double right after if the that is capacity is exhausted so at first I I I'm going to reserve 100 capacity for 100 elements so here if you want to reserve then we can call this reserve and here 100 100 for 100 elements I want to reserve so right now capacity would be 100 if you run this thing see let me show you see capacity is 100 and size is 10 right so you can reserve extra capacity also space Also and what was empty before printing this Vector if you want to check like the vector is empty or not so so we can use that thing also like if this Vector uh V Dot Mt we can call this function then we simply print no element in Vector so it will return if the vector is empty it will return true so if true there is no element but right now we have elements in this Vector so it is going to print those elements right okay let's run this again see it is going to print these elements right but if the vector is empty Suppose there is nothing don't resize it right now let's run this see no element in vector v size is zero capacity is 100 because Vector is empty size is zero and capacity we have reserved 100 for 100 element and no element in the vector so this is how you can test using Mt shrink to fit means if you want to you know shrink the capacity of that Vector equal to the size of that Vector then we can call that string to fit function and see in resize we can give like the resize 10 and I want to insert 50 here so it will insert 1050 in this vector right so this thing also we can do in Rec like 50 50 50 right 10 * 50 right number of times and then the value you can give that is also fine in resize or only resize only size you give 10 then the element would be by default initialized to 0 0 0 0 right 10 element 10 Z in that Vector okay now string to fit is what so it request the container to reduce its capacity to fix its size please go through this website and you will get here everything right you don't need to remember everything any I don't remember everything every function and the description and how to use that function right so how to use this thing see right now size is 10 of this Vector because we have resized this vector and reserve the capacity is 100 right but now I know that I don't want to insert 100 elements so I want to shrink its capacity to the actual size so what we can do here after printing this capacity if you want to shrink then you can call that function in this vector v on this vector v dot shrink of it and now after this if you print again the capacity after Shing to fit the capacity is okay whatever the capacity it is going to print see first the capacity was 100 size was 10 but capacity of we after Shing to fit is 10 we we are requesting to shrink its capacity to the actual size so 10 and 10 right okay this is what we can do but it is not necessary that this request would be granted strength to fit it depends okay next are how to exess the elements this thing we have discussed in previous video using this operator then add front back and like this now next is modifier we have some modifier push back we have discussed add element at the end pop back means it will delete the last element right insert so let's see these two push back and pop back first so this is our vector v and there is nothing in this Vector so now I'm going to push back some elements in this Vector right so it is going to add the element at the last of that vector and it's going to increase the obviously the size of that vector by one by one by one right one element we can add using this thing so let's use do I Loop here okay here it will ask like enter element and uh we are taking a value suppose well so let's take into well a variable first right and then this thing we are going to push back in this Vector this variable push back and well right and if you enter zero then exit this is the condition we'll take we'll put here right and in this y Loop we just put Val if the Val is zero exit right okay now pop back pop back means it it remove the last element and it will decrease the container size by one right so let's pop back here also V do pop back and that's it last element it will it will pop back again pop back two po backs I'm using and uh we are now printing the element of this Vector this is how we are going to print after P back okay let's run this and see what output you are getting now enter element 1 2 3 4 and now zero now Vector elements after pop back is only one 2 three because we have used two pop back so 1 2 3 4 0 0 was last element Zer was pop back four was popped back and remaining elements are 1 to three only right so this is how we can use before popping back you can again you can just if you want to print if you want to check the number of elements we can check it's before pop back so now it will print two times 1 2 3 4 5 0 Vector elements before pop back 1 2 3 4 5 0 after pop back 1 2 3 4 two elements 0 and 5 are out and destroyed continous size was decreased by two right now next is we have insert okay this function is also useful so if you want to insert some elements at a particular position so you can give like obviously you have to point to that position iterator will use to point how many number of elements you want to insert that thing you need to give and what element you want to insert that thing you need to give three things right and it will insert see the the new elements before the element at the specified position whatever position you will give that using that iterator before that position those uh elements new elements would be inserted right and definitely to increase the container size by the number of element inserted right so let's see how you are going to use this now we have some Vector like I have a vector v and the these are the values in this Vector okay now I want to insert values here at position three right so now you have to give what value you want to insert how many value you want to insert and the position so position I mean to point to this thing we use iterator obviously so let's create an iterator we know there is a thing in STL iterator so let's use that thing iterator and suppose it I'm taking the name of that iterator and it I'm initializing this it it to point where it is equal to V Dot begin let's suppose first begin so first it will point to this here begin right so whatever value will insert if I call this V do insert and pass the iterator the position the location it how many value you want to insert suppose two and the value is suppose 80 now let's print the vector elements so let's run this and see what output you will get here Vector element after insertion 80 80 see the position was beginning so before the position inserted 2 80 and 80 right if you want to insert at some more specific position like at third so begin plus 3 so two so this is begin plus two means 1 and two at third position 280 would be inserted right or if you don't want to insert two only one that is also fine let's run this see only 180 at third position right and these these elements would be reallocated right shifting to like towards the right one position so all the elements are reallocated so definitely it's not an efficient method to insert element in vectors but in list we can uh use we can you know insert an element at specific position more efficiently right this is more tedious because of this reallocation of all the elements after that position right so this is how we can use insert or you can you can insert like maybe 1080s 580s 1080s or th000 time any other any element right so see 108s this is what insert at specific position if you want to insert then you can insert more erray clear can use Clear means it will destroy all the elements of this Vector right so how to call V do clear fine if you want to clear sorry this all the elements of this Vector you can use B dot clear and it will erase all the elements destroy all the elements and after that if you print Vector elements after calling clear let's run this and see what out outut you will get here so after insertion these are the elements after clear there are no elements because size is zero and if you print size that would be zero if you want to erase particular element if you want to remove any particular element and any particular position you can use erase see we have erase this is clear this is erase so it is going to remove the from the vector either a single element or a range of element first and last last range you can give first element would be included in that range means first element would be removed but last element is not in that range last element would not be removed right let me show you one example of the series this Vector now if I apply V Dot erase if I call this function then first the position you need to give and that we can give using iterator because iterators are obviously pointing to any use to point the elements in that container class so you either you can create an iterator like this right or directly we can use like V Dot begin this element I want to remove this five so this is from begin to 1 2 3 + 3 so after erasing one element which element would be erased from beginning 1 2 3 this five so let's run this what output you will get here there will be no five here and if you want to give a range like more than one element I want to erase so we can give a range also suppose from beginning to V Dot uh begin plus three or begin plus two these elements I want to erase I don't want to erase any particular thing so begin means from 1 to begin plus two 1 and 2 so this is the last iterator position but this four is not included so only one and two would be deleted 4 5 6 098 that should be the output let's run this and see 45 6098 right this also we can do like uh + 1 from 2 to 5 these I want to erase 2 4 5 so begin + one first would be erased and last would be six because six is not included so we begin plus from two it would start so how many you will add I want to delete 2 4 5 so this is for your assignment now pause the video and write down this this function erase function what you will write here so plus one 2 1 2 3 + 3+ three means right now itat is is here six but six is not included so only 2 45 would be raised 1608 should be the output so1 5608 let me just see begin + one now here is the iterator plus okay it's begin plus three so from here 1 2 3 it should be begin plus 4 right now 2 45 would be raised 1608 right so this is how we can use series the remaining function are like Swap and more function also there so you can use those functions too right just try out those functions if you're not getting you can let me know in comment section we can just discuss the remaining function in next video right so I think vectors are clear so now I'll see you in the next Tut bye bye take care