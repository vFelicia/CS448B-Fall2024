so in the series of learning c plus plus programming language in the previous video we have discussed history of c plus plus in this video we'll talk about basic structure of a c plus plus program right so uh before writing your actual writing the program you should have basic idea about the structure of a c plus program and it is almost same as the structure of a c program right that way you can check out in the side button right and these are the sections in which you know uh which basic structure of a c plus first program can have but these sections are not compulsory all these sections only two sections or three sections are compulsory to include in your program all other sections are optional so what are optional sections what are compulsory sections we'll discuss in detail in this video with the help of a program as well i'll show you the program on my laptop which will include all these sections right so i'll show you practical also so these are some sections our c plus plus program can have and i will not discuss in detail those sections which are same as in structure of a c program because i think uh better not to waste time on those sections those sections explaining again in that video i have explained these sections in detail so you can check out that video that i have put in the side button right or you can check out in the description box i'll put the complete playlist link see complete playlist you can go to that playlist and you can check out the video at starting i think third or fourth video is about structure of a c program so you go to that video first then come to this video so now the first section is documentation section in this section same as this see program also have this section here we generally include the information about that program like author who is the author of that program the date of written of that program and what this program is all about right only by seeing the documentation section one can identify this program is all about what if i have written a program right like author is journey date is this and this program is right you know program to add two numbers so if you will see that program by not you will not see the program actual program you just see the documentation in the documentation section and you will know who is author of this program the date of return of this program and what this program is all about so it will increase the readability and maintainability right so it is completely optional you don't need to include this section it is not compulsory and here we write the information in the comment box single line comment and this is multiple line comment this is single line command here we can multiple lines and the last of this line you can include this this is multiple line command all these the lines will write these comment after these comments that would not be considered by the compiler as line of code that would not be compiled that would not be converted into object code right that would completely be completely omitted by the compiler right so now the next section is link section so here we have two parts in c plus program header and namespace generally in c we have like we know header file hash include stdio.h right here also previous in previous version of c we include something like this i use stream we used to include i use stream dot edge this thing hash include we call it as a header file it contains the you know you can see the declaration or the prototype of all the builtin functions and the constant and some objects everything prototype of those builtin things right so header files or you can say now we now modern compiler support what i use string the known dot h version we don't write dot h now we generally wrote these things before c plus plus got standardized right modern compilers don't support these things these files dot h files after c plus plus good standardize right the concept of name spaces comes and everything they group into namespaces right namespace means it's you can say just a container container for identifiers identifier means just a name of any function or object or any constant these things are identifiers so namespace is just a container or you can say group of elements objects classes functions in name spaces we have definition of these things declaration of these things object class is function constant these things right so after c plus plus got standardized we use this thing only this is known as header not header file we call it as a simply header i o stream header and in this header we have eight stream object declaration of eight stream objects as well as i stream objects o stream objects that are also there in this io stream input output stream right so the object we use c in c out for error c e double r we use a and dl we use all these objects are declared in this header in this header but under a namespace named std right i'll show you i'll show you this header on my laptop what is there in this header in this header it just we there is a code there will be a code in this header and it's like a name space it's like you can see it's a group std name space and here we have these things whatever you use like the object c and c out and all these things so after c plus plus good standardized they group these things under name spaces and why name spaces to resolve or to you know resolve the name conflicts now what does this name conflict see so i guess this is clear why we include these header right generally in a program you know we use some builtin functions or classes or objects or constant right c and see how these are considered as object these are built in those functions or classes these are defined in library files so to include these things in your program we you have to give appropriate header right according to your requirement so if you want to use input output related things the objects or functions you use which header io string right so that is why you need to include these headers right and before this is not a standard header now right only turbo c plus plus compiler i think support this thing but vs code don't support this modern compiler don't support this dot h version they support without you know no dot h version see before these c out scene these were defined in io stream dot h but after c plus plus good standardized these things c in c out and many other things were moved into a namespace named std and this known dot h version these are considered as standard header standard version standard header right so that's why nowadays we include this thing not dot h so now under this obviously everything is grouped in name spaces so one namespace is standard namespace that is std there we have all these c in c out and dl these these objects declaration of these objects stream objects right that is why generally we write down your program using namespace std so that is part of link section here we use this headers and appropriate name space right so link section we have these headers i think this is clear to you and another thing we have name spaces name space i think this is clear to you and why we need this name space like don't worry in detail i'll put a video about name spaces right ah if we i'll discuss more in name space then this video will be about name spaces not a structure of a c program i'll i'll give you a general basic idea a brief idea of the headers and namespaces so i have told you name spaces are used to resolve the name conflict uh same as like two child half same name like maybe no no i will not take rahul one comment i wrote like one student or named aniket he said every time you take rahu next time take my name okay consider aniket is a student aniket is thick a student in one class in computer science also only student in ec also in and ec so aniket is there right now when i call aniket who will respond this or this both are standing you can say here only so who will respond i don't know because there is ambiguity right if i say aniket from cs then he'll respond to me aniket from ec then he'll respond to me so by calling aniket by aniket from cs the this will resolve the conflict there is no conflict now though no name conflict same happens in the case of programming right now this will be considered you can see as a name space so we are identifying two same things by name spaces if no namespace is there this will create con conflict ambiguity in your program right so same suppose we know that we don't we cannot have in the same program two functions or two objects of same name two classes of same name right but yeah you can have same name if you resolve the conflict by using name space concept right that i have told you in real life you can take one example like this right suppose in suppose in two library files we have same function named any function name you can say support sort or print any function and you are you are included you have included both the header files in your program right now whenever you call in your program suppose we have a function name sort this function solved so this is in this header file so this header file also then compiler is going to get confused like which function to call from this or from this so to you know what to resolve this ambiguity we use the concept of name spaces they introduced the concept of name spaces in programming language right so that same name of any function object or classes can be used right because namespace is different so if name is same then there would be no conflict like this if i have and you can create your own namespace also how to create just write down this keyword namespace and the name of your namespace suppose i am taking ns1 namespace 1 just curly braces and here suppose word salt and just coding of this thing another namespace is there namespace n is 2 here also we have void sort and definition of this and that's it no semicolon after name space right so now whenever you call this sort s o r t it will you know confuse the compiler which function to be called so to resolve this thing we write what yeah obviously this is this in this name space so you write before this thing you write the name of the name space ns1 and scope resolution operator and if you write ns2 scope resolution operator and the function name sort now that's fine this line will call this function this line will call this function although name is same but no conflict is there you have properly identified these by the name of their namespaces ns1 and s2 scope resolution that is why programs generally be used in using namespace std or maybe you you have written like std this c out this kind of thing or std this scope resolution operator seen so if name space is just provide scope the scope of this is within this name space the scope of this function is within this name space right that is why it is known as scope resolution so this this function scope of this is within this name space the scope of this function is in this name space right i hope now basic idea about name space is clear to you right what is namespace and why we use this thing to resolve name conflict basically right so in detail we'll see the name spaces concept in a separate video so in link section we have headers and namespaces so that is all about this link section then definition section we have macro definition like hash define these kind of things you can take this is same as in c global declaration also globally if you want to declare any variable you can write down suppose in your program you have 5 or 10 functions and all these functions are using two variable a and b so rather than declaring these two variables again and again in ten functions right same variable a b you just declare those variable as globally so all the functions can use those variables globally right and after that see this section is optional link section this is compulsory you have to include this in your program definition this is also compulsory sorry optional definition global declaration this is also optional you don't want to use any global variable it's up to you so this is also optional class this is also optional without using class also you can write down a program simply that i have discussed simply print hello world nothing you have to include just header iostream using namespace std although it's a bad practice to include using namespace study why so that also discussed in a separate video after that just main function then see out hello world that's it no classes there so this is also optional main function this is compulsory so these two are compulsory to include in your program all others are optional according to your requirement you need to add now in class we if you want to create any class just class how to write class your class name suppose i'm writing my class so first we should be capital and then every word would be separated by capital letters like my after next word is class so c would be capital otherwise uh all the letters would be and then small right so my class and how to define this thing here you can write down data members and your member function data members means uh the variables suppose i want to take to int a one variable only right and member function is there i want to use void display so here only you will define this thing like c out and hello that's it right so you will or you need to specify here pub specifier private protected or public public means everybody can use these things uh the variable and the function so here we have the data members and the member function definition if you do not want to define the function within the class outside the class also you can define but there you have to tell the compiler that this function is from this class so the syntax would be different class name scope resolution operator and after that you have to do that thing that also we can discuss so this is what the next section this is optional class definition there we have data members and definition of member function that's it now comes to main function this is compulsory obviously from where the execution would be started from main function first of all control will go to main function right so main function is compulsory main also there are two parts like if you want to declare any local variable you can declare those thing and the statements executable statements you can say the declaration part and executable part right that would be in main function or any function you want to call that also you will call in main function right you can call in main function in any other function which also you can call but in main function also we call generally right now for the classes if there is any class so object of that class also you will create in that main right using that object we can access the members and functions of that class right have to write down this thing i'll show you practical also the main function is also important compulsory next is sub program user defined functions if there are any other user defined functions you have taken then after main u generally after main we define those functions right so after main you will define those your user defined functions there can be many number of user defined functions right so see documentation link is something different from c program the structure of a c program because here we have concept of note header files we call it is that header and name spaces but this is same as structure of c program definition is also same global declaration is also same main function is also same and sub program section is also same so for detail for detailing for detailed explanation of these functions you can refer to that video right if you you know got it from this video then it is fine no need to refer that video right now i think let me just show you one example then you will get a clear idea about these sections right so this is a program right i have already written this program let me just increase the phone size first dot cpp so see this i have written documentation section author jaintika three written on 13 may 20 20 22 programmed to demonstrate basic structure of a c plus program the first line is single line comment and these two lines are within multiple line commands so this is documentation section right it will increase the readability and maintainability maintain maintainability of the program like if any other one wants to maintain this program or to you know read this program want to understand this program what this program is all about then by looking at this only he or she can get the idea this program is all about what right now next is link section so here we have hash include io stream this header io stream rotates here i haven't included using name space std because i have told you this is a bad practice to include why so that also we can discuss rather than including here i am using std like this std namespace copy resolution co std endn what are the objects stream objects which are in std name space if you you want to use those objects those things those objects in your program then before using those objects you have to specify from which name space these objects are otherwise the c out if you don't write this std colon this std scope resolution and you simply write c out then it will give error right because now see identify c out is undefined this would be considered as a normal in our program we have those functions or objects or anything but in this program we do not have any c out the declaration of c out so from where we are using this from name space std so now it will not give error right so i'm using this thing rather than using namespace std i'm not writing that thing so see what is there in this i o stream i haven't included dot h because modern compiler don't support these files now these known dotage versions are considered as standard headers right so you just press ctrl and click on this i o stream standard io stream objects are there in this file see you can read out this thing and i i just want to tell you where is this std name space c name space std they have defined everything they have group everything whatever the functions or objects are there in this under this name space so in this name space std and they are also including o stream and i i stream files also right so in this std what we have the object c in c out c r r c log these objects we have basically eight stream objects the declaration of eight stream objects right so using namespace std before using these objects in your program you have to tell from which namespace these are before c plus plus word standardized these are defined in iostream dot h header file but after that after the standardization process they have put everything in a namespace std within that io stream file and namespace is their std under that namespace these objects are there so now you have to tell that the file is iostream the header is iostream and the namespace is std within that namespace these objects are c out scene so if you want to use those objects you have to include the name space also that is why we generally write using namespace std right so that's it i hope you got now the basic idea about this thing now has to find this this is what uh macro definition pi 3.1415 right i have discussed macros in detail in the c playlist video so you can check out those things now this is global declaration in our variable r is equal to 2 and void area a function area the prototype of that function i have given right so this and r is equal to this is global declaration of this variable r you can use this r in any function in your program now the class classes class my class is there here i have taken only one variable a that is public word display and simply before using c out i am using std before using e and dl i'm using std because the c dl is also in this name space this identifier is also in their names i'm just printing inside class that's it right now main function in main function i have created object of this class how to create object name of the class and name of the object m now how to access this a and this display function using the object so m name of the object dot a now i'm assigning the value a 90 and i'm just calling m dot display right now i'm calling a function area also another function is there which is not there in this class separate function i have so area i am just calling i i haven't defined this function area function right now what i am printing see out hello world from main function and what i am printing m dot a and that's it whatever the value of a i am going to print so how to access using the object and return 0 return 0 means successfully we have returned means 0 would be returned to the operating system int means it is expecting integer value so return zero means successful termination of the program we are telling the operating system that successfully we have terminated from the program now this is a program section right user defined function so this is definition of user defined function void area float area variable i have taken area is equal to pi r square area of circle i am going to calculate now just printing the area that's it right so here i am writing pi so this is what a macro so i have defined hash defined pi is equal to this thing so this pi would be replaced by this value before compilation start right so now that set these whole section we have let me just run this i don't know it will work or not let me just run this and show you the output okay what is the output error p doesn't name a type okay now see uh the output what you got let me just do this see this is output inside class first of all it will print inside class then 12.566 area then hello from the main function and then value 90 right that's it so you can see here first control will go to the main function then m.display so it will call first of all display in display we have inside class so that it will print then area it will call then it will print area of the circle then it will print hello world from main sec main function then it will print this line m dot a value is 90. so this is the program which is having all the sections but all these sections are not compulsory you have to include only link and main section right if you don't want to use again and again this stdc out std these thing you can simply write down here using namespace std now whatever is there in std name space those thing you can use in your program right those would be included here but i don't want to use all the things whatever is there in std there are many things in std i want to use only two to three things see out cn and e and dl that's it so why to include this std right but you can include this thing otherwise you can write using like std this and c out that is also fine using std name space using std scope resolution e and dn using std scope resolution c in that's it right so i hope the basic idea basic structure of a c plus plus program is clear to you about namespace i'll include a separate video right so that's it for this video see don't worry about these namespaces and header on these headers also we can upload a separate video if you are confused about this thing you can tell me in comment box and on namespace definitely i'm going to upload a separate video so if you don't get these thing namespace and header whatever whatever i have told you next link in this link section don't worry in that video you will get it better i hope now you have basic idea about the structure and what are in these sections overview of these briefly you have have the idea right so now i will see you in the next video till then bye bye take care