so in the series of learning c programming we are discussing functions in c we have discussed function declaration and function definition in detail with proper program and you know some practical also now we are left with function calling so here we will discuss two types you can call function uh you know by two types call by value and call by reference these two are very important when it comes to function calling so this in this video i'll talk about call by value and call by reference method to call a function with proper program i'll show you first of all you'll see the program here then i'll show you practically on my laptop right before that just want to tell you one thing if you are looking for a great career in software development then you must think about the aspects like what's trending in the industry the questions being asked in the interviews how to improve your courses frankly so an academy brings you a platform where you can get access to weekly shows which you can watch live and the host of these shows are seven star coders on codeshare and are working in the top companies like google amazon linkedin flipkart and having years of experience so they'll be covering the content which would be really helpful for your career like in live episodes you can ask take a charge top questions being asked in the interviews and the industry leaders about the recruitment process top startups and mncs what is the eligibility criteria and how to apply for them you can also get your resume reviewed by the experts not only this you can also participate in mock interviews and learn courses on programming languages cloud computing blockchain and crypto data analytics and have you ever thought about the hiring process of the top startups and mncs then there is a show in which anuj will host prominent hr leaders of the tech industry and you will get to understand the a2z recruitment process internal structures and work culture of top companies key product offering and interesting projects being worked on by the hr's so the benefit of the show is what you will hear directly from the companies their hr's and tech teams on what they are looking for in individuals while acquiring people so the detail of this show and the batch you will find in the link that i'll put in the description box of this video and don't forget to use my code jkl10 to get 10 extra discount on your subscription so now back to the topic call by when you call my reference before going to this topic just want to tell you one thing what is function call i think uh if you have watched my previous videos then you are aware about the function calling there we have give we have taken one example of sum sum of two numbers so function calling is what simply you can pass here suppose i am passing argument five and seven right no return type only function name and the arguments or the value of the arguments or if you don't want to pass directly the value simply you can also pass the name of the argument like x and y here i can take in x is equal to 5 y is equal to 7 function calling we are you know calling this in suppose main function so here you can write down this thing right and then definition you can item definition and before before using this if you are writing the definition after this calling here after the scrolling then you must have to specify here the function declaration otherwise whatever you will get that we have discussed in the video that in that video when we were discussing function declaration right and if you define the function first and then you are using main function and you are calling that function in that case no need to declare the function right you will not get any warning or any you know warning like implicit declaration of that function right so now here you can call the function by value and by reference now what is difference between these two see simply i am taking this function i am not taking this function suppose i am taking simply i am taking x is equal to 5 y is equal to 7 and here i am taking our own function name is fun right and here what i want to do i want to pass x and y this is function calling right now this is called by value or call by reference that i'll discuss now here i am defining this function so i am writing void fun and int x in y you can take same variable name or you can take different suppose i am taking a and b its up to you or better to take same variable name x and y to get a better understanding of call by value and call by a reference method right so now in here i am writing x is equal to 7 and y is equal to 5. right and here i am printing value of x and y that's it and after this function calling here also i want to print value of x and y so now here i am calling this function so and i am defining this function after calling so in this case better to declare function first to you know avoid to skip that situation implicit declaration of the function that we have already discussed when we were discussing function declaration in c you must watch out that video first right what kind of error you will get if you not declare the function here but if you define the function here and after that you are calling that function there no need there is no need to declare the function at that time right because here i am calling the function here i am using the function and before the use i am not defining and neither am defining nor i am declaring we always declare like we when we first use the variables we always declare those variables first right so before using either define that is fine if you don't define then declare that function so here i am declaring that function void fun and here just write down what the data type of the arguments in no need to specify the name of the argument like a into b or if you specify here in a into b that is also fine you will not get any error right so now whenever you run this program control will go here first of all main function and in ram some memory would be allocated to this main function so in main we have x and y two variable x and y in x we have five and y we have seven suppose address is thousand and is this is one zero four six we don't know the address i'm just taking it for simplicity purpose now next line is i'm calling the function fun x y and i'm passing x and y see these are known as arguments or you can say actual parameters right and here and here these x and y this x and y this is known as parameters this x and y is known as arguments in function calling whatever you pass that is known as argument in function definition and function declaration these are known as parameters or parameters are also known as formal parameters and arguments are also known as actual parameters i hope uh you now this difference is clear to you right because many students get you know confused in this term parameter argument formal parameter actual parameter right so now here this is function calling so now control will go to the definition of the function and now it is going to match the definition with declaration return type matching function name matching data type of the argument int matching two arguments we have two or here we have both are matching so now whenever control will go to here this function now the some memory would be allocated to this function also right during execution now here we have here also we have x and y so now here in this x and y what we have in function calling i am passing value x and y so value of x is 5 and value of y is 7 so in x we have 5 and y we have 7 but now whenever control will enter here now x becomes 7 because i am assigning x is equal to 7 y is equal to 5 and y becomes 5 and i am printing now x and y so what output you will get x is equal to 7 y is equal to 5. see it's not swapping of the you know variables i'm just assigning the value swapping that function is different the method is different process is different so now whenever controller will reach to here i'm not writing any return statement so this closing braces will act as return word return so now whenever control will reach to this closing braces the control will go back to where you are calling this function so here i am calling this function so now the working of this calling function is over now you have any other line after this yes i have printf this one so here also i am printing x and y value so here what value would be printed maybe you are thinking we have changed the value of x and y so it would print 7 and 5 but no here in this x and y what value would be printed whatever the value in this main x is equal to 5 and y is equal to 7 so this is what call by value see whenever i call a student by their name like i am calling rahul rahul so i am the the student by his name if i'm calling i don't know the name of the student and i'm saying i'm you know calling the name by that you know red tshirt so i'm calling the student by the color of the tshirt or maybe i am calling you know like this the last venture right so i am calling the student by the address right so here call by well means we are calling the function by passing the value only so here i am passing the value of 5 x and y 5 and 7 so now what the mechanism is what behind the behind the process behind the scene is what what is happening the value would be copied where here in these parameters so here i am taking x and y you can also take a and b that is also fine so these x and y are local to this function only so the value would be copied 5 first of all 5 would be copied 5 and then here 7 would be copied right but now i am processing i am doing some processing within this function processing is what in x i am changing in x i am storing 7 in y i am storing 5 right but whatever process you will do on these variables that would be reflected within this scope only because these are local variables once control will go out of this function out of this scope means that reflection would not that that you know that change would not be reflected where here where you are calling this function because this is what here you get copy of these variables so within this copy only you are changing right that would not be reflected here the actual arguments are here so that result that change would not be reflected here it's just a copy of these variables right and these are stored in different different memory location memory location is 2000 suppose 2046 and this memory location is different so if you if you print x and y value here within this function then only you will get this changed value once control will reach to here means that change would not be reflected here so now here x and y values are within this main do you have any x and y value yes i have five and seven so here you will get five and seven so this is you can say drawback of call by value you have done some processing but once control will go back to the calling function all that processing all that change is gone vanished so that is why we use call by reference i want whenever i do some processing whenever i do some change in the definition of the function that should be reflected wherever i call that function in that program or in that application that should be reflected here also in calling like in main functioning if i'm calling or in if any other function i am calling that should be reflected everywhere in that program or in that application if you use call by value that would not be reflected so to get rid of this situation to solve this problem we use the invented call by reference method so call by reference reference means address so you are calling the function by passing the address here you are passing the value call by reference means here you will pass address so in this program if you modify this program call by reference so here we will pass address of x and y means rather than passing 5 and 7 we are passing this address address passing if you will do then you will use obviously address of operator address of x address of y right so if you are passing this means we will whenever function will call this control will come to here this will go to here so this passing address you are passing means thousand and one zero four six so to store this address this these are normal variables they are not able to store the address which variable can store address pointer variable that we have discussed pointer is a special type of variable that will store address of some other variable so here rather than defining it simply in text and you have to take pointers pointer means just do what s trick x s trick y so maybe you are thinking here x and y are normal variables here these are pointers so this will give error no because scope of these x and y are local to this main means within these curly braces scope of this x and y these pointer variables are within this curly braces so they are not going to mismatch it's fine they will not give any error it's like baby this is one house and this is your neighbor house this is your house and in your house suppose you can say rahul is name of any small kid right and here in your neighbor house rahula's name of uh maybe an older person may be father of the small kids so that is fine obviously they are not going to reflect because both are in different houses so it's possible i hope you are able to relate this real life example with this problem or maybe not but see now here this x and y now what value would be stored in x and y whenever the control will go here you are passing thousand so thousand would be stored in x here you are passing one zero four six one zero four six would be stored in y these are pointer variable now so now here situation is this x is pointing to here this y is pointing to here right so these are now interlinked means whatever change you will do using these addresses that would be reflected here see the five and seven the values are only one there is no other copy like in previous case here we have addresses of these variables so now you cannot directly say x is equal to seven it will give error because x is in a pointer variable you cannot assign any integer value like this so what you can do here here i want to assign seven and here five i want to access this location so using this address how you can access a strict x a strict means here it is acting as indirection operator a strict y is equal to five and if you want to print here the value then simply obviously x and y you cannot write if you write x and y in x you have thousands so it will print address but i want to print the value so a strict x and asterisk y right here if you want to print no need to write down a strict x a s trick y because in this one in this main in this scope x and y are simple variables so here simply write x and y no need to write down s trig x s trick y if you write down here s trick x is trick y it will give error because within this main function x and y are normal variables and strict x you are writing means oversight will give l strick x means indirection operator is a value at this address but in x we have 5 only there is no address like x is normal variable it's not pointer you cannot access like a strict x so here you will use x and y only but here you will use a strict x s require i hope you would why this case the difference right so now what is the process now whenever this will call now this value has been addressed has been stored here now strict x means value at this address asterisk x is 1 000 so value at thousand now thousand is what this one value at thousand is five so here i am storing seven so now here i am storing seven s require value add one zero four six here so here i am storing five using the pointer i am directly accessing the original values i am directly changing the original values i am not changing the copy right so now here you will print directly stick x means value at 1000 is now 7 so 7 would be printed 5 could be printed now control will go back to here once here in the closing this is what closing of this function now the working of this is finished now next line print f x and y now here x value is what 7 7 would be printed y value is 5 5 would be printed so whatever change you have done within this function now that change has been reflected out of this scope right beyond this scope here you are calling this so here also it is changing the change has been reflected here also so here x is 7 y is 5. so this is what the difference between call by value and call my reference right i hope you got the advantage also uh the advantages of call by reference right if you want to know if you want that the the whatever processing you whatever change you will do in the definition of that function that could be reflected in anywhere in the program in the application so you should call the function by reference not call by value or here you can also take like if you don't want to take x and y you can take ptr1 ptr2 that is also fine here you can access asterisk ptr1 asterisk ptr2 so here you will write down what asterisk ptr1 asterisk ptr2 means indirectly you are accessing these values and here simply obviously you will write x and y right that is also fine and here one more thing see here also i think you must have noticed the mistake if you have noticed the mistake then please write down in the comment box or i'm going to tell the mistake here see here i am calling it call by reference i'm using so here in the definition part what these are pointer variable but in declaration i am simply writing intent in simple and simple normal variables so it will give error right so here also the data type must be in asterisk and s3 obviously the pointer in the declaration also because here i am taking pointer so it should be pointer here also it is in star otherwise it will give error so now let me show you practical of this thing so now let me create a file function call dot c right and here first of all what i am declaring a function for it fun here i am going to pass just two data type the argument like uh sorry its parameter it is known as parameter here and it should be separated by comma right and now here i'm writing main function and in main would mean what i'm doing i'm taking in x is equal to 5 and y is equal to 7 right here i'm calling 1 and i'm passing x and y here these x and y are known as arguments and after passing i am printing the value x is equal to percentage d and y is equal to percentage d two values right x comma y right and before this i am writing one more line just to get a better understanding like i am writing inside main or main is also known as here calling function right calling and cold function also i have told you in previous video right and after this i am defining the function so void fun here i am taking parameters in x hint y name you can take x y a b a b m and any name you can take right because these are local to this function only so it doesn't matter so now here what i am writing x is equal to 7 and y is equal to 5 and here also i am printing i am first of all i am writing inside cold function inside of fun and here this one is what cold function right and main is what calling function and now i am printing the value of x and y right now let me run this and see what output you get better to write down here like uh no for formatting purpose here i'm writing slash in and here also i'm adding slashing right and after this also slashing because i just want that all these output should be printed in new new lines not in the same line right so c first x and y would be executed this this line would be executed first like this one inside this cold function so that would print x is equal to 7 y is equal to 5 so see x is equal to 7 y is equal to 5 inside fun function hold function inside main function x is still 5 and y is 7 because this is called by value we are just doing some processing the changing in the copy of the original value not in the original value original value is in main function so in main function if you print the original value would be printed that is x and y and that is 5 and 7 right now call by reference so now here i am passing address address of x and address of y right so if you are passing address then here it should be strict there should be pointer variable to store that address normal variables cannot store and here i am changing i am accessing the location using pointer so that is why we are using indirection operator and here if you are printing this send then you have to write strict s trick but if you will run it then it will give error because see what error you will get because we are not changing the declaration of the function see conflicting type for fun see here notice what expected end in the third line expected argument should be in but argument is of type in star but see here argument you are actually passing is of type in star because you are passing address so argument is of type in star so here you have to change this also and start type should be in star because this type should be matching in declaration and definition right so now run this see inside fun in cold function now x and y are 7 and 5 and inside main also x and y are 7 and 5. now we are calling by reference by the address so now you are changing the value in the original value in the main function we are accessing the original value by the address right so this is the difference between call by value and call by reference i hope you got this difference so now in the next video we will see some problems on functions and i'll see the next video till then bye take care