so in the series of learning c plus plus programming language we are discussing operators in c plus plus in the last video we have discussed arithmetic and relational operators right so the next two types of operators will discuss in this video is logical operator and bitwise operator with the help of program i'll show you right practical also we'll see so firstly you will see just logical operators i hope you know what does an operator make the previous video we have discussed it's like just the symbol to tell the compiler which you know specific logical or mathematical operation is to be performed on the operands i hope you know what is operand what is operator now it is clear to you guys now logical operators see basically three logical operators we have logical and logical or and logical not it's logical and logical or logical not the symbol is this for or this and for not this exclamatory symbol right so these type of operators basically you know they are used to combine two or more conditions right and the operand for these operators are of type boolean type right uh let's see if i have three numbers a b and c and you want to find out maximum of three numbers so i'll say if a greater than b and a greater than c it means a is maximum if i write like a greater than b and a greater than c it means we can print a is maximum right so this and its logical end so we can replace it with this operator and means this logical add operator is combining two conditions right and this is one operand for this and this is another operand for this logical and operator so this operands should be of type boolean right see a great suppose a is equal to 10 b is equal to 5 and c is equal to 11 right now is a greater than b this is relational operator greater than right a greater than b 10 greater than 5 yes true it means it is true means 1 and a greater than c no false that is 0 right now this operator will work on these operands this is true this is full so it will give you false that is zero so the operand for these operators should be of boolean type right now logical and operators will work how see if something like this if both the operands are true then only it will give true value otherwise false value the truth table if i say then for this logical and operator is what if both the operands are 0 0 or you can say false it will give 0. if 1 is true 1 is false then also false this also falls and this will give true right so this is you can see the truth table for this logical and if both the operands are true then only it will give true right now and for logical or the truth table is what if both the operands are false then only it will give false if any of the one operand is true it will give true so something like this for logical this is for logical and for logical or zero zero zero one one one if any one of the operand is true it will give true and logical not means if true operand is true it will give false if false it will give true means not 0 will be 1 node one will be zero for this logical node now how these operators work basically they uh work you know on the method of short circuiting i hope you know what is short circuit or let me just discuss this thing also so these both the operators you can say they perform short circuit evaluation now what is this short circuit evaluation see if the first operand means if after evaluating the first operand the result is known to you right then it will not evaluate the second operand this is what short circuit evaluation they don't evaluate the second operand if the result is known after evaluating the first operand only now what does this line mean see here see a greater than b means 10 greater than 5 right yes it is true but after evaluating the first operand only we cannot say what would be the result because for logical on and both should be one so you have to evaluate the second also a greater than c no it is a zero now you can say you have to you know you have to evaluate the both the operands in this case then only we can say what would be the result if this is something like this suppose b is 15 now see 10 greater than 15 is 10 greater than 15 no means false that is a zero in this case it will not evaluate the second operand why so because after evaluating the first operand first is false and we know if any one of the operand is false in logical and it will give false ultimately this is the truth table if both are true then only it will give one so it will not evaluate the second operand directly the result would be false this is what short circuit evaluation i hope this point is clear to you guys same logical or also work on this type of evaluation if suppose i am not writing here this i am writing here logical or and b is 5 only now 10 greater than 5 yes it is true so it would be 1. now it will not evaluate the second one why so because the operand operator is logical or and in logical or if any one of the operand is true ultimately the result will be true so one operand is true so we know the result would be one it doesn't depend that second operand is giving false if this is false then also it will give one if this is true then also it will give one so it will not evaluate the second one only by evaluating the first operand we know the result that's it right so i hope these logical operators are clear to you guys so in some situation maybe you want to check two three four conditions and we want all the conditions must be true then only we can do something if you want to do something then you will perform logical and operator right suppose if i say if camera is there and board is there whiteboard and marker is there then only i'll shoot the video means all the three conditions should be true camera i have board and marker then only i'll shoot so i'm putting and in between these if any one of these this is false if any one of it is not available suppose more whiteboard is not available so i'll not shoot the video right second condition if i take like if camera if i say if i have phone or maybe camera i'm fine with phone also if i don't have camera i can shoot with phone so here i can take or like camera or phone mobile phone if i have camera but not phone then only then also i can shoot if i don't have camera but i have phone that is also fine i don't need both camera and phone i need only one thing to shoot the video so that is what logical or type of thing so this is how no i hope the basic idea is clear to you now you can relate it with your real life examples and you can visualize everything so try to relate each and every concept with your real life examples right in everyday example then you will get it better and it will be in your you know memory for a longer period of time so i hope this logical operators are clear to you now let's see bitwise operators and see one assignment for you is if i write not 15 what value it will give you have to tell me in common section now bitwise operators as the name suggest bitwise means they work on bits they perform operations bits by bits they work on individual bits right now let's see how they works here also we have bitwise and bitwise or bitwise xor bitwise not ah left shift left shift right shift you know right shift and left shift operators this is what right shift and this is what left shift operator right now bitwise and the symbol is this thing so they work on bits they perform operation bits by bits suppose i say i have two numbers x is equal to 26 and y is equal to 9 and you have to perform x and y but twice and so first translate these into bits zeros and ones in that form so 26 would be this one and nine would be one zero zero zero sorry this would be one zero zero zero zero in eight bits i am representing right how you can translate like if i separate 1 2 4 8 16 32 64 like something like this 128 16 plus 8 plus 2 that would be 26 in these uh under these i know places we have 1 and 1 plus 8 8 plus 1 that is 9 so we have this so i hope you know how to convert decibel into binary now bits by bit super form operation now bit wise and same if both are one then only it will give one otherwise false so now it will give what 0 1 0 this is also 0 0 1 1 yes that is 1 1 0 0 0 0 0 so bit wise and this is what in decimal we can say this is 8 so this is bitwise and operator if you perform bitwise or this is bitwise and this is bitwise or the result i am writing here bitwise or means if any one is true it will give true otherwise false 0 1 this is true yes 1 1 0 1 1 0 0 0 it will give what see 16 plus 8 plus 2 plus 3 it will give 27 right now bit wise xor bitwise xor means if both the bits are same then it will give false if both the bits are same then it will give holds otherwise trip right zero and one not same so it will give true one zero true zero zero both are same false force so it will give false true true both are same then also it will give false one zero one is true one is false yeah both are different so it will give one zero zero both are same zero zero zero so the output the result of this would be 16 plus 2 plus 1 90 now this is what negation or you can say a bit wise not operator so if i say uh like something like this negation of x it will uh convert true to false and false to true means 1 to 0 0 to 1 so x is this one y is this one negation of x not x would be 1 1 1 0 0 1 0 1 something like this right so it will give in system if you will print like negation of x then it will give two's complement the value would be two's complement the system value two's complement of x and how the two's complement would be converted first of all once complement then add plus you know add one to the that or the formula is like if i say negation of x would be minus x plus 1 this would be 2's complement so minus x is 26 26 plus 1 that is minus 27 so in system if you put bit wise not operator with x it will give minus 27 right it will give two's complement fine now left shift and right shift c on x i am applying the shifting operation so if i apply x left shift one we are going to left shift this by one bit so x is this means left shift one left shift one so this would be discarded this zero would be here right then this zero would be here then we have one then one then 0 then 1 then 0 and 1 space 1 2 3 4 sorry 1 2 3 4 5 6 7 we have only 7 so the remaining bit would be filled with 0 so this would be left shifted by one if you want to left shift it by two this two left bit these which would be discarded we will left shift these by two and here the two places will be filled with zero i hope you got this so if i write x left shift 2 then the result would be these two would be discarded and i i write from here 0 1 1 0 1 0 and these two bits would be filled with 0 x left shift 3 these three bits would be discarded and i'll write from here one one zero one zero zero zero zero these three places would be filled with zero right right shift if i say x right shift 1 means right shift that side this is right side this is the left side so right side 1 bit from the right side would be discarded i'll write from here 1 0 1 1 0 0 0 3 0's and here the one place will be filled with 0 so this is what x right shift to 1 same with 2 and 3 right if x right shift two bits by two bits then these two bits would be discarded and we will start writing from here zero one one zero zero zero then 2 0 filled with 2 0 right so simply if you want to you know tell you the answer then how you can say the formula is if you shift like x left shift by n bits then what would be the result x into 2 raised to power n so here x is 26 26 left shift n is 1 so the answer should be 26 into 2 raised to power 1 that is 52 x left shift 1 and the answer is this you can try out the decimal of this is 52 like 1 2 4 8 16 32 so 32 plus 16 plus 4 that would be 52 right same for right shift x right shift n the result would be x into sorry x divided by 2 raised to power n so if i x right shift 1 this is the result so result would be 26 divided by 2 raised to power 1 that is 13 so it is 13 1 2 4 8 so 8 plus 4 plus 1 that is 13 so this is how you can tell you the answer by this formula right for left shift and right shift i hope you would right now let me show you practical okay so we have this program operator operator stored cpp now we have this logical operator this is the code right we have x and y x is x 5 y 10 and we are checking if x greater than 5 and y less than 15 then c out it will print x plus y else if x less than equal to 5 y greater than 15 it will give x minus 5 else suppose it will give not equal to x right logical not x ok let me just run this code and show you the answer what you will get here see it is giving x minus y that is minus 5 why so because first condition is x is x greater than 5 no because x is equal to 5 so only first condition is false so it will not evaluate the second one because if one is false logical not will give false so not enter into this if statement block now else if next condition x less than equal to 5 yes less than or equal to yes it is equal to 5 so this is true right now it will not evaluate the second condition because it is logical or so in this case if only one operand is true the result would be ultimately true so yes it would be true now it will enter into this else block and it will give x minus y x minus five that is minus five right so this is how these operators will work they just choose to you know combine two or more conditions here you can put one more and some more condition one more logical and some more condition this kind of thing you can do right so now if i change the condition else if condition if i remove this equal to now what output you will get see it will give now logical not x so x is 5 it means true so it will give false because this condition is also not true now x less than equal to 5 no that is 0 right false but it will check the second also because 1 is 0 second is true it will give true so only by evaluating the first we cannot say what would be the result right in case if the first operand is zero now evaluate the second one y greater than 15 no this is also false so ultimately this will give false logical or operator and will not enter into this lcd block and that will jump to the else block and it will print not x right now let's see logical sorry bitwise operators let me just comment the section out and we have now bitwise operator see what would be the result x is 26 and y is 9 so let's run this code and see the result x and y equal to 8 that we have discussed already x or y would be 27 x x or y would be 19 x left shift 1 would be 52 x right shift 1 would be 13 that i have shown you on the whiteboard and not bitwise not x would be minus 27 i have told you why it is giving minus 27 because it is the system is giving two's complement of the number right so now you can try out these operators with different different operands or maybe the operand directly constant you can write other rather than x and y you can write one or zero or one operand can be x the variable second operand can be any like zero or one or any constant you can try out these different different type of variations right so just try these out practice these operators on different different type of operands and the more you explore the more and more about these operators you will get right so i guess that's about logical and bitwise operator from my side so in the next video you will see assignment operators and some miscellaneous operators in c plus plus so nas in the next video till then bye take care