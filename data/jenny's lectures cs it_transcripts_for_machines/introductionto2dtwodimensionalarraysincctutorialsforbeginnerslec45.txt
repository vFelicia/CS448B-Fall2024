hey everyone I hope you are safe and doing good so in the series of learning C++ programming language in the previous video we have seen arrays in C me we have discussed the concept of arrays 1D arrays in see right the need of 1D array what is 1D array how to declare 1D array how to initialize 1D array how to uh you know the memory representation of 1D arrays and how to access elements of those arrays and based on that we have discussed four or five coding problems as well lead code problem right so now in this video we'll see see what are multidimensional arrays especially 2D arrays right so multidimensional arrays are having more than one dimension that is for sure right so you see how you declare 1D array just write data type right like this int a AR name and here size like five so data type here we write array name and size of the array that's it this is how you declare 1D aray so now if you have more than one dimension so you can declare you can give like same data type array name here size one size two according to the dimension and up to size n how many Dimension you have that many size you have to give here right so like 2D array 3D arrays mostly we use 2D arrays right so now if I take like example of 2D arrays so 2D array it is the simplest form of multidimensional arrays right so have you declare 2D arrays same data type array name and only two size size one size two because we are having only two Dimension right so which type of data to be stored right this is AR name and here the you can say the maximum element to be stored in that array that size we give right now first of all we will see like what is 2D array but the need of 2D array we discuss first right so if I ask you I just declare you have to declare an array uh in which I want to store marks of 15 students let's suppose in my class I have 15 students so you simply declare a array of marks with name marks and size 15 okay fine now I say marks of 15 students but in five subjects in each subject you I want to store the marks of 15 uh students so one way is what either I can say like marks or you can say sub one for 15 student then another array name sub two marks for 15 student like this and you just declare five arrays because you have five subjects right now you have five arrays but is there any you know simple way in which I just have to declare only once yeah we can do this with the help of 2D AR just add one dimension here only for five subject that's it no need to declare five times the arrays right that is why we also say that 2D arrays array of arrays right because here we are five arrays but in one array I'm going to declare this so simply I can say like how to declare that thing float name of the array five subjects and 15 students that's it oh you can also declare something like this maybe this question is in your mind like 15 here five here that is also fine okay but the difference is what I'm going to tell you so here also five subject 15 students or 15 subjects we have and each subject I have sorry 15 students and in five subject I want to store the marks right it's okay now we so how we can say that this is row so if you write the general syntax of declaring 2D array then simply we write here data type array name and here we write row size and the first one is sorry the first one is row size the second one is column size right this you need to take care so in this case we have five rows 15 columns in this case we have 15 rows and five columns right first would be row size second dimension would be column size that is for sure right now have you you you know if I declare this this array so how you think like if I say how you can visualize this array how this array is to be stored in memory so generally we visualize this thing something like this like rather than 15 let's take only uh five subject and or we can say let's take a smaller number two and three only right two subject and three students that's it I have a very special subject two special subject in which I have only three student like maybe I'm guiding PhD students right so now or second way is here we can write down write down two and three so how you visualize this thing in memory sorry not in memory but how we visualize this thing first is row size so two rows column size so three columns something like this right and index would be start you note index start from 0o right so 0 1 0 1 2 these are rows and these are columns something like this right this is how we see so we can say 2D arrays we can also see this in a matrix form or tab form right it's nothing but but a t table or we can say it's like a matrix also Matrix is something like this so in Matrix also we store data something in this form only so that is Matrix also right now if you want to access the element of 2D array then we need more than one index in 1D array we need only one index there 0 1 2 3 4 but here if you want to access this element you need two index which row and which column you need to specify two thing which row and which column right so row index is zero and column index is also zero for this element row is zero column is one for this 02 for this 1 0 1 1 and 1 2 so more than one index you need basically two index you need if you are accessing element any element from 2D array right but this is not how exactly in memory the data is to be stored of 2D no no no no no because memories it's like a long tape of you know b in a sequence so we cannot store data in Matrix form or tular form but how the data should be stored that I'm going to show you in detail in the next video but for now in this video for this video let me just tell you in brief this first row would be stored here continuously then the second row would be stored rowwise there is to be stor but in detail we'll discuss in next video the memory representation and accessing of the array elements like 2D array elements right so this is the pictorial representation if the array is something like this so nothing change here column size is three and rows sorry rows are three rows are three columns are two 0 1 2 0 1 right so in this case suppose three student so here I have student in this Dimension and two subject so in this Dimension I have subject but here in this Dimension I have student and here I have subject it's okay you can do either this or this it's fine right but first would be row size second would be column size this you need to take care right so this is the difference between these two uh declaration right now if you want to calculate how many element you can store or how much memory how many bytes are to be allocated for the particular array so if this is the case first one so how many elements we can store two row and in each row we have three columns means we can store 2 into three total six elements in the St so the memory manager has to allocate bytes for memory for six elements and it is a float type so each element will take 4 by so 6 into 4 that is 24 by would be allocated for this array for this AR also 3 into 2 6 6 into 4 24 by would be allocated right okay this is how I'm going to tell you I'm going to show you like if you want to calculate the size of these thing then we have a size of operator also this thing practically I'll show you right we'll calculate the size we'll show the size also with the help of program using size of operator right this is our first program and I'll show you with the help of program how to declare array how to initialize array it's okay now the Declaration is I think almost clear to you guys if you are just only you know if you are only uh declaring the array you're not initializing the array then you have to give both the size column size and row size right but yeah we can skip this row size this can be empty but that case is different right for now if you are just declaring something like this you have to specify both row size and row size and column size so I hope the Declaration is clear to you guys and how to calculate the number of elements and the how much memory would be allocated to the 2D array right and the pictorial representation how you visualize 2D array right how to access that in detail I'll show you next video now next thing is how to initialize 2D array so same as 1D ARR we have two you know method like we can initialize this at compile time and at run time so at compile time just we give the initializer list at compile time only and at run time if you want to initialize and if you want to ask the numbers the element of the from the user at run time then we use Loops right so first we'll see how to initialize it at compile time right don't worry I'll you know show you this thing with the help of program as well so while declaring only like float marks 2 and three here only I can this is two sorry two and three here only I can give the data the elements the marks this is known as the initializer list using initializer list so how you been initialize this thing we can do in three ways so first way how many element we can store 3 into two six element so just give six element so you just give give the marks six element we can store just give six marks right so how this is going to be stored in memory now here this is one thing so first two rows so first we'll take the first value and that like this is the array victorial representation of the AR so first is 5695 next in the same row 10.2 98 99 three elements we have three columns then next row 95 91 like this so this is first row this is second row or one more clear way is you can some do something like this initializer list uh let me just write down here like this nested list we can use like within this we can just have one more like list and only three elements for first row and three elements for second row so this is I think more clear way here we can directly say like this is Row one and these element would be stored in row two right or something like this also we can do like here just this bracket this would be same and in the next we can just store the marks then in Matrix form 91 91 and that's it this also you can write down this bracket then in next line this thing in next line write down this thing then in next line this bracket and just close right this also we can do so this is more clear way right like Row one and row two so this is how you can initialize that compile time with initializer list this is known as initializer list and now if you do this thing here we can skip this row size here also we can skip this row size in this case also we can skip row size because ultimately we know okay row size is not there but we have three columns so we'll take first element 1 2 3 three columns would be there that is for sure now if there is next element after the three values so that would be stored definitely in the next Row 1 2 3 so ultimately row would be two row size would be automatically calculated you can skip row size but you cannot skip column size if you give a row size and no column size that would be you know confusing because 56 95 this this this I don't know how many columns so in one row I don't know how many columns are there right so this is the case this would be given error but that this is fine sorry this is fine you can skip row siid right but here if I take this example like three and two so half the STA is to be stored we have two columns so this in first row these two in second row these two in third row like this right I hope this is clear to you guys now if I write something like this if this is the case a name is a I I haven't specified row size columns are three and only one value zero then how many rows would be there here so Z would be stored 0 would be stored Z would be stored because there are three columns then nothing else so this is like 1D right if I write something like this rather than this zero I write something like this 0 1 2 in that case in that case also 0 1 2 would be stored because there are three columns but we don't know the row so is there any Element no no element so this also will act as a 1D array that's it right but if I write something like this 2 now in this case three columns so 0 1 2 would be stored next we have any element yes so that would be in next row so definitely there would be two rows and remaining element would be 0 0 initialized with 0 0 so this is how this would be initialized right and if you want to store this 02 in First Row 2 two in second row so just do something like this explicitly you have to tell like this so now this is first row this is second row we can clearly see right so here 0 1 and 2 2 so remaining would be 0 0 I hope you're getting these things right okay now this is like compile time initialization at run time at run time how you can initialize so so let's take a simple array we have two rows and three columns so we have something like this two rows and three columns index would be like this so obviously we need nested Loops to initialize to uh you know take value from the user when we use Loops so we use two Loops we require nested Loops because two Dimension so we need two Loops if there are three dimension we'll need three Loops right one Loop is for rows one Loop is for columns I have already discussed in a video the need of nested Loops in C programming language in that playlist also and in C++ also right so if you deal with something like this with Matrix or tular form obviously you need one Loop for to increase the row and one is for to Traverse columns right so first this first row within this we have three columns so I will take I and J2 variable so let's take I is equal to 0 and I less than I would Traverse number of rows so outer loop would be for rows and inner loop would be for columns right less than two number of row row sizes two within this we have J less than column and j++ and within this we can simply take the value a r r first is I second is J because I is handling row and J is handing column so first is row second is column definitely right that's it right so first thing we have an element like I we have J so I is zero at first right condition true yes we'll enter here now J is z condition true yes we will enter here now a r r of i j now I is z J is z 0 0 means this we can access this memory location so whatever you will enter that element would be stored here suppose I'm entering minus one now we are within this inner loop so j++ J becomes one so condition true yes we will enter here I still one I is Zer and J is 1 so 0 1 means this location so whatever you will enter that would be stored here so let's suppose I'm entering one like this now j++ J is 2 now 02 so next element suppose I'm entering 10 that will be stored here now j++ J becomes three but this condition is not true so exit from inner loop but still we are in outer loop so I ++ now I becomes one condition true yes and Center here again J would be initialized with zero now for i1 first R so this process would be repeated and three element like this we can you know take input from the user using Loops I hope you are clear with the fun nested Loops right so but how actually these elements are to be stored that we'll see next video in memory and how to access these element that also I'll show you in next video right now let's you know discuss this thing practically and I'll show you programs as well okay so so let's create a new file here and okay now in main function let's declare first a 2d array so simple let's take any element AR or if you take like float marks float marks of I have only like two subject and I have suppose uh three students right so this is how we can declare and if I write here another let's suppose int this is another array and suppose we have one more array the DAT type is because type can be anything int care float double right so I'm taking care so care and just I'm taking like name 20 or 15 so if you want to calculate the size of these arrays then we have a size of operator I have told you this is just the Declaration or here like memory has been also located for these thing right so we can say it's uh definition actually more precisely I say I say then definition because in declaration we just declare no memory allocation is there but here memory has been allocated right so now if I want to print like C out size of aray one that is marks so we have a size of operator size of just give the name of that array marks and obviously if you want to print bytes as well so you have to write down here bytes and for new line e and right same for next array and next array so just try this out with me right so like this we have calculated the size of each array so first calculate this right and then run this and tell your answer let's run this size of array Marks One is 24 bytes second 48 by and and third 15 by so first is 24 by 3 into 2 6 6 into 4 24 next 4 into 3 12 12 into 4 48 by right because in also take 4 by actually depends on compiler so in my compiler it take four bytes car car take only one by so 15 bytes only right so this is how we can calculate the size also we can see and if you now declare sorry initialize the array at compile time only so equal to here we can give the initializer list only so this is how we can write down marks or second way is if I want to write if I want to write down something like this like in bracket so three rows and four column so in each row I have four values so first row let's give four values right then this is for second row four values this is for third row four values and this is for fourth row in fourth I'm just giving only one value sorry we have only three row right so we have only three row so in third row I'm just giving two values it's okay first row would be this second row would be this third row would be 2 3 0 0 right so this also we can do right and yeah third this is like simple example of 1D so let's remove this right so that is fine if you remove this size that is also fine you will not get get any error right but if you remove this suppose here I'm just removing this three let's see what is happening here see you got a red line here an array may not have an element of this type right so if I run this what error you will get here so in line number five we have declaration of marks as multidimensional array must have B BS for all the dimension except the first except the first so first is row you can skip this one but other than that if there are here we have 2D array so other than this we have only one dimension so you have to specify this if you have 3D array then 1 2 3 three dimension so first you can skip but other than first you have to give for two you have to give the limit or you can see that bound right so this is we giving you an error so let's two and here we have what three now you just try out the different different declaration I have you know told you while you discussing this thing so just try out all the Declaration and just calculate the size of that array right now how to initialize the array if I don't want to initialize this array at compile time so if this is not the case then you have to specify the row size here right incomplete type is not allowed right because we are not initializing so how to calculate the size because this is actually definition the memory manager is going to allocate memory based on this so have to calculate how many bytes to be allocated because there is no row size you know we know the number of columns I four but we don't know number of rows so how to calculate the size now how to the how to allocate the number of pipes so you have to specify so let's suppose two you have only two now it will give it will not give any error and now let's initialize this with initialize at run time with loops so we have one variable to Travers or to hold the rows so number of row the row size is two so this would be like this now inner loop would be for columns so obviously initialize with zero index would be zero less than column size is four it it should not be like less than equal to 4 index should be always less than the size not less than equal to right now within this simply with C in we can take the value name of that is a first I second is J first is row so first obviously this I you have to specify next element is J for column we have taken J so J right if I run this let's run this and see what kind of output you are getting so it it will just ask the elements so how many elements we need to give here see 4 into to eight elements it will accept only eight element so 1 2 3 4 5 6 7 8 and that's it it is not printing anything obviously we are not accessing the those elements we are just taking the values from the user so this is how we can take value from the user right with nested Loops this is at run time initialization at run time so I hope till now this is clear to you guys if you have any doubt you can just let me know in comment section so in the next video we'll see memory representation of 2D array and how to access elements of 2D are right so now I'll see in the next video Then by bye take care