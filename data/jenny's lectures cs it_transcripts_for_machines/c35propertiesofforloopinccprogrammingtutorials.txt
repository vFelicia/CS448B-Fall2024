and the series of learning programming in c in the previous video I have discussed four Loops in C we have discussed General syntax of writing for Loop working of for loop with the help of a flowchart as well as with the help of a program right but we can do many things with for Loop means you can say some properties of for Loop or you can say uh you can do some tricky things some experiment with for loop it's not like that the way we have discussed in the previous video that is the only way to write for Loop no you can write four Loops in your program in multiple ways in many ways right and I'll be telling you some interesting facts you can say about four Loops how you can write for Loop in different different ways and that thing these facts are very important for you because uh these kind of questions when you see like uh code is given three or four lines are given and you are asked to uh give to tell the output of that code in these kind of questions they don't use that General syntax of for Loop they use those tricky things which you can do with for Loop means other ways to write for Loop right they they used to write for Loop in some other ways and if you don't know that in this way also you can write for Loop then what you will say then this program will give error but no that code will produce an output right so those things I'll be discussing in this video with for loop with proper examples right what other in what other ways you can write for Loops so now let us see some interesting facts about for Loop first of all I hope you remember what is that syntax of General syntax of writing four Loop four is a keyword in C in this we have three Expressions right and after the every expression we have semicolon means after expression one and two we have semicolon not after expression three so these two semicolons are compulsory in for Loop these are optional right that I have already told you in previous video now this is the general synx whatever you will write here uh you can say this is body of Loop the statements you want to execute again and again those we'll write here and that's it right now here this expression one is what this is initialization rather than this you can also write initialization this is what condition termination condition this is what update expression or modify expression right now what about this this is for initialization first of all discuss the properties of expression one right what you can do with this expression simply if you write for Loop like I want to print number from 1 to five then how you will write four we will take a variable we will initialize that uh suppose I'm taking I variable to 1 semicolon I less than equal to 5 and I ++ and in this you can simply print value of I what would be the output of this program it will print value from 1 2 3 4 5 output will be something like this 1 2 3 4 5 right after that obviously you have to use slash and here otherwise it will give output what 1 2 3 4 5 because we are not using any slash and for new line right so this kind kind of output you will get and if you will use here slash then what output you will get one would be printed after that we have slash slash means compiler will come to know that the cursor will move to next line so 1 2 3 4 5 this output you will get right now this is what initialization obviously in a program I'm not writing complete program somewhere before using this I have to declare the the variable in I right and before that we will suppose writing void Main in I and then for Loop and that's it I'm uh here you will write get and that's it over you will write that header files fine now this is what expression one and this is first of all optional in this C right you can write down for Loop without initializing this variable let me write down the program in a better way now this is our program I hope there would be no error in this program see now this is what optional in this so what you can write you can remove this from here fine but you have to put semicolon here right these two semicolons are compulsory you can remove this don't write anything here directly put semicolon and condition and then that increment or decrement but we are not initializing here rather than this we can initialize this I here only I equal to 1 that is also fine it will also give you same output 1 2 3 4 5 right and if you will not initialize this here also and I am taking I'm not initializing this here and here I'm not initializing value of I then what output you will get you will get no output right see please write down the this code and whatever I'm going to tell you please note down those things and you have to run this program after removing this from here after initializing here and second thing is don't initialize here and do not initialize here means neither here nor here and then see what output you are getting and if I'm telling you wrong if I'm wrong then please let me know in comment box but in this case according to me it will not give any output right because you are not initializing value of I from where it is going to start right now next next is what the in this initialization here you can initialize more than one variable also it is not like that we can initialize only I here fine so you can also write here something like this suppose I is equal to 1 and I'm another taking a variable I'm taking J J is equal to Zer two variable I'm initializing three four you can initialize any variable and one more thing you have to take care between this initialization we should put what comma only not semicolon only two semicolons are allowed here this is what first expression initialization right in initialization I'm writing two one and two two syntax so you have to separate these two with comma only no semicolon right so now here what output you will get I is 1 and J is equal to Z and suppose I'm printing here both I and J right now what output you will get I value is one okay I value would be printed J value is zero J value will be printed J right now see I value become now I ++ now I value becomes 2 2 is less than 5 yes condition is true so it will again go here two would be printed but still J value is what zero only we are not doing anything with with J we are not incrementing we are not decrementing it right so it will print 0 0 0 0 J value would remain 0 0 and I value would be till 1 2 3 4 5 because once I value becomes six the condition would be false and it will exit the control will go out from the loop so this output you will get here right if you some do some increment of J also or decrement of J then also then you will get some different value of J but that also we discuss right so this is next case more than one initialization in this expression right next is what here you can also do something like this I is equal to 1 J is equal to Z and you can remove initialization part from here in this case also you will get same output right but if you have to tell me now this is question for you I'm writing simply like this I and J right and I'm writing suppose J is equal to zero and I is nothing and this is what there I'm writing nothing then semicolon I less than equal to 5 I ++ and I'm printing both I and J now what output you will get this is first question for you so you have to tell me in comment box right now next is I think we have discussed all the properties about expression one now expression two this is what you have we will give condition termination condition where the loop is going to end that condition this is also optional second property is what here also you can write down multiple conditions right so let me take uh let me take one case here see First cases it is optional suppose you remove the condition here we are not putting any condition here just i1 J1 semicolon nothing here right you don't need to put any space semicolon again semicolon I ++ and you are printing I and J what output you will get here there is no condition means condition would not be false so so it would be an infinite Loop if you remove condition from the loop then that Loop would be infinite Loop right you can run this and you can see the output you have to put some condition to terminate the loop so next Cas is I'm putting two conditions here multiple conditions we can put here I suppose great sorry less than equal to 5 and if you're putting two condition then we will put comma in between those no semicolon and J less than three then semicolon and here I'm putting suppose I ++ right no j++ I'm not doing anything with J here so now I'm printing I and J what output you will get C both I and J in starting would be zero right now see this Loop will execute until this the second condition becomes false all the other conditions before the last condition would be treated as simply statements there would be no effect of these conditions what does this mean whatever I am saying so it will check the termination condition this would be treated as a termination condition the last one if here I'm putting three conditions I less than equal to 5 J Less Than 3 and suppose one variable again I'm taking k k less than equal to 6 then termination condition would be K less than equal to 6 these condition would be be Tre treated as a statement only so the last condition whatever you will whatever you will give that would be treated as a termination condition only right now here this is termination condition it is not going to uh know make any effect on the loop so now J is zero yeah J is less than three right now enter into this Loop what would be printed i1 J uh Zer now after that control we go to this expression three I ++ I becomes now two right now two would not be printed two not be you know checked here again I value is two and J value is still zero we are not doing any updation on J so now J is less than three yes so I value would be two J value again zero now value becomes three J value is again zero that is less than three 0 now do you think this Loop is going to end no why so because I have told you the rule is what this for Loop will treat the last condition you have given that it would be it is treated as the termination condition and the J would always be less than three because we are not updating J value in this Loop so this would be infinite Loop this condition is okay this is termination condition once I value becomes 4 five you will say that yeah once I value becomes six it should be terminated here but no this would be treated as simple statement this would be treated as a termination condition and this would never fail because I value is 0 0 would always be less than three so it would be an infinite Loop right you can run this program if you do something like this I'm putting here comma j++ this is property of expression three here also you can update you can write down multiple update statements right 1 2 3 now J value also becomes one and after that it becomes one after that it becomes two and once it becomes three three is not less than three so it will terminate here so this output you will get here I value would be 1 2 3 J value would be 012 right I hope you got the properties of expression two right see here suppose if you update I less than equal to 100 and J is less than 3 I ++ j++ and you are in you are just know printing value of I and J then only the output would be till 1 2 3 I would be incremented till three because here this would be treated as a termination condition so it is not going to take give any effect not going to make any effect on the termination condition although I is less than equal to 100 I is three only but still it will not print 4 5 6 up to 100 right I hope you got my point here and one more thing in expression two the condition you can also write either zero or one zero would be treated as false condition one would be Tre treated as a true or 1 2 3 anything you will write other than zero that would be treated as true condition right and it's not like that always you have to write less than greater than equal to you can also write I equal to uh 10 that also you can give now this is assignment for you simple the loop is i1 j 0 rather than these two condition I'm just putting the termination condition I equal to equal to 10 semicolon I ++ j++ I'm printing I and J value right you have to tell me in comment box what should be the answer of this thing right if you write this here next is what here you can also write down those logical statements also it's not like that you can only write down these conditions suppose I'm writing here and logical and J Less Than 3 right and I ++ j++ so now see I value is one this condition is true so it will check both the conditions if both are true then only it will enter into this Loop then only it would be considered as a true condition J Less Than 3 yes J is less than three so okay it will enter into this uh one into this uh you can say body of the loop right if any of this condition is false it is going to exit right and rather than this you can also write down here I less than equal to uh this 100 or logical or J Less Than 3 and i++ j++ now see this is one condition now please don't think we are putting two condition here we are using logical or operator between this and this so this would be considered considered as a complete termination condition now here see what output you will get either this is true or this is true it will considered as true only if both are false then then only it will it will be considered as false I hope you remember the truth table of this logical or operator so now I less than 1 first of all J is less than three condition is true now I becomes 2 3 J becomes 0 1 2 right now see when I value becomes 4 and J value becomes after 2 it will become three right now I less than equal to 100 four 4 is less than 100 right but you you can say J is not less than than three but still it is going to execute the control will enter into here why so because one condition is true and in logical or operator if the first condition is true then it will not check the second condition it will give what result true and if this condition is true then control will enter into this Loop right now I value becomes four and J value becomes 3 again I value becomes five J value becomes now four but still it will enter here right I hope you got my point if you put this logical or then it will print up to 100 means I value becomes when I value becomes one 1 then only it is going to stop right but if you will not put this logical or and if you will you will put simply comma here means it will consider the this as two conditions and this would be considered as a termination condition right means here you can use less than means relational operator also that what logical operator also here and those equality operator also it's not like that you can only use less than or greater than and these kind of things right so please try to do some experiment with these conditions and all third expression this is what this is also optional second property is what here also you can include more than one update expression here I'm writing i++ as well as j++ right you can do three also or you can remove this if you remove this from here I'm removing suppose this is what I'm writing comma again two two conditions right and I'm removing here both the conditions I ++ and j++ so what you can do here you can put one way is here you can put I ++ as well as j++ within the body of the loop after that you can close this Loop or I equal to I + 1 J equal to J + one right and this is also same output you will get here till this condition become false you will get this output only right and if you will not increment or decrement these things anything you're not writing here you you are not writing here then in that case what output you will get then that this condition would always be true because Zer is always less than three and it would be an infinite Loop right so in this case what output you will get because we are not doing any plus plus or minus minus here values would be always one and zero right 1 0 1 0 it will print one 0 infinite time because condition would always be true fine now suppose second variation is what I'm doing here I ++ just I ++ only here I'm not using any updation on J then also it is going to be an infinite Loop but here if it will not print one one J value is 0 0 but on I value I'm going to increment I value so that is 1 2 2 3 like this it is going to print J value would be zero I value would be 1 2 3 it is increasing fine but that would be infinite Loop because this condition would always be true right next is if you are not using I ++ and I'm just printing j++ I'm just uh writing what j++ here no I ++ no iusus no updation on I just j++ I'm doing in that case what output you will get I value would be same that is 1 one but now j++ means one time first of all J is zero one once it will enter here then J becomes two after that sorry j becomes one then becomes two then once J value is three this condition would not be true and it will be out of the loop so this output you will get right I value would be same always right and one more thing it is not always compulsory to initialize these variables something like this I'm taking suppose only one variable here uh I only right right and uh no J variable I'm just putting I ++ here and here Al here you can also write I is equal to suppose I'm taking two more uh that uh variables here INT in next line int a is equal to 5 b is equal 6 you can also write here A + B something like this you can Al also write a + bide by 2 A Plus bide by 5 so here you can also write down some expression while you are initializing the value of I right it is not always compulsory to put any constant value here also it is always not compulsory to put I ++ IUS minus you can also do here something like this I is equal to i/ 2 that is also fine or you can write write down here uh that is I + 2 that is also fine I into 2 that is also fine right or you can write down here what I equal to I + a that is also fine or I + b something like this means ultimately what I want to say is here also you can use any type of expression not just I ++ I minus minus here also you can initialize this with any type of expression also right now next uh property is what if all the expressions are optional then suppose if you are writing Loop something like this for Just Two semicolons and you are writing something here I'm just printing suppose Jenny here what output you will get see I have told you if you don't write condition in this Loop then that Loop would be up to run up to Infinity so this Loop would be an infinite Loop because you're not putting any condition here this would always be true right but this is fine you can write down this something like this it is not give it is not going to give you any error right next thing is what if you put here some condition right suppose I less than 5 that's it and here I'm initializing this in I is equal to 1 then what output you will get how many times J would be printed here because we have put some condition so I is one right 1 2 3 4 four times Jenny would be printed after that Jenny would not be printed because this condition will become false right so I hope you got my point next point is you can also write something like this suppose I want to print 10 9 8 up to 1 then in for Loop you can write down I is equal to 10 I greater than what greater than 0 and iusus and then you can simply print here I so those values would be printed here right uh next point about for Loop is what now let us take uh this example so now let us take this example same i j i less than 5 J less than equal to 6 and I'm giving what condition I ++ j++ but what is the difference here please note here I'm putting semicolon after this four Loop but it will not give you any error don't think it will give error but you will not get the output whatever you think see you are terminating this four Loop here so it will not consider this as a body of the loop it is not going to enter here this would be considered as a simple statement of means this is a part of this program it would considered as the statement as a part of this program but not part of this for Loop so it will not run again and again what output you will get here first i1 j0 this is what treated as termination condition the second condition next time it will not give any it will not enter here because you are terminating this for Loop here but condition is true so without entering here next step is what it will execute this thing I ++ j++ I becomes what 2 J1 condition is still true 3 2 6 6 now once J value becomes six condition is still true again j++ means 7 and I becomes what uh 8 right but now see what condition is not true but the values in memories are updated I value becomes what this is I this is a I value becomes eight and J value becomes seven right now it's fine and the condition is not true out of the loop and this statement would be treated as a part of the program so now the statement would be ex uted now value of I you will print what what output you will get 8 87 I value is 8 J value is 7 right if you put semicolon there next case is what if you put semicolon here but you are not putting j++ here you putting j++ in this in this body of the loop right I'm just putting I ++ here now what output you will get this Loop will run to infinite why so because is I told you if you put semicolon here means you are terminating this four Loop and this this would be not be treated as a part of the four Loop this would be treated as these two statement would be treated treated as a simple part of the program not part of the four Loop so now if you will not do any increment in J then this condition would always be true J value would always be zero this condition would always be true means no termination condition and this would become an infinite Loop right but if you do something like this here I'm putting j++ and here I'm putting I ++ now what output you will get this is I think assignment for you guys I have already discussed two types of things here I hope you got the working of the for Loop once you find semicolon after the for Loop so now tell me you are giving j++ here and I ++ here right what output you will get please don't run this first of all first of all try at your own dry run this program after that run it on your laptop and see what output you are getting and tell me what output you will get here right now and if you you don't get how you are getting that output then you can ask me in comment box I'll explain in next video fine so I hope I have discussed everything about these expression properties of these expression and what different kind of ways you can write down for Loop so this is for you you have to tell me again the output of this thing so now tell me this is the for Loop I'm taking here three uh variables actually and I'm printing i j k so what output you will get you have to tell me in comment box right so that's it about for Loop in next video I'm going to discuss a simple program uh using for Loop so now I'll see you in the next video till then byebye take care