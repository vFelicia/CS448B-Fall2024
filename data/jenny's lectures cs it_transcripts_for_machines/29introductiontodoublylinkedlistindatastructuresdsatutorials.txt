doublylinked list so far we have discussed all about singlylinked list all the operations on singly linked list like insertion deletion reverse traversal creation of a singly linked list I will provide you the link of all the videos of singly linked lists in the description box you can check out there so see how a singly linked list can be represented we have already discussed like this this is a node this is data part and this part is what address part or you can say it's a pointer to next node it is going to a store address of next node right 100 200 400 is I'm taking addresses in memory random addresses it's not compulsory that these addresses are in increasing order only maybe here you can write in 150 fine any random location can be assigned in memory fine so now see this mode is having only a single link this link single link to its next node that is why it is known as singly linked list now what is an doubly linked list it is going to contain two links one linked to its next node and one linked to its previous node fine so now logically how you will represent a doubly linked list see and see this is the head pointer this pointer is going to store address of the first node see this is just a pointer you cannot say this is a head node this is a head pointer fine pointer to this first node this is known as you can say head node the first node in the list when you are writing a program and you are implementing a linked list then we are going to maintain the this information only the head only the head pointer only it means address of the first node only we have with us when you are writing a program when you are going to implement a linked list so now see in doubly linked list this is singly linked list and this is what a doubly linked list so here each node is having three parts one is data part this is known as data part this is known as address part this is also known as address part fine now suppose in data part we have same data seven four and nine right now this part is going to contain of the next node suppose address of the next node in the sequence we have only through nodes is 200 so it is going to contain 200 it means this node is pointing to the next node right now same that this part of this node is going to contain address of next node that is 400 so it is going to point here and this part is going to contain 0 because this is not pointing anywhere this is the last node you can say this is none now one more thing in W let's now see what you are going to store in this address part of this node this is having the address of previous node this is going to point this is you can say a point to previous node so previous node is null no previous node is there so that is why here we are going to store 0 but you can say null in this part of this node it is having address of previous node that is hundred so here you will write hundred that is why now it is going to point to the previous node so you can say it is a doubly linked list two links are there double links fine here what you are going to store that is 200 so it is going to point here fine and ahead point obviously we are going to maintain a head pointer and it will have address of the first node in the list so now this is known as a node this is also a node in the linked list so now how we are going to represent these nodes in the program how we can represent this node node of a singly linked list we have discussed many times C so this is how we are going to represent a node of a singly linked list if you are not getting why I am writing like this then you can check out the video introductory video singly linked list I provided the link of that we do in this I button so first of all check out that video fine in this case the data type of this node is what struct node this complete is what data die we have defined our own data type fine like we have integer float character these are data types now so here in this case we have defined our own data type this is user defined anytime that is a struct node two parts are there that is this is having integer data type and says a pointer pointer to the next node so how they are going to represent this struct no district next this is for next now in this case data part and this part is same but we have added one more pointer that is previous pointer this pointer is going to store address of previous node so only difference in this representation is what you are going to declare one more pointer within this struct node within this struct node right three parts would be there one two and three so struct node one more pointer you can say three pointer right two pointers are there in one data part and obviously this is what this is a head pointer you are going to declare a head pointer which are containing address of this one why we are having this head pointer because you cannot directly access the members of the structure to access these fields this data this node this next and this previous you need either a struct variable or a pointer right and here we are discussing about dynamic memory allocation so that is why we are taking what a pointer because we can access the dynamically allocated memory using a pointer that is why we are taking a pointer here right so this is how you are going to represent this node when we will write a program on w linked list now see what are some advantages of doubly linked list of all you will discuss those things see in this case you can traverse the linked list in forward direction as well as in backward direction because two links are there but in this case we can go only forward next thing is see suppose we have a pointer m and which is pointing to the second node that is it is having address 200 so now using this pointer only we can look forward also and we can look backward also to this node also and this node also right if if I say 10 next is it means this address so we can access this node if I say temp temp arrow this pointer pre pointer then we have value is 100 so we can look to this node also but in this case you cannot look backward you cannot look reverse see if here is the temp pointer you can only look forward because temp next means 400 so you can go here you can access the state only we don't have any information regarding this we cannot move back but here we can do this right so in this case deletion is easy if you want to delete a node then only one pointer is enough but here we have to maintain what two pointers for deletion as well as insertion is also easy both deletion and insertion we will discuss in detail in the next video finally we are also going to implement insertion and deletion in doubly linked list right but one drawback of this linked list is what see here we are storing two pointers right so this is going to take more memory space suppose here if you want to calculate the memory space requirement of this node then integer is going to take 4 bytes in typical compilers and pointer is also going to take 4 bytes in 32bit compilers so it means 8 bytes for this node but here for storing the same information that is 7 you need how many bytes for for this 7 this end is a data for for this pointer and 4 for this pointer right so here you will need 2 l bytes so you can say in this case extra memory would be required then this singly linked list to store the data right but many advantages are also there of doubly linked list that is why the concept of doubly linked list came into picture see and one more thing is that for of printing this doubly linked list in reverse direction you just traverse the linked list till here and from here only you can print this data then this data and the statement this data because you we can traverse this list in backward Direction also because of this link but here we cannot do something like this we can note traversal 8 in backward direction so in next lecture we will discuss how to implement a doubly linked list have to perform insertion operation deletion operation and how to traverse how to display the data offer doubly linked list right so I'll see in the next video till then byebye take it