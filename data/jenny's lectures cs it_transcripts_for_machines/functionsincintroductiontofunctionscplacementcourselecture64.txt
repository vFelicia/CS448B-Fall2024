hey everyone I hope you are safe and doing good so in the series of learning C++ programming language we have discussed strings in C++ now from this video I'm going to start a new topic that is functions in C++ right all basic things about function we'll see in this video like what is a function what is need of function uh different types of function builin function user defined function how to define a function how to declare a function calling of a function and different types of functions with the help of proper program you'll see all these things in this video right and in detail more in more deep uh we'll see function in later videos right so it's like introduction to functions in C++ now what is a function see let me just relate try to relate this with the real life example like suppose I know something I know something like I know how to cook how to make it but my friends don't know so one of my friend came to me and asked then I tell her the recipe then after some time second friend you know uh came to me and asked the recipe then I will tell her the recipe again one more friend came to me and I tell her the same recipe again so what I'm I'm here doing is I'm repeating those things I'm just telling all the steps again and again right so rather than this what I can do is I just uh write down those steps on a piece of paper and I just call it a like recipe to make idly and something like this and when whenever my friend came to me to ask recipe then I just uh I just tell her to read all the steps here right rather than repeating those steps so whenever my friend is going to come to ask me the recipe I don't need to tell to every friend again and again the same steps because I have written one time only all the steps here right and I just call this a recipe they'll just read it and yeah they're going to make it Le so it is going to save my time my energy I just utilize my time in this time in doing some other meaningful work right so same concept this kind of thing we can relate in programming right suppose you want to calculate addition of a two number simple example simplest example I'm taking so what you will write this is the simplest example like these four steps if you don't want to take input from user if you want to take from user we can use see out scene right so this is how we can calculate sum so suppose in my program I have a large program and I want to calculate some five times or 10 times so you have to write like four different different numbers here five and six then seven and 8 or any other numbers right so I have to write down these steps five times or seven times as many times I want to calculate some in my program all these steps right like maybe in a these are Global variables and some is global variable but you have to calculate like Su is equal to a plus b c out is equal to Su and this thing yeah this is simplest one but yeah in this case we are repeating the same code again and again in my program right so just in my program let's do some different thing and here I want to calculate some again so same write down these steps here right so rather than repeating the same steps again and again what we we can do is we can just write down these steps the steps which are repeated again and again those steps in a different thing right and we just name it something right so I just name it sum and here just write down these four or five statements to calculate some so it's like a function or or you have to put these parenthesis here round brackets these are mandatory after seeing this we can say that yeah this is a function sum is a function otherwise we cannot say like sum is what we don't know but now if these round brackets are there then we can say that yeah sum is a function right so sum is a function here we just write down these steps in these bres curly bres and whenever you want to calculate sum in your program you just call this function and how to call you just have to write down the name of the function and these brackets but there are different different ways to call a function to define a function and all but yeah for now we are not using any parameter list or arguments or return return type or anything this is just to make you understand what is a function and why we need function right so you don't have to write down all the four or five steps whatever is there in the function again and again in your program you just call this function in a single line that's it and control will go there and some will be calculated again if you want to calculate some again you can call some again the control will go there and that's it or many arguments also we can pass right so it means we are going to reuse this code again and again right and the functions are using uh going to reduce the code redundancy the repetition of code right because if you write these these four or five lines in your program again again again again then obviously code would be lendy there are so many repeated lines code rency is increasing here right complexity of program is also increasing right but if you use function it is going to reduce the code redundency you don't have to write these statements again and again right so better memory utilization is also there uh code would be more readable more maintainable if you use functions it would be easy to debug the code because there are less number of lines right so it would be easy to debug the code right so we can say functions are important for reusing the code just Define it once and use it many times in your program to reduce the redundancy code redundency right that's why functions are important if we write a small program that is fine because still now we have written so many programs without using function but when you are working on a project when you write a large program then functions are must right because we cannot write everything in main function till now we are using we are writing everything like int Main and everything whatever you want to do in this main function only but if you have a large program then it's not a better practice to write everything in main function use uh in main program in main function better to use your functions different different functions right so and something like this if if and if we have a main program like if you write everything in main program like some we have for input there are three or four lines we are doing some processing these are some statements for output these are some statements right so see the code is lengthy and not so much readable although there are few number of lines but if a large program then it's not more readable or maintainable if you write some everything in main function rather than this what we can do is if we do something like this for input we make another a different function and in this function read input we have these four lines in this for this processing we have another function do processing and there we have these four or five lines for output we have a different function name like maybe print output and there we have these four lines so rather than writing all the things here in main function what we can do is now we can just call reading input do processing print output so now this is the case in main we just have to write three lines read input just call this thing do processing call this thing print output call this thing so this is like more readable more maintainable and concise code you know it's looking beautiful rather than this right and if in our program again if you want to take input or processing or output you just call again here after some processing you just call like read input do processing or print output or only read input and these kind of things so again and again we can call these three things right whenever you want in our main or in any other function also right but here if you don't have function this is for input and after this somewhere in later in your program if you want to take again input so same you have to write down these four steps right but if you you are using function don't need to write the these steps you just call the function and just by calling the name of the function and these parenthesis that's it so now we are getting my point like why functions are important right need what is beauty of using functions fine okay now proper synx let me just tell you the synx for functions or you guys just give me some example real life example of using functions right where you are using function or which kind of you know phenomena or which kind of situation in your life are related with the concept of functions right so syntax of function writing a function or defining a function is see we write return type then function name then here the parameter list means parameter 1 parameter 2 and so on and here we have some statements and here we have return statement this is syntax of creating or defining a function return type means what kind of value this function is returning right suppose if you are using if you're defining a function to add two numbers two integer number so it will return sum and that would be int so int would be return type of that function right what kind of value that function is returning but it's not mandatory that every function is going to return something maybe some function are not not returning a value so the return type there would be void I'll tell you I'll show you practically all the examples function name function name should be meaningful like I'm going to you can use fun one function 2 function three this type of name also a BC XY Z but better to use a meaningful name if suppose for addition you are making a function then the name of the function should be add or sum or addition this thing so that by looking the name of that function we can uh you can uh we can assume that or we can get to know that what this function is going to do right parameters whatever data you pass in that function right it is not mandatory to provide these parameters some functions are without parameters also those functions also I'll show you right then in curly bracket this is body of the function here the statements which would be executed right when you call this function and at last you have a return statement whatever value this function is going to return there we write that return and like in addition some would be returning the function is returning some so return sum like this right so for function name same rules for we know you know the for naming a variable the rules same rules have to be applied to name a function right and I told you these are the variables that we pass in the functions right and this is like actual code what this function is going to do so function is like a piece of code if you uh you know want to know the proper definition the function is a piece of code or you can say group of statements or block of code which perform a specific task that's it that is function or it's a piece of code that will take some input perform some computation and give you some output right so it is going to perform a specific task right that is a function now there are two types of functions builin function and user defined function Now builin function means these are predefined functions you can directly use those function right like we have a you have to use proper header for that like if you you want to use that function square root if you want to calculate square root of a number so this function is already defined in math Library cmath so you have to include that in your heter hash include cth and you can use square root this function like power if you want to calculate power of any number then we can use power this function s cosine there are many functions in this these libraries many predefined functions so you just directly include those header specific to that you want to to use the functions and you can directly use those function you can directly call those function in your program these are predefined functions someone has already defined these functions for us we can directly use those functions right but next is user defined function so there are some user defined function also so in predefined function you don't need to know how this function is working how this function is calculating the square root we don't need to know we just use this right like when you were using in string uh that that member function find that is going to find if you want to find out any character or a substring so you just use this fine function or you just use the length function to calculate length of a string you don't need to know the actual working of these functions right these are built in and we're using these function okay but if you are writing that function then definitely you need to know the working of that function and that is in case of user defined function right so builin function and next user defined function so we are going to Define some function those are known as user defined function right but for user defined function basically there are three things in a function that are important that is function declaration function definition and function calling now what is function declaration what is function definition what is function calling that I'll show you practically with the help of a example so I hope uh Basics are clear like what is a function why we need function some advantages of using function right if you have any doubt you can just let me know in comment section so let's see some programs using functions so after creating a new file now we are first we'll see how to define a function right because if you're are going to define a function means user defined function for user Define a function three things are important function declaration definition and calling so how to define a function so simple example we'll take for sum of two number right so let's see the for main we are just defining a function sum simplest one void sum so return type is void function name is sum and parameter list see there is no parameter in this list so this function with the type of this function is with no argument means here no argument these parameter these are also known as argument yeah whenever we actually we are calling that function in that time we actually pass something those are known as arguments and in definition these are known as parameters so with no arguments and no return type this is that function right so here only I'm taking like int a I hope you can easily write down write down how to add two numbers the logic right so this is function definition right no return type no argument we're passing and this is body of the function here I'm just writing the logic to print sum right there is no return statement here because it is not returning anything but you can write down here simple return that's it but this thing is optional if you don't want to write return that's fine because this one function is not returning anything as soon as the control will go to here the return statement it means end of this function and it will return the control where you are calling the function right now calling how to call function just name of the function sum and you don't need to pass anything because this function is not accepting any parameter any argument so don't need to pass anything here semicolon here and this is not returning anything so just sum and that's it if summer is not giving you something then you don't need to put your hand something like this because you have nothing to hold in your hands right so that's sum we are calling this function and see here in main function also we are using return statement return zero return zero means it is returning zero means successful compilation of that successful exit from from this function from main function right so let me run this and show you the output A and B Valu is 1 2 and the C sum is three right but one thing you have noticed I have written this definition of the function before calling of the function this is important before calling if if you just I just cut this thing and after calling I'm defining the function right let me show you what output you will get see you'll get an error the sum was not declared in this scope in line number this this seven some is not declared so for one solution for this is we have function declaration function prototype this thing will only tell the compiler the name of the function number of arguments of the function return type of the function and the data type of the argument that function is accepting so suppose if you modify this Su function so in this case if you are you are going to solve the problem then before calling we just give a prototype of the function or we just declare the function how to declare return type typ of the function is void name of the function is sum and there is no argument no parameter list here right and just put semicolon in declaration yeah semicolon is must in Define while defining a function no semicolon viral calling yes semicolon is mandatory so now that's fine now it will run see enter values 3 4 and answer is seven right so if you writing a small program then no need to you know use these function declaration or function prototype just Define the function before calling the function that's it right but in large projects in large when you're working in large projects then it all it's always a good practice to declare all the functions at the beginning just after the header files just to know yeah these function we are going to Define we are going to use in this program this would be the return type of the function this would be the name of the function these number of parameters we are going to pass and this would be the data type of the parameters so if you if uh modify it a little bit suppose I want to here while calling I want to pass my numbers like I want to add three and four I want to pass so while defining the function declaration also you need to change but we'll change this later while defining the function if you are passing three and four if I'm giving you something you need something you need your hand or something to hold that thing right and here we are passing the values so in computer memory or here we have variable to hold the data so while defining here in parameter you have to pass two parameters because two values we are going to accept right and of integer type so int any name you can take any variable name like a or XY Z int B here you don't need to take these A and B just sum is equal to zero no need to ask value from the user because I passing the values three and four sum a plus b and if you want to return some I don't want to print some here I want to return sum so return sum that's it or a plus b no need to write down this sum and a plus b that is also fine right no need to take this in sum just a + b but see here you are returning a plus b but this is going to produce some uh error return value type does not match the function type because here the return type of the function is void means it is not going to return anything but you are returning sum you are returning integer value so you have to change the return type that should be int so this function is with arguments and with return type this is second type of function first we have seen function with no argument and no return type function with argument and with return type okay so if you run this this will produce some error the same sum was not declared in this scope because you are defining the function but before you are calling the function means before defining you are calling the function always we use the variables but before we Define those variables otherwise it will give ER so same this is kind of use of the function like we I'm calling the function like I want I am going to read I'm going you know I want to read the recipe to make ID my friend is going to read the recipe to make the ID but I haven't written the recipe yet so obviously it will give error right say I haven't defined the function but you are calling the function so the solution is you just give here prototype of the function so int name and two parameter this function will take so here you need to write down here int X in y and semicolon but the name of the parameter is not compulsory to write in declaration in declaration in definition yeah name name is compulsory so if you don't put here the name of these parameter that is also fine because declaration or prototype this is called function declaration or function prototype it is going to tell the compiler only the type of the return type of the function name of the function number of argument in that function and types types of argument here int and int types so this is also fine right but it's always a good practice to write down here name of the those also the name these name it's not compulsory to match in definition and declaration here I have taken XY here I have taken AB that is also fine right but order should match if here I I'm going to take another example example suppose I'll show you this thing with example one more example so I for function declaration prototype and function calling and function definition is clear to you guys right now if a function is something like this with no return type but with argument suppose a function is something like this so I have function display and that is accepting one argument that is of type string C++ string object right string name so this says C++ string object okay and it will print high and whatever the name so it is not returning anything it's just printing not returning anything so you can write down simply return but that is optional if you don't write that is also fine right now okay call the function in main function so we generally call the function into main function but we can call a function into another function also right but you know whenever you are going to run this code first of all control will go to main function so whatever function or whatever you will write in main function that are going to execute only if you have defined a function if you have uh given a protype of the function but you haven't called that function in main directly or indirectly right then that function is not going to execute right so if you want to execute a function you have to call that function into main uh function either directly or indirectly right so let's call this in main like display and here I'm passing Jenny what do you think it will run or it will give any error pause the video and think and just write down the answer let's this display was not declared in this scope in this in main scope you are calling this in here but you you have defined this after calling so if you have to solve this either define this before calling right otherwise give prototype of that function but it's always a good practice to give first prototype then you just call and you can Define anywhere that function in your program just give the Prototype first at first okay so let's give the Prototype here the function return type is void function name is display and string type of argument it will receive that's it if you want to write down the name that is also fine you can write down any string variable name String name or ABC or a or anything but this data type is mandatory name is not mandatory to give in Prototype let's run this and see what output you'll get here okay let's run this now hi Jen actually you are giving here A C literal so what it will it is accepting it is expecting a C+ plus string object so it will convert it implicitly to a string object and it will not give any error next thing you can also do if if uh just take like STD or don't write STD here or here you don't need to write STD also because we are using STD name space so just remove this that's it right and just write down here string name equal to I'm writing here rather than passing here I'm just passing name so I've taken a name C++ string object you can see here gen and I'm passing this object name here right rather than name you can take s also it's not compulsory to take the same name like here the parameter name is name and here also we are taking name so it can be different let's run this and see it will print like high J this thing is also fine so in this case actually we are passing C++ object so no conversion would be there right so it is a type of function with argument without return type right these are I'm uh telling you the types four types function with no argument no return return type function with no argument but with return return type function with argument no return type function with argument with return type so three types we have discussed one is remaining that is function with return type but no arguments right okay let's see that thing also here with return type suppose return type of the function is string but no argument we are passing here so string display here no argument means just remove this here also we cannot pass any argument right but see it is returning something this function is returning going to return a string so here rather than printing we will return suppose here we have string name is equal to like Jenny and it will return name return a string type obviously name so obviously return type is string and if it is returning something then while calling this function it is returning you name so you should have something to hold that name right so whatever it will return that we can take in a variable like string S and S equal to display and then see out simply s that's it let's run this I don't know it will work yeah it is working it is printing you Jenny right so this function is without sorry without argument with return time right but see let me just uh here I'm not writing this thing in see out only I'm just calling this display so what do you think it will work yes definitely it will work directly we can print using C out also rather than storing this in a particular variable we can simply print this see out means yeah we are expecting something that this function is going to return something and see out means just print that thing right but if this function is not returning anything suppose this is end or sorry not returning anything means it should be void void display it is not returning anything just remove this thing and here we are just in display we are just printing C out hyen right so same Pro you have to modify the Prototype as well void name is same no argument not returning anything and here now I'm calling this display see out display so what do you think it will work think pause the video think and write down this thing in comment section it will not work it will not work see the red line here right because if you are calling this in see out means you are going to print something and we are expecting to return something from this display but it is not returning anything the type is void so you cannot write down here see out just call display simply that's it and now it will work fine no error see hen it is printing right so this also you need to take care if the function is not returning anything you cannot call this function directly in see out statement now how I think three things are clear to you guys declaration definition calling how to use how to do the these things why function declaration is important and why and when right but declaration is not mandatory in your program if you're writing a small program just Define that function before calling the function that's it no declaration is needed no prototype is needed right now how this function are working in that stag in memory let me show you this thing with one example we have the simple example here we have two function GRE and display in GRE we have only we just printing high in display we printing like first line is see out I'm in display function then second line in second line I'm calling greed function function so we can call a function from another function it's not compulsory to call a function within main only right now one second line is also there I'm exiting display function and in main function I'm just calling display see I'm not calling greed here I'm just calling display so it is not compulsory to call all the function in main function but I'm calling this GD indirectly in main function indirectly means using display function I'm calling display and within display I'm calling GRE so indirectly I'm calling breed from Main so if I run this then it will print like first I'm in display function then whatever is there in GRE function second line High then I'm exiting display function right now how the these functions and this are working for each function a step frame is located right so we have a main memory so let me show you suppose this is a ram main memory so whenever you execute a program that would be first of all loaded into main memory so that main function program would start execution from Main so that for main of frame would be allocated for that main function this is this stack frame is for main right so suppose we have a stack and first frame in that stack is main so if I do so this is kind of like stack we have so first we have frame for Main right for main function then in main function we are calling so some memory will be allocated to this main from this stack in this stat frame the whatever the local variable for this main for those variables and functions and all right so in main I'm calling display right so now control will go to here display so one more frame stack frame for this function display so here we have display so some one more frame would be allocated for this function display right so whatever the variable local variable of this display memory for those variable would be located here right now first we have so now active frame is display right now this is the active frame display so it will print first time in display function now second line is greed so GRE it will the control will go to here the definition of the function is here so one more stack frame would be in this stag that is for greet now active frame is this one for this function greet so now some memory would be allocated for this in from Main memory for this grid function whatever the local variables are there in this GD function memory for those and all whatever you will do here so GD we are just printing C out high so it will print first high and no return statement but as soon as it will see this closing bracket means it is going to return from this GRE and where where you are calling this function here in this line right so now this Frame is out from the stack this Frame is out from the stack now active frame is display because again control is in this function display right now this memory would also be removed erased from this main so whatever the local variables in this greet those memory has been freed right in GRE if we have suppose in a like in a is equal to 5 so some memory would be allocated for this N5 as soon as you'll go back from this grd this memory would be out means fre for these local variables right now active frame is displayed so now in display we are having one more line that is I'm exiting display function so it will print that line and now as soon see the closing bracket or the return statement means exit from this current function and where you are calling that function in main so control will go to here so now this St frame frame would be also popped out from here and now active frame is main right and that's it in main also we have nothing after display we have like return zero so return zero means now main would also be popped up from the step right and these memory would also be raised from this main memory right so that's it this is how if you have more than one function and we are calling then how this function are the internal working of these functions using stack frames and all right so in this case if you use function then the memory would be better there would be better memory utilization why because if this function is local to this grid then as soon as you will come back from this grid the memory would be freed right but if you write this int a or everything within main function then from the starting of the main program till the ending of the program the memory would be still there for all the local variables all the function all the things right that would not be erased but as soon as you go back from this grid this memory would be raised and this memory can be utilized for any other task also so if use function then there would be better memory utilization as well this is one more advantage of using function right I hope you got the working of this thing using this one and if the function is not turning anything you can write down here void as well but no need void is also means there are no parameters or no nothing that's it for this video so I hope basics of functions Circ to you guys in the next we'll see uh function how to pass the argument call by value and call by reference this thing right so now I'll see you in the next video byebye take care