so in the series of running c programming we are discussing structures in scene the previous video we have discussed structure padding in c in this video we will see what is structure packing in c we are only left with this small topic of a structure like and i'll show you practical also right we will take two or three examples like we have discussed what we have discussed in the previous video those examples and i'll show you the output right like with the structure padding without structure padding and if you use structure packing in the program then what output you will get so all the kind of variations we will see practically in this video right but before there is one tell you one thing if you guys are preparing for gay 2023 examination or will be preparing for this examination then an academy has started a bash from 8th of december in this course they are going to cover all the subjects of cs and ip and help you to prepare for your gate examination this course will include strategy tips and tricks practice questions and numericals along with the detailed explanation of the concepts and the course will be covered in hindi and english and notes will be given to you in english only and all the doubts related to any topic will be clarified in the doubt clearing sessions in the course so this would be paid subscription but you can use my code jkl10 to get extra 10 percent discount on this page subscription and an academy is also going to conduct a scholarship test for gate and esc on 12th of december at 11 am this will be live test and you can take this test for free you just have to enroll for this test so here you will get a chance to compete with thousands of learners from all over india and you stand a chance to win 100 up to 100 scholarship and some other exciting prizes as well in this test you will get 20 questions in the timeline would be 60 minutes and these questions are very challenging and original gate questions that has been curated by their best gate and esc educators so here you can access your preparation in just 60 minutes with the help of that live leaderboard you can see how you rank against all the others from all over india with the help of that live leaderboard that would be updated after every question and after every contest detailed video solutions would be given to you by their experts so that you can identify your weak areas and you can change your preparation trajectory if needed plus one more offer you will get here on purchasing a plus subscription of one year or above you will get six months free so you can just unlock your true potential with this extra learning time you will get and this offer is valid for one day only and you can use my code jkl10 to get extra 10 discount on these paid subscriptions so all the links and all the relevant details i'll put in the description box of this video you can go and check out now let's see what is structure packing see first of all i'll write down here the example that we have taken in the previous video right so now what would be the size of this s if you want to print s is what a variable of this struct type the members are care a into b right so how do you calculate the size if you say the size is suppose i am here i am supposing it will take one bite so the care will take one bite and in is going to take four bite so you will say five bite but no with the help of structure padding automatically compiler will insert structure padding here right automatically you don't need to do anything for data alignment purpose right and why stuff the padding is done that we have discussed in previous video you can check out that video in this high button right so now how the memory would be aligned here here you will this is one byte is for a these bytes would be empty bytes and these four bytes would be this for this b so how many bytes four and four that is eight by those total size of this would be eight bytes right this this is what you can see it's wastage of memory these are pad padding bites padding bites one two three no bits bites three bites or padding bites here right so this is what wastage of memory but it will why we do structure padding means why compiler do structure padding automatically not we do compiler will do automatically because to increase the performance right but at a penalty of memory right but what if i don't want to waste this memory i just want to pack everything like this like i don't want compiler insert these extra bytes in between this i don't want any alignment of the memory i want the data should be stored something like this this one byte for this character a and next one two three four these four bytes one two three four these are for this b means total i want five bytes of memory only right i just want to pack this structure so what you can do that is what structure packing is so just have to do one thing you just have to include a simple line in your program in after that header files what you have to write hash pragma and we just write pack and here one in bracket right it's a directive actually which is used to you know turn on and turn off some features in your program so here we are turning on the packing features pack one right so you have turned on the packing here so you have means you can say that you have turned off the padding now compiler will not insert these extra bytes so how much memory would be allocated now total for one for this and four for this five bytes only right you can run this program and you can see so this is what structure packing that's it there is nothing much about structure packing now if i write here one more care c now i'm not writing this hash pragma pack one then how much memory would be allocated automatically compile we will do padding so what four for this one for this three padded bytes then four for integer then four for this character four four four twelve bytes and with this pack one how many bytes should be there one four and one only six bytes right yeah you can save it means you can save a lot of memory with this packing but hair at a cost of performance right more cpu cycles would be required to access the to read the memory to read the data from the memory right so performance would be little bit less so what we can see this hash fragma path will tell or you can say will instruct the compiler to pack these structure members with some you know with a particular alignment right particular alignment here means if you want to give here not one two or four means you are providing your alignment right how many bytes can be padded up to how many bytes right but here we are not writing anything we are just writing one means only one byte no padding would be there right one byte alignment wouldn't be there byte by byte we can access the memory right the processor can access the memory fine so now let's see practically what output you will get if you use this hash pragma directive in your program okay now so this is the program we are taking this the example we are taking simple example i'm going to take without packing we'll see first of all what output you will get like the size of this s only two members carry in p so what output you should get see if i run this and you will see what output you are getting here is eight bytes because of the padding three bytes are padded bytes in care right now if i write here one more care care c suppose right and let me just save it and see let me just run this what output you will get padding would be done automatically by the compiler you cannot do anything with this means you it's not like that you are in so you are inserting the extra bytes just to align the memory no you can stop this you can turn off this feature using uh packing so see now here you will get 12 bytes right one cat then three parrot bites then four four in teaser then one bite for character then three padded bites because word sizes we are assuming four bite right here in 64 bit it's eight bite so here 8 bytes right the size but i do not want to waste these bytes means extra bytes so what you can do i just want to pack the structure members right so what we can do here we can use this pragma directive and here simply you can write down pack and sorry pack 1 that's it now in this case what output you should get so see in this case what output you will get here no padding would be done because we have turned off the feature we have turned on the packing feature here so only six bytes one for care a then four for integer then one for care b that is six bytes right so this is what structure packing and padding is in the uh you know in structures in c and if you shift this gear above this end then what output you will get i am not using this pack right we are just commenting out this hashtag pack one so by default padding would be done so in this case what output you'll get previous case 12 bytes in this case what output you will get only eight bytes so here you can save the memory just by you know writing these members in a smart way you can you should write down these members in increasing order of their size or you can also write in decreasing out of their size right so care is one carries one it will take four bytes so we are writing it in increasing order fine so i guess that's it you can now try out different different you know examples and different different programs on this padding and packing fine so now one assignment for you is rather than this care i'm writing here double double c so in this case we are not writing this packing how many bytes would be allocated what would be the size of this s with the structure padding you are supposed to tell me and if you use this hashtag martin how many bytes would be allocated to this s we are using this this care intent double here right so now that's it for this video in the next video we'll see some problems on structures and also in the next video bye take care you