so in the series of learning c programming we are discussing classification of functions in c we have discussed two classification like a function with no argument no return type a function with no argument but with return type so here we will discuss the third classification of the function that is a function with with argument but no return type means without return type that will discuss in this video right we will take the same example addition of two number i am taking the same example in all the four categories why because you will get a better understanding if i take the same example you will get to know the difference clearly uh with these you know with one example same example the difference between the four classifications otherwise you can take different different example and you can try out different different program also like addition subtraction uh number is prime or note these kind of programs i'll give you some assignment also after this this video so that thing will discuss here with proper program and i'll show you practical also on my laptop right but before that just want to tell you one thing if you are looking for a great career in software development then you must think about the aspects like what's trending in the industry the question being asked in the interview what's the thought process behind the great application like amazon zometo ola how to improve your course ranking so an academy brings you a platform where you can watch weekly shows which you can watch live and the host of these shows are seven star coders from courtship and are working in some of the top companies like linkedin google amazon flipkart and having years of experience so they'll be covering the content which would be really helpful for you like in the live episodes you get an opportunity to ask take a charge about the top 20 questions and the industry leaders about the recruitment process in top startups and mncs what is the eligibility criteria and how to apply for them and how they build the great products not only this you can also participate in two mock interviews and you can learn courses on programming languages cloud computing blockchain and crypto tech aspects of digital marketing data analytics and there is one more show where on weekly basis puneet will host an interesting story like a show that takes the learner on an entire design process journey from user to building a solution he'll conduct practical activities as well as take learners through the process of building great design products like unacademy zomato and google in a storytelling format so everyone wants to get into designing this show is definitely for you so the detail all the details of the show and the badge you will find in the link that i'll put in the description box of this video and don't forget to use my code jk 10 to get 10 percent extra discount on your subscription so now let's discuss this classification of function with argument without return type so in general what you will write suppose fun in a function name with argument so argument we are going to pass here in these brackets so how many number of arguments you want to pass you have to just give in declaration see if you are declaring a function in declaration what you will write you just have to specify the data type of the one those arguments suppose i am doing sum of two number i want to know i want to write a function of doing sum of two number so i want to pass two argument and data type i know data should be integer or maybe i can take one isn't one this float or maybe i can take both should be float that's up to you so suppose i am taking in data type so here you can write down data type in comma into data type in declaration no need to specify the variable in a into b that is in declaration only right and here without return type means return type is nothing it is not going to return anything so nothing means void that's it this is what a declaration in declaration here you just have to specify the data type of the arguments and how many arguments just separate out the arguments by comma if three argument comma int and both are of data type in that's it in definition part what you will do suppose this is the declaration so when you are defining return type is void function name is fun now in definition the data type should match int and here you have to specify the name of the variable a b x y m n up to you you can take any variable name so i am taking here x comma int y and here you can write down the logic right and have you call this function no return type while calling only the function name and the number of argument you want to pass suppose i want to pass directly value 5 7 that is also fine or here you want to pass like some variable a b and a b values you have specified like in main function in a is equal to 5 b is equal to 7 or you can ask from the user also right that will discuss with the proper program so that is function calling a simple pass the argument sorry maybe the variable name or the number if you are passing the variable name no need to specify here the data type but you have to specify the name of the variable here data type is must name of the variable is optional here data type both data type and name of the variable are must in definition so i hope this difference is clear now let's take that example sum of two number so first of all what better after writing directly the header file whatever function you want to use first of all it's a good practice to always declare that function first in that program right it's a good practice always so nothing it would return name is sum i am taking and i want to do a sum of two numbers of float type so that is declaration you have to specify the data type only right now suppose in main function i am calling this i am calling sum and this this thing will discuss later first of all let me write down the definition part here this pro this this will write down later so i am writing here in definition return type is same sum and here sorry it should be float and float float x coma float y no semicolon here right or you can take int float but if you take here in and hair float then here also the odor should match the first parameter should be in second should be float if you will take first float second end then it will give it so this ordering should match right now and in the definition and here in the declaration these are known as parameter in the function calling these are known as argument parameters are also known as formal parameter arguments are also known as actual parameter right these terms are very important very confusing so now see is it necessary here to take two variable like in a b and ask from the user printf enter value of a and b and scanf no need why because already we are accepting two argument means whenever we call the function there we will pass the argument and the value would be received here we have to do some of these two numbers so we don't have to take from the user so no need to declare any variable here because we have already taken the value so here what you will write just the logic logic is what i am taking suppose variable s s is equal to variable m r x plus y but here s is what local variable so here s you have to declare s is equal to 0 s means sum and it is not returning anything without return type so here only we are going to print sum is equal to percentage d sorry not percentage d both are both should be float so some should be float so here we should write float right so percentage f and name of the variable is s right and that's it so now how to pull this function here i want to pass two values either you can pass static values or you can you know you can declare the values here you can fix the values here like 2.1 3.1 so in x what value would be there 2.1 whenever you call the function in y it should be 3.1 so whatever the sum it will print but i don't want to fix these values i want the user should enter whenever we run the program it should ask enter two values so user should enter so here what you can say we can take two variables a comma b and here printf we can ask from the user enter values of a and b and with scanf what we can do percentage f percentage because both are float address of a address of b and here after this simply you can call the function sum and what argument you will pass here a and b a comma b the variable name right that's it and now see here here also you can take x y or both should both can be same a b here also here also it's not like you will get any error or any warning message why so because these a and b these variables are local to this function right and these a and b are local to this main right maybe see obviously this is your house this is your neighbor house in your house also maybe two kid having name uh rohan and mohan and your neighbor house also two kid rohan and mohan so is there any problem no because they are in your house and those two kids are in their house so there will be no problem scope is your house and means their house so that is you can say at the house of these two a and b are this and the house of these two variables are this but you have to you know be very careful why you know taking the same variable name you have to identify like these a b and b are uh we are using in this sum these a and b are for this mean so if you are i know learner if you have started programming then better to take different different variable name just to differentiate otherwise you can take same also right and now now see whenever you run this code then first of all function control will go to the main function in main memory would be allocated suppose this memory has been allocated to this main because in main also we will write some we will declare some variable and all so a and b two variable a and b some space has been allocated right enter a and b suppose i have entered float value 5.1 and 1.1 so that should be stored here now here a value is 5.1 and b value is 1.1 so now function calling so whenever control will go to here now it is function call so it will search for the definition of the function now match with this declaration return type matching sum same number of argument two yes data type of the argument float float float flow ps matching so now no problem now enter here so now some memory would be also located to this function sum this is what called function main is calling function now here we have float s so s is a variable having value 0 s is equal to x plus y now see whenever you call this function what value would be passed in a we have 5.1 and b we have 1.1 so actually the values are going to pass so now in x we have here also in in in this also we have two variable these one is s and we have two variable also x and y so x and y x and y so in x we have 5.1 and in y it is going to receive the value of b that is 1.1 so now whatever the sum that would be stored in s sum is what 6.2 means six point two one two three four five because percentage f is going to you know print what how many digits after uh decimal six so it will it will print this thing printf this now control will reach the closing braces closing this this means back to the where you have called this function here we have called this function means it's written over return it's not returning anything but this will act as return statement means void return so here done now next statement is closing basis of main means once once control will go here this will be vanished this memory has been you know you know freed now this x and y we cannot use these x and y and sum within this main here you cannot write printf percentage f x or y we cannot print because out of this sum they are nothing now the these has been when is the memory has been freed so now control will reach here now exit from the program and this also freed memory has been freed right so this output you will get now maybe you are thinking how many arguments we should pass we don't know so it depends on the program if you are given that write down a program or write down a function which take one argument as input and check that number is even or old means in the program only they have specified you have to take one input as argument so there you have to just specify one argument so that is for assignment for you you have to write down a function right which take one number as input as argument only one number and you have to check that number is even or wrote you have to write down that function means you have to write down obviously the complete program that should fall in this category means it will accept argument but it should not return anything so that is assignment for you you have to write down that program right and see here if i suppose pass three argument then what will happen this thing i'll show you practically right so now let me create a file what we are discussing uh with argument and without return type right now here only after header file only i want to uh declare like void no return type means void and name is sum and suppose i want to pass to argument float and flow both should be return type should we should be float for both the you know argument you pass right now in main what just take two variable float x and y i am taking from the user i want to ask like enter accent why so here we are using specifier what percentage f because we are taking uh the data type float x and y and simply call some past argument x and y that's it now you have to define void sum and here what data type is float you have to specify data type as well as the name of the variable like in a b i am taking here you can take x y also right but i type should be float only because in declaration we have specified that the argument you will pass that should be of float type both the arguments so no need to take any local variables and ask from the user because we have already taken the value in in the form of argument arguments are function is what takes input so these arguments will act as input do some processing whatever logic we will do that is processing and return some output give you some output right so now here i am just taking one variable sum because in s what i want to do a plus b and simply printf you can write down sum is equal to percentage f and the variable name is s and that's it now let me run this and see what output you will get it should ask enter x and y so we have to first of all enter two values so i am taking float so i am entering here 1.1 and 3.1 so the sum is 4.2 and after that 5 0 you have right and here if you don't want to take any like variable so simply what you can do in printf you just write down what a plus b that is also fine see now let me run this again see enter value of x and y i am entering four point three and six point seven see eleven point zero zero zero you are getting so that is also fine right and here you if you will take x and y that is also fine here you can do x plus y right now here if you pass see here i am passing xy comma eight point one three argument i want to pass and let's run what is there see it giving error is what too many argument to function sum in line number ten in line number 10 i am calling this too many arguments arguments because in the declaration we have specified it will accept only two argument but actually we are passing three argument so it will give it right and if you pass only x see now that what will happen at that time i see error is too few argument to function some means it according to the logic it should pass two argument but you are passing only one it means few argument you are passing so here it is also giving error so how many argument you have to pass exactly what how many arguments you have declared in the uh in the function declaration two arguments x comma y rather than variable you can also pass here static value three point one comma four point one so see now what output you will get and here x it will ask enter x and y i mean and second argument i am passing suppose 10.3 but it will give some 7.2 why because you have passed static value 3.1 4.1 so in a and b a will accept 3.1 b will receive 4.1 so that it will give some of a and b whatever value you pass here in x and you whatever value you will enter despite of that value it will give sum of 3.1 and 4.1 because you are passing static value that is why here better to write down the name of the variable x comma y right so now one assignment for you is another assignment is what i have declared this some something like this int and float so now according to this you have to write down this function some function you have to modify this function you have to try this at your own so now that's it for this video now so now we are left with the one classification that is a function with argument and with return type that will discuss in next video so now i'll see in the next video till then bye take care