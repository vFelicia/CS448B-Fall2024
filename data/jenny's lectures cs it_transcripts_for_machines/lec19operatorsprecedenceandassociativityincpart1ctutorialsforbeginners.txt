so in the series of learning C plus plus programming language we have discussed all the type of operators in C plus plus arithmetic relational logical bitwise assignment and some miscellaneous operators so the next topic is operative precedence and associativity this is also one of the important topic in case of operators without this you cannot solve any expression which is harming multiple operators right an expression is having multiple operators plus minus divide left shift right shift logical and logical or so to solve that expression you need to know what is operated precedence and associativity of the operator right operated precedence is nothing you can say it's like a priority priority on the operator so don't worry we'll discuss this thing with the help of two or three examples first of all simple example then two or three complex examples right and uh we'll see step by step everything how to solve the expression keeping in mind the operator precedence and associativity right now before that I just want to tell you one thing Geeks four Geeks has come up with a fun filled event for you guys called geek Olympics and what you have to do is just go to the link in the description box of this video register for the event free of course and after registering you will get access to the calendar where you can see all the upcoming events and activities and see they have something different and new every day in the month of July from 1st to 31st of July so do check out this link every day and where you can get a chance to win some rewards and it would be a great learning experience for you guys now let me brief you on one of the interesting segment of geek Olympics which is DSA cheat code sheet yes they have come up with the ultimate DSA cheat code sheet which will help you to start your DSA preparation it is a stepbystep guide or you can say it's a complete guide where you will you know you will get to know from where you can start your coding journey and what kind of problems you should practice so you just need to fill the Google form which should be in the description box of this video submit that form and after that you will get a link to download this cheat code so register here to get this cheat code sheet instantly and see in this sheet you will get exclusive content of GST and also content from the paid courses but keep in mind one thing this cheat code sheet this content would be available on the website on one for few days only for some days in between first to 31st of July so do check out it every day and shoot your shot so all the relevant links and details I'll put in the description of this video you can go and check out now let's see what is operator precedence and associativity so first of all what is operator precedence C it's you can say it's priority residence means the order in which operators is to be executed like you have heard bodmas rule you must have heard I guess everybody Burma soon first we saw the brackets right then some priorities of operators are there according to the priority we solve all the operators like this if an expression is something like this I have like a 2 plus 3 into 5. in this we have two operator or if I write something like in a program if I write int a and then a is equal to this and then C out a C out a so here this is simple program like this is what expression although you can write those header file and namespace STD and Main all this thing the main logic I have written so this is what an expression in this expression we have how many operand how many operators one two three equal to operator that is assignment operator and plus and into arithmetic operators plus and into our arithmetic operators so which operator is to be executed first if you have more than one operator in one expression so have you will decide that thing based on operator precedence right same thing like you if you are standing in a queue in any Bank suppose and any VIP come or suppose any member of same bank comes then his or her work is to be done first rather than your work they'll not stand in the queue because they are having higher priority than you if a VIP come right so they are having higher priority than than you guys right so their work is to be done first after that your work although you are standing in a queue they will not stand in that queue right so same for operators also we have some precedence or some you can say that uh priority right so this is the priority you can say the table for operator right as you can see at the first we have scope resolution operator then we have post fix increment and decrement operator right don't check out the associativity first that also discuss first of all check the Precedence right so you don't have to remember this precedence chart as it is but yeah you have to remember the operators which will frequently use the Precedence and associativity for those operators like relational those arithmetic operators logical bitwise operators uh those increment decrement operators right for this you have to remember the uh no precedence right see now first of all the Precedence of which operator is more assignment operators are having lowest precedence so that would be executed in the last Plus or into the Precedence of into or multiplication operator is higher than this plus so first of all this should be executed it means 5 into 3 15 15 plus 2 is 17. now a becomes 17. if I modify something like this now this is my expression in this case we have 1 2 3 and 4 operators one is this bracket this is also an operator and the highest precedence is of this bracket so first now you will solve this thing so 3 plus 2 is 5 then 5 into 5 25 right then 25 would be assigned to a now a becomes 25 so see in the both the cases you are getting different result just I have changed a little bit I have added this bracket that's this operator that is why we need operator precedent right so now let's take one more example now at this time we have this expression so in this expression we have many operators or before that let's take a simple example and suppose I have 2 plus 3 into 5 divided by 2 mode suppose three this is the expression now in this we have plus into divide mode so which operator is having higher precedence this into divide and modulo these are having higher precedence Than This plus but these three are having same precedence it's not like that into is having higher precedence or this is having higher precedence right these are having same precedence but higher than this Plus so now if in in an expression two or three operators comes of having same precedence now which operator to be executed first now how you will decide because they are having same precedence right suppose two VIP person come so you are standing in queue and two or three VIP person come so they are having higher precedence than than you so obviously they'll do their work their work is to be done first but they are three person and all of them is VIP so how they will decide right so same here these three operators are having higher precedence than plus but they are having same precedence they are VIP right now which operator is to be executed first now you have to check the associativity of the operator if this table this column is for associativity every operator is having associativity left to right except two groups first is what prefix increment decrement unity plus minus logical not bitwise this and then address of size of this group is having associativity right to left and second the conditional operator and assignment operator these are having associativity right to left otherwise all the operators are having associativity left to right now what does this mean c now a sensitivity for these operators are multiplicative operators are left to right means we will move from left to right and the first operator whatever operator you will get first that would be executed first so now we have 2 plus when will you move left to right first operator is into so that would be executed first means 5 into 3 15 then divide 2 mode 3 when you move left to right which operator is coming first divide so this would be executed first 2 plus 15 divided by 2. suppose you are taking only into value so what values will give seven right now we have mode three now out of this we have higher precedence mode operator so 2 plus 7 more 3 more will give remainder so now remainder is I guess one now the output would would be 3. so I hope you got what is Presidents and associativity event to check presidents when to check a sensitivity now let's try to solve this expression this is little bit complex in this expression we have many operators we have plus this is bitwise over divide minus left shift bitwise left shift logical and mode divide and into right now out of these operators which operator is having higher precedence out of these the multiplicative operators divide mode divide into these are having higher precedence but we have to divide one mode and one that multiplication so we'll check the sensitivity will associativity for these are left to right so when you will move left to right which operator you will get first divide so now it becomes 2 plus 3 and bitwise or 12 divided by 6 that becomes 2 right then minus 1 then this then logical land and after that this mode six mode seven mode will give remainder but we cannot divide this remainder would be 6 only 6 divided by 3 into 5. after this this division would be executed so division 3 divided by 6 divided by 3 means 2 so rather than this we can write simply 2 now I will execute this into 5 into 2 is 10. right now out of these operator which is having higher precedence this plus and minus are having higher precedence than this these remaining operators right you can see that precedence chart if you don't remember right now right but they are having associativity left to right so we'll move left to right and solve first operator is plus so 5 bitwise or then this minus would be executed for this operand is this and this 2 minus 1 is 1 1 left shift one and ten now we have bitwise left shift bit wise poor and logical and out of these higher precedencies this left shift operator is having higher precedence so five this one left shift one this is bitwise operator so first you have to convert it into bits so one would be converted something like the zero zero zero one in four bits I am representing it now we will left shift this by one only by one bit so by one bit we left shift so this would be discarded if this zero would be here this zero would be here this one would be here and at this place we will simply fill this place with zero so now this becomes the decimal equivalent of this as 2. right so now rather than this you can simply write 2 and 10. so from this we have this bit wise or is having higher precedence than logical and so first you have to solve this one five bit wise so bitwise operator is there so first convert this and this into bits 5 would be converted in binary how you can write 5 0 1 0 1 c 1 2 4 8 right in four bits 2 can be written 0 0 1 0. now execute bitwise over on this bit wise or means 1 0 obviously one one one zero if anyone is true it will give true otherwise false if both are false then only it will give false so decimal of this is what four plus two plus one that is seven seven and n logical and operator for logical and operator the operand should be Boolean Boolean value true or false so seven or 10 other than 0 if value is there then it would be considered as true true true true true it will give 1 so now y becomes 1. right or the shortcut to solve this kind of expression is what if this kind of expression comes into your exam then what is the shortcut C this logical and operator out of these logical and operator is having lowest precedence right so now this would be executed in the last and bitwise logical and operator works on short circuit evaluation means if one Apprentice Falls it will be false logical and trustable I guess you remember right so either solve this thing or either solve this thing so this is short so first of all solve this thing this expression is this so the Precedence of these are same so check the sensitivity left to right 6 mode 7 will give 6 divided by 3 into 5 right then becomes 2 into 5 that is 10 so one side of logical and is true 10 means obviously true other than 0 is true right now for logical and both the sides should be true so now you cannot say one is true it would be the result would be true no now you have to execute this also right if this becomes true then only it would be true if other than this we have logical or operator we have logical or logical or means if one side true it will give to you so rather than solving the complete expression just solve this one 10 10 means true so you don't need to solve this one the result would be definitely true that is one so this is you can say the shortcut to solve this kind of expression right I hope you got the presidency and associativity with the help of this expression why we are getting True Value let me just give you now some assignment same expression we have just I have changed bitwise rather than bit wise or we have twice and so for this you have to tell what would be the output right second is what here we have and and I'm just changing this rather than this 3 I have 8. this is for second assignment right so this is second second question so what you will get here right in first here we have three so this is your first question in second question everything would be same and other than three we have eight so this is our second question so these are two questions you have to solve now let's uh take this example also like if I have a is equal to 2 comma 3 comma 4 and if I print C out a this comma operator is having lowest precedence right then this assignment is having higher precedence than this form operator right so now first out of this we have 2 comma operator one assignment operator first which operator would be executed assignment operator is having higher Pistons assignment operators wants means what right hand side value would be assigned to left hand side so it will check this value only right hand side value is 2 2 would be assigned to a and it will give 2. now I'm changing a little bit I'm just writing I'm just putting a bracket now we have three operators uh this is equal to sorry this assignment operator then comma operator and this bracket so out of this which is having higher precedence bracket so this would be executed first now in this bracket we have 2 comma 3 comma four two comma operators so check the associativity comma operator two comma operator having same precedence so now check the associativity which comma operator is to be executed first associate of comma operator is what left to right left to right so now first this comma operator would be executed now what is the operation of comma operator this expression would be executed evaluated and it will discard this value after that this comma operator this for this uh the the expression that this would be executed and this will discard the value so it will discard two then it will discard three and then it will return 4. right so now 4 would be assigned to this a in this case now in this case a would be 4. I hope you got the value sorry how you are getting this 4 right when you move left to right this would be discarded this would be discarded and finally the whatever the value at the right hand side at last it that value would be returned if I write here comma 6. then this value will also be discarded after this comma operator we have one more value so this would be returned the last value so now a would be 6. right so this is one more question for you guys we have four variable ABCD the values are something like this and in y this is the expression a divided by B this is bitwise xor C into a mode in bracket we have C plus d c plus d then left shift d and minus 2 so what would be the value of this I hope you got precedence and associativity and you can evaluate any complex expression right now the tricky one is increment and decrement prefix increment and post fix these Expressions so for that we will be discussing two or three you know separate in separate video two or three questions complicated type of questions right so now I'll see the next video till then bye take care