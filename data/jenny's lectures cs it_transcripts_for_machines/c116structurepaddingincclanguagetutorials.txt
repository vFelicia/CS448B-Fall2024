so in the series of learning c programming we are discussing structures in c in the previous video we have discussed type defined structure like how to use that type def keyword in structures right in this video we will see what is structure padding because we are left with two small topics in structure that is structural padding and structure packing many students i guess didn't know what is structure padding or they didn't even hear about this word structure padding and structure packing but yeah it's there in structures right these are small topics and the sometimes interviewer asked these kind of questions so in gate and net also you get these kind of questions right based on structure padding so we'll discuss everything about structure padding what is uh what is this structure padding why we need this right with examples right but before they just want to tell you one thing if you guys are preparing for gate examination or will be preparing for gate 2023 examination then an academy is going to start a new batch from 8th of december rohan for gate 2023 in this course their top educators will be covering all the subjects of cs and it that will help you to prepare in your gate examination so in this course you will get a detailed explanation of all the concepts of all the subjects and apart from these some special classes like preparation strategy some tips and tricks shortcuts practice questions numericals so these kind of classes would really be helpful for you guys and they'll cover the sports in both hindi and english and notes should be given to you in english only apart from this doubt clearing sessions should also be conducted in this course so if you have any doubt you can get your all your doubt you know cleared in those doubt clearing sessions and this would be paid because you will get complete and structured course but if you will use my code jkl 10 you will get extra 10 percent discount on your paid subscription and one good point about these classes are what you can talk to your favorite educator in the live classes and you can clear your doubts so i guess this is a musthave subscription for those who want to clear gate 2023 examination with the with some good marks so the relevant link and all the details i'll put in the description box of this video if you are interested you can go and check out the link so now let's see what is structure padding and see first of all we'll see one example like simple example i'm going to take see this is what i'm taking i'm defining a structure abc i'm taking only two members care a and into b and i'm declaring a variable s so if i ask what is the size of this how much memory would be allocated to this member sorry to this variable not members once you declare the variable then only memory would be allocated to these members how much memory maybe simply will say for one byte one bite for care and four bytes for in let's suppose care is going to be one bite and it is going to take four bytes float also four bytes doubles eight double eight byte long eight byte like this so one plus four that is five byte you will say five byte but no that is wrong why how the memory would be allocated because of the alignment the data alignment see how these members would be allocated some memory see here we have suppose this is a one byte for this address is hundred and one zero one so this is one byte for the square maybe you will say next one two three four these four bytes would be for int and five bytes no why so we can see memory is not bite advisable nowadays it is word addressable now what does that mean word addressable means in one cpu cycle at one time the processor can fetch one complete word from the memory and what is this word how many bytes this word will have in 32 bit machine on 32 bit machine word size is 4 byte and if your machine your processor is 64 bit then word size is 8 byte processor can access 4 byte at one time if it is 32 bit if 64 bit then processor can access eight byte from the memory at one time in one cpu cycle you can access eight byte here you can access four byte right this is the case and see historically processors these were byte addressable means processor at one time can access only one byte then one byte then one byte then one byte like this right but here problem is what see int is taking four byte suppose this end is taking four byte one two three four and if processor is byte addressable then how many cycles how many times the processor have to you know fetch the memory to read one integer value four times one by four this second third and fourth because integer it is taking four byte and processor can read only one bite at a time so four times you will you will require four cpu cycle it's like suppose you want to buy this shirt pant and you can say tshirt and jeans but at one time you will go to the store and you will pick shirt only you will come to your home second time again you will go to the store pick only paint and you will come to your home then third time then fourth time obviously this would be hectic what if we will go only one time and we'll pick all the four things shirt pen tshirt and jeans at one time and come back to your home that is a good idea right that is same thing here what if the processor what if in in one cpu cycle only that processor can access all the four bytes yeah that is possible that is why memory you know is nowadays word addressable to increase the performance to increase the speed memory is nowadays word addressable right so at one time you can access these four bytes at one time only right only one cpu cycle would be required and you can access four bytes in 32 bit if 64 bit there you can access eight bytes at one in one cpu cycle only right so it depends on the you can say that architecture so now see here here i'm assuming that word size is 4 byte i'm assuming word size is 4 byte i'm assuming word size is 4 byte means we can access 4 bytes at a time so now see suppose we have stored a here care a means value is somewhere value is here and we have stored that value here if we store this end one two three four these four bytes then see this is one word four bytes then one two three four this would be another word this is one word this is second word you can say four bytes four bytes so now this integer would be one two three four three bytes would be this and one byte would be this so now if you want to access this integer value how many cpu cycle would be required to cpu cycle once if you cycle in once if cpu cycle you can access only these three bytes right and in another cpu cycle you will access this one byte obviously the cpus the processor will read this complete word but your information is only in this byte so after that it will read only this byte so two cpu cycles would be required means you can you can do this thing in one cpu cycle but here because of this storage you need two cpu cycle that is wastage of cpu cycle right that is going to decrease your performance right so now what you can do second method is you leave this space blank we are not going to store this in here and we will store this in these four bytes here one character here leave the three bytes as it is and then in these four bytes we will store this in so now here how many cpu cycle would be required to fetch this hint value only one because all four are in this location right so see many processor expect that the memory of these variables so these things would be aligned would be allocated according to the size of the variable see character is going to take one byte so you can store anywhere but it is going to take 4 byte so the address should start from the multiple of 4 like you can say 1 0 0 4 1 0 0 8 or like 100 is also fine one zero four is also fine something like this and here this address is one zero one so we cannot store in from one zero one it is not multiple of four so you can store from here one zero four that is multiple of four right so from here we can store end value fine so now this these extra bits these this is known as padding bits or you can say memory holes right or you can say alignment memory alignment data alignment this is what we are giving we are allowing the data right just to increase the speed just to increase the performance of your cpu but at a penalty of memory hair wastage of some memory but memory is nowadays getting cheaper and cheaper so we can yeah we can afford some wastage of memory to increase the speed of the cpu if you don't want to waste the memory memory is also very critical for you speed is not then you can avoid this padding but one thing padding would be automatically done by the compiler automatically done by the compiler you will not do padding compiler will automatically do this thing but if you want to avoid padding then you can do packing you will have to include some special line in your program that is known and known as structure packing that will discuss in next video right but this padding will be done automatically by the compiler so this is known as padding bits and this process of inserting some extra bits or extra extra bytes or extra space between these variables just to align the data that process is known as structure padding in c so whenever you are asked these type of questions like how much memory would be located in this case so first question your first question would be what with structure padding or without structure padding or you can say with the data alignment or without a data alignment with the data alignment means with the structure padding that is what obviously that is data alignment right and then its word size would be what your next question would be what is the word size 4 byte or 8 byte and how many buy this because sometimes on some compiler it is going to take into take two bytes and on some machine it takes four bytes so your next question would be this also or maybe they will give all the details in the question and you just have to find out the size complete size that's it if this is not given if some interviews interviewer is going to ask this question to you then you must ask this question first of all to that interest to know the interviewer have to clear everything and then you calculate the size and then then tell if they ask you this type of question their motive is just to know if you have any idea about structure padding or structure packing because many students i am sure many students didn't hear this word structure padding right so this is very small concept and now see so how many bytes would be allocated to this now complete this 4 and this 4 8 so this 8 bytes would be allocated so next next example is suppose i am taking this example i am just adding one more c now how many bytes would be located with the data alignment or you can say with structure padding right so this would be the alignment here see one word one word one word so now okay first is this for this character a somali would be store next is integer so we are not going to store here this would be blank and this would be stored here this b value int right now next is character c so that would be stored in this one byte right but processor can access four byte this is word adjustable so this complete would be in your account it's not like that only one byte would be in your account this complete four byte could be added to your account right so how many bytes would be allocated memory four four four that is in this case twelve bytes right but if you do something like this i am writing care c here not here now how many bytes would be allocated see first is character so the same thing we are having this is the memory alignment right so this would be this first byte would be for c next is care a right character is going to only one bite so it can you can store it anywhere right so now here you can store this a this one bite for this a next is end so we are not going to store in here we will leave this two bytes as a tease and now it would be stored from here to here so how many bites how many bites how many padding bytes would be there here only two bytes and total memory would be four and four that is eight bytes so maybe you are thinking in the previous case also we were having two care member and one int here also we are having two care and one end but see you have noticed the difference i guess the memory allocation the previous case twelve bytes here eight bytes only see see nowadays processors are very smart they can even handle these type of alignment memory alignment this problem comes when you are using risk type of processor they throw the exception when data is not aligned in the memory but nowadays processor can handle the smaller alignment but sometimes you know in in a very worse situation you use or maybe cpu how to use two or three cpu cycle to access some data because of the bad alignment so it's the duty of programmer to take care of these things so it's duty of you if you're writing writing a program to write down these program in such a way that memory wastage would be less so if one programmer is writing these members something like this only by should be required if you are new to programming and use you use something like this scare c rather than here here 12 bytes should be required so now here wastage of 4 bytes and suppose a large amount of data you are storing this structure we use generally would like to store uh information of student or employees or these kind of things right and only three members are there right and in every student like thousand students or more students are there for every student you are wasting four bites sorry 5000 students or you can say one crore students or like you are storing information of other card and there we are having this kind of thing so they are like you have to store information for 135 crore people so how many bytes should be wasted you can imagine so it's duty of programmer only just to write down these members in a proper way so what should be the proper way you should write down these members in increasing order of their memory size like hair care c care care one byte then integer four bytes so increasing order it would be better to write in increasing order of their memory size right in that case memory would be you know properly utilized and less wasted you can say less wastage of memory would be there so i hope you got what is structure padding right and why we need structure padding and who does structure padding automatically it is done by the compiler why we need just to increase the speed of the or you can see the performance to reduce the wastage of number of cpu cycles right and what is this these extra bytes for you know you used to put between tho these values just for the data alignment that are known as this process is known as structure padding so you can try out different different these combinations or int float double every type of you know variables every type of member you can take here and you can see how memory would be allocated and how many bytes it is going to take right and one more question may arise like how many bytes would be added or how many padding bites you you would add so that would be according to the this the largest element you have here in is the largest 4 byte so according to this extra bytes should be added so i guess that's it for this video if you have any doubt in the structure padding you can ask me in comment box so now next we will see what is structure packing so nice in the next video till then bye take care