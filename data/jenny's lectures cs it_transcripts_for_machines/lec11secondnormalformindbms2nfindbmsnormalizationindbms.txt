in the previous video we have discussed what is first normal form and how identify that I given table is in first normal form or not right basically we have discussed all the four rules for a relation to be in first normal form all the four important rules right and I have already told you that if they'll give you a relational schema or something like this relation is given having these attributes and functional dependencies are given right then obviously that schema would be in first normal form they will never give you or hardly they will give you a table and they will ask that tell me the stable is in first normal form or not right because first normal form is the basic point the basic step of normalization so always they will give you a table or the schema in first normal form now the important point is you how to identify that as in second normal form third normal form bcnf something like this and if not then convert it into the desired normal form right so in gate and annete these type of questions will be asked they will give you these type of questions functional dependencies are given and they'll ask you that which highest normal form is there in this relation so you have to find it out so we have only functional dependencies right so this functional dependencies will play very important role here so I have already discussed what is functional dependencies trivial functional dependency known trivial functional dependencies on strong exams or you can say inference rules or functional dependencies so first you check out those videos and second important point is here what you should know how to calculate candidate keys in a relation candidate Keys plays very important role without finding out the candidate is you cannot solve the problem of normalization second normal form third normal form bcnf fourth fifth like this right so candidate keys you should know that also we have discussed how to find out candidate keys in a given relation all the candidate keys not one all candidate is right with a simple trick so you can check out that video in this right and after that come to this video so now in this video we will discuss how to find out that a particular given relation is in second normal form or not right what are the rules for a relation to be in second normal form there are basically two roots first rule is very simple that that relation should be in first normal form and I have already told you if they will give you this type of question that our relational schema is given that is by default that will be in first normal form right so first rule is a relation is said to be in second normal form if first rule is if it is in first normal form right and this already we by default we consider that this is in first normal form right second rule is what there would be no partial dependency present in the relation now what is partial dependency that also L discuss so this what is this partial dependency now I hope everybody knows what is functional dependency right I have already discussed you can check out that or you on the side but now what is partial functional dependency or you can write down at something like this proper subset of candidate key of any candidate key if suppose there are three candidate keys so proper subset of any candidate key well determine nonprime attribute if this kind of dependency is there in the list of functional dependency given then that is known as partial dependency right proper subset of candidate key see suppose candidate key here is a B II so proper subset of this as what ad is also proper subset B is also proper subset or you can write a a de6 proper subset of are there right so if any proper subset of the candidate key will determine the know one prime attribute then that is partial dependency and that should not present in the relation if partial dependency is there in the relation that then that relation is not in second normal form now what does this nonprime attribute I hope you got what is partial dependency write partial functional dependency you can say now obviously I will discuss this with elbow in this example then you will get it better now what is known primate rib you see I hold discussed prime a tribute nonprime attribute primary boots are those which are part of candidate keys right suppose here in this relation suppose I am NOT saying that these are the candidate key suppose a D is candidate key B C is candidate key to candidate keys are there in this relation right so prime attributes would be what a b c d e the attributes which are part of candidate keys or which are making the candidate key those are prime atributes and the remaining attributes are means the attributes which are not part of candidate key which are those are nonprime attribute so here nonprime attribute would be i guess only F would be nonprime attribute right so I hope you all know what is known primate repute so now let us discuss it with this example let us find out thus this relation is in second normal form or not right and after that we will discuss it with help of two or three examples with all the type of examples I will take all the type of examples and after that we will see if this is not in second normal form then how to convert it into second normal form right so now this is in first normal form right by default the relational schema is given and this condition is satisfied now you have to find out this condition means there should be no partial dependency so now you have to find out this type of functional dependency here if this type of functional dependency present here then you can say this is not in second normal form right but for this you have to find out what is candidate here to find out the proper subset of candidate keys you have to find out all the candidate from a relation right without finding candidate he is you cannot do anything so that is very important now how to find out candidate keys we have already discussed candidate key is what the minimal superkey so now here how to find out by taking the attribute closer so that also I have discussed what is attribute closer and how to find out that Ribit closer of an attribute right so I will take first of all all the attributes find out the closer definitely it will find out all that reviews so this is all definitely a super key right because of reflexive reflexivity property now try to discard attributes from here so now a can determine B so we have a so I can discard B from here because if you have a then a can determine itself and a can determine B also so you can discard B it can determine V B can determine C so by transitivity property a can determine C so you can discard C C can determine D so by transitivity property a can also determine B so you can discard D now I can determine D and D can determine e so by default a can determine e means by transitivity property so you can discard e can you discard F no we don't have such type of dependent dependency that using that we can discard F because nothing is going to find out nothing is determining here F so now a and if you can take the closer and you will find all the attributes so this would be the super key right so how to find out that that is candidate here not proper subset is a and F proper subset is if proper subset is also super in and that would not be a candidate key you can find out closure of a closure of a will find out a right itself then B then C then D then e not F so this is not super key F proper F closer would we want only F F can determine itself this is trivial functional dependency nothing else so this is also not super key so you here you can say AF is candidate key because no proper subset of super key the super key is super key so here AF is what candidate we have got one candidate key that is F so now we have got as well as the primary beauts right means a and F a comma F R prime attributes now you have to find out still there are another more so more candidate keys exist in the relation or not because we have what only one candidate you know how to find out that thing if the prime attributes are present on the right hand side of any functional dependency then definitely there would be more candidate he is present if not then there would be no more candidate he so find out is a present on the right hand side of any functional dependency no F no so in this relation only one candidate key is there that is a F no more candidate key you will find like that is the short break fine now if AF is candidate key then here known prime attributes are AFR prime attributes so remaining means bc de these are non prime attributes now they have known prime attributes also on cannulate field so now you can check out this type of dependency exist here or not C proper subset of candidate key proper subset of this candidate is what because I have only one candidate key a and right is a or F bit remaining any nonprime attribute C here F is not a determining anything so it cannot be there it cannot be a case now is a determining here C is determining be right and B is what nonprime attribute means you go to this type of functional dependency here right so this is what a determine B this is what partial dependency so here partial dependency exists so this relation is not in second normal form or in another word you can say C complete AF is candidate E and definitely it is also primary key right and only a PI of this primary key only a part of this primary pure candidate key is determining a nonprime attribute only a part not the complete candidate he so that could not be possible right so now let us discuss it with one more example so let us take this example now this is the relation having four attributes and these are the functional dependency is given here so this relation is definitely by defaulting first normal form right now you have to check the partial dependency present here or not how to find out partial dependency see this thing you have to take care if you know how to find out partial dependency what is partial dependency then you can easily find out that a particular relation is in second normal form or not this is the important concept here right so partial dependency means you have to find out this kind of dependency in the given list for this kind of dependency you have to find out candidate keys all the candidate keys and definitely then you can find out the nonprime attribute all right so now first of all find out the candidate keys how to find out if all the attributes take the closer and all the attributes definitely would be super key right now try to discard as many attributes as you can because candidate he is minimal superkey now see check the dependencies a B both can determine C D do you have a B yes I have a B so I can determine both C and D so a B closer would also find out a B itself because of reflexivity and a B can determine C D do you have a B yes so I can determine C D so this closure of the say B is containing all the attributes so a B is what super key a B is still a super here right now can you discard any more attribute from a b c can determine a you have do you have C no they can determine B but we don't have B so we cannot discard any more attribute right so now check out as a B's so candidate he or not find out the proper subset that is a and B find out closure of a find out a and B individual can be a super cure node closure of a single a can determine a but we don't have a B so we cannot determine C D so only a can throw my itself we can determine B only B so this is not super key this is not super key so it means candidate here a B is what candidate key we have got one candidate it means prime attributes are a and B right now check more candidate keys are present or not how to check if prime attributes are present on the right hand side of any functional dependency then definitely more candidate keys would be there C is present on the right hand side of this functional dependency right means you will get more candidate he is here right now how to do that thing C existing candidate is this one so at the place of a you can replace a with C after replacing you will get C B right and second option is C B is also prime attribute and B is present on the right hand side of D so second option is at the place of B you can write down B but I'm not saying that this and s would be definitely candidate is still you need to find out but yeah I can say that this and this are super keys right so now check out the proper subset of B and C 1 is B 1 is C check out these are super keys or not find out to be closer see B is not a super key C closer so you can determine itself C can determine a nothing else so this is not super key so it means B C is also candidate key right so now we go to one more prime attribute that is C now check out a DS candidate key or not a closer not candidate key be closer be closer can find out B and B nothing else so this is also not super case so this is also candidate key here fine so a and D so D is also prime attribute right now you can check we have got two more prime attributes now check these are available on the right hand side of any functional dependencies or not yes available see this you can write down something like this by splitting property a B can determine C and a B can determine D so at the place of C you can replace it with a B here a B so obviously not right abb a B but we have got on the candidate he a B so no need to replace and at D also a be at D also a B so we have already got a B so no need to replace so now these are the candidate III candidate he's in this relation and prime attributes are ABCD now here all the attributes of the relations are prime atributes so definitely that relation would be in second normal form why so because there is no nonprime attribute if no nonprime attribute then you will never get this type of situation because proper subset of candidate key is determining nonprime attribute this is partial dependency but we don't have any known primate review so you will never get this kind of dependency here right see at the right hand side nonprime attribute should be there you can check right hand side CD but CDs prime attribute a is also prime attribute B B's also prime attribute fine so if all the attribute of a relation R prime attributes then that relation is definitely in second adorable form right let us take third example so third is this type of question four attributes are there in our relation these are the functional dependence you find out the candidate key first of all how to find out simple rule take all the attributes obviously the closer would be ABCD find out all the attributes so this would be super key right now try to discard attributes how will discard to check the functional dependency is determining B so do you have a yes I can discard be a yet remaining BB is determining see so by transitivity property a will determine C so I can discard C because I have a now third is what C is determining B means a can determine C and C can determine D by transitivity property so means here if you have a so you can discard B so now we are left with only a so find out a closer is it super clear node a will determine itself so we have a a will determine V do you have a yes so it will determine B B will determine CSU will determine D so I am getting all the attributes of a relation so a is what super key right now is a candidate key or not definitely yes why so because proper subset of this is what Phi only right how to find out proper subset that also I have discussed in the previous video you can check out that video in the SCI button right that is Phi and Phi a set of attribute cannot determine any attribute of a relation so definitely if one attribute is there in a super key then definitely that would be candidate key so here is what candidate so prime attribute we got a now check prime attribute is available on the right hand side of any functional dependency here we have B here we have C here we already know it means there would not be no more candidate keys here we have only one candidate key that is a now see here candidate key is having only one attribute so proper subset of candidate key can you get any proper subset of this proper subset would be what Phi only no attribute would be there right now there is no proper subset of candidate key so definitely we will never get this kind of dependency here so there is no func partial dependency so this would be in second normal form this relation would be in second normal form so you can say something like this if candidate is having only single attribute single attribute right then definitely that relation would be in second normal form right it's not like that may be may be in some case in some relation one candidate he is on having single attribute another candidate he is having two attribute in that case you cannot say that there would not be any partial dependency because one candidate key is having two attributes so you can find out proper subset of this you can you cannot find out proper subset of this but you can find out proper subset of this right so it means if all the candidate keys here luckily I have only one candidate key but if suppose all the candidate keys two candidate keys are there oh three candidate keys are there and all the three candidate keys are having single single ID then definitely there would be no partial dependency and definitely that relation would be in second normal form now I hope you got how to find out that particular relation is in second normal form or not right and what is partial dependency now see one question for you is here this this is the relation given and functional dependencies are two functional dependency is only A to B B to D I think this is very simple question so you can tell me in the comment box that this relation is in second normal form or not right now the question is if not in second normal form then how to convert it into second normal form right so we will decompose that relation see this is not in second normal form so you will decompose this you will divide it now how to decompose it that I guess it's not the right time to tell because first of all I will tell you what is decomposition what are types of decomposition we have Llosa decomposition we have lost less decomposition right so definitely there should be loss less decomposition not this low silly composition now I am going to tell you in the next video that what is the low C decomposition and what is loss less decomposition right right and how to decompose a particular relation into loss less the composition right after that only I can I guess you can easily get that how to convert it into its second normal form how to decompose the relation right it's not the right time to tell you right now in the next video I am going to tell you that what is third normal form and how to find out that a particular relation particular given relation is in third normal form or not the basic idea right so I guess now it's done with the second normal form so now I'll see in the next video till then bye bye take care