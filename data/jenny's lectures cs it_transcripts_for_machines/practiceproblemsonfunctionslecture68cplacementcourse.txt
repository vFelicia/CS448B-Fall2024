hey everyone I hope you are safe and doing good so in the series of learning C++ programming language we are discussing functions in C++ in previous video we have seen what is function overloading right everything about function overloading now in this video we'll see two to three coding exercises based on functions we'll start with with basic one like how to find factorial of a number F series then how to find out like from a given uh between two numbers like suppose two numbers are given 11 to 13 so between 11 to uh 20 so between those numbers you have to find out all the prime numbers right so these type of exercises we'll do in this video Let's Start first we'll uh see how to find out factorial of a number so we'll do this thing using function so suppose I'm just creating a function void fact and it will take any int value as an argument so this just declaration or protype of that function now in main function obviously we will call that function so first let's take a number for which you want to find out like the factorial from user we'll take this number and in this fact this function we call this function just pass n right and suppose if you want to return something then you can take here int suppose not void I want this function should return the value like factorial it should return some that factorial so if you are returning returning if this function is returning something then here you cannot directly write down like this because it is returning something so you have to use some variable to store that value right or directly in C out we can call that function so suppose um directly in C out I'm calling this function now let's define this function we have a parameter in a and how to find out factorial I hope you know if you want to find out factorial of five number then 5 into 4 into 3 into 2 into 1 right like if you want to find out factorial of uh n like n factorial then this this would be the formula would be n into n 1 into N 2 into like this up to into one right so the factorial of a number is the multiplication of all the numbers between one to that number like five factorial means all the multiplication of all the numbers between 1 to five that's it right so this formula this logic you have to write down in this function right so and one thing if the number is zero I mean 0 factorial is always one and one factorial is always one right so whatever the number you pass right if that number if like a is equal to equal to 0 or AAL toal to 1 then simply return one because 0 factorial is 1 1 factorial is one right else we do though those multiplication of that like between one to that number right so for that 14 Loop and I is equal to let's start with i equal to 2 and I less than equal to whatever the number you pass and I Plus plus and here we do what first let's take like here uh a number factorial sorry a variable factorial and let's suppose this is one if you don't take any value here so it will take any garbage value in starting of this uh variable factorial so better to initialize it with one and here what is the that formula factorial equal to factorial into I and simply return whatever the factorial right that's it and whatever you return here that will be printed here let's run this and see you get the output or not factorial of 3 it's 6 3 into 2 into 1 let's run this again again factorial of 5 it should be 120 5 into 4 into 3 into 2 into 1 right and if you you don't write down here see out let's SC this like this so what should it print let's see four see it is not printing anything it is not giving any error to you guys but it is not printing that factorial why so because once when it will return that factorial number then here we're directly calling it we we don't have anything to store that number so how to print that number right if I just want to suppose I give you something right so you should have something like maybe your hand should be something like this or you should have a ball or glass or anything just to hold that thing right otherwise you will not get that thing right so same here either we should have some variable right and in that variable we can just like maybe suppose you have a variable here int n and one more suppose F and F equal to this so the factorial would be stored in F and after that we can just print that F this also will work fine see 24 right otherwise in direct C out you can call this and let's run this and I'll show you like that 0 factorial and 1 factorial so if I pass zero it will print one if you pass one it will print one so it is like how to find out factorial of a number using function I hope you got it next is fibon series what is fibon series fibon series is something like this first term is zero and next is one and then 0 + 1 1 then add the previous two 1 + 1 2 then add previous two 2 + 1 that is 3 then 3 + 2 5 like this then 5 + 3 8 and so on so addition of previous two numbers and the series would be so on okay so now how to find out fabon series up to whatever number of terms you want to find out let's suppose I want to find out faban series up to five terms so it would print 0 1 1 2 3 up to five terms 0 like 1 2 3 4 5 five terms right now how to find out fabon series see first we will take 0 and one are fixed so we can take a variable A or B like a is zero and B is 1 something like this B is one now the next term next term is addition of previous two terms so a plus b that is one right so we can say like NT n stands for next term next term would be be A+ B it's a plus b right I I hope you are getting this 0 + 1 is 1 and we just print one here now next term is addition of previous two right so at first it is a this is B and this one is next term after that now to find out next term like two we should add this and this so now this should be a this should be B and now a plus b becomes this becomes next term two becomes next term right we do a plus b so this kind of thing you have to do this logic you have to apply so pause the video and try this out so let's comment out this and write down another program let have a function function per type like function name FIB return type and it will take a argument of type int right if you want to take here variable name that is also fun you can take now let's define this first void FIB after main I'm going you know I'll Define this in mean I'm calling this I'll call this so int suppose a the variable name can be different so at first we'll take like int or if you take like uh T1 or we can take x x is equal to0 and into Y is equal to 1 first two terms 0 and 1 right we do x + y right now in four Loop because obviously that addition would be in Loop so let's take a for Loop and I is equal to from how many times this Loop should be iterated till the number of terms you want in that febon Series so I should be less than equal to whatever whatever this value you passed here right here while calling if suppose I pass s n right for that you have to take int n and from user we'll take input so we'll take this input from user right and we'll pass that number of terms and so it will be in this a variable right and this would be till the number of terms you want in that F Series right so I should be less than equal to whatever the number of terms you want and I ++ here what we will do we do to find out next term like next term equal to x + y addition of previous two so better to take here first a variable next term next term is equal to x + y and then after that after that see here the previous it was B but now it becomes a and the previous the next term now it becomes B right so this logic you have to apply so now a is equal to B and B is equal to whatever the next term right and yeah obviously you have to print so here first let's print C out whatever the first term like X okay let's put one space here sorry it's not a and b it's X and Y right here x is equal to Y and rather than b here we have y y is equal to next term I hope you got this right and we are not returning anything so you can just leave this or you can just write down here simple return okay so I hope you got this let's turn this and I'll show you enter the number of terms you want five so 0 1 1 2 3 you this again run this and suppose 10 so this is up to 10 F Series right see if you're not getting this logic it's I guess simple one you'll easily get it while writing this one but still if you're not getting pause the video write down this program or this logic you know on a piece of paper and dry run this dry run this with your hand right like this is the variable in memory this this would be updated this for Loop and all dry than this and definitely you will get it it's a simple one right so next is let's find out prime number between whatever the number you will give I hope you know the logic of finding out prime number right so let's I want like in main let's give two numbers A and B between these two numbers suppose number is one and 50 a is 1 B is 50 so between these two numbers whatever the prime number those I want to find out all the prime numbers right so obviously Loop would be from A to B so in I is = to a to I less than equal to B and I ++ right for all the numbers if that number is prime number then we simply print that number so to find out Prime we just suppose Define a function is prime or prime any this type of function so is prime whatever the number like whatever I because I would be suppose A and B is 1 and 50 here suppose I have a is equal to 1 and B is equal to 50 so I would be from 1 to 50 so we check for all the numbers that number is prime or not if this is prime that this says like you can say true we simply print I that's it so now let's define this is prime I and suppose this will return true or false if the number is prime it suppose the function will return true if the number is not prime it will return false right so return type should be bo bu is prime whatever the number you pass here suppose a let's take a variable a and now how to find out number is prime or note if the number is divisible by one and it's self then that is prime otherwise not like 1 2 3 7 5 9 11 13 17 19 these are prime numbers these are divisible only with itself or one right so how to find out suppose the number is 10 one way is divide this with we know every number is divisible by two so let's start with two divide this with 2 then 3 then 4 5 6 7 8 9 up to 9 or up to 10 we know the number is divisible by itself also right if you find any other between this 2 to 9 which can divide this 10 means it is not prime number right but if suppose number is 50 so you have to divide till 2 3 4 5 up to 49 and if the number is suppose 500 so you have to do that same process the division step you have to check from 2 to 449 up to 500 suppose number is 500 that is very lengthy thing what we can do is we can just check suppose 2 3 4 5 we can just check till n by 2 N is suppose here n is 10 you want to find out this n is prime or not so till n by2 we check till 5 right because 10 would not be divisible by 6 7 8 9 we know suppose number is 50 we check only from 22 and by2 till 25 because we know this would not be divisible by 26 definitely after n by2 that number would not be divisible by any number because n by2 here is 26 if you do 26 into 2 like 26 2 are it's 52 so that would be more right so it's not like that you have to check till that number just check just run the loop till n by2 and yeah the time complexity would be less right or one more efficient solution is you can check till square root of that and that is also possible but we just write down that uh logic here till n by2 that square root you uh you just try out right we'll check from 2 to uh uh the loop will run from 2 to n by2 right 2 to I should be less than equal to whatever the number here we have like a / by 2 and i++ okay if that number a is completely divisible like modulo I is equal to equal to0 then it will return false right if this is divisible by any of these two from 2 to n by two definitely that would not be a prime number so it will return false okay and after that otherwise return true after completing this whole Loop if this condition would not hit then it will return true that would be a prime number so in main for successful completion just return zero and let's run this and see what output you will get a and b suppose 1 to 10 1 2 3 5 7 let's run this again and see from 11 to 20 11 13 17 19 yes you're getting right let's run this again and 1 1250 1 2 3 5 7 11 13 and up to 15 47 right so I hope you got this so I hope you got these exercises if you didn't get this it's okay just pause the video write down all these exercises on a piece of paper and write on these These are easy one right in the next video we'll see that Pascal triangle because I got many comments regarding that like write a program to print Pascal triangle so we'll see that thing in next video right so now I'll see you in the next then byebye take care