so in the series of running c program we are discussing dynamic memory allocation in c in the last video we have discussed what is dynamic memory allocation or you can say basics of dma what is dynamic memory location how dma is different from static memory allocation that we have discussed in previous video and in that video i have told you there are three functions which we use to allocate memory dynamically yellow malloc and relo and one function to del locate memory that is free function right so all these functions in detail will discuss one by one in this video we will talk about malloc function how to dynamically allocate memory using malloc function every single detail about this function we will discuss in this video with the help of a proper program right practically also i'll show you on my laptop like how to use this function in your program how the memory would be located what is the syntax of using this malloc function and everything about this function right but before that just not tell you one thing if you are preparing for gay 23 and 2024 example will be preparing for this exam then an academy is going to start new batches from 9th of march in these batches their top educator will be covering all the subjects of cs and it for your gate preparation and in this course you will get preparation strategy tips and tricks practice questions numericals along with detailed explanation of all the concepts and the course would be covered in both hindi and english and notes would be given to you in english only plus separate doubt clearing session would also be conducted so you can get all your doubt cleared in in those sessions but this is paid subscription you will get complete and structured course so you can use my code jkl 10 to get 10 discount on your paid subscription one more great offer is there for you if you take 24 month gate and esc plus subscription you will get extra four months free on it just to help in your gate and esc preparation means you are supposed to pay for 24 months and you will get extra four months right the price detail you can see on my screen and if you take 12 month of gate and esc plus subscription you will get extra three months free on it just you know to help you in your preparation and the software is valid till 10th of march and if you use my code jkl10 you will get extra 10 off on these reduced prices so you can see the price detail on the screen so all the relevant links and details i'll put in the description box of this video if you are interested you can go and check out now let's see how to dynamically allocate memory using malloc function first thing mallow means the full form you can say it's memory allocation right and generally we use this function to allocate memory to structures structures we have discussed in the previous videos right so basically we used to locate memory for structures the this function generally we use and for arrays generally we used catalog function but it's okay you can use for arrays you can uh you know use malloc also it's not like that only structures you can use mellow right but generally we use for structure malloc function y so that also will discuss see now malloc means memory allocation so what will happen the general syntax of writing malloc function is old you are supposed to write mellow and one argument only the size suppose i am here i am writing 8 it means 8 bytes it will allocate from where from heat that i have told you in previous video from heap section the memory would be allocated dynamically not from stacks and ship from heap section right so it will allocate or it will reserve one complete block from the heap section of how many bytes eight bytes right and plus one more thing it will do it will return a pointer or you can say it will return address base address of this block suppose base address is 2000 or you can say address of the first byte 2000 the next byte address is 2 0 0 1 then like this so it will return the address of the first byte or you can see the base address that is 2000 it will return this thing right so obviously you are supposed to store this address right and this is address so you are supposed to take a pointer also right that is why to allocate memory dynamically you always you are supposed to use pointers without pointers you cannot do this thing so this is one great application of pointer right to dynamically allocate memory we use pointer right so now obviously this also will discuss now what we'll write the general syntax of this malloc function is what mellow and here we write the size underscore t and size and the return is return it will return what address right so return type would also be a pointer but which type of pointer it is void pointer void s trick the return type of this is void string like this you will write void pointer we have discussed in previous videos its like generic pointer right so now size t means it's nothing but unsigned in either you can take 0 or positive value not negative value right here you cannot take negative value memory cannot be negative right so size you're supposed to take either zero or positive value only right now why it will return void pointer void generic pointer right so why it will return this void pointer see i am saying that i want eight byte of block right so my lock will reserve a memory section memory segment from heat of eight by but right now there is no idea that which type of value i will store here it may be integer value float value character or anything right so we cannot so malloc does not know which type of values you want to store here so that is why it return void pointer generic pointer now according to your requirement which type of value you want to store you can type cast this word pointer you can type cast it suppose i want to store integer value here so you can type cast this pointer into integer pointer if you want to store float value you can type cast it into float also that is why it malloc returns void pointer because it doesn't have any idea which type of value you will store the in this reserved memory segment right that's why dennis richie team did this like return only void pointer so all type of value you can store here you can type because we have one more fund of typecasting so you can type cast and you can store it suppose it is fixed that malloc will return in type of pointer so always you can store in this memory integer value not float value or any other kind of value right that's why i hope now you go to y the return type of this is void pointer fine if you have any no doubt you can ask me in comment box right next is it is what unsigned it okay now if we write here 20 so 20 byte block would be allocated but generally we don't write here this fixed well which operator will use sizeof operator so how we will write this thing we will write malloc and size of in bracket suppose i want to take int i have taken end pointer in star ptr means i want to store integer value here right so here i will take size of int sizeoffend means in some machine integer take 4 bytes in some machine it is take 2 bytes that's why it is one of the reason that we cannot directly write here 20 right or maybe for suppose i want to store here 3 integer right so you will write here 3 into sizeofint means 3 into 4 that is 12 bytes would be allocated to you so maybe you will say can i write here malloc 12 it will allocate you 12 byte right no it's not a good practice why so because in some machine integer take it depends on compiler to compiler 4 bytes in some it takes 2 byte maybe in my machine it is taking 4 byte maybe you are using in your pc it is taking two byte so you cannot fix you know uh write this you cannot fix it that let me just you know i i'm going to show three integer so 12 byte no if in your machine indicator taking 2 byte then you will need only 6 byte memory so why you will reserve a space of 12 byte right that is wastage of memory and to remove this drawback wastage of memory we use dynamic memory allocation so we cannot waste memory memory is very crucial resource that is why we use here sizeof and in let just the compiler decide what is the size of integer why we should take this headache of writing this this you know fixed size right so i hope this is clear to you why we write sizeof operator i hope this is clear to you that why mellow return type is void pointer right and i hope the syntax is also clear to you fine now one more point is how to type cast suppose here i want to store integer value and it will return void pointer right it is returning this address 3 into sizeofint means it will now reserve 12 byte space right and it is going to return the base address suppose base address is 2000 fine for the first integer then we will store the second integer then third integer but it is it is going to return this in the form of void pointer so we are supposed to type cast it into integer pointer right because we are storing integer value so how to type cast is before this just write int asterisk and break it so now whatever the address it will return just store it into a pointer ptr this is the syntax i hope the syntax is clear to you and semicolon right in star ptr means this point is going to store address of a variable whose data type is integer right i hope this is clear to you so now this we have typecasted it into int pointer and that address we are going to store in this in type of pointer right and one more point about malloc is what the memory if you will not initialize these integer this byte then by default it would be initialized with some garbage value here also we'll have some garbage value some garbage value some garbage value if without initializing these integer if you will print these values then it will give you some garbage value maybe some minus value or any value garbage value it will give right next point about mellow function is what if the smell of is not able to allocate memory from heap suppose memory is of n byte and you want to uh you know allocate a memory n plus one byte so obviously the memory would not be allocated to you so in case of failure it will return null pointer and on success it will return the base address or you can say the address of the first byte of that that preserved block it will reserve a complete block of these bytes how many bytes you want for those bytes it will reserve a complete block so the address of the first byte of that block it will return with the base address it will return and on failure it will return null right so in your program also after allocating this we will check if this ptr is equal to is equal to null so simply you will write printf memory you know or you can say malloc is not able to allocate a memory or memory allocation fail these type of errors you can print and that's it else you can do whatever you want to do right and after your you know task is done just use free function to free the allocated mandate right free and the name of that pointer that is ptr we are taking so btr and semicolon that's it right now let me just write down a simple program so this is the simple program i just want to ask from the user some values and i just want to print those values right so i've taken one pointer integer pointer and variable and i variable will ask from the user enter total number of total number of values so in n i'm going to store that thing so now we'll store suppose user enter like enter total number of values and value is at first time n value is 3 and that is we obviously we want to store integer values because we are taking int pointer so how many bytes would be allocated and 3 into 4 that is 2l so in simply mallow will write n into size of in that's it if user is entering an n value is equal to five that i want to store five values simply here we will do this malloc will do five into four that is 20 byte it would be located according to your need dynamically memory would be allocated and we are converting it type casting it into end and then in point time into store so now for enter values just take a for loop from 0 to n using pointer how you can access see with this pointer only you can access that memory dynamic dynamically located memory right so using pointer only we will access that memory and we will store there the values i am not using here address of operator y address of means where we need to tell the scan a function the address where you want to store but pointer itself store address of that location so no need to write down here address of operator right suppose here one block of memory has been allocated from this is suppose heap this is my heap and n value user has entered n value is 3 so how many bytes would be allocated a block of 12 bytes 3 into 4 right and suppose base address is 2000 so it will return 2000 that would be store in pointer but this pointer is what this pointer is what it would be in stack memory this is dynamically allocated memory but this pointer this is what this n i this pointer these are what static memory location so these variables will take memory from the stack frame stack frame of main so here we have this is ptr and it is going to store address of 2000 so it is going to point here now so using this pointer we can access this thing right now ptr plus ii value is 0 means 2000 plus plus 0 into 4 i hope you know how to do arithmetic with pointers if you don't know we have already uploaded a video on this thing you can check out the c programming playlist right now at 2000 only we are going to store the value suppose user has entered four so that would be stored here right now next i value becomes one so one into four so next address would be two zero zero four two zero zero four suppose next value entered is five i value becomes 2 now 2 into 4 that is 8 2 0 0 8 now next value would be stored at 2 0 0 8 that is suppose 10 right now i value becomes first 0 then 1 then 2 now becomes 3 is 3 less than 3 n values 3 no so out of the loop and here so 3 value we have stored and using pointer only we can access these values same for loop from 0 to n 0 1 2 right once it becomes 3 it will exit till then it is going to print s trig we are using y so this is indirection operator it will give value at this address so first of all pointer is in pointer we have 2000 plus i value at first is 0 so strict 2000 so it will print value at 2 000 that is 4 it will print then i becomes 1 then 2 000 plus 1 into 4 that is 2 0 0 4 strict asterisk 2004 value at 2004 is 5 so it will print 5 then 10 right this is very simple program i am using mellow for just entering an area of 3 integer generally we use it with structures so it's your assignment you are supposed to take a structure maybe a structure of you know student or employ anything you can take right and then there you use mellow if you are not okay with this if you are finding any problem in that program you can tell me in comment box we can i know i can upload a separate video where we will take an example of structure how to use malloc in structure right so now i hope this is clear to you let me just show you practical of this thing so let me just create a new file here i am writing malloc dot c only right and one more point about this is what all these functions four functions for dynamic memory location and da location these are defined in stdlib dot h so you are supposed to include this library also if you want to use these function in your program otherwise they will it will give error right i am taking end n then one variable i and one is ptr right enter total number of values you want to print you can something you can write something like this and percentage d address of n right now let me just how to write down mallow this is what type casting we are going to store integer value just write down malloc then n into of operator and size of in because i want to store interval right now memory has been allocated to you now from the user we will ask enter the values right for better formatting let me just write down slash in here and just a for loop i is equal to 0 i less than n and i plus plus right and in this we'll use a scanf scanf percentage d and what using pointer we can access these values so ptr plus i right and if you want to print these values entered values then one more for loop and here you will write down the entered values are right one more for loop and rather than printf sorry scanf we will use printf percentage d and here we will use strict indirection operator because that's why we can use value at this address right and after this we will use free we are going to free this memory also this is your responsibility right you have to free this memory explicitly using this free function fine now let me just run this and show you the output see enter total number of values so i am going to enter three values so enter the values one two three so the entered values are one two three for better formatting you can just put here a slash t tab that is also fine but whatever we are we want that program whatever the expected output it is giving you that output right so why this see now next time if you will enter next time if you will enter i like enter the values and next time the user want five values so that is also fine for five values memory would be allocated right one two three four five one two three four five right so it's like how many values you want to enter at the runtime you will tell and that only memory allocated to you using dynamically statically if you will use then you can you will do what will take an array like i am taking in array and let's take maximum size of array let's take 30 maybe you will take 5 for 10 or 15 or 17 or 25 let's take maximum generally we take 50 or 30 right now suppose user enter only five value so remaining the block of memory which has been reserved for you allocated to you because it is static memory allocation 13 to 4 that is 120 bytes has been allocated to you so remaining bytes you are using only memory of 4 5 integer 5 into 4 that is 20 bytes you are using the remaining bytes are unnecessary wastage of memory right that is why rather than using this static memory location better to use this pointer concept or a point to concept means dynamic memory allocation right it's same like if uh let's take a real life example if you are you know in a hostel so for having your meal i mean your lunch or dinner you go to mess right and if sometimes it happens like you don't go to mess and you ask your friend to you know bring you some chapatis but the better option is i hope you are able to relate this real life example with this uh you know memory of like dynamic memory and starting from your location right if you have any better reallife example of this thing you can write down that thing in comment box and the best example help pin right i'll pin that comment so that everyone and other student can also get help from your example right so i think that's it for this video now so now i guess everything about malloc is clear to you guys like you don't need to memorize the syntax of malloc will you you'll write here in star or malloc and this type of thing no now i guess you have you know the logic behind everything you have written here right so you can use malloc now in your program fine so in the next video you will see callout function with the help of a program so i'll see in the next video till then bye take care