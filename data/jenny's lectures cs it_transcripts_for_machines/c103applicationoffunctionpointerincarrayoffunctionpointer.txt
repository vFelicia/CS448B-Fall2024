so in the series of learning c programming we are discussing function pointers in the previous video we have discussed callback function that is one application of function pointer in this video we will discuss one more application and what is that the program you use you write with switch case statement the same program you can write with function pointer but why we will use function pointer to write that program because if you use function pointer to write down the same program then you will have to write down less code right so we'll see practically i'll write down one program using switch case as well as using function pointer then you will get it better and we will run that code also like what output you are getting fine but before that i just want to tell you one thing if you are preparing for gate exam or will be preparing for gate exam then an academy is conducting a combat it's like india's largest weekly competition for gate and esa's parents here you can compete with thousands of learners from all over india and you stand a chance to win up to 100 scholarship so 20 question you will get under the time time limit would be 60 minutes and the questions are very challenging and original gate questions curated by the best you know gate and esc educators at an academy so better to take it live to compete with the best and you can measure your progress with the help of personalized scoring and ranking you can see your ranking against all the others from all over india with all india live lead report that will be updated after every question and after every contest a detailed video solutions will be given to you by their experts so that you can identify your weak areas and you can improve yourselves and you can get it right next time and this is free you can take it for free just how to enroll the enrollment link i'll put in the description box of this video you just go to that link scroll down pick the right test for you and just click enroll and use my code jkl10 to unlock this comment and if you will go for any paid subscription plan for 12 months or above then here their special price week is going on that plan you will get at 10 discounted rate and if you will use my course jkl10 you will get extra 10 percent on that discounted rate you can see the detail over here so if you are interested you can go for it the link i'll put in the description box of this video so now let's see one more application of function pointer see one example i am taking simple example i am going to take suppose we have we want to design a calculator and we have four function one is add subtract multiply and divide right these four functions we have now i want that according to the user choice when user will enter suppose i say that press 0 for addition 1 4 subtraction 2 4 this multiplication and 3 4 division so according to the user choice we will call these functions and that operation would be performed how you will write down this i know program your first answer would be what switch case statement because that is exactly we do when user want to enter a choice and you have to select according to the user choice what you have to you know execute what you have to run then simply use switch case statement right i hope you can write down that this program with switch case that is very easy i am not going to write down that program here with switch case but yeah when we will run i'll show you that program right so rather than switch case statement we will run that this code using function pointer also right because obviously we know function pointer is what will contain address of any function so address of this function function pointer can contain this is also function this is also function so now for this what we have to take obviously we have four function pointer or rather than i say rather than taking four function pointer we can take array of function pointer that's it so in this video you will also come to know how to you know take area of function pointers so we have four you know ah these function let me write down simple code for these here i'm writing void add and a and b right and in the definition part i am just writing printf percentage d a plus b right so i guess these are four function and this is definition of these functions in a program now in main what i'm taking i am taking one choice variable and two variable intent a and b so from the user i'll ask we'll just print 0 for addition see 0 for edition 1 for this 2 for this and 3 for this right i'm not writing here you just have to write down in a program and i just ask from the user enter choice and here also only i am writing scanf percentage d and choice now we will ask from the user enter values of a and b right i hope you are getting whatever i am writing here so now see choice we have you know user will enter an a and b value user will enter now we have to take area of function pointer also right so here only here only i am declaring here only i am declaring suppose after after this line i'll declare here we will write what what you will write here function pointer means the return type of these functions is word so void and we will take array of function pointer obviously so function pointer how you declare asterisk fptr something like this and here we write what you know the data type of these argument int and in right and here whatever address you want to store that you can write but here we have four function so what address you need to store obviously address of all the function right and according to the choice we will execute the pointer will call either this this or this or this fine so how to take arrow function pointer here you will write suppose i am taking size is 10 and bracket and here we will take this this is what area of function pointers and those functions will take two argument of integer type and return nothing right so this thing you have to put in brackets so now here how to initialize it simply write down name of the function add subtract multiplication and division that's it so now we have array of function pointer array means uh some it will have something like this we will have something like this like this we have fptr array 0 1 2 3 4 up to 9 because the size i have taken 10 so these are function pointers so now at 0th place which address would be stored address of addition function this is pointing to here at zeroth place at one index address of sub at second index address of multiplication and a third address of division right and these pointers may we are having some garbage value we do not know we have initialized only 4 up to 4 0 to 3 now how to call this how you are going to call this c f p t r or you can say s trig f p tr or simply f pti is also fine or i'll say asterisk fptr and here according to the choice we want to call the function and the choice we are going to store in which variable ch we have taken one variable ch so simply will write ch here and in bracket we are going to pass the arguments which arguments the values we are entering a and b values a comma b right and this this would be in bracket this something like this and semicolon here we are calling the functions using function pointer that's it only one line you have to write and if you use switch case then you have to write switch then four cases also and if you want to add any extra function modulo function or one more function according to that you have to write some cases four cases five cases six cases or seven cases so code would be lengthy but here you just have to write down a simple line that's it this line will replace the complete switch case code so i hope you are getting why i was saying that when you use function pointer then you have to write down less code right now see whenever the program will run from the main function we have variable ch a and b and function pointer array something like this and address of this ad is here suppose address of add is 100 suppose we don't know address of this this function right address of this function starting address base address is suppose 146 for this suppose 200 for this suppose 300 right so now this this is pointing to this function this first is pointing to subtraction the second is pointing to multiplication and this third is pointing to this division now user will enter the choice suppose user enters 0 right and now it will ask enter a and b a and b value i'm entering 2 and 3. now next line is calling so now strict fbtr at the place ch we have zero so now first of all this would be d referenced function pointer zero at zeroth index what value we have hundred hundred means we are going to strict means we are going to dereference it so the function the the the control will first of all we are going to dereference the code now the control is here and now we are passing the argument a and b a and b is value 2 and 3 so now we are passing 2 and 3 so what it will print 5. this time this ad would be called using this function pointer next time if you enter the choice suppose i'm entering choice 3 now here we have 3 so now fbtr 3 here index three we have address 300 that that is address of division because this is pointing to division so we are going to first of all dereference means control is here now and now we are passing the argument a and b and we suppose i am passing 4 and 2 so what well you will get 2 so this is how using function pointer array of function pointer actually we can access these functions according to the user's choice at runtime user will you know enter the choice like i want to run addition uh function or multiplication function or subtraction or division and according to that just pass the choice and we can call these functions that's it at compile time you know we don't know which function is going to be called at runtime user will enter the choice and then only this function would be called any of these functions i hope you are getting my point this is one more application of function pointer obviously this is very simple right you can write down some complicated code also using a function pointer and this is how i guess you know how to declare array of function pointer this is array of function pointer right so now let us run this code and see what output you are getting see this is a program this uh we i have i know defined four function add subtraction multiplication and division here you can also write return type int and rather than printf you can uh write down return a plus b return a minus b that is also fine and while you are calling you can take another variable like any variable you know result or anything and you can store that result into that variable and you can print that in main function it's up to you right so four function we have and in main i'm just taking i'm just asking you know enter the choice 0 for addition one for subtraction something like this and two numbers a and b and using switch case i'm calling these functions case 1 in case sorry not case 1 in case a 0 1 and 2 and 3 because you can see i have here i have written 0 for addition so case zero and that there we will call addition right so let me run this and see what output you are getting and one is default if you enter in choice rather than zero one two three it will print enter valid choice right so let me just run this and see what output you are getting see here it is asking enter choice so i am entering 1 now it will ask enter 2 number i am entering 5 and 1 so it is printing subtraction is 4 because choice 1 means we are calling subtraction function means it will go to the case 1 that is it will call subtraction and it will print the subtraction of these so this is how you can do with switch case but if you want to replace this switch case with the function pointer then what you will write here we are going to take one fptr arrow function pointer i am taking size 10 and here simply write argument data type intent end you can take float and float also better to take float and float right means the argument the data type of these argument a and b float right because division would be in float something like this you can take float and here i am initializing it with addresses so addresses first add just write down the name of the function and name of the function means it will pass the base address of that code that function code sub then multiplication and third is division that's it and rather than now switch case i am just commenting this out you just have to write down a simple line just call the function using function pointer based on the choice so how to call asterisk f p t r and here simply pass the choice the variable name and here pass the argument a comma b that's it so the complete switch case statement will be replaced with this simple line uh this line so i hope now you are getting rather than writing these five six line in switch case it's better to write down this one line so here you need to write down less code the code will be concise and very understandable you can read this code easily now let me run this and see you are getting the exact output or not so here yeah here you are getting some warning message why so because see here the return type of these functions are void right and but the return type of pointer we are taking in so that is why it is not giving any error it just you know giving any you know warning message so you need to take care of this thing program is running so let me just enter the choice 0 so it will ask to number 1 and 1 and it is printing addition is equal to 2. so now here better to write down the type of this function pointer same as the return type of the functions that is why right now let me just save it and run this see this time you're not getting any warning message right so now this time i'm entering the choice three enter two number four and two and division is two right and you can also uh you know write down some condition also if the choice is rather than 0 1 2 3 what it will print for that also you can you know like choices less than 0 or greater than 3 or other than 0 1 2 3 just print invalid choice otherwise call the function pointer something like this you can also write using if else if you want right so that's it for this video now so i think that's it about function pointers in the next video we'll see recursion in c so i'll see you in the next video till then bye take care