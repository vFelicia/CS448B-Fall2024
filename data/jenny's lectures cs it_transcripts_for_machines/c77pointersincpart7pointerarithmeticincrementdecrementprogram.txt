so in the series of learning programming in c we are discussing pointers in C so far we have discussed Basics about pointers double pointer as well as uh what kind of arithmetic operation you can perform on pointer we have done addition and subtraction right in this video we'll talk about how to perform increment and decrement on pointer this operation how you can perform increment means suppose p is pointer variable then p++ and decrement is p minus minus this is post increment post decrement plus plus p means preincrement and this is pre decrement this thing we will discuss with the help of proper program and I'll show you practical also so now let's see how you can perform increment and decrement on pointer first of all we'll discuss increment post increment and preincrement I hope the functioning of this increment and decrement operators are clear to you if not then I have uploaded a video you can watch out my C programming playlist the the link also I'll put in the description destion box of this video you can check out and first of all check out this video if you know the functioning of this increment and decrement operator then this video would be really you know very easy for you but if you don't know then many students I mean almost students get confused in this operation when we apply these operation with pointer then it's a little bit tricky right so first of all clear your concept of increment and decrement operator and then come to this video right here same I'm taking an array and here I'm taking one pointer s p right and I am initializing this pointer p is equal to a this is valid you don't need to write like address of a of zero a means this a is also it's like a constant pointer or a is containing the name of the array which is containing address of the base or you can say the Base address so P equal to a is valid but if you write down a is equal to P you think that a is also pointer because name of the the array act as a pointer to this array and P is also pointer so you can assign this value no this is not possible a is what constant pointer name of array is constant pointer to this array here in a you cannot you cannot assign anything or you cannot increase it like a A+ Plus or a minus minus you can't do anything you know this kind of thing with this array name yeah with pointer you can do this so this assignment is valid but this is not valid you can try it at your own right so here in memory half the S is to be declared so this is how you can say visual representation of the S A is also acting as a constant pointer a is containing name of AR is containing Base address like thousand and in P we have stored address like a whatever value of a so a is we have th so in P also we have thand so both A and P are pointing to this first element of this array right so now we can move this pointer P but we cannot move this a right this this is constant pointer this will always contain Base address we cannot change it right so now how to increment if you want to increment this P so suppose if you write p++ it means it means in another term if you want to write this you can also write P isal to p + 1 both are same this and this are same but this is not equal to p + 1 only p + 1 no this will not give any output it is equal to P equal to p + 1 because after doing p+ 1 obviously we have to assign we have to update value of P here we are not updating that value right so either you can do or you can do this so here we are having like this thing p++ it means now it means now p is pointing to what one p is we are moving P one location forward right ultimately we are adding one to P but one means what you have to add in P we have 1,000 in plus 1 into what is size of the data type you're using end that is four so 1,4 so now p is pointing to 104 p++ means it will Point next element again p++ it will Point next element right and now after that if you want to print here now if you want to print percentage D SRI p s p means Direction operator it is acting as IND Direction operator value at this address now in P we are having after doing p++ in P we are having 1 04 now p is pointing to this not to the first element so now value at p is two so it will give you two right now see better if I write something like this EST P ++ I have combined both the operation post increment and estri now what output you will get here see here at starting now we have th000 in so now see this is what post increment what is functioning of post increment first of all it will return the value and then do Plus+ means it will return the original value if post increment is there then it will increment so original value of p is what original value of p is what 1,000 so it will return first of all 1,000 and now it will increment P by 1 we are incrementing pointer so it's not mean 1 1 it will mean 1 04 right now p is pointing to here now p is containing 1 04 and now p is pointing to this right but here it is going to return th000 only the previous value and now value at 1,000 is 3 so it will return three only output you will get three output you will get three but now p is pointing to here now after this statement if you print EST P it means now p is pointing to this now it will print two right I hope you got the difference and suppose if you write here some student think that if I write something like this then it will give it will first increment and it will give value two it first of all it will will evaluate p++ yeah obviously it will evaluate p++ first but what is function of p++ this is post first of all it will return the original value original value of p++ is what here p is what a that is th000 original value of p is th000 so it will return first of all th000 so here 1,000 would be there and now it will increment this so now it it is pointing to this but this operation this estri would be performed on thee previous value not the modified value now again EST th000 so it will give three only in the both the cases it will give three right I hope you got post increment functioning right now if I write here something like this estri Plus+ P now plus plus p is what preincrement preincrement what is function of preincrement first of all it will increase the value it will modify the value and then modified value would be returned so now plus plus P so it will increment it will increment the value of p in P at starting we have th000 it is pointing to this now increase this P increment means it will point to the next element so now in P we have 1 04 it is pointing to here it is not pointing to here right and now updated value is what 1 04 and now will return value at one4 that is two so this will give answer two same if you put it in bracket also that that would also give you same answer that is two right so I hope you got the difference between pre and post see here you can also uh know see here we have two operator like one is estri and one one is increment operator and both are having same precedence at same level both are right so associativity is right to left right to left right so from there we are going to move from right to left so first operator is what this increment operator so this would be evaluated first and after that estri would be evaluated right I hope you know how to evaluate the expression having operators you know operators precedence and associativity right now but see if I'm writing one line here now tell me what output you will get now what output you will get of this line two times I'm using a strict p ++ s p++ now here which would be evaluated first first of all this would be evaluated from right to left right so now first of all this p++ this is what post so original value of p is th000 value at th000 is 3 original value is th000 that would be returned and now P becomes p++ that is p is now pointing to one4 P is not pointing to here now this one p++ original value of p is now 104 that would be returned first and now P would be incremented so original value is 1 04 so whatever whatever the value at 1 04 that is two two would be return and now P becomes 8 now p is pointing to this one so you'll get two and three right I hope you got this one right now pre uh decrement and post decrement see if I write here s p minus minus same post decrement means first of all original value would be returned right now here the case is what p is equal to a means p is pointing to here now first of all the original value of P would be returned original value of p is th000 right so EST th000 now whatever value at th000 that would be returned that is 3 three would be returned and after this P minus minus now p is pointing to P should move position backward means 99 96 what we have here we don't know so now after that if you will print a St P it will return any garbage value right because it is moving out of this areay out of range of the array right so here we should take care of this thing suppose I'm writing here address of a of 4 address of a four or you can set address of a of 3 so now p is pointing to a of 3 that is in P we have 1 1 2 right now if you will print s p minus minus original value of p is 1 one2 that value would be printed that is zero would be printed and now p is pointing to here right and if you print this thing then also you'll get zero but if you print this thing estri minus P now this is pre decrement so now first of all pre decrement means value would be modified first that is p is here minus p means move backward one position so now p is pointing to here now 1 8 p is pointing to this one and now value at this address is 1 8 is what 67 so it would return 67 to you I hope you got the basic functioning of post and preincrement and decrement operator when we perform with pointer right and so now one question for you is minus P three times I want to print with pre decrement operator s minus p s minus p s minus p so before you know before compiling this on your laptop first of all dry run this and think what output you will get and after that you should run on your laptop and see you are getting same output or not right if you get same output it means you have got this concept if not then you have to do some practice on these type of questions so yeah this is little bit tricky and see maybe I can write something like this estri and estri P minus minus in that case what output you will get or you can say like EST P bracket Plus+ or you can say estri p++ or I must say EST p and here Plus+ this kind of thing you can also get right so what output you will get so this these questions are little bit tricky in this video just want to tell you like just want to get you familiar with the the the functioning of increment and decrement operator maybe we can take one more example one complicated problem on this kind of thing and I'll show you what output you are getting here and I can explain everything there so now first of all let me show you practically this thing whatever you have discussed in this video so now let me create a file first of all suppose pointer increment decrement do c right and U header file Main and here I'm taking one array uh I'm going to initialize it here like same I'm same input I'm taking three two so you'll get it better 67 and 0 and 56 right we're taking a pointer and P is equal to a I'm initializing right now printer suppose I want to print percentage d and uh first of all we we will be printing p++ right so see what output you should get you'll get three right because it is post increment so original value would be returned and original value is that is address of a base address of array address of the first element of this array so it is returning three right after that is it incrementing now if if you will print now if you will print print F percentage D and um must use slashing here here I'm printing a p so second value what you will get two see first is three next is two why because we have done p++ also although it's post increment but we have done increment one B+ 1 you can say right and if you do here like this in bracket also if you'll put this then also you'll get same result three and two see three and two right and and if I write here something like this comma again I'm writing estri P ++ so now see what output you will get two time I'm printing here so two time perc percentage D we have to use right now see 2 3 this one would give you first p++ would give you two and this second one would give you three because associativity is right to left these operators are having associativity right to left right so from the right side we are going to start so first of all this would be executed the second one star p++ so that would give three then we would execute this star p+ plus right so now it would give you two because we have already done p++ I hope you got why you are getting this and after this if you are printing P then you will get obviously you will get 67 two times you have incremented P right and if you do what pre uh increment plus plus P right one time only I'm printing Plus+ P see so now it is preincrement so first of all it would P would be incremented then then value would be printed so first of all P would be incremented that is p is now pointing to Second element of this array that is why it is printing two right and this p is also printing two right so now this is pre and here if you write like estri again Plus+ P now what you will get associativity is right to left so sorry we have to use here two time percentage D because I'm printing two values in this one right so see 267 right right to left so from right side we will move from this side so this would be executed first right so now it is preincrement so first of all increment P so now p is pointing to this element second element that is two so two would be printed first and now again this would be executed so again here plus plus P preincrement so first of all P would be incremented now p is pointing to the 67 this element and the value 67 would be printed and after that also this s p would also give 67 I hope you are getting this concept right now pre and post decrement C if we write here estri P minus minus then what output you will get it is post decrement so now what value it will print three see three has been printed first of all now P minus minus means you are going to move one position backward but already p is pointing to the first element of array if you move backward we don't know what is there at that location some garbage value would be printed so same some garbage value you are getting some garbage value the output of second print F starp right now here if I assign something like this this address of a of three now see what output you will get what is there at a of three now p is pointing to what third index at third index you are having 0 1 2 3 zero so first of all zero would be printed now P becomes minus minus minus means one element backward one element uh Beyond backward is what 67 so now next output you are getting 67 right now if I do here minus p then p pre decrement so first of all it would be decremented so it should print 67 67 both the cases and see it is printing 67 and 67 right so first of all it will be decremented decremented means now it is pointing to 67 that is a of two and that could be printed right and here if you write comma estri minus P again two time I'm printing here so now same associativity is right to left because these are having same precedence so associativity we need to check so first of all this would be executed whatever the right side right so now this is become 67 and now again this would be executed so again P would be decremented that is it is going to point out two and that value would be printed that is two and finally value is also two for this print it is also printing two I hope you getting this concept right if you are confused it's okay you know in starting it happens but you should practice more and more these type of questions then you'll be familiar with this thing right so now I guess that's it for this video so you can try out these combination and uh you can get what output you are getting and if you are not getting like how you are getting that output you can ask me in comment box I'll make a separate video on these type of questions right so I'll see you in the next video till then byebye take care