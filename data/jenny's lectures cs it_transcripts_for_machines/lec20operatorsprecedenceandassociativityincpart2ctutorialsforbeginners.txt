so in the series of learning c plus plus programming language in the previous video we have discussed operator precedence and associativity this video you can consider as second part of cooperative precedence and associativity we will discuss three or four you know examples especially on the operators increment and decrement operators generally students were confused in these kind of questions when they get you know in one expression they get more than one increment and decrement operator pre and post right how to solve those kind of questions right and also i'll tell you some important points some you can say hidden facts about operator precedence and associativity and how actually if you have an expression then how actually that expression would be evaluated behind the scene process we will see right and you will rarely find these kind of effects anywhere so this video is going to be really you know beneficial for you guys if you want to be a good programmer you want to learn c plus plus deeply if you are just learning this course if you are just watching this video just you know to pass the semester then maybe you will not find this so much helpful but if you want some deep down information or deep down facts or knowledge on c plus language and definitely this video is for you guys right so you see with the help of one or two examples right we'll write on that code that program right we'll see the output here then we'll run that same code on my laptop and will see the output maybe you get different results also and why you get different results the reason behind that also we'll discuss in this video right now before that just want to tell you one thing say geeksforgeeks has come up with a fun filled event for you guys that you cannot miss out cold geek olympics all you have to do is you just go to the link in the description box of this video register for the event free of cost and after resisting you can get access to the calendar where you can see all the upcoming events and activities and see they have something new every day from you know 1st to 31st of july on their website so do check out their website every day where you can get you know a chance to win some rewards and it will be a great learning experience for you guys so let me just brief you on an event through geek olympics see there are so many contests that happens every now and then for the experienced quarters but what about those who have just started their coding journey well don't worry geeks4geeks has come up with such an opportunity for beginners just to sharpen their skills and get rewarded for the same there would be eight beginner level dsa questions for you guys and the time limit for this challenge would be 60 minutes the date is 16th of july from 6 pm to 7 p.m and the language supported for these dsa problems are c plus plus java and python plus one more thing there is five percent penalty for each wrong submission so better to go through that compile and test against their sample test cases before submission before submission of your code and all the submission will go through a plagiarism detector any case of code plagiarism will reduce the marks to zero of the concerned participant so all the relevant links and details you will find in the description box of this video you can go and check out now let's see see i have told you what is operator precedence and associativity in the precipitation in the previous video this is the chart where you can see the precedence of operators associativity of operators right now let me just write down one question for you guys okay this is your question we have x is equal to 3 and y is equal to x plus plus plus plus plus x so this is what post increment this is pre increment and we have this plus arithmetic plus like binary plus operator right so in this expression we have how many operators 1 2 3 and four now check the precedence see how you will solve this thing obviously you will keep in mind that precedence and associativity chart right according to the rule so now see uh post fix these postfix increment and decrement are having higher precedence than prefix right and then this and this so first of all this would be solved so what is the answer of this x plus plus original value of x would be used here and after that the value would be incremented right i hope you know the working of these operators that we have already discussed so now x would be 3 would be used in this expression 3 value and now x becomes 4 x plus plus after using the value it would be incremented now pre prefix increment this would be executed prefix means now x value is 4 so first value would be incremented and that incremented value would be used in that expression so it becomes what 4 becomes 5 now plus operator would be executed because it is having higher percent present then then this equal to operator so 5 plus 3 is 8 and y becomes 8 and x becomes what 5 here x becomes 5. so this would be the answer x is 5 and y is 8 but see actually there is no concept of precedence and associativity while running the program this precedence and associativity in c plus plus is a concept as you can see it's a compile time concept only compile time concept but it is independent of the order of evaluation of the expression order of evaluation which is what a runtime concept now what is this order of evaluation in which order if a large expression is there in which order that expression would be evaluated that is completely dependent on the compiler this fact is very important completely dependent on the compiler maybe one expression give some result on your machine that same expression give another result on different machine if i run a suppose i am taking a program here i will run that maybe in my machine it is showing some different result and the same code you will run on your machine maybe that will you know give you some different result so this concept precedence and associativity is completely a compile time concept not a runtime concept it is independent of that order of evaluation right in which order the expression the sub expression or the you can say the you know those also the arguments of a function is to be executed right that is order of evaluation let's take one example if i write something like this a then plus b then plus c what would be evaluated first this because plus is having associativity left to right this then plus c right but now let's see this function goal this may be evaluated maybe in the last or first or in between a and b it terrible depends on the compiler at compiler at run time may be in your machine it would it would be evaluated at the last of this maybe in my machine it would be evaluated at the first before this right so it is completely dependent on the compiler on the runtime evaluation right so they have defined some undefined behavior especially in case of these operators increment and decrement operators see if i write something like this then this is this comes under the category of undefined behavior actually it is a bad code bad program it is not recommended to use more than one increment and decrement operators in one expression it is not allowed it will show some undefined behavior maybe in my machine it it gives some another result may be in your machine it gives someone another result plus using of these arithmetic operators with these increment and decrement operators post fixing prefix this is also this will also give some undefined behavior so it is not allowed you should avoid these kind of codes yeah this is allowed like y is equal to x plus plus one you can use more than one will lead to undefined behavior right this is undefined behavior if i write something like this x plus plus plus 2 this will also give some undefined behavior if i write this this is also this also comes in under the category of undefined behavior right so technically if someone asks who these kind of questions in one expression they have multiple plus plus minus minus operators technically the answer would be it will show undefined behavior no answer would be there but if you want to run like if at compile time you want to apply that precedence and associativity kind of thing into these expression then how you can evaluate this let's take a different example if i am taking this expression then this will also the answer would be it will show undefined behavior but if you want to execute this then if you want to apply that precedence and associative associativity kind of thing then how you can solve this if you want to print then c out x and y and what it will give here we have this is postfix and this is prefix expression so postfix are having higher precedence and associativity is left to right so first of all this would be executed x plus plus means original value 1 would be used then x becomes 2 then y plus plus 2 would be used after that y becomes 3 now this value sorry this expression prefix but prefix are having right to left associativity so means this kind of thing so this would be executed first plus plus y now y is 3 so plus plus pre means first of all this would be incremented and incremented value used 4 right then plus plus x it becomes 3 means 3 incremented first and that would be used right now x and y now which value would be used for x and y if i excess like x is 3 and y is 4 then what would be the output here i think 17 right and if i used like x after if we move something like this right token wise then after x plus plus y plus plus x value becomes 2 so here we use 2 and y becomes 3 so we use 3 then these will be executed now in this case value would be 50 so it will give like x is equal to 3 y is equal to 4 and sorry x is equal to this would be z right x y is equal to 4 z is equal to 15 or maybe 17 so that's why we don't know where you know at which point of time this x value would be used in this expression right we can't say same we are using x plus plus and x we are modifying this value same we are accessing the value again here so maybe original value would be used or after modification value would be accessed here because we can't say it depends on the compiler the order of evaluation of this expression right that's why we show we say that it will show some undefined behavior right for the same value we are modifying that value we are accessing that value again so which value would be used here we can't say maybe the same expression one time will give 17 if same expression if i run second time it will give 15 we can't say right so technically it is a bad code not allowed it will show undefined behavior right same thing let us take a second example or let me just show you that example on my laptop then you will get it better so the important point what i you know want to tell you in this video through this video is the precedence and associativity are just a compile time concept it is not related to the order of actual evaluation while run time so see this is the code we have discussed x 3 y then x plus plus plus plus plus x and x and y we were printing so let's run this and show you what output you will get here see x 5 and y is equal to 8 right now let me just show you one more example this kind of example c let me just comment this out and we will discuss one see y is equal to 3 z is equal to in bracket i am using y minus minus plus in bracket again i am using y is equal to 10 what would be the output of this expression see in brackets are having highest precedence so those would be evaluated first but two brackets means associativity associativity is left to right right now first of all this expression would be evaluated like y minus minus y minus minus means it is post decrement so original value of y would be used and then it would be decremented original value is 3 so 3 would be used here 3 plus now in bracket we have y equal to 10 assignment operator means what right hand side value would be assigned to y so y becomes 10 so 3 plus 10 now the result would be 13. so let me just run this and show you the result see okay good we are getting 13. same if uh you write here y plus plus rather than minus minus there will be no difference because it is again post so original value would be used that is 3 and after that y becomes 4 and for the next y is 10 so 10 becomes 3 again it will give you 13. so it is giving you 13 but see the twist is if i use minus minus y what value should be there in this expression the output you will say minus minus y means predecremented so it becomes 2 so 2 value would be used 2 then again for next bracket y is equal to 10. so 10 plus 2 it should be 12 right but the output is not 12 see it is 20. why it is 20 see one more rule about this pre increment and predecrement operator is what obviously the value would be modified first minus minus y means first the value would modified then it would be used in the expression but after the completion of that expression this point is important after the completion of that expression right means minus minus 5 becomes 2 but we cannot use 2 here it would not be used 2 because still in the expression we have plus y is equal to 10 still there is no semicolon so we cannot use this two value right you have to hold this yeah y becomes two but you have to hold you cannot use this two now plus we have second bracket y is equal to ten so y becomes 10 here right after that semicolon means end of the expression now minus minus y you use the value here but at the last y becomes 10 finally so that 10 value would be used here so now this output would be 20 see same if i use here plus plus y then also you will get same output 20 right if rather than this plus i am writing it into it is giving 100 10 and 10 100 right but maybe you will say y becomes 10 then plus plus y it should be what again 11 right plus plus y if after semicolon it is using the value then after semicolon at last y is 10 but then again plus plus y becomes 11. no again it would not be evaluated first time it would be evaluated then after semicolon whatever the value of y that would be used here right if minus minus y i write then also it will give same result like 100 10 and 10 right that's why we say like you know say on the same value on the y we are applying minus minus operator decrement operator plus we are using some arithmetic also in the same we are again why we are modifying the value y is equal to 10 that's why we say it shows some undefined behavior right so better to avoid these kind of expression single increment on decrement you should use like z is equal to minus minus y that is fine no arithmetic no more than one increment and decrement in the same expression no other operator with that on the same variable right now this is assignment for you guys one two three four five these five expressions you have to validate first of all you have to run this try run this whatever you are getting without running on your machine then running on your machine what they are getting you have to comment these answer right maybe now if every student will comment like on your machine what out they are getting and when you dry run what output you are getting two things right then we can compare like on different different machine maybe we are getting different different outputs so then you will get the order of evaluation it totally depends on pilot right in which order the compiler will execute the expression right compiler will not follow the precedence and associativity type of things there is no concept of we can say there is no concept of precedence and associativity in c plus one right it is just a compile time concept not a runtime concept right so i hope this is clear to you guys yeah we have some sequencing rules so you can visit this website cpp reference this is i think one of the best website to refer for c plus reference website right here you can see see what is order of evaluation the rules about precedence and associativity those facts which generally you know you don't know and your teacher also you know generally don't tell you these kind of effects so you must visit this website through this section what is order of evaluation what are the sequencing rule what is this evaluation of the expression the parts and everything then you will get it better right all the points about this this particular you know topic operator precedence and associativity so nice in the next video till then bye bye take care