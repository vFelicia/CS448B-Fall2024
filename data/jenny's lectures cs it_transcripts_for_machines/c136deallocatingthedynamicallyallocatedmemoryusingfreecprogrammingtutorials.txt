so in the series of running c programming we are discussing dynamic memory and location in c in the previous videos we have discussed all the three functions that has been used to locate memory dynamically those are malloc and real now one function is to deal locate memory to diallocate the dynamically allocated memory or to release that memory that is free function in c language the function is free so in this video we will talk about this function right so i am not going to talk about the you know on the surface detail like what is free function the syntax and i'll just show you a simple program no we'll deep down into the working of this function what actually you know this free function do freeing of memory or releasing of the memory what exactly this means what is behind the process what happens when you use free function in your program right what exactly that means right and after freeing the memory if you want to dereference the pointer if you want to access that memory again then what happens we will see all these things with the help of a program right i'll show you practical also this is so this video is going to be very very you know important for you guys fine now before that just want to tell you one thing if you guys are planning to prepare for gate 2023 and 2024 exam then an academy is coming up with coming up with a great opportunity for you guys an academy is conducting a scholarship test for gate and esc it is all india scholarship tests for all the gate 2023 and 2020 for exams the most important thing is you can take this test for free it is a live test and it would be conducted on 20 march at 11 am as it is all india live scholarship test so you will compete live with learners from all over the country and you also get a chance to have all india rank and the slaves for this test is simple general aptitude and engineering mathematics so here if you attempt it live you can get a chance to win up to 100 percent scholarship so now what is the format of this test here you will get 50 question carrying one mark each the syllabus is general aptitude and engineering mathematics right and there is no negative marking and the duration of the test is 60 minutes so now how can you enroll for this test see the enrollment link or the registration link i'll put in the description box of this video you just go to that link click to that link and this type of screen will be opened in front of you and that's it here you just enter you can enroll with your mobile number also or your mail id also you can enter your mobile number and just you can click enroll for free so the relevant links and details i'll put in the description box of this video if you are interested you can go and check out now let's see what is free function so what free function do it will release release the dynamically allocated memory and how you can allocate a memory dynamically using mellow core maybe you are using real so that memory it is going to release right now it is builtin function defined in stdlib now see one question is what how to use this function let's see the syntax first you just write down this free and the pointer previously you have a located memory dynamically obviously that using mellow core callo and whatever the address that malloc or galock will return you're going to store that address into a pointer so just pass that pointer here and the return type of this is void only it is not going to return anything void right so if pointer is ptr suppose i have written this thing int asterisk malloc and 2 into sizeofint for two in teaser i have a located memory dynamically now i want to free this memory and i have taken int star ptr i'm going to store this thing in ptr so just how to use after doing something on this you know after doing some computational calculation on these integers just free the memory free and just pass the pointer name ptr that's it now what does this exactly means first thing see so data is suppose from the heap section this is heap section and this is the memory two entities are i have stored ten and two right i have done something with these integers right now the base address in ptr suppose base address is thousand it will return the address of the first byte so that ptr we are going to store right now once you do free ptr means you have freed this memory you have released this dynamically allocated memory and back to heat this memory now is back to heap section right back to heap section right so now you have released this memory but still still in ptr we have 1000 right right this memory can be reused right now what does that mean another if after free i'm using another malloc or catalog function and i'm going to you know enter like now five into size of it for five integer so maybe this memory below can be reused this is for two then one two three four three right this is how dynamically you can allocate and reallocate memory now the question is will this free function erase the previous data the simple and straightforward answer is no it is not going to erase the previous data here so now second question is can you access after frame can you access the data again if after freeing this memory if i want to print like printf percentage d and strict ptr plus 1 means 0 index 1 index so will it print 2 or not after freeing this so answer is simple answer is it will show undefined behavior undefined behavior means first thing it is not allowed to use the pointer after you have freed that pointer right because maybe you can get two hair maybe you can get garbage value maybe your program can crash or anything can happen so that is why i am saying it will show undefined behavior maybe you will get value too and you will say that after freeing also i am able to access the value so how it is possible yes it is possible it comes under the case of undefined behavior maybe you can get zero or the same value or any garbage value minus value anything can happen right but it is not allowed it is not safe to use to dereference the pointer after you have freed that pointer it's not safe right because now this pointer is having indeterminate value before calling free function yeah it is having thousand it is pointing to this after calling it is still containing thousand but this object this object whatever it is pointing this object this memory now you have released this memory this memory can be reused this memory is now back to heap section although the data is still there free is not responsible to erase the data right but it is not allowed you can you can you know access this at your own risk maybe sometimes it will give you correct value maybe sometimes it will give you wrong value or maybe after this again i have used malloc and i have overwritten this value like i have written here 20 and you are still accessing this and maybe you think that it will give 2 but you have overwritten this value now this time it will give 20 or in in your calculation it will you know give you some wrong output or something like this right so these are some points this will actually happen when you free the pointer right now see as you have seen if you use static memory allocation like i am using here in my program like in a or into b so this is what static memory allocation from stack section the memory would be allocated like for a and b and it would be automatically you know freed or you know automatically released the memory would be automatically released once you exit from the program right in this thing in static memory location but in dynamic memory allocation from heap section the memory would not be released automatically this thing you need to take care you have to free the memory that's why we are using free function you have to free the memory right so it's your responsibility if you are not going to free the memory at some point of time the memory maybe memory would be exhausted right maybe your program will crash or your system will shut down with this type of behavior your system will show so always use free function after using or after you know using this concept of dynamic memory location in your program maybe if you don't know how to use free function in between the program in between the program also you can use free function it's not like that in in a program only in the you know at the end of the program you will use free function no within the same program two three four times you can use free function but for that thing you have to understand like how you can use three function what does that mean what output you will get after fleeing if you can't access this pointer now and these kind of thing right so it's your assignment for you guys like in a program you have to use free free function at least two times you have to write down a program this such type of program at least use the free function two times right after using this free ptr now ptr is still containing this address this thousand so this pointer is something like dangling pointer it is pointing to a known existing memory location thousand it is known existing now because you have released this memory this object it is still having the address of this object but it is you can say nonexisting memory known existing object that's why it is dangling if you dereference it it will definitely show some undefined behavior you cannot dereference it right so it's a you can say it's better not to dereference it you can dereference this pointer at your own risk now better after using free better to use better to do better to reinitialize this point that you can write down something like this simple thing is the simplest thing what you can do just assign ptr is equal to null so now in ptr we have null that's it right and if you again use free ptr once you're freed again you are using free so you it's like double free you are doing so double free it will show some you know be you know like code um error you can get or double free error you can get this type of error you can get you can practice this thing at your own right if are you after freeing if you want to access this ptr dereference this ptr maybe it will show segmentation fault error that is also possible so always use free function carefully right and always free the memory after using mellow calorie load after using a dma concept always free the memory right now let me show you a program on this free function so this is a program it's simple program i'm just allocating for three in teaser dynamically i'm locating memory using mellow just entering the value three values and just i'm printing the entered value it's very simple we have discussed this programming three times i guess in mellow catalog and real look also so i'm not going to write this thing again i'm just copying and pasting this thing right so now let me just first of all run this program and show you is it yeah no we are getting the same output or not say enter the values one two three so entered values are one to three right now let's see after entering the values here i'm using free pdf now after freeing the memory i want to print the values i want to access those values so now what type of output you will get after frame i am printing the values let's just remove this free from here right and yeah always it's a good practice to after using you know this mellow after this use just check if ptr is equal to is equal to null then printf memory not located just print this thing otherwise we haven't used you know we have this condition in the previous program so better to use this thing if because of something malloc is you know not able to allocate the memory in case of failure it will return null so better to check the pointer first after that write down whatever you want to do with the program right now we have freed the memory but still i'm dereferencing this pointer i want to access those values so let's see what output you will get here see enter the values one two three so you are getting the output first and you garbage value second ending rb's value but third value you are getting three right so let me just run this again and at this time i'm running four five six so any garbage value any garbage value and third value six so it is what undefined behavior you are for first two values you are getting any garbage value for third value you are getting right because this happens because you are accessing you are dereferencing the dangling pointer this pointer you have freed the memory but still you are accessing the value that was there at that memory location right so it is you can say undefined behavior of this monitor fine now i have told you that whenever you use dynamic memory allocation from heap section if you allocate the memory then that memory would not be automatically dear located you have to manually you have to use free function to deal with that memory right now let's see one more example of that thing one more program see let's take this function i am having a function here display function right and in that function what i'm using mellow function to allocate memory i'm entering the values right and after that this function is returning the pointer so this function is returning address so that is why what int star the type of this return type of this function is display function is in star so whatever it is returning the address i am storing that address i am accepting that that is in main function so here i am taking suppose one more point ptr1 right no no need of n here and obviously we are not so here we will just call which function display and this is going to return address so in ptr1 i am storing that address ptr1 is also a pointer fine now no free here now here in main i am printing the values the entered values are from i23 and here not no ptr you cannot use because that ptr is the scope of this pdrs within the display function so here we are using ptr one right ptr one plus i and after that we are freeing this ptr one right now see maybe you will say like in this function we are using this ptr we are allocating memory in this function and this ptr is we are going to return this ptr but the scope of those values whatever values you are entering the scope of those values is within within this function only right so this function will act as a this pointer will act as a dangling pointer outside this function outside this display function we are not able to retrieve the values outside this display function definitely the memory would be dl update and we are not able to access those values but that is not the case because it is dynamic memory allocation dynamically if you look at memory that memory would not be freed automatically that case happens only if you use static memory allocation that concept we have discussed in dangling pointers so now let me run this and show you what output you will get are you getting the exact values or not see enter the values i am entering values four five six and you are getting the values four five six right we are entering values in this function the returning pointer and we are we are not accessing the values from main function but still you are able to access those values so why this thing because when you use dma concept to allocate memory from heap section then that memory would not be deallocated automatically automatically thing happens only in static memory allocation right so you have to use free function to free this memory i hope this point is also clear to you with help of this program right so now i guess that's it for free function so now i guess we have covered all the concepts of c language if i'm left with any concept which is important then you can tell me in common comment box i'll try to make a video on that thing also so now i'll see you in the next video till then bye bye take care