hey everyone I hope you are safe and doing good so in the series of learning C++ programming language we are discussing arrays in C++ in the previous video we have seen what is need of array why you use array and what is an array how to declare an array how to initialize an array at compile time and at run time this thing we have seen right now the next thing in arrays are the memory representation of array elements and how to access array elements these things these two things we'll be discussing in this video right Theory plus practical also we'll see with the help of program I'll show you on my laptop right now before moving further let me just tell you one thing if you are preparing for gate 2024 then I have an exciting news for you guys an academy is conducting all India mock test for gate 2024 aspirants which is on 24th of December and the important point about this is you can enroll for this test freely you don't need to pay anything right the link you'll get in the description box of this video right now why this teste is so special because here you get a chance to win up to 100% scholarship Yes you heard it right plus it is all India live mock test so uh you have a chance to compete with thousands of Learners from all over India and you will get your all India ranking and by that you will get to know where you stand among the other Learners right how your preparation is going on so actually it's right time to test your uh gate preparation and this test has been created by their top Educators based on the latest exam exam pattern right so you will get here actual exam like experience which is definitely help you when you are going to sit in actual gate exam so the enrollment link and the other information related to this exam I'll put in the description box of this video you can go and check out right now let's discuss memory representation of array elements see we have discussed if I want to take array of five elements and I want to initialize it at this time only like 1 2 Z only three elements I have so remaining elements would be zero right data type name of aray size of aray and something like this if you don't give size here that is also fine size would be automatically uh you can say calculated right but here the size would be only three according to this because we have given three elements only but if suppose you give size five right so how in m this these array elements are to be stored so this is like we have memory memory blocks right something like this you can represent this horizontally or vertically it's up to you I'm comfortable with this thing horiz horizontally right so suppose one bite I don't know the address suppose the address of this one by I'm taking 100 101 102 103 104 5 six something like this right I don't know the address I'm just supposing the address of each bite right now how how much memory to be allocated first this would be calculated right so the type is integer integer will take four bytes five integer the size is five so 5 into 4 20 bytes would be allocated by the memory manager right and these bytes would be allocated contigous L memory like if I start from here if the memory manager has started to allocate memory for this array from here 100 so till sorry till uh till suppose here is last is the address of last bite would be 119 right from 100 to 119 so 20 bytes are there so these these Arrow elements are to be stored continuously in memory right in continuous memory locations so now one would be stored in these four bytes from here to here one would be stored in these four bytes right then here two would be stored in these four bytes then next four bytes the zero would be stored next four bytes again zero would be stored next four bytes again zero would be stored because only three elements we have given remaining two elements would be by default zero right so that is why if if more simply if I this then we can draw something like this 1 2 3 4 5 so 1 2 0 and remaining would be 0 0 so if the address is 100 next address would be 104 108 112 and 116 so now the name of this array is a and in a the address of first element is stored or you can say this is the Base address of this are Base address the starting address so in a the name of the array stores the address of the first element right so these are you know by default considered as pointers but sometimes know except sometimes if I use something like this size of operator with size of operator if I uh write down the name of this array here it is not considered as pointer it will give the size of this complete array not just the size of this pointer right so here are some situation where arrays array name is not considered by default you know as a pointer but other than that array names are implicitly considered as pointer right so you have to take care of this thing also now if I say m a it means it is indicating the Base address of the sing right so this is how memory is to be allocated now if I want to allocate memory to a second array suppose if I write down here here um float marks and 10 now you have to tell me in comment section how much memory is to be allocated right so same float is going to take 4 bytes 4 into 10 like 40 bytes is to be loated but continuous family location right if we are going to start it's not like that maybe from one uh here you can say from 120 Maybe from this 120 memories to be located to this Marx array or maybe from some other memory location maybe from 150 address or maybe from th000 address I'm just supposing this address it's not the actual address like 100 or 150 no I'm just supposing it right so maybe from th000 address starting from 1,000 how much by is to be allocated for this 40 bytes continously in memory from 1,00 to 10 39 40 bytes right it's up to you know how much data you store how much how many elements you store 1 2 3 4 or 10 elements right so this is how the uh you know the memory representation of the array elements so this is how the arrays elements are to be stored in memory right now how to access these Arrow elements if I have I'll show you practically also we'll just access we will print the memory address also of array elements don't worry if I write I have a int x 5 so if I want to access this just see out and X that's it but in Array I have three elements in this array I want to access these three elements so first thing randomly you can access any element directly you can access any any element of the array if you want to access zero directly you can access it's not like that you have to go from 1 to Z no directly you can access this zero how using indexing using index actually index now this is what main thing here index starts from zero in arrays so here 0 1 2 3 4 maybe you think that how to exis let me just show you the array name and in this these brackets are known as subscript just write down the index suppose if I simply if you don't know the index start from zero if I say I want to access the first element so obviously you will say the position of first element I think should be one so it should be a of one means a of one will give you first element a of two will give you second element but no that is not a case if you want to access the first element then index would be zero now why this index start from zero actually there was a programming language bcpm they designed this language you know uh Martin Richard that they designed arrays in that language in such a way that it would be initiating from zero Index right and after that b language comes after that c language comes and they followed the same pattern and C language actually becom so popular that all the other languages considered consider c as a base language so they follow the same pattern right although we have some except cases also like language mat lab Lua and I think Small Talk Pascal these languages Visual Basic in that array starts from not from zero right so there are exception languages also it's not like that all the programming language consider this pattern and array starts from zero index no but why now this in C language actually this index I mean this actually we call this Index this subscript this is actually offset it is not the position first position second position no it is actually offset means the number of or you can say the distance from the first element of the array right the distance from the array's head right so if I write here if I want to access this zero right so the distance from of this Zero from the first element is how much step you need to take to reach to this zero if you are here then one and two after taking two step you will reach to this zero so that is why index is two means this is actually the offset from the first element right if you want to exess the fourth element the last element so the last element in this arrays how much step away from the first element the distance so if you are here then one 1 2 3 4 if you take four step then you will reach to this last element that is why index is four right so the first element from the starting is how much step you need to take to reach to first element no step because first element is at starting only right that is why index is at zeroth element so this is actually an offset offset from the AR's head right and it makes we you know generally the second reason is what it makes uh you know simpler implementation of these things because in C arrays are closely tied with pointer pointer arithmetics I have told you right now in C many times this AR name is considered as pointer implicitly except few cases right so when you want to access actually if you want to exess any element in the array so we will write a of here the number Index right right so if I write here suppose I General then this would be converted a + I like this the inner working I'm telling you and you have to deference this to get the actual element so this star is D referencing operator don't worry we'll discuss this thing in detail when when we'll discuss pointers okay so this is how it is to be converted A+ I this now a is having address of the first element or the Base address suppose we are taking this example to 100 100 plus here I is what suppose I want to exess a of one right so I is one so one means in pointer arithmetic this one means it's not like that it will become one 1 no this is what address so if you add one here means address of next element not one 1 and and one element take here because it is integer four bytes so address of next element is what you have to add four here so this one means actually + 4 right it's plus actually + 4 so 1 4 and this is D referencing operator so at 104 I have two D referencing operator will give the actual value two right so if I want to exess the first element maybe you will like you think that it should print one but it is printing two so if the array index start from one the first element we are never going to you know fetch right that is why this says that zero index I hope you got this so if I want to access like a of Z first element zero so I is what here zero right so obviously 100 plus I is Zer so same Z Z right it is at first element it is the first element only so address 100 so at 100 at first first element is one right so you will it one would be printed here right it's okay we'll discuss this pointer and all in detail right just a brief just to uh you know make things clear out like why index starts from zero right if you got this you can let me know in comment section yeah about this why index start from zero you can just write down the answer if you're not getting this you can just let me know in comment section we can make a different video on this right so like this we can access AR elements so if you want to access any element right in Array so index would be from 0 to size minus one size of array is five so 0 to 4 so like this a of 0 a of 1 in C out we can simply write C out a of Zer so it will print it will give you output one right and to access these obviously we need a loop because if I want to print all the elements so one way is you can simply write C out if you want to print all the five elements in this so simply one way is five C out statement you can write down a of Z A of 1 a of 2 a of 3 a of four something like this it will give you all the five elements right 1 2 0 0 0 but if in AR I have 10 element I have 100 element I have thousand elements obviously we cannot write down thousand statement see out statement right because here something is repeating as you can see see out we are accessing a only this index is changing right it is increasing you know one uh by one number first 0 1 2 3 like this right so obviously this is what repetion of these statements so repetion we use Loops that is why we use Loops in arrays right to access all the elements we can just write down one four Loop y Loop do y Loop or R based for Loop and there only single C out statement how to write that I'll show you this I'm telling you this because I have seen one comment like why in Array we use four Loops to get to access elements in from the array or to get input from the user why we use Loops so this is the reason we use loops right because of this repetition right now let me just show you practically so this was we have discussed in previous video how to take declare array how to you know initialize the array at run time this is at run time see we have taken a loop you can take four Loop while while loop or any loop I have taken four Loop to initialize arrays because we want to enter Five Element from the user we are we are going to ask Five Element right that is why obviously we'll repeat enter first element enter second element enter third element fourth element Five Element right so we are repeating here so that is why we are using Loop so AR index start from zero so I would be 0 less than 5 I ++ and just to take input from the user we use C in this object R number and in subscript simply I so at first I value is zero so at zero index value would be stored then whatever you will enter I value becomes one then at one index value would be stored then 2 3 4 till four right and how memory is to be allocated that also I have shown you let me just show you address if you want to you know print the address of array okay it's not a actually it's the sorry the name of the arrrow here is RO number right so let's just run this and we'll see what output we'll get here enter the role number first second third fourth five so this address is some in some hexadecimal form see 0 x61 f f8 right and if you want to print the address of first element so if you don't write this address of Operator just simply R number I want to print let's run this and see what output you will get here see then also you will get address why so because array name name is array name this contains the address of the first element it itself acts as a pointer that is why I no need to write down here address of so to print to access the Base address of the array just simply write down name of array and I have shown you it will give you address right no need to write down the address of operator but if you want to access suppose address of first element second element third element fourth element all the element then obviously you need to write down address of because in Array we have just the Base address of the array in Array name right or you can see the element the address of the first element so simply I'm just printing writing here address of R number 0 1 2 3 4 this is what and the Base address of the array as well right so let's save this and run this let me show you what kind of output you will get here okay you have selected this yes it's okay just run this again there is no error actually so enter the role number 1 2 3 4 uh sorry 4 and five okay address we are getting in this line so you have to put a endl or sln also for new line right now let's run this see addresses this first f8 starting two address are same because the Base address of the array as well as the address of first element obviously that is at zero index so that would be same so as you can see these are same and then different if you add four by then you will get the same address in the first address right 8 + 4 12 12 is in hexadecimal it's C right something like this now same see here we are repeating the same line again and again for printing everything for for printing the address so you just put these thing also in a loop right for Loop would be from 0 to 5 and there just print uh address of R number and in bracket just put I that's it so you just do this thing this is assignment for you guys right now this is how memory is to be allocated continuously if you run this again if you just pause the video there write down the address hexadecimal form and then starting take the first address and add four by four by four by you will get the consecutive those same addresses right now next is how to access array elements so let's not print these addresses now now how to access we have entered five R numbers so how to access those five R numbers one way I have told you just write down five C out statement but no that is not I want so we'll just take a four Loop same so here obviously you have to uh declare the cyer in I I mean you have to tell the data type also before using this I because this scope of this I is within this for Loop only so we cannot use this I here if you declare in I here then you can directly use in this for Loop this for Loop throughout the program I is equal to Z without writing this int right I hope you are getting my point so 0 to 5 I ++ and how to access the values to print values we use C out to take values to input values we use you seen so see out and just name of the array in subscript the index or the offset so that is I right at first I zero then one then two then three then four so like this we are will'll be able to access all the elements 1 3 4 67 okay you have to decorate it a little bit obviously uh that new line after printing every roll number so just enter roll numbers 13456 78 45 so again it is printing 13456 7845 right before this for Loop just to decorate it a little bit you can just write down the R numbers are like this so if if I run this R numbers are this right so this is how we can access or if any particular R you want to access like at maybe zero element or first r or second R something like this so directly also we can access using index so rather than this for Loop like the role number of First Student is so number of First Student means obviously the first R number would be at zero index so just in subscript just write down zero see the RO number of First Student is 23 so it will print 23 here so directly also you can access you can zero or either 1 2 3 4 till 4 right now one thing is if I want to access a r number of R number six so obviously there is no index six because there are only five the AR size is five so index will be from 0 to four but I I am accessing six right so what you think pause the video and just give it a try what it should give I think it should give an error but no it will not give any error it will give a garbage value let me just show you this see the RO number of First obviously this we haven't changed but see the value is any gbas value why so because there is no bound checking in Array this is the major drawback in Array bound checking means it is not checking the boundaries you have to if you're using array this kind of thing you have to take care the array of the size or the boundaries of the arrays right if you will access anything outside of beyond the boundaries it will not give any error it will just give you any garbage value or just unexpected output right so this thing you need to take care so the drawback one drawback is this there is no bound checking in arrays fine and arrays are of fixed size actually and maybe next drawback you can write down like this contains elements of same type right this can be a drawback but advantages are like more than one element we can store under a single variable I'm using arrays and these are simple to use fine second thing is you can directly access any element in the array with the help of index that's it that is very simple accessing is very simple right when you discuss list then accessing is not that simple you cannot directly access any list element you have to start from first first element then you'll go to Second element third element fourth element like this if you want to exess the last element then you have to start from first first second thir four like this right except the case it is a that double link list but that is different you know concept the linked list actually linked list list is in Python but here that is linked list right so after arrays we'll discuss those also so I hope arrays are clear to you guys so this is about 1D arrays actually so in the next video we'll see 2D arrays so now I'll see you in the next then byebye take care