hey everyone I hope you are safe and doing good so in the series of learning C++ programming language we are discussing strings in C++ we know C++ provides two type of uh string representation one is C style character strings and second is C++ strings right like uh we use in C uh in C language character arrays right string is not a data type in C so strings are like character array so C style string those strings are also supported in C++ plus now C++ introduced a new type of string that is STD Nam space Sorry STD uh scope resolution operator and string right so these are special strings special type of string introduced in C++ and these are having many advantages over C style string right few of them we we have discussed in previous video like Dynamic size C++ are Dynamic and size they support many binary operators like plus comparison operator less than equal to we can compare two C++ string or more specifically if I say two C++ string objects because in C++ strings are objects that represent sequence of characters right so string is like a class also in C++ right that is having many member function function right so we create object of that string class like vector is also a class so we create a vector right so we create a string object of that string class and with the help of that object we can use all those member functions right so all those member function we'll be discussing in this video practically with the help of program right now before that I just want to tell you one thing there's a good news for those who are are preparing for gate 2025 it's about an Academy's learning festival and what is this learning Festival now you can enjoy unlimited access to gate Plus subscription for next 7 days so don't miss out this 7 days free trial and just get maximum benefit of this free trial and what you will get in this these 7 days in this free trial access to all the online live plus recorded batches study material curated by their top Educators plus practice questions many practice questions almost 2 lakh plus practice question you'll get access to all the test series and uh previous year question papers plus doubt resolution support 24 into 7 doubt resolution support as well as digital notes you will get I mean you will get access to all these things during these 7 days and it's completely free but one thing you need to remember enroll M for this 7day free trial ends on 8th of May you have to enroll before 8th May to get benefit of this 7Day free trial so don't miss out because it's free so the relevant link and detail you will get in the description box of this video you can go and check out now let's see all those string functions with the help of program so if you search these strings in C++ in Google then you'll get this website C+ plus.com here from this website you read everything about this STD and this string string class right so here you will get everything about string the member functions see we have seen in vectors same thing the iterators we use in vectors those begin and R begin R and C begin right if you not if you know don't remember those thing please watch that video first vectors because we not going to discuss everything in detail in this video because we already discussed these things in vectors these will be working you know same way as they work in vectors same as it is same syntax everything is same right same like capacity size length these also we have discussed element excess using this operator subscript using at front and back we can use this thing we have discussed modifiers we have discussed there also same thing some string operations are there those two or three operation we will be discussing in this video right so first we'll see see this let me just show you first this begin iterator so it is going to return iterator to the beginning of the string same in vectors it it will do right returns and iterator pointing to the first character of the string right so if you want to print the complete string using iterator we can do that thing also let's do this thing with some programs let's create a new file string functions and same include those header files first so let's take us string we have a string Str Str and let's initialize this here only we have like Jenny's lectures right and I want to trace this travel this from first to last I want to print this using iterator so how to create iterator let's first we'll use only one iterator that is begin only begin and end okay to create an iterator first type is string right scope resolution operator then iterator the proper keyword and then name of the iterator any name x y z a b c i t i anything you can take i j k anything I'm taking it right so now in for Loop this it is equal to St Str do begin and it till termination condition is it not equal to S Str dot we have and this iterator is return return we'll point the equator to the ending of the string last character of the string right and and then it ++ right and we'll just access it R is basically it's pointing the location or it's like a pointer but it's not exactly pointer but it's like pointer it is pointing that like first Str Str begin so it is going to return the itated to the first character like to Jenny so the it is now pointing to J then it will increase it ++ then e then n n like this and it is going to repeat this Loop this is this Loop is going to be repeated till it not equal to Str Str end right what this Str Str end will do let me show you see s Str end it is going to return an iterator pointing to the to the past the end character of the string past the end means after the last character of the string and theoretically after the last character like after this s there is nothing in the string so theoretically we can't access this character this position so right till so that is why it not equal to S strn we are going to repeat this Loop so it is pointing like it's an address containing address of these characters so to D reference this we use S right these thing we have discussed in uh those vectors also right so let me run this and it will print Jenny's lectures see so using iterator we can print the string so like this now it's now it's your assignment you have to try out these iterator R begin R and C begin CN and these right same capacity like let's size it is going to return the length of the string length and size both are same either you can use length or size Max size it is going to return return the maximum size of the string how many character that string can contain maximum size maximum characters so I'll show you this thing also the size if you want to resize the string capacity this is uh important it will return size of allocated stories see how this capacity and size is different it Returns the size of storage space currently allocated for the string in terms of bytes but it is not necessarily equal to string length it can be equal to or greater than equal to the size of the string or the length of the string let me show you this thing with uh one example see let's take this string only Jenny's lectures and after printing this let's print size of the string so both size or you can say length and Max size and capacity three things we are going to print so we have called all all these four functions size length Max size and capacity right so size and length would be same Max size and capacity let's see what these things are going to print let's put here a new line so first it will print Jenny's lectures then size of the St Str is 16 so here we have 16 characters including space right you can count length is also same because size and length both are same maximum size is this maximum character the string can contain this much it's not necessarily that it can contain these many characters it's you know it's implementation dependent as well as because of some other factors also it can fail to allocate storage up to this length at any point of time right so it's not necessarily we can uh store these many characters here in this string right but yeah maximum size of this string is this but capacity is 16 here capacity and size both are same but somewhere sometime you can find capacities more than size actual size maybe uh let's see this thing but see let me show you this example here in Str Str we have a string there we have high Jenny and I'm just printing capacity length and Mex size right so let me run this and in this case see capacity is 15 actual length is8 only and Mex size this only so capacity can be equal to or more than the size because ual size is only eight High J but capacity is currently allocated storage to this string Str Str this string s is 15 or 16 let's run this and see again it's 15 right sometimes extra space would be allocated see let me let me just show you this thing what this capacity will do because of some if you want to perform some operation like concatenation or anything else because of that right see it can be equal or greater with extra space allowing allowing the object to optimize its operation when new characters are added to the string right so it's not necessarily equal to the size of the string but if in this case in our example it's equal to size that is also fine it's not necessarily always extra bites extra storage is to be allocated I mean more than size right so pleasey TR out these Reserve resize and these things clear empty and all how to access this thing we have seen this operator this operator front end back you please uh try out the thing exess last character exess first character then we have some modifier like if you want to append something this operator we can use to at the end of the string append function we can use push back we can use May insert if you want to insert at a specific position into that string we can use insert right so let's use this oper plus equal to after printing this string I want to add in the string plus equal to what hyenes lectures and how are you so this we can append using simply this operator right and after that if you again print after pending this how are you at the end of this string after Jenny's lectures if you again print then see what it will show you let's run this first was hi Jenny lectures then hi Jenny's lectures how are you with no space right here between lectures and how after that size length and see now capacity is 40 but size and length is 32 now capacity is more than uh actual size right so this is also fine actual located Space Storage to this this is what 40 40 bytes right so using this we can append or you can use those append function also rather than this if you use that append function then St Str dot append and here we can use how are you this thing is also fine I mean you can use the syntax also see same result you're getting right so please try out these different different functions plus more string operations these are string operation like if you want to generate a sub string from a string then we can use this sust Str right so let me just show you this how to find out substring from here so syntax is you just have to use whatever the that string name St Str dot this function substring and here you will provide the start index and the length of the string from where you extract start index is supp z and length and I want to print this so let's put this in see how right start index is zero sorry here we have S Str dot because on this string we are going to call this substring function from two is not position or index see high comment out this thing also so this is start index and this is length of the substring you want want to extract length means how many characters so from zero okay let's modify this I want to uh exess from index 3 and length is two so index 3 means 0 1 2 three so one is space and one is you will get G according to me I don't know let's run this and see I'm not sure so space and G right you got it these arguments one is first one is start index from where you want to start extracting the substring and next argument is length of that substring right next when we have find if you want to find a substring from this string so that will return the first occurrence of that substring first occurrence see here we have find so this will search the string for the first occurrence of the sequence specified by its argument right first occurrence okay let me show you hi Jenny's lectures and again let's take high high and high two times we have so now if you want to find out where is high so see out St Str do find and just write down that substra string you want to find out High let me show you what output it will give you okay see at zero index because as soon as it is going to start searching first it will find H then I both are matching and index is obviously zero so first Ence is this it will not search after that it will return only zero but if you want to search this second high after after this so let's you can just put here one more thing after position zero after index zero I want to search the size so let's put here one so after this one I want to search so now if you run this so output would be 21 now the index is 21 from 21 this H is on 21 right you can just count the thing see here we have specified the position the subring you want to search plus position so if you have specified the position then it will only search at this position and after this position not before this position right see when position is specified the search only include characters at or after the position specified right not before ignoring any possible occurrence that include characters before that position so before this position before one yeah there was high but it is going to ignore that thing but here the entire sequence should match if I write here hi II and no position I'm not going to specify any position so there is nothing like the sequence S II so it will give any garbage value right because there is no hii and if I print if I write here small H and I what do you think what it should print C any garbage value because it's hi I this is not here so whatever you will specify the complete sequence should be here it's not that only one character is fine and that's it no the complete both H and I should be here in this string right both should match everything should match whatever you specify here like if I write here h i and comma and after position one I want to find out right what do you think pause the video and let me know in comment section what it should give so there is nothing after one this kind of thing so any garbage value because h i comma after one after zero and after this index we have only h i but no comma so everything should match right all the character in given sequence so please you just try out these different different operation you don't need to remember everything right I have told you the frequently used operations but you just try out these things once you are habitual of using this thing in your program you know you don't need to remember these thing in after that right these are some non member function overloads rational operators we can use with these type of strings like this operator less than equal to greater than less than and equality check not equal to these operator we can use right overload means the actual meaning of these operators are plus means to add two numbers but here we are using to concatenate two string means we are giving that operator another meaning plus operator another meaning right less than we use to compare to integer right but here we are using to compare two strings so we are also overloading or changing the meaning of that operator so that is kind of overload right these are oops concept right we will be discussing the E concept op concept also later in the C++ course right function overloading operator overloading and overriding and all right like plus operator used to concatenate string this thing we have used get line we have used so you please practice you know these member functions with the help of a proper program and all right this is your assignment so I hope strings are clear to you guys now in the next video we'll see functions in C++ right so now I'll see you in the next video till byebye take care