so in the series of learning c programming we are discussing types of stories classes in c in the previous video we have discussed auto stories class in this this video will talk about the next stories class that is register stories class and i'll also i'll ask one question also that is based on auto storage class and the answer of that question you will get in the end of that video that question is also very important right now every single detail everything about registered stories class we are going to discuss in this video with the help of a program some very important points also i will tell you about the stories class that you would rarely find anywhere fine now before that just want to tell you one thing if you are preparing for gate 2023 exam or you are planning to prepare for gay 2023 then an academy is conducting a combat it's a scholarship test to maximize your gait and esc preparation which would be on 10th of april at 11 am and it is a live test and you can take this test for free you don't need to pay anything so in this test you will get a chance to compete with thousands of learners from all over india and you will you stand a chance to win up to 100 scholarship top rankers will get up to 100 scholarship here you will get 20 question and the time limit would be 60 minutes and the questions has been curated by their top gate and esc educators and with the help of uh you know live leaderboard you can instantly see you you know what the answer right or not and you can see where you are standing among the other learners from all over india and you'll also be given personalized rating and scoring with the help of that you can constantly measure your progress and after the combat you will get detailed indepth video solutions provided by their experts so that you can identify your weak areas and your strength and you you know you can improve according to that and you can get it right next time so the enrollment link for this combat you will find in the description box of this video and you can use my code jkl10 to enroll for this combat for free and if you use my code jkl10 for your gate and esc plus subscription you will get 10 percent discount on this subscription on all the paid subscriptions so all the relevant links and details i'll put in the description box of this video you can go and check out now let's see what is the stories class and you can see what is the register stories class first of all it is same as auto storage class except there are two differences first thing how to use this you are supposed to use this keyword resistor then the data type and then the name of the variable in the auto we use auto then data type and the name of the variable right here you will use this keyword resistor second thing is now default value of this would be garbage value same as auto scope is same that is block or you can say function or methods go we cannot declare this variable the you know the register type of variable the variable which is having a register storage class globally so global declare declaration is not allowed same in auto that also if i have shown you with the with the help of a program if you have declared a variable with auto storage class globally outside of main function then it would give error right it would have given you error same with this only local declaration is allowed no global declaration is allowed so within the block scope is within the block right and lifetime is till the end of that block or till the end of that function or method right now another main difference is location where this variable would be stored location the auto variable will be stored in ram or you can say that stack fragment of the memory ram but here this variable would be stored in cpu resistors right and why we store this in cpu resistor or is it possible to store all the variables in cpu register or you can say which type of variable we should store in cpu register means we in with which type of variable we should use a resistor with which type of variable we should we should use auto all you know answer of all these questions you will get one by one in this video right i guess this is clear to you garbage value you know default value the scope and the lifetime now main thing is the location where we are going to store this and why we are storing this here see for that thing you need to understand this see if you have written a program program is same i am going to write the same program that we have discussed in previous video or let me just write down a different program with which you know with hell of that program you will get it better this concept right now here the program is i want to you know sum ten numbers zero to nine right now here these variables i have declared as o2 by default these are o2 right so the question you know i wanted to ask to you guys is what see if i by default the variable is auto if i don't write anything then that is auto so if globally i write in a global variable that would also be considered as auto but in previous video i have told you here global declaration of photo variable is not allowed so these two statements are contradictory right so how you will justify this thing what should be your answer think about this see now these variables are by default total variables right now the processing of this is what this program would be stored in in our hard disk right here we have the program this program whenever you are going to execute this program this would be loaded into memory or you can say that ram here here in ram we are going to load this program while execution right now instruction by instruction the processing would be done where not in ram where with the help of processor or cpu in processor or you can say cpu in cpu we are having that alu arithmetic and logic unit there the processing would be done so in cpu we have some resistors right out of these resistor one resistor is some you know data resistance also their instruction resistor is also there so one resistor is instruction resistor so one by one instruction would be loaded to that register right then processing would be done fine all the instruction one by one would be loaded here in the instruction register and then processing would be done right so now these variables are auto so we are going to store these variable in main memory so here we have i and sum two variables right i is equal to 0 sum is equal to 0 and then this this this is what for loop this would be first of all i is equal to 0 now sum is equal to sum plus i this is what instruction that would be loaded first here in cpu in register instruction resistor but sum is equal to sum plus i now some value is in main memory i value is also in main memory so obviously we are supposed to fetch that value first of all in register so that value would be fast here in the data register first of all then processing would be done some would be done and then that sum would be updated here some is what sum plus i that is 0 plus 0 first to full sum is 0 next instruction is i plus plus that would also be loaded first of all here but i value is stored in ram memory so then i value would be fetched here then i plus plus would be done and that value would be stored here now i become one now next instruction is sum is equal to sum plus i same that instruction would be loaded here in the instruction register but the value the sum and i value is in the ram so the value would be loaded here one and zero then processing would be done one plus zero is one so then some would be updated here right so this is now processing we are you know processing is to be done in the resistor but value we are storing in memory so we are switching we are first of all you know fetching this memory fetching the data in the resistor then we are updating here then again for next instruction we are fetching the data and then we again again we are you know loaded the data in the ram memory updated the data here the sum value here so this process this processing is what you can say switching switching from ram to resistor so this is going to take time the processing is fast processing is fast but switching this switching is taking some time so because of this switching the running time is increasing the efficiency of the program is decreasing right so the better option is what better to store this i value and some value in register only here only not in memory here i and sum so whenever we fetch the instruction sum is equal to sum plus i the i and some value is already in the register we do some processing and value would be updated in in this variable only right i plus plus okay i value is here only do i plus plus again for next iteration sum plus i then next instruction is m plus i okay i n some value we are we are having these values in resistor only so we don't need to fetch these values from main memory so this switching time we are removing this switching time by storing these variables into register right so if we store a variable like if we are using register storage class if you are storing that variable into resistor means you can quickly access those variables for faster access so it will increase the efficiency of the program it will decrease the running time of the program running time of the program would be less so obviously efficiency would be more fine so that's why we use resistor storage class now you will say for all the variables better to use resistor storage class because we can easily we can you know access fastly these variables so better we use for all the variables declare all the variables has register storage class using register source class but it is not possible because these resistors the size of these resistors are very less in kbs only so if we store all the variables in registers then for memory for the execution for execution of the instruction there would be no memory in register so that would be also a problem for us so now which type of variable we should store in resistor the variables which we frequently use like counter variables the loop variables the psi variable we are accessing frequently the sum variable we are accessing in every iteration frequently so better to use these variables better to store these variables as register variable in cpu register not all the variables right because register memory is very less we cannot store all the variables in resistor this thing is very important i hope now you put this point right now which type of variable we should store in cpu resistor fine now it is not guaranteed that if you specify here register storage class this i and sum would be stored in cpu register no it totally depends on many factors one factor is depends on you can say the resistor is free or not the data register is free or not available or not it depends on the compiler only we can only force the compiler that store these high and sum these local variables in cpu register but it is not guaranteed that these variables would be stored in cpu register if the resistor is not available then or it depends on any factor one factor is availability of the cpu register or it depends on the some you know restriction some uh implementation also right hardware implementation and on many factors so now if these are not compiler is not able to allocate uh you know store these local variables in cpu register then by default these would be stored these these would be considered as auto so this i and sum would be here in main memory only but we do not know for our satisfaction we have written resistor but we do not know that these are in memory or in cpu resistor we don't know right one more point about resistor variably is what we cannot use pointer means we cannot uh uh you know use pointer with this resistor variable like what if i'm using int i and here i am using int asterisk ptr and in ptr i want to store address of this i address of this i is register variable right i am going to store address of the site in this ptr this would not be allowed you cannot use this unity operator with this eye because this eye is not having any memory location the psi is what in a resistor it is not having any memory location in memory so we cannot use address of operator we cannot you can say d reference this we cannot use pointer with this we cannot get the address of a resistor variable with the help of pointer this point is also very important right yeah but we can write down this thing like register in strict i and in i now we can store address of another variable that is fine right i hope now you good the difference between these two points fine next point about this variable is what so why we use this resistor if we want to store some local variable into cpu register then use register storage class local variables i am saying not global variables we cannot write this thing outside domain this thing register in x is equal to 10 this would not be allowed this global declaration is not allowed same in auto this global declaration is not allowed only local scope is allowed within the block inside a block or a function right only local declaration is allowed for both resistance and auto no global declaration is allowed i hope now you can write down a program it is same almost same as o2 only differences we use this keyword and where this would be stored in cpu register rather than the memory that's it otherwise everything is same as auto so the same example you can take and you can just you or you this example you can take and you can you can try out this thing this will give error or not and you can tell me in comment box it is giving error or not right i hope now you can try the program by yourself fine so now that's it from my side about this resistance source glass if you have any other point if you know any other point about this storage class you can write down that thing in uh comment section so that other people can also get help from that comment right so from the next we will see about a static storage class so now it's in the next video till then bye bye take care