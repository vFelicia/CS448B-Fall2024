hey everyone I hope you all are safe and doing good so the series of Learning Partner programming language in the previous video we have seen what are access specifiers or access modifiers in Python public protected and private right and till now we have discussed two oops concept inheritance and abstraction the third one is encapsulation so it is one of the four pillars of op four pillars are inheritance abstraction encapsulation and polymorphism and it's also important from security point of view now how so what is basically first we will discuss encapsulation and how we are going to achieve encapsulation with the help of program I will show you practically right now let's see this thing with the help of real life example what is encapsulation see I hope you have seen uh that capsule right like this we have a capsule and here in this we are having some drugs or you can say medicine right and if you are sick or if you are not feeling well or if you have any other problem you just take it and it will act in your body accordingly right you'll be fine so now within this capsule we are having some amount of drug different types of thing so these are bundled together or these drugs or these medicines are wrapped together and you just take that complete capsule it's not like that you just open it and then you take individual uh that component obviously not right so that is encapsulation encapsulation means just wrapping off something now in programming what is encapsulation if you say then what we are going to wrap what we are going to bundle in one unit or in one capsule what the data members or you can say the data and methods together so you will find this kind of definition everywhere like wrapping up of data or you can say code and methods into a single unit and that is encapsulation right the data and the methods which are acting upon that data into a single unit that bundling or that wrapping is known as encapsulation so obviously this is a kind of Shield it is going to protect whatever there inside the capsule from outside world right so same in programming also it it is a shield kind of thing right that is going to protect our data and our method from outside wall now how that I'll show you right so now basically if I say like if you are defining a class then what is there in a class class here you will have a class name then some attributes and methods this is class so this is just an example of encapsulation simplest example because in class we are having some attributes of the class or you can say the data of the class or the member data members of the class as well as the methods in the single unit right so this is you can share Capital this is what nothing but encapsulation so like in real world we have this kind of capsule and so it's not easy to open that capsule right or maybe if something is very precious like in previous example we have discussed X specifiers so that thing you will put in a locker you have a lock and you have a key but in programming obviously we are not having any proper lock or any proper key right so there are simply some name conventions some notification or this kind of thing right so here you are going to achieve encapsulation or you are going to see encapsulation is wrapping up of these things into single unit right as well as encapsulation is also known as data hiding it protects our data it hides the data right as well as the implementation detail from the user see in abstraction I have told you abstraction is basically a process of finding out which functionality is shown to the user and which is to be hidden from the user right but actual hiding is done with the help of this thing encapsulation now how we are going to hide using excess specifier and access specifier public private protected that thing we have discussed in previous video is also known as data hiring so I want to hide some data then you just declare that attribute suppose a student age I want to hide that age right so I just declare that age variable private that's it or I want to hide some method from outside world that also method we can do we can make that method private or either protected right right so in if you make it protected then drive the class and you can access those protected attributes and methods but if a method or an attribute is private then that we can use only inside the class not outside the class yes we can we can access private methods and attributes outside of the class there are basically three methods first just create public method within the class only and using that we can access private methods and attributes second thing using name mangling and third thing using getter and Setter methods so first two technique we have discussed in previous video please watch that video first right that's very important to get encapsulation now third method using Getters and Setter method how you can achieve encapsulation that thing I'll show you practically in this video right I hope now the basics of encapsulation what is encapsulation is clear to you guys right so if I say what are advantages or let me just show you that practical example and at last we will just summarize this thing and I'll show you I'll tell you the advantages of encapsulation right okay so see this solves the example you have taken in previous video when you're discussing excess specifier public private and protected because obviously using these specifier only we can achieve encapsulation we can hide our data right or you can say not only the data are methods as well as right like this example you have taken this name is public this one is protected so if this is a prefix with one and a one underscore that is protected and this age is private private instance variable so it is a prefix with double underscore and we have a private method as well as right so if you want to access this private attribute outside of the class directly with the help of this we cannot access if you want to print directly with the help of like S1 and underscore underscore age I want to print 8 so it will give error see attribute error student object has no attribute age because outside of the class we cannot access private if it is a private method or private attribute within the class means this area is within the class only only this area this object we are creating outside of the class so that is why we are not able to access this thing right so this is obviously we are hiding our data we are protecting our data from Public Access we are restricting the access to our data which is very maybe some sensitive data we have in our class it's just a simple program but in Industry when you are working on Project then definitely there must be some sensitive information in that project so that we are going to declare that thing as private okay now how you can access this private kind of thing either you can use first method is using public method you can access this thing see this display private data is public method so here I'm just calling uh this this display method is private so directly we cannot access house outside of the class but within this public method we can access we can call this method so underscore underscore display and within this display I am accessing age that is fine now I can call outside of the class this display private data right so if I go like S1 Dot display private data then we can access let let me just comment out this thing see now Rahul age and roll number 23 from student class right like this one is the second thing how you can access private data using name manly so that also we have discussed in last video using dir you can do name adding how to access name angling type of thing this is the example C if you want to call this a display method because this is private directly you can call but using name mangling we can code so name angling what you have to do first underscore then class name then private data or private attribute name or private method name this is fine now this display will work now let me just comment out the same let's run this now see this display is working right this function or if you want to access this age that is also fine we have uh C using name angling the object name dot underscore class name underscore underscore H here is fine third thing is now using getter and Setter method we can access private kind of thing now basically if I would say this is the you know best process using Getters and Setters method to implement complete encapsulation in your program right because see we can access private data outside of the class so in Python there is no such mechanism to completely restrict the excess of private data outside of the class it's flexible right it is responsibility of a good programmer to you know not tax private and protected members outside of the class do not modify this thing outside of the class I can modify this private data outside of the class so if I want to modify like this age then simply you have to access like this and equal to now age I just want to set 45 let's run this and see 45 year old so I can modify the state outside of the class now what is the use of this private kind of thing right so obviously if something you have seen if you are working in a team on a in a company then if you have seen in a class you have private thing private attribute underscorants for each then better not to touch the south side of the class better not to modify this it is a responsibility these are you can say manners or these are ethics it's not to touch these things outside of the class so always use Getters and Setters methods now getter method is to access the private data and stator method is to set or to modify the values right so rather than modifying this thing outside of the class okay let's create a new project sorry new file in abstraction demo only and I'm creating encapsulation demo.py and let's just copy paste the previous code as it is let me just remove first of all something here right so we have this class right this is Drive class so Drive class is basically comes into picture when you are dealing with protected data and in inheritance basically if you want that your drive class can access the data only derived class can access the data not public member not public person then just declare that thing as protected so this row number this drive class can access see here directly I can access right so now okay let's use Getters and Setters method suppose using getter using get method I want to get the age so just Define this name get what get age right because age is only private so we use Getters and Setters on private attributes only so get age and get means to get at the age so return just self note underscore underscore H or maybe directly you can print that my age is this and if you want to modify the sage then use Setters method like set it's not like that you have to give the name getter and setter just indicate get and set like and just you can say underscore and the name of the attribute name anything you can give right set age so I want to modify so obviously when we pull this function we are going to provide our age so let's just maybe number or any parameter name you can take is you can take even age you can take a you can take x y z anything right so and basically Center and getter we use when we uh want to apply some validation logic when we are modifying the age right so if you want to apply some validation logic either directly you can set like self Dot underscore under score is equal to directly the attribute name age this is also fine if you want to apply some logic validation logic like if this is you have given is greater than 25. or greater than suppose 35. then print suppose I have some restriction a should be less than 35 so if greater than 35 then it will give error else set the age else just set page right now suppose let's just comment out these two methods and comment out this class as well derived class now let's create S1 student what you need to pass name row number age okay name row number age and now use get and set method so if you want to get the age just call S1 Dot get age and it is returning so definitely you have to print let's run this and it will print ages 20. okay we have given 20. if you want to modify that private variable private attribute age then just call set inch and here just I just want to pass like 34 Maybe okay and after that just again I want to print age just copy paste this thing and let's run this see first it was 20 then it was 34. using Getters and Setters method it's a good idea it's a good practice to modify private members private attributes rather than directly using name manually modify that that is not a good practice okay a good practice a good programmer never do this he or she will use Getters and Setters method to access private variables private methods okay so we use these Getters and Setters method when we want to avoid the direct access to private data right then use data center and if you want to apply some validation logic to set any private data that then also obviously we can apply that thing also right now I hope this is clear to you guys encapsulation what is encapsulation how to achieve in laboration and encapsulation implements abstraction right because now actually we are hiding our data right something hiding something from outside wall and this is encapsulation so it is what what we can say encapsulation implements abstraction abstraction is simply a thought process abstraction works at design level actually at implementation level level encapsulation works and how to achieve encapsulation obviously using these excess specifiers right and how we can use you can watch my previous video and one thing we have discussed set us and get us method we have discussed in this thing so what are advantages of encapsulation obviously it provides security right it is provides our data hiding and obviously if you are bundling something bundling the code and the method which are working on that code in a single unit then that provides us a Simplicity kind of thing like the code would be more readable and more maintainable right so I hope you got what is encapsulation how to achieve encapsulation and why this thing is important right now only one OB if we say you know concept is remaining that is polymorphism so that will think that we'll see in the next video so now I'll see in the next video bye take care