so in the series of learning c programming we have discussed structures in c now we are left with one small concept that is union is union in c it is almost same as structure but yeah we are having some difference between structure and union that we will discuss in this video so we'll see what is union how to define unity is also a user defined data type like structure so how to define the state type how to use this in our program advantages of union drawbacks of union why we use union right how this is different from structure we will see every point about union with proper example we'll see one program i'll show you practical also you'll run that program on my laptop right now before that just want to tell you one thing for those who are preparing for gate examination an academy is conducting a combat it's like india's largest weekly scholarship test for gate and esc and this test would be on 28th of november at 11 am you can take this test for free you don't need to pay anything right and this is live test you cannot take this test after the live test is over you can only take this line it is available on both web as well as android app so here you will compete with thousands of learners from all over india and you stand a chance to win up to 100 scholarship on plus subscription as well as some exciting prices as well like apple ipad mini jbl speaker jbl headphone and amazon vouchers and much more and in this test 20 questions would be there and time limit would be 60 minutes so under the questions would be very challenging and original gate questions created by their best gate and ese educators so this will help you to understand the type of questions asked from each topic and now you will know how far you stand from your target score where you are standing among other learners from all over india you can just assess your preparation in 60 minutes with the help of real time leaderboard that would be updated after every question you can measure your progress with your personalized scoring and rating and after every contest detailed video solutions would be given to you by their experts and also you will see the questions that were attempted wrong as well so this way you will know your weak points and working on on them will be easy for you so you're supposed to enroll for this test the enrollment link i'll put in the description box of this video you can just click on that link scroll down pick up the right test for you and just click enroll and use my code jkl10 to unlock the test now see what is union see union is also a user defined data type i know i hope you know what is a structure you have you have the idea about structure if not you can watch out my previous videos like structure is what a user defined right which consists of what different different elements which are having different different data types like this this was this the syntax like struck was that keyword here we can say name of the structure like i am taking a student or any general name i am taking like uh abc so this is what i am taking like this is a structure this is struct tag these are abc are members of different different data types here we have semicolon in main i am declaring a variable into demo suppose i am declaring s and i'm initializing this like uh this is int so care i'm initializing something like this a and then 4.0 so one would be in a this a character would be in b and the c would contain 4.0 right and if you want to print you can simply access how these variables are using this like s in printf simply you can print percentage d percentage c and percentage f i am printing so first i am printing s dot a s dot b and s dot c this is how you can print right i hope this is clear to you right now union is almost same it is also user defined data type it also have the information of different different type of variables means variables which are having different different data type everything is same right syntax is almost same only difference is what rather than this struct what we use union keyword and here i'm taking suppose union and the name is abc i'm taking same here i am taking in a care b and float c same you have to you know put semicolon here same variable declaration you have to write down what if you are declaring in main that is also fine here also you can declare like if i want to declare you here that is also fine if you want to declare within main function in any any function you can also declare if you want to declare this variable globally outside the main outside of any function that is also fine same with structure all the points are same now what is the difference that also will see now here i am taking what same union the name here this tag is abc i'm taking and i'm taking here u name of the variable u right now the only difference is what see how memory would be allocated to this to these abc this is how the memory block would be there this is for a b and c continuous memory allocation 4 bytes like suppose base address is thousand four bytes for end so one zero zero four for next and for character only one byte so one zero zero five for next here i am storing one a and four point zero zero zero zero zero six 0's this is how and this s is what variable name so it is containing base address it is acting as internal pointer so it is pointing i hope this is clear to you right but now the only difference is the memory allocation how memory would be allocated to these members how here separate memory allocation for this member separate separate separate for all the members separate memory allocation and total memory allocate how many bytes would be allocated four bytes one byte and four bytes means nine bytes you can also check here in printf just try down size of like size of this struct demo or size of this variable s you will get number of bytes in my machine i am getting nine bytes because np is taking four bytes in union how memory would be allocated only one memory block all the these members would share a single memory now how many bytes would be allocated see int is taking four carries also care is one float is four so maximum the data type which is having maximum memory location that is 4 it is also 4. so how many bytes should be allocated only 4 bytes only 4 bytes here 9 bytes so this a b c three variables will share the same memory location right so we will see drawbacks and that that advantage advantages also of this union so how you will access these members see if i am storing here u is equal to sorry you point how to access variables same method name of this so you have to exit that members of this union same as structure name of this variable dot operator and name of this member u dot a is equal to i am storing here 1 u dot b is equal to i am storing here suppose 97 u dot c i am storing here suppose nine point zero or nine point two right and in print f simply i am printing first of all a value a is equal to all the things all the three things i am going to print so i am just writing the syntax how to print so this is how i am going to print so here what value will get in case of structure this will print one this will print this a because percentage c this is would be character and this would print four point zero zero zero zero right but here what would be printed here at first i am storing in u dot is 1 so it would be stored here because a is sharing sharing this memory location right now u wrote b now b is also sharing this memory location so this one would be replaced with 97 now you wrote c c is also sharing this memory location so now it will be replaced with 9.2 0 0 0 5 0's right so final value would be what in this memory location 9.2 whatever you have entered at last that value will exist only the previous value would be overwritten so what output you will get u dot a u dot b u dot c what output you will get you wrote a like percentage d so maybe you will get any garbage value percentage c so what it will print any garbage value now this will print u dot c it will print nine point two right so the last value which is enter that would be stored only so this is drawback right so now you will say m how we can use and if this is the drawback why we use this union we don't use union nowadays union were used in previous days like maybe many years ago at that time memory was very expensive right and here we have say this memory would be located 9 bytes here only 4 bytes so this is less map it will take less memory so suppose a situation is we are having 5 or 10 members but at one time i want to process only one member right but suppose at one time i just want to process this a i want to store a value in a and i want to access the value of a not in b and c so this using of structure would be wastage of memory because here nine bytes would be allocated but i am not using this b and c ms i am using only a so this would be wastage of memory in this case union is better here we cannot process all the these members all the elements at the same time if you want to process only one element at one time that is good idea in that situation it's a good idea to use union rather than structure because it is wastage of memory but nowadays see buying of memory is very you know it's not so much expensive memory is available at cheap prices so we don't care about the basis of memory and we use structures only we don't use union so that is the only advantage like less wastage of memory but drawback is what we can't process all the elements at same time because this is the case here it will hold only the last entered value right because of sharing of the memory memory allocation by all the members of this union right so same syntax would be same using pointer also you can access in structure if i take like here i am taking a pointer like struct demo ptr is equal to address of s how you can access this ptr arrow a ptr rob ptroc same in union if here i want to take after this i want to declare a pointer union and what abc s trick ptr and in ptr after that i am assigning address of u see same u is a variable which is pointing this memory location suppose memory allocation is what uh i'm taking 2000 address is 2000 base address right so it is containing 2000 and it is pointing to here so i'm address of u so ptr would point to this in ptr what would contain address of u obviously address of you may be is suppose three thousand there will be some address of this u variable also so here we have three thousand so this pointer is pointing to this right same you can access this like ptr arrow a ptr rob pdr roc same syntax everything is same only the difference is the memory allocation how the memory would be allocated to these members i hope this difference is clear advantage is also clear clear and drawbacks of union is also clear to you and why we are not using union and in which case we can use union like it would be better to use union than than us then this structure so if you update one member of this union all the members would be updated right because of the same memory allocation they are sharing right same you can take like area of union you if you want to try out you can try out this at your own but nowadays we are not using union so that much you know theory is enough about union now let me show you this practically on my laptop let me run this and see what output you will get right so let me create a file union.c and here simply we are taking it's like union i'm taking just a name demo like abc and within this i'm taking one integer next is care b and next i am taking like float c right and here just a semicolon or within main like i am writing here main and in this i am declaring a variable union the name is abc and i am just taking a name u right so i am initializing like a u dot a or rather than this i want to access this using pointer let's take the pointer concept in the same thing union abc and strict i am taking a pointer ptr is equal to address of you right so you can access variables using ptr or pointer it's up this pointer or the variable you you right so i'm assigning the value using variable u dot a same method is equal to i am assigning 1 then u dot b would be suppose i am assigning 97 and you don't see would be float so i am taking suppose 78.90 right and i just want to print the values right so i will print a value as percentage d right and how we i want to access ptr arrow a right same i'll just copy this thing then i'm printing i'll print b value b would be care so here we will write percentage c and ptr b here we have next we have c so this would be float so percentage f and c value right so let's see what output you are getting see a value is any garbage value b value is this b value is nothing it is going to print and its c value is 78 point this so let me just format this thing with slashing right and now again we are going to run this and see what output we are getting see a is having any garbage value b is having nothing right and c is having the exact value the last added value is 78.90 so in that memory location only this memory would be stored the previous would be overwritten right so that is drawback of this union so one assignment for you is see i am not assigning any value in this c i'm just committing this out u dot a is 1 you wrote b is 97 i'm just printing the value a value is this and b value is this one right and i'm just committing out this this value commenting out this value so what output you will get so from the next video we are going to start file handling in c so i'll see in the next video till then bye you