so in a series of learning Python programming language we are discussing operators in Python till now we have discussed uh arithmetic operator assignment operator logical operator and bitwise operator so now we are left with two moral entity and membership operator so now in this video we'll talk about what is the identity operator in Python right now many students get confused between identity operator and equality operator that these are same see whenever I show you practical like we will write a program to use this identity operator and whenever when you see the output then you definitely will think that the the same thing we can do with equality operator as well but no the working of these operators are different maybe sometimes output would be same of these two operators but working behind the scene what is happening that is different so that we will see how these operator identity operator is different from equality operator with the help of one real life example as well as with the help of program that is very important point right so all about identity operators in Python we'll be discussing in this video right practical also I will show you on my laptop but before they just want to tell you one thing if you guys are interested in coding and you want to take your coding skills to the next level then participate in the biggest scholarship test of the Year by coding ninjas and earn up to 100 scholarship on the best coding courses so don't miss this chance to set yourself apart from this competition and take one step towards a bright future encoding so register for this scholarship test today and get up to 100 scholarship on all the video lectures curated by ex Facebook IIT Stanford aluminize an excellent rated courses on Google plus here you will get one to one doubt assistant support as well as they have their dedicated placement sale to help you to get placed right now actively many companies are effectively hiring from their placement cell and what is the test pattern only 30 aptitude questions you will get mcqs and you have 11 days Windows to attend this test because this is going to be started from 19th of December till 29th of December you have time to attempt this test and no negative marketing would be there that is a plus one for you guys so the registration link you will find in the description box of this video and one more thing uh freely you can register for this test there is no registration fee so now you can check out the link in the description box of this video and the relevant links and details all the details you will find in the description box of this video now let's see what are identity operators in Python so basically two identity operators are there is and is not right so they are used to compare the objects means if both the objects are actually same object or not and they share same memory location right so whatever I am saying that we'll discuss with them open example see if I am taking a is equal to 5 and B is equal to 5. right and if I print if I print I am using this is Unity operator a is B right so is means it will return true okay now let's see what it will print what it will return a is B it will return actually true now maybe you are thinking it is comparing the values because a is also 5 b is also 5 that is why it is true no I have told you they compare the objects because in Python is purely object or in your programming language so everything is considered as what you can say objects right and each object is having its memory address memory address or you can say they are having their unique object ID object ID object ID means nothing but that memory address of that object right now before proceeding to these things let me just tell you something about the memory location of these variables right so in Python whenever we write this thing so we have some memory would be allocated some memory address like we can say 1000 memory address of this is let's suppose thousand and here we have value 5 so this 5 is what considered as object and this is object ID or you can say memory address right and this a is just you can say name for this object or you can say tag or name right this is tag or you can say name now again I'm writing B is equal to 5. so in Python what will happen the memory manager basically reuse the object instead of creating new objects or instead of allocating new memory right for the same data and same you can say data type so here 5 5 is value is same right into data type so it will not allocate something like this like B 5 and memory address let us suppose two thousand no it will not create another object it will reuse these objects already created objects right because A and B these are just name of these objects so this B would also be linked to this object 5 and memory address would be same thousand so now this can be accessed with both the name A and B this is the case in Python I hope you got my point right so here what point you have to note the memory manager is in Python reuse the objects instead of creating new objects for the same data with same data type right for same data type so we are reusing same object so now here 1000 memory location for A and B both are same so what identity operator is comparing actually the memory address so memory address of a is thousand or memory address of b or you can say ID of this object is also thousand that is why it is returning true and if I write something like this print a equal to equal to B so this equality operator basically compares the equality basically it compares the values so a value is 5 b value is 5 that is why it will return to you so maybe you get confused like a is B is also to a equal to equal to B is also true so identity operator and assignment operator sorry this equality operator both are same but no the working is different if I write something like this print and see how you can check the ID of the objects we have a functioning python that is ID so just you will write ID and in bracket just pass the object for which you want to check the memory address or the object ID right so here I am passing a or you can pass 5 also 5 is what object this five object this is having uh memory address thousand so it will return object ID or you can say memory address both are same so this will return thousand let us suppose we are supposing that this is thousand but actually it is not thousand whenever we run this then I'll show you and if I print print ID B that will also return same so the idea of these objects are same means memory location of both the objects are same means actually these are same object that is why it is returning true so Edge will return true if both the objects are same or the memory address or the object ID of both the objects are same and it will return false if the memory address is not same or the objects are not same action that at that time it will return false is identity operator I hope you got this point right now if I write something like this a is 5 and B is 5. now it is a string you can say pick a string or a character you can say we write string in double quote or single quote so at this point of time it will create a is 5 the value the data is not same this time because it is string it is integer data type data type is different so at this point of time it will create another object here it will store 5 and maybe address is suppose two thousand right so this is the case at this point of time if you print a is B what it will print false at this point of time because the memory address of these objects are not same so it will return false I hope you got what is is operator and is not is what it is just what working of is not is what reverse of is here if I write is not is not b obviously we know a is not B because a is this 5 because memory address of a is this memory address of B is this both are different object right so is not b means yeah that is true so in this case it will return true it will return true is not will return true if both the objects are not same if memory location of both objects are not same and it will return false if both the objects are same so here if I write 5 and 5 and if I write yeah is not is not b but in this case it will not create another object because this is same data with same data type so obviously these are same and we are writing a is not b but that is not true because a is B both are same a is not B now it will return at this point of time it will return false I hope you got what is is and what is is not notes I'll put in the description box of this video you can check out these things right but you have to understand first the working of is an is node they actually compare the object ID is the memory location not the values let's see a real life example now let's see the difference between the stubble equal to n is identity operator right okay so let's suppose you and your friend or let's suppose me and my friend are having two glasses and in my glass I have banana shake and my friend is having mango Shield so if I compare like this banana shake and mango shake we are having two glasses these are glasses different different glasses right so if I compare equal to equal to banana shake mango shake these are equal because the values in these glasses are one is banana shake one is mango shake same as a is having five and B is having six these are values are not equal obviously so this will return false right if both me and my friend are having two glasses separate glasses but both are having banana shake then equality operator values are banana shake banana shake so it will return right just generally we are you know checking if it's not like that if in banana shake I am adding some cherry and his banana shake no Cherry so that is also right values are different but generally banana shake banana shake nothing else is in that banana shake right so it will return true but but if I write something like this banana shake is bana banana shake now what if you got the concept of is and is not you can answer this question so what it will return it will return false because values we are not checking the values we are in is it will check the object ID the memory address so we are having two different different glasses memory location of these banana shake are not same these are not within same glass different different glass so it will return Folds I hope now you got the difference between equality and is operator right but if me and my friend are sharing same glass we have one glass and we are sharing in that glass UI we are having banana shake and we are sharing the same glass right there are not two glasses only one glass is there at this point of time if I compare banana shake is banana shake then it will return to you because glass is same object is same the memory address is same right we are sharing the same glass there are no two glasses so at this point of time it will turn true and obviously at this point of time if I write equal to equal to definite it will turn true because we are having banana shake and banana shape right so if we are having one glass if I add cherry so obviously in my friends banana shake also there would be Cherry because we are having we are sharing same glass right so I hope now you got the difference between equality and identity operator so now if I write something like this like I am having a is equal to 5 b is equal to 5 and I am writing print ID a equal to equal to ID B yeah at this point of time you can say equality is some somewhat like is you know behaving in the same manner as is because in SVA basically compare the memory address on here here also we are comparing the same thing ID means it will give the memory address ID means it will give the memory address so we are comparing the liquidity for these I these addresses so this you can write or you can write like print a is B both lines are same I hope you got the difference between these two now and I hope you could what is is and what is is not operated so now let's see this with practically so let's create a new file for this and we are checking identity operators right dot p y the extension is dot p y right so here I'm just taking a is equal to suppose 5 and B is equal to also Phi and we are printing print K is B simple right let's run this so obviously it will return true why so because it's our same object right if you want to check then you can print the ID of these things print ID a and then print ID sorry B right so let's run this C ID of a object ID or memory addresses same as ID of B so these are same object obviously memory address is same so means these are actually same objects so a is be written true and is not will return is not well return in this case false right let's run this C is not well written Force okay because a is B so and we are checking a is we are saying a is not B but we know that a is B so that is why it will return false so it will run Force if both the objects are actually same if memory location of both the objects are same is not will return in that case false so now if if I write something like this is 5 we are writing the this is int this is string right now let's run this see you can check the ID of this ID of a this is idea of B both are different right both are different and a is B note a is not B now at this point of time these are different object so now it will return Force if I write here a is not b yeah it's true a is not B because these are different so now it will return true right I hope you got the working of these is and is not and see if I write something like this now a is B sorry a is equal to 5 and I am printing ID of a and again I am assigning a is equal to I'm uh changing the value to 6 and again I am printing ID of a right at this point of time let's just comment this out so maybe you are thinking first a is 5 and then we are assigning we are changing the value so ID would be same but no in Python it is not the case because this int is what immutable immutable object means mutable and immutable objects we are immutable means we cannot change the value of these if 1 is 5 we cannot change the value of same object at the same location to 6. for this it will create another memory address so these a and a are having different different memory address see now you can check this memory address is different from this right because hint is what like in float Bool these are immutable objects and list like list is what mutable object so I hope you know maybe if you don't know the difference between mutable and immutable object we will create a separate video for that but for now main purpose is you have to understand working of identity operators what is the entity operator is and is node when it will turn true when it will turn false and some difference between equality and identity operators right basically we use these operator like when we check some conditioning if blocks and if statements but that we haven't discussed right so that also will discuss and at that point of time we will use these operators identity operators right and if I write something like this a is equal to 5.0 right B is equal to this and ID of a ID of B and we are just checking at this point of time a is B right let's run this this point of time it will return false because these are not same object it is int it is float and ID is also different so one assignment for you is if I write something like this a is 5 then printing ID of a then again I'm writing a is equal to 8 and I'm printing ID of a or maybe you don't want to print it's up to you and a is a what do you think what output you will get true or false five and eight so this is for your assignment you have to let me know in comment section if a is a is true why you are getting true if a is a is false why you are getting false that also you have to tell me in comment section right so I hope you got what is identity operator and how this is different from equality operator the working of identity operator basically right so in the next video we'll see what are membership operators in Python so now we'll see in the next video till then bye take care