and we have discussed how to reverse a singly linked list to check out those videos I'll provide you the link in the description box you can check out there the complete a series on linked lists in data structure fine you can check out in the description box so now this is our doubly linked list it is having four nodes and I want to reverse this doubly linked list see I don't want to swap the nodes like this this node would and with this nodes 7 would go here and 6 would go there like this I am NOT going to swap the nodes what I am going to do is I'll just reverse these links find that processor we have already discussed in singly linked list how to reverse a singly linked list fine so now how you will reverse these links see we are having a head pointer and a tail pointer without tail pointer also we can reverse this link that's doubly linked list fine now see what I want to do is see the this next pointer of this node is containing address of the next node right and the previous pointer is containing address of the previous node there is no previous node that is why it is none so after reversing what I want to do so now in the next node in the next node I will store the address of the previous node not the next node after reversing it means see in the next pointer of this node address of the next node is there but after reversing I want the next pointer of this node contains address of the previous node means it should contain 0 and see this previous pointer of this node is containing address of the previous node no previous node that is why it is containing now but after reversing what I want this previous pointer will contain address of the next node that is 150 so here there should be 150 this is what reversing means swap these venues fine and finally swap this tail would point here and head would point here but same here see this node how you will do the previous pointer of this node is containing address of the previous node but after reversing I want what this previous pointer should contain address of the next node that is I want here what 500 the next pointer should contain after reversing the address of the this this previous node that is 200 so here 200 right this is what the reversing means this is what I left I will implement fine so simply what what we are doing we are swapping these values 200 here 500 here 0 here 150 here this 150 here and this 400 here this is what we will do here will be right what 0 so this 0 would be here and this 500 would be here after the reversing fine so now how we will do this thing see here obviously we are not going to move this head fine so we will take what another pointer suppose I am taking a temp pointer and temp is pointing to this node suppose temp is pointing to this node and temp is containing good this 200 fine so now how can we do swapping suppose here I write how we can access this part temp off next is equal to here I want to store what I want to swap these values so this value 0 I want to store here so how how we can write temp off previous means the temp of previous value 0 now would be stored here rather than 150 fine now it means this link has been broken there is no link like this fine now here I want to store what 150 this this address of this node but now from where I can get this 150 because see we have already broken this link so here we have now 0 we have don't have 150 so from where I can get this 150 so that is a problem now if you if you will see mommy are not going to implement this 150 we are not going made this 151st we will update this node first right so rather than writing this line what I can do you suppose if you write temp of previous now temp of previous will contain the value this this value 150 so here I can write temp off next it means here I don't have 0 now I have 115 right now here I want to store what this value 0 but here we have already updated that is 150 so from where I can get this this value fine it's not like that we simply write temp off next is equal to 0 and that is fine no because here I cannot write suppose at some point of time temp would be here so I cannot write here 0 we are our main motto is what we are going to show up these values so now we cannot do this thing now what we can do we we have to store this this point this address also we need some another pointer so now we are taking one more pointer suppose I am taking one more pointer here that is I am taking the name next node right and I'm not taking temp I am taking boat current you can take any name temp temp 1 as you wish fine and when I assign this current is equal to head means now current to this pointer is containing this address and the same time after that we have I al assign what next node in next node I will assign 150 from where I can get 150 so I'll write next node is equal to here from here I can get 150 that is current off next now next node is pointing to here now you can update this thing right now suppose you write current of next is equal to current of previous means you have updated this thing here we have 0 now here I want to store this value that is address of this thing 150 now from where I can get 150 because this thing we have already updated from here I can get 150 because I have set a pointer to this node already before dating before breaking the slink right so now I can write current previous is equal to next node and after that we will move this current and next node would be this node now so you have to maintain what two pointers fine so now I will write the code see so now this thing I hope everybody knows we have discussed many times what is this we have defined our own data type the data type of this node that is struct node three parts are there one is data part and to our next and previous pointers right and we have already we have declared here two pointers that is head and a so here I can write a straight head straight thing or if you don't write here simply you can do semicolon here and after that here you can write this data type struct node s trick hat and a string a fine after that you can call that function create a dll that we have already discussed and you create this doubly linked list and after that we will call a function that is the reverse of this dll so now I already find this function that is reverse doubly linked list right so now in this case now for reversing this list for reversing these links we need two extra pointers right so here we will declare these two pointers and how to declare I think the syntax you already know because we have already discussed the sin takes many times in the previous videos right so now I have these two nodes you study these two pointers current dead next fine now see if you can write down a condition if head is equal to is equal to null it means there is no node in the list list is empty so we cannot reverse this list else in else part what you will write I'm writing that to me I'm not going to write that if condition I guess you can write that condition that is very easy fine and we have discussed we have already written that condition many times in the program fine the first step is we are going to point this current here so here what I want to store that is 200 so now from where I can get this 200 200 so here after this what I can write this current is equal to head right now this is pointing to this node only and before updating the for reversing before swapping these values I will maintain and set a pointer to this node also so that if we lose this if you break this link we can easily get this address fine for updating these values for reverse for swapping these values so here here I will write what this next node is equal to here I want to store 150 from where I can get 150 here the pointer to this long thus notice current although we have held but we are not moving this head where we will move this current so that is why I am using this current and next right so 150 will be stored here now what I can do now we can swap these values so now what you will write see how you can access this part current off next so here I will write current off next is equal to Here I am on post or whatever the value here in this pointer how we can accept this pointer current previous so here I will write current previous so now we have updated this link and we have here zero because the in current previous we have value 0 and that would be stored here in the current and next so now there is no this link is no more now right and now here I will post or what 150 here we have 1 we had 150 nough so this this this this after reversing this previous link should contain address of the next not the previous that is what reversing so from where I can get 150 in the next node we have 150 that is why we need this next node so here I can write what current of previous as equal to next node right so now here I have 150 right it means now this is pointing to here right and this is pointing to here none so we have reversed these links right now come to this node fine now we will move this current right so now current in current pointer I want to store 150 from where I can get 150 next node I have 150 so here I can write current is equal to next node right now current is also having 150 this pointer now this pointer is also pointing to this node now the current node is this one now I want to swap these values see this previous pointer this previous pointer is pointing to this node but I want this pointer should after reversing this pointer should point to the next node that is why I want to reverse this link this link I want to break this link and I want that here III store 500 right this value and here this this pointer is containing address of the next node but I want this pointer should contain address of the previous node that is 200 so here I want to swap these links now so we will repeat the same step right so these steps I will write in a while loop till we reach here right so now here I read before the DS line after this line while and you will write what this current pointer not equal to none well then we are going to repeat these four steps please don't write this step in while loop because again we will enter into while loop then again current would be head so again current will point to this node but I won't I don't want this thing because we have done with this node now we are at this node will deal with this node then with this node then with this node till we reach to the this null so here I'll write current not equal to null fine see we have done one iteration now in current we have next mode that is 150 now 150 is not equal to null fine again we will intend to this loop now next note is equal to current off next now in current of next we have current is pointing to this node current next we have 500 so that would be stored in next node so now this next node is pointing to this node now we can update this this link and this link current the next current of next is equal to current of previous that is here I will store 200 so now there is this link is no more and now 200 means here so now this is pointing to this node right so now this this will point to this new the previous one we have reversed this link right now this one here current of previous means current previous that is here is equal to next node next node we have 500 so here I will store 500 so this link is no more now now this is pointing to this node right now we are done by this node also we have swapped these values now we will do what current is equal to next node now we will move this current in next node we have 500 so now here we will have 500 so now this is pointing to this node so I will write here again why loop current not equal to null yes current not equal to null again we will enter to enter into this loop now next node is equal to current the next so in next node we will store what current of next that is 400 so here I am writing this one now next node is containing now 400 right so now next node is pointing to this node now we are going to swap these values same current and next is equal to current previous so here 150 this link is no more now and this this is now pointing to this node right and this one current of previous current of previous current is pointing to this node current previous here will store next node next what we have in next node pointer we have 400 so now this is this this this is now pointing to this right now we are done with this we'll move now current is equal to next new now in current we have 400 so now current is pointing to this node only right and next node is equal to current next in current and x2 we have 0 so next node we have 0 it means now next node is not pointing to any node now see we will swap these values current next is equal to current previous current next means here we will store this current previous value right so now this is now what pointing to this node 500 this address and current previous is equal to next node current previous this value is equal to next node in next node we have 0 so here we will store C so now this is pointing to 0 right now current is equal to next node now current in current we have 0 because current is equal to next node next one we have 0 so now current is also not pointing to this mode now again 0 not equal to 0 but this condition is not true right so will not enter into this loop and we are done we have reversed these links but now still we have something left we have to swap these pointers also head would be here and tail would be here after that reverse operation would be completed now how we are going to swap these things see how you can swap two variables I guess you know easily after taking third variable you can swap these values right so now obviously we have two extra pointers current then next node so we can use these pointers so first of all what you will do you can do what in current we will store head will you so after this while loop after this closing you will write what current does equal to head it means in current we have now this 200 so it means current is pointing to this node right now I can update this value now I can write head as equal to a it means head is containing now 400 so now head is pointing to this node address is this one so now here this is now head right and until we should store this 200 right and from where I can get 200 in current to behow 200 so here I can write connect so now this becomes tail pointer so now this is pointing to this node right now this is done and if you want to check that this is done or not so before these line before reversing this head and tail before these lines you can print what the data head of data so it should print 6 and the tail arrow data it should print 7 right and after these line after reversing head and tail it means head is equal to here now and tail is here now so after these line if you print print percentage D and if you write head arrow data then it should print 7 after reversing and printer percentage D tail arrow data then it should print 6 before ever saying head data is 6l data 7 after reversing these lines head details 7 and tail data is 6 so this was the iterative approach to reverse the doubly linked list using recursion also we can reverse the list fine and after the worst thing you can do it something like this see it if you print this before reversing then it will print 6 5 1 & 7 after reversing if you will call the display function that we have already discussed many times how to traverse the doubly linked list it is same as singly linked list right then what it should print 7 1 5 & 6 in reverse order 7 1 5 & 6 so this is how we can draw this doubly linked list after reversing right so in next video we will implement a circular linked list we will write a C program fine how to create a circular likeness and how to display the content of a circular linked list right so also the next video is new body technique