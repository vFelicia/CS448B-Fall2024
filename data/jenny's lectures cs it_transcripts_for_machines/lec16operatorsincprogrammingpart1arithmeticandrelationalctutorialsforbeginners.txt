so in the series of learning c plus programming language in the previous video we have discussed input and outputs in c plus plus basically seen and see out objects how to use scene and say out to take input to print output on the screen with the help of a program right now the next con concept is operators in c plus operators in c also there that also we have discussed right when we're discussing c programming language now we'll see all the type of operators in c plus plus right with the help of proper program for each operators plus operator precedence operator associativity everything we are going to discuss right one by one right now first of all what is an operator see it it is just a symbol which is used to tell the compiler know which type of operation you know specific operation it whether it's logical or mathematical operation is to be performed right it's just a symbol to tell the compiler right which specific mathematical or logical operation is to be performed on the operands right the things or the data on which the operation to be performed is known as operands right see if i write something like this 5 plus 3 means plus is what here addition means operator just a symbol which tells the compiler what edition to be performed on the data five and three five and three is what operands so these are operands this is operator right now basically three categories of operators are there first is what unary operator then binary operator and ternary operator unary operator means they need only one operand binary means they work upon two operands and ternary means three operands right like just for example you can say this increment and decrement operators although we'll discuss one by one everything so they need only one operand like plus plus a a is what a single operand so they work on single operand binary means like this plus this plus needs two operand one two so this is binary ternary means only one operator is there which comes under this category that is conditional operator which requires three operand this also will discuss right now let me see let me just show you the types of operators five basically five types of operators are there arithmetical relational logical bitwise assignment and then we have miscellaneous operators right so these basically five types of operators are there in c plus plus arithmetic relational logical bitwise assignment other some operators come into miscellaneous category those also will discuss first thing we'll discuss arithmetic operators so i guess these are very simple arithmetic operators are plus minus uh into multiplication divide modulo plus two more type of operators comes into arithmetic that is uh increment and decrement operator so plus plus minus minus plus plus is what increment operator minus minus is what decrement operator so these operators are binary and these two operators are unary so these are arithmetic operators i guess no need to tell you the meaning of plus minus into divide and all may be modulo in modular you will be confused so let me just take one example like if you write suppose i am taking two variable a is equal to 10 b is equal to 3 and i'm just printing c out a mode b equal to right and i'm printing a mode b that's it so 10 modulo 3 what output you will get here the output of this a mode 3 is what it will give you remainder so when you divide 10 by 3 the remainder would be 1 so it will give 1 and divide the vision operator will give three three threes are nine so i guess uh many students were confused in this modulo and this divide the white will give three in this case and this will give remainder just you have to you know uh remember this thing it will give remainder so 10 when you divide 10 by 3 the remainder would be 1. if you divide 10 by 5 suppose b is 5 the remainder would be 0 so now it will give 0 right now these two operators are little bit tricky so let me just explain these two operators now increment decrement these are also of two types three increment and post increment now predecrement means what ah let me just one take one example like i am taking in a is equal to 10 right so if you write now preincrement means plus plus a preincrement plus plus a pre behave right before post increment means a plus plus post means after so the symbol this operator would be after this operand pre decrement means minus minus a post decrement means a minus minus right so the meaning let me just tell you see suppose here we are taking one more variable b and b equal to plus plus a and we are just printing c out a and b with n i'm not writing the complete program i'll show you these thing with the help of program also on my laptop just just the logic main logic right so now what would be the value of a what would be the value of b what value would be printed c this is what first of all preincrement so preincrement means first it will take the value plus plus a means 10 first the value would be incremented means 10 becomes 11. it means it will add one to the the syntax is what this one like plus plus expression here you can write so it will add 1 to the expression right and decrement means it will subtract 1 from the expression like minus minus expression this this is for pre for post you can write expression ah plus plus and expression minus minus that's it now this expression this expression or the operand may be any arithmetic any of the arithmetic type or a pointer you can use pointer also right we can also use these kind of operator with a pointer with properly defined pointer some pointer is pointing to any object then you can increment that pointer you can decrement that pointer right that also we will discussing when we will discuss pointers right now see so it will add it will take the value 10 it will add first the value 1 to the value that is 11 and then the modified value it will return so now it will return 11 so in b 11 would be stored and a also becomes 11 so whenever the program would run see whenever in main function control will come like before the sphere main function so in memory we have a variable in memory we have b variable here we have any garbage value now b is equal to plus plus a now plus plus a means it becomes 11 and after that this 11 value would be assigned to this b now a and b both will 11 11 so it will print 11 and 11 right if same i write here a plus plus this is what post increment now listen to this carefully post means first the value is 10 in b now we have nothing so post increment of decrement operators works how it will take this object like a 10 create a copy of this object right in that also we have 10 right now first it will return the value original value 10 it will return so the 10 would be assigned to this b first in b now we have 10 and after that the value would be incremented now 10 becomes 11 at this point of time it will print a is 11 and b is 10 this is the main difference let me just discuss it with the help of these operators decrement a minus minus okay now what it will print see this is post decrement post decrement means the original value this expression right this will return the original value of a and after that the value would be decremented so original value of a is what 10 so it will return 10 so now 10 would be assigned to this b and now the value would be decremented now this this was 10 10 becomes 9 so it will print 9 and 10. right if i take minus minus a it is predecrement predecrement means first the value would be updated updated means decremented by 1 so at first we have 10 in b we have nothing so at first the value would be modified decremented by 1 that has become 9 and that 9 value would be the modified valued the modified value would be returned would be used so now it will return the modified value modified value is 9 9 so 9 would be assigned to this v9 so now it will print 9 and 9. i hope now difference between increment decrement pre and post is clear to you guys right we will see complex example also in the same expression like we are using more increment operator more decrement operator in the same expression only right then what value would be printed but first of all we will you know discuss the precedence right then only you will get those complex type of questions so those also will discuss this video just to make you understand the basic the meaning of these operators right so arithmetic operators i think clear to you now next is relational operator see relational means it will show some relation between the operands you can see these are also binary operators so relational operators are something like this double equal to not equal to less than greater than less than equal to greater than equal to so this is what double equal to means to check the equality suppose let us take one example i am taking int a is equal to 10 and b is equal to 3 right and if we check a equal to equal to b the result of these operators will give you true or false right is a equal to equal to b no so it will give force that is 0 now a not equal to b a not equal to b ace and b is 3 yes it is true so it will give true a less than b is it true no false a greater than b yes that will give true the result would be true that is one zero this is one now a less than equal to b it is less than or equal to it is is it less than no or equal to no so it will give you false that is zero and a greater than equal to b yes greater than b it is it will give you true so these are basically to show the relation between the operands or here you can write down any expression also right rather than just a and b like i am writing a plus 3 equal to equal to b plus 10 what it will give you that you have to tell me in common comment section so this is what expression right so on the left side also expression on the right side also some expression you can write right but see this kind of thing you cannot ah use with the increment and decrement operators the operand right operand can be of any arithmetic type it can be you can say int it can be float right or it can be pointer but you cannot use any this kind of expression or any constant like i am writing plus plus 5 this will give you error this value this value would be modifiable value this cannot be a constant value right this can be a variable or a pointer i hope you got it here also we cannot write like plus plus a plus 3 this will also give error or let me just give you this assignment also you have to try this thing also what it will give and what it will give you have to tell me in comment section right maybe it will not give error let we will just try this also so i hope these operators are clear to you suppose i am writing a is also 3 and b is also 3 then this in this case what would be the output of these all these operators this also you have to tell me in comment section this is for your assignment a also three b also three in that case the output of these operators right then this also you have to tell and this also you have to try if you don't want to tell you just at least you try right with the help of program so now let me just show you programs on the both these operators arithmetic and relational operator we have this file operator stored cpp i have already created this file because we don't need to write any you know complex code just simple code is there so first we'll discuss arithmetic operators let me just comment out all the other operators here all right see i hope you can see this just we are the head of header iostream then using namespacest then main function and here we are discussing arithmetic operators first i think these are very simple i am just discussing addition subtraction multiplication division and modulo x is 10 y is equal to 3 right so now this just you have to write an x plus y minus y into divide or modulo and that's it candle i hope you go this is a manipulator that we'll discuss in a separate video also but the meaning of this is just to add a separate line right the cursor would be after printing this edition whatever then double quote that would be as it is printed on the screen and after that we have endl x plus y would be printed end and means the cursor would be in next line so next output would be started from the next line only so let me just save it and run this see x 10 y 3 so addition would be 13 subtraction would be 7 multiplication 30 division would be 3 and modulo is 1 because it is remainder right so i hope this is clear to you now let's just discuss increment and decrement operator and let me just comment this out right in single line also you can write down these all these operators but that you can try out at your own right now this is increment and decrement operator see i am taking x 10 simply y now y is equal to plus plus x and i am printing x and y then i am printing y is equal to x plus plus then just printing x and y right see in between also i am writing n its not like that n l would be always be at the end of the c out statement no in between also you can just whenever you want to i know add a new line just use this manipulator and so after printing x value i want then y values should be printed in the next line so i am writing handle just these operators insertion operators and end right now let me just run this and show you what output you will get see first values are 11 11 right because first is plus plus x that is preincrement so value would be incremented first and the modified value would be ah returned so that would be stored in y and next is what x plus plus that is post so x value would be incremented that is 12 and y value would be the previous value the original value of x original value of x is 11 right so that is 11 11 why 11 because previously also we have used plus plus x so that value previously it was 10 it's starting then it becomes 11 and after that it becomes 12 right so i hope now this output you will get so original value is 11 for this 11 would be stored in y and then x plus plus means 11 plus plus means 12 12 would be printed right so i guess for minus minus you can try out at your own or if you want me to try out just we do minus minus x and x minus minus right let me just run this and show you the output see 9 9 first statement would give would give 99 x is 10 pre decrement so first the value would be decremented and then decremented value would be returned so decremented value would be assigned to y that is 99 now the value becomes 9 the modified value of x is 9 now again we are writing x minus minus so now the value of x is 9 this is post so the original value of x is 9 so 9 would be first of all return that is stored in y and then becomes 9 minus minus that is 8. so x is 8 and y is 9. i hope you got this concept plus plus incremental decrement operators right now if if you write here see if suppose i am writing here rather than this plus plus i am writing 10 right see it is showing a red line expression must be a modifiable l value right 10 is not a constant so we cannot use a constraint here right see l value required as decrement operating decrement operand so operand should be modifiable l value so constant we cannot use if i want to use expression like i am writing here x plus 2 and this thing so still it is showing red line expression we cannot use let me just run this and show you same l value required as decrement operand so this operand should be you can say modifiable that can be modified modifiable l value right so that's it expression you cannot use operator you can use here if i take something like this like after writing float 10.678 and here i am writing minus minus x now let me just run this and show you it's same nine point six seven eight nine eight point six seven eight and nine right i hope you got this thing because see nine point six seven eight because of x and y we are taking int that is why it is just taking into value 9 only so you can take float here then run this and now it will give both x and y float values right so now any arithmetic type of value the operand can be of any arithmetic type of value or any pointer so this is for these operators let me just comment this out and let me just show you now relational operators so these are now relational operators right so see you have to put this x less than y into these brackets otherwise it will give error right these operators a relational operator you cannot likely use you have to put the these brackets so let me just run this less than y greater than y all these operators i have written here and the output is see x less than y one that is true three and six the value is three and six so you can see x greater than y no x less than equal to y yes one x greater than equal to y no x equal to equal to y equal to no not equal to true that is one so the output of these relation operator would be true or false these are going to show some uh you know show relations among the operands right now uh here also you can x plus 1 or y plus 1 these kind of things you can write and you can try out at your own what kind of thing they'll give see if i'm writing here x plus 1 and y so for the first expression it is giving poles 0 x plus 1 becomes 4 y minus 5 becomes 6 minus 5 that is 1 so 4 less than 1 no 4 is greater than 1 so it is giving 0 so with these operands can be any expression in this kind of thing but in those increment and decrement operator you cannot ah take those operand as expression right so i guess these two operators are clear to you guys if you have any doubt you can ask me in comment section right now in the next video we'll discuss logical and bitwise operators so now i'll see in the next video till then bye take care