so in the series of learning Python programming languages in the previous video we have seen one coding exercise like you have to calculate uh BMI body mass index right now in that case we have seen something like this the weight should be in kilogram and it should be considered as in height should be in meters and it should be considered as float something like this and the final output should be a whole integer not in fractional part like if I enter weight 48 and height 1.5 then directly it will give like 21.33333 something like this but I don't want this number I want whole number like 21 only integer I want for that what you have done convert this into int type conversion we have done right in this previous exercise but one more thing we can do is we can round off this number rather than just forcefully converting that into integer just round off the number right like if it is 21.3 it will give after rounding off it will give you 21. in mathematics I have I hope you have done these kind of calculation if the number is 21.67 so the after round off it should give 22 because after decimal it is greater than 5. and here it is greater than it is less than 5 that is why 21 and the nearest integer of this is 21 and the nearest whole integer to this is 22 not 21. this is type of rounding of the number right so for this thing also we have a inbuilt function in Python that is round function so in this video we'll discuss about round function what is round function and there are many thing we can do with with this round function and there are some tricky things also and some special cases also like how to break a tie if after a decimal it is 21.5 then it will give 22 or it will give to anyone these kind of cases also we will be discussing in this video right so let's see I hope now you you are aware about the this working of this round function right it is used to round off the numbers now let's see General syntax of this function how you will write just you will write round and in bracket two parameters are there two arguments one is the number if you want to round off and next is number of digits number of digits right now see these two arguments are there in this case this number this is compulsory because this is the number you want to round off suppose I want to round off this number round uh I I want to round over this number 21.33 so I'll give number 21.33 obviously that this is the number so this is compulsory but this number of digits the second argument is optional right number of digits up to which you want to round off this number if if it is three three something like this I want to round off generally you up to 2 right or right so I want to round off this number up to two decimal points up to two one two so what it will give you 21.33 because after 2 it is 3 means it is less than 5. so no updation would be there as it is it would be 21.33 right so this is what the number this is compulsory to mention and this is optional the number of digits you want to up to which you want to round off the number this is completely optional and thus value of number of digits can be positive 0 or negative right by default if you don't give anything it would be considered as 0 0 means it will round off this number to 21 only it will give integer nearest to this number right so this is General syntax of round number let's round function sorry now let's take some examples and what the sound function will return see so these are some example first one we have to we want to round the seven but this is what a complete it's an integer right so it is not been affected by this round function so directly it will give you nearest integer to 7 is 7 and the output this this this what it will return 7 it will return an integer the class or the type if you you know find out using type function that would be in in the in that case the class in this case we have specified number of digits yes but it is integer not decimal so it will not affect this thing and directly it will return 7 only and the output and the type of this would be int so if n digits are not given so it will return an integer right if n digits are given in that case what it will return if it is an integer value then it will return an integer if it is a float something like this this is the case 2.66 this is float and we have given n digits right so it will return 2.67 so the output of this return value this type would be float in this case it would be float in this case it would be returned so it will return either into or float it will depend how you are using that thing right in this case we are giving 0 but we are providing n digits although it's 0 we are providing so it will return 3.0 still it is a float not int if you don't provide in that case it would be end in this case it is 7.61 but we are not providing number of results second argument is nothing right so in this case it will return eight now the output this class of this or the gray type of this would be integer so I hope you got when it will turn into value when it will turn a float value the type of that return value would be intent float right now one case has some special cases are also there like tiebreaking cases if I have something like this print around 7.5 we have seen if this value is greater than 5 means plus 1 would be added to the final result means it's seven so one would be added because nearest integer two this is eight not seven if this is 7.41 it will give seven nearest integer to this is 7. right if the value is less than 5 but the value is if 5 in that case what it will return it can return 8 also seven also so two cases are there so for type breaking in Python they have used it will return the nearest even integer E1 so 7.5 either it will give two cases seven or eight but even is eight so in this case it will return 8. but if I have written something like this round 6.5 in this case what it will return two cases can be there either 6 or 7. so nearest even integer is 6. nearest even integer to this number is 6 Note 7 so in this case it will return six not seven one would not be added to the final value so this is the in Python they have used for tie breaking in everywhere this rule will be used for time breaking right nearest even integer it will return right so for you one question is what would be the output of these two cases round 11.5 and 12.5 this is for your assignment right next is okay we are we will round off integers right so let's take some examples now see here I am using integers not floating Point number so and this this is the number this is number of digits you want to round off so this number the day type of this should be like it support int and Float but if you provide string something like this it will give error right so we cannot provide string here that should be interflow but it will not affect this integer value if number of digits are positive it is 2 it is positive so it will not affect this number it will directly return as it is the number if it is 0 then also it will not affect the number it will return six seven four but if you provide this number of widgets that value in minus negative value that will affect this number now in in which case how it will return how it will affect this thing what it will return now so it is minus 1 right so generally it round function Returns what multiple of the number closest to the multiple of 10 to the power minus number of digits this thing so if I write 10 to the power here number of digits are minus 1 so minus minus 1. so 10 to the power 1 10 to the power 1 means 10 so closest multiple of 10 so this number is what multiple oh it should be multiple of 10 so multiple of 10 is either 6 70 or 6. 80 these are multiple of 10 but closest to this number is 670 so it will return 6 7 0. or one shortcut you can apply what if it is 1 it should be negative in this case so the last last digit would be first of all be 0 this would be zero now it will round off the remaining digits so this digit is 4 it is less than 5 so it would be as it is 6 7. that's it I hope you got it if not let's take one more example if it is 2 in this case number of ways it's minus two so two digits would be zero right now round off the remaining digits only one digit is remaining six and this is it next to six is seven seven is greater than 5. so the six would be rounded off to 7 plus 1 would be added to the final result because it is greater than 5 so it would be 7. you can also check with this 10 to the power minus number of digits minus number of digits is minus 2 it is minus 2 so now it is 2 10 to the power 2 means hundred so the closest closest multiple of 100 so this number is obviously 700 multiple of 100 is either 700 600 800 something like this closest to this is 700. yes that is why it will give 700. so if it is negative value then it will affect the integer also right I hope you wrote this now next example is but if I write something like this minus 3 number of digits are three so three would be zero zero zero now what the meaning is what so generally we consider it with 0. right so it would be one now or if I write something like this 10 to the power minus 3 means 10 to the power 3 means it will return closest multiple of thousand closest multiple of thousand with this is what thousand only right and if this number of digits did this value exceed here individual number of digits are one two three so till three it is fine if it is greater than 3 like minus 4 in this case it will Return to Zero because closest multiple of now this time 10 000 is obviously it would be 0 now nothing right okay so this is your assignment now pause the video and find out what would be the out of these two pieces right so let's see here minus 1 in that case this one digit would be zero now the remaining is two digit six six six sixty six so one would be added or not because this is 5 not greater than 5 not less than five if it is it is equal to five so time breaking rule is what nearest even integer so even is what six only because if you will add one that will be 7 7 67 is not even 66 is even so it would be as it is 66 in this case this would be 0 now 67 it is 5 either it would be 67 or 68 but even is 68 so in this case it would be 680. now I hope you already means you you know uh completely are aware about this tie breaking rule so let's take one more example if I write something like this we can round off negative number also like if I write minus 8 divided by 3 that is also fine 8 divided by 3 and minus it would be given minus 3. after rounding off right now if I round off like round minus 1.5 it will give you What minus 2 even is 2 so 1 would be added like minus two if I write round like if I round it to 2 decimal minus 8.3 sorry 8 divided by 3 but up to two decimal I want to round off this number so it will give you minus 2.67 right because 8 divided by 3 would be 2.6666 something like this okay so we have few more examples this is for your assignment these output you have to tell 6.7 6.75 up to one decimal I want to round off and six point eight five up to one decimal I want to round off but we have decimal number and negative this value negative number of digits in that case if it is positive it means you have to write a round of this number up to one decimal point means it will give 674.1 only but we have negative value in this case what will happen same 10 closest multiple of 10 to the power minus number of visits this thing it will give so in this case it will be after decimal all would be zero zero zero this one would be 0 because if this is this is minus one so this is 0 and it will give 6 7. now next okay what it will return this is also your assignment you have to let me know in the comment section right now let's see practical of these things let's try out this term function on our laptop so let's create a new file I am giving the name round underscore function don't give just round dot py because round is inbuilt function so it will conflict with that thing right now simply we are just rounding off like round Simply Seven so it is integer only so it will not affect it would print seven only and also if you print if you check the type so we have a type function like type round and seven so the type would be int only because it is integer and if it is 7 up to 2 decimal 7 up to two decimal but it will still it would be 7 only and the type would be in Tony because it is integer number is integer none not decimal and if I give seven point six six something like this up to decimal and seven point six six up to two decimal in that case it will give 7.67 and in that case class would be float right the return type would be float round we will return float value right but if you do not provide any number of digits here in that case it will give 8 and the class would be internal so if you not if you're not provide here number of digits it will return it is a value if you provide here number of digits then either it will return into value or float value depending on the number you are providing right now next case is what if I write something like this 7.5 so I hope what it will return the type you got 7.5 in that case it will return 8. right it is a tie breaking case so even nearest even to this number is 8 only but if I write like 6.5 then it will not return 7 it will return 6 only because nearest even number even integer two this is six not seven two bases six or seven it can return either six or seven but even is six so it will return six so now next we can take this example like if I write six seven four two zero because it can be zero also so in that case six seven four only it will not affect this number if I write here 2 then also it will not affect this number it would be 674 only but if this is negative number minus 2 in that case it will return 700. multiple of 110 raised to power minus number of visits right so these two would be 0 0 and now 6 remaining digits would be rounded off remaining is 6 only and here we have 7 so 1 would be added that is 7. right if I write here minus 3 in that case thousand multiple of thousand nearest multiple of thousand to this number is thousand only but now if it is greater than 3 that is 4. here number of digits are one two three so up to three it is fine but if you give 4 greater than 3 then it would return 0. right negative number also we can round off negative numbers so like minus eight divided by three it will give you sorry it will give you minus 3. and if I divide up to two decimal point it will give you minus 2.67 right and something like if I write minus 1.5 it will give you minus 2. and if you give minus 2.5 then in this case it will give you minus 2 not minus 3 because nearest even integer is 2 not 3 so minus 2.5 so I hope you heard this is something about round function you can try out this function with different different examples and Rule and if you find something difficult and if you're not getting something then you can ask me so I hope you are now aware about the strong function how to use this round function in in how many ways you can use this if it is a tie breaking case special cases then how to how you can break that tie what is the rule and how you can use this with negative number how you can use here positive and 0 and negative value however you can round off a decimal number how you can round over integer value right so now in the next video we'll see F strings so now it's in the next video till then bye bye take care