we are going to represent a doublylinked list logically we have discussed in previous video introduction of doubly linked list fine so now we are going to create a doubly linked list having three nodes only and after that we are going to display that data like seven one and three this is how we are going to display the data so first of all you go through the video of introduction to doubly linked list I will provided the link of that video in this I button you can check out there now see how we can represent a node over doubly linked list that we have already discussed in the previous video so I am going to write here here that thing so this is how we are going to represent a node of a doubly linked list data type in a struct node three parts of this node are their data one is next pointer one is previous pointer this pointer is going to store address of next node and this previous pointer is going to store address of previous node right so now when head pointer is also there we are going to maintain this pointer we have this pointer when we are dealing with the program so this pointer is what containing address of the first node you can say it is a pointer to the first node so this is how we are going to declare a pointer this is name of the pointer this is a pointer that is why we are writing here estwick and this is a pointer to node which which address it is going to store address of this node fine so here you will write address of that variable whose address this pointer is going to store so now that type of this node is what struct node we have defined our own data type that is struct node see here directly you cannot write seven this will give an error why so because when you are writing this thing it means you have just declared you have just defined your own data type the memory has not been allotted yet fine so you cannot directly write here you cannot store any value here first of all we will declare a variable either a variable of this struct node type or a pointer using that variable or that pointer we can access the members of structure so I hope you know the concept of structures how we can use this structure in C language fine now globally we declared this thing because if you globally declared this day to type and this pointer then in any function you can use this head pointer and this datatype fine because in this case we are going to declare to put two functions one is create and one is display so globally out of out main from out of the main function and out of all those functions I am going to declare this now I'm going to define a function that tells create so now I'm going to write down the code to create this linked list see it is very much similar to the singly linked list code in that case we have seen how to create a singly linked list so first of all we have to create a node to store this data to insert the data in the linked list initially we assume that the slist list is empty right so if list is empty then in head pointer you are going to store would zero fine so you can initialize this head pointer with a zero I'm going to write down that thing also so now first of all we are going to create this node dynamically dynamically we are going to assign the memory to this node and how you can dynamically allocate the memory using melot function the Mellow functions index we have already discussed many times when we were discussing linked lists concept so how you would write down that thing see the the syntax says you will write that maillot keyword and here the size you want it for this node the size you want how much size for for this for for this and for for this so here what we will write here we will write size off in bracket you rewrite the data type the data type is what struct node so now automatically how many bytes would be allocated 12 bytes would be located and what melot function will return it will return a pointer to the first bite of that allocated blow now suppose this block has been allocated in the memory how many bytes 12 bytes and the 12 bytes are there in this one three parts are there of this node this this and this and the address of first byte is 250 the address of the slope is 250 so that is why I'm a lope is going to return this address so you can say it's going to return what a pointer to the first byte or you can say that void pointer and now you have to store this address into some another pointer obviously we are going to store this address into a pointer now we use a pointer variable so we are going to declare one another pointer variable suppose here I am declaring a strict new node this is newly created node for this I am taking new node see if you don't declare globally then here within this create function you can also declare what you can write struct node astrick new node so if you are using this pointer only within this function so better you declare this new node pointer locally not globally so now this will return a void pointer and this new node is what it is a pointer to node because type is struct node so you have to typecast to this thing how to typecast to this you will write would struct node s trick right and whatever this malloc will return where you will we are going to store that thing in new node so here you will write would new nodes so this is how memory dynamically the memory has been allocated to this new node so here you can say this new node is a pointer pointer that has been created and this point that is going to store what whatever my loop will return that is 250 it is going to store 250 so it will point here now right now this has been created now we we ask from the user which data he wants to insert suppose I have inserted 7 using printf and scanf you are going to take input from the user so how you will write in scanf or to unit percentage D and we cannot directly access the state have you can it says this members of structure either using that the variable of this this type or a pointer so we have declared here pointer so now how you can access the part of this newly created node using this pointer so here you go to your right address off first of all the point of name then this arrow symbol and which part you want to access data part so data Alexes see how we will draw this arrow symbol simply that an angular bracket and if you don't write this thing another method is what you can also write something like this s trick name of the pointer and then dot and which field you want to access here I want to access data so you can write down this thing here so suppose here I have entered seven so here and here first of all we restore would null so how we will store null here simply you will write what new node you want which is this part so name of this point that is what we have taken previous previous is equal to zero and new node next is also zero so now this is done now we want to insert this newly created node in the linked list at starting head is equal to none so here you can write within this function you can also write head is equal to 0 say this is the case head is equal to null so how you can insert this thing here simply you have to update this fine in head pointer what you will store the address of this node address is 250 so here you will store 250 so now head is pointing here right and in the next node also 0 there is no next node there is no previous node that is also 0 so simply what you will write here in head we are going to store head is equal to from where you can get 250 see this pointer is also containing 250 because this is pointer to this node so in head you can write new node right if head is equal to 0 in that case now we have one node in the linked list now I want to insert another node the second node in that case head is not a null now head is containing 250 so in that case how we will insert so in else part what you will write so now see in the linked list I have only 1 node I have only one node inserted now I want to insert another node so suppose I have created one another node by running this code again again the has been allocated dynamically and suppose the address is 200 this 200 would be passed here the new node so here this new node pointer is containing the value 200 it means it is now pointing to this node and the data we have entered that is 1 and the previous pointer is containing null and next pointer is also containing none now see if head is equal to is equal to null but head is not null now control will go into else part now how we are going to insert this node here now which link you have to update see here in doubly linked list where were with you how to update 2 links fine see now if you want to insert this after this one so this node is going to contain address of this node because this would be the next node so that is this 200 200 would be here so here rather than 0 we will store 200 fine by doing this you can establish this link but this is not done now this whole so you have to update this thing also because every node is going to contain address office pre its previous node also so now here in this part which you are going to break this thing and what should be there that is 100 address of the previous node now we have established this link also so now if I ask how you can access this part so simply you will say my pointer to this node as this head so simply what we can write head of next next this point it is next head of next as equal to from where you will get this 200 from this new node because new node is containing address 200 is equal to new node so 1 link has been updated now I will ask how to update this link how you will excess this part of this node then you will say ma'am we have a pointer to this node that is new node so we can access this using new node so new node and the name of this part is previous name of previous is equal to from where you will get this hundred address of previous node and in head we have hundred so here we can store head and this is done now now you will say that this is done ma fine okay fine we have inserted this thing now the problem comes when I want to insert a third node now see now I have created another node running by running this code again this node we have inserted this to here the data here and both the previous and next pointer is containing null now if head is equal to null but head is 100 so head is not and now we are going to do this else but now we are going to run this code now see what happens here first line is head of next is equal to a new mode head head is containing hundred using this we can access this node head next means this one so here we will store new node so what does the value in new node say we have created this new this node so this addresses would be contained in this new node pointer so here this new node is now containing three hundred it means it is pointing to here so now according to this logic the new node this three hundred will be stored in head next head of next that is here so here three hundred it means what this pointer is now pointing to this node three hundred it means this link has been broken but that should not be a case the next line also new node previous new node previous is here and is equal to head head means hundred so it is pointing to here so now this is also pointing to here so that is not correct so this logic is not correct now what you will do here we will take another pointer pointer to node you can set em this logic we have already discussed in the singly linked list also so now within this function we can here within this function we can declare another pointer that is empty you can see now how we are using this temp see now now temp is another pointer and now what you will do we cannot move this head we will move this temp first of all point to this then this then this then this like this fine so now what you will do when you insert the first node if head then you will insert this node in that case head is also pointing here and you will set what M will also point here you will write something like this so here what you can write head is equal to temp is equal to new node so both head and this temp is pointing to this now this first pointer in the node so now what you write in else parts so now I am taking a case that we have inserted one node and I'm going to insert second node after that we will insert the third node right so I've created this node I have inserted the data one here we have 0 0 and new node is a pointer that is pointing to this node and containing the address of this node fine so now what do you write in else part have you replayed this thing and this thing how do you can access this part either using head or using M so here I am accessing this using temp so I can write M of next as equal to address of this from where I can get this from new node is equal to new node so now this is containing 200 means we have established one link so now you have to establish this thing also how you can access this thing using new node previous is equal to you will store here what the address of previous one right so now I will write here address of previous one is in M so I will write here M we are not going to write here head because you have discussed if you write here head what problem will be there so I will write here temp so this has been said that is hundred so it is going to point now here one more thing what we will do now we are going to move this temp right so now temp is equal to temp is pointing to this node now temp would be pointing to this node that is we are going to store 200 so from where you can get 200 from this new node so temp is equal to new node and this is the closing of else part so now temples containing 200 and temp is now pointing to this node now both new node and temp is pointing to this node we have successfully inserted the second node now see if you want to insert the third node we have created this node right we have inserted the data here we have null and null head is equal to zero head is not equal to zero so we are going to in turn two else part now see in else part what we have written temp next here what do you have to do you how to update this thing and this thing right this is going to contain address of my next node and this pointer is going to contain address of previous node we are going to update two links so now how we can access this thing see here in this case now new node is pointing to this node because we have created new node so here in this new node pointer this 300 would be store now this new node is not pointing here after creating third node it is pointing to here now see how we can access this part using a pointer obviously and we have we have a pointer ten point into this node so we don't have any problem that is why we are taking another pointer temp temp next temp is 200 temp next is 0 this way what you will store here new node new node is containing 300 so here you will store 300 it means it is going to point here 300 is address of next node 1 link has been established now second this how you can access this part using new node previous new node previous is equal to whatever you will store here address of previous node that is 200 from where we can get 200 temp is containing 200 so is equal to 10 now here 200 so it means it is going to point here and again one more thing temp is equal to new node now temp is equal to new node that is 300 so now tempis pointing to here right that is why I am taking this temp again if you insert fourth node no problem in that case new node will be pointing there when you will create the fourth node and we have the address of this previous node so we can easily update the links right so that is why I am taking this temp now if you want to run I want to write a program something like after inserting first node it will ask do you want to continue if you will press one that you can insert the second node if you again press one then you can insert third node so you can insert as much as many nodes as you want so now for the four that thing you can write after the cell else part you can write same this thing we have discussed in singly linked list say you can write the choice of the user and here you can write type 0 1 if the user press 0 it means you don't want to continue if user press 1 it means he wants to continue right so now for taking the input from the user you are going to declare one another variable that is choice so we can declare this choice variable within this function somewhere here suppose I am taking here int choice right and starting I am taking choice as you for do one so when the user enter one the choice is 1 it means new node should be created again again and again so that is why you are going to write this code this code into a loop fine so here before this line before this line new node is equal to struct node here you will write what while choice it means when choice is equal to 0 when you will pass 0 here this code will not be executed so that is why here you can start while loop and here you can close this file loop and if you press 0 it means the new node would not be created if you press 1 it means here 1 would be passed so this code will be run again so this is how you can create as many nodes as you want in a linked list now suppose after inserting 7 1 and 3 again it will ask do you want to continue I am new have pressed zero it means this code would not run again so after this you can call what display display function and this list should be printed that is 7 1 & 2 so how the display function will work that function is same as singly linked list function the coding would be exactly same that we have discussed in singly linked list fine so I am just going to write down that code here just for a brushup you can write down this code you can pause the video and you can note the score so I'm going to rub this now so now this is the code for the display function for displaying the content of this list this code is same exactly same as the code of singly linked list we have discussed this code in that case in details so I'm not going to discuss it in detail here right this is the same we have discussed when we have taken one temp another pointer we are going to start here first of all temp is going to point from here temp is equal to head so here and one by one we are going to print the data and then we will move temp C we are going to print the data then we will move temp is equal to temp next then print the data again we will move until temp not equal to zero it means when temp becomes zero then you are going to stop right and in main function you can call the create function also and this display function also and say this thing we have declared globally outside of main function and outside of both the create and display function so in next video I will discuss how to insert a node in singly linked list at beginning also at any position also and at end also and after that how to delete data how to delete node from a doubly linked list so I'll see you in the next video till then byebye take care