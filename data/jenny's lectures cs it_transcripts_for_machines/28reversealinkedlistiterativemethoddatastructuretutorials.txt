so now see you can reverse a linked list using two methods first one is a pretty approach using loops and second one is using recursion so in this video we'll use what iterative approach to reverse a linked list right so now see suppose this is a linked list in this linked list we are having four nodes this is known as a node this is data part and this is what address part this is going to contain address of the next node fine addresses of this node is 100 200 150 and 300 see it's not like that the address should be always in increasing order or decreasing order any random address can be assigned in the memory fine now after reversing of this linked list the output should be something like this see here reversing doesn't mean that we are going to swap this five five would go there and seven would come here six would go there one would come here no hey what I am going to follow is the method in which we are going to reverse these links see this node is going to contain address of next node after you are saying we are going to reverse this link means now this node is going to contain address of the previous node not the next node like this fine and head is pointing here head is going to contain 300 now see this node is going to contain address of previous node that is 150 this node is going to contain address of previous node that is 200 in this case in this case this node is containing address of next node that is 300 so we are going to reverse these links fine so this is the original link list and this should be the output when you will display the link list after reversing then the output should be seven one six and five now how you will implement this thing in C program let us see that thing so now first of all we will discuss the method we will apply the method here and after that we will write down the code see how you can reverse this obviously you have to traverse this linked list fine and when they traversing while you are traversing at that only we are going to reverse the sling fine we are going to traversing the leg link list as well as with the traversing we are going to reverse this link these links so how we usually traverse the linked list we have already discussed in the previous videos using a temp pointer so suppose I am going to take here a temp pointer pointer to node so it's starting temp is going to contain hundreds who tempest containing address hundreds fine both head and M now see for reversing this this node should contain address of previous node but here no previous node is there it means previous node is what null so here you will store what null rather than this we are going to update this with zero you can exist this part by this temp temp next is equal to zero or you can say temp next is equal to previous node because after reversing each node is going to contain address of its previous node so we have to maintain the address of previous node also fine in this case right now previous node is having zero right so now this link has been broken now fine so now we cannot move here because this link has been broken so now suppose with the help of some logic we have moved here now temp is pointing here right MP is not pointing here now MP is pointing here that is temp is going to contain 200 fine I'll tell you that logic when you are writing that code so now temp is pointing here now what what you will do temp next here what you will store the address of previous node obviously you are going to reverse this link so you are going to store address of this one fine but we have already moved this temp here now how you can access this address address of this previous node so you have to maintain a pointer that is previous node pointer suppose I am taking a pointer three node and here now I am storing this hundred first of all in jir√¥ was there after that we have moved this free node and now this is pointing to here see I'm not moving this head in this case you can move this head also so now here what you will store this hundred so from where you will get hundred from this previous node so here you can store 100 so now this link has been established now this link has been broken so now how we can move here because this there is no link between this and this fine so what you can do before updating this thing before updating this thing this next part of this one what we can do we can take another pointer variable and we can point that variable here that pointer variable suppose that pointer variable name is next no fine so before so before updating this here we have 150 only so what you can do this next node is at another pointer we are taking three pointers now so next node equal to in next floor we will store 150 because address of this is what 150 so here we should store 150 from where you will get 150 from here have you panic says this node because one pointer is there pointing to this node so we can easily access both the parts so next node what you can say next node is equal to temp next now we have one pointer to this thing now you can update this thing now here we can store hundred and now this link has been broken so we have no problem because here also we have one pointer pointing so for reversing a linked list you are going to maintain one two and three pointers so in this case one previous node one next node pointer and suppose I am NOT taking this temp the name I am taking that is current node you can take temp also these are just names you can take the name of to your convenience fine so now how you will write this logic see so now we will see how to write down a C program for this thing fine C in this case also we are going to create three functions one is create linked list second one is reverse and third one is display the linked list create and display that we have already discussed the coding of those function we have already discussed in the previous videos you can check out that we do in this I button fine here I will write down the coding for this reverse function only and you can call these function into main function this thing I hope everybody knows you have discussed many times have to represent how to this big define your own datatype how to represent this node struct node data type name is struct node two parts are there in two data for this part and this is what struct no district next it will this is what a pointer to next node this is going to store address that is why I am taking here the type pointer and one link sorry one pointer we have to maintain that is head pointer this head this pointer is to the 0.02 next node so we in program we just have this pointer address of this pointer or you can say this this value only fine so this is how this you can declare globally fine so that in each function you can use this data type in create linked list also in reverse also and in display also now other than head we are going to use three pointers three more pointers so we are going to declare here these pointers that type these pointers are going to contain address of these nodes so this is how we are going to declare these three pointers fine these pointers are going to contain address of another node fine that is why I am writing here struct node and a strict why because these are pointers and starting previous node will contain what is 0 fine because this node is having no previous node so this node is going to contain this next is going to contain what 0 and Lina the address of previous node and previous node is having 0 only so that is why it starting will initialize this previous node is equal to 0 after that will this value right so it's starting in this we have zero fine and both these current and next node will be initialized with head so both will point to the first node because we are going to traverse the list fine obviously from starting node only we are going to traverse so here what you will write both the current node and next node will contain whatever the value in head in head we have 100 so here hundred and here also hundred so now this is also pointing here and this is also pointing to the first node now we are going to start the traversing till where till here what condition you will write obviously this means the end of the list means that this next would be zero so in while loop what you will write while next node not equal to zero we are going to move next node then current node and previous noodle so this is how we are going to move these so next node not equal to zero till then we are going to move so now we are going to write down the main logic please concentrate on this thing see now both next node and current node are pointing to this node now before updating this 200 before updating this 200 to 0 first of all what you will do you will move one pointer you can say this next node to here because once you update this to 0 you are going to lose this length so there is no way to reach here so first of all we are going to set a link to here then we are going to update this thing so now first of all we are going to move this current node here to the next node so you will update this value means current node now is going to store 200 so from where you can get this 200 from here before updating right so however right in next node what you will store next node is equal to this 200 value how we will get this 200 you can use what next node you can access this using this pointer of this pointer fine so we are using this one next node and the name of this field is what next next right so now after executing this line now the value is of this is what 200 so now it is pointing here so now you can update this link you can break this link now fine then there would be no problem so now here what you will store 0 means whatever the the value in the previous node so how you will access this thing using current node because we we can access this structure variable using a pointer so current node is pointing to this node so what you will write here current node and this part we are going to access this part that is next as equal to whatever the value in previous node right now this is going to store 0 now you have broken this link right so now this is pointing to null you can see right there is no link between this and this now so now this node is going to store address of previous node so obviously we have to update the previous node value so now this previous node should contain hundred so we are going to update this previous node we are going to move here so from where we you can get this hundred see the value of current node is hundred so here you can write what this previous node is equal to current node right now after executing this line this becomes hundred so now this is also going to point this node right and obviously we are going to move this current node also here fine so now what you will do in current node we are going to store 200 so from where you can get 200 from next node so after this you will write what current node is equal to next node and now we are going to close this while you now after exhibiting this line current node is equal to next node in next node we have 200 in current node also we are going to store 200 now current node is also pointing to this one the second one right now again this is close of while loop now again while loop will be executed while next node not equal to none now next node is 200 200 is not null again control will go within this loop next node is equal to next node next so next node is 200 next node using this next role pointed you can access this node so next node next is 150 right so here we are going to store 150 now before updating this we have to maintain a pointer to the next node fine so now the next node is going to point where here now you can break this link now you can update this thing second step so current node next is equal to previous node so now current node next is 150 so here you will store previous node previous node is going to contain hundred so here you will update hundred it means 100 is the address of previous node so it is going to point like this so now you have reversed the length this link has been broken now after this we are going to move previous node and current node also now previous node is equal to current node so 200 would be stored here now here we will write 200 fine so now this previous node is going to point here and in current node we are going to store next node that is 150 so here if you write 150 so now both current node see this current node and next node is also pointing to 150 right and there is no link between these moves now what you will do again while next no not equal to null next node is 150 if that condition is true so then again control will go within this loop now first of all before we are going to update this thing here you are going to store 200 but before updating the next node we will not Nick we will move next node to here so next node is equal to next node next so next node next we have 3 so here you will store what 300 now you can update this thing have you will update have you Alexis this thing using thus known because this node is pointing to this node now current node next is equal to previous node that is two hundreds in previous node we have two hundred previous node means it is going to maintain address of the previous node fine so now it is pointing here right now you can update previous node and current node also previous node is current node that is previous node is now going to contain 150 fine so it is not pointing here now previous node is pointing here and now we will move this current node also current node is equal to next to next or we have three hundred so here we have three hundred so now this is also pointing to here so now again next no not equal to null next node is containing three hundred so next node is not null again control will go within this loop again we are moving this next node is equal to next node next now next node next is containing zero so here you will write to zero so now it is going to point null no we're fine now what you will store here here you are going to update this link and 150 would be stored here so current node next is equal to previous noting previous node we have 150 so the value 150 will be stored here in the current node next so now it is pointing to here because 150 is at the so previous node right now previous node is equal to current node previous node is equal to current node in current node we have three hundred so here we will update this that is 300 now previous node is pointing here again move current node is equal to next node next node is the 0 the current node is also 0 both current and next node is going to contain 0 only we have previous node value that is 300 now previous node is pointing here so now we have reversed all the links but one thing you have to take care header still pointing here head should point here now head should contain address of this node that is so from where you can get 300 no problem we have previous node link and this is containing 300 that is why we are maintaining this previous node so now after this while loop you can write what head is equal to previous node 3 node and after that you can close the bracket of this function now head is equal to previous node so now head is containing what here I can write this head previous node value is 300 so now head is pointing here fine so as you can see this is the output we have reversed the link list after that you can call the display function fine and the output would be 7 1 6 and 5 and this code will work even if you have only 1 node if only one node is there that is 5 is there then output is also 5 so I hope you can write the coding for the create function and display function and I have written the coding for reverse function and you can call these function into main function so from next video we'll discuss a more operation on link list and as well as we will see doubly linked list so I'll see you in the next video till then bye bye