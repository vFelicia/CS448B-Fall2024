hey everyone I hope you all are safe and good so in the series of learning practical programming language we are discussing some exercises hurdle race exercise right in that website Rebox world now till now we have done two exercises right now this video we'll be seeing one more exercise on the same thing that hurdle race but this would be a little bit tough right now let me just show you what kind of exercise is this okay same you have to search like hurdle race and rebooks world and you can click on the first link and then which hurdle Rays you need to select we have done hurdle one and hurdle three right this is some hint you can use these functions moved on left the conditions these are some conditions and you have to use while loop and if statement so huddle three node hurdle three now we'll be moving to hurdle 4. now what is this thing see as you can see here we have the bowl of variable length so this hole is short this wall is like longer but this wall is what longer than this one so we have Wall of variable lengths right so this is the tricky part in this hurdle Breeze now see the previous one we have done like we know the wall is of one block only right so just turn turn left then move then turn right and then again move then turn right and then move right only one clock you have to pass like only one block till one block you have to jump but here it will not work for this wall for the first one see if the jump function is this then turn left first then move okay we'll the robot will be here move then turn right and then move but still there we have a ball the wall is longer right so we cannot use this jump function you have to modify this jump function for this right okay now same obviously we'll use while loop because we don't know how many times you have to jump the ball how many volts would be there because every time you reload this game every time this game would be something different right so if the same code the previous code if we run on this hurdle then see what will happen let's run this and first see I hit a ball because we cannot directly turn right and move because still there is a wall so you have to modify this thing now some hint for you is let's reload this and this would be different game this time so in reevokes World some commands move turn left we have used some conditions are there so we have used eight ball uh wall in front this thing now some more conditions are there like wall is wall on right front is clear right is clear so this this condition you need to use especially the first line right while loop if statement just modify your jump function and that's it you'll be good to go so now pause the video and try this out don't look at the solution now right be honest okay now I hope you have done this now see this jump function is not going to work but this while loop is fine why not at goal if ball is in front jump else move that is fine but you have to modify the jump function right now okay fine turn left is fine like you have to turn left then you have to move until what it's not only one move and turn right no move here in this case one more move one more move three move but in this case this wall is longer than this so four move so how would we come to know that three more four more two more only one one move you have to move right to jump the wall right now you have to put some condition so turn left and after turn left just delete this part and after turn left just put one more while condition while because we don't know how many move you have to put so if you don't know then simple which Loop you have to use if you don't know the number of iteration by Loop why now the condition we can change take from it while we have our condition wall on right this thing you have to do you have to use while turn left while wall on right while wall on right till then you have to move so just move okay you want this first turn here here turn like if the robot is here turn left then we check wall on right yes wall is on right move we will again check wall on right yes again roll on right again move like this right okay if I run this code let's run this line by line first you just see at this code the control where the control will go whenever I'll click this step through option then check if the wall in front no then else part move again else part move now wall is in front s two then jump now turn left while wall on right yes move while hold on right yes move yes move now while not at goal okay but at this point of time see yeah a robot is here it means here we have to move we have to turn and give a command turn right and then move but we haven't completed this function till now so yeah this command is working this while on wall on right and move this is working okay now just stop this and okay this is working but after a while after this while after move while wall is not on right if this condition is not true because once robot will reach here now wall on right is not true then what then turn right simple so then turn right after turning right simple one move right because the width is only one one block right it's not variable only the length the height of the wall is variable right now one move then again turn right turn right after turning right now again you have to move but not only one move till here till you reach here at the bottom now again you put some while condition while while now we have like white front is clear because we are moving like this downward so while front is clear until then you have to move if front is not clear stop right so while front is clear then move okay while front is not clear you don't have to move then which which statement need to be executed after this while loop turn left that's it turn left so this would be the jump function for this exercise okay now let me just run this for you and see what output you will get same see first you will check obviously not at goal then wall in front then jump it will go then jump function we have modified according to that it will move otherwise if wall is not in the front then just move right so here we have used like three while loops in Jump function also we have used two while Loops I hope this was not so much tough for you guys or there is some another way also it's not like that it is the only way to solve this problem here you can modify this jump function in this while front is clear here we can also I don't know one more condition like while not wall in front see it has been successfully executed and this green popup would be there at last this would be at correct X and Y position so here like front is clear rather than this we can also write on one more condition like while ah this this this thing while not wall in front maybe if you guys have done this thing also while not wall in front then also move because when you are moving downward this can also be considered as about the bottom one so while not wall in front just move right maybe someone of you has done this thing also so that is also correct so if I run this this will also work fine right as you can see here not in front move downward right so this is also this will also work fine right now maybe you have done another thing like another way you in another way you have sold this thing so that you can write down in comment section your code maybe there may be multiple ways to solve this problem also so that's it for this video now in the next video we'll see one project you can see right I guess uh that's enough on Hurdle race we will be seeing one project here only right that would be little bit tricky one so first please go through these three videos throttle one hurdle three and handle four these three videos we have learned right go through that while loop if statement then you'll it will be easy for you guys to solve that project right so see for this the number of lines of code are 20 only and if you remove these spaces this one space then it's only 19 right so now so using functions we can reduce the number of lines right now I'll see you in the next video till then bye bye take care