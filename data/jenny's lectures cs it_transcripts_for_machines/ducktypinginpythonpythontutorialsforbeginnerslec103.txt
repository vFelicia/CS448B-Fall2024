hey everyone I hope you are safe and doing good so in the series of learning Python programming language in the previous video we have seen what is polymorphism that was introduction to polymorphism right and in that video I have told you there are four ways like how to implement polymorphism using four ways first is duct typing method overloading operator overloading and Method overriding so in this video we'll see the first way that is duct typing in Python so what we'll see in this video first of all what is duct typing okay what is this feature and why we use this feature duct typing and how we can use this feature to achieve polymorphism to implement Po polymorphism polymorphism in our program right so first this St duck typing basically comes from an old sayings and that is if it walks like a duck swims like a duck quacks like a duck then it probably is a duck means if it is a known duck entity if there is a bird which is not actually a duck but if it swims like a duck if it quacks like a duck if it walks like a duck then we can consider it as a duck means it probably is a duck means we are judging that we are judging that you can say the bir based on the behavior of that bir right like okay let's take one simple example suppose there's a boy and suppose we Rahul and he's not so innocent boy like he's having a girlfriend he is not so you can say Sharif kind of Sharif type of boy and someday like uh his parents decided to get him married okay so like L alas are coming to see him obviously at that time he'll behave like an innocent boy like he's very Sharif okay so based on the behavior at that particular time or during that time maybe during one one month or 2 month because it's not that directly let Bas come and next day you'll get married no it will take some time one day one month two month 3 month or 6 month but during that those months obviously he will behave like he's very Sharif he didn't have any girlfriend right so based on that behavior like maybe the from the the parents of girls or the lyas think boy is innocent sh okay but actually he's not so Shar so we are judging based on the behavior we are judging Rahul based on the behavior during that time okay I hope you are able to relate this concept with duct typing okay okay if not we'll discuss this thing with help of an example now why basically this duct typing feature is used us why so in Python Programming this duct typing feature is used basically it allows the data types to be dynamic I hope you have heard these two terms Dynamic typing and static typing if not okay let me just clear first of all these things to you these two terms static typing and dynamic typing we'll see this thing with the help of example okay once it is clear to you then definitely you will get it what is d typing and how we are going to use this duct typing to achieve polymorphism okay now let's do practical okay so in this polymorphism demo project let's create a new file and uh duct typing do py first let's see the difference between static typing and what is dynamic typing okay okay so I want to define a function that will find out square of a number so how to define in Python def name of the function and I'm going to pass one argument okay and this function is returning like X into xÂ² right and we are calling this function square and I'll pass suppose five so it is going to return so obviously you have to print that value let's run this and it will print what 25 see it is printing 25 if I pass 5 .5 a floating number let's run this 3025 so see if you pass integer number then also it will give uh what you can say square if you pass float then also it will give float here you don't need to specify the type of this x like int and Float if you pass int according to int it will accept int and accordingly it will return the result if you pass float it will accept float right and the X Type becomes at that time float and it will return the result accordingly it isn't uh python it is dynamic typing Dynamic typing means you don't need to specify the data type of the variables at compile time okay at run time it will distinguish the data types because when you are passing five then at run time it will check okay it's five means integer so X is now integer it's 5 5.5 then okay it's uh float then X will become float but it's not the case in like C and Java there when you are uh defining a function like let me just tell you here what would be the syntax there square and then you have to specify not int float X okay we are accepting a type float and it it will return a float value and there after that in these obviously we will return X into X something like this and semicolon obviously so these kind of syntax we have in we can say in C or we can say in Java if you want to find out square of int then you have to Define one more function and there rather than float you have to replace this with int so here we are defining in Java suppose or in C let's take C is also static typing you have to Define two functions but in Python only one function is sufficient because these are these languages are static typing means you have to specify the data types before use at compile time only you have to spef specify the data types of the variables right but here no need to specify the data type that is why it is dynamic typing and it is type of static typing when you tell the data types of your variables and Methods at run time sorry at compile time only I hope you got the difference between now static typing and compile uh Dynamic typing so python is a dynamic type language okay and basically this feature duct typing allows python to support data type to be dynamic allow python to be a dynamic language in which the type of the variables or you can say the we are dealing with objects now and objects will create from class so you can say the type or the class of the object doesn't matter but what matters is what the methods it defines the attributes the methods right so let's take one example of duct typing now so basically the main reason to use this feature duct typing python is what to support Dynamic typing okay let's say we have a class duck simple example I'll take right and let's have two function here one is walk okay let's take not walk let's take swim and one function let's take um speaks quack quack how it speaks something like this so we have one class test let's have one more class I have a class dog right so in dog also I have one function swim and same second function also I'm having here speaks and that would be like maybe w W wo two classes we have okay now that class is different dog is different but both Dog and Duck can swim as well as speaks right so if I Define any random uh function suppose I'm defining anything display or catch or anything like display this function is outside of these classes okay and in display what I'm going to call the object object of any class maybe it's duck or do okay so if I pass if I want to pass like Duck object let me just clear out this thing first I'll be passing like Duck means any object I'll pass and name I'm taking the parameter name duck only okay and using this object I'll call Duck dot swim this function and same second function and just one one print like information displayed so let's create an object of duck class first so I'm I'm creating like Duck name of the object is duck name of the class is capital d d c right so I'm calling this function Now display and I'm passing the object of duck object name is what du only you can take different name as well here I can take D so I'm taking suppose D just pass D here okay let's run this and see see I'm a duck I can swim quack quack information displayed means swim and speaks both functions of this object is from du class so these two would be called now it's not like that I can pass only duck like object of duck class if I create object of dog class like B OG is equal to dog and now I'm passing this object dog let's run this see I'm a dog I can swim woof woof information displayed any object you can pass so I have told you in duct typing the type or the class of the object doesn't matter what matters is what the methods it defines the attributes the object I'm calling from dog class so this object would be past dog so it will check on this subject whether we you have defined swim method yes whether you have defined speaks method yes then it's fine it will go it will call these two functions class doesn't matter it's not like that only duck class object would be would be called no Ty doesn't matter okay so rather than than duck we can take any name like obj and if if suppose let's take another class we have a class class person and there also I have speaks blah blah blah but person is not having swim method right so after this class we are having this display now I let's create an object of person class and this time I'm not passing dog I'm passing person P let's run this C person object has no attribute swim in when you're calling this obj do swim because in person class when you call P then here the subject become from the class person so on this object have you defined swim method see in this class no we have just defined speaks that is why it is giving an error so python doesn't care about the class of the object in order to call an existing method on the object if that method is defined on the object it will be called class doesn't matter whether it's class it's a person class dog class or duck class if method is defined on that object it will be called right that is why I have told you if it swims like a duck if it quacks like a duck if it walks like a duck then it probably is a duck maybe it is a non duck entity maybe it's not a duck it's some other bird but it is behaving like a duck means it probably is a duck right and this is possible this is possible because of the dynamic typing we have Dynamic typing in Python the type of the variables or you can say the classes of the object doesn't matter at we at compile ter we don't specify the type of the variable the data type of the variable and all the data type of the variable can change accordingly at run time so we can say python is a duct typing language it means data types of the variables can change as long as the syntax is compatible here we are not having variables we are having objects so the class of the objects can change as long as syntax is compatible means as long as the methods are defined on that object right so the first time we can call this display function let's suppose with the help of D object duck object then call this display with the help of dog object pass dog and then pass person P let's just call this at last otherwise at first it will give err so first we calling with the duck object then dog object then person object so what output you should get see using duck object it is running using dog object also it is running completely fine but using person object it is giving attribute ER person object has no attribute swim or rather than just defining this uh function outside of any class we can take one more class and within that class also you can define a method and there you can pass object that is also fine like I'm defining a class maybe demo in class we have this method cell comma when object we are passing and same thing we are passing so let's run this okay now the display is not defined okay we are not having this display now we are having this in class so with the help of class object we can call this display so let's create a object of this demo class and with the help of this object we call this display see now for two it is running fine but in person it is giving same attribute so like this also you can this type of uh example also you can take in a class of method right so I hope you got now what is duct typing so I hope you got what is duct typing and we use this thing to achieve polymorphism now in the next video we'll see operator overloading maybe so now we'll see in the next video byebye take care