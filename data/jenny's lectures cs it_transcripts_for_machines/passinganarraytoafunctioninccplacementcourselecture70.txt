hey everyone I hope you are safe and doing good so in the series of learning C++ programming language we are discussing functions in C++ in previous video we have seen one coding exercise uh based on uh function overloading right so till now we have discussed basics of function right then call by value call by reference or we can say pass by value pass by reference and then function overloading right and based on that we have discussed two coding exercises as well I mean not two actually it was four coding exercises right now in this video we'll be discussing how to pass arrays to a function right it's not that we'll simply pass some variables or those integer variables or float variables that is it no when you will be actually working on projects you need to pass arrays vectors even functions to a function and many different kind of things right so same we'll see in this video how to pass arrays to a function but before that I just want to tell you one thing I have a great news for all the gate aspirant an academy is big offer is live out now what is so special about this offer now you can get flat 50% off yes flat 50% off on your gate plus and iconic subscriptions see an academy is going to start new batches for all the gate and PSU aspirant from 30th of June right as well as one more batch for placement preparation they're going to start from 30th of right and in these batches the the top faculties will be covering all the gate subjects all the cabus of uh gate right plus some special classes like preparation strategies some T tips and tricks practice questions doubt solving sessions these sessions would also be there so if you are planning to go for gate exam then it is right time to start your preparation and go for this Plus or iconic subscription so now you can start your gate 2025 preparation at rupes 9999 only and use my code Jenny to get maximum discount but one thing this flat 50% offer is valid till 30th of June only right so hurry up all the relevant links and details you'll find in the description box of this video you can go and check out now let's see how to pass arrays to a function right to understand this thing first you need to understand like what is an array the basic point so if I write something like this so if I say I have an array of integer and size is four like this suppose this is the value I have in this array 1 1 0 and 10 so if I say a the array name it will store what the Base address of this array Base address means the address of the first element of the suppose memory has been allocated to this this array and the starting location is suppose th000 or 100 so each AR element will take like its integer type so it will take four bytes so like one4 then one8 and 1 one2 so element of first address is 100 or the Base address of this array is 100 so this ARR will will store 100 so it is going to point the first element this you need to remember right array name is it's like a internal pointer by default it will Store The Base address of the array right so if you simply print AR like it will store it will print the address of the first element that is 100 and if you want to access what is the value then obviously that is a different concept we have discussed this thing uh with the help of when we're discussing like arrays in C++ you can refer those things but this you need to remember for this second thing you need to remember is we have discussed two things call by value and call by reference or pass by value and pass by reference right in call by value one copy of the elements or the arguments would be passed to the function I mean the definition of the function right and in pass by reference pass by reference we can achieve with reference variable or or using pointers so they are actual elements would be passed right not the copy of the elements actual elements actual arguments would be passed right so you can watch out that video I'll uh link that video in the side button call by value and call by reference right now while you are passing arrays to a function then arrays will be passed by reference by default not passed by value or you can say call by reference not call by value right so let me just show you this thing practically with the help of program so let's create a new F and and let's take now we'll take a array first inte a type of array a and let's initialize it here only suppose I want only five element in my array right now we'll Define a function suppose we simp simply uh we Define a function print AR to print that array right now print aray is a function let's before calling let's uh uh declare that function first so return type is void and the name of the function is print array and we pass an array as an argument right so what it is going to expect an array so in a something like this this is an array or if you don't take this name of that that array in declaration this is also fine in and that that's symbol those subscript symbol it will tell that it is going to receive an array right okay fine now print array and how to pass an array to a function just write down the name of array that's it so a r r no need to you know put the these subscript here this operator no right just simple name of that array when you are passing array to a function that's it right okay now obviously we'll Define that function right so print array and it will take an array as an argument so here you need to write down the name of that array also in function definition in function declaration it is optional right okay now if you want to print an array so what do you think if I pass ARR then maybe you think that this whole array would be passed here 1 2 3 4 5 means now in a we have 1 2 3 4 5 right and we can simp print this but that is not a case let me just show you this thing practically while we are passing this AR in AR I have told you this aray name stores address of the first element of the are Base address so the example we have seen in theory part before discussing this we have taken address of suppose first element is 100 so in ARR we have 100 so 100 would be passed so here this a this a is functioning as a pointer it's not a complete array it's a pointer it is containing 100 only right if you're not getting my point let me just show you okay first let's print now it's your quiz question size of ARR so what it will print pause the video and let me know size of ARR what it should print let's run run this and it should print 20 so see it is printing 20 because here we have five elements each in is of 4 bytes so 20 bytes right now if you want to find out the size of this array then we generally do what we can do something like this size of AR divide by size of the one element of this array you can say the first element of the aray or you can say size of Simply int because all elements are of int type so size of int is four size of AR is 20 so it will give you size of this array mean size of array means how many elements in this array are so it will give you five now it will give you five okay that's exactly we want five elements right now here if I want to print like C out size of a what do you think what it will print what it should print size of a maybe you think you are passing ARR means the complete are would be passed so size of a would also be 20 right let's run this and see it's okay uh let me just run this again and show you so first it was four five the size see this size it is printing I mean c out this is it is printing first obviously it would be five and then it is calling the function and then size of a size of eight is printing four only and see the uh that warning it's not error it's a warning like size of an array function parameter a will return size of int estri it will return size of in estri int estri means it will return size of a pointer not the complete areay right here so now you got it here a is acting as a pointer not a complete array that is why size of pointer is it pointer is pointing to int type or we can say size of pointer is four right but it depends actually whether you using 32bit machine or 64 bit machine in some machines it is taking 8 bytes also so the size of pointer is 4 bytes in my case right so it's not a complete ARR here a it's just a pointer right so one thing you need to pass here one more thing that is so how to print how to print all the these elements in this print array in this function we need size of the areay means how many elements in the are are right so you need to pass the size as well the length of that array so a r r and one more variable we pass suppose sides right and let's just calculate size here in size is equal to using this we can calculate the size right and then size we can pass or maybe directly you can write down here five right if you don't want to calculate the size because here we know only five elements are there in this array right but you can take here a global variable right size of array would be five and that variable we can use here rather than passing here size because if the variable is global like something like this we have int size is equal to 5 so this is global variable size we can use this variable throughout the program in any function So within this function also within this function also you don't need to pass here this separately size right but we are not taking here Global variable we pass here the variable size okay but now we are passing two arguments obviously you should change the prot type or the Declaration of the function one int one more int size right now let's print the array how to print let's use a obviously with for Loop we are going to print 0 to I less than whatever size we have passed sorry whatever size we have passed and then i++ and simply in see out we print a of I some space right let's run this and I'll show you now the output okay we have selected the crr okay we have you should put a semicolon here sorry here we have a comma but here we should have a semicolon right in for Loop see 1 2 3 4 5 right so we are just passing an array as an argument in function right so not the whole array is to be passed it is passed by reference so the address of the first element would be passed right now we are passing address of that array means we can anyone can modify the actual elements right because we are passing the location right so now what to do if suppose if suppose here I accidentally write here like a of 1 is equal to 56 right so see ideally print array would only print should only print the elements of the array it shouldn't alter any element right in the actual array right we don't want like to give this access to anyone one that it can the I mean not anyone two print function especially that it can modify our actual elements right but it's can say it's kind of weakness or ARR when we are passing array in a function then actual I mean the address of the are would be passed so this function can access the actual data right but we don't want that this function should modify our array element right but accidentally now it is modifying so it should give error but it should it should not give any error it will not give any error to us let me just show you this thing if after print array again I call Print array ARR and whatever the size we are passing right so let's run this 1 2 3 4 5 156 3 45 oh or after this let's put a end or slashing now you'll get it better so first print are will print 1 2 3 4 5 next is printing 156 345 because we have modified this thing here but this thing we don't want it should give an error if some someone is trying to modify this in print array so what we can do is we can just put here con right in print array this AR the parameter should be constant constant a now if some if someone will try to modify here then it will give error let me show you see assignment of read only location the location is read only this we cannot modify it right so one solution is this we should ideally use like constant a if suppose you are using a function and you don't want to uh you know give a permission to that function to modify the array element so you can use Con in parameter right now we can use another function that is set array if you want to modify the array elements right so let's define this function set array here so same it will accept like in a and the length or the size of that array and uh like for D is equal to 0 and I less than whatever the size of that areay I ++ and how to modify a of I is equal to a I suppose in each element I will add five right and after print array just call this set and pass a RR and then the size right after set AR we are again calling print array so let's see what it will print first it will print 1 2 3 4 5 okay Shi it should be semicolon same mistake again 1 2 3 4 5 then add five to every element and 6 7 8 9 10 I hope you got this and obviously we want that the set array should modify the array element so no need to write down here const obviously we will not write down here const okay now you got it what drawback can be there if you are passing array in a function right you are passing actual data I mean the size or the the location or the address of the T So anyone can modify it or to restrict this thing you can use constant parameter const parameter right or one thing we can do like if we don't want to pass here in size so a fixed size array we can pass like here we can write down in five like here we know obviously the size of array is five so we can simply write here five no need to write down here in size okay and here we directly write down rather than size five but those static type of things doesn't look good right it is looking good actually so this is how we can pass AAS to a function right let me just try onun this thing or the let me just show you the working of this thing actually on the board if you got it it's okay you can just stop the video here but if you didn't get it you can continue watching so let's see I haven't written the complete code here don't comment like it will not run it is giving errors so yeah I know it will give error it will not run it is not complete C right okay now some uh some points we have I have written here that I want to you know uh discuss with you guys so here we have an array 1 2 3 4 5 so we have array and so in AR we have suppose The Base address first is 100 then right so here we have 100 The Base address AR will store 100 right we calling print AR we are passing AR and Si so this 100 would be passed here and size is 1 2 3 4 5 so five would be passed right so here we have an array a it's not an array it's like a pointer so now in a we have 100 so 100 is to be passed so now a is pointing to here right so basically we are we are actually you know accessing the original content the actual ARR right now I is equal to z i less than size size is five condition true enter here a of I a is 100 means a of I means it means a a + I and here we have estri if we expand this so 100 + 0 and this estri means if this is in Direction operator means it will fetch the value this operator is uh help to fetch value at this address so at 100 we have one so it will patch one so one would be printed right then again I is first zero then I ++ I becomes one condition true then a of I a of 1 so 100+ a of 1 1 means this is address so one means and type is in so four by would be added not one it's not one 1 it means next element so 1 0 4 here 1 means four would be added the size of that you can say uh element so at 104 we have two so two would be exess here like this right now set array again same here we are passing the address a we have 100 like right and size is five so L first zero size is five condition true enter here a of five a of Zer a of 0 is this a of 0 + a 5 + 1 like a of 0 + 5 so here we will add directly here we will add five so it it will become six now it will become seven and 8 9 10 something like this so the original array would be modified here right and after that again you will print if you will call this print array then this would be the answer right so I hope you got this in the next video we'll see one coding exercise based on this arrays how to pass arrays in a function right so now I'll see you in the next video till then bye take care