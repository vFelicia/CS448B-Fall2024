in this video we are going to construct a binary search tree from given postorder traversal see we have discussed how to construct a binary search tree from given preorder traversal okay and now I'm going to take the same example I'm going to take the post role reversal of that tree and we are going to construct a binary search tree okay see now what is this post order traversal as you know left here right and root root is at the last position so in the last video that we have discussed preorder traversal was given we are find we have found out the inorder traversal and then using both preorder and you know in order we constructed a binary search tree the same method will follow in this case also post order traversal is given now you have to find out the inorder traversal as you know the property of binary search trees when you find out the inorder traversal of a binary search tree then that inorder traversal would always be in ascending order okay that is for sure now how to find out inorder traversal see post order traversal is given then obviously elements in the BST would be B's fine now in order to ever sell is what arrange these elements in ascending order that is in order traversal of binary search tree that is the rule okay so in order to ever sell is 5 here we have 16 17 18 19 20 60 70 and 85 and in order traversal s what how to write left root and right fine and preorder traversal was root left and right we have already discussed how to find out all that tree reversals now see it is not like that you have to find out in order after that you can only construct the binary search tree no need to find out this inorder traversal just from this post order traversal you can construct a tree but we have followed this approach in the previous video that is why I am following this approach only okay because that is very easy to find out in order traversal just arrange all the elements in ascending order okay now have to find how to construct binary search tree see first of all we have to find out route okay have to find out route to find out route you have to check post order traversal okay see from in order traversal route is something somewhere in between left and right so we cannot say which one is the route but in post order traversal see route is the rightmost part so we Traverse this post order traversal from right to left in preorder traversal so we have traversed that from left to right I will provide you the link in the description box you can check it out there so the rightmost the rightmost element has what route so here 2020 is the rightmost element so 20 would be the root of the tree now second second step is you have to find out the left subtree and the right subtree of this road now how to find out that thing to find out the left subtree and right subtree you have to check in order traversal see now route is 20 now find out where is 20 in this in order traversal in inorder traversal here we got 20 okay and this is route now see this traversal left route and right to the left of route all the elements are should be in the left subtree and to the right of the route all the elements should be in the right subtree now see this is the route so this is the route and this is what left and this is right so all the elements to the left of this route are in the left subtree so here we'll write 5 16 17 18 and 19 in the right we have 60 70 and 85 now repeat the same first set first step and second step in this also at this subtree also and at right subtree also okay now this early the problem has been divided into two parts one is this and one is this now out of these elements now first of all you can construct either the left subtree first or the right subtree first it's up to you I'm going to construct the left subtree first now out of these elements which should be the root you have first of all we have to find out the root then we find out the left subtree of that wooden right subtree of that room and to find out the root we check what postorder traversal okay now see out of these elements to find out the root we traverse the post order from right to left and we check out of these elements which which element is to the right most part in the post order traversal because root is always to the rightmost part in the post order traversal so traverse this from right to left here this this this and this c16 out of these elements see I'm not taking these elements out of these five sixteen seventeen eighteen and nineteen which element is to the right most part when we traverse this from right to left we got what first of all 16 so 16 would be the root here so out of these elements 16 would be the root now you have to find out what is the left and right subtree of the 16 to find out this one you have to check in order traversal okay now locate where is 16 in this inorder traversal here we go to what 16 16 is the root so same to the left to check out the root is in between left and right to check out 16 the to the left of 16 we have only 5 so this 5 would be to the left of 16 to the right of 16 out of these elements say I'm not taking these elements out of these element to the right of 16 elements are only 17 18 and 19 so we write here 17 18 and 19 fine now this is one element so you have to now apply same rule on these elements now find out which should be the out of these elements to find out the root we have to put check post order traversal so now check out of these elements which should be the route traverse this from right to left 17 18 and 19 which element you got first 17 18 and 19 C 18 18 is to the rightmost part out of these elements C to the left here 19 here 17 so 18 would be the route so here 18 would be the route so out of 17 18 and 19 18 would be the route to the left of it into the right of heading to find out this case you have to follow you have to check that in order traversal now locate where is it a knee in this inorder traversal here we got 80 find out out of these elements 17 18 and 19 root is 18 so find out which element is to the left of a team to the left of it in only 17 so we will write 17 this side and to the right of 18 we have only 19 so here we got 19 so this left subtree is finished now check out for the right one which should be the route check out the post order traversal traverse from right to left out of these element which element is to the rightmost part traverses from right to left 60 out of 60 70 and 85 60s right most part because to the left we have 85 then left we have 73 out of 60 70 and 85 60 would be the route now find out what is to do a left of 60 and what is to route to the right of 60 for this case check out in order traversal locate where is the 60 in inorder traversal here we got 60 okay now route is in between left and right child or you can say left or right subtree now out of these elements extends the route now out of these elements check out the in order to the left of 60 which element is there to the left of 60 out of 60 70 and 85 60 70 and 85 no no element is to the left of 60 so to the left of 16 will write nothing 70 and 85 both are to the right of 60 so both who in right to the right of 60 70 and 70 and 85 okay both are to the right of 60 so we'll write here now out of these two which is the root trace this postorder from right to left we got first of all 85 okay so 85 would be the root out of 70 and 85 85 is the root now find out 70s to the left or right obviously this is BST so without checking in order traversal you can say 70 is less than 80 so we will write 70 here only and right child is null on after taking from in order you can say locate where is 85 here we go to 85 to the right of 85 we have nothing so this is null and 70 is to the left of 85 so this should be the to the left side so this is the BST binary search tree from this given post order traversal you can find out the post order traversal of this tree and you will get the same result as it is given in the question only okay without in order also you can find out you can construct the binary search tree just trace out this from right to left 20 is here to the right side 20 is here to 20 would be the root obviously it is a BST then you can say all the elements to the left of this 20 would be less than 20 and all the elements to the right of this root is greater than 20 okay now find out a position I or you can say index I trace out this from this side to this side see first its 60 is greater than 20 85 is also greater than 20 70 is greater than 20 now 16 is less than 20 to find out the very first element which is less than root element okay so all these all these element would be to the left of 20 and all these elements would be 70 85 and 60 this would be to the right of 20 okay and repeat the same step without considering this in order again and again and you'll construct you can construct a binary search tree so this is how you can construct a BST either by finding the inorder traversal both using both poster and inorder traversal or simply considering only the postorder traversal you can also construct a binary search tree okay so I'll see you in the next video till then byebye take care