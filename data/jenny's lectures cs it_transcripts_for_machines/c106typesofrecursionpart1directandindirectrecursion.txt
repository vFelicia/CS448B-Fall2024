so in the series of learning c programming we are discussing recursion in c in the previous video we have discussed some basics of recursion like what is recursion and if a program is having recursive function if a program is having a recursion then what is the flow of execution of that program with the help of two program we have discussed two methods first one was lengthy method second one was a little bit simple one and short right so second method you will apply when that type of program comes in competitive type of exam like a gate or udc network these kind of exams right so now we will discuss in this video types of recursion basically four types of recursion direct indirect tail and nonpay and you can also say two more types of frequent like linear and three so all the types of requirements we'll discuss one by one in this video we'll discuss direct and indirect with proper example with proper program you can say and more time frequency will discuss one by one in later videos right but before there is one really one thing if you are preparing for gay 2022 exam or will be preparing for this examination then an academy is going to conduct an academy combat it's you can say type of scholarship test for gate and escs parents so here you will get a chance to compete with thousands of learners and you stand a chance to win up to 100 scholarship this test will be on 31st of october and in this test you will get 20 questions and the time limit would be 60 minutes so you can assess your preparation in just 60 minutes using live leaderboard because you can see how you rank against others from all over india with a live lead reward that shows real time ranking after every question so better to take it live to compete with the best and if you take it live you will also get a chance to win some exciting prizes you can see the detail on my screen and after every contest you will get detailed video solutions by their experts so you can identify your weak areas you can improve and you can get it right next time and you can take it for free you just have to enroll it the involvement link i'll put in the description box of this video just go to that link scroll down pick up the right right test for you and just click enroll and use my code jkl10 to unlock the test and an academy is also giving you a great offer for gate and esc aspirants if you subscribe to 12 months of an academy gate and esc then you will get extra four months on it just to help you in your gate and ac 2023 uh preparation so the price detail you can see on my screen if you use my code jkl10 you will get extra 10 discount on this paid subscription so all the relevant links and the details i'll put in the description box of this video you can go and check out so now let's discuss types of recursion so i hope you know what is recursion when a function call itself directly or indirectly that is called recursion like we have discussed this you know few example also like this function one here we have some code and function one itself calling function one right so this is our function calling and where we are calling this function in the function one only same function is calling this function is calling itself so it is what recursion right so the same function will call itself directly or indirectly so if it call itself directly that is direct recursion and how it is called itself indirectly that also we'll see with one example so this is you can say more precisely more precisely if i say then this is example of direct recursion because this function is calling itself directly right within itself it's like i'm calling myself like jenny so i'm calling myself only directly jenny so that is not a direct recovery right so this you know this type of example we have discussed in the previous video this that is very simple and this function is known as direct recursive so you can say a function is known as direct recursive if it call itself directly right so this is what direct recursive function and this process is known as direct recursion so i have i hope no need to take the example of this directory cousin indirect recursion is very important and little bit tricky also see indirect as the name says suggest indirect recursion so if it it is recursion then obviously function recursion means function will call itself but indirectly it will call like suppose i am calling myself jenny so i am calling myself directly it means that is direct 2000 but suppose i am calling pile pile is calling jiya and gi is calling jenny so yeah i am calling myself but through pile and jia that is what indirect recursion right or if i take simple this pile and pile is calling jenning this is also known as indirect recursion so this is also this is you can say one type of function pile is one type of function right so this process is what how we are calling in a circular motion in a circular fashion so one take i am taking pile is calling jia suppose gi is calling vyanj vyansha vyansha's calling suppose akash so these are function let's suppose these names are function itself so this is not recursion because no one is calling itself if akash is calling back to jenny this is known as recursion and it is indirect recursion right so when function call in a circular when function call occurs in a circular motion in a circular fashion that is known as indirect recursion or you can say c if a function call suppose this is function 1 and this is calling function 2 a function is calling another function and this function 2 is calling function 1 directly or indirectly then this is known as indirect recursion see in function 1 i am calling function 2 but in function 2 again i am calling function 1. so ultimately in function 1 i am calling function word but through function 2 indirectly so this is an example of indirect recursion right when a function call another function function 2 and that function 2 calls the first function directly or indirectly then that is known as indirect recursion and these functions are known as this this function function one is known as indirect recursive this is calling itself but through function two indirectly so function one is known as indirect recursive function i hope you are getting my point right and this function 2 is also known as indirect recursive because function 2 is calling function 1 function 1 is calling again function 2. so these are indirect recursive function let's take one example of this indirect recursion i hope you got the you know definition of this direct and indirect reversal right so this is a simple code i am taking that is example of indirect recursion here i am taking only a two function function one and function two you can take three four five function but they call themselves mutually in a circular fashion so that is known as known as indirect recursion right here i am taking only two functions see in main from main i am calling function one i am passing 5 so this is function 1 right and i am checking the condition if n less than equal to 1 return 1 else execute this condition so in function 1 i am calling function 2 so we are calling function 2 in function 2 also first we are checking the condition and again we are calling function one so this is a circular uh you know fashion we are calling function one function two let's take let's see what exactly what output you are getting you can pause the video and you can drive in this code and see what output you are getting and after that you just resume the video and see you are getting the proper output or note exact output see though first of all the control will go here now here in printf i am calling function 1 i am passing 5 so control will go here in the definition part function 1 right if you are using the calling function 1 first better first of all you will declare function one and function to both the prototype for function one and function two right how we will write in function one int and end function two and argument also only one argument of type in before this mean you can write down these two uh conditions uh sorry these two statements these are not condition so now in n we have five so whatever we are going to execute that obviously that statement we will write here this method we have discussed in a previous video how to solve these kind of problems recursive problems so this condition is true no so we are going to be into else part in else part we are going to do what return n into function 2 n means here and we have 5 into function 2 but we are passing n minus 1 that is 4 so from here we are calling this now n value is 4 this condition true no else part return n into n is what from function 2 we will do what n into function 1 and we are passing n minus 1 that is 3 so from here we are again calling function 1 condition true no so what statement is going to be executed this statement only return this here n is what we are passing 3 so n is all 3 into from here we are calling function 2 n minus 1 that is we will pass 2 now from here again what we will call this function now this time n value is 2 condition true no this statement would be executed means 2 into we are calling function 1 and what we will pass n minus 1 that is 1 so from here again we are going to call this one now n value is 1 so what statement would be executed now check the condition n less than equal to 1 yes condition true so now return 1 which statement would be executed return 1. so it is going to return 1 where from where you are calling this so this is what function 1 so function 1 is what return 1 means here we have 1 2 into 1 is what output of this is 2 now where it is going to return this value from where you are calling this this right so this 2 would be returned here 2 so 3 into 2 is 6 this becomes 6 so back to here from here we were calling this so function 1 3 this this becomes 6 6 into 4 is 24 now 24 will be returned here 24 into 5 is 120 now 120 would be returned here function 1 5 and from where we were calling function 1 5 from here so in the main function what would be returned 120. so it will print 120 that's it so it's like you can say example of what to find factorial of a number but using indirect recursion so if you are asked to find out factorial of a number using indirect recursion you can write down a program something like this and using direct recursion that is very simple right that i guess we have discussed in a previous video also see this you know the forward flow how we are moving forward in the same flow in the same process you are going to be backward this thing is very very very important if you go to this thing recursion is nothing to you these kind of programs like how to find output of these kind of program these are nothing to you very simple you just have to understand the flow up forward how you are moving forward that is very simple but mainly students get confused while moving backward after reaching the base condition how to move backward in the same flow you know half you have moved forward in the same process in the same flow you have to go backward simple as simple as that right the same path you have to take while going backward right so now uh that's it for this video in the next video we will see what tailed and long tail recursion so nice in the next video till then bye take care