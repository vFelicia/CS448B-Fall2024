hey everyone I hope you are safe and doing good so in the series of learning C++ programming language we are discussing functions in C++ in previous video we have seen the basics of function that was about introduction to function like what is function why we need function then what are builin function what are user defined function function declaration or prototype function uh calling function definition as well as four types of function function without argument and without return type function without argument with return type function function with argument without return type and function with argument and with return type right these four things four type of function with proper example right advantages of using function and all we have seen in previous video now in this we'll see what are parameter passing mechanism in function how to pass parameters right so there are two types of these mechanism uh parameter passing mechanism one is called by value and called by reference two so these things we will discuss in this video with proper example with proper program right for first of all we will discuss what is an argument and what is a parameter difference between these two these two terms are a little bit confusing let me show you this thing with uh example so see this kind of example we have seen in previous video we have a function add there we are adding two number right this is function definition here we have this is function definition right we don't have any prototype of the function because we have defined this function before calling in main we are calling this function so here we have int XY sum is equal to Z and we are asking from the user the value of XY and we are calling this function add by passing these X and Y two argument and whatever it will return it is returning a plus b see return a plus b so it is returning we are adding to int value so it will return int so return type is int and in some variable suum some variable we are holding we are patching that value whatever this add function will return right and that and then some I'm going to print right now here what are parameter and what are argument so while calling the function I'm passing X and Y so these are known as arguments right the values or the variables you pass while calling the function those are known as arguments or actual parameters right and the variables which we declare in function definition these are known as parameters so here A and B these are parameters and X and Y these are arguments so these these the parameters are just placeholder to you know fetch or to store the value whatever value you pass in arguments while calling right so but these arguments are actual values you pass so here x y means X and Y value whatever you will uh enter you user will enter like three or four those actual values are to be passed three four here and then a would be stored in a uh a three would be stored and in B four would be stored right so you know now the difference between parameter and argument and these arguments are also known as actual parameters and these parameters are known as formal parameters or formal arguments and these are arguments or actual parameters or actual arguments These Are A and B are parameters or formal parameters or formal arguments so now you got the difference between parameter and arguments right now we are passing here the value like maybe XY or rather than asking from user if I write something like this let's fix this and I'm passing three and four so the three and four these are arguments A and B these are parameters so whenever you pass here values or the variables then this data is to be passed by pass by value or call by Value method two type of mechanism are there to pass these parameters these arguments one is call by value second is call by reference so pass by value or pass by reference right now what is call by value so first we will see what is call by value right so in this case in this case these three and four we are passing this is call by value here what is this in this case call by value a copy of these variables these arguments are to be passed not the original uh arguments not the original data not the original values a copy of these are to be passed right and in parameter A and B copy of these variables these arguments are stored right so here if you take X and Y then X and Y are different and a copy of X and Y whatever the value is passed which is in a and b right it's like I have my uh like my own notes of C++ and if student stent ask me came to me and ask me like please give me notes ma'am so what I'll do is I'll not give my original notes what I'll say is you just go to that photo State shop and just copy it right so the original notes are with me and students have a copy of my notes right so whatever like this so one qu one question for you is if the now the student modify those notes like maybe highlight something or add something in those notes any definition or anything will my notes my original notes would be affected obviously not because student has a copy of my notes so in that copy only that modification would be done my my original notes are with me and those would be unaltered would be not modified by the student right you got it that is why in call by value the actual value would not be modified only the copy whatever the value in A and B that would be modified or changed in call by value because we are just passing a copy of the variables right so like this if if uh I do this thing suppose I have a function modify number and like int n this is suppose uh only the Prototype or the Declaration we can this n is optional the name of this is optional and int main suppose I have like int a variable a that is five and I'm calling this function modify num and I'm passing this a right so let's define this function here and in this we are just changing this because five we are going to pass in a and I'm just changing the value to 50 right that's it and suppose in this we will print this we are just printing this and we will print this value here before calling and after calling we are printing value of a okay now this is before and after we are printing this so what you think what output you will get pause the video and just try this out dry run this and just let me know in comments section what would be the output let's run this and I'll show you the output see before calling a is five within modify num value of n is 50 because now we are in this so within modify num the value of n is 50 after calling the function value of a is still five value of a is still five and if you are confused like here we have a here we have n so let's name this as it is a and a in that case also you will get see same result before calling value of a is five then with within modify function value of here a is 50 and after calling value of a is five still five means the original value is five and that would not be changed right so let me show you the working how this is what is the internal working of this thing so let me show you what what is happening behind the scene in call by value right so here first of all control will go to very main function so in main memory obviously in Ram that program would be loaded right so in stack in stack one stack frame or one stack frame or the memory would be allocated for this this main function this main function so now active frame is this main so now in this main we are having a variable n which is having value five right so in this stack in this Frame or the value for the the local variable for this main would be allocated right so here we have n value is five now we are printing just C out n so five would be printed now we are calling modify n so here we have n so this five value is to be passed here right now active frame is this modify we have another stack frame which is is pushed into this stag now active frame is this modify right now here we have a parameter this is argument this is parameter so here we have again n which is having five so this n and n both are different variable right this is local to Main and this n is local to this modify right now n is 50 so here we have n is 50 now it will print 50 it will print 50 modify n now as soon as we see this closing bracket means control will go back to the calling function or the caller function caller function is main here we are calling this modify now this is popped popped back from this step now everything is destroyed this n is now gone right because that was local to this function only so this memory is now freed so this n is still five because we are here the copy is to be passed and there we have modified the value in that right now modify n now see out n now again value is five so five would be printed that is why in call by value the actual value is still same and this return so this would be popped back from the St and stack and that's it right I hope you got the basic idea of the behind the scene how this is working right so now you got this what is called by value but what if you want to change the value original value in that case we cannot pass this number or the argument by call by value we have to pass this by reference so for passing for call by reference also we have two method we can use pointers or we can use here in C++ we have a concept of reference variable that also we can use the concept of pointer we have discussed in C if you have gone through my that playlist like call by value and call by reference call by reference using pointer that I'll show you here also but here More Concept there is there that that is of reference variable yes in C++ we have a you know great concept of reference variable what is reference variable let me just tell you in brief in detail we'll see about this reference variable in a separate video it's like in simple time if I say it's like an alternative name to the variable or alas of the that variable suppose you have a nickname I have like jti Jenny or any nickname so if someone call jti then obviously I'll respond if someone call Jenny then obviously I will respond right so it's like a nickname or alas name or alternative name of that variable right so in call by reference we pass the values using we pass the reference of the variable we don't pass the copy of that value we pass the reference means basically pass it's like we pass the address of that variable right suppose uh one example we can take suppose I'll give you or me and my friend are having uh something in Google Drive I have sent something in Google Drive and we both have link of that so and we have access to modify to that document or to that thing so if I will modify that document here then obviously my friend will see that modify document or if my friend will modify in that Google Drive that document then I will also see that modified document right because we both are having address or link of that one file the file is one only data is one only and we are having address of that data so we can modify that data and both me and my friend will see that modified document right and if me and my friend if suppose I have a document and I sent that document using Bluetooth or something else some other software I have shared that document on WhatsApp to my friend right so we both have copy of that document if my friend is going to modify that document then that modification will not be you know there in my file because I have my original file now we both both are having copy so that is like call by value but if that Google Drive example is like called by reference right so we just create a reference variable right so how this is going to work how to create reference variable we just use that ment symbol it's not like address of here right it's ment symbol right so here we pass a only but while in this definition of the function we are having here int this m per a or if you take any other variable that also you can take right suppose I'm taking X here so here x is equal to 50 value of x and here we are printing X right so now this this x is now reference variable of this a right so obviously in declaration also you have to modify int and the S perent symbol because here we are using reference variable so this name of the variable also you can take that is also one but that is optional in declaration right now it will modify the actual value see okay let me just see before calling function the value of a 5 within modify value of x is 50 and after calling the function value of a is 50 it has been modified because here now this reference variable this X and A both are pointing to the same location right let's uh understand this thing see if I give you example of a reference variable like I have int a is equal to 5 and we have a reference variable int this ENT symbol and B is equal to a now the both b and a now this B is alternative name of this a so what do you think what it will return if suppose both A and B are same like suppose J and Jenny both are same so obviously address of Jenny address of JY both are same so this both the statement should print same address right because this B is alternative name of the say so B is like reference variable here let's run the s c it will work or not so address of a is this and address of B is this see both addresses are same let's put andle here for a new line see now A and B both are having same address means both are same variable just with Alia's name right if you change in this a now a is equal to 56 and if you print here see out B so what it will print 56 see 56 we are just changing a but B is printing 56 and before this a56 if you print B then first B was five then it is 56 so first is five then 56 so I hope you got little bit idea of reference variable right in detail you'll see in different video it's not exactly pointer these are no similar like pointers but are having some differences so we'll see in a separate video uh difference between pointer and reference variable right but for now I hope you got the basic idea right of reference variables so that is why here I'm just creating and you have to declare while declaring you have to put this this ment symbol in declaration that's it and the data type int because this a is of int type so here data type of this reference variable while creating should be same because we are passing a that is of type and this x is just a reference variable right of this a or alas of a so just pass a here create reference variable so now both are pointing to same memory location so whatever you will change in this x that obviously would be changed in the original value right so that would be reflected outside of this function also outside of this function also right now one is this using reference variable in C++ this is the concept in C++ not in C we can uh achieve this call by reference but other than this we can use pointers as well right now if you're using pointers if you have a basic idea of pointer then how we can use because pointer variable contain address of another variable so we pass here address of the variable right so we pass here proper address of operator we'll use but here we will not call it address of operator it's just a symbol and percent symbol while you are declaring a reference variable but here it is address of because you are passing the address so if you're passing the address so here you should have a pointer variable to receive that address because only a pointer variable can contain address of another variable so we are having pointer variable int this is how we declare pointer variable this but here now in Prototype also you have to change it because here we are using a pointer variable so here data type should be in s Str right and that is fine but here we cannot use simply use x because X is a pointer variable X is 50 is nothing right here we are passing the address so we have that address in this pointer variable and to access whatever the value at that address we use indirection operator and that is also estri so EST 5 is equal to 50 now we are using IND Direction operator to access that value and we are modifying that value to 50 now this will also modify the value of a right see before calling value of a 5 after calling value of pH 50 right and here see it is printing address value of x is because we are simply printing here x and x is a pointer variable pointer variable are containing address of a so it is printing address of a not the value if you want to print value then estri let's run this now the value is 50 after modifying value is 50 so this is we are we doing we are achieving this call by reference using pointer variable and in previous case we have done this using reference variable so three things we can do three methods like basically we have methods are to call by Val and call by reference but call by reference we can achieve with two things with pointer variable or with reference variable in C++ right I hope now you got this thing the mechanism and all what is difference between call by value and call by reference so if you want to modify the original value at some point of time just use reference variable or pointer variable right or if you don't want to modify the original value just use uh call by value but in call by value is a little bit slow that process because proper copy is to be passed another variable is to be created in that function local memory in that memory right so for copying also it is going to take some time so efficiency is less right so it is a little bit slow so better to use call by reference then no copy or no copy of the content would be done right no copy would be passed just the address right and we are just directly accessing the original data right no copy is to be done so let's see in call by reference here suppose here we are passing here we passing modify n and here we have address of so not address of it's just ENT symbol while creating reference variable we don't call it address of n right so this ment symbol and N so this is a reference variable let's take a different name here suppose here I'm taking a a is equal to 50 and here we have n so it's like here we have in main function now at first we have n which is five we are calling we are just printing five we modifying we are calling this modify n and here it will see we have a reference variable a so now active frame is modify for this function this stack frame right and here we have a but which is which is a reference variable to This n so it is same as n right both are pointing to this same value five just an alternative name to this value five one is n when is a right like Jenny and JY both have name of me only right so now we call a equal to 50 means here only it will change 50 so see out n so it will print 50 and here also see out n now n is 5050 would be printed after this this Frame would be erased means this reference variable is no more now but still value has been modified it's like Google Drive example so we are getting 50 and after return this is also popped back from the stack and that's it right and if you use this using pointers in that case in this case in pointer case we are first of all main function would be called so a stack frame would be pushed to this stack right here we have like N5 so n a variable that is five we'll just print five modify address of n so suppose address of n is suppose th000 suppose address of n would be passed right so address of n would be passed so here there should be something to hold that address only a pointer variable can hold address of another variable right so that is is why here I'm creating a variable a that is pointer variable so once control will go here means this modify on another stack frame would be pushed into that stake for this now active frame is modify right now here we have a but this is a pointer variable and that is storing address of n address of n is th000 so it is storing th000 here we have th000 obviously now this is pointing to here only because address is th so using address we can access the value if you have address of me then you can obviously access me you can send gift right but you don't have address okay it's fine I don't need gifts now we will will uh we want to modify this five so if you simply say a is equal to 50 that would be error you cannot directly modify your pointer variable or address something like this right so you want to fetch whatever the value at this address so for that we use IND Direction operator which is EST so s a is equal to 50 SRI a means s th000 s th000 means whatever the value at th000 Value is five so five this value will be modified to 50 and now it will print here we have not n here we have S A if you want to print this value 50 so in Direction operator and a so 50 would be printed again we are printing here n so n is also 50 50 would be printed so now original value has been modified using pointer variable means this is called by reference using pointer variable and that was before we have discussed call by reference using reference variable right so if we have pointers like in C we have pointers but this reference variable concept is in C++ so what is use of this that thing yeah there is some you know drawbacks and also some advantages of using reference variable but that we see uh we'll see in different video separate video everything about reference variable and pointers and the difference between these two I hope you got the basic idea and the mechanism behind this call by value and call by reference so that's it for this video I hope you got this if you have any doubt you can just let me know in comment section right so in the next video we'll see some more about function some questions and how to pass arrays to a function how to pass string or how to pass a function to a function these things right so now I'll see you in the next by bye take care