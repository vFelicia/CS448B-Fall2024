so in the series of learning C programming we are discussing types of storage class in C there are four storage class three we have already discussed autost static and register now in this video we'll discuss extern stories class so this would be a little bit you know confusing or you can say tricky uh not tricky but you know more specifically if I say then application of this extern modifier or this extern keyword or you can say this extern storage class the application the use where we should use and how we should use this how we can use this that thing is little bit tricky so that also I'll discuss everything about this stories class we are going to discuss this video with the help of a program also not one although I'll know show you two programs how to use this external storage class and where to use the application with the help of two programs I'll show you on my laptop also practically now let's see what is an external storage class now you remember I guess storage class will tell four things about the variable default value default value of this external storage class would be zero location where that variable would be stored in Ram or you can say in memory the scope scope is very important up for this extern stories class that is scope would be Global now what does that mean that I'll show show you with the help of a program we'll you know discuss everything and lifetime is till the end of the program right scope is global right you can use this variable through throughout the program as well as between two files also suppose you are working on a project right means you in your team you have two members and you are working on a project on Project we have multiple files like one file is you can see this uh file one and file two two file we are having right in one file on one file you are working on another file your know another team member is working so suppose you have defined any variable or any function see this this external keyword this CL first of all let me just clear you one thing all the global variables comes under this category under this external storage class not local variables only Global variables outside of any function or outside of any no block only Global variables will come under this category no local variable right second thing see now this this is the case in one on one file you are working another file your team member is working so in one file suppose you have some you have declared a variable you have defined a variable x equal to 10 right and also this extern this uh extern keyword can be used with a variable as well as with the with the function a function can also be extern external a variable can also be external right now this variable this is what I have declared and defined see let me just clear first of all the difference between declaration and definition declaration means we have just know told the compiler the data type of that variable that's it no space allocation no memory allocation that is declaration and definition means declaration plus space space allocation here we have declared like we have told like data type would be int and we have defined also memory would be allocated and there we have in X we have value 10 so we have defined as well as declared and if we use something like this XT turn int X this is just just a declaration just a declaration means no space allocation no memory allocation for this x right so I hope this is clear to you guys fine now how to use this extern keyword we we will use extern the data type and simple the name of the variable or in with the help of you know with function also you can use this thing that also I'll show you now what does this line means now in this file I have some variable I want to use this variable in another file or you can say reuse this is what reuse so better not to Define this variable here right simply use extern int X it means here here no memory would be allocated to this x right so it is what you can say saving of memory and I'm using this x this value in second file also right so extern keyword basically we use when we want to access a variable from another file right so it will tell the compiler this extern keyword will tell the compiler that this X is not being defined here in this block this x is defined maybe in another file or maybe in the same program in the same file but in different not in the same block BL not in the same block right this I'll show you with the help of a program and it is just a declaration so it will tell that X is a global variable which has been defined already in another file maybe in another file or maybe in another blog and you just I just want to use that that X right so it will just give a reference to that Global variable so in second file if you will print a value print f x is equal to percentage d x so it will print 10 or obviously these files would be under same project like if you are working in code blocks so you'll create an project and under that project only you will create file one file two and in that only you can access you can access this thing so this is what you can say it's a type of linking link linking of two files with the help of extern keyword we are linking two files that would be done with the help of linker not compiler with the help of linker right I hope you know the execution process of C program right now same with the help of function if we have defined a function in this file you can use that function you can call that function in this file with the help of extern you just have to tell the compiler with the help of this extern that yes this X is not defined here this x has been defined somewhere else maybe in another file in the same project or maybe not maybe within the same file but in different block right not not in this block and I want to use that X so Linker will link that file and we can access this X in this file also right so basically it's reusing of this x again we are not not allocating memory to this so it is also saving the memory we are saving the memory right but as extern this is what only Global variable comes under this storage class extern storage class so this X in this file this x should be Global not local so this x can be accessed between multiple files maybe two or more files or in multiple blocks so all the files can modify this x right right so we have to use it properly so better to use better to minimize the use of this extern keyword right or use of these Global variables so extern keyword is basically used to declare not Define just to declare a global variable or a function if with a function you want to use that also you can use simply write X turn and then simply write the data type of the function and name of the function suppose I'm taking a function display that's it so it is just used to declare a global variable or a function right which will provide reference to the variable or the function which is already been defined in another file or maybe in different block right so it is just going to declare the variable or the function right in another file in a separate file so how to use this practically how to use this let me just uh show you with the help of a program I know it's a little bit confusing but I hope you are getting my points if not you can tell me in comment box right so let's take the simple example one type of example I'm taking where we will use xtern with within the same file within the same program right so we have a global variable a I have initialized it it with 10 if you not initialize this then by default Global variable would be initialized with zero and Global variable comes under which category external storage class but here I'm initializing it with 10 so in main I'm just printing a so which a it will exess obviously in main we don't have any local variable so it will exess this a so 10 would be printed now it will call function one and then function two function one we have a local variable a two and then A++ it becomes three and it will print here three in function two if it'll call it will just print hello from function two that's it right now suppose if I don't write here in a is equal to this this thing so this a would be it will give error this a is Undeclared a right and if I write here like something like this extern int a and here I'm same I'm writing in a is equal to 10 so this line will tell it is definition also declaration plus definition right this line is just a declaration it will declare a global variable a and it will tell the compiler that I want to use use a a which is defined somewhere else not within this block but somewhere else so where this a is defined here so it will print 10 right but what is the difference if you not write this thing then also it can access the global variable yes yeah the difference is if I not write a here and I'm writing after these functions after these two functions the definition of these function I'm writing in a equal to 10 now this program if you will not write this this thing extern in a and you will compile you will run this code so print F A although we have a global variable a not here but after these definition of these functions but we are using here so it will give error like Undeclared a we are using a but before this line we haven't declared or we haven't defined this a right and if we write this line see before using so uh same as before calling the function either you have to define the function or you have to give the Prototype of the that function so before using a variable also you have to declare that variable first but if we are using this line extern int a means we are telling the compiler yes a is somewhere else we have defined a not within the same blog but yes somewhere else we have defined out of this block and I want to use that a only so this time it will not give error now yeah compiler know that a is somewhere else in this program right now A is after this so it's okay it will link this a with this and it will print 10 at this point of time it will not give any error so it it will just give a reference to the global variable within the same file you can use this thing but if we are using two files mainly we use extern keyword when we want to access a variable or a function from another file right that is I guess uh the main use it's not main use of this thing so it is simple example let me just take that example so now here we are having these two files one is file 1. C and one is support. C in file one we are having a global variable index is equal to 10 this comes under external storage class CL and I have a function and I'm using that function with the keyword extern means this is just a declaration we are telling the compiler that this function has been defined maybe in another file or in another block not within this block see we have defined this function in another file here and in main we are just calling this function display right now in support do c we have defined this function display and here in this function I want to use this x so just use xter int X means we are telling the compiler that this x this x has been defined or this x has been initialized in another file or in another block not within this block so where we have defined this x here and this must be Global variable then only we can access this x here if you write this X in any function or in any block then we cannot access right so this x this extern keyword can only be used with the global variable this x is global variable so now here we can access this value 10 directly from here here we are just declaring this x no memory allocation for this x so this is a kind of reusability of this x memory Saving right and here we can also modify the value of x if we write x++ means x value becomes now 11 so it will print hello from support file and the value would be 11 so we are calling this display here right but we are not defining this display here but we have already told the compiler that with the help of this extern keyword that this function has been defined in another file not in this file or not in this block in another block so yes Linker will link these two files at the after the compilation right these two object files object file would be created and then Linker will link these files right and then yeah obviously it will go from here so it will print hello from support file and 11 so these two files must be under single project if in uh vs code Studio I'm I'll create two separate files so in that case I'm not creating one project and under one project I'm creating these two file no I'm I'll create two separate C file so in that case what I will do I'll just include the content of this file after this line I'll simply write hash include and what is the name of the file support. C in double codes support. C if you want to include another file so just write that file in double codes so whatever the content of this file that would be included here right so I hope now you are aware about that this extern keyword how to use this I hope this is not confusing I know a little bit it is but I hope I have defined I have you know explained it in a neat way if not you can tell me in comment box maybe we can uh create a another video with the help of some better examples right now let me just show you practical of this thing with the help of these programs see we have already created this file extern do c and here I'm using that one type of uh example that is two function fun we are taking in main I'm writing xter in X and I haven't declared I haven't initialized this x I haven't declared it before using it in print F I'm just printing X and I'm calling function one and function two this is definition of function one again a local variable for this x sorry this function X this function uh Function One X is equal to 1 and I'm just adding in x uh five I'm just printing in function two I'm taking y y ++ and Y I'm printing and in last I'm declaring this x I'm initializing this x in x is equal to 10 although this is global variable right because it is not within any function so this x will print what this 10 let me just save it and run this see first of all X is equal to 10 this x 10 then x 6 and uh in function one obviously X would be six because X was one we have added five in function two I'm printing in function two and then Y is equal to Y value y value would be five y value would be five and if if I don't write here this line so the same thing maybe you will say this x what this will exess the global variable and yeah we have a global variable right but this time it will give error we are using this x we haven't declared it before see it will give error this time right see it is giving what error X is Undeclared first use in this function but this is Undeclared but we have taken a global X also so it should take this value but it is not taking it will only take that when we will use extern keyword and we declare we tell the compiler with help of this line that yes we have a value of x we have already defined this X X but not within this block but somewhere in this program we have defined this x so it will search where this x is and it will access that value right now second example is this is a second file right and this is my support. C file in support do c I'm just writing extern int X and display function I'm defining this display function right and in this extern file I'm just taking I'm including this file support. C file because these are two separate files in my these are not under same project but these are two separate file that's why I'm using this including this file external word display we are telling the compiler that display function has been defined somewhere else maybe in another file so you have to link that file with this right not in this file in another file we are taking Global variable X and I'm just calling the function display right so this x when we will call call this function display this function would be called here hello from support class would be printed and this x what this X from where from extern from extern one file because here we have Global variable X and we have already told that extern index so this line we can also use within this display function right now let me just run this and show you see we are getting hello from support class and X is equal to 10 but if you don't take this x AS Global variable right and I'm taking this local variable int xal to 10 this time what error you will get see first of all let me just you know this is an error we haven't put semicolon here now let me run this and what it will give see undefined reference to this x right undefined reference to this X because this x is yes we have told this compiler that this x has been defined in another file but that X should be Global variable in another file but here we don't have any Global variable X we have local variable so this extern will not work with local variables it will only work with global variable so this x would be Global here that time only we can access uh in this file in another file right so now we have taken this as Global variable and let me just run this and show you this time we are getting same output now in second file we can we can do what we can modify this XX ++ right and now let me just run this file again and show you at this time it will print X is equal to 11 although this x is in this file but we have updated this X in another file except Plus+ right so that is also possible so I hope now you are clear with this extern keyword so I hope everything about extern is uh know clear to you why we use this extern keyword or external storage class or this modifier when we have a project large project and within that we have multiple files and I want to you know share the variables and the functions between those files between two or three or four files right at that time we use exter rather than defining the same you know variable or the same function in two three four files just Define that in one file and use that file only with the help of extern keyword just use that file or that function or that variable how to use that I have told you right so that's it for this video now I'll see in the next video till then byebye take care