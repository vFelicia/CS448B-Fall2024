hey everyone I hope you are safe and doing good so in the series of learning C++ programming language we are discussing uh functions in C++ in the previous video we have seen how actually function call works that stack function call stack what is happening behind the scene when you are calling a function right like that creation of activation record dealing with parameters pushing that into the stack that uh activation record then pop out that activation record from the stack when termination dealing with the return address return value and all right and this is basically we call it fun function called overhead right if you don't remember that thing let me just brief you that thing with this example after that we'll be discussing inline function in this video right we have this program basically a small program here we are just adding two numbers right this is the function definition add two parameters A and B return a plus b and here we are calling this function add and we passing parameter 1 and two what what is happening behind the scene how this function call Works actually when we are calling this add this function add then the control will go here and in that memory it's like we are dealing with that stack memory only so one activation record for this first first we have main function so for this main we have one activation record here right that will be pushed in this stack so here we have in we have sum and sum is zero right after we are calling this add so we are calling this add means control will go here this is function definition so one activation record for this add would be pushed in in this stack frame in the stack or this is called as activation record stack frame right now here we have a and b so a would be passed as one and B would be passed here that would be like value is two return a plus b so 1 + 2 it will return three right where it will return here here and after that it will just simply print some so this is kind of overhead just creating the activation record pushing that into the stack dealing with those parameters like copying this actual parameter to formal parameter and all right after that obviously saving that return address where you want to return what next instructions to be executed that's having that instruction pointer Base address stack pointer and all right so this is kind of overhead so uh if a function is very small yeah obviously this function is very small just addition and I have only one line it on a plus b right so this fun or sometime we have just display function rather than and and add we have display and here I'm just displaying C out the value of a and b is like whatever value you pass here one and two rather than adding right so if a function is very small then sometimes sometimes this function call Overhead might be more than the time spent executing the function means the time to execute the time taken to execute this function or you can say the execution time of this fun function is less than the function call Overhead time right so in this case we can use inline function inline function basically expanded in line while calling that function means in line function is a function which is expanded in line when it is called what does that mean I'll show you that thing also see if you want to make this add function inline function then you just have to add a keyword inline as a prefix I mean before this return type of the function while defining this function just add here a keyword so inline keyword then return type function name parameters and the function body but make sure the function should be very small or simple right uh hardly it contains like one or hardly two lines maximum right so and it's not compulsory that that compiler compiler will treat this function as inline function we can just suggest compiler by adding this keyword that please treat my function in line function because it's very small so here that function call Overhead is more rather than the time taken time uh you know the execution time of this function but it's completely depends on compiler whether it you know this function would be treated as in line or not right and sometimes even you don't know I mean even you don't suggest even you don't write this in line keyword and the function would be treated as inline function because compiler optimizations are very sophisticated right so it will treat that function in line even if you haven't written any inline keybord and sometimes you have written that in line keyword and your function will not be treated as in line function right so see now I we will discuss the advantages of using inline function the drawbacks and when to use inline function right now what is actually happening when you write here the inline keyword at the function poll while you're calling this function here here only at compile time only this the whole body of this inline function would be replaced here I mean the whole body of this inline function function gets inserted at the place of inline function call so I mean this line would be replaced with return a plus b here return a plus b so 1+ 2 return a plus b 1+ 2 means 3 so the control will not go here and back and all directly it will give you answer three so definitely it would be faster if you use in line function in your program and the efficiency would be a little bit more right but if a function contains Loops or static variables or switch or go to or a function is large then do not make that function in line function right if a function is very simple contains only one line or hardly two lines that function you can consider as inline function because see if you use more and more inline function maybe you think that yeah it is going to save time right the efficiency would be more right execution would be faster so make every function in line function but if you use more and more inline function then what happens suppose this is inline function ad and I'm calling this function in my program like 10 times or 20 times like add 1 2 add 2 three and like this 20 times I'm calling this function right so at every function call this statement or this whole body of the function gets inserted right at every function call obviously this is the meaning of inline function right right so in that case there would be you know that size of that binary executable file would be large and it may lead to sometime threshing right threshing I hope you have heard the term like threshing in memory in operating system right it's because of those page fault and swapping when page Vol and swapping is more then CPU utilization would be less and this will lead to ultimately threshing like in operating system or in memory right so that is why if you are calling this in line function many times then this would lead to this problem right if you change in this inline function right then you have to obviously recompile all the location where you are calling that function right to reflect the changes you have done in the in line function right so that compile time overhead would be more also basically in large projects and programs these inline functions would be Tre treated and no this inline function would be written in a separate file those header file or do H file so that the definition would be visible to every program right so let's run this program so this is a simple program right addition of two numbers if you run this then simply it will give you three the answer right but if I want to make this function in line so you just have to add a one line one keyword here in line let's run this and see again it will give you three now this time this it would be treated as this this body of the function return on a plus b would be replaced here like add 1 and two so it would be plac like here return a plus b so a b we know these are one and two so a plus b would be given as like three that is three so now I hope you got the idea about inline function what are inline function how to use when to use when not to use in line function and like advantages of using this function drawbacks of using in line function everything about function right so in the next video we'll see what are recursive function and what is recursion so now I'll see you in the next video till then bye bye take care