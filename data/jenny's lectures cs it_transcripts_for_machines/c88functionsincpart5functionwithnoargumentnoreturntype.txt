so in the series of learning programming in c we are discussing functions in c this video will discuss classification of functions basically four classification of function or you can say four categories of function let me write down those categories first so basically a function can be classified or you can say categorized into these four categories a function with no argument no return type a function with no argument with return type a function with argument but without return type or no return type and a function with argument and with return type any function you declare maybe in c programming language or in java or any programming language that that function must be must fall under one of these categories either this this this or this any function in any programming language right a function maybe if whenever you declare a function whenever you define a function maybe you define a function of this type or this type or this type of this type that must follow either one of these categories right so now first of all in this video we will discuss a function with no argument and no return time neither it will accept any argument nor it is going to return anything whenever you call that function right one by one we will discuss all the categories of function with proper program and i will show you practical also so first in this video we will discuss about this category of the function so here we are going to take the same example that we have discussed many times in the previous video like sum of two number that then you know you will get it better once you will get one program you can define once you will get you know one function how to declare a function after define and how to call a function no one one function of all the categories then you can you know write down your own functions right so suppose i am taking a same i know what is the general syntax of the function which is underlying which is you know lying in this category that is function name suppose i am taking fun no argument means we are not going to pass any argument so in the bracket nothing so don't leave it like this better to use the keyword void right why avoid that also we have discussed in the video when we were discussing introduction to function or in this video also i'll show you practically if you don't use this word keyword here in the bracket then what type of error or warning you will get right so if you are declaring a function so obviously at last you have semicolon and here we have return type but without return type the function is also having this function is not having any return type so means nothing means you can write down word word means nothing so this is simple declaration of the function and if you define this function same word fun here no need to write down void you can simply leave it like this right because first if you declare the function then we are defining the function in that case you can leave it like this and within this this is the function body you can write down the statement whatever you want to do in this function right and this function is not returning anything no return type so here we will not write any return statement because it is not going to return anything so you will not write down any return statement here right and simply if you want to call this function name of the function and here no argument we are going to pass because it is of no argument in this category right and in calling we don't write any return type so this is general syntax of calling the function which is under this category so now let me take that example of doing we will do sum of two numbers right or any example you can take it's up to you so how to declare that that function first void function name i am taking sum and here no argument means word i want to pass and then after that in main function what i'm calling the sum sum right that's it so now how you define this function word sum no parameter you will write here see whatever you pass here in the calling that are known as argument in the definition whatever you write here or in the declaration whatever you write here that are known as parameters right so now sum here simply write down the logic of doing sum so obviously for some suppose i want to do some two number so we have to declare two variable a b then one is sum and from user also you can ask like printf enter a and b or scanf percentage d percentage d at a software so b or here i am i'm initializing these variables here only b is equal to 7 and sum is equal to 0 so now sum is equal to a plus b and here only we are printing sum is equal to percentage d and sum that's it because it is not returning anything so here only we are going to print the sum so whenever you execute this thing control will go to the main function first and here see before main i am not writing any return time main is also a function user defined function because we write down here our own coding main main it's not predefined function right that could be a question of maybe your interview or why so by default the return type would be implicitly class is what it should it is it so if it is end so better to write down here return return statement or simply you can write down return right or if you write down the return type void means nothing it is going to return so no need to write down the return statement here so control will go first of all here now here this is your function call so whenever control will go to main some memory would be allocated to main but here we do we are not having any variable or anything right so first is function calling so control will go to the definition part where is the definition of this function here match the declaration with the definition return type same name is same and no argument we are passing no parameters are there here and here so that's it now for sum also some function also memory would be allocated right so in sum now we have a and b and three variables some so memory would be allocated to here then five b we have seven in some we have zero now sum is equal to a plus b in sum now we have 12 and here i am printing printf sum is equal to so here what 12 would be printed so now control will will reach through the closing braces now this braces act as return avoid return so now control will go back to here where you are calling this function right and it is not returning anything so whenever it will return something here if you if it will return something so here also we have to declare some variable to accept that value that is what in next category we will discuss no argument but with return type in the next you know program we will discuss that thing so it is not returning anything so no need to write down here is equal to anything right that's it now next line is we are not writing anything in the main next so next control will go to the closing places this and that is what exit from the program right and once control will go out of the scope this memory would be vanished now control will go into the here main function and once control will reach here exit from the program and then this main is also vanished the memory allocated to the screen is also you know now freed so this is what simple you know example this is very simple this classification is very simple no argument and no return time so here main is what calling function and the sum is what cold function right because in main we are calling this function so main is calling function and sum is what cold function right so now one assignment for you is you have to write down a program where you will have four function sum subtraction multiply and divide and all the function what you will call in main function so you have to write down that program and you have to practice that program and this that function should write that should fall in this category no argument and no return type right so now let me show you practical of this thing so now let me create a file with no argument and no return type right here i am declaring that function no return type means void and i'm taking some function name and no argument means here also nothing means void so in main what i'm calling this function simply sum right and here what after when i am defining the function it's not necessary that you define the function always after you know after calling after main function before main also you can define your function that is also fine right so word mean but at least before calling before this calling of this function before using the function either you have make sure either you have declared that function or you have defined that function right to get rid of the you know some errors or some unusual behavior of your program right before using first either declare or define right if you define after this after using then you must declare first so here i am not passing any argument so here only i am taking in a i'm initializing these compile time nationalization also i am doing here you can also do run time initialization like using printf and scanf you can take values right and here i am doing sum is equal to a plus b and we are not returning anything so here only what if you have done some so obviously we want that that some should be printed on the output screen so it will not return anything right so here only what you will print the sum in this function right and that's it now let me run this code see sum is equal to 12 and if you don't write down here see if you we are not writing here void blank also means we don't want to pass anything but in this case if you pass the argument here in calling suppose i am passing five and four so now logically we want that it should give error because we don't want to pass any argument but here it give is it will give correct output see it will give sum is equal to 2xc it is giving some sum is equal to 12 it is passing these arguments but here we are not having anything any parameter to receive those values so those values will be discarded automatically so it will not give any error but it will run so better don't leave the situation in dilemma if you are sure that you don't want to pass any argument while calling better to write down here this void keyword and now it will if you run this if you pass any argument it will give error like too many arguments in sum see see error is equal to too many arguments to function sum in line number seven in line number seven only we are calling so here on it is giving too many argument in function call right because we according to the declaration part we shouldn't pass any argument here right and if you don't declare the function here here if you are not declaring this function means we are calling this function and neither we are defining before calling neither we are declaring so what it will do it will do it will go to the function definition and there is no declaration because here it is going to match with the declaration so it will what it will do compiler will implicitly declare the function and it is implicitly means it it will assume that the return type of this function will be int by default right but here actually the the return type is wide so it will give some warning message c see it is giving correct output sum is equal to 12 but it is giving bonding message like implicit declaration of function sum and here in 11th line in 11th line here here we are calling this so here actually we are writing in definition return type is void but it is assuming that return return time of this function would be int so here also see it is giving warning message like conflicting types for some word and both are conflicting but it's not it is not returning anything so void means nothing so it will not give any error it will run but here if actually if you write down here rather than here i am using float sum and i'm not declaring here so now it will give error and it will not run like right see it is not running it is not giving any output and error is what conflicting types for sum assuming it is assuming that it should be the return type but actually return type is in definition it found out that return type is float so both are conflicting intent floats separate data types are there so that is why it is not going to run it it will give error in this case so better to declare function before using it first it's a good practice always you can skip this also you you just define the function before the scrolling and you skip this declaration part that is also fine but it's always a good practice to declare the function of the function declaration is also known as function prototype we are telling the compiler the prototype of the function like the return type the function name and the number of argument or the types of argument you can pass in that function right so i think that's it for this video now so this is one more assignment for you see this is the program declaration in a definition i'm writing hair void but in declaration i'm not writing word and i'm passing the argument five and four so you have to run this and you have to check what kind of error or warning or maybe correct output you are getting right so that's it for this video now so now in the next video we will see the next category of function no argument but with return types and i'll see in the next video till then bye take care