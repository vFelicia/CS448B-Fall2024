so here the very important point is if only preorder and postorder is given then it is not possible to construct a unique binary tree I am saying unique binary tree fine second point is if only preorder and postorder is given then it is possible to construct a unique full binary tree okay see you cannot construct a unique binary tree you can construct a unique full binary tree I'll show you how I will take both the examples full binary tree also on for a binary tree also and I'll discuss with you the full method of constructing the binary tree from preorder and postorder plus I am going to tell you that prick simple like how to construct a by data from preorder and postorder fine so let us take this example be how preorder and postorder is given now you are supposed to construct a binary tree fine see according to the method I am going to tell you first of all see what is the preorder here we have root left and right preorder traversal and postorder traversal is left right and root fine now first step is you are supposed to find out the root how to find out the root first element in preorder is root and last element is also root so F and F so you can say F is root of the tree now you can say here you can write F so now F is the root now next step is are supposed to find out the left subtree and right subtree of this F right so the next step is check out the successor of this F next next element in preorder is successor of this root is be fine now find out where is B in this post order traversal base at this place right now all the elements from here from starting to B would be element of the left subtree fine so the element of left pria a c e b and b these are element of left subtree and the meaning element are from h igf1 already taken as root element these are element of right subtree now problem has been divided into two parts this is the postorder now see this post would have this post order has been divided into two piles this one and this one so fine so two subproblems are there for this problem the preorder is the preorder is see if we have already taken from b2 this e so why Tilley have you come to know that that preorder is from B to e you can see the element also next step is you can find out the predecessor of this root element in post order in post order predecessor predecessor is G now find out where is G in preorder so here we have G so from B to e the previous element of G till that element from B to E those element would be the part of left subtree and from this G to last H element would be the part of right subtree now we have again I am writing preorder s be a d CN e and postorder for this problem is a c e b and b now i am going to construct the left subtree first now this is the preorder this is the post order now again recursively you have to apply the same step on this thing now see how to find out route first element this is route and here we have last element both elements are same so B is the route from these elements B is the route for left subtree right b and b now next step was find out the successor of this be in preorder successor of route in preorder that is a find out where is a in post order right here we have a so all the from the starting to this a would be the part of left subtree but here we have only one element a only we have only a so so this a would be the part of left subtree and the c eb c e d these are part of right subtree fine so left is over now thus again problem has been divided into sub problems now favor here post order is only c e and d now for this post order preorder would be preordered will also divided into two parts but see this is the sub problem that is over now for c e and d see here we have post order is c e and b for this problem preorder s divide the spear into two parts this C if you have already taken now apply the same rule find out the predecessor of this root element that is d find out where is d in preorder here we have d so we are not going to take d the previous element is a so for this subproblem the post order is a and always the preorder is also a so this side we have only one element this preorder for this c e d is what d CN e b CN e right now apply same step again route is d here we have root so here out of these element D would be the root now D we have taken find out the successor of successor of this day in preorder that is C now find out where is C in post order here we have C so all the elements from the starting to see would be the part of left subtree but we are only 1 element C so C is part of left subtree remaining remaining element is only e so e is the part of right subtree because d we have already taken so this is over now now let us consider this right side because we have only can we have constructed this left subtree now what about this one now for this subproblem post order is a I and G and preorder s preorder s GI n H G and H right so now find out route route is first element in preorder G or you can say last element in post orders so from these elements G would be the route so we have taken G now next step is find out successor of this root element in preorder in preorder that is I a next step is locate where is I in this post order now here we have I right so now from starting till I all the elements would be part of left subtree so left subtree partners h end i so here we have h end high right and there is no right element remaining because G we have already taken so right subtree would be none okay fine now again we have this post total problem has been divided into two parts so now post order is H and I and for this this preorder would be preorder would be G we have already taken I n H right again apply same step route would be I right to design from these element only and s is remaining now find out next element is H or you can say successor of this root element in preorder that is H now find out where is H in post order here we have H now all the elements from starting to this this element to tell H would be the part of left subtree but to be only one element H so at h is left subtree and no right an element is there so right element so so the writes appraised none so now this is our boundary from this preorder and postorder right now i am going to tell you the simple great now the simple trick is how to construct from preorder and postorder see root is always the first element in preorder okay fine we have F is the room now find out next element in this preorder that is B right now where is B in this post order B is at this place now if this this next element this this B this next element of this root which is in preorder if this next element in post order is to the left of route to the left of route then that element would be part of the route now route is F and B is obviously to the left of this route so this B is part of F either the left child of F or the or the right child of F right now here we have no left child no right side the first of all you are going to fill left child right so here we will write be fine find out next element next element is a now find out where is a in post order is at the space so now here is to the left of B it is also the left of F but we are going to take what will be there we are working on this B now right so to the left of P we have a so a is part of b and b is not having any left and right child so we are going to fill first off or left side so here we will write a next element is we find out where is d here we have B D is to the left of this B right obviously it is left of F but we are going to take first of all B because that is the immediate left of me so it is part of be fine but B has already left side so the remaining place is only a right child so here we will write B next is C where is C here we have C now C is to the left off to the left of first first element first root is D although she is left of B also F also but when we are going to when we are going to traverse this from left to right then first you will find what D so it is part of D so we are going to write to the left of D that is C next where is he here we have e trevor's from left to right first we first element you find is B so it is part of the only part of this root D so we are going to right to the right of day because left has already filled here we are right e next is G find out where is G here we have G G is to the left of F right so it is part of F now left is over because it is it has left child is already filled so right is only remaining so here we will write G next is I now find out where is I here we have eye eyes to the left of C when you are going to reverse this left to right from I so first element is G so it is part of G so we will write I here on next is H where is H trevor's this first element is I so it is part of I so we are going to write s we are going to write here to the left of I so this is our binary using that trick so see you can see that this and this are same but I already told you we cannot uniquely construct a binary tree using pre and post order now look at this binary tree if you find out preorder and postorder for this binary tree then you can find out the same pre and post order you can find out and you can tell me in the comment box whether you are finding the same binary same preorder and postorder for this mandatory or not but see this binary tree is different from the binary tree we have constructed using our methods right that is why I am saying that if pre and post order is given only pre and post order is given then you cannot construct a unique binary tree because here we are getting two binary for two binary tree we are having same pre and post order right so now this is the proof so now second point was you can construct a unique full binary tree from given pre and post order now let us check I am going to update in this also see if if I if I make this binary tree as full binary tree then what should be the changes see for binary trees what every node is having either zero or two children that is the only condition for full binary tree every node is having either zero or two children right it's not like that all the level should be completely filled or except last level or something like this as we have discussed in complete binary tree no the only condition is every node is having only zero kuching two children now for making this a full binary tree this child this node is having only one child so I'm going to put one more child that is I and J and this node is only having one child and ok so I guess this is now a full binary tree right same yeah we are going to make this as a full binary tree and we are going to construct this so for this full bind you to the preorder and postorder is this one now I am going to rub this see I'm not going to take this one and now suppose we have only this preorder and postorder now we are supposed to construct a full bind sorry you are supposed to construct a binary tree fine I am going to construct using the simple trick because I have already discussed the math method you can apply that method and you can find out the binary tree you find out the same answer so now for root preorder we will check the preorder this one is f first element is ruled so this is root F is root right now fine check out what is the next element to this route in preorder only that is B now find out where is B in post order here we have B right and this B is to the left of root root is F and B is to the left of root right so it means B is part of F and part of F means either left or right but here we don't have any child the first of all we are going to fill left child so here we will write B next as a in post over here we have a so traverse the post order from left to right first element find is from F to B the element which are in the tree first element is B so it is part of B so we are going to write here left off the next element is d find out where is Dean postorder here we have D so traverse this first element finders B so it is part of be here we will write D to the right of B because left is already filled see here we have C and when you are going to traverse then it is it as to the first element is d and so it is to the left of this D right so it is part of D so to the left of day we have see next is e here we have in post order it is to the left of D so here we will write e next is G where is G here we have it is to the left of F so left child is over it is part of F left is filled so the only places right here will write G next is I where it is at this place now the first element when you are going to traverse this from left to right first element is G out of these elements which are the part of now tree G so it is it means it is a part of G we are going to fill the left side of G here you write I next as H very how much here we have edge traverse this first element is I so it is part of I so here you write to the left of I we will write H next is K here we have K it is left of I so it is part of I only write child is remaining so we're right here what okay next is J here we have J it is part of G right so left is child is filled so only right is remaining here we will write what J so this is the binary tree using this pre and post order so this is I guess the same first of all this was the tree and we made it a full binary tree and by inserting G here and K here this is full binary tree that is why we are able to construct this uniquely so you have to take care of this thing you can only construct a unique full by until tree from given preorder and postorder you cannot construct a unique and really from given pre and post order right now I guess you can apply the method on this thing because we have already discussed how the method is to be applied if I apply the method on this thing then the video would be very lengthy so I left this thing to you you have to construct full binary tree or you can say binary tree from this using that method full method and you are going to tell me in the comment that you are going you are you are finding the same answer as we have found using the trick right and the third is C suppose if I I make this binary tree as full binary tree so full for full binary tree here you like here I will insert a J and here I will insert key C now for this this full binary tree the pre and post order is this one now question for you is you don't have this binary tree you just look at pre and post order you are given this pre and post order and you are supposed to find out you are supposed to construct a binary tree so try to construct a binary tree using the trick also and plus the method also so that you get familiar with both the approaches fine and just tell me whether you are you are finding this the same binary tree from this pre and post order or not in the comment box right so I will see you in the next video till then byebye take care