that is why I am going to take order five and these are the elements and we are going to create a B+ tree so if order is five if maximum children can be five minimum children can be three maximum keys can be four and minimum keys can be I hope you know the formula how to find out the minimum and maximum child and all and these property this minimum property minimum children can be three right and here minimum keys can be two but as property of minimum children and minimum key this would not be followed by the root element if only one node we have and that is root and that is the leaf node only because Ovi only one node so in that case that property would not be followed right this minimum children and minimum T because root can have minimum zero child and root can also have two children that is also possible and root can have only one key also that is also possible but a maximum K should be four in doot also right so how to insert how to create a B plus tree first data is seven right so we don't have any dreams so first of all we are going to create a node and in this node in this node how many keys can be there for one two three four right and C you can also draw something like this these are pointers five pointers why so because five children maximum children can be one two three four and five now this is the pointer for this children this is the pointer for the children like this right and starting these pointers are none so but here I am going to create a simple node without showing the pointers right so this is the node one two three four four keys can be there firstly is seven insert seven next is ten see this this will also follow follow the property of BST binary search tree right so this ten would be greater than the seven so it would be to the right of this seven fine one now one is less than seven so this that is why one would be to the left of 7 so that would be something like this here we'll write one here we'll write seven and here we will write and these are going to be ship next is twenty three twenty three is greater than all of these so here you can write or anything fine next is five now where you can insert this 5 here 5 is greater than 1 but less than 7 so here you can insert 5 right according to the route but here on maximum keys can be forced and this is overflow condition now what what you will do you have to split the node and splitting will also be done from the middle element only and B plus 3 and B tree always grow towards the root so find out the middle element out of these middle element is this 7 right after inserting we are going to you are pretending that we have inserted this 5 and after that we are going to find out the middle element it's not like don't insert 5 and now find out the middle element and spread the node no 7 would go one level up another node would be created having maximum capacity 1 2 3 4 right and to the left of 7 we have 1 8 5 to the left of 7 we have 1 and 5 capacity of this node is also 1 2 3 4 4 keys and to the right of 7 to the right of 7 what we will have to the right of 7 we have ten and twenty three but the property of B plus tree is what the data this data should be present in leaf node the data is present in leaf node only right so we are going to put 7 here 10 and 23 I am going to follow the rule that to the left of this node to the parent left of the spent the data would be strictly less than this node and to the right of this we can write down either greater value or equal value so 7 is equal to 7 so that is why we are writing 7 to the right child of this one right so see this is now the in and these are leaf node C in internal nodes only the indexes are there now next s 15 now where you can insert 15 data would be inserted only in leaf mode 15 is greater than 7 greater than 7 greater than 10 but less than 23 so here we will write 15 and here you will know 23 17 where you can insert 17 to the right of 50 and to the left of 17 so here you can insert 17 but this is not possible this is our flow condition because maximum means can be for now spread this node from the median element median element is what 15 15 would go one level up so we can kill me insert 15 here yes because still we have three spaces left so I'm going to update this tree only 15 would go one level up right and this node would be splitted to the left of 15 we will write 7 and 10 right and to the right of 15 what you will write 15 17 and 23 so to the right of 15 you will write 15 17 and 23 next is 9 greater than 7 but less than 17 go to this one greater than 7 less than this 10 so here you can insert 9 right so the node would be 7 9 and 10 and still space of one element next is 11 where you can insert 11 greater than 7 less than 15 greater than 11 here you can insert 11 next 39 here you can insert 3935 now where you can insert 35 after 23n before 39 so here you can insert 35 but this is our flow condition splitting would be done from the median element so the middle element is 23 so 2001 level up here can win so 23 here yes we have still space so I'm going to update this tree only here you will write 23 after 15 because 23 is greater than 15 and to the left of 23 we have 15 and 17 and to the right of 23 we will have 23 35 and 39 so to the right of 23 you will write 23 35 and 39 so now next is 8 where you can insert 8 8 is greater than 7 less than 15 go to the side greater than 7 less than 8 9 so here you can insert 8 after 7 and before 9 but this is our flow condition so you are going to split now right splitting would be done from the middle element middle element is this 9 9 would go one level up so here you are going to insert 9 so in this node where you can insert 9 after 7 and before 15 right so now the tree would be something like this 7 9 15 and 23 now this node is also full to the left of 7 we have 1 + 5 so now here to the left of 9 and right of 7 we are going to split this node now so 9 will go up so to the left of 9 we have 7 and 8 here you will have 7 and 8 right and to the right of 9 9 10 and 11 9 10 and 11 these are still same 15 and 17 and with the right of 23 we have 23 35 and 39 so now next is 40 where to insert this 40 here you can insert after 39 right next is 25 25 is greater than 23 greater than all these 23 so go to this link now 23 25 is greater than 23 but less than 35 so here you can insert 25 but this is all flow condition again splitting would be done middle element is 35 35 would go one level up here but we cannot insert 35 here because this node is full now repeat the same step of splitting now here on C here also you will do splitting so middle element from this is 15 15 would go one level up fine so I am going to do this splitting first of all right after that we are going to split this No so after this splitting I'm going to update in this case only 35 would go here 35 would go here 35 is greater than 2 anything so we will insert here only right to the left of 35 we have 23 and 25 23 and 25 right and to the right of this one we will have 35 39 and 40 to the right we will have 35 39 and 40 but this is just thing just the intermediate stage because we are going to split this node also this is also full this is also our flow condition so middle element of this is 15 15 go to go one level up so final the tree would be 15 would go one level up to the left of 15 we have 7 + 9 7 and 9 to the right of 15 what you should have 15 23 and 35 right so if you will right here 16 23 and 35 15 is here also here also and 15 is also in the leaf node right so if no data should be present in E if not that is fine but these are internal nodes now this is also internal or this is also internal node so no need to repeat the data in internal nodes because they hear only the indexes are there so what's the point to repeat the data in the index is only 1 indexes in to reach till the data so here you will not write 15 this you have to take care fine to the left of 7 we have 1 + 5 this one we have 7 + 8 to the right of 9 we will have 9 and in 11 now now see to the right of 15 we have 15 and 17 right so to the right of 15 we will have 15 and 17 but this would be to the left of this 23 15 and 17 and after 23 after 23 you will have 20 through 25 and after 35 you will have 35 39 14 35 39 and 40 so you can draw this through something like this just just me as a known having space of four and one more important point about the sabitri is what see these leaf node are also connected with a link like this right the data in the leaf node is present as a form of link list so these are also connected like this like this like this like this right so finally if you have this tree so this leaf node would be connected to this then this then this then this then this all the leaf node are connected with a link so here you can see in the root node we are having only one key but according to the rule minimum key should be to see here children also minimum children can be 3 but here children are only 2 so root node would not follow the property of this minimum children and minimum key so this is how we are going to create a B+ tree when old value of this order is given fine so I'll see you in the next video till then byebye take