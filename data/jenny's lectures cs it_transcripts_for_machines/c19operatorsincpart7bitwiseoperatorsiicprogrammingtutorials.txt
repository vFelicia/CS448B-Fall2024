in the series of learning programming in c we are discussing about operators in c in the previous studio i have discussed some bitwise operators three bitwise operators bitwise and bitwiser and bitwise xor operator with the help of proper example so in this video i am going to discuss the remaining bitwise operators that is left shift right shift and bitwise not and bitwise note is also known as one's complement right so we'll be discussing these remaining bitwise operators with the help of proper example and after discussion on these operators i'll be telling you some short trick also like if in a program or if in a code the bitwise operators are given and you are supposed to tell the output send then directly by using that short break you can tell the output of that code right everything will be discussing in this video now so now let us discuss the remaining operators one we have left shift we have right shift and this one is tilt sign this one is bitwise not operator so first let us discuss this left shift operator don't confuse don't get confused in this left shift and right shift see if it is like it is you know right like this this and this so it is left shift this is e this side so it is for right shifting right so this operator is binary operator and if this operator is used to shift the number the given number to left side now what is the syntax of this operator this side we have first operand or you can say variable and the operator and after that you have second operand or the number maybe suppose i am writing here 2 so this is first operand this is second operand first operand is what you have to shift this variable or you you can say you have to shift this number you have to shift this operand by how many bits that the second operand will tell you by two bits you have to shift this variable this number and to the side left side or here rather than variable see suppose i am taking this example int a is equal to 10 and i am writing here a left shift 2 and i am storing suppose this value in c or b now what output you will get what value would be stored in c so now check the functioning of this left shift operator see the value is 10 so bitwise operators always manipulate the data always operate at bit level it is byte all the other operators operates at byte level and this operator manipulate the data or perform the operations at bit level so first of all convert this this is decimal to convert this into binary form i am using eight bit representation right so now the binary form of this 10 is what we have 1 0 1 0 i hope you know how to convert a decimal number to 2 binary number the shortcut is you can write down here 1 2 4 8 16 32 64 128 and i am placing 1 and 1 here because 8 plus 2 is 10 so this is binary form of 10 right now if suppose number is 11 then where you will put 1 here 1 here 1 as well as here 1 8 plus 2 is 10 plus 1 is 11 right this is shortcut so now you have to shift this number by two bits left shift means this side so now after left shifting the number would become something like this this side left shift you have to shift this means one and two two bits would be discarded right now this bit would be at this place this would be shifted to this like this and now these two places are remaining blank because we have discarded two bits from the left now at this places the trailing places the trailing bits would be filled with zero zero and zero it's not like that we are filling these zero and zero here no these bits are discarded no use of these bits just fill the remaining the trailing places the trailing bits with 0. now this is the new number now convert this into decimal what output you will get this is binary form right now the decimal form of this one we have one at this place eight and we have one at this place thirty two thirty two plus eight is forty so this number is forty when you convert this into my uh decimal that you will get forty so now in c what value would be stored 40 so if you will print c then you will get 40 right now and if you print a also then after that a has also updated and that is also 40 or you can tell me if i am wrong just write down a simple program take a variable left shift this print both c and a what output you will get you can tell me in comment box right so this is functioning of left shift operator i hope you got it suppose i shift this one by four a left shift four now what you will get four bits would be shifted to left these four bit one two three four these bits would be discarded now this 1 would be at this place 1 0 1 0 the remaining bits the trailing bits should be filled with 0 0 0 right now what is the decimal number of this one we have one at 128 and we have one at where 32 so just add these numbers this is i guess 1 6 160 so the output would be 160 the decimal one number corresponding to this is 160. now this is the processor long processor now what is the shortcut if without look without converting it into binary and without shifting how you can tell see if a left shift 4 then final output you will get is what the number a just take the number that is 10 into 2 raised to power the right operand this is left operand to this operator this is right operand so here at in right operand we have what 4 2 raise to the power 4 now 10 into 2 raise to power 4 is 16 so that is what 160 and that that's it we got 160. so this is shortcut if you write here 2 what output you will get without looking at this one a is 10 into 2 raised to power 2 10 into 4 that is 40 and the same output we got 40. so this is short short trick to find out the answer to to find out the output right without following the proper processor now what about left sorry right shift operator this is used to shift the number by two right side so this is this one it is also having two operand one is this one one is this one this is the number you have to shift this is by how many bits you have to shift that number so suppose i'm taking same example a is 10 binary value of a is this one i am going to do what right shift of this by 2 now what is the processor c right shift this number means this side you have to shift this side so now two bits one and two these two bits would be discarded now this bit would be at this place and now here we have blank spaces so in this case the leading uh space the leading places would be filled with zero same here zero it's not like that we discard it and this would be at this side we discard it or you can say we we ah remove this this bit from here and we place it here no these bits should be discarded two bits and we place new bits that is zero we fill this remaining space the blank space with zeros now see what is decimal form of this one we have one at what place this is what two so the decimal form of this is two now suppose if you shift it by four right shift by four then what value you will get this number by four one two three four these four bits would be discarded now these bits would be shifted like this zero zero zero zero and that the remaining places will fill zero so what is decimal form of this one 0 because we have no 1 no 1 here so that is 0 output would be 0. now let us discuss the shortcut to find out the shift and the result after the shift operator without following the proper processor see the number is a that is 10 if you right shift this one then you divide this in left shift you multiply this number the given number so 10 divided by 2 raised to power how many bits are there 2 raise to power 4 so 10 divided by 16 so definitely the output would be 0 0 point something so it will take it will remove that fractional part it will take only decimal value if i write here that's what exactly you got 2 now if you write here 2 then what out you will get 10 divided by 2 raised to the power 2 10 divided by 4 that is we get 2 2 point something but it will remove that fractional part it will give you what that decimal value and exactly we got two so this is what shortcuts so i hope you got water left shift and right shift operator and you can tell the output by using the short short trick now what about this logical not operator so this operator will use to find out you can see the ones complement of the number or this will invert the bits in what the bits mean if the bit is zero original bit is zero after applying this operator that will become 1 if the original bit is 1 after applying this operation that become 0 see let us take one example if i write here that number 5 right and or you can say int a is equal to 5 and i am storing b is equal to bitwise not a now what output would you you will get means what is the value of b now see first of all convert this into binary the binary number is this one 1 zero one i am using four bits for this five because remaining would be zero zero so one two four eight four plus one is five so this is what binary number of five now bit wise not of a so the bits would be converted inverted means 1 becomes 0 this becomes 1 this becomes 0 this becomes 1 right so this is what binary number of 10. so this is when you apply a bit wise not then this output you will get or when you will run this one into computer then you will get a negative number means you will get a two's complement number here negative numbers in computer negative numbers are stored uh using three methods we can show negative numbers sign magnitude one's complement and two's complement but in sign magnitude and one's complement here there are some drawbacks that is why uh the standard method to represent to store negative numbers in computer memory is two's complement that maybe we will be discussing in some separate video that is a complete chapter right now what output you will get when you run this statement into your computer you will get what ah that negative number now see negative number what you will get see this is the number suppose a and when you apply negation of a then shortcut is what how you will get minus a plus 1 just simply do this thing and you will get that answer means minus a is what 5 5 5 plus 1 is 6 that minus 6 you will get so according to the logic of bitwise not operator this is also right you will get this one but in computer memory you will get this one in two's complement form so that is also fine now suppose a is 10 and so negation of a would become minus 10 plus 1 that is minus 11 you will get right so i hope directly you can tell the output if this this is given so now minus 10 would be stored in b fine now this is what about bit wise not operator and see bit wise it's not like that you can only use variable here you can also write simply negation of 5 then also you'll get same output negation of 10 you can also use a constant that is also fine right and suppose if you use in that left shift and right shift also you can write down 5 left shift 1 that is also fine means here please don't get confused this is what the number you have to shift means 5 need to be converted into binary and that number need to shift by how many bits that will tell the right operand by one bit or you can write down like 10 10 right shift 2 this is also fine you can also use constant instead of variables or here also you can use some that arithmetic operations or ah let us suppose if i write like this a is 10 suppose a is 10 i am writing a plus 1 left shift 2 and i am writing a plus 2 right shift 1 or i am writing negation of a plus 3 now tell me what you can tell me in comment box what would be output of these things or maybe there are some errors like you cannot use these kind of things in these operators then also you can tell me right so you have to execute these statements fine so now this is all about bitwise operators i mean i just want to give you the overview the functioning of these operators will be discussing in separate video maybe some technical type of questions that could be asked on these operators some twisted type of questions right so now that's it for this video now in next video i'll be discussing about some special operators in c so now i'll see in the next video till then bye you