see here I'm writing can wait will not say a process which is ready to run we'll wait indefinitely note that that is not always true that a process which is having low priority but or will always wait for indefinite amount of time no sometimes it can wait sometimes it will be the CP would be allocated to that process so here we will write it can wait you will not write it will wait okay now why this process will be it because because of some high priority processes because in priority scheduling CP would be located to the processes which are having high priority okay now maybe there is a char there is a situation where many high priority processes are there are coming in the system so CP would be allocated to those processes rather than apply rather than a process which is having low priority so you can say that high priority processes prevent a low priority process from ever getting the CPU why starvation problem is there because of high priority processes prevents a low priority process from ever getting the CPU this is what the starvation problem is now let us take this example suppose we have four processes first time of these processes and priority of these processes are these processes as you 121 5 & 2 so first of all this suppose we are taking lesser the number higher the priority means 1 this is having the highest priority and this process is having lowest priority now the CP would be allocated to this process first okay P 2 then this P 4 then this P 3 and after that that this P 1 but see this is we are taking static 4 processes but in when you are working on your laptop or in the operating system that is not always true see here is it true that we have we have four processes running in your processor then until the termination of these four processes no new process will come no that is not always true so what are the practical Aereo is maybe processor has been allocated to this process p2 fine from zero first time is 5 5 from 0 to 5 then this p4 from 5 first time is 40 then 45 and maybe again this then this p3 for to note of time that is 47 something like this and some some point of time at some point of time before the p1 is allocated to this CPU some another process p5 comes with a priority number 3 then see if you will be located to this p5 but more process come p6 with priority number 4 one more process comes p7 with priority number 7 so many processes are coming coming and coming with priority higher than this p1 the number less than 20 having priority from 0 to 19 fine many processes are coming so so this p1 would not get CPU and we cannot say for how much amount of time so you can say that p1 will wait indefinitely although this p1 is ready to run p1 is in ready queue suppose if you are taking the arrival time so you can take the arrival time also so p1 is ready to run p1 is in ready queue but p1 is waiting why p1 is waiting because higher priority processes are coming and cpu is biased because of this priority scheduling so CPU will be allocated to the processes having higher priority and that is why this p1 is waiting so this is known as starvation p1 has to wait for indefinite amount of time now the solution of this problem is solution is one aging so what does eating technique is it gradually increase the priority of the processes priority of those processes which are waiting in the system for a long amount of time right or you can say this it it is a method to ensure that processes with lowerpriority were eventually complete their execution and how how they'll complete their execution see suppose here in this example suppose at some point of time this this priority it becomes maybe zero or one you can say then ultimately this p1 will get the cpu at some point of time find so this is the frontline imaging we you know gradually increase the priority of the processes which are in waiting state for a long amount of time here increasing the priority means see we are taking lesser the number higher the priority so increasing the priority means we decrease this number from 20 to 19 then 18 and 17 something like this day 0 so there may be a case they can give that after every 3 unit of time in the cpu this priority of the process will be increased by 1 so if it is given that in your question after every 3 unit of time of the cpu priority of the waiting processes will decrease by 1 see here why I am writing this decrease because I am taking lesser the number higher the priority so if you decrease this 20 and you do this 19 then obviously you can say that priority yes ultimately increasing if you are taking the case that higher the number higher the priority then you can write that the after will amount of time of cpu priority number of the waiting processes will increase by 1 something like this ok now see suppose it 1 some point of time the priority is 20 so after 3 unit of time priority becomes 19 because it will be decreased by 1 or ultimately you can say priority is increased because we are taking lesser the number had a priority then after 3 unit of time it will become 18 then again after 3 unit of time it will become 17 see this 3 unit of time means maybe some other processes are running in the CPU while you are drawing again chart then you will more processors which are coming having higher priority than this 20 then those processes are running and with the execution of those processes the priority of this process yes increasing so after three unit of time this becomes 16 then 300 of time it becomes 15 like this and ultimately at some point of time maybe this priority will be zero so ultimately when priority will be zero then that process is at that point of find this p1 will be of having the highest priority so p1 will ultimately get the CP this is the fund of ageing see this ageing technique can be implemented in many ways but both are having the same principle and what in that principle is that the priority of the processes should increase when the process waits in the system okay so see here I'm taking the priority of the waiting processes will be increased by one I have written priority of the processes will decrease by one why I have written this decrease by one because see this priority if we decrease this priority 20 to 19 then ultimately what we can say is because here the assumption is lesser than number higher the priority fine so if the number is priority is 19 it means the priority has been increased by 1 ultimately that is the case here if it is written that higher the number and higher the priority then then you will see that then you can write here that the priority of waiting processes will increase by 1 means 20 to 21 ultimately 21 is having higher priority than the 20 okay so sometimes they can also say that priority of running processes as well as waiting processes will be increased maybe by some amount of time by 1 or 2 but here we are taking just the case the priority of waiting processors only increases okay so you have to take care of that thing also maybe in question they can do priority of running processes will be increased by one and priority of waiting processes will be increased by two something like this okay that is that is but the simple Fanta is the you know that main main fund is that the priority always the priority of the process who are ready to run but who are waiting for the CPU then the priority of those processes will be increased fine and this starvation is different from convoy effect convoy if it comes in first Confessor and this starvation problem comes in shortage of four she running algorithm and priority scheduling algorithm so I have discussed the difference between convoy effect and starvation problem and the starvation problem very nicely in the one of my previous video I'll provide you the link in the description box you can check it out there okay so I'll see in the next video till then bye bye take care