hey everybody how's it going in this video we'll go over a couple of aspects of being pythonic now if you've never heard the term pythonic before basically in short what that means is that you're following conventions and coding styles of the Python language in order to write clean and readable code so in this video we'll specifically be looking at two aspects of being pythonic and those are duck typing and the concept that it is easier to ask forgiveness than permission and sometimes you'll see people abbreviate this online as ei F P now these two concepts are very closely related so that's why I'm putting them in the same video so first let's take a look at duck typing now the reason it's called duck typing is because with this concept you assume that if an object walks like a duck and quacks like a duck then it's a duck so what does that mean exactly that means that we simply don't care what type of object we're working with we only care if our object can do what we asked it to do but I think this will be more clear if we take a look at an easy example here to see exactly what this means so in this easy example I have two very simple classes here I have a class duck and it has two methods quack and fly and then I have a class person and it also has two methods quack and fly and both of these methods do different things depending on the class now I also have a function here called quack and fly and the purpose of this function is that we're going to try to pass in this object thing and we're going to try to run the quack method and the fly method on it and you can see down here at the bottom I'm making an instance of the class duck and I'm passing that into our function and then I'm also making an instance of the class person and I'm passing that into our function also so first let's take a look at something that is not duck type so this is non pythonic so in a non duck typed example we will specifically check if the object that we're working with is an instance of a duck now this will ensure that we can use all of the methods and attributes that we want to use you can see here right at the top as soon as we enter the function it's saying is this thing an instance of duck if so then run these two methods and if it's not then print that it has to be a duck and you can see here that we're running this on a duck and on a person so if I run this code you can see that when we pass in the duck to this function that we get what if we expect it runs those two methods but whenever we pass the person into this function it comes back and it didn't meet that conditional of being an instance of a duck and instead it printed out this has to be a duck but if we remember at the beginning of the video I said that in duck typing we don't care if this object is actually a duck or not we only care if it behaves like a duck when asked to do so so again you'll see that definition online that if it walks like a duck and quacks like a duck then treat it like a duck so our person class does have the quack method and the fly method so there's no reason that it shouldn't work in this function also so let's just go ahead and take out these checks and just try to run it so I'm going to take out all of this code and just leave where it tries to and I'm going to leave that print statement in there to get a little space here between these two so now I'm just passing in an object and I'm just trying to run these methods and if it works then great so now you can see that if we run this now it doesn't care what object we're passing in and it just comes in and it runs both of these methods regardless of what the object is and that's what duck typing is we don't care if it's a certain type of object we only care if it can do what we ask so now you might be thinking like well isn't this dangerous so can't we pass in just any object that will potentially throw an error and that's true so you might be tempted to say okay well all we care about in this example is not what type of object it is but whether it can quack and fly so how about we put some checks in place to make sure that those methods exist so this is where that second concept comes in that it's easier to ask forgiveness than permission so first let's take a look at the non pythonic way to do this and this is usually called look before you leap so let me get the snippet out here and I'm just going to go ahead and copy this code example and paste it into my function here so in this example we might be tempted to make a check for each method that we want to call so first we want to run the quack method so you might first want to check if that attribute actually exists within our object and that's what this line does here does this thing have the attribute of quack then second we might want to run a check that says okay if it does then is it colorful and if it's callable then we finally run it and then we'd have to do the same thing for the fly method also we'd say okay does this thing have a an attribute fly okay it does is it callable if it's callable then run the fly method so you can see how something like this would be pretty cumbersome after a while so we're asking for permission at every step of the way we're saying can we do this can we do this and then finally if we pass all the permissions then we actually do what we want so that concept that I was talking about that pythonic concept that it's easier to ask for forgiveness than permission frowns upon this instead with that concept we just want to say let's try to do something and if it doesn't work then we'll handle it so instead of doing this non pythonic way then let me go over here and grab the easier to ask forgiveness than permission example and let's look at the difference so let me uncomment out this code so right off the bat you can see that this is a lot more readable and what we're saying here is we're saying hey try to run these methods and if you get an attribute error then print out that error so now if I rerun this code then you can see that it still works so it tried to come in and run both of these methods and it worked now what if we add in a method that doesn't exist so I wouldn't add in a method here that is bark now if I run this now you can see that it came in and it tried to run these first two methods which work but then whenever it ran this one that doesn't exist it through this attribute error and printing it out through the screen so it's saying that the duck object has no attribute bark and it also said down here that the person object has no attribute bark so if you see people talking about that it's easier to ask forgiveness than permission then this is what it means it means try to do something and if it works then great and if not then just handle that error now this concept actually extends to other use cases outside of the use case that we're using it for here so I'm just going to go ahead and delete all of this code here and I'm going to hop over to our code snippets here and I'm going to grab all of this code here and paste it in and let me uncomment out this and let me recommend these two lines here so this is another small example where we have a dictionary and I'm going to comment out this section here for now so we have a dictionary that has a name and age and a job and what we want to do is we want to just print out the name the age and the job in this sentence here and if any of these keys don't exist and we just want to print out through the screen that we're missing some of these keys so you might be tempted to do it like this which is the look before you leap or the asking permission which is the non pythonic way we might be tempted to say do we have this name key in this person do we have this age key do we have this job key if all those exist then print out the sentence that prints out the name the age and the job and if I run that you can see that it works now if I take this same example and I use a dictionary that is missing this job key and run that now you can see that it still worked it said that we're missing some keys now let's compare this example to the concept that it's easier to ask forgiveness than permission so I'm going to comment out the look before you leap code here and I'm going to uncomment out this code here now what we're saying we're not making any checks at all we're just saying hey try to print out this sentence that accesses all these different keys if it doesn't work throw a key error and say that we're missing a key so first I'm going to run this with the dictionary that has all of the keys available and if I run it you can see that it worked fine and now if I run it with the example that is missing the job key then you can see that it printed out here that we're missing the job key so you can see the big difference here we're not making all of these checks saying can we do this can we do this and can we do this we're just trying to do it and if it works then that's great and if it doesn't work then we print out the error or handle it in any way that we want to handle it now just another small example here if I grab another snippet from the list we can also do this with lists so if I paste this in here then let me uncomment out this code and actually I forgot to actually grab the list here so let me grab that and paste it here up top okay so what if you had the need to grab a certain index from a list within your code so you might be tempted to and this is should actually be an equal sign here you don't want to throw an index error so what you might be tempted to do is check the length of the list you might say if my length of my list is greater than or equal to 6 then I know that I can access this 5th index here and if it's not greater than that then I need to print that this index doesn't exist so you can see that if I run this then we did print out that 5th index of the list and if I was to take one of these values out and try to rerun it then it doesn't pass this conditional and it's saying that that index doesn't exist so but you can see that we're making this check here and it's kind of ugly so that's the asking permission example which is non pythonic now now let's just try to do this so if we just do try to print this index and then just throw the exception index error if it's an index error and print that that index doesn't exist so now if I run this you can see that we printed out the index of that list but if we were to take this six out of here and try to run it then we just throw this index error in print that the index does not exist so again this goes back to that concept we're not asking for permission that we can do something we're just trying to do it and if we can't then we'll handle it the way that we want to handle it now I also want to point out that this isn't an endall beall approach there have been some situations online where people have pointed out where you might want to make certain checks in certain situations but why is this easier to ask forgiveness than permission why is that even considered a good thing to do in most cases well first of all it's slightly faster in situations where you don't expect a lot of exceptions because whenever you ask for permission you have to access your objects multiple times but here we just try to access it one time and if it works then it works so we're only accessing that object once now another reason is that some people make the argument that it is more readable now I think this is debatable sometimes but I agree with that a lot of the time so I think that this is more readable than the last example we looked at we're just saying try to do this and throw an index error if we need to also that example that we saw with our dictionary we don't have all of those checks in place saying does this key exists does this key exist we just tried to do it and then it was fairly obvious that if we get a key error then throw the key error now one good reason that I solved for writing your code this way was to avoid race conditions in certain situations so there's actually an example here on the Python Docs on the website so let me grab this code here and paste it in to our file here and now let me uncomment out this code so that we can see exactly what's going on okay so what we're trying to do here in this example that I grabbed straight from the Python document nation online is we're trying to access this file and then just print the contents out to the screen now you might be tempted to make this check here first to see if we can actually access the file and if we can then we'll open it and then print it out to the screen and if we can't access the file then we'll hit this conditional here which will say that the file cannot be accessed now the problem with this the reason that this is a race condition is because when we make this check here to see if we can access the file by the time we get down here in that short amount of time maybe we can't access the file anymore so then when we try to open it then we're going to throw an error and we're likely not going to catch that error because we thought that we could access the file so really the way to do this which uses that same concept of asking forgiveness and not permission so let me comment out this code here so in this example we're just trying to open the file and if we can't do it then we just throw an IO error and say that well the file cannot be accessed and then if we can then we take the file and print it out to the screen so you can see that it's just continuing that theme so instead of asking if we can do something we're just trying to do it and if it works then great and if not then we catch that error and handle it as we want so I think that's going to do it for this video I hope that it gave you a better understanding of duck typing and the concept that it's easier to ask forgiveness than permission so these are two very common examples that I see online when someone points out that someone's code isn't pythonic so I wanted you to be aware of what those concepts meant exactly but if you do have any questions just feel free to ask in the comment section below be sure to subscribe for future videos and thank you all for watching you