hey everybody how's it going uh this is going to be another programming terms video and in this video we're going to be going over string interpolation now string interpolation is U probably something that you are already using maybe and uh but you just might not know what it means um but if we look at Wikipedia um how they Define string interpolation is the process of evaluating a string literal containing one or more placeholders yielding a result in which the placeholders are replaced with their corresponding values so basically what this is saying is that you're using placeholders within your strings that then get replaced by the real values uh later on so let's go ahead and take a look at this and actual code so that we can see what's going on now the example that I have pulled up here is not an example of string interpolation this is actually uh called called string concatenation and the reason I want to show you this method first is because this is a method that some people use and I want you to see the benefits of using uh using string interpolation uh over uh concatenation that is sometimes used so you can kind of see what I'm trying to do here I have a name value of Corey an age value of 28 and I'm trying to uh print out a string that says my name is and then put in the name and I am put in the age years old um so if I run this now you can see that I get an error so okay I have a type error cannot concatenate string and int objects now I am using python for this example but don't get too tied up in the language that I'm using because this concatenation and interpolation comparison is uh going to be uh the same for most languages that have string interpolation um so anyways so I see that I have this error here can not concatenate string and in objects it's because I have an integer age here uh so I need to cast this to a string before I can um make it part of before I can add it to a string so then if I try to run it you can see now that my spacing is off and this is a common problem with string concatenation is that it's not entirely obvious that we need spaces here because it just adds the name directly to this string and there's no space here so if we add in a space then I'll have to put in a space between uh the beginning and ending of this one and then at the beginning of this one but not at the end here save that and run it and now after a little bit of tweaking we get the result that I was hoping for now let's compare this method of string concatenation with string interpolation so up here at this greeting this is the example I had before and if you remember I had to add in these space spaces I had to cast this integer to a string and then I had to put in a space here okay now if I save that and run that you can see that that is the result I was hoping to get um but now let me comment out this line and un comment out this line using string interpolation so like I said before in the definition string interpolation is just using placeholders uh within your string and then replacing those placeholders with the values uh at a later time um and right here we're doing that with this uh format method here and so first of all let me go ahead and run this so that you can see that this does work so I just ran the code and you can see that it outputed the exact same thing now you can see that this string is much easier to read uh you can see where the spaces are um these little brackets here uh in Python is how you do uh the placeholder in the string and then within this format method this is where we're passing in our values and uh these just go in in the order that they um are are seen within the actual string so name goes to the first placeholder and age goes to the second placeholder now these don't necessarily have to be in order um you know you can mix these up if I take this first part out here and I put age and then um and my name is and then I can put name here and then within format I can do name equals name age equals age and now you can see if I run that I get the result that I expected even though these are out of order in the format method because it knows to fill in these specific placeholders uh with these specific values even if they're out of order so as you can see using string interpolation is uh first of all it's a lot easier to read I can see exactly where these uh spaces are and the then the placeholders for the values and not only that but it's less prone to errors too like like I was saying up here you had to actually C passed this value to a string and you had to add in these spaces uh that you know this is only one line of code here but say you have hundreds of lines of code you may uh miss a space here or there uh but if you use um this string interpolation then you can see exactly what the string is going to look like um it's pretty much like a template and these values are hardcoded into this file but this is great whenever you're receiving values from a database and then you know if you have a web page or something you can just write out your HTML and then you can put in um these placeholders for your HTML just like a template and then it'll pass those values in at a later time whenever uh it's whenever it's at runtime so like I was saying before uh you may already be using stuff like this uh you may already be using string interpolation and just uh didn't know what the term was um so now you know now if it comes up in a conversation or if you're uh talking to someone and they mention string interpolation then you'll know what they mean um so yeah hopefully this uh video is useful for you guys uh if you have any questions just ask in the comment section below and be sure to subscribe for future programming term videos and uh thank you guys for watching