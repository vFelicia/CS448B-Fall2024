hey there how's it going everybody in this video I'd like to walk through how to set up a python development environment in adom now Adam is a text editor that is becoming a popular alternative to editors like Sublime Text now I've done a video on how to set up a python development environment in Sublime Text but a lot of people are starting to give Adam a try so I wanted to put together a video on this as well so that people can get their python environment set up easily now there are some good reasons that Adam is becoming popular so first of all it is completely free free now Sublime Text is free to evaluate for an unlimited amount of time but you'll get popups asking you to purchase the full version every now and then so Adam being completely free is definitely appealing to most people and also Adam has a lot of support it was developed by the people at GitHub and it comes installed with a package manager and makes it easy to install packages right out of the box now Sublime Tex has improved that in process in some of its later updates but there's still an initial step there that needs to take place before you can begin installing packages Adam doesn't have that problem and we'll see some other differences as we walk through this setup process now if you never used Sublime Text before then uh you can just ignore the comparisons that I make throughout this video the only reason I bring those differences up is because these editors are very similar and they share a lot of the same user base and those people might find it useful to have those differences pointed out okay so let's go ahead and get started so I have the atom download page pulled up here now I'm on my Mac so it defaults to the Mac download uh but you should have a a download link for your operating system here so I'm going to go ahead and download that and I'm going to go ahead and Skip to where this is finished downloading and once that's finished downloading then we can unzip that and on a Mac we just have to drag this app to our applications folder if you're on another operating system then you might have to go through a quick installation okay so now let's open up our fresh installation of atom and now I'm just going to go ahead and maximize this okay so when we first open atom it's going to pop up with some welcome information here so on the right we have this welcome to guide with some documentation to the keyboard shortcuts and things like that um I'm going to go ahead and just close that down and close this link now on this welcome screen here I'm going to uncheck this show Welcome guide when opening atom and now I'm going to close that now this Telemetry consent I'm just going to click no here for now but you can do whatever you want here it's just to uh help them improve atom you can Anon anonymously send information and stats and things like that so just so we have something to work with I have a test python module here that I'm just going to go ahead and dump in to adom and go ahead and open that up now this is a sample class that I use for my object oriented series if you don't understand what the code is doing then uh you don't have to worry about it I just wanted something that we could work with and also something with classes and functions so that we can see the differences between the different color schemes and I'm going to make this font a little bigger here so that we can see everything now if you watched my Sublime Text walk through then at this point we were actually able to go ahead and run our python code now in atom we can't quite do this yet we have to first install a package so that we can run these scripts so let's install that first package so that we can add this functionality um so to install a package let's open up our preferences page and on a Mac that is under atom and preferences now on Windows I think that might be under file preferences now the atom preferences and settings have this nice layout we don't have to use Json configuration files or anything like that so it's a nice little interface that's pretty intuitive so to install our package we can just click on install down here at the bottom now the package that we want to search for is called Script and if we search for that then we can see that the top result is what we are looking for now there's also a nice feature here that shows the total number of downloads which gives you a good idea of how popular a package is so just click on install to install that package and once that package is finished installing then you can click on these settings to view the settings for that package now Within These settings uh this is where we can configure our packages how we like but this is also where we can view the uh readme files and get suggestions for how to properly use the package now if we scroll down to the bottom here then we should see a section on keyboard shortcuts so now with this package installed we should be able to run our Python scripts within atom the keyboard shortcuts here are for each operating system so I can see to run this on the Mac it's command I and on Linux and windows it's shift control B so I'm going to move over here to this test module and run this with the Mac uh command keyboard shortcut now the output that we got here for this script is a little small you might not be able to read this uh but basically when we print it out our executable path uh I got the default path to the python on my machine and that version is python 3.5 and then it also ran the other information here within this script as well now that default path on your machine may be may be different than the default path on my machine now if you want to run different versions of python or run python from a virtual environment here in atom then there's something different that we need to set up and I'll show you how to do that later in this video but for now let's go ahead and install the rest of the packages and get this customized a bit so first of all let's go ahead and install a different color scheme now the color scheme I like to use is the same one that I like to use in Sublime text and it is called pedon so to install this I'm going to go back here to the preferences then I'm going to click on install and instead of packages over here I'm instead going to click on themes to search for themes and now that we're searching for themes I'm going to search for preon now this part is a little different than Sublime Text in Sublime we installed the entire theme but in atom these are broken up between uis and the syntax I actually like the default UI that comes with atom so I'm just going to install the syntax coloring so over here I'm going to click install on the preon syntax so now that's installed but it's not activated yet so to activate this then we can click up here on themes and under the syntax theme then now we have this preon option so I'm going to go ahead and select that and now if we go back to our test module then we can see that the look of this has been updated and this is just a personal preference uh I'd recommend you try different themes and color schemes to see what you like but if you watched many of my videos then you'll probably notice that this is the one that I personally use so now that we have our color scheme in place now let me show you a few of the default settings that I personally like to change so Within our settings here now let's go up here to editor and within editor we can choose our font family so the font that I use is source code Pro and that is a font that is available for free on Google fonts and I'll leave a link to that in the description section below now the font size I usually like to have set to 20 and I know that that's large but that's just because I do these videos and want everyone to be able to see uh you'll likely choose something much smaller there now now if we scroll down here a bit now there's one setting that I like here called scroll past the end now if I go to my test module without that selected then you can see when I scroll down to the bottom then I can't scroll anymore once we hit the end of the file and that kind of annoys me so I like to set that scroll PR scroll past end option and now when I go back to my module then you can see that we can scroll past the end of this file and also whenever I am programming in Python I like to have my tab length uh set to four spaces and by default in adom that is set to two so I'm going to go ahead and change that okay and that does it for the editor settings now one other thing I like to disable in Adam is the default autoc completing uh so for example if I go to my test module down here at the bottom and I was to type in you know employee 2 equals e then you see that it's popping up uh this you know these Auto completes as I'm typing and a lot of the times I don't find these popups that useful so I'd personally rather just disable them and now to do this we can go back to our settings and then we need to select our packages now you can see here are some core packages that came installed with atom and if I scroll down here now you can see a short description of what each of these do now the one that I want to disable is this autocomplete plus and also autocomplete snippet so I'll disable both of those now if I go back to my test module then you can see it's no longer uh trying to autocomplete those now if you are someone who likes that autoc completing capability uh then the suggestions for python code are much more python friendly if you install the autocomplete python package so let's go over to our settings and let's click on install and now we want to select packages over here instead of themes now I'm going to search for auto complete python now I don't personally use this but I'll just go ahead and install this really quick just to show you how this looks now when this finishes installing it's going to ask if you want to use kite or a local engine now kite is something that goes out onto the internet and finds documentation and things like that now I think it sounds really interesting but some of the things that I work on at my fulltime job aren't allowed to be sent over the cloud so I usually choose to use the local engine instead but if you think that clout or that kite sounds interesting uh then you're more than welcome to give that a try Okay so once we've selected that local engine now if we're back here on our test module now if I type in you can see that it's trying to autocomplete as I type and these are more python specific so if I come back and just type in you know this e um then I'm assuming that these B's mean builtin I'm not entirely sure but you can see that we have some more python specific autoc completions there so that is a popular python package but like I said I don't personally like the autocomplete popups um so I'm going to go over here and just disable the autocomplete package that I just uh installed okay so let's install a few more packages that I like to use within atom so some of these aren't specifically python related but I like the functionality that they add so if I click on install here where I already at this installation page make sure that we're on packages now one package that I like a lot is file icons now before I install this if you look here at our python file in this tree view over here it's just a simple file icon and this package will make those look a little better and it also is a little bit more descriptive of what the file actually is so you can see that the the top result here has over 2 million downloads so it's a pretty popular download so let's go ahead and install that and once that's installed now if we look over here to our python file now we can see that the icon is now a nice colored python icon uh right beside the file name and if you work on a large project with a lot of different file types then I think this package not only makes that tree look better but also helps you find files more quickly okay so another package that I like to install is one called mini map so let's go ahead and search for that and this top one is the one that we want here so let's go ahead and install that okay so once that's finished downloading if we switch over here to our module um then we'll see now that in uh to the far right over here we have this uh General overview of what the file looks like and also where we are in this file now this isn't uh so useful with such a small sample module but if we had thousands of lines of code um then this gives you a better idea of where you are in those scripts okay now let's add a package that's uh more focused on Python Programming so this package is called python Auto Pep 8 so let's go ahead and search for that it is python Auto Pep 8 now I like this package because it keeps everything nice and consistent so let's go ahead and install this we'll take a look at what it does now there are a few other pep8 packages that have more downloads than this one but I found this one to be the easiest to set up and use um so now let's go ahead and go into the settings of this package that we just installed So within the settings here if we scroll down to the bottom then we'll see a very short read me file and it says to make sure that we have Auto pep8 installed uh by using the PIP install auto pep8 command so I'm going to go ahead and copy this and if you don't have that auto pep8 installed then we may need to install this from the command line using pip so actually I just installed that or copied that but I'm just going to type it out so pip install Auto Pep 8 now if you've never used pip before it's very simple to use uh I do have a separate video on how to use pip if you need a walk through but for now I'm just going to go ahead and do that pip install okay so now that is installed now let's go back to the module and see if uh that takes effect so let's make some changes here and add some Extra Spaces that aren't really pep8 compliant and when I save this it should autof format okay so I saved it and it didn't autof format I think sometimes whenever we install different uh packages we might need to restart um atom for those changes to take effect so I'm going to go ahead and quit out of atom and then open that back up okay so now let's see if I make a change and save it okay so that still didn't work let's open up the settings here okay so there is a check here for format on save so I forgot to check that so that was probably the problem so now let's go back to the module again now with that format on Save checked now if we save this okay so now after I save that it uh you know um autof formatted so let me do that again and save it and you can see that everything jumps back up to have the proper pep eight spacing now having that auto formatting on Save is especially nice when working with a team because you don't want a lot of the git differences to be differences in line spacing and things like that so using this helps a lot in those scenarios okay so the last package that we're going to install here is a ler that will point out any of our mistakes um so I'm going to go back over here to the setting and install packages and the linter that I like is a package called linter flake 8 so let's search for that okay so this is the package that we're looking for here at the top so I'm going to go ahead and install that and it also has to install a dependency in uh called linter so it installed that when we installed the flake8 linter okay so just like our Auto pep8 package let's open these settings and let's scroll down here to the readme file and we can see that it has installation instructions as well and just like with the Auto Pep 8 um we need to pip install this flake8 if we don't have it installed already so I'm going to pull up my terminal and just like I did with the auto pep8 I'm going to do a pip install and that is flake8 okay so now without restarting um atom here uh let's open up our python module and let's type in some errors uh that our liner should catch so down here at the bottom let's make a for Loop here and let's accidentally so I'll say four num in and I'll just make a list of one two three four and I'm going to accidentally leave off the colon here at the end of this for Loop and within this for Loop I'll do a print and instead of printing numb I'm just going to print in so now if we save this now we have two errors here one says uh syntax error at line 26 this is unexpected indentation so now we can actually click on these lines here where it's showing the air and after looking at this line that's telling us where the syntax is bad if we look at this for a little bit then we'll probably realize that the colon is missing here so let's put that colon in and save that and now after I save that we can see that we have a Mark here that says unidentified name in at line 27 so once it points that out to us then we know that that should be numb instead of in oh it also looks like it gave us that syntax error too because I forgot to remove that line from earlier when I was showing the auto complete okay and after we remove all those errors then all of those linter warnings go away and it's nice having something like that watching in the background because we all make dumb mistakes like that and it's nice to have something that points those out okay so that was the last package that I wanted to show you but one thing that I mentioned before was that I'd like to go over uh how to run different versions of python or how to point to a virtual environment so if you watched my Sublime Text installation video and this is basically the equivalent of their build systems so that very first package that we installed to run our python code that was called Script if we want to run our python code using that then like I said before we can hit command I to run that but we can also hit command shift p to bring up our Command pallet and then we can type in script which is the name of that package now you can see here that this gives us the option to run that's what we've already seen before and then the keyboard shortcut over here is command I but there's also some additional options here and we can see here that one of these is run options so I'm going to go ahead and click on that and then it pops up these different options that we can use when running the script now the one that I want to change here is this command so this command here we can plug in the path to whichever python that we want to use so for example I know that my path to python 27 is in user bin python 27 so let's say that I wanted to run our script with this python 27 version um so we can either just run that um or we can save this as a a profile now we're going to want to save this as a profile because it's something that we're going to want to use over and over without having to type in that path every time so I'm going to save that as a profile and I'm just going to call that python 27 and now that python 27 pops up and I can run the script with that and now if we look at our output down here now sorry again that this text is uh small but um I'm not sure if there's a way that I can enlarge this or not but I'll go ahead and just read to you what it um popped out here but when we print our cy. executable it's printing out the path to that uh python27 and when I print out the cy. version now it's printing out 2.7 down here so it is using that python 27 version now the script doesn't default to any of those profiles so if I just run the script regularly so I just ran it again and now down here it's popping out uh python 3.5 so if we want to run it with that python 27 profile again then we can just pull up that command pallet and type in script and there's one option here that is run with profile now usually it gives the keyboard shortcut over here I'm not sure why it's not showing up now but the uh keyboard shortcut on a Mac is command shift K so now that I clicked on run with profile then you can see that it pops up with the profiles that I have available and we've only made the one python 271 so now I can run it with that and down here at the bottom this is uh the output for this for the CIS stop version is Python 2.7 so it did run that correctly and you can set those run options up for multiple versions of python or you can point to any virtual environment if you need to run a python in a virtual environment so I think that's going to do it for this video uh that is everything specific to how I set up a python development environment within atom uh I hope people found this useful uh the most popular questions that I get on this channel are people asking how to set up python development environments and what I recommend so like I mentioned earlier I also use Sublime Text and have done a video on how to set up a python environment within Sublime Text also and I'll put a link to that video in the description section below now if anyone is wondering if I would recommend Sublime Text or adom then I would just say that it depends so I think that Adam is more userfriendly if you're just getting started out and if you don't want to purchase Sublime Tex then I would say that Adam is a great option but I've been using Sublime Text for so long that I'm more used to it and I find myself going back to it often but really the choice is just up to you and whichever you prefer so hopefully having videos on how to set up environments in both of these editors now you can play around with them and just decide which one you personally like more so if anyone has any questions about what we covered in this video then feel free to ask in the comments section below and I'll do my best to answer those uh if you enjoy these tutorials and would like to support them then there are several ways you can do that uh the easiest way is just to Simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the mem you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching