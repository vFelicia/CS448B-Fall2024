hey how's it going everybody this is going to be another programming terms video and in this video we're going to look at the terms mutable and immutable so if we look at the definition on Wikipedia it says that an immutable object is an object whose State cannot be modified after it is created this is in contrast to a mutable object which can be modified after it's created um so let's go ahead and look at an example of this and uh why you need to know these two terms now I'm going to be using python uh in these examples but uh like most of my programming term videos don't get caught up in the language I'm using because uh these terms apply to a variety of programming languages so first we're going to take a look at an example of something that is immutable and in Python A String is immutable um so right here you can see that we're setting a equal to the string Corey and if I print out a you can see that I get quy right there um now immutable doesn't mean that I can't assign this variable again uh you can see down here I could change this to John if I run this code you can see that a was equal to Corey now a is equal to John um but you know I said that a was immutable that strings were immutable so what's going on here so what's going on is that it's not actually modifying this string object it's creating a new string object now to um kind of see this in more detail uh python has this ID function which prints out the memory address um so if I save that and now I run this if I run through this code you can see that up here I said that a is equal to Corey I printed out a then I printed out the memory address then I changed it down here and printed out a again and then printed out the memory address again so you can see whenever I changed a here since a string is immutable it created a new string object so you can see here that these uh memory addresses don't match so really to show you that strings are immutable um let's try to change one single character of a so let's say that I want to capitalize Corey so if I said a and the index of zero which would be the c um what if I tried to set this to an uppercase C so let's save that then I'll put back in here print a so let's save that and let's try to run it now you can see here that we get a type error and it says that string object does not support item assignment that's because this is immutable we can't change this string object so what's an example of a an object that is mutable well well in Python a list is mutable so if I make a list here and let's just do 1 2 3 4 5 and then let's comment this out down here for now and let's run this you can see that it uh printed out our list and now if we wanted to change the first value in our list uh let's set it to uh six and we print this out then you can see that it printed out both of the lists and the memory address is the same so it changed that value in place that's what it means to be mutable okay so why is it important to know this why is it important to know the difference between a mutable and an immutable object um well aside from just avoiding errors there's also uh problems with memory as well so some things can seem harmless uh which um really end up being really bad in performance so for example I have this file over here called uh concat dopy and what this does is it has a list of employees here and then it Loops through and this is some sample uh HTML output so let's look at what we're doing in our code here we have this output which is a string uh equal to this opening uh list here and then we are looping through our list of fake employees here and the same output variable we are concatenating these lists with these employees added on to the end and like I said before don't get caught up in the python syntax um just going over these terms here um so then at the very end after we Loop through all the employees and concatenate these strings together then we add on the uh closing list and if I print this out uh you can see that it went through and created some fake HTML here with a list and has our list of employees so what's wrong with doing something like this um because it looks fine and it is fine if you have such a small list here but this is just an example but you know in um in production code you may have uh thousands of strings that you're concatenating and um that's whenever it becomes an issue um so if I uncomment out this line here where I print out the address of output within this for Loop then you can see if I print that out then the address every time it goes through and it adds a new employee to the output then it's creating a new string object so imagine that I had thousands of these then it would be creating thousands of different objects in memory so you can see all these are all different so it's good to keep those the differences between mutable and immutable objects in mind whenever you're thinking about performance also and like I said you'll see this in other other languages also so for example in Java you have a string class uh which is immutable and then you have something I think it's called string buffer which is mutable and it's used for the same thing uh so whenever you're doing large amounts of concatenation and things like that in Java you would want to use a string buffer instead of a string because it doesn't take that performance hit whenever uh of creating uh thousands and thousands of new string objects in memory so hopefully after watching this video you have a better idea of what mutable and immutable means and also some of the things that you need to watch out for once you do understand those differences but if you do have any questions just ask in the comments section below um be sure to subscribe for future videos like this and uh thank you guys for watching