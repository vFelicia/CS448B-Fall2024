hey there how's it going everybody in this video we're going to be learning how to read and write zip files now this can be extremely useful if you're wanting to write automated scripts to do all of this kind of stuff for you in Python so for example in my latest video where we analyze the 2019 Stack Overflow developer survey I went out and I downloaded that data manually but if you want to automate that entire process using Python then we can do that in a few ways so we'll learn how to use the zip file module to do this but we'll also see a couple of other ways to do this using the SH util module to do this in a bit simpler way and with SH util we'll also be able to work with gzip files as well now I'd also like to mention that we do have a sponsor for this video and that is brilliant org so I really want to thank brilliant for sponsoring this video and it would be great if y'all could go and check them out using the link in the description section below and support the sponsors and I'll talk more about their services in just a bit so with that said let's go ahead and get started so first let me show you how to do this with local files on our machine so that we can get the hang of this and then later in the video we'll see how we can download a zip file online and extract that data so I currently have a directory open here on my desktop and within this directory I also have a couple of files that I'm going to write to a zip archive so one of these files is just a simple text file called test txt and the other is an image called thumbnail dot PNG so if I open test dot txt we can see that it's just a text file that says this is a test file we'll use this file for the zip tutorial and for the image this is just the thumbnail for this video ok so let me open up our script here and we will write a script to zip these files and first we're going to do this using the zip file module so I'm going to import the zip file module and that is in the standard library so you don't need to install anything and now in order to create a new zip file we can work with this in a simple way just like we work with other files so we can open this up for writing just by saying something like my zip is equal to and this will be zip dot zip file now this is a zip file class be sure you get the casing correct here it's a capital Z and a capital F and now let's put what we want to call this zip archive so I'll just call this files dot zip and now we want to say that we want to open this in write mode since we're going to be creating a zip file okay and now we can write those files to our new zip file here just by saying my zip dot right and then pass in the files that we want so first I want to write test dot txt and also I want to write thumbnail whoops let me do this here thumbnail dot PNG and once we have written the files that we want to this zip file then I can just say my zip dot closed okay so let's run the script and see if we get a zip archive in this directory so I don't have any output here so that's good that we don't have any errors so let me open up finder here and here within finder we can see that we have this files dot zip archive so let me extract that here within my Finder window so I'm just going to double click this on windows you might extract that a different way and now I have this files directory and if I look in here we can see that we have this test txt file and this thumbnail dot PNG image okay so we successfully created a zip file using Python so one thing that you might have noticed when we created our zip file is that we opened the file and close the zip file manually and usually this is a good indication that we should be using a context manager instead and we can do this with zip files as well so if you aren't familiar with context managers then I do have a separate video on that topic so I'll be sure to leave a link to that video in the description section below if anyone is interested learning more about those so in order to do this with zip files we can just say I'm going to grab this part here I'm just going to say with zip file dot zip file everything is the same there and then I'll just say as my zip and open up our context manager here and then I can just indent these sections here into our context manager and then I can get rid of this closed part down here at the bottom because that's what context managers are used for it opens the file and then it handles the closing of that file for us so now just to make sure that this worked I can delete the files archive that we created before and now if I rerun our script then we can see that we still have that files archive with those files so that's good now you might expect your zip file to be compressed here but by default we're not actually creating a compressed zip file in order to do this we need to pass in a specific value to the compression parameter now the zip file that I'm creating here doesn't have too many files in here so there's probably not of competive compression that can be done but let's go back and just see how we would be able to do this so to compress this zip file we need to pass in an additional parameter here of compression and I will set this equal to zip file dot and this is all capital here zip deflated whoops let me spell that right okay so now we can see that we are opening this zip file with a compression set to zip file dot zip deflated so if I run that then we can see that we don't get any errors down here so that is how we compress a zip file when we're writing it ok so so far we've created a zip file within our script but we might want to extract the zip file within our script as well so let's go ahead and do that so I'll go ahead and delete what we just extracted so that we don't have this here within our script so I'm going to delete this files directory I'm going to keep the files archive this files dot zip because I'm going to extract that within my Python script now first I'm going to copy the section where we created our zip file and paste this down here a line and then I'm just going to comment out that first part so first let me just delete these sections here within the context manager where we are writing to our zip file because now we're going to be extracting and now instead of writing a zip file we're now reading a zip file that already exists so instead of aw here for writing a file let's change this to an R for reading a file and I'm going to get rid of this compression part as well since we're no longer creating that ok so we can see that we have a context manager here it says with zip file dot zip file and we are reading in this files zip which we created earlier and now if we just want to see what's in the zip file then we can look at a list of the names of the files within that zip so to do this we can just say I will print this out we'll print out my zip dot name list and this is a method here so don't forget these parentheses so if I run this then we can see that we get the names of the files in that zip archive that we just read in and now with this zip file we can extract all of those by saying so I'm just going to delete this name list here now we actually want to extract these so to extract these I'll just say my zip dot extract all and that's a method and when we extract this let's give this a name for the directory where we're going to extract these files so and extract all here I'm just going to call this directory files so if I run this we can see that we didn't get any errors here and if I open up my Finder window then we can see that now we have this files directory with those files extracted so we we extracted this zip file here and created this files directory all within our Python script now if you just want to extract a specific then we can do that as well so if you have a zip file that has you know tons of files and you just want certain files out of there then you can extract just single files so for example let's say that I only wanted to extract the thumbnail dot PNG from my zip file so first let me go back and delete the original thumbnail dot PNG that I have here in my directory and now I will extract that thumbnail dot PNG from this files zip archive so to just extract that file instead of saying my zip dot extract all here I'm just going to say my zip dot extract and then pass in the name of the file that we want to extract and that was thumbnail dot PNG so now if I run this we didn't get any errors and if I open this up we can see that now we have that thumbnail dot PNG back in our directory here ok so that covers the basics of zip files but another common format for these zip files is gzip and we can't actually use this zip file module to create and extract gzip files to do that we could use the gzip module but I'd really like to show you this using the SH util module instead because it allows us to work with both zip and gzip files the reason I didn't show SH you till right off the bat is because I like how the zip file module allows us to work with these like we're used to working with other files and also when using Shu till I don't believe we can add individual files into an archive as far as I know we can just pass in an entire directory if anyone knows a way to zip individual files with SH util with the Shu told module then be sure to let me know if I'm wrong about that in the comment section below but I use this when I'm zipping and unzipping entire directories so let's see how to do this so let me get rid of everything that we've done here so far and now I'm going to import the SH util module so that is going to be import and this is SH util ok so now let's use the SH util module to create a zip file of an entire directory and I'll use that files directory that we extracted in our previous example so to do this we can just say Sh util dot make underscore archive and now we need to pass in a couple of arguments here so the first argument is going to be the name of the file that we want to create so I'm going to call this another and since we already have one call two files that's the one that we're going to be working with and now we need to pass in the format and there are some different formats and we're going to take a look at you know gzip here in a second but for now I'm just going to use zip I also show you the other formats that we can use as well and now we are going to pass in the directory that we want to zip so just so this isn't too confusing here we are going to zip this directory up here this files directory and we are going to create an archive called another so that is called files and this is all that we need right here so if I run this then let's see what this did I'm going to pull up my finder here so we can see that it took this files directory here and it created a zip archive called another dot zip and it used sip since we passed in zip as the format and if I open this then now I have another directory and it has test txt and thumbnail dot PNG within there okay so this was pretty simple making a zip file from a directory using the SH util module all we had was this one line right here and extracting the contents is just as easy so let me delete the folder that I just extracted manually so I'm going to delete this another folder there and then I'll extract that using Python so we can just come back over here to the script and I'm going to comment out where we created our zip file since we already created that and to extract that zip file that we created we can just say SH util dot unpack underscore archive and then first we need to pass in an argument of the archive that we want to unpack and we call that another dot zip you have to add the dot zip here or else it won't know what directory you're talking about and now let's pass in a name for the folder that we would like to unpack this to so I'm just going to call this another for another directory and if I run this then open this up then we can see that we deleted this before but we have unpacked that zip file and we have our files there in that unpacked directory now like I was saying the SH util module allows us to make and unpack G zip archives as well so there are some other archive formats but I'm not too familiar with all of these I have these pulled up here in a snippets file so let me switch over here so these are the different formats here so we have zip which is a zip file we have tar and tar is just an uncompressed tar file we have GZ tar which is a gzip tar file and BZ tar be zipped tar file and XZ tar and XZ tar file so those are the different formats there and from these snippets here we can see that to make a gzip archive right here a gzip tar file we can use this GZ tar as the format that we pass in to our make archive so I'm going to comment where we are unpacking our archive here and uncomment where we are making an archive and now instead of doing another zip file I'm going to do another as the name steel and I will pass in that GZ tar format instead so if I run this then let me open up my directory here kind of getting crowded with all these zip files but we can see right here I know that this text is a little small on my Mac but we have a GZ archive here it's another tar.gz and i can unpack this one just like I've been doing the others first I would delete the other the folder that we have so far I can unpack that tar.gz and we can see that here we have the test txt file and our thumbnail dot PNG so we can see that that worked and I won't show unpacking that in Python because it's just the same process of using that unpack archive function and specifying that gzip file name instead of the zip file name okay so with those examples of local files out of the way let's now see how we can go about downloading a zip file online and extracting that so this is something that might be really common if you're writing automated scripts for pulling down certain data and in this example I'll use the zip file of the data from the 2019 stackoverflow developer survey so I've got that page pulled up here in my browser so let me open this up so I've got the page open here where we can download this data now this is easy to find online but if you want to follow along then I do have a link to this page in the description section below as well okay so here are all the download links here for all the different years and I'm gonna want the 2019 data and I need the link to download this zip file to get that link we can right click on it and then click here where it says copy link address so I'm going to copy that link address now if you're writing an automated script with a URL that's created dynamically so this link address here is always going to be the same but if you have a link that's being created dynamically then you either have to know that URL or how that URL is generated or you have to go out and scrape that URL somehow using something like beautifulsoup and i've got a video on beautiful soup as well that I'll add to the description section below if anyone has never scraped websites before that goes into depth about how to do that but for our example here we will just copy this link address but again if you're scraping the site you can grab it that way so now let's go back to our script with that URL to download that zip file and now we'll just erase everything that we have here so far and now let's import requests now you'll need requests installed if you don't have that pip installed yet now again I'm not going to go into the details of these other modules in this video so if you'd like to learn more about what we're doing here in requests then you can watch my video on that specific topic so I'll leave a link to that video in the description as well but I'll go ahead and import this say import requests and now to grab that file we can just say R is equal to request dot git and then I'm going to paste in the link address which apparently they're storing this on on Google Drive to that CSV file so that is that URL there and now to download this to our machine we're going to say with open and now what we want to call this file so I'm going to call this data zip and now we want to open this file in a in write mode and also a B for byte mode because we're actually downloading bytes here okay so now we can say as F and now we have opened this data dot zip file and we're ready to write these bytes that we just downloaded so now let's actually write them so I'll say F dot write and we will write the bytes that we download from this link and to do that it is r dot content okay so now at this point we should download this data from this URL here and save that into a data type file and now to see what's in that zip file that we download we can just use what we learned earlier and print out the name list or anything that you want from that zip file so let me import the zip file module so I'll import zip file and now down here at the bottom I can just say with zip file dot zip file and we want to open up data dot zip because that's what we called the file that we're writing here and we want to open this in read mode and I'll say as data underscore zip and now we can just print data zip dot nameless we can also extract that data whatever you want to do with it but I'll just print the name list for now so let's run that and see if that entire process works so I'll save that and run it whoops looks like I misspelled requests here yep I should have seen that don't know how I didn't okay so now let me rerun this now this might take a second because it's going to go out on the internet here okay so I got another error here it says bad zip file file is not a zip file so I'm assuming everything else looks right here so I'm not too sure what's going on here I'm not gonna bore you guys too long with trying to figure this out so I'm going to pause the video real quick and go back and look at my notes and see what's going on here okay so I went back over my notes and I'm not really having any luck figuring out what is going on with this right now but let's go ahead and just do a backup just so you can see what this looks like so I'm going to go to my github here and you can download repositories as zip files so let's just use this as a backup so that I can show you what this looks like and maybe that issue will of itself with the stackoverflow downloads I'm not sure but I'm here on my github and I'm going here into my dot files repository let me zoom in here a little bit and on gob we can see that there is a button here for clone or download so I'm going to click on clone or download and then there is a download zip link right here so I'm gonna do the same thing that worked earlier on stackoverflow and it's not working now for some reason but I'm going to right click and I'm going to click on copy link address so I should have that link address copied and now I'm going to use this URL this github URL instead of that stackoverflow and now let me save and run this and now we can see that we printed out the name list of everything in that zip file and here we can see everything so I've got my dot files aliases file bash profile so it did download that zip file there and we named it datatype and we did extract or we actually didn't extract that data but we opened it up in zip format here and printed out the name list and if I wanted to extract that then it's as easy as just saying extract all running that and if I go back to finder here then we can see that we have that dot files master repository there that was extracted in my folder and also whenever I used extract all right there like we saw before I could have put a name in here to give that a specific name so if I just wanted that to be data then I could just call that data I'll take that print statement out and now we can see that that repository was now called data instead and we have that dot files master right there ok so sorry about that mishap there with the stack overflow data I'm not sure what happened usually these tutorials pretty smoothly without any hiccups but I couldn't quite figure that one out so maybe I think they changed the links on me or something while I was doing this video because it worked earlier and now it's not but with that said before we finish up here I would like to mention the sponsor of this video and that is brilliant org so if you'd like to learn more about programming and programming concepts like we touched in this video then I would definitely recommend checking out brilliant dot org brilliant is a problemsolving website that helps you understand underlying concepts by actively working through guided lessons and they've recently added some brandnew interactive content that makes problemsolving and challenges even more fun and handson so if you'd like to learn more about programming with Python then I would recommend checking out their newer Python course that covers everything from the basics to some real world applications they even use Python in their statistics courses and will quiz you on how to correctly analyze the data within the language so they're guided lessons will challenge you but you also have the ability to get hints or even solutions if you need them it's really tailored towards understanding the material they even have a coding environment built into their website so that you can run code directly in the browser and that's a great compliment to watching my tutorials because you can apply what you've learned and their active problemsolving environment and that helps to solidify that knowledge so to support my channel and learn more about brilliant you can go to brilliant org forward slash CMS to sign up for free and also the first 200 people that go to that link will get 20% off the annual premium subscription and you can find that link in the description section below and again that's brilliant org forge slash CMS ok so I think that's gonna do it for this video hopefully now you have a pretty good idea for how you can create and extract zip files in Python along with a few other tricks like I said this is really useful for writing these automated scripts of pulling down data and doing everything within your script instead of doing some of these steps manually every single time but if anyone does have any questions about will be covered in this video then feel free to ask in the comments section below and I'll do my best to answer those and if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest ways to simply like video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page and inscription section below be sure to subscribe for future videos and thank you all for watching you