hey there how's it going everybody in this video I'm going to try to explain the solution to a problem that I see a lot and also a common question that I get on my videos and the problem that I'm talking about can take a few different forms so maybe you've installed Python but when you type Python in the command line it either says that it doesn't recognize the Python command or maybe it gives you a different version than what you thought that you'd installed or maybe you're trying to use a feature that's only available in later versions of Python like f strings and Python 3 6 and it's just not working for you so that likely means that you're not using the version of Python that you think that you're using or maybe you're trying to import something that you thought that you installed through pip but it keeps giving you an import error and telling you that it can't find the module so all of these problems are likely caused by your machine not using the correct Python interpreter so in this video we'll be learning how to find out which Python interpreter you're using and where it's located on your machine we'll also see how to switch between different Python versions and environments and also how to troubleshoot imports if they aren't working correctly so in this video we're gonna be seeing how to do all of this on the Windows operating system but also have a video on how to do this on Mac and Linux as well so if you're on one of those operating systems then I'll have a link to that video in the description section below ok so with that said let's go ahead and get started so first of all maybe you've tried installing Python but it still isn't working on your machine so I've installed Python 2 and Python 3 on my Windows machine here but when I open up my command line and run the Python command then we can see that it says python is not recognized as an internal or external command now the reason that this isn't working is because our machine is only looking in certain places for commands if it doesn't find the command in those locations then it will give us this response that it's not recognized as an internal or external command now we could just run Python by putting the exact location of the executable so when I installed Python 2 and python 3 on this machine I installed them in two different locations so let me bring those up so python 2 is installed here i'm not sure if you can see this but it's in my c drive in a directory called python a27 and and for Python 3 it's a bit more of an obscure location it's in users Corre app data local programs Python Python 37 so let me go back to where I installed Python at in that Python 27 directory so within this directory we have a Python exe executable so this is what runs Python so if I use this entire path to this executable then I should be able to run Python in our command line so let's go ahead and try that so I'm going to grab part of this path up here from the bar and go back to our command line and now I will paste that in and within that directory I will just run Python so you can do python exe or just python i'm just going to use the python command and run that and you can see that it runs python 2 7.15 ok so now I'm going to exit out of that and clear the screen here and now let's go to that Python 3 directory so I'll pull that up now like I said this is in a bit more of an obscure location so this is where it automatically installed when I downloaded python online now if you don't know where python was installed on your machine then i would suggest going back to the python download page and when you download Python it allows you to install it in the default directory which in my case was that long path that we just saw but if you don't want to install it there then you can use a custom location and you have that option as well so now let's go back to our file explorer here so you can see in this directory I have a Python exe as well so just like with python 2 if I use the full path to this Python 3 executable then I can run that in my command line as well so I'm going to copy this entire path here and pull up my command line and paste that in sorry it's wrapping to another line here and within that directory I'm going to run the Python command so by running the full path to that command we can see that it's running Python 3 7 ok so now I will exit out of there ok so that's good but it's probably not why you're watching this video so it would be nice to simply be able to use the Python command like I tried to at the beginning of the video and have it run the version of Python that we want so like we saw before if we run Python and run that then it says python is not recognized as a command and again the reason that this isn't working is because our machine is only looking in certain places for that Python command or executable and if it doesn't find it in those locations then it will give us this response that it's not recognized now we can add directories to the locations that our machine will look and we can do that by adding these directories to the path environment variable so on Windows we can get to the path environment variable by opening our Start menu so I'm going to do that down here at the bottom and we can search for system and we'll click here with within system within the control panel so click on that and within here click on advanced system settings and then go to environment variables so within here we have our user variables and our system variables now we can simply add to our path under our user variables so I'm going to click on the path up here and then I'm going to click on edit and now we can add directories to that path environment variable so to do that we can just simply click new and now we can add the path so now we can just paste in our directory that contains our python executable so i'm going to paste in that python the three directory that I copied it just a bit ago so I'll paste that in and I'm also going to add the directory that contains our Python 2 executable so I'm going to click new here then go back to our file explorer and open up that location and copy that go back to our environment variables and paste that in now notice here that we're pacing in the directories not the full path to the executable so we left off the Python Det exe on the end of those just the directories now the directories higher on the path have higher precedence so rearrange these so that your preferred version of Python is higher in the path so for example if I have the Python 2 directory at the top so if I click on this and click on move up and then I'll put python 3 here second so I'll move that up one so I have Python two than Python three then now let's save all of this I'm going to click OK down here at the bottom and okay down here and okay here and now let's restart our command line so I'm going to quit out of what we had before and open that back up and maximize this again okay so now let's see what happens when we type in Python this time so if I type in Python and hit enter then you can see that we actually get python two seven here and the reason for that is because we had python two above the Python three directory in our path environment variable now if I go back to those environment variables so I'm going to reopen our system settings here click on advanced system settings go down here to environment variables at the bottom and click up here on our path and go to edit now I'm going to click on python 3 and move that above python 2 and then to save this I'm just going to click OK on all of these settings here and then restart our terminal again so restart our terminal maximize that and now if we type in Python then we can see that now we're running Python 3.7 and that's simply because it finds that Python 3 executable in the path before the Python 2 executable now python now gives you the option when you download Python to automatically add the installation directly directory to the path automatically so you might not have to do this manually but it's still good to know how the path works and to be able to change this manually if you need to now one more tip when it comes to the path is that you'll likely want to also add pip to the path as well so pip is what allows you to install packages so you want that command to work on the command line as well now it's not in the same directory as Python it's in the same general location as the python executable but it's inside of a scripts directory so let's add this really quick so first of all just to see this if I pull up the Python 2 location here then we can see that we have a scripts directory and if I open that then you can see that our pip executable is inside of that folder and if I open up our PI on three directory then we have a scripts directory and here as well so if I open that then we can see that we have pip inside that scripts directory as well so now let me go back here and let's add that to our path so I am going to open up that scripts directory and copy that and go back to our system settings advanced system settings environment variables click on our path and edit and now we want to go to new and paste that scripts directory in and then I'm going to move that up underneath our Python 3 directory and I'm going to do the same thing for this Python 2 directory as well so I'll click on new and paste that in and I'll just manually type this in so that is scripts inside that Python 2 7 directory and I'm going to move that up underneath the Python 2 7 directory and like I said doing that is going to allow you to use the pip command with those Python at versions so just to show this I haven't saved that yet so if I go back here to the command line and exit that and run pip then we can see that it says pip is not a recognized command just like it did with Python and before but now we can close down our command line and we can just click OK to save these environment variables so I will save all of those reopen our command line again and now if we type pip then we can see that that works but it's looking for a pip command so I'm just going to go ahead and clear the screen there and again like I said before if you told python to add everything to your path when you first installed it then that should have already been taken care of in terms of adding the scripts directory and your python directory to your path environment variable but it's still good to know how to add it if you need to ok so now let's look at a couple more tips so let's say that your python command is working but you have no idea which python executable you're using or where it's located now this can definitely happen if you're using virtual environments or have a lot of different versions of Python installed so let's say that you type in Python and it says that you're running Python 3 7 but that doesn't really do you much good if you have ten different virtual environments that are all using Python three seven so how can we actually see exactly which Python we're running so to find this out we can use the SIS model and this is a builtin module so within Python we can say import sis and like I said that's a builtin module so we don't need to install anything and now we can simply look at sis not executable to see what executable we're currently using so that is sis not executable and if I run that and we can see that we get this long path here to this Python executable and we can see that that long path is what we added to our path environment variable before that Python 37 directory so if that value is what you expect it to be then that's great but if it's not then using the value returned from sis not executable can help you debug what's going on if it's not the directory that you think it should be so if you think it should be something else then you'll have to check your path environment variable again and try to figure out why that executable is being seen before the executable that you think it should be so there might need to be some rearrangement like we saw a second ago so if you ever want to view your entire path from within the command line then let me exit out of Python here and let's echo our entire path to see what we should be getting so to do this on Windows it is echo and then parentheses or percent signs path percent signs so I will run that now there's going to be a lot more here than what we actually added in but our additions are going to be at here at the very end so if we look here then I can highlight this okay so our additions start right here and we can see that we have our Python three directory and then after that we have our Python three scripts directory and then after that we have our Python two seven directory and then our Python two seven scripts directory so if you ever run Python and you import sis and then run sis not executable and it gives you a location that you weren't expecting then you can echo out your path and do a little debugging there to see why it's that version of Python above another version that you may have expected and you might need to do some rearranging there in order to get it set up how you'd like so for example if I wanted Python at 2/7 to be the default Python then I could come in here to advanced system settings environment variables edit our path and then I could move Python to seven up to the top which would make that the default Python but I'm not going to do that now I'm just gonna leave that where it was and cancel out of those and go back here to my command line so now let me clear this out here okay so I also get a lot of questions from people who tell me that they've PIP installed a package but when they try to import it it doesn't work so this can also be a path issue so Python and pip are two separate commands and therefore could be located in two different places and we've already seen that because Python was in our Python directory and the PIP command was in that scripts directory so if your path is messed up then it's entirely possible that what you're installing with pip isn't installing that package for the version of Python that you think it's installing it for so for example let's say that I wanted to install Django so to do that I could just say pip install Django and if I run that then it says that the requirement is already satisfied so we already had that installed but it also gives us the location where it tried to install this install this and it tried to install this in that Python 3 7 directory in this Lib site packages directory now another way to get the location of a package is to use pip show so let me clear the screen here real quick and now let's use pip show so I'll say pip show Django and if I run that then it gives us a lot of information about the installed package but also one of those is a location variable down here and it says that the location is in this Lib site packages directory of that Python 3 7 folder that we saw before ok so that's important because if you're trying to import a package that you've installed and it says that it can't find the package then make sure that the location of that package is actually in the lib cite packages directory of the version of Python that you're using so again if I was to open Python here and import sis and then check check sis not executable then the location that it shows us here needs to be the same as the location where it's telling us that that package is installed now since those are the same right now then it means that I should be able to import django with no problems and if i import that then we can see that i don't get any problems but if that was telling me that it can't find a package called django or that there's no module named Jango then I might want to check those locations to see if those are off and if they are then that's your problem it means that your pip command is installing django for python in a different location than the python that you're actually using so if those locations didn't match then that would be your problem and you would need to fix your path in the ways that we talked about before by rearranging those ok so now let me exit out of here and clear my screen now I think that's everything that I wanted to cover in terms of figuring out how to set your Python path and see what's executable you're using but another thing I should mention is that we mainly covered the command line in this video but sometimes I get questions from people who are using an editor like sublime text or something similar and they tell me that their command line is using the correct version of Python but that their editor isn't so for example sometimes well people will tell me that you know f strings aren't working for them but they have Python 3 6 installed and it's working on their command line well in that case you know most likely that means that your editor just isn't using Python 3 6 even though you've installed it and a good way to determine that would be to compare that sis not executable value that we saw before so some editors might have a different way of determining which version of Python they're using instead of just looking at the path so in sublime text they use something called build systems and I have a completely separate video on how to set up sublime text build systems but understanding what we covered in this video here should help you better figure out which directories you know you'll need to add to those build systems in order to get those set up properly and you may need to do something similar with other editors and IDs as well depending on what you're using but really quick let me show you a fast sublime text example just to show you what this looks like now I'm not gonna go into too much detail here since this isn't exactly a sublime text tutorial but I'll just show you how I've set this up for me so that I can switch between Python 2 and Python 3 so I have a demo file here where I'm just printing out the sis not version and sis not executable so if I run this right now then we can see that this is running Python 3 7 and the executable is what we saw before it is in that long directory and that Python 3 7 directory ok so that might be what you want but what if you wanted to use a different version of Python or what if you wanted to use the environment from a virtual environment so to do that we would have to create a new build system so if you come up here to tools and then go to build system then at the bottom you have the option to create a new build system now if you were to create a new build system then it would basically give you an empty JSON file and you would have to fill in certain values so let me show you what this looks like so we can see here I've created a build system called Python 2 7 now let me show you what mine looks like so I've got that pulled up here I'm going to close down that output for now so this is what I've filled in for my Python 2 7 build system now again I'm not going to go into this fully since I have a completely different video on this but you can see here that I'm passing in the full path to my Python 27 directory that we saw before and also the Python executable there and also on Windows you can see that we need to escape our back slashes here within the string but you can kind of see the concept now if this was a Python 3 build system then I would have the path to the Python 3 executable there if this was a virtual environment then I would have the executable for the virtual environment here so whatever the path to that whichever executable you on use goes here okay so that's the Python to seven build system so let me open up my sample file here again and I will go to tools build system and I'll actually select that Python to seven build system so if I select that and rerun this then we can see that now when we print out that system and sis not executable now it's printing out Python to seven and the executable is that Python to seven directory that we've seen throughout the video now technically since we're using Python 2 we should probably change these print statements so that they the syntax matches Python 2 syntax but that's ok as is for now it's just a demo ok and lastly I also briefly mentioned virtual environments now if you've never used a virtual environment it's basically a way to have a separate Python environment per project and that also includes separate Python executables and packages now you might be wondering if you'd have to go through that whole process every time you activate and deactivate a virtual environment but in the commandline you won't have to do that so when you activate and deactivate a virtual environment there is code included that automatically adds and removes those directories to the beginning of your path for you so you shouldn't have to worry about that but when you're using an editor like sublime text or anything else then you'll just have to do an online search to see exactly how to use that environment within that editor so in sublime text it's the build systems that we saw here in this video but I'm sure it's different in other editors and in the next couple of weeks I'm going to be doing a video on the newest official way to handle virtual environments using pip env so if you're interested in learning more about virtual environments then be on the lookout for that video ok so in this video we went over one of the most common questions that I get among people who are just getting started out with Python so it's common when people are first getting started out to occasionally get stuck in the same places now when it comes to getting started out in computer science in general that same concept applies now the most common questions that I see there have to do with the fundamentals you know such as data structures or algorithms now great resource for learning and practicing those common fundamentals would be our sponsor for this video brilliant org brilliant is a problemsolving website that helps you understand underlying concepts by actively working through guided lessons they have computer science courses ranging from algorithms and data structures to machine learning and neural networks they even have a coding environment built into their website so that you can run code directly in the browser and that's a great way to compliment watching my tutorials because you can apply what you've learned in their active problemsolving environment and that helps to solidify that knowledge they're guided lessons will challenge you but you also have the ability to get hints or even solutions if you need them it's really tailored towards understanding that material so they're computer science material is fantastic and I really like what they're doing they also have plenty of courses depending on what you're most interested in so they have courses in different fields of mathematics or astronomy solar energy computational biology and all kinds of other great content so to support my channel and learn more about brilliant you can go to brilliant org ford slash CMS to sign up for free and also the first 200 people that go to that link will get 20% off the annual premium subscription and you can find that link in the description section below and again that's brilliant dot org /c m/s okay so I think that is going to do it for this video hopefully now you have a good idea for how you can manually set the Python path if you need to and also how you can switch between different executables but if you do have any questions about what we covered in this video then feel free to ask in the comment section below and I'll do my best to answer those and if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest ways to simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in its description section below be sure to subscribe for future videos and thank you all for watching you you