hey how's it going everybody in this programming terms video we're going to be taking a look at the difference between combinations and permutations now combinations and permutations aren't necessarily just specific to programming terms they're actually more mathematical terms but they come up so often in computer science problems that I think it's important for programmers to know the difference between these two so what is the difference between combinations and permutations well a combination is all the different ways in which you can group something where the order does not matter and permutations are all the different ways in which you can group some values in which the order does matter so I think instead of trying to explain it in words I think the best way will be to take a look at a programming example here now I'm going to be using Python for this example but just like my other programming terms videos it's not the language that matters it's the concept that you take away from it so no matter what language you decide to use there will be a library available to you which gives you access to combinations and permutations you're not going to have to write something like this on your own so in Python it's this itertools module and you can see here that the itertools module gives us access to combinations here and permutations here so let's go ahead and get started you can see that I have a list here of 1 2 3 so first we're going to look at combinations so you can see here that I am taking all the combinations of my list and I'm seeing how many different groups of 3 there are where the order does not matter so remember in combinations the order does not matter so then I'm taking all those different groups from the combinations and printing out C so if I run this you can already see down here at the bottom that the only group of that we got from these combinations is 1 2 3 now the reason for that is because this is already a group of 3 so there's no other way that we can arrange this so 3 2 1 is the same combination as 1 2 3 it's the same group of values because the order does not matter so to kind of drive this point home let's change this to two values here and now if I run this code you can see that the different combinations here are 1 2 1 3 and 2 3 so there are 3 different groups of 2 that we can grab from this list now you'll notice that we don't have 2 1 3 1 & 3 2 also because like I said before the order doesn't matter and when the order does matter that is permutations so let's take a look at this exact same example using groups of 2 let me change this to a 2 here and now we are taking all the permutations of the groups of two and then looping through that and printing those out so if I run that and you can see that we have 1 2 1 3 & 2 1 just like we did before but now we also have the different orderings of this so we have 2 3 3 1 & 3 2 so you can see here in the list of our output that we have 1 2 & 2 1 now if we were to use combinations those would be seen as the same combination because 1 2 & 2 1 is the same group and if the order doesn't matter then it's only going to give you 1 2 or 2 1 but not both ok so why is this important when would you ever use these in a programming problem well I've come up with a couple of examples here that kind of shows when combinations would be appropriate and when permutations would be appropriate now again if you don't know what's going on within the code here then don't worry about what's going on in the language so much but just rather the concept that the examples are trying to get across so up at the top here I have a list of 1 2 3 4 5 6 and then I'm taking all the different combinations of that list and I'm taking all the different combinations of groups of 3 and then I'm also taking all the permutations of groups of 3 from that list of 6 values now an example problem of when combinations would be appropriate is if someone asked you the question okay how many different groups of three and you take from this list that are equal to ten so right here I'm going to print out all the results within the combinations if the sum of those results is equal to ten so let me go ahead and run this and you can see that we got three different results here we got one three six which if you add all those up is equal to ten one four five and two three five now combinations is appropriate here because we're just taking the sum of these values so we only want to know what values add up to ten so for example here 1 3 6 we wouldn't also want the result 6 3 1 because both of those add up to 10 and it's the same values so just to show you that example let me replace combinations here with permutations and let me print out all the permutations that add up to 10 so if I run this code you can see that we get a lot more values here and that we also have 1 3 6 which add up to 10 and 6 3 1 but most likely the way that that question was worded it's better to use combinations because we only want the groups of 3 to add up to 10 and the order for us does not matter so now let's take an exact and example of a problem where the order would matter now this is where combinations wouldn't be appropriate but permutations would be appropriate so in this example here I'm just gonna make a very simple word matching game to where we can see so we have a sample word here and now I'm gonna see if any arrangement of these letters is equal to this word so what I'm going to do is I'm going to take all the combinations of these letters I also get all the permutations of these letters so first let me show you why combinations wouldn't be appropriate in this example so I'm going to replace that with combinations and for now I'm just going to comment that out and I'm just going to print all different combinations here so if I run this code you can see that we only get the one combination of these six letters now you can see if I comment out this print statement and then uncomment the working code here and run it you can see that it says that it's no match but this should be a match because there is a way to rearrange these letters that equals this word here so instead let's try this with permutations so again let me comment out this code here and just print out all of these values so you can see that the permutations all the different rearrangements of these letters is a lot larger than the combinations of these letters so you can see how many there are here so if you do do a problem coding problem with permutations you want to be careful because if I was to add more and more letters here and you take the permutations of more and more values those can greatly increase very very quickly and you could be using up a lot of computing power so just keep that in mind when working with permutations but you can kind of see what's going on here if we look at the results then there's going to be a permutation of this word that's going to give us the correct value so you can see here that we have this output right here is equal to our words so if I uncomment out this print statement and then uncomment the code here what I'm going to do is just join that result together and see if it's equal to our sample word and print match if it is so if I run this code you can see that we got a match now both of these examples that I just used could probably be written to be more efficient but really I just wanted to show you a sample problem where combinations would be appropriate and permutations wouldn't be appropriate and another example of where permutations would be appropriate but not combinations so hopefully after this video you can kind of see the difference between these two and how you would use them whenever you're writing code so that about does it for this video hopefully that cleared up any confusion between the difference between combinations and permutations but if anything wasn't clear if you have any questions then just ask in the comment section below be sure to subscribe for future programming videos and thank you all for watching