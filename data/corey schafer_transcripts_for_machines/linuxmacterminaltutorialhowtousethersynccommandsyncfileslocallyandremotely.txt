hey everybody how's it going in this video we're going to be learning how to use the rsync command now the rsync command allows you to transfer and sync files efficiently across different directories and machines so if you ever want to set up a backup for your files or sync files across different machines then rsync would be a great way to do this so it's a lot more efficient than just copying files because rsync only copies what's different so for example if you're backing up thousands of pictures then copying all of these every time would be way too inefficient so if you did this with rsync then it would only need to sync what's different since the last backup and also if you were copying data and lost a network connection or something like that then when you reran the rsync command it would know where it left off and wouldn't have to start from scratch so this is an extremely beneficial command to know how to use properly so let's go ahead and get started and look at some examples now rsync might already be installed on your machine if you're on a mac then it should already be available to you and if you're on a debian based linux machine and don't have rsync installed then you can install that with apt get install and install rsync and if you are on an rpm based linux machine then you can install this with yum install rsync okay so when you have rsync installed and ready to go let's go ahead and look at a very simple example so i have two directories that i created here on my desktop and this top directory here is called original and the one below is called backup now the original has some images of my dog and the backup is currently empty so let's run an rsync command to sync these two directories and copy the images from the original to the backup folder so in the terminal i'm just going to navigate to where these directories are located and that is on my desktop and now to use the rsync command i'll just type in rsync and here we could add some options for rsync and we'll look at that in just a minute but for now we're not going to give any options so now we just want to put the source directory that we want to sync so in this case we want to sync the files in the original directory and since we're not using any options we actually have to specify the files and not just a directory so we can say original and then a star to sync all of the files and now we want the destination so in our case this is going to be the backup directory so if we run that then we can see that it synced all of the files from our original directory here into our backup directory now there's no harm in running this again so it won't do anything since there's no files different or any files that need to be resynced so you can just rerun this again at no harm so we can see that i ran that again and it didn't recopy the files or anything like that now the way this is running right now it won't actually copy directories and that is why we needed to add the asterisk to specify that we wanted all of the files within the original but a more common usage for rsync is to sync everything in a directory so for example if we were to create a subdirectory within original so i will just say makeder original and we will create a new directory called morepix and now if we reran our previous rsync command then we can see in our output here that it said skipping directory of more pix the one that we just created and when we look in our directories we can see that that was created in the original here but in the backup it was not copied over so if we want to sync the entire directory then we can use the dash r option to say that we want to recurse into directories and copy the total contents of the directory and subdirectories so if we just rerun this and we give rsync a dash r option now we no no longer need this uh asterisk here so if we run this then if we come over here to our directories then we can see that we have our more picks subdirectory within the original and also that was copied over to our backup so that worked as planned now when you do it this way notice that i have the trailing slash here after the original directory now that's actually important so that means that we want to sync the contents of the original directory if we leave it off then it will sync the directory itself so really just let me show you the difference here so i will sync only the directory and i'll leave that trailing slash off and now if i run this then without that trailing slash if we look in our backup directory here then we can see that instead of just syncing the contents of the original directory it actually synced the original directory itself so if we go in here then all of the contents and the subdirectories are still here but it actually placed that folder within uh the backup directory here and these are just left over from the last sync so if i to illustrate this a little further let me delete everything and then rerun that same command again and now we can see that it just copied that original folder over so if you want to sync the actual directory then you can leave that trailing slash off but most of the time my intention is to sync the contents of these directories so you want that trailing slash and when you include that and run it then you can see that it copies everything and syncs everything as it should and i'll go ahead and delete that original directory okay so this dash r option is great for getting all of the contents but i'd say a more common option for doing this is the dash a option so the dash a option is actually a combination of many different options so it stands for archive and not only does it recurse into directories but it also copies sim links preserves the permission modification times groups owners and things like that so i like to use the dash a option most of the time to copy everything okay so now let's look at a few more useful options and i'm going to delete the contents in this backup directory again now if you are about to run a large rsync job that syncs a lot of files and folders then you probably want to do a check on what files and folders are going to be synced so that you can make sure that it's what you expect because checking what's going to be synced before you actually run the command is a lot better than realizing afterward that you spent a lot of time moving gigabytes of data to the wrong place so to check what files are going to be synced without actually syncing the files we can use the dry run option so we can specify that we want to perform the dry run option with dash dash dry run or we can use dash in for short so just to be more clear for the video i'll write out the longer option there so let's say that we wanted to do a dry run of syncing our original folder contents with our backup directory so to do that we could say rsync and then instead of the dash r i said that i like to use the dash a for archive that includes those permissions and everything like that and now to do a dry run we can do dash dash dry run so now if we run this then we can see that it doesn't actually show us anything and if we look in the backup directory then we can see that it didn't actually sync those files or directories so it did do a dry run but the point of this is for us to know what files are going to be synced so that we can make sure that it looks correct so to display this we need to pair dry run with the verbose output and to get the verbose output we can include the dash v option so let's add the dash v option to our last run here and i'll just include that after the a so now we can see that it displays the files that it would have copied to the backup directory but since we had that dry run option as well it didn't actually make those changes so this allows us to make sure that everything looks correct and if it does look good then you can run the same command without the dry run included so now if we take the dry run away and run that then we can see that with that verbose option it told us exactly what it did and without the dry run it actually did perform that action of syncing those files and subdirectories okay so just to show you why rsync is so much more beneficial than just copying files over let me delete a couple of these files here from my backup directory so i'll just delete two pictures here and now if we rerun that command with the dry run option from earlier and run that then we can see that it knows that it only needs to copy these two files and not any of the others and these two files that it says that it will copy over are the ones that we just deleted so you can imagine that this would save an incredible amount of time if you had a lot of files or a lot of images say you had thousands of pictures then copying all of those every time you want to do a backup would be extremely uh you know inefficient and almost impossible to do and the rsync command makes this a lot easier okay so what happens if our backup directory contains some files that our original directory doesn't have so for example let me add a simple file to our backup directory so i'll just do a touch and backup and i'll just create a file here called test.txt and if i create that we can see that it was created in our backup folder so now our backup directory contains this test.txt file but our original directory does not so let's run another dry run and see if this matters at all so we can see that it still wants to sync those two files that we deleted from earlier but other than that it doesn't seem to care that there are more files in the destination now it's just going to move over the files that exist in the original directory now if we want our destination to mirror our source and get rid of any files that don't exist from our source directory then we can add the dash dash delete option to do this so we could say before our dry run here i'm going to add a dash dash delete and i'm going to make my screen a little larger here so that that all fits so now if we rerun this with the dry run then we can see that it still wants to sync the two files that exist in the source directory but it also says that it wants to delete test.txt now it also says that it wants to delete this dot ds store don't worry about that that's just a hidden mac file that gets created sometimes but apparently that is another file that exists in the backup directory that does not exist in the original directory now you have to be really careful with this because there are some horror stories online where people have accidentally set this delete flag on an empty directory which resulted in their entire backup folder being wiped out because if their source directory is empty and you say that you want to delete everything in your backup that doesn't exist in the source directory then that would be everything so you do want to be extremely careful with that and i don't use it a whole lot now i could see this being useful if you had a website or something that you wanted to keep your local and remote files synced perfectly together so for example if you deleted an html page on your local machine and then ran rsync then you would also want that to be removed from the remote machine so you definitely have that option but again just be careful when using that option okay so now let's actually see what it looks like to sync files between a local and a remote machine now i have a test machine that i have ssh access to and i have its ip address now if you'd like to have some test machines that you have ssh access to so that you can follow along then i do have a video on how i set mine up and i'll put a link to that video in the description section below so i have a test website in my projects folder with some html css and javascript files so if i cd back to my home folder and do an ls on this my site directory then you can see that we just have an html file a css file and a javascript file so let's say that i want to push these out to a web server and we'll pretend that my web server is the virtual machine that i'm currently running now if you're transferring data to a machine over the network then rsync does have the option to compress data while transferring and to do that we can use the dash z option and also a useful option for transferring over the network is the dash capital p which will show the progress so to sync this project i can say rsync and then dash z to compress a for archive that we saw earlier capital p to show the progress and then we want to set the projects and my site as our source now remember what i said earlier about that trailing slash now in this case i actually want to transfer the entire directory and not just the contents so i'll leave that trailing slash off for now and now we can put our destination and the destination is going to be our remote machine so first i'm going to put my username and i'm going to make this a little larger here so that we can fit all of this in so this is going to be almost like ssh into the machine so our username at and then the ip address the ip address for my test machine here is 192.168.56.100. and then we want a colon to specify the location and i'm going to put this in the home directory and inside this public folder and then i'm going to put a trailing slash there now i do have key based authentication set up for my test machine there so it didn't ask me for a password now if you don't have that set up then it might ask you for a password to fill in and then after you insert that then you should see output similar to this here so we can see that it shows us what it sent over and what the progress was so now let's ssh into that machine and make sure that everything got there so i'll just say ssh and the username then the address is 192.168.56 dot now let me navigate to the directory where i synced those files and there was not a folder in here before and now we can see that it exists and if i cd into that directory and list all of the files and we can see that the files were synced between our local machine and this remote machine and again this is better than just copying the files because it'll only sync the differences now we can do this in reverse also so let's say that we had a cron job on this test web server here that created a database backup or something like that so let me create a directory within our website and i'm just going to call this backups so i'll do a make dir and call this backups let me clear my screen here so i created that backups directory and now within that backup directory i'm just going to create a test file called backup.sql and we can just pretend that this is a sql dump into a backup file so now that that file exists on our remote machine i'm going to exit out of that machine and now we're back on my local machine so now let's say that we want to sync that backup from our web server to our local machine so we can just use the servers folder for our source and say so i'll just do an rsync and i'll do those same options the z is for compression a for archive capital p to show the progress and then core ems at 192.168.56 100. and now we want to specify the location of that backups directory on our remote machine so we'll put in a colon and that was within public my site slash backups and now we'll put in a space and now we want our destination and our destination is going to be on our local machine and i will just put this within our projects my site directory now you can put this anywhere but i'm just going to leave it within that my site directory so if we run this then we can see that it looks like we received our backups directory and our backup.sql file and if we look in our projects directory and my site then we can see that it does have a backups directory in there and if we look within that directory then we can see that we do have that backup.sql file that was pulled down from my remote machine now a very common use case for rsync is to pair it with cron jobs now if you don't know what cron jobs are they're a way to schedule commands to run on regular intervals and i have a separate video on setting up cron jobs and i'll leave a link to that in the description section below so pairing cron jobs and rsync together allow us to run regular syncs and make sure that backups and things like that remain up to date so it's extremely useful just having that working in the background without really needing to think about it so if those are the kind of things that you've always done manually as far as you know backing up a lot of pictures or pulling down backups from web servers or managing large projects then you know pairing up some cron jobs with some rsync commands just makes it where you really don't have to worry about those things and it just does it all on its own automatically okay so i think that is going to do it for this video i hope that now you have a good understanding of how rsync works and you have some ideas for how you can use this within your workflow but if anyone does have any questions about what we covered in this video then feel free to ask in the comments section below and i'll do my best to answer those now if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest way is to simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching you