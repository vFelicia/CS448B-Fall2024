boom boom Hey, everybody. How's it going? In this video, we're going to be learning about Python decorators. We're going to be learning how decorators work, and also when you would want to use them. Ah, so, decorators are a slightly more advanced topic, but we're going to walk through a few different examples so that we can understand exactly what's going on. Now, if you haven't watched my videos on closures or firstclass functions, then you should probably give those videos a watch, because they will explain a lot of the underlying concepts that I'm not going to spend a lot of time on here. And I'll put a link to those videos in the comments section below. But if you haven't seen those videos, then let me just give a really quick summary. Ah, so, firstclass functions. Firstclass functions allow us to treat functions like any other object. So, for example, we can pass functions as arguments to another function. We can return functions. And we can assign functions to variables. Now, closures allow us to take advantage of firstclass functions, and return an inner function that remembers and has access to variables local to the scope in which they were created. Now, if both of those definitions sound a little confusing, then let's go ahead and take a look at a quick example here. And again, I'm not going to go as indepth as I do in those videos. Ah, but let's just do a quick recap. So, we have an outer function here that doesn't take any parameters. And within our outer function, we have a local variable called "message". Ah, then we are creating an inner function within the outer function. Now, the "message" variable wasn't created within the inner function, but the inner function does have access to it, and this is what we call a free variable. Now, all our inner function does is print this message. Then we are executing our inner function and returning the result. So now, if I execute this outer function, here, and run this code, what it does, is it comes in here to this outer function, sets this message variable, ah, creates this inner function so we can see any outer function is we can do that by taking So now we