hey what's going on everybody uh today i wanted to take a look at the python package manager pip and also go over some of the most frequent commands that you're going to use whenever you start the usb so with that let's go ahead and get started so first things first one of the best resources is if you just type in pip help then it will bring up all the commands and options that you can use so you can see here there's not a whole lot but it shows you install uninstall freeze and also some of the options that you can use um also uh with that we can also do a pip help and then we can type in a specific command so if i type in pip help install now it's going to bring up the options for install so you can see here that we have attack r for a requirements file you can do an upgrade and also install things per user basis and things like that so with the help files out of the way let's go ahead and take a look at how we'll actually use this so say you want to find a package if you're looking for a package and you don't know exactly what it's called you can just do a pip search so let's say i do a pip search on this package and it is going to return to me the package name and also a description of the package here so once you find the package name then you can go ahead and install it so i'll do a pip install and choose the package that we searched for and now you can see that it says that this was successfully installed so if we want to take a look at our install packages we can do a pip list and it will show us all the packages that we currently have installed so you can see here this is the package that we just installed if we don't want that package we can do a pip uninstall and choose that package and then it's going to ask us if we want to continue hit yes now you can see that it's successfully uninstalled and now let's do another tip list and you can see that that package that we just uninstalled is no longer listed another thing you'll notice whenever it lists packages it lists the package and it lists the version number so how do you know if this version is the latest version of this package well with pip list we can do a tactac outdated or we can just do a single dash with an o hit enter and now you can see one of our packages isn't running the latest version of the package the setup tools the current version that we have installed is 12 and the latest is 15. so to update this package what we'll do is a pip install and then an uppercase u for upgrade and then we can type in the package now you can see that was successfully installed if i do a pip list of the packages now you can see that our setup tools is at the latest version now for demonstration purposes uh let me go ahead and reinstall the package that we uninstalled a little bit ago and now if i do a pip list now let's say that you're working on a project and you want to provide maybe somebody else who wants to work on the project you want to provide them with a list of all the packages that they need for that project now one thing you could do is just type out pip list and then they could manually copy down all of those packages and version numbers and install them that way but if you have a really long list of packages then this definitely isn't the best way to do it for this we're going to use something called uh freeze command if we type in pip freeze and what this does is it outputs all of our packages and version numbers in a requirements format so if we wanted to uh send this to somebody then what we could do is pipe this or actually output this to a requirements file so i could type in requirements requirements.txt and hit enter now if i do cat requirements.txt you can see that it lists our package and version number so if you were to send this requirements text file to somebody how would they install all those packages using pip well i have a sample file here that i'm going to use this rtest.txt and you can see i have a few packages listed here so let's say i wanted to install all of these packages now the way you would do this is you would type in pip install and then attack r and what the r is is it's saying hey we're going to use a requirements file and the name of this file is our underscore test.txt hit enter and it's going to go through and it's going to install all those packages and that version of that package now that those are finished installing if i do a pip list then you can see it has installed all those packages at the exact same version number that was in the requirements file now those simple basics are pretty much what you're going to use pip for most of the time but i do want to show you one last trick here these packages that i just installed if i do a pip list outdated now you can see i have multiple packages here that are out of date now i could go through and do it currently doesn't have a way to upgrade all packages that need upgraded you could go through and do each one of these manually but if you have a lot of packages then you know that could be a lot of time to waste so on stack overflow there is an answer here by rbp and he gives this good command here that will go through and do this for you so let me paste this in and walk through exactly what it does okay so first we have pip freeze which outputs all of the requirements uh for the packages that we currently have and this tactac local here if you're in a virtual environment that has access to your global packages then it'll only print out local packages and then you pipe that output to this grep command here and actually i'm not entirely sure what the scrap command does i think he has it listed on his answer over here so this skips dash e package definitions um i've never run into that but um maybe it's uh useful for some cases so then after it runs to that grep command then it gets piped in to this uh cut command here and what this cut command does is it sets the delimiter to an equal sign and then it only returns the first argument back of that result so let's see exactly what that would look like here so if i go all the way back here to this grep command and hit enter then you can see it outputs all of these requirements files with these equals equals and then the version number and whenever you add in that cut command all it does is it will cut out after or before the equal sign there and only return the package name so now we have a list of all of our packages and then lastly the last part of this command takes this output as arguments one at a time and runs that to the command pip install tac u which we went over earlier which is upgrade and that will go through and upgrade every one of the packages that we had outputted so if i hit enter there now you can see that it's going through each package that needed upgraded and is doing so now after that's finished updating if i do a pip list you can see the list of all our packages and version numbers if i do a pip list outdated then we shouldn't have any listed yep and it returned with no packages that need an upgrade so that about does it i hope that this quick overview of pip was useful for you guys if you do have any questions just feel free to leave those in the comment section below be sure to subscribe for future tips and tutorials and thank you for watching