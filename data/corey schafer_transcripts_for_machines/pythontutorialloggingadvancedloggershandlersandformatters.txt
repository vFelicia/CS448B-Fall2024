hey there how's it going everybody in this video we're going to continue learning about logging and python now if you haven't seen my previous video on basic logging then you're definitely going to want to make sure that you watch and understand that video before jumping into this one now in this video we'll be learning about loggers different handlers and a couple of other things so let's go ahead and get started okay so if you watch my first video then you'll see that I have the same two files here that I used in that video I have this super simple application with some short functions here and it's basically where we left off in the previous logging video so just to recap we imported logging and we set some basic configuration here the configuration is that we're logging to this sample log file we're setting the log level equal to debug and our format we have a custom format here where we're using the time the name of the logger and the message and then here at the bottom we are logging out some statements using our logging debug now we have another module here in this employee class where we pretty much did the same thing we're importing logging we're setting up our logging with a file equal to employee log our log level here is set to info and our format for this log file is our level name the name of the logger and the message and then we're doing a logging info here every time we create an employee so that is where we left off at the last video so let me go ahead and run this employee module here and when I run that it creates this employee log I'm going to open that up now in our employee log based on the formatting that we have set this logs our log level this route here and then we have the message that we passed in so now I'm going to go back to my simple application here and I'm going to run this and here we had this set to sample log and we can see that that sample dot log got created I'm going to open that up now the formatting here we had set a little bit differently here we're using the time so we have the time this route and then the message that we passed in so I said in the last video that we've discussed what this route message right here means and basically what this means is that since we haven't specified a specific logger we're working with the root logger and this isn't necessarily a bad thing when working with smaller applications and specific files but it's best to get into the habit of logging to specific loggers that can all be configured separately now we're going to take a look in just a second of how to get a specific logger but real quick let me show you why working with this root logger isn't the best idea so first let me delete these employee and sample logs here so I'll delete that employee log I'll delete that sample log then close these down I don't want to save those now from within my simple module with these calculator functions let me import the employee module so I'm just going to do that right under logging here I'll do import employee now I'm not sure if everyone knows this but when you import a module it actually runs the code from that module when it's imported so when I import my employee module it should come in here and create these employees and log those so now from this module or I'm importing employee I'm going to go ahead and run this module now we can see in our file system that it created this employee log file but our sample log file that we specified here isn't there and if I open up my employee log file we can see that it only logged out our created employees so what happened here why didn't this file create its log its sample log and or execute these log statements down here at the bottom now the reason it didn't do that is because when we set up this logger here within this employee class it configures the root logger here with this file name this log level and this format now all that got set up first because we imported employee and this module is sharing that same root logger in this script so by the time we get to configuring our logging within this script the root logger is already configured with those other values so this doesn't actually do anything it doesn't overwrite those initial configurations now the only reason our log statements aren't logging down here at the bottom is because the root logger got set to that info level within the employee module so debug doesn't hit that level now if we were to change these here to info statements and I was to rerun that now if I pull up this employee log file then you can see that it did log the information from that script that has the calculation functions but still even though we did get those two logs somewhere this is still kind of a mess that we're sharing this root logger we're not getting the log file that we want we're not getting the log levels that we want and we're not getting the formatting that we want so let's get a new logger for each of our modules so that we can configure both of them separately so I'm going to go ahead and close this log file down and within the employee module here I'm going to create a logger variable and I'll just do this both our configuration here so I'll say logger equals now to get a new logger I'm going to say logging dot get logger now we need to specify a name here now I could hard code any name here that I want but a convention when naming loggers is to use this special double underscore name method or variable I'm sorry now if you don't know about this name variable then I do have a video that explains that and I'll link that in the description section below but basically when we execute this module directly this name variable will be equal to double underscore main and when this code is executed from an import its name will be equal to the modules name so I'll call this double underscore name right here and we'll see exactly what this equals in a second so now we're getting a new logger here and if this logger doesn't exist then it'll be created so now I've got a new logger and this is a step that some people forget so now that I have this longer variable and we're working with a specific logger we should now use this to run the log methods so down here where I'm saying logging that info instead now I want to use that variable that we just created somewhere logger info now one nice thing about these loggers is that they are within a hierarchy so if this employee logger doesn't have something set then it will fall back to the root logger so for example this logging basic config is still configuring that root logger so even though I'm using this new logger here to run this info method if I run this code then it still doesn't print to the console it still will create you know an employee log file and log the messages to that employee log file now we can see here that I ran our info logs now one thing to notice here is that now it's telling us that we're using this double underscore main logger and not the root vulgar like it was before these log messages are from previous runs ok now let's switch back over here to employee real quick ok so we're still configuring this root logger with this file name log level and format let's instead configure our specific logger here with those values and leave our root logger alone so first to specify the employee log file that we want to log to we have to add a file handler and to do this I'll make a new variable and I'm just going to call this file underscore handler and I'm going to set this equal to logging dot file handler it looks like I spelled that wrong there okay and what we're going to pass in to that is just the name of our log file so we just want to pass in employee dot log so now we have this file handler but it needs to be added to our logger so to do that we can say logger dot add Handler and then we'll just say to add that file underscore handler now I know that this seems like more sets of our basic configuration but just bear with me here and we'll see how this has a lot of advantages ok so now with this file handler we want be formatting to be the same as what we specified in our basic configuration now I think the code that I have here is just the default configuration anyways so let's go ahead and add that formatting to our file handler now we're going to be adding this for adding to the file handler and not a logger so keep that in mind so to do this we can first create a formatter and I'm going to do that here at the top I'm just going to say formatter is equal to logging dot formatter and then what we're going to pass into that is our format string here so I'm going to copy that and paste that in and then we're going to add this formatter to our file handler and to do that I'm just going to go right underneath our file handler here and say file handler dot add formatter oh sorry about that that's not add formatter that is set formatter and then we are just going to pass in that formatter that we just created okay and lastly let's set the log level on this employee logger and to do this we can just come up here to the top after we create this logger I'm going to say logger dot set level and I'm just going to set that to the same level that we had in our basic configuration so I'm just going to say logging info so at this point we should be able to delete our basic configuration we have all these set on our specific logger so I'm going to go ahead and delete this basic configuration here and just to make sure that this is working let's also go ahead and delete this employee log file and start from scratch and I can already see I have a typo here let me fix that and save it okay so now let me go ahead and rerun our code here not created our employee dot log core so I'm going to go ahead and open that and you can see that within here and log all the lines that we specified with the correct format so now let's jump back over to our other scripts where we employed or where we imported the employee module let's go back up here to the top now remember that before this gave us problems because we were sharing that root logger but if I rerun this now and we can see that this time it did create this sample log file now if I open up that sample log then we can see that we have that different formatting with the time set first so we're logging the time and then the logger and in this case it's still the root logger and also we are logging out our message and now let me open up the employee log file and we can see and hear that it logged the values correctly and it gave the name of employee for the logger this time and that's because this module was imported and if we run that directly then it would be equal to this double underscore main up here but since we imported that it got set to employee which is the name of the module okay so real quick let's go ahead and setup a logger for this other script that we're currently in so that we're not using the root logger within here either now I'm going to copy a lot of this code from the employee class so I'm going to grab all of that and paste that in here and now we can set up this logger any way that we want so I want the logging level I set that to debug basically everything that we have down here and our basic config so this file handler here instead of employee log I'm going to set that to sample that log and for the format I'm going to use the format that we have here that has our time included so I'm going to switch that out and that does it for configuring this specific logger so now we can delete this basic configuration and before we run this remember this is one thing that a lot of people forget when we call our log methods now we need to use our specific logger instead of the logging module so I'm going to grab our logger here log of variable that we created down here at the bottom instead of doing logging not info I want to do logger info and actually instead of got info I'm going to do dot debug okay so now with all those changes in place I'm going to go ahead and rerun that and look at both of my log files here so we can see that it logged those values and that's not using that root logger anymore so that's good and the employee log file should be the same since we didn't change anything there and yeah we can see that it's still adding logs for that file as well too so now let me go ahead and delete these files one more time here and let me delete this sample log file okay now one good thing about setting your logging up like this is that now you've got a lot more flexibility it's nice how this hierarchy works so for example let's say that we wanted our logger level and this module here set to debug which it currently already is but now let's say that we only wanted our errors or worse to get logged to the sample log file now to do that we can set levels on the file handlers themselves so if I wanted to keep my logger level set the debug but wanted to only capture error statements and above in this specific file handler then what I could do is take this file handler here and just say file handler dot set level and I'll set that equal to logging dot error so now if I rerun this code then it created our log files I'm going to open up our log file and there's nothing in our sample dot log we can see that it didn't log those debug statements because the levels didn't match so let's log something that's an error so that we can see something get added to our file handler here so within my divide function I'll put in a try except block that makes sure that we catch a division by zero error so to do that I'll just do a try I'll say result equals x divided by Y and then for an accept we're going to attach a zero division error and within that zero division error that's where we'll do a logger and we want this to be an error log so I'll do logging it not error and for the message here I'll just say try to divide by zero and now let's put in an else statement for our try except block and for that else I'll just say return result and get rid of this outside return statement there so now with that code in place I can rerun this and we can see that it still works but now let's change our second number here to a zero which will make us divide by zero and throw that air so now if I run at now it looks like nothing happens but if I go to our sample dot log file here now we can see that we had a log put in here where it said tried to divide by zero now a personal preference of mine is that anytime that I'm logging an error I usually like to include the trace back so that I can get more information about what exactly happened and the logging module allows us to do this very easily we can just do that by changing this logging dot err instead make that logging dot exception so now let me rerun that code again and switch back to our sample log file and you can see that now included in our log we got that we tried to divide by zero but it also included the trace back here with some more information ok so let me go back to our script here so another good thing about this being modularized is that it's easy to add multiple handlers to a longer so for example let's say that we did want to see the debug statements that were executing down here at the bottom but we only wanted to display those to the console so what we could do here is create another handler but instead of a file handler what we're going to do is create a stream handler so let me show you how this works here so we can just come down here and create a another handler will call this stream underscore handler I'll set that equal to logging dot stream handler and that's not going to take in any arguments and now we don't need to set a log level on this because our logger already has a logging level of debug so now let's go ahead and add this new stream handler to our logger and all we have to do is do the same thing that we did when we added the file handler is logger add handler but now we're going to also add on a stream handler so now that you now you can see that we have both the file handler and the stream handler added to this single logger so now if I run this code then you can see that it logged our debug statements in the console and also these errors show up here too but those are also getting sent specifically to the log file with the error logs now one thing to notice here is that the formatting to the console isn't the same that we had in our file but setting this is just as easy as it was for the file handler so what we'll do here is where we set this formatter on the file handler I'm just going to come underneath and paste that for the stream handler and do the same thing stream handler dot set formatter equal to that formatter that we have at the top or we could create a completely new format for the console which we wanted but I'm just going to leave it the same so let's go ahead and rerun that and now you can see in the console that it has the format that we specified okay so I think that it's going to do it for this video hopefully after these videos you have a good idea for how you can begin to add logging to your projects this is something that almost every project needs and production at some point and good logs can save you a lot of headaches when trying to debug problems you know if you are interested in going even more advanced in this then I would suggest getting on the Python documentation and looking up all the different handlers that they have because you know you can set it up to where if you get an error then it sends you an email or gets added to a queue or something like that they also have rotating logs so that one log file doesn't build up too much all kinds of functionality built in here to the log module and if anyone has any questions about what we covered in this video then feel free to ask in the comment section below and I'll do my best to answer those now if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest way is to simply like the video and give it a thumbs up and it's also very helpful to share these videos with anyone who you think would find them useful and if you have the means then you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and big y'all for watching you