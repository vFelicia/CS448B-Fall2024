00:00 - - Welcome to the first in a series,
00:01 - or maybe just one video,
00:02 - I have no idea what's going
to happen with all this stuff,
00:05 - calculating the digits of pi.
00:06 - So, for Pi Day today,
00:08 - at least with the silly American way
00:10 - of putting the date
together, March 14th, 3/14,
00:15 - if only it was the year 1592,
it would really be Pi Day.
00:19 - I'd like to do coding challenges
00:21 - around calculating the digits
of pi or approximating pi.
00:24 - Although, if I want to approximate pi,
00:25 - I should really do that on July 22nd
00:27 - 'cause that's 22/7 or 22.
00:29 - Anyway, the point is I
released a video this morning
00:32 - about counting the digits of
pi through block collisions,
00:35 - and that's one you could watch.
00:37 - I'll link to that in the description.
00:39 - But there are three other
methods I want to explore
00:41 - and I might do all of these video,
00:43 - more likely just one
of them in this video.
00:46 - There's the Leibniz Method,
00:47 - there's this way of looking at
random numbers and co-primes,
00:52 - which is a method that Matt Parker
00:54 - used in his YouTube channel
Stand Up Maths to calculate pi,
00:58 - and then there's also this amazing thing
01:00 - that happens in the Mandelbrot set,
01:02 - the Mandelbrot fractal,
01:03 - which I have a coding challenge about.
01:04 - Where you can actually
find the digits of pi,
01:07 - the number pi in a very strange place.
01:10 - There's a wonderful numberphile video
01:12 - with mathematician Holly Krieger,
01:14 - who explains this in great detail
01:16 - and we can see if we can write
a code example to do that
01:19 - since I already have
a Mandelbrot set code.
01:22 - Alright, let's start
with the Leibniz Method
01:24 - and let's use the P5 web editor.
01:26 - Let's try to think of a way
of making this interesting.
01:28 - So, first of all, the
Leibniz formula states that
01:32 - if we start with the number one
01:35 - and then alternating fractions
where the denominator
01:38 - is the next odd number
subtracting first, adding next,
01:42 - subtracting next, adding next.
01:45 - If this infinite series will
converge to pi divided by four.
01:50 - Wow!
01:51 - That's crazy.
01:52 - Let's see if that works.
01:53 - So, this shouldn't be too hard to code.
01:55 - At least, in terms of
things I've coded before.
01:58 - Let's just start with, let's
just do all this in setup first
02:01 - and then we'll think about
02:02 - if there's an interesting
way to animate it.
02:04 - So, let's start with, I'm just
going to to make a variable
02:07 - called pi.
02:09 - I'm going to to start at one
02:10 - because I need to sum up the values.
02:12 - Then, I need to do some
number of iterations.
02:15 - So, we'll start with zero.
02:16 - Let's just try doing
10 iterations to start.
02:21 - Now I need to get that alternating
sequence of odd numbers.
02:26 - So that should be easy.
02:28 - That's the denominator of the fraction.
02:30 - So, let's call that denominator.
02:32 - It's really just,
02:33 - i
02:36 - i times two plus three.
02:39 - Right, because we're starting at three,
02:41 - then five, then seven, then nine.
02:43 - So, zero times two is zero
plus three that's three.
02:47 - One times two is two plus three is five.
02:49 - You can see how this works.
02:51 - And then, what I want to do the fraction
02:56 - is one divided by that denominator
02:59 - and then I need to say pi
plus equals that fraction.
03:03 - I could just, that's silly,
I'll just say pi plus...
03:06 - Oh! Wait, wait, wait, wait.
03:07 - First to subtract then add.
03:09 - So, I need to say that if
i modulus two equals zero.
03:16 - Right because that's how it can detect
03:17 - whether I'm alternating
even or odd numbers.
03:20 - I mean, they're all odd numbers
03:21 - but am I the first one or the second one
03:23 - or the third one or the
fourth one, et cetera.
03:26 - So, I would say in that case
03:30 - pi minus equals one
divided by that denominator
03:37 - and then otherwise.
03:41 - Of course, I could write this in,
03:42 - you could probably find a
clever way to write this
03:45 - in just a few lines of code,
03:46 - in many fewer lines of code.
03:47 - Plus equals and then,
03:50 - let's just say create
a div with that digit
03:56 - and we can see, there it is.
03:57 - Okay, well, that is not the number pi.
04:00 - Nowhere close to the number pi.
04:01 - Why?
04:02 - Well, if you remember
from the Leibniz series,
04:05 - this series converges
on pi divided by four.
04:08 - So, I could put four minus
four divided by three plus four
04:11 - divided by five or I could
just at the very end say,
04:15 - pi times equal four.
04:19 - So let's say, let's add,
04:24 - I might graph it
04:24 - so let's leave the canvas there
04:26 - and let's do this again
04:28 - and there we go 3.23,
04:30 - that's not so great.
04:31 - First, let's make that number bigger.
04:33 - So we can see, there we go,
04:34 - we have got this number.
04:36 - Now, we only did 10
iterations, that's very few.
04:40 - By the way if we just do one, 2.6,
04:43 - two 3.4, three 2.8,
04:46 - you can see it's bouncing up and down,
04:48 - this might be interesting to graph
04:49 - but let's do 400 3.144,
04:52 - 4,000,
04:54 - 40,000,
04:55 - you can see that we're getting closer
04:57 - and closer to the digits of pi.
04:59 - Let's try graphing it.
05:00 - Let's go and put in draw.
05:04 - I'm actually going to take
out the idea of this loop.
05:10 - I'm going to have this idea
of pi be a global variable
05:17 - and I'm going to do this
calculation every time through draw.
05:21 - So this is really, we could
think of this as an iteration.
05:25 - Iterations equal zero.
05:28 - So, the denominator is iterations
05:30 - if iterations module is two equals zero
05:33 - and then I will manually
increase the iterations
05:36 - every time through draw
05:38 - and I'm going to make
a variable called div
05:42 - and I'm going to div equals create pi div
05:47 - and I'm going to update it with pi.
05:49 - So, now, we can see, oh yeah something is,
05:52 - I'm not sure if this is working.
05:54 - Oh, whoa whoa whoa, oh!
05:55 - This times equal four is a problem.
05:57 - So, in this case it might make more sense
06:00 - for me to just start pi at four,
06:04 - I mean I could do a number
of different things.
06:06 - I could start pi at four
and I could put four in here
06:10 - and then I don't need to do this.
06:11 - Now that pi is a global
variable I know I can't
06:14 - multiply by four every time through draw.
06:17 - So this should get me converging.
06:20 - Yes, so you can see I'm
converging in theory
06:23 - on the number pi.
06:24 - So you can see 3.1 is settled,
06:26 - eventually this four should settle
06:28 - as I get to a certain
number of iterations.
06:30 - Okay, so now let's graph this.
06:34 - So, I'm going to make
an array called history.
06:40 - So what I want to do is say
06:44 - history.push pi.
06:48 - I'm going to say for let i equal zero,
06:51 - i is less than history.length i plus plus.
06:56 - And what I want to do is
I want to draw a line.
07:00 - I'm going to say begin shape, end shape,
07:05 - and I also want to calculate
sort of the spacing.
07:08 - The spacing is going to
be the history divided by,
07:14 - oh no sorry,
07:15 - the width of the window
divided by history.length.
07:18 - And then x will be i times that spacing,
07:23 - this should really be
spacing, I'll call it spacing.
07:26 - I want to figure out how many things
07:28 - to go across the window do I have
07:30 - and then I'm going to say vertex x comma,
07:36 - so let me just make y right
now height divided by two
07:40 - just to see if this works.
07:42 - Did I stop it?
07:45 - And I'm going to need to
say stroke 255 no fill.
07:53 - Right, I see a line going across
07:55 - but height divided by two,
07:57 - which is the y should be history index I.
08:04 - And let me map that value, woops.
08:08 - Map that value, between some range,
08:13 - between two and four to
between zero and height.
08:19 - So I want that, no no no.
08:23 - So, sorry, sorry this
is not making any sense.
08:25 - (bell dings)
08:26 - What am I doing here?
08:27 - I forgot to put the y here.
08:29 - (laughs)
08:31 - I forgot to put the y here
08:33 - And I forgot to put the y here.
08:37 - There we go, that's what
I was looking to see.
08:41 - We are now seeing it converge,
08:43 - this is what I meant to see.
08:45 - So in theory, where is pi?
08:46 - Let's draw a line.
08:48 - I could be more thoughtful about
08:51 - what my range is that I'm looking for
08:53 - but let's
08:56 - let's put a line also,
08:58 - we're going to say here line.
09:01 - Which is going to have
09:04 - x zero
09:07 - I'm going to say piY equals,
09:10 - we'll use the same mapping
09:13 - but we'll actually map the value of pi.
09:17 - So we're going to have a
line go across the window
09:24 - and this should say let.
09:25 - Oh, my brain has stopped working.
09:29 - So, this is where pi is and now we can see
09:33 - the Leibniz series
graphically approximating
09:38 - and get it converging
all on the number pi.
09:41 - All right, now I should really invert this
09:47 - because right now the
lower number starts up top.
09:52 - So I should really put map
it from height down to zero.
09:56 - Let's make the frame rate fast again.
09:59 - And there we go.
09:59 - Oh boy!
10:00 - And this is height down to zero.
10:05 - And here we go, there is,
10:09 - we now have the Leibniz infinite series
10:14 - converging on the number pi
10:17 - but in a very inaccurate way
10:20 - because we're just using
floating point numbers
10:22 - which only gives us, I don't
know how many decimal places,
10:25 - like seven at the the most.
10:26 - Ya know, what is p5 actually think pi is?
10:31 - I could say console.log pi.
10:36 - Well, I get more than seven,
10:37 - but I get this many decimal places.
10:39 - So could we possibly do this
10:41 - in a more accurate way is the question.
10:44 - Thanks for watching this coding challenge
10:45 - approximating the number
pi with the Leibniz method.
10:49 - I think there's some things
you could probably do.
10:51 - First of all, this should really be,
10:52 - these should be variables like min y max y
10:58 - because I'm using them in two places.
10:59 - Min y max y.
11:04 - Then, I could just initialize
them with something like,
11:09 - min y equals two and max y equals four
11:13 - and this should be exactly the same thing.
11:14 - But the point is that minimum
and maximum could be adaptive.
11:20 - So, for example, you
could do something like,
11:22 - actually start to adapt the
range that you're graphing
11:28 - based on where you are in
the approximation series.
11:33 - I don't know, in other words,
what are some other ways
11:36 - that you could animate
this or visualize it
11:38 - in perhaps a more interesting way?
11:39 - There must be some sort of
like spiraling convergence
11:42 - that you could do
11:43 - but also the Leibniz series,
11:46 - the Leibniz formula I picked
because of it's simplicity,
11:48 - almost relatively easy to implement.
11:51 - But there are many other
series for approximating pi.
11:55 - For example, there's
the Euler Convergence,
11:58 - you could look at that.
11:59 - There's these more recent ones
12:02 - that are quite famous and
sort of insane looking.
12:04 - I really should come back and
do a video trying with these
12:07 - although I probably
would need a big integer,
12:09 - a big decimal data structure to store
12:13 - the numbers larger than
the standard integer of
12:16 - floating point precision will
allow me to do in JavaScript.
12:20 - So that's something you could also do.
12:21 - How could you really,
12:23 - with a really large number of iterations
12:25 - and more precision in JavaScript?
12:26 - I'll put a link in the description
12:27 - to the big rational JavaScript library.
12:31 - Which allows you to store a number
12:32 - with many more decimal places
12:34 - than what you just get for free
with floating point numbers,
12:37 - so you can try that.
12:38 - So try one of these other formulas,
12:41 - try animating it in a different way,
12:43 - share your community contribution
12:45 - at The Coding Train website
12:46 - with the page associated
with this challenge.
12:47 - And thank you for
watching this video about
12:50 - approximating the number
pi with the Leibniz method.
12:53 - Goodbye!
(bell dings)
12:54 - (exit music)