00:00 - Welcome to part two of 
"word counting coding challenge".
00:03 - This time what I'm going to do is the
00:05 - exact thing I just did in the previous 
video,
00:06 - where I did a word counting application
in Javascript.
00:09 - I'm going to do the same exact thing in
Processing.
00:12 - This will be written in the Java 
programming language.
00:14 - Now I explained a bunch of details
in the previous video.
00:17 - I'm going to gloss over those just to see,
kind of work through this rather quickly.
00:21 - But i'm going to use the same text file,
and the same exact algorithm.
00:24 - So, let's get started. Processing
actually if you're not aware
00:28 - has this lovely object built into it.
called an "int dictionary". i-n-t-d-i-c-t.
00:34 - So I'm going to call that "counts".
And I can say counts equals a new
00:39 - Int Dictionary. What I'm able to do with
this is store right in there
00:48 - strings with numbers. There's also a float
dictionary if I want strings with floating
00:51 - point numbers and a string dictionary
if I want to pair strings with strings.
00:55 - If i want to do any other sophisticated 
pairing in Processing, I need to use
01:00 - something called a "hashmap". Which is a
native Java class for doing hash tables,
01:06 - dictionaries, that sort of thing. And I 
can demonstrate that in a future video
01:09 - if people are interested. But the int
dictionary is going to make this really
01:12 - quick and easy. So first thing I want to do
is load in the text file. So i already have that
01:20 - Rainbow dot txt. The text from the 
rainbow wikipedia article. Loaded into
01:25 - the data folder. Remember load strings
just like in p5, loads that text file and
01:32 - separates it into lines. So the first
thing I want to do then, is say
01:37 - Join that. So I could say join lines 
with a line break. So now i have
01:46 - all the separate lines joined in one big
text, Why? Because ultimately what i
01:50 - want to do now is have a big array of all
the tokens, all the words. So I'm going
01:56 - to say split tokens, and actually I can
use the native java split function
02:05 - but split functions is in processing, it
will be kind of easy for me to use it
02:08 - I want to split all words by - anything I 
put in here now acts as a delimiter
02:14 - So i'm just going to say period, question
mark, exclamation, dollar sign...
02:22 - Again, I can always refine what the 
delimiters are and there are ways
02:26 - of being fancier with that using the Java
split function, I can improve that later.
02:29 - But, I just want to see print Array tokens.
I just want to see that this is working.
02:35 - So let me print out that array into the 
console. There it is, ooh that didn't
02:41 - work. Ah, guess what I forgot, space!
Space would be good, and line break,
02:48 - that would be good too. Let's try that 
again, there we go. So this looks like
02:53 - its working. We can see I have all of
these tokens. Comma i should probably
02:58 - include. Lets get a comma in there,
semicolon. Thats a little bit better.
03:02 - Lets see, ok great. So theres going to be 
straight junk in there, I could always
03:05 - filter out that junk. But i got a big 
array of every single word in this array.
03:11 - So now, the next thing I want to do, just
as i did before is loop through that.
03:15 - Loop through all of the tokens, 
and I want the same exact algorithm.
03:23 - So i want to say, if the dictionary. So
before I said if the word's value in the
03:31 - dictionary is undefined, thats how I did
that in Javascript. Here I want to use
03:35 - the int dictionary function. Lets look at
int dictionary reference page.
03:42 - So we can see here, here is the reference
page for dictionary and theres a bunch
03:47 - of functions that I want to use. The 
function I'm looking for right now
03:52 - is has Key. So has Key checks if a key 
already exists in the dictionary.
03:57 - So thats the function I want to use. 
Come back over to my processing program
04:00 - if counts has key, and lets make a 
variable here. String, word, equals
04:06 - tokens index i. Has that word already
as a key. if it exists, what do i want to do?
04:13 - I want to add one to it's count and by the
way Processing, knowing that this is
04:17 - an int dictionary has functions that will
just do stuff to the numbers in there.
04:21 - So i can actually say, I need to add the
key, sorry. First thing I need to do is
04:29 - I could just use Set. I want to just set
that word to counts dot set word to the
04:42 - value one. Perfect, Oh no thats if it was
a new one. So if its a new one I want to
04:47 - set it to one. Right? if it doesn't exist.
if it does exist what do i want to do?
04:53 - I want to say counts dot increment
that word. So the increment function
05:01 - reaches into the value and adds one to it.
So this now is the same exact algorithm.
05:06 - In that dictionary either set a new word
to one or increment the count of that word
05:15 - by one. I'm not sure what will happen if I
say print line counts. Lets see how it
05:20 - decides to format it in the console. I 
have some sort of error. Lets look in the
05:26 - errors tab, no errors. We can see this 
looks good. Quote definitely needs to be
05:36 - a delimiter. Let me add quotes as a 
delimiter. Escape with a backslash.
05:46 - Why do i see all these extra quotes in 
there. Maybe thats just the way its
05:48 - spitting it out. Another thing I should do
is do the same thing to change everything
05:54 - to lower case. I'm assuming that this is 
working because I'm seeing a whole lot
06:01 - of things with the number one. I'm getting
all these words and their counts. Now
06:06 - what I want to do is, lets draw something
to the window. I want to iterate through
06:12 - the entire list. How do I iterate over int
dictionary in processing? I can just get
06:21 - a copy of the keys because if I can get 
the keys in an array just like I did in
06:26 - Javascript, then I can iterate over it. I 
could have my own array but here I know
06:30 - what int dictionary is doing, so I'm going
to ask for the array. I could say here a
06:36 - String keys equals counts key Array. 
Then, and by the way I can use this sort
06:46 - of enhanced loop. I can say for every key
in keys I could say lets pick a random x
06:57 - lets pick a random y, and lets draw the
text to the window. I shouldn't use key,
07:09 - because key is a built in variable in 
Processing that indicates the key that
07:15 - was pressed. I'm going to draw the text
at a random location. Lets just see what
07:20 - happens when I do this. And Im going to 
say, and I already used the variable word
07:25 - so thats a bad idea. W-D, I don't know, K 
for key. I don't like one letter variables
07:36 - but i just did it anyway. And we can see 
here after a while this is going to run...
07:42 - I think. Ooh this is terrible. Thats in 
the loop. Because I have this big font
07:54 - i wasn't paying attention. Im doing this 
in the loop of looking at all the tokens.
07:58 - Which is pretty much a disaster. By the
way if you're ever doing an application
08:03 - like this you should start with a really
small text file. That would be much better
08:08 - than what I'm doing. That worked. You can 
see that it drew all sorts of words
08:12 - everywhere. Lets do a couple things
One lets draw a black background
08:18 - Lets actually make this full screen. So we
08:23 - can quickly see full screen. There we go 
those are all the words, all the unique
08:27 - words that are in that document. 
Now what I can do actually is I can say
08:32 - lets get the count from the counts get 
from the key. Right lets get that count.
08:44 - Lets say text size count. I'm going to 
assign it the font size to how many times
08:51 - it appeared. There we go, so you can see
very briefly most of the things are just
08:55 - a font size of one. but you can see 
rainbow is there, a is there, the. They
08:59 - are in random locations. I could be more 
thoughtful about how I position these,
09:03 - placing these, I could use a different
mapping, use some other sort of scale.
09:07 - But you can see the basic idea I now have 
a word counting application that shows me
09:12 - all the words appear with their size 
according to the frequency at which
09:15 - they appear in that document in Processing
09:17 - Ok, thanks very much and see you in the 
next video where I'm going to look at
09:22 - something called T-F-I-D-F.
09:32 - Subtitles by the Amara.org community