00:01 - Welcome to another 10
Minute Coding Challenge.
00:03 - I have 10 minutes to program
a Menger sponge fractal.
00:06 - Now, I did spend a few
minutes before I started
00:08 - this video thinking about
it, so I'm not totally
00:11 - starting from nothing.
00:12 - I have never actually
programmed this before.
00:14 - I have seen it
before, but basically,
00:16 - what I need to do is make a box.
00:18 - And then what I need to
do is, from that box,
00:20 - make lots of other boxes,
and then cut holes in them,
00:23 - and then do that
again recursively
00:25 - over and over and over again.
00:26 - And I kind of worked
out some math.
00:28 - I really shouldn't
use the time, but I
00:30 - got to come back over here.
00:32 - What I did is, thinking about
that diagram, there are 27--
00:36 - one box can be cut
into slices by 3.
00:41 - You get 27 boxes that fill
it, and these are the ones
00:44 - that I need to remove.
00:45 - I need to remove the center ones
on the top and the center ones
00:49 - on all the sides.
00:50 - If this is the middle, this is
the top, middle, and bottom,
00:57 - And then also that
very middle one.
00:59 - So let's just see if I
can even make that happen.
01:02 - So how am I going
to deal with this?
01:04 - Well, good thing that I'm
working in the Processing
01:06 - programming environment because,
at the very least-- and I
01:10 - can see that I'm not going to
get this done in 10 minutes.
01:12 - So let's see what--
01:14 - we'll see how this goes.
01:17 - So at least the first thing
that I want to do is draw a box,
01:28 - and I should probably add
Peasycam or something,
01:31 - which is a Processing
library that I
01:32 - can move the camera around.
01:35 - And let's think about
the box should be
01:38 - in a window that's 400 by 400.
01:40 - That box should be-- let's
make it 200 and see what I get.
01:44 - Box is not available
because I need
01:46 - to make this p3d because
I'm doing things in 3D.
01:48 - Now, this is going to be
a little bit of a problem.
01:50 - Processing sketches
take a little bit
01:52 - longer to start up in 3D.
01:53 - And I want to say no fill,
and I guess what I could do,
01:57 - just for the sake
of argument, is
02:00 - I could do something
like rotate x by an angle
02:05 - just very, very slowly.
02:07 - Always have the sketch
rotating, so you
02:10 - can see that there is actually
a three dimensional box there.
02:14 - So I have this three
dimensional box.
02:16 - What I want to actually
do is make a box object
02:19 - because I'm going to need
to keep track of a box,
02:21 - and then that box makes
other little boxes, which
02:23 - make other little boxes.
02:24 - So I'm going to add
another tab here,
02:27 - and I'm going to
call that tab box.
02:29 - And I'm going to make
a class called Box.
02:31 - And for the box, I need to have
the location of the box, which
02:35 - I'll call position,
and I need to also
02:39 - have the size of the box.
02:41 - And so when I make this
box, I should give it
02:46 - an x, a y, and a
z, and its position
02:50 - will be a PVector at that XYZ.
02:53 - And I should also
give it a size,
02:58 - and its size will be size.
03:00 - And then if I want
to see that box,
03:03 - I need to translate by
the position x, y, and z.
03:12 - And then I need to draw
a box at that location,
03:15 - and I should probably
also include push matrix.
03:26 - I had a technical
mishap, and I lost sound.
03:28 - So I'm picking back
up from where I was,
03:30 - and what I did is I
made a box object.
03:32 - You don't need
to-- you remember.
03:33 - Yeah, I already
got the box object.
03:36 - So what I need to do now
is use a box object instead
03:39 - of just hard coding a box.
03:40 - So I'm going to say Box
b, b equals new Box,
03:45 - and I just want it to be
at the middle of the screen
03:47 - with a size of 200.
03:49 - And instead of actually drawing
a box, I can just say b.show,
03:52 - and this should be
exactly the same.
03:54 - So now, I have my
one box as a box.
03:57 - So now what I need to do,
and I'm always looking over.
03:59 - I see green bars.
04:00 - Audios is working-- audios?
04:02 - Audio is working.
04:03 - What I need to do
is take that box
04:04 - and chop it up into lots
and lots of little boxes.
04:07 - So how am I going to do that?
04:09 - What I need to do--
04:10 - I'm going to make a function
inside the Box object
04:14 - that has three FOR loops.
04:17 - I want all the x's, all
the y's, all the z's.
04:22 - It doesn't really even
matter which is which.
04:24 - So I'm going to say 4 into x
equals 0, x is less than 2.
04:30 - And actually, I'm going
to start at negative 1.
04:33 - I was going to say
x is less than 3,
04:34 - but I'm going to
start at negative 1
04:36 - and say x is less than 2 because
what I want is, if 0, 0, 0
04:39 - is the center, I want
to go negative 1,
04:41 - 0, 1, negative 1, 0, 1 for
the x, the y, and the z-axis.
04:46 - x++, so I have this, and then I
need to do the same exact thing
04:51 - with y, z.
04:52 - How am I doing on
time, everybody?
04:54 - Five minutes left.
04:55 - Here we go.
04:56 - y, z, and then I need
three closed brackets
05:00 - because what I need to
do now is make a new box.
05:03 - And the new box is going to
be at these new locations,
05:07 - but not directly at x, y,
and z. x, y, and z times
05:11 - how big should this box be.
05:12 - Well, this box should have
a new radius, which is the--
05:17 - each little box has the
original box's radius--
05:20 - radius is the wrong word,
but size divided by 3.
05:22 - So r divided by 3.
05:23 - So x times new r, y times
new r, and z times new r.
05:28 - Now, there's another
thing I'm missing here.
05:29 - Each one of these
boxes isn't just
05:32 - that size relative to 0, 0, 0.
05:35 - It's relative to where
the actual box is.
05:38 - And by the way, it
needs a fourth argument,
05:40 - which is the size of
the box, so I actually
05:42 - need to offset it by this
box's current location.
05:48 - So this has now become quite--
05:52 - I probably should have
used i, j, k, and then
05:54 - I could have separated this
to three lines of code,
05:56 - but it's too late now.
05:57 - You can see what I'm
doing here, which
05:59 - is that pos.x plus x times new
r, pos.y plus y times new r,
06:03 - and pos.z plus z times new r.
06:08 - So what I'm doing
is I'm making--
06:10 - I have three nested loops,
and I'm making all nine boxes.
06:13 - So what do I do
with those boxes?
06:16 - What I need to is
have an array list
06:20 - of boxes, which is
a new ArrayList.
06:24 - Unfortunately, ArrayList
require a lot of typing,
06:28 - and I'm going to say boxes.add--
06:32 - whoops.
06:33 - I'm going to add all those
new boxes that I make,
06:36 - and at the end of this function,
I'm going to return it.
06:38 - So the whole point of this
function inside the Box object
06:41 - is to know how to just
say, hey, I'm a box.
06:43 - I'm going to give you 27
boxes that are inside me,
06:46 - and give them to you
as a big array list.
06:48 - And now, what I'm returning
is an array list of type Box.
06:53 - So let's now, over
here, what I want to do
06:56 - is I want to say
ArrayList Box sponge.
06:59 - So the sponge is actually going
to be an ArrayList of those Box
07:03 - objects, and sponge.add, so
it starts with just one box.
07:11 - And then in draw, I loop through
all of the boxes and show them.
07:20 - Sponge-- I called it
sponge, not boxes.
07:22 - So this is still the
same exact program.
07:25 - Come on give me a--
07:26 - I got, what, a null
pointer exception?
07:28 - Oh, because I forgot to say
sponge is a new ArrayList.
07:32 - Boy, what I wouldn't give for
some JavaScript right now.
07:36 - Array would be so much
easier to deal with.
07:39 - So now, I've got an
ArrayList with one box in it.
07:41 - Now, what I need to do
is, in mousePressed,
07:46 - what I'm going to say is do
exactly this thing again.
07:50 - I'm going to have the next
generation, a new ArrayList.
07:54 - Actually, ArrayList
next equals, what?
07:58 - b.generate, and then
sponge equals b--
08:03 - oh, no, next.
08:05 - So I'm going to take-- no, no,
no, no, no, no, no, no, no.
08:09 - sponge.get 0.
08:13 - So sponge is an ArrayList
with one thing in it.
08:15 - This has got to
change in a moment.
08:17 - I've got a 1 minute
40 seconds left.
08:18 - We're going to get close.
08:19 - Sponge is an ArrayList
with one thing in it.
08:21 - I'm going to get that
one thing out, make
08:23 - a whole bunch of boxes from
that, and replace the sponge.
08:26 - So if I do this and run this,
come on, give me a click.
08:30 - Boom, I got 27 new boxes.
08:32 - That's really, really good.
08:33 - That's what I want.
08:36 - But this is no good.
08:37 - What I really want
to do is start
08:41 - with a new empty
ArrayList because I
08:48 - need to have more
than one generation.
08:50 - And what I need to say is,
for every box that's currently
08:56 - in the sponge, give me the new
boxes by generating, and then
09:06 - in next, addAll.
09:07 - So in Java, ArrayLists have
a function called addAll,
09:11 - where you can add an
entire array list.
09:13 - So if we look at this
particular algorithm
09:17 - here, what this is saying is,
when it's a new generation,
09:22 - make an empty ArrayList.
09:23 - Make an empty array.
09:24 - Now, for every box that's
currently in the sponge
09:27 - go and divide it up into 27.
09:29 - Take all 27 of those,
and add it into the next,
09:31 - and the sponge becomes the
collection of all of those.
09:34 - So now, if we run this,
click, click, click.
09:40 - I'm just subdividing and
subdividing and subdividing,
09:42 - and I could do this forever.
09:43 - And it would probably--
if I did it one more time,
09:44 - I might even crash my
computer, which I really
09:46 - shouldn't do when I only
have 11 seconds left.
09:48 - So I only have 11 seconds left.
09:49 - I'm not going to finish
this in 11 seconds,
09:51 - but I'm giving myself
a bonus two minutes.
09:56 - It's all about bonus time
here on Coding Rainbow.
09:58 - So I give myself a
bonus two minutes,
10:00 - and I'm going to click over
here, and then I come back.
10:03 - And now, what I need to do--
10:04 - I've done it.
10:04 - All I need to do now is
remove the boxes that are not
10:08 - part of-- this is a battery.
10:09 - This is why I lost my sound.
10:10 - I need to remove
the center box out
10:12 - of all of the sides
and the middle.
10:14 - And I tracked all the
indices, but think about this.
10:18 - Somebody, and I
can't remember who,
10:19 - suggested this in the chat,
on the live chat, so this
10:22 - wasn't my original idea.
10:23 - I'm sure this is--
10:24 - but if I go back to
this Menger sponge,
10:28 - you can realize that what
is the same-- what about all
10:31 - of these boxes that are
being removed is the same?
10:34 - If any two values, its
x and y are in the--
10:38 - if any two of the axes are
0, it should be removed.
10:41 - This has an x and y as 0.
10:44 - Maybe this has an x and a z
of 0, and this has a y and z.
10:46 - And the middle has the
x, y, and z as the 0.
10:48 - So I just shouldn't
add a box if--
10:52 - where's my code?
10:53 - Where's my code?
10:54 - I just shouldn't add a box if--
11:00 - so there's got to be a
better way of doing this.
11:02 - But let's just-- oh, you
know what I could do,
11:04 - is add up-- no, no,
no, I can't do that.
11:06 - Oh, yeah, yeah.
11:11 - This is a crazy way of doing it.
11:13 - Sum equals absolute value of
x plus absolute value of y
11:17 - plus absolute value of z.
11:19 - So if two things are
0, it'll be 1 or less.
11:26 - So I shouldn't add the box if
sum is less than or equal to 1.
11:36 - I should not add the box.
11:39 - That should do the trick.
11:42 - Let's see if this works.
11:44 - I'm very proud of myself
for thinking that.
11:47 - Well, I did it the opposite.
11:49 - I'm just getting
those center ones.
11:52 - That's kind of cool, though.
11:53 - Look at that nice
little fractal shape.
11:54 - I've got going here.
11:55 - That's kind of cool.
11:56 - That's the inverse.
11:57 - So I guess if it's greater
than 1, I should add it.
12:01 - I just had it reversed.
12:02 - So let's do this, and we can
see-- oh, this is exciting.
12:04 - Oh, I ran out of my two
minutes, my bonus two minutes.
12:07 - It's fine.
12:08 - Look at this.
12:08 - Now, you can't really
see that this is working,
12:11 - but I think it would be helpful
if, in show, I gave it a fill.
12:21 - Let's just try that.
12:23 - I should make it
a rainbow somehow.
12:25 - Oh, oh, look at this.
12:27 - I really need to
rotate by some other--
12:35 - I'm going to just do some
random other rotation
12:38 - just so we can see this better.
12:47 - Can I give some alpha here?
12:51 - There we go.
12:54 - I'm pretty sure this is working,
but I'm not getting exactly
12:58 - the visual effect I was
hoping for, probably
13:00 - because I just need lights.
13:02 - I wonder if I put
some sort of lights
13:06 - in the scene, that
would help things.
13:12 - Oh, yeah, there we go.
13:13 - There we go.
13:14 - Look at this.
13:15 - There's the sponge, one, two.
13:17 - Oh, this is really exciting.
13:19 - I did it!
13:20 - Well, it's quite slow now,
you can see, but there it is.
13:23 - And I kind of want to
get rid of the stroke.
13:26 - And I kind of want
to add Peasycam.
13:29 - And I'm just going to do
this, this, there we go.
13:32 - This is lovely.
13:33 - So you can see,
here, we now have,
13:35 - in probably about
20 minutes in total
13:38 - when all is said
and done, the Menger
13:40 - sponge in Processing using
p3d, using a lot of ArrayLists.
13:44 - I will upload the code that
goes with this example,
13:47 - and there will be a
link in the description.
13:49 - And hopefully, I don't know,
make something with this
13:52 - and send it to me
because this was very--
13:54 - this was kind of like some
sort of birthing experience
13:57 - that I just went through.
13:58 - It is 4:00.
13:58 - I have to hit stop over here.
13:59 - Goodbye.