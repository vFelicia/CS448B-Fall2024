00:00 - This is actually a true story.
00:01 - I slept with this paper--
00:03 - Weighted Voronoi Stippling
under my pillow with the hope
00:06 - that it would absorb
into my mind somehow.
00:09 - [MUSIC PLAYING]
00:15 - It's time for another
coding challenge.
00:16 - I am very excited
about this one.
00:18 - It is a high degree
of difficulty,
00:20 - but if I've made it
succeed, you know already.
00:23 - I don't know, but you know
because you're watching this,
00:25 - and you're seeing me as a
Weighted Voronoi Stipple.
00:29 - There's a lot to unpack
here with this topic,
00:31 - and the first thing
that I want to tackle
00:34 - is just the concept
of a Voronoi diagram.
00:37 - I'll get more to stippling
and image processing
00:41 - and all the other kinds
of things of the way
00:43 - that we're going to weight
the diagram according
00:45 - to the pixels of an image later.
00:47 - The Voronoi diagram, also known
as a Voronoi tessellation,
00:51 - was named after the
mathematician Georgy Voronoi.
00:55 - It is also linked and related
to something called a Delaunay
00:59 - triangulation.
01:00 - So let's look at both of
those concepts briefly.
01:05 - Both Delaunay triangles
and a Voronoi diagram
01:08 - require a set of seed points.
01:13 - The Delaunay
triangulation algorithm
01:15 - will build a mesh of triangles
out of that set of seed points.
01:21 - Now, I've made a guess here
as to what the proper Delaunay
01:25 - triangulation would be.
01:27 - Yes, this is a collection of
triangles made from these seed
01:30 - points, but there are
other ways to make
01:32 - these points into triangles.
01:34 - What makes it a
Delaunay triangle?
01:35 - What-- every single
triangle has something
01:38 - called a circumcircle
associated with it.
01:41 - A circumcircle is a circle
that passes through all three
01:44 - vertices of the triangle.
01:47 - The Delaunay
triangulation is such
01:49 - that no other points, none of
those original seed points,
01:52 - live inside of any of
the circumcircles of any
01:55 - of the triangles.
01:58 - So here are two circumcircles
that I attempted
02:01 - to draw for this triangle
and this triangle,
02:04 - and they aren't
containing points
02:06 - from any of the other triangles.
02:08 - But it's reasonable
to ask the question
02:10 - as to whether this triangulation
would be the proper Delaunay
02:15 - one.
02:16 - I will include a
p5.js example along
02:19 - with this video
that shows you how
02:21 - to calculate the circumcircle
for a triangle, which
02:23 - would lead you to
implementing the Delaunay
02:25 - algorithm yourself.
02:27 - But what I'm going to
do here is I'm instead
02:30 - going to use a package
inside of the d3 library.
02:34 - Yes, I'm using a different
JavaScript library than p5.js
02:37 - alone to compute the Delaunay
triangulation for me.
02:42 - Let's take a look
at how to do that.
02:44 - Then I'll circle back and move
towards the Voronoi diagram.
02:48 - Let's make an array
of random points
02:50 - and draw them into the canvas.
02:52 - [MUSIC PLAYING]
02:59 - Wonderful.
03:00 - Now, there are several
JavaScript libraries
03:03 - for computing the Delaunay
triangulation, most notably
03:06 - the Delaunator from Mapbox.
03:08 - That library is what the
d3-delaunay triangulation
03:12 - package is built on top of.
03:14 - To bring it into
my p5.js sketch,
03:16 - I need to just make sure to
additionally include the CDN
03:20 - link to the library itself.
03:23 - You might be asking why not
just do the whole thing in d3?
03:26 - And that's a very
reasonable question to ask.
03:29 - The reason is I
don't really know d3.
03:31 - I'm invested in using p5.
03:32 - I'm going to keep with it.
03:34 - But I certainly would love to
see ports of this experiment
03:37 - with this same algorithm
and idea in other languages
03:39 - and libraries, and I hope
that you'll explore that.
03:41 - I'll start with a global
variable for the triangles.
03:45 - And in an ideal world, I
might be able to say something
03:48 - like this.
03:51 - However-- and you can
see the error pointing me
03:53 - in the direction that
I've got to go in-- d3
03:55 - has different ways of dealing
with vectors and points
03:58 - and arrays of numbers.
04:00 - The easiest way, I
think, for me here,
04:02 - would be to write
my own function that
04:04 - converts the p5 vector
array into something
04:06 - compatible for d3.
04:07 - And I could have worked with
something compatible for d3
04:10 - from the start,
but again, I'm just
04:11 - exploring how to mix
these libraries together.
04:15 - I'm not necessarily
invested right now
04:16 - in writing the most
efficient or fast code.
04:19 - [MUSIC PLAYING]
04:28 - What I've done is taken
all of the vector objects
04:31 - and converted them
into a single array
04:34 - with x, y; x, y; x, y pairs.
04:37 - That is what d3 is expecting.
04:39 - And looking at
the documentation,
04:41 - I can see that I can now get
a collection of triangles
04:47 - from the Delaunay object.
04:49 - They aren't triangle
objects or vectors,
04:52 - so I've got to do
my own counting
04:54 - to go through and
find each point
04:57 - and pull out the x and
y from nested arrays.
05:00 - [MUSIC PLAYING]
05:05 - It's very important that I
spell Delaunay consistently
05:08 - and correctly
throughout this sketch.
05:10 - [MUSIC PLAYING]
05:16 - Something is wrong.
05:18 - I'm going through
the entire array
05:21 - every three spots because
a triangle is made up
05:24 - of three points.
05:25 - Let's look at the
Delaunay triangles.
05:30 - What?
05:32 - Oof-- I really need to read
the documentation better.
05:35 - The triangle vertex
indexes are stored
05:38 - as an array-- i0, j0, k0.
05:41 - Those indexes are the indexes
to the x, y positions inside
05:47 - of a separate points array.
05:49 - This is going to be
a really long video.
05:51 - [MUSIC PLAYING]
06:00 - Oh, whoops, my global
variable is called points.
06:04 - [MUSIC PLAYING]
06:08 - Aha.
06:10 - After all that, I finally have
the Delaunay triangulation,
06:14 - but this is just an appetizer.
06:16 - I'm actually just going to
wipe that out of the code.
06:19 - I wanted to just
show you how you
06:21 - could get that triangulation,
but I'm actually not going
06:24 - to use it because
I am instead going
06:27 - to use the associated Voronoi
diagram that goes along
06:32 - with this triangulation.
06:33 - Let's create that same
collection of seed points
06:37 - again.
06:39 - But instead of the
Delaunay triangulation,
06:42 - let's look at the
Voronoi diagram.
06:46 - The result of the triangulation
is a collection of triangles.
06:49 - The result of a Voronoi diagram
is a collection of polygons.
06:53 - And the polygons are defined by
looking at every single point
06:57 - inside of this two
dimensional space.
06:59 - So I'm going to pick
any given point,
07:01 - and I'm going to get a
different color marker.
07:04 - Let's take this purple
point and ask the question.
07:07 - Which point of all of these
seed points is it closest to?
07:11 - And I can eyeball that and see
that it's closest to this one.
07:16 - What if I were to draw in purple
every single point in this 2D
07:22 - area that's closer to this one
than any of the other ones?
07:26 - It's probably going
to be-- and I'm
07:28 - going to get this
a little bit wrong.
07:31 - I'm totally making this up.
07:33 - So obviously, I didn't
get that exactly right,
07:35 - but this whole
area, by my eye, are
07:38 - all of the points that
are closest to this one.
07:43 - Maybe this green area are all of
the points closest to this one.
07:48 - [MUSIC PLAYING]
07:52 - I will calculate the correct
Voronoi diagram and overlay it.
07:55 - We'll see how close I got
just to my drawing here.
07:58 - This might remind you of the
Worley noise coding challenge
08:02 - where I actually did a
noise algorithm where
08:05 - I calculated from every
pixel its relationship
08:08 - to a set of random dots.
08:10 - The Voronoi diagram could
be computed that way.
08:14 - I could look at
every single pixel
08:15 - and iterate the distance
over all of the seed points
08:18 - and calculate it that way.
08:19 - That would be a very, very
slow, computationally expensive
08:23 - algorithm.
08:24 - Fortunately, there are
many faster algorithms
08:27 - for computing the
Delaunay triangulation
08:29 - and associated Voronoi diagram.
08:31 - The d3 library built on
top of the Delaunator
08:33 - is using a sweep
algorithm, and I'll
08:36 - provide some references
for you to read about
08:39 - further if you're interested.
08:40 - Now, you might
again be wondering,
08:41 - wait, what is the relationship
between these two things?
08:44 - Well, if I were to go and put
the Delaunay triangulation in--
08:48 - and I think this
is the correct one.
08:52 - [DING]
08:54 - Where do all of
these points come
08:56 - from that are making the
Voronoi tessellation?
08:59 - Those points are
actually the centers
09:02 - of the circumcircles that
are associated with each
09:05 - of those Delaunay triangles.
09:07 - Coming back to the code to
calculate the Voronoi diagram,
09:10 - first thing is maybe I'll
fix my spelling mistake.
09:15 - I can now call the
Voronoi function
09:18 - on that Delaunay object
to calculate the diagram.
09:22 - And in order for this
to work, the function
09:24 - requires a bounding box to fit
all the polygons the cell's in.
09:29 - Now, I can ask
the Voronoi object
09:32 - for an array of all
of the polygons.
09:36 - And then I can iterate
over them and draw them.
09:39 - [MUSIC PLAYING]
09:46 - In looking at the documentation
and console logging
09:49 - each polygon array, I can
see that the x, y pairs
09:53 - are in separate small arrays.
09:55 - So it's an array of many arrays
with just two values in it-- x,
10:00 - y; x, y; x, y So I need
to look at every polygon--
10:03 - i-- and get the x as index
zero and the y as index one.
10:08 - And there is both the Delaunay
triangles and the Voronoi
10:13 - tessellation.
10:13 - I don't actually want
to draw the triangles.
10:15 - So I'm just going to remove that
from my code, but don't worry.
10:18 - All of the steps
will be included
10:19 - in examples that are linked
in the description below.
10:24 - There's quite a
bit that you could
10:26 - experiment with just from
where I've gotten to so far.
10:29 - You could start moving
the dots around.
10:31 - You could think about how
are you placing the dots?
10:33 - You could add color and a fill
to each one of those cells.
10:37 - I encourage you to experiment
with just the Voronoi diagram
10:40 - itself as a material,
but I am going
10:43 - in a particular direction--
10:45 - the Weighted Voronoi
Stippling direction.
10:49 - And the next thing I
need to do in order
10:51 - to get there is to
look at something
10:53 - called Lloyd's algorithm.
10:56 - This algorithm
was first proposed
10:59 - by Stuart Lloyd at
Bell Labs in 1957,
11:03 - and it's also known as
a relaxation algorithm.
11:07 - And I really love a good
relaxation algorithm.
11:10 - Boy, do I need one.
11:11 - Let's imagine I have
any particular polygon
11:16 - from my Voronoi diagram.
11:19 - Maybe the seed
point was over here.
11:23 - You could imagine there
was maybe another cell
11:26 - right next to it.
11:27 - Maybe it looked
something like this.
11:29 - The idea of Lloyd's
algorithm, the idea
11:32 - of relaxing these
cells, is to look
11:35 - for what's called the centroid
of each one of these polygons,
11:40 - the center of mass
of that polygon.
11:43 - In purple, imagine that
that center is over here,
11:46 - and maybe the center of
this one is over here.
11:49 - Then, what if you were
to interpolate, move,
11:53 - the points towards
that center of mass?
11:57 - What would happen then
to the Voronoi diagram
12:01 - as those seed points move
and you recalculate it?
12:05 - What I need to do then
is calculate the centroid
12:08 - for each one of these polygons.
12:10 - Now, this isn't the
precise centroid,
12:12 - but a quick and dirty
way I can get a new point
12:15 - would be to just take
the average of all
12:18 - of the vertices of the polygon.
12:20 - [MUSIC PLAYING]
12:30 - Can I not go through
the polygons again?
12:33 - Returns an iterable over
the non-empty polygons
12:36 - for each cell with the
cell index as the property.
12:41 - Oh, look at this yield.
12:44 - It's a generator.
12:46 - I don't know generators.
12:47 - I'm going to have to learn
that, come back, and make
12:50 - a video about generators.
12:51 - Let's try making
an array from it.
12:59 - So if I get the generator
thingy that's iterable,
13:03 - then make it into a more
normal array that I'm used to,
13:07 - then I can probably
do this twice.
13:10 - Yes.
13:12 - That was a little
bit of a digression,
13:13 - but now you can see the
separate red points, which
13:17 - I am calling the centroid.
13:18 - It's not technically
the correct centroid,
13:21 - but I just wanted to
get something working.
13:23 - Let's now move the points
towards the centroid
13:27 - and recompute the
Voronoi diagram.
13:30 - So rather than draw
the points again--
13:34 - oh, let's put them into an array
then iterate over all of them,
13:39 - and lerp the original
points towards the centroid.
13:43 - Did I call that
something different?
13:45 - Seed points.
13:46 - I could go back to
calling it points now
13:48 - because I got rid of
the Delaunay triangles
13:50 - that I was using a
points variable with.
13:59 - I can call points index i lerp.
14:02 - So I can use the
vector lerp function
14:05 - which will interpolate
between those two points
14:10 - 10% of the way.
14:13 - And then I want then
the Voronoi object
14:18 - to be a global variable because
I'm going to recompute it
14:24 - every time through draw.
14:25 - So this moves to set up,
and then this exact thing
14:30 - that I did at the beginning,
I can now do it at the end
14:33 - here after I've
moved those points.
14:36 - Look at it.
14:37 - It's relaxing.
14:39 - Let's try 1,000
points, bigger canvas.
14:44 - This is lovely, but it's
collapsing onto itself
14:48 - as a black hole.
14:49 - This is because I'm not
actually properly calculating
14:52 - the centroid.
14:53 - My centroid, I calculated
it as the average
14:56 - of all of these vertices.
14:58 - But to find the proper
center, the center of mass,
15:01 - if you will, I need the average
position of every single point
15:05 - that's inside of that polygon.
15:08 - Luckily for me, I will
turn to a resource
15:11 - that I have used probably
thousands of times
15:15 - in however many
years I've been doing
15:16 - this, Paul Bourke's website.
15:19 - There is a section
written originally
15:21 - in 1988 called calculating the
area and centroid of a polygon.
15:26 - And I've got the formula
for it right here
15:30 - I do, however, need first to
calculate the area before I
15:34 - can calculate the centroid.
15:35 - So let's go ahead and do that.
15:37 - You can see here that I
need to iterate through all
15:40 - of the vertices and then
calculate, this looks like,
15:43 - the cross product
between the vector that
15:46 - describes one vertex, x, y
and the next vertex, x, y.
15:50 - So I'm going to need to look
at poly index i and poly
15:53 - index i plus one.
15:59 - I'm also going to use
the modulo operator
16:01 - so that when I get
to the last vertex,
16:03 - I calculate the cross product
with the first vertex, index
16:08 - zero.
16:08 - So v zero's x times v one's
y minus v one's x times v
16:16 - zero's y.
16:20 - And the last piece is just
to divide the area by two.
16:24 - So the area calculation
is now here in my loop
16:29 - through every polygon.
16:30 - This could be
something you could
16:31 - try in terms of filling each
polygon with a color associated
16:35 - with its area, but I'm not
going to do that right now.
16:38 - I'm going to move
forward and finish off
16:40 - the centroid calculation.
16:41 - So I can see now
that to calculate
16:44 - the x component of the centroid,
I need to again iterate over
16:48 - all of the vertices.
16:49 - And this cross product
appears again here.
16:54 - So let's make a variable
called cross and save
16:58 - that cross product.
17:00 - Let's put that centroid
vector back in,
17:06 - and what am I adding to it?
17:08 - I'm adding x of i
plus x of i plus one.
17:12 - So that's v zero's
x plus v one's
17:15 - x times the cross product.
17:19 - And same for the y, just
using the y components.
17:23 - And then all I need
to do is divide that
17:26 - centroid by six times the area.
17:31 - I put all that math in,
and if I did it correctly,
17:35 - the Voronoi diagram will
relax to this beautiful state.
17:40 - Let's see.
17:42 - I'm not very relaxed right now.
17:44 - Nope.
17:45 - I've got an error.
17:47 - Oh, well, that's
not really an error.
17:50 - It's just telling me not
to use that variable name
17:53 - because there's a p5 function.
17:54 - Let's call it cross value.
17:57 - Oh-- I just forgot to put
the centroids in the array.
18:04 - Oh, my goodness.
18:07 - I've never been so relaxed.
18:09 - Let's not draw the Voronoi
diagram anymore just
18:12 - to see what happens here.
18:16 - Look at those points relaxing
to this beautiful distribution.
18:21 - This is also very reminiscent
of my poisson-disc coding
18:25 - challenge.
18:26 - This is a nice method for having
a random distribution of points
18:30 - where all of the points
are evenly spaced.
18:33 - We are ready for the
next part of this.
18:37 - So how does this algorithm of
Lloyd's relaxation of a Voronoi
18:42 - diagram lead to image stippling?
18:46 - What is stippling?
18:48 - Stippling is a technique
applied in printmaking, drawing,
18:52 - painting, and it's the idea of
creating an image out of dots.
18:57 - It can be done beautifully by
hand with an artist carefully
19:01 - curating and selecting
the placement
19:03 - and layout of those dots.
19:05 - A naive algorithm to
create a stippling effect
19:08 - with digital dots
in a p5 canvas might
19:11 - be to iterate over the pixels
of an image and place dots
19:15 - where the pixel of that
image meets some threshold.
19:19 - Is it particularly
bright or dark?
19:21 - Let's add that algorithm
to this sketch.
19:24 - I'm going to add no loop to turn
off the relaxation of the dots.
19:29 - So right now, this is just
a random collection of dots.
19:33 - I can even make 10,000 of them.
19:36 - I've uploaded this
image of Gloria Pickle
19:39 - to the p5 web
editor, and my goal
19:41 - is to draw dots where the
pixels of this image are darker.
19:47 - [MUSIC PLAYING]
19:57 - I'm getting somewhere.
19:58 - I'm attempting to draw
10,000 random dots,
20:02 - but I'm only including
that dot if the underlying
20:06 - pixel of the image has a
brightness value less than 100.
20:10 - I can be a bit smarter
about the distribution
20:14 - by using probability
based on the brightness.
20:17 - So I could pick a random
number between zero and 100
20:21 - and only draw the dot if
it's greater than that value.
20:27 - Now you can see that the darker
the pixel, the more likely
20:32 - that dot is to appear there.
20:34 - This is a little bit
dangerous, but if that point
20:36 - didn't qualify, I
could decrement i
20:40 - so that I make sure I do
this at least 10,000 times.
20:43 - And on some level,
you might be asking,
20:44 - why did you even bother all
of that stuff about Delaunay
20:50 - and Voronoi?
20:51 - Look, there's your
image stipple,
20:54 - but look at the way
the dots are placed.
20:56 - They're all kind
of mushed together.
20:57 - There's a lot of
randomness we could
20:59 - do a lot better by
relaxing those points.
21:03 - Let's put that back in.
21:08 - Interesting thing is
happening, that the image,
21:11 - it appears that it's
getting blurred.
21:13 - Let's move these points more
quickly to their centroids
21:16 - without interpolating at all.
21:19 - Change this value to one.
21:22 - It's going to take some
time, but this will actually
21:25 - converge to the points being
completely evenly spaced.
21:30 - By reducing it to
1,000 points, you
21:32 - can see this happen
rather immediately.
21:34 - So the key is I still want to
relax the points to spread them
21:39 - out.
21:40 - However, I want their
relaxation to be related
21:44 - to the underlying image
itself, and that's the idea
21:47 - of a weighted centroid.
21:49 - In other words, what
if the underlying image
21:52 - had a lot of dark
pixels over here
21:55 - but light pixels over here?
21:57 - Instead of just calculating
the center of mass
22:01 - where every pixel
is treated equally,
22:03 - what if the pixels that have
darker underlying colors
22:06 - are weighted more strongly?
22:08 - Their mass,
essentially, is greater.
22:10 - Maybe that centroid
would end up over here,
22:13 - and the relaxation
would converge more
22:15 - in this direction towards
the darker pixels.
22:18 - Let's see if we can
make that happen.
22:20 - This is the
algorithm that I have
22:23 - for calculating the centroid,
and it's a really nice and fast
22:27 - algorithm.
22:28 - Unfortunately, I'm going to
need to do it a different way.
22:33 - There might be some way to
add the weights in here,
22:36 - but the way that I'm
thinking to do it
22:38 - is actually to
iterate through all
22:40 - of the pixels inside each cell,
weight them, and calculate
22:44 - the average of all of
the x. y positions.
22:46 - That might seem very
computationally expensive,
22:49 - so I'll be curious to
see how well it performs.
22:51 - And maybe we can
think about other ways
22:53 - to optimize that later.
22:54 - To do this, instead of looking
at each polygon one at a time,
22:59 - I'm going to look at every
pixel of the entire canvas
23:04 - and find out which
polygon it belongs to.
23:06 - And guess what?
23:07 - The d3 library will
do this for me,
23:10 - and then I can calculate the
centroids of each polygon
23:16 - collectively by iterating
over all the pixels.
23:18 - I don't know if I explained that
right, but let's get started.
23:21 - Let's at least look at all
the pixels one at a time.
23:24 - So I need to have an array
of centroids that has
23:28 - the same number of polygons.
23:31 - And they should each start
with an empty vector.
23:35 - Now I need to look
at every pixel.
23:41 - I should mention that
I'm sizing my canvas
23:44 - to be the same dimensions as
that image of Gloria Pickle.
23:47 - I could get it to work
with different dimensions,
23:49 - but it's going to
be much easier.
23:51 - I don't to worry about
things matching up,
23:53 - and so I can just use the
width and height of the canvas
23:55 - in my loop over all the pixels.
23:57 - The index to each
pixel in the image
23:59 - is the column plus the
row times the width,
24:02 - and then there are four values--
24:04 - R, G, B, A-- for every pixel.
24:06 - So I then need to
multiply that by four.
24:08 - [MUSIC PLAYING]
24:13 - Then I can get the red,
green, and blue values,
24:16 - get the average of them.
24:17 - That's not really
the proper way to get
24:19 - the brightness of a pixel,
but it'll do for now.
24:24 - I want the weight to be a
value between zero and one.
24:28 - So I want to get 100% weight if
the pixel is zero and 0% weight
24:34 - if the pixel brightness
is full at 255.
24:37 - Now I need to look up which
polygon this pixel belongs to.
24:41 - And this is where I'm going
to go back to the Delaunay
24:44 - triangulation because the
Delaunay triangles have
24:48 - a find function which will
give me that index based
24:53 - on an x, y position.
24:55 - So now I can grab that centroid,
and add i times the weight
25:03 - and j times the weight.
25:06 - So I can get the
pixel, get the weight,
25:09 - and then look up which centroid
it should be paired with
25:12 - and add those values
to the x and y.
25:15 - So what would happen if I
run this just like this?
25:19 - I used a reserved
function value.
25:21 - Let's call this bright.
25:24 - I should see something happen.
25:26 - Oh, I think I forgot
to load the pixels.
25:31 - This didn't even run.
25:33 - I'm missing such
a critical step.
25:35 - Any time you take the average
of a collection of things,
25:37 - you need to divide by the total.
25:39 - So what is the total here?
25:41 - Well, if the weight of
every element were one,
25:43 - I would divide by how
many elements there are.
25:46 - Here, to get that
weighted centroid,
25:48 - that weighted average,
I need to divide
25:50 - by the sum of all
of the weights.
25:52 - So in addition to a centroids
array, I need a weights array.
25:58 - And let's fill that
array with zeros.
26:01 - And in addition
to the centroids,
26:04 - I need to add that weight
to the sum of the weights
26:06 - for that Delaunay index.
26:09 - And then I can look at
all of the centroids
26:16 - and divide by the
sum of the weights.
26:21 - Wait a second.
26:23 - I think maybe we did it.
26:25 - Wow.
26:26 - Let's add more points.
26:31 - Oh, divide by zero.
26:35 - What if the weight is zero?
26:37 - So we've got to address that.
26:40 - And if the weights
were zero, let's
26:42 - just leave the point
in its original state.
26:47 - It's so disappointing
how slow it is.
26:50 - If only there were a way.
26:52 - Look at this.
26:53 - The Delaunay find
function takes the x
26:57 - and y that you're searching
for as well as an index.
27:01 - That index is the starting
point of the search.
27:04 - Well, guess what?
27:05 - If I had just found
where one of the pixels
27:07 - is, and I'm about to
check the next pixel,
27:10 - it's pretty likely it
would be in the same spot
27:13 - as that pixel I just checked.
27:14 - They're next to each other.
27:15 - So I don't want to start
from zero every single time
27:19 - to check all of the cells.
27:21 - And looking in the
code, if I were
27:24 - to make the Delaunay index a
variable outside of the loop,
27:30 - and then when I look for it,
I pass in the previous index
27:36 - that it found.
27:38 - Additionally, let's have that
lerp be a little bit higher,
27:43 - and look at that.
27:45 - Gloria Pickle weighted
Voronoi stippling.
27:49 - [FANFARE]
27:50 - What is possible now?
27:53 - Let's go back and add
the Voronoi tiles in.
27:57 - Let's not draw the points.
28:00 - So that's just yet another
visualization of this image.
28:04 - What happens if you
start to add color?
28:07 - What happens if you start
to think about sizing
28:09 - the dots different sizes?
28:11 - What if you were to apply this
to a moving image like a video?
28:15 - What if you use a more abstract
underlying pattern, not just
28:19 - an image of a dog or yourself?
28:21 - I don't know.
28:22 - I'm sure you can come up
with something creative.
28:24 - This code is a bit of a mess.
28:26 - I'm going to clean it up,
comment it, document it.
28:30 - I will take a look
at whatever you
28:32 - submit to the passenger showcase
in a future live stream.
28:35 - And let's just relax
all of our pixels,
28:38 - relax ourselves,
and fill the world
28:41 - with beautiful, weighted
Voronoi stippling.
28:45 - See you next time.
28:46 - [MUSIC PLAYING]