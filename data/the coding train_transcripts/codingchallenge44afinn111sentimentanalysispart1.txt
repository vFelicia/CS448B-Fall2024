00:00 - hello welcome to a coding challenge
00:02 - again in this coding challenge I am
00:04 - going to build from scratch a web
00:07 - application that does sentiment analysis
00:10 - what is sentiment analysis so first of
00:13 - all I want to mention that the actual
00:14 - Oaks I'm in the wrong page the
00:15 - particular technique I'm going to use is
00:18 - a score based system using is using a
00:22 - list of words known as the F in 111 so
00:25 - there are a lot of ways to do sentiment
00:27 - analysis what I mean by sentiment
00:28 - analysis is here's some text here's some
00:31 - information I want to determine is it
00:32 - positive is it negative and I want to
00:35 - assign it a score is it a high number
00:37 - meaning very positive is it zero meaning
00:39 - completely neutral is it a low negative
00:41 - number meaning very negative and there
00:44 - are different ways you can do this there
00:45 - are machine learning systems that can be
00:48 - trained here's a lot of very positive
00:51 - we're essays and here's a lot of really
00:53 - negative essays learn about them here's
00:55 - an essay please give it a score there's
00:57 - you neural networks can do this there's
00:59 - a technique known as Bayesian
01:01 - classification that can be trained to
01:03 - look also be trained based on positive
01:06 - and negative text and there's I'm sure
01:08 - list many other techniques here but the
01:11 - technique that I want to look at in this
01:12 - particular video is quite a simple one
01:14 - and it involves a premade list of words
01:18 - that are assigned a valence a positivity
01:21 - or negativity score and so this list is
01:24 - a well-known list the Athan 111 it is
01:27 - the newest version with 2477 words and
01:32 - phrases and these were labeled by fin
01:34 - arab Nielsen in 2009 2011 so what what
01:38 - is the F in 111 technique the 8th and
01:42 - 111 technique involves a pre assigned
01:45 - list of words so if I were to say like
01:48 - happy this has a score of 5 each each
01:52 - word gets a positive or negative valence
01:55 - score 5 being very happy very positive
02:00 - sad very negative no rainbow also very
02:06 - positive 5 I don't want to give rainbows
02:09 - a score of 4 and happy 5 that would be
02:11 - and I could think of what's like you
02:12 - know
02:13 - um turtle turtles are like a little bit
02:16 - sad Turtles turtles are happy turtle -
02:19 - right okay so you get I'm not gonna try
02:21 - to me clearly I'm not qualified to make
02:23 - up a list of words and scores so if you
02:25 - have this premade list of words and
02:27 - these could be in any language this is a
02:29 - particular list in the English language
02:31 - and if you have thousands and thousands
02:34 - of them then if you have a particular
02:36 - text with a lot of words in it you could
02:40 - write a computer program to just look at
02:42 - each word and ask is it in the list if
02:45 - it's in the list lookup and score and
02:47 - add it to a running total and at the end
02:49 - you're gonna get some value like you
02:50 - might get 27 and it's going to be that's
02:53 - going to be aa positive this is a
02:54 - positive email a positive tweet positive
02:57 - essay or you might get negative 31 and
02:59 - this is very very negative so this is
03:01 - what would be known as the total score
03:03 - but you can also look at the comparative
03:05 - score meaning you know just because we
03:07 - have a really long document with the
03:08 - word happy and in a lot of times is that
03:10 - more positive than a short document with
03:12 - the happy it half the word happy and at
03:14 - fewer times so the comparative score
03:16 - would be the comparative score would be
03:18 - the total score divided by the total
03:21 - number of words okay so this is exactly
03:25 - what I want to implement
03:26 - so let's look back here sorry so the F
03:29 - in 111 is a particularly STUV words it
03:33 - was manually late this was a manually
03:34 - made by fin Europe Nielsen
03:36 - you could imagine what kind of research
03:38 - and thought went into this and I
03:40 - encourage you to read the paper and also
03:43 - if you use this list you should also
03:45 - reference the paper and everything is on
03:46 - this website which is linked in this
03:49 - video's description okay so what I'm
03:51 - gonna actually do is just download it oh
03:52 - I've already downloaded it I did that
03:54 - before it started so where would it be
03:57 - it would be in my downloads and here it
04:00 - is under a fin 111 so so here I'm gonna
04:03 - open this up and we can take a look at
04:05 - this list so you can see this has a set
04:09 - of several thousand words and you can
04:11 - see abandoned being negative two
04:12 - abandoned negative two etc etc etc
04:15 - compelled one congratulations to exert
04:19 - you can see here all the words and all
04:21 - their scores I can scroll through the
04:22 - whole thing so what first thing I want
04:24 - to do in this challenge I think is
04:26 - so much more convenient if this text
04:29 - file was actually a JSON file so let's
04:32 - write a little quick program to convert
04:34 - it to JSON I could do that in like node
04:36 - or Python or something but I'm gonna
04:37 - somewhat absurdly just do this in the
04:40 - browser so first what I want to do is I
04:42 - need to get this list and I need to go
04:44 - to my folder that has my code and I'm
04:47 - going to paste it in here so right now I
04:50 - have a folder that has an HTML file I
04:52 - have a libraries folder because I'm
04:54 - using the p5.js and p5 Dom library and
04:57 - sketch this is where I'm going to have
04:59 - my JavaScript code okay so now what I
05:02 - want to do is so here's the thing
05:04 - this file which I can load up here this
05:07 - is actually I'm almost certain is a tab
05:10 - delimited file meaning each word if the
05:13 - format of this file is word tab score so
05:17 - there's a variety of ways I could parse
05:18 - this and this may not actually work but
05:21 - let's test the p5.js library and see if
05:26 - load table works of this file so what
05:29 - I'm going to do is go back to my code
05:30 - and I'm gonna say var table function
05:36 - free I'm going to use preload which is a
05:38 - function that I can use to make sure
05:41 - certain images or media or data files
05:44 - are loaded before this the page the
05:47 - sketch even begins load table and then I
05:50 - can Eve to give it the file name a fin
05:52 - 111 dot txt and then I'm just gonna say
05:56 - console dot log table and let's see what
06:00 - happens and this is my so that's good
06:05 - look at this this is very promising you
06:07 - can see that a table object got loaded
06:09 - and it includes a array of rows with
06:12 - 2477
06:13 - so frankly there's not really a huge
06:17 - need to turn this into JSON because I
06:18 - have it in this nice table object which
06:20 - makes it very easy to parse but let's
06:21 - for look up when I want to look up the
06:24 - scores I'm gonna want it as a JavaScript
06:25 - object so let's um let's see how do we
06:28 - iterate over this table so for VAR I
06:31 - equals 0 I is less than table dot get
06:35 - row count here's the thing I don't know
06:38 - that the table API off
06:40 - in my head so let's go to p5.js org
06:42 - reference and then what I'm going to do
06:46 - is look for a table and we could see low
06:49 - table p5 table so let's go to p5 table
06:53 - and we can see a bunch of the functions
06:55 - like get row count so this is something
07:00 - I certainly need to that I want to
07:02 - iterate over all the rows so I can say
07:04 - for VAR I equals 0 I is less than table
07:09 - get row count I plus plus and then I can
07:14 - get each row probably by saying get row
07:17 - I that seems probably like it's the case
07:20 - let's say console dot log row let's see
07:23 - if that works
07:24 - whoops let me go back over here so this
07:28 - looks good like I'm getting I'm getting
07:29 - a row object for every row in that table
07:32 - and I'm probably can save our word
07:35 - equals table dot get 0 and var score
07:40 - equals table get one and why am I saying
07:44 - that because if this file is in a table
07:50 - and each line of this text file is a row
07:53 - think of it as a spreadsheet a board is
07:56 - in column 0 1 is in column 1 so this is
08:01 - me saying load that text file into a
08:04 - table look at every single row get every
08:07 - row and then get the stuff that's in
08:09 - column 0 and get the stuff that's in
08:11 - column 1 and by the way I could actually
08:13 - label the columns with headers and use
08:15 - that there's lots of fancy of things you
08:17 - can do with tables in p5n processing but
08:19 - this should do so let's say console.log
08:21 - word score and let's run this undefined
08:24 - undefined so get I suppose is not the
08:29 - actual function oh and I said table
08:32 - because I need to say row probably all
08:35 - of you are noticing this I see in the
08:36 - chat that everyone noticed this like
08:38 - five minutes ago
08:38 - so row get cuz of course what I want to
08:41 - do is get column 0 from that row not
08:44 - from the table sorry about that and then
08:47 - we can see now why do I still see some
08:49 - undefined look at this it didn't split
08:52 - it
08:53 - it wasn't able to do it by tabs that's
08:57 - so sad
08:58 - low table so this might be a p5 jazz bug
09:01 - or I might just be wrong about how this
09:04 - table is formatted or I might need to
09:06 - like give it like a file extension let's
09:11 - try that oh look at that that worked so
09:13 - what I needed to do is because it's dot
09:15 - txt p5 couldn't auto detect that it was
09:19 - a tab delimited file so I was a time
09:22 - able to give it a second argument and
09:24 - give it a extension TSV to tell it that
09:26 - it is a tab separated file if it were a
09:28 - comma separated file meaning commas in
09:30 - between instead of tabs then that's what
09:34 - I had before it was getting the whole
09:36 - thing and then there's no second column
09:37 - okay so that fixed that
09:39 - okay so TSV great so now what I want to
09:42 - do is I'm gonna make an object called
09:44 - the eight Athan and it's an empty
09:47 - JavaScript object and what I want to do
09:49 - is I want to say I want to put in that
09:52 - object the word as the key the number as
09:55 - the value where does the key number as
09:56 - the value so I'm gonna say a fin word
10:00 - equals score and then at the very end
10:02 - I'm going to say console dot log effing
10:04 - and we're gonna look at this and we can
10:07 - see look at that there it is there now
10:10 - is that a fin list in JavaScript object
10:14 - every word with a score and I'm kind of
10:17 - scrolling through churches to see if
10:18 - anything broke like if there was a weird
10:19 - like apostrophe or something that broke
10:21 - it but it doesn't look like it did and
10:24 - just to remind you remember if I have an
10:26 - object I say objects something dot x
10:29 - equals 100 this is the same my laptops
10:31 - about to fall over as saying this so
10:36 - since these words are all strings and I
10:40 - want those to be the keys the properties
10:42 - of the objects I need to pass them in
10:44 - using this bracket syntax
10:45 - I can't do it like this because it's not
10:47 - a variable name at this point it's
10:48 - coming in as a string ok so now that
10:51 - that's done one of the lovely things
10:52 - about using p5 is I can just say save a
10:55 - fin 111 dot JSON a fin and I'm saying
11:03 - it's with two ends I think
11:04 - yeah so now I can just save that file
11:07 - say save that data as a JSON file and it
11:10 - should auto download that to me in the
11:12 - browser so let's run it again
11:14 - ooh file name index of okay so I think
11:17 - maybe I'm supposed to say the other way
11:20 - around first the data and then the file
11:22 - name that seems right there we go and
11:25 - you can see my browser I'm standing in
11:27 - front of it but my browser auto
11:29 - downloaded this file called a fin a fin
11:34 - because I must have like put that in my
11:36 - code by accident
11:37 - well where's my coat yeah whoops to ends
11:41 - there but that doesn't really matter the
11:42 - point is now I have this file a fin and
11:47 - I can put that oops I can put that here
11:52 - instead of the text file so let me
11:54 - rename it to fix it so what I did just
11:57 - is now instead of this text file I now
12:01 - converted that to a JSON file and of
12:03 - course it won't
12:05 - oh but this is I'm like I'm can open it
12:07 - right through here and we can see there
12:09 - it is so this is great because now to do
12:12 - the text analysis the sentiment analysis
12:15 - it's going to be so much easier if I
12:17 - already have this data in a JSON file
12:19 - and by the way you could probably Google
12:21 - a fin 111 JSON countless people all over
12:25 - the world that internet have done this
12:26 - already but I thought it was a useful
12:28 - useful demonstration to show you know in
12:31 - p5 how to convert between one format to
12:33 - another so now we're actually ready to
12:35 - do the sentiment analysis