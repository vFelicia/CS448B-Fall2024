00:00 - (bell rings)
00:01 - - Yes! It's another
snowflake coding challenge.
00:04 - This is my third holiday
snowflake challenge,
00:08 - and in this one I'm going to, once again,
00:09 - make an algorithmic
snowflake and I'm going to
00:13 - render in processing
of the Koch snowflake,
00:16 - otherwise known as the Koch
curve, Koch star, Koch island.
00:19 - It's a mathematical curve
and one of the earliest
00:22 - fractal curves to have been described.
00:23 - I'm just reading the Wikipedia page
00:25 - by this Swedish
mathematician Helge von Koch.
00:28 - And I think I'm
pronouncing that correctly.
00:30 - All right, so how does it work?
00:32 - I'm going to just show you
over on the white board.
00:34 - So the idea of the Koch snowflake,
00:37 - and this is a recursive pattern
that we're going to apply
00:41 - over and over again on a line,
00:44 - and actually there's
something really kind of
00:46 - crazy about this that I
do want to talk about,
00:48 - maybe towards the end, the
property of this curve is insane.
00:53 - So if I have any line, right,
00:56 - the rule that I'm going to do
is I'm going to take this line
01:00 - and divide it into thirds, okay?
01:03 - So I take the line and
I divide it into thirds.
01:05 - Then the idea is to
erase the middle section
01:11 - and, as if there were an
equilateral triangle here,
01:15 - render these two sides of
the equilateral triangle.
01:18 - And you get this, the idea being that
01:21 - we've gone from this line to this,
01:24 - which we would then go
to, we would do that again
01:27 - to each of these line segments
01:32 - and again and again and again.
01:34 - So this is will be like
a Koch line or curve.
01:37 - But if we start with this pattern
01:40 - that you might want to,
after watching this video,
01:42 - make your own version and try starting
01:43 - with different patterns,
and there's all sorts
01:45 - of variations on this that you can do,
01:47 - we'll end up with something that has
01:49 - a quality like a snowflake, yay!
01:52 - Okay, so let's get started.
01:54 - And you can see this described right here.
01:56 - And in theory, if we do this correctly,
01:57 - we're going to end up with
something that looks like this.
02:01 - All right, so I'm going to use processing.
02:03 - I will also create a JavaScript
with p5.js version of this.
02:06 - The code for both of those should be
02:08 - in this video description linked
02:09 - whenever you're watching this.
02:12 - But right you'll have to (mumbles)
02:16 - I made an example for
this many, many years ago.
02:19 - I'm sort of figuring it out.
02:20 - So I think what I want to
is I think I want a class,
02:24 - and I want to call the class a Segment.
02:27 - And I'm definitely going
to make heavy use here
02:29 - of I think of the PVector
object in processing.
02:32 - It's all called p5.vector in p5.
02:34 - It's an object that
holds an x and a y value,
02:37 - also a z value and a lot
of mathematical operations
02:40 - that you might typically do with vectors,
02:41 - and you can find in my other videos
02:43 - about what is a vector
if you're so interested.
02:45 - Okay, so in the segment constructor,
02:49 - I'm going to give it a start and an end.
02:56 - I think I want to call these a and b.
02:59 - So it's going to have a
PVector a and PVector b.
03:02 - Who's to say what's the
start and the end of a line?
03:05 - Is this the start, this the end;
03:06 - or this start or is this end?
03:07 - So really a and b, and
I'm just going to use
03:10 - as the arguments a_ in b_
as what gets passed in.
03:14 - I don't know if that makes sense.
03:15 - I'm also going to be very
careful and make sure
03:17 - I copy the object because I think
03:24 - that might become necessary.
03:25 - So basically the segment
is just this thing.
03:30 - So what I need to do then,
if I have a line segment,
03:34 - I need a function that takes one segment
03:37 - and makes it into four.
03:40 - So I don't know what to call that.
03:43 - Generate maybe?
03:45 - Let's call this generate,
03:46 - and it's going to generate
an array of segments.
03:54 - So this is now a function
that returns in theory,
04:00 - I'm just going to put
return null at the end
04:02 - so it doesn't give me an error,
04:04 - this function should return an array.
04:07 - I'll call those the children segments.
04:09 - I don't know if that makes
sense, but generated or new.
04:12 - Let's just call it Segments.
04:14 - Let's call it children as a new array
04:18 - with four spots in it.
04:23 - Right? So the idea here is that
04:25 - each one, a segment has a starting point
04:28 - and an end point, and then it
should generate four sub ones.
04:31 - So let's go to the main
program for a second.
04:34 - And what are we doing?
04:35 - I guess I could make a snowflake class,
04:38 - but ultimately what I want
is an array list of segments.
04:45 - Segments equals a new
ArrayList full of segments.
04:53 - And then I'm going to say
background zero, stroke 255,
04:59 - and I'm just going to draw them all.
05:02 - So for every Segment s
in segments, say s.show.
05:07 - And this is the really easy part
05:09 - because if I have a
function called show, oops,
05:16 - to show a segment is just to draw a line
05:19 - from a.x, a.y to b.x, b.y, okay?
05:25 - So this is the idea.
05:26 - A segment is two end points of a line.
05:29 - It could draw that line, and
then somehow I'm going to have
05:31 - to generate the sub lines that
I haven't figured out yet.
05:36 - So now if we do this, oh,
well let's add a segment.
05:39 - So I can call this like,
I can say segments push,
05:44 - and I'm going to say...
05:47 - No, not push.
05:48 - Push is the name for adding something
05:50 - to an array in JavaScript.
05:51 - I'm getting very confused.
05:53 - Add, so let's make two PVectors,
05:57 - and I'll make them somewhat arbitrary.
05:59 - So I'm going to say like zero comma 300
06:04 - and PVector b is a new
PVector that's at a 300 comma,
06:10 - oh no, 600 comma 300.
06:12 - So if I create a new
segment between a and b,
06:18 - then I should see it.
06:20 - There we go!
06:21 - So there's my segment.
06:22 - So now what I should do
is I need to somehow,
06:25 - let's actually put this in a...
06:30 - Let's put this in a variable called start
06:35 - because I'm curious.
06:36 - What I want to do is I want
to just test out my algorithm.
06:44 - So I'm going to say segment
children equals start.generate.
06:51 - So I just want to test
out my algorithm once.
06:53 - So I make that starting segment,
06:55 - I add it to the array list
and now I just want to
06:56 - generate before child.
06:58 - It's a little bit silly
to call them children.
07:00 - It's kind of like a
parent-child relationship
07:02 - in the sense that the segment gives birth
07:04 - to four new segments.
07:06 - So okay, so now I can
start doing this work.
07:09 - So I really just need
to figure out the math
07:11 - for like if I label these,
07:14 - if I label these like A, B, C and D.
07:18 - Let's do A and D first.
07:20 - That must be the easiest, right?
07:22 - So let's do segment A.
07:25 - So one thing I could
do is I could represent
07:29 - this line segment as a vector.
07:32 - So as a vector that points from A from B.
07:35 - Because if I do that, I
could divide the magnitude
07:39 - of the vector by three and
then move that distance
07:42 - from A and move that distance from B,
07:46 - and now I have, I should label
these like one, sorry, two.
07:51 - And I probably should
have counted from zero
07:52 - to three and four, right?
07:54 - This is A and this is
B starting out, right?
07:58 - So if I can get that vector, shrink it
08:00 - and then move from here,
that gives me a new segment
08:04 - between this A and this new point,
08:06 - and I can also take it
this point to the end.
08:08 - So that's going to be easy.
08:11 - So first what I want to do
is I want to make a vector,
08:16 - which is the difference between b and a.
08:20 - Then what I want to do is
divide that vector by three.
08:22 - So I want to just shrink that.
08:24 - I could divide it by three.
08:26 - And then for segment
one, I need a new point,
08:32 - a new point like so, b1 I'll just call it.
08:36 - The naming here, I've really
got to think about that.
08:38 - And obviously...
♪ I will refactor this later ♪
08:43 - ♪ You know I will refactor this later ♪
08:47 - Is...
08:48 - ♪ I will refactor this later ♪
adding to a that v.
08:55 - And then children zero is a new segment
09:03 - that goes between a and b1, right?
09:08 - Again, this is really
weird what I'm doing here,
09:11 - but I'm calling this point now b1, okay?
09:15 - And maybe this point
is now going to be a1,
09:20 - because I'm going to use it to
make a line segment to this.
09:23 - By the way, you might not
realize watching this,
09:25 - but I've been live streaming
for well over three hours
09:28 - and things aren't making
as much sense to me
09:30 - as they typically look.
09:32 - So now let me do segment number four,
09:34 - which is really taking b
and subtracting v, right?
09:41 - Subtract v from b.
09:43 - B minus v, I think that's right.
09:45 - And I'll call this A1,
09:47 - and this should really be
segment zero and segment three,
09:50 - because I'm putting it in this array
09:52 - so let's remember those.
09:53 - So now I want to make a
segment between a1 and b.
09:59 - So again, this is zero,
one, two and three.
10:04 - And I've called this b1, called this A1,
10:06 - let's just call this, let's call this c.
10:10 - Okay, so now what I need to
do is figure out that point
10:13 - and then I'm done.
10:14 - That shouldn't be too hard, right?
10:16 - So how do I figure out c?
10:19 - So c is actually, ah, I got an idea.
10:23 - We can rotate, right?
10:26 - What is this?
10:27 - An equilateral triangle.
10:28 - This angle is 60 degrees
or pi over, pi is 180.
10:36 - So that's like 1/3.
10:37 - Pi divided by three, is that right?
10:39 - That's 60 degrees.
(chuckles)
10:40 - Sorry.
10:41 - Yes, okay.
10:43 - So this is 60 degrees.
10:45 - So if I can take this
vector, which is doing this,
10:48 - rotate it 60 degrees, add
it to b1, I'll have c.
10:52 - So I should be able to say v
rotate pi divided by three.
10:58 - And I might have to do negative
10:59 - because the whole
coordinate system is flipped
11:01 - in computer graphics.
11:02 - And then I'm going to say
PVector c equals PVector add.
11:07 - What did I call that, b1, b1 plus v.
11:11 - So now, segment two is,
11:17 - children two is a new segment
11:22 - that goes between b1 and c,
11:26 - and then I need one that
goes between c and a1.
11:29 - That goes between b1, b1 and c.
11:35 - And segment three goes between c and A1.
11:43 - And again, I might want to
rethink the naming here.
11:46 - And maybe some of you have
good suggestions for that
11:48 - and then I can say return children.
11:52 - Okay, so first let's
just see if this doesn't
11:54 - give me any errors.
11:56 - Let's just see if like I run this
11:58 - and I'm going to just say
like println and children.
12:00 - It's not going to show me
anything here because...
12:04 - But okay, so that's good,
I didn't get any errors
12:06 - and I'm getting this sort of console log.
12:07 - So this is a nice place
of using JavaScript.
12:09 - Ooh, why did I get null there?
12:11 - So one of them was null.
12:13 - I got to check that.
12:14 - But this is the nice thing
about using JavaScript,
12:18 - is if I console log that array,
12:20 - I'd be able to actually look at the object
12:21 - and see what all the properties are.
12:23 - It's a little trickier to do that in Java,
12:24 - but why was one of them null?
12:26 - Children zero, children three.
12:28 - Oh, this is one.
12:30 - Sorry, this should be one.
12:31 - Okay, so now if I do that again,
12:33 - we can see there's four segments.
12:34 - I got to say perfect.
12:36 - Now what I want to do
is I'm not going to add
12:40 - the start just to see,
I'm going to say segments,
12:43 - I think add all allows me to add an array
12:46 - to an array list.
12:47 - It's giving me an error here though.
12:49 - (bell rings)
All right, so I looked around
12:50 - on the Java docs page for a little while.
12:51 - I didn't see anything that
would really work for me.
12:53 - I'm sure somebody in the
comments will give me
12:55 - a good suggestion, but
I'm actually just going
12:57 - to write my own function.
12:58 - I'm going to say addAll.
13:00 - I'm going to get an array,
13:03 - and I'm going to add it to,
13:05 - I'm going to add it to an
array list of segments.
13:12 - I wonder if I typed the array somehow.
13:14 - Oh no, I did type the array.
13:16 - And then I'm just going to do a for loop.
13:18 - For every segment s in array, list.add s.
13:27 - So this is my own function to
add everything from an array
13:31 - into an array list.
13:32 - So I will now call addAll all
the children to the segments.
13:40 - And now let's see.
13:43 - Ooh, yay, that worked.
13:44 - It's upside down, I had a
feeling that was going to happen.
13:46 - So that's an easy fix.
13:48 - I can just rotate by
negative pi over three,
13:51 - and there we go.
(bell rings)
13:52 - This is the building block.
13:54 - Now I just need to do this generation
13:56 - after generation after generation.
13:58 - So let's think about how
I want to do this now.
14:01 - So let's say what I want to do is
14:03 - let me click the mouse and get
a new generation each time.
14:07 - So I'm going to do this,
14:10 - and I'm going to take this,
14:12 - and I'm going to make a
mousePressed function.
14:16 - And what I'm going to do in mousePressed
14:18 - is I'm going to make a blank array list.
14:19 - I'm going to make a new one.
14:22 - I'm going to call it nextGeneration
14:24 - is a new ArrayList of segments, okay?
14:30 - So I'm making, oops, I'm making a new
14:32 - array list of segments.
14:34 - Oh no, this is fine.
14:35 - And what I'm going to do is
for all this current segments
14:41 - in the array, I am going to,
14:47 - I should just make this.
14:49 - This would be so much easier
14:50 - if I just made this return.
14:52 - So this I could refactor, have
this return an array list.
14:55 - This was silly to make this an array
14:57 - because then those could
get added together.
14:59 - Should I do that?
15:01 - Eh, it's fine, I already have it.
15:02 - But that's something you could do
15:03 - to improve this code if you want.
15:05 - Segment children equals s dot,
15:10 - what did I call it, generate?
15:13 - Then I want to say addAll the children
15:16 - to the next generation.
15:19 - And then I want to say segments
equals next generation, right?
15:25 - So basically, oh that's
not a function, right?
15:28 - I need to pick a new array
because the old segments
15:32 - don't get kept.
15:33 - Each one just makes a bunch
of new ones and gets added.
15:36 - So what this should do
now, click, click, click,
15:40 - click, click, there we go.
15:42 - Look at that, there's that
Koch curve, all right?
15:47 - And some people in the chat are giving me
15:49 - some good suggestions.
15:50 - All right, so we need to
turn this into a snowflake.
15:52 - But first I want to talk to
you about something crazy.
15:55 - Please, please humor me for a second.
15:57 - This is called the monster
curve for a reason.
15:59 - And why, why?
16:00 - This is one of those mathematics things
16:03 - that really excites me.
16:07 - And let's see if I can explain this.
16:10 - Let's say this line segment
has a length of one.
16:18 - Think about for a second
what is the length now
16:23 - of this, this the Koch
curve, it has length one.
16:26 - At generation zero, it has length one.
16:28 - At generation one, what is its length?
16:32 - Well, if this is 1/3, each
one of these is length 1/3.
16:36 - So it's length is 4/3.
16:40 - Now what is its length?
16:42 - Oh my god, this is going to
be so hard to figure out.
16:45 - But if this was 1/3 then this is 1/9,
16:50 - so this is 4/9 times three,
16:54 - the length would be 12/9.
16:58 - Is that right?
16:59 - No, no, that couldn't
possibly be right, right?
17:02 - This is one, this is 1/3.
17:06 - This is 1/9.
17:09 - And then we have, no,
no, no, no, 16/9, right?
17:12 - So right, that was right there.
17:14 - This part is 4/9, but
there are now three things
17:19 - that are all 4/9.
17:21 - Four things are all 4/9.
17:23 - So we get 16/9.
17:26 - This number, actually
if we keep doing this
17:30 - over and over again and
we could probably create
17:32 - an equation to do this pretty easily,
17:34 - somebody else on some other
YouTube channel will do that,
17:38 - this goes to infinity.
17:40 - I'm not going to prove
that to you right now,
17:42 - I'm going to let you try to
figure that out on your own.
17:43 - What's crazy about that?
17:47 - So as you do this over and over again,
17:49 - how much paint, if you
could draw the Koch curve
17:54 - to the infinite generation, it would fit.
17:58 - It would fit here.
17:59 - It's never going to not fit here.
18:01 - But how much ink would I need?
18:03 - I would need an infinite amount of ink.
18:05 - So that's the kind of
mathematical paradox.
18:07 - How could we have a curve
that infinitely long
18:10 - fit into a finite space?
18:12 - Think about that.
18:13 - Now we don't have to worry about that.
18:14 - That problem is irrelevant for us
18:16 - because we have pixel limitations, right?
18:18 - I mean, at a certain
point, I can keep clicking
18:21 - but I'm not going to get any
more resolution out of this
18:23 - because I have a limited number of pixels.
18:25 - But that's an interesting.
18:27 - And it's also going to
get really, really slow,
18:30 - one thing you could do
is you could think about,
18:32 - this could be a challenge for you
18:34 - after you watch this, is could you make
18:36 - an infinitely zoomable ones?
18:39 - This is, by the way, four divided by three
18:42 - to the zero power, generation zero.
18:45 - This is four divided by
three to the oneth power,
18:49 - four divided by three; and this is four
18:50 - divided by three squared, 16, nine, nine.
18:53 - You can now imagine what the
next generation would be.
18:56 - Four divided by three cubed.
18:58 - So this is actually the equation
19:00 - for expanding out the Koch curve.
19:05 - Okay, so now what do I want to do?
19:08 - Ah, what I want to do is make a triangle.
19:12 - So I'm going to make a triangle.
19:14 - So let's think about this.
19:15 - This shouldn't be too hard.
19:17 - The first segment would be, so let's do a
19:21 - is going to be at like zero comma 100.
19:24 - B is going to be at width
comma like 100, yeah.
19:29 - And then all I need is c.
19:32 - This should be an equilateral
19:33 - triangle though probably, right?
19:34 - Let's just do this first.
19:36 - Let's do this at like 300 comma 600.
19:41 - (chuckles)
19:44 - Segment one.
19:47 - Segment two, segment three, a to b,
19:50 - b to c and c to a.
19:56 - And I want to add segment one,
20:01 - segment two, segment three.
20:04 - Huh, did I like get that right?
20:10 - Here we go, there it is!
20:12 - (whistle blows)
20:13 - The Koch snowflake.
20:17 - I should give myself some more space.
20:23 - Oh no.
20:27 - I'm so brain dead right now.
20:29 - I'm going to translate down by a hundred.
20:33 - There we go, there we go.
20:35 - I'm sure somebody could
come up with a nicer way.
20:37 - So there's so many possibilities here.
20:39 - These are all individual
objects in a big array.
20:42 - So you know what, I could
actually move them all around.
20:45 - I could have them all fall
20:46 - and I could animate them back into place.
20:48 - There's so many possibilities there.
20:50 - I could color them.
20:51 - There's a lot of variations on how,
20:53 - I'm going to go to here
and I'm going to show you,
20:57 - there's actually an interesting post here
21:02 - which links to this page which shows
21:06 - a bunch of ways you can,
21:07 - variations on how you can draw this.
21:09 - So this is something you could attempt
21:11 - after watching this video.
21:12 - So think about color,
think about animation,
21:14 - think about making many
of them, but this is
21:17 - (whistle blows)
the Koch
21:23 - Koch, Koch
21:26 - (whistle blows)
snowflake in processing.
21:29 - And oh, so when you make
a variation of this,
21:31 - check the video description,
21:32 - go to the link to the codingarray.com,
21:34 - there are some instructions
for how you can
21:36 - submit your variation of them.
21:37 - And then after the new
year on a live stream,
21:39 - I will share a whole bunch of all these
21:40 - different kind of snowflakes
that people have made, okay?
21:43 - Thank you very much for watching,
21:44 - and I'll see you next time.
21:46 - And yet, there is more, an addendum here
21:49 - which is that if you have
an equilateral triangle,
21:52 - if the height of an equilateral triangle
21:55 - is the square root of three divided by two
21:59 - times the length of the base.
22:01 - So actually, I very quickly
added that to the code.
22:04 - Thank you to Simon who
reminded me of this fact.
22:14 - And you can see here, I am now setting
22:16 - the last point c as
the length of the base,
22:21 - which I know by the way is 600.
22:23 - So I could just said 600 here.
22:25 - But I'm getting that
distance just to be sure.
22:27 - The length of the base times
the square root of three
22:29 - divided by two, and that's
where I'm setting that point c.
22:32 - So now here is finally the Koch curve
22:36 - with an actual equilateral triangle.
22:41 - (majestic music)
22:47 - (upbeat music)