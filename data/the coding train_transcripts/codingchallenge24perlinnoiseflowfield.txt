00:00 - hello and welcome to another coding
00:02 - challenge in this coding challenge I'm
00:04 - going to program a visualization that
00:05 - looks just like
00:07 - this that was for the thumbnail and uh
00:10 - I'm going to do it in uh p5js using
00:13 - JavaScript in the browser what's running
00:15 - over here is an example that I made
00:16 - previously in processing which will give
00:18 - you higher performance so at the end of
00:20 - this video perhaps I'll take a look at
00:21 - that very briefly so where I'm not going
00:23 - to start from scratch um this video is
00:26 - really going to be um built on top of
00:28 - this idea of two-dimensional p noise if
00:30 - two-dimensional pein noise is not
00:32 - familiar to you stop now go to the video
00:34 - description and go and find my series
00:37 - about pearing noise and then come back
00:39 - okay hi you're back great okay let's get
00:42 - started so I'm going to start from this
00:44 - particular piece of code
00:47 - which generates this particular output
00:51 - so this is already an example with
00:52 - two-dimensional pearing noise and each P
00:55 - each each pixel gets a grayscale value
00:59 - according to two diens PL noise but I
01:01 - want to do something different what I
01:02 - want to do is in the kind of grid of
01:05 - pixels right this is my very very low
01:08 - resolution grid of pixels instead of
01:10 - having a grayscale value for each pixel
01:13 - so to speak what I want to have is a
01:15 - vector I want to have an arrow pointing
01:18 - in some direction and I want that
01:21 - direction to uh to be a direction set
01:25 - according to pearing noise because
01:27 - ultimately what I'm going to do is I'm
01:28 - just going to like pour a whole lot of
01:30 - particles into this area which known as
01:33 - a flow field this is known as a flow
01:35 - field and pour the particles in and
01:36 - they're going to follow the arrows and
01:38 - we'll see what happens okay so the first
01:40 - thing that I need to do is start
01:41 - revising the code to make vectors
01:43 - instead of pixels so let's take a look
01:45 - about how let's take a look at how that
01:47 - might work so I'm going to work with a
01:49 - very low resolution canvas just 200x 200
01:53 - just to kind of get things kind of
01:55 - started here and one thing that I also
01:58 - need to think about is a core variable
02:00 - here is I need to think about what is
02:02 - the ratio of kind of cell to width so I
02:06 - don't want to have an arrow for every
02:08 - pixel it's not going to be it's going to
02:10 - be unreasonable for me to have 200
02:12 - vectors instead of maybe I want to
02:13 - Vector every 10 pixels or every 20
02:15 - pixels so let's make that a variable
02:17 - called like scale I'm going to call it
02:20 - uh SC short for scale and I'm going to
02:23 - say that's 20 and then what I I what I
02:25 - also need to have is columns and rows so
02:29 - I'm going to have have uh the columns is
02:31 - going to be the width divided by scale
02:33 - and I better floor that floor is
02:35 - something that gets rid of the decimal
02:37 - place and I'm going to say rows is
02:40 - height divided by scale so now what I
02:42 - want to do is I'm not dealing with
02:44 - pixels anymore so I can get rid of load
02:47 - pixels I can get rid of update pixels
02:49 - and in fact I can get rid of all this
02:51 - pixel array stuff but let's just see
02:54 - that things are working for a second so
02:56 - what I want to do is have y now go
02:59 - through all of the rows and have X go
03:01 - through all the
03:03 - columns and what I want to do is draw
03:05 - I'm going to draw a rectangle I'm going
03:07 - to draw a rectangle at x times scale I
03:10 - got to scale up y times scale and the
03:13 - size of that rectangle is scale and I'm
03:16 - just going to give it a random fill for
03:18 - right now and I want to see that I'm at
03:21 - least getting a grid of rectangles so if
03:24 - I run this okay so this is working so
03:27 - this is now going to be my grid now what
03:29 - I've done is I put a grayscale value a
03:31 - random grayscale value in every cell hey
03:33 - why don't we make that a random no a
03:35 - noise value just so just to get started
03:37 - here so let me now change this look I
03:40 - already have this here I already have
03:41 - this noise function why not let's just
03:44 - make that fill based on that noise
03:47 - function and you can see okay so you can
03:50 - see right now that I'm not really
03:52 - because I'm so low resolution that these
03:56 - cells aren't um these cell are kind of
04:00 - like very almost the color is almost
04:02 - identical so one thing I'll do let's
04:04 - just try making the scale
04:06 - 10 you can see let's make the increment
04:08 - a little bit bigger there we go so now
04:11 - we're starting to see something that
04:12 - looks a little bit more like pearlin
04:13 - noise um because and uh and one thing I
04:16 - want to do also just while I'm working
04:18 - on this I kind I think it would be
04:19 - useful to just keep an eye on the frame
04:21 - rate so I'm going to do something a
04:22 - little bit goofy I'm going to uh make a
04:25 - variable called f FR and I'm going to
04:27 - say f FR equals create P so I'm making a
04:30 - paragraph element on the page and then
04:31 - I'm going to say f FR HTML frame
04:35 - rate and I'm going to floor that so this
04:38 - is a P5 function that just gives me back
04:41 - the frame rate I want to just see it as
04:43 - a paragraph element on the page so you
04:45 - can see the frame rate I'm I'm right now
04:47 - everything's fine I'm running really
04:48 - fast like 60 frames per second so okay
04:51 - so this is my grid and I essentially
04:54 - have a grayscale value for every spot on
04:56 - the grid but that's not what I want what
04:58 - I want is a Vector for every spot on the
05:02 - grid okay so one thing I could do is
05:05 - instead of saying fill let's at least
05:08 - right here create that uh create a
05:12 - vector so what I'm going to do is I'm
05:14 - going to say VAR V equals create
05:18 - Vector now actually there's actually a
05:22 - function in
05:24 - P5 where you can create a vector from an
05:27 - angle P5 Vector from angle and I'm going
05:30 - to create a vector from the angle zero
05:33 - um I now uh I now have a vector I've
05:36 - created a vector from an angle and what
05:38 - I want to do actually is instead of
05:40 - drawing a rectangle I'm going to say uh
05:43 - uh stroke 0o I'm going to draw that
05:47 - Vector as a line so I'm going to say a
05:52 - push
05:54 - pop there's a bunch of different ways I
05:55 - could do this but I'm going to rotate by
05:58 - that vector's heading
06:00 - and then I'm going to draw a line from
06:03 - so I'm also I'm going to translate to x
06:08 - times time scale y time scale and then
06:12 - I'm going to draw a line at that
06:15 - spot um that's uh a line oh of of that
06:20 - is sorry from0 0 to scale zero so what
06:23 - am I doing here what I'm doing is I'm
06:25 - saying for every single one of those
06:27 - vectors translate to this
06:30 - spot then draw a line that's just a line
06:33 - like this and then rotate it according
06:35 - to rotate rotate it according to um uh
06:40 - the The Heading of that random Vector
06:41 - the angle so to
06:43 - speak so now if I run this you can see
06:46 - look I have a whole line whole bunch of
06:48 - lines pointing directly across now what
06:51 - if I were to say from angle Pi /
06:55 - 2 now I have a whole lot of lines
06:57 - pointing down what if I were to say Pi /
07:01 - 6 now I have a whole bunch of lines
07:03 - pointing that way we're getting
07:04 - somewhere right you see where I'm
07:05 - getting at because what I can do now is
07:08 - I could say what if I have a random
07:10 - angle between 0 and 2 pi oh okay first
07:14 - of all I should probably clear the
07:18 - background so you can see now this is
07:20 - just a random Vector for every spot in
07:22 - that grid every frame so one way I could
07:25 - stop it from like changing all the time
07:28 - is I could say a random seed 10 so if I
07:31 - reset the random seed you can see this
07:33 - is a whole bunch of random
07:34 - vectors now ultimately what I want to do
07:37 - is show you how to make this field of
07:40 - vectors this flow field with noise
07:42 - values but I could I could come up with
07:44 - other ideas I could use sine waves I
07:47 - could I could get a data input oh I
07:49 - could get like wind data from various
07:51 - geolocations through some kind of like
07:53 - weather API and there's a great project
07:55 - which I've shown in other videos which
07:57 - does that but I'm going to just use pein
07:58 - noise so let's go back and say the angle
08:03 - is the noise value time 2 pi right so
08:07 - when I wanted to get a grayscale value
08:09 - between 0 and 255 I took the noise value
08:12 - time 255 now I want a random angle I
08:14 - want the noise value times 2 pi I don't
08:16 - need the random seed anymore from
08:19 - angle that particular angle and now you
08:22 - can see there we go so now I have this
08:25 - nice flow field essentially of all of
08:27 - these vectors kind of pointing
08:30 - similarly and each time I refresh I'm
08:32 - going to get a slightly different
08:35 - one now one thing you might notice is
08:38 - that I don't actually need to calculate
08:41 - this every time through draw because
08:44 - ultimately
08:46 - um I don't need to calculate this every
08:48 - time through draw because ultimately
08:49 - it's staying the same I could calculate
08:51 - it once in setup and then refer back to
08:53 - it later however I think this might be a
08:56 - good time you and me okay we need to
08:58 - talk
09:00 - meet me over here at this other camera
09:02 - we need to talk actually never mind
09:04 - let's talk over
09:09 - here there is pearly noise I've shown
09:11 - you onedimensional pein noise L I've
09:14 - shown you two dimensional pein nois I
09:17 - have yet to show you threedimensional no
09:18 - no pein nois and in fact pein noise can
09:21 - exist in any n Dimensions but here is an
09:24 - opportunity where we might decide let's
09:26 - do something with three-dimensional pear
09:27 - and noise so
09:30 - the one one dimension is the x axis
09:33 - another dimension is the Y AIS imagine a
09:36 - z Dimension as slices these angles
09:39 - change as slices that I'm just are like
09:42 - coming out of the screen well what if
09:44 - instead of actually building something
09:46 - visually in 3D that we thought of that
09:48 - third dimension as time every frame of
09:51 - Animation what if I were
09:54 - to add as a global variable Z off and
09:58 - set that equal to zero and
10:01 - then I were to say noise X off comma y
10:07 - off comma Z off I've now said give me
10:11 - noise values in three-dimensional space
10:13 - so there's a noise value right here in
10:15 - three-dimensional space it's similar to
10:18 - all the values that surround it and so
10:21 - I'm looking at a slice of noise values
10:23 - then I want to present another slice of
10:25 - noise values then I want to present
10:26 - another slice of noise values so those Z
10:29 - off offet change every time through draw
10:32 - can you hear people laughing and talking
10:34 - in the background I don't know if you
10:36 - can and now whoa it's changing like
10:40 - crazy so I'm moving through time a
10:42 - little bit too quickly so let me
10:45 - move um like quite a bit
10:48 - slower and now let me move even
10:52 - slower so you can see now I have a flow
10:55 - field that's actually changing over time
10:58 - and you could imagine there lots that I
10:59 - could do just with this much but
11:02 - ultimately what I want to do if you
11:04 - recall and we can sort of see this crazy
11:06 - sketch now is like really just like
11:08 - filled over itself a zillion times but
11:10 - what I'm trying to do is
11:14 - recreate this particular
11:17 - visual so what's happening in this
11:19 - particular visual is that particles are
11:22 - being dropped on top of this flow field
11:25 - and following those arrows so this is
11:27 - the first thing that we need to do
11:29 - now I just realized we have a bit of a
11:32 - problem small crisis of conscience here
11:35 - which is that if I want to drop a
11:36 - particle on there I need like a whole
11:38 - like physics engine and to move the
11:40 - particle around and all that and I kind
11:42 - of want to just go and grab now let's
11:45 - make it we can do this really fast this
11:46 - is a coding challenge I'm going to to to
11:49 - add the particle object from scratch
11:51 - here so what I'm going to do is I'm
11:53 - going to make a new
11:55 - file I'm going to call it o particles.js
11:59 - and I'm going to use a JavaScript
12:01 - Constructor
12:03 - function and my particle needs to have a
12:08 - position which I'm going to just make it
12:10 - 0 0 it needs to have a velocity which is
12:13 - going to be an uh 0 vector and it needs
12:16 - to have an
12:19 - acceleration um I'm going to uh write an
12:21 - update
12:24 - function where the uh
12:27 - position gets added the
12:31 - velocity and the velocity the
12:33 - acceleration gets added to the position
12:35 - if you're confused about how these
12:36 - physics engine works go and watch all my
12:38 - nature of code videos on physics engines
12:41 - and then I'm also going to uh reset the
12:44 - acceleration to Zero by multiplying the
12:46 - vector by zero then I'm going to write
12:49 - an apply Force function which is a
12:52 - function that receives a force and what
12:54 - do I want to do with that Force I just
12:56 - want to add it to the acceleration
13:00 - so this is actually all I need well this
13:02 - is so easy and then I just need a dis a
13:05 - show function whoops that's I wrote that
13:08 - incorrectly equals function then I want
13:10 - to show function which what does it Dre
13:13 - do it draws the particle so what should
13:15 - I draw it as let's just draw it as a
13:17 - point for right now we're going to say
13:18 - stroke zero um uh
13:22 - Point this.position dox this.position
13:26 - doy so this is nice I have this really
13:30 - simple particle object it has position
13:32 - velocity acceleration it has a little
13:33 - update method to update its velocity
13:35 - based on acceleration to update its
13:37 - position based on the velocity and then
13:38 - as an apply Force function to accumulate
13:40 - any forces into the acceleration so now
13:43 - I just need to make sure that my uh
13:47 - index.html file references that new
13:50 - particle. Js file and let's just very
13:53 - very quickly make a particle
13:56 - array and in the particle array
14:00 - I'm going to say particle index zero
14:03 - equals a new particle
14:07 - uh I've lost my train of thought here a
14:09 - new
14:11 - particle um oh yeah new particle and
14:14 - then I want to say uh here
14:18 - particle index Z do uh show sorry and
14:25 - Dot uh update and let's let just see uh
14:30 - okay what's missing uh couldn't find
14:32 - particle JS because I typed that in
14:34 - wrong I said particles.js whereas the
14:37 - file is called particle d as and now
14:40 - particle is not
14:42 - defined
14:44 - what oh
14:46 - particles and this is also very
14:49 - confusing here the array is called
14:53 - particles there we go so you can see
14:55 - there's that particle up there in the
14:56 - corner so I have one single particle
14:58 - that's good now what I want to do is add
15:00 - a whole bunch of
15:02 - particles uh so um let me make this a
15:07 - for
15:10 - Loop uh it's less than 100 let's add 100
15:16 - particles and just say particles index I
15:20 - and then
15:22 - let's write another for Loop uh
15:25 - iterating over the entire length of the
15:27 - array
15:31 - and uh having
15:33 - each particle okay so now uh particle
15:38 - prob I typed something wrong
15:41 - particles okay there should be 100
15:43 - particles there let's make sure all the
15:45 - particles are
15:46 - everywhere let's um let's give the
15:49 - particles uh random positions to
15:56 - start so you can see there's 100
15:58 - particles around
15:59 - randomly and then uh just to make sure
16:02 - they're like doing something let's say p
16:05 - v uh sorry P5 vector. random so this
16:09 - gives them all a random
16:11 - velocity okay so the particles are
16:13 - moving around with a random velocity
16:15 - they're doing something okay one thing I
16:16 - need to do I just realized is that I
16:17 - need to have the particles wrap around
16:19 - when they get to an edge they should
16:20 - come back on the screen so I need let me
16:22 - add that really quickly so I'm just
16:24 - going to add a function called
16:26 - edges and I'm going to say uh if
16:32 - this.x is greater than wi this.p do do
16:37 - dox equals zero and I'm going to do this
16:39 - in a kind of Shandy
16:41 - way and I'm going to say uh less than
16:45 - zero should equal
16:47 - width and then uh I want this again but
16:51 - I want to do it with Y and I want this
16:54 - to be height and I want to do this then
16:56 - needs to be Y and this should also
16:59 - height so I now have a new edges
17:01 - function and I can quickly also
17:03 - say you know wrap them around the edges
17:06 - here so now we should see I have a whole
17:09 - lot of particles moving around forever
17:11 - and ever and ever and let's not render
17:14 - the uh vectors for a second okay so now
17:17 - I have a window with a lot of particles
17:20 - moving around but I want those particles
17:23 - now to be affected by the actual vectors
17:29 - in the flow field itself so how do I do
17:32 - that okay this is the this is the Crux
17:35 - of this project so first thing I want to
17:38 - do is I want to actually say I want to
17:41 - give these like quite a bit of alpha so
17:43 - let's see if um so you can see now you
17:46 - can see it's slowing down quite a bit
17:48 - but I'm drawing the vectors but you can
17:50 - see the particles are not moving
17:52 - anywhere according to the vectors I also
17:54 - just while we get started I'm going to
17:56 - take off Z offset to see
17:59 - now this oh whoa did I not hit
18:02 - save yeah so now I want to make sure
18:05 - this works with a fixed flow field and
18:08 - with the particles I also just so we see
18:10 - them a little bit better I'm going to
18:11 - say stroke weight four to make them a
18:14 - little bit thicker okay oh boy but I
18:17 - don't want my vectors to have that
18:18 - stroke weight so I'm going to say stroke
18:20 - weight
18:22 - one okay so now we can see the particles
18:25 - moving and the flow field kind of behind
18:27 - it so what what I want to do is say for
18:30 - every particle's location look up the
18:32 - vector that's nearest to it and then
18:34 - apply that as a
18:38 - force so here's the
18:40 - thing the the all of the vectors are
18:43 - calculated up here so what I want to do
18:46 - is actually store all of those in an
18:48 - array so I'm going to make a variable
18:50 - called flow field which is an
18:54 - array and that that
18:57 - array should have as many spots as there
19:00 - are columns and rows so now what I want
19:03 - to do is say flow field equals uh a new
19:09 - array H this is a weird thing to do in
19:11 - JavaScript but I'll do it anyway you
19:13 - know you can actually preet the size of
19:15 - an array by saying new array and maybe
19:18 - that was a bit unnecessary um but I'm
19:21 - going to do that
19:23 - anyway and then uh and then what I'm
19:26 - going to do here is I actually already
19:29 - have perfectly the calculation this was
19:32 - left over for my pixel example this
19:34 - should be columns and this should be not
19:39 - be multiplied by four anymore because I
19:40 - don't have RGB value so I have a single
19:43 - single value I can now say flow field
19:46 - index index
19:49 - equals that particular Vector so now all
19:52 - of these vectors that I'm calculating
19:55 - are now stored in that particular array
19:59 - so now what I need to do down here is
20:02 - say I'm going to say
20:04 - particles index
20:07 - I and I'm going to write a function
20:09 - called follow and I'm going to pass in
20:11 - that flow field so what I'm doing is I'm
20:13 - saying hey you particles here's an array
20:15 - of vectors each particle is responsible
20:19 - for finding the
20:21 - appropriate Vector in that array to look
20:23 - up so for example just to come back to
20:26 - this
20:27 - diagram I'm a particle right um let me
20:30 - get my actually it's fine use I'm a
20:32 - particle right here my position might be
20:35 - like 300 by 200 and maybe these are 100
20:39 - by 200 I need to First divide by scale
20:43 - to look up the appropriate index into
20:45 - that array find the vector and then
20:47 - apply it as a force let's see how that
20:50 - works so if I go to the particle
20:54 - function I'm going to write a particle
20:56 - uh object the Constructor function I'm
20:58 - going to write right a function called
20:59 - follow equals a function uh I'm going to
21:03 - just call this
21:04 - vectors and now what I'm going to do is
21:06 - I'm going to say uh x
21:10 - equals
21:11 - floor this position. x ID
21:17 - scale so I need to take remember its X
21:21 - position is its actual place on the
21:22 - screen and but it's corresponding
21:25 - position in the grid I have to scale
21:27 - down by that scale variable
21:30 - its y value is do that with
21:33 - Y then the index is X is x + y * columns
21:40 - this is that formula for how you take a
21:42 - two-dimensional value into a
21:44 - onedimensional array and I cover that in
21:46 - some other videos which I'll try to link
21:47 - to in this one and
21:50 - then now I should say the force is that
21:55 - array of vectors at that index
21:59 - and I should be able to say this do
22:00 - apply
22:01 - force that
22:04 - Force so now essentially what I'm doing
22:06 - is I'm saying based on my me I'm a
22:09 - particle based on my XY position scale
22:13 - myself to a grid of column and rows then
22:15 - look up the corresponding Vector in that
22:17 - one-dimensional array and then take that
22:19 - vector and apply it as a force so let's
22:22 - now actually have the velocities start
22:24 - at
22:25 - zero and let's see if this works and I'm
22:28 - sure I missed something but let's give
22:29 - it a try oh okay that's kind of
22:34 - working but you can see excuse me that
22:37 - they're spiring out of control in terms
22:39 - of speed so one thing I should think
22:41 - about is okay you know I should think
22:44 - about uh one thing I should really think
22:47 - about sorry is what is what is the
22:50 - magnitude of these vectors so maybe
22:52 - these vectors I need to set their
22:55 - magnitude to something much smaller like
22:57 - 0.1 they shouldn't really be that strong
22:59 - like a full um a full uh uh unit full
23:05 - and you can see that now but you can see
23:07 - they're still like really speeding up
23:08 - over time that's because this
23:10 - acceleration is just building up and
23:12 - pushing and pushing there's no limits to
23:14 - how fast these particular these
23:16 - particular particles can go so I think
23:18 - something I could do here which would
23:20 - make sense would be to have a like a
23:23 - maximum speed
23:24 - variable and set that equal to like four
23:27 - and then in the update function I could
23:29 - just say this do velocity. limit this do
23:33 - maximum speed so now I'm just saying the
23:35 - particles actually you know no matter
23:37 - how much you start pushing them they do
23:39 - have a ultimate maximum speed and now we
23:41 - should see that the particles are
23:43 - following this flow
23:46 - field and you know maybe they're not
23:49 - following it you know you know and I
23:51 - could kind of control what that now I
23:53 - could go back and I could say well
23:54 - actually maybe I want the magnitude to
23:56 - be five
23:58 - and you can see when the magnitude is
24:00 - five they're going to be lock step
24:02 - exactly with the flow field so you can
24:04 - see what the magnitude of that force is
24:06 - really controls how exact they are in
24:08 - terms of following this path and by the
24:10 - way let's add the Z offset back in so
24:12 - those vectors change over time and you
24:14 - can see now what we're kind of
24:16 - getting we've got these particles
24:18 - following a flow field but that flow
24:20 - field is changing over time reasonably
24:22 - I've still got 30 frames per second I'm
24:24 - going to do a couple more things one is
24:26 - let's add some more particles
24:29 - let's have Z change a little bit more
24:33 - slowly uh something like
24:36 - this and let's see how we're doing so
24:39 - now I have a lot more particles um but
24:41 - it is running rather slow so one thing I
24:43 - can do here hopefully to get it to run
24:45 - quite a bit faster is I can actually
24:47 - just not bother to
24:50 - draw the vectors the data for the
24:52 - vectors is still calculated and exists
24:55 - but I could still I could skip drawing
24:56 - them
24:58 - and you can see now I'm getting a nice
25:00 - 60 frames per second it's really getting
25:01 - stuck at the top and the bottom um that
25:05 - ve that force is really quite strong so
25:08 - I'm trying to oh I set the magnitude to
25:11 - five let's set it to like
25:15 - one uh and actually I'm going to set it
25:17 - to uh
25:19 - 0.05 anyway you could play with this
25:21 - your I could also one thing that I could
25:23 - really think about is well do I want the
25:25 - full maybe I want the vectors actually
25:27 - to be to have more variety to them
25:29 - they're all it's generally always
25:30 - pointing to the left because remember
25:32 - I'm picking random values between zero
25:34 - and pi and they cluster around the
25:35 - middle so I'm not picking random so like
25:38 - I could say times 2 pi *
25:42 - 4 and now I'm going to get a lot more
25:44 - sort of like noisiness but there's a lot
25:47 - of different ways and it's all moving
25:49 - like kind of too fast and I I should
25:51 - create some sliders and I can kind of
25:53 - like really control this stuff a little
25:56 - bit
25:59 - more strongly so you can see this is
26:00 - kind this is more what I was trying to
26:01 - get so I have a sort of stronger flow
26:03 - field but there's a lot more variety in
26:05 - terms of where the particles go now I
26:06 - could add some separation so that they
26:08 - don't get on top of each other as much
26:09 - but you get the idea here now what's
26:12 - this I basically am all the way done I
26:14 - now have this flow field where I can
26:16 - drop particles in it and I could you
26:18 - know I could sort of push the
26:20 - performance here and say like well what
26:21 - if I try to
26:23 - drop uh you know 500 particles in you
26:27 - can see it's running a little bit slower
26:28 - but I've got more stuff happening but
26:30 - what if instead of drawing the particles
26:32 - as dots what if I drew them what if I
26:35 - allowed them to blend their Alpha to be
26:37 - sort of like Alpha Blended across the
26:39 - screen for a while so let me um to kind
26:42 - of create that visualization so really
26:44 - now one thing if if I were you I would
26:47 - stop this video and just go to this show
26:49 - function and play make rainbow colors
26:52 - add Alpha values but let me do a couple
26:54 - things to try to get that effect so one
26:56 - thing I'm going to return the stroke
26:57 - weight back to one and I'm going to give
27:00 - it quite a bit of Alpha and in the
27:02 - sketch I'm also going to draw the
27:04 - background now only once in setup so
27:06 - let's see what we get here with this so
27:09 - now you can start to see what I'm
27:11 - getting here I'm getting this kind of
27:13 - nice Alpha blendy pattern now if I were
27:15 - to zoom into this you can see there's
27:17 - actually like the particles move faster
27:19 - than one pixel per frame so they're
27:21 - actually skipping pixels so something
27:23 - that could actually be quite useful here
27:26 - would be to have each particle
27:28 - store at the very least a
27:32 - previous position which I'm going to say
27:35 - is uh a to start with is a copy of its
27:38 - original
27:39 - position so it when it starts it has its
27:42 - current position and its previous
27:44 - position and then every time it moves
27:48 - right after update it's actually let's
27:51 - do this every time after we so what I
27:52 - want to do is actually not draw a point
27:55 - but I want to draw a line from its
27:58 - current
28:00 - position and I know that camera just
28:02 - went off because that means a half an
28:03 - hour has
28:05 - passed uh to its previous
28:13 - position uh this. previous position doy
28:18 - now if I whoops ah I'm in the wrong
28:22 - place if I run this again okay there's a
28:24 - couple issues number one is oh my
28:26 - goodness what is going on there's some
28:28 - crazy extra lines so we have a problem
28:31 - right if I'm always taking a particle
28:33 - and drawing a line between its that its
28:35 - position it's previous position when it
28:37 - leaves its previous position is here its
28:40 - new position is here suddenly this line
28:42 - goes all the way across so I want to add
28:44 - an extra check in here just to correct
28:46 - that there might be like a better way of
28:47 - doing this and actually what I could do
28:50 - is I could just update it in this edges
28:52 - function uh which actually let me do
28:54 - that this is different than how I did in
28:57 - my other example
28:58 - but what I'm going to do in this edges
29:00 - function
29:03 - is uh I have to add right if any of
29:07 - these are
29:09 - true what I need to do is say what I
29:13 - want to say
29:16 - uh this do
29:18 - previous uh previous position dox equals
29:21 - this.
29:25 - positionx so I'm going to I'm going to
29:27 - write a function
29:28 - this. update previous is a function
29:32 - which just does this algorithm in
29:36 - it oops X
29:39 - so so anytime it hits the
29:44 - edge
29:48 - uh I'm going to just update the
29:52 - previous so this is like an extra
29:56 - time and I need to make sure sure I do
29:59 - this then right
30:01 - before I draw
30:04 - it so I actually want to have edges
30:06 - right before show so it gets updated and
30:10 - then uh what I so this should correct
30:12 - that
30:15 - problem so now you can see oh look at
30:19 - that okay so it's actually kind it's
30:20 - doing something interesting I never
30:22 - update the previous position so it's
30:24 - actually drawing a line from where it
30:25 - started to its current position so let
30:27 - me actually add the most crucial part
30:29 - here which is that I also want to every
30:32 - time after I draw it to say this. update
30:38 - previous so after I draw it the previous
30:43 - position comes the current position and
30:45 - now you can see what this is doing and
30:47 - I'm getting nice continuous lines I
30:50 - don't actually see those continuous
30:51 - lines what did I miss
30:54 - here uh hold on I time out I'm going to
30:58 - debug okay I'm back I I didn't actually
31:01 - need to debug anything it is working so
31:03 - you can see I've basically gotten the
31:05 - gist by programming from scratch of this
31:09 - particular example now there's a bunch a
31:12 - few things that are different number one
31:14 - is in this larger version one is I I've
31:16 - got kind of higher resolution going on
31:18 - one thing that I think you probably
31:20 - would notice is this is running
31:22 - reasonably at 30 frames per second but
31:24 - if I were to go back and try to add you
31:27 - know to make this run over like a much
31:30 - larger canvas and have something like
31:32 - 2500
31:39 - particles you're going to see that right
31:41 - currently it's running at like four or
31:43 - five frames per second whereas this
31:45 - processing version which I will pull up
31:48 - right
31:50 - now this processing has 10,000
31:54 - particles and it's for whatever reason
31:57 - it's 1 1200 by 8800 now let's look at I
32:00 - let's and actually I'm going to render
32:02 - this with uh in the p2d renderer which
32:05 - uses uh open gel Hardware acceleration
32:07 - I'm going to print the frame rate just
32:09 - to the console and take a look at
32:18 - that come alive come alive processing so
32:21 - we can see that this is actually running
32:24 - over 50 frames per second and once again
32:27 - again let me point out there are 10,000
32:30 - particles and I'm at kind of high
32:31 - resolution whereas here I have you know
32:35 - only 1,500 and not as high resolution
32:37 - and it's running really really slow so
32:39 - what I would need to do to like pull the
32:41 - most performance out of the web browser
32:43 - would be to um probably render this
32:45 - somehow with webgl in a kind of Hardware
32:47 - accelerated way which maybe I'll
32:49 - continue and look at at some point but
32:50 - hopefully this video gives you the basic
32:52 - idea and um what I would love to see and
32:56 - I'm just going to let's you know oh i'
32:58 - love to see you do is first of all make
32:59 - this like rainbow colored try playing
33:01 - with the various parameters try
33:03 - rendering it a different way see what
33:04 - kind of quality you can get can you make
33:06 - you know large scale prints out of it go
33:08 - and look at the processing version
33:09 - there's a variety of things um that you
33:11 - could look at and try uh to expand upon
33:14 - this maybe you can make a bunch of
33:15 - Sliders to change different parameters
33:17 - and that sort of thing so I hope you
33:18 - enjoyed this particular coding challenge
33:20 - it was a little bit long a little bit
33:21 - scattered if you liked it uh like the
33:25 - video say it in the comments uh let me
33:27 - know on Twitter at shiffman and I look
33:28 - forward to seeing you in another coding
33:30 - challenge soon enough thanks for
33:31 - watching bye