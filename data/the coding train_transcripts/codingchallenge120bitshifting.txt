00:00 - (train whistling)
00:01 - - Hello and welcome to coding
challenge bit shifting.
00:04 - So, this is the second part, sort of,
00:07 - of this coding challenge
series about binary numbers
00:10 - that all came from me implementing this
00:15 - in the seven segment display
video coding challenge
00:18 - and then everybody asking,
"What was that that you did?
00:20 - "This shifting and masking
makes no sense to me."
00:22 - So, what I did in the previous video,
00:24 - if you actually managed
to watch that video,
00:27 - was I created this little interactive
00:29 - binary to decimal converter system.
00:33 - So, this is a single byte with eight bits.
00:36 - Every bit being on, I don't know,
00:37 - maybe it should be white if it's on,
00:39 - black if it's off, the color, whatever,
00:41 - but black in this case means it's on,
00:44 - and so you can see here, if I toggle
00:47 - all of it off, I have a zero, this is one,
00:51 - this is two, this is three, this is four,
00:56 - so I can just toggle these bits on and off
00:59 - and get the decimal
representation of that number.
01:02 - Okay, so what do I want to do now?
01:03 - What I want to do now is
add bit shifting to this.
01:07 - Well, what is bit shifting and
01:09 - why would you ever want to do it?
01:10 - Well, I know what it is,
why would you want to do it?
01:14 - Well, I needed to do it with
my seven segment challenge,
01:18 - so maybe that's the reason
why you'd want to do it.
01:20 - But let's, okay, let's say
for the sake of argument
01:22 - that we have the number 01011010.
01:29 - So, first of all, I need to
convert this into decimal,
01:32 - just to, I mean, I don't
need to to do bit shifting,
01:34 - but just to sort of think about it.
01:36 - So, let's think about that.
01:37 - This is one, so this is
two, plus eight, plus 16,
01:44 - plus 64, so that's 80 plus 10 gives 90.
01:50 - So, this number is 90.
01:52 - Where's my eraser?
01:53 - Okay, so that's 90.
01:56 - Sorry, ah!
01:58 - So, what is bit shifting?
02:00 - So, bit shifting, when
you take any number,
02:03 - like the number 90, you
can ask for the computer
02:07 - to think about it in binary,
which it's already doing!
02:10 - That's actually what it's doing,
and shift the bits around.
02:14 - So, I could say, shift to the right,
02:17 - or I could say shift to the left,
02:19 - and I could say shift by a certain amount.
02:21 - So let's say I just say
shift to the right by one,
02:25 - so this is bit shifting,
and what that actually does
02:28 - is it shifts all the bits over.
02:30 - So, this is a zero, this is a zero,
02:33 - this shifts to here, that's a one,
02:35 - that's a zero, one, one,
that's a zero, this is a one.
02:38 - Now, interestingly enough, I could tell
02:40 - you that this is the number 45.
02:43 - I hope it's the number 45, why?
02:46 - This is what's really interesting.
02:48 - Shifting the bits over by one is actually
02:50 - the same operation as dividing by two.
02:52 - Think about the powers of two
and how binary numbers work.
02:55 - Shifting to the other way,
02:56 - to the left, is multiplying by two.
02:59 - Look at this, let's be sure about this.
03:01 - This is one, two, four, eight, 16, 32.
03:07 - So, 40 plus five, 45.
03:12 - (ding)
03:13 - I was right!
03:14 - So, this is what bit
shifting basically does.
03:18 - So, in theory, does, when
you say 90 divided by two,
03:22 - does it shift the bits?
03:23 - I don't know, maybe, but this is actually,
03:25 - I've heard, I think this is right,
03:27 - this is a faster way to divide by two.
03:29 - Of course, you can only
do it with integers,
03:30 - and how fully your point numbers
03:32 - are represented as bits is
a whole other discussion,
03:34 - but now, what we can do
is let's add this feature
03:38 - to our code, and by the way, we can
03:41 - shift by more than one at a time.
03:43 - I can shift by four bits,
et cetera, but, alright.
03:47 - And you might be thinking to yourself,
03:49 - I don't get it, why is this one a zero,
03:52 - like, wouldn't there be some
bit over here to shift in?
03:55 - Well, when you apply bit shifting,
03:57 - you can imagine that the number 90,
03:59 - if you represent it in two bytes,
04:01 - all of these would be zeroes,
so you can always assume
04:04 - the thing to the right is a zero,
04:06 - and whatever is here is shifted over
04:08 - and basically gets removed, so by the way,
04:10 - if you tried to shift it again
04:11 - and divide this, we would
get, what would we get?
04:14 - We would get the number 22.
04:15 - We wouldn't get 22 1/2, because we get
04:18 - the integer value of dividing that by two,
04:21 - which takes off the decimal value, okay.
04:23 - Let's add that, so let's go over here
04:25 - and let's add a button.
04:29 - Let's add a shift b button, and let's say,
04:34 - and I'm just using shiftButton
equals createButton
04:39 - and I'll put this in
the button, so now it's,
04:44 - oh, it's so tiny, that's fine,
04:46 - so this is going to be my button,
04:47 - whenever I click it, I'm going
04:49 - to shift the bits to the right.
04:51 - How am I going to do this, hmm?
04:53 - Function, so let's say,
shiftButton shiftBits,
05:05 - so I'm going to write a
function called shiftBits.
05:11 - Cue all of the jokes about
me being Daniel Shift-man
05:15 - man, Shiffman, okay,
what function, with a c,
05:20 - and now, is not a function, shiftBits,
05:25 - shiftButton, oh, shiftButton.mousePressed,
05:28 - this is the p5 dom library that I'm able
05:31 - to attach a function as an event
05:32 - to when I click the mouse on this button.
05:35 - So, now, what I'm going to do is, okay.
05:37 - Well, here's the, the funny thing is,
05:40 - I was doing this to show
you about bit shifting.
05:42 - Oh, I just have to take
that, oh, interesting.
05:45 - Oh, look at this!
05:46 - Think about the, ah--
05:47 - (ding)
05:49 - This is really interesting so,
05:50 - there's a couple ways I
could approach this problem.
05:52 - If you watched the previous video,
05:54 - all of these are like a bit object,
05:56 - and I can, I've kind of kept information
05:59 - about like, its x and y, its diameter,
06:01 - and its state, and I'm rendering it,
06:03 - but what I'm actually going to do here
06:06 - is I can take the decimal version, right,
06:11 - so, this is a little bit of code here
06:16 - I'm going to put into a function,
06:18 - which is just going to be
a function like getDecimal,
06:24 - so whatever the state
is, I'm going to get--
06:31 - Oh, no, that's, sorry getBinaryString,
06:36 - this is going to return the binary string
06:39 - of whatever the
visualization is reporting,
06:43 - so, I'm going to say, getBinaryString,
06:49 - so now I'm back to what
I had before, right,
06:52 - but now, in this shiftBits,
I can do exactly this again,
06:59 - so, I want to get the binary string,
07:02 - then I want to get the
number, the value equals get,
07:11 - equals binaryToDecimal, of that number,
07:16 - then, I want to say val
equals val, shift by one,
07:20 - so I want to shift the bits over by one,
07:23 - but now I'm going to have to
convert that back to binary.
07:27 - I don't actually have a
decimal to binary function.
07:32 - What I want to say now is,
num equals decimalToBinary,
07:39 - right, of a value, so
this is what I want to do.
07:43 - I want to be able to, now,
any time I click this,
07:48 - get the conversion back to decimal.
07:50 - Oh, I have to write a new function!
07:52 - So this was binaryToDecimal,
now I need to write a function,
07:57 - I knew I would have to do this,
07:58 - I left this as an exercise,
but I'm going to need it now.
08:01 - DecimalToBinary, now again, I could get
08:05 - JavaScript to do this for
me natively with toString.
08:08 - So, for example, if I just
open up the console here,
08:11 - and I were to say let num equals 90,
08:15 - I could say num toString
two, (laughs) I'm done.
08:20 - Maybe I'll just do this, it would be
08:22 - really nice to just do this,
but I'm going to do it myself.
08:26 - So, what I'm going to do is I need to get,
08:28 - now I get a value in, I'm
using these variable names
08:32 - in terrible ways, I need to do
08:33 - a refactoring of this with
better variable names,
08:35 - and what I'm going to
do is I, and you know
08:38 - I always do this as eight bits,
08:40 - so this is a bit of a constraint,
08:41 - I don't have to be some
super generic here.
08:44 - I'm going to say int
i equals, no, not int,
08:47 - let i equal zero, i is less
than eight, i plus plus,
08:55 - and now, what do I want to
do, I need to divide it by,
08:59 - so here's the thing, how
do you get this to work?
09:01 - I'm pretty sure this is how you do it.
09:03 - Let's say I'm going to take the value 90
09:09 - and try to turn that into binary,
09:12 - so my theory here is that I'm going
09:14 - to divide by 128, divide
by 64, divide by 32,
09:23 - divide by 16, divide by
eight, divide by four,
09:30 - and you can see what I'm doing here.
09:31 - I am taking the same thing
I did, powers of two,
09:35 - but I'm going to use
the division operator.
09:37 - What do I get when I
say 90 divided by 128?
09:41 - I get a zero.
09:42 - 90 divided by 64, I get a
one remainder something,
09:49 - 90 divided by 32, oh, here's the thing,
09:53 - ah, so, what's the remainder?
09:56 - Oh, okay, so this is where I need to,
09:58 - the remainder here is,
sorry, 64, 74, 84, 26!
10:06 - So, this bit is going to be a one,
10:08 - and now I take that, I
don't do 90 divided by 32.
10:11 - Ah, what am I thinking, here?
10:13 - This is not what I meant to
do, ah, something fell over.
10:17 - Let's get rid of this 90 here,
10:20 - so this is zero remainder
90, basically, right?
10:24 - Zero remainder 90, so that
remainder comes over here.
10:27 - Now, it's one remainder 26,
that 26 comes over here.
10:32 - 26 divided by 32 is zero, remainder 26,
10:35 - 26 divided by 16 is one,
remainder 10, right,
10:41 - 10 divided by eight is one remainder two,
10:43 - so you can see where I'm going, here.
10:44 - So, I should be able to do this now.
10:46 - Come back over here to the code.
10:50 - It's weird how much fun this is for me.
10:53 - So, what do I need to do now, okay,
10:55 - so, I'm starting with the number,
10:56 - and I'm going to say the binary bits is a,
11:03 - I'm going to use a string,
and I'm going to go from
11:07 - two to the seventh, i equals
zero, i is greater than,
11:11 - equal, i starts at seven,
i goes down to zero,
11:14 - i minus minus, and I'm going
to need this remainder value.
11:19 - So, the first thing that I want to do
11:21 - is called a divisor, equals
power of two to the i,
11:29 - then what I want to do is, I
need to do integer division.
11:34 - So, I want to say number,
I want to say the answer,
11:40 - or the value, the bitValue, equals number
11:46 - divided by divisor,
number divided by divisor,
11:53 - here's the thing, I'm going to use floor.
11:55 - So, JavaScript natively
is going to do everything
11:59 - as floating point, if I were like
12:00 - the Java programming language,
it would just give me,
12:02 - without the remainder,
so then, I'm going to say
12:06 - the remainder equals the, equals the--
12:15 - I forgot something!
12:16 - I have a whole video,
actually, Golan Levin
12:17 - came and did a guest tutorial
about a particular operation
12:20 - called modulus, represented, I think
12:23 - the operation is called modulo,
12:25 - and maybe the symbol is modulus,
12:27 - I can never remember
this, someone's going to,
12:29 - there's going to be a lot of comments
12:30 - telling me the correct way to do this,
12:31 - I can just see 'em already, but this
12:33 - gives you the remainder
of the division operation.
12:36 - So, what I can do here,
and this, by the way,
12:40 - this should be remainder, and remainder
12:43 - should be num, and then the remainder
12:45 - is the remainder modulus
divisor, right, and now,
12:56 - oh, and this, and the bit value
12:58 - is bits plus equal bitValue,
oh, is this possibly right?
13:04 - And then, return bits, where did I--
13:11 - Wait, let's just see if
this function even works.
13:15 - So, one thing I could do, actually,
13:16 - I'm just going to go,
the p5 web editor console
13:18 - isn't interactive, but I can go here
13:21 - to the canvas frame and I can say,
13:25 - right, what was the name of that function?
13:27 - decimalToBinary, and if I have
a decimal number like 90--
13:35 - (gasping)
13:38 - I think that's right, it works!
13:41 - Okay, 255, yeah, okay,
great, so that works.
13:47 - So now, when I'm shifting,
right, what was I doing?
13:52 - I was shifting, then
I get decimalToBinary,
13:56 - and then, what do I need to do?
13:58 - Update, this is really, in draw, right,
14:02 - there's a draw function somewhere,
14:04 - this is like, update the
states, what, oh no, oh, no.
14:11 - Where do I do that?
14:13 - Oh, I did that here, so I
need to update all the states.
14:16 - So, oh, look, I have a setState
function, how convenient.
14:19 - So I also now, once I do
that, I need to go through
14:22 - and set the state to num charAt i, and,
14:32 - and this probably has to be a number,
14:34 - oh, but I mean, I have that in setState.
14:38 - Oh, it's Boolean, right, I forgot
14:39 - I had this whole crazy
thing to take the string,
14:42 - which is zero, one, turn it into a number,
14:43 - turn it into a Boolean, perfect.
14:45 - So, it does that already,
so now I can shift, oh, boy.
14:49 - Divide by two, divide
by two, look at this!
14:50 - Oh, my goodness, so I can now bit shift,
14:54 - oh, this is, let's go back to 90, right?
14:58 - This is 90, whoops, 90!
15:01 - Okay, ready, here we go, this is going
15:04 - to be an exciting moment, no,
no, ah, don't click there!
15:06 - No, get back to 90, there we go.
15:11 - (drum roll)
15:22 - (fanfare)
15:22 - So, we now have interactive bit shifting.
15:24 - Now, you, the viewer of this, you probably
15:27 - want to add shifting the other way.
15:29 - That wouldn't be too hard to add,
15:30 - I just add another button,
shift the other way,
15:32 - maybe I want to actually
have, like, a slider,
15:34 - shift by a certain number of bits,
15:35 - maybe I don't want to
limit myself to eight.
15:37 - I want to have two bytes displayed,
15:40 - but there's all sorts of possibilities now
15:42 - in terms of how I could do bit shifting.
15:44 - Oh, I got to do bit masking, this
15:45 - is going to be another video, here.
15:48 - Okay, ah, but there's a
couple things I want to--
15:51 - I know, everybody's going crazy
15:52 - that I have black as on, let's fix this.
15:57 - Let's make it more clear so I don't
16:01 - leave everybody in such
a traumatized state.
16:05 - So, I'm going to make the background 51,
16:09 - and then I'm going to, in fill,
16:14 - where I'm drawing it, I am going to,
16:21 - and let's use a ternary operator.
16:24 - I'm comfortable with it, now.
16:26 - So I'm going to say fill, this.state,
16:30 - if this.state is on, the fill
is 255, or if it's off, zero.
16:36 - There we go.
16:38 - So, this is, they're
all off, now they're on.
16:43 - It looks weird to me.
16:45 - Oh, background 51 is like
the same as the actual,
16:48 - anyway, and I can shift
now, ah, it's great.
16:51 - Yeah, that looks better,
right, I'm shifting down.
16:55 - Oh, okay, I forgot about you, the viewer.
16:58 - Alright, so, I don't know, thrill me
17:01 - with your weird variations on this.
17:08 - I look forward to it, I do need
17:09 - to do something about bit masking,
17:11 - which I would do an and or an or,
17:14 - and Simon has been telling me,
17:18 - breaking news in the
chat over and over again,
17:22 - I can also do xor, so you can also
17:24 - do xor as a bit wise operation.
17:27 - So, thanks for watching this challenge,
17:29 - and I look forward to
seeing what you make.
17:32 - Share with me, stuff in the comments,
17:34 - all your corrections and complaints
17:36 - and happy thoughts or whatever,
17:38 - and I'll see you again in
another video, goodbye!
17:42 - (energetic music)