00:04 - Hi, you came back, it's very kind of you
00:07 - So, we're ready now to take a
look at Processing itself
00:09 - and see if we can take some of this
knowledge and apply it
00:12 - in Processing itself, write some code,
draw some pictures to the screen
00:19 - This is what I want this video to really cover,
to get you comfortable to make sure
00:24 - not only to have the basic understanding of
the coordinate system
00:27 - and how to write some functions that
will draw to that
00:31 - that to a window, but also how
the Processing software environment
00:36 - actually works as well
00:37 - So, if we walk over here, this is the
Processing website
00:41 - Processing.org
I will include a link, of course, below
00:45 - to this site, this is where
you can click here to download Processing
00:48 - Processing is an application just
like anything else
00:51 - you can download it, install it, and run it,
i'm not gonna go through those steps right now in this video
00:57 - The only piece of information that I'm assuming
01:00 - knowledge of which is that, just a knowledge of
01:03 - how to install software on your computer
01:05 - So what, you know, if I forgot something,
you know, call, write, and send your complete
01:10 - letters to me
01:12 - Ok, so once you've downloaded
and installed Processing and run it
01:15 - you're going to get a nice little
window like this
01:18 - So, Processing is, it's many things
in a way it's a programming language
01:23 - The truth of the matter is that programming
language writing in which we talk about
01:27 - is the Java programming language
01:29 - But Processing has a whole set of functions
01:32 - and things that have been added
01:34 - that are going to live to serve
easily draw to the screen as well as
01:36 - it stripped away some of the obnoxious
01:40 - You know, I don't like to insult Java
01:42 - I actually realy love Java even though that makes me
just about the least cool person in the world
01:46 - But it's taking away a lot of the
stuff that makes it uncomfortable to
01:51 - begin with Java and make things simpler
01:53 - So it is a programming language,
realy the language you writing is Java
01:57 - it's certainly an environment
01:58 - this is the environment that you're
going to type in "Hello, I love Processing!"
02:02 - This could theoretically be a Processing
program, if we read it
02:06 - we're gonna get some sort of errors like
I have no idea what that means
02:09 - But it's an environment, this is the place
where you can type your code and execute your code
02:14 - which is one of the wonderful
things about Processing
02:16 - because you don't have to figure out which
text editor should I using and how do I compile
02:19 - and where I should go to view it
and where I debug it
02:22 - everything is here in Processing itself
02:26 - The other thing is really it's a community
So we go back to this website
02:29 - there are examples, there's a forum, there's
02:32 - It's open source, there is a rich
community of people, there is a lots of
02:37 - other sites that I could link to how
to a using Processing, sharing code
02:40 - teaching with Processing,
making project with Processing
02:43 - So, in addition to just being software there's also
this vibrant community which will hopefully
02:48 - help you feel happier and more comfortable
kind of diving into this new world
02:52 - of programming for the first time
02:54 - Ok, so once you've downloaded Processing
02:58 - you've run it, you've got this window
03:01 - So, a couple things I should point out
there is up here, right?
03:13 - This triangle is the Run button
03:15 - It looks kind of like the play button on some
03:18 - media device, like I don't know, a VCR
03:21 - an Apple TV, Apple TV or Roku boxes play buttons
03:25 - but anyway the point is this is your Run button
03:29 - but it is not really Play
03:31 - Run means is compile your code,
compile your code and execute it
03:36 - So it's going to run through your code,
compile it to binary
03:39 - execute and run the program which is why
03:42 - when we ran this one we got this error
03:45 - It said "Unexpected token: Hello"
Now, one of the things I like about Processing is
03:50 - it sometimes gives you a nice friendly error message
03:53 - and sometimes it doesn't but
03:55 - we can just... I didn't mean to talk
about is now but
03:58 - whenever you have a mistake in your
syntax you're going to get an error
04:01 - and that error will hopefully lead you to
how to fix that, the your syntax
04:05 - But here we say (?) it says
"Unexpected token: Hello"
04:08 - because Hello is not token meaning a some
sequence of characters in-between spaces
04:13 - and punctuation, a word, so to speak
04:16 - It unexpected because it doesn't know
what Hello means
04:19 - Perhaps, it would know what line is
04:24 - So, for example, if instead of writing that, I wrote
line and what did we say
04:30 - a 100, 50, 600, 250 and I put a semicolon
04:35 - and I run this program, we would see
04:41 - I'm not over here!
04:42 - Hey! I apologize. This is a.. I can't go back and fix it
04:47 - It just gonna have to.. someday I'll fix this video
04:50 - I'll have the way like (?) and I'll just
I (?) record all these cause I just
04:54 - you know, this is like (?) really for that video
04:57 - that I imagine would be so perfect, but you can see
05:00 - I was able to run this program and there was no error
05:02 - So, this is a fine syntax, it's a syntax
actually we will learn
05:06 - How to draw a line from point X
from the first XY to the second XY
05:11 - Now, the window we got here
05:14 - doesn't actually have the line and it's also very small
05:16 - Didn't we say that a window should be 645 by 360?
05:20 - Well, one of the things that we haven't learned
05:23 - is actualy how to set a size of the window
05:26 - We can see that by default if you don't specify a size
05:29 - we are actualy getting on 100 by 100 pixel wide window
05:31 - So, here we now about to learn another function
05:34 - Size. s i z e and I can say 640, 360, semicolon
05:41 - And now we have, look at this, two lines of code!
05:43 - Really got a program now. Size, line.
And if we run this one which I can also do
05:47 - cmd+R option do, and we see
05:49 - There it is! There's that program!
I sadly erase the drawing on the board
05:53 - We could see that it basically mirrors exactly
what we draw on the board
05:57 - So now is the moment
05:58 - when you could say to yourself
"This drawing that I made with
06:02 - pencil and paper, let me see if I can
recreate it in Processing?""
06:06 - "Can I write the instructions to create that drawing?"
And this is your first practice in programming
06:11 - I should point out that even though these were
06:13 - I said we weren't in the introduction anymore,
cause we actually making staff and using Processing
06:17 - We're still in the introduction
06:18 - We're not really programming, well, we are programming
06:22 - We are writing code
06:23 - We are compiling an executing that code,
but there's no real logic here
06:27 - We're not saying "Hey, you know, if this
happens then do this"
06:31 - we're not creating this kind of flow
06:33 - this complex sequence of logic,
we just kind of issuing almost
06:36 - a linear list of commands that ends
with a static picture
06:39 - So, really what we want to get to in the next
set of videos is that
06:43 - flow the program that large,
we're gonna really do so much more
06:47 - to start understanding the foundation's
of computational thinking
06:51 - Right now we're just kind of practicing
by getting used to
06:54 - syntax and the Run button
06:56 - and I hope the camera might cut-up the second
07:01 - Excuse me for a second I coming right back
07:04 - Hello, i just had to press the button at
the end part of the room
07:07 - Ok, so, now this brings us to my next point
07:11 - So, let's say that what we want to do
07:16 - I knew that will happen
07:18 - Let's.. Hi... Ok, I have to press another button,
this is terrible, I really should edit this
07:22 - somehow and some there will, you could, if
someone download this video,
07:27 - cut-up some parts and then send it to me,
I'll reupload it
07:31 - But, listen, so, so, let's look at this list over here
07:35 - These are the list of functions
we are going to start with
07:39 - Rectangle, ellipse, line, and point.
And this is our window
07:43 - which is 640 by 360 and, let's say, we want
07:46 - to kind of draw this.. I don't know what i'm doing..
07:50 - Something like this.. This could be
our (?), but
07:54 - You guys are hopefully much more artistic than me
07:57 - and can came up with something more creative
07:59 - But all we know is how to draw a line,
now we need to discover how to draw a rectangle
08:04 - So, you could guess, we could.. I wish we have a little
dialogue here "Hey, whether you've some ideas,
08:10 - you know, how would you design the rectangle
function for Processing,
08:13 - what arguments would you require?"
08:15 - and you might say "Oh, what about the XY of this
point and the XY of this point,
08:17 - that's a possibility, what about the XY of the center
and the width and the height,
08:23 - what about the XY of the corner and a width and height?"
08:25 - In fact, all of this is are possible,
08:28 - but the default way of drawing
a rectangle in Processing is
08:32 - with four arguments
08:34 - So, rectangle has four arguments:
08:36 - x, y, width and height,
the x and y being the location of the top left
08:42 - the width being the width in pixels
08:46 - and the h, the height, the h being the height in pixels
08:50 - So let's go add this to our program over here,
08:53 - Let's say, okay, we want to draw a rectangle
and just to sort to see that it's working
08:58 - let's make the XY the same as the top left corner
09:01 - of this line
09:02 - and let's make a very a skinny rectangle, it's
only 20 pixels, but rather tall
09:07 - That's 200 pixel and if we run this,
we can see, look,
09:11 - we now have a rectangle with (?)
this kind of slide thing,
09:14 - we have this line and we have a rectangle
over here with the XY,
09:18 - and I could zoom all the way into this,
not sure of point of that,
09:22 - but the XY being the top left, the width
being 20 pixels
09:25 - and a height being whatever I typed, 200 and
something like that, 200 pixels
09:29 - Okay, so we can see.. Ah, okay, now we learned
09:33 - how to draw a rectangle! And I could go
through and show you ellpise and line and point
09:36 - There are a lots of other drawing functions
in Processing
09:38 - But, I mean, what I'm not going to sit here all day
09:41 - and talk through everything, all possible way
09:43 - to draw everything in Processing
09:46 - There's gotta be a better way, right?
It doesn't just happen and you should..
09:50 - There is some interesing, a lots of
interesting ideas and
09:52 - how make this more intuitive, why are we
actually doing the programming itself
09:55 - I mean, what if instead of typing this out,
09:57 - you could just draw a rectangle on the screen
09:59 - and code woulds only up here, but that's not really
the point what we're doing here
10:03 - What I want to say is what one of the things
you want to get used to is
10:06 - how you look up this information
10:08 - How do you look up how to
draw a line if you didn't know
10:10 - if you weren't just
10:13 - if you didn't just enjoy watching videos
of somebody
10:15 - with kinda slightly messy hair and just
talks and talks and talks all the time
10:19 - So, the way you do that
10:22 - is through the Processing website which
through the reference
10:25 - So over here there was a link to
reference and it left over here
10:29 - and if I click on a reference, we gonna
suddenly see this webpage has a list
10:34 - of all these possible functions and
these are the ones
10:37 - I want us to kinda lookat right now
10:39 - 2D primitives: arc, ellipse, line, point
quad, rect, triangle
10:42 - Here's a list of basic drawing functions
in Processing
10:45 - each one of those is a link, if you go to
that link, it's going to show you
10:49 - "Hey, here's the syntax, here's the name
of the function
10:52 - here are the arguments, here are what the
arguments do, here is an example"
10:56 - So just... Let's go to rectangle which I
think is a good one to look at
11:01 - We can see "Hey, look, here's
the name of the function rect
11:05 - and here's an example of what it looks like,
four numbers"
11:08 - I don't know what those numbers are,
by the way you can do
11:12 - Rounded rectangles and slightly (?).
And you can read the description
11:17 - But really, and you can see here, this is
what we're doing
11:21 - We're making a rectangle with a, b, c, d
11:24 - Now, I often think of those I did on
the board of there's X
11:27 - X, Y, W, H, because X for x, Y for y
W for width, H for height
11:34 - But we can see here in the reference
11:37 - It's going to describe that for us
and I'mgoing to
11:40 - zoom out slightly, oh, not all the way
11:43 - We can sort of see here and we'll try to get
this in a way that you can see it
11:46 - We can see here rectangle ABCD, A is the
11:49 - x-coord the rectangle by default, B is
the y-coordinge of the rectangle
11:54 - C is the width and D is the height
11:57 - So, we can see, that this page is giving us
12:00 - what the syntax is, what those arguments are
12:03 - what the argument actually do
12:05 - and then at the top here a few examples and
I'm not gonna go through
12:08 - how the rounded staff works
12:10 - This is on you can explore on your own and ask
questions in my new weekly
12:14 - program "Ask a Processing question" which
will start sometime in September
12:18 - I don't know, I don't like plugging the video
within video for no reason, I admit that to be
12:22 - strange and humorous and it was not, I laughed
sadly inside by myself
12:27 - Okay, so this is really where we are
12:30 - I think I'm actually kind of coming to the end
12:34 - of this video, now, what you can do
for your exercise is
12:38 - In the next video we will look at color
12:41 - What you can do for your exercise is go
through the reference pages for ellipse,
12:49 - and design your drawing
12:51 - Now, show you, I often suggest to make a little
12:54 - alien or monster, it's kind of a nice thing
to start with
12:56 - Really any pattern that you might want to think today
12:59 - See if you can create it with numbers. And
again let me just point something out
13:03 - This is kind of a silly exercise, it's almost like
(?)
13:08 - It's kind of a diversion
13:09 - Programming is not about hardcoding numbers
into functions to create a picture
13:14 - Programming is about creating a sequence of instructions
13:18 - a logic to execute a task
13:21 - But just to get started, and really
we want to avoid, we want to really
13:26 - Hello over here, we want to avoid
13:29 - This way, this type of co... (?)
we want to avoid this
13:34 - We don't want to have a lot of all these hardcoded
numbers and this this is not is not
13:40 - It will all become clear as we move on
13:43 - But this is not what we're doing
eventually, but it's a good
13:46 - place to get kind of started and this
kind get used to the Processing
13:51 - and get used to what errors you gonna get
13:53 - like when I forget that semicolon again
13:57 - Let me forget this semicolon instead
Yes, I guess
14:00 - this is without one at the bottom here it said
14:04 - "Syntax error; maybe a missing semicolon?"
14:07 - So you can see you want to just get through practice
14:09 - what kind of syntax errors are you gonna make
or you used to fixing them, can you look up
14:13 - staff in the reference, can you make that
14:15 - that picture with Processing
14:17 - So, work on that, the next video will go over
how to add color to this as well as
14:21 - kind of filling some of the blanks with some
of this functions
14:24 - I will be kind of wrapping up this sort of first
group of videos about just kind of
14:29 - the basics of syntax and the basics of drawing
in Processing
14:33 - Great! Thank you, I'm going to press this button