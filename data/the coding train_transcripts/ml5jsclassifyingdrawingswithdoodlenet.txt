00:00 - Hello, and welcome to another
ml5.js video tutorial.
00:02 - In this video, I am going
to attempt to classify
00:05 - my drawing as a cat.
00:07 - So how am I going to
do this, and how come
00:09 - this video is so darn short?
00:11 - Well, I'm going to make use
of a pre-trained model called
00:14 - DoodleNet that comes as
part of the ml5 library.
00:17 - The DoodleNet model, which
you can read more about
00:19 - on the documentation page,
is a pre-trained model
00:22 - that classifies and
labels hand-drawn sketches
00:24 - from 345 categories.
00:26 - Huh, I wonder what might
these 345 categories be?
00:30 - Well, if I scroll down and take
a look at the DoodleNet data
00:33 - biography, you will find
out that the data set comes
00:36 - from Google's "Quick,
Draw!" which was a game that
00:38 - was created in 2016.
00:40 - And Yining Shi, who created
and trained this model--
00:43 - you could find out more about
Yining by going to this link
00:46 - here--
00:47 - collected the data in 2019.
00:49 - This is what the Google
"Quick, Draw" data set is.
00:51 - It's 50 million drawings.
00:53 - I don't expect that Yining
used all 50 million.
00:56 - We can see 50,000 per
category, so do the math--
00:59 - 50,000 times 345.
01:00 - [BELL DING]
01:01 - And you can find all of
Yining's training source code
01:05 - here in this DoodleNet repo
itself and more information
01:08 - about how the model is trained.
01:10 - But guess what?
01:11 - This video is actually really
a follow-up to my coding
01:13 - challenge about training
a machine learning model
01:15 - to recognize
drawings of shapes--
01:18 - circle, squares, and triangles.
01:19 - So I did this whole process
of collecting a data set,
01:22 - training a model,
and then deploying
01:24 - that model all in the
browser in a separate video.
01:26 - And in this one I'm just
going to quickly, basically,
01:28 - do the same thing but use a
more sophisticated, more robust
01:32 - pre-trained model
created by Yining Shi.
01:35 - All right, here we go.
01:36 - So this is my starter code.
01:38 - What is it doing?
01:39 - You can see this is very simple.
01:40 - It's just creating a
canvas-- it's 400 by 400.
01:42 - I have a Clear button.
01:43 - So when I press
that Clear button,
01:45 - it redraws the background,
erasing the drawing.
01:47 - And then the draw function,
whenever the mouse is pressed,
01:50 - it leaves a trail from
my current mouse position
01:53 - to my previous mouse
position-- or maybe I
01:55 - should say my previous mouse
position to my current mouse
01:57 - position.
01:58 - Yeah, it's the same thing.
01:59 - I also should note that I
have imported the ml5 library.
02:03 - I'm currently using
version 0.6.0.
02:06 - So if you want to match
that version if you're
02:08 - working trying to
recreate this code,
02:09 - that's the version I'm using.
02:10 - Step one, create a variable
to hold the image classifier,
02:15 - and I'll call it
doodleClassifier.
02:18 - Step two, call imageClassifier--
02:21 - give myself some more
space here for the code--
02:24 - And?
02:25 - Indicate to ml5
that I want to load
02:28 - the DoodleNet pre-trained model.
02:31 - And then I need a callback
for when that model is ready.
02:34 - I need to make sure I have
all the indentation correct.
02:39 - Once the model is
ready, I just want
02:41 - to take the canvas
itself and pass it
02:43 - to the model for a prediction.
02:47 - Once it's gotten that
canvas and sent it
02:49 - through the neural network,
it will get results back--
02:52 - a probability
score, a confidence
02:53 - score for every single
one of those categories.
02:55 - And I can retrieve that
in a callback, which
02:58 - I am naming gotResults.
03:02 - Ml5 follows an error
first callback pattern,
03:05 - which means if
something went wrong,
03:06 - it will come back in the
first argument as an error.
03:09 - If everything went well,
I'll get the results
03:11 - in an object called results.
03:16 - Handle the case of an error
by just getting out of here
03:19 - and logging the error.
03:22 - And then let me just
log the results.
03:24 - Run this sketch.
03:26 - In truth, I'm not so sure
what this warning is.
03:29 - These kinds-- this happened
to me in my own example,
03:32 - where if you ever have your
image resolution not matching
03:35 - what the neural
network is expecting,
03:37 - you could get an error.
03:38 - This is just a
warning, so I'm not
03:40 - entirely sure what's
going on there,
03:42 - but I'm going to ignore
it for right now.
03:44 - And what I want to focus
on is the results that
03:46 - came back in a giant array.
03:48 - Object, object, object, object,
object, object, object, object,
03:50 - sing the object song.
03:52 - The way that this
array is ordered
03:54 - is whichever label has the
highest confidence score
03:58 - is going to come back first.
03:59 - So this is just a
blank, white canvas.
04:01 - What does it think it is?
04:03 - It's a line.
04:04 - That kind of makes sense, like,
the least amount of drawing,
04:06 - would just be a line.
04:08 - The next one is a snowman.
04:09 - [LAUGHING] That also makes
sense. (DRAMATICALLY) Look,
04:11 - this is my art.
04:12 - I call it snowman.
04:15 - But, let's see-- if
I draw some stuff,
04:18 - I could classify
it and hopefully
04:19 - start to get things that
make a little bit more sense.
04:21 - So what I want to
do is just display--
04:23 - I think I'm just going to
display the highest confidence.
04:26 - Well, we can-- let's
look at a couple of them.
04:28 - Let's always look at the
first two confidence scores.
04:33 - So I'm going to make a variable
for a div where I can draw--
04:36 - not draw, but I can pass the
information from the result
04:39 - into an HTML element--
04:40 - a DOM element.
04:44 - Then when I get the results--
04:47 - now, if I just wanted
to show the label,
04:49 - I could just pass
the label in there.
04:51 - But let me form
something that has
04:52 - a bit more information in it.
04:54 - I'm going to use the backtick
for a template literal, which
04:57 - allows me to combine text and
sort of the values of variables
05:00 - in one.
05:01 - And I will say
results label followed
05:07 - by results confidence--
05:09 - this actually lets me do
it on multiple lines, which
05:12 - will be convenient here.
05:13 - And then I also want
to multiply this
05:15 - by 100, number format it
to only have two digits,
05:22 - and then put a percent sign.
05:26 - So it's kind of like the
percentage confidence.
05:29 - And then let's do the
same for the next one.
05:34 - Put the final backtick in here.
05:36 - And then I probably
should add a line break.
05:39 - Is that how do you a line break?
05:41 - I sort of know how HTML
works so that I see
05:43 - these on two separate lines.
05:44 - Let's just see
what happens here.
05:46 - Model loading-- line--
05:48 - why do I only see "line?"
05:51 - Oh!
05:51 - [LAUGHING] I spent all this time
making this content variable
05:55 - but I forgot to actually
put it down there.
05:58 - Apologies.
05:59 - So content should go here.
06:00 - And I'm a person who
likes to use semicolons.
06:03 - I'm sorry, but I just have
to use the semicolons.
06:05 - Here we go, model loading.
06:08 - Let's see what we got.
06:09 - Line 34-- oh, whoops.
06:10 - I lost the line break.
06:15 - There we go.
06:16 - Line, 34 point percent.
06:20 - No, I don't want
that point percent.
06:22 - Why is that showing up?
06:23 - All right.
06:24 - Let me give it one
percentage point.
06:26 - And then, of course,
by the way, once I
06:29 - have gotten the results--
06:30 - just to get to the
next step here--
06:32 - I also will then want
to classify it again.
06:37 - So this is a way that
I can continuously
06:41 - loop over and over
and over again
06:43 - with the neural network model
classifying, classifying,
06:45 - classifying.
06:46 - Classify the canvas,
show the results.
06:48 - Classify it again,
show the new results.
06:49 - Classify again, show
the new results.
06:51 - And I think now--
06:53 - here we go.
06:55 - Let's draw my cat.
07:00 - Let me try this again.
07:02 - Is there a cat even in there?
07:07 - So I have a suspicion
here, and this is always
07:09 - really critical--
07:10 - is the data set that was
used to train this model
07:13 - is incredibly consistent in
that the line thickness of all
07:18 - the drawings is very uniform.
07:21 - So I think maybe I haven't
really gotten that right.
07:23 - I arbitrarily decided-- let
me use a stroke weight of 8.
07:30 - My suspicion is if I make
that a little bit thicker,
07:33 - I might get results that are
more like what I'm hoping for.
07:39 - Look, it's a cat!
07:41 - It's a cat.
07:42 - A nice, raccoon-like cat.
07:44 - Oh, we're super-confident now.
07:47 - Look at this.
07:48 - Oh, all right.
07:49 - So we can see these
works quite well
07:52 - if you happen to draw like the
Google "Quick, Draw!" data set.
07:55 - I think it's an
important question
07:56 - to ask-- if you are
classifying drawings
07:59 - and there's an audience that
is experiencing your web
08:02 - application or your project,
is the Google "Quick, Draw!"
08:05 - data set representative
of that audience?
08:07 - Are they represented
in that data set?
08:09 - That's kind of something
that I talk a lot
08:11 - about over many
videos about thinking
08:13 - about the sort of ethics and
politics of data collection.
08:16 - OK, and now for the next step.
08:19 - Rather than draw onto a
canvas, if I use a notepad here
08:24 - with a document
camera pointed at it,
08:27 - can I get it to recognize
my drawings on paper?
08:31 - I am going to
duplicate this sketch,
08:33 - call it DoodleNet Video.
08:35 - I'm going to add a
variable called video.
08:40 - I'm still going
to use the canvas,
08:41 - and I'll show you
why in a second.
08:43 - I could pass the video
directly, but I'm
08:45 - going to draw the video on
the canvas and resize it.
08:50 - And this should be
exactly the same now.
08:54 - As you can see, it's now
seeing my notepad over here.
08:58 - I'm going to start by trying
to draw a strawberry. (SWEETLY)
09:00 - A strawberry!
09:02 - [MUSIC PLAYING]
09:05 - That's sort of
more like a heart.
09:06 - [MUSIC PLAYING]
09:09 - It's a beach again,
or it's raining.
09:11 - So why is this not working?
09:12 - I'm not entirely sure,
but let's see if I can--
09:16 - even with this exact same
image, kind of adjust it.
09:19 - So one thing that I
might think about doing
09:23 - is applying some image
processing to it.
09:26 - So one thing that I could do
very quickly is add a filter--
09:29 - a threshold filter with
a threshold of 0.5.
09:33 - Let's try that.
09:35 - A threshold filter
takes any image
09:37 - and converts every pixel
to either black or white
09:40 - based on some threshold
value-- in this case 50%.
09:44 - Let me try a thicker pen.
09:45 - [LAUGHING]
09:46 - [MUSIC PLAYING]
09:54 - There we go.
09:56 - It's a strawberry.
09:59 - Let's draw-- I'm going to see
if I can draw that cat now.
10:01 - [MUSIC PLAYING]
10:12 - I don't know.
10:12 - It's either a cactus or a
cat or maybe a hedgehog.
10:15 - But you can see that
this is working.
10:17 - We now have the ability to
take input from a camera.
10:21 - I don't know to what extent
this filtering is altering it.
10:24 - Like, look-- right now
it says it's 52.4% cat.
10:28 - Let's actually try
making the filter only
10:32 - apply if I press
the mouse, and we'll
10:35 - see how that affects things.
10:37 - This is what it looks
like without the filter.
10:39 - With the filter, you
can see-- first of all,
10:41 - it's much more stable.
10:43 - With the threshold filter, I
have a very consistent image.
10:46 - But there's a lot of noise
otherwise in the image.
10:49 - I think it wants
me-- it's like it's
10:51 - telling me, it's daring
me, to draw a snowman
10:54 - to get that 1.8% up.
10:56 - [MUSIC PLAYING]
11:02 - But this is a snowman.
11:03 - Look at that.
11:04 - Look at that snowman.
11:05 - [FANFARE]
11:05 - There we go, a snowman.
11:07 - All right.
11:07 - Can I make it-- am I going
to make it worse or better
11:09 - by adding some arms?
11:11 - Snowman, there we go.
11:12 - OK, so I hope you enjoyed
this particular video.
11:15 - I would encourage you to
experiment with this model.
11:18 - I think there's a lot of
creative possibilities in terms
11:20 - of what this interaction
might be applied to.
11:23 - Could you play a game
where you have to control
11:25 - a character by drawing?
11:27 - What happens when
you pass images
11:30 - that come from fill in
the blank to this model?
11:33 - I encourage you
to play with that.
11:35 - I encourage you to look at
my shape classifier video
11:37 - to train your own model that
recognizes shapes and drawings
11:40 - and that sort of thing.
11:41 - Share it with me.
11:43 - I would love to see what kinds
of creative possible outcomes
11:46 - come from this stuff.
11:47 - OK, goodbye.
11:49 - Hopefully there'll be
more ml5 videos to come.
11:51 - And I look forward
to seeing you there.
11:53 - [MUSIC PLAYING]