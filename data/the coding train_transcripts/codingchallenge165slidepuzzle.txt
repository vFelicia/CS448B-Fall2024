00:00 - thanks to curiositystream for sponsoring
00:02 - this video
00:04 - welcome folks to a coding challenge i
00:07 - have done one of these in a while i'm
00:09 - gonna set myself a timer here and i'm
00:12 - going to attempt to make a slide puzzle
00:14 - so this is the source image that i'm
00:16 - going to use i need to chop it up into a
00:18 - bunch of pieces
00:19 - allow you to like click to move the
00:21 - pieces around and see if you could solve
00:23 - it to put it back together and have
00:25 - something detect when it's put back
00:27 - together that it works all right so one
00:29 - of the things that we need to use that i
00:30 - need to use for this is the copy
00:32 - function um because what i want to do
00:34 - first is just take this image and chop
00:36 - it up into a bunch of smaller images so
00:39 - let me call those
00:41 - uh the pieces and i'll make an array
00:44 - and then in setup i should figure out
00:47 - how many columns and rows that i want so
00:49 - let's just make it it's
00:50 - right now it's a 400 by 400 so let's
00:53 - just make it 4x4
00:55 - and i also i'm going to probably want to
00:57 - keep track of like the width and height
00:58 - of each piece
01:00 - i probably should do this in like an
01:01 - object-oriented way where there's like
01:02 - class piece and that's not happening
01:05 - right now
01:06 - four let i equal zero i is less than the
01:08 - number of columns
01:11 - uh j
01:13 - is less than zero j less than the number
01:15 - of rows
01:18 - w is the width of the canvas divided by
01:22 - the number of columns h is the height of
01:24 - the canvas divided by the number of rows
01:27 - and then
01:28 - for each one of these i need to make a
01:30 - new image or the new the image is a
01:33 - piece of the larger image so i need to
01:36 - take the source image and copy from it
01:40 - oh i think i could just use get i'm
01:41 - really obsessed with the idea of using
01:43 - copy because hopefully by the time this
01:45 - video comes out there will be an entire
01:47 - video all about the copy function in
01:48 - processing in p5
01:50 - let's look at the reference
01:52 - get i believe
01:55 - it returns an array of rgba values which
01:58 - is not what i want i want an actual like
02:00 - image maybe copy is what i want i know
02:02 - copy will work in the sense that i can
02:05 - copy from this image onto this image
02:08 - let's use copy
02:09 - so this is fine i'm going to use copy
02:11 - because i know it's going to work and
02:13 - the first thing i'll do is create a
02:14 - blank image
02:16 - that is
02:18 - the size of one of the pieces
02:20 - i really want to use the whiteboard just
02:22 - because i have a whiteboard so the idea
02:24 - here is i have a source image
02:27 - and what i first want to do is on my
02:29 - canvas
02:30 - i'm going to chop this up one two three
02:34 - one two three into four by four and i
02:37 - want to take this section of the image
02:39 - and place it on the canvas but keep this
02:41 - as a separate variable like a piece so
02:44 - that these pieces can be locked to a
02:47 - part of the original oh i really need i
02:49 - just need to know i'm going to i got to
02:50 - do this object-oriented right because
02:52 - the piece
02:54 - should know where its home base is as
02:56 - well as where it currently is so if
02:58 - they're being shuffled when all the
02:59 - pieces are in the right place we've won
03:01 - so what do i need to make a class
03:04 - a piece class
03:06 - that has
03:07 - a current index
03:10 - like if i number all these zero one two
03:12 - three four five six seven blah blah blah
03:14 - blah i wanna keep track of where it
03:16 - currently is as well as where it's
03:18 - original spot it's it's home bases so we
03:20 - know when the puzzle's solved all right
03:21 - let's let's do that it's worth it it'll
03:23 - be worth it so let me uh i got to open
03:25 - this up here i'm going to make a new
03:26 - javascript file and i'm going to call it
03:29 - piece.js
03:30 - tile it's probably tile is what they are
03:32 - right let's call it uh tile dot js
03:36 - so i have a tile class
03:38 - what does it have in it it has
03:41 - the index
03:43 - so i'm going to pass that in as an
03:44 - argument and
03:46 - it has its image
03:50 - so i mean there's probably more to do
03:52 - with this but i'm basically just want to
03:53 - wrap the idea of the image's piece and
03:56 - where it's supposed to be in to this
03:59 - constructor okay good here we go so now
04:02 - what i'm actually doing is i'm still
04:03 - creating the image
04:05 - then i'm saying copy
04:07 - uh
04:09 - what am i copying i'm copying from the
04:10 - source
04:12 - zero zero oh no no no no no
04:15 - the in the source the x location is i
04:18 - times the width the y location is j
04:21 - times
04:22 - h
04:23 - and i'm copying from the source
04:26 - i j
04:29 - with height
04:31 - two
04:32 - zero zero with height so if this is
04:35 - confusing to you
04:36 - thank goodness i have a white board each
04:39 - one of these
04:40 - pieces is an image where this is zero
04:44 - zero and its height is with an h but if
04:47 - i'm copying this one
04:49 - and it's
04:50 - [Music]
04:51 - column two
04:53 - row one boy this is like so messy this
04:55 - whiteboard but that's fine um then
04:58 - basically i need to know what is this
04:59 - location this location is column times
05:02 - width
05:04 - row times height and then so take this
05:06 - section and copy it to this part of the
05:08 - piece
05:09 - and i think this is right right it's um
05:11 - it should be the source image source x
05:14 - source y source to the destination i
05:17 - want to copy the source image at this
05:19 - location
05:21 - to this destination which is image at
05:24 - this location great then i need to make
05:27 - a
05:28 - a tile is a new tile
05:30 - index and then the image now what is the
05:34 - index
05:35 - the index
05:37 - is the uh i'm not going to use any
05:39 - two-dimensional arrays here i'm just
05:41 - going to keep track of um the the the
05:45 - individual index counting zero one two
05:47 - three four five six seven eight nine ten
05:49 - eleven twelve thirteen fourteen fifteen
05:50 - zero 15 16 total tiles so the index
05:55 - is i
05:56 - plus j times the number of columns oh
05:58 - let's call this tiles
06:01 - let's just put all the tiles into an
06:03 - array
06:05 - just out of curiosity now
06:08 - let me loop through that array
06:11 - and
06:12 - okay i have an idea let's make a
06:14 - variable called board
06:16 - so this is the board the board is an
06:18 - array of all of the elements in the
06:20 - order that they're in so board
06:25 - push index
06:26 - so basically i'm going to have an array
06:29 - that keeps track of the positions of all
06:32 - of the tiles
06:34 - and then
06:36 - this is a little bit silly but i'm going
06:37 - to do it this way i'm going to just
06:39 - always use a nested loop just to get
06:40 - that index
06:42 - and then i'm going to say board
06:45 - index show so let me just do uh
06:49 - let me think about this for a second let
06:50 - me be a little bit more thoughtful here
06:52 - i'm i was trying to avoid using a
06:54 - two-dimensional array
06:56 - but maybe that's silly so i want to have
06:58 - this array
07:00 - which i'm going to call board and it's
07:02 - going to have like it'll be
07:04 - all of the numbers shuffled in random
07:07 - order so as i go through
07:10 - i yes i draw the image
07:12 - at that spot
07:15 - like the zero spot what the zero spot
07:18 - would be x and y but i go look up
07:22 - image
07:23 - three or index three from my uh array of
07:27 - all the tiles i don't know if that made
07:29 - sense but i had to walk over to the
07:30 - whiteboard to sort of think through that
07:32 - in other words x is this is exactly what
07:34 - i'm doing
07:37 - x is i times w
07:39 - y is j times h
07:41 - and then the image i want to draw is
07:43 - board
07:44 - index
07:46 - it's actually like tiles board
07:49 - index i mean this is like a crazy way to
07:51 - write it but i basically want the number
07:53 - the index that's in the array called
07:56 - board to tell me which tile to look up
07:59 - so this is tile i'll call it like tile
08:01 - index or
08:04 - right now they'll be in order because i
08:05 - haven't shuffled it right i'm putting
08:07 - them all in order and then i should be
08:09 - able to say image image
08:11 - x comma y so i'm hoping that when i run
08:14 - this sketch i'm going to identically see
08:17 - the image because the only things that
08:19 - i've done is chop it up into a bunch of
08:21 - tiles put them into an array in order
08:25 - and then i'm going and getting them one
08:27 - at a time and showing them
08:30 - all right what happened uh oh oh am i
08:33 - supposed to do create image yeah so i
08:36 - think i did the dom image element by
08:38 - accident
08:41 - tile is not defined oh so no problem
08:44 - no problem yep
08:46 - tile.js that's a file i'm working with
08:49 - thank you very much
08:52 - uh
08:53 - failed to actually draw load pixels
08:55 - yeah create image load picks maybe i
08:57 - just need to call load pixels i thought
08:58 - to do copy i don't need to but i must
09:03 - and then let's do like image update
09:05 - pixels
09:07 - let's try that
09:09 - signature not supported what is going on
09:13 - oh look at this i deleted some stuff ah
09:16 - i when i was like mucking around some
09:18 - stuff got deleted i need all those
09:19 - numbers all those numbers and i want to
09:22 - sort copy it from x comma y
09:25 - nice
09:25 - [Applause]
09:27 - okay
09:28 - i don't even know if i need all these
09:29 - load pixels and update pixels
09:31 - still good
09:33 - okay everybody
09:38 - oh image equals tile dot image so i need
09:40 - to pull the image property out of the
09:43 - tiles
09:46 - no okay
09:48 - let's take out all these like
09:50 - load pixels and update pixels yeah okay
09:53 - i didn't need any of the low pixels and
09:55 - update pixels there's a little bit of a
09:56 - mystery here i have a feeling here copy
09:59 - is doing the work for us so
10:02 - we're good now you might not believe me
10:04 - now this is actually showing it as
10:06 - separate tiles now let me let me prove
10:08 - this by just drawing some lines over it
10:11 - this is gonna be a slightly awkward way
10:13 - of doing it
10:14 - but let me just do stroke weight two no
10:18 - fill
10:20 - oh but this is silly if i change this to
10:22 - like width minus 10 height minus like if
10:25 - i make the images smaller
10:26 - right okay i just wanted to show you
10:28 - that i am actually they are separate
10:30 - pieces so i i visually it might help i
10:34 - think to actually just draw
10:36 - little thin lines over it with the
10:38 - rectangles
10:40 - and this is very
10:42 - silly this extraneous
10:45 - kind of code that i'm doing but um
10:50 - i think
10:51 - this will help
10:52 - yeah so i just wanted to draw some lines
10:54 - over it now
10:56 - now we are really getting somewhere
10:58 - because in theory if all i do is shuffle
11:03 - this array right have all of the
11:05 - elements of the array
11:08 - in random order
11:10 - then i should see the image
11:12 - chopped up and moved around so let's do
11:14 - that so i'm going to write a function
11:18 - called shuffle which receives an array
11:21 - uh and then i'm going to
11:25 - just say like um a hundred times
11:29 - pick r1 is array dot rand a random
11:33 - number
11:34 - floor a random number between zero and
11:37 - the length of the array
11:39 - r2
11:41 - is floor
11:42 - a random number between 0 and the length
11:44 - of the array now in theory i don't want
11:45 - these two elements to be the same but
11:47 - i'm doing it a bunch of times i want to
11:48 - swap i'm just the way i'm going to
11:49 - shuffle the array is by picking any two
11:51 - elements and swapping their place
11:53 - so now
11:55 - temp
11:56 - is that arrays r1 value
12:00 - then
12:01 - and you know i'm going to need i'm going
12:02 - to write a swap function because i'm
12:04 - going to need that i think also when i
12:06 - move the pieces
12:08 - so function swap
12:11 - is
12:12 - uh swap
12:14 - index i and j of an array
12:16 - so temp is index i
12:19 - and then that arrays
12:22 - i element
12:23 - is
12:24 - the j element and the j element is that
12:28 - temporary value now you might be
12:29 - wondering like what what and there's a
12:31 - way i know there's some like object
12:33 - deconstruction way i can do a swap and
12:35 - i'll put it up on the screen if i ever
12:36 - make this into an edited video but
12:39 - basically the old-fashioned oh the old
12:42 - old way that we used to swap our
12:44 - elements in an array is we take element
12:47 - one
12:48 - store it somewhere temporary because we
12:49 - need to put a new thing in that spot and
12:52 - then we saved it temporarily we could
12:54 - put that thing we saved in the spot that
12:56 - just the other thing came out of so now
12:58 - i want to swap
13:01 - r1r2
13:02 - in that array
13:04 - so let's shuffle
13:06 - i don't need to shuffle the tiles the
13:08 - tiles is just an array of elements i'm
13:10 - shuffling the array that's keeping track
13:12 - of the index indices of all of them
13:14 - maybe i didn't need these two arrays but
13:16 - it's the way that i'm thinking of it
13:17 - right now shuffle the board
13:23 - oh
13:24 - well good thing i wrote my own shuffle
13:25 - function p5 the reason i'm getting that
13:27 - error is there already is a global
13:28 - function in p5 called shuffle and it
13:31 - uses this fischer yates shuffle
13:33 - algorithm which i can only assume is
13:36 - better than whatever i did although is
13:38 - it the same i don't know we could read
13:40 - this page and discover we should it
13:42 - could be another coding challenge the
13:43 - fischer yates shuffle algorithm you know
13:45 - what i'm gonna do i'm just gonna call
13:47 - this a simple shuffle
13:50 - that way and i could use the p51 you
13:52 - should try it yourself
13:53 - there we go look
13:55 - i have mixed up the elements
13:58 - all right so one thing that for it to be
14:00 - a slide puzzle that i need to do
14:03 - is
14:04 - i need
14:06 - to be able to
14:08 - remove one of them
14:09 - so
14:10 - uh columns and then uh let's just
14:14 - delete the last one pop is it pop
14:18 - and
14:22 - that'll be empty
14:24 - okay great so as long as if tile index
14:29 - is greater than zero
14:31 - draw the image
14:33 - so now
14:34 - whoops greater than negative one
14:37 - okay so now i have made the board i
14:40 - could shuffle it
14:42 - i could still shuffle it now but this
14:45 - shuffling is no good
14:47 - because in theory now is it possible
14:49 - that it's unsolvable i need a move
14:51 - basically i need a function that like
14:55 - moves
14:56 - one element
14:57 - so
14:58 - function
15:00 - move
15:01 - so the function is going to receive a
15:04 - given index
15:06 - so the idea is i'm clicking on an index
15:08 - like i'm going to click on one of them
15:10 - and it's only a valid move if it's above
15:13 - below to the right or to the left
15:15 - so i do need this function like the
15:18 - column is index well you know what i
15:21 - could
15:21 - i could pick a random
15:24 - column or row i need to know where the
15:26 - negative one is
15:28 - so let's let's just have a variable
15:32 - blank spot is
15:34 - you know what i'm going to do i'm going
15:35 - to write a function
15:38 - find blank
15:43 - so this is a way to quickly check all of
15:45 - it to find which one is blank
15:49 - so the blank
15:51 - i the blank column is the blank spot
15:54 - modulus the number of columns and the
15:57 - blank row is
15:59 - floor
16:00 - the blank index divided by the number of
16:03 - rows that's the inverse of putting it
16:06 - back i should just use the
16:07 - two-dimensional array
16:10 - okay so
16:12 - that's the blank column in row so i and
16:14 - j if i and j is a neighbor if is
16:18 - neighbor
16:19 - i j
16:21 - blank
16:22 - there's got to be an easier way to check
16:24 - if it's a neighbor right
16:26 - so if it's a neighbor
16:28 - then swap
16:30 - blank
16:33 - with
16:34 - i plus j
16:35 - j times columns of that array
16:38 - so the move
16:41 - basically the idea of doing a move is
16:44 - uh there's a spot that i want to move if
16:46 - it's a proper neighbor to the blank spot
16:49 - then it can be swapped with it
16:51 - oh no that's not yeah yeah when you move
16:53 - a thing and tile into it it becomes the
16:55 - blank spot okay
16:57 - so i just need now an is neighbor
16:58 - function
17:00 - you the viewer will write this in a so
17:02 - much better way i'm on a time crunch
17:04 - here i'm way over my 30 minute limit
17:06 - function is neighbor i'm just doing x1
17:10 - y1 x2 y2
17:13 - well let me do i j
17:15 - i j x y
17:17 - so first
17:18 - if
17:19 - i is not equal to x
17:23 - and j is not equal to y
17:26 - return
17:29 - return false
17:30 - it's either got to be in the same column
17:32 - or the same row so if they're both not
17:35 - the same
17:37 - then it's not a neighbor if
17:39 - the absolute value of i minus x
17:45 - equals
17:47 - one
17:48 - it's one spot away
17:51 - or
17:53 - the absolute value of
17:55 - j minus y
17:57 - if it's one spot away
17:59 - returned true and i know i could return
18:01 - like the result or whatever
18:03 - otherwise it's the same spot so i'm just
18:05 - gonna say return false
18:07 - if it gets the end i think this will
18:09 - work
18:11 - just did that kind of like awkwardly
18:14 - right it's got to both be
18:16 - in either the same column or row and one
18:19 - spot away so now
18:22 - shuffling is should be
18:25 - picking a move
18:27 - random
18:28 - columns
18:29 - and random rows
18:32 - i know i could just pick from valid
18:33 - neighbors to do a move but if i do it
18:35 - enough times i'll pick valid neighbors
18:37 - enough times that this should work so
18:39 - now i should just say move
18:41 - r1 and r2
18:43 - and
18:45 - move if it's a
18:47 - finds the blank spot and if the blank
18:48 - spot is a neighbor it swaps it with i
18:50 - don't know if this is going to work
18:51 - let's just try it
18:53 - array ah move
18:57 - i guess move should the function should
18:59 - get the array i mean i'm only using one
19:01 - array
19:02 - so it's a little bit silly
19:04 - there we go okay
19:06 - so that that's a valid shuffling now i'm
19:08 - just curious let me make this a random
19:12 - move function
19:15 - again i will refactor this later i mean
19:17 - i don't know if i will
19:20 - let's do random move
19:22 - so like if i do a thousand moves
19:26 - oh uh array
19:28 - it's a little bit silly how i have to
19:30 - like i'm not using global variables as
19:32 - well okay so that should be a random
19:33 - shuffling that's possible but just out
19:35 - of curiosity
19:37 - in draw
19:39 - if i just said
19:40 - random move
19:43 - of the tiles but i don't want to shuffle
19:46 - it i just want to see it doing one move
19:48 - per
19:49 - okay cannot read properties of undefined
19:51 - image
19:52 - oh board it's the board
19:56 - there we go oh
19:58 - oh i'm not drawing the background so the
20:00 - old piece is there
20:04 - okay this is it shuffling the puzzle
20:07 - randomly
20:09 - oh i love this
20:11 - all i need to do now is have a mouse
20:13 - pressed function
20:15 - i'm going to go back to shuffling it to
20:17 - start so take out this
20:20 - and mousepress function is so the column
20:23 - that i'm clicking on is
20:25 - floor mousex divided by the number of
20:28 - columns
20:30 - right
20:31 - and the row and i'm gonna call this i
20:34 - and the row that i'm clicking on
20:36 - is floor mouse y
20:39 - divided by the number of rows and then
20:41 - move i
20:43 - j tiles
20:45 - now i'm not giving myself any feedback
20:47 - or i'm not seeing an animation all of
20:49 - those are things that i hope that you
20:51 - will add it should move if it's a valid
20:54 - neighbor what what did i
20:56 - so console log i
20:59 - j
21:00 - 60 oh whoops
21:02 - no no no no divided by w and h
21:05 - not divided by the number of columns
21:07 - divided by the width of the column is it
21:09 - zero one or two okay
21:11 - it's like what am i losing my mind here
21:12 - okay
21:14 - no oh not the tiles not the tiles the
21:17 - board the board
21:22 - yeah look at that
21:24 - now i'm pressing the buttons and so now
21:28 - it is solved
21:30 - if is solved
21:33 - uh if so console.log
21:35 - solved
21:37 - we will not have any fanfare just a
21:38 - console log solved so i'm gonna write a
21:41 - function
21:42 - is solved
21:44 - where i'm going to go 4 let i equal 0 i
21:47 - is less than board dot length
21:51 - minus 1. i don't need to check the last
21:53 - one
21:55 - i plus plus
21:57 - and then if
21:58 - board
22:00 - index i is not equal to
22:04 - tiles index i dot index right isn't that
22:07 - didn't i save where it's supposed to be
22:10 - yes in the tile class
22:13 - then that's a piece that's in the wrong
22:14 - place
22:16 - so return false
22:18 - and if you get through everything
22:22 - all of them are in the right place
22:24 - return true so if i don't shuffle
22:27 - the board at all
22:29 - it's solved it's showing me it's solved
22:31 - now if i shuffle it in setup
22:34 - it's not solved and i can solve it okay
22:37 - let's make it easier for me to solve oh
22:39 - my god i think i got this i think i did
22:40 - it
22:41 - so let's just shuffle it
22:43 - simple shuffle like
22:45 - five times
22:48 - okay no it didn't pick oh there we go
22:50 - okay great so in theory all i need to do
22:54 - is just click on this element
22:57 - it will move up and go into place
23:00 - solved
23:02 - yay okay awesome so um just for fun
23:06 - cause what are we doing but having fun i
23:09 - am going to
23:11 - have it be eight by eight
23:14 - and i am going to let it shuffle a
23:17 - hundred times
23:21 - like i guess there's more pieces it's
23:23 - not going to pick the thing randomly but
23:24 - hold on this is a little bit harder
23:27 - solved i did it
23:29 - no let's keep it but this is kind of fun
23:31 - because you realize you could do like
23:33 - you know
23:34 - a 20 by 20 slide puzzle here
23:38 - right and how many times do i need like
23:41 - you know obviously again i need a better
23:43 - shuffling algorithm but if i do it 10
23:45 - 000 times
23:46 - you know that's a lot of interesting
23:47 - moves there but let's go back to making
23:49 - it four by four and make this puzzle
23:51 - solvable for myself this is the last
23:54 - thing i'm going to do
23:55 - i'm gonna make it four by four
23:58 - i'm going to shuffle it just 100 times
24:01 - and let's see if i can solve this
24:07 - oh shoot
24:12 - oh wait a sec
24:19 - [Music]
24:22 - i think i did it
24:25 - yes
24:26 - i solved it all right
24:30 - so what can you do well you can be more
24:33 - thoughtful about what image you pick you
24:34 - could add animations there's a million
24:36 - opportunities to refactor this code to
24:38 - make it more s make more sense i mean
24:40 - this object could do so much i started
24:43 - like i need to make this object-oriented
24:44 - but i did not follow through with that
24:46 - but also one prompt that i would have
24:48 - for you is there's no reason you
24:49 - couldn't do this with a video or some
24:51 - abstract generative art drawing i mean
24:53 - so many possibilities there because as
24:55 - long as you have an image even if it's
24:56 - an image that's changing over time you
24:59 - can shuffle it and you can solve it and
25:01 - a move counter for scoring so many
25:04 - things
25:05 - if you like this coding challenge video
25:07 - and are wondering what happened inside
25:09 - all of those little cuts and edits i'd
25:11 - like to encourage you to sign up for
25:12 - nebula and curiosity stream nebula is a
25:15 - streaming platform for me and other
25:17 - educational creators where you can watch
25:18 - ad-free versions of the coding train
25:20 - videos as well as the 45-ish minute
25:23 - uncut version of this coding challenge
25:25 - with all that extra debugging time
25:26 - you'll also find ad-free videos and
25:28 - bonus content from a variety of other
25:30 - great channels like jordan herrod
25:32 - tierzoo and practical engineering
25:34 - you'll also get access to nebula
25:36 - originals that you can't find anywhere
25:38 - else like better elevation a deep dive
25:40 - into new tools creators use to
25:42 - supercharge their productions
25:44 - the best way to sign up for nebula is
25:46 - through curiositystream who are kindly
25:48 - sponsoring this video curiositystream is
25:50 - a subscription service with thousands of
25:52 - documentaries and non-fiction videos if
25:54 - you like the coding train i have a
25:56 - feeling you are going to love watching
25:58 - calculating ada the countess of
26:00 - computing hosted by the amazing dr
26:02 - hannah fry along with numerous other
26:04 - films and series about mathematics ai
26:06 - and computing if you sign up using this
26:08 - link that's going to magically appear on
26:10 - screen or the one that's in the video
26:12 - description promo code coding train you
26:14 - will get 26 off curiosity streams hd
26:18 - annual plan as well as access to all of
26:20 - nebula that's less than 15 for the
26:23 - entire year not per month the whole year
26:26 - it's a great way to support the coding
26:27 - train find ad-free and some uncut
26:29 - versions of my videos as well as
26:31 - discover lots of other wonderful
26:32 - creators sign up with this link or on
26:34 - curiosity stream's website with the
26:35 - promo code codingtrain thank you for
26:38 - watching this coding challenge and i
26:39 - will see you next time on the coding
26:41 - train
26:42 - [Music]
26:52 - you