00:00 - Hello and welcome to what today will be a 15 minute coding challenge!
00:05 - I am going to attempt
00:06 - to program, from scratch, in JavaScript,
00:09 - the snake game.
00:11 - I don't think I've ever done this before, perhaps I have
00:14 - I've certainly made stuff that resembles it.
00:16 - But if you're not familiar with the Snake game,
00:18 - pause this video, Google it, play it - I think you'll find it.
00:21 - Okay, so let's just get started. I kinda want to spend some time getting to know you
00:26 - But I can't because I only have fourteen minutes and thirty seconds right now.
00:29 - So the first thing I want to do is—and I'm in a JavaScript framework called p5js—
00:37 - And p5js requires a setup function
00:39 - and a draw function.
00:41 - And the first thing I'm going to do is just make a canvas.
00:44 - That is, I dunno, 600 by 600 pixels.
00:48 - And we're going to go over here to look at this page
00:51 - There we go, there's a canvas there. It's empty.
00:52 - Boy, I've got to move faster than this.
00:54 - And, now we're going to give it a background.
00:57 - I just want to make sure things are up and running.
00:59 - So, I've got a canvas. Maybe I need to move this over,
01:01 - it's kind of under the timer but whatever, you get the point: There's a canvas.
01:05 - My timer is in the way. Okay, that's fine, it'll get better next time.
01:11 - So, Uhm—
01:11 - So, let's see what we want to do here.
01:13 - So, I want to do this with some object-oriented programming.
01:15 - kAnd I'm going to write something called a constructor function
01:17 - I have some tutorials about constructor functions if you don't know what that is.
01:22 - And what I'm going to do is make an object that has an x and a y
01:26 - And I'm also going to keep track of an xspeed and a yspeed.
01:31 - Because, what I want— and let's just make this one
01:35 - What I want is for this snake object to have some functions
01:39 - Like an update function
01:41 - And what happens in that update function is
01:45 - that x value simply changes by the xspeed value
01:50 - And the y value simply changes by the yspeed value
01:53 - Now, I want another function
01:55 - And I'm going to call it show
01:58 - Because what I want
02:00 - is for...
02:02 - Uhhh, I'm going to draw—
I know, I'm going to draw a rectangle
02:06 - A rectangle at this dot x, this dot y that's, I don't know, 10 by 10.
02:11 - And, I'm going to make that rectangle white.
02:13 - So, the point of this is, I want to have this simple object.
02:17 - It's a Snake object, it has an x and a y, an xspeed and a yspeed
02:21 - it's going to move around the window
02:22 - And its x and y move based on that x- and y-speed
02:25 - At the beginning of the program I can create a variable, I'm just going to name it s
02:29 - Maybe I would want to name it snake in a more normal day of my life
02:33 - But this is a— a little bit of a rushed little project here, so I'm just going to call it "var s"
02:37 - And I'm going to say s is a new Snake
02:40 - And... Uhmm...
02:42 - Then I'm going to say s dot update
02:45 - And s dot show
02:46 - And I might want to move this Snake object to another file, JavaScript file, at some point
02:50 - But I'm not going to worry about that too much.
02:50 - So, I'm sure we got some stuff wrong
02:52 - Well, you can see— Hey, look! There it is; there's my snake.
02:54 - It's moving across the window. Bye Snake! No, come back! No, go away!
02:57 - Okay, whatever
02:59 - So, now— So, that's pretty good.
03:02 - Okay, what happens in the Snake game?
03:04 - I think if you press the up arrow it goes up, if you press the down arrow it goes down
03:08 - left arrow— so we can add something in p5
03:10 - We can add a function that's just sort of like a global event.
03:14 - called "keyPressed"
03:16 - And I can say I think it's key equals UP_ARROW
03:21 - Oh boy, I hope that's right.
03:23 - Oh, "keyCode"
03:24 - I think with these you want to check a built in variable in p5 called keyCode
03:29 - Then I want to say to my snake— I'm going to set a direction like move
03:35 - Zero along the x axis but negative one is up
03:39 - So you can see kind of this idea that I'm doing here, which is—
03:45 - Boy, I hope these are right.
03:47 - —which is this idea that the snake is going to have a new function
03:50 - That's going to allow me to set its direction
03:53 - And if I press up, I want to set its direction to zero, negative one
03:56 - Down: zero, one
03:58 - And then, I also want to do right and left.
04:00 - So let me quickly copy and paste this two more times.
04:04 - And I need a RIGHT_ARROW and a LEFT_ARROW
04:10 - And, if it's moving to the right its x is one and its y is zero.
04:15 - If it's moving to the left its x is negative one and its y is zero.
04:18 - So, of course, this isn't going to work now. We can run this,
04:21 - and I can start hitting keys, but it's going to say "s dot dir is not a function"
04:25 - So, I made up this idea of a function called dir for direction
04:28 - But I need to actually add it to my object
04:31 - And you know, let's be ambitious here
04:34 - Let's take this object and let's make a—
04:36 - This is a little bit dangerous what I'm doing here
04:38 - Let's make a seperate file.
04:40 - I'm going to call it snake.js
04:41 - And paste it back in there.
04:43 - And in my index.html I am also going to add a reference to snake.js
04:47 - This just allows me to organize my code a little bit differently.
04:50 - So, I can have sketch.js that just has setup, draw, and keyPressed
04:55 - And, I can have snake.js which is just the Snake object
04:58 - Oh, my timer thing is in the way of my code a little bit!
05:01 - I've got to work on this more. Okay, that's a little bit better.
05:03 - So, you can see, this is all the code—the constructor function—for making this kind of object.
05:07 - But, what was the point of doing that?
05:09 - I need to add another function called this dot dir
05:11 - And the point of that function was to receive two values: An x and a y
05:16 - And to use those two values to actually set this object's direction.
05:23 - So now, if I receive an x and a y, that's what the xspeed and yspeed become
05:28 - And if I go back to sketch.js,
05:31 - I can see here— There we go
05:33 - That's what I'm doing here. Okay, I got worried that my audio stopped working.
05:37 - But it seems to still be working. I feel like I'm a little bit loud today, let me turn this down.
05:41 - I shouldn't be doing this live in the middle of a video
05:44 - But, whatever.
05:45 - Okay, so now if I do this, we should see—
05:48 - Press down, press to the right, press down, press to the left
05:50 - You can see— now let's do something here
05:52 - Let's think about this for a second
05:55 - We want the snake—
05:56 - One thing we need to think about here
05:58 - and there's lots of different ways to implement this
06:01 - but the canvas, we really want to think of it as a grid
06:04 - Because the snake is actually going to be a large rectangle
06:08 - and as it moves it's going to move to the next spot in the grid, the next spot, then it moves down to the next spot
06:12 - I want some sort of variable to keep track of the size of this grid.
06:17 - I don't know what to call it, I could call it r
06:19 - Let's just call it r, let's call it scl
06:22 - to stand for scale
06:23 - I don't want to call it scale because scale is a built in function in p5
06:27 - So, I'm going to come back over here
06:28 - And I'm going to add a variable, I'm going to call it scl for scale
06:32 - And I'm going to make it 20.
06:33 - And then, actually that's— it could be— it's a global variable
06:37 - And in the snake, I want to have everything based on that
06:43 - So, I want to move by the xspeed— xspeed and yspeed are really just the direction
06:48 - And then I want to draw the sname at that scale
06:52 - And now, if we go back
06:55 - to the browser
06:57 - And I hit refresh— woah it's so fast
07:00 - So— a couple things, let's just add some code really briefly
07:05 - to constrain it
07:06 - this dot x equals— in p5 there's a functon called constrain
07:10 - Where I can say "Hey, take this value x and constrain it between zero and the width."
07:14 - And, you know what, the width minus scale
07:16 - Because, I don't want it to actually go off
07:19 - It's a rectange drawn from the top left.
07:21 - And, uh, this dot y I want to constrain it to the height minus scale.
07:26 - How're we doing? We've got seven minutes left, we're getting somewhere.
07:30 - Okay, so now, we can see that, this is kind of working
07:33 - This is ultimately going to be my snake
07:35 - You know, I might not like what I'm about to do next in most cases
07:39 - but I think it's going to be fine to just really reduce the framerate.
07:43 - Because the snake game is kind of this low-res throwback thing
07:48 - So, I'm just going to globally in p5 in my setup
07:52 - I'm just going to say frameRate, and I'm going to say ten
07:55 - And, now I'm going to refresh it again
07:57 - And, you can see, this looks sort of like what the snake game might be
08:01 - Okay, so, we've got that I can now press the arrow keys and move it around
08:05 - What are the things that are missing now?
08:07 - In the snake game random bits of food appear
08:10 - When a bit of food appears, the snake tries to eat that food.
08:14 - When the snake eats that food, it gets a little bit longer
08:16 - And if the snake ever runs into itself, it dies
08:18 - Oh boy, that's a lot of stuff to do in six minutes
08:21 - Let's get started!
08:22 - Okay, so the first thing I want to do it, let's add a piece of food.
08:26 - So uhm, I want to— oh boy this'll— fine. fine! It's fine! It's fine!
08:34 - No problem, no problem, no problem.
08:36 - I kind of want to make a food object, but we don't have a lot of time
08:39 - maybe I'll refactor that in later
08:42 - let's make a uh—
08:44 - Let's make it a vector.
08:45 - So, I'm going to use createVector which is a quick and easy way to store both an x and a y
08:50 - Of course, I didn't use the vector in the snake, but whatever, it's fine
08:53 - We can be a little messy for fun today
08:55 - createVector, and I'm going to give it a random spot...
08:59 - in the window.
09:01 - And I'm going to, in draw, I'm going to—
09:05 - I'm going to make my food a nice purple or pink color.
09:10 - I'm going to draw food dot x food dot y and I'm going to make it the same size
09:15 - And now we can run it, we can see there's my food.
09:17 - I want to come and get my food now
09:19 - It's not exactly on the grid
09:20 - So, I should probably deal— let's make this correct.
09:22 - So, what I actually want to do in terms of its location is—
09:26 - I'm going to make a function called pickLocation
09:30 - And what that function is going to do is—
09:32 - First we need to know: what are the number of columns?
09:35 - So, it's the width of the window divided by that scale.
09:41 - Then the number of rows.
09:43 - Which is the height of the window divided by scale
09:48 - And then now, I want to create a piece of food
09:51 - that is [in] a random column and a random row
09:56 - And I also want to use floor with both of these. Oh, boy.
10:01 - This is getting to be a very long line of code here.
10:04 - But— so what did I just do?
10:06 - I wrote a function that picks a location
10:09 - because I want it to have— I want it to be only one of these spots in the grid
10:13 - So, I have to divide— this is zero, one, two, three, four
10:17 - Zero, one, two
10:18 - So I need to divide by how big that scale is
10:20 - to pick on of those integers
10:22 - And then, I actually need its actual location
10:26 - I want to multiply it by that scale to expand it back out.
10:30 - And the floor function is everywhere because I need these things to be whole numbers for this to work well
10:36 - So now, you can see, this should— the food—
10:40 - Well, that didn't seem to work!
10:43 - Are we sure I did that correctly‽
10:45 - Ah, that's right— Eh, it's a little bit off
10:47 - I'm not going to worry about that right now
10:50 - Somebody will, uh, uhm—
10:52 - Somebody will correct me— correct this later.
10:55 - It's close enough, I'll fix that later because I only have four minutes left
10:58 - So, what I want to do now is figure out, uh
11:02 - I want to write a function s dot eat the food
11:04 - I want to do something—
11:07 - I expanded myself by five minutes today.
11:09 - Clearly that's not enough time.
11:11 - I want the snake to eat the food
11:13 - So, uhm, in the Snake object I need to add another function called eat
11:22 - Technical difficulties, but I'm back!
11:25 - And what I'm doing right now is I'm writing the function where the snake eats the food
11:29 - So, I need to check if the snake is at the same location as the food.
11:32 - And, okay, while I was having technical difficulties I realised I'm missing something important
11:38 - Which is, we have this whole pickLocation function but I didn't actually call it up here
11:42 - I need—
11:42 - the food's location to be at this thing that I spent all the time doing to make sure it's on the grid
11:48 - So, now that should solve the problem where the food isn't perfectly aligned in the grid with the snake.
11:53 - But let's go back to where we were: snake dot eat
11:56 - So, in the Snake object, this means, I need to write a function called eat
12:00 - and this function is going to receive a position, a vector, for where that food is
12:04 - and, I could check if they're in exactly the same space
12:07 - But I'm pretty sure that if I just use the distance between where the snake actually is (x and y)
12:14 - to where the food is (x and y) and if I just check that that distance is less than one pixel
12:20 - I should probably check two pixels or three pixels, but, whatever.
12:22 - I'm going to say return true.
12:25 - In other words, I want this function to tell me whether or not the snake reached the food
12:31 - And, if it's true what do I want to do with this information?
12:35 - So I want to come back here and say
12:37 - If the snake eats the food then I want to... what?
12:45 - Pick a new location
12:48 - Oh, you know what I realized?
12:50 - It's not— food does not equal pickLocation
12:53 - This function I wrote just sets the location for that food itself
12:56 - So I can just call pickLocation again, it's not returning anything
12:59 - Boy, my mind is getting fuzzy toward the end of these videos with only two minutes left.
13:02 - Let's see, I think we're going to be really close now.
13:04 - So, now we should see— I'm going to move
13:07 - Come on, be on the grid.
13:08 - Look at that, it's right on the grid!
13:11 - And I can eat that piece of food and it will go somewhere new
13:12 - This is fun to play. I don't have time to play this right now.
13:15 - I've got to keep moving.
13:16 - Okay, so what do I need to do?
13:18 - If it gets the food, it needs to become longer
13:20 - How do I keep track of a snake that has a length to it?
13:22 - Well I need some sort of array
13:24 - some sort of variable to keep track of how long is that snake
13:26 - So, let's go back to the code. We've got to go back to the snake object.
13:30 - And let's add something called this dot total, and that equals one.
13:34 - Because, the snake—
13:35 - And, you know what, I'm going to do something a little bit goofy.
13:39 - Which is that I'm going to keep the x and the y as the current location
13:42 - And the array that I'm going to store, the length of that array, is just its history.
13:46 - So, at first its zero as it only has its current location and the rest of it
13:51 - This is actually going to be useful later I just realized.
13:53 - And, I'm going to create another variable called tail
13:56 - which is going to be an array
13:58 - So, one thing for sure is
14:01 - If it eats the food, total should go up by one
14:05 - So, total should go up by one. Now, as it moves...
14:09 - I want to have a loop
14:11 - What goes in this loop?
14:12 - I definitely want to loop through that total
14:16 - And, actually, I want to do all of this right before...
14:22 - Right before it moves, oh boy.
14:24 - I kind of need to work this out, I only have thirty eight second but I need to work this out a little bit in my head here
14:29 - So, if this is the array
14:32 - and this is the snake's current location
14:36 - Maybe what I want is to put its current location in the last spot
14:43 - and shift everything down, the history down
14:48 - So, this is where it was four moments ago
14:51 - Three moments ago, two moments ago, one moment ago.
14:54 - That'll do.
14:54 - So, the first thing I need to do in this array is shift all the spots.
14:58 - So I really want to actually loop through total minus one
15:01 - And I want to say tail index i equals tail index i plus one
15:09 - Now, I'm sure my time has expired now,
15:12 - We're going to see how long this takes
15:14 - I'm going to click a little window here, say okay, and it stops at one second
15:17 - And it's going to say time expired
15:19 - And you know what— we'll leave that there. You'll see how long this video is and that's how long it took.
15:23 - Okay, so this is going to shift everything over by one
15:27 - And then when I'm done, I want the very last spot
15:31 - Which is tail [index] total minus one
15:35 - to equal createVector...
15:41 - this dot x, this dot y
15:43 - So this now allows,— that's its current location and then it can move
15:48 - And so now, when I'm drawing it
15:51 - in addition to drawing the rectangle at its current location, I need to also say
15:59 - Draw all the rect— draw its tail
16:02 - So, I want a
16:05 - rectangle
16:08 - at
16:11 - tail index i— And I realised
16:14 - i've made a classic JavaScript error
16:16 - Classic JavaScript error.
16:18 - I've got this thing called tail, which is really important
16:21 - But, it's this dot tail
16:23 - tail is part of the snake!
16:25 - So everywhere I put tail, I forgot this dot tail
16:28 - This happens to me all the time
16:30 - This is like, the bane of my existence
16:33 - Oh, and this dot total also!
16:36 - Oh, boy
16:37 - So, I think I probably— I'm looking around, this dot tail
16:40 - this dot tail, this dot tail, this dot tail
16:43 - this dot total, this dot total
16:44 - I should just have a big blinking sign in front of me that just says "this dot" "this dot"
16:49 - "this dot" "this dot"
16:50 - Okay, let's run this and see if this works now.
16:53 - Hit refresh, I don't know; I'm sure I missed something.
16:56 - Come on, eat that food, argh!
16:58 - total is not defined on line 12
17:01 - So, there's a place that I forgot it
17:03 - line 12
17:04 - this dot total plus plus
17:05 - let's hope we didn't miss—
17:07 - Okay, I've got to— I'm trying to look at the camera to make eye contact with you
17:10 - And, oh look at that, the snake is—
17:12 - Oh! Cannot read property x of undefined! snake.js:42
17:16 - Okay, it extended by one
17:18 - But how come when it extended by two it didn't work?
17:20 - Line 42...
17:22 - This seems totally reasonable to me
17:25 - So what happened?
17:28 - This show is always happening...
17:30 - Okay, let's think about what order all this stuff is happening
17:34 - Maybe that's the issue?
17:36 - Oh boy, we've really got—
17:38 - This video is going to be a little bit long...
17:40 - because I'm going to debug this now
17:46 - Back again
17:47 - Little bit of splicing and dicing here
17:49 - but I'm going from where I—
17:52 - I'm going from where I want to add the tail of the snake
17:56 - So when the snake eats the food,
17:58 - the total goes up.
18:00 - total is keeping track of how many bits of history of the snake's length do we have left?
18:04 - So, I know what I want to do is:
18:07 - Any time this dot total does not—
18:10 - Okay, so one thing I always need to do, is I always need to shift
18:14 - and I actually have a diagram
18:17 - I'm just going to add this in here
18:19 - What I need to do here is—
18:22 - I always need to shift...
18:27 - ... the tail down
18:28 - I need to shift everything down in the history
18:31 - So, I'm going to say:
18:34 - this dot tail index i equals this dot tail index i plus one
18:38 - This is going to shift the spots down as the snake moves
18:43 - All of its spots shift down so I can get the new spot in the end of the array
18:48 - Right?
18:48 - Because, what I want, is to then say:
18:50 - this dot tail...
18:55 - ... index total minus one...
18:58 - ...equals...
19:00 - ... the new location
19:04 - So, I have this array that always shifts down
19:08 - And I get— I have this array that always shifts everything back
19:11 - and then the new spot goes in the end
19:13 - So, let me explain to you what I mean
19:15 - I have this diagram from my Technical Difficulty part
19:18 - But, err, I'm over here now
19:20 - Argggh
19:21 - Boy, everything is falling apart today
19:23 - Come on over here, button.
19:25 - So, in other words, I have this array
19:28 - Let's just imagine  for a second that this is the history of where the snake has been.
19:33 - So, the new location is going to go in the end
19:37 - and all the other spots will shift down, and the oldest location will be deleted
19:42 - So, this is what I'm doing here
19:44 - Now, if however—
19:47 - The, uhm—
19:48 - If, however, the snake has eaten a piece of food
19:52 - It should actually get bigger and the new location should go over here
19:57 - So, if you think about this, what I'm saying is there's two different possibilities:
20:03 - If this dot total equals this dot tail dot length,
20:08 - meaning that no food has been eaten, so the total is the same as the existing array length
20:13 - then just shift everything over
20:17 - And give me
20:20 - my last spot.
20:22 - Otherwise, only put the new spot in and I don't need to shift
20:25 - So, in that sense this can go over here
20:28 - So, the shifting, this is a small tiny nuance
20:31 - but the shifting only happens—
20:34 - The shifting only happens if we haven't eaten any food
20:37 - because the new spot has to go in here, and everything has to get shifted over
20:40 - If we've eaten food, we just add a new spot on
20:42 - And now— oops, I'm tripping over.
20:45 - Now, we should be able to run this and see—
20:47 - Ah, but you know what? I need to add to draw—
20:50 - I need to also—
20:56 - In show—
20:57 - In the show function, I need to also draw a rectangle where...
21:02 - ... where everything is
21:03 - Oh, I'm losing steam here today.
21:05 - Uhm, okay, so I need to draw a rectangle at:
21:09 - this dot tail index i dot x and this dot tail index i dot y
21:14 - All these will be white.
21:18 - And, I was mucking around with this, let's make this 20
21:22 - Refresh, oops! total is not defined!
21:24 - Ah, I forgot the "this dot"
21:26 - Err, and somewhere here...
21:28 - Erm, under line thirty
21:31 - this dot total - classic JavaScript error!
21:34 - Always forgetting the "this dot"
21:35 - Okay, here we go, now run this again.
21:37 - Come on, I'm going to eat this piece of food
21:39 - and my snake is going to be two rectangles long
21:43 - I'm going to eat another piece of food
21:43 - It's three rectangles long!
21:44 - Another piece of food...
21:47 - It's four rectangles long!
21:48 - Guess what now
21:49 - Now we need to figure out:
21:51 - When should the snake die?
21:52 - Now, I should do something if it hits the edge
21:54 - But, I'll add that in another day
21:56 - What I'm going to do right now is if the snake hits part of its body then it's dead
22:02 - So, this is something we can really just write a new function for
22:06 - this dot death
22:07 - I don't like the word death it seems so—
22:09 - Ah well, fine, we'll just use it as that's what it is.
22:14 - So, what I need to do is:
22:16 - Loop through every spot in the tail
22:19 - And remember the tail does not include its actual head
22:25 - Err this dot
22:27 - this dot tail dot length
22:30 - And, what I'm going to check and see is:
22:34 - I err—
22:35 - I'm going to look at each position which is this dot tail index i
22:39 - and let's look at the distance
22:42 - Again, just like how we checked if it ate the food
22:45 - Let's look at the distance between the x location
22:48 - and that particular spot on the tail
22:53 - If [the] distance is less than one
22:57 - Like if it's really gotten there
22:59 - Really you want to check if they're exactly equal but I'm just—
23:03 - If it's less than one then:
23:05 - I'm going to set toal back equal to zero
23:08 - And this.tail back equal to nothing
23:10 - So, we're just going to have it go back to nothing
23:14 - So, this is now checking
23:16 - If it's— if—
23:16 - If its front location has ever— right?
23:19 - If it's—
23:20 - If whatever is in the new spot is connected with any of these
23:26 - And we need to make sure we do this before we shift anything in
23:30 - because we don't want its current spot to have actually shifted into the array
23:33 - So, now we should be able to go back to sketch
23:36 - and I should be able to add
23:38 - right up here
23:40 - After update— let's do this—
23:42 - Yeah, I think— I don't think it should matter but I'm going to check it before I update it
23:48 - That makes sense, right?
23:50 - Uh, actually, do you know what I think I need to do?
23:54 - Is, I need to check it—
23:56 - No no no no no, this is no good
23:58 - This is actually— We've got to be thoughtful about this
24:00 - I actually want to check it when?
24:03 - I want to check it right here
24:05 - the moment x moves to the next spot
24:08 - Which is fine, because I want to check it—
24:10 - It does this after and then I check and then I do all this shifting
24:15 - So, that should actually be fine
24:16 - So we're just going to say "s dot death" right here
24:19 - And we're going to run this
24:21 - Now, I've got to get it to be a little bit long
24:24 - So I have to play this for a little bit
24:27 - and get good at it
24:29 - Uh-oh. Oh! Big problem!
24:35 - I can't hit the edge, hitting the edge is very bad
24:40 - Let's start over
24:41 - and let's just—
24:42 - I'm going to deal with the edges later, let's just not hit the edge
24:47 - Okay, I think once I'm four—length four— I can probably
24:51 - Ahh, go backwards
24:54 - Oh, no no no, I just died there
24:55 - Because I went backwards
25:00 - Okay everybody, hold on
25:03 - Let's— Let's—
25:04 - Let's  have a little bit of a—
25:06 - Let's actually—
25:08 - Let's go back to this.
25:10 - Let's console log
25:14 - "Starting over"
25:16 - There's a really easy way to test this:
25:18 - Which is just to be able to go backwards, which I should probably protect against.
25:23 - So let's be—
25:24 - Let's be a length one...
25:28 - two..
25:31 - Yeah, you can see I started over because I just went backwards
25:35 - So, we should probably not allow the snake to ever be able to go backwards
25:40 - So I'm going to add something in right now
25:43 - which is— I'm just going to add mousePressed
25:47 - And I'm going to say s dot—
25:49 - I'm going to sort of cheat
25:50 - By just saying, every time I press the mouse
25:52 - I'm going to add as if I'm eating food
25:55 - so we can really test to make sure this is working
26:00 - So, I'm just adding a lot of spots
26:02 - An now, you can see
26:05 - That works
26:07 - So, if I ever intersect one of my existing spots
26:12 - I have to start over
26:13 - So, there's—
26:14 - I'm going to end this now because we kind of have the complete game basically
26:19 - We have the snake object. It has a few bits of functionality, right?
26:24 - It can check to see if it found a piece of food
26:27 - by checking the distance between it and the food
26:30 - If it is, it increases its size
26:33 - We can move it.
26:34 - Which means it keeps track of its history shifting everything down
26:37 - It moves to the next spot and its keeping itself on the screen
26:41 - and it's also now checking to see if it's intersecting with any of its previous spots
26:44 - So, what's missing, that I will add later after the fact when you look at the code for this,
26:49 - Is it's missing: Number 1 is it shouldn't be allowed to go backwards.
26:51 - Maybe it should be, but you know, you as the user of the game should just know not to do that.
26:56 - And also, I need to deal with the edges.
26:58 - So I should also add something in this death function that if you hit an edge, maybe, of the window
27:03 - You also—
27:04 - You also, kind of, lose your life so to speak
27:07 - Which actually, I just realized is happening because of this constrain
27:12 - Because constrain keeps it in the same place as it was previously
27:15 - Which means it will then figure out that is—
27:18 - That it's intersecting where it was previously and call starting over
27:21 - So that's actually working.
27:23 - Okay, this— Uhm— So, uh— And, scene!