00:00 - [DING]
00:01 - Hello.
00:01 - OK, so here's the thing--
00:03 - hopefully by now you
kind of have a sense
00:05 - of the principle
of encapsulation
00:08 - and the idea of making a
template to create objects--
00:11 - item number 1.
00:12 - Item number 2 is maybe
you have a sense of what
00:15 - the syntax for
writing a class is--
00:18 - that template,
constructor, initializing
00:20 - some variables that are
attached to that object,
00:23 - writing some functions
that are the functionality
00:25 - of that object.
00:27 - The reason why you might
want to do this is because--
00:30 - one reason why-- is just
to organize your code.
00:32 - Ultimately, I could
make this exact sketch
00:36 - without all this class
and constructor and all
00:38 - that, I just could
make some variables.
00:39 - But one of the nice
things about this
00:41 - is I have two things
on the screen.
00:43 - I don't have two
x's and two y's.
00:46 - I just have two bubble objects.
00:48 - Because imagine if these things
have a speed and an x speed
00:50 - and a y speed and a
color and a radius.
00:53 - I don't want to have 15 sets
of variables for everything
00:56 - I have to make.
00:56 - I want one set of 15 to
apply to a bunch of things.
01:01 - But one of the things
that I've done here
01:02 - that's not really scalable or
sustainable in a way that's
01:06 - going to be as useful is
what if I want these--
01:10 - right now, they do
move independently
01:12 - of each other, which is nice.
01:13 - But they always start
at the same spot.
01:17 - Now, I could change their
starting rotation to be random.
01:20 - But what if I want to
specify where they should
01:22 - start, or specify a size?
01:24 - So one of the ways
to do that is I often
01:29 - want to say, ah, what
I would like to do
01:31 - is not just make a
bubble, but I would
01:33 - like to make a purple
bubble, or a blue bubble,
01:36 - or I would like to make a fast
bubble, or a large bubble,
01:39 - or a small bubble.
01:40 - I want to be able to modify the
way that I create an object.
01:44 - And the way that I do that is
by adding stuff inside here.
01:48 - I add arguments to
the constructor--
01:50 - new Bubble with a radius of
50 and an x, y of 70 comma--
01:54 - so let me do it the other way.
01:55 - Let's imagine that what I want--
01:57 - I want one bubble
to be at 200, 200,
02:00 - and I want it to
have a radius of 40.
02:02 - And I want the other
bubble to be at 400, 200,
02:05 - and I want it to
have a radius of 20.
02:07 - Now, one of the weird
things about JavaScript
02:09 - is, again, it just
wants to work.
02:12 - So I could add that, and
I could run this code,
02:17 - and it still works.
02:21 - It does exactly the same thing.
02:22 - So those numbers go nowhere.
02:23 - But the idea is just like if
you watch my video about passing
02:28 - arguments to a function,
I can pass arguments
02:33 - to a constructor.
02:34 - And if I do that, what I
want is for the constructor
02:37 - to receive those arguments.
02:39 - So if I'm giving it
three arguments--
02:41 - 200, 200, 40--
02:43 - I need to define the constructor
with three parameters.
02:46 - I think I'm getting this right.
02:49 - These are the arguments--
02:50 - the values, the things
that are passed in.
02:53 - These are the parameters--
02:55 - the variables that go
inside the actual definition
02:58 - of the function-- in this
case, the constructor.
03:00 - So I'm going to add
an x, a y, and an r.
03:03 - So I'm going to say
this.x = x; this.y = y.
03:07 - And you know what?
03:08 - I'm going to create a
new variable called r--
03:11 - this.r = r.
03:13 - And then in draw, I'm
going to actually say--
03:17 - oh, I almost just
typed r times 2.
03:19 - I almost just typed r times 2.
03:21 - I need to say this
dot-- and actually,
03:22 - in p5, with the ellipse
function, if you want
03:25 - the width-- the diameter along
the width and the height--
03:27 - to be the same, I don't
only need one value.
03:30 - So now what I should do--
03:33 - if I run this, we
can see I should
03:35 - be making two bubbles with
different starting locations
03:38 - and a different radii--
03:40 - radius.
03:41 - So those started at
the right location.
03:44 - The size looks the same.
03:46 - What did I get wrong, here?
03:49 - Missing semicolon,
40, 20, this.r * 2.
03:56 - Yeah, they really should
be different, right?
03:59 - Oh, there.
04:00 - I don't know.
04:01 - I just probably forgot to save.
04:02 - So you might be looking at
this and thinking, oh, God.
04:04 - This is the most awful
thing I've ever seen.
04:07 - You named those variables x--
04:09 - the same as the this.x?
04:12 - And actually, if
you look at some
04:13 - of my examples in previous
programming environments
04:16 - that I've used, I
often will do something
04:18 - called this tempX, tempY.
04:20 - This is one of the
most confusing aspects
04:23 - of programming with classes
and creating objects--
04:27 - and then this would
have to be tempX.
04:29 - That would have to
be tempY and tempR.
04:31 - Is that these variables
inside the constructor--
04:33 - they're temporary
local variables
04:35 - just for the sole purpose
of receiving the value
04:39 - and quickly passing it to
the variable that counts.
04:41 - So this.x is the
variable that counts.
04:43 - It's actually the
thing we're going
04:44 - to use to keep track
of where the object is,
04:45 - and draw it and move it.
04:46 - But I can't access it
directly from up here.
04:51 - There are ways that I could,
but they would be weird,
04:53 - and they wouldn't necessarily
make any more sense.
04:56 - So I want this 200
to go into this.x.
04:59 - I need something to temporarily
receive it-- like tempX--
05:02 - and then quickly pass it to x.
05:04 - But maybe I have a bad
habit, but I actually
05:09 - just like to name
these the same name,
05:11 - because I know which one's which
by whether there's a this dot
05:14 - or not.
05:15 - But you will see that
conventions like this,
05:19 - or name them with an underscore,
or an underscore after,
05:22 - or with a temporary--
05:25 - you can come up
with your own style.
05:27 - But it's important to realize
that these are all just things
05:29 - that I've made up-- like
unicorn, fluffy, rainbow.
05:35 - And this code-- which, in many
ways, has its advantages--
05:40 - unicorn-- I'm going to just
play this whole thing out--
05:43 - fluffy rainbow-- just to
prove the point, here.
05:47 - This works as well--
the same exact result.
05:51 - The question is, what kind
of variable naming convention
05:55 - makes sense to your brain?
05:57 - And being consistent
helps, and there
05:59 - are-- you could follow
other people's conventions
06:01 - and styles.
06:01 - But I would say there
are no real rules, here.
06:03 - And if you want to name your
variables unicorn fluffy
06:05 - rainbow, pink fluffy
unicorns jump--
06:09 - whatever it is, I
got it wrong, but
06:11 - fluffyunicorns.fluffyrainbows,
you should make a fluffy--
06:15 - somebody make a fluffy
rainbow p5.js sketch.
06:17 - That's going to be awesome.
06:18 - Just share it with me.
06:19 - OK, so I got a little off track,
there, but the point of it
06:23 - is whatever I put in here--
06:28 - if I say bubble 200--
06:30 - it gets sent all the way to
the constructor definition--
06:35 - some variable.
06:36 - It's like saying let x equal--
06:38 - it's like I'm initializing
x with this value, 200.
06:41 - It goes in here, and this just--
06:43 - if I have this
here-- exists solely
06:45 - to set this value so
that I can use it later.
06:48 - So that's the real purpose
of these temp constructor
06:51 - parameters-- to receive
arguments and pass them
06:54 - to variables.
06:54 - Of course you can use them
in all sorts of other ways.
06:57 - You don't have to follow
this exact design pattern,
06:59 - but it is a typical,
standard one.
07:02 - So if you're watching
this video, what
07:04 - I would suggest to you is see
what else you can add to this.
07:08 - Can you add a color?
07:09 - What's the difference
between making
07:11 - the color random for every
bubble, versus initializing
07:15 - each bubble with a color?
07:16 - What other properties
can you add to this?
07:18 - Play around.
07:18 - Can you add another function?
07:20 - Like, can you add
a function called
07:22 - edges that do something when
the bubble reaches the edges?
07:25 - Is this even really a bubble?
07:26 - What does it mean
to be a bubble?
07:28 - Have we answered that question?
07:28 - I don't think so.
07:29 - So try to add your own
constructor arguments,
07:31 - add additional
constructor arguments,
07:33 - and see what questions
you have and let me know.
07:35 - Thanks very much for watching.
07:37 - [MUSIC PLAYING]