00:10 - please somebody say hello to me
00:13 - somewhere it's been all 45 minutes since
00:17 - I started I'm having so many technical
00:19 - difficulties I don't even know if I'm
00:20 - just talking to myself
00:22 - people are saying yay yay whoo so that
00:25 - must be I don't have the chat so give me
00:27 - a second everybody welcome good morning
00:28 - good afternoon at this point my name is
00:31 - dan I am a person who likes honeydew
00:35 - melons it's gonna soothe me well I need
00:44 - to get the chat going so let me see if I
00:51 - can get that going over here and I live
01:01 - now see myself pop out chat
01:09 - close this I get a new member with the
01:14 - initial D welcome devs okay okay who
01:24 - take to everybody you know maybe I'll
01:28 - come back and do a little QA I'm not
01:30 - gonna do that QA thing again so if you
01:33 - for some reason you are watching this as
01:35 - a recorded archive I just live stream
01:37 - for a little bit I think that live
01:39 - stream from earlier it's just going to
01:41 - wander off into the unlisted category
01:45 - forever this will be the beginning of
01:47 - today's coding train livestream
01:51 - hopefully that nothing will crash I will
01:55 - just be here and I will enter the fourth
01:59 - dimension production values animations
02:04 - music all that stuff that I don't have
02:06 - alright so I'm still getting myself a
02:09 - little bit organized here and I I do
02:18 - like watermelon as is also being asked
02:21 - people say they don't like melon and
02:23 - I've mentioned this before a good
02:25 - freshly cut ripe melon is delicious it
02:31 - has very low acid it's soothing it's
02:33 - healthy what could what could possibly
02:35 - be wrong with I'm all about the fruit
02:39 - okay so let's just begin with the fourth
02:44 - dimension except we need to begin I got
02:46 - to work up slowly to that so let me open
02:50 - up the browser I don't need this do I
02:53 - need this one I'm gonna this ml5 thing
02:55 - that I was talking about I will come
02:57 - back to it another time and I'm going to
03:02 - leave up here understanding 4d this
03:05 - tesseract page actually I want this to
03:09 - like how do I not get it to autoplay off
03:14 - so I guess it's playing anyway I don't
03:19 - know I
03:20 - to just load the page with the thumbnail
03:22 - but that's fine
03:23 - we'll get a nice well make a thumbnail
03:27 - yeah this is pretty good all right then
03:31 - I need to open up process oh I need to
03:34 - get a new version of processing so
03:36 - they're processing 3.4 came out let me
03:38 - briefly download that if you're not
03:41 - familiar with processing it is a Java
03:43 - based program environment don't worry
03:46 - that's the usual problem that I have
03:47 - nothing new here you know we're gonna
03:52 - draw four dimensional melon that's a
03:54 - great idea
03:55 - did I break Facebook thank goodness
04:02 - what's what's what's what's popping up
04:05 - here nothing Mac OS X is what I am and
04:09 - oh it's already downloading I'm silly
04:12 - please support the processing foundation
04:14 - if you are so if you have the ability to
04:20 - do that all right let's move this over
04:27 - here place quit quit
04:33 - replace open yes okay here we go
04:53 - all right so the here's the thing I want
04:56 - to matrix
05:13 - no no no what's that website that I like
05:17 - matrix multiplication dot XYZ maybe yes
05:24 - three-dimensional point and I want three
05:28 - want no no I want this I want three and
05:36 - then I want to this why won't it
05:50 - because it's to the columns the Oh does
05:57 - it need to be oh I'm doing this
05:59 - backwards and then whoops there we go
06:08 - that's what I want I'm sorry about that
06:12 - and can I make these any numbers I want
06:30 - okay
06:31 - all right everybody let's see if this
06:35 - camera is working nope
06:38 - let's see if this brings it back
06:50 - all right so I don't know where this
06:59 - might not have a place in a playlist
07:01 - anywhere but I want I'm gonna do two
07:05 - coding challenges one to render a 3d
07:09 - cube in two dimensions and one to render
07:12 - a hypercube of four dimensions in 3d
07:15 - which is actually rendered in two
07:17 - dimensions so those are the two coding
07:19 - challenges I'm going to do I need to
07:21 - have a function in processing which will
07:23 - do matrix multiplication for me in order
07:25 - to do these challenges so I am going to
07:28 - quickly iMessage actually before I
07:30 - started I'm gonna quickly code a simple
07:33 - function that just takes two
07:35 - 2-dimensional arrays in and returns a
07:38 - new two-dimensional array with the
07:39 - result of matrix multiplication all
07:42 - right so that's what this first video
07:44 - which may or may not even be a video
07:46 - separately edit a video I don't know yet
07:48 - but I might as well talk it through
07:49 - while I'm doing it hello this video is
07:53 - about just matrix multiplication that's
07:55 - the only thing it's about and I'm going
07:57 - to show you I'm gonna write a function
07:58 - to do matrix multiplication with simple
08:00 - two-dimensional arrays in processing
08:02 - which is the java programming language
08:04 - so really I'm writing a Java function to
08:07 - do matrix multiplication now if you want
08:08 - to know a lot more about matrices and
08:10 - matrix multiplications I'll refer you to
08:13 - the three blue one Brown series on
08:16 - linear algebra but I also do have my own
08:18 - videos where I code a simple matrix
08:20 - library in JavaScript but this video is
08:24 - an anticipation of doing some 3d make 3d
08:29 - graphics in 2d so projecting a 3d shape
08:32 - into two dimensions and so to do those
08:35 - tutorials
08:36 - I need a function that will do matrix
08:38 - multiplication for me so if you're
08:41 - watching it if you're watching this this
08:43 - is why so what is what is the matrix
08:49 - that doesn't that was no good they
08:52 - headed that out alright so a matrix is a
08:59 - two-dimensional table of numbers so for
09:02 - example
09:04 - this is a matrix now this is by the way
09:09 - what's often referred to as the identity
09:13 - identity matrix this is a matrix that
09:17 - when multiplied when you multiply this
09:20 - matrix by hold on where's my fancy new
09:28 - eraser
09:36 - people are complaining that job is about
09:38 - Linus is so much hold on I'm just
09:43 - looking for something I know I'm over
09:45 - here but just give me a second where I
09:57 - can't find that's fine
09:58 - I bought these new erasers here we go
10:06 - when you take one matrix and multiply it
10:12 - by another let's say this is the other
10:15 - and I'm going to write x Y Z here the
10:21 - number of columns of the first matrix
10:28 - must match the number of rows of the
10:33 - second Matrix and you can't see me
10:35 - writing that off my game here at least
10:40 - I'm not least the streams appears to
10:42 - still be working the number of when I
10:48 - perform matrix multiplication oh can you
10:53 - hear the furniture being rolled back and
10:55 - forth in the hallway let's see if that
11:06 - quiets down
11:13 - now ordinarily when we're talking about
11:16 - multiplication
11:18 - let me just it's gonna be amazing if I
11:27 - ever make it to the fourth dimension
11:29 - make it to the fourth dimension and then
11:31 - I'm just going to this is kind of
11:37 - interesting what this does what happens
11:39 - if I spray some water well that's good
11:43 - whoa this really cleans it well so did I
11:46 - do it what this side that's the like wet
11:49 - side and then this side is like the dry
11:51 - side
11:52 - maybe alright yeah take 479 all right
12:06 - don't worry this is gonna start to move
12:08 - along
12:19 - oh wait I'm getting an interesting
12:21 - comment from Adam Jay Austin doesn't
12:23 - that need to be the 3x3 matrix to be an
12:26 - identity yes that's the 2d identity make
12:30 - tricks though with just I guess let me
12:37 - look at what I did over let me check
12:39 - something here yeah but it's my sense of
12:53 - what I'm talking about and well not
12:54 - won't make sure that that this is the
12:57 - identity matrix for two dimensions so if
13:00 - I want to project a three dimensional
13:02 - point into two dimensions without
13:05 - stereographic perspective then this is
13:08 - the matrix I would use yes or square
13:12 - yeah good point okay fine
13:14 - well I'm starting over but I don't need
13:16 - this would yeah my identity would be so
13:21 - what's my terminology is wrong but
13:23 - because this would be oops no this would
13:30 - be the identity matrix but what I'm
13:33 - doing is I'm doing some for it to be a
13:37 - 2d identity needs to be a 2 by 2 matrix
13:38 - with ones down the diagonal and zeros in
13:40 - other places yes so this is the identity
13:43 - matrix for 3 dimensions so my my my
13:48 - terminology is incorrect this is this is
13:53 - a this is a projection matrix that just
13:58 - eliminates the Z so I know maybe that I
14:05 - can't call that an identity matrix but
14:09 - if I go to ortho graphic projection and
14:19 - here we would see oh I guess technically
14:25 - I should be putting but I feel like
14:27 - these don't matter right because that's
14:30 - just going to give you 0
14:32 - so the way I always do it is just leave
14:36 - that out but and this is not identity so
14:39 - it's not an identity matrix and then
14:41 - actually this site this is for like the
14:45 - project there's more to it than this
14:46 - okay
14:54 - yes you write shade in the chat is
14:58 - making a very good point
15:01 - 2d shadow of a 3d object aka square all
15:05 - right all right everybody I won't use
15:07 - the word I'd am glad okay so alright so
15:13 - what is a matrix matrix is a
15:21 - two-dimensional table of numbers for
15:25 - example this is a matrix and I could
15:31 - write on mass I'm gonna write three
15:33 - zeros down here just wrong no you know
15:34 - what you know what just for my for
15:37 - demonstration purposes I'm gonna leave
15:39 - it like this because this is actually a
15:40 - matrix that I'm going to use in my code
15:42 - itself this is a matrix it is two rows
15:46 - by three columns okay now I'm gonna show
15:52 - you here's another matrix here is
15:54 - another matrix and I'm just going to
15:56 - write X Y Z this matrix is three rows by
16:05 - one column right and so one thing that's
16:10 - very important is that when you do
16:13 - matrix multiplication matrix
16:14 - multiplication only works if the columns
16:18 - of matrix a match the rows of matrix B
16:23 - and you can see those match up here now
16:25 - what do I mean by matrix multiplication
16:26 - how do we multiply these two things
16:28 - normally when I say multiplication I
16:30 - might mean something like you know 2
16:32 - times 3 which equals 6 or I could even
16:35 - like do something where oh I have these
16:39 - two what if I what if I did some like 3
16:43 - 1 4 and I just said
16:45 - two to one you can almost think of
16:47 - multiplying these and getting a new
16:50 - matrix that's 3 times 2 which is 6 1
16:54 - times 2 which is 2 4 times 1 which is 4
16:58 - but that's not matrix multiplication
17:01 - this is what's known what I just did
17:02 - here is what's known as element wise
17:06 - element wise multiplication it's not
17:09 - what I'm talking about here what I'm
17:11 - talking about here is matrix
17:12 - multiplication also relates to something
17:14 - called the dot product you know I'm
17:16 - gonna I there's too much to talk about
17:18 - forever and ever in this video I really
17:20 - just want a function to perform matrix
17:22 - multiplication with this and what this
17:24 - does is basically the way that this
17:28 - works is you matrix multiplication which
17:30 - I don't really like a good symbol for it
17:32 - so I'm just gonna write matmo right here
17:35 - basically I'm going to take this row and
17:39 - multiply it by is that right yes yes
17:50 - yeah yeah okay got confused here I'm
17:56 - gonna take this row and multiply it by
18:00 - this column sorry I'm just confused here
18:07 - if that had two columns it would still
18:12 - the number of rows
18:18 - hold on boy I already made a whole video
18:25 - about matrix multiplication and I like
18:27 - said to myself you never want to do this
18:29 - again I've done so many times but we're
18:33 - gonna do it again anyway alright let's
18:36 - actually so okay I want to do matrix
18:38 - multiplication let's go back to that
18:40 - webpage that I was at at the beginning
18:42 - and I'm going to I'm going to press
18:46 - multiply here let's see what happens
18:48 - whoa look at that it went up and then
18:54 - went sideways that's interesting let's
18:55 - go to next whoo look at that so what so
18:59 - what just happened there look at this I
19:01 - am going to take this row and multiply
19:07 - it by this column in a way that this
19:10 - number gets multiplied here this number
19:12 - gets multiplied here this number gets
19:13 - multiplied here and they all get added
19:15 - together so what I'm going to get is 1
19:19 - times X plus 0 times y plus 0 times Z X
19:25 - now I'm gonna do exactly the same thing
19:28 - we can confirm this then we do exactly
19:32 - the same thing for the second row press
19:37 - this button I'm gonna take 0 times X
19:40 - plus 1 times y plus 0 times Z and I'm
19:44 - gonna get Y and then I am done so 2 by 3
19:51 - matrix multiplied by a 3x1 matrix
19:56 - results in what a 2 by 1 2 by 1 matrix
20:02 - now so this is the basic idea this is
20:07 - actually the reason why I'm showing you
20:09 - just this one scenario is this is what's
20:11 - going to happen over and over again in
20:13 - the videos I'm about to make about
20:15 - taking a 3d point with an x y&z and
20:18 - projecting it into two dimensions and
20:21 - what this matrix actually just did is
20:23 - just eliminate the Z it's as if I am
20:27 - looking straight on at a
20:30 - three-dimensional object
20:31 - and I just can't see the Z at all okay
20:35 - so now let's go and write the code to do
20:41 - this matrix multiplication yeah so
20:52 - Mobius in the chat just put it better
20:54 - it's a 2d shadow of what I'm looking at
20:57 - here is the 2d shadow of a point in 3d
21:02 - okay so now let's open up processing and
21:05 - let's so how am I going to make a matrix
21:07 - so I'm gonna do I'm gonna call this
21:11 - first matrix I'm going to make it a
21:13 - two-dimensional array a projection and I
21:16 - can just say what I say 1 0 0 and I'm
21:20 - gonna format it in my own goofy way 0 1
21:24 - 0 and then I'm gonna say float point
21:31 - equals now this is silly but I'm gonna
21:33 - do 175 50 okay so let me just do this
21:43 - and let me do matrix multiplication all
21:53 - right what's wrong here and need another
21:55 - bracket all right so you can see and I
21:59 - guess if I want to be consistent I could
22:02 - do this and there we go so these are my
22:08 - two matrices I have this one and I'm
22:14 - just storing them as two-dimensional
22:15 - arrays and I'm basically the first array
22:20 - the first index is which row and the
22:23 - second index is which column okay so
22:25 - that's what I've got right now so now I
22:27 - need to write a function I want to write
22:29 - a function which is going to return
22:31 - another two-dimensional array to call it
22:33 - mat mul and it gets as its arguments to
22:41 - one-dimensional arrays now here's the
22:44 - thing
22:45 - um I'm looking at the chat what did I do
22:55 - wrong
22:59 - yeah okay so this is my function for
23:07 - matrix multiplication now it's
23:08 - complaining at me what is it saying oh
23:10 - it has like some errors I don't see any
23:15 - errors
23:24 - my ate has an extra space oh thank you
23:47 - I'm just looking why no let me just see
23:50 - something
24:07 - oh but it's not void what's I'm like
24:16 - losing my mind because I don't know Java
24:17 - anymore
24:32 - okay
24:40 - it's just because I haven't returned
24:41 - anything right no
25:01 - it should be fine as a local
25:08 - why is I think it's a this is so weird
25:17 - if I just like forgotten Java completely
25:20 - oh oh oh it's just a weird processing
25:27 - thing okay all right okay ignore me I'm
25:38 - back oh my god our him nowhere close to
25:46 - this okay okay okay all right first
25:53 - since I'm in processing let me just add
25:55 - a set up function here because the idea
25:57 - is what I want to do is I want to say
25:59 - float result being a new matrix is is
26:03 - something like the result of matrix
26:06 - multiplication between the projection
26:10 - and the point Matt mole so I need to
26:15 - write my own function of course it's
26:17 - complaining to me because it doesn't
26:18 - know what this is I need to write my own
26:19 - matrix multiplication function so I'm
26:22 - gonna go ahead and do that right now and
26:23 - I'm gonna say this is a function that's
26:26 - also going to return a two-dimensional
26:28 - array and it's going to take two two
26:33 - matrices in which are two and then it's
26:37 - got to return something so let me just
26:38 - add return null at the bottom here so
26:40 - now I should have no errors no errors so
26:44 - this is now this is what I want to do I
26:45 - have projection point I want to be able
26:49 - to matrix multiply both of those and get
26:52 - the result so how do I do that well one
26:55 - thing as I need to do is I need to know
26:58 - columns a is a dot right okay how is it
27:04 - a dot length and then rows a is a index
27:09 - 0 dot length does it not let me do that
27:11 - yes okay so in other words I first want
27:14 - to figure out the columns and rows of
27:16 - each one of these because that's going
27:18 - to be pretty important
27:19 - now it's a two-dimensional array so if I
27:24 - say index 0 the length that's actually
27:29 - that's the number or no so this is the
27:30 - columns this is the columns right the
27:34 - number of things in it is the number of
27:37 - rows right we can see here like just a
27:40 - dot point dot length is three point
27:44 - index zero dot length is one so that's
27:46 - the columns of a and and now the columns
27:50 - and rows of B or B dot zero dot like now
27:54 - this assumes that there's at least one
27:56 - thing so an empty matrix this is going
27:58 - to give us an error but big deal now the
28:01 - other thing that I need to look at is I
28:03 - need to make sure that the number of
28:08 - columns of a matches the number of rows
28:12 - of B so if columns a does not equal rows
28:21 - B then I'm going to just like return
28:25 - null and maybe print line columns of a
28:30 - must match rows of B ok so now we have a
28:34 - little and then now assuming that
28:36 - everything is okay I can now say float
28:39 - result is a new array with the number of
28:48 - so hard the number of rows of a and the
28:52 - number of columns of B the number of
28:58 - rows of a and the number of columns of B
29:03 - okay so now we can just go through just
29:11 - pause for a second
29:21 - oh there's a great comment in the chat
29:24 - why would they be float I'm pretty sure
29:26 - not linked as an INT yes these should be
29:29 - integers there's no reason to make them
29:31 - a float in fact it's only going to cause
29:33 - me problems I'm just so used to
29:35 - programming in JavaScript I don't have
29:37 - to worry about this stuff and so to me
29:38 - float is like var let that sort of thing
29:41 - but great pointer Const okay so that's a
29:43 - really great point now pause again for a
29:49 - second
29:54 - what I okay so what I need to do first
29:57 - of all is I need to fill every single
29:59 - spot of the resulting matrix so I need
30:03 - to go through all of the rows and then I
30:09 - need to go through all of the columns
30:17 - whoops
30:18 - result oh wait wait
30:22 - yeah result this is silly cuz I could
30:23 - just use rows A's and calls B but I'm
30:25 - gonna owe these don't have sorry I need
30:29 - to go through all the rows which is rows
30:31 - a and all the columns which is columns B
30:33 - sorry I was imagining like in my
30:37 - previous and this is for I made this
30:40 - matrix library so this could be the
30:42 - beginnings of a matrix library
30:44 - potentially if you wanted to write your
30:45 - own fun have at it I'm like Sisyphus and
30:50 - I just programmed the same stuff over
30:52 - and over again and I make the same and
30:54 - then I get all the way up to the top and
30:56 - my matrix thing works and then it the
30:58 - matrix multiplication rolls all the way
30:59 - down to the bottom the hill I forget how
31:01 - it works if we lay and have to like push
31:02 - it all the way back up again this is my
31:04 - life
31:04 - alright so okay so now what I need to do
31:08 - is now do that dot product the reason
31:12 - why I say dot product is really what
31:14 - this is is it's the dot product of these
31:17 - three numbers with these three numbers
31:19 - so I need to take row from one and the
31:23 - the row and the column here okay so what
31:26 - I'm gonna do is so the dot product needs
31:28 - a sum so I'm going to say sum is zero
31:32 - then I need to go through
31:35 - all of the columns again I guess I'll
31:38 - call this K columns B and then I need to
31:47 - add up what do I need to add I need to
31:52 - add the the the J sorry I need to add
32:00 - this which is in position most in
32:04 - position zero zero but that's really
32:07 - positioned okay I think plus a I K times
32:17 - B K J does that make sense right because
32:22 - I'm going through all the columns of B
32:24 - all the rows of a and then K is just
32:28 - moving moving me along all the columns
32:34 - of a and all the rows of B right this is
32:39 - so I'm gonna go through I'm in column
32:43 - I'm in row I and I'm in column J and
32:47 - then I'm gonna take K which from row I
32:51 - times from column I times Rho Rho J
33:02 - right though I actually think I have
33:04 - this right
33:05 - but basically what I let me let me
33:07 - actually make this more clear this is
33:09 - row I column K and so row when Rho I is
33:14 - 0 K is the thing going up this is Rho K
33:19 - is the thing going up column J which is
33:23 - fixed here just zero so look at that
33:26 - this should be what I have here I want
33:28 - to take and multiply add all those
33:30 - things together and guess what you might
33:33 - have to pause this video and and and
33:34 - make sense of this yourself I shouldn't
33:37 - practice this the result I comma J is
33:40 - that son so now I should be all say
33:46 - return results
33:49 - results oops
34:00 - return results this is by the way what
34:03 - happens when you don't have numpy your
34:07 - life becomes I'm sure there's plenty of
34:09 - matrix libraries for Java I just can't
34:11 - bring myself to use them alright first
34:13 - let's just run this and see if I get any
34:15 - errors so no errors came up that's good
34:17 - I want to write a function I'm gonna
34:18 - call it log matrix or let's call it
34:26 - print matrix
34:29 - oh that's already a function in
34:31 - processing actually oh so great if we
34:33 - get to show that later all this is so
34:34 - exciting
34:35 - okay I'm gonna call I'm just called log
34:38 - matrix and it's gonna get matrix M and
34:44 - then first we're just going to get the
34:46 - columns and rows columns and rows and
34:52 - then I'm going to print line columns by
34:57 - oh no rows by columns then I am going to
35:04 - print line some nonsense and then I'm
35:11 - going to say I'm gonna do this nice
35:12 - little loop again this double loop and
35:17 - this is rows and this is columns and I'm
35:20 - gonna say print matrix row column plus
35:32 - plus a space and then when I get to the
35:36 - end I'll do print line and now what I
35:41 - should be able to do is I should be able
35:42 - to say to test if this works I should be
35:47 - able to say log matrix projection log
35:53 - matrix point log matrix result
36:00 - so now let's see if anything I did work
36:04 - correctly all right let's look
36:07 - oh no no no it's wrong well I've gotten
36:09 - close so okay first of all let's let's
36:13 - do an extra I need an extra print line
36:16 - in my log function
36:19 - let's do when it's done let's do an
36:21 - extra print line okay we run this again
36:24 - so I have some mistakes so the good news
36:26 - is this is right two by three this is a
36:30 - two by three matrix and that looks right
36:34 - this is a three by one matrix three rows
36:37 - one column that looks right and the
36:39 - result should be ups and there and the
36:54 - result should be oh wait hold on a 2 2
37:02 - by 1 matrix
37:03 - 7550 now I
37:07 - oh we're not 7550 I used different
37:09 - numbers it should be 175 I mean
37:13 - technically if I want to match that web
37:14 - page let me go back how can I go back
37:18 - no whoops ah okay whatever you get the
37:21 - point I lost everything
37:22 - Oh what was I doing this should be we
37:29 - know this should be 175 that's what I
37:32 - should see right 175 X Y so something is
37:35 - wrong in my matrix math calculation so
37:39 - let's look at this I'm staring at it as
37:47 - if as if that's going to help
38:05 - hold on a sec here look at some other
38:08 - code I wrote the other day rose a rose a
38:23 - columns B oh this should be this is
38:29 - columns a let me just make sure that's
38:33 - right yeah whoops okay that's the
38:38 - mistake okay I found my bug this right
38:45 - here this is the bug this is the
38:46 - offending line of code columns B why is
38:50 - that wrong that is wrong that is most
38:53 - definitely wrong let's go over and look
38:55 - as to why it's wrong remember how I was
38:57 - saying K is counting through each column
39:02 - here and then counting through each row
39:05 - here that's the whole thing that has to
39:07 - be equal three columns three rows three
39:10 - columns three rows so that number could
39:13 - either be columns a or rows be either
39:17 - one of those things is that what I put
39:19 - in there no so this should be columns a
39:23 - could be rows B that would also work and
39:25 - I am now going to run this again and
39:33 - voila we performed matrix multiplication
39:39 - now I need I want one more I need one
39:41 - more helper function if you will bear
39:43 - with me what I need now also I'm going
39:48 - to need this for for the future in these
39:53 - videos that I'm intending to make I need
39:55 - a function because I'm gonna use P
39:57 - vectors a lot so a P vector by the way
40:00 - like P vector V is typically how I'm
40:04 - going to want to represent a point so if
40:07 - I want to represent a point I don't want
40:09 - to have to write it like this all the
40:10 - time my code that's gonna be a major
40:12 - pain but if I want to do matrix
40:14 - multiplication I'm gonna want a some
40:16 - tool to convert from a point to
40:19 - he vector to a matrix so I want to
40:22 - function Veck back to matrix that
40:28 - receives a P vector and then I want to
40:31 - function probably also matrix to bec
40:37 - that receives a a matrix and so let's
40:45 - write both these functions so this
40:48 - should be pretty easy I just want to
40:50 - create a matrix which is it has one no
40:58 - three rows at one column and then I mean
41:02 - I'm gonna be really lazy about this I'm
41:03 - gonna say M 0 0 equals V X and then
41:12 - whoops 1 I can't type 1 and 2 V dot yv
41:18 - dot Z that's useful and then I just say
41:21 - return M then I'm gonna write the other
41:25 - function here now which is I'm gonna say
41:29 - P vector V is a new P vector and V dot X
41:36 - equals M what am I saying here which is
41:43 - M 0 0 V dot y equals M 1 0 now I might
41:49 - get some matrices back that don't have
41:54 - that many rows so only if m dot length
41:59 - is greater than 2 2 then I can say V G
42:05 - equals M 2 index 0 and return V so
42:11 - assuming these helper functions are
42:13 - written correctly now I don't need this
42:17 - I'm going to take this out and I'm going
42:20 - to say we're set up I'm going to say
42:24 - float point equals Veck 2 matrix
42:34 - Veck to matrix V now I can do that
42:38 - then I also want to say just to be sure
42:42 - I'm gonna say yeah I'm gonna say now I'm
42:49 - also gonna say P vector V equals matrix
42:54 - to Veck result and then print line V
42:59 - also okay let's run this now and we
43:02 - should see what do we got so I have my
43:08 - two by three matrix my vector got so I
43:11 - really just to be clear about this I
43:13 - should probably say right up here also
43:16 - print line V so just to see that
43:21 - everything worked this is my P vector
43:24 - 175 50 this is my projection matrix this
43:30 - is my P vector converted to a 3 by 1
43:33 - matrix this down here is the result of
43:38 - the matrix multiplication as a vector
43:40 - and this down here is that same result
43:45 - all of this to just take the Z component
43:48 - out but oh boy we're ready now we're
43:52 - gonna have rotation matrices I'm ready
43:53 - I'm ready I'm ready to move from the
43:56 - first dimension to the second dimension
43:58 - so I look forward to seeing you you can
44:03 - check this video's description for links
44:05 - to where I actually do 3d rotations in
44:08 - 2d and then eventually 40 rotations in
44:11 - 3d see you there
44:17 - Kelly asked can you just overload Matt
44:19 - Moll that receives a point then converts
44:22 - it to a matrix then calls Matt Mull -
44:24 - they call the other one yes that is a
44:26 - great suggestion that is a great
44:35 - suggestion let's do that
44:42 - all right oh one more thing
44:46 - suggestion from Kelly in the chat in
44:49 - terms of making a useful helper function
44:51 - it would be really nice for this here to
44:55 - be right the first thing that's passed
44:57 - in the second thing is the vector so so
45:02 - I should have an option where this is a
45:05 - vector and then I would just say I could
45:10 - just quickly come over Liz's overloading
45:13 - the function I'm running a same version
45:14 - of function but with a different
45:15 - argument this is how this is done in
45:16 - Java I would say Beck to matrix B and
45:22 - then I would say return Matt mall a M
45:27 - right so if I do that then now I can get
45:32 - rid of this line and I can just say V
45:36 - here and I should have the same result
45:41 - and get rid of this log I don't think I
45:42 - need these logs anymore just to make
45:44 - sure it works
45:45 - yep so that that worked we can see that
45:47 - worked as well so this makes our life a
45:49 - little bit easier now again this is by
45:52 - no means comprehensive in terms of
45:55 - matrix mathematics but I happen to know
45:57 - that for the next video I'm going to
45:59 - make where I'm going to take 3d points
46:01 - and project them into 2d this is all
46:03 - that I need see you in the next video
46:08 - which I will link to through the magic
46:10 - of the linking of the things
46:15 - all right everybody we're getting closer
46:20 - so one thing I want to do is now just
46:22 - take all these functions and I'm gonna
46:28 - make a new sketch I'm gonna call it a 3d
46:34 - 3d projection 2d or I'm just gonna call
46:38 - it 3d into 2d and of course one thing
46:43 - you should note about processing because
46:44 - processing makes java classes you can't
46:46 - start a java class with a number so it
46:48 - actually renamed it for me sketch
46:49 - underscore which is absolutely fine then
46:52 - I'm going to make a new tab I'm just
46:53 - gonna call it matrix and I'm gonna put
46:56 - all this stuff back to matrix matrix
46:57 - Tyvek I don't need this here log matrix
47:01 - is useful and then the matrix
47:02 - multiplication functions alright
47:06 - everybody
47:08 - okay got a little momentum now I'm going
47:22 - to come over here and erase the
47:24 - whiteboard questions do I have any props
47:32 - if I had a nice like cube boy I don't
47:41 - know about this I don't know about this
47:43 - I was promised perfect clean whiteboard
47:48 - erasing sustainable eco-friendly
47:51 - perfectly clean whiteboard erasing
47:54 - doesn't seem to be working out but maybe
47:56 - if I now switch to the other side have I
47:58 - done this wrong for music was I supposed
48:02 - to use the other side first I don't know
48:04 - which side is which should read the
48:09 - instructions
48:23 - okay
48:29 - okay I'm curious with if anybody in the
48:35 - audience who actually happens to have
48:37 - been watching all of this never done
48:39 - matrix multiplication before but kind of
48:41 - knows processing were you actually able
48:43 - to follow that I would like to know all
48:48 - right
48:49 - I did Simon wrote a message about PZ cam
48:52 - which is interesting Luke writes yes so
48:57 - I did see that I'll have to research
48:58 - that thank you maybe share some more
48:59 - information with me about that after the
49:02 - stream get expo spray no no you see I
49:07 - bought these things because they say
49:09 - they don't need any special spray they
49:12 - just work with water and I want to not I
49:15 - don't know
49:16 - poison the world all right so now all
49:24 - right now have you need to code
49:26 - something up really quickly
49:30 - [Music]
49:48 - so what I'm gonna do right now is I'm
49:51 - going to create a sketch using the p 3d
50:00 - renderer and I'm gonna say box 100 and
50:12 - I'm gonna say float angle equals zero
50:15 - and I'm gonna say rotate X by angle
50:20 - rotate Y by angle two times two and
50:25 - rotate Z by angle times three and then
50:33 - I'm going to say angle plus equals zero
50:38 - point one we're gonna run this oh and
50:44 - I'm gonna say stroke 255 no fill and I'm
50:53 - also going to put it in ortho so I'm
50:58 - going to do it worth the graphic
50:59 - projection okay just to be clear let me
51:07 - also make the stroke weight a little bit
51:11 - brighter okay that looks pretty good I
51:19 - feel like this should be bigger let's
51:22 - make the Box 200 this for just in terms
51:26 - of people being able to see it okay
51:29 - great now I'm just curious I'm gonna
51:31 - comment out ortho for a second well
51:37 - actually I kind of like having ortho in
51:39 - there that's crazy
51:40 - Oh guess because I haven't really I
51:41 - didn't really set it back or anything
51:43 - but that's fine okay
51:51 - now let's go here
52:06 - all right great this is all I need
52:11 - [Music]
52:18 - okay I think I have everything I need
52:23 - this can go further over this way to
52:28 - here so then the browser can go over
52:30 - here
52:43 - all right let me know if I am back with
52:46 - the message in particularly in slack
52:48 - because I do not have I do not have the
52:53 - YouTube chat open although I'm about to
52:55 - try to open that back ok great
53:12 - sorry about this I really wish I knew
53:15 - what was going on I some days this just
53:19 - happens constantly in other days I
53:21 - stream for hours and hours in this dozen
53:22 - time I should mention that I have Ray
53:25 - casting eventually I should mention that
53:30 - I have a meeting at 2:00 p.m. I didn't
53:34 - imagine I'd be streaming from 11:30 all
53:36 - the way up until 2:00 I will come back
53:38 - after that meeting I've come to finish
53:40 - this today I'm not going anywhere until
53:42 - I finish this but we'll have to take a
53:47 - break I think since I had to stop and
53:50 - start the stream so many times
53:53 - unfortunately I think YouTube will only
53:56 - blast to such and such Channel is live
54:02 - notifications per day so I may have used
54:05 - up all of mine so for when I come back I
54:09 - will create an event you're just gonna
54:11 - have to like check a little bit more
54:12 - manually go to the home page the code as
54:14 - soon as this is done I'll just schedule
54:15 - probably like 4 o'clock Eastern time is
54:17 - when I will return to be clear I'm not
54:20 - leaving now I still have another 45
54:23 - minutes then I'm gonna take a break have
54:24 - a meeting eat something and come back
54:28 - yes ok
54:30 - ah oh my goodness I knew I should have
54:34 - never done 4 dimensions alright so I
54:36 - don't know where I last left off but I'm
54:38 - just ready to just move on ok
54:46 - hello welcome to a coding challenge and
54:49 - I can summarize this coding challenge
54:53 - very quickly in one sentence this is a
54:56 - spinning cube it is a three-dimensional
54:59 - cube that you are seeing on your
55:01 - two-dimensional screen I am able to
55:04 - create this three-dimensional cube
55:06 - because I am using the p 3d renderer
55:09 - processing Java based creative coding
55:12 - development platform thing I can make 3d
55:15 - stuff using the P 3d rendering engine
55:18 - and then functions like box and rotate X
55:22 - and rotate wine rotate Z and that is how
55:24 - I get this but how does this really work
55:28 - how does the processing even make this
55:29 - happen I am going to do the most basic
55:32 - simple thing I am going I said what said
55:34 - something like twelve senses I'm like
55:36 - two hundred sentences am I being
55:37 - perfectly honest I am going to change
55:40 - this from P 3 D 2 P 2 D I'm going to
55:44 - eliminate all of the 3d rendering
55:48 - capabilities I allow myself to use any
55:50 - of them and yet I'm going to recreate
55:52 - exactly this same visualization I'm
55:55 - going to do matrix rotations projections
56:00 - those sort of things so this is not
56:02 - going to be comprehensive like how to
56:04 - build a 3d engine with ray casting or
56:07 - ray tracing and lighting and shadow and
56:09 - all sorts of like comp trains
56:11 - complicated stuff I'm gonna just do the
56:13 - basics just to create this 3d illusion
56:15 - in 2d I'm really because because if I
56:20 - can use the P 3d if I can create the 3d
56:22 - illusion and render to the 2d space what
56:26 - if I create a 4d shape and then render
56:31 - it into P 3d space right if I can
56:34 - project a 3d object into 2d space
56:36 - there's no reason why I couldn't project
56:38 - a 4d object into 3d space computers
56:46 - gonna melt and I'm never gonna make any
56:48 - videos again before I'll just stick with
56:49 - this that's what I'm gonna do in this
56:51 - video
56:59 - okay people are asking about the melon
57:03 - this will have to be a little edit point
57:08 - this my friends is otherwise known as
57:12 - space melon it is a special invisible
57:16 - melon that I like to eat but really oops
57:19 - shoot it just looks like this okay
57:26 - it's honeydew honey dew melon alright
57:35 - alright okay okay so let's begin coding
57:43 - so I am going to take out I'm gonna hit
57:46 - save and I'm gonna take out all this 3d
57:48 - stuff I'm gonna leave translate stroke
57:50 - stroke wait no Phil I'm not gonna be
57:53 - able to use these anymore I'm not gonna
57:55 - be able to use these anymore I'm gonna
57:56 - leave all this and I mean p2d I actually
57:59 - I'm gonna take out p.2d nice to say that
58:01 - the default render is also a 2d engine
58:03 - so I don't need to actually say P 2d now
58:05 - I should also mention that I in this
58:09 - particular video I'm making use of a few
58:11 - functions I've previously written I
58:13 - might have a video I definitely did it
58:16 - on the livestream so either way in the
58:18 - video's description of Anna link to
58:19 - where you can watch me code all these
58:21 - functions but what these functions are
58:23 - for are for certain matrix operations
58:27 - that I'm going to do don't worry I will
58:30 - I will talk about what they are when I
58:32 - use them so the first thing that I want
58:35 - to do is let me just get some points on
58:37 - the screen how am I gonna do this let me
58:40 - make a so I'm gonna make pretty pretty
58:43 - heavy use of the P vector object and I'm
58:46 - gonna say I'm gonna make a array of P
58:49 - vectors that just has four points in it
58:53 - and I'm going to say points index zero
58:59 - is a P vector and I'm just going to omit
59:02 - the little square so I'm gonna say the
59:04 - first one is that like negative 15
59:05 - negative
59:06 - d and then then the second third fourth
59:12 - is at fifty negative fifty then fifty
59:18 - fifty then negative fifty fifty these
59:20 - should be the four points of a square so
59:24 - what I want to do here now is just say
59:26 - for every vector in points just draw a
59:34 - point at V X V dot Y so now oh oh but
59:42 - these are the whole point I do is I
59:44 - can't do this right all right these are
59:46 - okay so these are actually going to be
59:47 - 3d the point of this is they're gonna be
59:50 - in 3d bear with me for a second well all
59:54 - will come to pass those are gonna be 3d
59:55 - points but right now I haven't done
59:57 - anything 3-d yet let's make the stroke
59:59 - wait quite a bit bigger so I can see
60:01 - them there we go so those are my four
60:02 - points so first what I won't need to do
60:08 - and actually mm well I'm not gonna worry
60:14 - about this part right now okay so what
60:17 - do I need to do to make a 3d engine okay
60:20 - here's the day I'm gonna search for some
60:24 - props bear with me for a second people
60:33 - what's the chance that I have a clip
60:41 - light don't think I have a bulb in it
60:44 - I'm looking for like this would be good
60:46 - like if I could like make a shadow oh
60:51 - wait a second have this also have this
60:59 - LED lighting fixture that I could
61:05 - potentially use look at this right right
61:07 - right I could use this to make a shadow
61:09 - it needs batteries one two three four
61:13 - five six only have four batteries okay
61:14 - that's not gonna work it does have a
61:18 - plug oh wait I could actually just
61:20 - use I don't want to mess with this mmm
61:24 - maybe I'm just going to I know draw
61:28 - let's good try to use props that's gonna
61:35 - try to use props but I think that's not
61:37 - gonna work
61:38 - what am I trying to explain here I want
61:40 - to talk about projection okay I'm
61:51 - thinking about this all right
61:56 - use your cell phone flashlight thank you
61:59 - that's a good idea I know everybody look
62:09 - I have a Coty trade sticker on my cell
62:10 - phone
62:11 - train whistle shadow let's see turn the
62:16 - lights out oh yeah can you see that
62:47 - kind of works
62:50 - I mean it works if I do this but does
62:53 - not square a random number book could be
62:55 - good
63:08 - okay all right okay I found some props
63:19 - and I should turn this light off too
63:21 - I'm gonna try to do a demonstration in
63:24 - the dark this is a 3d object it is the
63:28 - book a million random digits with a
63:30 - hundred thousand normal deviates the way
63:34 - that a 3d object is rendered on a
63:37 - two-dimensional screen is through
63:39 - something called a projection that
63:40 - projection you can think of is basically
63:42 - like a shadow so if I have this book
63:44 - here and I shine this cellphone
63:47 - flashlight you can see that there's a
63:50 - projection on to the wall it looks like
63:53 - a square if I do if I rotate this it
63:56 - rotates if I rotate it around the y-axis
63:57 - will actually I'll have to do this if I
64:00 - rotate it around the y-axis you can see
64:03 - it starts to become thinner I can rotate
64:05 - it around the x-axis it does this so you
64:08 - know so this is the idea I need to
64:11 - create this same exact I need to create
64:16 - that same exact idea but in code and the
64:21 - way that that's done is with something
64:24 - called a projection matrix so the point
64:29 - the 3d point is actually something like
64:32 - this it's a matrix that has x y&z in it
64:37 - this is actually three rows by one
64:40 - column this is something that I've gone
64:42 - over in other matrix math videos and
64:44 - there's a kind of a summary of it a
64:46 - projection matrix if I'm projecting into
64:49 - 2d right if I'm projecting this 3d point
64:53 - into a new 2d point I don't know if
64:58 - using the tick or prime symbol there
65:00 - makes sense but
65:06 - what I need is a projection matrix now
65:09 - here's a really simple projection matrix
65:16 - this projection matrix has a 1 in the X
65:20 - spot a 1 in the Y spot XYZ XYZ and it
65:26 - has both zeros in this sort of Z column
65:29 - here of this projection matrix what this
65:31 - is actually always going to do is give a
65:34 - two-dimensional matrix
65:36 - not to mention sorry a two column matrix
65:39 - with just the x and y this projection
65:41 - matrix just eliminates the Z and
65:43 - actually this will get us pretty far in
65:45 - fact this exact matrix is what's known
65:48 - as is what's used for like orthographic
65:50 - projection there's all different
65:53 - stereographic and all different kinds of
65:55 - projection matrices this one is going to
65:57 - work just fine for us so let's put this
66:03 - in our code
66:08 - [Applause]
66:18 - okay okay actually before I do that let
66:23 - me just go back and I'm just gonna by
66:25 - the way ordinarily right if I were using
66:28 - p.3d let me just go back and put p.3d
66:30 - back in there if I say print mate all
66:33 - the while processing is keeping track of
66:39 - a matrix behind the scenes to do all
66:41 - this for you that's what p.3d is doing
66:43 - for you so if I had print matrix right
66:45 - here whoa look what we got
66:50 - oh wow wait why do I have this crazy oh
66:54 - it has more stuff in it because it's
66:56 - doing other fancy things oh maybe this
67:05 - is maybe I went off on a little tangent
67:09 - here Oh Simon is giving me Simon is
67:17 - giving me a good way to create a class
67:24 - called polyhedron yet that's going to be
67:25 - useful for me thank you
67:29 - wait a second I guess I don't want to
67:31 - reveal this
67:40 - yet because someone remind me why it's
67:44 - for dimensions because of the 4x4 and if
67:52 - does this translate do I have a rotate
67:55 - in here is that why I had some weird
67:58 - numbers there in the back yeah no what
68:01 - did these this is like the Z clipping
68:04 - plane or something the fourth element is
68:09 - the transparency really no but that's in
68:16 - the color all right I'm not gonna worry
68:17 - about this I'm not going to go off on
68:20 - that I thought that would be interesting
68:21 - to show the connection but I'm gonna
68:31 - leave that out okay
68:38 - Oh homogeneous coordinates okay
68:41 - such not a red point so that's totally
68:43 - right so I'm not going to use
68:45 - homogeneous coordinates because that's
68:50 - they allow common vector operations as a
68:52 - translation rotation scaling perspective
68:54 - to be represented as a matrix so I'm
68:57 - doing them separately I'm using separate
68:59 - matrices and this uses homogeneous
69:02 - coordinates so I wonder I think I know I
69:07 - think I won't open that up right now
69:09 - it's an interesting aside but I'm gonna
69:12 - leave it out all right let me just cycle
69:17 - the camera okay
69:24 - okay so the first thing that I need to
69:26 - do is I need to create that projection
69:28 - matrix and this is actually an easy
69:30 - thing now of course if I were doing this
69:33 - in a more sort of robust way I'd
69:34 - probably have like a matrix math library
69:36 - I just have a few matrix math functions
69:41 - that are in this tab that I wrote in a
69:43 - previous video so I'm going to say call
69:46 - make a projection matrix and I'm going
69:49 - to just make it as a two-dimensional
69:52 - array so 1 0 0 comma 0 1 0 so this is my
69:58 - representation of a 2 row by 3 column
70:03 - matrix 2 row by 3 column matrix that is
70:08 - this right here represented as a
70:10 - two-dimensional array now what I'm going
70:14 - to do here is I am going to say for
70:17 - every point for every 3d point to move
70:19 - this over a little bit I am going to oh
70:24 - whoops I have had I I was thought saying
70:27 - and I put p3d back in there take that
70:29 - out
70:29 - no p.3d I am going to say P okay I'm
70:35 - going to say I want to get so I'm
70:39 - thinking about this ah all right I'm out
70:46 - another helper function matrix Tyvek
70:51 - right because really if I'm
71:04 - I'm gonna change this right like this is
71:13 - the helper function I want because I
71:15 - want to receive the matrix and the
71:18 - vector convert the vector to a matrix
71:20 - multiply it and then convert it back to
71:22 - a vector yeah okay so what I want to do
71:29 - okay so what I want to do here for every
71:32 - single 3d point right is and this was
71:35 - sort of pointless that I did before what
71:39 - I want to do is I want to create a P
71:40 - vector I'm gonna call it the projected
71:43 - 2d vector and what I'm gonna do is I'm
71:46 - gonna say matrix multiply the projection
71:50 - times V so this is what I want to do to
71:54 - project a 3d point into 2d I need a
72:00 - projection matrix which I just made and
72:02 - then I need to matrix multiply the
72:05 - projection matrix and the vector now how
72:08 - the math for that works involves this
72:10 - times this Plus this times this Plus
72:12 - this times this goes here and this times
72:14 - this Plus this times this was refer you
72:16 - to matrix multiplication XYZ that
72:19 - website has a nice visualization and
72:20 - I've made other videos about how matrix
72:22 - multiplication works which I'll also
72:24 - link to but I'm just going to assume
72:25 - that matrix multiplication works and you
72:28 - can see how this makes sense
72:29 - this one leaves us only with the X this
72:31 - one leaves us only with the Y so now I'm
72:36 - going to then say point projected 2d x
72:42 - projected 2d y I probably could come up
72:46 - with a better name than that and now if
72:48 - I run this same exact thing right
72:51 - because in this case is that if the
72:54 - point light and this place that I'm
72:56 - projecting onto and the thing they're
72:58 - all like kind of in exactly the same
72:59 - spot so there's no skewing there's no
73:02 - skewing of the sort of perspective so if
73:05 - I were to move that light around and
73:08 - change the projection matrix different
73:10 - thanks guys but I'm not going to worry
73:11 - about that right now
73:12 - what I want to do
73:14 - is see if I can apply some rotation okay
73:20 - so how do I apply rotation well I know
73:23 - that I could I could just say like
73:25 - rotate by angle right if I say rotate by
73:30 - angle processing is going to do that
73:32 - transformation for me but what if I want
73:34 - to rotate X rotate around the x-axis I
73:37 - can't do that I'm getting some sort of
73:40 - error somewhere are nothing they should
73:43 - say not available with this renderer oh
73:44 - yeah rotate X can only be used with a
73:47 - renderer that supports P 3d I need to
73:49 - write my own rotate X function and guess
73:51 - what I need for that rotation matrix
73:55 - I think the ding is better after guess
74:00 - what I need for that rotation matrix
74:04 - great okay so now I am going to create a
74:12 - rotation matrix now how does that work
74:14 - luckily for me I already have this
74:17 - Wikipedia page open up look at this a
74:19 - rotation matrix is a matrix that is used
74:22 - to perform a rotation in Euclidean space
74:23 - this kind of makes sense right look at
74:26 - this rotation matrix have you ever done
74:28 - one of those things where you do polar
74:30 - to Cartesian coordinate transformation
74:32 - and you take the angle and you keep
74:34 - increasing the angle and then you
74:36 - convert that to X&Y points and you have
74:37 - this like spiraling thing I made videos
74:39 - where I do that basically to rotate in
74:45 - to rotate in two dimensions this is all
74:50 - I need
74:50 - so just out of just just for fun let's
74:52 - first just do this I'm going to say
74:59 - float I'm going to make another may I'm
75:01 - going to call this rotation and I'm
75:03 - gonna make another matrix and I'm gonna
75:05 - do exactly this it's going to be two by
75:06 - two and it's going to be cosine theta
75:09 - and negative sine theta and I'm calling
75:11 - an angle cosine angle negative sine
75:15 - angle and then it's going to be what was
75:17 - it sine angle sine angle cosine angle is
75:24 - that right
75:28 - so this is I didn't I didn't get this
75:30 - right there's a this needs a bracket I
75:33 - don't know what I'm doing here and this
75:35 - needs a bracket right - two-dimensional
75:38 - matrix there we go no semicolon there we
75:41 - go so this is my rotation matrix this is
75:44 - my rotation matrix so what now what if I
75:48 - were to say okay now I'm going to take
75:50 - out this rotate X not using the native
75:53 - rotate function and I'm going to say P
75:57 - vector rotated equals matmo rotation
76:04 - times projected projected 2d and now I'm
76:12 - going to draw I'm gonna draw the point
76:15 - at rotate it so I am projecting V is a
76:18 - 3d vector I'm projecting it into 2d and
76:22 - then I'm rotating it just a 2d rotation
76:25 - and if we run this okay what's wrong
76:28 - columns of a must match rows of be this
76:42 - little clever demonstration okay so I'm
76:46 - trying to be very clever but it's not
76:49 - gonna work because the truth of the
76:52 - matter is P vectors always have the Z
76:55 - and I'm not accounting for that so even
76:58 - though I just want to do a 2d rotation
77:00 - where is that oh I'm in the major sorry
77:08 - okay III something horrible happens I
77:11 - got I got this out of I got columns of a
77:13 - must match rows of B I made a mistake in
77:15 - my matrix multiplication thing here's
77:17 - the thing I'm trying to be all clever to
77:19 - show you it in 2d first the truth of the
77:21 - matter is P vectors they're 3d even if
77:23 - I'm drawing just the X and y there's
77:25 - always that Z component so I actually
77:27 - need to include this extra column of
77:32 - zeros in it to do this demonstration so
77:34 - now you can see that's me doing 2d
77:37 - rotation and actually I'm actually doing
77:40 - 3d rotation right because really what
77:43 - this should be is this this is what I
77:50 - would call X Y rotation I am rotating
77:54 - around the z axis by you know using the
77:59 - X and Y axis right look at this and I'm
78:02 - gonna say but so this is what and if I
78:04 - kept scrolling down this Wikipedia page
78:07 - we would see this we would find this
78:10 - right here this is the one that I'm
78:12 - doing rotation Z right oh I need a 1
78:16 - there of course not a 0 there very
78:18 - important I don't want to lose the Z
78:20 - point I want to rotate her I want to
78:22 - rotate the x and y axes around the z
78:24 - axis but I don't want to lose the Z
78:26 - point so I need a 1 there in the 2d case
78:29 - ok so I need this here so this I'm going
78:31 - to call rotation Z and now I'm going to
78:36 - make some other ones let's call them
78:37 - rotation X and the rotation X is y + Z
78:45 - so I need to have my rotation values in
78:49 - the y and z spots so hard to do this I
78:59 - should just copy it from somewhere but
79:01 - this will work and I think this is right
79:07 - so this should be right you can see this
79:10 - is I don't know my spacing is off help
79:15 - me this should be this was rotation Z
79:18 - this is rotation X and let's do one
79:22 - more let's do rotation why so I need to
79:26 - have zero one zero in the middle the
79:30 - last one will be sine of angle zero
79:33 - cosine of angle and the first one will
79:39 - be cosine of angle negative sine of
79:42 - angle with a zero in the middle okay so
79:48 - this should be just should all line up
79:50 - nicely
79:51 - this is rotation why do I have any
79:55 - syntax errors rotation Z rotation X
79:59 - rotation Y okay so here's the thing I'm
80:05 - gonna do something terrible
80:07 - what if I just put like if I put
80:09 - rotation Z here oh I have an error oh
80:12 - I'm missing a comma here thank you so
80:16 - I'm I think I got it everywhere else
80:18 - right
80:19 - that's rotation Z what if I try instead
80:24 - rotation X Oh weird that that's working
80:29 - because it's what it's working it's
80:31 - working by accident drilling because my
80:34 - Z by Z points so but I've done something
80:37 - incorrect but you can see this looks as
80:39 - if those two points and I want my angle
80:41 - to move up a little bit faster you can
80:42 - imagine this as a plane almost spinning
80:45 - around the x-axis but here's the thing I
80:48 - should be doing the projection should
80:50 - happen at the last moment right I should
80:52 - really be rotating first and then I
80:59 - should project the rotated vector and so
81:04 - here so sorry projection and right so
81:11 - the really sir for it to be correct it's
81:14 - got to be in it's got to be in this
81:16 - order because what I need to do is first
81:19 - rotate and then work by accident because
81:22 - that my Z values are 0 but now well
81:29 - let's do something let's make eight
81:30 - points like I'm doing this in a highly
81:34 - manual way let's now have all these via
81:41 - negative 50 wonder if I want to put them
81:45 - I think this will be fine negative 50
81:47 - and then now these all at fifty right I
81:50 - basically or if you think about it a
81:53 - point has zero dimensions a line has two
81:56 - dimensions with two points as the
81:58 - bounding box a plain square has two
82:03 - dimensions with four lines bounding it
82:06 - and then a cube has is in three
82:10 - dimensions with a eight no six planes
82:13 - but really I can kind of make the cube
82:15 - just with eight points which of the
82:17 - edges all of those connections so let me
82:18 - just run this for a second oh boy this
82:20 - works too fast I didn't want this to
82:22 - work so fast so now we can see let me
82:24 - just go back to rotate Z and look at
82:29 - this that looks now why do I not see
82:32 - eight points because I'm using
82:34 - orthographic projection as if the light
82:36 - is right there there's no kind of
82:38 - perspective I'm not moving the light
82:40 - source away to create this kind more 3d
82:43 - perspective look I can can't see what
82:47 - the points are right in front of each
82:48 - other they the shadow projects on
82:49 - exactly the same spot but if I were to
82:52 - do rotate Y now you could see you can
82:55 - kind of imagine that being a cube
82:57 - rotating and here's now where I can get
82:59 - fancy I can now say rotated equals mat
83:05 - mall rotation x times x rotated so I'm
83:14 - just gonna do this a couple times just
83:15 - like keep rotating by all the different
83:18 - so I'm gonna do this separate operations
83:20 - now there's a way I could probably
83:21 - combine all those but I'm just going to
83:22 - do all those matrix rotations and here
83:25 - we go now we have my cube spinning along
83:30 - all axes now it doesn't look like a cube
83:34 - line 37 time out people are telling me
83:37 - to check line 37 1 0 0
83:45 - 0:01 that's right wait there's an extra
83:54 - zero where ah here we go
84:01 - it's line 43 Oh time out I in all of my
84:08 - like futzing with this I left an extra
84:10 - zero here this rotation X should be one
84:12 - zero zero zero cosine negative sine zero
84:15 - sine cosine all right so hopefully that
84:16 - doesn't change much it still looks right
84:19 - so that probably was just being ignored
84:20 - I was ignoring it but I don't want that
84:22 - in my code so now we can see we've got
84:24 - this rotation the truth of the matter is
84:26 - I really want to draw this as a cube oh
84:28 - I want to draw this as a cube let me
84:30 - think about this there's as I could
84:32 - manually connect all the points I want
84:34 - to connect all so this is not the same
84:38 - size as what I started with so I'm gonna
84:43 - just replace every egg in every 50 with
84:45 - a hundred and every 50 with 100 that
84:53 - should work let's make that a bit bigger
84:56 - there we go so that's what I had
84:58 - originally and I also was doing
85:00 - something with the angles right I was
85:03 - like doing like I don't remember but I
85:05 - had liked angle x to angle x too so I
85:08 - could also vary the speed of the
85:10 - rotations this is very silly what I'm
85:12 - doing right now and pointless I just
85:14 - wanted to match match something more
85:19 - like what I started with okay anyway so
85:20 - you can kind of see that that's why it
85:22 - was moving so then I had it as like 0.1
85:24 - okay so this should now match exactly
85:26 - what I started with
85:34 - all right um I'm thinking I want to draw
85:41 - the edges here I could really could have
85:45 - just replaced all the 50s with 100's
85:48 - that's a very good point
85:49 - brains melting it's 2 o'clock now I have
85:51 - 20 minutes how do I want to draw these
85:57 - edges I'm gonna do it the lazy way I
86:00 - think you only need to add division to
86:11 - make a perspective yes I know I'm going
86:13 - to add division but I need to add
86:17 - division I need to remake the projection
86:20 - this can't be global anymore I need to
86:24 - add that in here
86:30 - the code says how to draw the edges what
86:34 - code
86:35 - Oh your code oh wait I'm looking at
86:40 - Simon's code here
86:50 - how do I make the edges
86:59 - how do I make the edges I see how I know
87:02 - how to draw the edges by a line but is
87:08 - there a nice algorithm if I have all the
87:11 - points of the cube written 0 through
87:14 - index 0 through 7 he total 1 2 3 4 5 6 7
87:19 - 8 9 10 11 12
87:21 - there's 12 right draw 12 lines with your
87:26 - vertices as an index yeah right I should
87:32 - definitely replace the 100 all right let
87:43 - me go back for a second as this is silly
87:48 - that minute matchy let's let's not do
87:51 - that part where I like change the angle
87:53 - and everything okay
87:57 - [Music]
88:04 - alright alright well let me do something
88:08 - that's gonna help us in the long run
88:09 - what I actually want to do is instead of
88:11 - using 50 all in here I'm gonna change
88:14 - every instance of 50 to just the number
88:16 - one so we kind of have like normalized
88:18 - they keep actually I kind of want to
88:19 - change it to 0.5 instead of one of them
88:22 - to change it to because I want the sides
88:24 - the lines to be a length one so whoops
88:27 - replace oh that's do I have oh I have
88:29 - ones in other places bad idea
88:31 - hold on I'm going to change all the
88:35 - instances of 50 to 0.5
88:36 - ok so now if I were to run this you know
88:42 - I don't see anything here but very
88:45 - easily what I can do is that the last
88:47 - moment I can scale things up and again I
88:50 - could do this with some kind of I'm just
88:53 - gonna do multiply each vector by hundred
88:56 - and then I have this and if I multiply
88:59 - it by 200 then I have this which more
89:01 - closely matches what I started with the
89:03 - angle rotations are different but that's
89:06 - no big deal
89:06 - okay I wanted to do that because I also
89:08 - would like to show you perspective and I
89:11 - think if all my coordinates are
89:12 - normalized that's going to make a little
89:14 - easier to do but before I show you
89:16 - perspective let me connect all the edges
89:19 - so there's 12 edges so in theory highs
89:30 - less than 12 I plus plus right what am i
89:33 - connecting I'm connecting let me let me
89:37 - let me think about this I'm connecting
89:40 - look if I say connect what did I call
89:44 - the points let me just put 0 and 0 let
89:47 - me write a function let me write a
89:50 - function call it connect and it gets to
89:53 - P vectors and it just draws a line I'm
90:00 - gonna say stroke weight 1 and it draws a
90:02 - line between one and the other stroke
90:08 - 255 so if I were to say connect oh and
90:14 - it doesn't get to P vectors it gets to
90:16 - into
90:16 - and P vector a1 equals I'm gonna call
90:26 - this I and J P vector a equals points I
90:31 - and P vector B equals points J this is
90:37 - like so I should have a line between the
90:43 - first two points how come I don't see
90:45 - that oh wait wait yeah point oh oh I
90:49 - need to connect I need to connect okay
90:53 - so I'm going to make this P vector
90:57 - projects projected equals I'm gonna make
91:03 - an array that has eight spots in it and
91:07 - then instead of drawing this here I'm
91:12 - going to say projected so now I really
91:16 - need to oh this is fine int index equals
91:21 - zero I could just use now for loop but
91:24 - index plus plus projected index equals
91:27 - projected 2d so I'm going to put
91:30 - everything in an array and then I'm
91:33 - going to say connect zero zero in
91:36 - projected and then this will be an array
91:40 - of points and so now this should where's
91:48 - that line let me just make sure now if I
91:50 - say for P vector V in projected point I
91:59 - really didn't want to draw the edges
92:01 - this is why I want to just leave it as
92:03 - that Leggett leave it a viewer challenge
92:04 - to draw the edges projected 2d projected
92:11 - indexical projected 2d index plus plus P
92:18 - vector V where's all that strokeweight
92:22 - stuff this stuff should be here
92:29 - where am i drawing on the points so okay
92:34 - there are the points again now I want to
92:36 - connect 0 & 1 0 & 1
92:40 - there we go I took me forever so now I'm
92:43 - connecting 0 & 1 then I want to connect
92:46 - 0 & 2
92:48 - no 0 then I want to connect 1 & 0 that's
92:55 - the same thing connect one in one no no
92:59 - no one two good trial and error this is
93:04 - fun then I'm gonna connect 2 & 3
93:07 - I just want to figure out if there's an
93:09 - algorithm for this and write because
93:11 - this is the plane this is the first
93:13 - plane 3 & 4
93:15 - I see so this makes sense whoop-whoop
93:17 - whoops no 3 back to 0 that's the first
93:22 - plane and then the next plane is the
93:27 - same thing but at the end which is like
93:31 - 4 to 5 5 to 6
93:34 - oh no 3 to 4 for it right because didn't
93:40 - I put the next plane would be 0 1 2 3 4
93:42 - no no no yes 4 to 5 5 to 6 6 to 7 & 7
93:51 - back to 4 okay so that's that now all I
93:57 - need to do is connect oh this is easy
93:59 - so there's definitely an algorithm for
94:00 - this because now I just want to connect
94:02 - 0 2 4 1 2 5 right 2 to 6
94:13 - hopefully the algorithm is revealing
94:15 - itself to you and 7 to 8
94:18 - no no no three dit sorry 3 to 7 there we
94:24 - go
94:27 - now III should really refactor this and
94:30 - I plan to do that but right now I think
94:32 - I need a little bit of a break alright
94:37 - so but this this is really actually no I
94:39 - don't I got to do it right now I'm sorry
94:42 - this video is gonna be really long I
94:43 - don't care I equals zero I is less than
94:45 - 4 I plus plus so what I'm gonna do right
94:50 - there's four sides I am going to connect
94:54 - I with I plus 1 modulus for then I also
95:04 - want to connected then I also want to
95:08 - connect I + 4 + I + 1 modulus 4 + 4
95:15 - let's do that and then I just want to
95:17 - connect I with I plus 4 I think that's
95:21 - it that's these three little blocks I'm
95:31 - so glad that actually worked okay so
95:34 - this is connecting the edges this is
95:37 - going to really help but we have to do
95:38 - the I hope well we have to do the
95:41 - hypercube connecting the edges okay I
95:44 - should really go I only have ten more
95:48 - minutes in real life time while I'm
95:50 - recording this but let's actually add
95:52 - perspective let's add perspective how do
95:55 - you add perspective whoa so the way that
95:57 - you add perspective perspective
96:04 - projection basically we're going to add
96:08 - a variable whoops
96:21 - we're going to add a variable which
96:24 - indicates the distance remember my
96:27 - ridiculous experiment earlier like about
96:30 - four and a half hours ago if you are
96:32 - actually watching this video all the way
96:33 - to the end where I had this light source
96:35 - and I was shining the light source and
96:37 - you were seeing the shadow here that
96:39 - projection I need a variable which is
96:42 - the distance away from the object the
96:47 - surface that that light source is that's
96:51 - how I get perspective projection right
96:54 - somebody tell me that that's right and
96:59 - then I should be all right
97:01 - this is orthographic projection which I
97:05 - have done already weak perspective
97:08 - projection which is just plus a scaling
97:18 - perspective projection oh wait a sec I'm
97:21 - losing my mind here this is what I want
97:23 - to do the way I did it was so easy I
97:27 - don't want to do perspective projection
97:29 - I was gonna do it I just want to do
97:31 - stereographic hold on I might have to
97:35 - just not do this part right now because
97:41 - that's all I really need for yet this is
97:45 - what I'm doing here the value mine
97:48 - divided by one minus the distance that's
97:52 - what I was doing
97:53 - can I just do that because
98:17 - one minus the Z yeah I dare you to do 40
98:22 - right yeah one minus Z distance that's
98:24 - what I want
98:25 - like I just right hold on like basically
98:27 - let me just do this for a second like
98:30 - basically what I want to do is change
98:34 - take this here and basically right
98:39 - before I do the projection this should
98:43 - be 1 divided by 1 minus V dot Z right
98:53 - and then Z Z right let me just yeah
99:02 - right and then this is like the distance
99:05 - right because
99:17 - right isn't this one somebody confirmed
99:20 - for me who knows actually knows this
99:22 - stuff I have five minutes like cuz if I
99:28 - change this to 5 yeah then the lights
99:32 - really far away this is like the
99:34 - equivalent of the distance whoa what did
99:36 - I what horrible thing but I guess I
99:38 - can't write right so this is like yeah
99:56 - I'm doing the tesseracts today I'm
99:58 - coming back this afternoon I'm gonna do
99:59 - the tesseract but this is like some
100:02 - build-up to the tesseract right so
100:08 - somebody confirm for me that correctly
100:10 - see I see very little activity in my
100:13 - reliable slack channel alko is watching
100:16 - this alchemist know the answer to this
100:18 - so this is this would be basically this
100:25 - is as if the light source is the light
100:29 - source getting closer like this is this
100:32 - called stereographic projection like I
100:39 - just want to see this formula somewhere
100:41 - it doesn't look right to me
100:46 - Thanks
100:49 - that's why I don't want to do it I don't
100:54 - want to get into all of the simple
101:17 - it's really like orthographic but just
101:20 - moving the light source away
101:30 - [Music]
101:35 - week projection
101:43 - weak perspective I can do weak which is
101:50 - just a weak perspective projections use
101:52 - the principles orthographic but requires
101:54 - the scaling factor to be specified thus
101:56 - ensuring that closer objects appear
101:58 - bigger in the projection vice-versa
102:00 - because he is a hybrid between
102:01 - orthographic and perspective and so the
102:05 - weak perfect model does approximate
102:07 - perspectives using a simpler model
102:09 - similar the pure unscaled or unscaled so
102:13 - with these conditions we know all points
102:15 - that there are at the same distance Z
102:17 - from the camera without significant
102:19 - errors in the projection so basically
102:21 - what you're saying what this is saying
102:24 - is just weak weak projection would be
102:35 - just scaling everything by Z so actually
102:38 - like leave this like this basically
102:59 - No
103:03 - Z average constant depth
103:15 - oh it's just to be rotated oh whoops no
103:18 - wonder ah yeah hold on hold on it has to
103:23 - be the whole point of me putting this
103:24 - down here huh the whole point of me
103:33 - putting this here is to do this there we
103:35 - go
103:36 - oh whoops no no it's still worth the
103:46 - graphic I'm like why don't I see
103:47 - anything there we go that's
103:53 - stereographic projection now if I want
103:55 - to move further away yeah yes this is
104:02 - what I meant to show uh I got it okay
104:06 - this is why you should look at the
104:08 - YouTube chat more often yeah no kidding
104:11 - all right now I forgot where I was in
104:13 - this discussion
104:37 - okay
104:40 - I'm gonna come back to the code so I
104:42 - just did my little demonstration over
104:43 - here okay so
104:48 - [Applause]
104:59 - so to create this idea of perspective
105:01 - right I want to move the light source or
105:03 - move the camera further away there's a
105:05 - lot of different ways to do this and
105:07 - highly sophisticated methods but
105:08 - basically I need to scale the XY
105:11 - positions by the depth right objects in
105:14 - this Amir er appear closer than they
105:16 - really are like things that are further
105:17 - away feel appear closer in things that
105:21 - are closer feel further out appear
105:24 - further out so to do that this
105:26 - projection matrix can't just always be
105:29 - constants of 1 & 1 in the x and y
105:30 - positions so I'm going to move this and
105:33 - I'm going to before I project right
105:38 - before I apply the before I project the
105:41 - final rotated matrix I need to
105:44 - dynamically calculate this projection
105:46 - matrix according to the Z value itself
105:49 - so one thing that I could do is I could
105:51 - just say float Z equals rotated Z and I
105:57 - could like just try like dividing
106:00 - dividing by it I'm sort of scaling it
106:05 - according to that Z let's see what that
106:07 - does
106:08 - that's something maybe it looks all
106:10 - weird and crazy that's not right well
106:12 - it's a nice formula for doing this is
106:14 - actually saying 1 divided by this is now
106:17 - the distance basically the camera
106:19 - distance the light source distance -
106:21 - rotated Z so if I put that in here now
106:25 - and I were to say float distance equals
106:33 - 2 for example now you can see this looks
106:36 - much more like perspective projection so
106:40 - this is no longer orthographic it's more
106:42 - like perspective exactly sort of you
106:45 - know again I'm not saying that I've
106:47 - comprehensively solved every possible
106:50 - projection 3d way with focal lengths and
106:53 - all sorts of field of view stuff I'm
106:55 - just doing something kind of basic this
106:57 - is probably similar to like weak
106:58 - projection maybe I think but you can see
107:01 - here if I change this distance to 1 now
107:05 - this object appears a much closer it's
107:07 - more distorted if I were to change this
107:09 - to 10
107:09 - and well it's so far away but you can
107:12 - see there it is those points are a
107:13 - little bit too big now one thing I'm not
107:15 - doing is changing like the stroke way to
107:17 - make it seem further or smaller but you
107:19 - can see I'm just altering the
107:20 - perspective okay we've done it where's
107:23 - my train whistle she's a train whistle
107:30 - no train trestle for me maybe a pea I'm
107:33 - gonna reward myself with a piece of
107:34 - space melon I have made this coding
107:38 - challenge so what can you do first of
107:40 - all if you want a challenge to yourself
107:42 - I just go make this in four dimensions
107:44 - now but that's what I'm gonna do next
107:46 - now that I have successfully drawn a 3d
107:49 - cube and just to prove the point I am in
107:52 - the P 2d renderer the P 2d renderer
107:56 - using my own matrix math and my own
108:00 - rotation matrices you know you don't
108:02 - need to do this I would probably just go
108:03 - back and always use P 3d but this should
108:06 - let me unlock the fourth the fifth the
108:08 - sixth to seventh dimension you know try
108:10 - making different shapes other than cubes
108:12 - try you know you can do weird stuff like
108:14 - I probably get something like super
108:15 - weird if I just like let's make the
108:19 - distance to again and let's you know
108:21 - change this like negative to positive
108:23 - just for rotation Y and like look what
108:27 - I've got going now like I can really
108:28 - start to like distort the world by like
108:31 - just messing around with these numbers
108:33 - like what if I say like five times
108:35 - cosine of angle down here in rotation Y
108:37 - okay that's probably a terrible idea
108:39 - so what kind of crazy weird distorted
108:42 - rotation perspective things can you do
108:44 - can you actually do this with vertices
108:46 - so you can apply fill can you think
108:47 - about color make some sort of weird
108:49 - pretend 3d world that does it that
108:54 - doesn't follow our own sense of three
108:57 - dimensions by playing with this code and
108:59 - share that with me and the comments are
109:02 - on Twitter and also on the Kodi Trang
109:05 - comm they'll be a link to the webpage
109:06 - where you can submit user made things
109:08 - okay my phone is ringing it says maybe
109:13 - Brian hmm I wonder if that's a Simone's
109:17 - tumor calling me
109:20 - okay goodbye continue to enjoy the
109:23 - insurer YouTube thing gonna go outside
109:25 - and do something else I'll see you in a
109:26 - future Karthik challenge okay I know I
109:29 - have to go to my meeting I'm just gonna
109:30 - be a little bit late okay really it went
109:44 - to voicemail
109:45 - okay boy what's the chance I mean it's
109:52 - downstairs
109:53 - mowing every five minutes late I don't
109:55 - think it's a problem what's the chance
110:01 - Doc's that could be edited into like a
110:03 - 30 minute coding challenge maybe
110:16 - [Music]
110:20 - okay all right I've got to go so what
110:25 - this is gonna end this is the end of
110:27 - this particular livestream what I'm
110:30 - gonna do really quickly cause I'm gonna
110:36 - go to youtube studio I'm gonna create an
110:39 - event
110:40 - let me just email that I'm running a few
110:43 - minutes late
110:46 - hello Marshall thank you for your
110:47 - contributions on github Marshall oh did
110:51 - I freeze no I'm still here
110:52 - oh my god oh yeah oh yes
111:05 - see you in five to ten minutes okay so I
111:15 - mean this is the thing I really wanted
111:17 - to learn for a long time this 3d stuff
111:20 - always seemed like impossible I am going
111:27 - to create and we go to live streaming
111:31 - Darin had your you live streaming right
111:34 - now house Trevor we could go watch I'm
111:38 - gonna go to events new live event oh
111:42 - wait wait wait wait actually something I
111:44 - can do is I can duplicate what I shoot I
111:50 - can say how do I do this there's a way
111:54 - to like duplicate new event from this
111:58 - one settings see you can't can't do that
112:02 - walks live I'm just gonna do a new live
112:03 - event
112:06 - the tesseract today at let's say 4:00
112:10 - p.m. I think realistically I can be back
112:13 - here at 4 p.m. 4 p.m. to 6 p.m.
112:18 - tesseract coding challenge public
112:27 - advanced setting slow mode make archive
112:31 - unlisted create event ok so I in theory
112:45 - I'm pasting now into the chat the next I
112:50 - don't know where the chat went here it
112:55 - is this is the next event all right
113:05 - okay so alright so I'm gonna go I'm
113:10 - gonna be back later I'm gonna make this
113:12 - tesseract thing I think I mean this is
113:14 - so not gonna be true but in a way I
113:16 - almost feel like it's gonna be easier
113:18 - having done this first video so we'll
113:27 - see oh did it did it do for p.m. did I
113:31 - say it to 4 p.m. Pacific by accident let
113:33 - me see no 4 p.m. Eastern alright so and
113:49 - in slack channel patron sponsor member
113:54 - YouTube thing is called memberships now
113:55 - I could also potentially if there's any
113:59 - like filler stuff or intro or outro e
114:01 - stuff that I need to do I'm thinking
114:03 - actually maybe it sort of makes sense
114:06 - that there's three coding challenges
114:07 - there's a coding time so it's just
114:09 - matrix multiplication there's a coding
114:11 - challenge that's like 3d projection and
114:14 - 2d what's a good like SEO term for what
114:17 - I just did normally I don't like to
114:19 - think that way but I feel like people
114:21 - searching for a video about how to do
114:23 - the sort of basics of 3d rendering in 2d
114:26 - canvas it's kind of like a thing people
114:28 - often look for and there's maybe a term
114:30 - for that I don't want to mislead people
114:32 - that I'm like doing you know ray tracing
114:34 - for example that so if anybody has
114:36 - suggestions for that tweet that at me or
114:38 - it's particular if you're a member or
114:39 - patron I mentioned that in the slack
114:41 - channel and if match is around we can
114:44 - message Matt Matt you off and it's good
114:46 - feedback of like Oh record some extra
114:47 - intro outro e stuff alright so I'm gonna
114:50 - hit the stop streaming button and I will
114:56 - see you I got to finish my melon Oh No
114:58 - maybe I save it till this afternoon
115:00 - won't go bad will it and I will see you
115:03 - all in a little less than two hours
115:05 - apologies if I'm a little late to the
115:08 - this afternoon one OK when hit stop
115:10 - streaming
115:13 - okay Oh axe