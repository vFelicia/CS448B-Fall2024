00:00 - (bell ringing)
00:01 - - Welcome to another Pi Day.
00:04 - Approximating the number
Pi coding challenge on
00:06 - this date March 14.
00:08 - I should probably be doing
this once again on July 22nd.
00:11 - But well that's another
story for another time.
00:14 - So in this video, I'm
going to find Pi somehow
00:18 - in the Mandelbrot set.
00:19 - Which is really kind of nuts.
00:21 - The nice thing about this
is I can piggyback off of
00:24 - a coding challenge that I've done before
00:26 - coding challenge number
21 the Mandelbrot set.
00:28 - So the Mandelbrot set, if
you're not familiar with it
00:31 - is a special fractal invented
00:33 - by Benoit Mandelbrot the mathematician.
00:37 - Which is a fractal shape,
a self-similar shape
00:41 - that appears in the complex plane.
00:43 - Let me give you a quick summary
00:44 - of the Mandelbrot set coding challenge
00:47 - and you could go back and watch that
00:49 - if you want to see all the code built.
00:50 - But the idea is that
the canvas, the window
00:53 - in processing represents something
called the complex plane.
00:58 - And the complex plane is a
plane of complex numbers.
01:02 - What is a complex number?
01:03 - So first of all complex
numbers are something I spent
01:05 - a little bit of time talking about
01:07 - in the Fourier transformation series.
01:09 - You should also go and watch those.
01:10 - And I'll try to refer
you to some other videos
01:14 - that talk about complex numbers
01:16 - and so-called imaginary numbers.
01:18 - So complex numbers of the form A plus Bi
01:22 - where I is the solution
to the equation I squared
01:25 - equals negative one.
01:26 - So you can kind of think of I
01:27 - as the square root of minus one.
01:30 - This is also sometimes
referred to as a lateral number
01:33 - but anyway naming the
side the idea here is that
01:37 - if B, if the complex plane
where the X axis represents
01:42 - the real component.
01:44 - Oh, just real, RE for short
01:46 - and the Y axis represents
the imaginary component.
01:52 - Then we have all of these
points in this plane
01:55 - are of the form X equals, oops, sorry,
01:58 - X plus Y times I.
02:02 - So the Mandelbrot set appears
02:04 - when you take this idea and
apply to this strange equation.
02:08 - So C, let's C be all the possible
02:14 - X's and plus Y times I
that's in this plane.
02:17 - And if we take the
equation Z equals Z squared
02:22 - plus C and we're going to do this over.
02:24 - We going to start with
Z equals zero basically
02:27 - and we're going to do
this over and over again.
02:29 - So we're going to...
02:31 - If we forget about, let's just
forget about complex numbers
02:34 - for a second and let's just
say Z is the number two,
02:37 - I mean sorry C is the number two.
02:39 - We're going to say Z equals zero, Z
02:42 - is zero squared plus two.
02:45 - So now Z is two.
02:47 - So that's, this is like Z sub zero.
02:50 - Then the next one Z
one would be, what's Z?
02:53 - It's two squared plus C is two so Z one,
02:59 - the next Z is four...
03:02 - (laughing)
03:03 - Four plus two is six.
03:04 - And then if I say Z...
03:06 - This is important cause we're
going to have to do this
03:08 - to calculate the digits of Pi.
03:10 - That's why I'm emphasizing this.
03:11 - then the next Z equals
six squared plus two
03:15 - which would be 38.
03:16 - So this is doing this with just
a real, just the number two.
03:20 - Which by the way it could
be one of these numbers
03:22 - because what that is, is two plus zero I.
03:26 - All numbers in essence are complex numbers
03:30 - but the real numbers that we think of,
03:31 - the numbers we use more commonly just have
03:34 - their imaginary component as zero.
03:36 - So this is the idea.
03:37 - Now, what's the deal here?
03:39 - What Mandelbrot set that weird pattern?
03:41 - So if we do this, with any given X plus Yi
03:47 - this number will sometimes
go, can go to infinity
03:50 - and sometimes just sort
of oscillate around
03:54 - a smaller number.
03:55 - Basically what, to find the Mandelbrot set
03:58 - is we look for any numbers,
any of these X plus Y I's
04:03 - where when you apply
this iterative formula,
04:05 - you get past a certain magnitude.
04:08 - So you could also think of
this as a vector A plus B
04:11 - and so if we did something
like took the square root
04:13 - of A squared plus B squared is
the magnitude of this vector
04:16 - if that magnitude is greater than two
04:19 - it is a member of the Mandelbrot set.
04:22 - And when we look at all those
complex numbers within a range
04:24 - you can see all of these
black pixels right in here
04:29 - are members of the Mandelbrot set.
04:31 - Now why do you see these spiky things
04:33 - and these the grayscale values?
04:35 - This is because I'm actually
specifically counting
04:37 - the exact number of iterations
04:40 - it takes before we get and
I'm going to say A squared
04:43 - plus B squared is greater than four
04:45 - because that way we don't
have to do the square root.
04:47 - And then each pixel color is
colored based on the number
04:51 - of iterations it takes.
04:54 - And before it escapes,
before it escaped out,
04:57 - before it gets past four.
04:59 - Okay that's the Mandelbrot set.
05:01 - Now, was it there something
05:04 - about calculating the digits of Pi?
05:06 - So I didn't really know about this.
05:07 - Where I learned about
this is from Holly Krieger
05:10 - a mathematician who appears often
05:13 - in the YouTube channel
Numberphile, number PI.
05:17 - And there's this video
PI and the Mandelbrot set
05:20 - where Holly Krieger goes
through and explains
05:23 - this discovery and how it works.
05:24 - And I would really recommend
you just stop right now
05:26 - and watch this, maybe you're
going to come back here
05:28 - to see me code it maybe you're not cause
05:30 - that's enough for you.
05:32 - I'll also refer you to this page I found
05:35 - on the interwebs here
called The World of Pi
05:38 - which has a little bit more
information about this here
05:43 - that I'm also going to want to refer to
05:46 - in terms of this special place
05:50 - not in the Mandelbrot set
05:52 - but in the complex plane 0.25 plus X.
05:57 - So what do I mean?
06:00 - So let's say, so this
is our Mandelbrot set.
06:03 - I'm going to like loosely
draw it like this,
06:05 - it kind of looks like this,
this is my like a crappy
06:08 - but horrible drawing
of the Mandelbrot set.
06:09 - If we look at this diagram here.
06:13 - You're going to actually
see the values of X and Y.
06:16 - So you can see that this is
the 0.1 comma zero, right?
06:21 - So the 0.1 comma zero
is somewhere over here
06:25 - and it's not in the Mandelbrot set.
06:27 - So the way we're calculating
Pi is not actually something
06:30 - in the Mandelbrot set but it is
06:33 - this iterative process applied
06:35 - to a particular location
outside of the Mandelbrot set.
06:38 - And there are by the
way some other locations
06:41 - that you can do this same
math to and that's covered on
06:44 - that webpage but I'm going to
do it not at one comma zero
06:48 - but at one and 1/4 comma zero.
06:51 - So if one comma zero is
here maybe one comma zero,
06:53 - 0.25 over here, this
number when this formula
06:57 - is applied reveals the number
Pi in an interesting way.
07:02 - The good news for us is that
this, while a complex number
07:08 - the imaginary component is zero.
07:10 - So we can actually work this
out in a much simpler way.
07:14 - We don't have to do the
complex number multiplication
07:18 - although that's an interesting thing to do
07:20 - and I probably should have been...
07:21 - I feel like I botched that in
the previous coding challenge
07:23 - so I should come back and do another video
07:25 - about building a complex number class
07:27 - and Java and multiplication all that.
07:28 - But so let's just look here all right.
07:31 - All right, so now that I think of it
07:32 - I think what I want to
do is actually just sort
07:35 - of start over like I could use this code
07:38 - but we don't actually need
to draw the Mandelbrot set
07:41 - to actually, to emphasize
this actually don't need
07:45 - a set up function right now.
07:46 - Let's think about this.
07:47 - What I want to have is
07:51 - of my complex number C
07:54 - which is really at this point
just the number 1.25, okay?
08:00 - So I have the complex number C.
08:02 - It is really A plus Bi and the 1.25
08:05 - but we're simplifying things.
08:07 - The complex number has
no imaginary component.
08:10 - Then what I want to do is I also want to
08:12 - have the value Z starting at zero.
08:15 - And what I want to say is...
08:19 - Well the thing that I want to do is
08:20 - I want to say Z equals Z times Z plus C.
08:24 - And I want to do this over and over again.
08:26 - So maybe I want to do it for
some amount of iterations.
08:29 - I want to do it while Z is less than two
08:34 - because when this eventually
gets greater than two
08:38 - that's the number of iterations.
08:39 - So I'm going to say int, oh,
yeah I want to count the number
08:42 - of iterations, sorry.
08:44 - So each time I'm going to
say iterations plus, plus.
08:47 - And then let me print
line this is very sad.
08:51 - I should draw it, it'll
be more interesting.
08:53 - So let's do size 600, 400.
08:57 - Let's say fill 255, text size 32
09:04 - and a textAlign center
09:08 - and text iterations,
09:12 - width divided by two
height divided by two.
09:16 - Two, no, no this is good okay.
09:17 - But, so it only took two iterations.
09:21 - (bell ringing)
09:22 - I just realized I've made
a fundamental mistake
09:24 - but fortunately I haven't gotten too far
09:26 - before I made this mistake.
09:27 - And I remembered now why
I'm starting with 1.25
09:31 - and I should have reviewed
this more recently
09:33 - and I wouldn't have forgotten this.
09:34 - But the place that I'm looking
at which is really special
09:38 - is actually not 1.25 comma zero.
09:40 - It's o.25 comma...
09:43 - 0.25 comma zero.
09:45 - Let me actually draw you where
that is in the Mandelbrot set
09:49 - in my previous code.
09:51 - So if I, I want to go
to my other code here
09:55 - and what I want to do
is I have this mapping
10:00 - which is X-min X-max.
10:02 - So if I want to get a pixel spot
10:05 - for 0.25 comma zero.
10:08 - So I'm going to map 0.25
between X-min and X-max
10:13 - between zero and width.
10:17 - And then I'm going to
get the Y value at zero
10:22 - and I'm going to draw
a nice red dot there.
10:26 - So let me say fill 255 zero, zero
10:29 - and I'm going to draw an ellipse PX PY,
10:34 - let's make a nice small ellipse.
10:36 - Let's make it a circle,
let's make it a circle, Okay.
10:41 - Oh, that's not right.
10:43 - Ah, this is Y-min Y-max yes
10:46 - and this is zero comma height.
10:48 - Come on Shift man, okay.
10:50 - There we go, look at that how strange.
10:53 - This is a really...
10:54 - And let's make this much, much smaller.
10:56 - Oh, it's hard to see, let's zoom on in
10:59 - this spot right there is called the cusp.
11:02 - So the cusp of the
Mandelbrot set you know,
11:04 - which a little bump there
is actually 0.25 comma zero.
11:08 - Now why did I think, oh, I'm
supposed to talk about 1.25.
11:13 - The reason is, the idea
here is that I'm also going
11:16 - to introduce another variable epsilon.
11:19 - And epsilon is a little bit of space
11:23 - or a lot of space after that cusp.
11:25 - So what happens when
I'm full 1.0 units away
11:30 - from that cusp, right?
11:32 - And I say the cusp 0.25 plus epsilon,
11:37 - if this is my C, what
happens with this iterations?
11:41 - How many times does it
take me to escape past two?
11:45 - So now we could go back to my code
11:48 - and I can correct myself.
11:50 - And I can change this to the cusp is 0.25
11:54 - and E for epsilon I will say is one.
11:59 - And what I'm really doing is
12:00 - I'm saying C,
12:05 - I'm really saying C equals
its self plus Epsilon.
12:10 - So if I do that, what do we get?
12:13 - Two iterations, so when E epsilon is one,
12:17 - we get 2 iterations.
12:19 - Now let's go back to
this page, oops, sorry.
12:22 - This page and see look at this.
12:26 - If I have epsilon as 0.01 it's 30.
12:31 - 0.0001, 312 let's see if
we can get that result.
12:36 - Let's try 0.01.
12:39 - 0.01 30 ah,
12:44 - so what is this?
12:45 - This is one divided by a 100
12:49 - to the power of something.
12:51 - Hmm, it actually kind
of reminds me of that
12:52 - whole collision thing I just talked about.
12:57 - 1.0 divided by 10 the power
13:01 - of 100 to the power of one.
13:06 - That gives me two digits interesting.
13:08 - Let's now create a variable
called digits equals
13:12 - I want two digits, this is
to the digits minus one.
13:19 - Two digits, 30.
13:21 - Three digits 312.
13:25 - Four digits three, one, one, nine hmm.
13:29 - (laughing)
13:30 - No, that's not right.
13:32 - (bell ringing)
13:33 - What's the problem?
13:34 - I have very, very, very little precision
13:36 - with floating point numbers.
13:38 - So I didn't get the right result.
13:39 - Let's try changing these to doubles.
13:42 - Double which you don't
typically see in processing
13:45 - cause processing kind of ignores
the existence of doubles.
13:47 - I'm going to need to
change this to math.pow
13:52 - to use doubles and now in theory
13:55 - 3140, is that correct?
13:59 - Yes, so now let's try getting
14:02 - five digits, three, one, four, one, four.
14:07 - Six digits three, one,
four, one, five, seven,
14:12 - in order to test this.
14:13 - I've got six digits right now,
I've pulled up a text file
14:15 - that actually has the digits of Pi in it.
14:18 - So we can see one, five,
nine, one, five, seven,
14:20 - we've got a close
approximation with six digits.
14:23 - Let's try seven digits one,
four, one, six, two, five.
14:30 - Eight digits okay, we're getting
way off one, four, three...
14:34 - It's getting worse.
14:35 - So I think we've now
reached the limitations
14:38 - of what kind of precision we can have
14:40 - with Java's built-in double.
14:42 - So this is a time where I
think it would be worth trying
14:46 - a class that will give
us greater precision.
14:49 - So there is something in
Java called a BigDecimal.
14:54 - I can pull up, I'm going to go
to the Java eight Doc's page.
14:58 - This is the BigDecimal
class and we can see ways
15:02 - of creating a new BigCecimal.
15:05 - There's all sorts of settings.
15:07 - I can create a BigDecimal out
15:08 - of a big integer blah, blah, blah.
15:10 - So, BigDecimal is a class in Java
15:15 - that allows me to have greater precision
15:16 - with a decimal number.
15:17 - So let's try converting all this.
15:20 - All this is going to be a pain.
15:21 - I'm going to say big decimal okay.
15:22 - So first I need to do an import.
15:23 - Import Java.math.BigDecimal.
15:26 - So you might not realize
this but in processing
15:28 - you can import any Java class.
15:30 - I think it's going to be upset with me now
15:32 - though without a setup function.
15:34 - Yeah, so whoops!
15:36 - Yeah, so let me just
put in a setup function
15:39 - I don't know that I need it but let's put
15:41 - that in there just in case.
15:44 - Okay, so now I want to
change C to a BigDecimal.
15:49 - I think I can just do this.
15:55 - Oh, ah, this is going to be kind of crazy.
15:57 - I needed to change E to a BigDecimal
16:01 - and so this is BigDecimal one
that's saved divided by...
16:09 - So I need BigDecimal hundred
16:12 - equals new BigDecimal 100
16:16 - and then I would say hundred.pow
16:20 - digits minus one.
16:22 - Is that going to work?
16:23 - Oh, no dot divide.
16:25 - Dot divide, so I can't use the regular
16:27 - standard operators anymore.
16:30 - Okay, so this is E is
BigDecimal one dot divide.
16:34 - It had to be BigDecimal
hundred to the power
16:36 - of digits minus one.
16:37 - Then I can say C equals C add E.
16:42 - BigDecimal Z starts
16:46 - as BigDecimal.zero
16:49 - this is the number of iterations.
16:51 - I mean I don't think
do I need a big integer
16:54 - for iterations I might, I'm not sure.
16:57 - Let's do that BigInteger...
16:59 - Well, let's just do, let's
leave that as an integer
17:02 - for right now.
17:03 - While Z compareTo, I have to
use the compareTo function
17:08 - if it's less than two, I think
that the comparedTo function
17:11 - will give me a negative one.
17:13 - Oh, and this should be
17:17 - a BigDecimal the value two.
17:22 - Z equals Z multiplied by itself
17:27 - adding C to it.
17:29 - I think I can chain these and this should
17:30 - be the full word multiply
iterations plus, plus.
17:33 - So let me just put this back
down to like digits one.
17:36 - So if I wrote my code correctly,
17:39 - I should still get the number two.
17:42 - Great, beautiful, now let's
try to get two digits.
17:47 - (laughing)
17:50 - Well this is taking a long
time or I've messed up.
17:53 - (bell ringing)
17:54 - So I've just looked into this
17:55 - and I'm printing the value
of Z to three decimal places
17:59 - and I realized it's actually working fine.
18:02 - It's just really slow like it's stuck.
18:07 - It's like hasn't even done the
calculation for the next one.
18:09 - I think that I need to,
what I need to do is
18:13 - the problem with this BigDecimal math is
18:15 - it's really slow.
18:17 - And so let me import this thing
18:19 - called Java.math.MathContext.
18:23 - And what that allows me to
do is create a math context
18:27 - which is, I'll call it MC
which is a new math context
18:32 - and just to like...
18:33 - Let me just give it to
like five decimal places
18:35 - or you know, 10.
18:37 - Like a really small max MathContext
18:40 - then I think what I can
do is I can always put
18:43 - as a second argument to
these functions like divide
18:46 - the MathContext same
thing here, MathContext
18:50 - same thing here.
18:53 - And I think if I do that the operation
18:57 - will be much faster cause
it's doing less precision.
19:02 - Right, so I got to 30 really quickly.
19:04 - So, now I can do three digits
19:10 - and I got to 312.
19:12 - I can do four digits and I got
the three, one, four, zero.
19:16 - Five digits three, one, four, one, five.
19:20 - I don't want to have this
print line in here anymore.
19:24 - And then let's go to like seven digits
19:29 - and we can see we're dying already.
19:32 - (bell ringing)
19:33 - So I have figured out a
little way to debug this.
19:36 - Which is that what I'm
just doing here now.
19:38 - I'm trying to calculate eight digits
19:40 - with a MathContext of 50.
19:43 - I'm just looking at what that
number is with a MathContext
19:46 - of 50 to 50 places.
19:48 - And it is just taking forever.
19:52 - But I will point out that if I go back
19:55 - to seven digits, right?
19:57 - I'm trying to approximate
Pi to seven digits
20:01 - and if I take the print line
is really slowing it down.
20:04 - So if I take out the print
line and run this again.
20:08 - I am going to get seven
digits of Pi 3.141591
20:13 - of course the one is wrong
the actual number is two.
20:16 - But I got pretty close
but with only doubles
20:18 - this is my old code from
earlier in this challenge.
20:21 - If I'm trying to calculate seven digits
20:25 - of Pi without BigDecimal.
20:27 - Just with the raw java double,
20:29 - I'm getting something way more off 3.1416.
20:33 - So at a minimum, I have using BigDecimal
20:37 - I have improved things and I've gotten
20:40 - to seven digits of Pi.
20:42 - Hold on, I'm back I got eight digits;
20:45 - three, one, four, one,
five, nine, two, five
20:46 - it didn't take that long;
20:47 - three, one, four, one,
five, nine, two, six.
20:50 - So you can see I'm close,
how did I get eight digits?
20:52 - Well thank you to whoever
in the chat@hv said
20:57 - is the nice heuristic to use is
21:02 - the precision that I need
21:03 - is the number of digits
I want squared plus one.
21:05 - So in this case 65 eight squared plus one.
21:08 - (bell ringing)
21:09 - Another way now we might
watch the progress of this
21:11 - that's a little bit better
21:12 - than just like console
logging the value of Z
21:15 - is I could move to doing 10,000 iterations
21:18 - or some number of iterations
every time in draw
21:21 - and I quickly just took
a break and move the code
21:23 - from set up into draw.
21:25 - And you could see now with seven digits.
21:27 - It counts up pretty quickly to that number
21:30 - with seven digits.
21:31 - There we go, I should also
should make that much bigger.
21:35 - Now let's make the size 64.
21:37 - So this is seven digits.
21:39 - It might be nice to like,
it's visually just to
21:42 - like have the counter go up
in a more interesting way.
21:44 - But now we could watch like
if I go to eight digits.
21:47 - And I probably should number format this,
21:49 - so we could see like when
we're getting close to the end.
21:51 - For example if I say number
format, the number of iterations
21:55 - as eight digits or the number of digits.
22:01 - We can see how close
we're getting to the end
22:05 - because at a certain point this last digit
22:07 - all that last digit
has to do get to three.
22:10 - So I'm going to just leave.
22:14 - Let's just leave this livestream
going all day hold on.
22:17 - Well, that would be crazy, right?
22:18 - What if I just left this streaming
22:20 - change this to fullscreen
and put it to 11 digits.
22:26 - (laughing)
22:28 - And I should also put the Mandelbrot set
22:30 - in the background probably, right?
22:32 - (bell ringing)
22:33 - I loaded the image of the Mandelbrot set,
22:35 - I put it in the background
22:36 - I set the digits to 11
we're going to let this run.
22:39 - It might, I don't know how
long this is going to take.
22:43 - There's a big problem with this.
22:45 - I am using integers
22:48 - to count the number of iterations.
22:51 - And guess what?
22:53 - There's not enough integers.
22:56 - We're going to overflow the
number of integers the computer
22:59 - can store in the int datatype.
23:02 - So I definitely could
fix this, I'm pretty sure
23:04 - if I'm making this along which gives
23:06 - a lot more space probably
like about 19 digits worth
23:10 - which is more than 11.
23:12 - But I think just for consistency
23:15 - let's use BigInteger.
23:16 - So if I use BigInteger
23:19 - and I say it is BigInteger
zero to start with
23:25 - then I can also import BigInteger
23:31 - and I can say iterations.add...
23:36 - Iterations equals
23:39 - iterations.add one.
23:42 - I guess I probably just
say BigInteger one.
23:46 - Let me stop this from running.
23:48 - So this would be increasing
the number of iterations.
23:53 - and then aaah, so then I want to take
23:59 - string S equals iterations
24:03 - to string, this will
convert it to a string
24:05 - and then I could do something goofy here
24:07 - where I could say S equals S.substring
24:10 - the first digit zero
comma one plus period.
24:17 - This is just to make it look more like Pi
24:19 - and then S.substring one to S.length.
24:24 - Oh wooh, that oh, no, no, no, this is bad.
24:27 - (laughing)
24:28 - I want, I need extra digits even for when
24:30 - it hasn't gotten that high.
24:32 - I could say int difference
24:36 - equals the number of
digits minus S.length.
24:41 - And then I could say S equals,
24:45 - like if I add another zero right?
24:47 - If I just add like one more zero
24:50 - like I get that.
24:51 - So then I could just
add the number of zeros
24:54 - for int I equals zero is
less than diff I plus, plus
25:00 - and then I could add a
certain amount of zeros.
25:06 - And is that 11 digits?
25:09 - It's one, two, three, four, five, six,
25:12 - seven, eight, nine, 10, 11.
25:14 - Yeah, I think that's right.
25:16 - Okay, that was ridiculous.
25:18 - Well, if you made it
to the end of the video
25:20 - you've now see my Mandelbrot
set processing sketch running
25:25 - and counting the number of iterations
25:27 - for a very, very, very,
very, very small epsilon
25:30 - next to a certain location
in the Mandelbrot set.
25:33 - So I really needed a
lot of stuff for this.
25:36 - I needed BigDecimal, BigInteger.
25:38 - I'm going to let this go
now to try to get 10 digits
25:42 - after the decimal or eleven digits total
25:44 - including the three.
25:45 - It's probably going to
take about 12 hours.
25:48 - So that's going to be in a live stream
25:51 - that's just going to be a 12
hour live stream of it running
25:53 - which I will link to in
this video's description
25:55 - we'll see if that works.
25:57 - We'll find out.
25:58 - But thank you if you have an idea
26:01 - for how to visualize
this in a different way
26:04 - to illustrate the idea
to explain how this works
26:07 - with the Mandelbrot set.
26:08 - Maybe there's a more
beautiful way to animate it
26:10 - to connect the concepts
of how this is working
26:15 - with the visual result that
the viewer is watching.
26:17 - I would definitely
encourage in a big thanks
26:19 - to the numberphile video and Holly Krieger
26:21 - for that wonderful explanation
which led me to do this.
26:24 - I would love to see your version of this.
26:26 - Maybe there's a way you can optimize this
26:27 - to get more digits more quickly.
26:29 - I don't know, I would love to find out.
26:31 - So look at all the references
that I'm going to link
26:33 - to in this video's description
and share with me your ideas
26:37 - at the http://www.codingtraining.com
26:39 - and see you in a future,
see you next Pi day.
26:42 - (gentle music)
27:04 - Oh my God!
27:11 - Oh my God I'm really stressed out.
27:16 - (applause and gentle music)
27:25 - Three, one, four, one, five,
27:30 - nine, two, six, five, three
27:34 - and of course the last
digit will be incorrect.
27:37 - Because it's an approximation.
27:42 - (upbeat music)