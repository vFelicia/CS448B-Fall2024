00:32 - [MUSIC PLAYING]
03:34 - Hello, everyone.
03:35 - We are starting apparently
at about 38 seconds
03:37 - according to the timer.
03:38 - You might have to give me an
extra 10 or 20 seconds here.
03:41 - But just let me know in the chat
if you're hearing my audio OK.
03:45 - I will be bringing in
our very special guest's
03:49 - audio in a moment.
03:49 - So just let me know
if you hear me.
03:51 - [MUSIC CONTINUES]
04:39 - Hello.
04:40 - I'm live.
04:41 - Look.
04:41 - I'm going to blow the
train whistle, which
04:43 - means we're really starting
today's live stream.
04:45 - [BLOWS WHISTLE TWICE]
04:47 - Hello.
04:48 - I'm Dan.
04:49 - Welcome to the Coding Train on
a very special Saturday morning.
04:55 - Interesting time to live stream.
04:56 - I hope you're having
a nice weekend
04:58 - wherever you are in the world.
05:00 - And thank you so
much for tuning in.
05:01 - Just in case it's a beautiful
day outside wherever
05:04 - you are and you feel
like playing some Frisbee
05:06 - or going for a walk, this
will all be archived.
05:09 - You can watch it all back later.
05:11 - I'll be reviewing any of
the comments on YouTube
05:13 - after this gets archived and
answering your questions.
05:16 - But please, stay with us.
05:18 - Very excited that
you're all here.
05:20 - So I'm just kind of
vamping here for a minute
05:21 - to make sure everything
is going well.
05:25 - I'm seeing a little flickering
on my monitor, which
05:27 - is a little disconcerting,
but I'm not going
05:29 - to worry about that too much.
05:31 - So first, just a couple of
housekeeping items here.
05:37 - I have a kind of entirely new
tech setup for this stream,
05:42 - because I have a guest, which I
will introduce in a moment who
05:45 - is going to do a presentation,
and write some code,
05:47 - and really take over for quite a
bit of time during this stream.
05:51 - So please bear with me if
anything should go awry.
05:55 - I know that's not
a strange thing
05:57 - to happen on a Coding
Train live stream.
06:00 - If you happen to
have come here for--
06:02 - I don't know why I'm
burying the lead here.
06:05 - But if you came here because
you heard about this stream
06:07 - from Dr. Christian Hubicki
who is the guest today,
06:10 - let me just first
briefly introduce myself.
06:12 - My name is Dan.
06:13 - I teach programming.
06:15 - And I have so for almost 20
years in various capacities--
06:18 - at schools, and workshops,
and online now quite often
06:22 - on YouTube.
06:23 - I use a particular
piece of software
06:25 - called p5.js, which I will come
back to later in the stream.
06:28 - And so if today is one of the
first days watching the Coding
06:31 - Train and you've
never coded before,
06:34 - I do have a whole
intro set of tutorials
06:36 - that you might
want to check out.
06:38 - You can just go to the
Coding Train homepage
06:39 - and find the Start
Learning Here playlist.
06:41 - So anyway, I'm not
here to promote myself.
06:43 - That's not what I meant to do.
06:45 - I just wanted to sort of
set the table for anybody
06:47 - who might be totally new.
06:49 - Let us know, by the way--
06:50 - I see people already in the
chat saying, I'm in Poland.
06:53 - It's evening.
06:53 - It's 1:00 AM Sunday
morning here.
06:55 - So I always love to hear where
people are watching from,
06:57 - so feel free to drop
your location and time
07:00 - zone into the chat.
07:03 - And Christian,
you're still there.
07:04 - I can hear you in my ear.
07:07 - Yeah, OK.
07:07 - Great.
07:09 - Let me just jump right in.
07:11 - I have a bad habit
on my live streams
07:13 - of going on and on for
incredibly long periods of time
07:16 - without actually
getting to the code.
07:17 - And I do not want to do
this today, because this
07:19 - is a really unique and
super special opportunity
07:22 - to bring in a real
life robot scientist,
07:25 - if that's an
appropriate term to use.
07:28 - If you've watched the
Coding Train before,
07:30 - you might know that I have
somewhat of a pathological fear
07:33 - of hardware.
07:34 - And I'm not so great with
soldering, and programming
07:37 - microcontrollers, and
sensors, and motors.
07:40 - And I always want to
do more with that.
07:42 - And I hope maybe 2022 into
2023 will be the year for that.
07:46 - This, I hope, is a little bit
of a stepping stone for me
07:48 - to be able to bring
a guest who has
07:50 - real expertise in working
with real life, moving around,
07:53 - physical robots.
07:56 - I first discovered Christian
by watching the television show
07:59 - Survivor--
08:00 - American reality game
show where he actually--
08:05 - I couldn't believe that a title
of an episode of an American
08:08 - reality show was called
"Breadth-First Search."
08:11 - And that is all because of the
amazing Dr. Christian Hubicki.
08:15 - He's got a bit of a
presentation and introduce
08:17 - himself a bit more.
08:19 - We've been in
touch a little bit.
08:23 - We had some back
and forth on Twitter
08:25 - about the Monty Hall coding
challenge that I released where
08:28 - we discussed that a little bit.
08:29 - He did a live stream on
Twitch coding the Monty Hall
08:32 - problem in Python.
08:34 - And I thought, ah!
08:35 - We've got to have Christian
here on the Coding Train today.
08:39 - Everybody's always
asking for Python.
08:41 - So we could do a little Python.
08:42 - I have all these videos about
nature of code, simulation--
08:46 - simulating the movement
of natural systems--
08:50 - often very much
sort of just trying
08:52 - to create the feeling
of those systems,
08:54 - not necessarily
always reproducing
08:56 - the exact or
biological mechanics
08:59 - of those systems through code.
09:00 - And so what I think--
and hopefully this
09:02 - will lead to many more
videos, and coding challenges,
09:05 - and things that I
do in my own work.
09:08 - To look at what does it
mean to write algorithms,
09:11 - to control the
motion of robots, how
09:14 - does that relate to controlling
the motion of animated things
09:18 - in generative art systems?
09:20 - And where can we go from there?
09:21 - So there's too much to
say about all of that.
09:23 - So that's my quick introduction.
09:25 - I'm going to press some buttons.
09:27 - Hopefully everything
is going to work.
09:29 - If we have to take a
five-minute break for me
09:31 - to fix audio things, I
apologize in advance.
09:35 - But I'm going to turn it over.
09:36 - I'm going to attempt
this first button, which
09:38 - will now put both me and--
09:40 - here he is, the famous in my
world Dr. Christian Hubicki.
09:45 - Thanks so much for being
on the Coding Train.
09:47 - It's a real thrill
to have you here.
09:49 - Oh, thank you so much, Daniel.
09:51 - It's great to be here.
09:54 - Once there was an
opportunity to do
09:56 - some robot coding in
a big public setting,
09:59 - I couldn't resist.
10:01 - This is too much fun.
10:02 - So I'm glad to be here.
10:03 - And I look forward to
this adventure together.
10:05 - This is going to be a
fun ride, I would say.
10:09 - Awesome.
10:09 - So I just want to
make sure that--
10:11 - I want to just see in the chat
everybody heard Christian OK,
10:14 - the audio, the video
is going through.
10:16 - Please let me know.
10:17 - I'm kind of assuming it's
fine, because I can see all
10:20 - of the dials and buttons going.
10:22 - So now I'm going to switch
over and give Christian
10:25 - the full screen.
10:26 - And let you take it away.
10:27 - And I will be keeping
an eye on the chat.
10:29 - And I'll interrupt with
any questions or things
10:31 - that come up.
10:33 - Yeah.
10:33 - No, this is going
to be a good time.
10:35 - So everyone, thank you
so much for letting me
10:37 - be here today with you.
10:39 - I'm Christian Hubicki.
10:40 - I'm a robotics professor.
10:42 - I have a PhD in robotics
and mechanical engineering.
10:44 - And I specialize
in robot control.
10:46 - So I have just a little
presentation for you all today.
10:50 - So this is kind of me during my
graduate school and undergrad
10:54 - days.
10:55 - I like putting robots together.
10:57 - But especially I love
coding robot algorithms.
11:01 - And in my world, when
I talk about robots,
11:06 - I normally break it down into
three categories of things
11:09 - that you care about with robots.
11:11 - One is that you have
sensors that can sense
11:14 - what's going on in the world.
11:16 - You have actuators that can
somehow affect the world.
11:20 - And in the middle
is this cool thing
11:22 - called control or a controller.
11:24 - And so my specific subspecialty
of controllers that I work with
11:28 - are for robots that walk on
two legs-- bipedal robots.
11:32 - So this is just a little
bit of a sample of the work
11:35 - that I've done
with my colleagues
11:36 - during my graduate
school, and postdoc days,
11:38 - and currently in
my laboratory down
11:40 - at the FAMU-FSU
College of Engineering
11:43 - in Tallahassee, Florida.
11:44 - This particular robot
is called ATRIAS.
11:47 - It walks around and balances
itself completely autonomously.
11:53 - We just tell it
which way to walk.
11:54 - And it walks in that direction.
11:56 - And here's another
example of a robot called
11:58 - DURUS that was designed to be
a very efficient walking robot.
12:03 - And here it is striding
from heel to toe.
12:06 - And we were responsible with
coming up with the algorithms
12:11 - for this thing to both
stay up and also walk
12:14 - while using as little
energy cost as possible.
12:16 - So we would say it's maximally
efficient in how it walks.
12:20 - And under the hood, there
are some pretty fancy-looking
12:24 - algorithms that you might
expect to make it go.
12:26 - In fact, we would run these
big optimization algorithms
12:30 - that would figure
out all the ways
12:32 - to move all the little
electromechanical joints
12:35 - on the robot to give it
that striding motion.
12:37 - But I'm sure I know what
a lot of you are thinking.
12:40 - Where does one buy robot shoes?
12:42 - The answer is the shoe
store like anyone else.
12:45 - In fact, we unbolted the robot's
foot and took it to Journeys.
12:48 - And this fine gentleman
knew exactly what to do,
12:50 - and put it on the shoe sizer,
and said, eh, size 14 men's.
12:54 - And he was exactly right.
12:55 - So thank you to
that professional.
12:57 - But like I alluded
to, many of you
12:59 - are probably wondering
how this is put together
13:02 - on a controller side.
13:03 - You think of a controller.
13:04 - You think of control algorithms.
13:05 - You probably think of code.
13:07 - And this is in fact
the Coding Train.
13:08 - And you would not be
incorrect in assuming
13:12 - that there's code involved
in coding these robots.
13:14 - There absolutely is.
13:16 - But fundamentally,
control algorithms
13:19 - do not need to even be code.
13:21 - They are much more
general than that.
13:23 - They are typically written
as mathematical equations.
13:26 - In fact, when you think
of control algorithms,
13:29 - you might want to
think a little bit less
13:31 - about lines of code
operating in sequence
13:33 - and more something like this--
13:35 - an equation.
13:38 - So in fact, control
theory is often
13:41 - considered a subset
of mathematics
13:43 - more than it is computer
science, even though there
13:45 - are often very much computers
involved in the code execution.
13:50 - So today, we're going
to break down control--
13:55 - or specifically, this
control over here.
13:58 - And where you can see
there's a little p,
14:00 - you can see a little i.
14:02 - You can see a little d.
14:04 - This is called a PID controller.
14:06 - And we're going to break
this down for you today--
14:08 - and as to why we use it
and why it's so powerful.
14:12 - And in spite of how
complicated these robots can
14:16 - seem, at their core,
they're using this.
14:20 - Almost certainly, the
fanciest robot video
14:23 - you've ever seen on YouTube,
somewhere down deep in the code
14:28 - is something like this equation.
14:30 - And it's very accessible
in that we're going
14:33 - to try to code it up today--
14:34 - and both in Python and also in
these lovely online scripts.
14:39 - I'm looking forward to
learning that from you, Daniel.
14:42 - That's going to be a fun time.
14:44 - But to get you started, one
thing I want to point out.
14:48 - How to follow along--
14:49 - one is that you can
make a free account--
14:53 - I'm covering up this.
14:55 - I'm doing my own
technical issues today.
14:56 - Let me make sure you
can read this here.
14:59 - You can make a free
account on Deepnote.com.
15:03 - And if you go to Deepnote.com,
that is an online notebook
15:10 - that you can start up, that
you could run your own Python
15:12 - code from scratch, and you
can code up from scratch.
15:16 - But you can make a free account.
15:17 - And that allows you
to run your own code
15:19 - and also other people's code.
15:21 - I will be coding
in Python today.
15:23 - And I have some base
code set up here.
15:26 - And I just made a quick
TinyURL link for you to go to.
15:30 - If you go to
tinyurl.com/cartpole-python.
15:36 - Python will be controlling
this cart pole today.
15:40 - And I'll get to
that in a minute.
15:42 - And you can actually
run this code
15:44 - by hitting the
little Run button.
15:46 - And it should execute.
15:48 - It might take a minute or so.
15:49 - And it will create
a little video
15:52 - that you can download and watch.
15:54 - And I'll be coding
at this link here--
15:57 - cartpole-control-- where you
can watch the code change live.
16:03 - And you can make your
own duplicate copy of it
16:05 - once you make your
own Deepnote account.
16:07 - And that's how I'll
be coding today.
16:10 - So with that, I'll go
over to my whiteboard
16:13 - and we'll get started
covering the basics of the PID
16:17 - controller.
16:21 - There you go.
16:23 - This is a very exciting
moment, because I'm constantly
16:25 - using a whiteboard.
16:26 - And I think this might be
the first remote whiteboard
16:28 - appearance on the Coding Train.
16:30 - Great.
16:32 - And as you can
see, graphic design
16:33 - is my passion as you
can tell from how
16:36 - I've set this up pretty well.
16:38 - Yeah, so a PID controller--
16:40 - let's back up
first about what we
16:43 - mean when we want a controller.
16:45 - The first thing we
need to ask ourselves
16:47 - is what do we want
to do with a robot.
16:50 - And the example we're
going to do today
16:54 - is something called
the cart pole.
17:02 - Classic example where
you have a sliding--
17:10 - I don't know what
your whiteboard marker
17:15 - luck is like here, Daniel.
17:16 - But whenever I go to
a marker, I'm like,
17:19 - it's never working exactly
as I'd planned it to go,
17:21 - even if-- it's almost like
a tech check of its own.
17:23 - Let me do my blue here.
17:25 - So this cart pole is
the sliding block.
17:32 - And you can push it
around with a force.
17:35 - You can push it
with your finger.
17:37 - And you want to balance
this pole on top.
17:41 - It's kind of a classic
control that we all
17:44 - learn when we're teaching
control theory classes when
17:46 - we're trying to learn the
fancy ways to use controllers.
17:50 - And what we often
want to ask ourselves
17:52 - is what do we want to do.
17:54 - And in this case, we want
to balance this pole.
17:59 - So we might say, hey, if our
pole is at this angle theta,
18:08 - we want theta to be up.
18:10 - And if you work in radian
land, that's pi radians.
18:16 - If you work in degree
land, 180 degrees.
18:19 - So you would say, hey,
I want my theta desired.
18:25 - I desire theta to be pi radians.
18:35 - And that is what I
consider my output,
18:37 - the thing I want to happen.
18:41 - And you can also have
an input to your system.
18:46 - And there are lots of different
kinds of inputs to your system.
18:48 - And the most obvious
input to this system
18:52 - is this force, the force
that we're applying.
18:56 - And that is true in that
that is the physical input
18:58 - to the system.
18:59 - But in a controller,
we will often
19:04 - say as our input
our theta desired.
19:10 - And our output is
our theta actual.
19:16 - So we have a desired theta.
19:18 - Let's say it's pi.
19:21 - And on our output--
19:23 - I'll try to block
the glare here.
19:24 - I don't know if I
can do that or not.
19:26 - But hopefully.
19:26 - So doing my best here.
19:28 - So say it's theta actual.
19:30 - This is where we're actually at.
19:31 - And we want to get
to our desired angle.
19:33 - So when we've achieved our task
in a controller, theta actual--
19:40 - we'll use red.
19:41 - We're on a whiteboard
streak here.
19:43 - We're going to try
new markers here.
19:45 - By the way, I'm quite
familiar with this problem.
19:47 - That red is beautiful,
though, so you're
19:49 - coming through crystal clear.
19:51 - Let's go with that red.
19:52 - All right.
19:52 - So thanks, everyone, as we work
through these highly technical
19:55 - difficulties here.
19:55 - We want our theta desired--
20:00 - we will put in our theta
desired that we choose
20:02 - and that we want
this system to go to,
20:05 - in actuality, where
we want to go.
20:08 - So from one point to the other.
20:11 - And when we've succeeded, the
difference between these things
20:15 - is what?
20:16 - It's 0.
20:17 - We want them to be the same.
20:23 - So we call the difference
between these--
20:31 - theta desired minus theta
actual has a special name.
20:38 - It's called an error.
20:39 - I can't imagine we're
familiar with errors here
20:42 - on Coding Train, are we?
20:44 - I'm sure you never get those.
20:47 - We refer to them as
happy little accidents.
20:50 - Happy little accidents.
20:52 - The technical term is error.
20:54 - So we say error is equal to
your desired minus your actual.
21:02 - And we want to drive
that error to 0.
21:06 - We want that to be 0.
21:08 - But how do we do that?
21:12 - What we do is we decide
we need to come up
21:16 - with some way of
changing our force.
21:20 - So that way, it maneuvers our
system to where the error is 0.
21:25 - And to make this
problem even simpler
21:28 - for explaining what
we're going to do,
21:30 - I'm going to get rid
of the pole and just do
21:35 - the cart, which has some mass.
21:39 - I'm just going to care about
the position of the cart, which
21:45 - I'll call x.
21:47 - So now I'll have some x
desired and some x actual.
21:58 - So at any given
time, we can measure
22:02 - where we're actually at.
22:04 - We know it's there.
22:05 - Or we know it's there.
22:07 - We know it's there.
22:08 - And we know what we want.
22:10 - We get to choose it.
22:11 - So at any given time, we can
determine what our error is.
22:15 - We can take our desired
minus our actual.
22:18 - And we'll call that e to save
me this precious deep-looking
22:24 - marker.
22:25 - Let's call it e
instead of error.
22:27 - So we need some kind of equation
where we assign our force
22:36 - to be equal to something.
22:39 - And one way that we could
do this is we can say,
22:47 - I'm currently here.
22:49 - This is my actual position.
22:51 - I want to get over here,
which is my desired position.
22:56 - I can subtract them
and get my error.
22:59 - And I can say, my
force that I apply
23:03 - should be proportional
to how far away I am.
23:08 - If I'm far away, I'm going
to apply a lot of force
23:13 - to book it there.
23:15 - Once I get closer, and
closer, and closer,
23:17 - I release the force.
23:19 - I do less force.
23:21 - So as I get closer,
I'm trying less hard.
23:23 - And this naturally
should drive this block
23:27 - to my desired position.
23:31 - So I could write that as some
constant times your error.
23:54 - So that constant
times that error,
23:56 - if I make this my controller,
this equation-- if I start over
24:01 - here, my desired is
some large number.
24:05 - My actual is a much
smaller number.
24:08 - So desired minus actual is going
to be a large positive number.
24:13 - Therefore, I would apply
a large positive force
24:17 - and start moving it.
24:19 - And it starts moving.
24:20 - And then all the time, I
update what my error is.
24:25 - I'm a little closer.
24:27 - Now ask yourself.
24:28 - Now that I'm a little
closer, has my big error
24:31 - gone up or down?
24:36 - It's gone down a little bit.
24:37 - You got a little closer.
24:38 - You're a little
closer to your goal.
24:40 - Your error gets smaller.
24:41 - The force you
apply gets smaller.
24:43 - You'll rinse and repeat.
24:44 - And you keep running
the controller.
24:46 - Just keep running it.
24:49 - And how is this going to behave?
24:52 - This is going to behave like
another device which pushes--
24:56 - it pulls on you the
further you get away
25:00 - from where you want to go.
25:01 - So let's say you're here.
25:03 - You want to get here.
25:04 - This is going to change the
amount of force you get--
25:06 - [GRUNTS] the more
you pull it back.
25:10 - What's that like?
25:11 - It's a spring.
25:14 - So if I start letting that
spring act, it's going to go,
25:17 - [IMITATES SPRING].
25:19 - It's going to go,
boy-yoi-yoi-yoi-yoing, right?
25:21 - So it's true it gets us there.
25:25 - Not very good about stopping.
25:28 - So how do we get it to stop?
25:36 - So we need more
than just something
25:39 - where you have a constant
times your error,
25:42 - which I'm now going to label.
25:43 - Instead of a constant, I'm going
to call it some constant K sub
25:49 - p times e, which is your error.
25:59 - This is our proportional term.
26:07 - So I'm just going to pause
you for a second, Christian,
26:09 - because a bunch of people
in the chat are discussing--
26:12 - and this is the light bulb
that went off in my head.
26:16 - I guess I can quickly go
to this screen here, which
26:19 - is that I have a whole
bunch of tutorials
26:22 - about these things
called vehicles which
26:25 - are simulated autonomous agents
that steer around a little 2D
26:29 - canvas.
26:30 - And a bunch of the behaviors
are things seek, arrive,
26:34 - path following.
26:35 - And all of those
involve this idea
26:37 - of a desired velocity and
their current velocity
26:41 - and looking at the error as the
difference between the speed
26:45 - and direction they want to go
and where they're currently
26:47 - going and then
applying a steering
26:49 - force in that direction.
26:50 - That is exactly the same
concept as what Christian
26:55 - is formalizing here in terms
of the mathematical equations
26:58 - and applying it to robotics.
26:59 - So this is kind of
an amazing thing that
27:01 - happened to me that made me
realize all the ways that I
27:04 - might be able to expand
and augment those examples.
27:07 - And we're going to get to this.
27:08 - You'll start to see this.
27:09 - But I'm really only
scratching the surface
27:12 - by mostly just using this
idea of proportional control.
27:15 - So anyway, I just wanted
to make that connection
27:17 - for any of the viewers
who have been following
27:19 - The Nature of Code book project
and those simulated steering
27:22 - agents.
27:23 - This is really just
sort of peeling back
27:26 - some of the layers of
those even further.
27:28 - And we'll see the
connections of those
27:30 - more once we bring
this code into p5.
27:31 - So I just wanted
to mention that,
27:33 - because people were
discussing it in the chat.
27:35 - That's awesome.
27:36 - Now, that's exactly
the kind of thing--
27:37 - this is a core
concept that applies
27:39 - to lots of different fields.
27:41 - The PID control is well
over a hundred years.
27:46 - And control theory as a
field, it goes back to--
27:51 - especially the 1800s
was a big time for that.
27:55 - But these concepts creep into
lots of different things.
27:58 - And it's really intuitive.
27:59 - And let me just break this
down a little bit here.
28:01 - We call this a
proportional term,
28:03 - because the amount
of force you apply
28:06 - is proportional to your error.
28:09 - And how much is it
proportional by?
28:12 - We have this constant.
28:14 - Who gets to choose
that constant?
28:17 - We do.
28:18 - We're the control
designers today.
28:20 - And this constant has a name.
28:23 - It's called a gain--
28:25 - G-A-I-N. And we get to
choose what that is.
28:31 - And in this analogy of the
spring, us choosing that gain,
28:35 - if it's really high, that's
a really stiff spring.
28:41 - If it's really low,
it's a very soft spring.
28:45 - So that's what that term is.
28:49 - But like I said, in a lot
of systems, you put a spring
28:52 - in there, it's going
to start vibrating.
28:56 - And we don't want
this to vibrate.
28:57 - We want it to come to a stop.
28:59 - So we need to add another term
called the derivative term.
29:16 - And it's going to be KD,
which is another gain.
29:23 - Who gets to choose it?
29:24 - We do.
29:25 - We get to choose it as
the control designer.
29:28 - This is another gain.
29:31 - These can be different
and almost always will
29:34 - be different.
29:34 - We get to choose.
29:39 - Times the derivative of
de with respect to time.
29:45 - Now, I know I just
jumped into derivatives,
29:47 - which are calculus.
29:49 - I don't want to scare anyone
who hasn't seen calculus
29:51 - or bore anyone who has already.
29:54 - But all the derivatives
in calculus-- if you ever
29:58 - had to explain and sound
smart to someone who's
30:00 - never heard of calculus before.
30:02 - Calculus is about change.
30:05 - It's basically the
mathematics of change.
30:08 - And so the derivative is
describing how much your error
30:16 - is changing over time.
30:19 - The thing we classically say
is that a position that's
30:23 - changing over time--
30:26 - if I want to see how much
it's changing over time,
30:29 - I take the derivative
with respect to time.
30:34 - And it gives me my velocity.
30:38 - So here I'm moving around.
30:41 - I took the derivative
of my signal
30:43 - here of me moving
back and forth.
30:46 - You would have this
velocity going up and down,
30:48 - always moving.
30:49 - It's coming to a stop.
30:51 - If I held my arm out constant,
took my derivative with respect
30:55 - to time, something
that's not changing.
30:58 - And you're asking how much
it's changing, the answer is o.
31:02 - So this is basically
saying that we're
31:07 - going to add a term that's not
just looking at how far away we
31:17 - are from where we want
to get, but how much
31:20 - that error is changing.
31:22 - Now, to give you a little
intuition as to how that works.
31:27 - We just talked about a spring,
how the proportional terms
31:30 - like a spring--
31:31 - you pull back that spring--
31:32 - [GRUNTS] boom.
31:34 - It's going to try to drive
you to where you want to go.
31:38 - The derivative term is
something like a damper.
31:43 - Now, not everyone
has heard of damper.
31:45 - Most people have
heard of springs.
31:47 - But dampers are very
important mechanical systems.
31:54 - My PhD is in mechanical
engineering as well.
31:56 - So I'll wax philosophical here.
31:58 - But in a car, if you
were driving around
32:02 - and every time
you hit a pothole,
32:04 - your whole car goes
ka-gong, ka-kong--
32:07 - and it starts bouncing around.
32:09 - It's bouncing around
because there's
32:10 - a spring in your car
called the suspension.
32:13 - But not just a spring.
32:15 - There's something in your car
that also stops the bouncing.
32:22 - Otherwise, you'd bounce forever.
32:25 - And that's called a damper.
32:26 - And normally, what
it is it's a piston.
32:29 - It's a piston that
when you push on it,
32:33 - there's a little fluid
that you push through.
32:35 - And it resists your motion.
32:37 - And you might see these
in your everyday life
32:39 - when you walk around
in a building.
32:41 - If you've ever seen
a door that if you
32:43 - were to try to slam
it shut, there's
32:45 - a little mechanism in the door
that might try to stop it.
32:48 - It's up by the hinge--
32:51 - that slows it down.
32:52 - That's a damper.
32:54 - And you can even hear the air
whistling through it sometimes
32:57 - where the air is the fluid
that brings it to a stop.
33:02 - So the d term acts
like this damper
33:06 - which gets rid of oscillations.
33:08 - So where we once before
had this p term that's
33:12 - going to go boi-boi-boing,
if we add this D term,
33:16 - it's going to slow it down.
33:18 - So it doesn't
oscillate as much--
33:20 - or at all, potentially.
33:22 - And how big that determines
this gain is kind of how goopy
33:30 - our damper is, how much
it's going to stop us.
33:33 - If it's very little, it's like
pushing through air-- not much.
33:37 - If it's really big, it's like
pushing through molasses.
33:44 - So that's a p and a D term.
33:47 - And we just add them.
33:50 - Now, sometimes in control, this
will get us a lot of the way
33:57 - to where we want to go.
34:00 - The blue robot I was showing
before with tennis shoes,
34:03 - we used PD controllers on all
of the joints of the robot.
34:09 - We had a fancy algorithm
that would tell us
34:11 - that, oh, what our
desired angles are
34:15 - of all of our motors, this
algorithm would tell us, oh, we
34:18 - want to make this motion.
34:19 - But on board the
robot, a pe controller
34:23 - was making the motors drive the
joints through those motions.
34:27 - That's how it works.
34:29 - So often, a PD
control is enough.
34:33 - But sometimes, you
want another term.
34:40 - And it's called
the integral term.
34:45 - So it's going to be KI integral
from 0 to t e of tau d tau.
35:00 - And you add them together.
35:02 - And I'll bring up the
equation on the board--
35:06 - on my PowerPoint slide,
so you can see it again.
35:10 - Is there any meaning
to the order?
35:12 - Obviously, you're adding
three numbers together,
35:14 - so there's no mathematical
meaning to the order.
35:16 - Or is it simply to get
the nice PID acronym?
35:20 - Or is that an initial?
35:21 - Is it?
35:25 - So we've got a number
of questions you're
35:27 - touching on here, Daniel.
35:30 - So the order, it's just
established canonically PID--
35:35 - just that's how it's stuck.
35:37 - Probably because
you could say "pid."
35:38 - But no one says "pid."
35:40 - People call it PID.
35:44 - And people call it PID.
35:47 - But honestly, the
term is the one term
35:49 - I use the least in my work.
35:51 - But it can be really helpful.
35:55 - So the P term gets you
to where you want to go
35:58 - or at least it gets you
there pretty quickly--
36:00 - probably pretty close there.
36:02 - The D term slows you down.
36:05 - The I term, it's useful when
you've run your controller,
36:13 - but you are not
all the way there.
36:18 - Here's an example.
36:19 - Imagine that this block--
36:21 - we're trying to get to there,
and we have the P term.
36:24 - But the ground is really sticky.
36:28 - There's really a
lot of friction.
36:30 - And at some point, you're
driving your PD controller.
36:37 - And you push on it.
36:38 - And so the force is big.
36:40 - The force is smaller.
36:41 - The force is smaller.
36:42 - The force of smaller.
36:42 - The force is smaller.
36:43 - At some point, the force
will be small enough
36:46 - that the friction with
the ground will stop you
36:50 - before you want to get
there, before you're
36:52 - all the way there.
36:54 - And it'll just sit there.
36:56 - It's not going to do anything.
36:57 - It's just like, well, I say I'm
going to apply this much force.
37:02 - And then the friction
is going to fight me.
37:04 - And I'm just going to hang
out there and just-- forever.
37:09 - And so that means we'll have
an error that isn't 0 forever.
37:14 - You call that a steady
state error in controls.
37:19 - And one of the most
common ways to get rid
37:22 - of steady state error
is this integral term.
37:26 - And for those who have
not done calculus,
37:28 - an integral is just
really adding up
37:32 - the past to get the future.
37:37 - It's hard to see, because my
equation spacing is terrible.
37:42 - This is why I wish that they
did PDI control, because when
37:45 - I do this lecture, I
can do the I at the end
37:47 - and have plenty of space.
37:48 - But it is doing
integral of the error,
37:51 - meaning it's adding up all
of the error from the past
37:58 - and then multiplying it
by another gain called KI.
38:03 - So if you are sitting
with this steady state
38:07 - error for a long time, all
these other controllers,
38:13 - they are chilling out,
doing nothing new.
38:15 - But this I controller's
saying, there's an error.
38:18 - I'm going to keep adding that
up, adding, adding, adding,
38:20 - adding, adding, adding, adding,
adding, adding, adding, adding,
38:21 - adding.
38:22 - And eventually, that
will add up enough
38:25 - that it gives us an
extra push of force
38:28 - to push us forward again.
38:32 - And interestingly enough, I
think I could tie this to one
38:36 - of the examples that I've used
heavily in a lot of tutorials
38:40 - and projects-- is this flocking
simulation where birds are
38:44 - attempting-- these pseudo
birds called Boids--
38:47 - are attempting to
match various--
38:50 - match their neighbors in
certain ways, like stay together
38:53 - but don't get too close,
match their velocity.
38:56 - And I think I was watching
one of the PID videos
38:59 - that you sent me as
an explanation had
39:01 - this example of if you
were driving a car,
39:05 - and you want to drive at
the exact same velocity
39:09 - right next to your
friend's car--
39:11 - if you don't have
the integration,
39:13 - you might always trail
right behind them.
39:16 - I don't know-- because you're--
39:20 - and so it's kind of like
with the birds flocking.
39:22 - We don't use
integration in flocking,
39:24 - because the idea is just
to match the velocity
39:26 - but stay actually a little
bit behind your neighbor.
39:29 - But I'm imagining if we
wanted to catch up and be
39:31 - in some type of perfectly
horizontal formation,
39:34 - we would maybe need that aspect.
39:36 - Yeah.
39:37 - And these concepts
have expanded.
39:40 - It extends well beyond robotics.
39:43 - In fact, these were invented
before there were robots.
39:45 - One of the things was the
initial applications of PID
39:49 - was ship navigation for trying
to keep a ship on course
39:53 - for an autopilot, so you don't
need some Navy sailor sitting
39:57 - at the wheel all the time.
39:59 - And that loses interest for me
after the first 12 hours or so.
40:06 - So that's where
these things are used
40:07 - in a lot of automation
tasks-- but also in modeling
40:10 - how organisms move around.
40:12 - I have the good fortune of
going to biology conferences
40:15 - every year--
40:18 - just about each year.
40:19 - And people will
use control systems
40:22 - like this to model
animal behavior at times.
40:26 - So that's the big picture.
40:28 - And that's what we're going
to try to implement today
40:30 - with a primary emphasis on
the P and the D control.
40:37 - We can do the I control as
well, but the P and the D
40:40 - will get a lot of
your job done for you.
40:45 - Let's go back to the board.
40:52 - Just so we have these links
up for you all to look at,
40:56 - I'm going to be building
atop this base code
40:59 - here from cartpole-python here.
41:03 - And that's going to take
you to a Deepnote link which
41:05 - should be publicly shared.
41:07 - And you should be able to see.
41:09 - Let me know, Daniel, if you
have a hard time getting
41:11 - to it or anything.
41:13 - But feel free to make a free
account on Deepnote.com.
41:17 - They have, I think, a
hundred hours a month
41:20 - or something you
can use for free,
41:21 - which is normally plenty for
the tasks that I need to do.
41:25 - And I'm going to be going
to cartpole-control.
41:28 - Yes?
41:28 - There's a question in the chat,
which asks, just to clarify,
41:33 - the constants are
positive, right?
41:35 - Are the constants
always positive?
41:37 - Obviously, they need
to-- the direction
41:39 - of the error is what's
sort of controlling
41:41 - the direction of the force.
41:42 - But are the constants
always positive, I guess,
41:45 - is the question we have.
41:46 - The constants should
almost always be positive.
41:49 - In fact, I will say
always positive.
41:52 - That's a great question.
41:54 - So we will be dealing--
if you are dealing
41:56 - with negative gains, you
probably flip the sign
41:59 - somewhere else in your code.
42:02 - The reason being-- let's
just take this D term.
42:07 - This D term, if
it's positive, it
42:10 - is always pushing against
the motion of your object.
42:15 - Should be trying to
slow things down.
42:17 - Which is good, because
then you are taking
42:19 - energy out of your system.
42:22 - If you ever had a
negative damper,
42:24 - those things don't
exist in real life,
42:26 - because they basically
just shoot energy
42:28 - into the system out
of nowhere and will
42:32 - drive things to be unstable.
42:34 - So negative gains
tend to be unstable.
42:37 - I think there's the classic--
42:38 - there's a joke that is the most
professor-y joke I've heard
42:42 - in a while, which is the
story of the curmudgeonly old
42:46 - controls professor that--
42:48 - the controls
professor was always
42:52 - really hard on their students.
42:54 - And by the end of the term, the
students who worked really hard
42:58 - didn't understand why they
were still being berated
43:03 - for not doing well enough.
43:05 - And the controls
professor said, well,
43:10 - when you're in a
control system, if you
43:14 - have a negative gain, that
leads to positive feedback.
43:18 - And positive feedback
is always unstable.
43:21 - So that's why I only give
you negative feedback.
43:23 - I don't like telling that
joke, because it's the most
43:25 - professor-y joke I've heard.
43:29 - So basically, it creates
unstable systems when
43:34 - you make the gain negative.
43:36 - And for how you
choose gains, we're
43:38 - going to do some strategies
today that are good
43:41 - heuristics-- good
rules of thumb.
43:43 - But you can take entire courses
in engineering departments
43:47 - and math departments on how
to choose these numbers.
43:49 - There are some really
sophisticated mathematical ways
43:53 - to take your system,
take your task,
43:56 - and then these numbers
pop out, these gains.
43:59 - But today we'll do it
with rules of thumb.
44:05 - Thanks for the question.
44:14 - Let's go away here.
44:24 - So now if you go to the
URL that I had before,
44:30 - you should see some
kind of interface
44:32 - like this where
this is Deepnote.
44:35 - And Deepnote has
notebooks in Python
44:38 - that you can write up codes
and just execute the notebook.
44:40 - And this prevents
you from necessarily
44:42 - having to have your own
interpreter on your computer.
44:46 - So this way, you can
just go to a web browser
44:49 - and just start
working on things.
44:50 - Also, Deepnote is
good for sharing books
44:54 - for collaboration.
44:55 - I know a lot of people
like Google Colab.
44:57 - That's great too.
44:58 - That's totally a great resource.
45:00 - This is just one I've used
for my class in the past.
45:03 - And it also interfaces with
some of my really technical
45:06 - collaborators at
institutions like Toyota
45:10 - where they're pushing--
45:11 - the Toyota Research Institute's
doing lots of robotics research
45:14 - that they will have
Deepnote versions of,
45:16 - which is really cool.
45:18 - We will have to get into
that in a future stream.
45:22 - So what you do is you click
on the Run button up here.
45:26 - And then it should run the code
at the link that you're at.
45:32 - And what you'll see
is that-- oh, it
45:34 - looks like it should be done.
45:36 - And it will run all this code.
45:37 - And this code is our cart pole.
45:39 - And you'll see at the bottom
there's just an image of what
45:42 - the cart pole looks like.
45:43 - But when you run the code,
you'll notice on the right-hand
45:46 - side--
45:48 - I'm sorry.
45:48 - A couple people are
saying that the font size
45:51 - is a little bit small for them.
45:52 - Is there a quick way
to zoom into the page?
45:56 - Thank you.
45:57 - Good to know.
45:59 - So let's see if I
can get rid of that,
46:01 - so that way, we can
see a little better.
46:02 - Thank you for letting me know.
46:04 - Let's see if I can make this
a little smaller over here.
46:09 - Hopefully this will be
a little bit-- good.
46:11 - Thank you very much.
46:12 - So anyway, thankfully I was not
explaining any part of the code
46:16 - specifically.
46:16 - But if you click this
Run Notebook button,
46:18 - it will run it over the course
of, I think, about a minute--
46:21 - just because it has to
get the servers to do it.
46:23 - And over on the right will
pop up this little thing
46:25 - that says simulation.mp4.
46:28 - And that's going to run--
46:30 - that's an animation that
you can then download.
46:33 - This is why I
especially look forward
46:34 - to seeing how you
handle this, Daniel.
46:36 - You have a much
more real time way
46:37 - of getting your
animations up here.
46:40 - And so I'm going
to download that.
46:43 - We're going to run it.
46:45 - And it'll give you
an MP4 file that you
46:48 - can run on your computer.
46:49 - And there's this
little cart pole where
46:52 - there's a mass to the cart.
46:55 - And then there's a mass on
the end of that little pole.
46:58 - And it just swings around.
47:00 - See that?
47:01 - Cool.
47:01 - Right?
47:03 - Currently, zero control
in it, though, right?
47:05 - Zero control.
47:07 - So that's what we're
going to add today.
47:09 - So the first thing
we're going to try to do
47:11 - is we're going to try to
control just the cart.
47:14 - We're going to move the
cart from where we start,
47:16 - which is at 0.
47:17 - And let's move it
to position of 3.
47:21 - And we're going to use the
PID controller to do it.
47:24 - So let's go for it.
47:26 - So we'll go back to the code.
47:28 - And I'll give you a little
tour of what's going on.
47:31 - So this is code that was
originally made by my PhD
47:34 - student Jacob Hackett-- thank
you very much to Jacob--
47:37 - that is set up to automatically
generate this simulation
47:41 - of the pendulum on a cart.
47:43 - And up at the top
here is some code
47:45 - using FFmpeg that's
just baseline code
47:48 - to start making-- how
to-- in setting up
47:51 - how to make a video in code.
47:52 - That's all it's doing.
47:53 - Don't have to worry
about any of that.
47:55 - I've carefully
partitioned out where you
47:57 - do have to worry about stuff.
47:59 - So here you have all of
your libraries in Python.
48:03 - And in Python, a super
popular one is called NumPy--
48:07 - "Num-pi."
48:08 - I don't know who
pronounces it in what way.
48:10 - But this is how you do a
lot of your good numerics
48:14 - and mathematics in Python--
48:17 - and a number of other
things that we use.
48:19 - And that's all going to go into
basically the simulation part,
48:23 - the thing that is
simulating the mechanics
48:25 - of this thing swinging around.
48:28 - Then we're going to define the
parameters of our cart pole.
48:32 - And you'll see that
there is gravity.
48:35 - There's a length.
48:36 - There's the mass of each cart.
48:37 - Ignore the little pop-ups
that keep coming up here.
48:39 - They try to be helpful.
48:41 - They try to be helpful
with these pop-ups.
48:42 - And so you can change
those parameters around
48:45 - as you would like.
48:47 - And here are some parameters
of the simulation.
48:50 - For those of you who don't know
how these computer simulations
48:53 - work, they work by taking little
time steps in time and saying,
48:58 - hey, I'm currently at this
position and this speed.
49:02 - Now I'm going to use what I
call the equations of motion
49:06 - and compute how much this
thing should move over
49:09 - the next tiny bit of time,
some little time step.
49:13 - And that's what dt is.
49:16 - And then it will compute how
it moves over that time step.
49:19 - It says, this is where I am now,
reuse those equations to figure
49:23 - out where I need to be next, and
then next, and next, and next,
49:26 - and then repeat until you have
a full simulation of the motion
49:30 - of your system.
49:31 - So that's what this
little time step is.
49:32 - And there are many
ways to do that.
49:34 - We're using a fairly simple
method called Euler's method.
49:37 - That's for another time.
49:38 - Did you ever cover
Euler's method
49:39 - on your stream here, Daniel?
49:42 - Is this a thing that--
49:43 - I imagine you have
to simulate things.
49:45 - This is a frequent discussion.
49:47 - And so yeah, Euler's
integration--
49:48 - that's the primary integration
method I use in almost all
49:52 - of my examples, yes.
49:53 - And we've talked about
various other techniques,
49:56 - like Verlet integration,
then there's
49:57 - like the Runge cutoff, which
I'm always mispronouncing.
50:00 - So it's come up
before and is also
50:02 - a big aspect of the various
different kinds of physics
50:05 - simulations I've done.
50:06 - Great.
50:07 - So yeah, that's
what's happening here.
50:08 - So nothing you
haven't seen before.
50:12 - And we do some initializations
of our variables.
50:16 - And I think that one of the
things that we do change is we
50:19 - can change our starting position
of our pendulum on a cart.
50:23 - I said that I'm going to
start at position of 0
50:26 - with a speed of 0.
50:28 - And then I'm going
to change the pole
50:30 - angle to be 9 pi
over 10, so 9/10
50:36 - of pi, so very close to pi--
50:38 - kind of.
50:39 - So kind of close to pi.
50:40 - And with an initial
angular velocity of 0.
50:44 - So we set those initial
conditions there.
50:47 - And so that's how we set
where the cart starts.
50:55 - And then we get down
to the simulation loop.
50:57 - This is where we
are taking steps
50:59 - through time to get our
simulation, simulation,
51:01 - simulation.
51:02 - I blocked off this handy-dandy
little section here.
51:06 - This is where we're
defining our control input.
51:09 - So that's going to be our
controller right here.
51:13 - And the level of Python we'll
need to use is very simple.
51:15 - So you don't have
to worry about it
51:17 - too much if you haven't
learned Python before.
51:19 - But if you have, you
can tear it apart
51:21 - and do what you want with it.
51:22 - And then down here, we have the
actual simulation calculations
51:26 - for the pendulum on a cart.
51:28 - And I know that you
simulated the double pendulum
51:30 - in the past, which is a
pretty darn complex system.
51:33 - So there are a number
of ways to do it.
51:36 - Here we actually
set up the equations
51:37 - of motions on a matrix
operation that we then
51:41 - solve and then come up with
our accelerations for equations
51:45 - of motion.
51:46 - That's what we do here.
51:47 - And then at the end,
there's all of the stuff
51:50 - where we define our animation.
51:52 - So any Python wizards or Python
enthusiasts or Python learners
51:56 - want to mess around with
how the animation looks--
51:59 - put a cat on the
end of the pole--
52:00 - by all means.
52:02 - So that's all that's
going down on at the end.
52:04 - So what we're going
to clearly focus on,
52:06 - though, is the controller.
52:07 - So let's go back
up to our control.
52:11 - And I have commented
this up already.
52:15 - So that way, you know how
to reference what variables
52:17 - and how.
52:18 - So let's start by just moving
the cart to that position 3.
52:25 - So let's have a
desired x, which I will
52:29 - label as xdes is equal to 3.
52:33 - And I'll resist not
typing a semicolon
52:35 - from my other languages.
52:40 - This is our desired
cart position.
52:48 - And we're going to do a
P controller to start.
52:50 - So let's do a Kp.
52:52 - And let's just set
Kp equal to 50.
52:58 - Kp is equal to 50.
53:02 - Now we need to know
what our error is--
53:05 - e.
53:06 - So I'm going to define e as
being our desired minus actual.
53:12 - I always remember desired minus
actual like district attorney--
53:17 - by some mnemonic device.
53:20 - Desired minus your actual.
53:22 - So our desired is xdes.
53:24 - And our actual, I gave
you a neat little thing.
53:27 - You can grab x_vec i--
53:30 - we have to do minus
1 to put in here.
53:34 - So basically, it's our
last measured position
53:37 - is what this is.
53:38 - So xi minus 1.
53:41 - So here is our actual force.
53:46 - And notice it says u.
53:47 - And you're going to say,
Christian, force doesn't
53:50 - start with u.
53:51 - That's correct.
53:52 - In control theory,
control inputs
53:54 - are often designated as a u.
53:56 - That's just the convention
we like to have.
53:59 - Control inputs are u's.
54:01 - And so we're going to say, K--
54:04 - so our proportional controller
is going to be Kp times error.
54:11 - Simple enough.
54:13 - So what I'm going to do is I'm
going to scroll up and just run
54:19 - this block I'm in.
54:20 - That'll save you from
having to run this block.
54:23 - You don't need to run
this top lock every time.
54:25 - This just installs FFmpeg
so we can make animations.
54:27 - So you can run the whole thing.
54:29 - That's fine.
54:29 - It'll just do this command.
54:32 - And that's not the best.
54:33 - And are people able to
see the text OK enough?
54:36 - Or should we--
54:38 - It looks good, I think.
54:39 - Good.
54:39 - Great.
54:41 - I can always make it bigger.
54:42 - I'll just wish I had a
bigger monitor, that's all.
54:44 - So I'm going to click
that little arrow that
54:46 - was right there.
54:47 - And it's just going
to execute everything
54:48 - in the second big block
which has the simulation.
54:52 - This will take a little bit.
54:53 - And while it's waiting for
the server to run our code,
54:58 - I'll point out that this is
going to try its darndest
55:03 - to keep the--
55:05 - it's going to try to push the
block toward that position,
55:10 - but it's not going
to know how to stop.
55:12 - This is the spring
attached to our block.
55:15 - And I chose 50.
55:18 - And people say, hey, is
that big or is that small?
55:22 - It honestly depends
on your system.
55:25 - And is this a sort
of idealized system?
55:28 - Is there any friction between
the cart and the ground
55:32 - or other forces at play?
55:35 - This is a pretty
idealized system.
55:36 - This is a pretty
idealized system.
55:39 - There is friction
with the ground,
55:40 - but I turned it off, just
because for demonstration
55:44 - purposes.
55:45 - But very idealized
system, Daniel.
55:47 - Looks like it's done.
55:48 - So I'm going to download
this and cross my fingers,
55:53 - see how it goes.
55:56 - Whoa.
55:57 - Hey, look at that.
55:58 - It's a spring just
like we anticipated--
56:01 - with a little pendulum
swinging around.
56:02 - Again, we don't care
about the pendulum.
56:04 - So pretty much as
we anticipated.
56:10 - So that's the p control.
56:13 - Let's add the d controller here.
56:16 - So we have a proportional gain.
56:21 - Now let's make a
derivative gain.
56:22 - Now, my rule of thumb is I try
to make my derivative gains
56:27 - about 1/5 of the
proportional gain
56:30 - if I'm just messing around,
if I don't have any math
56:33 - to tell me otherwise.
56:34 - It's a good starting point.
56:36 - So I'll make it 10.
56:38 - That's our derivative gain--
56:41 - the thing that's
going to slow us down.
56:44 - And that's going
to be proportional
56:45 - to the derivative of our error.
56:50 - And I'll go back to the
board and say, well, what's
56:53 - the derivative of our error?
56:55 - And I'll use a little
basic calculus.
56:57 - Don't fret if you haven't
seen calculus before.
57:04 - If we are taking the
derivative with respect
57:08 - to time of our error,
and our error--
57:17 - swing my microphone around.
57:19 - And our error is your x
desired minus x actual.
57:34 - That's equal to taking the
derivative of each of them
57:37 - individually and
subtracting them.
57:40 - This is just a
property of calculus.
57:45 - So this is the rate of
change of x desired.
57:49 - And this is the rate of
change of our x actual.
57:52 - Now our x desired,
who decided it?
57:55 - We did.
57:57 - Is it changing?
57:58 - No.
57:59 - It's just a constant.
58:01 - So we draw a little arrow
that goes through it
58:04 - that says it goes to 0.
58:07 - That's zero.
58:08 - Now, the rate that
our actual position
58:12 - is changing over time--
58:14 - we talked about this before.
58:15 - That's the velocity.
58:17 - That's the velocity term.
58:19 - So our time
derivative of error is
58:25 - equal to minus d dt of
our actual position--
58:32 - to our measured velocity.
58:34 - And in our simulation, we've
measured that information.
58:38 - So we can use that directly.
58:40 - So back to the code.
58:52 - So we're going to create de_dt.
58:56 - That's our derivative.
58:58 - Sometimes we would say e dot.
59:01 - Whenever you take a
derivative respective of time,
59:04 - sometimes you just put
a little dot above it.
59:06 - It's easier.
59:07 - Saves us precious marker
stuff, marker magic.
59:13 - And so it's equal to
minus the derivative.
59:19 - And we have that
stored in dx_vec.
59:21 - So right there.
59:23 - That's the velocity minus that.
59:28 - So we have the ddp.
59:32 - Now we're going
to add together--
59:34 - we're going to add our d term.
59:37 - So you can say Kd times de_dt.
59:46 - See what happens.
59:47 - I'm going to rerun
this block of code
59:50 - and hope I didn't
screw something up.
59:51 - I know it will be the first
time anyone's ever screwed up
59:54 - a line of code on your screen.
59:55 - So I don't want to be
setting any records here.
59:58 - But I guess if I'm going
to do something on--
60:04 - But you can see how simple
that controller is as we're
60:08 - waiting for this to go.
60:09 - You might have thought
a robot controller might
60:10 - be a bunch of if then
statements, a bunch of catches,
60:13 - a bunch of cases, a bunch
of do this, then do that.
60:15 - And that can be in
a robot controller,
60:18 - but it doesn't have to be.
60:19 - It can be these continuous
little math equations.
60:24 - And while this is running,
I'll say that, hey, there's
60:28 - theoretically
nothing stopping you
60:30 - from making these
gains enormous.
60:33 - You can make them a million.
60:36 - And in the simulation, sometimes
that works really well.
60:40 - Sometimes.
60:41 - But on real robots, the
reason you don't do that--
60:45 - did I screw up something?
60:46 - Do we have that?
60:47 - Kd-- you run it.
60:49 - I see an error going on here.
60:51 - It didn't like something.
60:53 - Let me just give
it a little bit.
60:55 - Run that again.
60:56 - So yeah.
60:59 - Is yours working?
61:00 - I see you put in here
it's still waiting here.
61:06 - So you can tell if it says--
if it's still running,
61:08 - you can tell if it has a little
stop, little swirly wheel.
61:12 - And if you go
through it, it looks
61:14 - like it errored on the making
of the video part, which I sure
61:18 - hope it didn't because
that's the part I'm
61:19 - least happy to debug.
61:21 - While it's running, there is--
61:23 - I had a question,
actually, in my mind.
61:25 - And some people are asking them.
61:26 - I have a good sense of how I
tune these kinds of parameters,
61:31 - these constants, in
a simulation that I
61:33 - might be doing for a
code example that goes
61:36 - on a website or an animation.
61:37 - But you're dealing with--
61:38 - and maybe this is
what you're getting
61:40 - to-- real physical objects.
61:42 - You have it on too big.
61:43 - It could like crash and break.
61:45 - So how do you--
61:48 - what is the process for tuning
all of these parameters?
61:51 - Do you actually do a lot of
simulating first on a computer
61:55 - before you apply it
in physical reality?
61:59 - So the short answer is yes.
62:02 - When we can, we try to build
a simulation of a robot
62:05 - and try to get gains on it.
62:07 - Now, we know that that
simulation will be imperfect.
62:10 - I don't know if this has
been said on your channel,
62:12 - but I know it's been
said a million times
62:14 - in all kinds of
engineering and sciences.
62:16 - But all models are wrong.
62:18 - But some are useful.
62:19 - But some are useful.
62:21 - And so we'll have
a simulation model,
62:25 - and it will tell us if
we're in the right ballpark.
62:28 - But you will almost--
62:29 - so that will give you a good
first guess for the gains.
62:32 - But I will say-- and we do this
with our robots all the time--
62:35 - some of the robot
testing is exciting
62:38 - when it's trying to walk.
62:39 - Some of it's incredibly
boring where you'll have--
62:42 - a hard-working student will go
to the robot and take its arm
62:49 - and will just try to
jerk it a little left
62:52 - or to the right, a little bit.
62:55 - And what is he doing?
62:56 - He's tuning up the gains.
62:57 - He's starting very,
very small, so it's
63:00 - applying almost no force,
and then almost as a knob,
63:05 - dialing them up to where
he expects them to be good
63:10 - and where she might
say, OK, that's good.
63:13 - That's about to the range where
I expect that they'll be good,
63:15 - but is it good?
63:17 - Does it need to be
a little tighter?
63:19 - Does it need to be
a little looser?
63:20 - So there's often, in robots,
a little bit of manual play.
63:25 - And that's fine.
63:26 - So let's see.
63:27 - Did this run here?
63:27 - I just ran my simulation.
63:30 - Oh, look at that.
63:31 - Look at this.
63:31 - Look what's going on here.
63:33 - This is awesome.
63:35 - Look what it's trying to do.
63:36 - So it is trying to keep
it in that position there,
63:41 - but it's actually got a
little disturbance on it.
63:43 - You see that?
63:44 - It's the pendulum being
whipped around at mach 3,
63:50 - and it's still trying to hold
that position even though it's
63:54 - jittering around.
63:55 - So it's trying to do its
best to hold it there.
63:58 - So we did it.
63:59 - I would say we
effectively did it.
64:01 - If we didn't have that
pendulum on there,
64:03 - it would be almost perfect.
64:04 - So that's a very simple
control of the cart.
64:09 - Now, what we really
want to control,
64:11 - though, is the pendulum.
64:12 - And this can be a
trickier proposition,
64:15 - or it can sometimes be a
simpler proposition where
64:18 - we're going to say we
want to apply a force that
64:26 - is proportional to the
error not of the cart,
64:28 - but of the pendulum.
64:30 - Can you show-- sorry.
64:33 - Can you show the TinyURL
link again real quick?
64:35 - A couple of people
were looking for it.
64:37 - You got it.
64:37 - And I failed to get
it into the chat.
64:40 - I will put it in the chat.
64:41 - So you can find me--
64:43 - so right here,
currently, I'm coding
64:47 - on tinyurl.com/cartpole-control.
64:49 - The base code you can edit
is at cartpole-python.
64:54 - Oh, actually, my
face is in the way.
64:55 - Let me get that out
of the way for you.
64:59 - Cartpole.
65:00 - I'm putting it into
the that chat now, so--
65:02 - Yeah.
65:02 - So we can put that
maybe in the description
65:04 - or whatever we want to do.
65:06 - These questions are great.
65:07 - I welcome them.
65:10 - Another question
came up, actually.
65:12 - I was sort of saving
some for later,
65:13 - but since we took a moment
to chat here for a second.
65:17 - A lot of my viewers, I
know, are people at least--
65:19 - I wouldn't say viewers,
but also students
65:21 - that I work with at
NYU in particular, work
65:23 - with Arduino a lot.
65:24 - And is this a particular--
65:27 - is that a
microcontroller that you
65:28 - work with at all in your lab?
65:30 - And is the PID
controller algorithm
65:32 - something that could be
applied to an Arduino,
65:34 - controlling a servomotor
or something like that?
65:37 - Yeah, so we do use Arduinos
all the time in the laboratory.
65:42 - They're great for especially
small robots when we are just
65:45 - trying to prototype something
or a proof-of-concept robot that
65:50 - might be for a scientific test.
65:52 - I remember I had to make a--
65:55 - maybe this is a story that
would tie a few things together.
65:58 - I remember when I
was on Survivor,
66:01 - as you were mentioning.
66:02 - There was a challenge
where it went on for hours,
66:05 - so I had nothing to do but talk.
66:07 - And one of the things when
you watch the episode of--
66:11 - if you're watching the show,
you can't miss this challenge.
66:13 - At least it'd be hard
to miss this challenge.
66:16 - If you're watching, you'll know
which one I'm talking about.
66:18 - And I mentioned that I
had to design a plant root
66:23 - robot, a robot that was
basically a growing plant
66:27 - root that would move into soil.
66:29 - And this was a scientific
study for trying
66:31 - to determine what strategies
for how roots grow
66:34 - would be best for penetrating
through different materials.
66:37 - And it was specifically
in collaboration
66:42 - with a group at Duke that
does genetic knockout
66:46 - studies of plants and
noticed that there were
66:48 - some ways that plants grow
that they grow straight,
66:51 - and sometimes, the root
wiggles at the end.
66:54 - And that wiggle was something
that showed up in plants
66:59 - that they could knock out
and try with real plants
67:01 - to see if it's
better at growing.
67:03 - But they wanted to also
try it with a robot.
67:06 - And so I made-- this motion--
this wiggle is called
67:09 - circumnutation, circumnutation.
67:12 - And so we used our
Arduino to control
67:16 - the wiggle of the plant.
67:17 - And there, we used something
called a stepper motor.
67:20 - And a stepper
motor, you can just
67:23 - tell it to click
one wheel at a time.
67:27 - It'll just click to a position.
67:30 - And so you don't need
a PID controller just
67:32 - to do that, the
click to a position.
67:35 - However, if you have
any kind of motor
67:36 - where you're applying current
or a torque or a voltage
67:41 - that you control up or down,
PID control is great for that.
67:47 - But I also got--
67:48 - the project I was talking
about during that challenge
67:50 - was using an Arduino to control
the circumnutating plant robot.
67:57 - So yeah.
67:58 - All right.
67:59 - So it looks like that--
68:01 - so that ran, and it managed
to hold that position
68:04 - at roughly 3.
68:06 - I bet if we-- if you could turn
off the pendulum by making it
68:09 - massless or very, very
close to massless,
68:11 - if you went up to the top--
68:14 - if you went to the
top of the code
68:15 - and changed the pendulum
mass to, like, 0.001,
68:18 - it would probably
do extremely well.
68:21 - So now let's try to control
the actual angle of the pole.
68:27 - So let's go-- well, maybe
we can make this super easy.
68:31 - So instead of
having an x desired,
68:34 - let's just have a theta
desired, an angle, so thetades.
68:40 - And we're going to
make that theta--
68:42 - darn it.
68:43 - It teleported me in the code.
68:45 - All right.
68:45 - So thetades-- so we
want our desired theta
68:49 - to be pi, so not down to 0.
68:53 - Up is half a rotation.
68:55 - Half of 2 pi is pi.
68:57 - So in Python, you
have to say np.pi
69:02 - because the NumPy package is the
one that tells you what pi is.
69:08 - All right.
69:08 - And now we're going to come up--
so now we to say our error now,
69:11 - instead of being
xdes minus xvec,
69:14 - it's thetades minus thetavec.
69:21 - And de_dt, instead of being
-dx_vec, is -dtheta_vec.
69:27 - And we'll see how this works.
69:29 - We'll see how this goes.
69:30 - I'm just going to run
this block of the code.
69:35 - I don't need to scroll up.
69:36 - I just click that
little arrow over there.
69:38 - And we'll see how this works.
69:40 - I haven't tried the
set of games before,
69:41 - so your guess is as good as
mine as to how this goes.
69:46 - But yeah.
69:48 - And you-- sorry.
69:49 - I was answering
questions in the chat
69:51 - while I was half-listening
to you, so I was curious.
69:53 - So you had to change both--
69:56 - obviously, you're
changing the desired
69:58 - in the error to calculate
it based on the angle,
70:00 - but now you're also
looking at the angular
70:02 - velocity of the pendulum,
no longer the velocity
70:05 - of the cart itself.
70:06 - So the cart's position plays
no role anymore, its position
70:11 - or velocity.
70:12 - You're only looking at the--
70:14 - you're sensing, basically, just
the movement of the pendulum.
70:17 - That's exactly right, Daniel.
70:19 - So yeah.
70:19 - So we've now changed
it so we're just caring
70:22 - about that thing staying up.
70:24 - We don't care where
the cart goes.
70:26 - It's like if we are
balancing a rod on our hand.
70:29 - We can move our hand all over
as long as the thing stays up.
70:34 - All right.
70:35 - It looks like it ran.
70:36 - This time, it didn't
error in that weird way
70:38 - that I can't explain.
70:39 - The first time that's happened.
70:40 - Let's see.
70:41 - All right.
70:41 - Let's see what
happened when it ran.
70:44 - It's trying to catch up.
70:46 - There it goes.
70:46 - It really doesn't
care where it's going.
70:48 - It really doesn't care.
70:50 - All right.
70:50 - So it didn't fall down, at
least as far as we knew.
70:55 - So we can mess with
the gains a bit more.
71:00 - And we can also start where--
71:02 - let's have the cart start a
little bit closer to the top.
71:06 - So maybe it doesn't have to
make as much extreme maneuver
71:08 - while we're trying it out.
71:10 - And this is a good
strategy if you're
71:11 - trying to test out
a controller and you
71:13 - want to know if you
got it right at all.
71:15 - Try to get it started off really
close to where you want to go
71:19 - and see if it'll get it there.
71:21 - And then if it goes wild,
if it flails around anyway,
71:26 - you know you probably are
doing something wrong.
71:29 - 50% chance it's a
sign error somewhere.
71:31 - You have a negative
where you shouldn't.
71:33 - So I'm going to make--
71:35 - did I rerun it?
71:36 - OK.
71:36 - I'm going to stop execution.
71:37 - Didn't mean to run it.
71:39 - So I'm going to
change-- instead of--
71:41 - I'll go up to my initial
starting position, where
71:45 - instead of having
9 over 10 pi, I'm
71:48 - going to change it to 9.5 out
of 10 pi, so pretty close.
71:54 - We can even go 9.8 out of 10
pi just to see if it works.
72:00 - We run this code here.
72:03 - And what we should expect-- at
least what I expect to happen
72:06 - is that it's keeping the
system pretty close to up.
72:09 - It keeps it from going down.
72:11 - Now, if it runs off
to the distance, what
72:14 - I'm going to first try to
do is increase my p gain.
72:22 - Because what I want
the system to do
72:23 - is to push harder on the cart
when there's an error, so
72:27 - that way, it might push it
past where the pendulum is.
72:32 - And so it might
start going back.
72:34 - But we might have to play
around with that a little bit.
72:36 - But I will point out the
thing hasn't fallen down yet.
72:40 - So good.
72:42 - That's not too bad for gains
we just plucked out of nowhere.
72:46 - You just need infinite space.
72:48 - Yeah, just infinite
space, right?
72:50 - And so this will be the game.
72:53 - And one thing I
think will be fun
72:54 - when you're doing the
JavaScript version of this--
72:57 - that we have ability to
rapidly try new things.
73:00 - Yeah.
73:01 - This is-- I am learning so
much and fascinated and just
73:05 - enjoying this so much.
73:06 - But the amount of time between
changing a variable and seeing
73:10 - the results is very painful
to me because that's--
73:14 - so that's why I'm so excited
for this collaboration,
73:17 - because I think
there's some-- well,
73:18 - JavaScript and the
browser obviously
73:19 - have a lot of limitations in
terms of scientific computing
73:23 - to be able to quickly
demonstrate and change--
73:26 - we could interactively
change the game
73:28 - with a slider, for example,
and have it continue to run.
73:30 - So anyway, we'll get there.
73:32 - No, it's fine.
73:33 - And I'll point out
that, hey, look,
73:36 - it managed to
balance the pendulum.
73:37 - It was a little bit of an error,
and it managed to actually--
73:40 - looks like it managed
to stick it there.
73:41 - Yeah.
73:42 - So it balanced it.
73:43 - And so at least
those gains at least
73:45 - worked in principle
for the small error.
73:47 - Now we can tune them
up in JavaScript,
73:53 - and that maybe will
be our next step.
73:56 - But before we go there,
I'll talk just a little bit
73:59 - about the integral
term, the integral term.
74:02 - Because sometimes
people are like,
74:03 - how do you do the
integral, Dr. Hubicki?
74:07 - And that's often the one that
gets people just a little bit
74:10 - confused, and justifiably,
because it's a little bit more
74:15 - complicated.
74:16 - Because you actually have to
start keeping track of how--
74:20 - you're adding up,
over time, this error.
74:23 - So you need some
kind of variable
74:25 - in which you are storing
this added-up error.
74:28 - So let's do that.
74:29 - And I'll add this to our--
74:33 - I'm going to have to actually
made some changes to the base
74:36 - code in order to do that.
74:38 - So what I'm initially
setting up here
74:40 - are what I call state vectors.
74:42 - And these are
vectors, just lists
74:45 - of numbers, that are storing
the position over time,
74:50 - the velocity over
time of all the things
74:53 - that are moving around.
74:55 - We're just going
to add another one
74:56 - for the integral of our error.
75:00 - So I would say we can even
simplify it a little bit more.
75:05 - So we're going to say--
75:06 - right before the
simulation loop,
75:08 - we're going to say our
initial error integral
75:14 - is 0, a creative variable
called error.int.
75:19 - And this is just above
the simulation loop.
75:22 - That's what we're doing this.
75:25 - Equal to 0.
75:28 - And then inside the loop,
we're going to create--
75:40 - we're going to update
our error.int--
75:43 - let me just call it error.int--
75:47 - as being equal to the previous
error.int plus the current
75:55 - error times--
75:58 - you remember that
little time stamp
75:59 - that we talked about
in the simulation
76:01 - for this tiny
little step of time?
76:03 - We're going to
multiply it by that.
76:04 - I believe it's dt.
76:05 - I'm just going to
check and make sure
76:06 - that's the right variable-- dt.
76:08 - So a 1,000th of a second, this
tiny little period of time.
76:13 - dt.
76:15 - There we go.
76:17 - There you have your
error integral.
76:19 - Now, what else do we need
to add an integral term
76:22 - to this controller?
76:24 - Well, we have-- we have--
76:26 - goodness.
76:28 - Teleported me again.
76:31 - You have a gain for
your proportional term,
76:34 - gain for your derivative term,
a gain for your integral term,
76:37 - so Ki.
76:39 - And we'll make it 1.
76:41 - This is often my smallest
term, my smallest gain
76:45 - when I'm doing PIE control
if and when I want to use it.
76:49 - It's the integral
gain, which I have
76:52 - a disorder in which
I could only spell it
76:55 - integral every time, integral.
76:58 - Every time I spell it wrong.
77:00 - So integral gain.
77:02 - So then we add this term,
so Ki times error_integral.
77:11 - Done.
77:13 - That's our integral gain.
77:17 - So now we have p, i, d,
all three components.
77:20 - And if we decide we don't
need i, guess what we can do?
77:25 - We can teleport away and
then come back and then
77:27 - do what I was going to
do in just a second.
77:29 - We can make the integral term 0.
77:32 - Doesn't exist.
77:34 - Turn it off.
77:35 - So I'll do one
quick run of this.
77:37 - And I think that
that is the core
77:39 - of what we need to start
doing this in JavaScript.
77:42 - Yeah.
77:44 - I've got a few questions
that I've been noting down.
77:47 - Well, I guess
while it's running,
77:48 - maybe I'll ask you some of them.
77:50 - Yeah, perfect.
77:51 - I have no idea what this means.
77:53 - Somebody asks whether
this relates to something
77:57 - called an LQR regulator.
78:00 - Is that something you recognize?
78:01 - Is that a term you recognize?
78:03 - It absolutely is.
78:05 - We have some ringers in the
chat today, the LQR regulator.
78:09 - So the short answer is yes.
78:13 - And I mentioned before
that we're picking gains.
78:18 - And there are these rules
of thumb we're using,
78:21 - but there's an entire
mathematics to choosing
78:23 - gains more intelligently.
78:26 - So that way, theoretically, you
don't have to guess and check.
78:30 - With a robot, I can do a
little bit of guess and check.
78:34 - But what if I was doing
gains for a power plant
78:38 - and observing how much I'm
going to open the valve that's
78:41 - going to the coolant?
78:43 - You don't want to guess
and check on that.
78:46 - However, if you have the
equations of motion--
78:49 - we'll call it the system
dynamics of your system--
78:53 - you can use control
theory to come up
78:56 - with the gains, one
of which is called LPR
79:00 - is one method for doing that.
79:02 - That's a method of what we
call optimal control where we--
79:06 - instead of defining just
where we want to go,
79:11 - we define what we call a cost
function, which we say, oh--
79:16 - where we define
how much it costs
79:18 - to operate our controller.
79:20 - And so that could
be saying that we
79:23 - have a cost that penalizes how
far we are away from where we
79:28 - want to be but also
penalizes how much effort we
79:31 - use to get there.
79:32 - And this is the proportion that
we want to care about both.
79:34 - And theoretically, LQR,
if you run this process,
79:40 - will give you the optimal best
gains to minimize that cost.
79:46 - And that's what LQR does.
79:47 - So it will give you the
PID that's absolutely best.
79:51 - But it requires us to do
a little bit more math
79:53 - and to take the system--
79:55 - the methods of this pendulum on
a cart and do some little bit
79:59 - of trickiness with it.
80:00 - Yeah, it's interesting.
80:01 - One of the things
when I was poking
80:02 - around looking at this topic--
80:04 - I saw a paper about using
genetic algorithms to evolve
80:08 - the optimal gains for PID.
80:12 - So I think there's lots of
interesting methodologies
80:15 - you could use to tune
those parameters.
80:18 - Yes.
80:19 - And they all have
strengths and weaknesses.
80:21 - So the LCQ, it stands for
Linear Quadratic Regulator
80:28 - is what it stands for.
80:30 - But if we break down what that
is, that first word, "linear,"
80:33 - says that your system should be
what we call a linear system,
80:38 - meaning that you put in a little
bit, you get out a little bit.
80:42 - You put in a lot more,
you get out a lot more.
80:45 - But the pendulum part of
this is not a linear system.
80:51 - It's not linear because if
I put a little bit of effort
80:56 - when the pendulum is at the
bottom, it'll move a little bit
80:59 - and come back.
81:00 - If I put it a
little bit of effort
81:02 - when the pendulum is at the
top, it's going to go crazy.
81:06 - So it's nonlinear.
81:10 - So theoretically,
the LCQ doesn't work.
81:15 - Now, in practice, we're
good at making it work.
81:17 - In control theory, we learn
ways to linearize the system,
81:20 - pretend it's linear.
81:22 - But genetic algorithms
don't care, much
81:26 - like the Honey Badger.
81:27 - The genetic algorithms-- you
can give it whatever you want,
81:31 - and it will try to come
up with a solution.
81:34 - But you don't have
those guarantees.
81:37 - LQR-- mathematicians
from 100 years ago
81:41 - figured out the proof
that says these are
81:44 - the best gains for that system.
81:46 - So it's this balance
between what you can prove
81:49 - and what you can do.
81:52 - So it looks like the
[? i term ?] didn't do much.
81:55 - It didn't kill the system.
81:56 - Didn't do much either.
81:57 - Still going.
81:58 - But we can balance.
82:00 - I think this is a good
time to hand it over.
82:02 - What do you think?
82:03 - Yeah, no, this is perfect and
a good segue here in that--
82:10 - a good segue in that
there's some other questions
82:12 - that maybe we can come back
to towards the end that I've
82:15 - been noting down here.
82:16 - But a lot of the
discussion in the chat,
82:19 - which was super
interesting to read,
82:20 - was, oh, I think I saw
somebody try this in Unity.
82:25 - Or, oh, you know
what you could do?
82:26 - You could use Pygame.
82:28 - So if you wanted to
have it in Python
82:29 - but have it be real
time and interactive,
82:31 - you can use Pygame for that.
82:32 - Absolutely.
82:33 - This is really, I
think, where we're
82:35 - going now with this stream.
82:37 - I'm just so excited about
this topic that I have to--
82:43 - my eyes are too
big for my stomach,
82:46 - I think, is the right,
maybe, metaphor here,
82:49 - that I just want--
82:49 - I want to try to work
in JavaScript and P5
82:52 - to take a few steps
towards beginning
82:55 - the idea of an interactive
simulation around this topic
82:58 - now that we've been taught
about it in such detail.
83:00 - But I do think it's
something that I would really
83:02 - like to come back
to, and we can maybe
83:04 - do some additional live
streams, or I might make some--
83:07 - I really hope to do a
specific coding challenge
83:09 - video about a PID controller.
83:12 - So yeah, so I think this
is a good time to segue.
83:14 - Let's see if I can
press this button.
83:16 - Hopefully this works.
83:17 - Great.
83:18 - So now what we're
looking at is--
83:19 - and I'm just going to make
Christian a little bit smaller
83:23 - here to not block the code.
83:26 - So does my voice pitch get
higher when you do that?
83:29 - Is that how that works?
83:31 - It's funny.
83:32 - I have a video about--
83:33 - there's a JavaScript array
function called reduce,
83:37 - which is a way to summarize
an array of numbers
83:41 - all into one value.
83:42 - I mean, that's a very
crude way of describing it.
83:44 - [LAUGHS] I have
this shtick where
83:46 - I keep making myself
smaller in the video.
83:49 - Nobody should watch that one.
83:51 - That should be deleted
from the internet.
83:55 - So let's see.
83:57 - So a couple of thoughts here
that I want to just begin with.
84:00 - So one is-- oh, so
before I go on, though,
84:05 - everybody stick with us.
84:06 - If you have somewhere
to go, don't worry.
84:07 - This will all be archived.
84:08 - You can come back
and watch it later.
84:10 - After the stream
is over, I'll make
84:12 - sure to update the video
description with all
84:14 - of the links of Python code
that have all been demonstrated
84:19 - as well as any other
extra material.
84:22 - And then we'll also make sure
we share on social media.
84:25 - Speaking of which,
just so we get this now
84:27 - for anyone who's here, if you
look at the video description
84:30 - currently, you will find
Christian's Twitter, Instagram.
84:35 - Probably what I would
really like to highlight
84:37 - is Twitch channel, where,
if I'm not mistaken,
84:39 - you do a bunch of
different things,
84:41 - but sometimes pop-up
lectures on various topics
84:44 - related to science and robots.
84:47 - Yeah.
84:47 - Actually, I should
plug those things.
84:49 - So I do occasional
Twitch streams,
84:52 - which I'm still figuring out
how to save videos on Twitch.
84:55 - But I'm doing it.
84:56 - I'll sometimes just
run to the whiteboard,
84:58 - and I will put a
concept up there.
85:01 - And we might throw
together some code
85:02 - or just turn it into a
lecture or just a Q&A session
85:06 - about a number of topics.
85:07 - So feel free to
follow me on there.
85:10 - And I look forward to hearing
your feedback on Twitter
85:14 - or any of these platforms.
85:17 - And I encourage you
to use all kinds
85:20 - of ways of adapting this code.
85:23 - I'm doing it on Deepnote because
we use it for other things.
85:26 - But copy that code.
85:27 - You can put it on
your own PyCharm
85:29 - on your own computer, whatever
will run it faster for you.
85:32 - That's all great.
85:33 - So I welcome all that.
85:34 - So I appreciate your patience
and listening to the lecture.
85:37 - No, this has been fantastic.
85:38 - And we're not saying goodbye.
85:40 - I just wanted to make sure--
because I know sometimes
85:42 - these streams, they go on for
quite a long period of time.
85:44 - And I try to wrap up at the end.
85:46 - But I wanted to make
sure that people
85:47 - who wanted to know more
about Dr. Hubicki's work
85:51 - and follow the labs research,
you can find all that.
85:54 - And again, after
the stream is over,
85:56 - we'll make sure to update the
description with all the stuff.
86:00 - And of course, you can join
the Coding Train Discord
86:03 - where we have
discussions and sharing
86:05 - about the various topics.
86:06 - So you can ask questions
and things there.
86:08 - So I'm going to
start to jump in.
86:11 - I don't know what
the ratio of people
86:13 - who came here from
Python and robotics
86:16 - control versus
people who came here
86:18 - from creative coding and p5.js.
86:21 - But just to set the stage
for a moment, what I am
86:25 - going to transition to doing--
86:27 - it's funny.
86:27 - I think that my output
is a little bit--
86:30 - it has the night shift
on for some reason,
86:32 - so the screen is a little bit--
86:33 - I've never seen this
before in this setup.
86:35 - But anyway, it's fine.
86:36 - You can see it.
86:38 - But I'm going to use a
library called p5.js.
86:42 - And p5.js is a
JavaScript library
86:45 - for what is referred
to as creative coding.
86:48 - It's a very broad term.
86:49 - But essentially, if you're
interested in art and design
86:52 - and animation and play
and experiments and games,
86:55 - it's a very
beginner-friendly environment
86:57 - for doing real-time
animations and graphics
86:59 - and more in the browser.
87:01 - I also think-- and I'm a
little bit torn about this,
87:05 - but I am going to start with
this physics library called
87:09 - matter.js.
87:10 - So I've been going
back and forth
87:12 - in my head all week about this.
87:14 - If you look at my--
87:16 - I'll just pull this
up here in case
87:18 - you're not familiar with it.
87:20 - But if you're new to the
world of physics simulation
87:23 - in JavaScript, you can take a
look at this particular book
87:29 - that I have online
all about vectors
87:33 - and forces and oscillation.
87:35 - And if I scroll
down in here, we're
87:37 - going to find all
about pendulums.
87:40 - And so this is a
whole book that is
87:43 - the foundation of a lot of the
coding examples and tutorials
87:46 - that I do.
87:47 - And for the most part, I
am always coding these--
87:51 - it's wrong to say from
scratch because I'm
87:55 - using P5 and all sorts of other
dependencies and libraries.
87:59 - But I'm not using
a physics engine.
88:00 - I am doing, though,
what Christian
88:02 - referred to as Euler
integration in the code.
88:04 - And in fact, I'm
just going to pull up
88:06 - this example really
quickly, which is about the
88:09 - seek behavior.
88:10 - If we look here--
88:12 - where is the update function?
88:14 - This is Euler integration.
88:16 - We take the acceleration,
and we add it to velocity.
88:19 - We take the velocity, and
we add it to position.
88:22 - And we're accumulating all
the forces in the apply force
88:24 - into the acceleration variable.
88:26 - So I would like to
investigate PID controllers
88:30 - as they are connected more to
the raw physics simulations
88:35 - in nature of code.
88:36 - But I think--
88:39 - I'm curious to see,
how does just applying
88:43 - this concept in a very
quick and dirty way
88:45 - to a basic example that
uses a physics engine--
88:47 - and to be clear, what the
physics engine is doing
88:49 - is I'm able to just
say, hey, there's
88:52 - a round thing over here.
88:54 - There's a square
thing over here.
88:55 - There's gravity.
88:56 - And I'm going to put this
force in this system.
88:58 - Go.
88:59 - So we'll see how
well this works.
89:02 - But can we set up a
little cart on a ground?
89:05 - Can we apply forces by
pushing it right or left
89:09 - and giving it a--
89:10 - calculate those forces
based on PID control?
89:13 - So that's my goal.
89:15 - I don't know.
89:15 - Do you have any
comments or questions
89:16 - about that, Christian, as
I'm setting this up here?
89:19 - No, this is great.
89:20 - I'm very excited to see
all the new ways to--
89:23 - and as you're
getting that set up,
89:26 - sometimes, some of
the bring-up process
89:29 - for when I'm trying
a new system is
89:31 - the time it takes for me
to code up the simulation.
89:33 - That's the first
step that we have
89:35 - to do when I want to try to code
a new robot in a simulation,
89:38 - is I need the simulator.
89:39 - And I think there's a lot
of room for interesting ways
89:44 - to generate physics simulations.
89:48 - Sometimes I'll go
straight to the equations.
89:50 - But jeez, it would be
good to do something
89:54 - where you pop in
stuff in the system,
89:56 - and they just bump
around and go from there.
89:59 - So that's exciting.
90:01 - Great, yeah.
90:03 - I'm really stuck
on the fact that--
90:05 - I'm going to have
to just let it go,
90:06 - but something is going
on with my screen.
90:09 - Look at the top right here.
90:10 - This is not the
correct back bar.
90:13 - Some weird glitch just happened,
and night shift turned on.
90:16 - It's like it thinks it's
the middle of the night,
90:18 - and I should be
sleeping, so it's reduced
90:20 - to blue light or something.
90:23 - But I think we'll be
able to keep going.
90:25 - If anybody knows
where that setting is
90:27 - and wants to pop it into the
chat, I might like to fix that.
90:29 - But OK.
90:30 - Well, you're a professional that
cares about that sort of thing.
90:32 - I was like, I didn't even
notice until you told me.
90:34 - Yeah, well-- yeah, I'm recording
everything to disk, also,
90:38 - from today.
90:39 - Because as the
viewers know, I often
90:41 - take content from live
streams and remix it
90:44 - into a shorter
edited video, which I
90:47 - was thinking about maybe doing.
90:49 - And so it'll bother me
forever that the recorded--
90:51 - you know what I can do?
90:53 - I'm going to let it go, though.
90:54 - It's going to be fine.
90:56 - Because I know where
to turn this off.
90:57 - But look, this-- if this is
the only time-- wait, wait.
91:02 - This disappeared.
91:04 - System-- yeah, see, my
System Preferences is frozen.
91:07 - I have the rainbow
of death here,
91:09 - spinning rainbow of death.
91:10 - So I'm just going to
force quit out of that,
91:12 - not worry about it.
91:13 - And you can change it in
the Control Center, I know.
91:16 - But look.
91:16 - The Control Center
button is missing.
91:18 - It's disappeared.
91:21 - Control Center.
91:24 - Yeah, Elgato.
91:25 - So I'm going to--
91:26 - if anybody has trouble
seeing what's on the screen,
91:28 - let me know.
91:29 - I think we're fine.
91:30 - All right.
91:30 - So I have put--
91:32 - the pinned comment in the chat--
and I should have done this
91:34 - for the TinyURL
link from earlier--
91:36 - is a link to this
particular P5 sketch.
91:39 - So again, I-- whoops.
91:43 - Whoa!
91:44 - Things are just
appearing out of nowhere.
91:47 - I wonder if I should
restart my computer.
91:50 - Look at that.
91:52 - That's interesting.
91:53 - I mean, if you want to
handle that, I can always--
91:55 - I'm engaging in the chat right
now if anyone wants to jump in.
91:59 - And if you want to
handle that business,
92:00 - I can talk about
this sort of thing.
92:04 - I'm going to restart.
92:05 - I'm going to ask you one of the
questions that came up which
92:10 - I was kind of curious about.
92:11 - Somebody asked whether
you could use PID to land
92:14 - a rocket like a SpaceX rocket.
92:16 - And I was actually curious.
92:17 - I don't know if--
92:18 - I've been following
the James Webb
92:19 - Telescope with all the images
that have been coming out.
92:22 - And I know there was so much
that went into the design
92:26 - and engineering and
production of the telescope
92:28 - and the fear of any
little slight angle
92:32 - of a mirror setting up.
92:33 - Do you know to what extent
does the work that you
92:36 - do in robotics research apply
to these kinds of mechanics
92:43 - that happen in space, I
guess, is what I'm asking.
92:45 - So yeah, I am interested--
so the short answer
92:49 - is reliability of controllers
in space is super important.
92:54 - And I need to be more up on what
is actually being used on some
92:59 - of these particular spacecraft.
93:01 - But something like landing a
rocket, you look at how that--
93:06 - if you watch a SpaceX
self-landing rocket,
93:10 - you can almost see
the PID in action.
93:14 - Now, under the hood, we
don't know exactly what's
93:17 - being used necessarily.
93:19 - But a lot of different
control techniques,
93:21 - even if they're
not explicitly PID,
93:23 - they end up acting like PID.
93:27 - If you need-- if we want
it to be slowed down,
93:29 - we'll start applying a force
in the opposite direction.
93:32 - Now we're seeing
in the chat there's
93:34 - something called MPC, which
is called Model Predictive
93:38 - Control.
93:39 - But what MPC is is it's
basically, more or less, acting
93:43 - like PID, except it's able
to reason about the fact
93:48 - that you might have limits
on how hard you can push.
93:52 - On our PID
controller, if you had
93:54 - a limit on how much
force you could push,
93:56 - it would try to ask for
things beyond that limit.
94:00 - And it might not
be able to deliver,
94:01 - and so it will do
the best it can.
94:03 - However, there are
methods that will
94:05 - understand that I am limited
in how much force I can do.
94:10 - And that's going to require
me to think ahead and push
94:13 - more later because I have to
push less now, for instance.
94:17 - So even if PID isn't used
directly in all these cases,
94:21 - the core principles of
it are often present.
94:24 - And I would not
be shocked at all
94:26 - if, in these space
settings, that they
94:34 - will be using PID to
orient different elements
94:39 - of the spacecraft.
94:41 - But one thing that they also
want to be careful about
94:45 - is if something fails
on the spacecraft,
94:50 - that it still works.
94:52 - So one thing that a
PID controller requires
94:56 - is that you have
sensing, that you
94:58 - can sense what your angle is.
95:00 - And I guess, what happens
if that sensor is gone?
95:06 - Is the whole spacecraft down?
95:08 - So a lot of the very bright
mechanical engineering things
95:12 - is that they'll try to
make this idiot proof,
95:15 - that even if the sensor
is gone, you just
95:17 - have to apply a torque, and then
it will go against a hard stop.
95:21 - That way, you don't
have to have a sensor.
95:23 - It just deploys.
95:29 - And that's not just PID control.
95:31 - This is any form of what we call
feedback control where you're
95:34 - getting feedback from sensors.
95:36 - You're getting information
from the sensors.
95:38 - Has that component
and inherently
95:40 - adds at least a little
bit of complexity.
95:42 - Yeah.
95:43 - That's great.
95:43 - Thank you.
95:44 - And look, thank you for
talking through that
95:48 - in that beautiful amount of
time of restarting the computer.
95:51 - The menu bar thing
looks correct,
95:55 - and I no longer have that slight
tinge to the hue of the screen.
95:58 - So we're back and ready to go.
96:00 - So I also just wanted to--
96:02 - I'm going to jump back
into that matter.js sketch.
96:04 - But I just wanted to
show here that this
96:07 - is the seek example
I was referring to,
96:10 - which is this simulation
of this steering vehicle
96:13 - that is attempting to seek this
target, which is a red dot.
96:16 - And little did I know,
really, all along,
96:19 - that ultimately, this seek
function is essentially--
96:26 - which is what I've covered in
great detail in many videos--
96:29 - is this is the error.
96:32 - I am looking to find the
difference between the target's
96:36 - position and my
position and creating
96:41 - a force out of
that, scaling that
96:45 - force according to this
max force variable, which
96:47 - is much like the gain
in the PIP controller,
96:50 - and then applying that force.
96:51 - So we're going to do
something similar,
96:53 - but I'm going to switch over
to using matter.js and looking
96:56 - at the cart pole scenario.
96:58 - So let me stop this.
96:59 - So if anyone is interested
in that, hit me up after.
97:03 - I'm sure we'll get through some
nice online searches you can
97:05 - find, the Nature of Code book
and the Nature of Code videos
97:08 - and all of that.
97:09 - But if you're interested
in going down that road
97:11 - and you can't find it, let
me know in the comments
97:14 - or in the chat, and I'll be
able to answer that later.
97:16 - OK.
97:17 - So let's take a look.
97:19 - I put a little sketch
together at first
97:21 - just so we didn't have to--
97:23 - in a lot of my video
tutorials, I always
97:24 - like to try to show the entire
process of coding something.
97:27 - But I wanted to at
least have a foundation
97:30 - to start with to try to save
a little bit of time here.
97:33 - Let me show you probably
the most important piece
97:36 - of this, which is that--
97:38 - and I'm actually not
using all of these,
97:39 - so I'm going to take these
out now just to simplify.
97:43 - Whoops.
97:44 - Maybe I was using one of
those, and I didn't realize it.
97:48 - But I'll just leave
that in there right now,
97:50 - and I'll figure it out.
97:51 - But the important part that
I wanted to show you is I'm
97:53 - importing both the P5
library here as well as
97:57 - the matter.js library there
through the CDNs, or Content
98:01 - Delivery Networks, where
the JavaScript libraries
98:03 - are hosted online.
98:06 - So this merits a
longer discussion
98:08 - in terms of how you build all
the components of a web page.
98:12 - But the P5 Web Editor,
for the most part,
98:14 - will really help you along.
98:15 - The only thing you need to
add if you were starting
98:17 - from scratch with
the P5 Web Editor
98:19 - is this link to the
matter.js library.
98:22 - And hopefully folks in the
chat can help answer questions
98:24 - about that if you're
struggling with that.
98:26 - Oh, I need Matter Helper.
98:27 - That's right.
98:28 - I just can take these out.
98:29 - So was simplifying
this sketch, and I
98:33 - left a couple of things in here
that I'm going to take out now
98:36 - from a previous example.
98:38 - So one thing I'll also
note is that there's
98:42 - this JavaScript file called
Matter Helper that I made.
98:45 - It's a little bit silly.
98:46 - But anytime I want to refer to
something in the matter physics
98:50 - world, I have to access it
via the matter namespace,
98:54 - like matter.engine,
matter.render, matter.world.
98:57 - And so I made all these
little aliases to each one
99:00 - with just the single
word "engine" or "vector"
99:02 - or "constraint" or "body."
99:04 - And I'll talk through
what each of these
99:06 - are as we start to build
the code example itself.
99:09 - But this just allows
me, in the code
99:11 - as I go back to
here, to say things
99:13 - like create an engine as
opposed to matter.engine.create.
99:18 - Least important detail of today,
but a little helpful thing.
99:21 - OK.
99:22 - So let's look at
what's happening.
99:24 - So this is the setup function.
99:26 - And I actually made the
font a little bit smaller
99:28 - than I usually do because some
of this code is kind of long.
99:31 - Let me see if I can up it
just a couple of points.
99:34 - So let me know if anybody has
any trouble reading the font.
99:38 - So the only variables I'm
starting with right now
99:41 - is I have an engine.
99:42 - That's the physics
engine that's going
99:44 - to handle that Euler
integration, all
99:46 - of the figuring out
where the bodies move
99:49 - and how they move for us.
99:50 - I need to also
store in a variable
99:53 - the world associated
with that engine.
99:55 - The world is basically
like a variable
99:57 - holding on to a big
list of everything
99:59 - that exists in the world
that we've created.
100:02 - So you could have
multiple worlds
100:03 - and do all sorts of
interesting things,
100:04 - but we just have one world.
100:06 - And then anytime I want to
make something in the world,
100:09 - I need to create it as a shape.
100:12 - It has to have some geometry.
100:13 - I don't know what these weird
underlines are showing up
100:15 - now too.
100:15 - There we go.
100:16 - But I'm going to ignore that,
all the weird extra things that
100:19 - are happening today.
100:20 - So I want to make,
for the ground--
100:21 - you can see I'm drawing
it there-- this rectangle.
100:24 - And this will be
very familiar to any
100:27 - of you who use P6 regularly.
100:28 - But for Christian
watching or anybody
100:31 - else who comes maybe a world
of more true mathematics,
100:35 - this canvas that you're
seeing on the right here,
100:38 - it is a Cartesian plane,
but it's a very odd one.
100:41 - First of all, it's very
typical of computer graphics
100:43 - but odd in the
mathematical sense.
100:45 - 00 is up here in the top
left, not in the middle,
100:49 - and the y-axis is pointing
down in the positive direction.
100:52 - So that's quite standard
for computer graphics
100:55 - but odd if I were doing like
a lesson about a pendulum.
100:59 - We would draw a Cartesian plane
and point y and up and have 00
101:02 - in the middle.
101:03 - So that's where this
rectangle is positioned at.
101:06 - 200 is the x.
101:08 - 295 is the y, very
arbitrary number.
101:11 - It's about there because
I wanted the ground
101:14 - to be the full width of
the window, the canvas,
101:17 - and have a height of 10.
101:19 - I gave it a little friction.
101:20 - Restitution is a variable that
refers to the bounciness of it,
101:25 - the elasticity of
it, if you will.
101:28 - And then I'm saying it's static.
101:30 - It's something-- it's like
an object of infinite mass
101:33 - that can never be moved.
101:34 - So that's the ground,
and that's where
101:36 - we're going to put the cart.
101:38 - I also just added a couple of
variables to this ground body
101:42 - so I could store--
101:43 - there might be a way to
access them through Matter.
101:45 - If anybody knows, feel free
to let me know in the chat.
101:48 - But I just put the width
of it in a variable
101:50 - called W and the height in 10.
101:52 - Because what I'm doing
here in the draw loop--
101:55 - the draw is that
same animation loop
101:57 - that Christian had in the
Python code, that for loop.
102:00 - But here with P5, because
we have an animation program
102:04 - that's showing us every frame--
102:06 - draw shows us each
and every frame.
102:08 - So every frame, we want to
update the physics engine
102:10 - and draw the ground at its
x position, its y position,
102:14 - with its width and height.
102:15 - So let's look at just
adding a cart to the system.
102:21 - And Christian, you
should absolutely
102:22 - stop me if you have a
question or if you notice
102:24 - a question from the chat.
102:25 - I'm not keeping as
close an eye on it.
102:27 - So let's add a cart.
102:29 - And I'm going to
do the same thing--
102:30 - cart equals bodies.rectangle.
102:36 - Let's put it in the middle.
102:39 - So I'm going to do a little
mental arithmetic, which is--
102:42 - I don't know if you've
ever experienced
102:44 - this-- it's really hard
to do when you're suddenly
102:47 - live broadcasting.
102:48 - You're sitting at home,
drinking your tea.
102:51 - 295 plus 5 equals 300.
102:53 - That's, like-- you could tie
all my hands behind my back
102:57 - and tape over my eyes.
102:59 - I don't know.
102:59 - I could do that.
103:00 - But all of a sudden,
here I'm drawing
103:01 - a little bit of a blank.
103:02 - But let's put it at 290, so
5 pixels up from the ground.
103:08 - And then we'll give
it a width of about 20
103:11 - and a height of about 10.
103:13 - And then I need to also set
all of these parameters.
103:18 - So I A going to--
103:21 - I've got a little
syntax error here,
103:23 - which I'm missing a comma.
103:25 - I am going to-- maybe we'll turn
the friction off at some point,
103:28 - but we'll leave it for now.
103:30 - Base friction, base
restitution, angle of 0.
103:33 - This is very important,
though-- false isStatic.
103:36 - Because this is not
a static object.
103:38 - We want this to move.
103:40 - And in fact, maybe just for
the sake of argument right now,
103:43 - let's give it a y value of 250.
103:46 - Because if everything is
working, it should fall.
103:48 - Now, two things.
103:50 - We don't see it on screen.
103:52 - There's two things I'm missing.
103:53 - You can think about,
what am I missing?
103:56 - The first thing is
I can make a body,
103:59 - but it's not actually
part of the physics
104:01 - unless I add it to the world.
104:03 - So let's do world add
and add this cart.
104:06 - Oops.
104:06 - No, no.
104:07 - I add to the world the cart.
104:10 - But we also don't
see it because--
104:12 - and matter.js, I believe,
has some functions
104:15 - that will draw things
automatically to you.
104:17 - But again, the ethos
of the Coding Train
104:19 - is I'm demonstrating
algorithms and behaviors,
104:22 - and you, the artists of
the world and programmers,
104:25 - will put your own
creative twist on this.
104:28 - So I think it's good
practice for me to always
104:30 - be additionally drawing
the elements myself.
104:32 - So let's draw it with a nice--
104:36 - we'll use the
Coding Train colors.
104:39 - So I have this little website
which has a bunch of colors.
104:43 - Maybe I could-- let's
pick this nice blue.
104:46 - And we'll set that--
104:48 - we'll set that to be a fill.
104:50 - And by the way, I totally
forgot to duplicate the sketch.
104:53 - So if you go to that link at
any point-- apologies for this--
104:56 - it's actually going to be
where I am with the code now.
105:00 - Why don't I duplicate it now?
105:02 - That way, this is
the new base code
105:04 - if somebody wanted to
actually start along.
105:06 - So I'm going to do--
105:08 - I'll just call this--
105:08 - I'll rename all
these to something
105:11 - that makes more sense later and
link them in the description.
105:14 - So let's add a
fill of that color.
105:18 - Let's put a rectangle at--
105:21 - now, what is this?
105:22 - The cart position-- this
is very long-winded.
105:27 - One of the reasons why I
don't-- if you've been paying--
105:30 - if you're a person who's seen
every Coding Train video ever,
105:34 - you would know that
I usually often take
105:37 - these matter.js
objects and wrap them
105:40 - inside my own class,
my own objects,
105:42 - to be able to have more control
and authorship over them
105:45 - and keep the code a
little bit more concise.
105:48 - But I think for
today's demonstration,
105:49 - it's simpler just
to use it directly.
105:51 - So we're going to
draw it at the y.
105:53 - And this is my little
weird hack where
105:56 - I'm going to give
it a width of 20
105:59 - and a height-- this is bad
practice in that I have
106:02 - these redundant variables,
and if I update one and forget
106:05 - to update the other one, it's
going to cause problems later.
106:07 - But we'll refactor this later.
106:09 - Maybe I'll look into how
Matter works, a better way to--
106:12 - I know it gives you the
vertices of the geometry,
106:14 - so I could pull
that dynamically.
106:16 - But now we can just
say cart.w, cart.h.
106:19 - And let's run this.
106:21 - And we can see.
106:22 - There we go.
106:22 - So we can see the world.
106:24 - Things are working.
106:25 - Because as soon as I run the
sketch, the cart is falling.
106:29 - And we could always
have it fall.
106:30 - But let's position
it-- and it's so small.
106:35 - Let's make things a
little bit bigger,
106:38 - and we'll see what I mean.
106:40 - I have to now change everything
everywhere in its position
106:45 - so that it's--
106:46 - actually, falling,
it will actually
106:47 - settle in the right place.
106:49 - Let's put it at--
106:50 - I now have lost track.
106:52 - The ground is, like, 10
pixels from the bottom.
106:55 - This is 20 pixels high.
106:57 - So I think the bottom
is at height -20, which
107:00 - would be, like, 290.
107:01 - That should give us a good plot.
107:02 - All right.
107:03 - Anyway, it's going to adjust
itself because Matter is smart,
107:05 - being like, no, no, these
two things can't physically
107:08 - be in the same space.
107:09 - Let's push them apart.
107:10 - OK.
107:11 - Cart.h-- did I forget
that somewhere, somebody
107:14 - is saying in the chat?
107:15 - No, it looks like I'm good.
107:16 - OK.
107:17 - So great.
107:18 - So we've got cart pull--
107:20 - I mean, no, not pull.
107:21 - We have cart.
107:22 - Cart.
107:23 - We just have cart.
107:24 - We're maybe going
to get to cartpole.
107:25 - We'll see.
107:26 - By the way, the planned
amount of time for the stream
107:28 - was till 1:00 PM, which is
about 15 minutes from now.
107:30 - Do you have a time that
you have to go by just so I
107:33 - could keep that in my head?
107:34 - That's fine.
107:36 - I always--
107:36 - As long as-- I'll grab a drink
of water if that's all right.
107:38 - Yeah.
107:39 - So you could go have a little
break to yourself at any point.
107:42 - I can actually also remove you.
107:45 - But if--
107:47 - Just bring me back in a minute.
107:49 - As long as you're
OK me jumping in
107:50 - and talking about the
controller, that's cool.
107:52 - I'll just grab my water bottle.
107:56 - OK.
107:56 - You are off.
107:57 - Christian, you might
be able to hear me,
107:59 - but your audio and video
is no longer on the screen.
108:01 - OK.
108:07 - So Johnny is making a good
comment, which is, maybe
108:10 - we should start the rapping
into classes sooner rather
108:13 - than later.
108:15 - I would agree with that, really.
108:17 - I think that's a
very good point.
108:19 - I think I'm just
going to hold off.
108:20 - Because ultimately, I think
I might come back and record,
108:23 - do this again as more of
a coding challenge video.
108:26 - And I might think more about--
might do it without Matter.
108:28 - But let's keep going here.
108:30 - So I'm going to now add a force.
108:33 - So we're going to
create a variable.
108:35 - I'm going to call it force.
108:38 - I think the proper way
to do this-- let me just
108:40 - show you how I figure
out how to do this stuff.
108:42 - If I go into the
documentation here--
108:44 - and let's make this
a little bit bigger--
108:46 - and I go under Vector--
108:49 - and I think, Christian,
hopefully I can still hear you.
108:51 - So when you're back,
just talk into my ear,
108:54 - or I'll just check in a bit.
108:57 - So basically, I want to
create the force as a vector.
109:02 - So I can use
matter.vector.create,
109:04 - or in my case,
just vector.create.
109:08 - And let's go back to
here, vector.create.
109:12 - And let's make a force.
109:13 - Now, again, what are the
units of measurement?
109:17 - The units of
measurement are pixels.
109:19 - And we're going to have
to just make our best
109:21 - guesses as to what makes sense.
109:24 - I've talked about this
before when using--
109:27 - and I'm going to bring
Christian back here.
109:29 - Let me just press this button.
109:31 - Great.
109:31 - I've talked about the
physics engine box
109:33 - 2D, which was
famously used for--
109:38 - it's probably still used, but at
least for early casual physics
109:40 - games like Angry Birds.
109:42 - And that is a physics engine
where the units of measurement
109:45 - are real world.
109:46 - They're meters.
109:47 - They're seconds.
109:47 - And then you have to do all the
conversion before you draw them
109:50 - into pixels.
109:51 - I actually like an
engine like Matter
109:53 - because of the simplicity
that I can just--
109:55 - my unit measurement is pixels.
109:56 - So again, we have some
issues in terms of simulating
110:00 - true physical reality.
110:02 - But again, this is
only a 2D world,
110:04 - so that's not even
a real thing anyway,
110:06 - although I'm getting off track.
110:09 - So let's make a
vector that just--
110:13 - 1, 0.
110:14 - And actually, what
I'm going to do is--
110:16 - let's see if we
can control these--
110:19 - control the cart just to get
started through key presses.
110:22 - So I'm going to add
a key press function.
110:24 - I'm going to check if the
key code is right arrow.
110:29 - And these are all
built-in variables to P5
110:31 - that let me build in
interactivity really quickly.
110:34 - I could put buttons on the
screen and do other things.
110:36 - I'm going to create this force,
and then I'm going to say--
110:41 - and now I don't
remember how to do this.
110:43 - So I think it's under Body.
110:48 - Let's take a look.
110:49 - I think there's a
Body.applyForce function.
110:54 - Yeah.
110:55 - So I need to apply the
force to a particular--
110:58 - so the force is the
factor I'm applying.
111:00 - That will eventually
be the force we
111:01 - calculate through PID or just--
111:04 - PD.
111:05 - I don't know.
111:05 - I don't know that we're
going to get to the I
111:07 - here in the JavaScript version.
111:09 - The position is interesting
because while, in a lot
111:12 - of my examples, I just consider
all objects a single point
111:18 - mass, so it's like
there's no geometry,
111:20 - we can actually apply a force
to the top-left edge of the cart
111:24 - or the bottom-right edge.
111:25 - But I'm just going to apply
the force to the center
111:27 - of the body and then the body.
111:28 - So I can go now into the
code, and I can say-- whoops.
111:34 - Every time I say whoops
now, I have this--
111:36 - I can't help but stop for
a moment and then imagine--
111:40 - I don't know.
111:41 - You probably haven't
seen these, Christian,
111:43 - but I have these super
cuts of me saying whoops
111:45 - over and over again with
all these different videos.
111:48 - I make a lot of mistakes, and
I say whoops all the time.
111:50 - Where am I?
111:51 - I pray no one does
that for me, because it
111:53 - would be too long of a video.
111:57 - OK.
111:57 - So force, then we're going
to say a Body.applyForce.
112:02 - We're going to apply
it to the cart.
112:04 - We're going to apply it just
to the cart's position, so
112:07 - the center of the cart.
112:08 - And I'm going to
apply this force.
112:11 - So I'm assuming,
if all goes well--
112:15 - and also just note, I
have this auto refresh on,
112:18 - which is a little bit
risky because if you're
112:22 - writing a for loop and
you have auto refresh on,
112:24 - and you don't get the
exit condition in there,
112:26 - sometimes your code
is going to restart
112:28 - and then get stuck
in an infinite loop.
112:29 - But it allows the sketch
to continually update
112:32 - as I'm editing the
code, which has
112:34 - a lot of convenience for it.
112:35 - So let's see what happens.
112:37 - Whoa!
112:38 - That was kind of a big force.
112:40 - So we know that the values we
want should be much smaller.
112:44 - So let's try a smaller number.
112:48 - There we go.
112:49 - We can see I'm kind of
pushing it along here.
112:51 - Now it's kind of
jumping up into the air.
112:54 - I'm not going to worry
about that too much.
112:56 - There probably is a way that--
112:58 - there are constraints-- I'm
going to use a constraint if we
113:01 - get to the pendulum.
113:02 - But there are all sorts of ways
that I could think about it
113:05 - more as, like, it's got wheels.
113:06 - It's locked to a track.
113:07 - What's the friction?
113:08 - What's the gravity?
113:09 - But I'm going to
let this be very raw
113:11 - and just whatever
Matter does by default.
113:14 - Now that we see this
is working, let's
113:15 - make the force a bit stronger.
113:17 - And let's also just add in
a force for the left arrow.
113:22 - Obviously, there's a
lot more sophisticated
113:24 - ways we could do this, but just
hardcoding in a negative force.
113:27 - Oh, look at that.
113:29 - Look at them.
113:29 - It's like a flying cart.
113:32 - We've got SpaceX
going on here, just
113:34 - with a little horizontal force.
113:36 - I wonder what the
liftoff is from.
113:39 - It's interesting that
that is occurring.
113:42 - So I'm going to stop
worrying about tuning this
113:44 - because we're not
really there yet.
113:46 - So the idea now is that
what I want is to have--
113:52 - if I'm recreating-- and stop
me if I've got this wrong.
113:57 - What I want to do is
say I want to have
114:02 - a controller move the cart
to a desired x location.
114:07 - So let's say my desired x--
114:12 - and I'm just going to call it
desired for short because I'm
114:15 - not going to use
a y in this case--
114:18 - is 250.
114:22 - So now, the next
thing we need to do
114:25 - is calculate the
error, which would
114:27 - be the desired minus the
cart's actual position.
114:34 - Am I getting this right so far?
114:35 - You're perfect so far.
114:37 - DA.
114:37 - D minus A.
114:38 - Now we need a gain.
114:39 - Now we need a gain, right?
114:41 - So let's just try a gain.
114:43 - Let's just start
with a value of 1
114:46 - because I have no idea
what it should be.
114:48 - And then the idea
here is that I'm
114:50 - going to create this force
now not with keyboard control
114:54 - but with my p controller.
114:58 - So this is the p controller.
114:59 - I have the desired position in
one dimension, which it could
115:04 - be a vector, I assume, correct?
115:06 - A two-dimensional
vector, that is.
115:07 - A three-dimensional vector--
115:09 - I look forward to seeing all
the posts of people doing this
115:11 - in Unity or Three.js, hopefully,
that you'll share back with me.
115:15 - I have the gain, and then the
force is just going to be--
115:20 - and I'm going to make a variable
called FX, which I'll say
115:25 - is the gain times the error.
115:28 - And then I'll create
an actual vector.
115:31 - Again, I'm oversimplifying
here to just eliminate
115:34 - having to deal with any
vector math or the y.
115:36 - But how's this looking so far?
115:40 - Looking great so far.
115:41 - You got me at the perfect time.
115:43 - Let me drink my water.
115:44 - Sorry.
115:46 - It's perfect.
115:46 - This is-- yeah.
115:47 - And now I'm going
to apply that force.
115:50 - So the first thing
I like to do is I
115:53 - often just turn the engine off.
115:55 - So I see why it's
jumping up in the air.
115:59 - These are the-- see, my little
bit of arithmetic was off.
116:04 - So let's move this up.
116:07 - I just want it to start
more at the-- there
116:10 - we go-- at the proper
spot on top of the ground.
116:14 - So now the engine is off, so
no physics are being applied.
116:18 - And as soon as I turn the engine
on by uncommenting this line,
116:24 - it's gone.
116:24 - So this gain is
clearly much too high.
116:28 - Let's give it a lower gain.
116:30 - And we can see we've got this
unstable oscillating behavior.
116:33 - That's what you
would expect, right?
116:35 - Yeah, yeah.
116:36 - So the gain is currently .01?
116:39 - Oh, there we go.
116:39 - Yeah.
116:40 - It's probably because--
116:42 - I imagine pixels is
a very tiny unit.
116:44 - Yes.
116:44 - And so as a result,
it's not meters.
116:47 - There was probably a ton
of pixels on that thing,
116:51 - so that makes sense.
116:52 - So people have to consider what
the units are of their gains.
116:56 - It's like force per unit
distance for the p gain.
117:00 - And distance is in pixels.
117:02 - And I'm guessing when
we get to velocity,
117:04 - it's going to be
pixels per second
117:06 - is what we're going to get.
117:07 - So that's perfect.
117:09 - I'm kind of fascinated by this
levitating behavior we've got.
117:12 - Again, even though I'm choosing
to ignore the y value in terms
117:16 - of-- this world,
this physics world
117:18 - is not a one-dimensional
physics world.
117:20 - And again, if I
were doing this more
117:22 - with my own custom-baked
physics engine,
117:24 - I would have more control
over simplifying it.
117:27 - But I'm curious to see
where we get with Matter.
117:30 - So I think we'll just have
fun with this extra y that's
117:32 - happening right now.
117:33 - I probably could
increase the gravity.
117:37 - Like, Matter-- let's just look.
117:39 - I'm just curious, if we
want it, just so we have it.
117:41 - Matter.js world gravity.
117:45 - So I assume there is--
117:47 - oh, world.gravity has been
moved to engine.gravity.
117:50 - So engine.gravity-- is that
something that I can just set
117:55 - directly, or do I need to
call a function that's like--
117:59 - oh, there's a scale factor.
118:01 - So it's probably internally
got this sort of scaling
118:05 - that it does between what would
be real-world measurements
118:07 - and pixels in some way, although
this is the scale for just
118:11 - the gravity, so I'm not sure.
118:14 - I'd have to do a deeper
dive into the ins and outs
118:16 - of this physics engine.
118:17 - Is there a set gravity?
118:20 - So let's just try--
118:21 - I'm just curious.
118:22 - Let's just try hardcoding it.
118:24 - Let's go to engine.gravity.y
equals, like, negative 10.
118:32 - What just happened?
118:33 - Yeah, see?
118:33 - OK.
118:34 - So I made a gravity in
the inverse direction.
118:38 - Here's the gravity
pointing down.
118:40 - So with stronger
gravity, whatever sort
118:44 - of weird anomaly that caused
it to lift up into the air
118:49 - is not really happening as much.
118:50 - But I'm going to let it
stick with the default.
118:52 - But if we need to play
with that later, we can.
118:55 - OK.
118:56 - Levitating.
118:57 - Actually, maybe let's keep the
gravity a little bit stronger.
119:00 - It looks a little
bit more realistic.
119:02 - And actually--
119:03 - And we'll really know when we
look at the pendulum as well.
119:05 - If we get the pendulum,
that'll be pretty clear.
119:08 - Right.
119:08 - The pendulum is going to have to
deal with the gravity that way.
119:11 - The other thing is, I think I
should turn the friction to 0.
119:13 - Because right now, the
friction is probably
119:16 - playing a fairly
large role in how
119:19 - it's able to slow down and
stop at the proper location.
119:22 - You can see now--
119:23 - and in fact, the
restitution, that
119:26 - might be how it's
levitating into the air.
119:28 - Because I have each
of these as slightly--
119:32 - and I don't know
if they're not--
119:36 - there's a little bit of bounce
between them, elasticity there.
119:39 - So I think actually,
by setting the friction
119:41 - to 0, the restitution to
0, we have a much more
119:43 - idealized scenario here.
119:44 - Oh.
119:45 - I'm liking this.
119:46 - OK.
119:47 - So am I right in that if--
119:50 - let's turn the
gain up a tiny bit.
119:54 - And actually, because we're
in an interactive place,
119:58 - let's just go for it right
now and immediately attach
120:01 - a slider to the gain so that we
can demonstrate-- we're already
120:05 - leaps and bounds ahead
not in terms of the math
120:08 - and accuracy of the
simulation and the ability
120:12 - to code the simulation
in the Python version,
120:14 - but we're leaps ahead
in terms of being
120:16 - able to run it in real time.
120:18 - So let's-- even just by changing
a variable and having it run.
120:21 - But let's create a
gain-- and I guess
120:23 - I'll call this pGainSlider
in case we end up
120:27 - making a bunch of these.
120:28 - So I'm going to
make a pGainSlider.
120:32 - And again, P5 has
all these nice hooks
120:34 - to doing this very default
interaction, GUI interactions.
120:39 - Any of you who are
CSS wizards and have
120:41 - done a lot of web
development, you
120:43 - might have ideas about a much
more thoughtfully designed
120:46 - interface, and I
would welcome those.
120:48 - But for right now, I
can just make a slider.
120:50 - I need to give it three
different values--
120:53 - the starting value, which let's
make the gain 0 just to start,
120:58 - and the minimum and the maximum.
121:00 - And then actually, I do
also need a fourth value
121:03 - because the default
step is a unit of 1.
121:07 - So if I want to be able to
slide between 0 and 0.1,
121:10 - I need a smaller
unit of measurement.
121:12 - So let's do 0.01.
121:14 - And this should
allow me to now--
121:18 - come on.
121:19 - If I could if I could figure
out how to use a mouse.
121:22 - You know what?
121:23 - I must have made
some weird mistake
121:25 - in the order of
these parameters.
121:28 - Create slider P5.
121:30 - Let's look.
121:33 - Minimum, maximum-- minimum,
maximum, then the value,
121:36 - then the step.
121:37 - Got it.
121:38 - So I did make a mistake.
121:39 - Minimum, maximum, start
at 0, then the step.
121:45 - Now I can use the slider.
121:46 - And all we need to do is have
this be pGainSlider.value.
121:56 - So when we start,
there's no gain.
121:59 - I can ramp up the gain.
122:01 - It's way too high.
122:05 - I think that's too high
of a maximum value.
122:09 - Let's try this.
122:12 - I don't usually work with
such small numbers in sliders.
122:16 - Yeah, there we go, so we
can see, it's way too big.
122:20 - I need a Reset button
to put it back.
122:21 - I was just going to say.
122:22 - I was just going to
say, a Reset button
122:24 - would really help you
here, especially when
122:25 - we get to the cartpole.
122:27 - Great, let's add that in.
122:29 - Let's add a--
actually, I don't need
122:33 - to have a global variable for
it because we'll just do it
122:36 - this way-- create button,
reset, mouse pressed.
122:42 - So what I'm doing is-- and
it's going to add a button.
122:45 - Oops, what did I--
122:47 - oh, mouse pressed function.
122:50 - I've forgotten how
to use JavaScript.
122:57 - So you can see now,
quickly, and I'll
122:59 - zoom in here just to
make it a little bigger,
123:01 - there's a Reset button.
123:02 - Any time I click this button,
whatever code is inside
123:06 - this anonymous function that's
inside the mouse press event
123:09 - will execute.
123:10 - So I suppose this is a little
bit of a weird way of doing it,
123:17 - but let's actually just--
123:19 - let's write, actually, a
function called resetCart.
123:24 - I'm actually just
going to-- we'll
123:26 - put it in a separate function,
and then I'll call resetCart
123:31 - just by making a new cart.
123:33 - I could probably go in
and set the velocity to 0
123:35 - and set its position back,
but I think it would be easier
123:37 - to recreate the cart.
123:38 - I can always just
rerun the sketch,
123:40 - but it's nice to
have a Reset button.
123:41 - And then I can just
say right here--
123:43 - whoops, reset cart whenever
I also press that button.
123:49 - So if I make this
big, resetCart--
123:52 - oh, interesting.
123:54 - Now, why-- what did I do that
caused it to no longer apply?
124:04 - At the moment, I'm stumped here.
124:07 - I recreate the-- oh,
you know what it is?
124:11 - Adding the-- oh, so
this is actually--
124:14 - I've done a terrible thing.
124:16 - I can't do this.
124:17 - This is how I usually
do things, but I
124:20 - would have to remove the cart.
124:23 - Let's see, maybe it's
as easy as doing this.
124:26 - Remove the old cart.
124:29 - Make a new cart.
124:31 - Let's see, we'll
have to look into--
124:35 - we'll have to look
into the world object.
124:38 - I don't want to get too off here
on a tangent, but here, add.
124:43 - World has an add.
124:48 - Oh, usage should be migrated
to the Matter.Composite.
124:50 - That's fine.
124:53 - So is there a remove?
124:57 - Composite.remove-- interesting.
125:01 - Let's do it a different way.
125:02 - I'm going to investigate.
125:03 - I'm looking at the chat.
125:07 - Reset-- let's just see,
resetCart, mouse pressed,
125:10 - resetCart.
125:12 - Let's just see--
matter.composite.
125:19 - Oh, IF, IF the cart exists.
125:23 - You'll have to bear
with me for a second
125:24 - as I try to sort this out.
125:27 - And then let's see--
125:30 - I guess it's changed to
matter.composite.add,
125:34 - so let's see.
125:36 - And then reset-- yeah.
125:39 - And I might as well also reset
the slider, pGainSlider.value.
125:47 - I'll reset the slider to 0.
125:49 - So anyway, that was a lot of--
125:51 - oh, and I need to
make sure this happens
125:55 - after I've made the slider.
125:57 - So that was a lot of extra--
125:59 - the one thing about adding
interactivity is we easily--
126:02 - so easy to lose our way
from the actual simulation
126:06 - that we're trying to
focus on because there's
126:07 - so many little extra edge
cases and things that come up
126:10 - with the interactivity.
126:11 - But that's what we're here
for, so we'll go with it.
126:13 - So I'm going to add
a little bit of gain.
126:15 - If I hit Reset, it sets
everything back to 0,
126:18 - and I think maybe, we'll leave
the maximum gain a little bit
126:23 - lower, so we can see.
126:25 - All right, great.
126:29 - All right, so we now have a
PCONTROLLER moving the cart
126:34 - to a desired location.
126:37 - Now, I want to add the D.
So here's the question.
126:45 - Here's one question-- the force.
126:48 - So this is where--
126:50 - I guess, I'm still,
if I'm following
126:53 - the earlier Python code, what
I'm doing is I'm adding the--
127:00 - let's just hit Stop here
so I don't get errors.
127:02 - This is the D. This is a
comment here, not a real thing.
127:08 - DCONTROL, I'm going
to add that here.
127:11 - So I can leave it as one force,
and then apply that same force
127:16 - the same way.
127:17 - It's just a matter
of adding that.
127:19 - And so in order
to do that, I need
127:21 - to look at the cart's velocity.
127:23 - Is that correct?
127:25 - That's right.
127:26 - So let's look at--
127:30 - so first thing first, I
haven't used matter.js,
127:34 - other than a few
tests yesterday,
127:37 - in probably a couple of years.
127:39 - And I didn't go-- this is
as far as I got, basically,
127:41 - in the tests, so we'll
see how this goes now
127:45 - and how far we get.
127:46 - So I need to get, I'm
just going to call
127:49 - it v, the cart's velocity.
127:54 - Let's console.log that
and see if that shows up.
128:01 - Great, so we can
see here that I'm
128:03 - getting the cart's velocity.
128:04 - Now, there is this tiny,
infinitesimal y velocity,
128:10 - which I will choose to ignore.
128:11 - I just want the x component
of that cart's velocity,
128:16 - and this actually often
occurs in JavaScript.
128:18 - One of the pitfalls
of JavaScript
128:20 - is the way that it rounds
floating point numbers is
128:24 - a really odd behavior.
128:25 - So you can add 3.0 plus 3.1--
128:30 - 3.0 plus 0.1 and get the
number 3.1000000006793214.
128:37 - All sorts of weird stuff
can happen in JavaScript
128:39 - because we're not--
128:41 - this code is not going to help
us land the SpaceX rocket.
128:44 - It's just for us to
simulate in the browser
128:46 - to get the idea of
it going, so we can
128:48 - live with those kind of errors.
128:52 - So now, I need a--
128:57 - you're going to have to talk me
through this a little bit here,
128:59 - Christian.
129:00 - I know that I need a--
129:02 - we'll call this the PGAIN.
129:04 - Now, I need a DGAIN?
129:08 - That's right.
129:10 - Which you had said
something like 10%
129:12 - of what your gain usually is?
129:14 - Is that right?
129:15 - Yeah, I go for 20% generally,
so I'll go 50% for you.
129:19 - Yes, so--
129:20 - Sorry, sorry, oh-- oh,
that's a gain, yeah, 50.
129:23 - So 2.
129:24 - 0.2.
129:24 - I will make this its
own value, but just
129:27 - to have something in
there, let's start with it
129:29 - as half whatever the PGAIN is.
129:35 - And then the-- and
now I'm blanking here
129:43 - because the elements that
I want to multiply together
129:45 - in the equation-- help
me with this part here.
129:48 - So it's going to be,
first, is your DGAIN
129:50 - that you just divide.
129:51 - Then you're going to
want to multiply it
129:52 - by the derivative of
your error, which is
129:54 - going to be negative velocity.
129:57 - And just in the x
direction, in this case?
130:00 - Yes.
130:01 - Yeah, great.
130:02 - Perfect.
130:05 - So let's see.
130:08 - I'm like, no, it
can't be that easy!
130:10 - The derivative of the error is
the negative of the velocity
130:15 - because velocity--
130:16 - we're talking about
derivative as a way
130:18 - of describing the change.
130:20 - The change in a position
is the velocity.
130:22 - Incidentally, the change in a
velocity is the acceleration,
130:25 - and force equals mass
times acceleration.
130:28 - This is where all that
Euler integration stuff
130:30 - comes together beautifully.
130:32 - Here we go.
130:34 - Oh, wait, I've got
to turn up the gain.
130:36 - I'm afraid.
130:40 - Look at that.
130:40 - That is fantastic.
130:42 - That's a PCONTROLLER.
130:43 - We did it.
130:46 - [BLOWING A TRAIN WHISTLE]
130:47 - See you all tomorrow.
130:48 - No, no, we're going
to keep going.
130:49 - [LAUGHING]
130:50 - But that's great.
130:51 - So let's give the
controller-- just
130:55 - as it continues to rerun
itself, let's give it a default.
131:01 - So actually, maybe
we should-- what do
131:03 - you think is a good next step?
131:04 - Should we leave the
DGAIN as a ratio
131:09 - as calculated from the
PGAIN, or should we
131:11 - give our own control over that?
131:13 - I'd say it'd be very informative
to put a slider on there
131:15 - because then you can see.
131:17 - You can do the reset.
131:18 - Yeah, it'll be interesting
to see how that behaves.
131:20 - So let's do a DGAIN slider.
131:26 - Let's add that.
131:27 - Now, I'm not going to add
any labels to the slider,
131:29 - so we're just going to have
to remember which one's which.
131:31 - I would really--
one of the things
131:33 - that maybe I'll all do
after we're done today,
131:36 - is I'll put this in
a GitHub repository
131:38 - and accept pull requests
for people to help
131:40 - improve the interface
and add things to it.
131:42 - I don't know if you saw this.
131:44 - I'm going off in a little
bit of a tangent here,
131:46 - but I just want to show you one
amazing example of this is--
131:52 - let me just go--
131:54 - sorry for the slight digression.
131:55 - But I just want to show
everybody what's possible.
131:59 - So I'm going to go to
one of my recent videos
132:02 - about horizontal
directional drilling,
132:04 - and this was a really
basic simulation
132:08 - of how horizontal
directional drilling works
132:12 - with changing the bias of
this particular kind of drill
132:16 - and turning it.
132:18 - This was the basic simple
code example from the video,
132:22 - and then if I go here to
the expanded game, which
132:25 - the viewers contributed
to, and I try it here,
132:29 - you'll see this is
what it looks like now.
132:31 - It has this animated drill.
132:35 - It has these obstacles
that are hidden,
132:40 - but you get these clues.
132:41 - It has a goal.
132:42 - You get a score.
132:43 - So we don't need to
go down that road,
132:44 - but I just want to encourage
people who are interested,
132:46 - anybody who helped
with this, if you
132:48 - want to help augment whatever
simulation we do here,
132:50 - I would welcome.
132:51 - I'll put this all up afterwards.
132:54 - So now, I need to get
back to where I was.
132:56 - So let's think about this.
132:58 - The DGAIN slider will have a
default starting value of 0.
133:04 - Let's have its range go to half.
133:08 - We can actually just make
it the same because we can--
133:12 - let's just make them
the same for right now.
133:14 - We'll see what the gains are
by their literal position
133:17 - along the slider.
133:18 - And then we will do this, DGAIN.
133:27 - Oh, yeah, sorry.
133:30 - Yeah, sorry, this
is DGAIN slider.
133:32 - I have a lot of
redundant variables here,
133:34 - but I think it helps us
follow what's going on.
133:37 - The value of that
slider, and then this--
133:42 - so now, what we can see here
is this is with the PGAIN on.
133:46 - And as I turn up the
DGAIN, it's like this
133:49 - dampening-- or damping?
133:50 - I can never get that right.
133:51 - Do you have a nice
way of remembering
133:53 - the correct terminology of
damping versus dampening?
133:56 - One of those is
making something wet.
133:58 - Yeah, dampening
is the wet thing.
134:02 - You dampen a cloth.
134:04 - It's damp.
134:06 - But the problem is because
something is damp in the rain,
134:08 - so people think damping.
134:10 - So yeah, dampening is the--
134:13 - I got to come up with a great
mnemonic device for you.
134:15 - Yeah.
134:16 - Until next time.
134:17 - Until next time, yeah.
134:18 - I'm always getting that wrong.
134:19 - It's like the other
thing that I always get
134:21 - wrong is modulo versus modulus.
134:24 - Modulo is the operator.
134:26 - The modulus is the
result of this value
134:31 - modulo, this other value.
134:32 - Anyway I'm, off topic.
134:33 - So I think we're
in good shape here.
134:37 - Let's add just-- let's give
these some default values that
134:41 - we can see stuff
happening as I'm--
134:45 - whoops, no, not point--
134:46 - let's do 0.05, 0.025.
134:50 - So every time the sketch--
134:51 - oh, no, wait.
134:52 - Oh, again, this is--
134:53 - I have the order of this wrong.
134:55 - I can't seem to remember that.
134:57 - This is 0.005, and then 0.0025.
135:07 - Did that work?
135:10 - Oh, wait, DGAIN slider--
135:13 - what have I got wrong here?
135:18 - Why is the PGAIN slider--
135:19 - oh, because of the reset.
135:22 - Ah, this is a very awkward
thing that I've done,
135:26 - that I've just got to live with.
135:29 - Great.
135:29 - So I just wanted to, every time
I change anything in the code,
135:33 - it's going to automatically
start and resettle.
135:36 - MinMax-- oh, right,
you think maybe I
135:39 - should have a variable
for the default value?
135:41 - That would make sense,
but this is fine.
135:42 - I want to add the pendulum,
the pole if you will.
135:47 - So the way that I'm
going to do this
135:50 - is by first creating
a circular body.
135:53 - So I'm going to call this the
bob, as in the thing that's
135:56 - hanging on the end
of the pendulum.
135:57 - So let's have a
variable for bob.
136:00 - We're going to create--
136:02 - and I suppose this
should go in the reset.
136:05 - I've really locked myself
into a corner here with this,
136:08 - but let's not worry
about it right now.
136:12 - Maybe I won't use the
Reset button much.
136:14 - That's something I
can refactor later
136:16 - because there's so many
things now that are going
136:18 - to start to need to be reset.
136:20 - So the bob is a body
creates body circle.
136:26 - I think it's bodies.circle, and
then I give it an x and a y.
136:32 - So let's have it be at the--
136:37 - I want it to be at the cart's
location, but that's fine.
136:39 - Let's see, do this.
136:42 - You know what?
136:42 - Let's put it in
reset and realize
136:44 - we're going to have to fix
this later since this is
136:48 - our build world function now.
136:50 - So I'm going to create
the bob because I
136:54 - want it to be directly
above the cart,
136:57 - so I'm going to say
the cartposition.x.
137:02 - And then I will
just use 100 pixels.
137:05 - Actually, this is kind
of silly, but let's say
137:08 - y -100 because let's have
a variable for the rest
137:13 - length of what's going
to be the pendulum.
137:16 - I mean, I'm thinking
of it as a spring.
137:18 - Ultimately, I'm making
idealized, fully rigid spring.
137:21 - That's what the pendulum
arm is, so that's
137:24 - why I'm using the
rest length term.
137:26 - And then what else do I need?
137:29 - We need an x.
137:30 - Oh, we need an r.
137:31 - Let's have it be 10.
137:33 - And then I need all the
options, these same options,
137:39 - which I probably could just--
137:46 - again, I will
refactor this later.
137:49 - But this is the bob now.
137:51 - It is a bob that exists
at the cart's position,
137:55 - but 100 pixels higher,
and it is not static.
138:00 - And I need to say
matter.composite.add
138:06 - to the world the bob.
138:10 - Let's also just store
that radius value.
138:14 - Again, kind of silly
that I'm doing this.
138:16 - Let's just store
it in a variable
138:17 - attached to the object.
138:19 - So now, I can draw.
138:21 - This is drawing the
cart, and I think
138:25 - I have more room here
that I can put this here.
138:29 - Make my coat a little bit wider.
138:31 - I think I'm slightly--
and if I stand over here,
138:34 - my setup's a little
bit better now.
138:37 - Drawing the cart.
138:40 - Now, let's draw the bob.
138:43 - We'll get a different color.
138:48 - Oh, I closed it,
but that's fine.
138:50 - The color is not the
important detail here.
138:53 - And the it is a circle, which
is at the bob's position.
139:03 - Oh, why did it fall
through the ground?
139:06 - That is strange.
139:07 - We're going have
to figure that out.
139:10 - Bob.r times 2.
139:16 - What did I miss?
139:17 - Oh, did I not add
it to the world?
139:19 - No, I added it to the world.
139:20 - Did I not add the
ground to the world?
139:22 - Oh, you know what it is?
139:24 - I wonder if-- all right,
let's go back to--
139:31 - I'm just curious because the--
139:42 - I'm just going to go back to
my old fashioned world.add,
139:47 - and let's see.
139:52 - What am I missing here?
139:55 - Let's give it a little
restitution and friction.
140:01 - This is strange.
140:02 - I'm trying to think of--
140:03 - I'm going to look at the chat.
140:05 - "You forgot to remove
the bob after resetting."
140:08 - No.
140:09 - All right, I'm going to take out
this idea of the Reset button
140:12 - right now.
140:15 - And take this out.
140:18 - So this is just
creating the world.
140:20 - Let's take a look at this.
140:24 - We make the rectangle.
140:27 - Bodies.circle-- all right,
I'm going to go to my code
140:31 - from looking at the chat.
140:33 - "I think the gravity is so high
that the Euler integration is
140:35 - starting to mess up."
140:36 - I have seen this.
140:38 - I probably need to
change the time step.
140:40 - Let's change the gravity.
140:43 - Oh, yeah, so that was Simon,
a great comment in the chat.
140:47 - So this is something
that we have
140:49 - seen when I write my own
physics engines, that if--
140:53 - and in Christian's
Python code, there
140:55 - was a variable called dt,
which controlled the time step.
140:58 - And you can imagine,
if this desk here--
141:01 - I'm going to raise
this up a little bit.
141:03 - If this is the ground, and
this little Elgato HDMI capture
141:09 - thing is the bob, if
I were to drop it,
141:13 - it's really falling
continuously through air.
141:16 - But our simulation
is doing this--
141:18 - calculate a time step, and
then teleport it to here.
141:21 - Then teleport it to here.
141:22 - And so if those time steps
are really big, boom.
141:25 - It's going to skip
past the ground.
141:27 - It will never
actually make contact
141:29 - because it's able
to leap over it.
141:31 - And there are all sorts of ways
in programming physics engines.
141:33 - Box2D has a very sophisticated
methodology for this.
141:38 - I think there's probably a way
for me to alter the time step,
141:40 - but I'm actually
just-- right now,
141:41 - I'm just going to leave
the gravity by default,
141:43 - and we've got it working.
141:45 - Looking at chat, the
gravity, the gravity.
141:49 - But now we've got
that working, and I
141:51 - made some unnecessary
changes trying to debug that.
141:54 - But I'll just leave it as is.
141:55 - The next thing we need to
do is create a constraint,
141:59 - so let's go to the
Matter website.
142:01 - The constraint-- so if you go
to the home page of matter.js--
142:08 - let's just see.
142:13 - See these demos?
142:15 - We have this Newton's cradle.
142:16 - We have this double
pendulum right here.
142:20 - We have these springy things.
142:22 - Whenever two bodies are attached
to each other via a spring,
142:26 - however, springy it is--
142:31 - look at all these
wonderful examples--
142:32 - that's called a constraint.
142:34 - So I'm going to look at the
documentation under constraint,
142:40 - and basically, I want
to create a constraint
142:43 - with a set of options.
142:45 - And let's do that here.
142:48 - So I'm going to do this in my--
142:51 - I'm just going to now call this
createWorld, this function,
142:55 - and I probably should
put the ground in it too,
142:57 - but we can fix that later.
142:59 - Let's add a constraint.
143:01 - And again, after
the stream today,
143:03 - I will go through and kind
of comment all of the code
143:06 - so that the released version
has more explanations in it,
143:09 - and I'll do some
cleanup as well.
143:12 - So we need to say constraint--
143:18 - I already forgot-- create,
constraint.create--
143:21 - where is that?
143:23 - Create.
143:23 - Create, and then I believe
we give it a set of options.
143:29 - So-- now, I think it's--
143:32 - I'm just assuming it's giving
me an error because-- let's turn
143:34 - off auto refresh for a second.
143:36 - Now bodyA-- I believe the first
thing you do with a constraint
143:39 - is you say which two
bodies are attached.
143:41 - So bodyA is the cart
and bodyB is the bob.
143:49 - And somewhere in
this documentation
143:50 - I should see all of
the usages or examples.
143:55 - Let's try here.
143:57 - Let's go to examples.
144:01 - While you're looking
that up, Daniel,
144:02 - in dynamics, multibody dynamics,
when we add a constraint,
144:06 - we add something
that's called a--
144:08 - a variable called lambda
for every constraint,
144:10 - and it's called
garage multiplier,
144:13 - and that's how we handle the
math and deriving the dynamics.
144:16 - Basically, it's the force
that holds-- that makes
144:19 - this constraint happen.
144:20 - Obviously, that's not
relevant in any way
144:22 - to you fixing your problem,
but just tying this back
144:24 - to how we do it in robotics.
144:26 - So there's probably
a better example--
144:28 - I just sort clicked through
and found this example.
144:30 - And we can see
this is actually--
144:32 - I found an example of a ragdoll
simulation with matter.js.
144:36 - And you can see here is the
chest to the upper left arm,
144:41 - or maybe that's el--
144:42 - I don't know.
144:43 - I don't know what part is what
on an actual anatomy here,
144:45 - but you can see we
have two bodies,
144:47 - and then we have a stiffness.
144:49 - That should be all
I need, I think.
144:52 - There is a point
A and a point B.
144:54 - I think that's just if you want
the constraint to be attached
144:56 - to the offset from the
center of the body, which
144:59 - I don't need for this.
145:01 - So let's see if
that's all I need.
145:06 - Where's my sketch again?
145:07 - BodyA, bodyB, stiffness of 1.
145:13 - BodyA is not defined--
145:15 - oh, wait.
145:15 - No, no, no.
145:16 - All right.
145:17 - You know what I'm going to--
145:18 - I'm going to do here?
145:19 - Is I'm just going
to look at the thing
145:21 - that I was making yesterday and
see what the constraint code is
145:26 - there because I think I--
145:28 - we've been going for
a very long time,
145:30 - so I'd like to kind of
get this wrapped up here,
145:32 - and I think this will help
us get there a little faster.
145:36 - Constraint.
145:37 - Body-- oh, length, I'm missing.
145:39 - Constraint.create-- so
let's just take this.
145:41 - Let's grab this code here
that I wrote yesterday
145:45 - as I was trying this idea out.
145:48 - And so we're going to
go to the cart, the bob,
145:53 - the restLength, which I set
up here, and the stiffness.
145:59 - Why is it saying
bodyA is not defined?
146:04 - So let's take a look at
what am I missing here?
146:07 - Is cart-- oh, is
cart not made yet?
146:10 - No, cart is a body.
146:13 - Bob is a body.
146:20 - Hmm.
146:21 - I'm not-- this is where the chat
always comes in and helps me
146:24 - out.
146:24 - I disabled auto refresh.
146:26 - Yeah, yeah, yeah.
146:27 - Oh, OK.
146:27 - No, we're fine.
146:28 - The constraint is there.
146:30 - The constraint is there.
146:31 - I think I just--
146:32 - I hadn't run-- I
hadn't fixed it and run
146:34 - the code in the right order.
146:37 - The other thing I want to do
is render that constraint.
146:39 - That constraint, by the way, by
default, doesn't have any mass.
146:42 - It's not-- there's no
geometry associated with it.
146:44 - It's just a force.
146:46 - But for our purposes, let's
not worry about color here.
146:49 - Let's draw a white stroke with
a thickness of four pixels,
146:54 - and we'll just draw a line
between the cart and the bob.
147:04 - Oh.
147:10 - Now, OK.
147:12 - So what am I--
what's wrong here?
147:15 - Stroke-- cart.position.x--
what is undefined?
147:21 - Cannot read the property
of undefined line 110.
147:32 - Look at the chat again.
147:33 - And everyone's telling me
I forgot to press play,
147:35 - but that's not the issue here.
147:38 - What is going on here?
147:39 - Cart.position.x,
cart.position.y.
147:43 - Bob.position.x-- we just
drew a circle there,
147:46 - we just drew a rectangle there--
147:50 - oh, there's a weird typo.
147:52 - You have a dot--
147:53 - [INTERPOSING VOICES]
147:54 - It's the comma.
147:54 - There we go.
147:55 - Yeah.
147:56 - OK.
147:59 - Here we go.
147:59 - Oh, and I've added this very
thick stroke to everything now,
148:03 - so before I draw these
elements, let's put no stroke.
148:09 - And I'll put auto
refresh back on--
148:12 - there we go.
148:13 - All right.
148:14 - Look at that.
148:14 - Now, of course our
pendulum is just
148:16 - falling over because
my controller is not
148:19 - attempting to balance the--
148:21 - chat, by the way, so the chat is
like 30 to 60 seconds behind us
148:25 - so you can see like comma,
comma, comma, comma, comma,
148:27 - comma, comma--
148:28 - OK, I got it.
148:29 - Got it.
148:31 - Let's add-- let's
take out the friction,
148:36 - but let's put a little bit
of bounciness in there just
148:40 - because I think it'll be
kind of nice to see it--
148:45 - the pendulum bounce
when it hits the ground.
148:47 - Let's see.
148:49 - Yeah, there we go.
148:50 - That has a nice kind
of feeling to it.
148:51 - Again, I need to really
do some tuning to my cart
148:55 - so it doesn't go flying off
into the air, but so be it.
148:59 - All right.
149:00 - We're getting really close
to the end of this, I think,
149:03 - right?
149:03 - Yeah.
149:04 - So the next thing I need--
149:06 - yeah, go ahead, Chri--
149:08 - Go ahead.
149:08 - I'm sorry.
149:09 - [STAMMERING] why
don't you tell me?
149:12 - OK.
149:13 - So I need to only--
the thing that I
149:14 - need to do is
calculate the error now
149:20 - as not the difference in x
positions but the difference
149:25 - between my ideal angle and
what the current angle is.
149:30 - So my ideal angle, if my
reference point is the y-axis,
149:35 - would be 0.
149:36 - Now, how I get that angle
might end up being-- that
149:39 - might be 90 degrees or
negative 90 degrees.
149:41 - So let's see.
149:42 - The question is, is matter
going to give me the angle,
149:44 - or should I calculate the
math for the angle myself?
149:47 - I think I'm just
going to do it myself
149:49 - in a very ridiculous
way, unless--
149:52 - Let's just check
the matter.vector--
149:55 - let's check the matter.vector
object because maybe it
149:58 - has a heading function in it.
150:01 - I like an angle vector angle.
150:04 - Yes.
150:05 - Well, that gives me the
angle between two vectors,
150:08 - which I could certainly use,
but that's not what I want.
150:10 - I want the angle of just
the heading of a vector.
150:13 - I know how to do this myself.
150:15 - I was just wondering if
matter would give it to me.
150:18 - So maybe somebody in
the chat will tell me,
150:22 - but I'm going to just do this
in a very crude, raw way myself.
150:25 - So let's add a comment here.
150:27 - What is the pendulum arm angle?
150:31 - So I'm going to make
my own p5 vector.
150:35 - So here's a really terrible
idea that we will correct later,
150:39 - but I mixing--
150:40 - I'm not mixing metaphors,
I'm mixing physics libraries,
150:44 - in that matter has this vector
object called vector.create,
150:49 - but I know the p5 vector
object, like, in and out.
150:52 - Like, it's burned to my brain
so I can get an angle from it
150:55 - really quickly.
150:56 - I could also use the A arc
tangent function-- so many ways
150:59 - I could get this, but
let's just do it this way.
151:01 - So I want to create a
vector, which is the--
151:07 - I'm just going to
create an empty vector,
151:09 - and then I'm going to say
v.x is the bob's position
151:16 - minus the cart's position.
151:20 - And I could go over
to my whiteboard here
151:22 - to diagram this, but I--
151:25 - let's-- and did I use--
oh, I used v already.
151:29 - Let's just call this arm.
151:31 - It's a vector to
describe the arm.
151:33 - And then bob.position.y
minus bob.position--
151:39 - a cart.position.y,
and then I'm going
151:45 - to set the angle to
be the arm's heading.
151:48 - So again, I could do this
mathematical calculation
151:51 - myself, but basically I drew a
vector pointing from the cart
151:54 - all the way up to the bob, and
then I'm getting its angle.
151:57 - Now, let's look at
what that angle is,
152:00 - and I'm going to convert
it to degrees, just
152:02 - because my ability to understand
what an angle is in radians
152:06 - is--
152:06 - so we can see it's about--
152:08 - well, when it's-- it's at
negative 180 degrees when
152:12 - it's there, which is correct.
152:14 - So what did it start at?
152:16 - Thank you, sir.
152:17 - All right, let's turn the
engine off so you to see.
152:20 - What is it-- what is
its correct angle?
152:23 - It's correct angle
is a pi divided by 2.
152:33 - Right?
152:34 - In radians.
152:35 - In radians.
152:37 - Pi over 2 in radians, you
use radians, degrees or not,
152:40 - because pi over 2
would be like 1.7.
152:42 - Yeah.
152:42 - That's-- I converted it,
and then I converted it back
152:44 - in my head.
152:45 - OK.
152:48 - What?
152:49 - Do I have something wrong here?
152:52 - Let's see.
152:55 - Hold on.
152:55 - One of the ways I like to-- one
of the ways we can debug this
152:58 - is--
152:59 - I'm going to do this.
153:03 - I'm going to very quickly
translate to a little spot
153:08 - and draw a line.
153:14 - I'm just drawing this
line here, and I'm
153:16 - going to rotate by that angle.
153:20 - Weird.
153:21 - So I definitely have a mistake--
153:22 - oh, there's a y there.
153:25 - I make so many typos.
153:26 - There we go.
153:27 - I knew, like, my
math is not right.
153:29 - OK.
153:30 - There we go.
153:30 - We're good.
153:31 - We're good.
153:32 - I'm sure the chat-- like,
the chat's already got this.
153:35 - OK.
153:35 - This is actually nice,
though, to see this
153:37 - because if I turn the--
153:39 - if I turn the engine
back on, where's that?
153:46 - It's kind of fun to see
that little extra dial
153:49 - kind of rotate with it.
153:50 - It's like-- but I don't
know that we really
153:52 - need that debugging because we
have the actual pendulum arm,
153:54 - but that's going to be useful.
153:56 - So I'm going to just
comment that out, though,
153:57 - for right now.
153:59 - So now.
154:00 - One thing I want to
alert you to is the fact
154:02 - that we're going to get the
derivative of that angle
154:04 - that you're measuring numeric.
154:05 - Right.
154:06 - So I don't know you
have a plan for that,
154:08 - but we could certainly
come up with one.
154:10 - I don't have a plan
for that, so you
154:12 - can start thinking about that.
154:14 - Yeah.
154:15 - Yes.
154:16 - I guess I could--
154:18 - I don't have a-- the objects
have angular velocity,
154:22 - but that's it rotating.
154:23 - I will have to track that
angular velocity myself,
154:28 - I guess, by looking
at the change.
154:30 - Yeah.
154:30 - Yeah, that's why
I was wondering.
154:31 - Can you store something or grab
something for the previous loop
154:34 - attempt variable--
154:34 - Exactly.
154:35 - Yes.
154:36 - That's what I'll do.
154:37 - That's what I'll do.
154:38 - So first, let's-- so one thing
I'm going to do right now is
154:42 - I'm going to just
comment out the dGain.
154:44 - So this is now--
154:45 - it's just got a pGain.
154:47 - It's only-- this is
just a p controller.
154:49 - And again, it's still trying
to do the cart location, not
154:52 - the angle of the pendulum.
154:56 - OK.
154:57 - But the error now should be--
where did I calculate that?
155:00 - OK.
155:01 - So this is-- let's move this up
to here, let's take-- actually,
155:07 - just take this out so that
we can see things more in one
155:11 - place, and now what I want
to do is change this error
155:18 - calculation.
155:19 - So this is-- I'm going to just
leave that there for reference.
155:24 - This is now the desired
angle, which I said was--
155:30 - what-- did I say it
was pi divided by 2?
155:34 - I mean, pi divided
by 2 should be the--
155:38 - assuming 0 is horizontal
right, and that's--
155:41 - No, it's actually not.
155:43 - It's-- so the
unfortunate thing is--
155:47 - oh, it's negative
pi divided by 2
155:49 - because the y-axis in
my world is flipped.
155:52 - So rotating down along the
horizontal axis is 9 degrees.
155:56 - So there could be
some reasons for,
155:58 - in a different kind of
demonstration of this,
156:01 - to actually make the world
with the y-axis pointing up
156:04 - to reduce these
kinds of problems,
156:07 - but in my world of just getting
this to work, like, oh, no, I
156:11 - just remember we
need a negative here.
156:13 - OK.
156:14 - This is cool.
156:15 - All right.
156:15 - So it's perfectly balanced
because there's no offset.
156:18 - So just to see if what
the p controller does,
156:22 - remember these
forces I had here?
156:24 - Let's actually-- I'm going to
be able to, with a key pressed,
156:28 - apply a little bit of wind,
almost as if a gust of wind
156:32 - comes--
156:33 - blow, or somebody flicks the
bob because it's not a wind--
156:36 - because the wind would push
the cart, conceivably, as well.
156:38 - So presumably now, when I press
the key, pressed to the right,
156:42 - a little force is going
to act on the bob,
156:44 - pushing it to the
right, and that
156:46 - should cause every--
the p controller
156:48 - to start to move the cart.
156:54 - All right.
156:54 - Maybe we should--
156:56 - Little less wind.
156:57 - A little less wind.
156:58 - A little less wind, and maybe
a little less restitution.
157:01 - A little more
conversation-- what's
157:02 - the song that I'm
somehow referencing now?
157:05 - I wish I knew.
157:07 - There we go.
157:08 - OK, now, when in the wrong--
157:13 - it compensated, but in
the wrong direction.
157:16 - So I must have
something flipped.
157:18 - Well, it's possible--
like, the--
157:22 - I mean, I know you had to have
to change the direction of pi
157:24 - over 2, that's
your desired angle,
157:26 - but theoretically,
it should be OK.
157:27 - It shouldn't
require-- maybe it's
157:30 - the fact that it drives it
in a different direction?
157:34 - You could try flipping the
gain, even though it technically
157:37 - should be positive, but
we can give that a shot.
157:42 - There you go.
157:43 - There you go.
157:43 - So why is my direction wrong?
157:46 - Interesting.
157:48 - It has to follow how you
would define your angle.
157:51 - So let's consider 0 being
the y-axis, in which case--
158:09 - oops.
158:11 - But wait.
158:12 - Hold on.
158:12 - Hold on.
158:13 - Let's not-- let's turn the
engine off for a second.
158:19 - So right-- so this
angle is now 0
158:21 - because I'm offsetting
it by pi divided by 2.
158:25 - And one thing I'll also point
out is people are saying we
158:27 - didn't-- that the d term might
still be on and still working
158:30 - based upon the cart position,
so it would be a mismatch.
158:33 - That's something that
can be mismatched.
158:35 - It is.
158:35 - I commented that out.
158:37 - Pretty sure.
158:37 - No, yeah.
158:39 - You did.
158:41 - And then, this would
be the desired angle
158:44 - is 0 minus the current angle.
158:48 - But if the current angle is--
158:51 - let's see.
158:52 - So now let's-- do I
turn the engine back on?
158:55 - No.
158:57 - We don't have to
get stuck on this.
158:58 - We can think it
through more later.
159:00 - I'm sure it will--
159:01 - oh, there we go.
159:02 - So there's something--
this is-- once I've now--
159:06 - oh, no.
159:06 - I still have the negative.
159:07 - I didn't realize I had
the negative there.
159:09 - All right.
159:10 - So I'm not going to worry
about this right now.
159:12 - Let's-- we'll put
our heads together.
159:14 - I'm sure it will
appear to somebody's--
159:16 - It'll pop out.
159:18 - Somebody-- line 71, 75.
159:23 - 71-- am I?
159:28 - Oh, cart position.
159:31 - That's not a big deal,
but that is a problem.
159:34 - So if I-- look at the--
159:40 - one thing I can do here
that I've done before is we
159:44 - can make the ground
much, much higher.
159:46 - So basically the ground--
159:49 - so that it can't skip
past it as easily.
159:51 - It's thicker.
159:51 - Thicker, yes.
159:53 - So the ground could be like
100 pixels thick, and then--
160:00 - obviously now, it's-- and the
h is 100, so it's obviously--
160:04 - it's there.
160:05 - But actually,
that's kind of fine.
160:06 - I was going to say like, oh, I
want to have to shift it down,
160:09 - but let's just--
160:10 - that's actually much sort of
nicer to see it there anyway.
160:12 - So let's-- now I
just need to adjust--
160:15 - it would be nice to adjust
where the cart starts, which is,
160:24 - like, around 2.
160:28 - I sort of forgotten--
160:29 - I'm just going to click--
160:30 - there we go.
160:33 - Perfect.
160:34 - OK.
160:34 - I don't remember what it was.
160:36 - So, OK.
160:36 - So, great.
160:37 - So, now-- cool.
160:41 - So now do we--
160:42 - now-- go on.
160:44 - I'm sorry.
160:44 - But I was going to mention
that we could up the gain
160:47 - now and see if it will
get the [INAUDIBLE] faster
160:49 - and it'll be good.
160:49 - Yes.
160:50 - Yes.
160:52 - So where is--
160:55 - I just want to see where
this console.log that
160:57 - is filling up the console.
160:58 - There it is.
160:59 - OK.
161:00 - So let's now put the gain
higher and hit a little force
161:07 - to the right.
161:08 - Yeah.
161:08 - You could see--
161:10 - I mean, it's-- one
thing I could also do,
161:12 - I was doing this in
what I was doing test,
161:14 - is I could add little walls on
the sides so that it's forced
161:18 - to stay on the screen,
it'll bounce back and have
161:20 - to readjust.
161:21 - Maybe we'll do that
just for because I
161:22 - think it'll make the
simulation kind of interesting.
161:26 - I don't want to get too
stuck in this, but let's do--
161:33 - and I don't even have to
draw those necessarily.
161:36 - We can just say
like, hey, let's make
161:38 - a left wall, which is a
rectangle at the width,
161:48 - at the--
161:49 - I'm going to just hard code this
in because it's a little bit
161:51 - more concise right now--
161:53 - at 200 pixels down, it's
just like 10 pixels wide.
161:58 - It's the full height.
161:59 - So now-- oh?
162:02 - And let's make it 100
pixels wide, just like--
162:08 - oh, I didn't add it.
162:09 - No, it's just, I
didn't add it to the--
162:13 - world.add, world, leftWall.
162:17 - And that's the right
wall, by the way.
162:19 - I don't know if I've-- this is--
162:20 - I was saying this to
Christian earlier this week,
162:23 - I try never to stream for
more than 2 and 1/2 hours
162:26 - because that seems to be
the threshold where my brain
162:29 - completely starts to shut down.
162:31 - It's like my classes at NYU
are 2 and 1/2 hours long,
162:34 - with a good 15 minute
break in the middle,
162:36 - which we did not
take, which is--
162:38 - I guess I had a little bit of
break because we were passing
162:41 - things back and forth, but--
162:43 - OK.
162:44 - So let's see here.
162:47 - Oh, that's the giant--
162:49 - the wall-- oh, the
wall should be at 400.
162:53 - Sorry.
162:53 - This is the problem
with not drawing it.
162:55 - I don't know where it is.
162:57 - There we go.
162:58 - There you go.
163:00 - Let's just add a left one.
163:03 - Maybe this is a different kind
of problem I'm introducing,
163:07 - but at least we'll
have this option.
163:09 - OK.
163:10 - So now, and-- we can
make them very bouncy
163:13 - so as to force the things
to bounce off them more.
163:17 - OK.
163:21 - Oh, let's see.
163:21 - LeftWall, 0, 2-9, and--
163:24 - got to add the left
wall to the world.
163:28 - OK.
163:34 - And I think I also
might like to--
163:36 - I think it'll help
us sort of see
163:38 - what's going on by having
this force be even less.
163:42 - So let's-- I'm going to just--
163:44 - many magnitudes less, right?
163:46 - Because we can see now--
163:47 - there we go.
163:48 - We can see it more
trying to balance it.
163:51 - And I don't know why
it decided to, like--
163:56 - this--
163:57 - Filled your wall, but I
don't know what happened.
163:59 - Yeah.
164:01 - But I love that.
164:02 - I love the way you're
winding it back and forth.
164:05 - I think end-- stuck at the end.
164:08 - I might be--
164:10 - I wonder if the walls are
actually in the wrong place
164:15 - because 290--
164:19 - what am I doing?
164:20 - Yeah, the wall should be--
164:21 - I don't know what I was doing.
164:23 - This should be 150,
the y position.
164:25 - This is the problem
of not drawing it.
164:26 - The wall is actually
not-- was like,
164:28 - I had it all the
way at the bottom.
164:30 - I don't know what-- why I
did that, but this will--
164:34 - and we can up the gain.
164:37 - But yeah.
164:38 - OK.
164:38 - Great.
164:39 - So we've got a nice p
controller that can push it,
164:45 - and it'll sort of try
to get it balanced.
164:48 - Look at that.
164:48 - That is awesome.
164:49 - Yeah.
164:51 - OK, this is around my--
164:52 - we should really stop here.
164:54 - Quit while you're ahead.
164:55 - OK.
164:56 - So I'm going to--
by the way, I'm
164:57 - going to put a hard
stop on us at 2:00,
165:00 - so that gives us 15 more
minutes to maybe see
165:03 - about adding the d
controller, and maybe
165:06 - one or two short questions.
165:08 - We can always come back and
do this again, or be available
165:11 - on social media or Discord
or in the YouTube comments
165:13 - if people--
165:14 - I mean, Christian,
you're welcome to go back
165:16 - to your life, but I will
pass along any questions
165:20 - that I can't answer to
Christian and answer for you.
165:23 - You know what?
165:23 - You're working so
hard, I'll stick
165:25 - to 2:00 PM to moral support
for your challenge here.
165:29 - OK.
165:30 - OK.
165:30 - We're going to wrap this up.
165:32 - We're not going any
more than 15 minutes.
165:35 - So let's start adding
the d control here.
165:40 - So what we need is
the angular velocity,
165:43 - and the easiest way
to do that would
165:45 - be to just store
the current angle
165:47 - and the previous angle, yes?
165:50 - Correct.
165:51 - So let me create a variable
for a previous angle.
165:54 - We're going to have the
previous angle start--
165:57 - I don't need to
put it in Setup--
166:00 - and I'm mixing different
code styles here.
166:02 - I will go back to what I
usually use with the camel
166:04 - case for JavaScript.
166:06 - Previous angle is 0.
166:09 - So this is me-- where
am I calculating?
166:11 - This is actually going
to be pretty fast.
166:14 - As soon as I calculate
the new angle,
166:17 - the angle velocity
is the current angle
166:23 - minus the previous angle.
166:26 - Yeah.
166:27 - And we get it divided
by delta t, right?
166:29 - The dt?
166:30 - Right.
166:30 - So in my case, delta t is 1.
166:34 - But we might need to match
it-- because I'm just using
166:37 - the frame rate, basically
every frame is 1--
166:39 - there might be an issue
with that in terms
166:42 - of how we scale things,
in which case, we can--
166:44 - and how matter.js is working,
but let's start with that.
166:47 - But yes, we should--
166:48 - I guess to be more--
166:50 - to be correct, I should
have a variable for dt,
166:56 - and take this and
multiply it by dt.
166:59 - Is that correct?
167:00 - Divide it by dt.
167:01 - Divide it by dt.
167:02 - Yes.
167:02 - Sorry.
167:03 - That's what I meant.
167:05 - So we're going to
leave it like that,
167:07 - that way that is a parameter
we could adjust if need be.
167:10 - And then I just need
to, as soon as I
167:13 - do that, previous angle
is the current angle,
167:16 - so that I pick that
up for the next time.
167:19 - So this should give us
the angular velocity.
167:22 - And then, I guess I don't
really-- just to be consistent,
167:32 - I'm having many extra
unnecessary variables here,
167:35 - but I will just put this
as the angular velocity.
167:39 - Oh, and there's no--
167:40 - it's a scalar value, so
there's no x component
167:43 - I'm dealing with.
167:46 - And so-- I have no idea.
167:49 - I think I put
everything in the code.
167:54 - Fingers crossed here.
167:57 - Oh, yeah.
168:00 - I mean, it's hard to
tell how much of a factor
168:02 - that's having, but
let me ramp that up.
168:06 - Wow.
168:07 - So it's possible we might
want to keep my lead
168:11 - to change the direction
of the other gain.
168:13 - Right.
168:14 - We should probably--
so we might want
168:15 - to change the direction of
the other-- of this other one.
168:18 - Which is not a
theoretical problem.
168:20 - It would be like,
what if your force
168:22 - you defined as out going
in the opposite direction,
168:24 - for instance?
168:25 - That's not a crazy thing.
168:26 - So let's-- look at that.
168:31 - It's coming to a stop.
168:32 - Look at that.
168:34 - This sways slowly to a stop.
168:36 - How about that?
168:37 - Whoa!
168:38 - What, now it's going?
168:40 - Oh, you're doing that.
168:41 - No, I started--
I'm pressing keys.
168:42 - Yes.
168:44 - What happened?
168:45 - The man said it
shouldn't do that?
168:47 - No, that's good.
168:48 - That's why we better have
buttons or some interface,
168:51 - or like the for--
168:52 - I could use something that
we use a lot on the channel,
168:55 - it's something called
Perlin noise, which
168:57 - is this sort of
smooth noise, which
168:59 - would be nice for just this kind
of like arbitrary wind that's
169:02 - kind of like chaos--
169:04 - introduce a little chaotic wind
into the system that's not just
169:07 - totally random but sort of
smoothly changes over time
169:10 - and have it always
balanced according to that.
169:13 - KD can always absorb dt term.
169:15 - OK.
169:15 - So I'm going to make a
list of things that I--
169:19 - this-- we're going to--
we're wrapping this up--
169:24 - I was going to say 10 minutes
early, but not really.
169:26 - I just want to make a
short list of things
169:28 - that I want to address
so I remember them.
169:31 - And then what-- it's not
going to happen immediately,
169:34 - because I got to
go back to the--
169:35 - Christian, I'm sure
you do as well--
169:37 - go back to regular life
for a little bit of today,
169:39 - but sometime later
this weekend--
169:41 - or certainly on Monday--
169:42 - I'm going to add
the code to GitHub,
169:50 - let's investigate the direction
of the gain constants.
169:56 - Like, I have some error there
maybe related to the axis being
170:00 - flipped or something
that I just cannot--
170:03 - I cannot find right
now in my head.
170:04 - So we'll investigate that.
170:05 - I'm almost certain.
170:06 - I'm almost certain
that's what it is.
170:08 - I mean, that's not--
170:09 - I know I talked--
170:10 - I know I talked about how
the gain should be positive,
170:12 - but that's--
170:12 - it could be dependent upon which
direction you put your force.
170:18 - And then, I don't know,
does anybody else quickly
170:20 - in the chat-- is there--
there's actually not--
170:22 - and then I'm just going
to do some clean up
170:24 - and commenting of the code.
170:28 - But we're not going to
keep going with this,
170:30 - but I, just out of
curiosity, if this were--
170:32 - let's say this were a
demonstration for a lecture
170:35 - you're giving in one of
your robotics classes,
170:37 - like, what would be--
170:38 - I mean, I guess the I-- adding
the I could be something next.
170:41 - But what would be sort of
like the follow up to this?
170:44 - Well, I think what you would
do-- so in a robotics lecture,
170:48 - like we would learn what the
margins of stability are.
170:52 - Like, there is like--
170:53 - we have these methods of
knowing-- not just what
170:56 - makes the controller
perform better or worse,
170:58 - but there are thresholds for
what's stable and not stable.
171:01 - And you can technically
test those out.
171:04 - Now, that's not a
super necessary thing
171:06 - for what we're doing here--
we're kind of tuning it up.
171:08 - The I term would be
interesting to show.
171:11 - The tricky part
would be getting it
171:12 - to not only balance,
but also hover back
171:14 - to the right position.
171:15 - Right.
171:16 - Yeah.
171:17 - And someone in the chat--
171:18 - somebody in the chat
just said that would
171:20 - like to see the desired
position of the bob,
171:22 - not-- oh, so people
are doing, like,
171:24 - adding various comments to the
chat, but that's interesting.
171:26 - So not only does the robot need
to balance the pendulum, but--
171:32 - or the pole, if you
will, but it also
171:35 - needs to balance it in
the center of the space
171:37 - that it inhabits.
171:39 - Exactly.
171:39 - Exactly.
171:40 - And there are ways to do that.
171:42 - It's a little trickier,
but you can still do it
171:43 - with the PID control framework.
171:45 - Great.
171:46 - So one more-- I'm going
to take one or two more
171:48 - questions from the
chat before we wrap up.
171:50 - One is, what is your
favorite control algorithm?
171:53 - And the options that-- you could
go off this list of options,
171:56 - but the ones listed in
the chat are LQG, MPC,
172:00 - sliding mode, et cetera.
172:02 - Do you have a favorite?
172:03 - So, yeah.
172:04 - So just-- I'll
zoom in on this one
172:07 - that's called MPC, which stands
for Model Predictive Control.
172:12 - I mean, they all have--
the short answer's
172:14 - they all have their uses
in different things.
172:17 - The thing that's interesting
about Model Predictive
172:19 - Control is that it
is not just taking
172:23 - the current state of the system,
like what we're doing with PID
172:26 - and saying, do this based
upon the current state
172:28 - of the system.
172:29 - I'm far away, push hard.
172:31 - The MPC is what
it's doing-- it is
172:34 - predicting into the
future what it should do.
172:37 - It is rapidly
figuring out not only
172:41 - what to do now, but a
little bit after that,
172:44 - a little bit after that,
a little bit after that,
172:46 - a little bit after that.
172:47 - It's doing what we call
a trajectory optimization
172:51 - on the fly.
172:52 - It is-- and one of the sort of
undersold to the public tools
172:58 - that we do--
173:00 - that we can do in
robotics now is
173:01 - we can run really fast
optimizations called
173:04 - quadratic programs, and they
will generate on the fly
173:09 - the best trajectory it
can, not only for now,
173:12 - but into the future.
173:13 - And so you can do really
cool stuff with MPC
173:17 - because it is just rapidly
changing its prediction.
173:21 - You can push it around.
173:23 - It's like, oh, I should do
this now, I should do that now.
173:25 - And we use that in
our robots now a lot.
173:28 - Wonderful.
173:29 - There's a great-- oh,
now I lost the comment.
173:32 - There was a really nice
comment in the chat that
173:34 - said, if we added
friction, that would
173:38 - be a nice way to demonstrate
the need for the I
173:40 - because we would have
to push harder, I guess,
173:44 - in a way, like accumulate that
error to get it to balance
173:48 - properly.
173:50 - Yeah.
173:51 - And I'll make a quick
comment on the I term,
173:53 - and that's yes, that's a
great thing for friction.
173:57 - The I term is also
the easiest way
173:59 - to make your system
accidentally unstable.
174:02 - You got to be careful
with the I term.
174:04 - It could take something
that was stable
174:06 - and then suddenly crank it
up too high and it starts--
174:10 - like, it will go
from, like, oh, I'll
174:12 - correct this little bit of safe
state error to it'll overshoot,
174:16 - and then it'll overshoot
again, then overshoot again,
174:18 - and it goes wild.
174:19 - So that's what it'll do.
174:22 - Wonderful.
174:23 - So let's see here.
174:26 - Let me just check--
174:27 - so, I'm trying to
think of what else
174:29 - I want to say to wrap up here.
174:31 - So first of all, thank
you so much for joining.
174:33 - This is really fantastic.
174:35 - Oh, I know what I
was going to say!
174:36 - Another thing I wanted to add.
174:39 - So one of the things
that I'm hoping--
174:41 - that I've been working
on for a while--
174:43 - one of the reasons why
I'm so excited about this
174:45 - is I've been working on a new
chapter for The Nature of Code
174:48 - book about neural networks.
174:51 - And I've done demonstrations of
this where we use a technique
174:55 - called neuroevolution to evolve
the weights of a neural network
174:58 - to control an agent in a
simulation, and this, I think,
175:02 - would be a really nice example
of comparing and contrasting,
175:07 - that that kind of-- like, what
would the inputs to the neural
175:10 - network be of--
175:12 - it's the-- it could
just be just the angle--
175:14 - the angle of the pendulum
and the current velocity
175:17 - of the cart, or
something like that,
175:19 - and sort of compare
and contrast.
175:20 - But what I love
about this is I often
175:23 - have students who
are like, oh my god,
175:25 - I need to learn
reinforcement learning and q
175:28 - learning and all this
stuff to be able to control
175:30 - my thing because--
175:31 - and then-- but no.
175:32 - Just something as simple--
175:34 - again, everything is relative.
175:36 - There's lots of complexity
here, and calculus, math,
175:38 - but something as simple as
just looking at your agent's,
175:42 - your object's position in the
world, where it wants to be,
175:47 - that error, and applying a force
scaled according to that error,
175:52 - and just that
proportional controller
175:55 - is a really nice way
to add intelligence
175:58 - into a simulated system.
175:59 - And obviously, with
a physical robot
176:02 - that you built within Arduino,
like, sticking a neural network
176:04 - in there could be quite
overkill, although interesting
176:07 - as well.
176:07 - So I just think
it's really exciting
176:09 - to see this as a
complement and counterpoint
176:12 - to some of these other
systems that I'm working on,
176:14 - and I think there's
lots of potential
176:15 - here to continue and
look at more controllers,
176:18 - and hopefully we
can stay in touch
176:20 - to work on this some more.
176:22 - Yeah, absolutely.
176:23 - I'll just throw a little
point on the end of that.
176:25 - I was talking in the
chat, I was mentioning
176:27 - that people are bringing up
neural network controllers.
176:30 - And it is a great
compliment because even some
176:32 - of the really coolest
robots you see
176:34 - that are using
reinforcement learning,
176:36 - there's a beautiful
example of taking
176:38 - the Cassie robot,
this biped, and people
176:41 - use reinforcement learning
to train a good walking
176:44 - controller.
176:45 - It's amazing.
176:45 - What they're doing,
the neural network
176:48 - is-- what it's producing are
the desired values for a pd
176:51 - controller.
176:52 - That's what it's doing.
176:54 - They work together, and
that's really effective.
176:58 - Great.
176:59 - All right.
176:59 - So is there-- so I'm just
going to go-- thank you--
177:01 - I'm just going to go over
here just to show quickly--
177:03 - I've zoomed in here.
177:04 - This is currently what's
in the video description.
177:07 - You can find Christian's
Twitter, Instagram, Twitch,
177:10 - and YouTube channels here, so
please go and follow Christian.
177:16 - We are both on Twitter.
177:18 - I plan on definitely sharing
some of the results here,
177:20 - so maybe we can
get a thread going
177:21 - with some additional links
to explanations or examples.
177:25 - And if you've made
something, there's
177:26 - no page on the
Coding Train website
177:28 - currently for this live stream--
177:30 - I might have one in the
future, and there's a way
177:32 - that you can submit
things-- but stay
177:34 - tuned because I will be
releasing a GitHub repository
177:38 - and updating this video's
description with links
177:42 - to all of these materials in
case you want to make your own.
177:44 - And I always say this,
but very little in life--
177:47 - there's lots of things
that make me happy,
177:49 - but one of the things that
makes me happiest in life
177:51 - is when somebody sees
something in a video
177:53 - and makes their
own version of it.
177:54 - However, whether--
even if you just
177:56 - made it and you
changed the colors
177:57 - and you added a little
design of a cart, like,
178:00 - think-- just, whatever
kind of creative fun
178:02 - you can have with
this-- don't worry
178:03 - about accuracy of the
physics of the simulation.
178:05 - Just have fun with it, play
with it, and share that back.
178:08 - I would love to see what you do.
178:09 - Is there anything else you want
to say or plug or point people
178:12 - towards before we-- oh, I know--
178:14 - I know I'm [INAUDIBLE],, but one
thing I did want to ask is--
178:17 - because I do know that I do
have a lot of students who watch
178:21 - the Coding Train, whether
they're in high school
178:23 - or an undergraduate--
178:25 - so if people are interested
in the field of robotics
178:29 - or mechanical engineering,
where would they look?
178:32 - What would you point them
towards in terms of your lab
178:35 - and your program
that you teach at,
178:37 - would be one nice
thing to wrap up.
178:40 - No, it's great.
178:40 - So I'm an assistant professor
of Mechanical Engineering
178:43 - at the FAMU FSU College of
Engineering in Tallahassee.
178:46 - So it's a joint college between
Florida A&M University, which
178:49 - is a historically Black college
and university, and Florida
178:54 - State University, which
is a wonderful R1 research
178:56 - institution.
178:57 - So I'm down here in Tallahassee.
178:58 - You take engineering courses,
you might take them from me.
179:01 - You can find me on my personal
website at ChristianHubicki.com
179:04 - C-H-R-I-S-T-I-A-N. Hubicki.
179:07 - H-U-B-I-C-K-I. And
you can find me there.
179:11 - I've actually-- I give
public lectures as well.
179:14 - Sometimes people pull me up--
and this is my laboratory,
179:16 - the OptimalRoboticsLab.com.
179:18 - And so that's where you
can find some of my work,
179:21 - and this is one of our
robots walking around.
179:22 - And feel free to
reach out to me.
179:25 - You could find my contact
information on my website,
179:27 - and of course,
through Twitter, which
179:29 - is at @CHubicki, which I believe
is Chewbacca's younger brother.
179:35 - Awesome.
179:35 - All right.
179:36 - Wonderful.
179:37 - Thank you so much
for being here.
179:38 - This was great.
179:39 - I'm so glad the tech
seemed to all work.
179:41 - Thank you to everybody
for watching.
179:43 - I don't have any
particular updates
179:47 - about when the next
live stream will be
179:48 - or when the next videos are
coming out, but hopefully
179:50 - something next week.
179:51 - You can-- everything--
179:52 - I always announce everything
on the Coding Train Discord,
179:55 - so you can go to the
CodingTrain.com/Discord,
179:58 - join the Discord channel.
179:59 - If you sign up for the
notifications role,
180:02 - you'll get pings if you want
for when I'm scheduling things.
180:05 - And I just appreciate
all of you watching.
180:07 - Please go and enjoy
making your own p--
180:10 - do something else.
180:10 - Maybe take a break
from your computer.
180:12 - It's been, like, many hours.
180:13 - But when you come back to it,
if you make a PID controller
180:17 - in Python or in p5
or Unity, again,
180:19 - share it with us on Twitter.
180:20 - And I look forward to seeing you
next time on the Coding Train.
180:24 - All right.
180:24 - I'm going to go
to the end screen.
180:26 - And a little music here.
180:30 - [MUSIC PLAYING]
180:31 - And my mic is now going to mute.
180:33 - Goodbye, everybody.
180:34 - [MUSIC STOPS]
182:46 - Sorry, everybody.
182:47 - The music is not on.
182:48 - I don't know why.
182:51 - [MUSIC PLAYING]
182:59 - Oh, well.
183:00 - Sorry, everybody.
183:00 - There won't be any music
in the outro today,
183:02 - but I'm going to shut
this down soon anyway.