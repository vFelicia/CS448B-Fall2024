00:02 - in this video we're going to look at the
00:03 - cotch curve and ask ourselves the
00:05 - question if we're using recursion to
00:08 - generate a fractal pattern what if we
00:10 - want the parts of that fractal pattern
00:12 - to move or change or animate or do
00:14 - something after that pattern's been
00:15 - generated if you go back and look at the
00:18 - previous two examples we made it
00:20 - wouldn't be so easy to do that the
00:22 - recursive function just kind of draws
00:24 - all that stuff to the screen and it's
00:25 - just there we don't have access to all
00:27 - of those positions but there's a way
00:30 - that we can do that let's first start
00:32 - though let's use a diff why not let's
00:33 - use a different fractal this time and
00:35 - we're going to use the cotch curve so
00:37 - the cotch curve has uh is has has some
00:39 - similarities to the caner set which we
00:41 - just looked at um the cotch curve which
00:44 - can be used to make nice little
00:45 - snowflake patterns incidentally is we we
00:48 - also start with a line start with a line
00:52 - so here's our
00:54 - line now what do we do we also the next
00:58 - step is
01:01 - divide the line into thir so the same
01:07 - thing we divide it into thirds this is
01:09 - just what we did with the caner set but
01:12 - now what do we do we erase boy this
01:15 - looks really the same erase the middle
01:20 - third okay I get my Eraser here erase
01:23 - that middle third and then the last
01:26 - thing that we do though however is
01:28 - connect
01:31 - middle section there's probably a better
01:33 - way to write this with an
01:37 - equilateral
01:38 - equilateral
01:40 - triangle so this is the last step what
01:42 - do I mean connect the middle section
01:44 - with an equilateral triangle what does
01:45 - that mean it means right we could
01:49 - imagine an equilateral triangle sitting
01:52 - there where each side is the same length
01:55 - of that third but we're not going to use
01:59 - the bottom so we're going to connect it
02:01 - like so so I guess connect the middle
02:04 - section with this sides with two sides
02:07 - of the equilateral triangle so that's
02:09 - our production rule we went from one
02:11 - line and at the end we got to this and
02:14 - what do we have now we have four lines
02:17 - what do we do with each one of those
02:19 - erase the middle third erase the middle
02:21 - third erase the middle third erase the
02:22 - middle third make and I didn't do this
02:24 - very well but make an equilateral
02:26 - triangle make an equilateral triangle
02:28 - make an equilateral triangle make an
02:29 - equilateral Tri go hey let's do that
02:31 - again erase all that we have 1 2 3 4 5 6
02:34 - 7 8 N9 we could do that over and over
02:36 - again this is a fractal you could figure
02:38 - out you could go look at that caner set
02:40 - example you could expand it a little bit
02:42 - and do a little more math and you could
02:44 - be you could have the cotch curve but we
02:47 - want to do something slightly different
02:50 - what if we now want all the pieces of
02:52 - that cotch curve to move what if we want
02:56 - all of these line segments essentially
02:58 - to be objects objects that could have
03:00 - physics after all we spent all this time
03:03 - figuring out a lot of physics stuff we
03:04 - might as well figure out a way that we
03:06 - could apply it to a fractal shape not
03:08 - all scenarios do you need this certainly
03:10 - if you're doing a print design and you
03:12 - just need a static fractal pattern
03:14 - through some recursive algorithm you
03:15 - could make it but this is an important
03:17 - consideration that does come up in a lot
03:18 - of different scenarios so how are we
03:20 - going to do this and I call this because
03:23 - I've come up with lots of fancy names
03:25 - the array list technique um okay so what
03:28 - do we mean by this array list technique
03:30 - what's the
03:32 - difference well let's say for a
03:35 - moment that we had an array list
03:41 - ah and we're back that we had an array
03:45 - list uh that's the other camera I'm G to
03:47 - have to fix that that we had an array
03:48 - list and inside and we have
03:51 - also we have a line object a line object
03:56 - maybe just has a two P vectors A Star
04:00 - start and an end so we have this line
04:03 - object and it has a start and an end and
04:06 - we have this array list and what do we
04:08 - do is that we put that line into that
04:11 - array list we make a line object and we
04:13 - put it into the array list the recursion
04:16 - isn't a function that calls itself it's
04:19 - going to be an array list that iterates
04:21 - over itself so this is the array list we
04:24 - can say at generation zero in a way at
04:27 - the very beginning what do we start with
04:29 - we start with one line object and now we
04:31 - say hey in this array list let's take
04:34 - this line object use its start point and
04:37 - endpoint and figure out what are all the
04:39 - points for the next line object and then
04:42 - we have one two the array list suddenly
04:46 - has four line objects in it and it's now
04:49 - at generation one then it's going to
04:51 - have 16 line objects in it if I did the
04:54 - math correctly it's at generation two
04:56 - whatever the state of the array list is
04:58 - we're going to iterate over all of the
05:01 - elements and for each element in the
05:03 - array list produce four new elements and
05:07 - I the way that I drew this I'd like to
05:08 - draw it a slightly different way
05:11 - remember when we did if you go back and
05:12 - look at the cellular cellular automata
05:15 - videos we had this idea of a of a
05:18 - generation and we're going to do the
05:20 - same exact thing we have an array list
05:22 - which is essentially
05:24 - current and it might be represented by
05:27 - this singular line and then we're going
05:29 - to have an array list which is
05:33 - next and we're going to use that line to
05:36 - generate the next array list which will
05:38 - have four line objects in it and then
05:42 - that
05:43 - becomes the current one and we could do
05:46 - it again and again and again okay I hope
05:50 - this is somewhat
05:52 - clear um so I I but I have no way of
05:56 - knowing other than my own sometimes in
05:59 - accurate intuition but let's take the
06:01 - next step forward and look at this in
06:02 - the actual code and see if we can
06:04 - understand it a little bit
06:06 - better ah okay Darkness
06:10 - sadness
06:11 - light happiness okay I'm back camera was
06:16 - off so first let me just run this and
06:17 - we're going to see it in action so here
06:20 - is the first line right and notice
06:23 - here what do we have we do have a cotch
06:26 - I called it a cotch line right a cotch
06:29 - line object which has two P vectors
06:31 - start and end okay and now if I go back
06:34 - to the main tab we can see hey what are
06:37 - we doing we are making a cotch line
06:41 - first at Z comma height minus 50 and
06:43 - then at width comma height minus 50 we
06:45 - add that to the array list and then hey
06:48 - there's one line let's display
06:50 - it and there we go just that one line
06:53 - now notice
06:55 - also that um in there's a key press
06:58 - function right here which calls a
07:00 - function called generate so when I press
07:02 - a key there you are that's the camera
07:04 - when I press a key look I generate the
07:06 - Next Generation I took those that one
07:09 - line and somehow turned it into four
07:11 - then I took those lines and turned each
07:13 - of those into four again and again and
07:15 - again and I could do this to Infinity
07:17 - but you can see there's a limit to the
07:19 - kind of resolution we have here and how
07:21 - much look at this interesting kind of
07:23 - quality that we've got already this
07:25 - giant arrow whoa um okay so we can see
07:28 - that this works Works we're getting the
07:30 - fractal pattern we could imagine that
07:32 - there's some math involved in how do we
07:34 - take that one line and turn it into four
07:36 - but rather than look at the math let's
07:38 - actually look at the guts of this
07:39 - generate function and see if we can
07:41 - understand what it's
07:43 - doing so here is all that code and I
07:46 - want to talk through it in a moment but
07:48 - first of all it looks a little bit like
07:50 - gobleg so let's kind of clear up one
07:53 - aspect of it look for every line get
07:55 - points a b c d and e and make a bunch of
07:57 - new lines let's see if we can make sense
07:58 - of that for for a
08:03 - second right if this was our original
08:06 - line and
08:08 - this is what we're going to get right
08:11 - this is start and this is end and what
08:15 - do we need to make these four line
08:16 - segments we need all of these points so
08:19 - we need to calculate a b c d and e and
08:24 - we can call this I don't remember what I
08:26 - said in the code uh A B C D and E okay
08:29 - that's all I did so we need to get
08:32 - all how many points is this five points
08:35 - if we have start and end how do we get
08:37 - all five points and then we can make a
08:39 - new cot line that's between a and b and
08:42 - a new one that's between b and c and a
08:43 - new one that's between c and d and a new
08:45 - one that's between D and and all of
08:47 - those line objects should go into our
08:49 - array
08:50 - List look that's exactly what's going on
08:52 - here for every line we know when we
08:54 - started there's just one but for every
08:57 - line let's ask each line object where
08:59 - where's your A B C D and E points then
09:01 - let's make a line from A to B A line
09:03 - from B to C a line from C to d a line
09:05 - from D to e and add those all to the
09:07 - array list next next is the new
09:09 - generation lines is the current
09:12 - generation but once we make the Next
09:13 - Generation the Next Generation becomes
09:16 - the current generation right that's what
09:17 - we're drawing we're drawing all the
09:19 - current lines so when we start current
09:22 - lines is one line then we generate we
09:25 - make the next array list with four lines
09:27 - and that becomes lines and we see all
09:28 - four of those there okay so this is the
09:31 - process again it would be worth digging
09:34 - into the math behind getting all these
09:35 - points but that's not what I'm concerned
09:37 - with right now I'm concerned with this
09:39 - overall
09:41 - process which I think I've kind of
09:43 - covered well I was going to say one more
09:45 - thing about it but now I forgotten okay
09:47 - so so this is um what's going on so
09:50 - let's actually okay sorry let's just
09:52 - briefly pause and take a look at how
09:55 - those points are calculated because I
09:57 - think it's it's something worth looking
09:58 - at you can see that some of them are
10:00 - quite simple right
10:05 - a point a is exactly the start Point e
10:09 - is exactly the end and if we go back
10:11 - into the code we can say A and E are
10:14 - quite
10:15 - easy point B is not that hard either
10:18 - right point B is just hey it's a point
10:21 - 13 of the length from the start sorry
10:25 - 1/3 of the length from the start that's
10:28 - point B and we can see here we're just
10:30 - using reviewing our old Vector math days
10:32 - we make a point from but we make a
10:34 - vector that goes from the start to the
10:36 - end we divide it by three and we move
10:38 - from the start and that's that location
10:40 - so you can see C is a little bit harder
10:43 - what do we have to do is C we have if
10:45 - we're here we can make this Vector we
10:47 - can rotate this Vector 60° and then move
10:50 - from here to there and that's that point
10:52 - right the angles in an equilateral
10:54 - triangle if you don't remember if you
10:55 - make a triangle each side being equal
10:59 - each angle is
11:00 - 60° maybe I didn't want to go over this
11:02 - math stuff but I just kind of talking
11:04 - you through it very quickly you can see
11:06 - that's what's going on start at the
11:07 - start divide by three go to there then
11:10 - rotate that vector by 60° and then go
11:12 - from there so again the part of this
11:15 - process of making a fractal pattern is
11:17 - kind of mapping out the shape and seeing
11:19 - if you can figure out how to turn that
11:21 - shape into vectors so that you can
11:23 - subdivide move along get to this point
11:25 - that's what we're doing but okay so I
11:27 - just wanted to briefly point that out
11:28 - whoops but back to back to this so why
11:33 - did we go through all that trouble after
11:35 - all all I have on the screen is my
11:38 - static fractal shape but we now have if
11:42 - I go into this if I zoom
11:45 - in every single one of these line
11:47 - segments is an object and I know it's
11:50 - beginning point and it's end point I
11:51 - could grow flowers from there I could
11:54 - suddenly put characters at all those
11:55 - points I could have them all wiggle and
11:58 - move around let let's try that right
12:00 - what would it mean to add a function
12:02 - here right the cotch the cotch line is a
12:05 - start and an end first of all I could
12:06 - start adding physics I could add
12:07 - velocity I could acceleration I add an
12:09 - apply force method but we're not going
12:11 - to go that crazy all we're going to do
12:12 - is we're going to add a function I guess
12:13 - I'll do it towards the top which is just
12:16 - called Wiggle and what I'll do is I'll
12:19 - say hey give me a random velocity a
12:22 - random Vector which I'll consider a
12:24 - velocity and then
12:26 - hey add that velocity to the start point
12:31 - right so that's wiggling and I'm only
12:32 - wiggling the start point you know you
12:33 - can wiggle the end point will probably
12:34 - be more interesting looking but let's
12:36 - just anytime I wiggle I'm just moving
12:38 - that start point and okay I can't resist
12:42 - let's get another random vector and
12:45 - let's also wiggle let's also move the
12:47 - end point so what we're doing is we're
12:49 - making two random vectors and adjusting
12:50 - the start and end location so now if I
12:53 - go back to the draw and if I want to say
12:57 - hey when the mouse is
13:01 - pressed let me also Loop
13:05 - through and Wiggle all the lines so
13:08 - right here I'm just adding a little bit
13:10 - of code that anytime I click the mouse
13:12 - whatever lines happen to be the array
13:13 - list move them around so I could run
13:16 - this sketch and it's not doing anything
13:18 - different it's exactly what it was
13:19 - before and I could also run it but I
13:22 - could also click the mouse and look this
13:24 - line is kind of moving it around once
13:26 - that line moves around I could go a few
13:28 - more gen ations and look those lines can
13:30 - now move around but I could continue
13:31 - doing the fractal and those lines could
13:33 - move around so we've kind of completely
13:35 - we haven't completely lost the shape of
13:37 - the fractal but it's gone a little bit
13:38 - arai but and now we have some like weird
13:41 - Randomness and maybe I could wiggle it
13:42 - but actually remember which objects end
13:45 - point is actually the start point of the
13:46 - other object which would be super
13:47 - interesting there's a great exercise for
13:49 - you to try um but this is the power of
13:52 - what we're doing all these fractal
13:54 - shapes that we've created if we make the
13:56 - parts those broken parts that are
13:58 - approximate the whole shape if we make
14:00 - those objects in an array list then we
14:02 - can start to apply things to them or
14:04 - know all the positions to generate
14:06 - things from those locations there's lots
14:08 - of things we can do all right I think
14:10 - that's the end of this particular video
14:12 - um I've got two more things to look at
14:14 - one is what happens if we want to
14:16 - translate and rotate in the process of
14:18 - making this fractal shape it's kind of
14:19 - interesting and also I want to look at
14:22 - this concept of an L system which is a
14:24 - recursive algorithm for generating um
14:27 - sequences of characters that can be
14:29 - instructions for drawing so those are
14:30 - the two other things we'll look at um
14:32 - soon
14:33 - enough uh okay