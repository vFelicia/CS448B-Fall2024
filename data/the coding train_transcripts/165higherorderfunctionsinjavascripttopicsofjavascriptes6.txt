00:00 - hello welcome to another video that I'm
00:03 - in I just leaked so many videos but this
00:05 - is another one I'm actually really quite
00:07 - excited about this I'm going to talk
00:09 - about in this video something called a
00:11 - higher-order function as if you followed
00:16 - my tutorials and things over the years
00:18 - I'm kind of like an old Java programmer
00:22 - well probably the language they've
00:23 - programmed the most in is Java and
00:25 - specifically processing which is a
00:28 - development environment built on top of
00:29 - Java that I use and so I really was
00:32 - taught and have learned and have
00:33 - practiced like object-oriented
00:35 - programming to programming I'm just
00:36 - going to programming a burning program
00:39 - but there is this thing called
00:40 - functional programming which is very
00:42 - popular and interesting and I want to
00:45 - dip my toe a little bit and javascript
00:47 - is a language where functions are the
00:51 - sort of primary building block of the
00:52 - language and there's lots of thing and
00:53 - of course you can do this I know in Java
00:55 - now with like Java 72 whatever version
00:58 - is now one hundred and thousand 51 but I
01:02 - want to look at this idea of a
01:03 - higher-order function and kind of kind
01:05 - of wade into this idea of functional
01:06 - programming a bit more
01:08 - now this video is appearing in my es6
01:11 - playlist even though some of the stuff
01:13 - that I'm gonna use is not es6 specific
01:16 - but it's useful to have it here because
01:17 - I'm going to use in these tutorials also
01:19 - this particular syntax known as the
01:22 - arrow syntax or the arrow function and
01:24 - I'm going to use that not only available
01:26 - in JavaScript es6 and if you are
01:29 - confused about what the arrow function
01:30 - is magical tutorial about that in a
01:34 - separate video and I think I talked
01:36 - about es6 for cs5 which are different
01:37 - versions of JavaScript there okay so
01:39 - what is I'm going to attempt to define
01:41 - what a higher-order function is and I
01:45 - would I like to think about it just like
01:47 - well there's a function I could define a
01:49 - function like this function hello and
01:55 - then I could write console.log hello in
01:58 - there and that's a function it's a named
02:00 - block of code that I can execute by
02:03 - calling the name of the function there's
02:06 - lots of ways to declares functions in
02:07 - JavaScript in but he has six syntax and
02:09 - I could say var hello equals or let
02:11 - Hello equals are constant
02:13 - equals so many possibilities this is not
02:15 - a higher-order function because it is
02:17 - just a function on its own on the level
02:19 - playing field of functions a
02:21 - higher-order function is a function that
02:24 - kind of has two levels of functions
02:27 - through its are more than two in other
02:29 - words what if this function expects as
02:32 - its argument another function so you're
02:36 - calling this function and sending it a
02:38 - function that's a higher order function
02:40 - or what if this function actually makes
02:43 - it function or returns one back to you
02:46 - somehow
02:47 - that is also a higher order function so
02:50 - any function that either takes a
02:51 - function as input or sends a function
02:53 - out as output that is known as a
02:55 - higher-order function and you can do all
02:57 - sorts of cookie interesting things that
03:00 - can that look kind of fancy that could
03:02 - be fun but also can make your code easy
03:04 - to write so I the reason one of the
03:07 - reasons why I'm doing this is there are
03:08 - a lot of higher-order functions
03:10 - available for JavaScript arrays and
03:12 - those are really useful let me name a
03:14 - few of them map sort reduce filter so in
03:23 - the subsequent videos that are following
03:25 - this one I'm going to start going
03:27 - through these functions and it's my goal
03:29 - to actually then tie these functions
03:31 - into a particle system example because I
03:36 - want to look at well you know I can look
03:38 - at the how these stuff works and just
03:39 - put numbers in it but what might be an
03:40 - actual real life scenario in the sort of
03:42 - creative coded graphics world that I
03:44 - might use them in so this is the whole
03:46 - landscape here I'm gonna start with just
03:48 - basic higher-order functions I'm gonna
03:51 - write a couple like goofy trivial
03:52 - examples I'm gonna stop let me come back
03:55 - and start going through higher-order
03:57 - array functions and then try to like tie
04:00 - that into a particle system that's my
04:01 - plan sounds fine
04:02 - I think it's okay alright so let's try
04:05 - to look at this idea of passing a
04:08 - function to a function or returning a
04:10 - function from a function so let's I have
04:12 - a sort of empty bit of code here I've
04:14 - got the p5 library loaded I don't need
04:16 - it for a minute demonstrate but it has a
04:17 - nice set up function which is like the
04:19 - window.onload function so i like to have
04:22 - that available to me i don't actually
04:24 - need to do this and set up a
04:25 - going to anyway alright so let's say
04:27 - we're to define a function and I'm going
04:30 - to call it sing and in the function I'm
04:38 - going to say la la la la and then when
04:44 - I'm done okay let's just do that
04:47 - okay this is my function sing oh I got
04:50 - to making it I got to make it in the
04:52 - global space so I can call it from the
04:53 - console the set of functions totally
04:55 - irrelevant at this point I know why I
04:56 - talked about that so I have this
04:58 - function called sing so now I'm gonna go
05:00 - over here and I'm gonna say sing song so
05:03 - I'm Bobo go sing ah I reload the page
05:06 - I think la la la la la all right now
05:09 - craziness what if I were to define what
05:14 - if I were to say hey this function takes
05:17 - as an argument another function and that
05:19 - might be called like a callback and when
05:22 - I finish singing I execute that function
05:24 - so you can think this might this this is
05:26 - might be code that you've never written
05:28 - yourself but it's code that's happening
05:30 - all the time in JavaScript libraries
05:32 - that you use because a lot of times you
05:34 - say hey load this JSON and here's a
05:36 - callback or do this but apply it with
05:38 - this function so this is the idea of if
05:40 - you could send in a function right the
05:43 - parentheses aren't here right because
05:46 - this is actually the name of a variable
05:48 - the name of the function it's a
05:49 - parameter to sing is callback and if
05:53 - that is a function I can execute that
05:56 - function here so in other words I could
05:57 - say now in setup I could say I could
06:01 - make my own function sing what would be
06:05 - so what something besides singing check
06:07 - it - meow and I'm gonna say console dot
06:10 - log meow meow and then I'm gonna say
06:15 - sing meow
06:17 - actually let's just let's do this all in
06:19 - the car I'm gonna put this here and then
06:24 - I'm in here write one thing now what
06:26 - happens if I call sing it says callback
06:29 - is not a function so I didn't pass that
06:31 - parameter so I have to now say sing meow
06:36 - then
06:37 - I'm giving it the meow function so sing
06:39 - lalala and then it executes that meow
06:42 - function now I could be sort of
06:44 - thoughtful about this and I could say
06:45 - like oh only call the callback if it
06:51 - exists what did I get wrong here whoops
06:55 - so now I could do some error checking in
06:58 - my function so I could do this and it's
07:01 - okay for me to say sing it just does
07:03 - lalala
07:03 - or I could say sing and then act when
07:06 - you're done execute meow and if I wanted
07:08 - to be really really really careful about
07:10 - this I think I could say as long as it's
07:11 - an instance of a function who knows if
07:14 - that's right so I could say sing meow
07:18 - and then sing and it would still work so
07:20 - this is this idea of being able to call
07:23 - a function from a function okay I should
07:27 - also mention that I'm kind of writing
07:29 - this code in a very long-winded way
07:30 - where I'm naming all of my functions and
07:33 - this is not what you would typically see
07:35 - as JavaScript programmers do and
07:36 - eventually I'm gonna be like peeling
07:38 - this away and having anonymous functions
07:39 - and eventually getting to this arrow
07:41 - function again so for example just to
07:43 - make this case clear probably in another
07:45 - way that I might do this is say oh I
07:47 - want to call sing and then I just want
07:50 - to add pass in another function to it so
07:56 - you can see here this is me calling the
08:00 - function sing and giving it an argument
08:01 - which is all this code which is a
08:03 - function definition with no name an
08:05 - anonymous function and this might look
08:07 - even more clear to you if I do this
08:11 - right you can sort of see like this is
08:13 - the whole argument being passed in
08:16 - between those other sluggy those other
08:19 - two parentheses so that's a whole
08:20 - function definition just being passed
08:22 - right in and you know spoiler alert I
08:25 - could kind of write it like this with
08:26 - arrow but we're gonna get back to that
08:28 - later
08:28 - we're gonna come to come back to the
08:29 - arrow function later okay so one more
08:31 - thing let's try so this is a function
08:33 - that you're passing a function another
08:35 - thing you could do is I could have a
08:37 - function return a function some might
08:39 - even call that like a function factory
08:44 - or something you love factories okay so
08:48 - let's get rid of this and I'm gonna use
08:50 - a pretty standard exam
08:51 - it's probably one that you would find in
08:52 - countless other tutorials and I'm gonna
08:55 - write a function called multiplier I'll
08:57 - show you why this is useful and what
08:59 - this function well first of all let me
09:00 - just quote write a function called
09:01 - multiplier and give it an argument
09:04 - called factor given an argument called X
09:07 - and an argument comes factor and I'm
09:09 - gonna return x times factor so this is a
09:13 - general function that's just going to
09:15 - take two numbers and multiply them
09:16 - together so if I load the page here I'm
09:20 - gonna say multiplier X 5/2 and what
09:23 - should I get nothing
09:26 - oh I spelled it wrong multiplier 10 if I
09:31 - say multiplier 3 comma 927 make a little
09:36 - calculator here okay but what if I want
09:39 - to actually create different functions
09:41 - that multiply by different factors so
09:43 - instead of instead of having X here what
09:48 - if I just said return a function that
09:51 - receives X and multiplies it by some
09:54 - factor look at this the multiplier
09:57 - returns a new function that uses the
10:01 - factor that was passed in whoa so in
10:03 - other words what do I mean by this I can
10:05 - now say whoops and I'm just using the
10:10 - console here so let me get more space
10:11 - here let me make this a little bigger I
10:13 - can now say let let doubler equal
10:18 - multiplier - whoa what is doubler now
10:24 - right I didn't get it is it a number
10:27 - dime multiply something No
10:28 - I created a function I created a
10:31 - function that uses the number that
10:35 - returns x times two so if I were to say
10:37 - let Tripler equal multiplier three now
10:44 - I've created a function right we can
10:45 - actually just double check let me just
10:47 - say whatwhat's doubler is look this is
10:48 - what doubler is now it's still showing
10:51 - the factor here but really inside that
10:53 - function it's holding on to that number
10:55 - two that was passed in so in other words
10:57 - if I were to say doubler four what am I
11:01 - going to get
11:04 - no I messed something up what did I do
11:06 - wrong
11:07 - oh it doesn't say oh this has to say ah
11:09 - oh oh I have a mistake look at this I
11:13 - wasn't paying attention to what I was
11:15 - doing this is a fine mistake for me to
11:17 - have right it didn't return anything
11:18 - undefined
11:19 - I forgot to also have the return here so
11:22 - this is kind of weird looking but this
11:24 - multiplier function makes a function
11:27 - that returns X x factor so now if I
11:31 - start over here and I say let doubler be
11:36 - a multiplier create a function with a
11:38 - factor of two and let Tripler be a
11:41 - create a function with a factor of three
11:43 - now I can say doubler four and I get
11:49 - eight or I can say Tripler four and I
11:52 - get twelve okay so this is this idea of
11:55 - higher-order functions Oh all right
11:58 - actually two things that I forgot number
12:00 - one is this can also be this is also an
12:03 - example of a closure meaning that when
12:05 - you create this function by passing in
12:07 - factor this like kind of close your
12:08 - bubble lives on and the value of factor
12:11 - is retained even though it's sort of
12:12 - technically a local variable just to
12:14 - this function multiplier so this is a I
12:16 - have another video all about JavaScript
12:18 - closures and this is an example of that
12:19 - as well and then I forgot this is a case
12:23 - where I can use the arrow function to
12:26 - make this look you know nice and clean
12:28 - and simple and I'm very torn about this
12:31 - because on the one hand the arrow
12:32 - function can make code look very cryptic
12:34 - and confusing on the other hand it can
12:35 - really simplify things so let's let's
12:37 - talk about that for a second so what
12:39 - what does the arrow function do so this
12:45 - is actually if I just rewrite this
12:46 - function down here this is what I've
12:49 - written so the arrow function you can
12:51 - watch my arrow function tutorial allows
12:53 - me to first of all instead of saying the
12:55 - word function I can delete the word
12:57 - function and I can put the arrow here so
13:00 - this is a function definition with one
13:02 - argument X and this is the code that the
13:04 - function executes now interestingly
13:05 - enough if there's only one argument X I
13:09 - don't need the parentheses so if there
13:11 - were two if this were a function that's
13:13 - like multiplying two things I have to
13:15 - keep those parentheses but if there's
13:16 - only one I don't need
13:18 - so now I've simplified it like this it
13:21 - also so happens that if there's only one
13:23 - line of code in that function you don't
13:25 - need the curly brackets the curly
13:27 - brackets can be assumed and I can now
13:29 - write it like this and guess what if
13:32 - there's only one line of code the return
13:36 - is assumed so I can actually get rid of
13:39 - this return so actually this is a
13:41 - completely identical way to write the
13:44 - function up here so what this can
13:48 - actually be now is this so this is what
13:53 - I mean this you might look at this to be
13:55 - like what in the world is it doing but
13:58 - after you use and I can speak from
14:00 - experience because arrow functions were
14:01 - brand new to me like less than a year
14:03 - ago but after you used them more and
14:05 - more it starts to seep into your brain a
14:07 - little bit like whether you're doing
14:09 - list of mental gymnastics translate it
14:10 - back or it's just kind of intuitive but
14:12 - there is a nice quality to saying like
14:14 - almost like X transforms into X x factor
14:17 - and it's it's confusing is that that
14:19 - return is returning a function but that
14:21 - function is returning X x factor so
14:23 - let's take a look hopefully I got this
14:25 - right let's take a look at this and I'm
14:27 - in a refresh here and I'm gonna did I
14:31 - save I'm gonna save and refresh and and
14:34 - what I'm actually gonna do is let's just
14:35 - put this in the code let's just say let
14:38 - multiplier equal oh sorry let doubler
14:43 - equal and let's get rid of this should
14:47 - not be here let double or equal and I
14:53 - can I don't need the setup function
14:54 - being so silly
14:55 - let double or equal a multiplier to let
15:01 - Tripler equal multiplier 3 oh and I
15:06 - gotta have the eye there okay so now I
15:09 - made those two multiplier functions
15:11 - refresh okay double or four I get eight
15:14 - and Tripler four I get twelve so
15:16 - wonderful look at that lovely use of the
15:18 - arrow functions and higher-order
15:19 - functions so what I'm done now with this
15:22 - video what I've really just discovered
15:24 - here basically is that a higher-order
15:25 - function is a function that either we
15:28 - see
15:28 - function as a callback and if you're
15:29 - writing a JavaScript library and you're
15:32 - asking people to call functions that
15:33 - happen asynchronously this might be
15:35 - something you provide as an option okay
15:36 - if you send me a function I'm the
15:38 - librarian I will execute that function
15:39 - for you to let you know when I'm done so
15:41 - that's a very useful technique that
15:43 - you'll see in p5 and all sorts of
15:44 - JavaScript libraries so receiving a
15:46 - function as input or returning a new
15:48 - function just like I demonstrated with
15:50 - that multiplier function so that's the
15:52 - basic idea now I am NOT going to write
15:54 - my own higher-order functions right in
15:56 - the next videos I'm just gonna make use
15:58 - of some useful ones that happen to live
16:00 - in the JavaScript array object so I
16:04 - don't know which one I'll start with
16:05 - tune in to the next video to find out
16:07 - wound suspense and I'll see you then
16:09 - thanks for watching
16:15 - [Music]