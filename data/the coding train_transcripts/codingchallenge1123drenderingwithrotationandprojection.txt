00:00 - (train whistle blowing)
00:00 - - Hello, welcome to a coding challenge!
00:04 - And I can summarize this coding challenge
00:07 - very quickly in one sentence!
00:09 - This is a spinning cube.
00:12 - It is a three dimensional cube
00:14 - that you are seeing on your
two dimensional screen.
00:17 - I am able to create this
three dimensional cube
00:20 - because I am using the P3D renderer,
00:24 - processing, Java based, creative coding,
00:26 - development, platform thing.
00:28 - I can make 3D stuff using
the P3D rendering engine
00:31 - and then functions like box,
and rotate X, and rotate Z,
00:37 - and that is how I get this!
00:40 - But how does this really work?
00:41 - How does the processing
even make this happen?!
00:44 - I am going to do the
most basic, simple thing.
00:46 - I am going,
00:47 - I said one sentence and
I'm like 12 sentences,
00:50 - I'm like 200 hundred sentences in
00:51 - if I'm being perfectly honest.
00:52 - I am going to change this from P3D to P2D.
00:57 - I'm going to eliminate all of
the 3D rendering capabilities.
01:02 - I'm not gonna allow
myself to use any of them,
01:04 - and yet I'm going to
01:05 - recreate exactly the same digitalization.
01:09 - I'm going to do matrix rotations,
01:13 - projections, those sorts of things.
01:15 - So this is not gonna be comprehensive,
01:17 - like how to build a 3D engine
with ray casting, ray tracing,
01:21 - and lighting, and shadow, and
sorts of complicated stuff.
01:26 - I'm gonna just do the basics,
01:27 - just to create this 3D
illusion in 2D really because,
01:31 - because if I can use the P3D,
01:35 - if I can create the 3D illusion
and render it into 2D space,
01:40 - what if I create a 4D shape
01:44 - and then render it into P3D space, right?
01:47 - If I can project a 3D
object into 2D space,
01:50 - there's no reason why I
couldn't project a 4D object
01:53 - into 3D space.
01:55 - (making explosion sound)
01:57 - and then I dunno, I dunno,
my computer's gonna melt,
02:00 - and I'm never gonna make any videos again.
02:02 - But (jokingly yelling)
let's just stick with this!
02:04 - Okay so let's begin coding.
02:06 - So I am going to take out,
02:08 - I'm gonna hit save,
02:10 - and I'm gonna take out
all of this 3D stuff.
02:11 - I'm gonna leave translate,
stroke, strokeweight, noFill.
02:16 - I'm not gonna be able
to use these anymore.
02:18 - I'm not gonna be able
to use these anymore.
02:19 - I'm gonna leave all this,
02:20 - and I'm in P2D.
02:21 - Actually, I'm gonna take out P2D (mumbles)
02:24 - The default renderer is also a 2D engine,
02:27 - so I don't need to actually say P2D.
02:28 - Now, I should also mention that I,
02:31 - in this particular video,
02:33 - I'm making use of a few functions
I've previously written.
02:36 - (laughing) I actually might have a video.
02:39 - I definitely did it on a livestream,
02:40 - so either way in the video
description I'm gonna link to
02:42 - where you can watch me
code all these functions.
02:45 - But what these functions are for
02:47 - are for certain matrix
operations that I'm going to do.
02:51 - Don't worry,
02:53 - I will talk about what
they are when I use them.
02:57 - So the first thing that I wanna do is
02:58 - lemme just get some points on the screen.
03:02 - Hmm, how am I gonna do this?
03:03 - Let me make a,
03:05 - so I'm gonna make pretty heavy
use of the PVector object,
03:09 - and I'm gonna say,
03:10 - I'm gonna make an array of Pvectors
03:13 - that just has four points in it.
03:17 - And I'm gonna say points
index zero is a PVector at,
03:24 - and I'm just gonna build a little square.
03:26 - So I'm gonna say the first
one is like at -50, -50,
03:31 - and then second, third, fourth,
03:36 - is at 50, -50, then 50, 50, then -50, 50.
03:43 - These should be the
four points of a square.
03:47 - So, what I wanna do here now is just say
03:50 - for every vector in points,
03:57 - just draw a point at v.x, v.y.
04:01 - So now, oh but these are.
04:06 - (laughing)
04:07 - The whole point of me doing
is I can't do this, right?
04:09 - Okay, so these are actually gonna be 3D.
04:12 - The point of this is
they're gonna be in 3D.
04:14 - Bear with me for a second.
04:17 - All will come to pass.
04:18 - Those are gonna be 3D points,
04:19 - but right now I haven't
done anything 3D yet.
04:21 - Let's make the stroke
weight quite a bit bigger
04:23 - so I can see them.
04:24 - There we go.
04:25 - So those are my four points.
04:28 - So, first, what I need to do,
04:32 - and actually hmm.
04:36 - I'm not gonna worry about
this part right now.
04:38 - Okay, so, what do I need
to do make a 3D engine?
04:43 - Okay, here's the thing.
04:46 - I'm gonna search for some props.
04:49 - (laughing) Okay, I found some props.
04:51 - I'm actually gonna turn
this light off too.
04:53 - I'm gonna try to do a
demonstration in the dark.
04:57 - This is a 3D object.
04:59 - It is the book A Million Random Digits
05:01 - with 100000 Normal Deviates.
05:05 - The way that a 3D object is rendered
05:09 - on a 2D dimension screen
05:10 - is through something called a projection.
05:12 - That projection you could think of
05:13 - is basically like a shadow.
05:15 - So if I have this book here,
05:16 - and I shine this cellphone flashlight,
05:20 - you can see that there's a
projection onto the wall.
05:24 - It looks like a square.
05:25 - If I rotate this it rotates.
05:28 - If I rotate around the Y axis,
05:30 - well actually I'll have to do this.
05:31 - If I rotated around the Y axis,
05:34 - you can see it starts to become thinner.
05:37 - I can rotate around the
X axis, it does this.
05:39 - So, you know, so this is the idea.
05:42 - I need to create this
same exact (laughing)
05:47 - I need to create that same
exact idea but in code.
05:53 - And the way that that's done
05:55 - is with something called
a projection matrix.
05:59 - So, the point, the 3D point,
06:03 - is actually something like this.
06:04 - It's a matrix that has X, Y, and Z in it.
06:09 - This is actually three rows by one column.
06:13 - This is something that I've gone over
06:14 - in other matrix math videos.
06:16 - Here's kinda a summary of it.
06:18 - A projection matrix, if I'm
projecting into 2D, right?
06:23 - If I'm projecting this 3D
point into a new 2D point,
06:29 - what I need is a projection matrix.
06:31 - Now here's a really
simple projection matrix.
06:38 - This projection matrix
has a one in the X spot,
06:43 - a one in the Y spot.
06:46 - X, Y, Z, X, Y, Z, and it has both zeros
06:50 - in this sorta Z column here
of this projection matrix.
06:53 - What this is actually always going to do
06:56 - is give a two dimensional matrix,
06:58 - not two dimensional, sorry,
07:00 - a two column matrix with just the X and Y.
07:02 - This projection matrix
just eliminates the Z.
07:05 - And actually, this will get us pretty far.
07:07 - In fact, this exact matrix is what's used
07:11 - for like orthographic projection.
07:14 - There's all different, stereographic,
07:16 - and all different kinds
of projection matrices.
07:19 - This one is gonna work just fine for us.
07:21 - So, let's put this in our code.
07:26 - Okay, so the first thing that I need to do
07:28 - is I need to create
that projection matrix,
07:30 - and this is actually an easy thing.
07:32 - Now of course if I were doing
this in more sorta robust way
07:36 - I'd probably have like
a matrix math library.
07:38 - I just have a few matrix math functions
07:43 - that are in this tab that I
wrote in a previous video.
07:46 - So, I'm going to say
make a projection matrix,
07:50 - and I'm going to just make it
as a two dimensional array.
07:54 - So one, zero, zero,
comma, zero, one, zero.
07:58 - So this is my representation
08:01 - of a two row by three column matrix.
08:06 - Two row by three column matrix,
08:08 - that is this right here
08:11 - represented as a two dimensional array.
08:12 - Now, what I'm going to do
here is I'm going to say
08:18 - for every point, for every 3D point here,
08:20 - I'm gonna move this over a little bit.
08:23 - So what I wanna do is, okay,
08:25 - so what I wanna do here for
every single 3D point, right?
08:29 - And this was sorta
pointless that I did before.
08:32 - (jokingly laughing)
08:33 - what I wanna do is I
wanna create a Pvector.
08:36 - I'm gonna call it the projected2d vector,
08:40 - and what I'm gonna do
08:41 - is I'm gonna say matrix
multiply the projection times v.
08:47 - So this is what I wanna
do to project a 3D point
08:54 - into 2D I need a projection
matrix which I just made,
08:57 - and then I need to matrix
multiply the projection matrix
09:01 - and the vector.
09:03 - Now, how the math for that
work involves this times this,
09:06 - plus this times this, plus
this times this, goes here,
09:09 - and this times this, plus times
this, plus this times this.
09:11 - I'll refer you to
matrixmultiplication.xyz.
09:14 - That website has a nice visualization,
09:16 - and I've made other videos
09:17 - about how matrix multiplication works,
09:19 - which I've also linked to.
09:20 - I'm just gonna assume that
matrix multiplication works.
09:23 - And you could see how this makes sense.
09:24 - This one leaves us only with the X.
09:27 - This one leave us only with the Y.
09:29 - So now I'm going to then
09:32 - say point projected2d.x, projected2d.Y.
09:40 - I probably could come up
with a better name than that.
09:43 - And now if I run this,
09:44 - same exact thing, right?
09:46 - Because in this case it's
as if the point light
09:50 - and the place that I'm projecting onto,
09:53 - and the thing, they're all
kinda in exactly the same spot.
09:55 - So there's no skewing,
09:56 - there's no skewing of
the sorta prospective.
09:59 - So, if I were to move that light around,
10:02 - and change the projection matrix,
10:05 - different things could happen.
10:06 - But I'm not gonna worry
about that right now.
10:07 - What I wanna do now is see
if I can apply some rotation.
10:15 - Okay, so how do I apply rotation?
10:17 - Well, I know that I could,
10:19 - I could just say like
rotate by angle, right?
10:24 - If I say rotate by angle,
10:26 - processing is gonna do
that transformation for me.
10:28 - But what if I wanna rotate X,
10:31 - rotate around the X axis?
10:33 - I can't do that.
10:35 - I'm getting some sort of
error somewhere or nothing.
10:38 - I mean it should say not
available with this renderer.
10:40 - Oh yeah, rotateX can only be used
10:42 - with a renderer that supports P3D.
10:44 - I need to write my own rotateX function!
10:46 - And guess what I need for that!
10:47 - (bell ringing)
10:48 - Rotation matrix!
10:51 - I think the ding is better after.
10:53 - (laughing)
10:55 - Guess what I need for that!
10:57 - Rotation matrix!
10:58 - (bell ringing)
10:59 - Oh yeah, that was great.
11:00 - That was exactly what I meant to do.
11:01 - (laughing)
11:03 - Okay, so now I am going to
create a rotation matrix.
11:09 - Now how does that work?
11:10 - Luckily for me,
11:12 - I already have this
Wikipedia page opened up.
11:14 - Look at this.
11:14 - A rotation matrix is a matrix that is used
11:17 - to perform a rotate in Euclidean space,
11:19 - and this kinda makes sense, right?
11:21 - Look at this rotation matrix.
11:22 - Have you ever done one of
things where you do polar
11:25 - to Cartesian coordinate transformation,
11:27 - and you take the angle,
11:29 - and you keep increasing the angle,
11:31 - and then you convert
that to X and Y points,
11:32 - and you have this like spiraling thing?
11:33 - I've made videos where I do that.
11:36 - Basically, to rotate in two dimensions,
11:45 - this is all I need.
11:46 - So just for fun, let's first just do this.
11:50 - I'm going to say float,
11:55 - I'm gonna make another,
11:56 - I'm gonna call this rotation,
11:58 - and I'm gonna make another matrix,
12:00 - and I'm gonna do exactly this.
12:01 - It's gonna be two by two,
12:02 - and it's going to be cosine
theta negative sine theta.
12:05 - And I'm calling it angle,
12:07 - cosine angle, negative sine angle.
12:11 - And then it's gonna be,
12:12 - what was it?
12:13 - Sine angle, cosine angle, is that right?
12:24 - So this is, I didn't get this right.
12:25 - There's, this needs a bracket.
12:28 - I dunno what I'm doing here.
12:30 - And this needs a bracket, right?
12:32 - It's a two dimensional matrix.
12:35 - There we go, nope?
12:36 - Semicolon, there we go!
12:37 - So this is my rotation matrix,
12:39 - this is my rotation matrix.
12:41 - So what now, what if I were to say,
12:45 - no, I'm gonna take out this rotateX.
12:47 - Not using the native rotate function,
12:50 - and I'm going to say Pvector
rotated equals matmul,
12:58 - rotation times projected2d.
13:07 - And now I'm gonna draw
the point at rotated.
13:11 - So I am projecting,
13:12 - V is a 3D vector.
13:15 - I'm projecting it into 2D,
13:17 - and then I'm rotating it,
13:19 - just a 2D rotation.
13:21 - And if we run this,
13:22 - okay, what's wrong?
13:23 - Columns of A must match rows of B.
13:26 - Oh, oh boy, I made a
problem. (jokingly crying)
13:33 - Okay, something horrible happened.
13:35 - I got this out, I got columns
of A must match rows of B.
13:39 - I made a mistake in my
matrix multiplication thing.
13:42 - Here's the thing, I'm
trying to be all clever
13:43 - to show you in 2D first.
13:45 - The truth of the matter
is, Pvectors, they're 3D.
13:47 - Even if I'm drawing just the X and Y,
13:49 - there's always that Z component.
13:51 - So I actually need
include this extra column
13:57 - with zeros in it to do this demonstration.
13:59 - So now you can see that's
me doing 2D rotation.
14:03 - And actually, I'm actually
do 3D rotation, right?
14:06 - Because really what
this should be is this.
14:12 - This is, what I would call, XY rotation.
14:18 - I am rotating around the Z axis
14:22 - by, you know, using the
X and Y axes, right?
14:26 - Look at this.
14:27 - Now I'm gonna say,
14:28 - but if I kept scrolling
down this Wikipedia page,
14:32 - we would see this.
14:33 - We would find this right here.
14:36 - This is the one that I'm doing.
14:37 - Rotation Z, right?
14:40 - Oh, I need a one there, of course,
14:42 - not a zero there, very important.
14:43 - I don't wanna lose the Z point.
14:45 - I wanna rotate the X and
Y axes around the Z axis,
14:50 - but I don't wanna lose the Z point,
14:51 - so I need a one there.
14:53 - In the 2D case, oh okay,
so I need this here.
14:55 - So this I'm gonna call rotationZ,
15:00 - and now I'm gonna make some other ones.
15:02 - Let's call them rotationX.
15:05 - And the rotationX is Y and Z.
15:10 - So I need to have my rotation
values in the Y and Z spots.
15:21 - So hard to do this.
15:24 - I should just copy it from somewhere
15:26 - but this will work.
15:27 - And I think this is right.
15:32 - So this should be, right,
15:34 - you can see this is,
15:38 - am I spacing this off?
15:39 - Help me!
15:41 - This was rotationZ, this is rotationX,
15:45 - and let's do one more.
15:48 - Let's do rotationY.
15:50 - So I need to have zero,
one, zero in the middle.
15:55 - The last one will be sine of
angle, zero, cosine of angle,
16:00 - and the first one will be cosine of angle,
16:06 - negative sine of angle,
with a zero in the middle.
16:12 - Okay, so this should be,
16:14 - this should all line up nicely.
16:16 - This is rotationY.
16:19 - Do I have any syntax errors?
16:21 - RotationZ, rotationX, rotationY.
16:25 - Okay, now, (quietly screaming)
so here's the thing,
16:30 - I'm gonna do something terrible.
16:32 - What if I just put, like,
16:33 - if I put rotationZ here,
16:36 - oh I have an error.
16:38 - Oh, I'm missing a comma here.
16:39 - Thank you.
16:40 - So I think I got it everywhere else.
16:43 - Right, that's rotationZ.
16:47 - What if I try instead rotationX?
16:52 - Oh, weird that that's working.
16:54 - I guess, oh!
16:55 - You know why it's working?
16:56 - It's working by accident really,
16:58 - because my Z points,
17:01 - so but I've done something incorrect,
17:03 - but you can see this looks
as if those two points,
17:04 - and I want my angle to move
up a little bit faster.
17:07 - You can imagine this as a plane
17:09 - almost spinning around the X axis.
17:12 - But here's the thing,
17:13 - I should be doing,
17:13 - the projection should happen
at the last moment, right?
17:16 - I should really be rotating first,
17:23 - and then I should project
the rotated vector.
17:28 - And so here, so sorry, projection.
17:37 - For it to be correct, it's
gotta be in this order,
17:42 - because what I need to do
is first rotate and then,
17:45 - it worked by accident
because my Z values are zero,
17:50 - but now let's do something.
17:54 - Let's make eight points.
17:58 - Okay, I'm doing this
in a highly manual way.
18:04 - Let's now have all these be at -50.
18:09 - I wonder if I wanna put them,
18:10 - I think this'll be fine, -50,
18:13 - and then now these all at 50, right?
18:15 - I basically, if you think about it,
18:18 - a point has zero dimensions,
18:20 - a line has two dimensions
18:22 - with two points as the bounding box,
18:24 - a plane, a square, has two dimensions
18:28 - with four lines bounding it,
18:31 - and then a cube is in three
dimensions with six planes,
18:37 - but really I can kinda make the
cube just with eight points,
18:41 - which are the edges,
all those connections.
18:43 - So let me just run this for a second.
18:44 - Oh boy, this works too fast.
18:46 - I didn't want this to work so fast.
18:47 - So now we can see,
18:48 - lemme just go back to rotate Z.
18:53 - And look at this.
18:55 - That looks, now why do
I not see eight points?
18:57 - Because I'm using orthographic projection
19:00 - as if the light is right there,
19:01 - there's no kinda perspective.
19:04 - I'm not moving the light source away
19:06 - to create this kinda
more 3D perspective look.
19:09 - I can't see, when the points
19:12 - are right in front of each other,
19:13 - the shadow projects on
exactly the same spot.
19:15 - But, if I were to do rotate Y,
19:19 - now you can see.
19:20 - You can kinda imagine that
being a cube rotating.
19:23 - And here's now where I can get fancy.
19:25 - I can now say rotated equals
matmul rotationX times rotated.
19:38 - So I'm just gonna do this a couple times.
19:39 - I'm just gonna keeping
rotating by all the different,
19:43 - so I'm gonna do this
as separate operations.
19:45 - Now there's a way I could
probably combine all those,
19:47 - but I'm just gonna do all
those matrix rotations,
19:50 - and here we go.
19:51 - Now we have my cube
spinning along all axes.
19:56 - Now it doesn't look like a cube.
19:58 - Time out, in all of my
like fussing with this,
20:00 - I left an extra zero here.
20:02 - This rotationX should be one, zero, zero,
20:05 - zero, cosine, negative sine,
20:06 - zero, sine, cosine.
20:07 - Alright, so hopefully
that doesn't change much.
20:10 - Eh, still looks right.
20:10 - So that probably was just being ignored.
20:12 - I was ignoring it but I
don't want that in my code.
20:14 - So now we can we've got this rotation.
20:16 - The truth of the matter is I
really wanna draw this as cube.
20:19 - Oh, I wanna draw this as cube!
20:21 - Let me think about this.
20:22 - There's gotta be,
20:23 - perhaps I could manually
connect all the points
20:26 - I wanna connect.
20:27 - Also, this is not the same
size as what I started with.
20:32 - (chuckling)
20:34 - So I'm gonna just replace
every -50 with 100,
20:38 - and every 50 with 100.
20:44 - That should work.
20:46 - Let's make that a bit bigger.
20:48 - There we go!
20:49 - So that's what I had originally,
20:50 - and I also was doing something
with the angles, right?
20:54 - I was like doing like,
20:55 - I don't remember,
20:56 - but I had like angle times
two, angle times two,
20:59 - so I could also vary the
speed of the rotations.
21:02 - This is very silly what I'm
doing right now and pointless.
21:05 - But I just wanted it to match,
21:09 - match more like what I started with.
21:11 - Okay, anyway, so you can kinda see that,
21:13 - and that's why it was moving so,
21:14 - then I had it as like 0.1.
21:16 - Okay, so this should now match
exactly what I started with.
21:19 - Alright, lemme do something
21:20 - that's gonna help us in the long run.
21:22 - What I actually wanna do is
instead of using 50 all in here,
21:26 - I'm gonna change every instance of 50
21:27 - to just the number one.
21:29 - So I'm gonna kinda have
normalized the cube,
21:31 - actually I kinda wanna change it to .5.
21:33 - (chuckling)
21:34 - Instead of one I'm gonna change it to,
21:34 - because I want the sides, the
lines, to be a length one.
21:38 - So, whoops, replace, do I have,
21:41 - oh I have ones in other places.
21:43 - Bad idea!
21:44 - Hold on, I'm gonna change all
the instances of 50 to .5.
21:49 - Okay, so now if I were to run this,
21:54 - you know, I don't see anything here,
21:56 - but very easily what I can do is,
21:59 - at the last moment, I can scale things up.
22:02 - And again, I could do
this with some kind of,
22:04 - I'm just gonna do multiply
each vector by 100,
22:09 - and then I have this.
22:10 - And if I multiply it by 200,
22:13 - then I have this,
22:14 - which more closely matches
what I started with.
22:16 - The angle of rotations are different,
22:17 - but that's no big deal.
22:19 - Okay, I wanted to do that
22:20 - because I also would like
to show you perspective,
22:23 - and I think if all my
coordinates are normalized,
22:26 - that's gonna make it
a little easier to do.
22:28 - But before I show you perspective,
22:30 - let me connect all the edges.
22:33 - I is less than 12, i++.
22:35 - Right, what am I connecting?
22:37 - I'm connecting,
22:40 - let me think about this,
22:42 - I'm connecting,
22:43 - like if I say connect,
22:46 - what did I call the points?
22:48 - Let me just, zero and zero.
22:50 - Let me write a function.
22:52 - Let me write a function called connect,
22:54 - and it gets two Pvectors,
22:58 - and it just draws a line.
23:02 - I'm gonna say strokeWeight(1),
23:04 - and it draws a line between
one and the other, stroke(255).
23:13 - So if I were to say connect,
23:16 - oh and it doesn't get two Pvectors,
23:18 - it gets two integers,
23:20 - and PVector a1 equals,
23:28 - I'm gonna call this i and j.
23:31 - Pvector a = points[I],
23:35 - and Pvector b = points[j].
23:40 - This is like,
23:41 - so I should have a line
between the first two points.
23:47 - How come I don't see that.
23:48 - Oh, wait, wait,
23:49 - yeah, point O.
23:51 - Oh I need to connect,
23:55 - okay, so I'm gonna make this
PVector projected equals,
24:05 - oh I'm gonna make an array
that has eight spots in it.
24:10 - And then, instead of drawing this here,
24:15 - I'm going to say projected,
24:18 - so now I really need to,
24:21 - (breathing in sharply) oh this is fine,
24:22 - int index = 0, I could
just use now a for loop
24:26 - but index++, projected[index]
= projected2d.
24:32 - So I'm gonna put everything in an array,
24:34 - and then I'm gonna say connect
zero, zero, in projected.
24:40 - And then this will be an array of points.
24:46 - And so now this should,
24:50 - where's that line?
24:52 - Let me just make sure.
24:52 - Now if I say for PVector
V in projected, point,
25:02 - I really didn't wanna draw the edges.
25:04 - This is why.
25:04 - I wanted to just leave it at that,
25:05 - leave it a viewer challenge
to draw the edges.
25:12 - Projected2d, projected[index]
= projected2d,
25:18 - index++, PVector v.
25:23 - Where's all that stroke weight stuff?
25:25 - This stuff should be here.
25:32 - Where am I drawing all the points?
25:33 - So, okay, there are the points again.
25:37 - Now, I wanna connect
zero and one. (laughing)
25:42 - Zero and one.
25:43 - There we go!
25:43 - (laughing)
25:44 - Took me forever!
25:45 - So now I'm connecting zero and one,
25:47 - then I wanna connect zero and two.
25:52 - No, zero, then I wanna
connect one and zero?
25:57 - That's the same thing.
25:59 - Connect one and one?
26:01 - No, no, no, one and two?
26:04 - (laughing)
26:05 - This is good trial and error.
26:07 - This is fun!
26:08 - Then I'm gonna connect two and three.
26:10 - I just wanna figure out if
there's an algorithm for this.
26:13 - And right, because this is the plane.
26:15 - This is the first plane.
26:16 - Three and four.
26:17 - Ah I see, this makes sense.
26:19 - Whoop, whoop, whoops.
26:21 - No, three back to zero.
26:24 - That's the first plane.
26:27 - And then the next plane is
the same thing but at the end,
26:32 - which is like four to five, five to six.
26:39 - Oh, no, three to four, four to, right?
26:42 - Because didn't I put the next plane,
26:44 - would be zero, one, two, three, four.
26:46 - No, no, no, no.
26:46 - No, no, no, no.
26:47 - Yes, four to five, five
to six, six to seven,
26:53 - and seven back to four.
26:57 - Okay, so that's that.
26:59 - Now all I need to do is connect,
27:01 - oh, this is easy!
27:02 - So there's definitely
an algorithm for this,
27:04 - 'cause now I wanna connect zero
to four, one to five, right?
27:15 - Two to six.
27:16 - Hopefully the algorithm is
revealing itself to you.
27:19 - And seven to eight.
27:22 - No, no, no, sorry, three to seven.
27:26 - There we go!
27:27 - (claps)
27:28 - There's my cube!
27:29 - (bell rings)
27:29 - I have done it!
27:30 - Now I should really refactor this,
27:33 - and I plan to do that,
27:34 - but right now I think I need
a little bit of a break.
27:39 - Alright, so, actually no I don't.
27:42 - I gotta do it right now.
27:44 - I'm sorry, this video's
gonna be really long.
27:45 - I don't care!
27:46 - I equals zero, i is less than four, i++.
27:51 - So what I'm gonna do, right?
27:53 - There's four sides.
27:55 - I am going to connect i with
i plus one, modulus four,
28:06 - then I also want projected,
28:10 - then I also wanna connect i plus four,
28:14 - and i plus one modulus four, plus four.
28:18 - Let's do that.
28:19 - And then I just wanna
connect i with i plus four.
28:23 - I think that's it.
28:24 - That's three little blocks.
28:33 - Woo-hoo! (claps)
28:33 - I'm so glad that actually worked!
28:35 - (laughing)
28:36 - Okay, so this is connecting the edges.
28:39 - This is gonna really help
when we have to do the,
28:42 - I hope, when we have to do the hypercube,
28:44 - connecting the edges.
28:46 - Okay, I should really go!
28:49 - I only have 10 more
minutes in real life time
28:52 - while I'm recording this.
28:54 - But let's actually add perspective!
28:56 - Let's add perspective.
28:57 - How do you add perspective?
28:58 - (jokingly yells)
28:59 - So the way that you add
perspective. (jokingly yells)
29:04 - Perspective projection.
29:08 - Basically, we're going to add a variable
29:12 - which indicates the distance,
29:15 - remember my ridiculous experiment earlier
29:18 - like about four and a half hours ago,
29:19 - if you are actually watching this video
29:21 - all the way to the end,
29:22 - where I had this light source
29:23 - and I was shining the light source,
29:26 - and you were seeing the
shadow here, that projection?
29:28 - I need a variable which
is the distance away
29:32 - from the object,
29:35 - the surface, that light source is.
29:39 - That's how I get perspective
projection, right?
29:42 - So, to create this idea
of perspective, right?
29:45 - I want to move the light source,
29:46 - or move the camera further away.
29:48 - There's a lot of
different ways to do this,
29:49 - and highly sophisticated methods,
29:51 - but basically I need to
scale the X, Y positions
29:55 - by the depth, right?
29:56 - Objects in this mirror appear
closer than they really are.
29:59 - Like, things that are further
away appear closer in,
30:04 - things that are closer appear further out.
30:08 - So to do that, this projection matrix
30:11 - can't just always be
constants of one and one
30:13 - in the X and Y position.
30:14 - So I'm going to move this,
30:16 - and I'm going to before I project, right?
30:21 - Before I project the final rotated matrix,
30:27 - I need to dynamically calculate
this projection matrix
30:30 - according to the Z value itself.
30:32 - So, one thing that I could do is
30:34 - I could just say float z = rotated.z,
30:40 - and I could like just try
like dividing, dividing by it.
30:48 - I'm sorta scaling it according to that Z.
30:50 - Let's see what that does.
30:51 - Eh, something maybe.
30:53 - It looks all weird and crazy.
30:54 - That's not right.
30:55 - Well, a nice formula for doing this
30:57 - is actually saying one divided by,
30:59 - this is now the distance
basically, the camera distance,
31:03 - the light source
distance, minus rotated.z.
31:06 - So if I put that in here now,
31:10 - and I were to say float
distance = 2, for example,
31:18 - now you can see this looks much more
31:20 - like perspective projection.
31:23 - So this is no longer orthographic,
31:25 - it's more like perspective.
31:28 - You know, again, I'm not saying
31:29 - that I've comprehensively solved
every possible projection,
31:34 - 3D way, with focal length and all sorts
31:37 - of field of view stuff.
31:38 - I'm just doing something kinda basic.
31:40 - This is probably similar
31:41 - to like weak project maybe, I think.
31:44 - But you can see here that if
I change this distance to one,
31:48 - now this object appears much closer.
31:49 - It's more distorted.
31:51 - If I were to change this to 10,
31:53 - wow, it's so far away but
you can see there it is.
31:56 - Those points are little bit too big.
31:57 - Now one thing I'm not doing is
31:59 - changing like the stroke weight
32:00 - to make it seem further or smaller,
32:02 - but you can see I'm just
altering the perspective.
32:04 - Okay, we've done it!
32:05 - (bell ringing)
32:06 - Where's my train whistle?!
32:08 - I need the train whistle!
32:11 - (shoes squeaking)
32:14 - No train whistle for me.
32:15 - I'm gonna reward myself
with a piece of space melon.
32:19 - I have made this coding challenge.
32:22 - So, what can you do?
32:23 - First of all, if you wanna
challenge to yourself,
32:26 - just go make this in four dimensions now.
32:27 - (laughing)
32:28 - But that's what I'm gonna do next.
32:29 - Now that I have successfully
drawn a 3D cube,
32:33 - and just to prove the point,
32:34 - I am in the P2D renderer.
32:37 - The P2D renderer using my own matrix math,
32:42 - and my own rotation matrices.
32:44 - You know, you don't need to do this.
32:46 - I would probably just go
back and always use P3D,
32:48 - but this should let me unlock the fourth,
32:51 - the fifth, the sixth,
the seventh dimension.
32:53 - You know, try making different
shapes other than cubes.
32:55 - Try, you know, you can do weird stuff,
32:57 - like I'd probably get
something like super weird
33:00 - if I just, like let's make
the distance two again,
33:03 - and let's change this negative to positive
33:07 - just for rotationY.
33:09 - And like look what I've got going now,
33:11 - like I could really start
to like distort the world
33:14 - by like just messing
around with these numbers.
33:16 - Like what if I say like
five times cosine of angle
33:19 - down here in rotationY?
33:21 - Boy, that's probably a terrible idea.
33:22 - So what kind of crazy, weird, distorted,
33:25 - rotation perspective things can you do?
33:27 - Can you actually do this with
vertices so you apply fill?
33:30 - Can you think about color?
33:31 - Make some sort of weird, pretend, 3D world
33:36 - that doesn't follow our own
sense of three dimensions
33:41 - by playing with this code,
33:42 - and share that with me on
the comments or on Twitter,
33:46 - and also on thecodingtrain.com,
33:48 - there'll be a link to the webpage
33:49 - where you can submit user-made things.
33:52 - (upbeat music)
33:59 - (bell rings)