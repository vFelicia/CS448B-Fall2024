00:00 - in this video i am going to implement
00:02 - the steering behavior path following
00:04 - this will depend entirely on everything
00:06 - that i did in the previous video on
00:08 - scalar projection
00:10 - i'm just going to bring that code over
00:11 - here so you don't necessarily need to go
00:13 - back and watch that but if you want to
00:14 - understand that concept you can go back
00:16 - and watch the previous video i'm
00:18 - starting with the vehicle class that i
00:20 - had at the end of the arrival video the
00:23 - first thing i want to do is define a
00:25 - path for the vehicle to follow
00:34 - eventually i'm going to want a more
00:36 - sophisticated path but i think an easy
00:38 - way for me to begin is just have it be a
00:40 - path be a line that connects two points
00:43 - a starting point and an ending point
00:49 - then i can write a show function which
00:51 - will render that line
00:53 - got to make sure i add path.js to
00:55 - index.html
01:01 - i've made it this dot error
01:04 - it's just something i will never stop
01:06 - doing
01:07 - and so now i have a vehicle and i have a
01:10 - path just to make things sort of
01:12 - visually very simple right now my path
01:14 - is just a horizontal line bisecting the
01:16 - canvas assuming i'm going to follow the
01:19 - model that i developed for the previous
01:21 - steering behavior examples i then need
01:23 - to call a function to calculate a force
01:27 - and then apply that force
01:30 - this tells me i need a new function in
01:32 - the vehicle class itself called follow
01:35 - that receives a path object
01:39 - now in theory this is the only place
01:41 - remaining where i need to write code i
01:43 - need to read up on what the path
01:45 - following algorithm is and implement it
01:47 - into that function returning a steering
01:49 - vector at the end i would encourage you
01:51 - to pause and read the description of
01:53 - path following from craig reynolds paper
01:55 - but i'm going to describe it in my own
01:57 - words over on the whiteboard
02:05 - here's a diagram of all the elements i
02:07 - have so far in the code one thing i
02:09 - haven't mentioned which is an important
02:11 - element is reynolds defines a radius for
02:13 - a path
02:16 - i didn't draw that perfectly this line
02:18 - should be directly in the center of
02:20 - these two dotted lines but the idea is
02:22 - that if the vehicle is within the radius
02:25 - of the path it's on the path and
02:27 - remember the sort of driving principle
02:29 - here lifelike and improvisational manner
02:32 - if i wanted to i could write some code
02:34 - that puts this triangle exactly on this
02:36 - line and just moves it along the line
02:38 - perfectly but that's not what i'm trying
02:40 - to do here i'm trying to get this
02:41 - vehicle to sort of veer around and steer
02:43 - and attempt to stay within the
02:45 - boundaries of this path therefore this
02:47 - idea of a radius is kind of important
02:49 - step one
02:54 - predict the future position of the
02:56 - vehicle so projecting out into the
02:58 - future if the vehicle were to continue
02:59 - at this velocity for some amount of time
03:02 - it would perhaps end up over here
03:06 - step two i'm just going to call this
03:08 - future position pause for simplicity
03:12 - is that future position on the path well
03:14 - i can plainly see here that it is not
03:17 - the way i would determine that is by
03:18 - calculating the distance between the
03:20 - point and the line
03:22 - i'll call that d this is everything that
03:24 - i worked out in the previous video how
03:25 - to do this
03:27 - this
03:28 - here this is the path radius
03:32 - if d
03:33 - is less than the radius it's on the path
03:38 - if it's on the path do nothing i don't
03:40 - need a steering force the steering force
03:42 - is zero assuming it's not that point is
03:44 - not on the path find the projection
03:47 - point
03:48 - so if d is not less than radius so yes
03:52 - we just
03:53 - go off and do nothing if no
03:58 - step three
04:01 - find this projection point i'll call
04:03 - that the target
04:06 - and guess what step four is
04:09 - seek
04:10 - did this fit onto the whiteboard it did
04:13 - seek that as the target we've already
04:15 - written the seek algorithm in a previous
04:16 - video so that'll make things a lot
04:18 - easier when we get there okay
04:21 - let me try to go and implement this in
04:23 - the code
04:24 - first i'd like to add a radius to the
04:26 - path
04:29 - and i'm going to make it 20 just
04:30 - arbitrarily
04:31 - and i'm going to draw another line with
04:34 - the thickness
04:35 - of the radius times 2
04:37 - giving it some alpha so now we can
04:39 - visually see the path radius as well
04:42 - now there is one more interesting
04:44 - question i'm just thinking about which
04:46 - is is falling does following the path
04:48 - mean move this way
04:50 - or does it mean move this way and
04:52 - there's no real answer to the question
04:53 - it's up to you to define that and
04:55 - ultimately i think the way i'm going to
04:56 - implement it whatever its starting
04:58 - velocity is going to ultimately
05:00 - determine which way it's following the
05:02 - path
05:03 - which is why here in the sketch for now
05:05 - i'm hard coding an initial starting
05:07 - velocity step one predict the future
05:09 - position
05:16 - to do that i just make a copy of the
05:18 - velocity multiply it by 50 and i'm going
05:21 - to look 50 frames ahead and then add
05:23 - that to the current position and that's
05:25 - my prediction of the future location
05:27 - there's still that thick stroke weight
05:29 - there so let's say no stroke
05:32 - drawing it of course is unnecessary for
05:34 - the algorithm but i think it'll be
05:35 - helpful if i add visual annotations as
05:38 - we work this out
05:39 - step two is this future position on the
05:42 - path well the way i determine that is by
05:44 - calculating the distance and finding out
05:46 - if that's less than the radius how do i
05:48 - calculate the distance
05:50 - think back to my previous video scalar
05:53 - projection
05:54 - i'm going to grab this vector projection
05:56 - function from the previous video
05:59 - and remember the vector projection
06:01 - function the way as written takes two
06:04 - vectors one would be defined as a vector
06:07 - that points from the start of the path
06:09 - to the vehicle's future location that's
06:12 - vector a
06:13 - vector b is the start of the path to the
06:16 - end of the path the vector that defines
06:18 - the path itself but what do i actually
06:21 - have
06:22 - in my code i have three points
06:25 - this point this point and this point so
06:28 - i think i want to rewrite that vector
06:30 - projection function to take as its input
06:32 - these three points
06:34 - calculate these two vectors and then
06:36 - return this point here let's call these
06:39 - points in the function
06:41 - pause
06:43 - a
06:44 - and b
06:48 - and then i'll call these vectors
06:51 - v1 and v2
06:54 - so v1 is a minus pause
07:02 - v2
07:04 - is b minus pos
07:06 - so what was the vector b is now the
07:08 - vector v2 i don't need to copy it
07:11 - anymore because i've just made it up
07:13 - right here
07:15 - but i do need to normalize it
07:18 - then the scalar projection is
07:21 - v1 dot v2 v2
07:24 - multiplied by the scalar projection to
07:26 - get its length and return
07:28 - v2 but all i really need in this case
07:33 - is this point
07:34 - so i don't actually need this vector i
07:36 - just need to find this point which is
07:39 - this position that i've started with
07:41 - adding that vector projection
07:47 - the function takes these three points
07:50 - the start and end of the line as well as
07:52 - the future position of the vehicle and
07:54 - returns the projected point
07:57 - let's call that find projection
08:00 - and ultimately that's going to be the
08:02 - target to seek if in fact we need to
08:04 - move on to step four
08:07 - i kind of made these in a slightly weird
08:10 - order with a little bit odd naming i
08:12 - might refactor this in a moment to make
08:14 - it more clear but it's start
08:17 - future
08:19 - end
08:24 - path dot start future
08:27 - end
08:28 - let's just draw that point as well
08:33 - oh path dot end
08:35 - i'll make that a different color
08:39 - and we can see there's that point
08:41 - projected onto the path
08:43 - what was i trying to figure out again
08:45 - right i need this distance i know this
08:48 - point that's the future i know the
08:49 - projected point i need to calculate the
08:51 - distance between those two points
08:53 - and find out if it's less than the
08:55 - radius
08:57 - the distance between what the future and
09:00 - the target
09:03 - if that distance is less than the path
09:06 - of the radius what do i do return seek
09:09 - that target
09:11 - otherwise return i don't know a vector
09:13 - that's got nothing in it because it do
09:15 - nothing is that really everything
09:21 - i predicted the future position i
09:22 - determined whether it was within the
09:23 - radius and then
09:26 - uh to determine whether i kind of wrote
09:28 - this in a weird order i'm realizing
09:30 - because in order to determine whether
09:31 - it's within the radius i need to find
09:33 - that projection point so that i can find
09:34 - this distance and then once i have that
09:36 - projection point if it's not within the
09:37 - radius then seek the target you got all
09:39 - that
09:41 - what's the chance that this works
09:43 - right i'm calling that function i'm
09:45 - getting the force out i'm applying it
09:48 - let's see what happens
09:51 - well
09:53 - that doesn't seem to be working at all
09:55 - let's console.log that distance
09:59 - see what i'm getting
10:02 - 100 100 100 100 100. that makes sense
10:05 - let's console log path
10:08 - dot radius
10:09 - oh my goodness
10:11 - whoops
10:13 - seek the target if the distance is
10:15 - greater than the radius oh
10:19 - i'm really feeling like this is going to
10:21 - work now
10:22 - oh
10:23 - seek is not defined
10:26 - this dot this dot this stop
10:28 - this dots
10:29 - [Music]
10:32 - it's working
10:34 - let me get rid of the console log
10:37 - let me uh s lower the maximum force and
10:40 - maximum speed
10:45 - i think i also might be looking too far
10:47 - ahead with this vehicle
10:49 - this 50 should really be a parameter of
10:50 - the system like how far does it look
10:52 - ahead but let me look less far ahead
10:54 - just to sort of see
10:58 - that's kind of fun you so you can see
11:00 - once it gets on the path it stays
11:02 - doesn't do any steering okay let's at
11:05 - least make the path a little wonkier
11:07 - like not just a perfect horizontal line
11:10 - and i think it actually would be fun if
11:11 - i could move the path with the mouse
11:14 - so i'm going to set the y position of
11:16 - the end point of the path by moving the
11:18 - mouse
11:19 - now of course the wrap around causes it
11:22 - to not wrap around the path but to
11:24 - reappear there which is kind of funny to
11:26 - see but you can see now
11:28 - this idea of attempting to follow the
11:30 - path
11:31 - now i might
11:33 - decide to like remove some of the
11:34 - annotation just to see what it looks
11:36 - like without that obviously i could have
11:38 - a variable or an interface to turn that
11:40 - stuff on or off
11:43 - let's make the canvas much wider
11:47 - and there we have our little vehicle
11:48 - trying to follow the path
11:51 - boy do i really want to keep going here
11:52 - i think i need to take a minute take a
11:54 - minute and breathe this is a lot
11:57 - just this much is a lot so i would
11:59 - encourage you to think about how you
12:01 - might incorporate this into some of some
12:04 - of the other examples that i've already
12:05 - created what happens if now you had
12:08 - another vehicle that's pursuing this
12:11 - vehicle that's following the path that
12:13 - could be something to try but ultimately
12:15 - i think where i would really like to go
12:18 - with this is making the path a bit more
12:21 - complex you might remember i think back
12:24 - in one of the videos i showed you the
12:26 - crowd path falling example which had a
12:28 - more complex path like this it's made up
12:31 - of multiple line segments how do you
12:33 - know which line segment to look for the
12:36 - projection point on you have all the
12:39 - tools to do this but it is a tricky
12:41 - problem so i'm going to leave that right
12:43 - now obviously i will
12:45 - leave a link to a solution to this in
12:47 - the video's description but we'll leave
12:49 - implementing it as an exercise to you
12:51 - and um you know if there's a lot of
12:53 - interest i can come back and add another
12:55 - video to this playlist where i go
12:57 - through
12:58 - augmenting the path to be something that
13:00 - connects multiple line segments
13:02 - additionally the same technique applies
13:05 - to wall following which is like
13:07 - following a path but it's a wall instead
13:09 - of a path as well as containment which
13:11 - is staying within the bounds of
13:13 - something so i'd like to come back and
13:16 - make videos on those i don't at present
13:18 - have examples to show you of those um
13:20 - but in a future future time i will or if
13:22 - you make your own version of it please
13:24 - share it with me in the comments or on
13:26 - the coding train uh website where
13:28 - there's a page that you can submit
13:29 - variations on this path following
13:31 - example hi dan here from like literally
13:33 - just like five minutes in the future i'm
13:35 - about to say goodbye but i realized
13:36 - after i said goodbye i missed a kind of
13:38 - crucial element to the entire algorithm
13:41 - itself and it relates back to this idea
13:43 - of like which way am i going on the path
13:46 - reynolds actually proposes that you find
13:49 - the projection point but that projection
13:52 - point isn't exactly the target that you
13:54 - seek rather you could look ahead from
13:57 - the projection point a little bit some
14:00 - distance on the path and maybe choose
14:02 - this point to seek that will sort of
14:04 - guarantee that you're sort of moving
14:06 - along in a particular direction on the
14:08 - path you can actually see that in this
14:11 - other example that i'm also including
14:13 - where you can see the projection point
14:15 - as well as a point that it's actually
14:17 - seeking a little bit ahead on the path
14:19 - of these two circles that are following
14:21 - this path so ultimately this is kind of
14:23 - another great exercise for you to try
14:26 - how would you have that target not be
14:28 - exactly where the green dot is but a
14:30 - little bit ahead of the path than the
14:32 - green dot and which way is ahead i'll
14:35 - make sure the code that i released with
14:36 - this video has that built into it and if
14:38 - there's a lot of questions about it i
14:40 - can also come back and address it in the
14:41 - next video that i eventually someday
14:43 - make about path following okay back to
14:45 - me saying goodbye so what's next i
14:47 - actually have no idea um i do want to
14:50 - eventually implement all of these and
14:52 - i've got a bunch so far
14:54 - but i think the real missing thing that
14:56 - i will at a minimum get to sooner than
14:58 - later is what does it mean to have
15:00 - groups comb and combine behaviors to
15:02 - some extent so what does it mean to have
15:04 - a separation steering behavior where uh
15:07 - vehicles want to separate from each
15:09 - other not run into each other
15:11 - so i want to get to that it'll lead to i
15:13 - have done a coding challenge with the
15:14 - full flocking example already so that'll
15:17 - be included in the playlist at the time
15:18 - you're watching this right now but
15:20 - eventually i'll be filling in some of
15:21 - the gaps and missing pieces with some of
15:22 - these other steering behaviors let me
15:24 - know what you think i should do next if
15:25 - it's not there already thanks so much
15:27 - for watching and see you in a future
15:29 - coding train video
15:34 - [Music]
15:40 - you