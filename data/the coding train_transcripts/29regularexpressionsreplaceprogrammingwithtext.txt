00:00 - hello welcome to yet another regular
00:03 - Expressions video and in this regular
00:05 - expression video I think this might be
00:08 - well I probably will never ever stop
00:10 - making regular Expressions videos but at
00:12 - least for this sequence that I'm making
00:14 - right now today who knows when you're
00:15 - watching this in the future this is the
00:16 - last one okay so this video uh what I
00:19 - want to focus on is the replace function
00:21 - so uh in the previous video I looked at
00:24 - the split function split function is a
00:26 - function that you call on a string you
00:28 - give it a regular expression and the
00:29 - regular expression is a way to match a
00:32 - delimiter which indicates where you
00:34 - should split that text up into an array
00:36 - of chunks tokens so to speak now I want
00:38 - to look at the replace function which is
00:40 - a function that you also call on a
00:42 - string with a regular expression but
00:44 - wherever that regular expression
00:47 - matches you give it something else to
00:50 - replace it with right just like find and
00:52 - replace in any text editor but because
00:54 - it's regular Expressions because it's
00:56 - code there are all sorts of powerful
00:58 - things that you can do that you couldn't
00:59 - just
01:00 - as easily do with your standard computer
01:02 - find replace so um you know what you
01:05 - might do with this is um come up with
01:08 - some sort of like translator web
01:09 - application so you know that you can
01:11 - find you know websites that take your
01:13 - text and translate it into pirate speak
01:15 - for example so if you're looking for an
01:17 - exercise or something to try to do write
01:19 - a web page like this where you enter in
01:21 - some text you hit submit you do some
01:23 - kind of crazy replacing magic and you
01:25 - get a new text whether it's translating
01:27 - into some other funny way of speaking or
01:29 - um that sort of thing so I'll let I'll
01:31 - encourage you to come up with some
01:32 - creative ideas from what I show you here
01:34 - so let's first just look at the basics
01:36 - of replace so I'm going to um make a
01:39 - string that's
01:41 - uh um just says uh equals um unicorns
01:46 - and
01:48 - rainbows okay so that's a string and now
01:51 - what I want to say is s. replace and uh
01:55 - here's a regular expression unicorns and
01:59 - I want you to replace that with cupcakes
02:02 - so sorry that this is kind of like
02:03 - breaking into a line weirdly so you can
02:05 - see replace anytime you match unicorns
02:08 - and replace it with cupcakes if I do
02:10 - this and now we've replaced it we have
02:12 - cupcakes and rainbows very very simple
02:14 - idea now let's just look at something
02:16 - look at the original string the original
02:18 - string is still unicorn and rainbows so
02:21 - one thing that's really important about
02:23 - this is you're not modifying the actual
02:25 - string if you want to modify the actual
02:27 - string in your code you're you're going
02:30 - to need to say s
02:32 - equals the result of itself replacing
02:35 - unicorns with
02:38 - cupcakes is this really me replacing
02:41 - unicorns with cupcakes I think it is
02:44 - okay okay so you can see now the value
02:47 - of s is cupcakes and rainbows okay um
02:51 - this definitely needs some sort of
02:52 - background music but whatever okay so
02:54 - this is how replace works now obviously
02:56 - it's more powerful than this because I
02:58 - haven't really done much in the regular
03:00 - expression other than simply
03:05 - um uh um simply
03:09 - um replace a literal word with another
03:11 - literal word so let's do this a little
03:14 - bit differently and say something like
03:17 - um by the way 1 2 3 4 5 6 7 1 2 3 4 5 6
03:23 - 7 wait eight so unicorns is seven okay
03:26 - so let's let's let's uh let's uh let's
03:30 - say uh s is unicorns and rainbows and uh
03:36 - cupcakes and what I want to do I'm going
03:39 - to clear this out is I want to say uh s
03:42 - s. replace and what I want to do is
03:45 - replace any sequence of word characters
03:49 - that is between six and eight characters
03:53 - with um rainbows unicorns cupcakes what
03:57 - else is there is there anything in this
04:04 - world um we'll just make him all I don't
04:09 - I'm really I'm waiting for the chat to
04:11 - like catch up with me and give me a
04:12 - suggestion but the chat is 15 seconds
04:14 - behind so you the poor person in the
04:16 - future watching this video with no live
04:18 - chat yes kittens thank you very much uh
04:20 - kittens uh I need to replace it with
04:22 - kittens so and I forgot my slash here um
04:25 - so I'm going to run this it was worth
04:27 - waiting for the kittens right so if we
04:28 - run this uh syntax error what did I
04:32 - what's what's wrong with
04:35 - this missing parentheses oh I forgot the
04:38 - parentheses here sorry that's a curly
04:42 - bracket kittens and rainbows and
04:44 - cupcakes so wait what's the
04:46 - original uh ah and guess what okay
04:49 - fascinating fascinating thing that
04:51 - happened I believe that rainbows which
04:53 - has eight characters and cupcakes which
04:56 - has eight characters should also be
04:58 - there like kittens no sorry unicorns has
05:01 - 1 2 3 4 oh they all have eight
05:04 - characters they all have eight
05:05 - characters so let's do this again
05:08 - replace any eight character word with
05:10 - kittens but still it only replaced the
05:12 - first one why because I forgot about the
05:15 - global flag so the global flag is very
05:17 - important the replace function is only
05:19 - going to replace the first instance of
05:21 - something it matches without the global
05:23 - flag kittens and kittens and kittens and
05:26 - kittens kittens and kittens and kittens
05:27 - and kittens kittens kittens and kittens
05:29 - and kittens I'm really losing my mind
05:31 - someone please make a song out of that
05:34 - okay um now okay so uh that's what
05:39 - replace does that's the basics of
05:40 - replace now let me show you that you can
05:41 - also use capturing groups I'm going to
05:43 - get a lot of thumbs down on this video I
05:45 - can tell already you know some people
05:47 - will like it but a lot of people won't
05:48 - internet doesn't you know okay um so you
05:50 - can also use capturing groups so let's
05:52 - just say that what I want to do is
05:55 - anytime I see a vowel anytime I capture
05:59 - a vow vowel I want to double the vowel
06:02 - so um I'm going to clear this and I'm
06:05 - going to do uh s so that's the string
06:08 - right so what I want to say is
06:12 - replace what I want to match AE IO U
06:17 - right I want to match any AE IO
06:22 - U and I want to replace it with what
06:25 - well what did I match so what if I put
06:28 - the parentheses around the whole thing
06:30 - so I'm not doing anything too
06:31 - sophisticated where I'm you know
06:33 - capturing subgroups but of course I
06:35 - could do that you could do that phone
06:36 - number that I showed you with capturing
06:38 - groups in a previous video but let's
06:40 - just say I want to capture the
06:44 - vowel and I want to replace it with what
06:47 - what I captured followed by what I
06:50 - captured so this
06:53 - uh I could probably think of a more
06:55 - clever example but you get the idea so
06:58 - here I am Capt taking replacing anything
07:00 - I capture with
07:02 - itself u whoops ah oops of course I'm
07:05 - sorry this always needs to be in a
07:06 - string so even though what's a little
07:08 - tricky about this is this is a regular
07:10 - expression so forward SL forward slash
07:12 - this is a string so it's in quotes but
07:14 - JavaScript is going to figure out that
07:16 - this is the secret code for the back
07:18 - reference even within the string itself
07:20 - I
07:21 - think unit ah but look at that it only
07:24 - did the first one why because I forgot
07:26 - the global flag yet
07:28 - again unicorns and
07:31 - rainbows and
07:34 - cupcakes there we go see so you can use
07:37 - back reference um you know maybe look at
07:40 - the sort of double words thing or double
07:42 - words or you know what how might you you
07:45 - talk about with some other clever way
07:46 - that you could um certainly do um oh and
07:49 - sometimes why yes I forgot about the
07:52 - sometimes why okay so um anyway so so
07:55 - that's something you can do with back
07:56 - references okay now here's the thing
08:00 - I'm really getting to something I need
08:01 - my drum roll sound effect that I don't
08:03 - have someday I'll have a drum roll sound
08:04 - effect this is the real magic of
08:09 - using regular expressions in JavaScript
08:12 - is what I have shown you is regular
08:14 - expression and the string that you
08:16 - intend to
08:17 - substitute
08:21 - but what happens if you pass a function
08:25 - into there this is incredibly powerful
08:27 - and somewhat unique to JavaScript that
08:29 - you can actually have a call back
08:31 - function so let's see how this
08:34 - works um so I'm going to do this in the
08:37 - code because I don't can't think of
08:40 - another way to easily demonstrate this
08:42 - using the console so let's look at this
08:45 - okay so I'm going to go to the code for
08:47 - a second and I'm going to write a
08:49 - regular
08:50 - expression I want to
08:52 - match any um I'm going to match a word
08:57 - boundary followed by
09:00 - uh word boundary followed by some amount
09:04 - of uh word characters one or more
09:07 - followed by word boundary okay so that's
09:10 - my regular expression then what I want
09:13 - to say and I'm going to give myself some
09:14 - line breaks here to raise this up now
09:16 - what I want to say is
09:19 - VAR okay um Here Comes Here Comes Here
09:23 - Comes uh no no s.
09:26 - replace with that regular expression and
09:29 - and I'm just going to say something like
09:30 - replacer now I can write an anonymous
09:33 - function right into there I can write an
09:35 - anonymous function right into there but
09:36 - just to make things a little bit easier
09:38 - to follow I'm going to write a separate
09:40 - function down here replacer and I'm
09:43 - going to give it an argument match and
09:45 - the only thing I'm going to do is I'm
09:47 - going to say console.log
09:51 - match and auto format gave got get got
09:55 - rid of all my line breaks it's going to
09:56 - do this again as soon as I hit command s
09:58 - that's very annoying to me I'm going to
09:59 - put something down
10:03 - here there thank you okay so what's
10:06 - going on here the replace function is
10:10 - going to execute a call back for every
10:13 - single
10:14 - time you um and I want to say the uh I'm
10:18 - going to say VAR new string and I also
10:21 - want to say
10:23 - console.log new string and I'm GNA say
10:25 - create P new string ah camera come back
10:29 - to me
10:31 - camera okay so I want to just sort of
10:35 - look at what's happening on the inside
10:37 - here so let me just run this hit refresh
10:41 - going to move this over a little bit I'm
10:44 - going to hit submit and then look so
10:47 - first of all it got it matched a and
10:51 - then it said undefined rainbow so that's
10:53 - a little bit crazy huh what's going on
10:56 - well first of all what did it do
11:00 - first thing is it executes replacer for
11:03 - every single match of this regular
11:04 - expression but notice the regular
11:06 - expression does not have does not have
11:08 - the global flag so it console logged the
11:11 - match which is the first thing it found
11:13 - a and then it replaced it with what it
11:16 - didn't replace it with anything it will
11:18 - replace it in the string with whatever
11:19 - you
11:21 - return uh
11:24 - blueberry so now let me run this
11:28 - again
11:29 - it replaced a with blueberry now let me
11:33 - do something let me give this the global
11:39 - flag Blueberry Blueberry Blueberry
11:41 - Blueberry Blueberry Blueberry Blueberry
11:42 - Blueberry right what it's doing is it's
11:44 - saying for every match of that regular
11:47 - expression return blueberry meaning
11:49 - replace it with this but do you realize
11:51 - what's now
11:53 - possible this function has two lines of
11:55 - code I'm console logging the match and
11:57 - I'm returning blueberry but now you have
12:00 - the entire known power of the
12:02 - programming Universe to put in here so
12:04 - any logic you could possibly imagine you
12:07 - could put in here so for example uh this
12:09 - is not going to be that interesting but
12:10 - I could say if match. length equal a
12:15 - equals
12:16 - 4 uh return match. two
12:25 - uppercase otherwise just return
12:28 - match
12:30 - what is this going to do this is saying
12:32 - if the thing you matched has four
12:34 - characters return an uppercase version
12:36 - of it otherwise return it as it is let's
12:40 - look at this
12:41 - now so you can see all the four-letter
12:44 - words are now made all uppercase this is
12:47 - not that of innovative of an example but
12:50 - imagine what I could do I could make an
12:52 - API query here I could check the day's
12:54 - weather here I could do anything every
12:57 - time this regular expression matches so
12:59 - I can't emphasize here enough how much
13:00 - is possible within here and I wish I
13:02 - could make this video hours long and
13:03 - just kind of go through all sorts of
13:05 - crazy ideas but I'm leaving it to you
13:06 - the viewer to try to come up with your
13:08 - crazy ideas right here so let's though
13:11 - let's look at a little bit more I'm
13:13 - trying to think of how I can make this a
13:15 - little bit more interesting let's go
13:17 - back to the phone numbers for a second
13:20 - okay uh so I'm GNA put some some numbers
13:23 - in here 999 D12 34 and uh you know 111 d
13:30 - 8765 and uh 8
13:35 - 8675309 okay so I put in a put a dot in
13:37 - there so I I just keep the dash in there
13:39 - so I just want to look at what happens
13:41 - with capturing groups because this is
13:43 - even more sort of crazy what you can do
13:47 - so now if I go back to my code and I
13:50 - change my regular expression to match
13:53 - the phone numbers so I'm going to say
13:55 - I've done this so many times now I want
13:57 - three digits followed by a dash followed
13:59 - by uh four
14:01 - digits and I just want to um I'm going
14:05 - to log that match I'm going to take this
14:07 - out and I'm going to just say return
14:09 - match so the replacer is doing nothing
14:11 - so I just want to make sure that this
14:12 - regular expression is working and I'm
14:14 - going to run this hit submit and you can
14:17 - see and I don't I don't want to uh log
14:19 - this in the console I just want to see
14:20 - the matches you can see there we go so
14:22 - I'm matching those phone numbers in the
14:24 - text now what happens when you add a
14:29 - capturing group and this really will
14:30 - unlock you know so much more I said the
14:33 - you know entire power of the known
14:35 - universe is right here watch what watch
14:37 - this so um so first of all let me make a
14:40 - capturing group I'm going to put a
14:42 - capturing group around here making I'm
14:46 - going to put a capturing group around
14:48 - that first group and now I'm going to
14:50 - run this
14:51 - again H nothing different happened why
14:55 - how do I get access to that group well
14:57 - let's look at this function notice how
15:00 - this function has an argument this call
15:02 - back replacer function has an argument
15:04 - it gets the first argument is
15:08 - match group zero the full match the full
15:11 - match is always group zero guess what
15:13 - the second argument is group one guess
15:15 - what the third argument is group two now
15:17 - there is no group two but I can just
15:19 - list them there because maybe I you know
15:21 - maybe I want a group two I'll have a
15:22 - group two right here so what I'm going
15:24 - to do is now I'm going to say
15:26 - console.log match console.log group
15:31 - one console.log group 2 let me run this
15:35 - again hit submit and you can see look at
15:37 - that I now am able to have the call back
15:40 - separate out the different
15:42 - groups if my brain works any better I
15:45 - would have all sorts of creative ideas
15:46 - what I would love for you to do I say
15:48 - this already tell me your creative ideas
15:50 - of what kind of crazy replacer stuff you
15:52 - could do with this and I'll come back
15:53 - and do some coding challenges with some
15:55 - of those ideas or share them with me and
15:56 - I'll um but but this is really unlocking
15:59 - a lot of possibilities for all sorts of
16:01 - strange text replacement algorithms that
16:03 - you can use um the last thing I just
16:05 - want to mention though is that instead
16:08 - of actually having to have these
16:09 - arguments listed as separate variables
16:12 - you can also use a secret
16:15 - variable in JavaScript it's not so
16:17 - secret called the arguments array the
16:20 - arguments array exists for any function
16:22 - that just stores all of the arguments
16:24 - passed into the function the the the
16:26 - values of the parameters as in an array
16:28 - and I I have a separate video which
16:30 - actually covers this which you can look
16:31 - at but I just want to show you what that
16:32 - looks like here and so you can see here
16:35 - um and by the way look at this if you
16:38 - look at that there's actually more stuff
16:39 - that we didn't even realize there's the
16:41 - full match group zero group one 15 I
16:46 - think is
16:48 - the the length of the string I guess
16:50 - that's just the length of the original
16:52 - string no what is that somebody tell me
16:56 - um and then the full string is there in
16:59 - case you needed that as reference as the
17:00 - fourth argument what is the
17:03 - 15 I'm trying to remember what the 15 is
17:06 - somebody in the chat tell me course the
17:09 - chat is 15 seconds behind me so I don't
17:11 - know I'm GNA have to look that up I'm
17:12 - going to get so many YouTube comments of
17:13 - telling me what it is because I can't
17:15 - remember um but uh you can see that
17:17 - there's Med it's the length of all the
17:19 - groups together okay position in string
17:22 - someone says position in string someone
17:23 - says length of all the groups together I
17:26 - I I have a feeling that um that it's
17:29 - probably is
17:33 - uh let's just quickly test out this
17:40 - idea let's add those groups all
17:44 - together 15 yeah so 15 seems to be the
17:47 - length of all the groups added together
17:49 - I don't know what that's useful for
17:50 - exactly but um seems to be useful for
17:53 - something okay so um this is the basic
17:55 - gist of it um um uh there's so much that
17:59 - you could do with replacing text um
18:03 - think about types of different sort of
18:06 - interesting creative possibilities of
18:09 - how you might do text mashups text
18:12 - translations uh API queries mixing up
18:16 - text reversing order swapping things out
18:19 - um but um and so I encourage you to play
18:21 - around with this replace idea play
18:23 - around with the groups and let me know
18:25 - if you have some creative ideas or some
18:27 - things that you make with it and I'd
18:29 - love to hear about it and I'm going to
18:30 - do a coding challenge where I use some
18:31 - of this just to show you how to sort of
18:33 - interact with words on a individual
18:35 - basis okay I'll see you in the next
18:37 - coding Challenge
18:43 - [Music]
18:48 - video