00:00 - [DING]
00:01 - Welcome back to working with
data and APIs in JavaScript.
00:03 - So here I am building this
project called The Weather
00:06 - Here.
00:06 - So far what I have is a
web page that geolocates,
00:10 - finds latitude and longitude,
sends that to a node server.
00:14 - The node server receives it,
sends that to an API call
00:17 - Dark Sky, which gets
the weather information,
00:19 - and then sends that
back to the client here.
00:22 - One other thing I
want to show you
00:23 - is spoofing different
latitude and longitudes.
00:26 - Because ultimately,
this project is
00:28 - going to become much
more interesting
00:30 - if I can manage to
not just check in
00:32 - at the exact same latitude and
longitude over and over again.
00:35 - Presumably, I'm not able
to pick up this laptop
00:37 - and just carry it
around and walk
00:39 - about the streets
of New York City
00:40 - to get different locations.
00:41 - If I'm over here
in the console, I
00:43 - can actually click
Escape, which brings up
00:45 - this extra console
shelf, drawer,
00:47 - who knows what it's called.
00:48 - And I could click over
here with these three dots
00:50 - and look for sensors.
00:52 - So, by the way,
this is also useful
00:54 - if I want to simulate
the idea of I'm
00:55 - holding a mobile device that has
an accelerometer for moving it
00:58 - around.
00:59 - But I'm going to click sensors.
01:00 - And then what I want to
look for is Geolocation.
01:04 - So you can see there's a bunch
of other things I could spoof,
01:06 - but here, I want
to do geolocation.
01:08 - And in Override, I could say,
ah, I want to be in Berlin.
01:11 - So if I put Berlin
there and I hit refresh,
01:13 - now you can see I have
the weather in Berlin.
01:16 - So I'm going to use this
maybe periodically, and just
01:19 - check in in different
locations all over the world
01:22 - to save more interesting
information to the database
01:24 - itself.
01:25 - And now let me grab some
actual weather information
01:28 - and display it here
on the web page.
01:30 - I'll create a paragraph
element with some spans.
01:33 - [MUSIC PLAYING]
01:36 - So now I have a
paragraph element
01:37 - that says, the weather
here is span id
01:40 - summary with a temperature of
span id temperature degrees
01:43 - Fahrenheit, which I'm
pretty sure is the units--
01:46 - the measurement that I'm
getting back from the Dark Sky
01:48 - API itself.
01:49 - So now I just want to go
into my sketch.js code.
01:53 - Here is where I'm
actually console
01:56 - logging that information.
01:58 - And if I look in the
browser, I can see here
02:01 - that all the data that I
want is under currently,
02:06 - under temperature,
and under summary.
02:08 - Perfect.
02:10 - I planned this correctly.
02:11 - So now I should be able to say
document.getElementById summary
02:19 - equals json.currently.summary.
02:23 - So I just want to
take that summary
02:24 - and put it in the text
content of that DOM element
02:28 - and then do the same thing
for the temperature element.
02:31 - And this is temperature.
02:33 - And there we go.
02:35 - So now if I hit
Refresh, we can see,
02:38 - aha, the weather here is mostly
cloudy with a temperature
02:41 - of 62.91 degrees Fahrenheit.
02:44 - I'm going to change this
to the degree symbol,
02:46 - and I'm going to
capitalize Fahrenheit.
02:48 - Hit refresh again.
02:50 - And I'm going to also traveled
to Sao Paulo and hit Refresh.
02:54 - And now the temperature in--
02:55 - the weather in Sao
Paolo is partly
02:57 - cloudy with a temperature
of 73.64 degrees Fahrenheit.
03:01 - Let me also reorganize
this into one paragraph.
03:03 - That's, I think,
what I meant to do.
03:05 - All right, now I have
that in one paragraph.
03:07 - I like the way that looks
a little bit better.
03:09 - And also, I've
misspelled Fahrenheit.
03:11 - It should be F-A-H-R, so
I should really fix that.
03:14 - But I can also lazily just
change it to F. There we go.
03:21 - I could be satisfied with this,
and I'm quite happy with this.
03:24 - But I want to
demonstrate to you what
03:26 - does it mean to work
with multiple APIs
03:28 - within one application.
03:29 - So I think it's
useful, as an exercise,
03:32 - to go and try to connect
to yet another API
03:35 - and get more information to add
more context to this web page.
03:39 - OpenAQ is an open data, open
source project that aggregates
03:42 - a lot of different
air quality readings
03:44 - from many different sources.
03:45 - And you could read about
their data sources,
03:47 - which include government
and other kind of research
03:49 - institutions.
03:50 - And it's important to
read the disclaimer
03:51 - and look at the
licensing information
03:53 - about how the data is collected
and where it comes from.
03:56 - OpenAQ has an API with a variety
of different endpoints for you
03:59 - to request that air
quality information.
04:02 - And the endpoint that
I want to look at
04:04 - is the latest
endpoint, which I can
04:06 - pass a latitude and longitude
as a coordinates parameter.
04:10 - And this is the endpoint--
api.openaq.org/v1/latest.
04:15 - So let's just try place
copying and pasting that
04:18 - into our browser.
04:20 - So we can see it's
actually killing
04:22 - us a lot of information.
04:23 - So I don't want just, like,
all the entire database
04:26 - of air quality information.
04:27 - This is a ton of
information that comes in.
04:29 - I want it for a specific
latitude and longitude.
04:31 - So it looks like, if I go
back to the documentation,
04:34 - that right here,
under coordinates,
04:37 - I can give it a
property-- coordinates
04:41 - equals the latitude
comma the longitude.
04:44 - So this should work by
doing the following.
04:47 - So I can go over to this
URL and type in what's
04:52 - known as a URL query string--
04:53 - question mark
coordinates equals.
04:56 - Now I need to give it some
latitude and longitude.
04:59 - I am at 40.73 comma
negative 73.99.
05:05 - So I can put that in.
05:07 - All right, so it looks like
I'm getting an air quality
05:09 - measurement from a location
at Division Street, which
05:13 - is this distance, probably
in meters, from me.
05:16 - And this is the
particulate, probably,
05:18 - in the air, the micrograms
per meters cubed.
05:21 - And obviously, I want to read
through the documentation
05:24 - to be a bit more clear about
what these measurements exactly
05:26 - are.
05:26 - And I'll try to do that before
I put any information on the web
05:29 - page itself.
05:30 - If I wanted to, I
could also, say,
05:33 - limit only to get measurements
within a certain area,
05:36 - within a certain
radius, by meters.
05:38 - And you can see there
are a bunch of other ways
05:40 - that I can sort or limit
the number of data points
05:44 - that I get back.
05:45 - You might also notice
here that this is not--
05:47 - there's no API key here.
05:48 - I don't have to
authenticate, log in.
05:49 - I don't have any,
like, secret key.
05:51 - And so, in essence,
I could just make
05:54 - a fetch request, a GET
request, to this endpoint,
05:57 - right from the
client-side code itself.
05:59 - But since I'm already requesting
the weather information
06:01 - from Dark Sky, from
the server, let's
06:04 - also make a request to here
from the server, as well.
06:07 - Let's grab this URL.
06:10 - I'm going to go to
the server code.
06:12 - And the wonderful thing
about using async and await
06:16 - is I could just do another
call to fetch right here.
06:20 - So let's change
this to weather_url.
06:27 - Call this weather_response
and weather_data.
06:33 - The reason I'm doing
that is because I
06:34 - want to then do exactly the same
sequence with an air quality
06:40 - URL, an air quality response,
and air quality data.
06:44 - So let's put in the air
quality URL, which is this,
06:53 - but with coordinates equals
the latitude and longitude.
06:57 - Then, we're going to say
fetch the air quality URL
07:01 - and then convert that
response into a data.
07:05 - And I also need to change this
to weather_url and change this
07:09 - to weather_response.
07:11 - So now I have weather
data and air quality data.
07:15 - I have both of
those data sources.
07:17 - All I need to do
is just put them--
07:19 - I'm going to put them
together in another object.
07:21 - I'll say constant data equals
weather colon weather_data.
07:26 - And then air quality
colon aq_data.
07:32 - And that is what I'm going
to send back to the client.
07:35 - Now I'm getting data
from multiple APIs.
07:38 - I'm getting weather information
from Dark Sky and air quality
07:41 - information from OpenAQ.
07:43 - I should point out that I
don't have to sequence one
07:46 - after the other.
07:47 - Because they're
asynchronous calls,
07:49 - they can happen
somewhat in parallel.
07:51 - I could use something
called promise.all to wait
07:53 - for a whole bunch of
different asynchronous events
07:56 - to all complete.
07:57 - And I've actually covered
this in a separate video.
07:59 - You could think of this as a
little exercise to yourself.
08:01 - Maybe change this
to use promise.all.
08:03 - But with just two APIs
here, I'm happy to just do
08:05 - this in sequence.
08:07 - Let's check to
see if this works.
08:08 - I'm actually running
nodemon right now,
08:10 - so the server has been
restarted for me automatically.
08:13 - Let's move to Shanghai,
and let's hit Refresh.
08:16 - And let's see-- ah, uncaught,
cannot read property summary
08:19 - of undefined.
08:20 - What just happened?
08:21 - Sketch.js line 14.
08:23 - Ah!
08:27 - So I changed the way
the data comes in.
08:30 - The data came in before as
just the actual information
08:34 - from Dark Sky.
08:35 - But now, I put everything in
a property called weather.
08:40 - So did it console.log?
08:42 - Yeah.
08:42 - So you can see here I have
air quality with all the air
08:44 - quality information and
weather with all the weather
08:46 - information.
08:47 - So I need to change
this to weather.json.
08:51 - And I don't love the
way I'm doing this.
08:53 - I think what I'm going
to do is I'm going
08:54 - to say const weather equals--
08:57 - sorry, it's
json.weather.currently.
09:01 - I'm just going to do that.
09:02 - For right now, I'm just
going to say air equals
09:05 - json.air_quality.
09:07 - I'll have to look
at what I'm looking
09:08 - for in there in a second.
09:10 - So now the text content here
should be weather.summary.
09:16 - And the text content here should
just be weather.temperature.
09:20 - So let's see if that works.
09:22 - And hit Refresh.
09:24 - And there we go.
09:25 - We now have the latitude and
longitude and the weather
09:28 - information from Shanghai.
09:29 - And let's put some
information about air quality.
09:32 - So in here, under air
quality, under results,
09:35 - I think what I'll do--
09:36 - oh, there are no results.
09:38 - So I suppose OpenAQ
just doesn't have
09:41 - any information for Shanghai.
09:42 - Let's go back to New York,
because I know there's
09:43 - information in New York.
09:45 - I guess I could do No override,
and that'll get me back
09:47 - to New York.
09:48 - So now I've got the weather
in New York, which is clear,
09:50 - 65 degrees.
09:51 - And I can go down here and look
at air quality, under results.
09:54 - We can see here are
my sensor readings
09:57 - under zero, under
measurements, under zero.
10:03 - So maybe this is what
I want to report.
10:06 - This data is PM data, or
Particulate Matter data.
10:09 - And PM 2.5 refers
to fine particles
10:13 - are 2.5 micrometers in
diameter or smaller.
10:16 - So that's the concentration
of those particles
10:20 - within a cubic meter,
or meters cubed--
10:23 - micrograms per meters cubed.
10:26 - Now, it's also
important to be aware,
10:27 - I'm recording this on
Tuesday, May 21, 2019.
10:31 - And the last time this
reading was updated
10:32 - was February 4, 2019.
10:35 - So this isn't necessarily
real-time data.
10:38 - I assume, looking through all
the different data sources
10:41 - that they're
aggregating, some are
10:43 - updated in much more
real time than others.
10:45 - But for now, I'm
just going to grab
10:47 - whatever the first measurement
is and try to get the value--
10:50 - 24.9-- and the units and
display that on the page itself.
10:57 - So what I want is
air_quality.results index 0 dot
11:01 - measurements index 0.
11:04 - Air_quality.results index
0 dot measurements index 0.
11:12 - And then I need to add another
sentence to my HTML page.
11:18 - [MUSIC PLAYING]
11:22 - OK, I have the concentration
of particulate matter
11:25 - with a span is another span in
the [INAUDIBLE] units last read
11:30 - on date.
11:31 - So I want to take that
stuff from the database
11:33 - and fill it in on
all these spans.
11:35 - So let me add a bunch more
document.getElementId calls.
11:39 - [MUSIC PLAYING]
11:42 - And then I want to set
all these particular span
11:44 - elements to the correct piece
of data from this air variable
11:47 - up here.
11:48 - So it'll be air.parameter,
air.value, air.units,
12:01 - and I think this one is
called air.lastUpdated.
12:08 - We can confirm that by seeing
them all in here-- parameter,
12:12 - unit, value, and lastUpdated.
12:14 - So it's not units, it's unit.
12:17 - OK, let's try refreshing this.
12:21 - Great.
12:21 - There it is.
12:22 - Now we have the
particulate matter reading
12:24 - in this paragraph, as well.
12:26 - Let's go to another location.
12:28 - Let's go to Mumbai,
and let's hit Refresh.
12:33 - And there's our
reading in Mumbai.
12:36 - So this wraps up this
piece of the project.
12:38 - I now connect to two
different APIs on the server.
12:41 - I get the information,
both those APIs,
12:42 - pass it to the client, display
it here on the web page.
12:45 - Before I go into the
next video, I probably
12:47 - should add some form
of error handling.
12:49 - There's so many things
that could go wrong here.
12:51 - I'm not going to do
comprehensive error handling
12:54 - in every possible
scenario, by any means,
12:56 - though it's interesting to
try to break this project as
12:59 - much as you can and keep writing
code to account for that.
13:01 - But one thing I know I could
do, because I discovered it
13:03 - earlier, is I could
go to Shanghai, where
13:05 - there are no air
quality readings,
13:07 - and I could hit refresh.
13:08 - And we'll see I
get an error here.
13:10 - On the one hand, as an end
user, is this experience OK?
13:13 - I mean, you have
to ask yourself,
13:14 - why am I making this
project in the first place?
13:16 - But at a minimum, I
could be able to handle
13:19 - this a bit more elegantly.
13:20 - And so this is cannot
read property measurements
13:23 - of undefined.
13:24 - That's because here, there
is no measurements property,
13:29 - because there were no results.
13:31 - Now, what I often
do in error handling
13:33 - is I start to add some
if statements-- well,
13:35 - if there are no measurements,
if the length of the array
13:37 - is less than this.
13:38 - But one way that I can
account for a variety
13:41 - of any error or specific
errors is by using try/catch.
13:45 - A try/catch statement
is a block of code.
13:47 - It's code that you want to
try, and if anything goes wrong
13:50 - while you're trying
that code out,
13:51 - you could then catch the error
and execute a different code
13:55 - based on what that error is.
13:56 - And you can handle different
errors in different ways
13:58 - or any error in the same way.
13:59 - I'm going to use it
in the simplest way.
14:01 - And I'll refer you to the MDN
Web Docs to read more about it.
14:04 - And I also have
another video where
14:05 - I cover it a little bit as
part of my vid series on async,
14:08 - await, and promises.
14:09 - So for right here, right
now, all I want to do
14:11 - is I just want to
try all this code.
14:14 - I'm going to say
try, and then I'll
14:17 - put the closed curly
brackets at the end.
14:20 - And then I'm going to say catch.
14:21 - And then I'm going to give
an argument like error.
14:24 - And then, basically, I can say--
14:26 - I'm just going to add,
right now, console.log,
14:29 - something went wrong.
14:33 - Now, this is not
good error handling,
14:34 - but you can see the idea.
14:35 - Try all this code.
14:36 - Anything goes wrong,
spit that out.
14:38 - I'll go back to the
web page, hit Refresh,
14:40 - and we can see, ah,
something went wrong.
14:42 - Now, this isn't really doing
excellent error handling.
14:45 - In fact, all I'm really
doing is exactly what
14:47 - it would do by default, anyway.
14:49 - Because I could
just console.error,
14:51 - which will just log
something, but in red.
14:54 - And I could log
that error itself.
14:56 - So now if I hit
refresh, you could
14:57 - see this is basically
what it was before.
14:59 - But I could do
something more specific
15:02 - here, like I could create--
15:03 - I could fill in
these DOM elements,
15:05 - like no reading available.
15:06 - I could take this right here,
and I could put this down here,
15:11 - and I could say no reading.
15:14 - So now if I go back to the page
and refresh, we can see, well,
15:16 - at least it says
no reading there.
15:19 - So as an exercise
to you, I might
15:21 - suggest that you handle the
errors more thoughtfully.
15:24 - Maybe you completely change
what the sentence says.
15:26 - And ultimately,
really, something
15:28 - that you won't want to do before
you move on to the next video
15:30 - is design this or
rewrite the narrative
15:32 - in a more thoughtful way.
15:33 - Or try pulling other
elements of data
15:36 - from the air quality
API or the weather
15:38 - API itself to
display on this page.
15:40 - In the next video, I'm
going to move on and work
15:43 - on this check-in button.
15:44 - So when I click
Check In, I'm now
15:46 - going to save a snapshot of
all of this to the database.
15:49 - Because ultimately, what I want
to do is view all of those logs
15:53 - plotted on a map.
15:55 - [MUSIC PLAYING]
16:04 - [DING]