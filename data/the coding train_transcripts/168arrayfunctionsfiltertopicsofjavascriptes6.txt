00:00 - all right I'm back for another
00:02 - higher-order function with JavaScript
00:04 - arrays video and in this video I will
00:08 - talk about filter filters actually to be
00:11 - honest it might be my favorite one of
00:13 - these it's just it's lovely so let's
00:15 - look at what let's so filter what does
00:17 - the word filter means it's it's called
00:20 - filter for a reason just like you might
00:22 - filter your water and filter out all the
00:24 - stuff you don't want if you have an
00:26 - array that has some grime and stuff in
00:29 - it you could filter it out so how do you
00:32 - do that it's a higher order function so
00:37 - what that means is it expects as an
00:40 - argument some function and what that
00:43 - function is it's a function that
00:45 - receives as an argument itself an
00:47 - element of the array and based on that
00:50 - element it should return true or false
00:53 - and I always forget this I think it
00:55 - returns true if you want to keep it and
00:57 - false if you don't want to keep it so
00:59 - even though it's a filter you're
01:00 - thinking true I would have filter it out
01:02 - I think it's true I want to keep it
01:03 - we'll have to try and look up and
01:05 - documentation ok and we're gonna do the
01:07 - same thing so this is where are we last
01:09 - left off with this reduce stuff she's
01:11 - still here after that thank you and so
01:14 - what I'm going to do is I'm going to
01:16 - keep this same little silly array and
01:18 - I'm gonna say I'm gonna write a function
01:19 - and I'm gonna say is you know
01:26 - interesting let's hmm let's call this
01:30 - function is even so what this function
01:35 - is going to do is it's going to take a
01:37 - number and it will return true if it's
01:40 - an even number or false if it's an odd
01:42 - number so it's going to if num and how
01:45 - do I do this I can use the modulus
01:47 - operator the modulus operator see the
01:49 - coding train video from go on Levin
01:51 - about modulus is an operator that gives
01:52 - you the remainder of division so if you
01:54 - divide something by two and get a
01:56 - remainder of zero it's an even number so
01:57 - if num modulus two equals zero then I
02:01 - want to return true otherwise I want to
02:04 - return false now I always do this
02:06 - because this is the kind of person I I
02:08 - will write it in seven lines of code to
02:11 - make it say exactly what
02:12 - doing even if it can be done in one line
02:14 - of code but this is this is a moment
02:15 - where I think it's worth today these
02:17 - videos are a little bit about reducing
02:18 - the amount of typing it's worth saying
02:20 - that I don't need to say if this is true
02:22 - return true if it's true just return the
02:24 - fact that it's true so this evaluates a
02:26 - true or false I'm gonna just return that
02:28 - so I can do this
02:29 - now I should be able to say what's I
02:32 - should be able to say
02:33 - Vale's dot reduce is even so the
02:41 - question is is my array going to have
02:44 - only left in it the even numbers or the
02:47 - odd numbers we could look it up in the
02:50 - documentation I could speculate but we
02:52 - could also just try it now I'm pretty oh
02:54 - this didn't say reduce this should say
02:56 - filter of course I should be filtering
02:58 - based on this function hello and I'm
03:02 - pretty sure let's just double check I'm
03:04 - pretty sure that this is the case where
03:06 - it creates a new array and returns back
03:07 - like I like we saw with the map function
03:10 - so if I save this here and I hit refresh
03:12 - we're say okay so that's the original
03:14 - array so this is not working yet I want
03:16 - to say Val's equals the new erase I'm
03:19 - going to overwrite that variable with
03:21 - the new array that's been filtered and
03:22 - I'm gonna hit refresh and there we only
03:25 - have the even ones left so we have the
03:27 - even ones left because this returned
03:32 - true so if it returns true keep the
03:34 - value if it returns false don't keep the
03:37 - value and by the way what I'm gonna do
03:39 - with this later in like a particle
03:40 - system example is I have an array of all
03:42 - these particle objects I could just say
03:44 - filter out all the ones that are off the
03:46 - screen or filter all the ones out that
03:48 - alpha has faded out to zero so that's
03:50 - why this filter can become really really
03:52 - useful
03:53 - so let's now shorten this using es6
03:55 - syntax one thing I might want to do is
03:59 - just use this as X right change this to
04:01 - X now I'm gonna get rid of function I'm
04:04 - gonna get rid of the name I'm gonna put
04:07 - the arrow syntax in I'm gonna forget
04:08 - about this and I'm gonna get rid of the
04:13 - return because it's assumed so basically
04:15 - this is what I can do right this is
04:20 - basically I can now write that I do that
04:22 - really quickly because I'm kind of
04:23 - assuming you've watched my previous
04:24 - videos where I stay
04:25 - through that more slowly but basically I
04:27 - can say hey filter every value X based
04:30 - on the weather X modulus two equals zero
04:35 - so this should give me exactly the same
04:38 - result
04:39 - again this is the thing this is why I
04:41 - hesitate this is so unlike me I don't I
04:44 - I would write this in like ten but
04:47 - there's there's a wonder and beauty to
04:48 - this because even though I feel like
04:50 - this is cryptic and a little harder to
04:52 - follow there is a moment I think after
04:54 - you get used to this arrow syntax and
04:56 - write a lot of these functions and I'm
05:01 - the comments are going on that I'm going
05:03 - to look at in a second that you start to
05:04 - get used to this and this this becomes a
05:06 - bit more intuitive and it actually can
05:07 - make the code more readable look there
05:10 - we go it worked now I can say let's just
05:12 - filter it out for the odd ones equals
05:14 - one now I have the odd ones I could say
05:16 - not this and that would be that's like
05:20 - not the odd ones there's also the even
05:22 - ones and we could see there we go so
05:24 - wonderful I'm gonna take a look at the
05:26 - chat and see that I got some extra notes
05:27 - in there yep okay so um alka in the chat
05:32 - points out that you can filter by truthy
05:35 - and falsy values not just explicitly
05:37 - true or false what does that mean
05:40 - in other words I could filter out let's
05:42 - say I had an array of objects and a few
05:44 - of them were undefined
05:46 - you know we're empty I could filter out
05:48 - any spots where something's undefined so
05:51 - many things in JavaScript can be sort of
05:53 - like thought of as false or true based
05:55 - on its its value like if an object
05:58 - exists it's true if it's undefined its
06:00 - false
06:01 - so I could say so this would say like
06:07 - hey I have an array with stuff and over
06:09 - on this actually oh okay
06:11 - so I could actually just do this right
06:14 - that's what that's what alka is telling
06:16 - me so I could check like Oh filter out
06:18 - just keep everything that's not
06:19 - undefined right so this if I did this it
06:23 - would give me five four two one because
06:25 - I would filter out the undefined but
06:26 - undefined is like a falsie value so I
06:29 - could just filter out the items that
06:32 - like kind of turn into false things and
06:35 - actually this is going to give me yeah
06:37 - right so
06:39 - worked as well and I could say not X
06:42 - then I have autorai with just undefined
06:45 - okay so I think we've seen I think this
06:47 - has been good I think we've seen
06:48 - filtered filter filter filter the
06:51 - function filter do you have any
06:53 - questions we're not actually in the same
06:56 - room at the same time because I'm
06:58 - recording a video there is a live chat
06:59 - going on let me check if there's any
07:00 - questions two wonderful tips that just
07:03 - came in from the chat that I would love
07:05 - to show this is great having a live chat
07:07 - wide for these videos so let's say I
07:09 - wanted to do that eat that even thing
07:11 - again where I'm keeping only the even
07:13 - values I had it like this X modulus 2
07:15 - equals 0 that's the even ones well
07:18 - that's silly X modulus 2 evaluates
07:20 - always to 0 or 1 1 being true 0 being
07:24 - false in a sort of truth a falsie way so
07:27 - I could have actually done this and
07:29 - that's gonna keep the odd ones and if I
07:31 - were to say not I think I'm gonna need
07:33 - parentheses yeah
07:35 - I'm gonna need parentheses around this
07:38 - and now I'm gonna get the even ones so
07:41 - that's lovely then there's a lot of
07:44 - times when you're working with strings
07:46 - that's that I've had this problem
07:48 - actually a ton so let's say I have a
07:50 - this is gonna be useful let's say I have
07:53 - a string it was a dark and stormy night
07:58 - and what I'm doing is I'm saying let
08:01 - words equal s dot split and I'm gonna
08:04 - use a regular well I'm just gonna say
08:06 - split by space and then I'm gonna say
08:09 - console dot log words so you can see ah
08:14 - it was a dark and stormy night now
08:16 - things could happen like what if I had
08:18 - two spaces here by accident and I hit
08:21 - refresh look at that because I had two
08:23 - spaces I got an empty string by accident
08:25 - now the truth of the matter is if you
08:26 - watch my videos about regular
08:28 - expressions I can be more thoughtful
08:30 - about the split what I pass into split
08:34 - and use a regular expression for a
08:36 - particular pattern to match but even so
08:38 - like live item you might not know I can
08:41 - a break expression is a way of creating
08:42 - a pattern and so what I could do is say
08:44 - anything that's not a word character and
08:49 - what I wanted to see here is whenever I
08:52 - do this
08:52 - I always get things extra empty strings
08:55 - this happened even here so this is
08:57 - something that I do in one of my
08:58 - previous videos this is basically a
08:59 - secret code for saying split by anything
09:02 - that's not a through Z or 0 through 9
09:04 - and that has to do with meta characters
09:06 - and regular expressions but actually
09:07 - I've always having this problem where I
09:09 - get these extra empty strings so I could
09:11 - always just have a filter now filter by
09:14 - s s dot length by s dot length so look
09:20 - at this this should say cuz it's true or
09:22 - false see if this string has a not s dot
09:26 - length right if the string is the length
09:28 - of 0 I should filter it out so now let's
09:32 - do this we can see oh no no that didn't
09:35 - work not maybe I shouldn't use s here
09:40 - let's use X filter X not X dot length
09:45 - oh no X dot length I want X dot length
09:49 - ah the opposite that was right so I can
09:51 - use s here I just was using s in too
09:53 - many places because it was the string so
09:54 - word word dot length right so I want to
09:58 - use the length to evaluate the word
10:01 - whether it qualifies or not I could of
10:02 - course say like greater than 3 right if
10:05 - I want to just have only the 3 letter
10:07 - words this will get rid of it and a now
10:11 - you can see I only have darkstorm it got
10:12 - rid of was 2 because it's not greater
10:14 - than or equals 2 so you can see how this
10:16 - filter you can chain these kind of again
10:18 - I've got these really long lines of code
10:20 - which is very unlike me but you can see
10:22 - I can chain this stuff so I take this
10:24 - string I split it up so I have all the
10:27 - words but you know what I actually only
10:28 - want the words that are three or more
10:30 - characters and instead of having to
10:31 - write a loop and an if statement and you
10:33 - splice how I always do it this is a nice
10:36 - really one line of code kind of way of
10:38 - using colter oh I'm happy about that
10:40 - okay so thanks for watching this video
10:44 - I hope this was helpful to you about
10:45 - filter and I will come back in one more
10:48 - video I might as well I believe I've
10:49 - covered sorts somewhere but maybe I'll
10:52 - make a standalone video that's just
10:54 - about the sort function and that'll be
10:56 - the last one that I'll do in terms of
10:58 - these higher-order array functions thank
11:00 - you
11:04 - [Music]