00:00 - Hello and welcome to another coding
challenge video this coding challenge I'm
00:04 - going to implement something
called the diastic machine.
00:07 - So that I ask machine is that going to
build here is going to be based entirely
00:11 - on a technique that I asked a technique
invented in pioneered by Jackson MacLow
00:17 - artist poets composer playwrights
who pioneered a lot of
00:23 - algorithmic chance operate techniques
with around language to generate poetry.
00:29 - Without the use of a computer.
00:31 - So there's a long history of artists and
poets working with algorithmic
00:35 - computational methods or to generate
language to analyze language and this is
00:40 - something that it's really easy to forget
in the world of kind of computers and
00:42 - learning to program that so much of this
kind of stuff can be done manually and
00:47 - I encourage you to explore ideas
similar to this with manual
00:51 - processes before you start to implement
that digitally as a way of exploring and
00:55 - playing around you know there's another
famous example is William Burroughs caught
00:58 - up method which is called the cut up
because it's literally about making new
01:02 - text from folding and cutting preexisting
text and mashing them up together which of
01:06 - course you could do with a computer but
you could also do with scissors and
01:09 - that sort of thing but let me get beyond
that a great reference for this by the way
01:13 - that also mention is a virtual
music's parents and computer poetry.
01:16 - This is a book that you can link both
to Jackson the page about Jackson
01:21 - the cloak as well as the virtual
use of book in this video tutorial.
01:26 - But let me just read to you.
01:27 - The description of the diasporic machine.
01:31 - From excerpted from Charles O.
Hartman's book The process began with
01:36 - a striking phrase from Virginia Woolf
of the ways ridiculous in Piccadilly.
01:40 - This is going to be known
as the seed phrase so
01:43 - in the program that I'm going to write.
01:44 - I need a seed phrase.
01:47 - He rewrote the doll this is referred
to Jackson the globe looking for
01:50 - the first word that like ridiculous.
01:52 - Begad within our then read the next
word following that hat like ridiculous.
01:57 - I said second letter then
the next word Who's the.
02:00 - Third letter was D. and so on until
he spelled through the whole phrase.
02:03 - So if that didn't make sense to you.
02:05 - Let me come over here and
kind of diagram this out for you.
02:08 - So let's say Surprise surprise.
02:10 - I have the word.
02:13 - And I have some text like Ralph
02:18 - sat on the left of work actually
02:24 - painful.
02:29 - Ferd's.
02:30 - OK I'm designing something
02:34 - of designing something to work precisely
in a way that I can demonstrate this.
02:38 - So let me look in this text for
a word that starts with our hot roust.
02:44 - Let me work.
02:45 - Look at this text for
a word that has its second letter A that.
02:49 - Let me look for a word that has its
third letter I not on off but painful.
02:54 - People its fourth letter and affirms so
you can see this idea of taking this C.
03:00 - phrase in fighting words in the existing
body of text with just a single letter
03:05 - in the same spot and creating a new phrase
out of that and this is a way the sense of
03:09 - say I want to generate poetry but
I the writer don't want to
03:16 - play a sort of human being role that other
than sort of selecting the seed phrase and
03:19 - the source text let the algorithm
kind of do the talking.
03:22 - So to speak and this is I think
that you as a viewer of this video.
03:26 - I would encourage you reference some other
examples of this to generate your own
03:30 - system for doing this and see what
types of outcomes you can get if you
03:34 - make a Twitter bought from
it that sort of thing.
03:37 - OK So coming back over here.
03:38 - Let's go and
start with I have an empty sketch or
03:42 - entirely empty P five just sketch and
I'm saying no.
03:44 - Can this because I don't
want to see a canvas.
03:47 - I don't drawing anything in this and
I'm going to just find this here and
03:53 - you can see there's a I put
a header in the H.T.M.L.
03:54 - file Jackson the globe diasporic and
I don't see anything on the page.
03:58 - So the first thing that I
need to do is I want to.
04:00 - Get a seed phrase and let the viewer
the user type in the C phrase.
04:04 - So what I'm going to do in the H.T.M.L.
file is I'm going to say
04:09 - make a paragraph element and
I'm going to say seed.
04:13 - Colon input idea equal seed
slash input and I'll add.
04:21 - Make sure it starts with a rainbow.
04:25 - So now we can see I have on the page
a seed and I started that with Rainbow.
04:29 - Now I need to in my program get access
to that and also I think it might make
04:34 - sense for me to add a button.
04:39 - Id call submit.
04:41 - And submit will be the text of the button.
04:44 - So I'm adding that in so
now I have seed rainbow and
04:47 - I have a submit button and
I want to attach up.
04:50 - So now I want to attach an event.
04:52 - So this I have to do in javascript as
I Now if this is the structure of the page
04:55 - in H.T.M.L. and
04:56 - now I'm just going to affect the behavior
of the page in my javascript code.
05:00 - So I'm going to say I'm going
to say our seed equal select.
05:09 - Seed.
05:10 - Valar submit equal select.
05:15 - Submit and submit.
05:20 - Mouse press.
05:22 - And I'm going to do something I haven't
done a lot of my other videos tend to
05:25 - stay away from this I could
just say like do the thing and
05:29 - then define that function down here but
05:32 - I take this as an opportunity to show you
something which is an anonymous function.
05:35 - I'm just going to put
the call back right in here.
05:38 - That's very awkward looking but it's
actually kind of a nice way of writing
05:41 - condensed code when you click
the mouse on the Submit button button
05:46 - button the submit button execute this
code that's inside this anonymous
05:51 - functions anonymous because
it doesn't have a name.
05:53 - So what do I want to do right there
just to see that it's working.
05:55 - I'm just a create P C
going to need to do not.
06:00 - See but see value.
06:02 - The text of the seed itself and
I will have to do a lot more there.
06:05 - Of course but
I'm just going to say that for right now.
06:07 - So now if I hit submit we can see this
page is doing some basic stuff that is
06:11 - at least getting the seat.
06:12 - So I have the seed.
06:15 - Right now I have this seed in my
code I need some sort of source text
06:19 - to use to be the words that I search for
so
06:23 - the way that him do that is I'm
going to load from a text file.
06:26 - And I happen to have a text
file here which just has
06:29 - a lot of text from the Wikipedia
page on read both.
06:31 - So I'm going to do it.
06:33 - The easiest way possible in
my code with just preload.
06:38 - So I better write a preload function.
06:40 - And I'm going to have a global
variable called source text.
06:46 - I'm going to call it a goofy name and
06:49 - say Source Text equals
load strings rainbow dot.
06:54 - T.X.T. and one thing you might recall if
you watch some of the other videos is that
06:59 - the load strings function loads in
the text but loads it has an array.
07:04 - So it gives you each a line in that text
file as an array and so whatever you do in
07:08 - set up is once that text is loaded I would
say Source Text equals joy in source text
07:14 - with the space I get rid of that array
enjoyed it so I have one long string.
07:18 - So now I have one large string and
I'm just going to make sure it's there and
07:21 - also safe create P. source text.
07:24 - So now if I hit run by row if I
reload the page I have a seed and
07:29 - I have the source text.
07:30 - So now I have set up the page.
07:32 - That's just sort of step one.
07:33 - Now I actually need to
implement the DIAF Dick.
07:36 - Algorithm.
07:37 - OK So let's go back to our code and
do that.
07:39 - This is going to be fun.
07:41 - And actually I just realized.
07:42 - Here's something that I want to actually
do I want my for my diasporic algorithm.
07:47 - I want the source text not
to be one long string but
07:51 - I wanted to be just a ray
of words a list of words.
07:56 - So I'm going to I'm
going to create a glow.
08:00 - Variable called words and
I'm going to say words equals splits and
08:06 - I want to use the P.
five just function split tokens and
08:10 - I would say split that source text
up by and split token says whatever.
08:15 - These are the delimiters the second
arguments of the delimiters I want to
08:18 - split it up by space comma
exclamation anything that's basically
08:24 - you know something that's not a so I could
I could do this much more effectively.
08:27 - But I'm just going to do that right now.
08:30 - And I'm going to do this and
I'm going to look just in the.
08:32 - Debugging console and
I can see I have an array of basically.
08:37 - Many many many many words all the words
of an array with every single word as
08:41 - a separate element and that are A and
08:43 - you can see that it's two thousand
one hundred thirty two words long.
08:46 - So this is what I'm going to be able
to use now I'm going to search through
08:49 - that a ray to find words that have and
08:53 - by the way it's probably going to
five rainbow over and over again but
08:55 - I'll deal with that later because
I'll give it a different seed phrase.
08:58 - OK so here we go.
09:02 - Now what I want to do is instead of
creating those paragraphs I want to say
09:06 - let me execute a diasporic
with what I want to pass in.
09:13 - The value of the C. The seed and
I want to all of the words.
09:18 - So I'm going to write a and I'm going to.
09:23 - I'm going to have that function
take a seat and in a re.
09:27 - And that function will return a diasporic
for the result of this diaster technique.
09:32 - So I'm just going to go to the top
of my code now because I can
09:35 - kind of worry about this algorithm
on it as its own thing completely.
09:38 - And I need I need a function
called diasporic and
09:42 - it gets seed and a bunch of words and
I'm using the same variable name.
09:46 - So what's the first thing that I
need to do the first thing that
09:49 - I need to do in the algorithm is look at
each character one of the time because I
09:52 - need to find a word that starts with are
a word second letters a word with third
09:57 - third letters I that sort of thing.
09:59 - So I'm to come.
10:00 - Back over here.
10:01 - And I'm going to say what for var I will
see your eyes less than see Dot length.
10:07 - Plus plus.
10:08 - And then the character that I'm
working with is seed car at Boy
10:13 - this is a function that's part
of the javascript string object
10:16 - I think I neglected to mention
in some of my other videos.
10:19 - If I say car at I want the character
at index I write and industry.
10:25 - All characters have an index
index zero index one index two so
10:30 - if a string is five
characters long like hello
10:34 - to the index the indices
go between zero and four.
10:40 - So once I have that I want
to then have another loop.
10:47 - And what do I want to loop through
I want to loop through all of.
10:51 - I want to loop through every
single one of the words.
10:56 - And I want to say if I
11:00 - see if words index J. car at.
11:05 - Equals C..
11:08 - Then I have found a word right.
11:12 - I found a word that has
its own character at
11:15 - the same spot I as
the character I'm looking for.
11:18 - And once I do that.
11:20 - I've just got to say console dot log.
11:24 - Just to see if this kind of idea works and
break.
11:29 - So here we go.
11:31 - I'm going to run this program.
11:33 - I'm pretty sure.
11:36 - When to run this we should see
a bunch of things to look at this.
11:40 - I got rainbow seven types.
11:43 - So first of all let's do
a different seed phrase.
11:46 - This is you know.
11:48 - Testing one just through testing one.
11:52 - You can see I got T. eat ass.
11:56 - T. and.
12:02 - E and that's all.
12:04 - So you can see these and see this
worked and I got some of them twice.
12:08 - So here's the thing.
12:09 - One thing I need to build into
this is I need to say after
12:13 - the reason why I got rainbow seven times.
12:16 - It's because of my loop starts
over every single time.
12:20 - So every single time I find a word I go.
12:24 - Our matches with our then
I get a match with a so
12:27 - one thing that I need to
change about this is.
12:31 - I need to while I'm doing this
keep track of some things.
12:34 - So I need to first of all I need
to have a free i want to kind
12:37 - of have a phrase which starts like this.
12:39 - And when I find the word I
want to say phrase plus equal.
12:44 - I want to concatenate So
12:46 - the plus operator strong means
to string together and to say.
12:49 - Plus equals words index j.
12:54 - And then I'm going to say return phrase.
12:56 - So one thing that's going to be nice about
this now that I've done this is I can stop
13:01 - using the console for debugging and
I can say create freeze.
13:08 - So let me run this again and you can see.
13:10 - I got a rainbow and I say test.
13:15 - I got that meterological dispersion that.
13:18 - So one thing I want to do by the way
is I also want to add a space.
13:24 - So I do this a sort of silly way but
13:26 - I'm just going to have two lines
of code there and you can see.
13:30 - So now what I want to do
is make sure I look for
13:33 - the next instance of a word
after the first one I found.
13:36 - So I'm going to keep track of that index.
13:42 - Or like current word equals zero.
13:46 - So I want to start my loop when I
look through all of the loops from
13:50 - the current work so I want to go from
current word to the end of that array and
13:55 - as soon as I find one.
13:56 - I want to say current word equals J.
14:00 - Plus one I want to go to the next work.
14:03 - So instead of this loop of searching
through all the words always going back to
14:07 - the beginning I want to save where I last
found one and start from the next one.
14:10 - So this should do this.
14:13 - Rainbow cause rainbows rainbows rainbow
rainbow rainbow still getting a lot of
14:17 - rain both but I can now say things like.
14:22 - I love.
14:24 - Is due to unicorns exist question mark.
14:29 - So during good about during
moonlit numerically direction
14:33 - encounter dispersion brightness now.
14:35 - Amazingly I'm not getting any errors here
and I probably should do some errors
14:39 - checking like what if I got
to the end of the array.
14:42 - And I don't have any more where more
to look what if no word exist with
14:47 - that in there so I'm going to leave this
is that I'm going to release this code.
14:53 - I want you know another thing that I
could do was track all the possible.
14:58 - Words that have zero is the second letter
and I can always pick a random one so
15:03 - that each time I hit submit
I get a different one.
15:06 - That's in it you might add to this error
checking is something that you might add.
15:11 - I don't know if I'm if there's anything
weird happening when I have the space
15:15 - because I've actually spaces technically
a character that I'm checking.
15:17 - So the question mark is in there but
seems to be working.
15:21 - Let's just D..
15:24 - Space you as Forth.
15:28 - So you can see so I got to do some
stuff clean up that sort of way.
15:33 - So right so.
15:35 - So I probably missed something but
15:38 - I heard you were watching this video
to play around this code make your own
15:41 - diasporic tweak the algorithm
generate poetry share it.
15:45 - Share it with me share it with the world
and explore other types of ideas.
15:50 - If you're at the programming from A to Z.
15:52 - playlist the next video of the talk
a little bit more about this and
15:56 - a homework assignment for
this set of material and some other.
16:00 - Types of techniques in our historical
algorithms like the diasporic that you
16:03 - might look at as well.
16:04 - OK Thanks for watching.
16:05 - And I'll see you in another
videos maybe perhaps of day.