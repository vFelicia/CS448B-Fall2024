00:00 - [BELL RINGING]
00:01 - Hello, I think at this point
until I make some more,
00:04 - this is the last
video in this section
00:07 - about arrays of objects.
00:08 - And one of the
things that comes up
00:10 - a lot, especially when you're
first learning to code,
00:14 - is with p5 and doing graphics
animations-- everything
00:17 - I've been doing pretty
much in all of these videos
00:19 - has just been with shapes.
00:21 - And so, as you can see here,
here is one of the examples
00:25 - arrays of objects where,
when I click on them,
00:29 - they change color.
00:30 - This was one of my
previous videos.
00:32 - What I want to look
at is what would
00:34 - it take to have each
one of these circles--
00:38 - each one of these
objects display
00:40 - instead of a shape an image--
00:43 - a JPEG or a PNG that I
load-- a file that I load.
00:46 - And how could I have
the same object?
00:49 - So, how could I
make a bubble class
00:51 - where each bubble
displays an image,
00:54 - but each bubble displays
a different image?
00:56 - So, the first thing
I'm going to do
00:57 - is just change all of
these into flowers.
01:00 - OK?
01:00 - So, I have a directory of images
associated with this project.
01:04 - I'm going to go over to my code.
01:07 - And it looks like this.
01:09 - It has a bunch-- it has one
image in it called flower.png.
01:13 - And it has a bunch of other
images called kitten.jpg.
01:15 - The reason why I'm
making this distinction
01:17 - is PNG is a format
for images that
01:19 - allows for transparent pixels.
01:21 - And that's something
that you're probably
01:22 - going to find very useful
when designing and using
01:25 - images in your code--
01:26 - that you can have
an image not just
01:29 - be that sort of like
rectangular thing,
01:30 - but rather have part of
the image be transparent.
01:34 - So, OK.
01:35 - So let's first-- I'm going
to-- one of the things--
01:38 - if I want to load
an image into p5,
01:41 - there are a variety
of ways to do it,
01:42 - and I'm sure I have other
videos in the future--
01:45 - even though I'm in
the future, but I
01:46 - made in the past that
are further ahead
01:48 - in this playlist--
01:49 - where I look at this
more specifically.
01:51 - But a quick way to load media--
01:54 - it seems a little bit silly.
01:55 - Like, oh, there's
a preload function?
01:58 - Setup is the function where all
the code at the beginning runs.
02:01 - Well, I want to load images
at the beginning to use.
02:04 - I should use those in Setup.
02:05 - But there's a funny way
about JavaScript-- the way
02:07 - that it loads media files
and large data files
02:11 - is that it can totally take a
while for those things to load.
02:17 - So, the preload function
is a way of saying,
02:19 - I'm going to have a variable--
02:21 - I'm going to call it flower--
02:22 - and in preload I'm
going to say flower
02:24 - equals loadImage flower.png.
02:30 - And this could be double
quotes or single quotes.
02:33 - They mean the same thing.
02:34 - I'm kind of like--
02:35 - I like single quotes these days.
02:37 - So, this right here
is saying, hey,
02:39 - I know you're about
to set up a p5 sketch.
02:42 - Before you do that, I want to
have a pre-setup to the setup
02:45 - where I want to load this image.
02:46 - So, this will guarantee
that the flower
02:48 - image is ready to be used by
the time you get to setup.
02:50 - Now the rest of our
work is really as simple
02:53 - as if I have this image--
02:56 - that data from that PNG file
stored in this variable flower,
03:00 - I can just go all the way
down to my bubble object--
03:03 - and look here.
03:04 - This is where I draw
the bubble as a circle.
03:07 - So, I can just get rid
of all of this code,
03:10 - and I can just change and use
this function called image.
03:13 - So, there's a function in
p5 called image which says,
03:15 - hey, I want to draw an
image to the screen.
03:17 - Just like I want to draw
an ellipse at this.x,
03:20 - this.y, now I want to draw
an image at this.x, this.y.
03:26 - So, now all I've done is
load that image in preload
03:29 - in a global variable and
then draw that image here
03:32 - in the show function.
03:34 - So, let's refresh.
03:36 - [LAUGHS] OK.
03:38 - So, what is this
error file not found?
03:41 - I forgot that I put the
images in this directory
03:46 - called kittens.
03:47 - So, I need to make sure I
reference that directory.
03:49 - Now note I also
need this directory
03:52 - to be part of the
same directory where
03:53 - my index.html and
sketch.js stuff is.
03:56 - So, there could be
some nuance here
03:57 - into where you store
your image files.
04:00 - But in this case, I just need to
make sure I include the folder
04:04 - name kittens/flower.png.
04:08 - And now if I do this,
you can say look,
04:10 - there my bubbles are flowers!
04:12 - Yay!
04:13 - Now, they aren't
different sizes.
04:16 - And so if I wanted
to, I could kind of
04:18 - go a little farther with this.
04:20 - And I could use this
variable r, and I
04:22 - could make that the width
and height of the image.
04:27 - Now, one thing to realize here--
04:29 - I'm looking over there to see if
I can use my whiteboard, which
04:31 - I'm about to.
04:31 - But I have to go erase it first.
04:33 - So, when I drew a circle--
04:36 - when I used the
ellipse function,
04:38 - and I have this
variable called this.r,
04:42 - I actually assigned
that-- it's poorly
04:43 - named because it's assigned
to the diameter of the circle.
04:48 - A rectangle or a square--
04:51 - which is a rectangle
with equal sides--
04:54 - if I have the xy here,
this is its width
04:57 - and this is its height.
04:58 - The reason why I'm
bringing this up
05:00 - is because the image function--
05:03 - I switched from
ellipse to image,
05:05 - but it would be almost
a better example
05:07 - if I were switching from
rectangle, which requires an x,
05:10 - a y, a width, and a height.
05:12 - If I were switching
from rectangle
05:14 - to image, which also requires an
x, a y, a width, and a height,
05:18 - the only difference is fill
that rectangle with the pixels
05:21 - from some actual
image, like flower.
05:25 - So this is really
what's going on.
05:27 - So I can manipulate the
size and that sort of thing.
05:29 - I'm not going to worry
about that too much.
05:31 - And I'm just going to leave it--
05:33 - I'm going to just
simplify this example.
05:36 - But let's just show it
to you with r in there.
05:38 - You can see now they're
all different sizes.
05:40 - I'll leave that in there.
05:41 - Why not?
05:44 - All right, so now what if what
I want to do is click on these
05:49 - and have them change--
05:50 - transform from a beautiful
flower to a butterfly?
05:56 - Because we all know
butter flowers transform--
05:59 - OK.
05:59 - I have kittens-- to a kitten!
06:01 - All I have are kittens!
06:04 - So I do have this
clicked function.
06:06 - It changes the brightness.
06:08 - Let's just first make this work.
06:10 - Let's back up a second.
06:13 - And what I want to
do now is I want
06:15 - to instead of having each image
be the-- each bubble object
06:21 - be the same image, I want to
pick up an image of a kitten.
06:26 - So I'm now going to add
an array called kittens.
06:30 - And what I'm going to do is
in preload I'm going to say
06:33 - kittens index 0 equals
loadImage kittens/kittens0.jpg.
06:43 - So you can see here
I could do this.
06:46 - And I have five of them.
06:48 - So here's the thing,
this is pretty horrible.
06:50 - What I want to be able
to do is if I have
06:53 - a whole bunch of
images and they're
06:54 - named in some consistent way,
what I actually want to do is,
06:58 - could I write a loop
to load all of these?
07:01 - So instead of
having three images
07:03 - loaded into an array 0, 1,
and 2, could I write a loop?
07:06 - And one thing that's
interesting is
07:08 - I can do this very
easily with something
07:10 - called string concatenation.
07:12 - Nice excuse to bring
that up in here.
07:14 - So as you might know,
2 plus 2 equals 4.
07:19 - However, A plus B equals the
string AB, or cow plus bell
07:31 - equals cowbell.
07:34 - So when you use the
plus operator with text,
07:37 - it joins the text rather
than the plus operator
07:40 - with numbers adding the numbers.
07:41 - And the reason why this is so
useful is what I can do here
07:45 - is I can write a loop for let
I equals 0. i is less than--
07:51 - how many kitten
images do I have?
07:53 - I think I had five.
07:55 - I can see them here.
07:57 - 0, 1, 2, 3, 4.
07:58 - I had 5-- 5 i plus plus.
08:01 - Then I can just take this
line of code, put it here,
08:04 - and I can say kittens index
i equals loadImage kitten.
08:10 - Now I don't want to load
the 0 kitten into each one.
08:13 - Although I could do that
now for just testing.
08:15 - But I'm going to keep moving on.
08:16 - I want to load this
plus-- oh, and there's
08:19 - a new way to do this.
08:21 - [LAUGHS] There's a new
way to do this ES6.
08:22 - I'll come back to that
at the end of this video
08:24 - if you're interested.
08:25 - This is a bold way that I--
08:27 - I could add the i in between.
08:29 - I can say take this
string, kittens/kitten,
08:32 - join it with the value of
i, which is 0, 1, 2, 3, 4,
08:35 - and then add .jpg to the end.
08:38 - And that will load all of
those image files into kittens.
08:42 - Now let's just make
sure this works
08:45 - by going down here and saying
something like kittens index 0.
08:51 - That's kittens0.
08:55 - Let's take a look
at kittens index 3.
09:00 - That's kittens index 3.
09:01 - Look at that little kitten.
09:02 - That little kitten.
09:03 - OK, so now how do
I have each object
09:07 - have a reference to
a different kitten?
09:10 - Very important.
09:11 - So one thing that I think
that I want to have--
09:13 - I'm going to get rid of
this brightness thing.
09:15 - This brightness was
from a previous example.
09:18 - What I want to do is
have an image associated
09:20 - with each bubble object.
09:22 - So why not say this.img equals--
09:26 - or this.kitten
equals what-- img.
09:30 - So when I make a bubble, I
want to say I want a bubble
09:35 - to be at this x location and
this y location with this size,
09:39 - and I want it to use
this particular image.
09:42 - So what that means is
I need to now up here--
09:47 - I need to pick one
of these images.
09:49 - Now let's say I want
to pick a random one.
09:52 - The nice thing is if
you have an array in p5,
09:57 - I can just say kitten
equals random kittens.
10:02 - This random function-- if I
give the random function array,
10:05 - it will pull out
a random element
10:07 - from that array, which is one
of those random kitten images,
10:10 - and put it in this variable.
10:12 - And then I can pass that in.
10:15 - So this is me picking
a random image,
10:19 - then passing it into the
object, and then the object
10:23 - receiving it and putting
it in as a property.
10:26 - And then what's the last step?
10:28 - I need to make sure I draw
that particular kitten image.
10:33 - All right, let's see
what we got here.
10:35 - Yay, look!
10:36 - Lots of random-- now
it's hard to see them
10:38 - because they're so small.
10:39 - So let's make these
kittens bigger.
10:47 - There we go.
10:48 - So you can see you have a
bunch of kitten objects.
10:50 - And I could-- I do the
thing where I click,
10:52 - and I add new ones
or I delete them.
10:54 - But let's have all of
these kittens every time
10:56 - I click change to a new kitten.
11:01 - [LAUGHS]
11:03 - So we already had this
whole clicked function.
11:08 - And I'm saying if d
is less than this.r,
11:13 - why not just say
this dot image--
11:16 - this.kitten is a
new random kitten?
11:22 - So we can see I could
always at any moment
11:24 - pick a new image to store into
that bubble object's image
11:27 - variable.
11:28 - And so now-- oh, and
this is bad though.
11:32 - This is for checking--
11:35 - this is math that I had
leftover from before is
11:38 - checking to see if the mouse
clicks inside of a circle.
11:42 - And since the image is actually
a rectangle, why don't we
11:49 - make those back to flowers?
11:51 - Because the nice thing
about the flower is it
11:53 - was kind of like
circular thing inside.
11:55 - Whatever.
11:56 - But I could change this code.
11:58 - I could change this code to say
if px is greater than this.x.
12:10 - And px is less than
this.x plus this.r.
12:15 - And py is greater than this.y.
12:19 - And py is less than
this.y plus this.r.
12:25 - What is all this crazy mumbo
jumbo that I just put in there?
12:30 - What I'm trying to do
is I'm trying to say,
12:32 - hey, there is a point.
12:33 - It's clicked.
12:34 - Is it in between this x?
12:37 - Well, you can't
see that-- this x.
12:40 - And this location is x plus r,
and the y is between this y,
12:45 - and this location is y plus r.
12:46 - So I'm checking to see if
the x and y of the mouse
12:49 - is within those boundaries.
12:53 - And once I've done
that, we should--
12:58 - yay, look!
12:59 - I can just keep making
different kittens.
13:04 - Yay!
13:05 - It's not a square.
13:06 - It is a square.
13:07 - It is a square.
13:08 - It's not a square.
13:09 - I don't know.
13:10 - So I've done something
goofy here where I'm just--
13:12 - you can clean this up and
try it different ways.
13:14 - And what if I make it a flower?
13:16 - And is a circle better to check?
13:18 - Maybe I could just change
it when I click to flower.
13:22 - So these kittens are
changing into flowers
13:25 - when I click on them.
13:26 - And then if I click
on them again,
13:28 - oh, they still are a flower.
13:29 - So you can see the
range of possibilities.
13:30 - You can also make
the argument here
13:32 - that maybe this whole picking
the random kitten here
13:36 - and passing it in was
kind of unnecessary.
13:38 - Because what I could have just
done is right down in here
13:42 - I could just picked the random
thing in the constructor,
13:47 - and that's also the same thing.
13:49 - So there's lots
of different ways
13:50 - of organizing the code depending
on what you're trying to do.
13:53 - And generally speaking,
I don't love the fact
13:55 - that I'm using flower
here or kittens here,
13:58 - because these are
variables that exist
14:00 - outside the scope of the class.
14:01 - And the class, if it's going
to know about things outside
14:04 - of its scope, should
probably receive them
14:06 - as parameters to a function.
14:08 - But that's neither
here or there.
14:09 - It's worked.
14:10 - Wait, there's a bonus here
at the end of this video!
14:13 - I don't know why I'm
looking around as
14:15 - if someone's going to catch me.
14:17 - I forgot, I should probably
make a video just about this.
14:20 - But while we're here,
there's also a new way.
14:22 - Look at this.
14:23 - And I was told, by the way--
14:24 - I was just given some nice
advice about I shouldn't really
14:26 - be using the word join because
that's kind of using another--
14:29 - but this is string
concatenation.
14:31 - kittens/kitten plus concatenate
with the value of i plus
14:35 - the concatenate with .jpg.
14:37 - But there's a new way to create
strings from actual characters
14:43 - and variables in JavaScript,
and it's something
14:46 - called template literals.
14:47 - And this is in lots
of other languages,
14:49 - but this is a new way
to do it in JavaScript.
14:51 - And it involves the
use of the back-tick.
14:53 - So if I put back-tick
here and back-tick here,
14:57 - get rid of this,
get rid of this--
15:00 - now I don't want
the pluses anymore,
15:02 - so this is just like a string.
15:06 - It's a literal string.
15:07 - Ah, it's literal!
15:08 - This is a literal string,
kittens/kitten.jpg.
15:11 - But if I want to use
a variable in there--
15:14 - well, we're calling this
the template literal,
15:16 - I can put a variable in there
with curly brackets and dollar
15:20 - sign and then the
name of that variable.
15:23 - Hopefully, I'm
getting this right.
15:24 - So this is a way
of saying, hey, I
15:26 - want to have this
string instead of having
15:28 - to use plus for joining-- and
the nice thing about this,
15:30 - I'm pretty sure it lets you
do this over multiple lines
15:33 - too, which is
really, really nice.
15:35 - Because with regular quotes,
you can't have multiple lines--
15:37 - line breaks.
15:38 - So this should work
exactly the same way--
15:41 - template literal.
15:42 - Ahh!
15:45 - So close!
15:47 - What did I get wrong?
15:48 - [SAD TROMBONE SOUND]
15:50 - I made a mistake.
15:51 - Because, by the way, I
don't actually know what
15:53 - I'm doing at all.
15:54 - It looks like this.
15:56 - The dollar sign-- ah, I knew I
should have syntax highlighted
15:59 - that in some way!
15:59 - The dollar sign is an indication
like, hold on a second,
16:03 - I'm going to use a
template literal.
16:06 - And so now I'm
saying what's inside
16:08 - of here is the variable name.
16:09 - And we can see the
syntax highlighting
16:11 - fixed, which is good.
16:13 - There we go.
16:13 - Now this is working, and
it's the same exact program.
16:16 - I should mention, well, what
if I really wanted to have--
16:21 - so one thing, if I just had
dollar sign in the string,
16:25 - it's not going to
think it's part of this
16:27 - unless the curly
brackets are there.
16:29 - And so if I really
wanted it to be this,
16:31 - I could probably use an
escape sequence or something.
16:34 - But it's pretty rare
that you're actually
16:36 - going to want to have this
sequence of characters
16:38 - in your string.
16:40 - OK, so that's a
little extra bonus
16:41 - piece at the end of this video.
16:42 - Maybe I'll make a
special video just
16:44 - all about the wonder
of template literals,
16:46 - because that's what I'm sure
everybody on the internet
16:48 - wants to watch.
16:49 - And I'll see you in the future.
16:51 - [MUSIC PLAYING]
16:58 - [BELL RINGING]