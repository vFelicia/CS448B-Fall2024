00:00 - in this video I'm going to look at
00:02 - augmenting the Twitter bot that I made
00:04 - in the previous video to post an image
00:06 - and where's that image kittens go where
00:09 - will that image come from that image is
00:10 - going to be something that I draw
00:11 - through appropriate other program and so
00:13 - this is this is the video where I
00:15 - combined this thing called processing
00:17 - with this other thing called node which
00:19 - I've been using to communicate with the
00:20 - Twitter API so let's just sort of
00:22 - diagram how this is working so I have
00:24 - this nodejs program called bot J s and
00:28 - bot j s has a connection via the twit
00:32 - package to the Twitter API and what bot
00:36 - J's can do is it can post a tweet you
00:39 - know every 10 seconds or can post a
00:42 - tweet based on an event like a follow
00:45 - any sort of thing and one of the things
00:47 - that can send with these tweets is an
00:50 - image so there certainly are node
00:52 - packages and you could use Python or any
00:55 - number of programming languages to
00:57 - generate images to post to Twitter but a
01:00 - particular programming environment that
01:01 - I love and use a lot that has a ton of
01:04 - functionality for drawing whether it's
01:06 - 3d and shapes and vector shapes or image
01:09 - processing or getting live feeds from a
01:10 - camera or reading from a sensor there's
01:12 - so much that you could do with this
01:14 - thing called processing now you might be
01:17 - saying like I don't I don't get that I
01:19 - know processing but this doesn't make
01:21 - any sense because if I launch processing
01:23 - and I open up I just go to examples and
01:27 - I open up some particular example like
01:31 - simulate and I go to flocking and I run
01:34 - this particular example you can see
01:36 - there's this window and there's this
01:38 - editor and I have to press play and it
01:40 - then it runs it is an animation like how
01:42 - does that any of that have to do with
01:44 - node well turns out one of the features
01:46 - of processing that you may or may not be
01:48 - aware of is there is something called
01:49 - command line processing command line
01:54 - processing is a way that you can say
01:55 - from the command line determine all the
01:57 - thing that I've been showing you in all
01:59 - of these videos you can say processing -
02:03 - Java right we said from the command line
02:06 - node bot j/s you could say processing -
02:10 - Java you know the name of your sketch
02:13 - now
02:14 - a little bit more to it than that but
02:15 - the idea is that you can execute the
02:17 - processing code from the command line so
02:19 - if you can execute the node program from
02:21 - the command line you can execute the
02:23 - processing program from the command line
02:25 - you can can you execute node and have
02:28 - node execute processing and the answer
02:30 - is yes so this is the this is
02:34 - essentially what I would like to show
02:36 - you how to do so let's look at some of
02:39 - the pieces here first of getting that
02:40 - set up so when the first things that you
02:42 - need to do by the way is this isn't a
02:44 - feature that's automatically available
02:45 - to you on your system so what you need
02:48 - to do is look under in the bed if you
02:51 - have processing running on your computer
02:52 - look under tools and look under install
02:55 - processing Java - sorry processing -
02:58 - Java so I'm going to click install
03:00 - processing - Java I'm going to hit yes
03:03 - I'm going to enter in my password for
03:06 - machine and hopefully it's going to work
03:08 - and I'm going to know if it works by now
03:10 - when I come to terminal and do prot it
03:13 - I'm going to get some information so you
03:16 - can see like I that didn't seem to do
03:18 - anything but only because I have this
03:19 - like giant font you can see here that
03:21 - command line addition for processing
03:23 - zero but you can see that it's there and
03:25 - it's giving you some information about
03:26 - what you need to add to it in order to
03:29 - run in order to run your processing
03:32 - sketch so let's make a processing sketch
03:35 - that we could run from the command line
03:37 - now so I'm tempted to like draw a
03:41 - rainbow or something but let's just make
03:42 - something really very very simple I'm
03:46 - going to type in and let me make the
03:48 - font a little bit bigger if you haven't
03:50 - seen processing before welcome
03:52 - editor font size 36 welcome to
03:55 - processing I have a setup function where
03:58 - I'm going to make a size of a window I
04:00 - in the setup function I'm going to write
04:03 - a loop to say you know 500 times draw a
04:08 - circle and what am I going to do with
04:11 - the circle let's pick a random x-value
04:14 - somewhere in the pixel space a random
04:18 - y-value somewhere in the pixel space and
04:22 - a let's pick some random colors
04:27 - and a random green color blue color and
04:33 - then I'm going to say no stroke no fill
04:38 - oh no huh fill r0b and draw the ellipse
04:43 - at that location well a 16 by 16
04:46 - oops and so first and we make this 640
04:51 - by 360 which is a nice aspect ratio
04:53 - autoformat so let me run this program
04:54 - and I'm missing another curly bracket
04:57 - just to end setup now you know
04:58 - processing is a sophisticated
05:00 - environment where there's an animation
05:01 - loop and all sorts of but I just want to
05:03 - render a static image so I just want to
05:05 - run all my code only in setup and when I
05:08 - run this you can see that's what I get
05:10 - so maybe I should add like a grey
05:13 - background and maybe I actually want to
05:14 - do 5,000 of these circles and maybe I
05:17 - want to give them a little bit of alpha
05:18 - and I'm going to run it one more time
05:20 - and you can see there we go this is my
05:21 - beautiful picture that I have made with
05:24 - processing and you know just to have
05:27 - something to demonstrate demonstrate
05:29 - each each time so I
05:31 - so let's now see so what is the next
05:34 - thing that I want to do with this
05:34 - program the next thing I want to do is I
05:36 - want to save and up to a file and I'll
05:39 - call that file output dot PNG now let me
05:42 - save the actual sketch and I'm going to
05:44 - save the sketch in my node five
05:46 - directory this is where I'm actually
05:48 - working on the bot right now so I'm
05:50 - going to save this sketch I'm going to
05:51 - call it a rainbow you that's not really
05:54 - drawing a rainbow and if I run the
05:58 - sketch and I run it I can see now if I
06:01 - go into the directory there is now a PNG
06:03 - file called output dot PNG which is that
06:06 - image so I have a processing program
06:09 - that runs it draws an image it renders
06:13 - the image out so all I need to do now is
06:15 - have node trigger the processing program
06:17 - a processing draw the image save it have
06:20 - node pick up that image and send it to
06:22 - Twitter to tweet it okay so how do we
06:26 - get these steps now a couple things one
06:27 - thing I might add to this program is I'm
06:29 - just going to add the function call exit
06:31 - at the end because you know I kind of
06:33 - want to just see it run do its thing and
06:35 - quit because I don't really need to keep
06:37 - that window open so that's going to be
06:38 - useful and now I should
06:40 - be able to run this program from the
06:42 - command line so let's come back to here
06:44 - and how do we do that processing - Java
06:51 - I'm I'm going to like try to imagine
06:53 - what the next thing I type is because I
06:55 - don't totally remember something like
06:57 - stache - sketch equals so often with
07:00 - things that you trigger from the command
07:01 - line you need a set of arguments or
07:03 - parameters that kind of modify how it's
07:05 - working so I want to have my sketch be
07:08 - equal to and this is a really strange
07:10 - thing I'm going to do I'm going to put
07:11 - duck tick I think that's like it's like
07:14 - sort of like this backwards apostrophe
07:16 - thing that's like shift I don't know
07:17 - just like under the tilde next to the
07:18 - one on my keyboard
07:20 - PWD what this is doing is remember PWD
07:24 - is a command for UNIX for command line
07:26 - that means print working directory and
07:28 - what that's going to do is like
07:29 - automatically fill here the directory
07:32 - that I happen to be in because I need
07:34 - the path to where this processing sketch
07:35 - is and then slash the name of my sketch
07:39 - rainbow dash dash run so dash dash run
07:45 - means I want to run that sketch the
07:48 - sketch that I want to run is called
07:50 - rainbow in this directory I probably got
07:51 - this wrong let's see if this works
07:53 - it doesn't exist oh so first of all I'm
07:57 - in the wrong one reason it doesn't exist
08:00 - is I'm in node for set interval so I'm
08:03 - in the wrong folder so what I want to do
08:06 - is go back up a directory and go into
08:08 - node 5 you can see that's where that
08:12 - rainbow folder is so that's one reason
08:13 - why it didn't work so I'm going to add
08:15 - by the way the up arrow is what I'm
08:17 - pressing to get back to previous
08:18 - commands we're going to try it again and
08:20 - really hope it works well something's
08:23 - going on something's happening I see it
08:24 - I see it and oh it's still there why
08:27 - isn't it quitting that's strange
08:31 - let's go die not hit save was I already
08:37 - running it I don't know let's let's
08:39 - maybe I maybe I'm gonna maybe I
08:41 - shouldn't have processing open save
08:43 - changes to rainbow yes it did finish
08:45 - originally let's try it again there we
08:50 - go so you can see that it did it I just
08:52 - I just want to like do this all day long
08:54 - trigger processing programs from the
08:55 - command lines totally but so all you
08:57 - need to do is install processing Java
09:00 - have the argument deaf desk sketch
09:03 - equals the name of your sketch and then
09:06 - - - run and now watch this what I want
09:10 - to do is take this exactly this line of
09:13 - code and bring it in to my node program
09:16 - so I'm going to save our command equals
09:20 - that so all I need to do is now have
09:24 - node figure out a way to execute that
09:27 - command now how do you do this so
09:30 - something that node node is a process a
09:32 - node program is this thing called a
09:34 - process and node can have no program
09:37 - could have child processes things that
09:40 - it triggers that happen while that
09:42 - particular node process is running and
09:44 - so the way that you get access to that
09:46 - is through another call to require and I
09:49 - have that I already have my example up
09:52 - here so what I need is this particular
09:56 - require so this is the require statement
09:59 - where I want to make a variable called
10:01 - exact for like execute and I want to
10:03 - require something called child process
10:05 - it's a package that's built into node
10:07 - and get the executable thing from that
10:10 - so if I grab that and I put that here
10:13 - now I can say exec command and then I'm
10:19 - going to just write I'm just going to
10:21 - the callback is going to be processing
10:23 - so in other words what this will do and
10:31 - I'm going to say console dot log
10:36 - finished and I'm going to I'm going to
10:40 - I'm going to comment out the Twitter
10:42 - stuff now so all this program is doing
10:44 - now is importing this child process
10:47 - thing that's requiring this element
10:49 - that's part of node so that this command
10:52 - that I know works can be executed just
10:54 - like I would typing it into the console
10:57 - itself and when it's finished call this
10:59 - function that I've called processing so
11:01 - now right so this we know typing this we
11:05 - know runs
11:07 - processing sketch we see it happen now
11:09 - if I type this we should also see the
11:14 - project sketch run I'm finished ok
11:16 - though it's really exciting but that
11:17 - works because little scared I only
11:20 - learned I only figured out how to do
11:21 - this last night so then this is great
11:23 - and note and and since that processing
11:26 - sketch is always making an image that's
11:28 - in the same directory with the same name
11:30 - I can now post that image to Twitter so
11:33 - let's get let's get a little further
11:34 - here so now that we know here now this
11:37 - by the way there's some in when you look
11:38 - oh you look at my example at our post
11:40 - there's some arguments you can put in
11:41 - here you can get more information about
11:43 - what's happening with the process and if
11:45 - it something went wrong with it
11:46 - but you know for us right now we just
11:49 - want to know that this is the function
11:50 - we know that when this function executes
11:53 - the image has been made so we can
11:55 - actually go and tweet that image so what
11:56 - I want to do is basically take
11:59 - everything that I had before I don't
12:03 - need set interval yeah judy set interval
12:05 - sorry what I want to do ah yes yes yes
12:08 - yes yes I want to do let's think about
12:10 - this for a second right what do I want
12:12 - to do I want to execute this command in
12:15 - the function tweet it because every time
12:19 - I tweet
12:20 - I don't want going to worry about the
12:24 - interval just yet every time I tweet
12:32 - all right this is what I want to do in
12:34 - that function when the tweeted function
12:36 - occurs the first thing I want to do is
12:38 - trigger processing to run and then now
12:40 - once processing has run here inside of
12:43 - this function that's where I need to
12:44 - open the image from the file from the
12:47 - the window opens very loud and you open
12:50 - hoping the file from the hard drive and
12:53 - and upload that file to Twitter
12:55 - so let's I'm going to go to my sort of
12:57 - pre-made example again and this is sort
13:01 - of this is this crazy-looking line of
13:03 - code that I'm going to bring into here
13:04 - it's the next piece of what we need you
13:07 - know if you're kind of trying to type
13:08 - along you could pause here and I'm going
13:11 - to need to stretch this out a little bit
13:13 - and I'm what I'm going to do is break
13:14 - this up in a few I'm going to the file
13:17 - name for us is what if I go to the
13:20 - finder here this is the drawer this is
13:22 - the project we're in Rainbow is the
13:24 - processing sketch so the file name is
13:27 - ring rainbow slash output PNG so it will
13:33 - always be rainbow slash output dot PNG
13:37 - and I've got this other line of code F s
13:41 - got read file sync so guess what there's
13:45 - another node package called FS for file
13:49 - system this is a node package that
13:51 - allows you to read files you don't
13:53 - actually have to add it as a package it
13:55 - just comes with node so it's another
13:57 - require that I need up here so I'm going
13:59 - to add var var FS equals equals require
14:05 - FS so now I can use the function read
14:09 - file sync and here and you just need to
14:13 - give it the file name and again I'm
14:18 - going to give it some parameters I'm
14:21 - going to break this into multiple lines
14:22 - of code so you can follow along more
14:25 - easily it's very very basic here
14:27 - actually that what I want to do is I
14:29 - going to use a coding known as base64 so
14:36 - now you can see to read a file I need
14:38 - the file name and I need to say like how
14:40 - I want to read it and reading it as
14:42 - base64 is a kind
14:44 - encoding for how the data the file will
14:46 - actually be read into the computer's
14:49 - memory right I need to store all the
14:51 - data from that file in a variable so I'm
14:53 - calling that variable be 64 content like
14:56 - a some other example I pulled it pulled
14:57 - this from had that as the variable name
14:59 - but it makes sense so this is now has
15:01 - all the information for that file this
15:03 - has the information that I want to pass
15:05 - to the Twitter API so once I have that
15:09 - read I'm going to go back to my example
15:12 - and you can see like look there is
15:14 - another all right now I'm doing just
15:18 - like exactly what we did before remember
15:21 - tweet post was is a call to the API
15:24 - where I want to post something and the
15:26 - thing I want to post is a status update
15:28 - but now what I want to do is post a
15:31 - media upload and that media upload is
15:34 - has data associated with it
15:36 - that's b64 content and I'm going to make
15:39 - this variable name less so you can kind
15:41 - of see it all here a little bit better
15:43 - so you can see this is the post media
15:45 - upload this is the stuff that needs to
15:47 - be associated with that post and then
15:49 - what is uploaded uploaded is a callback
15:51 - for when the information has been
15:52 - uploaded so a little nuance here is that
15:55 - I first have to upload the image before
15:57 - I could post a tweet so I'm not actually
15:59 - tweeting yet I'm just uploading some
16:01 - media to Twitter associate with my
16:04 - account once that's done I can have an
16:06 - ID associated with that media that I
16:09 - could then tweet with that media so now
16:10 - what I need is whoops what I need is the
16:13 - uploaded function so I need to write
16:15 - function uploaded I need to have this
16:18 - particular callback once I have this
16:21 - particular callback this is where you
16:24 - know this is where I will tweet because
16:27 - the image will be ready
16:29 - I can then tweet with the image so let's
16:31 - look at how we might do that so if I
16:33 - look back at my example you can see one
16:35 - thing is there is there are some
16:37 - arguments associated with this
16:38 - particular callback the key one that I
16:42 - need is data because data is going to
16:44 - have an ID I need a numeric index an
16:47 - identifier for that image that I
16:49 - uploaded because the images have an
16:50 - upload of it now when I tweet I need to
16:52 - refer to that image
16:53 - and the way that I do that is through
16:56 - something like this and I'm just going
16:59 - to call it ID
17:00 - right you can see media ID string is
17:03 - part of the data object that comes back
17:05 - and if I have that ID now what might I
17:09 - do I'm now going to create a object
17:12 - right this particular object my tweet
17:15 - object the same exact thing I always
17:18 - used to do I could say just going to say
17:21 - a coding Rainbow is the hashtag live
17:25 - from nodejs and then I'm going to need
17:29 - that's the status but my tweet now
17:32 - doesn't just have a status associated
17:33 - with it it has one other thing and what
17:36 - is that other thing it is a media ID now
17:39 - there could be multiple there could be
17:41 - multiple IDs so in this case I just have
17:45 - one right so I need to put it in an
17:47 - array but you could have five images
17:50 - associated with a particular tweet and
17:52 - actually one of my favorite bots is on -
17:54 - zoom BOTS that just tweets four images
17:57 - each one slightly bored zoomed in on the
17:59 - next one and if you I like to look at it
18:01 - and just go duh duh duh I guess I need
18:04 - four of those don't that anyway you try
18:08 - that at home but you can probably
18:09 - improve on what I'm doing but you can
18:10 - see here now this is my tweet it's this
18:12 - plus the ID for that image okay so then
18:16 - of course I need to actually post it
18:17 - which is what we've already done so far
18:21 - status is update the particular tweet
18:24 - the tweeted callback and look I already
18:25 - have that callback down here so all this
18:28 - other stuff from the random number BOTS
18:30 - can go away and I have and I can just
18:34 - keep the tweeted function so let's make
18:36 - sure I'm all set here in there's a lot
18:38 - of like nested stuff here now so first
18:41 - the tweeted function we know executing
18:44 - processing works
18:44 - we know it generates this file name then
18:47 - we read the file we post we have this
18:49 - callback for posting the tweet we have
18:52 - this callback for when it's done and
18:53 - this is this is all inside the function
18:56 - processing which is inside the function
18:58 - tweeted so I think I'm missing one curly
19:00 - bracket here so you can see this should
19:02 - line up now right tweet it starts
19:04 - everything we
19:05 - the command line when that's done we
19:07 - execute processing we read the file we
19:09 - upload it when it's uploaded there's so
19:11 - many nested callbacks here right this is
19:13 - you can sort of like see this nested
19:15 - structure first execute the command when
19:17 - that's done this function then post a
19:19 - twit then post the upload the media when
19:21 - that's done call this function and then
19:23 - in that function post your status update
19:26 - and when that's done call this function
19:28 - to say something went wrong or it worked
19:30 - okay boy oh boy oh boy oh boy
19:32 - moment of truth this is a 20 minute
19:34 - video building this ever so slowly let's
19:37 - see if this actually works I don't have
19:39 - a good feeling about this but I'm going
19:40 - to give it a try so let me make sure I'm
19:42 - in the right place node 5 node bot dot J
19:44 - s okay first of all he's processing ran
19:47 - okay that's good not just waiting hoping
19:50 - it worked okay okay let's go let's go to
19:53 - Twitter and I'm going to go to my
19:57 - Twitter page for this A to Z account and
19:59 - I'm going to hope there we go we can see
20:01 - look that image is posted to Twitter
20:03 - this is like the most beautiful sight
20:04 - I've ever seen so this is an image drawn
20:07 - in processing posted to Twitter now
20:09 - again there's really nothing on this is
20:12 - a trivial result because every image is
20:14 - going to be kind of the same thing it's
20:16 - just a bunch of like purplish-pinkish
20:17 - dots on the screen but imagine the
20:19 - possibilities of what you might be able
20:21 - to do with the generative algorithm
20:23 - that's going to post a different image
20:25 - every single time and of course what you
20:27 - might be able to do if you tie into like
20:29 - google image search with that or if you
20:31 - tie you know mashing up with other api's
20:33 - or if you're downloading images from
20:35 - other users a wide range of
20:37 - possibilities there so this is where I'm
20:38 - finishing this particular video and I
20:41 - will get to more scenarios with a bit
20:43 - more features but one thing that might
20:45 - be on your mind is this seems to only
20:48 - run on your laptop right so I have you
20:51 - when you're meant to like just leave
20:53 - your laptop open and have this thing
20:54 - like running forever and ever and ever
20:56 - and never close your laptop don't have a
20:57 - Twitter bot so you do need to deploy
20:59 - this somewhere it's a little bit tricky
21:01 - because you don't just at lots of
21:04 - servers we run node but what servers
21:06 - will run node and processing for you
21:08 - so I will soon show you a tutorial where
21:11 - you could do this using an Amazon ec2
21:12 - instance using a trickin processing into
21:16 - thinking that there is a screen
21:17 - associated with it so processing you can
21:19 - see that window launches and it's fine
21:21 - because on this computer there is a
21:22 - windowing system but on a server there's
21:24 - often not a windowing system so
21:26 - deploying is another topic for yet
21:28 - another video so I will get to that at
21:30 - some point soon so hopefully you found
21:32 - this useful and helpful and interesting
21:33 - and you make something with it and you
21:35 - tell me that you made something with it
21:37 - and and share it and thanks for tuning
21:40 - in and I'll go have some lunch
21:43 - I've actually been recording videos now
21:45 - today for two and a half hours and so if
21:48 - this video wasn't any good it's because
21:49 - it's hat and thanks and I'll see you
21:52 - guys soon