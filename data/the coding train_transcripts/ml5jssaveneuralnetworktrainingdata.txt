00:00 - Hello, and welcome to another
ML5 neural network video
00:04 - tutorial.
00:05 - I'm following up on what I
did in the previous video
00:08 - where I built this example.
00:10 - This example has
this interaction
00:14 - where you click the mouse all
over this canvas and press keys
00:18 - to assign each xy point
a label, C, D, E--
00:22 - and I added a bunch of notes
since the previous video.
00:24 - So I have the full scale
C, D, E, F, G, A, B.
00:28 - Then I trained the
model with the inputs
00:30 - being the xy of all these
points and the target
00:34 - being the actual label.
00:35 - And once the model is
trained, it can make guesses.
00:38 - So in theory, I just
collected this data
00:40 - set, trained the model.
00:41 - When I click into it,
when I click over here,
00:44 - I should hear the
musical note D.
00:47 - I should hear the
musical note E, G, A.
00:51 - And in between, it's sort of
interesting to see what I get.
00:55 - But it works as expected.
00:59 - I ran into like a pretty
significant problem
01:02 - while working on this.
01:04 - Because once I've collected the
data set and trained the model,
01:08 - if I had a bug in the code
or something I needed to fix
01:11 - or I wanted to try a
different parameter,
01:13 - I have to stop the
sketch and run it again
01:16 - and sit there and do this.
01:20 - This highly manual process of
clicking, clicking, clicking
01:23 - to collect the data set.
01:24 - So in this video, I want
to look at saving the data.
01:26 - And I also want
to look at saving
01:28 - the model, which, those are
two pretty different things.
01:31 - It might seem like
the same idea.
01:33 - I want to save the data.
01:34 - I want to save the model.
01:35 - Why would I do one
versus the other?
01:37 - Let's pause for a second
and examine all the steps
01:40 - of a machine learning
project and where
01:42 - we might want to save the data
versus save the model and why.
01:45 - Step 1, collect the data.
01:51 - Now, this could be a really
big, complicated step.
01:54 - But in my scenario,
in my example,
01:56 - it's just clicking the
mouse a whole bunch of times
01:58 - and pressing keys
on the keyboard.
02:00 - Step 2, train the model.
02:05 - Once the model has
been trained, the idea
02:07 - is to use that model
in some scenario.
02:09 - So that we can call step 3,
deploy the model or prediction
02:13 - inference.
02:17 - So now the question
is, where along the way
02:20 - might you want to save the
state of what you're doing?
02:24 - So in the most traditional
machine learning sense,
02:28 - once you've done all of this
and your model is trained,
02:32 - you don't ever
need to look back.
02:34 - You've got a trained model.
02:35 - You can save that model.
02:36 - So right here in
between steps 2 and 3
02:40 - is a point where we might want
to save the model if we're done
02:43 - and our model is
exactly the way we
02:44 - want it and we're ready to
just use it in a project.
02:47 - However, you might want
to try training the model
02:50 - a variety of different ways.
02:52 - And this is where you might want
to, in between these two steps,
02:56 - save the data.
02:59 - We also might collect a lot
of data want to take a break,
03:02 - reload that data,
collect more data.
03:04 - There's a lot of
different reasons
03:05 - why we might want to stop
in between steps 1 and 2
03:09 - and save where we are.
03:11 - And the functions in
the ML5 neural network
03:13 - class that we want to use
are saveData and save.
03:20 - So just save is
saving the model.
03:23 - SaveData is saving the data.
03:25 - There are also functions
for loading it back,
03:28 - which we'll look at,
loadData, and load.
03:33 - Let's begin by just
looking at saveData.
03:36 - So in this particular example,
all of the interaction
03:38 - happens with key presses.
03:39 - And certainly as I've
mentioned before,
03:41 - you might want to think about
a more thoughtful interface
03:44 - for doing all this work.
03:45 - But for me, I'm just going
to add another key press, s,
03:48 - for saveData.
03:49 - So I'm going to say
elseif the key is s,
03:54 - then I'm going to
call model.saveData.
03:59 - I can look up more about how
the saveData function works
04:01 - by looking at the ML5 website.
04:02 - And we can see there's
two optional arguments.
04:05 - So one argument is
a file name, which
04:06 - I want to use because I
want to set the file name.
04:08 - It'll just pick a
date if you don't.
04:10 - And then a callback to
know that it's done.
04:12 - I don't actually really
need to worry about that.
04:14 - Because I'll know that it's
done when the file is there
04:16 - and downloaded to the
downloads directory.
04:19 - I'm going to give it the name
mouse-notes and run the sketch
04:24 - and collect some data.
04:29 - So I'm just going to
do a little bit just
04:31 - to make sure it's working.
04:32 - So now I can hit s.
04:34 - And look, a file
has been downloaded.
04:38 - I can take a look at this
file in Visual Studio Code.
04:40 - And here's what the
file looks like.
04:42 - So I've got a data
property with an array
04:45 - that has all the data in it.
04:46 - x, ys with a, label,
x, y with a label.
04:48 - And if I reformat the JSON,
you can actually see it here,
04:51 - and it's much more
legible what's going on.
04:53 - So this is all of the
data that I've collected.
04:55 - Not very much data,
but there it is.
04:57 - So now that I've done
that, I might as well
04:59 - take the time to
collect a lot more data,
05:03 - knowing that I can save it.
05:15 - Methodically collected
a large data set.
05:18 - Now I'm going to
press s to save it.
05:22 - And here's what it looks like.
05:24 - Almost 400 data samples.
05:26 - Let's see how it performs.
05:27 - I going to train the model.
05:31 - Try doing some inference.
05:42 - It works pretty well.
05:43 - So now, the next thing
that I want to try to do
05:46 - is hit stop and run the
sketch again but have
05:49 - all of my data reappear.
05:51 - Let's see if I can
make that happen.
05:53 - Now, instead of just
creating the neural network,
05:57 - I can create the neural
network and load data into it.
06:00 - And that's as easy as
saying, model.loadData
06:04 - mouse-notes.json.
06:06 - The only thing here
is that you have
06:08 - to remember that I'm working
in client-side JavaScript only.
06:12 - So if I run this
right now, well, it's
06:16 - giving me this nice
error here because it's
06:19 - looking for a JSON object
with an array called data.
06:22 - But it can't find it because
that JSON file doesn't exist.
06:26 - It doesn't exist
because I downloaded it
06:28 - to the downloads directory.
06:29 - And so I need, for my p5
sketch to be able to access it,
06:32 - I have to manually upload it
back to the p5 web editor.
06:35 - If I were writing my own
server, maybe with Node.js,
06:38 - I could do something where
I could save the data
06:40 - and have it reload
back automatically.
06:42 - But that's another
example for another time.
06:45 - Let me do Add File and drag
mouse-notes.json in here.
06:51 - Now, we can see that that
file is part of my p5 sketch.
06:56 - And I should be able
to run the sketch now.
06:58 - All right, I think
the data was loaded.
07:00 - I don't see it, because
I'm not drawing it.
07:03 - So this might be something
I want to add in a moment,
07:05 - be able to draw the
data that it's loaded.
07:07 - But in theory, there's no reason
why I couldn't train the model.
07:13 - All right, the model is trained.
07:21 - And you can see, I'm
not seeing the data.
07:23 - I'm not seeing those clusters.
07:25 - But it's clearly been
trained based on that data.
07:29 - To show you how
this can be useful,
07:31 - one thing that I
might want to do
07:32 - is change some property that
affects the training process.
07:35 - So I could try it
multiple times.
07:37 - And an obvious one might
be to try learning rate.
07:39 - So let's say I make a
smaller learning rate, 0.01,
07:44 - and I run the sketch again.
07:45 - I've got to click in here
so that my key press gets
07:47 - activated.
07:48 - So I'm going to add one more
piece of data and hit T.
07:53 - So you can see, with
a small learning rate,
07:55 - the loss is going down very,
very, very, very slowly.
07:59 - So in this case, having
a small learning rate
08:01 - is not super helpful.
08:03 - But I can say, OK, that
learning rate wasn't good.
08:05 - Let me try a much larger
learning rate, like 0.5,
08:08 - run it again, hit T for train.
08:14 - And then you can can see,
with this high learning rate,
08:16 - that loss is going down
really, really quickly.
08:18 - Now, I don't mean
to suggest here
08:20 - that universally a high
learning rate is better
08:22 - than a low learning rate.
08:23 - There's a lot of
it depends here.
08:25 - But just to show you how you can
now retrain the model changing
08:30 - all of the different
kinds of options,
08:32 - and you could look at the ML5
neural network documentation
08:36 - and see what other
kind of options
08:38 - you might want to play
around with or change.
08:40 - You might be finding
this example a little bit
08:42 - tricky to follow because you
can't actually see the data.
08:44 - So let's add that feature of,
once I've loaded the data, also
08:47 - drawing it to the canvas.
08:48 - So in this case,
having a callback
08:50 - for when the data is ready
would be very useful.
08:52 - I'm going to say, dataLoaded.
08:58 - I'm going to write my
dataLoaded function.
09:01 - And let me just look at
where I'm drawing stuff.
09:04 - I'm going to grab all
this drawing code,
09:06 - bring it back up here.
09:08 - Let me comment it out.
09:09 - And let's actually
look at what the data
09:11 - looks like in the
neural network model.
09:16 - So I think I should be
able to just console.log
09:18 - the model's data, I think.
09:21 - So this is what the ML5
data object looks like.
09:24 - And for me, the important bit
here is under data under raw.
09:29 - This raw data is
all of the actual xy
09:33 - coordinate with
the target label.
09:37 - I can make a
variable called data.
09:41 - And I can iterate over it.
09:47 - So here, I'm looking
at the raw data,
09:50 - iterating over every
single element,
09:52 - pulling out the x's
into the inputs,
09:54 - the y's into the target.
09:55 - And then I can add the
drawing code back in.
09:59 - Only here, I'm saying,
inputs.x, inputs.y.
10:06 - And this is target.label.
10:08 - So I believe if I run it--
10:13 - aha, I figured out
what my mistake is.
10:15 - This is confusing,
because in model--
10:18 - is what I'm seeing
here is model.data,
10:20 - and I want to look at
model.data.data.raw.
10:28 - This leads me to
think that maybe it
10:30 - would make sense to have
something like a getData
10:31 - function.
10:34 - Because in many cases, you
just want the raw data.
10:37 - ML5 is storing a
lot of information
10:39 - about the data set
additionally to help it
10:42 - when it loads it later.
10:43 - But for looking at it again,
it might be easier just
10:46 - to have a function that
just grabs that rather
10:48 - than saying data.data.raw.
10:50 - But take a look.
10:51 - Maybe by the time
you're watching this,
10:53 - this will have been
added to the ML5 library.
10:54 - Let's see if this works.
10:56 - There we go.
10:57 - Ooh, so it drew all the circles,
but I have the label wrong.
11:01 - Why do I have the label wrong?
11:03 - Oops, I Copy/Pasted
mouseX, mouseY in there.
11:07 - But I've got to get the
actual xy coordinate.
11:10 - Always making silly mistakes.
11:11 - Let's run this again.
11:12 - And there we go.
11:13 - Now, it's loading that data.
11:14 - And maybe actually
what I want to do also
11:17 - once the data is loaded is just
automatically call training.
11:23 - So I could do all
this stuff right here.
11:27 - I could run the sketch.
11:29 - And it's immediately
going to train the model.
11:34 - And I'm ready for inference.
11:41 - None of this is working, I might
offer an exercise suggestion.
11:44 - And I will try to remember to,
in the video's description,
11:47 - linked to code that
does this in addition
11:50 - to just the code
that's here right now.
11:51 - So remind me in the
comments if I haven't.
11:53 - But how could you take
this example, which
11:55 - now loads the data set and
immediately trains the model,
11:58 - to allow you to change the
state back to data collection?
12:02 - So I trained the model.
12:03 - Then I want to add some more
data, retrain the model,
12:06 - resave the data.
12:07 - How could you have a workflow
that allows you to load
12:10 - the data you previously
had and add new data,
12:13 - remove some of the data
even-- how would you do that--
12:15 - and retrain the model?
12:17 - And once we are there and
we've got this workflow where
12:21 - I can collect data, train,
change parameters, train again,
12:24 - recollect, all
that kind of stuff,
12:26 - I'm ready for the next step--
12:30 - definitely want to ring the bell
for this-- which is actually
12:32 - save the trained model itself.