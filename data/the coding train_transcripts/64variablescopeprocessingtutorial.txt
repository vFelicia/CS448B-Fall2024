00:00 - Okay, hello, today's topic.. Well not today. Whatever this... this...
00:04 - What do you watch? Like one video a day? Come on they're like seven minutes long. This seven minute period's topic is....
00:11 - Variable Scope. Now...
00:12 - This is admittedly a kind of a strange topic to just sort of insert in here
00:16 - Because we did have a whole set of videos about variables. You know variables. Define a variable.
00:22 - What's a variable, datatypes all sorts of things. I think we made those videos. Yes, anyway...
00:26 - I'll make them if I have it.
00:28 - But what are we doing when talking about variable scope here shouldn't that have gone back there?
00:31 - In truth this idea of variable scope is probably a concept that goes with variables. At the same time
00:38 - we've never really had a need to concern ourselves with variable scope.
00:41 - But this moment of using a loop is the first time where it makes some sense.
00:45 - It's only gonna make more and more and more sense as we get further and further along with many more programs. Okay, so...
00:53 - The people just keep talking always. It's very distracting. Quiet! Settle down out there! OK, oops.
01:00 - Now they're gonna start begging back anyway
01:04 - Okay, so let's think about variable scope just to recenter ourselves. Let's write the words variable scope. Now...
01:11 - We're used to writing Processing sketches that have setup() and then have draw() and we said okay
01:17 - well, you're gonna use variables in your programs.
01:19 - What if we needed to put... we needed a variable, x for example. We need a x called...
01:25 - that's of type float. It's gonna be initialized at 0. We always put our variables at the top of the code or
01:31 - so we thought but I'm sure you've seen examples or maybe by accident
01:35 - you've actually put your variables somewhere else. What we're talking about with variable scope is what happens
01:41 - when we start to declare our variables not use them, by declare
01:46 - I mean give them a name and a type somewhere else in our code. What happens if we put them in setup()?
01:51 - What happens if we declare them and draw()? What happens if we have a conditional statement and we declare a variable inside a conditional statement?
01:58 - What does that mean? Well conceptually we have these two these concepts. This is what's commonly referred to as a global variable.
02:06 - Now is anything really global or local isn't global just a larger local?
02:11 - I mean, that's what I think.
02:13 - But we can separate the idea here that this is a global variable meaning if it's declared at the top or outside of setup() and
02:20 - draw() truly, then we can use it anywhere in our program. Anywhere at all, it's global.
02:25 - We can say x whenever we want and it's this variable x.
02:28 - If we happen to declare a variable somewhere else it is only usable in that block of code.
02:37 - Let's go. Let's take a look at what I mean by this, okay?
02:40 - So I actually have an example prepared that had two that
02:42 - I was going to use for variable scope, but I'm actually just going to open up a sketch that we did
02:49 - In with conditionals. Bouncing ball. Let's open up this bouncing ball sketch and let's run it.
02:58 - So we can see this bouncing ball sketch has two variables circleX. It has circleX
03:04 - and xspeed. If I'm standing here, I mean yeah you can see. Not that you need to see me.
03:08 - Whatever it has circleX, it has xspeed. Two variables. Global variables. We're using them and setup().
03:12 - We're using them in draw(). All over our code. What would happen if by accident we weren't really paying attention one day and
03:18 - instead we wrote our code like this:
03:23 - Right? We have circleX equal. We say okay. What's happening at the beginning of our program?
03:29 - We say we want to use a variable called circleX = 0 and xspeed which is 3 and then we're going to use
03:34 - those variables later in our program if I run this code...
03:37 - It says down here at the bottom cannot find anything named circleX.
03:42 - That is the error message you get when you're
03:45 - trying to use a variable that you've never declared your intention to use in the first place.
03:49 - But is that wrong didn't we declare our intention to use it right here in setup()? float circleX. The problem is...
03:56 - A variable that is declared... eraser... a variable that is declared inside setup()...
04:03 - Float, if we have some variable, float x here inside setup()
04:08 - This is referred to as local. Meaning it is local only to the setup() function.
04:14 - It's the rest of the program knows nothing about it
04:18 - So here we could use that variable anywhere we want in setup()
04:22 - But we can't use it in draw()
04:24 - because it doesn't exist and draw only exists in setup(). What is the scope? You have to look and say okay...
04:29 - Where are my curly brackets?
04:32 - What set of curly brackets am I in that wherever I've I'm declaring inside a set of curly brackets
04:36 - that's the only place I can use that variable. That goes for a conditional statement a loop, other types of curly braket things
04:43 - we're gonna see later like functions and objects. It's a local variable, local only to that function.
04:48 - So now we have to ask ourselves this question...
04:51 - That's confusing... Why not just make everything global?
04:55 - Then I don't have to worry about whether or not
04:57 - I'm supposed to use it or not. Because I could just use it wherever I want.
05:00 - And you know what I think you're right?
05:02 - Just make everything global and your life is easier. Certainly that's where we are now. We're writing small programs. They have a few variables
05:09 - We're using the variables and setup
05:11 - We're using them and draw everything should just be global
05:13 - But there comes a time where that convenience can be a bit of a mess. What if you had a
05:19 - thousand variables in your code? You might actually someday have a thousand variables in your code.
05:23 - You don't want to have a thousand global variables at the top?
05:25 - It's gonna be very confusing. Things aren't gonna get put into packages in different places
05:30 - we're gonna learn about objects and classes and tabs and functions a
05:34 - loop is sort of a place where we might actually have an instance for a local variable that makes sense because if we don't need
05:40 - It everywhere why declare it as global when we could only give ourselves some problems?
05:46 - okay, so...
05:48 - I'm moving over here now
05:50 - I don't know why I feel it is helpful if I announce that. I also I really wanted to try this which is the go
05:54 - underneath just
05:56 - Pop up and appear. I don't know what that does that probably does nothing, okay?
05:59 - So let's go away from this programs fix this program by putting our variables
06:05 - back to the top
06:07 - And running it
06:10 - Our bouncing ball works again, and now let's look at this
06:16 - Let's look at this sketch, so this sketch, and I'm at six minutes
06:19 - We're gonna be done in a couple minutes this sketch is drawing a set of lines horizontal. You seen up to these now
06:26 - so
06:27 - Where is our variable here? Well? This is a static sketch?
06:30 - it doesn't have setup and draw and you notice I declared in two x equals zero down there because it kind of goes with the
06:35 - Loop x should start at zero and then increment by 20 and we should draw those lines
06:40 - I mean, I could have put int x up here
06:43 - and
06:45 - We're gonna get the same exact result
06:47 - Because it's just a static program, but now let's let's go ahead and put a set up in here
06:57 - And put draw around all of our drawing code. So now it is a dynamic program
07:02 - It's to do the same thing every time through draw and we run it and oh
07:06 - Crap it's not doing what we wanted to do why?
07:09 - because for this loop to work x always has to start at zero where x is only is zero once then it goes up we've
07:16 - got to make sure every time through draw we reset Ex back equal to zero so
07:20 - We just add this line of code and now our program works again
07:24 - But here's the thing did we use x and set up no did we use it anywhere else?
07:28 - Do we use it in mouse press key pressed is there some other code? No, so it's confusing
07:32 - Why is it up there? If we only need it just for this loop really and so I think it would make more sense
07:38 - For us to actually just declare x the moment because we only need it down in this block of code
07:44 - So this is where it makes some sense
07:46 - to use a local variable because we only need it here and our code is a little bit cleaner to read and see and we
07:52 - Can't by accident use it somewhere where we don't need it or want to use it?
07:55 - So that's what variable scope is for we have variables that are accessible and usable in certain parts of the code
08:01 - Certainly there are questions of efficiency like the computer can release the memory when it's done with them
08:05 - But you know I don't care about that. We're writing these little skipping. You know you can worry about that later
08:10 - Some time where you have a big giant complicated program, whatever. I don't even know why I mentioned that oh
08:17 - Ok that's it. That's variable scope. I don't even think an exercise really needs to go with this one
08:22 - I suppose if I were to give you an exercise
08:24 - It's go back look at something you made in Processing that has a lot of global variables at the top
08:29 - Any of those variables do you need them everywhere?
08:31 - Can you make some of them local at least maybe try some loops and by the way...
08:36 - When you're using a for loop
08:38 - You if we turn that turn that into a four loop with a local variable and see what happens. There is your exercise, okay?
08:44 - I know how to juggle, but I'm not going to do that
08:47 - Someday, I will
08:49 - Hopefully this video will be cut off before I talk about... what am I talking about
08:54 - Okay, that's it end of this video. We're doing well today. This is good. This is good. Okay clap. Goodbye