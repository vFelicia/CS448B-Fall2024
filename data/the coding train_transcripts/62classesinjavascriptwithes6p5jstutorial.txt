00:00 - [BELL DING]
00:01 - Hello.
00:01 - This is a very
exciting moment for me.
00:03 - I don't know if this is an
exciting moment for you.
00:06 - This is the video
where I am going
00:08 - to talk about object-oriented
programming in JavaScript
00:12 - using something called classes
for the very first time ever
00:16 - in any of my videos.
00:18 - So this video is
part of a playlist.
00:20 - And if you're watching that
playlist, what you just
00:22 - learned about is functions.
00:23 - And you might have
done something
00:25 - where you first used functions
to reorganize your code.
00:28 - And you said.
00:28 - OK.
00:29 - I have some code
which draws a circle.
00:32 - And I have some code
which moves the circle.
00:35 - So I'm changing
some xy variables
00:37 - and drawing a list
of some xy variables.
00:40 - And then, I put those
into these own functions,
00:42 - call them display,
call them move,
00:44 - and I can call them in draw.
00:45 - So I've organized my code.
00:47 - And I even have this thing--
00:48 - I kind of have this
thing called an object.
00:50 - It's a JavaScript literal
object, meaning I'm saying,
00:53 - I literally want an
object with an x and a y.
00:57 - So I can see those up there.
01:00 - And so the thing is, I got
distracted for a second.
01:03 - The thing is, this
isn't really--
01:07 - this was a nice way to learn
about how to declare and define
01:10 - your own functions.
01:11 - And there are reasons why
you might want to do that.
01:12 - And you're going to see
those in many future videos,
01:14 - just sort of standalone
functions that
01:16 - exist unto themselves.
01:17 - And, in fact, there is
a style of programming
01:19 - called functional programming,
which JavaScript is well
01:22 - suited for.
01:23 - Because functions are kind
of like the core building
01:25 - block of JavaScript.
01:26 - But I am going to take a
different direction here.
01:30 - Because, in particular,
if what I want to do
01:32 - is program graphics,
simulations, animations,
01:36 - things moving around the
screen, one way to do that
01:39 - is to think about this circle
moving around as an object.
01:44 - Now, I'm already thinking
about it as an object.
01:46 - It's a bubble.
01:48 - It's got an x and a y.
01:49 - It has data.
01:51 - But I want to think about
it as having functionality.
01:54 - It can move.
01:55 - It can be displayed.
01:58 - I want to say things like,
in addition, bubble.move,
02:04 - bubble.display.
02:06 - This is ultimately how
I want to write my code.
02:09 - And I'm kind of wondering
why display there
02:11 - is being syntax highlighted.
02:12 - I think it's probably like
a keyword or something
02:14 - in JavaScript somewhere else.
02:15 - I'm going to just
change that to show.
02:17 - What I want to do is
I want to write code
02:19 - where I create these objects.
02:23 - And I issue commands on them.
02:25 - And the reason why I want
to do that is because, well,
02:28 - ultimately--oop.
02:29 - Ultimately-- ahh!
02:30 - So I changed the code, and
now it won't run again.
02:33 - This is not going well.
02:34 - What I want to do is if I could
think about this thing moving
02:37 - around on the
screen as an object,
02:39 - then I can maybe make a second
bubble and a third bubble.
02:42 - So I have to think conceptually
about what I'm doing.
02:44 - So I think what's going
to be helpful, actually,
02:46 - is if I come over here--
02:49 - hello to you too--
02:50 - and talk about this
with the whiteboard.
02:52 - So there's a couple of
different principles.
02:55 - I talked about with
functions that there's
02:57 - some principles behind why
you might use functions.
02:59 - You can make your code modular.
03:00 - Or you can make
your code reusable.
03:02 - This is also true of
object-oriented programming.
03:04 - But one of the
first key principles
03:06 - of object-oriented programming
is this idea of encapsulation.
03:11 - I want to encapsulate
everything that it
03:13 - is to be a certain thing
inside of an object.
03:19 - What does it mean
to be a bubble?
03:21 - What is there-- what
do bubbles have?
03:24 - What properties do they have?
03:25 - What things do they do
throughout their life?
03:27 - I want to encapsulate all
of that into something.
03:31 - And the idea of using something
called a class in JavaScript,
03:35 - and we can think of a class--
03:37 - another way to think of
it is the word template,
03:41 - I think is appropriate.
03:42 - Or the word blueprint
is also appropriate.
03:46 - The class, which is
a new block of code
03:51 - that I'm going to
ask you to write
03:53 - if you choose to
follow these tutorials,
03:57 - is this idea of encapsu--
04:00 - everything that goes in
between the open curly
04:02 - bracket and the
closed curly bracket
04:04 - is everything that it
means to be a bubble.
04:08 - What does it mean?
04:09 - We're going to find out.
04:10 - What does it mean
to be a bubble?
04:12 - All of that will go in there so
that in my main program, which
04:16 - has setup and draw,
I don't have to write
04:20 - the code for the bubble.
04:22 - I can just do things
to create bubbles.
04:24 - I can say things
like bubble = new.
04:27 - And I think I'm going to go
off the whiteboard here, so I'm
04:29 - going to write this down here.
04:30 - New bubble.
04:31 - So there's a new keyword
which, ironically, is new.
04:36 - New is a keyword that
means to create an object.
04:41 - We're going to see what that
actually really refers to
04:43 - in a second.
04:44 - And then, as my animation
continues throughout the draw
04:47 - loop, I continue to say things
like bubble dot float or dot
04:52 - pop or dot move, or
whatever commands.
04:56 - These are functions that are
somehow part of the object.
04:58 - Objects-- the idea
of encapsulation
05:01 - is to encapsulate the idea
of data and functionality
05:09 - into an object.
05:11 - So, for example, I had this
weird little JavaScript
05:14 - literal object.
05:16 - This is an object
that has data in it.
05:18 - It has an x value and a y value.
05:20 - And actually, I mean,
if I really wanted to,
05:23 - I could do this.
05:24 - This is something you'll see.
05:25 - I probably shouldn't
show this to you.
05:27 - I don't really do
this that often,
05:28 - but it's totally reasonable.
05:30 - I can put a function in there.
05:31 - Ooh, let's put that away.
05:32 - Let's put that away.
05:32 - Put that away.
05:35 - This is the thing.
05:37 - Welcome to your life.
05:39 - There are 15 different ways to
do everything in JavaScript.
05:41 - And also, this video
will be out of date
05:43 - by the time you watch it.
05:43 - Because there will
be a different way
05:44 - that people are doing now.
05:45 - But I'm just trying to
keep with the times.
05:47 - And I think classes
are a nice way.
05:50 - They're a way that I am now
choosing to create objects
05:52 - in JavaScript.
05:53 - So let me come back over here.
05:55 - A class is the idea
of the template.
05:59 - This is the template.
06:00 - You could think of this as--
06:01 - this is a bit of a--
06:02 - this is not my invention here.
06:04 - But one way of
thinking about this
06:05 - is the class is
the cookie cutter.
06:08 - The object itself--
this is the object, also
06:11 - often referred to
as an instance.
06:13 - This is the thing itself.
06:15 - This is the template.
06:16 - This describes-- there
is no bubble here.
06:18 - This just describes, what
does it mean to be a bubble?
06:22 - This is the actual bubble.
06:23 - I make a new bubble based on
what it means to be a bubble.
06:27 - Am I saying the same
thing over and over again?
06:29 - I am.
06:29 - But I'm hoping this helps
make this make sense to you.
06:33 - So object instances-- instance.
06:36 - Object template--
cookie cutter is
06:38 - like the thing you use to
make the actual cookies.
06:41 - So this is the cookie.
06:44 - And this is the cookie cutter.
06:46 - So now that that hopefully
makes some sense to you,
06:50 - the next point of discussion
is what goes inside the class?
06:56 - How do we write the class?
06:58 - [BELL DING]
06:59 - OK.
07:00 - So first, let me just apologize.
07:02 - I had a little technical
glitch where I drew stuff out
07:08 - of your view point in
the previous video.
07:10 - I am hoping that
by the time you're
07:12 - watching this I've figured out
some nice magic to make it make
07:15 - sense, or redid this video and
you're not even watching this.
07:18 - Because I don't
have to say this.
07:19 - But we'll see.
07:20 - But I'm going to go on.
07:21 - And what I want to do in this
video is now talk about--
07:24 - we really need to--
07:25 - hopefully, the
first video helped
07:27 - you understand
the concept behind
07:29 - object-oriented programming in
a very simple and basic way.
07:32 - And now what I need to do is
look at the actual syntax.
07:36 - How do I write the class?
07:39 - How do I make object instances?
07:42 - And how do I use them?
07:43 - So let's-- let me--
07:43 - I guess I should be over here.
07:45 - So what is the syntax of
writing the actual class?
07:49 - What is the syntax of making
actual object instances?
07:52 - OK.
07:52 - Where should we start?
07:54 - So I keep saying that-- now I
keep saying what I said before.
07:57 - There was this new
keyword called new.
08:00 - And what new does is it
creates an object instance.
08:04 - It says, hey, make
a new instance
08:07 - of an object that's
defined inside
08:09 - of a class called bubble.
08:10 - So I know I want to
make a bubble, which
08:12 - is something I made up.
08:13 - This is a made-up
name for a class.
08:15 - But what actually
happens-- when I
08:17 - call a function, when I say
something like, draw a robot,
08:22 - I look for a
function called draw
08:23 - a robot that draws the robot.
08:25 - This new keyword actually
says, execute a function.
08:28 - But it's a special
kind of function.
08:30 - It's a function to
create an object.
08:31 - Or actually, maybe let
me use a different word--
08:34 - construct.
08:36 - It's a function to
construct an object.
08:38 - And so the first thing
that I need to write--
08:40 - and I need to write this.
08:41 - It might work without it.
08:42 - But I really need to
write this in every class
08:44 - that I make is constructor.
08:48 - So I actually declare a
function called constructor.
08:57 - It is written just like--
08:58 - I don't have to say function.
08:59 - By definition, it is a function.
09:01 - So it's just like any
old function definition.
09:03 - It's a function definition
inside the class.
09:06 - And in here, this is kind
of like the object's setup.
09:11 - So we think of setup
and draw in our code,
09:13 - like in p5, setup is where
I initialize everything.
09:16 - Draw is where I animate stuff
and loop over and over again.
09:19 - The constructor is
the object's setup.
09:23 - So I'm defining, again, what
does it mean to be a bubble?
09:25 - Now I'm getting more specific.
09:27 - What does it mean to be
the first moments when
09:30 - the bubble is formed?
09:32 - That first baby
bubble, it comes out
09:34 - of the bubble-making machine.
09:38 - And where does-- what happens?
09:39 - So in this case, I'm just
going to say x=100, y=100.
09:47 - So this isn't correct yet.
09:48 - So don't yell at me if you
know about how this works.
09:50 - I need to add something to this.
09:52 - But this is the idea.
09:52 - I want to declare--
09:53 - remember, objects
are a collection
09:55 - of data and functionality.
09:57 - So this is where I say,
this is all the data
09:59 - that has to do with
this particular bubble.
10:02 - This particular bubble
has an x and a y.
10:05 - Now, here's the thing.
10:07 - Nowhere in here
did I declare var
10:10 - x or let x, depending
on which video.
10:12 - JavaScript, by the way,
has two different ways
10:14 - of declaring variables.
10:16 - And I'm using let now.
10:17 - But I've probably used
var in a previous video.
10:18 - Oh, I hate that
this is happening.
10:20 - But it's happening.
10:21 - But I didn't actually
declare the variable.
10:24 - And what's weird here
is that I don't actually
10:27 - declare it in the way
that I previously had.
10:30 - So something that happens
here when I say new bubble
10:32 - is there's a new
object instance.
10:35 - And I need to actually
say, this is a variable
10:37 - that I want to attach.
10:39 - This is a variable that is
a property of that object.
10:42 - And so the way that I do
this, and this, this--
10:45 - I'm awkwardly saying this.
10:47 - Because the thing that
I'm going to write here
10:49 - is actually this--
10:51 - this.x, this.y.
10:55 - This is a keyword in
JavaScript that can
10:58 - mean a lot of different things.
10:59 - And over time in
future videos, I
11:01 - will use it for a variety
of different purposes.
11:05 - But for right now,
the this keyword
11:08 - is a reference to the
current object instance.
11:11 - It doesn't exist.
11:12 - This is a template.
11:12 - So I'd say, in
theory, if I were ever
11:14 - to use this template to
make an actual instance
11:17 - of a bubble, that instance
that's being made,
11:19 - I'll just call this.
11:21 - Out here, the instance
that's being made
11:23 - has a variable
name called bubble.
11:25 - I declared it.
11:26 - Let bubble.
11:28 - All right?
11:29 - I said, let bubble.
11:29 - I might have said var.
11:30 - But I'm saying let now.
11:32 - Let bubble.
11:33 - Bubble is a new bubble.
11:36 - That's the object instance.
11:38 - That's the real object.
11:39 - And since this is the
theoretical object instance,
11:41 - and then when I say, new bubble,
this code actually happens.
11:44 - That actual bubble is created.
11:45 - This and bubble point
to the same thing.
11:48 - But the nice thing is
I can use this template
11:50 - for any object I create.
11:52 - Because this is a generic term
to refer to whatever it is I
11:54 - happen to be making
at the moment.
11:58 - So that's the idea.
11:59 - So let's go.
11:59 - Let's start writing
this code, and just--
12:01 - let's put this in.
12:04 - This.
12:04 - This.
12:05 - This dot.
12:06 - This dot.
12:06 - You know what I'm
talking about, right?
12:08 - This is going to--
12:08 - this dot is the bane
of your existence now.
12:10 - Welcome to your life.
12:14 - OK.
12:14 - So I'm going to get rid of this.
12:16 - I just have this
idea of a bubble.
12:18 - And I'm going to
change it to say let.
12:21 - And I'm going to say
bubble=new Bubble.
12:27 - We're going to comment
out everything in draw
12:29 - because I don't
have anything yet.
12:30 - I don't even want to--
12:31 - I'm going to
comment all this out
12:33 - because maybe I'll use it later.
12:34 - But the idea now is that
I want to write the class.
12:37 - Now, where I define the class
can kind of be anywhere.
12:40 - And I might show you a
way of organizing stuff
12:42 - into different
files at some point.
12:44 - But I'm going to
write class Bubble.
12:46 - Open curly bracket.
12:47 - Close curly bracket.
12:48 - Now, I'm going to create
that constructor like this.
12:52 - I'm going to say this.x
= 200 this.y = 150.
13:01 - And I'm just going to say,
println(bubble.x, bubble,y).
13:11 - And it's not println
anymore in p5.
13:13 - It's just print, which is
the famous console.log.
13:16 - But that's a bit of an aside.
13:18 - So now I'm going to run this.
13:20 - And I'm going to
say, look at that.
13:22 - 200 comma-- 200 150.
13:25 - And actually, one thing I
can do just to kind of--
13:27 - I can actually in
this interactive
13:28 - console that I'm
using in Chrome,
13:31 - I can actually just
type bubble and look.
13:33 - And see, look.
13:33 - Now I have an object.
13:34 - It's a type bubble.
13:36 - And it has two
properties, x and y.
13:38 - So that's what we've done.
13:39 - We have made a constructor
in the bubble object.
13:45 - We can create new
object instances.
13:47 - And there they are.
13:49 - So the next step now is-- we
can't actually do anything.
13:52 - The goal here is I want to write
nice, elegant, easy-to-read
13:56 - code where I say things like,
now I want this bubble to move.
14:00 - Now I want this bubble to show.
14:03 - And ultimately, I'm
going to do things
14:04 - like let bubble1, let bubble2.
14:07 - And, again, I know
some of you might
14:08 - have just watched the previous
video where I used var.
14:11 - Someday-- well, I'm saying this.
14:12 - It won't matter.
14:13 - And the aliens will
have figured it out
14:14 - to, like, dub over my
voice in a way that
14:16 - makes all this make sense.
14:18 - But for now, I've got--
14:19 - I'm using let.
14:19 - I'm using let.
14:19 - I'm using let.
14:21 - So ultimately, I want to be
able to make multiple objects.
14:24 - We're going to look
at this thing called
14:25 - an array in future videos.
14:27 - But we haven't gotten
all the way through.
14:30 - Well, the only thing I've
put inside of this class
14:33 - is the constructor.
14:34 - And I've initialized.
14:36 - And I've set--
14:38 - I've specified the data
for this particular bubble.
14:43 - What it is to be a bubble
is to have an x and a y.
14:45 - So now, what I need to do
is add the functionality.
14:49 - If I know I want to
say at some point,
14:52 - bubble.move, what I want
to say here is move.
14:58 - So this is how I
declare a function,
15:01 - a piece of functionality,
inside the bubble class.
15:06 - This is what it means
for a bubble to move.
15:10 - Notice, I don't have
to say function here.
15:12 - So classes, the functions
that are part of the bubble
15:15 - template, I do not--
15:17 - are by definition functions.
15:18 - I don't have to say functions.
15:20 - And then, what do I want
for the bubble to move?
15:22 - I want to change
it's x and it's y.
15:24 - So can I just say, x
equals x plus something
15:28 - to change it's x?
15:30 - No.
15:31 - Say it with me.
15:32 - This dot.
15:33 - This dot.
15:33 - This dot.
15:34 - It's so hard to remember.
15:35 - But inside of the template,
inside of the class,
15:39 - I'm referring to the
variables, the data that's
15:41 - part of a bubble object.
15:42 - I need to refer to it
as this.x and this.x.
15:47 - So let's go now add
that to our program.
15:50 - So I'm going to add a
function called move.
15:54 - And I'm just going to
do-- and, by the way, what
15:56 - do I want to do in this?
15:57 - I want to do exactly what I
did in the previous example.
16:01 - And I'm just going to take
this and put it up here.
16:03 - The difference is-- and weirdly,
I'm going to do something.
16:05 - This is horrible.
16:06 - I should not.
16:08 - And I'm-- let's just
show at the same time.
16:10 - Why not?
16:11 - I don't have to do
them one at a time.
16:12 - I feel-- I'm feeling confident.
16:14 - I'm going to do this.
16:16 - And then I'm going to
take all of this code
16:18 - from that show function.
16:19 - And I'm going to put it up
here inside this show function.
16:23 - And then I'm going to
delete this stuff down here.
16:25 - And now I have
everything-- whoops.
16:27 - I need to uncomment it.
16:29 - And I have everything
for my class.
16:33 - Can I fit it all in one screen?
16:35 - Yes, I can.
16:36 - Perfect.
16:36 - Look at this.
16:37 - So this is wrong.
16:39 - Avert your eyes.
16:40 - Don't implant this into
your brain just yet.
16:43 - But this is weirdly
going to work.
16:47 - So we should be done in a way.
16:49 - I made this.
16:49 - I made this bubble class.
16:51 - I have a bubble object.
16:52 - And it sort of
worked by accident.
16:54 - It worked because I have this
global variable called bubble.
16:57 - And it's the only
bubble in the world.
16:59 - But the template, the
blueprint, should not
17:02 - refer to a specific bubble.
17:04 - This won't work as soon as I
try to add a second object.
17:07 - This bubble-- this template
needs to use this dot.
17:12 - So all of the x and the y needs
to refer to bubble dot x y 1.
17:15 - Now, here it is.
17:18 - Take this.
17:19 - Shoop.
17:19 - Implant it into your brain.
17:21 - This is-- I should
mention, there
17:24 - are lots of other features
and things I could do in here.
17:26 - There's these things
called getters and setters,
17:28 - and there's extends.
17:29 - I'm going to get to that
eventually or maybe never.
17:31 - Because this is a good start.
17:33 - The basic idea is define
the template, the class.
17:36 - Define a constructor
which specifies
17:39 - how that object is initialized.
17:41 - And then add whatever
functionality you want.
17:43 - And then the world
is your oyster
17:45 - to make bubble1, bubble2,
bubble1, bubble2, bubble1.move,
17:59 - show, bubble2.move, show.
18:04 - So look at that.
18:04 - There are now two on the screen.
18:06 - And I didn't have to change
anything about the class.
18:10 - The class is a generic template.
18:11 - It knows nothing about
where it might be used
18:14 - or how it might be applied.
18:15 - It's just the template.
18:16 - So this is a way of
defining objects.
18:20 - And it's going to-- this
is also-- this is no good.
18:22 - Because this works for
two, but eventually
18:24 - I'm going to want
to have a hundred.
18:25 - And I'm going to get to
that in a future video.
18:26 - And there's lots of-- there's
some other missing pieces here.
18:28 - And that'll be in
the next video.
18:29 - But for now, if
you're watching this,
18:32 - here's an exercise
to do for yourself.
18:33 - Find a sketch you made
that had some thing in it.
18:36 - Get kind of a simple thing, a
thing moving around the screen.
18:39 - Maybe you didn't use
objects in it at all.
18:41 - Try to encapsulate everything
that has to do with that object
18:45 - into a class.
18:46 - What are the properties
that are part of that?
18:49 - If you're making a
rainbow, the properties
18:51 - are the colors, potentially.
18:54 - I don't know.
18:55 - Or its position on the screen.
18:58 - What's its functionality?
18:59 - It can appear.
19:00 - It could disappear.
19:01 - It can shine and glow,
whatever it can--
19:04 - whatever it does,
make those functions.
19:06 - Try to create one object
instance and operate it.
19:11 - And then, see if you can create
a second object instance.
19:13 - Now, you might have a problem
where both of your objects--
19:17 - you make two, but they do
exactly the same thing.
19:19 - So you can't actually
see that there are two.
19:20 - And that's the thing that I want
to address in the next video,
19:23 - this idea of kind of hard
coding these values so
19:26 - that every single bubble
always starts at the same place
19:29 - is somewhat problematic.
19:30 - And I'm going to address
that with something
19:31 - called arguments or
parameters to the constructor.
19:34 - And so that's what I'll
do in the next video.
19:36 - Make your objects.
19:37 - Share them with me.
19:39 - And I'll see you
in a future video.
19:40 - Unless I'm going to
still be here in a second
19:42 - because I might have
gotten something wrong,
19:43 - and I have to correct it.
19:44 - OK.
19:46 - Nobody in the chat is telling
me that I did anything horribly
19:48 - wrong in this video tutorial.
19:51 - Maybe I'll hear from
you in the comments.
19:53 - But I will see you
in the next video
19:54 - where I talk about
constructor arguments.
19:55 - [BELL DING]
19:56 - [MUSIC PLAYING]