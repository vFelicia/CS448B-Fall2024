00:01 - In this video, I want to
look at loading JSON data not
00:04 - from a local file--
00:05 - like a file like birds.json
that's right there
00:07 - in your project--
00:08 - but from a URL.
00:09 - And this is one
step along the way
00:11 - to querying an API, to saying
like, hey, weather map thing,
00:16 - give me some weather data.
00:17 - Or, hey, New York Times, give
me some New York Times data.
00:21 - But I want to start
simpler than that.
00:23 - So, first of all, this is
actually really, really easy,
00:25 - in the sense that
all I need to do
00:27 - is replace birds.json with a
URL that gives me JSON data.
00:31 - But it brings up a
question about how
00:34 - you work with loading data
beyond just this preload thing.
00:39 - So the preload idea
was super convenient.
00:42 - It guarantees that
all the data is loaded
00:45 - before the program starts.
00:46 - So you've got all the data.
00:47 - You could do anything
you want with it
00:48 - as the program's running.
00:49 - But this breaks down very
quickly and very easily.
00:52 - So, for example,
here's a scenario
00:55 - where you want to have some
sort of weather visualization,
00:58 - like you're going to show
the sun if it's sunny out,
01:01 - or some rain if it's raining.
01:03 - And you have a button
that just says Load Data.
01:07 - So every time the user
presses that button,
01:10 - it should get the most recent
data, the current weather.
01:14 - So you can't use
preload for that
01:16 - because you can't
preload the future.
01:18 - Boy, wouldn't that be great?
01:19 - So when you invent the
whole time travel thing,
01:22 - you can use preload.
01:23 - Like preload time-- maybe
that's how we get time--
01:26 - I don't know.
01:27 - But you can see how this
doesn't work, right?
01:30 - You can't preload the data.
01:32 - You've got to load the data
while the program is running.
01:34 - Certainly, you could
also make the same case
01:36 - of, as a program is
running, you just
01:38 - want to continuously-- like
if you're trying to visualize
01:41 - financial data and it's
just changing every three
01:43 - seconds, in your draw loop, you
might want to query the data,
01:46 - and query the data,
and query the data.
01:48 - You also don't want the program
to stop animating while it's
01:51 - waiting to load the data.
01:53 - So you need to load
the data in what's
01:55 - known as an asynchronous manner,
meaning when the data can
01:59 - arrive at another sort
of-- in another sort
02:02 - of like parallel universe
of your code that's running.
02:05 - So your code is trucking along.
02:06 - It's starting, it's
animating, it's looping,
02:08 - it's doing its stuff.
02:09 - And at any point there, it
could say, hey, load some data
02:11 - and let me know when
the data is loaded.
02:13 - So how do you do that?
02:15 - We said previously in preload,
var birds equals loadJSON.
02:22 - This is the synchronous way.
02:24 - Preload loads the data the
program waits and waits
02:27 - and waits and waits to start.
02:28 - The asynchronous way
is to just simply only
02:32 - call the loadJSON, function,
pass it the path of the data
02:37 - that you want to load--
02:38 - birds.json or some URL--
02:40 - and then what's known
as a callback function.
02:43 - So I'm going to call my
callback function gotData.
02:47 - So this, by the way,
is exactly the topic
02:50 - that I discussed in a
previous set of videos
02:52 - all about looking
at HTML elements,
02:56 - like buttons and
sliders, and what
02:58 - happens if you have a callback
when you click the button.
03:00 - So I'll try to link back
to the video about callback
03:03 - and events.
03:04 - This is exactly
the same idea here.
03:06 - I now need to write
a function to handle
03:10 - the asynchronous nature
of the data arriving later
03:13 - at some other time, separate
from my program that's
03:16 - running in its animation loop.
03:17 - So if I say function
gotData, this function
03:25 - is the callback for
loading the data.
03:27 - I'm starting a process.
03:29 - Hey, go and load some data.
03:30 - And when you're
done, let me know.
03:32 - The let me know is
trigger the code in here.
03:34 - Now, this isn't magic.
03:35 - This isn't some default
thing that just happens.
03:38 - This is the nature of how just
about everything in JavaScript
03:40 - works.
03:41 - But loadJSON and this
methodology, this
03:43 - is specific to
the p5 JS library.
03:45 - Of course, with
native JavaScript,
03:47 - or jQuery, or all
these other frameworks,
03:49 - they all have something
similar to this.
03:51 - So, conceptually,
this is a concept
03:54 - that's across the board
in working with data.
03:56 - But the syntax and this function
name is specific to p5 JS.
03:59 - So I give it the URL.
04:02 - I give it the callback.
04:03 - And then this
function is triggered
04:04 - when the data is ready.
04:05 - Like, the data is ready.
04:07 - I got to sing again.
04:08 - That's good.
04:10 - The question is,
where is the data?
04:11 - Like I've completely
lost-- like here,
04:13 - the data is in this
variable called birds.
04:15 - That's very obvious because I'm
saying birds equals loadJSON.
04:18 - But there's no
variable anywhere.
04:19 - There's just the URL,
the loadJSON function,
04:22 - and the callback.
04:23 - So the special
way that p5 works,
04:26 - and that a lot of things
in JavaScript works,
04:28 - is if you add a parameter
to your function definition,
04:34 - your callback definition--
04:35 - I'm calling it data--
04:36 - p5, behind the scenes,
will fill that variable
04:39 - in the function with the data.
04:41 - So it's like you said
this data variable equals
04:45 - the result of loadJSON, but
it happens asynchronously.
04:48 - loadJSON from this URL.
04:50 - When you're done,
trigger this function.
04:51 - When that function's
triggered, the data
04:53 - will be in that variable.
04:55 - Got it?
04:56 - I don't know what to do.
04:57 - That's all I can say about it.
04:58 - But send me your messages.
05:03 - And write them and
get a carrier pigeon,
05:05 - or Twitter, or whatever, email.
05:07 - Contact me, say hi.
05:08 - I need-- human interaction is
a useful and important thing.
05:11 - So let's make that
happen over here.
05:14 - So, in other words, instead of
saying data equals loadJSON,
05:20 - I want to say-- and I don't
want to have preload, actually,
05:22 - at all.
05:24 - Like I could actually--
just here, I could say--
05:27 - actually, let's-- I could say--
05:29 - I'll just put it in setup.
05:31 - I'll make this more
interesting later.
05:33 - I could just say
loadJSON birds.json.
05:37 - They're coming for me.
05:38 - Help, everybody.
05:40 - My heart is racing a little
bit, so maybe somebody
05:43 - knows that I might need
some medical attention.
05:45 - birds.json is the
name of the file.
05:50 - gotData is going to be the
name-- that's a name that I'm
05:52 - making up for the callback.
05:54 - I'm going to create that
function called gotData.
05:57 - I'm going to give it a
parameter right there.
06:00 - So now this is the process.
06:02 - Start the process
of loading the data.
06:04 - When it's loaded,
execute this function,
06:07 - fill this variable with data.
06:09 - And now I can say,
console.log data.
06:12 - Oh, sorry. println--
06:13 - I like to use the--
06:14 - it doesn't matter.
06:15 - But I just want to
see that this works.
06:17 - And I'm going to run this.
06:18 - You can see that's
happening, and it's
06:19 - happening super fast
because the data is loaded
06:24 - and then this is triggered.
06:26 - Great.
06:26 - It works.
06:27 - So now let's move on
from this birds data set
06:31 - and let's think about
what it means now
06:33 - to pass a URL into
that function and how
06:36 - we might query the data at
a particular moment in time
06:40 - while the program is running.
06:42 - So what I want to do
is I'll use a simple--
06:46 - an API that I like to use,
which is a URL for JSON data
06:51 - that I like to use, which
tells us how many people
06:56 - are in space right now.
06:58 - So I'm going to go grab
this URL right here.
07:02 - I'm going to paste
it into the browser
07:04 - just to see that this works.
07:05 - And you can see-- look at this.
07:07 - This URL is giving me JSON data.
07:10 - What is it giving me?
07:11 - It's giving me information about
the number of people in space.
07:14 - And you can see it has-- it's
an object with the number 6.
07:17 - And it's got, then,
an array of people,
07:19 - with their craft, the
International Space
07:21 - Station, and their name.
07:22 - So the number of people
currently in space is 6,
07:25 - and these are all
the people and that's
07:27 - the spaceship that they're on.
07:28 - Now, ideally, it would be great
if this was a data set that
07:31 - changed very often,
so if I hit refresh,
07:33 - it would say 7, and
then 8, and then 4.
07:35 - But I guess people aren't like
going to and from space very
07:38 - often.
07:39 - So this isn't necessarily
the best demonstration
07:41 - of why you would need this.
07:43 - But in some future
videos, I'll get to data
07:45 - that changes and that needs to
be refreshed in your program.
07:48 - So all I need to do
now, if this works,
07:51 - is take this particular URL
and paste it right in here.
07:55 - So you can see
that loadJSON works
07:57 - not just with a local file
but with a particular URL.
08:01 - And now, if I run this--
08:03 - oh, I don't see anything.
08:06 - I wonder-- hmm, interesting.
08:09 - And I didn't even get an error.
08:12 - I'm going to just add something.
08:13 - Close your eyes and don't pay
attention to what I'm doing.
08:15 - Yes, it worked.
08:16 - So this is a good moment
to have this discussion.
08:18 - Security is a thing.
08:23 - Authenticating with
your name and a password
08:26 - and allowing a browser--
08:29 - your browser and your machine
to talk to your camera
08:31 - or to talk to another server.
08:32 - Working with data
opens up this big can
08:34 - of worms of what
you're allowed to do
08:36 - and what you're
not allowed to do.
08:38 - And there comes a
time in your life
08:41 - where you'll find a
URL, and that URL,
08:43 - you know it gives you JSON
data because I pasted it
08:47 - into the browser right there
and I see that JSON data
08:50 - right there.
08:51 - But I put it in my loadJSON
function and nothing happened.
08:57 - Now, honestly, I didn't
even get an error here.
08:59 - There's a bit of a
secret that I think
09:00 - I'll show you, which is, right
up here in the browser window,
09:03 - there's this settings.
09:06 - And I can click on that and
I can get some more error
09:08 - messages.
09:09 - And you can actually see
the error message that came.
09:12 - XMLHTTPRequest cannot load.
09:14 - There's no
Access-Control-Allow-Origin
09:17 - header is present.
09:18 - Origin is therefore
not allowed access.
09:20 - This error message is
the bane of my existence.
09:24 - I always forget that
it might happen,
09:26 - and sometimes it doesn't happen
and sometimes it does happen.
09:28 - This has nothing to
do with you or me.
09:31 - This has to do with
how the server,
09:33 - the place that the URL
address is configured.
09:37 - And this URL does
not necessarily just
09:39 - allow you by default
to grab the data.
09:42 - However, there is
something called JSONP.
09:46 - The P stands for Padding.
09:47 - I like to think of
it like a safety net.
09:49 - It's like I'm in a
room with padded walls
09:51 - and I won't hurt myself
asking for the JSON data.
09:54 - And I feel like that would
be an interesting topic
09:56 - for another video, to delve
into that more deeply.
09:59 - So, sometimes, if you're
not allowed access
10:02 - in the sort of
traditional way, you
10:04 - can use this thing called
JSONP to get the data.
10:07 - And you know that one
of the ways that I do
10:09 - is I put the URL in loadJSON,
and when it doesn't work I just
10:13 - add JSONP and I hope it works.
10:15 - And, usually, it's going to--
10:16 - I tried first without it.
10:17 - If it doesn't work,
I try it with it.
10:20 - You can write your--
10:21 - I'll maybe include a link to
more information about JSONP
10:25 - in the description's video.
10:26 - So what do I mean by adding it?
10:28 - So it's an optional
third argument
10:30 - to the loadJSON function.
10:31 - So the loadJSON function
requires a URL and a callback.
10:35 - And, optionally, you can
add a third argument,
10:38 - which is the string
jsonp, which allows
10:42 - you to get past this
access origin control
10:47 - crazy error thing that
sometimes comes up,
10:49 - where the server's not
allowing you to get clean JSON.
10:52 - You need JSON's little padding.
10:54 - There's no padding over here.
10:55 - Hurt a little bit.
10:57 - I'm a very sensitive
and fragile person.
11:02 - So anyway.
11:03 - So, fortunately, if I type
jsonp as that third argument--
11:07 - it's good that that
happened because it's
11:09 - going to happen to
you-- and I run it,
11:11 - you can see that the data
is now arriving there.
11:13 - I'm seeing it.
11:13 - So let's do something
with this data
11:16 - to finish of this
particular video, that's
11:18 - already 11 minutes long.
11:20 - So if I look at this data,
one thing I might like to do
11:23 - is just draw a circle for
every single person that is--
11:31 - I'll draw a circle for
every single person
11:32 - that's in space right now.
11:33 - So, interestingly
enough, if I know
11:37 - that the data is available
in the gotData function,
11:40 - that's a place where I
could do some drawing.
11:42 - So, for example, I could
say for var i equals 0,
11:46 - I is less than data.number--
11:51 - that's the number 6--
11:53 - i plus plus.
11:54 - And I could say ellipse at
random width, random height,
12:01 - 16, 16.
12:03 - I could say fill 255.
12:04 - This is going to be the least
interesting data visualization
12:07 - anyone has ever made
in their entire life.
12:10 - But we can now see-- and I
could say createCanvas 200, 200.
12:16 - I can now see that
when I run this,
12:18 - I now get this lovely canvas
with six circles on it.
12:22 - So this is-- look.
12:24 - I did data visualization.
12:27 - I loaded a URL.
12:28 - I gave it a callback.
12:29 - I even used JSONP
for some padding.
12:32 - Wait, I have my padding song.
12:34 - But that's different.
12:35 - That's like CSS.
12:36 - Anyway.
12:38 - I need a separate video which
s just the padding song.
12:41 - And then I pulled
out the number.
12:42 - I made a loop and I
drew circles based
12:45 - on how many people in space.
12:46 - And if I could just
keep refreshing this,
12:48 - I'll get it in a
different location.
12:49 - But if somebody would just
leave space right now,
12:53 - then you would see five
circles instead of six.
12:55 - So this is the basic idea.
12:57 - I do think, however, there
are a couple other pieces
12:59 - of this that I want
to demonstrate,
13:01 - although you could stop
watching now if you want.
13:03 - You could stop watching
at any time if you want.
13:05 - So one that I did,
it was kind of nice.
13:07 - Like, this is just static.
13:09 - I don't need anything
to animate here,
13:12 - so I just put the
drawing stuff in gotData.
13:15 - But let's say what you
actually wanted to do
13:18 - was have a particular
animation that's going on.
13:21 - So you want your--
like, for example,
13:23 - I want the background--
13:25 - I want to have--
13:26 - this isn't going
to be interesting,
13:27 - but let's say I want
to have this line that
13:33 - goes across the screen
from x to 0, x to height.
13:39 - x equals x plus 1.
13:42 - And if x is greater
than width, x equals 0.
13:45 - And let's say stroke 255.
13:47 - So, in other words,
I want the circles
13:50 - to appear with this animation.
13:54 - So if I were to put the
drawing back in gotData--
14:00 - I know I'm doing
this kind of quickly
14:01 - and scrolling around like a
madman here on the screen--
14:05 - this is not going to work.
14:07 - Because, remember,
draw is looping
14:08 - to always draw that animation.
14:10 - gotData is an event that
happens just once when
14:12 - the data is ready.
14:13 - So that happened and
it drew those circles
14:17 - but it immediately got
overwritten by draw.
14:20 - So there's an easy solution to
this problem, you might think,
14:23 - which is, OK, just
take the circles
14:26 - and put them here in draw.
14:28 - So now what's-- so there's
a lot of problems with this.
14:32 - Let me run this.
14:33 - First of all, it's not working.
14:34 - Why is it not working?
14:35 - Now, hopefully, I probably
have some error message
14:38 - which we could see.
14:39 - Uncaught ReferenceError,
data is not defined.
14:42 - Well of course it's not defined.
14:43 - I can't use this variable
data down here and draw.
14:46 - gotData is a callback.
14:47 - That variable data is only
available in that function.
14:49 - So one thing I could
do is I could say var--
14:52 - I'm going to say spaceData.
14:54 - I could make up a global
variable and I could say,
14:57 - spaceData equals data.
15:00 - So this is now--
15:02 - I need a way of--
15:03 - this a sort of simplistic way
of doing it but it will work.
15:05 - I need a way of
connecting the data that
15:07 - came in to something
that's happening in draw,
15:09 - and a quick way of doing that
is just have a global variable.
15:12 - So I, one, ask for the data.
15:13 - When the data comes
in, I immediately
15:14 - store it in some other
variable, a variable
15:16 - that I can access in draw.
15:18 - So now if I run this-- and
you can see me accessing it
15:20 - there in draw.
15:22 - If I run this again--
15:23 - ah, now what's happening?
15:25 - Oh, sorry.
15:26 - I have to change
this to spaceData.
15:30 - Ah, cannot read property
number of undefined.
15:33 - Oh, what happened?
15:35 - Ah, what's not working?
15:36 - I know what's not working.
15:37 - I'm pausing to let you
think about it for a second.
15:40 - Asynchronicity.
15:41 - If that's even a word, I'm not
sure, but this is the issue.
15:44 - Remember, how are all of these--
what's the sequence here?
15:47 - Let me try to get everything
here on the screen.
15:51 - Let's just move this
animation for a second
15:54 - below here so we can see
the pieces that matter.
15:59 - There's setup, where I'm
asking to load the data.
16:02 - There's gotData, where
I'm retrieving the data.
16:04 - And there is draw, where
I am using the data.
16:08 - What's the order of the program?
16:10 - setup starts first.
16:11 - Make the canvas.
16:12 - The canvas is there.
16:13 - Load the data.
16:14 - That's a process that's now
happening in the background.
16:17 - Let's go to draw.
16:18 - Start drawing, draw
with spaceData.
16:21 - The data's not loaded yet.
16:23 - This is going to take a while.
16:24 - You've got to query the
URL, make some connections
16:26 - across the internet,
get the data back.
16:28 - So spaceData is not anything
until this happens, but draw
16:32 - has already started.
16:33 - So there is a nice way
of dealing with this
16:36 - and it has to do with a
nice trick that you can do
16:38 - in JavaScript, which is
using a Boolean test, an if
16:42 - statement, which is a
concept you're probably
16:44 - quite familiar with.
16:45 - We usually think of
a Boolean expression
16:47 - as something that
evaluates to true or false.
16:49 - Like, if 7 is greater than
5, this is absolutely true.
16:53 - But what does it mean for
me to say if spaceData?
16:59 - Now, one of the nice things
about JavaScript is it just--
17:02 - all it ever wants to do is to
have things be true or false.
17:05 - Like a number, it can be
evaluated to true or false.
17:09 - Like if it's 0, it's false.
17:10 - If it's any other number,
they think it's true.
17:13 - A string probably
could be evaluated.
17:15 - If it's the string
false, that's probably
17:17 - going to evaluate to false.
17:18 - So what is actually
the value of spaceData
17:22 - before the data comes in?
17:24 - It's undefined.
17:25 - If you have a variable
that's not initialized--
17:28 - like up here, spaceData is not
initialized-- its initial value
17:32 - is undefined.
17:33 - And undefined
evaluates to false.
17:36 - So spaceData-- and
defined, like an object,
17:40 - just automatically
evaluates to true.
17:42 - So you can basically
say if spaceData
17:44 - as a way of saying
if spaceData exists.
17:49 - So spaceData, it doesn't exist
until the data has actually
17:52 - come in.
17:53 - So if I just add that-- whoops.
17:55 - Oh, I was in the wrong view.
17:56 - You're going to have
to live with that.
17:59 - I can write here--
17:59 - I can say if spaceData,
then do this.
18:07 - So now, even though draw starts
looping, this part of draw
18:11 - won't actually happen until
spaceData gets built here.
18:14 - And now we can see this works.
18:16 - Now, of course, I'm drawing
them at random locations.
18:19 - Here's actually a really
quick trick for me
18:21 - to get that to stop.
18:23 - I could just say randomSeed.
18:25 - It's kind of a topic
for another video,
18:27 - but randomSeed is a function
that seeds the random number
18:29 - generator so you always
get the same exact sequence
18:32 - of random numbers.
18:33 - And that's going to
work for me here,
18:34 - at least just in a sort
of quick and dirty way.
18:36 - So you can see I now have an
animation and a visualization
18:39 - at the same time.
18:40 - I'm not drawing the
part with the data
18:42 - until the data has come in.
18:44 - So I was very long-winded
in this particular video.
18:47 - I could have done
this in half the time.
18:49 - But what I would suggest
to you right now, if you're
18:51 - looking for an exercise to do,
is go to this particular data
18:54 - source--
18:54 - I'll link to it below--
18:55 - and see if you can at least
add now, add the people.
18:59 - Like what could you add?
19:00 - The craft and the name as
text next to the circles
19:03 - or something.
19:04 - You're going to use the
rest of the data here
19:06 - also and quickly get it to work
is this asynchronous callback
19:09 - way.
19:09 - And I think now I've
actually covered enough
19:12 - that the next step
it can really be
19:13 - is, what if you've got an
API, like the New York Times
19:17 - or Instagram, that's
serving up data?
19:19 - How do you query that API with
loadJSON and do stuff that way?
19:25 - Boy, this is a 20-minute video.
19:26 - Oh, I don't know about this.