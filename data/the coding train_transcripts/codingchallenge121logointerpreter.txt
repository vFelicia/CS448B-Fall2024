00:01 - (bell dings)
00:02 - (whistle blows)
00:03 - - Hello, up there.
00:04 - I'm much lower today, 'cause
I'm sitting in a chair.
00:05 - This coding challenge requires a chair.
00:07 - Actually just me that
needs the chair today.
00:10 - Okay,
00:11 - I feel so organized.
00:12 - I feel like I need papers,
like I'm a newscaster
00:15 - or something.
00:16 - Welcome to the Coding
Train Coding Challenge.
00:19 - Today I'm going to make Logo.
00:21 - (bells dings)
00:22 - What do you mean, you're
going to make Logo?
00:23 - So Logo is an educational
programming language
00:24 - designed in 1967 by all
these people listed here.
00:28 - And you can go read the Wikipedia page
00:29 - to learn more about the history.
00:31 - I actually did learn to
program a bit in Logo
00:33 - in my youth.
00:34 - Maybe some of you did.
00:36 - So what I mean by making Logo,
00:37 - I want to create
00:39 - a interpreter.
00:41 - I want to create a programming environment
00:43 - in the browser that basically does Logo.
00:45 - So I, as the, ooh, it's
like spell-checking me here.
00:49 - How weird.
00:50 - I can write Logo commands and then watch
00:53 - my Logo commands be
executed in this canvas.
00:58 - And probably what I
should do is have a button
01:00 - that's like a run button.
01:02 - But maybe I could be
continuously interpreting it.
01:04 - Who knows?
01:04 - So what are the Logo commands?
01:06 - So the idea of Logo is turtle graphics,
01:08 - the idea is that you're
controlling a turtle
01:10 - to move around the
screen, a turtle move can,
01:13 - and the turtle can do a number of things.
01:15 - I found this tutorial from
a Brown University course.
01:20 - You can find the link up here
01:21 - and these are the drawing commands.
01:24 - I can move forward by a certain amount,
01:26 - I can go backwards by a certain amount.
01:28 - I can turn right, I can
turn left by some angle
01:31 - and I can clear screen.
01:34 - There are also other commands,
01:37 - there's a repeat command and
there's pen up, pen down.
01:39 - It's very strange to be sitting here.
01:41 - Hide turtle, show turtle,
home, label, set xy,
01:45 - so many possibilities.
01:47 - I'm not going to implement everything
01:49 - because I got to go home at some point
01:50 - but I'm going to do some, I'm
going to release this code
01:53 - and you, the viewer, will probably make
01:54 - your own magical Logo interpreter.
01:56 - Maybe you don't even want
to make a Logo interpreter
01:59 - but just this idea of drawing in this way
02:01 - will inspire you to do something.
02:03 - So and what would be
interesting is could I make
02:06 - a Logo interpreter that then
I paste something in here
02:10 - that would actually generate
this particular pattern,
02:13 - this example Logo output.
02:14 - So that's kind of like
a bit of a challenge,
02:16 - certainly I would need a
repeat to be able to do that.
02:19 - And this video will be approximately seven
02:22 - and a half hours long.
02:24 - Are you ready?
02:24 - Let's go.
02:27 - All right so the first
thing that I want to do,
02:28 - huh, what do I want to do?
02:29 - I guess I need to parse this
02:32 - so okay, what do I have already?
02:35 - So I have already an HTML page
that has a text area in it
02:39 - and that text area has
this sort of Logo code
02:43 - written in there so what I can do,
02:45 - and I'm using the p5.js library,
02:48 - and what I can do is I can say
02:51 - I'm going to make a
02:54 - something called editor, I'm
going to say editor = select
02:58 - code and then I'm going to
say console.log editor.value
03:04 - and call the value function,
was that what it's going to be?
03:06 - Let's see, whoops, refresh, there we go.
03:10 - Okay, so that's how I get the code.
03:12 - So I could say a let code = editor.value.
03:19 - Then what do I need to do?
03:21 - I need to parse this and looks to me
03:24 - like I can quite easily
parse this with space.
03:27 - So I can really nicely
I can do say something
03:30 - like let tokens, tokens is a
sort of word that's often used
03:33 - in computational things
to describe a single unit,
03:37 - a token of text, a word
token, a sentence token,
03:41 - a character token, 'cause
what I want to do is say split
03:44 - and at the most simplest
level, I just want to split
03:46 - that text up by,
03:50 - by spaces and I can do
all sorts of fancy stuff
03:52 - in here, like use a regular
expression and split it
03:55 - in fancier ways and I'm
going to need error handling,
03:57 - I'm not going to worry about any of that.
03:59 - I am just going to go
ahead and say look at this.
04:01 - All right, look at this,
aah, lovely, lovely.
04:03 - Look, there's this weird
extra character return thing
04:07 - but I'm not going to worry about that.
04:09 - We can see now I have something,
it splits up everything
04:11 - into an element of an array
and actually I'm getting
04:13 - a nice suggestion from the chat
04:15 - that if I call console.table,
I might be able
04:18 - to see it in a nice other way.
04:20 - Oh, that's really nice,
look at that, console.table.
04:23 - (bell dings)
04:24 - It's like my favorite things ever.
04:25 - Okay so there we go, so we
can see there's the array now.
04:28 - All right so what do I want to do?
04:29 - Ooh, I have a crazy idea.
04:32 - Let's build a dictionary.
04:35 - What I mean by a dictionary,
let's make a JavaScript object
04:38 - where each one of these,
04:40 - each one of these commands is a function,
04:44 - each one of these keys, the
command is mapped to a function.
04:48 - What am I talking about?
04:50 - Let me show you with code.
04:52 - So let's actually make a,
04:56 - another JavaScript file called turtle.js
04:59 - and normally I would
make a turtle graphics,
05:01 - a turtle object which
would really make sense,
05:04 - I might want to, actually let's do that.
05:05 - Let's make a turtle object
05:07 - 'cause the turtle is going to need,
05:09 - the turtle is the thing
that's moving and drawing.
05:11 - So the turtle is going to have an x value,
05:16 - maybe it'll be initialized somewhere.
05:19 - The turtle will have a y value
and that's good right now.
05:22 - And the turtle might have functions like
05:25 - forward,
05:28 - backward,
05:30 - backward.
05:33 - 'Cause this idea that I
had was to then also have
05:36 - an object like
05:39 - commands = and then
forward would be a key,
05:45 - mapped to a particular function
05:48 - and in that function, we would
05:53 - translate
05:56 - by some amount,
05:57 - by
05:59 - some length or something.
06:02 - Maybe I'm always going to
move forward along the x axis,
06:04 - I'll have to be rooked, right.
06:06 - I could do that.
06:07 - So I was thinking about doing this
06:08 - but it kind of makes sense
to have an object, hmm.
06:13 - Hmm, oh right, it definitely
needs a direction,
06:16 - this is very important.
06:17 - I might call it angle.
06:19 - It needs a direction.
06:20 - I don't know if it makes
sense to call it direction
06:23 - or angle, maybe the direction
but it's initialized
06:25 - as an angle but I kind of, so
I'm going to do this right now.
06:30 - And this, by the way, would be,
what was the actual command?
06:33 - It's fd for forward so
I'm going to put this away
06:37 - for a little bit and what I'm going to do
06:41 - is I'm going to say let turtle
06:46 - and I'm going to make a turtle.
06:49 - That's what I'm doing with
my life, making turtles.
06:52 - New turtle and it's going
to start in the middle
06:56 - of the window
06:58 - with
07:00 - an angle of zero.
07:03 - So this is going to be the initial turtle
07:05 - and then let's think,
so let's forget about
07:07 - the fact that I have to
follow the Logo commands
07:09 - and let's just for a
second actually program
07:13 - the things I would do.
07:14 - So if I'm going to go
forward by some amount,
07:18 - I'm going to say translate by that amount.
07:22 - Everything's going to be along the x axis.
07:27 - If I'm going to go backward,
07:29 - watch this, I could say
forward by negative amount.
07:32 - This.forward, ooh,
whoa, Visual Studio Code
07:35 - just corrected that for me.
07:37 - Let me try that again.
07:39 - Forward.
07:40 - Ha!
07:42 - That's scary.
07:43 - It's like how Gmail writes
your email for you now.
07:46 - This.forward negative amount, right,
07:49 - so backward is moving
forward by a negative amount.
07:51 - What were some of the other commands?
07:55 - Where were they?
07:55 - Right.
07:56 - So right
07:58 - would be,
08:01 - I'm going to say right,
08:02 - oh by the way, so I actually,
when I read the command,
08:05 - I don't need to have forward and backward
08:07 - 'cause I'm just going to
use my forward command
08:09 - so anyway we'll see, but right would be
08:14 - by some angle,
08:17 - I would say rotate, no
don't auto-correct for me
08:21 - by that some angle.
08:24 - So that's what I'm going to go.
08:26 - So I'm probably going
to use the fact that p5
08:29 - has this whole transformation matrix thing
08:33 - and I have some video
tutorials about that.
08:34 - Push, pop, translate, rotate
08:36 - so I can actually control
the turtle that way.
08:38 - I could do all that math with trigonometry
08:40 - but I'm going to stick with that.
08:43 - And everyone's tellin' me that this.thing,
08:46 - this dot, this dot.
08:48 - ♪ This dot ♪
08:49 - - Has been around for quite a while.
08:52 - In Visual Studio Code.
08:53 - Okay.
08:55 - Never forget that this dot,
now I won't be able to forget,
08:57 - but I want to forget it.
08:59 - What if I did this?
09:00 - Ah, wait, can I never, am I
never going to forget again?
09:03 - What if I did something weird like this?
09:05 - It doesn't change it.
09:07 - It did it with functions, it didn't know
09:09 - to change my instance variable.
09:11 - Okay.
09:12 - All right so let's stick
with this for a second
09:15 - and I am going to...
(knocking on desk)
09:18 - Also, I need to know whether if,
09:20 - so ah, the turtle's going
to need a pen state.
09:23 - So let's make a variable
called pen that's true
09:26 - when the pen is drawing and false
09:28 - when the pen is not drawing.
09:30 - So I would say if and then,
ooh, I don't need the xy.
09:34 - So do I need, I need the starting point.
09:37 - So the starting point would
actually just be translate
09:40 - to that xy.
09:44 - And interestingly enough,
I don't necessarily need
09:47 - to keep track of these things,
let's think about that.
09:49 - I might.
09:50 - And then rotate by that angle.
09:52 - So when I create it, I'm
actually just translating
09:56 - and rotating then forward if this.pen,
10:00 - I want to say line
10:02 - by some amount
10:05 - from 0,0
10:07 - to the amount comma zero.
10:08 - I want to draw a line,
I'm considering the x axis
10:10 - to be the kind of universale axis,
10:13 - I'm going to rotate from
there, it might make sense
10:14 - for it to be the y axis to be honest
10:16 - 'cause you might think
of it starting going up
10:17 - but whatever, I can always change that.
10:19 - I'm going to draw that line
10:21 - and actually so I want
to draw the line first
10:24 - and then translate to the end of the line,
10:26 - that's what I want to do.
10:27 - And rotate is just rotate, okay.
10:30 - So if I have forward and right,
10:32 - I don't think that I need backward.
10:36 - What I'm going to do now in here
10:39 - is I'm going to say for
every token in tokens,
10:47 - let,
10:49 - oh no I have that already,
10:51 - let's do this in a
ridiculous way for a second.
10:53 - If token = forward, then
10:57 - amount =, oh no, I should use
11:02 - an index here.
11:04 - Because I'm going to want
to look at the next one.
11:06 - i is less than tokens.length,
11:09 - i++, you know what, I'm
going to be even crazier
11:13 - and I'm going to say index = 0,
11:16 - while index is less than tokens.length,
11:20 - I'm going to manually kind
of iterate over this thing.
11:23 - And I'm going to say
11:26 - let token = tokens index.
11:31 - Then I'm going to say if token = forward
11:36 - and I want to think of a
different way or organizing
11:39 - this code for sure, switch statement,
11:41 - I know you're all thinking.
11:43 - If token = forward then amount should be
11:47 - tokens index + 1
11:50 - and then I can say turtle forward amount.
11:56 - Right?
11:59 - So what's in the actual instructions?
12:03 - Forward, right, forward,
right, oh this is good.
12:05 - Only forward and right, that's perfect.
12:09 - Else if
12:11 - token = right
12:15 - then let angle =
12:18 - also the next one
12:22 - and then turtle,
12:25 - right,
12:26 - did I say, is it right?
12:28 - I mean maybe I should
make this turn, whatever.
12:30 - Right by the angle.
12:32 - Oh and I should say angle mode degrees
12:35 - because the angle is being
given in degrees not in radians.
12:39 - If that's not a familiar concept to you,
12:41 - I will refer you to some other video
12:43 - that I have about
radians and angles, okay.
12:47 - So now, okay so now (clicking tongue).
12:51 - Yeah so people in the chat are
telling me I can say index++
12:55 - so why can't I say that?
12:57 - Let me show you why.
12:59 - So let's say I have a variable like i = 0.
13:04 - Well we know that i++ is the same
13:06 - as saying i = i + 1.
13:09 - So i++ but it also returns that value
13:12 - so it resets the value and returns it.
13:14 - It actually allows me to move forward.
13:16 - So I was going to lazily
just say at the end i += 2
13:21 - but it would make sense for
me to actually say index,
13:25 - index, not i, index++
in here which is like go
13:29 - to the next one and use
the value of the next one
13:33 - all at the same time and then afterwards,
13:35 - I could go one more because
I need to go to the next one.
13:39 - Okay 'cause not everything
will be in a pair we'll see.
13:41 - All right, so let's look at that.
13:44 - And I'm going to hit refresh.
13:47 - And I have an error somewhere, oh too,
13:50 - too many curly brackets.
13:55 - I'm going to put this here and here we go.
13:57 - Oops, no, refresh, ah,
tokens is not defined.
14:02 - Code.split, why is tokens not defined?
14:06 - Where is tokens not defined?
14:07 - Sketch.js line six.
14:10 - Oh 'cause I was console logging it.
14:13 - I don't need to console log anymore
14:15 - but let's leave that in there.
14:19 - Turtle is not defined, oh okay,
14:21 - so of course, I need
to also here reference
14:25 - and add my other JavaScript
script which has turtle.js.
14:30 - Okay, ready?
14:34 - I don't see anything.
14:35 - So one thing I have to
think about here is hmm,
14:39 - let's set up a stroke.
14:42 - I got to really deal, someone's
going to help me figure out
14:45 - how to turn off this
auto-complete that I don't want
14:48 - in Visual Studio Code.
14:49 - I think someone already did tell me this
14:51 - and I forgot to look at
it, I think it was Nathan,
14:53 - thank you Nathan.
14:55 - Oh and there's ++index and
index++ which someone from
14:58 - the chat is making, maybe I'll
come back and talk about that
15:00 - in a second, all right, stroke 255.
15:04 - Let's just add stroke weight one,
15:07 - actually we don't need
to add that, that's fine.
15:09 - Actually, let's make it a little thicker
15:11 - just so it's easier to see.
15:13 - Stroke weight two.
15:15 - Oh yeah let's see.
15:19 - Hmm so why am I not seeing anything?
15:20 - So let's console log some
stuff, a little debugging here.
15:24 - Console
15:26 - .log token
15:30 - and console.log forward,
let's see if that happens.
15:34 - Okay, forward, forward,
ooh, yeah, forward, forward,
15:37 - right, forward, forward,
so it is getting forward.
15:40 - Let's look at, oh, you know
what, this is a string.
15:45 - Turtle.forward amount
is going to have trouble
15:48 - understanding that.
15:49 - I wonder if I should have this.
15:52 - I should probably convert.
15:57 - I could do something like
this, convert it to a number
15:59 - or parseInt() might be
good, let's do parseInt(),
16:03 - that might be a little more universal.
16:05 - So let's add that.
16:08 - I was thinking that might be the problem.
16:09 - Let's console log amount.
16:14 - Ooh, not a number.
16:16 - Hold on everybody,
something is terribly wrong.
16:19 - Oh (claps) so it's actually
the, woo, thank you,
16:23 - breaking news from the chat.
16:25 - (upbeat music)
16:28 - I actually have to use the ++index there.
16:31 - This is why I didn't want to use that.
16:32 - So the chat is going
crazy over this mistake.
16:34 - Listen to the chat please.
16:36 - I'm sitting in a chair, it's
hard for me to see the chat.
16:40 - Okay, I don't use these things,
I like to be long winded
16:44 - in how I code.
16:45 - So let's go back to here, ah, so sad,
16:47 - let's look here at, right, i = 0,
16:52 - console log i++, that gives me
16:58 - zero, right, because even
though i is now 1, i++ returns
17:03 - the original value of i, there we go.
17:05 - So that's actually not giving
me the correct thing but
17:10 - ++i actually returns, now I'm getting two
17:14 - 'cause it already went on to the next one.
17:15 - So this increases the value of i
17:17 - and gives you back that new value.
17:19 - I see this in shorthand all the time,
17:21 - it's kind of like a ternary thing
17:22 - that I'm finally getting myself to use.
17:24 - So this actually needs to be this.
17:27 - ++index.
17:28 - Maybe, i++, so Gabriel in the
chat is saying i++ increments
17:33 - and returns the previous number
++i increments and returns
17:37 - the next number, that's a nice,
succinct way of saying it.
17:41 - (bell dings)
All right.
17:42 - So here we go.
17:43 - So forward 60, 60, so now
things are lookin' up.
17:47 - The turtle is printing
out the right amount.
17:52 - So let's console log the amount here
17:58 - and let's give this a try, all right,
18:01 - so (clicking tongue).
18:04 - I don't need to console log the token,
18:05 - there's too many console logs here.
18:07 - 63 times.
18:08 - How come
18:11 - I don't see a line?
18:15 - I'll look at the chat.
18:17 - I don't want to look at
the chat, that's the thing,
18:19 - I like to figure these things out myself.
18:21 - How come I don't see a line?
18:22 - So turtle forward amount.
18:24 - When I created the turtle,
I made it in the middle.
18:28 - Oh you know what's a
little bit weird here?
18:32 - So this is not so good.
18:35 - I'm a little suspicious
that translate and stuff
18:38 - is not going to work
the way I want in setup.
18:41 - I need to move on to the draw loop.
18:43 - For example, if I say translate 100, 100
18:47 - and then ellipse
18:50 - 0, 0, 200, 200.
18:53 - Let's just run this for a second.
18:54 - Why am I not drawing anything?
18:56 - Oh draw background zero, aah.
19:01 - (buzzer buzzes)
This whole thing.
19:03 - I'm calling background, I can see the chat
19:05 - actually saying that now (chuckles).
19:08 - I've been calling
background this whole time,
19:10 - what a terrible problem.
19:12 - Okay let's go back and see
if my logic now is sound.
19:15 - My brain operates more slowly
when sitting apparently.
19:18 - Okay let's try this.
19:21 - All right, weird.
19:23 - I don't know what just happened there.
19:24 - Oh background zero.
19:26 - Let's draw the background zero here.
19:29 - There we go, look at that.
19:31 - (bell dings)
Turtle graphics.
19:34 - Now, I kind of feel like forward 60
19:36 - should probably start pointing up.
19:39 - Does anybody know how Logo actually works?
19:40 - Turning right, it definitely
the right direction.
19:42 - Left would be the other way.
19:44 - I don't know that this matters so much.
19:46 - I'll leave it like this, okay.
19:48 - So all right, we're kind of good.
19:50 - I've got to deal with other commands.
19:52 - Anyone have an idea?
19:54 - I would love to take an idea about
19:56 - how to, I mean I could
use a switch statement
20:00 - but I kind of like the
idea of a lookup table.
20:04 - What if what I did is I took this idea,
20:08 - I want to try this idea of my commands.
20:12 - I have an idea, oh, this'll work.
20:16 - If, oh I have a totally have a crazy idea.
20:18 - So forward is a function
20:21 - of turtle
20:24 - .forward.
20:27 - I have to figure out
how to do the argument.
20:30 - Then,
20:33 - backward is the same thing
but maybe it calls it with,
20:37 - so can I give it, how do
I give this an argument?
20:40 - 'Cause I want it to self-execute.
20:43 - I have to think about this,
somebody think about this.
20:45 - I combined it with something?
20:46 - Is this a sound strategy?
20:49 - Right
20:51 - is then a function
20:53 - that calls turtle.right.
20:57 - In other words, what I want to do is say,
21:01 - oh, but I thought, I want to say...
21:08 - I want to say basically
21:12 - commands token execute, oh
yeah, I can give it an argument,
21:18 - of course.
21:19 - Tokens ++index, look at this,
so this should do exactly
21:23 - what I was doing, right?
21:24 - The token is forward, execute the function
21:27 - with that command with the argument, yeah.
21:31 - So I don't need an if statement here.
21:34 - All I need is this.
21:36 - Right because now it's going to
21:39 - and so the argument goes here.
21:43 - The argument for backward goes here
21:45 - and I just do negative amount,
21:48 - then right is the angle,
21:51 - turn right the angle and then this is,
21:55 - I don't know if this is a sound solution
21:56 - but I'm intrigued by it.
21:58 - Left is turn right but
by negative the angle.
22:04 - Okay.
22:05 - So this should work, this
is a little bit nuts looking
22:08 - but let me unpack this for you.
22:11 - If I had a function that's forward
22:14 - with an amount, this is
actually what this is doing
22:18 - because I have, this resolves
itself to this number
22:23 - that's the argument after the command
22:26 - and this resolves itself to a function
22:29 - that's defined up here that I'm calling.
22:32 - So I think this is going to work.
22:34 - Let's try this.
22:36 - For some reason I feel like having this
22:38 - in a separate,
22:40 - I feel like having this in here.
22:43 - Let me zoom back out.
22:45 - This just makes more
sense to me to have this
22:48 - with the turtle class 'cause
they kind of go together.
22:51 - Okay.
22:52 - No, commands token is not a function.
22:54 - Why not?
22:55 - Console log token,
22:59 - console log
23:02 - commands.
23:04 - Let me just see what's going on here.
23:06 - So.
23:08 - Oh no I just got to the end.
23:10 - So we got to the end because there was
23:11 - an invalid token there.
23:14 - So first thing I need to do is make sure
23:17 - if commands token even exists.
23:21 - So I want to make sure it exists
23:24 - and if not, I want to skip it.
23:25 - So this is a little bit of
kind of pathetic error handling
23:28 - but it should work and now I can say...
23:31 - Ooh, look at that, we've
got turtle graphics, right?
23:35 - I can add another left,
23:38 - left 60, forward 50.
23:42 - Oh I don't have any way, oh I'm not,
23:44 - so I need to realtime, let's
realtime interpret this.
23:48 - What do I mean by that?
23:50 - So what I mean by that is I've already,
23:53 - I didn't really explain these pieces,
23:55 - I just realized at the beginning.
23:56 - So I made a text area,
I think I did actually,
24:00 - with an ID and then I
used the p5 DOM library,
24:02 - okay I did explain this, all right,
24:05 - so but what I can do is
I can attach an event
24:06 - and the event that I
want attached is editor
24:10 - input and then,
24:13 - and then basically I
want to say go turtle.
24:18 - So anytime I make any change,
24:20 - actually, maybe I want to,
24:22 - let's start with changed,
let's just start with changed.
24:25 - So changed is an event that only executes
24:29 - when you've finished a task.
24:30 - You hit enter or you tab out of a thing.
24:33 - And now I can take all of this
24:38 - and this is my function go turtle
24:40 - and again, I'm kind of, not really using
24:42 - more modern ES6 JavaScript
but that's fine.
24:45 - So now I have go turtle, it should execute
24:47 - whenever I change anything in the editor.
24:51 - So let's delete all
this and tab out of it.
24:54 - Ah, code.split is not a function.
24:56 - Why not?
24:57 - Oh I've got to get the
new stuff from the editor.
25:02 - And you know, I could select it,
25:04 - and I know it's a little silly
to have this global variable
25:06 - but whatever, it's fine,
okay, refresh, if I do this,
25:10 - tab out, I got this.
25:12 - Now I can say right 100 but
I want it to live interpret,
25:16 - why not, right?
25:19 - I should be able to write
enough error handling
25:20 - that it can interpret the code live.
25:23 - So I'm going to change this to input
25:26 - and you'll see when I, oh, if I hit space,
25:29 - right,
25:30 - ooh, but I also (chuckles)
need to redraw the background.
25:36 - Ooh, this is fun, okay, so now
I can start deleting stuff.
25:40 - Weird, ooh and guess what?
25:42 - Another thing I need to do.
25:44 - I need to say push and (sighs)
25:47 - push and pop because I
don't want it to pickup
25:52 - from where it last left off.
25:53 - I always want it to
start from the beginning.
25:57 - Okay I can see all the comments
of people helping me fix
25:59 - my Visual Studio Code, okay.
26:02 - Now, this should, so first
of all, I want it to run once
26:06 - at the beginning so I also
need to call go turtle
26:10 - at least once.
26:13 - All right and now, if I start deleting,
26:17 - look at that, it's actually
realtime interpreting
26:21 - so I could say forward 500,
26:24 - 10,
26:25 - left,
26:27 - left 90,
26:29 - forward 100, look at that, oh I love this,
26:32 - it's like realtime interpreting,
26:34 - we're kind of (bell dings)
dare I say somewhat done
26:37 - with this coding challenge?
26:39 - But we can't stop here, right?
26:41 - I mean, everybody tells
me don't make a video
26:44 - on YouTube that's longer than 20 minutes.
26:46 - This one is going to be as long as it is.
26:48 - Because I want to be able to do this
26:50 - and I think there's a
lot more to implement.
26:53 - I should implement pen up and pen down,
26:56 - that would be a pretty easy
one to do, let's do that.
26:59 - Let's implement that, just to show you,
27:01 - but I'm going to ask you,
I'm going to ask you,
27:03 - maybe we'll make this a community project.
27:05 - I will release the code as is,
27:08 - the finished version of
this coding challenge
27:10 - on GitHub, the coding train website,
27:12 - but I will also make a new repository,
27:14 - look in the videos link for a version
27:17 - that people can contribute to.
27:19 - So if I do what is pen up and pen down?
27:22 - P U (chuckles) I'm so immature.
27:25 - P U function would be turtle
27:29 - dot pen = true, right?
27:32 - And then P D would be a function
27:36 - that is turtle dot pen = false.
27:40 - So I should be able to
use those now, right?
27:43 - So for example, if I just
refresh my code here,
27:47 - if I say right here pen up,
27:51 - it should, okay, so something didn't work.
27:54 - Let's think about this.
27:56 - Turtle pen = true.
27:58 - Oh it still moves but it
doesn't draw the line.
28:01 - That's right.
28:04 - So let's look at this again.
28:05 - It shouldn't move on, it should
just move on by one index.
28:08 - I guess we're going to
have to console log here.
28:12 - Let's debug this.
28:13 - Forward 60,
28:16 - let's do forward 40,
28:18 - right 90,
28:20 - pen up,
28:21 - forward 100,
28:24 - right 90,
28:26 - forward 50,
28:27 - huh.
28:29 - So, what happened?
(clicking tongue)
28:34 - When it's up, it won't write
which I don't want it to
28:37 - but I want it to still move
forward, it still should
28:42 - translate, let's console log,
what am I console logging?
28:45 - This amount...
28:48 - How'd it get in there with not a number?
28:51 - That's weird.
28:53 - I don't want it to ever
do that so let's look at,
28:57 - let's make sure,
28:59 - let's count back and console log,
29:02 - there's going to be a little
debugging here going on.
29:05 - The chat will probably
tell me what's wrong
29:06 - but I'm going to say console and
let me just actually here now,
29:12 - let me just change this to
something that I want to test.
29:15 - Right 90, forward 50, right
90, pen up, forward 50,
29:21 - right 90, oh I need to
do pen down, that's why,
29:26 - maybe it's working. I never did pen down.
29:30 - (chuckles)
Let's see,
29:32 - pen down, forward 50.
29:35 - Maybe it actually worked.
29:37 - Okay, forward 50, right
90, forward 50, right 90,
29:41 - pen up, forward 50, right
90, pen, no I should see
29:44 - a line here, I should
see a last line there.
29:48 - It expects a number, it shouldn't, ooh,
29:53 - oh, because it's
actually, oh, interesting.
29:56 - It's doing this for every command
30:00 - so it only should do
this if commands token,
30:04 - ah, so how do I, of course,
30:06 - so it needs to know now to do this.
30:10 - So I could,
30:13 - hmm.
30:15 - Yeah, don't increment
the token index again.
30:19 - Yeah but I'm trying to
do this in an elegant way
30:21 - without an if statement (chuckles).
30:24 - Somehow I want to return
something to tell it not to go up
30:30 - but I already going up to get the angle
30:32 - so I mean I could.
30:35 - Certainly I could say if commands, right,
30:37 - I mean I could do something like if token,
30:41 - so what's a starts with P,
30:45 - index of P = 0, all
right that's a quick way,
30:49 - oh, charAt(), this is
more, this makes more,
30:54 - charAt(0) =,
30:57 - as long as token,
31:01 - all right, if token charAt(0) = P,
31:03 - someone's going to suggest
a better way to do this.
31:08 - But let's just get this working right now.
31:11 - Then, a command token (vocalizing)
31:17 - just execute it without any arguments,
31:19 - else,
31:22 - execute it with
31:24 - this and go up by one.
31:26 - So this should do the trick, right,
31:27 - based on what the token is.
31:29 - Yeah I want to return the
amount but I feel like,
31:32 - I have to think about
this more, let's just get,
31:34 - let's just make this work,
let's make this work.
31:38 - Sketch 32,
31:42 - okay so I'm out of, I'm
incorrect in my land of brackets.
31:47 - If there is a actual command,
31:49 - oh no if it = P, by the way,
this should be if it = P.
31:53 - If token charAt(0) = P, then
just execute the command
32:00 - with no argument,
otherwise execute commands
32:02 - with the next argument, what's wrong here?
32:04 - I guess I'm just missing
another curly bracket somehow.
32:08 - There we, ooh.
32:10 - Forward, okay let's hold on,
32:12 - forward 50, right 90,
uh, what happened here?
32:16 - Pop was called without matching, oh whoa,
32:18 - the pop has to be out
here, (chuckles) okay.
32:21 - There we go, all right,
forward 50, right 90,
32:25 - forward 50, right 90, pen
up, didn't go forward 50.
32:30 - Pen up
32:31 - which should make the pen
32:35 - be false
32:37 - and then it should go then
32:40 - forward still,
32:44 - remove the nod, yeah I
already got that part,
32:46 - the chat's behind me.
32:52 - And then, oh yes, a better
way would be to have,
32:55 - Nathan in the chat said
a better way would be
32:58 - to have additional methods
and the commands object
33:00 - tell it how many arguments
to take but hold on,
33:01 - I want to debug, why is this not working?
33:03 - I mixed up pen down
and pen up, that's why.
33:06 - (bell dings)
33:07 - Thank you very much, is that really why?
33:08 - Pen up, oh yeah, (laughing) pen down.
33:13 - There we go.
33:15 - There, yay.
(clapping)
33:20 - (whistle blowing)
33:21 - Look at the chat going crazy.
33:24 - I inverted pen up and pen down, all right,
33:25 - but this is exciting because
I can change this to pen down,
33:29 - ooh, wait, it froze.
33:32 - Do I have some sort of
bad infinite loop here?
33:35 - Hold on, I have a problem.
33:38 - Oh, I always need to go
up by the next index.
33:42 - Bad infinite loop problem.
33:44 - This was a big problem.
33:46 - My index++, I need to
always go to the next one
33:49 - so I'm going to have to,
33:50 - this page is frozen, I'm going
to have to kill it somehow
33:55 - and there we go, okay,
so now I should be able
33:57 - to change things around
again, oh, no, it's still?
34:00 - Oh because it didn't, it was cached,
34:04 - because I didn't have the console open.
34:08 - Can I get it back?
34:10 - No, try again, you know
what I'm just going to do
34:11 - is kill the server.
34:14 - Let's kill the server, I've
got a little local server
34:17 - running with HTTP server, let's see
34:19 - if that manages to get me back here.
34:24 - And let me open up the console and this,
34:27 - I should be good now, okay.
34:29 - Yeah, all right I'm back.
34:32 - Pen down, right, we can
make up whatever want.
34:34 - Forward 100,
34:37 - forward 10, right 10, forward 10,
34:42 - left, left 90,
34:45 - pen up, forward, ooh.
34:50 - What just happened?
34:54 - Something happened, something broke.
34:57 - Background, ooh.
34:59 - What's this?
35:00 - Background should be here.
35:03 - Hmm, let's try this again.
35:05 - Why did things break just there?
35:07 - (chuckles)
35:08 - What bugs do I have?
35:10 - Stroke zero on pen up, oh
that's an interesting idea.
35:12 - I love that idea, that's
a really good idea,
35:14 - maybe I won't do that right
now because people might want
35:17 - to play with color in a different
way but why did it break?
35:23 - Forward, okay, forward 10,
35:27 - right 90, forward 20,
35:32 - right 90, pen up.
35:36 - Why does that kill it?
35:38 - And then it doesn't come back.
35:40 - It'll rerun the input, I
need to, aah (bell dings) CJ,
35:44 - coding guard with CJ shoutout to watch
35:46 - the coding guard with CJ,
thank you CJ for this.
35:49 - I sort of forgot that the turtle's not,
35:52 - this is, right here,
35:55 - this is the sort of
re-initializing everything,
35:58 - like background re-initializes everything,
36:00 - the pop here undoes what
it does so in a way,
36:04 - the transformations
aren't initialized again
36:06 - and then I get the code
from the editor from scratch
36:10 - but I didn't reset the turtle
so I should really have
36:13 - a function that says turtle reset.
36:15 - I mean there's a lot of different
ways that I could do this
36:17 - but let's actually do that.
36:19 - So let's actually keep all these things,
36:24 - put this in a function called reset
36:29 - and say this.x, this.y, this.angle
36:33 - and watch this, watch the magic
36:35 - of Visual Studio Code to
type me this dot in for me.
36:39 - ♪ This dot ♪
36:40 - ♪ This dot this dot ♪
36:42 - - Okay, so now that
should fix that problem.
36:45 - X is not defined
36:48 - 'cause I forgot.
36:50 - Oh wait, hmm.
36:52 - Where's that?
36:53 - X is not defined in turtle.js line 30.
36:56 - Huh?
36:57 - This dot DR and IR not this dot angle,
37:00 - there we go, thank you.
37:04 - (buzzer buzzing)
Thank you to the chat.
37:05 - It's this variable,
this.direction, dir, okay.
37:11 - That didn't seem to fix anything.
37:17 - Here?
37:20 - Now I'm just messing
around, okay, well let's,
37:22 - let's be, let's actually
do some debugging here.
37:26 - Console.log, this.x, this.y, this.dir,
37:30 - let's look at those things.
37:33 - 100, 100, 0.
37:34 - That's good, why did I
see that twice just now?
37:37 - Oh because when I initialize
the turtle, that's fine though.
37:40 - So I actually don't need to
call this dot reset here,
37:43 - whoops, if I'm doing it, ah, there we go.
37:48 - (bell dinging)
37:49 - Good, now, it's not, oh it
is doing the right thing.
37:52 - So now I should be able to
just start deleting stuff.
37:56 - This is going to freak it out.
37:57 - So I'm not doing total error checking
38:00 - but now I can say
forward 100, there we go.
38:03 - Forward 10, right 90, forward 50,
38:07 - left 90,
38:10 - pen up, forward 10,
38:13 - left 90, forward 100.
38:18 - Mm, all right, so what did I, I broke it.
38:24 - Is this invalid?
38:24 - Forward 10, hi over
there, you're watching me,
38:27 - I'm still here with you,
right 90, forward 50, left 90,
38:34 - left 90 would be go this way,
pen up, forward 10, left 90,
38:39 - oh I didn't do pen down
(laughing) pen down, there we go.
38:43 - It's working.
38:48 - (bell dinging)
Okay,
38:50 - so this works.
38:51 - Now I could put in any kind
of commands that I want
38:54 - and get the result of the
turtle graphics drawing
38:57 - but I really, really
want to see this pattern
39:01 - and I could do some kind of crazy thing
39:03 - to generate the text
that does this pattern,
39:06 - that would be kind of a fun thing to do,
39:07 - a little challenge for you watching,
39:10 - to actually generate the
text which would be very long
39:12 - to then render that but
what would be better
39:14 - would be to actually
implement this repeat command.
39:18 - And so what the repeat command does
39:21 - is it basically says
repeat has an argument 3
39:22 - and then it looks for the
commands that are within
39:26 - these square brackets and does
those commands three times.
39:28 - So I'm going to have to
completely rethink the way
39:31 - that I split the text up.
39:33 - Just splitting it by spaces is no good,
39:35 - in fact I'm probably going to
want to parse the text as I go.
39:39 - I could maybe do some kind of recursion
39:41 - or a regular expression.
39:43 - So this is my challenge to you.
39:46 - Implement the repeat
command, I will come back
39:49 - in a future coding
challenge and do it based on
39:51 - the way you did it but
I'm not going to do that
39:54 - as part of this challenge.
39:56 - So right now, this is wrapping up.
39:57 - Look in this video's description to links
39:59 - to the code exactly the way that I left it
40:02 - as well as perhaps a community project
40:05 - where I will accept pull request to add,
40:07 - keeping it simple, add some
features and other commands
40:11 - that are part of turtle graphics.
40:13 - Also, you know, a grammar,
some type of thinking about
40:16 - a grammar might be a way.
40:18 - We're really in the weeds of
how compilers and things work.
40:21 - In a way, we're interpreting
40:23 - in realtime somebody else's
code and executing it.
40:25 - Wow, this is fun.
40:26 - It does need a train
so instead of a turtle,
40:28 - it could have a train
or you can make a train,
40:30 - a turtle or a train, I don't know anymore.
40:32 - I'm going to go, thank you for
watching this coding challenge
40:34 - where I implemented part
of the original Logo
40:38 - programming language and
stay tuned for part two
40:41 - where I finish this off at
least with the repeat command
40:44 - so we can generate some
more interesting patterns
40:46 - and I look forward to
your own versions of this.
40:49 - Please share them with on Twitter,
40:52 - on thecodingtrain.com website
40:53 - and in the comments here, okay?
40:54 - Thank you, goodbye.
(whistle blowing)
40:59 - (upbeat music)