00:05 - this video now is going to focus on
00:06 - removing elements from an array list
00:08 - what happens when an array list gets too
00:10 - large or there's certain elements that
00:11 - are in the array list but we don't need
00:13 - them anymore we want to delete them from
00:15 - that array list so that our program can
00:17 - run smoothly so an example of that is is
00:19 - right behind me this is where we left
00:20 - our sketch off that we have this empty
00:23 - array list that we initialized and set
00:24 - up and now what I added to it is every
00:26 - time through draw a particle is added
00:28 - and this looks like hey that's the
00:30 - particle system example we wanted to
00:31 - make we're done all it is is adding a
00:34 - new particle every time and draw and
00:35 - then saying hey all of those update and
00:37 - display them but here's the issue this
00:40 - array list is getting larger and larger
00:42 - and larger we're adding and adding and
00:44 - adding particles to it we're never
00:45 - deleting them so we need to figure out
00:47 - how do we delete them so in order to
00:50 - figure out how to delete them this is
00:51 - going to cover the last two methods of
00:53 - array list that we that we care about so
00:54 - let's take a look at that list right we
00:57 - already circled it because that's this
00:59 - is the second time I screwed it up the
01:00 - first time around but um we are uh we
01:04 - are looking at remove and size so what
01:06 - we want to say right now is hey let's
01:08 - just start with this simple uh way of
01:10 - doing it if the array list gets too big
01:12 - delete some elements out of the list so
01:16 - how do we first say if the array list
01:17 - gets too big well within a regular array
01:20 - we know we can say that array. length
01:22 - will give us the SI the length of the
01:23 - array with an array list we call the
01:25 - method the method is called size so
01:27 - that's sort of an easy thing to do we
01:28 - can actually just say something like if
01:31 - a do size is greater than
01:36 - 100 right now do something if the number
01:39 - of elements in that array list has
01:40 - somehow exceeded 100 this will happen
01:43 - very quickly if we're adding a particle
01:45 - every frame what do we do we need to
01:47 - remove an element from that array list
01:49 - so the remove function deletes elements
01:52 - from that list what do we have to tell
01:53 - it we have to tell which one elements in
01:56 - Array list are in an array list are
01:58 - indexed just like in a regular array so
02:01 - if this is kind of a
02:03 - representation of our array list and we
02:05 - can sort of think of there are like
02:07 - these particles floating in each slot
02:09 - and each slot has an index if I ask if I
02:12 - say to remove one a.
02:16 - remove now which one should I remove I
02:19 - could say let's remove zero or one or
02:21 - two it doesn't really matter but in this
02:23 - case what I'm going to actually do is
02:25 - say remove zero I want to remove that
02:28 - first element from the array list why
02:31 - because when you add elements to the
02:33 - array list they get tacked on to the end
02:35 - so you can see this array list sort of
02:37 - drawing is expanding with slots for
02:39 - particles it gets bigger and bigger each
02:41 - time we add one if we take away the
02:44 - first one that's the oldest particle so
02:47 - in this case I'm saying it's gotten very
02:48 - big find the oldest particle and delete
02:50 - it so a. remove zero so this is a sort
02:53 - of first little quick example of what of
02:56 - how we might keep an array list from
02:58 - getting too big so let's go back to our
03:01 - example over
03:03 - here and we can say hey okay let's add
03:06 - that bit of code if
03:09 - particles.
03:10 - size is greater than let's just do
03:13 - something really simple right now
03:14 - greater than 15 arbitrary number
03:17 - particles. remove zero let's do that now
03:21 - let's take a look at it you can see
03:22 - there actually it's like making them but
03:24 - it's like deleting them very quickly
03:25 - like because we can only have 15 total
03:28 - and so you know something more H
03:30 - reasonable hello again I dropped
03:32 - something um something more reasonable
03:34 - might be 100 and we can see okay it's
03:36 - giving us 100 particles and we you can
03:39 - kind of see that they're getting deleted
03:40 - so maybe we want it to be larger this is
03:41 - not the point of this you can tune your
03:44 - program to figure out what the right
03:45 - size and when you want to delete the
03:47 - point of this is this is a really simple
03:48 - way basic demonstration of how we can
03:51 - just keep an array list size to a
03:54 - maximum as well and to a maximum and and
03:57 - remove elements from that list at when
03:59 - we want
04:00 - now this is not the this is not the
04:03 - implementation we're going to use in our
04:05 - first particle system example that we're
04:07 - building what we actually want to do is
04:09 - something different we want to say hey
04:12 - when a particle is finished remove it so
04:15 - it's not about just saying oh we can
04:17 - only have a 100 we might say like hey
04:19 - only the particles on the screen let's
04:21 - keep only the particles whose Alpha
04:23 - hasn't faded away let's keep so we want
04:24 - to make this a little bit more advanced
04:27 - we want to figure out when a particle is
04:29 - finished let's remove it so we need to
04:32 - talk about this a little bit and then
04:34 - we're going to add that code um to this
04:36 - example
04:37 - so over
04:40 - here let's figure out how we're going to
04:42 - do
04:43 - that okay so here's the thing ah oh this
04:48 - this very very sad thing to tell you we
04:51 - were so happy about that enhanced Loop
04:53 - right that enhanced Loop that we over
04:55 - here for every particle p in particles
04:57 - we don't have to have in I and any of
04:59 - that stuff
05:00 - the problem with this enhanced Loop is
05:02 - we can't modify the array list while
05:06 - we're in that Loop and what we want to
05:08 - do right now is modify the array list
05:11 - while we're in that Loop we want to say
05:13 - for every particle in the array list
05:14 - particles check everyone if one of them
05:17 - is finished delete it from the array
05:19 - list so we want to delete things While
05:21 - We're looping through the array list so
05:23 - we can't use this Loop but hey we know
05:27 - how to write a loop that counts we can
05:29 - use a loop that count so let's figure
05:31 - that out we could say in the case of our
05:33 - array list called a over here we could
05:36 - say in I equals z i is less than how
05:40 - long is the array list a do
05:43 - size a do size I
05:48 - ++ now we can say
05:51 - particle P equal a. get I so right this
05:57 - is what the the enhanced Loop does for
05:59 - us it just says hey do something to all
06:01 - the particles we can be more long-
06:03 - winded about it we can actually count
06:05 - from zero to the end of the array list
06:07 - and we can ask for each particle at its
06:09 - index I individually so we're good we
06:12 - can do this and then we can say things
06:14 - like remember we had that function if
06:18 - particle is dead remember that function
06:21 - we wrote in the particle class that said
06:23 - when lifespan is less than zero when
06:25 - lifespan has gone all the way down to
06:27 - zero we're done with it we can delete it
06:29 - well now that we have that function we
06:30 - can then say
06:32 - a.
06:34 - remove I right this is this is our new
06:38 - algorithm that we have for looping
06:41 - through an array there's going to be a
06:42 - problem with this we're going to get to
06:43 - the problem with this in a second but
06:46 - this is whenever you want to manipulate
06:48 - an array list add delete alter the order
06:50 - of things while you're looping through
06:52 - it you have to Loop through it manually
06:55 - in truth you might see you might see
06:57 - some examples in processing that also
06:59 - use something called an iterator there's
07:00 - an iterator object in Java and in fact
07:04 - if you read the nature of code book it
07:06 - goes through it but I I've now decided
07:07 - that I think it's best and simplest to
07:10 - just look at two scenarios the enhanced
07:12 - Loop and we just want to hey let's look
07:14 - at all the objects for every particle p
07:16 - and the array list particles boom we're
07:17 - done if we want to manipulate or do
07:19 - something more kind of fancy to the
07:21 - array list during the loop we have to
07:23 - count through the indices ourselves and
07:25 - access each particle this is a case of
07:27 - that when we want to delete particles so
07:29 - let let's actually put this in our code
07:30 - and it's going to work but then I want
07:32 - to talk about what's there's something a
07:33 - little goofy going on here that's that's
07:35 - a bit of a problem that'll be where
07:36 - we'll kind of finish this video so okay
07:38 - let's go add this to our
07:40 - code here we are we can say all
07:44 - right instead of using the enhanced Loop
07:47 - we need to replace this enhanced loop
07:50 - with a loop that counts for in I equal z
07:53 - i is less than particles. size i++
08:01 - particle P equals particles. get
08:06 - I if I run this you can see exactly the
08:09 - same instead of the enhanced Loop
08:11 - looking at each particle individually
08:12 - but now down here I can say hey let's
08:15 - make sure right remember we have this
08:17 - function is dead we have this function
08:19 - is dead that says when lifespan is less
08:21 - than zero give us the value true awesome
08:24 - that's exactly what we
08:26 - need if p is
08:30 - dead then
08:32 - particles. remove I right because if
08:36 - We're looping through the array list
08:38 - we're on particle I if particle I is
08:41 - dead remove particle I and let's run
08:44 - this and we won't see anything different
08:47 - it just works the reason why we don't
08:49 - see anything different is we're removing
08:51 - them kind of surreptitiously in the
08:52 - background when they faded out we don't
08:54 - see them anymore you know as an exercise
08:56 - if if you would like an exercise like
08:57 - right now pause do an exercise go get
08:59 - this example which is
09:02 - 4.2 or something in the nature of code
09:06 - book um and change it to instead of when
09:09 - a particle has faded out when it's off
09:11 - the screen if it's y value is greater
09:13 - than height or it's x value is greater
09:15 - than width or less than zero try
09:16 - removing a particle in that case so but
09:19 - we we're so we're kind of done here
09:22 - except for a rather important detail
09:25 - that in many ways hey it works it
09:28 - doesn't seem to be going too slow it's
09:30 - fine who cares why should we go deeper
09:33 - and worry about things that we might not
09:34 - need to worry about but it's my
09:36 - obligation I have under contract to show
09:39 - you that there is a kind of subtle flaw
09:41 - that in the end might not really matter
09:44 - but in in some of the things that you
09:45 - build could really matter so I'm
09:48 - obligated to point that out to you right
09:49 - now let's go take a look at what it is
09:52 - um okay so let's create a
09:56 - scenario we can get rid of all this
09:58 - stuff that we written up here let's make
10:01 - an array list and I'm going to put hello
10:04 - I'm going to put letters in this array
10:06 - list so here is my diagram of an array
10:10 - list and I'm going to put the letters a
10:12 - b c d and e in it and we can consider
10:16 - those particles particle a particle B
10:17 - particle C particle D and I'm going to
10:19 - say to you that particle C is the one
10:23 - that's dead right now so all of the
10:25 - other ones are alive and particle C is
10:27 - dead so particle C is the one that we
10:28 - want to remove and they each have an
10:30 - index 0 1 2 3 and four can you see those
10:35 - numbers if not you can count from 0 to
10:37 - four I bet 0 1 2 3 and four so we're
10:40 - going to for a moment like we're going
10:42 - to pretend to be the loop we are the
10:44 - loop I we are I I am I well that's weird
10:48 - I I am I I I okay I is equal to zero I
10:52 - don't like that over there I is equal to
10:54 - zero zero is a is a alive yep update
10:59 - this display we're done I is now equal
11:01 - to one is a alive is one alive B yes it
11:05 - is update display I is now equal to two
11:08 - is two alive no it's dead we need to
11:10 - delete it from the array list so we're
11:12 - going to say a.
11:15 - remove two now what happens to that
11:18 - array list when we delete that element
11:20 - let's draw that array list again here is
11:22 - what the array list looks like now once
11:24 - we've deleted that element it's a b d e
11:28 - because we removed c d and e slide over
11:32 - to fit into the spots next to B that's
11:34 - what the array list looks like now let's
11:36 - look at its index values 0 1 2 3 well
11:40 - what are we on now we just checked two
11:42 - now we have to check three is three whoa
11:46 - wait a second here if you're following
11:48 - along we're checking e we never checked
11:51 - D we checked C we removed it D slid over
11:56 - so we we're not checking D we're
11:58 - checking e next so if you what's
12:01 - happening here when because of the way
12:03 - the elements slide over as We're looping
12:06 - forward through the array we could be
12:07 - skipping them by accident now in the end
12:10 - it doesn't really matter maybe we didn't
12:12 - check D and we didn't display it we'll
12:14 - display it next time big deal you might
12:17 - see a little blip on the screen but this
12:19 - could you know in other programs this
12:21 - could be a disastrous you know cat
12:23 - catastrophic consequences so you have to
12:25 - be very careful if you are looping
12:28 - through a list and manipulating that
12:30 - list I mean just think about it what if
12:31 - you were looping through a list and
12:33 - adding things to it while you were
12:34 - looping you could never get to the end
12:36 - of it so you'd have this infinite Loop
12:38 - that would never get to the end and your
12:39 - program could potentially crash there's
12:41 - so many things that can go wrong when
12:42 - you're manipulating a list while you're
12:44 - looping through it so you just have to
12:46 - be careful and be aware of what's
12:48 - happening with those elements how are
12:50 - you adding how are you subtracting where
12:51 - are you in the loop in this case there's
12:53 - a very simple solution The Simple
12:56 - Solution is if we go backwards through
12:58 - the list we won't have this problem
13:00 - right because if we start with E then
13:02 - with d then with C you know we could
13:05 - delete stuff and all these things can
13:06 - Shuffle around b and a are unaffected so
13:09 - going through the list backwards is the
13:11 - solution in this case in other cases it
13:13 - might be something different so how do
13:14 - we go through a list backwards oh it's
13:17 - it's no problem I mean you know how to
13:19 - do this trust me but let's look at it
13:22 - right here's a loop where you start at I
13:25 - equals z okay instead of starting at the
13:27 - beginning let's start at the end what
13:29 - what is the last element of the array
13:31 - list a do size minus one right if there
13:35 - were 10 elements in the array list the
13:37 - last one is index 9 0 through n here we
13:41 - want to go all the way until we get to
13:42 - the end of the array list now we want to
13:44 - go just down till we get to the
13:46 - beginning what's the beginning zero so I
13:49 - is going to Loop until it gets down to
13:51 - zero instead of going up by one we're
13:53 - going to say I minus minus now oops oh
13:56 - and it's not called a excuse me in this
13:58 - example the r list is called particles
14:01 - now if we run this we can see here we go
14:03 - and now this is our example we have done
14:05 - it oops oh didn't knock over the laptop
14:08 - ah I'm dropping
14:10 - things okay uh only thing I could do
14:12 - next is fall um but uh what we've done
14:15 - it right this is exciting we now have
14:17 - our particle our basic simple particle
14:19 - system example and the next step that we
14:22 - need to take with this is say we
14:24 - actually now want to encapsulate the
14:26 - idea of a system into its own class
14:29 - that's going to allow us to have
14:31 - multiple particle systems right particle
14:33 - is an object right now we have an array
14:35 - list of objects but we want to have an
14:39 - an object that is the array list of
14:41 - objects right particle is an object the
14:43 - system is an object and then we could
14:45 - eventually have a system of systems a
14:47 - list of particle systems then we could
14:49 - have a system of system of systems could
14:51 - go on forever but this is our goal and
14:52 - that's what we're going to do in the
14:53 - next video