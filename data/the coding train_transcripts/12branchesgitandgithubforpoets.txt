00:00 - Part II of my git/Github for poet series.
00:03 - In this video I want to talk about a concept called "branching" or "branches".
00:07 - What is a branch?
Why would you use a branch?
00:09 - How's it work?
00:10 - What's all this stuff called branching?
00:12 - So, in my first video we talked about
00:14 - what is a repository and what is a commit.
00:16 - So now, I want to talk about a branch
00:22 - The first thing that I did in my first video is
00:26 - I had this file called "rainbow.txt"
00:30 - So I have this repository ...
00:32 - And really, actually...! I shouldn't refer to the file
00:34 - because this idea of a tree, or a branch,
00:37 - has to do with the entire repository,
not a specific file
00:40 - So I had a repository called "Rainbow-Poem"
00:45 - And I could think of the history of this project
00:50 - as a linear list of times that I hit "save"
00:53 - A commit; a commit; and a commit.
00:57 - So remember there were this moments that I hit commit
01:00 - where a particular change happened
01:02 - and each one of those commits has that unique identifier
01:06 - And you could see how it's just this linear list.
01:10 - But what if I had this idea one day
01:12 - that I had this experimental thing that I wanted to add to my poem
01:15 - and I wasn't really sure if I wanted to keep it?
01:18 - So I'm going to think of this as an experimental try
01:22 - and I want to branch off
01:24 - So I could have a branch...
01:26 - I want to have an experiment where my
01:28 - poem is also going to be about a unicorn
01:31 - So this, by the way, this particular branch
01:34 - we can think of, by default, as "master".
01:37 - So when you create a Github repository,
01:40 - this main linear list of commits, this history,
01:44 - is on the master branch.
01:45 - Almost like a root of your tree, so to speak.
01:48 - By default, it's named "master", although you really can change the names and do whatever you want.
01:52 - So, you might continue to work on that poem
01:56 - and make further commits along master
01:58 - while making some commits along another branch.
02:01 - And you know what, there could be a branch also called "unicorns"
02:05 - and...
02:07 - What's something else that goes with rainbows and unicorns?
02:11 - Fairies? I don't know.
02:13 - I dont know where I'm going with this.
02:16 - But that could have its own branches
02:18 - and that could branch...
02:18 - So you can have this crazy set of experimental... all sorts of...
02:22 - You could have lots of people creating different branches
02:24 - and working on different aspects of the same document.
02:27 - But I'm going to keep things simple for right now
02:29 - and just show you I have a master branch
02:32 - and I want to branch off to try an experiment called "unicorns".
02:35 - But let's see what happens when I do that
02:37 - and how we can start to do things like merge to bring changes back and forth between the branches
02:41 - Okay.
02:42 - So let me come over here and I'm back again in my github repository called "Rainbow-Poem", if you recall.
02:48 - There's just one text file, called "rainbow", and there's my poem.
02:52 - Pretty pathetic, but it's the best I can do right now.
02:54 - So. What I want to do is right here --
02:57 - -- you can see that I'm currently looking at the state of my poem, on the master branch.
03:03 - So what I want to do is find -- now you can see here that I don't have any other branches
03:08 - so what I want to do is I want to type
03:10 - in "unicorn", and you can see by default
03:12 - it's giving me an option to create the branch unicorn.
03:15 - If the branch unicorn already existed,
03:17 - it would be giving me the option to switch into that branch.
03:19 - So I'm going to create that branch,
03:21 - and you could see now, look at this,
03:23 - I'm on branch unicorn.
03:25 - So what I'm going to do now is hit "edit"
03:28 - And I'm going to call it "The Rainbow and the Unicorn".
03:35 - Purple, pink, orange, blue, green...
03:37 - Unicorn.
03:38 - Yellow, red, these are the colors of the rainbow...
03:42 - And the unicorn.
03:45 - My poetry skills leave a lot to be desired.
03:47 - So now I'm going to hit "commit".
03:49 - Now notice -- look at this --
03:51 - commit directly to the unicorn branch.
03:53 - I'm on the unicorn branch right now.
03:55 - By the way, this other option might make sense for you now
03:58 - Create a new branch for this commit.
04:00 - So any time you're making a "save",
04:02 - github actually gives you the option of, just, making it as a new branch
04:06 - which can be something that you want to do
04:07 - um, but I'll get to that -- why you might want to do that --
04:11 - I'll get to that later.
04:12 - But right now, I want to commit to the unicorn branch.
04:14 - So I'm going to hit "commit changes"
04:16 - And now you could see, I'm on the unicorn branch
04:19 - and, I've got the version of the poem.
04:22 - Now, if I were to switch back to master,
04:24 - you could see that the version of the poem
04:26 - does not have the unicorn involved.
04:28 - And now if I go back and switch to unicorn...
04:32 - it now does.
04:33 - Now this is kind of similar -- it's a little bit trickier --
04:35 - it's kind of similar to just the history of commits, right,
04:38 - and it is really the same thing, right,
04:40 - just like switching back and forth between commits
04:43 - oh I'm seeing the previous state or the next state,
04:45 - but branching is really making a more substantive,
04:49 - a substantial commitment to the idea of
04:51 - a separate path.
04:53 - We have the history kind of just in case
04:56 - but now if I really know I want to have two possibilities
04:58 - going on at the same time
05:00 - I really want to have a separate branch.
05:02 - So, the question becomes now...
05:05 - Let's now diagram what we've actually done.
05:09 - We had commit, commit, commit, commit...
05:12 - And now branch...
05:16 - So, master...
05:18 - And unicorn...
05:19 - What happens if I decide this experiment was a good idea,
05:23 - and I want to bring it back into master?
05:27 - Let's take a look back at what I mean by that.
05:30 - So over here, one thing we can actually see, by the way,
05:33 - is that I can go to, back to the main page of the repository,
05:37 - I'm looking for, ah, up here,
05:39 - I'm looking for a button that says "graphs".
05:42 - One of the graph options is to visualize your tree and branches.
05:46 - So if I go and click on "graphs",
05:48 - the one I want to look at is "network".
05:50 - So I want to click on "network" right now
05:53 - and we can see here...
05:54 - Look at this...
05:56 - You can see here, these are the changes I made
05:59 - and then I branched off, and I have this unicorn
06:02 - so master has not gone forward since unicorn.
06:06 - By the way, notice this one, "patch-1", green,
06:09 - somebody else watching this video has decided
06:13 - a username on github named "b8horpet"
06:15 - has decided to make their own branch.
06:17 - And potentially, they could contribute the changes back to my particular branch.
06:22 - But we're going to get to that in a future video
06:24 - but you can see this full diagram.
06:25 - So, let's say, what I want to do
06:28 - is have unicorn go back into master.
06:31 - This now brings up a new term --
06:35 - I'm adding to our list, something called a "pull request"...
06:39 - and a "merge".
06:41 - Oh boy.
06:43 - Suddenly we added so much, just in this one video.
06:46 - So... "pushing" and "pulling" are important terms in github;
06:51 - "pushing" kind of being like sending something to somebody,
06:54 - "pulling" being, pulling something in from somebody.
06:56 - In some ways they are almost interchangeable.
06:59 - Actually I'm going to save that for a later topic a bit more,
07:02 - but what I want to do is, essentially...
07:06 - My unicorn branch says,
07:07 - "hey, will you please --", the request is the key term here,
07:10 - "-- will you please take my changes, and pull them into master?"
07:15 - So what I want to do, I'm the same person,
07:18 - so I'm really just making the request to myself, later you will see how we could be two different people, but
07:22 - what I'm doing here, right now, if I go back to the main page... Look at this,
07:26 - actually github is saying, look at this,
07:27 - -- oh I'm in the wrong place --
07:29 - github is saying, look at this unicorn branch.
07:33 - I can press this button "compare and pull request"
07:37 - meaning I want what I just did in unicorn
07:39 - to go back into the main branch.
07:41 - So I'm going to click that button,
07:43 - and I'm going to say,
07:45 - "Hey! I added some unicorns."
07:48 - So now I'm making a pull request,
07:50 - meaning a request to merge those changes I made
07:53 - in the unicorn branch, back to the master branch.
07:56 - And I'm going to say, "hey, I made some unicorns."
08:01 - I could write information about it.
08:03 - I'm going to do "create pull request"...
08:06 - and there it is.
08:07 - Now, what did it do,
08:09 - it actually created a, a thing called a pull request,
08:13 - and what is a pull request?
08:15 - A pull request, again, is saying,
08:17 - take some changes from a particular branch,
08:20 - and bring them into another branch.
08:23 - And, one thing that it's doing
08:24 - github -- git automatically behind the scenes -- and github for you --
08:28 - is looking at it saying, "oh there's no conflicts
08:31 - I can see what was changed here, I can see what was changed here,
08:33 - and I can bring those changes together,
08:36 - no problem. And git is actually quite smart about this.
08:38 - You really only ever run into an issue
08:41 - if you're editing the same exact line in the file.
08:44 - But two different branches could edit different lines
08:46 - and merge those together very easily.
08:48 - So, all I have to do now is complete this
08:51 - by clicking the "merge pull request" button...
08:54 - and I can say confirm that merge
08:57 - and then, suddenly,
08:59 - if I go back to "graphs",
09:01 - under "network"
09:03 - you can see, oh, you can see that happened now after I hit refresh.
09:07 - You can see that "unicorn" was merged back into "master".
09:11 - So your unicorn branch is now somewhat irrelevant
09:14 - in that its changes were merged back in.
09:16 - Let's try to do something a little bit kooky
09:19 - and let's make some changes in both master and in another branch
09:23 - and see if those could be merged.
09:24 - And that's really kind of going to wrap up the end of this video tutorial.
09:28 - Okay, so I'm going to go back to my poem...
09:31 - And I'm in master right now...
09:33 - and, oh, I'm going to make a branch
09:35 - I'm going to call it... um... I'm going to call it...
09:42 - ah, I can't think of anything all of a sudden.
09:45 - Um, I'm going to call it, um, "ponies"...
09:48 - it's kind of like unicorns...
09:50 - Oops. Branch ponies -- I don't if that's how you spell ponies --
09:55 - and I'm going to say, "and the unicorn and the pony",
10:00 - and I'm going to say, "pony",
10:03 - and then I'm going to commit that,
10:05 - and "adding ponies".
10:07 - I'm going to commit that.
10:08 - And now what I'm going to do is I'm going back to master
10:11 - and I'm going to edit it
10:12 - And I'm just going to add another color.
10:14 - Yellow, purple, green, pink...
10:16 - orange, blue...
10:17 - indigo...
10:18 - I'm going to add that,
10:20 - "adding indigo".
10:21 - I did it in a completely different part of the poem.
10:24 - Now I'm going to go to the graphs
10:26 - and I'm going to look at the network.
10:29 - And you can see here...
10:31 - Look, unicorn had some changes,
10:34 - went back in,
10:35 - ponies had some changes, but then master went ahead.
10:38 - Can I merge those two, they're in completely different states.
10:41 - Let's give it a try.
10:43 - So I go back to here,
10:44 - I'm going to "compare and pull request"...
10:45 - No problem, able to merge.
10:48 - Create pull request...
10:52 - Merge pull request...
10:54 - Confirm merge...
10:55 - I'm just doing this quickly,
10:56 - and let's go back,
10:57 - and look at that network again...
10:59 - And we can see, here's what it looks like now.
11:01 - So you can see how git and github is very powerful
11:05 - for working on multiple instances;
11:07 - these branches can actually be different people doing different things,
11:11 - trying out different experiments...
11:13 - This is an exciting set of possibilities that
11:16 - as I continue to show you more and more,
11:18 - hopefully will set the foundation for doing interesting things
11:20 - and collaborating with other people on github.
11:23 - So. If you're looking for something to try now
11:25 - you have your poem, try making lots of different branches,
11:28 - trying editing, making commits in one branch,
11:30 - making commits in another branch,
11:31 - making commits in master,
11:32 - see if you can do some pull requests,
11:33 - see if you can do some merging,
11:35 - see what happens, see where you go wrong,
11:37 - ask your questions in the comments.
11:39 - And, uh, in the next video
11:41 - -- I forgot what I'm going to do,
11:43 - but I have a plan --
11:44 - I think I'm probably going to start
11:45 - looking at how you could actually start to be
11:48 - a different person, and two people can collaborate
11:50 - on the same repository.
11:51 - Maybe. Or something else.
11:52 - You'll see.