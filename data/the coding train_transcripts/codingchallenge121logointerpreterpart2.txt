00:00 - - Hello, welcome to Coding
Challenge: Logo Interpreter,
00:03 - part 2, I'm a little bit scared of this.
00:06 - (clears throat) All
right, so what's going on?
00:09 - Where are we, why am I here?
00:11 - You might remember me from Logo
Interpreter Coding Challenge
00:13 - number 121, look that's me,
00:15 - I'm almost wearing the same clothes.
00:17 - This is a challenge where I looked at
00:19 - the Logo programming
language, a language from
00:22 - designed in 1967, turtle graphics,
00:24 - you might be familiar with,
00:26 - I talked a bit more
about it in that video.
00:28 - I encourage you to read about the history
00:30 - and also to check out the Logo Foundation
00:32 - which is the foundation
that supports a variety
00:34 - of wonderful initiatives,
including Scratch Day.
00:38 - So check that out but what I did
00:41 - was I made this Logo
interpreter that is able
00:44 - to interpret simple
commands like forward 60,
00:48 - left 90, forward 100.
00:51 - So while this implementation of Logo
00:53 - interpreting these Logo commands
00:55 - like forward, left,
forward, et cetera works,
00:57 - it's missing crucial components.
00:59 - And so there are many commands in Logo
01:02 - and I implemented pen up,
pen down, some of these,
01:05 - but one of the most important ones
01:07 - that I did not implement is repeat.
01:10 - So this is a tutorial from
a Brown University page
01:14 - about the history of Logo
that I'll also link to
01:15 - in this video's description,
01:17 - but what I want to attempt to do is
01:20 - add the repeat functionality
which you would think
01:23 - would be a really simple thing,
01:25 - but it's a little bit
more complicated than,
01:27 - well, there are some simple
ways probably to do it,
01:31 - and I will point out, in
fact, that when I posted
01:33 - this code, 16 pull requests
came in with suggestions
01:37 - and techniques for how
to implement repeat,
01:40 - and I would encourage you
to go check all these out.
01:42 - I want to highlight one of them
that was pretty interesting
01:45 - to me, I'm going to look for
it, Regex implementation,
01:48 - is this the one I'm looking for?
01:51 - Yeah, this one, oh yeah, I love this,
01:53 - which is just basically
using a regular expression
01:57 - to search for the repeat command
01:59 - and then just replace the repeat command
02:02 - in the string itself with what's the thing
02:05 - to repeat multiple times.
02:06 - So kind of like unrolling
the string recursively
02:09 - with a regular expression.
02:11 - Pretty wild implementation.
02:13 - I'm not going to use that one,
02:14 - I'm going to try to spin up my own.
02:16 - So this is my idea.
02:18 - So, one thing that I think will help
02:19 - is object oriented programming.
02:21 - What if I have this
idea of a command class?
02:27 - So I make this idea of a command class
02:29 - and it has the name of the command.
02:33 - That could be forward,
02:35 - left,
02:36 - picks the pen up, et cetera.
02:38 - It has an argument
02:41 - so if the command is forward,
02:44 - maybe I would have an argument like 100.
02:48 - And by the way, the
command could be repeat
02:51 - and I know I'm about to
leave your view here.
02:54 - Repeat and then the argument
could be a number also
02:57 - 'cause you're going to repeat something
02:59 - a certain number of times.
03:01 - So you have this idea of a command class.
03:02 - And then maybe what I
think would be useful
03:05 - is to create a parser object.
03:07 - And actually, instead of using split,
03:10 - so I used split as a way of
looking at the Logo instructions
03:13 - and just splitting it into a big array,
03:15 - but I think what I want to try to do
03:16 - in the most absurd thing ever
is just actually step through
03:20 - the string one character
at a time so that I have
03:24 - the idea of a parser is
keeping track of a index.
03:29 - So the parser is always
has basically a pointer
03:33 - into the command and can step through
03:35 - and if it finds repeat, it
can then pull out a chunk,
03:38 - it can do all sorts of stuff.
03:40 - So, if what I'm kind
of thinking about here
03:43 - is this idea of a command.
03:45 - A command could just be
a thing that you execute
03:47 - with an argument but if
the command is repeat,
03:51 - then it could also have a list of,
03:54 - it could have an array
of its own commands,
03:56 - that those are the things you repeat.
03:58 - And then inside of this array,
there could be a command
04:00 - that is a repeat command so
it could nested and recursive.
04:03 - So this is my idea, I have not actually,
04:06 - I thought about this quite a bit
04:08 - and probably helped by looking
at everybody's pull requests
04:11 - so I don't know to what extent
this is an original idea
04:13 - or it just came from suggestions,
04:15 - but it through osmosis,
my brain has come up
04:18 - with this idea but I have
not tried to implement it
04:20 - so what you are about to
watch is me actually trying
04:23 - to implement this for the first time,
04:25 - and it might be a terrible
idea and things will go wrong
04:28 - and you'll probably notice
this video is 342 hours long,
04:32 - but if you want to stick
with me, here we go.
04:35 - Okay, so let me go to the code.
04:37 - I'm going to keep the
code that I had before,
04:39 - I'm going to add a new
JavaScript file called parser.
04:43 - Maybe it should be interpreter,
04:45 - I don't know why I'm
going to call it parser.
04:46 - Parser.js, I'm going
to write a parser class
04:50 - and the idea is that when
you create the parser,
04:54 - you give it some text.
04:57 - So this is the full
text that needs to parse
05:01 - and then also it has an index
which starts at 0, okay.
05:05 - And, one of the functions
that I would have here
05:09 - is nextToken so it could
maybe look and sort of find
05:14 - the next token or something
05:16 - in this text by stepping
through it with the index, okay.
05:21 - That's what I'm thinking about.
05:23 - Now, I am also going to then
create another JavaScript class
05:28 - called command, and this would be,
05:32 - this is what I'm talking about,
05:34 - it would have a name and an argument.
05:40 - And then it could also have
potentially subcommands.
05:45 - Recursively, a command
could also include a list
05:48 - of other commands.
05:50 - So this is my idea, now,
let's go to sketch.js
05:54 - and basically,
05:56 - this go turtle function,
I'm actually going to just
05:59 - basically take out what I did before
06:01 - 'cause I don't think this, I'm
not going to use split anymore
06:05 - and I'm not going to
have my own index here.
06:10 - I'm going to say let parser
= new parser with that code.
06:16 - So let's just for example say console.log
06:23 - and parser.nextToken.
06:26 - So let me at least see if
I can get parser.nextToken
06:29 - to work, and so...
06:33 - And this should probably return the token
06:35 - so return "test".
06:37 - So if I just run this now,
06:40 - parser's not defined,
right, I always forget this.
06:44 - I've added a bunch of
new JavaScript classes
06:46 - so I want to make them separate,
reference those files here.
06:51 - Probably should get into
bundling and building
06:53 - and all that sort of stuff at some point.
06:55 - Parser and command.
06:57 - Let me go back to sketch,
refresh, okay, so, great,
07:01 - I see test there.
07:02 - I have got my command but I
didn't really get the token.
07:06 - What I need to do is here, I
really need to say all right,
07:10 - so I'm going to step through the
text one character at a time.
07:16 - So what I mean by that is I'm
going to say let char = this.text
07:21 - charAt
07:24 - this.index, okay.
07:28 - So, while the character is not a,
07:33 - I guess I could use a
regular expression here.
07:37 - So, I want to...
07:40 - Let me just say, let me just
do it this way for a second.
07:42 - While the character is not a space.
07:46 - What I want to do is I'm going
to start with an empty token,
07:51 - and I am going to say,
07:55 - oh I don't need a...
07:57 - While the character is not a
space, token += the character,
08:02 - character = this.text.charAt,
08:09 - charAt ++this.index.
08:12 - So what's going on here?
08:14 - The idea here and, again, I
could use regular expression
08:17 - and substring but I'm trying
to do this in a very manual way
08:19 - to understand it.
08:21 - What I'm doing is I'm saying let me look
08:23 - at the first character and
as long as that character
08:25 - is not a space, I'm going
to add that character
08:27 - to my token and then look
at the next character.
08:30 - And this is basically,
remember, this is something
08:32 - I covered in the first
part of the challenge.
08:34 - This.index ++ this.index is
increasing the index by 1
08:38 - and giving back that new value.
08:40 - So now if I say return token,
08:45 - let's see what happens.
08:48 - Refresh.
08:49 - This text chatAt, charAt,
a little typo there.
08:54 - There we go, look.
08:56 - (bell dings)
08:58 - I got the first token, that's great.
09:00 - Now, what if I now want to say
09:03 - here
09:05 - next token?
09:09 - Ooh, it got a space, so look at this,
09:12 - a space is not a valid token
so what I can actually do here,
09:16 - back into parser, is
I can actually say if,
09:23 - if char = a space,
09:27 - return next,
09:30 - increase the index, go to the next one
09:33 - and return this.nextToken.
09:36 - So this is a way of basically
skipping and, again,
09:39 - this is definitely a clear example
09:41 - of I'll refactor this later,
09:42 - I need a little theme
music there for that,
09:46 - but,
09:49 - this is a start, okay,
09:50 - so this is basically saying ignore
09:53 - the space and so now,
09:56 - we can say I've got forward 60,
09:57 - but here's what I want to do really.
10:00 - Here, I want to say...
10:02 - And let me actually, let me
use a regular expression here.
10:05 - So I'm going to say,
10:06 - there's a category of
command which is like
10:08 - a movement command, forward,
backward, right, left,
10:11 - so I'm going to say that
would be a regular expression
10:16 - that is forward or backward,
this is fb followed by d
10:21 - or left or right followed by a t
10:26 - and probably, I should
probably also make sure
10:28 - it's the full string,
10:29 - so put this beginning and end.
10:31 - So now I could say
10:36 - let token = parser.nextToken
10:41 - if movement
10:44 - test(token)
10:46 - so if it's a movement command,
10:48 - then create a new command
10:53 - with token and token and parser.nextToken.
10:59 - Right, 'cause I think
I said the command is,
11:03 - I said the name of the
command and the argument
11:05 - and the argument always comes next.
11:06 - So, again, I'm not doing
a lot of error checking
11:09 - for people making mistakes
in their Logo code
11:12 - but we'll get to that later, I suppose.
11:14 - Okay, I'm setting myself
up for hopefully being able
11:16 - to do a repeat.
11:18 - Where am I here?
11:19 - So let's just see and actually let's make
11:22 - an array of commands, I
mean I might want to put
11:24 - all the commands into
an array or I might want
11:27 - to process them one at a
time, there's various ways
11:29 - of doing this but let's actually put it
11:31 - into an array right now, I
think that'll be helpful.
11:36 - Oops, okay, so let's see and
now let's look at commands.
11:45 - Okay, refresh, look at
that, I've got a command
11:49 - with arguments, the name is
forward, the argument is 60
11:53 - and it doesn't have any subcommands
11:55 - because it's not a repeat.
11:57 - Woo, I like this so far.
11:58 - So now, hmm, this is where
I'm going to get into trouble.
12:04 - Let's do something like while parser
12:11 - is not empty, while parser
has remainingTokens,
12:15 - I don't know, come up with
a better name for that.
12:17 - While parser has
remainingTokens, keep doing this.
12:22 - So what does it mean here in the parser
12:26 - to say remeainingTokens,
well, on the one hand,
12:31 - I can just return this.index
is less than this.text.length
12:36 - because if the index has moved
past the end of the text,
12:40 - then there's nothing left.
12:42 - Hmm.
12:44 - I'm wondering if this is going,
12:46 - I bet you I'm going to
get an infinite loop here
12:50 - but let's just give it a try anyway.
12:54 - Yes.
12:55 - So I have an infinite loop, I could tell
12:58 - because everything went
blank, this is just there,
13:00 - so I'm going to actually,
unfortunately, have to
13:04 - kill this page, whoops, ah.
13:08 - Next token, there are
situations where if it hits
13:11 - the bracket, bracket is not
a space, bracket is not a...
13:16 - So, ah, I guess what I could do here
13:22 - is if char, I mean this is really terrible
13:28 - or
13:30 - if it's one of these brackets,
13:35 - then,
13:38 - return, then also go up by an index
13:42 - and return that character.
13:44 - So this definitely
accounts for another thing.
13:46 - So, again, this could be
condensed and I could maybe use
13:49 - some more clever ways of doing this
13:51 - but if it's a space, ignore.
13:57 - If it's a bracket, whoops, if it's...
14:02 - And actually, I'm going to
want to do something for it's
14:04 - a repeat, but anyway, if it's
a bracket, send that back.
14:09 - And,
14:12 - otherwise, accumulate
14:15 - until a space or bracket,
14:19 - but, okay, there's so
many problems with this
14:21 - but I have to build it one step at a time.
14:23 - If you're willing to stick with me
14:25 - and keep watching this video,
then more power to you, okay.
14:28 - Let's see if I manage to
not have an infinite loop.
14:30 - Still infinite loop.
14:32 - While character's not
a space, keep going up
14:37 - and this could get stuck.
14:40 - Or, while character space and this.index
14:44 - is less than this.text.length.
14:46 - So I've also got to check
to make sure I'm not hitting
14:48 - the end, oh there we go, okay (laughing).
14:51 - All right, so that was
definitely the problem.
14:53 - Now at least my infinite loop is gone.
14:55 - Let's look at these commands.
14:57 - So forward 60, right 120, so this is good.
14:59 - This is what I wanted it to be.
15:04 - But I need to be able to
account for the repeat.
15:10 - So this is good, this is
giving me a list of commands
15:13 - but what if
15:15 - the token
15:18 - that I get back, now I
need to deal with repeat.
15:23 - So, if it is a movement,
15:26 - I should also have something
15:29 - for a pen command which
would really just be matching
15:32 - a p at the beginning, right,
any of the pen commands
15:36 - match just a p so I should say else if
15:40 - pen
15:43 - test token,
15:44 - so a pen command
15:49 - is just a command with just
the token, no argument.
15:55 - And now I could, in theory,
16:00 - if I added a pen up command, we would see
16:05 - pen up is in there with no
argument but that's fine,
16:08 - so that's good, so this
would work, oh why isn't it,
16:11 - oh it's not drawing anything
'cause I'm not bothering
16:13 - to draw, sorry, I keep opening
up terminal by accident.
16:16 - Okay, so I have now written
a parser that can go
16:20 - from token to token and can
create commands and knows how
16:23 - to handle any movement
command or any pen command.
16:27 - Oh and this.remaining tokens.
16:29 - Ah, yes, great suggestion from the chat.
16:31 - Abdillah Baghat suggests that
here, I like this suggestion,
16:38 - that this is already a test
which is this.remaining,
16:44 - remaining tokens, 'cause I
have that function, right,
16:47 - that already tests that here.
16:51 - Great, okay, still working, all right.
16:54 - Now it's time to deal with the repeat.
16:57 - So I need to handle the
repeat in a very unique way
17:00 - and this is where I'm
really going to get lost.
17:03 - So repeat is just matching
the repeat command.
17:10 - So this could be a
regular expression here.
17:13 - So else if repeat
17:16 - test token.
17:19 - So now, what if I get a repeat command?
17:22 - Then what I need to do is say,
17:27 - so let command is a new
command with the token.
17:33 - Oh, and also the next token.
17:36 - So I first get the number,
17:39 - then what I need to do is
I need to pull out, hmm,
17:44 - I need to pull out everything
within the brackets
17:48 - so then what I want to say is
the to repeat is the parser,
17:57 - get repeat.
17:58 - So I want to write a new
function that then in the parser
18:01 - looks for that starting bracket,
looks for the end bracket
18:05 - and just gives everything
back (claps), okay.
18:10 - So, in the parser now, I'm
going to say getRepeat.
18:16 - So I should first, basically
find that first bracket.
18:22 - So I want to, in theory,
there could be spaces,
18:31 - so char = this.text, this is really hard,
18:36 - the way that I've gotten to
this text.charAt this.index.
18:42 - I should probably put that in a function
18:45 - and then if while char,
18:50 - I guess I could say, you
know what, I could do this.
18:54 - While this is
18:57 - not equal to
18:59 - this opening bracket,
19:05 - while it's not equal to
this opening bracket,
19:07 - oh ++, right, I want to
go ahead to the next one
19:10 - but stick where I am,
then just keep going,
19:14 - and, and I guess need to make sure,
19:18 - and
19:21 - this.remainingTokens.
19:24 - Now, I have found...
19:30 - Basically I have found...
19:35 - I'm going to say index,
I'm just going to say
19:40 - this.index.
19:41 - This should console.log
where the index is.
19:45 - So I need to put a repeat in here.
19:47 - So let's start with
something really simple
19:50 - like repeat three this.
19:57 - And let's refresh, all right.
20:00 - It got forward, it got right
20:04 - and it got, ooh weird,
20:06 - and it said 10.
20:08 - Is that
20:11 - 0 1 2 3 4 5 6
20:14 - 7 8 9,
20:16 - oh great,
20:17 - so now it's at index 10, oh, perfect.
20:19 - So now, ah, I love this.
20:22 - Okay, so.
20:25 - Commands push.
20:32 - So this is actually a function,
20:34 - I got to make a subparser
of the sub thing.
20:37 - Ooh.
20:40 - Ah, yikes, I mean the recursion
aspect of this, right,
20:44 - because a repeat could
have a repeat inside of it.
20:46 - If a repeat couldn't have
a repeat inside of it,
20:48 - I'd kind of be done, maybe
I should do that first.
20:50 - This is going to be a really long video.
20:54 - I know I keep saying that but it just is.
20:57 - So now what I want is to
21:01 - find the last one.
21:03 - So...
21:06 - Let's start = this.index.
21:12 - Let end, now I need to
do this again, move along
21:17 - here,
21:18 - and let end = this.index
and then return this.text
21:24 - substring start, end.
21:28 - Let's see if this does
what I think it should do.
21:36 - And then,
21:39 - let's see if it does what
I think it should do.
21:43 - Okay.
21:44 - Command,
21:46 - token,
21:47 - whew, parser, nextToken,
21:49 - let's just console.log this.
21:51 - Console.log to repeat, okay.
21:56 - Yes, oh okay, look at that,
this is the thing to repeat
21:59 - and the command is the repeat,
perfect, ah, yes, okay,
22:03 - but minus one, minus one, minus one.
22:07 - So here, in parser, end
minus one 'cause the index
22:13 - is actually the index
past that final bracket.
22:18 - So now,
22:21 - there we go.
22:21 - The command is repeat, it's named repeat
22:25 - and now I just need to fill
the commands with an array
22:27 - of the stuff that's
inside of that to repeat.
22:30 - So this, ah,
22:33 - okay, I have an idea now.
22:35 - This function...
22:42 - Parse,
22:45 - let commands.
22:49 - I'm trying to think here, parse.
22:53 - I need to write a recursive function now
22:56 - where I come back and do this,
then for those subcommands,
23:00 - okay so let commands equal,
this is going to be weird,
23:04 - let me just try to do parse,
23:10 - parser.parse,
23:14 - is this what I want to let
commands = parser.parse,
23:16 - should all this be in the parser?
23:20 - And then,
23:22 - this would,
23:24 - I don't know about putting
this in the parser.
23:29 - If this is in the parser,
23:35 - parse, oh this is hard.
23:39 - Okay.
23:42 - While this
23:44 - remaining tokens, next,
so this I'm not so sure
23:49 - about putting this in
here but I'm going to.
23:52 - So everywhere I said
parser, I'm now saying this.
23:56 - And then, I am saying let
commands is be an array
24:02 - and then basically, at the
end here, I'm going to say
24:06 - return commands, just give me a second,
24:10 - I'm not going to do the recursion yet.
24:13 - So let's see, let's see what happens here.
24:17 - And then in Sketch, let
commands = parser.parse,
24:22 - console.log
24:25 - commands.
24:29 - This is crazy.
24:31 - All right, sketch.
24:34 - All right, that's good,
that's good, hold on, hold on,
24:37 - hold on, I'm thinking, I'm thinking,
24:39 - oh there's a console.log here.
24:41 - Where is there extra console.log?
24:43 - Uh, it's 25 and 31.
24:45 - Oh I have it twice, okay.
24:47 - Okay, so now,
24:50 - okay, okay, now, now,
this is the hard part.
24:54 - All right, so I have this to repeat
24:58 - and then what I want to
say is command.commands
25:04 - equals (gasps)
25:10 - parse,
25:12 - this.parse to, this is what I want to do,
25:16 - to repeat.
25:18 - Okay.
25:19 - So this isn't exactly going to work,
25:22 - this is the idea of what I want to do.
25:26 - But it's not right yet.
25:29 - So close, it's not right because
the parse command inside,
25:37 - it's working with this particular,
25:41 - the sort of global block of text.
25:44 - Maybe it makes more
sense for that not to be,
25:49 - oh wait, no, no, no, I think
I have an idea (gasps).
25:55 - All I have to do is
make a new parser here.
26:01 - With the to repeat stuff and then
26:06 - that equals
26:09 - parser.parse, right?
26:12 - Because then it would have,
I think this might work.
26:17 - Could this really work?
26:18 - Let's think about this.
26:21 - I'm basically saying hey, make
a parser with all this code,
26:25 - parse it and give me the commands.
26:28 - The parser is going to do
that and return that array
26:33 - of commands but internally,
oh, wait, wait, wait, wait,
26:37 - yeah, it's going to make.
26:39 - I think this, I mean, it's
so hard to speak this.
26:44 - Let's run it, let's run it.
26:48 - This is going to produce a lot
of errors or an infinite loop,
26:51 - for sure.
(drum roll)
26:57 - (buzzer buzzing)
26:59 - Cannot read property length
of undefined parser.js line 7.
27:05 - (vocalizing)
27:07 - This.text, oh whoops, I took that out
27:10 - when I was messing around with this idea.
27:12 - Okay, not playing the drums
but okay, command, repeat,
27:17 - ah!
27:20 - Ohhh.
27:22 - (clapping)
27:23 - I think that worked, okay,
so I think this is a case
27:26 - where I was figuring it
out, trying to explain it,
27:29 - all at the same time but I don't know
27:31 - that I did that super successfully
27:33 - so let me take a minute
27:36 - to try to unpack what just happened.
27:41 - Okay, and the idea here is that
I have something like this,
27:47 - repeat three,
27:50 - forward 60, can you see that?
27:53 - Yes, so the parser finds the first token
27:56 - and makes a command
27:59 - repeat
28:01 - with three.
28:04 - Then the parser, because
it found a repeat,
28:08 - asks for this as basically a substring
28:12 - and it makes a new parser
object with only this.
28:16 - So the first parser object
started with everything,
28:18 - the new parser object just works on this
28:21 - and makes a command.
28:24 - So I really should put this in a json way.
28:29 - So the idea here, and
let's add some other stuff.
28:31 - The way that it should work,
28:33 - imagine if this had forward 60 here.
28:36 - So the idea is that I would have an array
28:39 - with commands and the first
command would have name forward,
28:46 - argument 60, then the next
command would have name,
28:53 - right,
28:54 - repeat,
28:57 - argument three but it knows it's a repeat,
29:00 - it then goes and makes a parser for this
29:04 - and the same way that this is a big array,
29:07 - the parser now works on this
to put it in an array here
29:12 - with objects like forward 60, et cetera.
29:15 - So in theory, this could even
have another repeat inside
29:19 - and that repeat would be in this array
29:22 - with its own subcommands.
29:23 - Hopefully that helps a little bit more.
29:26 - But let's actually test this theory.
29:31 - So let me go now to, let
me, I'm afraid to type stuff
29:37 - in here and break so I think
what I'm going to do is just,
29:39 - so let's start with
29:42 - forward 60, repeat, let's
just start with that first.
29:47 - So we can see we got a forward
29:50 - 60, no commands and a second
command that says repeat three
29:56 - with two other commands.
29:59 - Okay.
30:00 - Now what if I then put in here,
30:06 - let me do it out here 'cause,
30:09 - what if I do another repeat
forward, oh so repeat four,
30:16 - forward 10.
30:20 - Let's look at this.
30:22 - Okay, so.
30:23 - There's still forward
60, then there's a repeat
30:26 - and the repeat argument is
three, there are three commands,
30:29 - one of which is a repeat
which has a subcommands in it.
30:32 - (bell dings)
(train whistle)
30:35 - All right, I think this
works, I mean I'm sure
30:36 - this needs error handling
but the basic idea
30:39 - is actually working, wow
this is very exciting to me.
30:43 - All right, so what I need to do now
30:45 - is to follow the instructions.
30:46 - This should be, in theory,
this should be the easy part.
30:49 - So now that I have this
commands, I can just say
30:52 - for let command of commands
30:55 - and now I forgot how I did
this in the first place
30:59 - 'cause I have this, oh boy, this is bad,
31:02 - I have a,
31:03 - I have this dictionary thing that I made
31:06 - to execute these different functions, hmm,
31:09 - so what do I want to do,
this is called commands,
31:12 - so I'm going to call
this command dictionary.
31:17 - Well I'll just call this
commands, command list.
31:21 - Command list, it's not a list.
31:25 - Command lookup.
31:27 - Command look up, boy that's
a awkward variable name.
31:32 - So what I want to do is
now I want to say the name
31:36 - is command.name and the
argument is command.argument
31:42 - and then I'm going to say,
31:45 - I have to figure out if it's a repeat.
31:47 - If name = repeat,
31:55 - then for let i = 0, i is less than arg,
32:00 - i++, right, 'cause I
want to do whatever is,
32:04 - and then I'm going to
go through its commands.
32:08 - I guess I could say, oh boy, oh, ah,
32:12 - I need another recursive
function to traverse it.
32:16 - Aah.
32:18 - Let me go back to something simpler.
32:23 - Without anything nested.
32:27 - Forward 60, repeat three
times, okay so this idea
32:32 - works.
32:35 - But...
32:37 - This needs to be a function,
I need more recursion
32:40 - or maybe I should be just
doing this as I'm going.
32:42 - So I'm going to call this execute
32:45 - and executes a list of commands.
32:48 - So if you execute a list of commands
32:51 - and then you get the
repeat, you need to execute,
32:59 - command.commands.
33:05 - Right, so in other words,
I'm looking at the commands.
33:12 - If it is a repeat, then I want
to execute the sub commands
33:16 - that are in these sub commands list
33:18 - a certain number of times.
33:22 - Otherwise, I can now
say basically what I did
33:26 - in the very first
version of this challenge
33:28 - which is to do what?
33:31 - Command list name
33:34 - arg.
33:35 - So the idea is I'm looking
up the command list,
33:38 - in the command list, by
the name with an argument.
33:42 - So that will then go here
and say if it's forward,
33:45 - it will execute this function,
33:47 - moving the turtle forward by an amount.
33:49 - I think there's a lot of
redundant extra code now
33:51 - but this is fine.
33:54 - Let's see
33:55 - what happens.
33:57 - Syntax error.
33:59 - Oh this has to say function.
34:03 - I'm not in an object anymore.
34:06 - All right, mm, so, hmm,
34:10 - what is that 100 100, so what's, oh,
34:14 - oh I didn't execute anything.
34:17 - Execute commands.
34:21 - Command list is not defined.
34:25 - Command lookup, okay, I can't
remember what I call anything,
34:29 - command lookup.
34:32 - Hey!
34:33 - (clapping)
(bell dings)
34:35 - This is working.
34:37 - Wow, okay.
34:39 - Dare I say this is complete?
34:42 - Does anybody have access to the code
34:46 - that produces this design?
34:49 - I'm going to take a
break and try to find it.
34:51 - (train whistle)
Okay, I'm back.
34:53 - What you don't realize
is about an hour passed
34:56 - of me doing some horrific debugging
34:58 - and if you want to find that, I will link
34:59 - to the livestream version
of this edited challenge
35:02 - in the
35:04 - video description, the thing
that you're watching right now,
35:07 - which is not, even though I am live,
35:09 - it's not this, ah, okay,
this, this is the code
35:12 - using only repeats, left,
pen up and pen downs
35:16 - that will create this particular pattern
35:18 - and if I go and grab
this, I've pasted it here
35:21 - and if I go back to my
example and I paste it in...
35:27 - (drum roll)
35:31 - (buzzer buzzing)
It doesn't work.
35:33 - What's wrong?
35:34 - Well, weirdly, I'm going to
show you something weird.
35:37 - If I put a space here
and a space here, ah,
35:39 - all of a sudden.
35:41 - (horns playing)
We have the pattern
35:42 - we were looking for all long.
35:46 - But there's some weird
buggy stuff going on,
35:48 - why is it a space but no
space, here is the issue.
35:51 - So it took a while to
debug, I will show you a way
35:54 - of finding, the way that I
found the error was by looking
35:58 - through, first of all the
chat found this way before me
36:00 - and kept suggesting it and I
had to look and look and look.
36:02 - Where I found it all of a
sudden in this last repeat here,
36:07 - this command right,
right, it didn't pick up
36:11 - the argument three, it's
blank so that's certainly why
36:14 - I'm not getting the pattern
that I'm expecting to get.
36:16 - Now why is it doing that?
36:18 - Well the secret to that,
it's not a secret so much,
36:21 - lies in the fact of the way
that I parsed this bracket,
36:27 - right, remember if I have a repeat,
36:29 - if I go here, right, I look
for the first opening bracket,
36:34 - that's the start, the first ending bracket
36:37 - and that's the end but what
if there's a nested repeat?
36:40 - If there's a nested repeat,
this is the starting bracket,
36:44 - this is the ending bracket.
36:47 - So it completely ignores,
it pulls it off here
36:49 - and then loses the way it's
parsing, it loses that three
36:52 - and somehow having a
space in between there,
36:54 - it kind of is able to still
get that three by accident.
36:56 - So what I really need to do is
match the number of brackets.
37:00 - All right, I have a different idea now.
37:03 - What if, I think this
finding the first one
37:06 - and finding the last one in
this weird double wild loop way
37:09 - is kind of silly because all
I need to do is keep track of,
37:15 - I mean I do need to find the first one,
37:18 - so let's stick with finding the first one
37:21 - and then basically once
I found that first one,
37:24 - bracket, bracket count,
37:29 - ah,
37:30 - equals one.
37:32 - So now, what I want to
do is while bracket count
37:37 - is greater than zero, I'm
going to look at the character.
37:49 - If character = and opening bracket,
37:53 - then, ah, then increase the bracket count,
37:58 - else if it = a closing bracket,
38:02 - then decrease the bracket count.
38:08 - And then I should have,
38:12 - end should just now be wherever
38:15 - the index is, wherever it last left off,
38:19 - I might need to do minus
1, I'm not sure, right,
38:21 - so this should be like,
I'm basically finding
38:24 - the first bracket, in this case,
38:26 - there's noise and spaces there
38:27 - and then I'm going to pull out,
38:29 - I'm going to, I'm
basically looking for where
38:31 - that last bracket is
and the last bracket is
38:33 - and as the last bracket comes,
bracket count will be zero,
38:36 - I'll be done but if
there are other brackets,
38:38 - it's got to keep counting, okay.
38:42 - (drum roll)
38:43 - I should never use my drum
sound because it always means
38:45 - it's not going to work.
38:47 - (clapping)
(train whistle)
38:51 - All right, there we go.
38:54 - All right so this is complete, it works,
38:57 - I'm very excited about that.
38:59 - People have pointed out some examples
39:01 - that I found, for example,
I could try to make
39:04 - this design, let's see what happens
39:07 - if I post this in here.
39:10 - Right, we could say, oh I'm kind of off
39:12 - where my starting point is of but now,
39:15 - I could start to really
be creative and the line
39:17 - is sort of thick here so I also
feel like now that I'm doing
39:19 - more complex stuff, I probably want
39:21 - to change the stroke weight back to one.
39:25 - And we can see that
looks a little bit nicer.
39:27 - I just want to show you
something though amazing.
39:29 - If we go back to the Logo
repo which this is the state
39:34 - before I've done this video
and I go to pull requests
39:37 - and I go, for example, to
pull request number three
39:39 - from TheTastefulToastie, you
can see here are a whole bunch
39:43 - of other ones that you can
see that I could now try
39:45 - that should work with my, and
I'm going to show you something
39:49 - that's going to blow your mind, this.
39:51 - Ah, let's make this work,
we have to make this work.
39:53 - So I'm going to go, just before I leave,
39:56 - think about other creative
things you could add.
39:57 - These are all the commands.
40:00 - I am going to now go into index and HTML,
40:03 - I'm going to put that in here,
hold on, what's going on here?
40:07 - Let me give a carriage return here,
40:10 - let me paste in all of those commands.
40:13 - Now I could now go back
to here and do this.
40:16 - We don't see anything.
40:18 - So one thing that I really
definitely need to do
40:20 - is give it a much bigger canvas.
40:24 - So let's go back to create canvas.
40:28 - Have to finish with this.
40:30 - 900 by 900,
40:33 - something like that, refresh.
40:35 - (gasps)
40:37 - There it is.
40:38 - Oh my goodness, this is nuts.
40:42 - But it's a little off center,
oh let's change it to 20 20
40:47 - or zero, let's actually
just change it to 0, 0.
40:51 - And
40:53 - make it a little bit wider.
40:58 - Whoops.
41:00 - There we go.
41:02 - (train whistle)
41:03 - it is The Coding Train logo
made with literally with Logo
41:09 - and all of these numbers here.
41:10 - I hope you enjoyed this video,
41:11 - there's so many things missing, right,
41:13 - there are all these Logo,
if you look at the history
41:16 - of Logo and you look at
the language of Logo,
41:17 - there are lots of commands that I missed.
41:19 - So I'll list some of those
in the video's description,
41:22 - try to implement those or also, color,
41:25 - how would you incorporate color with this?
41:27 - How would you think of other clever ways
41:29 - to make this interactive in realtime
41:31 - to allow people to play with it?
41:33 - So, we now have a full interpreter here
41:36 - and I'm finished with this project.
41:39 - I can't wait to see what you make,
41:40 - I'm going to add this code
to the This Coding Train Logo
41:47 - repository and I will accept pull requests
41:50 - for implementing other
commands, bug fixes,
41:54 - adding things like color,
making the interface
41:57 - a little nicer so I'm probably
going to close out most
42:00 - of those pull requests
that were implementations
42:02 - of repeat, I thank you for
them but this will be now
42:05 - a community Logo interpreter
project that will start
42:08 - from the code that is in this video.
42:11 - Goodbye, everyone, and see you
in future coding challenges.
42:15 - (upbeat music)