00:00 - hello welcome to another coding
00:02 - challenge in this coding challenge I'm
00:03 - going to with great trepidation but
00:05 - excitement and energy I'm going to
00:09 - program from scratch the mandal BR set
00:11 - show you how to do it talk about the
00:12 - math behind it and make it happen in
00:14 - JavaScript in the browser problems will
00:17 - come up but I'm going to do my best so
00:19 - why why do you care about this it's a
00:20 - fractal pattern you can make some
00:21 - beautiful images with it you might also
00:23 - just sort of learn a bit about
00:24 - programming and pixels and arrays um but
00:28 - um yeah so I don't know you're here you
00:30 - probably want to do the mandle BR said
00:31 - if you don't you can go uh outside and
00:33 - play Frisbee um so let's see now let's
00:36 - look at least and let's read this
00:38 - definition which you know is g to cause
00:40 - a small like a slight pain in my side
00:43 - here to read it but I'm going to do it
00:44 - anyway and try to unpack and understand
00:46 - it as best we can in the context of a
00:48 - short YouTube coding challenge video
00:50 - okay the mandal BR set is the set of
00:52 - complex numbers C okay what does it mean
00:55 - for something to be a complex number and
00:56 - then to have a set of complex numbers
00:58 - that's a question we need to answer
01:00 - which the function f of Z = z^2 + C okay
01:04 - what does that function mean exactly
01:05 - does not diverge what does it mean for
01:07 - something to not diverge when iterated
01:09 - from Z equals z okay so there's a lot of
01:13 - stuff in there and the first thing I the
01:15 - first thing I want to do before I start
01:16 - writing the code is just talk about the
01:18 - math and the first thing I want to do is
01:19 - talk about what is a complex number okay
01:22 - so you might be familiar with an
01:24 - operation in math called square root I
01:27 - could say oh I think I have the wrong
01:28 - end of this pen I could say the square
01:30 - root of four ah by the way I forgot this
01:33 - whole thing I was practicing
01:34 - pronunciation and I completely forgot to
01:36 - do it the mandal BR set is named for the
01:38 - French mathematician benois mandelbrot
01:41 - okay I spent all the time practicing to
01:43 - say benois okay the square root of 4 is
01:48 - two the square root of 16 is
01:53 - four the square root of -1 is
01:58 - what well in in fact you might say to
02:01 - yourself ah there is no such thing as
02:03 - the square root of negative 1 it's
02:04 - impossible any number squared positive
02:06 - or negative results in a positive number
02:08 - so the square root of a negative number
02:10 - inherently does not
02:12 - exist this is not exactly the case in
02:16 - fact there is an answer to this and it's
02:17 - called I and I is an imaginary number
02:21 - it's imaginary because it's not a real
02:23 - number it doesn't actually exist but if
02:25 - we consider theun of ne1 actually be
02:28 - something that does exist and call it I
02:30 - all sorts of magic can happen one of
02:32 - which by the way is the mandle BR set so
02:35 - this is what's known so this is a real
02:37 - number and this is an imaginary number
02:39 - if I put those two things together 3 + I
02:44 - this is a complex number a complex
02:47 - number has both a real component and an
02:50 - imaginary component and it is typically
02:52 - written in the form a plus b i a is the
02:58 - quote unquote real component B is the
03:02 - quote unquote
03:03 - [Music]
03:04 - imaginary
03:06 - component I personally love imaginary
03:09 - numbers because I could just imagine
03:11 - them and use my creative imagination to
03:13 - think about imaginary
03:15 - numbers okay so uh so this is what a
03:19 - complex number is now let's go back to
03:20 - that
03:23 - definition the set of complex numbers
03:25 - okay what does it mean for something to
03:27 - be a set of complex numbers well this
03:29 - actually relates to you can think about
03:32 - a canvas right a
03:35 - canvas our canvas the thing that lives
03:37 - in the browser in HTML or processing or
03:40 - Java or whatever Graphics environment
03:41 - you're using has an
03:44 - xaxis and a y AIS it's a two-dimensional
03:48 - plane well what if a and I don't know
03:51 - which one should be which I'll just pick
03:53 - one and hopefully the mandle Brad set
03:55 - won't be upside down a let's say a is
03:57 - the x axis and B is the Y AIS the plane
04:02 - of complex numbers the set of complex
04:05 - numbers is all the and a number that
04:07 - appears here might have an a value of
04:09 - seven and a b value of three meaning 7 +
04:14 - 3 I so this plane this set of complex
04:17 - numbers is all the complex numbers for
04:19 - all of all a possibilities and all B
04:22 - possibilities so we have to do something
04:24 - for every single a set of complex
04:27 - numbers within the sort of bounds of
04:29 - this canvas this okay so that's good
04:32 - which the function f of z = z ^2 + C
04:36 - does not diverge when iterated from Z
04:38 - equals z okay this is probably the
04:40 - hardest part for us to understand but
04:42 - once we understand it we're done and we
04:45 - can actually start to program the code
04:47 - so let me come back over here and let's
04:51 - write that so F of Z equals z I wrote
04:57 - the wrong thing down I might need some
04:59 - more space let's see z^ 2 + C now C is a
05:06 - complex is a complex number A plus b i
05:10 - any number from this spot and we want to
05:13 - iterate this function starting with z
05:15 - equals z so if we start with Z equal to
05:18 - zero what do we get well Z the next Z
05:23 - like of Z like we're
05:25 - Z1 if this is z index you know Z subzero
05:29 - Z of the zero Generation Z of the first
05:33 - generation
05:35 - equals
05:37 - z^2 plus C which is by the way just
05:42 - C so now Z sub2 equals what c^2 + C and
05:50 - Z sub3 is going to be c^2 + c^2 + C so
05:54 - one of the things we need to look at how
05:56 - to do here is how do we get c^ S this is
05:59 - is where I need a little bit more
06:04 - root c s what is C S c^ 2 is a + b i
06:12 - time a + b i right because C is a
06:15 - complex number it has a real component
06:18 - and imaginary component a plus b i well
06:21 - let's multiply these two things together
06:23 - a * a is a
06:27 - 2 plus a * b i plus a b i now b i * a
06:36 - plus a bi again bi * bi now this is a
06:41 - crazy one bi * bi is what b^ 2 I
06:48 - 2 what's i i is the square root of ne1 I
06:51 - mean it's imaginary but it is the square
06:53 - root of negative 1 so if you square it
06:55 - what do you get negative 1 so this
06:58 - actually turns out to be a 2 plus this
07:01 - is AI plus AI plus 2 a i plus oh no not
07:06 - plus minus CU i^ 2 is 1 minus b^ 2 or we
07:11 - could look at this another way a^ 2
07:13 - minus b^ 2 plus 2 a b i well guess what
07:19 - this is a complex number it has a real
07:21 - component a^2 minus b s and it has an
07:25 - imaginary component 2 a so this is all
07:28 - the math that we need because what we're
07:30 - going to do is actually in our code just
07:33 - calculate these values over and over and
07:36 - over again generation to generation
07:39 - we're going to iterate iterate iterate
07:41 - and as we calculate those values over
07:42 - and over again we need to see do they
07:45 - remain Bound in an absolute value so the
07:47 - question is are they tending to go
07:51 - towards infinity or they actually just
07:53 - like staying around some reasonable
07:55 - number and the mandal brout set is the
07:58 - set of numbers for which the function
08:01 - remains bounded so it's all the time for
08:04 - all of the possibilities it's all of the
08:06 - ones that don't tend towards
08:08 - Infinity that was a lot to think about
08:11 - maybe pause this video and go outside do
08:13 - some take a break for a little while but
08:15 - now if you're back I'm going to start
08:17 - writing the code for that and I'm going
08:19 - to refer back to this math a couple
08:20 - times probably I don't know if you're
08:22 - following this I'm I'm having a good
08:24 - time okay so let's go to the code now I
08:26 - I have a sort of empty p5js sketch here
08:29 - um this is some JavaScript code it's
08:31 - just like a basic skeleton here the only
08:33 - thing that it's doing is it's looking at
08:35 - every single x value and every single
08:37 - yvalue and setting its pixel to a
08:39 - grayscale value of 51 so um I'm going to
08:43 - go take a look at that it's right here
08:46 - you can see here there we go there's my
08:48 - gray window if I were to you know change
08:51 - this component to 255 you can see it's
08:54 - like a redder window because I added
08:56 - more red so what I need to do ultimately
08:59 - is oops is I need to inside this code
09:03 - for every one of these X and Y values I
09:05 - need to run this mandle BR set F of Z
09:08 - z^2 Plus Z math thing and I need to see
09:11 - them are my numbers getting bigger or
09:12 - are they not getting bigger and then I'm
09:14 - going to set a color based on that okay
09:17 - so now we have an interesting question
09:19 - though to ask which is
09:21 - H if this is my pixel window which goes
09:24 - from 0 to 360 and 0 to 240 well do I
09:29 - really want and a complex number is a
09:31 - plus b i do I really want to deal with
09:33 - complex numbers like
09:35 - 357 plus 212 I no I really want my range
09:39 - I don't know what it should be but I'm
09:40 - going to just go between -2 and two and
09:44 - then let's try that uh top to bottom and
09:47 - probably something's going to be
09:48 - squished but it'll be fine so what one
09:50 - thing the first thing I need to do is I
09:52 - need to figure out what are my A and B
09:56 - values relative to X and Y so I want to
09:58 - Map X X which goes from 0er to width to
10:01 - maybe between -2 and two let's make this
10:04 - a square and then I don't have to worry
10:06 - about any of this nonsense and then I'm
10:08 - going to map B and this is really which
10:10 - goes from uh Y which goes from zero to
10:13 - height also between Nega -2 and two so
10:16 - I'm looking for all the complex numbers
10:19 - that go
10:20 - between -2 a plus um plus -2b no no no
10:27 - sorry -2 minus 2 I all the way to 2 + 2
10:31 - I that's the full range um okay so I
10:34 - want to use those numbers now I need to
10:37 - start doing that iterating okay so the
10:40 - first thing I need to do is
10:45 - say I know how to do this I've done this
10:47 - before okay let's look at this we need
10:49 - to over and over again so we need to
10:52 - over and over we have we need an
10:53 - operation that's going to happen over
10:54 - and over again so let's keep track of
10:56 - how one thing we should do is keep track
10:58 - of how often are we doing this let's
11:00 - have a variable called n because I want
11:02 - to just make sure like as long as n is
11:04 - less than I don't know some arbitrary
11:06 - amount 100 like I don't want to iterate
11:09 - more than 100 times I can keep doing
11:11 - what I'm doing and I want to have Z
11:14 - start with something so I'm going to
11:16 - have uh uh Z start with uh zero I'm sure
11:21 - I'm getting something wrong here because
11:23 - I'm like thinking about this as I'm
11:24 - doing and I'm going to fix it as I go
11:26 - but let's let's figure out some things I
11:27 - need to calculate I kind of want to like
11:29 - pause recording and go look at my code
11:31 - from before okay but it's okay I'm fine
11:33 - I'm fine this going to be okay um okay
11:37 - did I get something wrong in the chat
11:38 - everybody put like rainbow emojis or
11:40 - something if I did something horribly
11:42 - wrong maybe rainbow maybe that's not
11:43 - right it should be rainbow if it's
11:44 - correct um okay so the first thing I
11:47 - want to do is I want to calculate uh A2
11:51 - minus b^2 okay so I'm going to call that
11:55 - AA is uh or or let's um
12:00 - that's going to be my new a is a * a
12:03 - minus B * B and then I also need to
12:07 - calculate
12:09 - 2ab so I'm going to call that uh BB is 2
12:14 - * a Time B so I have now calculated the
12:19 - real components the real and the complex
12:22 - components for the next
12:24 - generation and then what do I need to
12:27 - say need to say a equals a a a and b
12:30 - equals
12:31 - BB and do it again so this is just my
12:34 - iterative process because I start with I
12:37 - think this is right
12:39 - right the number while yeah uh oh and
12:42 - then I need to say n plus
12:47 - plus uh okay
12:49 - now another thing I could do here is I
12:52 - could say like what does it mean for
12:54 - this to to be unbounded to tend towards
12:57 - Infinity what if I just say say
12:59 - something like I could be really lazy
13:01 - what if a A plus BB is greater than I
13:04 - don't know 16 or I made up that number
13:07 - that
13:08 - means maybe and and not and I want to
13:11 - take the absolute value of
13:13 - that what if the absolute value of those
13:16 - two the real and the imaginary component
13:18 - added together uh goes toward Infinity
13:22 - um ah greater than 16 that's my Infinity
13:25 - then I want to break out of it so the
13:27 - question is did I get to 100 or did I
13:31 - not so look so this is how should have
13:35 - thought about I'm G to come back maybe
13:36 - we'll talk about this again let's see
13:37 - let's see how far I've gotten why not
13:39 - use a for Loop well I could use a for
13:41 - Loop that would make a lot of sense but
13:44 - I'm just using a a while loop For No
13:46 - Good Reason okay so now let's just do
13:48 - something I'm just G to say like now if
13:53 - n uh let's uh equals uh if n equals 100
13:59 - right if we got to the max iterations
14:01 - and I should probably make that a
14:02 - variable then let's make a brightness
14:05 - value brightness value equals zero and
14:08 - then uh brightness value equals
14:11 - 255 so let's just see what happens
14:16 - now if I basically with this simple
14:20 - little algorithm figure out whether n
14:23 - kept going and remained bounded or if it
14:27 - went to Infinity Let's see we should
14:31 - get uh we should get something oh I got
14:35 - a nice like Circle that's
14:37 - promising so now let's be a little bit
14:40 - more thoughtful about this maybe we can
14:42 - do some sort of coloring based on the
14:44 - value of n maybe that will get us
14:47 - something better so let's actually say
14:51 - now uh map n which could go from 0 to
14:56 - 100 between 0 and 255
15:01 - five what did I do WR time out okay
15:05 - welcome back there was a critical error
15:07 - in what I had written here which I just
15:09 - uh didn't notice and thankfully the
15:11 - internet chat came to the rescue um and
15:13 - it's right here in these lines AAL a A
15:16 - plus a b equal BB Plus B now let's go
15:19 - let's think about what's going on here
15:20 - if you recall the idea of what we're
15:23 - doing is we're
15:25 - saying uh Z the new Z equals the
15:30 - previous
15:31 - z^2 plus C and all of the math that I
15:35 - did here all of this right here this is
15:37 - me figuring out what z s is z^ s is a A
15:41 - plus BBI I that's what z^ s is so what
15:45 - do I need to do I need to then add to
15:47 - that c but C is always the core
15:52 - original uh real and imaginary component
15:55 - of where we are in this complex plane so
15:57 - even though I want the new A and B
16:00 - that's then going to get squared for the
16:01 - next iteration the next iteration to get
16:03 - updated right I want the new A and B
16:05 - that's going to get squared over and
16:07 - over to get updated this that's getting
16:09 - added to it C this is really what's
16:11 - standing in for C right here this has to
16:14 - be those original values so I'm going to
16:17 - um I'm going to just do this I'm going
16:18 - to say ca equals a and maybe somebody on
16:21 - the internet here can uh oh I'm going to
16:24 - post this code GitHub can submit a pull
16:26 - request with nice variable namings for
16:27 - all this stuff CU I feel like boy this
16:29 - is like I I I have a pet peeve and I'm
16:31 - really doing my own pet peeve which is
16:33 - like all these cryptic variable names
16:35 - that would never make any sense if you
16:36 - were just coming to look at it but it is
16:38 - what it is right now so I need to store
16:40 - those original values and keep those as
16:42 - CA and CB so let's take a look now and
16:45 - see what we
16:47 - get ah this is starting to look like
16:49 - that mandal broth set you can see it
16:51 - there now you can see like oh I kind of
16:53 - like it's not exactly centered I'm in
16:55 - sort of the wrong place so you know we
16:57 - can fut with that one way could F that
16:59 - say like oh let's uh let's kind of like
17:02 - have a little bit of a wider range oh
17:04 - and you can see I kind of like squished
17:06 - it so I'm going to make y the
17:11 - same there you go but it's also still
17:13 - doesn't really look exactly like what
17:15 - you think of when you think of the
17:16 - mandal brat set um you know if I zoom in
17:19 - you can see there's some level of
17:20 - grayscale there what I'm doing is I'm
17:23 - essentially saying let me just take the
17:25 - number of iterations it got to right if
17:28 - it got to 100 it's done the number of
17:32 - iterations before it breaks out um and
17:36 - gets to um before uh if it goes to
17:39 - Infinity how many iterations did it take
17:41 - for it to go to Infinity so first of all
17:42 - one thing I should say that if n equals
17:46 - 100 and this is driving me crazy I
17:47 - really just need a variable here um
17:50 - which is I'm going to call uh Max
17:52 - iterations and I'm going to set that
17:54 - equal to 100 because I I hate that I'm
17:56 - typing this everywhere so I'm going to
17:57 - put this here and put put this here and
18:00 - I'm going to put this here so now if n
18:02 - actually gets to Max iterations let's
18:05 - say the brightness is
18:07 - zero and now you can sort of see like ah
18:10 - look it's all black in the center and
18:12 - then there's some white kind of on the
18:13 - outside and there's so many different
18:15 - ways you could color stuff uh here's one
18:18 - way I I'd use this sort of mapping way
18:20 - another thing that I could do is I can
18:22 - say n times
18:26 - 16 and I can say uh modulus 255 so I uh
18:31 - recycle back down to zero and you can
18:33 - see oh that looks kind of interesting I
18:34 - don't know I don't know what that what
18:36 - good that did maybe I need to floor that
18:38 - for it to look like what I want it to
18:40 - look like but that that that I thought
18:42 - this was how I colored it in a previous
18:44 - thing welcome back that was an awkward
18:47 - cut but so what um I was having some
18:49 - trouble figuring out how to color the
18:51 - mandle BR set so I think what would be
18:53 - best to look at first actually is just
18:54 - to completely simplify things so this is
18:56 - what the mandal BR set looks like if
18:58 - there's only two possible colors if
19:00 - there is a essentially a background
19:02 - color and a foreground color the
19:04 - background color is set to be 200 so
19:07 - every pixel is 200 unless it's something
19:10 - unless it's a pixel that's made it all
19:12 - the way to the max iterations that's
19:14 - with that's something that's bounded
19:15 - that's within the mandal brat set so if
19:17 - it's within the mandal brat set its
19:19 - brightness is zero it's a black pixel
19:21 - otherwise its brightness is 200 so we
19:23 - can see it so what I want to do is keep
19:26 - that core mandal BR set the set itself
19:29 - um with a pixel value of zero and now
19:33 - you could probably Google mandle BR set
19:35 - color system and you could probably find
19:38 - all sorts of ways of doing it but
19:39 - thankfully the internet chat came to my
19:41 - rescue and let's just look at one other
19:43 - way of coloring this particular fractal
19:46 - so what I'm going to do is what I want
19:48 - to do is say okay well the iteration got
19:51 - somewhere between zero and 100 so I'm
19:53 - going to map I'm going to speak a little
19:54 - quieter now because I think there's a
19:55 - session going on in the Next Room I'm
19:57 - going to map the number of iterations
20:00 - from 0er to Max iterations and I'm going
20:03 - to make that some brightness value
20:05 - between 0 and 255 let's look at
20:08 - that yeah it kind of worked but you can
20:11 - barely see what's going on there at the
20:13 - edges so we need a way of changing the
20:16 - kind of scale here and actually a better
20:18 - way of doing this would be to actually
20:21 - first just normalize n which goes
20:24 - somewhere between zero and Max
20:25 - iterations normalize that between a
20:27 - value of zero and one
20:29 - and then I'm going to say bright equals
20:32 - map the square root of that value which
20:36 - also but incidentally has a range
20:37 - between Z and one to between 0 and 255
20:40 - so if I do that and I refresh this page
20:44 - now you can see this is starting to look
20:46 - more like what you might be used to
20:48 - seeing in a kind of Mandel BR set
20:51 - visualization and the other thing you'll
20:53 - notice here is I'm just sort of looking
20:54 - at this zoomed out version of the mandle
20:56 - BR set the reason why it's zoomed out is
21:00 - because the minimum and maximum range
21:03 - here are between -2.5 and 2.5 so what if
21:06 - I went between netive 1.5 and
21:12 - 1.5 come on now you can see I'm kind of
21:15 - zoomed in on it and what if I went
21:17 - between
21:19 - .5 and 0.5 and by the way what if I just
21:23 - made these variables so what if I said
21:26 - Minx equals a negative
21:30 - 0.5 Min y equals and actually I'm just
21:33 - going to say I'm gonna say Min valal is
21:36 - negative .5 and Max Val is 0.5 and what
21:40 - I'm actually going to do is let's make
21:43 - let's make a mins
21:45 - slider oh I can't do that up here
21:49 - and a Max
21:53 - slider Min slider equals create slider
21:57 - now I need the minimum value to be some
22:00 - value between like
22:02 - um um I don't know -2.5 and
22:07 - zero and I'm going to start with
22:11 - -2.5 and have a range of uh increment
22:14 - value of 0 01 and the max value this is
22:18 - kind of silly what I'm doing how I'm
22:20 - doing this but max value is going to be
22:22 - the same but between zero and 2.5 and
22:26 - we'll start at 2.5 and then what I'm
22:29 - going to do is actually say Min value
22:32 - mins
22:33 - slider.
22:37 - value max slider. value and I'm going to
22:41 - do this now for A and B now I'm going to
22:44 - map y as well so now I have two sliders
22:47 - so if I run this
22:50 - program whoops create sliders is not
22:53 - defined okay I forgot to include the P5
22:55 - Dom
22:56 - Library so let me include that P5 Dom
22:59 - library and you can see okay there's
23:02 - some sliders down here now now there's
23:05 - sort of an issue which is that I'm I'm
23:09 - changing the sliders but I'm not seeing
23:12 - anything change so let's figure out
23:14 - what's going on
23:17 - here it is at negative 1.5 one oh I have
23:21 - no Loop in my code because in draw I
23:24 - before I didn't want it to change so I
23:25 - just had no Loop so I'm going to take
23:27 - out no Loop so that it Loops but there
23:29 - really is another
23:32 - issue which is
23:34 - that you know it's I can I can make
23:37 - these changes but look how slow so this
23:38 - pixel operations are really really slow
23:40 - so I'm going to do this just in I'm
23:42 - going to make like a 100 by
23:48 - 100 oh the other reason why it's so slow
23:51 - is I made this ridiculous 1,000 Max
23:53 - iterations meaning for every pixel it's
23:54 - going to iterate 1,00 times so that's
23:56 - terrible I I don't need let's just do it
23:58 - like 50
24:01 - times and now you can see like I can
24:04 - start to zoom in to different parts of
24:06 - the fractal it's actually quite fast so
24:09 - now we can see like well maybe I should
24:13 - uh let it be a little bit
24:16 - bigger and maybe I should let the
24:19 - maximum iterations be
24:21 - 100 and yeah it's still kind of like at
24:24 - a reasonable speed and you can see I can
24:26 - start to zoom in we can really get the
24:28 - sense of the fractal this idea of a
24:30 - fractal of the entire shape of the
24:31 - mandle BR set there it is up there I
24:33 - can't reach up there because my hands
24:34 - get cut off but you see the idea I don't
24:36 - know if you can still hear me I'm
24:37 - speaking quietly this has kind of been
24:39 - kind of a crazy video but hopefully you
24:41 - got something out of this talked a
24:42 - little bit about complex numbers
24:44 - imaginary numbers looked at how to set
24:46 - pixels according to what the properties
24:48 - of iterating those numbers happen over a
24:50 - plane of XY values and looked at a
24:52 - little bit of how we can manipulate it
24:53 - with sliders and what I would love to
24:55 - see from you if you watch this video and
24:57 - want to make something with it look at
24:58 - the code think of a more thoughtful way
25:00 - of adjusting the range of doing a zoom a
25:02 - more thoughtful way of coloring a more
25:04 - thoughtful way of exploring how what
25:07 - this algorithm can do and in the next
25:09 - video someday I will not make this till
25:10 - next week I'm going to look at what it
25:12 - means to create something called the
25:13 - Julia set which are little fractal
25:16 - patterns that are kind of like leaves or
25:18 - branches coming off of the mandal BR set
25:20 - and'll look at those in the next uh
25:22 - fractal bandal BR Julia said coding
25:24 - challenge video thanks for watching