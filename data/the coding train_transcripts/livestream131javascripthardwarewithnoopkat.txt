00:00 - - Yes. (chuckles)
00:05 - - Hello, welcome.
(blows train whistle)
00:08 - Welcome to a special
afternoon Coding Train
00:11 - with our special guest Noopkat.
00:15 - I was saying it wrong this morning.
00:17 - I was saying Noopkat, which
I guess everybody says that.
00:19 - - Everyone loves Noopkat,
so it's totally okay.
00:23 - - So if you don't know
Noopkat, Suz Hinton,
00:27 - Noopkat streams on Twitch on Sundays.
00:31 - - Yes.
00:32 - - I will include links in all of that
00:34 - in this video's description
when it gets published.
00:37 - You can probably find it
00:38 - through the magical world
of Google right now.
00:40 - But you shouldn't go find it
00:41 - because you should stay and watch.
00:43 - - Yeah, we're gonna have some fun today.
00:45 - - Noopkat knows all sorts
of stuff I don't know about,
00:48 - especially like how to use iTerm.
00:50 - (laughter)
00:51 - You'll notice that iTerm is here,
00:53 - so that's exciting for one.
00:56 - I don't even know if
any of this is working
00:57 - because usually I put the
chat there to monitor it.
00:59 - But I'm gonna go look.
01:01 - I'm gonna assume this is all working fine.
01:02 - In a minute I'm gonna go sit over there
01:04 - with a laptop tuned to the live chat.
01:06 - And so if questions come in,
01:09 - if you have questions you can ask them.
01:10 - I'll try to keep track of them.
01:11 - This is very informal.
01:13 - Probably everything is gonna
go wrong as it always does.
01:16 - We'll try our best.
01:17 - One thing that's also very exciting
01:18 - is we're gonna make use
of this overhead camera.
01:21 - - Oh yeah. Is it this one?
01:22 - - Because there's gonna be
some hardware stuff happening.
01:26 - So that's new and very
exciting for the Coding Train.
01:29 - I didn't really do a good job,
I feel, of introducing you.
01:31 - But I'll let you introduce yourself.
01:33 - - No, this is really fun.
01:35 - - So let me quickly go over and check,
01:37 - make sure everything
seems okay in the chat.
01:38 - Otherwise we're just
gonna be doing this again.
01:40 - - Just interrupt me if it's not good.
01:42 - I can do an intro. Does it seem all right?
01:46 - - [Dan] Everything looks
good and sounds good.
01:49 - Great, so I think we're going.
01:49 - So you can introduce yourself.
01:51 - I'm gonna mute my microphone,
01:53 - but then if questions come
in or I must say something
01:55 - I'll unmute.
01:56 - - Just jump in whenever.
01:57 - If anyone has any questions
about what I'm doing
01:59 - because I may actually skip over stuff
02:01 - that you're just like,
02:02 - "Wait, she said a word that I don't know."
02:04 - Just let me know.
02:05 - Thank you Dan for having
me. I'm so excited.
02:08 - I'm such a fangirl of the Coding Train
02:10 - so I'm like really excited to be here.
02:15 - I do a lot of hardware stuff
02:16 - so I wanted to briefly
intro myself on that.
02:19 - I work on a lot of open
source JavaScript hardware,
02:22 - which I know for some of you
02:23 - you might not typically associate
JavaScript with hardware
02:27 - but I promise that it's actually super fun
02:29 - to get started with it.
02:30 - And it's really, really quick to prototype
02:32 - with JavaScript hardware.
02:33 - So that's kind of its main attraction.
02:36 - But you can also just create your own
02:37 - kind of fully implemented,
real contraptions
02:42 - and still run JavaScript to control it.
02:44 - I'm gonna show you one way of controlling
02:47 - hardware with JavaScript today.
02:48 - We are gonna be working with an Arduino,
02:51 - an Arduino Uno which is
kind of the most common one
02:54 - that a lot of people get started with.
02:56 - And we're gonna be driving this
thing called an OLED screen.
02:59 - And I'm gonna explain all this
03:00 - just to make sure that
Dan's not super scared.
03:04 - Because Dan told me he's
really afraid of hardware.
03:07 - And I'm really afraid of generative art
03:10 - because I feel like I'm not good at it,
03:12 - so I'm trying to combine the two together
03:14 - because Dan is really
good at generative art.
03:16 - So somewhere in the
middle we're gonna find
03:19 - a nice happy place where
we're both learning something.
03:22 - Hopefully it's gonna go well.
03:24 - Yeah, thanks so much for
joining us. I'm so excited.
03:26 - I'm normally streaming on a Sunday,
03:28 - and yeah, I'm streaming on a Friday,
03:30 - which is blowing my mind.
03:34 - - [Dan] Awesome.
03:35 - I'm muted, but you
probably hear me through--
03:36 - No, that's great. I would
say that I'm not very--
03:40 - If anything I might know how
03:41 - to implement the generative algorithms,
03:43 - but I'm not good at making
something beautiful out of them.
03:46 - That's what the viewers are good at.
03:47 - - We're gonna do a super simple one today,
03:49 - and then maybe the viewers
can help us with stuff.
03:53 - I am going to just take you through
03:55 - a couple of the tools that
we're gonna be using today.
03:57 - Just forgive me, this is not my computer
03:59 - so we had some sort of
last minute shenanigans,
04:02 - but I think it's going to be okay.
04:04 - I'm gonna be using Johnny-Five,
04:05 - which is kind of the beloved
hardware JavaScript framework.
04:11 - It has been designed to be
like the jQuery of hardware.
04:15 - So if you've ever used jQuery before
04:16 - then you know that it's a really nice API,
04:19 - it's super accessible
to get started with it.
04:21 - So Johnny-Five was designed by
04:23 - one of the contributors
to jQuery, Rick Waldron.
04:27 - He's done a fantastic job.
04:28 - And there's been a lot of
contributors ever since.
04:31 - I think there's at least
70-something contributors now.
04:35 - That was when I checked
a couple years ago,
04:36 - so it's probably even bigger now.
04:38 - So I'm gonna be using
this with our Arduino.
04:41 - So if you wanted to follow along with
04:43 - some of the beginning code
examples we'll be using today
04:46 - you can go to johnny-five.io.
04:49 - It's kind of like the Short
Circuit robot character,
04:52 - so I really like that
it's named after that.
04:54 - And we're also gonna be
making use of a module
04:57 - that I wrote a little while ago,
04:59 - about three or fours years
ago, and it's called oled-js.
05:03 - OLED is the type of screen that this is.
05:06 - It's an OLED screen just
meaning that the little pixels
05:10 - that are showing up on the screen
05:11 - are actually driven by OLEDs,
which is like a type of LED.
05:15 - And so I wrote this module to
be compatible with Johnny-Five
05:18 - so that you can just start really easily
05:20 - drawing to the screen
without having to know
05:23 - a lot of the stuff that's
going on underneath.
05:25 - So I'll cover a little bit more on that
05:27 - when we actually get started.
05:28 - But we're also gonna
be using that as well.
05:31 - I wanted to give a shoutout
to my friend Tim Holman
05:34 - because he's actually the one that finally
05:36 - got me playing with
generative art super recently.
05:39 - We hung out at JSConf AU in Australia
05:42 - and he gave this awesome
talk about generative art
05:44 - and how you just need a few
simple things in a toolkit
05:48 - to get started with,
05:49 - and it's the first time I
felt not afraid to do it.
05:54 - So you should check out
Tim Holman's website.
05:57 - It's tholman.com.
05:59 - Yeah, he does really, really, really
06:01 - hilariously funny stuff on the Internet
06:02 - so you should absolutely check him out.
06:04 - So I wanted to thank him
06:06 - for finally getting me started with it.
06:09 - The generative art that
we're gonna create today is,
06:13 - at least on this website
it's called a pseudo maze.
06:16 - Is that what it's actually called, Dan?
06:18 - - [Dan] I dunno, maybe. It
looks like the 10 PRINT design.
06:20 - - Is that what it's called?
06:22 - - [Dan] Is it that you just pick randomly
06:24 - a left or right line?
06:25 - - Yeah.
- So it's not actually a maze.
06:27 - I have a coding challenge
that's exactly that pattern.
06:32 - It's from the Commodore 64.
06:35 - There's a one-line code 10 PRINT, GOTO 10,
06:37 - where you can randomly pick
a forwards or backwards.
06:40 - Perfect. This is good synergy.
06:43 - - So I noticed also that you did
06:44 - a coding challenge on Floyd-Steinberg.
06:47 - - [Dan] Yes.
06:48 - - Displaying photos,
06:50 - or just high resolution
images on these screens,
06:53 - it's very effective to use
06:54 - the Floyd-Steinberg algorithm too.
06:56 - This is me trying to get
you less afraid of hardware
06:59 - because you're still using
the exact same stuff on this.
07:02 - So if we have time-- I
don't think we will--
07:04 - but if we have time
07:05 - I can also show displaying
pictures on this thing.
07:07 - But for today we're actually
just gonna work with lines,
07:10 - which are super simple to do.
07:12 - And just to kind of explore
the concepts of generative art.
07:16 - If you've already seen
Dan's coding challenge
07:18 - this is gonna be pretty similar.
07:20 - But it's gonna allow you to see
07:21 - how you then apply it to
something like hardware I guess.
07:23 - I think it will still
be super interesting,
07:25 - so thanks for tuning in.
07:28 - That's the super quick
crash course to stuff.
07:32 - I do actually have a folder
right now that I've created.
07:37 - I did pre-install some stuff ahead of time
07:41 - just so that we don't have to sit around
07:44 - waiting for NPM to install.
07:45 - But I will be doing
this with Node.js today,
07:47 - which is a way of running JavaScript
07:49 - outside of the browser,
which is really cool.
07:52 - So if you go to
Node.js.org, just like that,
07:55 - you should be able to read up about it.
07:57 - It's really, really cool.
07:58 - That's kind of what
Johnny-Five runs on top of.
08:01 - But recently I did get it
working in the browser,
08:03 - but that's for another episode probably.
08:07 - So I have this folder here.
08:08 - I've installed Johnny-Five.
I've installed oled-js.
08:12 - Just those two packages
that I showed you before
08:15 - and that's it.
08:16 - And then we have a code editor here.
08:18 - I didn't quite get Vim setup.
08:19 - I was on a mission to get Vim going
08:22 - because if you've seen my stream before
08:24 - you all know that I use Vim.
08:25 - So we're using Visual Studio Code instead
08:27 - and we're gonna just keep
crossing back and forth
08:29 - between iTerm and Visual Studio Code.
08:31 - So let me know if you can't read anything,
08:33 - and Dan will yell at me, and
then we'll figure it out.
08:37 - I do actually have the
Arduino plugged in right now
08:39 - as you should be able to see.
08:41 - So we're not actually gonna
plug anything into it yet.
08:43 - We just want to kind of establish
a connection to it first
08:47 - just to make sure we can
do our little hello world,
08:50 - and then we'll start
plugging in the screen.
08:52 - So I sort of wanted to do a
lot of this stuff from scratch
08:54 - just so you can see it from the beginning.
08:58 - I've created a blank file called art.js
09:00 - because that's what we're creating today.
09:02 - And I'm going to start just by
09:04 - requiring the dependencies
that I actually need.
09:07 - In Node.js with JavaScript,
09:10 - instead of maybe doing
import, which you could do,
09:13 - I just gonna be using
require, which basically says,
09:16 - "I've installed these libraries
09:17 - "and I actually want to start using them
09:18 - "so I can then assign them to variables."
09:21 - So I think the first thing
I want is Johnny-Five.
09:23 - I'm gonna call that five for short,
09:25 - just because it's quicker to type.
09:28 - And then I'm just going to require that,
09:30 - and it should be smart
enough to figure that out
09:32 - because Visual Studio
Code is kind of amazing.
09:35 - So that's me actually
requiring Johnny-Five
09:37 - and saying that that library from now on,
09:39 - when I want to access
it, it's called five.
09:42 - The next thing I want is
the actual OLED library.
09:45 - And because that's a class
I'm gonna capitalize it.
09:48 - And let's see if it's smart
enough to figure this one out.
09:51 - It didn't. Oh, there we go.
09:53 - - [Dan] Just asking a quick question.
09:54 - Do you have like a package.json file?
09:58 - Is the Johnny-Five Node
module already installed?
10:00 - Did you talk about that while
I was looking at the chat?
10:02 - - I did.
(laughter)
10:04 - - [Dan] I'm not gonna
ask any more questions.
10:07 - - I can show you the
package.json real quick
10:10 - so you can actually see
what that looks like
10:12 - if you've never seen it before.
10:14 - So if you have a look down
10:15 - towards the bottom of that
file you've got dependencies,
10:17 - and you've got johnny-five and oled-js.
10:19 - Really, really glad that
we just went back over that
10:22 - because I know that I was talking
10:23 - a million miles an hour anyways.
10:26 - Now that we have them
10:28 - we can actually start working with them.
10:30 - Before we do anything
with this OLED screen
10:33 - we want to just test that
Johnny-Five is working
10:36 - and is able to talk to the device.
10:39 - We can do like a hello world with it,
10:41 - but I kind of wanted to first
describe on the whiteboard
10:45 - kind of how Johnny-Five
actually talks to the Arduino
10:49 - before we actually start on that.
10:50 - So let's go do that.
10:54 - We've got our computer right here.
10:56 - And this is kind of the
confusing thing for some people
11:00 - to understand exactly
how Johnny-Five works.
11:02 - I'm gonna draw a really bad keyboard here,
11:05 - but you get the idea.
11:07 - And then this computer is like,
11:10 - okay, well I want to talk to this Arduino.
11:14 - We can have back and forward
communication with it.
11:18 - So let's just say that
this is the Arduino.
11:21 - Everything has a smiley face too.
11:23 - So this is the Arduino.
11:24 - So what's actually happening
when we run Johnny-Five
11:27 - is that every time we
start that Node.js process
11:31 - it actually uses this really
cool library called serialport
11:34 - to establish a two-way
connection between the Arduino
11:37 - and the device, the laptop itself.
11:40 - And what it actually speaks is
called the Firmata protocol,
11:45 - which I don't know if
you've heard of before, Dan.
11:47 - - [Dan] I have, yes.
11:49 - - Have you used this before?
11:52 - - [Dan] I think I went to a workshop once
11:55 - where somebody was teaching with Firmata.
11:57 - I know that students
sometimes here use it,
11:59 - but mostly the students at
ITP use the Arduino directly.
12:03 - - Okay, that makes sense.
12:04 - So if you wanted to use
the Arduino directly,
12:07 - this particular Arduino we're using today
12:09 - only understands C++.
12:11 - So that's why we wanted to sort of start
12:13 - with something a bit higher level
12:14 - and it's a little bit easier
to stay on your machine.
12:18 - - [Dan] So if you're using Firmata
12:20 - you can write the Arduino
code basically in JavaScript?
12:24 - - Yeah, you can basically
become the remote control
12:27 - for the Arduino through
the Firmata protocol.
12:30 - So we have our JavaScript,
12:32 - which understands the Firmata protocol,
12:34 - and then we have a C++ script
running on this board here
12:38 - which understands the
Firmata protocol too.
12:41 - - [Dan] And that's like
an out of the box thing
12:42 - you download and run on there.
12:43 - - Exactly.
12:44 - So I'm gonna actually run that--
12:45 - Well, I'm gonna run a very quick script
12:47 - to install that on my Arduino.
12:49 - I'm gonna show you how to do that so that
12:51 - you don't even have to download
the Arduino IDE or anything.
12:54 - So we can do that.
12:55 - And the way that these talk to each other
12:57 - is because they know the same
language, which is Firmata,
13:00 - they just kind of send
opcodes between each other.
13:03 - That's not even a zero.
13:05 - So maybe 0xFF, that's like a
byte that has value like 255.
13:13 - Maybe that means
something very substantial
13:17 - in the Firmata protocol.
13:18 - Maybe it means, "Hey, start
sending power to this pin
13:21 - "so that you can turn an LED
on," or something like that.
13:24 - I don't actually have the
Firmata protocol memorized
13:26 - but I do know that it is
based on the MIDI protocol.
13:29 - So it uses I guess like
the notes and everything,
13:33 - which is, I think, a really, really cool
13:36 - part of Firmata's history,
that it uses MIDI to do it.
13:39 - So that's like a super high-level view
13:41 - of how it actually does it
13:42 - just because the stuff that
we're working with today
13:44 - is so heavily abstracted.
13:46 - So we want to just make sure
that you still understand
13:49 - that there's this walkie
talkie thing happening
13:51 - and that the JavaScript never actually
13:52 - goes and lives on this device.
13:54 - It's really just a remote control.
13:57 - We're gonna have a
whole different protocol
14:00 - talking to the actual screen
14:01 - which I'll draw here later on as well.
14:04 - Cool? All right, let's do it.
14:09 - Now that we've got our
dependencies we actually want to
14:12 - make sure that it's talking to the device.
14:14 - I mentioned before that the
Arduino needs to actually know
14:18 - what the Firmata protocol is.
14:20 - So we actually have a pre-made sketch
14:23 - that Arduino itself publishes with the IDE
14:26 - and it's called StandardFirmata.
14:28 - And so we want to use that.
14:31 - Having to open the Arduino IDE,
14:32 - and then flash a script to the Arduino,
14:35 - and then close it again
is sort of just annoying
14:39 - because that's the only
thing you use it for.
14:40 - So I ended up making a package
14:42 - and it's called firmata-party.
14:45 - And I think I installed this
on Dan's machine. I did.
14:48 - So what firmata-party
does is it allows you
14:50 - to have a party with Firmata
14:52 - by just being able to
transfer the Firmata script
14:55 - onto the Arduino device
that you actually have.
14:58 - So that's literally all it does,
15:00 - but it does actually get you started
15:02 - and up and running really quickly.
15:04 - So it's just a command line
that I wrote in Node.js.
15:07 - So we can run firmata-party,
15:08 - and then we're gonna write
the name of the Arduino board
15:11 - that it's actually supposed to be flashing
15:13 - so that it knows what to
look for that's plugged in.
15:16 - - [Dan] Someone in the chat is asking
15:18 - is the JavaScript
transpiled or interpreted?
15:21 - Or is the Firmata--
15:24 - Does Firmata interpret
the language or transpile?
15:26 - Maybe this question doesn't--
15:28 - I don't know if that question makes sense.
15:29 - - I think I'm really confused, but...
15:30 - So the Firmata protocol itself--
15:34 - - [Dan] Is just a protocol.
15:35 - - Yeah, it's a protocol, but
the scripts that are running--
15:37 - Because that's a really good question.
15:39 - The scripts that are running
15:40 - are just basically looping and listening
15:42 - for any messages that come into the device
15:45 - or that the device sends
to the laptop itself.
15:49 - So they're actually listening
for Firmata packets,
15:52 - or just like MIDI notes,
15:54 - and then there are
interpreters on either side
15:57 - that are interpreting those opcodes
15:59 - and doing the right
thing with them I guess.
16:01 - So hopefully that answered the question.
16:03 - - [Dan] In this setup that you're using--
16:04 - I don't know if I'm
jumping too far ahead--
16:06 - obviously you need your computer there
16:08 - to write the Node code you're gonna write.
16:09 - But once that's finished could this work
16:12 - just with the Arduino
and the display, or no,
16:14 - because the JavaScript has to
run on Node on your computer.
16:18 - - Yes.
16:19 - - [Dan] So the C code,
the C++ code, is compiled
16:22 - and the JavaScript is
just running through Node
16:23 - the same way it always does.
16:24 - - Yeah. So the only code that
ever runs on this device,
16:27 - at least in this setup--
16:28 - You can use Johnny-Five
wirelessly, which is kind of cool.
16:32 - And you can run Johnny-Five
on devices that run Linux.
16:35 - For example a Tessel 2 is
able to run Johnny-Five,
16:38 - which is awesome.
16:39 - What happens is that the
script on the Arduino
16:43 - never, ever changes.
16:44 - So it's literally just a listener
16:46 - that's listening for
those Firmata commands
16:48 - to come from the computer,
16:49 - and the JavaScript always
stays on the laptop
16:52 - and I guess the USB
connection between the two
16:56 - is kind of the telephone
game that it's playing,
17:00 - if that makes sense.
17:02 - If you've got any followup
questions for that, let me know,
17:04 - because it's a really,
really good question
17:06 - and I don't feel I explained it properly.
17:08 - - And Scanline in the chat writes,
17:10 - "Firmata is like remote
control GPIO over serial."
17:14 - - That's a really good way of saying it.
17:15 - Also I'm so excited that
Scanline is in here. Oh my God.
17:20 - I think Scanline is awesome.
I just wanted to say hi.
17:23 - And I watch your livestreams as well.
17:26 - Now I'm super nervous.
17:28 - So we're gonna run firmata-party uno.
17:31 - Literally all that does is
17:32 - it takes the Firmata C++ script
17:35 - that the Arduino needs to
run, and it just uploads it.
17:37 - And then we don't actually
upload any scripts
17:40 - to the Arduino after this.
17:42 - We're just running JavaScript
on the laptop, as we said,
17:45 - to just send stuff to that
Firmata script that's running.
17:49 - And it's really just sending commands.
17:50 - It's not actually sending any
code or anything like that.
17:53 - So hopefully that actually works.
17:55 - It seems to have worked.
17:57 - I think that I need to do
-v just to see if it did.
18:01 - Oh wait, no. Maybe it's debug.
18:03 - I can't see that it's actually working.
18:07 - So maybe it is --debug. Let's see.
18:10 - Ah, there we go.
18:11 - Just so you can actually
see what it's doing.
18:13 - So it says found uno on
port blah. It connected.
18:16 - The reset was complete.
It's flashing the code.
18:18 - And then we have a nice green status
18:21 - saying that it successfully completed.
18:23 - So now that we have Firmata
running on the device
18:25 - it's actually ready to start listening
18:27 - for any commands that come
in via that USB connection.
18:31 - Now that we have a five instance
18:34 - we want to create a board, right?
18:37 - We want to create this board instance
18:38 - so then we can start
sending stuff to the board
18:42 - and receiving stuff from the board.
18:45 - So I think we just need to do a new...
18:50 - Five.Board I think.
18:52 - Wow, this autocomplete is blowing my mind.
18:55 - I don't use Visual Studio Code very often
18:57 - but it is like super nice.
18:59 - Okay, so we have a new board.
19:01 - What that actually does is
19:03 - it just goes and looks
at all the serial ports,
19:05 - or the USB, I guess,
ports on your computer
19:08 - and it goes, "Are you an Arduino?
19:10 - "Are you an Arduino? Are you an Arduino?"
19:11 - So it's actually really awesome
19:13 - because it takes a lot of that stuff
19:15 - out of your responsibility to do.
19:18 - Then the board comes back as an object
19:21 - that you can listen to events on.
19:23 - Again, this is very similar to jQuery.
19:25 - So normally where you
would have document.ready,
19:29 - or document.onready, you can
actually do like board.onready,
19:32 - which is actually pretty chill.
19:34 - So I feel like, Dan,
you can totally do this.
19:38 - - [Dan] I'm following everything so far.
19:41 - The problem is if I touch the hardware
19:43 - it might spontaneously burst into flames.
19:45 - - (chuckles) I love it.
19:48 - Sometimes I have turned something
on and I've smelt burning
19:51 - or the breadboard is melting,
19:53 - but that's usually if I'm
doing something super dumb
19:55 - and it's not with the Arduino.
19:57 - So the Arduino is pretty safe.
20:00 - Ooh, I don't like tab four spaces
20:03 - so I'm just gonna do my space bar.
20:07 - Now that we have sort of
20:09 - attached a listener to the ready event,
20:11 - which basically says that
we've been able to guarantee
20:14 - that there's a good connection
happening with the Arduino,
20:17 - we just want to console.log
out that it's actually ready.
20:19 - So we can just write yay, I guess.
20:23 - Let's try and run this
20:24 - just before we get ahead of ourselves
20:26 - and start writing extra stuff.
20:29 - So I'm gonna do node art.js,
and let's see what happens.
20:35 - All right, it seems to have
found it. And then we got yay.
20:39 - So that's pretty cool.
20:41 - What Johnny-Five does too is
20:42 - it actually gives you a REPL,
20:45 - which is, I think, a read,
evaluate, print loop,
20:49 - which is really cool because
you can actually start
20:51 - looking at anything
that you create globally
20:54 - to be accessible in the REPL.
20:58 - So we're not really gonna use that today,
21:00 - but I just wanted to say that
it's a really nice feature.
21:02 - So by me writing this,
21:04 - that's actually the instance of the board.
21:06 - So you can see a whole
bunch of stuff comes out
21:08 - if you wanted to inspect that further.
21:10 - So to exit I'm just going to do--
21:12 - I'm just going to send the ctrl-c,
21:15 - the sigint twice, or the interrupt.
21:19 - I forget which one it is. So
yeah, we're gonna do that.
21:22 - Are there any questions so far?
21:24 - - [Dan] There might be
questions but actually
21:27 - everybody is saying it's really
easy in Visual Studio Code
21:29 - to change to two spaces.
21:31 - (laughter)
21:32 - Just in the bottom right.
21:34 - You should be aware that if
you ever mention anything
21:35 - about spaces versus tabs,
21:38 - the only thing anybody
discusses in the chat.
21:41 - - I should've actually remembered that
21:43 - because my stream is really similar.
21:45 - So what is the command?
21:48 - - People are saying it's
in the bottom right.
21:50 - - Oh, that's really easy.
21:53 - Indent using spaces, and then we want two.
21:57 - Wow.
21:59 - All you folks are the best.
22:01 - I figured that you might be
saying something like that.
22:03 - Okay, so we didn't do it for the default.
22:06 - Let's do indent using
spaces and let's do two.
22:09 - Yeah?
22:11 - Okay, so what happens if
I go to a new line? Yeah!
22:15 - Thanks everybody. This
is very, very helpful.
22:18 - I'm not going to start an editor
war or anything like that.
22:20 - I'll have to be really careful
about what I'm gonna say.
22:23 - Cool.
22:24 - We want to actually start
using the screen now
22:28 - because that's really only
thing that we're gonna do
22:31 - with using Johnny-Five,
22:34 - is to be able to use it to
speak with the screen directly.
22:37 - So we kind of have to go over
22:38 - a little bit of theory of
what we're doing today,
22:41 - but we also want to plug
in the screen as well.
22:43 - So I think we're actually gonna
start with the theory first.
22:47 - So let's do that.
22:51 - - [Dan] My face was just (mumbling).
22:52 - I'm like right over here. Hello!
22:55 - - So we have this here,
22:57 - but I sort of wanted to just start
22:59 - like a new section over here just for now.
23:02 - We wanted to create this
generative tile effect,
23:05 - so we want to sort of explain that first.
23:09 - Let's imagine that our screen is here,
23:12 - our little tiny OLED screen.
23:14 - And the maze before
looked really complicated
23:17 - if you're sort of not able to
break it up with your eyes.
23:20 - But what it really is is it's just a grid.
23:23 - So this is what we're
gonna be programming today.
23:25 - And this is not actually to scale
23:27 - of what the screen actually is,
23:29 - but it's just giving you an example of
23:32 - like a really small cutaway of the screen
23:36 - that we're going to be doing.
23:37 - In order to create this
generative art pattern
23:40 - we actually are just gonna
draw one of two things.
23:43 - So we're gonna generate a random number,
23:44 - and then depending on whether the number
23:47 - is more than .5 or not
23:49 - we're gonna draw a line that's facing--
23:53 - it's either pointing one way
or it's pointing the other.
23:55 - So we have one of two lines.
23:57 - So it's going to be either this line
23:59 - or it's going to be this line. That's it.
24:01 - So it's either gonna be leaning forward
24:02 - or it's gonna be leaning back.
24:04 - So for example if I was to
use my brain to do this,
24:07 - which is actually harder than it looks,
24:10 - we can just start sort of
generating these lines.
24:13 - But if we let the computer do it instead
24:16 - it's gonna be a lot quicker,
24:18 - and we might actually get
24:19 - some really nice effects out of it.
24:21 - So that's sort of how that
algorithm actually works.
24:23 - We just split the screen up into tiles
24:25 - and then we just figure out
24:28 - how to actually draw those lines
24:30 - by cutting up the screen into pieces.
24:32 - So hopefully that made sense.
24:35 - So the actual screen
itself that we're using,
24:39 - the dimensions are 128x64.
24:42 - So I want you to remember those dimensions
24:44 - because they're like
super, super important.
24:46 - And I was going to explain
how the screen actually works
24:50 - but I might just leave that until the end
24:52 - if anyone's got questions about it.
24:54 - But because I did write
the actual screen library
24:58 - I can actually explain to how it actually
25:00 - is able to take pixel
data and stuff like that.
25:02 - But for today maybe we'll
just keep going with that.
25:05 - Cool.
25:06 - The screen actually speaks
a protocol called I2C.
25:12 - It's actually, I think,
technically I squared C,
25:15 - but I always call it I2C
25:16 - because that's just how I read it.
25:18 - But it stands for, I think,
inter-integrated communication?
25:26 - I think Scanline is gonna
know the answer to this.
25:29 - So it's a way of communicating,
25:31 - and it's actually a really,
really cool protocol
25:35 - because it's very efficient.
25:36 - It doesn't take a lot of wires,
25:38 - and you get a lot of control
25:40 - over things like the clock
speed and things like that.
25:42 - So I'll try not to get
too deep in the weeds
25:45 - but it's really cool to kind of know
25:46 - how these devices actually work.
25:48 - So generally you have
two different devices.
25:53 - I'm just trying to make sure that
25:54 - you can actually all see this
25:55 - and I'm not going off
the edge of the screen.
25:58 - We have our Arduino here.
26:00 - Our Arduino is known as the master.
26:02 - And then we have our screen.
26:05 - - [Dan] It's inter-integrated circuit bus.
26:07 - - Thank you.
26:08 - I always think it's connection
instead of circuit bus.
26:12 - So yeah, okay,
inter-integrated circuit bus,
26:14 - which is really cool.
26:16 - So we have our Arduino,
and we have our screen.
26:19 - The Arduino is known, in this I2C
26:21 - or I squared C relationship as the master
26:24 - and then the screen is
known in this relationship
26:27 - as the slave.
26:28 - I don't really like the whole
master/slave kind of metaphor
26:33 - so I like to call this Arduino the captain
26:37 - and the screen is the sailor.
26:39 - So we're gonna go with them today
26:41 - because I think it's a
really cute metaphor.
26:44 - So the captain is responsible for like,
26:46 - you know, sending out commands
to the crew on the ship,
26:51 - and the sailor always
takes that direction.
26:53 - So generally the captain is
controlling the whole scenario
26:56 - and the sailor is just
carrying out those commands.
26:59 - So that's like the best
way to think of it.
27:01 - And so in I2C we have our
regular power and ground
27:06 - but we also have two other connections.
27:09 - This is getting a little bit small,
27:10 - but one is the clock,
27:12 - and the other one is
just like the data line.
27:15 - So we have only one
line that we need to use
27:18 - in order to send the beeps and boops back.
27:21 - By the beeps and boops I guess I mean
27:22 - the zeros and the ones.
27:24 - And then the clock is
an external wire as well
27:29 - because then we can actually,
27:31 - without getting too much
into how this stuff works,
27:33 - we can use the clock
externally to actually specify
27:37 - the speed at which we
want everything to run.
27:38 - I2C is actually a really cool protocol.
27:41 - If you want to read more about
it you can definitely look
27:43 - on sites like SparkFun and other sites
27:46 - because it's super, super cool.
27:47 - So that's what we're gonna be using today
27:49 - in order for our Arduino to
actually talk to that screen.
27:54 - You don't see a lot of that
when I'm actually coding
27:57 - because I've heavily abstracted that,
27:59 - but that's the gist of
what's going on today.
28:03 - I guess that's what we're going to do,
28:05 - so let's get going.
28:08 - - [Dan] I think we have a camera--
28:09 - We hit 30 minutes.
- Oh no!
28:11 - - [Dan] No that's good. Good timing.
28:13 - I think I heard a click.
Maybe it was this one.
28:15 - - Oh. It was probably the overhead one.
28:16 - So that worked out well.
28:21 - - [Dan] So that should be
back. And that one now...
28:24 - Because we turned them
all on at the same time.
28:27 - - I can't believe that
was half an hour already.
28:29 - That went so fast. So
how are we doing on time?
28:33 - - [Dan] Oh, we're fine on time.
28:34 - I think there was a question
that I noted at one point.
28:37 - This might have been
from a little while ago.
28:40 - Apologies for this mess up in momentum.
28:43 - How much space--
28:45 - Well actually I think I might know
28:46 - the answer to this
question, I'm realizing.
28:47 - But how much space does Firmata
and all these JS libraries
28:50 - take up on the Arduino?
28:51 - Is that a concern to keep in mind?
28:53 - - Yeah, that's a really good question.
28:54 - I know that the StandardFirmata
C++ script for the Arduino
28:58 - is a pretty big one.
29:00 - Whenever new features want
to be added to Firmata
29:03 - sometimes you have to
take other features away.
29:06 - So that's why we have StandardFirmata,
29:07 - and then sometimes we have other versions
29:09 - that have extra things put in there.
29:13 - This is an Arduino Uno so it
has 328 bytes, or kilobytes
29:19 - of memory, so there's not a lot on there.
29:22 - And so it does kind of mean that--
29:25 - Sorry, 32 kilobytes I believe. Yes.
29:28 - So it's got 32 kilobytes.
29:30 - That means that you
don't have a lot of room.
29:33 - The good news is that the
JavaScript that we're running
29:35 - never actually ends up on the device,
29:36 - so if the Firmata script
that we flashed before
29:40 - successfully flashed to the device
29:41 - then we know it's gonna fit.
29:43 - Obviously that matters when
it comes to things like
29:47 - if you have variables,
or it's trying to buffer
29:50 - a lot of the messages coming
through on the device.
29:52 - You might actually see
those difficulties as well.
29:54 - So when you're running your program
29:55 - you also want to leave enough room
29:57 - or have enough good data structures
30:00 - in order to deal with the fact that
30:01 - there are a lot of messages coming through
30:03 - that the device has to
hold onto for a little bit.
30:05 - So as usual with everything
it's always a balance.
30:09 - But that's a really good question.
30:10 - And just to remind you,
30:11 - the JavaScript never
actually goes to the device.
30:13 - The JavaScript is simply just
30:15 - controlling the device instead.
30:17 - The JavaScript is just
sending opcodes to the device
30:21 - so that we don't have to
worry about that huge overhead
30:23 - of how big JavaScript
would be to send to it.
30:28 - So the next thing we want to do actually
30:29 - is to plug the OLED screen in
30:32 - and start interacting with it.
30:34 - If I have the overhead camera, sorry.
30:37 - We have a bunch of different wires.
30:39 - Actually let's go back and
look at the documentation
30:41 - for oled-js.
30:45 - I tried to document
this as good as possible
30:48 - but I'm always looking for
pull requests or issues
30:51 - if you find anything confusing.
30:53 - The SDL that's mentioned just over here,
30:58 - that's actually the data line,
30:59 - and then you've got SCL,
which is the clock line.
31:02 - I've been pretty clear about
if you're using an Arduino Uno
31:05 - then these are the pins to use for each.
31:07 - The reset has to go to four.
31:10 - And then you've got your
standard power and ground,
31:12 - which I usually don't
document just because
31:15 - it's pretty easy to do a
one for one with those.
31:17 - I will actually show that being plugged in
31:19 - before we actually get started.
31:22 - I have my Arduino here.
31:23 - And I have power, ground,
reset, clock, and data line.
31:28 - So that ends up being a total
of five different cables.
31:32 - But it is actually still pretty efficient.
31:34 - It is still, I think,
less cables than SPI.
31:38 - And that's just because the reset line--
31:41 - - [Dan] I hate to pause you, but...
31:42 - - [Suz] Yeah, yeah. Go for it.
31:43 - - [Dan] I'm getting a
message that maybe we could
31:46 - focus this camera a little better.
31:47 - - [Suz] Yeah, let's do that.
31:49 - - [Dan] I don't know
what I'm doing at all.
31:51 - - [Suz] It looks a little...
31:53 - - [Dan] That's zoom.
That's changing the zoom.
31:55 - - Maybe it's on the rim?
- Oh yeah, probably.
31:59 - Oh, that's focus. Look at that.
32:01 - - [Suz] No, wait, is that still...
32:03 - - Yeah, no, I'm focusing, definitely.
32:04 - It's just because I'm shaking it.
32:06 - I'm looking at the
Arduino, the word Arduino.
32:08 - - [Suz] Yeah, that looks way better.
32:09 - - [Dan] I think that's pretty good.
32:12 - - [Suz] That is definitely better.
32:13 - - [Dan] I'm probably not gonna
be able to get it perfect
32:15 - but hopefully that's fine.
32:16 - - [Suz] Feel free to tell
Dan to tweak it as well
32:19 - if you need to.
32:21 - This is kind of-- The reset
wire is not joined to the others
32:25 - so it's usually the easiest
one for me to connect first.
32:27 - It says in the documentation that reset
32:29 - has to go to pin four on the Arduino.
32:31 - So you might not be able
to actually see this
32:33 - but there is a little tiny four numeral
32:35 - next to that little pin input.
32:38 - And so I'm literally just
trying to connect each one
32:41 - to the correct one as
listed in my documentation.
32:45 - I like to use red for
power and black for ground.
32:48 - So I'm going to go ahead and plug them in
32:49 - because they're always like super easy,
32:52 - especially if you've done
this a couple of times before.
32:55 - I just plugged them into ground and power.
32:58 - That just leaves our
clock and our data line.
33:03 - Our data line is actually the brown cable.
33:05 - Our clock is the white.
33:06 - Again, you can make up
whatever convention you want,
33:08 - but I like to use white for clock
33:11 - because it's just my own
little personal thing
33:14 - that I'll always remember.
33:15 - So the clock I believe needs to be pin A5,
33:18 - which is an analog pin.
33:20 - And then A4 is the data line.
33:24 - The reason why we use A4 and A5 is because
33:27 - most Arduino boards come with
33:29 - I2C capabilities built in
33:32 - but they use very
specific pins to do that.
33:34 - So for an Arduino Uno, the
A4 and A5 pins are your
33:38 - clock and data lines for
this particular board.
33:42 - It's not arbitrary.
33:43 - This is how the Arduino
board has been setup.
33:47 - The reset pin was just an
arbitrary choice by me.
33:53 - We have a lot of this code here already.
33:55 - We just need to write
these middle bits here.
33:58 - And so we have to pass some options in
34:00 - to tell it what size screen we have.
34:02 - We have to give it the
address of the device itself,
34:05 - which can vary per screen.
34:07 - And then we also have
to create a new instance
34:10 - of our OLED screen.
34:12 - We're just gonna go ahead
and do that in the code now
34:14 - in order to start connecting to it.
34:17 - - [Dan] You're still
in the overhead camera.
34:19 - - No! Thank you.
(laughter)
34:21 - So I'm gonna show you that again.
34:24 - It's just these lines here.
34:26 - We're just gonna be doing
something very similar to this
34:28 - but I'm just gonna walk you through it
34:29 - instead of copying and pasting.
34:32 - Let's create some options.
34:34 - And by the way, this is old documentation
34:36 - that's not using the
most modern JavaScript,
34:39 - so we're still sort of using
var and things like that.
34:42 - It's up to you if you
want to pull request that.
34:44 - I have just left it old so that
34:46 - people don't necessarily
have to use transpilers
34:49 - to be able to use those new features.
34:50 - But it depends on what
version of Node they're using.
34:53 - I think most people are on
version four at least now,
34:55 - so that's good.
34:58 - I need to pass in options
so that my screen library
35:02 - knows how to control this device.
35:04 - Before I actually put that
in I'm gonna establish
35:09 - some constant variables
that are not gonna change.
35:14 - I'm gonna call that width.
35:16 - The width is going to be 128 pixels.
35:19 - And the height is going-- whoops--
35:22 - is going to be 64.
35:25 - Yes, that's right.
35:26 - So we've gotta be divisible by eight.
35:29 - That's gonna be the size of the screen.
35:31 - I also want to establish
something ahead of time
35:34 - called the tileSize,
and that's just because
35:36 - we want to be able to change this
35:38 - and have the algorithm
automatically adjust itself
35:42 - based on how big or small
we want those tiles.
35:45 - We're gonna start with a tile size of four
35:48 - and we're gonna see how we go.
35:49 - And then I can change that to let you know
35:50 - how that works later on.
35:52 - I keep trying to do my Vim shortcuts.
35:55 - It's like a, what's it
called, like a muscle memory.
36:00 - Now we can actually set
the width to be width.
36:03 - And a shorthand of doing that
in more modern JavaScript
36:07 - is just to list these.
36:11 - Then we need the address.
36:13 - So I know for a fact that the address
36:15 - of this particular board is 3D.
36:19 - You can think of an address
36:20 - as an I2C device's phone number.
36:25 - So you can have multiple I2C devices
36:29 - connected to those analog pins,
36:33 - and if they all have
different phone numbers--
36:35 - It's not always the case.
36:36 - Sometimes it's annoyingly not that case.
36:38 - But you can have let's say five
different screens connected
36:41 - and if they all have a different
address, or phone number,
36:43 - you can actually kind of control them all
36:45 - without having to pull wires
out and swap them around
36:50 - and stuff like that.
36:51 - Just think of the address
as us being very specific
36:54 - about which device we want to speak to
36:56 - that's connected to that I2C bus.
37:00 - Now that we have the address--
37:02 - And I don't know why, but
I'm a semicolon person,
37:05 - so I'm gonna put some semicolons in.
37:07 - Once we have the options and we've said--
37:09 - This is the minimum set of
properties you need to give
37:14 - to get this going.
37:15 - We're going to create a new variable,
37:16 - and let's call it screen,
because that's actually easier
37:18 - to reason about than OLED.
37:20 - We're gonna create a new OLED screen.
37:24 - I think that's what I
called my dependency.
37:27 - And let's pass in the options.
37:29 - Cool.
37:31 - I kinda want to run that just to make sure
37:32 - I haven't completely screwed something up.
37:37 - Okay, cool.
37:39 - It couldn't get the height,
37:41 - and I actually know why that is.
37:43 - I'm not actually using
my library properly.
37:45 - So we do actually need to pass in
37:46 - a couple of other arguments.
37:48 - We need to pass in our board
and our five instances.
37:51 - Because this is a separate
thing to Johnny-Five
37:53 - we actually need to be able
to give it those things
37:56 - so that it can actually use
Johnny-Five to communicate.
37:58 - So we're gonna go back to the code
38:00 - and we will pass that in.
38:02 - I think it was board and then five.
38:04 - I hope that's right, but we'll just guess.
38:07 - There's nothing like reading
your own documentation.
38:13 - I'm glad I tested that
because it definitely blew up.
38:15 - It looks like this is okay.
38:17 - I'm just gonna stop this process,
and then we'll keep going.
38:21 - We definitely want to
38:24 - make sure, first, that
the screen is working
38:26 - but then we want to clear the screen
38:27 - because sometimes when
you start this screen up
38:29 - it can have sort of some snow on it,
38:32 - kind of like an old school analog TV.
38:35 - I guess you still get snow,
it's just digital snow now,
38:38 - on digital TVs.
38:40 - One of the first commands that
I want to show you for this
38:44 - is screen.clearDisplay().
38:51 - And then we can call screen.update()
38:54 - just to make sure that actually
gets sent to the device.
38:58 - Now if we run this,
39:01 - let's see if we can cross to the camera.
39:03 - All I'm really doing is
running the same file
39:05 - but if you look at the camera
you might be able to see
39:07 - there's a little bit of
snow on there right now.
39:12 - You can sort of see that
it at least did a thing,
39:16 - and then it's very, very subtle.
39:18 - We might actually have to
turn one of the lights out.
39:22 - - [Dan] Let's take a minute here
39:24 - to see if we can make
this a little better.
39:28 - - We didn't really get a
chance to test this bit.
39:31 - - What I think might
actually work better--
39:34 - somebody gave this
suggestion-- is I don't know.
39:39 - I'll just call this scene two.
39:41 - Sorry everybody, you're
seeing nothing now.
39:45 - What I'm gonna do is add--
Oh, how do I do this?
39:50 - Video capture device, I think.
39:53 - And then add existing-- nope.
39:56 - Add black magic device.
39:59 - I'm gonna just put all these
in. The laptop is there.
40:03 - I'm just gonna rebuild a new...
40:05 - - [Suz] Oh, I'm sorry.
40:07 - - No no no no. Don't be
sorry, this is exciting.
40:08 - I've never used this before.
40:10 - This is worth trying to figure out.
40:13 - We can always make an edited
version of this tutorial,
40:16 - which I often do.
40:17 - - [Dan] So green Canon.
Look how huge we are.
40:20 - - Hello!
40:23 - - Now if I make this-- Ah!
40:26 - - I feel like I'm getting vertigo.
40:28 - - People actually can see all
these changes in real time.
40:31 - - Yeah, that's what I love.
40:32 - I've had to fix my stream
midstream before too
40:34 - and it's always very interesting.
40:35 - - So let's do this, and what
I thought I would try to do--
40:38 - When it changes what I'm
gonna do is I'm gonna add now
40:43 - black magic device overhead.
40:46 - - [Suz] Oh, we're gonna combine them.
40:48 - - [Dan] I think what might make more sense
40:49 - is just to put this over here.
40:51 - - Well you could crop that.
- And then crop it.
40:53 - So how do I crop it?
40:54 - - You hold down alt.
40:57 - I can hold it down for you. (chuckles)
40:59 - And then you just drag the handle.
41:00 - - So let's go over to here.
- Hot tip right there.
41:04 - - Is this good?
- Yeah, that's good.
41:06 - - And then crop this. Oops, ah!
41:08 - We can crop this.
41:10 - - Yeah, this is how I setup my stream.
41:11 - - So take off the alt, right?
41:14 - Now I can zoom this out.
41:19 - I don't know if it looks
better if it's kind of like...
41:24 - I have a problem. I can sit
here and do this for hours.
41:27 - I'm not going to.
41:28 - If it's just kinda here
then maybe that looks good.
41:30 - Now the question is, it's swaying.
41:33 - So is that because this?
41:35 - - It might be.
41:36 - I hope we're not making anyone sick.
41:38 - - Do I have any sandbags?
- We might.
41:40 - - [Dan] At one point I
had sandbags up here.
41:44 - - But if we bring up the
code they can't see that...
41:48 - - [Dan] Oh no, you're gonna have
41:49 - to still switch back and forth.
41:51 - So what you would do is still switch here,
41:53 - would turn that off.
41:55 - And then I would have to map--
41:57 - I don't have that mapped to a key.
41:59 - I could do it though. Why not?
42:02 - We're good. We have time.
42:05 - This is probably people's
favorite part of the stream.
42:08 - - It's the wizard behind
the curtain kind of thing.
42:12 - I love it.
42:13 - - I'm gonna name this to Noopkat.
42:16 - And then what I have to do unfortunately
42:18 - is go into settings,
42:22 - hot keys, and I'm looking
for switch to scene.
42:29 - Put a number in there. Five, great.
42:32 - Now try hitting one.
42:37 - Let me lock all these things.
- I think I messed it up.
42:41 - - Try hitting one.
42:43 - Now try hitting five.
42:44 - - I love that I shrink!
42:45 - I think that's a feature, not a bug.
42:48 - - Okay, we'll keep that.
42:49 - Now the question is, maybe
if I put something heavy...
42:52 - How about a book of random numbers?
42:55 - - Oh, I love that book.
42:56 - - Will this stop it from--
43:00 - It's still kind of swaying.
43:01 - I might not be able to
do anything too much.
43:04 - - Hopefully though you can see
it a little bit better now.
43:07 - - And now the question is
are we turning out lights,
43:10 - or zooming in more?
43:12 - But focus. Can I make this focus?
43:15 - People are telling me to focus
this. It's still a little...
43:18 - - Let me put something on the screen,
43:22 - because that was gonna
be next thing anyway.
43:23 - - Oh yeah, put something on the screen.
43:24 - - Screen.drawLine, I'm
gonna do zero, zero--
43:30 - this is spoiler alert-- 60. Yeah.
43:37 - And then I don't know, 12.
43:42 - So let's see if the line draws
43:44 - just so that we can actually
focus on it I guess.
43:46 - - This wire is kind of in the foreground.
43:48 - - Oh, is it in the way?
43:55 - - I'm learning how to...
44:00 - - The line didn't draw.
44:01 - Oh, ha ha ha.
44:04 - I forgot a variable because
I don't know my own library.
44:08 - - Oh, I see blinking
lights. That's exciting.
44:10 - It's in front of us.
- Oh, there's a line.
44:12 - - So you can totally see
that. That's viewable.
44:15 - - So you might see that the frame rate,
44:17 - the refresh rate of the
camera and everything
44:20 - might do a ripply thing.
44:21 - There's literally nothing we
can do about that. I'm sorry.
44:24 - I have tried to solve that
on my own stream before
44:27 - and I wasn't able to.
44:29 - You get the gist.
44:30 - - I haven't looked at the chat.
44:32 - Probably people are commenting how
44:34 - I've done this all incorrectly
and it's still swaying.
44:36 - I feel somehow the swaying isn't as bad
44:38 - if it's not the full
screen, for some reason,
44:40 - because at least you're grounded.
44:42 - - I just love that I shrink.
44:45 - - Five, right?
- Yeah.
44:48 - - I love that I shrink.
44:50 - - We can also make it
fade in between the two
44:51 - but I don't want (mumbling).
44:53 - I'm gonna come back over here.
44:55 - Make the webcam for the
hardware small. Okay, no.
45:00 - We just have to remember
45:02 - when you want people to see the code...
45:04 - - To hit that? Okay.
45:06 - That makes sense.
45:08 - That was kind of the next
bit that I was gonna do.
45:10 - I was gonna draw a line.
45:16 - It's not gonna matter when
we do the generative art
45:18 - what orientation the screen is.
45:20 - But what I did was
45:21 - think of this screen as being upside down.
45:24 - If we go back to the code
really quick I'll show you that.
45:27 - What we essentially did was
45:30 - we took the method drawLine.
45:32 - The first argument is
the starting x position.
45:36 - The next argument is
the starting y position.
45:39 - And then we've got the end
x and the end y position.
45:44 - So it's basically starting at
the top corner of the screen
45:46 - and then it's drawing across
almost halfway horizontally
45:51 - and it's going down just
a little tiny bit as well.
45:54 - So hopefully that makes sense.
45:56 - I'll just pop that up for
you to see one more time.
45:58 - Again that screen is upside down,
46:00 - but that's sort of the
general gist of how it is.
46:04 - You know what I'm gonna do actually?
46:05 - I'm gonna flip this, because you can.
46:10 - - [Dan] Oh, I have it locked.
46:12 - - But I think I can do transform, rotate.
46:16 - - [Dan] Oh, it did anyway.
46:18 - - Yeah, I was a cheater.
46:20 - Cool, so that actually makes more sense.
46:22 - Let me know if that angle is better.
46:24 - I know some people get a little bit sick
46:26 - depending on whether
it's upside down or not.
46:28 - But that is what you would expect there.
46:30 - It's starting at 0,0
46:32 - and it's going across a little
bit and down a little bit.
46:34 - The one here is just what
color I actually wanna do.
46:38 - And by color I mean
the pixel is either on,
46:40 - and it's shining in a white sort of color,
46:43 - or it's just off.
46:44 - So you can actually
draw with negative color
46:47 - and you can just clear
out parts of the pixels,
46:48 - which is kind of cool.
46:50 - Just remember that one
always means the pixel is on.
46:54 - I do actually want to change
this library quite a bit
46:56 - because I did write it a few years ago.
46:58 - I would love to have an enum
46:59 - so it would be something like
Colors.White or something,
47:02 - or Color.On, Pixel.On, Pixel.Off
or something like that.
47:06 - I think that would be
a lot more effective.
47:08 - But I'm interested to
hear people's thoughts.
47:10 - Again, raise an issue
47:11 - if you think that you
have an idea on that.
47:14 - Another thing that I can do
is I can basically tell it
47:16 - not to update the screen immediately.
47:18 - So we can do a lot of manipulations first
47:20 - and then update the screen all at once.
47:22 - We're probably gonna do that today
47:24 - because there's no point in
drawing each line individually
47:26 - and kind of bottlenecking
the USB connection.
47:29 - So another one we can do is we can say
47:32 - false for don't draw immediately, I guess.
47:36 - - [Dan] We can't see the code
right now, just so you know.
47:38 - - Ugh. I keep doing that.
47:41 - - [Dan] You have to click back in.
47:43 - Like the mouse has to be
clicked back in the...
47:47 - Yeah.
- Thank you.
47:49 - No, wait. What did I do?
47:53 - Did I break it?
- I don't think so.
47:56 - You can always manually
mouse to the other view.
48:00 - As long as you click...
48:02 - It should be that you just have to click
48:03 - into this one right here.
48:05 - Now the hotkey should work.
48:07 - - Oh, okay. Nice.
48:08 - I have a slightly
different setup with OBS,
48:11 - so I think that's why I'm being thrown.
48:13 - Cool.
48:14 - I can show you that method as well,
48:18 - I think, drawLine.
48:21 - Yep, draws a one pixel wide line.
48:25 - And yeah, you can say whether or not
48:26 - the screen immediately
updates with the result.
48:29 - So cool.
48:30 - So this is literally all we
need in our repertoire today
48:34 - in order to start doing
this generative art.
48:36 - So everything else is kind
of more like the algorithm,
48:39 - but this is definitely the fastest way
48:41 - to get started with
drawing on an OLED screen.
48:43 - I'll show you that one more
time. There's the line there.
48:47 - We're just gonna be drawing
lines in different patterns
48:49 - across invisible tiles on this screen.
48:53 - So we have our tileSize, and
we have our width and height
48:56 - so we're gonna be making
heavy use of these.
48:59 - We're gonna be creating just
a couple of helper functions
49:01 - as well in order to start drawing this.
49:04 - The first function I want
is to create a vector,
49:10 - because we want a lot of things
49:11 - where we're dealing with XY coordinates
49:13 - and you don't really
get that in JavaScript.
49:14 - I know that in Processing
and things like that
49:16 - you get these really nice
classes, like vectors,
49:20 - but we don't get that in JavaScript.
49:24 - I'm not even gonna pass in any
arguments to set the x and y.
49:27 - I'm literally just going
to return an object
49:29 - that has the x and the y set as zero.
49:32 - I'm just gonna go super simple today.
49:34 - I know this is not necessarily
how you would always do it,
49:37 - but this is definitely gonna suffice
49:39 - just so that we don't
lose time on creating this
49:42 - very fancy, very correct vector.
49:46 - Now we can actually just get these objects
49:47 - that we can get the x and y values out of.
49:51 - A vector is really just trying to denote
49:53 - a point on the screen itself.
49:58 - The next thing we want
is to create a tile.
50:01 - So we need to be able to actually draw
50:04 - either a forward line
or a leaning back line,
50:07 - so that's the next thing
that we're gonna do as well.
50:09 - I think we might write
this first, I guess.
50:12 - We're gonna have another function
50:13 - that does a bunch of loops
as well to draw the tiles.
50:16 - So maybe we can just do createArt
50:19 - because that's actually
what we're gonna create.
50:23 - These are just my placeholder functions,
50:25 - and then we can actually
get started writing them.
50:28 - As you saw on the whiteboard,
50:29 - all we really want to do is kind of
50:31 - split up each screen into tiles
50:33 - and then generate a random number
50:35 - and based on that we're either gonna do
50:37 - the leaning line or the falling back line.
50:41 - Maybe we can just write the
function to create the tile.
50:46 - What do we need to do with this?
50:47 - We need to have a random number, right?
50:50 - I'm just gonna call it num.
50:52 - And then in JavaScript I think
we can just do Math.random().
50:55 - And we're just gonna take
the Math.random() number
50:59 - because we can use this
pretty, pretty easily.
51:02 - We need to now create
one of two conditions.
51:06 - We can just create our empty
conditions at this point.
51:09 - I'm just really saying if
num is greater than 0.5
51:16 - we want to do a thing.
51:19 - Otherwise we want to do another thing.
51:21 - Let's just set up this rule.
51:23 - It's gonna be super arbitrary
51:24 - because it doesn't really
matter which one you start with.
51:27 - Maybe this one is leaning...
51:32 - Let's do leaning forward,
51:34 - because that's a little easier
to do for the first time.
51:37 - And then this else statement
is going to be falling back.
51:42 - I guess that's the easiest way to do it.
51:43 - Like how do you describe
this, Dan, normally?
51:45 - Like leaning forward, falling back.
51:47 - - [Dan] I think forward
slash and backslash.
51:50 - - Forward slash and backslash. Wow.
51:53 - (laughter)
51:54 - That's actually really simple. Thank you.
51:56 - - [Dan] Because that's
what it was originally was.
51:58 - - Oh, like on the Commodore 64.
52:00 - - [Dan] Just printing those characters,
52:01 - forward slash and backslash.
52:03 - - Of course. That's so smart.
52:04 - My first computer was a Commodore 64
52:05 - so this is making me feel super nostalgic.
52:07 - I never actually did this
on the Commodore 64 though.
52:10 - It might have been because
I didn't have the Internet
52:11 - so I didn't really find any
of these treasures online.
52:16 - - [Dan] There's a whole book just about
52:18 - basically this one line
of code called 10 PRINT,
52:20 - which is written by a
bunch of different authors.
52:22 - I've talked about it. I
don't think I have it here.
52:23 - - I want to buy it.
52:25 - - [Dan] I have a copy of it downstairs.
52:27 - - This sounds so awesome.
This sounds so cool.
52:32 - What we want to do is we want
to establish two vectors.
52:35 - We want to have the start
of the line, an x and y,
52:38 - and then the end of the line, an x and y.
52:41 - I'm gonna create some new variables.
52:43 - We're gonna have start--
No wait, lineStart.
52:47 - Let's call it lineStart.
52:51 - I don't know what I'm doing.
52:52 - lineStart equals, and then
we're gonna create a new vector.
52:56 - We're gonna just manipulate
the x and y afterwards.
53:01 - Now I just need an end line.
53:04 - Wait, lineStart. I'm getting so confused.
53:06 - lineEnd.
53:08 - We should have just copy-pasted
this line, but it's cool.
53:11 - It's good to type stuff
so you remember it.
53:14 - Now we just need to basically say,
53:16 - like we can set these new values
53:18 - depending on what the random number was,
53:21 - and then we're gonna
actually draw the line.
53:25 - I just realized that I'll
actually need an argument in here.
53:30 - We're going to need to
pass in the screen instance
53:35 - so that we can actually
call a method on it.
53:39 - You'll see why we need that later on
53:40 - but I'm just going to
do it so I don't forget.
53:44 - If the number is more than
0.5 we want to lean forward.
53:50 - That means that our tileSize
53:54 - is going to need to come
into play with this.
53:57 - I think we actually need some
more variables to pass in
54:01 - because the tile needs to know
54:03 - exactly what tile it's actually on.
54:06 - I'm gonna pass in a tile vector.
54:09 - We're actually gonna make use
of vectors later on as well.
54:12 - Now we can do something like
54:13 - just pretend that that vector exists.
54:15 - We can have tile.x and tile.y.
54:17 - And I want you to think
of the tile x and tile y
54:20 - as the top left corner of
that tile, where it starts.
54:24 - So that kind of gives us our anchorage,
54:26 - and from there we can
start generating lines.
54:28 - This is probably not
the correct way to do it
54:33 - as in the book,
54:33 - but this is sort of how
I'm gonna figure it out.
54:36 - I'm interested to hear how you do it,
54:37 - but this is how I'm gonna do it.
54:39 - I feel like it's still
gonna work out okay.
54:41 - - [Dan] There's no such thing
54:42 - as the correct way to do anything.
54:43 - - I feel like that too.
54:44 - Sorry if I knocked the mic
for everyone back home.
54:47 - I feel like that too
54:48 - but I feel like I'm one of the only people
54:50 - and I feel like I'm from outer space
54:51 - when I'm like, "It doesn't really matter."
54:54 - But let me know if you
think it doesn't matter too,
54:55 - because I think it's really fun
54:57 - when you stop worrying about that stuff.
55:01 - If we have our lineStart
and our lineEnd vectors,
55:03 - we have our tile start.
55:05 - This is where we sort of
want to start doing it.
55:08 - We want to maybe setup
our lineStart first.
55:13 - Our lineStart x coordinate,
if it's leaning forward,
55:18 - then it's gonna be right in the corner.
55:23 - I don't know how else to explain that,
55:25 - but it's gonna be right at the start
55:26 - because the forward slash
is sort of like, yeah.
55:31 - The horizontal starts that way.
55:33 - So if you have a look at it this way
55:37 - you can kind of see that it's
starting right in the corner.
55:41 - We can just set that to be the tile.x
55:44 - because that's the
starting point of the tile.
55:47 - Then we want lineStart.y.
55:54 - Okay, so this one is different this time
55:56 - because it's not the y right at the top.
55:59 - It's actually the y right at the bottom.
56:02 - We're gonna do tile.y,
56:05 - but then we're gonna add
the size of the tile.
56:07 - So if the tile is a square
56:09 - then we're gonna add the tile size.
56:11 - We're gonna do tileSize.
56:14 - And then because the x
and the y of the tile,
56:18 - because it actually denotes
the start of the tile,
56:21 - it's actually inclusive,
56:23 - so I think we also need to take one away
56:26 - just to balance that.
56:28 - But we'll see if that's correct,
56:30 - because I did this like
weeks ago in Australia
56:33 - after I saw Tim Holman's talk.
56:36 - So we're just gonna make this up.
56:39 - Now we need to do the lineEnd coordinates.
56:43 - The lineEnd is gonna be like right towards
56:46 - the end of the actual tile itself
56:48 - because it's leaning forward.
56:50 - So we can just do tile.x,
56:53 - and then we're gonna plus
the tileSize I guess,
56:56 - and then we're gonna
do negative one as well
56:57 - because it's inclusive.
57:00 - Stop me if this is wrong,
because I trust you, Dan.
57:03 - You're much better at
this stuff than I am.
57:06 - And then the lineEnd is
just gonna be the tile.y
57:11 - because it's sort of ending
at the top of the y, I guess.
57:17 - What am I doing?
57:19 - lineEnd equals tile.y, that should be it.
57:21 - - [Dan] Yes.
57:23 - - I'm hearing encouraging
things from Dan right now.
57:26 - (laughter)
57:28 - That's the leaning forward.
Let's do the leaning back.
57:30 - The lineStart.x, because it's--
57:35 - Let's actually just
draw a little line here
57:37 - so that we can kind of reference it.
57:41 - The lineStart x, it's still starting
57:47 - right at the start of the tile again,
57:50 - so I feel like we can just do this.
57:53 - I feel like the lineStart
x is always like there.
57:57 - So we can draw the line from bottom up,
58:00 - but we're just gonna do the line
58:01 - from the top down, I guess.
58:03 - So there are different ways to do this
58:05 - because you can draw the line
in backwards orders, I guess.
58:09 - The lineStart.y
58:13 - is going to be just the tile.y, right,
58:18 - because it's right at the top.
58:20 - It's the start of the tile.
58:21 - Oop, we lost the camera.
- That's the overhead camera.
58:24 - I think, right?
- Yeah, it is,
58:25 - but I feel like all the
others are gonna go now.
58:34 - - [Dan] It's how I tell time.
58:36 - That's how I know a
half an hour as passed.
58:44 - - When did we start? We
started at like 2:45.
58:47 - - Yes.
- Yeah, it's been an hour.
58:49 - So it's gonna be a miracle
if we get this done.
58:51 - So lineEnd.x.
58:55 - If the line ends right at the far part
58:57 - because it's leaning back
59:00 - it's gonna be tile.x plus the tileSize.
59:05 - I feel like I'm just writing
59:06 - exactly the same code as the other one.
59:09 - - [Dan] It should be tile.x
plus tileSize minus 1, right,
59:13 - because you're starting at the front?
59:14 - - Yeah, that's how I feel.
59:16 - It just feels so repetitive
59:18 - but there are super subtle
differences with it.
59:19 - - [Dan] I'm behind.
59:21 - What I'm seeing...
59:27 - Is this falling back?
- Yeah, it's falling back.
59:30 - - That's good.
- That's what I thought. Okay.
59:32 - This stuff melts my brain.
This is why I can't do it.
59:35 - It's so funny because hardware
is safe and comforting to me
59:38 - and this stuff is really
scary because it's so much--
59:41 - It's so much math and I'm really bad,
59:43 - actually, at spatial math.
59:44 - I just don't have a lot
of good spatial awareness
59:46 - in my brain in general.
59:47 - It's just not how my brain thinks,
59:49 - so I really have to put in
a lot of effort for this.
59:52 - It's gonna be at the bottom
59:54 - so we need to plus the tileSize
again, minus one, inclusive.
59:59 - And then this is minus one.
60:03 - - [Dan] Yes.
60:05 - Yep, yep, yep. That's right.
60:08 - - Okay.
60:11 - Now that we have...
60:14 - (sighs) Now that we have that
60:16 - it's the biggest anticlimax ever.
60:19 - It's just gonna be lineStart--
60:23 - I never do autocomplete
60:24 - because I'm not used to having it in Vim.
60:26 - lineStart.y.
60:29 - And then it's gonna be line...
60:30 - This is gonna go on another line.
60:32 - lineEnd.x and then lineEnd.y,
60:36 - and then the color is one,
60:39 - and then we don't want it
to automatically update.
60:42 - Because we're gonna be
drawing so many lines.
60:44 - We don't want to hit this device.
60:45 - And sometimes it can actually
overwhelm the devices.
60:47 - It doesn't break the device
60:50 - but it does kind of just bottleneck it
60:53 - and then sometimes the messages
just don't get through.
60:55 - That's a limitation of using
this way of doing things.
60:58 - If you did this directly
on the device in C++
60:59 - you wouldn't actually see that issue.
61:04 - So that's a tile.
61:06 - Can we draw the tiles real quick
61:09 - so that this stream doesn't go forever?
61:13 - We want to create the art.
61:14 - Again, this is a function
outside of our screen
61:17 - so we're gonna just pass
in screen. Not screem.
61:25 - This is where we do our classic
generative art algorithm,
61:30 - which is a nested for loop.
61:33 - We're going to do let i equals zero,
61:40 - and then i is less than
the width of the screen,
61:45 - and then i is going to be
plus equals to the tileSize.
61:50 - So it's gonna jump in tile widths.
61:54 - Hopefully that makes sense.
61:56 - And again Dan will stop me
61:57 - if I'm going completely off the rails.
62:00 - - [Dan] I'm 20 seconds behind.
62:01 - I'm listening to your audio.
I'm seeing the screen here.
62:04 - - So this is gonna look super similar.
62:07 - It's just like j is less than the height
62:09 - because now we're gonna go tile downwards.
62:12 - So then we're going to do j
plus equals the tileSize again.
62:17 - So we're really just staggering this thing
62:20 - so it just can do all the tiles,
62:22 - stop when it gets to the end of the width,
62:24 - and then do the next row, I guess.
62:27 - So it's doing it row by row, I guess.
62:29 - Sort of. No, wait.
62:32 - Yes, it is.
62:35 - Now I think we can just call...
62:39 - Oh, we need new vectors.
62:41 - So we need to generate what
the tile start and end is.
62:46 - I'm gonna do tile equals new vector.
62:51 - I feel like this has
now become a speed code.
62:55 - Tile.x is equal to i.
63:02 - You can see that if I actually
had a proper vector function
63:05 - I could just pass in the x y.
63:06 - So I realize that that was something that
63:09 - wasn't so great when I created it,
63:11 - but this is still pretty
easy to actually fix.
63:14 - So tile.x equals i, tile.y equals j.
63:19 - Now we just need to create a tile.
63:22 - And then we pass in-- What did we need?
63:27 - We needed tile and screen. Oh, that's it.
63:31 - That's easy.
63:33 - So we create the tile.
63:35 - We pass in our tile object,
63:37 - and then we pass in the screen instance
63:39 - so we can actually call things on it.
63:43 - Is that it? That's it.
63:46 - After we've created that art...
63:51 - (laughter)
63:52 - After we've created the art
63:54 - we need to update the screen now.
63:57 - We've sort of manipulated
the screen's buffer,
64:00 - that's sort of what's
happening under the surface,
64:02 - it's like frame of pixels.
64:04 - So now we do screen.update()
64:07 - then we're just manually updating it,
64:09 - because when we were drawing our lines
64:11 - we were saying don't immediately update.
64:16 - So I think that's it.
64:17 - I have no idea what I'm doing,
64:18 - but I think this is coming out all right.
64:23 - We need to call these functions, clearly.
64:26 - So I think we can just call them in here.
64:29 - I'm gonna just-- Whoops.
64:31 - This is a new keyboard
64:32 - so I'm still actually figuring
out this keyboard too.
64:37 - It's just createArt, right?
Can I just create the art?
64:43 - I think I can just create the art.
64:46 - Is that it? Yeah.
64:50 - So we wrote a lot of code
before we actually ran this.
64:54 - Let's see if that actually runs.
65:00 - I am just doing this.
65:01 - I might actually just clear
the screen. There we go.
65:03 - I'm just running the same file,
65:04 - and then let's see if it actually works.
65:11 - Oh my God. It actually
worked the first go.
65:14 - I'm gonna make this bigger
65:15 - because our tileSize
is really, really tiny.
65:18 - - [Dan] Cool.
65:19 - I'm sorry, I just want to come in.
65:21 - - Yeah, come in and look.
65:22 - - Oh wow.
65:24 - Oh, you can see it there. It's
just doing the scan thing.
65:27 - But I think people can see it.
65:29 - - Let's just change the
tileSize really quick.
65:33 - See, Dan? It's not scary at all.
65:34 - - No. I have so many questions.
65:36 - - It's exactly the same code.
65:38 - So the tileSize-- Whoops.
What happened there?
65:41 - - [Dan] I've never seen that.
65:43 - I'm trying to get out of
the way. Now I'm over here.
65:46 - - Let's do a new tileSize.
65:48 - I'm just gonna run that again.
65:51 - I'm so excited that it worked!
65:54 - Yeah!
- Yeah!
65:56 - - Do you wanna make it even bigger?
65:59 - - No, I think that's good.
66:01 - The one thing you can do
that's kind of interesting--
66:04 - This is just-- It's
just rendering it once?
66:09 - - So we've just kind of
computed the whole screen
66:11 - and then it was like, "Here
you go. Here's all the pixels.
66:15 - "Can you just display the
entire screen for me?"
66:17 - - If you wanted to animate something...
66:20 - Are you continuously
sending the same image?
66:23 - - Not right now.
66:24 - - You could do that though.
66:25 - - You could put this in a game loop.
66:26 - And you might have a
pretty limited frame rate
66:29 - just because of this USB bottleneck.
66:32 - But if you wrote the native C++
with the same kind of thing,
66:36 - yeah, you could do an animated thing.
66:38 - - Something that's interesting
66:39 - that you can do with the 10 PRINT design
66:41 - is you can just change the probability.
66:43 - So right now it's 50%
this way versus that way.
66:47 - We can do it right now.
66:49 - You can actually, since
this is all JavaScript
66:51 - and connected you can
actually make an interface
66:53 - so you're altering the
probability in real time.
66:56 - Even right now if you just go to...
66:58 - I'm standing in the way, unfortunately.
67:01 - But if you go to where
num is greater than .5.
67:04 - - If you just change that to...
67:06 - - Like .2 or something.
- Oh, I'm so excited.
67:08 - Okay. See, this is where I
have no idea what I'm doing.
67:14 - So does that mean it will
have more forward ones?
67:16 - - Yeah, see?
67:18 - It has a particular quality
67:20 - in that it's much rarer
for it to go the other day.
67:22 - - Today I learned. That's really cool.
67:25 - This seems so simple but to me
67:27 - I've just never explored
this stuff before.
67:30 - - I'm looking at...
67:32 - - Breathing on your mic.
- Breathing on your mic.
67:34 - (laughter)
67:35 - That was me breathing. It's me probably.
67:38 - - It might be me, I don't know,
67:39 - because I was really
excited that it was working.
67:43 - - That is so...
67:44 - I don't know how well that--
67:46 - I can see it here on the
monitor so it's clearly working,
67:49 - but there's something that's
so beautiful about it here.
67:51 - - It's really nice, isn't it?
67:53 - - But this is only--
67:55 - So one of the questions
actually that's in the chat
67:57 - that came up earlier.
67:58 - You did allude to this before.
68:01 - But it seems to me that
68:02 - this is really wonderful for
learning, and figuring out,
68:05 - and making something
happen, but it feels...
68:07 - I guess you could have it
wireless, you were saying.
68:09 - What if you wanted to embed
this in a physical installation?
68:12 - It seems unwieldy to
have the whole laptop.
68:14 - - Yeah, that makes sense.
68:16 - - So I guess your choices
would be wireless,
68:17 - or something like a Raspberry Pi?
68:18 - - Exactly. A Raspberry
Pi is perfect for that
68:20 - if you wanted to still
keep the same JavaScript.
68:23 - You can also use a really cool
device called the Tessel 2
68:28 - because it runs JavaScript natively on it.
68:31 - So you still have the same
really nice abstractions
68:33 - but you can still use Johnny-Five with it.
68:36 - This isn't always the last step
68:39 - of when you're making a cool art thing.
68:41 - But as you saw, it was so
quick to prototype with.
68:44 - And maybe some people are
more comfortable with C++.
68:46 - That's probably you. I'm not.
68:49 - (chuckles)
68:51 - - In other words,
68:52 - if you're trying to prototype
your idea and figure it out
68:55 - and you can do it all the
way through in JavaScript.
68:57 - Then when you're done you could be like,
68:58 - well now I don't have to
debug it, and figure it out,
69:01 - and choose, make all my design choices.
69:03 - Now I just have the job of porting it.
69:04 - - Yeah. It feels like
you're writing it twice
69:06 - but what's actually happening is
69:07 - you're just testing the idea out.
69:09 - Because if it didn't really
come out that good then
69:11 - you didn't sit there waiting
for it to flash every time.
69:15 - You can use whatever IDE you want
69:17 - without having to get PlatformIO working.
69:20 - It's a low-friction way of doing it.
69:22 - - I do that all the time with--
69:24 - Even though now I do a lot of my tutorials
69:25 - in p5 and in JavaScript,
I'm still sort of like,
69:27 - natively my brain thinks
Java and Processing.
69:31 - If it's me by myself
trying to try out an idea,
69:33 - even if I know it needs
to be deployed to the web,
69:36 - I'll just do it in Processing first
69:37 - because I know I can test
and iterate in a fluid way
69:40 - and then figure out the conversion later.
69:42 - - Which is so funny, because
I feel like we're opposite.
69:45 - I think you're an absolute wizard
69:46 - because you're really good at Processing,
69:48 - and you probably are like,
"What is this JavaScript?"
69:53 - Although I've seen you, you're
very good at JavaScript too
69:55 - because you're writing
neural networks in it
69:56 - and stuff like that.
69:57 - But I do watch people
use Cinder and Processing
70:00 - and it's just my natural grab bag.
70:02 - My natural grab bag is
like Canvas and JavaScript,
70:05 - or Node.js and Johnny-Five
or something like that.
70:08 - - There's another question here which is,
70:11 - I don't know if you
know the answer to this,
70:12 - but if I'm using an Arduino Nano
70:15 - does the StandardFirmata still work?
70:17 - - Yeah, that's a really good question.
70:19 - It does still work.
70:21 - So you might have actually noticed
70:23 - that that screen updates really slowly.
70:25 - The reason for that is on an Arduino Uno
70:28 - I could get away with sending--
70:29 - So I'm just sending really,
really small packets at a time
70:33 - so that the device
doesn't get overwhelmed.
70:35 - A lot of people have said to me
70:36 - you should make oled-js faster,
70:38 - but what's different about an Arduino Nano
70:40 - is that it emulates its USB connection.
70:43 - So its using some of
its programming, memory,
70:45 - and like time and cycles
to keep that open.
70:49 - So if I send too much it
literally just kind of craps out
70:51 - and is like, "I'm not doing anything."
70:53 - So I have to send this
in a very careful way.
70:56 - I have done some experiments
70:57 - and I've been able to speed
it up by like 10 times
70:59 - but it does make it on
the cusp of ruining a Nano
71:03 - or something like that.
71:04 - But yes, the answer is yes you can,
71:06 - and that's because I
made my library so small
71:07 - that it does actually work.
71:09 - - One question that I have.
71:10 - To me it was interesting to watch this
71:12 - because I'm so used to
doing the programming
71:14 - to generate a design like this.
71:16 - But I'm not used to doing the programming
71:19 - to put the design like this in something
71:21 - that isn't HTML5 Canvas, or
Processing, or higher level API.
71:26 - In theory though it would be possible.
71:28 - I don't know whether it would
be worth doing this or not,
71:30 - but with a display like this
71:31 - there's no reason why
you couldn't do drawing
71:34 - to a canvas object with a higher level API
71:37 - and then read the pixels of
that canvas one at a time
71:39 - and transfer them here.
71:41 - Yes? Did you already do this?
71:44 - - (chuckles) Maybe.
71:46 - - You would need some kind of
71:47 - phantom browser canvasing thing.
71:51 - Even with like WebSockets
71:52 - you can have it running in the browser,
71:54 - and then just send the
data from the canvas
71:56 - to Node and send it here.
71:58 - You can draw on it
72:00 - and then have the drawing appear here.
72:04 - We have time to do that, right?
72:06 - - I wish we had time to do this.
72:08 - I did have a working demo on
my laptop of this working,
72:11 - so I'm like, "No!"
72:13 - I have no idea if that
link is gonna go anywhere.
72:15 - Okay, one sec.
72:18 - So I do have a couple examples
72:19 - I want to show you really
quick, if that's okay.
72:24 - It's gonna take like one sec.
72:28 - I have this thing that uses Canvas
72:30 - where you can make your
own fonts for this screen.
72:33 - And it's actually using Canvas.
72:35 - So this is giving you the preview.
72:36 - - I'm gonna come stand over here
72:37 - just to be out of the
way a bit for right now.
72:40 - - What this does is you can put in
72:41 - the font that you want to use.
72:42 - You can do the size.
72:44 - And as you change that it's changing--
72:47 - And this is literally a canvas.
72:49 - And then you change the
threshold for what you want
72:51 - the kind of the smooth stuff to be.
72:55 - And when you're happy with it,
72:56 - it goes through every
pixel in the canvas file
72:59 - and it gives you a font file to download.
73:01 - And then that converts it
into a frame buffer JSON file
73:04 - that's compatible with my library.
73:06 - The next thing I want to show
you is actually really cool.
73:08 - It's way cooler so I
saved it until the end.
73:11 - But my friend hxlnt. Do you know hxlnt?
73:14 - - I don't know if I do.
- She's amazing.
73:19 - Oh, she doesn't have it at quick.
73:23 - It's called oledjs-designer.
73:25 - So she took my library.
73:27 - - Oh, wow. This is exactly
what I was just talking about.
73:30 - - Yes. And you're gonna
lose it when you see this.
73:33 - It's a thing where you can draw,
73:35 - and you can download the image buffer.
73:37 - That's like really, really small.
73:39 - You can download the image buffer.
73:40 - But what I did recently
73:42 - that I had on my laptop
that I can't show you
73:43 - is I had Johnny-Five running
in the browser and it sent it.
73:47 - - [Dan] Like with WebSockets?
73:48 - - No no no. In the browser, with WebUSB.
73:52 - - Oh. I didn't know you can do that.
73:53 - - Well it's really hacky.
73:54 - It's not actually officially supported,
73:57 - because you can't send
a sigint in the browser
73:59 - so you have to put it in
a WebWorker and then...
74:02 - But you can also do it as a WebSocket.
74:05 - So I can send that to my
Node process and update it.
74:08 - That's what she wanted
to eventually do with it.
74:11 - I've basically been forking this project
74:14 - to my own GitHub and
messing around with it.
74:16 - I've gotten it working with WebUSB,
74:19 - with WiFi, via MQTT, and
then also with WebSockets.
74:23 - - That is wonderful.
74:24 - - I wish I could show you,
74:26 - but hxlint is awesome
because she made this.
74:28 - - Well, the two things.
74:29 - One is you just have to come
back and do another tutorial.
74:31 - - That would be great.
74:32 - - Or if you're doing
follow up with any of this,
74:35 - like coding with it
74:36 - or trying more stuff
on your Twitch channel
74:38 - I can point people towards that.
74:40 - - Yeah, totally.
74:41 - - For me it's like I would love the idea
74:43 - of using the p5 drawing API to say like,
74:47 - ellipse, line, rectangle, create it.
74:49 - Obviously you're limited.
It's black and white.
74:51 - - It's very small.
- It's 128x64.
74:54 - - It's so much smaller than even that.
74:56 - - But it'd be interesting
to think about how you...
74:59 - You had to jump through so many hoops
75:02 - just to like draw the line.
75:04 - And so to be able to have something
75:06 - that gives you some of that.
75:10 - Just to allow you to
explore and experiment more.
75:13 - - Exactly.
75:14 - And I wanted to really quickly
show you the Floyd-Steinberg.
75:18 - I had to make all of these other modules
75:20 - just to get this to work.
75:22 - So I have this thing called pngtolcd,
75:25 - and you give it a PNG.
75:27 - It uses Floyd-Steinberg,
which I had to implement.
75:30 - - Coding challenge number,
insert number into my voice.
75:33 - - Does that look like
Floyd-Steinberg to you?
75:35 - Did I implement the algorithm correctly?
75:37 - - It looks like it.
75:38 - - So you can basically give it
75:40 - the exact size image you want
75:42 - and then it will actually
give you the oled-js
75:46 - native buffer that oled-js uses.
75:49 - And then you can actually
do non-dithered as well.
75:51 - And then I have a thing saying,
75:53 - "It's not always gonna be perfect."
75:56 - - A couple other things.
75:58 - One is people are really--
75:59 - This is slightly off topic now.
76:01 - People really want to
know about the keyboard.
76:02 - - Okay, let's do that.
76:03 - - You're gonna have to unplug it probably
76:05 - because we can use the overhead camera.
76:07 - Or you can hold it up.
76:08 - I can hold it for you if
you want to explain it.
76:09 - - Maybe we can...
76:13 - This is the GK64.
76:16 - I tweeted photos of it yesterday,
76:18 - so if you go on my
Twitter account, Noopkat.
76:22 - It is the kit that came
with the wooden case
76:25 - so it's really hard to find this.
76:26 - - Oh, you had to build this?
76:28 - - It came assembled, but
it came from Massdrop
76:32 - and they have limited runs,
76:34 - and I've been waiting like
six months for this thing.
76:36 - But it is awesome. It's
really, really beautiful.
76:38 - Go to my Twitter account,
twitter.com/noopkat.
76:41 - And I put a custom set
of key caps on it too.
76:45 - So I did actually get these custom.
76:48 - They're just a limited batch
76:50 - bespoke artisanal hipster key caps.
76:53 - But I love this so much because--
76:56 - Check out my tweets
76:57 - because I just couldn't
stop going on about it
76:58 - and it has like 700 likes or something.
77:01 - But it's a really, really nice keyboard
77:02 - and I've been typing on it this whole time
77:03 - and it is just an absolute
pleasure to type on.
77:07 - - I love the sound of it.
77:09 - First of all, my keyboard
I've been saying,
77:11 - this laptop, the E key barely works.
77:15 - And also I really...
77:17 - - I want to show you this actually.
77:20 - So it has these lighting effects.
77:24 - It's not stepped like that.
77:26 - That's just the camera
making it look flickery.
77:28 - But it's really nice.
77:30 - - I'm checking here to see if
there are any more questions.
77:33 - Any hardware list to be able
77:35 - to follow up with your livestream?
77:38 - I'm not sure I understand that question.
77:44 - If I were to rephrase that question,
77:46 - what's the kind of stuff
that you typically do
77:48 - on your livestream on Sundays?
77:50 - Is it like this? Are you
working on your own projects?
77:53 - - Well sometimes I'm
literally working on oled-js.
77:56 - Like I've worked on this before.
77:58 - I get pull requests on it. I get issues.
78:00 - I've been meaning to refactor
this and modernize it
78:03 - because I wrote it like
three or fours years ago.
78:05 - I've learned a lot about
JavaScript since then,
78:08 - and just like hardware APIs.
78:11 - I just generally work on
my own open source stuff.
78:14 - Something that I work on a lot,
78:16 - and I've been working
on this a ton recently,
78:19 - is avrgirl-arduino, which is
what firmata-party is using
78:22 - to flash the code.
78:24 - And Arduino actually uses this
in their Chrome OS editor.
78:28 - So Arduino is using it,
which is terrifying to me,
78:32 - so I try and keep it up to date.
78:33 - So that's the kind of
stuff that I work on.
78:35 - Most of the time it's open source.
78:37 - Sometimes I'll just play with stuff.
78:39 - - There's a question about the keyboard.
78:41 - Can you control the lights
of the keyboard in software?
78:45 - - Yes.
78:45 - - Is there an API to it
that you can actually like
78:48 - programmatically control it?
78:50 - - I think there probably would be.
78:51 - I really want to write a driver
for it in JavaScript now,
78:53 - but that's besides the point.
78:56 - See how I'm hitting that there
78:58 - and there's different programs?
79:01 - So I can cycle through them
but you have a lot more control
79:04 - when you use the Windows app.
79:06 - - I feel like I have to
turn the lights out in here.
79:08 - - Just to have a disco. (chuckles)
79:09 - We have like a good 15
minutes, 10 minutes,
79:12 - before we should shut down,
79:14 - so I'm just curious to
turn out these lights.
79:16 - - And I promise it's really smooth.
79:18 - It's just that refresh rate is...
79:19 - - The green screen is gonna go away.
79:22 - - It's still nice.
79:24 - So wait.
79:26 - - [Dan] This is ridiculous
that I'm doing this.
79:27 - - [Suz] There's these effects you can do
79:29 - such as when I hit a light it ripples.
79:31 - But let me actually turn this back on.
79:34 - So there's all these
different color settings,
79:35 - and then there's the cycling rainbows.
79:39 - Which is so nice!
79:41 - You can fully control this
79:42 - with the actual programming software,
79:46 - but it does come with
these pre-built ones.
79:48 - So you can actually do
that if you really want to.
79:52 - But I like the pre-built ones so far.
79:53 - I got this yesterday so I
haven't really programmed it yet.
79:56 - I'm so glad everyone's excited about it.
79:58 - It was so nice to type on
80:00 - because I'm just used to
mechanical keyboards now
80:01 - so I brought my own.
80:04 - - I think this is an
interesting-- I saw this kind of--
80:06 - This is a question from Mitch in the chat.
80:11 - I saw this discussion, and
this kind of discussion
80:13 - comes up all the time, I
notice, when I'm livestreaming.
80:15 - I turn on the chat and
people are discussing
80:17 - the differences between
different languages.
80:19 - But the question is how does
JavaScript improve Arduino?
80:23 - I guess I think it's an
interesting question.
80:26 - That's not necessarily the
goal of what you're doing,
80:29 - to improve the Arduino.
80:30 - It's to just have different
pathways into doing that,
80:34 - into doing the same thing.
80:35 - - Yeah. I actually wrote a
magazine article about this
80:38 - but it's not out yet so I
can't tell you about it.
80:41 - But it's coming out soon.
80:42 - Just keep an eye on my Twitter.
80:44 - Essentially the only thing that
80:46 - I think JavaScript adds to this,
80:48 - because there's obviously drawbacks to it,
80:50 - is the accessibility of hardware.
80:52 - Did you feel less intimidated as a result
80:56 - of just seeing what happened today?
80:57 - - Yes.
80:59 - I mean, yes and no.
81:00 - To me, one thing that helped me,
81:02 - it's just the fact that
you were kind of using it
81:06 - to then draw to a screen.
81:08 - So I'm like oh, safe happy place.
81:09 - Draw the graphics somewhere else.
81:11 - So that I, I liked that,
81:13 - whereas I might, if this were more about
81:16 - controlling a servo motor or something.
81:18 - But still, I can see the
value of being able to--
81:22 - One of the things I love about this
81:24 - is the fact that you're doing
all this stuff with Node.
81:26 - For me what I see, what I use Node for,
81:28 - often I see students at ITP using Node for
81:30 - is this glue that binds
everything together.
81:32 - So once I'm in Node it's like,
81:34 - oh, I could thereta.js
natural language processing
81:39 - Node package.
81:40 - As opposed to if you're just on Arduino,
81:43 - maybe I'm comfortable enough in C++
81:46 - to write a for loop to do
forward and backslashes,
81:48 - like to then reach and talk to anything
81:51 - and use any other packages
is pretty, I think, exciting.
81:55 - If I wanted to generate poetry on this
81:57 - suddenly I have Node
packages to work with that.
81:58 - - That is an excellent point.
82:00 - What you're saying is that
82:02 - instead of having to just rely on
82:03 - the raw processing power
that the Arduino has,
82:06 - or the fact that it doesn't have WiFi,
82:08 - if you want to have a really
cheap, really low power device,
82:12 - you can just be controlling it with
82:14 - a slightly smarter computer instead
82:17 - and then you have access
to all this stuff.
82:18 - That's a really good point,
82:19 - because I can't remember the last time
82:21 - somebody ran a neural
network on an Arduino.
82:24 - - You're right.
82:25 - But yes, that's the thing.
82:26 - Ultimately there's a
lot of limitations here
82:29 - and there's a lot of--
I hate to use this word,
82:31 - but wasted energy in the fact that there's
82:33 - this whole computer here.
82:35 - Whereas you could just write the algorithm
82:37 - to generate this pattern
just on the Arduino itself.
82:40 - But in terms of learning
about how this stuff works,
82:43 - in terms of reaching out and
82:45 - talking to all sorts of other things,
82:47 - to be able to have an interface.
82:48 - Now it's possible that we
can have a browser instance
82:51 - with an interface that controls
everything that's happening.
82:54 - So many exciting possibilities.
82:55 - - I'm really glad you brought that up
82:57 - because for me it was usually
just about accessibility,
82:59 - but I never thought about using it
83:00 - as a more powerful processor.
83:03 - - I don't know how annoying
this is gonna be to you
83:05 - but this was requested, to
read some random numbers.
83:10 - - I can do that.
83:11 - - You don't have to read very many,
83:13 - and you can pick whatever you want.
83:16 - (laughter)
83:18 - - I love this.
83:19 - I can't do as good of a job Jabrils did.
83:22 - He nailed it.
83:26 - I'll try. I will try.
83:28 - Table of random digits.
83:30 - - Just in case there's any
really exciting last questions.
83:37 - - Table of random digits, page 247.
83:42 - 63056
83:45 - 10872
83:48 - 34173
83:51 - 34711
83:53 - 13630
83:56 - 31285
83:59 - 03621
84:02 - 93974.
84:06 - - [Dan] That was perfect.
84:10 - I think that's pretty good for today.
84:12 - I'm just checking to make sure there's--
84:13 - Okay, blah blah, lots of
interesting discussions.
84:16 - Let me come back over here for a second.
84:19 - What I will hope to probably do,
84:21 - I will confer with Mathblank
here in the Slack channel
84:25 - who does video editing.
84:26 - A couple things.
84:28 - One is I know that Suz
84:30 - takes a lot of care to do captioning
84:33 - for all of your livestreams.
84:34 - And this is something that I haven't--
84:37 - I mean, I've thought about,
and I aspire to do more of,
84:39 - and I have had a lot of really
84:41 - wonderful, generous
contributions from the community.
84:44 - YouTube has the tool where
you can just log right in
84:46 - and contribute captions,
84:48 - or also the auto-generated captions.
84:50 - But especially, I think you
mentioned this on Twitter,
84:52 - especially with technical stuff.
84:54 - What you use here is
the service called Rev.
84:57 - So as an experiment for me
to learn about this service
84:59 - and see if it's feasible for
me to use it going forward
85:02 - I'm going to caption
this livestream with Rev.
85:04 - - Thank you.
85:07 - - Then also I will confer with Mathblank,
85:09 - but sometimes what I often do
85:11 - is take this longer livestream,
85:13 - which has been maybe about two hours?
85:16 - - Sorry.
- No no no no.
85:17 - When did we start? 2:45.
85:18 - Yeah, no, and hour and a half.
85:20 - That's good. Livestreams are long.
85:23 - - Yeah, they are. They're super long.
85:24 - And we might edit this down to
like a 30 to 45 minute little
85:26 - just sort of the nuts and bolts
of this particular project.
85:32 - So that might be coming.
85:34 - But if you are watching this right now
85:36 - because you're watching this live,
85:37 - or if you're somehow still watching
85:38 - this full livestream as an archive,
85:40 - please check this video's description
85:43 - to find out about Noopkat's
Twitch channel, Twitter,
85:49 - her website, all that sort of stuff.
85:52 - You can see it here. I'm
standing in front of it.
85:54 - We were talking about
maybe I will come and
85:56 - do a little fun thing
on the Twitch livestream
85:58 - as like an exchange.
- That would be awesome!
86:01 - - That's what people do in this world of
86:03 - YouTube, Twitch things, I guess.
86:07 - I'm trying to think if
there's anything else
86:08 - that I'm forgetting that's important.
86:10 - Thank you so much for
coming and doing this.
86:11 - - Thanks for having me.
86:12 - - I did kind of have--
86:13 - My goal for when I started
to do this channel,
86:16 - started to get some subscribers,
86:19 - was to have more and more guests
86:21 - to try to show the range of
things that people are doing,
86:24 - and range of voices and ideas
86:26 - besides my own little
weird thing that I do.
86:29 - So I've had a whole bunch
in the last few weeks,
86:31 - which has been really exciting,
86:32 - and I hope to continue doing more of this.
86:34 - So if anybody has suggestions
for guests and other people
86:39 - to invite to the Coding Train
86:41 - you can reach me @shiffman on Twitter.
86:43 - If you have other questions
about this project...
86:46 - - Yeah, hit me up.
86:47 - - @noopkat, which is
spelled N-O-O-P-K-A-T.
86:51 - - You can call me Noopkat
if you really want to.
86:55 - - That's that.
86:56 - I'm gonna do the awkward
thing, which is just--
86:59 - Do you have a good system
for ending a livestream?
87:02 - - Yeah, I usually just wave.
87:04 - But I also want to say
87:06 - this was like a big dream come true for me
87:08 - to be like in your
computer, on your stream.
87:12 - I was so excited last night
87:14 - that I dreamed that we went upstate
87:16 - and then we did this on a
hill with a big projector
87:19 - and it was like live in person
87:21 - but it was also streamed somehow
87:22 - in the middle of the wilderness.
87:24 - So I just want to say thanks.
This was really awesome.
87:25 - - You're welcome. Thank you so--
87:26 - I do have this sort of dream/fear of doing
87:32 - some Coding Train episodes
in front of a live audience.
87:34 - - Like live live?
- Live live.
87:36 - Someday.
87:37 - People are saying all sorts
of nice things in the chat.
87:39 - Lots of clap emojis.
87:42 - Okay, so we'll wave.
87:44 - Jabrils would say, "Always
remember to feed your curiosity,"
87:48 - but I'm not gonna-- I don't
want to steal his tagline.
87:50 - That's just a shoutout to Jabrils.
87:53 - I need a tagline I feel like.
87:54 - - I don't have one either. I just wave.
87:56 - - Yeah, wave. We're gonna do that.
87:57 - So we're gonna wave,
87:59 - and I'm gonna hit stop
streaming in three, two, one.