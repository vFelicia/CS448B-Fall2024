00:02 - OK, so I'm back here, and
I'm talking about variables,
00:05 - I hope, if I can keep my brain
working and churning and making
00:09 - sense with the language and the
speaking thing this will work.
00:13 - OK, so what did we-- we looked
at in the previous video,
00:15 - we made this kind of big leap
in our programming lives, right?
00:19 - We established the fact that
there is a flow to a program.
00:23 - What is that flow?
00:24 - Well, there's, at least for
p5.js which is the environment
00:28 - that I'm looking
at in these videos,
00:30 - the flow is defined by two
functions, setup function--
00:34 - which happens once
and only once--
00:36 - draw function which loops
over and over again.
00:39 - Typically, a thing that
you might do in Setup
00:41 - is create your canvas.
00:42 - That happens just once
when the program starts.
00:44 - Typically, what you might do
with draw-- which loops over
00:47 - and over again-- is draw stuff.
00:48 - And we establish the fact that
if, instead of using a number,
00:54 - a hard-coded number,
we put in a variable--
00:59 - a word that stands
in for a number--
01:02 - then each time draw executes,
if that number changes,
01:06 - something different
might happen.
01:07 - And that's how animation
happens on the screen.
01:11 - The ellipse is drawn
where the mouse is.
01:13 - Then the mouse moves, and
it's drawn where the mouse is.
01:14 - Then the mouse moves.
01:15 - So this was an
exciting first step
01:17 - into the world of variables,
but here's the thing.
01:22 - There's going to be
a lot more that you
01:24 - want to do besides just
move things with the mouse.
01:27 - And even if there's
other built-in variables,
01:29 - like you could know how many
times this draw executed.
01:32 - There's a built in
variable called FrameCount.
01:34 - But ultimately,
what you will need
01:37 - is your own variables,
variables that you make up,
01:40 - that you define, that you
bring into this world.
01:42 - You're going to bring
variables into this world,
01:45 - and that's going to open
up a lot of possibilities
01:47 - that you didn't have before.
01:49 - So, for example,
right, this circle
01:54 - is moving across the screen
according to the mouse.
01:57 - What if you want
that circle, like,
01:58 - I'm not even touching the mouse.
02:00 - I'm not even touching it.
02:00 - I just opened my
program and that circle
02:02 - just moves on its own.
02:03 - Magic, right?
02:04 - So this is our first step.
02:05 - This is what we want to do.
02:06 - Instead of using a built-in
variable, we want--
02:09 - I want to use our own variables.
02:11 - So how do we do that?
02:13 - So we need a couple steps.
02:16 - Step one is to
declare the variable.
02:21 - I have to declare.
02:22 - I declare.
02:22 - I do declare,
solemnly, on this day,
02:26 - the 3rd of September,
2015, that I declare
02:32 - that this variable will exist.
02:35 - Number two is, we
need to initialize.
02:39 - We need to say, a-ha.
02:41 - In addition to the fact that
I declare this variable,
02:43 - I will give it an initial value.
02:46 - And then the third step is--
02:48 - I guess this is optional
to use the variable,
02:50 - although it wouldn't
make a lot of sense
02:52 - to declare and initialize
a variable if you
02:54 - didn't intend to use it.
02:56 - So how do we do this?
02:58 - Declare is actually
something quite simple.
03:02 - All you have to do is
write the term var, V-A-R,
03:06 - which stands for variable.
03:07 - This is how you do
it in JavaScript.
03:09 - Other languages
it's different, var.
03:12 - So this means I am now
about to declare a variable.
03:16 - The next thing I have to do
is give that variable a name,
03:20 - and that name can be
absolutely anything I choose.
03:25 - Rainbow is a nice
name for a variable.
03:28 - But ultimately,
what you want to do
03:31 - is you probably name
it with something
03:34 - that is a term that is
associated with what you might
03:38 - intend the variable to do.
03:39 - So what I intend to do with
this variable that I'm declaring
03:43 - is use it as the x
position of this circle.
03:45 - So I might say circleX is
the name of my variable.
03:51 - I'm just going to
use the word circleX.
03:53 - And typically, I'm just
kind of being long-winded.
03:56 - You could even just name it x.
03:57 - There's a bunch of rules, like
you can't start a variable name
04:00 - with a number and you can't
use strange characters
04:02 - in a variable.
04:02 - But you'll sort of figure that
out through trial and error.
04:05 - Mostly, you just
want to use words
04:06 - and you can have any spaces.
04:08 - So declare and name.
04:11 - Our declare is saying
var and the name.
04:13 - So now I could say
circleX instead of mouseX.
04:21 - So actually X, that's
used, so I've done step 1
04:23 - and I've done step 3.
04:25 - Use the variable.
04:26 - But if you think about it,
I need a semicolon here.
04:28 - If you think about it, there's a
huge missing piece here, right?
04:31 - Because what's the
value of circleX?
04:34 - I mean, it could be anything.
04:37 - Right now, it's actually
technically in JavaScript,
04:40 - the value is undefined.
04:42 - I think I'm right about that.
04:43 - Someone will correct
me if I'm wrong,
04:44 - but it's undefined because I
never gave it an initial value.
04:47 - This is important.
04:48 - It's not going to be able
to draw a circleX anywhere
04:49 - unless we give it
an initial value.
04:51 - And so I could
right here in setup,
04:54 - I could say circleX equals 50.
04:57 - So this is giving
it, initializing it.
05:00 - And look at this statement.
05:01 - This is called, this is
something totally new.
05:04 - The only thing, if you've only
been watching these videos
05:07 - and this is all you've
picked up in programming,
05:09 - all we had were function calls,
createCanvas, background,
05:10 - ellipse.
05:11 - Now we have something new.
05:12 - This is what's known as
an assignment operation.
05:18 - We are assigning the value
50 to the variable circleX,
05:21 - and we would not have
been able to do this
05:23 - if we hadn't declared our
intention to use circleX.
05:26 - And notice our
declaration is at the top
05:28 - of our code and our
initialization is in Setup.
05:31 - The truth of the matter is, even
though I showed you as these,
05:34 - as two separate steps,
I'm kind of showing this
05:36 - to you because it's
kind of interesting.
05:38 - Like, look, that's
something else
05:39 - that you might do in Setup.
05:40 - At the beginning
of my program, I
05:42 - want to have this variable value
equal to some initial value.
05:45 - But the truth of the
matter is most of the time,
05:47 - and in all of the examples
you're going to see,
05:49 - step 1 and 2 will be combined.
05:51 - And so, I'm now going to
rewrite this chicken scratch
05:55 - sprawl as one line of code.
05:57 - So I can both declare and
initialize the variable
06:01 - instantly by saying var
circleX equals 50, OK?
06:08 - So we've done something.
06:11 - We've declared a variable,
saying var, given it the name.
06:14 - We've given an initial value.
06:15 - We're using it to stand in
for something in our code.
06:19 - Let's go take a look at this
actually work over here.
06:22 - OK, so here's a little program.
06:24 - If I run it, you can see
what exactly what we have.
06:26 - We have a ellipse being drawn
only ever at location 50,
06:31 - so it doesn't move.
06:32 - So now let's add that
stuff to our program.
06:34 - So at the top I'm going to say
var circleX, and by the way,
06:40 - you can declare--
06:41 - we're going to see later that
you can declare variables
06:43 - in other places.
06:45 - But for right now, I
think as a constraint,
06:48 - I would like to say
like all the variables,
06:50 - they all get
declared at the top.
06:52 - Let's just use that as
a constraint right now.
06:54 - Then, I'm going to give it
an initial value equal to 50.
06:58 - And right here, instead
of saying ellipse 50,
07:01 - I'm going to say
ellipse circleX.
07:03 - And I'm going to run it.
07:04 - Look at that.
07:05 - Same exact program, only instead
of just typing hard coding 50
07:11 - there, I have 50s up here.
07:12 - OK, now.
07:15 - Let's just prove that
this is actually working.
07:17 - I'm going to say 150,
and stop and start it.
07:20 - Look, that circle is
a little bit further.
07:22 - Now I'm going to
say 250, and look.
07:25 - That circle is even a
little bit further over.
07:27 - So whatever the
value of circleX is,
07:30 - that's where that
ellipse will be drawn.
07:32 - OK, so at the beginning
of this video--
07:34 - I didn't actually say this,
but the beginning this video
07:36 - in my mind was, I would like to
make that circle move by itself
07:41 - across the screen.
07:43 - You're watching
all these videos,
07:44 - and all you get is
a little circle that
07:46 - moves across the screen.
07:47 - But it'll lead, hopefully,
to bigger and better things.
07:50 - How are we going to do that?
07:52 - So let's come back
over here for a second.
07:54 - OK.
08:00 - What I want to do
is the following.
08:08 - I want the circle first to be
drawn at circleX equals 50.
08:16 - So remember, draw,
which is this function,
08:20 - is looping over and over again.
08:22 - It's over and over again.
08:23 - It happens once, it
happens another time,
08:25 - it happens another time.
08:26 - So first I want
to draw it at 50.
08:29 - Then, maybe, I want
to draw it at 51.
08:31 - The next time maybe I
want to draw it at 52.
08:33 - The next time I maybe
want to draw it at 53.
08:35 - Right?
08:36 - Each time draw loops--
08:38 - executes it again--
08:39 - I want the circle to
be drawn one pixel over
08:42 - from the previous time.
08:43 - So if you had to
write an instruction
08:46 - to do that, each time to
redraw, what would you say?
08:48 - You might say increment
circleX by one.
08:52 - At take 1, and 1 to circleX.
08:55 - You might say add 5 to circleX
and it'll move from 0 to 5,
08:58 - to 10, to 15, to 20.
08:59 - Right?
09:00 - So how do we write
that with code?
09:02 - Here is a way.
09:03 - Remember we had an assignment
operation? circleX equals 50.
09:08 - There's something
weird you can do.
09:10 - It's like the most common
thing in programming,
09:12 - but at first it might
seem a little weird.
09:14 - circleX equals circleX plus 1.
09:21 - Look at that statement.
09:23 - For a moment, you might
look at that and think,
09:25 - that's like a paradox.
09:28 - That's impossible.
09:29 - Like a number can't
equal itself plus 1.
09:31 - 5 does not equal 6.
09:33 - 7 does not equal 8.
09:34 - 20 does not equal 21.
09:36 - But this is not
what we're doing.
09:38 - I am not testing
for equality here.
09:41 - This is an assignment operation.
09:43 - What I'm saying is,
take circleX and set
09:46 - it equal to the value
of itself plus 1.
09:49 - So if circle x is equal to
50, 50 plus 1 equals 51.
09:53 - Now assign that
value to circleX.
09:55 - circleX is now 51.
09:57 - Now run through draw again.
09:59 - Take the value of circleX,
51, add 1 to it, 52.
10:03 - Assign that value
back to circleX.
10:05 - So in an assignment
operation, the right-hand side
10:09 - of the equation is always
evaluated and then assigned
10:12 - to the left-hand side.
10:14 - This is an
incrementation operation.
10:16 - We're just taking a
variable and adding 1 to it
10:19 - over and over and over
again because draw loops.
10:22 - So let's go over here, and see.
10:24 - First, let's start circleX at 0.
10:27 - So I just changed
circleX to starting at 0.
10:30 - And you can see,
there it is at 0,
10:32 - and now I'm going to
add that line of code.
10:34 - circleX equals circleX plus 1.
10:40 - Now the circleX
equals circleX plus 1.
10:42 - Every time through draw,
circleX will go up by 1.
10:47 - Yeah.
10:47 - It's moving.
10:51 - OK.
10:52 - So that really worked.
10:53 - So, you know, I know
this is like incredibly
10:55 - simplistic and basic
in terms of the result.
10:57 - But this is the foundation
upon which you can build
11:00 - lots of interesting things.
11:02 - Because there's a lot more math.
11:04 - There's a lot more ways you can
change a variable besides just
11:08 - adding 1 to it.
11:09 - There's a lot more places
you could put variables
11:11 - besides just in the x spot.
11:13 - So what I would say
to you right now is,
11:17 - why don't you try making a
variable for the y position?
11:21 - Why don't you try
making a variable
11:22 - for the size of the circle?
11:24 - Can you make the circle grow?
11:25 - Can you make it shrink?
11:27 - Can you make a color change?
11:28 - See if you can make
up more variables,
11:31 - declare more
variables at the top,
11:32 - and put them in different places
and try to do stuff to them.
11:35 - The truth of the
matter is, in order
11:37 - to get kind of more
interesting results,
11:39 - you're going to need
something that I'm
11:41 - going to talk about in a future
video, conditional logic.
11:44 - Because, you know, here's the
next logical thing, right?
11:47 - That circle-- in
the first place,
11:48 - let's make it go
a little faster.
11:50 - Like circleX equals
circleX plus 10.
11:52 - Like, oh, where's that circle?
11:54 - No, no, no, don't go away.
11:54 - Come back, come back,
back, back, back.
11:56 - It's never going to come back.
11:58 - But if I made some
conditional logic like,
12:00 - if it gets to the end, then turn
around and come back, you know,
12:03 - that's something I'm going
to do in a future video.
12:04 - But for now, just try to
add a bunch of variables
12:06 - and see what you can get.
12:09 - OK?
12:09 - That's good, but I'm going to--
12:11 - there's going to be
another video in a moment
12:13 - where I'm going to show you
a different way of organizing
12:15 - your variables.
12:16 - I'm a little skeptical about
whether this is a good idea
12:18 - or not, but I'm going to do it.
12:20 - OK, this was a 12-minute video
and I'm done recording it.