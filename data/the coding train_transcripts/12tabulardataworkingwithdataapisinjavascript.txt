00:00 - Hello, and welcome to the
second video in Module One
00:03 - of, Working With Data
& APIS in JavaScript.
00:06 - Now, we're going to do some
real stuff in this video.
00:08 - We did real stuff in
the previous video,
00:10 - but the previous video was just
about practicing with the fetch
00:12 - API and getting
some image files.
00:14 - We weren't really
working with data
00:16 - and we weren't doing
anything with that data yet.
00:18 - In this video, I
want to take a look
00:20 - at this idea of tabular data.
00:22 - There are a lot
of different file
00:24 - formats for storing data in a
table format, in tabular data.
00:28 - The one that I want to
look at in this video,
00:30 - and probably I would think is
the most common one, is CSV,
00:33 - or comma-separated value.
00:35 - Meaning the data, the
data in the table,
00:38 - is literally
separated by commas.
00:40 - The first line of text, after
all, this file, the CSV file,
00:43 - is ultimately just
a plain text file.
00:45 - It might function as
something like a hedero.
00:47 - So it would have the
names of the fields
00:50 - of data you're going to have.
00:51 - So it might have something
like, Item, comma, Cuteness.
00:55 - So you're going to have a table
of things and a cuteness score.
00:59 - So all the rest of the lines
would have the actual items
01:03 - and their cuteness scores.
01:04 - So you could have,
puppy, comma, 10.
01:08 - Kitten, comma, 10.
01:10 - Because we live in a world
where everything has a cuteness
01:12 - curve 10.
01:13 - But I want to do something
with real data, data that's
01:15 - out there in the
world, that I can
01:16 - grab with the fetch function,
load onto my web page,
01:19 - and do something with,
for example, graph.
01:21 - And so the data set that
I'm going to show you,
01:23 - it comes from NASA,
National Aeronautics
01:25 - and Space Administration, in
particular from the Goddard
01:28 - Institute for Space Studies.
01:29 - This CSV file includes the
combined global average land
01:35 - surface air and sea
surface water temperature
01:38 - from 1880 all the
way to present.
01:41 - It's stored in sort
of a funny way.
01:43 - The values that are
actually in the data set
01:46 - are the difference from
the mean temperature.
01:48 - And what do I mean by
the mean temperature?
01:50 - Well, I mean the
average temperature.
01:51 - Well, what's the
average temperature?
01:53 - Well, it so happens that
there is the average world
01:56 - temperature, as recorded
from 1951 to 1980, which also
02:01 - recorded an average by NASA,
the Earth Observatory website,
02:05 - at 14 degrees Celsius.
02:07 - So the data in this CSV file is
the difference from the mean,
02:12 - from 14 degrees Celsius,
from combined land surface
02:15 - air and sea surface water
temperature from 1880
02:19 - to present.
02:19 - So I want to load that CSV
file, parse it, graph it,
02:24 - and we're done.
02:25 - I'm going to do
this in two parts.
02:27 - The first part, that
you're watching right now,
02:29 - is just loading the
CSV file, parsing it.
02:31 - I want to be able
to see it, maybe
02:32 - as a console log in the browser,
in the Chrome Developer Tools.
02:36 - And then once I see I
have the data there,
02:39 - then I want to try to graph it.
02:40 - I'm going to graph it using a
particular JavaScript library,
02:43 - called Chart.js.
02:44 - I'll talk about some other
ways that you can choose
02:46 - to graph stuff, then, as well.
02:48 - If you want to follow
along with coding,
02:50 - I'm about to start
coding, you're
02:51 - first going to want
to grab that CSV file
02:53 - and have it stored
locally on your computer.
02:55 - So it's a pretty easy process.
02:57 - You just want to go to
data.giss.nasa.gov/gistemp.
03:00 - The URL's here and in
the video's description.
03:03 - And then you want to scroll all
the way down and find the place
03:05 - on the web page that
says, Tables of Global
03:07 - and Hemispheric Monthly
Means and Zonal Annual Means.
03:10 - So, there are actually a ton of
different data sets on this web
03:12 - page, and you
might explore them,
03:14 - and perhaps as an
exercise try doing
03:16 - graphing a different data
set on this web page.
03:19 - But the one that I'm
using is the last entry
03:21 - on that section called,
Zonal Annual Means,
03:24 - from 1880 to present.
03:26 - And I'm using the
CSV file format.
03:28 - You'll notice there's also a
TXT file format, that's probably
03:31 - tab delimited so that
the sort of data records
03:36 - have tabs in between
them instead of commas.
03:38 - Again, there's a variety
of different formats,
03:40 - but the CSV is the one
that I'm going to use.
03:42 - Time to start coding.
03:44 - So let's check in
and see if you--
03:45 - if you want to follow
along, let's check in
03:47 - and see if you have
exactly what I have.
03:48 - So what I have is some
boiler plate HTML.
03:51 - It's just a plain
index of HTML file
03:53 - with a title, a head, a body,
and an empty script tag.
03:57 - I've got links to where
the data is coming from,
03:59 - just to make sure I'm
referencing and crediting
04:01 - properly in my code.
04:03 - And then I also have
that CSV file itself.
04:06 - So, yeah, I'm in
Visual Studio Code.
04:08 - And you can see,
there's my index of HTML
04:09 - and there's my CSV file in
the same local directory.
04:12 - But you might be
using a different text
04:14 - editor or a different
environment, all of this
04:16 - will work as long as
you have your HTML file
04:18 - and your CSV file.
04:19 - Let's take a look
at that CSV file.
04:22 - So here's the CSV file.
04:23 - You can see that there are a
number of columns: Year; Glob,
04:28 - which I assume stands
for global; Nhem ,
04:31 - northern hemisphere;
et cetera, et cetera.
04:34 - And then you can see that
the columns of data each
04:36 - being separated by commas.
04:38 - So this isn't really meant
to be human readable.
04:40 - There are ways of viewing a
CSV that's more human readable.
04:44 - For example, here's
how that same data
04:46 - looks in spreadsheet format.
04:48 - You might notice here,
however, that it is colored.
04:52 - Each column has a
different color.
04:53 - This is because I'm using
a Visual Studio Code
04:55 - extension called Rainbow
CSV, which it says if it
04:59 - was like tailor made for me.
05:00 - And I'll include a link
in this video's scripture
05:02 - if you want to install that
extension as well so you
05:05 - can have things color coded.
05:06 - Another thing I
really like to do
05:08 - when I'm working with a
data set for the first time,
05:11 - is I like to give
myself a test file that
05:14 - has much less stuff in it.
05:16 - Because if I want a console,
log, and check stuff,
05:18 - sometimes this big file--
this isn't that big of a file,
05:21 - it's just 1880 to 2018.
05:24 - But, potentially, I could have
like a really, really big data
05:27 - file.
05:28 - So something I'm
going to do is, I'm
05:29 - going to just quickly do a
Save As and call this test.csv.
05:33 - And so now you can see that I
have a separate test.csv file.
05:37 - And I'm going to just
leave two years in there.
05:39 - So I'm going to scroll all the
way down and delete everything.
05:42 - And now I have a CSV file that
just has three rows in it:
05:46 - the header row and then the data
for 1880 and the data for 1881.
05:50 - So I'm going to work
with this first.
05:52 - And once I have the
parsing and everything
05:55 - I want to do working properly,
then I'll load the real data.
05:58 - So the first step is exactly
what you might think,
06:01 - fetch test.csv.
06:03 - Let's write that code.
06:04 - I'm going to write,
fetch test.csv.
06:09 - And then remember,
fetch returns a promise,
06:12 - and I can handle the
resolution of that promise
06:14 - when it is finished loading
the data with dot vin
06:18 - and any errors with dot catch.
06:20 - But I prefer to use the
await and async syntax,
06:22 - so I'm actually going to put
this in a function called,
06:25 - get data.
06:28 - I might think of a different
name for that later.
06:30 - And I'm going to say
the response equals
06:33 - a weight fetch test.csv.
06:36 - So I'm rating a function--
oh, and this function,
06:38 - I almost forgot, has to have
the keyword async because it's
06:41 - an asynchronous function that's
making asynchronous calls
06:44 - with the await keyword.
06:46 - So the response equals
await fetch dot test CSV.
06:49 - Now you might
remember, on the web
06:51 - fetch API there are a variety
of kinds of data streams
06:55 - that might come in.
06:56 - There is a blob, there's a
JSON, there's an array buffer,
07:00 - there's text.
07:01 - And this is what I want
to actually use, raw text.
07:03 - Even though it's tabular
data in CSV format,
07:06 - I'm going to do the parsing
of it manually in my own code.
07:09 - So I just want to
receive it as text.
07:12 - And that means--
07:13 - I'm going to say--
07:15 - I'm just going to
say table equal--
07:17 - maybe I'll just
call this all data,
07:19 - equals await a rate
response dot text.
07:26 - So let's console log that data.
07:28 - And let's call the
function, get data here.
07:33 - And then let's go and
see this running actually
07:36 - in the browser.
07:37 - And here it is.
07:38 - And you can see,
there we go, the data
07:40 - has been logged to the console.
07:41 - Now, ultimately, here
there are a variety
07:44 - of JavaScript libraries that
will parse a CSV for you.
07:48 - And by I mean, parse,
I mean figure out
07:49 - where all the commas are
and break up the data
07:51 - and put it into objects
and make it usable for you.
07:55 - D3, which is a JavaScript
library for data visualization,
07:58 - has a parser in it. p5 js,
which is a JavaScript library
08:02 - that I use a lot
on this channel,
08:03 - has a load table function,
which will actually
08:05 - parse the CSV for you.
08:07 - And there are many others.
08:08 - So I'll include some links to
those in the video description.
08:10 - But I think it's a useful
exercise right now.
08:12 - It's a simple enough data for
us to do the parsing manually
08:17 - with the split function.
08:18 - What?
08:19 - What split function?
08:20 - What are you talking about?
08:21 - So the JavaScript
string class, any time
08:24 - you have a piece of text
in a variable in JavaScript
08:27 - it's a string object, has
a function called split.
08:30 - And that function allows you
to take any arbitrary text
08:33 - and split it up into different
elements of an array.
08:36 - And that's basically
what we want to do.
08:37 - We want to split up all the
rows, and then each row,
08:39 - we want to split
up all the columns.
08:41 - The split function requires a
single argument, a separator
08:46 - or otherwise known
as a delimiter.
08:47 - And in this case, we have
two kinds of delimiters.
08:50 - For each row, the
delimiter, the thing
08:53 - that differentiates one row
from another, is a line break.
08:56 - So first let's call
split with line break.
08:59 - Going to my code, I can say, and
I'm going to call these rows,
09:03 - the rows equals data dot split.
09:06 - And I'm going to
split by backslash n.
09:09 - So backslash n is an
escape character sequence
09:14 - that indicates a line
break or new line.
09:16 - Depending on your
file format, you
09:18 - might need a slash r, also
which is like a carriage return.
09:21 - You can also use something
called a regular expression
09:24 - here.
09:24 - This should also work.
09:25 - Instead of in quotes, if
I have forward slashes,
09:27 - the delimiter is a
regular expression.
09:29 - What's a regular expression.
09:31 - So that's beyond
the scope of what
09:33 - we're doing in this
particular video,
09:35 - but I think expressions are
so useful when doing string
09:37 - parsing, that I will also
link in this video description
09:40 - to a whole series of videos
that I have about that.
09:42 - But for now, just the
backslash n in single quotes
09:46 - should do for us.
09:47 - So I'm going to say
console.log rows,
09:50 - just to make sure that works.
09:52 - And it does.
09:52 - So we can see here,
this is the raw text.
09:56 - And now this is split into
an array with three elements,
09:59 - each element is one
line in that array.
10:02 - And one thing, though, we don't
actually need to first row.
10:07 - The first row is really useful
important information for us
10:10 - as human beings to think
about what the data is.
10:13 - But just for parsing it,
I don't actually need it.
10:15 - An easy way that we can
remove that first row
10:17 - is with the slice function.
10:18 - Slice function is an array
function in JavaScript
10:21 - that makes a copy of an array,
but a portion of the array
10:24 - from beginning to end.
10:26 - So I want the arry all
the way to the end,
10:28 - but I want it from element 2,
which is index 1, to the end.
10:33 - So in other words,
what I can do is,
10:34 - I can say data split by line
break dot slice index 1.
10:41 - So this will basically
delete the zero element
10:45 - and give me a copy of the
array from index 1 to the end.
10:48 - And if we go back to
the browser, we can see,
10:50 - there we go.
10:51 - We now have an array with
just these two rows in it.
10:54 - Perfect.
10:55 - So what's the next step?
10:57 - The next step is splitting
each one of these rows
11:00 - into all of the fields.
11:01 - And truth of the matter is,
for what I'm doing right now,
11:04 - I only need the year
and the difference
11:08 - from the mean
temperature globally.
11:10 - And that fit this data,
this negative .18.
11:14 - So I'm now going to say,
for let I equal zero.
11:19 - I is less than rows dot length.
11:21 - So I'm going to just iterate
over all of the rows.
11:23 - You know what?
11:24 - This will be a nice time
for a four each loop.
11:28 - So I'm going to do
rows dot for each row.
11:36 - Once again, I'm using the ES
6 JavaScript arrow syntax.
11:40 - So for each is a
higher order function,
11:43 - that allows me to
apply something
11:45 - to every element of the array.
11:47 - And each element of the
array is represented
11:49 - by this variable row.
11:50 - So if I just say console.log
row, and go look in here,
11:55 - we can see, there we go, we're
console logging each row.
11:58 - But that's not
what I want to do.
11:59 - I want to say--
12:01 - you know what I'm going to do,
I'm going to call this row.
12:04 - And I call this elt, for
like element of the array.
12:08 - And I'll say row equals
elt split by commas.
12:13 - And then I'll console log row.
12:14 - So what I want to
do is, for each row,
12:17 - I want to split it up by commas.
12:20 - So little let's make
sure that works.
12:22 - Let's code.
12:23 - And we can see, OK.
12:24 - So we can see that I've got
both 1880 as an array and 1881
12:30 - as an array.
12:31 - And then I want to say const
year equals row index 0.
12:37 - And then const
temp, temperature,
12:41 - equals row index 1.
12:46 - Let me remove the first console
logs, sort of clean things
12:49 - up a little bit.
12:49 - And let me run this.
12:50 - And I should see just 1880
temperature, 1881 temperature.
12:54 - And that's exactly
what I have here.
12:56 - And guess what?
12:57 - Now that we've worked
this out, I can go and use
13:01 - the full data set.
13:03 - So I'm going to just change
from test.csv to this more
13:08 - complicated file name,
ZonAnn.Ts+dSST.csv.
13:13 - So that's the full data set
that I downloaded from the NASA
13:16 - website.
13:17 - I'm going to save.
13:18 - I want to go back.
13:19 - And we can see, there we go.
13:21 - We have every single
year and the difference
13:25 - from the mean
temperature next to it.
13:27 - Now I just noticed, if I go
all the way to the bottom,
13:29 - there's a little bit of
an extra undefined here.
13:32 - So it looks like probably
I need to clean up
13:34 - my data file a tiny bit.
13:37 - I'm assuming there's an extra
line break at the bottom.
13:39 - You can see there's
an extra line, 141.
13:42 - So I'm going to just delete
that, hit Save, and then
13:45 - we can see.
13:46 - There we go, undefined is
no longer appearing there.
13:48 - So It's important
for me to mention
13:50 - that I have kind of
created this very
13:53 - pre-prepared, easy situation.
13:55 - I know that this data file
has no empty date, no mistakes
14:00 - in it, no empty pieces.
14:01 - It's actually already
in CSV format.
14:03 - Just removing that little
extra line break at the end
14:06 - was a tiny bit of cleanup
that I needed to do.
14:08 - And in fact, there is a
function in JavaScript.
14:10 - I could have just
said, data.trim,
14:12 - that would have cleaned
it up for me anyway.
14:14 - But I do want to emphasize,
what if the data actually
14:18 - has commas in it?
14:19 - So if the data has commas
in it, my parsing system
14:22 - is going to break down.
14:23 - Well there are
conventions for this.
14:25 - CSV files actually use
quotes around the information
14:28 - that shouldn't be split,
where there actually
14:31 - is a comma in there.
14:33 - You might find that your data
isn't already in CSV format.
14:36 - You found this data
that you want to use,
14:38 - but it's a PDF, if it's scan.
14:40 - Your going to have
to optical character
14:42 - recognition to turn it into
data that you can work with
14:45 - or transcribe it manually.
14:48 - This might be data that you
want to collect yourself,
14:50 - from your own sensor readings.
14:51 - So there is a ton
of work that can
14:53 - go into prepping and cleaning
data for a project like this,
14:56 - but we're getting
started here in the sort
14:58 - of basic sense of just already
having a easy to use data
15:02 - set for us.
15:03 - In some of the future
videos I will look
15:05 - at collecting your own data.
15:06 - And we'll see that as well.
15:08 - Another little quick
bit of refactoring
15:09 - that I could do here is, I think
this rose variable is a little
15:13 - bit confusing.
15:13 - This is really
ultimately the variable
15:16 - that holds the entire table.
15:17 - Right?
15:18 - I'm taking the raw
data, splitting it up
15:20 - into rows, that's the table.
15:22 - And now taking the raw data
and splitting it up into rows,
15:29 - the table is holding
all that information.
15:31 - So the table-- this
is really looking,
15:33 - not at each element
of the array,
15:34 - this is now looking at
each row of the table.
15:37 - And then it would make sense
to call this is splitting up.
15:39 - This is an array
that's all the columns.
15:42 - So maybe I'll write
that fully out.
15:43 - So this is columns, this is
row, and then this is row.split.
15:48 - So I think this is
a bit more clear,
15:50 - in terms of what's
actually going on here
15:52 - in parsing that CSV.
15:54 - So I'm getting the
raw data as text.
15:57 - I'm splitting it up, putting
it into a variable called data,
16:00 - going through each--
sorry, it's hard
16:01 - putting into a
variable called table,
16:03 - going through each row of
the table, splitting each row
16:06 - into its corresponding columns.
16:09 - And then, I forgot, this now
has to be columns index 0,
16:13 - columns index 1.
16:14 - There we go.
16:14 - I think I like this better.
16:15 - A little bit of refactoring.
16:17 - This is something that's
very useful to do when
16:18 - you're working on something.
16:19 - Maybe you make up some
variable names as you're going
16:21 - and you come back
and refactor it
16:22 - to something a bit more clear.
16:23 - We're ready for the next step.
16:25 - Now that we see the data
logged there in the console,
16:28 - we know we could do something
like add it to a dom element.
16:30 - We could present it
back to the user,
16:32 - to the viewer, the user of
that web page in some form.
16:36 - So what I want to do is try
to do a simple line chart.
16:38 - I think this will be a nice
way of showing the data.
16:41 - And I'm going to do that with
a Javascript library called
16:43 - Chart.js.
16:44 - So before I get there,
though, maybe you
16:46 - want to try a little
exercise yourself.
16:48 - Can you console log a
different column of data?
16:52 - Can you load a different
CSV that you found
16:54 - and do the same thing with?
16:55 - See if you could
find your own data
16:56 - set that you might want
to play with and just get
16:58 - the data appearing
in the console.
17:01 - And then you'll be ready for
the next video doing something
17:04 - with charting it.
17:05 - [MUSIC PLAYING]