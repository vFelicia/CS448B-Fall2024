00:00 - Happy Pi Day!
00:01 - It's 2020, this year's Pi Day, it's today
00:05 - and I would like to do, it's not really today because I'm recording this a couple days early.
00:08 - But I would like you to see this on Pi Day a coding challenge themed around the number pi
00:14 - and thank you to FantinBibas
00:16 - Who suggested this one:  Pi Day, find a sequence in pi issue number one four six four
00:21 - I wonder if those numbers are where they are in pi, we'll find out by the end of this video!
00:27 - How to look at how one might search for any given sequence of numbers in pi.
00:32 - Now, I'm in this suggestion, this particular website angio.net/pi is mentioned
00:38 - it has a bunch of different resources
00:40 - A resource of where you can download all the digits of pi a place to search for pi
00:44 - This all reminded me of a wonderful project from Fathom information design.
00:48 - So if you don't know about Fathom they're an information design firm
00:52 - founded by Ben Fry who was one of the creators of Processing itself , you can find out more at Fathom.info
00:58 - But they created this project Peek inside PI, which you can play with at pi.fathom.info
01:04 - There's also an app version a lot of the versions. I'll link to all those things in the video's description
01:08 - So the idea here is that I can type or I could tap. Can I tap?
01:12 - Where is it?
01:14 - [Tapping]
01:15 - No it's not working, my touchscreen doesn't work!
01:18 - The point is for any given sequence like one four one five nine and there it is
01:23 - It's found at the first digit of pi. So now let's pick another sequence. Like what's a wonderful sequence?
01:30 - It is today's date is March 14 2020
01:34 - and that is not in the first 1 million digits of pi. Ah, if only we had more digits. I must have more digits.
01:42 - [music playing]
01:45 - Coding train: breaking news!
01:47 - I'm told that I should search for the number
 nine nine nine nine nine nine
01:55 - Which is the 762nd digit of pi
01:59 - So let's remember that and make sure when I write my own version of this that I find the same digit
02:05 - I'm gonna do this with p5.js JavaScript in the browser
02:07 - I'm it's not gonna be as nicely designed with a beautiful interface like this
02:10 - But I'm first going to recreate this exact thing and then what I'm gonna do
02:15 - is I'm gonna go from one million digits and go to 1 billion digits
02:19 - And see if I could still search for a digit in pi
02:21 - and probably I'm gonna fail because we're gonna need some kind of like Optimization
02:25 - it's gonna only run too slow
02:25 - Everything's gonna come crashing down, but I'm gonna try it nonetheless
02:28 - and we'll see where we get to by the end of this video
02:31 - I'm starting with a simple p5 sketch and two text files
02:35 - one with one million digits of pi which is just a Megabyte and one with 1 billion digits of pi which is a Gigabyte
02:43 - that's a much bigger file. So let's start with the 1 megabyte file
02:46 - [music playing]
02:48 - I've uploaded that file to the p5 web editor and I can load all the text from that file right now using preload
02:55 - [audible typing]
03:00 - I'm going to just take away animation here. I'm going to get rid of the draw loop and I'm gonna say no canvas
03:07 - and then the file itself has all of the digits of pi in one line
03:13 - But loadStrings loads text files into an array with each element of the array being a different line of the text file
03:19 - so what I'm going to do here is create a variable called digits and just say it is
03:24 - the first element in that raw data array
03:29 - Let's console.log digits and just see what happens
03:33 - Ok, so all of the digits of pi are down here in the console.
03:37 - Now what I want to do is search for a given digit. Let's make an interface a very very crude simple interface for searching.
03:43 - [music playing]
03:46 - Now I have this tiny tiny search box up here. Can I make that bigger?
03:51 - I also just increased the font size for any input element on the page
03:55 - So it's a little easier for you to see.
03:57 - The interaction that I'm looking for is any time anyone types anything into that search box?
04:02 - I want to look for that string that that those digits in PI itself
04:06 - [music playing]
04:09 - And p5.js has a special event function called input
04:13 - Which you can call on the search box and pass another function that will be executed
04:19 - Any time a change has been made
04:21 - So let me write that search it up function because that's when I was looking for something. I say search it up
04:27 - [music playing]
04:29 - I'm gonna be a little silly and make these global variables
04:32 - [music playing]
04:34 - Then let me get what I'm searching for
04:36 - [music playing]
04:39 - From the search box and console.log that
04:41 - [music playing]
04:42 - So now whenever I type anything into that search box, I should see what I type here in the console
04:48 - [audible typing]
04:51 - And that's working
04:52 - This is gonna actually be a really easy project to do
04:55 - You know why? Because I could just use the indexOf function in JavaScript to tell, let me do that real quick
05:01 - Just please please can I do that real quick?
I'm gonna do that real quick.
05:03 - [music playing]
05:05 - Digits indexOf search
05:08 - This is saying look inside the long string digits and give me the index of wherever this string search
05:15 - Happens to appear. If it doesn't appear. I'll take a negative one, please.
05:19 - Let's make another element on the page
05:22 - [music playing]
05:25 - So now when I get that index back
05:27 - I can say index P
05:29 - Dot HTML that index which will put the actual index where it's found in the paragraph text there on the webpage
05:36 - So for example, if I say 1 4
05:39 - 1 5 9 hmm. Why does it take two so really when counting the digits of pi?
05:44 - What seems to be the convention is the first digit is the first digit after the period so it's three point
05:50 - The first digit is one so I should really say
05:54 - Index minus one and now one four one five nine. I got one and then
06:01 - what if I say nine nine nine nine nine nine
 we got it! 999999 appears at the
06:07 - 762nd digit in pi
06:10 - so if it's a three, I don't want it to find that zero digit so i'm gonna start searching from index two
06:17 - The chat is also rightfully pointing out that I could just chop off
06:20 - The first two digits of the string would be much too easy. I'm gonna do it this way
06:24 - so i'm going to start from looking at digit two
06:28 - and I'm going to say
06:31 - as Long as index is greater than zero
06:36 - Set that, otherwise say...
06:38 - [music playing]
06:41 - Otherwise I'll put a message about it not being found
06:45 - Okay, so let's try one four one five nine nine nine nine nine nine nine not found so I now have
06:53 - essentially without the care and thought
06:57 - Into the interaction design, the visual design, the layout of the page all of those elements
07:02 - Recreated my my own version of this peek inside pi
07:07 - This video is not over though. I got two more things I want to do.
07:11 - Number one is I want to just investigate: what does it mean for me to actually perform this search myself?
07:20 - To write my own indexOf function because maybe if I do
07:24 - that might unlock some other creative possibilities and also I might learn something about programming
07:30 - And then let me increase things to one billion digits and see what happens
07:34 - what breaks down once I have a one gigabyte file that I'm loading all the digits of pi in
07:39 - as opposed to a one megabyte file.
All right, so let's first write our own index of function
07:44 - so I'm just going to change them to comic this out and I'm going to say
07:48 - let index equals index of
07:52 - search in this string for this search string
07:57 - So search in the string digits, for the string search
08:00 - [music playing]
08:02 - And so the function looks like this it's name is indexOf
08:05 - It needs to receive a block of text and the substring that you're searching for in that text
08:10 - Let's start with what's the first character in the search string?
08:14 - [music playing]
08:17 - Then I want to iterate over the entire string of text
08:21 - [music playing]
08:22 - And say hey does this character in the entire string of text
08:27 - match the first character of the search string
08:30 - [music playing]
08:33 - If so, I need another loop
08:37 - Then I need to loop through all of
08:40 - the characters of that search string
08:42 - [music playing]
08:43 - This is supposed to say four
08:45 - so I don't need to start at zero because I've already checked to make sure that's zero and I want to check
08:52 - is text charAt I plus J the same as search charAt J
09:02 - Again, I'm, I'm not worrying about running this optimally or elegantly. I just want to get the core idea out
09:08 - [music playing]
09:11 - So let's say this is my text and what I'm looking for is:
09:17 - I want to find out where is four one five in that particular string? This is my search
09:23 - What I have going on here is I know the first character of what I'm searching for is four
09:28 - So I, the index I is starting here and looking is that four as that four? Is that four?
09:33 - Is that four AHA this is four!
09:35 - Now let's, let's save our, let's save this spot and then based on this length three
09:41 - Which, let's iterate over this length with J
09:44 - zero one two
09:46 - And let's add j to i zero one two and see if all those digits continue to match
09:52 - so ultimately really what I'm looking for here is
09:56 - any of those digits that aren't the same. So I really want to look for first
10:00 - I'm going to be very strict about this and use the triple equals and then I'm going to say not equals
10:05 - I'm going to make a guess that I found it
10:07 - [music playing]
10:09 - As soon as I find the first character be the same, aha, I found it and then anytime I find anything to be different
10:15 - I can now say found equals false. So the question becomes
10:21 - Right here, if found is true
10:25 - then I can break out of things
10:29 - And once one is not true. I don't need to check the rest so I can break out
10:34 - and then if
10:36 - found
10:38 - Return what?
10:39 - So I'm gonna say let found index equals negative one. I'll give a default value of negative one
10:47 - and then actually if I've found it
10:51 - Right here
10:55 - Found index should equal what
11:00 - I, wherever we started with I
11:03 - and then if I've gone through every
11:06 - Possibility and I haven't found it. Then I'm gonna get to the end and I'm still just going to return
11:12 - Negative one but found index will have negative one
11:14 - So if I found it somewhere I'm gonna set it equal to that first index get out of the loop
11:18 - I don't need to check anymore because I just looking for the first instance and then return what I found
11:22 - Let's run and see if this works
11:26 - No, found is not defined sketch line 22
11:31 - This if statement has got to be inside here
11:34 - This is where I'm looking at every single character in the large string on searching through
11:41 - as soon as one of those characters is equal to the start
11:44 - check every, check all the subsequent characters and then if I found it break out of that larger loop
11:51 - and keep going so that this should be right now. I'm sure there's other mistakes, but that will be fixed
11:57 - All right, one four one five nine at digit number one
12:01 - The chat is giving me a nice suggestion where I could simplify this code where I don't actually need this found index
12:07 - Because I could just return I
12:08 - which will automatically break out of the loop. And then if I get to the end I could just return negative one great
12:14 - So this works
12:15 - Let's try the 999 thing
12:17 - [audible typing]
12:19 - There we go, so this really wraps up a small piece of this coding challenge I have made my own
12:25 - version of fathom informations peek inside pi. I even wrote my own string search function.
12:32 - There's so much more that you could do with this to be creative
12:34 - I mentioned at the top that you could think about what if what you weren't looking for were just
12:39 - Numbers, but you were looking for some other piece of data that's encoded into numbers
12:43 - So we could you find secret messages in pi or pieces of music in pi
12:48 - are there other kinds of algorithms that you could explore
12:51 - that you could optimize this particular search algorithm with
12:55 - And I'll list some of those in the video's description
12:57 - That's a little challenge out to you to research some of those and tell me about your favorite substring search algorithm in the comments
13:04 - but those are going to be needed for when I take the next step and
13:08 - Attempt to get this working with a billion digits of pi and for that. I'm also going to need a node server
13:14 - so at the very least I could be like, okay, let's run this exact same code, but now let's take a
13:21 - Text file that has a billion digits of pi. So I'm gonna go back to add file here. And I'm gonna go back to my
13:28 - File system. I'm gonna come over here. I'm gonna find my billion digit PI file
13:33 - Drag that into the browser here and
13:36 - mmm, the web editor will not let you upload a file that big and even if it could am I really gonna expect my
13:42 - Client-side code to load. Well a one gigabyte file with a billion characters in it. Now there's plenty ways probably that file could be compressed
13:51 - Encoded a different way. I probably get down to like 600 megabytes or something
13:54 - But whether it's 600 megabytes or a gigabyte, I've still really got the same problem. I have this like huge file
13:59 - So rather than try to work with it client-side in any type of clever way
14:03 - I'm just going to use a node application
14:05 - by the way
14:05 - I could probably do this in processing because a desktop piece of desktop processing is not gonna have any problem loading a really large file
14:11 - But I want to stay into JavaScript
14:13 - I'm going to create a node server that can load all the digits, store them into memory
14:18 - and then my client-side JavaScript code could query that node server
14:22 - now if you've never used node before I do have a few basic beginner tutorials about
14:27 - installing node and getting set up with node and I'll refer you to those but I'm gonna start from the point where I have
14:33 - a directory with a blank JavaScript file
14:36 - A package dot JSON file to describe my project that I'm building and both a million digit and
14:41 - Billion digit file of Pi so I'm going to start by working in index.js
14:46 - to write some code to load that file. So first I need to require the filesystem module
14:51 - [music playing]
14:52 - And one thing that I could just do is just with the million digits of pi. Let's just read file sync
14:58 - Let's just read the whole file in.
15:00 - [music playing]
15:04 - Interesting, so the file has been read in but look how it's being displayed. It's giving me the binary information into the console
15:11 - so I want to tell it that I want to read it as a string and I'll use
15:15 - Utf-8 so that's a second argument to read file sync and now here we go
15:20 - And there's all those digits of pi all those 1 million digits
15:23 - Now let's just change it to, why not change it to a billion. What could possibly go wrong?
15:33 - Interesting, it did something but it didn't print anything out. So I know this is just basically a bad idea
15:38 - I don't know whether something crashed or memory ran out but read file sync for a gigabyte file is not a good idea
15:44 - and I Think what I want to investigate here is createStream createReadStream
15:49 - So let me just look for that on the node documentation page createReadStream
15:55 - So createReadStream is a function
15:57 - I can call to open up a stream for reading the file so I can read it bit by bit
16:02 - I can kind of track how long it's gonna take
16:04 - and get what I want and piece it together, it just gives me a lot of options. So let me do that by saying
16:11 - Stream equals FS.createReadStream and let's go back to the million
16:18 - [music playing]
16:19 - And then once I have a stream I believe that I can
16:24 - Basically handle different events. So for example, I can say stream on data. That's when anything is actually coming in
16:31 - I can then have a callback function and just
16:35 - console.log the data
16:37 - So now if I run this hopefully I'm gonna see all those digits streaming out
16:42 - I'm still just gonna use the million, the million digit file
16:48 - Okay, oh I'm getting I'm getting the binary data so probably I can say just data to string
16:58 - Great so that's the million digits of pi, you're in, I'm sort of curious to do
17:02 - Console.log like how big are the chunks that it's reading this in?
17:10 - Yeah, you can see these are the chunks that it's reading the data and they're pretty large
17:15 - Because I put some line breaks in between each
17:18 - Chunk of the stream. In fact, I think a lot of examples use the word sort of like a chunk here
17:23 - So now let's try
17:25 - 1 billion digits of pi
17:31 - Yeah, okay
17:33 - [music playing]
17:36 - Boy this is taking a while.
17:40 - There we go all 1 billion digits could I possibly just put them all into one string
17:45 - [music playing]
17:49 - And then uh-huh, if I have stream on I believe it's end I think there's an end and a close
17:54 - [music playing]
17:56 - And by the way, if this arrow syntax isn't familiar to you. It's a nice way of writing
18:01 - Callback and anonymous functions and there's a lot more to it than that and I have a whole video about arrow fucntions you could watch
18:06 - [music playing]
18:07 - Let's just do digits dot length and see if we get 1 billion digits
18:13 - Digits is not defined
18:15 - Data!
18:17 - digits
18:20 - And look at that, it's 1 billion in 2 because the 3 and the 1 don't actually count
18:26 - Okay. Now let's just search for a digit. Let's grab my
18:31 - index of function that I wrote previously
18:35 - and bring it into the node code
18:39 - and then let's look for
18:41 - I'm just going to hard code this, lets search
18:45 - what was I looking for 9 9 now let's look for 999 and then
18:52 - IndexOf digits search and then
18:58 - Console.log index
19:08 - 763 old minus one minus one minus one minus one
19:11 - Okay, so that works now. Here's the thing
19:14 - that didn't take very long because that is actually found at 762
19:19 - does anybody know of a
19:21 - Sequence of digits that's very very far into the sequence of a billion digits
19:26 - That would be helpful to know while you're thinking about that. For those of you who will happen to be watching this live
19:30 - Not in the recorded video that you right now. I'm not you watching this live, but you watching this later or watching
19:36 - Let's just quickly add in a web server so I can make a call to ask for the location of a given digit
19:44 - so in this video
19:45 - I'm not going to go through all of
19:47 - The pieces of adding a web server and how HTTP requests work and get requests and response and all that stuff
19:53 - But guess what! If you're interested in a much lengthier series about all of the details that I'm going to add quickly right now
19:58 - You can find that in the working with data and API's in JavaScript, a learning playlist that I have on this channel
20:04 - But for now, I'm gonna go and copy paste, I'm gonna copy paste from the code that I have for those examples right here
20:09 - I want to create an express app
20:12 - So I'm gonna add an Express app. I want I don't need this database stuff. So I just need to create an app Express
20:18 - I want to listen at port 3000 and then I need just a get request
20:24 - So I'm gonna grab this I just want to handle one route
20:29 - I'm gonna say get whenever I do I'm gonna just call this route search. Actually, I'm gonna call this pi
20:37 - and then I'm going to use one of those things called resti and routes something like that to
20:42 - Look for some sequence of digits
20:46 - Let's call it search. Let's keep it with search some sequence of digits
20:49 - [music playing]
20:51 - Request params digits
20:55 - So basically
20:56 - I have a simple get request when if ever I run this server any time somebody navigates to search slash some sequence of digits
21:04 - I'm gonna pull out those digits and just send them back. I'm gonna get rid of just this on end stuff right now
21:10 - I don't need this. Actually. I'm just gonna write console.log
21:15 - Billion digits loaded
21:19 - And let me run the server
21:23 - Mmm error, oh, I've got to install Express. So Express is a Nice framework for making web servers in node.
21:30 - Let me run it again
21:32 - So I'm listening at port 3000 the bindle billion digits are loaded
21:36 - I'm gonna go to localhost 3000. There's nothing there. But now if I go to
21:43 - slash search slash 1 like 4 3 3 2 5 4
21:50 - See it I got it and I sent it back. Guess what I can do now
21:55 - Really exciting. So if I take this code where I was searching before?
21:58 - And I bring it up here and I can say search equals
22:03 - request params digits
22:08 - Search for it within the digits and then send that response back
22:15 - But ultimately, I want to turn, make this JSON so I'm gonna say index
22:21 - I'm gonna make this a nice little JSON object and I'll also send back. What was the search string as well?
22:29 - So let's try this one more time, and let's switch to a million digits.
22:34 - So I'm going to just change this to a million digits
22:36 - Go back to the browser, hit refresh
22:40 - I've got to restart the server
22:43 - Go back to the browser and there we go. This particular sequence of digits was found at that index
22:50 - Let's double check this with Fathoms. Pecan pie. The digits were 4 3 3 2
22:58 - It's found at the 35572nd digit of pi
23:04 - Is that what I got. Yes, that's what I got. So my search is working and now
23:10 - Let's change it. Well, let's get it working from our interface first, then we'll try it with a billion digits
23:14 - So now I don't want to just do this by hard coding this into the browser
23:17 - I want to go back to my p5 code
23:21 - And in my p5 code I'm not going to load the data file there. I don't even need to do the search there
23:27 - So index of can go to way go away
23:30 - But whenever I want to search it up
23:33 - Instead of actually running the search. I'm going to make a get request. So I'm gonna say load JSON
23:43 - The URL is localhost:3000/search
23:50 - And then add in the actual search value
23:52 - This is a string literal which is an incredibly convenient way to put a variable into a string. I'm gonna
23:59 - I'm gonna call load JSON, got results and then when I get the results
24:08 - The result comes back in index
24:12 - And that is where I'm going to put it in the paragraph
24:18 - [music playing]
24:19 - And get rid of these things I don't need.
24:22 - So basically, this is just the interface and the interface whenever a
24:27 - Interface goes and asks the server to look in the digits
24:31 - with a server being the one that can handle holding on to those billion digits
24:34 - But
24:36 - I need to host this webpage
24:39 - and the way that I'm going to do that it's use Express the same Express server that is serving up the digits of pi
24:46 - The index value into the digits of pi to serve up these web pages and that I can do with
24:52 - Adding like Express static something-or-other. Let me go look back to my older tutorials about this
24:57 - It's right here app use Express static public
25:00 - I want to host everything that's in a directory called public which happens to be what I just called it back into the server
25:08 - There we go
25:09 - You can see the p5 sketch that I've been working with is in the directory public
25:14 - We don't need this million digits of pi anymore
25:18 - There, it's not part of the clients at all. Just part of the server
25:22 - Let me restart the server
25:24 - Let me go to localhost
25:27 - 3000
25:30 - Mmm
25:31 - Uncaught error: raw is not defined. So I've got some errors in my p5 code. Oh, I don't need
25:38 - The digits no longer belongs here. There we go. Okay now!
25:46 - Okay, it's searching, it's always finding negative 2
25:50 - Because it's searching for this like colon what what where'd that colon come from? Where did I put that in by accident?
25:57 - Oh! Look at that.
25:59 - It's just an extra colon that I had actually in the string that goes away, bye, go away colon
26:10 - It works it's searching in PI, but the searching is happening on the server. So now it's time.
26:17 - [drumroll]
26:18 - This is the grand finale of today's Coding Train Pi Day Challenge.
26:22 - [train whistle]
26:23 - We are going to search in 1 billion digits of pi to find any given sequence of digits, it is time.
26:29 - I'm going to do it, let me go back to my server code.
26:35 - That was anticlimactic, I'm gonna change it to loading the billion digits of pi. I'm gonna restart the server.
26:44 - Got to wait, it loaded the billion digits. It's now waiting for me, going back to the webpage.
26:48 - Let me just refresh this web page and I don't know, let's try.
26:55 - Searching
26:59 - Question is has it found it. No, it didn't find that
27:04 - So,  somebody needs to fact checks this for me
27:07 - Is that sequence not in the first billion digits of pi David suggested a string.
27:13 - Two zero, seven seven five, five one zero. Let's see if that works.
27:17 - Two zero, seven seven five, five one zero.
27:23 - This is at digit number 176866377.
27:32 - That's pretty good. Well, I have an idea
27:34 - Let's look at what's in that text file the last few digits
27:39 - [music playing]
27:41 - Digits dot length minus ten.
27:47 - I could use like substring or something, but I'm just like afraid
27:50 - [music playing]
27:52 - So, let me print out the last ten digits, oh no, no
27:57 - digits.charAt()
28:06 - Fun okay. Does it really have to be like this?
28:11 - I'm doing this in the weirdest most nonsensical way
28:14 - So with a little detective work
28:16 - I have determined that these are the last ten digits in the first billion digits of pi
28:22 - So just to see how slow is the searching I'm gonna refresh this page
28:29 - and I'm going to paste those last 10 digits in here and we're gonna see how long it takes
28:33 - [clock ticking]
28:39 - [congratulatory music plays]
28:41 - There we go, it found it!
28:42 - That's not so terrible
28:44 - So we can even with my crude brute-force algorithm
28:48 - Find any
28:49 - Sequence of digits in the first 1 billion digits of pi by having both a server and client talk to each other
28:56 - So many possibilities here. How could you optimize the search algorithm?
29:00 - How could you make the API do all sorts of more fun creative things to give you more information about what's in pi?
29:06 - Could you put this on to glitch? So we could maybe, we could make this.
29:09 - Glitch is like a hosting website that allows you to deploy different kind of creative web applications
29:15 - So maybe I could make a version of this that runs on glitch that people could remix
29:19 - I will include a link to that if I can get it to work in this video's description and
29:24 - You could just be much more creative about the interface and once again, what are you actually really searching for?
29:29 - Could you search for secret messages in Pi by thinking about encoding text into digits music in Pi by encoding?
29:39 - Musical notes and melodies and rhythms into digits, colors into digits. What data could you search for in pi?
29:45 - And what wonderful things could you discover that way?
29:48 - And maybe you could find a text file with more than a billion digits!
29:52 - and make your own version that searches into even larger number of digits of pi
29:56 - I hope you enjoyed this Coding Train coding challenge for Pi Day
30:00 - thanks to Fathom information design for the inspiration with peeking inside pi and thanks also to FantinBibas
30:08 - and all of you watching this liven during the live stream with all of the
30:13 - Suggestions and help that you offered. I'll see you soon next time on The Coding Train
30:18 - Have a great day, ride, all aboard, all that nonsense , that catchphrase. It's coming one day. Oh, this is my catchphrase
30:23 - It's not a phrase. It's a sound, it's a train whistle sound. That's my catchphrase
30:28 - [train whistle sound]
30:29 - [outro music]