00:00 - hello we're pulling into the station the
00:04 - kinematic station and what I want to do
00:08 - is I want to expand my previous inverse
00:10 - kinematics example I don't have expanded
00:12 - the right word but I want to change the
00:13 - way it works in a way so first of all
00:15 - this is the exact same example that I
00:16 - built in a previous coding challenge but
00:19 - I've changed I've changed a few things
00:20 - I've gotten rid of the there's only a
00:23 - few segments down there's only three
00:25 - segments the segments are longer and
00:26 - I've also gotten rid of that thing where
00:28 - the stroke weight of the segment changes
00:31 - so it has less of an eel or snake-like
00:33 - quality to it now and it just kind of
00:35 - has more about a robot arm like quality
00:37 - because what I want to look at is what
00:40 - happens if I take the base of it this
00:43 - right and lock it to a certain point
00:45 - much like an actual real robot arm would
00:48 - do so what if you need to figure out the
00:51 - kinematics for a robot arm to reach out
00:54 - and grab an apple because the robot
00:56 - likes apple oh that would be a great
00:59 - robot people should make just robots but
01:00 - like happens anyway um so a point to
01:05 - this which was and so how would you do
01:08 - that and so this is how we're going to
01:11 - do it now first of all I've got a little
01:13 - secret to tell you
01:14 - I actually just tried to do this and I'm
01:16 - clearly over engineered and wrote a
01:18 - really spaghetti problematic code I will
01:20 - link to the live stream where I did that
01:22 - and through writing that code I really
01:25 - realized this is a time where it's just
01:27 - going to be so much easier if I just use
01:29 - an array so it's kind of interesting to
01:30 - explore this problem as this kind of
01:32 - linked to list a where each object keeps
01:35 - track of its parent in its child and I
01:36 - did that in the forward kinematics but
01:38 - it's kind of unnecessary because the
01:39 - segments are just in an order and if
01:41 - there is an array I think all I everyone
01:43 - do is iterate through the boards or
01:44 - backwards and know which ones are next
01:45 - to each other and an array is going to
01:47 - just make that so much easier so let's
01:48 - let's talk about what I mean by that so
01:50 - this is what remember this is what
01:52 - inverse kinematics does so let's say
01:55 - this is the sequence of segments and
02:00 - this is a particular title actually
02:02 - let's put the target up here this is a
02:04 - particular target so what's this segment
02:06 - in the previous example is going to do
02:08 - is it's going to turn to point up
02:10 - top target so we do this and then it
02:13 - will shift its position all the way to
02:15 - here this is if it can place if the base
02:17 - is not locked and it can move then this
02:20 - one will turn to face the beginning of
02:23 - that and then it will move to there so
02:25 - that's what we did so what we're going
02:28 - to do to lock the base it sounds like
02:30 - overly simplistic but it works but what
02:32 - I understand is I'm going to do that
02:34 - with all the pieces so you know maybe I
02:36 - get this one here and this one here and
02:38 - then after I do that I have kind of a
02:39 - new arrangement and then I ship the
02:41 - whole thing back so just shift the whole
02:44 - thing back we're done I'm going to move
02:47 - this back here then move this then with
02:49 - this and there's pretty easy ways to do
02:51 - that I'm not so sure if I'm going to end
02:53 - up doing it the simplest wedge you know
02:55 - this is really today feels like a lesson
02:56 - in refactoring which is unique just
02:59 - writing the code to get it to work and
03:00 - then reorganizing and simplifying it and
03:02 - trying to do that a little bit but so
03:04 - this is the basic idea so let's start
03:06 - going to the code and let's make an
03:08 - array that each one of these segments
03:10 - has it indexed into that array 0 1 2 & 3
03:13 - 0 1 2 & 3 this way I could just do
03:15 - inverse kinematics by iterating over
03:17 - this way and if I need to iterate
03:19 - through it's forwards I can do that way
03:21 - I always know the base is 0 and the last
03:23 - one is in the length of the array minus
03:26 - 1 it's going to make things so much
03:27 - simpler
03:28 - ok let's try it Here I am ok so I'm
03:31 - going to make an array and I'm going to
03:34 - call I'm going to call it eggs let's
03:36 - call it tentacle it's fine
03:37 - the array is still called tentacle and
03:38 - I'm going to say tentacle index 0 is a
03:43 - new segment so I make the first one here
03:47 - and then it's probably still useful to
03:50 - have them keep track of their parent
03:53 - I don't know how necessary that is let's
03:56 - let's actually comment that out right
03:58 - now actually let's keep the parent thing
04:01 - because that is a way that I position
04:04 - the next one which is kind of useful let
04:08 - me keep that for a second
04:09 - bear with me so I'm gonna get rid of the
04:12 - child thing sort of a suspicion that
04:14 - keeping the parent might be useful but
04:16 - the child thing is kind of unnecessary
04:17 - what it note think I'm using that so I'm
04:19 - just going to refactor it to do the same
04:20 - thing first then what I'm going to do is
04:22 - I'm going to have this loop
04:23 - start it index one so I'm going to go
04:27 - from one to three and I'm going to say
04:32 - tentacle now index I and I cannot spell
04:38 - tentacle tentacle index I is a new
04:41 - segment made from tentacle index I minus
04:47 - one which is the previous one oh this is
04:49 - so much better forget about the child
04:51 - thing forget about next forget about
04:53 - this look at this oh I like to feel so
04:56 - relieved oh goodness
05:01 - oh this makes so much more sense to me
05:03 - okay so now we've got our array and then
05:06 - what should follow the mouse so tentacle
05:09 - so I'm going to just say end is tentacle
05:15 - length minus 1 so the tentacle and
05:21 - actually let's have that be a segment is
05:24 - the array the last spot in the array I
05:28 - could use an array list and use pop or
05:30 - there's probably some other fancy way to
05:31 - do this tend to cannot spell tentacle
05:35 - it's such a hard word to spell okay
05:36 - so that's the end segment and so now I
05:39 - just say n follows the mouse and Unruh
05:44 - move over here a little bit and update
05:46 - and the dots show okay I don't know that
05:49 - I need to do it all this way because
05:51 - ultimately I'm going to loop through
05:52 - everything but now what I do is I want
05:57 - to iterate through them backwards so
06:00 - what I want to do is say for sorry
06:07 - everybody I've got a little sound thing
06:09 - going on here for I want to start at the
06:11 - end of the array I equals I really I
06:14 - just want this to be in a variable in
06:17 - length int total because it's going to
06:21 - make my last really now trying to make
06:22 - the code simple total is tentacle dot
06:25 - length and so the last element is total
06:27 - minus 1 and I'm going start from total
06:29 - minus 1 now I'm not starting from total
06:32 - minus 1 and starting from total minus to
06:34 - go all the way down to 0
06:37 - - - then what I'm going to do is say
06:42 - tentacle index I follow update show the
06:48 - reason why this is useful is follow and
06:53 - follow knows how to oh it follows its
06:56 - child so that's the relationship that I
06:59 - need not the parent it seems but you
07:03 - know what guess what I don't need the
07:06 - child because I can tell it which thing
07:08 - to follow right what if I just give it a
07:13 - segment to follow and then here I know
07:17 - what it's child is you know this child
07:19 - is its tentacle I plus one it's the one
07:23 - after it so this is so much nicer
07:25 - because I don't ever have to keep all
07:27 - these references because I can just have
07:29 - them I know that the one after it is the
07:32 - one that it should follow great so this
07:34 - should be the same
07:35 - hi I'm in the state which is no surprise
07:37 - it would be nice if I actually created
07:40 - the array in Java you've got to be quite
07:42 - strict about these things and I want an
07:44 - array with how many things do I want
07:47 - three total so I want to say tentacle
07:51 - length and it's not an array of tentacle
07:53 - objects it's an array is very confusing
07:56 - but it's an array the array is called
07:58 - tentacle the object in it our segment
08:01 - okay yes OOP there we go look I've got
08:04 - the same exact thing but I just feel
08:06 - much happier about the car much less
08:09 - stressed out now one thing is did I use
08:11 - parents anywhere do I use parent
08:14 - anywhere not really I mean I use it here
08:17 - in that that's how I get its initial
08:20 - location but I don't use it anywhere
08:23 - else so I can pass it in I don't
08:27 - actually need a reference to it just to
08:29 - simplify things okay so now I've really
08:32 - made things so much simpler I feel so
08:35 - much happier so now what I can do is I
08:37 - can introduce this idea of a base and
08:39 - what I think I base is where the thing
08:43 - is attached fixed so I want to have it
08:45 - be attached to the bottom so I'm going
08:47 - to create an object called people
08:51 - vector object which is the base and I'm
08:53 - going to set the base to be equal to a
08:56 - new P vector which is in the middle and
09:01 - at the bottom okay there we go the new P
09:05 - vector which is in the middle at the
09:06 - bottom yay okay feeling good about this
09:08 - then what I'm going to do is after I do
09:12 - all this nonsense I want the thing in
09:15 - the array that's first the first element
09:17 - which is tentacle zero and I want to set
09:22 - its location set a its start and end
09:25 - point I want to set a to the base so I
09:28 - want a to be the base and so I'm going
09:31 - to write a function called and actually
09:35 - I think I'm going to put this function
09:36 - near calculate B set a and there's a
09:41 - little bit this is a little bit overkill
09:42 - to just have a function just to do this
09:45 - but I'm going to say a equals but I'm
09:47 - doing this because you know I think
09:49 - there's a way to have the objects
09:52 - endpoint always one object's endpoint
09:54 - always has to be the other objects
09:56 - beginning points I think I could
09:57 - probably link those but I'm a little bit
09:59 - afraid to do that
10:01 - so I'm going to copy the data copy this
10:03 - vector to this one just for now maybe
10:05 - later we can do that okay so now that
10:09 - I've done that what I want to do is set
10:12 - its bait okay let's do that now okay so
10:15 - first of all why don't I didn't seem to
10:17 - work well setting it as its base doesn't
10:20 - really do anything because up here as
10:22 - soon as I update it's going to attach to
10:23 - the thing that's moving so one thing is
10:25 - I want to think I want to just take out
10:28 - show here and I want to have a separate
10:30 - function for rendering everything
10:32 - because that's just going to make
10:34 - everything much much easier to deal with
10:39 - so if I do that we can see that this
10:41 - works but looks bitten is not a
10:43 - realistic robot arm because the bottom
10:46 - can just stretch to wherever it needs to
10:48 - go because all I've done is set the base
10:50 - to the bottom but I didn't change B so
10:52 - what I need to do is whenever I change a
10:54 - I need to also update B which gets done
10:58 - in this function calculate B right
11:00 - remember it uses that polar to Cartesian
11:01 - coordinates formation to set B base
11:04 - we're a is and the angle so now that I
11:06 - do that you can see 12 it's attached to
11:09 - the base but the rest of the stuff you
11:10 - just go do whatever it was so now what
11:14 - I'm going to do and some people are
11:15 - asking why not use a for each loop and I
11:17 - do you just see me use this enhanced
11:20 - loop in Java but the reason I don't want
11:21 - to do this now it's because I guess
11:23 - precisely this I want to now say for int
11:28 - I equals 1 I is less than total I plus
11:34 - plus I want now tentacle index I set a
11:40 - to tentacle index I minus 1 I need dot
11:48 - dot we just type this in here dot B
11:51 - right what is this doing what did I miss
11:54 - that's totally tentacle what I want to
11:59 - do is I need when they're detached I
12:06 - need this one a to be set to the
12:09 - previous ones B and remember they're
12:11 - ordered like this in the array so that's
12:13 - what I'm doing here so I think this is a
12:15 - much nicer solution to just say set 10
12:17 - index I have it's a be equal to I minus
12:20 - 1 B I think I did this right I want to
12:23 - play like a drumroll there's nothing the
12:25 - lips just see there we go look at it so
12:27 - now I have this robot arm that's
12:29 - following them out you can see that it's
12:30 - always if my mouse is an apple it's
12:33 - going to reach up to pick it now I can't
12:34 - it can't go very far you know I could
12:37 - easily make the segment longer I could
12:42 - make the segments longer well how would
12:43 - I'm to do that I could make them now so
12:45 - first of all let's let's add something
12:46 - let's say length is length the variable
12:49 - somewhere let's make them 200 and let's
12:55 - also figure out oh well up here is how
12:58 - many segments I want so we could see
13:00 - here this is what it looks like right
13:02 - like with if the segments are let's try
13:05 - another like 300 there's probably no
13:08 - we're in this pixel space that I can't
13:11 - reach now I don't know what the what it
13:14 - is exactly that I'm doing this is a I
13:16 - think it might be a
13:17 - bit more interesting to look at this if
13:19 - they were actually smaller and that
13:22 - there were a lot of them and here now we
13:25 - can see whoa there's 30 of them but
13:28 - they're really small let's make them a
13:31 - little bit twice as long so you can see
13:32 - now I've got this thing that's kind of
13:34 - reaching to try to catch catch up and
13:37 - you can see you could imagine now here's
13:39 - the thing
13:39 - what if where the mouth is what if it's
13:43 - following not the mouth but what it's
13:44 - falling some oscillating patterns or a
13:46 - bouncing ball or some other physics
13:48 - system you can see what the
13:49 - possibilities are so what I'm going to
13:51 - do in the next video is I'm going to
13:54 - take this example and package it into an
13:56 - object and then I'm going to make a
13:58 - bunch of them that follow some type of
13:59 - sine wave or noise or something to see
14:01 - what that gets okay so I think this
14:04 - video they says I'm so happy about using
14:06 - an array and I'm happy that you watched
14:07 - it I feel like I'm Shannon Apple I've
14:09 - got all this stuff here I'm going to go
14:11 - have an apple later if you like apples
14:12 - okay goodbye
14:17 - [Music]