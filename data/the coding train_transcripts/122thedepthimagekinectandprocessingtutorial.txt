00:01 - hello have a prop in this video I'm
00:03 - going to look at how do you use this I'm
00:05 - going to actually look at the code for
00:06 - using this Microsoft Connect in
00:08 - processing using the open connect for
00:10 - processing library now uh one thing I
00:12 - want to mention it that I did not
00:14 - mention in the previous videos that is
00:15 - if you install the open connect for
00:16 - processing Library you need nothing else
00:18 - whatsoever it just works with the
00:20 - connect there is one exception on
00:22 - Windows 8 with the connect version two
00:25 - you do need to install an extra dri
00:26 - libus I will put that in the description
00:29 - below um but so this is the connect
00:32 - version one model 1414 it would work
00:35 - with this example but I'm going to show
00:36 - you instead I have the connect version
00:38 - two over here and you can see the only
00:40 - code that I've filled in so far is
00:42 - having a variable called connect 2 so if
00:45 - you're using the connect version one the
00:46 - only thing you would change this code
00:48 - would work mostly identically um is just
00:51 - say connect uh instead of connect two so
00:53 - it's not connect one and connect two
00:54 - it's just connect and connect two I'm
00:56 - pretty sure about that if I get that
00:58 - wrong somebody will correct me um okay
01:01 - so uh let's look at how you get started
01:03 - so I filled in a little bit of code but
01:06 - the only things that you need really to
01:07 - get started are an import statement at
01:09 - the top that import statement is saying
01:11 - hey I'm here to use this Library uh you
01:13 - need to declare a variable this variable
01:15 - is going to like hold all the
01:17 - information about this connect that you
01:19 - are using so it's the thing that you're
01:20 - going to create and I create it by
01:22 - saying new connect to this now there is
01:25 - a way to use multiple connects to use a
01:27 - version one and a version two to specify
01:29 - which connect you want to use that's
01:32 - beyond the scope of what I'm doing here
01:34 - in this video I'm only going to look at
01:35 - you just have one connect connected one
01:37 - connect connected to your computer it's
01:39 - the default one all you need to do is
01:40 - say equals new connect to this so once
01:44 - you've got that going what is the next
01:46 - step well you need to decide what it is
01:48 - you want to do and in this example all I
01:50 - want to do is use the depth image so I'm
01:53 - going to say init depth so the connect
01:57 - uh the connect doesn't the library
01:59 - doesn't start all of the feeds
02:00 - automatically it's not going to start
02:02 - getting the infrared image the raw depth
02:04 - the depth image the video image it's
02:06 - only going to start using what you ask
02:07 - for so in this case I want to say init
02:09 - depth and then I also want to say uh
02:12 - init device which will kind of get
02:15 - things going and by the way this is
02:16 - where if I had multiple devices I could
02:18 - put an argument in there and say init
02:20 - device zero one or two that type of
02:22 - thing so once I have that I'm ready to
02:25 - go and I can run this
02:26 - program and we will see nothing on the
02:29 - screen so but a lot of stuff like spit
02:32 - out here which is kind of promising
02:33 - device firmware serial the library is
02:35 - going to like put a lot of stuff in the
02:37 - console which is um some basic
02:39 - information that you can see if it's
02:40 - working it will say like no nothing
02:42 - connected uh if you if you if you don't
02:44 - have it um connected I realized some
02:47 - other things I forgot in the first video
02:48 - but that's okay okay so uh what's the
02:51 - next thing that you want to do so let's
02:52 - just make sure things are working one of
02:54 - the things the connect gives you is that
02:57 - depth image because I said init depth so
02:59 - in nit depth there are two ways I can
03:02 - look at the depth I can look at the raw
03:04 - depth values with the connect version
03:06 - two these are numbers between 0 and 4500
03:09 - with the connect version one these are
03:10 - numbers between 0 and 248 U these relate
03:13 - to millimeter measurements um but what I
03:16 - want is get depth image and you can see
03:20 - I what I'm you doing here is I'm asking
03:22 - the connect to give me this depth image
03:24 - and store it in a variable called image
03:26 - and now what I can do is just draw that
03:29 - image on the screen to make sure things
03:31 - are working so we can see here and there
03:34 - it is so there is the depth image you
03:36 - can see I've got it and now it's on the
03:38 - screen
03:39 - so this is the goal of the library it's
03:41 - pretty easy to work with in terms of
03:43 - just getting the data so let's think
03:46 - about what you might want to do so I
03:49 - think most almost all of the uh almost
03:54 - everything that you would do where
03:55 - you're working with the raw depth data
03:57 - or with the depth image involves iter
03:59 - ating over all the pixels you want to
04:01 - look at all the pixels and see which
04:03 - ones are the ones that are closest you
04:04 - want to look at all the pixels and see
04:06 - what's the highest point of the closest
04:08 - thing or you want to look at all the
04:09 - pixels and say what's the sort of
04:11 - topology of the entire thing so all of
04:13 - those statements I said involved look at
04:15 - all the pixels so before I get to doing
04:18 - anything here let's talk about what it
04:19 - means to look look at all look at all
04:22 - the pixels so this is something that
04:24 - I've covered in some other videos a
04:25 - whole set of videos about just image
04:27 - processing um from you know jpegs pngs
04:31 - webcams that sort of thing you can refer
04:33 - back to those I'll I'll make sure I link
04:34 - to those at this moment in the video um
04:37 - but just to remind you if you have an
04:40 - image whether it's a depth image or an
04:43 - RGB image that image is a grid of
04:47 - pixels and we typically as human beings
04:50 - look at this as a thing that's
04:52 - two-dimensional and it has a bunch of
04:54 - columns and it has a bunch of rows and
04:57 - usually we think of the columns as the X
04:59 - values and the rows as the Y values so
05:02 - you might think of this as like the
05:04 - columns numbered like there's five
05:06 - columns numbered 0 through four and
05:08 - there's uh four columns numbered 0
05:11 - through three and so if I were over here
05:13 - this is pixel 3 comma 1 so this is how
05:18 - uh I think of pixels and images and this
05:20 - is the this image over here this depth
05:23 - image is a big grid of pixels columns
05:25 - and rows the thing that you have to
05:28 - remember when working with stuff like
05:30 - this is that the computer is actually
05:32 - storing all of those depth values all of
05:35 - those brightness depth values in this
05:38 - singular onedimensional array 0 1 2 3 4
05:42 - 5 6 7 8 9
05:44 - Etc and those numbers correspond like
05:47 - this the counting goes across comes down
05:49 - here uh comes down here comes down
05:55 - here so you can see I've got 20 pixels
05:58 - because I've got a 5X four grid 5 * 4 is
06:01 - 20 the pixels are numbers 0 through 19
06:03 - so what we need is a methodology for if
06:06 - we're thinking of the XY how do I
06:09 - convert that to the location that's in
06:11 - this onedimensional array the index into
06:12 - that onedimensional array and the
06:14 - formula for doing that is x + y * width
06:19 - and you can see how that works because
06:20 - if I look at this column index two over
06:23 - here 2 + 5 is 7 7 + 5 is 12 12 + 5 is 17
06:28 - so the width defines those numbers as
06:30 - they go sort of down row by row by row
06:32 - so if I say 3 + 1 * 5 that's 3 + 5 which
06:37 - is eight and you can see that's eight
06:39 - right here so this is the formula that
06:41 - you're going to have to get used to
06:43 - because what I'm going to add is Loops
06:46 - I'm going to say Loop through every
06:47 - column and loop through every row row to
06:50 - look at every spot in this depth array
06:53 - so if I come back over here we can now
06:55 - add that to our code so for example I
06:58 - can say right here
07:00 - for every X from zero to and I'm going
07:03 - to say image.
07:04 - width uh not I and I'm going to say for
07:09 - every
07:14 - Y and again if this this idea of a
07:17 - nested Loop is confusing to you I would
07:19 - refer back to some previous videos about
07:21 - image processing but what we can see
07:23 - what I would like you to see here is how
07:25 - this is the loop to say I want to look
07:27 - at every single depth pixel so it could
07:30 - be I want to search for the closest one
07:32 - or I want to search for the for the the
07:35 - furthest away one right or I want to
07:37 - just visualize every pixel in
07:39 - three-dimensional space so for every X
07:42 - from zero to the width for every y from
07:44 - zero to the height and now what I could
07:46 - do is say what is that index how to
07:49 - apply that formula now x + y * image.
07:55 - width and then the color is the color
07:59 - that's in that pixel even though it's a
08:01 - depth value it's turned into a grayscale
08:03 - color is the image. pixels at that index
08:08 - so this is now a loop that you will see
08:10 - in just about all the examples I intend
08:12 - to make today where I'm looking at every
08:14 - single Pixel and finding its index into
08:17 - the depth the the into that depth image
08:20 - and pulling out the color that's there
08:21 - so what might I do with that I could
08:24 - make a point in three-dimensional space
08:26 - Let's do let's okay let's do something
08:29 - here let's turn what we're seeing on the
08:31 - screen let me run this let's turn this
08:34 - into a lower resolution grid so let's
08:36 - look what I'm going to change this
08:38 - program to do right now is just look at
08:40 - every 10 pixels or every 20 pixels and
08:42 - draw a rectangle with that particular uh
08:44 - color there so let's do that real quick
08:47 - and I'm going to say so what one thing
08:49 - I'm going to do is I'm going to change
08:50 - this to uh brightness I'm just going to
08:52 - look at
08:54 - the um I'm going to look at the
08:56 - brightness of that pixel which is just a
08:58 - single value between zero and and 255
09:01 - and I want to draw a rectangle at XY now
09:04 - I'm going up by one pixel so what I want
09:06 - to do and you'll see this in some of my
09:08 - examples is I want to introduce a
09:10 - variable called Skip and I'll say skip
09:12 - equals 20 because that's how many pixels
09:15 - I'm going to skip instead of looking at
09:16 - every single Pixel right now I'm going
09:18 - to look at every 20 pixels um and then
09:21 - I'm going to draw a rectangle at every
09:23 - 20 pixels and I'm going to fill that
09:25 - rectangle with that particular color so
09:28 - if we run this we should see exactly
09:30 - what I had before but just it's much
09:32 - lower resolution so that you can see I'm
09:34 - still looking at all of the pixels
09:37 - finding its color uh uh from the from
09:41 - the pixel array and then drawing a
09:42 - rectangle of some size arbitrary size 20
09:45 - at that spot so you can see as I move
09:47 - around in front of the connect you can
09:49 - see my hands here and you can start to
09:51 - see like ah this is the kind of thing
09:53 - that computer visionwise it might be
09:55 - easy to pick out my hands as the sort of
09:57 - singular Blobs of black shapes up in
10:00 - front so um okay so this is getting us
10:02 - started now what's the thing that you
10:05 - might want to do next let's think about
10:06 - how you might turn this now into
10:08 - something that's three threedimensional
10:11 - so what I might do here is say like
10:13 - first of all I want this program one
10:15 - thing I should note by the way is the
10:17 - connect the depth image that you're
10:18 - getting from the connect version 2 has a
10:20 - width of 512 and a height of 424 with
10:24 - the version one it's actually 640 by 480
10:27 - which is a little bit strange that it's
10:28 - higher resolution but it's a little
10:29 - faster a little more accurate here I
10:31 - guess there's like this beam of sunlight
10:33 - coming in which is so lovely okay so I'm
10:35 - going to add p3d because what I want now
10:37 - is for this program to actually start
10:39 - rendering something in 3D the other
10:41 - thing that I'm going to need to do is
10:43 - add push Matrix and pop Matrix because
10:47 - what I want to do is not is set the
10:51 - location of these uh
10:55 - squares not by uh the coordinate of the
10:58 - rectang angle but by through a
11:00 - translation because ultimately I want to
11:02 - translate along the three-dimensional
11:03 - axis so I use push Matrix and pop Matrix
11:06 - to save and restore um that
11:08 - transformation State these might be
11:10 - Concepts that are unfamiliar to you I
11:12 - will refer you to a different video
11:14 - about Transformations but you can see I
11:15 - have the same exact thing here so
11:17 - instead of drawing the rectangle at XY
11:19 - I've now translated to XY and drawn the
11:21 - rectangle at 0 0 why am I doing this
11:24 - because now I could add something I
11:27 - could add a z here so the first thing I
11:29 - might try is just say okay well what is
11:30 - this Z let's make this Z equal to
11:34 - brightness and you can see here what do
11:37 - we got we've got as I uh it's kind of
11:40 - hard to see but you can see some uh some
11:43 - rectangles are further in front than
11:47 - other ones that are further away so the
11:48 - brighter ones are closer and the darker
11:50 - ones are further back this isn't really
11:53 - this isn't really doing me any good
11:55 - because actually I think what might make
11:57 - more sense is to have the closer ones be
11:59 - more forward and the further ones way be
12:02 - more behind so I want to essentially
12:04 - position all these rectangles about
12:06 - where they actually are in physical
12:08 - space and so to do that I might do the
12:10 - map use the map function right because
12:12 - we know the brightness has a range
12:14 - between zero and 255 but what I want is
12:17 - to now have a z value this zv value
12:20 - that's coming out of the screen I want
12:22 - things that are dark to appear close and
12:25 - things that are bright to appear far
12:26 - away so maybe I'll have the things that
12:28 - are dark to be at
12:30 - 150 units along the z- axis and the
12:33 - things that are bright to be at negative
12:35 - 150 so I'm taking that range that's
12:37 - between 0 and 255 and flipping it to
12:40 - have it map between 1 15 150 and
12:43 - negative 150 and then also let's draw
12:45 - those rectangles a little bit smaller
12:48 - and honestly I think it might make sense
12:50 - to also just make them all white so
12:55 - let's sort of see what we get here uh oh
12:57 - and I have the image behind it um so you
13:00 - can see here as I come forward uh boy
13:03 - this is uh this isn't the best
13:05 - demonstration um let me uh let me do
13:08 - something here first let me let me
13:10 - comment out drawing this image and uh
13:13 - let's let's leave the colors back in um
13:15 - but I but let's um let's invert the
13:17 - colors which I'm just going to do that
13:19 - way try to make this a little bit better
13:21 - so you can see here as the problem is
13:23 - there's this wall here which is what
13:24 - you're seeing there ah and something
13:26 - else is coming up but skip this version
13:28 - of java let's see if I can turn the
13:30 - connect a little bit this way and you
13:31 - can see as I go back you can see as I
13:34 - come forward we're getting these uh
13:36 - slightly larger uh larger rectangles now
13:39 - there's a moment actually where the
13:40 - connect stops seeing anything and that's
13:42 - if I go way too close to it um but it's
13:45 - since it's giving me a value of zero
13:47 - it's actually still working here so you
13:48 - can see that as I move the hand that
13:50 - things are coming closer and maybe this
13:52 - range isn't so great I should have
13:54 - practiced this beforehand so let's like
13:56 - make that range a bit more extreme
13:59 - uh and you can see ah this is getting a
14:01 - little bit better now so you can see as
14:03 - I come forward these rectangles get a
14:04 - little bigger there's a lot of noise
14:06 - here I don't have this connect in like
14:07 - sort of a nice spot because there's all
14:09 - this other stuff in the room like this
14:10 - wall and this table and this laptop but
14:12 - I'm kind of you can kind of see my form
14:14 - here uh and my hands there as they come
14:16 - forward so this is the basic idea of how
14:19 - you might start working with the connect
14:21 - I'm going to try to show you some more
14:22 - practical uses of the connect and the
14:24 - next set of videos but this is the basic
14:26 - idea of looping through all the pixels
14:28 - look looking at their brightness value
14:30 - and mapping it now the truth of the
14:31 - matter is if if I was really doing this
14:33 - what I probably would want to do is
14:35 - actually just look at that raw depth
14:37 - data if I'm trying to visualize the data
14:39 - in 3D this is not exactly the quote
14:41 - unquote correct way of doing it so
14:43 - that's what I'm going to show you in the
14:44 - next video how instead of using the
14:46 - depth image how you might make use of
14:48 - the raw depth data those numbers which
14:50 - are between zero and 4500 okay thanks
14:53 - for watching and I'll maybe see you in
14:55 - the next video