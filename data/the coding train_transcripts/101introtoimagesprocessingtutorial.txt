00:01 - Hi, this is a new set of videos all about...
00:05 - I know you can't wait to hear what this is about.
00:07 - Loading images... in Processing. Looking at the pixels of those images. What if those images are...
00:13 - video images coming from a live camera, coming from a movie file.
00:17 - What are the kinds of things we can do to load, display, manipulate, process, analyze images and pixel data in Processing.
00:23 - So that's what this set of videos will be about. There's maybe going to be somewhere between five and nine of them and...
00:30 - What we're going to do here, and this first one is just start with the total and complete...
00:35 - Basics. The very first thing we need to do in Processing
00:39 - to display an image on the screen is have some sort of variable that can store a reference to all the information associated with that
00:45 - image. The variable that we're going to need. We're going to need is going to be of type PImage.
00:50 - PImage
00:54 - PImage is a new data type.
00:56 - I mean you've probably seen it before maybe you haven't it doesn't really matter. The point is, there is a PImage class.
01:02 - Just like at one point or another we wrote a bubble class or a ball class or a
01:06 - frog class. We wrote all.. We were writing classes to encapsulate
01:10 - information and data to store stuff that we want to move around the screen.
01:13 - This is a case where we don't need to write a class to store all the information about an image.
01:17 - This is a class that's built into Processing
01:20 - for us and we can just make objects we can make instances of PImage objects.
01:24 - So we have a variable let's just call it img. It's of type PImage. Now...
01:31 - How are we going to fill that variable? We need an image.
01:35 - There are lots of possibilities here. We could make a blank image and set all the pixels of that image according to some algorithm.
01:42 - We could pull an image from the web, from an API, from Google image search, Flickr...
01:47 - From any sort of service that you could imagine.
01:50 - We could... or what I think we'll do right now, which is the simplest thing is just load an image from the hard drive.
01:56 - Let's just get an image that we have on our computer.
01:58 - We want to load that image up and put it into our Processing sketch. So how do we do that?
02:04 - This is something, a point that I want to make is, this is a case
02:07 - where the code we're about to write to load this image should really happen in setup().
02:12 - Pulling the image off of a hard drive loading it into memory so that the computer can draw it into the screen.
02:17 - This is a slow process.
02:18 - Sure, we might want to draw it continuously. That will happen in the draw function.
02:22 - But that process of getting it in the first place
02:25 - Is something we want to do at the beginning of the program. Obviously there's lots of other
02:29 - circumstances where as the program's running we want to retrieve some images and will at some point
02:33 - hopefully look at some other scenarios. But for right now for our purpose. We simply want to say load...
02:41 - Image.
02:43 - Then we need can; you see all this? I think you can. We need the file name to go in here. The file name is
02:49 - going to be a string.
02:51 - Which means the characters that make up the name of that file, inside quotes. Now, where's this file coming from?
02:58 - Processing sketches if you've probably seen this before
03:00 - but just in case you haven't. Processing sketches are this... this sketch that I have called image1. It lives somewhere on my computer.
03:09 - In fact I can go up to here to Sketch.
03:11 - Show Sketch Folder and now I have
03:15 - in the Finder. I have my sketch folder right here.
03:19 - And there's the file that has all the code for my stuff.
03:22 - So I want to make a folder that goes in here called data. This data
03:28 - folder... This is where I'm going to put images. I want to put things assets, things that I want to load, it could... later
03:35 - we're going to see data files, sound files,
03:37 - movie files, all sorts of things. Font files can go in there. Anything that I want to load and use in my Processing sketch.
03:44 - Data... The data folder is a good place to put it. Once we have an image in that data folder.
03:49 - We can load that image, and we've got a reference to it in the variable. Now...
03:54 - an image is an object. What is an object? It's a thing
03:59 - that encapsulates, that brings together data and functionality. So let's try to think what...
04:06 - is the data of an image. What are the things that make up an image? Well one thing are the pixels.
04:12 - This...
04:14 - You know, really if, you're watching this right now
04:16 - you can really just turn this video off and skip to the next one because the next one... or a couple from now
04:21 - we're going to look at how to manipulate the pixels of an image or make up the pixels of an image from scratch. That's going
04:26 - to be a very powerful technique for
04:30 - coming up with new ways of drawing and making stuff happen on the screen. The other pieces of information that an image might have...
04:36 - It does have in fact. Is the width and height.
04:39 - This, these are crucial pieces of information. The... the width and height comes from the source image itself.
04:45 - What are is the pixel resolution of that image? Is it some low resolution image,
04:48 - we downloaded off the web. Did it come from some fancy high resolution camera. The pixel width and the pixel height
04:54 - this is a sort of key factor. One thing you want to remember, is we've got a little Processing window...
04:59 - You know even if it was fullscreen..
05:00 - Maybe it's at the most like 1920 by 1080.
05:04 - We don't need
05:05 - Massive high resolution images to display on the screen and in fact those might bog our program down and make it run slow.
05:11 - So something you might think about if you're loading a ton of images in your program is sampling them down in advance.
05:17 - So that you have lower resolution images to work with so that your program rus faster and smoother.
05:21 - Okay, what is some functionality that might come with an image?
05:27 - Well a piece of functionality that we really want is to draw that image to the screen.
05:32 - Processing if you think about the way, it works...
05:36 - Doesn't have too many objects that draw themselves to the screen. This is something we've been doing ourselves, as we've been making examples.
05:43 - We make a bubble object that has a display function, but the Processing draw functions are just
05:48 - commands really that we're executing. rectangle, ellipse,
05:51 - line. The function for drawing an image to the screen is actually basically
05:57 - identical to rectangle. Rectangle if you remember needs an x and a y.
06:02 - Which references the... which...
06:04 - Indicates the top left corner. Hope, I'm recording this, I am. The top left corner of that rectangle.
06:10 - and then it needs a width and a height and that rectangle will appear
06:14 - somewhere in our window. Once we call the rectangle function. The image function which would happen
06:20 - in the draw loop.
06:23 - Is exactly the same as rectangle, in that we can give it an x, a y, a width and height.
06:29 - This is where that image, that rectangle will go. With what width and what height the big difference here is. We....
06:36 - we now have the opportunity to reference...
06:39 - an image that we've loaded from the hard drive...
06:42 - and that image itself will appear inside the rectangle.
06:46 - This means an image can be moved around the screen.
06:50 - Just like anything else is. Using variables and algorithms and all sorts of fancy things. It can be repeated in a loop and tiled.
06:57 - Anything you could do with shapes, you could do with images.
07:00 - The other thing that's interesting to note here is I spent all this time saying...
07:02 - Oh, the image has a width and a height that comes from the raw source file itself.
07:07 - Yes that's true, but somehow the image function... I can give it a width and height.
07:11 - Processing will dynamically resize your image. Stretch it, skew it, shrink it, grow it. Whatever you do, whatever you...
07:19 - want... based on however you specify that width and height. By the way these are optional arguments. If you just give the x y...
07:24 - You'll get the image at it raw
07:27 - resolution. The other thing I should point out, which you would probably write before you draw the image that I'm drawing it down here.
07:32 - Is just as rect mode has a way of saying: "Hey actually I want the reference point for that rectangle to be the center."
07:41 - There's a function called image mode. Where you can now reference the image
07:45 - by... You can now draw the image relative to a different part of it. Like it's center. Center.
07:52 - There we go. Okay. Let's.... I don't know we've just been going on for way too long...
07:56 - and I don't know if you're still watching but let's go and actually implement some of this in a quick sketch.
08:01 - We'll wrap this video up, and then we'll go to the next one.
08:06 - Now I'm back over. I'm a little out of practice. I haven't recorded one of these in a while, okay.
08:11 - All right, so let's go and find an image. I really should have done this in advance.
08:15 - I can't believe I'm doing this in video. Bear with me.
08:17 - I don't know let's think of a cute animal that we like. Like a hedgehog. I don't know is that a cute animal?
08:22 - I don't know why I thought of hedgehog.
08:24 - Hedgehog not a hedge fund...
08:26 - That...
08:27 - whoops no video cell
08:30 - Ok, so yeah, that's kind of a cute animal, so let's get this hedgehog here
08:36 - View image, this is a little bit ridiculous. I...
08:40 - I just have to keep going with this. I'm going to save this image, and I need to find my Processing sketch.
08:46 - Which I have in documents...
08:48 - Processing... I really should have done this advanced
08:53 - pixels... image1... data. All right and let's just call this hog.jpg there we go. Now...
09:00 - I'm back into my sketch, and I'm going to say a PImage. image.
09:06 - image equals load image
09:08 - hog.jpg and then image, hog, zer,o zero,
09:13 - background,
09:15 - zero and let's make our image
09:18 - Our, sorry, sketch like actually be a little bit bigger and let's run this. Okay ah so what happened?
09:25 - What happened first of all, I wrote image hog
09:28 - but I called my variable name img. Now this actually brings up a little point.
09:32 - I don't know, I  don't really love the
09:33 - variable name img because then it's just gonna lead me to say img1, img2. Actually, even though it is an image
09:38 - I think it actually would be useful to name it
09:41 - Something about what it's going to display, so I'm going to call it hog.
09:45 - I'm gonna save this and I'm going to run this and boom we have I can close the browser now. We have..
09:52 - a Processing sketch that displays...
09:56 - the image yay, okay. This is pretty exciting. It's just sort of the background of the sketch.
10:01 - I could start drawing things on top of it...
10:03 - You know... like if I wanted to try to figure out how to....
10:07 - give it some green eyes. I could kind of like try to guesstimate
10:11 - Where its eyes are and kind of put a certain... hey wow! That was amazing! I got really really close towards it's eye...
10:16 - I just by looking. All right that was... I swear I did not practice that in advance.
10:20 - Okay, let's put this back over here.. Now...
10:23 - Let's look at a few more slightly more interesting features...
10:27 - for example....
10:30 - I didn't actually include the width and height as I mentioned you could do...
10:33 - So I'm going to actually give the with mouseX and the height mouseY and we can start to see now
10:39 - I'm able to interactively skew the size of the image.
10:43 - Another thing that I didn't mention a rectangle, right... You could set the color for a rectangle using fill. fill(),
10:50 - right here I made an ellipse that was green. Zero comma
10:53 - five comma zero. The equivalent for an image is actually the tint function. So the tint function...
10:59 - will color that image with a different tint, so to speak. So if I say to 255, 0, 0.
11:06 - We're going to see a very red hedgehog right now. This hedgehog... Now... what's important to realize here is...
11:13 - We didn't actually
11:15 - affect the colors of this image.
11:17 - We are just affecting which part... which parts of the image's existing color are we drawing.
11:24 - Every single pixel has an RGB color. I am now saying take for every single pixel
11:30 - ramp the green all the way down to zero, ramp the blue all the way down to zero. So...
11:35 - the what I'm getting is the kind of the red values of that image.
11:38 - And you can see here if I were to do something like put mouseY....
11:43 - you know, as I go down the image. I start to get the green parts of the color and
11:49 - and if I put mouseX
11:51 - into blue...
11:55 - I can start to get... Now I'm actually seeing the actual image itself. It doesn't mean it's I'm adding blue or I'm adding green.
12:01 - I'm just bringing up the actual existing of pixel values of this image itself. This is what happens when you don't like....
12:08 - Practice it and then do the video. I'm just rambling. Um, so... I want to wrap this one up.
12:13 - I guess when I've done these in the past they usually kind of give a little
12:16 - thing that you might think about trying to do before you want to go on to the next one. What I would say to you right
12:20 - now is set this up for yourself. Find an image, download it, get in your data folder.
12:25 - See if you can load it. See if you can draw it and see if you can come up with a more creative
12:29 - or inventive way of affecting its position, its size and its color through tint.
12:35 - So think about the same thing you first did... I had a bouncing ball moving around the screen or a bubble
12:40 - floating and moving back and forth floating up. You could do that with an image now.
12:43 - Another tidbit that I'll just mention if you load a png image that has a transparent layer some.... in the you can load jpegs
12:51 - pngs and probably some other formats. That tends to be what I use jpegs and pngs. If that image has transparency...
12:57 - Processing will retain that transparency, so your image doesn't necessarily have to be.... It will always draw as a rectangle
13:05 - but we might not see it as so rectangular if there are trans.... There's a kind of transparent edge to it.
13:10 - We'll see how to add our own transparency to it just later. Okay. Thank you for bearing with me.
13:15 - This is a video that I've recorded and I will hit stop and then record the next one in about two seconds.