00:00 - [Music]
00:01 - hello again it's not the afternoon if
00:05 - you are watching this right now and did
00:07 - not watch this morning's first of all
00:09 - who knows where you are why you are
00:11 - watching this right now this is a live
00:13 - stream that I do every Friday in New
00:20 - York City my name is Dan the coding
00:23 - train this is the second part of a live
00:25 - stream that I started this morning so I
00:26 - spend about an hour and a half or close
00:28 - to two hours starting a project which I
00:30 - will get back to what that is and now
00:32 - I'm back much more tired this morning I
00:38 - felt like was one of those rare sessions
00:40 - and I actually felt went well usually
00:43 - whatever live stream is over I just feel
00:46 - like oh and I'm like sort of like
00:47 - miserable about it for the weekend and
00:49 - then you know post the edited content
00:51 - get it get that content up by the
00:53 - beginning of the following week on
00:55 - Monday or Tuesday and people write nice
00:57 - comments they go maybe it wasn't so bad
00:59 - but this morning actually felt like it
01:01 - was going well but right now I just feel
01:03 - like got to wake up got to get some
01:05 - energy so if you didn't watch this
01:08 - morning's live stream you could go watch
01:10 - it now or you could just keep watching
01:14 - right now and I will talk about a little
01:15 - bit what I did so far echo 34 thanks for
01:21 - your comment to be honest I haven't even
01:23 - sat down and looked at my email since I
01:25 - pressed stop on the live stream so I
01:27 - press stop on the live stream and I went
01:29 - to meetings and other things all the way
01:31 - through up until about 10 minutes ago
01:33 - and then I raced back up here so I will
01:36 - have to check out anything that anybody
01:37 - tweeted to me or emailed to me or github
01:42 - issued to me later all right so I'm just
01:48 - gonna jump right in on all of the
01:49 - introductory stuff I kind of did this
01:53 - morning Simon thank you for your
01:58 - suggestion about barns Leafs fern I will
02:02 - not be able to get to that today but I
02:04 - would love to do that at some point for
02:06 - sure so I'm gonna try to really if I I
02:08 - should be so lucky as to finish the
02:10 - project I started this morning so I
02:12 - don't think there'll be any separate
02:13 - coding challenge today other than the
02:15 - the project the tutorial project that
02:17 - I'm working on right now okay so let me
02:23 - just abused use a minute to we take a
02:28 - minute here to try to figure out where I
02:31 - was when we left left off this morning
02:34 - so I talked about in general the idea of
02:38 - what I'm doing I run in place
02:47 - do a couple jumping jacks that'll help
02:49 - blood flowing to the brain all right so
02:53 - we're working with a neural network
02:54 - system everyone keeps asking me what's a
02:56 - toy neural network I probably should
02:58 - just get rid of that word I think the
03:00 - reason the word toy is there and I want
03:02 - to race it right now because it'll be a
03:04 - continuity error but um the reason why
03:06 - the word toy is there is really just out
03:08 - of my own sheepish Ness and I want to
03:10 - emphasize that this particular
03:12 - JavaScript implementation is meant to be
03:15 - for educational purposes only and not
03:19 - only but it's meant to be for
03:21 - educational purposes and I'm not really
03:23 - worrying about it being a robust
03:26 - optimised piece of code and it's kind of
03:28 - like a caveat for all of those those
03:31 - people wonderful people on the internet
03:33 - who like to leave me comments about how
03:35 - poorly I've written my code which I
03:37 - admit all of you are right very poorly
03:41 - but that's the way I like it and because
03:47 - what would you have to learn if I didn't
03:49 - write poor code that you could think
03:50 - about how to improve and that I could
03:52 - learn to think about how to improve and
03:55 - also to differentiate it from the neural
03:58 - network functionality that is part of
04:01 - these other two JavaScript libraries
04:03 - that I will start using more and more as
04:05 - we get to projects of larger scale
04:08 - that's why the word toy is there okay so
04:13 - hopefully I wasn't too heavy-handed in
04:16 - my quick my just my brief discussion
04:20 - about the ethics of working with data
04:24 - and machine learning
04:26 - any feedback or thoughts about how I
04:28 - could approach that topic better I'm
04:31 - open in all ears about and so I talked
04:36 - overall about the project then I looked
04:39 - at the Google quick-draw dataset and the
04:44 - last thing that I did was create this
04:46 - processing sketch which when I run it
04:49 - would generate a binary file all right
04:54 - this is going to take a while there any
04:58 - other comments here now well general
05:02 - goes and retrieves all these doodles
05:04 - from the quick-draw data set and then
05:07 - writes the binary file back out to a
05:10 - smaller one and that is whoops that is
05:19 - here so I have cats a thousand rainbows
05:22 - a thousand trains a thousand I'm a
05:24 - little bit worried about these
05:25 - categories I think that cats and the
05:29 - rainbow will differentiate quite well
05:32 - and I guess well let's just see what
05:34 - happens all right so now what I need to
05:40 - do is I need to get set up here so I am
05:43 - going to go into a neural network coding
05:51 - train examples I'm going to start from
05:54 - the emne stun and then the copy whoops
05:58 - I'm gonna cop ah I'm gonna copy it I'm
06:03 - going to call this one doodle
06:06 - classification oh maybe I'll call it
06:10 - doodle classifier yeah whatever doodle
06:11 - classification works I don't want the
06:15 - amnesty data
06:16 - what's file dot txt that was me testing
06:20 - I don't want this I want the libraries
06:26 - the index of HTML and then I want oh I
06:35 - need my data files so I need to grab
06:38 - from the
06:39 - processing sketch these three data files
06:43 - and move them to the p5 example close
06:50 - close close at no no then I need to go
06:53 - to terminal and I need to open this up
06:58 - in terminal and to go here and sketch
07:05 - touch ok so now I want to take out
07:09 - everything so I'm just getting myself
07:17 - set up just delete everything let's say
07:31 - no loop so it doesn't loop if it doesn't
07:34 - need to and I'm probably gonna forget
07:35 - that I put that in there later when I
07:37 - wonder why my code doesn't work let's
07:39 - just get rid of draw and am i running a
07:44 - server already looks like I am let's go
07:49 - to the browser like in randomized
07:51 - terminal why is this that this I
07:56 - definitely want more space here whoops
07:59 - this by the way if I had more free time
08:03 - I would do this before I start live
08:04 - streaming but ok so let me turn this
08:08 - over here alright so I don't need this
08:11 - anymore I don't need I might I don't
08:15 - need this anymore I don't need this
08:16 - anymore I don't need this anymore and
08:19 - what I want to do is go to localhost
08:22 - examples doodle classification ok
08:25 - so interestingly there is some stuff in
08:29 - the HTML file let's take this out so I
08:37 - should think here's the thing let's
08:39 - think about this for a second let's make
08:43 - a plan when I previously did my M nest
08:47 - example I don't know if I would say
08:51 - wasted but I spent a lot of time
08:53 - I'm dealing with the Dom manipulation
08:55 - aspect of trying to do some reporting
08:58 - and the thing that I want to demonstrate
09:01 - better this time
09:03 - is I think I'm gonna separate the
09:07 - training and testing more precisely
09:09 - especially cuz I'm gonna use a very
09:11 - small data set so I'm going to basically
09:15 - train and run testing separately so I'm
09:20 - gonna have the whole thing run through
09:22 - the whole training set a certain number
09:23 - of somebody please tell me how do you
09:28 - pronounce this word epoch a Polk epoch
09:36 - epoch I like to say epoch you poach I
09:40 - like my eggs he poached I think it's
09:44 - epoch but I want to talk about that term
09:47 - epoch when you stake you should know
09:53 - that when you say first one sounds good
09:55 - to me I have no idea what you're
09:57 - referring to because that comes way
09:58 - after I was speaking ye POC a POC a POC
10:03 - epoch I could go to my word next
10:07 - tutorials so so what do I need I think
10:11 - I'm gonna just console.log stuff and
10:12 - actually really leave stuff out of the
10:14 - interface and the interface I'm just
10:16 - gonna show the doodles and then and then
10:19 - create a canvas that I can draw onto the
10:21 - way you say you think you say it but
10:24 - what if I don't know the way that I
10:25 - think I say I say it epoch epoch is good
10:28 - excellent so let's get rid of this let's
10:35 - not let's try to do everything we can to
10:38 - make use of my friend and your friend
10:42 - the console this is doodle classifier
10:49 - sketch now one thing I am going to do
10:55 - not part of this first step of the video
10:59 - is I'm going to create a new file and
11:00 - I'm going to call this file load bytes
11:04 - dot I'm just call it load binary
11:08 - dot J s all right so one thing oh wait
11:14 - the u.s. is different from the UK wait
11:18 - hold on all right I'm gonna I'm gonna
11:21 - take some time with this here I don't
11:24 - know if you'll be able to hear this well
11:30 - so this is UK and this is us and as we
11:35 - all know the UK way is the correct way I
11:38 - mean duh so I'm gonna say epoch all
11:44 - right no I'm looking my email which is
11:49 - the worst idea back to the slack channel
11:52 - chat ok now so you might have noticed if
11:58 - you were paying attention that in
12:00 - processing I use a function called load
12:04 - bytes which loads a binary file into an
12:07 - array of bytes so I might then decide to
12:12 - go to and look at p5.js as a project and
12:19 - [Music]
12:20 - say like okay well let me look for load
12:24 - bytes and by the way I could probably
12:26 - look in the reference this is would be
12:27 - where I would start but I'm skipping a
12:29 - few steps here so I'm gonna search the
12:31 - repository and we go to the code oh it's
12:33 - actually not even in the code so in an
12:36 - earlier version it was there was what I
12:40 - was looking for us there was like a
12:41 - little function signature function load
12:44 - bytes and then to do so what I'm gonna
12:46 - do is instead go to issues and look at
12:52 - this two days ago an implementation of
12:57 - load bytes open by somebody named let's
13:01 - say how do you pronounce that I think
13:02 - it's I think the proper pronunciation is
13:03 - chief Vaughn she's mine so I'm gonna
13:07 - look at this and I'm going to just grab
13:12 - this little this little thing here that
13:15 - I'll come back to in a minute I'm gonna
13:17 - put it in here I'm gonna change a couple
13:20 - things
13:20 - I didn't like about my implementation
13:26 - and I am going to I will speak about
13:29 - this in a moment just bear with me then
13:32 - I'm gonna go here and I'm gonna change
13:35 - this to load binary then I'm gonna go
13:39 - here and we're gonna we're gonna add
13:43 - preload and what am I looking for
13:49 - under data cats 1,000 cats 1,000 in so I
14:03 - think this is not going to work well
14:05 - let's see what happens
14:10 - and I need the data directory and then I
14:13 - would set up I want to say console.log
14:15 - cats yeah so we're stuck here so let me
14:20 - see if I can fix this
14:21 - just bear with me for a second then all
14:23 - will be revealed self decrement preload
14:31 - okay so I need this a little bit of code
14:36 - this is what I forgot and what is self
14:43 - refer to Oh cuz I need to refer to this
14:47 - oh because this is using HTTP do but can
14:51 - I just say P 5 P 5 prototype load bytes
14:56 - that's what I'm oh oh because I could
14:59 - say pre 5 prototype download bytes I see
15:03 - alright hold on everybody I'm gonna do
15:06 - this in a different way because I am NOT
15:08 - writing a library of P 5 prototype load
15:10 - bytes and then I'm going to do the awful
15:15 - not but I could change this with I could
15:18 - use es6 here let's do this just
15:21 - everybody hold on for a second does that
15:24 - work get ray buffer I mean maybe I could
15:27 - change it to this because it might as
15:30 - well use HTTP do
15:33 - decrement preload at the end of the
15:35 - callback huh let's see what this does
15:42 - load bytes is not to find y but I have
15:50 - to find it what am I missing
15:59 - this is what I wanted to not do spend
16:03 - all my time trying to deal with the data
16:04 - loading oh I have an error line 3 equals
16:08 - function hello hello ah yes okay
16:15 - wonderful look at me and look at me I am
16:20 - person now look at this look at me look
16:23 - at me everybody aren't you excited by
16:25 - this I I looked at this github issue
16:35 - which had this weird little VAR self
16:38 - equals this so that the this reference
16:40 - would get stored because this is some
16:42 - kind of callback thingy and I said oh no
16:44 - oh no I know about the arrow function I
16:47 - know about the arrow function which
16:49 - retains the context of this but sadly if
16:54 - I'm actually going to submit this as a
16:55 - pull request which I would like to do I
17:01 - am going to need to do it the other way
17:07 - because p5 the source code doesn't use
17:10 - es6 yet so let's say self so I'm gonna
17:13 - go back to the other way and all again
17:16 - I'm gonna get to what I'm doing here in
17:18 - a second all right great now I have one
17:20 - question why I'm gonna explain what's
17:22 - going on in a moment but I have one
17:23 - question for those of you who might be
17:25 - watching who know about this stuff
17:27 - better than me so here's what's going I
17:32 - apologize this is not super beginner
17:35 - friendly and I'm skipping a lot of steps
17:37 - here and I try to avoid this but
17:39 - something weird is going on here where I
17:42 - have to I'm creating this object because
17:44 - I have to make this object that I'm
17:46 - gonna
17:46 - fill in a synchronously here when the
17:50 - data is ready and then but return down
17:55 - here like I'm returning a reference to
17:58 - it kind of instantly so the only way for
18:02 - that reference not if I can't make I
18:04 - can't do this right if I do this this
18:07 - reference will be lost when this returns
18:09 - and you won't see the array but is there
18:11 - a less awkward way can I make a new
18:15 - empty array you int eight array up here
18:20 - fill it with the array buffer here so
18:22 - that what I'm returning is not an object
18:23 - with the bytes property that's my
18:25 - question
18:28 - oh yeah and so hold on VAR I just want
18:31 - to leave this es5 because yeah me I am
18:37 - so B it's a the comment you're making
18:39 - about this being a sort of like awkward
18:40 - weird thing I maybe we can have a
18:44 - discussion about how to improve this
18:46 - because I I agree this may be perhaps
18:48 - this could be something that could be
18:49 - improved but I'm gonna just leave it as
18:51 - is right now and then if I do this nope
18:59 - what did I do wrong oh why cats dot
19:09 - bytes should be that why is it undefined
19:17 - oh it didn't wait for preload no it did
19:25 - oh that's weird huh I could know I can't
19:34 - return data dot bytes I don't think so
19:38 - because it doesn't won't exist data dot
19:40 - bytes doesn't exist yet when I'm
19:41 - returning it I don't know the array the
19:48 - length of the array and Load bytes
19:49 - that's correct
19:50 - I don't know the length of the array
19:52 - until right here I'm gonna leave this
19:58 - but why
19:59 - I'm missing something about I'm missing
20:02 - something really silly why is it that
20:05 - I'm getting undefined here it's it's not
20:16 - preloads not waiting so I mean a setup
20:22 - is not waiting for preload to finish do
20:24 - i maybe I need to register it do I need
20:30 - to do that let's see there we go so I
20:35 - forgot about that
20:35 - I have to register a preload method and
20:37 - then decrement related ok we've done it
20:40 - I'm so so so so want to make this a pull
20:44 - request to the p5 library right now but
20:46 - that will send me off on a massive
20:47 - digression and yes I know I can use a
20:54 - promise and I could do all the es6 thing
20:57 - I am becoming the person who does that
20:59 - stuff and I would I will but at some
21:02 - point we have to that I think it's
21:04 - interesting it's a useful discussion to
21:06 - have that p5 adopting es6 but it just
21:09 - it's a big library and that's a big
21:10 - project to make that happen so ok great
21:18 - this is good enough for me right now so
21:21 - just to say what have I done what I am
21:24 - doing is I want the code to look like
21:27 - this because ultimately when load bytes
21:31 - work in p5 it will just the code will
21:36 - look exactly like this but load bytes
21:38 - doesn't currently work in p5 so I have a
21:40 - temporarily an extra file with a working
21:44 - version of the load bytes function that
21:47 - I have written and this is just using
21:48 - some native JavaScript to do a get
21:52 - request on the file and it's
21:54 - participating in something that's pretty
21:55 - awkward and weird but this preload this
22:01 - preload structure for p5 that allows you
22:05 - to have functions that have to finish
22:06 - before set up triggers ok
22:12 - I'm get my phone is buzzing all right um
22:25 - all right stop stop looking at my watch
22:28 - I need to I need to configure my No -
22:31 - hold on let me configure my
22:32 - notifications correctly for once cuz
22:35 - we're gonna I'm gonna be here for a
22:36 - while so how do i notifications no way
22:43 - wait I need to go to my Fitbit app maybe
22:46 - and um and look for notifications no
23:03 - settings I'm getting zillion messages
23:12 - that I want to turn off oh wait I
23:14 - haven't no if I don't I can't no this is
23:17 - connected to my own ology it's just what
23:21 - it just makes things worse these
23:25 - brilliant ideas I have of how to
23:26 - effectively use technology I only slept
23:30 - five hours last night that's not good
23:32 - did I get any deep sleep I'm sure you
23:34 - guys are really interested in this right
23:35 - now yeah yeah I did actually
23:38 - okay um settings No okay forget it
23:45 - all right um all right I'm going to move
23:48 - on now I will hope the text messages
23:53 - will stop
24:01 - what is going on in the chat I know the
24:05 - mic ISM you did okay all right so line
24:12 - 10 has let's I mean this is thank you
24:17 - all right
24:25 - okay
24:40 - all right all right all right everybody
24:46 - all right everybody all right everybody
24:48 - let's get off the es5 es6 thing because
24:51 - you know we all should be using es 71
24:53 - that is my favorite yes so this video is
25:07 - going to be about this next piece is all
25:11 - about getting the data from the data
25:16 - into javascript and i'm going to just
25:21 - open this up to demonstrate to start
25:26 - from here okay plus like who wouldn't
25:34 - want to have this nice little image of
25:38 - cats
25:38 - alright alright everybody oh yeah a part
25:44 - of me wants to a I should probably just
25:48 - I'm afraid of the you int eight arrays
25:52 - as well but I'm gonna kind of leave it
25:54 - be I think for right now actually I want
26:01 - to investigate something up I'll let it
26:02 - be
26:11 - all right all right being the chat I'm
26:14 - reading a chat all right all right I
26:26 - stopped it okay yeah okay let's use
26:32 - something different what if I think what
26:39 - if I do what if I start a hundred later
26:44 - holy get a clean set of cats let's see
26:54 - all right
26:56 - is this a clean set of cats anybody see
27:00 - any offensive or inappropriate drawings
27:03 - in here I do not I like that this one
27:06 - says meow now there are a thousand most
27:09 - are nine hundred more but at least in
27:11 - the image that I'm looking at it's not
27:14 - popping up with something inappropriate
27:16 - so let me quickly just replace our other
27:23 - cats with these okay somebody can take
27:33 - the time to go flag one of those as
27:35 - inappropriate that would be nice but you
27:39 - have to go to the Google quick-draw site
27:40 - to do that let's take a look at the
27:44 - rainbows rainbow
27:55 - and see how these look just to be sure
28:05 - oh I like these okay everything is good
28:08 - good rainbows no inappropriate rainbows
28:11 - okay
28:14 - now let's grab why can't I keep that
28:19 - folder open let's grab oh I saved it
28:26 - over the cats that's fine also when I
28:31 - release this code I don't want that to
28:33 - be in there rainbow 1000 that comes over
28:42 - here it's actually called rainbows 1000
28:47 - let's take a look at the trains
29:01 - and let's quickly look at the trains
29:11 - drains look pretty good I don't see any
29:14 - that doesn't look like a train mm I
29:20 - don't know about these trains I'm
29:28 - trusting you slack channel I assume that
29:30 - the YouTube chat is just giving me false
29:32 - information let's I don't like that
29:35 - those first trains let's start 100 later
29:46 - whoo there aren't that many trains let's
29:53 - go back to the beginning for the trains
29:55 - whoops it's fine it's fine I got to move
30:00 - on from this I'm wasting way too much
30:02 - time the trains scanning the trains
30:21 - trains these are like totally not trains
30:25 - at all but we're gonna have to live with
30:27 - it okay now we can bring this over here
30:37 - whoops all right we're good we're good
30:48 - the set oh the soundboard is broken
30:51 - again the soundboard is broken again
30:57 - weird all right all right we don't need
31:00 - the soundboard
31:01 - we'll be fine sorry about that everybody
31:10 - now
31:19 - but I wanted to have the cats up at the
31:23 - beginning of this video
31:25 - cat and I had to start a hundred later
31:32 - he said a hundred times end does that
31:34 - make sense no no yeah yeah I don't know
31:44 - I don't know whatever oh no this is me
31:47 - just skipping them weirdly oh my this
31:49 - makes no sense what I'm doing but I'll
31:52 - just do it anyway
31:55 - oh loading the entire file from the
32:07 - internet every single time I run this
32:08 - sketch is such a disaster that does
32:16 - every 100 I know right so my offset yeah
32:20 - I crashed something totally frozen yeah
32:23 - I was doing every 100 no wonder we ran
32:25 - out of trains now there's like a party
32:29 - going on in the hallway it certainly
32:31 - feels like warm in here I feel like
32:33 - flush I just need to say 784 times 100
32:44 - but whatever
32:49 - let me just get some cats I just want to
32:52 - see some cats morning morning is a good
33:09 - time I think to livestream for me
33:11 - apparently my brain completely melts
33:14 - down after like 2 o'clock I just want to
33:19 - see a few cats plus 100 times 784 plus
33:25 - times yep okay
33:35 - we'll cover this up here those are
33:41 - trains behind trains yeah trains are
33:44 - good
33:45 - there's no inappropriate looking trains
33:47 - here there's this totally inappropriate
33:49 - looking what is wrong with you people of
33:51 - the Internet one more time and then I'm
34:02 - just giving up on this why quit that's a
34:14 - good point
34:14 - all right all right this looks good I
34:17 - think we're good here I don't see any
34:21 - inappropriate cats
34:22 - does anyone see any inappropriate cats I
34:25 - cannot find one I'm doing my best
34:30 - all right it's a family show people it's
34:36 - not even a show or whatever all right
34:49 - last on Row 4 it's fine it's cat-like
34:54 - it's just a poorly done that's just a
34:56 - poorly drawn cat yeah bad poorly drawn
35:00 - cats are okay this isn't even the data
35:02 - that I'm using this is just my opening
35:04 - screen to begin talking about this
35:06 - project okay all right can you guys by
35:11 - the way hear all the talking in the
35:12 - hallway this might be in the background
35:15 - of the rest of the videos for today
35:18 - there's a big party going on out there
35:20 - so there's nothing I can do about that
35:31 - all right
35:41 - get it together people all right
35:54 - all right I am back in my quest to
35:58 - create a doodle classifier I finished
36:02 - looking at and examining and processing
36:04 - the data in processing using the load
36:07 - bytes function and rendering the images
36:09 - to a window and saving out the data
36:11 - files so what I have now and I'm gonna
36:14 - so I'm gonna quit processing what I did
36:16 - in between the previous video in this
36:18 - one sure save is I went oops and I
36:24 - created a sketch called a folder called
36:28 - doodle classification and in that folder
36:31 - there are now there's a data folder with
36:33 - three files cats 1,000 rainbows 1000
36:36 - trains 1000 so I have 1000 train doodles
36:40 - 1000 rainbow doodles and 1000 cat
36:43 - doodles now now do I really have enough
36:54 - data to make a highly accurate amazing
36:59 - impressive doodle classifier probably
37:02 - not I also probably don't have the
37:04 - neural network deep learning
37:06 - architecture to do it really really well
37:08 - because I might want to add something
37:10 - called a convolutional layer I will come
37:13 - back to that someday in the videos that
37:15 - I make but I just want to try to use my
37:19 - basic JavaScript neural network library
37:22 - in a very simple way use all those
37:25 - doodles as input to demonstrate the
37:27 - training process so how am I going to do
37:30 - this well first of all actually honestly
37:31 - I'm not even ready for this yet I need
37:33 - to just sort of see can I get the data
37:35 - into into JavaScript so if you look down
37:39 - started a p5 sketch and I'm going to add
37:41 - something like this to it function
37:43 - preload and I'm going to create some
37:46 - variables like cats trains and what's
37:50 - the other thing rainbows and I'm going
37:52 - to say cats equals load bytes cats dot
37:56 - cat's 1000 in so I'm going to load use
38:00 - preload to load all of these files now
38:03 - I've got something that I need to tell
38:05 - you
38:06 - if you if it is March 2nd 2018 and you
38:13 - are typing this code along with me this
38:16 - won't work because the load bite
38:18 - function as of the time of recording
38:20 - this video is not implemented in p5 I
38:23 - have with this example a little extra
38:26 - file that I'm calling load binary j s
38:28 - that has a version of the load bytes
38:31 - function written into it and I intend to
38:33 - at some point make a separate video
38:35 - hopefully about submitting that as a
38:37 - pull request to p5 then load bytes will
38:39 - work in p5 but hopefully I'm using
38:41 - version 0.6 zero of p5 or at least
38:44 - that's the version that I want to be
38:46 - using off to check what I'm actually
38:47 - using but so a future version will
38:51 - hopefully have it but this is hopefully
38:52 - going to work so I'm gonna try to load
38:55 - all three of these files so let's look
38:58 - one thing I wanted to mention by the way
39:06 - you can edit this out it's like plus
39:08 - that is I wanted to show you that I kind
39:14 - of had this moment this sort of like
39:16 - moments earlier today I realized like oh
39:18 - look at these nice small files there are
39:20 - seven hundred eighty four kilobytes well
39:22 - why are they 784 kilobytes because 784
39:24 - kilobytes is 784 thousand bytes and
39:27 - remember each byte is one pixel of 2008
39:30 - by 28 images with 784 so I have 1784
39:35 - pixel images this is how binary works on
39:38 - the computer it's kind of excited to see
39:39 - that really work out so nicely the
39:41 - numbers work out so nicely so if I add
39:43 - this to my sketch and I go and refresh
39:46 - the page here whoops it's gonna say file
39:50 - not found why is it gonna say file not
39:52 - found because I forgot that I have them
39:53 - in a data directory so I need to add the
39:56 - data directory now I'm gonna do this now
39:58 - okay let's look at this Katz Katz is an
40:02 - object with a property called bytes and
40:05 - there you can see there's an array and
40:07 - if I kind of open this up we can see
40:09 - like oh boy there's a lot of stuff in
40:11 - there and I could kind of dig into and
40:13 - look these are those pixel values
40:15 - there's a lot of zero
40:16 - because there's a lot of black pixels
40:19 - because it's the drawings originally are
40:20 - white on black I think I'm gonna alter
40:24 - that but but so you could see this is
40:26 - working one thing you might might be new
40:29 - to you which is a little bit strange is
40:31 - that this is a you int eight array which
40:35 - I find to be somewhat terrifying because
40:37 - I'm used to just it's an array it's got
40:39 - stuff in it there are actually there is
40:41 - something in JavaScript which is called
40:43 - a typed array it's it's kind of like a
40:45 - contract you make saying this is gonna
40:46 - be an array but you know you can I'm
40:48 - gonna let I'm gonna tell you what's in
40:50 - it is unwilling available put this kind
40:51 - of data in it so you can store the data
40:53 - in memory more efficiently and so this
40:56 - is a particular kind of array that can
40:58 - only store integers that's gonna be
41:00 - particularly useful for us that's
41:01 - because we're loading that binary
41:02 - information time out wait a second
41:18 - yeah kilobytes is 1,000 right
41:22 - not the 1024 thing is something else
41:25 - yeah yeah okay I'm right I'm right am I
41:28 - gonna get flamed in the comments
41:30 - clapping you guys can hear everything I
41:32 - know it's a little unfortunate is it is
41:34 - it okay like this this is gonna be fine
41:36 - in the end
41:37 - like it's just gonna have weird
41:38 - background sounds in it I should get a
41:41 - soundproof room I guess
41:54 - it's okay
41:58 - yeah Kimmy bike okay all right all right
42:00 - all right I'm gonna move on all right
42:12 - yeah I agree k week Mon it was a 1024
42:16 - for me also all right anyway yes the
42:23 - array just stores a great value all
42:25 - right all right so moving on let's at
42:30 - least try to draw the images into the p5
42:33 - canvas so that we can see that things
42:35 - are working correctly
42:36 - so I'm gonna come back I'm basically now
42:38 - do exactly what I did in processing but
42:40 - in p5 and so in setup let's do the cats
42:45 - I'm gonna say and I'm gonna I'm gonna
42:48 - say let me just do 100 and I'm gonna use
42:54 - n to go through all 100 of these then
42:59 - what for each one I need to say I'm
43:01 - going to create an image and that oh you
43:05 - want to say I need to say create image
43:07 - so this is one thing that's tricky about
43:08 - p5 the function create image creates a
43:12 - basically block of pixels for you to
43:14 - work with create IMG creates a Dom
43:17 - element that can be embedded in the page
43:18 - and I could use either one in this case
43:20 - I'm just gonna make my life simpler and
43:22 - create an image that's 28 by 28 then
43:26 - what I need to do is go through all 784
43:31 - pixels and I need to say image pixels
43:37 - index I equals cats index i + I need
43:44 - some offset so the offset offset is n
43:51 - times 784 right because each block is
43:55 - 784 pixels part of me wants to like
43:58 - split it up and have objects but
44:00 - whatever this is going to be fine cat +
44:02 - offset then I'm going to say image
44:04 - update pixels thank you thank you that's
44:08 - not a sound effect that's actually
44:10 - people from the hallway applauding there
44:12 - applauding for me though hopefully no
44:13 - one's gonna come knock on the door and
44:14 - say I'm being too loud load pixels and
44:18 - then I should be able to do exactly the
44:20 - same thing where I draw each image at an
44:24 - x and a y so X is n modulus 10 times 28
44:35 - and and Y is well I'm gonna have to use
44:40 - floor here cuz no matter what JavaScript
44:44 - does floating point division and divided
44:48 - by 10 times 28 this is really what I did
44:51 - in the previous one I just want to be
44:53 - able to see that the stuff is coming in
44:55 - so this now I'm sure I've made some
44:58 - mistakes but let's just see if we see
45:00 - the cat's now in the canvas I see
45:06 - nothing I see nothing that is not good
45:10 - so let's see what could I have done
45:12 - Oh cats dot bytes so dot bytes I need to
45:17 - say there we go something's coming in
45:19 - but it's totally off ooh that looks like
45:22 - a mess what have I got wrong I plus
45:26 - offset I less than 784 cat's bytes image
45:30 - pixels i what am I missing here oh yes I
45:38 - forgot something super important in
45:42 - JavaScript native html5 canvas does not
45:45 - store each pixel as a single single
45:51 - integer so in processing each pixel is a
45:54 - single integer which can be segmented
45:56 - out into the rgba components the actual
46:00 - pixel array in JavaScript is 784 times
46:05 - for long there is a spot in the array
46:08 - for our for g4b for a so it's pixel 0
46:11 - rgba pixel 1 RGB a so I need to I
46:15 - totally forgot have a times 4 here then
46:20 - Oh
46:21 - oh my goodness no no I can just do this
46:24 - time
46:25 - for here and whoops let me zoom out I
46:28 - can say let me get the actual value from
46:32 - the array and just put it in another and
46:34 - I can say pixel eye times four is Val
46:37 - and then that's the red value and these
46:40 - are just greyscale so plus one and I'm
46:42 - gonna goofily add a plus zero just
46:44 - through my code lines up because then
46:48 - plus two everything I'm doing right now
46:52 - is just for the purpose of drawing so
46:53 - and then this needs to be 255 so
46:56 - basically I want to say what's that
46:58 - single value inside of the cat's byte
47:02 - array and I need to take that value and
47:04 - give it to the red green and blue parts
47:06 - of the image and have no transparency
47:09 - and now I'm expecting to see there we go
47:12 - there's all the cats and I prefer it to
47:17 - look like this and there we go so now we
47:21 - can see that I can get the data in to
47:25 - JavaScript all right I think that's I
47:27 - don't know there's a little silly that
47:28 - this was like its own standalone video
47:30 - but I think I want to pause here because
47:32 - this is really just to like look at okay
47:35 - how do I have that data in processing
47:38 - how do I have that data in JavaScript so
47:40 - what do I need to do next in the next
47:43 - video what I want to do is divide out
47:46 - and actually let me do that in this
47:48 - video the first thing I want to do is
47:49 - divide all the data into training and
47:53 - testing because the next video what I
47:56 - want to start in the next video I want
47:57 - to write the line of code equals new
48:00 - neural network and I want to start
48:01 - training so let me think if I could
48:03 - cleverly figure out how to divide the
48:05 - data into testing and training so let's
48:10 - think about this I could have done that
48:12 - by the way I probably should just done
48:14 - that with the files really distracting I
48:19 - think people are winning awards
48:23 - you're still talking about the 1024
48:26 - thing on the chat okay pause matchy I
48:30 - pause let me think about this
48:36 - I'm totally Awards
48:52 - [Applause]
49:04 - it's the it's the Film Festival Awards
49:10 - that are happening out there okay all
49:14 - right let me think about this what I was
49:19 - thinking of doing was taking the objects
49:22 - and renaming the bytes like Trey I was
49:31 - gonna have like cats dot training and
49:33 - cats dot testing as like separate arrays
49:41 - yeah I don't think that that other thing
49:44 - is being live-streamed can I use let me
49:51 - just do some tests here
50:01 - was it slice is this how I do like slice
50:05 - yeah
50:07 - did that just give me like and then if I
50:11 - said start at 7 or 84 no so this is not
50:18 - I should look up the documentation for
50:19 - slice slice returns a shallow copy of a
50:27 - portion of an array into a new array and
50:32 - the arguments are from begin to end and
50:38 - not included okay great so that's what
50:43 - I'll do and then I can use oh and I can
50:47 - use splice to take it out so I could do
50:51 - what I could do right cats dot bytes so
51:00 - I could do cats dot test it testing
51:03 - equals cats dot bytes splice and then I
51:11 - would be saying something like I could
51:13 - just take the first 100 so I could say 0
51:15 - comma 784 times 100 well if I'm saying
51:18 - the first 200 right
51:22 - no splice is not a function cat's
51:27 - sub-array oh I'm do sub-array but it
51:34 - won't take it out for me
51:41 - so now if I look at cats that worked but
51:46 - what if I want to delete I guess if I
51:48 - took take the end I could just ignore it
51:51 - you can't alter the array so that would
51:54 - be an argument for me pre-processing the
51:56 - data and doing two separate files yeah
52:01 - whatever
52:03 - no but I could just do two sub arrays
52:05 - this is kind of nuts but why not right
52:08 - because then I could do cats training
52:12 - equals cats dot bytes sub array and then
52:18 - I could say like zero seven or eighty
52:23 - four times eight hundred and then I
52:27 - would say cats testing equal cats dot
52:29 - bytes sub array 784 times eight hundred
52:37 - comma cats dot length
52:40 - cat stop bytes dot length right and then
52:45 - I have let me just clear this out here
52:50 - if I say cats I don't know if you guys
52:53 - can see this very well
53:03 - so this is what I want to do I think
53:09 - this is what I'll do that way I have all
53:10 - of it and I have testing and training
53:11 - okay all right let's do that I forgot
53:19 - where I like this is gonna have like a
53:21 - serious continuity issue but I don't
53:24 - remember where I was like I don't know
53:26 - what I was doomed into but on the back
53:28 - okay so one more thing before I move
53:35 - separate images as views into the array
53:39 - huh
53:40 - me I am Samia is writing my advice would
53:43 - be to create all the separate images as
53:45 - views into the array but that sounds
53:49 - complicated that's gonna take a lot of
53:55 - that's gonna require like a lot of
53:58 - coding and I don't really want to do a
54:00 - lot of coding
54:01 - I don't know move on okay I'm gonna do
54:03 - my solution oh oh I see oh that's a
54:19 - really good idea okay okay good idea
54:23 - that way each array is its own thing I
54:27 - like this I like this I like this I like
54:30 - this okay this is a really good idea
54:33 - okay okay okay I'm I'm on board now okay
54:39 - okay I'm on board I'm on board we're
54:40 - gonna make this happen all right you
54:43 - don't have a lot of time here it's
54:43 - already 4:30 all right I'm out of coffee
54:52 - switch to water okay
55:03 - one more thing before I move on to the
55:06 - next video let's prepare the data let's
55:09 - prepare the data into a raise of
55:12 - training images and testing images and
55:14 - there's a nice way that I've just
55:16 - learned that as a function I could use
55:17 - called sub-array which allows me to
55:20 - essentially like pull out or point to a
55:22 - portion of the array so let me let me
55:24 - discuss what I'm gonna mean here so so
55:26 - this is the this is the raw data so I'm
55:29 - gonna just rename these like cats data
55:31 - cats data trains data rainbows data so
55:36 - I'm gonna I don't know why I'm using
55:37 - suddenly the underscore data naming
55:39 - convention but I just want to name these
55:41 - data because what I'm gonna do now is
55:43 - I'm gonna create some other arrays like
55:45 - cats cats training cats of trains
55:54 - oh boy who's bad trains training
55:57 - rainbows training let's just get the
56:01 - training data first so if I have a
56:03 - thousand images I want to use the first
56:06 - 800 as the training set and I must save
56:08 - the second 200 as the testing set so
56:11 - what I'm gonna do and we could comment
56:13 - all this stuff this was me just seeing
56:14 - that I could see it I'm going to say
56:17 - okay I'm going to say I want for example
56:22 - cats training to be a new array just a
56:26 - plain old array then I'm going to go
56:30 - from 0 all the way up to 800 and I'm
56:33 - going to say every element of cats
56:36 - training is cats data sub array and what
56:43 - the sub array array function wants is
56:45 - the beginning and the end of the sub
56:48 - array that I want to pull out so I
56:50 - always want to pull out 784 pixels
56:53 - essentially so I want to go from I well
56:58 - let's see I'm gonna go I'm gonna say
57:00 - offset equals I times 7 or 84 and so I
57:04 - want to go from offset to offset plus
57:07 - 784 and I think now is the time that I'm
57:10 - really putting this into a project that
57:12 - that 780
57:13 - or number really should be in a variable
57:15 - and I've been to do something crazy
57:21 - Const is a way of declaring a variable
57:23 - that you never intend to reassign and
57:26 - it's a nice way of me protecting myself
57:27 - from ever reassigning it by accident and
57:30 - I probably should be using constant a
57:32 - lot more places in the way that I code
57:34 - but I use it very rarely so I'm going to
57:36 - say Const length
57:37 - Eliane for length is 784 so I'm gonna
57:40 - say I times le n and this is going to be
57:43 - offset le n so let's just so this should
57:46 - if I've done this correctly we should be
57:49 - able to see now I'm gonna hit refresh
57:50 - and I have a syntax error on line 45 oh
57:54 - no like using cots was really exciting
57:57 - wasn't it partygoers are outside that
57:59 - door forever in this video okay
58:03 - sub-array is not a function because what
58:06 - do I need to say cats data dot bytes
58:09 - I forgot that that array is inside of an
58:11 - array called bytes and now if I look at
58:15 - cats training we can see there's eight
58:18 - hundred seven hundred eighty four pixel
58:21 - eight hundred arrays each ones with 784
58:24 - elements in them so we can see here
58:26 - here's the first one here's the second
58:28 - one and this looks good you can see
58:30 - there's all the numbers this is good I
58:32 - now have my training data now I'm
58:36 - actually going to do something kind of a
58:37 - little bit nuts I'm going to change this
58:39 - to 1000 and let's see let's call that
58:45 - Const total input total data I don't
58:51 - know I don't know these are I got to
58:54 - think about my variable names total data
58:56 - so I might change that someday and I'm
58:59 - gonna say if I'm going to I'm gonna say
59:07 - if I is less than 800 do this I'm just
59:12 - going to do this hard code this right
59:13 - now else and then I'm gonna say cats
59:24 - testing is also an array Oh couldn't
59:28 - training and testing just have the same
59:30 - number of characters I like would be so
59:33 - much better if that were the case oh
59:34 - it's gonna my auto formats gonna change
59:36 - that oh well okay so now cats testing
59:42 - index I okay this is good now here's the
59:45 - thing this is correct but I've got to go
59:49 - from I I minus 800 so this should really
59:54 - be a variable I'm gonna say let I don't
60:00 - know what we're threshold it's very
60:03 - distracting
60:04 - well I'm gonna just call it threshold
60:06 - equal a floor 0.8 times total data and
60:16 - so now that's going to be there's going
60:19 - to be 800 going into training and 200
60:23 - going into testing and this should not
60:24 - be 800 it should be threshold so this is
60:27 - how I'm thinking of my date i dividing
60:29 - it into testing and training and let's
60:32 - look at this threshold and now I can say
60:38 - cats training is 800 arrays and cats
60:44 - testing is 200 perfect we are doing well
60:49 - part of me now and I think I would like
60:51 - to do is actually make a variable just
60:54 - called cats one called trains one called
60:58 - rainbows I'm gonna make these objects
61:00 - and in the objects I'm gonna say cats
61:04 - training is an array and cats dot
61:08 - testing so I'm gonna make these
61:10 - properties cats training cats
61:13 - testing and now whoops if I just look at
61:19 - cats sorry if I just look at cats there
61:21 - you are
61:24 - we see I have the training and the
61:26 - testing the testing is 200 the training
61:28 - is 800 boy this is tedious but it's
61:31 - worth it we're working on we're
61:32 - preparing our data by golly I'm going to
61:34 - dedicate to whole to whole tutorial
61:36 - videos due to working on the day
61:38 - so now wouldn't it be nice if I made
61:43 - this into a function let's make this
61:46 - into a function let's refactor this into
61:49 - a function and I'm gonna just get I'm
61:52 - gonna I'm gonna call this prepare data
61:57 - call this prepare data I want to get a
62:01 - category and the data that goes with it
62:04 - so I'm adding the training and testing
62:07 - to a given category from given data
62:12 - look at me refactoring the code while
62:14 - I'm working and then I can just say
62:17 - prepare data cats cats data prepare data
62:27 - rainbows rainbows data and prepare data
62:34 - what was the last one trains trains data
62:38 - if I did this correctly we can look and
62:42 - see it cats there we go
62:43 - rainbows there we go and trains there we
62:47 - go now whether or not the data is still
62:49 - the correct data in there I'm just going
62:51 - to sort of feel somewhat confident that
62:53 - I did this correctly but I have now we
62:56 - have now completed sort of working
62:58 - within examining the data in processing
62:59 - to save some new data files with much
63:01 - less data in them I've now in JavaScript
63:05 - I'm able to load those binary files and
63:07 - I have a little function to divide it up
63:09 - into training and testing so now in the
63:11 - next video
63:12 - I can finally write the piece of code
63:15 - that I've been wanting to do all along
63:18 - let neural network equal new neural
63:21 - network so that is what will happen in
63:23 - the next video and thank you for
63:25 - watching perhaps I will see you there
63:36 - all right I'm getting some good comments
63:39 - Eliane ln is a little bit generic
63:43 - a little generic for a what's that oh
63:49 - I'm the wrong view
63:51 - what's that style guide that everybody
63:52 - uses it's like some some company looks
63:58 - like Airbnb it's JavaScript style guide
64:00 - or something air B & B JavaScript style
64:06 - guide so I feel like I'm supposed to use
64:12 - this right and and of course I don't
64:22 - and then I'm supposed to do this not
64:24 - Luke underscore Skywalker so I probably
64:28 - if should do this I will I will just do
64:38 - that right now nobody will notice a
64:40 - little continuity issue but it'll be
64:42 - fine so many more places that I put that
64:52 - probably oh yeah
65:01 - okay camelcase that is correct all right
65:10 - total data
65:23 - okay
65:27 - why is this year I don't want this can I
65:32 - make this a little smaller
65:33 - is this still okay size-wise okay yeah I
65:43 - could write this I could do that line 23
65:50 - has an underscore data no I fixed it
65:53 - though right okay yeah I'm not really so
65:55 - big on the whole style guide thing you
65:58 - know me and my loosey-goosey I'm trying
65:59 - to gab trying I'm listening I'm adopting
66:02 - and I'm changing my views I can see
66:06 - value in conforming to style and with
66:08 - making it easier and to manage and
66:11 - collaborate an open source okay someday
66:20 - I will come to all of that all right so
66:23 - now the next step all right all right so
66:37 - let's get to the next step it's 4:40
66:39 - we've got at least another hour here I
66:41 - have I'm having like phantom buzzing
66:44 - like you know how when you're you I
66:46 - don't even have my phone in my pocket my
66:47 - phone will be on vibrate but I keep
66:49 - feeling like it's buzzing this camera
66:51 - just went off all right all right all
66:59 - right all right here we go try I'm just
67:04 - thinking for a second I think I want to
67:11 - move this that's fine okay
67:18 - all right
67:27 - okay all right okay here we go
67:41 - okay
67:49 - just out of curiosity here I'll leave
67:53 - this in here
68:10 - all right doodle classifier with you all
68:26 - right now I think we're here I mean this
68:28 - is like I'm ready to actually start
68:30 - trying to do guess yeah settle down
68:32 - outside the room I'm ready to try to
68:35 - start actually doing the neural network
68:38 - training so just to kind of recap you
68:41 - know hopefully you've watched some of
68:42 - the videos that are leading up to this
68:44 - particular one but what I have right now
68:46 - is I have a JavaScript program that
68:49 - loads 8 data for 800 doodles of cats 800
68:54 - one thousand eight hundred a thousand
68:56 - tools of cats a thousand doodles of
68:58 - trains a thousand doodles of rainbows
69:00 - all these doodles come from the Google
69:02 - quick-draw data set which I covered in
69:04 - previous videos now what I've also done
69:06 - is prepare the data and separate it out
69:08 - into into eight it's about 80 percent
69:13 - twenty percent eighty percent for
69:16 - training and 20 percent for testing so
69:19 - the first thing that I want to do now is
69:21 - I need to create a neural network that
69:24 - will work with this data it needs to be
69:26 - able to receive a single image as input
69:29 - with 784 pixels and it needs to give me
69:33 - an output with three numbers which each
69:36 - represent a likelihood or like a score
69:40 - of how likely it is to be of a given
69:42 - category so we can think of maybe this
69:45 - category will be cat this category will
69:48 - be rainbow and this category will be
69:52 - train and low so let's actually set
69:55 - something up because we're altom utley
69:57 - everything is everything boils down to
69:59 - numbers and we think of this as an image
70:01 - and we think of these as string labels
70:03 - but it's going to make sense for us
70:05 - ultimately to use numbers so what I'm
70:08 - going to do just really in the code
70:10 - really quickly is I'm going to add at
70:13 - the top some constants like cat equals
70:17 - zero
70:19 - rainbow equals one
70:21 - so this will be kind of a mapping
70:25 - rainbow what was the other one train
70:28 - equals to this will map each one of
70:30 - those categories to a number okay
70:35 - so it's time to make a neural network
70:39 - object now I already have imported into
70:42 - my code sorry let me just take a break
70:48 - for a second I'm so distracted by the
70:50 - cheering and I just need to say that
70:53 - it's gonna it's okay never a dull moment
70:56 - here
71:09 - yeah all right hopefully this party's
71:23 - gonna end soon all right
71:34 - I already have as part of my index.html
71:37 - file a reference to my neural network
71:41 - library so when I release this code when
71:43 - I released this example and you're
71:45 - looking at the video description to find
71:46 - a link to the code you will find it with
71:48 - this library included and what this
71:51 - light where the this libraries
71:53 - repository is here on github under toy
71:55 - neural network Jas and what it allows me
71:57 - to do if I go back to my main sketch is
72:00 - I can create a variable I'm gonna call
72:03 - it I'm just dare I call it an end for
72:08 - neural network I'm going to and an for
72:11 - neural network and I'm going to say and
72:14 - an equals a new neural network so what
72:22 - arguments go inside the parentheses
72:25 - there the way the library is designed
72:29 - and this is not universal is first I
72:31 - need to say how many inputs are there
72:33 - 784 second I need to say something else
72:36 - and third I just say how many outputs I
72:38 - want which in this case right now is 3
72:41 - the second argument is how many hidden
72:45 - nodes now you're gonna want to go back
72:47 - and watch my neural network build a
72:49 - neural network playlist which where I go
72:51 - much more into detail about what the
72:53 - hidden nodes are and how they work but
72:55 - right now the hidden nodes it's really
72:57 - you can think about it as the kind of
72:59 - magic in a way that's in between the
73:01 - input and the output that allows it to
73:03 - make lots that allows it to learn and so
73:06 - the more hidden nodes we have the more
73:08 - parameters there are the more things the
73:11 - more sophisticated in a way the neural
73:12 - network can be now of course there can
73:14 - even be not just the number of hidden
73:15 - nodes if there's if there's input hidden
73:20 - and output there what I'm talking about
73:22 - is sort of vertically how many hidden
73:26 - nodes are there but there could also be
73:28 - more hidden layers but this is again
73:30 - kind of beyond the scope of where we are
73:32 - currently in my videos about machine
73:34 - learning and neural networks right now
73:36 - the library I'm gonna just assume
73:38 - there's 784 inputs
73:40 - there's one input there's one set of
73:42 - inputs with 700 480 for one set of
73:45 - outputs with three and then
73:47 - there is a hidden layer which I'm gonna
73:50 - arbitrarily just say I don't know
73:51 - 64 sounds like a good number and if
73:54 - maybe things aren't working very well
73:55 - maybe I'll try making it higher if it's
73:57 - running too slow maybe I'll try making
73:59 - it lower so they'll be less math for it
74:01 - to do we'll just sort of play around
74:02 - with it okay so coming over here I'm now
74:05 - gonna say 784 then I'm going to say we
74:13 - forgot 784 I guess 64 and 3 so this is
74:17 - my neural network 784 inputs three
74:21 - outputs and 64 hidden nodes and time and
74:29 - I think I'm good I'm good I'm done no
74:31 - none now what I want to do is I want to
74:34 - Train it to learn I don't know why I'm
74:38 - all caps all of a sudden about cats so
74:42 - what I want to do is say for let I
74:45 - equals zero I is less than cats training
74:50 - dot length how many training data sets
74:54 - are there I plus plus then what I need
75:00 - to do so here's the thing by definition
75:03 - this is a cat so and I have set so I
75:06 - need to say the let me create the
75:08 - outputs right are the targets so I was
75:16 - going so well this morning I'm gonna
75:24 - create an array called targets and I'm
75:26 - gonna say that is 1 comma 0 comma 0 they
75:34 - stopped outside just give me a second
75:36 - again I'm sorry that I keep stopping but
75:38 - I can I can hear that the ceremony has
75:40 - stopped and now it's just people talking
75:42 - and it's gonna be that's gonna be much
75:43 - better for me
75:44 - I need like a cookie or something little
75:51 - jolt but I'm gonna get through this
75:57 - okay I'm gonna make an array called
76:04 - targets which really should have
76:06 - something like 1 0-0
76:08 - remember this is supervised learning so
76:12 - what I'm doing is I'm giving it a known
76:14 - input with a known output and if I'm
76:17 - saying the first element is the sort of
76:19 - the output array of the output vector is
76:22 - related to a cat then the target for
76:26 - each one of these images is 1 comma 0
76:28 - comma 0 now I'm just realizing I'm gonna
76:30 - have a problem here because I don't I'm
76:34 - gonna keep I don't want to train hmm I
76:37 - want to mix up my day at stop timeout we
76:41 - think about this this is not gonna work
76:44 - if I train on all the cats then all the
76:47 - Rainbows than all the trains I need to
76:50 - mix it up that data set has to be
76:52 - completely shuffled so this whole
76:54 - prepare data thing I kind of need to go
76:57 - back and do in a different way I need to
77:00 - train randomly this is no good so write
77:07 - each one of the and I need to normalize
77:11 - the images but that's okay that I'm not
77:14 - too worried about and that was a nice
77:19 - thank you for the alert about that
77:23 - so do I dare go back just pick one
77:28 - random one from a random array every
77:30 - time yes that would work however I kind
77:36 - of wanted to be more thought I guess I
77:38 - could just train I was so excited to say
77:41 - epoch so I was going to try to sort of
77:44 - as opposed to what I might normally do
77:46 - which is just train at random for a
77:48 - while I was actually gonna try to like
77:51 - go through every single data point all
77:53 - and finish and be like I did an epoch
77:55 - and then do the testing
78:04 - mmm-hmm let's think about this I mean I
78:09 - could remove it I could create an array
78:13 - of indices to everything and then I
78:15 - could start removing stuff it doesn't
78:18 - matter the order of them at all the
78:20 - order should be random I would love for
78:21 - the order to be randomized each epoch so
78:25 - I think this will actually be okay if I
78:28 - create a separate arrays of all the
78:32 - indices and just pluck those out using
78:37 - like splice or pop I have to randomize
78:41 - the order make three counters shuffle Oh
78:50 - what if I do you think it's bad if I do
78:53 - one two three one two three that's bad
78:56 - right
78:58 - Concannon right I can kick at each
79:02 - training array than shuffle but I
79:03 - haven't retained which one is which so I
79:08 - would have to I have to give them a
79:09 - label like I could give each array and
79:11 - the FIR like another another thank you I
79:25 - could give each array a 780 fifth
79:28 - element which is its label but I should
79:31 - have done that while I was preparing the
79:33 - data but I can add that in now right
79:35 - like for example all I need to do is
79:39 - also is add in a label here and push
79:42 - that in at the end that's what I'm gonna
79:43 - do okay we're gonna well I'm we can even
79:46 - put it at the beginning because I then I
79:47 - can pop it off because these are just oh
79:49 - no no no these are just regular arrays
79:52 - mm no I can't alter these sub arrays I
79:57 - could make an object that has the label
80:03 - and then shuffle
80:10 - think I'm gonna do category training dot
80:26 - label yeah
80:32 - oh you mean that'll actually work like
80:35 - if I do this yeah that's what I would
80:39 - like to do like in other words
80:51 - but I need to do this will that actually
80:54 - work cuz JavaScript's so goofy let me
80:59 - just do this for a second
81:09 - yeah look at that it also has the label
81:14 - cat yeah I love JavaScript okay that's
81:23 - what I'm gonna do then I'm just gonna
81:28 - like concatenate here's the thing there
81:36 - wasn't really good but it's okay it's
81:38 - okay it's fine
81:44 - all right
81:49 - so let me go back to where is making the
81:52 - targets actually let me go let's see if
81:56 - I can go all the way back to here okay
82:02 - so I just realized something
82:04 - here's a terrible idea that I was about
82:07 - to do let me train the neural network
82:10 - with all 1,000 cats now let me train the
82:14 - neural network with all 1,000 trains now
82:17 - let me train the neural network with all
82:19 - 1,000 rainbows
82:20 - this is no good I need to tune or for
82:22 - this to work effectively I need to just
82:24 - be training it with all the training
82:26 - data in random order so it's like cat
82:29 - rainbow train train rainbow cat rainbow
82:31 - cat train train cat rainbow train so I'm
82:35 - gonna need to do I thought I prepared
82:37 - all the data in the previous video I
82:38 - gonna have to do some more work
82:39 - preparing the data and so one thing that
82:42 - I think that I can do is I can actually
82:44 - pass in what I'm gonna do here is pass
82:47 - in the label so this is a cat this is a
82:52 - rainbow I'm gonna give it and this is a
82:55 - train and I'm gonna add another argument
82:59 - called label what my shoe just came
83:03 - untied
83:21 - I'm going to add another argument I'm
83:23 - going to I'm going to add another
83:27 - argument called label and what I'm going
83:30 - to do this is a little bit goofy but you
83:32 - can do this kind of stuff in JavaScript
83:34 - this array I'm going to just give it an
83:37 - additional property and I'm going to
83:43 - give it that label and I'm gonna call it
83:45 - label so it's a little bit goofy I'm
83:47 - using the same variable name everywhere
83:48 - but I think in the end it's gonna make
83:50 - things make sense I will show it to you
83:52 - in the console and this is I - threshold
83:55 - because I need the testing data and this
83:57 - is testing also needs a label so look at
84:01 - this let me just show you what's gonna
84:02 - happen now okay now that I've added that
84:05 - in i refresh the sketch let's look at
84:09 - the Rainbows you can see there's still
84:11 - 800 training rainbows 200 testing if I
84:15 - look at the testing ones and I look at
84:17 - number two for example this is the array
84:21 - and it has a label of one so all of the
84:24 - rainbows should have a label of one all
84:28 - of the cats if I look at just an
84:32 - arbitrary 101 have whoops and this is a
84:35 - weird thing you can do with JavaScript
84:36 - even though it's an array an array is an
84:39 - object and so I can attach some other
84:41 - properties to that object as well so the
84:43 - labels are in there now what I can do is
84:46 - I what I need to do is put all of them
84:49 - together into one big array and then
84:52 - shuffle it so what I should say is let
84:57 - training equal a blank array and then
85:02 - training equals training.com cat-cat
85:07 - start raining like cats should join it
85:09 - right and then just join the rainbows I
85:16 - don't know if this is right and the the
85:21 - rainbows and what's the other one I got
85:24 - the trains all right so here we go so
85:27 - that is now let's let's let's see what
85:31 - that comes up with console.log training
85:34 - let's look at that there we go
85:38 - 2,400 that's 800 times three uh yeah why
85:44 - is there oh yeah yeah it's 2400 of these
85:46 - wonderful look and now and this one in
85:50 - here is label one oh this is good this
85:52 - is actually making sense okay so I have
85:54 - all the training data in here but I want
85:56 - to shuffle that I want it to be in
85:57 - random order but so how do I shuffle an
86:01 - array let's go to the array I mean I
86:04 - know how to shuffle in array but let's
86:05 - go to array JavaScript I shuffle a
86:11 - function that is actually part of arrays
86:14 - where do I need to write my own how did
86:24 - you get mins crowd how did you get that
86:26 - beautiful animated rainbow me I am so me
86:32 - is saying I would move the sub array
86:34 - creation out of the if and label it
86:36 - there oh yeah that's much better but I'm
86:48 - gonna just leave it how it is okay so I
86:52 - have to write my own okay so I have to
86:57 - write I have to I have to write my own
87:00 - shuffler right it's not gonna do it for
87:04 - me just p5 oh I could pick a random one
87:10 - I think it's better just to shuffle it
87:13 - okay I've done this for other coding
87:17 - challenges haven't I Schiffman shuffle
87:21 - and array
87:29 - No
87:31 - hold on let's go to all the code for the
87:36 - coding train and look for a shuffle
87:38 - shuffle shuffle it's in looks like it's
87:54 - in the traveling salesperson here we go
87:59 - look at this
88:04 - shuffle why is it commented out but in
88:11 - the code alright this was my way of
88:13 - shuffling and then I do a swap
88:17 - it's in p5
88:20 - oh it's NP 5 Oh wonderful
88:27 - that's so awesome that must be why
88:29 - that's why I commented it out
88:30 - thank you I'm behind so let me just see
88:35 - let me just see how this works so if I
88:40 - have
88:49 - okay so you're saying if I say shuffle a
88:52 - true it will actually shuffle the actual
88:56 - race okay great thank you oops no don't
89:00 - close that window
89:19 - okay well today is our lucky day because
89:23 - it just so happens that p5 has a
89:25 - function in it to shuffle an array so
89:29 - I'm gonna say shuffle training now one
89:32 - thing that's interesting about the p5
89:33 - shuffle function and let me just show
89:35 - this to you in the breath let me just
89:36 - show you the student in the console and
89:38 - let's make sure this is true let's say I
89:40 - make an array and I say four one nine
89:42 - ten right so there's an array I could
89:46 - say shuffle the array a and it's giving
89:52 - me back a new array in a randomized
89:55 - order but if I look at the original
89:56 - array it's still in the original order
89:58 - so I could say a equals shuffle a but
90:01 - another way I could do it I believe in
90:02 - p5 is say shuffle a and then pass in a
90:05 - second argument that's a boolean
90:06 - variable true and then I get this array
90:09 - again in a random order but it's
90:12 - actually affected it's actually affected
90:14 - that array itself this is similar to
90:16 - when I looked at array functions like
90:18 - does the array function map alter the
90:20 - array or make a new array this is
90:22 - similar here so I'm gonna say shuffle
90:24 - training true so and then I'm going to
90:28 - console.log it again so this was it it
90:34 - should be like everything at the
90:35 - beginning should just be like one zero
90:39 - oh no no I'm sorry
90:41 - so the problem with console.log by the
90:43 - way is it tries to be this happens to me
90:45 - all the time it tries to be smarter than
90:47 - you and so even though it's console
90:51 - logging it here I changed that array and
90:54 - it so even though it's I'm console
90:57 - logging it before I call shuffle it's
90:59 - there in the console and it's like live
91:02 - updating as the date of that object
91:03 - changes so I would have to so I think
91:06 - we're just gonna trust that this is
91:08 - working and I'm gonna take this out and
91:09 - I'm just gonna call shuffle again and as
91:11 - I look at it we should see here okay the
91:14 - first one is a two the second one is a
91:16 - zero the third one is one perfect it is
91:20 - in random shuffled order excellent so
91:22 - now I can finally go through and train
91:25 - the neural network this is my image
91:28 - drawing stuff which I don't need
91:31 - so I am going to this is making the
91:34 - neural network
91:39 - this is preparing the data making the
91:45 - neural network and now randomizing and
91:51 - now we're gonna do something very
91:53 - exciting we are going to Train oops
91:56 - train for one and what's the word that
92:00 - I'm going to use I'm gonna add a term
92:02 - somewhere epoch which is in my view of
92:07 - the proper pronunciation of this word
92:09 - not how I like to nevermind anyway so
92:14 - epoch or epoch whatever
92:17 - so one epoch is tracing over all 800 of
92:22 - the training elements but in this case
92:26 - it's 800 times 3 so overall 2400 so I
92:30 - want to say for one époque I'm gonna say
92:37 - 4 let I equals 0 I is less than training
92:41 - dot length I plus plus and I'm gonna say
92:46 - the the data is training index I the
92:51 - label is training index i dot label so
92:56 - now what I need is I need the inputs and
92:59 - that let me say so inputs is training in
93:02 - his training index I is that array it's
93:08 - is a little bit confusing but let's
93:10 - think about it let's just do this so for
93:12 - a moment just so I get a handle on this
93:14 - I'm gonna actually just do one thing
93:17 - instead of training over all the
93:20 - training gain I'm going to just train
93:21 - over one so let's console.log the inputs
93:28 - and then console.log the label and I
93:34 - just realized I've got a major issue
93:36 - which is fine it's it's it's a major
93:39 - issue but but I can I could hit I could
93:43 - do this I actually
93:45 - need to make a new array I need to make
93:48 - inputs actually has to be a new array
93:50 - because what I want to feed if you
93:52 - remember I talked about this in one of
93:53 - my earlier videos I don't want to feed
93:56 - in the raw bytes of a number 0 through
93:59 - 255 into the network I want to feed in a
94:04 - normalized number so that byte value
94:07 - which is an integer or byte between 0
94:09 - and 255 and divide that by 255 to get a
94:12 - floating-point number so I'm gonna make
94:13 - a new array again I'm not worrying about
94:15 - being efficient here and I'm gonna say
94:18 - let I'm gonna say 4 I'm gonna do another
94:22 - loop I'm gonna say just use j j is less
94:27 - than training index i dot length right
94:31 - which i know is going to be 784 so
94:34 - really i can use that global variable j
94:37 - plus plus and I'm going to say inputs
94:40 - index J equals training index I index J
94:48 - oh boy let's make another variable data
94:52 - equals training index I that way I can
94:55 - just say this I can say data dot length
95:00 - and now I can just say inputs J equals
95:04 - data J divided by 255 I can't override
95:08 - that data because that's an integer that
95:10 - says this this training array is
95:12 - reserved to be integers so now I have
95:15 - the inputs the inputs should be 784
95:18 - floating-point numbers and then so let's
95:23 - look at that let's look at the inputs
95:24 - and oh let's look at that let's look at
95:26 - the inputs and then let's look at the
95:28 - label so we could see there are the
95:31 - inputs let's go into the middle
95:34 - somewhere where we have some color
95:35 - values mmm oh there we go
95:37 - so we can see these values have been
95:39 - normalized now we have floating-point
95:41 - numbers between 0 and 1 those are the
95:45 - inputs now let label and the label is
95:48 - for this particular one is 2 now here's
95:53 - the thing I don't what I need for the
95:56 - outputs is an array
95:58 - that has three that has three values in
96:02 - it it should have zeros for the category
96:06 - it is not and a one for the category it
96:09 - is that's often by the way we refer to
96:10 - as one hot encoding it's an array that
96:13 - has only one it's a vector that only has
96:16 - one element with the value of one
96:18 - everything else zero so the way that I
96:21 - could do that is I can say let targets
96:24 - now be an array with three zeros in it
96:28 - and then I could say targets index label
96:32 - equals one right because remember that
96:34 - label is a zero one or two so I either
96:37 - want this to be one this to be one or
96:39 - this to be one and now I could say
96:40 - console dot log targets so let's do that
96:47 - let's run this we can see look now every
96:52 - time I run this I'm gonna get something
96:53 - different because remember it's
96:55 - shuffling the array a different way but
96:57 - we can see though I got a lot we could
96:59 - see this is working I'm getting an image
97:00 - with 784 pic or not an image but an
97:03 - array of 784 floating-point values and
97:05 - I'm getting the target outputs so
97:08 - finally finally finally finally I can
97:11 - say neural network trained inputs
97:15 - targets so what is happening inside of
97:19 - this function so to really dive more
97:24 - deeply into what is happening inside
97:26 - this function you've got to go back and
97:28 - watch my playlist where I build the
97:30 - neural network library itself and write
97:33 - the code for the training function but
97:36 - just to give you kind of like just to
97:38 - give you just to give you an overview an
97:43 - idea here is what we're saying is hey
97:47 - neural network whatever state you're in
97:49 - take this input data and give me some
97:52 - outputs and maybe those outputs it's
97:55 - going to make a total guess so those
98:01 - outputs are going to be some arbitrary
98:03 - numbers like 0.4 0.9 0.003
98:11 - it's gonna just come up with some but
98:12 - it's gonna be random when it starts but
98:14 - I've also given it targets and maybe I
98:17 - said the targets are one zero zero so
98:21 - this is its actual guess its prediction
98:23 - and this these are the targets and so
98:27 - what the neural network is able to do is
98:29 - calculate an error and the error is
98:32 - really something quite simple it's just
98:34 - the difference between and I mean
98:37 - subtraction oh and I say difference
98:38 - between what it guest and what the
98:40 - targets are and it uses that difference
98:43 - as a way of internally adjusting a whole
98:46 - bunch of dials which are essentially the
98:48 - weights of all of the connections
98:50 - between the inputs and the hidden layer
98:52 - and this output layer so you can go back
98:54 - and watch my neural network playlist to
98:57 - dive into how that process works more
98:59 - deeply but that basically what the
99:01 - library is doing so now in theory if I
99:06 - run this and I'm gonna take out this
99:12 - console log and I'm gonna put this back
99:15 - in I can say console dot log trained for
99:24 - one epoch hmm we're stuck is it just
99:34 - taking a long time or are we really
99:37 - stuck
99:38 - it just took a long time so that can
99:40 - take a while right it's slow because I
99:43 - haven't done anything to optimize my
99:45 - code it's just - and really what I might
99:48 - want to do is like sort of like put this
99:50 - in the draw loop and have some kind of
99:52 - animation but I'll come back to that
99:54 - I'll then we'll add that in a future
99:56 - video I just want to see now what
100:01 - happens well let's try using let's try
100:04 - let's evaluate it okay so let's wait
100:07 - actually you know what we're good
100:08 - I got a stop here I mean we don't know
100:10 - if it's worked but I think this is a
100:13 - good point to stop and take a break and
100:15 - get ready for the next video because
100:16 - what is it that I need to do I now need
100:19 - to test how it did so the next thing I
100:22 - need to do
100:23 - is give it all of the test data don't
100:25 - train with it but just evaluate how well
100:27 - it does with all of that testing data so
100:30 - that's what I'll do in the next video
100:31 - then of course what I ultimately want to
100:32 - be able to do is I want to be able to
100:34 - use my mouse to draw a nice little train
100:38 - or rainbow or cat into this canvas right
100:41 - here and have it guess what it is okay
100:44 - so so hopefully this video about
100:49 - training has helped I know we're not
100:52 - seeing anything yet so we haven't gotten
100:54 - to the exciting part but we have now
100:56 - trained over all of the training data
100:58 - and if I looked at the neural network
101:00 - it's still there you can see it has some
101:02 - input nodes you can see it's got stuff
101:04 - in it
101:05 - I got to talk about the learning rate
101:06 - we'll get to all this stuff later okay
101:08 - see you in the next video
101:11 - all right I'm running out of steam but
101:30 - but I'm gonna keep going alright okay
101:44 - yeah I could have used map why didn't I
101:48 - use map I don't know why I didn't use
101:50 - map how come i didn't use map I don't
101:55 - know why I didn't use map I'm such a
101:57 - using map kind of person these days
102:00 - we'll refactor it later all right
102:07 - shuffle training okay
102:11 - all right all right it's time we are now
102:20 - going to take our code wait okay okay
102:32 - it's time what are you watching by the
102:34 - way you were watching a video where I am
102:37 - now in javascript in the browser
102:38 - training a neural network to recognize
102:41 - doodles of cats rainbows and trains and
102:45 - you don't get to see anything here yet
102:47 - we're gonna I'm gonna get to that
102:48 - eventually all I'm doing is reporting
102:49 - that I trained over one Epoque with
102:52 - 2,400 different doodles 800 cats
102:55 - 800 rainbows 800 trains now I don't to
102:59 - add to this video is I want to test
103:01 - I have also testing data which the
103:04 - neural network has not been trained with
103:05 - that is also labeled I want to see is it
103:08 - able to guess what any of that stuff is
103:10 - and how accurately is it able to guess
103:12 - so let's do that right now so one thing
103:17 - that I did previously is I took all of
103:20 - the training data and put it into one
103:23 - particular array so let's do that with
103:26 - the testing data as well shuffling
103:28 - doesn't really matter but as well
103:30 - shuffle it because I'm not actually
103:32 - training in this case so what will take
103:34 - out the shuffling so I'm going to say
103:35 - let testing be an empty array and I'm
103:40 - going to put
103:41 - in everything all of the testing sorry I
103:45 - don't know why I'm just copy-paste and
103:48 - so this I'm gonna I am going to so
103:57 - actually let's do a little refactoring
103:59 - here let's let's take out let's take
104:02 - this and let's put this into a function
104:06 - called train or train epoch because I
104:10 - love the word epoch makes me sound like
104:12 - I'm doing something really fancy and
104:14 - futuristic so I'm gonna train for one
104:17 - epoch and so that's gonna go right here
104:23 - train epoch and you know this was kind
104:28 - of awkward what I did here and I thank
104:29 - you for DM me I have to be put in the
104:31 - chat I'm trying to be a person who uses
104:32 - some of these higher-order array
104:34 - functions these days so let's quickly
104:36 - hope I don't ruin everything
104:37 - one nice thing that I can do I don't
104:39 - need I don't need to have this little
104:43 - loop here I can just say inputs equals
104:46 - data map X X divided by 255 so this
104:52 - should this makes a new array which
104:55 - takes the previous array and divides
104:57 - each value by 255 and this uses arrow
104:59 - syntax and you can watch one of my
105:01 - higher-order function video tutorials
105:03 - about the map function but that just
105:04 - makes this a little bit cleaner so let's
105:06 - add that in and now let's run this again
105:09 - to make sure I didn't break it ah line
105:12 - 41 shuffle training oh I made this so
105:16 - let's pass in the training array and
105:23 - we're gonna train for one epoch finish
105:31 - finish there we go
105:33 - train for one epoch so now I'm gonna
105:35 - that still works I'm gonna comment this
105:36 - out and now I want to just check and
105:40 - take a look at the testing array to see
105:42 - if it has all the testing data in it and
105:44 - it does is 2600 which is right because
105:47 - if I had 800 it shouldn't have 2600
105:55 - hold on what's going on here oh yes look
106:05 - at this that's a bad error I need to be
106:09 - concatenated with testing so much for my
106:12 - copy pasting terrible terrible all right
106:14 - I knew 2600 was wrong
106:16 - 600 600 is right because it's 200 times
106:20 - 3 I have 600 test data points so now
106:24 - what I need to do and let's just do this
106:26 - with one right
106:28 - I can still do I can evaluate how it's
106:31 - going to do with the testing data
106:32 - without actually without actually
106:36 - training it so let's look at how this
106:39 - goes
106:40 - so let's write a function let's write a
106:42 - function called testing wait what did I
106:45 - call this a train EPOC test all with the
106:51 - testing data so let's do something
106:53 - similar to this function and let's
106:59 - rename this data just so it's no no no
107:03 - let's not rename that so let's do test
107:07 - all with the testing data I don't need
107:12 - to shuffle it I want to go through
107:15 - everything I'm gonna do exactly the same
107:17 - thing on a map it same inputs the same
107:22 - targets the same way but now here's the
107:26 - thing I want to say let prediction or
107:35 - I'm gonna say let guess equal neural
107:38 - network dot predict inputs and actually
107:47 - I don't need to have targets right I
107:49 - just need to have a label right I want
107:52 - to predict my guess is what does it
107:55 - think it is so right now what I'm
107:58 - actually gonna do rather absurdly is I'm
108:01 - just going to console.log the guess and
108:07 - I'm gonna console.log
108:09 - the label okay and I'm going to just for
108:15 - a moment I only want to do this with one
108:19 - data point in the testing data set so I
108:22 - want to test everything okay so I want
108:27 - to run this code it's so quiet now run
108:30 - this code and I want to see what does it
108:32 - think it is and what should it be
108:34 - let's run this so we can see look at
108:37 - this these are the numbers that came out
108:38 - totally randomly zero point zero five
108:41 - zero point zero eight zero point zero
108:43 - eight eight eight two so it thinks it's
108:46 - a number two zero one two and actually
108:50 - it's a zero it got it wrong it thinks it
108:55 - was a train but really it was a cat but
108:57 - that's okay it just got it wrong but
108:59 - this is good so first of all I need to
109:01 - do something where I evaluate which one
109:05 - is it based on these numbers so I need
109:08 - to find the index of the maximum I need
109:12 - to find the index of the maximum value
109:15 - so let's go to testing okay so I need to
109:20 - turn this guess which is just three
109:22 - numbers into a classification so
109:25 - basically I want to say let
109:27 - classification something like the
109:29 - maximum of so let's see is p5 has a max
109:33 - function right where I can give it two
109:35 - values and it gives me the maximum one
109:37 - if I have an array with a bunch of
109:42 - values does the max function do anything
109:46 - for me it tells me which one was the
109:48 - maximum oh sorry
109:56 - ah let's I just want to make sure it's
110:00 - working I equals 0 to 9 111 for max a
110:08 - 111 but I want the index so does max
110:12 - secretly if I call it in a different way
110:14 - or I know Arg max is kind of the there
110:20 - is no p5 function called hard max
110:22 - does Array have Arg max that's the
110:24 - technical term that you'll see in a lot
110:26 - of kind of machine learning libraries
110:29 - argA max is a function that will give
110:31 - you the index to the maximum value in
110:34 - the array I could write my own function
110:36 - that does that I could probably use
110:37 - reduce for it I think I did that didn't
110:40 - I do that in my reduced tutorial I think
110:43 - I did that in my reduced tutorial pause
110:46 - for a second oh but I don't I don't
110:53 - think I ever published the code for
110:55 - those tutorials
110:56 - did I I could just write it right now
110:59 - I'm afraid I'm afraid I'm gonna take a
111:06 - break and have a little water clever
111:34 - so I could use I could use reduce and
111:41 - write my own art max function 60 in the
111:44 - chat just gave me a really great tip
111:45 - because I forgot what's that arrays have
111:50 - a index of function so look at this
111:54 - watch this if I say max a that gives me
111:59 - 111 what if I say a index of max a get
112:05 - gives me three because the index of
112:08 - three of sorry 111 is three right this
112:13 - would be negative one because it doesn't
112:15 - exist so I can say the classification is
112:18 - the guess
112:21 - index of and let's separate this out let
112:27 - n equal max of the guess like this is
112:29 - the max value and then I want to get the
112:32 - classification is the index of that max
112:34 - and then I could just say I can just say
112:39 - console dot log let's look at it to make
112:46 - sure this is right console dot log
112:49 - classification and label so guess are
112:54 - the raw array values classification is
112:57 - the Arg max the index to the one in that
113:00 - array that's the largest and this is the
113:02 - target label what it's supposed to be so
113:04 - let's run this
113:14 - so let's run this and we got so let's
113:19 - look at this it makes sense this is a
113:21 - tiny number 0.03 that's a big one
113:23 - 0.87 yes it gave me one zero one that's
113:28 - that's the oh I can do by the way just
113:30 - unfolded look
113:31 - that's correct let's look at this ooh
113:32 - this one more time we can see like Oh
113:34 - got one again now it got one it's always
113:38 - the middle one that's interesting but
113:41 - that's just random to it got two so this
113:42 - is working now you'll notice these don't
113:45 - add up to one point two point two point
113:48 - one six so again I really should
113:51 - probably be implementing softmax as the
113:55 - function that I use that when I went
113:58 - exiting out into the output from the
114:00 - neural network softmax is a special kind
114:02 - of activation function essentially and
114:04 - this is something I cover in the neural
114:06 - network series that takes whatever that
114:08 - output is and transforms it into
114:10 - probability values that will all and up
114:12 - to 100% but I'm gonna come back to that
114:14 - in another video
114:15 - this will just work just fine for right
114:17 - now and so I can say now let's say let
114:26 - correct equal zero if if classification
114:35 - equals the label then correct plus plus
114:39 - and then I want to say the percentage
114:45 - equals the number correct divided by the
114:50 - total which is testing dot length so
114:56 - console dot log percent so let's look
115:01 - okay zero percent correct
115:03 - zero percent correct kind of get lucky
115:05 - and get one I got one correct okay so
115:08 - now what I need to do is let's do it for
115:10 - all of them
115:12 - let's not console.log everything and we
115:16 - should see right just by sheer
115:17 - randomness we should see about one third
115:20 - correct right not there's been no
115:22 - training the neural network without any
115:24 - training without knowing anything should
115:25 - get one out bout one out of three career
115:27 - oh why do I have oh I'm sorry this
115:31 - should happen at the very end after all
115:33 - the loops are done you can see by the
115:38 - way I did get exactly that 35% 35% 24%
115:44 - so there's a lot is very feelings only
115:45 - two I look at that exactly one third
115:48 - correct so things are going as expected
115:50 - but can we improve it can we improve it
115:53 - just a little bit will this actually
115:55 - work it's sort of sad that I'm doing
115:57 - this without showing you anything visual
115:59 - but I'm kind of thinking you the person
116:01 - watching who has visual talent you could
116:04 - actually start to a project for this
116:06 - would be to animate the training process
116:08 - and all that but let's let's train for
116:11 - one epoch let's just run through the
116:14 - training set then let it test again I
116:17 - wish my sound effects were working
116:19 - because I would certainly use a truck
116:20 - and roll roll and then I'm gonna say
116:24 - testing result and by the way I want to
116:30 - move this data prep up here and then I'm
116:34 - gonna just say this so basically we've
116:39 - prepped all the training data we've
116:41 - prepped all the testing data see you
116:43 - much work by the way it is just to work
116:45 - with the data that is like a whole
116:47 - project unto itself then I'm going to
116:49 - train and then I'm gonna test and we're
116:52 - gonna see and wouldn't it be nice if the
116:58 - testing maybe returned it so let's
117:01 - actually return that value and
117:04 - console.log it down here cuz i feel like
117:07 - that's kind of what I want to do correct
117:17 - percentage correct
117:18 - okay okay okay here we go let's see
117:24 - training training training of training
117:26 - all the way I like to train elected
117:29 - trained training all the way hey
117:30 - training training training machine
117:32 - hey we got eighty percent correct this
117:35 - shows that things are working right we
117:38 - got eighty percent correct that is so
117:39 - exciting to me out the door Wow
117:44 - like it was kinda like so that's really
117:47 - interesting mmm wow this is very
117:49 - exciting I don't even know what to do
117:50 - now
117:51 - percentage correct eight let's just
117:52 - confirm that right ready I'm gonna
117:54 - comment out the training no training no
117:56 - training
117:57 - remember with training 80% correct no
117:59 - training 33% correct
118:02 - this is good machine learning it's a
118:06 - thing that sometimes kind of almost
118:08 - maybe sort of works but it's highly
118:10 - problematic for many important ethical
118:13 - and social reasons but that is something
118:15 - we will come back to so we should really
118:17 - be again this is a good point should I
118:19 - even be doing what I'm doing I think
118:20 - it's okay to be doing what I'm doing
118:21 - everything is pretty transparent we know
118:23 - where the data comes from we know what's
118:25 - in it and we could see it and we've
118:28 - learned something about neural network
118:29 - oh I'm just amazed here okay so I should
118:32 - finish up this video but let's let's
118:33 - just do something interesting let's say
118:39 - for let I equals 0 I is less than 5 I
118:43 - plus plus so what we're going to do is
118:48 - we're going to Train oh we're going to
118:50 - Train we're gonna say epoch I plus 1 I'm
118:59 - just gonna start with 1 and go to 6 so I
119:05 - can just say epoch plus I so now what
119:08 - I'm gonna do is I'm going to see I'm
119:10 - gonna do it five times let's see how the
119:12 - percentage in increases let's make sure
119:15 - my training function we randomizes the
119:19 - training data reshuffles the training
119:21 - data that's very important each time
119:22 - okay let's see how much better gets
119:26 - training training training
119:28 - all my epochs loading loading loading in
119:31 - training epochs training Oh 76% correct
119:34 - training training training training all
119:37 - my Fox you are watching a video where I
119:39 - am not editing out the fact of it
119:41 - 79% training training training I'm
119:44 - trading all the way I'm almost a puck
119:46 - three and here's what we say any one
119:48 - percent
119:49 - training trading training trading all
119:51 - the way I'm almost a puck for ad this is
119:54 - what we say Eddie we went down why why
119:58 - so there's kind of it's interesting to
120:00 - see this here so there's this is where
120:01 - now we're revealing I haven't really
120:04 - been I have not been I'm not doing
120:10 - everything that the quote-unquote best
120:11 - or optimal or way that I could be so for
120:14 - example this idea of soft backs and
120:17 - cross-entropy
120:18 - I've really got to come back to that
120:20 - that's hopefully a way that's going to
120:22 - improve the training process it's gonna
120:24 - be able to squeeze out a little bit more
120:27 - accuracy if I add these two elements to
120:30 - my machine learning system I also have
120:33 - something where it's like hello my
120:34 - training 2400 drawings that's like the
120:37 - tiniest bit ever so I probably would
120:40 - want to run this with a much larger
120:42 - training set that's really gonna help I
120:44 - probably want a kind of a larger testing
120:47 - set as well just to have a better sense
120:48 - of how accurately this is doing but I
120:50 - think we're in pretty good shape here I
120:52 - feel like I'm happy with where I am so
120:54 - far in the next video what I want to do
120:59 - is kind of clean this up a little bit
121:00 - and think about maybe how to like
121:02 - animate the process like show that it's
121:05 - training so it's not just saying loading
121:07 - here forever until it gets to the end
121:11 - and then I'm going to add a part where I
121:14 - can draw my own little drawing and see
121:17 - if it could recognize my cat versus my
121:19 - rainbow versus my own train so in the
121:23 - next video that's what I'm gonna do and
121:24 - I'll see you there wait what's the N
121:33 - equals one sample size I I fixed that
121:35 - right yeah I fix
121:39 - it's going through all the testing data
121:42 - what have I done wrong this by the way I
121:50 - even though I feel like there's so much
121:53 - I could do better this is so much better
121:55 - than my end missed kind of oh it was
122:11 - good based on one output no issue though
122:13 - yes no no I know I know I know
122:16 - all right um so let me think here I am
122:20 - got to get going and go home soon but I
122:23 - definitely want to get this further
122:25 - today I don't I think maybe I won't I
122:29 - don't think I'm gonna do the softmax and
122:31 - cross-entropy
122:32 - thing today I think I just want to work
122:35 - on making this visually a little bit
122:38 - more appealing that it's an example that
122:40 - people could work with a little more
122:42 - easily
122:43 - so maybe what I'll do is create a train
122:49 - button which will do the training a test
122:55 - button which will run the testing and
122:57 - then let you draw in canvas your own
123:02 - your own sort of thing all right so
123:05 - let's do that and let's do that
123:14 - just trying to decide if I kind of want
123:17 - to put this train so let me do this I
123:19 - really like working with separate
123:20 - JavaScript files train test is so I'm
123:27 - going to take the train
123:28 - epoch function and put that in train
123:31 - test I'm going to take the test all
123:34 - function and put that in train test I am
123:43 - going to here I'm going to add
123:57 - what do i what do I say input type
124:00 - equals button or something I'll just use
124:05 - Create button I'm gonna use the silly p5
124:07 - create button and I'm gonna add another
124:13 - file called data prep dot J s and I'm
124:24 - gonna take this function and I'm gonna
124:31 - put that in there and I'm gonna go to
124:36 - index.html this little silly what I'm
124:38 - doing but this makes me happy
124:40 - train test and data prep this should be
124:48 - the same so now my sketch is is but
124:56 - cleaner here and I can make a button
125:06 - that just calls train I could make a
125:08 - button that just calls test yeah okay it
125:13 - was a button tag yeah plot error as a
125:15 - function of Deepak number oh I don't
125:18 - want to here's the thing if I had a I
125:21 - could invite imported something like
125:22 - matplotlib or whatever I just don't want
125:24 - to get into like drawing a graph in this
125:26 - but I could come back to that in a
125:28 - future video but I want to keep things
125:29 - pretty simple right now so I just move
125:36 - things to other files I think this is
125:38 - okay because I'm gonna need a draw
125:40 - function now get rid of this because
125:47 - what I could do when it's training I
125:49 - could have it not be blocking can I have
125:55 - a train like in a separate that's all
125:59 - yeah
126:02 - like I could have it I think I'm gonna
126:06 - skip the animation stuff yeah because
126:09 - what I could do is I could I could have
126:10 - it show like all the drawings while it's
126:12 - training but that's that's gonna be too
126:14 - much work right now that's a good
126:17 - exercise for somebody watching so all
126:19 - I'm gonna do is create buttons and then
126:22 - have make make it so I can draw in the
126:23 - canvas okay okay so I feel like what I
126:35 - want to do is yeah let's do this
126:48 - test and what do I say value or
126:52 - something
127:03 - oh I forgot to turn off the training
127:06 - please
127:24 - but entrain oh it's not value by the way
127:30 - guess who doesn't know HTML no wonder
127:39 - nothing was showing up in there okay
127:42 - train test oh look at this oh it's
127:44 - beautiful
127:44 - Oh beautiful oh that is just lovely
127:48 - let's do
128:09 - I don't know guess who also doesn't know
128:12 - CSS it was very hungry I guess that
128:20 - doesn't apply to the buttons yeah yeah
128:28 - whatever that's fine you can see those
128:34 - buttons you can use set timeout for non
128:37 - blocking yeah yeah but okay okay all
128:44 - right okay okay body yes oh I could do
128:52 - button ah there we go
128:56 - Oh beautiful that's the most beautiful
128:58 - thing I've ever seen
129:00 - uh oh
129:06 - no no wait wait come on margin that's
129:08 - what I want Oh lovely oh this is really
129:12 - getting good now okay so let me discuss
129:24 - all right I could make the training an
129:28 - ASIC I know I know I know but this is
129:31 - not that the problem these are all
129:33 - really good suggestions but I know and I
129:36 - should mention it but I really got a
129:38 - core thing here which is just a sort of
129:40 - demonstrate the concepts and I could go
129:43 - off be off on a tangent for so long to
129:45 - like promise of fie the training and
129:47 - everything so I'll come back to that
129:49 - don't like that this is okay
129:54 - oz delay equals new promise that timeout
130:01 - timeout okay okay here we go it's fine I
130:04 - don't care about blocking I'm all about
130:07 - I prefer synchronicity okay okay
130:16 - okay here we are it is time I am going
130:20 - to draw into this canvas a kitty cat and
130:23 - then I'm going to have something show me
130:26 - here tell me is that a cat or is that a
130:28 - rainbow or is that a train now before I
130:31 - can get to that I want to first at least
130:33 - make this somewhat interactive that I
130:35 - can train for an epoch just by pressing
130:37 - this button I can press this button to
130:39 - run the test to see how many things I've
130:41 - got correct so I did some things in
130:43 - between the last video in this video I
130:45 - added the buttons here in HTML
130:48 - I used my magical advanced CSS abilities
130:53 - to to alter how those buttons appear I'm
130:56 - now I am now officially a graphic
130:58 - designer and I have also by the way
131:03 - moved some of my code into separate
131:05 - JavaScript files so the Train epoch
131:08 - function and the test all function are
131:10 - in this JavaScript file and I have this
131:13 - data prep javascript file just to kind
131:15 - of move things around so the first thing
131:17 - that I want to do is I want to be able
131:19 - to attach events to those buttons so I
131:23 - want to say train button equals select
131:27 - and I'm using the p5 Dom function train
131:29 - and then I'm going to say train button
131:31 - mouse pressed and I will yeah yeah I'm
131:39 - just gonna say write train epoch so this
131:44 - will run the Train epoch function once
131:47 - and the if you don't know about arrow
131:52 - notation or then you can check out my
131:56 - video about that but I'm trying to use
131:57 - it a bit more in cases like this test
132:01 - button a select test and then I can say
132:07 - test button dot mousepressed and do the
132:12 - same thing now here's the thing that I'm
132:17 - gonna actually write this function out a
132:19 - little bit actually so hold on a second
132:24 - I like I want to use the arrow functions
132:28 - but I really just
132:30 - refactor refactor later let's make this
132:32 - let's make this easier to read
132:35 - EPOC so well I'll write an anonymous
132:39 - function that's okay I can handle that
132:42 - you can convert it in your head to an
132:45 - arrow function I'm going to call train
132:47 - epoch I'm gonna have a variable called
132:50 - epoch counter which is equal to zero I'm
132:54 - going to say epoch counter plus plus and
132:58 - then I'm just going to say create it
132:59 - actually I'm just gonna console.log it
133:01 - console.log and I'm gonna do exactly
133:04 - what I did here but I'm gonna say
133:08 - console.log epoch counter so every time
133:13 - I press that button it's going to train
133:16 - for an epoch increase the counter and
133:17 - console.log that and I'm gonna do almost
133:22 - the same sort of thing with the test
133:24 - button and test button test all and then
133:32 - I want to get the percentage correct
133:36 - test all I'm gonna say
133:38 - percent is percent and let me let me at
133:42 - least number format that number format
133:44 - percent 2 comma 2 and then let me also
133:50 - add a percent sign and one of these days
133:52 - what's that thing you can do in the s6
133:54 - now the back ticks I'll get to that at
133:56 - some point okay so this is what I'm
134:00 - doing I'll have a train button and a
134:02 - test button let's see let's see how this
134:08 - goes I am going to train let me just
134:11 - test cannot read property length of
134:15 - undefined alright so one goofy thing
134:17 - that I set up here is I've got to pass
134:19 - in the data that I'm using which I sure
134:23 - I could refactor in a way which I don't
134:24 - need to do that but 30 to pursue do I
134:28 - not have the 100 times in there let's I
134:31 - thought in my train test I thought oh
134:34 - let me let me multiply it by 100 so the
134:38 - percent right is point 35 but I want to
134:41 - multiply it by 100 so I see 35
134:43 - sent 35.5% so we could see test test
134:48 - test no matter what
134:49 - now I'm gonna train unfortunately this
134:52 - is all blocking I would want to do
134:53 - something and I could use es6 and
134:57 - promises or I could probably set time
134:59 - out there various ways that I could make
135:01 - this asynchronous so that it didn't look
135:03 - browser didn't freeze up while it's
135:04 - doing the training but I trained for one
135:06 - epoch I test it again and I got 78% so
135:10 - now at least we've got this interactive
135:11 - I can kind of keep pressing train if I
135:15 - if I have the patience to do it and see
135:18 - if it improves a little bit 80% now
135:20 - here's the thing let's do something
135:23 - really exciting what I'm going to do
135:26 - right now is I'm going to add a draw
135:29 - function actually I'm not even gonna add
135:31 - a draw function I'm gonna add a mouse
135:33 - drag function right whenever yeah I'm
135:39 - gonna add a draw function how to draw
135:41 - function and I'm gonna say stroke weight
135:45 - eight line P Mouse X P Mouse Y so this
135:53 - is in p5 the previous Mouse position
135:56 - then I'm going to add Mouse X Mouse Y
136:01 - then I'm gonna see what that looks like
136:05 - I don't see anything probably because I
136:08 - need to say I want what I'm drawing to
136:11 - be white there we go
136:15 - but now I want to only draw if I'm
136:17 - pressing on down on the mouse so I'm
136:19 - gonna say if mouse is pressed so now if
136:28 - mouse is pressed so I could draw my own
136:31 - cat
136:37 - I'm gonna work really hard on this I
136:39 - don't have a way so now all I need to do
136:42 - right all you need to do is grab the
136:44 - pixels of what I've just drawn oops
136:51 - grab the pixels of what I've just drawn
136:54 - and turn it into a 28 by 28 image that I
137:00 - sampled down and normalize to 780 for
137:04 - inputs give it to the neural network and
137:06 - have a neural network say so let's see
137:11 - if we can make that happen okay so what
137:15 - do I do now I'm gonna need another
137:16 - button and I'm gonna call this button
137:22 - guess and now I'm gonna say I'm gonna
137:28 - just grab all this code and I'm gonna
137:31 - say guess button equals select guess and
137:35 - when I press the mouse on that button
137:39 - what do I need to do so the first thing
137:41 - I need to do is I need to somehow make
137:43 - an inputs array that's all I need I need
137:45 - an inputs array with a bunch of numbers
137:47 - between 0 and 1.0 according to the
137:50 - pixels of what I've drawn what would be
137:53 - the best way to do this I could just
137:56 - read the pixels but it's 280 by 280 I
138:00 - think I can use copy I think are get I
138:03 - got an idea
138:05 - I think I can say let image equal get so
138:12 - I think the get function in p5 just
138:16 - grabs all the pixels from the canvas and
138:18 - makes it into a p5 image object so let's
138:21 - see what that does if I'm right about
138:23 - that yep I got an image that's 280 by
138:28 - 280 now what I can do is I could say
138:31 - image dot resize to 28:28 let's take a
138:36 - look at that now I have an image that's
138:40 - 28 by 28 now let me load the pixels and
138:45 - guess what guess what everybody
138:48 - we are just right back to where we were
138:50 - earlier
138:50 - when we instead of reading in those
138:53 - bytes and turning them into pixels I now
138:55 - have pixels that I essentially want to
138:56 - turn into bytes so what I'm gonna do is
138:58 - write a nice little loop I equals 0 I is
139:02 - less than image pixels dot length and
139:06 - I'm gonna do something a little goofy
139:07 - here I'm gonna say I plus equal 4 so
139:10 - here's the thing this is by definition a
139:14 - grayscale image right I can't put
139:19 - anything but black white or grey in
139:21 - between here and so what what I want to
139:28 - do I'm thinking here I'm thinking here
139:29 - is that the red the green the blue
139:32 - values of each pixel are all going to be
139:34 - the same so I can actually just skip
139:36 - every four elements in that pixel array
139:38 - because the pixel array is RGB a RGB a
139:42 - RGB a so I should be able to look at
139:44 - just every fourth pixel every four not
139:48 - every fourth pixel every fourth element
139:50 - of the array and say the the brightness
139:54 - is that image dot pixels index I and
140:00 - then inputs now here's the thing that's
140:04 - a little bit awkward I should be able
140:05 - say I / 4 mm you know what I'm gonna do
140:09 - I prefer to say remember that variable I
140:12 - had called length let me use that that
140:15 - should be 784 another way I could do it
140:18 - is just say I times 4 right to skip
140:22 - ahead every 4 and then say inputs index
140:25 - I equals bright / 255 now let me just
140:32 - say console dot log inputs I just want
140:35 - to look at that did I am I getting an
140:38 - array that is 200 that is 784 floating
140:42 - point numbers long with each value
140:44 - normalized between 0 and 1 let's see let
140:47 - me just draw some stuff in here good
140:49 - guess and there we go
140:50 - now can I find ooh oh yeah yeah there we
140:55 - go look at this so it is working I mean
140:57 - I could have made a mistake somewhere
140:59 - but this seems about right
141:00 - so you know I I could be more thoughtful
141:03 - about drawing in
141:04 - softer way that mirrors the doodles a
141:06 - little bit more and the thickness is
141:07 - really going to matter so I'm going to
141:10 - have to figure it out now I'm being
141:12 - asked in the chat shouldn't it be the
141:14 - other way around black on white well
141:16 - here's the thing in all of my previous
141:18 - videos if I open up my processing sketch
141:22 - and this is a sort of point of confusion
141:26 - if you recall this is going to take a
141:30 - little while to load so I'm gonna talk
141:33 - while it's loading if you recall when I
141:36 - did all this stuff previously you did
141:38 - see a black pencil doodle on a white
141:43 - background which is this however what I
141:45 - did the moment I wanted to offer draw
141:48 - the pixels was I reversed it the data
141:50 - actually in the data set is the other
141:53 - way around so so machine learning wise
141:58 - I'm matching it correctly what I might
142:00 - choose to do just to like make this a
142:03 - bit visually more appealing is I might
142:05 - choose to just to be consistent here is
142:09 - let me go back to sketch where's my draw
142:12 - function where is that draw function
142:18 - what just happened
142:19 - did I put that draw function like Oh put
142:22 - the draw function in train test that was
142:25 - by accident let me move that back to
142:26 - sketch I'm gonna change the background
142:32 - to 255 and I'm going to change the
142:38 - stroke to zero and then I'm gonna do
142:41 - something weird which is I'm actually
142:42 - say 255 minus bright I'm gonna reverse
142:45 - it when I turn it into the data so I can
142:47 - actually look at it like this you know I
142:51 - kind of now in the canvas is white but I
142:54 - have an idea I'm gonna go I'm gonna say
142:57 - body can I say like background color and
143:00 - let's just make this some like light
143:01 - gray look at me look at me you my CSS
143:04 - yeah I could see now oh this is what I'm
143:08 - drawing my cat okay so
143:17 - so let's press so let's press guests and
143:21 - we can see it's still a whole lot of
143:23 - zeros so I think I'm good I think things
143:26 - are looking good okay now what I need to
143:31 - do is now I need to say it could be
143:38 - perfectly honest with you yeah let's
143:41 - leave it let's know what time let's now
143:45 - say let guess equal neural network dot
143:50 - predict those inputs and remember I did
143:53 - this in the testing I then already
143:56 - figured out the code in the testing to
144:02 - get that classification right remember
144:04 - this I have to find the highest in the
144:06 - in the output so I have to find the
144:07 - highest one and what index that is and
144:10 - so now I am going to say maximum
144:17 - classification and this is really goofy
144:20 - but I'm just gonna say if classification
144:22 - equals cat this is like the worst code
144:27 - anybody could ever write but I'm just
144:32 - gonna do it this way just to get this
144:35 - done and I'm gonna let those of you
144:37 - watching create your own variation of
144:39 - this with an actual interface and be
144:43 - more thoughtful about how you how you
144:46 - end end this up I got one more train
144:51 - console.log train okay are we ready are
144:56 - you ready are we ready I think we are so
145:00 - here we go so I'm gonna draw what I
145:04 - think is a cat some whiskers some
145:12 - whiskers I don't know and a little
145:15 - smiley old ah okay now I'm gonna guess
145:18 - what is that it's a rainbow of course
145:21 - it's a rainbow
145:22 - I haven't trained it yet so I shouldn't
145:24 - if I got the right answer we
145:26 - gotten just very very lucky now I am
145:29 - going to run the training okay it's
145:34 - training it's thinking it's gonna train
145:36 - for one it would be nice to have an
145:38 - animation I'm doing a different one
145:40 - let's just run the testing you know it's
145:42 - getting the test data right 80% of the
145:44 - time so even if at best this is going to
145:49 - fail one out of twenty percent of the
145:51 - time which is quite often you remember
145:54 - recent events in our history here okay a
145:56 - guess a train hmm let's train it one
146:01 - more time please II didn't think it was
146:04 - a rainbow this time let's train for
146:06 - another epoch try to get a little more
146:08 - accuracy here I think I can Orma lies
146:11 - the data correctly let's run the tests
146:17 - again 82% let's guess train so I sound
146:24 - bore doesn't work it's a train everybody
146:26 - and good night thank you very much this
146:28 - is the end of this video
146:29 - all right all right well let's do a
146:35 - rainbow so I don't have a way of
146:37 - clearing this unfortunately so let's add
146:38 - something or my sound effects still not
146:42 - working it makes me sad because at least
146:43 - I could do things like but the yeah
146:51 - resizing blurs and makes grey I should
146:54 - actually show what it looks like with it
146:55 - resized to make sure but is the sound
147:01 - effects still bad
147:10 - like oh okay great let's go back and do
147:26 - that again I mean I thought I'm very
147:28 - happy with it to fail but at least now I
147:30 - have the sound effects it'll be more
147:31 - entertaining okay all right I'm going to
147:35 - draw for myself a cat you know what I
147:38 - think this isn't thick enough one thing
147:41 - I should do let's let's actually let's
147:43 - take a look one thing that I could do
147:44 - here I want to see the resized image so
147:51 - let's make this a little bit thicker
147:52 - when I'm drawing I think that's gonna
147:54 - help where am i drawing again in the
147:56 - draw function let's make this 24 I think
148:01 - this is gonna be oh I don't know that's
148:03 - I'd have to look back at the train again
148:05 - oh I think it was actually fine let's
148:06 - just make it 16 okay that's a little bit
148:07 - better so I'm gonna try to make a cat
148:12 - but actually one thing that I wanted to
148:14 - is when I press the guest button I kind
148:17 - of want to see that resized image where
148:20 - is that so let me also let's just see if
148:25 - I can I'm just gonna draw it image guess
148:28 - 0 0 I just want to be able to see it
148:30 - like whoops execute draw image on mmm oh
148:38 - not the guess image image I just want to
148:44 - see what it looks like yeah that's the
148:46 - smaller version of it I think that's
148:47 - okay that kind of feels like what the
148:49 - doodles look like so let's try okay
148:53 - I'm gonna draw a cat I really should
148:57 - probably use the rainbow give it some
149:01 - nice whiskers and now I'm gonna guess
149:05 - what is this now I haven't trained the
149:07 - neural network at all so I really I just
149:09 - have like a one out of three chance of
149:10 - getting it right
149:14 - it's a train and look there's my doodle
149:19 - sample down so that's not correct but of
149:23 - course it shouldn't be correct
149:25 - now let's train the neural network and
149:28 - it's gonna have to wet we're gonna train
149:29 - for a bebop here we're training okay
149:37 - we trained let's run the testing just to
149:42 - see 75% okay
149:44 - that's pretty good let's guess it's
149:46 - still a train I do want to point out
149:49 - though whoa what am i console logging
149:53 - here and why was it different something
149:55 - weird is good oh you know what because
149:58 - it's got all these pixels there now in
149:59 - the canvas so that was bad idea for me
150:02 - to draw that up there that was sort of
150:04 - just for debugging let's try this again
150:07 - let's draw a rainbow rainbow my people
150:10 - were recognizable okay so I'm gonna draw
150:12 - my rainbow all right that's my rainbow
150:18 - I'm gonna guess it's it always thinks
150:21 - it's a train let's run the test data set
150:25 - it got 33 percent correct let's actually
150:28 - train the network not a rainbow probably
150:36 - it's very unlikely that this will work
150:37 - in any way
150:39 - oh we finished okay now here we go I'm
150:44 - now gonna guess again I can't brother
150:48 - look alright fine 5 5 s let's train it
150:54 - one more time
150:56 - we need to e box for it not to just
150:59 - always think it's a train I'm kind of
151:01 - suspicious here that something might be
151:03 - going wrong it always thinks it's a
151:04 - dream it's a conspiracy because it's
151:07 - second coding train all right we did two
151:10 - epochs
151:11 - let's run the test again hey our our
151:13 - accuracy went up from 33% to 80% I
151:16 - really should get rid of these
151:17 - unnecessary console logs and I'm gonna
151:19 - guess again here we go
151:23 - definitely gonna just say train isn't it
151:25 - oh I get trained by accident Deepak 3
151:36 - test 81% okay here we go yeah at least I
151:48 - got cat I mean we got to be happy that
151:50 - we got cat right let's train again I
151:54 - mean 20% of the time it's good to be
151:57 - wrong and I'm most likely more than that
152:00 - now is it did is my data is the new data
152:04 - formatted exactly right okay do another
152:08 - epoch 81%
152:18 - alright I'm gonna pause for a minute
152:20 - here and investigate to make sure there
152:22 - isn't anything horribly wrong because
152:25 - what could be wrong I mean I'm not
152:27 - surprised as isn't working but if my
152:29 - data the way that I'm passing it and
152:31 - formatting the data is not the way it
152:33 - was trained then we've got an issue okay
152:37 - okay
152:39 - I think it's a pixel data problem yeah I
152:44 - think I wouldn't be surprised let's
152:47 - let's kind of like think about this a
152:49 - little bit so it's 7 or 84 pixels
152:54 - one is white I mean the data is right
152:58 - isn't the data in the training let's
153:00 - look at this so I want to look at
153:02 - training oh that's not a global variable
153:06 - cats right if I look at the training
153:11 - data it's all zeros
153:15 - oh but yeah it's all zeros but it I'm
153:21 - normalizing it later it's all zeros and
153:23 - then you know it's got a lot more nuance
153:25 - probably in terms of the anti-aliasing
153:30 - oh my I'm not sure the constants are
153:35 - right yeah that's a good question that
153:43 - also could be wrong how could that be
153:45 - wrong though so I should check that what
153:57 - else know what do I so let's let's get
154:05 - rid of some console logs they don't need
154:10 - and let's console.log
154:18 - the guests
154:28 - rainbow rainbow is the second one one
154:35 - this should be this one one and is that
154:42 - how I labeled them when I did training I
154:47 - mean I can't imagine that off I'm so
154:51 - let's see okay so let's sexually train
154:56 - it I mean the main problem here is I'm
154:58 - using like the tiniest dataset in the
155:00 - world it definitely needs more training
155:02 - I just would love it to just sort of
155:04 - work so let's guess again
155:06 - cat hey that's so that's you know a more
155:12 - expected result I'm just out of
155:14 - curiosity if I add the whiskers
155:28 - I need something I need to I know I can
155:35 - just do this cat cat cat cat tree I just
156:02 - want to set the background yeah thinner
156:05 - I mean I think I'm just suffering from
156:10 - 255 minus valve divided by 255 is wrong
156:13 - is that wrong
156:15 - no I think that's right i I mean I I did
156:20 - this very awkwardly in that I've changed
156:22 - the white on black black on white thing
156:23 - but I think I've done it consistently
156:26 - yeah let's look at one of the training
156:28 - images oh it's just such a pain to
156:33 - render them I don't feel like ready I'm
156:35 - tired it's the day I just want to finish
156:37 - this up let people play
156:40 - oh yeah full-sized cat right also I
156:48 - should probably just do a lot more I
156:49 - mean
156:56 - I mean this is going to look more like a
157:00 - train now
157:08 - okay hey Wow was really sure about it -
157:16 - fascinating train it again maybe that's
157:23 - my issue
157:27 - give me another epoch yeah alright I
157:36 - need a clear canvas button yeah
157:39 - all right so let me get rid of this take
157:55 - your screen shot of this okay just just
157:58 - for the sake of argument
158:00 - where are my console logs did I do it in
158:10 - sketch yeah I don't want this anymore
158:16 - okay
158:25 - okay I know I could render the
158:31 - normalized image but I should render the
158:34 - normalized image to really be sure but
158:36 - I'm let's do that but I'm I'm lazy yeah
158:43 - I think the issue that the issue is so
158:46 - much I mean I really have done a bad job
158:51 - of I'm walking over here so let's just
158:53 - come I'm gonna just cut I got to be done
158:55 - with this so I'm gonna come back alright
158:58 - thanks for I'm back and I actually got
159:00 - it to recognize this cat so let's try
159:03 - doing this though let's just try again
159:05 - so oh and but actually let me at least
159:08 - add a clear a clear button so let's go
159:15 - here and let's add one more button
159:18 - button ID equals clear clear and I'm
159:23 - going to go to sketch touch a s and I'm
159:26 - going to say whoops clear a clear button
159:34 - equals select clear and then I'm gonna
159:39 - say clear button mouse pressed and I'm
159:45 - gonna just clear the background so now
159:51 - whoops mousepressed it's not a function
159:54 - now clear okay so we're in good shape
159:58 - here there we go
159:59 - so alright so now let me try draw my cat
160:04 - that's kind of more like a cat like this
160:09 - other cat drawing was so much better and
160:12 - more sort of like centered I mean really
160:15 - really the issue is that I'm using a
160:18 - very small training set but let's guess
160:20 - it is a rainbow that is clearly a
160:22 - rainbow thank you very much let's train
160:26 - for one Epoque
160:33 - let's test and let's guess it's the cat
160:41 - train everybody welcome to the cat train
160:43 - at least like it clear and I can try
160:46 - drawing another cat now I don't have to
160:48 - retrain whoops it's looks right let's
160:52 - train again let's train again and let's
160:54 - clear I can't clear till I finish
160:56 - training are you still watching this
160:58 - videos we're gonna we're gonna forget it
161:02 - to recognize subject 81% correct
161:10 - let me try a different link rainbow that
161:15 - looks more like a great rainbow that's
161:17 - definitely a train Bo it's funny when I
161:22 - went into my like let's let's go another
161:30 - you pot it's kind of gonna shuffle up
161:32 - the trading a little bit
161:44 - okay whoa Matthieu you're gonna have fun
161:48 - editing all this out I know I know your
161:53 - training data ranges from zero to 255
161:55 - but your inputs range from zero to one
161:57 - and it's black on white
161:59 - I have normalized unaccounted for all of
162:01 - that because when I actually I mean I
162:04 - should really double check it but when I
162:07 - train I take the values and I normalize
162:14 - them by dividing by 255 then then draw
162:29 - thinner lines I wonder if the thinner
162:31 - lines would do it so that's that problem
162:35 - the data itself is black on white and
162:42 - I'm drawing white on black but I reverse
162:47 - it it's white on black I'm drawing black
162:50 - on white I'm drawing white on black on
162:54 - white the data is white on black so I
162:58 - invert it and then normalize that I
163:00 - think I have all that correct I mean I
163:02 - could be wrong
163:03 - thinner lines would be interesting to
163:05 - try
163:12 - oh I can't map if there are you into
163:19 - eight thingies
163:31 - it seems it to map changed it to map
163:39 - this is so good this is so good
163:42 - this is a great problem to have let's
163:51 - just do it in the testing cuz the
163:52 - testing is not very much stuff
164:05 - it's kind of normalized in there oh but
164:09 - am I only getting zeros and ones hold on
164:13 - no but the inputs shouldn't be oh yeah
164:21 - he's restricted to you int 8 so it's
164:25 - just zeros and ones which is gonna be
164:28 - weird yes yes yes this is bad
164:33 - from data map okay all right hold on
164:41 - everyone there's actually kind of a
164:44 - major problem right here I was being all
164:48 - fancy refactor we got to use this map
164:51 - function but that makes these inputs
164:54 - restricted to you into eight thingies
164:57 - integers only a zero or one I really
164:59 - want to just divide by 255 and make them
165:02 - nice floating-point numbers so I could
165:04 - go back to my loop or apparently I could
165:08 - say array from data dot map I believe
165:17 - this will create a new array and let me
165:19 - just check that in the testing I'm gonna
165:23 - say console dot log inputs and let me
165:30 - run test and now we can see yes this is
165:33 - a regular array with numbers that are
165:39 - somewhere in here oh let me look in the
165:41 - middle that are floating point numbers
165:43 - okay this is good this could be the
165:45 - source of a lot of our problems so let
165:48 - me take this and put this also here so
165:53 - that fixes it for the training and now
165:56 - oh and by the way while I was taking
166:00 - that break I added a Clear button and
166:03 - let me just show you the code for that
166:07 - trying to figure out what was wrong in
166:11 - sketch j/s there is now a Clear button
166:14 - and all that Clear button does is draw
166:17 - my background so we are ready to attempt
166:20 - again hopeful let's just see by the way
166:26 - what does it think an empty images it
166:29 - thinks it's a train because as we know
166:32 - it's always a train maybe I should try
166:36 - drawing a train let me draw the rainbow
166:38 - I feel like the rainbows got to be the
166:40 - most recognizable and I mean by the way
166:42 - I made the stroke a little bit thinner
166:44 - and I don't know let's make this the
166:47 - rainbow okay
166:48 - so now first of all I haven't trained it
166:50 - yet let's guess it still thinks it's a
166:53 - train obviously let's test oh I forgot
166:56 - to have that console.log 31% I want to
166:59 - get rid of that console.log in train
167:01 - test let's get rid of that so let me
167:09 - start over here for a second and let me
167:11 - draw my rainbow and let me guess
167:15 - it is of course a train as it always is
167:18 - let's run the test we got 30% right
167:21 - because we're just guessing let's train
167:23 - for an epoch
167:31 - oh it's finished I guess so involved in
167:37 - my dance let's we got eighty four eighty
167:40 - five percent correct this is good
167:43 - let's now guess it's a cat watch look
167:50 - it's got whiskers and a little like
167:55 - little ears and it is totally a catch
167:59 - it has guessed a cat let's clear and
168:03 - let's try drawing a train this is my
168:07 - train it's got a big choo choo thing
168:11 - there's my train this is the coding
168:22 - train so I'm there's so much that could
168:25 - be improved here the real problem is
168:27 - that I am using a tiny data set the
168:32 - other problem is the other problem is I
168:41 - haven't been really so thoughtful about
168:44 - thinking about this spatially I'm
168:46 - flattening this image into one vector of
168:50 - pixels and you know where where it's the
168:54 - using a so called convolutional layer in
168:57 - advance of this what this is just like
169:00 - final layer is something that could
169:02 - actually help this to work much more
169:03 - accurately I hope to come back to that
169:05 - in a future video also probably adding
169:08 - softmax and cross-entropy are going to
169:11 - be a way to sort of squeeze out a little
169:13 - bit more accuracy but ultimately what i
169:16 - wouldn't be curious for you to do if
169:18 - you're watching this I mean there's
169:20 - going to be more videos in this playlist
169:21 - but this is if you're watching this you
169:24 - can and they don't exist yet what I
169:26 - would love for you to do is think about
169:28 - a way that you can try this with larger
169:31 - data try this with animation and think
169:37 - about ways to make this a bit more
169:38 - robust make it more creative and goofy
169:41 - and fun but we've got the basic idea
169:43 - here
169:45 - I'm looking at the chat
170:01 - sorry I'm sorry I'm looking at the chat
170:03 - when I was trying to end this video this
170:05 - is gonna be an edit point I frozen so
170:07 - that there will be good continuity so
170:15 - share with me what you make all the code
170:18 - for this will be published there's so
170:20 - much more to do with it but we've got a
170:23 - basic doodle classifier that mostly
170:27 - thinks things are trains so thanks for
170:29 - watching the coding train alright let's
170:37 - play around here clear let me draw a cat
170:41 - well I'm hungry I'm tired it's been a
170:45 - long week I'll be back next Friday this
170:47 - is my cat it's kind of working it
170:56 - recognized my cat can we edit that into
171:01 - I don't know you know I got a one out of
171:11 - three chance
171:12 - oh go on everybody this is exciting why
171:17 - is it that when I'm not in the mode of
171:19 - like making the video it stops working
171:25 - alright try increasing the stroke weight
171:29 - again alright I think this is pretty
171:31 - darn wonderful
171:42 - look at this this is getting okay not
171:46 - you could we like maybe like put
171:48 - together some montage towards the end
171:50 - that kind of maybe I could talk over it
171:53 - let's try this
171:58 - after this video ended I went and tried
172:01 - a whole bunch of other drawings and they
172:03 - worked so right now you're gonna see a
172:05 - quick montage of those moments where it
172:08 - worked
172:15 - that's probably useless but if you could
172:18 - put something in there yeah okay see
172:24 - good okay thanks everybody
172:28 - oops rainbow okay now it's not working
172:32 - all right the coding whatever that is
172:34 - alright everybody so I should show the
172:37 - percentage yeah yeah yeah my drawing
172:42 - might be improving all right everybody
172:44 - it is 6:30 this has been how many hours
172:47 - of live streaming has to spend today let
172:49 - me think about this I did an hour and a
172:52 - half this morning I started at about
172:55 - 3:30 for three hours I'm close to five
172:58 - hours at this point the end dance what
173:01 - is the end dance and let me think about
173:06 - all how many videos are gonna come out
173:08 - of this I guess I don't need to worry
173:10 - about this now what's the end what's the
173:13 - end dance and dance people demand and
173:15 - dance I don't know what that is is it
173:19 - when I read random numbers I definitely
173:22 - want to read some random numbers those
173:26 - of you stayed up to the middle of the
173:27 - night to watch this live stream you are
173:29 - soon gonna be able to go to sleep and I
173:31 - will be here to put you to sleep
173:35 - thirty one thousand two hundred and
173:37 - thirty forty one thousand two hundred
173:40 - forty three thousand nine hundred
173:42 - seventy three sixty two thousand one
173:45 - hundred and forty six seventy thousand
173:48 - two hundred and forty-five thirty-nine
173:50 - thousand eight hundred and fifty-six
173:53 - twenty-four thousand twenty-nine thirty
173:56 - eight thousand three hundred and
173:57 - eighty-two 9225 forty-nine thousand
174:05 - eight hundred forty eight twenty nine
174:08 - thousand two hundred forty I'm in the
174:10 - wrong screen I've never done it from
174:20 - over here fifty-six thousand six hundred
174:24 - eighty five sixty three thousand seven
174:27 - hundred and one sixteen thousand is that
174:37 - the end dance I don't know so what else
174:47 - have I got to say
174:49 - spooky numbers thank you everybody
174:54 - do other epoch yeah yeah yeah train
174:57 - another epoch Oh actually it's it's it's
174:59 - so much more accurate than it was before
175:00 - just because of now it has it's not just
175:04 - a zero or one epoch - oh no test
175:08 - eighty-six percent so it's it's got 86
175:11 - percent right which is pretty amazing
175:20 - I'll take a few questions
175:25 - all the data is 800 each its 2400
175:30 - training data images and there's 800
175:34 - rainbows 800 cat's 800 guess Jaime
175:42 - writes it's great Steve dreamed on the
175:43 - live stream rather than relentlessly
175:45 - happy video where are you from well I
175:55 - guess I'm from New York City I've lived
175:56 - in New York City since in a 1995 but I
175:59 - did grow up in the town of Baltimore go
176:02 - O's will you try next time with a
176:10 - massive data set yes I my goal is to
176:12 - work with a much larger data set and use
176:15 - something that's hardware accelerated
176:18 - like deep learn j/s with this new
176:20 - library that different group of
176:23 - collaborators here at ITP are developing
176:25 - called ml5 what did the cow say
176:32 - something like that
176:34 - [Music]
176:38 - and do you know how to style a web page
176:41 - definitely not and even if I did it
176:44 - would be the ugliest web page ever made
176:48 - alright so I am going to ohlet's while
176:51 - I'm here let's just go ahead let's see
177:02 - oh I modified em missed and I I don't
177:05 - know what I modified there let me add is
177:11 - there anything weird in this directory
177:13 - that I don't want to add I think it's
177:16 - fine
177:18 - so yeah so I'm now gonna put this on
177:23 - github oh whoa oh oh I learned something
177:28 - this week
177:29 - tiny subversions on twitter i went to a
177:33 - workshop about git and I now know that
177:36 - I'm doing it all wrong first of all I
177:38 - really have used this like I term I need
177:40 - to really work on my terminal because I
177:43 - should get I should have what branch I'm
177:45 - on and there's all sorts as I should
177:46 - have some color coded I got to get to
177:48 - that but I am no longer I am no longer
177:52 - never again am I going to use - em I
177:57 - mean sure if I'm just changing the
177:58 - readme or short this is a shortcut when
178:01 - I commit I want to write a good solid
178:03 - description of what I'm writing so I'm
178:07 - gonna do this now I don't think I've
178:09 - configured a text editor or anything
178:10 - well let's see what happens
178:12 - ah ooh oh I think I might be in vim and
178:16 - my in vim or VI help me with this
178:19 - everybody alright so the commit message
178:23 - these will all be ignored but look at
178:25 - this it's telling me I need to configure
178:26 - a different text editor but I'll just do
178:28 - this right here in terminal I'm gonna
178:31 - write at the top I'm gonna say oh how do
178:34 - i how do i how do I use this thing no I
178:37 - don't want to exit I want to write my
178:39 - comments at the top I to type okay I
178:43 - insert this is the first this is me
178:51 - adding the quit the Google quick-draw
178:57 - Doodle classification example wait don't
179:02 - I write the short comment first and then
179:05 - so don't I do something like what's the
179:08 - proper way to do this so I want to say
179:10 - I'm just gonna say adding new doodle
179:16 - classifier example now so that would be
179:21 - the short message right and then now
179:24 - anything I put here would be the longer
179:27 - more descriptive thing so I'm going to
179:29 - say I spent the day recording videos
179:34 - recording a set of video tutorials about
179:38 - how to do image classification with a
179:43 - simple toy neural network there are lots
179:48 - of problems with this and the goal is
179:51 - purely educational and to have some fun
179:57 - I hope to improve this example in the
180:05 - future it could use an interface and
180:10 - some animations softmax function and
180:20 - working with a larger data sets and ml5
180:26 - deep learn is there we go
180:29 - okay first line is the title others are
180:32 - the message so this is now my commit
180:34 - message I really worked hard writing it
180:37 - it's dear diary oh my god is totally oh
180:43 - except for the fact that I don't know
180:45 - how to use vim oh yeah dear diary well
180:50 - how do you sign off a diary yours
180:53 - forever
180:59 - the coding the coding train
181:05 - choo-choo okay now what do I do to make
181:11 - sure I save this without losing it
181:18 - then it signs it escape : WQ : WQ escape
181:26 - I know : does something
181:30 - I'll get wait hold on I'm not looking at
181:32 - that YouTube chat I don't want to lose
181:34 - this beautiful message
181:35 - I do escape first okay I did escape : w
181:43 - that rights can I just do that first
181:46 - without Q then Q and then I'll quit I
181:53 - think I did it get log there it is oh my
181:59 - commits there this is the greatest thing
182:00 - ever
182:01 - everybody thank you to tiny subversions
182:06 - because I don't know screenshot this
182:09 - this is what I learned from Darius
182:12 - Kazemi
182:12 - who is amazing and it's so thoughtful
182:15 - about open-source thank you so much I'm
182:18 - so excited about this and now so you can
182:22 - all send that to him on Twitter if you
182:24 - want git push origin master wait a
182:31 - second it's not gonna let me do this
182:32 - isn't it didn't I like do some kind of
182:35 - like circle C I crazy continuous
182:37 - integration thing let's see what happens
182:41 - yeah it was fine with that it was fine
182:44 - with that now if we go to here we go to
182:51 - this commit there it is Oh glorious
183:02 - no I am going to make every single
183:08 - commit message I ever write with dear
183:11 - dear diary I don't know why is diary
183:15 - always capitalized we write dear diary
183:18 - alright so that's done you can now look
183:21 - at the code so here's the thing at the
183:26 - moment I probably won't don't want poll
183:30 - requests on this because I want to
183:32 - continue to expand and improve it but I
183:36 - would be very happy with although I
183:39 - guess I need to I don't know how to best
183:41 - manage this but I certainly would be ok
183:44 - with you could file an issue with a link
183:47 - to what you made I'm not sure yet I
183:48 - guess a community contribution on the
183:50 - page that goes on the coding training
183:52 - website anyway
183:53 - ought to figure that out but just be
183:55 - aware I do I'm very interested in
183:57 - proving this and making this example a
183:59 - bit better but for me it's somewhat
184:02 - important that the code that's online
184:04 - matches the videos although I think what
184:06 - I probably would do is this is sort of
184:09 - separate from the code that lives here
184:12 - so I could probably freeze the code here
184:16 - somewhere and then have the $20 network
184:18 - library be expanded a little bit alright
184:22 - oh yes the - V flag I get a full diff in
184:25 - the editor - okay it should be dere
184:27 - github yeah yeah okay I got to go home I
184:29 - am getting crazy I agree
184:31 - good bye everybody I will take one or
184:34 - two last questions
184:35 - oh so I hope that this chat can play
184:42 - back it's supposed to now but I don't
184:45 - know if I needed to configure something
184:46 - so somebody let me know and yeah all
184:50 - right I just got to go
184:52 - it's 6:30 I'm gonna go home and have a
184:55 - nice weekend
184:56 - Oh in the bomb cyclone apparently and
185:00 - I'm just looking to see if I have any
185:01 - emergency messages don't and yeah
185:10 - alright alright alright everybody
185:12 - goodbye
185:12 - no I will see you all next Friday I
185:15 - should be
185:16 - next Friday that's the plan I will not
185:19 - be here two weeks from this Friday Oh No
185:22 - maybe I will be there's some Friday in
185:24 - the future that I'm missing oh yeah yeah
185:26 - I think that is two weeks from this
185:27 - Friday that I am gonna be away so anyway
185:30 - I'll be around soon enough
185:32 - oh yeah thank you
185:36 - just in case anyone is wondering if you
185:40 - want to try this out right now
185:42 - coding trained github do slash toy
185:47 - neural network I know somebody just post
185:51 - that in the chat there's you can
185:52 - actually run the demo online we got to
185:54 - clean this up okay I gotta go thanks
185:55 - everybody I have to use the clips boy if
185:58 - I use the clips a lot I use the clips a
185:59 - lot IOL of eclipse weirdo I got to do a
186:02 - video tutorial about making a processing
186:03 - library with the clips someday goodbye