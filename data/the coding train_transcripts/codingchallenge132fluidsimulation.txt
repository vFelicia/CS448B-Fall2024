00:00 - (whistle whistles)
00:01 - - Hello and welcome to a Coding Challenge,
00:03 - a calm, soothing, although
somewhat turbulent,
00:07 - Coding Challenge, called Fluid Simulation.
00:11 - Now I have something to admit to you.
00:13 - I don't really understand
how any of this stuff works.
00:16 - I did make this at one
point, and so I'm hoping
00:19 - this Coding Challenge to
recreate exactly this,
00:22 - which will be a basis
on which hopefully a lot
00:25 - of other interesting
ideas will come about.
00:28 - This idea came into
mind when I recently saw
00:30 - Smarter Every Day's video on laminar flow.
00:33 - You know, I love laminar flow and all,
00:35 - but Team Turbulence for life, muah.
00:39 - Alright, so there's a
wonderful 3Blue1Brown,
00:41 - do I just reference the same other
00:42 - YouTube channels every single time?
00:44 - Yes, I do.
00:45 - But there's also an
excellent 3Blue1Brown video
00:47 - on turbulence, which I
would also recommend.
00:50 - So, let me give you some background here.
00:52 - So first of all, there
is a GitHub issue thread
00:55 - which started by deardanielxd, from 2016.
00:59 - Lattice Boltzmann methods
for fluid simulations.
01:02 - So this is one method.
01:04 - But what I want to
highlight here is that this,
01:07 - people have, oh, what I want to
01:08 - highlight here are these three links.
01:11 - So these seminal kind
of canonical standard,
01:15 - or the origins of doing fluid
dynamics in computer graphics
01:19 - in my research comes from
this article by Jos Stam.
01:23 - Real-Time Fluid Dynamics for Games.
01:25 - I believe this was a Siggraph paper, 2003.
01:29 - Somebody fact check me on that.
01:31 - And it's built on top
of this idea of these
01:34 - Navier-Stokes Equations,
which are partial differential
01:37 - equations that describe fluid dynamics
01:40 - and there was actually a $1
million challenge for proving
01:44 - that this can or cannot be
solved in three dimensions.
01:47 - None of this is anything
I'm capable of doing.
01:50 - But this paper includes
some of the formulas,
01:52 - includes a lot of the code, and
you can see one thing that's
01:55 - sort of key concept here is a
fluid simulation can be done
02:00 - by thinking about fluid as kind of
02:03 - particles that live in a grid.
02:06 - And obviously it might be
like an infinitely small grid
02:11 - (laughs) in real life, but
we can make that discrete.
02:16 - Think about the grid of pixels
and what the sort of density
02:20 - or the velocity of the fluid
is at every one of these spots
02:24 - on the grid, that's ultimately
what I'm going to do.
02:26 - And there's some nice C code
02:28 - and descriptions of some
of these algorithms.
02:30 - So, this article I believe
serves as the basis
02:34 - for Memo Atken's processing library,
02:37 - called MSAFluid, and is also
an open frameworks library,
02:40 - which is a C++ engine.
02:42 - And you can see here the way
02:44 - that this ends up looking
by sort of distorting
02:47 - this vector field, ah, this is awesome.
02:49 - Oh, I'm sure the YouTube compression
02:51 - is totally ruining this.
02:52 - But it's beautiful,
check out that library.
02:54 - You should also check
out Gabriel Weymouth's,
02:58 - I hope I pronounced that
correctly, LilyPad project,
03:02 - which was actually I believe used
03:03 - in the 3Blue1Brown video on turbulence.
03:06 - Gabriel writes here at
the end a bunch of things
03:09 - about Stan's approach, and
what LilyPad does and a paper.
03:14 - So this is a giant rabbit
hole you could go down.
03:17 - And I have spent some time poking around
03:20 - in this rabbit hole in the last week.
03:22 - The article that I found that
I kind of enjoyed the most
03:25 - in terms of style was
Mike Ash's article called
03:28 - Fluid Simulation for Dummies,
which is actually a port,
03:32 - not a port, but a version
of Jos Stam's paper,
03:36 - but actually turning it into
3-D and how to render that 3-D
03:41 - with paralyzing computing power
03:44 - is all here in his master's thesis.
03:48 - That's another rabbit
hole you could go down.
03:50 - So what I would like to
do is use this article,
03:54 - and I try to make sure that I don't
03:56 - repurpose somebody else's
content without permission,
03:58 - even if it's sort of on the
web in an open-source way.
04:01 - What I try to do, what I want to do,
04:04 - I asked Mike Ash for
permission on Twitter.
04:07 - I think it's @MikeAsh, but
I'll include a link in this
04:09 - video's description, if I could
go through this in a video.
04:12 - So what I'm going to do is I'm going to
04:13 - go through this in the video and mostly
04:16 - just kind of like copy-paste this code,
04:18 - which is written, I believe, C++ or C.
04:21 - Something like that, some
object-oriented C-flavor language.
04:25 - And I'm going to copy-paste
it into Processing,
04:28 - which is a Java-based
programming environment.
04:30 - And kind of like adjust the code to work
04:32 - in the way that I know and see if I can
04:34 - get the result and play with the result.
04:36 - So I don't feel obligated
to understand or explain
04:40 - all of the maths involved
throughout all this.
04:42 - And I would definitely
encourage you to read this,
04:45 - I would entirely stop and
read this whole article
04:46 - before you continue watching this.
04:49 - And then, this is going to be
in three parts at a minimum.
04:52 - So this first part, I hope
you just like get it working.
04:55 - Just want to copy-paste the
code, change the syntax around,
04:57 - get it rendering, and play with it.
04:59 - Number two is I want to
kind of refactor the code,
05:01 - this'll be in another video.
05:03 - I'm actually going to
refactor it in a more
05:05 - kind of modern approach, I
think modern's the wrong word,
05:08 - I mean this was done over 10 years ago.
05:11 - But I want to use like
object-oriented programming,
05:13 - vector, like the PVector
class in processing,
05:16 - I think there're some ways
that I can redo the code
05:19 - to make it a little bit more
readable than this particular
05:22 - style that uses a lot of
esoteric variable meaning.
05:26 - So that's number two,
and then number three,
05:30 - I want to then apply this logic to my,
05:35 - my flow field example from
the Nature of Code book.
05:40 - So if I could take the fluid simulation,
05:42 - turn it into a vector field,
05:44 - I can just toss particles
in that fly around.
05:46 - I think some visual
opportunities will come of that.
05:49 - So that's three part.
05:50 - Just get the thing working,
that's what I'm about to attempt
05:52 - to do right now, I'm sure
it will go wrong. (laughs)
05:55 - But I will try my best.
05:57 - Number two, refactor the
code to make it sort of fit
06:01 - with how I think about coding
and processing in P5GS today.
06:05 - And then also, try to do some
more stuff with it visually.
06:08 - And I would say one of the things
is, there's going to be some
06:11 - performance issues, I'm going
to keep things low-resolution.
06:14 - But you'll see a lot of the
implementations of this,
06:16 - use shaders or webGL,
all sorts of fancy tricks
06:20 - that I'm not going to get into,
06:22 - but if you know about
that stuff and can build
06:24 - on top of whatever I'm
doing, then fantastic.
06:27 - Alright, so I'm about
to get started coding,
06:29 - but before I do that, I've
written in advance a bunch
06:31 - of the concepts that are
involved in this implementation
06:34 - that I want to make sure that
I don't forget to mention.
06:36 - The first one that I
think is really important
06:38 - is this idea of an incompressible fluid.
06:40 - An incompressible fluid
is a fluid that density
06:43 - must remain constant
throughout, like water.
06:47 - So for example if you
have water in a balloon,
06:49 - and you squeeze that balloon,
the water's got to like
06:51 - come out, it's not
compressible, whereas air is
06:54 - actually compressible,
its density can change.
06:56 - So this, apparently,
from the little research
06:59 - that I've done, simplifies
a lot of the stuff.
07:01 - So this fluid simulation is going to work
07:05 - only for this idea of
an incompressible fluid.
07:09 - I should also mention that the goal here
07:11 - is not necessarily to with
scientific accuracy simulate
07:16 - true fluid mechanics, but
rather to create the illusion
07:21 - and feeling of that through
some remote connection
07:25 - to that actual scientific accuracy.
07:27 - And I'm sure whatever I do
will be less accurate than what
07:30 - people before, based on how
I know the way I make things.
07:33 - Alright, but that's an important thing.
07:36 - So the first thing that
we need to consider
07:39 - is that the fluid is going
to live inside of a box.
07:43 - And I think, the way the math is sort of
07:45 - tuned in these examples I believe is
07:47 - so that this box should
really be a square.
07:49 - And sometimes, I don't know why,
07:51 - like a power of two is maybe a nice thing.
07:52 - So maybe I'll start with 512 by 512
07:55 - or maybe 256 by 256 just
to make it low resolution.
07:58 - So you can think of this
as a grid of pixels.
08:02 - And there is going to be
08:05 - inside of this grid a velocity vector.
08:09 - A velocity vector that
points in a given direction.
08:13 - So if the velocity vector in
every spot in the grid is zero,
08:18 - it's like completely still water.
08:22 - If I put a velocity vector
moving to the right,
08:26 - it's like the water, that would be
08:28 - like Laminar Flow, by the way.
08:30 - Because the velocity,
everything is smooth and perfect
08:33 - and all moving in exactly
the same direction,
08:34 - as opposed to turbulence where
08:35 - everything's kind of going crazy.
08:37 - So that's one thing that's
going to exist in here.
08:41 - So that is something I should
say, there is this idea
08:43 - of the velocity field,
or the vector field.
08:47 - And that's going to have Xs and Ys.
08:50 - In Mike Ash's blog post,
it's actually all done in 3-D
08:54 - (laughs) with X, Ys, and Zs,
and I'm going to take out
08:57 - that third dimension while I'm doing it.
09:00 - But you should add it back in
and see what happens there.
09:04 - Now, the other thing is there's going
09:07 - to be this idea of dye.
09:09 - Oh, I wrote this over here already,
09:10 - 'cause I wanted to explain that.
09:13 - There's this idea of dye.
09:14 - And we're going to talk
about the density of the dye,
09:17 - which is, in other
words, this vector field,
09:19 - we wouldn't be able to
see anything moving,
09:23 - we wouldn't be able to
under see the flow through
09:26 - the fluid without like
putting something in it.
09:28 - So you could imagine
sprinkling a little dye in it
09:30 - and having it diffuse,
09:33 - maybe advect, diffuse, advect, project,
09:37 - all around the fluid.
09:38 - But what I want to make
clear is when we start
09:41 - talking about density
in this code example,
09:44 - and this Mike Ash makes very specific,
09:47 - makes a very specific point about.
09:49 - When we're talking about
the density of this dye,
09:51 - which is like an extra thing we're adding,
09:53 - just so we can visualize it.
09:55 - We're also able to visualize
it just as a vector field,
09:57 - which I will do at some point,
09:58 - but the dye is what's
going to give it more this
10:00 - like smoky-like quality
by visualizing the amount
10:03 - of dye as it moves throughout the fluid.
10:06 - So this is the basic idea.
10:07 - So the first thing I need to
do is get an array to store all
10:12 - of the Xs and Ys of the vector
field and the amount of dye,
10:18 - for every single one of these spots.
10:20 - And in the example, it's done
with three separate arrays,
10:24 - an array of Xs, an arrays of
Ys, an arrays of densities,
10:27 - and it kind of works like a
cellular automata simulation,
10:29 - where I need the previous
state and the next state,
10:32 - all the velocity of the
previous and the next velocity,
10:34 - all the density and the next density.
10:36 - So I'm actually going to need two.
10:37 - So this is why the code
gets really confusing,
10:40 - because I need x, Y,
and density, then I need
10:44 - what's named as x zero,
Y zero, and density zero.
10:50 - I forget, this might be called like S
10:52 - or something in the code, but I need
10:53 - the sort of previous of all of these.
10:54 - So there's a whole bunch of arrays.
10:57 - And this is what I want to
later refactor it and see
10:59 - if I can just use Pvector, an
object that stores a PVector
11:01 - and a density value in the
previous, all that stuff.
11:04 - Alright, let's go back to
11:07 - Mike Ash's page.
11:10 - And I'm going to start with this.
11:12 - This is what I was talking about.
11:13 - So this C++ structure, I'm going
to take it into processing.
11:17 - I'm going to add setup.
11:19 - I'm going to add draw.
11:21 - I'm going to say, size 250.
11:24 - Actually, you know what I'm going to do,
11:26 - I'm going to create a variable called N.
11:28 - This'll appear in the code,
11:30 - which is kind of like the
width and height of the square.
11:35 - So it'll be five, so N is going to be
11:36 - in this case, what'd I say, 256.
11:38 - And then actually in processing,
if you use a variable for,
11:42 - if you use a variable for the dimensions
11:46 - that you want to put in size,
you've actually got to put that
11:48 - in the settings function
so I can say this.
11:51 - So this should get me
like a 256 by 256 window.
11:55 - And then, so I'm going to save that.
11:58 - And I'm going to call
this like FluidSimAsh.
12:03 - And Stam, FluidSimAshStam. (laughs)
12:08 - And then I'm going to create a class.
12:11 - And I'm going to call
this, make a new tab,
12:13 - I'm going to say class fluid.
12:16 - And in that class, I want
to have all this stuff.
12:22 - All of these.
12:24 - Now the thing that's different
here in processing is
12:27 - this star, what is that star,
what does that star mean?
12:30 - And that's actually because it's some
12:31 - C-flavored language in
the code in Mike Stam's.
12:34 - That is a pointer, meaning
it's pointing to an area,
12:39 - a memory address on the computer where all
12:42 - of the density values will be stored.
12:45 - But what I really want this
to be is just an array.
12:47 - So I'm going to change
all these to an array.
12:50 - Which is the same thing, in Java,
12:52 - this is now a pointer to an array.
12:55 - You'll see in a second.
12:57 - And then, and by the way, I'm
going to take out all the Zs.
13:01 - I should mention, so, these variables,
13:04 - this isn't a diffusion amount,
like when she talks about,
13:07 - which is like a variable
to control how the velocity
13:11 - and sort of the vectors and the dye
13:13 - diffuses throughout the fluid.
13:15 - This is viscosity.
13:16 - Viscosity is like the
thickness of the fluid,
13:18 - so playing with that can
change the behavior as well.
13:21 - DT is the time step.
13:22 - In all of my physics
simulations, I've always done it,
13:24 - just have the time step of one.
13:26 - But I think you need a smaller time step
13:28 - to be able to get the simulation to behave
13:31 - somewhat accurately, so
that'll come up later.
13:34 - And now I have density,
13:36 - and I think this is previous density.
13:38 - Velocity X, velocity Y,
13:39 - previous velocity X, previous velocity Y.
13:42 - Alright, so, now this is creating it,
13:45 - so I basically want to do exactly this.
13:49 - So this would be in the
constructor of the fluid.
13:57 - And basically, N I already
declared somewhere else.
14:00 - So I don't think I need size.
14:03 - I'm going to say cube size, and
these should all be this dot.
14:06 - So this is referring
to the actual variables
14:11 - in the object itself.
14:16 - So, and I don't need the Z.
14:22 - And, I don't need Z.
14:24 - And, now, this is like calloc
is like a memory allocation,
14:28 - 'cause you're allocating a certain amount
14:31 - of memory for all these fluid values.
14:33 - But I just want an array
that is size N times N.
14:36 - So this is going to be this,
and it's N times N times N,
14:41 - because his is in three dimensions.
14:44 - So I know I could do
like a find and replace,
14:46 - but this is like so crazy
that I want to do this.
14:50 - This is like very meditative for me.
14:53 - Okay, and this receives
a DT, three arguments,
15:02 - when you create the fluid.
15:04 - You create it with a time step,
15:07 - a diffusion, and a viscosity.
15:09 - So in here, I'd be saying
something like, fluid,
15:14 - fluid, and in setup I
would now say, fluid equals
15:17 - a new fluid, maybe like a
time step of .1, and I'm just
15:21 - going to make a density and
viscosity of zero for right now.
15:26 - But those values would get
filled in, presumably, okay.
15:29 - (bell dings)
15:30 - We're gettin' there, we're
movin' through the article.
15:32 - Here we go.
15:33 - This is described, okay,
you need to be able
15:36 - to destroy the thing, free all the memory.
15:39 - Ahh, Java garbage collection.
15:41 - I don't have to worry about that,
15:42 - it will get cleaned up for me.
15:44 - Add density.
15:45 - Okay, this makes sense.
15:46 - Now remember, add density
is not talking about,
15:50 - is not referring to the fluid itself,
15:53 - it's referring to the dye
that's going into the fluid.
15:56 - So this is basically like an add dye.
15:58 - I sort of feel like I want to
rename that function to add dye.
16:02 - But I'm going to just call it add density.
16:05 - So, we're going to take this function,
16:08 - I think this could be a function of,
16:12 - that's part of the object.
16:15 - What does it need?
16:17 - We don't need a reference
to the object itself,
16:18 - we have that, we need a location
16:20 - and an amount, that makes sense.
16:21 - So we need a location and an amount.
16:26 - So that's like the amount of dye
16:28 - we're adding at this XY spot.
16:30 - Now, here's the thing.
16:31 - You're notice something,
everywhere in the code
16:34 - there's this like IX
function, index equals IX.
16:37 - Well, this is a two-dimensional,
this is two-dimensional.
16:41 - But you notice all the arrays
I made were one-dimensional.
16:44 - This is kind of a pretty
typical thing to do.
16:47 - But I need a way of going from X, comma Y,
16:50 - to the single index that's
a lookup into this grid.
16:54 - So, I could write a function,
you know, I think it's done
16:56 - with like a macro or
define or whatever in this.
16:59 - But I'm going to write a function,
17:01 - I'm going to name it,
I'm going to call it IX.
17:04 - And it gets an X and a Y,
and it would just return,
17:11 - return X plus Y times N.
17:15 - So this is, oh, it needs
to return an integer.
17:18 - It's non-void.
17:19 - So this basically says for any given XY,
17:22 - give me the one-dimensional index.
17:24 - And this formula's the same
thing that I use in all
17:26 - my image processing and
pixel processing, it's a way
17:29 - to get a 2-D location in a
one-dimensional array, okay.
17:32 - So now, I would be saying that
we can go back to this code,
17:35 - basically, and we can do this, but no Z,
17:41 - and then we're basically
going to say, hey,
17:45 - this dot, what is it called?
17:47 - VX.
17:48 - Oh wait, no, that's velocity, sorry.
17:50 - This dot, density,
17:53 - add index,
17:56 - add some amount.
17:58 - This is really simple.
17:59 - This is like a really simple
function, just add some density
18:02 - to this spot, this amount
of density to this spot.
18:05 - Then we can also do this add velocity,
18:08 - which is basically the same thing.
18:10 - But just with an amount X and an amount Y,
18:14 - so I think we could
probably just copy this.
18:19 - And we could say, add velocity
18:22 - at XY with an amount X and an amount Y.
18:26 - See, I would prefer to use like
PVectors for all this stuff.
18:29 - And then we get the index.
18:31 - And we say, VX, VX plus amount X,
18:37 - and VY,
18:40 - by the way, this is going to get (laughs)
18:43 - portings on this code is going
to get a lot worse soon enough.
18:47 - (laughs) Okay, now, alright.
18:50 - Ah, look at this, so here,
now we can take a moment,
18:54 - here are the three main operations.
18:58 - Diffuse, project, advect.
18:59 - Let's do them one at a time.
19:01 - So we can read this, I mean it's useful
19:03 - to read Mike Ash's description,
put a drop of soy sauce,
19:06 - soy sauce gives a way
of thinking about dye.
19:08 - And you'll notice that doesn't
19:09 - stay still, but it spreads out.
19:10 - So this happens, even if
the water and the sauce
19:12 - are perfectly still,
it's called diffusion.
19:16 - And so, the dye obviously
diffuses, that makes sense,
19:19 - but the velocity also
diffuses, if some of it moves,
19:22 - it's causing everything
around it to move as well.
19:24 - So that's a function, this is really going
19:26 - to be the function that does the solving
19:28 - of the Navier Stokes equation.
19:30 - Let's do diffuse.
19:32 - So I'm going to put, and this
is not going to be an object
19:36 - inside the class, and I'll
explain why in a second.
19:39 - So the first thing that I'm going to do
19:41 - is I'm just going to try to port this.
19:43 - So any time there is the pointer,
19:45 - I want this to be an array.
19:47 - Dif is a diffusion amount,
DT, the number of iterations,
19:52 - and I don't think I need N as an argument,
19:54 - 'cause I'm just using
that as a global variable.
19:56 - I also kind of personally would like
19:58 - to just keep iterations
as a global variable.
20:01 - I think that'll make things
a little bit simpler.
20:03 - Where did I put that?
20:04 - I'm actually going to put
these in the fluid tab,
20:07 - 'cause that's mostly where I'm working.
20:09 - Final int iterations, like
we can just put that as one,
20:12 - but let's leave that as like 10 right now.
20:16 - So the idea here is that this function
20:20 - knows how to diffuse any
arbitrary array of numbers, X,
20:26 - based on its previous values, X zero,
20:29 - based on a diffusion
amount and a time step.
20:33 - But you'll notice that what it does is it
20:35 - immediately calls another
function called linear solve.
20:38 - So, a linear equation is
like something like this.
20:45 - I don't know, two X plus
Y minus three Z equals 10.
20:50 - Right, this is a linear equation.
20:52 - We got to have multiple linear equations.
20:55 - And algorithms for solving
the sort of set of solutions
20:58 - to this equations, what are
all the X and Ys and Zs that
21:01 - make this true, is known as
a process of linear solution.
21:06 - There're different techniques,
I was reading the comments,
21:09 - in Mike Ash's paper, there's like this
21:11 - Gauss Seidel technique, some
people did his code using this,
21:14 - I forget which technique his
code is particularly using.
21:18 - But it's a way of basically
solving those linear equations,
21:24 - for fluid dynamics,
21:27 - within the space of this grid.
21:30 - So, that's kind of all
I want to say about it.
21:33 - But it's needed for every single,
21:36 - for this diffusion algorithm.
21:39 - And it's really just a
thing that like passes
21:41 - all the values all around
over and over and over again
21:43 - with lots of iterations,
sort of spread out.
21:46 - Like a cellular automata,
21:49 - to have the velocities
or densities of neighbors
21:52 - affect the other neighbors
and so on and so forth.
21:54 - So, I'm now going to go and just grab
21:57 - the linear solve code from
here, I'm going to grab this,
22:01 - and you can sort of see what it's doing.
22:03 - So I'm going to grab this function,
I'm going to bring it in here,
22:06 - by the way, this is kind of how I work.
22:08 - Like I kind of want to
understand this more.
22:10 - But I feel like I need
to just port the code
22:12 - and play around with it,
and then maybe I could do
22:14 - some more research about what
the equations actually are
22:17 - and how it's working, but
sometimes this kind of like
22:19 - messing with the code get
in your hands and the code
22:22 - could sometimes help you
understand the math later.
22:23 - So I'm going to look at this,
I'm going to take out static,
22:26 - I'm going to move this bracket over here.
22:28 - I don't need iterations in N.
22:30 - Those are going to be
the same for everything.
22:32 - These should be arrays.
22:35 - And the kind of goofy thing
here is, I don't need N.
22:40 - So I need I and J for X and
Y, but I can take out M.
22:44 - And so that loses the bracket there.
22:48 - And then I have to look
at what's going on here.
22:50 - And so I don't need M.
22:52 - And then I also don't need
to add these two components.
22:56 - So let's see.
22:57 - So the idea here is that I'm looking at,
23:00 - and this, I've done this before,
23:02 - I'm having like a crazy deja vu.
23:04 - What this is now doing is saying,
23:06 - the new value of a
particular cell is based
23:10 - on a function of itself
and all of its neighbors.
23:18 - And you can see that here.
23:20 - It is equal to its old value
23:24 - plus some combination
of its current values.
23:27 - Alright, so now we're
going back to the paper.
23:30 - And we're going to look
at the next function.
23:34 - Project.
23:35 - Okay, so this project function is really
23:37 - tied to the idea of this
incompressible fluid.
23:39 - The amount of fluid in each
box has to stay constant.
23:42 - So the amount of fluid going in has to be
23:43 - exactly equal to the
amount of fluid going out.
23:46 - So this is kind of like a cleanup stage
23:48 - to put the set thing
back into equilibrium.
23:52 - So we're going to be doing this
23:53 - for all the different velocity arrays.
23:56 - So let's grab this, oh,
look at this craziness.
23:59 - So let's grab the project function.
24:02 - Paste and project.
24:04 - These are arrays.
24:06 - I don't need the Z.
24:10 - These are also arrays.
24:13 - And I don't need the iterations,
and N, those are constants.
24:17 - And then now, I also don't need K.
24:20 - Only need I and J, 'cause I'm
just doing two dimensions.
24:24 - I don't need K.
24:27 - I don't need these two.
24:30 - And then, I don't have set
boundaries yet, I'll add that.
24:35 - Linear solve is the same
thing but without this.
24:39 - And I think, when I do set bounds,
24:41 - I'll probably take out the N.
24:43 - Then I don't need K.
24:46 - Don't need K, don't need K.
24:51 - I don't need K, I don't need Z.
24:54 - And I don't need K.
24:56 - I don't need K, I guess
probably porting Jos Stam's
24:59 - which was 2-D, might have
made more sense. (laughs)
25:03 - And I plus one J, I minus one J.
25:07 - J plus one, J minus one.
25:08 - Yes, yes, this all makes sense.
25:11 - And then I don't need the Z here.
25:14 - I think I lost a curly
bracket, which would go here.
25:18 - And definitely screwed up something
25:22 - curly bracket-wise.
25:24 - I think I have an extra
curly bracket here.
25:26 - This looks right.
25:28 - Oh, I don't need the,
25:32 - I don't need the Ks up here.
25:34 - Missing left curly bracket.
25:36 - And I have an extra curly bracket here.
25:38 - Alright, we're good.
25:40 - We don't know what set bounds
is, but that's okay, alright.
25:43 - Woo.
25:44 - We now, don't worry, we're getting close.
25:47 - So, now.
25:49 - Advection.
25:51 - The advect step is responsible
25:53 - for actually moving things around.
25:55 - To that end, it looks
at each cell in turn.
25:58 - In that cell it grabs the velocity,
25:59 - follows that velocity back in time, whoa.
26:02 - So let's grab this advect function,
26:06 - and I could kind of scroll back up.
26:08 - Let's look at what was, yeah.
26:12 - So this is also important,
every cell has a set
26:14 - of velocities and these
velocities make things move.
26:17 - This is called advection.
26:18 - As with diffusion, advection applies
26:21 - both to the dye and to
the velocity itself.
26:23 - So what's really the difference
26:24 - between diffusion and advection?
26:27 - Well diffusion is just
this idea of spreading out.
26:30 - But advection is actually
26:32 - the motion associated with the velocities.
26:35 - They're obviously related and they both
26:37 - happen together, but
those are separate things.
26:40 - So let's go grab the advection code.
26:44 - Oh, what? (laughs)
26:48 - Seriously?
26:49 - Okay, wow, so this I really
going to want to unpack
26:52 - when I refactor this to
understand what's going on.
26:54 - But I'm just going to grab it right now.
26:56 - This is crazy.
26:58 - But bring it in here, oh boy, ooh.
27:01 - Okay, right, everybody,
27:03 - deep breath.
27:04 - Deep breath.
27:05 - This is an array, this
is the current density.
27:09 - This is the previous density,
this is the current velocity.
27:13 - Oh.
27:14 - This is the current velocity.
27:17 - I don't need Z.
27:18 - Come on, scroll over.
27:21 - So, what, are you kidding me?
27:24 - So these are indexed in
previous index values.
27:27 - Don't need the Z.
27:29 - We need a DT for X and a DT for Y,
27:32 - we don't need the Z.
27:34 - This has to do with like,
27:36 - I think the Ss are density in this.
27:38 - I'm not really sure.
27:40 - We'll look through the code,
but I'm going to take out the U.
27:42 - I don't need the three,
and I don't need the Z.
27:46 - Oh my god, I don't need the K.
27:48 - I don't need the K.
27:50 - Alright, so I don't need
the K, part of the loop.
27:53 - And I don't need this last thing.
27:55 - And I don't need this Z.
27:58 - And I need the X and the
Is, the Ys and the Js,
28:02 - and I don't need the Zs and the Ks.
28:06 - And I need the Ss and the Ts.
28:09 - Don't need the Us, really,
and I don't need the Ks.
28:13 - And now I don't need the K,
28:16 - and so what did I get rid of up here?
28:18 - I'm using, this is what I mean.
28:19 - Like I really want to refactor
this and try to understand
28:22 - what each of these variables
are doing and rename them.
28:24 - (laughs) This isn't refactoring,
28:26 - this is just getting into work.
28:27 - So I've got Is and Js, Xs
and Ys, Is and Js, Ss and Ts.
28:32 - And no Ks.
28:35 - Oh, wait a second.
28:38 - STU.
28:39 - U was the thing, if I go back to Mike Ash,
28:42 - U was the third dimension
for the S and the Ts.
28:47 - Okay.
28:48 - So what I'm actually getting rid of
28:51 - is this multiplication step.
28:53 - So.
28:56 - One last multiplication step.
28:58 - Think I don't need this at all.
29:02 - This is what I'm doing, yeah.
29:05 - This is much simpler.
29:07 - Oh, you silly third dimension.
29:09 - Pretty sure this is right. (laughs)
29:13 - What's the chances there,
29:14 - going to definitely have
to double check this.
29:20 - Double check this.
29:24 - And then I, one last thing here.
29:29 - Do I have the right, okay, floor F
29:34 - is just floor,
29:36 - right, because those are integers.
29:39 - There seems to be some extra flooring
29:40 - that's unnecessary here.
29:43 - 'Cause these are floats, but I'm not sure.
29:45 - I'm going to leave it as is.
29:48 - Right, these would then
have to be converted.
29:51 - I think there's some extra
unnecessary steps here
29:53 - in how the numbers are being manipulated.
29:56 - But I'm going to just leave
everything in, and I will,
29:59 - part two, we're going to get this to work.
30:01 - Just fast forward like five
or 10 minutes towards the end.
30:05 - Okay.
30:07 - Alright.
30:08 - I'm pretty sure this is
now the advect function.
30:11 - I think I actually have
everything, but this set boundary.
30:16 - So this set boundary is
actually something like,
30:19 - really nice, and compared to all that,
30:21 - much more manageable to understand.
30:23 - But basically, we've got this kind of
30:25 - unrealistic situation here,
well it's not unrealistic,
30:28 - but we're containing
the fluid within a box.
30:31 - And so we need some sort
of mechanism for when,
30:34 - what we do with the edge
cells, and how we deal
30:37 - with those velocity
vectors or things moving.
30:40 - And basically, we want to add
some kind of like bouncing.
30:43 - And then we also need to
deal with the corner cells
30:45 - even differently, in a
different way, so we can read,
30:49 - this is short for set
bounds, and it's a way
30:52 - to keep your fluid from
leaking out of your box.
30:54 - Not that it could really
leak, writes Mike Ash,
30:57 - it's just a simulation in memory,
30:59 - but if there's no walls, obviously fluid's
31:02 - not going to leak out
of your computer screen.
31:04 - That was a joke there, and I just like,
31:06 - my body hurt so much, I
couldn't even laugh, ha ha.
31:09 - But the velocity, it needs to come nearer
31:13 - when it hits the wall.
31:15 - So if we look at what, and the reason
31:18 - why this is done in this
like really weird way
31:20 - is the set bounds function
is written in a way
31:24 - that this B variable tells you like which,
31:27 - which wall am I at?
31:30 - Am I at the right wall, the left wall,
31:32 - the top wall, the bottom wall?
31:33 - And I think that I could
rewrite this with vectors
31:36 - in a way that it just kind of like knows.
31:39 - And I don't need this extra variable B
31:41 - that's passed through.
31:42 - But once again, I am going to,
31:46 - I am going to port it,
so exactly as written.
31:50 - X is any one of these
arrays, we need to set,
31:53 - we need to do the same
things for all of the arrays
31:56 - where there's velocity X, velocity Y,
31:57 - or density, density of the dye.
31:59 - And once again, I can actually eliminate,
32:04 - this is for the third dimension,
32:06 - so I can completely take this out.
32:08 - Then I'm going to take out K.
32:10 - And you can see like
this, if B equals two,
32:13 - you're dealing with the X stuff.
32:19 - I mean it's actually to
the Y, 'cause you can see
32:22 - it's looking at the top row
and the bottom row, sorry.
32:25 - So, this is good.
32:29 - And then this
32:34 - is if B is one, think I
might've messed this up.
32:38 - (otherworldly music)
32:41 - (bell dings)
32:42 - Alright, strange edit point,
but I'm jumping in here
32:44 - from the future in the
middle of this video
32:46 - to explain something about
this set bound function that I
32:49 - kind of botched while I was
actually doing the challenge
32:51 - and I'm at the end now,
but I'm going to fix it.
32:52 - One thing that's really
important is for me to point out,
32:55 - what is written in the
article by Mike Ash?
32:58 - Every velocity in the layer next
33:00 - to the outer layer is nearer.
33:02 - So when you have some velocity
going towards the wall
33:05 - in the spot next to the wall,
33:07 - the wall gets the velocity
that perfectly counters it.
33:11 - That's keeping it a closed box.
33:13 - So that is the explanation
for why, here, I'm saying,
33:18 - hey, if I'm at I comma
zero, any given X all along
33:22 - the top row, if Y is zero,
all the Xs along the top
33:28 - counteract the velocity from one row down.
33:33 - But only if I've sent in this
B equals two, which is that
33:36 - weird thing, and this is
what I think would be easier
33:38 - with Pvector, 'cause I
could do this all at once.
33:41 - But, the thing that I have
in here, I have this like
33:43 - leftover X room, 'cause in
3-D there's more papers.
33:46 - So I actually could take this out,
33:48 - and this is going to make
this now look correct.
33:51 - So this set boundary function
is actually much simpler.
33:54 - It is just reversing the
velocities in the last,
33:58 - in all the edge layers
according to, edge columns.
34:02 - Edge columns are rows.
34:04 - According to the next two,
the edge column or row.
34:07 - And then for the corners,
34:09 - it actually just does an
average of the two neighbors.
34:11 - And that keeps it this like walled box.
34:15 - So, that's not, in the end, like
it's kind of going to perform
34:17 - the same way, I just had this
like extra loops in there.
34:19 - But this is like an
important clarification.
34:22 - So now, continue with the
challenge wherever I left off.
34:24 - But this will be the code that's
34:25 - actually there when
you look at this later.
34:27 - If you can make it to
the end of this video.
34:29 - See you soon.
34:31 - (otherworldly music)
34:33 - We have set bounds now.
34:36 - Alright.
34:37 - Oh, alright, fine.
34:39 - I don't think I need to pass in N.
34:41 - N is just a constant everywhere.
34:44 - So let's simplify that,
so let's go through this.
34:47 - Fluid is fine.
34:49 - I had velocity diffusion.
34:51 - Linear solve, this has to come back.
34:54 - Without the N.
34:55 - Project.
34:57 - Linear solve, boundaries, no N.
35:00 - No N.
35:01 - (bell dings)
35:02 - So, a couple things.
35:04 - People in the chat are mentioning,
35:05 - I have no idea what's going on.
35:07 - I kind of don't either,
maybe this isn't a video
35:10 - that's worth watching, I'm not
sure, I mean at this point,
35:13 - this is just showing that
I'm invested in trying to do.
35:15 - And I will come back to it.
35:17 - But this I think is an
example of why I'm refactoring
35:20 - and sort of thinking about
code and variable meaning.
35:24 - It's a good thing, and there's
nothing wrong with what was
35:26 - done before, this is probably
perfectly appropriate
35:29 - and quite common styles
from like over 10 years ago.
35:33 - But I think we could hopefully do better
35:34 - and I could come back and refactor this.
35:36 - But I realize that I totally go this wrong
35:38 - and I have some code that
I did the other day here.
35:41 - There we go.
(bell dings)
35:42 - This is what I've been trying to do.
35:44 - I want to add those two
things together times S zero,
35:47 - and those two things
together times S one, okay.
35:50 - Alright, no errors.
35:52 - Woo, woo, no errors, no errors.
35:55 - This is, by the way, what I
really like to avoid doing.
35:58 - I don't like to code for
ever and ever and ever
36:00 - without testing, so if
this like actually works
36:03 - when I start to render it, I will be
36:05 - completely and totally
god smacked. (laughs)
36:11 - Okay.
36:12 - So now, I need a time step function.
36:15 - So I need a function, time step,
36:19 - to step through every moment
of time with the fluid.
36:24 - Going back to Mike Ash's paper,
36:27 - there is a step function,
which I'm going to grab.
36:32 - Course I just wrote it out here.
36:33 - But what I want is void step.
36:40 - And I have all these as
variables, but let's,
36:44 - let's change that to this dot.
36:47 - Replace float space star.
36:50 - I know you can't see this.
36:52 - Replace float space star
36:54 - with float bracket star,
no, float bracket space.
36:58 - I don't need, and I don't need the N,
37:01 - or the number of iterations.
37:05 - I don't need the Z.
37:08 - So, iterations is four.
37:12 - Okay, so let's look at that.
37:14 - The process here is what?
37:18 - Diffuse the velocities.
37:21 - Right, diffuse the velocities.
37:23 - Based on the time step and viscosity.
37:26 - The Xs and the Ys, the one and the two
37:28 - is controlling the set bounds function.
37:30 - Then project, which is clean everything up
37:32 - to make sure it's the same
amount of fluid everywhere.
37:35 - The velocities.
37:36 - Then run advection, advect
on the velocities, X and Y.
37:40 - Then, clean all that up.
37:42 - Then, diffuse the density
and advect the density.
37:46 - The density doesn't need the project step,
37:48 - because the density doesn't
remain consistent around it,
37:51 - it's the dye that actually
37:52 - is moving around and is inconsistent.
37:54 - So we should really be in, we really got
37:57 - this whole thing programmed now.
37:59 - We should've just started with,
38:01 - definitely should've started
with memos library. (laughs)
38:03 - So if I say background zero,
38:05 - and I say fluid step,
38:11 - let's run this.
38:13 - Hey, no errors.
38:15 - Oh, happy day, I mean, give me a,
38:18 - I'm going to be shocked if
I can actually render this.
38:20 - But let's actually render this.
38:21 - So first, let's do a thing where,
38:29 - where as I drag the mouse,
I'm going to add dye.
38:32 - So I'm going to add dye
in mouseX and mouseY,
38:37 - some amount of dye.
38:39 - Okay?
38:40 - Oh, and I need to say fluid.addDensity.
38:46 - Alright, no errors, that's good.
38:48 - That function's called.
38:49 - Now let's try to render.
38:51 - Let's call renderD for
rendering the density.
38:54 - So how am I going to do that?
38:59 - You know what I should actually really do?
39:02 - I'm going to change this to 64.
39:05 - And then I'm going to create a variable
39:06 - called scale, and make that four.
39:10 - And then,
39:14 - and then I'm going to say
size is N times scale.
39:19 - N times scale, so I'm
actually going to like,
39:22 - lower it, and let's actually,
let's make the scale 10.
39:26 - So now we should have,
and if I comment this off,
39:29 - I should have 640 by 640 window, okay.
39:33 - So now fluid renderD.
39:37 - I'm going to go here, I'm going to add
39:39 - a function in the fluid class.
39:42 - I kind of want to take
all these functions out
39:44 - and put them in a separate tab.
39:47 - I'm going to call this more fluid.
39:52 - So just like the fluid class this year,
39:55 - which has less stuff in it,
39:56 - then I'm going to say, renderD.
40:00 - So this should be pretty easy
40:02 - in that I'm just going
to say int I equals zero.
40:06 - I is less than N.
40:09 - I plus plus.
40:11 - So I'm going to loop through.
40:14 - J, then I'm going to use J.
40:19 - Then X is going to be I times scale.
40:26 - Y is J times scale.
40:29 - I'm going to draw a rectangle at XY
40:32 - scale, which is really
a square, scale scale.
40:36 - By the way.
40:37 - Did you know that Processing
40:39 - now has the function square in it?
40:40 - I'm going to draw a
square, get rid of that.
40:43 - Oh, that's going to work,
I've never used this before.
40:45 - This is a momentous occasion
four hours into this video.
40:49 - Then I'm going to say, fill,
40:53 - 255, 100.
40:55 - I just want to see, like just
going to put arbitrary fill.
41:03 - Great, so I can see all of
those squares are there.
41:07 - I'm going to say no stroke.
41:10 - And then now what I want
to do is the density
41:14 - is this.density at the index I and J,
41:21 - and I want to, I'm going
to make that the alpha.
41:26 - So D is D.
41:28 - So the alpha of that square,
41:30 - I mean it could just be the brightness,
41:32 - but let's just make it
the brightness, directly.
41:35 - So it's black, oh, right
out of bounds exception.
41:39 - Okay, interesting.
41:41 - Ah, I forgot.
41:43 - So if I am adding fluid
at mouseX and mouseY,
41:50 - I have to divide that now by scale.
41:52 - 'Cause I scaled up the screen.
41:53 - So that has to be divided by scale.
41:56 - There we go, okay.
41:57 - So you can see I'm adding the fluid.
41:59 - Great.
42:00 - Alright, so that's something.
42:02 - Now there's, I guess the
water is completely still.
42:05 - Didn't I say it would
diffuse anyway? (laughs)
42:09 - Let's try adding some, let's
try also adding some velocity.
42:16 - So I need to just also add,
you know what I'm going to do?
42:20 - I have an idea.
42:21 - When I do that, I'm also
going to add velocity.
42:26 - At that spot, and add
velocity expects what?
42:30 - Expects the X and Y and
the amount X and Y, okay.
42:34 - So the X and Y, and now,
I'm going to do this.
42:37 - Let amountX equal mouseX minus pmouseX.
42:42 - PmouseX is the previous mouse possession.
42:45 - So the velocity is going to kind of be
42:46 - in the direction that I'm dragging.
42:49 - Not let, float.
42:51 - Java, not Javascript.
42:53 - And an amount Y is mouseY.
42:56 - PmouseX.
42:58 - So let's add that amount.
43:02 - Oh, Y, let's see what happens here.
43:06 - Ooh, okay, I don't mind that so much.
43:09 - We got an array out of bounds exception.
43:12 - So what went out of bounds?
43:15 - One thing I can do here, (laughs)
43:18 - where's my index function?
43:22 - X equals constrain X two zero N minus one.
43:27 - Let's just put a constrain in here.
43:29 - I don't know whether I have a bug
43:30 - in my code or this is actually necessary.
43:34 - But let's do that.
43:36 - Oh, there we go.
43:39 - Oh my god.
43:40 - Ah.
43:45 - (bell dings)
43:47 - (whistle whistles)
43:51 - (dramatic music)
43:58 - I think what I want to do is
add something that always like,
44:02 - yeah, 'cause look at this, I'm
going to always like fade out,
44:04 - I'm going to add something to like fade.
44:07 - I'm going to add a function called fadeD.
44:11 - I should really render the
velocity, where I'm going to say,
44:18 - four and I equals zero,
44:23 - I is less than this.density.
44:29 - Length.
44:31 - I plus plus.
44:34 - Density index I minus equal one.
44:40 - And then density index I equals constrain.
44:46 - Density index I, actually
no, I can just do this.
44:51 - Equals constrain, here.
44:54 - FloatD equals density index I.
44:58 - And then constrain,
44:59 - I want to set it equal to D minus one,
45:02 - but stay within zero and 255.
45:05 - And then let me add fluid render fadeD.
45:11 - I also want to render the velocity field.
45:16 - So just because if I add a lot,
45:17 - I mean that's too much fade.
45:18 - I just want it to like lose,
45:20 - I just want it to like,
the dye to like peter out.
45:23 - Right now I think the dye
is kind of like infinite.
45:26 - It's additive.
45:28 - So but this obviously maybe I just
45:29 - want it to peter out more slowly.
45:34 - Alright, this is a nice
little swirl effect.
45:37 - Now, here's what I want to do.
45:39 - I would like to, I mean
the other thing I could do
45:43 - is make this 128 and
change the scale to five.
45:46 - Can it, yeah.
45:48 - So that's nicer, it can still perform,
45:50 - the frame rate is still fine.
45:51 - So what I want to do is
I actually want to now,
45:55 - I'm going to just use
Perlin noise really quickly.
45:57 - I'm just going to add
density to the middle.
46:06 - This is what I should be doing.
46:09 - So what happens if I add,
46:11 - just continuously add density all the time
46:14 - in Draw, and this has to be
converted into an integer.
46:19 - This is kind of silly what
I'm doing, but it's fine.
46:24 - Alright, so now, the dye
is just sitting there
46:27 - in the middle that I
can kind of drag around.
46:29 - But what I want to do now is,
46:32 - I'm going to take this, and
I'm going to use Perlin noise.
46:38 - I'm going to say, noise of some time,
46:47 - map noise of some time, which
goes between zero and one
46:50 - to between negative one and one.
46:53 - And amount Y
46:58 - is the same, but I'm going to
look at like a different part
47:01 - of the noise base, if you're
not familiar with Perlin noise,
47:04 - I would encourage you to check
out my Perlin noise videos.
47:06 - And then, I'm going to say this also
47:09 - is going to be the same at this spot here.
47:13 - So I'm going to say int
center X equals this.
47:20 - Int centerY equals that.
47:25 - Then add some density
at center X, center Y.
47:29 - You could actually make this like
47:31 - a random amount of density maybe.
47:35 - And then add the velocity
according to Perlin noise.
47:42 - I am going to create a variable called T,
47:44 - which is kind of like the
offset through the noise space.
47:47 - And I'm going to have T,
oh, I should be using,
47:51 - ah, I changed my mind, I'm
going to use a Pvector.
47:58 - And I'm going to say,
angle equals noise of T
48:04 - times two pi.
48:08 - And then I'm going to say a PVector
48:14 - is PVector from angle.
48:17 - Create a vector
48:19 - from angle,
48:21 - that angle.
48:23 - And then, then the time will go up.
48:27 - And this is V.X, V.Y.
48:30 - And let's try, I don't
know what it should be,
48:33 - but let's try like making the vector
48:35 - a little bit stronger right now.
48:38 - So let's see here.
48:39 - There we go, yeah, this is
what I was trying to do.
48:43 - Maybe it is
48:47 - too strong.
48:53 - Yeah, this is kind of the idea.
48:55 - I'm not seeing, I just
wanted it to kind of like
48:58 - shoot it out randomly.
49:00 - Let's take out the fade, let me try,
49:06 - someone's telling me I swapped
VX and VY at line 96 and 97.
49:11 - Oh, okay, thank you.
49:13 - So that's an important fix. (laughs)
49:16 - I mean visually we were
getting some results anyway.
49:20 - Let me go back to making it,
49:27 - let me do this.
49:30 - Let me add, alright,
one thing I could try,
49:34 - and I think you get the idea,
49:36 - but one thing that I
could try is I could try
49:38 - kind of adding some density
in a little grid pattern.
49:45 - This might be sort of nice to do,
49:48 - and then I could say, plus I.
49:52 - So this is just adding a lot more density.
49:55 - And let me turn that back to zero.
50:02 - And,
50:07 - yeah, that's kind of, this
is more like what I wanted.
50:09 - There we go, okay.
50:11 - That was too, the velocity was too strong.
50:14 - Okay.
50:15 - So here we go, this is more
what I was looking to try to do.
50:18 - I've got sort of Perlin
noise controlling this angle.
50:21 - I'm just like dropping in dye constantly.
50:23 - It'd be sort of interesting to
like sprinkle dye everywhere.
50:26 - There's so much you can do with color,
50:27 - to drop particles in, so
let's recap what I've done.
50:31 - I wanted to have some type
50:33 - of visualization of turbulent fluid.
50:37 - I think I mostly have it.
50:40 - And I have ported all the
code from Mike Ash's page.
50:44 - I'm actually going to
release this code as is.
50:48 - This was like super long.
50:50 - I would really like to come back.
50:52 - And I would like to come
back and try, when this,
50:56 - try refactoring this and try
50:58 - to understand the pieces of it a bit more.
51:02 - I would like to, and then
also I would like to create
51:06 - a particle simulation on top
of this where I can drop in
51:10 - particles that sort of fly
around based on the vector field.
51:14 - That is more like the
reference on the GitHub thread.
51:22 - So I'm kind of imagining
something like this,
51:24 - where I'm actually just going
to draw particles moving around
51:26 - according to the vector field
and see what that looks like.
51:30 - Then ultimately I think what I want to do
51:32 - is try maybe moving to use
one of these libraries,
51:35 - which has more, a sophisticated solver,
51:41 - I think this project by Gabriel Weymouth
51:43 - I would like to take a look at.
51:45 - So I'll probably do some followup videos.
51:47 - I don't know if this was
helpful or interesting.
51:49 - It's useful for me to try to do it.
51:51 - Took over an hour.
51:53 - But this is the process,
I think, but if anything,
51:55 - this was useful to sort of see the process
51:57 - of trying to figure out
somebody else's code written
51:59 - in another language and port it.
52:01 - We could try porting this in JavaScript
52:03 - and see if it performs even with just like
52:04 - raw 2-D canvas, I'd be
curious to see that.
52:07 - So go ahead and do that.
52:08 - Thank you to some comments
from many people in the chat,
52:12 - but specifically Kaye
Wiegmann, who pointed out
52:14 - that I do not have turbulence
if the viscosity is zero.
52:18 - So I now adjusted some things.
52:20 - So I created a viscosity of,
let me just zoom into this.
52:24 - I created a viscosity,
a pretty low viscosity,
52:27 - but it's a nonzero viscosity.
52:29 - I also sort of changed the
way I'm adding the density,
52:32 - and removed that fade,
and you can see, this has,
52:35 - you'll notice, this has more
of the quality of turbulence.
52:39 - And yes, I challenge you
now, take this code and add,
52:43 - it's filling up now, add rainbow colors.
52:47 - So, what do you keep a
separate RGB channel?
52:50 - So the things that I did, just you see,
52:51 - is like, that I'm going to
publish to go with this,
52:53 - is I actually have a pretty low viscosity.
52:56 - Ooh, why did the time step get so big?
53:01 - The other thing that I
also did is I adjusted
53:03 - the range of the angle
to wrap around twice.
53:06 - So two pi times two, because Perlin noise
53:09 - is going to tend to give
me values around .5,
53:11 - so it was really sticking around pi.
53:13 - So this now is my final version,
53:17 - let me fix up some stuff here.
53:21 - If you're at the end of this
video, hashtag TeamTurbulence.
53:25 - Okay?
53:25 - Hashtag TeamTurbulence on Twitter.
53:27 - Let's blow it up, of
course, no one's going to
53:29 - have made it to the end of this video.
53:32 - But let's do this, color mode, HSB one.
53:37 - So, oh, my range is between zero and 255.
53:40 - So let's do a fill.
53:43 - D 255, 255, 100, I think this
is not what I want to do.
53:51 - Yeah, there we go, except,
53:54 - there we go. (laughs)
53:56 - Hue, saturation, brightness,
that's pretty interesting.
53:59 - Team Turbulence all the way.
54:04 - This is my turbulence song.
54:06 - (driving electronic music)
54:16 - Team Turbulence!
54:19 - Ch ch ch ch ch.
54:21 - (driving electronic music)