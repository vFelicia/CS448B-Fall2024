00:01 - - Hello, welcome to Part two of the
00:03 - Polar Perlin Noise Loops.
00:06 - I wrote polar noise loops on purpose
00:09 - as like a wordplay thing.
00:10 - But people kept saying,
00:11 - "No, no, no, it's Perlin
noise, Perlin noise."
00:12 - Yes, yes polar Perlin noise loops.
00:14 - The whole point of this is,
00:15 - I'm doing a follow up of my
previous coding challenge
00:18 - where I made this blobby shape
00:21 - which is created with a
Perlin noise algorithm
00:24 - and the end of the shape matches up
00:27 - to the beginning of the shape,
00:28 - by walking through a two-dimensional
00:30 - Perlin noise space in a circle.
00:34 - If you're wondering what I'm talking about
00:37 - go and watch the previous video.
00:39 - But also I forgot in the previous video,
00:41 - I neglected to show this particular sketch
00:44 - created in P5JS by Golon Levin
00:47 - which demonstrates this idea.
00:49 - So the idea is I want to use
Perlin noise values over time,
00:53 - but I want the last value to
match up with the first value.
00:56 - And so if I pull those
values from a circular path,
00:59 - and in truth, it doesn't
have to be circular
01:01 - as long as I end up where I started,
01:03 - then I'm going to have this
perfect, loop in Perlin noise.
01:06 - So why not take that
perfect looping Perlin noise
01:10 - and apply it to my GIF
loop so that I can miss,
01:14 - in the GIF loop coding challenge.
01:16 - I just had this rotating circle
01:18 - and it's very easy to
have the end match up
01:20 - with the beginning.
01:21 - But what if what I want to create with
01:23 - is random, chaotic,
algorithmic scenes of beauty.
01:27 - And an example, an artist who
does this is Etienne Jacob.
01:32 - And you can read more about this work
01:34 - at necessarydisorder.wordpress.com.
01:37 - This is a blog post from
November 15th, 2017.
01:41 - You can find many more of
these, like, amazing GIFs
01:44 - on Etienne's Twitter account,
01:46 - all of which I will link to
in this video's subscription.
01:48 - So this video is inspired
by the beautiful work.
01:51 - And this just is mind blowing to me.
01:54 - This is not a sketch running over time
01:57 - it is a perfect loop.
01:59 - Yet it seems as if it's just
continuous, random chaos.
02:02 - So let's go.
02:03 - let's go back to all this stuff.
02:05 - So what do I want first?
02:07 - So one thing you might have noticed is
02:08 - in the previous video,
02:10 - I was working in JavaScript.
02:11 - I have now moved over to Java
02:14 - using the Processing
developing environment.
02:16 - This is mostly because
what I want to do now
02:17 - is render files out that I
can then repackage into a GIF.
02:22 - You could do that in JavaScript, too.
02:24 - But I haven't found, like,
02:25 - a really excellent, elegant
solution for doing that yet.
02:27 - So when I'm working with rendering,
02:29 - I generally prefer it to be in Processing.
02:31 - And also I like to just
show you different things.
02:33 - So I have ported that code,
it's the exact same code
02:35 - but I'm in Processing now.
02:36 - So now I'm going to start with this code
02:39 - but I'm basically, I'm going
to remove almost all of it
02:42 - because what I want
ultimately is I just want
02:44 - a single noise value over time
02:47 - walking along the perimeter of a circle.
02:49 - So the idea of looping inside
draw is no longer relevant.
02:53 - So I can take that out.
02:56 - The idea of drawing anything
is no longer relevant,
02:59 - so I can take that out.
03:01 - I don't need this translate.
03:03 - What I do need is this idea
of calling the noise function
03:09 - in two-dimensional space
03:11 - based on an angle that's
incrementing over time
03:14 - around the perimeter of a circle.
03:15 - So now that angle had
to be a global variable.
03:22 - That angle, every time through draw
03:24 - gets incremented by some amount.
03:26 - When I want to make a GIF loop
03:27 - I'm going to change that
to the percentage thing
03:29 - cause I want to go from
zero all the way to two pi.
03:32 - And that's the end of the GIF
loop, that closes the loop.
03:38 - But for now,
03:39 - just incrementing it by an
arbitrary amount is fine.
03:41 - And if I were to say print line r,
03:45 - let's watch this go.
03:48 - So if I run this.
03:50 - What we're seeing is the noise values.
03:51 - Now, this is looping.
03:53 - You can't tell,
03:54 - but I'm getting the same
noise values (mumbles).
03:56 - Except not really, because 0.1
03:58 - isn't perfectly divisible by two Pi,
04:00 - but I'm not going to worry about that.
04:04 - David Snyder actually pointed out that
04:05 - if I used the radiance functions like
04:07 - 360 divides into one perfectly,
04:10 - so I could say like,
04:11 - or divides into 10 even.
04:12 - So I can say plus equal radians of one.
04:14 - This will actually now
give me a perfect loop.
04:17 - Thank you for that suggestion.
04:19 - So now what I need to do
04:20 - is map those noise values to something.
04:24 - So I'm ...
04:26 - I could do color, I could do position,
04:28 - I could do size.
04:30 - Let's have it do position.
04:33 - I think that's kind of a very
literal way of looking at it.
04:36 - So I'm going to now say x equals map r,
04:39 - which has a range between zero one
04:41 - to zero and width.
04:42 - I'm going to use the circle function
04:44 - because it's my favorite function.
04:46 - X, height divided by two, 100,
04:50 - and now I'm going to do this
04:52 - and we can see this looks
like randomness, right?
04:55 - This looks like randomness.
04:57 - This looks like smooth
randomness, Perlin noise,
05:00 - but it is a repeating pattern.
05:02 - Hard to see that repeating pattern,
05:03 - but it is there.
05:05 - Sorry, sorry, sorry, I
know I'm interrupting.
05:07 - I know I'm interrupting
you on a roll there.
05:09 - You're going to loop the noise
05:10 - was going to be great.
05:11 - It was, it wasn't great.
05:12 - I'm here, it's been about five days
05:14 - and I've been thinking
about this constantly.
05:16 - What is a better way to demonstrate,
05:18 - what I'm trying to demonstrate here?
05:20 - Looping a chaotic scene with noise.
05:23 - And thank you to Etienne once again,
05:25 - who came in with some nice advice,
05:28 - with some messages to me over the weekend
05:31 - and so what I'd like to do is now,
05:33 - you can go in and watch what I did before.
05:35 - If you want to click
over to the live stream,
05:36 - I'll link to that in the time code,
05:38 - video description magic thing,
05:40 - but I'm actually going to continue
05:41 - and do it in a different way
05:42 - for when I did before in this video
05:44 - from the future, although
it's present for me now.
05:46 - That was the past.
05:48 - (mumbles).
05:53 - One of the ways I think
that will demonstrate
05:55 - the idea of looping effectively,
05:58 - is to have multiple looping
noise values, right?
06:02 - Currently, I just have
this one noise value.
06:05 - I'm getting it from the
path of the circular path
06:08 - in the noise space,
06:10 - and I'm assigning that
value to the x location
06:13 - of the circle.
06:14 - And certainly, if I were to also,
06:18 - say, "Oh, well, take that
value and assign it to the,
06:23 - "map it to from zero to height
06:25 - "and assign it to y,
what's going to happen?"
06:27 - Well, this is not that interesting.
06:29 - If x equals y, it's just
moving along the diagonal path.
06:32 - What I want is to have
multiple different values
06:35 - of noise for different
parameters of the system.
06:38 - And then I could make like lots
of things moving all around.
06:41 - This is going to make some
exciting stuff happen.
06:44 - So let me first of all,
how would I do that?
06:45 - So in the case of noise in one dimension,
06:50 - what I've done previously
06:52 - is I've just taken different
parts of the noise space.
06:56 - Like, "Oh, let me look at the noise values
06:58 - "between here and here."
06:59 - And these noise values,
I'll use for the x value.
07:03 - And then I'll take you the
values between here and here.
07:06 - And I'll look at these
values for the y values,
07:08 - but these won't be loops.
07:10 - So there's two approaches I could take.
07:12 - I can't decide which one I want to do,
07:14 - but if I'm thinking about
07:16 - two-dimensional noise space, right?
07:18 - And this is by the way,
07:19 - going on to sort of
theoretically forever and ever.
07:22 - I could take the noise
values along this path
07:26 - and the noise vies along this path.
07:29 - I could look anywhere within this noise,
07:31 - in this two-dimensional space
07:33 - to have a new set of noise
values that are looping.
07:36 - There's another way I could approach this,
07:38 - is I could always take the noise value
07:40 - from the beginning chunk,
07:42 - but have a different seed
value so that could work.
07:46 - But let me ...
07:47 - I think actually I want to do it
07:48 - looking at different places.
07:49 - So come back with me and I
think a nice way to do this,
07:52 - would actually to create
a noise loop class, right?
07:57 - So I could make different
like noise loop objects
07:59 - that just pick a random spot
and give me those loops.
08:02 - So I'm going to ...
08:03 - what I'm going to do is I'm
going to create a new tab.
08:07 - I'm going to write a
class called Noise Loop.
08:11 - And the idea of this class
08:13 - that anytime I create a new noise loop,
08:15 - I'm going to get a set of noise values
08:19 - on the circular path
08:20 - and they're going to be
different circular paths.
08:22 - So what do I need?
08:23 - First, I need a constructor.
08:26 - And what are the parameters?
08:28 - What are the variables
inside of a noise loop?
08:31 - Well, one of them is
this noise max parameter,
08:34 - which actually another
way to think about it
08:36 - is the diameter.
08:38 - It's really like the size, the spread.
08:40 - I like to think of it as like the spread.
08:42 - Like is this a small circle,
08:44 - where I'm going to have lots and lots
08:45 - of really similar values?
08:46 - So it'll be less ran,
08:48 - it'll be smoother
08:49 - or do I have a really,
really large circle?
08:51 - So that's kind of key.
08:53 - So I need, that's the
thing going to want to set.
08:56 - So I'm going to want
to say what is the ...
08:58 - I could call it spread.
08:59 - I could call it, let's call it diameter.
09:01 - And I could say this
.diameter equals diameter.
09:06 - And maybe I should call
it like noise diameter,
09:08 - and I need to declare it.
09:09 - I'm forgetting about Java.
09:11 - Need to declare that up here.
09:13 - So we can call that diameter.
09:14 - And so the idea here is
that I'm going to say,
09:18 - I'm going to have a noise loop called X.
09:23 - I'll call it x noise.
09:25 - And x noise is a new noise loop
09:30 - with a diameter of five.
09:33 - And then somehow here, what I want to do,
09:35 - all of this stuff I don't
want to do this here,
09:38 - what I want to do is I just want to say,
09:40 - "Float x,
09:42 - "equals, x noise .value
09:47 - "at a given angle."
09:49 - So I probably want to ...
09:50 - I'm calling,
09:50 - I'm thinking I'm going to
have a function called value,
09:52 - maybe we should just call it noise,
09:53 - I don't know what it should be called,
09:54 - but let's call it value,
09:56 - which basically what it
does with a given angle
09:58 - is it does exactly this.
10:01 - So now if I go back into the class
10:04 - and I write this function
value that returns a float
10:08 - and receives an angle.
10:11 - The idea here is that I need to calculate
10:14 - the x offset and the y offset,
10:17 - I called it angle now,
10:18 - let's just call it a right here.
10:19 - So it's the same.
10:20 - This is now called Diameter.
10:25 - And ...
10:29 - why is that not picking it up?
10:31 - Diam meter,
10:32 - diameter,
10:33 - Like I spell it the
same way in every place,
10:35 - and then I need to say,
10:40 - "Return r."
10:43 - So if I did that ...
10:44 - Now, well, I think what
I would actually like
10:45 - this was in here,
10:48 - the loop,
10:49 - I think I'd like to define
10:50 - what kind of values I want.
10:53 - The noise loop object
should keep track of that.
10:55 - So Perlin noise, right?
10:57 - I could just say "Return r."
10:59 - But this is always
going to give me a value
11:02 - between zero and one.
11:03 - But what if I asked the users would say,
11:05 - "Give me a minimum and
a maximum that you want,
11:08 - "and then I'm going to
always return map r,
11:15 - "between zero and one
11:17 - "to between zero and width."
11:20 - That's pretty simple here, right?
11:22 - So I always want to just return that,
11:24 - not between zero and width
11:26 - between minimum and maximum.
11:28 - These are variables that
are part of the object.
11:36 - And then what I want to do,
11:39 - is when I create the noise loop,
11:41 - I'm going to say between zero and width.
11:43 - So I want a noise loop
with a diameter of five
11:47 - and I want the noisy values
11:48 - to be returned between zero and width.
11:51 - So now ...
11:54 - You know, I could just
recreate what I did,
11:59 - like I'm good at now ...
12:00 - Actually, let's make a y noise object.
12:03 - So then I'm going to have two of them,
12:05 - x noise, y noise loop,
12:09 - between zero and height.
12:11 - I'm going to do a y noise object,
12:14 - well, this very exciting.
12:15 - Y noise object.
12:18 - I'm going to get both of those values
12:19 - and I'm going to run it
12:20 - and it's still moving along the diagonal.
12:23 - Why?
12:24 - Because I haven't done that offset.
12:26 - So even though I have to
separate noise loop objects,
12:30 - they are both walking along the perimeter
12:33 - of the same exact circle
in the noise space.
12:36 - So I need some other variable
to give me a random spot,
12:40 - a center spot, so to speak.
12:42 - And so we can call that,
12:46 - I mean, I don't ...
12:47 - I could just move only
a long, like one access,
12:51 - but why not just pick something random
12:52 - throughout the entire 2D space?
12:54 - So what I'm going to do
is in the noise object,
12:57 - I'm going to say ...
13:02 - I'm just giving like an
x and a y as a center.
13:06 - We could call that,
13:06 - I could call it,
13:07 - I don't want to call it
x offset and y offset
13:09 - because that's what I'm calculating here.
13:11 - Let's call it the cx and
cy to indicate center.
13:13 - I'm going to say cx equals random.
13:16 - I don't know.
13:17 - I don't know what the
reasonable range would be,
13:18 - but let's give myself a range
between zero and one million,
13:22 - cy the same.
13:24 - Where do I add cx and cy in?
13:28 - Well, clearly that needs
to enter in here somewhere
13:31 - and you might think, "Do I adjust this?
13:32 - "I'm I adjusting the angle?"
13:34 - No, it's actually these parameters
13:37 - that I'm adjusting
13:38 - because what this really defines is,
13:41 - and I didn't draw this super accurately,
13:44 - but basically, if this is
zero and this is the diameter
13:49 - and this is the diameter,
13:51 - the circle that I'm getting is this.
13:54 - So what I want to do in this center point,
13:58 - what I really want to do it's ...
13:59 - I guess it's not,
14:00 - I don't know if it's
really the center point.
14:01 - It's actually ...
14:02 - It's more like offsetting the corner.
14:03 - So it's really, I'm looking around,
14:05 - I'm looking at a box
between zero and diameter.
14:08 - And then walking along that perimeter.
14:10 - So all I need is an offset for this box,
14:12 - somewhere along the x and
somewhere along the y,
14:14 - and the map function will
take care of that for me.
14:17 - So I can just say,
14:18 - I want to look at cx,
14:21 - cx plus diameter
14:23 - and cy,
14:25 - cy plus diameter.
14:27 - Okay, so this should now,
14:30 - give me this.
14:31 - Great.
14:32 - So now I am getting different noise values
14:35 - for the x and the y
14:37 - and I've also like
encapsulated this nicely
14:39 - that I could do things
14:40 - like let's just change
these diameter value to two.
14:44 - I can also change,
14:45 - like I could also have 240 frames.
14:47 - I mean this is for making a GIF loop.
14:49 - So you have 240 frames
14:50 - and going to see it sort of like
14:51 - happening over many more frames.
14:53 - So this now is a perfect loop,
14:56 - but let's make this even
more exciting somehow.
15:01 - So one thing that I think
could really help here
15:03 - is what if I make yet another class,
15:06 - I'm going to call this a Particle,
15:09 - and the idea of a Particle is
that it has all of this stuff.
15:13 - So it has two noise loops
15:16 - and a particle constructor,
15:20 - and in the particles constructor it makes,
15:24 - those two noise loops.
15:26 - It has a render function,
15:31 - and in the render function,
15:32 - I draw this circle
15:34 - and let's make it,
15:37 - you know, kind of pink
15:38 - with some alpha,
15:40 - maybe with no stroke,
15:42 - maybe the size is smaller
15:44 - and then I'm also going
to need to get the angle
15:47 - passed into the render function.
15:49 - And this has to stay void render.
15:51 - Why am I doing this?
15:52 - I'm doing this because now,
15:55 - I could say particle,
particles is a new array of
16:00 - let's say 100 of these.
16:02 - Let's make the window a little bit bigger,
16:04 - and then in a setup,
16:09 - I'm going to ...
16:13 - go iterate over all of the particles.
16:18 - (chuckles)
16:19 - (mumbles) it's hard.
16:22 - Particles index I
16:23 - and I'm going to make a new particle.
16:26 - And then I am also here,
16:28 - going to say for every particle,
16:34 - P, in particles.
16:37 - P.render with that angle.
16:40 - Now there we go.
16:41 - Look at this.
16:42 - So now I have a whole bunch of them,
16:45 - moving chaotically.
16:46 - Okay, stop.
16:47 - We'll just do a few more things here.
16:50 - I am going to say thinking (mumbles).
16:53 - Let's make them a little brighter.
16:57 - Let's add a noise loop for the ...
17:01 - size.
17:02 - That's the particles
diameter (mumbles) D noise.
17:05 - Let's add a noise loop
for like red values,
17:10 - red, green and blue values.
17:12 - So I'm going to make
some more noise value,
17:14 - more and worn looping noise values,
17:17 - like D noise is a new noise loop
17:19 - also with two,
17:20 - but I want the diameters of these circles
17:22 - to go from zero to 10 to 60,
17:24 - and then this is going to be for color.
17:26 - So the range is from zero to 55
17:30 - and B noise is for blue, zero to 255.
17:33 - And let's make sure it
stays somewhat bright.
17:36 - Let's give them a larger
space to work with.
17:38 - Actually, since I have so many of them,
17:40 - I don't mind if they leave the window.
17:43 - Somebody with negative width
17:44 - plus two width times
two and negative height
17:47 - two height times two.
17:48 - That might be a bad idea.
17:50 - And then now I'm going
to get some more things.
17:52 - Like I'm going to have a diameter,
17:55 - which is from the, which is the D noise.
17:58 - I'm going to get a r and a b,
18:02 - which is from these other noise loops.
18:06 - And let me get this fill now
18:09 - should be down here
18:11 - and I'm going to say, "r"
18:12 - And I'll just give that 50b
18:14 - and now let's run this.
18:16 - Whoa, it's going really crazy.
18:19 - Why, why, why is it going so crazy?
18:21 - Well, I think my diameter
values are kind of large,
18:25 - so let's move.
18:26 - Let's now especially
because the space is so big,
18:30 - so let me do that.
18:32 - Wow, that is weird.
18:35 - Right, so I was a little bit,
18:37 - I think overly ambitious to like
18:38 - pick this very large,
(laughs)
18:41 - space by where I would place
these little noise circles
18:44 - and I think it's given
me some weird results.
18:46 - So I'm going to shrink this.
18:47 - I think our random number,
18:48 - somewhere between zero and a thousand
18:49 - is perfectly reasonable.
18:51 - And so with that,
18:53 - let me run this again
18:54 - and we can start to see, here we go.
18:56 - This is what I'm looking for.
18:57 - So this looks like a bunch
of particles moving smoothly.
19:02 - I can have their colors change.
19:04 - Perhaps their colors
should change more rapidly
19:06 - and maybe their size should also be,
19:09 - but, and I can have the
move a little bit faster
19:12 - so we can see this.
19:14 - Again, I want to stop myself
from trying to be artistic
19:17 - because as you know,
19:19 - it's not something that
I'm capable of doing.
19:21 - What I want to is just
show you the technique.
19:23 - This I think certainly has the appearance.
19:27 - Maybe you can see the loop.
19:29 - Can you see the loop?
19:30 - It's hard.
19:31 - I don't know, I'm losing my mind here
19:34 - staring at this in terms like,
19:35 - "We'll get those 3D pictures.
19:36 - "Do you see it or not?"
19:38 - But what's magical about this
19:41 - is how I have a lot of
different values looping
19:44 - so I can now render a GIF,
19:45 - where all sorts of
parameters are changing.
19:47 - And if you have some other design
19:50 - that is your own creative design,
19:53 - then you can now apply this technique.
19:55 - Let me indulge me for
just a little bit longer.
19:58 - I'm going to make the
noise loop a bit wider
20:01 - and I'm going to make these change,
20:02 - and then I'm going to give
myself more frames to work with.
20:05 - Let's actually just
double it to 480 frames
20:08 - and now ...
20:09 - this should give me a scene here.
20:12 - Okay, so I'm going to look at this.
20:13 - You might be able to see a
looping pattern happening.
20:16 - I cannot detect it,
(laughs)
20:18 - but that's not the point.
20:19 - The point is the creative possibilities
20:21 - that you will make from watching this.
20:22 - Let me close this.
20:24 - Now, if you were recall,
20:25 - this is based on the code
20:27 - from my GIF loop processing challenge,
20:31 - and all I have to do now,
20:32 - is change record from false to true.
20:35 - This will trigger this saving
to the output directory.
20:39 - And I'm going to run it
now and I have to wait.
20:42 - (upbeat music)
20:44 - All right, it finished.
20:46 - Let's go check to make
sure it actually recorded.
20:48 - If I go here, there's an output directory
20:50 - and all of the GIFs ...
20:51 - All the image files that I've saved
20:53 - are in that directory,
there's 480 of them.
20:55 - So now if I render those to a GIF,
20:57 - we'll make a loop.
20:58 - Now, in the previous time I did this,
21:00 - I used a website easygif.com,
21:03 - which was a nice technique
for just finding a website,
21:05 - dragging your files and navigate,
21:07 - create the GIF there.
21:08 - There are plenty of other ways to do it
21:10 - and what are the ways I want
to demonstrate that right now
21:12 - is using something called FFmpeg.
21:15 - FFmpeg is a complete
cross platform solution
21:17 - to record convert and
streaming audio and video.
21:20 - I'm happy to do a video or tutorial about
21:22 - how do we install FFmpeg,
21:24 - but I already have it
installed on this computer
21:27 - and what I can do,
21:28 - this is an application that
I can run via the console.
21:34 - So I'm going to go over
here to the console.
21:36 - You can see I am in the processing sketch.
21:39 - There is an output directory
21:40 - and I can say,
21:41 - "I don't know FFmpeg,
21:43 - "but let's see if I can figure this out."
21:44 - The commander ...
21:45 - I definitely start by saying FFmpeg.
21:48 - Then maybe I do - I,
21:50 - it's not - I, it's - f maybe for format.
21:53 - I actually don't know it.
21:54 - Read the read the FFmpeg
documentation image two.
21:57 - I'm looking, - frame rates.
22:00 - My frame rate,
22:01 - I think I'm going to do 20,
absolutely, 30 frames per second
22:03 - for this GIF
22:04 - and then - I.
22:06 - Now this is the names of the files.
22:08 - So everything is in a
directory called output
22:11 - and then all the files
are named and numbered.
22:14 - So what I can do is,
22:15 - I can say G-I-F- %
22:18 - 0D3,
22:21 - no, %3D,
22:23 - because basically,
22:23 - I'm saying it's G-I-F-
three digits and then .png.
22:28 - And then I need to give it
the file name that I want,
22:31 - which I'll just call it noiseloop.GIF.
22:34 - We're going to go with that, right?
22:35 - And now if I hit Enter,
22:37 - let's say my little FFmpeg player
22:40 - and I hit Enter.
22:42 - It is doing something.
22:44 - It finished.
22:46 - I can go back to the Finder
22:48 - and way at the bottom of this directory.
22:50 - What? Nope.
22:52 - Oh no, it's right here.
22:53 - Noise loop GIF.
22:54 - Okay, let's take a look at this.
22:57 - As it looped yet, I have no idea.
22:59 - That's the point.
23:00 - It's a perfect loop of random noise.
23:09 - Yeah, I want to add a couple
of things to this video
23:11 - and I would like to come back and actually
23:12 - make a longer video about this
23:14 - and actually implement a
noise algorithm itself.
23:17 - I got some comments on the previous video
23:20 - asking about or discussing,
23:21 - whether what's in processing
is actually Perlin noise?
23:25 - So this is a very interesting question,
23:27 - and there's a long history of this,
23:28 - that goes all the way back to 1983,
23:30 - and I don't claim to be an expert on this.
23:32 - So I need to do some more research
23:33 - and I would be happily take
suggestions in this video,
23:36 - but if I go to the Perlin
noise Wikipedia page,
23:38 - you can see here Perlin noise
23:40 - is a type of gradient noise
developed by Ken Perlin in 1983.
23:45 - This is maybe sometimes
also called fractal noise
23:47 - or value noise
23:49 - and that, this 1983,
23:51 - implementation or a version of that
23:53 - is what is in processing.
23:54 - And there have been several
get up issue threads
23:56 - discussing whether that should be updated
23:58 - and it's a point of decision was made
23:59 - to leave it historically what has been,
24:02 - not since 1983,
24:03 - cause processing started in 2001
24:05 - because it would really change
the way people's projects
24:08 - that were made in processing look,
24:10 - these are artistic quality that
24:11 - if the noise implementation was redone.
24:13 - But, what Etienne uses for his GIFs,
24:17 - is actually simplex noise.
24:19 - And so you can see there are ...
24:22 - Ken Perlin has published
24:23 - many different updated
versions of the algorithm.
24:27 - I don't know if they're all
open source or not open source,
24:30 - but this is something I
would like to explore,
24:31 - particularly simplex noise
24:33 - because one thing you might
notice about Perlin noise
24:35 - in processing or the noise
function in processing
24:38 - in P5Js is there are
some strange artifacts
24:41 - and you can see this,
24:42 - some of the problems with
Perlin's, classic noise,
24:44 - among them, computational complexity
24:46 - and visually significant
directional artifacts.
24:49 - So you could could make the case here
24:50 - that there are some visually, significant,
24:53 - directional artifacts.
24:55 - And I do not like directional artifacts,
24:58 - I like non directional smoothness.
25:01 - Who knows?
25:02 - So I want to come back and revisit this,
25:04 - but I do also want to
make one other point,
25:06 - which is that what I'm doing is,
25:08 - I'm creating a loop by
working in two dimensions.
25:12 - I'm looking at Perlin
noise in two dimensions.
25:14 - But if what if I want to do actually loop
25:16 - in two dimensions Perlin noise
25:18 - why don't you just go to three dimensions
25:20 - or when just to go to four dimensions.
25:21 - So that's yet another topic.
25:23 - This could never end, honestly.
25:25 - So some day keeping me honest about this,
25:27 - remind me, give me your thoughts
about this in the comments.
25:29 - I would like to come back
and do two more videos.
25:31 - I would like to look at
other noise algorithms.
25:33 - A great coating train community project,
25:35 - could actually be a processing library
25:37 - that allows you to pick and
choose from value noise,
25:39 - fractal noise, simplex noise,
25:41 - true Perlin noise, whatever,
25:43 - all these different possibilities.
25:44 - And this will be something that ...
25:46 - You know what?
25:47 - I want to do some tutorials about
25:48 - making a processing library.
25:49 - (giggles)
25:50 - And I could, this could be the library.
25:51 - Oh, this is great.
25:52 - I have a plan now.
25:53 - Coming soon this week.
25:57 - So I'm going to do this
25:59 - and you're going to need
some feedback and thoughts,
26:01 - but hopefully, this is
giving you the seeds,
26:03 - the pearl,
26:04 - the noise seeds to do
something interesting,
26:07 - to make your own GIF
26:08 - and have it loop in a
magical, wonderful way.
26:10 - Thank you for watching.
26:11 - Mwaah!
26:12 - I will see you soon
26:13 - in a future coding challenge.
26:14 - Goodbye.
26:15 - (funky music)