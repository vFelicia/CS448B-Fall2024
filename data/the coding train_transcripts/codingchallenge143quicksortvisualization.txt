00:00 - - This video is sponsored by Brilliant.
00:03 - Hello and welcome to Coding Challenging,
00:05 - Quicksort visualization.
00:06 - What you are seeing here are
the results of my previous
00:09 - sorting visualization
challenge where I did
00:11 - the bubble sort.
00:14 - Now the bubble sort is
a really nice sorting
00:15 - algorithm to start with.
00:16 - It's pretty easy to,
relatively easy to implement
00:20 - with just some for loops,
but it's very inefficient.
00:23 - And it's super inefficient
because it is an algorithm
00:27 - that takes on average O, the
letter O here is standing
00:30 - for big O notation or
the order, the magnitude
00:33 - of how long a particular algorithm takes
00:35 - based on how many algorithms
of that element there are.
00:37 - So with an array of N elements,
00:40 - the bubble sort typically
takes ON squared.
00:44 - Now the Quicksort algorithm is on average
00:47 - a big O, N log N algorithm.
00:53 - Now maybe at the end
I'll come back to like
00:55 - unpack why is this.
00:57 - But one of the things I
love about the Quicksort
00:59 - is it's divide and conquer
approach that requires
01:02 - recursion.
01:05 - So I've done a lot of things
with recursion on this
01:08 - channel before, more in computer graphic
01:11 - or drawing a fractal
tree or some other type
01:13 - of recursive pattern, but
here we're going to see a
01:15 - recursive function, a
function that calls itself.
01:18 - So let me describe and
kind of diagram out the
01:21 - Quicksort algorithm as best
as I can before I start
01:25 - implementing the code.
01:26 - So first of all, let's
just say we have an array,
01:28 - and I'll just make a really
small array right now
01:30 - with just I don't know,
one, two, three, four,
01:32 - five elements, seven, two,
six, five, four, alright?
01:38 - So this is my array, and the
idea here is I'm going to
01:41 - write some function and I'm
going to call that function
01:44 - a Quicksort.
01:46 - Now this function is going to expect being
01:49 - passed into it some array,
01:52 - and then it also requires
the idea of the Quicksort
01:55 - is to say I want to apply
this algorithm the Quicksort,
01:57 - to some part of the array.
01:59 - And we're going to recursively subdivide
02:01 - and subdivide and subdivide the array
02:03 - and keep sorting different parts of it
02:05 - until the whole thing is sorted.
02:06 - It's like magic.
02:07 - But when we're starting,
what's going to get passed in
02:12 - is index zero and index four.
02:16 - So the first time I call
Quicksort I'm going to say
02:18 - sort the array from zero to four.
02:21 - Now one thing though that
I'm going to want to check,
02:22 - this is going to be a recursive algorithm,
02:24 - so the main thing is like
start has to be before end.
02:30 - So the array is going to
recursively get subdivided
02:34 - and subdivided, so at some point of start
02:36 - and end are in the same
spot, that's when I'm done.
02:37 - So that's going to be the first step here.
02:40 - If, I think I can just say
if start is greater than
02:42 - or equal to N, something like return.
02:47 - That's going to get me out of it.
02:48 - Alright, but here's the key.
02:50 - The idea of the Quicksort
is basically to say
02:55 - I want to do a step which
is called partition,
02:59 - and I need to pick some part of the array
03:02 - that is called a pivot point.
03:04 - So I'm going to make a
nice, a sort of easy way
03:07 - to pick that, it's always
just have the pivot
03:10 - be the end spot.
03:11 - Then the idea is I want to take everything
03:13 - that is less than the
pivot value and put it on
03:18 - one side of the array,
everything that is greater
03:21 - on the other side of the array.
03:22 - So if I were to do that with this,
03:24 - I could just visually see,
I'm going to get a two.
03:27 - Two is the only thing less than the four,
03:30 - and the four is going to go here,
03:33 - and then the other things are
going to be on the other side
03:35 - like seven, six, five.
03:37 - They don't have to be
sorted, seven, six, five.
03:41 - So this is what I'm doing.
03:42 - I'm taking this pivot,
putting it in essentially the
03:46 - center, the middle of the
array, and then everything
03:48 - that's less goes on one
side, everything that's more
03:51 - goes on the other side.
03:53 - So this partition function,
where I give it the
03:55 - array, the start, I think
I'll still give it the start
04:00 - and the end, and then
also the pivot, right?
04:06 - What I then want this
function to return is
04:09 - an index value.
04:11 - The index value of where
the pivot ended up.
04:15 - Actually I think I don't have to do this
04:17 - because I can always use
the pivot point as the end.
04:19 - So I'll figure that out as I code it,
04:21 - but stay with me here.
04:23 - So in this case, what this
actually ends up returning
04:27 - is the index one.
04:31 - Because what I then can
do is I could say hey,
04:33 - now that I got that index
of where that pivot is,
04:38 - I want to just Quicksort, so
I'm going to recursively call
04:53 - on that array from start
to that index minus one,
04:56 - and also Quicksort, this
is dividing and conquering
05:00 - from that array from
index plus one to end.
05:05 - So basically, these are the steps we get.
05:09 - We start with the array,
we pick an arbitrary pivot,
05:13 - we put everything on
one side or the other,
05:15 - and we figure out where
that pivot ended up,
05:19 - and we just Quicksort both sides,
05:22 - and those will put
something, 'cause this then,
05:24 - this is done, 'cause it
only has one element left,
05:26 - so start and end are in the same.
05:28 - So it'll return.
05:29 - This one will pick five as the pivot,
05:31 - and then it will become five, seven, six,
05:36 - because everything's on one side.
05:37 - Seven, six, are bigger than five,
05:39 - so this is then done.
05:41 - So this then gets Quicksorted,
six becomes the pivot,
05:44 - so seven goes on the
side and we're left with
05:47 - two, four, five, six, seven.
05:50 - So maybe my diagramming and
explaining isn't the greatest,
05:54 - and we also have to write
the partition function.
05:58 - I mean that's the whole, how
do we do this partitioning?
05:59 - But let's start, I think now
let's go over to the code
06:02 - and start writing in our code.
06:05 - So here I am with my code.
06:07 - I'm going to remove the bubble sort,
06:10 - and I'm just going to leave
the drawing of the array,
06:12 - and I'll take out this frameRate
five thing for right now,
06:15 - actually I'll leave that in there.
06:16 - And now if I go and refresh,
we should see there it is.
06:18 - Every time I refresh,
I'm looking at the array
06:20 - of random values, unsorted.
06:22 - So the first thing I
want to do is just see
06:24 - can I get the sorting to work,
06:25 - and then I'll figure out
visualizing is I guess
06:27 - the interesting part here in some ways,
06:29 - but let's get it to work first.
06:31 - So the idea, right, we
need to write a function
06:34 - called Quicksort.
06:35 - It's going to receive an
array, and a start and an end.
06:40 - And I said if start is
greater than or equal to end,
06:44 - then just return, like jump out of there.
06:47 - Otherwise, we need to get this pivot index
06:50 - where I'm going to partition the array
06:52 - from start to end.
07:01 - So I want to call this partition function.
07:03 - I mean this is really,
ironically I haven't explained
07:05 - the partition.
07:06 - That's really where the
algorithm is happening,
07:08 - but I want to run partition,
07:09 - and I definitely don't need
to pass in an extra argument,
07:13 - because I'm also going to use the endpoint
07:15 - as that pivot, so that's fine.
07:18 - And an index is going to come back.
07:20 - And then what I want to do
is say Quicksort that array
07:24 - from start to index minus one,
07:29 - and Quicksort, Quicksort that
array from index plus one
07:39 - to end.
07:41 - So this is the basic idea
of the recursive algorithm,
07:45 - divide and conquer, and I'm
going to call the array,
07:51 - I'm going to call it first
with values and go from
07:54 - zero to values.length.
07:57 - Now do I want to say
values.length minus one, probably.
08:00 - So I'll figure that out as we go,
08:02 - because the last element
is not the length,
08:05 - it's the length minus one.
08:07 - So okay, now of course,
so this is the idea.
08:12 - So now we have to figure out partition.
08:14 - Let's look at the partition function.
08:15 - This is really where the magic happens,
08:17 - this is the core algorithm.
08:19 - So once again, let's make
up an array with just
08:22 - five elements in it.
08:23 - Let's say nine, three, five, six, four.
08:29 - Let me move just to make things more even,
08:32 - let me put the four here
and make the five here.
08:34 - Okay, just to, I think an
example will work out better
08:36 - this way.
08:37 - Obviously any order the
sorting algorithm will work.
08:40 - So the idea of the partition function
08:42 - is when you call the function,
you give it the array,
08:47 - this is the array, you
give it a start and an end.
08:52 - So in this case the start
is going to be zero.
08:54 - This is the start.
08:57 - And the end is going
to be in position zero,
09:00 - one, two, three, four, in index four.
09:03 - So this is the first
time I call partition,
09:05 - it's going to get called on this array.
09:06 - Now what I need is the pivot value.
09:09 - I need a pivot index and a pivot value.
09:11 - The pivot index, well we'll
talk about that in a second.
09:14 - The pivot value, I could
pick anything in here,
09:17 - but it's most convenient
to just pick the last one.
09:19 - So I'm going to say the pivot equals five.
09:24 - And the idea of what I want
to do is I want to rearrange
09:27 - this array so that everything
that's less than five,
09:30 - like the three and the
four are on the left side,
09:33 - and everything that's greater than five
09:34 - like the nine and the six
are on the right side,
09:36 - and then five will be smack in the middle.
09:37 - Now it wouldn't always
work out that the pivot
09:39 - ends up in the middle,
09:40 - because everything could
be bigger and the pivot
09:41 - will end up here, and there'd
be nothing on the left side,
09:44 - but I made a little nice
example so that it works
09:46 - out cleanly.
09:47 - Okay, so how do we do this.
09:49 - So first we need to iterate
through every element
09:52 - of the array.
09:53 - I equals zero all the way
up to the end minus one.
09:59 - So we need to check every
single element of the array,
10:01 - and we need to compare every
single element of the array
10:03 - against five.
10:04 - I also need to keep
track of the pivot index.
10:07 - 'Cause as I go through this process,
10:09 - I'm going to need to find, once I'm done,
10:11 - the five is going to
stay here the whole time,
10:14 - I need to quickly put
five back in to where it's
10:15 - supposed to go.
10:17 - So that I'm just going to call index.
10:19 - It's really the pivot index.
10:20 - So this is the pivot value,
this is the pivot index.
10:23 - That's going to start at zero,
and I'm going to put a star here,
10:26 - for that it's starting here.
10:28 - So I is now zero.
10:30 - Nine, is nine greater than five.
10:33 - Yeah, it's greater than five, I know that.
10:36 - That means I do nothing.
10:38 - So I'm checking if array index I is,
10:43 - I'm checking if it's less
than, it's not less than.
10:48 - If it's less than the pivot value.
10:49 - So if it's not less than the pivot value,
10:53 - I don't do anything.
10:54 - Okay, now I goes up, so I is now here.
10:57 - Is three less than five, ah hah, it is.
11:00 - So guess what I did.
11:01 - I now swap I and wherever
the pivot index is.
11:07 - Remember the pivot index was at zero,
11:09 - so three and nine are going to swap.
11:11 - So three goes here and nine goes here.
11:15 - And then guess what I do?
11:17 - I move that pivot index.
11:18 - So the pivot index is
now here, and I move I
11:20 - and I'm checking four.
11:24 - Is four less than five?
11:26 - It is, so I do this again.
11:28 - Swap I and the pivot index.
11:30 - So four goes here, nine goes here,
11:33 - and the pivot index goes up,
so the pivot index is here.
11:36 - Then I go here for I, this is the last one
11:39 - I need to check.
11:41 - Is I less than five, nope, do nothing.
11:43 - So I'm done.
11:44 - This is the array, three,
four, nine, six, five.
11:46 - Well you can see that
three and four are here,
11:50 - they're less than five.
11:52 - Nine and six in here,
they're greater than five.
11:53 - Guess what?
11:54 - The reason why I need that pivot index,
11:55 - is the last thing that I do
is I swap the pivot index
11:57 - with end.
12:01 - So now I can just take
what was on the end,
12:03 - put it here, put the nine here,
12:05 - and I have, this algorithm
has successfully put
12:07 - everything less than that
pivot value on one side
12:10 - of the array, and everything
greater on the other side
12:14 - of the array.
12:15 - And the really nice thing
about this Quicksort algorithm
12:17 - is I don't really have
to use additional memory.
12:19 - I didn't have to make
a copy of the array to
12:22 - move things around, and merge sort,
12:24 - if I ever do the merge sort,
you'll see you need to start
12:25 - like having extra copies of the array.
12:27 - So that's one nice thing
about the Quicksort.
12:29 - So the chat is giving
me some good feedback.
12:31 - That the way I used I and
index is a little bit awkward.
12:33 - I think what I might actually
do is name this pivotValue,
12:37 - and when I write the code
I'll name this pivotIndex.
12:39 - That's being very long
winded but I think it'll make
12:43 - it more clear, so let's
go write that code now.
12:45 - So if I come back to the code,
12:47 - all I need to do is write
the partition function.
12:50 - So I'm going to write a
function called partition,
12:54 - it's going to receive an
array and a start and an end,
12:59 - and then what did I say I want to do?
13:02 - I need to have a pivotIndex,
which is going to start
13:06 - at zero, I need to have a
pivotValue which is going
13:09 - to be the array at end,
and then I need to iterate
13:14 - from I equals zero to I
is less than n minus one,
13:17 - I plus plus, and now I'm
checking if the array I,
13:23 - is less than the pivotValue.
13:27 - Then what I want to do is swap.
13:33 - I already have a swap function.
13:34 - A swap function just takes
an array and two incidents
13:37 - and says whatever was in A, store it,
13:39 - because you're going
to want to put B in A,
13:41 - and then what you saved in A, put it in B.
13:43 - So swap array A and swap array B.
13:46 - So I already have that function.
13:47 - So I can say swap I and pivotIndex,
13:51 - and then pivotIndex plus plus.
13:58 - And then once I finish that loop,
14:00 - I just need to swap pivotIndex and end.
14:05 - Array, pivotIndex and end.
14:08 - Wow, that was quick to write.
14:09 - Is there any chance that I got that right?
14:11 - Alright, let's run the code.
14:13 - Okay, we got an error.
14:15 - Maximum call stack size exceeded.
14:18 - So this is a very common error.
14:20 - Which is that if you
recursively call stuff
14:24 - way too much, things blow up
and you've exceeded things.
14:27 - So let's take a look at the code.
14:29 - Oh, of course, this is not
where the pivotIndex starts.
14:34 - Remember, I just said zero
because I was thinking about
14:38 - doing it over the whole array.
14:40 - But the whole point of
this is you're starting
14:42 - at start, start isn't always zero.
14:43 - That was a nice little mistake there.
14:46 - So this should be start.
14:46 - Is that the only error I have?
14:48 - Let's see, no.
14:52 - So there's some other errors, let's see.
14:55 - Oh, oh, yikes.
14:58 - I forgot, so I forgot
that my swap function,
15:01 - my swap function, the way that I wrote it,
15:05 - there's no global array.
15:06 - You have to tell it what
array you want to swap
15:08 - the values in, so that
needs to be explicitly added
15:14 - as an argument there.
15:16 - Was that the only mistake?
15:17 - Oh, oh you know what.
15:20 - Here's my other error.
15:22 - I know that this is, I
know that this is end,
15:27 - so I want my loop to go
from zero to end minus one.
15:30 - But I'm using just the less
than in my for statement,
15:33 - so I don't need end minus
one, I need just end.
15:41 - So many errors still.
15:45 - Oh, return the index value.
15:48 - Okay, I forgot the whole
central idea in this.
15:51 - The whole central idea of
this is that the partition
15:55 - function returns back
where that pivot index is
15:59 - so that you can divide and conquer and do
16:01 - the right and left halves.
16:03 - Look at this, I don't
return that anywhere.
16:06 - I just finish and I'm like I'm done,
16:09 - here's an undefined pivot index.
16:11 - I need to actually say return pivotIndex.
16:14 - What an important,
important key line of code.
16:18 - And, I'm getting closer everybody.
16:27 - And another mistake, oh
I made so many mistakes,
16:32 - I'm the worst.
16:33 - This is also from the start.
16:35 - I'm so focused on thinking
about the beginning first step
16:39 - where you go from the beginning
to the end of the array,
16:41 - but the whole idea of
this partition function
16:43 - is that you're anywhere in the array.
16:46 - So this goes also from start to end.
16:50 - There we go.
16:51 - So now there's my sorted array.
16:53 - You can see that the
Quicksort actually works.
16:56 - Alright, now that we're about
three hours into this video,
17:01 - I should visualize it.
17:04 - It's really tricky to visualize
something that's happening
17:05 - recursively, because it's
not happening in an obvious
17:08 - first step, second step, third step.
17:12 - So let me just draw it the first step,
17:13 - draw it the second step.
17:14 - So what happens, what do I mean here?
17:17 - What if I make this
Quicksort function async.
17:23 - Let's just add that async keyword there.
17:28 - Same deal, interesting.
17:31 - Let me also make this
partition function async,
17:38 - and what's important there, oh, I forgot.
17:41 - I forgot something really important.
17:43 - I'm surprised that even worked.
17:46 - If I'm making the
Quicksort function async,
17:48 - I'm going to await Quicksort
both calls to Quicksort.
17:54 - I want to be able, those
are happening asynchronously
17:57 - and I want to await them,
18:01 - 'cause I everything to
happen in the correct order.
18:04 - Also want my partition function
to happen asynchronously,
18:06 - so I'm going to put
await in front of that.
18:09 - Now if the async and await
key words are new to you,
18:12 - I will refer you to some other videos
18:14 - where I go through those in more detail.
18:16 - But this is what I'm basically
allowing this to happen
18:18 - is that this function
Quicksort can be called,
18:21 - and then draw is going to go on.
18:24 - The thing is the sorting is so fast,
18:26 - you can see it.
18:27 - There's like a little blip there, right?
18:28 - That little blip where you see it,
18:30 - but it sorts it so fast.
18:31 - What this means is if I could
just make something happen,
18:33 - let's make swap asynchronous,
18:38 - and let's await it everywhere.
18:43 - If I could just add a
little delay somewhere
18:45 - I could force the actual sorting algorithm
18:48 - to slow down but draw
would still be animating.
18:51 - Is there other places where swap happens?
18:54 - These, swap and swap.
18:55 - How do I make this slow down.
18:58 - Well I could use set timeout,
19:00 - but what I want is I want
a function that's like
19:03 - delay that I could use await.
19:05 - And I'm going to have to write
my own function for doing that.
19:08 - So on Stack Overflow, I
found this nice piece of code
19:11 - that basically takes set time out,
19:14 - the set time JavaScript
function, which has a callback,
19:16 - which is callback based,
and resolves a promise
19:20 - when set timeout finishes,
19:21 - and this is the equivalent
of an asynchronous
19:24 - sleep function.
19:25 - It's kind of like await
and don't do anything.
19:27 - Wait and don't do anything
for this amount of time.
19:29 - So I'm going to bring this
function into my code.
19:32 - I'm just going to put
it here on the bottom.
19:34 - And now I can say await, sleep, 1000.
19:39 - What that means is hey, before you swap,
19:41 - just wait a full second.
19:44 - And let's see what happens.
19:51 - I think my sleeping might be too long,
19:54 - right, a full second.
19:56 - So let's just bring that down to ten,
19:59 - and we could see, there we go.
20:00 - So one thing that I
noticed and that the chat
20:03 - really just helped me out with,
20:05 - is that because I am
using await here with each
20:09 - separate Quicksort step,
20:11 - the actual sorting visualization is,
20:16 - the recursion is not
happening simultaneously.
20:19 - It's doing one half then the other half,
20:21 - then one half then one half
then one, step by step.
20:23 - Which is kind of nice for visualizing,
20:25 - and that's really really fast.
20:27 - I'm going to put a sleep
time of like 25 milliseconds.
20:31 - And you can sort of see
how this is happening
20:32 - little bit by bit by
bit, and then it's done.
20:35 - However, I forgot that
I could use promise.all.
20:40 - So I could await promise.all.
20:45 - Both of these calls to
Quicksort at the same time.
20:52 - So if I do that, just
paste this one up here.
20:58 - This is getting to be pretty goofy
21:00 - advanced JavaScript stuff,
21:02 - but this is basically
saying hey, you could go do
21:03 - both of these simultaneously,
21:05 - I'm just going to wait for
both of them to finish.
21:08 - And this in theory, can you
visually see the difference
21:13 - of that?
21:14 - I don't know how obvious that is to you.
21:15 - It'll be much more obvious
if I did something like
21:17 - color the various pivot points.
21:20 - Let's see if I can do that.
21:22 - I have a really goofy
idea of how to do that,
21:25 - which I think is probably terrible,
21:26 - but this is the last thing
I'm going to do before
21:28 - putting this aside.
21:30 - So what if I have an array,
21:32 - 'cause there's multiple pivot
points that are being tracked.
21:34 - What if I have an array called pivots?
21:39 - And anytime, should I draw
the pivots as they're moving?
21:44 - Or just draw them, let me
draw them as they're moving.
21:48 - I'm going to do overkill.
21:50 - This might not be the classic
way of visualizing this,
21:51 - but basically whenever
I get a pivot index,
21:54 - I want to add it to this array.
21:58 - I really want to use
just like a lookup table.
22:01 - Actually that's what I should use.
22:03 - Ah hah, so what I want is an array.
22:08 - 'Cause I really want an
array of true and false.
22:10 - What's the state?
22:12 - Let me do this, this is much better.
22:14 - States, so as I'm creating my values,
22:18 - the states of every single spot
is going to be negative one.
22:25 - So what the current status
of a particular element
22:29 - of the array is is how
I choose to color it.
22:32 - So in the case of whenever
I get a pivotIndex,
22:36 - I'm going to say pivot,
I'm going to say states,
22:38 - pivotIndex equals zero.
22:44 - So negative one means nothing,
zero means it's a pivotIndex.
22:49 - So this is a little bit
ridiculous, but let me just,
22:51 - bear with me, and now I'm going to say if,
23:00 - if states index equals zero,
23:04 - which I meant for pivotIndex,
fill, make it red.
23:07 - Otherwise, otherwise make it white.
23:17 - This is going to be good.
23:18 - I think this is going
to get us what we want.
23:23 - So you can see anytime
there's a pivotIndex,
23:25 - it's set it to red.
23:25 - Now I'm not unsetting it.
23:27 - So one thing that I could
do then now is I could say
23:32 - here if I'm moving the pivotIndex,
23:36 - right before I move it, let's
set that back to negative one,
23:40 - and then set it again to zero.
23:46 - So now you can see the
pivotIndexes are moving.
23:48 - Now again, I'm not
unsetting it when it's done,
23:51 - which is sort of a problem.
23:53 - So I suppose if I wanted to do that,
23:55 - I could also say states index,
23:58 - this is worth like finished.
24:03 - There you go, so it's
happening very very fast,
24:05 - but that's the pivot stuff moving around.
24:07 - I don't again, I don't know if
I'm doing this the right way,
24:09 - but it also might be
interesting to as I'm sorting
24:13 - between start and end, any
given active partition.
24:18 - Like I could do I equals start,
24:20 - I less than end, I plus plus.
24:25 - I could say states index
I equals two, or one.
24:32 - And I could also at
the end after I'm done,
24:38 - set it back to negative one.
24:43 - So I could say that if,
else if states index I,
24:49 - equals one,
24:57 - then maybe make it blue.
24:59 - Again I'm not really too
thoughtful about my color schemes,
25:02 - but let's see what happens here.
25:04 - I don't know, that's kind
of like what's going on.
25:16 - Let's give ourselves a much
bigger space to work with.
25:17 - Let's actually make this the full window.
25:22 - Window height.
25:26 - Let's make the width
of each one just five,
25:30 - and then I think I probably
want to say no stroke here.
25:35 - 'Cause if they're thinner that
might mess up how it looks,
25:39 - and let's make a hundred
milliseconds sleep time
25:44 - between each swap.
25:46 - Let's go enter full screen and
I'm going to let you enjoy this,
25:51 - I'm going to step aside.
25:53 - (upbeat music)
25:59 - Alright, I need to change the
colors, those were no good.
26:01 - Oh, so and oh, there's another mistake.
26:04 - If I don't want to, if I is pivotIndex,
26:09 - so as long as if I is
not equal to pivotIndex,
26:16 - I don't want to undo, I don't
want to undo the coloring
26:18 - of it being currently sorted.
26:22 - Alright thank you to the
chat who offered these
26:23 - colors as suggestions.
26:25 - I'm going to just leave it at that.
26:27 - I'm going to make the
lines a little thicker.
26:32 - Let's leave the width at ten.
26:32 - Let's make it run a little bit faster.
26:35 - So I'm going to double the speed.
26:37 - Alright, I've got the code
in the state that I want.
26:38 - I'm going to play you out,
and let you enjoy this last
26:42 - visualization of the Quicksort,
26:46 - and please make a nicer version of this,
26:49 - add sound, add better colors,
do all sorts of stuff.
26:54 - Here I'm going to hit refresh.
26:58 - (bell dings)
27:00 - Thank you for watching
this coding challenge,
27:01 - visualizing the Quicksort algorithm.
27:03 - You might notice that
the version that I made
27:06 - looks okay, I did fine.
27:07 - It might look different then some others
27:09 - that you've seen in particular,
there's a very popular
27:11 - video on YouTube called
15 sorting algorithms
27:12 - in six minutes, it has
like six million views
27:16 - as of the time of this recording,
27:17 - and the Quicksort visualization
looks kind of different.
27:19 - And that's because there
are actually multiple ways
27:23 - to do that partition step,
27:24 - that partition function,
that takes the values
27:27 - of the array and puts
a bunch that are bigger
27:30 - on one side and a bunch that
are smaller on the other side,
27:33 - and there are two techniques.
27:35 - There's the Lomuto partition scheme,
27:36 - which is attributed to Nico Lomuto,
27:38 - and that is the one that
I'm using where you pick
27:41 - that pivot and then you
start at the beginning
27:43 - of the array to check
everything and figure out
27:44 - where that pivot should go basically,
27:47 - where it should get moved to.
27:48 - There's another one called
the Hoare partition scheme
27:51 - which is described by C.A.R. Hoare,
27:54 - you can find more about
this on the Quicksort
27:56 - Wikipedia page, that
starts with index size at
28:00 - both ends of the array
and has the walk towards
28:02 - the middle swapping elements.
28:05 - And that's in a way, that's
one that you should try.
28:08 - So if you want to go look that up,
28:09 - look that algorithm up
and try changing my code
28:12 - but still visualizing it,
that might be something
28:13 - exciting to try.
28:15 - And maybe you have other
ideas for your own version,
28:17 - for your way of visualizing
this Quicksort algorithm
28:19 - using color, using sound,
using shapes and design
28:22 - in a different way.
28:23 - You don't have to be sort
literal about the array
28:25 - as just a bunch of bars going horizontally
28:28 - across the canvas.
28:29 - Please share with me your
version of the codingtrain.com,
28:31 - and I'll put a link in
this video's description.
28:34 - And there you'll find pages for
all of my coding challenges.
28:37 - Now one of the things that I
really struggle with these days
28:39 - is how do I think of a
new idea for next week's
28:41 - coding challenge, and I get
a lot of great suggestions
28:43 - from the audience.
28:45 - I get ideas from my students here at NYU,
28:47 - but I'm excited to tell you
about the sponsor of this video,
28:50 - where I is a treasure trove for more ideas
28:52 - for coding challenges,
and that's Brilliant.org.
28:55 - Brilliant has a wide range of content,
28:58 - math, and science, and computer science.
29:00 - They have daily puzzles,
they have courses,
29:02 - I've actually been enjoying
looking at their daily
29:05 - puzzles and trying to
solve them with JavaScript,
29:08 - and that's been a sort of
fun way for me to try to
29:10 - learn something new and also
practice a little more coding.
29:14 - And in fact, probably most
relevant would be the courses
29:17 - on Brilliant that are
computer science fundamentals.
29:21 - Intro to algorithm, recursion,
29:23 - you'll see lots of things
from my coding challenges
29:25 - in that course as well as the
computer science algorithms
29:28 - course where in fact there's
a whole module on sorting,
29:31 - and I reviewed that
Quicksort, the Quicksort
29:34 - while preparing to do
this coding challenging.
29:37 - To sign up, go to
Brilliant.org/codingtrain.
29:40 - That will let them know that
you found it from this video,
29:42 - and also as a special offer
to Coding Train viewers,
29:44 - the first 200 people to
do that get 20% off their
29:47 - premium service.
29:49 - Thanks for watching, I
hope to see you in future
29:50 - coding challenges, and I
can't wait to see what kind
29:52 - of Quicksort visualizations you make.
29:56 - (upbeat music)