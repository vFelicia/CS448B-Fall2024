00:00 - (train whistle)
00:00 - - Hello, welcome to a coding challenge.
00:02 - In this coding challenge,
I am going to make this.
00:04 - Actually, I already made it.
00:05 - That's what I made.
00:06 - It's called a Lissajous table.
00:08 - I got inspired by this
00:09 - by some things I'll
talk about in a second.
00:11 - This one was made with Processing,
00:12 - which is a Java-based environment,
00:14 - but I've also made a
java script version of it
00:16 - that you can watch in a
separate video where I port it.
00:18 - So I hope you enjoy this coding challenge
00:20 - where I program this thing
00:21 - and make some exciting,
cool, weird, wacky,
00:25 - beautiful, strange,
animated art with it, okay?
00:29 - Goodbye, see you soon.
00:30 - (train whistle)
00:31 - Okay, welcome to the
Lissajous coding challenge.
00:34 - Now, I want to talk about
where this idea came from.
00:36 - This is not a new idea.
00:37 - This is a 19th century idea.
00:39 - But I was reminded of it
by this wonderful video
00:42 - from Standup Math's YouTube channel.
00:44 - Matt Parker actually
created a mechanical version
00:47 - of this particular pattern
and Matt Parker's video
00:52 - referenced these two wonderful gifs,
00:55 - one from Julio Mulero on Twitter,
00:58 - and then this one here
from Vincent Pantaloni.
01:02 - And these are really
satisfying, fun patterns.
01:06 - You can say, what's going on here?
01:07 - There's a circle, there's
a dot moving around it,
01:10 - the dots moving around the
circles are at different speeds
01:13 - and it's tracing a path
and look what's going on.
01:15 - So how do you program this thing?
01:17 - This is exactly what I'm going to do,
01:19 - and I'm going to do it in
01:21 - (bell dings)
01:22 - Processing.
01:23 - Now Processing is a java-based
programing environment
01:26 - for sketching and creating graphics.
01:28 - You can do a lot more with it too.
01:29 - More information about Processing
01:31 - in the video's description,
01:32 - and then I will also be
making a java script version
01:35 - of this that you can refer to.
01:37 - Actually, I might just do that
in a whole separate video.
01:38 - So anyway, okay, let's get started.
01:40 - So the first thing I want to do
01:41 - is I'm going to make a
nice window, 800 by 800,
01:46 - and I'm going to give
it a black background.
01:48 - Now I need to think.
01:50 - Thinking is what I need to do.
01:52 - Let's do some planning.
01:53 - The idea is that we have a table.
01:55 - So if we look at that,
01:56 - we can see there's a bunch of columns,
01:57 - let's just start with four
01:58 - I'm envisioning this giant Lissajous table
02:01 - that we're going to make at the end.
02:02 - Four columns and four rows.
02:05 - And each one of these is going to show
02:06 - an oscillating pattern.
02:08 - So some things you're
going to want to know about
02:10 - are the sin function.
02:11 - The sin function is a
trigonometric function
02:15 - which oscillates a number
between negative one and one.
02:18 - I mean, it's the sin of a particular angle
02:21 - in a right triangle is a ratio
02:23 - of the opposite angle over the hypotenuse,
02:26 - the length of those two things.
02:27 - So this is an important concept.
02:32 - And you're also going to want
to know about polar coordinates,
02:37 - and the idea also of
Cartesian coordinates.
02:40 - These are things that I use
in almost all of my videos.
02:42 - Just learning to program in Processing
02:44 - is an exercise in understanding
Cartesian coordinate systems
02:49 - because that's what you're drawing into.
02:51 - But a polar coordinate
system is a way of saying
02:53 - okay, I want to, if I have a
radius of a circle and an angle
03:03 - how can I describe a
point outside the circle?
03:05 - So in other words, if I could figure out
03:08 - what the radius of each
one of these circles are,
03:11 - and then have this point
travel around it circularly,
03:14 - and this would go at 1x speed,
03:17 - this would go at 2x speed,
this would go at 3x speed,
03:19 - this would go at 4x speed,
integer, whole numbers.
03:22 - 'Course you can experiment
with other stuff too.
03:24 - And then I do the same
exact thing over here.
03:26 - 2x, 3x, 4x, and then here I need to get
03:31 - an x-coordinate.
03:32 - Why don't I get the x-coordinate
03:34 - from whatever this happens to be?
03:36 - So the x-coordinate is
oscillating back and forth.
03:38 - Why don't I get the y-coordinate
03:39 - from where this happens to
be moving around the circle,
03:42 - so it's oscillating up and down.
03:43 - It's really just a result,
it's simple harmonic motion.
03:46 - Don't I have a video about that?
03:47 - We're just doing simple
harmonic motion on two axis.
03:50 - If they're moving at the same speed,
03:52 - I will get a nice curve like this.
03:54 - If one of them is moving
faster than the other,
03:56 - I might get something
like this, not exactly,
03:57 - and so on and so forth.
03:59 - So this is what we have to build.
04:00 - Alright, so let's start with just making
04:01 - one row of these things.
04:06 - Alright, how am I going to
make a row of these things?
04:08 - First let me start with a
single variable called angle.
04:12 - 'Cause that's the
variable I want to build.
04:14 - A single variable called angle,
04:16 - I'm going to start that at zero.
04:17 - Then I just need to figure
out a little bit about
04:20 - the space that I'm in.
04:22 - And so one thing that
I want to think about
04:24 - is what is the size of
each one of these boxes,
04:28 - and let's make that 10 pixel or 20 pixels.
04:31 - And what's going on here?
04:32 - We have an 800 by 800 window
04:34 - so let's actually make that 800 pixels.
04:37 - So I'm going to call that
w and have that be 80.
04:40 - So it's going to be 10 by 10.
04:42 - And what I want to do now
in draw is just say for,
04:47 - oh, and then I need to
know how many columns.
04:49 - So the number of columns is the width
04:52 - divided by that size of each box.
04:56 - So if I loop in draw, start at zero, go,
05:01 - haha, I can't type.
05:03 - Go all the way up to columns, i++,
05:05 - and then I just draw an ellipse,
05:08 - some x and some y with some,
05:12 - let's just use 80 right
now, some diameter.
05:16 - And the x is what?
05:18 - I times w, and the y
is just zero right now.
05:24 - What do I have?
05:25 - So I have those circles up there,
05:26 - and I want them down,
shifted over a little bit,
05:28 - so the y is really w divided by 2,
05:32 - and I should be saying no stroke.
05:34 - No, not no stroke.
05:35 - I want the outline, so I say stroke 255
05:40 - and no fill, so I just want the outline.
05:43 - Okay great.
05:44 - And um, hmm, so that's good.
05:45 - (silly noises)
05:47 - I should move these
things over a little bit.
05:49 - So let's also have the x equal
to plus w divided by two.
05:55 - Right, 'cause the reference
point is the center.
05:57 - That's perfect.
05:58 - But the truth of the matter is the corner,
06:00 - I'm looking over here,
that corner up there,
06:02 - when I'm creating this table,
06:04 - the corner is kind of an empty space.
06:06 - So I actually want to start
the first one over here,
06:08 - and I actually want to
have nine instead of ten.
06:10 - So the number of columns is
actually width divided by w
06:15 - minus one and then the x starts at w plus.
06:20 - This is a little bit
goofy, but that's good.
06:22 - So that's my top row,
06:24 - and you know, I don't really like this.
06:25 - I want to make the,
06:27 - I'm going to call this diameter d
06:29 - for diameter of these circles,
06:31 - and I'm going to have that be w minus 10,
06:35 - just so there's a little daylight,
06:37 - a little space in between these things.
06:40 - Look how pixally it is.
06:42 - Can I make that look nicer?
06:44 - Okay, anyways, sorry.
06:46 - Now.
06:48 - That's fine.
06:49 - So let's do this.
06:50 - So now, how do I get that point.
06:51 - So if I have this angle
for each one of these,
06:54 - and you know what, this
is really like center x,
06:56 - circle x, circle y.
06:57 - Center x, center y.
06:59 - It's the center of each
one of those circles.
07:01 - Now what I need is an offset,
07:03 - and an offset is where I can suddenly,
07:05 - like, I want to figure
out where is this point
07:07 - based on the angle.
07:08 - This angle is increasing.
07:10 - Where is this point along the circle
07:11 - and this is this idea of polar coordinates
07:14 - to Cartesian coordinates.
07:15 - So if I know the radius of this circle
07:16 - and I know this angle,
07:18 - I can use a formula, which
says x equals r times cosine
07:22 - of the angle, y equals r
times sine of the angle.
07:25 - I'm going to write that down.
07:25 - X equals r times cosine of the angle,
07:29 - theta being a Greek
letter that's often used
07:31 - to signify an angle.
07:32 - Y equals r time sine of the angle.
07:34 - Where do these come from?
07:35 - A reference to some other video
07:37 - where I go through this in more detail.
07:39 - But right now, we just
want to add that to here.
07:41 - So I'm going to say x equals
r times cosine of the angle
07:45 - and y equals r times sine
of the angle, and what's r?
07:52 - R equals d divided by 2.
07:53 - That's kind of useful.
07:55 - And then I'm going to say,
stroke stays the same.
08:02 - I'm going to make the stroke weight eight.
08:08 - So I'm going to just draw a thicker point
08:09 - by just using point.
08:11 - Point center x plus the x offset,
08:16 - center y plus the y offset.
08:18 - And I'm going to need to say,
08:21 - up here I'm going to need to say this is,
08:23 - I'm going to have to say
here stroke weight one.
08:27 - So the old circles get
a stroke weight of one,
08:30 - and the points, ah, there
we go, look at that.
08:32 - (laughing)
08:33 - You know, technically
speaking, I mean this is fine,
08:36 - I could start here, but the point I think,
08:37 - if you look at those other
lissajous table images,
08:39 - the point starts at the top.
08:41 - So I think I can just
do a little offset here,
08:45 - and again, I should
probably be more thoughtful
08:49 - about variable naming and functering,
08:50 - but I'll re-factor this later.
08:52 - T-shirt coming soon, for real.
08:55 - Okay so look at that, that's perfect.
08:57 - Now, let's just say angle plus equal 0.01.
09:05 - And there we go, look.
09:06 - All the dots are moving
around the circle now.
09:08 - Perfect.
09:09 - The dots are moving around the circle.
09:10 - Let's even do something really fun here,
09:12 - which is stroke 255, let's
give it a little alpha
09:15 - and let's draw a line from
09:17 - cx plus x, zero, cx plus x height.
09:24 - So now we can see, oh wait, wait, wait.
09:26 - Stroke weight one.
09:29 - And now we can see, there we go.
09:31 - So now I could also, oh, uh.
09:33 - Stroke 255, uh, I'm going to need
09:35 - to reset the colors everywhere.
09:39 - Okay, there we go.
09:39 - So you can see now I can see those lines
09:42 - which are going to help
us as a visual guide
09:44 - as I start to create those curves.
09:46 - Ah, what's the big thing here?
09:47 - The big thing is, remember,
09:48 - is the speed of these needs to increase.
09:52 - This one's going to go
around two times as fast,
09:54 - three times as fast, four times as fast.
09:57 - So coming over here, I want
to say, oh this is easy.
10:02 - I have a counter, i.
10:04 - So I'm going to say
angle times i plus one.
10:07 - 'Cause I don't want to multiply by zero.
10:10 - The zero one gets multiplied
by one, et cetera, et cetera.
10:12 - So now we can see, there we go.
10:14 - Oh, this is already fun.
10:16 - I already like this, just like this.
10:19 - Okay.
10:21 - So that's good.
10:21 - Now this really needs refactoring
10:25 - because this I could really think about
10:27 - as a function and I could just do
10:30 - that same function vertically.
10:31 - But I am who I am.
10:34 - I will be who I will be.
10:36 - I will refactor this later, for real,
10:40 - and you will also refactor it yourself
10:42 - as an exercise to improve
your programming skills.
10:45 - I'm going to just change this to rows.
10:47 - This is going to be the y,
this is going to be the x.
10:53 - And then this is all the same.
10:56 - This is all the same except
the line now goes from zero
10:59 - to cy plus y and width
to cy plus y, right?
11:08 - What did I do wrong?
11:09 - Did I not even calculate the rows?
11:12 - So I need a variable that
is the number of rows,
11:16 - and rows equals height
divided by w minus one.
11:20 - And now there we go.
11:22 - So we can see I've built the table.
11:24 - I could stop right here
and I could say I'm done.
11:26 - Please finish this.
11:28 - I'm going to keep going
11:28 - 'cause this is going
to be fun and exciting.
11:30 - Alright so now, ah!
11:32 - What do I do?
11:33 - How do I, how do I get the curves in here?
11:38 - Well, I see in the chat actually,
11:39 - Hi, this screen's OOP.
11:41 - Can someone explain to me what it's doing?
11:42 - Me too, OOP!
11:43 - Alright, what is OOP?
11:45 - Object-oriented programming.
11:46 - So yes, I probably should have done this.
11:48 - I could refactor this
to be object-oriented,
11:50 - even this idea of the columns and rows
11:52 - and the objects that are there,
11:55 - but what I'm going to do is
I'm going to make a new tab
11:58 - in Processing, Curve, and I'm
going to create a curve class.
12:02 - So the curve class is an object,
12:04 - and the idea for that
object is to store the curve
12:07 - that's going to go in
each one of these spots.
12:09 - So what does it need to store that curve?
12:12 - I need to store a path.
12:15 - So where am I?
12:17 - Curve, I need to say, what do I need?
12:19 - I need an array list.
12:21 - An array list is a flexibly sized array.
12:23 - If I do this in java-script,
I can just make a plain array,
12:25 - and I'm going to fill it with Pvectors.
12:27 - I'm going to call that path.
12:30 - And then I'm going to
write the constructor
12:32 - and the path is a new array
list, an empty array list.
12:39 - So I'm going to just
put points in this path.
12:42 - Points in the path, points in
the path, points in the path.
12:44 - Alright?
12:45 - So I could write a function
that's just add point,
12:50 - and it gets an x and a y,
12:55 - and then I need to do something like say,
12:59 - path.add new Pvector
with that x and y, right?
13:08 - And then, and this would be void.
13:12 - And then I'm going to also
write a function to draw it.
13:17 - Show, and I can say stroke 255,
13:23 - and you should be clever and thoughtful
13:25 - about color and fill
and all sorts of pretty,
13:27 - different ways of doing this.
13:29 - Stroke weight one, and then
I'm going to say for every,
13:35 - and this is a nice way of
doing an enhanced loop in java,
13:37 - vector in the path, set a vertex, v.x v.y.
13:44 - This little bit of code right
here is no longer relevant,
13:47 - and what am I saying?
13:48 - Begin shape.
13:50 - End shape, and no fill.
13:53 - So this is actually me
drawing the path as shape
13:58 - using all of the vertices.
14:00 - Okay.
14:02 - Oh somebody's telling me
that the vertical lines
14:03 - are not visible.
14:05 - And I'm not in the Slack channel here.
14:08 - The vertical lines are not,
okay two quick fixes I'll make.
14:11 - Alca is telling me that half pi
14:14 - is a global constant in Processing,
14:17 - so if I want it to be, I could use that
14:19 - instead of saying pi divided by two,
14:21 - and you cannot see the lines.
14:24 - Oh that's so sad, the
line's are my favorite part.
14:27 - Let's do 150.
14:28 - Just make them much more obvious.
14:31 - Okay, that makes them much more obvious.
14:33 - Hopefully it looks reasonable
14:36 - in the YouTube compression
stuff, but we'll see, we'll see.
14:40 - So I'm going back to the curve.
14:42 - I just hit the debugger by accident.
14:43 - Alright so let me auto-format the code.
14:46 - So this should draw me the path.
14:49 - And then, oh tricky.
14:50 - So now where do I want to
store all these curves?
14:53 - Well one of the reasons why
14:54 - I wanted to use Processing for this
14:56 - is I just feel so comfortable
14:57 - whenever I have a grid-like
structure like this,
15:00 - using a two-dimensional array.
15:02 - A two-dimensional array
isn't really two-dimensional.
15:05 - It's just a list of lists,
but we can think of it
15:07 - as a two-dimensional matrix.
15:09 - See my other video about
two-dimensional arrays.
15:11 - It's kind of tricky to
make those things in java,
15:13 - but absolutely possible.
15:14 - Java-script that is, but
in java it's not so tough.
15:18 - So what I can actually
do is I can declare,
15:21 - I'm going to call it curves
and I can now just say
15:25 - curves equals a new two-dimensional array
15:31 - with columns by rows.
15:33 - Now I have always, always, always, whoops.
15:40 - I have to zoom in on this
15:41 - 'cause I got really something to say here.
15:44 - Just fast forward like two or
three minutes in this video.
15:47 - I have always programmed like this
15:49 - because Cartesian coordinates
are expressed x,y.
15:53 - So I always think if I'm
making a two-dimensional array,
15:56 - the x's will come first,
the y's will come second,
15:58 - but I've been doing so much
stuff with matrices recently,
16:01 - and mathematically,
16:02 - matrices are expressed as row by columns,
16:06 - that is the standard.
16:07 - This is probably going to cause me
16:09 - to make all sorts of mistakes and bugs,
16:10 - but right now I'm going to do it.
16:14 - Rows, I'm going to consider
the first dimension here rows
16:17 - and the second dimension here columns.
16:19 - So everybody try to help me remember this.
16:21 - You know, sit there and meditate on this
16:23 - and send me your brain waves.
16:25 - That's what I'm going to do.
16:27 - So now, once I've made it, I can just say
16:28 - int i equals zero, i is
less than rows, i plus plus.
16:33 - Shouldn't the i, the i should
be the, I'm so confused.
16:35 - The i should still be the columns.
16:40 - J should still be the rows.
16:43 - Maybe I should iterate over the j first.
16:45 - Who knows, who knows?
16:48 - How will I live?
16:50 - Curves index j index i equals a new curve.
16:56 - So there we go.
16:57 - I made an object for every
single one of those spots.
17:01 - And now here's the thing.
17:02 - Oh I did something so weird here.
17:05 - Because I made, I mean the thing is,
17:08 - if it's a square,
17:09 - columns and rows are
going to be the same size,
17:11 - but I kind of want this to
work for non-square images.
17:15 - So I really do want to refactor this
17:18 - and put these two blocks of
code together in one loop.
17:20 - I'm not going to though.
17:21 - Here's what I'll do.
17:23 - I'm going to, if I change this function
17:26 - to void add x, so I make two of them,
17:34 - a separate one for add y.
17:39 - And then after I add the x and the y,
17:41 - I can add the point with both of those,
17:44 - so I need to store, I'm
going to say Pvector current.
17:48 - So if I keep a separate variable.
17:50 - Current equals create vector.
17:54 - It doesn't matter what's
in it, just zero zero,
17:57 - or nothing, an empty vector.
18:00 - No, not create vector, in
Processing it's new Pvector.
18:03 - In P5 in java-script it's create vector.
18:05 - So if I do that, then I can current.x,
18:09 - this is really kind of
awful, I can set the x.
18:13 - Maybe this is more like set x.
18:16 - Set y.
18:19 - Then I can say current.y,
18:23 - and I'm sure all of you are thinking
18:25 - of other ways of doing
this, which is excellent,
18:27 - and I encourage you to try,
18:28 - write about that in the comments.
18:29 - So if I set both of these,
then adding the points
18:33 - can just be add, if
you do that at the end,
18:36 - I can say add current.
18:38 - And then I can say add
current equals a new,
18:41 - I can just make another empty Pvector.
18:43 - So I can do that over and over again.
18:45 - Let's think about this.
18:46 - In other words, what I
want to do is basically
18:49 - for this column, I need
to set what the x point
18:53 - for all of these.
18:54 - For this row, I need to set
the y point for all of these.
18:58 - Okay so in this loop here
19:01 - where I am going through all the columns,
19:03 - now I just need to go
through all of the rows
19:05 - for each column and set those x points.
19:08 - So i is going through the columns.
19:10 - So now j will go through the rows.
19:18 - And I'm going to say, I
forgot what I'm doing.
19:20 - Curves, curves, cannot
type, curves j I.set x,
19:27 - and then what am I doing?
19:28 - I'm setting it to exactly this point.
19:31 - So I go through all of the rows
19:34 - and set the x point for each column.
19:37 - Then I'm going to do
exactly the same thing here,
19:41 - down here, but this time
I'm going to go through
19:46 - the columns 'cause I'm
going through the rows,
19:49 - so for each row, I go through each column,
19:52 - and this is the same, but now it's y,
19:55 - and I want to set the y point.
19:57 - Ah, we've got a problem
19:59 - So I used i here, but I should use j now.
20:03 - So I should be consistent
20:05 - and try to always use j with
rows and i with columns,
20:08 - which means these have to
change and this has to change.
20:12 - Okay.
20:14 - Great.
20:15 - Okay no errors and now guess what?
20:17 - I'm kind of done, I think,
20:19 - because basically all that I need to do
20:21 - is call add point and show.
20:24 - Once I've set the x and
the y, add to the path,
20:27 - then draw the path.
20:28 - So I need a nested loop.
20:30 - Do I have that somewhere?
20:31 - Somewhere I have a nested loop.
20:32 - Yes, right up here already.
20:34 - Let's just actually look at this.
20:35 - Ah, ah, no!
20:37 - Come back to me.
20:38 - I'm going to copy this 'cause
I don't feel like typing it,
20:41 - and go all the way to the end.
20:43 - And now instead of,
before I made new curves,
20:45 - now I'm just going to say add point
20:48 - and what else?
20:53 - Show.
20:55 - Oh my goodness.
20:56 - Could this be it?
20:57 - Could this be it?
20:59 - Look at that.
21:00 - Ah, there we go.
21:01 - Look, it's the lissajous table.
21:03 - So we're kind of done.
21:04 - Coding challenge finished.
21:06 - Why is there 15 more
minutes of this video?
21:08 - 'Cause I kind of want to
do a couple more things.
21:09 - Hopefully there's not actually
21:10 - 15 more minutes of this video.
21:12 - I want to do a couple more things.
21:14 - Number one is, it would really be nice,
21:15 - I think it's really
nice in one of the gifs
21:16 - if you could sort of highlight that point
21:18 - that's moving along the trail.
21:21 - So I should be able to do
that by saying separately
21:28 - stroke weight eight point
current.x, current.y.
21:34 - Ah, this isn't going to work.
21:36 - So why is it not there?
21:37 - Because as soon as I added it, I regret,
21:41 - so I don't love this, but
I'm just going to move this
21:44 - to down here.
21:44 - Maybe I should put that
in a separate function,
21:47 - like a curve, but there we go.
21:48 - Now I can see, I can actually also see
21:50 - the point that it's moving on.
21:52 - That's nice.
21:53 - I don't know if this is going to matter,
21:55 - but I'm on a high density display here.
21:57 - It's being captured with a green screen,
21:59 - so I don't know if this
is going to do anything,
22:01 - but it'll look nicer for me.
22:03 - I'm going to change the pixel
density of the sketch to two.
22:07 - Oh, not available for this display.
22:09 - So that doesn't make a difference.
22:11 - I would have to unplug
it so you can't see it.
22:14 - But that's fine.
22:15 - I am going to use,
though, the P2D renderer
22:21 - because what I would like to do now
22:24 - is I would like to use full screen.
22:29 - Let's just be careful
about this for a second.
22:31 - I'm going to use the P2D renderer
22:32 - and I'm going to make these much bigger.
22:34 - Let's see what happens.
22:38 - So we can see this is
a small lissajous table
22:41 - and I probably want
this buffer between them
22:44 - should be a ratio of their size.
22:46 - Maybe it should always be w
minus 10% of w or something.
22:54 - Or 0.9 times w would work.
22:56 - Maybe a little bit more.
22:58 - It's so pixely.
23:03 - Okay so I like this.
23:04 - Now.
23:07 - Oh, there's an interesting.
23:09 - So first of all, there's
a big problem here.
23:11 - As soon as this one
that's above me right now
23:14 - gets all the way to the end,
23:15 - it's just like redoing its points.
23:18 - So one thing I should do,
and also is it backwards?
23:21 - I think it's backwards.
23:24 - But I'm getting some big red error there.
23:26 - I got to take a look at this.
23:27 - It's bad, I mean, it's kind of fine.
23:28 - I don't know that it actually matters,
23:30 - but I think in those examples,
23:32 - the dot moves counter-clockwise
rather than clockwise.
23:36 - This'll be an easy thing for me to fix
23:38 - because I can just do minus equals,
23:41 - but I also want to do something like
23:45 - if angle is less than negative two pi,
23:49 - like it's gone all the way around once,
23:52 - then let me reset it.
23:56 - Maybe I want to save an image of it.
23:58 - So I'm just going to do like
curves index i dot reset.
24:03 - Like reset all the curves,
24:04 - and so I could write a function, reset,
24:07 - which would just take the
path and clear it I think.
24:11 - Let's have it do it really fast,
24:13 - just to see if that works.
24:15 - So have it go 10 times as fast.
24:19 - It gets all the way around and it clears.
24:20 - Oh.
24:22 - (laughing)
24:24 - You know what?
24:25 - I guess I'm going to have to
reset the angle back to zero.
24:30 - That was a bug.
24:31 - So if I do that,
24:32 - now it's going to go all the
way around and start over.
24:35 - And you know what I really want to do also
24:37 - is when it does that,
24:38 - let me do save frame
lissajous one two three four,
24:46 - so I can save it.
24:48 - They're all going to be the same,
24:49 - so I don't know why I'm doing
this over and over again,
24:51 - but that's fine.
24:51 - But I just want to be
able to look at it later.
24:54 - Okay.
24:55 - Let's make this, back down,
let's go a little nuts here.
25:00 - 20, no that's just crazy.
25:01 - Let's try it.
25:04 - (laughing)
25:05 - You cannot, goodbye, goodbye to,
25:11 - (laughing)
25:12 - Goodbye to YouTube compression
algorithm for sure.
25:15 - Alright, that's better.
25:16 - So you can see I can have
a really large table.
25:18 - And by the way, you
should see here of course,
25:20 - as they're going the same speed,
25:23 - they should be always circles.
25:27 - So you can see these
interesting patterns here,
25:29 - based on the ratio of
the column to the row.
25:32 - So this really should
be divisible more nicely
25:35 - so that it fills out and gives
you so much more of a color
25:37 - and stuff like that.
25:39 - I probably should make these dots.
25:42 - Actually also a ratio of the
size to the stroke weight,
25:45 - should be a ratio.
25:46 - But let's look at what that error is
25:48 - 'cause people are going to be wondering.
25:52 - Can I please grab this?
25:59 - I have no idea what this is.
26:01 - So somebody will tell me in the comments
26:02 - and I will pin that comment.
26:05 - Let's see if I get that error in P3D.
26:11 - What if I don't use P?
26:12 - Actually it runs kind of fine in P2D.
26:14 - I thought I might need
the hardware acceleration
26:16 - to get it going kind of full
screen, but this is fine.
26:21 - Save the frame before, oh
before I reset the circles.
26:24 - Yeah, but you know what?
26:25 - It actually should be fine,
26:27 - 'cause it's okay to reset the circles
26:28 - without redrawing it.
26:30 - So I'm not redrawing it.
26:32 - So let me make sure it
gets all the way through.
26:36 - And by the way, I also
probably don't need to save.
26:38 - In the path, I could
save every other point.
26:43 - Alright so, come on, let's
get all the way to the end.
26:50 - Oh, it's 'cause I'm doing it in P2d,
26:52 - it's getting really slow.
26:53 - I'm doing it in regular.
26:56 - See what I mean?
26:57 - This video was.
26:58 - Here we go.
27:01 - I'll speed this up in post.
27:04 - (high speed music)
27:07 - Okay, so it reset
itself, it's going again.
27:10 - And let's go here and
let's look, oops, sorry.
27:14 - Let's look in the sketch folder.
27:16 - We see lissajous649.png and there it is.
27:19 - There's our beautiful lissajous table.
27:21 - That's some number of columns
by some number of rows.
27:25 - Thank you for watching
this coding challenge.
27:27 - Stay tuned, I'm going to
do a five minute video
27:29 - where I port this to java script.
27:31 - If you want to watch that,
link in the description below.
27:33 - Oh please, make your this.lissajous.
27:37 - Make your own version of
this, share it with me,
27:39 - Twitter, Mastadon is the the new place.
27:41 - There'll be some videos
talking about that,
27:42 - in the comments and all
those kind of stuff.
27:44 - Thanks very much.
27:45 - Goodbye.
27:46 - (upbeat music)