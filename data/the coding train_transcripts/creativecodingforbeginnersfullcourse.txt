00:00 - learning processing 10 years later take
00:03 - one do you have no idea what it means to
00:05 - program that is going way too fast take
00:10 - two totally just press the wrong button
00:12 - on the
00:13 - teleprompter take three I'm I'm really
00:16 - going to get this this intro this time
00:19 - hi welcome first this is a really long
00:21 - video I'm about to introduce it and kind
00:24 - of talk about myself my background and
00:26 - what's going to be here but if you kind
00:28 - of know why you're here already and just
00:29 - want to get to the tutorials check the
00:31 - time codes in the video description you
00:33 - can jump right there but maybe you have
00:36 - no idea why you're here that's the case
00:38 - I would really like to know so why am I
00:41 - here making this video have you ever
00:44 - wanted to learn programming do you have
00:46 - no idea what it means to program to
00:49 - write code to create your own software
00:51 - do you want to break free from the bonds
00:54 - of the tools that other people have made
00:56 - for you and learn to build your own
00:59 - software to make things with code so
01:02 - that kind of sounds like a sales pitch
01:05 - that was not my intention I'm not trying
01:07 - to sell anything here you can go you can
01:09 - leave there's lots of other
01:11 - recommendations and things that'll
01:12 - probably take you somewhere else but if
01:14 - I've piqued your interest if you're
01:15 - interested in learning to program this
01:17 - is why I'm making this very long video
01:19 - series full tutorial about learning to
01:22 - code when you first start learning to
01:23 - code trying to pick a programming
01:25 - language to use an environment uh
01:28 - figuring out what you want to make it's
01:29 - a giant complicated mess of questions
01:31 - and possibilities it can be very hard to
01:33 - get started so I'm going to take care of
01:35 - all of that for you right now and
01:38 - there's one way that you can learn how
01:39 - to program not the only way not the only
01:41 - way you can or should but it's my
01:43 - favorite way and that's with something
01:44 - called processing I have been working
01:46 - with processing since 2003 I have made a
01:50 - lot of online tutorials and textbooks
01:52 - and lots of workshops and classes and in
01:55 - fact in 2012 I was teaching a class
01:58 - called introduction to computational
01:59 - media and I started making a video about
02:02 - how to learn to code with processing and
02:04 - it was just as messy and confused as I
02:07 - am right now but this is who I am take
02:09 - it or leave it it'll get hopefully a
02:11 - little bit more focused and organized
02:13 - once I'm into the actual coding lessons
02:14 - itself so I really was just asking
02:16 - myself the question should I remake
02:19 - those videos the quality wasn't so great
02:21 - although I did look much younger over 10
02:24 - years ago but enough time has passed a
02:27 - lot has changed in the landscape of
02:29 - tools for learning to code I've learned
02:31 - some new better ways to sort of teach
02:33 - some of the concepts processing most
02:35 - recently came out with version 4 which
02:37 - has many new and exciting features I
02:40 - have a lot more gray hair I got these
02:41 - like Stripes here so I figure why not
02:45 - let's just do it all again so it's my
02:47 - hope that this video will help you learn
02:49 - to code for the very first time I mean I
02:51 - suppose you could watch this if you
02:53 - already know how to code but I'm really
02:54 - looking for the beginner I'm about to
02:56 - get started but I want to talk to you a
02:57 - little bit more about just sort of me in
02:59 - my background and also a little bit
03:01 - about if you'll indulge me a little bit
03:03 - about the history of processing itself
03:05 - so I think I said my name if I didn't
03:07 - it's Dan uh Daniel schiffman is also
03:09 - another way to say my name in a longer
03:11 - way I work and teach at currently at a
03:14 - program called ITP and IMA which is part
03:16 - of Tish School of the Arts at New York
03:18 - University and that is in fact where I
03:21 - discovered that I love programming I was
03:24 - 28 years old it was uh 2001 and I
03:27 - enrolled as a master student in this
03:29 - prog prog ITP where I teach now and I
03:32 - took a class called introduction to
03:33 - computational media and I learned the
03:36 - basics of programming with the lingo
03:38 - programming language you might not know
03:40 - what lingo is but it is the programming
03:42 - language from a piece of software called
03:43 - macromedia director and it was invented
03:46 - by the incredible John Henry Thompson so
03:49 - I encourage you to learn more about John
03:51 - Henry Thompson's work um he actually
03:53 - appeared as a guest on a coding train
03:54 - video I'll show a clip of that right now
03:57 - you can watch that um but the point of
03:59 - what I'm trying to say here that you
04:00 - might be surprised to know is that
04:02 - Beyond some small experiments I did
04:05 - programming on an Apple 2 in the 80s as
04:07 - a kid I never actually got interested in
04:09 - programming until that time I was
04:13 - interested in other things and maybe you
04:15 - are to what is your passion maybe you're
04:19 - interested in biology or economics or
04:22 - painting robots music movies hiking
04:25 - social justice the law travel sociology
04:28 - dance food you like to cook I don't know
04:31 - I'm here to tell you that learning to
04:33 - code is something that you can do and it
04:36 - may just expand the way you approach and
04:38 - think about whatever the passions are in
04:40 - your life so I think there is this
04:43 - question of why should you learn to
04:46 - program the computer and the first thing
04:48 - that I think is important to say is you
04:50 - know maybe you don't need to or want to
04:52 - that's totally fine you're interested in
04:55 - lots of stuff this does not interest you
04:57 - other videos to watch other skills to
04:59 - learn no problem I don't mean to say
05:03 - that everyone needs to learn to program
05:05 - or certainly everyone should watch this
05:06 - video to learn to program but if you're
05:09 - interested and you think you might want
05:11 - to learn to program then I want to say
05:13 - that it is for you there are no
05:15 - restrictions no prior knowledge it's
05:17 - really something that everybody can do
05:19 - and here's why I think it might be
05:21 - relevant like you probably I mean you're
05:23 - watching this video probably on a
05:25 - computer you probably use the computer a
05:27 - lot maybe use it as a tool for work for
05:30 - family and social interactions you do
05:31 - your taxes on it you use different
05:33 - software you want to write an essay you
05:35 - need to manipulate an image so much of
05:36 - the stuff you do in your life requires a
05:38 - computer so what are you using on the
05:40 - computer you're using software who made
05:42 - the software not you I mean it's great
05:45 - that there is all this software but if
05:47 - you want to be creative if you want to
05:49 - express yourself if you want to make
05:50 - your own things on the computer without
05:52 - the limitations and features that other
05:55 - people who have made the software
05:56 - particular large corporations that are
05:58 - selling you the software then you will
06:00 - want to learn to code everything that
06:02 - you do on the computer starts with that
06:03 - software so why can't the person who
06:05 - makes the software to do the things on
06:07 - your computer be you what kinds of
06:09 - things could you invent what kinds of
06:11 - ideas could you come up with if you
06:13 - weren't limited by what already runs on
06:16 - your computer now I have to admit
06:18 - something I'm making this sound very
06:20 - very Grand and in just a short while as
06:23 - I start doing the tutorials we're going
06:24 - to be really excited because you and I
06:27 - together writing some code Drew a circle
06:29 - that appeared on the screen so don't get
06:31 - me wrong this is going to be a slow
06:32 - process programming is hard and this is
06:35 - just the beginning I'm going to show you
06:37 - the basics and you're going to need to
06:39 - take it much farther but it's my hope
06:41 - that this video series will get you
06:43 - going in the right direction so how am I
06:46 - going to show you about code how are you
06:49 - going to learn to code so honestly I
06:51 - really wish that I knew the secret uh
06:53 - the perfect way for everyone to learn I
06:55 - don't and I'm the first to admit that my
06:58 - style of presentation might not be the
07:00 - right fit for you there are lots of
07:01 - online resources books and videos how do
07:04 - you know what to pick in my view the
07:07 - best way to learn programming is to try
07:10 - learning the programming language that's
07:12 - right in front of you what do I mean by
07:13 - right in front of you I mean maybe you
07:15 - have a friend who's also learning to
07:17 - program why don't you just learn the
07:18 - same language that they're learning so
07:20 - you can do it together maybe you've had
07:22 - a teacher who you just find inspiring
07:24 - and they love this language and they've
07:25 - got some lessons in this language try
07:27 - that one don't worry too much ultimately
07:31 - to learn you're just going to have to
07:34 - try it yourself I could try to build a
07:36 - very fancy online learning platform but
07:39 - nothing beats being with people and
07:42 - talking through those ideas nothing
07:44 - beats learning from your mistakes and
07:46 - asking for help and even better helping
07:49 - others so maybe maybe this video and me
07:53 - I can be that person for you on some
07:55 - level maybe processing can be that
07:57 - platform for you it was for me and so
08:00 - I'm really excited to share my
08:01 - experience learning to code with you it
08:05 - was right around I learned with lingo as
08:07 - I talked about I was learning Java and
08:08 - some other programming languages and
08:10 - right around the time I graduated from
08:12 - this program in 2003 I discovered
08:14 - processing and immediately started
08:16 - learning everything I could about it in
08:18 - 2004 I taught a class called procedural
08:20 - painting as an experiment to a small
08:22 - group of students at NYU and there I
08:25 - attempted to take everything I had
08:26 - learned in lingo and translated into the
08:29 - process environment so that syllabus and
08:31 - set of tutorials made their way into a
08:34 - book called learning processing which
08:36 - then made their way into the 2012 video
08:39 - series about learning to code and
08:41 - launched ultimately this YouTube channel
08:44 - called the coding train which is where I
08:46 - am right now and I hope that this video
08:48 - will be the new one on the channel to
08:51 - help everybody get started learning to
08:53 - program with processing let me give you
08:55 - a quick primer on the history of the
08:57 - processing project so it began in June
08:59 - 2001 Casey Reese and Ben Fry were
09:02 - studying under John Mida at the MIT
09:04 - media lab now maida had created
09:06 - something called designed by numbers and
09:08 - they were inspired by it designed by
09:10 - numbers emphasized Simplicity in
09:12 - creating images and animations with code
09:14 - and Reese and Fry wanted to do something
09:16 - similar they wanted to make an
09:18 - environment that would match the ease of
09:20 - beginner friendly languages like basic
09:22 - and logo in a 2009 rise.org interview
09:26 - fry explains our goal is to emulate
09:29 - Design By Numbers Simplicity and focus
09:31 - but we wanted to exceed the limits of
09:34 - dbn so Design By Numbers could only
09:36 - render 100 by 100 pixels it was all
09:39 - grayscale it only allowed for integer
09:41 - whole numbers so recent fry settled on
09:44 - using the programming language Java to
09:46 - build a new processing environment which
09:49 - would allow for full color higher
09:51 - resolution but because it was Java it
09:53 - could also connect to this giant world
09:55 - of packages and libraries so processing
09:58 - programs could communicate on the
09:59 - network they could interface with
10:01 - hardware and microcontrollers they could
10:02 - render Graphics to a PDF and so much
10:05 - more the name processing actually comes
10:07 - from a journal idea that rys and Fry
10:09 - were considering publishing with the MIT
10:11 - press they wanted to write about
10:13 - computational work and the process
10:16 - behind it the journal never happened but
10:18 - the processing name did stick you might
10:21 - be amused to know that other names that
10:23 - were Tred around I think were seal and
10:25 - bagel I really like the idea of bagel
10:27 - actually so processing 1.0 was released
10:30 - in 2008 and in 2012 the processing
10:33 - Foundation itself a nonprofit was formed
10:36 - with a mission to maintain the software
10:38 - platforms and support people in learning
10:40 - how to program especially those who
10:42 - might not otherwise have access to tools
10:44 - and resources the foundation has
10:47 - expanded its offerings there's python
10:49 - mode for processing created by Jonathan
10:50 - fineberg processing for Android created
10:53 - by Andre cbri and p5js created by Lauren
10:57 - Lee McCarthy if you've watched theod
10:59 - coding train before you've probably seen
11:00 - me use both processing and p5js across
11:04 - countless tutorials and coding
11:05 - challenges with p5js I'm able to link to
11:08 - the code running in the browser right
11:10 - there because it's JavaScript now you
11:12 - might be surprised to know that while
11:14 - Java today seems like the farthest thing
11:17 - away from the web browser in 2001 Java
11:20 - applets were the primary way to share
11:23 - processing sketches on the web so Java
11:25 - applets are no longer supported today
11:27 - but the newest version of processing
11:29 - processing 4 which I am celebrating in
11:31 - this series includes many new features
11:33 - well suited for desktop applications so
11:35 - full Screen Graphics across different
11:37 - screens and projectors connected to
11:39 - thirdparty libraries hardware and more
11:42 - so whether you want to use processing
11:44 - explore JavaScript or python or try your
11:46 - hand at any other language or
11:48 - environment it's my hope that processing
11:51 - for is a place for you to learn and play
11:54 - the concepts the fundamentals the core
11:56 - principles of coding are the same across
11:59 - all of these places Beyond learning a
12:01 - specific language I think what's
12:03 - important about learning to program is
12:05 - learning about how to think about a
12:06 - problem and break it down into parts and
12:09 - solve it and let me tell you when it
12:11 - works it is very very satisfying okay so
12:15 - now it's time to get into this video
12:19 - itself I want to talk to you a bit about
12:20 - how I've structured things how you might
12:23 - watch and move your way through what is
12:25 - a very very long video so ordinarily in
12:28 - the past I've made uh courses or video
12:31 - tutorials or sequences like this broken
12:33 - up into many many many short videos you
12:35 - know 10 to 20 minutes each this is
12:37 - everything all in one it is not meant to
12:41 - be consumed in one sitting I've divided
12:43 - it into different chapters organized
12:46 - with a table of contents I'll include
12:48 - information about that in the video
12:49 - description on my website but hopefully
12:51 - if you're watching this on YouTube you
12:54 - are seeing that as part of the interface
12:56 - the experience of watching it so it's a
12:59 - bunch of lessons all sequenced teaching
13:01 - you the fundamentals of computer science
13:03 - and programming with processing and at
13:05 - the end everything culminates with a
13:07 - mini project that I'll show you how to
13:09 - build that synthesizes all of the
13:11 - concepts from the series while the video
13:14 - is going I will prompt you to take
13:15 - breaks I'll offer exercises it is meant
13:18 - to be watched in order but there's no
13:20 - reason why you couldn't skip around find
13:23 - your place using the time code links
13:24 - maybe you want to skip some things
13:26 - reinforce other things I leave that up
13:29 - to you all of the code that I write
13:31 - everything will be at the
13:35 - codington now what are you going to
13:37 - learn exactly my Approach is probably
13:40 - different than a traditional computer
13:42 - science course certainly there's no
13:43 - tests here I mean this is all
13:45 - self-directed self-learning but the goal
13:47 - here is for you to experiment and play
13:50 - it's okay for you to not understand
13:52 - everything to have those happy accidents
13:54 - to move forwards and backwards and just
13:57 - discover what it is is that you're
13:59 - interested in trying to make without
14:01 - worrying about it too much you will need
14:04 - help there's no way to just learn all
14:06 - this stuff just completely on your own
14:09 - without talking to another human being
14:11 - so maybe you have a support system for
14:12 - yourself maybe you have some friends
14:13 - you're learning with maybe you're taking
14:15 - a class I'm not sure but if you don't I
14:18 - certainly would encourage you to use the
14:19 - comments here or whatever platform
14:20 - you're watching this on but the place
14:22 - for you to get help in terms of the
14:24 - coding train Community is the coding
14:26 - train Discord itself I'll put the URL
14:28 - for how you join and obviously in the
14:30 - video description as well that's it
14:32 - that's all I've got for you before it's
14:34 - time to get started it's time to get
14:35 - started you're going to write your first
14:36 - line of code thank you for watching
14:38 - thank you for being here I can't wait to
14:39 - see what you learn what you make and
14:41 - what you think of this
14:44 - [Music]
14:47 - series okay I am now going to show you
14:50 - how to download processing onto your
14:52 - computer which you will need to do
14:54 - before you start following the coding
14:56 - portions of this video I should also say
14:58 - that I've been recording this whole long
15:01 - video at different times on different
15:03 - days so my outfit and clothes and
15:05 - lighting might change here in there so I
15:07 - apologize for that but hopefully you'll
15:09 - be able to follow it's going to all be
15:11 - pieced together in in the perfect way
15:13 - that lets you just follow it all the way
15:14 - through but the part you're at right now
15:17 - is downloading processing so you will
15:19 - need a computer it can be Windows Mac
15:22 - Linux those are the computers that
15:24 - support processing you're going to want
15:26 - to go to processing.org
15:29 - and there's a lot on the processing
15:31 - website that you can look at I'm going
15:32 - to very specifically cover quite a bit
15:35 - about the uh reference under
15:37 - documentation but you know I certainly
15:39 - would encourage you to go to the
15:40 - tutorials examples books uh learn more
15:42 - about the people etc etc but here right
15:45 - now what I want to look at with you is
15:47 - download so the page should autodetect
15:51 - the version it thinks you should
15:53 - download and it is correct for me I want
15:57 - processing 4.2
15:59 - on Mac OS you will actually probably see
16:01 - me using processing
16:03 - 4.1.2 or 1.3 when I'm doing the coding
16:07 - because I've recorded those already but
16:09 - what you will see is either 4.2 or even
16:12 - a later version of processing depending
16:14 - on when you're watching this I am on Mac
16:17 - OS I am using an Intel it's an older Mac
16:20 - so if you have an M1 or an M2 Mac you'll
16:22 - want to click on the Apple silicone
16:24 - version instead and then also here if
16:27 - it's not autod detecting properly you
16:29 - could go to Windows to grab the windows
16:31 - version Linux and oh there's even a
16:33 - Raspberry Pi version of processing which
16:35 - could be something you want to try
16:37 - someday so I'm just going to click right
16:39 - on here it's finished downloading I'm
16:41 - going to
16:43 - unzip and I have the processing
16:45 - application there so I can actually just
16:47 - double click and run it or maybe on a
16:49 - Mac I might want to go to my
16:51 - applications and actually move it in
16:53 - there and then once it's in there and
16:55 - you can see I have some other versions
16:57 - of processing that I'm keeping there I
16:59 - could double click it and it's asking me
17:01 - to make sure I want to open it which I
17:03 - do and there we go there's processing
17:06 - I'm going to show you very quickly a
17:08 - screen capture of the same thing
17:09 - happening on Windows and also in case
17:12 - you're curious this is what it looks
17:13 - like on Linux and if you have any
17:16 - trouble downloading and running
17:18 - processing there's places you can ask
17:20 - for help the comments here the coding
17:22 - train Discord and the processing
17:24 - official Forum as well all of which I
17:27 - will link in this video reference
17:30 - [Music]
17:34 - materials it's time to start talking
17:38 - about
17:39 - coding any moment now we're going to get
17:42 - to writing code but because this series
17:45 - is about learning to code through the
17:47 - lens of drawing images and animations I
17:50 - need to start first by talking about
17:54 - pixels and a computer Graphics window
17:59 - this is a rather poor drawing of any
18:01 - window that you might open on your
18:03 - computer maybe it's a browser some game
18:06 - and in fact processing the programs you
18:08 - write in processing the code will
18:10 - generate a window like this that you get
18:13 - to draw into so the first thing that you
18:15 - need to think about is the dimensions of
18:18 - this window and what do I even mean by
18:20 - that let's start by drawing something
18:22 - that looks like
18:24 - this maybe one day in your life many
18:27 - years ago maybe just yesterday who knows
18:30 - you took some kind of math course where
18:33 - you talked about a cartisian
18:37 - plane named for the mathematician Renee
18:40 - deart a cartisian plane is a flat
18:43 - two-dimensional space with two axes an X
18:46 - axis and a y AIS the center of the plane
18:50 - is known as the origin or the point0
18:54 - comma 0 an X of zero and a y of zero
18:59 - if I were to Mark any given point in
19:01 - this plane like this one I could specify
19:05 - the location of that Mark by its x
19:08 - coordinate and its
19:10 - y-coordinate so this is actually the
19:13 - point five comma 6 0 1 2 3 4 5 0 1 2 3 4
19:21 - 5 6 the x is five the Y is six so
19:26 - there's units of measurements there's a
19:28 - space that we're defining but the key
19:30 - thing to note here is there are no quote
19:32 - unquote real world measurements instead
19:36 - the measurements are in pixels so the
19:39 - question for you to ask yourself right
19:41 - now is if I were to draw a dot in the
19:45 - center of this window what is the x
19:48 - coordinate and the y coordinate of that
19:50 - dot you might be thinking to yourself oh
19:53 - I know where you're going with this look
19:55 - how in the center of this the origin is
19:57 - 0 and z and you just just drew that dot
19:59 - in the center that must be 0 0 and in
20:01 - some systems it could be but a standard
20:04 - rectangular computer Graphics canvas one
20:07 - that is in two Dimensions the origin is
20:09 - typically in the top
20:11 - left that's where 0 0 is other thing
20:14 - that's a little bit odd about a computer
20:17 - Graphics window is that here in the
20:21 - cartisian plane I could easily draw a
20:23 - point right over here which would be
20:25 - something
20:26 - like -6 for the X positive one for the Y
20:31 - they're negative spaces along the X and
20:34 - Y AIS relative to the origin point in a
20:37 - computer Graphics window while the xaxis
20:41 - is the horizontal
20:43 - axis and the vertical axis is the Y AIS
20:47 - positive numbers Point
20:50 - down it is essentially flipped from the
20:53 - cartisian plane and that means there are
20:56 - no negative pixels within the canvas
20:59 - itself now there will be a time where
21:01 - you want to expand quite a bit beyond
21:04 - this there are 3D renderers there are
21:06 - all sorts of ways of transforming the
21:08 - space that you're drawing into but at
21:10 - its core when you first begin there is a
21:13 - canvas where the units of measurement
21:15 - are pixels z0 is the top left we count
21:19 - to the right for x and count down for y
21:22 - so I return again to the question
21:26 - of what is the X and Y coordinate of
21:30 - this particular pixel almost all the way
21:33 - there to answering this question we need
21:35 - one more very important piece of
21:37 - information which is what is the width
21:40 - and height of this particular window
21:43 - there is no answer to that it's whatever
21:45 - you happen to Define it to be most of
21:47 - the processing examples if you just open
21:49 - them up you'll see that they come with a
21:52 - predetermined width of 640 and a
21:54 - predetermined height of
21:56 - 360 which which would mean if this is in
21:59 - the middle the X location is half of 640
22:04 - the Y location is half of 360 let's all
22:07 - say it together now the XY location for
22:10 - that point is
22:13 - 320 comma
22:17 - 180 I don't know why I drew the line
22:19 - like that but there it is guess what
22:22 - it's time I think we can write the very
22:25 - first line of code that I'm going to
22:27 - write in this entire series and maybe
22:30 - just maybe this might be the very first
22:32 - line of code that you write in your
22:34 - entire life oh this is a momentous
22:35 - occasion let's all just soak it in and
22:38 - savor it for a moment assuming you've
22:40 - been following this whole series so far
22:42 - you've already downloaded processing as
22:44 - of the time of this recording I'm using
22:46 - the most recent version of processing 4
22:50 - it's showing me a wonderful welcome
22:51 - message where I could click through and
22:52 - look at some different examples which I
22:54 - would encourage you to do but I am going
22:56 - to uncheck show this message on Startup
22:59 - and click get started just going to move
23:01 - my window around for a little bit
23:03 - there's quite a bit more that I should
23:05 - probably say about the processing
23:07 - environment itself how to save your code
23:09 - and organize your files you can change
23:11 - the colors and the font and all of that
23:13 - stuff I'll try to come back to that at
23:15 - some point in this series hi Dan from
23:17 - the future here sorry to interrupt you
23:19 - might be wondering why your processing
23:22 - window is a lovely blue and mine is this
23:25 - glorious pink sunset color scheme well
23:28 - there happens to be a theme selector
23:30 - built into processing I forgot to show
23:31 - it to you it's under Tools theme
23:33 - selector and there you can change to
23:35 - whatever color scheme strikes your fancy
23:38 - but I don't even want to worry about
23:39 - that right now I just want to write that
23:41 - first line of
23:43 - code and there it is size open
23:47 - parentheses 640 comma 360 Clos
23:51 - parentheses semicolon my program is
23:55 - called needed tapioca
23:58 - to run the code all I have to do is
24:01 - press this play button here and there we
24:04 - have it a window of size 640 by 360 just
24:10 - to see that this is really working what
24:13 - happens if I were to change this to 960
24:16 - now I have a much taller window I should
24:19 - also note just right now I don't know
24:21 - why I'm showing this you now it should
24:22 - come back to it later but instead of
24:24 - writing size I could just write full
24:26 - screen and run it again and whoa now I
24:30 - have a full screen processing window but
24:32 - that's a bit of an aside now if you're
24:34 - wondering how the window just magically
24:36 - appeared there I'm on a Mac so I can hit
24:38 - command r as a shortcut to run the
24:40 - sketch I kind of do that just
24:42 - intuitively having done this for 20
24:44 - years I'll be doing that a lot
24:45 - throughout this series rather than
24:46 - clicking the play button if you're on
24:48 - Windows it's controlr and then if you're
24:51 - on Linux I don't know you tell me in the
24:52 - comments what's your
24:54 - shortcut back to this first line of code
24:57 - let's unpack it a little
25:01 - bit there are lots of different kinds of
25:04 - lines of code that I'll be showing you
25:06 - how to write but this kind of line of
25:09 - code with this format is going to keep
25:11 - us happy for a very long time this is
25:13 - what is known as a function call for
25:16 - right now let's put that word function
25:17 - aside and just think of it as a command
25:20 - what is the command the command is
25:24 - size I hereby command you processing to
25:28 - create a window of size size what size
25:31 - what I'm waiting for you to finish that
25:32 - command many commands need to be
25:35 - modified or specified with arguments
25:38 - it's as if I gave you the command to
25:39 - walk I could tell you to walk fast or
25:42 - walk 10 steps or walk in the Eastern
25:44 - Direction here the arguments are the
25:46 - answers to the questions that the
25:48 - computer needs in order to be able to
25:51 - execute this command you're telling me
25:52 - to make a window but I don't know what
25:54 - the width and height is these are the
25:57 - arguments
25:59 - also sometimes called parameters and
26:01 - there's a kind of distinction between
26:03 - arguments and parameters but I'll get to
26:05 - that another time so for this first part
26:08 - of you beginning to learn to code this
26:10 - is all you need to know every line of
26:12 - code that you write for now will be a
26:15 - command or a function the name of that
26:18 - function so I'm just going to say
26:20 - name followed by parentheses open
26:24 - parentheses close parenthesis ending
26:27 - with the
26:29 - semicolon because processing as I
26:31 - mentioned earlier is based on the Java
26:34 - language you really are writing Java
26:36 - code with Java syntax the semicolon and
26:39 - I drew that in a weird way but the
26:41 - semicolon indicates end of line
26:43 - programming languages have a variety of
26:45 - different syntaxes some of them require
26:47 - semicolons some of them don't that's for
26:50 - you to explore As you move past this
26:52 - video series for now every line of code
26:55 - must end with a semicolon and processing
26:57 - will give you an error if you forget it
26:59 - then you optionally need the arguments
27:02 - remember when I showed you that full
27:04 - screen command it didn't need any
27:06 - arguments because full screen just means
27:07 - go full screen I don't care I don't need
27:10 - a size I'll just do whatever the size
27:11 - the screen is but here I need to have
27:14 - some number of arguments zero or more
27:19 - arguments separated by commas what are
27:22 - those Arguments for now again they're
27:25 - mostly going to be numbers
27:28 - but as you will soon see there are other
27:31 - kinds of things that can be arguments to
27:33 - a function to a command so here's a
27:36 - question for you now this is kind of fun
27:38 - because we can sort of play the creators
27:40 - and designers of processing we are
27:43 - inventing processing we've already
27:45 - invented the idea of the size command
27:47 - let's say I want to draw this point now
27:49 - in the center of the window what would
27:52 - you make the name of that command and
27:55 - the arguments for that point think about
27:57 - about
28:01 - it how about point and then I want the
28:06 - center which is 320
28:09 - 180 let's run that again do you see it
28:14 - let's look in there there's that point I
28:17 - have now drawn a single point at the
28:20 - center of the window at pixel x 320
28:23 - pixel y 180 guess what what if I wanted
28:26 - to draw a line instead of a point well I
28:28 - could draw a line with the command line
28:31 - what do I need to draw a line let's
28:33 - think about
28:34 - it I need another point so maybe I need
28:37 - to draw a line I need to have two pairs
28:41 - of
28:42 - XY X1 y1 X2
28:48 - Y2 that's the Syntax for drawing a line
28:52 - now where is that point on the
28:54 - Whiteboard let's just estimate something
28:56 - interesting like
28:59 - 520 100 look at that beautiful line so
29:03 - you might be asking yourself a question
29:06 - which is why is the line black and why
29:10 - is the window itself gray well those are
29:12 - default colors and certainly if you're a
29:15 - designer or if you're anyone really
29:17 - watching this you probably want to know
29:19 - how can I change the color I'm going to
29:21 - get to that but before I get to that
29:23 - let's just sit here for a moment and
29:25 - think about how we now learned the
29:29 - commands
29:31 - size point and line there are a lot more
29:35 - of these for example if you want to draw
29:38 - a square there is the command Square
29:42 - there is the command Circle there's a
29:44 - command for rectangle for ellipse for
29:46 - triangle oh we can make custom shapes
29:49 - like different kinds of polygons I will
29:51 - be covering more of these and I'm
29:53 - constantly going to go back and look at
29:54 - different shapes and I should probably
29:56 - talk about Arc at some point which is a
29:57 - way of drawing part of a circle but the
30:00 - thing is right you're here learning to
30:03 - code and I hope you're enjoying this and
30:05 - learning something and maybe I'm doing a
30:07 - you know halfway decent job of making
30:09 - this video but the real skill the real
30:11 - thing that you need to practice is not
30:13 - listening to somebody else tell you how
30:15 - to do it but kind of trial and erroring
30:18 - your way through it and reading the
30:21 - documentation which covers all the ins
30:23 - and outs of all of these functions CU
30:25 - there are a lot of them and coding is
30:27 - not about memorizing them or just
30:28 - knowing how to do it it's about figuring
30:30 - out how to look things up and trying it
30:32 - yourself so let's look at
30:37 - that one wonderful thing about
30:40 - processing is I can highlight any name
30:43 - of a function rightclick or control
30:46 - click and go to find in reference it's
30:49 - going to take me directly to the
30:52 - reference page on the processing website
30:54 - that explains this code there's a
30:56 - wonderful paragraph description there
30:58 - are several examples that show the
31:00 - function being used and here you see the
31:04 - syntax describe what is the name of the
31:07 - function line and what are the expected
31:09 - arguments now functions of the same name
31:12 - like line can take variable amounts of
31:14 - arguments and this is something that
31:16 - we'll see right now we're not drawing
31:18 - with a 3D renderer but a line can be
31:21 - drawn in a 3D space in which case it
31:24 - needs an x a y and a z something I'll
31:26 - come back to in some other video some
31:28 - other time but both of those are covered
31:30 - here once you see that syntax it's
31:32 - important to look under the parameters
31:34 - again parameters being another word for
31:36 - arguments X1 being the x coordinate of
31:40 - the first point and importantly there
31:42 - notice that word float that's in
31:44 - parentheses that might be a very strange
31:46 - word to you it's actually something
31:48 - that's going to become quite important a
31:50 - little bit down the line I don't want to
31:51 - get into all the details about what a
31:53 - float is right now but that is a term
31:55 - for number oh also point out that
31:58 - functions can have a return type we'll
32:00 - be coming back to that later and then
32:02 - this is nice to see like related
32:04 - functions that I'm not using right now
32:06 - but for example stroke weight is a
32:08 - function that allows you to vary the
32:10 - width of the line is it a thicker line
32:12 - or a thinner line um and you could look
32:14 - into that yourself let's click back to
32:17 - the reference
32:18 - homepage and we can now see this is all
32:23 - of the functions that are available in
32:25 - processing see what I mean there's a lot
32:28 - oh look size is right down there there's
32:30 - one we know I could look for one by
32:33 - typing into the filter but right now
32:36 - what we are covering are shapes so I'm
32:39 - going to go here under shape and
32:42 - specifically 2D Primitives there are
32:45 - lots of different ways to draw in
32:48 - processing but if you're just beginning
32:51 - I recommend that you start only with
32:53 - these 2D Primitives Arc Circle ellipse
32:56 - line point quad rect square triangle so
32:59 - let's take one that we haven't tried
33:01 - before how about
33:04 - Circle first thing I can do is I could
33:07 - just copy this code right here and paste
33:09 - it into
33:11 - processing there's my circle now
33:14 - certainly I want to scroll down and see
33:16 - what are the arguments and what do they
33:18 - mean but I could also just play around
33:20 - with the numbers like what if I change
33:21 - 220 to 100 the circle's smaller so that
33:25 - must have to do with the size of the
33:27 - Circle what if I change 224 to 500 the
33:31 - circle is further to the right that must
33:33 - be the X location of the circle and in
33:36 - fact if I scroll down we can see the
33:39 - circle function or as I'm referring to
33:41 - it now command takes three arguments an
33:44 - X location A Y location and this is kind
33:47 - of a technical coding term here extent
33:50 - extent is a generic term for size but as
33:54 - you're going to see with the circle if
33:56 - this is my circle at this particular XY
33:59 - location a way of measuring the size of
34:02 - the circle it could be radius radius is
34:05 - the distance from the center to the edge
34:08 - of the circle but processing is actually
34:12 - using the diameter of the circle so the
34:15 - extent is how wide is the circle what is
34:18 - the or you know a circle is uniform so
34:21 - the width and the height are the same
34:22 - essentially the arguments for Circle
34:25 - are X
34:27 - Y and
34:30 - diameter let's go back to 2D Primitives
34:34 - and let's try Square let's take this
34:37 - example Square copy it into our code run
34:40 - it and there's that square now
34:42 - interestingly let's think about this for
34:44 - a second just imagine this window is 640
34:47 - by 360 the circle is at X500 y
34:53 - 184 let's do something to make things a
34:56 - bit more
34:57 - uniform let's put them both at 180 and
35:01 - let's have them both be the same size
35:04 - only the circle is at pixel 500 and the
35:08 - square is at pixel 100 what I'm
35:12 - expecting to see this if this is
35:14 - approximately xxel 100 and this is
35:18 - approximately xxel 500 and this is 180
35:21 - we know the
35:23 - circle appeared here so I would expect
35:28 - to see the square here let's go see what
35:31 - we
35:32 - get huh kind of doesn't look like what I
35:35 - just drew
35:38 - instead it looks like this well every
35:41 - shape has a reference point for a circle
35:45 - the reference point is the center of the
35:48 - circle for a square the reference point
35:52 - is the top left of the square if I had
35:55 - just read the document mentation page it
35:57 - would explain that by default the first
36:00 - two parameters set the location of the
36:02 - upper left corner the third sets the
36:05 - width and height the way these
36:07 - parameters are interpreted however may
36:10 - be changed with the wct mode function
36:14 - scrolling down we can see yes the Syntax
36:17 - for the square is X comma y comma extent
36:20 - and related wct for rectangle and wrect
36:25 - mode there's a lot of information about
36:27 - all the possible ways you could draw a
36:29 - square or rectangle but I just want to
36:32 - talk about Corner versus Center and the
36:36 - default mode that we just drew is Corner
36:39 - because the reference point is the top
36:42 - left corner but if I want the reference
36:44 - point to be the center all I need to do
36:49 - is change the wct mode to rect mode
36:52 - Center I want to put this line of code
36:54 - before I draw the square and the order
36:57 - is really important I'm going to get
36:58 - that to that in a
36:59 - moment and now we can see I have my
37:02 - Square centered at 100 comma 180 and my
37:06 - circle centered at 500 comma 180 just
37:09 - for fun let's put that line between
37:12 - those two connecting them 100 comma 180
37:16 - to 500 comma 180 and there we go look at
37:20 - this drawing I made if you're following
37:22 - along I think this might be the first
37:24 - drawing you've ever made with code
37:25 - congratulations it's very exciting let
37:28 - me show you an important detail I'm
37:31 - going to take this line of code which
37:34 - draws the line and I'm going to just
37:37 - change it and place it after drawing the
37:41 - square think about what is the
37:43 - difference going to
37:44 - be the line is now on top did you catch
37:48 - that processing is following the lines
37:51 - of code you are writing in order and
37:54 - layering the shapes on top of you each
37:56 - other now there is such a thing as
37:58 - transparency and color and I'm going to
38:01 - get into all of that but that's a very
38:03 - important detail for you to explore
38:05 - right now if I want to design a
38:08 - particular pattern what needs to come
38:10 - first and What needs to come second what
38:12 - needs to come last in order for me to
38:15 - execute that particular pattern so this
38:17 - is a great stopping point for now my
38:20 - assignment to you this video is going to
38:22 - keep going so you could just keep
38:24 - watching if you want but you could pause
38:26 - right now now and create your own design
38:29 - maybe make a self-portrait a little
38:31 - alien some kind of spaceship some kind
38:34 - of abstract design a flower perhaps can
38:37 - you design something only with lines
38:41 - points circles and squares or maybe
38:45 - you're feeling a little ambitious do you
38:47 - want to try one of these other shapes
38:52 - that is listed under 2D Primitives a
38:54 - rectangle for example is just like the
38:57 - square only we have an extra argument
38:59 - instead of one argument for the width
39:02 - and height we have an argument for the
39:04 - width and the height separately a
39:06 - triangle is three points a quad is four
39:10 - points probably the most difficult one
39:12 - on here is Arc so I'll come back to that
39:15 - at a separate point to look at it
39:17 - specifically but see what you can
39:19 - [Music]
39:23 - create here's my version of the
39:25 - assignment a character named z that I
39:26 - created for the learning processing book
39:28 - which this video series mostly matches
39:31 - looking at this I realized there's a
39:32 - couple things that I really should
39:33 - mention here number one is you're going
39:35 - to want to save your code so here is the
39:38 - code that I wrote while I was going
39:40 - through this tutorial if I were to go to
39:42 - file save it's going to pop open with a
39:46 - prompt for me to save my sketch every
39:49 - sketch has a name and is saved into a
39:52 - folder on your computer so I'm going to
39:55 - call this coding train example one maybe
40:00 - I want to think of a better naming
40:01 - convention but for now I'm going to call
40:03 - it that and I'm going to hit save if I
40:06 - go to file Sketchbook you can now see
40:11 - processing has its own window that's
40:13 - showing me all the sketches I've saved
40:15 - to my Sketchbook Zoo which I already had
40:18 - pre-loaded in there and coding train
40:20 - example one if I were to click on it and
40:23 - say show folder it's going to take me to
40:25 - the SketchBook folder itself there
40:27 - you're going to see a lot of extra stuff
40:30 - because things like different libraries
40:32 - you might use we'll get into that later
40:34 - examples that are there there's modes
40:36 - there's tools all sorts of stuff that we
40:38 - don't need to worry about right now but
40:40 - if I go and look in the zoo directory or
40:44 - the coding train example one you'll see
40:46 - a file with the pde extension that is a
40:50 - raw text file with your code stored in
40:53 - it how you want to manage more broadly
40:55 - the file system on your computer
40:56 - computer that's for you to sort out
40:58 - easiest way to work with processing is
41:00 - just to use the default sketch
41:06 - folder and you'll also notice something
41:09 - else in here body head eyes legs that
41:14 - doesn't look like code it doesn't follow
41:16 - this syntax that we've described and in
41:19 - fact it's kind of grade out well these
41:22 - slashes at the beginning of this line of
41:25 - code that says head indicate to
41:28 - processing that this is a code comment a
41:31 - comment is a note to self something
41:33 - you're writing in there to annotate what
41:36 - you've been working on that's for
41:39 - processing to ignore as it's executing
41:41 - the code itself this is incredibly
41:44 - useful and I highly encourage you to
41:46 - overdo it right now and put comments all
41:48 - throughout your code it'll give you a
41:50 - nice habit for later this is really good
41:53 - if you're teaching because you can put
41:54 - explanations in there but it's even good
41:56 - if you're the only person ever working
41:58 - on this piece of code because you might
42:00 - take a break from it you might come back
42:02 - to it you might say like oh to do let's
42:06 - add some hair so I can add a little note
42:09 - to self of something I want to do later
42:11 - code comments can be anywhere you want
42:13 - with anything in there they've just got
42:15 - to be all on one line
42:17 - because if I try to continue that
42:20 - comment onto the next line without a
42:22 - slash slash and run the sketch it's
42:25 - giving me syntax
42:30 - error processing has kind of got it
42:32 - wrong this isn't a missing semicolon
42:35 - this is like you forgot to add the slash
42:37 - slash for the comment so let me put that
42:39 - in let's take out the semicolon here and
42:44 - run it ah now we really are missing a
42:47 - semicolon weirdly it highlighted the
42:50 - line
42:51 - below because even though the semicolon
42:54 - is missing from here it discovered it as
42:56 - it got to the next line and there was no
42:58 - semicolon before telling it to stop so
43:00 - this is what I want to emphasize to you
43:02 - when you have a mistake in your code an
43:06 - error message will pop up Below in the
43:08 - console but very often that error
43:11 - message will be misleading because it's
43:13 - just doing its best job trying to guess
43:16 - what your intentions were processing is
43:19 - actually pretty good and has a bunch of
43:20 - friendly error messages in it I'd be
43:22 - curious so you can add into the comments
43:24 - of this video of like what error
43:25 - messages are you finding that I haven't
43:27 - covered this is probably also a good
43:29 - time for me to remind you that you can
43:31 - join the coding train Discord where you
43:33 - can post Forum messages to ask for help
43:35 - and of course there's also an official
43:37 - processing Forum where you can also ask
43:40 - your questions as well let's try to see
43:41 - if we can get one more error let's leave
43:44 - out the diameter parameter for Circle
43:47 - run the code and here we go this is a
43:51 - great error message the method Circle
43:53 - float float float in the type P applet
43:55 - oh my goodness what's paet well pet is
43:58 - sort of a fancy name for your sketch as
44:00 - a whole we could get into why that is
44:02 - but that's going to send us off on way
44:04 - too many tensions is not applicable for
44:06 - the arguments INT in wait but I put in
44:09 - two numbers that should be float float
44:11 - oh data types we're coming we're going
44:13 - to get to data types what's an integer
44:15 - versus a floating Point number but we
44:17 - can see here that this error message is
44:19 - telling us we're missing a particular
44:22 - argument we're missing that last
44:24 - argument for the diameter of the circle
44:27 - all right I fixed the errors took out
44:29 - those extra comments there Zoo take some
44:32 - time to try your own and when I come
44:34 - back I'm going to look at adding color
44:37 - to this
44:38 - [Music]
44:43 - sketch okay how did that go how'd your
44:45 - drawing turn out I'd really like to know
44:47 - in the video description I I'll add some
44:49 - information about how you can share that
44:50 - with me if uh if you feel so inclined
44:53 - but now it's time to make our world a
44:56 - bit more colorful if you've watched any
44:58 - of my videos before you know I love a
44:59 - good rainbow so now is the time to make
45:02 - everything rainbow themed if we can so
45:05 - before we were looking at the Syntax for
45:07 - issuing a command or function call and I
45:10 - made a list of some of the 2D primitive
45:12 - shapes you could draw let me now make a
45:14 - quick list of the commands that you
45:16 - could use to specify
45:19 - colors
45:21 - background stroke fill so here are three
45:25 - to start background stroke fill there
45:27 - are more but these are the three sort of
45:29 - core basic ones and each one sets a
45:31 - color for a different aspect of what
45:33 - we're drawing in the processing window
45:34 - and I I'll be getting to the details of
45:36 - that in a moment but all of them require
45:39 - arguments that specify what color it is
45:43 - we want to set so how do we Define color
45:46 - as an argument can it be a number yes
45:50 - the simplest way to start with color is
45:53 - to Define color as a shape of gray or
45:58 - grayscale a grayscale color value is
46:01 - defined as a number with a range from 0
46:04 - to 255 and I'll get into why that's the
46:07 - range in a little
46:09 - bit zero is the value for
46:15 - black 255 is the value for
46:19 - White and everything in between is some
46:22 - shade of gray so maybe 127 is a medium
46:26 - gray it's useful I think to think of
46:28 - this as a dimable
46:30 - light if you turn the light all the way
46:33 - off total darkness all the way up bright
46:37 - white light for any of these functions
46:40 - if I were to put just a single number
46:44 - inside the parentheses as its argument
46:47 - it's going to set the color to its
46:50 - corresponding grayscale value let's look
46:52 - at that in practice circling back to
46:55 - this example that I've been building
46:57 - let's add the function background I'm
47:00 - going to put it right after size again
47:02 - I'll come back to the order in a
47:04 - moment a background of zero fills the
47:08 - entire canvas with black 255 fills it
47:13 - with white so background is the function
47:16 - to place a color over the entire canvas
47:19 - of the processing window stroke is a
47:23 - function that sets the outline color of
47:26 - any shape so in the case of a
47:30 - rectangle stroke sets the outline
47:35 - fill is a function that sets the
47:38 - interior color now let's try to change
47:41 - the color of the circle so I can give it
47:44 - a stroke of 127 let's give it some gray
47:48 - value and maybe a fill of zero let's see
47:52 - what that looks like I could zoom way in
47:55 - on that Circle ir and I could see that
47:56 - there is a gray outline there but this
47:59 - is probably a useful moment for me to
48:02 - let you know about an important function
48:04 - to modify the thickness of the outline
48:07 - of shapes or the thickness of a line
48:09 - color and that is stroke
48:11 - [Music]
48:14 - weight I'm going to write it down here
48:17 - because it's technically not a function
48:19 - that assigns color but it is quite tied
48:21 - to the color
48:23 - functions by default the thickness of
48:27 - any line that you draw in processing is
48:30 - one pixel so if you want it to be more
48:33 - than one pixel that's where stroke
48:35 - weight comes
48:37 - in so it's probably more visible to you
48:39 - now the fact that the line is gray and
48:41 - it's a bit thicker but wait a second
48:44 - what's going on the rectangle also has a
48:47 - fill that's black and an gray outline
48:50 - that's thick and the line is thick and
48:51 - gray order of your code is very
48:54 - important anytime you call any of these
48:58 - functions it's as if you know processing
49:01 - picked up the pen the pen with a certain
49:04 - color I mean this one's purple and of a
49:06 - certain thickness it's going to keep
49:07 - drawing with that forever until you tell
49:10 - it to switch to something else for
49:12 - example if I were to take all of these
49:14 - lines of code and now place them above
49:18 - the square you can see that the square
49:22 - is black with a gray outline and the
49:25 - line that I'm drawing after the square
49:27 - is also thick and gray but the circle
49:29 - has a thin black outline and a white
49:32 - interior that's because I drew the
49:35 - circle without specifying so it used the
49:37 - defaults and then picked up that new pen
49:40 - for everything that came after it so if
49:42 - I want the circle and the square to look
49:45 - different to have their own stroke and
49:48 - fill I just need to add the right
49:50 - function calls before each of them make
49:53 - a stroke weight of eight
49:56 - a stroke of zero and a fill of
50:00 - 51 let's make that fill 175 so we can
50:03 - see it more clearly now we can really
50:06 - see the distinct stroke and fill of each
50:09 - one of those shapes and I can also be
50:12 - specific for the line I'm going to say a
50:14 - stroke weight of one and a stroke of
50:17 - zero there we go this is all well and
50:20 - good but you're not here just to make
50:23 - grayscale designs although there's
50:24 - something kind of nice about that you're
50:26 - here for the full rainbow of Glorious
50:29 - wonderful
50:32 - [Music]
50:35 - color as I will get to there are plenty
50:38 - of ways to specify the full range of
50:42 - possibilities of color in processing but
50:46 - the core the foundational the basic
50:48 - starting point for you and me right now
50:50 - at this moment is referred to as
50:54 - RGB
50:56 - color unlike gray scale which just has
51:00 - one value RGB color is indicated by
51:05 - three numbers 1 2 3 RGB or red green
51:15 - blue I talked about the cartisian plane
51:17 - as something you might have done while
51:19 - back or currently in school something
51:22 - you might have also studied or tried at
51:24 - some point maybe when you were really
51:25 - little is like finger paints and they're
51:27 - primary colors and you can mix them and
51:29 - you can get different colors out of
51:31 - mixing the primary colors it's been a
51:33 - while since I used actual finger paints
51:35 - but this is all operating under the same
51:38 - principle the idea is that with a some
51:41 - amount of red some amount of green and
51:43 - some amount of blue I can create any
51:46 - color of the rainbow but the key concept
51:49 - here is this is not like mixing paint
51:51 - this is like mixing light as if I had a
51:54 - red FL flashlight a green flashlight and
51:57 - a blue flashlight and was turning them
51:59 - up and down and on and off and Shining
52:01 - them on various surfaces each one has a
52:04 - range from zero to 255 and again put a
52:09 - pin in it got to come back to why is
52:11 - this the range again and how do I change
52:13 - that if I don't like that range it's
52:17 - coming so let's think about this if I
52:19 - wanted pure red I would put the red dial
52:24 - all the way up to 2 55 and the green
52:27 - dial down to zero and the blue dial down
52:29 - to zero in practice that means I'm going
52:32 - to give three arguments to the function
52:35 - background or stroke or fill the first
52:38 - one being 255 second being zero and the
52:41 - third being
52:42 - zero look at that red background now
52:46 - what's your favorite color mine is
52:48 - purple so I think I could get a purple
52:51 - by adding some more blue let's give it
52:53 - like 150 and a little more than halfway
52:55 - way a
52:56 - blue that's a lovely purplish tint there
53:00 - I'm going to make up some numbers to put
53:01 - in the various strokes and fills so we
53:03 - can see that as
53:07 - well look at my design actually I'm
53:10 - quite pleased with that guess that's
53:12 - more of a pink than a purple but close
53:14 - enough I want to talk about a few more
53:16 - details related to color the range how I
53:19 - would adjust the range but before I do
53:21 - that this is probably a good time for
53:22 - you to just pause and see if you can add
53:24 - different RGB colors to the design you
53:26 - made previously take your time I'll
53:28 - still be here actually I'm just going to
53:29 - keep going but you'll have to pause the
53:36 - video all right how did that go if you
53:38 - have questions again leave them in the
53:40 - comments or the various places that
53:42 - you'll see in the video description
53:43 - where you can get additional
53:48 - help before I move on let's unpack this
53:52 - a little bit more I'm imagining that
53:54 - this seems kind of odd to you like why
53:57 - 255 well one thing you might have to
54:00 - realize here is if we're counting all of
54:03 - the possible numbers from 0 to 255 the
54:06 - total possible amount of numbers is
54:08 - actually
54:10 - 256 I know this is like what what are
54:12 - you talking about right now this is
54:14 - actually really important because this
54:15 - is going to come back again and again in
54:17 - various things we do with code think
54:19 - about it if the range of numbers is
54:22 - between 0o and four and I'm talking
54:24 - about whole number so obviously there's
54:26 - the distinction there there are five
54:28 - whole numbers 0 1 2 3 4 that's five
54:32 - numbers
54:34 - 256 might seem like an odd number but
54:36 - it's actually kind of well it's an even
54:38 - number but it might seem like a strange
54:39 - choice but it's a pretty important
54:42 - number let me show you why let's start
54:44 - with the number two let's double that
54:47 - number and make it four let's keep going
54:50 - then we've got8 then we've got 16 32 64
54:55 - 128 two oh 256 it is a power of two this
55:00 - might be something you're unfamiliar
55:02 - with depending where you are in your
55:03 - life's journey around mathematics but a
55:06 - power of two is any number that you can
55:09 - get starting with two and multiplying
55:12 - Itself by two and two again and two
55:14 - again and two again this is
55:16 - actually two to the eighth power why is
55:20 - that number two important now you might
55:22 - be familiar with the idea of binary
55:25 - numbers this code that we're writing is
55:29 - all this kind of highlevel language
55:31 - written with some words in English some
55:34 - strange syntax but it's all a mechanism
55:37 - for us to be able to write the
55:40 - instructions in a language that feels
55:42 - somewhat more humanlike than machine
55:45 - language because the language of
55:47 - computers is just zeros and
55:51 - ones a single bit one little switch
55:55 - onoff switch inside the brain of the
55:58 - computer is a number zero or one the sun
56:02 - is coming in by the way did you notice
56:04 - that there are two possibilities so if I
56:07 - were to have two
56:10 - bits I have four possible ways I can
56:14 - configure two zeros or ones if I have
56:18 - three bits I have eight possible ways if
56:21 - I have four bits I have 16 possible ways
56:23 - well it turns out
56:25 - that we are going to store color values
56:29 - in eight bits of the computer or one
56:32 - bite there's one bite in memory of the
56:35 - computer in its brain where it can
56:37 - describe the red where it can describe
56:38 - the green and where it can describe the
56:40 - blue so this is why you have that
56:48 - range we are so far removed from the
56:51 - lowlevel machine language in processing
56:54 - that this is something that we can alter
56:57 - if we don't want to think about it this
56:58 - way if we prefer to think of the red
57:02 - value as a number between zero or 100 we
57:05 - can like 0 to 100% we can in fact we
57:09 - don't even have to only think of color
57:12 - as RGB there are other ways to Define
57:15 - color another system for defining color
57:19 - is known as Hue saturation brightness
57:23 - this is a bit Beyond where I want to get
57:26 - right now I will put in the video
57:28 - description a link to the online book
57:31 - programming Design Systems by run Madson
57:33 - which has a wonderful chapter about
57:35 - color goes into HSB or sometimes called
57:38 - HSV color in more detail but for our
57:41 - purposes the function that I really want
57:44 - to make sure to add here where you can
57:47 - alter and customize how it is that you
57:50 - define color is called color mode
57:55 - and I realize I forgot two other
57:57 - functions that I need to add to this
57:58 - list but let's go back and look at color
58:00 - mode for a second color mode changes the
58:03 - way processing interprets color data
58:07 - again I don't want to get too far into
58:09 - this this is something that I think will
58:11 - prove more useful later and um a lot of
58:14 - the examples here are using Code
58:16 - Concepts that I haven't covered yet but
58:18 - if you're really interested in how color
58:20 - is defined and can be customized I would
58:22 - certainly encourage you to read through
58:23 - this in more detail here's a really nice
58:26 - uh version of this uh that I think we
58:28 - could use right now just to see how this
58:30 - works if I were to call color mode and
58:34 - set it to RGB
58:38 - 1.0 this means that the range of color
58:43 - is now no longer between 0 and 255 but
58:47 - between zero and one so 0.5 or 1/2
58:50 - essentially would be like 50% red for
58:54 - example to make this a little more
58:55 - understandable let me adjust this a
58:57 - little bit and change it to 100 what
58:59 - this means is the range is now between
59:03 - zero and 100 for every color value of
59:06 - course it's doing weird things because
59:08 - I've written numbers that are bigger
59:09 - than 100 so it's going to just like
59:12 - consider those as maxed out but you can
59:14 - see that already are the colors changed
59:16 - just for background I can change this to
59:18 - like 100 0 50 and this would be full red
59:23 - no green and half
59:29 - blue okay so let's put color mode aside
59:33 - now there's a really important thing
59:35 - that I've neglected to mention and let's
59:38 - get to that right now transparency
59:41 - otherwise known as Alpha you could also
59:43 - think of it as opacity something being
59:46 - fully opaque means you can't see through
59:48 - it something being fully transparent
59:50 - means you can see completely through it
59:52 - almost as if it isn't there at all in
59:54 - fact fact I can essentially modify this
59:57 - idea of RGB color and call it
60:02 - RGB a color for red green blue
60:07 - Alpha so this is adding yet another bite
60:10 - to the way we Define a particular color
60:13 - Alpha also having a range between 0 and
60:17 - 255 Again by default reason why I
60:20 - mentioned color mode is I actually often
60:22 - like to change this to between Z and 100
60:25 - cuz it's useful to think of transparency
60:27 - for me between 0% and 100% let's see
60:31 - what this becomes in practice now it
60:33 - doesn't make sense at the moment for the
60:35 - background to have any transparency this
60:37 - is something we could come to again
60:38 - later but what if I want the square for
60:43 - example to be slightly transparent The
60:46 - Fill of this square is currently a nice
60:48 - yellow full red full green no blue let's
60:52 - add a fourth argument for transparency
60:56 - and let's give that value 150 remember
61:00 - the full range is between 0 and 255 so
61:03 - that's just a little bit transparent hm
61:06 - it looks kind of orange now why is that
61:09 - well it's mixed essentially with the
61:11 - pink that's behind it to make this a
61:13 - little bit more clear let me remove this
61:16 - line I'm going to move that square all
61:17 - the way over to pixel 400 and let's make
61:20 - the circle a little bit bigger as well
61:23 - look at that we can now see how the
61:26 - square is transparent it's blending with
61:30 - whatever color is behind it and again to
61:32 - be clear only the fill is blending the
61:35 - outline is not transparent the default
61:38 - value would be 255 fully opaque for any
61:42 - shape let's make it even more
61:44 - transparent set that value to 50 now
61:47 - there's barely any color there from the
61:49 - square put it back to 200 make it more
61:52 - opaque and there we can see so again
61:55 - this is something you can really play
61:56 - with the relative transparency of
61:59 - different shapes and how you place them
62:02 - will create all sorts of different
62:04 - designs the order of course is again
62:07 - very important I think it's also
62:09 - important for me to say here and maybe
62:10 - this is obvious to you that it's not
62:12 - actually transparent right this is still
62:14 - just a flat screen and each pixel just
62:17 - has one color but processing the
62:19 - rendering engine behind the scenes is
62:21 - saying okay you have this yellow color
62:23 - it's on top top of this blue color this
62:25 - one is transparent I'm going to do some
62:27 - math to blend those colors together and
62:30 - this is something I could also get into
62:32 - more there is something called a blend
62:34 - mode and there are different ways to
62:36 - blend color but the default way is just
62:39 - by essentially averaging the colors
62:41 - together and they're they're only
62:42 - averaged if I took 50% of one or 50% of
62:45 - the other but that's essentially the
62:46 - math let me take 75% of this color 10%
62:50 - of this color depending on the relative
62:52 - transparency levels oh I'm almost done
62:54 - with color but I realized two more two
62:57 - more functions I really want to mention
62:59 - before I move on whiteboard is getting
63:01 - to be a bit of a mess here but let's add
63:02 - them in no
63:05 - stroke no fill now the reason why I just
63:09 - thought of them is because I can
63:11 - essentially create no fill by setting
63:16 - the transparency to zero setting the
63:19 - alpha that is to zero that is no fill if
63:22 - it's fully transparent 0% opaque there's
63:26 - nothing there I just see what's behind
63:27 - it but it's rather silly or inconvenient
63:30 - to write it this way when instead I
63:33 - could just say no fill so Phill zero
63:36 - remember is not no fill that's black
63:39 - that's putting the fill of black no fill
63:42 - means fully transparent for example for
63:45 - the stroke for the circle I can also say
63:48 - no stroke so now I've got a circle
63:52 - that's fully opaque with no stroke and
63:56 - I've got a square with no fill that has
63:58 - a stroke all right as with everything
64:01 - that I'm going to be doing there's so
64:02 - many more ways we could expand on this
64:04 - stuff but this is a good foundation to
64:06 - start with about color I have taken my
64:09 - Zoo drawing added some RGB color some
64:12 - transparency I even threw in a color
64:14 - mode there to change the alpha range
64:16 - between Z and 100 why don't you try
64:19 - doing that now with your own design give
64:21 - that a try maybe take a break for a
64:23 - little while come back guess what we're
64:25 - going to do next this drawing this Zoo
64:28 - character it's static nothing about
64:31 - anything I've done here animates or
64:34 - changes as the program runs this is what
64:37 - I would like to tackle
64:40 - [Music]
64:45 - next and we are back and ready for the
64:48 - next step did you take a break if you
64:50 - didn't take a break maybe just get up
64:52 - stretch move your body around if you can
64:55 - take a little break for yourself because
64:58 - speaking of moving your body around I
65:01 - have something to say this is pretty
65:03 - exciting you've drawn with code you've
65:06 - added color you have some kind of design
65:09 - that I am just picturing as just
65:11 - beautiful and wonderful in my head but
65:13 - it doesn't move we'd love to see Zoo do
65:16 - a little dance Bounce Off the edges of
65:18 - the window all of that is possible but
65:22 - we're missing a key fundamental concept
65:26 - here a concept that I will refer to as
65:29 - the flow of the
65:33 - program the processing flow if you open
65:38 - up a website you're clicking around
65:40 - interacting with things things change a
65:43 - game it starts the score is zero you
65:46 - press some buttons you move around you
65:48 - increase your score programs happen over
65:52 - time they run over time this drawing of
65:56 - zoo is essentially a static program it
66:00 - executes one thing this single drawing
66:02 - and stops how can I create a processing
66:06 - sketch that runs over time where things
66:09 - change over time based on interactions
66:12 - or some kind of algorithm in processing
66:16 - the flow of a program at its core is
66:20 - defined by two fundamental concept
66:26 - ceps welcome to your two new best
66:29 - friends setup and
66:31 - [Music]
66:34 - draw let's think about them this way
66:37 - let's say you're designing a game when
66:38 - the game begins a lot of things must be
66:41 - initialized maybe you start with a score
66:44 - of zero you have three lives your health
66:47 - is at 100 the level is level one those
66:50 - are all the things that happen once at
66:53 - the initialization point of the game
66:57 - that is
66:58 - setup then there are other things that
67:01 - happened if the game is Space Invaders
67:03 - for example there's a lot of things that
67:05 - happen over time the spaceship moves
67:07 - around and flies the aliens come in this
67:10 - you increase your score you lose your
67:11 - lives all of that happens over and over
67:15 - again over time forever essentially
67:18 - until you quit the program that is draw
67:21 - setup is initialization it's things that
67:25 - happen just
67:26 - once draw is things that happen over and
67:30 - over
67:30 - again
67:33 - forever the forever of course being in
67:35 - quotes although it would be an
67:37 - interesting challenge to see if we could
67:38 - get a processing sketch to run forever
67:40 - these are two fundamental concepts that
67:43 - we need to introduce to our processing
67:46 - sketch and the way that I am going to
67:48 - bring these into the sketch is with
67:50 - something known as a block of code
67:56 - a block of code is a organized
68:00 - collection of lines of code that sit in
68:04 - between two curly brackets it's going to
68:07 - be hard for me to draw these but I'm
68:08 - going to do my best we have an open
68:11 - curly bracket and a closed curly bracket
68:15 - and some number of lines of code in
68:18 - between those two curly brackets so we
68:22 - are going to define the setup block with
68:24 - curly brackets and the draw block with
68:28 - curly brackets if you're following along
68:30 - you could expand on whatever design you
68:33 - created so far but I might suggest right
68:36 - now you start over or at least heavily
68:40 - simplify that particular design I've
68:43 - taken my example and taken out the line
68:45 - and the rectangle just simplified the
68:48 - color and now I have just one single
68:51 - Circle appearing in the center of of the
68:54 - canvas I am now going to add the setup
68:57 - and draw blocks of code to this
69:03 - example I have typed in quite a bit of
69:06 - new strange unfamiliar syntax which
69:09 - unfortunately it's going to feel kind of
69:10 - wonky and weird and uncomfortable for
69:12 - you for a little while still don't worry
69:14 - by the time this video ends however long
69:17 - it is I will have covered all the ins
69:19 - and outs of everything I just typed in
69:21 - there but for now I want you to focus
69:23 - focus on two things I want you to focus
69:25 - on the keywords set up and draw they're
69:29 - bolded there by processing and the open
69:32 - and Clos curly brackets associated with
69:35 - those the setup block and the draw block
69:38 - notice also how the lines of code that
69:41 - are inside those curly brackets are
69:43 - indented I typed that all in quite of
69:46 - quickly so you might have missed how did
69:48 - they get indented well I could have
69:50 - manually done that with spaces or tabs
69:52 - oh boy spaces or tabs but actually what
69:55 - I did is use one of my absolute favorite
69:59 - things in the world of coding and
70:01 - processing it's right up here under edit
70:04 - and it's Auto format command or on
70:08 - Windows probably control T but this is
70:12 - the key thing I want you to focus on
70:14 - setup and draw open curly bracket and
70:17 - close curly bracket blocks of code it
70:20 - might seem like I'm overemphasizing this
70:23 - but this kind of a block of code is
70:24 - going to extend to so many things that I
70:27 - show you throughout all of these
70:29 - fundamental building blocks of
70:31 - programming the computer in processing
70:33 - so if the flow is defined by setup
70:37 - happening once and draw happening over
70:40 - and over again forever if you will what
70:43 - kinds of lines of code should go in the
70:46 - block of code that is set up versus the
70:48 - block of code that has drawn in this
70:50 - case I'm programming just a simple
70:51 - design so there's not a lot of options
70:54 - but let's consider first the line of
70:56 - code size well certainly size is an
71:00 - initialization condition for my
71:02 - processing sketch it's a thing that
71:03 - defined at the beginning it's not
71:05 - something that I'm defining over and
71:06 - over again so size should go here
71:09 - background is kind of a really
71:11 - interesting question should it go is it
71:13 - something that I Define at the beginning
71:15 - the background of the sketch or is it
71:17 - something that I Define over and over
71:18 - again in draw hm think about that
71:22 - there's no right answer to this for
71:24 - right now I've placed background in
71:26 - setup which is a little bit odd but
71:28 - let's go with it let's go with it
71:29 - usually I do it the other way around
71:31 - when I'm demonstrating this but let's
71:33 - see where this leads us draw is named
71:36 - draw even though it's a loop a forever
71:38 - loop it's name draw because it's
71:40 - typically where you will draw the stuff
71:42 - it again for any design that you're
71:44 - animating you've got to draw it move
71:46 - stuff draw it again move it draw it
71:48 - again we haven't gotten to the moving
71:49 - thing but we are we have gotten to the
71:51 - drawing thing so maybe in this case we
71:53 - we've got a call to fill we've got a
71:55 - call to Circle uh Etc so this is what
71:59 - we've got we now have a program that
72:01 - runs forever over time let's get even
72:04 - more detailed about this for a moment
72:06 - what's actually happening remember
72:08 - processing executes the lines of code in
72:11 - order it was very simple for us to
72:13 - follow that order when it was just a
72:15 - linear list of lines of code now we have
72:18 - these two blocks but I'm going to talk
72:20 - you through it the first thing that
72:22 - happens is size the next thing that
72:24 - happens is background then set no stroke
72:27 - set a pink fill draw a circle what
72:30 - happens next draw Loops back to the
72:33 - first line of code so we set no stroke
72:35 - we set a pink fill we draw the circle no
72:37 - stroke fill Circle no stroke fill Circle
72:39 - no stroke fill Circle no stroke fill
72:41 - Circle this is what's happening but
72:44 - because nothing ever changes no stroke
72:48 - fill and circle are executed with these
72:50 - same arguments every single time we
72:53 - never see anything different and
72:55 - Visually it appears static to us what we
72:58 - need for it to animate for it to change
73:01 - is to introduce variability into our
73:05 - sketch now at some point in a moment I'm
73:07 - going to erase this whole whiteboard I'm
73:09 - going to write variables across the top
73:11 - and we're going to unpack all sorts of
73:13 - details about how you define variables
73:15 - and use variables and all of that but a
73:17 - quick little entry point we just gonna
73:19 - dip our toe into the variable water here
73:22 - is to use
73:23 - something that is known as a built-in
73:26 - variable in
73:28 - [Music]
73:30 - processing processing comes with a whole
73:32 - bunch of these and they're quite fun and
73:34 - quick and easy to use two variables that
73:36 - are really going to just explode the
73:38 - possibility space of what we can do even
73:40 - right now are Mouse X and mouse
73:44 - y so I'm going to write variables we got
73:47 - a little bubble here and these are two
73:49 - variables that we're going to get to use
73:51 - right now we can use them anywhere want
73:53 - in our code but they're going to make
73:55 - the most impact if we use them in
73:57 - combination with the circle command
74:00 - inside the draw Loop where am I going
74:03 - with this let's think about it wouldn't
74:05 - it be nice if I could just say hey
74:09 - you're about to draw this circle instead
74:11 - of saying draw it at pixel 320 draw it
74:14 - at whatever pixel wherever the mouse
74:17 - is
74:19 - whatever pixel wherever the mouse is
74:24 - now of course if I run that it's going
74:27 - to tell me crazy syntax error it can't
74:29 - figure out what the heck I'm talking
74:31 - about that is not code that might be
74:33 - something I like to write as a
74:36 - comment and the way to do that within
74:38 - the function itself is to actually use
74:41 - the built-in variable Mouse X Mouse X is
74:45 - a standin for whatever value is stored
74:49 - somewhere in the computer's brain
74:51 - essentially the right word for that is
74:52 - memory it's keeping track of where your
74:54 - mouse is we can gain access to that
74:57 - value through the reference name Mouse X
75:02 - and processing behind the scenes has
75:04 - defined and set that up all for us let's
75:07 - run this sketch
75:09 - now oh whoa what is going on so first of
75:13 - all I'm just smearing this circle across
75:16 - the window let's get a let's let's let's
75:18 - try to do a bit more here at the mouse X
75:22 - and mouse y y position let's add Mouse y
75:25 - let me also make it a little bit smaller
75:28 - just 50 pixels in
75:31 - diameter look at that I have a painting
75:36 - program think about this wait a sec why
75:39 - is it smearing the circle to answer that
75:42 - let's go back to how we divided up the
75:45 - code why do I see the previous Circle
75:49 - well let's follow this again size
75:52 - background fill Circle fill Circle fill
75:55 - Circle
75:57 - size fill the
75:59 - background draw a circle draw a circle
76:03 - draw a circle draw a circle I never said
76:06 - Erase the previous Circle the computer
76:09 - is always going to literally follow
76:11 - exactly what you say to do so I would
76:14 - need to if I want to see the illusion of
76:16 - it moving I would need to disappear that
76:19 - circle before I draw the next one is
76:22 - there a like erase Circle or should I
76:24 - draw the circle the same color as the
76:26 - background guess what I could try to do
76:28 - goofy things like that but this is
76:30 - exactly why this placement of background
76:33 - is so critical if I were to move
76:35 - background into
76:38 - draw what that says is draw the
76:41 - background draw the circle draw the
76:44 - background draw the
76:45 - circle and look at that now I have this
76:49 - circle that moves perfectly with the
76:52 - mouse the but this opens up another kind
76:54 - of weird question at least in my mind
76:57 - that I really wondered when I was first
76:58 - working with processing many years ago
77:01 - if it's drawing the background and then
77:03 - the circle and then the background and
77:05 - then the circle shouldn't I see like
77:08 - this flicker like background Circle
77:09 - background Circle well the answer to
77:11 - that is is no because we we're not
77:14 - seeing it but but also yes if that is
77:17 - exactly what we were doing here we would
77:19 - see that flickering but processing knows
77:22 - the raw block of code is very special
77:25 - it's actually doing all the steps off
77:28 - screen like in its brain in its memory
77:31 - and at the end of draw it then updates
77:33 - the display this is referred to as
77:36 - double buffered animation because the
77:39 - next frame if you will is being rendered
77:42 - in a separate buffer offscreen and only
77:44 - when it's done it gets displayed then we
77:47 - render the next and display it so again
77:49 - I'm getting a little in the weeds of the
77:50 - sort of lower level mechanisms of the
77:53 - computer but it is an important detail
77:55 - to understand and this is going to come
77:57 - up as you do more things within the draw
77:59 - Loop itself that it only updates when it
78:02 - gets to the end okay I've now defined
78:05 - the flow of the program let me move
78:09 - background back into setup what would
78:12 - happen do you think if I add some Alpha
78:15 - transparency to the circle let's
78:17 - actually make it very light like I'm
78:20 - going to just give it an alpha of 25
78:24 - look at that if it sits in place it's
78:27 - rendering that Circle over and over on
78:29 - top of itself blending with itself which
78:32 - thickens the color but as I move it it's
78:34 - a very slight fuzzy color so even with
78:38 - just this one simple addition we've
78:40 - created this really fun quite Dynamic
78:43 - drawing program there's so few lines of
78:47 - code here maybe this might be a good
78:48 - moment for you to pause and play around
78:50 - and make your own version of
78:51 - this
78:57 - how did that go I don't know you're
78:59 - probably just still watching the video
79:00 - that's fine that's fine too I leave it
79:02 - up to you I think there are some other
79:04 - really important aspects to the flow of
79:07 - a program for me to discuss before we
79:09 - move on and really unpack all there is
79:11 - to know about
79:15 - [Music]
79:16 - variables I said that the processing
79:20 - sketch is organized into two box of code
79:24 - setup which happens once draw which
79:27 - happens over and over again but there
79:29 - are other things that could happen
79:31 - specifically there are events that could
79:34 - happen let's talk about a certain kind
79:37 - of event what about if you were to click
79:41 - the
79:43 - mouse so I am now adding to my list
79:47 - three different blocks of code a setup
79:50 - block initialize the program a draw
79:53 - block just do it always whenever you can
79:55 - you should be doing draw Mouse pressed
79:57 - is what I would call an
80:00 - event this is something that's just
80:02 - sitting and waiting it might never ever
80:04 - run if a mouse is clicked in the forest
80:07 - does anyone run the mouse pressed code I
80:09 - don't think that that's that goes but
80:11 - this is the idea this is code that's
80:13 - just sitting there and waiting if the
80:15 - event is triggered by in this case the
80:17 - user the person who's clicking the mouse
80:20 - run that code so maybe something that we
80:23 - could try is what if background gets
80:26 - moved into mous pressed let me add one
80:30 - more block of code mous
80:33 - pressed again what is void why are there
80:36 - parentheses there let's get to that
80:38 - later for now focus on the name of the
80:41 - block of code Mouse pressed and the open
80:44 - and close curly brackets which Define
80:47 - the block of code itself and any lines
80:50 - of code that are inside there will be ex
80:52 - executed whenever you click the mouse
80:56 - background zero so rather than remove
81:00 - background now from setup I still wanted
81:02 - to draw that background when the program
81:04 - starts I just wanted to draw it again
81:06 - whenever the mouse is pressed making my
81:09 - pattern clicking the mouse I'm G to draw
81:13 - d
81:16 - a
81:18 - and what fun I'm writing the letters of
81:22 - my name clicking the mouse and erasing
81:24 - it and drawing some more another thing
81:26 - you might be wondering about this the
81:28 - order of the code is obviously really
81:30 - important right do I draw the circle on
81:33 - top of the square or the square on top
81:35 - of the circle which one comes first
81:37 - square or Circle that order that I'm
81:38 - referring to is the order inside of a
81:41 - block of code but these blocks of code
81:44 - setup draw and mouse press the order
81:46 - that I write them does not define the
81:49 - order that they run the order that they
81:51 - run is defined by this built-in
81:54 - understanding of the flow of a
81:55 - processing sketch so setup could
81:58 - actually be down here and mous pressed
82:02 - could be up here and this is the
82:04 - identical sketch nothing has changed
82:07 - processing is always going to look for
82:09 - the block of code called setup run those
82:11 - lines of code first then look for the
82:13 - block of code called Draw run those
82:15 - lines of code then look for the block of
82:17 - code called Draw run those lines of code
82:19 - so on and so forth and if you ever click
82:21 - the mouse it's going to Skip and look
82:23 - for that block of code called Mouse
82:24 - press so it's important to not that
82:26 - however you absolutely want to keep
82:30 - these as separate and make sure your
82:33 - curly brackets are in the right place if
82:35 - for example I removed this curly bracket
82:39 - here and put it down here by accident
82:43 - then my setup block is actually defined
82:47 - inside of the draw block I'll hit autof
82:50 - format so we can kind of see that
82:51 - indentation
82:53 - now this to me looks horrifying I am
82:55 - about to like jump out of my skin here
82:58 - but for you like well that seems fine
83:01 - like setup is there draw is there who
83:03 - cares but this is actually quite
83:04 - important these blocks of code need to
83:06 - be Standalone we will see nested blocks
83:09 - inside of blocks of code that's going to
83:11 - come up as we get further down this road
83:13 - but not with setup draw and mouse press
83:16 - let's just run to see what happens yeah
83:18 - fortunately it's giving us a syntax
83:19 - error so it won't really run it that
83:21 - error is not super helpful but I can see
83:24 - that this setup lock of code needs to be
83:26 - here uh separately outside of draw now
83:30 - here's my challenge to you Mouse X and
83:32 - mouse y are incredibly useful in all
83:36 - sorts of weird and wonderful ways I have
83:39 - used them here in probably the least
83:41 - interesting way it's very intuitive it
83:43 - feels like what I'm supposed to do right
83:45 - the circle follows the mouse but Mouse X
83:48 - is just a name for a number Mouse Y is
83:51 - just a name for a number I could switch
83:53 - them Mouse y Mouse
83:56 - X oh this is really weird as I move the
83:59 - mouse left and right it goes up and down
84:02 - as I move it up and down it goes left
84:03 - and right I clicked by accident there by
84:05 - the way that's why it cleared so look at
84:07 - that this is very hard for me to do it
84:09 - feels wrong but the processing doesn't
84:12 - care it's just going to take the number
84:13 - and use it wherever you use it I could
84:15 - put this back at the center and give
84:20 - Mouse x to the red value and mouse y to
84:23 - the blue value and we can see the color
84:26 - is changing as I move the mouse around
84:30 - because the value of red is increasing
84:34 - and decreasing the value of blue is
84:36 - increasing and decreasing
84:40 - maybe wherever I click the mouse will
84:44 - determine the next background that is
84:47 - drawn so now the mouse position
84:50 - determines where the circle is as well
84:52 - as the background color when the mouse
84:54 - is clicked okay let's click the mouse
84:57 - who click the mouse click the mouse
85:00 - let's think about this a little bit I
85:02 - kind of like what I've done here but
85:04 - what is the range for example of mous X
85:07 - the range of mouse x is 0 to 640 the
85:13 - range of mouse Y is 0 to 360 but the
85:17 - range of color is between 0 and 255 so
85:20 - processing kind of figures out something
85:22 - to do regardless but wouldn't it be nice
85:24 - if those ranges matched remember that
85:27 - color mode I told you about before the
85:30 - color mode is something that I could
85:32 - switch while the program is running but
85:34 - this is another good example of
85:36 - something that very typically would go
85:38 - in setup I am defining how I'm going to
85:41 - use color over the course of this entire
85:43 - program color mode the arguments to
85:46 - color mode are what kind of color in
85:49 - this case
85:50 - RGB then what is the range for red I
85:54 - want to match it to the width of the
85:56 - window the range for green the height of
85:59 - the
86:00 - window and then I'm not really using
86:02 - blue here but let's just leave that as
86:04 - the default now when I run this sketch
86:08 - if my mouse is all the way over to the
86:10 - right and all the way to the top I
86:12 - should have all red and no green all the
86:14 - way to the bottom all the way to the
86:16 - left no red all green if I'm all the way
86:20 - in the bottom right that'll be yellow
86:22 - right all red all green perfect it's
86:25 - probably pretty rare that I would want
86:27 - to have a different range for red than
86:29 - green and blue that could get very
86:31 - confusing but I'm just showing you you
86:33 - have a lot of flexibility here this is
86:35 - also a really good moment for me to
86:37 - mention that there are more built-in
86:40 - variables in processing Beyond just
86:42 - Mouse X and mouse y here are two that
86:45 - are also incredibly
86:48 - useful width and height these num
86:52 - numbers although they stay constant over
86:54 - the course of the sketch dynamically
86:56 - reference the width and height of your
86:59 - window whatever the numbers you
87:01 - originally put into size simplifying
87:04 - this program for a moment taking out
87:06 - Mouse pressed putting background back in
87:09 - draw and getting rid of color mode let's
87:12 - say we want the circle to always be in
87:14 - the center of the
87:16 - window 320 180 get rid of the alpha now
87:21 - if I were to change my window
87:25 - size the circle's no longer in the
87:27 - center it's still at 320 comma 180
87:30 - relative to an 800x 600 canvas but I can
87:33 - use those variables width and height as
87:38 - well as apply any kind of arithmetic
87:41 - operation plus minus multiply divide and
87:46 - in this case I want to say half the
87:48 - width or width divided by two to do that
87:51 - I use a a slash for
87:54 - divide height divided
87:56 - two no matter what size the canvas the
88:00 - circle is now always in the center I can
88:02 - also use the same technique to place an
88:05 - object's location relative to the
88:10 - mouse here I now have a circle that's
88:13 - Mouse X plus 50 and a circle that's
88:15 - Mouse xus 50 the use of these simple
88:18 - mathematical Expressions is going to
88:20 - appear constantly throughout all the
88:23 - rest of this video series plus minus
88:27 - multiply divide these are what are known
88:30 - as arithmetic
88:33 - operators Plus for
88:35 - addition minus for subtraction asterisk
88:39 - or star for
88:42 - multiply and slash for
88:45 - division all right I have now covered
88:49 - everything I wanted to say I'm sure I
88:51 - missed a few things
88:52 - about the flow of a processing sketch
88:55 - I'll leave it to you whether you want to
88:56 - go back to an earlier design that you
88:58 - tried if maybe you can make a smile into
89:00 - a frown by moving the mouse or wiggle
89:02 - some antenna of some kind of alien
89:05 - creature you designed around but I would
89:06 - encourage you to simplify what you're
89:08 - doing in the next section after you've
89:12 - tried a little bit of code your own
89:13 - hopefully taken a nice break for
89:14 - yourself I am going to cover everything
89:18 - there is to know about variables
89:21 - specifically
89:22 - how do you go beyond using the built-in
89:24 - variables in processing to defining and
89:27 - creating your own variables see you
89:30 - there in just a
89:31 - [Music]
89:37 - moment all right I'm back I hope you
89:40 - tried a few things with code I hope you
89:42 - took a nice break for yourself and are
89:44 - ready to dive in to variables in
89:48 - processing now we've already been using
89:51 - variables Mouse X Mouse y width and
89:54 - height but what are those technically
89:59 - speaking well the computer has something
90:02 - called memory it's a place where it can
90:04 - store information I talked a little bit
90:06 - about how information at its lowest
90:08 - level is encoded at zeros and ones we
90:11 - don't really need to worry about that
90:12 - here the point of why I'm bringing this
90:15 - up is when you use the term Mouse X in
90:19 - your
90:20 - code what that actually is is a Alias
90:26 - it's a word that stands in for an
90:28 - address in the computer's
90:31 - memory at that address in the computer's
90:34 - memory is the information you're looking
90:36 - for the exposition of the mouse on a
90:40 - technical level that's what a variable
90:42 - is it's a word that points to an address
90:45 - in the computer's memory where
90:47 - information is stored it's what lets
90:49 - your sketch keep track of information
90:51 - over time time if you are making a game
90:53 - you need a variable for score what level
90:56 - you're on how many lives you have left
90:58 - all of those things and here we see this
91:00 - in action in this sketch I've got the
91:02 - variable Mouse X wherever I put that
91:05 - into the code processing will then go
91:07 - look in memory find the location find
91:09 - that number and use that where it draws
91:12 - the circle itself but what if and
91:14 - there's another sketch I have running
91:15 - here right above it I want that Circle
91:17 - to move on its own and I want it to
91:20 - bounce off the edges as it move around
91:22 - this is a goal I have at some point I
91:24 - want to write all the code for this
91:25 - bouncing ball sketch and this section
91:27 - about variables is the start of that in
91:30 - order to execute this Vision I have I
91:33 - need to have my own variable one that I
91:35 - make up and that I bring to the program
91:38 - not one that's built
91:42 - in let's simplify and replace Mouse y
91:45 - with just a number 180 and now I have a
91:48 - circle that just moves its Exposition
91:50 - according to the mouse What if I I
91:51 - wanted to make up my own variable let's
91:53 - call it Circle X if I run the sketch now
91:57 - I get an error message Circle X cannot
92:00 - be resolved to a variable if I want to
92:02 - introduce new variables into a
92:04 - processing sketch I have to follow Three
92:07 - Steps step number one declare the
92:12 - variable in order to declare a variable
92:15 - in processing I need to specify two
92:18 - things the type or more specifically the
92:21 - dat data type what is going to be stored
92:24 - inside the
92:26 - variable and then the name of the
92:28 - variable what do I want to call the
92:30 - variable in this case it's Circle
92:33 - X followed by a semicolon let's go and
92:37 - add this into the code
92:40 - now this is a variable declaration int
92:44 - Circle X int is the data type int stands
92:48 - for integer that's what's going to be
92:50 - stored in the variable an integer is a
92:53 - fancy word for number or whole number so
92:56 - 1 15 0 -3 these are all integers the
93:01 - name is circle
93:04 - X let's list out a bunch of common data
93:08 - types that you might
93:09 - use int for
93:13 - integer any whole number positive or
93:17 - negative float is for any number that is
93:20 - a decimal number so something like 4.31
93:25 - 926 that's a floating Point
93:28 - number string is a data type for text a
93:33 - string of characters so rainbow for
93:37 - example in quotes is a string text and
93:41 - strings are really important but in this
93:43 - series I'm mostly going to focus on
93:45 - using numbers and actually floating
93:47 - Point numbers are the most convenient
93:49 - things to use because it allows any kind
93:51 - of mathematical operations to
93:54 - work for the time being we can actually
93:57 - think of let's just use our data type as
93:59 - float for
94:01 - everything there I've now declared
94:04 - Circle X as a float so what just
94:07 - happened by the way when I say float
94:10 - Circle X semicolon what happens
94:13 - processing tells the computer it needs
94:16 - some space in memory however much space
94:19 - it needs to store a floating Point
94:21 - number it allocates that space and then
94:25 - assigns the word Circle X to that memory
94:30 - address so now Mouse X will always pull
94:34 - up whatever data is at a particular
94:37 - address in memory associated with mouse
94:38 - X and circle X will always pull up
94:41 - whatever value is in memory associated
94:44 - with circle X but what is there that
94:47 - brings me to The Next
94:50 - Step
94:52 - initialize the variable I need to give
94:55 - it an initial value to be stored in
94:59 - memory coming back to the code I'm going
95:01 - to do that inside
95:05 - setup this is what is known as an
95:08 - assignment operation I'm assigning the
95:10 - value 320 to Circle
95:13 - X the variable name equals some data
95:18 - that must match whatever the data type
95:21 - is that I declared the variable as I
95:24 - can't say Circle x equals rainbow
95:27 - because Circle X is a number not a
95:30 - string processing which is built on the
95:32 - programming language Java is strongly
95:35 - typed if you're going to make up a
95:37 - variable you've got to say what you plan
95:39 - to put in that variable and you've got
95:40 - to stick to it by golly other
95:43 - programming languages are weekly typed
95:45 - or Loosely typed like JavaScript and
95:47 - there are pros and cons to each I don't
95:49 - want to get into that right now we can
95:50 - have a long discussion about that in the
95:52 - comments if you want but if you are
95:54 - going to work with processing you have
95:56 - to get used to the idea of specifying
95:59 - data types so if I have initialized
96:02 - Circle X as having the value
96:05 - 320 that means 320 is now stored in the
96:09 - computer's memory associated with the
96:11 - variable Circle x what is the last
96:15 - step use the variable I mean technically
96:19 - this is optional you could declare a
96:20 - variable you can even skip initializing
96:22 - it never use it and no one would be the
96:24 - wiser but ultimately the point of doing
96:27 - this is because you want to use the
96:28 - variable you want to draw this circle at
96:31 - the value Circle X so to get there
96:34 - you're going to first need to declare it
96:35 - initialize it and then it's time to use
96:37 - it let's go make sure we have all three
96:39 - pieces of these in our
96:44 - code and there you have it step one
96:47 - declare the variable of type float name
96:50 - Circle X step two initialize the
96:53 - variable use an assignment operation to
96:56 - say Circle x equals 320 step three use
97:00 - the variable I'm putting Circle X as the
97:03 - first argument to the function called
97:05 - Circle to draw The Circle at x value 320
97:09 - here's a couple more really important
97:12 - details about this number one the name
97:15 - of your
97:17 - variable so there are requirements
97:20 - things you can can and cannot do in a
97:22 - variable name and then there are
97:24 - conventions things that would work if
97:26 - you put them in the code but are maybe
97:28 - not what programmers typically do first
97:30 - thing requirements start with a
97:34 - letter no spaces or special characters
97:38 - other than
97:42 - underscore and actually the underscore
97:44 - is also okay as the starting
97:46 - character Circle X is fine Circle uncore
97:50 - X underscore Circle X but you couldn't
97:53 - have a variable called 2 Circle X that
97:58 - would not
98:02 - work now those are rules there are also
98:05 - some
98:08 - conventions start with a lowercase
98:11 - character so don't capitalize the first
98:14 - letter of a variable name capital
98:17 - letters are generally reserved for
98:19 - something that we're going to do later
98:21 - later in this course when I start
98:23 - talking about classes and objects you
98:25 - also might notice here how I capitalize
98:28 - the X I just did that instinctively
98:31 - Circle capital x the reason why I did
98:35 - that is there is a convention it's
98:37 - called camel case to if your variable
98:40 - name joins multiple words like rainbow
98:44 - unicorn you would capitalize the first
98:48 - letter of the second word so I'm just
98:50 - going to write right here camel
98:55 - case Some people prefer to use
98:58 - underscores to join multiple words
99:01 - rainbowcore unicorn the truth of the
99:03 - matter is everybody has their own
99:05 - personal style and tastes about how to
99:07 - name variables you'll see how I'm doing
99:09 - it over the course of this video that
99:11 - you're watching I expect you'll develop
99:13 - your own style your own kind of way of
99:15 - naming variables maybe English isn't
99:17 - your first language and even though
99:18 - you're kind of stuck using a lot of
99:20 - English words for programming in
99:22 - processing right now your variable names
99:24 - don't have to be English words another
99:26 - important somewhere in between a rule in
99:29 - a convention is don't name your
99:32 - variables other kinds of reserved words
99:36 - in processing so I'm just going to write
99:38 - that over here
99:40 - avoid reserved
99:44 - words for example you wouldn't want to
99:47 - name your variable float processing will
99:49 - be completely confused used and won't
99:52 - work you probably don't want to name
99:53 - your variable Circle or stroke because
99:56 - those are names of functions inside of
99:59 - processing you can get away with that
100:01 - sometimes but it's just going to cause
100:03 - confusion so I would just avoid it at
100:05 - all costs okay one more very important
100:09 - detail I gave you these three steps and
100:11 - I kind of showed where in the code I put
100:14 - them but I didn't really talk about why
100:16 - I put them in particular places let's
100:19 - think about where it is is that I am
100:22 - going to declare a variable the
100:24 - placement of the variable declaration is
100:27 - critical to how you able to use the
100:30 - variable throughout the course of your
100:32 - sketch notice how I put it at the top
100:35 - float Circle X it's on its own outside
100:40 - of the blocks of code setup or Draw this
100:43 - is because I want Circle X to be a
100:46 - global variable meaning I want to be
100:49 - able to use Circle X anywhere in my code
100:52 - in setup in draw in Mouse pressed and
100:55 - all the future things that you haven't
100:56 - learned yet you can decare variables in
101:00 - other places in the code I could declare
101:02 - it in setup or I could declare it in
101:04 - draw but it then becomes something known
101:07 - as a local variable we don't have any
101:09 - need for local variables really right
101:11 - now so I'll come back to that when it
101:14 - comes up in future examples that I'm
101:17 - going to write where they will be needed
101:19 - for now it's simpler to just say let me
101:21 - make all my variables Global let me just
101:24 - list all of the variable declarations at
101:26 - the top of the code but I'll make a note
101:28 - here Global versus
101:33 - local just to remember to come back to
101:35 - that at some point now where should the
101:37 - variable be initialized in this case it
101:39 - makes sense to initialize it in setup
101:41 - this is the initial value of circle X I
101:44 - want to assign it when the program
101:45 - begins the code that runs when the
101:47 - program begins is in setup however even
101:50 - though I took all this time to talk
101:52 - about declaring the variable and
101:54 - initializing it as two separate steps
101:57 - because technically they are two
101:58 - separate steps and there are many times
102:00 - where you need to separate those steps
102:02 - it's typically much more convenient to
102:04 - do them all in one line of code so if I
102:08 - want to adjust this code and simplify it
102:10 - a bit I can actually say float Circle x
102:14 - equals
102:16 - 320 I can delete this out of setup and I
102:19 - can say declare there and initialize the
102:24 - variable there same exact result while
102:27 - I'm at it I should also point out that
102:29 - if I forgot to initialize the variable
102:32 - and I run this sketch look at where the
102:34 - circle is it's at the pixel zero in the
102:37 - case of numbers processing will actually
102:39 - assign variables an initial value of
102:42 - zero but generally speaking I prefer to
102:45 - explicitly initialize to a specific
102:47 - value even if I want to initialize it at
102:49 - zero because then there's no confusion I
102:50 - don't have to question what is the
102:52 - default value for this all right now the
102:54 - last step use the variable where to use
102:57 - the variable well if it's a global
102:59 - variable you can use it anywhere in your
103:01 - code however you want to and what it is
103:04 - that I want to do right now is I want to
103:07 - see that Circle move from left to right
103:11 - that's why I'm here that's why I made up
103:14 - my own variable so the value of circle X
103:17 - can vary this is another way that a
103:19 - variable can be used
103:21 - we've used it as an argument to a
103:25 - function now I want to use it in an
103:30 - incrementation
103:34 - operation I can take advantage of the
103:37 - fact that draw is looping right right
103:40 - now every time through draw Circle X has
103:43 - the value of zero but what if it has the
103:45 - value of zero the first time through
103:46 - draw but then it has the value of one
103:48 - and then two and then three and then
103:50 - then four it'll start to move across the
103:53 - window how do I do that Circle x equals
103:57 - Circle x + one now this looks odd what H
104:03 - something can't be equal to itself plus
104:05 - one this kind of incrementation
104:08 - operation which is another assignment
104:10 - operation just like I'm saying Circle X
104:12 - is equal to zero now what I'm doing is
104:14 - I'm saying Circle X should be equal to
104:17 - itself + one anytime I write a statement
104:21 - like this in code I always evaluate the
104:24 - right side of the equation first so if
104:27 - Circle X is 100 I evaluate 100 + one I
104:31 - have 101 and that's what the new value
104:34 - of circle X is equal to guess what draw
104:36 - Loops again it's equal to 102 Loops
104:39 - again Circle X is equal to 103 let's
104:41 - give this a
104:42 - go look at that Circle move what if I
104:46 - wanted to move faster well I could say
104:48 - Circle x equal Circle x + 5
104:51 - now every time through draw it's moving
104:53 - five pixels oh goodbye Circle we'll
104:55 - never see you again now in order to have
104:58 - it change direction and move back I'm
105:00 - going to need a whole other concept that
105:01 - I'm going to be covering later but for
105:03 - right now this is a good moment for us
105:05 - to remember that we have the mouse
105:06 - pressed
105:07 - event so what I could do potentially is
105:10 - I could reset the value of circle X back
105:12 - to zero whenever I click the mouse so
105:15 - now I'm using the variable in multiple
105:16 - places I'm using it as an argument to
105:19 - the circle function to draw a circle I'm
105:21 - using it in an incrementation operation
105:23 - to increase the value of circle X every
105:25 - time through draw and I'm using it in
105:27 - Mouse press to reset its value run this
105:31 - sketch circle's moving to the right
105:34 - anytime I click the mouse it goes back
105:36 - to its original position okay it's about
105:39 - time to take a break and let you play
105:40 - around with this and maybe try adding a
105:42 - y variable a size variable multiple
105:44 - shapes all sorts of things you could do
105:47 - but inevitably as you start to do this
105:50 - Things Are are going to break and not
105:51 - work as expected and this is one of the
105:54 - big challenges of programming and one of
105:56 - the things that's almost impossible for
105:58 - me to really demonstrate to you and it's
106:00 - something you have to just kind of
106:02 - struggle through yourself is how to
106:04 - debug your code one of the tricks of the
106:06 - trades for figuring stuff out as you're
106:08 - working is using the print or print line
106:11 - command for example right here in setup
106:14 - I can say print Ln for print line hello
106:19 - and in fact in a lot of programming
106:21 - courses and learn to code types of
106:23 - environments if you're working purely
106:26 - with text this would be the very first
106:27 - program you would write print hello
106:30 - world but a hello world in processing is
106:32 - more like draw the circles to the screen
106:34 - but we can get a version of that well
106:36 - now when I run the
106:38 - sketch you can see right there in the
106:40 - console the word hello is printed out
106:43 - now so far the amount of code we've been
106:45 - writing is very little I've done this
106:48 - multiple times over many years so I
106:50 - haven't made it any mistakes yet you
106:52 - will no doubt make mistakes and I at
106:54 - some point in the course of this whole
106:56 - series will make mistakes so I'm going
106:58 - to try to leave those in and show you
107:00 - little debugging bits as I go but right
107:02 - now I'm going to have to artificially
107:03 - engineer something so let's say I hadn't
107:06 - really been paying attention and I put
107:09 - in uh a th as the initial value for
107:13 - Circle X and I ran the code and I don't
107:16 - see the circle at R I'm really just
107:18 - wondering like well why don't I see the
107:19 - circle it should be there I meant to
107:22 - draw it on the canvas so something that
107:25 - I could do is I could say like hm why
107:28 - don't I look at what the number that's
107:31 - stored inside of circle X is so right at
107:34 - the beginning of draw or at the end of
107:36 - draw anywhere really I could say print
107:38 - Ln Circle
107:40 - X this is now going to display the value
107:44 - the current value of circle X in the
107:47 - processing
107:49 - console see it down there and this might
107:51 - lead me to realize aha well that's a
107:54 - really big number my my canvas is only
107:56 - 640 pixels wide that's why it's not
107:59 - there H oh I initialized it too high
108:03 - again this is something of an artificial
108:05 - scenario that I'm creating but this is
108:08 - the kind of thing that can happen to you
108:09 - I would then realize I wanted to start
108:11 - it at zero so I'm going to fix that to
108:14 - zero and then haha the sketch is working
108:17 - again as expected all right this is a
108:19 - good moment to take a pause I haven't
108:21 - given you a lot to work with just yet
108:24 - but I think you could expand on this
108:25 - sketch could you add a variable for the
108:27 - Y position of the circle what kinds of
108:29 - mathematical operations can you make
108:32 - something Fade Out by using subtraction
108:35 - rather than addition maybe the circle
108:37 - grows in size or shrinks in size it
108:39 - moves from left to right or up and down
108:41 - lots of stuff for you to explore when I
108:43 - come back in the next section I'm going
108:45 - to cover a few more details and tips and
108:47 - tricks about working with variables and
108:50 - look at how you can initialize variables
108:54 - with random
108:56 - [Music]
109:01 - numbers all right welcome back I am
109:03 - about to talk about random numbers which
109:05 - is very exciting but before I get there
109:08 - I just want to look at this statement
109:09 - circle xals circle x + 5 a bit more and
109:13 - talk about a kind of odd syntax thing
109:16 - that occurs in a lot of processing
109:19 - examples that you might have already
109:21 - seen or certainly will see so this kind
109:24 - of statement where you're taking a
109:25 - variable and increasing it by some
109:27 - amount by one by five by 10 Etc this is
109:31 - something that is all everywhere it's
109:33 - just you write it all the time in code
109:35 - and so anything that's really common in
109:36 - programming typically there are
109:38 - programmers who have figured out a
109:40 - shorthand way of writing it and this is
109:42 - no exception a shorthand way of writing
109:44 - this is actually the
109:47 - following Circle X Plus equal 5 and this
109:51 - means that if I wanted to increase
109:53 - Circle X by 1 I could say Circle
109:58 - X Plus equal 1 so this is take the value
110:03 - of circle X and set it to itself plus
110:05 - one well this operation is so common by
110:11 - whenever you want to increment something
110:12 - by one that there's even a short hand
110:14 - for the short hand which is the
110:18 - following Circle X
110:20 - x++ this might be familiar to you maybe
110:24 - you've heard of the programming language
110:27 - C++ well the reason why it's called C++
110:31 - is because there was a programming
110:33 - language and still is a programming
110:34 - language called C and the next version
110:37 - of it the expanded version incremented
110:40 - by one it's a little fancier it's brand
110:42 - new it's not C it's
110:45 - C++ and there will come a time even in
110:48 - this series where I start using these
110:50 - short hands but generally for me for my
110:53 - for what I'm trying to do in teaching
110:55 - the basics of programming and certainly
110:57 - I think when starting out I find this to
110:59 - be a more readable line of code that
111:02 - says exactly what it's doing and finally
111:06 - I'll also mention that these kinds of
111:08 - shorthand operations also work with
111:11 - multiply divide and minus so I could say
111:15 - Circle x minus minus which means Circle
111:18 - x equals Circle x minus one or I could
111:20 - say something like Circle X divide equal
111:24 - 2 which means Circle x equals Circle X
111:28 - ided by 2 coming back to the code just
111:32 - to prove that this is the case I'm going
111:33 - to change this to plus equal
111:36 - 5 and run
111:38 - it exact same result and if I change it
111:42 - to Circle
111:44 - x++ there it is only it's just
111:46 - increasing by one because plus plus
111:48 - means increase by one I'm a little torn
111:51 - about what I'm about to do but this is
111:54 - also probably a good time for me to just
111:55 - change the variable name Circle X to
111:57 - just
111:59 - X and then say X plus equals 5 this is
112:03 - also another personal style thing what
112:06 - should I name the variable well if I'm
112:08 - going to have a circle and a square
112:10 - maybe I want to have variables called
112:12 - Circle X and square X to really
112:14 - differentiate them but if I just have
112:16 - one thing and I only have one thing for
112:19 - which I need X maybe calling it X is
112:21 - fine I could have if I had multiple
112:23 - things I could have an X1 and an X2
112:26 - there's so many different ways to name
112:28 - your variables and frankly I could just
112:31 - call this kitten and I could copy paste
112:35 - it here and use kitten everywhere
112:37 - because I love kittens and that's what I
112:40 - feel like today I feel like calling my
112:42 - variables kitten probably not a great
112:44 - idea because it doesn't really tell me
112:47 - about anything that I'm actually doing
112:48 - with the code even though it brings me a
112:50 - little happiness to see the word kitten
112:51 - there but I can't tell you what to do
112:54 - you should name variables in a way that
112:57 - makes sense to you that will be helpful
113:00 - to you as you work on the code more as
113:02 - you take a break from it and come back
113:04 - to it later think about what is going to
113:07 - have the most meaning for you and for me
113:09 - right now I'm going to go back to X
113:12 - because that's the least amount of
113:13 - typing and I have one thing and I want
113:16 - it to be at its Exposition that's going
113:17 - to work just great
113:20 - [Music]
113:23 - all right I don't know what you've made
113:25 - so far watching this video although I
113:27 - certainly would love to know so check
113:29 - the video description for how you can
113:30 - share stuff with me but I don't know
113:32 - about you I'm feeling a little bit like
113:34 - sad like all I've got is this circle
113:37 - yeah it's moving I mean this is a huge
113:39 - accomplishment but there's not a lot of
113:41 - possibilities here don't worry I haven't
113:43 - forgotten about figuring out what to do
113:46 - when that Circle reaches the edge and
113:48 - have it move back Bal off of The Edge if
113:50 - you will but before we get there I've
113:53 - got something really exciting to show
113:55 - you which is going to just explode the
113:58 - possibilities of what you can create
114:01 - right now in processing and that is the
114:04 - random function up until now we've
114:08 - looked at two different kinds of lines
114:10 - of code that you can write one a command
114:13 - or more precisely a function
114:16 - call this is anything like background
114:21 - it's got the name of the command
114:23 - followed by parentheses and some number
114:25 - of arguments and a semicolon line stroke
114:30 - ellipse Circle all of these are the same
114:33 - we've also now seen with variables
114:36 - assignment
114:42 - operations here are some examples we're
114:44 - setting Circle x equal to 100 or set
114:47 - Circle x equal to the result of some
114:49 - type of mathematical expression there is
114:51 - a way to do both of these in one line of
114:56 - code with certain kinds of function
114:59 - calls at the moment every single
115:02 - function call that I've shown you just
115:05 - performs an action set the background
115:08 - color set the fill color draw a circle
115:12 - draw a square but some functions
115:15 - actually answer a question and I think
115:18 - the most one wonderful function that we
115:21 - could begin to demonstrate this concept
115:24 - is the function
115:26 - random the function random in processing
115:30 - ends with a resulting value it doesn't
115:33 - just perform an action the action it
115:35 - performs as it picks a random number out
115:37 - of a hat but it gives you that value
115:39 - back the function itself evaluates to a
115:42 - random number meaning we can take the
115:45 - result of the random function and assign
115:48 - it to a variable
115:50 - Circle x equals random now random also
115:54 - does require arguments if we want a
115:57 - random number we need to specify the
116:00 - minimum value and the maximum value what
116:02 - is the range of numbers we want so for
116:05 - example if I wanted a random exp
116:08 - position anywhere in the window I might
116:10 - say the minimum value is zero and the
116:13 - maximum value is
116:14 - 640 so now I am both performing an
116:17 - assignment operation I'm giving a new
116:20 - value to Circle X but I'm also getting
116:22 - that value not from a hard-coded number
116:25 - or a mathematical expression but rather
116:27 - from the result of a function the
116:30 - technical term for this is that this
116:32 - function returns a value in fact it
116:35 - returns a float a floating Point number
116:39 - the first thing that we might do with
116:40 - random and a sketch like this is well
116:42 - every time it runs it does the exact
116:44 - same thing but if I added something
116:46 - random like give me a random Exposition
116:50 - now every time I run the sketch there it
116:53 - was kind of in the middle there it's all
116:55 - the way to the left run it again oh now
116:57 - it's more toward the right but let's
116:59 - make a little bit more Dynamic version
117:01 - of
117:02 - this so I've got a sketch right here
117:05 - that draws a single rectangle in the
117:07 - middle of the canvas I have two
117:09 - variables one for the size of the square
117:12 - and one for the width of the outline of
117:15 - the square I'm calling it Square size
117:17 - and line width those are my variable
117:19 - names
117:20 - how am I doing variable name wise pretty
117:21 - good I think so if I were to change
117:24 - Square size to some random value between
117:26 - 50 and 150 and line with to some random
117:30 - value between say four and
117:33 - 16 now every time I run the sketch I get
117:36 - a different size square and a different
117:39 - thickness for the outline demonstrating
117:42 - this by rerunning the sketch over and
117:43 - over again is kind of awkward so a nice
117:46 - trick I can do is in Mouse pressed I can
117:50 - put these lines of code in there there's
117:53 - something that I've done that's really
117:55 - wrong though remember in our three steps
117:59 - about a variable declare a variable
118:01 - initialize it use the variable well this
118:05 - is me declaring it this is me
118:07 - initializing it here I'm using it I do
118:10 - not want to redeclare it instead I just
118:14 - want to use it so I want to set the
118:16 - value of square size and line weight to
118:18 - something new run the
118:22 - sketch so something I forgot also
118:25 - interestingly enough is background is in
118:29 - setup put background and
118:31 - draw and now here's what I got every
118:34 - time I click the mouse I get a different
118:36 - Square this might seem kind of basic but
118:38 - if you had designed an entire house you
118:41 - could actually vary the house randomly
118:44 - every time maybe the size of the
118:47 - building the number of Windows where the
118:49 - door is positioned these are things that
118:51 - you could do by having more variables
118:53 - and more calls to random and I don't
118:55 - have to limit myself to picking the
118:57 - random numbers when I initialize the
118:58 - variable or in Mouse pressed I can
119:00 - actually take these lines of code and
119:02 - put them right inside of
119:04 - draw it's a little jarring how much it's
119:07 - flickering but what if I add some nice
119:11 - Alpha to both the stroke and the
119:16 - [Laughter]
119:17 - fill why am I not seeing anything I have
119:20 - the background in draw for this effect
119:22 - where I'm trying to demonstrate the
119:24 - blending of all these random shapes I
119:27 - need to draw the background just once in
119:30 - setup just with adding some Randomness
119:32 - we've got a more Dynamic pattern and
119:34 - shape let's look at another example
119:38 - here's an example that just draws one
119:40 - Circle in the center of the window first
119:43 - another shortcut if I have multiple
119:45 - variables I want to declare that are of
119:47 - the same data type I don't have to say
119:49 - float X float y I can actually say float
119:52 - X comma Y and here I divided X and Y and
119:55 - RGB up separately because one's for the
119:58 - position one's for the color but I could
120:00 - actually put these all in one line of
120:02 - code so now I have five variables all
120:05 - declared at once and then in draw I'm
120:08 - giving all of those variables a
120:10 - hardcoded number so we have a white
120:13 - circle in one spot but what if I were to
120:16 - allow each of those to be random
120:24 - look at that every time through draw a
120:27 - new circle is drawn at a random location
120:30 - with a random RGB value maybe I want to
120:33 - constrain the range of color a bit
120:38 - more at a minimum the blue value will
120:41 - always be 150 and the red value will
120:43 - always be 100 and maybe the green value
120:46 - is always going to be very little just
120:47 - between zero and 50
120:49 - varying degrees of pinkish purple I like
120:53 - that oh what if I add some
120:56 - Alpha over time the shapes are blending
120:58 - it's a nice poist effect something else
121:01 - to mention is that while I said that the
121:06 - random function takes two arguments a
121:09 - minimum and a maximum if your minimum
121:12 - value is zero you can actually give
121:16 - random just one argument so this can
121:19 - actually be written as random just 640
121:22 - and it will assume some random number
121:24 - between 0 and 640 so back to the code I
121:28 - can remove that this and this here and
121:33 - there we go and while we're at it I
121:35 - should probably use the built-in
121:38 - variables width and height so that if I
121:40 - resize the sketch it will always still
121:43 - spread the dots out all over it so let's
121:46 - say x equals random width and y equal
121:49 - random
121:50 - height okay hopefully you have so many
121:53 - ideas percolating in your head you just
121:55 - can't wait to add random all over your
121:57 - code maybe you're going to make your own
121:59 - poter lless design like this try other
122:01 - shapes besides just dots what happens if
122:03 - you put random lines all over the sketch
122:05 - oo that's a nice idea could you make a
122:08 - random design like my example of a new
122:10 - random house every time you run the
122:12 - sketch you could also go back and
122:13 - explore that painting program the one
122:15 - where the dot smeared around based on
122:17 - moving the mouse what is if every time
122:20 - you click the mouse you started painting
122:22 - with a new color or maybe there's some
122:23 - other way you could use random in
122:25 - combination with the size of the dot or
122:27 - the color that I can't even think of
122:29 - right now so go and explore the random
122:31 - function see what types of designs you
122:34 - can make take a break for yourself and
122:36 - then when we come back oh it's going to
122:38 - be time we're g to get that ball that
122:40 - ball is going to hit the edge it's going
122:42 - to bounce it's going to turn it's going
122:44 - to be a thrilling moment I'll see you
122:47 - then
122:50 - [Music]
122:53 - welcome back I had a break for a few
122:55 - days wearing different clothes I am just
122:57 - full of energy raring to go because even
123:00 - though I say this a lot this section
123:03 - might be the most important part of
123:05 - everything you might ever learn to do as
123:08 - it relates to coding you haven't really
123:10 - been able to do very much you can make
123:12 - drawings you can add some color you can
123:14 - animate things but without the ability
123:17 - for a program to make DEC decisions and
123:19 - take different paths based on conditions
123:23 - that are happening within the program
123:25 - itself there's very little you can do
123:27 - and this is what we're going to cover it
123:29 - is called a conditional statement the
123:32 - grand finale of this section will
123:35 - finally answer the question how do we
123:38 - tell this circle that when it leaves the
123:40 - screen it goes past the edge of the
123:42 - canvas how do we tell it to turn around
123:44 - and move in the other direction this
123:46 - cannot be done without a conditional
123:48 - statement
123:51 - you might recall back when I was talking
123:53 - about setup and draw I said oh this
123:55 - thing about a block of code with an open
123:57 - curly bracket and a closed curly bracket
124:00 - that's going to be very
124:02 - [Music]
124:05 - important a conditional statement is a
124:09 - new kind of block of code for you to
124:11 - write it has an open curly bracket and a
124:14 - closed curly bracket and lines of code
124:16 - that go in between those those lines of
124:20 - code are only executed if a certain
124:24 - condition is met so we have a new
124:27 - reserved word in processing if and in
124:30 - fact I often say an if statement rather
124:33 - than a conditional statement because
124:34 - that's what I'm doing I'm saying if this
124:37 - condition is met execute these lines of
124:40 - code so this begs the
124:42 - question what goes inside here what goes
124:46 - inside these parentheses what goes
124:48 - inside side Here is known as a Boolean
124:53 - expression a Boolean expression is any
124:56 - code that evaluates to one of only two
124:59 - options true or false let's think about
125:03 - this concept just with things that we
125:05 - might say to each other I mean you're
125:06 - not really there but I think that you're
125:08 - there I might say I'm wearing a sweater
125:10 - I mean that's true I'm wearing a sweater
125:12 - it evaluates to true this learn to
125:14 - program video that you're watching is
125:18 - Absolut Ely a fantastic oh ow so in
125:22 - these statements I'm making sure yes
125:23 - some of them might be factually true or
125:25 - factually false but there's also maybe
125:27 - some subjectivity to things that I might
125:29 - say know maybe it's true or maybe you
125:31 - might disagree it's an opinion none of
125:33 - that is the case in an actual Boolean
125:36 - expression that we would put in code a
125:38 - Boolean expression that we put in code
125:40 - is always true or false one very common
125:44 - way to create a Boolean expression is
125:46 - with something known as a relational
125:47 - operator
125:50 - an operator is something that acts on
125:53 - numbers I talked about arithmetic
125:55 - operators like add subtract multiply
125:57 - divide a relational operator is an
126:00 - operator that compares two
126:05 - numbers greater than less than greater
126:07 - than or equals less than or equals
126:09 - equals and not equals now these are a
126:11 - little bit funky I'll come back to them
126:14 - another time but let's just consider
126:16 - right now greater than less than greater
126:18 - than or equals and less than or equals
126:20 - let's say I were to write 18 greater
126:24 - than 10 this is a Boolean expression
126:27 - does it evaluate to true or
126:30 - false yes it's
126:32 - true what about 18 is less than 10 that
126:37 - evaluates to
126:38 - false what this means is if I were to
126:41 - write a Boolean expression inside the
126:44 - parentheses like if 18 is greater than
126:47 - 10 run this code this code will only run
126:51 - if this is true now you might be
126:53 - thinking what the huh ah this doesn't
126:56 - make any sense why would you do that in
126:58 - there that's always true this code
127:00 - always runs this is not the point the
127:02 - point is I want to somehow use a
127:05 - relational operator in combination with
127:08 - a variable if that number is changing
127:12 - based on what's happening in the code
127:14 - then sometimes it will be true and
127:16 - sometimes it will be false here's a
127:18 - really good example what if I want the
127:20 - background color of my sketch to be blue
127:23 - when the mouse is on the right hand side
127:25 - and I want it to be red when it's on the
127:27 - left hand
127:28 - side if I have a canvas if 320 is the
127:33 - exposition of the center of the canvas
127:36 - if Mouse X is greater than 320 execute
127:41 - this code let's see how that works in
127:43 - practice let's start over with a brand
127:45 - new sketch the only thing it's doing is
127:47 - drawing a black background and let's add
127:49 - that conditional statement remember I
127:51 - need the key word if I need parentheses
127:55 - with a Boolean expression
127:57 - inside Mouse X is greater than
128:00 - 320 and then any code inside the curly
128:04 - brackets will run if the Boolean
128:06 - expression evaluates to True okay
128:08 - remember setup runs once draw is looping
128:11 - over and over again so it's going
128:13 - through and saying hey I'm going to draw
128:14 - the background as black okay let's check
128:16 - where the mouse is oh that's false skip
128:18 - that line draw the background his back
128:20 - oh check where the mouse is that's false
128:21 - skip that line so this line of code line
128:24 - 10 is never being executed now I'm going
128:27 - to slowly move the mouse this is very
128:29 - dramatic maybe we need a drum roll some
128:30 - dramatic oh nope it's too late it
128:32 - happened already uh this might be
128:34 - helpful if I were to draw a
128:38 - line with that line now I can see as
128:41 - soon as the mouse goes over here oh and
128:44 - look at this I always forget about order
128:46 - of operations where did that line go
128:48 - well because this if statement is
128:50 - happening after Drawing the Line it's
128:51 - covering
128:53 - it this is actually kind of an important
128:56 - note about background which I never
128:58 - specifically said background doesn't
129:01 - draw a color in the background behind
129:03 - things it just fills the canvas with a
129:06 - color which typically you use to set the
129:09 - background but it's only actually going
129:11 - to be the background if it's at the
129:12 - beginning of draw and you're drawing
129:14 - everything else on top of it so that's
129:15 - kind of an important thing for you to
129:17 - note here we go white background black
129:21 - background white background black
129:22 - background that is the core idea of a
129:26 - conditional statement now this might
129:28 - seem a little bit insane to you but I
129:31 - would make the argument that I could
129:32 - actually stop this processing course
129:35 - right here and I've given you the tools
129:37 - to program anything you might ever think
129:39 - of or imagine everything else that we do
129:41 - from here on out is something that will
129:43 - ultimately make things easier organize
129:46 - your code better and be able to build
129:48 - much more complex and
129:50 - sophisticated Concepts but this is a
129:53 - good time for you to sort of play around
129:54 - with this idea of an if statement think
129:56 - about the painting program what kinds of
129:58 - things could you do with the painting
130:00 - program if you had the ability to use a
130:02 - conditional statement do you have any
130:04 - ideas how you would get that ball to
130:05 - turn around based on a conditional
130:07 - statements see if you can experiment use
130:10 - Mouse X use Mouse y use your own
130:12 - variables try greater than try less than
130:14 - all of these things see where you can
130:16 - get to I'm going to take a little pause
130:18 - and I'm going to come back and continue
130:20 - showing you more about what you can do
130:22 - with an if statement in fact I'm going
130:24 - to show you something about a word oh
130:26 - it's a wonderful word in programming
130:28 - called
130:31 - else all right I am just dying to know
130:34 - what it is you're able to accomplish
130:35 - with just a basic if statement but there
130:38 - is more to just if let's look at this
130:41 - example yes the background turns white
130:44 - when I move the mouse over here and
130:45 - black when I move there but it's written
130:47 - in kind of a strange way like I'm always
130:48 - drawing the background black and then as
130:50 - long as I put this mouse X is greater
130:52 - than 320 thing next it will cover it
130:55 - with white but really what I'm saying is
130:58 - if the mouse is greater than 320 draw a
131:01 - white background otherwise draw a black
131:04 - background and this concept of otherwise
131:07 - is something you can actually write into
131:08 - your code only you need to use the
131:11 - keyword else an if statement can be
131:14 - combined with an else by placing the
131:16 - else right after that Clos curly
131:20 - bracket and then putting in a new open
131:24 - and Clos curly
131:26 - bracket now any code inside here will
131:29 - run if this Boolean expression evaluates
131:32 - to true if it evaluates to false it will
131:35 - skip this code and go and execute this
131:38 - code
131:42 - instead there we go same exact result
131:46 - only I feel like the code makes more
131:48 - sense now and is more readable and
131:51 - understandable while it totally doesn't
131:52 - matter here it's also a bit more
131:54 - efficient it's not drawing the black
131:56 - background and extra time when it
131:58 - doesn't need to I think what I'm trying
132:00 - to emphasize with else here would be a
132:01 - bit more clear if I drew shapes instead
132:05 - of filling the background
132:10 - [Music]
132:13 - color the if statement here is now going
132:16 - to draw a circle whenever the mouse
132:18 - moves past the halfway point but that
132:21 - square is always there if I want the
132:24 - shape to
132:25 - change I could write another if
132:29 - statement now this is working as I
132:32 - intended circle square circle square but
132:36 - I wrote it as two separate if statements
132:38 - completely unrelated now this is
132:40 - something you might want to do for
132:43 - conditions that you're testing that have
132:44 - no relationship to each other but in
132:46 - this case there is a relationship if
132:48 - it's over here draw a circle otherwise
132:51 - draw a square that's where the else
132:53 - really makes the most
132:56 - sense there we go another example of how
132:58 - the conditional statement the if
133:00 - statement can change what is rendered
133:03 - each time through draw depending on what
133:05 - I'm doing with the mouse What If instead
133:08 - of just having two areas one for a
133:11 - circle one for a square I were to think
133:13 - about the canvas as divided into three
133:16 - and I'm going to change the width to 600
133:18 - because 640 doesn't divide evenly into
133:24 - three okay just because I drew the lines
133:26 - there still the exact same behavior but
133:29 - now I want to see maybe a line for here
133:32 - a square for here and a circle for here
133:36 - so it turns out that in addition to
133:39 - having an else that is paired with your
133:41 - if statement you can also have an else
133:46 - if
133:51 - once again a nice way to think about
133:53 - this to help you understand it is to
133:55 - look at this word else and substitute
133:58 - the word otherwise if the mouse X is
134:01 - greater than 320 do this thing otherwise
134:03 - if the mouse is greater than 400 do this
134:06 - other thing and otherwise in all other
134:08 - cases do this last thing so for any
134:11 - conditional statement I'm thinking about
134:12 - this whole thing as a conditional
134:13 - statement you always have to have at
134:16 - least an if option you can have an else
134:19 - but you can only ever have one else that
134:21 - otherwise in all other cases now you
134:24 - could actually insert as many other else
134:27 - ifs as you want in between this
134:29 - beginning and end let's take a look at
134:31 - that in the code okay let's change 320
134:34 - to 200 let's say else if now Mouse X is
134:39 - greater than 400 draw the square and
134:42 - then in all other cases I'm going to
134:45 - draw a
134:46 - line
134:49 - so I just did some quick math in my head
134:51 - to draw a diagonal line we'll see if we
134:53 - got if I got that right okay great all
134:55 - other cases draw that diagonal line now
134:59 - if the mouse is greater than 200 draw
135:01 - the circle and otherwise if the mouse is
135:04 - greater than
135:05 - 400 why is that wrong take a look at
135:08 - that code syntax wise I have not made
135:11 - any error the program runs processing's
135:14 - not telling me anything is wrong with
135:15 - this code but the result
135:18 - is not what I intend why is
135:22 - that it's very important for me to
135:25 - mention that only one of these things
135:28 - can ever happen only a or b or c it can
135:31 - never be both a and b or a and C or B
135:34 - and C or all of them so why is B never
135:38 - happening well let's think about the
135:40 - number
135:41 - 450 is the number 450 greater than 400
135:45 - yes so if the mouse is at 450 this would
135:48 - be true but we've got to start here 450
135:52 - Starts Here is 450 greater than 200 yes
135:55 - it's also greater than 200 so shape a is
135:59 - going to be drawn the square once a
136:01 - Boolean expression in an if statement in
136:03 - a conditional statement evaluates to
136:05 - true you immediately skip to the end and
136:08 - go on with the code so only if this is
136:10 - false do we ever come and check this and
136:13 - then only if this is also false do we
136:15 - ever execute C knowing that
136:18 - how would I fix this think about that
136:20 - there's two solutions well there's more
136:21 - than two but there's two solutions that
136:24 - I'm thinking of here that I'm curious if
136:25 - you're thinking about solution number
136:27 - one I could check 400
136:31 - first if I check 400 first 450 is going
136:35 - to trigger the circle and I wanted it to
136:37 - be a square so maybe I should be
136:39 - consistent not that it really matters
136:40 - these are arbitrary choices but 450 is
136:44 - going to trigger the square and then
136:45 - skip to the end 250 is not greater than
136:48 - 400 so the square will not be drawn but
136:51 - the circle
136:52 - will line circle square yes now the
136:58 - other solution I was thinking of was
137:00 - changing the greater than to a less
137:06 - than now again where which shape goes
137:09 - that's made up but I'm trying to be
137:11 - consistent although I wouldn't be
137:12 - surprised if I got it wrong now if I run
137:15 - it line Square Circle exactly the
137:19 - behavior I was looking for I also kind
137:21 - of like this because I'm used to the
137:24 - English language and I read from left to
137:26 - right I realize that might not be the
137:27 - case for you but now I actually have
137:29 - also the code in that order so I'm
137:31 - checking this section then this section
137:34 - and this section is the all other cases
137:36 - which kind of makes it a easier for me
137:38 - to parse it's also maybe worth noting
137:40 - that this kind of behavior would be
137:43 - really hard to do without the concepts
137:45 - of else if and else linked to an if
137:48 - statement if you only could make
137:49 - separate if statements you'd have to
137:50 - jump through a lot of Hoops to have one
137:52 - thing happen but not the other thing all
137:54 - right here's an exercise for you how
137:56 - about you take my code maybe instead of
137:59 - columns you try making rows that the
138:01 - mouse moves up and down and changes
138:03 - what's being displayed could you create
138:05 - four sections the reason why this is a
138:08 - really good thing for you to try is that
138:09 - you'll need to have two else ifs if else
138:12 - if else if else so give that a try and
138:16 - after you're done if you keep watching
138:17 - I'm going to demonstrate yet again one
138:20 - more thing that you can do with these
138:22 - statements it's not about changing the
138:23 - if or the else if but it's actually
138:25 - changing the way you form your Boolean
138:27 - expression with a logical
138:31 - [Music]
138:33 - operator okay now it's time to look at
138:37 - logical operators and by that I mean and
138:39 - or or not so why are these needed let's
138:43 - consider this Square I want now to
138:46 - implement a basic rollover functionality
138:49 - when my mouse hovers over the square it
138:51 - lights up and just brings a smile to my
138:54 - day so how do I know if the mouse is
138:56 - hovering over this Square well if this
138:59 - Edge is
139:01 - 280 I could say if Mouse X is greater
139:05 - than
139:05 - 280 now I'm not going to draw the square
139:08 - in the if statement I'm always drawing
139:10 - the square the only thing I'm going to
139:12 - change is what the fill color is fill
139:16 - 255 and now I'm going to have an else
139:19 - and I'm going to say Phill
139:22 - 175 all right let's try this oh
139:26 - beautiful look at my rollover well it's
139:28 - not perfect because it still lights up
139:30 - if I go up here over here it's lighting
139:33 - up I only am checking that one left edge
139:36 - of the square what if I want to also
139:39 - check now if it's less than 380 which
139:43 - would be the other side of that square
139:45 - well something weird that I could do
139:46 - that I don't really suggest although
139:48 - it's good to know that this is possible
139:50 - is I could put an if statement inside of
139:52 - this one so I could also say if Mouse X
139:54 - is less than 380 Phil 255 so look at
140:00 - this aha oh wait a
140:03 - sec ah wow I really messed up this logic
140:08 - here in such a weird way I would
140:10 - actually now have to put another else in
140:12 - here that would say Phill 175 I would
140:16 - have to put the else there right now I'm
140:19 - saying okay first check if it's greater
140:20 - than 280 oh no but in all other cases I
140:24 - also need to fill 175 oh this is awful I
140:27 - hate what I'm
140:29 - doing but at least now it works still
140:32 - the vertical edges don't change anything
140:34 - but now the horizontal edges do but this
140:37 - is really awful and convoluted what I
140:39 - really want to say the reason why I put
140:41 - that extra if statement inside is I want
140:43 - to say if Mouse X is greater than 280
140:47 - and mouse X is less than 380 that's when
140:52 - I want to light up the square and is an
140:56 - example of a logical
141:01 - operator the three logical operators are
141:04 - and or and not and you can use them to
141:07 - join more than one Boolean expression
141:09 - together if you have two Boolean
141:10 - expressions with an and they both have
141:12 - to be true for the end result to be true
141:15 - if you have two bullan expressions with
141:17 - an or only one of them has to be true
141:19 - for the end result to be true now let's
141:21 - get rid of this awful if statement
141:23 - inside of an if statement and just say
141:26 - and mouse X is less than 380 now I have
141:29 - some bad news for you you can't actually
141:32 - just say and it's not going to be that
141:34 - bad but this isn't going to work syntax
141:36 - error it's not actually missing in
141:38 - parenthesis it doesn't know what and is
141:40 - so in some programming languages The
141:41 - Logical operator and is just the word
141:43 - and but in Java which processing is
141:45 - built on this is not the case
141:47 - and and is written as two Amper
141:51 - Sands an or is written as two pipe
141:55 - symbols I'll try to show you where that
141:58 - is on the keyboard if that's unfamiliar
141:59 - to you and a notot is an exclamation
142:02 - point but again we're not really talking
142:03 - about the not just yet we'll come back
142:05 - to that in a little bit because I also
142:06 - want to talk about not
142:08 - equals all right drum roll
142:14 - please there we go working as expected
142:16 - but would really like to have the Y's
142:19 - working also I only want it to light up
142:21 - when the mouse is within that box
142:22 - luckily for me I can keep joining ANS I
142:25 - can have four things if all of them are
142:27 - true that's the only time you'll ever
142:29 - execute the code within that block
142:31 - within those curly braces so I can
142:33 - actually say
142:37 - and so I don't love how long that line
142:40 - of code became and there are other ways
142:42 - to reorganize and reactor is a kind of a
142:45 - fancy word for reorganizing your code to
142:47 - make make it a bit more readable but
142:48 - this is going to get me the
142:49 - functionality that I want right now if
142:51 - all of those things are true and only if
142:53 - all of those things are true Phill
142:56 - 255 otherwise Phill
143:00 - 175 I must have an error here oh my
143:03 - goodness I'm like it's not working this
143:07 - is not 180 that would be half the height
143:09 - the height of the square is 100 so this
143:11 - should be 230 but really we could
143:15 - protect ourselves against these kind of
143:16 - errors if I were using variables because
143:19 - I could
143:21 - say I'm going to use W to indicate the
143:24 - width of the square which is the same as
143:26 - the height so now I'm checking if Mouse
143:29 - X is greater than x and it's less than X
143:32 - plus W and if it's greater than y and
143:35 - less than y+ W now draw the square x y
143:41 - w and the reason why this is awesome is
143:44 - because now I'll just change the X and Y
143:47 - of the square make it
143:51 - bigger and it still works all of the
143:55 - code is pulling from those three
143:58 - variables look at this we just
144:01 - programmed a rollover it might seem like
144:03 - a lot of extra effort to have to program
144:06 - all the pieces of a rollover from
144:08 - scratch essentially as opposed to just
144:10 - saying put a roll over here and in some
144:13 - environments like if you start to work
144:15 - in the browser there are lot of built-in
144:17 - interface elements that you get for free
144:19 - depending on where you're programming
144:20 - and what you're creating but this is a
144:23 - really nice way to learn coding is to
144:26 - say what are the basic kinds of
144:29 - interface elements I use every day a
144:31 - rollover a button something that toggles
144:34 - on and off or something where you hold
144:35 - the button down this happens and I have
144:37 - two other things that I think would be
144:39 - interesting for you to try one is What
144:42 - If This Were a circle and not a square
144:45 - how would you detect if the mouse was
144:48 - inside the circle to accomplish this
144:50 - it's a little tricky you're going to
144:52 - need to think about the circle's radius
144:55 - which is half of the diameter the
144:56 - diameter being the argument you put into
144:58 - a circle to draw it and then you're also
145:01 - going to want to look into a function
145:03 - called dist for distance I'll make sure
145:06 - I include an example of how that works
145:08 - and if you've got questions about it
145:09 - definitely leave those in the comments
145:11 - as well but I've got another interesting
145:12 - challenge for you let's put the square
145:15 - back in the center and by the way the
145:17 - correct x value for it to be centered
145:19 - was 270 not 280 my math was off before
145:22 - the Y would be 130 and let's make it 100
145:25 - in width there the square is at the
145:28 - center okay here's the challenge instead
145:30 - of it turning white when I roll over and
145:33 - going back to gray what if when I roll
145:36 - over it still turns white but then when
145:37 - I roll out it fades away how would you
145:41 - accomplish that it's not really about if
145:43 - statements but this is a nice way to
145:44 - synthesize a couple different concepts
145:46 - that I've been showing you I'm about to
145:48 - give you a clue so if you want to try it
145:49 - without the clue pause right
145:51 - [Music]
145:54 - now if you do want the Clue the clue is
145:57 - and usually whenever I ask a question
145:58 - like this the answer is always is you
146:01 - need another variable so you need
146:02 - another variable what is changing now
146:05 - it's not just white or gray it's
146:07 - changing over time you're going to need
146:09 - a variable for that so give that a try
146:11 - and then I'm going to come back I'll
146:12 - show you the solution and we're going to
146:13 - look at some other things we never
146:15 - looked at or for example and I think a
146:17 - nice place where we're going to need ore
146:19 - we can finally get back to that ball
146:21 - that was flying off the edge and left
146:23 - let's see if we can make it bounce back
146:24 - and forth it's going to be an exciting
146:26 - and momentous occasion for us
146:30 - both all right how'd you do let's see if
146:33 - anything you did resembles the way I
146:35 - just coded it just now I didn't actually
146:38 - check to see if my code worked but
146:39 - luckily for me it is working whenever I
146:42 - move outside of the square it fades away
146:45 - so how did I accomplish this I added a
146:47 - new variable I called it Square bright
146:49 - maybe you could think of a better name
146:50 - for that for the brightness of the
146:51 - square it starts at zero which is why
146:53 - when the program first runs you're
146:54 - seeing it as black now critically I am
146:57 - always calling Phil by that brightness
146:59 - and always drawing the square so it's
147:01 - not about do I sometimes draw the square
147:03 - or not draw the square do I sometimes
147:04 - fill it not fill it I'm always filling
147:06 - it always drawing it the difference is
147:09 - that brightness value changes it always
147:12 - every time through draw Fades away so
147:15 - even if it's right now it's start at
147:17 - zero and is fading away negative numbers
147:20 - for processing are the same as putting
147:22 - in zero for color not for everything but
147:24 - in the case of Phil neg5 is the same as
147:26 - zero but anytime I hover the mouse
147:29 - inside the square the brightness is set
147:31 - to 255 now it's not fading out even
147:34 - though I'm saying Square bright equals
147:36 - itself minus 5 I set at 255 I draw it at
147:39 - 255 then it becomes 250 repeat draw set
147:43 - it to 255 draw it at 255 then it becomes
147:46 - 250 it only will render it at 250 if I
147:51 - move the mouse outside of the square and
147:54 - then it's going to do that many times
147:56 - per second here's another version of the
147:58 - same concept but with the window divided
148:01 - into four quadrants each one fading out
148:04 - as you move from one to the other if you
148:06 - want to give that a try pause right
148:14 - now here's the solution I just need four
148:17 - separate variables one for each quadrant
148:19 - and I need to use if and else if to
148:22 - figure out which one am I hovering in
148:24 - and which variable get set to 255 then
148:26 - I'm drawing all the rectangles
148:28 - decrementing all the values etc etc this
148:31 - one's a bit longer there's more stuff to
148:33 - it maybe you want to print it out and
148:35 - put it under your pillow to sleep with
148:36 - it at night and let it soak into your
148:38 - brain a bit but I'm here I'm ready to
148:40 - move on it's time to finally see what
148:43 - can we do to make that ball turn around
148:46 - when it hits the
148:47 - [Music]
148:51 - edge as promised here we are the ball is
148:54 - moving it's about to hit the edge what
148:56 - do we do well let's think about it what
148:58 - is the condition that would evaluate to
149:01 - true if the ball hits the edge The Edge
149:05 - is pixel 640 of course I always say that
149:08 - but technically if the width is 640 the
149:11 - pixels actually go from 0 to 639 it's
149:15 - just say 639 is sort of a not a fun
149:18 - number to say so let's just go with the
149:20 - edge being 640 even though that's
149:22 - technically one pixel past so let's
149:24 - start with something simple instead of
149:26 - having it turn around let's just have
149:28 - when it gets to the edge for it to
149:29 - reappear back on the other Edge this is
149:31 - actually easier and in fact we know how
149:34 - to get it to reappear by setting X to
149:36 - Zero we're doing that with clicking the
149:38 - mouse so let's actually get rid of this
149:40 - mouse pressed
149:41 - function and let's add an if statement
149:44 - in draw if x is equal to
149:47 - 640 then set X back equal to zero now
149:51 - this is incorrect and processing is
149:53 - already telling me it's incorrect why is
149:55 - it incorrect remember how I kept saying
149:57 - I was going to come back to
149:59 - this double equals wa we know equals is
150:03 - syntax you can use when I want to
150:05 - initialize a variable I set it equal to
150:07 - zero when I want to increment I set it
150:10 - equal to itself plus two so equals is
150:13 - the symbol you use when you want to set
150:15 - a variable to equal a certain value it's
150:17 - an assignment operation but that's not
150:20 - what we're doing we are writing a
150:22 - Boolean expression I don't want to set
150:25 - Mouse equal to 320 I want to know does
150:28 - Mouse x equal 320 that's a question in
150:32 - Java or processing which we're working
150:34 - with in this case the Boolean operator
150:37 - for checking if two things are equal is
150:39 - two equal sign a double equals so that's
150:43 - how we differentiate between asking the
150:45 - question does this equal this or saying
150:48 - I want this to equal this add another
150:51 - equals and let's run this
150:56 - sketch I'll
151:00 - wait yes this is awesome let's have it
151:03 - move a bit
151:04 - faster oh that's too fast let me change
151:07 - that to
151:10 - seven huh wait wait what happened there
151:13 - we're thinking the same thing again
151:15 - right if I'm adding seven every time to
151:18 - X it's possible that X is never going to
151:21 - actually equal 640 I mean 640 divid 7
151:24 - does not result in in a whole number so
151:27 - the ball is actually going to jump over
151:28 - pixel 640 so this is a case where even
151:31 - though I wanted to demonstrate double
151:32 - equals as the Boolean expression for
151:35 - checking if two values are equal it
151:36 - doesn't really make sense to use here
151:38 - what I really want to use is greater
151:41 - than or
151:42 - equals this will account for any time
151:46 - the Circle reaches the edge and hits it
151:48 - exactly or jumps over it so there we go
151:51 - now this is a perfectly looping Circle
151:54 - it will never stop it will always reset
151:56 - but it's not turning around is it how do
151:58 - we get it to turn around I don't know
152:00 - how you're thinking about how to do this
152:02 - but a common mistake and I think the way
152:04 - that I sort of like initially thought
152:05 - when I was first trying to learn this
152:07 - stuff was okay I got it I know that it
152:10 - should be plus seven to move to the
152:11 - right and it should be minus 7 to move
152:13 - to the left so why don't I put plus
152:16 - seven in here and then I'll use that
152:18 - fancy else that we learned about to
152:22 - otherwise say it minus 7 all right let's
152:25 - see what
152:26 - happens ah what well clearly our logic
152:31 - is flawed so I already know what's wrong
152:34 - maybe you do too but this is a nice
152:36 - opportunity for me to look at the print
152:38 - line statement again I want to look at
152:41 - the value of x every frame and something
152:44 - else that I could do here is I could
152:46 - could slow down the program quite a
152:49 - bit so this is something that I haven't
152:51 - explicitly addressed I mean I've talked
152:53 - about how the draw Loop happens over and
152:54 - over again but how fast does it happen
152:57 - over and over again on some level it's
152:59 - just trying to do it as fast as it can
153:01 - but it's actually locking it into a
153:04 - certain number of frames per second this
153:06 - is the way we talk about animation
153:08 - typically how many times do we redraw
153:11 - the image per second to create that
153:13 - illusion of motion it's going to be
153:15 - smooth smoother the more times we draw
153:17 - it per second so if I say one frame per
153:22 - second it's actually we're going to see
153:24 - it happening much more slowly and it's
153:26 - just going to the left it's just going
153:27 - negative and negative why is that well X
153:30 - starts out at zero and if x is greater
153:33 - than or equal to 640 oh oh my logic must
153:37 - be wrong I only want to go negative if
153:40 - it's greater than so let's let's fix
153:42 - that okay no problem this must be right
153:45 - now right all right this is promising
153:48 - the circle is moving to the right I mean
153:50 - I left the frame rate at one I probably
153:53 - now want to like let it run faster but
153:55 - good thing good news for you I can just
153:56 - speed up the video and then slow it down
153:59 - to see what happens when it gets to the
154:00 - edge I mean is it going to turn around
154:02 - when it gets greater than equal to 640 X
154:04 - will equal x - 7 let's see what
154:07 - [Music]
154:12 - happens okay it's at 602 here we go it's
154:15 - going get to 640 really soon what
154:19 - happens oh 64 what what what 644 637 644
154:26 - look at it's just moving back and forth
154:27 - like that it's stuck well I'm really
154:30 - glad I printed out the values because I
154:32 - can really see what's going on and it
154:34 - kind of makes sense if it's greater than
154:36 - 640 slide it back but then the next time
154:38 - it's not greater than 640 so it's going
154:40 - to move again oh it's greater than 64
154:42 - you slide it back that's why it's moving
154:44 - back and forth so this logic is is wrong
154:46 - I don't just want to decrease the value
154:48 - of x once I want to decrease it
154:50 - continuously and then maybe when it hits
154:53 - the other Edge increase it continuously
154:55 - you know what we need we need another
154:58 - variable we need a variable for that
155:00 - value seven I'm going to call that speed
155:05 - so
155:06 - X is always going to change by speed I'm
155:10 - going to take out the frame rate I'm
155:12 - going to take out this else take out
155:14 - this I'm going to run this X always
155:16 - changes by speed what do we want to do
155:19 - when X gets to the edge we want the
155:22 - value of speed to change the value of
155:25 - speed should now be
155:27 - -7 if speed is -7 x = x +7 is the same
155:33 - thing as x = xus
155:36 - 7 whoa oh oh so close but now we should
155:42 - know what we could do right if x is less
155:45 - than equal to Z
155:46 - Z speed equals
155:53 - 7 yes bouncing ball back and forth now
155:58 - this is something we can improve one
156:00 - thing that's a kind of clunky here is I
156:03 - wrote speed equals 7 here let me take
156:05 - the print line out we'll put it back if
156:07 - we ever need to debug what if I don't
156:09 - want it to be so fast let's make it
156:11 - four all right here it goes here it goes
156:14 - here it goes oh hope sudden it's faster
156:17 - so I changed this speed to four oh but
156:20 - now I got to change it in other parts of
156:21 - the code which is fine I could but
156:23 - ultimately I don't want to set the speed
156:26 - to a specific value I want to just take
156:28 - the speed and reverse its direction so
156:31 - if I have a positive number that I want
156:33 - to be negative whatever that number is
156:36 - what's an operation that I can apply to
156:38 - it to turn it into a negative multiply
156:41 - by negative one speed equals speed time
156:45 - * 1 okay but what if it's negative and I
156:49 - want it to be positive well guess what a
156:51 - negative time a negative is a positive
156:53 - number so I can also put here speed
156:57 - equals speed *
156:59 - nea1 and there we go it's working and
157:02 - whatever value I start the speed at it's
157:05 - always going to be the same speed look
157:07 - at this I've got the same exact line of
157:10 - code in both of those if statements if x
157:13 - reaches the right side reverse the speed
157:15 - if X reaches the left side reverse the
157:17 - speed what am I really saying here I'm
157:19 - saying hey either case if it's on the
157:22 - left or the right reverse the
157:24 - speed I'm did you hear what I just
157:28 - said I just said
157:31 - or we used and before that was kind of
157:34 - logical right we wanted to have the
157:36 - mouse Exposition greater than this value
157:39 - and less than this value now we've got a
157:41 - situation where an or makes sense if x
157:45 - is greater than equ Al to 640 or X is
157:48 - less than or equal to Z invert the
157:52 - speed oh that's just beautiful I love a
157:54 - good oldfashioned bouncing ball what is
157:57 - next let's add a
158:05 - y and of course I should really be using
158:07 - width and height not the hardcoded
158:11 - values there we go I've got an X and Y
158:14 - and now I need separate variables for
158:15 - the X speed and the YP speed oh I also
158:19 - want to draw The Circle at X comma y
158:21 - then I always change X by X speed and Y
158:24 - by yped and then I've got one if
158:27 - statement if it's on either the right or
158:29 - left Edge reverse the xeed if it's on
158:32 - either the top or bottom Edge reverse
158:34 - the YP
158:35 - speed there we go if you feel so
158:37 - inclined you can replace that circle
158:39 - with a nice DVD logo all right I don't
158:42 - know about you but this is very
158:44 - satisfying to me the fact that we have
158:46 - this circle bouncing beautifully off the
158:48 - edges using conditional statements is
158:50 - really a matter of practice I all I've
158:53 - done is show you all of the components
158:55 - I've covered if else if else we've
158:57 - looked at what a Boolean expression is
158:59 - how you can make them with a relational
159:01 - operators how you can join them with
159:03 - logical operators you're just going to
159:05 - need to rinse and repeat this over and
159:07 - over again and in fact that's what I'm
159:08 - going to be doing as I get to the next
159:10 - example the next example the next
159:12 - example in future sections of this video
159:15 - I do have a couple more things I want to
159:16 - show you I think before I move on let's
159:19 - take a moment to pause how about you try
159:21 - expanding this bouncing ball a little
159:23 - bit now you might be thinking oh I know
159:25 - I know what I want to do I'm going to
159:26 - add a second Circle maybe a third or a
159:28 - fourth I would say hold that thought I
159:31 - mean certainly if you want to try having
159:32 - two that just means you need two sets of
159:35 - variables X1 y1 X1 speed y1 speed X2 Y2
159:39 - X2 speed Y 2 speed you can see how that
159:41 - could quickly become unwieldy and I'm
159:43 - going to look at specific techniques for
159:46 - duplicating a concept in your code
159:48 - multiple times later what I might
159:50 - suggest is think about other things that
159:52 - could happen when the circle hits the
159:54 - edge of the canvas for example what if
159:57 - it changes color every time what if its
160:00 - size is always changing it hits the edge
160:02 - it gets bigger and it's like shrinking
160:04 - till it hits it again maybe the speed
160:05 - changes each time it hits the Edge O I
160:08 - know this is a hard one what if it was
160:11 - accelerating as it moves down almost
160:14 - like a gravity simulation give that a
160:16 - try see how you can expand this bouncing
160:18 - ball sketch I'll come back I'll show you
160:20 - some solutions and kind of wrap things
160:22 - up there's some missing pieces here I'm
160:24 - going to talk about what it means to
160:26 - have a variable whose type is Boolean
160:29 - that's kind of an important concept that
160:30 - I have it explicitly covered here so
160:33 - that will wrap up the conditional
160:34 - statement stuff and then we'll move
160:35 - along from there so take a little break
160:37 - and see you in a
160:41 - moment all right how'd that go for you
160:43 - this is what I did while you were
160:45 - working I made it so that every time it
160:47 - hits the edge it picks a new random
160:48 - color I also made the speed random every
160:51 - time you run the sketch so you can see
160:53 - here initializing xpeed and YP speed as
160:55 - a random number I've got new variables
160:57 - for RGB oh I did another thing I added a
161:00 - variable for radius which means when I
161:02 - draw the circle I need to say radius
161:04 - times two because radius is half the
161:06 - diameter why wasn't my variable called
161:09 - diameter you say I could have done that
161:11 - but the reason why I picked radius is
161:13 - I'm now checking the edges
161:16 - as the width minus the radius half the
161:18 - size of the circle or instead of at zero
161:21 - I'm checking the radius half the size of
161:23 - the circle that has a result if I slow
161:25 - it down to show you of the circle
161:28 - actually really bouncing off the edge
161:30 - feels a bit more realistic in terms of
161:31 - the walls of the canvas you can see here
161:34 - that in addition to reversing the X
161:36 - speeed and the yspeed I'm picking all
161:37 - new random values for rg&b and otherwise
161:40 - most of the code is the same so what do
161:43 - I want to show you next let's think
161:45 - about this feature that I might want to
161:47 - add what if whenever I click the mouse
161:50 - the ball stops if I release the mouse it
161:53 - keeps going well I know I have a mous
161:56 - pressed event but before I get to the
161:58 - mous Pressed event let's look at
162:00 - something else in the processing
162:01 - reference look here under Mouse so first
162:04 - of all there's a lot of other functions
162:05 - related to interacting with the mouse
162:07 - but I want to point out that there's a
162:09 - mouse pressed parentheses and then
162:11 - there's just a mous pressed on its own
162:13 - well the mouse pressed parenthesis is
162:15 - the documentation page for that mous
162:17 - pressed event that I've already talked
162:18 - about mous pressed not the function
162:21 - happens to also be a built in variable
162:24 - just like Mouse X tells you where the
162:27 - mouse is mouse pressed tells you whether
162:29 - the mouse is down or not now this brings
162:32 - up a really fascinating question what is
162:35 - the data type for mous pressed Mouse
162:39 - X the data type for Mouse X is
162:43 - integer any whole whole
162:47 - number mous
162:49 - pressed the data type is actually
162:54 - Boolean meaning the value of mouse
162:56 - pressed can only be one of two things
163:01 - true or
163:04 - false and right here on the processing
163:06 - reference page that if statement the
163:08 - Boolean expression is checking if mous
163:11 - pressed is equal to true now this is a
163:14 - very um verbose way of writing that
163:18 - let's put it in the code and by the way
163:20 - I only want to move the X and Y value if
163:24 - the mouse is pressed so I'll put those
163:27 - statements inside if Mouse pressed
163:29 - equals
163:30 - true oh I wanted to do I wanted to do
163:33 - the other way around but I'll show you
163:35 - that in a second so now I click the
163:38 - mouse and it moves I release the mouse
163:41 - and it stops X and Y are only changing
163:44 - if Mouse pressed equals true equals
163:47 - false now it's moving but if I hold down
163:50 - the mouse it stops release the mouse and
163:54 - it goes I was saying this is verbose
163:56 - because if a variable's type is Boolean
163:59 - you don't actually need to check if it
164:01 - is equal to true or false it's
164:04 - evaluating itself as true or false so I
164:07 - can actually just say if Mouse pressed
164:10 - same exact result but quite a bit
164:12 - simpler and this is fin finally time now
164:16 - for us to fill in this last logical
164:19 - operator not is an operator that you can
164:23 - apply to a Boolean expression to invert
164:26 - the tress or the falseness of it not
164:29 - true is false not false is true so right
164:32 - here I can say if not mous pressed not
164:37 - mous pressed is false because Mouse
164:40 - press is true so not is false so I don't
164:42 - move it okay there's so much more to
164:44 - this we could I could just be here for
164:46 - like weeks at a time but I'm just trying
164:48 - to show you the core basic components
164:50 - and really it's just going to be about
164:52 - practicing mixing and matching things
164:54 - trying out your ideas asking questions
164:56 - and so on and so forth hopefully this is
164:58 - helping you but I still have more even
165:01 - in terms of just these fundamental
165:03 - pieces the building blocks of
165:05 - conditional statements and Boolean
165:07 - Expressions here's the last bit I don't
165:09 - want the ball to stop when I'm holding
165:13 - down the mouse and go when I release the
165:15 - mouse I want to be able to just click
165:16 - the mouse and have it stop or click the
165:19 - mouse and have it restart I wanted the
165:21 - clicking the mouse to actually toggle it
165:22 - on or off using the mouse press variable
165:25 - inside of draw is a way of determining
165:28 - if you're holding down the mouse you're
165:29 - like checking it continuously Mouse
165:31 - press the function the event that I
165:33 - talked about earlier is a way of knowing
165:35 - if you just did a single click and once
165:37 - again the answer to this problem that
165:40 - I'm trying to figure out is I need
165:42 - another variable I can't use the Mouse
165:45 - pressed variable which is always going
165:47 - to go on and off based on whether I'm
165:48 - pressing the mouse I want my own
165:49 - variable my own switch is the ball going
165:52 - I want to be able to turn that on and
165:53 - turn this off so that's where I could
165:56 - create my own variable of type Boolean
166:00 - let's call it going and have it be set
166:02 - to
166:03 - false if going change X and Y run this
166:09 - code it's never going to move going is
166:12 - hardcoded to false nowhere in the code
166:15 - anywhere do I set it to True add the
166:17 - mous Pressed
166:18 - event and in here I'm going to say going
166:22 - equals true ready drum roll here we go
166:28 - press the mouse and it starts now I'm
166:31 - going to press the mouse
166:33 - again well anytime I press the mouse
166:36 - going is still going to be true I never
166:37 - said going back equal to false so how
166:40 - could I have it the next time I go
166:42 - through Mouse pressed I said going to
166:44 - false well if going is true then I want
166:48 - it to be false otherwise if it's false I
166:50 - want it to be true so I could actually
166:52 - say if going then going should be false
166:58 - otherwise going should be true so I now
167:02 - have this extra if statement that's
167:05 - checking whether they're going oh this
167:07 - is another thing I need to print out and
167:08 - put under my pillow I think if going is
167:11 - true it becomes false if going is false
167:14 - I go to the other and then it becomes
167:15 - true let's see if this works there we go
167:17 - it's not moving I click the mouse going
167:20 - is now true it's moving I click the
167:22 - mouse again going is false it stopped
167:24 - and so on and so forth there's another
167:27 - way we could write this and this is
167:28 - another one of those things like H this
167:30 - is kind of like a lot of lines of code
167:32 - for a very simple operation of just like
167:34 - flipping a switch well the not operator
167:38 - is our friend here
167:40 - because what if I were to write
167:43 - Noto
167:45 - what does this mean to you if the value
167:47 - of going is true then not going is false
167:52 - if the value of going is false then not
167:55 - going is true not false is true not true
167:57 - is false so what I really want to say
168:00 - inside of mouse pressed is going
168:05 - equals it not
168:07 - itself I want to take this Boolean
168:10 - variable and invert its truthness false
168:15 - becomes true true becomes false not
168:17 - moving click the mouse moving click the
168:21 - mouse it
168:22 - stops it
168:24 - works that was a lot this by the way
168:28 - unlike the rollover functionality or the
168:31 - holding down the mouse functionality
168:34 - this is like a button toggle it is
168:37 - something that happens and sets a state
168:40 - every time you press that particular
168:42 - button so here's an exercise for you
168:46 - maybe you can take a bunch of these
168:47 - Concepts and put them together could you
168:50 - now create a square somewhere on this
168:52 - canvas there's a bouncing ball and every
168:55 - time you click in the Square maybe it
168:57 - changes the color maybe it stops IT and
169:00 - starts maybe it changes the size could
169:02 - you create an interface to control the
169:04 - way the ball is bouncing give that a try
169:08 - this is actually the end of this whole
169:11 - section on conditional statements it's
169:13 - an incredibly important fundamental part
169:15 - you could really stop here not do any of
169:18 - the rest and just make lots of stuff
169:20 - with drawing and variables and
169:23 - conditionals and I encourage you to do
169:24 - that for quite some time before you come
169:27 - back if you've been frustrated by the
169:29 - fact that I'm only ever drawing one
169:31 - thing onto the screen stick around
169:34 - because when I come back I'm going to
169:35 - look at something called a loop now a
169:37 - conditional statement test a Boolean
169:39 - expression and does something or doesn't
169:41 - do it a loop can test a Boolean
169:44 - expression and repeat something over and
169:46 - over again so just sit with that for a
169:49 - minute take a break come back and I'll
169:52 - be showing you all sorts of stuff with
169:56 - [Music]
170:00 - loops welcome back one beard trim later
170:03 - and it is time to tackle Loops in
170:06 - programming we just spent a lot of time
170:09 - talking about if statements or
170:11 - conditional
170:12 - statements an if statement is what is
170:14 - known know as a control structure in
170:17 - programming it controls the path that
170:20 - the program is going to take if some
170:22 - Boolean expression evaluates the true
170:23 - then execute this code otherwise do this
170:26 - otherwise do this and so on and so forth
170:28 - this even has yet another name if we're
170:30 - talking about it as a control structure
170:32 - it's often referred to as a selection
170:34 - control
170:36 - structure but there's another kind of
170:38 - control structure for iteration or
170:41 - repeating something multiple times and
170:45 - if if is for a selection control
170:47 - structure the word for an iteration
170:50 - control structure well there's actually
170:52 - two
170:54 - options a while and a four now a four
170:58 - Loop is probably the one that I use 99
171:02 - times out of 100 and most likely you're
171:04 - going to find yourself using four Loops
171:06 - over and over again so you could make
171:08 - and I've heard this argument before just
171:10 - skip the whole while loop thing but I
171:12 - actually find the path to best
171:15 - understanding the for Loop is to take an
171:17 - if statement transform it into a while
171:20 - loop look at all of the details of how
171:23 - the while loop works and then move on to
171:25 - the for Loop so that's that's just how
171:28 - I've decided to demonstrate this to you
171:30 - [Music]
171:33 - today so why do we even need Loops in
171:36 - the first place let's write a nice
171:38 - sketch that draws a whole bunch of
171:40 - circles on the
171:43 - screen
171:47 - and there we go five circles each 50
171:50 - pixels in diameter and spaced out by 50
171:53 - pixels each this is all well and good
171:55 - but you could see where I'm going with
171:56 - this it's one thing to type out five
171:58 - separate lines of code for five circles
172:01 - but what if I want to have 50 circles or
172:03 - 500 circles or 5,000 circles this is a
172:06 - totally reasonable thing to do in
172:08 - processing draw lots and lots of the
172:10 - same thing over and over again and it
172:12 - would be pretty insane for me to have to
172:14 - write 500 lines of code just to draw 500
172:17 - circles this is where a loop comes in
172:20 - again I'm starting with the while loop
172:22 - within if statement I would say if some
172:26 - Boolean expression evaluates to True
172:29 - execute some lines of code a while loop
172:34 - looks exactly the same while some buan
172:38 - expression evaluates to
172:40 - True execute some lines of code the key
172:43 - difference here here is that if this is
172:45 - true the code's only going to execute
172:47 - once this code will continue to execute
172:51 - over and over again as long as this
172:54 - Boolean expression whatever it may be
172:56 - continues to evaluate to true so let's
172:59 - say at the top of this program I'm going
173:01 - to declare a variable
173:03 - X and I'm going to start that value at
173:06 - 50 now in draw I'm going to say while X
173:10 - is less than width as long as the value
173:12 - of x is less than the width of the
173:15 - canvas draw a circle at X Y 180 and 50
173:20 - pixels in diameter now looking at this
173:22 - code I have an immediate problem let's
173:25 - see what happens if I run this it's it's
173:27 - very dangerous what I'm about to do I do
173:29 - not recommend if you're following along
173:31 - with me you also run it especially if
173:33 - you have lots of other important things
173:34 - open on your computer but I'm going to
173:36 - take that risk right
173:38 - now we don't see anything the background
173:41 - hasn't even been drawn black no Circle
173:44 - appear it is stuck in what is known as
173:47 - an infinite loop at the moment we are
173:50 - testing if x is less than with and we
173:53 - know we initialize X to have the value
173:56 - of 50 so we're essentially asking the
173:59 - same question over and over again is 50
174:01 - lesson width is 50 lesson width and the
174:03 - answer is always true shouldn't we at
174:05 - least see one Circle maybe the
174:07 - background by the way the fan on my
174:09 - computer is starting to really go now we
174:12 - don't see anything because the sketch
174:14 - hasn't even made it to the end of draw
174:16 - for the very first time remember
174:18 - everything that happens in draw is
174:20 - happening off screen and then at the end
174:22 - of draw it updates it to the display
174:24 - you're actually looking at so while
174:25 - there's nothing syntactically wrong with
174:28 - what I wrote it is fundamentally flawed
174:31 - logic wise and I'm I'm spending a lot of
174:33 - time showing this to you because this is
174:35 - going to happen to you even once I show
174:37 - you how we break out of this Loop what
174:39 - is the proper way to think about and
174:41 - write a loop it's impossible not to make
174:43 - the mistake of writing an infinite Loop
174:45 - every so often and fortunately for us
174:47 - even though this particular program is
174:50 - frozen it hasn't shut down or messed up
174:52 - our entire computer I can still go to
174:54 - the browser and click around and then
174:56 - come back to processing and hit stop to
174:59 - get out of that Loop so whenever you
175:01 - write a loop you've got to make sure
175:04 - that you're thinking about something
175:05 - called an exit
175:08 - condition and here the way that I can
175:11 - have an exit condition is to manipulate
175:14 - the value of x during the loop so maybe
175:16 - the first time through the while loop X
175:18 - is 50 then it's 100 then it's 10050 so
175:23 - at the end if I were to say x = x + 50
175:28 - then every time through this Loop by the
175:30 - time we get to the end we increase the
175:32 - value of 50 draw the circle again
175:34 - increase it by 50 draw the circle again
175:37 - and eventually at some point x is going
175:38 - to be greater than WID this will
175:40 - evaluate to false and we'll exit out of
175:42 - the loop and continue with the code let
175:44 - let's take a look at
175:46 - that I don't see any circles but I do
175:49 - see the background we're not stuck
175:51 - anymore you have to remember something
175:53 - that's really odd about what we're doing
175:55 - here so even though here I am in a
175:57 - vacuum this little section of this long
176:00 - course all about processing I'm just
176:02 - talking about a while loop but I can't
176:04 - forget about the context that I'm in I'm
176:06 - writing the while loop in this draw Loop
176:10 - so draw is actually looping oh this is
176:12 - very confusing but let's follow the code
176:16 - I have a global variable X which has its
176:19 - initial value of 50 then I draw the
176:21 - background I say I'm going to draw
176:22 - anything white and then I draw a circle
176:25 - at 50 then at 100 then at 150 then at
176:28 - 200 250 etc etc till eventually get past
176:30 - 640 the Y Loop exits and we go back to
176:33 - draw again what's the value of x the
176:37 - next time through draw the value of x is
176:40 - now already greater than the width so
176:43 - really what need needs to happen is
176:45 - every time in draw I need to start with
176:48 - X having the value 50 and there we go
176:51 - this is the result I was looking for I
176:53 - only have one line of code that calls
176:56 - the circle function but I've wrapped it
176:57 - inside of a loop to implement some logic
177:00 - to call Circle many many times within
177:03 - one cycle through draw I could make
177:05 - these circles 10
177:07 - pixels and now I have many many more of
177:10 - them looking at this code it resembles
177:14 - very closely the code that I wrote just
177:17 - to move something across the canvas
177:20 - itself look there's a circle it's drawn
177:22 - at the value X and every time through
177:25 - draw X is moving up by one but we want
177:28 - to see just one Circle and want to move
177:30 - it one time every cycle through draw to
177:33 - create the illusion of motion yes draw
177:35 - is a loop but its Loop is for the
177:37 - purpose of Animation if what we want to
177:40 - do is repeat something multiple times
177:42 - inside of Any Given frame of with that
177:44 - animation that's where we need a while
177:46 - loop and eventually in just a moment a
177:49 - four
177:52 - Loop but before I'm ready to move on I
177:55 - want to point out something really
177:58 - critical here in this sketch I've
177:59 - declared a global variable float x
178:01 - equals 10 that's the way I've been
178:03 - declaring variables all along they're
178:05 - always at the top I use them anywhere in
178:07 - the code setup draw Mouse pressed Etc
178:10 - but here the value of x has to be reset
178:13 - back to 10 every time through draw in
178:16 - order for this while loop to perform the
178:17 - way I want it to perform so while this
178:19 - code works and it's really fine there's
178:21 - nothing inherently wrong with it this is
178:23 - a really good time for me to introduce
178:26 - another concept about the way that
178:29 - variables can be declared and used and
178:31 - there's a reason why I spent all this
178:33 - time talking about the variable as a
178:34 - global
178:36 - variable because you can also have what
178:39 - is known as a local
178:41 - variable and in this case I really only
178:45 - need that value X just for the purpose
178:48 - of this while loop X exists solely to
178:51 - draw a whole bunch of circles at once
178:53 - and then I'm done with it so that means
178:55 - I can delete float xal 10 at the top and
178:58 - just make sure that in draw when I'm
179:01 - first going to use x I give it a data
179:04 - type I'm essentially declaring X inside
179:07 - of draw this means if I were to say
179:09 - something like x equals 10 in setup the
179:12 - error is the variable X does not exist
179:16 - because it doesn't exist in the land of
179:18 - setup any variable declared within a
179:21 - block of code between any given curly
179:24 - brackets is only available to you inside
179:26 - of those curly brackets now this might
179:28 - just seem like some conceptual thing
179:30 - right now like why do I care why would I
179:32 - use one versus the other I think this
179:34 - will make more and more sense to you
179:36 - over time but I would say that the
179:39 - reason right now I don't want to have it
179:41 - as a global variable is just much neater
179:43 - and TIY like I just want my X to be
179:46 - right here with my Loop that's all it's
179:48 - for I don't want to use it anywhere else
179:50 - and maybe I actually might want a
179:52 - different X somewhere else in my code
179:54 - and this would allow me to do that
179:56 - variable scope this is the concept of
179:58 - scoping your variables there's no reason
180:00 - to scope your variables in a wider way
180:03 - than where you need them because that
180:05 - only introduces a little bit of extra
180:07 - confusion let's turn now to the for
180:10 - [Music]
180:12 - Loop
180:14 - so we've established an example while
180:17 - loop that looks like the following we
180:19 - have a variable called X that we
180:21 - initialize to
180:23 - zero then I use the keyword while
180:26 - followed by a Boolean
180:30 - expression open and close curly brackets
180:34 - and inside those curly brackets inside
180:37 - this block of code I perform some action
180:40 - like draw a
180:42 - circle and then increment the value of x
180:45 - so that at some point the buo expression
180:47 - evaluates to false and the code can move
180:51 - on this style of loop is so commonly
180:56 - used that the for Loop exists to take
180:59 - all the parts of it and condense it into
181:02 - one line let's take a look at how that
181:05 - is
181:10 - written I'm here to tell you that these
181:13 - two Loops are exactly the same a for
181:17 - Loop is created with three parts there
181:21 - is the
181:23 - initialization the Boolean
181:26 - test and an incrementation
181:31 - operation the order of these is
181:33 - precisely the same as what I've written
181:36 - here the very first thing that happens
181:38 - is a variable is initialized X is
181:41 - declared as a floating point value and
181:43 - initialize to zero then the Boolean test
181:46 - is evaluated if x is less than with then
181:49 - we execute whatever code is in here like
181:52 - draw a circle then at the end the
181:55 - incrementation operation is performed X
181:58 - goes up by 10 the bullan test is done
182:00 - again if it's true we draw the circle do
182:03 - the incrementation operation check the
182:05 - Boolean test do the code etc etc so on
182:08 - and so forth until this Boolean test
182:11 - finally evaluates to false in which case
182:14 - the loop is then exited and whatever
182:15 - code happens after is then run in some
182:19 - ways I really love the while loop
182:21 - because it's written in a way that's
182:22 - more clear to me this initialization
182:25 - happens at the start then we check the
182:28 - Boolean expression draw the circle
182:30 - increment X check it again draw the
182:32 - circle increment X check it again maybe
182:34 - it's false exit the loop the things
182:37 - happen in the order that they're written
182:39 - but this for Loop is exactly the same
182:42 - and it's just a very very common
182:44 - conventional way of writing a kind of
182:46 - loop now we're just kind of in the place
182:48 - where it's useful to practice them both
182:50 - there are some rare occasions where you
182:52 - really need to use a while over a for
182:54 - Loop and probably as you get more
182:56 - comfortable with programming you're
182:58 - going to focus on using the for Loop
183:00 - most of all so let's go and try adding
183:03 - that into our code itself now I'm going
183:05 - to comment out the while loop so that we
183:07 - can keep it there for reference and by
183:10 - the way I can comment out a whole block
183:12 - of code by highlighting it and then
183:14 - using command slash or control slash on
183:18 - Windows okay four initialization
183:22 - condition semicolon Boolean test
183:26 - semicolon incrementation
183:29 - operation open curly bracket close curly
183:32 - bracket and then whatever code I want to
183:35 - happen over and over again inside that
183:37 - loop I put between the curly
183:39 - brackets so when I hit run we should see
183:42 - the exact same result as what I had with
183:44 - the while
183:45 - loop and there we go this is also a nice
183:49 - moment to just be reminded of the fact
183:51 - that there's always a shorthand for
183:53 - these incrementation operations instead
183:55 - of saying xal x + 10 I can just say X
183:59 - plus equals 10 for the exact same result
184:03 - also just to be consistent I I'll have X
184:06 - start with 10 since that's what I did
184:07 - with the while loop okay this is a great
184:10 - time to pause why don't you try and see
184:12 - what kinds of designs can you make with
184:14 - a for Loop or a while loop could you
184:16 - make colorful stripes maybe vertical
184:18 - ones horizontal ones what other kinds of
184:21 - shapes can you repeat could you make a
184:23 - set of concentric circles where the loop
184:26 - is altering the diameter of each circle
184:29 - every time through another thing that's
184:31 - fun to try is what kinds of designs can
184:35 - you place onto a grid like a
184:37 - checkerboard feel free to give that a
184:39 - try but when I come back I'm going to
184:42 - show you how to do that by nesting one
184:44 - for Loop inside of another
184:48 - [Music]
184:51 - one all right I hope you had fun
184:54 - experimenting with loops let's take a
184:56 - look at a particular scenario that is
184:59 - incredibly common in computer
185:05 - Graphics a grid I I admitt this is a
185:08 - rather poorly drawn grid but I think you
185:10 - get the idea a system of
185:13 - columns and rows this could be relevant
185:17 - for a game that you might be designing
185:20 - an image made up of pixels is organized
185:23 - into columns and rows so many different
185:26 - scenarios that you might find yourself
185:29 - wanting to program are going to involve
185:32 - something like this so a good place for
185:35 - me to even just start is how would I
185:38 - draw a grid of squares filling up a
185:41 - canvas let's begin by creating a
185:44 - variable called
185:47 - spacing spacing will refer to the size
185:51 - of every Square every cell on that grid
185:54 - I want X to begin at zero I want to go
185:58 - all the way to the edge and I want to
186:01 - increment X by
186:03 - spacing then I want to draw a square
186:06 - instead of a
186:07 - circle and the size of the square is
186:10 - spacing there you can see I have a line
186:12 - of squares across
186:15 - horizontally I'm going to say no fill
186:18 - and stroke
186:19 - 255 there we go now what I need to do is
186:24 - I want to take this concept of having
186:27 - all of the columns and I want to
186:29 - duplicate that for every row so this
186:33 - value 180 if I have that be zero we'll
186:38 - see the squares across the top if I
186:40 - change that to 20 we see see the squares
186:44 - across y equal 20 so instead of a
186:47 - hardcoded value for y what I want is
186:51 - another
186:53 - loop and I want that Loop to wrap around
186:58 - the X Loop and then this 20 becomes Y
187:03 - and there we go there's our grid
187:06 - essentially what I'm saying is for every
187:10 - y draw a whole bunch of squares for
187:13 - every X start with a y and do the X Loop
187:17 - then increment Y and do the X loop again
187:20 - then increment Y and do the X loop again
187:22 - and so on and so forth and here we see
187:25 - that outer loop y with an inner loop of
187:28 - X and that actually doesn't matter
187:31 - because I'm drawing the whole thing at
187:33 - once I could have the X Loop be the
187:35 - outer
187:36 - loop that has the exact same result but
187:40 - now conceptually what I'm doing I'm
187:42 - starting with One X drawing all the Y's
187:45 - incrementing X drawing all the Y's and
187:47 - so on and so forth what's fun about this
187:50 - is I could just adjust that spacing
187:52 - variable there it is with 50 now notice
187:55 - the width and height don't divide evenly
187:57 - into 50 so it's a little bit off-kilter
187:59 - here's some exercises you could try and
188:01 - I'll include solutions for them what
188:03 - happens if you take that spacing
188:05 - variable and change it over time can you
188:08 - zoom in and out of this grid how about
188:10 - making this a grid of circles instead of
188:13 - squares you might discover that the
188:14 - reference point for of a circle being
188:16 - the center is going to make this a
188:18 - little trickier than you might imagine
188:19 - this is a little bit of an aside but
188:21 - this is a wonderful spot to look at
188:23 - something called Ten print a really
188:26 - famous pattern in the history of
188:27 - computer Graphics which originated from
188:30 - one single line of code on a 1980s
188:33 - Commodore 64 computer to get there let's
188:36 - look at what happens if we add some
188:38 - Randomness remember the random function
188:41 - into our grid I'm G to take out no fill
188:45 - I'm Gonna Fill every square with a
188:46 - random
188:48 - color grayscale
188:50 - value now notice how much that's
188:52 - flickering this is because remember
188:54 - there's a draw Loop and every time
188:56 - through the draw Loop I'm picking new
188:59 - random values for every Square I could
189:01 - move all this code into setup so it only
189:03 - happens once but just quickly right now
189:05 - I'm going to add the function call no
189:07 - Loop in draw which causes processing to
189:10 - run draw only once there now I have a
189:13 - grid of random grayscale squares What If
189:17 - instead of a square I draw a diagonal
189:20 - line from the top left to the bottom
189:23 - right of each cell of the
189:26 - grid so that would be from
189:29 - XY to X+ spacing y+
189:34 - spacing it looks like I've just drawn a
189:37 - series of diagonal lines across the
189:38 - space but really these are lots and lots
189:40 - of small diagonal lines in every sing
189:42 - single cell of this grid I'm going to
189:45 - make the stroke weight two so that
189:47 - they're a bit more
189:48 - visible now what if I wanted to draw all
189:51 - those lines in the inverted Direction so
189:54 - instead of from the top left to the
189:56 - bottom right what about from the bottom
189:59 - left to the top right and this Phill
190:02 - random is no longer
190:03 - relevant so that would be from x y +
190:07 - spacing to X Plus spacing
190:11 - y there the line lines are all now
190:14 - shifted okay the pattern that I want to
190:16 - show you emerges when the lines are now
190:20 - randomly drawn either one way or the
190:23 - other way essentially a forward slash or
190:26 - a back slash this is how it was done on
190:28 - the original commodor 64 with printing
190:30 - forward slash and back slash now we're
190:32 - just drawing lines so I need some way of
190:35 - essentially flipping a coin well what if
190:38 - I pick a random
190:39 - number R is a random number between 0
190:44 - and 1 it's a floating Point number so
190:47 - there's a 50% chance it'll be greater
190:49 - than 0.5 and 50% chance it'll be less
190:51 - than 0.5 so I can actually just put that
190:54 - into an if statement if R is less than
190:59 - 0.5 draw the forward slash line actually
191:02 - that's the backward slash line but just
191:05 - pick one of them otherwise
191:08 - else draw the forward slash line all
191:12 - right you ready to see what this looks
191:14 - like wow suddenly we have a maze pattern
191:18 - so just this simple idea of random lines
191:22 - one way or the other on a grid pattern
191:25 - we can create this incredible intricate
191:28 - maze this is one of my favorite patterns
191:30 - you can do with a simple for Loop now is
191:32 - a great time for you to make your own
191:34 - version of 10 print I've actually done
191:36 - an entire separate video about coding
191:38 - ten print and many many people have
191:41 - submitted all sorts of beautiful
191:43 - variations on this pattern if you make
191:45 - your own I'll make sure to include
191:46 - information in the video description on
191:48 - how you can submit yours to the catalog
191:50 - of coding train 10 print designs all
191:53 - right so we're now at the end of the
191:55 - section on Loops I've given you just the
191:57 - basics of how a while loop Works how a
192:00 - four Loop Works we've looked at a few
192:02 - different examples and how we can even
192:04 - Nest them to make a grid it's certainly
192:06 - something that you're going to have to
192:08 - take quite some time of practicing that
192:10 - I'm going to have to come back to over
192:11 - and over again in future examples that
192:13 - I'm demonstrating down the road but I
192:15 - think we can safely move on so take a
192:18 - little break for yourself practice
192:19 - different patterns and Designs make your
192:21 - own 10 print and when I come back I want
192:24 - to look at something called an array
192:26 - which is highly linked to the concept of
192:29 - [Music]
192:36 - Loops all right folks we are really
192:39 - starting to put all the pieces of the
192:41 - programming puzzle together I have
192:43 - talked about variables conditionals
192:46 - Loops there's not a lot that just those
192:50 - Concepts you can't program but let's
192:52 - take a look at what I have going on here
192:54 - on the screen next to me I have this
192:56 - bouncing ball it has some variables an x
192:59 - a y and x speed a yped it has some
193:02 - conditionals if x reaches the edge
193:05 - multiply X speed by ne1 and so on and so
193:08 - forth below there are sevenish bounc
193:12 - balls we know that a loop is something
193:15 - that can be used to iterate to take this
193:18 - idea of drawing a circle and draw one
193:20 - multiple times but there's a lot more
193:23 - steps in between just this idea of a
193:25 - basic Loop and taking this concept of a
193:29 - bouncing ball and duplicating it I mean
193:32 - if I have an X and Y for one bouncing
193:35 - ball then do I need another X for the
193:37 - second and another X for the third I'm
193:39 - going to have so many variables
193:41 - ultimately and I want to mention it now
193:43 - because it's really important I want to
193:45 - package up everything that has to do
193:48 - with that bouncing ball into something
193:50 - called an object but before I even get
193:53 - there I want to just talk about what it
193:55 - means to have a variable that can store
193:59 - a list of information because this is
194:01 - going to be something really important
194:03 - eventually I want to be able to have a
194:05 - list of bouncing balls so I'm not going
194:08 - to get all the way there in this section
194:10 - but I am going to look at this concept
194:13 - of an array a list of data and look at
194:15 - how that relates to Loops that we just
194:18 - covered where to begin we're comfortable
194:22 - with this idea of a
194:24 - variable
194:26 - float x equals
194:30 - 100 I want to introduce now the concept
194:33 - of an
194:35 - array now in truth an array is a kind of
194:38 - variable it's a kind of variable that
194:40 - stores a list of things as opposed to a
194:43 - singular thing but just for the sake of
194:44 - argument right now let's think of the
194:46 - variable X as having one number and what
194:50 - if I have an array let's call that array
194:54 - values and I want it to have multiple
194:57 - numbers the way that I can hardcode a
195:00 - list of multiple values is once again
195:04 - using curly
195:06 - brackets now these curly brackets are
195:08 - not a block of code there's no code that
195:10 - goes in there I mean there's stuff I'm
195:12 - going to type in there but nothing
195:14 - executable the curly brackets in this
195:16 - case Mark the beginning of the array and
195:19 - the end of the
195:21 - array then I can store multiple values
195:25 - separated by commas but this begs the
195:28 - question what is the data type of values
195:31 - the data type of the variable X is a
195:35 - floating point value the data type of
195:38 - all of these inside of this array are
195:41 - floating Point values
195:43 - so I must write float here right but
195:47 - that's not enough to declare an array
195:51 - and specify its data type you need both
195:54 - the data type itself float but also you
195:58 - need an open and close square bracket
196:01 - yeah I know we've been using curly
196:03 - brackets a lot in our code now is the
196:05 - time with arrays to use square
196:09 - brackets in case it's not obvious to you
196:11 - there's a space there so I'm saying just
196:14 - like float X I'm saying float values but
196:17 - I'm putting an open and close square
196:19 - bracket next to float to indicate that
196:22 - this is an array now I will say that
196:25 - this is a pretty rare way to initialize
196:28 - an array with a predetermined set of
196:30 - values but it's a really good way for us
196:32 - to just ease our way into the concept of
196:34 - arrays by having a prefab it's all
196:36 - finished it's a list of four values
196:39 - let's go put this in our
196:41 - code
196:44 - now actually I want this data to mean
196:46 - something right now so that we can come
196:48 - up with an arbitrary example scenario I
196:50 - really love fruit do you love fruit
196:52 - let's think about this as an inventory
196:55 - for fruit I've got five mangos 22
197:00 - blueberries seven kiwis and my favorite
197:04 - I've got 11 plums now that I think about
197:06 - it let me make these values bigger
197:08 - because I'm going use them to draw stuff
197:09 - and pixel wise these are going to be
197:11 - kind of tiny
197:13 - I'll multiply everything by 10 now I'm
197:15 - going to draw a bar as a thick line in
197:17 - the center of the
197:22 - canvas so really I wanted a rectangle
197:24 - here to demonstrate a bar graph but I
197:26 - decided if I just make the line thick
197:28 - that might make things simpler but I
197:30 - noticed by the way when you make a thick
197:32 - line the default way it draws it is with
197:34 - these rounded ends so I can actually
197:37 - call the function stroke cap and change
197:41 - that to a square
197:43 - and there now I have my rectangle which
197:45 - is just a thick line that is 50 pixels
197:48 - High because I'm drawing the line to
197:50 - connect the center point to a point that
197:52 - is 50 pixels above the center point why
197:54 - am I doing this the point is what if
197:58 - what I want to do is draw this line
198:01 - pulling values from the array well
198:04 - notice how I have height divided by two
198:06 - minus 50 there that's the bottom of the
198:09 - bar minus 50 to the Top If I Had a
198:12 - variable like mangoes because I have 50
198:15 - mangoes or let's just say 75 right
198:19 - now I could put the variable mangoes in
198:22 - there and the bar would be 75 pixels
198:24 - High I could say 25 and it's 25 pixels
198:29 - high but how do I reference a value that
198:33 - is inside the array and let me call that
198:36 - array fruit so it has a more specific
198:38 - name or I'll say like fruit inventory
198:43 - what do I put
198:47 - there one of the fundamental principles
198:50 - of an array is that it is an ordered
198:53 - list of
198:55 - information meaning this is not just
198:57 - some bag full of numbers where they're
198:59 - just all a clump together the order is
199:02 - something that is fundamental to the way
199:04 - this array has been defined and every
199:06 - single value in the array can be
199:08 - specified by its index what do I mean by
199:12 - index if I were being super informal
199:13 - about this I might be well this is the
199:14 - first element the second the third the
199:16 - fourth and while that is true the index
199:19 - the indexes of an array start with zero
199:23 - so this is actually the zero element
199:26 - sure it's the first element in sort of
199:28 - traditional counting but in programming
199:30 - with arrays we always start from zero
199:34 - zero 1 2 3 and remember these square
199:40 - brackets well these Square brackets are
199:42 - very important throughout the lifetime
199:45 - of an array so if I have a variable
199:47 - called values that is of type array of
199:50 - floating point then I can work with any
199:54 - one of these values that is inside the
199:56 - array by referencing its specific index
199:59 - so if I were to say
200:02 - values square bracket to closed square
200:07 - bracket which element of the array am I
200:10 - talking about I'm talking about the
200:12 - third element or index two
200:16 - 012 and this is the answer to what I put
200:20 - where those question marks are I can now
200:23 - say fruit
200:25 - inventory
200:28 - index0 what will I see I'll see a bar of
200:31 - height 50 pixels oops I forgot my close
200:36 - parentheses there we go let's change
200:39 - that value to one let's not use values
200:42 - that will go off of the canvas so let me
200:44 - just change that to 100 great and if I
200:47 - used index two I'd see 70 index 3 I'd
200:50 - see 110 now here's a question for you
200:52 - what would happen if I typed the index 7
200:55 - in here 0 1 2 three there is no index 7
201:00 - let's run the sketch and
201:02 - see array index outof bounds exception
201:06 - welcome to an error message that you
201:07 - will see a lot starting today
201:10 - fortunately it's pretty helpful here it
201:11 - says says index 7even out of bounds for
201:14 - length four the array is of length four
201:16 - and we just tried to reference index 7
201:19 - so referencing an element that doesn't
201:22 - exist breaks your code now what if what
201:26 - I want to do is every time I click the
201:28 - mouse I see the next element of the
201:32 - array
201:34 - visualized I know I need the mouse
201:36 - pressed
201:37 - event and now what I need yeah the
201:40 - answer again is a variable
201:42 - I need a variable to store the current
201:46 - index into the array that I want to
201:48 - display so if I add a variable called
201:52 - index oh wait what's its data type my
201:56 - example is a little silly in that I made
201:58 - my array of numbers floating Point
202:00 - numbers so technically I could say 100.3
202:04 - that would be a valid number here
202:07 - although in terms of like a fruit
202:09 - inventory does it make sense to have
202:11 - like 10 three mangoes but this is not
202:14 - what's critical here the point is what I
202:16 - am trying to demonstrate is that I can
202:18 - have an array of any kind of data in a
202:21 - moment I'll show you an array of strings
202:23 - of text because I think that's a useful
202:24 - demonstration and I'm mostly just using
202:27 - floating Point numbers in all of the
202:29 - examples because it's kind of the most
202:32 - general purpose kind of number however
202:34 - this is a moment where I must use an
202:38 - integer because if I am going to use a
202:41 - VAR ible to talk about the index into an
202:44 - array this index cannot be 2.2 or 2.7 it
202:48 - has to be a whole number and processing
202:51 - the Java programming language will not
202:54 - allow you to put a floating Point number
202:56 - in as the index to an array so at this
202:59 - moment I now must create a variable
203:02 - let's say I'm going to call it index of
203:04 - type int for
203:06 - integer int index equals 0 let's plug in
203:12 - index here and let's run the code we're
203:16 - seeing the first element index zero into
203:19 - the array that's what's being drawn the
203:21 - height of 50 change this to one the
203:24 - height is now 100 I can now add in Mouse
203:28 - pressed index equals index + one so now
203:33 - when the sketch runs fruit inventory Zer
203:36 - is 50 I click the mouse fruit inventory
203:40 - one is now 100 70 110 not the most
203:44 - interesting demonstration visually but I
203:47 - am showing you how this works I now have
203:49 - a list of numbers I have a variable that
203:52 - tells me where in that list I want to
203:54 - currently be examining and looking at in
203:56 - order to draw something and then when I
203:59 - click the mouse I change that number and
204:01 - anytime I want to access something from
204:03 - the array I have to give the name of the
204:05 - array square brackets and the specific
204:07 - index into the array just for fun I mean
204:10 - maybe this is all just for fun I have no
204:12 - idea but just because this is a nice
204:15 - moment to do so let's look at a
204:17 - different data type besides just a
204:20 - number so I've been looking at floats
204:23 - for floating Point values I just talked
204:26 - about how an integer is for whole
204:28 - numbers
204:29 - only a string is a data type for a
204:34 - string of characters a piece of text so
204:38 - data type is string then I need a
204:40 - variable name maybe I call it
204:42 - message then I set that equal to a
204:45 - string of characters which is enclosed
204:47 - in quotes and I'll call it rainbow
204:51 - that's my message my message to you all
204:53 - is Rainbow semicolon to end the line of
204:57 - code let's look at that in our code so
205:01 - I'm going with fruits so I'm going to
205:03 - say string fruit name equals mango and
205:08 - then if I want to draw text to the
205:09 - canvas your friend is going to be the
205:11 - processing reference where you can see
205:13 - all the functions having to do with text
205:15 - I happen to know them most for the most
205:17 - part off the top of my head so I'm just
205:19 - going to put them in I'm going to say
205:20 - text align Center because I want my text
205:24 - to be centered text size I'm going to
205:28 - say 64 because I want to use a font size
205:31 - of 64 point then the text function will
205:35 - draw my fruit name and I want to give it
205:38 - a location I'll say in the middle but
205:41 - maybe down 64 pixels and by the way fill
205:45 - is what would set the color of the text
205:47 - so it's using a default fill of 255 but
205:50 - I could be more explicit and actually
205:52 - put it in there so this is showing what
205:55 - I want it to show and when I click the
205:57 - mouse it's going to go to the next
205:59 - element of the array fruit inventory but
206:01 - the fruit name is still mango because I
206:03 - just have a singular variable however if
206:05 - I wanted it to be a list of strings then
206:09 - I can add the square brackets here that
206:12 - tells processing that fruit name is
206:14 - going to be an array now maybe I want to
206:16 - add an S there that's just for my own
206:18 - personal code hygiene because it's going
206:22 - to be a list of things I'll give it a
206:23 - plural name but that's not at all
206:25 - required then I need the curly brackets
206:28 - and I can say
206:29 - mango
206:31 - strawberry kiwi Plum now I have an array
206:36 - of strings and just like I can look at
206:40 - every value from the fruit inventory
206:42 - array one at a time via an index I can
206:45 - say fruit names square bracket Index
206:48 - close square bracket run this
206:51 - sketch mango strawberry kiwi Plum a
206:55 - fruit inventory data
206:58 - visualization now you probably can guess
207:01 - what the problem with this sketch is
207:03 - what's gonna happen if I click the mouse
207:04 - again array out of bounds exception now
207:08 - it this looks like a very strange
207:09 - message index 4 out of bounds for length
207:13 - four well if this length is four
207:15 - shouldn't index four be right remember
207:17 - if the length is four the valid index
207:21 - values go from zero to three very
207:24 - important how would you fix that I think
207:26 - I'll leave that as an exercise to VI the
207:28 - viewer maybe you put an if statement
207:30 - there if index reaches the end of the
207:32 - array set index back to zero cycle
207:35 - backwards through the array so many
207:37 - things you could try what I would like
207:39 - to do next however is is look at what
207:42 - would it mean if I wanted to show all of
207:46 - the values of the array all at once
207:48 - instead of one at a time instead of
207:50 - having index be a global variable that
207:54 - changes every time I click the mouse
207:57 - what if I were to iterate through all of
208:00 - the values of the array and draw all of
208:06 - them did you just notice that I Ed the
208:08 - word
208:09 - iterate are you thinking what I'm
208:12 - thinking maybe this thing we just spent
208:15 - all this time discussing called a for
208:17 - Loop could be used in combination with
208:20 - an array what do I mean by
208:24 - [Music]
208:31 - that let's say for the sake of argument
208:33 - that what I want to do is print out all
208:36 - the values of the array to the console
208:39 - well I know there are four values in
208:41 - indices 0 through three print values
208:44 - zero values 1 values two values three
208:47 - done of course if my array has a lot
208:50 - more stuff in it this is going to get
208:52 - very unwieldy didn't we just go over all
208:54 - of this if I want to draw a lot of
208:56 - circles I don't want to have to say
208:57 - Circle so many times ha I could use a
208:59 - for Loop four I need an initialization
209:03 - condition I want to iterate over the
209:07 - index values of an array starting with
209:10 - zero so need a variable oh and the index
209:13 - values have to be integers so it should
209:16 - be type int I'll call it I short for
209:21 - index and give it the initial value of
209:23 - the beginning of the
209:25 - array zero then I need a Boolean
209:28 - expression I'm going to want to count
209:30 - through the array all the way up until
209:32 - how many elements do I have
209:35 - four and then I need an incrementation
209:37 - operation I want to go up by one I ++
209:42 - so this Loop if I were to just put print
209:47 - lni in here what would this Loop do I
209:51 - would start at zero Which is less than
209:52 - four so it would print out zero then it
209:53 - would go up by one which is less than
209:55 - four so it would print out one then it
209:57 - would go up by one which is less than
209:59 - four so it would print out two then it
210:01 - would go up by one which is less than
210:02 - four so it would print out three then it
210:04 - would go up by one four is not less than
210:06 - four exit the loop so we would see in
210:09 - the console
210:11 - 0 1 2 3 funny that looks just like these
210:16 - index values so if I were to put in here
210:21 - print Ln
210:24 - values index
210:28 - I this Loop is performing the exact same
210:32 - functionality as these four lines of
210:34 - code sure I needed three lines of code
210:38 - instead of these four but if this were a
210:41 - 100 values I would still only need three
210:43 - lines of code I want to talk about the
210:46 - number four in here a little bit more in
210:48 - a moment but right now we can just
210:50 - understand it as I'm saying I is less
210:53 - than four as the Boolean test because
210:55 - there are only four elements index four
210:58 - is invalid and four is not less than
211:01 - four that's why this is not less than or
211:02 - equal to so coming back to the sketch I
211:06 - now want to include a for Loop inside of
211:09 - draw and all of the stroke and fill
211:12 - settings are not going to change so I'm
211:14 - going to move the line down here and
211:17 - just put the two drawing functions
211:19 - inside of the
211:20 - loop 4 in IAL 0 I is less than 4 I ++
211:26 - notice how a for loop again is a block
211:28 - of code so the lines inside of that
211:31 - block it's convention to indent them
211:34 - helps make the code more readable and
211:36 - now instead of fruit inventory index
211:39 - let's get rid of this idea of a global
211:41 - variable
211:42 - index and instead I want to display the
211:46 - bar associated with fruit inventory
211:49 - index I and the name index I oh so it
211:54 - worked it iterated over every single one
211:58 - but it drew them all on top of each
212:00 - other I don't mean for this to be an
212:02 - elaborate demonstration of best
212:04 - practices for design and data
212:06 - visualization I'm just trying to show
212:08 - you a very basic example that shows how
212:12 - arrays work but I think I could do
212:15 - something here where I could space them
212:17 - out at least horizontally by doing
212:20 - something like let me create a local
212:23 - variable internal just to this Loop
212:26 - called X and I'm going to say x equal I
212:30 - * 50 so they're going to be spaced out
212:33 - by 50 pixels then the line is at X and
212:38 - the text is also at X
212:41 - whoops that's an interesting mistake I
212:44 - still have the top Point always in the
212:47 - center so the top point also has to be
212:50 - by X and let's space them out by more
212:54 - than just
212:56 - 50 better maybe the first one shouldn't
212:59 - be at pixel zero so let's add 100 to it
213:03 - 100 plus I times 100 maybe that text is
213:07 - just too big make it 24 point
213:11 - there we go again not the most amazing
213:15 - bar graph data visualization ever but
213:17 - you can see how with all of the data
213:21 - stored in arrays fruit inventory is four
213:25 - numbers fruit names those are four
213:28 - strings now I have a loop that just goes
213:31 - from zero all the way up to four but not
213:34 - including four and draws a line fruit
213:37 - inventory index I and text fruit names
213:40 - index I let's add one more thing I'm
213:43 - feeling very hungry today and I would
213:45 - like some more fruit blueberry sounds
213:48 - good I've added blueberry there and
213:51 - let's have 25 blueberries not too much
213:54 - I'll run the sketch oh I added another
213:59 - value to fruit inventory I added the
214:01 - string blueberry but I don't see it here
214:03 - why don't I see it there oh that's
214:06 - because the loop is only going up until
214:08 - 4 but now there actually are are five
214:11 - elements in the array so obviously I
214:13 - could just delete four and type five but
214:16 - something that I think is important to
214:18 - note is arrays actually store as part of
214:22 - themselves their own length and this is
214:25 - foreshadowing something I'm going to get
214:26 - to later this idea of properties inside
214:30 - of a variable what does that even mean
214:33 - don't worry I will talk about it in
214:36 - great detail but right now we can
214:38 - understand it as okay fruit names I want
214:41 - to make sure I iterate over all the
214:43 - fruit names I can actually instead of
214:46 - hard coding the length of the array I
214:48 - can say fruit names. length and now
214:52 - there we go we've got the blueberry as
214:55 - well now there's a flaw here which is
214:57 - that I could make a mistake and not have
215:00 - a matching number of fruit inventory as
215:03 - fruit names in which case everything
215:05 - would break and maybe there's a way to
215:07 - like package those two values together
215:09 - instead of having two SE seate arrays
215:11 - yes all of these are really good points
215:14 - but for right now I think this is an
215:16 - adequate demonstration of the core
215:19 - concept of an array of being able to
215:21 - initialize an array of numbers an array
215:23 - of strings an array of anything and be
215:26 - able to use all of those Elements by
215:28 - referencing it with a specific index
215:31 - whether it's one at a time or a loop
215:34 - iterating over all of them I'm trying to
215:37 - hold off on all of the details because
215:39 - they're going to be important later
215:41 - after we've talked about object-oriented
215:43 - programming but I do think it's worth me
215:45 - mentioning that this is fairly atypical
215:48 - it's not so often that you're hardcoding
215:51 - a list of numbers into an array you
215:53 - might be generating them pulling them
215:54 - from a data source creating them out of
215:56 - some mathematical function what if what
215:59 - I wanted to do right now is see all of
216:01 - this fruit visualized but it's a random
216:04 - inventory each time one thing that I
216:07 - could do is I could write another for
216:10 - Loop in setup to iterate over the array
216:13 - and reassign all of the
216:18 - values here we see that same for loop I
216:22 - starts at zero Boolean expression I is
216:24 - less than the length of the array
216:26 - incrementation operation i++ 0 1 2 3 4
216:31 - five elements we picked five random
216:34 - values if I run it again five new random
216:37 - values so this worked this did the job
216:39 - of what I was just trying to explain
216:41 - however it's a little weird like why did
216:43 - I pick all those values and then
216:46 - randomize them a moment later and also
216:48 - if I was going to have a thousand fruit
216:51 - things am I really going to type in a
216:53 - thousand numbers first just to write
216:56 - over them with new random values no so
216:58 - one of the things that I can do when
217:01 - declaring an array is just say I want to
217:05 - have an array with this many spots in it
217:08 - and then in a moment I'll fill all those
217:10 - spots and the way to do
217:13 - that is with the following syntax
217:17 - new this word new is important and I'm
217:20 - going to talk more about it again when
217:22 - we get to objects
217:24 - float because I want to make a new array
217:28 - of floats seems very redundant but
217:31 - that's just the way life is in a
217:33 - strongly typed language we've got to be
217:35 - very specific about everything
217:36 - everywhere and consistent square bracket
217:40 - 5 n s bracket so this is the syntax of
217:44 - declaring an array of a certain data
217:47 - type with a certain amount of space in
217:49 - it I want to declare a variable of name
217:52 - values whose data type is an array of
217:55 - floating Point numbers and the thing
217:57 - that I'm going to store in that variable
217:59 - is a new floating Point array with five
218:02 - spots in it this syntax is a little
218:04 - wonky Tak some getting used to but it
218:07 - also I think will be a bit more clear to
218:09 - you especially what this new word is for
218:11 - once we get to this thing called
218:14 - objectoriented programming which is
218:16 - coming oh I can't wait till we get
218:19 - there new float 5 let's just make sure
218:24 - this still
218:25 - works and there we go maybe you want to
218:28 - practice playing around with this try
218:31 - adding an element taking one element out
218:33 - changing the way it's drawn just use
218:35 - this code and sort of get comfortable
218:37 - with the concept of arrays maybe
218:39 - something you could try ey is having a
218:41 - sketch that you made have an array with
218:44 - several different colors in it and that
218:45 - could be your color palette for various
218:47 - things you're drawing what I would say
218:50 - is don't try to do that bouncing ball
218:53 - thing just yet don't try to make some
218:55 - animated behavior of a shape that's
218:57 - moving around and bouncing and then
219:00 - duplicate it a bunch of times with all
219:01 - sorts of different arrays for all the
219:03 - x's and the Y's don't do that stick with
219:05 - me because the next sections where I
219:09 - look at first the basic concept of a
219:11 - function and then this idea of an object
219:15 - is going to lead us to having arrays of
219:18 - objects and that's going to be the most
219:20 - powerful way to take an element that's
219:22 - in your animation in your scene in your
219:25 - processing sketch and have many of them
219:28 - all working together but I think it is
219:30 - worth taking some time to just practice
219:32 - the nuts and bolts of arrays with a
219:34 - sketch like this that's graphing a set
219:36 - of numbers using some strings maybe
219:38 - something you try is display playing the
219:40 - number associated with each fruit at the
219:42 - top of the graph so it might say you
219:44 - know 25 35 45 o and then could you do
219:48 - this this is a little tricky could you
219:50 - total all of the values how would you
219:52 - iterate over an array and add up all the
219:55 - numbers together and then display the
219:57 - total amount of fruit or maybe the
219:59 - average amount of fruit I don't know
220:00 - what that means exactly in this context
220:02 - but see if you could just try
220:03 - manipulating the array by adding all the
220:06 - numbers together by showing the values
220:08 - on screen trying it with color lots of
220:10 - things you could do take a little break
220:12 - for yourself and I'll be back to talk
220:15 - about functions in processing yeah yeah
220:17 - I know maybe you already know what a
220:19 - function is circle line fill stroke
220:22 - background those are functions what I'm
220:24 - talking about is writing and creating
220:26 - your own functions that's what's coming
220:32 - [Music]
220:36 - next welcome back I hope you had fun
220:39 - tinkering around with four loops and
220:40 - arrays those are fundamental concepts
220:43 - that are going to come back very soon as
220:45 - I build towards the final example that
220:47 - I'm imagining in this video series we
220:49 - got a ways to go still but we're getting
220:51 - there we're over the hump we're past the
220:52 - halfway point for sure there is another
220:55 - fundamental concept a building block
220:58 - that we need in order to realize all of
221:01 - our dreams and make anything happen in
221:03 - programming and those two things are
221:06 - functions and objects now for the moment
221:09 - I've only written functions here on the
221:10 - Whiteboard let's write objects
221:14 - also and maybe I want to briefly return
221:17 - back to this bouncing ball sketch to
221:19 - illustrate what I'm talking about look
221:21 - at this program there's like a whole lot
221:23 - of variables all at the top I'm doing
221:25 - some stuff in setup I've got some stuff
221:27 - in Mouse press all this code and draw
221:29 - there's no clear organizing principle to
221:33 - how I have built this sketch in
221:35 - processing which is fine the ball
221:37 - bounces I love it you love it but but
221:40 - what if I wanted to have more than one
221:42 - ball bouncing how can I get a handle on
221:45 - this sketch divide it up into parts and
221:48 - reuse aspects of code I've already
221:50 - written to duplicate Concepts within the
221:53 - code itself imagine if I could write a
221:56 - sketch that looked just like
222:02 - this what if I could have one variable
222:04 - and somehow inside that variable are all
222:07 - the properties of a ball and all the
222:09 - code that manages how that ball operates
222:11 - I could create a new ball in setup and I
222:13 - could execute commands on that ball
222:15 - bounce off of the edges Show Yourself
222:17 - draw yourself in the canvas this is
222:19 - where I'm going with this idea of
222:21 - encapsulating all of the properties and
222:25 - behaviors of something that's in a
222:27 - processing sketch into this idea of an
222:30 - object and that brings me to the concept
222:33 - of
222:35 - modularity how do I take a program and
222:39 - break it down into its separate parts
222:41 - and organize it in a nice clean way the
222:45 - second core concept of functions and
222:47 - objects is this concept of
222:51 - reusability maybe this has already
222:53 - happened to you where you've been
222:55 - writing a processing sketch and you
222:57 - wrote six or seven lines of code to do
222:59 - something and then all of a sudden you
223:00 - realize like oh I want to do that again
223:02 - that same thing let me copy paste those
223:03 - lines of code change it a little bit
223:05 - then copy paste it again and change
223:07 - those a little bit there's got to be a
223:08 - better way if I have written the code to
223:11 - execute some kind of idea what if I want
223:13 - to reuse that code several different
223:15 - times in a processing sketch so my goal
223:17 - here is to get all the way to explaining
223:20 - all of the details in terms of how this
223:23 - little preview of objectoriented
223:27 - programming works but right now I want
223:29 - to set all of this completely to the
223:31 - side before I can get to all of the
223:34 - details I'm much too excited to talk
223:36 - about object-oriented programming but
223:38 - we're not ready for it yet before I can
223:40 - get to that I need to just talk about
223:43 - what is a function and how do you define
223:46 - and call your own
223:51 - functions it would be completely
223:54 - reasonable for you to say to me right
223:56 - now what are you even talking about I
223:57 - know what a function is here's an
223:59 - example of
224:01 - one here's an example of another
224:04 - one this whole time all throughout this
224:07 - coding Journey we've been over and over
224:09 - again calling functions the circle
224:12 - function the background function The
224:13 - Fill function the stroke the line the
224:15 - triangle those are all functions that
224:18 - are defined inside the processing code
224:21 - base our use of them demonstrates the
224:24 - power of modularity and reusability if I
224:27 - want to look for the part of the code
224:28 - that draws a circle I can find the call
224:31 - to that function if I want to draw more
224:34 - than one Circle I can call the circle
224:36 - function twice somewhere behind the
224:39 - scenes in the larger code base that is
224:41 - processing is written all of the
224:43 - underlying code to set the background
224:47 - color to draw a circle on the screen so
224:51 - if these are processing defined
224:57 - functions how could you define your own
225:00 - function what if you wanted to write the
225:03 - following
225:06 - code there is no unicorn function in
225:09 - processes thing but if you want to write
225:11 - all of the code to draw a unicorn and
225:14 - name that function unicorn you could
225:16 - call the Unicorn
225:18 - function so how does this work how do
225:21 - you define your own functions maybe you
225:24 - remember way back when several hours ago
225:26 - at this point I talked about the
225:29 - functions setup and draw setup and draw
225:32 - control the flow of a processing sketch
225:35 - setup Begins the processing sketch runs
225:38 - once draw then follows and happens over
225:40 - and over again mouse pressed is one you
225:42 - could also have it executes the code
225:44 - anytime you click the mouse and when I
225:46 - looked at those I said don't worry about
225:49 - the parentheses and the curly bracket
225:51 - and that weird word named void someday
225:54 - I'm going to talk about what those mean
225:56 - now is that time those are actually
226:00 - function definitions this is the code
226:02 - that defines the setup function this is
226:06 - the code that defines the draw function
226:09 - and this is the code that defines the
226:11 - mouse pressed function the odd thing
226:14 - about these functions setup draw and
226:16 - mouse pressed is that they are special
226:18 - in the sense that processing is asking
226:21 - you to write those functions processing
226:23 - knows to look for the setup function for
226:25 - the draw function Mouse pressed and
226:27 - knows when to execute those functions
226:29 - you don't actually have to say call
226:31 - setup call draw call Mouse pressed but
226:34 - if I wanted to draw my unicorn and call
226:37 - the Unicorn function I would have to
226:40 - look for the definition of the Unicorn
226:42 - function and to Define your own function
226:45 - the syntax is exactly the same as
226:48 - defining setup draw Mouse press
226:52 - Etc defining a function involves four
226:56 - parts void I'm still not going to tell
226:58 - you why it says void there but I'll get
227:00 - to that and I'll just tell you right now
227:02 - this is known as the return
227:04 - type then there is the function name in
227:08 - this case unicorn it is a name that you
227:10 - choose to make
227:11 - up the convention is for it to be just
227:14 - like a variable name start with a
227:15 - lowercase letter you can't start with a
227:17 - number and don't use something that's
227:20 - already part of processing like don't
227:21 - call your function Circle next is an
227:24 - open parentheses and a close parentheses
227:27 - what goes in here are the functions
227:30 - parameters now you might have noticed
227:33 - anytime I Define setup or Draw or Mouse
227:36 - press there there's nothing between the
227:37 - parentheses there are no parth ders but
227:40 - whenever I call the circle function I've
227:43 - got to say hey this circle should be at
227:45 - this XY with this diameter the
227:47 - background should be this grayscale
227:49 - color the parameters are what Define
227:53 - what arguments are expected to be sent
227:56 - into the function when it's executed so
227:59 - setup draw and mouse press don't have
228:01 - any parameters and maybe when we start
228:02 - our first function definition when I
228:04 - start to demonstrate this with code
228:06 - we'll leave that blank and then slowly
228:08 - fill it in I said there were four parts
228:11 - so we have the return type the name of
228:13 - the function the parameters and then I
228:14 - guess the fourth part is really just
228:16 - what is the code that should be executed
228:19 - when the function is called and that is
228:22 - written inside the curly brackets it is
228:25 - another block of
228:27 - code maybe this could be called the body
228:29 - of the
228:31 - function I'm not sure if that's actually
228:34 - a term or if I just made that up right
228:35 - now but it's the code that goes inside
228:37 - the definition all right so I'll unicorn
228:40 - is probably way tooo much for me to try
228:41 - to draw right now let's think of
228:43 - something else delightful that we could
228:45 - draw that's not just one shape how about
228:48 - a
228:51 - lollipop it's a little bit of
228:54 - skew there we go lovely lollipop maybe
228:58 - it should be
229:02 - blueberry delicious so what I'm doing
229:06 - right now is essentially going back to
229:07 - the beginning of this series is where
229:09 - all we did was draw shapes in a canvas
229:12 - in processing and just for the sake of
229:15 - argument here let's just imagine that I
229:17 - also want to draw the sun shining on
229:20 - this lollipop because it's a beautiful
229:22 - day outside the lollipop looks delicious
229:25 - and the Sun is bright and making us feel
229:27 - warm and
229:28 - happy Oh what a beautiful scene the sun
229:31 - shining on a lollipop so this is where I
229:34 - want to demonstrate first the principle
229:38 - of modularity
229:40 - [Music]
229:43 - what if I want to break my program into
229:45 - two parts the Sunshine part and the
229:47 - lollipop part I need to define a
229:50 - function called
229:51 - sunshine and one called lollipop I have
229:54 - no idea how to spell lollipop I think
229:56 - that's right so here we've got the first
229:59 - three parts of each function definition
230:00 - the return type which is void got to
230:02 - explain what that means the name
230:04 - sunshine or lollipop the parameters
230:07 - which are empty just open close
230:09 - parentheses and then the body of the
230:11 - function so what goes in the body of the
230:13 - function well for sunshine I want the
230:14 - code that draws the sunshine for
230:16 - lollipop I want the code that draws the
230:22 - lollipop now it just so happens that I
230:24 - wrote These functions in between setup
230:26 - and draw but actually they could be
230:28 - anywhere I could put sunshine and
230:29 - lollipop after draw before setup I could
230:32 - put draw first then setup then the
230:34 - functions these are all Standalone
230:36 - blocks of code that execute a subsection
230:39 - of code the order that they happen has
230:42 - to do not with where they are written in
230:44 - the text file itself but the flow of the
230:47 - program setup is called automatically by
230:50 - processing first draw is called
230:52 - automatically by processing second and
230:53 - looped over and over again and then wait
230:57 - sunshine and lollipop are never executed
230:59 - there is no sunshine there is no
231:01 - lollipop because those are functions
231:03 - that I have defined so if I want the
231:05 - code the body of those functions to be
231:07 - executed I need to explicit call those
231:10 - functions and the way I do that is with
231:12 - the function name followed by open and
231:14 - close parentheses with anything in
231:17 - between that needs to be there based on
231:19 - what parameters are in the function
231:22 - definition in this case there are no
231:24 - parameters so all I need to do is inside
231:27 - draw maybe I want to call Sunshine and I
231:30 - want to call lollipop and there we go
231:32 - same exact sketch it does nothing
231:34 - different but I've now reorganized the
231:36 - code I've made it modular I have a
231:38 - sunshine function and a lollipop
231:40 - function if I want to change the way the
231:42 - sunshine works I know oh let me just go
231:45 - work on the sunshine function let me
231:47 - move it over a little bit there I like
231:49 - that a little bit better so next I want
231:51 - to focus on the concept of reusability
231:54 - what are parameters why are they there
231:56 - how do you define them how do you use
231:57 - them but before I get there for you
231:59 - maybe now is a good time for you to
232:00 - pause the video find a sketch that you
232:02 - wrote previously anything really and see
232:04 - if you can take something that was in
232:05 - draw or something that was in setup and
232:08 - break it out into its own function name
232:10 - that function define that function then
232:11 - call that function could you take your
232:13 - sketch and make it more modular by
232:16 - having different parts of it executed
232:19 - from within different functions that you
232:21 - define and maybe you will have a unicorn
232:23 - and a cupcake and a puppy and other
232:26 - things besides just a sunshine and a
232:28 - lollipop all right and then when I come
232:30 - back and you come back we'll talk about
232:33 - [Music]
232:37 - reusability all right now now I think
232:39 - that that lollipop is melting under the
232:42 - heat of the sun too much I want to move
232:44 - it over to the right so I'll just move
232:46 - the circle over to like a different X
232:48 - position
232:49 - 350 and then I'll move the rectangle
232:52 - over to
232:54 - 340 oh I didn't get that right I guess
232:56 - it's
232:59 - 345 you can see this is kind of awkward
233:01 - and this goes back to again the
233:03 - beginning of this whole series when we
233:05 - introduce the concept of a variable I
233:07 - want to be able to store values in
233:10 - variables so that I can manipulate them
233:12 - and update one thing which updates other
233:14 - things more easily this really ties in
233:17 - to this important principle of
233:20 - reusability with functions what if I
233:22 - want to draw more than one unicorn or
233:25 - really in this case what if I want to
233:27 - have more than one
233:29 - lollipop I can call the lollipop
233:31 - function twice it's executing the code
233:34 - twice but I only C1 because there's no
233:37 - way to modify the way the lollipop
233:39 - function happens it's drawing two
233:41 - lollipops one right on top of the other
233:43 - the result is US seeing just one this is
233:46 - exactly where parameters come in when I
233:49 - draw a circle I want to give it an X and
233:51 - A Y well this is ultimately what I want
233:53 - to do I'm essentially writing another
233:56 - shape function in processing the
233:58 - difference is it's a lollipop shape and
234:00 - I want to be able to Define it the same
234:02 - way that the circle is defined in
234:04 - processing by being able to draw a
234:05 - lollipop at a given XY and so par
234:08 - parameters are ultimately
234:12 - variables that are defined inside the
234:15 - definition of the function and they are
234:18 - initialized by the arguments that are
234:20 - passed in so I probably earlier in this
234:23 - video was using arguments and parameters
234:26 - interchangeably I don't remember when I
234:28 - said which but now is a moment for us to
234:31 - be very strict about that definition the
234:33 - parameters are the variables you define
234:35 - in the function definition and the
234:38 - arguments are are the values that you
234:40 - pass into the function when you call the
234:42 - function in other words if I want to
234:44 - introduce the Lollipop being drawn at an
234:47 - XY location I could Define an XY
234:50 - variable inside the parentheses in the
234:53 - function
234:54 - definition it's the same as any other
234:57 - variable declaration I need a type and a
234:59 - name and then if there are more than one
235:01 - parameter I need to separate them by a
235:03 - comma so that is new syntax the
235:05 - parameters are separated by commas
235:07 - processing is being very helpful to me
235:09 - right now in a couple of places it's
235:11 - telling me down at the bottom the value
235:13 - of the parameter X is not being used I
235:16 - Define the parameter I need to make sure
235:18 - I use it inside the code and what do I
235:20 - want to do with it I want to say the
235:22 - lollipop is drawn at an X and Y
235:26 - location and if I'm right the rectangle
235:30 - should be at xus 5 because the stick is
235:34 - 10 pixels wide and I want it to be
235:35 - centered under the circle now let's look
235:38 - at this area is tabbed and we can see
235:40 - here at the bottom the function lollipop
235:42 - expects parameters like this float float
235:46 - when I run the code the error is telling
235:48 - me that I have not specified the correct
235:50 - arguments that match the parameters in
235:52 - the function definition however you
235:55 - define a function you must call it in a
235:57 - way that matches it precisely so what I
236:00 - need are two floating Point numbers 320
236:04 - 240 400 240 let's try that
236:09 - and there we go two lollipops and this
236:12 - is it that's the basic principle at play
236:14 - here I can Define my own functions in
236:17 - order to divide the program up into
236:18 - different parts to help me keep things
236:20 - organized I can also add parameters to
236:23 - the functions so that those functions
236:25 - can be called multiple times and
236:27 - modified making the code reusable so now
236:31 - it's really just a matter of practicing
236:32 - this if you want an exercise what I
236:34 - might suggest is adding more parameters
236:37 - to the function definition of lollip Lop
236:39 - maybe you want to add a size parameter
236:41 - so you can pass in how big the lollipop
236:44 - should be you could do a flavor which
236:45 - would map to a color so give that a try
236:48 - I know it's going to be really hard to
236:49 - pause the video right now because when I
236:50 - come back I am going to finally explain
236:54 - what this word void means and why do
236:57 - function definitions have return
237:03 - types all right it's time what does it
237:08 - mean for a function to have a return
237:10 - type and why is it that every single
237:12 - function that I've showed you so far
237:15 - when I'm defining it has the return type
237:17 - of void what does void
237:20 - mean to illustrate this idea let's
237:23 - consider two functions that we've used
237:26 - quite a bit already in
237:28 - processing the circle function which
237:31 - takes three arguments the X the Y and
237:33 - the diameter of the circle and the
237:35 - random
237:36 - function which typically takes two
237:39 - arguments the minimum and maximum of the
237:41 - range of random numbers that you want to
237:43 - get out both of these functions perform
237:45 - a task the circle function draws a
237:47 - circle to the screen the random function
237:49 - picks a random number but as you may
237:51 - have noticed most of the time when we
237:53 - write the random function we're taking
237:55 - that value and putting it into a
237:57 - variable writing some code like float
238:00 - R equals random you could think of the
238:03 - random function as answering a question
238:05 - and then that answer is sent back out of
238:08 - the function and stored in the variable
238:10 - R it returns notice the use of the word
238:13 - return there it returns a random number
238:16 - between some minimum and maximum the
238:18 - circle function doesn't return anything
238:20 - it just performs its task drawing a
238:22 - circle to the canvas this is the idea of
238:25 - a return type the random function has a
238:28 - return type that return type is a
238:31 - float it returns a floating Point number
238:34 - the circle function does not return
238:36 - anything but it still has a return type
238:39 - what is that return type you've probably
238:41 - guessed it by
238:43 - now it's void functions that return
238:46 - something return some kind of data an
238:49 - INT a float a string Etc functions that
238:52 - don't return anything return void so if
238:55 - I were writing the definition of a
238:58 - function that returns something like a
239:00 - float instead of writing void I would
239:05 - write float I would put float as the
239:08 - return type if I have a return type I
239:11 - must have a statement at the end of the
239:14 - function that starts with the keyword
239:16 - return and then includes whatever value
239:20 - is actually being returned so presumably
239:23 - the random function has some amount of
239:26 - math or algorithm that picks the random
239:28 - number and then returns that value back
239:31 - at the end of the function definition so
239:34 - nothing that I've actually shown you so
239:36 - far in terms of the code that we've been
239:37 - writing requires a function that returns
239:39 - a value I have a feeling that this is
239:42 - going to happen pretty soon especially
239:44 - once I get into objects so hopefully
239:45 - this will begin to make a bit more sense
239:48 - once there's a scenario where we really
239:49 - need it but let's create an artificial
239:52 - one right now just to look at that
239:53 - syntax how about I write a function that
239:55 - receives as its argument a number let's
239:58 - say it's a distance in miles and it
240:00 - converts that distance to kilometers so
240:03 - the function has a return type float
240:06 - I'll call it miles to kilometers
240:09 - and the definition includes one
240:11 - parameter the value in
240:14 - miles and then it's my job to do the
240:17 - math and properly return the converted
240:21 - value from miles to kilometers the
240:23 - formula for converting from miles to
240:25 - kilometers is take uh the value miles
240:29 - and multiply it by
240:31 - 1.69 34 I think that's the precise value
240:36 - then I can take that variable and return
240:38 - it let's test
240:40 - it a marathon is
240:44 - 26.1 it's more like 26.2 I I don't know
240:47 - if that's the precise amount but you get
240:48 - the idea okay let me run the code and
240:51 - actually I I have an error here it's
240:52 - telling me the function miles to
240:55 - kilometers does not exist it does exist
240:57 - I've written it there I made a mistake I
240:59 - can see what it is do you see what it is
241:01 - there should be a capital T I don't
241:03 - remember whether I specifically said
241:05 - this earlier but if I didn't this is
241:07 - really important everything in
241:09 - processing is case sensitive so I'm GNA
241:11 - get an error unless I capitalize that t
241:15 - and then I realize also let me actually
241:17 - print the value out so we can see the
241:19 - result run the code again there's
241:22 - nothing being drawn just to wrap up this
241:24 - example let me draw two lines one in
241:27 - length in miles one length in
241:32 - [Music]
241:36 - kilometers and now we can see I have two
241:38 - lines one representing a distance in
241:40 - this case 100 in miles and the other in
241:43 - kilometers all right I really want to
241:45 - move on and get to object-oriented
241:47 - programming oh it's going to be
241:48 - beautiful it's a topic that will just
241:50 - bring everything together it'll help us
241:52 - wrap up this whole intro video series
241:55 - and we'll just launch you off into the
241:57 - rest of this journey of a lifetime
241:59 - programming and processing and Beyond
242:01 - but you should probably take a break for
242:02 - yourself get some fresh air stretch move
242:04 - your body around and also take a little
242:06 - bit of time to practice this idea of
242:09 - functions that return a value you could
242:11 - try something similar like converting
242:13 - Fahrenheit to Celsius maybe you have
242:15 - your own favorite mathematical equation
242:18 - that you could put into a function that
242:19 - returns a value maybe you're thinking of
242:21 - something even more creative that I
242:22 - can't possibly imagine give that a try
242:24 - take a little break and then we'll be
242:26 - ready ready for classes and
242:35 - objects hi again welcome oh this is a
242:37 - momentum this occasion I know I say this
242:39 - basically every single time I take a
242:41 - break and come back but this is the most
242:44 - exciting and important section of this
242:47 - whole video thank you for sticking
242:49 - around I mean it's been hours and hours
242:51 - for me it's been actually days of trying
242:53 - to record all this and we're finally
242:55 - here I'm finally going to talk about
242:58 - objectoriented programming classes and
243:01 - objects and it's going to just
243:03 - revolutionize the way that you think
243:05 - about and are able to organize your code
243:07 - and make processing sketches hopefully
243:10 - for the rest of time or however long you
243:13 - choose to program in processing or
243:15 - whatever you choose to program in
243:16 - remember this example that I made back
243:18 - in the section on functions we have
243:19 - these two lovely lollipops and the sun
243:22 - shining down on them I mean maybe we
243:24 - should think of them as flowers because
243:26 - it's a little weird to have the sun
243:27 - shining on the lollipops but that's not
243:29 - the point of what I'm saying what I want
243:31 - to talk about now is how we think about
243:35 - the elements that live inside a
243:38 - processing sketch learning about
243:40 - functions introduced you to the idea of
243:43 - reusability and modularity and in fact
243:46 - we have a modular program broken into
243:48 - parts and we're able to draw the
243:50 - lollipop twice reusing the same lollipop
243:54 - function but if I want to carry this
243:56 - idea forward and I want to start to have
243:58 - those lollipops or flowers animate maybe
244:01 - they grow maybe they bloom I want to
244:03 - have the sun maybe the sun sets and then
244:06 - the sun rises it would be very hard for
244:09 - me to continue this line of thinking
244:11 - with only functions I need something
244:14 - more let me go back to another previous
244:18 - example this is the bouncing ball sketch
244:20 - from the section on conditionals the
244:22 - code the way I've written is probably
244:24 - unrecognizable to you but just just look
244:26 - at it for a second let's just read it
244:29 - ball equals new ball wait where's the X
244:32 - where's the Y where's the X speed
244:35 - where's the Y speed there is none of
244:36 - that there is just the this idea of a
244:39 - ball
244:40 - ball. update ball. show where's the code
244:44 - where I call stroke and fill and circle
244:46 - to draw the actual bouncing ball all of
244:49 - that code is actually in an entire other
244:52 - part of this processing sketch a
244:54 - different tab I can click here on Ball
244:57 - and suddenly I see those variables and I
245:00 - see those calls to fill and circle and
245:03 - all of that logic to move the ball this
245:05 - code is the embodiment of the first
245:08 - principle of object-oriented programming
245:13 - encapsulation what do I mean by
245:15 - encapsulation so every example that I've
245:17 - written so far generally just has one
245:19 - page of code and it has a setup function
245:22 - and a draw
245:25 - function at the top of the code are
245:28 - usually many variables the global
245:30 - variables for the
245:32 - sketch another way I could describe
245:35 - those variables is the data of the
245:39 - sketch then inside setup and inside draw
245:43 - is typically all of the logic of what's
245:45 - happening in the sketch how are we
245:47 - manipulating the variables what are we
245:49 - using the variables to do are we using
245:50 - the variables to draw things to test
245:53 - some logic to perform interaction with a
245:56 - person who's operating the
245:57 - sketch many lines of Code full of
246:00 - assignment operations conditional
246:02 - statements Loops all that stuff that I
246:04 - might refer to as the behavior of the
246:06 - sketch or the function ality of what the
246:08 - code is
246:11 - doing encapsulation refers to the idea
246:15 - of packaging the data and
246:18 - functionality together into one thing an
246:23 - object now to be clear even though I'm
246:26 - talking about a processing sketch I'm
246:28 - not suggesting that we take the entire
246:31 - processing sketch and package it into an
246:33 - object a key element here is thinking
246:36 - about what are all the different parts
246:38 - of the processing sketch and how do we
246:40 - divide them up into a collection of
246:43 - different kinds of objects but for
246:45 - Simplicity sake the examples that I'm
246:47 - starting with are things like the
246:48 - bouncing ball where the whole sketch is
246:50 - just one ball so I'm going to make one
246:52 - ball object and that's the whole sketch
246:55 - but keep this idea in the back of your
246:57 - mind because as we move forward I might
247:00 - have a sketch that has lollipop objects
247:02 - and sunshine objects and all sorts of
247:04 - other kinds of things inside the sketch
247:07 - all right let's think again about a
247:11 - flower what are the data of a flower
247:14 - another way I could ask that question is
247:16 - what are the properties of a flower well
247:18 - maybe the properties are things like the
247:20 - number of
247:22 - petals maybe what color is the
247:25 - flower what is the height of the
247:28 - stem I could keep going obviously but
247:31 - this is the data now I want to ask well
247:35 - what is the functionality of a flower
247:37 - and again another way I could think
247:39 - about that is what is the behavior of a
247:41 - flower maybe I could come up with things
247:44 - like the flower will
247:46 - grow maybe the flower will
247:49 - Bloom and I'm writing those with
247:52 - parentheses because they are functions
247:55 - these are variables these are functions
247:59 - and remember the idea of object-oriented
248:01 - programming is to take a concept like a
248:04 - flower and package encapsulate all of
248:07 - its data and functionality into one
248:10 - thing but there is a really key element
248:13 - that I have not yet described to you I
248:16 - keep using the word object here I have a
248:20 - marker object I have a glasses object I
248:24 - have a shoe object I'm talking about
248:28 - things in the real world the physical
248:30 - world that I inhabit as physical objects
248:33 - they exist I can see them I can touch
248:35 - them I can operate them that this is
248:37 - going to sound weird is very different
248:40 - than the idea of a marker the idea of a
248:43 - shoe the idea of glasses in
248:46 - objectoriented programming we have the
248:48 - concept of a class and an object right
248:52 - here on the
248:53 - board this rectangle this box is not an
248:58 - actual flower it is just the description
249:01 - of what it is to be a flower in the
249:04 - world the concept of a flower is a thing
249:06 - with this data and a thing with this
249:08 - functionality this is the
249:11 - class an actual flower itself I don't
249:14 - have one sadly I really should have
249:16 - thought of that in advance but if I
249:18 - could walk in here and show you a flower
249:20 - that would be an instance of an object
249:23 - the class is the template the source
249:26 - code if you will for making an actual
249:29 - instance of an object of the type
249:32 - defined by the class this is also a key
249:36 - point anytime you declare a variable you
249:39 - need a type and a name for that
249:44 - variable maybe there's a score that's a
249:46 - floating Point number that has a initial
249:49 - value of 100 when you make a class when
249:52 - you build the template for an object you
249:55 - are defining a new data type it's not a
249:59 - float it's not an INT it's not a string
250:03 - it is a
250:06 - flower
250:08 - this is really exciting and is exactly
250:11 - what I want to slowly step by step show
250:14 - you all the bits of syntax you need to
250:17 - learn and how to write your own classes
250:20 - and generate your own object instances
250:23 - in your code okay I have a confession to
250:26 - make I'm very tired of the bouncing ball
250:28 - let's try something a little bit
250:30 - different honestly something a little
250:31 - bit simpler that will help me focus on
250:34 - the important details about classes and
250:36 - objects I have a sketch here that I have
250:38 - just made and it is called a bubble I'm
250:41 - going to run it and we have this lovely
250:43 - little circle floating up to the top and
250:46 - off it goes in the code I can see that I
250:48 - have an XY that is where I am drawing
250:51 - the bubble as a circle and then I'm
250:53 - manipulating the XY by moving it up by a
250:56 - random amount and also moving it left
250:58 - and right horizontally by a random
251:00 - amount my goal is to write a bubble
251:03 - class from which I can make a bubble
251:06 - object and then another bubble object
251:08 - and another one and just fill the screen
251:10 - with bubbles all the while only having
251:14 - one set of X and y's in my code because
251:18 - of object-oriented programming and
251:22 - encapsulation now I'm going to approach
251:24 - this kind of in Reverse you can't have
251:27 - the object without the class the
251:29 - template so it would make sense to write
251:31 - that template first but I want to look
251:33 - at the code for operating the object
251:35 - because it will actually give me the
251:37 - instructions for how to design the
251:42 - class the variable in my sketch will be
251:45 - of type
251:47 - bubble I haven't been explicit about
251:49 - this yet but anytime you write a class
251:52 - defining a new data type that data type
251:54 - the convention is for it to start with a
251:57 - capital letter this allows you to easily
251:59 - differentiate it from just any other
252:02 - variable name this is a type it's a type
252:05 - that I'm going to make up but it is is
252:07 - different than an actual variable the
252:09 - variable should start with a lowercase
252:11 - letter this is like any other variable
252:13 - declaration I have the name of the
252:15 - variable bub it's a little bit of a
252:17 - weird name but it's what I picked right
252:18 - now and then I have the type which is a
252:20 - new type that I'm about to Define in a
252:22 - class the type is bubble to initialize a
252:25 - new object there's a new keyword for you
252:28 - to learn and guess what that keyword is
252:30 - actually new bub should
252:34 - store it should equal a new new bubble
252:39 - object yes this is a little bit
252:41 - redundant but this is the way of the
252:43 - world we Define a variable of type
252:45 - bubble and then what do we store in that
252:47 - variable a new bubble object and I will
252:50 - get to more about what's really going on
252:53 - here and why we have the keyword new and
252:55 - why are we saying bubble again here why
252:58 - are there parentheses here I'll get to
253:00 - that soon now remember an object has
253:03 - both data and functionality so we don't
253:05 - see the data right now I'll tell you
253:08 - that the data is all being initialized
253:10 - as part of this call to new bubble but I
253:13 - do want to see the functionality the
253:16 - functionality the behaviors of an object
253:18 - are accessed through a new kind of
253:20 - syntax called The Dot syntax I reference
253:24 - the variable bub and then I can execute
253:28 - any function that is part of the bubble
253:30 - class with the dot so maybe I'll have
253:34 - dot
253:35 - update I'll call my function update to
253:38 - update the location and properties of
253:40 - the bubble I could call it like Ascend
253:43 - or float I probably don't want to call
253:44 - it float because float would be
253:46 - confusing since there's the data type
253:48 - float but you get the idea it's the
253:50 - functionality anything that you might
253:51 - choose to call a particular behavior of
253:53 - a bubble and then I also want to have
253:56 - another function called show I could
253:58 - call it render I could call it display I
254:00 - could call it draw even but I'm going to
254:02 - call show meaning that's the
254:04 - functionality of the bubble that draws
254:06 - itself to the processing
254:08 - window so this is our goal I want to
254:12 - take this program that has set up and
254:15 - draw all these variables change it to
254:18 - look exactly like this and have it
254:21 - produce the same exact result so now
254:25 - let's talk about how you write the
254:32 - class a bubble class is yet another
254:35 - block of code we start with the keyword
254:38 - class to say we're about to define a
254:40 - class we must specify the name of this
254:43 - class again the convention is to use a
254:45 - capital letter it'll work if you don't
254:47 - but it'll make me very uncomfortable so
254:50 - I really suggest you capitalize the
254:51 - names of your classes and then we have
254:53 - an open curly bracket and a closed curly
254:56 - bracket so everything that goes inside
254:59 - those curly brackets is all about
255:02 - defining the data and functionality of
255:04 - the class bubble so what data do we need
255:07 - well this is a very simple sketch I'm
255:09 - just starting with a bubble as having
255:11 - only two properties an X and A
255:13 - Y there we go now you might be saying to
255:16 - yourself oh I know these are local
255:18 - variables right they're not Global
255:21 - they're not outside of setup and draw
255:23 - they're local only to the class bubble
255:25 - while that is correct in a way the term
255:28 - for these is actually instance
255:32 - variables it's a fancy way for saying
255:35 - these are the properties of any bubble
255:37 - object anytime I make a bubble object
255:39 - there will be an X and A Y that are
255:42 - properties of that bubble object now I
255:44 - haven't initialized those variables yet
255:46 - I'm going to come back to that put a pin
255:48 - in that let's look at how I would Define
255:52 - the functionality of the object well
255:55 - guess what all of that work we did to
255:58 - learn how to define a function it's
256:00 - exactly that same syntax the only thing
256:03 - that's different is we Define the
256:04 - function inside the bubble class so
256:07 - instead of there being a setup or a draw
256:10 - or a mouse press or a lollipop or a
256:12 - sunshine function a sort of global
256:14 - function if you will I am putting a
256:17 - function inside the bubble
256:21 - class and inside those functions is
256:25 - where I can Implement my logic maybe in
256:27 - update I want to decrease the value of y
256:30 - by some random number so that the bubble
256:31 - floats upward in the processing
256:35 - window and then maybe in the show
256:37 - function I want to display the bubble as
256:41 - a
256:42 - circle with some given hardcoded
256:44 - diameter but if you're thinking what I'm
256:46 - thinking it probably would make sense at
256:48 - some point to make this also a property
256:50 - of the bubble but I'll leave that to
256:52 - later maybe even as an exercise for you
256:54 - okay we're almost there I have pretty
256:57 - much all the pieces I have the main
257:01 - sketch where setup and draw is where I
257:03 - am declaring the bubble object
257:05 - initializing it and operating it with
257:08 - functions update and show I've written
257:12 - most of the bubble class to find what
257:14 - properties are part of the bubble the
257:16 - data the instance variables and I've
257:18 - implemented the functions update and
257:20 - show right here that manipulate the data
257:23 - and use it to do things like draw stuff
257:25 - onto the window but I missed a really
257:27 - key part I left it to the end because it
257:29 - is a little bit confusing and it's the
257:31 - newest aspect of all of this I never
257:34 - initialized those variables I never
257:36 - talked about about why I say new bubble
257:39 - here the missing piece is something
257:41 - called the object's
257:48 - Constructor the object Constructor is a
257:51 - special function that's called with the
257:55 - keyword new when I say new bubble with
258:00 - those parentheses it executes the code
258:03 - that is inside these curly brackets the
258:06 - functions name is bubble with a capital
258:08 - B matching the class name the
258:10 - parentheses are where I might Define
258:13 - some parameters which I'm going to show
258:14 - you in a little while and then the curly
258:17 - brackets Define where the beginning and
258:19 - end of the function is and what goes in
258:21 - there well lots of things could go in
258:23 - there but typically speaking that's
258:26 - where I want to initialize the object's
258:29 - variables The Constructor you can think
258:32 - of as the setup function for a class
258:37 - what happens at the moment that the
258:39 - object is created and here maybe I just
258:42 - want to define the location of the
258:45 - bubble and there we go this is it this
258:48 - is everything we have all of the Syntax
258:52 - for how to write a class a template
258:55 - remember there will be no object if all
258:58 - you do is write the class the class is
259:00 - the instructions for what an object
259:02 - should do when you've actually created
259:04 - one by calling new bubble the name of
259:08 - the class then you have that object
259:10 - stored in this variable and you can
259:11 - operate it with different functions all
259:14 - right it's time to put that code into
259:16 - action so the question that you're
259:18 - probably wondering is well where do you
259:20 - write the class A Class like all the
259:23 - other things I've been talking about is
259:24 - a new block of code and I actually could
259:26 - put it anywhere I could put it at the
259:28 - top I could put it in between setup and
259:29 - draw I could put it below draw but
259:32 - something that I like to do and is is
259:33 - somewhat conventional with processing is
259:36 - to use use the feature of the processing
259:38 - editor that has multiple tabs to write
259:41 - your classes in a new tab it just helps
259:44 - you keep the code nicely organized so
259:46 - I'm going to go up here and click this
259:48 - down arrow I'm going to select new tab
259:51 - I'm going to name the tab it doesn't
259:53 - have to be the name of the class but
259:55 - that's going to make things easier to
259:56 - follow and understand so I'm going to
259:58 - call it
259:59 - bubble and then now right here is where
260:01 - I'm going to write the bubble class I've
260:03 - kind of gone over all of it already so
260:05 - I'm mostly just going to type it but
260:07 - I'll try to talk and give you some
260:09 - reminders as I'm typing it
260:10 - out I'm declaring a class the name of
260:13 - this class is bubble and I've got an
260:15 - open and close curly bracket a bubble
260:18 - has two properties an X and A
260:21 - Y and the Constructor is a special kind
260:24 - of function it doesn't have a return
260:26 - type so I don't ra to write void or
260:28 - figure out what it's returning it's
260:30 - actually returning an objective type
260:32 - bubble but we don't have to specify that
260:34 - because that's just what Constructors do
260:36 - they construct the bubble object and
260:37 - they return it I'm going to initialize
260:39 - the variables X and Y in there and then
260:42 - I want to write the functions for the
260:44 - bubble update and
260:46 - show both of these functions don't
260:49 - return anything so the return type is
260:50 - void they also don't have any parameters
260:53 - so there's nothing between the
260:54 - parentheses as we move forward and I
260:57 - make a few additional examples you'll
260:58 - see when oh I might want to have a
261:01 - function inside of a class that receives
261:03 - arguments oh I might want to have a fun
261:06 - F inside a class that returns something
261:08 - so all of that is possible but in this
261:10 - basic foundational example I'm not
261:12 - having any return type or any parameters
261:15 - what goes in update and show well the
261:17 - nice thing is I actually already have
261:19 - that code written I want to manipulate
261:21 - the variables in update so let me take
261:24 - this out and paste it in here and I want
261:27 - to draw the bubble in show so let me cut
261:31 - this
261:32 - out and paste it in here now again again
261:37 - the names of these functions update and
261:39 - show I made those up it's something that
261:41 - I tend to do a lot with things that are
261:42 - animating I want to have an update
261:44 - function and a function that draws it
261:46 - and the fact that I'm putting these
261:47 - statements in one function versus these
261:49 - statements in another again these are
261:51 - all personal style choices in the way
261:53 - that I like to organize my code they're
261:55 - not rules you might like to write and
261:58 - organize your code in a different way
261:59 - and there we go this is the entire code
262:02 - for the bubble class unless I made a
262:04 - mistake that I haven't yet discovered
262:06 - but when I run it we'll discover if I
262:08 - made a mistake I don't think I did
262:09 - though I guess we'll find out now no
262:12 - longer do I want an X and A Y here in
262:15 - the main part of the program instead I
262:17 - want one variable of type bubble I'll
262:20 - use my silly variable name bub because
262:23 - it's hey Bub my friend the
262:25 - bubble and then in setup I will
262:27 - initialize the bubble again I could
262:30 - write that up here but I'm just sort of
262:33 - writing things in the longer way just to
262:35 - demonstrate and then in draw I want to
262:38 - call update again remember the dot
262:41 - syntax bub. update I'm accessing the
262:44 - function update that is part of the
262:46 - class bubble and then bub.
262:50 - show okay ready everybody a drum roll
262:55 - please we did it we took that entire
262:58 - sketch that was not objectoriented and
263:00 - in some short amount of time turned it
263:03 - into a sketch that has a bubble class
263:05 - and a sing single bubble object one of
263:08 - the things that is really wonderful
263:09 - about this in the sense that we've made
263:11 - this program modular we've separated out
263:14 - the different functionality of the
263:15 - bubble into two different functions I
263:17 - can do things like comment out just one
263:20 - function that I'm calling on Bubble this
263:22 - can really help with debugging because
263:25 - now if I run it the bubble isn't moving
263:28 - you know again this is such a simple
263:29 - scenario there's nothing really going on
263:31 - here but this ability to be able to turn
263:34 - on and off different pieces of the
263:36 - functionality very easily because I've
263:39 - separated them and encapsulated them
263:40 - into the bubble class can be really
263:43 - really helpful all right I have an
263:46 - exercise for you actually I have two
263:47 - exercises for you you can you do both do
263:49 - one or just keep watching because I'm
263:51 - going to move on with this to the next
263:52 - step but one thing I might suggest is
263:55 - find something that you've made
263:56 - previously in processing that was not
263:59 - objectoriented could you examine and
264:02 - analyze that code to try to figure out
264:04 - how you would encapsulate the concept of
264:06 - what it is that's in your sketch into a
264:08 - class so maybe you drew a beautiful
264:11 - flower could you make a flower class
264:13 - that has the variables you need for that
264:14 - flower and the functions that you need
264:16 - that are presumably animating and
264:18 - drawing that flower exercise number two
264:21 - take a look at my bubble sketch here
264:23 - could you take this sketch and add a
264:26 - second bubble what would you need to do
264:29 - to add a second bubble could you add
264:33 - another property to the bubble what
264:35 - about the size what about the color what
264:38 - would it mean to add another property to
264:41 - the bubble maybe you add another
264:43 - function to the bubble could you add a
264:46 - bounce function or some type of check
264:48 - edges function what do you do when the
264:50 - bubble reaches the top of the window so
264:53 - give those things a try when I come back
264:56 - I'm going to specifically look at both
264:57 - of those things I'm going to add some
264:59 - functionality I'm going to look at
265:00 - making more than one bubble and that's
265:02 - going to lead me to what is perhaps the
265:05 - most confusing aspect of all of this I'm
265:08 - going to show you why you might want to
265:10 - include arguments in the Constructor to
265:13 - find the Constructor with parameters in
265:15 - order to initialize and create your
265:17 - bubble
265:18 - [Music]
265:22 - objects welcome back while you were
265:24 - taking a break I added something to this
265:26 - sketch a new function that's part of the
265:29 - bubble class that checks to see if the
265:31 - bubble leaves the window and then
265:32 - restarts it at the bottom in the code
265:35 - you'll see there's a new call to that
265:36 - function bub. edges and then in the
265:39 - bubble class you'll see I've added a new
265:41 - property R for the bubble's radius I'm
265:44 - drawing it with the diameter so that's
265:46 - radius time 2 that's actually going to
265:48 - become important for something I'm going
265:49 - to demonstrate to you in a little bit
265:51 - and here's the edges function if Y is
265:53 - less than negative radius reset it to
265:56 - the bottom height Plus radius okay so
265:59 - when you were playing around with the
266:00 - sketch maybe you tried to make more than
266:02 - one bubble I wonder how that went I'm
266:04 - going to do that right now I'm G to call
266:06 - the bubbles bub zero and Bub one I could
266:10 - call them anything I could call them fun
266:12 - bubble and curious bubble or I could
266:14 - call them bubble one and bubble two but
266:15 - I'm choosing zero and one because you
266:18 - can probably imagine remember that thing
266:20 - called an array that I talked about a
266:21 - little while ago at some point I'm going
266:24 - to make an array of Bubbles and remember
266:26 - when we're counting through an array we
266:28 - start at zero so I think it's going to
266:30 - be a little more clear we kind of
266:31 - practice that even with our variable
266:33 - naming right now bub zero should should
266:36 - be a new bubble bub one should be a new
266:40 - bubble then I need to call all the
266:41 - functions on bub zero and Bub
266:44 - one now I just said this I'm going to
266:46 - say it again you know about an array so
266:48 - an array would certainly make more sense
266:50 - if I want three bubbles four bubbles
266:52 - five bubbles am I really going to keep
266:53 - duplicating the code like this but for
266:55 - right now just to demonstrate the idea
266:57 - of more than one object let's look at it
267:00 - in separate variables time to run the
267:03 - sketch and there we go two bubbles I
267:06 - cannot emphasize this enough this is
267:08 - kind of incredible I didn't make a
267:11 - single change to the bubble class the
267:13 - bubble template has remained the same it
267:16 - was that easy for me to add a second
267:18 - bubble to the processing sketch because
267:20 - of the way I organized the code with
267:23 - object-oriented programming so let me
267:25 - ask another question what if I want the
267:28 - bubbles to be different
267:30 - sizes okay no problem in the Constructor
267:34 - that's where the variable R is
267:37 - initialized I could make it a random
267:40 - value wow I picked two very similar
267:43 - random values let's try that
267:45 - again a little bit better now what if I
267:49 - want them to start at a different
267:51 - location I could also make the X
267:53 - position
267:55 - random okay there they are they started
267:57 - in different locations kind of close to
267:59 - each other try again oh oh boy different
268:02 - locations but all the way to the right
268:03 - what if I really want to specify where
268:05 - they start you know I want one on the
268:07 - left and one on the right of the
268:09 - processing window how would I do that I
268:12 - know that I need to initialize the
268:13 - objects variables in the Constructor but
268:15 - in the Constructor I don't know which
268:17 - object I am I can't have it do something
268:18 - different I mean the random function
268:20 - works but I can't set it to be a
268:22 - specific value if I give it a specific
268:24 - value
268:25 - here they both start with that value
268:28 - this is where Constructor arguments come
268:31 - into
268:34 - play
268:37 - [Music]
268:44 - okay I've removed a lot of the extra
268:46 - details about draw and the other
268:48 - functions part of the bubble class from
268:50 - the Whiteboard just to focus on the
268:52 - bubble Constructor in the class and the
268:55 - initialization creation of the two
268:57 - bubble objects bub zero and Bub one
269:00 - remember I want bub zero to start at a
269:05 - pixel location maybe 100 and then I want
269:09 - bub one to start at a pixel location
269:12 - along the horizontal axis maybe
269:15 - 500 essentially what I'm saying is I
269:17 - want to say bub zero equals a new Bubble
269:21 - at xal 100 bub one equals a new Bubble
269:25 - at xal 500 so why don't I write the
269:29 - values 100 and the values 500 there
269:33 - inside the parentheses I'm going to
269:35 - create a new bubble with an argument
269:37 - that is a floating Point number to
269:39 - indicate the starting X position of the
269:42 - bubble The Constructor if you remember
269:44 - is a function just like update or show
269:47 - or edges but it is a special function
269:50 - that always returns the new bubble
269:53 - object if I'm calling a function or in
269:56 - this case calling the bubble Constructor
269:58 - with an argument I need to make sure
270:00 - there is a matching parameter that means
270:03 - I need to define the type for the
270:05 - parameter it will be a
270:07 - float and then the name oh this is where
270:10 - things get really wonky so ultimately
270:13 - what I want is to fill this value x with
270:17 - this value 100 so this variable whatever
270:20 - I call it is just going to be a
270:22 - temporary variable this local variable
270:25 - to the bubble Constructor the parameter
270:28 - to the bubble Constructor that receives
270:30 - the value and immediately passes it to
270:32 - the important variable the instance
270:34 - variable X so since I'm thinking of it
270:36 - as a temporary variable why don't I call
270:39 - it temp
270:41 - X then I'm going to set x equal to Temp
270:45 - X now I could add a second one comma
270:49 - something and then I could have a temp Y
270:51 - and set the value of y but I don't have
270:53 - a lot of room on my whiteboard and I
270:55 - want all the bubbles to start at the
270:56 - bottom anyway so this is how I'll do it
270:59 - let me remind you one more time of the
271:01 - flow here bub Z equals a new bubble with
271:05 - the value 100 the value 100 is then sent
271:08 - into the Constructor it fills the
271:11 - parameter temp X and then the value of
271:13 - temp X is assigned to the property of
271:16 - that bubble X so bub zero has an x value
271:20 - of 100 now bub one same exact thing
271:25 - happens has an x value of 500 let's put
271:29 - that into the code and see if it works
271:32 - okay first step add the parameter to the
271:35 - Constructor
271:36 - set X now equal to Temp X coming back to
271:40 - the main sketch I can add the arguments
271:43 - now to the bubble
271:44 - Constructor 100 500 then I can run the
271:49 - sketch and there we go two bubbles one
271:52 - at pixel 100 one at pixel 500 before I
271:55 - move on I just want to say a couple more
271:57 - things about this in my experience
271:59 - teaching processing object-oriented
272:01 - programming like this for many many
272:03 - years this whole thing about initial
272:05 - izing variables inside of a class
272:07 - through Constructor arguments is very
272:09 - confusing it seems really weird to have
272:12 - this variable whose sole purpose is just
272:14 - to receive this value and then
272:16 - immediately pass it to this other
272:17 - variable Why Can't This value just go
272:20 - directly into this variable well this is
272:23 - actually one of the principles of
272:25 - object-oriented programming that I would
272:27 - consider under that topic of
272:29 - encapsulation one of the core principles
272:31 - of object-oriented programming is that
272:33 - to operate an object
272:36 - you never mess with the data directly
272:38 - you just call the functions on that
272:41 - object this has a lot of benefits it's
272:44 - kind of way beyond anything we're doing
272:46 - right now and it kind of doesn't matter
272:47 - right now oh who cares if I'm going to
272:49 - access X directly or not or what I'm
272:51 - going to do but there is a level of
272:53 - protection here if I wanted to set up
272:55 - some rules to make sure that a value
272:58 - that's passed in is constrained within a
273:01 - given range then I can put all of that
273:03 - logic into the Constructor so this idea
273:06 - of sending the value in through the
273:08 - object's Constructor is actually quite
273:10 - important and Powerful that said in the
273:13 - same way that you call a function on an
273:16 - object bub zero. update bub zero. show
273:19 - you can also access the variables of an
273:22 - object through the dot syntax so if I
273:26 - really wanted to I could say something
273:28 - like bub one doy equals 200 and now if I
273:33 - run the
273:34 - sketch that second bubble bub one is
273:38 - starting at the yv value of 200 ah so
273:41 - this is making me kind of uncomfortable
273:43 - I don't recommend you write the code
273:44 - this way it will work and probably in
273:47 - some of my other examples and future
273:49 - other videos and tutorials and things
273:50 - that you might look at there are reasons
273:52 - why it can be very convenient to just
273:53 - access those properties directly as a
273:55 - constraint right now to practice try not
273:59 - doing that and instead initialize the
274:01 - variables through the object's
274:04 - Constructor
274:06 - so with that here's something you could
274:07 - try what about adding a second parameter
274:10 - to the object's Constructor that sets
274:12 - the value of the radius so I could say
274:15 - hey I want a very small bubble and a
274:18 - very large bubble what would you need to
274:20 - do syntax wise to make that happen The
274:23 - Next Step I'll take is adding an array
274:26 - which you could try to do right now if
274:28 - you want to but don't worry I'm about to
274:30 - do
274:32 - it hello again you can see that I have
274:35 - added a second argument to the
274:37 - Constructor to set the radius we've got
274:40 - one bubble with a little radius of 20
274:42 - and one larger bubble with a radius of
274:44 - 100 in the bubble class note how I
274:47 - renamed the parameters of the
274:49 - Constructor uncore X and underscore R it
274:52 - looks a little bit odd underscore is one
274:54 - of these weird special characters that
274:55 - you actually can use in a variable name
274:57 - and you can even start a variable name
274:59 - with and it's typically used maybe for
275:02 - what I might consider a throwaway
275:03 - variable or a variable that you don't
275:05 - want to change the value of and use and
275:07 - in this case that's exactly what these
275:09 - underscore X and underscore R are doing
275:12 - they're just there to receive the value
275:14 - and pass it to the important variable
275:16 - the actual X and the actual R all right
275:19 - with that out of the way let's Implement
275:22 - an array of bubbles First Step instead
275:26 - of individual variables bub zero and Bub
275:29 - one I'm just going to have one variable
275:31 - called
275:32 - bubbles I'm going to use the word
275:34 - bubbles bubble with with a plural just
275:36 - to indicate to myself that it's going to
275:38 - be an array but really remember
275:39 - variables can be anything you want to
275:41 - call them I need to make sure I put the
275:44 - square brackets in to tell processing
275:47 - that this is going to be an array and
275:49 - now here's where things get a little
275:50 - wonky I need to both create the array
275:54 - and specify the size of the array and
275:56 - then I need to individually go into each
275:58 - element and create a bubble object and
276:01 - place it there in the array so up here
276:03 - I'm going to say new bubble and let's
276:05 - just have two for right now so that
276:08 - makes an array with two spots in it and
276:10 - just to ease our way in we don't need a
276:12 - loop just yet let's individually create
276:15 - bubbles index zero and Bubbles index
276:20 - one then I need to call update edges and
276:23 - show on each one of those bubble objects
276:26 - in the
276:29 - array and there we go exactly the same
276:32 - sketch I had before only the two
276:34 - separate bubbles aren't aren't two
276:35 - separate variables they are inside of an
276:37 - array at index zero and index one so I'm
276:40 - not going to add a third bubble or a
276:41 - fourth bubble here if that's what I want
276:43 - to do I really am going to want to use a
276:46 - for Loop to iterate over all the
276:49 - elements of the array so this is
276:50 - actually something you could try right
276:52 - now remember all that stuff we did with
276:53 - arrays and for Loops see if you can get
276:55 - it to work I'll pause and wait but then
276:57 - I'll come right back and implement it
276:59 - and show you how to do
277:04 - it
277:06 - adding a for Loop let me first do that
277:08 - only in draw so around where I'm saying
277:11 - bubble zero and Bubbles one I'm going to
277:14 - put a for Loop
277:16 - four now instead of referring to
277:19 - specific indices I don't need this
277:21 - second call to Bubbles one and instead
277:24 - of zero I want to say I so the loop is
277:28 - going to start with i equals 0 call the
277:30 - functions set I equal to 1 call the
277:32 - functions once I gets to two we're done
277:35 - done out of the loop same exact thing it
277:38 - would also be better if instead of
277:40 - hardcoding the value two I just accessed
277:43 - whatever the length of the array
277:45 - is okay let's try adding 10 bubbles so
277:50 - the array will now have 10 elements in
277:52 - it I do not want to initialize every
277:55 - single bubble individually so I will
277:57 - also do a for Loop in
278:01 - setup then I'm going to say bubbles
278:04 - index I
278:05 - equals a new bubble and let's just leave
278:08 - it at 100 comma 20 for
278:11 - now there we go I have 10 bubbles all
278:14 - floating up but I've lost something here
278:17 - I lost the fact that I had the bubbles
278:21 - placed at different spots with different
278:24 - sizes to be honest it might make sense
278:26 - for me to right now just remove those
278:28 - Constructor arguments and go back to
278:30 - initializing the variables with a random
278:32 - value but I think this is kind of a nice
278:35 - opportunity for me to show you something
278:36 - that you can do to make use of that
278:39 - iterator I while you're initializing the
278:42 - elements of an array for example even
278:45 - though I is really just there to count
278:49 - over the index values of the array
278:51 - there's no reason why I can't put I
278:53 - right here as the first argument to the
278:55 - Constructor oh look well it kind of
278:58 - looks like they all start at the same
278:59 - spot because pixels 0 1 2 3 4 5 6 7 8 9
279:02 - they're kind of very close to each other
279:04 - what if I were to multiply I * 10 so now
279:08 - I'm starting the Bubbles at pixel 0 10
279:12 - 20 30 40 50 all the way up to
279:15 - 90 pretty good let's try 50 look at that
279:19 - oh let's add 50 and look how they're
279:22 - spaced out so nicely so if what I want
279:25 - to do is initialize the variables with
279:28 - some regular spacing I can use the fact
279:31 - that I'm counting through the array to
279:33 - do that but I can also continue to use
279:35 - random and since I have Constructor
279:37 - arguments already there's no reason for
279:39 - me to remove them because I'm leaving
279:41 - open lots of different options by having
279:43 - them but instead of hardcoding 20 right
279:45 - here I could say random 20 comma 40 so
279:49 - now all the bubbles have a random radius
279:51 - between 20 and 40 pixels maybe you can
279:54 - read that line of code and understand it
279:56 - just by looking at it but I find having
279:59 - these equations and other function calls
280:01 - inside of the arguments themselves to be
280:04 - kind of confusing so just for
280:06 - readability purposes let me pull those
280:08 - out and put them into separate local
280:13 - variables and there we go I've named
280:16 - those variables X and R and that could
280:18 - be kind of confusing but remember just
280:21 - because I'm using the same name doesn't
280:23 - mean the variables have anything to do
280:25 - with each other these variables are
280:27 - local only to the for Loop and I'm using
280:30 - them just to send values into the
280:31 - Constructor and what happens to those
280:33 - values
280:35 - they get passed into the underscore X
280:37 - and underscore R variable and those get
280:40 - passed into X and R here the parameters
280:43 - should not be named X and R because they
280:46 - are being used within that same block of
280:48 - code The Constructor and that would be a
280:50 - conflict but I could have called them
280:52 - like I did before temp X and temp
280:57 - R and everything works just as it should
281:00 - I don't know maybe you have a better
281:02 - idea for what's a nice naming convention
281:04 - for your Constructor arguments I would
281:06 - love to hear about that in the comments
281:08 - all right I'm getting close to the end
281:10 - of this very long video All About
281:12 - Learning the foundational concepts of
281:13 - programming in processing got a few more
281:15 - things I want to demonstrate this is
281:17 - though a nice time to take a little
281:19 - pause take a little breather maybe you
281:21 - could try enhancing this particular
281:23 - sketch with adding color another
281:26 - property to the objects maybe what
281:28 - happens if you introduce a different
281:30 - kind of object could you have two
281:32 - classes and two arrays oh my goodness so
281:35 - many things you could do take it easy on
281:37 - yourself when I come back what I'm going
281:40 - to show you how to do and you could try
281:41 - this yourself is how to interact with
281:44 - these objects with the mouse what if I
281:45 - want to click on each object and have
281:48 - their color change when I click on
281:50 - [Music]
281:54 - them so while you were taking that break
281:58 - and I was taking that break I added
282:00 - color to the sketch did you if you did
282:03 - WOW because I realized while I was doing
282:05 - it I forgot to cover something kind of
282:07 - important earlier when I was looking at
282:10 - variables and that is what if I want to
282:12 - store a color in a variable so the
282:15 - examples that I made previously I would
282:18 - store the red green and blue values in
282:21 - separate
282:25 - variables and then if I needed to call
282:28 - fill or stroke I could just pass those
282:30 - variables into the
282:32 - function but there is a data type in
282:35 - processing called color that will store
282:37 - the red green and blue values
282:45 - together I'm making the case to you that
282:48 - these are both equivalent here three
282:51 - separate floating Point values fill R
282:54 - comma G comma B here one variable maybe
282:57 - I could come up with a better variable
282:58 - name than just call but call for color
283:01 - the data type of this variable is
283:03 - actually color and I'm creating the
283:05 - color value with a function called color
283:08 - so both of these things are built into
283:11 - processing there is a color function
283:13 - that receives three arguments or four or
283:16 - one depending on whether it's grayscale
283:18 - or has Alpha creates the color itself
283:22 - storing it in a variable of type color
283:24 - and then I can just say fill that
283:26 - variable name now perhaps there's a
283:28 - little bit of irony here in that I'm
283:30 - talking about this idea of packaging
283:33 - three variables into one in the section
283:36 - about object-oriented programming
283:38 - because you could design your own color
283:40 - class and a color object would have
283:43 - three properties and you could Implement
283:44 - all this functionality to manipulate
283:46 - color and that's definitely possible and
283:48 - kind of interesting but that's not
283:50 - what's going on here in processing
283:52 - processing has a special data type
283:55 - called color which is actually just an
283:58 - integer when you call the color function
284:01 - and give it three different values it
284:04 - takes those values and puts them
284:06 - together into one much larger number
284:10 - that processing knows how to interpret
284:12 - and set the pixels to the color that you
284:15 - originally specified there's a lot more
284:17 - to this it has to do with bits and bites
284:20 - and how numbers are stored in the
284:21 - computer's memory but I think that's a
284:23 - topic for another time I can try to make
284:25 - sure I include some reference material
284:28 - for reading more about that and maybe
284:30 - even link to another video that I could
284:31 - make or that I have already made about
284:33 - that particular our topic for now what I
284:36 - want to focus on is the fact that there
284:38 - is a color data type and a function
284:41 - called color that can create a color
284:43 - value that I store in a variable so now
284:46 - coming back to this code if I go into
284:48 - the bubble class you can see I've added
284:50 - a new variable of type color and in the
284:53 - bubble Constructor I've created a pink
284:55 - color with some Alpha and then I'm
284:57 - calling Phill and show with that color I
285:00 - could have also had separate RGB
285:02 - properties of this bubble object but I
285:04 - already had a value called R for radius
285:07 - so let's use the color variable now what
285:11 - if I want to do is whenever I click on
285:14 - one of these objects it changes color so
285:17 - what if inside the bubble class I add a
285:20 - new function and I'm going to call it
285:21 - over and I'll explain why I'm calling it
285:23 - over in a
285:25 - moment my idea for this function is that
285:27 - it's going to receive two values an X
285:30 - and A Y and it's going to determine if
285:32 - that XY position is in inside the circle
285:36 - only oh boy I do not want to call these
285:39 - variables X and Y because remember the
285:42 - bubble has instance variables X and Y so
285:47 - because I know my intention is to use it
285:50 - with the mouse I'm going to call it MX
285:53 - and my y I could access Mouse X and
285:55 - mouse y directly in the bubble class but
285:58 - I'm not going to do that and maybe I'll
286:00 - talk a little bit about why I've chosen
286:01 - not to do that in a moment so now the
286:04 - question becomes how do I determine if
286:07 - that point MX comma my Y is inside the
286:11 - bubble Circle itself and I guess in a
286:13 - way as we wrapping up this video I'm
286:15 - just giving you a smattering of some
286:17 - additional tips and tricks it's a small
286:20 - selection it's not comprehensive but
286:22 - will allow you to do a little bit more
286:24 - with this bubble example than just draw
286:27 - a bunch of bubbles floating on the
286:30 - screen all right so let's say I have a
286:33 - circle
286:35 - I also have a radius which is defined as
286:37 - the distance between the center of the
286:39 - circle and the exterior of the circle
286:42 - the perimeter of the circle I'm calling
286:44 - that R now I have a new Point MX comma
286:47 - my y maybe I click the mouse over here
286:51 - so my point is MX comma my maybe I click
286:55 - the mouse over here and my point is MX
286:58 - comma my
287:00 - y if I were to be able to calculate the
287:03 - distance between the center of the
287:05 - circle remember this is XY and that
287:08 - point MX
287:11 - my I can determine if that point is
287:14 - inside the circle how let's call that
287:17 - distance
287:18 - D and I'm just showing you two different
287:21 - examples of a d if D is less than
287:27 - R what if the distance between the point
287:31 - and the center of the circle is less
287:32 - than the radius that Point must be
287:34 - inside the circle if it's greater than
287:37 - the radius it's outside the circle so
287:40 - this is the code that I'll need to write
287:42 - only I need to figure out how to
287:44 - calculate D well guess what there is a
287:47 - function in processing called dist for
287:50 - distance that I can give it four
287:53 - arguments the XY of one point and the XY
287:56 - of
287:58 - another and this will return the
288:00 - distance between these two
288:02 - points and and I can store that in my
288:05 - variable D adding that into the
288:11 - code and I'll just for now print out the
288:15 - message Mouse is over so why did I write
288:18 - this as a function inside of the class
288:21 - ultimately what I want to implement is
288:24 - something like a mous pressed function
288:26 - for the class and you might have been
288:29 - thinking oh we have a function called
288:31 - Mouse pressed could I just write Mouse
288:33 - pressed into the bubble class and
288:35 - anything in there will be executed when
288:38 - you press the mouse on the bubble object
288:40 - it's a nice thought but think about what
288:43 - processing would have to do behind the
288:44 - scenes to do that it would have to know
288:46 - so much about your code and your
288:48 - intentions the only thing processing can
288:51 - do is tell you that the mouse has been
288:53 - pressed and what the location of the
288:56 - mouse was when it was pressed and that
288:58 - happens in the global function mous
289:01 - pressed so I wrote a function in the
289:03 - bubble class called over and I can call
289:06 - that function when the mouse pressed
289:08 - event happens in other words if I come
289:10 - back to the main program now and I add
289:13 - Mouse pressed what do I want to do I
289:16 - want to Loop through all of the bubble
289:20 - objects and then I want to say bubbles
289:22 - index
289:23 - I over Mouse X Mouse y one of the
289:28 - reasons I'm showing this to you is to
289:30 - emphasize that those functions in a
289:32 - class are just like like the functions
289:34 - we wrote earlier you can pass them
289:38 - arguments this is a way for you to
289:40 - communicate from one part of the code to
289:43 - another part of the code and there's so
289:45 - much more to it but this is a nice
289:47 - starting point let's run this sketch and
289:50 - in theory whenever I click the mouse on
289:53 - one of these bubbles I should see a
289:55 - message down in the console if I've
289:57 - written the code correctly so I'm first
289:59 - going to click over here where there are
290:00 - no
290:01 - bubbles no message great now let me
290:03 - click on this one it's kind of big ah
290:05 - yes I'm seeing Mouse is over multiple
290:08 - times in the console it's working okay
290:11 - but I don't want to just print to the
290:12 - console I want to change the color and
290:15 - certainly I could just do that right
290:17 - here let's do that right now
290:20 - actually and I'll give it a new random
290:23 - color just three random values but leave
290:26 - the alpha hardcoded let's just leave
290:28 - green at zero so it's some different
290:30 - shade of pink
290:32 - purple
290:34 - so you can see that anytime I'm clicking
290:36 - on a bubble the color changes but this
290:40 - is a nice opportunity for me to show you
290:42 - a little bit more just to practice this
290:45 - idea of functions that return something
290:48 - of different kinds of data types what if
290:51 - what I actually want to do is write
290:53 - another function called a change color
290:57 - in other words I want to really think
290:58 - about the code AS even more modular than
291:01 - it currently
291:02 - is so in this function that's where I
291:06 - actually set the new value so one option
291:09 - would be for me to just call change
291:10 - color here right now and I could do
291:15 - that same result but I want to show you
291:18 - something different the function over in
291:21 - my mind is really not about changing the
291:23 - color it's about one thing and one thing
291:26 - only knowing if any given point is over
291:29 - that bubble so in order to constrain it
291:31 - to only that functionality I'm going to
291:33 - have it return true when the point is
291:36 - over the bubble and false when it's
291:40 - not but what did I miss this function is
291:43 - no longer void it's now a function that
291:46 - Returns what a
291:49 - Boolean I can now say out here if
291:53 - bubbles I over Mouse X Mouse y right
291:57 - what goes in a conditional statement
291:59 - anything that evaluates to true or false
292:02 - this function over now evaluates to true
292:05 - or false if it evaluates to true I can
292:07 - say bubbles indexi do change
292:14 - color so in a lot of ways this is just
292:16 - an excuse for me to reinforce some
292:18 - things one I kind of forgot to tell you
292:20 - a little bit more about color so let's
292:22 - look at that there's lots more functions
292:24 - in processing distance is just one
292:26 - example remember that mous press
292:28 - function how could you use that with
292:30 - objects and all that stuff about
292:33 - functions taking arguments and functions
292:36 - returning things I'm showing you all of
292:38 - that just in this one particular
292:40 - scenario
292:42 - but I can't stop let me show you two
292:45 - more things about this particular
292:47 - example that I think would be nice to
292:49 - know about and help make the code a
292:50 - little bit more succinct personally I
292:53 - love the way that I wrote this if D is
292:55 - less than R return true otherwise return
292:58 - false it says exactly what it's doing
293:01 - it's a little bit long-winded and I feel
293:02 - it's important for me to show you this
293:04 - because you'll see it in a lot of other
293:05 - examples D is less than R is actually
293:09 - something itself that evaluates the true
293:11 - or false so there's no reason for me to
293:13 - specifically ask what its value is and
293:15 - then say return true I could just say
293:18 - return whatever you evaluate to so in
293:21 - that case I could write this function
293:23 - instead
293:24 - as return D is less than R so if I had
293:28 - shown you this first maybe that would
293:30 - have been a little bit confusing but I
293:31 - do want to emphasize that return return
293:34 - D is less than R is exactly the same as
293:36 - what is there commented out now return
293:39 - true or return false based on if D is
293:42 - less than R is true or false okay one
293:44 - more thing it's really good to practice
293:47 - using for loops and arrays and
293:51 - understanding what the index value means
293:52 - and how you count through all the
293:54 - elements of the array and you can see
293:56 - how I was able to make use of the
293:58 - variable I in setup for initializing the
294:01 - exposition of every one of those bubbles
294:03 - but this idea of saying hey I got an
294:07 - array of things can I just do something
294:08 - to every element of the array is so
294:11 - common there is another way to write
294:13 - this Loop that you might consider a
294:15 - little bit simpler to type or a little
294:17 - bit more clear and it's what's known as
294:19 - an enhanced
294:24 - Loop what if I were to say to you for
294:27 - every bubble B in the array bubbles
294:29 - update show and display it that's what I
294:32 - want to do here's the the Syntax for
294:34 - exactly that for every bubble B in the
294:39 - array bubbles update that bubble check
294:43 - its edges and show
294:45 - it and B doesn't have to be B I could
294:48 - have called it bub or again whatever I
294:50 - want to call it let's call it bub
294:52 - because that's what I used before when I
294:53 - had a single bubble object comment this
294:56 - out run this code and it's exactly the
295:00 - same thing so just to cover this syntax
295:03 - I have the variable bubble bub which
295:06 - will stand in for every single bubble in
295:08 - the array and then I have the array
295:10 - named Bubbles and I put those in a for
295:12 - loop with a colon in between and then
295:14 - instead of having to say bubbles index I
295:16 - I can just say bub. update bub. edges
295:19 - bub Doo the same exact Loop could be
295:21 - used in mous pressed I'll leave that as
295:23 - part of the code examples that I
295:25 - released with this video you could give
295:26 - it a try right now if you want to pause
295:28 - and just adjust that syntax yourself all
295:30 - right don't worry before I go I'm going
295:32 - to make nice long list of all the things
295:35 - I didn't get to cover in this video
295:37 - series and provide you with links and
295:39 - resources and ideas for what you can do
295:41 - next to continue your coding Journey one
295:44 - of the things you could choose to do is
295:46 - watch any one of my coding Challenge
295:48 - videos where I'll build a project from
295:50 - scratch you have all of the foundation
295:53 - for just about every coding challenge
295:55 - now that I have on my channel varying
295:57 - degrees of difficulty your mileage may
295:59 - vary but that's the idea let me give you
296:02 - a taste of that now let's build a
296:04 - project together I'm going to start with
296:05 - this blank sketch right here I'm going
296:07 - to make a burst of confetti to celebrate
296:10 - finishing this video and then I'm going
296:12 - to ask you to make your own version of
296:13 - it and share it back with me on the
296:15 - coding Train website social media
296:16 - wherever you wherever you can find me on
296:19 - the
296:19 - [Music]
296:25 - internet so to create this burst of
296:27 - confetti I want to have a lot of shapes
296:29 - probably just circles maybe I'll make
296:30 - them Squares bursting out from this one
296:34 - spot in the processing window so I need
296:35 - an array and an array of
296:38 - objects I'm going to make a confetti
296:40 - class I'm G to add the
296:42 - Constructor I'm going to pass in an X
296:45 - and Y
296:46 - location and the confetti is going to
296:48 - have an X and A
296:50 - Y so now let me make an
296:53 - array and I'm going to put a 100
296:55 - elements in it usually if I'm
296:57 - programming something I'll make a single
296:59 - object first but we just spent a lot of
297:01 - time doing that in the whole bub section
297:03 - so I think I'm going to start just with
297:05 - the array right
297:09 - now am I spelling confetti right oh
297:13 - whoops I made a mistake do you see the
297:16 - mistake I made I forgot to specify that
297:19 - the confetti variable is of the type
297:22 - array I need square brackets there as
297:24 - well now let me set the background to
297:28 - White and then how about we start by
297:31 - just adding a show function I'm going to
297:33 - say fill Z and I'm going to draw a
297:36 - square at XY of size 10 and that's it
297:40 - now let me use that enhanced
297:43 - Loop to say show all the confetti so
297:47 - what I should see now when I run the
297:48 - sketch is 100 squares all in the center
297:51 - c. show does not exist oh I forgot to I
297:56 - forgot to put the return type void I
298:00 - also want to add rect mode Center so
298:02 - that the square is uh drawn uh from the
298:05 - center point perfect now if the confetti
298:10 - is going to burst out I'm going to need
298:12 - variables to keep track of how the
298:15 - position changes along the x-axis and
298:17 - along the y- axis so I'm going to add an
298:20 - xeed and a y-p speed and let's set those
298:23 - when I make the confetti to
298:26 - zero because how about I write a new
298:30 - function called burst that when I call
298:33 - burst the speed kicks
298:35 - in and let's make it some random value
298:38 - between -10 and 10 and same for yspeed
298:42 - and my idea here is when I click the
298:47 - mouse let's call burst on all of the
298:51 - confetti so running the sketch all the
298:54 - confetti is drawn at one point I click
298:57 - the mouse and in theory it should burst
299:00 - because I set those variables but I'm
299:03 - not using those variables anywhere guess
299:05 - what I need I need an update function to
299:08 - change the value of X and Y based on X
299:10 - speeed and YP
299:13 - speed and if in draw I'm always calling
299:17 - update then when I first run the sketch
299:20 - xpeed and yspeed remember are zero and
299:23 - only when I press the mouse do those
299:26 - values get filled with a new random
299:28 - number then I should see the confetti
299:30 - start to
299:31 - move oh look at that burst that was
299:36 - cool Tada okay I need to do more I want
299:40 - the confetti to fall down as if there
299:43 - were gravity this merits a longer
299:45 - discussion and I have a whole set of
299:47 - videos about doing physics simulation
299:49 - that you can find Linked In the video
299:50 - description but right now basically what
299:53 - I'm saying is that in addition to the Y
299:56 - value changing I want the YP speed value
299:59 - to also change because the objects the
300:02 - confetti are going to be pulled down
300:04 - more and more every frame yped equals
300:08 - ype plus let's just say a little bit
300:11 - 0.01 oh it's already falling we burst it
300:14 - okay so one thing is that is happening
300:17 - immediately so now I need this concept
300:20 - of the confetti only actually kicking
300:23 - into gear the moment that I click the
300:26 - mouse there's a probably a lot of
300:28 - different ways you could approach this
300:29 - what I'm thinking about right now is
300:31 - having a Boolean variable
300:33 - and I'll call it uh Party Time party
300:37 - time excellent excellent and I'll set it
300:41 - equal to false so in draw I'm actually
300:45 - only going to run through all the
300:47 - confetti if party time is true so this
300:50 - for Loop can actually live inside of an
300:53 - if statement if it's party time show an
300:56 - update all the confetti and then when I
300:58 - click the mouse what do I want to happen
301:01 - party time should equal true okay let's
301:04 - see how this goes hey that kind of
301:07 - worked I mean it did work but I don't
301:09 - there's some things about it that I
301:10 - don't like number one is the gravity
301:13 - should be much stronger maybe the um
301:16 - values of xpeed and Y speed should be a
301:18 - little bit
301:20 - smaller that's great another thing I
301:23 - would like to do is have all of the
301:24 - confetti start wherever I click the
301:27 - mouse so burst could actually be defined
301:29 - with two parameters I'll call it MX and
301:33 - my and when they burst I should pass in
301:38 - Mouse X and mouse Y and that's we all
301:41 - set even though I'm setting the confetti
301:44 - initial values in the Constructor I'm
301:46 - going to reset those values
301:49 - here and in truth maybe their initial
301:51 - values shouldn't get set with the
301:53 - Constructor and I should just set them
301:55 - to somewhere way off the processing
301:58 - window as initial values so here I no
302:01 - longer need width divided by two height
302:03 - divided by two instead when I click the
302:07 - mouse party time is true and the
302:09 - confetti is going to burst starting at
302:11 - Mouse X Mouse y click there we go and
302:15 - watch this what happens if I click again
302:17 - look I get the confetti
302:19 - again wow I mean here's the thing it's
302:22 - not as magical as you might think
302:24 - because if I click really fast it's
302:26 - reusing the same objects it's not
302:28 - creating a whole new set of objects oh
302:31 - that's something that I didn't get get
302:32 - to cover so many things I didn't get to
302:34 - cover what if I want those confetti
302:36 - squares to spin and rotate I didn't talk
302:39 - about transformations in processing how
302:42 - do you rotate a shape what if I want to
302:44 - add elements to the array so every time
302:46 - I click I create a new set of confetti
302:50 - 100 more 100 more suddenly the array has
302:52 - 200 then it has 300 well I can't
302:54 - actually do that easily with a regular
302:56 - array I need to use something called an
302:58 - array list that's another thing I didn't
303:00 - cover all right I have one one more
303:03 - segment I need to take a break and
303:05 - organize my thoughts and figure out what
303:07 - it is I want to tell you about I'll be
303:09 - right back I'll have changed my close
303:10 - it'll be a new day I'll probably do this
303:12 - tomorrow and I'll see you
303:18 - soon hi you are at the end of this very
303:22 - very long video All About Learning to
303:24 - program in processing congratulations
303:27 - making it through I hope you enjoyed the
303:30 - little mini project there at the end I
303:31 - hope you're already think thinking about
303:33 - making something to submit to the coding
303:35 - train passenger showcase so I'm here
303:38 - just to kind of wrap things up tie a
303:39 - little bow around this video and talk
303:42 - about what it is you might want to do
303:45 - next so maybe you're done that's totally
303:47 - fine very reasonable you don't have to
303:50 - watch any more videos do any more
303:52 - programming ever in your life if you
303:53 - don't want to but if you are interested
303:55 - in doing more there is a ton of stuff
303:58 - that I left out just to name a few
304:00 - things I didn't talk about loading
304:02 - images and reading the pixels of the
304:04 - image I didn't talk about using the
304:06 - processing 3D renderer or about how
304:08 - Transformations work which refer to the
304:10 - functions translate and rotate and scale
304:13 - I didn't look at data how to load text
304:16 - or how to load a spreadsheet and how to
304:18 - visualize that data into your code how
304:20 - to connect to an API meaning another
304:22 - service somewhere on the web that is
304:25 - feeding data that you could connect to
304:27 - and then talk about playing sound or
304:29 - loading video or about typography or or
304:32 - simulation and physics and all sorts of
304:35 - other things that you could do with code
304:37 - in processing or other environments but
304:38 - good news for you if you enjoyed the
304:41 - series I have so many more videos that
304:43 - touch on a lot of these Concepts so I
304:45 - will list with this video a lot of next
304:49 - things that you could look at one thing
304:50 - I might just suggest is go to the coding
304:52 - train coding challenges page you can
304:54 - sort and search and find all the project
304:56 - videos you are now set up to watch any
304:59 - of those although I should warn you that
305:01 - many of them use Java script so you
305:03 - might want to learn some of the basics
305:05 - of p5js before going to those videos
305:07 - which I also have videos about so there
305:10 - are so many different paths you could
305:11 - take obviously you could go to a
305:13 - different language uh python might be
305:15 - one that you're interested in you might
305:17 - want to find other resources and books
305:19 - and videos I'll try to collect as much
305:21 - as I possibly can and the coding train
305:23 - Discord is a great reference and place
305:25 - for you to chat about this and discuss
305:27 - this but really the main thing that I
305:29 - want to say to you is thank you it means
305:32 - a a lot to me that you sat through all
305:34 - of this that you're trying that you're
305:35 - learning to program I don't know how
305:37 - many people will watch this who knows
305:39 - but I would love to hear from every
305:41 - single one of you so join the Discord
305:43 - say hi say hi on social media if you've
305:46 - made something send me a screenshot a
305:48 - short little clip those are the things
305:49 - that I love to get and um that's it
305:52 - that's all I got for you thanks thanks
305:54 - um I'll see you again in 10 years
305:58 - 2034 is about when I'll be redoing the
306:01 - series again we'll see all right bye
306:03 - thanks for
306:04 - [Music]
306:15 - watching