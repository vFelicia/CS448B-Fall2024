00:01 - Hello.
00:01 - In this video, I'm
going to look at how
00:04 - you query an API continuously
while a program is running,
00:08 - a program that's perhaps
animating something.
00:10 - And that animation doesn't stop.
00:11 - It continues
smoothly but updates
00:14 - whenever new data comes in.
00:16 - Boy, isn't that
an exciting topic?
00:18 - You woke up this
morning and thought,
00:20 - I want to watch
a video about how
00:21 - you query an API continuously
while an animation is
00:23 - happening, right?
00:26 - That's what I woke up
thinking I was going to do,
00:28 - is make a video about that.
00:29 - Actually, I just thought
of this a few minutes ago,
00:31 - so I didn't really wake
up thinking about it.
00:32 - But let's just get started.
00:33 - So this, by the
way, is a program
00:34 - that I've set up in advance
just to have a simple animation
00:37 - on the screen.
00:38 - Nothing too exciting.
00:39 - There's a line
that's moving across.
00:40 - There's a single
variable for the line.
00:42 - The line is incrementing by 5
pixels When it gets to the end,
00:44 - it starts back at 0.
00:45 - So we can see
there's an animation.
00:47 - Now what I need to
demonstrate this idea is
00:49 - I need an API that's
going to give me data,
00:52 - and it's going to give me
different data every time
00:54 - I query it.
00:55 - So a lot of APIs
don't really do this.
00:58 - For example, if you
asked for the weather,
01:00 - you're going to get the
temperature outside.
01:02 - The temperature outside
obviously is changing
01:03 - but the weather API
probably isn't going
01:05 - to update every few minutes.
01:08 - If you ask for the New York
Times to do an article search,
01:10 - there's not going to be
a lot of new articles
01:14 - with a certain word
every few seconds.
01:16 - However, there is this API
that's on open-notify.org
01:23 - and it gives you the
International Space Station
01:25 - current location.
01:27 - And, by the way, in
case you were wondering,
01:30 - that's changing.
01:31 - It's moving.
01:31 - The Earth is spinning--
01:32 - I don't know.
01:33 - Somehow it all works-- physics.
01:34 - Ask Stephen Hawking.
01:35 - I don't know about this stuff,
although I find it fascinating.
01:38 - So what we can look
for here is, look,
01:40 - here is how-- here is
the URL for getting
01:43 - JSON data with the latitude and
longitude of the International
01:46 - Space Station.
01:47 - So all I need is
this particular URL.
01:50 - I'm going to copy it.
01:52 - I'll put it in the web
browser to look at that data.
01:55 - And we can see, there it is.
01:56 - The International
Space Station position
01:58 - is currently at this
particular latitude
02:00 - and this particular longitude.
02:01 - Hit refresh.
02:03 - Oh, come on, change.
02:04 - It changed, right?
02:05 - You can see it's changing
each time I hit refresh.
02:07 - A little bit, but changing.
02:09 - Oh, it's moving by
a fast latitude.
02:10 - This is like a-- this is called
the refresh dance, by the way.
02:15 - It's good-- physical
exercise is important.
02:17 - While I'm standing and
making these videos,
02:19 - I feel like I need
to move around more.
02:21 - So when you practice
APIs, move around.
02:25 - Where was I?
02:27 - So this is some stuff that I
want to get into the program.
02:31 - So, first, let's just
get started with that.
02:34 - So the first thing I want
to do is grab this URL now.
02:38 - And inside the program, maybe
just in setup right now,
02:41 - I'm going to say loadJSON.
02:43 - And I'm going to
say the URL is--
02:47 - for this particular API.
02:48 - And let's just make
this a global variable.
02:50 - I'm trying to make things
that fit in my code nicely.
02:52 - var url equals-- ah.
02:55 - Bad copy-paste job.
02:58 - Paste that in there.
02:59 - So that's the URL
for the API query.
03:01 - Let's make this a
little bit wider.
03:03 - So now I want to load JSON.
03:04 - I'm using the p5
loadJSON function,
03:07 - which says give me a URL.
03:10 - It doesn't say
anything, actually.
03:11 - But the thing you can
give to it is a URL
03:13 - where you can get some JSON.
03:15 - And then a callback.
03:17 - So I'm going to call
the callback gotData.
03:19 - So this function
will be executed
03:22 - when the data has come back.
03:23 - So I'm going to say
function and I'm
03:25 - going to write that
function, gotData.
03:27 - The argument, the
parameter of that function,
03:30 - which I happen to be calling
data-- you can call it anything
03:32 - you want, like a manatee.
03:35 - The parameter data
is what's going
03:39 - to get filled with the JSON
that's coming from that URL.
03:43 - So, just quickly, if I
just said println data,
03:46 - we'd be able to see
very easily that--
03:49 - whoops.
03:51 - Ah.
03:52 - So remember this thing?
03:53 - I talked about this
in a previous video.
03:54 - Boy, I hope this works.
03:56 - Sometimes it doesn't work.
03:57 - Sometimes it doesn't work
because of security issues with
04:00 - how information is passed
between different servers,
04:03 - and open-notify.org
is a different server.
04:05 - And if you just
add some padding--
04:08 - so this thing called JSONP.
04:13 - If you add a third
argument, jsonp--
04:15 - maybe someday I'll make a
video of just what is this JSON
04:17 - thing.
04:18 - It's telling p5
behind the scenes
04:20 - to use this other way of getting
the data that kind of passes
04:24 - security.
04:25 - So, hopefully, now, when I
run this sketch, we can see.
04:28 - And there it is.
04:28 - Now you can see the data showed
up down here in the console.
04:31 - I've got that data.
04:32 - So looking at this,
remember, the next thing
04:34 - that we need to do is figure
out how do I get the latitude,
04:37 - how do I get the longitude?
04:38 - Well, JavaScript Object Notation
is the way that I do this.
04:41 - This whole thing is an object.
04:43 - And I want to get the first
property, iss_position.
04:47 - And then I want to get the
first property of iss_position,
04:50 - latitude.
04:50 - I want to get the second
property of iss_position,
04:52 - longitude.
04:53 - And, by the way, I
said first and second.
04:55 - In objects, the order
doesn't actually matter.
04:57 - It's not like an
array where you would
04:58 - be referencing from the index.
05:00 - You'd be-- you-- you be--
05:02 - I'll be-- I am.
05:03 - I don't know what
tense I'm in any more--
05:05 - present, past, future
perfect, something like that.
05:07 - But I'm going to, in a
moment, on the computer,
05:11 - type in
data.iss_position.latitude.
05:14 - That's how I traverse
into this JSON data.
05:17 - So back here, I'm
now going to say,
05:21 - just to make sure
this is working,
05:23 - println
data.iss_position.latitude.
05:28 - What rhymes with latitude?
05:29 - Fortitude?
05:30 - I don't know.
05:32 - And you can see, there it is.
05:33 - Beautiful.
05:34 - So let's think about
what I might do now.
05:36 - Hmm.
05:37 - With that data, what might I do?
05:40 - Well, let's say I
want to draw the space
05:42 - station on the screen.
05:43 - And my space station
again, from the person
05:45 - with no visual talents,
will be a circle.
05:48 - So let's make a variable
called issX, issY,
05:54 - because I want to
make variables that
05:56 - are impossible to pronounce.
05:57 - And in gotData, I'm just going
to say issX equals the latitude
06:06 - and issY equals the--
06:10 - say it with me now.
06:11 - I feel like I'm Mr. Rogers--
06:13 - longitude.
06:14 - Can you say longitude?
06:17 - It would be an--
06:18 - yes, that's a good thing to
aspire, to be Mr. Rogers.
06:21 - So I can put those
in those variables.
06:23 - And let's give those
variables some default
06:25 - values just to start.
06:27 - And then, let's,
in our program--
06:30 - I feel like this belongs to
you and me, this program.
06:32 - So I could say our program--
06:35 - I'm going to draw the
International Space Station.
06:39 - And now I'm going
to say fill 255.
06:42 - Here we go.
06:43 - And where is it?
06:44 - Hmm.
06:45 - I don't see that
International Space Station.
06:47 - Why don't I see that
International Space Station?
06:49 - What data am I getting?
06:51 - 50, negative 95.
06:53 - Well, if I draw something
at the pixel x equals 50
06:56 - and the pixel y equals
negative 95, that's where?
07:00 - 50 over.
07:01 - That's way off the screen.
07:03 - So this brings up an
interesting question.
07:07 - I have a latitude and longitude.
07:09 - That's real world
measurement data
07:11 - of where the ISS actually is
above the Earth in the units
07:15 - latitude and longitude.
07:16 - But this thing that I'm drawing
in the window is pixels.
07:19 - It's two-dimensional.
07:20 - It's got an x-axis,
it's got a y-axis, 0, 0
07:22 - at the top left corner.
07:23 - So I somehow need to translate
latitude and longitude
07:27 - to x and y.
07:28 - Now, a topic for another video
might be how to do that using,
07:33 - quote-unquote, "correct"-- and
I won't use air quotes here,
07:35 - but, quote-unquote,
"correct math."
07:38 - if you take a spear
and you flatten it out,
07:41 - you need to do some sort
of spherical transformation
07:43 - of those spherical
coordinates to where
07:45 - they are in a 2D plane.
07:48 - But, you know, sometimes in
life that's too complicated.
07:51 - I don't want to worry
about that right now.
07:53 - It hurts.
07:54 - I have a pain that's like--
it's in my lower back right now.
07:57 - And I just want to live
an easy and friendly life.
08:00 - And the way that
we could do that
08:02 - is just with the map function.
08:03 - Because latitude has a range
between negative 90 and 90.
08:08 - And longitude has a range
between negative 180 and 180.
08:11 - Which one is it?
08:12 - Well, it's got-- one of
these was negative 95.
08:13 - I was right about that.
08:14 - So I could just
take those ranges
08:16 - and map them from 0 to pixel
width, from 0 to pixel height.
08:20 - So let's do that.
08:22 - So what I really
want to do is I'm
08:23 - going to say var lat
equals the latitude,
08:28 - var long equals the longitude.
08:30 - And then issX equals
map the latitude,
08:33 - which goes from negative 90
to 90, to between 0 and width.
08:39 - So, if you recall, I definitely
have a video somewhere all just
08:43 - about this map function.
08:46 - What the map function
does is it takes
08:48 - a value that has a
given range and maps
08:50 - that value to another range.
08:52 - By the way, you could do that
math yourself if you wanted to.
08:55 - I know you guys.
08:56 - I believe in you.
08:56 - It's not that
complicated, but it's
08:58 - nice to have the map function
to handle that for you.
09:00 - And I think perhaps
in my other video
09:02 - I talk about what the math
behind the map function is.
09:05 - So now, if we run this--
09:09 - look, there it is, the
International Space Station.
09:11 - And if I hit refresh--
09:13 - come on, move.
09:14 - You can see it's moving a
little bit, very ever so
09:17 - slowly and slightly.
09:18 - So I probably could
do a better job
09:20 - of making this appear more
individually interesting,
09:23 - but we've got
something working here.
09:24 - But I've spent all this time--
09:26 - I've been talking for 9 and
1/2 minutes and I haven't even
09:29 - gotten to--
09:29 - this is just all setup, all
setup for the real tofu.
09:36 - I don't want to say meat
because it sounds weird--
09:38 - the real essence of this video.
09:41 - Which is now-- all
I did was query that
09:43 - URL at the beginning in setup
and I got the data once.
09:46 - I want to just keep getting
that data over and over again.
09:48 - How do I do that?
09:50 - So there's a couple
of possibilities here
09:52 - of how you could do that.
09:54 - One thing is I have
this draw loop.
09:56 - draw, remember, is looping
over and over again
09:58 - for the purpose
of the animation.
09:59 - So I could figure
out a way to just put
10:01 - the loadJSON function in draw.
10:03 - That would be querying the
API 60 times per second.
10:05 - Now, that's probably
way too often.
10:07 - So another way I could do it
is use some kind of counter
10:09 - and say, like every
10 times through draw,
10:12 - or every 30 times, or every
100 times, query the API.
10:15 - All of those are
possible and I encourage
10:17 - you to try doing that on
your own as an exercise.
10:19 - Or put something in
the comments that
10:20 - say, hey, give a link to
some code that does that.
10:22 - I'll be glad to do that.
10:23 - But what I want to demonstrate
to you in this video
10:25 - is another way of doing it.
10:27 - And I will shuffle off
to Buffalo over here.
10:31 - Buffalo.
10:32 - And I'm going to do this with
a function called setTimeout.
10:38 - And even better yet,
I think maybe I'll
10:40 - actually do it with a
function called setInterval.
10:46 - These are functions that are
part of JavaScript itself
10:49 - in the browser.
10:50 - These are not p5 functions.
10:52 - And what these
functions do, setTimeout
10:55 - says trigger an event
once at blank time.
11:05 - So setTimeout says, I
want you to do this event
11:08 - and I want you to do
it 3 seconds from now.
11:11 - setInterval is very similar.
11:12 - Trigger an event over and
over every blank time,
11:21 - every blank milliseconds.
11:22 - Time should really
say milliseconds.
11:24 - At blank milliseconds,
at blank milliseconds.
11:27 - So the difference is--
11:28 - the event is clap.
11:31 - I'm going to say
the event is clap.
11:32 - So if I say setTimeout 3,000,
what's going to happen is--
11:36 - 1 1,000, 2 1,000, 3, 1000.
11:39 - If I say setInterval 3,000,
what's going to happen is--
11:43 - 1 1,000, 2 1,000, 3 1,000,
1 1,000, 2 1,000, 3 1,000,
11:47 - 1 1,000, 2 1,000, 3 1,000.
11:48 - It's going to do that at the
same interval over and over
11:51 - again.
11:51 - So you can ask
yourself, which one
11:53 - is the one you want
for this program?
11:54 - I want to ask for the
data every so often.
11:58 - So I can use setInterval.
11:59 - Now, there's some
nuance to this.
12:00 - There's some reasons
why in other scenarios
12:02 - I'd want to use setTimeout.
12:03 - And once I get the data
back, just ask for it again.
12:06 - That actually could be a
good way of doing this.
12:08 - But setInterval is going to
be easiest for us right now.
12:10 - So the way that
these functions work
12:12 - is, if I'm using setInterval,
for example, setInterval--
12:17 - and then I'm going to
pass in a callback.
12:20 - This is the function
name of the thing
12:22 - that I want to happen
every blank milliseconds.
12:27 - So all I need to do is
say, setInterval, do
12:29 - this thing every so often.
12:31 - Let's look at that
over here now.
12:33 - So in setup-- I want
this to start in setup.
12:37 - I want to say setInterval
askISS every--
12:43 - what should we do?
12:44 - Let's just do every second.
12:45 - So 1,000.
12:46 - So this now-- whoops.
12:50 - This line of code says execute
some function called askISS
12:54 - every 1,000 milliseconds.
12:56 - And the magic of JavaScript
and asynchronous events
12:59 - is I can set that
thing up going and it's
13:01 - going to happen on its
own, but draw down here
13:04 - will also continue.
13:05 - So this animation will continue.
13:07 - The API calls will be happening.
13:09 - When the data's writing, the
gotData function will happen.
13:12 - That whole how the order
of everything will happen
13:14 - will be managed by the
magic of JavaScript
13:16 - event-based handling.
13:18 - So all I need to do
is set up the events.
13:20 - I need to say, set
up this interval
13:22 - and then also do draw at
the same time, which is
13:24 - what I'm doing in this program.
13:26 - So now, what goes in this
function called askISS?
13:32 - This loadJSON call.
13:33 - So I just want to do
exactly this loadJSON
13:37 - call every 1,000 seconds
for the rest of time,
13:40 - at least while the
program is running.
13:42 - And we can run this now.
13:43 - And you can see, there it is.
13:46 - Come on, move, dot, move.
13:48 - ISS, get some speed going.
13:51 - So one thing that I
might do, actually, here
13:53 - is change my mapping.
13:56 - This mapping is I was mapping
the full latitude, longitude
13:59 - of the entire world.
14:01 - But we can see here that
it's currently at latitude 47
14:04 - and currently at
longitude negative 54.
14:07 - So let's go between 45 and
50, and negative 55 and 50.
14:13 - So if I change this to
be between 45 and 50,
14:19 - and-- what did I say?
14:20 - Negative 55 and negative 50.
14:23 - I think if I do that, we're
going to get some-- oh, look.
14:27 - There it is.
14:27 - It's moving.
14:28 - Can you see the space station?
14:30 - The space station is
flying every second.
14:32 - Now, you can see it has a
rhythm to it because I'm
14:35 - querying it every second.
14:36 - What I would love to do
with this but I've been kind
14:38 - of-- this video is
approaching 15 minutes--
14:40 - is I would love to add a
little easing motion into it
14:43 - so it doesn't just
jump to the next spot
14:44 - when it gets a new spot.
14:45 - It sort of smoothly
moves and you can
14:47 - make it feel like it's moving.
14:48 - I'd also love to put
an actual map there.
14:50 - I'd love to do the
correct spherical maths.
14:52 - I said maths again without
even thinking about it.
14:55 - Usually, I do that just
because I like saying maths.
14:59 - Oh, it's leaving.
15:00 - Goodbye, International
Space Station.
15:03 - So, anyway, but I'll leave
that as a review exercise
15:05 - for you guys.
15:06 - So what I would say
is give this a try.
15:08 - Like build exactly
the same thing.
15:10 - What happens if
you do it every 10
15:12 - milliseconds versus
every 3,000 milliseconds?
15:15 - Could you make it move,
interpolate between those two
15:19 - locations?
15:19 - I can't-- I'm trying to think of
other exercises that you could
15:22 - do.
15:22 - But play around with it.
15:23 - I'm sure you can be creative
and come up with some ideas.
15:25 - And hopefully this video helped
you learn something today.
15:30 - I don't have anything
like, say, [INAUDIBLE],,
15:32 - although I think
I say [INAUDIBLE]
15:34 - at the end of every video now.
15:35 - OK, goodbye.
15:39 - Broken-- sleeping mouse.
15:41 - Hashtag sleeping mouse.
15:42 - You could say that.
15:43 - If you watched this video,
tweet me hashtag sleeping mouse.
15:46 - [INAUDIBLE] sleeping--
I don't know.
15:48 - How am I going to keep track?
15:49 - I'm not going to build a
search for these things?
15:51 - Never mind.