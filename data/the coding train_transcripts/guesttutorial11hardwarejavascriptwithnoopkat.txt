00:00 - - Hello, and welcome to
another guest tutorial on,
00:04 - (train whistling)
00:05 - The Coding Train.
00:06 - Yes, this is The Coding Train.
00:08 - What you are about to
watch is an edited version
00:10 - of a live stream from a couple
weeks ago about hardware,
00:14 - (imitates ghost)
00:15 - and JavaScript.
00:16 - (imitates ghost)
00:17 - And I was near the hardware
and it didn't light on fire
00:19 - which is kind of blowing
my mind right now.
00:21 - Now, this video will not feature me.
00:24 - It features a wonderful guest
00:25 - that came here to do a
live stream in the studio.
00:28 - Her name is Suz Hinton aka Noopkat,
00:32 - and yes it is pronounced no op kat,
00:34 - even thought for the last many years
00:35 - I've just been saying noop kat.
00:38 - Noopkat.
00:38 - She does a live stream every Sunday
00:40 - on her own Twitch channel.
00:41 - Check this video's description for
00:43 - a link to that Twitch channel,
00:44 - highly encourage that you
go over there and subscribe.
00:47 - And, what you're gonna see
actually is a version of my,
00:50 - well of the, a 10 Print coding challenge,
00:53 - but on a hardware little
ELT screen OLED screen thing
00:57 - with JavaScript
controlling it and Arduino.
01:01 - It's crazy.
01:02 - It's amazing.
01:03 - You got to watch this video (laughs).
01:04 - Okay, so I'll, thanks for tuning in.
01:07 - I gotta stop talking because
you're here to see Noopkat.
01:09 - Goodbye.
01:10 - - Thank you Dan for having me.
01:12 - I'm so excited.
01:13 - I'm such a fan girl of The Coding Train
01:15 - so I'm like really excited to be here,
01:18 - and also, so I do a lot of hardware stuff
01:21 - so I wanted to sort of
briefly intro myself on that.
01:24 - I work on a lot of open
sourced JavaScript hardware,
01:27 - which I know for some of you you might
01:29 - not typically associate
JavaScript with hardware,
01:32 - but I promise that it's actually super fun
01:34 - to get started with it and
it's really really quick
01:37 - to prototype with JavaScript hardware.
01:39 - So that's kind of its main attraction,
01:41 - but you can also just
create your own kind of
01:44 - fully implemented like real contraptions
01:47 - and still run JavaScript to control it.
01:49 - So, I'm gonna show you one way of
01:51 - controlling hardware
with JavaScript today.
01:54 - We are gonna be work
with an Arduino and it's
01:56 - an Arduino Uno which is
kind of the most common one
01:59 - that a lot of people get started with.
02:01 - And we're gonna be driving
this thing called OLED Screen
02:04 - and I'm gonna explain all this
02:06 - just to make sure that
Dan's not super scared.
02:08 - (laughs)
02:09 - 'Cause Dan told me he's
really afraid of hardware.
02:12 - And I'm really afraid of generative art
02:15 - because I feel like I'm not good at it,
02:18 - so I'm trying to combine the two together
02:20 - because Dan's really
good at generative art,
02:22 - so somewhere in the middle
we're gonna find like
02:24 - a nice happy place where
we're both learning something.
02:27 - So, hopefully that's gonna go well.
02:28 - So, yeah.
02:29 - Thanks so much for joining us.
02:31 - I'm so excited.
02:32 - I'm normally streaming on a Sunday,
02:34 - and yeah I'm streaming on a Friday
02:36 - which is blowing my mind so yeah.
02:38 - So, I am going to just take you through
02:40 - a couple of the tools that
we're gonna be using today.
02:43 - Just forgive me, this is not my computer
02:45 - so we had some sort of
last minute shenanigans
02:47 - but I think it's gonna be okay.
02:49 - So I'm gonna be using
Johnny-Five which is kind of
02:52 - the beloved hardware,
JavaScript framework.
02:56 - It has been designed to be
like the jQuery of hardware.
03:00 - So if you've ever used jQuery before
03:02 - then you know that it's a really nice API.
03:05 - It's super accessible
to get started with it
03:07 - so Johnny-Five was designed by one
03:09 - of the contributors to jQuery,
03:12 - Rick Waldron and he's
done a fantastic job.
03:14 - And there's been a lot of
contributors ever since.
03:16 - So I think there's at least
70 something contributors now,
03:20 - and that was when I
checked a couple years ago
03:22 - so it's probably even bigger now.
03:23 - So we're gonna be using
this with our Arduino.
03:26 - So if you wanted to follow along
03:28 - with some of the beginning code examples
03:30 - that we'll be using today,
03:32 - you can jo to Johnny-five.io.
03:34 - It's kind of like the Short
Circuit robot character
03:37 - si I really like that
it's named after that.
03:40 - And we're also going to be making use
03:42 - of a module that I
wrote a little while ago
03:44 - about three or four years ago,
03:46 - and it's called OLED JS and,
03:49 - OLED is the type of screen that this is.
03:52 - It's an OLED screen just meaning
03:53 - that the little pixels that
are showing up on the screen
03:57 - are actually driven by OLED's
which is like a type of LED.
04:01 - And so I wrote the module to
be compatible with Johnny-Five
04:04 - so that you can start really
easily drawing to the screen
04:07 - without having to know a lot of
04:08 - the stuff that's going on underneath.
04:11 - So, I'll cover a little bit more on that
04:12 - when we actually get started but
04:14 - we're also gonna be using that as well.
04:17 - So I wanted to give a shout
out to my friend Tim Holman
04:19 - because he's actually the one that finally
04:22 - got me playing with
generative art super recently.
04:25 - We hung out at JSConf AU in Australia
04:27 - and he gave this awesome
talk about generative art
04:30 - and how you just need a
simple things in a tool kit
04:34 - to get started with
and it's the first time
04:36 - I've felt like not
afraid to do it (laughs).
04:39 - So I just wanted to,
04:40 - so you should check out
Tim Holman's website.
04:42 - It's tholman.com, and yeah.
04:45 - He does really really really hilariously
04:47 - funny stuff on the internet so you
04:48 - should absolutely check him out.
04:49 - So I wanted to thank him for finally
04:52 - getting me started with it.
04:54 - So the generative art that
we're gonna create today is,
04:58 - well at least on this website
it's called a Pseudo-maze.
05:01 - Is that what it's actually called Dan?
05:03 - - [Dan] I dunno.
05:04 - Maybe it looks like the 10 Print design.
05:06 - - Is that what it's called the--
05:07 - - [Dan] Is it 'cause
you just pick randomly
05:09 - like a left or right line?
05:10 - - Yeah yeah yeah.
05:11 - - [Dan] So it's not actually a maze
05:13 - 'cause it would just,
- Yes.
05:14 - - [Dan] No that's exactly,
I have a coding challenge
05:15 - that's exactly that pattern.
05:17 - - Yes.
05:18 - - [Dan] And it's from
the old Commodore 64.
05:19 - - Oh.
05:20 - - [Dan] There's a one line code 10 Print,
05:22 - go to 10 where you could
randomly pick a forwarder.
05:24 - - That makes sense.
05:25 - So that's--
05:26 - - [Dan] That's perfect.
05:27 - This is good synergy.
05:28 - (Dan laughs)
05:29 - - So I noticed also that you did like
05:30 - a coding challenge on Floyd-Steinberg?
05:32 - - [Dan] Yes.
05:33 - - Yeah, so displaying like photos
05:36 - or just like high resolution
images on these screens,
05:39 - it's very affective to use
05:40 - the Floyd-Steinberg algorithm too.
05:41 - So, this is me trying to get
you less afraid of hardware
05:45 - because you're still using
the exact same stuff on this.
05:47 - So if we have time, I don't think we will
05:49 - but if we have time,
05:50 - I can also show like displaying
pictures on this thing
05:53 - but for today we're
actually just gonna work
05:55 - with lines which is super simple to do.
05:57 - And just to kind of like explore
06:00 - the concepts of generative art.
06:01 - So if you've already seen
Dan's coding challenge,
06:04 - this is gonna be pretty similar,
06:05 - but it's gonna allow to
see how you then apply it
06:08 - to something like hardware I guess.
06:09 - So I think it will still
be super interesting.
06:11 - So, thanks for tuning in.
06:13 - Okay, so that's sort of the super
06:15 - quick crash course to stuff.
06:18 - I do actually have a folder
right now that I've created.
06:23 - I did pre-install some
stuff ahead of time,
06:26 - just so that we don't have to sort
06:28 - of like sit around waiting
for an MPM to install,
06:31 - but I will be doing
this with Node.js today
06:33 - which is a way of running
JavaScript outside
06:35 - of the browser which is really cool.
06:38 - So if you go to nodejs.org,
06:39 - (typing)
06:41 - just like that you should
be able to read up about it
06:42 - but it's really really cool.
06:44 - So that's kind of what
Johnny-Five runs on top of.
06:47 - But recently I did get
it working in the browser
06:49 - but that's for another
episode probably (laughs).
06:52 - Cool, so I have this folder here.
06:54 - I've installed Johnny-Five.
06:56 - I've installed OLED JS,
just those two packages
06:59 - that I showed you before and that's it.
07:02 - And then we have our code editor here.
07:04 - I didn't quite get Bim set up.
07:05 - I was on a mission to
get Bim going (laughs),
07:08 - because if you've seen my stream before
07:09 - you all know that I use Bim but,
07:11 - so we're using Visual Studio Code instead
07:13 - and then I'm gonna just keep crossing back
07:14 - and forth between Iterm
and Visual Studio Code.
07:17 - So let me know if you
can't read anything and Dan
07:19 - will yet at me and then
we'll figure it out (laughs).
07:21 - Cool.
07:22 - So, I do actually have the Arduino plugged
07:25 - in right now as you should be able to see.
07:27 - So we're not actually gonna
plug anything into it yet.
07:29 - We just want to kind of establish
a connection to it first
07:33 - just to make sure that we can
do our little hello world,
07:36 - and then we'll start
plugging in the screen.
07:38 - So I sort of wanted to do a
lot of this stuff from scratch
07:40 - just so you can kind of
see it from the beginning.
07:42 - So I've created a black file called artjs
07:45 - because that's what we're creating today.
07:47 - And I'm going to start just by requiring
07:51 - the dependencies that I actually need.
07:52 - So, in Node.js with JavaScript instead
07:56 - of maybe doing Import which you could do,
07:58 - I'm just gonna be using
require which basically says,
08:01 - hey I've been sold these libraries
08:03 - and I actually want to start using them,
08:04 - so I can then assign them to variables.
08:06 - So I think the first thing
I want is Johnny-Five.
08:09 - So I'm just gonna call that five for short
08:11 - just because it's quicker to type.
08:13 - And then I'm just going to require that
08:16 - and it should be smart
enough to figure that out
08:18 - because Visual Studio
Code is kind of amazing.
08:20 - So that's me actually
requiring Johnny-Five
08:23 - and saying that that library from now on
08:24 - when I want to access
it, it's called five.
08:27 - The next thing I want is
the actual OLED library,
08:30 - and because that's a class
I'm gonna capitalize it
08:33 - and let's see if it's smart
enough to figure this one out.
08:37 - It didn't.
08:37 - Oh there we go.
08:38 - So, now that we have them,
08:40 - we can actually start working with them.
08:42 - So, before we do anything
with this OLED screen,
08:45 - we want to just test that
Johnny-Five is working
08:48 - and is able to talk to the device right?
08:51 - So, we can do like a hello world with it,
08:53 - but I kind of wanted to first
describe on the whiteboard
08:57 - kind of how Johnny-Five actually talks
09:00 - to the Arduino before we
actually start on that.
09:02 - So let's go do that.
09:06 - Okay.
09:06 - So, we've got our computer right here
09:09 - and this is kind of the confusing thing
09:10 - for some people to understand
exactly how Johnny-Five works.
09:14 - So I'm gonna draw a really
bad keyboard here (laughs).
09:17 - But you get the idea.
09:20 - And then this computer is like okay
09:23 - well I want to talk to this Arduino right?
09:25 - So, we can have back and
forward communication with it.
09:30 - So let's just say that
this is the Arduino.
09:33 - Everything has a smiley
face too so (laughs).
09:35 - So this is the Arduino.
09:37 - So what's actually happening
when we run Johnny-Five
09:39 - is that every time we
start that Node.js process,
09:43 - it actually uses this really
cool library called Serial Pod
09:46 - to establish like a two way connection
09:48 - between the Arduino and the
device, the laptop itself.
09:53 - And what it actually speaks is
called the Firmata Protocol,
09:57 - which I don't know if
you've head of before Dan?
10:00 - - [Dan] I have.
10:00 - - Yeah.
10:01 - - [Dan] Yes.
10:02 - - So have you used this before?
10:03 - (Dan laughs)
10:04 - - [Dan] I think I went to a workshop once
10:07 - where somebody was teaching with Firmata.
10:10 - I know that students sometimes here use it
10:12 - but mostly the students at
ITP use like the Arduino,
10:15 - sort of directly.
10:16 - - Okay that makes sense.
10:17 - Yeah, and so if you wanted
to use the Arduino directly,
10:19 - this particular Arduino we're using today
10:21 - only sort of understands C ++.
10:24 - So that's why we wanted
to start with something
10:26 - a bit higher level and it's a little
10:27 - bit easier to sort of
stay on your machine.
10:30 - - [Dan] So if you're using Firmata
10:32 - you can write the Arduino code
basically with JavaScript?
10:36 - - Yeah so you can
- Wow.
10:37 - - write sort of like you can basically
10:39 - become the remote control for the Arduino
10:40 - through the Firmata protocol.
10:42 - - [Dan] Got it.
10:43 - - So we have like our JavaScript,
10:45 - which understands the Firmata protocol,
10:47 - and then we have a C ++ script
running on this board here
10:51 - which understands the
Firmata protocol too.
10:53 - - [Dan] And that's like an out of the box
10:54 - thing you download and
run on the internet?
10:56 - - Exactly.
- Wow.
10:57 - - So I'm gonna actually run that,
10:58 - well I'm gonna run like
a very quick script
10:59 - to install that on my Arduino's,
11:02 - and I'm gonna show you how to do that
11:03 - so you don't even have to download
11:04 - the Arduino ID or anything.
11:06 - So, we can do that.
11:08 - And the way that these talk to each other
11:10 - is because the know the same
language which is Firmata,
11:13 - they just kind of send op
codes between each other.
11:15 - So,
11:16 - that's not even a zero.
11:17 - So,
11:19 - maybe zero FF or just,
11:22 - that's like a byte that
has value like 255.
11:25 - Maybe that means something very,
11:28 - like substantial in the Firmata protocol.
11:30 - Maybe it means hey, start
sending power to this pin
11:34 - so that you can turn an LED
on or something like that.
11:36 - I don't actually have the
Firmata protocol memorized
11:38 - but I do know that it is
based on the Midi protocol.
11:42 - So it uses like,
- Ah.
11:44 - - like I guess the notes and everything,
11:46 - which is I think a really really cool part
11:48 - of like Firmata's history
that it uses Midi to do it.
11:51 - So that's like a super high level
11:53 - view of how it actually does it,
11:54 - just because the stuff that we're working
11:56 - with today is so heavily abstracted.
11:58 - So we want to just make sure that
12:00 - you still understand that this
12:01 - is walkie talkie thing happening,
12:03 - and that the JavaScript never actually
12:05 - goes and lives on this device,
12:06 - it's really just a remote control.
12:09 - So, and we're gonna have
a whole different protocol
12:12 - talking to the actual screen which
12:14 - I'll draw here later on as well.
12:16 - Cool?
12:17 - Alright.
- Yeah.
12:18 - - Let's do it.
12:19 - Okay so now that we've
got our dependencies
12:22 - we actually want to make sure
12:23 - that it's talking to the device.
12:24 - Now we mentioned before that the Arduino
12:27 - needs to actually know what
the Firmata protocol is right?
12:31 - So we actually have like a pre-made sketch
12:34 - that Arduino itself publishes with the ID
12:37 - and it's called Standard Firmata.
12:39 - And so we want to use that.
12:41 - But, having to open the Arduino ID
12:43 - and then flash a script to the Arduino
12:46 - and then close it again
is sort of just annoying
12:49 - because that's the only
thing you use it for.
12:51 - So I ended up making a package
12:53 - and it's called Firmata Party.
12:56 - And I think I installed
this on Dan's machine.
12:58 - I did (laughs).
12:59 - So what Firmata Party does
is it allows you to have
13:01 - a party with Firmata by just being able
13:03 - to transfer the Firmata script onto
13:06 - the Arduino device that you actually have.
13:09 - So that's literally all it does,
13:10 - but it does actually get you started
13:12 - and up and running really quickly.
13:15 - So it's just a command line
up that I wrote in Node.js
13:17 - so we can run Firmata Party.
13:19 - And then we're gonna write
the name of the Arduino board
13:22 - that it's actually supposed to be flashing
13:24 - so that it knows what to
look for that's plugged in.
13:26 - So we're gonna run Firmata Party Uno.
13:28 - Literally all that does is
13:30 - it takes the Firmata Part C ++ script
13:33 - that the Arduino needs to
run and it just uploads it
13:35 - and then we don't actually
upload any scripts
13:38 - to the Arduino after this.
13:40 - We're just running
JavaScript on the laptop
13:42 - as we said to just kind of send stuff
13:44 - to that Firmata script that's running.
13:46 - And it's really just sending commands
13:48 - it's not actually sending any
code or anything like that.
13:51 - So hopefully that actually works.
13:52 - It seemed to have worked.
13:53 - I think that,
13:56 - I think that I need to do
-v just to see if it did.
13:59 - Oh wait no.
14:00 - Maybe it's debug.
14:01 - Anyway, I can see that
it's actually working.
14:03 - (laughs)
14:05 - So maybe it is --debug let's see.
14:07 - Oh there we go.
14:09 - Just so you can actually
see what it's doing.
14:11 - So it says found Uno on
port, blah, it connected.
14:14 - The reset was complete.
14:15 - It's flashing the code and then we have
14:17 - a nice green status saying that
it's successfully completed.
14:21 - So now that we have Firmata
running on the device
14:23 - it's actually ready to start listening
14:24 - for any commands that come
in via that USB connection.
14:28 - So, now that we have a five instance,
14:32 - we want to create a board right?
14:34 - So, we want to create this board instance
14:37 - so then we can start kind of sending stuff
14:39 - to the board and receiving
stuff from the board.
14:42 - (typing)
14:43 - So I think we just need to do a new,
14:46 - whoops.
14:48 - Five.board I think.
14:50 - Wow this auto complete is blowing my mind.
14:52 - (Dan laughs)
14:53 - I don't use Visual Studio Code very often
14:55 - but it is like super nice.
14:57 - Okay so we have a new board.
14:59 - What that actually does is it just goes
15:01 - and like looks at all the
serial ports or the USB
15:04 - I guess ports on your computer
15:06 - and it goes are you an Arduino?
15:07 - Are you an Arduino?
15:08 - Are you an Arduino?
15:09 - So it's actually really awesome
15:10 - because it takes a lot of that stuff
15:13 - out of your responsibility to do.
15:16 - So then the board comes back as an object
15:19 - that you can listen to events on.
15:21 - Again this is very similar to jQuery,
15:23 - so normally where you would have
15:24 - like document.('ready'),
or document.on('ready'),
15:28 - you can actually do board.on('ready')
15:30 - which is actually pretty chill.
15:32 - So I feel like Dan you
could totally do this.
15:34 - (typing)
15:35 - (laughing)
15:36 - - [Dan] I'm following everything so far.
15:38 - - Okay cool.
15:39 - So now that we have an, we've
sort of attached a listener
15:43 - to the ready event which
basically says that,
15:46 - we've been able to guarantee that
15:47 - there's a good connection
happening with the Arduino,
15:50 - we just want to console.log
out that it's actually ready.
15:52 - So we can just write, yay!! I guess.
15:55 - And then, let's try and run
this just before we sort
15:58 - of get ahead of ourselves and
start writing extra stuff.
16:01 - (typing)
16:02 - So, whoop.
16:03 - So I'm gonna do node I think art.js
16:06 - and let's see what happens.
16:08 - Alright.
16:09 - Seems to have found it.
16:11 - And then we got yay!!
16:12 - So that's pretty cool.
16:13 - What Johnny-Five does
too is it actually gives
16:17 - you a REPL which is a read,
evaluate, print, loop,
16:21 - which is really cool because
you can actually start looking
16:25 - at anything that you create globally
16:27 - to be accessible in the REPL.
16:31 - So we're not really gonna use that today
16:33 - but I just wanted to say that
it's a really nice feature.
16:35 - So, by me writing this,
16:37 - that's actually the instance of the board.
16:39 - So you can see a whole
bunch of stuff comes out
16:41 - if you wanted to inspect that further.
16:43 - So to exit I'm just gonna do,
16:44 - I'm just gonna send like the control C.
16:49 - Just the C again twice and then,
16:50 - or the interrupt, I forget
which one it is but yeah.
16:53 - So we're gonna do that.
16:54 - So, we wanted to actually
start using the screen now,
16:58 - because that's really the
only thing that we're gonna do
17:01 - with like using Johnny-Five is to be able
17:04 - to use it to speak with
the screen directly.
17:07 - So we kinda have to go over a little bit
17:09 - of theory of what we're doing today.
17:11 - But we also want to plugin
this screen as well.
17:13 - So I think we're actually gonna
start with the theory first.
17:17 - Alright so we have this
here but is sort of wanted
17:19 - to just start like a new
section over here just for now.
17:23 - So we wanted to create this
generative tile effect,
17:27 - so we want to sort of explain that first.
17:29 - So, let's imagine that our screen is here,
17:34 - our little tiny OLED screen,
17:36 - and the maze before
looked really complicated
17:39 - if you're sort of not able
to break it up with your eyes
17:42 - but what it really is is it's just a grid.
17:45 - So this is what we're
gonna be programming today
17:47 - and this is not actually
to scale of what the screen
17:50 - actually is but it's just
giving you an example
17:53 - of like a really small
17:57 - cut away of the screen that
we're going to be doing.
17:59 - So in order to create this
generative art pattern,
18:02 - we actually are just gonna
draw one of two things.
18:04 - So we're gonna generate a random number
18:06 - and then depending on whether
18:08 - the number is more than .5 or not,
18:11 - we're gonna draw a line
that's facing like either,
18:15 - it's either pointing one way
or it's pointing the other.
18:17 - So we have like one of two lines.
18:19 - So it's going to be either this line,
18:21 - or it's gonna be this line.
18:22 - That's it.
18:23 - So it's either gonna be leaning forward
18:24 - or it's gonna be leaning back.
18:26 - So for example if I was to
use my own brain to do this
18:28 - which is actually harder
than it looks (laughs),
18:31 - we can just start sort of
generating these lines,
18:35 - but if we let the computer do it instead
18:37 - it's gonna be a lot quicker (laughs).
18:40 - And we might actually get some
18:41 - really nice effects out of it.
18:42 - So that's sort of how that
algorithm actually works.
18:45 - We just split the screen up into tiles,
18:47 - and then we just figure out how
to actually draw those lines
18:52 - by cutting out the screen into pieces.
18:54 - So hopefully that made sense.
18:56 - Cool.
18:57 - So the actual screen
itself that we're using is,
19:01 - the dimensions are 128 by 64.
19:04 - So I want you to remember those dimensions
19:06 - 'cause they're like super super important,
19:08 - and I was gonna explain how
the screen actually works
19:12 - but I might just leave that till the end
19:14 - if anyone's got questions about it.
19:15 - But because I did write
the actual screen library
19:19 - I can actually explain to you how
19:21 - it actually is able to take pixel data
19:23 - and stuff like that but for today,
19:25 - maybe we'll just keep going with that.
19:27 - Cool.
19:28 - So the screen actually
speaks a protocol called I2C,
19:32 - or it's actually I think
technically I squared C
19:37 - but I always call it I2C because
19:38 - that's just like how I read it.
19:40 - But it stands for I
think Inter Integrated,
19:46 - Communication?
19:47 - I think Scam Line's gonna know
the answer to this (laughs).
19:51 - So it's a way of communicating
19:53 - and it's actually a really
really cool protocol
19:56 - because it's very efficient.
19:58 - It doesn't take a lot of wires,
20:00 - and you get a lot of control over things
20:02 - like the clock speed and things like that.
20:04 - So I'll try not to get
too deep in the weeds,
20:06 - but it's really cool to kinda know
20:08 - how these devices actually work.
20:10 - (sniffs)
20:10 - So generally you have,
20:12 - two different devices right?
20:14 - So I'm just trying to make sure
20:16 - that you can actually all see this.
20:17 - I'm not going off the edge of the screen.
20:18 - But, we have our Arduino here.
20:21 - Now our Arduino is know as the master.
20:24 - And then we have our screen.
20:26 - - [Dan] Sorry.
20:27 - Inter Integrated Circuit Bus.
20:29 - - Thank you.
20:30 - I always think it's connection
20:32 - instead of circuit bus but yeah.
20:34 - So okay, so Inter Integrated Circuit Bus,
20:36 - which is really cool.
20:37 - So, we have our Arduino
and we have our screens.
20:40 - So the Arduino is known in this I2C
20:43 - or I squared C relationship as the master,
20:46 - and then the screen is known in
20:48 - this relationship as the slave.
20:50 - Now I don't really like the
whole master slave kind of,
20:54 - like metaphor.
20:55 - So I like to call this
Arduino the captain.
20:58 - (writing)
20:59 - And the screen is the sailor.
21:01 - (laughs)
21:02 - So we're gonna go with them today
21:03 - 'cause I think it's a
really cute metaphor.
21:05 - So the captain is responsible for like,
21:08 - sending out commands to the,
21:11 - like the crew on the ship right?
21:12 - And the sailor always
takes that direction.
21:15 - So generally the captain is
controlling the whole scenario
21:18 - and the sailor is just kind of
21:19 - like carrying out those commands.
21:21 - So that's like the best
way to think of it.
21:23 - And so in I squared C we have
our regular power and ground,
21:27 - but we also have like
two other connections.
21:30 - So this is gettin' a little bit small
21:32 - but one is the clock and the other
21:34 - one is just like the data line.
21:37 - So we have only one
line that we need to use
21:39 - in order to send the beeps and boops back.
21:42 - And by the beeps and boops I guess
21:44 - I mean the zeros and the ones.
21:46 - And then the clock is an external,
21:49 - is an external kind of wire as well
21:50 - because then we can actually
without getting too much
21:54 - into like how this stuff works,
21:55 - we can use the clock externally
and to actually specify
21:58 - the speed at which we
want everything to run.
22:00 - So I squared C is actually
a really cool protocol.
22:03 - If you want to read more about it
22:04 - you can definitely look
on sites like Spock Fun
22:06 - and other sites because
it's super super cool.
22:09 - So that's what we're gonna be using today,
22:11 - in order for our Arduino to actually
22:13 - like talk to that screen.
22:15 - So you don't see a lot of
that when I'm actually coding,
22:18 - because I've heavily abstracted that
22:20 - but that's the gist of
what's goin' on today.
22:24 - So I guess that's what we're gonna do.
22:26 - So let's get going.
22:28 - - [Dan] I think there was a question
22:29 - that I noted at one point
22:30 - which was,
- Okay.
22:31 - - [Dan] I don't, this might've
been from a little while ago
22:34 - so apologies if this
messes up the momentum but,
22:37 - so how much space,
22:39 - well actually I think I might know
22:40 - the answer to this question
now I'm actually realizing,
22:42 - but how much space does Firmata and all
22:43 - the js libraries take up on the Arduino?
22:46 - Is that a concern to keep in mind?
22:47 - - Yeah that's a really good question.
22:48 - So I know that the
standard Firmata C ++ sript
22:51 - for the Arduino is a pretty big one.
22:54 - Whenever knew features want
to be added to Firmata,
22:57 - sometimes you have to
take other features away.
23:00 - So that's why we have standard Firmata
23:02 - and then sometimes we have other versions
23:03 - that have like extra things put in there.
23:06 - So, this is a Arduino Uno.
23:09 - So it has 328
23:11 - byte.
23:12 - So kilobytes of memory.
23:14 - So there's not a lot on there.
23:16 - And so it does kind of mean that,
23:19 - oh sorry 32 kilobytes I believe.
23:22 - Yes.
23:22 - So it's got 32 kilobytes,
23:24 - and that means that you
don't have a lot of room.
23:27 - The good news is that the
JavaScript that we're running
23:29 - never actually ends up on the device.
23:31 - So if the Firmata script
that we flashed before
23:34 - successfully flashed to the device,
23:35 - then we know it's gonna fit.
23:37 - Obviously that matters when
it comes to things like,
23:41 - if you have variables
or it's trying to buffer
23:44 - a lot of the messages coming
through on the device,
23:46 - you might actually see
those difficulties as well.
23:48 - So when you're running your program
23:49 - you also want to leave enough room,
23:51 - or have enough good data structures
23:54 - in order to deal with the fact
23:55 - that there are a lot of
messages coming through
23:57 - that the device has to
hold onto for a little bit.
23:59 - So as usually with everything,
24:02 - it's always a balance.
24:03 - But that's a really good question,
24:04 - and just to remind you
the JavaScript never
24:06 - actually goes to the device.
24:08 - The JavaScript script is simply
24:09 - just controlling the device instead.
24:11 - So the JavaScript is just
sending op codes to the device
24:15 - so that we don't have to
worry about that huge overhead
24:17 - of how big JavaScript
would be to send to it.
24:21 - Cool.
24:22 - So the next thing we want to do is to plug
24:24 - the OLED screen in and
start interacting with it.
24:28 - So, if I have the overhead camera sorry,
24:31 - we have a bunch of different wires.
24:33 - So actually let's go back and look
24:34 - at the documentation for OLED js.
24:38 - So I tried to document this
as good as possible (laughs).
24:43 - But I'm always looking for
port requests or issues
24:45 - if you find anything confusing.
24:47 - So the SDL,
24:50 - that's mentioned just over here,
24:52 - that's actually the data line and
24:54 - then you've got SCL
which is the clock line.
24:56 - So I've been pretty clear
about if you're using
24:59 - an Arduino Uno then these
are the pins to use for each.
25:01 - The reset has to go to four,
25:04 - and then you've got your
standard power and grounds
25:06 - which I usually don't document
just because it's pretty easy
25:10 - to do a one for one with those.
25:11 - So I will actually show
that being plugged in
25:13 - before we actually get started.
25:16 - So I have my Arduino here,
25:17 - and I have power, ground,
reset, clock and data line.
25:22 - So that ends up being a total
of five different cables.
25:26 - But it is actually still pretty efficient.
25:28 - It is still I think less cables than SPI,
25:33 - and that's just because the
reset line is actually--
25:35 - - [Dan] So, I hate to pause you but--
25:36 - - [Suz] Yeah yeah go for it.
25:37 - - [Dan] But I think, I'm getting a message
25:38 - that maybe we could focus
this camera a little better.
25:41 - - [Suz] Okay.
25:42 - - [Dan] So.
25:43 - - [Suz] So this is kinda
the reset wire is not joined
25:46 - to the others so it's usually the easiest
25:48 - one for me to connect first.
25:49 - So it says in the documentation that reset
25:51 - has to go to pin four on the Arduino.
25:53 - So you might not be able
to actually see this
25:55 - but these is a little tiny four numeral
25:57 - next to that little pin input,
26:00 - and so I'm literally just
trying to connect each one
26:03 - to the correct one as
listed in my documentation.
26:07 - So I like to use red for
power and black for ground.
26:10 - So I'm gonna go ahead and plug them in
26:12 - 'cause they're always like super easy.
26:14 - Especially if you've done
this a couple of times before.
26:17 - So I just plugged them
into ground and power
26:20 - and that just leaves our clock,
26:23 - and our data line.
26:26 - So our data line is
actually the brown cable.
26:27 - Our clock is the white.
26:29 - Again you can make up
whatever convention you want
26:31 - but I like to use white for clock
26:33 - because it's just like
my own little personal
26:36 - thing that I'll always remember.
26:37 - So the clock I believe needs to
26:39 - be pin A5 which is analog pin.
26:41 - And then,
26:45 - A4 is the data line.
26:46 - So the reason why we
use A4 and A5 is because
26:49 - most Arduino boards come
with I squared C capabilities
26:53 - built in but they use very
specific pins to do that.
26:56 - So for an Arduino Uno the A4
and A5 pins are your clock
27:00 - and data lines for this particular board.
27:04 - So, it's not sort of arbitrary.
27:06 - This is kinda how the Arduino
board is being set up.
27:09 - The reset pin was just an
arbitrary choice by me.
27:14 - So, we have a lot of
this code here already.
27:17 - We just need to write
these middle bits here.
27:21 - And so we have to pars some options in
27:23 - to tell it what size screen we have.
27:25 - We have to give it the
address of the device itself
27:27 - which can vary per screen.
27:30 - And then we also have to create
27:31 - an instance of our OLED screen.
27:33 - So we're just gonna go ahead
and do that in the code now,
27:37 - in order to start sort
of connecting to it.
27:39 - - [Dan] You're still
using the overhead camera.
27:41 - - No.
27:42 - - [Dan] Yeah.
27:43 - - Thank you.
27:43 - (laughing)
27:44 - So I'm gonna show you that again.
27:46 - So it's just these lines here.
27:49 - We're just gonna be doing
something very similar to this.
27:51 - But I'm just gonna walk you through it
27:52 - instead of copying and pasting.
27:53 - So, let's create,
27:56 - (typing)
27:57 - some options.
27:57 - And by the way, this is all documentation
27:59 - that's not using the
most modern JavaScript.
28:02 - So we're still sort of using
var and things like that.
28:05 - It's up to you if you
want to request that.
28:07 - I sort of have just left it old
28:08 - so that people don't necessarily
have to use trans filers
28:11 - to be able to use those new features.
28:13 - But it depends on what
version of node they're using.
28:16 - I think most people are on version
28:17 - four at least now so that's good.
28:19 - (typing)
28:20 - Okay, so I needs to pars in options
28:22 - so that my screen library kind of knows
28:25 - how to control this device.
28:26 - So before I actually,
28:29 - put that in I'm gonna establish just some,
28:32 - some constant variables
that are not gonna change.
28:36 - So I'm gonna call that width.
28:38 - So the width is gonna be 128 pixels.
28:41 - And the height is going, whoops.
28:44 - Is going to be
28:47 - 64,
28:47 - yes that's right (laughs).
28:49 - So got to be devisable by eight.
28:51 - So that's gonna be the size of the screen.
28:53 - I also want to establish
something just ahead of time,
28:56 - called the tile size.
28:58 - And that's just because we want
28:59 - to be able to change this and have
29:01 - the algorithm kind of automatically
29:03 - adjust itself based on how big
or small we want those tiles.
29:07 - So we're gonna start
with a tile size of four
29:10 - and we're gonna see how we go.
29:11 - And then I can change that to let
29:13 - you know how that works later on.
29:14 - I keep trying to do my
Bim shortcuts (laughs).
29:18 - It's like a,
29:19 - what's it called?
29:20 - Like a muscle memory.
29:22 - Okay.
29:23 - So now we can actually set the width
29:24 - to be width and a short
hand of doing that,
29:27 - in more modern JavaScript
is just to list these.
29:31 - (typing)
29:33 - And then we need the address.
29:36 - So I know for a fact that the address
29:38 - of this particular board is 3D.
29:42 - You can think of an address
as an I squared C device
29:46 - as like phone number.
29:47 - So you can have multiple
I squared C devices
29:51 - connected to those analog pins.
29:55 - And if they all have
different phone numbers,
29:57 - it's not always the case.
29:58 - Sometimes it's annoying not that case,
30:00 - but you can have like,
30:01 - let's say five different
screens connected,
30:03 - and if they all have a different
address or phone number,
30:06 - you can actually kind of control them all
30:08 - without having to kind
of like pull wires out
30:11 - and swap them around and stuff like that.
30:13 - So, just think of the address as us
30:15 - kind of like being very
specific about which device
30:18 - we want to speak to that's connected
30:19 - to that I squared C bus.
30:21 - (typing)
30:22 - So now that we have the address,
30:24 - and I don't know why but
I'm a semicolon person,
30:27 - so I'm gonna put some semicolons in.
30:29 - Once we have the options
and we've said sort of,
30:32 - this is the minimum set
of kind of properties
30:35 - you need to give to get this going,
30:37 - we're gonna create a new variable
30:39 - and let's call it screen
'cause that's actually easier
30:41 - to kind of reason about than OLED.
30:43 - We're gonna create a new OLED screen.
30:46 - I think that's what I
called my dependency.
30:48 - Yes.
30:49 - And let's pars in the options.
30:51 - (typing)
30:52 - Cool.
30:53 - I kinda want to run that just to make sure
30:55 - I haven't completely screwed something up.
30:57 - (chuckling)
31:00 - Okay cool.
31:02 - So it couldn't get the height,
31:03 - and I actually know why that is.
31:05 - So I'm not actually using
my library properly.
31:07 - So we do actually need to pars
31:09 - in a couple of other arguments.
31:10 - We need to pars in our board
and our five instances.
31:14 - Because this is a separate
thing to Johnny-Five
31:16 - we actually need to be able
to give it those things
31:18 - so it can actually use
Johnny-Five to communicate.
31:21 - So we're gonna go back to the code
31:23 - and we will pars that in.
31:24 - So I think it was board and then five.
31:27 - I hope that's right but we'll just guess.
31:29 - There's nothing like reading
your own documentation.
31:32 - (laughing)
31:34 - Alright.
31:35 - So I'm glad I tested that
because it definitely blew up.
31:37 - It looks like this is okay.
31:39 - So I'm just gonna stop this process
31:42 - and then we'll keep going.
31:43 - So we definitely want to,
31:46 - make sure first that the screen's working
31:48 - but then we want to clear the screen
31:50 - 'cause sometimes when
you start the screen up
31:52 - it can have sort of some snow on it.
31:54 - Kinda like an old school analog TV.
31:57 - I guess you still get snow,
31:58 - just digital snow now on digital TV's.
32:01 - So one of the first commands that I want
32:04 - to show you for this is,
32:07 - is screen.clearDisplay();
32:10 - (typing)
32:13 - And then we can call
screen.update(); just to make
32:18 - sure that that actually
gets sent to the device.
32:20 - So now if we run this,
32:23 - let's see if we can cross to the camera.
32:26 - So all I'm really doing
is running the same file
32:28 - but if we look at the camera,
32:29 - you might be able to see there's
32:30 - a little bit of snow on there right now.
32:35 - You can sort of see that it,
32:37 - at least did a thin and
then it's very very subtle.
32:41 - We might actually have to turn the--
32:42 - - [Dan] Yeah.
32:43 - I'm trying to think so--
32:44 - - [Suz] One of the lights out--
32:45 - - Let's see, let's take a minute here,
32:46 - to see if we can make
this a little better.
32:48 - - Yeah.
32:49 - Let me put something on the screen.
32:52 - 'Cause that was gonna
be my next thing anyway.
32:53 - - Oh yeah, put something on the screen.
32:55 - - Screen.drawLine.
32:58 - I'm gonna do zero zero.
33:00 - This is a spoiler alert.
33:02 - (laughs)
33:03 - - [Dan] I think people see it.
33:05 - - 60.
33:07 - Yeah.
33:09 - And then I don't know 12 (laughs).
33:12 - - Yeah.
33:13 - So we're starting at zero zero and then
33:14 - it's going across a little
bit and down a little bit.
33:16 - So the one here is just what
color I actually want to do,
33:19 - and by color I mean the
pixels either on it,
33:22 - it's like shining in a white sort
33:24 - of color or it's just off.
33:26 - So you can actually draw
with like negative color,
33:28 - and you can just clear out parts of
33:30 - the pixels which is kinda cool.
33:32 - So just remember that one just
always means the pixel is on.
33:35 - So I do actually want to
change this library quite a bit
33:38 - because I did write it a few years ago.
33:40 - I would love to have an enom.
33:41 - So it would be colors.white or something.
33:44 - Or color.on or pixel.on
pixel.off or something like that.
33:47 - I think that would be a lot more effective
33:50 - but I'm interested to
get people's thoughts.
33:51 - Again raise an issue if you think
33:53 - that you have an idea on that.
33:55 - Another thing that I can do
is I can basically tell it
33:58 - not to update the screen immediately.
34:00 - So we can do a lot of
like manipulations first
34:02 - and then update the screen all at once.
34:03 - We're probably gonna do that today,
34:05 - 'cause there's no pint in
drawing each line individually
34:08 - and kind of bottle necking
the USB connection.
34:10 - I can show you that method as well.
34:12 - (typing)
34:14 - I think,
34:15 - drawLine.
34:17 - Yep draws in one pixel white line.
34:21 - And yeah you can say whether or not
34:22 - the screen immediately
updates to the result.
34:25 - So cool.
34:26 - So this is literally all we
need in our repertoire today
34:30 - in order to start doing
this generative art.
34:32 - So we have everything else is
kinda like more the algorithm,
34:35 - but this is definitely
like the fastest way
34:37 - to get started with
drawing on an OLED screen.
34:39 - So I'll just show you that one more time.
34:41 - There's the line there.
34:42 - So we're just gonna be drawing
lines in different patterns
34:45 - across like invisible tiles on the screen.
34:48 - Cool.
34:49 - So we have our tile size and
we have our width and height.
34:52 - So we're gonna be making
heavy use of these.
34:54 - We're gonna be creating just
a couple helper functions
34:57 - as well in order to kind
of start drawing this.
35:00 - So the first function I want is to
35:04 - create a vector because
we want a lot of things
35:07 - where we're dealing with XY coordinates
35:08 - and you don't really
get that in JavaScript.
35:10 - I know that in like processing
and things like that
35:12 - you get these really
nice like classes right?
35:15 - Like vectors but we don't
get that in JavaScript.
35:18 - So I'm not even gonna pars in
arguments except the X and Y.
35:23 - I'm literally just gonna return an object
35:25 - that has the X and the Y set at zero.
35:28 - Like I'm just gonna go super simple today.
35:30 - I know this is not necessarily
how you would always do it,
35:33 - but this is definitely gonna suffice
35:35 - just so that we don't
lose time on creating this
35:37 - very fancy like very correct vector.
35:41 - So, now we can actually
just get these objects
35:43 - that we can get the X and Y values out of.
35:46 - So a vector is really
just trying to denote
35:49 - like a point on the screen itself.
35:53 - The next thing we want
is to create a tile,
35:57 - so we need to be able to actually draw
35:59 - like either a forward line
or a leaning back line.
36:02 - So that's the next thing
that we're gonna do as well.
36:05 - So I think we might
write this first I guess.
36:08 - We're gonna have another function
36:09 - that does a bunch of loops
as well to draw the tiles.
36:12 - So maybe we can do just
createArt() because
36:15 - that's what we're actually gonna create.
36:18 - So these are just my
place holder functions,
36:21 - and then we can actually
get started writing them.
36:22 - So as you saw on the whiteboard,
36:25 - all we really want to do is
kind of split up each screen
36:27 - and the tiles and then just either,
36:30 - generate a random number and based
36:31 - on that we're either gonna do like
36:33 - the leaning line or the falling back line.
36:35 - So, maybe we could just write
36:38 - the function to create the tile.
36:40 - So what do we need to do with this?
36:43 - We need to have a random number right?
36:46 - So I'm just gonna call it num.
36:48 - And then in JavaScript I think
we can do just Math.random();
36:51 - and we're just gonna take
like the Math.random number,
36:55 - because we can use this
pretty pretty easily.
36:58 - So we need to kind of now create
37:00 - one of two conditions right?
37:02 - So we can just create our
empty conditions at this point.
37:05 - So I'm just really saying if num is more,
37:09 - is greater than 0.5,
37:12 - we want to do a thing,
37:14 - otherwise we want to
do another thing right?
37:17 - So let's just set up this rule.
37:18 - It's gonna be super arbitrary because
37:20 - it doesn't really matter
which one you start with.
37:22 - Maybe this one is leaning,
37:28 - let's do leaning forward because
37:30 - that's a little easier
to do for the first time,
37:32 - and then this L statement
is gonna be falling back.
37:38 - I guess that's the easiest way to do it.
37:39 - Like how do you describe
this Dan normally?
37:41 - Like leaning forward falling back?
37:43 - - [Dan] I dunno.
37:44 - I think forward slash and back slash.
37:46 - - Forward slash and back slash.
37:47 - - [Dan] Yeah.
37:48 - - Wow.
37:49 - (laughing)
37:50 - That's actually really simple, thank you.
37:52 - - [Dan] 'Cause that's
what it originally was.
37:53 - (Suz laughs)
37:54 - So like on the Commodore 64 like--
37:55 - - Oh on the Commodore 64.
37:56 - - [Dan] Just printing those characters.
37:58 - - Of course.
37:58 - That's so smart.
37:59 - So my first computer was a Commodore 64,
38:01 - so this is making me feel super nostalgic.
38:03 - Alright.
38:04 - So, what we want to do is we want
38:05 - to establish like two vectors right?
38:07 - We want to have like
the start of the line,
38:09 - an X and Y and then the
end of the line an X and Y.
38:12 - So I'm gonna create some new variables
38:15 - so we're gonna have
start, no wait lineStart.
38:18 - Let's call it lineStart.
38:21 - (typing)
38:22 - I don't know what I'm doing.
38:24 - Okay.
38:25 - lineStar equals and then we're
38:26 - just gonna create a new vector.
38:27 - So we're gonna just like
manipulate the X and Y
38:30 - afterwards.
38:31 - So now I just need an end line.
38:35 - Wait, lineStart, oh I'm
getting so confused.
38:37 - Okay.
38:38 - lineEnd.
38:39 - So, we shoulda just copy
pasted this line but it's cool.
38:42 - It's good to type stuff
so you remember it.
38:45 - Okay.
38:46 - So now we just need to basically say,
38:48 - like we can set these new values
38:50 - depending on like what
the random number was
38:53 - and then we're gonna
actually draw the line.
38:55 - (typing)
38:57 - So I just realized that
I'll actually need,
39:00 - an argument in here.
39:01 - So we're going to need
to pars in the whoops,
39:05 - the screen instance so that
39:07 - we can actually like call a method on it.
39:10 - So you'll see why we need that later on
39:12 - but I'm just gonna do
it so I don't forget.
39:14 - Okay.
39:15 - So, if the number is more than 0.5,
39:19 - we want to lean forward.
39:21 - So that means that our tile size
39:24 - is going to need to kinda
come into play with this.
39:29 - So I think we actually need some more,
39:31 - variables to pars in because
39:33 - the tile needs to know exactly
what tile it's actually on.
39:37 - So I'm gonna pars in a tile vector,
39:40 - so we're actually gonna make use
39:41 - of vectors later on as well.
39:44 - Now we can do something like
39:45 - just pretend that vector exists.
39:47 - We can have tile.X and tile.Y.
39:49 - And I want you to think
of the tile X and tile Y
39:51 - as like the top left corner
of that tile where it starts.
39:55 - So that kinda gives us our anchorage,
39:57 - and from there we can
start generating lines.
39:59 - This is probably not the
correct way to do it,
40:01 - as
40:04 - in the book but this is sort
of how I'm gonna figure it out.
40:07 - So, I'm interested to
hear in how you do it,
40:09 - but this is how I'm gonna do it.
40:10 - Okay.
40:12 - So if we have our line start
and our line end vectors,
40:14 - we have our tile start,
40:16 - this is where we sort of
want to start doing it.
40:18 - So, we want to maybe set
up our line start first.
40:22 - (typing)
40:23 - So our line start x coordinate,
40:27 - if it's leaning forward,
then it's gonna be like right
40:32 - in the corner right?
40:33 - So, I don't know how else to explain that
40:36 - but it's gonna be right
at the start because
40:38 - the forward slash is sort of like yeah.
40:42 - The horizontal starts that way.
40:44 - So if you have a look at it this way,
40:47 - you can kind of see that it's
starting right in the corner.
40:51 - So we can just set that to be the tile.x
40:54 - because that's the
starting point of the tile.
40:57 - Then we want
41:00 - lineStart.
41:04 - y.
41:05 - Okay so this one is different this time
41:06 - because it's not the Y right at the top,
41:10 - it's actually the Y right at the bottom.
41:12 - So we're gonna do tile.y but then
41:16 - we're gonna add the size of the tile.
41:18 - So if the tile is a square,
41:20 - then we're gonna add the tile size.
41:22 - So we're gonna do tile size,
41:25 - and then because the X
and the y of the tile,
41:29 - because it actually
denotes the start of tile,
41:32 - it's actually inclusive.
41:33 - So I think we also need to take one away
41:37 - just to balance that.
41:39 - But we'll see if that's correct
41:40 - 'cause I did this like weeks ago
41:42 - in Australia after I met, after
I saw Tim Holman's talk so,
41:47 - we're just gonna make this up.
41:49 - Okay.
41:50 - So now we need to do the
line end coordinates.
41:53 - So the line end is gonna
be like right towards
41:56 - the end of the actual tile itself
41:58 - because it's leaning forward.
42:01 - So we can just do tile.x and then
42:04 - we're gonna + the tileSize I guess.
42:06 - And then we're gonna do - 1 as
well because it's inclusive.
42:10 - Stop me if this wrong.
42:12 - 'Cause I trust you Dan.
42:14 - You're much better at this
stuff than I am (laughs).
42:17 - And then the line end is just gonna be,
42:20 - I think it's just gonna be the tile.y
42:22 - because it's sort of like ending
42:24 - at the top of the Y I guess.
42:28 - What am I doing?
42:29 - Line.End = tile.y.
42:30 - That should be it.
42:31 - - [Dan] Yes.
42:32 - - Okay.
42:34 - I'm hearing encouraging things
from Dan right now (laughs).
42:37 - Okay.
42:38 - So, that's the leaning forwards.
42:40 - So let's do the leaning back.
42:41 - So the lineStart.x.
42:44 - So because it's, let's actually just
42:46 - like draw a little one here.
42:48 - So that we can actually
kind of reference it.
42:50 - So, the lineStar.x,
42:54 - is it's still starting
42:57 - right at the start of the tile again
43:01 - so I feel like we can just do this.
43:04 - I feel like the tile.x, the lineStart.x
43:06 - is always like there.
43:07 - So we can like draw the
line from bottom up,
43:10 - but we're just gonna do the
line from the top down I guess.
43:14 - So there are different ways to do this
43:15 - because you can draw the line
in backwards orders I guess.
43:18 - Okay.
43:19 - So,
43:20 - the line
43:22 - Start.y
43:24 - is going to be just the tile.
43:27 - The tile.y right?
43:29 - Because it's right at the top.
43:31 - So lineEnd.x,
43:32 - okay.
43:33 - So if the line ends like
right at the far part
43:35 - because it's leaning
back it's gonna be tile.x
43:41 - + the tileSize.
43:43 - I feel like I'm just writing exactly
43:45 - the same code as the other one.
43:47 - - [Dan] It should be,
43:48 - tilw.x + tileSize - 1 right?
43:51 - Because you're starting over.
43:52 - - Yeah that's what I feel.
43:53 - I just feel like this is,
43:54 - it just feels so repetitive but
43:55 - there's super subtle differences with it.
43:57 - - [Dan] Oh sorry, I'm behind.
43:58 - Like what I'm seeing--
43:59 - - Oh, okay.
44:00 - - [Dan] What I'm seeing...
44:02 - - Oops.
44:03 - (typing)
44:05 - - [Dan] 'Cause that's,
is this falling back?
44:07 - - Yeah it's falling back.
- Oh yeah leave that then.
44:08 - - Yeah yeah yeah.
- Yeah yeah yeah.
44:09 - - That's what I thought.
44:10 - Okay.
44:10 - Yeah, this stuff melts my brain.
44:11 - - [Dan] Yeah I know.
44:12 - - This is why I can't do it.
44:13 - Like, it's so funny 'cause hardware
44:14 - is like safe and comforting to me,
44:16 - and like this stuff is really
scary 'cause it's so much,
44:19 - it's so much math and I'm really
44:20 - bad actually at spacial math.
44:21 - Like I just don't have a lot
of good spacial awareness
44:24 - in my brain in general.
44:25 - It's just not how my brain thinks.
44:27 - So I really have to put in
a lot of effort for this.
44:29 - Okay.
44:30 - So, it's gonna be at the bottom,
44:32 - so we need to + the tileSize again.
44:35 - - 1 inclusive.
44:36 - So, and then this is - 1.
44:39 - (chuckling)
44:41 - - [Dan] Yes.
44:43 - Yep, yep, yep that's right.
44:45 - (Suz chuckles)
44:46 - - Okay.
44:47 - (Dan laughs)
44:48 - (Suz laughs)
44:49 - Okay.
44:50 - So now that we have (sighs)
now that we have that,
44:54 - it's the biggest anti-climax ever.
44:57 - It's just gonna be lineStart,
45:00 - I never do auto complete 'cause I'm
45:02 - not used to having it in Bim.
45:04 - lineStart.
45:05 - y right?
45:07 - And then it's gonna be line,
45:08 - this is gonna go on another line,
45:09 - lineEnd.x and then lineEnd.y,
45:14 - and then the color is 1,
45:17 - and then we don't want it
to automatically update
45:19 - 'cause we're gonna be like
drawing so many lines,
45:22 - we don't want to just like hit this device
45:23 - and sometimes it can actually
overwhelm the devices
45:25 - and it doesn't break the device,
45:27 - but it does kind of
just like bottle neck it
45:30 - and then sometimes the messages
just don't get through.
45:32 - So that's a limitation of like
45:34 - using this way of doing things.
45:36 - If you did this directly
on the device in C ++
45:38 - you wouldn't actually see that issue.
45:40 - Okay.
45:42 - So that's a tile.
45:44 - Can we draw the tiles really quick?
45:47 - (typing)
45:48 - So that this stream doesn't
go forever (laughs).
45:50 - Okay cool.
45:51 - So we want to create the art.
45:52 - Again this is a function
outside of our screen.
45:55 - So we're gonna just pars in screen.
45:57 - Not screem.
45:59 - Ah!
46:00 - Okay.
46:02 - Okay.
46:03 - So, this is where we do
our classic generative art
46:06 - like algorithm which is
nested fallive right?
46:10 - So,
46:12 - we're gonna do let's,
46:14 - i
46:16 - =
46:17 - 0;
46:18 - and then i is less than
46:20 - the width of the screen.
46:23 - And then i is going to
be += tileSize right?
46:28 - So it's gonna like jump in tile widths.
46:31 - Hopefully that makes sense.
46:34 - And again Dan will stop me if
46:35 - I'm going completely
off the rail (laughs).
46:38 - - [Dan] I'm 20 seconds behind.
46:39 - - Okay (laughs).
46:40 - - [Dan] I can see through your audio.
46:41 - I can see your screen here.
46:42 - So.
- Okay.
46:43 - So this is gonna look super similar,
46:45 - it's just like j is less than the height
46:47 - because now we're gonna
go like tile downwards.
46:50 - So then we're going to do j
+= the tileSize again right?
46:55 - So we're really just like
staggering this thing.
46:58 - So just can do all the tiles,
47:00 - stop when it gets to the end of the width
47:02 - and then like do the height,
47:04 - and then do the next row I guess.
47:05 - So it's doing it kind
of row by row I guess.
47:07 - Sort of.
47:08 - No wait.
47:10 - Yes it is okay (laughs).
47:12 - Okay so now I think we can just,
47:16 - call oh we need new vectors.
47:18 - So we need to like generate what
47:20 - the tile start and is right?
47:22 - (sniffs)
47:23 - Whoops.
47:24 - So I'm gonna do tile = new Vector();
47:29 - I feel like this has now
become a speed code (laughs).
47:32 - Tile
47:34 - .x is
47:35 - = to i;
47:37 - and then tile.,
47:40 - so you can see that if I actually had
47:41 - a proper vector function I
could just pars in the X Y,
47:44 - so I realize that that
was like something that
47:47 - wasn't so great when I created it but
47:49 - this is still pretty easy to actually fix.
47:52 - So tile.x = i,
47:54 - tile.y = j.
47:57 - Now we just need to create the tile,
47:59 - and then we pars in, what did we need?
48:05 - We needed,
48:06 - tile and screen.
48:07 - Oh that's it?
48:08 - Okay.
48:09 - That's easy.
48:10 - Okay.
48:11 - So we create the tile,
48:13 - we pars in our tile object
and then we pars in the screen
48:16 - instance just so we can
actually call things on it.
48:21 - I think that's, is that it?
48:23 - That's it.
48:24 - So after we've created the art
48:26 - we need to update the screen now.
48:28 - Right?
48:29 - So like we've sort of like
manipulated the screens buffer,
48:32 - that's sort of what's
happening under the surface,
48:33 - it's like frame of pixels.
48:35 - So now we do screen.update();
48:38 - because then we're just
manually updating it
48:40 - because when we were drawing our lines
48:42 - we were saying like
don't immediately update.
48:47 - So I think that's it.
48:48 - I have no idea what I'm doing,
48:50 - but I think this is coming
out alright (laughs).
48:54 - Okay.
48:54 - So, we need to call of these functions.
48:57 - Clearly.
48:58 - So I think we can just call 'em in here.
49:00 - So I'm gonna just whoops.
49:02 - I don't know my, this is a new keyboard
49:04 - so I'm still actually figuring
out this keyboard too.
49:06 - (typing)
49:07 - Oh.
49:08 - It's just createArt right?
49:10 - (typing)
49:11 - Can I just create the art?
49:15 - I think I can just create the art.
49:17 - Is that it?
49:19 - Yeah.
49:21 - So we wrote a lot of code
before we actually ran this.
49:25 - So (laughs), let's see
if that actually runs.
49:28 - So I'm just, whoop let me go,
49:31 - so I'm just doing this.
49:32 - So I might just actually
clear the screen, there we go.
49:34 - So I'm just running the
same file and then like,
49:36 - let's see if it actually works.
49:42 - Oh my God.
49:44 - It actually worked the first go.
49:45 - So I'm gonna make this bigger because
49:47 - our tile size is really really tiny.
49:50 - - Cool.
49:51 - I'm sorry I just want to come in and look.
49:52 - - Yeah yeah come and look
because like yeah that's--
49:54 - - Oh Wow.
49:55 - Oh can you, oh you can see it there.
49:56 - It's just doing the scan thing
- Yeah.
49:58 - - but I think people can see it.
50:00 - - Okay so
50:00 - let's just change
- Wow
50:01 - the tile size real quick.
- Change your tile size yeah.
50:03 - - Yeah because like,
50:04 - see Dan it's not scary at all.
50:06 - - No, I have so many questions.
50:08 - - It's exactly the same code, yeah.
50:09 - So the tile size, whoops.
50:11 - Oo what happened there?
50:12 - - I've never seen that happen.
50:14 - (Suz laughs)
50:15 - I'm trying to get out of the
way but now I'm over here.
50:16 - - Okay.
50:17 - So let's do a new tile size.
50:19 - So I'm just gonna run that again.
50:22 - I'm so excited that it worked.
50:26 - Yeah!
- Yeah!
50:27 - So if you wanted to animate something,
50:30 - you would just, are you
continuously sending the same image
50:34 - or are you sending one?
50:35 - - Not right now.
50:35 - - So you could do that though?
50:36 - - So you could put this in a game loop
50:37 - and you might have a pretty limited
50:39 - frame size,
- Yeah.
50:40 - - sorry frame rate just because
of this USB bottle neck.
50:43 - - Yeah.
50:44 - - But if you wrote the - C ++ with
50:46 - the same kind of like thing,
50:48 - yeah you could do it.
50:49 - - Because something that's interesting
50:50 - that you can do with the 10 Print design,
50:53 - is you can change the probability,
50:54 - so right now it's 50%,
50:56 - - Oh.
50:57 - - this was versus that way.
50:58 - - Oh that's cool.
50:59 - - And so we could do
it right now but like,
51:00 - you could actually since
this is all JavaScript
51:02 - and connected you could
- Yeah.
51:03 - - actually make an interface
51:04 - so you're like altering the
probability in real time.
51:06 - - That's so cool.
51:07 - - So even like right
now if you just go to,
51:09 - I'm standing in the way of course.
51:11 - - No you're fine, you're fine.
51:12 - - But if you go to where
it's num's greater than .5.
51:14 - - Yeah?
51:15 - - I'm gonna come over here.
51:15 - - Yeah yeah.
51:16 - So if you just change that
- just change it to like,
51:17 - - to like--
- Like .2 or something.
51:18 - - Oh I'm so excited.
51:19 - (Dan laughs)
51:20 - Okay.
51:21 - See this is where I'm like
no idea what I'm doing.
51:23 - - I can come over and look.
51:25 - - So does that mean it will
have more forward ones?
51:27 - - Yeah see?
51:29 - - Ah.
51:29 - - So it has a particular quality
51:31 - in that it's much rarer
for it to go the other way.
51:34 - - Today I learned.
51:35 - - Yeah.
51:36 - So one question that I have,
51:37 - so to me it was interesting to watch this
51:39 - 'cause I'm so used to
doing the programming
51:41 - to like generate a design like this,
51:43 - but I'm not used to doing the programming
51:46 - to put the design like this
in something that isn't like,
51:49 - HTML 5 Canvas
51:51 - or processing the
- Yeah!
51:51 - high level API.
- Yeah.
51:52 - Totally.
51:53 - - In theory though it would be possible.
51:55 - I don't know whether it would
be worth doing this or not,
51:57 - but with a display like this,
51:58 - there's no reason why
you couldn't do drawing
52:01 - to like a canvas object
with like a higher level API
52:04 - and then read the pixels of
that canvas one at a time,
52:06 - and transfer them here.
52:09 - So I have this thing that uses Canvas
52:11 - where you can make your own fonts,
52:13 - for this screen.
52:15 - And it's actually using Canvas.
52:16 - So this is giving you the preview.
52:18 - - I'm gonna come stand over here
52:19 - just to be,
- Yeah, yeah, yeah, yeah.
52:20 - Yeah, yeah.
52:20 - - out of the way of it
52:21 - for everyone now.
- Yeah.
52:22 - So what this does is you can put
52:23 - in the font that you want to use.
52:24 - You can do like the size,
52:26 - and as you sort of change
that it's changing,
52:28 - and this is literally a canvas.
52:30 - And then you change the threshold
52:31 - for what you want like the kind of smooth
52:34 - stuff to be.
- Yes.
52:35 - - Right?
52:36 - And when you're happy with it,
52:38 - it goes through every
pixel in the Canvas file
52:40 - and it gives you a font value down there.
52:41 - - Oh wow.
52:42 - - And then that converts it into like
52:44 - a frame buffer j song file that's
52:45 - compatible with my library.
- Ah.
52:47 - - The next thing I want to show
you is actually really cool.
52:50 - It's way cooler so I saved it to the end.
52:52 - But my friend Hexolan,
do you know Hexolan?
52:55 - - I don't know if I do.
52:56 - - She's amazing.
52:58 - She's amazing.
52:59 - Oh she doesn't have it at quick.
53:03 - So it's called Oledjs-designer.
53:07 - So she took my library--
53:08 - - Ah wow!
53:10 - So this is exactly what
I was just talking about.
53:11 - - Yes.
53:12 - And like you're gonna
lose it when you see this.
53:14 - It's like a thing where you can draw
53:16 - and you can download the image buffer.
53:18 - So that's like really really small.
53:20 - You can download the image buffer
53:22 - but what I did recently
that I had on my laptop
53:24 - that I can't show you is
I had Johnny-Five running
53:26 - in the browser and it
53:27 - sent it.
- Ah okay.
53:28 - - So it's--
- Like web sockets?
53:29 - Or--
53:30 - - No no no.
53:31 - In the browser.
- Or in the--
53:32 - - With Web USB.
- Johnny-Five can be--
53:33 - Oh.
53:34 - Oh I didn't know you could do that.
53:35 - - Well it's really hacky it's not actually
53:36 - officially supported 'cause you can't
53:39 - send a sig into the browser.
53:40 - So you have to like put it
into a web worker and then.
53:43 - - Yeah.
53:44 - - But, you can also do it as a web socket.
53:46 - - Yeah.
53:47 - - So I could send that to my node process
53:48 - - Yeah.
53:49 - - and then update it.
53:50 - So, that's what she wanted
to eventually do with it.
53:52 - And I've been, I've basically been forking
53:55 - this project to my own Git Hub and
53:56 - like messing around with it.
53:57 - - Right.
53:58 - - So I've gotten it working with Web USB
54:00 - with wifi via like NQDT and
then also with web sockets.
54:05 - - That is wild.
54:06 - - So I wish I could show you but,
54:07 - Hexolan is awesome because she made this.
54:09 - - Well there's two things.
54:10 - One is you'll just have to come back
54:11 - and do another tutorial.
54:13 - - That would be great.
54:13 - I would love to.
- Or,
54:14 - if you're doing follow up
with any of this like coding
54:17 - that are trying more stuff
on your Twitch channel,
54:19 - - Yeah.
54:20 - - I can like point the goal towards that.
54:21 - - Yeah totally.
54:22 - - Thanks for watching the edited version
54:24 - of live stream with Noopkat.
54:25 - I hope you enjoyed it.
54:26 - This is just a reminder,
54:27 - check out this videos description.
54:29 - Go and subscribe to
Noopkat's Twitch channel.
54:32 - Check out her Twitter at Noopkat,
54:34 - or like I've been saying
the last two years Noop kat.
54:38 - And thanks for tuning in.
54:39 - I'll see you in a future video.
54:40 - Bye!
54:41 - (upbeat music)