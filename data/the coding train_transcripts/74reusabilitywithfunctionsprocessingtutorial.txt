00:00 - Okay, in this video we want to emphasize the concept of:
00:04 - Reusability with a function. So we're looking at functions with arguments
00:08 - Before we maybe thought okay?
00:10 - So let's do this back up for a second. Let's look at the scenario that we're going to present to ourselves which is over here.
00:16 - Hello, okay, so here's our scenario. We have a nice little Processing sketch.
00:20 - If you look up here, we've got setup(). We've got draw(). Draws all this code...
00:24 - We're using beginShape(), endShape(), sending a bunch of vertices that are all hard-coded and
00:28 - we're getting this star pattern. So we see this lovely star that's being drawn. So we work this out and we know from the last
00:35 - video that I could say, okay:
00:37 - Let's take all this code
00:39 - oops, ah
00:42 - Come on. I can do it. I can do it. I take all this code. I got it...
00:46 - I got it, and I could make a function called Star
00:51 - I could put it all in that function, and then I could call star
00:55 - from draw().
00:57 - So we now... This is modularity
00:59 - We took all that code that has to do with drawing a star and we put it there. Ah!
01:02 - But I want a second star.
01:05 - Okay, so let me get a second star. Two stars coming right up. Well
01:10 - it is drawing the star twice but it is drawing it in exactly the same place. In exactly the same size with exactly the same color.
01:16 - We don't have reusability. This function
01:19 - can't be reused in an effective way. It can only be used once. How do we make something
01:23 - reusable? Well let me ask you this question: When you want to draw a rectangle on the screen...
01:30 - Do you just say this? No you do not.
01:33 - You give it arguments.
01:35 - You say I want a rectangle with this x with this y with this width,
01:40 - I don't know what I'm doing here, with this width and this height.
01:43 - We want to be able to do the same thing with star. We want to say I
01:48 - want a star at this
01:51 - location:
01:53 - 100 100. I want to be able to draw a star with these arguments.
01:56 - I could add a color to it. I could add a size to it, etc etc, But I want to draw a straw, straw, a star
02:03 - with these arguments okay. So how do we do that? Well, we know the way we define a function is:
02:09 - return type, function name, followed by parentheses, followed by open curly bracket end curly bracket.
02:14 - So we know this star function has no return type. So it's void. We know the name of the star function is the word star.
02:24 - Now we have a big open question here.
02:28 - What do we put in there?
02:31 - Look at this.
02:33 - This is how we are asking to call the star function. We are saying I want to give the star an x location.
02:39 - I want to give the star a y location. How do we give it to them? Well interestingly enough...
02:46 - Remember a few videos back and hopefully there's some automatic way eventually to be able to click right to this video. We talked about variable scope?
02:53 - Local variables... Sometimes we need a variable only for the purpose of a certain block of code. This is a case.
03:00 - Arguments to a function are local variables.
03:03 - Only to be used for this, I'm kind of like, oh at the edge here, you can't even see me. This is.. I kind of messed us up. We're just going with it.
03:13 - Arguments to a function are local variables. Local to the use of us of
03:17 - a function. We want to send this value 100 into a local variable here. How do we do that? We actually
03:24 - declare a variable with a type
03:28 - and a name.
03:30 - We declare a variable x with a type float comma and then a variable y with type float. As many as we want here. As few...
03:38 - From 0 all the way to as many as we can sort of practically handle. So what happens this value 100, it makes its way
03:46 - all the way up here and goes into x. It says if we wrote right here float x equals 100. It says if we wrote
03:54 - Float y equals 100. This star function now can receive values stored in these variables just for use locally throughout the star
04:03 - function. So I could say something like vertext at x
04:06 - comma y. I could say something like vertex at x plus 50, y minus 20. So I could start assigning
04:14 - vertices... Obviously, I would need beginShape and endShape, and all the color all the rest of the code. I could start defining vertices
04:20 - according to these arguments that have been received from the calling area. So we are passing these values
04:27 - they are going into these...
04:30 - local variables. The function's arguments x and y, which can then be used
04:33 - throughout the function. Let's look at how we would actually do that in this...
04:38 - In this example right here. Now, because it would take me a little while, this star
04:42 - shape is complex enough that I would I need to set all the vertices relative to an x and y variable, I have that already
04:49 - sort of prepared. It's like a cooking show where, you know, we've mixed all the ingredients
04:53 - would take a half an hour to cook it. So that we would then like, just pull, pull it magicly from the oven.
04:58 - It's not like a cooking show at all is it? Whatever. Okay. So, here we go and we have this program here.
05:06 - kind of
05:07 - Wrong, no, that's the wrong one. Come on Schiffman... Okay star function. That's what I'm looking to open...
05:16 - We can see here. I have actually all of this code...
05:23 - Written with a star shape being drawn relative to x and y. So I can create that star function...
05:32 - Like this. Now if I run this, it's saying it doesn't know what x is because I need to define those arguments, sorry...
05:42 - So look at this
05:43 - we now have our
05:45 - Processing sketch with our star function that receives two
05:48 - arguments. It receives an x. It receives a y and it uses those x and y to define
05:54 - Where the vertices of that star are relative to whatever argument was passed in. So now I can do something really magical...
06:01 - I can say: "Give me a star at 100, 100 and give me a star at 200...
06:08 - 300. Let's run this...
06:11 - Look at this. I now have oh, it's so beautiful.
06:16 - I now have two stars. I've successfully implemented functions for reusability in this Processing sketch.
06:22 - Not only do we define what it means to draw a star
06:26 - But we defined it in a flexible manner that it can receive arguments. The value 100 gets sent into x,
06:32 - 100 to y, then all this code is executed. Then the value 200 gets sent to x and 300 gets set to y
06:37 - and then all this code is executed and we have two stars on the screen here. So here is an exercise for you...
06:43 - Here's a couple different exercise for you. One use a loop
06:48 - with this star function, use a loop to create you know a...
06:53 - row of 10 Stars... or
06:56 - make a whole bunch of stars on the screen with a loop. That's exercise number one.
07:01 - Exercise number two, write this program in such a way that everywhere I click a star would appear.