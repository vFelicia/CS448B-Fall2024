00:01 - in this video I want to look at the
00:03 - worst case scenario you found some data
00:06 - online so you want to use it but it's
00:09 - not available in some nice standardized
00:11 - format there's no CSV to download
00:13 - there's no XML fee there's no API
00:15 - there's no processing library that takes
00:16 - care of it for you there's nothing but
00:18 - the web page itself and this can apply
00:21 - to other scenarios where the data is in
00:23 - some strange unrecognizable format so
00:25 - let's let's look at a kind of scenario
00:29 - here so let's say you want to make some
00:31 - type of data visualization about movies
00:34 - and you look at IMDB comm and you say
00:37 - AHA everything I ever needed to know
00:39 - everything every piece of data that I
00:41 - need is here somehow in this website
00:43 - well if you search around there's no API
00:46 - there's no XML fee and maybe there is
00:48 - but I haven't I haven't found one and so
00:50 - but the data is there for example let's
00:53 - say I what I need is the year of a
00:56 - particular movie or I need the length
00:57 - how long was that movie 139 minutes well
01:00 - 139 minutes is here on the page there is
01:03 - a URL for this page I should be able to
01:07 - get that URL in the processing and
01:09 - somehow find that piece of data how do
01:10 - you do that okay
01:12 - so there's there's a few things that to
01:16 - kind of discuss and look at it and we'll
01:18 - come back to the actual page itself so
01:20 - we need to we need a mechanism for
01:23 - searching within a string now a great
01:26 - way to do this is with something called
01:29 - regular expressions regular expressions
01:34 - is a bit beyond the scope of this
01:36 - particular set of videos about data and
01:38 - processing so I'm just gonna leave that
01:41 - aside which I'm mentioning it you might
01:43 - look at the match function or the match
01:44 - all function and processing which uses
01:46 - regular expressions to match a
01:48 - particular pattern to search for a
01:50 - pattern in a body of text and perhaps
01:53 - someday I will add a video or some
01:55 - materials about regular expressions and
01:56 - processing but for now we're gonna do it
01:58 - in a bit more of a rudimentary way using
02:01 - two string functions in processing that
02:03 - I don't believe we've seen yet one is
02:07 - index of and the other is substring so
02:12 - let's say we have a particular
02:13 - a piece of text string s equals I have
02:21 - 21 apples and let's say you know we
02:27 - could think of the context of oh I go to
02:28 - a webpage and every single time I go to
02:30 - that web page it says I have some number
02:32 - apples well how would I pull only that
02:34 - number out you know this human being us
02:37 - we could just look at that and say oh
02:38 - it's right here it's 21 it's the thing
02:40 - that's digits and it's in between have
02:41 - and apples and that's the number but how
02:43 - do we do that programmatically well in
02:46 - processing what we could say is okay
02:48 - let's say that was always formatted this
02:50 - way just this number was sometimes
02:52 - difference and it's oh you can sit
02:53 - sometimes it's two digits sometimes it's
02:55 - three digits sometimes it's one digit
02:56 - but it always comes after have space and
03:01 - it always comes before space apples so
03:04 - what if I could find wherever have is
03:07 - what if I could find wherever apples is
03:09 - index of will search for the index of a
03:13 - particular string inside of a string and
03:15 - then substring will pull out a substring
03:19 - what if I could then pull out all of the
03:20 - characters in between these two points
03:22 - Lord's I'm saying what if I were to say
03:24 - int begin equals s dot index of have an
03:34 - int end equals s dot index of apples and
03:43 - then string num equals s dot substring
03:50 - between that beginning and that end now
03:55 - now there's a few little details here
03:57 - things that we've missed and this won't
03:58 - work exactly as intended but we'll
04:01 - correct those in a moment before we do
04:02 - that let's come back to the IMDB site
04:04 - now you know I should also mention
04:06 - something if we go and look at the Terms
04:08 - of Service of the IMDB site I don't
04:11 - believe that it's that it probably says
04:15 - something like you cannot you know mine
04:16 - our data resell it that type of thing
04:19 - you know so what we're doing here is you
04:22 - know there's some questions around it
04:23 - but currently for an academic exercise
04:25 - here certainly I want to look at how we
04:29 - could go and pull out a piece of data by
04:32 - requesting this information so okay so
04:35 - what do we do what's the actual data
04:37 - we're going into processing let's say
04:38 - we're looking for a hundred and that the
04:40 - amount of the length of the movie Mary
04:41 - Poppins one hundred and thirty nine
04:42 - minutes so if I go up here view
04:44 - developer view source we can now see
04:48 - this is actually what we're gonna get
04:50 - into processing and this is just a big
04:52 - mess of stuff this is why it's much it's
04:55 - really preferable to have our data as
04:57 - tabular data XML JSON some standardized
05:00 - format that's kind of ready for us but
05:02 - in theory somewhere in here if I search
05:04 - for 139 minutes we can see there it is
05:08 - right here that's where the piece of
05:10 - data is in the raw HTML source and it
05:13 - kind of looks like it probably comes
05:14 - after this tag time itemprop equals
05:17 - duration and then it comes right before
05:19 - that close tag so this is you know this
05:22 - is a much larger piece of text this is
05:24 - why we need to do this kind of searching
05:27 - because for every movie the page might
05:29 - be formatted in the same way but the
05:31 - actual piece of information is gonna be
05:32 - a slightly different spot because the
05:34 - title of the movie is gonna be the same
05:35 - that's gonna change the number of
05:36 - characters all that sort of stuff
05:38 - so let's look let's let's come back here
05:40 - for a second and there's a couple things
05:42 - what are the things we missed here one
05:44 - is what does what value does this
05:46 - actually give us index of half well a
05:50 - string is much like an array where each
05:53 - character has a unique index 0 1 2 3 4 5
05:59 - 6 or so H is actually going to give us
06:02 - the number - I don't know how well you
06:04 - can see that let me write this 0 1 I
06:07 - really got to get better at this
06:08 - whiteboarding 0 1 2 H is going to give
06:11 - us the index value - it's the third
06:13 - character so when we ask for a substring
06:16 - between 2 and some other character we're
06:21 - gonna end up getting have 21 which is
06:24 - not what we want we want to actually
06:26 - start right here where the 2 is but what
06:30 - is the length of the string have with a
06:32 - space 1 2 3 4 5 so I could say that
06:35 - begin in
06:36 - next the begin spot for 21 is the index
06:40 - of half plus the length of half so I
06:43 - want to jump from the beginning to the
06:44 - end of that work so we look at the
06:46 - actual code you're gonna see that's
06:47 - happening the beginning of the piece of
06:49 - data we're trying to pull out is where
06:51 - we find this the end of where we find
06:54 - that now with apples
06:56 - this actually is fine for us assuming
06:58 - this was actually space apples we would
07:00 - get this character here I don't want
07:02 - this character included in my substring
07:04 - but an interesting nuance of the way
07:07 - substring works is the first index is
07:10 - included and the n1 is not included so
07:14 - in other words if I have the string
07:17 - hello and I asked for the substring
07:20 - between 1 and 3 0 1 2 3 it's actually
07:27 - just going to give me the characters 1 &
07:29 - 2 it includes the first index but it
07:32 - does not include the last index it might
07:34 - seem like a weird thing like oh this is
07:35 - kind of annoying this seems to be like
07:37 - very confusing but it actually makes
07:39 - sense
07:39 - because if I were to say 3 minus 1 is 2
07:41 - that's the length of the substring we
07:43 - pulled out it also works really nicely
07:45 - if I want a substring from somewhere in
07:47 - the string all the way to the end then I
07:49 - can just put s dot length to the length
07:51 - of the string there and it will work ok
07:53 - so that those are two little pieces of
07:55 - information another piece of information
07:56 - that I should mention is what if I say
07:58 - give me the index of you know Joe in the
08:04 - word hello well Joe doesn't appear what
08:06 - value should I get back from index of it
08:08 - I know it get the numerical index of the
08:11 - string I'm searching for but if that
08:13 - doesn't exist what do I get back and you
08:15 - should know that processing or the index
08:17 - that's not processing Java the index of
08:19 - function of the string class will give
08:20 - you a negative 1 and that makes a lot of
08:22 - sense because negative 1 is not a valid
08:24 - index there are no index values less
08:27 - than 0 in in an array or in a string so
08:30 - as when we go back and look at this
08:32 - particular code example what you're
08:34 - going to see if I find where this is
08:39 - happening and you can see here we go let
08:43 - me find this you can say ah there is a
08:45 - start and there is an end and I want the
08:49 - text
08:50 - between then I want the index of this
08:52 - and I want the index of that and I want
08:54 - the stuff that's in between but look
08:55 - there's this function give me text
08:56 - between oh why did we do any of this
08:58 - there's just a function called give me
08:59 - text between us there isn't so this is a
09:02 - function that that is written that I
09:04 - wrote for this particular example which
09:06 - will pull out a chunk of data in between
09:08 - from a particular string in between a
09:10 - beginning and an end and if we look down
09:12 - at that function you'll see find the
09:16 - index of before find the index of after
09:19 - and give me the substring between the
09:21 - start and the end and you'll notice that
09:23 - if I ever get a negative one we just
09:25 - return back an empty string so this it
09:27 - will this will this will make the
09:29 - function not fail if it can't find that
09:31 - text you're looking for it'll just give
09:32 - you an empty string and you can see here
09:34 - where is the start is the index of
09:37 - before plus the length of that
09:40 - particular string and that's that little
09:41 - piece of information we talked about
09:43 - here when we were trying to get not
09:45 - where have is but where the end of have
09:47 - is so this is a function you could use
09:49 - and I would suggest that maybe what you
09:52 - do is you find some data online and try
09:56 - to grab this example and use this give
09:59 - me text between and see if you can pull
10:00 - out a piece of data from a webpage where
10:02 - the data is not in standardized format
10:04 - okay this concludes this particular
10:06 - video which you have just watched thank
10:09 - you very much and I will see you in
10:12 - another video