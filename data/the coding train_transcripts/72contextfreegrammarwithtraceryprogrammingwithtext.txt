00:00 - hello welcome to another video tutorial
00:02 - this is part of session s programming
00:04 - from A to Z and I'm all these videos are
00:07 - about grammars specifically context free
00:10 - grammars so today I want to talk about a
00:13 - particular uh grammar generation library
00:15 - for JavaScript called tracery tracery
00:19 - tracery is by Kate Compton at Galaxy
00:21 - Kate on GitHub It's a Wonderful project
00:24 - it allows you to be really creative with
00:26 - generating text generating stories
00:28 - making a Twitter bot um just by putting
00:31 - together a bunch of possibilities in a
00:33 - way uh a grammar so to speak so um first
00:35 - I'm going to show you an example um this
00:37 - is actually um this is called once upon
00:39 - a time stories It Is by a 5-year-old and
00:42 - an 8-year-old who happen to be related
00:44 - to me they're my children and they
00:46 - didn't write the code for this but they
00:47 - wrote the grammar so I'm going to uh
00:49 - just generate a story and read it to you
00:51 - once upon a time there was a princess
00:53 - and that princess was very happy and the
00:55 - princess liked hamburgers the princess
00:57 - was very jealous then the princess meta
01:00 - lovely sad chupacabra and she killed the
01:03 - chupacabra Yahoo and then the princess
01:05 - ate the burrito and she was so
01:07 - sunglasses and she was heart eyes too
01:11 - today I don't know let's generate
01:12 - another one oh there's a princess again
01:14 - ah Dragon okay once upon upon a time
01:16 - there was a dragon and that Dragon was
01:17 - very angry and the dragon liked shrimp
01:20 - so you can see this is one way of using
01:23 - a grammar likee tracery to generate and
01:25 - there's a little bit of like color and
01:26 - emojis and stuff going on here but to
01:28 - generate text so let me just look into
01:30 - the code for this for a second so that I
01:33 - can point out to you what the grammar
01:35 - actually oops I'm in the wrong place
01:37 - what the grammar actually looks
01:39 - like so this is what the grammar
01:41 - actually looks like and the grammar is
01:44 - simply a JavaScript object and remember
01:46 - if you watched my first video about
01:48 - context free grammar everything is about
01:50 - production rules take this and replace
01:52 - it with this and if you have this
01:54 - replace it with this and if you have
01:55 - this replace it with this and you got to
01:57 - start with something so if I come back
01:59 - to here you're going to see here there
02:01 - is a start now there's some strange
02:03 - syntax there's a hash symbol and a
02:04 - bracket colon and a character there's a
02:07 - story there's characters but you can see
02:09 - there's a selection of food options a
02:11 - selection of monster options that sort
02:13 - of thing and I should point out to you
02:15 - one thing you'll notice by the way is
02:16 - you can in JavaScript if you want to
02:18 - have emojis you can just stick emojis
02:20 - and they are read just as text like
02:22 - anything else I mean they're how they're
02:23 - interpreted and displayed depends on
02:25 - what the environment you're living in
02:27 - and but the Unicode charact the
02:29 - characters themselves
02:30 - uh um um are there for you to use okay
02:35 - so okay so let's make our own let's
02:37 - let's make our own tracery grammar and
02:39 - and then we'll come back to this one
02:41 - okay so what am I doing here I want to
02:43 - go to my example which is over here this
02:45 - is some blank code I'm going to go here
02:47 - make sure it's running great so the
02:49 - first thing I need to do is get that
02:50 - tracery library and tracery as a library
02:53 - is just this Javascript file tracy. JS
02:56 - so I'm going to um grab this file and
02:59 - I'm I'm going to do something silly
03:00 - which is just copy I could download it
03:02 - I'm just going to copy paste it into a
03:04 - new file uh which I'm going to call a
03:07 - tra I guess I could have done this not
03:08 - in the video tracy. JS I'm going to copy
03:12 - it there and then I need to make sure if
03:13 - I'm using another uh JavaScript library
03:16 - that I want to make sure that I um also
03:19 - reference it in the index.html file so
03:21 - just like I'm using
03:29 - on jQuery so it uses jQuery behind the
03:32 - scenes so I also should make sure I
03:34 - download and grab jQuery so I also have
03:37 - a reference to jQuery here one thing
03:39 - I'll note by the way is that you can
03:41 - reference JavaScript libraries either as
03:43 - local files like I have a local copy of
03:46 - p5.js here in my folder but you can also
03:50 - reference libraries through something
03:51 - called a CDN or content delivery Network
03:54 - meaning if it's a really popular Library
03:56 - somebody might have just hosted it
03:57 - somewhere instead of having to download
03:58 - it I could just reference URL and you
04:00 - know there's good reasons for doing one
04:02 - or the other and I'm kind of mixing and
04:03 - matching here but I just want to get
04:04 - stuff working so now I should have the
04:07 - tracery library and the jQuery library
04:09 - and I'm ready to start making stuff
04:11 - happen with tracery okay so let me at
04:14 - least just go here back to my uh example
04:17 - and where wherever that is I lost it
04:19 - here it is I'm hit refresh um and I'm
04:21 - going to go back to my
04:23 - code and what I want to do is start
04:25 - writing the grammar so I'm going to make
04:27 - a variable called and let's make it a
04:28 - story
04:31 - and what I need is to have now tracery
04:34 - by default looks for something called
04:36 - start so I'm gonna you don't have to
04:39 - name it start but I'm going to call it
04:40 - start and I'm going to say start is and
04:42 - and I'm gonna I'm going to need the chat
04:44 - by the way to start giving me ideas for
04:46 - story things but I guess I'll just be
04:48 - making this up as I go right now um it
04:50 - was a dark and
04:52 - stormy night so now if I have this
04:56 - JavaScript object which essentially
04:58 - holds the grammar I should be able to
05:01 - make a variable called grammar oops I
05:04 - misspelled grammar AR okay so I'm going
05:06 - to have a variable called
05:09 - grammar and I'm going to say grammar
05:11 - equals equals Tracer do I think create
05:15 - grammar uh story boy I don't actually
05:18 - remember if that's correct so one of the
05:20 - things when you're working with a
05:20 - JavaScript library is you've got to look
05:22 - at documentation so I'm going to just go
05:24 - back to the um uh GitHub page for
05:27 - tracery and just to like kind remind
05:30 - myself uh yes tracery doc creat grammar
05:33 - Spellbook by the way if you're looking
05:35 - for an idea certain things like a
05:37 - cooking recipe or a spell book there's a
05:40 - wonderful Twitter bot called art
05:41 - assignment bot I don't know that it uses
05:43 - a grammar but these kinds of um highly
05:46 - structured um types of narrative
05:49 - scenarios can work really well to have a
05:51 - grammar generate um different
05:53 - possibilities I'll also show you at some
05:55 - point that you can use a grammar to
05:56 - generate um you know houp patterns or
05:58 - certain patterns of certain Sy aables
06:00 - it's another way to use a grammar
06:01 - grammar okay so uh Tracer doc creat
06:04 - grammar story perfect so now I want to
06:06 - look at the result and I'll say uh I'll
06:08 - say VAR result equals
06:11 - grammar.
06:13 - flatten so again why the word flatten so
06:17 - there's two words that involve
06:18 - generating text from a grammar one is
06:20 - expansion and the other is flatten so
06:22 - this is the idea of an where am I here
06:24 - this is the idea of an expansion right
06:26 - I'm expanding out from the sort of start
06:29 - and you iteratively applying these
06:31 - replacement rules now trer behind the
06:33 - scenes or any grammar system is probably
06:35 - keeping track of the entire tree that's
06:37 - being generated but all I want is the
06:39 - end result so I want to flatten it and
06:41 - get the end result and that's what's
06:42 - happening over here so I can say uh
06:46 - console.log result and if I run this uh
06:50 - come back to my
06:52 - example uh that didn't work now I
06:55 - thought it would automatically use start
06:57 - maybe it doesn't so I'm going to to um
07:00 - add this in there and I'll oh yeah okay
07:03 - the point is what I want is to give that
07:06 - Axiom that seed phrase start in um I
07:10 - want to pass that to the grammar and the
07:12 - grammar the the grammar object the
07:14 - Tracer grammar object is then going to
07:16 - expand it out based on all those
07:17 - production rules now right now and
07:20 - you'll notice that the Syntax for
07:22 - tracery specifically is a
07:25 - non-terminal element is wrapped in the
07:29 - pound our hash symbol so this means
07:31 - please replace me as opposed to the word
07:33 - start um and so if I did something like
07:38 - this we would have a real problem
07:41 - because this would kind of generate to
07:42 - Infinity I almost want to run it to see
07:44 - what happens I do let's just do it
07:45 - what's the worst thing that can
07:47 - happen maximum call stack receive so you
07:50 - can see that this idea of replacing but
07:52 - what I can do is say it was an and I
07:54 - could say
07:56 - adjective and then I could add another
07:58 - rule adjective um some possibilities
08:02 - are uh it was a
08:06 - dark shout out your adjectives in the
08:09 - live chat that's going on right now
08:12 - dark sleepy somebody wrote uh it was uh
08:17 - um quiet so right if I give all these
08:20 - adjectives now now I have two
08:22 - non-terminal characters uh elements I
08:25 - should say they're not characters start
08:27 - which generates this sentence um
08:30 - adjectives which has three possibilities
08:32 - and so now if I run this you can see it
08:35 - was a sleepy and stormy night it was a
08:36 - sleepy it was a dark it was a sleepy it
08:38 - was a sleepy it was a quiet so each time
08:40 - I refresh I get a new
08:44 - possibility okay so this is level one
08:47 - here of using a tracery grammar and even
08:50 - this is like plenty to play with couple
08:53 - one thing I should mention is that each
08:55 - one of these has a one out of three
08:56 - chance of being picked and another
08:58 - reason why you you might use a system or
09:01 - you know modify Tracer you know think
09:03 - about programming your own sort of
09:04 - grammar generation system uh from
09:06 - scratch is you might be interested in
09:08 - playing around with those probabilities
09:10 - what if it's 60 but of course I could do
09:12 - that also right here by just now I've
09:14 - played with the probabilities that dark
09:16 - has a 50% chance of being picked where
09:18 - sleepy and quiet only have a 25% chance
09:20 - of being picked okay so let's write a
09:22 - story with a
09:23 - character and what I'm going to do
09:25 - actually I'm going to do something
09:26 - different is I'm going to say I'm going
09:28 - to have a story
09:29 - um a uh and I'm going to just use the
09:32 - same kind of story that my uh children
09:35 - wrote last night which is a and I'll
09:36 - call it a hero a hero fights the monster
09:41 - go hero go but what I want is for this
09:46 - hero to be
09:49 - picked so what I um and I'm running out
09:52 - of space here so let me open this up a
09:54 - little bit what I want is what so so let
09:56 - me give some options for a Hero
10:01 - and I'm going to say
10:03 - uh
10:05 - dragon
10:06 - unicorn uh rainbow these are the
10:09 - possible Heroes okay so the story is a
10:13 - hero fights the monster go hero go so
10:16 - what I'm going to do now is I am going
10:18 - to change this to story so I want to
10:21 - flatten starting with story and I'm
10:23 - going to hit refresh a dragon fights the
10:25 - monster go dragon go so that's good a
10:28 - unicorn fights the monster go unicorn go
10:30 - well this is kind of working by accident
10:32 - a rainbow fights the monster go dragon
10:34 - go so you'll notice here what I haven't
10:37 - done is secured that I pick the same
10:40 - hero both times so you know in the sort
10:42 - of mad lib's way of thinking about this
10:44 - sometimes I want to have a different
10:46 - adjective so I could say
10:48 - a adjective hero fights the adjective
10:52 - monster and so in this case right
10:55 - refresh a sleepy unicorn fights the dark
10:58 - monster go unicorn go go a dark dragon
11:00 - fights the quiet monster go unicorn go
11:03 - so I do want a different adjective I
11:06 - want a random adjective for the hero and
11:08 - the monster but when I say hero I want
11:10 - to get the same hero twice so one of the
11:12 - wonderful things that tracery has is it
11:15 - has a mechanism for you to
11:17 - assign a uh production rule essentially
11:20 - like almost have like a variable that
11:22 - holds something that's picked in the
11:23 - grammar over time across the entire
11:26 - sentence that's story that's being
11:27 - generated so in that sense what I can
11:29 - here is I want to I want to start with
11:31 - start and what I want start to to render
11:35 - so to speak to expand is the story so
11:38 - start expands the story which is this so
11:40 - this should be the same I'm just getting
11:42 - these little stories here and now though
11:45 - what I want to do is put in here bracket
11:48 - I'm going to
11:50 - assign
11:52 - hero and this is the the hero actually
11:55 - is going to come from this list so I
11:56 - need to give this list another name um
11:59 - the this is uh let's just call this
12:02 - characters hero character so what this
12:06 - does it says render the story with a
12:10 - character being picked as the hero so
12:12 - first it will pick dragon unicorn or
12:14 - rainbow assign that to hero and then use
12:16 - hero throughout there so now as I render
12:18 - this you can see a dark rainbow fights
12:21 - the Sleepy monster go rainbow go a dark
12:25 - unicorn fights the quiet monster go
12:27 - unicorn go so this is basically it um
12:30 - this is how tracery Works um you know I
12:33 - could keep going and it would be sort of
12:34 - like an interesting experiment maybe
12:36 - what I'll do actually is we could create
12:38 - on GitHub some type of collaboratively
12:40 - edited grammar if I I publish this
12:42 - example maybe I'll include a link to the
12:44 - grammar in um in this video's
12:46 - description if people want to contribute
12:48 - to it because really the creativity Now
12:50 - lies in how far can you go with this how
12:53 - long can you make the story what is it
12:54 - what is the story how what types of
12:56 - other things might you assign and pick
12:58 - randomly or assign in advance
12:59 - but I I just want to show you one other
13:01 - thing um there are um also tracery also
13:06 - includes modifiers so for example if I
13:09 - put s here um I can s will pluralize
13:14 - whatever uh uh character is picked so
13:17 - this isn't going to make a lot of sense
13:19 - but you can say as sleepy dragons fights
13:21 - the Sleepy monster go drag and go but
13:24 - the reason why this is a nice quality is
13:25 - I don't have to include you know a a
13:28 - particular rule that that's like plural
13:30 - character or um I don't have to like
13:32 - include dragon unicorn rainbow dragons
13:34 - unicorns rainbow so there are a bunch of
13:36 - modifiers um I can also use I believe
13:39 - capitalize um is a modifier that's built
13:41 - into tracery which will uh capitalize
13:44 - the particular word so if I'm picking
13:46 - that hero and putting it at the
13:47 - beginning of the sentence I can always
13:48 - make sure that the grammar generates in
13:50 - such a way that that word is capitalized
13:52 - and if you look through the
13:54 - documentation um I believe here we'll
13:57 - find also some um uh probably there'll
14:01 - be a list of modifiers um okay I also
14:05 - should mention here by the way right one
14:06 - thing you might look at is under here
14:08 - there are many new examples of Tracer in
14:09 - use and I also have an exciting new
14:11 - interactive tutorial so I'd also
14:13 - encourage you to check out this torial
14:15 - tutorial excuse me which allows you to
14:17 - sort of type the grammars into these
14:18 - boxes and hit reroll and see what kind
14:21 - of possibilities you can get and the
14:22 - features are uh kind of explained
14:25 - through the various um various
14:27 - possibilities here um
14:29 - okay so there's so much more here that I
14:31 - want to look into that I haven't so
14:32 - maybe someday I'll come back and show
14:35 - you some other additional Advanced so to
14:37 - speak features of the Tracer Library so
14:39 - this example will be published for you I
14:41 - encourage you to write your own grammar
14:44 - um of course you can use emojis as
14:45 - possibilities as you can see and and we
14:47 - can go back now by the way I might as
14:49 - well go back just to return to the
14:50 - beginning of this video and show you now
14:54 - the code which um we can see here that
14:57 - this now we can understand how this
14:59 - works that this story starts with a hero
15:03 - picked from a character a villain picked
15:05 - from a list of monsters and then the
15:07 - story is once upon a time there was
15:09 - hero. a which means a hero it's always
15:11 - going to modify it with a and that hero
15:14 - was very adjective and the hero liked
15:15 - food and the hero was very adjective and
15:17 - then the hero met an adjective adjective
15:19 - villain and she killed the villain
15:20 - exclamation and the hero ate the food
15:23 - and she was so adjective that she
15:24 - adjective that she was adjective to
15:27 - today and if I go back to uh this we can
15:31 - generate One More Story thank you uh
15:33 - once upon a time there was a bear and
15:35 - that bear was very funny and the bear
15:37 - liked ice cream and the bear was very
15:39 - pretty then the bear met a happy lovely
15:41 - dinosaur and she killed the dinosaur
15:43 - monkey face and then the bear ate the
15:46 - acorn Walnut I don't know what kind of
15:48 - nut that is and she was so smart and she
15:50 - was green heart jealous too today okay
15:54 - so thanks for watching this uh video on
15:57 - um tracery um if you make something with
16:00 - tracery please uh thank uh Galaxy Kate
16:03 - on Twitter I would say or contribute to
16:05 - the tracery project or support it in
16:06 - some way um and and I and I look forward
16:09 - to um hearing what you think and what
16:10 - you make and in the next video I'm going
16:12 - to look at uh the read a library with uh
16:14 - context free grammars oh oh before I
16:16 - leave you can also use tracery as a node
16:18 - package so maybe someday I'll return to
16:20 - that but you can npm install tracery um
16:22 - and there's documentation for that on
16:24 - the tracery GitHub as well okay thanks
16:26 - and see you in another video sometime
16:32 - [Music]