00:00 - hello welcome to another coding
00:02 - challenge this is another coding
00:03 - challenge that I'm gonna do about
00:05 - President Barack Obama who is still I'm
00:09 - thinking that the time of this recording
00:10 - in this video the active current
00:12 - President of the United States ok so uh
00:15 - what I'm going to do in this one so a
00:17 - part of the data set that was released
00:19 - was every single photo so so first of
00:24 - all I thought I mentioned a previous
00:26 - coding challenge the White House
00:27 - recently released all of their social
00:30 - media data from the last eight years and
00:32 - invited artists and researchers and
00:34 - people to remix it and make projects
00:36 - using that data so one of things I'm
00:38 - going to do here is just look at working
00:40 - with the image data the Facebook
00:42 - download which is four and a half
00:43 - gigabytes has a tons of videos but it
00:46 - also has a giant folder of images so I
00:48 - have that here in this particular I'm
00:54 - sketch folder in the data folder I have
00:58 - a single image which is just the White
01:00 - House official portrait of Obama and
01:02 - then I have every single Facebook photo
01:05 - so I can scroll through these and see
01:07 - all of them so what I'm going to do
01:10 - right now is I'm going to attempt to
01:12 - make a photo beause aook of this Obama
01:16 - portrait and with all of these images
01:21 - from Facebook so there's probably I'm
01:25 - gonna do it in the like post drop dead
01:26 - simple way possible when I post the code
01:29 - by the way I'm not going to post the
01:30 - photo dataset but I will include like a
01:33 - rebe file or something - a link to that
01:34 - photo day said cuz I don't to post some
01:36 - 300 Meg file to github that you have to
01:38 - download ok so let's go into processing
01:41 - and let's just do a couple things first
01:44 - so I'm using for this coding challenge I
01:47 - can minimize the browser and all this
01:49 - other stuff I'm using a programming
01:51 - environment called processing go to
01:53 - processing dot-org it's Java based and
01:55 - it has a lot of libraries for drawing
01:57 - and images and all sorts of stuff like
01:59 - that so I'm going to make a variable
02:04 - called Obama and I'm going to say load
02:06 - image was it Obama jpg and then I'm just
02:11 - going to say image Obama
02:14 - zero-zero so let's just see there we go
02:17 - I need to actually make us a size of the
02:22 - canvas which is like so let's see what
02:25 - is the size of that image
02:26 - it is if I look at it 600 by 749 so
02:31 - let's make the canvas 600 749 and do
02:35 - this we can see there we go so this is
02:37 - just first of all I have a processing
02:39 - sketch that loads this image file and
02:41 - displays it so the first thing I need to
02:43 - do to make this photo mosaic is figure
02:45 - out a way that I'm going to pixelate
02:46 - this image and there's lots of ways I
02:48 - could do that I'm going to do it in a
02:50 - pretty simple way I'm going to sample it
02:53 - down so I'm going to make the image
02:55 - smaller by a factor of something so I'm
02:59 - going to say let's have a variable
03:02 - called scale factor and such a long
03:08 - variable Dave makes me so sad I'll come
03:10 - up with something better later let's
03:12 - make that scale factor 8 for lack of a
03:17 - better idea right now and then what I
03:19 - want to do is I need a new width which
03:23 - is obama dot width divided by scale
03:26 - factor and I need a new height which is
03:29 - obama dot width divided by a height
03:33 - divided by scale factor and then what
03:39 - I'm going to do is I'm going to use the
03:41 - copy function I'm going to make a I'm
03:48 - going to make a variable called smaller
03:49 - and I'm going to say smaller equals
03:53 - create image width sorry I'm like really
03:59 - thinking hard here create an image with
04:02 - that width and height that's an RGB
04:03 - image and then I want to copy from Obama
04:09 - the entire image to this images width
04:14 - and height so I'm using the processing
04:16 - copy function so I wanna I'm using
04:18 - processing to scale the image down I
04:20 - could skip pixels or I could manually
04:21 - scale it like but this is going to be
04:23 - simple and now I'm just going to say
04:25 - image
04:27 - Moeller zero zero so let's see if that
04:29 - worked and you can see that worked now I
04:31 - have that smaller image here I just
04:33 - copied the image to make it smaller
04:35 - because the reason why I'm doing that is
04:37 - now what I want to do is actually want
04:39 - to read the pixels so I'm going to say
04:42 - smaller dot load pixels I guess making
04:45 - this photo mosaic is something I only
04:47 - need to do once so I'm going to add no
04:48 - loop at the end of draw so no need to
04:50 - loop over and over again and what I'm
04:52 - going to do now is I'm going to say for
04:54 - every X and you know I kind of want
04:58 - these that W and H just to be a global
05:00 - variable because that way I can use it
05:03 - over and over again without having to
05:04 - say dot X less than with X plus plus y
05:12 - equals zero Y is less than H Y plus plus
05:16 - now and you know what this scale factor
05:19 - let's just sit let's just call this like
05:21 - factor
05:22 - I know scale SEL for scale and then now
05:29 - what I'm going to do is I'm going to say
05:31 - what is the pixel the color is smaller
05:35 - dot pixels and I need that pixel Spidy
05:39 - the spot of so the pixels is a one
05:42 - dimensional array but I'm thinking of
05:43 - the X and y of all the pixels so what I
05:46 - need to do is look for that index which
05:47 - is X plus y times W I'll link to some
05:50 - other videos about image processing that
05:52 - I have that go over this particularly
05:53 - algorithm more specifically but now I'm
05:56 - looking this is an algorithm for looking
05:58 - at every single pixel in the image all
06:00 - the act every XY location look at the
06:03 - particular color and I'm going to say
06:05 - fill C and I'm gonna just draw a
06:06 - rectangle at X Y and where I draw those
06:11 - rectangles X timescale Y timescale and
06:15 - then that skill so that scale is really
06:17 - the size of each one of these little
06:18 - squares so now you can see I have this
06:21 - pixelated version of Obama where I've
06:23 - drawn a rectangle and there's all these
06:25 - black lines I guess because I probably
06:27 - have us a stroke so if I had no stroke
06:29 - we can see now I just have this
06:31 - pixelated version of Obama so now what I
06:34 - need to do is instead of drawing a
06:36 - rectangle I need to draw an image inside
06:39 - each one of those
06:40 - and let's make this scale factor bigger
06:43 - I'm using kind of round numbers you can
06:46 - see it's not so that I'm things aren't
06:48 - divisible by the right whatever but
06:49 - that's fine
06:50 - close enough let's say add background
06:53 - zero so close enough right so we can see
06:57 - this is still giving us something here
06:59 - we've got a pixelated version of Obama's
07:02 - portrait now it needs to do is the
07:03 - really the hard part so that was the
07:05 - easy part the hard part now is I need to
07:07 - somehow load however many images there
07:10 - are so let's see how many images there
07:11 - actually are if I go here and I do it
07:14 - command I we can see here that there are
07:17 - 200 up there are three thousand nine
07:19 - hundred and thirty-four images so I
07:21 - think I can load all those images into
07:22 - memory no problem let's see hmm the good
07:27 - news is they're mostly like small images
07:29 - so if one thing I'm going to do is I'm
07:30 - going to create an array of all images
07:32 - and the other thing I need to do is I
07:35 - need to now dynamically be able to look
07:37 - in that directory and say give me all of
07:40 - the file names in that directory and
07:41 - there happens to be an example on the
07:43 - processing website I know that it's
07:44 - there actually it's because I made it
07:47 - and I just don't remember how to do it
07:48 - this is what I want I want this function
07:51 - which I give it a directory and then it
07:54 - just makes an array of all of the file
07:56 - names and returns them back so and so
08:01 - I'm just going to grab this code rather
08:03 - than write this room scratch in this
08:05 - coding challenge I'm going to grab this
08:06 - code I'm going to stick it at the bottom
08:09 - here and what I'm going to say now is
08:14 - guess it's giving me file objects not um
08:20 - not strings but that's fine list files
08:26 - right and then I want to give it a
08:28 - directory which is data photos
08:33 - well this work print array files so
08:38 - let's see what I get here okay so let's
08:42 - see if we get this list of photos no
08:48 - okay uh what if I do sketch
08:53 - but it needs a full path so if I wrap it
08:55 - in sketch path which is a function that
08:57 - like figures out the full path of the
08:59 - directory there we go so we can see here
09:03 - it printed every single right now
09:08 - there's some extra stuff in there so for
09:11 - example why did I get like some weird
09:15 - so first let's comment this out let's go
09:18 - to the directory there it looks like
09:22 - there is something extra in the
09:25 - stretcher oh there's a folder called
09:26 - static oops let's get rid of that that
09:29 - was extra by accident so okay sorry that
09:32 - was a little mistake there's nothing to
09:33 - do with this video so now I have all of
09:35 - those files now print line files index 0
09:42 - just look at that so it gave me that so
09:48 - we can see actually like to string will
09:53 - actually just give me that file up now
09:54 - notice by the way that first file is
09:58 - that DS store which is like the
10:00 - basically the most annoying file ever
10:03 - always messes stuff up but Mac operating
10:06 - systems put these like files everywhere
10:07 - dot da store dot d a store that gives
10:09 - dorks
10:09 - yeah ok but we're going to ignore that
10:12 - file I think everything else luckily
10:15 - it's in the zero spot so it's a quick
10:17 - hack and could just ignore it what I'm
10:18 - going to do is I'm going to say first
10:20 - what I want to do is I'm going to say
10:22 - all images equals a new array with five
10:26 - files at length minus one because I want
10:30 - to ignore that da store file then I'm
10:32 - going to say I equals zero I is less
10:34 - than all images length I plus plus what
10:39 - I want to do is say string file name
10:47 - equals files index I plus 1 right I just
10:53 - want to skip that first dot da store
10:54 - file I really should write some code to
10:57 - check to make sure it's a valid jpg but
10:59 - I think we're going to get away with
11:00 - this here and then I'm going to say all
11:02 - images index I equals load image
11:06 - file name so minivan array with a lot of
11:11 - images in it now this should probably
11:12 - take a while to run so let's see what
11:16 - happens could not find uh so there's
11:21 - also a file called index.html by
11:23 - accident
11:24 - so rather than write code
11:28 - what's this image let's ignore this one
11:32 - some nice images here let's let's let's
11:36 - hope that that fixes it loading loading
11:39 - loading come come come you know what I'm
11:44 - going to do right now is I'm going to
11:45 - use a smaller subset of images let's
11:50 - just use ten images right now just to
11:54 - make sure this is actually working ten
11:59 - images okay so that worked let's use one
12:04 - hundred hundred takes a little bit
12:07 - longer but we could see okay so I'm
12:09 - loading a lot of images okay um here we
12:14 - go so now we have a lot of limit just
12:18 - loaded so what do I need to do with
12:20 - those images what I want to do ah boy
12:23 - this is tough okay so what I want to do
12:26 - is for each one of these pixels that has
12:30 - this given brightness I want to find the
12:33 - image of the clock so I'm not gonna do
12:36 - this by color I'm gonna doing this by
12:37 - brightness so let's let's adjust the way
12:39 - this looks for a second so you can see
12:43 - we can see if it's still going to kind
12:45 - of have the right look floating hundred
12:47 - images okay so this is now the portrait
12:50 - what I want to do is there are
12:54 - technically speaking there are only 256
12:58 - brightness values so what I want to do
13:01 - is in all those images I want to find
13:03 - the particular image that matches a
13:05 - particular brightness value most closely
13:08 - so the other thing I need to do is and
13:10 - and this is going to be very not
13:12 - sophisticated I'm going to say
13:17 - brightness
13:21 - what I need to do now okay
13:25 - yeah so what I'm going to do sorry
13:28 - brightness equals a new P image array
13:32 - with 256 images in it now the other
13:36 - thing I need to do is when I load each
13:37 - one of these images I think what I'll do
13:41 - is make a corresponding array B let's
13:47 - call this bright images and call this
13:50 - brightness let's just call this
13:52 - brightness I went up an array of
13:55 - brightness values and truth be told
13:59 - there's yeah but look I got to figure
14:02 - this out as we go so um so I have array
14:06 - of all the images and then I want to
14:08 - have a an array of the brightness value
14:11 - for each one of those images so after
14:13 - each load each one I'm going to load
14:18 - pixels and then I'm just going to look
14:21 - through all the pixels this is going to
14:23 - make it take way longer by the way
14:31 - pixels dot length so I need to look at
14:33 - every pixel and I need average equals
14:41 - zero and the brightness is this
14:46 - particular pixels brightness whoo right
14:53 - so what am i doing now for every image
14:56 - that I load and I should sample them
14:57 - down
14:58 - I really should sample them down because
15:01 - we'll make it run much faster but let's
15:02 - just sort of see how this goes every
15:04 - single image that I load I'm going to
15:06 - look at its pixels I'm going to examine
15:08 - the pixels and I'm going to add up all
15:12 - the brightness values and then averages
15:15 - the sum of everything divided by the
15:20 - number of things the length of the
15:22 - pixels so now I have the average and I
15:24 - can say brightness index I equals
15:30 - brightness index i brightness index i
15:32 - breakfast fix i equals average okay so
15:38 - what I've done now is I'm just doing I'm
15:40 - just going to do 10 I'm going to run
15:42 - this and I'm going to say print array
15:46 - brightness get rid of this so let's look
15:51 - at this
15:51 - no pointless nullpointerexception so
15:55 - brightness Oh brightness is a new array
16:00 - with the same number of spots and I
16:03 - should make like image objects I should
16:06 - there's a lot of ways I could refactor
16:07 - this to make it make more sense but this
16:10 - is pretty good okay so we can see now
16:11 - those 10 images each have an average
16:14 - brightness as listed down here so like
16:18 - the first one is an average right into
16:19 - 158 seconds an average brightness of 83
16:21 - so actually in a way we're kind of done
16:25 - what I'm going to do I'm going to do
16:27 - this in a remarkably inefficient way yes
16:33 - no ah so hard so hard
16:37 - do I have nested into eyes somebody told
16:39 - me no no I think it's okay I use J here
16:41 - where I needed to so I think it's very
16:43 - tricky and confusing but I used I and J
16:46 - in the right way okay so now what I'm
16:48 - going to do is let's do what I was
16:51 - thinking originally I have kind of a
16:56 - better idea for later but this is fine
16:59 - what I'm going to do is now I'm going to
17:01 - say I need bright images so I need to
17:08 - fill this bright images array so Brooke
17:13 - so what I need to do and I said VAR here
17:15 - SP int okay so I need to fill this
17:18 - bright images array so what I need to do
17:20 - is find the image that's the closest in
17:24 - distance to the particular brightness
17:27 - value so I'm going to say right now
17:30 - closest the record the word the record
17:34 - for being closest is 256 right because
17:36 - nothing you know maximum being 255 minus
17:39 - 0
17:40 - that's 255 so I'm going to now say
17:44 - the I'm going to just use floats here
17:46 - the difference is the absolute value of
17:49 - I - brightness I write in this case I
17:59 - the index is actually bright I want to
18:01 - find for brightness 0 for brightness 1
18:03 - for brightness 2 and not brightness I
18:07 - look at every single image so I need to
18:10 - say now I need to look at all of the
18:13 - images and the difference is the current
18:20 - brightness the absolute value being the
18:22 - positive value of the current brightness
18:25 - that I'm searching for - the brightness
18:27 - for a particular image and if difference
18:30 - is less than that record then record
18:37 - equals that difference and bright images
18:40 - index I is then the oh yeah yeah yeah
18:48 - all images index J so take the
18:52 - corresponding image take the so what I'm
18:59 - doing is the saying for there's 256
19:01 - images I need so should be J less than
19:05 - brightness dot length yes thank you
19:07 - chatroom okay so what I'm doing is
19:10 - saying here's here's all the brightness
19:13 - I need to I need to have an image for
19:14 - each brightness value so I'm going to
19:16 - find the one in my all images that's
19:18 - closest to that value I'm going to
19:20 - duplicate some and there's going to lots
19:21 - of problems with this but this should
19:23 - learn and to do that I look for each
19:24 - brightness value I look through all the
19:26 - brightness values of the other images
19:27 - find the one with the smallest
19:29 - difference between the target and then
19:32 - save that so now let's just run this and
19:36 - see that I don't get any errors if I
19:37 - found okay so where am I missing
19:40 - I've got like a bracket out of place
19:42 - another bracket here okay so ups no
19:47 - pointer exception because I forgot to
19:50 - create bright images is a new P image
19:56 - array with 256 spots in it
20:00 - there we go so it I don't have an area
20:03 - so now this is the moment of truth what
20:05 - I need to do is instead of drawing those
20:08 - rectangles filled with that brightness
20:10 - value right this is where I'm drawing
20:14 - the rectangle filled with that
20:15 - brightness value what I want to do is
20:18 - say int index equals that brightness
20:23 - value and then I'm not drawing a
20:27 - rectangle I'm drawing an image all
20:32 - images no no no bright images right this
20:36 - is the array that has all those images
20:38 - indexed by indexed by brightness so draw
20:47 - the one corresponding to that brightness
20:50 - at X scale y dash time scale scale scale
20:55 - so I'm going to dynamically resize the
20:57 - image and what what okay I use index
21:01 - twice image indexed okay here we go and
21:11 - I'll get this hey not so dock to shabby
21:13 - right so we can see here and you can
21:16 - kind of look in and see the level of
21:18 - detail I only had ten images to pick
21:20 - from so it's getting a very like it's
21:23 - not that detailed but let's try again
21:25 - with you know let's try 50 images I
21:30 - don't know how long this is going to
21:31 - take but we can see we've got a little
21:34 - bit better now and let's try 100 images
21:40 - waiting waiting waiting getting better
21:44 - 200 images I'm just going to be doing
21:47 - this forever okay okay great so now what
21:53 - I'm going to do actually is I'm gonna
21:54 - let it do it with all of the images but
21:58 - there's going to be editing in this
21:59 - video not for those of you were watching
22:00 - this live there's no edit point so I'm
22:04 - just curious if it works
22:09 - okay so I'm back and I you don't see the
22:12 - image yet so a problem arose the problem
22:14 - arose which is that I got an out of
22:16 - memory error so the out of memory error
22:19 - that's a that's a problem and it's
22:22 - telling me that what I could do is
22:24 - increase the memory setting and
22:25 - preferences which I did do and I still
22:28 - got it out of memory error so you know
22:30 - loading 3,000 images into memory you
22:32 - know I could is kind of an issue but I
22:34 - have an idea here if if I go back so you
22:38 - know so rather than have to increase the
22:40 - member this will also make it run faster
22:42 - if I go back to doing this with just ten
22:44 - images you'll notice something what I'm
22:49 - actually displaying here is like a
22:51 - really really tiny image so when I load
22:55 - the images it's going to make everything
22:56 - run so much faster I might as well then
22:59 - copy that image resize the image in
23:02 - processing sample it down so that I can
23:04 - Eliza the pixels I have a like a much
23:06 - smaller amount because I don't need to
23:07 - draw a bit smaller thing anyway
23:09 - so I'm going to use that same technique
23:11 - where I'm actually going to do this P
23:17 - image file a P image IMG equals I'm
23:21 - going to load that image then I'm going
23:25 - to say all images equals create image
23:29 - and the image that I want to create I'm
23:31 - just going to make it like a little
23:32 - rectangle so I'm going to make it do I
23:37 - already have that size right scale so
23:39 - I'm going to make an image that's a tiny
23:40 - one that's just 16 by 16 an RGB image
23:43 - and then I'm going to say all images
23:45 - index I same exact thing I did with the
23:48 - Obama portrait to pixelate it I'm going
23:52 - to say copy image and I'm going to use
23:56 - the full size of that image oh actually
23:59 - you know what I should do I should
24:01 - really make it a square I'm not going to
24:03 - add this to the code be complicated to
24:04 - figure out you know what is it what's
24:07 - its aspect ratio but that would be
24:08 - something good to do - just like crop it
24:09 - but I'll leave that for those of you who
24:12 - are so inclined to add that as an
24:15 - improvement to this so this
24:19 - would be exactly the same thing but run
24:27 - much faster so you can see how boom
24:30 - analyte mean so now let's do this with
24:32 - 100 pixels 100 images make sure it's
24:35 - still working there we go now here we go
24:40 - I am going to now put edit this out
24:43 - again I'm going to go back and I'm going
24:46 - to put in all of the files and here we
24:48 - go go okay look I did it actually I did
24:54 - it I had to limit it to 1500 images I'm
24:59 - still having memory issues there I'm
25:01 - sure I could look at this more and
25:03 - figure out some ways to you know load
25:07 - your load images as I one way to do this
25:10 - actually would be to load and unload the
25:12 - images but then only load them again
25:14 - when you need them
25:15 - to to rewrite all this you know I could
25:17 - actually what I probably should do is I
25:18 - know what I should do I should
25:19 - pre-process that whole folder of images
25:21 - and sample them all down so I'm actually
25:23 - just loading the smaller images that I
25:25 - could actually do rather easily but I'm
25:28 - not going to do any of that now because
25:29 - it's time for this video to end you sort
25:31 - of see the basics of this I want to give
25:32 - you some things to think about to
25:34 - improve on this I'll release the code I
25:35 - would love people to I'll put this on
25:37 - github and see what improvements you
25:39 - make number one is is there a way you
25:41 - can cleverly match color not just
25:43 - brightness so think about how would you
25:44 - do that it was pretty simple with
25:46 - brightness because there's only 256
25:47 - possibilities but the full range of RGB
25:49 - colors that's much bigger with the with
25:53 - brightness itself something you might
25:54 - think about is well how could I have
25:56 - each image be unique or each that array
25:59 - instead of having one image for each
26:00 - brightness value what if each brightness
26:02 - value has a selection of images and
26:03 - every time I find it I pick randomly or
26:05 - I can't use the same image twice for
26:08 - certain brightness values so there's a
26:09 - lot of ways I think you can improve this
26:10 - sort of uniqueness of this and then of
26:12 - course you know this is kind of nice but
26:15 - if i zoom into it you know we're really
26:16 - dealing with these very low resolution
26:18 - images so I'm not really getting much
26:20 - out of it but the I think this would be
26:22 - more interesting to visually as a
26:24 - massive a large scale print right so
26:28 - that you could step away and see it or
26:29 - go close and see the detail so thinking
26:31 - about ways you might present that
26:33 - or represent that whether it was a web
26:35 - browsing experience could be interesting
26:36 - to think about so I hope you enjoyed
26:40 - this Oh bomber photo mosaic and I I hope
26:46 - you make some stuff with it and I hope
26:47 - to see you again in a future video
26:48 - goodbye
26:54 - [Music]