00:00 - (train whistle blows)
00:01 - - Hello, I am here.
00:02 - It's February 13th,
00:03 - I am feeling the love.
00:04 - I would like to express
my love for processing.
00:07 - My first programming love,
00:09 - my one true love, processing.
00:12 - And I'm going to express
it by creating this.
00:14 - This is a famous shape in mathematics
00:16 - called the cardioid,
00:18 - if I'm pronouncing that correctly,
00:19 - cardioid like heart,
it's kind of like a heart
00:21 - and today there might be some other videos
00:23 - after this one where I make all sorts
00:24 - of kind of heart patterns.
00:25 - But I just want to make this pattern.
00:26 - Now, if you want to learn
more about this shape
00:29 - and where it appears in mathematics,
00:31 - I want to point out to you
00:33 - this wonderful YouTube
channel called Mathologer.
00:35 - Mathologer has a video called
times tables Mandelbrot
00:40 - and the heart of mathematics
and my heart is with
00:44 - mathematics and processing
00:45 - and code and all that sort of stuff.
00:47 - Now I should also point out that
00:48 - rendering an animation
of these times tables
00:52 - in processing has been done before
00:55 - and most notably by Simon Tiger
00:58 - and one of the things I love
00:59 - about processing this year
01:00 - is there's been this world wide
01:02 - set of processing community days.
01:04 - Recently in Amsterdam,
Simon presented his work
01:06 - on creating this very large poster
01:08 - about the times tables
01:10 - at Processing Community Day Amsterdam.
01:11 - I was just at Processing
Community Day New York
01:13 - over the weekend and my heart
01:15 - is definitely full of love and wonder
01:17 - with all the things people
are doing with processing.
01:19 - So this video is dedicated
to all of the people
01:22 - who are working on processing
and p5.js and fellowships
01:24 - and everything.
01:26 - So, this shape, you can find
it in looking at the ways
01:31 - light reflects around a circle.
01:33 - I mentioned the Mandelbrot set.
01:34 - You can see it right here
01:37 - as in this bulb.
01:38 - This first bulb
01:40 - of the Mandelbrot fractal
set is a cardioid shape.
01:42 - And it's kind of amazing that
it appears in this context
01:45 - of time tables.
01:46 - So, and I think if you watch the end
01:50 - of the Mathologer video
there's this animation
01:52 - at the end and I was just like
"whoa! That looks so cool!"
01:55 - I kind of want to show it to you now,
01:57 - but I'm just going to program it in
01:58 - and hopefully it will be
at the end of this video,
02:00 - Cause somehow I'll program it.
02:01 - So let me talk about how this works:
02:05 - Happy February 13th
everybody, I love processing.
02:12 - Okay.
02:12 - Now, let's say, and this is good timing,
02:14 - because in my course at NYU this week,
02:17 - just yesterday we were talking
about polar coordinates,
02:20 - and I'm going to need to make
heavy use of polar coordinates
02:22 - for this particular visualization.
02:24 - So we're going to start with a circle.
02:27 - And we are going to
divide this circle equally
02:31 - into parts basically,
almost like a pie chart.
02:34 - The way I'm going to represent
that is just by equally
02:36 - spacing out a set of dots.
02:39 - I have one, I have two.
Now I need eight more.
02:43 - So I need four along the top
and four along the bottom.
02:45 - This is for me to get 10.
02:47 - So
02:48 - One,
02:49 - two,
02:50 - three
02:51 - No that's three!
02:51 - (laughs)
02:53 - One, two, three, four,
02:56 - one, two, three, four.
02:58 - So now, let me number them:
03:00 - Zero, one, two, three, four,
03:03 - five, six, seven, eight, nine.
03:07 - So I want to do times tables,
meaning I want to multiply
03:12 - each one of these numbers by
two and whatever number I get,
03:15 - then I want to connect it to that.
03:18 - So, two times zero is what?
03:20 - Zero, so that's just here.
03:22 - One times two is what?
03:23 - Two, so that connects here.
03:25 - Two times two is what?
03:26 - It's four.
03:27 - Three goes to six.
03:29 - Four goes to eight.
03:31 - Five goes to 10!
03:32 - There's no 10,
03:33 - well we wrap around, we
use the modulo operator,
03:35 - so we use the remainder.
03:37 - Basically, if we keep counting,
03:38 - like this would be nine, 10, 11, 12.
03:40 - So five goes to 10,
03:42 - six goes to 12, seven goes
to 14, and eight goes to 16.
03:48 - Nine goes to 18 et cetera.
03:52 - So you can see here,
03:54 - that this shape is sort
of starting to emerge.
03:57 - So, let's first start by
just creating exactly this.
04:01 - Alright, so, let me
start writing some code.
04:04 - Circle! Hmm..ok so now what
I need is a number of points.
04:09 - So let me call this the,
what is this? The scale?
04:13 - The divisor? I don't
know what to call this.
04:17 - Total points!
04:18 - (typing)
04:21 - - Just call it total.
04:22 - Alright. So, I'm going to make it a float,
04:24 - and let's keep it as an
integer for right now.
04:26 - I'm going to change it
to float in a little bit.
04:28 - You'll see why.
04:29 - So now I'm going to,
04:33 - I need to do a loop,
04:34 - and draw all those points.
04:36 - I want the center of my visualization,
04:41 - I want everything to be
oriented around the center
04:46 - so I'm going to translate to the center
04:47 - width divided by two,
height divided by two.
04:50 - And then this is where
that polar coordinate thing
04:53 - comes in.
04:54 - I need to figure out,
04:55 - the way I'm going to
find all those points,
04:57 - is, right there are how
many slices of pie here?
05:00 - One, two, three, four, five,
six, seven, eight, nine
05:04 - oh 10! How convenient.
05:05 - So each one of these angles
is two PI divided by 10.
05:10 - So that's where each one
of these points goes.
05:14 - So I'm going to say,
05:19 - this delta angle,
05:21 - I'll just call it delta,
05:22 - equals two PI divided by total.
05:27 - And then, another way I could
do this is to just use map.
05:34 - I could say angle equals map I,
05:35 - which goes between zero
and total, between zero
05:37 - and two PI. That might be an easier way.
05:40 - Then I don't actually need this delta.
05:42 - And then, I need a radius,
which is I need to know,
05:47 - what is the radius of this
circle that I'm visualizing?
05:52 - So, for that, let's just make the radius
05:55 - the width of the window divided by two.
05:57 - Let's call that r, which
is the width of the window
06:01 - divided by two.
06:02 - And then I want to say
x equals r times cosine
06:07 - of the angle.
06:08 - Y equals r times sine of the angle,
06:11 - and I will refer you to my
video about polar coordinates
06:13 - to understand these particular formula.
06:16 - And then the next thing I
want to do is draw a point.
06:18 - I'm going to make an ellipse,
fill 255, ellipse at x,y...
06:24 - Oh! Oh!
06:24 - (bell dings)
06:26 - Thank you Ben Fry! I'm
going to call this circle.
06:30 - There's a circle function
now. 16. I love using these.
06:35 - There we go, look. You
can see there's my 10 dots
06:38 - around the circle.
06:39 - Now I probably want to be
able to see that circle,
06:41 - that would be nice too,
so let me say, stroke 255,
06:47 - no fill, ellipse and the
translate needs to come before
06:53 - drawing this. I just want to draw,
06:55 - ah no! It's a circle, it's a circle!
06:57 - At zero, zero, r times two right?
07:01 - Because the circle function
expects the diameter,
07:04 - which is the radius times two.
07:05 - So now we can see. There we go!
07:06 - (blows kiss)
07:07 - - I have my circle with all my points.
07:09 - Now I need to do my math thing.
07:14 - I'm going to have a value,
07:19 - I'm going to call this N.
07:22 - So N is going to be:
"what is the times amount
07:27 - that I am going to
multiply each number by?"
07:29 - So there's a lot of different
parameters in the system,
07:31 - and you can play with them to create
07:32 - all sorts of different kinds of patterns.
07:34 - Hopefully we'll see some of those
07:35 - by the time we get to the end.
07:36 - But right now, I'm going to
make this a two times table
07:39 - to try to get that heart, that cardioid.
07:42 - So, I think I should call it factor.
07:44 - Let's call that factor.
07:46 - I'm going to put that up
here. Int factor equals two.
07:52 - And I'm sure there's a nice way
07:54 - I could do all this together,
07:57 - but I'm going to do
this as a separate loop.
07:59 - So now I'm going to do this again.
08:00 - Obviously I'm going to
re-factor this later
08:03 - as I like to say. But what I want to do,
08:06 - is I want to say, a is I.
I want to go from point a
08:11 - to point b which is I times factor.
08:13 - Those are essentially my indices
08:15 - of where I am connecting the lines.
08:18 - Zero goes from zero, one goes
to two, two goes to four.
08:22 - Then I need a function, and actually,
08:23 - this could be really useful,
for me to write a function
08:27 - that returns the p vector
for any given index.
08:34 - So get vector for any given index.
08:39 - So basically I can say the
angle is map that index,
08:44 - which goes between zero and
total between zero and two PI.
08:49 - The vector equals a new P Vector at,
08:52 - and this should be a global variable, r.
08:57 - I cannot set the width up here,
08:59 - because it doesn't know what the width is.
09:01 - I'm going to make this r here,
and then I'm going to say
09:03 - r equals width divided by 2.
09:05 - I could make that an
argument to this function
09:07 - but I'm just going to keep
it as a global variable.
09:09 - Make a new P Vector to r times cosine.
09:13 - Actually, P Vector class
has something in it.
09:18 - P Vector from angle, angle.
09:20 - That will make the vector
pointing in that direction
09:23 - and then I just want
to multiply it by the r
09:26 - to set it to be that.
09:28 - So, I'm using some vector
stuff here, which I realize
09:30 - is now maybe a little bit beyond the scope
09:32 - of if you were coming to
this video just without
09:35 - knowledge of how the P Vector
class works in processing.
09:38 - Or in p5, which there's a p5 Vector.
09:41 - It's just an object that has an x and a y.
09:43 - So it's a nice way for me to
store the x and the y together,
09:46 - and I can make the x and y
components from an angle,
09:50 - and then I can scale that by
multiplying it by some radius.
09:54 - So it's really got that sort
of polar coordinate thing
09:56 - built into it.
09:57 - So I'm going to multiply
it by r and say return r.
10:02 - And then actually, since
I'm here refactoring this,
10:07 - I can say right here,
10:10 - P Vector V equals,
10:13 - what did I call that function?
10:14 - Get vector based on I.
10:17 - Then I should be able to say, v.x, v.y.
10:19 - So I basically just took that code,
10:21 - and put it into a function
10:22 - because I'm probably going to
need to do this quite a bit.
10:23 - And I don't want to return
r, I want to return v.
10:25 - Ooh! I'm liking what I'm doing so far.
10:28 - (laughs)
10:29 - - I think this might actually work.
10:31 - Now I want to say get vector for I.
10:35 - Then get vector for I times factor.
10:38 - But guess what?
10:39 - It's not just I times factor.
10:43 - So first of all, this
should be a P Vector,
10:46 - this should be a P Vector.
10:48 - It's not just I times factor,
10:51 - although I guess I could
rewrite this function.
10:54 - It depends on where I want to put this.
10:56 - Actually I'm going to put it here.
10:57 - I need somewhere to deal with the fact
11:00 - that when I do six times two I get 12,
11:03 - but I really just want two,
because 12 divided by 10,
11:06 - is one, remainder two.
11:08 - So 12 modulo 10, is 2.
11:10 - The modulo operator, which I have a video,
11:13 - thank you Golan Levin, about modulo,
11:15 - is also linked now up there
somewhere in the corner
11:20 - of this screen, okay.
11:21 - So now, right here I
could just add that here:
11:24 - modulo total.
11:28 - So I don't think I
actually drew those lines,
11:29 - but if this is still working that's there.
11:31 - Now, I should be able to say:
11:33 - line a.x, a.y, b.x, b.y.
11:39 - There we go, it's backwards!
11:41 - Wait it's not backwards,
because I started over there.
11:45 - Interesting.
11:46 - So there's a couple of things I could do.
11:47 - I could just call a scale
function to just flip it
11:49 - the other way.
11:50 - I mean, what's backwards
what's forward who knows?
11:52 - I'm just saying, in terms
of watching that Mathologer
11:55 - video, it was oriented
the other direction.
11:57 - I also feel like ours needs
to be a little bit smaller
12:00 - than the actual size of the window.
12:03 - So let's make r equal, let's
give it a little bit of buffer,
12:06 - like 16 pixels.
12:08 - That's a little bit nicer to see.
12:09 - Again, my visual talent
skills are so nonexistent
12:14 - and I know people are watching
this who are designers
12:17 - with artistic vision and
you will make something
12:19 - beautiful out of this
and I can't wait to see.
12:21 - Aha! I saw a chat message go by,
12:25 - which is really quite smart.
12:26 - Which is that, I could just
here, if this is the angle,
12:29 - this is the angle, all
I have to do is just,
12:31 - if I want it to start on the other side,
12:32 - I could just add PI being 180 degrees.
12:35 - Ooh!
12:36 - It looks right!
12:37 - Okay!
12:38 - Now, we're getting somewhere.
12:39 - The mathologer uses the
number 200, I'm just going to,
12:42 - let's go to 20 and see what we get.
12:43 - Ooh.
12:44 - That's kind of interesting.
12:45 - Let's go to 200.
12:48 - Whoa.
12:49 - There we go
12:50 - (bell dings)
12:50 - (blows kiss)
12:51 - - There is the cardioid.
12:52 - That is like beautiful, just on its own.
12:54 - And by the way, what's
interesting about this,
12:56 - is this very similar if
not precisely the pattern
12:59 - you would see, if there
were a light source here
13:02 - and it reflected and bounced
around this particular
13:06 - particular
13:08 - circle.
13:10 - So, okay.
13:12 - Alright, it needs to be red,
13:14 - it needs to be oriented the other way,
13:15 - it needs to have an arrow through it.
13:16 - It needs to have a little
baby cupid flying by,
13:18 - lots of things.
13:20 - But I want to make this animation.
13:21 - So, there's a bunch of
different things we could do.
13:24 - For example, this could be a variable.
13:27 - Let's just look at that
really briefly, just to see.
13:32 - I'm going to say float. I'm
going to make it a variable here,
13:35 - equals 200.
13:36 - Sorry, int total equals map mouse x.
13:40 - I'm going to take the map function,
13:41 - mouse x goes between zero and width,
13:44 - and I'm going to map that
between zero and 200.
13:48 - Then I'm going to convert
that to an integer.
13:52 - So now, whoops.
13:53 - Oh!
13:55 - So then, good point, let's
have this take a total.
14:00 - Then the get vector function
should have the total past N.
14:07 - Maybe there's a different way of doing it,
14:08 - but now we can see basically,
based on the number
14:13 - of circles we can see, as I
move the mouse left and right,
14:16 - that increasing.
14:17 - So that's one way I could animate this.
14:20 - I think it's probably us to decide,
14:22 - a different way of animating this,
14:23 - which I will get to in a second,
14:24 - I think is possibly more interesting
14:26 - and it's varying the factor.
14:28 - What happens if this
is a three times table?
14:30 - By the way, we could
just try that right now.
14:33 - So let me make this back to 200.
14:38 - Let's make the factor 3.
14:42 - Look at that.
14:43 - Interesting.
14:44 - (lively music)
14:46 - - Breaking news, I'm
being told from the chat
14:50 - that this shape is called a nephroid.
14:52 - So this is a nephroid.
14:54 - If I would go to say, a factor four,
14:58 - look what I've got now.
14:59 - So this, and interestingly enough,
15:01 - we could actually make these
floating point numbers.
15:04 - Let's just see if I have to
change anything in my code
15:07 - if I do that.
15:08 - I'm going to, I think.
15:09 - But, let's see.
15:11 - So, I'm going to do this.
15:15 - Immediately, we're stuck here,
15:16 - like these are no longer integers.
15:18 - So what if I make this a
float and this a float.
15:23 - Let's have everything be floats.
15:24 - There we go.
15:25 - That worked.
15:26 - Let's be sure about this.
15:27 - So that was factor three, lets
try factor two point five.
15:32 - Yeah, this is looking
like how it should look.
15:34 - This is actually doing
the same exact math,
15:38 - but it's allowing for
the spaces in between.
15:42 - So what if I have two point two?
15:43 - That should connect with four point four.
15:46 - And we can do modulo also,
because seven point one
15:51 - would connect to 14.1 modulo 10.
15:55 - Sorry, seven point one
would connect to 14.2
15:57 - modulo 10 would still be four point two.
16:02 - So this works with floating points.
16:04 - And now, we can create that animation.
16:07 - So what I'm going to do,
is I'm going to make this
16:10 - the global variable.
16:12 - factor.
16:13 - I'm going to start it at zero.
16:17 - Then I'm just going to
slowly over time say factor
16:21 - plus equals zero point zero one.
16:27 - Interesting.
16:28 - Oh!
16:29 - There's the cardioid!
16:30 - There's the nephroid.
16:33 - Isn't that lovely and
beautiful and amazing?
16:36 - I just love this.
16:38 - Now, think of the possibilities.
16:40 - I have done the most basic thing,
16:42 - to just create this animation.
16:44 - At some point, it's going
to get really crazy stuff
16:48 - is going to start to happen.
16:49 - But there's so many other
parameters, there's ways
16:51 - you could think about color here.
16:54 - I'm going to make a
javascript version of this
16:55 - that will run in the
browser that I will publish
16:57 - that you can look at,
16:58 - which is basically exactly the same code.
17:00 - I could look at this forever.
17:02 - I hope you enjoyed this.
17:04 - Dedication, long distance
dedication to my true love,
17:07 - the heart of mathematics and processing.
17:09 - (blows kiss)
17:10 - (energetic music)
17:18 - (bell rings)