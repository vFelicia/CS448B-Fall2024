00:00 - hello welcome to a video about
00:03 - higher-order array functions so I just
00:05 - made all bunch of individual videos with
00:06 - kind of some non-realism like made-up
00:09 - scenarios to cover map sort reduce
00:13 - filter and fill and I thought there
00:16 - might be a way of making use of all
00:19 - those functions to improve I don't know
00:21 - if it'll really improve but to change to
00:22 - adapt my coding challenge number 7070
00:27 - eight simple particle system so this is
00:30 - the coding challenge this is the code
00:32 - it's got an array in it I'm doing
00:34 - everything rather manually with a loop
00:36 - what can I do to use these functions so
00:40 - let's let's start with let's start with
00:42 - fill so the first thing I want to do is
00:44 - let's see if I could use fill to start
00:47 - the array with like a hundred particles
00:49 - alright so let's see let's start with by
00:52 - saying the oops what happened here let
00:55 - part let's start by saying particles is
00:57 - a new array with a hundred spots now in
01:02 - theory what I kind of want to do is this
01:05 - particles dot fill new particle right I
01:10 - want to just say hey fill all the spots
01:12 - with a new particle and I already told
01:13 - you there's a hundred spots there this
01:15 - is kind of gonna do something
01:16 - interesting I'm gonna actually just to
01:18 - demonstrate I mean I'm gonna take out
01:20 - adding particles and draw and I'm gonna
01:22 - run this real quick
01:23 - and see okay did you see something that
01:25 - real fast look at that real fast what
01:27 - was that
01:27 - well actually what it did is it made a
01:29 - new particle and it put that new
01:31 - particle in every spot in the array but
01:33 - it's all pointing to the same particle
01:35 - object I need a different particle
01:37 - object in every spot so in this case
01:39 - I've actually really got to use the map
01:42 - function so I can fill it I can fill the
01:45 - array with like emptiness and then use
01:46 - the map function to create a new
01:48 - particle for each and every spot so what
01:51 - I could do here is I can just say fill
01:54 - dot map and then each element I'll call
01:59 - it P should be a new particle so this
02:04 - now should give me whoops
02:08 - why didn't this work uh okay so here's
02:13 - the problem
02:14 - I forgot I know maybe this isn't the
02:17 - greatest thing to do because map
02:18 - requires a new array so this is all sort
02:20 - of silly that I'm doing here so it would
02:22 - make more sense for me to say this
02:25 - because why make a new array twice so
02:30 - what I want to do is make a new array
02:31 - fill with nothingness I could put null
02:34 - in here and then map oh I don't like
02:37 - where this and then map to new particles
02:40 - I hate this yeah that worked I got a
02:42 - little burst of 100 particles can I take
02:45 - out this null yes so I don't know do we
02:49 - like this this is almost ridiculous I
02:51 - don't know if I really need this but it
02:53 - works I have a particles which is a
02:56 - hundred or a hundred a of a hundred
02:59 - particles and each each element is a new
03:01 - particle object and you can kind of see
03:03 - that one line of code great okay so we
03:06 - used this video we now use to fill oh
03:09 - and we use map oh how lucky for me and
03:12 - again I've really got to pay attention
03:14 - to what just acts on the current array
03:17 - what makes a new array all right so what
03:19 - can I use next let's go ahead and use
03:23 - filter I'm going to show you something
03:25 - interesting about filters so if you've
03:27 - looked if you've gone through this count
03:28 - if you watch this challenge and looked
03:30 - at this code look what I'm doing here I
03:32 - have this very awkward loop that loops
03:34 - to the array backwards of using the
03:37 - index I access each element of the array
03:39 - update I show I check this finished
03:41 - function if that finished function
03:43 - returns true I use the splice function
03:45 - to remove it out of the array so I can
03:48 - really improve this let me add this back
03:50 - in where it adds five new elements to
03:52 - the array and maybe there's a way I
03:54 - could do that with one of these
03:55 - higher-order functions there we go now
03:57 - we can see here's the particle system
03:59 - one thing I could do to improve this is
04:01 - let's just use let's just use the for of
04:05 - loop so for every particle of particles
04:11 - this is a new this is a loop that's part
04:13 - of e a loop structure this part of the
04:15 - JavaScript es6 I have a whole video just
04:17 - about this loop it's saying every single
04:20 - element of the array reference that each
04:22 - element in the variable particle so I
04:24 - can just say here particle dot
04:27 - update particle doc show so that's nice
04:32 - I like that already better than this
04:34 - down here which I'll comment out so this
04:37 - is a nice simple way of iterating
04:39 - through every element and there we go I
04:44 - probably just use two for each loops and
04:46 - this is about higher-order functions so
04:48 - we can see this is the same it now let's
04:51 - look at particles dot length 1975 two
04:57 - thousand one ninety it's not deleting
04:59 - any of the particles as they fade out so
05:02 - how can I do that I can say in instead
05:06 - of having to check each one and remember
05:08 - the index and use splice I can now say
05:11 - particles dot filter and what do I want
05:15 - to filter now remember I'm gonna I can
05:17 - write the function to return true or
05:20 - false to tell it whether to keep it or
05:22 - not if you watch my video on filter all
05:24 - in line using the arrow syntax so really
05:27 - what I'm trying to write here is I want
05:29 - to write a function like keep and it
05:32 - receives a particle and I'm going to
05:34 - return P dot is finished right and in
05:39 - ultimately I want to keep it if it's not
05:42 - finished so this is the function that I
05:44 - want to write to filter everything out
05:46 - it returns true if it's not finished so
05:50 - keep it but I can just write this as and
05:54 - not so look at this now and I have to
06:00 - remember on my list filter is one of
06:04 - those ones that returns a new array so
06:07 - this actually isn't going to do anything
06:10 - unless I say particles equals particles
06:13 - dot filter filter them all out based on
06:15 - the is finished property and now okay
06:19 - it's finished is not a function just
06:21 - call it just called it finished okay and
06:26 - there we go now is this really working
06:28 - let's check particles dot length Jordan
06:30 - 55 Tora 55 it makes sense that it's
06:32 - always 255 because its lifespan starts
06:36 - at 255 it goes down by one
06:38 - and I'm adding like five per frame
06:39 - somehow the math works out that it's
06:40 - like nicely 255 that's very interesting
06:43 - all right so look at this now the reason
06:46 - why now these this particle system
06:48 - example is a bit of a simplified version
06:51 - of my nature of code ones I just want to
06:53 - really briefly go to github github.com
06:57 - slash Schiffman slash the nature - twice
07:03 - code - examples - p5.js so if you want
07:08 - to see more examples that do this and I
07:10 - go into chapter four systems I have a
07:13 - lot of particle system examples here's
07:15 - one systems of systems of the particle
07:18 - system class you can see I am now doing
07:20 - this in my examples with some extra
07:23 - comments so this is this is now if you
07:28 - want to see many more examples where I'm
07:30 - kind of using this type of es6 style to
07:33 - to operate on an array of particles you
07:36 - can check out these examples as well
07:37 - what else can we add to this let's ah
07:41 - let's use reduce so let's see if we can
07:44 - use reduce so one one thing that I might
07:46 - want to do with reduce is something that
07:48 - happens in my flocking examples for
07:50 - example is I want to calculate like
07:52 - what's the center what's the average
07:53 - location or the average velocity of
07:55 - everything so let's compute what's known
07:58 - as the centroid which is a term for the
08:02 - average location of a position of a
08:04 - collection of things the center of it so
08:08 - let's think about how I would do this I
08:11 - won't and I can get rid of all this now
08:14 - so I want to say particles dot reduce
08:18 - and remember reduce always gets an
08:22 - accumulator and a particle there's an
08:28 - accumulator and a particle and what I
08:30 - want to do is I want to add up each
08:34 - particles location so there's a bunch of
08:37 - different ways I could do this for
08:39 - example I think it might be simpler
08:40 - right now to just do it with the X&Y so
08:43 - first let's just calculate this X I'll
08:45 - call it CX for center X and this is
08:49 - going to be I'm going to call
08:51 - this X so the X is just enough like
08:54 - fewer shorter variable names X is the
08:56 - accumulator P is each particle so what I
09:00 - want to do is say X plus px right I want
09:04 - to add up all the X values of P this is
09:07 - not going to work right because if
09:09 - remember if you watch my reduced video
09:11 - the accumulator has to have an initial
09:14 - value if you don't specify it's the
09:16 - first element of the array well what's
09:18 - the first element of the array
09:19 - it's the particle object so in this case
09:23 - I can't like add the x value I don't
09:25 - think I want the first element of the
09:28 - array to be the first particles X value
09:29 - but what would be simpler here would
09:30 - just be to explicitly initialize it at 0
09:33 - so I can then say just comma 0 and this
09:36 - should give me the center X location
09:39 - right I'm taking all I'm adding up all
09:42 - the X values now I didn't I need to
09:43 - divide by the length but let's so this
09:45 - should really be this is really some X
09:47 - I'll call it the sum of all the X values
09:49 - this is this would be some Y and I'm
09:52 - gonna do this and and just to rename the
09:57 - variables I'm gonna do this right and
10:00 - then I should be able to say Center
10:03 - center X equals some X divided by
10:06 - particles length and center Y is some Y
10:12 - divided by particles dot length and
10:14 - let's just draw a nice you know red
10:18 - circle right there and see what this
10:27 - looks like if I got this right there we
10:30 - go you can see that's always the average
10:32 - center of all the particles the centroid
10:35 - of all the particles so again does this
10:38 - what have I done here I could have
10:39 - written a loop I could have said some x
10:42 - equals 0 before the loop every element
10:44 - of the loop I say some X plus equal the
10:46 - particle that X so I don't know what if
10:48 - I really have I improved anything but
10:50 - this you make this is a way that you
10:52 - could write it using a higher-order
10:53 - function called reduce now could I do
10:55 - this in one line could I do this without
10:59 - separate x and y values and I can let's
11:02 - look at that
11:03 - so one way I could do that oh you know
11:06 - what though the particles don't have
11:09 - vector object so I might almost want to
11:12 - leave this as an exercise I'm gonna
11:14 - leave this up in some way so what I
11:16 - would say is like go to where was that
11:22 - where was that
11:23 - go to this particular example right
11:30 - where I'm actually here each particle if
11:33 - I go to this example in nature of code
11:38 - and I look at the particle object the
11:42 - elements are not are actually p5 vector
11:45 - objects so how would you write this
11:47 - function to add everything up with a p5
11:51 - vector so let's actually I think we
11:53 - could actually do this here let's do
11:54 - this here okay so let's say I were to
11:56 - say I'm gonna comment this out comment
11:59 - this out I'm gonna say let some I'm
12:03 - gonna say some V which is the vector sum
12:05 - be create vector 0 0 that's the
12:12 - accumulator right that's going to be the
12:16 - end that's the accumulator I'm gonna
12:18 - make an empty vector at 0 0 then I'm
12:20 - gonna say I'm gonna call this
12:24 - accumulator V then I'm gonna say let
12:27 - some V equal and we do the same exact
12:30 - thing particles reduce this accumulator
12:37 - which is V which is going to be a vector
12:40 - P then say V dot add because I'm going
12:47 - to use the P v vector syntax wow this is
12:49 - really crazy px py so I believe the p5
12:54 - vector object has an ad function and I
12:56 - can add to the vector x and y-components
12:59 - directly and then i'm going to give this
13:03 - as the initial value of the accumulator
13:06 - so really what I probably want to do is
13:09 - just put this right here be a little
13:11 - less caffeine line of code I can't even
13:16 - fit on the screen here there we go right
13:19 - I'm reducing let's see if we got this
13:21 - I'm reducing the array I'm gonna
13:23 - accumulate a bunch of vectors with the
13:26 - first vector being an empty vector with
13:28 - zero zero in it and then for each one of
13:33 - those I'm going to add to it each
13:35 - particles X&Y and then I'm gonna say I
13:38 - know I'm standing in front of the code
13:40 - right now I'm gonna say some V divided
13:43 - equal particles dot length well I can't
13:47 - do that I have to use it's a vector I
13:48 - have to use the divide function divided
13:51 - by the total number of particles and
13:53 - then I'm gonna say some V dot X and some
13:59 - V dot Y so let's see let's see how this
14:03 - goes are you actually still watching
14:06 - this video because I'm gone off the deep
14:07 - edge with all these things I'm okay
14:10 - let's go back to my sketch same result
14:14 - so that's working to calculate the
14:16 - centroid so you've seen now I can use
14:18 - filter I can use reduce you know here's
14:22 - let's let's look back at the list filter
14:25 - reduce fill map I still have swords well
14:29 - this video is just gonna be longer I'm
14:30 - gonna use sort in this video so here's
14:32 - the thing I don't think that the code is
14:34 - necessarily gonna run faster and more
14:36 - efficiently this way and this could be a
14:38 - problem if I have a particle system with
14:40 - thousands hundreds of thousands millions
14:41 - of particles I really want probably then
14:44 - a simple for loop is going to actually
14:46 - execute the fastest but there's
14:51 - something nice about learning how these
14:53 - functions work and sort of seeing how
14:55 - this can be done because you will
14:57 - especially see these in libraries that
14:59 - are manipulating large amounts of data
15:01 - in JavaScript libraries that are kind of
15:03 - using this sort of style of coding so
15:05 - hopefully this is helpful to you let's
15:06 - do sort why would I want to sort these
15:08 - particles well one reason might be what
15:11 - if your create first one if you're
15:12 - actually in 3d space it's sometimes
15:15 - advantageous to know the Z the Z
15:19 - of things because you might want to draw
15:21 - them in that order related to how the
15:23 - alpha or the blending and various things
15:24 - are working but I'm not in 3d but even
15:26 - in 2d what if I wanted to have some type
15:29 - of layering system where I always wanted
15:31 - certain things to be drawn over other
15:33 - things even if they're out of order in
15:36 - the array because right now I'm only
15:38 - gonna draw things in the order that they
15:40 - are in the array so let's create kind of
15:41 - a fake scenario that will do that so
15:44 - what I'm gonna do is I'm gonna go to the
15:48 - main sketch the particle and I'm gonna
15:50 - add oops no I'm sorry I'm gonna go to
15:51 - particle and I'm gonna add I already did
15:53 - this actually I'm gonna add a color
15:56 - variable which is just a random
15:57 - brightness value between zero and I
16:01 - guess technically this can be random 256
16:04 - because I can get 0 through 255 and then
16:06 - I'm gonna fill by this color and I'm
16:08 - gonna get rid of the Alpha so they're
16:10 - gonna be no alpha now let's look at this
16:12 - whoops let's go back I'm gonna run this
16:15 - and I'm gonna get rid of the centroid
16:17 - just so we don't have that big red dot
16:19 - for no reason I will obviously leave
16:22 - this in the code go back to here now
16:26 - look at this so there's obviously a
16:28 - layering going on here the layering
16:30 - happens to be just the order that the
16:32 - particles were added but what if what I
16:35 - wanted to do for example was always have
16:37 - the brighter ones appear on top of the
16:39 - darker ones I don't know that will
16:40 - produce any visual value but you could
16:42 - imagine a scenario where you're actually
16:43 - thinking about layers and depth and
16:46 - maybe you create fake Z value of Z
16:48 - variable for each object or something
16:49 - like that so I could sort them by their
16:51 - brightness so let's look at that
16:54 - if I go now back to sketch before I draw
16:56 - them I could say particles dots sort and
16:59 - remember when I sort I need to create a
17:03 - function and again I'm using this arrow
17:05 - syntax just almost automatically now
17:07 - this is this working for you please let
17:09 - me know it's all these videos help you
17:11 - kind of just see it where I get where I
17:13 - start with two elements of the array a
17:14 - or B and now it's up to me to return a
17:17 - value that says which one should be
17:20 - before the other and so I can actually
17:22 - just say a dot color minus B dot color
17:25 - because if you return a positive number
17:29 - a negative number that means positive
17:31 - means one
17:32 - before the other negative number means
17:33 - the others before the other and then
17:35 - zero means they're equal that's how
17:36 - you're telling it to sort so this should
17:38 - be a way of sorting the array and sort
17:40 - actually manipulates the existing array
17:42 - not making a new one so this now if I
17:45 - run this we should see look at that the
17:49 - brighter ones are always on top of the
17:51 - dark ones which is kind of an
17:52 - interesting effect again
17:56 - you know I you could probably invent
17:58 - your own scenario of layering as to why
18:00 - you want to do this but now we have a
18:03 - particle system coding challenge 78 that
18:06 - has map and fill to create an initial
18:10 - set of particles it has sort to sort the
18:14 - way I'm drawing them based on brightness
18:15 - I'm using a four of loop to be able to
18:18 - iterate through all the particles and
18:19 - I'm using filter to filter out particles
18:22 - that I no longer need that have faded
18:24 - out as a bonus I think it would be
18:28 - interesting for me just to try to use
18:31 - for each right so I could also say if I
18:35 - really want everything to be a higher
18:37 - order function I could say particles for
18:39 - each right and then I could say this but
18:46 - I need multiple lines of code so I'm
18:48 - gonna say P dot update all the laws of
18:55 - physics are like exploding around in my
18:57 - head as I'm using for each loop I can't
18:59 - believe I'm doing it so is this right
19:01 - let's just run this hey and let's put
19:04 - the centroid back in there we go so I
19:09 - can't believe I just did this but a for
19:11 - each loop what a for each loop does it
19:13 - says apply this function to every
19:16 - element of the array and my function is
19:19 - to update and show if incidentally I
19:22 - because I have two lines of code I have
19:24 - to write out the full curly brackets but
19:26 - I could do this I don't know what the
19:28 - point of this would be but if I just
19:31 - wanted to write it like this just to be
19:36 - like kind of a crazy person for today I
19:38 - could say update all of them show all of
19:40 - them and sometimes you actually want to
19:41 - get through updating all of them before
19:43 - you draw all of them so this would do
19:45 - that
19:45 - let's see and there we go I have really
19:48 - I'm like a Maya function do I qualify as
19:50 - a functional programmer I seriously
19:52 - doubt it
19:53 - but I have gone through and hopefully
19:54 - shown you a bunch of techniques for
19:56 - applying the arrow syntax and functional
19:59 - higher-order functions of JavaScript
20:01 - arrays in this video hopefully you
20:03 - learned something it will improve or
20:05 - help something you're doing in the
20:05 - future please let me know in the
20:06 - comments and thank you for watching
20:13 - [Music]