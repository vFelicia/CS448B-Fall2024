00:00 - It's time to add a database.
00:02 - Why do you need a database?
00:04 - So a database is for
persistence, your ability
00:07 - to store information
over the long haul.
00:10 - So whether or not you quit the
server, restart the server,
00:12 - clients are connecting
or disconnecting,
00:14 - their information is saved.
00:17 - So a classic example of
this is, you made a game
00:19 - and you need a high score list.
00:20 - You're going to need somewhere
to store that high score list.
00:24 - Maybe you have
different user accounts
00:26 - with names and passwords.
00:27 - That's a little bit
tricky because we've got
00:28 - to deal with security there.
00:30 - But that's something that needs
to be stored in a database.
00:33 - And you can't do this with
client-side code alone.
00:36 - There is something
called local storage.
00:37 - And local storage is a
mechanism for your browser
00:41 - itself to store
information locally.
00:44 - But the issue with that is, if
you're saving information here,
00:48 - this client will
never know about it.
00:50 - If the different clients
connecting to your server
00:53 - need to be able to
share information,
00:55 - that needs to be saved
at a database that's
00:57 - living on the server.
00:59 - Of course, the
truth is, you don't
01:01 - need to make your
own database nor even
01:04 - keep your database on a server.
01:06 - You can use something called
a Database-as-a-Service.
01:08 - I've made videos
before about Firebase
01:11 - and how to have the Firebase
service store data for you.
01:15 - There's mLab, which is also
a Database-as-a-Service.
01:18 - It uses the database
system MongoDB,
01:20 - which is a very popular
database system.
01:22 - It's a known as a
document database,
01:24 - meaning the data is stored in
basically documents, like JSON
01:27 - files, in a way.
01:28 - It's more complex and
sophisticated than that,
01:30 - but that's the core idea.
01:31 - This relates to
what I'm actually
01:32 - going to do in this video.
01:34 - But mLab is a
service, once again,
01:37 - that you can send data to,
and it will save it for you.
01:40 - And you could receive data.
01:41 - You could do all
that from the client.
01:42 - Or you could still use Node, but
not actually have the database
01:45 - on your local server.
01:46 - So there's so many
possibilities there.
01:48 - And you could actually use
MongoDB itself with Node
01:52 - and have a MongoDB there.
01:53 - Or you could use
something called SQLite.
01:55 - SQL is beyond the
scope of what I want
01:58 - to do in this video series.
01:59 - But if you're interested
in learning more about SQL,
02:01 - I might recommend
the Socratica YouTube
02:03 - channel, which has a whole
playlist about SQL itself.
02:07 - What I'm going to use
is an open source,
02:09 - freely available database
system called NeDB.
02:12 - It's very lightweight,
very simple.
02:15 - It's all JavaScript based,
and you can run it in Node.
02:18 - This is not maybe going
to be your end solution
02:21 - for the giant piece
of software you're
02:22 - building for some
huge web application.
02:26 - But for basic database
functionality and learning
02:30 - about how to work
with databases,
02:31 - it's a wonderful system to use.
02:33 - All of the documentation
for NeDB is on GitHub.
02:36 - I'll be referring to it quite
a bit throughout this video.
02:38 - And there you can also
donate to help support
02:40 - that open source
projects development.
02:42 - Let's take a look at
where I left the code off.
02:44 - Now, I did make some
modifications since I last
02:47 - saw you in the previous video.
02:48 - I did the exercises
I suggested for you.
02:50 - I did it myself.
02:51 - And what I have now
on the web app page
02:53 - itself is a Submit button.
02:55 - So when I press
the Submit button,
02:56 - it sends the data to
the server, we can see.
02:59 - And then I get the
success response back.
03:01 - And I can do that
multiple times.
03:03 - I did it four times.
03:04 - Now let's look at
what the server says.
03:06 - Every time it gets a
request, it's listing, ah,
03:09 - here's the data.
03:10 - Here's the data twice.
03:11 - Here's the data three times.
03:12 - Here's the data four times.
03:13 - What it's doing is,
it's persistent.
03:16 - I have a database.
03:17 - It's an array.
03:18 - It's a global variable
that just starts off empty
03:21 - when the server begins.
03:22 - And then every time
I receive new data,
03:24 - I push it into the database.
03:26 - This is really all
that I want to do.
03:27 - I want something to store every
single time I submit a latitude
03:31 - and longitude.
03:31 - And I want to be able to look
at that thing that I stored.
03:34 - And an array is a perfectly
fine way to start doing that.
03:37 - It will immediately break down.
03:38 - As soon as I quit the
server, it's gone.
03:41 - So again, in my
previous video, I
03:42 - suggested maybe trying a text
file next or a JSON file.
03:45 - And I have a code example that
does that that I'll link to
03:48 - in the video's description.
03:49 - But I'm going to now
add the database.
03:53 - So here on the NeDB GitHub is
the documentation that I need.
03:55 - The first thing that
I am going to do
03:57 - is install the
Node package NeDB.
04:01 - So I'm going to go over
here, and I'm going to say,
04:03 - npm install nedb.
04:05 - It's telling me to
use dash dash save,
04:07 - but that's old information.
04:09 - Dash dash save is assumed now.
04:11 - I don't need to add it in there.
04:12 - I'm just going to do this.
04:14 - And we can see that it has now
popped up with version 1.8.0
04:18 - in my dependencies.
04:20 - The next thing that I want
to do is create a database.
04:22 - So one of the nice things
about working with NeDB
04:24 - is it's a subset
of MongoDB's API.
04:27 - So it's not as big as MongoDB.
04:29 - It's not as robust
or sophisticated.
04:31 - But if you're
learning NeDB, it's
04:33 - a nice starting point where
you might move on and use
04:35 - MongoDB at some point.
04:36 - So I'm going to go to Creating
and loading a database.
04:39 - And there's a lot of
information in here,
04:41 - but this is really
what I care about.
04:42 - The first thing
that I want to do
04:44 - is I need to require NeDB,
import that Node package, so
04:47 - to speak.
04:49 - I'll use the same naming that
they use-- const Datastore.
04:52 - Basically, I'm getting
a function that creates
04:54 - a database, a data store.
04:56 - nedb-- once I've
done that, I can then
05:00 - make that database itself.
05:02 - Now, instead of my database
being a simple array,
05:04 - I can just say new Datastore.
05:08 - And what I'm going to give
this data store function
05:11 - is a path to a file name.
05:13 - So ultimately, the database is
going to sit in a local file
05:19 - on this laptop, because
that's where I'm
05:20 - running the server right now.
05:22 - So I'm going to call
it it database.db.
05:25 - That's my very creative name.
05:27 - Once I've created this
data store, it's up to me
05:29 - to now specify whether or
not I want to actually load
05:32 - whatever is in there.
05:34 - Now, there isn't
anything there right now.
05:35 - If I look in the Finder,
there's no database.db file.
05:39 - It doesn't exist.
05:40 - But if I were to say
database.loadDatabase, that's
05:46 - actually going to load the
file, load the existing
05:49 - data from the previous time
the server ran into memory.
05:53 - And if it hasn't ever run,
it's going to create that file.
05:57 - So now I'm going to go over,
and I'm going to run the server.
06:00 - I ran the server.
06:01 - I go back to the Finder.
06:02 - And look, there now is a
file called database.db.
06:06 - The next thing I can do is
actually go look at that file.
06:09 - But there's nothing in there,
because I haven't ever saved
06:11 - anything into the database.
06:13 - And the way that I save
something into the database
06:15 - is with the function insert.
06:17 - So just to test right now,
I can say database.insert.
06:22 - I'll give it some data, like
name, Sheefmahn, status,
06:34 - rainbow emoji.
06:36 - And there we go.
06:37 - Now I'm adding this
to the database.
06:41 - Let's add one more record,
and we'll give it a train.
06:46 - And now let's run
the server again.
06:52 - And now let's look
at database.db.
06:55 - You can see the data that
I put in through the Insert
06:59 - function is literally
there in the file as JSON.
07:02 - There is something new however--
07:04 - this ID.
07:05 - A key aspect of
working with a database
07:08 - is having every record, every
entry into the database,
07:11 - be associated with a unique key.
07:13 - So NeDB is generating this code,
this seemingly random sequence
07:19 - of letters and numbers, to
be this particular piece
07:22 - of data's unique ID.
07:24 - But ultimately, this
is not what I want.
07:26 - I don't want to just randomly
insert stuff into the database.
07:28 - I want to insert information
into the database the moment
07:32 - that I'm receiving
it from the client.
07:34 - The client is sending
data via a post.
07:37 - The server is receiving it and
storing it in the database.
07:40 - So I can go right here.
07:42 - And instead of saying
database.push data,
07:45 - I can actually say
database.insert.
07:47 - So just like I pushed
into an array, now
07:50 - I'm inserting it into
the NeDB data store.
07:53 - And it will get
saved in that file.
07:55 - Let's add one more
thing, though,
07:57 - to the data before we
put it in the database.
07:59 - So the latitude and longitude
is coming in from the server.
08:02 - But I also want to add with it
into the database a timestamp.
08:05 - Meaning, what was the time when
that latitude and longitude
08:08 - was recorded?
08:09 - A way that I could do this in
JavaScript is with Date.now.
08:12 - So Date.now is a
function that returns
08:14 - the number of milliseconds that
have elapsed since January 1,
08:17 - 1970.
08:18 - So I'm going to say, const
timestamp equals Date.now.
08:26 - And then I'm going to
say, data.timestamp
08:30 - equals timestamp.
08:32 - And then I'm going to insert
that into the database.
08:35 - All right, let's take a look.
08:37 - I'm going to get rid
of the console log.
08:38 - And let's also add
that timestamp here
08:41 - to what I'm sending
back to the client.
08:44 - OK, so now I am going
to rerun the server.
08:49 - I'm going to go
back to the client.
08:51 - I don't think I changed
any code in the client,
08:53 - but I'm going to refresh anyway.
08:54 - And I'm going to get the new
latitude and longitude, which
08:56 - is still the same.
08:58 - And then I'm going
to hit Submit.
08:59 - 1, 2, 3, 4.
09:01 - So good news, we're seeing
the timestamp come back.
09:05 - So something is
working and we're
09:06 - getting a changing timestamp.
09:08 - If I go to the
server, we can see
09:10 - what's being console logged.
09:11 - Just, I got a request.
09:12 - But the real question here
is, when I go and look
09:15 - at the database, will I
see all of these entries?
09:19 - And there they are-- latitude,
longitude, timestamp, and ID.
09:24 - Unfortunately, you'll see I
do have this extra stuff still
09:27 - in the database from
when I was debugging.
09:30 - Just because this is
a kind of file format
09:32 - that I feel pretty
comfortable working with,
09:34 - I could actually just manually
delete those and save those.
09:36 - But I could also
investigate the NeDB API
09:39 - to see if I could
clear the database
09:42 - or just remove certain records.
09:44 - And certainly, I
could delete the file,
09:46 - and then save a
backup of the file.
09:47 - Everything that's
in that file is
09:49 - what's stored in the database.
09:51 - So I'm going to just
run the server again.
09:55 - I'm going to submit
a few more times.
09:57 - And we go and look at this,
and we can see, there we go,
10:00 - more entries.
10:01 - And we're done.
10:02 - Not done with this project,
but done with this step.
10:04 - We now have data from the
client being sent to the server,
10:08 - and the server saving
it into a database.
10:10 - If I were to quit the server
and restart the server,
10:13 - it's going to load the
data from the previous time
10:15 - and have that available.
10:16 - What's next for me to do?
10:17 - What I want to do is
make a page viewable
10:19 - by the client that can see the
log, the record of everything
10:23 - in the database.
10:23 - Sure, I could eventually
make something
10:24 - where I have to search
for stuff or sort stuff.
10:27 - But I just want
to see that log--
10:28 - all of the latitudes and
longitudes and their timestamp.
10:31 - I'm also going to want
to add more stuff.
10:33 - So eventually, I'm going
to finish this project off
10:35 - by taking an image from
a webcam and saving
10:38 - that in the database along with
the latitude and longitude, as
10:40 - well.
10:41 - So as a step in that
direction, maybe
10:42 - what you could try to
do as an exercise is,
10:44 - add something more
to the web page.
10:46 - Maybe you want to put an input
box where the user could type
10:48 - their name or their
favorite vegetable,
10:50 - maybe their mood,
how they're feeling.
10:51 - And that could be captured
in the database, as well.
10:54 - So try that as an exercise.
10:55 - See if you can add one more
piece of data coming in
10:58 - from the client and have that
saved in the database, as well.
11:01 - And in the next part,
I'm going to show you
11:02 - how to create a separate
page that shows everything
11:06 - that's in the database itself.
11:08 - [MUSIC PLAYING]