00:00 - hello and welcome to today's coding
00:02 - challenge the ulam spiral also known as
00:05 - the prime spiral no i actually like to
00:06 - say it the other way around i did a
00:08 - whole rehearsal and everything but fine
00:09 - i'm just going to keep that in now why
00:11 - am i doing this coding challenge you
00:12 - might ask i have a new system last week
00:15 - on the coding trains twitch stream i
00:16 - spun a wheel of ideas and it landed on
00:19 - the ulam spiral what is the ulam spiral
00:22 - so it's named for the polish
00:24 - mathematician stanislav ulam and i think
00:26 - that the story goes that he was sitting
00:28 - in a lecture board and doodling numbers
00:30 - drawing them in this sort of spiral
00:32 - pattern and then marking ones that were
00:34 - prime and lo and behold this pattern
00:36 - emerged now this like might not look too
00:39 - exciting to you but it's truly a
00:41 - mathematical wonder the set p appears to
00:44 - exhibit a strongly non-random appearance
00:47 - a different appearance from randomly
00:49 - chosen sets whose densities are like
00:51 - those of primes and to make this happen
00:53 - there are really two things that i need
00:55 - to figure out how to do so hopefully
00:56 - you're going to learn two new coding
00:57 - techniques one is how do i arrange
01:01 - numbers along a spiral pattern and two
01:04 - how do i write an algorithm to determine
01:06 - whether a number is prime or not prime
01:09 - composite would be the other word if
01:10 - it's not prime let's start by looking at
01:12 - the spiral pattern itself so i'm going
01:14 - to write the number one
01:16 - then i'm going to move one space to the
01:18 - right and draw the number two write the
01:20 - number two then i'm going to move up
01:23 - and write the number three
01:25 - then i'm going to move over to the left
01:27 - and do four
01:28 - and then five
01:30 - six
01:35 - all right so i'm starting with just all
01:36 - of the numbers between 1 and 25 we can
01:39 - see it ends up in a 5x5 grid let me
01:43 - erase those arrows there because they're
01:44 - a little distracting
01:46 - the next step of course would be for me
01:48 - to start marking the numbers that are
01:49 - prime or the numbers that are composite
01:51 - i could use different colors or
01:52 - different shapes so many visual
01:53 - possibilities but before i get there i
01:55 - want to get ahead of myself let's just
01:57 - see if i can figure out how to write the
01:59 - code to draw this spiral itself and i
02:03 - know that i erased those arrows and now
02:05 - i'm realizing i really want them in
02:07 - there because i need to understand how
02:09 - it is that i'm turning and what
02:10 - direction i'm going
02:15 - now i can clearly see this as a spiral
02:18 - let's begin so first things first i need
02:21 - to figure out where is my starting point
02:24 - i'm going to start in the middle of the
02:27 - canvas
02:29 - then i need to keep track of what number
02:31 - am i on and i'm going to start with the
02:33 - number one
02:34 - let's actually draw the number one in
02:37 - the center of the canvas
02:41 - there we go now i need to take one step
02:45 - to the right
02:46 - and increase the number what does one
02:49 - step to the right mean well if i want to
02:52 - recreate what i have on the whiteboard
02:54 - and have it be five by five currently my
02:57 - canvas is 500 by 500 so each step is 100
03:01 - pixels
03:04 - now of course the numbers just go way
03:07 - off the screen and at some point i might
03:09 - want to save all of the information
03:12 - about the spiral into an array or
03:13 - something but just to begin i'm just
03:15 - going to draw a background in setup and
03:16 - we could see one two three but i need to
03:19 - once i've gotten to two
03:21 - turn left and move up let's go take a
03:24 - look at that diagram again so i need to
03:26 - make a rotation how often we're taking
03:30 - one step and then one step
03:33 - and then two steps
03:34 - and then two steps then three okay
03:38 - then three
03:40 - one two three four
03:42 - then four one two three four and then
03:45 - four aha and then it would be five
03:48 - because i stopped right the the prime
03:51 - spiral never ends in theory i'm like why
03:54 - is it four four and then this is wrong
03:56 - well this is only four but if i were to
03:58 - keep going i would have a fifth and i
04:01 - would have five and then this would be
04:02 - five and then i would have six
04:05 - and then six seven seven eight eight
04:07 - right so we are every two turns
04:10 - increasing the number of steps we go by
04:14 - one let's see if i can implement that
04:16 - hopefully it made some sense to you i
04:18 - think by writing the code it will
04:21 - further elaborate and illustrate what
04:23 - i'm trying to do okay
04:24 - so
04:25 - this is actually the step is actually
04:28 - the step size let's call it that
04:32 - because if num modulus 2
04:36 - equals 0 right i need another variable
04:40 - number of steps
04:42 - which starts at one if
04:45 - num
04:46 - modulus two
04:47 - and i can actually call this you know
04:49 - what i think would make sense instead of
04:50 - call this num let's call this step like
04:52 - what step am i on so i have the step
04:54 - size the number of steps i need to take
04:57 - before i turn
04:58 - my i could maybe use some help naming
05:00 - these variables i might refactor this
05:04 - x is moving by the step size
05:07 - the step goes up by one
05:09 - if the step modulus two equals zero
05:13 - then there's probably a very fancy way i
05:15 - could do this but let me just have a
05:17 - variable called state
05:20 - and i'm going to use a switch
05:22 - statement as you know if you've ever
05:25 - watched the coding drain before i cannot
05:27 - possibly retain in my brain the syntax
05:29 - for a switch statement but let's see if
05:31 - i could do this for once this might be a
05:32 - historic moment the first time i
05:35 - correctly type out a switch statement
05:36 - without an error switch
05:39 - i've already forgotten case
05:42 - no switch
05:44 - state
05:45 - case
05:46 - zero
05:47 - uh colon
05:50 - i can't be right oh case zero colon yes
05:54 - uh
05:55 - x plus equals step size break
05:59 - case one
06:01 - but let me think about this right again
06:03 - white board
06:04 - case zero x goes up case one y goes
06:08 - because we're flipped y goes down x goes
06:11 - well x plus plus y minus minus x minus
06:15 - minus y plus plus
06:17 - case one y minus equals step size
06:21 - case 2
06:23 - x
06:25 - i can't look at this anymore i have to
06:26 - figure out the syntax the chat is
06:28 - telling me parentheses around state
06:32 - oh i think i got it right i just was
06:34 - missing the parentheses
06:39 - i think this is right move to the right
06:42 - up to the left down if step modulus 2
06:46 - equals
06:47 - the state should change state equals
06:50 - state plus 1.
06:53 - ah i need to get rid of this
06:57 - all right so that was wrong
06:59 - let me make the frame rate 1 just so we
07:01 - can watch it more slowly
07:03 - one
07:04 - two
07:05 - three
07:06 - no no turn not up there turn there
07:10 - so first of all i need to as the state
07:13 - gets to four cycle it back down to zero
07:16 - so i can use the modulo operator
07:22 - no not modulus 2
07:24 - not modulus 2. it's modulus the whole
07:27 - point of this was not every 2
07:29 - i don't know why i wrote two in there
07:30 - with the whole i just worked out this
07:32 - whole thing where it's modulo one then
07:35 - modulo then move go two before you turn
07:38 - then go three before you turn but i need
07:40 - to do two of the same step size
07:44 - before i turn not before i turn
07:47 - before i change the step size
07:50 - oh not step size number of steps this is
07:53 - why my variables aren't named very well
07:55 - every number should be a turn now
07:58 - there we go okay that's this is i'm
08:00 - getting somewhere every number is a term
08:03 - i don't know if i really need another
08:04 - variable
08:06 - but if i add another variable i'm pretty
08:08 - sure i can execute this and then we can
08:10 - go back and see if it's unnecessary
08:12 - so i'm gonna do like turn counter equals
08:14 - zero
08:16 - so this is a turn
08:18 - so every time i turn i increase the turn
08:21 - counter
08:22 - and if the turn counter modulo 2
08:26 - is zero
08:27 - then the number of steps i need to take
08:30 - increases
08:31 - [Music]
08:38 - oh is sour
08:40 - this is so frustrating what a simple
08:42 - idea and yet i seem to have gotten it
08:45 - wrong hold on let's just get this right
08:47 - the first time through the state is zero
08:50 - and it moves over by one then
08:52 - step now becomes two
08:55 - you know what
08:56 - this is a little bit silly but this
08:58 - should definitely be down here
09:00 - and you know what that was actually just
09:01 - the problem
09:03 - why was that the only problem but that
09:05 - was the problem
09:09 - but i was trying to figure it out i
09:10 - needed to like think it through but i
09:12 - just moved it and it worked but i i
09:14 - realized that as i was going because the
09:16 - values are all correct for what i want
09:18 - to do but i increased the step at the
09:20 - wrong time that means that the order of
09:22 - operations here is important
09:25 - check if i need to change my state do i
09:27 - need to turn if i do
09:29 - turn
09:30 - every two turns change the number of
09:32 - steps before which i turn and we can put
09:35 - this at we can comment this out the
09:37 - frame rate and we can see it fill up
09:39 - super fast
09:40 - now let's make this a bit higher
09:42 - resolution just to be able to see more
09:45 - numbers at first i think it'll be 25 by
09:48 - 25 if the step size is 20
09:52 - and then of course i need to have the
09:54 - text size be mapped to the size of what
09:57 - i'm doing here let's actually just see
09:59 - what happens if i just set the text size
10:01 - to step size yeah that works pretty well
10:03 - but i think actually i don't feel now
10:05 - that i need to count and i think that it
10:07 - would be nicer for me to just actually
10:09 - draw a rectangle in each of these spots
10:17 - and i that actually can be a square
10:19 - beautiful so i think there's a lot of
10:21 - fun to be had just with that spiral
10:23 - pattern and probably i could have done
10:25 - something where i draw it all at once
10:27 - instead of drawing it animate the spiral
10:29 - but what i like about what i'm doing is
10:31 - i can choose to visualize this in a
10:33 - variety of different forms for example
10:35 - what if i want to draw a dot at each one
10:37 - of these spots and connect those dots
10:39 - with a line
10:44 - so this is it with dots but let me add
10:47 - previous x in previous y
10:53 - ooh
10:54 - so this is a nice little happy accident
10:56 - where i never actually moved the
10:58 - previous x so all the lines are being
11:00 - drawn from the center
11:02 - kind of a nice little pattern there
11:04 - so save the previous one there we go so
11:07 - now i'm drawing it connected ooh i'm
11:09 - liking this very much already
11:14 - is still going even after it's filled
11:16 - the space entirely so it would make
11:18 - sense for me to put some type of exit
11:20 - condition in here
11:22 - so what is the total steps it's the
11:25 - number of columns and rows in this grid
11:28 - the number of columns is the width of
11:30 - the canvas divided by the step size
11:33 - so i could calculate that really quickly
11:35 - here
11:38 - and again it's a square so what i'm
11:40 - doing is a little bit unnecessary but
11:41 - just in case we were to do it a
11:43 - different way maybe
11:48 - so now in theory once the step has
11:50 - reached the total number of steps it's
11:53 - traversed every single spot i can just
11:56 - stop the animation from happening by
11:58 - calling no loop
12:00 - let's wait and see
12:03 - oh
12:04 - no look at that empty spot
12:11 - that should do the trick
12:12 - [Music]
12:18 - are you ready are you ready for the ulam
12:20 - spiral now remember
12:22 - the idea of the ulam spiral the prime
12:25 - spiral is for me to note to render to
12:28 - draw a different color a point a dot at
12:32 - every one of these numbers that happens
12:34 - to be a prime number what is a prime
12:36 - number a prime number is any natural
12:39 - number for which there are two no two
12:42 - other natural numbers besides itself and
12:44 - one which when multiplied together equal
12:46 - that number it has no factors other than
12:48 - itself and one one is prime
13:02 - two is prime aha two by the way as we're
13:05 - going to see is the only even number
13:07 - that is prime right because any other
13:09 - even number is divisible by 2. so 2
13:12 - being the only even number that's prime
13:14 - which really makes it kind of odd
13:16 - [Music]
13:17 - somebody on twitter sent me that joke so
13:19 - i really can't take credit for it
13:21 - uh three prime
13:23 - four not prime five prime
13:27 - [Music]
13:29 - and here we are seeing what is the magic
13:33 - the sort of surprising beauty of the
13:35 - ulam spiral
13:38 - why
13:40 - are the prime numbers arranged so often
13:43 - in these diagonals now we're using very
13:44 - very few here so we're barely scratching
13:47 - the surface of this but let's go and
13:50 - actually implement this now in our code
13:52 - so we can see
13:54 - many more numbers of the prime spiral oh
13:57 - dear
13:58 - i have made a terrible terrible mistake
14:02 - the definition of a prime number my
14:03 - definition was pretty correct but i
14:06 - missed a very important point which is
14:07 - to say a prime number is a natural
14:10 - number greater than one
14:12 - so let me come over here
14:15 - and
14:17 - erase this and fix it
14:20 - the 1 is not a prime number and yes i
14:22 - think 2 will never be in a diagonal with
14:25 - any other prime because it is an even
14:27 - number and this diagonal will we only
14:29 - have even numbers in it and so the next
14:32 - thing i need to do
14:33 - is write a function that receives a
14:35 - number and returns true or false
14:37 - depending on whether it's prime now
14:39 - certainly i could use some kind of
14:41 - pre-built lookup table of primes but
14:43 - let's write the algorithm i'm sure this
14:45 - is something i've done before although i
14:46 - have no immediate memory of doing so
14:50 - so what do i need to do i need to figure
14:52 - out if any other number
14:55 - other than itself or 1 is a factor of
14:59 - value
15:00 - so i can look at
15:02 - every number starting at 2
15:05 - all the way up to value
15:08 - and if
15:10 - value
15:11 - modulo
15:12 - i is zero i think i better take a bit of
15:16 - a minute more to explain this to
15:18 - understand this let's take a scenario
15:20 - let's say i'm trying to determine if the
15:22 - number seven which we know is prime is
15:24 - prime
15:25 - so in the function
15:27 - the variable value would have the
15:29 - numbers would be the number seven so i
15:31 - want to take the number seven and test
15:34 - whether it's divisible by any number
15:36 - from two all the way up to itself
15:39 - how do i know if a number is divisible
15:41 - by another one well if i take that
15:44 - number divide it by that number and get
15:45 - a remainder of zero then it is divisible
15:48 - it is a factor of that number and how do
15:50 - i get the remainder of division that's
15:52 - what the modulo operator does
15:56 - seven modulo two is
16:00 - one
16:01 - seven modulo three is one seven modulo
16:05 - four
16:06 - is three
16:07 - seven modulo five is two seven modulus
16:11 - six is one so seven is prime because
16:14 - none of these are zero now if i was
16:15 - using eight as soon as i did eight
16:17 - modulo two i'd get zero and so i know
16:20 - eight is not prime because one of them
16:22 - one of those values of the modulo
16:24 - operation returns zero however i don't
16:27 - need to do anything past
16:29 - half of the number right because i know
16:33 - that you know if i'm taking the number
16:34 - 16 for example you know 16 divided by 2
16:37 - is 8. there's nothing that you could no
16:40 - number greater than 8 could you multiply
16:42 - by to get 16. so i can actually my iter
16:46 - my loop can go from 2 all the way up to
16:48 - value divided by 2.
16:51 - so up to value divided by 2
16:53 - i'm going to create a variable called
16:56 - primey
16:57 - i'm going to assume
16:59 - the value of it is prime
17:02 - if value modulo i equals zero
17:07 - primey equals false
17:09 - and i can break out of the loop
17:11 - and then i can say return primey
17:15 - so i've written my function just to test
17:17 - if it works i can say is prime and by
17:19 - the way you can do this now in the p5
17:21 - web editor you can execute code in the
17:24 - console is prime 7
17:27 - true is prime 10
17:29 - false alright so hopefully it works
17:31 - correctly what's that
17:34 - i can do better than just divided by two
17:37 - thank you live twitch chat that's
17:39 - participating in this recording session
17:41 - i can do all the way up to square root
17:44 - of the number since i can only go up to
17:47 - square root of the number the number
17:48 - squared and never higher so that's
17:51 - possibly one additional optimization
17:55 - well a value but square root is a slow
17:58 - operation so i could even do a test of
18:01 - like i squared or something but this is
18:03 - too much like i don't really need to
18:05 - worry about optimizing this right now um
18:08 - if i wanted to optimize the
18:10 - visualization it probably would make
18:11 - sense for me to like pre-compute up a
18:13 - whole bunch of primes and calculating
18:15 - whether a number is prime in optimal
18:17 - ways is the subject for another video i
18:18 - would love to hear your favorite
18:20 - algorithm for doing so in the comments
18:22 - and maybe i can return and look at some
18:23 - of those in a future live stream or
18:25 - video but let me make sure my square
18:27 - root possibility works
18:31 - no
18:32 - 25 is not prime less than or equal to it
18:36 - must be
18:38 - there yes obviously i need to check five
18:40 - okay i can't check only up to the square
18:42 - root i've got to check the square root
18:45 - 7 is prime let's try a much higher prime
18:48 - number
18:51 - 2 1 3 7. let's give that one a whirl
18:54 - there we go i think my function is
18:56 - working all right so let's try only
18:59 - drawing the circle now if the value is
19:01 - prime
19:04 - let's make the circle a little bit
19:05 - bigger
19:06 - just so we can see it
19:09 - and
19:10 - drum roll please
19:16 - looks pretty great
19:18 - oh dear
19:20 - have i let one be prime again oh
19:24 - that's a nice fix to it
19:26 - there we go now i've gotten rid of one
19:28 - as prime
19:29 - well this is just lovely
19:32 - let's see how far we can push this just
19:34 - in p5 itself
19:38 - changing the step size to five and while
19:40 - this is running in the background
19:43 - let me just finish off this video by
19:45 - very quickly porting this to processing
19:47 - which is a nice environment for me to
19:49 - try to render a really high resolution
19:51 - image and the other thing we're going to
19:53 - get is you get to see the newest
19:55 - processing for beta
19:57 - hey
19:58 - i actually haven't downloaded it it's
20:00 - processing 4.0 beta 5 as of february 3rd
20:03 - 2022. today is february 11 2022
20:06 - and if you haven't seen it processing
20:08 - four has a theme selector
20:12 - [Music]
20:18 - but this one is my favorite all right so
20:20 - this did not continue to animate because
20:22 - the canvas will go to sleep in the
20:23 - background if it's not currently live
20:25 - also
20:26 - um i realize now this i don't need the
20:28 - break i can just say return false right
20:31 - here
20:34 - and i actually don't need this primary
20:35 - variable if i get to the end i can just
20:37 - return true so i was struggling to name
20:40 - that and now i've even made it simpler
20:41 - so let's leave this running in the
20:43 - background i'm going to take all of this
20:45 - code and i'm going to copy paste it into
20:47 - processing and i'm going to use my magic
20:51 - typing power to very quickly port this
20:53 - over from javascript into java which is
20:56 - the programming language behind
20:58 - processing
21:06 - well that was surprisingly easy
21:09 - let's check on our browser
21:12 - still churning away in processing i am
21:15 - going to remove the lines
21:18 - and
21:19 - i am going to do the entire thing all at
21:22 - once so instead of drawing it as an
21:23 - animation i just want to see the whole
21:25 - thing all at once
21:30 - so
21:31 - let me circle back and just say a few
21:33 - quick notes about this conversion so
21:36 - variables need types in processing
21:38 - that's what int is for for integer
21:40 - functions need to specify their return
21:42 - type so i've got to specify boolean
21:44 - again the argument needs a data type uh
21:46 - i don't if a function doesn't return
21:48 - something i say void create canvas's
21:51 - size otherwise pretty much everything is
21:53 - the same
21:54 - and there we go boom just like that
22:00 - that's even uh higher finer higher
22:03 - resolution
22:05 - now let's make the step size one we can
22:07 - zoom into it and see there we go let's
22:10 - see how far we can push this
22:13 - let's say
22:14 - at the end save
22:17 - prime spiral dot png
22:19 - and let's make this i don't know
22:22 - 1920 by 1920.
22:25 - let's see how long this takes to compute
22:29 - whoa
22:33 - amazing i can look at the image i just
22:35 - saved
22:36 - and i can zoom way into
22:38 - it and see there we've got the prime
22:41 - spiral
22:42 - this one is still humming along so if
22:45 - you want to understand more about the
22:47 - ulam spiral and the prime spiral there's
22:49 - a wonderful number file video that i
22:51 - haven't watched all the way through
22:52 - because i didn't want it to inform what
22:54 - i'm doing so much but as soon as i stop
22:55 - recording this i'm going to go and watch
22:56 - it and i'll i'll link to it in the video
22:59 - description obviously there's other
23:00 - references online that you could read
23:02 - about like this article from the
23:04 - american mathematical monthly which
23:06 - talks about how the lines correspond to
23:08 - quadratic forms i'm also going to put up
23:11 - on the screen here i'll do this later
23:12 - i'm going to make a version of this
23:14 - spiral where i randomly pick points to
23:17 - draw a circle for whether or not they're
23:19 - prime but that distribution of how many
23:22 - points i pick randomly will follow the
23:24 - same
23:25 - distribution of prime numbers that
23:27 - distribution is referenced here in this
23:29 - paper as log n over n so we can see
23:33 - are we is there really a pattern to the
23:35 - primes or is it just random i expect as
23:37 - i'm showing you there really is a
23:39 - pattern there what other beauty can you
23:42 - find in the ulam spiral in the prime
23:43 - spiral i want you to show me so take
23:46 - this code try color try shapes try 3d i
23:50 - don't know anything that you could
23:51 - imagine and share it with me in the
23:53 - video description i'll include links on
23:55 - how you can do that and i can't wait to
23:57 - see you on the next coding challenge
23:59 - goodbye
24:00 - choo choo
24:07 - [Music]