00:00 - (ding)
- Hello.
00:01 - In this video, I am going to make a bot
00:03 - and I am going to make an image bot
00:05 - and I'm very excited about this project
00:07 - because it pulls together a
whole lot of different things.
00:09 - I am going to use processing
to generate an image.
00:13 - I am going to use node to call processing
00:16 - to generate the image
and I'm going to use node
00:18 - to talk to an API and the API is Mastodon.
00:20 - So one thing you might want to do
00:22 - is I'll refer you to all of my,
00:24 - a tutorial series about
the basics of making
00:27 - a Mastodon bot, I will start
largely from scratch here,
00:30 - but I am going, I've
already gotten my API keys
00:33 - and I already have imported and installed
00:36 - this node package called mastodon.api
00:39 - and this .env package that
loads my API keys for me.
00:43 - So that is stuff that I've
done in another video.
00:46 - If you want to see that, I'll link to that
00:48 - in the video description but
I'm just going to get started.
00:50 - So what is the first
thing that I want to do?
00:52 - Okay, actually, let's go to,
so this is my inspiration.
00:55 - Tree bot, made by Alix Novosi
for National Bot Making Month
01:00 - and I am going to try to recreate this.
01:04 - My trees won't be nearly as nice.
01:06 - So the first thing I want to
do is I want to use processing.
01:08 - I don't have to, I could
find some node package
01:11 - that does drawing or generates an image,
01:13 - svg, whatever, but I love
processing, it's my happy place
01:16 - and I'm pretty sure I could get processing
01:18 - to generate a tree, in fact,
I don't even have to write
01:22 - the code for this because I have before.
01:25 - I'm just going to go to examples, right,
01:28 - isn't it in here somewhere?
01:29 - Topics, simulate,
01:31 - no, no, no?
01:32 - Okay, I'll be back in a second.
01:35 - Oh yeah, I'm back, I
found it under fractals
01:39 - and L-systems tree.
01:40 - Well look, recursive
tree by Daniel Shiffman.
01:46 - This is my, this is a recursive tree
01:49 - and as I move the mouse,
it changes the angle.
01:52 - So let's alter this code a little bit.
01:55 - Let's say that, we don't
care about a frame rate.
01:59 - And let's not, let's
have the angle be random
02:05 - between 0 and two pi.
02:07 - Oh and it's converting it to radians,
02:08 - so okay, between 0 and 360.
02:12 - Whoa and it's doing it over
and over again in draw,
02:14 - that's exciting, I'm going to say no loop
02:18 - so it's done each time I run this.
02:21 - I get a random tree.
02:22 - There's so much more that
I could do to the design
02:24 - of the tree and I'm so
tempted to recode the tree
02:27 - but I'm going to just leave
it as is, ya know maybe I want
02:31 - to not have so many large
angles and there we go,
02:33 - beautiful tree, okay.
02:35 - So now, now that I've
done that, what do I want?
02:38 - I want my processing sketch to also save
02:41 - and I'm just going to call it tree.png.
02:45 - So when it's done drawing,
it's going to save an image.
02:49 - I've got my code here.
02:50 - This is the code that will
talk to the Mastodon service
02:53 - and what I want is for
this code to actually run
02:55 - a processing sketch but this
is node, this is JavaScript.
02:59 - Processing is java and
it's a desktop environment
03:03 - where I hit the play button,
how can I possibly do this?
03:05 - Well the first thing I'm
going to do is actually go
03:08 - and save this processing
sketch in where my bot is
03:12 - and I'm actually working in this folder,
03:13 - Mastodon bot 3, you can
see node modules, bot.js,
03:16 - so I'm going to save it there
and I'm going to call it treegen.
03:22 - So I'm going to save it
treegen, I'm going to make sure
03:25 - it still runs, it still runs.
03:28 - And now, what I'm going to do,
03:29 - I'm going to show you a little trick.
03:31 - Now wouldn't it be nice
if I could just execute
03:33 - a command like processing run.
03:36 - Of course, in terminal, in the shell,
03:39 - it's not going to know what that is
03:41 - but a little known fact about processing,
03:44 - which I have done this
in other videos before
03:46 - but just to start anew again,
processing command line.
03:50 - There is actually a way
to run a processing sketch
03:55 - command line by saying processing-java,
03:57 - the path to the sketch and then --run
04:00 - but the only way you can do
that is by installing first
04:04 - processing.java to your
system so this is installing
04:08 - a command line command to
run a processing sketch.
04:14 - So I'm going to do this,
install processing java,
04:16 - I'm going to say yes for all users.
04:19 - It's going to want to use my password.
04:23 - So I'm going to enter my
password 'cause it needs
04:26 - to be able to put that
where it needs to go
04:28 - and now I can actually say processing-java
04:31 - and you can see, I get all sorts of stuff.
04:33 - It doesn't know what I
want to do but watch this,
04:36 - I can say, let me just look in here,
04:38 - there is the treegen processing sketch.
04:41 - So I can say processing-java, sketch=,
04:46 - is that what it was?
04:47 - Let's go look at the, sketch=,
now I need the full path
04:51 - so the full path and I'm going
to show you a way around this
04:54 - in a second, is this, treegen, right,
04:58 - this is the full path to
that processing sketch.
05:00 - Then I can say --run, here we go.
05:05 - Magic.
05:06 - It ran it, look, there's
the processing sketch.
05:08 - This is really cool, now watch.
05:10 - What's exciting about
this and it's bothering me
05:12 - that the background isn't
51 which is very important.
05:15 - I can actually quit processing completely.
05:18 - I don't need to have processing
open and still do this.
05:21 - Look at that, there it is.
05:24 - There's my tree, ah,
but I actually do want
05:26 - to have processing open 'cause I've got
05:28 - a little bit of a problem
here and we can see here,
05:30 - look, that image is there, it's now saved.
05:33 - What I want to do is go
back and open this again,
05:38 - open, open, open, open, open
and I want to add one thing.
05:41 - I want it to go away so
I actually want to say
05:45 - after I save it, exit, and I'm also,
05:49 - this is going to be helpful for me later,
05:50 - I want to say println("Tree generated");
05:54 - We'll see where this comes up later.
05:57 - Okay, now, quit processing.
06:01 - And now I'm going to run this.
06:03 - See it, there it is, oh, finished,
tree generated, finished.
06:06 - One more time.
06:08 - There it is, oh, finished.
06:10 - Okay, this is really exciting
06:12 - 'cause there's so much stuff you could do.
06:13 - Now, here's the thing.
06:15 - I am executing this command via the shell
06:18 - but I want node to execute it.
06:21 - How can I execute it in
node and it turns out
06:23 - there is a way to execute
any generic shell command
06:27 - from node and it is with
the child process package.
06:32 - So if I go to child
process, you'll see here
06:36 - that there is a method called exec.
06:39 - Child_process.exec spawns a shell
06:43 - and runs a command within that shell.
06:46 - Truth of the matter is
it might useful to use
06:48 - this execSync because
I'm going to want to,
06:50 - sync means synchronous,
meaning wait until it's done
06:54 - to go on to the next thing but
I've got a crazy plan here.
06:56 - I want to do asynchronous stuff with es8,
06:59 - this await and async function,
07:00 - you may or may not have heard about.
07:02 - So I'm going to use this one, exec.
07:04 - So what I need to do is in my node code,
07:07 - I need to say const exec = require('')
07:12 - and where was this, it
is in child process.exec,
07:15 - child_process, no there's
no, yeah, that's right, huh,
07:20 - oh .exec, yes I'm confused.
07:22 - So this is me requiring
the child process package
07:25 - and I don't have to mpm install this.
07:28 - You'll notice that I'm on the
node.js documentation page.
07:31 - I'm not in some separate
third party mpm package,
07:34 - this is built into node, but,
just like file system is.
07:38 - But I've got to say that I want to use it.
07:40 - So require child process and all I want
07:42 - is that exec function.
07:43 - So now, there's no reason
why I can't just say
07:45 - exec and then pass in what?
07:49 - Exactly this.
07:50 - Oh let me make, this is so unwieldy.
07:52 - So a nice little trick that I can do
07:54 - is I can actually always
get the current path.
07:59 - If I want to get the
current, I just type pwd,
08:03 - print working directory.
08:05 - Well guess what?
08:07 - I can actually have pwd
executed within this command
08:11 - by using these back ticks.
08:12 - I'm pretty sure this is how I do it.
08:15 - So now I'm saying run and I
think I don't actually even need
08:19 - this first slash, right, run sketch =
08:23 - print working directory, then treegen run.
08:25 - Let's see if this works.
08:28 - It is done, okay.
08:31 - So now, so great so I can
grab this, this is my command.
08:36 - We're going to get to the
Mastodon stuff in a second.
08:39 - Uh (clicking tongue).
08:41 - Constant command = let's just put this
08:43 - in a variable like this.
08:45 - Then I could say exec command
and then that's going to have
08:48 - a callback, oh, I don't want the,
08:51 - let me just run this, let's just run this,
08:52 - let's see what happens.
08:55 - Node bot.js.
08:59 - Hey, look what happened,
it made it happen.
09:01 - Now here's the thing, the
next thing I was going to do
09:03 - was add a callback but I'm a new,
09:05 - I'm turning over a new
leaf, I'm turning a new page
09:08 - in the book of JavaScript
and I'm a kind of person
09:12 - who uses promises and I'm
not only a kind of person
09:15 - uses promises, I even use
the async and await keyword
09:19 - to really make my life
full of just (sighs) ease.
09:25 - Eh, it's not full of ease
but I'm doing my best.
09:28 - So what does that mean?
09:29 - The thing is, this
particular node package,
09:32 - child process.exec, and I
have a feeling if I bother
09:35 - to look at the chat (laughs)
which I'm going to open up
09:38 - for a second, someone's going
to tell me I could just use
09:41 - something else now that
natively supports promises.
09:43 - Oh I'm being told that
node.js has underscore
09:47 - directory names so there are other ways,
09:48 - people are telling me
other ways I could get
09:50 - the directory name but
what I'm going to do
09:53 - is I'm going to promisify,
which is a word apparently,
09:58 - promisify, I'm going to, oh look at this,
10:01 - I must have googled this another time,
10:03 - unless it's just very
common, by using java,
10:06 - not java, sorry, the node package util.
10:10 - So node package util, if I go look at util
10:14 - and I actually just want to be here,
10:18 - there is a promisify,
10:21 - util.promisify.
10:24 - So what I can actually do is I can say
10:27 - const util = require('util')
and then I can say
10:33 - util.promisify, what a weird word,
10:38 - what happens if I
promisify myself, uh, this.
10:42 - So now, this require child
process exec function
10:47 - no longer uses a callback,
now it uses a promise
10:49 - and what does that mean?
10:51 - That means I can say .then and whatever
10:54 - the result, the response is.
10:57 - I can console log that response.
11:01 - And then I can also catch any error
11:05 - and I console.error that error.
11:08 - Now, this might be and
there's no semicolon there,
11:12 - there's a semicolon there.
11:14 - This might look completely insane to you
11:17 - if you haven't seen promises
used before in JavaScript.
11:21 - It's very similar to a
callback but instead of saying
11:24 - a callback, I basically have this callback
11:26 - that happens in .then.
11:28 - I'm also using the arrow syntax.
11:30 - The arrow syntax is a nice way
of sort of shorthanding this.
11:33 - I'm getting the response as
the argument to the callback
11:36 - and I'm console logging it.
11:39 - So if you want to know about those things,
11:41 - I have a whole playlist about promises
11:42 - and a video about the arrow function
11:43 - that you could go and look at
but this is the basic idea.
11:46 - This is a little bit of
an advanced video here.
11:48 - Not advanced but I'm using
kind of modern JavaScript stuff
11:52 - if you consider three years ago modern.
11:54 - Okay, so now I've got this exec function
11:57 - so let's actually run this one more time.
12:02 - And see, it should do
exactly the same thing
12:04 - but look at this, that
response has standard out
12:08 - standard error so in other
words, standard out it what?
12:11 - That's the thing that, I
closed my processing sketch,
12:15 - I guess I should have left it open.
12:17 - The processing sketch
has a print line in it
12:19 - so I can read whatever that print line is
12:20 - so I could actually get more information
12:22 - from processing if I want.
12:23 - For example, I could get the angle.
12:25 - Actually this is great, let's
add a little feature to this,
12:27 - this will be fun 'cause
why not make this video
12:30 - longer than it already is?
12:32 - Where am I, desktop, desktop,
Mastodon, Mastodon bot 3,
12:37 - treegen, so what I'm going to do here,
12:40 - look at this, this is great.
12:43 - Let's leave this open because
maybe I'm going to want to
12:46 - do more stuff with it.
12:48 - I am going to, let's make
the angle between 0 and 90,
12:51 - that's what it says in the comments
12:53 - and then I'm also going to say print line
12:55 - and I'm just going to say
angle or was it angle?
12:58 - Theta, whatever, A, I'll just keep the A
13:01 - and I'm going to say
floor(a) so just get the,
13:04 - or int(a), I'm just going
to convert it to an integer,
13:08 - so watch, so now, when I do this in node,
13:13 - I'm going to say console.log
response.standard out.
13:19 - So I don't need to see that whole object,
13:21 - I just want to see the stuff
that came out of processing.
13:24 - Let's run it one more time.
13:28 - And you can see it, that was the angle 42.
13:30 - Ooh, spooky, spooky 42, meaning of life.
13:33 - Okay, so.
13:35 - Great, so here's the thing,
I want to once I have
13:39 - that image, I want to post
that image to Mastodon.
13:42 - Isn't this all about Mastodon?
13:43 - I've loaded up and connected
to Mastodon through this bot.
13:47 - If you don't know what Mastodon
is, did I say this already?
13:50 - I've got a whole set of
videos describing that
13:52 - and then you can go back and look
13:54 - but I want to somehow post
it to this particular bot,
13:58 - the coding train bot, okay.
14:00 - So now, in order to do
that, I need to look up
14:04 - the functions in the Mastodon API.
14:06 - So I'm using this
Mastodon API node package
14:10 - and if I go here, I can look and see
14:14 - that it has Mastodon, get Mastodon post.
14:19 - So this is what I want, Mastodon post.
14:21 - Here's the thing, I didn't realize this
14:23 - when I made my other videos about Mastodon
14:24 - 'cause it says path,
parameters and callback
14:26 - but guess what, this supports promises.
14:30 - So I actually am going to
do this without a callback,
14:33 - with promises, I'm going to break this out
14:36 - and didn't I say I was going
to use async and await?
14:38 - I was going to write it with just that
14:40 - but I think I have to start a little bit,
14:42 - I have to go a little bit further
14:44 - with the full promises syntax,
then I'm going to clean it up
14:47 - with async and await in a second.
14:48 - So now, there's no semicolon there.
14:51 - So now what I want to do is
I want to basically say this.
14:55 - I want to post the image
and I want to return this
15:01 - 'cause if this returns a
promise, guess what I get to do?
15:06 - I get to say .then response
and have another function,
15:11 - right, so this is the
idea of chaining promises.
15:14 - And this is what in theory, I mean,
15:16 - basically the whole theory of
this is to avoid callback hell
15:20 - and really we're just in
promises hell, it's all hell
15:22 - but eventually we will
float into the clouds
15:25 - and feel like we're like
butterflies on wings or something,
15:30 - I don't know, okay, so
if I return the post
15:34 - that I want to do when that's done,
15:35 - so I'm executing this
command when that's done,
15:37 - then do this, and then when
the next promise is done,
15:41 - then do this.
15:42 - All right so, what do I need here?
15:44 - The path, so the first thing I need,
15:47 - what's weird about and
actually it might be worth
15:49 - just taking a minute to
write these steps out
15:51 - 'cause it'll make it more clear.
15:53 - I want to exec processing,
15:57 - that's one.
15:58 - Then two, I want to upload image
16:03 - and then three, I want to toot.
16:06 - All right so what's, this
is the same thing for
16:10 - the Twitter API, it
doesn't work that you just,
16:12 - if you want to tweet an
image, you don't just simply
16:15 - send your tweet along with the image,
16:17 - you have to first upload
the media, get that path
16:20 - to the media and then you can tweet
16:23 - with that media reference.
16:25 - So this will actually
return an ID for the media
16:28 - and then as long as I
attach the idea to this.
16:32 - So this creates output.png.
16:36 - This creates an ID and
then I use that ID here
16:40 - and then I'm done, then we're just done.
16:42 - This is the three step process.
16:44 - Each one of these returns a promise.
16:46 - So when you do this, then this, than that.
16:49 - All right, that's the process
I'm working with here.
16:53 - All right so (vocalizing)
now, so, okay so the path.
16:59 - So let's go to the Mastodon API docs
17:03 - and I'm actually looking for media.
17:05 - So we can click here and this is what I,
17:07 - this is what I would do, media upload.
17:09 - I think media upload is just this.
17:10 - I post to here and then these
are the things I need to send.
17:13 - Okay so file, description,
focus, let's look at that.
17:16 - Okay so I need to, I'm going
to create some parameters,
17:20 - oh no, I'm up here.
17:24 - I'm just going to create some parameters
17:27 - and I need the file which
is presumably output.png
17:30 - and this is not exactly right yet.
17:32 - I can't just put the filename there
17:34 - but I'll get to that in a second.
17:36 - Then, I want the description.
17:38 - The description is really important,
17:40 - this is not the text that is going along
17:42 - with the actual post.
17:43 - What this is is alt
text, alternative text.
17:45 - This is for accessibility.
17:48 - So somebody who's blind or with low vision
17:49 - who's using a screen reader
instead of seeing this image
17:52 - would actually hear this description.
17:54 - So I would say a randomly generated
17:58 - fractal tree.
18:00 - Oh and I want to get, this is,
18:03 - I'm going to say const
angle = response.stdout
18:11 - with and then, oh and I need to use my,
18:16 - the new thing that I always use now
18:19 - which is template literals
for strings with angle.
18:22 - So this would be the description.
18:25 - And then there's one other.
18:30 - So the file is required, the
description it says is optional
18:33 - but it really shouldn't be optional,
18:36 - you should be alt text for accessibility
18:38 - and then focus, this really is optional.
18:41 - I am assuming, actually
I have not tried this yet
18:43 - but I'm assuming this has
to do with where the crop is
18:45 - if it's showing a preview
image, something like that.
18:47 - Okay so then, I can say so this is done.
18:52 - And then path and then those parameters.
18:57 - 'Cause this could be an array.
18:58 - Oh path, no, but okay.
19:00 - Path, oh yeah the path is media, sorry,
19:03 - I'm posting to this path,
the media path of the API
19:07 - so almost there but this
actually is incorrect.
19:09 - It doesn't work.
19:11 - The API is not going
to just accept a string
19:13 - of the filename and figure
out how to read that file
19:16 - and post all the data of
that file to the server.
19:19 - What I actually need to do
is give it a readable stream
19:22 - and so the code for doing that, it's part
19:24 - of the file system package so I need
19:26 - to actually also require that.
19:30 - We could look up the documentation for it
19:32 - but I happen to know it I think.
19:34 - So I need to say, I'm going to
say const stream = file system
19:40 - create, there it is, read
stream auto complete, thank you.
19:44 - Output.png, oh, and this
actually isn't even right
19:48 - because guess what, remember,
output.png was saved
19:52 - in the processing sketch which is
19:54 - the folder treegen/output.png.
19:57 - So now this is the stream
and this is the description
20:04 - that goes with it and then I
want to make sure this worked
20:06 - so I want to actually
console log the response.
20:10 - So now in theory I have
the code all the way
20:13 - for executing processing,
uploading the image,
20:16 - I need to, when I get the response,
20:18 - I need to get the ID and then I go
20:21 - and actually just post the status.
20:22 - Okay here we go.
20:23 - Let's try this.
20:29 - Ugh, unhandled stream error
in pipe, no such foul.
20:33 - No such foul, no such file.
20:36 - Oh it's not called output.png,
I called it tree.png.
20:42 - Okay.
20:43 - Let's try that again.
20:45 - Finished and great.
20:46 - So look, this is all the
stuff that I got back.
20:48 - Now it's kind of too much
stuff for me to look through.
20:51 - Ugh, what a pain.
20:52 - Did this actually work?
20:55 - My goodness, craziness.
20:56 - But this is all I care about.
20:57 - There's more important
stuff, there's more stuff,
21:00 - lots of tons of metadata about the image
21:02 - that you just uploaded
but all I really need
21:04 - is data.id.
21:06 - So let me just go here and say
console log response.data.id.
21:12 - And I apologize, apologies
to the bots and dots space
21:15 - for overloading your server.
21:17 - You can see, there's the ID.
21:19 - Now, the next step would be to use this ID
21:21 - and then actually
21:24 - in this response, right, I
exec, I execute the command,
21:29 - I upload the image and
then I should be saying
21:33 - return m.post again and I'm going to,
21:37 - the path I'm going to is statuses.
21:39 - So this is what it should be doing
21:42 - but I can't resist.
21:45 - Do you see how this is, I mean it's great,
21:48 - it's kind of nice.
21:49 - Start the promise chain, then do this,
21:50 - return a new promise, then
do this, return a new promise
21:54 - and if any error happens
anywhere in here it catch,
21:56 - so why not but this is the thing,
21:59 - now is there a way,
there is a new way for me
22:03 - to write all of this in
what feels more sequential,
22:08 - more synchronous in fact
with less kind of indentation
22:12 - and brackets and stuff and that is using
22:14 - this async and await syntax.
22:16 - So what I'm actually
going to do is I'm going
22:19 - to write a function.
22:20 - I'm going to call it tooter or just toot
22:23 - and I'm going to modify this function
22:26 - with a keyword async.
22:28 - This means this is an
asynchronous function.
22:30 - This is indicating to JavaScript,
22:32 - this is a feature of es8,
a new feature of JavaScript
22:36 - that's indicating that this
function will be handled
22:38 - asynchronously and always,
always, always return a promise
22:42 - and it will automagically, it
will basically automatically
22:45 - return that promise and
we'll look at that later,
22:48 - how it does that.
22:49 - So in other words, but this,
I want to do the same thing.
22:51 - What I want to do here
is I want to say exec,
22:53 - execute the command,
right, these are the steps.
22:56 - And then I want to say post the media.
23:01 - Post the media.
23:02 - The nice thing about using
the syntax is I don't have
23:04 - to separate it out with these,
chaining these dot thens.
23:09 - I can actually just use the await keyword.
23:12 - What the await keyword means
is don't go to the next line
23:16 - of code, await the end of this function.
23:20 - So if I have a bunch
of asynchronous things,
23:22 - if I package them altogether
in an asynchronous function,
23:26 - I can write them sequentially
as line after line
23:29 - after line and essentially,
23:32 - and I'm going to have
some other params here,
23:37 - so this is basically I
get to write it like this.
23:39 - Now I need to do stuff in
between, that's the thing.
23:42 - For example, this returns a
response and then what I want
23:46 - to do is get the angle
and create the stream
23:49 - so this goes here.
23:51 - So this is my step one,
right, execute processing.
23:56 - Look at it, it's just
exactly like this and now
23:59 - I have my step two where I need to create
24:04 - these parameters that are getting passed
24:06 - and by the way, I don't have
to make a separate variable,
24:09 - it could be embedded right
in here but it's just sort of
24:11 - a little bit, for legibility,
24:13 - I'm making it something separate
24:16 - and so I'm not going to say basically
24:19 - step two
24:21 - is upload,
24:23 - upload,
24:24 - upload, ha, media and that's
going to have a response
24:30 - and then what do I need?
24:32 - I need to get the ID out of that
24:36 - and then I am now going to
24:39 - say step three and by the way, I suppose
24:43 - if I'm being accurate
about this, this is all,
24:47 - I suppose this is part of step two,
24:50 - I don't know, it doesn't really,
this is a little bit silly
24:52 - what I'm getting myself worked up about
24:54 - but which line of code is part
of which step, I don't know,
24:56 - but step three and maybe
I'll name this params one
25:00 - just to be, just for, I
don't know why, why not,
25:05 - have them have different variable names.
25:07 - Then step three which is params two,
25:11 - I want the status to be,
25:16 - and this is, I'd have to, I
think I know what it's supposed
25:19 - to be but behold my beautiful tree
25:25 - with angle
25:28 - and then I should use the
template literals again.
25:35 - Degrees.
25:38 - And then I need ah, so now, so this, okay,
25:41 - let me look this up in the
25:45 - Mastodon API docs.
25:47 - Okay I found it.
25:50 - This is the API, this is the path statuses
25:53 - for posting a status and this
is the text of the status.
25:55 - There are other things you could do here
25:57 - that I've talked about in previous videos
25:59 - but this is what I want, media IDs.
26:00 - Notice this is an array.
26:02 - It's an array of media IDs
because a particular status
26:05 - could have and it says here maximum four,
26:07 - more than one image associated with it
26:09 - so you can upload more than one image.
26:11 - So that might be an exercise that you try
26:14 - to do after this video but
basically now I can say
26:19 - comma media_ids and I
just have that one ID
26:23 - so I just put, I can make
an array and put it there
26:26 - and then this has to be statuses params
26:29 - and then, what I can do, is I
can, and this is the response,
26:36 - and I can just now say return response.
26:40 - So if we could look at this all together,
26:43 - I think I have to make
this a tiny bit smaller
26:45 - for you to see it.
26:46 - Can I fit it all in one
26:49 - nice place?
26:50 - Look at this, look how beautiful this is,
26:51 - it's almost like I've written this code
26:54 - in a language like Java or C
that's perfectly synchronous
26:58 - and linear and procedural
because what I'm saying
27:00 - is await executing this command.
27:04 - Then, do some stuff, then
await uploading the media.
27:08 - Then do some other
stuff, then await posting
27:11 - the actual status and
when you're done, return,
27:13 - and guess what, if I now say,
let me make this bigger again.
27:17 - Whoops.
27:19 - If I say toot, guess
what, this toot function
27:23 - that I've written async,
remember when I said
27:25 - it natively returns a promise,
27:26 - well by the way, I said
return right down here
27:29 - so this thing right there is
the promise it's returning
27:33 - and I actually might, I
could configure my own object
27:36 - which could be kind of
interesting, like what if I said,
27:40 - return, I could just say
something like success true
27:46 - and status,
27:49 - status behold my beautiful tree, whatever,
27:54 - and I could just say angle, whatever,
27:55 - I could put angle
27:57 - and then that angle there.
27:58 - I could actually configure an object
28:00 - and I could pull stuff
out of the response there.
28:02 - I could return that and
then I would say then,
28:08 - then response,
28:10 - I can't spell today, I
mean I can never spell,
28:13 - console.log that
response, catch any error,
28:19 - consol.error error.
28:23 - And this needs a period
here and I need to hit save
28:27 - and something's wrong,
oh there's too many dots.
28:30 - Too many dots, Mozart, too many dots.
28:32 - Still too many dots?
28:35 - (ding)
Okay.
28:36 - It's not too many, it was too
many dots but I fixed that.
28:38 - The issue is the dot
goes on the next line,
28:41 - that's the convention,
that's what it's looking for.
28:42 - There, now it's formatted
the way I want it to be.
28:45 - So I still have to engage,
oh boy, with this idea
28:49 - of a promise but I can
basically wrap that all
28:52 - into this one asynchronous
function and people on the chat
28:55 - are telling me I can actually,
I don't need to do the then
28:58 - and catch in this way
'cause I could actually put
28:59 - a try and catch inside of here
but aah, one step at a time.
29:04 - I think I might be done.
29:06 - All right let's see,
let's see what happens.
29:11 - Okay, no, response, await, ooh.
29:14 - So I have also reused so I
should call this response one,
29:19 - response two, maybe there's
a more thoughtful way
29:22 - of doing this, response three.
29:24 - I didn't actually use the
response but whatever.
29:29 - There we go, start the
bot, make the image,
29:32 - the angle's 72, finished,
params is not defined,
29:35 - oh I was so close, I was so close.
29:39 - Params one, params two, params two here.
29:44 - And I think params one there.
29:46 - All right.
29:50 - (light drum roll)
29:53 - I'm feeling pretty confident.
29:58 - Aah, success, angle is 56 slash finished.
30:03 - (buzzer buzzing)
30:06 - That's a little weird but let's see here.
30:08 - Let's go to the bot.
30:09 - Look, behold my beautiful tree
30:11 - with angle 56 finished degrees.
30:14 - Okay, so there's a little
bit of awkwardness in there
30:16 - in that the standard out
is just always giving me
30:20 - the word finished so because
I would like this to work,
30:24 - work without that, I think,
guess what I'm going to have
30:27 - to do is, is that just
something that happens
30:32 - with processing java?
30:35 - Because I didn't write finished
anywhere in here, right?
30:40 - That's not a print line I put in here.
30:42 - So I think what I could
do is when that comes,
30:47 - the standard out comes,
I could say response,
30:51 - I mean I could just do
a substring, I could do
30:54 - a regular expression,
there's so many things,
30:57 - so many things I could do.
30:58 - Why don't I split it?
31:01 - Out = response, response
standard out split
31:07 - and I could just split
it by the line break,
31:11 - right, 'cause finish
comes after the line break
31:14 - and then, whoops, and then I
could just take the first one.
31:19 - So this split is a function
that takes a string
31:22 - and splits it up into
chunks based on a limiter
31:23 - and you could get really fancy with that
31:25 - but I think and then
this should just be out
31:29 - without the caps lock.
31:31 - I mean I should really test this
31:32 - but I'm going to have
to just rely on the fact
31:34 - that I think I wrote that code correctly.
31:36 - That's my way of testing it.
31:38 - Let's run this one more time.
31:41 - (light drum roll)
Undefined true angle 55.
31:44 - What's that undefined there?
31:45 - I liked seeing that.
31:49 - Oh there we go.
31:52 - (celebratory horn)
31:54 - Behold my beautiful tree
with angle 55 degrees.
31:58 - What was undefined?
32:00 - What did I console log
in an undefined way?
32:04 - Console log response standard out.
32:07 - Is that it?
32:08 - No, no, that's 10 finished.
32:12 - Wait, if it was 10,
why did this become 55?
32:16 - I'm so confused.
32:19 - (laughing)
Let's be a little
32:21 - more methodical here.
32:24 - Oh because, huh?
32:26 - Oh what am I looking at?
32:28 - Oh I did, aah, it does it twice,
I have it happening twice.
32:33 - Let's take that out.
32:34 - Apologies, everybody.
32:35 - This thing is happening twice 'cause I had
32:37 - the old code in there.
32:39 - I mean, I'm just going to delete that.
32:40 - Throw caution to the wind.
32:43 - What a little mess here.
32:44 - Okay, that's weird that it did that twice.
32:47 - So confused.
32:49 - Okay.
32:51 - (light drum roll)
32:53 - Angle 74, just did it once.
32:59 - (celebratory horn)
There we go.
33:03 - Okay one more thing that I need to do
33:05 - just so this becomes a true bot
33:07 - is what I want to do is I
want to say set interval
33:12 - and have it do this thing
that it just did there
33:18 - every, well, let's have
it do it every five sec,
33:21 - every 10 seconds right now.
33:23 - I don't want it to do it every 10 seconds
33:25 - but just to,
33:29 - what's wrong here?
33:30 - This is opening the
function, that's closing it,
33:33 - no, there's no parentheses there.
33:36 - That's the end of the
function then this, then this.
33:39 - We're good, we're good, this is it.
33:41 - Oh but look out weird, I hate,
I don't like this at all.
33:44 - This is making me crazy.
33:45 - I'm going to do, I'm going to do this.
33:47 - I mean it's so silly.
33:49 - Function tooter and then I'm going to put,
33:51 - this is, I'm a ridiculous person.
33:55 - I'm going to put this in ooh,
no, aah, oh, help me, help, help,
33:58 - I'm going to get this and put this
34:01 - and then I'm just going
to name my function.
34:03 - Forget about this anonymous stuff.
34:06 - This is what I want, right?
34:07 - I have a separate function which calls
34:10 - my asynchronous function,
does the then the catch
34:12 - and then I'm going to have
that happen every 10 seconds.
34:16 - Okay.
34:18 - By the way someone in the
chat, k1nhjulian is asking
34:22 - would it be possible to
ask the botch to create
34:25 - a tree with a specified
angle, yes and that is what
34:27 - I'm going to do in a followup tutorial.
34:29 - You'll see that in the next one.
34:30 - Okay here we go.
34:36 - (light drum roll)
And we have
34:40 - a tree, oh no, I forgot,
it's going to wait,
34:43 - so one thing about set
interval, womp womp.
34:46 - (sad horn)
34:48 - Which is that, I mean it works,
34:50 - okay, I'll just keep going now.
34:52 - Set interval will not execute
that function immediately,
34:53 - it will wait the amount
of time before doing it
34:56 - the first time but now we did
it twice every 10 seconds,
34:59 - first one was angle 44 and
the second was angle 28.
35:04 - We can wait 10 seconds,
you can watch this video
35:06 - for 10 more seconds, we
could also speed this up now,
35:08 - let it happen four or five
times but I think that's good.
35:11 - So let's just go and check,
35:13 - here, and we can see 83
degrees, 28, 44, there we go
35:18 - and 44, 28 83.
35:20 - 44,
35:22 - 28,
35:22 - 83.
35:23 - Wonderful, okay, so this is working.
35:26 - You know, now of course, I don't
want to leave it like this,
35:29 - right, having a bot post every 10 seconds,
35:32 - no one wants to follow a bot
that posts every 10 seconds.
35:34 - Maybe I want it to just
once a day it's going to do,
35:37 - maybe once an hour might be the maximum,
35:39 - the most I would do but let's just,
35:41 - if I want to do it once a
day it would be 24 hours
35:44 - times 60 minutes, there's
60 seconds in a minute
35:48 - and 1000 milliseconds in a second.
35:52 - So this would now be
but, I wouldn't want it
35:55 - to wait a whole day so I
probably want to call it once.
35:58 - So I'll call it once,
then set the interval
36:00 - and I'm sure there's a
more elegant way to do that
36:02 - that all of you will someday
will write in the comments
36:07 - and here we go and ah, ooh,
ah, ooh, node bot, aah,
36:11 - bot.js, here we go.
36:13 - It does the first one and then now,
36:15 - we're going to wait, 24,
we're going to wait 24 hours,
36:18 - I'll wait, yes we'll wait
and then in 24 hours,
36:22 - I'll still be standing here.
36:24 - I could technically go home, have dinner,
36:26 - go to sleep, come back, this
laptop would still be here
36:30 - and it would do the next one.
36:32 - We're just going to have to believe
that that's going to happen.
36:34 - Again, there is a question of well where
36:35 - would I actually want to deploy this?
36:37 - I've got to talk about that in a separate
36:38 - but the quick answer is
you're going to want to find
36:40 - server, maybe you have one
through a hosting company,
36:44 - maybe you happen to have a
computer that's always on
36:46 - in your home or raspberry pie that can act
36:49 - as a server but you need somewhere where
36:51 - you can just let it run
over and over again.
36:53 - Forever.
36:54 - Okay, so thanks for watching this video.
36:56 - (ding)
Making a Mastodon image bot.
36:58 - And what I'm going to do, I
want to do one more tutorial
37:01 - because how would you
do it so that if someone
37:05 - at mentions the bot,
let's say with an angle,
37:09 - then the bot replies back
with a tree with that angle.
37:12 - Let's see if we can make that work,
37:14 - that's going to be fun.
37:15 - Okay, see ya in the next video.
37:17 - (upbeat music)