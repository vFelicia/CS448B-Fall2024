00:01 - This video, I would like
to talk about something
00:03 - called a repeat loop.
00:04 - This an essential control
structure in programming
00:07 - that you need to do
all sorts of things.
00:10 - If you've been working
with code and drawing,
00:12 - it's probably become recently,
immediately clear what you
00:15 - might need a repeat loop for.
00:16 - And I have a demonstration
of that right here.
00:19 - So if you see this canvas here,
there are 1, 2, 3, 4, 5, 6,
00:23 - circles there.
00:24 - Each circle is drawn
with a single call
00:26 - to the ellipse function.
00:28 - And this works fine.
00:29 - You want six circles
on the screen,
00:31 - call the ellipse
function six times.
00:33 - But if you want to have
60 circles on the screen,
00:36 - or 600 circles on the
screen, or space them closer,
00:40 - or do more stuff with them,
having an individual line
00:44 - of code for the
same thing that's
00:46 - repeated over and over again
is certainly not the route
00:50 - that you want to go.
00:51 - So this is exactly what
a repeat loop is for.
00:53 - And I said that a repeat
loop is a control structure.
00:56 - And in a previous
video, I looked
00:58 - at another control
structure known
01:00 - as a conditional statement.
01:01 - So that control structure
looked like this.
01:05 - If Boolean expression open curly
bracket close curly bracket,
01:11 - and if this is true,
this code is executed.
01:16 - And I'm going to
add something once
01:18 - and then we go to the
next line of code.
01:20 - This is how this particular
control structure
01:22 - worked, the if the conditional
statement control structure.
01:26 - So the control
structure of a loop
01:30 - is written just like
the if statement
01:32 - but with a different
keyword besides if.
01:34 - And now there's actually
two ways of doing it.
01:36 - The first way that
I'm going to show you
01:38 - looks very much like
the if statement,
01:41 - it's while Boolean expression.
01:45 - While this is true,
continue to do
01:49 - this code over and over and
over and over and over again.
01:53 - So I want to think about
this control structure.
01:56 - And I'm going to add
some things to the code.
01:58 - And we're going to add
this control structure then
02:00 - into the code.
02:01 - So these are really identical
in their syntax and form.
02:05 - The differences are,
if here, while here.
02:09 - If this is true, do this.
02:11 - While this is true, continue to
execute this code over and over
02:14 - again.
02:14 - Which opens up a little
bit of a dangerous fact.
02:17 - It's possible your program could
get stuck inside this loop.
02:20 - And this is
something we're going
02:21 - to have to deal with immediately
right now as we start to work
02:24 - on this problem some more.
02:25 - So come on over here.
02:27 - So let's look at
this code again.
02:29 - So one thing we
notice about this code
02:30 - is I didn't use any variables.
02:32 - So I think it would be
advantageous to use a variable.
02:35 - And what I'm going to do is
I'm going to start a variable.
02:38 - And I'm going to call it x.
02:41 - x equals 0.
02:42 - Now I declared it up on the top.
02:45 - In the previous videos that
I've made in all the examples,
02:47 - the variables have always
been declared at the top.
02:50 - This is because I've been
using these variables
02:54 - as so-called global variables,
meaning I could just
02:57 - use them anywhere in
my code and the program
02:59 - remembers them over and
over again forever and ever.
03:02 - Here is a case right now where
actually what I want to do
03:06 - is just use a variable just
for this section of the code.
03:09 - And I don't need to remember
it any other time when
03:11 - mouse is pressed or back and
set up or anything like that.
03:14 - So actually, I'm going
to take this opportunity
03:16 - to show you something
called a local variable.
03:19 - And if you declare a variable
inside of a function,
03:23 - I'm inside this draw
function, this variable right
03:26 - now is a local variable.
03:29 - It's only available for the
purposes of this draw function,
03:33 - OK.
03:34 - So now, what do I want to do?
03:37 - I want to put x here.
03:38 - And I could say x
plus 50, x plus 100.
03:41 - I could keep doing that, and
we'd have the same program.
03:44 - I just used x instead of 0.
03:46 - But what I actually want to
do is show you, what if I just
03:48 - have x everywhere?
03:53 - If I have x in all of
these lines of code, now
03:56 - what do I have?
03:57 - I have one circle at 0.
04:00 - Because I drew the same ellipse
at 0, 0, 0, 0, 0, 0, 0, 0,
04:03 - 0, over and over again.
04:04 - So what if I were to now
add after each one, x equals
04:07 - x plus 50?
04:09 - So let's move x by 50
after each ellipse.
04:13 - And I'm also going
to do something,
04:14 - I'm going to add
some line breaks.
04:16 - Whoops, wrong place.
04:19 - I'm going to add some line
breaks if I can manage this,
04:22 - just to sort of look at it
to see what is repeated, OK?
04:29 - And let's add a
line break here, OK.
04:31 - OK, so let's look at this now.
04:33 - I have these chunks,
ellipse, then add 50.
04:36 - Ellipse, then add 50.
04:37 - Ellipse, then add 50.
04:38 - Ellipse, then add 50.
04:39 - All of these blocks of code
are actually identical, right?
04:44 - Like, let me delete them and
just show you what I mean,
04:49 - right?
04:49 - So now let me run this
program, one ellipse.
04:53 - Now let me take these
two lines of code
04:55 - and just do paste, paste, paste,
paste, paste, paste, paste,
04:58 - paste, paste, auto format.
05:02 - Now I have all
these ellipse there.
05:03 - So now we really have the
same exact lines of code
05:09 - x like just over and
over and over again.
05:12 - There's got to be a way to
perform those lines of code
05:18 - over and over again.
05:19 - I just want to say
ellipse at x et cetera.
05:22 - And then I want to say
x equals x plus 50.
05:25 - This is exactly
what I want to do.
05:27 - I just want to do this
over and over again
05:29 - while something is true, OK?
05:32 - So let's think about that.
05:33 - We need to figure
out, when do I stop
05:35 - doing this over and over again.
05:36 - If I just wrote
true inside here,
05:38 - this loop would execute forever.
05:40 - And the program
would never stop.
05:44 - It would get stuck there.
05:45 - We'd never see
anything on the screen.
05:46 - What is my exit condition?
05:48 - Well, there is no
answer to this question.
05:50 - It's kind of up to you.
05:51 - And why am I even here
drawing circles on the screen,
05:54 - I'll never know.
05:55 - But presumably you have a
reason for learning programming.
05:58 - And you have an idea for
something you want to make.
06:00 - In this case, though, I
can make up something.
06:03 - I just want to keep
drawing circles until I
06:04 - get to the edge of the window.
06:06 - So what is my exit condition?
06:09 - My exit condition is, this
is the canvas, the exit
06:13 - condition I want to stop looping
when x is greater than width,
06:19 - right?
06:20 - This is when I want
to stop looping.
06:23 - But remember, the thing that
in here is when it's true,
06:27 - that's not when I stop looping,
that's when I continue looping.
06:30 - So I want to continue looping
as long as x is less than width.
06:36 - So as long as x is
less than width,
06:39 - I want to draw this ellipse
over and over and over again.
06:43 - OK, so let's come over
here and see that.
06:46 - So now I can take
all this nonsense
06:51 - and just leave this
important part.
06:54 - These are the two
lines of code that I
06:56 - want to repeat over and
over and over again.
06:58 - While x is still on
the screen, do this.
07:01 - Draw a circle, move over.
07:02 - Draw a circle, move over.
07:03 - Draw a circle, move over.
07:04 - So now I can add while
x is less than width.
07:10 - And then I need a
close curly bracket.
07:12 - And again, this is
a new block of code.
07:15 - This while loop is
a new block of code.
07:17 - It opens with a curly bracket.
07:18 - It ends with a curly bracket.
07:20 - And the convention is to
indent the inside just visually
07:22 - for a human being to
be able to see it.
07:24 - So now I'm going to run this.
07:26 - And we can see, there
are all the ellipses.
07:29 - Now if you look at this, you can
see it kind of-- the first one
07:32 - start on the left.
07:33 - One of them start at width.
07:34 - That's simply because I
have x is less than width.
07:37 - I don't know if width
is divisible by 50.
07:38 - I think it is.
07:39 - I could try less than equals.
07:41 - And then I kind of
get that last one.
07:42 - So the math here
matters, like where's
07:45 - exactly your exit condition
and that sort of thing.
07:47 - But now you can see, I've
drawn all these circles.
07:50 - So this is a good, nice start.
07:56 - However, somebody watching
this video, somebody out there
08:00 - in the world who may
be watching this video
08:01 - is going to say, why are you
bothering with this while loop
08:04 - thing?
08:04 - Nobody ever uses the while loop.
08:06 - Well, I personally
felt like it was
08:08 - worth five minutes of our
time, your time, my time,
08:11 - to look at the while loop.
08:12 - Because it translates
so nicely from this if
08:16 - statement to while.
08:17 - So what happened here, if
this is true, do this one.
08:20 - While it's true, do this
one over and over again.
08:22 - But if you'll notice,
this particular while loop
08:26 - has three elements to it
that I want to note to you.
08:30 - The first one is, we start
with initializing a variable,
08:33 - var x equals 0.
08:35 - The second thing is we
test for an exit condition.
08:38 - x is less than or
equal to width.
08:40 - And the third thing
I want to note
08:42 - is that we have this
incrementation operation.
08:44 - x goes up by 50.
08:47 - So those three elements
are so common in loops
08:52 - that there's an entire other
looping structure, control
08:55 - structure called a for loop that
puts all those things together
08:58 - as just 1, 2, 3.
09:00 - So I want to redo this exact
same program with a for loop
09:03 - and show you what I mean.
09:08 - So let me erase all this.
09:11 - This will take me a second.
09:13 - Think to yourself
about something.
09:15 - So I had three things.
09:16 - I had an initialization,
var x equals 0.
09:20 - I have a Boolean test,
is x less than width?
09:25 - And then at the end of the
loop, I had an incrementation
09:29 - operation, x equals x plus 50.
09:32 - So what I'm suggesting
to you is this
09:34 - is such a common kind of loop
that the loop you will most
09:38 - likely use in almost
all of your programs,
09:40 - and I would suggest you doing
an exercise with, is a for loop.
09:43 - For var x equals 0.
09:49 - x is less than width.
09:52 - x-- oh, I'm going to go off of
the screen-- equals x plus 50.
09:56 - Can you still see that
parentheses, curly brackets?
10:00 - OK.
10:01 - So this is taking everything
from this while loop
10:06 - and condensing it.
10:07 - So the loop starts
by initializing x.
10:10 - Every time through the
loop, x goes up by 50.
10:12 - And every time
the loop finishes,
10:15 - it checks if the exit
condition has been met.
10:17 - In which case, it
then exits the loop.
10:21 - So we can now go
back to this program.
10:25 - And what I'm actually going to
do is I'm going to leave this,
10:28 - I'm going to put this at all
the circles at x equals 100.
10:34 - And I'm going to rewrite
this same loop down here
10:37 - with a for loop.
10:38 - So I don't need to
paste it, actually.
10:40 - I'm going to say
for var x equals 0.
10:45 - x is less width.
10:47 - x equals x plus
50 curly bracket.
10:51 - And let me widen the editor here
so you can see the whole thing.
10:55 - And then all I need is the one
line of code, the thing that I
10:58 - want to happen during
this counting looping
11:02 - operation, which is that I
want to draw the ellipses.
11:05 - I'm going to draw them at 300.
11:06 - So let's make these some color.
11:11 - And let's make these
some other color.
11:17 - And let's run it.
11:19 - So we can see 0 and I. I
guess I'll do the x less than
11:22 - or equals for both of them.
11:24 - And you can see now.
11:25 - So you can see both loops
perform exactly the same task.
11:29 - This is a bit more
explicit, because you
11:31 - can kind of read the
order more obviously,
11:32 - start with x equals 0.
11:34 - While is less than width, draw
this circle and go up by 50.
11:37 - But the exact same
thing is happening here.
11:39 - And it's so common that
being able to condense this
11:41 - into one line of code is
something that you might do.
11:43 - Now, inevitably, you're
going to see other examples
11:46 - around the internet.
11:47 - And one thing that I
think I should point out
11:49 - is this kind of operation,
x equals x plus 50
11:53 - is also so common that
programmers have developed
11:56 - a shorthand for
it, which I think
11:58 - is worth noting right now, OK.
12:02 - So there is, it's often you
might see a line of code
12:05 - like this.
12:06 - X equals x plus 50.
12:09 - This line of code can
be written as shorthand,
12:12 - as x plus equals 50, OK?
12:16 - So that's one thing to notice.
12:18 - You might see this in
examples that you look at.
12:20 - This is certainly more
explicit and more long-winded.
12:23 - But this is just as accurate
as the exact same operation.
12:25 - The other thing you might see
is when you have the number one,
12:28 - x equals x plus 1, this
is written shorthand
12:32 - as x plus plus.
12:34 - And if you ever
thought about it,
12:36 - there's a programming
language called C.
12:37 - And there's a programming
language called c++,
12:39 - which is like the
next version of C.
12:41 - That's not exactly
accurate but close enough.
12:43 - But this is also
such a convention
12:45 - that it sort of made our way
into kind of vernacular speak.
12:49 - I don't know whose
vernacular speak.
12:50 - I don't even know
what vernacular means.
12:52 - I really should have stopped
this video a while ago.
12:54 - So this is just a little tidbit.
12:56 - You might see that if I were
to add that to this example,
13:00 - I would change this
to x plus equals 50.
13:03 - And then I would run it again.
13:05 - And we have still the
same exact result.
13:07 - So what I would
say to you is, try
13:10 - to think, try lines,
try rectangles,
13:12 - try to control your loops.
13:14 - What if you have things
moving down or diagonally?
13:16 - Or what if, could
you change the color.
13:18 - Like, how would you have
each one of these shapes
13:21 - be a different color from bright
to dark from dark to bright.
13:24 - The map function that I
looked at in a previous video
13:26 - could be relevant.
13:27 - So try using a repeat loop
to create some pattern
13:30 - of repeating shapes.
13:31 - And the two other videos I
would like to make, one is I
13:34 - would like to look
at a nested loop
13:35 - to a loop within a loop
to draw a grid pattern.
13:39 - And also, I think I want to
talk about an array which
13:41 - is a list of variables, which
goes hand-in-hand with loops.
13:44 - I need to make that
video at some point too.
13:47 - Thanks, and this is
the end of this one.