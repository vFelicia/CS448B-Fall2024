00:01 - welcome this is the last video in
00:04 - chapter 8 about fractals and in this
00:06 - video we're gonna kind of cap everything
00:08 - off by looking at another way to
00:09 - generate fractal patterns and this we're
00:12 - gonna use something called an l-system
00:14 - what is an l-system l-system is named
00:17 - for the L for arrested Lindenmayer
00:19 - Hungarian botanist who I think in around
00:22 - 1968 introduced this idea of an L system
00:25 - while he was studying plant growth algae
00:27 - fungi how do them these sort of cellular
00:29 - systems how did all that stuff grow and
00:31 - get attached to itself so there's a
00:33 - wonderful book I believe it's out of
00:34 - print but I will show it to you right
00:36 - here called the algorithmic beauty of
00:38 - plants if you're interested in this
00:39 - stuff you must get this but you don't
00:41 - even need to buy it I should point out
00:42 - that this book in book is in its
00:44 - entirety is available online for free so
00:47 - I will include a link to that below but
00:48 - we're gonna we you know so this is a
00:50 - very rich topic in the sense that there
00:54 - are tons of different owl systems that
00:56 - you can make but we're gonna just look
00:58 - at the core elements of an l-system what
01:00 - is it how does it work and a couple
01:02 - examples in processing and from there
01:05 - that might launch you into all sorts of
01:07 - different possibilities so one of the
01:09 - things that's super interesting about L
01:11 - systems in terms of what we're doing is
01:13 - they in many ways have nothing to do
01:15 - with computer graphics whatsoever we're
01:16 - going to use them for as as to generate
01:19 - instructions for drawing but at their
01:22 - core and L system is really a grammar
01:24 - it's a rewriting system it's a way of
01:26 - looking at strings of characters and
01:28 - rewriting those strings of characters
01:30 - over and over go over and over again in
01:32 - a wait for it recursive way right we're
01:35 - going to apply recursion to text which
01:37 - by the way if you're interested in
01:39 - things other than computer graphics and
01:41 - algorithmic text this is an interesting
01:43 - thing for you to look at as well so an L
01:45 - system has an alphabet so we're gonna
01:51 - start with a simple one and alphabet is
01:53 - what are the characters that are allowed
01:55 - in this particular L system and we'll
01:58 - start with a very similar with just a
01:59 - and B it also has an axiom which is what
02:06 - is the original what is the generation 0
02:08 - sentence that we're going to start with
02:10 - we're going to recursively make sentence
02:12 - after scent
02:13 - from generation to generation just like
02:15 - we've done with all these drawing things
02:16 - we do it with text so what do we start
02:18 - with we're gonna start with a and then
02:20 - it has a rule set right just like when
02:23 - we did the Cantor said the tree the Koch
02:27 - curve we had these production rules a
02:29 - line has two lines attached to the end
02:31 - those lines have two lens attached the
02:33 - end we're going to have the same
02:34 - production rules but for text so what
02:37 - what are some rules we're gonna say hey
02:40 - the character a should turn into a B a
02:44 - and we couldn't have one or more rules
02:47 - gonna do a slightly complicated one for
02:50 - dramatic effect as you're gonna see in a
02:51 - moment we could say the character B
02:53 - should become B be V so let's look at
02:58 - what happens when we start with a so a
03:01 - is generation zero now we're gonna do
03:04 - this once generation one a becomes it
03:07 - looks doesn't look like a 1 a becomes a
03:10 - be a we all right we're on okay
03:14 - hey becomes a be a a be a now we're
03:18 - gonna do generation 2
03:19 - okay be a becomes a be a write this big
03:27 - this is that b becomes b b b and a
03:31 - becomes a the a oh come on let's do it
03:35 - one more time
03:37 - generation 3 gonna start over here a
03:40 - becomes a B a B becomes b b b a becomes
03:45 - a be a oh my goodness B because b B I
03:48 - can do this I can do this right I've got
03:52 - 9 B's and then a b a b b b I probably I
03:57 - ran out of space you can't see me
03:59 - anymore but look we can see what we're
04:00 - doing and okay great this is not I mean
04:03 - sometimes it can be fun like if you know
04:05 - a lot for me this is fun to do with a
04:07 - marker but you can see here how a
04:10 - computer program that's gonna work with
04:12 - strings and make new strings from
04:13 - generation to generation is gonna be
04:15 - much more effective but I just want to
04:17 - pop say for a moment what remember we're
04:20 - you know as much as there are tons of
04:23 - applications of this we are looking at
04:24 - this in particular for draw
04:26 - patterns in our processing window so
04:29 - what how are we gonna get a pattern from
04:30 - all this text the thing we need to think
04:32 - about is what if these characters were
04:35 - instructions for drawing for example
04:38 - what if I said to you a means draw a
04:44 - line and what if I said B means move
04:50 - forward without drawing so let's look at
04:56 - what this is a translates to this a ba
05:00 - translates to this a b a b b b b ba ba
05:04 - translates to I really didn't need to go
05:08 - to the third generation line move
05:10 - forward line the forward before before
05:12 - line before before word look familiar to
05:19 - you this is generation 3 this is
05:22 - generation 2 this is generation 1 right
05:26 - does this look familiar to you it should
05:28 - what we are doing is making the Cantor
05:30 - set so we can actually have correct that
05:32 - was kind of roundabout but what we did
05:34 - is we just define the Cantor set in
05:37 - terms of strings of characters right you
05:40 - could see these strings of characters
05:42 - exhibit the pattern that the Cantor set
05:45 - exhibit whenever a is aligned and B is a
05:47 - blank space and I didn't necessarily
05:49 - draw this to scale perfectly one of the
05:51 - things in else isms that we're gonna see
05:52 - is if we're using these instructions for
05:55 - drawing from generation to generation
05:56 - each line segment needs to get a little
05:59 - bit shorter right so we have this you
06:02 - can see how the line segments are
06:04 - getting shorter from generation to
06:05 - generation if I'm if this is really if I
06:08 - were to kind of have done this slightly
06:09 - better so this is where I think to
06:12 - myself I'll just start this video over
06:13 - and I'll make it more perfectly aligned
06:15 - on the board but I think you get the
06:16 - idea right so what this is pretty
06:19 - exciting we now have an l-system
06:21 - which is these strings of characters
06:23 - which we can translate these characters
06:25 - into instructions for drawing and
06:28 - generate these patterns now this isn't
06:30 - accidental this you know this was
06:32 - designed to generate the Cantor set you
06:34 - can come up with all sorts of random
06:36 - alphabets and random axioms and random
06:39 - rule sets and see what
06:40 - results we you get but what I'm going to
06:42 - show you are some particularly some
06:44 - known L systems that will give you
06:47 - fractal patterns well so let's briefly
06:50 - talk about how the code implementation
06:52 - for this needs to work I don't know if
06:57 - you remember if you watched a couple
07:00 - videos ago we talked about this
07:02 - ArrayList technique where we kind of put
07:04 - an object in the ArrayList and then we
07:06 - iterate through any objects that are in
07:08 - the ArrayList and create new objects
07:10 - that go in that same ArrayList or going
07:12 - to a new ArrayList we've done it gets
07:13 - replaced right this idea of recursively
07:15 - iterating through a list of things that
07:17 - make more things is the same list okay
07:21 - so that's what we did before we're going
07:24 - to do the same thing with strings right
07:25 - we have some ArrayList essentially that
07:28 - has one character in it and now the next
07:31 - generation we need to say hey there's
07:32 - one character in it let's put these
07:36 - three characters in it oh then we need
07:39 - to do is say for this one we're going to
07:40 - put those three characters in it for
07:42 - this one we're going to put those three
07:43 - characters in it and for this one we're
07:45 - gonna put these three characters in it
07:46 - so the couple of the things that I
07:48 - should note is the order of the
07:50 - characters actually matters right
07:51 - because things are ultimately gonna be
07:52 - instructions for drawing but it's just
07:55 - we're using the same exact technique
07:56 - this list with information and each
07:59 - piece of information kind of gives birth
08:01 - to new pieces of information and the
08:04 - ArrayList grows and grows and grows but
08:06 - instead of using an ArrayList we're
08:08 - gonna actually use something called a
08:09 - string buffer now in truth you know this
08:13 - probably merits me pointing towards a
08:16 - video and there's a tutorial in the
08:17 - processing website that I'll try to link
08:19 - to about how to work with strings and
08:20 - processing you don't really need a
08:23 - string buffer you could just use a
08:24 - regular string a string as an object to
08:26 - describe an array of characters but this
08:29 - is a moment in time we're using a string
08:31 - buffer could makes good sense because
08:34 - even though as we do this on the board
08:35 - our string might only have like 50
08:37 - characters in it as soon as we go and
08:39 - run the processing sketch you're gonna
08:40 - see the string could have thousands and
08:42 - thousands up to you know hundreds of
08:44 - thousands of characters in it
08:45 - potentially if it's a very elaborate
08:46 - drawing stead of drawing instructions a
08:48 - string buffer is very very efficient for
08:50 - manipulating strings and what it has in
08:53 - it
08:54 - it has a method called append which is
08:58 - kind of going to be like adding to an
08:59 - ArrayList
09:00 - so we'll start we have a string we
09:02 - create a new string buffer for every
09:04 - string for every character in our
09:06 - original string we start appending to
09:08 - that string buffer new strings of
09:10 - characters so let's take a look at how
09:12 - this actually works in code so here I
09:16 - have that method by the way which is
09:18 - that we start with we start with a
09:23 - current string right we have a current
09:25 - string a this is exactly if you look at
09:27 - all of our previous examples we had an
09:29 - ArrayList current for all the Koch lines
09:31 - and then we made an ArrayList next for
09:34 - the next generation of Koch lines we're
09:35 - doing the same thing here the difference
09:37 - is the the thing that's next is a string
09:41 - buffer so as we go through the current
09:43 - string we say hey did we find an a give
09:46 - us an a B did we find a B give us an A
09:49 - and you know I should probably make this
09:51 - the same thing we just did on the board
09:54 - right if we find an a give us an a B if
09:58 - we find a B give us a BBB right and then
10:01 - at the very very end when we're done the
10:05 - current becomes that next string buffer
10:07 - so the string buffer to convert it back
10:10 - to a regular old good old-fashioned
10:11 - string we just say the string buffer dot
10:13 - to string and we set that as current and
10:15 - increase the count of generations so if
10:17 - I run this I'm gonna scroll down all
10:20 - this only does stuff in the console but
10:23 - we can see here let me zoom way more in
10:25 - on this so you can see it you can see
10:29 - here generation 0 is a I'm gonna kind of
10:31 - stand over here and I'm gonna click
10:32 - generation 1 is a be a then we have that
10:36 - and we can see like very quickly you
10:39 - know 10th
10:40 - these are massively huge like long
10:43 - strings so the point of this isn't
10:45 - necessarily what we're doing is to use
10:47 - the text although you could really
10:48 - imagine are you constructing some type
10:51 - of kind of poetic like text or some
10:55 - algorithmic text through some set of
10:56 - logic are these are the characters were
10:58 - is the L system a series of words
11:01 - instead of characters the could use
11:04 - iconography in some type of way there's
11:06 - so much you could do with Elsa
11:07 - but again we want these to be
11:09 - instructions for drawing so I haven't
11:11 - taken this further and exercise you
11:12 - might take up on yourself as actually
11:14 - render the Cantor set from these L
11:16 - systems if the character is a draw a
11:19 - line if it's B move forward without
11:20 - drawing the line but we have to ask
11:22 - ourselves a question what do we mean by
11:24 - draw a line or move forward without
11:26 - drawing a line turns out that a lot of
11:29 - the L systems have these this type of
11:31 - language draw line move forward and turn
11:34 - the turtle graphics the language of
11:37 - turtle graphics so let's take a moment
11:39 - to talk about that and see how that
11:41 - works in an L system so okay so let's
11:45 - not use a and B anymore
11:47 - so let's let's remember back to a time
11:50 - which I don't know that I ever actually
11:51 - did this I remember learning like basic
11:54 - I did a lot of Basic programming when I
11:55 - was a kid but you or if somebody in the
11:58 - world definitely used the logo
11:59 - programming language and move Turtles
12:01 - around the screen what were some things
12:03 - that Turtles could do turtles could draw
12:07 - a line alright so if this is the window
12:10 - what that means is here's my I can't
12:12 - draw a turtle here's my turtle it might
12:15 - move forward and draw this line while
12:17 - it's moving forward and now it's here
12:19 - turtles could also just move forward
12:24 - which means they move forward but don't
12:26 - actually draw a line so you can imagine
12:28 - that as just moving forward and now the
12:30 - turtles here so the line was drawn here
12:33 - now before other things they can do is
12:35 - they can turn right or they could turn
12:40 - left so turning right we mean go this
12:43 - way turn left would begin this way that
12:45 - that turn right could be at an angle 90
12:47 - degree angle 45 degree angle etc so
12:50 - these are the basic elements of turtle
12:52 - graphics an l-system could have as its
12:55 - alphabet and F which means draw a line a
12:58 - G which means move forward without
13:00 - drawing line a plus which means turn
13:03 - right look a - which means turn left we
13:07 - could use these as the characters in our
13:09 - health system and we could create rules
13:11 - that generate various patterns that a
13:14 - turtle could draw that are fractal but
13:17 - this is like a basic a turtle graphics
13:21 - engine but it would be nice to be able
13:24 - to if you imagine for a second
13:26 - a turtle taking this path to be able to
13:33 - maybe remember various points along the
13:36 - path and if it's over here it could then
13:38 - pop back to here and start going in this
13:41 - direction right so a turtle as it's
13:43 - going could save where it was draw a
13:45 - little bit further then come back and
13:46 - draw a little bit further the other way
13:48 - after all if we're gonna draw if we're
13:50 - gonna draw some type of fractal pattern
13:51 - we might need to branch off one way come
13:53 - back branch the other way this is
13:55 - exactly what we did with with our tree
13:58 - example previously so we might like to
14:01 - introduce this character which means
14:03 - push matrix or really I kind of like
14:08 - change the language here which means
14:10 - save where you are save look state which
14:15 - means where you are and what direction
14:16 - are you pointing and this could mean
14:19 - these this characters mean restore state
14:24 - so now if we if these are the characters
14:28 - in our L in our L system if these are
14:30 - the the members of the alphabet of our L
14:32 - system we need to write a turtle object
14:35 - that can parse a string and call the
14:37 - right processing functionality do each
14:39 - one of these things right
14:40 - this would call line and translate this
14:44 - would also just call translate this
14:46 - would call rotate rotate push matrix pop
14:49 - matrix let's take a look at that so I'm
14:52 - back over here and now this by the way
14:54 - was example eight point eight and now
14:56 - I'm going to example eight point nine
14:58 - which is already open and I'm just gonna
15:01 - go to the turtle class and what I want
15:03 - to look at is this set of code right
15:06 - there is a string called to do dot
15:09 - length let's look at every character in
15:11 - the string and I guess I didn't do this
15:13 - correctly now we have to fix this
15:15 - example if that character is an F in my
15:17 - scenario if it's an F or a G it's
15:19 - drawing a line and transit and moving
15:21 - forward so technically speaking if I
15:24 - wanted to be accurate according to what
15:26 - I just did on the board over there else
15:28 - if C equals G
15:34 - move without drawing the line and it
15:37 - needs to go there okay right so f means
15:42 - draw a line and move to the end of the
15:44 - line G means just move that length C is
15:47 - rotate minus sorry plus is rotate
15:50 - minuses rotate the other direction and
15:52 - open square bracket push matrix close
15:55 - square bracket is pop matrix so you can
15:57 - see this and you could probably make the
15:58 - argument that this should be a switch
15:59 - statement but I which is another type of
16:01 - syntax for a conditional statement but
16:04 - just to kind of keep these examples very
16:05 - basic I'm just using if else--if so this
16:08 - is parsing that string look at all of
16:10 - the characters and calling the correct
16:12 - drop piece of drawing functionality so
16:14 - this example is essentially the previous
16:16 - example which makes those l-systems
16:18 - strings but it adds on one layer the
16:21 - turtle can then read that string and
16:23 - draw according to it so what is an
16:25 - l-system that we might use there's a lot
16:28 - of stuff in the comments here which I'm
16:29 - going to remove let's look at this so
16:33 - this by the way is how this example
16:37 - defines an l-system
16:38 - we have a rule object and we have an
16:40 - array of rules and we have you can see
16:43 - this rule takes an F and turns it in
16:45 - this crazy string so how did I come up
16:48 - with that crazy string I found that in
16:50 - that book or I think actually I found a
16:52 - lot of these from the computational
16:53 - beauty of nature book chapter over the
16:56 - correct chapter number which which has a
16:59 - nice section about L systems in a whole
17:01 - lot of example scenarios okay so this L
17:04 - system if we run it we can see okay
17:08 - there is F right that's just an F draw a
17:11 - line straight from the bottom up and you
17:13 - know what I would like to do I apologize
17:15 - I would like to set the stroke weight to
17:20 - two just to make it a little bit thicker
17:22 - I think you'll be able to see it better
17:23 - right this is the this is just plain old
17:27 - F now look that's the first generation
17:30 - which you can imagine is f maybe rotate
17:33 - draw a line wrote it the other way draw
17:35 - a line wrote to the other dry line pop
17:37 - back then row to the left draw line
17:39 - rotate up draw a line rotate to the
17:40 - right draw line right now let's look at
17:42 - another generation oh we can see how
17:44 - this is being applied over and over here
17:46 - now as I click the mouse that go from
17:47 - Jenner
17:47 - generation and we can see we have a
17:49 - fairly sophisticated tree like pattern
17:52 - which is much more complex than what we
17:54 - did without the L system so even though
17:57 - all of these examples we could do it's
17:59 - just a recursive function or we could do
18:01 - with an L system sometimes the kind of
18:03 - mechanics of the L system allow us to
18:05 - more easily generate this pattern the
18:07 - great thing about the L system too is we
18:09 - have the entire instructions for drawing
18:12 - this encoded into a string so I'm
18:14 - drawing the whole thing at once but
18:15 - there's no reason why I couldn't draw it
18:17 - character by character and animate that
18:19 - for you to show how this tree grows
18:21 - which would be also a great exercise to
18:23 - do or another example that I should make
18:25 - okay
18:26 - so now that we've seen this there are
18:27 - this is just one scenario and you know I
18:31 - guess I should mention right what what
18:34 - is an L system object it has a string
18:36 - which is its current sentence it is an
18:37 - array of possible rules which say what
18:39 - characters become what and it has a
18:41 - generation it's keeping track of the
18:42 - count and a rule is really really simple
18:45 - a rule is just a character that becomes
18:48 - a string this is a becomes a b a b
18:51 - becomes b b b so these are some simple
18:53 - classes to manage the elements of the L
18:55 - system I'm going to open up a couple
18:59 - other ones just so you can see here is
19:01 - another L system right maybe this looks
19:04 - kind of similar to you it's pretty
19:06 - different you can see also the axiom is
19:08 - F minus F minus F minus F so when I run
19:10 - this one we actually can't see it but
19:12 - there is an axiom which is drawing a big
19:14 - square right if we start if we say move
19:17 - forward turn left move making a big box
19:26 - that's what that axiom does but as I
19:28 - click we can see what are we getting
19:30 - take a look at this and like you know
19:32 - try to make this fractal pattern without
19:34 - an l-system you could do it but the L
19:37 - system is is a nice way of doing it I
19:38 - forget what this is called maybe it has
19:40 - sponge some that some sort of sponge
19:42 - merge and mercer spun somewhat correct
19:45 - me ok and the last one I'll show you is
19:47 - just the sierpinski triangle here are
19:50 - the rules for making the sierpinski
19:52 - triangle where we have F and G and and
19:56 - we can see what we get right and there's
20:00 - our serpents
20:01 - triangle which we have now done a
20:02 - zillion different ways we did this with
20:04 - cellular automata we did it with like
20:06 - this crazy recursive circles that that
20:08 - actually made that pattern now we're
20:09 - doing it with an l-system
20:10 - so you can see all of these systems can
20:13 - generate these patterns and it's less
20:15 - about again I guess I should finish with
20:17 - this what's important here is not hey
20:20 - you can use the sierpinski triangle as a
20:22 - design element and everything you make
20:24 - it's more about here are a bunch of
20:26 - strategies and techniques for using
20:28 - recursive functions to create designs
20:30 - it's up to you now to figure out what
20:33 - design do you want to make could you
20:35 - actually create your own rules for an
20:37 - l-system and interesting idea is
20:39 - actually to generate random l-systems
20:41 - right random alphabets random rules
20:43 - you'll see you mostly get a lot of noise
20:45 - and junk but in there there might be
20:47 - some gems is there a way you could find
20:49 - those gems maybe you could evolve
20:51 - l-systems which is kind of a little
20:53 - foreshadowing to the next chapter we're
20:54 - gonna look at genetic algorithms and
20:56 - evolutionary systems okay so hopefully
20:59 - you found this helpful and I will
21:01 - provide a lot of links below and things
21:03 - to the stuff that I talked about that
21:05 - will hopefully also be helpful and there
21:07 - we go