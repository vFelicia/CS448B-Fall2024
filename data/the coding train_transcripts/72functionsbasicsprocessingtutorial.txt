00:00 - Okay, here. We are we are now going to talk about functions, and what do we mean by functions?
00:06 - Do we know what functions are is this something we're even familiar with? In fact yes, let's just begin here
00:12 - umm a simple little place, in a simple little place where we just wrote something like this:
00:17 - background(0);
00:20 - This is us calling a function. We, at one point, we might have called it a command, but really it's a function.
00:27 - We're calling a function. What function are we calling? It has the name background. It needs arguments.
00:32 - Maybe we say background zero, for a black background, 255 comma zero comma zero for a red background, etc etc...
00:38 - This is the function we're a calling.
00:40 - Where does that function come from? Well it comes from Processing.
00:44 - But it doesn't just sort of exist by magic or just because: well of course you say background, you get a background. It exists because
00:51 - somebody, somewhere, perhaps who goes by the name Ben Fry.
00:56 - Defined this function.
00:57 - Somebody defined what it means, what code should be executed when
01:02 - you, the Processing user, the programmer, the person writing your Processing code, call the function background.
01:08 - What would happen if... and then the same thing is true for if I wrote rect.
01:14 - rect(0,0,100,100);
01:18 - How does this exist because somebody defined the function rectangle. rect(). Okay, what if I were to write this: flower....
01:27 - flower(300, 20, 10, 10, 10, 10);
01:34 - That must be nice we could write that code and then we get a lovely flower in our program wouldn't that be nice?
01:40 - Let's go in fact run this for a moment and see what happens.
01:43 - Going to make a new sketch here. We still have our little bouncing ball. We'll come back to it
01:47 - I'm going to make a new sketch here
01:50 - and say ok...
02:00 - I know I could say background(0); and now I could say flower
02:05 - 100 100. I'm really looking forward to seeing this beautiful flower...
02:15 - It's gonna be lovely... okay of course we know... that was
02:18 - a little bit of time wasted there
02:20 - Because you knew what was going to happen. The function flower, int, int, does not exist.
02:25 - It does not exist because no one has defined that function. I am here today to say to you:
02:31 - This is the moment where you can begin to define your own functions, right?
02:34 - We can start to say: You know what, nobody wrote a function for how to draw a flower in
02:38 - Processing. I'm going to write that function, and how do we do that? Well here is the syntax for how we do that?
02:44 - We want to write the flower function...
02:47 - We need to say this... well okay, so the way a function is defined is by saying first
02:52 - we have to give it a return type.
02:55 - Then we have to give it a name of the function.
02:59 - Then we give it some
03:01 - number of
03:03 - arguments, oh this is terribly disorganized the way I did this whiteboard right now. We're just gonna have to live with this okay
03:09 - Then we need an open curly bracket and then a close curly bracket.
03:14 - This is the syntax for how a function is defined.
03:19 - Return type, the functions name, some amount of arguments perhaps
03:23 - and then a curly bracket, an open curly bracket, this might be a little bit cut off by the camera,
03:28 - I apologize, and a closed curly bracket. This syntax might actually look a little bit familiar to you.
03:33 - I mean first of all we recognize this as a block of code. It has an open curly bracket and a close curly bracket. if statements, loops
03:40 - setup(), draw(), all these things, functions that we're defining, have, are blocks of code. Open curly bracket close curly bracket.
03:48 - Interestingly about this...
03:51 - This looks perhaps quite a bit like...
03:56 - Void draw, parentheses, parentheses, open curly bracket, close curly bracket.
04:04 - Return type is void, the name of the function is draw,
04:08 - parentheses for arguments, no arguments, open curly bracket, close curly brackets. So incidentally we have been defining our own functions.
04:15 - We've been defining the function setup() and draw(). Sometimes
04:18 - mousePressed(), sometimes keyPressed(), and the thing about this these are special functions. These are special functions that Processing asks us to define to
04:26 - control the flow of the program. We know a lot about this. Processing starts with setup(), draw() happens,
04:30 - it loops over and over again these are functions that we're asked to define and
04:35 - Processing calls them for us. What we're now doing is defining a new function, say called flower, that we want to call. Okay?
04:42 - And also, by the way...
04:44 - We now we're at this very exciting moment where we are going to learn
04:49 - what the word void means. You've been writing it all in your code wondering what that is... Well,
04:54 - what is void? Void is a functions return type in fact when a function has no return type you say void.
05:01 - So we're going to ask ourselves,
05:04 - in I think two videos from now, what it would mean for a function to have a return type.
05:08 - But having a return type, a function that has a return type gives something back. For example if you want a random number from
05:15 - Processing you say: "Hello, well you wouldn't say hello, you call the function... hello, no, you should always say hello,
05:21 - it's just polite but unfortunately it probably won't know what that means, but in any case you say a
05:26 - float R equals random. That function random returns a number back to you. The function rectangle does not return anything.
05:34 - Background does not return anything, it performs a task. So functions that perform a task that executes some code without
05:40 - returning an answer so to speak at the end of have a return type of void.
05:44 - I'm sorry for kind of going off on that a little bit
05:47 - we're going to get to the specifics of that in a video, which will be all about return types. For now
05:51 - we can say we're running functions without return types. They have a void return type. So to write that flower function... void
06:00 - flower
06:02 - now
06:03 - I'm going to simplify things and say just for the moment now, that we're going to deal with functions that have no arguments.
06:11 - Clearly it's useful to have a function with arguments. Draw a black background as opposed to just saying draw a background. Get to say, black
06:18 - red, blue, etc...
06:20 - Draw a rectangle here with this width and this height. That's much more useful than just say draw a rectangle.
06:26 - But we're going to start with a simpler case with our function all it's supposed to do is draw a flower.
06:31 - This is how we would define it. All of the code
06:35 - for drawing that flower should go inside the open curly bracket and the close curly bracket. When we get to this line of code in
06:42 - our program, this line of code
06:44 - it looks a background in the Processing API because it's
06:46 - predefined in Processing. This line of code looks up rectangle in the Processing API because it's
06:50 - predefined in Processing. This line of code will now look in here, right?
06:55 - It's going to say ah I got a call that function. Where is the function definition?
06:59 - Here is the function definition. Where do you write that function definition in your code?
07:05 - Well, you can write it really anywhere you want. I'm going to put it right here.
07:11 - When I say anywhere you want it could be, in between setup() and draw(), it could be above setup().
07:17 - Typically you put it below setup() and draw() that might be sort of the standard. The key thing is
07:22 - flower, the function flower, is its own block of code.
07:25 - It is its own block of code. It cannot be inside draw, cannot be inside, these are
07:31 - distinct blocks of code that are separate. And when we run this program now...
07:36 - Tada...
07:39 - Ops, all the way at the bottom right-hand corner here. We get a flower...
07:42 - No we don't. So we don't get anything because we didn't actually put any code in that function.
07:46 - But if I were to give us a little bit of a size here
07:50 - so that the window is a little bit bigger and say I know our flower is going to be this beautiful
07:58 - red circle
08:08 - Now obviously this is somewhat pointless in the sense that we don't really have something that looks like a flower
08:14 - But you could imagine if you were to invent a very complex sophisticated algorithm with several lines of code you could make it modular.
08:22 - This modular piece that all lives inside the flower function and
08:26 - is then called from draw(). It's allowing you to really just organize your code in a clear way
08:31 - this.. now... this video went on a little bit longer than I expected so what I'm going to do in the next video...
08:36 - You can actually try this for yourself first. Is take something you've written in Processing before and see if you can figure out okay
08:44 - well this part is the part that draws the flower pattern, this is the part that makes the flower pattern bloom.
08:50 - Can you write a draw... display flower function? Can you write a bloom function? Can you take your program and divide it in to parts and
08:58 - separate those parts into distinct functions that you write below draw()
09:02 - but call them in draw(). Give that a whirl. I haven't shown you too much as to how to do that
09:06 - but the next video is going to very specifically...
09:09 - To take a program and divided into parts, okay?
09:13 - And with that I say I bid you farewell