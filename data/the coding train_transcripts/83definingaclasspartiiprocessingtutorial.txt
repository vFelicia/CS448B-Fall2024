00:00 - Okay, look so we in the previous video
00:02 - We had a bunch of stuff here on the whiteboard that sort of magically went over here
00:05 - And it's now here in a Processing sketch. So we have the beginnings of a Processing sketch now again
00:09 - There's this sort of funny thing going on here
00:11 - Have we written this program in reverse like if I were to run this right now. What's it going to tell me?
00:17 - Cannot find a class or type named bubble.
00:20 - That's what it says down there. Cannot find a class or type name bubble. Well...
00:23 - Oh I am recording. Okay am I recording sound yes, I'm sorry. Okay
00:29 - I'm gonna keep going. I just I thought I maybe I forgot to hit record. Okay um
00:33 - Cannot find a class or type name bubble. Well of course it can't there's no bubble built into Processing.
00:39 - This is a new type that we are defining
00:42 - That's what we need to define in our class
00:43 - but so
00:44 - normally you might think: "OK, I should write the class and then I can use the object or should I make the object but
00:49 - What we've done here is kind of an interesting thing
00:51 - This is now giving us the instructions for how we have to write the class.
00:55 - We know the class needs to have these functions in it.
00:57 - So this is a sort of design question that you want to think about as you're working on something
01:02 - Do you want to figure out what the object needs to do first then write the class to inform that or vice versa?
01:09 - It's an interesting question and you might try doing it both ways
01:13 - Truly what we've done here is first. We wrote a program
01:16 - That was without any functions at all and a lot of stuff in setup() a lot of stuff in draw() then we change it to
01:21 - a program that was with function so a lot of
01:24 - Variables some initialization and a bunch of functions in draw we've now moved that to our next stage
01:30 - Which is saying forget about all the inner workings of a bubble? How does the bubble even work?
01:35 - We don't even know we just know how to control a bubble. You know we're going to have a bubble
01:39 - We're going to have a new bubble and we're going to apply these three functions to it
01:42 - So how then do we define the class how do we have an actual but how do we get this to stop saying?
01:49 - Cannot find a class or type name bubble? Here's how we do it.
01:53 - We need to define a class. Class
01:57 - Bubble.
02:00 - Open curly bracket, close curly bracket. We're using the full height. Can you see that on your screen? Yes, you can. OK.
02:08 - We're using the full height here. We are now. We have a new block of code
02:12 - This is a big block of code
02:14 - Just like with a function setup(),
02:16 - a conditional line, open curly braket close curly bracket everything
02:20 - About how a bubble works is going to go in here. Again this is not an actual bubble object
02:27 - This is the bubble object. This is the bubble that's actually going to be in our code
02:31 - This is just what it means to be a bubble. What does it mean to be a bubble? Well one thing we know
02:37 - Is that we have to have a function call to send, we have to have a function called display,
02:41 - And we have to have a function called top
02:43 - So that means inside of the bubble class we need some function definitions for example. I could write void
02:51 - display
02:53 - and
02:54 - How is a bubble displayed?
02:57 - by
02:58 - as an ellipse. Maybe an ellipse at x y within the size of 64
03:05 - right this is now a
03:07 - function inside of a class all bubble objects have the ability to execute this function
03:13 - They have the ability to say b dot display
03:16 - now
03:18 - This now should open our eyes to something else
03:21 - I said draw the bubble an ellipse x y
03:25 - Well where does that x y come from? In our previous version of this program...
03:30 - There was there were global variables x y. This is the x y for the bubble, they're just here above setup().
03:36 - Is that where they should stay?
03:39 - Absolutely not.
03:41 - They absolutely should not stay there. What we're saying now is there's no such thing as a global x y. There's no global x y
03:48 - for this program there is, there are only x ys for bubbles. A bubble
03:53 - has an x y.  Every single bubble will have its own x y. How we define that? By defining x & y here.
04:02 - float x
04:04 - float
04:05 - y
04:07 - What is a bubble? What is an object it is something that has both data and
04:12 - functionality I
04:14 - believe we discussed this in a couple videos ago. This is the whole innovation and excitement of object-oriented programming.
04:20 - Data and functionality together at last in beautiful harmony.
04:25 - This is it.
04:26 - Inside of the class we have the data for the bubble and the functionality for the bubble. We need to add move.
04:31 - I mean ascend. We need to add top, etc. But really we have everything here.
04:36 - We're missing one important thing. Let's go put this in our program real quick
04:40 - We have a couple more minutes before I feel like this video is too long.
04:44 - Ok so here we are. Ah oh my goodness. Oh, my goodness, whoa
04:48 - We got something new so it's coming up here ok what's going on?
04:52 - Where are we going to write this class? Where are we going to put this in our code? Well we could...
04:56 - as ee have done before... say new block of code
04:59 - down here
05:00 - Right there's my new block of code.
05:02 - I have a setup() block my draw() block. Now I need a class and put it down there.
05:06 - Processing this is fine, but Processing gives you a nice little feature here up here new tab. I can make a new tab meaning
05:15 - I'm going to call it bubble
05:19 - um
05:20 - Meaning I can actually write my class
05:24 - Over here now
05:27 - Should you really get that excited about this maybe not but this is just a really nice way to organize
05:32 - thoughts, your programming, etc. It's just so much more comforting. To be able to know here's my main program
05:37 - here's where I'm using my objects.
05:39 - I'm making them and they're doing stuff and then where are they defined, where are inner workings of them, how do I
05:44 - manipulate and make those objects better?
05:46 - Oh, that's in the other tab, that's where I'm gonna work on my bubble code. In each bubble again needs to have an x. in
05:53 - Needs to have a y, and it needs a display function.
05:59 - Which maybe says stroke(0), fill(127), and an ellipse x,y,
06:09 - 64,64.
06:11 - There we go, so interestingly enough, okay. Let's go here
06:14 - So we know that we didn't write the ascend function, and we didn't write the top function.
06:20 - But let's run this
06:24 - It actually works I can close this old one
06:28 - Put this new one over here where I standing? I have no idea. It actually works. What's going on? Where's that bubble?
06:33 - It's sort of stuck up there in the top left.
06:35 - Why?
06:37 - Where did we say where the bubble should begin? I wanted to begin in the bottom in the middle. The bottom in the middle. Where
06:43 - do I say where it should begin?
06:45 - Well here's where I declare the variables is that where I should give them their initial values?
06:50 - I could well we need to do one thing one thing better
06:54 - remember
06:56 - we said this in the previous videos that b equals new bubble is calling something called the constructor. The
07:03 - constructor is the place where the object is born. It is a beautiful shining moment, but truly
07:09 - It's just like
07:10 - It's like setup() for the object. Just like our program has things that happen after the beginning things that happened over and over again
07:16 - Objects have things that happen to them at the beginning
07:18 - What are their initial settings? Is it a blue bubble, is it a bubble in the middle of the screen? Is it a big bubble what
07:23 - are its initial conditions? We need to write that constructor. The syntax for the constructor is a little bit odd.
07:30 - It's not like something we've done before
07:34 - bubble
07:36 - parentheses, parentheses open curly bracket, close curly bracket. So it kind of looks like a function.
07:41 - It has a name, it has a space for
07:43 - arguments and it has an open curly bracket and a close curly bracket. The thing that's different
07:47 - is that there is no return type. This by the way just to complete this beautiful diagram is the constructor.
07:54 - It has no return type. In truth what is the return type? The return type is actually bubble!
08:00 - It's returning an object right it's saying
08:05 - Make a new object and store it in the variable b.
08:07 - Right so that's what it's returning, and its name must match the class name.
08:13 - So this is where you can initialize things like I could say it should start in the middle and at the bottom.
08:21 - Let's add that in to our program.
08:24 - Okay in the class. I'm now going to add
08:27 - The constructor, and there is where I want to say I want to be in the middle
08:34 - and at the bottom and
08:38 - We can just write that ascend function really quickly
08:44 - All right say y- - and
08:48 - We can put it back in and run it
08:52 - And there we have our bubble ascending now
08:54 - we didn't write the top function, so it's just going to float up and off the window, but now we see that here
09:00 - We need when we're going to make a bubble. We need to add all the variables we need to add the constructor
09:06 - we need to add all the functions we intend to call and all of those things are in a
09:12 - Cla.. in a, it's own block of code with the beginning curly bracket and end curly bracket. We have the data
09:18 - We have the constructor and we have the functions.
09:20 - This is the syntax so what I would say to you as an exercise is two things. One is you can grab this example
09:28 - Again, we'll have some system hopefully for grabbing use soon, and you see if you can just add that top function to it
09:34 - Or add some other functionality to it actually here you go
09:37 - What if, this is a tough one. Boy, this is a hard one, but it's a good one
09:42 - How could I...
09:45 - How could I do something where when I click on the bubble it pops or maybe just changes color?
09:50 - See how would you write that into the class itself. In other words...
09:58 - What if I want to do this ooh boy...
10:02 - We're out of time this video is going to shut off any second now. So you should... I'm gonnne give you as much of a clue and eventually this video is going to end. Just I have a time limit
10:12 - Okay, so what if I were to say something like b dot pop?
10:19 - And better yet. I might want to do something like if I click on it
10:23 - But whatever this is just a simple thing write a function when you click the mouse. It pops above it disappears
10:29 - It changes color or something like that. See if you can do that as an exercise, okay great and in the next video
10:35 - We're going to also look at how to make more than one bubble
10:41 - This was still going in the next video. We're going to look at how to make more than one bubble