00:00 - (bell rings)
00:01 - - Hello, welcome to a new video series.
00:04 - I'm very excited about this video series
00:06 - 'cause I'm going to show
you how to write some code.
00:08 - I always show you how to
write code, well, not always,
00:09 - but typically I show
you how to write code,
00:11 - and then I run the code
on this computer here.
00:13 - And what I'm going to show
you is how to write code here
00:15 - and have it run somewhere else.
00:17 - And this can be very useful
for a lot of reasons.
00:19 - One of the main reasons these
days you might want to do that
00:23 - is to run your code on
a more powerful computer
00:26 - that can do some kind
of machine learning task
00:28 - that might take all night,
00:30 - and you can just be playing your
00:32 - whatever other video game
00:33 - and checking your email
00:35 - while that's going
00:35 - and get the results when it's done.
00:37 - And I'm going to show you how to do this
00:38 - with a particular platform called Spell.
00:40 - And this video is sponsored by Spell.
00:44 - So I'm going to do a couple things.
00:45 - I'm going to talk about what is Spell.
00:47 - I'm going to show you how to use it
00:48 - and I'm going to run a simple example
00:50 - with just one little Python script
00:52 - that I make on this computer,
00:54 - run it over there and see the results.
00:56 - Then look in this video's description,
00:59 - there will be links to two upcoming
01:01 - live streams with two guests.
01:03 - First, Nabil Hassein is going to come
01:06 - and show you how to train an LSTM,
01:09 - Long Short-Term Memory network.
01:11 - It's a special kind of
neural network model
01:13 - that's useful for working with sequences,
01:16 - and in particular you could generate text
01:18 - as a sequence of characters with it.
01:19 - So we're going to look at
01:20 - how to train an LSTM
model using spell.run,
01:23 - and then have that model
that you've trained
01:25 - work with, say, the ML5
TensorFlow.js library,
01:30 - an ML5 or a TensorFlow.js library.
01:33 - Then Yining Shi,
01:34 - who has previously appeared
01:35 - on The Coding Train
01:36 - in the Brick Breaker Tutorial,
01:37 - she's going to come and show you
01:39 - some stuff about working with images,
01:40 - maybe we'll do style transfer,
01:41 - maybe we'll do Pix 2 Pix, maybe both.
01:44 - And so she'll come and show
you how to train a model
01:46 - for those concepts and
execute that on Spell,
01:51 - and then also work with that
with the ML5.js library.
01:55 - So you could check the video's description
01:57 - for the times of both those live streams.
01:59 - You can tune in live
and ask your questions,
02:01 - or simply watch if the live
streams have already happened
02:04 - and you're watching this
video, just click the link,
02:06 - and you'll be able to
watch it right there.
02:07 - Okay wonderful.
02:08 - Alright so first,
02:09 - let's talk about what is Spell.
02:13 - So I've talked about the idea of
02:15 - client side programming
02:16 - and server side programming,
02:18 - and this is sort of a similar thing
02:20 - in the sense that we do
have a client computer,
02:24 - my laptop which is like The Coding Train,
02:27 - then there is this service
which is called Spell,
02:32 - if I could spell Spell,
that would be good,
02:35 - which has lots and lots of computers
02:38 - sitting there somewhere in the cloud.
02:41 - They have computers with
different CPUs, GPUs,
02:44 - and I'll kind of get to that
02:45 - as we go through all this material.
02:47 - So typically if I'm talking
about client server,
02:50 - I might be saying you
program your website,
02:52 - then you upload your
website to some server
02:54 - and then other people
can access your website.
02:56 - This is different.
02:57 - What we're talking about is
02:59 - allowing these computers to act as
03:02 - a cloud computing resource essentially
03:05 - that you can write a script,
03:07 - so maybe you have this Python script,
03:09 - you set up your entire Python
environment on your computer,
03:12 - the Python script works with
it and you can just say,
03:16 - with typing in just the instruction,
03:18 - spell run my script.py.
03:23 - This will get sent to a particular server,
03:26 - one that you've requested,
03:28 - the kind of server you've requested,
03:29 - you're not requesting a specific computer,
03:30 - you're requesting the kind
of computer, I want this GPU.
03:34 - GPU by the way means
Graphics Processing Unit,
03:37 - and that typically is a powerful processor
03:39 - that's really useful with
machine learning models.
03:43 - So you're going to request a
particular kind of computer.
03:45 - It's going to run it, it might finish,
03:47 - it might generate some files,
03:48 - like maybe it's going to say,
03:49 - hey here's your poem,
03:51 - or here's your image.
03:54 - And then you could request
03:55 - to ask for the results back.
03:57 - And if that task takes hours or even days
04:01 - which is not crazy at all in the world
04:03 - of running machine learning models,
04:05 - you can send it, close your computer,
04:08 - check, go to the library,
04:10 - get on the computer there,
04:11 - go to the Spell website,
04:12 - see what the progress is,
04:13 - go to sleep, wake up, check the progress,
04:15 - did I get a notification?
04:16 - All sorts of things are
possible when it's done.
04:18 - So this is exactly what
I want to show you.
04:21 - And in case you're following along,
04:22 - this is my kind of mental
list of all the pieces,
04:24 - a little outline of what I'm showing.
04:26 - So really all I've done so far
04:27 - is talk about what is Spell.
04:29 - The next thing I want
to do is install Spell.
04:31 - Okay so the first thing that I want to do
04:33 - is just go right to the spell.run website.
04:36 - I'll link to it in this
video's description,
04:37 - but it's pretty easy to type
it in right to your browser.
04:41 - The next thing you're going
to want to do is click Sign Up
04:43 - and sign up for an account
with your email address,
04:45 - name and email.
04:46 - I already have done that so
I'm just going to log in.
04:50 - You pause this video and
sign up for an account
04:52 - if you want to follow along.
04:54 - And then I'm now logged in,
04:55 - and you'll notice I'm
getting this message,
04:58 - Spell is offering a $100 GPU credit,
05:01 - meaning you can use their
GPU machines for free
05:04 - up to what would normally cost $100.
05:07 - You'll have to enter a credit card
05:09 - on the billing page
05:10 - to unlock that feature,
05:11 - and afterwards there's a charge per hour
05:13 - using the resources.
05:15 - I will note that they have
05:16 - a good notification system set up
05:18 - so you can set it up to warn you
05:19 - whenever you're down to this much,
05:20 - so you should never see
05:21 - any unexpected charges on your card.
05:24 - Okay so once you're signed up,
05:27 - the first thing you
want to do is type this,
05:30 - pip install spell.
05:32 - That is now where do you type that?
05:35 - So one thing I should mention
05:36 - is there are couple prerequisites
05:38 - for this following along this tutorial.
05:41 - One is you're going to need
to have a Python environment.
05:44 - Most computers kind of
come with Python installed
05:46 - or you can install it,
05:47 - and I'll link to a few resources
05:49 - for installing Python.
05:50 - I'm using a particular tool
05:51 - in this video called virtualenv,
05:54 - virtual environment,
05:55 - that lets me create a Python environment
05:57 - that I can kind of like
turn on and turn off.
05:59 - Useful.
06:00 - You're also going to need
to know something about Git,
06:03 - how Git works in order to work with Spell.
06:06 - And I will also link,
06:07 - I mean I have a video tutorial series
06:08 - about Git and GitHub as well
06:10 - which I will link to you,
06:11 - but those are prerequisites.
06:12 - Once you have a Python environment set up,
06:15 - you should be able to go
to any terminal, console,
06:19 - application that you're
using and type in pip,
06:22 - Python package something
rather install spell.
06:25 - So I'm going to go to, I'm using iTerm,
06:27 - and you can see that I'm on the Desktop,
06:29 - and this spell-demo, this is a message
06:32 - that's showing to me that's
part of virtual environment,
06:34 - so I have my spell.demo
virtual environment set up,
06:37 - and so I can just write pip install spell,
06:40 - and then I can wait, dot dot,
dot dot, oh, that was so fast,
06:44 - and it is installed.
06:45 - And I know it's installed
because now if I type spell,
06:49 - we can see that it's,
something is happening.
06:51 - Normally if I would just
type spell into the console,
06:53 - into the terminal, it would
say I don't know what that is.
06:56 - Okay the next thing I want
to do is actually log in.
07:01 - So what I've done, actually
let me say something,
07:03 - what I've done is I've installed,
07:05 - I just have to come over
here just to write this down,
07:07 - a command line interface.
07:10 - So how do you control Spell?
07:13 - There are two ways to control Spell.
07:15 - One is through their web browser interface
07:17 - which I will show you at some point.
07:19 - Another is through a
command line interface,
07:21 - meaning you can type in commands
07:23 - on the command line on your computer
07:25 - to interface with Spell and control it.
07:29 - And every command is
going to start with spell.
07:31 - And now I'm going to say spell login.
07:34 - And I'm going to put in my username,
07:36 - and I'm going to put in
my password, sillyunicorn.
07:42 - And there it is, it says, Hello, danshiff!
07:43 - So I know that I am logged in now.
07:46 - And I can also do things
like, say, spell whoami,
07:49 - just to check like who did I log in as?
07:51 - And you can see, okay,
there's my username,
07:53 - you can all email me now at
daniel@thecodingtrain.com,
07:55 - and you can see when my account
was created, June 1st 2001,
07:59 - and my last log in was 10 seconds ago
08:02 - 'cause I log in a lot apparently.
08:04 - Alright so we have Spell working.
08:05 - This is actually pretty easy.
08:07 - Now I can do stuff.
08:09 - So I could type spell,
08:10 - anything that I can run
on the command line,
08:13 - for example I could type echo Choo! Choo!
08:18 - Echo is a command
08:21 - for the computer to echo back to me
08:23 - whatever I type after echo.
08:24 - So now if I want this
command echo Choo! Choo!
08:28 - to not run on my computer
but to run on Spell,
08:32 - all I have to do is say
spell run echo Choo! Choo!
08:37 - And here we go.
08:40 - Now it's going to take longer.
08:41 - Oh whoa, oh so first of all, ah,
08:44 - this is very important,
08:45 - I'm very glad that this happened,
08:46 - because I meant to mention this.
08:48 - Spell, as I was saying,
08:50 - you need to know something about Git
08:51 - which is version control software.
08:53 - Spell is designed to work
best when you run commands
08:58 - from within a directory
that is a Git repository.
09:01 - At the moment I don't
need to worry about that.
09:03 - I'm just trying to say Choo! Choo!
09:06 - So I'm just going to say continue anyway.
09:08 - And then of course in a moment,
09:09 - I'm going to run the commands
from a Git repository.
09:12 - So you could see it's
casting spell number nine.
09:14 - This is the ninth time
09:15 - I've ever tried to run something on Spell.
09:17 - A machine request is done, it's building,
09:19 - it ran, it's that Choo! Choo!
09:22 - It's saving, pushing,
09:23 - total run time five seconds, complete.
09:26 - So here's the thing.
09:27 - This took almost six seconds to run,
09:30 - whereas if I just did this,
09:31 - it happens in milliseconds.
09:33 - There is overhead in
communicating with the server,
09:35 - requesting a machine, sending the command,
09:39 - running the command,
getting the message back,
09:41 - but all that overhead is totally worth it
09:43 - when you have to run something
09:44 - that you need a powerful GPU
09:46 - that doesn't exist on your laptop
09:48 - or that just is going to take,
09:49 - it doesn't matter if
you're adding five seconds
09:51 - if it's going to take five hours.
09:52 - So next step, let's actually
have it run some code.
09:57 - So I have already,
09:58 - I'm in a directory called
Coding-Train-Spell-Demo.
10:02 - And this is code band.py.
10:06 - It's a Python script.
10:07 - I actually wrote a Python script sort of.
10:10 - This is borrowed from a
tutorial from Allison Parrish,
10:12 - and I will link to that in
the video's description.
10:16 - But this, what this does
is it loads a JSON file,
10:20 - this is important because
I want to show you
10:21 - something about loading data,
10:24 - it loads a JSON file with some data in it,
10:26 - it picks some random stuff out,
10:28 - and then it spits that stuff
back out to a text file.
10:32 - So for example, if I just
were to say python band.p,
10:37 - this is me running the
Python script on this laptop,
10:41 - what it does is it picks a
set of random instruments
10:44 - and shows them to you.
10:45 - We run them through again,
10:46 - it picks 10 random
instruments and there you go.
10:48 - It's my random band, the randoms.
10:51 - And it's also in a file
called theband.txt.
10:55 - It wrote it out to a file.
10:57 - Well, I'm not suggesting
10:58 - that this particular code
11:00 - is anything interesting.
11:03 - This shows you the
machine learning process
11:06 - if you're going to use
this for machine learning.
11:07 - You don't have, you can
run any code on Spell,
11:09 - and there might be other things,
11:10 - but the thing that I'm
going to show you with,
11:12 - that we're going to show you
11:13 - in future live streams with guests,
11:14 - LSTM, style transfer,
11:16 - the idea is that
11:17 - you're going to load in some data,
11:19 - crunch the numbers for a very long time,
11:22 - and then spit out a result,
11:23 - and that's exactly what this is doing,
11:25 - loading a JSON file,
11:27 - running over sort of an algorithm,
11:28 - and writing out a text file.
11:29 - So maybe that output is going to be
11:30 - a model file or an
image or something else,
11:32 - but all the same stuff will apply.
11:35 - It's time to run span.py
now on Spell, not locally.
11:40 - So I'm going to ask the Spell
server to run that Python script.
11:43 - So all I have to do is type spell run,
11:46 - and then the same as that command
11:48 - that I would have typed anyway,
11:50 - python band.py.
11:53 - Now here's the thing,
11:54 - this is going to work very fluidly
11:56 - because I am in a directory
11:58 - that happens to be a Git repository.
12:00 - Spell knows how to transfer
files back and forth using Git,
12:05 - how to look at your last commit method
12:07 - and have that be as
something that's noted,
12:09 - at what time did you run this.
12:10 - So all of that,
12:11 - if you have your script
12:13 - inside of a Git repository,
12:14 - things are going to work really nicely.
12:17 - And you could see that I have my terminal
12:19 - configured in such a way
to show me information
12:22 - about what branch I'm on
and into my Git repository.
12:24 - And I have a separate video
12:25 - that kind of shows how I'm doing that
12:27 - which I'll link to in
the video's description.
12:29 - Okay I'm going to press
Enter and run this.
12:32 - Okay so here we are.
12:34 - It's casting spell number 11.
12:37 - It was spell number nine before
12:39 - because I did something
12:40 - that I made a mistake with number 10.
12:42 - It got edited out.
12:44 - Okay, so you could see it's building it,
12:45 - it's running it, it's done,
12:47 - it's printed out the output,
12:49 - saving, done, and run
number 11 is complete.
12:53 - Now that it's finished,
12:54 - I want to be able to look at the results.
12:55 - I want to see the results
of whatever algorithm I ran.
12:59 - I can see it here 'cause I had
it kind of console logged it,
13:02 - but I want that file, that
file is not on my computer.
13:04 - Remember I ran the code
on Spell's computers,
13:07 - so I need to get that file.
13:08 - And there's two different
ways you can do it.
13:10 - So one way you can do it
13:11 - is actually just by going to the browser.
13:13 - So here I am logged in to Spell.
13:15 - I'm going to go here and click Runs.
13:17 - There's also this idea of Workspaces,
13:19 - but Runs is where I can see
13:21 - all the different things
13:22 - that I have done recently,
13:23 - and I want to find one number 11.
13:25 - So I'm going to click on Runs,
13:27 - and I'm going to click
on run number 11 here.
13:30 - And here we could see, look,
this is actually what ran,
13:32 - spell run, now I didn't type this in,
13:34 - I didn't request a CPU machine,
13:38 - the default is the basic CPU machine,
13:40 - meaning no special fancy
graphics processing units.
13:44 - And this is actually free.
13:46 - So the basic computer,
13:47 - it's not going to do anything much better
13:49 - than I could do already on
my laptop but that is free.
13:52 - And then you can see python band.py.
13:56 - There's information that's sort of
13:57 - log of what happened is here.
13:59 - And then right here, look at this,
14:01 - theband.txt, that was the output,
14:04 - and I can just click Download,
14:08 - and there it is.
14:10 - I've already done this in practice.
14:12 - And you can see there it is,
14:13 - that's the results.
14:14 - So in a way (bell rings) we're done.
14:16 - Like I'm going to show you more things,
14:18 - but this is the basic idea of Spell.
14:22 - I wrote some code,
14:24 - I have an environment
configured on my computer,
14:27 - I don't want to have to do,
14:28 - I want to run it somewhere else
14:29 - but I don't want to have to do
14:30 - a lot of work setting
up another environment,
14:31 - Spell is going to be able to
duplicate your environment
14:34 - and run your code very easily by using Git
14:37 - and other things that it
knows how to integrate with.
14:40 - So this is really wonderful
14:41 - that I have this like web interface
14:43 - and I can see what happened,
14:44 - I can click through my runs,
14:45 - I can see band.txt,
14:47 - I can just download it really easily.
14:49 - But most of the time
14:50 - you're going to want to just
14:51 - continue all of your workflow
14:53 - through that command line interface,
14:55 - and in fact you can download the file
14:57 - and do a lot of other things
14:58 - from the command line interface.
14:59 - I'm going to show you
a couple more commands,
15:01 - and then I'm also going to show you
15:02 - where you find all the documentation
for all those commands.
15:05 - I actually don't have
these things memorized,
15:06 - you shouldn't have them either memorized,
15:08 - it's all about looking up
15:09 - and reading through the documentation.
15:11 - Okay so let me go back to the terminal.
15:13 - So one thing I'm just in the Desktop now.
15:15 - I don't have to be in my project folder
15:18 - to interface with Spell.
15:19 - If I'm running the code,
15:20 - I want to be in the project folder,
15:22 - but if I just want a file,
15:23 - I could say something like
15:25 - spell, cp for copy, runs,
15:30 - and then I need to specify which run.
15:31 - Now the number of the run is
the most important thing, /11.
15:35 - It was run number 11 I remember that.
15:37 - And so it's going to say copied one file.
15:40 - I can actually go to the Desktop now,
15:43 - and we should see that there it is,
15:46 - there's this file, the band.txt,
15:48 - and there once again is the band
15:51 - that came out of that particular run.
15:53 - Let's just really quickly do this again
15:55 - to see how everything changes.
15:57 - I'm going to run it one more time.
16:00 - (soft upbeat music)
16:04 - Okay, run number 12 completed.
16:06 - You could see it's a different band,
16:08 - fiddle all the way to oboe.
16:10 - So I could just go back
to Desktop and say hey,
16:13 - give me now the file from run 12,
16:16 - and then I could just go to the Desktop,
16:18 - and we can say, right,
fiddle down to oboe,
16:20 - the new file has come in and replaced it.
16:22 - It's up to me to manage my file system
16:24 - if I want to like rename the other one,
16:26 - keep that one, that sort of thing.
16:27 - But all of this has been saved,
16:29 - I can just go quickly back
16:31 - and grab the file for
number 11 now if I wanted.
16:32 - It's all there on the
Spell server for you.
16:35 - So the next thing I want to
show you which is pretty typical
16:39 - of working with a machine
learning algorithm
16:41 - is that your data might
be a big set of images
16:44 - or a lot of text files,
16:46 - that's not going to be something
16:47 - that's part of your Git repo.
16:49 - Your code and your algorithm is all there,
16:51 - but the actual data is something
16:52 - that you want to treat separately.
16:54 - And this is where you want to use
16:56 - two important commands, right?
16:58 - So before, I just had
my instruments.JSON file
17:01 - right there in the repo so my
Python code could pull it up,
17:04 - but if I want to just have
my code running on Spell,
17:07 - but try with different data files,
17:10 - I'm going to need to upload the file,
17:13 - so I'm going to use spell upload.
17:15 - And then what I want to make sure is that,
17:18 - that's uploading it to Spell,
17:19 - but there's another
concept here of mounting.
17:22 - So if I have a whole set of uploads,
17:24 - I want to mount a particular one,
17:27 - meaning I want it to be available
17:29 - for this particular run.
17:30 - So let's look at how that works.
17:34 - To show you how that works,
17:34 - I've modified the code to have it
17:37 - just pull from any text file.
17:40 - So when I run, when I
now say python band.py,
17:44 - I have to give it a data file.
17:46 - So I can say data.json.
17:47 - And data.json is not part
of my Git repository,
17:50 - it's just a data file.
17:52 - So what I want to do first is actually say
17:54 - spell upload data.json.
17:59 - Enter a name for the upload.
18:01 - Ah, so actually it's important
that I reference a name
18:05 - because I want to like organize my stuff
18:08 - in a way that I can remember later.
18:10 - So now it's going to
tell me let's call it,
18:14 - let's just call it a demo,
18:16 - maybe I want to call it,
18:17 - actually let me call it like json_bands,
18:22 - like band or band,
18:23 - I'll call it bands or instruments.
18:24 - (laughing)
18:25 - Let's call it instruments.
18:28 - Okay so now you can see it's uploading it
18:30 - to uploading instruments.
18:31 - Let's go to the Spell website.
18:34 - And when I look at the website,
18:35 - I can now go to Resources,
18:36 - and we're going to see here,
18:37 - look at this, under uploads, instruments,
18:40 - there's my resource, data.json.
18:43 - So now I need to make sure
18:44 - this resource is available, right?
18:46 - Like is it available just by default?
18:50 - Now I can say spell run
18:52 - python band.py data.json,
18:58 - and it's going to run it.
18:59 - Casting spell number 14,
19:02 - building machine, running, running,
19:04 - ah, it couldn't find the file.
19:06 - See, it threw an error, open file name,
19:09 - it couldn't find this file
that I want, data.json.
19:11 - To add that file, for it to be available
19:14 - as part of the run,
19:16 - it needs to be mounted.
19:17 - And this can be done
actually by just modifying
19:20 - with an argument the spell run command.
19:23 - So in other words I want to say spell run,
19:26 - and all this time I should have been
19:29 - putting the command in quotes
19:30 - 'cause it's going to like
keep it together as a unit.
19:33 - So I can say python band.py data.json,
19:39 - and then -m, and now the path to that,
19:43 - and the path to that is what?
19:45 - uploads, what did I call it?
19:48 - instruments I think,
19:50 - instruments/data.json.
19:53 - So if I had a bunch of
different instruments files,
19:56 - I could run it just by picking the one
19:58 - that I want to mount
for this particular run.
20:00 - So let's give this a try,
20:01 - and this is a very common thing, this -m,
20:03 - there's lots of other dash this,
20:05 - dash that, dash this,
20:07 - so that I can modify,
20:08 - I can request a GPU or
I can ask it do this.
20:11 - So I'll look at that
20:12 - when I show you the documentation.
20:13 - Okay let's give it a try.
20:17 - Oh we're in number 15,
this is so exciting.
20:19 - Machine requested, mounting,
20:21 - run is mounting, run is
running, there we go.
20:24 - So we can see it worked.
20:26 - Now it used that file.
20:27 - Oh that's wonderful.
20:29 - I've kind of finished.
20:30 - I mean there's so much more,
20:31 - and as I said there's going to be
20:33 - two upcoming live streams.
20:35 - We're showing practical
machine learning examples
20:37 - that you could stay tune for or watch
20:39 - if you're watching this
sometime in the future
20:41 - when those have already happened.
20:42 - But I do want to mention
a couple other things.
20:44 - So let's actually let's
run this on a GPU, why not?
20:47 - Let's make use of a powerful GPU.
20:49 - I've got $100 in credit.
20:52 - So let's go here and see,
20:56 - how do you find out all
the things you can do?
20:59 - The main thing you want to go to
21:01 - is here under Documentation.
21:02 - So I'm going to click Documentation.
21:04 - There's a Quickstart guide.
21:05 - Essentially the Quickstart guide
21:07 - is what is in this video.
21:08 - No more as succinct fact fashion.
21:11 - There's some Core Concepts,
21:12 - there's Guides for particular examples
21:14 - like style transfer already,
21:16 - translating text, recognizing numbers.
21:18 - I encourage you to look at those.
21:19 - But what I'm really
concerned with right now
21:22 - is this Command Line
Interface Documentation.
21:25 - That's what I really want to look at.
21:27 - So I'm going to go there and you can see
21:29 - this is all the stuff that
I've been showing you,
21:31 - spell whoami, spell upload, spell stop,
21:35 - spell ps, this is a really useful one.
21:38 - So spell ps display all
user runs and their details.
21:42 - Because one thing by
the way you should know,
21:44 - you might sort of think like,
oh I'm going to just run this,
21:48 - and then like, oh no, I
didn't mean to do that,
21:50 - let me quickly hit Control + Z.
21:52 - Well, guess what I just did?
21:54 - I stopped viewing logs with Control + Z.
21:56 - That didn't actually stopped the process.
21:58 - If I want to stop the process,
22:00 - I've got to actually
use probably spell.stop.
22:03 - And spell.stop, I can
stop a particular RUN_ID
22:07 - if it's like taking forever
and it has a mistake in it.
22:09 - That one probably already
finished 'cause I was talking,
22:12 - but I could say spell -ps.
22:16 - Oh sorry, just spell ps, no dash.
22:19 - And now this is everything
I've ever done basically.
22:23 - You could see back like when
I first was doing this thing,
22:25 - I was running some test spell test.
22:26 - It's always telling me the
machine type, what the thing was.
22:30 - This is a little bit awkward
to look at because of,
22:32 - it'll look really nice on your computer
22:33 - especially when you
have like a smaller font
22:36 - and like it's all nice.
22:37 - It'll look something
nice like this (laughs)
22:40 - but I have like a big
font so you can see it,
22:42 - and I don't know I'm like,
my computer has gone crazy.
22:45 - But this is the kind of thing
that you want to look how to do.
22:48 - So the one thing that you're
going to want to really see is
22:51 - I'm looking for, oh, spell.run,
22:55 - and now the arguments for it.
22:57 - So we could see that -m was for mounting,
23:00 - and then also, ah, this is
really important, --pip,
23:05 - this is if a certain dependency that,
23:08 - my project was just like a simple one
23:09 - so it didn't really need any dependency,
23:12 - but this is important so
that when Spell runs it,
23:14 - it uses the same Python
packages that you're running.
23:17 - And by the way Spell also
supports other environments.
23:20 - I'm using Python 'cause
the future examples
23:22 - and a lot of machine learning
examples run through Python.
23:26 - But you know me, I don't
really know Python,
23:29 - and maybe I'll come back and
show you with JavaScript thing,
23:31 - with node, all these other environment,
23:32 - other environments are
supported on Spell as well,
23:35 - but here's the important
one, --machine-type or -t.
23:39 - And you can see these are
the different machine types.
23:42 - Probably the further you get to the right
23:44 - is kind of the bigger the one.
23:46 - And you're going to want to
look through the Spell website
23:48 - for more documentation
on each one of these.
23:52 - But let's just pick one for fun.
23:55 - Let's try a v100.
23:56 - I feel like that's kind of like
23:57 - a reasonable GPU that's not too crazy.
24:00 - To run it on the GPU,
24:02 - I'm going to do exactly what I did before,
24:04 - spell run python band.py
24:08 - data.json -m,
24:10 - argument for mounting
24:12 - that data.json file,
24:14 - and then also I need another argument, -t.
24:19 - - t is for --machine,
24:22 - it's to select the machine,
24:23 - I'm going to pick v100
24:25 - which is a machine that has a GPU
24:27 - that I'm excited to try.
24:29 - And now I'm going to hit Enter,
24:31 - and we're going to run it on the GPU.
24:32 - Okay, let's go.
24:34 - Okay so here's the thing.
24:37 - I am running this code now
24:39 - on a machine that has a powerful GPU,
24:41 - but I'm not actually making use
24:43 - of any of the code libraries
24:44 - that would actually make use of the GPU,
24:45 - so technically this is really
going to be the same thing.
24:48 - And it already finished.
24:49 - But when we get to the next tutorials
24:51 - that are going to come in the future,
24:53 - looking at LSTMs, and
style transfer, Pix 2 Pix,
24:56 - those will really make use
of a machine with a CPU.
24:59 - Okay it finished, it took
seven seconds, there we go.
25:03 - Alright so that's going to wrap things up.
25:05 - I hope that you enjoyed this tutorial.
25:07 - I hope you learned a little bit about
25:08 - what it means to use a
cloud computing resource
25:11 - to run code that you're writing
25:14 - on this computer or somewhere else,
25:15 - you could do it in Python
25:16 - and in other environments as well
25:18 - that are supported by Spell.
25:21 - Thank you so much to Spell
25:22 - for the opportunity to do these tutorials.
25:25 - I really appreciate it.
25:26 - I've had a lot of fun
25:27 - playing around with the platform
25:28 - and hope to use it again
in future projects.
25:30 - So go over to the website,
spell.run, give it a try.
25:34 - Ask your questions in the Comment.
25:36 - Look in the video's description
25:37 - for two links to the
upcoming live streams,
25:40 - or if those have already happened,
25:41 - those links will be
replaced with the archive
25:43 - of those live streams as well.
25:45 - So I can't wait to see what you make,
25:48 - how it works for you,
25:49 - what kind of things I forgot to talk about
25:50 - that I get to answer in the Comments.
25:52 - And I'll see you again
someday on The Coding Train.
25:55 - (whistling)
25:56 - Choo Choo!
25:57 - (upbeat music)