00:00 - hello welcome to another coding
00:01 - challenge in this coding challenge I'm
00:03 - going to make minesweeper I actually
00:04 - already did the coding challenge I'm
00:06 - recording a quick intro so you can see
00:07 - what's going to happen it's about two
00:09 - long one to about somewhere between 45
00:11 - minutes in an hour I will point out this
00:13 - would be less time to make minesweeper
00:15 - then it took me to make pong which goes
00:17 - to show you how my brain doesn't really
00:18 - work in normal ways the pong should
00:20 - really be simpler I think but anyway
00:21 - this is my sweeper it's actually be
00:24 - sweeper but because these are bees and
00:28 - not mines but it doesn't really matter
00:29 - the point of this game is that you click
00:30 - and when you click you're trying to
00:33 - avoid getting stung by a bee and so here
00:36 - this cell has three bees next to it so
00:39 - I'm going to click somewhere else
00:40 - this one has to click somewhere else
00:42 - three click click uh-oh and I hit a bee
00:45 - so let me try again oh I hit a bee up a
00:49 - hit B he ah there we go when I click
00:52 - somewhere that has no neighbors it uh it
00:57 - reveals all the other spots around it
00:59 - that also have no neighbors and a number
01:01 - so okay so that's that's B sweeper I can
01:03 - see I can see for sure that there's a be
01:05 - here if I were to click the review so
01:06 - this is the game I'm going to program it
01:09 - from scratch in JavaScript all the way
01:11 - through I'm going to make a whole bunch
01:12 - of mistakes and get lost and at the end
01:14 - of this I will give you a lot of
01:16 - suggestions and things that you could
01:17 - add or try to make your own creative
01:19 - version of it and I hope you'll share
01:20 - those with me code in the description on
01:22 - github okay thanks enjoy this coding
01:25 - challenge all aboard all aboard
01:28 - here we are up coding trade I'm going to
01:31 - do a coding challenge today that was
01:32 - requested highly requested the number
01:35 - three requested topic minesweeper thank
01:40 - you to fire soul who suggested this on
01:42 - August 14th 2016 today is May 12th 2017
01:46 - so I didn't get to it within a year and
01:49 - I have never programmed this before and
01:52 - I think Kylie last time I played
01:54 - minesweeper was it's gotta be at least
01:56 - 15 years ago but I dunno how it works so
01:59 - I'm just gonna get started let's see I
02:00 - expect this is probably gonna take if I
02:02 - can do this in under 60 minutes that's
02:04 - going to be good for me you can see how
02:06 - long this video is I don't even know
02:07 - because I am at the present time right
02:10 - now okay
02:12 - uh I've no idea what's going to happen
02:14 - next but I'm just going to get started
02:16 - okay what are some things I need to do
02:18 - here I have to do this okay first thing
02:25 - that I need to do is I think what I
02:27 - should do is I should make an object I
02:29 - should make an object called a cell
02:33 - let's think about this
02:36 - so minesweeper and by the way I'm in a
02:39 - well minesweeper I want to use something
02:41 - besides bombs so i beez and bombs on
02:45 - twitter suggested why not B's so I like
02:47 - this idea of what we're going to do is
02:48 - make B sweeper where the idea here is
02:52 - there's a grid and any one of these
02:54 - cells could either have a B in it or
02:58 - nothing in it so the cell should have a
03:01 - state and we could think of that state
03:05 - as like B maybe it's true or false so
03:10 - each cell will have a state true or
03:12 - false
03:13 - each cell might I might need to know
03:16 - like where it is and its width and
03:18 - height yeah it's kind of redundant
03:20 - information but that's kind of useful I
03:22 - need to know where to draw it and then I
03:25 - also want to know its state like has it
03:29 - been revealed or not so that's also I
03:31 - can actually think of that as a boolean
03:33 - revealed true or false so right because
03:39 - if it's revealed I'll see what's there
03:41 - it could be blank if nothing's there or
03:43 - the B if the B is there or it could also
03:46 - have a number so for example this cell
03:50 - would have the number two because it's
03:52 - got to be next to it this cell would
03:56 - also have the number two because that's
03:57 - two B's next to it this would have a 1 a
04:00 - 1 a 1 a 1 2 A 2 a 1 a 1 so if it's
04:06 - revealed we either see blank or B or a
04:12 - number okay so I think this is kind of
04:15 - all we need I just forgot since this is
04:19 - going to be really hard to take me a
04:21 - very long time because what are the bad
04:22 - sales like I it'll be easy it'll be done
04:24 - in 10 minutes which is never true
04:25 - it's especially not for me back ok ok so
04:30 - I'm going to come back to the computer
04:31 - now and let's let's add some of these
04:34 - things this dot B equals true this dot
04:43 - revealed equals true so let's just
04:46 - pretend for a moment that every single
04:49 - cell has a B and is revealed so now what
04:53 - do I want to do here I need to store all
04:56 - of these cells in some sort of data
04:58 - structure now there's a variety of ways
05:02 - I could do this I click weather probably
05:06 - makes sense is for me to store them in a
05:08 - two dimensional so-called two
05:10 - dimensional array and so we can think of
05:13 - this as like oh this every single cell
05:15 - is going to be in a big array so it's a
05:18 - list but inside that array maybe each
05:21 - row is also an array that way what this
05:26 - allows me to do is if I want to say if I
05:29 - call this maybe I'll call this the grid
05:31 - if I reference grid index 1 comma 2
05:40 - comma 3 or something so this is this is
05:43 - row 0 this is row 1 and then column I
05:48 - would have this or something so that
05:50 - would be that particular cell and I
05:51 - would write it like this I would write
05:54 - it like this so I think this makes sense
05:57 - I could use a just a regular array and
05:59 - then I could always convert a column in
06:01 - row location to the spot in the one
06:04 - dimensional range I've done this quite a
06:05 - bit in different videos about pixels and
06:07 - image processing but I think this makes
06:09 - us the only things a little bit weird is
06:10 - typically when I do this I actually
06:13 - think about this as the column and this
06:16 - is the row kind of like X comma Y column
06:19 - row and the way I just described it here
06:21 - do so so really what I might do is that
06:23 - this defer the first column is the first
06:26 - element then the next column is the
06:27 - second element of that array so there's
06:29 - any number of ways you could sort of
06:30 - think of this or do this but I'm going
06:32 - to do this here in the code now now it's
06:34 - a little bit tricky in JavaScript to
06:37 - make a two-dimensional array
06:39 - what I'm actually going to do is I'm
06:40 - going to make a function and we call it
06:42 - make make 2d array I've done this before
06:47 - I have like a total deja vu moment you
06:50 - have done this in the previous coding
06:51 - jobs and actually I think there's a
06:52 - github issue thread on the rainbow
06:54 - topics forum github repository about how
06:57 - to make a derrick function that makes
06:59 - you any dimensional array but let's just
07:01 - say I make a two-dimensional array with
07:03 - a certain number of columns and a
07:05 - certain number of rows and so I'm going
07:08 - to say array equals a new array with a
07:11 - certain number of columns and then for
07:15 - every column make that an array with the
07:28 - number of rows in it okay so I have an
07:31 - array of all the columns which are all
07:33 - like the X's and that each one of those
07:35 - is an array of all the rows of all the
07:37 - Y's and this is a you know in JavaScript
07:40 - typically you'll see this right which is
07:43 - like that's how you make an array but I
07:44 - can I can also say if I want the array
07:46 - to have a specific number of elements to
07:48 - start I can say new array number of
07:49 - columns okay so what I want to do is now
07:52 - I'm going to have a global variable
07:53 - called grid and I'm going to say grid
07:57 - equals make 2d array with now how many
08:02 - columns of how many rows alright so
08:05 - let's just do something simple here
08:07 - let's just say that these are going to
08:09 - be 10 by 10 these are going to be 10 10
08:12 - by 10 pick little 10 by 10 pixel right
08:15 - squares so if my canvas is 400 by 400
08:19 - then I'm going to have 40 columns and 40
08:22 - rows okay
08:23 - so that let's do that so I'm gonna make
08:26 - a so first I have to say let's make
08:28 - create canvas width of 400 comma 400 and
08:35 - let's make it smaller just to start 200
08:37 - comma 200 and then make the grid make
08:40 - the make an array of 20 20 by 20 and I'm
08:43 - going to okay and you know I could use
08:46 - math to clean this up later we'll do
08:48 - that later okay
08:50 - this is fun doesn't feel so fun yet
08:53 - maybe looks weird enough so now and
08:55 - actually let's have a global variables
08:58 - like let's just do this and now I'm
09:04 - going to say for VAR i equals 0 i is
09:07 - less than a number of columns i now need
09:09 - to initialize then I'm going to use J
09:13 - for the number of rows and now I need to
09:20 - just initialize every single spot to be
09:22 - a new cell so what we've got now here is
09:28 - this idea okay we need to have the game
09:30 - the board the game board is a grid of
09:32 - cell objects it's going to have a
09:34 - certain number of columns and a certain
09:36 - number of roll roads so I make a
09:38 - two-dimensional array to store all the
09:39 - cells and then I loop through for every
09:41 - column for every row make a new cell now
09:47 - let's go into the draw function let's
09:50 - say background 0 and do this and I'm
09:55 - going to say show ok so the idea here
10:00 - now is I want to be able to see what's
10:02 - in these cells so I need to go and you
10:06 - know what I really want to do I'm going
10:07 - to make a separate JavaScript file
10:09 - called cell Jas because I have a feeling
10:13 - ultimately there's going to be a lot of
10:14 - code that starts going into the cell so
10:16 - I'd like to save that somewhere else and
10:18 - once I've done that I just need to make
10:20 - sure I also add a reference to it in my
10:23 - index.html file okay whoops what's going
10:27 - on cannot read properties 0 of undefined
10:29 - sketch such as 25 so we already have an
10:31 - error here what see
10:42 - it's a s22 what do I have now what's
10:47 - wrong oh look at this you know it would
10:50 - be nice if I write a function called
10:52 - make 2d array and I create a
10:54 - two-dimensional array you know what I
10:56 - need to do I need to return it so return
10:59 - the array okay great now show is not a
11:02 - function okay great
11:03 - so now we need to write a function
11:04 - called show and I'm going to attach the
11:09 - functions to the prototype this is us
11:13 - this is a what a way of doing
11:14 - object-oriented programming in
11:16 - JavaScript where I create use this
11:17 - constructor function to make an object
11:19 - and every object that is made that
11:22 - constructor function will have a set of
11:23 - methods as part of its prototype one of
11:26 - which is show another video that covers
11:27 - this more clear or another video that
11:30 - covers this in more detail which I will
11:31 - link to in the description and also
11:33 - someday maybe I'll use this es6 syntax
11:36 - which is a little bit different and
11:38 - perhaps a bit nicer remains to be seen
11:41 - okay so now what I want to do is I want
11:43 - to draw a rectangle at the X location
11:49 - with a source with a width and height
11:52 - that's the size of the rectangle of each
11:54 - cell huh but it doesn't have this cell
11:58 - doesn't have an X a Y or size so let's
12:02 - give it that X Y w this x equals x this
12:07 - dot y equals y this w equals W now when
12:11 - I create each cell if I have a global
12:15 - variable called W which is ten each cell
12:20 - is going to be a ten by ten pixel thing
12:22 - let's make it twenty by twenty to make
12:24 - it bigger then I can also say right I
12:27 - can actually then calculate the number
12:30 - of columns and rows which is the width
12:33 - divided by that size the rows is the
12:37 - height divided by that size and probably
12:42 - what I should also do is say floor
12:43 - because I don't want to have like 21.3
12:49 - of columns or 21.7 rows it needs to be a
12:53 - whole number an integer value so let's
12:56 - see how are we doing here now that I've
12:57 - done that I can make each cell at its I
13:02 - times W location or it's J times W
13:05 - location so why is that right so each
13:07 - one of these basically has up let me
13:10 - find my eraser here each one of these
13:17 - has a I index its column it also has a J
13:25 - index it's row so if this one is 2 comma
13:30 - 1 it's actually the rectangle itself if
13:34 - each one of these is 10 by 10 would be
13:36 - at 20 comma 10 pixels if it's 20 by 20
13:38 - we get 14 comma 20 so I need to
13:40 - calculate its pixel location by
13:44 - multiplying by taking the its index I
13:46 - comma J and expanding it by the number
13:48 - of pixels which is the size yay-yay me
13:51 - and setting the grid size things okay so
13:55 - now and it's size is just W so again
13:59 - some fun email nothing on this is really
14:01 - going to change the need to be in the
14:02 - object could just be a global variable
14:03 - but what the hey here we go okay so now
14:07 - we should be able to see a whole bunch
14:11 - of rectangles aha now look at this
14:14 - that's sort of sad like they have this
14:16 - what am i what's going on here so let's
14:19 - figure out what we're going to color
14:20 - them I'm going to say stroke commas zero
14:23 - and no fill let's do that now we see
14:27 - nothing I'm going to say fill comma 255
14:32 - now we see the outline and but it's kind
14:36 - of sad like our math is off there's
14:39 - these little details really pause for me
14:41 - so let's fix this what's the best way to
14:44 - do it I don't know this might this might
14:49 - just actually work that's fine let's do
14:51 - it that way so just actually make the
14:53 - canvas one pixel wider everything's
14:55 - happy now okay so now we see that grid
14:57 - now here's the thing what I want to say
15:00 - in the show function is
15:02 - is you know if if it's not revealed
15:10 - well actually it's always gonna I think
15:12 - we're always going to draw a white
15:14 - rectangle you know what actually what I
15:17 - should do this will make more sense is I
15:19 - should make the background white and I'm
15:23 - always going to draw a no filled a no
15:27 - filled rectangle and if it is revealed
15:32 - then I might put some other things in it
15:34 - for example if it's a B then let's draw
15:38 - I don't know what I'm just going to draw
15:42 - an ellipse and so I'm going to draw a
15:51 - little circle if it's a B let's see what
15:54 - happens there okay look but the circles
15:55 - in the wrong place because but I can
15:58 - change that I can say ellipse mode
16:01 - corner so I can have the ellipse
16:03 - reference point be the corner oh but I
16:07 - want it to be I want it to appear in the
16:09 - center so never mind I'm going to make
16:12 - its location plus W so I'm going to just
16:17 - draw in a little lips I'm just kind of
16:18 - moving the ellipse around so if it's a B
16:20 - there's a circle there they all have a B
16:24 - so let's now do something different
16:27 - let's just say if random one is less
16:32 - than point five then this dot B is true
16:34 - otherwise this dot B is false so now
16:39 - half of them are about how about half of
16:42 - them randomly are going to be B's and
16:44 - there we go so now we see we're on our
16:46 - way to actually making this game okay so
16:50 - we now have a set up where we have a
16:52 - grid each cell has a state it could be a
16:55 - B or not a B and we can visualize that B
16:59 - design aside okay
17:02 - so now I should say that there none of
17:04 - them are revealed at the beginning none
17:05 - of them are revealed right tada
17:08 - so now here's the thing now what I need
17:11 - to do what we're really moving along
17:13 - here
17:14 - we don't have too much farther to go now
17:17 - what I need to do is I need some
17:19 - mechanism to say like when I click on
17:23 - one of these
17:23 - I want to reveal it I want to show
17:27 - what's underneath click on it reveal it
17:29 - so now what I need to do is I need some
17:33 - sort of function to determine if the
17:35 - mouse has clicked on that particular
17:38 - cell so one way to do that first of all
17:41 - would be to write a function contains XY
17:47 - so in other words I want to this is a
17:49 - function I want to be able to say does
17:53 - this cell contain a point is that point
17:57 - inside this cell and so what are the
18:01 - boundaries of the cell well if X is
18:05 - greater than this X plus this X and X is
18:10 - less than this X plus this W right
18:14 - because if that neut look look right if
18:18 - this is a cell I want to know did the
18:22 - mouse is this point between X and X plus
18:26 - W or is it between y and y plus W and
18:31 - I'm using W as this generic variable
18:33 - named width and since these are all
18:36 - squares the width and height are equal
18:38 - you know I would have to rethink this
18:40 - and perhaps if I was things were
18:43 - different but and maybe there's a better
18:45 - variable name for this but W for this
18:48 - sort of length on the side of the
18:50 - rectangle okay so what I can actually do
18:52 - here and I don't need to actually have
18:54 - this if statement I just want to return
18:55 - the result of this a point is inside if
18:58 - X is between the boundaries and this is
19:01 - going to get very long Y is between the
19:04 - boundaries so the same old thing right
19:12 - so return this long the result
19:15 - evaluating this long if statement return
19:17 - X being between the left and right and Y
19:20 - being between the top and bottom why am
19:23 - I doing this because what I also want to
19:28 - do
19:28 - now is handle the mousepressed event so
19:35 - using p5 there's a global function
19:38 - called mousepressed where what I can do
19:40 - is I can say now I could say if grid
19:44 - contains Mouse X comma Mouse why I wrote
19:50 - that function because what I want to do
19:54 - is say let me check every single let me
19:57 - check every single spot in the grid to
19:59 - see if it can change when the mouse is
20:00 - pressed to see if it contains the mouse
20:02 - point if it does that's the point that I
20:05 - clicked on and now I can do something
20:07 - about that I can say grid IJ reveal all
20:11 - right so I can execute a function like
20:14 - reveal so let me now go into the cell
20:17 - object and I can write a new function
20:18 - called reveal and here's the thing I
20:22 - want to say this dot revealed equals
20:26 - true so even if I if I click on it
20:29 - before it's already true it's true so
20:31 - let's let's see how this works well that
20:37 - was weird so I must have a mistake
20:41 - compare because I'm clicking on some so
20:43 - let's see here
20:45 - let's see where do I have a mistake I
20:46 - see somebody in the chat grid i J okay I
20:50 - I whoops let's just say I J and this was
20:53 - this is right this is right this is
20:55 - right ok I comma J there we go that
20:58 - should fix it so whoa what craziness is
21:01 - going on ah this is the mistake look at
21:05 - that so there I really it's the event
21:09 - it's the opposite of the usual this dot
21:11 - mistake and you know this is a bit of a
21:13 - problem this is a very common
21:14 - programming a headachy thing which is
21:18 - that these variables are the arguments
21:22 - to the function the parameters of the
21:24 - function they're coming in and I'm
21:27 - testing them against the objects own x
21:29 - and y so the objects own x and y is this
21:32 - dot and the arguments that are coming in
21:34 - are x and y so this is where i don't
21:37 - want to this dot okay great
21:39 - so now we should see
21:41 - whenever I click on one out and and what
21:44 - I'm going to do here also just to be
21:46 - able to see that this is really working
21:47 - is where do I if there's a B otherwise
21:54 - let's draw a like a grey rectangle and
22:03 - let's be let's be explicit about
22:07 - everything so let's sort of see here so
22:12 - now I'm just also whenever I click on it
22:14 - it will draw something so we can see oh
22:18 - and I should have you know we don't need
22:23 - to redo the stroke the stroke will
22:24 - always stay so we can see if there's a B
22:29 - there's a B circle if there's not
22:32 - there's a grey rectangle and I meant
22:33 - that for that to be much lighter so
22:36 - something like this so I just want to
22:38 - see that it's been clicked on okay great
22:40 - we're doing well and now here's the
22:43 - thing the amazing thing is that
22:50 - somebody's somebody's going to be some
22:51 - good advice in the chat is a better way
22:54 - that I could do this now here's the
22:55 - thing what do I also want I want to be
22:59 - able to determine how many bees are
23:04 - neighboring a particular cell so I need
23:08 - a function I'm going to call it count
23:11 - neighbors and I wonder if that's
23:17 - something else yeah I'll just do it on
23:20 - the fly count neighbors equals a
23:22 - function okay so first I want to do is
23:26 - just say total is zero and maybe I could
23:29 - call it count bees or something so first
23:33 - of all if this cell is a bee return
23:39 - negative one let's just say if it's a
23:41 - bee return negative one because it's
23:43 - irrelevant I only want to count the
23:45 - number of B is next two cells but art
23:47 - bees now what I need to do is I need to
23:52 - look at all the neighbors well how do I
23:53 - look at all the neighbors
23:57 - a particular cell has how many neighbors
24:02 - one two three four five six seven eight
24:06 - and so actually I can do a little loop
24:08 - that's between the offset of negative
24:12 - one and an offset of plus one right I
24:16 - want to look at every neighbor that
24:17 - minus one plus one I could do these each
24:19 - individually like just check each one
24:21 - let's do it in a loop so what I want to
24:25 - say now is okay I'm thinking I'm
24:31 - thinking I'm thinking let's do for I
24:34 - equals negative one I is less than and
24:39 - are let's say less than or equal to plus
24:42 - 1 I plus plus so I here is now the
24:46 - offset in the X Direction J equals
24:49 - negative 1 J is less than or equal to 1
24:52 - J plus plus and so I want to look at a
24:58 - particular neighbor is a particular
25:02 - neighbor is grid oh look at this these
25:08 - keep track of their own x and y but
25:10 - don't keep track of their own index what
25:15 - do I want to do about this so this is
25:18 - really in some ways this function is it
25:21 - really part of a cell or is it a grid
25:24 - function anyway there's a bunch of
25:26 - different ways I could do this I'm
25:27 - actually just going to in a very
25:29 - redundant way whoops I'm going to this
25:35 - is a just for total overkill nests and
25:40 - you know actually I like this because
25:42 - you know what I can do is if I send the
25:44 - index into the grid then I could just
25:47 - calculate the x and y here because I
25:50 - could say it's I times W and the y is J
25:54 - time study so let's change how that
25:56 - works and let's go into sketch and let's
26:00 - change how this works so I could just
26:02 - make a new cell that's at I comma J
26:05 - comma W right because now
26:08 - what I can do here is I can say this dot
26:14 - I plus I this J this J plus J so these
26:23 - are all the neighbors I want to look at
26:25 - I want to look at I want to look at I
26:28 - minus one I I plus one
26:33 - I I want to look at I plus 1 J minus 1 I
26:36 - want to look at every single neighbor
26:38 - from negative 1 to 1 okay like I don't
26:42 - know if this is if I'm totally being
26:43 - clear I want to say like I minus 1 comma
26:46 - J J minus 1 then I want to say you know
26:49 - I comma J minus 1 I I plus 1 J minus 1 I
26:55 - comma J right you know I comma J minus 1
26:58 - I comma J I comment you can you edit
27:04 - that part out no I said over here we can
27:06 - do any edit I don't why I'm trying to
27:07 - list all the neighbors I think if you
27:08 - get out a piece of paper and draw it
27:10 - you'll be able to do it I got to keep
27:11 - moving maybe I get this video finished
27:13 - okay so if neighbor dot B total plus
27:22 - plus okay so if if the neighbor has a
27:31 - beat increase that total and I guess I
27:34 - could say at the end now I return total
27:37 - now here's the thing I really don't want
27:40 - to check myself right because I'm not a
27:43 - neighbor for myself so whenever I equals
27:46 - whenever whenever it's I and J are both
27:49 - zero that offset is zero then I don't
27:51 - want to check but the thing is if I was
27:53 - a B I wouldn't be in here if I wasn't B
27:56 - I wouldn't be checking my neighbors in
27:57 - the first place so we can assume that
27:58 - I'm not to be so total even if neighbor
28:01 - is myself total won't go up so I could I
28:03 - can skip checking that so great so now I
28:05 - can return total so what I want to do
28:09 - and so here's the thing I think actually
28:12 - let's just create a variable which is
28:17 - neighboring called neighbor neighbor
28:23 - right I'm going to create a variable
28:25 - called neighbor count and when I do
28:27 - count bees instead of returning it I'm
28:30 - going to say this dot neighbor count is
28:35 - a is that total because I think what I'm
28:39 - going to do is after I create the whole
28:42 - grid I'm just going to just going to
28:44 - count every single one now the thing is
28:50 - I can't just call count neighbors here
28:53 - I've got to make the full grid because I
28:55 - can't count neighbors if I haven't made
28:57 - certain cells that are next to that one
28:59 - so you know I could just count the
29:01 - neighbors when I click on it but I might
29:02 - as well just count them all that way
29:04 - when I click on it what I can actually
29:06 - do here is in the display right where's
29:12 - my show function if it's a B it's got a
29:15 - circle if it's not I can also say text
29:21 - and let's say text-align:center
29:25 - text-align:center then I want to say
29:29 - text and then I want say fill 0 and then
29:34 - I want to say text neighbor count this X
29:37 - this dot Y and I'm sure might have to
29:40 - move the text around and it should be
29:42 - this neighbor count okay how we doing
29:45 - here now I know there's going to be a
29:46 - problem
29:46 - but I'm going to go for it anyway oh I
29:49 - didn't have a problem look at ok 0
29:52 - neighbors well first of all that's not
29:53 - right it's in the wrong place and it's
29:55 - the wrong number so something is going
29:58 - wrong but that's ok we're going to
30:00 - figure this out ok so first of all it's
30:03 - in the rosalie fix where it is so let's
30:05 - let's move the text over so I'm going to
30:13 - place it in the center and then so but
30:18 - it's in the center but it's kind of at
30:20 - the top so I want to actually place the
30:23 - text at the bottom maybe - like 2 pixels
30:27 - or something so let's do that and maybe
30:31 - let's make it minus 4 pixels this is
30:34 - obviously the most important
30:35 - six signals okay so this looks good
30:41 - of getting the numbers but I am not
30:43 - seeing the right number so it's not
30:46 - counting the right number of neighbors
30:47 - so something is clearly wrong so first
30:50 - of all did I let's just let's just see
30:53 - here is a is this actually be happening
30:58 - let's say console.log total so that
31:05 - didn't happen I thought I was counting
31:08 - all the B's oh look at this just a
31:13 - little type of when you call a function
31:16 - you've got to add the parentheses
31:19 - referencing just the function as a
31:22 - variable you don't need the parentheses
31:23 - the parentheses execute the function so
31:25 - I was missing that and is not grid it's
31:29 - not a function okay count neighbors is
31:33 - not a function what do I have wrong here
31:37 - contains equals function count it's
31:40 - called count B's it also would be nice
31:42 - to to name to name the function
31:45 - correctly count B's all right
31:49 - cannot read property zero of undefined
31:51 - aha
31:52 - I thought we might have a problem so
31:55 - what is the problem the issue is if I'm
31:59 - on an edge there's no neighbor to the
32:02 - left or there's no neighbor up to the
32:04 - top so only only cells that are not
32:06 - along the edge have all eight neighbors
32:09 - otherwise there's fewer neighbors and
32:10 - I've got to account for that so what I
32:13 - wanted to account for that there's a
32:14 - variety of ways I could do that
32:17 - let's go to this count bees function
32:20 - okay so what I'm actually going to do is
32:22 - I'm going to call this X off I'm going
32:25 - to just rename these Y off oops
32:29 - X off so it's like the X offset and the
32:31 - y offset I think this will be a little
32:33 - bit clearer in terms of a variable name
32:35 - then what I want to do is I'm going to
32:38 - say I equals this I plus X off and bar J
32:44 - equals this j+ y off so this is actual
32:49 - the neighbor is just that I comma J now
32:52 - so I want to break those out into
32:53 - separate variables because now what I
32:56 - can do is I can say as long as I is not
32:59 - equal to as long as I is greater than
33:03 - negative one and I is less than columns
33:09 - and J is greater than negative 1 and J
33:14 - is less than rows then I can go forward
33:18 - and do this right so I want to if it's
33:21 - something off the grid ignore it so
33:24 - hopefully this helps and now five whoa
33:29 - there are five B's next to this too so
33:34 - this looks let's just try to click a
33:36 - button and actually let me just reveal
33:37 - them all so we can see if this let me
33:42 - just turn true on so now there we go so
33:46 - is this right this looks right right
33:49 - this cell has three neighbors this one
33:52 - has four this one has three are they
33:54 - correct on the edges three so it looks
33:58 - good great awesome okay we're getting
34:02 - somewhere
34:03 - how long have I been doing this well
34:07 - there's all this stuff happening in the
34:08 - check that I'm not looking at okay okay
34:11 - okay let's go I think I think we're just
34:17 - about ready to actually start making the
34:19 - game happen so we can start working on
34:24 - the game mechanic so here's the thing
34:27 - what I want to do now is minesweeper I
34:30 - think starts with a fixed number of
34:34 - Mines or B's in this case so what I
34:36 - actually don't want to do now now
34:38 - everything's going to not be abie to
34:40 - start this dot B equals false what I
34:45 - want to do is have a variable I'm going
34:48 - to call it something like total B's and
34:51 - we're going to start with ten B's so
34:54 - they'll be ten B is randomly placed and
34:56 - so now what I need to do is I need to
34:59 - pick ret ten
35:00 - and response now here's the thing I
35:02 - could just pick a random I and J but I
35:06 - don't want to pick the same spot twice
35:08 - oh I'm going to do something a little
35:09 - bit goofy what I'm going to do is I'm
35:16 - going to add to set up an album for pick
35:19 - to pick total B's B's spots so for VAR i
35:24 - equals zero eyes less than total B's i
35:27 - plus plus now what I was saying is I
35:29 - could pick and I'm going to use n here
35:34 - because I want it I could say bar I
35:38 - equals floor random columns let's just
35:44 - start this way J equals floor random
35:49 - rows okay so I could just do this and
35:53 - then I'm going to say grid I J dot B
35:56 - equals true so let's do this and let's
36:01 - uh let's go here and say let's set
36:05 - everything to be revealed so well okay
36:09 - so something I clearly did something
36:11 - wrong but they're all in the diagonal
36:14 - what typo do I have here I did I I again
36:16 - good I and J so 1 2 3 4 5 6 7 8 9 o 1 2
36:24 - 3 4 5 6 7 8 9 can run 10 there's 10 but
36:28 - I'm going to do this a bunch of times
36:29 - it's simple it's going to pick the same
36:30 - spot twice and so they could be then so
36:33 - there's a variety of ways I could do
36:34 - this I could check is that already be if
36:36 - not pick another spot but I'm going to
36:39 - do it this way what I'm going to do is
36:41 - I'm going to say options is a new array
36:47 - and then I'm going to go through every
36:52 - possible spot so I'm going to do all the
36:57 - columns and all the rows and I'm going
37:00 - to say options dot push a little array
37:07 - with I and J in it so I'm going to
37:10 - create an array that has every possible
37:12 - option in it and I just so you see it
37:14 - I'm going to say
37:14 - console.log options and whoops let me
37:20 - take out these console dot log that's in
37:23 - the account B's function I don't want
37:25 - that anymore
37:26 - I'm done with that so we can see this
37:29 - isn't how hard to loot that we could see
37:34 - these are all all the spots right for
37:37 - from 0 4 comma 1 4 comma 2 the reason
37:39 - why I'm doing this is now what I could
37:41 - do is where am i sketch what I could do
37:46 - it here instead of just picking a random
37:48 - column in row I could say index equals
37:54 - floor random options length so give me a
38:00 - random option and then VAR i equals
38:07 - index 0 VAR j equals index 1 so that
38:11 - option has an x has a column and row
38:14 - location in it so i could set that to be
38:17 - true and then what I can do is I could
38:19 - say options dot splice index comma 1 so
38:23 - this then deletes that spot so so so
38:28 - it's no longer an option and I probably
38:30 - could do that in one line of code
38:31 - because splice probably returns the one
38:34 - that your index sorry sorry this is blue
38:42 - choice equals so the thing that I'm
38:44 - choosing or this is confusing right the
38:47 - index is the random index into the
38:50 - options array and then the column and
38:53 - row location is part of that choice so
38:57 - now let's try this again and this seems
38:59 - to work and what I'm going to do
39:02 - interestingly enough so there's a way
39:04 - we're gonna be able to check if this is
39:05 - actually working so what I want to
39:08 - actually do is let's just take this
39:09 - splice right up here because I have a
39:11 - feeling splice return to the one returns
39:15 - the one that you picked so that's a
39:17 - little bit nicer right so pick a random
39:18 - index take it out and delete it and then
39:21 - set that feature so now whoops so it
39:24 - doesn't splice does not so that
39:26 - fine okay so let's leave it this way and
39:34 - there we go now let's make sure this is
39:36 - really working what I'm going to do is
39:38 - say total B is equals we have 20 by what
39:44 - is this 10 by 10 so let's make total B's
39:47 - 100 there we go
39:48 - so we can see that's working if I had
39:51 - just it was able to pick every single
39:53 - spot but again 10 get 10 total B's 20 we
39:58 - get 20 there we go okay that's good now
40:02 - I don't want to reveal anything and also
40:04 - the way minesweeper works
40:05 - design-wise is if it has no neighbors
40:09 - you actually don't see the zero so let's
40:11 - let's just change that in how it's
40:13 - drawing so where I where I have the show
40:17 - function is only draw the text if this
40:23 - dot neighbor count is greater than zero
40:26 - okay there we go so now we're seeing
40:31 - this is we're seeing the final result
40:34 - this is the end of the game right you're
40:36 - done we found all of the B's my numbers
40:40 - are wrong somebody the chat is saying my
40:42 - numbers are wrong I think they're right
40:43 - look at this pop is what I want removes
40:47 - that element from the array but I
40:49 - thought pop you can't give it a specific
40:51 - index can you let's take a let's take a
40:55 - short little divergence digression sorry
40:58 - and look at top javascript array so does
41:05 - pop pop I don't think yet it only
41:11 - removes the last element of the array so
41:13 - I can't give it a specific index anyway
41:15 - I could shuffle the array and pop them
41:18 - off the end but whatever there's lots of
41:20 - other ways you could do this this is my
41:22 - way I did it
41:25 - no copyright violation here okay if I
41:29 - just think one if I sing incredibly
41:31 - poorly one line from song do I really
41:33 - violate copyright I don't think so okay
41:35 - so now let's now
41:40 - go back to sell and nothing is revealed
41:43 - false so now what we do is I can start
41:46 - playing let's go 1 1 ah ok so this is
41:51 - actually working in the sense that I can
41:53 - play this but when I click on one of
41:58 - these if it has no neighbors it should
42:02 - reveal everything around it that doesn't
42:06 - have all those businesses the one tricky
42:10 - part alert alert train help big : to
42:18 - station this is the trickiest part ok I
42:25 - need to figure out a way to reveal all
42:29 - the adjacent cells that don't have a B
42:32 - and if any of those adjacent cells also
42:35 - have a count of 0 all of the adjacent
42:38 - cells next to those should also be
42:40 - revealed so how do I do that well where
42:43 - where do I need to start this ok oh yeah
42:47 - this is basically flood-fill
42:48 - someone is saying flood fill this is
42:52 - like a flood fill algorithm because what
42:54 - I member I'll come back to that the end
42:56 - google flood fill I think we're kind of
42:58 - doing that all of a sudden which is
42:59 - exciting embedded in this video here
43:02 - okay so a flood film from Wikipedia also
43:08 - called fills an algorithm determines the
43:09 - area connected to a given node ok I have
43:12 - the chat message one way to quickly okay
43:14 - now let's see here so I'm not going to
43:19 - look it up how it works I'm just going
43:21 - to make up my own way of doing this so
43:23 - we're okay so this okay let's trace out
43:27 - what's going on here when I click the
43:31 - mouse I call reveal when I call reveal I
43:38 - said this dot reveals equal to true now
43:40 - what do I want to do different things
43:43 - so if this neighbor count equals zero
43:50 - flood fill time
43:52 - it's blood-filled time doo-doo-doo-doo
43:56 - doo-doo-doo-doo
43:57 - it's little time yeah
44:00 - how could you better but anyway so okay
44:02 - so now what I need to do is I need to go
44:06 - and look at all of the neighbors now
44:08 - we've done this before so what I think
44:13 - what I should do is I should probably
44:15 - call a function which is going to we'll
44:17 - call it this dot flood fill because we
44:24 - might need to call this somewhat
44:26 - recursively cell dot prototype dot flood
44:31 - fill equals function okay so one thing
44:35 - we need to do just like we did with
44:37 - neighbor count we can repurpose some of
44:39 - this code we can start to look at all
44:46 - the neighbors right so am I missing I'm
44:53 - missing a bracket okay so this was the
44:54 - code that looks at all the neighbors and
44:58 - it should reveal them all so ah this is
45:01 - perfect all I got to do is say this as
45:03 - long as it's not a B right
45:06 - if so okay I missed the one important
45:10 - I'm like thinking this through and I'm
45:12 - not able to say what I'm thinking right
45:15 - so how does this work right we want to
45:18 - look at all the neighbors if the
45:20 - neighbor is not a B reveal it that's
45:23 - actually it's as simple as that if the
45:24 - neighbor is not a B neighbor dot reveal
45:28 - and this is actually going to trigger
45:33 - because reveal is going to set that
45:35 - equal to true and it's going to check a
45:40 - reveal is going to set the neighbors
45:42 - reveal true and I have it flood fill if
45:44 - it's zero so it's going to be redundancy
45:48 - here because it's going to end up
45:49 - checking some spots but let's just see
45:51 - let's just see if this was it really as
45:53 - simple as that
45:54 - I can't imagine okay something went
45:56 - wrong there clearly so first of all I
46:00 - clicked on a B okay that kind of worked
46:03 - but I got some errors here I think I'm
46:05 - getting close
46:05 - Oh maximum
46:06 - call stack.size exceeded aha
46:10 - I also don't want to reveal it if it's
46:12 - already been revealed got it if neighbor
46:15 - is not Abie and neighbor is not revealed
46:21 - right I don't otherwise I'm going to be
46:23 - stuck in an infinite loop of like this
46:26 - neighbor oh I'm right because if I say
46:28 - to my neighbor reveal yourself and then
46:30 - my neighbor says hey you reveal yourself
46:31 - and I say no you reveal yourself I say
46:33 - your real stuff they're fearless tell me
46:35 - reveal self everybody reveal themselves
46:36 - you you get to reveal yourself then
46:38 - we've got a problem
46:39 - ok so this that should help there's
46:42 - still some ok that's a 1 that's a 1 ha
46:46 - ha that was exciting
46:49 - ok ok I know what's going on when I
46:54 - click on a be something weird happens so
47:01 - it seems to be working unless I click on
47:02 - a B right why is it I but yeah so that's
47:08 - this bit that's working really really
47:10 - well so why is it doing it when I click
47:14 - on a beach so let's trace that out when
47:19 - I click on a B now suppressed I call
47:23 - reveal then in the reveal function if
47:31 - neighbor count equals 0 this stuff so is
47:35 - neighbor counts 0 when I click on a B
47:37 - shouldn't neighbor count be negative 1
47:40 - when I click on a B why are other things
47:42 - being revealed so let's do console dot
47:45 - log this neighbor count to see what's
47:50 - going on here 1 2 2 1 1 honey find me
47:57 - one there's got to be this has got to be
47:58 - it here right 0 so it did get 0 and then
48:06 - why did it do anything else what am I
48:09 - missing
48:10 - oh I returned negative 1 here of course
48:14 - there we go
48:17 - yeah so if this
48:20 - be dis neighbor count equals negative
48:23 - one and then I'll just say return can
48:29 - that mean if that's what my problem I
48:31 - had that historically
48:33 - there we go I can keep playing hey I
48:36 - think we made minesweeper okay so now
48:40 - hold on if it's a B then the game is
48:44 - over okay uh-huh how long have I been
48:47 - doing this somebody tell me how long
48:49 - this has been going on for uh okay okay
48:53 - okay wait wait wait G all right a
48:56 - low-battery my soundboard everything's
48:58 - going everything's falling apart okay um
49:02 - so here reveal if it contains so I could
49:07 - just check you know if it was it why
49:09 - don't we just check it here if grid i J
49:17 - JB game let's call game over so if it's
49:23 - a B if that spot is a B let's call a
49:27 - function called game over and in the
49:30 - game over function which I will put R
49:34 - and arbitrarily here what I'm going to
49:41 - do is loop through everything and just
49:46 - reveal everything reveal equals true so
49:48 - that's how I'm going to have game over
49:50 - okay so I think we've made this game now
50:04 - Oh true did I not hit save want wall if
50:19 - grid what did it happen grid IJ reveal
50:23 - is not a function what I mean it's not a
50:25 - function what did I do
50:28 - I've lost I've lost my Oh markers
50:35 - markers there's a thing where you could
50:37 - do markers ok ok hold on well good night
50:39 - where lies that maybe hold on markers
50:42 - will be an exercise for the audience
50:44 - what's wrong here Oh reveal revealed
50:48 - revealed revealed revealed revealed not
50:53 - reveal the function this is one of the
50:54 - tricky things in JavaScript you can't
50:56 - have a variable I mean functions are
50:59 - variables so you can't say reveal equals
51:02 - 5 function reveal equals sum function
51:04 - they're the same you've over in what you
51:05 - done that my variable name was revealed
51:07 - ok
51:13 - ah game over so I think that we have now
51:22 - made minesweeper about 52 strictly about
51:26 - 50 minutes I'm under an hour
51:28 - too many bites me professor took me to
51:30 - make pong now I hate that you know
51:33 - having the game just start having the
51:35 - game start over being able to add
51:36 - markers so being able to add markers is
51:40 - a way I think that you could like snow
51:42 - that you know there's a bomb there which
51:43 - is going to help you as you move along
51:46 - but I'm going to finish this coding
51:48 - challenge I'm going to leave that as an
51:50 - exercise so this is going to get posted
51:52 - you will see the code for it on github
51:57 - in a link that look in this video's
51:58 - description for the code there should be
52:00 - a really file there as well where if you
52:02 - make a variation of this you can link to
52:04 - it maybe you could design some beautiful
52:06 - bees
52:07 - it could have sounds with one thing that
52:08 - you could do that would be really nice
52:09 - is you could animate the flood-fill
52:11 - algorithm so one thing I'm going to do
52:13 - is I'm going to just so we I'm going to
52:16 - have a total number of bees make it just
52:17 - two right now so when I click it flood
52:21 - fills it instantly but I could animate
52:23 - like just one at a time each frame
52:26 - reveal the next set of neighbors that
52:28 - would be an exciting nice little thing
52:30 - to do what other kinds of clever
52:31 - variations on the game can you make how
52:34 - can you make it more beautiful could you
52:36 - use some sort of weird hexagonal grid
52:38 - there's all sorts of possible ways you
52:40 - could improve and change the style it
52:43 - needs a win condition it needs a way to
52:44 - start over it could use like some
52:47 - settings of like I want to add you know
52:49 - I wanted to have 20 bees I want the call
52:52 - number certain number of columns and
52:53 - rows so you could go the whole interface
52:55 - for it there is so many things you could
52:57 - do ah in the chat somebody suggesting to
53:01 - do this with all dom elements so don't
53:03 - use canvas at all but maybe these are
53:04 - all divs that would be an exciting thing
53:06 - to try to you can will CSS animation as
53:09 - you click on things so many possible
53:11 - things you could try to do but there it
53:13 - is minesweeper in under an hour
53:16 - multiplayer with the server is something
53:18 - you could do I hope you make some
53:20 - variations I can share those with me
53:22 - and next week on my live stream I will
53:24 - share hopefully a whole bunch of
53:27 - variations and things that people make
53:28 - with this game be sweeper thanks and see
53:32 - you in a future coding challenge
53:36 - [Music]