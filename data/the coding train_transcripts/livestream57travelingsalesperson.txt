00:05 - good morning welcome I'm here live uh on
00:09 - what will be
00:11 - um uh I think this is coding rainbow
00:14 - sauna Edition I forgot the episode
00:17 - number but it's very very hot today in
00:19 - New York City um this is my last live
00:22 - coding rainbow episode for a while I'm
00:25 - going on a brief couple week Hiatus I
00:27 - may be back the very last week of August
00:29 - if not not I will certainly be back the
00:31 - first week of September and I have lots
00:33 - of exciting what I hope to be exciting
00:35 - and interesting plans for the fall but I
00:38 - have a limited amount of time today
00:39 - approximately two hours and I have a
00:42 - particular particular example scenario
00:45 - I'm going to check the chat I I'm
00:47 - actually not looking at the chat right
00:48 - now hold
00:50 - on uh uh okay um I have a particular uh
00:55 - example scenario that's been requested
00:57 - for a while to look at a kind of classic
00:59 - computer
01:01 - science I don't know all that was the
01:04 - wrong sound effect this is my bell uh a
01:07 - problem called The Traveling salesperson
01:08 - I want to look at it in a few different
01:10 - contexts to talk about the difference
01:12 - between gr Forest algorithm talk about a
01:14 - genetic algorithm again and also really
01:16 - with you the viewer watching kind of
01:19 - think about and come up with some you
01:21 - know creative applications of this so
01:23 - how might you make art with the
01:24 - traveling salesperson or how much you
01:25 - make music with the traveling
01:26 - salesperson or how much how much you
01:28 - make a game or an Interactive exhibit
01:30 - with a traveling salesperson Beyond just
01:32 - the fact that it's this um algorithm so
01:35 - I see that the chat is going I I assume
01:37 - that means that you guys can hear and
01:38 - see me okay um Albin writes are you able
01:41 - to answer some questions so I would like
01:44 - to answer some questions today I think
01:46 - what I'm going to try to do is break my
01:47 - record it's I've been streaming for
01:49 - about two minutes and go right into
01:51 - today's topic usually I spend a long
01:52 - time introducing stuff and talking about
01:54 - my morning and how hot it is outside and
01:58 - different things that I've been thinking
02:00 - about you know what what M what Broadway
02:01 - musical lotteries I didn't win the day
02:03 - before but I'm going to kind of put all
02:04 - that stuff aside and try to go straight
02:07 - into the topic um so um uh but but you
02:13 - should uh if I can get through stuff
02:14 - quickly at the end I'll take and answer
02:16 - kind of general questions but you know
02:18 - as as the chat's going ask questions
02:20 - away I kind I pop and peek at it and
02:21 - that sort of thing okay
02:25 - so did that did you guys just see what
02:28 - happened
02:32 - I have a Seltzer that I don't understand
02:35 - what happened to it because I had opened
02:37 - it previously but it got shaken about
02:40 - and now there is a giant bottle of water
02:42 - on the
02:44 - bottom I'm going to put some music back
02:46 - on for you
02:54 - guys fortunately I have some paper down
02:56 - fortunately the water didn't get
03:01 - fortunately the water didn't get on
03:02 - anything technical there's no cables I'm
03:04 - just wiping it up hello wait that wasn't
03:08 - a very good track let's uh uh let's play
03:11 - The Pear and noise song So This Is
03:13 - Random this is noise pear and noise that
03:16 - is in the core random algorithm the
03:19 - actual random algorithm itself those
03:22 - papw at all you pick I'm picking random
03:24 - numbers between 0 and 10 9 2 7 6 1 9
03:32 - how how how bad is the water on my shirt
03:34 - with pear and noise I might pick numbers
03:35 - like this it's going to be permanently
03:37 - forever in my traveling sales
03:43 - video okay there's a little bit of water
03:45 - here on the keyboard not the laptop
03:47 - keyboard which just on this other
03:50 - keyboard that I use to play sound
03:52 - effects and switch um and that sort of
03:54 - thing
03:56 - okay well today's going well so far
04:00 - isn't
04:01 - it today was the day I was like you know
04:03 - what I'm going to try to be kind of
04:04 - professional and not and just kind of do
04:07 - the topic and not wander off into weird
04:10 - ideas and and start like doing things
04:12 - like I'm you know just at home washing
04:14 - the dishes or something while you guys
04:15 - are watching but I wasn't able to do it
04:18 - okay um now let me try this again I was
04:22 - a little bit
04:27 - thirsty there we go so
04:30 - I'm going straight into the topic with
04:31 - one caveat for those of you who are new
04:35 - I like to just refer you to coding
04:38 - rainbow.com where uh you can see the
04:41 - latest uh challenge was a Flappy Bird
04:43 - challenge I'll play that over here oh
04:45 - can you hear
04:47 - that I don't know if you can um so and
04:50 - then you can if you want you could
04:51 - subscribe to the YouTube channel you
04:53 - could become a patron on a crowdfunding
04:54 - site called patreon and be uh there's a
04:56 - slack Channel you can then join for
04:58 - further discussion and you can also put
05:00 - your email in here uh if you would like
05:03 - to um sign up for email alerts um and I
05:07 - will probably send some announcements
05:09 - over the next couple weeks as I add in
05:11 - the fall I'm hoping to have a regular
05:12 - schedule ah let me ask you something
05:15 - hello from Portugal hello from Germany I
05:17 - know that there's folks in the UK if I
05:19 - did an evening
05:21 - show show is the right word but if I did
05:24 - an evening broadcast which might be the
05:26 - time that works out this fall for
05:28 - sometimes around
05:30 - like okay I think I am back hello
05:34 - everyone am I back please tell me I'm
05:37 - back and hopefully that problem is not
05:38 - going to happen again I did however
05:40 - while I was away uh get myself set up to
05:44 - start coding and we've got to get moving
05:47 - it's
05:47 - 10:48 and I want to really get through
05:50 - this topic today because it's an
05:51 - interesting one and one that I hope
05:53 - everyone will enjoy so welcome again
05:55 - welcome back this is coding rainbow
05:59 - episode sauna New York City sauna
06:01 - Edition or the episode where I take a
06:03 - bottle of water and pour it on my head I
06:06 - won't do that now but I sort of did it
06:07 - by accident
06:08 - earlier okay
06:12 - so the first thing we're going to do is
06:14 - I'm going to turn on this
06:16 - light I'm going to check to make sure I
06:19 - can switch to the other camera which I
06:22 - can I'm going to get a marker and we are
06:24 - going to start with uh the traveling
06:27 - sales person
06:31 - uh oh uh and I've got to get ice bucket
06:35 - challenge is a good day good idea okay
06:37 - so hold on a second oh shoot I need to
06:39 - get a new version of processing that's
06:41 - okay ah so so many
06:44 - things uh okay I'm not going to get it
06:46 - right now and I'm going to open and I'm
06:50 - going to go I know where it is
06:54 - um just give me a second
06:57 - here uh
07:01 - uh tsp
07:04 - challenges uh so I I dug up some of my
07:06 - old examples of traveling
07:09 - sales in um processing and I want to
07:14 - open those up so I can have those
07:16 - running as a
07:19 - reference uh yeah here we go and let's
07:23 - do it with
07:25 - uh uh
07:27 - 12 12 12 and I want to make sure random
07:31 - seed five random seed five okay so okay
07:35 - so I just want a visual reference to
07:37 - start
07:38 - with
07:41 - um let me minimize
07:45 - these hold on a sec
07:49 - ah hey is everybody still hearing me and
07:52 - seeing me just give me a moment here to
07:56 - um adjust what I'm doing here to get I
07:59 - want to have a nice visual reference to
08:00 - start with um and I just want to make
08:06 - this better okay uh oh read only
08:11 - whatever that's fine I don't care about
08:14 - that uh okay so hold on everyone I'm
08:18 - about to get going with this first
08:23 - topic and I'm going to run these
08:27 - again Brute Force
08:35 - okay
08:36 - so let me move these over a little bit
08:39 - and this is now so as uh most of you
08:42 - know who have watched any of my live
08:44 - streams before what I do is I have this
08:46 - longer live stream where I watch a chat
08:49 - and answer questions if I can and kind
08:52 - of fumble my way through stuff and then
08:54 - after the live stream is over uh parts
08:57 - of the live stream get edited into
08:58 - separate video tutorials that get
09:00 - uploaded as Standalone videos somewhere
09:01 - between 10 or 20 minutes each and I
09:04 - imagine that this
09:05 - particular uh sequence about the
09:08 - traveling salesperson is going to have
09:10 - about four videos to it let me describe
09:13 - those to you uh and it's 1052 I think I
09:15 - can do all of them number one I just
09:17 - want to talk about what the traveling
09:18 - salesperson problem is and kind of build
09:22 - a quick example that just picks random
09:25 - paths and tries to find the best one by
09:26 - picking random paths then I want to talk
09:28 - about
09:31 - sorting this thing called lexographic
09:33 - order which is kind of like alphabetical
09:35 - order and how you can sort something uh
09:38 - so take all the permutations of ABC
09:41 - right a b c a c b b a c b c a and I'm
09:45 - you know c a b CBA right I think I got
09:48 - them all right how do you take so how
09:50 - can we actually and that's what this
09:52 - this example over here has just done
09:53 - it's checked every possible path and
09:55 - found the best and then this one over
09:57 - here is using a genetic algorithm to
09:59 - solve it so I want to look I want to
10:01 - talk about what the problem is just kind
10:02 - of get a example that's running look at
10:04 - lexographic order how can we check every
10:06 - possibility then look at a genetic
10:08 - algorithm that can eventually hopefully
10:10 - evolve to the optimal solution this
10:12 - genetic algorithm is performing I would
10:13 - say rather poorly I'm kind of
10:16 - surprised uh because I thought I had
10:18 - kind of tuned it to work fairly well
10:20 - although maybe there's still some errors
10:22 - in it but I'm not going to worry too
10:23 - much about that okay um so those of you
10:28 - who are reques in topics in the chat
10:30 - this has been kind of decided for today
10:32 - based on feedback that I've gotten on
10:34 - the slack Channel but um if if uh uh
10:37 - Oliver if you're watching if you could
10:39 - post a link in the chat to the rainbow
10:42 - topics uh GitHub repository there the
10:45 - issues list there is where you can
10:46 - suggest topics for future videos and
10:48 - I'll talk before I leave I'll talk a
10:49 - little bit about that as well okay so
10:54 - um so I think actually I'm going to
10:56 - close
10:58 - this
10:59 - is I don't want to I I think for
11:01 - reference sake what I'm going to do uh
11:05 - what I'm going to do is I'm going to try
11:07 - 15 and I'm G to just want a visual
11:11 - reference to start I'm going to take
11:14 - this out and then delete this I just
11:17 - getting myself set up here uh to get
11:19 - started actually programming uh
11:23 - terminal uh let's run this and uh
11:31 - um and then I am going to Local Host uh
11:37 - tsp I'm looking for
11:40 - tsp1 great I'm going to go back to I'm
11:43 - using the adom editor for those of you
11:44 - who are wondering uh I'm going
11:47 - to
11:50 - um uh just make sure everything is
11:53 - working with the p5js library so I'm
11:56 - going to add a little bit of code here
11:57 - just to see that I
12:01 - have an actual sketch running which I do
12:04 - I want to have my JavaScript console uh
12:07 - there's a little bit of an error where
12:08 - I'm referring to an extra Javascript
12:10 - file which is unnecessary so that's good
12:14 - okay we are ready to
12:17 - go this is
12:19 - now oh
12:23 - lexicographic yes uh when somebody
12:26 - downloads this video and edits it
12:27 - someday what you should do is um is um
12:33 - dub over me so I when I was saying
12:34 - lexographic something something lexor
12:38 - lexicographic with a different voice
12:40 - let's let's just confirm that thank you
12:41 - Oliver
12:44 - lexicographic
12:46 - order yes this is what I'm looking for
12:48 - in mathematics lexicographic order or
12:51 - lexicographical order oh also known as
12:53 - lexical I might say that dictionary
12:55 - order alphabetical order it's actually
12:57 - different than alphabetical order but
12:58 - that's s of a subtle distinction is a
13:00 - generalization of the way that
13:01 - alphabetical order of words is based on
13:03 - the alphabetical order of their
13:04 - component letters so anyway
13:07 - um okay here we
13:12 - go so I believe this is I'm trying to
13:17 - think of where this fits into my YouTube
13:21 - playlist okay third try is a charm okay
13:25 - I'm back live again and uh I was
13:28 - fiddling around here to get ready and
13:31 - I'm just kind of I want to just keep
13:32 - going here not uh oh okay and I want to
13:36 - um uh uh I was going to make this 15 and
13:40 - run this and we can see here oh that's
13:44 - too much too much let's make this uh 13
13:47 - lucky number
13:48 - 13
13:52 - uh okay so excellent so I am ready now
13:57 - here we go
14:00 - are you all with me are you all seeing
14:02 - me can you hear me okay I've got my bell
14:04 - ding ding uh and hopefully what's this
14:09 - over here
14:11 - uh just the back sound went off um I
14:14 - just want to before I get started I just
14:16 - want to hear confirmation from one or
14:17 - two people that you can hear and see me
14:19 - okay in the chat so please let me know
14:22 - everything working here okay great all
14:26 - right I think the traveling the CPU
14:29 - running on this laptop probably just
14:31 - like we're going to have like a New York
14:32 - City blackout you know uh I I said I
14:34 - wasn't going to tell any stories but um
14:37 - many years ago there was a big blackout
14:39 - in the United States across the entire
14:41 - Eastern seabo Seaboard I don't know if
14:43 - you guys remember this and at the time I
14:46 - was working as a uh Tech consultant so I
14:49 - was like a freelance computer consultant
14:51 - kind of person I'd go to offices and I
14:53 - help fix printers and that kind of thing
14:55 - and that's literally what I was doing I
14:57 - was fixing a printer
14:59 - in an office on near Lincoln Center in
15:02 - New York City I don't remember the year
15:03 - of this and I was fiddling with the
15:05 - cable shaking with the cable and the
15:06 - Lights Went flicker flicker and I like
15:08 - unplugged it and I plugged it back in
15:10 - the Lights Went flicker flicker and I
15:12 - unplugged it plugg it back in and then
15:13 - the lights went out then the power went
15:14 - out and I looked around the office and I
15:16 - realized oh the power is out in the
15:19 - whole office oh no what did I do and
15:21 - then I heard the power was out in the
15:23 - building and then the power was out
15:25 - basically in all of New York City and
15:26 - then all of the East Coast and I for a
15:30 - moment in time you know mostly jokingly
15:32 - felt like I had caused the entire
15:34 - blackout by like jiggling this printer
15:36 - cable okay font size is a bit small
15:38 - don't worry about that because this is
15:40 - not where I'm going to actually be doing
15:42 - the code um that's just a processing
15:43 - window for a demonstration this is too
15:46 - slow too slow we're going to go back to
15:47 - 12 okay uh so all right what I was
15:52 - saying before the power went out here
15:54 - was uh I don't know where this fits into
15:56 - my YouTube playlist I think the
15:57 - traveling salesperson is going to be a
15:58 - coding challenge but it will be in
16:00 - several
16:02 - parts okay uh here we
16:09 - go hello welcome to another coding
16:12 - rainbow coding challenge in this
16:13 - challenge I'm going to explore something
16:15 - known as The Traveling sales person
16:17 - problem which is admittedly a kind of
16:19 - classical computer science problem
16:22 - that's can feel a bit dry or not so
16:24 - interesting but what I my goal here is
16:26 - to into doing these videos is for you
16:28 - the viewer to watch and understand it
16:29 - and think about creative applications
16:31 - can you make art can you make music can
16:33 - you make what can you make with the
16:35 - traveling salesperson algorithm uh what
16:37 - might you apply to that's your sort of
16:39 - field of Interest so what I have here
16:41 - running right now is and it appears to
16:43 - be
16:44 - frozen pause wait what's going on oh no
16:49 - it's just not updating me very much oh
16:51 - because I'm doing it in a separate
16:53 - thread that's
16:57 - weird I got to start I got to start over
17:00 - again what's going on with this poor
17:01 - little
17:05 - example oh I am doing it in a separate
17:08 - thread that's what I
17:09 - forgot I don't know
17:12 - why it uh stopped updating oh because it
17:16 - starts running slower and slow okay I
17:18 - got to start over with go do this video
17:19 - again let's just uh let's just use 10
17:27 - points
17:28 - oh it's too
17:30 - fast all right fine I'm not going to
17:32 - worry about it ah I meant for this to
17:35 - not run in a separate thread but
17:37 - actually just but I did something Goofy
17:40 - with this particular example I
17:42 - forgot okay sorry everybody here we go
17:44 - we're going to make this happen now what
17:46 - whatever happens
17:47 - here hello welcome to another coding
17:50 - challenge in this coding challenge I'm
17:51 - going to explore the traveling sales
17:54 - person algorithm it's a classical
17:55 - algorithm that you'll find from kind of
17:58 - this thing known as computer science uh
18:00 - I want to talk about what the algorithm
18:01 - is I want to build a quick JavaScript
18:03 - example to demonstrate how to kind of
18:05 - program the problem and then I'm going
18:07 - to do several follow-up videos to look
18:09 - at different solutions to this
18:10 - particular problem and for you the
18:12 - viewer I want you to think about what
18:13 - are some creative applications could you
18:15 - make some kind of interesting line
18:16 - drawing visual art with it could you
18:18 - create a musical system uh could you use
18:21 - it for some sort of uh data
18:22 - visualization scientific simulation
18:24 - creative project in your field of
18:26 - Interest so I hope that you'll watch
18:27 - these videos get the example code play
18:29 - with it and make an application with it
18:31 - and share that application with me which
18:33 - I might share then with other people but
18:35 - whatever that's not the point the point
18:36 - is let's talk about this algorithm so
18:38 - this is currently a processing sketch
18:40 - I'm going to program this in JavaScript
18:42 - which is TR checking every single
18:44 - possible solution to what so let me walk
18:46 - the traveling salesperson so you know I
18:49 - think that um Pokemon
18:51 - go in the future some many years from
18:54 - now when somebody's watching this video
18:55 - of Pokémon go is the most irrelevant
18:57 - thing it'll be so annoying to watch this
18:59 - but um the problem is let's say you have
19:02 - a space and this could be a
19:03 - two-dimensional or a threedimensional or
19:05 - an n-dimensional space but we're going
19:06 - to work with a two-dimensional space and
19:08 - the problem is usually framed as there
19:10 - are a bunch of cities so here are
19:12 - several City a map of a bunch of cities
19:14 - or perhaps they a map of a bunch of
19:16 - Pokemon that you want to catch but
19:18 - you're a salesperson and you want to go
19:20 - sell your you know cating rainbow
19:22 - stickers or t-shirts or whatever in
19:24 - every city so you know I could go here
19:27 - and then I could go here and then I
19:29 - could go over here and then I could take
19:30 - the train here and I could fly here and
19:31 - I could go here and I could go here you
19:33 - could see that would be a path that hits
19:34 - every single City but it wouldn't be the
19:37 - shortest path and I could try to eyeball
19:39 - it and this might be an interesting
19:41 - application by the way idea what if you
19:42 - build a computer algorithmic system
19:45 - solving the optimal fastest solution and
19:48 - you have it compete with a person trying
19:49 - to draw that solution that could be an
19:51 - interesting interactive exhibit but you
19:53 - know we could try to say like oh maybe
19:54 - the optimal solution is something like
19:57 - uh this
19:59 - but you know that's just kind of a guess
20:00 - so we don't have to guess I could go
20:02 - back over here and this is a program
20:04 - that checked every single possible
20:08 - solution uh for and this is 12 points
20:11 - now you might think big deal how many
20:14 - possible ways are there to explore uh
20:17 - how many possible ways are there to
20:19 - connect 12 points well there's actually
20:21 - quite a few and it it it it and let's
20:23 - kind of explore that for a second so
20:25 - let's say there are only three points
20:28 - and the points are a b and c well let's
20:33 - look at all the possible ways a b
20:36 - c a c b b a c b c a I'm doing this in a
20:44 - specific order for a reason which will
20:46 - become relevant in a future video c a b
20:49 - CB a and if I did this correctly these
20:52 - are actually sorted in alphabetical
20:54 - order which is a kind of piece of this
20:56 - that's going to come up as I explore exp
20:58 - this further so you can see did I do
21:00 - this right there were three
21:01 - possibilities and there are there were
21:03 - three uh cities or three Pokemon there
21:06 - are one 2 3 four five six um six
21:11 - possibilities so the way you can
21:12 - actually calculate how many
21:13 - possibilities is 3 * 2 * 1 which is also
21:16 - known as 3 factorial and why is that
21:19 - because there are uh there are uh three
21:23 - possibilities for the first for the
21:25 - first letter and with each one of those
21:27 - there are two Poss possibilities for the
21:28 - second and for each one of those there's
21:30 - one possibility for the third so
21:31 - actually if you are if there are 12
21:33 - points there are 12 factorial possible
21:37 - ways of connecting all of those dots
21:39 - which if you pull up your calculator is
21:41 - a really really big number and when you
21:42 - go to 13 it's a really big number so
21:45 - actually like if I change this program
21:47 - right now to try to uh use like 20
21:51 - points watch how slowly it's going to
21:54 - complete all the possibilities we are
21:56 - going to be here till the Dawn Till the
21:59 - time the sun envelops the Earth and we
22:02 - we won't be alive then I guess but you
22:04 - know you get the point this is going to
22:06 - take a really long time um and if I even
22:08 - just go let's just go from 12 to 13 just
22:10 - to make this point a little bit more
22:13 - explicit um you can see now come on
22:17 - computer um you can see that it's still
22:20 - checking all the possibilities but even
22:21 - just to get to 1% of the possibilities
22:23 - is taking quite a while and this is a
22:26 - program that's written in Java that's
22:27 - running
22:28 - relatively fast okay so um people in the
22:33 - chat are posting the answers to these
22:34 - factorial questions I'm glad because I
22:36 - don't have them I don't have those
22:37 - numbers in my head so now let's let's
22:39 - start to program how how do we think
22:41 - about this program in a visual
22:42 - simulation this idea in a visual
22:44 - simulation so I'm going to move out of
22:46 - processing you'll be able to get this
22:47 - Java based processing code also in this
22:49 - video's description but I'm going to
22:51 - quit processing here uh I'm going to
22:53 - don't save that and I'm going to work in
22:55 - the browser which admittedly job
22:57 - JavaScript HTML 5 canvas is not the
23:00 - place where you're going to find your
23:01 - greatest power and speed from your
23:03 - computer but it's a place that we can
23:04 - kind of explore this idea and so what I
23:07 - have here is a simple JavaScript program
23:09 - it makes a canvas and it has a draw Loop
23:11 - so what I'm going to do is I'm going to
23:13 - create an array and I'm going to call
23:15 - that array cities but this could be
23:17 - anything please think more creatively
23:19 - what are the what are the things in your
23:21 - world that you need to find a pathway
23:23 - through and then what I'm going to do is
23:25 - I'm going to say uh let's just have
23:28 - three just to be simple about this I'm
23:30 - going to have three cities I'm going to
23:31 - say cities index cities index I equals
23:37 - create vector and I'm going to create a
23:40 - random vector and I'm going to do this
23:42 - as a separate line of
23:44 - code
23:46 - uh random width random height so a
23:49 - vector is just an object in p5js I mean
23:53 - it's you know the concept extends Beyond
23:55 - p5js but that stores an X and Y position
23:57 - it does more than than that but that's
23:58 - what we're using it for and so I want to
24:00 - create a bunch of those and then I just
24:02 - want to see those points in the window
24:05 - so I'm going to do that same exact Loop
24:07 - but I'm going to say Here cities. length
24:09 - and I'm going to actually make that a
24:10 - variable like total cities so it's
24:13 - something we can vary equals
24:15 - three and uh then uh instead uh then
24:19 - what I want to do is say I want to draw
24:21 - a circle at cities index
24:25 - I uhx City index i.y we make it Circle
24:30 - 4x4 pixels we'll say Phill 255 so it's
24:34 - white and I just want a little bit more
24:36 - room to write my code and then uh I'm
24:39 - going to hit refresh here whoops hit
24:40 - refresh here and you can see there are
24:42 - three cities picked randomly refresh the
24:45 - page I get three random cities so and
24:47 - you can see here you know if I just now
24:50 - go and say total cities 20 now I have 20
24:53 - but I want to work with a small number
24:56 - so I can sort of visually see see that
24:58 - things are working okay um am I
25:01 - recording this yes excellent all right
25:05 - so um let's go back to three cities
25:08 - let's make these a little bit bigger so
25:10 - you can see them and let's also uh
25:13 - whoops let's make this a little bit
25:15 - bigger and and I can make the console a
25:16 - little bit smaller okay so now what I
25:18 - want to do is start exploring possible
25:21 - orders well I have an order already
25:23 - actually the order that I have is in
25:26 - this City's array so I could sort of say
25:28 - this is an order and what I might
25:30 - actually do Beyond just draw those
25:31 - cities is draw a path between them so
25:34 - I'm going to say a begin
25:37 - shape end shape and instead of drawing a
25:41 - circle at each point I'm going to say
25:42 - vertex cities XY and I'm going to say uh
25:46 - stroke 255 I'm going to say stroke
25:50 - weight two just to give it a little bit
25:51 - of thickness so it's a little easier to
25:52 - see and I'm also going to say no fill
25:55 - and so now I'm going to run this and and
25:57 - we can
25:59 - see there we go now I just realized
26:01 - something what I want to do is Shuffle
26:03 - the array so what I want to do is I want
26:05 - to try these are now I'm getting uh I'm
26:07 - getting random uh every time I refresh
26:09 - but what I want to do in draw in that
26:11 - draw Loop is I want to shuffle that
26:12 - array to try different random orders so
26:15 - how do I do that so I have a feeling if
26:18 - I go and look up the Milla
26:20 - documentation for the array object in
26:23 - JavaScript there might be a kind of
26:25 - function that's part of the array
26:26 - prototype whoa what's a prototype did I
26:28 - just say prototype in a video um but in
26:30 - other words when I say prototype
26:32 - prototype being the sort of like thing
26:34 - that is in charge of every array that's
26:36 - ever made ever in JavaScript and there
26:38 - are some functions that I've explored in
26:40 - other videos like remove or splice or
26:42 - push that allow you to manipulate that
26:43 - array I I'm wondering if there's one
26:45 - that's called Shuffle whether or not
26:47 - there is I'm going to write my own
26:48 - function so I'm going to write a
26:49 - function and I'm actually going to call
26:51 - it swap not Shuffle and you'll see what
26:54 - it's going to do in a second it needs an
26:56 - array and it needs two index things so
26:59 - something that's going to be very useful
27:00 - in just about every scenario that I
27:02 - explore with the traveling salesperson
27:04 - is this idea of a Swap and this comes up
27:06 - all the time in different things you
27:08 - might want to program and do so in other
27:10 - words a swap is if I have an array that
27:13 - says a b c what if I want to pick two
27:15 - random elements like oh this one and
27:17 - this one and I want to swap their
27:18 - position so now the array is CB and I
27:22 - might use this if I do this with a
27:23 - genetic algorithm as later as a mutation
27:26 - so the mutation of a p path through all
27:28 - the cities is swapping two R cities
27:30 - randomly so let's look at how I might do
27:33 - that and uh I am going to say well so
27:37 - what you would think you might do is say
27:39 - a index I equals a index J and a index J
27:43 - equals a index I right this is the idea
27:46 - of a swap oops a index I this is the
27:48 - idea of taking an array and swapping two
27:51 - elements right put the element number
27:54 - three at element zero and put element
27:56 - number zero at element three the problem
27:58 - is if I set a index J equal to a index I
28:02 - I just reset a index I to a equal J so
28:05 - I'm actually setting a a index J to
28:07 - itself so in order to perform a swap I
28:09 - need to say this actually I need to have
28:11 - some temporary variable which is holds a
28:14 - index I so I keep track of what a index
28:17 - I is and then later once I I replace
28:21 - index I with j and then J can be equal
28:23 - to Temp so this is just a really simple
28:26 - uh a really simple algorithm for taking
28:28 - two elements of the array and swapping
28:29 - them and let's look at what happens now
28:32 - if what I do every time through draw at
28:34 - the end is I say swap cities and then oh
28:38 - I need two random IND indexes so I'm
28:40 - going to say uh I equals uh floor
28:47 - random uh uh cities.
28:52 - length and J is also a random value so
28:57 - I'm going to going to uh swap I and J
29:00 - and of course I you know I'm not
29:01 - guaranteeing that I don't pick the same
29:03 - one and swap an element with itself but
29:05 - big deal it's going to do this a bunch
29:06 - of times let's run this program again
29:08 - and you can see you know with three
29:10 - things there's not a lot of order
29:11 - possibilities but if I make this total
29:13 - cities 10 you can see now you can see
29:16 - how elements are being swapped and so
29:18 - it's doing this very fast but I'm
29:19 - exploring a whole lot of
29:21 - possibilities okay so now what can I do
29:25 - what I want to do just to kind of
29:27 - explore this in a Brute Force way is as
29:29 - I'm trying all these different
29:31 - possibilities I want to calculate what
29:33 - is the distance traveled through this
29:35 - particular order and if that distance is
29:37 - the best one I've gotten so far let's
29:39 - save it um so let's do that uh as the
29:43 - following so one thing I need to do I
29:44 - think it might be useful to write a
29:46 - function that calculates the distance uh
29:49 - between every point in an array so I'm
29:51 - going to write uh another function down
29:53 - here at the
29:54 - bottom and I'm going to call this
29:57 - function
29:58 - uh Cal distance and it's going to get uh
30:02 - a list of
30:03 - points right so I'm getting a function
30:06 - it gets an array of points and the whole
30:08 - point of this function is now to return
30:10 - the total distance between all those
30:11 - points in the order that they are so I
30:14 - need some sort of sum that starts at
30:15 - zero I need a loop where I start at zero
30:20 - I go all the way through the length of
30:23 - that array and I say what so if this is
30:27 - my
30:28 - uh this is my order I want to know this
30:30 - distance plus this distance plus this
30:33 - distance plus this distance so I always
30:34 - want to know the the distance between I
30:37 - and I + 1 and then this becomes I and
30:39 - this becomes I + 1 etc etc so if I come
30:42 - back here I'm going to
30:44 - say uh VAR D equals distance between
30:50 - points index i dox Points index I doy
30:55 - points uh index I Plus
31:00 - 1.x points index I +
31:03 - 1. y okay and then I'm going to add that
31:07 - sum plus equals D and then I'm just
31:10 - going to return the sum so by the way
31:12 - this is a function in P5 that calculates
31:15 - the distance for you between two points
31:17 - so I'm giving it points index I X and Y
31:19 - points index I + 1 X and Y so that
31:22 - should be the now later I'm going to
31:24 - optimize this because this is actually
31:25 - going to be kind of a slow oper to
31:27 - calculate distance and there's a way
31:29 - later that I may I could speed this up
31:30 - and when I'm trying to do this zillions
31:31 - and gazillions of times speeding it up
31:33 - could be a good thing okay um now what
31:37 - I'm going to do is I'm going to
31:41 - say uh I want to have a variable called
31:44 - record distance now uh so the first
31:48 - thing I want to do is whatever order
31:51 - this array is calculated in first I want
31:53 - to
31:53 - know Cal distance
31:58 - of cities right calculate the distance
32:00 - for this array cities and then the
32:03 - record distance is that first distance
32:06 - so I'm going to try I'm going to get a
32:08 - random set of points I'm going to get a
32:09 - distance between those and that's my
32:11 - best so far then remember down here I
32:14 - did a swap so I shuffled it around so
32:17 - once I did a swap let's calculate that
32:21 - distance
32:23 - again uh of cities and and then if that
32:28 - distance is less than the record
32:33 - distance then record distance equals
32:37 - that distance so this is me just
32:40 - checking all like randomly swapping
32:42 - things around this again is not going to
32:44 - be an efficient algorithm for solving
32:45 - the traveling sales person I'm building
32:47 - it this way just to show what the
32:48 - problem is and how kind of impossible it
32:50 - is to find that optimal solution uh with
32:52 - a with a certain number of points so
32:54 - what I want to do here is just say uh
32:58 - console oops what I want to say is
33:01 - console.log record distance so we can
33:04 - kind of look at these values as I'm
33:06 - finding them so let's run this program
33:09 - now oops uh sketch. JS line 55 what
33:13 - mistake did I make
33:16 - [Music]
33:18 - points uh okay uh I get a list of points
33:21 - ah of course I meant to I I made this
33:25 - mistake on purpose and because wanted to
33:27 - correct it later and then I forgot about
33:29 - it so what's the problem here remember
33:31 - I'm checking in the array element I and
33:33 - the next one i+ one so I can't go to the
33:36 - end of the array because if I go to the
33:37 - end of the array there's no i+ one
33:39 - there's no element after the end of the
33:40 - array I don't actually care because
33:42 - that's the end of my journey that's the
33:44 - end of my traveling to catch all my
33:46 - Pokemon or whatever is I'm doing so
33:48 - later somebody will dub this video over
33:50 - with whatever is the newest thing like
33:54 - um I don't uh never mind I don't know
33:56 - what the newest thing will be won't be
33:58 - Pokemon it'll
34:02 - be okay uh so I need to add a minus one
34:05 - here so I don't go to the last one okay
34:07 - uh now we can see uh I'm getting these
34:09 - nice uh so far uh I had a distance of
34:14 - 105 uh which was the record and at some
34:16 - point it got a distance of 76 and then
34:18 - it got a distance of 19 pixels through
34:20 - all of those points that seems kind of
34:22 - insane to me that must I don't know if
34:23 - we're ever going to beat that record in
34:25 - a while so let's run this one more time
34:27 - uh and see like yeah so you can see
34:29 - that's optimizing now I'm not saving
34:31 - what that optimal uh what that optimal
34:34 - uh path is so that's the next step that
34:37 - I want to look at so I might need your
34:40 - help in the chat here I'm not really a
34:43 - JavaScript programmer that's a
34:45 - confession I have to make to you and I
34:46 - know I feel like in the let's look
34:48 - actually so there must be a way I want
34:50 - what one thing I want to do is make a
34:51 - copy of an array I'm going to need to be
34:52 - able to do that because if I have an
34:54 - array with an ordered list of vectors I
34:56 - I want to be able to like save a version
34:58 - of that if it's a really good one and I
34:59 - could write my own function to copy an
35:01 - array and I'm kind of tempted to just do
35:03 - that to know that it works but let's
35:04 - let's take a minute in this video to and
35:07 - somebody in the chat will um oh did I
35:09 - forget return some oh thank you no
35:12 - wonder this is a big bug I just had by
35:15 - the way somebody in the chat just
35:16 - mentioned I had another bug where I was
35:17 - returning D which makes no sense at all
35:20 - because I'm just returning the last
35:21 - distance which of course why that value
35:23 - didn't make any sense so return sum is
35:25 - correct so let's run this again to take
35:27 - a look at it there we go these values
35:29 - make much more sense right so you can
35:32 - see like it's you know thousands of
35:33 - pixels between all these points and you
35:35 - can see the the best one that I've
35:36 - gotten so far okay so I'm running that
35:38 - now let me go back to what I was doing
35:40 - is I'm going to go to a Milla uh uh
35:44 - developer doc array something like this
35:47 - I'm Googling that to get to here and
35:50 - what I want to look for is like what are
35:52 - all of the available functions things
35:54 - that I've used I've used push which is a
35:57 - function in Array that adds an element
35:59 - to an array reverse o I might need to
36:01 - use reverse later unshift there's so
36:03 - many things I might use but I'm looking
36:05 - for one I think slice might do this for
36:08 - me the slice method returns a shallow
36:11 - copy of a portion of an array into a new
36:13 - array object let's explore if this is
36:16 - what's going to work for me so I'm just
36:18 - going to go over here this is how I like
36:20 - to figure things out I'm going to go
36:21 - into the console here while this is
36:23 - running and I'm just going to make an
36:24 - array that's like 1 5 six
36:28 - uh and I'm going to look at that array
36:30 - it's 156 now I want to say b equal a do
36:34 - slice what does that give
36:35 - me B is also 156 that's good that's what
36:39 - I need what if I say now B uh index uh 2
36:45 - equals
36:47 - 7 157 and a is still 156 so this should
36:51 - work for me and I believe shallow means
36:54 - because I'm actually not putting numbers
36:56 - in there I'm actually going to put
36:56 - arrays in there sorry vectors in there
36:59 - that though those it won't copy the
37:01 - vectors it's just going to copy the
37:02 - array and that's exactly what I want
37:04 - because I want to keep that same list of
37:05 - vectors it's just the the arrays are
37:07 - pointing to the same Vector object but
37:09 - in a different position in the array so
37:11 - this is going to work uh po perfectly uh
37:14 - for me uh it's uh so uh hopefully I got
37:17 - that explanation right and things are
37:18 - going to work people in the chat are
37:19 - giving me good advice about shallow copy
37:21 - I might have messed up that explanation
37:22 - I'll correct it as I continue to talk in
37:24 - this video yes you are watching a video
37:27 - of a person teaching about programming
37:28 - who really does not know what he's doing
37:30 - okay so um let's come back and let's say
37:34 - what I want to do is I'm G to say best
37:37 - ever and what I want to say here is uh
37:41 - best you know you know there was a show
37:43 - that I used to watch back be when I
37:45 - watched television which I don't have
37:46 - time for anymore which was called best
37:47 - week ever so this is best I guess that's
37:50 - from you know there's the whole Simpsons
37:51 - thing best anyway whatever never mind
37:53 - best cities path ever is cities to start
37:57 - and then every time I find a record oh
38:00 - no it's uh I want to actually say do
38:02 - slice I want a copy of it and then uh
38:06 - every time I I get a record I want to
38:08 - say uh best ever is Ci's slice so just
38:12 - to see if this is working what I want to
38:15 - do is I want to draw the path twice I
38:20 - want to draw the current cities and I
38:23 - want to draw the best ever and I'm going
38:25 - to make the best ever uh thicker and
38:29 - some uh pinkish purplish color and I'm
38:32 - going to make the current cities thinner
38:35 - and white so let's run this yeah this is
38:37 - working so I think it's I believe this
38:39 - is doing um uh what I wanted to do which
38:43 - is just randomly swapping things and
38:46 - every time and we can look here and see
38:48 - that oh I took the print line out but
38:50 - you can see the pink path is currently
38:53 - the best path that it's got now with 10
38:56 - points I can see here like this is no
38:59 - good like over here this part is like
39:01 - terrible because look at them Crossing I
39:03 - could easily myself just design like go
39:06 - here I can't I can't do this like people
39:09 - who do the weather on television are
39:10 - like so good at this I could go here
39:12 - then I could go here then I could go
39:15 - there then I anyway you could see how
39:16 - you could easily design a more efficient
39:17 - path so this isn't going to get us that
39:19 - most efficient path that's what future
39:21 - videos that I'm going to go into the
39:22 - next steps are going to explore but
39:24 - let's just see that this program is
39:25 - working by just having Four Points
39:27 - because I think we can probably visually
39:29 - see that looks like the best path
39:31 - between those four points same there it
39:34 - looks like it's kind of finding it
39:36 - rather quickly right you can kind of
39:38 - imagine you know arguably is it going to
39:40 - be better I don't think so but you can
39:42 - see it's going to randomly kind of try
39:44 - every possibility with Just Four Points
39:46 - rather quickly we can even try five
39:48 - cities and you can see that it's kind of
39:49 - finding it so you know you know if I
39:51 - slow this down if I draw it more
39:53 - artistically if I allow the user to
39:55 - interact with it by
39:56 - adding points I mean that's sort of an
39:58 - interesting thing right um a dare I I
40:01 - don't um you know these are might be
40:02 - some things that you can explore so I'm
40:04 - kind of finish with this first video
40:07 - demonstrating the traveling I don't know
40:08 - what the Bell does but it's a thing um
40:11 - uh uh with this um traveling salesperson
40:14 - problem in the next video what I'm going
40:16 - to do is show you how to not just
40:18 - randomly swap points to try a bunch of
40:20 - different possibilities but actually
40:23 - sort an array of numbers with every
40:26 - single possible premutation so we can
40:28 - actually just try every single
40:29 - possibility in order which I think has
40:31 - some kind of interesting creative
40:32 - applications to it as well so I'm going
40:34 - to do that in the next uh next video
40:37 - okay so thanks for watching this one and
40:38 - the the next video will follow up on
40:40 - this uh okay talk to you
40:43 - soon okay everybody hey I felt like that
40:46 - was a kind of reasonably good
40:49 - video how are we doing TimeWise
40:52 - 11:30 okay we've got a lot to sort of
40:56 - solve and
40:58 - do but it's not out of the question to
41:00 - finish this so I'm going to pull up a um
41:05 - I'm going to see if I'm
41:07 - gonna
41:12 - um today the way I was trying to be
41:16 - professional but you know I have to do a
41:18 - little bit of dancing to kind of get my
41:19 - energy going
41:22 - here as always I always forget the this
41:24 - dot this dot this dot this
41:31 - okay so the next thing I want to do and
41:33 - there was I was reading on the subway
41:35 - this morning as I'm apt to do uh
41:38 - lexo graph I'm not getting this right I
41:41 - why kind I how come I can't remember
41:43 - what it's called but there was ah here
41:45 - we go this was like a really really good
41:49 - post kind
41:52 - of uh which is and this is like really
41:55 - killing my my
41:59 - computer so this I want to refer to
42:01 - which is how would you explain an
42:03 - algorithm that generates permutations
42:04 - using lexicographic ordering so I want
42:07 - to talk about what lexor graphic
42:08 - ordering is use it to get every
42:11 - possibility and then write the program
42:13 - to check every
42:14 - possibility so Christopher Freeman asked
42:17 - what is the point of the traveling sales
42:20 - person so I you
42:22 - know this is that's a really good
42:25 - question this do this do never forget
42:28 - this Dot and whoops hold on I can't see
42:31 - myself in my preview window now I can um
42:33 - so this is a good question and you know
42:35 - on the one hand the problem is just an
42:39 - interesting uh theoretical exercise in
42:42 - looking at a a search problem where
42:45 - there are so many possibilities how can
42:47 - you check every possibility how could
42:48 - you use a genetic algorithm could you
42:49 - use another machine learning technique
42:51 - to sort of solve it so in some sense
42:53 - it's an academic exercise now I have a
42:55 - feeling if you go to the the Wikipedia
42:56 - page there are lots of actual real world
42:59 - applications to the traveling
43:00 - salesperson you know efficiently placing
43:03 - you know markers along a like Marathon
43:06 - route or something you know I'm like
43:07 - sort of making up something but you know
43:09 - kind of like almost like you might think
43:10 - of you know computational geometry
43:13 - problems uh you know how do you how do
43:15 - you see every painting in a museum you
43:17 - know most quickly um that type of thing
43:20 - but what I'm asking you I think the
43:22 - viewer is to think about um is to think
43:26 - about creative applications you know how
43:28 - might you just create an an interactive
43:30 - system you know not the goal here for
43:32 - you watching this might not be to say
43:34 - like I just want to solve the traveling
43:35 - sales person as fast as possible but I
43:36 - want to make some kind of like musical
43:39 - composition tool that plays a song where
43:41 - each point is a note and the notes are
43:43 - changing order based on like some sort
43:45 - of like traval sale you know would you
43:47 - could you what kind of you
43:49 - know you know in the genius that is
43:51 - Mozart all of these you know kind of
43:53 - like fractal patterns exist in music you
43:55 - know and not try the sales person
43:56 - doesn't have anything to do with that
43:57 - necessarily but that's what I'm kind of
43:59 - looking for you to kind of think of okay
44:01 - so I got to get moving here uh as you're
44:04 - thinking about that um and I I was
44:06 - running late this oh I'm I'm I'm out of
44:08 - paper towels because of my water
44:09 - explosion hold on a second I will be
44:13 - back I think I can actually still talk
44:16 - to
44:23 - you okay here I am back
44:28 - uh here I am
44:31 - back uh so I am erasing erasing
44:36 - erasing and I want to talk about
44:41 - lexic lexicographic order which is
44:45 - basically similar to
44:49 - uh uh which is very similar to um uh
44:54 - alphabetical order with some subtle
44:56 - distinctions and I want to do a CO okay
44:59 - so let me get myself set up here
45:01 - traveling I need to go to here I need to
45:04 - duplicate this
45:07 - uh and I'm going to do uh Lex
45:11 - Lexi I should just say alphabetical
45:14 - lexicographic
45:17 - order uh and I want
45:20 - to look at this so now that's in my Adam
45:24 - window I'm going to get rid
45:27 - of everything
45:30 - here
45:32 - uh um you have to excuse me for a second
45:36 - as I work this out to get
45:39 - ready uh oh I might need swap I'm Gonna
45:42 - Leave swap as a
45:44 - function okay so what I want to
45:48 - do
45:50 - and yeah okay I'm thinking I'm thinking
45:53 - I'm thinking I'm thinking I'm
45:54 - thinking uh
45:56 - uh oh no I want to leave this and now I
45:58 - need to go back here and refresh okay
46:02 - let's do this
46:07 - okay so I think I'm not going to explain
46:11 - away the entire um
46:14 - algorithm uh lexical order thank you uh
46:18 - be but I'm going to refer to this page
46:19 - and it'll be a link in the description
46:21 - you can read this through it's super
46:23 - thorough and uh Fascinate great
46:25 - explanation
46:26 - of this problem but the sort of answer
46:28 - to how to do it is right here and I'm
46:29 - going to read that through and follow
46:31 - implementing that in the code which will
46:32 - kind of be uh at least demonstrating how
46:35 - to do it and for those of you that are
46:36 - interested in more uh and um I just want
46:38 - to kind of like practice in my head for
46:40 - a second ah forget it yeah no no no let
46:42 - me think uh I want to do this twice
46:45 - never mind I'm just going to do this
46:46 - live in the video tutorial how bad how
46:49 - bad could it be forget about this
46:50 - practice thing okay here we are let me
46:53 - cycle the cameras
47:00 - and I have about an hour or so left to
47:04 - go I think that's pretty good this
47:05 - should be 10 to 20 minutes tops
47:08 - hopefully there won't be any like power
47:09 - outages or sound blowing up things and
47:12 - here we go oh let
47:17 - me um hello welcome to another coding
47:21 - challenge video in this coding challenge
47:23 - I'm going to look at something called
47:24 - lexicographic
47:26 - ordering and look at an algorithm for
47:30 - solving lexicographic which for some
47:32 - reason I can't say but you can say
47:33 - lexical for short so I'm going to say
47:35 - lexical ordering just kind of like
47:36 - alphabetical ordering um and we're going
47:38 - to look at how that works make a little
47:40 - algorithm that solves it you might have
47:41 - some creative ideas about how to
47:42 - visualize it or make something out of it
47:44 - and then I'm going to apply it to the
47:46 - traveling salesperson problem to look at
47:48 - how we can look at every possible path
47:50 - through a set of cities okay so let's
47:52 - just talk for a second about what
47:53 - lexical thank you very much or ordering
47:56 - is and I'm going to come do that over
47:57 - here so let's just say I kind of did
47:59 - this before but um let's just say I have
48:02 - the letters a b and c so these are
48:06 - actually sorted in alphabetical order
48:08 - right a comes before b b comes before c
48:12 - but what if I want to know the next
48:15 - ordering of these that's also the next
48:18 - order in alphabetical order like I could
48:20 - say like here's another order C ba a or
48:23 - here's another order b a c but neither
48:26 - of these are the next order in
48:27 - alphabetical order now I could tell you
48:29 - that the next ordering in alphabetical
48:31 - order is a CB right because a should
48:34 - come first well B already came second
48:36 - the only other possibility is C and then
48:38 - the only thing left is B and then we can
48:40 - think okay well I I tried all the a
48:42 - possibilities so the next in
48:43 - alphabetical order and by the way
48:45 - lexical order and alphabetical order are
48:47 - very similar Concepts is a sort of
48:48 - subtle distinction which has to do with
48:50 - how numbers or dates are kind of treated
48:52 - in the way you might sort things in kind
48:53 - of the computer way this is this is by
48:56 - the way my version of the computer way
48:59 - um so uh but I'll let you read about
49:01 - that in this page that I'm going to show
49:02 - you that has more information so um uh
49:05 - so I could say B and then what would be
49:07 - next in alphabetic order would be a and
49:08 - then all I have left is C so B is next
49:11 - and then C and then a and then C then a
49:13 - then B then C then B then a so I could
49:15 - do this rather easily myself but you
49:18 - know if I have a b CDE e f g hi I it's
49:22 - going to be a little bit harder although
49:24 - not that much harder because honestly
49:26 - it's just going to be a b CDE e f g i
49:29 - then H right you can sort of imagine and
49:31 - there's this swapping so what we need is
49:32 - an algorithm to do this for us and then
49:35 - print out every single possible ordering
49:37 - because what I'm ultimately going to do
49:38 - with this is actually use these as
49:40 - indices into an array that has different
49:43 - cities in it so you know Baltimore New
49:46 - York London I don't know I shouldn't be
49:49 - so us Europe Centric everybody in the
49:53 - comments give me some better cities to
49:54 - use in my next example
49:56 - um um but so you could see you could
49:58 - imagine this going to be 012 02 1 uh 1
50:01 - 02 1 2 0 two I don't know if I'm getting
50:05 - this right two one 2 one0 something like
50:08 - that so hopefully I got that right but
50:10 - this is what I want to do and I want to
50:11 - try the cities in all of these orders so
50:13 - let's go back over here and I found this
50:16 - wonderful page on the subway this
50:18 - morning that I read in my Google search
50:21 - which was a quora post that says how
50:22 - would you explain an algorithm generates
50:24 - permutation using lexographic ordering
50:28 - so the wonderful thing about this answer
50:30 - by Michael for which I'm sure I'm not
50:33 - pronouncing correctly somebody will have
50:34 - to um oh people are giving me great
50:37 - cities quala Lampur Rio Coventry UK so
50:41 - uh let's be International uh coding
50:44 - rainbow here in this uh thing that I'm
50:45 - doing YouTube but so for the impatient
50:48 - here's the actual algorithm so what I'm
50:49 - actually going to do in this uh video uh
50:52 - is just kind of read through this
50:54 - algorithm uh and sort of talk you
50:55 - through it and implement it and I would
50:57 - suggest to you that if you want to find
50:59 - more about it you can kind of read
51:01 - further down this page where the author
51:03 - provides uh an example scenario of an
51:06 - example order how the algorithm plays
51:08 - out with that example and then also
51:09 - deres this algorithm but I'm going to
51:11 - kind of leave that aside as kind of and
51:13 - I just want to kind of like I think you
51:14 - might have an intuitive or kind of sense
51:16 - of how it works just by implementing it
51:18 - so first let's get ourselves set up to
51:20 - do this um what I want is to have an
51:23 - array I'm going to start with an array
51:26 - uh I'm going to call it uh
51:28 - valve yeah that's fine and I'm going to
51:30 - have it be 0 1 two we're just going to
51:32 - start with three numbers so that we can
51:34 - see that it
51:37 - works and what I want to do now in draw
51:41 - is uh first I want to um what happens if
51:44 - I do uh
51:46 - console.log vs so let's just look at
51:49 - that uh and run this we can say okay so
51:53 - that's good I'm getting I'm seeing here
51:54 - in the console the current order of the
51:56 - array so I want to see it as I do each
51:59 - permutation one at a time so if I go
52:01 - back to this explanation first find the
52:04 - and let me zoom in on this so you can
52:05 - see it better find the largest X such
52:08 - that P index X is less than P index x +
52:12 - one okay so what does that mean I you
52:14 - often we think of i as the index not X
52:16 - but what we're looking for is what's
52:18 - which where is there something in the
52:20 - array the highest the the the the
52:23 - element closest to the end of the array
52:25 - where its number is less than the last
52:27 - number so and intuitively right now we
52:30 - can say like which one is that it's this
52:31 - one right and if honestly if this were
52:34 - the array 3 four five six 7 it would be
52:37 - this one right right now the last
52:39 - element of the array who is that is less
52:43 - than the one next to it is when it's in
52:45 - order is always the second to last one
52:47 - but we should write an algorithm to make
52:48 - sure of that so the first thing I want
52:50 - to say is largest I largest I I'm going
52:54 - to assume it's zero
52:56 - then I'm going to Loop
52:58 - through the entire
53:01 - array and what I want to do is say Okay
53:04 - um if Val's index I is less than Val's I
53:09 - +
53:10 - one then largest I equals I and I can't
53:15 - can't go to the very end right so I want
53:17 - to find what is the largest and you know
53:19 - what I really need to do I want to start
53:21 - with this as negative one because I want
53:23 - to start with an invalid index because
53:26 - if I don't find anything that's going to
53:28 - be important if we go back to this
53:29 - algorithm if there is no such X that
53:32 - means we finished so what I wanted to
53:34 - add here is say all right here after I
53:36 - do this
53:37 - Loop if largest I equals ne1 no Loop you
53:43 - know uh
53:45 - console.log finished no Loop is a
53:48 - function in P5 that just stops this
53:50 - animation loop from from going okay so
53:53 - we can see that here I've kind of
53:54 - implemented
53:55 - let me let me I've implemented step one
53:58 - of the algorithm and let me just in the
54:01 - code here just add a link to this
54:02 - article that I'm using just so I don't
54:04 - forget to do that
54:05 - later uh okay
54:08 - now find the largest y or you might
54:11 - think sort of in this I'm going to use J
54:12 - because I'm used to using I and J as
54:14 - index values find the largest y such
54:17 - that the index X that I just found
54:21 - that's the largest one is less than y so
54:24 - let's think about that right so let's
54:26 - say I think I might need a diagram for
54:28 - this oh yeah I have my
54:31 - uh so let's say we
54:36 - um let's say we have a bunch of numbers
54:38 - 0 1 2 5 6 8 four three right let's find
54:46 - the first let's find that largest X
54:48 - which I'm calling largest
54:50 - I such that the uh such that the that
54:54 - the uh the value in the array the the
54:58 - index is less than um less than the one
55:01 - after it which would be here so uh 0 1
55:04 - two 3 four so this is four now so what's
55:09 - the next
55:11 - step whoops the next step is find the
55:14 - largest y such that P of X is less than
55:18 - P of Y not of P index X so I now need to
55:23 - find whichever one in here
55:26 - is high is actually less than this
55:28 - number six and that's actually here
55:31 - right this one is the largest one that's
55:34 - less than the number six so uh so if we
55:37 - come back to the algorithm and I
55:40 - Implement that what I want to do
55:43 - is for I need to go through and I'm
55:45 - going to use
55:50 - J I'm going to go through the array
55:53 - again and I'm going to going to say uh
55:56 - largest J equals uh uh -1 so what I want
56:03 - to do is here the largest y such that P
56:06 - of X is less than P of Y P index X so
56:13 - if if Val's index J is less than Val's
56:20 - index largest I which was X then
56:25 - largest J equals J so now I have largest
56:29 - I and largest J I have both of those and
56:32 - I don't think I need length minus one
56:34 - here because I can check all of
56:36 - them we'll find out now ah swap P index
56:41 - X and P index y now you might have come
56:43 - to this video without watching the
56:45 - previous one I made on traveling
56:47 - salesperson but in that video I look at
56:50 - a quick little algorithm for swapping
56:51 - two elements of an array and here's the
56:53 - function that does that right I I have a
56:55 - function called swap I receive an array
56:57 - I receive an i and a j I save the value
57:00 - that's at a index I I put the value
57:02 - that's at J in I and I put the value
57:04 - that was at I in J so now all I need to
57:06 - do is say swap largest I largest J right
57:13 - and then reverse oh boy so this is kind
57:16 - of a funny thing but what I also now
57:18 - need to do is reverse everything that's
57:20 - between x + 1 to n now how do do I do
57:25 - that this is going to be a little bit
57:28 - goofy
57:30 - um okay I'm thinking here I kind of want
57:34 - to have an edit point in this video I'm
57:36 - gonna have an edit point in this video
57:38 - this will be all for you live streamer
57:39 - archive viewers
57:41 - now um because I know how I could do
57:44 - this I know I know there's a reverse
57:46 - function what I'm curious about
57:49 - is I I uh does the reverse function take
57:53 - arguments
57:56 - no it only you can't reverse a certain
57:59 - section of the array but what I could do
58:01 - is slice out that section reverse it and
58:04 - then put it back in that might make
58:07 - sense
58:09 - right
58:10 - um I'm waiting for the chat to give me
58:13 - some good
58:14 - JavaScript uh suggestions so let me let
58:17 - me explore this for a
58:19 - second
58:21 - um oh wait whoops uh let me take out
58:24 - this concept . log oops no not that
58:31 - one uh
58:35 - slide o somebody is telling me there's a
58:38 - function called
58:40 - slide no I don't see that here is that
58:44 - yes splice reverse and append right
58:47 - that's what I was
58:49 - ah great
58:51 - idea thank you Oliver in the chat so
58:54 - let's explore
58:56 - that uh I I think that's enough for me
58:58 - to just now put it go back into the
59:00 - video rather than explore it okay so
59:03 - where was I I don't know what I was
59:05 - looking at when I said I was gonna I
59:07 - think I was just looking at the
59:09 - code yeah okay splice index
59:14 - reverse well that really but that
59:22 - um uh there's some people are talking
59:25 - about the titles of these live streams
59:27 - that's interesting I think I'm going to
59:28 - do it the multi-step way even though I'm
59:30 - sure you could be there's so many things
59:31 - you could do in JavaScript in fancy
59:33 - functional programming array map reverse
59:35 - SCE splice but uh it's too much for
59:38 - me okay oh boy I want to get to genetic
59:41 - algorithms which I which I've got to I
59:43 - got to move this along here okay so
59:48 - um okay
59:52 - so yeah maybe I was looking at this yeah
59:54 - I was
59:58 - here I'm back from thinking about and
60:01 - talking with the chat about how to do
60:03 - this last step reverse so but first
60:06 - first let me let's see we did we did
60:08 - steps two and steps three let me at
60:10 - least add some this is a step two and
60:13 - this is
60:15 - now step three and what I want to do for
60:18 - step four and let me write this out is
60:21 - uh reverse from X oh largest I + 1 to
60:29 - the end right so what I want to do is
60:32 - reverse everything that's from largest I
60:34 - + one to the end of the array okay so
60:37 - one thing that I could do I think a way
60:39 - that I could do this thank you to the
60:40 - chat again is I can say um I'm just
60:43 - going to call this end
60:45 - array uh and I'm going to say I'm going
60:47 - to say val. splice now if you remember I
60:51 - don't know what you remember this from
60:52 - but if I go back to the uh my array
60:55 - documentation page I'm going to look at
60:56 - splice not slice splice what splice does
61:00 - is it takes a start index and then an
61:04 - amount of things you want to delete out
61:05 - of the array but not only am I deleting
61:07 - them out of the array I'm actually
61:08 - getting them as a separate array so what
61:10 - I can actually do is say vs. splice from
61:14 - largest I and then how many things do I
61:17 - want I want um I think that the length
61:21 - is the array's length minus largest I is
61:25 - that right like if the array has five
61:28 - things in it and I want and my largest I
61:30 - is uh that's 0 1 2 3 4 is at two 5 minus
61:37 - index 2 O minus one right
61:42 - Val length minus largest I minus one I
61:45 - believe is right that's the length that
61:47 - I want to splice out um let's let's uh
61:51 - let's confirm that let's let's debug
61:52 - this to be sure
61:55 - uh one uh you know 5 6 7 8 n and what I
61:59 - want to do is I want to say a do splice
62:01 - what happens by the way if I just give
62:03 - it the index like two so two should be
62:07 - uh 0 one2 5 six at
62:09 - seven ah so I don't even need that last
62:11 - argument splice will do it for me I
62:13 - don't need to calculate the length
62:15 - brilliant then I can say end array uh.
62:19 - reverse now does that actually change
62:21 - the array itself a. reverse
62:26 - whoa oh oh a Is that ah start over let's
62:32 - worked it out a a is this array now B is
62:35 - a. Splice 2 so now I have that as B
62:40 - maybe I need to make this bigger so you
62:41 - can see this now I want to try to
62:43 - reverse that b do
62:46 - reverse but what is the b h it does
62:49 - actually reverse the array itself not
62:51 - just create a new array that's returned
62:52 - back so now all I need to to do is say
62:55 - end array
62:56 - reverse and then what I can do is say
62:59 - vs. append I can just put it back so
63:02 - what I did is I took the end of the
63:04 - array off I reversed it and then I put
63:07 - the end of the array back on which is
63:09 - essentially doing exactly this piece of
63:12 - the algorithm reverse uh X plus one and
63:15 - did I add the plus one in there I think
63:17 - I did ah plus one okay so I need to add
63:21 - that plus one in there so this is done
63:23 - I've done step one step two step three
63:25 - and step four now what we should be able
63:27 - to do is look at those
63:31 - values and um whoops and I should be
63:34 - able to run this again and sort of see
63:37 - what happens whoops uh aen vs. append is
63:42 - not a function hey append is not a is
63:45 - not an array oh push must be
63:47 - push there's no aen function must be
63:50 - push push must you must be allowed to uh
63:52 - push a full array right the ele elements
63:54 - to add to the end of the array and you
63:56 - can push you probably can push another
63:58 - array right I'm pretty sure you can so
64:01 - let's try
64:03 - push and see if this
64:06 - works uh and okay this is too many
64:09 - things for me to see let's just do it
64:11 - with let's run a quick little test
64:13 - here
64:16 - and oh no no no no no no no no so how do
64:19 - I concat maybe it's concat concat
64:22 - because you can see what it did is
64:23 - actually just push the full array on
64:25 - there which is not what I want to do so
64:26 - let's go back and fix that it would be
64:28 - nice if I knew what I was doing wouldn't
64:29 - it uh I guess you're seeing the process
64:31 - of how things are figured out by people
64:33 - who don't know what they're doing uh oh
64:36 - no no no vows. concat let's look at
64:40 - concat we're getting close uh
64:43 - concat uh the concat method returns a
64:46 - new array so I've got to set it back
64:48 - equal to itself there's probably some
64:51 - sort of slightly more efficient way of
64:53 - doing this but this will do just fine
64:54 - for us right now there we go up all
64:57 - right
64:58 - so I'm getting something but I'm missing
65:02 - something so uh I have got to uh uh I
65:06 - could use push. apply but I'm trying to
65:08 - so there's some fancy JavaScript ways I
65:10 - could do this but I'm going to I'm going
65:11 - to try to uh kind of get around those
65:14 - ways so something is going wrong here um
65:17 - so what I want to do is I actually want
65:20 - to take this I um what I want to um
65:24 - actually just uh say uh no
65:27 - Loop and I want to be able to look at
65:29 - this running one at a time so a way that
65:31 - I can in P5 by the way is is run each
65:34 - draw Loop one at a time one as I can
65:36 - just say
65:38 - redraw I thought I could at
65:41 - least oh I have do I have no Loop in
65:44 - here let's take that
65:45 - out do I have console.log maybe I took
65:48 - out the console.log whoops console.log
65:53 - vals
65:54 - yeah okay so I'm getting the same array
65:57 - each time and maybe the call to swap is
66:01 - incorrect someone in the chat is saying
66:03 - so let me look this up this I'm now in a
66:05 - debugging portion which maybe we'll edit
66:08 - I'll edit maybe this should get edited
66:09 - out but I guess it staying in swap so
66:11 - let's look and see what we're getting if
66:13 - we're getting values that make sense so
66:15 - the first thing I want to look at is
66:17 - largest
66:21 - I and then I want to look at
66:24 - largest J which is probably I'm guessing
66:27 - I did something wrong
66:29 - there and then I want to look so let's
66:32 - just look at that for a second so the
66:35 - largest I is one which makes sense
66:38 - that's the largest index where it is
66:40 - less than um
66:44 - two uh now the largest J is if we look
66:48 - at the algorithm is the largest J such
66:52 - that ah I have my code code is
66:54 - wrong look at this this should
66:57 - be largest I is less than J if we look
67:01 - at that algorithm again that makes total
67:03 - sense that I'm looking for the the
67:05 - element of the array furthest along
67:07 - that's actually greater than the one
67:08 - that I just found so that should uh that
67:11 - should fix things up here uh and then if
67:14 - I say
67:16 - redraw okay so that's a little bit
67:19 - better i' I've made an improvement here
67:22 - that um I'm finding let's uh Let me
67:24 - refresh
67:26 - this uh that the largest is one and then
67:29 - the largest J which is two which is
67:33 - greater than what I just found is the
67:35 - last element that's
67:37 - correct and ah I've got a terrible error
67:41 - here bad bad sad little bug I just like
67:44 - had a brain malfunction when I wrote
67:46 - this swap function it's like swap
67:48 - largest I and largest J but swap it with
67:51 - what and the chat just pointed it out to
67:53 - me the way that I wrote this function is
67:55 - I've got to say here's the array that I
67:57 - want you to swap these elements in so
67:59 - I've got to actually put that array in
68:01 - there which is
68:02 - vals so let's redraw and we can see ah
68:06 - there we go now we can see the order is
68:08 - happening so I can take out some of the
68:09 - console
68:11 - logs I can put in no loop back
68:15 - here and I can uh take no Loop out here
68:19 - and I can run this and we should see
68:21 - there we go 0120 0 2 1 1 02 1 12 0 2 1 2
68:26 - 1 0 we got it yay now let's be a little
68:29 - fancier here and let's put something
68:32 - let's put something in um on the in the
68:36 - window I'm going to say uh text size uh
68:40 - five no uh 64 I want to create a string
68:46 - and I want to Loop
68:47 - through uh the current
68:50 - values and I want to say s plus equals I
68:54 - and then I want to say Phil 255 and I
68:57 - want to say text S so I'm just want to
68:59 - draw the text at like 20 and height
69:02 - divided by two uh so I just want to see
69:06 - uh and did I put that I want to see
69:13 - um oh I guess it just happened so
69:18 - fast oh not of I I want V's index I
69:21 - there we go I want to see it do all the
69:23 - Poss possibilities there so I want to be
69:25 - able to see that happening in the window
69:27 - and now we can try 3 4 5 6 7 8 n to see
69:33 - how this goes and we can see here we go
69:36 - I am now looking at it's almost like I'm
69:38 - counting down backwards in this weird
69:40 - way this is now every single possible
69:43 - permutation of 10
69:46 - numbers now you'll notice this is going
69:48 - to take a really long time to finish
69:51 - it's running at 60 frames per second so
69:53 - it's doing 60 possibilities every second
69:55 - and how many possibilities are there 10
69:57 - factorial which is this particular
70:00 - number which is like 3,
70:22 - 628800262 might be some interesting
70:24 - creative ways you could sort of
70:25 - visualize this these permutations what
70:27 - might be another scenario where you use
70:29 - all these permutations and what I'm
70:30 - going to do in the next video is I'm
70:32 - going to use this to try every single
70:36 - possible permutation of the order of
70:38 - cities in the traveling
70:40 - salesperson uh problem and once I do
70:43 - that I'm going to look at an evolu after
70:44 - that I'll look at an evolutionary
70:46 - strategy for solving the traveling
70:47 - salesperson problem okay thanks very
70:49 - much see you in the next
70:52 - video okay okay boy I am Trucking along
70:55 - here it's noon I got to keep
70:59 - moving because I want to get
71:02 - through the next video should be kind of
71:05 - short because all I'm doing is combining
71:08 - this with the other one 16.8 hours to
71:10 - calculate says Gat in the chat
71:14 - um oops no no don't quit I will hit the
71:17 - wrong button here I was about to quit
71:19 - the broadcast I was just going to uh put
71:23 - on some music for you guys which one
71:25 - that I haven't played yet today
71:28 - uh all
71:30 - right little background music here add
71:33 - the number 10 to the array hey what did
71:36 - I do to
71:39 - make why will it
71:43 - break it doesn't
71:45 - break I don't see it breaking I mean
71:47 - it's doing something weird because
71:49 - there's no spaces or commas so you can't
71:50 - see where the 10 is it's going to do
71:52 - crazy stuff still works right
71:56 - okay
71:58 - oops okay so now I need to go to here
72:03 - tsp 1
72:06 - tsp two
72:08 - two
72:10 - lexical that's going to be the next
72:14 - one and what I want now actually is to
72:18 - just open the whole tsp
72:22 - folder
72:28 - I don't have time for this is my last
72:30 - broadcast for a while I got to get
72:32 - through this
72:33 - material uh okay
72:36 - um so let's see what I've got here let's
72:41 - see what I've got here
72:43 - save save let's go to here uh this
72:48 - should be this great okay and I can make
72:51 - this a little bit bigger
72:54 - uh wonderful Wonder wonderful wonderful
72:57 - okay I think I am ready I need a little
72:59 - bit of
73:00 - water
73:05 - uh as always I always forget to
73:13 - this so by the way my one little
73:15 - announcement I have to make which is
73:17 - that the theme
73:19 - song of which the instrumental are now
73:23 - playing in the
73:24 - background uh we'll be out after Labor
73:27 - Day with a full music video associated
73:29 - with it because I'm kind of like
73:30 - relaunching again in September to try to
73:32 - really treat this uh be back every week
73:34 - with weekly live streams and um a kind
73:37 - of set of topics that are going along
73:39 - with a fall course but I'll talk about
73:40 - that stuff
73:44 - later
73:46 - okay anybody watching Olympics by the
73:48 - way super exciting I hope your home
73:50 - country wherever you're from is has some
73:52 - fun people for you to watch root 4 um
73:55 - yeah okay uh but no time for that
73:58 - discussion here we
74:00 - go so I think I'm ready to do this going
74:03 - come back over here uh do I I don't
74:06 - think that I'm going to need to use the
74:07 - Whiteboard for this
74:09 - one
74:11 - um but it is what it is so let me
74:16 - actually make this like eight just for a
74:20 - second and one thing I want to do is I'm
74:22 - going to just see random seed one just
74:26 - want to see something
74:28 - here huh random seed doesn't seem to
74:32 - be yeah it is it's doing the same thing
74:35 - each time okay I don't care about that
74:37 - okay here oh you uh verto has a friend
74:40 - swimming in a few minutes from Spain
74:42 - maybe or uh or from I don't know where
74:43 - you're from verto but uh cool send me
74:46 - the name of this person so I can check
74:47 - later and see how your friend did
74:49 - Belgium okay
74:51 - everybody here we go
75:10 - hello and welcome to part three of an of
75:12 - a coding Challenge and I don't know
75:14 - they're individual coding challenges
75:15 - they're part of a sequence of coding
75:16 - challenges who knows but in this
75:18 - particular one what I'm going to do is
75:20 - I'm going to look at this traveling
75:22 - sales person problem again a list a
75:25 - random list of eight cities and right
75:27 - now the program is just randomly trying
75:29 - possibilities to see if it can find the
75:30 - best one and I'm going to look at how we
75:33 - could combine that
75:35 - with this thing I worked on in the
75:37 - previous challenge which is looking at
75:40 - every permutation of a list of numbers
75:43 - or letters sorting in lexical order
75:44 - which is like an alphabetical order type
75:46 - thing so here you can see this is
75:48 - running uh it's going to take a very
75:50 - long time to check every possibility but
75:51 - I want to take this code and I want to
75:53 - combine it with the traveling
75:54 - salesperson problem to check every
75:56 - possibility in order which I think will
75:58 - be an interesting thing to do so let's
76:01 - let's look at that so the first thing
76:03 - that I want to do and honestly there's
76:05 - probably I can tell you for sure that
76:08 - after I finish this I could easily make
76:10 - another 10 or 15 minute video that's
76:12 - just kind of like refactoring the code
76:13 - to sort of organize it nicely in my you
76:16 - know hyper desire to have like things
76:18 - always organized but I'm going to just
76:20 - I'm going to let it be loose in this
76:21 - video so I'm just going to like copy
76:23 - paste code around move stuff around and
76:25 - kind of use stuff together in a bit of a
76:26 - halfhazard way just to demonstrate it
76:28 - working and then uh you should remind me
76:30 - when I publish the code I'll make a nice
76:32 - neat version for you with some comments
76:33 - and things organized in a way you could
76:35 - kind of compare those two but anyway
76:36 - let's just keep moving and so what I
76:38 - want to do is I want to basically start
76:41 - taking things so I want to take this
76:43 - array vows from The Lex lexical order
76:47 - example and I want to bring it into the
76:49 - traveling salesperson example and if you
76:51 - haven't watched the previous two videos
76:52 - you don't need to but you might want to
76:54 - go back and see how where the how these
76:55 - pieces of code were developed um and
76:58 - what I actually don't want to do here is
76:59 - I don't want to initialize it hardcode
77:02 - it and I think I'm going to call this
77:05 - order now because really this is going
77:06 - to be the thing that's keeping track of
77:07 - the order for me and I need a number for
77:11 - every city so all I need to do add here
77:13 - is right here in this Loop is say orders
77:15 - index I equals I so I just create an
77:18 - array oh and I need to initialize it as
77:20 - an array so in JavaScript I've got this
77:22 - array and the AR is going to start if
77:23 - there are eight cities and let's just do
77:25 - it with um four cities just to S see
77:27 - it's going to be 0 1 2 3 right 0 1 2 3
77:30 - four cities okay so that's good so
77:33 - that's the first step now what I want to
77:34 - do is I'm actually going to take this
77:36 - entire
77:37 - algorithm and I'm going to put it in a
77:39 - separate function I'm just to say copy
77:42 - and I'm going to go into my lexical one
77:44 - and I'm going to just go to the bottom
77:46 - I'm going to add a lot of line breaks
77:48 - just paste it down here and I'm just
77:50 - going to say here like ah uh this is my
77:53 - lexical order
77:56 - algorithm and I'm going to write here
78:00 - I'm going to call this a function now
78:01 - next
78:03 - order so I'm going to put all of this in
78:05 - a function called Next order could be
78:08 - just called Next or next ordering and
78:09 - what this is going to do is it's going
78:12 - to take actually this this is going to
78:14 - be this is much easier than I even
78:15 - imagined and maybe I don't have to
78:16 - refactor this that much I I called it
78:18 - order instead of vow so I'm going to
78:20 - have to be I could probably do a find
78:21 - and replace or some but I'm just going
78:23 - kind of eyeball it for a second and put
78:24 - order everywhere now uh so I now have
78:27 - this algorithm and what I want to do is
78:30 - I want to make my canvas taller I'm
78:32 - going to make it 600 but I'm still going
78:34 - to only pick points in the top and then
78:37 - what I want to do is I want to use this
78:39 - quick little algorithm to write text to
78:42 - the screen so I can see I want to put
78:45 - this at the very end and I know I'm
78:46 - doing this kind of quickly so I'm kind
78:48 - of tring to talk to you through what I'm
78:49 - doing it'll make more sense once you see
78:51 - it um and this again is order I'm just
78:54 - combining the code I'm not actually
78:56 - logically combining the code I'm just
78:58 - taking all the code from one example and
79:00 - putting it in places in a previous
79:02 - example and then what I want is to have
79:04 - this be at like the bottom of the window
79:06 - somewhere down here and if I hit refresh
79:08 - whoops I in the wrong example uh oops I
79:11 - got to go to uh Local Host and find that
79:16 - example again uh tsp lexical and I have
79:18 - some errors here so orders is not
79:20 - defined sketch. Js line5
79:23 - uh it's called order thank you and you
79:26 - can see okay so now so okay so what I
79:30 - have now is the random selecting and the
79:33 - order being displayed below oh and by
79:35 - accident because I have a stroke in a
79:36 - fill I have these nice outlined
79:38 - characters that make me kind of happy um
79:41 - so now all I need to do in draw is
79:44 - say next order like in draw I want every
79:48 - time I want to try the next
79:50 - possibility so vals is not def find
79:53 - sketch. JS line number is 97 that's a
79:55 - place where I forgot it which would make
79:57 - sense for me to have done a find and
80:00 - replace 109 but this is a perfectly fine
80:03 - way of finding those spots uh 119 boy I
80:06 - really did a terrible job I can see I
80:09 - can see some other spots now I I barely
80:11 - got anything uh oops and I don't want
80:14 - this anymore that was the drawing
80:16 - part so we can see here now it looks
80:18 - like it's working right because it looks
80:21 - like it's trying every Poss ibility here
80:23 - but it's not actually using this order
80:25 - as the order of things for the traveling
80:28 - salesperson uh order of cities so now I
80:31 - need to instead of randomly picking an
80:33 - order of cities I need to try the order
80:36 - based on what's here I want to try City
80:38 - three then two then one then zero okay
80:40 - here we go so now what I want to do is
80:43 - where so where do I get the order
80:45 - from
80:48 - um the order basically so this is kind
80:51 - of an interesting thing that's happening
80:52 - here my what I'm going to do is change
80:55 - the pro right now I was actually moving
80:56 - the vectors around in that cities array
80:59 - but the cities are the array now is no
81:01 - longer something that I ever need to
81:02 - touch the thing that I'm keeping track
81:04 - of is actually the order array so I'm
81:07 - going to redo this first by just saying
81:10 - um what I want is to go through every
81:16 - single element in order actually so here
81:19 - is me just drawing all the cities so
81:21 - this is actually not the path so this
81:22 - can leave I'm just drawing a circle
81:23 - where every city is and I'm going to
81:27 - take out the best ever thing for a
81:28 - second because I'm going to have to
81:30 - adjust that but what I want to do here
81:32 - is not I'm want to go through that order
81:35 - array and the particular City that I
81:38 - want to
81:40 - draw City n for lack of a better word is
81:43 - at order index I so I want to go through
81:45 - the order array and set the order as
81:48 - three then two then one then zero
81:49 - whatever is in there so now the index
81:51 - that that's that that order array
81:53 - essentially becomes a lookup so I I
81:56 - think this might be I have this sort of
81:58 - like gut feeling even though you're just
82:00 - somebody on the internet watching a
82:01 - video and I'm a random person in a room
82:03 - talking to myself that that this is not
82:05 - entirely clear so let's clarify this
82:08 - these are the cities quala Lampur
82:12 - Rio
82:14 - uh Oslo I'm trying to think of a diverse
82:16 - set of cities from around the world um
82:19 - so those are the cities but I'll just
82:20 - call them uh a b and c
82:23 - and this is the
82:26 - order which is an array that has
82:28 - something like 1 2 0 so a b c what I
82:36 - want to do is start here and say okay
82:38 - the first city is one which means it's B
82:41 - so I'm here right now then the next city
82:44 - is two which is C which means I travel
82:47 - to here and then the next city is zero
82:49 - which is here which means I travel to
82:51 - here so this never changes this is the
82:54 - thing that's changing around and what we
82:56 - use to inform the order we draw
82:59 - here okay now I've come back and uh this
83:04 - should hopefully make a little more
83:05 - sense to you and I could run this now
83:07 - and we can see it's doing every
83:09 - possibility now I'm not getting the best
83:11 - possibility because I actually haven't
83:12 - fixed that testing yet but you can see
83:14 - that it's kind of checking every
83:16 - possibility in drawing in that order and
83:18 - I might be able to if I reduce the frame
83:20 - rate hopefully we could see that kind of
83:23 - happen um as you see it checking each
83:25 - order and then going to the next one um
83:28 - and there's some other weird goofiness
83:29 - going on the way that I'm um because I
83:32 - haven't gotten to the next step so the
83:34 - thing that's the best ever now is no
83:37 - longer actually a copy of the array of
83:39 - the Cities it's a copy of that of a
83:41 - particular order so best ever distance
83:45 - can uh ah C distance has to change
83:49 - because now when I calculate the
83:51 - distance I need to calculate the
83:52 - distance between these cities based on a
83:55 - particular order so let's go to that
83:57 - calc distance function I'm going to it's
84:01 - going to be a particular order and now
84:03 - as I go through the order I'm going to
84:07 - say uh City uh City a is points
84:13 - order index I
84:16 - woo right because I need to get go into
84:19 - that array and find the one that's at
84:23 - the spot in the order this this would
84:25 - let's write this in two lines of code
84:28 - city a
84:31 - index is order index I and then the
84:34 - actual City and let's
84:37 - just uh no it's write long is the actual
84:41 - point at that spot right so I need to
84:44 - use that order to look up what city am I
84:47 - at and then I want to do that with B
84:51 - City B index City City B City B index
84:54 - and that's I + 1 remember that's the
84:57 - next one in the
84:59 - order and then I want to get the
85:01 - distance
85:03 - between
85:05 - uh City A's X C's A's
85:11 - y City BX I like have to like think
85:14 - about this while I'm doing it City b y
85:18 - okay that makes sense so we've got to
85:19 - use that order again now to calculate
85:21 - the distance so it became a little more
85:23 - complicated of course you could condense
85:24 - this code I might think about it later
85:25 - of a different way to write it but I'm
85:27 - writing it in the most number of steps
85:28 - to try to make it as clear as possible
85:30 - okay so now we have that distance so
85:33 - that works I have calculated the
85:36 - distance between these cities based on
85:38 - this order and if it's the record
85:41 - distance I want to save not the cities
85:43 - but the
85:45 - order then I'm drawing the cities based
85:50 - on uh based on on sorry the uh I'm just
85:54 - drawing all the cities then I'm based on
85:55 - it drawing them based on the order that
85:57 - I'm currently checking and then now I
86:00 - want to draw them I want this exact same
86:03 - Loop but I want to draw the best
86:05 - one so instead of getting the order from
86:08 - the current order array I want to get it
86:10 - from the best ever array and we should
86:13 - see now if I run this and I've done it
86:15 - correctly oops length of undefined
86:17 - sketch. JS line 86 what problem have I
86:21 - done uh
86:24 - uh order is undefined ah I must have I
86:26 - have a second place where I'm
86:28 - calculating distance based on the order
86:31 - and swapping oh no forget about this
86:33 - swapping get rid of the swapping that's
86:36 - I don't want to swap I'm not ever
86:37 - swapping that's I would have been a big
86:38 - bug if I left that in there by accident
86:41 - found that
86:43 - luckily uh am I not going to next order
86:47 - no okay so what's going on I got to
86:48 - debug this do I have no Loop
86:50 - somewhere uh
86:53 - What's Happening Here
86:57 - uh people in the chat are telling me um
87:01 - various things uh I think this is I
87:04 - think this is a pause point I gotta like
87:06 - find this problem now boy it's G to be
87:08 - really hard to do the genetic algorithm
87:10 - the amount of time I have did it just do
87:12 - it really fast no so hold on let's just
87:15 - see
87:17 - um what do I want what's happening here
87:19 - let's just make sure this is happening
87:25 - oh it only happened once oh I the fra
87:28 - frame rate was at
87:31 - one
87:33 - okay I'm back it actually was working I
87:36 - just was impatient my frame rate was at
87:38 - one but I do have an error here sketch.
87:41 - JS at line
87:45 - 48 what's happening line cities and
87:49 - uh okay so so n
87:53 - is H okay so why did I get an
87:58 - undefined
88:01 - uh so hold on let's look at
88:04 - cities has four things in it let's look
88:07 - at order
88:10 - 0213 let's look at best
88:12 - ever ah something's wrong still for
88:15 - whatever reason I'm not getting the
88:17 - order the numbers in best ever so let's
88:20 - see where let's see everywhere I'm doing
88:22 - something with best ever there order.
88:25 - slice ah I still had cities. slice here
88:28 - so this has to be order and so now we
88:31 - can see here we are checking every
88:33 - possibility one frame at a time and you
88:36 - can see the current thing that I'm
88:37 - checking is drawn in white and actually
88:40 - that should be after so you can see it
88:43 - um um just so you can see it on top I'm
88:45 - just going to switch the order around
88:47 - for a
88:48 - second uh of the drawing stuff and I'm
88:52 - going to make the frame rate uh five
88:54 - just so you can see that a little
88:57 - better so you can see it trying every
88:59 - possibility and essentially it'll get to
89:01 - the end and um when it gets to the end
89:05 - you know I kind of in a way like just
89:07 - drawing the current order I don't have
89:08 - so this could be a CH this is a
89:10 - challenge for you guys to sort of
89:11 - visualize this better and actually I
89:12 - have a I have an idea I have a better
89:15 - idea so what I'm going to do now is
89:17 - actually uh
89:20 - translate zero height divided by two I
89:23 - just want to draw these in different
89:24 - places so uh and uh whoops for the uh
89:29 - second
89:32 - one and then the uh where I'm drawing
89:35 - the text is actually uh just two minus
89:40 - 50 so what I what I what I think is work
89:43 - would work better here is for you to see
89:46 - um and I don't think actually to be
89:47 - honest like I don't feel a huge need to
89:49 - draw the permutations but you can see at
89:51 - the bottom I'm trying every permutation
89:53 - and the current best one is at the top
89:56 - and was it really the last
90:00 - one let's so let's run this with uh let
90:03 - me take out um no let me just run this a
90:06 - few times I wonder if that's a bug in my
90:10 - code no okay good that was just a
90:13 - coincidence so here the last one is not
90:15 - the best one and what we can do first of
90:17 - all I want to take out uh console I want
90:20 - to add a couple things to this I want
90:22 - take out
90:27 - um I want to get rid of this test to see
90:29 - if that was working and I want to
90:34 - um uh I want
90:37 - to sorry I was looking at the chat for a
90:39 - second I want to make the total cities
90:42 - uh eight and let's take the frame rate
90:44 - up to as fast as it'll go and we can see
90:47 - here it is trying every single
90:49 - possibility and every time it finds one
90:51 - that's better it puts it up top so you
90:53 - can see I don't know maybe that's the
90:54 - best one actually it might have found it
90:56 - and at some point it's going to stop now
90:57 - I don't know where it is so one thing I
91:00 - would like to do is um is be able to uh
91:05 - calculate the percentage uh finish now
91:08 - the thing
91:10 - is
91:13 - uh the thing is we might run and so this
91:16 - is kind of done and you could stop you
91:19 - could stop watching this video and kind
91:20 - of take this and think of a more
91:22 - creative way to visualize this or do
91:23 - something interesting with it um but I
91:25 - just want to have a sense of how far I
91:27 - am to being done so one thing I want to
91:29 - do is I want to know I want to know uh
91:33 - total
91:35 - permutations I want to calculate that
91:37 - total
91:40 - permutations equals I have no doubt this
91:43 - is not a function in JavaScript math.
91:46 - factorial total cities now what's the
91:48 - chance that that gives me something yeah
91:50 - math. factorial is not a function so
91:53 - let's write our own I'm just going to go
91:54 - to the bottom here writing a function
91:57 - for factorial merits its own video but
92:00 - I'm going to do it uh really quickly
92:03 - here uh and just say that if n equals 1
92:07 - return one otherwise return n * n minus
92:13 - one and that's uh not right n *
92:18 - factorial of n minus one right so
92:20 - factorial is five of five is 5 * 4 * 3 *
92:23 - 2 * 1 factorial of 4 is 4 * 3 * 2 * 1 so
92:27 - factorial of 5 is 5 5 * 4 factorial
92:31 - which is 5 * 4 * 3 factorial which is 5
92:33 - * 4 * 3 * 2 factorial which is 5 * 4 * 3
92:37 - * 2 * one factorial and one factorial is
92:39 - equal to one and this is a little
92:40 - recursive function which just does that
92:42 - so um I think I have another video where
92:44 - I actually go through that in detail I
92:45 - try to link to that here but so we can
92:48 - say total here uh with eight is
92:52 - factorial of totals uh so I'm going to
92:56 - say total permutations I just want to
92:57 - see what number I get
93:00 - 40,320 so percentage I can also say now
93:05 - I can have uh count
93:07 - going and I can say where I can say in
93:11 - draw our next order really I can say uh
93:15 - count plus plus and maybe that should go
93:16 - at the end but I'm feeling lazy right
93:18 - now and I can say now what I want to
93:20 - actually do
93:22 - is calculate a
93:25 - percent which is 100 time the count
93:29 - divided by the total
93:30 - permutations and I want to see
93:34 - um
93:37 - perent
93:40 - completed and let's make that
93:44 - um let's make that a little bit smaller
93:48 - uh it'll just be there at the bottom and
93:50 - see what happens uh and you know it
93:52 - might be nice here to uh number format
93:55 - that I think P5 is a function number
93:57 - format NF where I can say just give me
93:59 - two decimal places to look at and we can
94:02 - see now and and you know I could say uh
94:06 - percent so even with eight you can see
94:09 - how long this is going to take doing
94:11 - only one possibility 60 frames per
94:13 - second let's at least uh make sure that
94:15 - this is kind of working correctly by
94:17 - reduce this number to
94:20 - five and we can see here we're going to
94:22 - get through 100 and my my counting is
94:24 - off and where I'm calculating in no Loop
94:27 - but you get the idea here so now I'm
94:29 - able to see this is now me checking
94:31 - every single possibility and getting the
94:34 - fastest one let's look at
94:36 - six and just out of curiosity is this
94:39 - program even going to run if I go up to
94:41 - like 20
94:42 - cities oh something is ABS oh you know
94:45 - why it's not working is because 20
94:47 - factorial is a number too big to store
94:49 - in a variable and I would need some sort
94:50 - of JavaScript Library I think for big
94:52 - numbers I think that's particularly
94:55 - correct because this I ran into when I
94:57 - was working in my Java example on my
94:59 - Java example um I needed to use Longs
95:03 - and I even you I might have even needed
95:05 - to use like a big number Java library
95:07 - but that's only for the percentage
95:08 - calculation because I don't actually
95:10 - need to know the total number of
95:12 - possibilities to check every possibility
95:13 - I just need to check every next one so
95:16 - this 8% calculated is absolutely wildly
95:19 - incorrect but uh I think if I do 10 am I
95:21 - going to get something 10 I'm still
95:23 - going to get something about right
95:24 - because that's a reasonable enough
95:25 - several million so you can I encourage
95:27 - you to run this on your own for a while
95:28 - see if it comes up with something that
95:29 - looks right um and but you know honestly
95:32 - what I would like is can you make some
95:34 - kind of interactive system that allows
95:36 - users to place points can you make a
95:38 - game or or a simulation where things are
95:40 - following all the points can you
95:41 - actually have it act out people
95:43 - searching for Pokemon or sales people
95:46 - walking to sell things or I know you you
95:48 - should music playing as you should be
95:50 - more creative with with this okay thanks
95:52 - for watching I've got one more left to
95:53 - do which is do exactly this but use a
95:56 - genetic algorithm to evolve the best
95:58 - path thanks for
96:01 - watching all right oh boy oh boy oh boy
96:04 - oh boy oh boy oh boy so here's the thing
96:07 - I said I had to go at 12:30 which is 7
96:09 - minutes away kind of knew this might
96:11 - happen um I I definitely can't do the
96:13 - genetic algorithm is the most complex
96:15 - thing to do um so um but in a way it's
96:20 - not as hard as you might imagine having
96:22 - done so much of the work
96:24 - already I really honestly could go until
96:26 - 1:00 and I wouldn't it wouldn't be a
96:28 - total disaster for me in terms of the
96:29 - time today so I'm going to try to
96:34 - extend and I'm going to take a brief
96:40 - break to go pee I was like trying to
96:42 - think of what I should say but that's
96:43 - what I'm going to do because I've been
96:45 - doing this live stream for a couple
96:46 - hours now um I am going to uh put on
96:49 - some uh music for you you can
96:52 - enjoy um the
96:56 - um instrumental coding Rainbow theme
96:58 - song which is 1 minute and 20 seconds in
97:00 - which case I will be back and see how
97:03 - far this gets and um then I will uh see
97:07 - about doing the genetic
97:12 - algorithm no I'm still still I'm going
97:14 - to go till 1 o' going to go a little
97:16 - longer
97:18 - yeah and I just have a live mic here
97:21 - which I'm going to mute myself but I
97:23 - think you still hear me talking and I'm
97:25 - whispering for no reason oh it's so much
97:26 - cooler where I am right now okay now I'm
97:29 - going to mute my mic okay I'll be back
97:44 - [Music]
97:50 - soon
98:47 - okay here I am back
98:52 - can you hear me can you see me uh is
98:54 - everything going okay I don't see a lot
98:55 - of messages in the chat uh oh okay I did
98:58 - see someone I'm just curious how many
99:00 - people there 70 people how are we doing
99:02 - here on this we got through uh 36% so
99:05 - you can see how long this takes now
99:07 - certainly if I was doing this in Java
99:09 - and a separate thread and kind of
99:10 - crunching it faster than 60 frames per
99:12 - second um it would go a lot faster and
99:15 - so but I think it's interesting to see
99:16 - this in JavaScript nonetheless okay okay
99:20 - I got to move quickly here uh half an
99:23 - hour I have I think realistically so I'm
99:26 - going to do which one am I in right now
99:28 - tsp2 lexical I'm GNA keep this one and
99:34 - uh genetic I'm making a another folder
99:37 - called genetic
99:39 - algorithm and I'm going to go into that
99:41 - one and I'm just going to clean up the
99:44 - code a little bit kind of like quietly
99:46 - myself to move things along a bit faster
99:49 - I'm going to get rid of
99:51 - all this permutation stuff I don't need
99:54 - anymore a factorial I don't need
99:57 - permutation stuff I don't need uh the
99:59 - calc distance oh I forgot I was going to
100:01 - make calc distance more efficient
100:03 - without a square root but I'm not going
100:05 - to worry about that um what does this
100:09 - program do
100:10 - now
100:12 - uh
100:15 - um okay I think this is going to work
100:20 - for me
100:22 - uh I'm tempted to grab my previous web
100:27 - workers yeah I'm tempted to grab my
100:30 - previous genetic algorithm code to make
100:33 - this go faster to start from a template
100:35 - but I think
100:38 - that's
100:40 - unnecessary I have a oh oh I have an oh
100:44 - oh there's too much to do can I come
100:47 - back I can't uh I just I got to move
100:50 - forward here there there was there's
100:52 - another thing that I wanted to do which
100:54 - I might have to skip here uh maybe um
100:58 - because I I had a bunch of suggestions
101:00 - about my um uh selection algorithm uh to
101:05 - improve
101:06 - it and uh I kind of would like
101:12 - to do that but I'm I'm not going to okay
101:17 - uh I just got just going to move forward
101:18 - here I'm just going to start this don't
101:20 - know what this
101:22 - does uh hold on uh let me just let me
101:25 - just get no errors
101:29 - here uh line
101:38 - 62 there's some unnecessary
101:40 - code
101:42 - okay okay um all right uh boy it's so
101:47 - you guys have I don't know if you have
101:48 - any idea how hot it is in here right now
101:51 - okay so I have about a half an hour I
101:54 - honestly I'm I'm I'm feeling like this
101:55 - is quite unrealistic I did I feel like I
101:58 - got a good amount of done stuff done
101:59 - today in two hours um and I wish I had
102:02 - more time wish I had the whole day
102:04 - honestly um because there's a whole lot
102:07 - more that I want to do but I'm going to
102:08 - just see what happens and I I'm
102:11 - guaranteeing to you one thing which is
102:13 - that I will publish code for doing this
102:15 - so that if you're curious and want to
102:17 - investigate it even if I don't finish
102:18 - this as a video tutorial um that code
102:21 - will be published and then um you know I
102:23 - will obviously pick this back up again
102:25 - in a couple weeks or we'll answer
102:28 - questions on a forum or something
102:29 - somewhere people have particular
102:31 - questions about it
102:33 - okay hello uh one last challenge with
102:37 - the traveling salesperson I want to take
102:38 - the traveling salesperson problem and I
102:41 - want to solve it or try attempt to solve
102:44 - it or get close to solving it with the
102:46 - genetic algorithm the issue being that
102:48 - when there are so many cities I can't
102:50 - can't possibly check every single
102:52 - possible uh Point oops as illustrated by
102:56 - uh the example I made in the previous
102:58 - video where there are more than 3
103:00 - million possible uh ways to go through
103:03 - all of these points you can see I'm
103:04 - checking every possibility and I'm only
103:05 - at 0.1 0 1% completed right now even
103:08 - after a little while sure with a faster
103:10 - computer and code written not in
103:12 - JavaScript in the browser I could get it
103:13 - to go faster but you know this is only
103:15 - eight cities imagine as you get to 9 and
103:17 - 10 and 11 and 12 a genetic algorithm
103:19 - involving the optimal path through these
103:22 - cities is a is a is a way that we that
103:24 - you can explore to get get some results
103:26 - so let's look at how we might do that I
103:29 - have a lot of videos about genetic
103:30 - algorithms I think almost 10 so I'm kind
103:33 - of piggy bagging I'm kind of assuming
103:35 - knowledge and kind of moving through
103:37 - this quickly but I'm going to and also
103:39 - program it from scratch but I encourage
103:40 - you if you haven't watched those to go
103:41 - back and watch those other videos about
103:43 - genetic algorithms okay the first thing
103:45 - I want to do and I'm going to do it all
103:47 - sort of insanely in one um part
103:50 - particular uh Javascript file just to
103:53 - keep things simple and I'm not going to
103:54 - use objects or any of that so I want to
103:56 - make a population and that population is
103:59 - an array and
104:02 - um and actually I do want to use I do
104:05 - want to use on some level an object so I
104:07 - want to create a DNA object and what
104:10 - that DNA object has in it is an order so
104:13 - that order being the um the order by
104:17 - which we're going to go through the
104:18 - cities so uh so the DNA object has uh an
104:23 - order variable in it which I'm going to
104:24 - say this. order I'm going to use this as
104:26 - a Constructor function to create these
104:28 - DNA objects and what I want to do is go
104:32 - through the amount of total cities there
104:36 - are and what I want to do is say this.
104:39 - order index I equals I so I'm going to
104:41 - start making a DNA object that just has
104:45 - the literal order of kind of uh 0 1 2 3
104:49 - 4 5 however many there are so I have
104:51 - that so now what is my
104:53 - population and I want to say uh
104:56 - population total let's say we're going
104:58 - to have a population of a 100 elements
105:00 - so what I want to do here now in setup
105:02 - is I want to say I want to go through
105:05 - and based on that total
105:10 - population I want to say oops uh I want
105:14 - to say
105:16 - population index I is a new DNA object
105:20 - so I want to fill a population with
105:22 - orders now all those orders are the same
105:24 - right now so I should Shuffle and
105:25 - randomize them right we want a genetic
105:27 - algorithm to start with some variety but
105:29 - we'll get to those steps as we go now
105:31 - what I want to do just to see that
105:33 - things are working is I want to
105:37 - visualize uh when I go to draw the stuff
105:40 - I actually want to draw the entire
105:42 - population I think that might be
105:43 - interesting that's probably a terrible
105:45 - idea for a variety of reasons that's
105:47 - going to make things run really slow but
105:49 - we we can take that out out whenever we
105:51 - need to but just to see that things are
105:52 - working I want to draw that entire
105:54 - population uh so and I want to say the
105:57 - order is each member of the population
106:05 - order and now so this is me saying
106:08 - instead of just we were just trying one
106:09 - at a time I'm going to try a 100 at a
106:11 - time so if I run
106:14 - this uh boy I don't know what it's do oh
106:17 - I'm in the wrong I'm in the wrong
106:19 - example uh I'm going to go here okay so
106:22 - I've got some errors can't read property
106:23 - length of undefined sketchs line 42 all
106:27 - right so this I got to comment this
106:29 - stuff out yet because I'm not I haven't
106:30 - done the evolving part
106:33 - yet uh and I'm not seeing anything
106:37 - because uh why am I not seeing
106:41 - anything um population. length oh I'm
106:45 - using I twice that's a terrible
106:48 - idea so let's use J in the outer loop
106:51 - here I'm surprised that I I think I oh I
106:54 - crashed I crashed the browser everybody
106:56 - good for me uh let's Force quick
107:04 - Chrome um okay so we can see all the
107:07 - possibilities are being drawn down at
107:09 - the bottom here okay so let's shuffle
107:12 - them so we can see that there's 100
107:13 - random possibilities um so one way of
107:15 - shuffling an array I already have this
107:17 - swap function which just swaps two
107:19 - elements I could just swap like a
107:21 - certain number of times and I'm sure if
107:23 - you look in textbooks and on Wikipedia
107:25 - you would find some optimal number of
107:27 - swaps for a perfect Shuffle but I'll
107:29 - just do it some amount of times so where
107:31 - in My DNA here I'm also just going to
107:32 - say uh Shuffle or no
107:35 - swap
107:37 - order uh and I need to have VAR uh uh I
107:43 - equals floor random order.
107:47 - length and J is another random one so
107:51 - swap I comma J and do
107:55 - this you know 10
107:58 - times this is to randomize it uh I don't
108:01 - know how good 10 times is but oh I still
108:03 - have an infinite Loop here why do I have
108:05 - some weird infinite
108:09 - Loop what's going on in draw okay all I
108:12 - should be doing is drawing the cities
108:14 - and then drawing the population let's
108:16 - make the population
108:18 - 10 uh
108:21 - crash the browser
108:23 - again I think I might have to quit this
108:25 - for today and just I think I might what
108:28 - I might just do uh for loop I is less
108:31 - than population. length someone's
108:33 - telling me an error that I have
108:40 - uh uh oh thank you J is less than
108:43 - population. length thank you very much
108:46 - that was a good
108:47 - catch uh still have some problem here
108:50 - uh do I have an error at least I can't
108:53 - see so what's what's infinite looping
108:56 - here uh I population J
109:00 - order uh j++ what if I comment this
109:05 - out I is less than population. length is
109:08 - in one of the
109:09 - fours I think you guys are behind me I
109:12 - already fixed that
109:16 - uh uh in the
109:19 - beginning
109:22 - uh let's uh let's comment this
109:29 - out ah I know have a way if I wonder if
109:32 - this will be able
109:34 - to if I restart the
109:42 - server so you guys I'm starting to feel
109:45 - like and I really apologize for this
109:48 - that this is I'm not doing this Justice
109:51 - by this is a sort of complicated
109:53 - thing uh and
109:59 - um
110:02 - that
110:04 - uh oh what's this best ever stuff I
110:06 - don't
110:14 - want that I'm starting to feel like this
110:17 - was not meant to be for today I did a
110:20 - solid amount I'm going to have to come
110:21 - back and finish this
110:24 - fresh um and maybe what I'll do is use
110:26 - the time to uh talk you through how to
110:29 - do it and show you the work a working
110:32 - example in processing and those of you
110:34 - who want a fun exercise am I just like
110:38 - editing the wrong oh there must be a
110:40 - loop in the in setup
110:44 - that's crapping
110:47 - out whoa I don't need this order thing
110:50 - this order is messing stuff up there's
110:53 - like a global array order which I don't
110:58 - want and I don't I don't want to do this
111:00 - best ever thing right
111:03 - now
111:06 - um I just want to least get to the point
111:11 - I feel like this need
111:12 - to fix this like little weird problem
111:15 - that I'm having right
111:18 - now
111:26 - hello ah orders not toin sketch. J line
111:33 - 93 oh this. order
111:48 - hey this.org
111:50 - order yeah this do order this do
112:02 - order uh I'm going to get it looks like
112:06 - it's
112:07 - like still not uh like I'm not I'm not
112:11 - seeing background zero so something is
112:13 - getting stuck in
112:18 - setup forgot an i where where where
112:23 - where did I forget an
112:28 - i 92 should have n++ not
112:36 - i++ oh thank
112:39 - you there we go there was my infinite
112:44 - Loop there's got to be a better way I
112:48 - could probably force quit a tab right
112:50 - like if I go in Chrome to uh task
112:54 - manager and then uh this one and
112:59 - process yeah that's
113:04 - better and
113:09 - uh okay I at least want to just get the
113:11 - start of this going uh back
113:15 - and uh
113:18 - draw the PO the
113:21 - population there we go okay so I I got
113:24 - to the point that so you guys I I AP I
113:27 - think that I've I've made this m this is
113:29 - a classic mistake that I do in teaching
113:30 - regular actual class if I want to get
113:33 - through a certain number of topics and I
113:35 - have it in my head how to do it and I've
113:36 - prepared all of it no matter how much
113:38 - time I left I try to rush through the
113:40 - last thing and as much as I feel a
113:42 - little bit disappointed to not get
113:44 - through this last piece um I think the
113:49 - this YouTube channel would be better
113:51 - served by me taking the next 10 or 15
113:53 - minutes to just kind of wrap things up
113:55 - talk you through a few things talk about
113:56 - what's going to happen later in August
113:58 - and September I need some time once I
114:00 - turn off the stream to make sure the
114:02 - files get uploaded properly so that the
114:03 - tutorial videos can get uploaded so I am
114:06 - going
114:11 - to stop doing the genetic
114:15 - algorithms um but I'm uh exam but I am
114:18 - going to however take five minutes to
114:21 - show
114:23 - you the uh an example that I made at one
114:26 - time or
114:28 - another in
114:32 - processing and I'm running the latest
114:34 - version of processing here um I want to
114:36 - just show you it working and talk you
114:38 - through so what what what what my
114:40 - intention here of the next steps which
114:42 - I'm not going to program from scratch
114:44 - anymore was that I would look at all of
114:46 - these paths calculate their distance and
114:49 - their Fitness would be tied to their
114:51 - distance so the shorter their the
114:53 - distance between all the points the
114:55 - higher their Fitness now the really
114:57 - really tricky thing uh that merits quite
115:00 - a bit of discussion that would have
115:02 - taken quite a bit of time oh you know
115:04 - what I'll do I have a short video to do
115:06 - which maybe I can fit in but
115:09 - um
115:12 - is before if I had some sort of DNA like
115:17 - this and some sort of DNA a that was
115:21 - like this and I wanted to combine them
115:23 - and do
115:25 - crossover in all of my previous examples
115:28 - that I made this would be totally
115:32 - valid right because I could take this
115:35 - half of the DNA and this half of the DNA
115:37 - but notice this is not a valid order of
115:39 - cities right so we have to invent a new
115:44 - crossover function and by the way now
115:46 - that I'm going to be on a little bit of
115:48 - a Hiatus for a couple of weeks I would
115:49 - would love to hear your suggestions for
115:51 - interesting crossover techniques the one
115:53 - that I've chosen to use I believe if you
115:56 - Google it you'll find it listed under
115:58 - something like an ordered
116:00 - crossover that's essentially what we're
116:02 - doing is I might take and so let's let's
116:05 - make a a longer example 0 1 3 2 4 and
116:12 - here's
116:14 - another uh 4 3 1 2 0 so let's say I need
116:20 - to make a
116:23 - new order out of these two and let's say
116:26 - I decide I'm going to take this section
116:28 - from a so I'm going to take this section
116:31 - from a and put it in here keeping it in
116:34 - order because the sequence of things is
116:35 - important now what I need to do is fill
116:38 - these remaining spots from here so I'm
116:41 - going to say four is that already here
116:43 - no so four goes here three is that
116:46 - already here it is one is that already
116:49 - here no no so one goes here two is that
116:53 - already here yep so I don't pick that
116:54 - one zero so that goes here so what I do
116:57 - is I take a random section of the first
116:59 - one and then I I put it in the new child
117:02 - in that order and then I go back to the
117:04 - second one and pull pieces out pull them
117:06 - out in order uh filling out the rest of
117:09 - the empty spaces so if you look at my
117:11 - processing example which I hopefully
117:13 - should be able to open up right now and
117:15 - I will it's already actually on
117:17 - GitHub um you will see an algorithm for
117:20 - doing this and I I feel like I could
117:21 - have done this whoops I could have done
117:23 - this in uh JavaScript using slice and
117:26 - all sorts of interesting ways uh in uh
117:30 - the processing version you will see that
117:33 - here that particular algorithm under
117:35 - crossover and so you can see that I'm
117:38 - picking a random start and an end and
117:41 - I'm making the new DNA go between that
117:43 - start and the end and then I have an
117:45 - algorithm for filling out the rest of it
117:47 - so this is I could I I I i' I've you
117:50 - know started to feel like
117:53 - um oh yeah Oliver makes a great
117:55 - suggestion in the chat which I want to
117:56 - read in a second um but uh I realized
117:59 - that this is kind of like almost a whole
118:01 - topic unto itself which would take a
118:02 - significant amount of time and I don't
118:04 - want to rush through these this stuff I
118:06 - feel like this could actually be a good
118:08 - video and if it doesn't happen for a few
118:10 - weeks it will live on YouTube forever as
118:12 - a better video than the rushed one I
118:13 - would have made today um ah um so Oliver
118:17 - writes you can actually have the problem
118:20 - Space by enforcing lack of reflective
118:22 - things 012 is the equivalent of
118:25 - 210 um and so that's actually quite
118:27 - important and that does actually help
118:28 - quite a bit but when the numbers get so
118:30 - big half of like a giant number is still
118:32 - like a really giant number but it but it
118:34 - is quite that is a good optimization
118:36 - that be worth implementing Akash asks
118:38 - any technique to do permutations using
118:40 - bit shifts um absolutely you could kind
118:43 - of get into the nitty-gritty of doing
118:45 - this kind of genetic algorithm uh
118:48 - Crossovers and sort of shift bits and
118:50 - you know I'm kind of staying at a higher
118:52 - level to make things more readable and
118:53 - kind of uh fun and easy to play with but
118:56 - certainly that is a
118:58 - possibility um so um so I I see lots of
119:02 - great suggestions in the chat and I'm
119:04 - going to hopefully get feedback from you
119:05 - guys and explore this stuff and improve
119:07 - the example maybe I'll actually build
119:09 - this JavaScript example out and publish
119:10 - it and then come back and do a tutorial
119:12 - about it later the one thing that I want
119:15 - to
119:16 - mention um and see if I could take a few
119:19 - minutes to do this is um let me go so by
119:25 - the
119:26 - way if you are interested in suggesting
119:29 - topics for future
119:31 - videos whoa my computer is just crawling
119:34 - to a
119:35 - halt uh let me quit processing let me
119:40 - quit the web
119:41 - server
119:44 - um um so this is a GitHub repository
119:48 - that I use to keep track of suggestions
119:51 - and you can see there's currently 135
119:53 - suggestions I do like one or two per
119:55 - week so it's gonna take a long time to
119:56 - get to all these topics um I also sort
119:59 - this list typically by this and you can
120:02 - see that there's like a lot of interest
120:03 - in machine learning fluid dynamics is
120:05 - getting higher which is interesting I'm
120:07 - excited to do videos on Chrome
120:09 - extensions um so but um the one that I
120:12 - want to look for here right now is uh
120:15 - select um and this comes from uh Spectra
120:19 - now there are two um there are two
120:21 - issues here and I'm going to show you
120:23 - this one for a second so this uh by
120:26 - Sinclair
120:27 - zx81 I I would suggest you take a look
120:30 - at this particular issue it's issue
120:32 - number 119 in the repo um and this has a
120:37 - very this shows a really nice fancy
120:40 - JavaScript possibly es6 using uh uh way
120:44 - of saying ah you have the population of
120:46 - these elements unicorn popcorn a and
120:49 - isotope and each one of those elements
120:51 - gets a score how do you pick them
120:54 - randomly with their score maap to
120:56 - probability and there is this like kind
120:58 - of unbelievable using map and uh um um
121:04 - uh creating this select function uh here
121:08 - uh using sort of enumeration and all
121:09 - sorts of stuff I don't know if I'm
121:10 - saying that correctly but uh so I
121:12 - encourage you to take a look at this
121:14 - this is a pretty complex and sort of
121:16 - advanced JavaScript notation way of
121:18 - looking at this and I you know read this
121:20 - through and thought about it for a while
121:22 - and uh and I actually did a video about
121:24 - it where I kind of did it incorrectly
121:27 - Sinclair wrote a wonderful thoughtful
121:29 - reply to that i' would love I'd love to
121:30 - read this but I'm kind of running out of
121:32 - time uh and then um this is uh and so
121:37 - this is the algorithm that this is a
121:39 - sort of simpler way of writing this
121:41 - particular algorithm and I and I do want
121:43 - to do and I'm going to save till next
121:45 - time but I'm just going to mention it
121:46 - now in the live stream I do want to kind
121:47 - of mention this and it's a really
121:49 - interesting algorithm I'm going to come
121:51 - over here to the Whiteboard because what
121:53 - it's able to basically the algorithm
121:55 - that I implemented was an accept reject
121:57 - strategy where I pick two random numbers
121:59 - and I either throw away or accept the
122:00 - first one based on the second one I have
122:02 - to maybe try a whole bunch of
122:04 - times if you normalize the fitness
122:07 - scores right if I have three members of
122:09 - a
122:10 - population and I normalize their Fitness
122:13 - score so they all add up to one so let's
122:16 - say I have like
122:17 - 0.53 and .
122:21 - 25 so I can kind of almost draw this bar
122:24 - where this is element a this is element
122:27 - B and this is element
122:29 - C let's say I now pick a random number
122:33 - between zero and
122:37 - one I think I'm doing this right let me
122:40 - think we'll see so let's say I happen so
122:43 - I pick a random
122:45 - number between zero and one
122:50 - let's say I
122:53 - pick and let's look let me look at the
122:55 - algorithm here because I implemented
122:56 - this and now I'm kind of losing my mind
122:58 - while selector is greater than zero so
123:01 - that's the random number subtract okay
123:05 - yeah so I'm So Okay so this this is the
123:09 - selector in that algorithm R and I want
123:11 - to like continue while R is uh while R
123:17 - is less is greater than Z go back to
123:20 - that
123:22 - again while selector is greater than
123:24 - zero okay and I'm going to start with an
123:26 - index I'm going to assume that the index
123:29 - I'm going to pick is
123:35 - zero in the array and so uh so let's say
123:39 - I pick
123:43 - 08 and a is zero
123:47 - so
123:49 - now what I do is I say I subtract A's
123:53 - score from the random number that I
123:55 - picked so rals itself minus .5 and what
124:01 - do I
124:03 - get.
124:05 - 3 so that is still greater than zero so
124:08 - what do I do I increase the index by
124:13 - one and then I do that
124:16 - again I subtract then B score which
124:20 - [Music]
124:21 - is.3 that's a little unfortunate let's
124:24 - make this uh let's make this4 and 01
124:27 - just to make the math work a little bit
124:28 - better I subtract B's score and which I
124:31 - would then have
124:34 - .1 so I am no longer greater than zero I
124:37 - skip out and I use this particular index
124:39 - or I actually have to subtract one first
124:41 - because of the way that it's being added
124:43 - but basically the idea here is that
124:46 - you're going to um the I'm not
124:49 - explaining this very well I'm kind of
124:51 - I'm going to come back and do a whole
124:52 - video on this when I do the next genetic
124:54 - algorithm video but the idea of this
124:56 - table is the things that
124:58 - are um you're going to
125:03 - get people are there's the right you're
125:07 - you're going to um because this one
125:10 - takes up so much more space in this kind
125:13 - of table we're going to like live within
125:15 - this one for longer before we escape out
125:18 - and so this is going to end up being the
125:19 - index more often so it's this way of
125:21 - saying pick a r you know if I pick a
125:23 - random number here and I sort of like
125:24 - Escape out I'm kind of stuck with this
125:26 - one um in a way you can sort of Imagine
125:28 - like picking a random number some am I
125:31 - in here or am I in here or am I in here
125:33 - and the way that I determine that is by
125:35 - seeing how long it takes for me to like
125:36 - subtract the scores and suddenly be
125:38 - below zero so that's the way this
125:40 - particular algorithm works I have to
125:42 - think about this a bit more and it's a
125:43 - really nice one for using a fitness
125:45 - score with a sort of selection
125:47 - probability okay so that's an
125:49 - improvement and you're going to see that
125:51 - pop up in my examples as I publish the
125:53 - code for the traveling salesperson
125:55 - genetic
125:56 - algorithm okay so um let me talk to you
126:00 - guys a bit about schedule I wish I had a
126:03 - generic uh calendar September calendar
126:07 - 2016 what does this give me
126:11 - um okay so uh these I don't know what is
126:15 - this August 31st was that right
126:19 - so most likely I am going to be coming
126:22 - back with live streams again the week of
126:25 - September
126:26 - 5th if things go well I would love to
126:29 - come back Monday and Tuesday the week
126:31 - before sometime that's the earliest but
126:34 - right now I'm I am committing to coming
126:37 - back with a live stream the week of
126:39 - September 5th although September 5th is
126:40 - Labor Day so that's going to make things
126:42 - a little bit trickier but that's my plan
126:45 - live stream the week of September 5th uh
126:48 - in fact I know that I could do it the
126:49 - afternoon of September 6 if I had to so
126:52 - that that will be the and then one live
126:55 - stream every week I am going back to
126:56 - teaching full-time at this place called
126:59 - New York University uh there is a
127:01 - program there called
127:04 - ITP uh their program starts to begin in
127:06 - the fall it's a master's program uh and
127:09 - one of the classes I will be teaching at
127:10 - ITP is called
127:14 - uh uh programming from A to Z this is
127:18 - last year's syllabus it meets every
127:21 - Tuesday and so what I'm going to do is
127:24 - after the class meets and maybe every
127:25 - Tuesday afternoon although I think I
127:27 - have a do I have another commitment
127:29 - Tuesday afternoon no Tuesday afternoon
127:32 - oh no that well anyway I have to work
127:34 - this out but um uh to after I teach the
127:38 - class at ITP I'm going to come back here
127:40 - and kind of do the class live on the
127:42 - YouTube channel and there'll be videos
127:44 - on all these topics that are available
127:45 - for you to watch you can ask questions
127:47 - in the chat live and then um I also if
127:51 - you want to have further engagement you
127:54 - can go to um patreon which is a
127:57 - crowdfunding thing that I'm using and if
128:00 - you sign up here or you can see some of
128:02 - my videos I don't do a good job of
128:03 - keeping this up to date uh better place
128:04 - to go is probably coding rainbow.com if
128:06 - you sign up for the patreon what I'm
128:08 - going to do is I have a special slack
128:10 - Channel where I will engage and discuss
128:13 - the class assignments and answer
128:15 - questions also in that slack Channel but
128:17 - really it's more to be a not I mean I'll
128:20 - be there you can engage with me but you
128:21 - can engage with me however you want on
128:22 - Twitter on the YouTube chat but it's
128:23 - really to try to join a smaller
128:25 - community of people asking questions and
128:27 - discussing some of these topics so I
128:29 - encourage you all to think about joining
128:30 - that if you want in the fall um you know
128:33 - this is kind of I don't know how this is
128:34 - going to go for me in the fall I've been
128:36 - doing this now kind of more regularly
128:38 - since around
128:39 - February um and I've had I had a
128:41 - semester of leave to kind of ramp this
128:43 - up and I also have this recording studio
128:45 - space at least through September and
128:48 - it's sort of uh uh un I'm unsure whether
128:50 - I'm going to uh use this space after
128:52 - September so I might have to find a new
128:54 - space to broadcast anybody has any
128:56 - suggestions around that but hopefully
128:58 - it's going to work out to continue to
128:59 - use this space it's sort of it
129:01 - especially be nicer in the fall when
129:02 - it's not as hot um but I had a wonderful
129:06 - time I've been so thrilled to engage
129:07 - with the school for poetic computation a
129:09 - community here in this space and the
129:11 - other thing I'm really planning for the
129:12 - fall that you'll hopefully see crop up
129:14 - is I have a list of guests who are going
129:16 - to come on and do some guest tutorials
129:17 - or show project projects of various
129:19 - folks in the New York City area so that
129:20 - is something you can look forward to as
129:23 - well um so um that's kind of My overall
129:28 - thoughts I I have a backlog of videos
129:31 - that hav't been released you can find
129:33 - all the content in the archive of the
129:35 - live streams but so you will see new
129:37 - videos so subscribe to the channel you
129:39 - will see new videos released
129:41 - periodically uh every day or two over
129:43 - the next couple weeks there might be a
129:44 - week where you don't see any activity on
129:46 - my YouTube channel but I will come back
129:48 - I am planning to come back in September
129:51 - and if for some reason things go arai
129:52 - and I'm not able to do this content as
129:55 - regularly for a period of time I will
129:57 - kind of like shut down the patreon thing
129:59 - um uh or or pause it because I hope to
130:01 - not be I'm you know I'm I'm I'm firmly
130:05 - I'm in it to do this I'm having fun with
130:07 - it um I'm getting good feedback from
130:10 - people uh positive and negative
130:12 - constructive criticism which has been
130:13 - really helpful and I just to me this is
130:16 - an experiment to create content that is
130:19 - accessible and friendly and playful and
130:22 - experimental and creative um and also to
130:25 - engage uh and create communities you
130:28 - know I find video content for learning
130:30 - to be useful but I find the most
130:31 - powerful way of learning is the the sort
130:34 - of community of people together talking
130:36 - to each other and that can happen
130:37 - physically in space which is an
130:38 - incredible powerful thing but it also
130:40 - can happen online through social media
130:43 - through YouTube chat through slack
130:45 - Channel and so I'm experimenting and I'm
130:47 - always looking for feedback and ideas
130:49 - about how to do this better um and one
130:51 - thing that's on my agenda is to get a
130:54 - more inclusive community of people uh
130:56 - also kind of joining the stuff that I'm
130:58 - doing and participating in processing
131:00 - and P5 J and processing Foundation
131:02 - activities which is a separate uh my
131:05 - YouTube channel exists as a sort of
131:07 - separate thing but obviously is
131:08 - interrelated and there goes the camera
131:10 - uh interrelated with my work with the
131:12 - processing foundation so I hope more
131:15 - will come I I'm kind of uh I feel like I
131:18 - need to play you guys out with a little
131:19 - bit of dancing which seems to be a thing
131:21 - that people
131:22 - enjoy I I I should turn up the volume
131:25 - here so I can hear
131:26 - it I don't know what I don't have all my
131:30 - songs
131:33 - uh I guess I should preview you the
131:38 - uh coding Rainbow theme song so I'm
131:41 - sorry I wasn't really able to answer a
131:42 - lot of questions or
131:45 - or I I have my I I can't wear these any
131:48 - anymore cuz it's too distracting for
131:49 - people with my weird cut off head oh I
131:51 - have stickers tweet me if you want to
131:53 - get stickers I I'm give them out
131:55 - whenever I see people in New York City
131:57 - um and uh but you can also order them
132:00 - online it supports you know I get like
132:02 - 10 cents or something if you order
132:04 - sticker um and uh yeah
132:14 - so my kids were telling me something
132:16 - about the na neigh what's your na ne
132:19 - which apparently is old and out of date
132:20 - and the fact that I don't even know what
132:22 - it is shows that I'm a really old weird
132:24 - person this is season
132:27 - finale not unlike Game of Thrones
132:30 - nothing bad will happen the worst thing
132:31 - that happens is water will get poured on
132:35 - my head which I actually just
132:37 - did but I cooled off a little bit I'll
132:40 - wipe I'm going to wipe it up it's a
132:41 - rubber floor here so everything's fine
132:44 - hopefully this microphone is not getting
132:46 - wet and being rude
132:50 - on the season finale on the season
132:51 - premiere stay tuned for next season of
132:53 - coding rainbow um uh okay this I'm
132:57 - really signing off now whoops no I hit
133:00 - the wrong
133:05 - [Music]
133:07 - button bye
133:09 - everybody see you next time have a great
133:12 - rest of your summer enjoy the outdoors
133:15 - do something fun that has nothing to do
133:16 - with cating hug your neighbors in your
133:19 - friends