00:00 - okay part two here we are with I made
00:02 - some changes now I have a web
00:04 - application that lists all the possible
00:07 - users in my system and I can pick the
00:10 - biskits King for example and hit submit
00:12 - nothing happens yet but what I want to
00:14 - do is hit submit and I want to see the
00:16 - five most similar users to the biskits
00:20 - King this is leading us towards this
00:22 - idea of K nearest neighbor with K being
00:26 - five so the K being three show me the
00:28 - three nearest K being ten show me the
00:31 - ten nearest so again I'm not fully
00:33 - implementing the whole K nearest
00:35 - neighbor algorithm for a machine
00:36 - learning problem yet but I'm just kind
00:37 - of looking at the pieces of it along the
00:39 - way of kind of doing some stuff so okay
00:42 - flipped is precise it compiled last
00:44 - video if you watch the bruise on was so
00:46 - poor I thought but maybe you watch it me
00:48 - do you enjoy this one's going to be
00:49 - probably pretty boring but I have lots
00:52 - of energy now good here we go okay so so
00:55 - all I did by the way as I changed it to
00:56 - just having one drop down menu and
00:58 - here's another thing this was kind of
01:00 - terrible and this by the way I should
01:01 - call this Euclidean distance and I don't
01:05 - like what I did with this at all what I
01:07 - should do is pass in two people right
01:12 - because really what I should be saying
01:14 - is this general function this should be
01:20 - a general function that can look at the
01:23 - Euclidean distance whoops
01:25 - between two people and I'm going to and
01:30 - boy I really don't like the way I get so
01:33 - many terrible things in the last example
01:35 - that I don't like but that's fine
01:36 - I want this function you know it was
01:38 - feeling that I put this in the HTML
01:40 - right here what I really want is for
01:41 - this function to return that similarity
01:44 - score so I want to have a generic
01:45 - function that receives two names and
01:47 - return that similarity score so now what
01:52 - I have is when I press the mouse and I
01:58 - say find nearest neighbors when I press
02:02 - the mouse I want to find the nearest
02:04 - neighbors so that's my function find
02:07 - nearest neighbors and to whom who are
02:12 - the nearest neighbors
02:13 - name is drop-down dot value so I want to
02:17 - find the nearest neighbors to name okay
02:20 - so who what am i what what bye bye
02:24 - goodness what am I going to do here so
02:26 - in order to find the five nearest
02:29 - neighbors what they actually
02:30 - unfortunately need to do is calculate
02:33 - the similarity score for everybody and
02:35 - then sort that list by the most similar
02:38 - and take the top five okay
02:40 - so how are we going to do that well
02:42 - luckily for us we happened to have this
02:45 - nice array of data users that's the
02:49 - array of everything so what I can do is
02:51 - I can say let's go loop through data
02:54 - users index data users dot length and
02:59 - what I want to say is I want to look at
03:02 - somebody else other equals data users
03:04 - index I and as long as other is not
03:08 - equal to name like I don't want to check
03:11 - my similarity rating against myself as
03:13 - long as other is not equal to name
03:15 - I want to get my similarity score
03:17 - between Euclidean distance we calculated
03:21 - this in a previous video if you didn't
03:22 - watch that link in the description below
03:24 - so turret cetera between myself name and
03:29 - other so I want to look at all those
03:32 - similarity scores now where am I going
03:34 - to put those similarity scores well
03:38 - there's a variety of places I could put
03:40 - ten but why not just add it to that
03:45 - object so data index users index I and
03:49 - now I don't like this so I think what
03:53 - I'm going to do is create a temporary
03:54 - list so what I want to do is create a
03:57 - list called similarity similarity scores
04:01 - is an array and what I'm going to do is
04:07 - I am going to for every single user this
04:12 - will be interesting
04:12 - ah yeah why not what I'm going to do is
04:16 - I'm going to say similarity scores index
04:20 - I equals equals F similarity
04:26 - so I'm going to make a little table
04:30 - called and let's so let's look at all
04:33 - the similarity scores let's see if this
04:34 - works okay here we go
04:37 - so I'm going to run this and let's look
04:40 - at okay users is not defined sketch at
04:43 - line 45 okay so what do I want to do I
04:46 - don't have access to this users variable
04:48 - here I'm just going to make it a global
04:50 - variable which is not the best solution
04:52 - but it will do for right now so that I
04:55 - can have access to it there
04:57 - let's hit refresh and cannot read the
04:59 - property for of undefined at sketch ojf
05:03 - fixes I have another bug here in line
05:05 - 60o dot name this needs to be dot name
05:10 - so this needs to be dot name I want to
05:12 - look at the others name not the full
05:14 - object and so now when I'm seeing
05:18 - everything here so I can take out some
05:20 - of these cons of this console dot log so
05:22 - now let's do this come on
05:34 - so there we go there's my people attempt
05:37 - to make this more interesting we could
05:39 - think this is an array of all of the
05:41 - similarity scores now notice there's no
05:43 - index zero in this array because alka
05:47 - happens to be user 0 and I am NOT so
05:50 - what I should do here is I should do
05:52 - something like I'm just going to do
05:53 - similarity scores equals negative 1 so
05:58 - by definition if a index I so if it is
06:03 - yourself I'm going to put the similarity
06:05 - score is negative 1 so I'm going to that
06:07 - well what I do the sorting later it's
06:09 - going to ignore so what I have here is
06:11 - an array of all of these values I can
06:14 - easily sort that array because then I
06:17 - have these value I have this array of
06:20 - all the scores sorted but that's not
06:22 - what I want I want all of the names
06:24 - somehow sorted and I have a separate
06:26 - array
06:27 - guess what JavaScript array sorting to
06:30 - the rescue so you then maybe you woke up
06:32 - this morning and thought I hope I
06:33 - watched a video about how to make a
06:35 - movie recommendation system and then you
06:37 - watch the video and really I think bonus
06:39 - I learned about sorting JavaScript
06:40 - arrays so we're going to do this so let
06:42 - me show you a little bit about this
06:43 - let's say I have an array and it knows
06:47 - what I want to type it has some numbers
06:49 - in it 52 1 negative 799 513 so I can
06:56 - actually say array dot sort and what do
07:02 - I get I get the array in sorted
07:04 - numerical order now what is the actual
07:07 - array it actually changes that array so
07:09 - it doesn't create a new array in sorted
07:11 - order it actually changes this array
07:13 - that's in sorted order and hopefully you
07:15 - can see that now here's the thing if I
07:19 - have an array and it's like some letters
07:21 - C B a V B G right and now I have this
07:32 - array of all these letters I can also
07:35 - say array dot sort and now I have it
07:40 - sorted in alphabetical order JavaScript
07:43 - arrays can be sorted with the sort
07:46 - function
07:46 - if JavaScript happens to know how to
07:50 - sort them because what if I were to just
07:53 - put some generic objects or some other
07:56 - kind of data that doesn't have an
07:57 - obvious way on how to sort how it it
08:00 - sorted well javascript to the rescue
08:03 - this sort function can actually take a
08:06 - call back I can put a function inside of
08:09 - there and the sole purpose of that
08:11 - function is to tell JavaScript how to
08:14 - compare two particular elements so how
08:20 - am I going to do this we realize there's
08:21 - a flaw in the way that I wrote this but
08:24 - we're gonna everything's going to be
08:25 - fine I know what to do trust me I know
08:29 - what to do it's going to be okay okay so
08:33 - what is it that I want to sort I
08:35 - actually want to sort data dot users I
08:38 - want to see that array the array of all
08:41 - the users in sorted order were the most
08:44 - similar users or at the top of that
08:46 - array so what I want to do is say at the
08:49 - end of this where I calculate all the
08:51 - similarity scores I want to say data dot
08:54 - sort sorry data users dot sort and I
09:00 - want to say compare similarity by having
09:04 - the longest so in other words I want to
09:06 - write a function that compares the
09:14 - similarity scores between two now what
09:18 - this callback by definition takes two
09:22 - elements that are in that array a and B
09:25 - so one thing I could do is just say
09:27 - let's just look at this console dot log
09:29 - a dot name B dot name now this is not
09:35 - going to do anything but let's just run
09:37 - it because it's just going to log stuff
09:39 - okay
09:40 - let's run this submit so console logging
09:44 - too many things I don't want to see this
09:46 - anymore let's do this again submit so
09:50 - look at it so it's definitely comparing
09:52 - doc versus Leon he walks where's Leon
09:55 - Daniel versus Leon blank versus Leon
09:57 - chewbacca so this is a list of every
09:59 - user be
09:59 - compared to every other user in order to
10:02 - sort that array however I don't want to
10:08 - sort it by their names right if I wanted
10:10 - it to be in alphabetical order I could
10:12 - do that very easily like by comparing
10:15 - their names I want to sort by the
10:16 - similarity scores oh but how do I look
10:19 - up their similarity score by their name
10:21 - now I have no real easy way to do that
10:24 - unfortunately luckily for us I could not
10:29 - put these similarity scores in an array
10:32 - but I could put them in an object where
10:35 - what I actually do is store it by their
10:39 - name and in other words I could just at
10:43 - this point now yeah I could keep that as
10:44 - negative one so so what I'm doing now is
10:50 - I'm going to store all of the scores in
10:53 - a lookup table that is organized by
10:56 - their name so now what I want to do is
10:59 - I'm going to say score 1 equals
11:03 - similarity scores for a and score 2
11:08 - equals similarity scores for B so now
11:14 - let's console dot log score 1 and score
11:18 - 2 let's see what those look like
11:23 - undefined undefined undefined okay what
11:26 - it up a dot name B dot name right I want
11:32 - to look it up by their name because the
11:35 - array that I'm sorting is the array of
11:37 - the full object so I want to look it up
11:39 - by their name so let's try that and look
11:42 - at this so we can plainly see we're
11:44 - comparing all these similarity scores
11:46 - and now it's our job to say to
11:49 - JavaScript to the sort function this is
11:52 - how these numbers should relate to each
11:54 - other I won if score one is higher than
11:58 - score two and then user 1 should be
12:01 - before user 2 in the array and the way
12:03 - that we do that is by saying I can never
12:06 - remember this so I always just do this
12:08 - through trial and error but basically
12:10 - it's up to me to return a positive one
12:13 - if I want a before be a negative one if
12:16 - I want be before a or a zero if they're
12:19 - equal well I don't actually have to do
12:21 - as a positive one or a negative one but
12:22 - I can actually just return is I can
12:24 - return score one - score - so I am
12:30 - giving a comparison score to these two
12:33 - similarity ratings to JavaScript so that
12:36 - it can sort those objects okay so it's
12:40 - sorting the object in data users by
12:43 - their score in the similarity scores
12:45 - lookup table okay let's now say consult
12:49 - log data users let's take a look at this
12:54 - okay here we go
12:55 - submit so here's our array hold on six I
12:59 - want to look at it boy this is white
13:04 - okay I'm going to look at it now let's
13:07 - look we should see a high similarity
13:10 - score for note I think I did it wrong oh
13:16 - I don't see the similarity scores here I
13:18 - should put this little so clearly I
13:22 - thing is sorted in the wrong order
13:24 - because alka is the first thing in the
13:26 - array and alka has a similar a score of
13:28 - negative one I just realized I can't
13:29 - even see the similarity score so one
13:31 - thing I could do which you might do is
13:32 - exercise I could add as a property the
13:34 - actual similarity score here but I'm
13:36 - going to do this in a little bit of a
13:37 - different way so first of all let me
13:39 - just say score two - score 1 let me
13:43 - invert that and run this again and
13:45 - hopefully what we're going to see in the
13:47 - first spot in the array is Praetorian so
13:51 - this is the user that's most similar to
13:54 - Al Kut we can't really see this for sure
13:56 - so how can I see this for short so what
13:58 - I actually want to do is I just want to
14:00 - display the top five so what I'm going
14:03 - to do here is I'm going to say for VAR I
14:06 - equals 0 I is less than data well is
14:10 - less than 5 I want to look at the 5 so
14:12 - this is let me say bar K equals 5 I want
14:15 - to look at the K the five nearest
14:17 - neighbors and I'm going to say create
14:20 - div data users index I
14:27 - name + : space + similarity scores so
14:35 - first of all I want to look I just want
14:36 - to get their name so let's put that in a
14:39 - separate variable name + similarity
14:42 - scores by name so let's see if let's see
14:46 - those come up here we go and what I'm
14:49 - going to do is I'm going to make all of
14:52 - these divs I'm going to put them in that
14:58 - put that in that result parent that I
15:01 - was using from the previous result
15:03 - paragraph that is using from the
15:04 - previous example okay so here we go
15:05 - let's look at the top 5 most similar
15:10 - users oh boy is it just exciting to alka
15:18 - [Music]
15:21 - criterion with a similarity score of
15:25 - points 3 6 leone with a similarity score
15:30 - of i don't have other sounds 1 3 3 3
15:38 - geremy with a similarity score of point
15:40 - 3 3 Baraka my friend Randy with a school
15:42 - Randy they're in the fifth spot with a
15:44 - score of 0.28 alright so we could try
15:49 - this with any other user like Chewbacca
15:51 - and we could see oh look at this so I
15:53 - got clearing it so let's uh I think what
15:56 - I could do is a I might as well fix this
16:00 - while I'm here is right when I'm about
16:02 - to find the nearest neighbors I should
16:04 - just take if this is a silly way to do
16:06 - this but I'm going to
16:08 - is this going to actually work will this
16:09 - delete everything that's in result P
16:11 - just by giving it blank HTML this might
16:13 - be a terrible idea
16:14 - no because those divs are still in there
16:18 - so what I want to do is result divs is
16:25 - an array this is a very silly thing that
16:28 - I'm doing but I'm going to just put all
16:34 - those divs in an array so that at the
16:36 - beginning what I can do
16:39 - is and I'm sure I could dynamically
16:41 - access all of those by doing a select or
16:45 - something but I'm just going to say
16:48 - result did index i dot remove and then
16:52 - result div is a new empty array so that
16:56 - should yeah and interestingly enough the
17:01 - sorting order because these are all
17:02 - three or equal and actually getting a
17:04 - different order each time which is kind
17:05 - of interesting to realize and now we can
17:09 - see we're getting similarity scores for
17:11 - any person
17:12 - Kenneth similar to this dot frost try on
17:15 - Stefan and Keyon okay we've done it now
17:18 - we have the k-nearest similar people to
17:24 - a given Raider now here's the thing this
17:28 - is what I'm going to do in the next
17:30 - video before I leave here today we make
17:31 - one more video what if a new person
17:34 - comes onto the scene and rates a few
17:37 - movies but hasn't seen one of the movies
17:39 - how could I guess a new rating for the
17:44 - new user based on their similarity to
17:47 - their K nearest neighbors and this is a
17:49 - regression problem I want to predict a
17:53 - star rating like you could say the
17:56 - classification because I could classify
17:57 - the stars into 0 1 2 3 4 or 5 but I
18:01 - might do like a 3.4 I might sort of
18:03 - calculate a numeric continuous score but
18:05 - so that's what I'm to do in the next
18:06 - video I am going to predict a star
18:09 - rating of a new user who hasn't seen all
18:13 - of the Star Wars films are you going to
18:17 - be here to watch that video I would say
18:20 - I hope so but I fully understand if not
18:22 - so I'll see you maybe in the next video
18:24 - thanks for watching
18:29 - [Music]