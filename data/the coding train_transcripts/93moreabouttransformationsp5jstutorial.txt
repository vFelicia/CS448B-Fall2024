00:00 - All right, so I'm going to
make one more video here
00:02 - about transformations
just to cover a few bases
00:06 - that I didn't get to.
00:07 - And some of this is
unnecessary information.
00:08 - You could probably
skip this one.
00:09 - But if you want to dive a
little bit deeper into this,
00:12 - there's a few things about this.
00:13 - The first thing I want to say
that's actually quite crucial
00:16 - about push() and pop() is that
push() and pop() doesn't just
00:19 - save and restore
transformation information.
00:21 - And this is actually
not true if you're
00:24 - using Processing, the
Java-based platform that I
00:26 - use in some of my videos.
00:27 - This is only true if
using p5.js because it's
00:30 - the way that the
HTML5 canvas works
00:33 - using all these terms
that I don't want to use
00:35 - but I'm using them.
00:36 - So it actually
saves and restores
00:39 - lots of style
information as well,
00:40 - which can be useful to you.
00:42 - So, for example, if I
go back to this code.
00:45 - And at the end here, if I just
want to draw another ellipse,
00:49 - another ellipse is
going to be at 300--
00:51 - is going to be at
300, 300, 60, 60.
00:55 - And I hit Refresh.
00:56 - Now look at this.
00:57 - This ellipse is not gray
with a white stroke,
01:02 - with a white outline.
01:03 - It should be because I said,
stroke(255); fill(100);
01:08 - drew the rectangle.
01:09 - But actually, push() and pop()
also save and restore stroke
01:16 - weight, stroke, fill, all
sorts of styling things.
01:20 - Now, if I could try to give
you a list of every single
01:22 - function, that's every
single setting that's saved
01:24 - and restored by push() and
pop(), and I wouldn't know--
01:27 - I wouldn't be able to begin.
01:28 - But in addition to the
transformation stuff,
01:30 - you can also use this for
styling information, which
01:32 - I generally don't,
but you might find
01:34 - this useful in another context.
01:35 - So that's number one.
01:37 - Now the other thing
that I want to mention
01:39 - is that you could imagine a more
complex scene, where this thing
01:46 - is rotating around this thing.
01:48 - And this other thing is
rotating around this thing,
01:50 - but this other thing is
rotating on this thing but not
01:51 - this thing.
01:52 - And you start needing to
say, push(), draw some stuff,
01:55 - push(), draw some stuff,
push(), draw some stuff, pop(),
01:58 - draw some stuff, pop(), pop(),
or something like that, right?
02:01 - So one thing you
should realize is
02:02 - you can only have as many
pops as you have push.
02:06 - You could only restore the
amount of things you've saved.
02:08 - But the question
arises, which is,
02:13 - when I save a bunch of
times and I restore,
02:16 - which thing that I
saved do I restore?
02:18 - And a way that you can determine
the answer to this question
02:22 - is, is the way that I'm saving
the sequence in something
02:26 - called a stack or a queue or
perhaps some other algorithm?
02:31 - So there's something
called a stack,
02:34 - and there's something
called a queue.
02:37 - I don't know if I spelled
that wrong, a queue.
02:39 - What are these things?
02:40 - So push() and pop() are
terms that apply to saving
02:45 - and restoring
information in a stack.
02:49 - It's called a stack
because you can think
02:50 - of it like a stack of paper.
02:52 - So if this is like a bin,
your inbox, so to speak,
02:55 - and I put paper A in there,
then paper B, then paper C, then
02:59 - paper D, they're
stacking up, A, B, C, D.
03:03 - So push() is pushing the
things onto the stack,
03:07 - adding to the top of the stack.
03:08 - When I say pop(), I
take the last thing out.
03:11 - So first one in, last one out.
03:14 - No, last one in, first one out.
03:16 - That's what it is.
03:17 - The stack-- the last thing I put
at the top of the pile of paper
03:20 - is the first one I'm
going to take off.
03:21 - This is different
than a queue, which
03:23 - you could think of like
some kind of ticket window,
03:28 - where people line up in a queue.
03:32 - The first person in
line for the queue
03:34 - is the first person
to get a ticket.
03:36 - So these are data
structures that
03:39 - are common to a lot of
programs and a lot of scenarios
03:41 - that, if you watch all of
my videos, might come up
03:43 - and lots of other places.
03:45 - You don't really need to worry
about this too much in the case
03:48 - of transformations, but it
is important to realize that
03:50 - push() and pop() are terms that
relate to the data structure,
03:53 - a stack.
03:54 - They refer to pushing
things on to the stack,
03:56 - popping things off of the stack.
03:58 - And if you push() multiple
times, save multiple times,
04:01 - you're restoring
in reverse order.
04:03 - So I probably should cook
up some kind of example
04:06 - that needs that.
04:07 - I can't think of one right now,
so I'll come back and do that
04:10 - another time.
04:10 - But that's one
thing I want to say.
04:12 - Now the other thing
I want to say--
04:14 - with the p5 reference here,
I'm going to go to Transform,
04:16 - and I'm going to look
at all these functions.
04:18 - So there's a couple
of things that
04:19 - are-- there's some things
that are important here.
04:20 - Number one is, oh, my goodness,
in addition to rotate(),
04:23 - there's rotateX() and
rotateY(), and rotateZ().
04:26 - Now, those functions
rotateX, Y, and Z--
04:29 - I actually have no idea what
shearX() and shearY() do.
04:31 - We should look at the
reference to read that--
04:34 - those functions are
for the WebGL renderer.
04:37 - The WebGL renderer is
a 3D render for p5.
04:40 - At the recording
of this video, it's
04:42 - still in the very early stages.
04:44 - There was a lot of work that
was done over this past summer
04:47 - through a program called
Google Summer of Code.
04:49 - So the WebGL library
is in much better shape
04:51 - and hopefully will
continue to improve.
04:53 - It's a way of doing 3D in p5.
04:55 - I should come back and make
another video about that
04:57 - and look at
transformations in 3D.
05:00 - But in case you're wondering,
if your rotate() is the same
05:03 - as rotateZ().
05:04 - The z-axis is the axis that
comes out of the screen,
05:08 - and so things rotate
around the z-axis.
05:10 - If I come back to
this, this over here--
05:15 - [LAUGHS] let me zoom in on that.
05:18 - I'm desperate to do
this exact demonstration
05:20 - that I want to do.
05:21 - [LAUGHS] Feeling like
my hand right there.
05:24 - Oh, there is.
05:26 - That's the z-axis.
05:28 - This is pathetic.
05:28 - [LAUGHS] That's the z-axis.
05:30 - I'm pointing at you.
05:32 - So that's the something
rotating around the z-axis.
05:34 - If it was rotating
around the y-axis,
05:36 - it would come out of
the screen like this.
05:38 - If it was rotating
around the x-axis,
05:40 - it would come out of
the screen like this
05:42 - but not actually come out of
the screen because it's 2D,
05:44 - and I'm off in never-never
land, talking about 3D,
05:46 - but it's really 2D.
05:47 - It's just the illusion.
05:48 - Explore that on your own time,
or I will come back to it
05:50 - in a future video.
05:51 - But the other thing I wanted
to mention here is you'll see
05:53 - like, oh, applyMatrix(),
resetMatrix()?
05:58 - Why is the word "matrix" there?
05:59 - What are we talking about?
06:00 - Well, it turns out that
the way the orientation,
06:06 - the transformation state--
06:07 - what is the
transformation state?
06:09 - Is 0, 0 in the top left,
is there any rotation,
06:12 - is there any scaling, is
stored in a matrix of numbers.
06:16 - And that matrix of numbers
might look something like this--
06:18 - 1, 0, 0, 0, 1, 0.
06:21 - So this is a 2-by-3 matrix,
two rows, three columns.
06:27 - And this is describing
the default matrix
06:31 - with no rotation, no
translation, no scaling.
06:34 - You can imagine if I
scale by 2, This matrix
06:38 - might turn into 2, 2.
06:40 - If I translate, some of
these numbers might change.
06:42 - If I rotate, some of these
numbers might change.
06:44 - So I would love to do
some kind of tutorial,
06:47 - pretend that I know
all about this.
06:49 - I'm going to do something
like tutorial series
06:50 - about programming your own
transformation engine 3D
06:54 - rendering thing and how you
calculate all these matrices.
06:57 - But this is what's
more important
06:58 - about it is that,
as you do this,
07:01 - it's all stored in a matrix.
07:04 - So some things you can do is
you can just actually call
07:07 - the resetMatrix() function.
07:09 - And reset is just
wipe everything.
07:11 - So push(), push(),
push(), pop(), pop(),
07:13 - pop() is like save, save,
save, restore, restore.
07:15 - But if you just want to reset
back to the default state,
07:18 - you can just call resetMatrix().
07:20 - ApplyMatrix()-- I've
never actually used this,
07:22 - and I don't know how far along
if this actually works in p5.
07:25 - But in theory, if it does,
what it's supposed to do
07:27 - is I could cook up my
own set of numbers,
07:32 - put that into some kind
of array or something,
07:34 - and then apply
that to the matrix.
07:37 - This video better go far
away buried deep somewhere
07:40 - in the playlist
because this really
07:41 - isn't part of the first few
weeks of learning to program,
07:44 - but I'll figure that out
later, but, boy, it is.
07:46 - So that's really the last
piece that I want to explain--
07:48 - what is push() and pop(), and
why do we talk about a matrix
07:54 - when we talk about
transformations.
07:56 - OK, thanks.
07:57 - [MUSIC PLAYING]