00:00 - Hello welcome to another coding challenge in this coding challenge
00:03 - [I] am going to build from Scratch in Javascript a fractal tree
00:07 - And I'm gonna do kind of you know you can see once we've made once this video is over
00:11 - And I've made one example of it
00:13 - You can see sort of variety of images here of things you might be able to make from it
00:17 - And you'll also see that there are [a] few different follow up videos after this one that show other techniques for generating trees in different
00:23 - ways
but let's just get started first by let me just draw you a diagram to sort of so that we can kind of understand what's
00:29 - Going on so the core idea of a fractal tree is we have a recursive definition
00:35 - So what is a recursive definition a recursive definition is something that's defined in terms of itself
00:41 - And actually [there's] a math function
00:45 - which is known as
00:46 - Factorial 4 Factorial
00:47 - Equals 4 times 3 times 2 times 1 you know 10 factorial equals 10 times 9 times 8 times 7 times 6 times 5 times?
00:54 - 4 feet I 1 now 3 factorial is equal to 3
00:59 - Times 2 times 1 so you could actually say that 4 factorial is equal to 4 times 3 factorial or
01:06 - That any number n. Factorial is equal to itself times n minus 1 factorial and this is a recursive definition
01:15 - I'm defining factorial in terms of itself which seems like something you shouldn't be allowed to do
01:20 - but it is something you are allowed to do in fact you're encouraged to do and all even though you might send us get a
01:25 - Headache all Sorts of wonderful, beautiful, elegant things can arise out of recursive definitions one of which being
01:32 - Fractal Trees [ok] back over here that was completely unnecessary, but I did it anyway, [so] what is the recursive depth?
01:39 - This is like some math stuff and some numbers
01:41 - [look], what does it mean to have something that's visual defined recursively. [well] we have this idea of a branch
01:48 - So I'm going to say a branch is a beginning and end point and it is defined as having
01:56 - two branches attached
02:01 - You probably can't read [that] doesn't really matter this says branch is defined as a line that has two branches attached
02:08 - Like this, so let me draw that over here. This is a branch and as two branches attached
02:12 - Oh, but these are also branches, so they have two branches attached
02:15 - [oh], and these are all also branches, so they have two branches attached
02:19 - [oh], oh, and these are all also branches and they have to rent ETc, ETc, Etc
02:23 - So a branch is defined as something that has two branches and those have branches
02:27 - This is known as recursion now one thing you might be thinking about is
02:32 - where does this end so in the
02:34 - Theoretical magical world of fantasy this would go on forever and these branches are getting shorter and shorter and they would get infinitely small
02:41 - but in the world of pixels and programming
02:43 - We have to stop somehow so we need an exit condition and actually that's built into this up here
02:48 - I just didn't explicitly state it whenever you get to one you stop counting down in this
02:54 - multiplication for a factorial and the same thing is true here we could say
02:57 - [continued] branching each branch has two branches attached to it until it is less than some number of pixels long
03:04 - So this is the idea and the way that this ends up happening in code is if you have a function
03:10 - Whoops that's not how you spell function?
03:13 - in
03:15 - code if you write a function, and you call it something [like] branch a
03:24 - Recursive function in code is defined according to itself meaning somewhere in that function
03:29 - You're going [to] actually call itself. So you're calling the function you're defining from within the function and it results in this word loop
03:36 - [I'm] gonna call Branch which calls branch which calls branch which calls branch and eventually stops at some point
03:42 - So this is the idea of recursion and how it's implemented in code let's go and actually write this code now
03:48 - dare I say I'm a little bit afraid to do this, but let's see what happens [okay], so
03:54 - Okay, so what I have here is a p5.js sketch. P5.js is a Javascript framework
03:59 - Links in the video description of where you can get it and get started with it and the only thing that's going on right now
04:04 - Is that HTML5 Canvas has been created?
04:06 - And I'm drawing a gray background there, so I just want you to be able to see that
04:09 - I'm going to go back [to] over here where I'm running it and you can see what?
04:13 - You can see there's my 400 by 400 pixel background
04:16 - So I [won't] have the trunk of the tree to start with so just to kind of get that going let's draw a line that
04:24 - [goes] from
04:25 - the Center
04:27 - 200 and the bottom two
04:30 - To the center and the bottom [minus] some length
04:34 - So I'm going to make a length variable which starts at A 100
04:40 - and
04:41 - now and this line I want it to be white and
04:45 - So now if I run this again, you can see okay. [I've] got a lines about so I have the trunk
04:52 - so what I want to do now is
04:55 - Actually put that code
04:57 - That's drawing the trunk into a function so I want to call branch and branch is actually going to draw that line
05:04 - So let's do that. So the next thing. I'm going to do is rake this a function and
05:09 - One thing I want to do with this function is I want to give this function an argument and that argument is
05:15 - How long to draw that branch so I'm actually going to put that variable here in the function, [and] then I'm going to say
05:25 - line 200 height to 100 height minus length
05:31 - so ups
05:33 - So now here. I actually want and I'll just say stroke 255 here now what I want to do is say Branch
05:41 - [I] forgot what I was doing 100
05:43 - So you can see here
05:45 - that the idea here
05:48 - Same same result is that now I'm calling this function Branch, and I'm giving it the value 100 now. Here's the thing
05:56 - The way that this is going to work is I don't actually want to only come over here, so I want I want to do
06:04 - is actually instead [of] drawing the
06:07 - the trees starting at this bottom location which is
06:11 - 200 comma height I want to move the origin which is here all the way down to here
06:17 - I always want to be drawing the branches relative to the origin by using the
06:21 - Translate P5 function which sort of moves that [zero] zero point around and
06:25 - Once we start doing a little bit [more] of this you'll see why that makes a lot of sense
06:28 - So let me come back over to the code and what I'm going to do is right here. I'm going to say translate to
06:36 - 200 comma [hight]
06:38 - Branch
06:39 - 100 and now this becomes draw a line from 0 a
06:45 - 0 to 0 comma negative length
06:52 - So now if I run this program same exact result so we [have] a very simple beginning
06:58 - We are translating to the bottom. We are drawing a branch from the bottom straight up
07:03 - So what do I want to do next?
07:04 - [I] have drawn a branch from the bottom straight up will guess what I want to do
07:09 - I want to rotate and draw a branch to the right
07:12 - So what I want to do is now, say let me rotate by like I don't know
07:17 - 45 degrees let's start with 45 degrees is Pi divided by 4 and
07:24 - Then let me draw another branch 0 0 0 negative length, [oh]
07:31 - You know what [I] [also] need to translate [ah] so before I write. I I'm down here and I drew
07:39 - The branch like this and now I want to start drawing from here, so after I [finish] drawing the branch
07:43 - I need to translate back up to here
07:46 - Ok so before. I rotate now. I need to translate up
07:51 - 0 comma negative length, so we're drawing that bottom line, we're translating up to the top
07:57 - We're rotating and drawing another line. Let's see what that looks like there we go
08:02 - second Branch now I
08:05 - Want that second branch to be a little bit shorter. So maybe I'll make it 2/3 of its size so multiply it by 0.67
08:14 - So you can see now. It's a little bit shorter, but have I done anything recursive here yet
08:19 - So am I really going to go and draw every single line of the tree is a separate line function
08:24 - No, what do I actually want to do? I just want to call branch again and what I want to call branch with a
08:32 - slightly shorter
08:34 - Branch now. I'm tempted to run this and
08:38 - I could run this but if I run this
08:43 - I browser is going to crash [most] [likely] let's just try it danger danger. Let's live dangerously
08:48 - [I'm] going to run this
08:50 - So you can see I would we got an error Maxximum call stack size exceeded. So what happened here
08:56 - You can see it started doing it, but it's just like decided it couldn't do it anymore
08:59 - What happened? It's calling branch from within Branch and that's an infinite loop branch calls Branch calls Branch calls Branch Cross Branch
09:06 - So I need to say at some point don't call branch anymore. What every time I call branch length is
09:12 - Shrinking so I could actually just say something like only if length is greater than like four pixels should
09:20 - [I] actually bother calling branch again. So now
09:25 - You can see here
09:26 - I'm drawing the first line
09:28 - And then I'm calling branch again and rotating calling branch again and rotating so and we could see here I could
09:33 - Continuously, I could I could make that
09:37 - angle of rotation a variable so I said it was Pi divided by [four] and
09:42 - I could rotate by I'm going to call that angle actually by an Angle and
09:48 - One thing I could do just so you see is I can I can make a slider. Let's just do this really quickly
09:56 - Slut but there is a P5 in the P5 dom library I can make things like a slider
10:02 - And I want to have a slider from [zero] to 2PI
10:08 - Oops, I can't spell [spell]
10:11 - [2pi], and I [want] [it] to start it. Maybe pi divided by four and then
10:15 - [what] [I] want to do is say in draw angle equals slider dot value so what I what I'm doing
10:21 - Now is if I run this
10:24 - Yep, ah so create slider is not defined probably because I need to actually
10:31 - reference the Dom library in the Index file
10:35 - so now [you] can see
10:38 - Whew oh look at this, so one thing by the way
10:41 - It's working but notice how the slider it can only move up by units of one
10:45 - So one thing that I forgot is there's an argument
10:50 - [there's] an there's a fourth argument
10:52 - Which is the step size for the slider?
10:54 - So [I] want to move it up by like lower increments, and you can see here now
10:59 - I can sort of play with that angle and I can turn
11:02 - What that angle of rotate is for this tree thing, but I've only branched to the right now. There's a couple issues
11:09 - One is this butter if this pie is not defined error on sketch line one. You know what Sort of strange as [looks]?
11:17 - [looks] is that actually this is sort of a
11:20 - Little weird thing but pie is a built-in variable
11:23 - part of the P5 Dom library of the P5 library not the Dom Library and the P5
11:29 - Library none of its stuff is available in [setup]. Just yet
11:32 - But it doesn't really matter because I'm getting it from the slider
11:34 - So let's change that to zero so I can go back and we can see okay
11:37 - So now I have this tree that [I] can change the angle with this slider
11:42 - You can see all the way from [zero] to 2PI
11:44 - And I probably actually just want to make it from zero to Pi divided by two or whatever
11:48 - But we can change that range later now
11:51 - That's only branching to the right so what if after [I] branch to the right I?
11:56 - also, then rotate by negative Angle and
12:03 - Branch
12:05 - to the left
12:08 - Now really what I want to do is actually have this if statement around all of that
12:13 - So the idea [here] is [that] for every branch. Here's the recursive definition of a branch?
12:19 - draw a line and
12:21 - Then as long as it's still long rotate to the right and draw another line rotate to the left and draw another line and do
12:26 - That for every single branch let's run this it's not going to work, and we'll figure out why
12:31 - It did something kind of interesting and crazy look at this crazy thing now. Do you see what's happening?
12:37 - Everything is connected everything is connected. It's like this
12:46 - What did I do I went like this?
12:49 - like
12:51 - [this] pen
12:52 - [I] went like this and then I branched to the right and then I branched to the left and then I branched to the
13:00 - Right of that until I don't know what I did
13:02 - But [I've] always going whatever that recursive order is I'm always going from where I left off
13:07 - But actually what I want to do is I want to go to here and branch to the right and then they need to come
13:12 - Back here before [I] branch to the left and then this branch is to the right and then come [back] here before [I] branch to
13:18 - The left so the way that I can come back is by using the push and pop functions in P5
13:24 - Because push is a function that says save the transformation state, so if I move from I translate from here to there
13:32 - And then I say push
13:33 - I save I can draw this to the right then I can say pop to restore and then draw this to the left
13:38 - So if I come back to the code you will see that all I need to do is add a push
13:45 - Right here before I rotate and branch and then also [Anna] pop right after and also around here
13:52 - so the idea here is that for every single branch every single branch is defined as a line and
13:58 - Then when you get to the end of that line you save where you are and branch off to the right restore
14:04 - Where you were and branch off to the left now the way the order of things happen is not
14:08 - Exactly that because once you call branch you're then into the next [one] and then you're the next one then you start popping back all
14:12 - the way I encourage you to try to like do some sort of
14:15 - Acted out physical demonstration or drawing like try to be the computer following all the pushes and pops
14:20 - but you'll see now if I run this I believe it will work and
14:23 - You can see now we have this lovely fractal tree, and I can sort of like change the angle now
14:30 - You know this is only so this is really finished. I've only really scratched the surface here
14:34 - There's a bunch of things that I might encourage you to think about doing number one is can you keep track of?
14:39 - Which level your of the tree you're on and draw the branch with a different thickness using stroke weight, so that's an interesting problem
14:46 - I'd be happy to demonstrate a solution at some point to that you might think [about] well
14:51 - What if the angle isn't the same with all of those branches?
14:54 - What if there is a variable of branches instead of always - always with equal angles Angles and you can see that in this?
15:02 - Google image search for a fractal tree
15:06 - You'll see that you can you know with various other ways of kind of doing this you might be able to get to start to
15:12 - Get different types of more chaotic or out in
15:16 - Some ways organic looking qualities rather than than this very exact
15:21 - perfectly symmetrical
15:24 - Fractal so this concludes this part of just doing this basic fractal tree
15:29 - I'm going to do this again in the next video in another video, but instead of using push and pop and translate
15:36 - I'm actually going to use sine and cosine of some math
15:38 - And you'll see what doing it that way allows you to do something a little bit different which might interest you
15:43 - Based on how you could then modify the tree at a later point, okay? Thanks for watching and I'll see you in another video
15:49 - [maybe] or maybe not
15:51 - Good bye