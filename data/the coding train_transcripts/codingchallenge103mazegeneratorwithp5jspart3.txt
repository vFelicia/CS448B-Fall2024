00:00 - Welcome to part three of my depth first search
00:03 - recursive backtracking magic maze generating Algorithm in the browser using p5.js project
00:08 - So this is what [I'm] trying to make and where [I] am so far is kind of along the way there
00:12 - You can see this something similar is happening
00:14 - Here where I'm starting with a cell and a grid and I move to a cell next to it and I move to a cell
00:19 - Next to it
00:19 - I move to a cell next to it
00:20 - And I never go back and move to a cell that has already been visited the visited cells being highlighted in purple
00:26 - [so] what are the next steps?
00:27 - Let's go to our Wikipedia
00:29 - Page that had the algorithm very nicely laid out for us and we could kind of see what we've done so far
00:33 - So by the way there were on part one right now
00:36 - Part one if the current cell has any neighbors which have not been visited
00:40 - We did that already what choose randomly one of the unvisited neighbors? We've done that already
00:46 - skip step two skip step three step four
00:48 - Make the chosen cell the current cell and market is visited so all I've done so [far] in building
00:54 - This is step one and four so I'm just moving from cell to cell to cell to cell not revisiting any cells now
01:02 - [part] step to push the current cell to the stack. This is something I'm going to visit in the next video
01:07 - What is the stack why do I have to keep track of [the] stack what does that all mean?
01:10 - I'm Gonna get to that this video
01:12 - I'm gonna work on part three remove the wall between
01:15 - The current cell and the chosen cell the chosen cell who is the chosen cell okay?
01:21 - Let's figure out how we're going to do that
01:23 - I kind [of] like figure out in the code where that is or what we're even talking about
01:25 - [so] there's we already have the pieces of this somewhere, so here. We are. This is the thing running here is our code
01:32 - let's go down [to] the cell object and
01:36 - We can see here's one thing so each cell object has an array called walls with four true variables in it
01:44 - True. [oh] top right bottom left top right bottom left. So let's say the two cells are next to each other
01:51 - One is to the left and one is to the right one of them needs to remove its
01:56 - Right wall so that would become false and the other one needs to remove its left wall
02:02 - For and that would become false. I got to draw a diagram here to understand this let me come over. This this is tricky
02:10 - And I think we can just get rid of this larger grid now. We kind of understand that so this is what I mean
02:17 - There's really four scenarios
02:24 - Right this is this [is] the cell and this is the neighbor
02:28 - This is the cell and this is the neighbor, right?
02:31 - So this is the wall that needs to be removed the cell needs its right wall removed the neighbor needs its left wall remove
02:37 - Here the cell needs its bottom wall removed the neighbor needs its top wall removed
02:42 - how do we know which is which well if this is I and this is I plus [one] right the difference between
02:49 - You know one cells you know
02:52 - Like cell index I - neighbor Index I right that'll tell us if it's to the right or the left
02:59 - Because if this is I is 45 and this I is 46 and we take 45 minus
03:07 - 46 we are going to have what?
03:10 - Negative 1
03:10 - So if we get negative 1 that means we have a neighbor to the right so let's let's sort of what I'm tripping over lights
03:17 - And things let's start looking at that in our code
03:20 - So what I'm going to do now is I'm going to write a new let's look in [the] program
03:23 - Where are we we're right here in the algorithm right? This is this is a
03:28 - Step 1 and
03:31 - This is Step 4
03:33 - According to that Wikipedia page right step 1 is market is visited and step 4 is set it to be the next one
03:39 - Actually step [1] is really here pick a random neighbor
03:44 - [pick] a random neighbor market is visited and in step 4 is current equals the next one so what I need to do is implement
03:50 - Step 2 which if you recall is
03:54 - Not step two step three
03:56 - which is remove the wall between the current cell and the chosen cell so I want to do is fe and you know what I'm
04:01 - Going to make that in a separate function. I'm gonna. It's already knows what I'm going to type doesn't that insane?
04:07 - remove Walls and
04:09 - Between what current and next right we need to figure out current and next I want to remove the wall in between them
04:17 - So now I just sort of thought of a function. That's good
04:20 - I could say a current dot remove walls next but I'm just going to put it in a function and a passed them two cells
04:25 - Figure out how they are in relation to each other and remove their walls so I can just go all the way to the bottom
04:30 - Of my code now and work on this somewhere else
04:33 - So I'm going to say function remove walls a b. So I just have to whoops come on
04:43 - Let's save it wants to get rid of all [my] white space on the bottom, but I want white space on the bottom white space
04:50 - Because I want to type it in here, okay?
04:52 - [so] [I] want a [generic] function that takes two cells and removes the wall between them sell a and sell B
04:59 - So what do I need to do the first thing?
05:01 - [I] need to do I'm going to call x be a dot I minus b
05:05 - I so this is exactly what I'm doing [the] value x is the difference between
05:10 - This cell and that cell so let's think about this scenario
05:14 - Where this is cell 46 and this is cell Column 45
05:19 - This is a index i [b] index I a index. I minus b index I is [1] so
05:29 - if
05:30 - x is Greater Equal 1
05:34 - that means a
05:36 - Dot walls what okay? Okay? Come back over here?
05:41 - [I] want the left wall to be removed
05:47 - Top right bottom left 0 1 2 3
05:54 - so I want a
05:56 - Wall Index 3 to be False and now B
05:59 - should have its right wall moved removed top right bottom left 0 1 a
06:06 - B dot Walls
06:08 - Index 1 equals False
06:12 - else if x equals negative 1
06:17 - then I want to say
06:20 - then there the inverse of that right if it's negative 1 then I want the
06:25 - Right of a and the left of B to be removed that's pretty good right [this] makes sense
06:31 - And I'm going to use triple equals to be kind of more serious about I'm very serious about my equals
06:37 - Ir believe and as many equal signs as possible to be sure we know what's going on
06:42 - So that's your work now. I need to do the same thing with y
06:47 - And so y is what?
06:51 - Aj - BJ, and I'm going to do exactly the same thing and
06:57 - Say now if y is 1 or y is negative 1 [and] now okay, so let's think about this
07:04 - Let's say I think we can figure this out without a diagram, but I'm going to do it anyway, so let's say
07:10 - This is y and it is [row] 30 and this is a and this is B. And it is Row 29
07:19 - so a
07:21 - Dot J. Minus B
07:23 - Dot j. Is 1 so if that's the case if a dot [jayma] then a needs it top removed and B
07:30 - Needs its bottom removed ok coming back over here. [I]
07:35 - [need] its top B. Needs its bottom 0 1 2 so [a] needs its top B. Needs its bottom here a
07:43 - Needs its bottom and B. Needs its top removed. I think we've got this right
07:49 - There's only one way to find out and we are going to now call. Did I already call remove walls in the right spot, right?
07:57 - [here] yeah, so [here]. We go. Let's just try it. It should when those go false. We shouldn't see the lines anymore
08:04 - Let's just see how it goes, ooh
08:08 - Huh, so I don't seem to be seeing anything happening here. So what's going on?
08:14 - What did I miss still kind of marching along?
08:16 - but I'm still seeing the walls being drawn so
08:19 - What did I what did I miss here, so first of all let's just make sure this is happening
08:26 - and
08:28 - So [ok] so that function is being called all right? So what am [I] missing in that function?
08:35 - Let's look at what x is
08:41 - whoops
08:43 - Console.log let's look at what this value of x is
08:48 - Negative 1 0 1 negative 1 0 1 so that should be it seems to be giving me numbers that are the right idea
08:56 - so let's just see
09:01 - let's just log the object here ah
09:07 - okay, yep, yep, yep, so
09:10 - now I'm going to look at one of these and
09:13 - Look at the Walls array ah so zero and three got turned to false, so this is working like stuff is happening here
09:19 - [right] you can see by the way. This is like a nice way [of] debugging I can look at each object
09:23 - I can see its walls array. So what did I miss?
09:27 - Probably maybe something in the actual cell object. Oh, you know what I bet you is happening. Oh
09:32 - I bet you what a silly little problem
09:36 - That I forgot to say no stroke here
09:39 - So the rectangle that I'm drawing to highlight the ones that have been visited always has its stroke
09:45 - So it makes it draws the full rectangle. No matter what so I think that should be there
09:49 - We go so we can see now as it's moving the walls are being removed. Oh, beautiful. [oh] come on
09:55 - Give me a longer. Give me a longer sequence here now one thing. I would like to do also
09:59 - Just like keep the highlighting stuff going is let's just go back to
10:05 - [-] to the main program [and] I'm going to call at the end here a
10:10 - Current highlight, so I also want to be able to step see which one is current
10:15 - This is just a little I'm really done with this part
10:17 - But I just want to visually add something that I think will help us so in the object
10:21 - I'm going to add a function called this
10:25 - highlight and
10:29 - What do I want [to] do? I want to draw a yet another?
10:32 - Rectangle no stroke, and I will color it a some green color with some alpha
10:38 - and draw a rectangle xy
10:41 - with the same size
10:42 - I just wanted to add that really quickly and refresh this now so now we can see also which [one's] the current cell
10:48 - Okay, great. So here's the thing. This is actually working out, and it's making our maze. Well. [I] [just] love it
10:54 - Look we can see our maze the problem is it gets to a certain part?
10:57 - It's like trying to figure out this maze, and it's done
10:59 - It needs to go all the way back and break out somewhere else like it needs to go back track now
11:05 - Maybe once it gets to here
11:07 - Actually, all you [need] to do is go here and then start going this way because that turned out to be a dead [end]
11:11 - So it can start going this way, so this is where the backtracking comes in right? This is where in the
11:17 - Algorithm part two comes in push the cell to the current stack and then if the stack is [not] empty pop a cell make it
11:24 - the current cell so I need to discuss that need to unpack that figure out that's a confusing piece this will involve a lot [of]
11:29 - additional concepts
11:30 - I'm going to do that in the next video
11:32 - So right now if you're following along and building this you should at least though have this much done and just for fun
11:38 - Before [I] end this video. Let's make this like 10, and let's like make it go fast now and hit
11:45 - Refresh and just so we can see like we can see this is really
11:49 - Doing something now [like] it's actually like just carving out this maze and in with a finer degree of detail
11:54 - It's going to be a while longer before it
11:56 - Finally gets stuck but [okay], so you see that we're almost there and we're going to go to the backtracking in the next video
12:02 - Okay, see you there