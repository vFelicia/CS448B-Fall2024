00:00 - Hello in this video I'm going to talk 
about something called, how to clean
00:04 - your glasses. Theres a horrible smudge on
my glasses, this is what I look like
00:09 - without glasses by the way. I'm going to 
talk about something called an associative
00:13 - array. Forevermore associative arrays will
be associated with me cleaning my glasses
00:18 - what are you gonna do? What is an 
associative array. Ok lets talk about
00:23 - first, and why do we need one? First 
of all, the context here is I want to do
00:26 - a word counting application. Meaning,
I want to have a list of every word thats
00:32 - in a document and a number associated 
with that word, a list of pairs of things.
00:37 - Word, number, word, number, key, value
key, value.This is sort of where I'm going
00:42 - But first before I even get there, lets 
talk about what is an array. Which if
00:49 - you're watching this video hopefully 
you're familiar with, if not don't worry
00:54 - life will be ok. I might refer you to one 
of my videos about arrays. But an array is
00:59 - ultimately just a list of things, ordered
list of stuff. Look at this marker its
01:04 - excellent! So maybe I might have some
numbers like 3, 4, 19, -7, 29. Now this
01:12 - is an ordered list, meaning every single
number has an index. And when you count
01:16 - with arrays in programming, generally 
speaking you start counting with 0.
01:20 - 0,1,2,3,4. So here is my array, 3,4,19,-7
29, ordered in order 0,1,2,3,4.
01:33 - So this is a regular array, a list
ordered list. An Associate array also
01:37 - by the way if you're hearing a strange 
buzzing in your ear its not just you its
01:41 - construction thats happening right outside
the window over there while I'm recording
01:45 - this video. But this is life in new york 
city, people like to complain about
01:48 - construction happening in their backyard 
but if you live here, you signed up for it.
01:52 - Associate Array! Lets say I have these
same numbers, I'm gonna draw them like
02:06 - this because even though I'm kinda giving 
them spatial orientation it appears they
02:11 - may have some sort of order, this new 
thing I'm going to talk about, Associate
02:15 - array is not really ordered. So the way 
that i access, if this is called Array.
02:21 - If this is a variable storing that, the
way that I would access the number 19.
02:26 - Would be array index 2. With an 
associative array, this is an associative
02:33 - array, I'm associating numbers with
numbers, but really what I'm talking
02:36 - about with an Associative array is being 
able to associate a key that is not just
02:41 - an index with a particular number. That 
key in many cases is a string. And all
02:46 - the examples I'm going to show you use a 
string. Of course the key can be something
02:49 - other than a string, a string of text. So
the idea is here what if instead of
02:53 - referring to each of these by their index
I could name them. So this one is rainbow
02:59 - And this one is unicorn. This one is 
purple, this one is heart, Oh I ran out
03:11 - of my happy words. This one is happy. 
Happy little associative array. For all
03:19 - you wanting me to make Bob Ross references
So this is the idea, what if I could
03:23 - instead of having an ordered list with 
indexes, what if I could name all these
03:27 - elements. If this is my associative array,
assoc, my associative array, I would say
03:37 - Associative index unicorn. I could put
the name in the square brackets to
03:50 - indicate thats how I want to look up 
this particular value. So why is this
03:55 - useful? I think I need to make a separate
side video related to this one I'm doing
04:01 - right now, to discuss when would you use 
and ordered list, and when would you use
04:05 - an associative array. In this case, of
word counting you can clearly see why
04:11 - I might want to use an associative array.
because i want to keep track of words
04:15 - and the number of times they appear
in a given document. That noise is really
04:19 - driving me crazy. I have to zen out for a
second. Lets just say what I wanted to do
04:28 - was pair words with numbers. I could 
say something like unicorn colon 16 comma
04:36 - rainbow colon 2 comma heart colon 10. 
You could see how this like a nice list
04:48 - of key value pairs, this being the key to 
look up a particular value, 16.
04:56 - Lets put some more syntax on this, Oh
I'll just put a curly bracket here, and
05:01 - I'll put a curly bracket here and I'll say
var dictionary equals this. If you're
05:08 - looking at this what you'll notice is 
thats the syntax of a Javascript object!
05:15 - So a javascript object is exactly this. 
I think i have a video that talks about
05:20 - what is a javascript literal object. 
I think what i say is its a collection of
05:24 - name value pairs. So in fact we can simply
use the fact that a javascript object
05:29 - natively is a collection of name value 
pairs to act as a dictionary. Now there
05:34 - are some tricks I'm going to employ to 
make it usable. How do i sort its order,
05:39 - javascript objects don't actually have an 
order to them. How do i iterate over all
05:43 - the possibilities? We're going to see that
as I build out the coding challenge, doing
05:48 - a word counting application. But lets just
examine, theres one piece of this which
05:52 - is kind of crucial that I want to examine.
Let me go back over to the code for a
05:56 - second. I'm going to go over to a browser
instance, because I'm going to work just
06:04 - in the developer console to show you 
what i mean. Lets say I want to create
06:08 - this object called dictionary. The first
thing I can do if I want to create an
06:16 - empty object is I can say open curly 
bracket closed curly bracket. Let me
06:21 - make that a little bit bigger for you,
open curly bracket, closed curly bracket.
06:25 - Now i have an object which is empty. What
if i want to say the number of times
06:32 - rainbow appeared in that dictionary is 12.
Well you know I can say dictionary dot
06:37 - rainbow equals 12. Now if i look at the 
dictionary you can see, let me just do
06:43 - this again, you can see look, the object
now has the word rainbow associated with
06:48 - the number 12. Lets say Im trying to 
track, what i actually want to look for
06:54 - is the number of times a writer uses a 
contraction, like can't or don't versus
07:01 - the longer way of writing that out. Can
not or do not. Dictionary dot can't equals
07:09 - 15 because the Author that I'm analyzing
used the word can't 15 times.
07:16 - Uncaught syntax error, invalid or
unexpected token, so this seems to
07:21 - have broken my idea. Because thats
an invalid variable name. But I have
07:26 - something that might want to keep
track of its count. Right? I want to know
07:30 - I also might want to know how many times
did the area code 917 appear in a text
07:36 - Thats not a valid variable name either
I don't think,Right? So if I come back
07:40 - over here and say dictionary dot 917
equals it appears 25 times. Thats also
07:46 - invalid. One of the things thats really 
important here in how things work in
07:51 - Javascript, is that you can access
the properties of an object in two ways.
08:06 - I can say dictionary dot heart equals 15
or I can say dictionary string heart
08:21 - equals 15. These are equivalent. The 
heart property of dictionary has the value
08:27 - 15, or the hart property in quotes in 
square brackets of dictionary has the
08:33 - value 15. the question becomes well
this maybe looks more syntactically
08:40 - concise, and it might be what you're 
familiar with. I make a particle system
08:43 - particle dot x its 20, particle dot y, 
particle dot speed. But this is actually
08:47 - something, this is the syntax we'll 
want to use for word counting applications
08:51 - Why? because this will work with something
like can't or 917. We can make any string
09:00 - inside here and set it as a valid value 
of the dictionary. And in fact even more
09:04 - important what you're going to see that I 
need to do in the word counting coding
09:08 - challenge, is I'm gonna need to have a 
variable. I'm reading a text in, so I
09:13 - don't actually have that string in my code
its in a variable. So if I have a variable
09:18 - name I can't say dictionary dot variable
name I have to say dictionary bracket
09:25 - the variable name if its a string in that 
variable. Let me make that more clear by
09:29 - showing you this couple steps through
again here in the console. So first, lets
09:34 - confirm that it works, if I say dictionary
917, equals 15 that works, and I say
09:44 - dictionary can't, now notice I switched to
using double quotes, because theres a
09:51 - single quote in can't and so it'll get 
confused it I use single quotes and a
09:55 - single quote, but I can just use double 
quotes and it'll fix that problem.
09:57 - I could do this, and now lets look at the 
dictionary and you can see, look what
10:04 - its got, its got 917 and its got can't
in it. So you can see here that its
10:09 - able to keep those as names of the 
properties if I pass them in on a
10:14 - string. Now let me talk about what I mean
by a variable. Lets say var word equals,
10:19 - did i do unicorn yet, I don't think so. 
Var word equals unicorn, well what
10:24 - happens if I say dictionary dot word 
equals 99. Whats gonna be in there?
10:31 - Is it gonna be 99 associated with the 
string unicorn or is it gonna be 99
10:35 - associated with something called word.
Lets see what happens, ok now if I look
10:40 - at dictionary, unicorns not in there, it 
thinks word is the string. It doesn't know
10:46 - that word is that variable, its like I 
can't even explain it because it doesn't
10:51 - make sense in my head even though 
it seems like maybe that would work.
10:55 - I have to use that other syntax, because
what I want to do is say var word equals
11:01 - heart then I can say dictionary bracket 
word, now its gonna evaluate the property
11:06 - of that variable as heart and be able to
set that number. I could say 100 and I
11:12 - could look at my dictionary again and we 
could see there are all the words and
11:17 - their associated counts. Heart is in there
at 100, thats the thing I'm gonna need
11:21 - to do because I'm reading in a text 
and pairing the values with it.
11:25 - Ok so i think this defines basically the 
idea of what an associative array is,
11:31 - and how you can use one in javascript. 
Now how you iterate over it, how you
11:35 - might sort it, how you kind of mess with
it, these are things that I will show you
11:40 - in the next video which is gonna be a 
coding challenge of doing a word
11:43 - concordance. Thanks for watching and 
see you soon.
11:54 - Subtitles by the Amara.org community