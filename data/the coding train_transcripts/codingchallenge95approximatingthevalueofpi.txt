00:00 - [TRAIN WHISTLE]
00:01 - [BELL RINGS]
00:02 - Hello.
00:03 - Happy Pi Day.
00:05 - I admit this is take number two.
00:06 - I messed up the first time.
00:07 - I'm going to do a coding
challenge, where I am going
00:12 - to approximate the value of pi.
00:14 - Now what's running here right
now is the actual number pi.
00:20 - I mean someone should fact
check that this is correct.
00:22 - You can go compare it
to PiDay.org/million,
00:25 - which I think has the
first million digits of pi.
00:27 - But this is a processing sketch
using a particular algorithm
00:30 - to calculate all the
digits of pi one at a time.
00:33 - It will go on forever.
00:34 - It will get very, very,
very slow pretty quickly.
00:37 - I will come back to
this in a future video.
00:39 - But what I'm going
to do in this video
00:42 - is look at a way to
approximate the value of pi.
00:44 - Now this came in as a suggestion
originally from across akraus53
00:50 - on GitHub, for how to look
at random particles that
00:53 - end up in a circle or outside
of a circle, interesting.
00:57 - It has something to do with
the area of the circle.
01:00 - So I'm going to
diagram this out.
01:01 - I should also mention thank
you to the STEMcoding YouTube
01:05 - channel, and STEMcoding
Project which
01:08 - has a ton of videos in
various topics using
01:12 - programming and coding to
teach different types of STEM
01:15 - related topics.
01:16 - It's wonderful.
01:17 - They have a video.
01:17 - You can find a link to it
in this video subscription,
01:20 - basically, doing
exactly the same thing
01:21 - that I'm about to try
to do, probably better.
01:25 - But I'm going to do my best.
01:27 - I'm going to give it my all.
01:28 - And I'm going to do this in
Processing, which is a Java
01:31 - based programming environment.
01:32 - If you're not
familiar with it, I'm
01:34 - sure I'll link to
some video where I
01:35 - talk about what processing is.
01:36 - OK.
01:36 - I'm going to let this run.
01:37 - And I'm going to come over
here to talk about a method
01:40 - that I'm going to use to
approximate the digits of pi.
01:45 - Now, there is something in
our world known as a circle.
01:51 - It is a beautiful, round shape.
01:54 - It is a shape that I'm not
going to be able to draw,
01:56 - but I'm going to attempt to.
01:58 - I'm going to move over here,
just to give myself more room.
02:01 - Here is a circle.
02:02 - Now, if you were to look up
a formula for circumference
02:08 - of a circle, you
would find that it's
02:11 - equal to something called 2pir.
02:15 - This is the formula for the
circumference of a circle.
02:17 - Now what are these things?
02:19 - Well 2 is the number 2. r
refers to the radius center
02:25 - to the edge, r.
02:26 - This is the same length anywhere
from the center of circle
02:29 - to any edge point.
02:30 - And pi, well this magic
number 3.1415926--
02:39 - that's all that's
all I can remember.
02:41 - I might not have even
gotten the 2 in the 6 right.
02:43 - Good.
02:43 - We're going to approximate it.
02:45 - We're going to see if we can get
better than my memory tells me.
02:48 - So how can I use this fact
to calculate the number pi?
02:52 - Well, one thing I could do is
I could get a piece of string
02:55 - and I could wrap it around
here in my perfect circle.
02:57 - Then I could undo the string,
I could get a tape measure.
03:00 - And I could measure it.
03:01 - And then whatever that is,
if I knew the value of r,
03:04 - I could solve for
the value of pi.
03:06 - That would work.
03:07 - I should mention, by
the way, just because I
03:09 - know someone's going to say
something in the comments,
03:11 - and it's not tau day.
03:13 - Today is not tau day.
03:13 - I'll come back and
do this with tau.
03:15 - But tau, is a number
the Greek letter tau,
03:18 - or T-A-U. Pi being spelled
with English letters or Roman
03:24 - letters P-I. Is essentially,
well pi is half tau,
03:31 - or tau is 2 pi.
03:32 - I don't want to get
into which one is which.
03:34 - But this is often
used, because then we
03:36 - could say the circumference
is just tau r.
03:40 - But anyway, this
opens up a big can
03:42 - of worms that I don't
want to go down.
03:43 - So I'm not going to
do the string method.
03:46 - Let's look at another two
formulas from geometry.
03:49 - So one thing is
what's the formula
03:51 - for the area of this circle?
03:53 - It looks quite similar, and
there's a special relationship
03:55 - there.
03:56 - That's a topic for another time.
03:58 - But pi r squared.
03:59 - So pi r squared is the
area of the circle.
04:04 - Now let's think something.
04:05 - What if I put a square
as a bounding box
04:10 - to that circle,
a perfect square?
04:11 - And I can draw that over here
with this idea of r being here.
04:15 - So the sides of this square
are twice the length of r.
04:19 - Area of a rectangle is the
width times the height,
04:23 - a square just being
the side squared.
04:26 - So the area, so this is
the area of the circle.
04:29 - The area of the square is for 4.
04:34 - 2 times 2 is 4--
04:35 - r squared.
04:37 - So look at that 4r
squared, pi r squared.
04:41 - Now imagine something.
04:43 - There's a relationship
here, right?
04:45 - There's a relationship
between let's
04:49 - say the area of the circle
to the area of the square.
04:52 - That relationship can
be expressed as a ratio.
04:55 - I could say the area
of the circle pi
04:57 - r squared to the area of
the square, 4 r squared.
05:02 - The r's cancel out the ratio.
05:04 - Is pi divided by 4.
05:07 - Or I could say that pi equals
4 times that ratio in a way.
05:16 - But what do I mean
by this exactly?
05:20 - Well, why am I here?
05:21 - Why are we even here?
05:22 - How am I going to use
this to approximate?
05:24 - So in the original
GitHub post it said,
05:26 - well, simulate it with physics.
05:27 - So we could imagine one physics
scenario is throwing darts.
05:31 - What if I were to just throw
random darts at the wall.
05:35 - Well, they would go
all over the place.
05:38 - Some darts would land within the
square but not in the circle.
05:43 - And some darts would
land within the circle
05:46 - but not within the square.
05:49 - So in a way, I can imagine the
ratio of the area of the circle
05:56 - to the area of the square
as the number of darts
06:00 - that land within the circle
divided by the number of darts
06:03 - that have landed in the square.
06:04 - Now 4 have landed
in the circle and 4
06:07 - have landed in the square.
06:08 - So I could say pi, in this
case pi is approximately 4
06:14 - times the circle count divided
by the square count, which
06:22 - is equal to 3 divided by 4.
06:26 - 4 times 3 divided by 4 is what?
06:29 - 3.
06:30 - So there is my
approximation of pi 3.0.
06:33 - Da da-da da-da!
06:36 - [BELL RINGS]
06:36 - So that's right.
06:37 - I mean it's not very good,
but I only through four darts.
06:40 - The more darts that I throw,
if I did this infinitely
06:43 - and filled the
entire space I would
06:45 - get closer and closer and
closer to a better approximation
06:49 - of the number pi.
06:50 - So this is what I'm going
to implement in code.
06:52 - Now I really, really
want to just use
06:55 - for my dart throwing the numbers
from this million random digits
06:58 - book.
06:59 - I'm tempted to use
the random.org API.
07:02 - But I think I'll
probably just use
07:04 - the processing random function
which is a pseudo random number
07:06 - generator.
07:06 - That's another topic
that I will come back to.
07:10 - OK, so let's go
over to the code.
07:11 - Actually, before
I go to the code,
07:13 - I wrote this in
such a weird way.
07:15 - What I mean is 4
times the circle count
07:18 - over the square count.
07:19 - This equal sign was
sort of a problem there.
07:21 - I'm replacing the
circle count with 3,
07:23 - the square count with 4,
so it's 4 times 3 over 4.
07:26 - And that's how I get 3.
07:27 - Apologies for that.
07:28 - All right, so I'm
back in the code.
07:30 - Look at this.
07:30 - We're still getting digits
of pi here slowly over time.
07:33 - Unfortunately, I'm going
to stop this program.
07:35 - And I'll be running
again later, and I'm
07:36 - going to go to a blank sketch.
07:39 - Whoops.
07:40 - I'm actually just
going to close this.
07:42 - And I'm going to go
to a blank sketch.
07:44 - OK, so what are the first
things that I need to do?
07:46 - Let's create a window
that's 400 by 400.
07:50 - Let's give it a background of 0.
07:52 - 0, that's fine.
07:54 - Stroke 255, then let's
call the ellipse function,
07:59 - and I think our life
might be easier if I just
08:02 - do translate to the center to
put the 0, 0 at the center.
08:13 - Yeah, why not?
08:16 - And so the ellipse is
going to be at 0, 0,
08:19 - with a radius of 200.
08:22 - The ellipse function
expects a diameter.
08:25 - So the radius is 200.
08:26 - The diameter is 400.
08:28 - And then I'm going
to say no fill.
08:33 - And I'm going to say
rectangle, also 0, 0, 400, 400.
08:38 - And let's say stroke weight 4.
08:44 - Whoa.
08:46 - Oh rect mode, and I want
to say rect mode center.
08:52 - OK.
08:52 - And let's make the size
actually a little bit bigger,
08:57 - so I can sort of
see the outline.
08:59 - What I want to do now is I want
to start throwing the darts.
09:02 - So I'm going to use the
Processing's random number
09:05 - function which is random.
09:07 - And I'm going to
do this at the end.
09:10 - Let's do this at
the end of draw.
09:12 - Draw is a loop that happens
over and over again,
09:14 - if you haven't used
Processing before.
09:16 - And this is a Java
programming language,
09:19 - with an extra set of
functionality for drawing.
09:21 - x equals random.
09:23 - And let's make a variable,
a global variable
09:28 - called r, which is equal to 200.
09:30 - So I'm going to say r times 2,
r times 2, r times 2, r times 2.
09:37 - I'm going to make
a random number
09:40 - between negative r
and r, and a y which
09:45 - is a random number
between negative r and r.
09:50 - Then I'm going to draw
a point at that x, y.
09:54 - So let's do our dart throwing.
09:55 - OK, look at that.
09:56 - So one thing is I'm getting
some starry flickering thing.
10:00 - So I really want to
just draw this in setup
10:04 - as kind of the
initial background.
10:06 - And then I don't want to
redraw the background again.
10:09 - But I think I probably will need
the translate in both places.
10:17 - There we go.
10:18 - So now you can see I am
filling the space with dots.
10:24 - So now, what I
need to figure out
10:25 - is I need to count the dots.
10:28 - Well, I know the total dots.
10:30 - And actually, all
of the dots, I don't
10:33 - have to test if dots
are within the square,
10:35 - because I've set
this up in such a way
10:37 - that it basically
can only create dots
10:40 - that are within the square.
10:41 - So what I need to do is
determine how many dots
10:43 - are within the circle.
10:45 - So let me do this.
10:48 - So first, I need to
get the distance.
10:50 - What is the distance
between 0, 0, and x, y?
10:53 - So this is how far from
the center is that point.
10:58 - To be honest I weirdly,
in every case of life,
11:04 - I would use the
distance function.
11:05 - But for some reason,
right now I feel
11:08 - like it's worth noting that
pi is not being used here,
11:12 - that the distance
function is actually
11:14 - using the Pythagorean theorem.
11:18 - Because if I know the x
offset from the center
11:22 - and the y offset
from the center, then
11:24 - this hypotenuse of
this right triangle,
11:28 - x squared plus y squared
equals h squared.
11:30 - That's the
Pythagorean theorem. h
11:32 - is the square root of x
squared plus y squared.
11:34 - So I want just for some weird
arbitrary sense of purity,
11:39 - to say a square root of
x times x plus y times y.
11:45 - And if that distance
is less than
11:49 - or equals or just less than?
11:51 - Let's say less then.
11:53 - This is just an approximation.
11:54 - Anyway less than r, I'm
going to say stroke,
12:01 - let's make it a greenish color.
12:04 - Here we go.
12:06 - Otherwise stroke 255.
12:09 - Here we go.
12:10 - Whoops, and I need
another curly bracket.
12:12 - Here we go.
12:14 - So we can see now.
12:15 - And let's make it I don't know.
12:20 - I'm going to pick some
arbitrary colors that are
12:22 - going to not look very nice.
12:23 - But I'm going to do my best.
12:27 - And here we go.
12:28 - So we have two different colors.
12:29 - We have this green, I picked
colors that are quite similar.
12:36 - By the way, I could do
this without randomness.
12:38 - I could just check
all of the pixels.
12:40 - But I like the random method.
12:43 - And let me make these colors
quite a bit more different.
12:48 - There we go.
12:48 - So we can see I've
got some blue ones.
12:50 - And you can see if
they're on the line,
12:52 - depending on where
they are, because I
12:54 - have a stroke with a 2,
they're either blue or green.
12:56 - So that could use some finesse.
12:57 - In the chat, the live
chat that's going on,
12:59 - I see someone's
asking what is float.
13:01 - Float is the data type.
13:03 - So unlike in JavaScript which
a lot of my other tutorials
13:05 - are in, I would just say
let x or VAR x or context,
13:09 - depending on how I
feel on any given day,
13:11 - float is a floating
point decimal number.
13:14 - OK.
13:16 - So now what we need to
do, is we need to count.
13:19 - So what I'm going to do
is I'm going to say int.
13:23 - I'm going to use an integer.
13:25 - Total equals 0 and
int circle equals 0.
13:29 - So this is going to
be total is going
13:31 - to mean the total
number of dots,
13:33 - circle is going to be the number
of dots that are in the circle.
13:38 - And what I'm going to do
is I am going to say now,
13:43 - I'm going to look
back at my formula,
13:46 - pi equals 4 times
the total number
13:49 - of circles divided by the
total number of total.
13:54 - So pie, and I'm
going to say P-I-E,
13:58 - just not to be confused
with the actual.
14:01 - There is a constant called pie
that's available in processing.
14:04 - I guess I could do
lowercase pie in processing.
14:06 - But I'll just say pie,
because pie is delicious.
14:10 - And maybe that's really
going to upset people.
14:13 - float pi equals 4 times
circle divided by total
14:19 - and let's put those in
parentheses just for fun.
14:22 - Now here's the thing.
14:23 - There's a couple of
problems with this.
14:24 - Number one, total, I
don't want total to be 0.
14:30 - It will never be 0,
because I'm going
14:31 - to immediately say
total plus plus, as
14:35 - soon as I pick a point.
14:36 - I'm increasing, so at
least the first time
14:38 - it runs through this
total will be 1.
14:40 - And then of course, if
it's within the radius,
14:43 - circle is plus plus.
14:44 - And so let me say print line pi.
14:49 - So let's just look, and let's
run this and see what we get.
14:52 - I keep getting zero 0.
14:54 - Why do I get 0?
14:55 - I don't get anything.
14:56 - So this has to do with
integer arithmetic.
14:59 - So integer math, these are both
integers, circle and total.
15:03 - So even if I say
10 divided by 20
15:06 - that's 0 remainder 10,
or 19 divided by 20
15:14 - is 0 remainder 19.
15:16 - So it's always going
to give me the 0.
15:18 - So I need to explicitly convert
one of these to a float.
15:21 - And I think I might change this
to double, for more precision.
15:24 - But this should now
give me, you can
15:27 - see here I am slowly and slowly
getting closer and closer,
15:32 - perhaps to the value of pi.
15:35 - Let's let this run
for a little bit.
15:39 - OK.
15:39 - I'm back.
15:40 - I've let this run for
just a couple of minutes.
15:42 - You can see that
I'm not really--
15:44 - I'm kind of getting
something that
15:45 - looks like pi, and a
little bit higher than pi.
15:49 - So I have to ask
myself the question.
15:51 - What's going wrong here?
15:52 - Well, one guess that
I have is that I
15:54 - haven't been so exactly
thoughtful about my distance
15:57 - check.
15:59 - Maybe that sort of border
of what's on the line
16:01 - versus not on the
line is something
16:03 - that I need to think
about more deeply.
16:07 - The resolution is
an issue there.
16:11 - But the other issue
might be just the way
16:14 - that floating point math
works in the Java programming
16:17 - language.
16:17 - And I might need a
different data type that
16:21 - allows me for more precision.
16:23 - So hold on.
16:24 - I'll be right back.
16:25 - I'm going to make some
adjustments in the code.
16:29 - Look at this nice
drawing, first of all.
16:30 - One issue is certainly that I'm
spending all this time drawing,
16:34 - just to get like one
point at a time 30 frames
16:37 - or 60 frames per second.
16:38 - So one thing I can
absolutely do is
16:40 - there's no reason
why I couldn't just
16:42 - put a little for loop
in here, and say, hey,
16:44 - let's do 100 points per frame.
16:50 - And want what I'm
going to do is I'm
16:55 - going to say a let's make pi a
variable outside of that loop,
17:02 - just so when the loop finishes,
I can take a look at what
17:05 - the value of pi is.
17:05 - So now I can do 100
points at a time.
17:07 - And you can see how
much faster this is
17:11 - sort of filling up the drawing.
17:13 - And we can now go look, and
see what have I got here.
17:16 - Yeah.
17:16 - So I think we just have
a lot of randomness here.
17:20 - And now I'm getting 3.14--
17:24 - we're converging as best we can.
17:26 - So I think we've done a pretty
good job at approximating pi.
17:29 - I think maybe I could
actually be done.
17:32 - A couple of things
that people noted.
17:34 - One is I could actually
get rid of the square root
17:37 - from this program, and
just look at r squared.
17:42 - That could be my comparison.
17:43 - Square root is a very slow,
expensive calculation.
17:47 - I could fix some
whitespace here.
17:50 - Another thing that
I could do is let's
17:52 - just try this with like
10,000, and see what we get.
18:00 - Pretty good, pretty,
pretty, pretty, pi.
18:05 - All right.
18:06 - Thank you, everybody.
18:07 - This is me.
18:09 - Oh!
18:09 - Whoa, whoa, whoa.
18:12 - No, no, no, no, no.
18:13 - Let's go a little step further.
18:15 - Let's use doubles.
18:17 - Let's see if using double
actually does anything.
18:20 - So what is a double?
18:21 - So Processing natively
actually doesn't really
18:25 - support the double data type.
18:27 - Any number that you have in a
variable is stored in memory.
18:32 - And so floating point
numbers, there's
18:34 - an infinite amount of decimal
numbers between any two
18:37 - integers.
18:38 - But we don't have an
infinite amount of memory
18:40 - on our computer.
18:41 - So we allocate certain
number of bits.
18:43 - So floating points allocate
a certain number of bits.
18:46 - Doubles allocate more.
18:47 - So if we really need to do
precise mathematics, and then
18:51 - there's other Java classes
and implementations
18:53 - for really big numbers.
18:54 - But let's at least
change this to double.
18:58 - Let's change this to double.
19:02 - And I'm going to have to use
casting because double is not--
19:07 - and I'm going to change this.
19:09 - I'm just going to change
this to double as well.
19:12 - I'm going to overdo it.
19:13 - I don't think I need
to change all of these.
19:18 - And by the way, I don't
need to calculate it.
19:21 - I don't know why I did that.
19:23 - I can just calculate
it once there.
19:25 - And I wrote float, and
let's make this double.
19:27 - So now let's take
a look at this.
19:29 - And one thing we
can see is already
19:31 - there are more digits appearing
in the print line statement.
19:35 - And maybe, maybe, I think
there's just so much randomness
19:39 - that's part of this,
that ultimately I'm
19:45 - not so sure that we're going to
get anything that's really that
19:50 - accurate out of this method.
19:51 - But it is nice to see we've
consistently got 1.41 now,
19:57 - which is right.
19:58 - If only we could get
a 5 here, 0.1415.
20:02 - Let's see we if we
can get a 5 here.
20:03 - Come on get a 5.
20:04 - Yeah, I saw a 5, A 5
consistently, so maybe
20:08 - over time as we do this
over and over again.
20:10 - Now one thing, could we make
this drawing any prettier?
20:13 - I mean one thing that
I might choose to do
20:15 - is make a stroke weight
that's more like 0.1,
20:23 - so a very light stroke.
20:26 - Maybe you can't see that at all.
20:27 - So it makes a
stroke weight of 1,
20:29 - but maybe give some alpha,
so some transparency.
20:36 - There we go.
20:36 - I don't know.
20:37 - It's kind of interesting.
20:38 - It looks like I'm looking
under a microscope.
20:40 - I'm going to let
this run for a while.
20:42 - And I'll just be back
in a couple of minutes
20:44 - to check where it got to.
20:47 - Actually, I'm back, because
I got a good comment
20:49 - from the chat, which is that
I could choose to try to make
20:52 - this test a bit more precise.
20:54 - So I can make this a double.
20:57 - I could cast the x as a double.
21:00 - And again, I'm going to just
overdo it and cast everything.
21:10 - So let's cast all those
as doubles, and let's
21:17 - run this one more time.
21:18 - We can see it filling up here.
21:21 - And it seems to be running at
a perfectly reasonable frame
21:24 - rate.
21:24 - So I'm actually going to try to
do this 10,000 times per frame.
21:29 - No.
21:30 - It's a little bit slow.
21:31 - So I want my
animation to be fast.
21:34 - Oh, that was 100,000.
21:38 - Let's just go with 10,000.
21:40 - So let's take a look.
21:41 - OK.
21:41 - I'll be back in a minute.
21:42 - Let's see how many
digits we can get,
21:44 - and see how close we're doing.
21:46 - Hey, I'm back again.
21:48 - So you could see this
kind of algorithm,
21:49 - it's not going to
converge very quickly.
21:51 - There's a lot of noise in
it from the randomness.
21:53 - But one thing I could do
to add to this program
21:56 - is try to keep track of
which one is the best.
22:00 - So there is in Java
natively, let me take out
22:05 - this print line for a second.
22:08 - And what I'm going to do,
so Processing natively
22:14 - has the constant
PI, but Java also
22:17 - has the constant PI that
is in the math package.
22:21 - So let me look at both of those.
22:23 - And you can see that
that one is a double.
22:25 - So this is actually
what's stored.
22:27 - It's not that many digits
in math.pi in Java.
22:32 - So what I'm going to do
is I am going to create.
22:38 - I'm going to create a
variable called record_PI.
22:42 - And I am going to set
record_PI equal to 0,
22:50 - just as its initial value.
22:51 - I don't need to
set it down there.
22:52 - So I can just set it up here.
22:54 - Then what I'm going
to do is I'm going
22:56 - to look at double the
difference between Math.PI
23:02 - minus record_PI, and let's take
the absolute value of that.
23:10 - And I also need to--
23:13 - oh, I guess I have
to do math.absolute,
23:16 - because I have doubles.
23:17 - So I'm going to take the
difference between Math.PI
23:20 - and the record_PI.
23:22 - So this is actually really
the record difference.
23:25 - Then I'm going to look at the
difference between the pi I
23:32 - just calculated.
23:34 - Math.PI minus the pi
I just calculated.
23:38 - So if the difference is less
than the record difference,
23:43 - if we've gotten
one that's closer,
23:47 - then the record difference
is now the difference,
23:54 - and the record PI, why
did I use an underscore?
24:01 - Did I use an underscore?
24:03 - That's sort of unnecessary
record_PI equals 0,
24:08 - and then record_PI
is that new PI.
24:14 - And what I could do is
whenever I have a new record,
24:17 - I could print out record_PI.
24:22 - So let's take a look and see
what I get in the console
24:25 - there.
24:25 - And in a way I kind
of want to do that
24:28 - every time because I feel like
I should give it a chance.
24:35 - This is not a big
calculation to do.
24:37 - I might as well do
this every single time,
24:39 - even though I'm only
drawing every so often.
24:41 - So let's put all this inside
of this loop, and let's run it.
24:46 - And we can see this is now
currently the record 1.415926.
24:55 - Hey, I don't know.
24:57 - How many digits have
I gotten correct?
25:00 - All right.
25:00 - So, let's go look at
the actual digits of pi.
25:03 - So I'm going to go to
PiDay.org/million and I
25:10 - don't need that many of them.
25:14 - This is going to be plenty
just the first line here.
25:17 - Let's open up Text Edit.
25:20 - Let's put this in here.
25:23 - And let's make this
a little bit bigger.
25:28 - Let's go back to the
processing sketch.
25:32 - Oops, let's bring
this down here.
25:35 - How many digits do I have?
25:39 - And let's take a
look and compare.
25:49 - So, so far, we have
gotten 1 is correct.
25:54 - 4 is correct.
25:55 - 1 is correct.
25:56 - 5 is correct.
25:56 - 9 is correct.
25:57 - 2 is correct.
25:58 - 6 is correct.
25:58 - 5 is correct.
26:00 - My font size is not the same.
26:06 - Have I gotten as
close as I can get?
26:10 - No.
26:11 - No.
26:11 - This is wrong.
26:12 - 6 is correct.
26:13 - 5 is correct.
26:14 - 3 is correct.
26:16 - So, I'm just going to give
myself a couple of minutes
26:19 - to take a short break.
26:20 - And I'll come back and see if
anything got a little closer.
26:26 - All right thanks for watching
this coding challenge.
26:28 - There are so many ways
this could be improved.
26:30 - You could sort of
plot the difference.
26:32 - You could visualize
these numbers
26:34 - and highlight which digits are
correct, which are incorrect.
26:38 - You could think about
how you're drawing this.
26:41 - You could make
the random numbers
26:43 - double that you're picking.
26:44 - I don't know if that
would really help.
26:46 - You could use my favorite
website, Random.org which
26:48 - has an API for random numbers.
26:50 - It's really not going to
make your program run faster.
26:52 - But there is so much
that you could try to do.
26:59 - So, if you make something
with this coding challenge,
27:02 - please share it with me
in the comments below.
27:05 - You can also go to
TheCodingTrain.com website.
27:07 - There's a place where you can
link to your shared version.
27:09 - I will also release a
JavaScript version of this
27:12 - that you can run in the
browser, and maybe actually that
27:15 - might be an easier way to
also display the results.
27:17 - So thanks for watching.
27:19 - I hope you enjoyed this
Pi Day coding challenge.
27:21 - [TRAIN WHISTLE]
27:22 - [MUSIC PLAYING]