00:00 - hello welcome I'm here in this video to
00:02 - talk some more about computer vision
00:04 - computer vision being this idea of the
00:06 - having a computer see have a computer
00:09 - find something if you notice there's
00:10 - this strange red cup this actually isn't
00:12 - part of my computer screen this is a red
00:15 - cup here taped to the wall behind me and
00:17 - in a second I might have a camera
00:18 - pointed at that and I want the computer
00:20 - to be able to find that red cup and this
00:23 - is going to open up a lot of questions
00:24 - around all sorts of different techniques
00:26 - and strategies of getting things that
00:28 - are faster and more accurate in that
00:29 - sort of thing so the first thing that I
00:30 - want to do though is reference for you a
00:32 - source of inspiration for me which is an
00:35 - article by Golan Levin called computer
00:38 - vision for artists and designers
00:39 - pedagogic tools and techniques for
00:41 - novice programmers so there's a link to
00:43 - this article in the description it gives
00:45 - you some historical context and it also
00:47 - walks you through some sort of key
00:49 - classic techniques like detecting motion
00:52 - detecting presence detection through
00:54 - brightness thresholding simple object
00:56 - tracking etc and I'm going to
00:57 - demonstrate a lot of the techniques
00:59 - which I've learned and taken inspiration
01:00 - from this particular essay online essay
01:04 - so ok so the other thing I'll mention
01:07 - briefly is what my my strategy here for
01:09 - this this set of tutorials is going to
01:11 - be a whole bunch of them by the time I'm
01:12 - done there could be up to 10 even is
01:14 - that I'm going to show you how to
01:15 - program some of these classic algorithms
01:17 - from scratch and then what from there
01:21 - I'm going to transition to showing you
01:22 - how to use different computer vision
01:24 - libraries that have these algorithms and
01:26 - more sophisticated versions of these
01:27 - algorithms baked into them so it's a
01:29 - question of you know in practice a lot
01:31 - of the time you probably want to just
01:33 - use a library like OpenCV is one of the
01:35 - ones I'm going to show you but there's
01:36 - some value in understanding the
01:38 - algorithm for when for when you go to
01:40 - use the library for knowing how it works
01:42 - plus you might invent some sort of wacky
01:43 - creative new ideas around computer
01:46 - vision and just sort of creative
01:47 - visualization by having by playing
01:49 - around with these by right of the
01:51 - algorithms yourself ok so a previous
01:54 - video I started with an example that
01:56 - does exactly this so and this is an
01:58 - example running and processing a Java
02:00 - based platform I will make p5.js
02:03 - JavaScript versions of these examples
02:04 - which you can find it hopefully linked
02:07 - in this video's description as well but
02:09 - here you have a cup a cup
02:12 - to a green wall behind me and what you
02:16 - can see here is that I'm drawing a
02:18 - circle at that cups location how did I
02:21 - do that
02:22 - the way that this particular algorithm
02:23 - works is it says look at every single
02:26 - pixel is that pixel rent is that pixel
02:30 - really rent is that pixel more red than
02:32 - the other one I found that was kind of
02:34 - red it's looking for the most red pixel
02:37 - for every pixel find its color distance
02:40 - it's difference from red and find the
02:42 - one that holds the record for being the
02:43 - most red and then draw a circle at that
02:46 - location but there's an issue while this
02:48 - is working somewhat accurately I could
02:49 - even take this off the wall you can see
02:54 - it's kind of following it around but it
02:56 - is sort of jiggling I could I could also
02:58 - demonstrate another problem by having
02:59 - two cups now and like now it's jumping
03:01 - back and forth between the two so
03:03 - there's a lot of things that I want to
03:05 - resolve here in these in the way that
03:07 - I'm going to improve these examples the
03:09 - first thing that I want to do is simply
03:11 - make it so that I can get a stable
03:14 - location hopefully in the center of this
03:17 - particular cup and so the first thing I
03:19 - can do at this particular example and
03:20 - also by the way notice now it's not
03:22 - finding it anymore
03:23 - this camera is doing some like auto
03:25 - white balancing brightness stuff which
03:27 - is really can be a problem and I think
03:28 - there's some ways of turning that off
03:29 - but in the sort of real world if you
03:31 - take this to an installation or a
03:33 - project you're making you're going to
03:34 - want to have a camera that you can turn
03:36 - off auto white balance auto all those
03:39 - sort of other automatic settings but I
03:41 - can in this example I can always click
03:42 - and kind of recalibrate the color that
03:45 - I'm tracking so the first thing I want
03:47 - to do is instead of looking for in this
03:49 - particular video instead of looking for
03:51 - the single-most pixel that is the most
03:54 - red I want to say is a pixel red enough
03:57 - find all of those pixels and give me the
04:00 - average location of all those pixels so
04:02 - let's dive into the code and make that
04:03 - change okay
04:06 - as you'll notice here every single
04:09 - whoops the core algorithm of essentially
04:12 - all computer vision I have let me look
04:16 - over here for a second the core
04:18 - algorithm of all of these computer
04:20 - vision examples is this this nested loop
04:22 - for every X pixel for every Y pixel
04:26 - and something is really bothering me
04:27 - here I know why these extra spaces are
04:28 - here and I want to sort of do Auto for I
04:31 - need to put some spaces here cuz I have
04:32 - a problem please don't be like me live
04:35 - your life with spaces in weird places
04:37 - okay
04:38 - but and you can see here what am i doing
04:41 - I am taking and let's just let's just
04:43 - review this for a second I have a new
04:45 - whiteboard marker that I've law there it
04:47 - is
04:48 - let's just review this idea really
04:50 - briefly in case you didn't watch the
04:52 - previous video this is a grid of pixels
04:58 - it has columns which I could number like
05:01 - this 0 1 2 3 4 it has rows which I could
05:05 - number like this and let's just make
05:07 - those different for the sake of argument
05:08 - then it has pixels the pixels are
05:11 - numbered like this 0 1 2 3 4 5 6 7 8 9
05:15 - 10 11
05:16 - et cetera every single computer vision
05:18 - algorithm that I demonstrate to you will
05:20 - start with for every X for every Y so
05:24 - it's looking at every X pixel and every
05:27 - Y pixel but then it needs to look up a
05:29 - given pixel here in the one dimensional
05:32 - array of all of the pixel colors and the
05:34 - formula for doing that is X plus y times
05:37 - width and you can see why that would
05:40 - work because here the width is 6 the
05:43 - first pixel in column 3 and X 3 is 3 the
05:47 - next one is 3 plus 6 which is 9 the next
05:50 - one is 9 plus 6 which is 15 is that
05:53 - right 11 12 13 14 15 so this formula is
05:56 - going to be kind of key so that's right
06:00 - here right for every X for every I find
06:03 - that pixel location and then it's look
06:06 - and then I need to separate out the red
06:09 - green and blue components of the color
06:10 - that's coming from the pixels of that
06:12 - video and then there's this other color
06:14 - called track color that's the color that
06:16 - I'm looking for the red is that here yes
06:20 - that's the red cup and then using the
06:25 - distance formula and to be honest I
06:27 - should really not use the distance
06:29 - formula because it has a square root I
06:30 - should use just distance squared because
06:32 - then I don't have to take the square
06:34 - root but I'm not going to worry about
06:34 - that optimization right now maybe I'll
06:36 - bring that in later I'm
06:38 - you see if it's the if it beats that
06:40 - sort of record it's the most read and
06:42 - have that XY spot so that's what this
06:44 - code is doing so now in the next version
06:48 - of this example instead of looking for
06:51 - instead of looking for the most read I
06:55 - want to look for anything that meet that
06:57 - that is like read enough so the first
07:00 - one thing we need is a threshold
07:01 - variable so I'm going to add to this
07:04 - program I'm going to add a variable
07:06 - called threshold and I'm going to try
07:09 - this just at like 25 I sort of made that
07:11 - up 25 I want any given pixel that is
07:16 - within that that that's difference is
07:20 - less than 25 from the color that I'm
07:23 - looking board for to be considered red
07:25 - so let's go down to the algorithm and I
07:29 - no longer looking for a record or a
07:33 - closest X or closest Y what I'm really
07:36 - looking for is like the average X and
07:37 - the average Y and I'm going to make
07:40 - those floats because yeah I think that's
07:42 - going to help out a little bit just in
07:44 - terms of doing the average stuff and
07:46 - then I also need to have a count how
07:52 - many pixels are red okay so I need to I
07:57 - need to ultimately what I want to do at
07:58 - the end is have calculated the average
08:00 - and then I also wanted to keep track of
08:03 - how many pixels because that's how I'm
08:04 - going to calculate the average by the
08:05 - way okay so now we're looking through we
08:07 - find the current color we know the track
08:09 - color we know that difference so I'm no
08:11 - longer checking and I'm going to save
08:12 - this by the way is computer vision - I'm
08:15 - no longer checking is that distance less
08:17 - than the record I just want to know is
08:19 - it less than that given threshold if
08:21 - it's if it is red somewhat red enough
08:24 - then what do I do
08:25 - average X I add its X location in right
08:30 - I add the Y location in and then I
08:39 - increase the count
08:41 - y now those values aren't really
08:44 - averaged yet yet how do you take the
08:45 - average of five numbers you add all five
08:47 - up and you divide by five so this is
08:49 - what ultimately I'm going to do here
08:51 - over here I'm going to add up all the
08:54 - X's and Y's keep track of how many X's
08:56 - Y's I add it up and then take the
08:57 - average so now at the end I can say as
09:00 - long as count let's just say as long as
09:02 - we found at least one pixel you know I
09:04 - could say like you know what this only
09:06 - works if I find five pixels that might
09:08 - be more accurate but I'm just say as
09:09 - long as count is greater than zero I'm
09:12 - going to say average x equals average X
09:16 - divided by count average y equals
09:21 - average Y divided by count I'm going to
09:25 - fill with the track color give it a
09:26 - stroke and then draw the circle at
09:28 - average X average Y so you can see now
09:31 - here instead of looking for the
09:33 - single-most pixel any pixel within that
09:36 - particular threshold of red is is going
09:40 - to be considered right so let's run this
09:43 - now and see what we get now I don't know
09:45 - if I picked a very good value with value
09:47 - 25 and I should really make that a
09:49 - variable that I can tweak in real time
09:51 - but let's just sort of see okay now what
09:53 - I'm going to do is click here to set
09:55 - that color you can see that's pretty
09:56 - good it's it actually is still sort of
09:58 - like moving around one thing that I
10:01 - think could be useful to do is I could
10:04 - actually show you which pixels I found
10:08 - and what I'm going to do to do that I
10:11 - think is just do I'm going to this is
10:15 - like not so great but I'm going to draw
10:18 - just like a point there to sort of see a
10:21 - white point to see what it's sort of
10:24 - finding and what the other thing I want
10:26 - to do is I'm going to just right now I'm
10:28 - going to map the the threshold between
10:31 - Mouse X like the lowest threshold would
10:33 - be zero the mouse x goes between zero
10:36 - and width and I could have a threshold
10:37 - between zero and like let's just save
10:39 - 100 so this might make things run kind
10:42 - of slow because I'm going to be using
10:44 - the point function a lot but let's sort
10:46 - of see what happens here okay so let me
10:49 - click here and see oh why are those all
10:52 - so first of all I did I didn't I say
10:56 - photos by the way is a stroke and I want
11:00 - to say stroke weight one and actually
11:04 - just for a set
11:04 - in here let's take let's like like let's
11:08 - do this and let's make this a little bit
11:10 - smaller so we can really see what's
11:11 - going on here okay so let's run this and
11:15 - we should see white a white pixel for
11:18 - every pixel it's finding that is red
11:20 - like and you can see what it's found
11:23 - here now oh look at this so the
11:25 - threshold is very high so you can see
11:27 - even my hand is kind of within the
11:29 - threshold now so and you can see as I
11:31 - move the mouse that threshold you know
11:33 - my skin is kind of like reddish but as I
11:35 - move over here you can kind of see see
11:39 - what's going on now I want it Wow my
11:42 - lips I got to get out of the frame so
11:46 - you can see now it's quite stable there
11:48 - you go so I found kind of an appropriate
11:50 - threshold I should be I have a way of
11:52 - like printing that value out so I know
11:54 - and you can see that it's UPS as soon as
11:56 - I move in the picture we're going to
11:57 - we're going to deal with that in a
11:58 - second I want to zoom in here I should
12:05 - be able to unfortunately my arm is too
12:07 - red I should be able to take this off
12:10 - and move this around and you can see
12:11 - that I have quite a pretty accurate
12:14 - tracking as I move this and it's it's
12:17 - quite stable so you can see that even
12:20 - just doing the average location you know
12:21 - again I have nice lighting in here I
12:24 - have a green background I have a very
12:26 - distinct color that I'm searching for
12:27 - but if this were an interactive tabletop
12:30 - where you could control the lighting you
12:31 - could have read discs on top of a green
12:33 - table or white discs on top of a black
12:35 - table then this is something you could
12:36 - do so I've shown you one improvement
12:38 - here the first improvement is just using
12:40 - the average and again as soon as I
12:42 - introduce another cup you know we've got
12:44 - a problem look at it that dot is right
12:46 - in between them right because it's the
12:48 - average location which is kind of
12:51 - interesting but not what I'm looking for
12:53 - so in not in the net in the next video
12:55 - I'm going to look at tracking motion
12:56 - which I think will be interesting to see
12:57 - but the video following that I am going
13:01 - to I'm going to show you how you can
13:04 - track each of these locations as blobs
13:06 - separately okay uh so that concludes
13:11 - this particular video and in the next
13:13 - video we're look at motion tracking it
13:15 - frame differencing
13:17 - you