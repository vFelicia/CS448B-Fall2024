00:00 - Ok, so we're getting to an exciting moment!
00:03 - this is an exciting moment in time,
00:05 - you know, what are we really doing here? 
I have no idea but we are
00:09 - getting to the point where
00:11 - we are almost ready for this circle,
when it reaches this edge of the window
00:16 - to turn around and come back!
00:18 - come on, you can do it! ok, almost!
00:20 - we are getting there, we are ready to do that!
00:22 - so how are we going to do that?
00:25 - we're going to use a conditional statement
00:26 - that's what the last two videos, 
that you may or may not have watched,
00:29 - (unintelligible) complete disasters ...
(unintelligible)
00:34 - we're demonstrating how conditional 
statements work.
00:36 - well, let's take a look at our scenario here:
00:41 - we have a Processing window,
we've got a circle in that Processing window.
00:43 - the circle is draw at an x-location of circleX,
that is the circle's x-location
00:51 - the circle moves every frame a certain amount
00:55 - in our program here we can see it says:
circleX = circleX + 2;
01:02 - so it moves 2 pixels every frame, 
and we can think of that as
01:09 - the xSpeed, for example, 
that's the speed it's moving along the x-axis
01:15 - you know, this should really ring a bell for you!
01:20 - what's the thing that we wanna add 
to our program if we're talking about
01:23 - the fact that there is this value that goes here 
that we could name xSpeed?
01:27 - well, we should have a variable for that!
01:29 - and I kinda jumped the gun with this
01:31 - because that's something we're going to discover
01:33 - if I had not mentioned that right now, we would
01:35 - discover this in a moment, we need that to be 
a variable to execute our task
01:38 - but I'm just gonna add another variable at the top
01:41 - I'm going to call it xSpeed = 2;
01:43 - and we're going to say: 
circleX = circleX + xSpeed;
01:47 - the nice thing about this is if I decide I want
the circle to be really slow
01:50 - because I want it to be really dramatic
01:52 - I could change that to .2 and you see
we're moving very, very, very , very slowly
01:58 - across the screen. so we let that go for a little bit
02:01 - we can talk and see if we can get back here
before it reaches the end
02:04 - that's a good challenge!
still only two minutes so far!
02:06 - we're doing well!
02:07 - ok, so first we have to decide for ourselves
02:09 - what's our condition for when the circle
reaches the edge?
02:13 - well, you can say: if the circle's x-location
02:18 - is at the width of the window,
02:20 - but what does it mean to say: 
at the width of the window?
02:22 - maybe you want to say:
if it EQUALS the width of the window
02:25 - if circleX equals width
02:34 - turn around, that's what we want to say
02:37 - turn around.
02:40 - so this is reasonable but it's a bit
02:42 - of a problem - it's not there yet!
02:43 - the little ball is still going! 
let's go over there and stop it!
02:46 - ok, let's add that bit of code
02:49 - and I'm gonna say: if circleX equals 
the width of the window
02:57 - do something. now, I'm gonna just 
print a statement
02:59 - turn around
03:04 - so, and I will also not have it go .2 pixels, 
let's have it go at 2 pixels
03:08 - and let's run and see what happens
03:15 - oh, I lost my line of code ...
03:17 - so [unintelligible] 
circleX = circleX + xSpeed;
03:28 - run this again
03:28 - it's going, it's going, it's going
03:31 - in a moment we should see a little message
03:34 - pop up ... ah, you saw that?
03:36 - so it reached the edge and printed 'turn around'
03:38 - I'm sure you can't read it says 'turn around'
03:39 - but it says 'turn around'
03:42 - hm, is that out the screen? 
no, it's not out of the screen
03:44 - it's just out of my preview
03:46 - just ignore me, this is all magic
how this all works
03:50 - ok, see this is the problem: 
I'm just like losing my train of thought
03:53 - and a minute goes by
03:54 - ok, we see, but what's the problem 
with this statement?
03:57 - this is a big problem, 
this is kind of good but it's not great
04:00 - what if I'd say: xSpeed = 2.8whatever
this is really important, this is exactly
04:07 - what I always imagined xSpeed to be!
04:10 - I mean, come on, 2.8whatever, 
that's such a good speed! right?
04:16 - ok, here it goes, it's gonna get to the edge ...
04:21 - nothing printed out! why?
04:23 - because if you add this up a bunch of times
04:25 - it's not going to be exactly 360 pixels
04:28 - so a much better way of doing this
would be to say:
04:32 - if circleX is greater than, or equal to, width
04:36 - this way if it just so happens that it's here
and the next frame it would be here
04:40 - we're still gonna register that!
04:42 - as long as it's gotten past the window
now we wanna execute some task
04:46 - so it's a little bit of a digression, just with 
how you deal with something along the edge
04:50 - but an important one nonetheless.
04:51 - 'greater than' is much better than 'equals to'
04:54 - ok, we're at 5 minutes, that's ok
04:57 - ok, so now we're good and we're going to say:
if it's greater than width
05:01 - now just to be simple for a second,
05:05 - I'm gonna say, how would you say? ok, 
what would you write there
05:10 - to have it turn around?
05:12 - well, how do you get it to go forward?
05:14 - to get it to go forward you say:
circleX = circleX + xSpeed; right?
05:19 - so to go backwards you'd say:
circleX = circleX - xSpeed;
05:24 - so if it gets greater than width then
why we don't just tell it to go backwards?
05:28 - ok, that sounds good! I don't know, 
I like your line of reasoning there!
05:31 - that was pretty reasonable!
05:32 - that was what you were thinking, right?
05:33 - that's not what I was thinking
but that's because I already did it before
05:35 - so, circleX = circleX - xSpeed;
05:40 - let's run that! that seems pretty good.
05:42 - it's getting to the edge,
05:45 - very dramatic, what's going to happen?
05:46 - boo, that's kind of a good effect
05:48 - we got it to stop at the edge
05:49 - this is a big moment for us!
05:50 - it stopped at the edge. but is it
really stopping at the edge?
05:53 - this is where you really, 
first of all we could debug this problem
05:56 - by putting a print statement in there
and see what the value of circleX is
06:00 - but this is not right, we need to figure out 
how to get it to turn around
06:05 - it's not turning around. so what's happening here?
06:08 - ok, so let's just say for a moment
that the value of circleX starts at 0
06:12 - and let's give it a speed of 10
06:15 - so it's like superfast
06:17 - this is like the fastest circle moving across
the screen I've ever seen
06:21 - boom, it's stuck there
06:22 - it's 10, is that greater than width?
06:24 - no, so it's 20, is that greater than width? no.
06:27 - so it's 30, it's that greater than width? no.
06:28 - it's doing that over and over again, 
eventually it gets to be 350,
06:31 - is that greater than width? no, 360? no.
370? yes!
06:35 - so we know say circleX is 370 which equals
370-10=360, is that greater than width?
06:44 - no. so it's stuck at the edge, 
we don't wanna ...
06:48 - what this code is saying, is that 
when it gets to the edge, have it go
06:52 - back one time, and then keep going forward
06:54 - and then go back one time, and keep
going forward. we don't want to do that!
06:58 - we want to say: have it permanently start
to go backwards!
07:01 - so how do we have it permanently 
start to go backwards?
07:03 - well, why is it permanently going forward
in the first place?
07:06 - it's permanently going forwards 
because its xSpeed is 10.
07:11 - so what if I actually here manipulate its
xSpeed value and said:
07:15 - xSpeed = -10; ?
07:19 - it's zooming across and BOOM, it's
zooming back again, and oh, it's gone again!
07:25 - we can accomplish that though!
we can deal with that!
07:27 - we can handle it!
07:28 - if circleX is less than 0
set it to go forward
07:35 - boom ... boom ... boom ...
07:39 - we have a bouncing ball!!
07:41 - ladies and gentlemen,
this is very exciting!
07:43 - this is a big moment!
07:44 - what we have now is two conditional statements
07:47 - one ... one ... I'm so confused 
I wish to be drawing this but
07:53 - now I just got this thing here
07:54 - one is telling it to whenever it reaches 
the right hand-side of the screen
08:00 - to set its speed to be negative
08:02 - and whenever it reaches the left-hand side 
of the screen to set its speed to positive
08:05 - here is the thing:
08:06 - if you're thinking about this, 
if you've learned about,
08:10 - if you've watched our overly long video
about logical operators
08:14 - that had AND and OR in it
08:15 - could we say more generically:
08:18 - if it gets to one side of the screen
08:23 - or if it reaches the other side of the screen
08:27 - turn around!
08:29 - how could we say: turn around?
08:35 - well, let's think for a moment:
08:39 - 10 means going this way,
-10 means going this way,
08:44 - so if the value is 10 ,
we want it to switch to -10
08:47 - if the value is -10 
then we want to switch it to be 10
08:51 - how do we reverse the polarity of a number?
08:53 - if it's positive to make it negative,
if it's negative to make it positive?
08:56 - multiply it by -1 !
08:58 - then we get -10
08:59 - 10 times -1 is - 10
09:01 - -10 times - 1 is 10
09:04 - genius!
09:05 - so here we go and we say:
xSpeed equals xSpeed times -1
09:15 - and we now have exactly the same effect
09:19 - but we've reduced it into one statement
09:21 - if it's greater than width
OR if it's less than 0
09:24 - reverse the speed of that
09:26 - now there's a couple of things you might
try to do as an exercise now that
09:30 - you've watched this video:
1. add y
09:32 - try to bounce it along the y-axis
09:34 - 2. is having it speed up or slow down
09:38 - each time it hits the wall
09:40 - this is kind of an interesting problem
09:42 - and I'm actually gonna show you 
in a second
09:43 - so if you don't want the answer to how you can
slow it down, pause the video for a second
09:47 - [unrelated stuff]
10:03 - so, the other things that you should try is
10:05 - to think about gravity, so how do you 
make gravity work. and maybe I'll
10:09 - do a little video about that but 
that's sort of part 3, that's a litte advanced
10:12 - we have this system where we
[unintelligible] three exercises
10:14 - like right below you, like on this browser page,
but whatever ...
10:19 - so, anyway, just as an interesting little token
10:23 - we could do something like have it 
always slow down.
10:26 - this is gonna cause us a problem though
10:28 - watch, aaah, [unrelated]
10:37 - so I'm actually gonna leave this here
10:39 - I'm gonna leave this as this open question
10:41 - why did this not work?
10:43 - why did it suddenly get stuck?
10:45 - I mean if I increase the speed, it's not 
gonna get stuck
10:48 - and let's start it a little slower
cause it's gonna happen to quickly
10:54 - so let's say each time it hits a boundary
speed up a little bit
10:58 - multiply yourself by 1.1
11:00 - so you're speeding up by 10%
11:02 - you can see each time it hits the wall
11:04 - it starts to go a little bit faster
11:05 - faster ... and faster ... and faster...
11:11 - you can watch it on your own time
11:12 - cause I only got ...although we're still recording ...
11:15 - I still got 10 seconds left
11:16 - but as an exercise and I get back to this:
11:19 - why does this break it?
figure that out!