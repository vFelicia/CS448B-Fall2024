00:00 - Hello, everybody.
00:01 - In this video tutorial,
I'm starting here
00:04 - by this whiteboard.
00:05 - My friend, the whiteboard.
00:06 - I think I might have disturbed
people in the room next to me.
00:08 - OK, it's fine.
00:08 - It's fine.
00:09 - Hopefully, no one's going
to come and complain.
00:11 - I want to talk about
transformations.
00:13 - So this is actually
a video tutorial
00:15 - that I've been missing
for a long time.
00:17 - It fits right in to the first
or second week of programming,
00:19 - really, because it can
become a very sophisticated,
00:23 - complex topic as we move into
3D graphics and all sorts
00:26 - of stuff.
00:27 - But, ultimately, this
is a way of controlling
00:31 - your view, so to speak, of
the canvas you're drawing to,
00:36 - the orientation, the scale,
the rotation to alter
00:40 - the way that you draw things.
00:41 - So that's a terrible
way to explain it.
00:43 - So let me make a list first.
00:46 - This is going to help.
00:48 - The functions that I want
to explore in this video
00:50 - are translate, rotate, there's
another one, scale, and then,
01:02 - also, push and pop.
01:07 - Now, there are more functions
related to transformations
01:10 - than just these three--
01:12 - these five, really--
but these are the ones
01:14 - that I want to focus
on in this video.
01:15 - And I want to talk
about, what's the goal?
01:16 - What is the goal here?
01:17 - So there's a lot
of reasons why you
01:19 - might want to use
transformations,
01:20 - and I'll try to
talk about those.
01:22 - Grouping shapes
together can be useful.
01:23 - Nesting various shapes
within each other
01:26 - is a way that it can be useful.
01:28 - But, ultimately, for
you, if you're just
01:31 - starting working with
code and P5 and graphics,
01:34 - the main reason you want
to use transformations
01:36 - is really just for
this rotate function.
01:38 - Because you have a canvas.
01:42 - You might have a rectangle
here, and what you want
01:45 - is for that rectangle to
spin around and rotate, like,
01:49 - rotate, spin around.
01:51 - And you would
think that's, like,
01:52 - the simplest thing, because
there's a rotate function,
01:54 - and shouldn't I just say rotate,
and then, the thing rotates,
01:56 - and we're done.
01:56 - We can leave.
01:57 - It's not.
01:58 - And ultimately,
it's not so hard,
02:01 - but it is a little tricky at
first and a little confusing
02:03 - what these things do.
02:04 - So the goal that I want
to have in this video--
02:06 - and there's more to it
than this, but at least,
02:08 - for this first video
about transformations
02:10 - is, I want to have
two rectangles,
02:13 - and I want them each to rotate.
02:15 - Maybe this one rotates
around its center, and maybe
02:18 - this one rotates
around its corner,
02:21 - and they both rotate in opposite
directions independently
02:23 - of each other.
02:24 - And then, you might
think to yourself, also,
02:27 - like an exercise you
can do, and maybe I'll--
02:29 - I think I did this, actually,
in some solar system simulation
02:31 - video.
02:32 - But I'm remembering
that right now,
02:34 - is you could think
about, well, what if you
02:35 - had some type of solar
system-like simulation
02:38 - where you have some
type of star or sun
02:40 - in the middle, a planet
that rotates around that,
02:43 - and while that
planet rotates around
02:45 - that, there's another one
kind of rotating around that.
02:48 - So think about these
sort of nested systems.
02:50 - And I'm sure you'll
come up with all sorts
02:51 - of other creative ideas.
02:53 - So where to begin?
02:56 - I first want to begin with
the translate function.
02:59 - So I'm going to come
over here and I'm
03:02 - going to go to some code, which
there's very little in it,
03:04 - and I'm going to just do--
03:05 - I'm going to write
a draw function.
03:07 - Ultimately, I'm going to
start with something static,
03:10 - but, ultimately, I might--
03:14 - I'm going to animate it.
03:16 - So I'm going to
draw a rectangle.
03:17 - And I'm going to draw
that rectangle at 50, 50,
03:21 - and I'm going to be 100 pixels
wide and 50 pixels high,
03:24 - and I'm going to say fill to 55.
03:26 - I'm going to go
back to the browser
03:28 - and I'm going to look
at this rectangle.
03:29 - So I see this rectangle there.
03:31 - There it is.
03:32 - So what have I done?
03:34 - I'm going to draw
the canvas again.
03:38 - Now what I've done, I
have this rectangle,
03:41 - and I gave it an x, y
position, and it's oriented
03:44 - according to its corner.
03:46 - Its position is 50, 50.
03:49 - 50 pixels along the x-axis,
50 pixels on the y-axis.
03:51 - And we see it here because
it's 50, 50 relative to 0,
03:58 - 0, which is in the top left.
04:00 - So we're saying rectangle,
50, 50, 100, 50.
04:07 - Now, I could do exactly the
same code, exactly the same code
04:13 - in a slightly different way.
04:17 - I could say instead,
translate 50, 50, and then, I
04:26 - could say rectangle,
0, 0, 100, 50.
04:33 - And what I've done is I--
04:36 - these two pieces of
code are identical.
04:38 - Because what does translate do?
04:40 - It moves the point of origin.
04:42 - It moves 0, 0 and says
0, 0 now lives here.
04:51 - So if I draw the
rectangle at 0, 0,
04:53 - I see it in exactly
the same place,
04:55 - but I'm just thinking about
the orientation of the canvas
04:59 - in a different way.
04:59 - And a reason why
you might do this
05:01 - is to, say, translate
the 0, 0 to the center
05:04 - because you just feel-- you
like to think about your screen
05:07 - as 0, 0 being in the center.
05:09 - There's all sorts of reasons
why you might do this.
05:12 - Let's prove that
this is the case.
05:15 - So I'm back here.
05:16 - So I'm now going to say,
right here, translate 50,
05:20 - 50 rectangle 0, 0, 100, 50.
05:27 - And I'm going to say fil--
05:29 - well, actually,
what I'm going to do
05:31 - is I'm going to just
comment this out.
05:33 - And I'm going to
hit Refresh, and we
05:34 - should see exactly the same
code, exactly the same result.
05:38 - So why would you do
one or the other?
05:40 - Why would you say
translate 50, 50
05:42 - and then draw the
rectangle at 0,
05:44 - 0 versus just drawing the
rectangle directly at 50, 50?
05:47 - Well, one of the
things that's important
05:49 - here is that these
translations accumulate.
05:53 - So just like when you
say fill a certain color,
05:56 - every shape
afterwards is colored
05:59 - according to that fill
unless you say fill again
06:01 - with a different color.
06:02 - The same sort of thing
applies to translate.
06:04 - So now, if I were to say,
rectangle 100, 100, 50, 10,
06:18 - you can see there's
that other rectangle.
06:20 - It's drawn relative to
where that origin was.
06:22 - So now, what's interesting
about this is I can actually,
06:26 - instead of saying
translate 50, 50,
06:28 - I could say, translate
mouseX, mouseY.
06:32 - So now, these move relative
to that one position.
06:36 - So this is one reason
why this can be useful,
06:38 - because you might want to think
about this complex pattern
06:41 - that's all centered around or
relative to one given point,
06:45 - and you could move it all
together just by altering
06:48 - the translation.
06:49 - So this is one reason
why it's useful.
06:51 - Another reason why it's useful
is really the main purpose
06:54 - for this video, rotate.
06:57 - You cannot control the rotation
of a shape you're drawing
07:01 - without the use of translate.
07:03 - And why is that?
07:04 - Well, rotation is
not as simple as just
07:06 - saying rotate something.
07:07 - So let me grab this eraser here.
07:09 - If you said to me, rotate that
eraser 90 degrees, I would say,
07:14 - OK, I rotated it 90 degrees.
07:15 - But we have this
bond, you and me.
07:18 - We understand each other.
07:20 - We can speak the language
of angles and rotation
07:24 - without specifying.
07:25 - But the computer does not
have this bond with you.
07:27 - It needs to know, OK,
in addition to rotating,
07:31 - just rotating by some
angle, I need to know around
07:34 - what point should I rotate.
07:36 - What's the origin, what's
the axis of rotation?
07:40 - And what axis?
07:41 - There's all sorts of questions.
07:43 - So this is what--
07:45 - this is how-- this is why
translate is so important,
07:47 - because always, always,
always, rotation
07:51 - happens around the
point of origin.
07:54 - So if I translate and draw a
rectangle at the corner, at 0,
08:01 - 0, it will rotate
around its corner.
08:03 - And I have another
way of describing
08:05 - this I'm going to come
back to in a second.
08:07 - So let me explain
what I mean by this.
08:09 - Let's come back.
08:11 - Let's put this
rectangle at 50, 50.
08:14 - Let's get rid of translate.
08:15 - And I'm going to say, OK--
and here's the other thing.
08:18 - Hello, angles.
08:20 - Time for a little review.
08:21 - I think I have this
video for sure,
08:23 - but since we're here, let's
talk about angles for a second.
08:25 - Do I have some room over here?
08:27 - So if you're me, you
probably typically think
08:31 - of angles in terms of degrees.
08:33 - This is like, a 90-degree angle,
and this is a 45-degree angle.
08:38 - And a full rotation
is 360 degrees.
08:41 - And we can actually use the unit
of measurement, degrees, in P5,
08:46 - and I'm going to.
08:47 - Because there's a function
where I can say, angle mode,
08:52 - and then, I can say
degrees to tell P5,
08:57 - I like to think in
terms of degrees,
08:59 - and you should think in
terms of degree, also.
09:01 - But natively, and if you use
other programming and graphics
09:04 - environments, you might
not be able to do this.
09:06 - The native kind of unit of
measurement for most computer
09:11 - graphics systems is
something called--
09:15 - I need more space.
09:18 - A unit of measurement
known as radians.
09:25 - Radians refers to arc length.
09:29 - Oh, my goodness, what's that?
09:30 - Well, maybe I'll make a
video about arcs someday,
09:32 - but let's just think
about a circle.
09:35 - And pretend this circle
is a unit circle.
09:39 - What is a unit circle?
09:40 - It means the radius
is of length 1.
09:44 - 1 pixel, 1 centimeter,
1 meter, whatever it is.
09:49 - Let's say I want to know,
what is this angle right here
09:52 - in radians?
09:53 - Well, it turns out that
if I take this arc,
09:57 - flatten it out and
measure it, that length
10:02 - is that angle in radians.
10:04 - So radian is a
way of describing.
10:06 - And if you remember
from some math class,
10:08 - or you haven't taken
this math class yet,
10:10 - the circumference of
a circle, meaning,
10:13 - the whole length of
the entire outline
10:16 - of a circle, the formula for
calculating that is 2pi r.
10:22 - So if r is 1, it's just 2 pi.
10:24 - And guess what?
10:25 - What is 360 degrees in radians?
10:28 - It's 2pi.
10:29 - So I kind of got
a little off track
10:30 - the point of what I'm talking
about, which is translate,
10:33 - rotate, but if I want
to rotate something
10:34 - according to an angle, I
need to at least decide
10:37 - what unit of
measurement I'm using.
10:38 - By default, it'll use radians.
10:40 - Let's make things
a little simpler
10:41 - and let's switch it to degrees.
10:43 - So I'm back over here now.
10:45 - And I'm going to say, write
under create canvas angleMode.
10:50 - Angel mode.
10:51 - Let's activate angel mode.
10:53 - Degrees.
10:55 - And now, before this rectangle,
I am going to say, rotate 45.
11:06 - What's going on?
11:08 - So let's add a variable.
11:09 - Have you tried variables yet?
11:11 - I don't know where this
video fits into my playlist.
11:13 - But variables-- and,
incidentally, I'm
11:17 - going to use this word let
to create a variable, which,
11:20 - sometime in the future,
silly that I'm saying it,
11:22 - because all my videos will have
let, but this is kind of new.
11:24 - Say let a, for let
angle equals 0,
11:28 - and I'm going to
put angle in here.
11:30 - And then, every time through
draw, I'm going to say,
11:33 - angle equals angle plus 1.
11:35 - So I'm going to
increase by 1 degrees.
11:38 - What's going on here?
11:39 - Look at that.
11:40 - Oh, there it is [INAUDIBLE].
11:41 - Come back.
11:42 - Come back.
11:43 - Please.
11:43 - It's going to come
back in a second.
11:45 - Can we wait?
11:45 - Do you mind waiting?
11:46 - Hold on.
11:49 - There it is.
11:49 - OK, so what is it doing?
11:51 - So what it's doing is
this rectangle at 50,
11:58 - 50 is rotating around
the origin 0, 0.
12:01 - By default, if you
just say rotate,
12:03 - everything's going to
rotate around the origin.
12:05 - So that's why we're
seeing this happen.
12:08 - It goes to here, and
then, it goes to here,
12:11 - and then, it goes to here.
12:12 - This is not a bad thing.
12:14 - That might be what you want.
12:16 - In fact, maybe you want it
to kind of rotate around
12:19 - the center of the window.
12:20 - So I could come back over
here and I could say,
12:24 - let's move the origin.
12:26 - Let me move the
origin to 200, 200.
12:31 - And now, I have this
rectangle that's
12:33 - rotating kind of
around the center.
12:35 - It's a little confusing.
12:36 - I think it might help
if I drew a line.
12:38 - We could see what's going on
here if I drew a line from 0,
12:42 - 0 to 50, 50.
12:48 - Whoa, what happened there?
12:49 - So why didn't the line--
ah, look what I did.
12:52 - So this is really important.
12:53 - And I may make this a little
more complicated than I
12:55 - need to, but this is so key.
12:56 - Look at this.
12:57 - I translated, drew
the line, and then, I
12:59 - rotated and drew the rectangle.
13:01 - So only the rectangle is
rotating, not the line.
13:04 - The order of operations
is so, so important.
13:07 - So let me put rotate up here.
13:09 - Then, let me draw both
a line and a rectangle
13:12 - after I translate to the center
and rotate by that angle.
13:16 - So I hit Save?
13:17 - I don't think so.
13:18 - So now, we can really
see what's going on.
13:21 - You can see here
how it's rotating.
13:23 - The point of origin, the point
of reference for that rotation
13:26 - is the center of the window,
wherever I've defined
13:29 - 0, 0 to be by translation.
13:30 - And then, this is-- now,
why does this work this way?
13:34 - I'm going to attempt something.
13:35 - And I'm pretty sure it
was Golan Levin who I
13:38 - saw do a demonstration of this.
13:40 - But I have a piece of paper.
13:45 - This piece of paper, I want
it to now be indicate--
13:48 - I want it to be the canvas.
13:49 - I'm going to put it up here.
13:51 - So what's actually happening?
13:55 - Let's say that I translated
to the center here.
14:00 - And now, I'm going to
say, rotate 45 degrees.
14:05 - I'm going to rotate
this 45 degrees.
14:09 - Now, what am I going to do?
14:10 - I want to draw a rectangle.
14:13 - So I'm going to
draw a rectangle.
14:15 - Can you even see this?
14:17 - I draw a rectangle.
14:18 - There we go.
14:21 - Look what I got.
14:23 - Can you see that?
14:25 - So what's actually happening
in the computer's mind
14:28 - is it turns the thing.
14:30 - It transforms the
view, in essence,
14:32 - of the actual windows canvas
itself then draws it as
14:37 - if it hadn't moved it at all.
14:39 - But then, what you
actually see, of course,
14:40 - is not like, the canvas doesn't
move, just the view of it
14:43 - moves.
14:44 - So what you're actually
seeing is the rotated thing.
14:46 - I don't know if
that was helpful.
14:47 - Try this on your own.
14:48 - Somebody make a video that's
much better than that.
14:50 - That was mine.
14:51 - This is why I'll never do
live physics demonstrations
14:54 - or anything like that,
because I'm terrible about it.
14:56 - Anyway, so you see
what's going on here.
14:58 - So what do I want to do?
14:59 - What if I now want this
rectangle to rotate around
15:03 - its center?
15:04 - How am I going to handle that?
15:06 - So let's go back to the
code, and I'm going to say,
15:09 - OK, well, let's forget
about this line for a second
15:13 - and let's put this
rectangle back here.
15:15 - Let me run it again.
15:16 - Oh, but that's weird.
15:19 - It's still doing
what it did before.
15:21 - What I want is to draw
the rectangle at 0, 0.
15:25 - If I draw the rectangle
at the point of origin,
15:32 - then it will rotate around that.
15:34 - Gave myself like,
a weird fingernails
15:36 - on a chalkboard feeling there.
15:39 - Save, Refresh.
15:41 - So you can see now it's rotating
around that rectangle's point
15:45 - of reference, because
that is 0, 0, and that's
15:47 - where the rectangle is.
15:48 - If I want it to rotate around
its center, let me say--
15:53 - let me say-- easy thing I can
do is just say rectMode CENTER.
15:57 - So I can tell the rectangle
to reference its center.
16:00 - And now, I have a rectangle
rotating around its center.
16:03 - That's what I wanted.
16:05 - And let me position it a little
bit up in the corner more
16:10 - of the screen.
16:12 - We can see it
spinning over there.
16:14 - Let me have it go rotate
by 5 degrees every frame.
16:17 - And we can see, there we go.
16:18 - We have this rotating rectangle.
16:21 - And it's sort of
important to realize
16:23 - that if I was going to
have something move around,
16:26 - like if I was going to have
this thing move around,
16:28 - I would probably then--
16:29 - I would have an x position,
and I might have a y position,
16:34 - and now, what I
would want to do is
16:36 - position the rectangle's
position as defined
16:38 - by translate x and y.
16:42 - So now, you can see this.
16:43 - It's the same sketch as
before, but now, if x changes--
16:47 - so in addition to
the angle changing,
16:49 - if I were to say x equals
x plus 2 or something,
16:52 - now, it's rotating and moving.
16:54 - So this is kind of
interesting, by the way.
16:56 - And I have some future videos
somewhere in the nature of code
16:59 - playlist that deal
with angular velocity,
17:01 - if you're throwing something
and having it spin,
17:03 - something you could
think about simulating.
17:05 - But let me back up for a second.
17:07 - I'm going to get rid of
the whole x and y concepts.
17:10 - That's useful for
you to think about.
17:12 - And I am going to now the
ask the question, what
17:20 - happens if I put a
rectangle over here
17:22 - and I want it to rotate
at a different speed
17:23 - in the opposite direction?
17:25 - So let's give these some color
so we can distinguish them.
17:28 - Let's make this some
reddish something or other.
17:32 - And then, I'm going to
add another rectangle.
17:35 - I'm going to just put
rectMode in Setup,
17:38 - just sort of as a global
setting for the program.
17:41 - Then, I'm going to
draw another rectangle
17:47 - and I'm going to give
it a different color.
17:49 - And where do I want it to be?
17:51 - I want it to be
kind of at like--
17:55 - this is 400 by 400, so
let me put it at 300, 300.
17:59 - So I'm going to
put it at 300, 300.
18:04 - Whoa, where'd it go?
18:06 - Ah!
18:07 - Where'd it go?
18:09 - Ah, there it is.
18:10 - So what's going on?
18:11 - So one of the things
you have to remember
18:13 - is that this translate and
rotate affects everything
18:16 - after it.
18:17 - So here's a way
I could fix that.
18:19 - I could just say, let me just
take that translate and rotate
18:21 - and put it afterwards.
18:21 - I'll just put it afterwards.
18:22 - Just put it afterwards.
18:23 - I'll just put it afterwards.
18:24 - Don't worry about it.
18:25 - Now, I've got that rotating
with this not rotating.
18:28 - Because I drew the
blue rectangle first,
18:30 - then I translated, rotated,
and I got the other thing,
18:32 - and this doesn't affect.
18:33 - Because every time through
draw, every time through
18:37 - draw, transformations reset
back to nothing, back to 0, 0
18:41 - being the top left
with no rotation.
18:44 - But that's not really
a viable solution,
18:46 - because I might need to draw
it in a different order,
18:48 - and I might want
this thing to rotate.
18:50 - So if I were to
translate, rotate this,
18:52 - it's going to affect
the other thing.
18:53 - So how do I deal with this?
18:54 - Now, don't get me wrong,
sometimes, once again,
18:57 - we want this.
18:58 - Remember, what if I just wanted
a little, tiny rectangle offset
19:04 - by a little bit rotating around?
19:06 - So you can see, I might actually
want this to be the project.
19:10 - I want two things
to be relative,
19:11 - and then, this is good that
they follow each other.
19:13 - But in the case of me wanting
it to be in the corner separate,
19:21 - how do I-- how do I stop it?
19:23 - So one thing you might
think to yourself, is undo.
19:26 - Well, let's see, if I translate
to 50, 50, then I rotated,
19:29 - and I drew the thing,
I know, I know,
19:31 - I can rotate back by
negative the angle.
19:34 - That undoes the rotation,
and then, I can rotate back
19:37 - by negative 50, negative 50.
19:40 - So I'm going to undo.
19:41 - I'm going to go backwards
and like, reassemble, reput
19:44 - the canvas back
in the right spot.
19:47 - Let me hit Save.
19:48 - Let we hit Refresh.
19:49 - Look, that worked.
19:50 - So that works, but this also is
a really not a viable solution.
19:55 - Because, someday,
I'm going to create
19:57 - a program with so many
transformations for so
19:59 - many different things, and
want some things to be related
20:01 - to some things, some
things to be independent,
20:03 - me having to keep track of
it myself and undo everything
20:06 - is kind of a nightmare.
20:07 - There is actually
a function called
20:09 - Reset Matrix which
will actually--
20:11 - why are we calling it matrix
will reset everything?
20:13 - But really, the function
that I'm looking for,
20:15 - the one that I haven't
bothered to mention yet
20:17 - are these, push and pop.
20:19 - So you can think about
push, another word for push,
20:24 - in this case, being save.
20:27 - And pop, another word
for pop being restore.
20:34 - So I can save the current
transformation state.
20:38 - Where is the origin?
20:39 - What's the rotation?
20:40 - By the way, there's also scale.
20:42 - So I haven't mentioned
or shown you scale,
20:43 - but that's another
transformation.
20:45 - I can save the
state, and then, I
20:47 - can do a whole bunch of stuff,
and then, I can restore it,
20:50 - so kind of like in
an undue kind of way.
20:52 - So let's look at how that works.
20:54 - So I can say, right here, before
I do my first translation,
20:58 - let me say, save.
21:00 - Save whatever
things were before.
21:03 - I do this.
21:04 - Now, I can do some stuff, then
I can undo it by saying pop.
21:08 - So this, ultimately, has the
same effect as backing out
21:14 - of what I did before.
21:15 - So you can kind of-- this is a
way-- putting push at the top
21:17 - and pop at the bottom
around some code
21:20 - is the way of making
that code self-contained
21:22 - within its own
transformation world.
21:24 - And now, if I refresh,
we can see-- there we go.
21:32 - This rectangle is completely
independent of that rectangle.
21:35 - And now, I could do
something like, instead
21:40 - of drawing the
rectangle at 300, 300,
21:42 - I could translate to 300, 300,
I could draw the rectangle
21:46 - at 0, 0, and I
could say something
21:48 - like, rotate by a
negative angle times 3.
21:52 - So I'm just going to
use the same variable,
21:53 - but have it be
faster or something.
21:56 - And we can see this.
21:57 - So we can see, now, I
have my one rectangle
21:59 - rotating this way,
independently of this one
22:03 - rotating the other way.
22:05 - So I have a feeling that I've
missed a whole bunch of things.
22:08 - I've missed talking about scale.
22:11 - I missed talking about
why it's push and pop.
22:13 - What do those terms mean?
22:14 - So I think I'm going to
pause here for a second.
22:17 - I'm going to come back,
and in the next video,
22:19 - if you're interested,
I'm going to do a--
22:21 - one thing I'm going
to talk a little bit
22:22 - about what's actually going on
a bit more behind the scenes.
22:25 - Why is it called push and pop?
22:27 - What does this function,
reset matrix, do?
22:29 - Why is there a matrix?
22:30 - So I'm going to talk
about that a little bit.
22:31 - And I also need to show you
scale a little bit more,
22:34 - which I think can be useful.
22:35 - OK?
22:35 - Thanks for watching, and
stay tuned for another video,
22:39 - I guess.
22:40 - What else am I going to do?
22:41 - OK, bye.
22:42 - [BELL RINGS]
22:42 - [UPBEAT MUSIC]