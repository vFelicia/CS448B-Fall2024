00:01 - hello in this video I'm going to look at
00:03 - the lurp function the lurp function in
00:05 - processing and p5js I'll do it in both
00:08 - environments what is the lurp function
00:10 - by the way lurp is kind of a weird word
00:12 - it stands for linear interpolation which
00:15 - might make you want to stop watching
00:16 - this video immediately now that I said
00:18 - linear interpolation but but stay here
00:20 - because I think there's a reason why you
00:21 - might want to use this so I've seen this
00:22 - question come up multiple times this
00:24 - week if you have let's say you're doing
00:26 - computer vision tracking and you're
00:27 - trying to color track and the the thing
00:29 - you're tracking is like jumping around a
00:30 - lot or you're getting a sensor reading
00:32 - and there's a lot of noise on the sensor
00:34 - so one of the things you can use lurp or
00:36 - linear interpolation for is easing or
00:39 - smoothing out a value so let's I'm going
00:41 - to build an example in a second but
00:43 - let's just look at the lurp function uh
00:46 - on the Whiteboard over here so the lur
00:48 - function
00:51 - requires
00:52 - three arguments the first argument is
00:56 - one particular value I'll call it Val
00:58 - one the second argument is another
01:01 - particular value call it Val 2 and the
01:03 - third argument is essentially you could
01:05 - think of it as a percentage some value
01:07 - between
01:08 - 0.0 and 1.0 so if if value one which to
01:15 - make an easy scenario happens to have
01:17 - the value zero and value two happens to
01:21 - have the value 100 and you put in 0.3
01:26 - here and you say a float valve
01:30 - equals Val will have the value say it in
01:34 - your head because you probably can
01:35 - figure it out uh
01:37 - 30 because 30 is3 or 30% along the way
01:41 - between Z and 100 so the math actually
01:44 - to do that is quite simple it's a you
01:47 - know it's multiply I was GNA I was just
01:50 - going to go through it then I was like
01:51 - ah but I wanted to make this video short
01:53 - what's going on but you can think about
01:54 - how you might get a percentage in
01:56 - between a beginning and a starting point
01:59 - maybe I'll just include the actual code
02:00 - for doing that in the in the description
02:02 - below but what you're here really is for
02:04 - to use this particular lurp function so
02:07 - how is this relevant
02:09 - um okay so uh oh no eraser here so let's
02:12 - think about how this might be
02:15 - relevant let's say that you okay so
02:18 - first of all I'm going to do a physical
02:20 - demonstration one of the reasons you
02:22 - might want to use it is is to get rid of
02:24 - teleportation in your code right so
02:27 - let's say I know that sounds weird but
02:28 - bear with me for a second let let's say
02:30 - you have a
02:32 - Target Target X and you have your own
02:37 - thing at variable X and you want your
02:40 - thing that's at variable X to go to the
02:43 - Target well you could say x equals
02:46 - Target X and the next time you draw it
02:48 - at X it will be at the Target that's
02:51 - teleportation right this thing went all
02:53 - the way there but what if I want it to
02:55 - smoothly nicely ease its way on over
02:58 - there so instead of me right here
03:00 - physically teleporting to this
03:03 - wall I could go halfway each time I
03:05 - could go 50% and then 50% and then 50%
03:08 - or I could go 10% 10% and 10% and 10%
03:12 - and if I'm doing that 60 frames per
03:13 - second we're going to see a nice easing
03:15 - motion that's going to get rid of this
03:17 - teleportation problem so let's build
03:19 - that into this example here and see how
03:21 - that works so I have a processing sketch
03:23 - with nothing in it and I'm going to
03:26 - create two variables I'm going to say
03:28 - float x equal 0 and I'm going to say
03:30 - float Target equals uh
03:34 - 300 and then what I want to do is I want
03:37 - to draw an Elipse at Target uh some y I
03:41 - mean it's just should probably do this
03:42 - with X and Y but let's be really simple
03:44 - about this and do it with only X you as
03:46 - your exercise you can put the Y in uh so
03:49 - I'm going to make the target a nice uh
03:52 - some sort of arbitrary purplish color
03:56 - and then I'm also going to
03:58 - draw my
04:00 - actual thing X and uh it's also it's
04:04 - going to have uh some other color so
04:07 - let's run this code right now and I want
04:10 - to be be able to see it all here so run
04:12 - this code you can see oh no they're too
04:14 - small sorry let's make them much
04:18 - bigger so we can see I have uh Circle X
04:21 - which is this like bluish color should
04:23 - make it
04:25 - brighter I don't know what's going on
04:27 - here but just you can see and I'll say
04:29 - stroke 255 for both of them okay so I
04:32 - have the circle X which is the purple
04:34 - one and Target sorry X which is the
04:37 - purple one and Target which is the pink
04:39 - one so I could do teleportation right I
04:43 - could say x equals Target and when I run
04:46 - it it's instantly at that Target and or
04:50 - I could say instead now I could do what
04:53 - I've been wanting to do oh you can't see
04:55 - what I'm typing how terrible let's do
04:57 - this at the top of
04:58 - draw
05:00 - right x equals Target this would be just
05:02 - setting the value X literally to Target
05:05 - now instead I could say x equals lurp to
05:07 - the Target oh between X and the target
05:11 - so unlike what I kind of showed you over
05:13 - on the on the the Whiteboard where I had
05:15 - sort of two values lur finding a lurp
05:17 - between them to set to a new value I'm
05:19 - just having X continuously interpolate
05:21 - between itself and the target so what I
05:24 - want X to do is go just 10% of the way
05:27 - along the Target now did I get that
05:29 - backward
05:30 - so let's just run it and we'll find out
05:31 - if I got it backwards I don't think I
05:33 - got it backwards did you see that nice
05:35 - easing motion um what I meant by getting
05:37 - it backwards is what happens if I put 0.
05:39 - n in here well 0. n is going 90% of the
05:43 - way there at 60 frames per second it's
05:45 - almost as if you're teleporting there
05:46 - instantly and I could further emphasize
05:48 - this by saying
05:50 - 0.01 and you can see this sort of smooth
05:53 - motion of it moving towards that
05:55 - particular Target now um I have this
05:57 - desire to add a little bit of alpha to
06:00 - these and then do something else which
06:02 - is to say anytime now I click the
06:06 - mouse why don't I give the
06:11 - target equal to a the new mouse value so
06:15 - now you can see uh and let's make it a
06:17 - little bit faster uh 0.06 sort of
06:20 - arbitrary but you can see now if I click
06:22 - the mouse you can see that the one
06:25 - particular uh circle is going directly
06:27 - to the spot and the other particular
06:29 - Circle is not going directly to the spot
06:31 - so this a is showing you how you can
06:33 - have some nice easing motion how can you
06:36 - use this same technique now to smooth
06:38 - out sort of a sensor reading that has
06:40 - noisy values so um I'm going to save
06:43 - this and I'm going to do save as lurp
06:45 - example two and I'm going to uh
06:50 - basically do the same thing here I'm
06:51 - going to take out Mouse X and I don't
06:53 - need Target to be a global variable
06:55 - anymore what I want to do is say though
06:58 - that uh Target is mouse X plus some
07:02 - random value what I'm trying to do now
07:05 - is simulate I already have the solution
07:08 - in there sorry what I'm trying to do now
07:10 - is simulate a noisy value so you can see
07:13 - this particular and and maybe I need to
07:15 - make maybe I need to zoom in a little
07:16 - bit so you can see you can see how much
07:17 - noise is on there and I could actually
07:19 - make it a little bit more extreme by
07:21 - saying like5 I'm just adding some noise
07:24 - to the mouse so you can see this might
07:26 - be the kind of values you're getting
07:28 - from a sensor might be something like
07:30 - this so now you can see that if the and
07:34 - and let's call this like sensor and now
07:36 - let's call uh this instead of X I'll
07:39 - call it smooth sensor because I need a
07:43 - really long variable name for no good
07:45 - reason so I could
07:47 - say now lurp now I'm making this like
07:50 - totally awkward here but this is going
07:52 - to work smooth
07:54 - sensor um now I could say lurp from the
07:58 - smooth value with the actual noisy value
08:00 - by 06 and in this case I actually might
08:02 - want to use a kind of higher value
08:04 - because I don't want to have this like I
08:05 - don't want it to be lagging so far
08:07 - behind but I just want to kind of lose
08:09 - that noise so and now of course I need
08:11 - to draw the whoops I need to draw the uh
08:14 - actual sensor value I don't know this is
08:17 - silly that I'm changing the variable
08:18 - names for no reason and making this more
08:20 - comp my like I something is going on
08:23 - with my keyboard and all this like weird
08:25 - stuff is happening with copy paste ah
08:28 - okay I'm going to have to look into that
08:30 - so now we should be able to
08:32 - see uh uh oh and I didn't have a value
08:36 - in here that would help if it's zero
08:37 - obviously it's not going to do anything
08:38 - so let's make it 0 2 again and you can
08:40 - see now how the purple dot if we zoom in
08:43 - here how the purple dot is actually
08:46 - moving quite smoothly but the noise is
08:48 - on the red one so that just that little
08:50 - bit of lurp now I could if I move really
08:52 - fast you can see it lags a little bit
08:53 - behind and this is you just about you
08:55 - kind of tweaking values and playing
08:56 - around so hopefully this gives you a
08:58 - sense of what the definition of the lurp
09:01 - function is how it works and a couple
09:03 - scenarios where you can use it and if
09:05 - you have questions please add them in
09:07 - the comments oh I said I was going to do
09:08 - this in P5 so just to show you that this
09:10 - exact same thing I could take this exact
09:13 - code I'm going to open up p5js I'm going
09:16 - to paste it in and I'm just going to
09:18 - change this to VAR I'm going to change
09:20 - this to function I'm going to change
09:21 - this whoops to create canvas I'll change
09:25 - this to function I'll change this to VAR
09:27 - whoops change this to VAR and I I think
09:30 - now I have this exact same program
09:32 - working in p5js so you can see here the
09:35 - lurp function exists across both
09:37 - environments and there's just a few
09:38 - syntax differences the most notable
09:40 - being variables are not typed so in P5
09:43 - which is Javascript you just say VAR
09:45 - instead of float uh functions don't need
09:47 - a return type specified so instead of
09:49 - void setup function setup and then uh
09:52 - instead of size the function in P5 I
09:55 - guess I didn't set the font size in
09:56 - advance is uh create canvas so hopefully
09:59 - now you've seen how lurp Works couple
10:01 - scenarios where you could use it in both
10:03 - processing and P5 okay thanks very much
10:06 - and see you in the next video
10:08 - someday