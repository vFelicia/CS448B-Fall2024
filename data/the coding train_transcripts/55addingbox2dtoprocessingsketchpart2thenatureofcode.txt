00:00 - so this is the video we're actually
00:02 - gonna start looking at the code
00:04 - implementation and how we're gonna get
00:05 - these boxes to suddenly start falling
00:07 - and bouncing off of each other so if you
00:09 - remember we have this box class and what
00:11 - we said is aha instead of adding all the
00:14 - physics into that box class ourselves
00:15 - we're gonna add a box to the body into
00:18 - that box class how do we do that
00:20 - we've got this long list of steps that
00:22 - we went through so we need to look at
00:23 - the code implementation for each one of
00:25 - these steps but before we can even do
00:27 - that we have kind of a larger question
00:29 - right
00:30 - just putting bodies into a box object
00:32 - isn't just the only piece of this puzzle
00:34 - we need to do I'm gonna divide this into
00:36 - three things there are three things we
00:38 - need to add to that processing sketch to
00:40 - have full unbox 2d physics happening so
00:43 - number one is we need to deal with the
00:46 - Box 2d world so where we're going to do
00:50 - this is in the main tab and more
00:53 - specifically we're gonna add the box 2d
00:55 - world into processing setup so this is a
00:59 - key thing here right the body is the
01:01 - entity in the world that moves around
01:03 - but in order for the body to exist it's
01:05 - got to be in a world so the world is
01:07 - something we're going to set up when we
01:08 - begin our processing sketch that's item
01:11 - number one so item number two is what we
01:13 - spent all this time going through so we
01:16 - need to create bodies create a body and
01:20 - where we're gonna do that is in our own
01:23 - objects constructor so our object is
01:26 - called a box in our objects constructor
01:29 - the box objects constructor so every
01:31 - time we make our own object in that
01:34 - objects instructor says oh you're making
01:35 - an object I got to make a box who do you
01:37 - want to go along with it so every one of
01:38 - our objects will have a box of the
01:39 - object that boxes the body that will go
01:41 - along with it once we've done that we're
01:44 - pretty far along but what we actually
01:47 - need to do remember it's where the
01:48 - designers we're gonna draw everything
01:50 - set the color set the shapes load images
01:52 - design our world what we need to do is
01:55 - ask box 2d where we need to rewrite our
01:59 - display method so we need to ask box 2d
02:03 - where where is the body and where we're
02:11 - going to do that is in the boxes
02:13 - display function so up here we have this
02:19 - idea of in the main program we're
02:21 - creating a box 2d world in our objects
02:23 - were creating body objects and then when
02:25 - it comes time to draw that object we're
02:27 - gonna ask that about that body object
02:29 - where are you so I can draw you in the
02:31 - right place okay so these are the three
02:33 - things we need to add to that processing
02:34 - sketch so what I've done there's a lot
02:36 - of code that we're gonna have to sort of
02:38 - deal with the fact that how could you
02:39 - ever possibly like remember all the code
02:41 - that you need for each one of these
02:42 - steps and there's this body type dot
02:44 - this dot this and this blah blah blah so
02:47 - we're gonna have to sort of piece this
02:49 - together it's going to be a little bit
02:51 - challenging but what I have over here is
02:52 - I have a version of this exercise sort
02:56 - of semi solved so it has maybe 60 to 75%
02:59 - of the code already written so we can
03:01 - look through some of that and some of it
03:02 - I'm gonna add as we go here manually and
03:05 - try to see if I can remember it so so
03:07 - one thing that our first note is related
03:09 - to item number one which is set up the
03:11 - world in our main program is we need to
03:13 - import all the library so there's
03:16 - there's lots of stuff we're importing
03:17 - we're importing a whole lot of classes
03:19 - from j-pop Sudi we're reporting some
03:21 - stuff from p back city a little helper
03:23 - class to provide us with some
03:24 - functionality so there's a lot of stuff
03:26 - that's being imported here and we're
03:28 - later on hopefully at some point in this
03:29 - video I'll kind of go and show you where
03:30 - you can kind of look up all the
03:31 - documentation for this stuff
03:33 - but one of the things we get from the
03:35 - peabody library is we can make a p box2d
03:37 - object and i'm going to call it box 2d
03:39 - and this we make a new p-box to the
03:44 - object and this is where we create our
03:48 - world so the p box to the object is kind
03:51 - of the main object you can make it a
03:53 - sort of a global variable for your
03:54 - entire sketch and it is what is holding
03:57 - onto the box 2d world so all of the
03:59 - information that's about the world
04:01 - doesn't have a you know what is it is
04:03 - what is the gravity force in the world
04:04 - or other parameters of the world that
04:06 - you can look at setting but we're just
04:08 - creating a world with default settings
04:10 - so we need in processing setup to create
04:13 - the P box through the object and call
04:14 - box we create world the other thing that
04:17 - I should look at point out that we need
04:18 - to do in draw is we need to say box 2d
04:22 - dot step so one remember box
04:26 - Toodee if you remember I think we
04:28 - covered this it's a library that thinks
04:30 - in terms of real world units seconds and
04:33 - time so one thing we have to do is every
04:35 - time through draw we have a new frame of
04:37 - animation we're going to display on the
04:39 - screen we have to tell box2d
04:40 - step to the next moment in time so box2d
04:43 - step to the moment next moment in time
04:44 - we're gonna draw everything step to the
04:46 - next moment of time we're going to draw
04:47 - everything step to the next moment of
04:48 - time we're gonna draw everything what's
04:50 - interesting about this is you could
04:51 - pause you start and stop the physics by
04:54 - you know deciding when you're gonna call
04:56 - step but here we basically were just
04:58 - operating under this methodology of
04:59 - every time through draw is one step
05:02 - through box2d time so this we're done
05:04 - this is I believe until I realized I
05:06 - forgot something this is everything we
05:08 - need to do to add the box2d world into
05:11 - the main tab so the next stuff that we
05:15 - need to look at is creating the body
05:18 - which we want to do in the constructor
05:19 - of the box object so the moment we
05:21 - create a box object we want to create a
05:23 - body to go along with it with all these
05:25 - steps by definition position type body
05:27 - shape fixture and put it all together by
05:30 - fixture takes the shape and attaches it
05:32 - to the body so let's look most of this
05:33 - I've typed in already then we're just
05:34 - gonna I'm gonna kind of scan through it
05:36 - I think it's going to be up to you to
05:37 - kind of download the examples look
05:39 - through them see what the questions are
05:41 - but I don't I think it's not useful for
05:43 - me to sit here and type out every single
05:44 - one of these lines of code I'm telling
05:46 - myself this because I'm not entirely
05:47 - sure but I've left a few mistakes out so
05:49 - we'll see watch what I'm about to show
05:51 - you see if you can figure out what
05:52 - there's a fundamental sort of horrific
05:54 - flaw in this code that we'll fix but
05:56 - first we can see where step one define
05:59 - the body so we make a body definition
06:01 - object the type the if the type is
06:03 - dynamic you can see here this is where
06:05 - we might set a static or a kinematic one
06:07 - but here we're making a dynamic body and
06:10 - then the other thing we need to set
06:13 - about a body is its initial position
06:14 - where is its initial position its
06:17 - initial position is X Y do you notice
06:19 - anything wrong here think about it its
06:22 - initial position is X Y what is X Y X Y
06:26 - are the arguments I passed in here Mouse
06:29 - X mouse Y what are those coordinates in
06:31 - those coordinates are in pixels the
06:33 - mouse location in pixels remember the
06:35 - Boxee D coordinate system is completely
06:37 - different than the
06:40 - then our pixel coordinate system so this
06:42 - is a moment where you have to stop pause
06:44 - and convert the pixel coordinates to
06:47 - world coordinates boxer D world
06:49 - coordinates so I'm just going to show
06:50 - you that instead of passing an XY
06:53 - directly you can use one of the helper
06:55 - functions we covered coordinate pixel to
06:58 - world XY so this is where before you set
07:02 - that position think to yourself am i
07:03 - setting a world position and am i
07:05 - thinking in pixels I've got to convert
07:07 - it okay so that's really important so
07:09 - that is step one create the body
07:12 - definition step two is create the body
07:14 - remember we said this was going to be
07:15 - really simple well it's one line of code
07:17 - create the body from that body
07:19 - definition and store it in the body
07:20 - reference easy-peasy I can't believe I
07:22 - just said using peasy okay the next
07:24 - thing when you do is create a shape and
07:25 - we're gonna use polygon shape as a box
07:28 - and we can see here we are creating a
07:32 - polygon shape and we're making it a box
07:34 - with a width and a height again the same
07:37 - problem is here right is that width and
07:39 - what is that height we're thinking in
07:41 - pixels we've set them up to be 16 width
07:43 - of 16 and a height of 16 those values
07:46 - are in pixels we need those values to be
07:47 - in boxer D world units so we're not
07:50 - converting a coordinate where we're
07:52 - converting we're scaling a scale or
07:53 - value a single number so what we need to
07:56 - do is say this float I'm going to just
07:59 - make a new variable box2d width equals
08:01 - box 2d scaler pixels to world W and then
08:09 - I'm gonna make one for height scalar
08:11 - pixels to world height and you can see
08:13 - and now we need to set the actual
08:18 - polygons width and height with the
08:20 - converted values right we need to scale
08:23 - the width scale the height you've
08:26 - forgotten one other thing though so this
08:27 - is pretty close we've almost got it
08:29 - right we got the pixels we converted it
08:31 - to world and we set it but we missed one
08:33 - little tiny thing which I will show you
08:35 - which is that if you recall kind of run
08:38 - out of space here but then use this
08:39 - little patch here we think of a
08:42 - rectangle when we draw one as this is
08:44 - its width and this is its height but in
08:47 - box 2d shapes box shapes are thought of
08:50 - as the width as the distance from the
08:52 - center
08:53 - and the distance from the center is the
08:56 - height so what we actually want to
08:58 - convert we actually want to say that
09:02 - box2d width is the that we want to
09:05 - convert the width divided by two and the
09:06 - height divided by two to set the box up
09:09 - correctly okay so this is really
09:11 - important step one to find the body step
09:13 - to create the body step three create the
09:15 - shape all the while we've got to be
09:16 - thinking do we need to convert pixels to
09:18 - world then we've got a step four if you
09:23 - remember we're almost to the end step
09:24 - four make the fixture set these
09:26 - parameters and the end we're gonna put
09:28 - it all together with step five so here
09:30 - we are creating the fixture of fixture
09:32 - definition now this is a really really
09:34 - key line of code right here is a really
09:35 - key line of code because notice how
09:38 - we're saying this that fixture shape is
09:40 - PS what is PS it's the polygon shape so
09:43 - we need to make sure when we create the
09:44 - fixture that we're assigning it a shape
09:46 - because the fixture is what's gonna get
09:48 - attached to that body if fixture is like
09:49 - the glue between the shape and the body
09:51 - and then we can see here are some
09:53 - parameters so you might be asking
09:54 - yourself well what values should I use
09:56 - for density what value should use for
09:57 - friction restitution it's a good
10:00 - question there are kind of if you look
10:02 - through the box2d manual give you kind
10:03 - of suggested ranges for these I believe
10:05 - restitution between zero and one and
10:06 - friction as well density you don't want
10:09 - a density of zero that doesn't make any
10:10 - sense so but mostly my advice to you
10:14 - when dealing with picking values for
10:16 - these is try different values and see
10:18 - how it behaves kind of use your
10:19 - intuition try different things if you
10:21 - want to get fancy build yourself a
10:22 - little interface to tweak all the values
10:24 - see how it works but it's important to
10:26 - realize that also that this is all
10:27 - hard-coded right here it doesn't need to
10:29 - be hard-coded these can be variables you
10:31 - can make objects with different
10:32 - frictions different restitutions there's
10:34 - a lot of power and how you can control
10:36 - the physics and then the last step here
10:38 - we can see is this is putting it all
10:39 - together body dot create fixture with
10:42 - the fixture definition so that's saying
10:44 - hey there's a shape there's a fixture
10:46 - there's a body put it all together so
10:47 - once we've done all this we've done it
10:49 - we now have you can't fit it all in one
10:53 - little screen here but we now have all
10:55 - the steps so we've made that box of the
10:57 - body in our box object and we could run
10:59 - oh I missed something
11:01 - coordinate pixels to world maybe there
11:04 - we go we've done it and now
11:06 - click the mouse no physics why is there
11:09 - no physics the reason there's no physics
11:11 - is look at this we're just still drawing
11:13 - the rectangle at that Expo high location
11:15 - we need to that XY location remember was
11:18 - the original location of the rectangle
11:20 - that's why it's sitting there right
11:21 - there we need to go and ask this is our
11:24 - this is our we've done one and we've
11:25 - done two this is the third one we need
11:28 - to say hey boxer D where is the body I
11:31 - need to draw it at that location so
11:33 - we're almost done with this it's very
11:34 - clean once we had this last step into
11:36 - the display method we're going to be
11:37 - good to go so if we come over here what
11:40 - we need to do is Bach City will give us
11:42 - a vector telling us where that object is
11:44 - and it would give that to us in world
11:47 - coordinates which we'd have to convert
11:48 - to pixel coordinates but the the box to
11:52 - the object that we're using has a little
11:54 - helper function and it's called get body
11:56 - pixel coordinate we pass in the body and
12:00 - I can call this position perhaps so this
12:03 - is us saying hey where is the bodies
12:05 - pixel location give it to me in a vector
12:07 - and then I can translate to that
12:11 - object's location so instead of drawing
12:13 - at the original XY where the object
12:15 - started every time we display it we want
12:17 - to say hey where are you currently so
12:19 - I'm gonna run this again and we're gonna
12:21 - see hey look stuff is falling and it's
12:23 - even kind of you can see it's separating
12:24 - like it's colliding with each other
12:26 - we're almost there we missed one thing
12:27 - in addition to the location we want to
12:30 - know the angle what is the current angle
12:32 - of that object because boxer D will
12:34 - handle collisions with angular motion
12:35 - and all this wonderful stuff and the way
12:37 - we get that is float a equals body dot
12:41 - get angle and then once we've translated
12:44 - we can rotate by that angle now let's
12:47 - run this and now I don't know use your
12:49 - powers of detection and does it look
12:53 - right to you I don't know if you can
12:54 - tell it's very small it's actually wrong
12:56 - so we've done everything right but we
12:58 - missed one little detail if you remember
13:00 - okay think about this for a second the
13:02 - processing window what is the y-axis
13:05 - point the y-axis points down right pixel
13:08 - zeroes at the top higher numbers pixels
13:10 - go down a box of the world is flipped
13:12 - the y-axis points up in a box 2d world
13:15 - this means rotation is also flipped so
13:17 - what we actually need to do is rotate
13:20 - i- eh and once we do that and i'm just
13:23 - gonna move this over here once we do
13:26 - that we can see here look there it is
13:29 - there's our box to the world we've got
13:31 - everything in there so I know this well
13:34 - I don't know if this really worked very
13:36 - well to kind of like kind of race
13:37 - through a lot of this stuff I I guess
13:40 - I'm there's a couple things to mention
13:41 - here right I kind of raced through all
13:43 - this code what I think is important is
13:45 - to understand these steps and understand
13:47 - where these steps go so hopefully you
13:49 - got that from this video right when we
13:51 - create our box object we create the body
13:53 - object when we draw our box object we
13:55 - ask where the body object is so that's
13:57 - the key thing to take away where do you
14:00 - find out like where what if I do circle
14:02 - shape and what if I do change shape and
14:04 - how do I figure out what this function
14:06 - does or this parameter does so there's
14:07 - number one there's more examples I have
14:09 - more examples and I'm going to go
14:10 - through some more examples so that will
14:12 - help you number two you could look at
14:14 - the nature of code book and it has more
14:16 - details than all the code is there so
14:17 - you can kind of read through it but
14:19 - number three one thing you might want to
14:21 - just take if you want to go deeper into
14:23 - box2d one thing that you might consider
14:25 - doing which I have here hopefully is
14:29 - that if you download J boxer D from the
14:31 - J box2d website this is hard for you to
14:33 - see you can actually it will have the
14:36 - the Javadoc API in there and if what I'm
14:39 - looking for is just this index.html file
14:41 - which is here in the API Doc's folder
14:43 - and if I open that up I'm going to zoom
14:48 - back out you can see look every class
14:50 - like if you if we wanted to find out the
14:53 - functions for a circle shape it's right
14:56 - here and all the documentation is here
14:57 - so all of these functions for what what
15:00 - we can do with the circle shape this is
15:02 - where you might want to look so you know
15:03 - tread carefully it's Java documentation
15:05 - you might you may or may not be used to
15:07 - that but now that we have the sort of
15:09 - basic process for how we add box2d into
15:12 - a sketch you know hopefully this made
15:14 - sense we're going to be able to go
15:16 - through more and more examples we're
15:17 - gonna get to look at a change shape
15:18 - we're to look at joints we're gonna look
15:20 - at how do we apply a force to an object
15:22 - and also how do we actually make
15:23 - something happen when two objects
15:25 - collide so I would say that's really
15:27 - like one two three four or five more
15:29 - videos that hopefully we'll get to at
15:30 - some point all this information you can
15:32 - find in the nature
15:33 - code book as well okay so thank you and
15:36 - I'm going to click a button