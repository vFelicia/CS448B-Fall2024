00:00 - Okay, here we are again. This now begins a new section of videos all about...
00:07 - Object-Oriented programming. Is my microphone on? It is on we are recording. Okay great.
00:14 - So here's the thing we have been learning all this stuff without programming and it's been great.
00:19 - But now comes the time where we need to start to look at tools and ways of organizing our code to
00:27 - make it more...
00:29 - scalable for the future. You know, we just rewrote some
00:32 - variables up at the top and put some stuff and setup() and put some stuff and draw() and it's getting bigger and bigger and bigger.
00:36 - We need to start being able say: "Hey,
00:39 - here's the part of the code that does this. Here's the part of the code that does this. I want to set this aside over here.
00:44 - Set this aside over here. Start to organize our code with two key principles.
00:48 - Principle number one is
00:50 - essentially what I've just been talking about right now.
00:53 - Modularity.
00:54 - We need to make our programs more
00:56 - modular we need to understand them in sections
00:59 - and
01:00 - so that we can come back to them later and see what part is doing what. In addition to modularity we need to think about:
01:06 - Reusability.
01:08 - Maybe that's one word. Maybe I don't need that hyphen there. Reusability.
01:12 - We just wrote all this code which figured out how to make this ball fly on the screen in this really cool pattern... well,
01:19 - we want to be able to reuse that code again later
01:22 - if you want hundred of those balls in the same program or if we later when we're writing another program in Processing we want to take
01:28 - something we did before and reuse it again. Okay, so that's what we want to do. So...
01:34 - Let's think about um...
01:36 - What this really means, okay? Energy is coming up here. This next videos is going to be much better
01:40 - This is just a little intro and you can actually skip the next one if you want
01:43 - but if you want a little bit more thinking on what I'm going to do right now in the next minute or two before we
01:47 - move on to the nuts and bolts here is just look at the picture where we want to be at the very
01:51 - end of the next five or six videos. Over here... We have a simple bouncing ball sketch
01:57 - This is one of the basic things we've written in Processing.
02:00 - We have an x and y variable we have an x speed, a y speed, the ball is bouncing around it
02:04 - increments by its speed every frame. It's drawn as a circle.
02:07 - We check if it's in the edge down here and we send the speed in the opposite direction.
02:12 - This is a nice, lovely program, but again. It's got some variables up here...
02:17 - Just one little function in setup() and a whole bunch of stuff happening in draw().
02:20 - What if we could instead write this very same program like this?
02:25 - What if I could say, I'm going to have a ball object called B
02:30 - and
02:32 - in setup()
02:35 - I'm going to say: "Hey, b is a new ball object." And in draw()
02:45 - I'm going to say things like: "You know, b should move about the screen." That ball B
02:51 - should move about the screen and that ball B, it should...
02:55 - bounce off the edge, and that ball b, it should also be
03:02 - displayed.
03:04 - This is where we're going towards. This is where we want to be. Look at this. It's so beautiful.
03:09 - It's like, look at all this gobbledygook stuff, and what's that x for?
03:12 - What's that y for? This program is so nice and relaxing. We have a ball.
03:17 - We're going to
03:18 - start that, make that ball in setup() and we're going to move that ball, bounce that ball, display that ball. We're going to ask it
03:24 - to do things. This is more readable. Now, this is not making our program more efficient, for Processing from the computer
03:31 - no one really cares about it from the computer standpoint, but we the human thing right here can feel more comfortable with this.
03:37 - It's modular we have sections. We have the code. We have a function that's being called to move the ball.
03:44 - We have a function that's being called to bounce the ball.
03:46 - We have a function we call to display the ball. These are modular pieces in our program now.
03:51 - We have this idea of reusability. We just have this ball object if I wanted to add another one
03:57 - I wouldn't need all these new variables. I wouldn't need another x, another y, another xspeed, another yspeed.
04:02 - I could just maybe add another ball object. I could say: "Hey...
04:06 - I want to have two of them. b2 is my second ball object.
04:10 - So this is where we're going towards we want to be able to start taking all this stuff that we're writing...
04:16 - to all this stuff is conceptually centered around the idea of this ball bouncing around the screen. Can we take all this and
04:23 - package it up into this mini
04:25 - program in the way. This mini program that's going to live somewhere else. That's going to be called a ball class.
04:31 - We're going to write something called class ball.
04:33 - There's almost as if this is like a little mini program that has everything embedded inside it to
04:39 - umm... to have a
04:41 - bouncing ball. It's got the variables that a bouncing ball needs. It's got the functionality that a bouncing ball needs.
04:46 - This is where we're going. If we can write this program that it's this sort of modular piece.
04:51 - It's all the stuff about the bouncing ball, and we can reuse it. We could make balls in this program...
04:56 - we could make balls in another program balls everywhere. Yay, ok, so
05:00 - this is where we're going towards. Before we can get all the way to this point... You know, there's lots to here.
05:05 - What's this syntax? This dot. You know, what does this mean that we have a variable of
05:09 - type ball, with a capital "B" and how are we going to write this class in the first place?
05:14 - There's lots of details we need to fill in there. Before we can get to any of these details what we need to understand first is a
05:21 - little bit about writing our own functions. So this... the next video is going to start with saying: "Hmm,
05:28 - what does it mean to call a function in Processing?" We're doing this all the time, line, rect, background, fill, etc...
05:34 - What does it mean to write our own function?
05:37 - So that's where we're going to start. Once we get through functions and learning how to break our program up into separate functions.
05:42 - Then we'll start to build, put those functions together, wrap them into an object.
05:46 - And that's where we're going. It's going to be very exciting. It's going to allow us to have lovely
05:51 - relaxing, soothing code. Just like this and it's going to be great.
05:54 - I forgot to turn the timer on so I actually have no idea how long this video was but
05:58 - this is where I'm going to stop and we're the next video.