00:05 - if you've been watching these videos
00:08 - you've been uh you you're you are aware
00:10 - of object-oriented programming
00:11 - everything we've been doing has really
00:13 - been kind of built on top of
00:15 - object-oriented programming we write
00:17 - classes that are templates to make these
00:19 - objects that move around the screen the
00:21 - objects have data and functionality that
00:24 - manage their physics and how they're
00:25 - drawn on the screen and we've been doing
00:27 - this over and over again this is and and
00:29 - the principle we've been kind of living
00:30 - by is called encapsulation we are
00:32 - encapsulating all the data and
00:34 - functionality into this class and we're
00:36 - making objects from it this has been
00:38 - great I hope you've enjoyed it I've been
00:40 - enjoying it but there is a missing piece
00:42 - here there is another part of
00:43 - object-oriented programming that we
00:45 - haven't explored and I think it's worth
00:47 - exploring in
00:48 - this thing that we're doing whatever it
00:51 - may be in in making these videos or
00:53 - watching these videos or whatever it is
00:54 - we're doing and that is this idea of
00:56 - inheritance and polymorphism so so let's
00:58 - think about this for a second second um
01:02 - okay so right behind me over here we
01:04 - have
01:05 - this Vana White over here we have this
01:07 - particle system right we have this
01:09 - particle system and it has this kind of
01:11 - generic particle we've made this generic
01:13 - particle class I could kind of Click
01:15 - over here we could see it click come on
01:17 - and we could see sorry um we have this
01:20 - generic particle class has location
01:22 - velocity acceleration it's drawn as a
01:24 - circle what if however we wanted to make
01:28 - this particle system full of all
01:30 - different kinds of particles star
01:32 - particles and rainbow particles and
01:35 - twirly particles and blue particles
01:38 - that's they're all they look different
01:40 - they act different but they're all
01:41 - basically the same they're all in the
01:43 - same system they all have a location
01:45 - velocity and acceleration they all fall
01:46 - with gravity how could we do this well
01:50 - there's a bunch of different ways on the
01:51 - one hand we could just start adding lots
01:53 - more variables here and kind of have
01:55 - booleans like to keep track of which
01:57 - kind of particle should be drawn this
01:58 - way and do this thing on the other hand
02:01 - we could say let's make some more
02:02 - classes let's for example make a star
02:04 - particle class and and if that was our
02:06 - Instinct we would go over to our program
02:08 - and we would say hello program and we
02:11 - would go over here and we'd say new tab
02:13 - and we'd make type our new tab and we
02:14 - call it star particle ah star particle
02:17 - Tab and we say ah my star particle it's
02:20 - really basically the same thing as my
02:22 - particle so let me go over here to my
02:24 - particle Tab and I'm just going to
02:25 - select all and hit copy and then I'm
02:27 - going to go over here to Star particle
02:29 - and I'm going to hit paste
02:30 - and I'm going to rename this star
02:31 - particle and type star particle here and
02:34 - then I'm going to start modifying this
02:35 - code so let me just say something here
02:38 - anytime that you copy paste huge amounts
02:42 - of code from one sectionary program to
02:44 - another you should be suspicious and you
02:46 - should ask yourself if there if could
02:48 - there be a better way is there another
02:50 - organ is there somebody else has
02:51 - somebody else thought encountered this
02:53 - situation before and is there a better
02:55 - way that I could organize my code and
02:57 - the answer to this is yes in this
02:59 - scenario that we are talking ourselves
03:01 - through where we're going to make a new
03:02 - kind of particle that's essentially the
03:04 - same with some slight modifications this
03:06 - is where inheritance comes in we want to
03:09 - say that our star particle inherits
03:11 - everything that a particle ever wanted
03:13 - to be in its life with a few slight
03:15 - changes that we're going to make to it
03:17 - and let's look at so so before we can go
03:19 - and add this to this particular program
03:21 - let's kind of map this out how it works
03:23 - um over here o over over there I'll be
03:26 - right
03:27 - back okay we're back over here now okay
03:30 - so let's uh forget about the particle
03:32 - system for a second and let's just think
03:33 - about the animal kingdom and let's say
03:36 - we are writing a class called
03:41 - mmal uh class mammal curly bracket Clos
03:45 - curly bracket now
03:46 - mammals uh they have generally have fur
03:49 - they give live birth to their young uh
03:52 - again I have no actual knowledge of
03:54 - paleontology or science just you know
03:56 - things that I read in children's books
03:58 - but um but but we we could start making
04:01 - something up we could say okay well this
04:02 - is a program where we're simulating a
04:03 - mammal and one of the things we're going
04:05 - to have is a color which will be its fur
04:08 - color and then another thing we might
04:10 - maybe we'll use a Boolean to describe
04:12 - its
04:13 - gender uh you know true for female false
04:16 - for male something like that and and
04:18 - we're going to write some functions you
04:19 - know what do mammals do we need to have
04:21 - a function that we can call when it's
04:22 - time for the mammal to go to sleep it's
04:25 - going to have some code in there we need
04:26 - to have a function when the it's time
04:28 - for the mammal to eat and we'll put some
04:30 - code in there so you know we've rating
04:32 - this class and we do this all the time
04:33 - with our mover our particle but let's
04:36 - say now we're we we we have this generic
04:40 - mammal and now it's time pick a mammal
04:42 - out of a hat uh cat I can't think of
04:45 - anything better the internet loves cats
04:47 - so um we're gonna maybe we should make
04:49 - our class a kitten so we just make our
04:51 - class a kitten it's a little cuter so
04:52 - we're going to write a kitten
04:55 - Class A Class called
04:58 - kitten
05:00 - and a kitten is also going to have a fur
05:02 - color and a kitten is also going to have
05:03 - a gender and a kitten's going to eat and
05:05 - a kitten's going to sleep and maybe a
05:07 - kitten's going to you know purr and meow
05:09 - and have other things that it does
05:11 - too so how do how do we deal with this
05:14 - we could copy paste all this code so we
05:18 - start from the base mammal class or we
05:20 - could use the principle of inheritance
05:22 - and the way that we're going to use the
05:23 - principle of inheritance is with some
05:26 - new code that you well if you're
05:27 - watching this video hopefully you
05:28 - haven't seen it before you have seen it
05:30 - before turn it off and go you know watch
05:32 - Star Wars or something okay class kitten
05:37 - extends
05:41 - mammo this is pretty important I hope
05:43 - it's not cut off extends mammal this is
05:46 - the new syntax for inheritance what
05:49 - we're saying is kitten is a child class
05:52 - of mammal mammal is a parent class of
05:54 - kitten we also use the words super class
05:58 - subclass um but but but extends is the
06:01 - key word we write in our code to
06:02 - indicate that kitten extends mammal and
06:04 - what this means is that kitten inherits
06:07 - everything from mammal it's as if we
06:09 - wrote all the variables from mammal over
06:12 - here we don't have to type them or write
06:14 - them in they are assumed now it's as if
06:18 - we wrote The Identical sleep function
06:20 - it's as if we wrote The Identical eat
06:22 - function over here so these are all the
06:24 - things that happen with inheritance
06:26 - automatically boom we're done we have
06:29 - basically a kitten class is
06:31 - done so we have to ask ourselves why are
06:34 - we doing this in the first place we're
06:35 - doing this not because we want kitten to
06:37 - be an exact replica of a mammal we want
06:40 - kitten to inherit everything that a
06:42 - mammal has but also have some of its own
06:44 - things so for example uh we might add so
06:48 - so I want to make a list I really wish
06:50 - this whiteboard was bigger so someday
06:52 - we're gonna have some kind of sliding
06:54 - door whiteboard system but um what I'm
06:57 - going to do is I'm going to just carve
06:59 - carve out a little space over here in
07:01 - the
07:03 - corner and I'm going to make a list of
07:06 - the things that you can do with
07:08 - inheritance so number
07:10 - one is you can you inherit
07:15 - everything so we now we see that so a
07:17 - kitten has fur color gender it has a
07:19 - function called Sleep it has a function
07:20 - called eat if we remember that's what
07:22 - these functions were called sleep and
07:25 - eat okay what's another thing that we
07:27 - can
07:28 - do we can add data or
07:35 - functionality right so we can add data
07:38 - or functionality the kitten might have a
07:41 - an
07:42 - integer which is the number of whiskers
07:45 - for
07:46 - example so this is not something that
07:48 - all mammals have I don't think I I'm a
07:50 - mammal right I don't have whiskers not
07:52 - really uh anyway so um but kittens have
07:55 - whiskers so we can add variables that
07:58 - are only for the
08:00 - kitten um we can also add functions so
08:03 - maybe we might
08:04 - add a function called
08:08 - meow and meow is something that only
08:11 - kittens do not all mammals do so we're
08:13 - that's a piece of function we're going
08:14 - to add to the kitten class great so we
08:16 - can one of the things we can do with
08:18 - inheritance is we can inherit everything
08:19 - and then add to it the other thing we
08:22 - can do which uh we'll use the term is we
08:24 - can override
08:27 - functions what do we do you mean by
08:29 - override functions well it might be that
08:32 - okay so we our mammal class has a
08:35 - function called sleep all mammals sleep
08:38 - cats and dogs and uh
08:42 - porcupines and I don't know lots of
08:44 - other uh interesting mammals that I wish
08:47 - I could think of right now they all
08:48 - sleep so does a cat sleep yes a cat Does
08:54 - the Kitten sleeps but what if a kitten
08:56 - sleeps in its own special way that's
08:58 - different than from how all that the the
09:01 - the sort of the it's parent class sleep
09:02 - so we can override a function if I write
09:05 - the function sleep
09:08 - here what this does is it says well
09:12 - instead of when when I when I call
09:14 - kitten. sleep instead of doing the the
09:17 - functionality that was inherited um
09:19 - execute the functionality that's now in
09:21 - my child class that's now in my kitten
09:23 - class so you can override you can
09:25 - inherit functions but you can always
09:27 - rewrite it in the child class to
09:29 - override that functionality so that's
09:31 - one of the other things we can do with
09:33 - inheritance the fourth thing which I'm
09:35 - sort of making up I guess I think I
09:38 - might be making all of this up because I
09:40 - just live in a crazy world with green
09:42 - screens and lights and whiteboards by
09:44 - myself but uh this um this thing that
09:47 - you can do I I'm going to call is you
09:49 - can kind of
09:51 - inherit you could just I don't know what
09:53 - to call this you can you can override
09:55 - plus inherit you can modify you can kind
09:57 - of do both you can you can you can
10:01 - um I'm just going to write the word
10:04 - super this this fourth thing you can do
10:06 - is really super what it is boy do I
10:09 - botch this is that you could say if you
10:11 - wanted to I want to um modify the sleep
10:14 - function but also call what the what the
10:17 - what the um what happens in the parent
10:19 - sleep function I can fix this problem
10:22 - that we've encountered let's be a little
10:23 - more specific I'm going to
10:26 - write the mammal sleep class
10:29 - and the mammal sleep class sorry the
10:32 - mammal sleep
10:33 - function just has a print statement in
10:36 - it which says Z right you print a bunch
10:40 - of Z's that's what it means for a mammal
10:42 - to sleep you you bunch of Z's get
10:44 - printed out on the screen now I'm going
10:47 - to override
10:49 - it and I'm going to say sleep no no no a
10:53 - kitten does not Z when it sleeps what a
10:56 - kitten does is it
11:00 - says
11:01 - purr okay so this is overriding mammals
11:05 - Z kittens per boy I'm really turning
11:07 - into a crazy person so this is number
11:09 - three overriding but if we want we could
11:12 - both inherent and override so we could
11:14 - sort of inherit the function but add
11:16 - something to it and the way that we do
11:18 - that is by saying super hope I'm getting
11:22 - this right dos sleep so what super
11:26 - doleep does is it allows you call what
11:30 - it does is it calls the functionality
11:32 - that's in the super class the parent
11:35 - class so now for a kitten to sleep a
11:37 - kitten goes
11:39 - Pur per so without super do sleep it's
11:43 - just Pur without putting this in it all
11:45 - it's just we inherit this Z now we can
11:47 - do both if we wanted to we can always
11:49 - call the parent sleep function as well
11:52 - by using the keyword super okay so uh um
11:56 - I realize that this is a lot of
11:57 - information here and you probably going
11:59 - to need to practice this and you're
12:00 - going to need a
12:01 - scenario for which it makes sense to do
12:04 - this and I was I was promised myself
12:06 - yesterday that I was going to make these
12:07 - videos shorter and this one is already
12:09 - about 12 minutes long but eventually the
12:12 - video okay I had a little mishap but I
12:15 - just want to wrap up this video so what
12:17 - we've done in this video here is we've
12:19 - kind of mapped out what it means to do
12:21 - to have inheritance so um in the next
12:24 - video what we're actually going to go do
12:25 - is start we're going to we're going to
12:27 - look at inheriting the partic class and
12:29 - making a new particle object that
12:31 - inherits everything but adds a little
12:33 - bit of functionality to it so we're
12:34 - going to see how to do that in the next
12:36 - video what I would suggest to you as an
12:38 - exercise before you watch it is try to
12:39 - do that yourself Could you actually make
12:42 - a star particle which is everything that
12:44 - a particle was but draws itself as a
12:47 - star maybe the star spins or something
12:49 - like that see if you can do that
12:50 - yourself and um in the next video we're
12:53 - going to we will essentially uh that's
12:55 - exactly what we're going to do so um
12:59 - that's it for this
13:05 - video