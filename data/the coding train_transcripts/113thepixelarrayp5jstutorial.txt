00:00 - hello today right now this very moment
00:03 - I'm going to talk about the pixel array
00:05 - pixel array in p5.js which is really
00:09 - really I'm talking about the pixel array
00:10 - in html5 canvas meeting there is a
00:13 - canvas in a browser
00:15 - I am programming what's going to be on
00:16 - the canvas in JavaScript and I want to
00:17 - know how do I access each individual
00:20 - pixel of the canvas and how do I
00:22 - manipulate and change the color of each
00:23 - individual pixel for whatever purposes
00:26 - my mind can imagine and this will lead
00:28 - to how to get live images from a camera
00:33 - load images from some API or from the
00:35 - file and manipulate the pixels of some
00:37 - other image from some other source so
00:39 - that I'll get to in the next video but
00:40 - right now I just want to look at how
00:41 - does the pixel array work so let's come
00:44 - over here to the whiteboard for a second
00:46 - and kind of discuss what's that play
00:47 - here so here is what I'm calling the
00:52 - canvas so canvas image whatever you want
00:58 - to think about it APICS an image on a
01:00 - computer is a rectangular thing which is
01:03 - essentially a grid of pixels so we can
01:06 - make sort of simplify think of a
01:09 - simplified low resolution one two three
01:11 - four five six like here this has a width
01:14 - of six one two three four five and a
01:17 - height of five so I now have an image
01:20 - that's six by five meaning there are 30
01:23 - pixels total or six times five I hope I
01:28 - did the math right okay so in order to
01:31 - access these pick now p5 has functions
01:35 - called get and set and these functions
01:40 - are useful get or set you can pass an x
01:43 - and a y the numbers being starting with
01:45 - zero so the x values go from 0 1 2 3 4 5
01:48 - or 0 1 2 3 4 and you could say get pixel
01:52 - 4 comma 2 which would be this pixel
01:56 - right over here so you can use those
01:59 - functions and I might in some of the
02:00 - examples but I want to look at a
02:01 - different way of accessing the pixels
02:03 - which is arguably going to least be the
02:06 - speediest and allow for the most
02:07 - possibilities I don't know if that's
02:09 - entirely true but let's just take that
02:11 - for now so and so what
02:13 - that is is what I'm referring to is
02:15 - something called the pixels array so
02:19 - behind the scenes in p5 there's a very
02:22 - long array with lots of numbers in it
02:26 - those numbers correspond to all of the
02:29 - colors in this canvas so the question
02:33 - that we have to figure out is if I want
02:35 - to change the color for this particular
02:38 - pixel how do I find where in this array
02:43 - to do that and so to do that we need to
02:46 - do undo a little bit of math because
02:48 - this is just a linear list one
02:51 - dimensional list array and but the image
02:55 - we'll think of as this two-dimensional
02:56 - thing so how do we go back and forth
02:58 - between the two of them now this is not
03:00 - some unique problem it happens in any
03:02 - computer graphics environment but there
03:04 - is something different at least if
03:05 - you've used processing before just to
03:07 - take that as an example the way that the
03:09 - pixels work in p5.js
03:11 - html5 canvas is quite different than in
03:14 - processing that's quite similar but
03:15 - there's a big sort of major fundamental
03:16 - difference and you will see that as I go
03:18 - through this so let's look at this now
03:21 - so let's just start let me start by
03:24 - telling you that the pixels in the array
03:27 - if this is the array right I'm going to
03:31 - give myself a bunch of spots here the
03:35 - pixels start like this pixel the very
03:37 - first thing index 0 in the array refers
03:40 - to this particular pixel here but it
03:43 - doesn't refer to the entire pixel it
03:45 - just refers to the red value of that
03:47 - pixel some number between 0 and 255
03:50 - the second element index number 1 in the
03:54 - array refers to the green value for that
03:57 - particular pixel the 3rd element or
03:59 - index number 2 refers to the blue value
04:02 - and the 4th element or index number 3
04:04 - refers to the alpha value so it takes 4
04:08 - spots of the array for one pixel now
04:12 - remember I said there are 60 pixels that
04:14 - means how long is this array 6 x for the
04:19 - length of the array is 240 so for any
04:25 - image that is 6 by 4 that has
04:27 - sorry 6x5 that has 60 pixels the array
04:32 - itself has four times that many spots
04:34 - because there's a red green blue and
04:36 - alpha value for each spot meaning the
04:38 - length of the array is 240 okay
04:40 - so that we've established now still so
04:43 - you could think about this is that this
04:47 - pixel starts at spot zero this pixel
04:51 - starts at spot in my I should stop
04:53 - saying spot I should say index starts at
04:55 - index for this one in index eight this
04:58 - one index twelve this one index sixteen
05:00 - so this is how each each pixels color
05:04 - values in the array are for set are
05:06 - separated by four index values so that's
05:09 - the first thing to establish now let's
05:12 - not think about that for a second and
05:14 - let's just think so that that we've
05:18 - established now I'm going to erase this
05:19 - and back up again for a second let's say
05:22 - I want to just though number the pixels
05:25 - like this 0 1 2 3 4 5 6 7 8 9 10 11 12
05:30 - 13 14 15 and this is our important one
05:33 - 16 17 16 so one thing that you'll notice
05:38 - here if I'm numbering the pixels this
05:39 - way is that the first row is 0 through 5
05:44 - the second row is 0 through 5 plus 6
05:48 - right 0 plus 6 is 6 6 plus 6 is 12 1 + 6
05:52 - 6 7 7 plus 6 is 13 so if I know the XY
05:58 - coordinate on the screen something like
06:02 - the coordinate 4 times 2 I can get that
06:04 - number 16 by saying X plus y times width
06:11 - or 4 plus 2 times 6 or 4 plus 12 which
06:19 - equals 16 so this is the formula for
06:23 - getting the numeric the number pixel it
06:28 - is on the screen now then I have to say
06:31 - where is it in the array remember the
06:33 - array actually went 0 4 8 12 whoa right
06:39 - yeah 0 4 8 12 16
06:41 - so then all I need to do is multiply
06:43 - this by 4 so the way that I can find
06:46 - where the color values for a given pixel
06:49 - are in the array is the x-value
06:52 - the x-coordinate plus the y-coordinate
06:55 - times the width and this whole thing
06:57 - times 4 roof so you might need to
06:59 - diagram this out yourself get a piece of
07:01 - graph paper review it a few times but
07:03 - ultimately this formula you can just
07:06 - memorize it you're going to see it in
07:07 - every almost every example I make right
07:09 - now so let's go back to the code itself
07:11 - up and I'm going to wake up my computer
07:14 - wake up computer and now I can go to my
07:19 - code so now all I want to do that first
07:24 - is deal with the pixels of the canvas
07:26 - itself one thing you have to do if
07:29 - you're going to deal with the pixels of
07:30 - the canvas is alert p5 JavaScript the
07:32 - browser I know who we're talking to here
07:34 - but you've got to tell somebody hey I
07:36 - want to work with the pixels so the way
07:38 - to do that is by saying load pixels and
07:42 - I'm going to put this in draw so the
07:44 - first thing I need to do is say load
07:46 - pixels now I can do anything I want I
07:48 - can say pixels index 365 you know equals
07:56 - 255 now I don't know what this is going
07:58 - to do and then uh if I ever change the
08:01 - pixels I need to say hey I'm done
08:02 - changing the pixels let me now say
08:06 - update pixels so I have messed with the
08:08 - pixel array and if I went back and I
08:11 - loaded it we should see some pixel got
08:13 - some value somewhere the truth of the
08:15 - matter is I'm not gonna be able to find
08:16 - that pixel I have no idea 365 is that
08:18 - the red part the green part the Alpha
08:20 - part so ultimately not going to see
08:22 - anything so let's be a bit more
08:23 - methodical about this let's try to
08:25 - change just the first pixel in the
08:27 - top-left corner so we know that's the
08:30 - red value green value blue value we need
08:33 - a revving a green value of blue value
08:36 - and an alpha those should be the first
08:37 - four so that top-left pixel should be
08:40 - white let's zoom all the way in there oh
08:44 - you can see that look at that do you see
08:46 - that white pixel up there in the top
08:47 - left are we sure about that let's let's
08:50 - move it over let's say 4 5 6 7
08:55 - oh you can see it moved over right can
08:58 - you see that pixel I changed a little
08:59 - bit moved over right are we really sure
09:01 - about this let's and you know what I
09:03 - could do actually what am I even
09:04 - bothering I could just say oh no I have
09:06 - to say uh Lopez laughs yeah I could make
09:08 - this zero refresh look at it now I got
09:12 - my pink pixel we made a pink pixel whose
09:15 - giant mouse pointer pointing to it today
09:18 - is a beautiful moment right because if
09:20 - you know how to individually address
09:22 - every single pixel in a canvas there is
09:25 - nothing you can't possibly draw oh you
09:27 - read the world is now your oyster I mean
09:29 - you know you want to have a 3d library
09:31 - for doing all that kind of stuff
09:33 - probably you're not going to do it by
09:34 - pixel by pixel but there's a lot of
09:35 - possibilities this opens up so we see
09:37 - the basics at play here but what I want
09:41 - to do is now let me look at how I might
09:43 - actually address every single pixel so
09:46 - how might I do that so you know if
09:50 - you're watching this video hopefully
09:52 - you're aware of the idea of something
09:54 - called a for loop and we can see this
09:56 - particular for loop is a loop that's
09:58 - saying for every X have X go from have a
10:03 - variable called X and have X cycle 0 1 2
10:07 - 3 4 5 and what do I want to do for every
10:10 - X I want to actually maybe I want to do
10:12 - it the reverse I want to say like for
10:14 - the first row which is why do every X
10:17 - then for the second one do every X then
10:20 - for the third one do every X so I need a
10:23 - loop that's going through the Y's as
10:24 - well and this is what's known as a
10:26 - nested loop you may have seen this in
10:29 - other things so so if I say this and I
10:35 - add another bracket and then I need to
10:38 - put indent these a little bit we can now
10:40 - look at this and we can say AHA this is
10:43 - a loop that's saying for every Y value
10:45 - start at Y value 0 go through all the
10:48 - X's now I have y equal 1 go through the
10:51 - all the X's now have y equal to go
10:53 - through all the X's so this nested loop
10:55 - has the property of hitting every single
10:57 - x and y in the window so now we should
11:00 - be able to apply our formula VAR index
11:04 - equals do we remember this
11:08 - x plus y times width times 4x plus y
11:13 - times width this whole thing times four
11:19 - and now I should be able to take this
11:22 - and put this here indent it properly and
11:27 - say index index plus one write the index
11:33 - that value is the red value of every
11:36 - pixel one is the green the next one is
11:39 - the blue the next one is the Alpha so
11:40 - index index plus ah plus two index plus
11:50 - three and you know I might just for like
11:52 - symmetry here add the plus zero there I
11:55 - don't know if that's necessary but you
11:56 - can see this is the chunk I need the
11:58 - index is the start of the pixel and
12:00 - there are four values associated with
12:02 - the pixel now there's something is going
12:03 - to happen which is going to cause this
12:04 - not to work which I would get to in a
12:06 - second but this is this is essentially
12:08 - the right code I missed a small little
12:09 - piece only because I'm using a retina
12:11 - laptop which I'll get to in a second so
12:13 - if I hit refresh here you can say ah
12:14 - weird it worked but I didn't get the
12:17 - whole canvas like I got this like stripe
12:19 - of pink across the top so unfortunately
12:22 - we live in a world now or fortunately
12:24 - where we have these like hdpi HPI high
12:28 - definition display high pixel density
12:31 - high pixel density so Mac Retina
12:35 - displays other types of high density
12:37 - displays actually have like four pixels
12:40 - for every quote-unquote pixel to make
12:43 - things finer and more higher resolution
12:45 - and so if this is actually your what
12:47 - you're seeing here is a view of a high
12:48 - density display and so one thing I want
12:51 - to do just in people I could get into
12:52 - this and I could draw the pixels at
12:54 - higher density to do all sorts of stuff
12:55 - but something I could do in p5 just to
12:57 - like turn this problem off is say pixel
13:01 - density one so what I'm saying that is
13:03 - like I don't care what kind of display
13:05 - the user is on I don't I want the canvas
13:08 - to be one pixel per pixel kind of
13:11 - regular density display as they were
13:13 - here many years ago in olden times so if
13:17 - I do that we should see there we go and
13:20 - you know it's giving me
13:21 - some sort of like warning that image
13:23 - smoothing enabled it's changed something
13:26 - and we can kind of ignore that in the
13:27 - console but you can see I have now
13:28 - essentially written the code for the
13:31 - background function right the p5
13:33 - background function you know does
13:34 - exactly this it you give it a color like
13:37 - 255 comma zero comment 255 and it fills
13:39 - the entire background with those pixels
13:42 - but I can do all sorts of things now
13:44 - like I could say I could say X right and
13:49 - why I don't know what this is going to
13:51 - do and I could hit and run this you can
13:53 - see now I have this kind of like
13:54 - gradient right because the amount of red
13:56 - increases as the pixels move to the
13:57 - right the amount of blue increases as
13:59 - the pixels move down it mixes in the
14:01 - center I could then also say like make
14:06 - the green value a random value and now
14:08 - we've got this like snowy rainbow noise
14:11 - ah the rainbow yeah whenever something
14:14 - happens that's rainbow like in a it
14:16 - makes me happy and I feel glad about it
14:18 - so this really concludes this particular
14:20 - video I would say to you try to get this
14:22 - set up see what kind of magic pixel
14:25 - pixel Wonderland you can make for
14:26 - yourself and what I'm going to do in the
14:29 - next video is take this concept and
14:31 - actually not just make up pixel colors
14:34 - out of thin air but actually pull pixels
14:36 - from an image this being a live a video
14:39 - source and manipulate them or draw
14:41 - something else based on those colors so
14:43 - I hope you enjoyed this video it was 14
14:46 - minutes and 46 seconds long and share
14:49 - with me in the comments if you make
14:50 - something and post it somewhere I would
14:52 - love to see what it is