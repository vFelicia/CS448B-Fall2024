00:00 - hello welcome to another oh my God I
00:02 - can't believe I'm making a fourth or
00:03 - fifth I've lost track video about
00:05 - context free grammars so in this video
00:08 - I'm going to do something a little scary
00:11 - um which is instead of using an engine
00:13 - or library or framework like tracery or
00:15 - Rita I'm just going to program a little
00:17 - context free grammar expansion system
00:19 - without anything at all just my own wits
00:22 - and fingers we're going to see how that
00:24 - goes right so remember the idea here is
00:27 - that I have a system a language that has
00:30 - valid elements of it valid letters of
00:32 - the alphabet so to speak there are um
00:34 - and a set of production rules so and I'm
00:37 - going to use a very simple set of
00:38 - production rules and try to write a
00:40 - recursive function a function that
00:42 - references itself to recursively expand
00:45 - this grammar tree it'll be like magic I
00:48 - think or or there's going to be a lot of
00:50 - problems that are going to happen okay
00:52 - so um I have pre-existing examples where
00:54 - I've done this but I think I did that
00:57 - many years ago and I ported it from
00:58 - somebody else's examples namely Allison
01:00 - parish's wonderful python uh examples
01:03 - linked to um Allison's resources on a
01:06 - course called reading and writing
01:07 - electronic text in this video's
01:08 - description so the first thing that I
01:10 - want to do is um I know I'm going to
01:12 - need some sort of uh object probably a
01:15 - JavaScript object that has a set of
01:17 - rules in it so and I could I could just
01:21 - write these in maybe I'll just write
01:23 - them
01:24 - in um so I could say and if I'm kind of
01:26 - like going off of what's here I could
01:28 - say okay uh sentence becomes the
01:33 - EnV and a uh I have to go over here and
01:37 - look the uh a
01:40 - noun um
01:43 - is a cat or a dog and a
01:48 - verb
01:50 - is a uh woo a uh
01:55 - meow or barks so again this is my
01:58 - incredibly lame
02:00 - grammar boy we could do so so much
02:03 - better and we also have to think well
02:05 - what really is going on here should I be
02:09 - what syntax should I use like maybe it
02:11 - makes more sense I think it might make
02:14 - more sense I would sort of prefer to do
02:16 - this like have these all be an
02:18 - array because an array is going to be
02:21 - easier for me to work with ultimately so
02:24 - I'm going to do that right I don't want
02:26 - to like have to parse this like pipe
02:27 - symbol and all of that so what I'm going
02:30 - to consider is an array is an array of
02:33 - options with equal probabilities um and
02:36 - right now the only possible sentence is
02:38 - the NV the only possible ns are cat and
02:41 - dog and the only possible V is meow and
02:42 - bark so what I want to do is I want to
02:46 - uh figure out now I need some sort of
02:47 - expansion algorithm so what I need to do
02:50 - is I have a start so my start is just
02:52 - going to be the sentence s okay now what
02:56 - I need to do is um let's just make sure
02:59 - this program is kind of and I have some
03:01 - errors here like I'm missing a comma
03:02 - here so let me just um kind of uh say
03:06 - result equals start and see what happens
03:10 - here uh whoops I'm in I don't know where
03:13 - I am I you want to be I'm probably uh
03:17 - I'm probably running editing the wrong
03:19 - code don't I always do this no I'm in
03:21 - the right place uh oh I just didn't
03:23 - console log anything uh and I'm just
03:26 - going to say create
03:28 - p uh result so the idea here is
03:32 - oops s so I want to get more than S so
03:36 - how do I do this well there's a variety
03:40 - of ways I could it could sort of think
03:42 - about doing this but I think what I want
03:44 - to do is I want to sort of build out an
03:47 - array so I'm going to say expansion
03:50 - equals um you know I could try to use a
03:52 - for Loop and maybe run a for Loop a
03:55 - nested for Loop to do it multiple
03:56 - Generations but really this type of
03:59 - system I don't really have anything in
04:00 - here that's nested but if I add some
04:03 - nested stuff to it I'm going to need a
04:04 - recursive algorithm so I would love to
04:07 - refer you to some videos I have about
04:09 - the concept of recursion which typically
04:11 - in other videos I've made I've used for
04:14 - graphics drawing I could make a
04:15 - recursive tree structure and um a self-
04:18 - similar shape a recursive something is a
04:21 - recur a function that's defined
04:23 - recursively is a function that defined
04:24 - it that calls itself so um I'm going to
04:28 - come back to that uh but let's let's
04:29 - just start let me start writing this
04:31 - code is this a coding challenge I think
04:32 - it
04:33 - is um okay so I have an expansion and
04:36 - what I want to say is I want to say
04:38 - expand start expansion because what I
04:42 - want to do is I want to call a
04:44 - function and I'm going to say here
04:47 - result equals that so I want to have a
04:51 - result and that comes from starting with
04:55 - this and I want to pass it an empty
04:57 - array because that I want that array to
04:59 - be filled
05:00 - as it's going through and and expanding
05:03 - based on the the rules so to speak so
05:05 - I'm going to write this function up
05:08 - here and it gets uh I don't know what to
05:11 - call this a an element a phrase I'm just
05:13 - going to call it um uh a start so to
05:16 - speak and I'm going to call this
05:18 - expansion which is kind of a little
05:19 - awkward that I'm using the same variable
05:21 - names but I'm going to do that anyway
05:22 - okay so what do I do here well first I
05:26 - need to determine is start something in
05:28 - the rules is it terminal or not terminal
05:32 - if Rules start right it does it exist is
05:36 - it something in the rules if it is what
05:39 - do I need to do well I need to
05:42 - expand whatever I need to expand one of
05:45 - the possibilities that it might pick so
05:48 - first what I need to do is I need to
05:49 - pick something and one of the lovely
05:51 - things I can do in P5 is I can pass an
05:54 - array to a random function so if I say
05:57 - give me a random
06:00 - value right that's going to be picking
06:03 - if if it's getting n it's going to pick
06:05 - one of cat or dog and then I need to
06:08 - expand that so then I need to
06:11 - expand uh what it picked and then I need
06:13 - to continue to pass this expansion array
06:16 - because this expansion array is just
06:17 - getting filled recursively as this kind
06:20 - of function unfurls this is I going have
06:23 - to like come back and and and this is
06:25 - going to be I can tell already this is
06:27 - going to be the not the kind of video
06:28 - that you need to watch over and over
06:29 - again but this is going to be the kind
06:30 - of thing that you're going to want to
06:31 - sort of like hand write this code and
06:33 - play act it out or something with a
06:35 - friend um to to sort of figure out
06:37 - what's going on here now what if it's
06:39 - not and something that expands then what
06:43 - do I want to do I want to add it to that
06:47 - array uh expand push what I
06:54 - picked so the idea is that I want this
06:58 - to keep going um and we can think about
07:01 - what the tree I I wonder if there's a
07:02 - way I can diagram this to help you to
07:04 - help make first of all let's just see if
07:05 - this
07:06 - works um and then I'm going to uh um
07:09 - what I want to do is I'm going to say
07:11 - result uh join with it's a it's a it's a
07:14 - let's console log the result it's going
07:15 - to be an
07:16 - array let's see if this even works
07:19 - because I might have made a mistake
07:20 - undefined hey undefined there we go
07:25 - taada um all right so what went wrong
07:28 - I'm looking at the chat
07:30 - uh rules tart no I thought I someone was
07:32 - saying I made a a typo there so let's
07:35 - see if we can um figure out what's going
07:38 - on so let's uh let's uh console.log pick
07:43 - see if that's even
07:45 - working ah so that worked we got the uh
07:48 - I don't know why I can't I'm zoomed out
07:50 - we got the nvy sketch line 10 so that
07:52 - worked um and then pick
07:56 - oh o oh so here's something that's kind
08:00 - of
08:03 - important right uh this would have this
08:06 - would work I I haven't been paying
08:08 - attention but these when it these are
08:11 - three different uh kind of elements that
08:13 - I need to expand so I hate to do this to
08:17 - you but I really kind of feel like what
08:20 - this should be is an array inside the
08:27 - array I could start to use split and
08:30 - stuff but I want to um I want to think
08:34 - about a way that might make sense and
08:37 - I've missed something here oh I need a
08:38 - quote there let me just make this change
08:41 - um and then we'll kind of discuss
08:45 - it this is my own strange way of
08:48 - encoding this I'm sure any of you
08:49 - watching will come up with a better way
08:51 - and you will share it with me in the
08:52 - comments and I will feel embarrassed
08:55 - that's part of programming feeling
08:56 - embarrassed although you shouldn't feel
08:58 - embarrassed it's okay if I I'm going to
08:59 - feel embarrassed because that's I
09:00 - generally operate in life by feeling
09:02 - embarrassed but coding is about figuring
09:04 - stuff out and playing around and and
09:06 - iterating to refine things later so the
09:08 - reason why I'm doing this wo look at
09:09 - that it autof formatted it for me the
09:12 - reason why I'm doing this is because
09:14 - what I want is to have a bunch of
09:16 - options but one of the options this is
09:19 - not three possible options this is
09:21 - expanding s into three tokens so to
09:25 - speak this is expanding n into one token
09:29 - or this other one token so you know I
09:31 - could say this or something like the
09:33 - funny cat whoops and it would look like
09:35 - this you know but the reason why I need
09:38 - to separate this out is because the N
09:40 - ORV might be things that need to be
09:41 - expanded and the truth of the matter is
09:43 - I could just do this but not if I need
09:46 - to treat these separately as things that
09:47 - might be expanded so you know I could do
09:49 - something different with splitting but
09:50 - I'm going to I'm going to keep my uh
09:52 - train of thought here and what I'm going
09:54 - to do now is once I pick something here
09:58 - I'm picking an array right and so what I
10:02 - need to expand is each one of these so I
10:05 - need to say four VAR I equals z i is
10:09 - less than pick. length
10:13 - i++ and then I want to expand pick index
10:16 - I so I want to go through and expand the
10:20 - then n and then v um and then uh push so
10:25 - let's look at this now and see what
10:27 - happens and we can see
10:29 - um I still getting undefined at the end
10:32 - so but I'm getting something promising
10:34 - where I got the NV then I got cat then I
10:36 - got barks so it looks like things are
10:38 - working correctly oh I'm consoling
10:40 - logging
10:42 - result really what I want to console log
10:44 - is
10:45 - expansion undefined undefined undefined
10:49 - this is promising so let's look up here
10:52 - ah pick H oh no no no no I want to push
10:56 - start so there we go sorry so this is
10:58 - the thing coming in if it is part of the
11:01 - rules then I need to split it up and
11:04 - expand it otherwise I need to add that
11:06 - to the end so that's what I was missing
11:08 - there and now we can see I get the dog
11:10 - barks and what do I want to do now the
11:12 - thing that it results in is a
11:16 - um uh an array of elements and I want to
11:19 - um and so I wonder by the way if it
11:21 - makes sense for me to just say return
11:24 - expansion um and in that sense I can
11:27 - have the function also sort of return
11:28 - that array which is sort of unnecessary
11:30 - but um yeah that makes sort of sense to
11:32 - do that and then what I can do is I can
11:34 - also say return expansion join with a
11:39 - space and then now you can see I'm
11:42 - getting these sentences the dog barks so
11:44 - now what I have is console log result
11:48 - create P oh there it is the dog barks so
11:50 - you can see I'm getting these and I
11:51 - could do this a bunch of times uh just
11:53 - to get a bunch
11:54 - of different uh
11:57 - sentences to make sure this is really
12:06 - working and now I'm going to run this
12:08 - and we can see oh look at this craziness
12:10 - ah what's going on here uh I made a
12:12 - mistake and I've got to start over uh
12:15 - each time uh so I want to do that 10
12:18 - times so we can see the dog barks the
12:19 - dog meows the dog meows the cat meows so
12:22 - this in theory is working right
12:26 - now and what I would like to do is take
12:29 - somebody else's grammar and apply it in
12:32 - here to see if we can get something
12:33 - that's a bit more sophisticated so I'm
12:35 - going to pull a example grammar file
12:38 - from um Allison
12:40 - Parish um and I believe that is this so
12:44 - this is a much nicer uh
12:47 - grammar and what I'm going to do is I'm
12:50 - going to uh just paste it to the top
12:52 - here and I'm going to put it in comments
12:56 - just to sort of make the argument uh
12:58 - that and I feel like the this cooking
13:00 - show thing should happen where now this
13:02 - video is going to get edited where all
13:03 - of a
13:04 - sudden you see the result down here of
13:07 - me translating it but I'm going to walk
13:09 - through translating one at a time in the
13:10 - archived live stream and we'll see what
13:12 - happens in the video later okay so you
13:14 - didn't have to watch all that but I went
13:15 - and converted that this grammar which is
13:18 - from an example from Allison Parish
13:20 - thank you Allison parish and I converted
13:22 - it to this syntax that I developed which
13:23 - is probably um and you can see now I
13:25 - have a slightly more complex sentence
13:28 - first of all I have two two different
13:29 - options noun phrase verb phrase
13:31 - interjection noun phrase verb phrase and
13:33 - the powerful thing here is that a verb
13:36 - phrase can also include a noun phrase or
13:38 - no noun phrase so there's the recursive
13:40 - nature of this algorithm of kind of
13:42 - expanding this sort of nested tree is
13:44 - much more apparent now so let me go and
13:48 - um I think what I should do is uh
13:50 - quickly um create a nice little button
13:52 - to do the
13:54 - generation uh so where am I I'm going to
13:57 - say button and I'm going to say button
13:59 - equals create button
14:02 - generate and then button uh uh Mouse
14:06 - pressed uh
14:08 - CFG uh like The BFG but a
14:11 - CFG and then I'm going to say function
14:16 - CFG and I don't um I'm going to uh
14:21 - expand this grammar and create a
14:24 - paragraph So let's look and see I have a
14:26 - button the dichotomy that winds for
14:29 - grounds that Tam seagull the corsage
14:31 - foregrounds the corsage that foregrounds
14:33 - this amoeba the corsage amoeba whines I
14:36 - feel like I messed something up but I'm
14:38 - sure I probably messed something up in
14:40 - the grammar but um you'll have a um you
14:44 - get the idea here so this is the the key
14:47 - piece of this is a how are you deciding
14:49 - to format your grammar right how are you
14:52 - creating terminal and non-terminal
14:53 - symbols I've chosen to use this sort of
14:55 - set of nested arrays and the real key
14:58 - here of course is this recursive
15:00 - algorithm so as I'm starting with one
15:03 - element I expand that and then I look
15:06 - over those elements and call expand on
15:08 - those elements and call expand recurs
15:10 - this function is just calling itself
15:11 - calling itself and this like computer
15:13 - just keeping track of everything and
15:14 - then at the eventually it's going to
15:16 - finish doing all that and at the end
15:18 - it's going to have this big array of all
15:20 - of the terminal uh elements of this new
15:23 - sentence and will uh join them with the
15:25 - space bar and give you that result back
15:27 - which is displayed in the browser so so
15:29 - again just to summarize I think if you
15:31 - want to work with context free grammars
15:33 - using a um using a JavaScript library
15:36 - like tracery or Rita are both great
15:38 - options if you're interested in digging
15:39 - into the algorithm itself um this is now
15:42 - an example that kind of shows you that
15:44 - and just to kind of make this point a
15:45 - little bit more I want to show you that
15:47 - I you can also find a whole bunch of
15:48 - examples of mine that do this and a
15:51 - little bit more so if you go to the uh
15:52 - ad toz GitHub repository um you'll see
15:55 - that I have a context I have I have this
15:59 - same exact algorithm but packaged up
16:01 - into an object so this is a um a context
16:05 - free object that has the rules object it
16:07 - has an add rule function so you can even
16:09 - look at this if you want to kind of
16:10 - think about organizing this context free
16:12 - grammar into it its own kind of Library
16:15 - so to speak much like Rita does Rita is
16:17 - more sophisticated than mine um so you
16:19 - can look at these examples they do much
16:21 - in the same way of things that we this
16:23 - is the exact same grammar actually um
16:26 - you can look at this one which actually
16:28 - reads it from a Json file does the um
16:31 - Hau Generation Um there's this other
16:33 - example that is I want to show you
16:35 - because what it's actually doing is it's
16:37 - taking this is doing something more um
16:40 - it's using a text that I a file I could
16:42 - upload or drag or paste in but it's
16:44 - actually generating the grammar on the
16:46 - Fly based on input words so here I have
16:49 - the text from the rainbow Wikipedia page
16:52 - and I could sort of generate hauz uh
16:55 - with that particular text you know if I
16:57 - made up my own text if I refreshed this
16:59 - and said uh generate some
17:04 - hauz 1 2 3 1 one two three happy
17:10 - dancing rainbows
17:13 - unicorn uh um uh what else what else uh
17:16 - purple pink right we could sort of see I
17:19 - could generate the grammar and I could
17:20 - generate some haikus and you can see I
17:22 - don't have any I don't have enough stuff
17:24 - so I'm kind of getting some of the these
17:26 - became terminal symbols because I don't
17:28 - have enough stuff but if I had you can
17:29 - see hauz 2 unicorn pink pink dancing 2
17:32 - so this is also something you might want
17:33 - to think of and this by the way also has
17:35 - a little button that allows me to save
17:37 - that and I can actually look at um the
17:39 - Json file itself the that the program
17:42 - actually generates that grammar and you
17:44 - can see here it sort of calculates and
17:46 - it it sort of it couldn't find any four
17:47 - syllable or five syllable words in the
17:49 - seed text that I gave it um so I'm going
17:53 - to see if there's any other um yeah so
17:55 - that's um I I want to make another video
17:57 - where I sort of maybe tie into into
17:59 - context free grammars with L systems I
18:01 - encourage you to sort of look at some of
18:02 - my other videos about L systems which
18:03 - are a context free grammar but the uh
18:06 - the idea of them is to um create
18:09 - graphics and I will do one wrap-up video
18:11 - to talk about some exercise ideas that
18:13 - you might make and certainly one of the
18:15 - things that I'll talk about I'm
18:16 - mentioning this now because I don't know
18:17 - if I have time to make that video today
18:18 - but it'll come eventually is you might
18:20 - think of what if the elements of this
18:22 - grammar right aren't words but musical
18:24 - notes or Design Elements color form how
18:27 - could you use a context free grammar to
18:29 - generate visual designs generate music
18:31 - other types of things Beyond just text
18:33 - okay so I hope you enjoyed this coding
18:35 - challenge of kind of coding a context
18:36 - fre grammar from scratch and I'll see
18:38 - you in a future one at some point in the
18:45 - [Music]
18:51 - future