00:01 - [Music]
00:07 - good morning hello happy coding train
00:10 - Wednesday just me your host and I'm here
00:22 - yet again to talk about
00:29 - [Music]
00:32 - this great for so I know I've been you
00:42 - might think that I have a like a
00:44 - unhealthy obsession with this topic
00:47 - about Fourier transforms and how they
00:50 - apply to drawing paths but it's just
00:53 - been something that I have seen and
00:55 - thought about and looked at and wondered
00:57 - about for quite a few years now and
00:59 - never felt that it really understood or
01:00 - shortly knew how to implement and so the
01:03 - recent things that have popped up in my
01:06 - peripheral vision on the internet
01:08 - smartereveryday video the Turkish
01:10 - website article written by Doug ax three
01:15 - blue one Browns video there was actually
01:17 - a wonderful podcast called I have to
01:20 - look this up it's uh let me just look
01:24 - this up because this is a really one I
01:25 - want to get this wrong a wonderful
01:27 - podcast that I listened to called too
01:31 - much not enough and the hosts are Darius
01:35 - and Emma and they they have many
01:37 - wonderful episodes I highly recommend it
01:39 - but season 2 episode 1 is called or if
01:43 - you'd see this Fourier transforms so
01:47 - it's a really wonderful excellent
01:48 - explanation you would think like oh how
01:50 - could I ever possibly listen to a
01:51 - podcast about Fourier transforms it's
01:53 - just listened to people talk and explain
01:56 - and think and consider Fourier
01:58 - transforms and yet I couldn't imagine a
02:01 - better podcast to listen to so this
02:05 - though I think I've kind of got a lot
02:07 - with my life but it's time I need to do
02:11 - one more thing I need to do the part 3
02:14 - of the Fourier transform coding
02:16 - challenge in which I will let's and in a
02:20 - way I probably should have started doing
02:22 - it this way but to figure it out to get
02:24 - my brain to learn it and understand as
02:26 - much as I can about it and I had to
02:29 - start by separating out the XS and the
02:31 - Y's and if you recall if I come back up
02:35 - here this is the this is the result of
02:40 - the first part of the coding challenge
02:42 - where
02:43 - I apply a Fourier transform to a signal
02:47 - of all the X values of this coding train
02:50 - logo path then I apply a Fourier
02:52 - transform to the signal of all the Y
02:54 - values of this coding train path I
02:57 - turned those into these circular
02:59 - epicycles and use one to grab the Y and
03:04 - one to grab the X and then recreate
03:06 - reconstruct the drawing and you can see
03:08 - the strange artifact here were actually
03:10 - in this one the X never changes even
03:13 - though all these circles are rotating
03:15 - epicycles or or orbits are rotating
03:17 - around each other this x value stays the
03:19 - same and here the Y value stays the same
03:24 - so now it's time to take both of those
03:27 - and put them into one and achieve
03:29 - something perhaps even more magical than
03:32 - what I have achieved already here on the
03:35 - coding tree but this will involve some
03:41 - stuff like complex numbers which had
03:43 - already did but will involve more about
03:44 - complex numbers it will involve
03:46 - revisiting this formula but I'm I'm
03:49 - ready to go I'm gonna make this happen I
03:51 - hope it's gonna work so then topic
03:54 - number two which I don't know that I
03:57 - will get to I mean it would be great if
03:59 - I got to it is and and someone in the
04:01 - chat just asked the dong asks what does
04:04 - K and n stand for and K n n stands for K
04:09 - nearest neighbor so the logical
04:12 - follow-up question would be what nearest
04:15 - neighbor bead and K stands for K yeah
04:19 - all these are very legitimate good
04:21 - questions if I have time I will get to K
04:25 - n classification and I will be
04:27 - demonstrating an example that was
04:28 - pioneered for the ml 5 library by eaning
04:31 - she who has been a guest on the coding
04:33 - train before and has I'll point to a lot
04:35 - of her materials when if and when I get
04:38 - to this topic but the idea is to create
04:41 - a game controller with basic gestures
04:43 - how could K and n K nearest neighbor
04:46 - possibly do that well stay tuned but if
04:50 - we don't get to that today I will be
04:51 - back on Friday
04:53 - umm what I would love this this week
04:54 - marks the first week of the
04:56 - you semester died class yesterday was
05:02 - okay it did my best so all I could do
05:07 - so it's busy but I also went back a bit
05:09 - more into the routine of things and I'm
05:11 - hoping to try to do more than one live
05:17 - stream per week and have each of them be
05:19 - slightly shorter rather than these sort
05:22 - of like long two three four hour live
05:24 - streams I would much prefer to do twice
05:26 - a week for like an hour and a half each
05:28 - time or an hour and a half to two hours
05:29 - I think once I get I mean really once I
05:31 - get to about 20 minutes of time get it
05:33 - close that's right start I don't know if
05:35 - I ever think clearly but it really
05:37 - starts to go downhill but you know
05:38 - certainly after three hours I feel
05:39 - watching in my live streams for even
05:41 - what you might find it entertaining but
05:42 - it's a little less productive ah so
05:46 - something like starting your day with a
05:48 - nice like math formula just to like sort
05:51 - of settle it in stare at let's just some
05:53 - deep breathing meditation let's read
05:55 - some random numbers to the discrete
05:58 - Fourier transform formula 51
06:11 - eighty-seven thousand one hundred eighty
06:14 - nine fourteen thousand seven thousand
06:23 - I lost my place because I'm looking up
06:30 - at the Fourier transform for me it's
06:34 - actually there okay this is the word
06:38 - expression but really it's just a green
06:40 - wall ninety-three thousand fifty seven
06:49 - nineteen thousand eight hundred and
06:53 - seventy three sixty six thousand two
06:56 - hundred one ninety eight thousand okay I
07:03 - feel like that's what we needed to calm
07:07 - down to ease our minds and to allow
07:10 - ourselves to feel like we can tackle
07:13 - this today uh-oh
07:15 - is the mic muted so no it's not muted
07:17 - okay so I'm a little bit concerned one
07:19 - thing I'm gonna need your help with I'm
07:24 - gonna need your help with this because
07:26 - usually I have I have these rechargeable
07:28 - batteries for the microphones that I use
07:29 - usually they've been charging ever since
07:32 - I left the studio the last time I was
07:34 - here did forget to charge them so I
07:36 - charged them up a bit this morning this
07:40 - one is on one bar that one is on two
07:48 - bars I've got some charging here in the
07:54 - charger so if the mic if the mic goes
07:59 - out then oh the music is very loud I can
08:03 - I can make the music a little quieter
08:05 - let me let me just fix that for a second
08:08 - [Music]
08:12 - I made a little fire if the mic goes out
08:18 - I don't you're gonna have to do
08:19 - everything within your power to channel
08:22 - your mental energy to me to get me to
08:24 - notice like the check we come up with
08:26 - like a signal although no I don't want
08:29 - to come now worried people are gonna
08:30 - start trolling me but the signal would
08:33 - be like emojis of microphones over and
08:36 - over again so we practice it like a 1
08:38 - just get it out of your system
08:40 - like everybody all at once everybody all
08:45 - at once just like when I clap flood the
08:48 - chat with microphone emojis and this
08:51 - count to 10 in your head and then stop
08:53 - it got the 5 the 5 your head stop okay
08:56 - ready and we'll still be a practice
09:00 - while I'm waiting for you to catch up to
09:03 - me it was asked what is this book this
09:06 - book is a million random digits with a
09:08 - hundred thousand normal deviants this is
09:11 - not an original print if anybody could
09:14 - find where one could purchase or acquire
09:16 - an original print it would be like my
09:18 - treasure absolute treasure this is a
09:21 - book published by the RAND Corporation
09:22 - in the 50s I believe yes the original
09:28 - publication date is 1955 and it was used
09:31 - as a list of random numbers for
09:34 - different kinds of Monte Carlo
09:35 - simulations and experiments because
09:38 - there was there were no computers but it
09:40 - could quickly well if there were no
09:42 - computers but having a computer at your
09:44 - fingertips that could generate pseudo
09:46 - lists of random numbers to do to very
09:50 - quickly was not possible it also has
09:51 - norm a Gaussian distribution a normal
09:54 - distribution of random where's the back
09:55 - all right great I see all of the
09:57 - microphone emojis that is something I
10:00 - will definitely notice if the mic goes
10:02 - out okay I'm being told by Simon that
10:09 - there is a video I have seen this
10:11 - michael says primes for three hours i I
10:14 - don't know somebody I need to go see if
10:15 - I ever hit 1 million subscribers I would
10:19 - like to read all 1 million random digits
10:22 - now I did the math for that even if I
10:24 - could read like 1
10:26 - think about if I could read one digit
10:27 - per second it would be I think oh that's
10:31 - 1 million divided by a 60 that's how
10:36 - many I could do in a minute and there's
10:38 - how many you know minutes in an hour
10:40 - divided by 60 again and how many hours
10:42 - in a day divided by 24 it's it's it's a
10:45 - lot it's a lot so I'm trying to come up
10:52 - with a solution I thought well maybe I
10:53 - could read what read from the book for I
10:56 - know I got to come up with something you
10:58 - know something that relates to 1 million
10:59 - but doesn't involve like okay if I could
11:02 - do like 1 million milliseconds but that
11:04 - I think that's not like could I read
11:07 - just that anyway you will think of some
11:09 - idea Ben Morin and the chats as an
11:13 - original $275 I would spend 275 dollars
11:18 - of my hard earned super chat money on
11:23 - million random digits by the way oh and
11:27 - a K week Mon in the chat is saying and
11:30 - Simon by the waist of 277 hours that's a
11:33 - lot I actually think there was issued
11:35 - corrections to it since the numbers
11:37 - weren't random enough what does it even
11:40 - mean usually to be random enough it's
11:41 - really an interesting topic if you think
11:43 - about like well how could it not be
11:45 - random enough if it's not Ray them
11:47 - enough isn't that kind of like randomly
11:48 - not random which is even more random
11:50 - than random so I mean I don't the
11:53 - question is is there a detectable
11:55 - pattern is the actual distribution of
11:58 - numbers over time uniform there are so
12:00 - many things we could get into and talk
12:01 - about but I must talk about
12:05 - [Music]
12:13 - discrete Fourier transforms that is what
12:21 - is going to happen me I am sue me seems
12:26 - to think that eleven and a half days of
12:28 - reading the random number book straight
12:31 - is doable okay I'll do that for ten
12:34 - millions if it's ten million subscribers
12:36 - how about that well I actually have ten
12:37 - million subscribers maybe I would sit
12:39 - here for eleven and half days I mean I'd
12:40 - have to sleep it's very unhealthy not to
12:43 - sleep I'm like an old oldish man I can't
12:47 - do the young person stay up marathon for
12:51 - eleven half days anyway okay I take
12:54 - breaks I mean I could do it over time I
12:56 - mean I could do two hundred seventy
12:57 - seven hours over a year maybe I just
13:00 - have like one year to read them all I
13:02 - don't know let let's not come up with
13:04 - this there was a super chat in there so
13:06 - what's giving donations to buy that book
13:08 - I guess mr. Uggla going toward the book
13:13 - so I have a new system I need more in
13:15 - better systems but I have a new system
13:17 - where I can see new memberships and new
13:19 - super chats you know I almost feel
13:20 - awkward about the existence of these
13:23 - sorts of things they do help me fund
13:25 - various things I want to do for the
13:26 - channel make it more possible for me to
13:28 - do this but what I would always feel the
13:30 - most guilty about is if people ask a
13:32 - question with a super chat and I miss it
13:33 - so my new thing that I'm going to try to
13:35 - do is before I believe before I end a
13:38 - session I'll always go back and check if
13:40 - there any questions there I will answer
13:41 - them see how that goes alright alright
13:46 - okay
13:47 - 13 minutes in we've got to get going
13:50 - with I won't do the drum roll whole
13:51 - shenanigans again discrete Fourier
13:53 - transform I'm looking at my email which
13:56 - I don't need to be looking at okay here
13:57 - back into a slack group alright ah and
13:59 - Anurag asks are you going to do fluid
14:02 - dynamics thank you for asking
14:04 - okay I'm gonna go to rainbow topics I'm
14:07 - gonna sort by recently updated and I am
14:12 - going to go here so if you haven't
14:15 - already seen why am I not logged in I
14:17 - won't worry about that right now if you
14:18 - haven't already seen the smartereveryday
14:21 - video about
14:23 - laminar fluids and I don't want to start
14:25 - some kind of like YouTube beef thing or
14:28 - anything you know I'd like small
14:30 - potatoes to the giant that is smarter
14:32 - every day and I'm most likely just gonna
14:34 - get squashed but I like turbulent flow
14:38 - turbulence I mean if you visualize it
14:40 - it's all crazy turbulent it's really
14:42 - cool so I mean lamb trust me laminar
14:46 - flow is cool also turbulent flow just
14:50 - just saying just a little just a little
14:53 - like just putting out there turbulence I
14:57 - mean I don't like it in an airplane a
14:58 - very nervous person I have to like grip
15:01 - off to the sides like this like III
15:05 - fliege of recently was on a trip I think
15:07 - was sitting next to my ten-year-old son
15:08 - it was a very turbulent look you're like
15:12 - you're just like looking at his iPad
15:14 - whatever okay
15:16 - that aside turbulent flow I would really
15:19 - like there's this um this is really nice
15:21 - demonstration that I found doing fluid
15:23 - simulation I believe this is using yeah
15:25 - this is using this lattice Boltzmann
15:27 - algorithm I'm gonna hit start and you
15:30 - can see here let's make it all turbulent
15:33 - look at all that turbulence can I add
15:37 - like how do i flow speed if i make the
15:42 - speed much higher let's let's change the
15:46 - viscosity oh we want the visco yeah
15:48 - there we go look at that turbulence look
15:50 - look at that come on turbulent flow what
15:53 - so I would really like to I would like
15:58 - to make this I mean in a way it's like
16:01 - oh look this already exists I mean this
16:03 - is basically exactly the coding
16:05 - challenge that I have imagined that I
16:06 - want to do when people ask about doing
16:08 - like fluid dynamics I have to admit I
16:10 - have no idea how to do this I have at
16:13 - one point have used the navier's stokes
16:15 - particular algorithm it's which is super
16:21 - interesting and I've used several
16:22 - libraries that implemented
16:24 - you know when I'm making a project if I
16:27 - need to make a project that has fluid
16:29 - simulation and I'm just gonna go and use
16:30 - a library probably but when I'm on this
16:32 - channel and I'm trying to do a tutorial
16:33 - I like to kind of figure some stuff out
16:35 - a little bit more
16:36 - our level is a sort of academic exercise
16:38 - or for fun times it's like we're fun
16:41 - times and try to figure out how to code
16:42 - your partial differential equations that
16:44 - you don't understand at all but so I'm
16:48 - hoping that maybe I would do this on
16:51 - Friday but I don't I think this requires
16:55 - some research like I don't think I can
16:58 - come in here cold and just like read the
17:00 - paper I don't need to write code in
17:02 - advance I don't think but I need to read
17:04 - the paper and look at some of these
17:05 - examples and have a better sense I won't
17:06 - wouldn't do anything this sophisticated
17:08 - with like an interface and everything
17:09 - but I just want to get basically
17:11 - something like this working so turbulent
17:15 - flows we are gonna make some turbulence
17:17 - happen with the lattice Boltzmann
17:19 - algorithm if you have some suggestions
17:22 - or ways that I could tackle this
17:25 - here's another paper that you please
17:27 - contribute to this thread oh and this is
17:29 - really cool this is somebody's uh like
17:35 - JavaScript 2d fluid turbulence
17:37 - simulation I mean come on if this war
17:40 - just laminar flow all of the little dots
17:43 - will just be going where laminar flow
17:47 - but if there's turbulence it's like
17:59 - alright enough shenanigans let's get to
18:02 - the discrete Fourier transform
18:04 - that's right Destin I'm coming for you
18:06 - alright alright uh let's see I'm sorry
18:26 - all these interesting things people are
18:27 - saying in the chat all right let's close
18:30 - this out get semi air ideas and help and
18:34 - everything and here we go
18:38 - Oh before I go to start with the by the
18:42 - way clearly the only thing I'm getting
18:43 - to do today before I go and start with
18:46 - the drawing with the Fourier transform
18:51 - let's look at some of the things that
18:53 - people made not only there are only two
18:55 - community contributions by the way I
18:57 - think there might be a website but it's
18:58 - not really a website bug but one of the
19:00 - things were really struggle with the
19:01 - website is when a coding challenge has
19:03 - multiple parts where do people share
19:05 - their parts and then where do people
19:06 - find them and I believe the way the
19:08 - system works is if you share your parts
19:10 - with part one of the challenge then then
19:14 - it ends up being in all the parts but I
19:16 - just noticed here if I go to part two
19:19 - this one that the community
19:22 - contributions aren't there so I think
19:25 - whoops and because I think we probably
19:27 - didn't link them correctly so anyway
19:29 - I'll we'll talk about that in the patron
19:30 - slack group for those of the website
19:32 - contributors that are there but that's a
19:34 - minor thing let me look at this címon
19:39 - rights so I did not know this I did not
19:41 - know this the Navy or Stokes algorithm
19:43 - is is an algorithm that plays out in 2d
19:46 - and there's lots of wonderful examples
19:48 - of it it's because me I am studious
19:51 - things because part one is named wrong
19:53 - okay I can fix that I even know how to
19:55 - fix that thank you
19:56 - in 3d we don't know if navier-- stakes
20:00 - will Stokes will even work it's a 1
20:03 - million dollar prize
20:05 - all right coding train enthusiasts
20:09 - let's go solve that prize I don't know
20:14 - that's probably for like some others
20:18 - YouTube's not for me you you might have
20:20 - some way of thinking about it that I my
20:23 - brain does not solve $1,000,000 prizes
20:25 - someday maybe it apparently it might
20:28 - almost some point get 1 million
20:29 - subscribers I don't know if it's my
20:31 - brain that's getting it or my just
20:32 - winning personality I think I got to
20:36 - start coding whoo okay okay yeah good
20:43 - look good all right let's let's stay
20:45 - within my will all right I'm gonna cycle
20:46 - the cameras oh no no I was gonna look at
20:49 - the community contributions apologies
20:51 - all right so this is epicycles redrawing
20:53 - with a user drawn loop by li LM Narayana
20:57 - and so looks like if I draw let me draw
21:01 - something like a figure eight and then
21:07 - i'ma hit start I love that do I have to
21:16 - press the key oh I press a key maybe or
21:19 - maybe it just took a while and got it
21:20 - now we can see nobody this is by the way
21:22 - is exactly what I'm gonna do I'm gonna
21:24 - expand this to work this way so you can
21:26 - see the epicycles are tracing the path
21:28 - but there's one set of epicycles rather
21:31 - than two one for the X is one for the
21:32 - Y's and I like that I can I love that
21:35 - you can do this with the slider whoops
21:41 - all right so there's some interface
21:43 - stuff that one thing I guess if I'm
21:46 - giving feedback here is like it's
21:47 - beautiful it works great I'm not really
21:49 - sure how to operate it it was doing like
21:52 - a really cool thing where it was like
21:53 - computing it and almost like the lines
21:55 - are just kind of wiggling into the spot
21:58 - and that was sort of beautiful but I
21:59 - didn't know to start me and start the
22:01 - epicycles dark my drawing reset oh is
22:04 - that so that might be something to look
22:07 - at there now rainbow units unicorn train
22:10 - driver by Juan Carlos Ponce Campuzano
22:13 - let's look at this one oh this is p5 web
22:15 - editor and there we go oh and I love
22:18 - about this so this is I don't I don't
22:19 - know that I'm going to necessarily
22:21 - actually I might have a way of showing
22:23 - how this works but look this is this we
22:25 - can increase or decrease the number of
22:26 - orbits so for example we just have two
22:28 - orbits this is all we get and the camera
22:33 - went off that's good so this would be a
22:36 - great feature to add to mine once I get
22:38 - it working as well so you can see this
22:44 - is what happens when you only have two
22:46 - orbits twenty-eight orbits so gruesel
22:55 - house just making a wonderful gift the
22:57 - all you need is now to put like
22:58 - turbulent flow is the bet better I don't
23:01 - what somebody like me text Turk
23:05 - turbulent flow over laminar flow or
23:10 - something I'm not my see it is it twenty
23:12 - minutes now this is exactly what I
23:14 - stopped being able to speak or make any
23:15 - sense that means it's time to tackle a
23:17 - complex mathematical formula anyway this
23:18 - is great this is basically showing you
23:20 - exactly what I would like to do today in
23:22 - this coding challenge epicycles
23:24 - approximate curve oh look at that oh I
23:27 - love this oh that is wild so you can
23:31 - kind of approximate the curve based on
23:33 - the number of epicycles that is really
23:36 - cool okay alright so guess what I mean
23:41 - if all goes according to plan in about
23:43 - an hour I'm gonna leave I don't know if
23:45 - I'm gonna do that KN Vic today in about
23:47 - an hour I'm gonna have exactly that and
23:50 - all the code for it and I will have
23:52 - explained it and I am also going to
23:56 - start from this so I'm gonna start from
23:59 - this and start from this okay so
24:02 - actually before we get started I would
24:05 - like to write this formula up on the
24:09 - whiteboard so please listen to the
24:10 - vistit song as always I always forget to
24:13 - dis stop it stop it stop this done
24:25 - I need to see the camera this star this
25:15 - star the star this star song never
25:17 - forgets to this start somebody composed
25:19 - that song for me
25:23 - alright almost done here whoops I missed
25:30 - something give me a second
25:33 - I'm just I think I can show you what I'm
25:37 - doing here I'm just writing out the
25:39 - formula so I have it for reference so
25:43 - big X sub and right I'm an automat and
25:47 - here no sub K right big X sub K equals
25:54 - summation from n goes to zero to big n
26:01 - naught n minus 1 of little X sub and
26:07 - multiplied and there's that this is sort
26:09 - of a dot product and I'll get to why
26:10 - that is okay all right house I feel like
26:18 - I want to switch the battery on the mic
26:20 - so what I'm gonna do is I'm gonna mute
26:22 - the mic for a second just just so I know
26:26 - that
26:57 - okay I should be bad
26:59 - have two bars so there's less of a
27:01 - chance of it less of a chance of it
27:07 - going blank okay sorry ah I'm all
27:13 - tangled up here okay I'm ready to go
27:40 - the code up here
27:50 - and we go okay
28:08 - all right so by the way if you haven't
28:11 - watched my live streams before I waste a
28:13 - lot of time mostly and then I attempt to
28:16 - do a coding challenge our tutorial and
28:18 - later the different pieces of it get
28:21 - edited into smaller shorter bite-sized
28:23 - videos that end up at different
28:24 - playlists so now is the time where I do
28:26 - the weird thing where I pretend I'm just
28:28 - like showed up here and nothing so that
28:30 - happened to the last half an hour
28:32 - happened ok hello it is time for yet
28:38 - another video about the Fourier
28:41 - transform and epicycles now you might be
28:43 - asking yourself what why I mean what's
28:45 - wrong with you what's this weird on
28:47 - Elfie obsession you have with Fourier
28:48 - transform that's a good question I'm not
28:51 - so sure actually but I do know that
28:53 - there is absolutely at least if not more
28:55 - one thing that I feel is very important
28:57 - to demonstrate to you as part of this
28:59 - series this now three-part coding
29:01 - challenge about drawing a path with the
29:05 - epicycle epicycles and the discrete
29:07 - fourier transform algorithm alright so
29:09 - what I want you to look at here from the
29:12 - previous coding challenge is this this
29:15 - is the coding train train logo being
29:17 - drawn by two sets of nested orbits and
29:22 - the frequencies amplitudes and phases of
29:27 - these orbits are all calculated from the
29:31 - discrete Fourier transform algorithm the
29:34 - discrete Fourier transform algorithm
29:36 - takes it over here and this is going to
29:38 - look like what are you crazy I'm not
29:41 - gonna watch the residents video but just
29:43 - stay with me or don't stay with me but
29:44 - stay with me if you if you feel so
29:46 - inclined don't worry if this looks crazy
29:48 - and weird to you I'm gonna help you
29:49 - through it
29:50 - yeah and actually I did this already if
29:53 - you and you might want to stop and go
29:54 - back and watch that first video but what
29:57 - the discrete fourier transform does is
29:59 - it takes any signal and that signal is
30:01 - we're represented here by X sub n signal
30:06 - and you can think of the signal as
30:08 - really just a list of numbers 1 5 10
30:11 - negative 3 7 9 4 right it's just a list
30:15 - of numbers it's saying that these could
30:17 - be the X values of a path
30:18 - it could be the y-values of a path they
30:20 - could be the values of a sub Soundwave
30:23 - there's so many types of things that
30:26 - this could be and it takes this signal
30:30 - and breaks it down into a collection of
30:33 - wave patterns each wave pattern has a
30:36 - particular frequency frequency meaning
30:39 - how many cycles does it repeat within
30:42 - one unit of time so how many repeats per
30:44 - second you might think sixty Hertz is 60
30:47 - cycles per second it also breaks it down
30:51 - into all so there's different
30:53 - frequencies but there's also different
30:56 - amplitudes and different phases so is
30:59 - this wave pattern like election a little
31:00 - bit offset one way or the other is it is
31:03 - it much taller is it much shorter it
31:05 - breaks it down and I can visualize those
31:08 - wave patterns as rotating circles okay
31:11 - so there's a lot that's a lot there I'm
31:15 - sure you have questions maybe hopefully
31:17 - some of this stuff is covered in a bit
31:18 - more depth in my previous two videos or
31:20 - of course in the supplementary material
31:23 - about the Fourier transform that I'm
31:25 - including as links in this video's
31:26 - description I've talked about those way
31:28 - too much but in particular I highlight
31:29 - the three blue one brown video about the
31:31 - Fourier transform that you might want to
31:32 - check out which goes into this in more
31:34 - depth now so here whoops so here I have
31:39 - two sets of signals
31:40 - I have X's oh no this is why it's
31:43 - actually have Y's and over there I have
31:46 - X's I treat them separately I apply the
31:48 - Fourier transform to each and then I
31:51 - render out these rotating circles and
31:53 - get this path what I want to do now is
31:55 - treat the signal the signal is not one a
32:04 - list a vector and array of numbers it is
32:09 - an array of pairs of numbers so we could
32:13 - think of the signal as you know x1 of a
32:16 - path x1 y1 x2 y2 x3 y3 and this is a
32:25 - really useful way of thinking about it
32:27 - because so much in computer graphics is
32:29 - this vector graphics scalable vector
32:32 - SVG's those are really just defined
32:35 - paths collections of points now we can
32:39 - do all sorts of crazy math if these
32:41 - points actually mean like draw a Bezier
32:42 - curve between them but I'm gonna do this
32:44 - in the simplest way and this is just you
32:47 - know if I had this was my path I would
32:52 - have three points x1 y1 x2 y2 x3 y3 and
32:58 - I would want to create three orbiting
33:00 - circles too to be able to render out
33:03 - this path that's what I want to do so
33:06 - how do what happens when the pairs of
33:08 - numbers go into this formula well guess
33:11 - what if you watch my first video I
33:13 - talked a bit how about how this is
33:15 - actually something known as a complex
33:17 - number a complex number is a number that
33:20 - has two components a real component a
33:25 - real number being the numbers we're kind
33:27 - of familiar with more office and then
33:29 - quote-unquote an imaginary number now
33:31 - the fact that it's called imaginary is
33:32 - unfortunate naming it's somewhat
33:34 - misleading but the idea is that it is a
33:37 - real number
33:39 - paired with the number I and the number
33:42 - I is the solution to the problem I
33:46 - squared equals negative 1 so this is
33:50 - often referred to as an imaginary number
33:52 - because it's kind of like what the
33:54 - square root of negative 1 but yet you
33:57 - can there is a solution to this we can
33:59 - that's a topic for a Khan Academy video
34:03 - of math video but if I can treat any one
34:07 - of these points as a complex number X
34:09 - plus so x1 plus y1 I then and that's
34:14 - actually what I was doing before I just
34:16 - was leaving out the imaginary component
34:19 - I just had a whole bunch of X's and a
34:20 - whole bunch of wise always in the real
34:22 - component so if I can actually have this
34:25 - single B and a list of complex numbers I
34:28 - could have this be complex numbers this
34:31 - is already a complex number then I just
34:34 - need to know how do I multiply two
34:36 - complex numbers together you got got
34:39 - that sort of baby let's let's go write
34:41 - some code I'm gonna go write some code
34:43 - because there's more to do over here but
34:45 - I think you
34:45 - they need to take a moment to breathe
34:47 - and absorb that a little bit and write
34:48 - some code
34:55 - hold on pause for a second I don't know
34:57 - I'm just a weak mine oh yes okay so a
35:06 - couple things people in the chat are
35:09 - mentioning I suppose the more
35:11 - traditional way to do this would be you
35:13 - would say x squared plus 1 equals 0 it's
35:16 - the solution to this maybe I'll come
35:19 - back and mention that I that to me is
35:22 - the same as this but maybe this is like
35:24 - an unconventional way to write it in
35:27 - mathematics so maybe I'll mention that
35:30 - then I don't understand K weak moons
35:32 - comment there no phase differences
35:37 - actually or there's no offsets what does
35:41 - that mean did I get something wrong
35:44 - there I thought the fate the phase is
35:48 - like the offset of where you start the
35:50 - angle that gif is really distracting me
35:54 - in the chat if it's like yelling so
36:02 - before I move on let me see if any of
36:05 - those things were like wrong just say I
36:09 - sent the square root of negative one
36:10 - before and somebody complained but
36:13 - that's like not the proper way to
36:14 - explain it it become so I was trying
36:18 - again I'm very very susceptible to user
36:21 - feedback
36:33 - you know not wrong I guess my question
36:36 - for you
36:37 - K week Mon is do I need to go back and
36:40 - clarify something or you just is your
36:42 - comment just like additional information
36:44 - that's interesting to discuss thank you
36:54 - for all the comments about the haircut I
36:56 - appreciate it I got this haircut from a
36:58 - wonderful new barber
37:00 - in Brooklyn I'm gonna go there forever
37:02 - now it's kind of expensive we also
37:03 - shared with me some like a beard oil
37:05 - that I've never used in my entire life
37:07 - I'm trying to be a more well-groomed
37:08 - person the eye explanation is perfectly
37:11 - fine what about the phase one is the
37:13 - phase one fine I need to say something
37:15 - about the phase
37:15 - no need okay okay okay okay okay
37:34 - okay
37:36 - okay so now we're coming back to the
37:38 - coach whoops
37:40 - what's wrong oh no all right I got to do
37:43 - this okay let me cycle the cameras while
37:45 - I'm here we're gonna check the
37:47 - microphone I still have two bars there
37:51 - and I have two bars here so that should
37:57 - be pretty good
37:57 - I dropped it I was Iggy I am NOT Ziggy
38:06 - asked me to drop the beard oil name but
38:08 - no oh wait till they become a sponsor
38:10 - thank you very much you could tweet at
38:14 - me I'll send it to you but I don't know
38:16 - this is not a buzz marketing YouTube
38:20 - channel unboxing
38:21 - maybe I'll just switch to an unboxing
38:23 - beard oil channel okay here we go all
38:28 - right so if we go back to the code where
38:31 - I left it off from this previous
38:32 - iteration which I have right here I had
38:36 - a particular JavaScript file for ei J s
38:39 - where I had my implementation of the
38:41 - discrete Fourier transform algorithm DFT
38:44 - X X being exactly that X sub n over
38:48 - there the array of the signal the array
38:51 - of numbers and then big X big X whoops
38:56 - where am I going
38:59 - it's freaking me out here and big X
39:03 - being this the array of complex numbers
39:07 - that came out that I get the phases
39:09 - frequencies and amplitudes okay so what
39:13 - I want is to rewrite this so that little
39:16 - X is actually an array of complex
39:18 - numbers and I think one way that I could
39:20 - do this is to actually put here I'm
39:24 - gonna write a complex number class now
39:27 - if you're paying attention or if you
39:29 - used p5 before you might be thinking to
39:32 - yourself oh just use p5 dot vector
39:35 - because actually I'm just gonna swing on
39:38 - it here over to the Wikipedia page about
39:40 - complex numbers look at this this is how
39:43 - you represent a complex number it is a
39:46 - vector in the complex plane where the
39:48 - what we think of as the Y ax
39:50 - is the imaginary access what we think of
39:52 - as the x-axis is the real axis and right
39:54 - here it says a complex number can
39:56 - visually be revision represented as a
39:58 - pair of numbers a B forming a vector on
40:00 - a diagram called the I never knew this
40:01 - Argand diagram ooh look at that
40:03 - we're stuff um so I could just use the
40:07 - fact that p5 has a vector class but I
40:10 - kind of want to pick the time to really
40:13 - think this through and I need to do
40:15 - complex number multiplication which is
40:17 - different than just like a vector dot
40:19 - product perhaps so it's similar but
40:23 - anyway so just let me do it myself so
40:26 - I'm gonna write a constructor I know
40:28 - that I should call these a and B maybe
40:31 - so one way to do is like a comma is a
40:34 - plus bi I think though I might stick
40:36 - with the real and imaginary so let's say
40:39 - real and imaginary but I'll leave these
40:43 - a and B so this is my complex number so
40:45 - this is what I wanted to do first so I
40:47 - just have a complex number and if I go
40:51 - back to the main sketch instead of
40:55 - having two separate x and y variables
40:57 - I'm gonna get rid of this let's get rid
41:01 - of Y everywhere in this code you know
41:06 - weird took away I'm kind of simplifying
41:08 - things let's get rid of Y everywhere
41:12 - well I'm not going to worry about this
41:14 - right now
41:15 - I'll come back to this in a little bit
41:17 - let's comment that out and let's so what
41:20 - I had before I you know again you
41:22 - probably want to watch the previous
41:22 - video is I have this big file that just
41:26 - has a ton of XY points for the path of
41:28 - the drawing and I separated them to
41:30 - separate x and y's and now what I'm
41:32 - actually going to do is say constant C
41:37 - equals a new complex number with the
41:41 - real component as the X and the
41:44 - imaginary component as the Y and then
41:47 - I'm going to push that into X so that
41:51 - array is now an array of complex numbers
41:55 - with the x and y's and in fact then I
41:58 - want to go here and say like you know
41:59 - what I don't want I don't need to treat
42:03 - these as separate real and imaginary
42:05 - components I have this idea
42:07 - I'm going to call it like the sum as a
42:11 - new complex number with 0 0 then the
42:15 - ideas I could say some dot real plus
42:18 - equals some dot imaginary plus equal
42:20 - right I'm going to treat this as a
42:23 - complex number object with two
42:25 - components the problem is this is no
42:29 - longer correct
42:30 - so I need to be everything is right but
42:32 - this no longer flies this asterisk is
42:35 - multiplication cosine of Phi is a
42:40 - floating-point number
42:41 - it's like a complex number with no
42:42 - imaginary component X previously X index
42:46 - n was just a single number so I need to
42:51 - rethink how these because this is now a
42:55 - complex number how do I multiply a
42:56 - complex number with another complex
42:58 - number that I have to completely rethink
43:00 - this okay kind of like took a long time
43:08 - to explain that but why not so the next
43:14 - step is for us to work out a complex
43:18 - number multiplication so typically you
43:23 - know if I'm going to if I'm gonna want
43:28 - to implement complex number
43:29 - multiplication in my source code I could
43:31 - actually just look up the formula for it
43:33 - and put it in the code but no electric
43:35 - behind today I started early today let's
43:38 - actually do it here so if I have two
43:40 - complex numbers let's say I have a plus
43:44 - B I and I want to multiply that and
43:47 - often reference this as references the
43:49 - dot product this is exactly what I have
43:50 - here by the way I want to multiply that
43:53 - by let's call that C plus D I then how
44:00 - do I do that
44:00 - well guess what what's this
44:03 - multiplication property called
44:05 - commutative we get the communitive
44:08 - you're gonna have to stop and look that
44:10 - up
44:19 - I'm over here commutative property of
44:22 - multiplication come on just give me like
44:29 - give me like an image to show me I'm
44:30 - thinking about this correctly no no no
44:34 - commutative is this oh yeah come you
44:44 - know associative no identity no
44:47 - commutative is any order no associative
44:50 - no associative distributive thank you
44:58 - thank you
44:59 - [Music]
45:01 - yes distributive thank you I knew us all
45:06 - right record scratch sound a commutative
45:12 - is the property of multiplication or
45:14 - addition where I could do these in
45:15 - either order and I would get the same
45:17 - result the distributive property is the
45:19 - one that I'm looking for where I can say
45:21 - a times well this a it's gonna
45:24 - distribute multiply times C plus this so
45:26 - I'm gonna say a times c plus a di right
45:32 - a times c plus a times di plus bi times
45:38 - C which is I could write as B CI plus
45:43 - well if this is crazy this is the fun
45:45 - part plus B I times di which is B D I
45:51 - squared hey guess what remember how I
45:54 - wrote up on the board over here I
45:56 - squared equals negative 1 by the way
45:58 - somebody pointed out that the
45:59 - traditional way you might see this
46:00 - written is like I is the solution
46:02 - 2x squared plus 1 equals 0 you see
46:05 - that's the same thing x squared equals
46:07 - negative 1 we could also think of it as
46:09 - the square root of negative 1 although
46:10 - somebody a youtube comment I had earlier
46:12 - said that's not a good good way to
46:13 - describe it but whatever this is
46:17 - negative 1 so guess what this becomes
46:19 - negative 1 which means this is just a
46:22 - minus and now a complex number is real
46:25 - and imaginary components what's the real
46:28 - the real component is a C minus BD and
46:32 - the imaginary component also I could pop
46:35 - out that distributive property again is
46:37 - a whoops ah a d-plus sorry plus B C I so
46:49 - this is the real component and this is
46:53 - the imaginary component we have just
46:56 - done what is why you can't believe this
46:59 - is the coding train first complex number
47:02 - of mathematics now that the truth of the
47:04 - matter is I could probably spend a whole
47:07 - video many videos building out an entire
47:09 - complex number class but I'm just gonna
47:12 - stick to what we need which basically is
47:14 - just the multiplication foil oh yeah
47:23 - I've heard this is called foil first
47:28 - outer inner last yeah
47:30 - I've heard that foil foil oh yeah
47:34 - first of all did I get that right let's
47:36 - just check it complex number
47:40 - multiplication
47:42 - no one does no one's saying I did it
47:43 - wrong a co Jai use the same naming a a
47:51 - plus bi c plus di a AC minus BD plus ad
47:59 - plus BC yes okay great
48:03 - first
48:08 - all right just in case just to be sure
48:11 - I quickly googled how do you multiply
48:13 - complex numbers and the same notation is
48:15 - here and the same answer dare I say is
48:17 - there and then I was also reminded also
48:19 - by the chat that there is an acronym
48:22 - foil for a way of remembering this first
48:25 - outer inner last first outer inner light
48:33 - I don't understand what that means who's
48:40 - the first outer inner last refer to
48:55 - oil man
49:11 - first oh oh I get it I get it I get it I
49:17 - get it I get it I get it I get it
49:19 - look how I figured it out first is you
49:23 - first multiply a and C together then you
49:27 - multiply the outer which is a and D
49:30 - right okay hold on
49:31 - first first outer inner last first outer
49:41 - inner last we've got a new coding
49:45 - train song called foil foil foil which
49:48 - also could stand for F oil which would
49:50 - be a useful acronym as well in our day
49:53 - and age okay now all right let's move
49:59 - this along here we're gonna have to edit
50:01 - that last little bit out don't get flame
50:05 - to the comments all right okay
50:16 - all right everyone okay we're getting
50:19 - close so now I need to just replace
50:22 - these two lines right I need to replace
50:26 - oh actually let's do this in a different
50:32 - way okay sorry all right so now okay we
50:41 - are ready now we can add a function here
50:46 - called multiply C so C being another
50:50 - complex number and I want to create
50:53 - another and the answer is a new complex
50:57 - number and the answers real component is
51:04 - first multiply the first of each which
51:10 - is this top and this is A's and the and
51:15 - the complex numbers a plus the out
51:24 - oh whoa first outer inner oh my god wait
51:30 - hold on let me let me sorry I let myself
51:38 - get way too distracted we come back to
51:42 - this so I'm gonna implement I was I was
51:45 - just gonna write the answer here but I
51:47 - have this complex number class so let me
51:49 - do a multiplication function okay
51:52 - Matt you re not a yes exactly exactly
51:57 - ah okay so confusing okay all right it's
52:04 - time now what we can do is take this
52:06 - result that we've got here and add it to
52:11 - the complex number class as a
52:13 - multiplication function so let's imagine
52:15 - I am saying I have a complex number dot
52:18 - multiply another complex number which
52:20 - I'll call C and so one the one complex
52:23 - number is this and the other complicacy
52:25 - so I need to make the the real component
52:30 - is this real component times I'm looking
52:36 - over there the whiteboard at this
52:37 - formula times C is the others real
52:43 - component minus this real component no
52:49 - yes no no this imaginary component
52:52 - because written this be over there times
52:55 - the others D is its imaginary component
53:00 - okay and then the imaginary component is
53:04 - this real component times the others
53:08 - imaginary component plus this imaginary
53:12 - component times the others let's see see
53:17 - see see is the others real component
53:23 - let's take a moment to meditate on that
53:25 - and wait for the chat tell me I get it
53:27 - wrong
53:28 - and then I'm going to say return a new
53:32 - complex number with this real component
53:35 - and this imagine
53:36 - okay so now I should be able to say some
53:46 - dot add X index n oh I need a new
53:53 - complex number okay
53:54 - so I also need now I need to make a
53:56 - complex number I'll call it C for what
54:04 - where's my marker I need to make a
54:06 - complex number that is cosine of this
54:10 - and negative sine of this okay so this
54:14 - is the this is I did this before but I
54:16 - just never bothered to separate it out
54:18 - so my my complex number is a new complex
54:21 - number with cosine of Phi and negative
54:25 - sine of Phi
54:26 - that's the complex number and then the
54:32 - if I take a sorry X some dot add X sub n
54:38 - dot multiply C so I want to add up this
54:45 - complex number multiplied with C added
54:48 - up to the sum what does that mean I need
54:50 - an add function and so if I go back to
54:54 - the 48 of the Fourier class up here I
54:57 - can write an add function which also
54:59 - takes a complex number and I just add
55:02 - the real components together and the
55:07 - imaginary components together like this
55:11 - now I've done something sort of terrible
55:13 - here where the add function adds to this
55:16 - particular complex number rather than
55:19 - returning a new one and the multiply
55:20 - function returns a new one and that's
55:23 - that's definitely an opportunity for
55:25 - refactoring this later but
55:29 - I'm gonna just leave that for now this
55:30 - is not good object-oriented programming
55:32 - design me about wanting to be static but
55:34 - I'm gonna leave that as is oh okay then
55:37 - I can say some and I'm just gonna do
55:40 - this let's just let's just leave this I
55:43 - could write a divided function but I'm
55:46 - just gonna leave this as this and I
55:48 - think dare I say this is now done this
55:51 - is now the version and some of the chat
55:56 - is telling me I've made a mistake so
55:57 - hold that thought this this is that this
55:59 - is the version of this algorithm where
56:02 - this array is no longer just an array of
56:04 - floating point numbers but is an array
56:06 - of complex numbers all right what did I
56:10 - get wrong see not other where did I
56:12 - write that where did I write mother ah
56:15 - yes this is see I was saying other in my
56:19 - head whoops but it is see thank you so
56:22 - let's just see uh dare I say let's just
56:27 - console.log Fourier X and see what I
56:31 - gets re is not defined for a line 33 I'm
56:38 - sure I forgot oh boy oh boy
56:40 - I forgot that now all of this is in an
56:46 - object again I could I could put in I
56:49 - should put in the complex number class a
56:51 - magnitude function and an angle function
56:54 - but I'll just do it this way and then I
56:57 - have to say this I'm just gonna this
57:01 - really should be refactored but I will
57:03 - leave it like this just to see if it
57:04 - works great so here we go and we can see
57:08 - what does it look like I have a real
57:10 - component I have a frequency I have a
57:13 - phase I have a real where's the
57:14 - imaginary component huh okay let's go
57:17 - back ah the imaginary component let's
57:19 - try that again I have in each one of
57:23 - these a real component and imaginary
57:25 - can't see this a real component and
57:27 - imaginary component of frequency of
57:29 - phase and amplitude those are all the
57:31 - things I need now we're not going to
57:32 - know if this worked till I try to draw
57:34 - it all these numbers they're there
57:36 - there's no not a number but I'm just
57:40 - going to hope
57:42 - there's a lot more code for me to write
57:44 - before I could actually run it so that
57:47 - this Tiffany sound is a premature all
57:50 - right so a couple things one is it's
57:51 - complaining to me that there's some left
57:55 - over for EI Y and sketch 958 oh okay
57:59 - well that's just the length I only have
58:00 - 48 X now whoops no errors this is a long
58:08 - timpani sound so I just need to do the
58:12 - epicycles this is stuff I wrote in the
58:15 - previous coding challenge it's
58:16 - calculating all the upper cycles based
58:18 - on a particular Fourier series that was
58:22 - calculate from the Fourier transform
58:23 - I don't need via separate VX and V Y so
58:28 - and I can just basically this is
58:31 - actually simpler now I don't need these
58:32 - lines and what I should be able to do is
58:37 - then it should actually just be this
58:39 - ironically it's a lot simpler right
58:40 - because all I need to do is get all the
58:42 - epicycles the epicycles return this
58:45 - function epicycles which I never liked
58:47 - that I capitalized the C so let's fix
58:50 - that this epicycles function basically
58:53 - goes through and calculates all the XY
58:55 - positions of the circles and angles it
58:57 - was done before but the same function
58:58 - should stand and now
59:03 - oh there's still an error in the hold on
59:06 - hold on hold on I'm being told that
59:10 - there is still an error in the multiply
59:12 - function this times are e this real real
59:22 - like this this CC this this CC real
59:25 - imaginary real real real real -
59:34 - imaginary imaginary real imaginary
59:42 - imaginary real I think it's right it
59:47 - looks right it looks right error line 14
59:49 - I think people are I think the problem
59:52 - is some people watching in the chat or
59:54 - like from 10 minutes ago and so they're
59:57 - seeing the error I'm pretty sure I fixed
59:59 - it the error that they're referring to
60:00 - okay so matsya we can in post I don't
60:06 - think we need this extra check that I
60:07 - just did cuz I think it actually was
60:09 - fine
60:23 - thank you thank you thank you Challenge
60:27 - is now done look at that
60:30 - whoo all right so that is the Fourier
60:34 - transform now okay quickly quickly
60:36 - quickly let's not go just yet
60:38 - I really vastly prefer the version where
60:42 - the user has to draw their own thing so
60:45 - oh there's also many things we could do
60:47 - you know what's interesting about this
60:48 - I'm this video needs to end but here's
60:50 - something you could try like for example
60:53 - where where am i doing the epicycles
60:56 - so in this episode close function I am
60:58 - doing all of them but look what happens
61:00 - if I just change this to one right
61:03 - that's just doing just the first episode
61:05 - if I change this to two these are just
61:10 - two epicycles and I could speed it up
61:12 - potentially if it's a lower number this
61:15 - is five so you can see this is the
61:18 - coding train logo kind of with smooth
61:22 - out and sort of much more primitive with
61:24 - only five epicycles you can kind of see
61:26 - how the contour of the cloud that looks
61:30 - sort of like cloud rainbowy thing is
61:32 - there but certainly you know I'd have to
61:35 - get up to like 50 and we can see with 50
61:39 - we can start to see oh this looks much
61:40 - more like it but it's a much curvier so
61:43 - there's a lot of ways and also I kind of
61:45 - like one thing I like so that's one
61:47 - thing you can try another thing you can
61:48 - try is I think it looks just really
61:50 - interesting without drawing the path so
61:55 - like what happens if I don't draw the
61:56 - path and also what happens if I don't
62:00 - draw the circles I really like just
62:04 - looking at this crazy thing because if
62:06 - you look at this could you possibly
62:08 - imagine what it's doing but I could then
62:12 - so I could create an interface where I
62:13 - change the way I'm visualizing it use
62:15 - different colors speed up slow down vary
62:17 - the number of epicycles that's a lot of
62:19 - things you could do to sort of play
62:20 - around with this idea I think what I
62:22 - would like to do right now very quickly
62:23 - however is go to this one user drawing
62:28 - so this is this is another version of
62:32 - the coding challenge that I made where
62:33 - the user
62:35 - draws something and very quickly let me
62:38 - bring in my new discrete Fourier
62:40 - transform algorithm to this one just so
62:42 - we can see this at play so what I'm
62:44 - going to do is I'm going to go over here
62:45 - to Fourier yes I'm going to paste it
62:49 - into here
62:50 - and so I now have the new algorithm
62:52 - there then we go into sketch KS and the
62:55 - drawing is so again I don't have X's and
63:00 - Y's just just the X's and the X is a new
63:07 - complex number with drunk with the x and
63:11 - y of the drawing as a component just
63:17 - want to see how quickly I can get this
63:18 - to work then I'm sorting it and then all
63:22 - of this is the same and then here this
63:24 - is just creating the drawing offset by
63:27 - the middle of the screen and then put
63:31 - that offset in here same sort of thing I
63:34 - can just change this I don't like that
63:38 - that function had the capital C in it so
63:41 - I must fix that as well
63:42 - little refactoring now instead of later
63:44 - I can get rid of these lines and here we
63:48 - go and now 26 I'm missing a parenthesis
63:52 - ah you know the parenthesis here and now
63:57 - all right let's see I'm gonna draw a
64:01 - little cat
64:03 - this is gonna be really sad what this
64:05 - doesn't work it has to be a continuous
64:08 - path be interesting to try to do this
64:10 - without like a continuous path you can
64:18 - see it did it calculated it but I need a
64:22 - better sound than that trombone thing
64:24 - it's a little cheesy
64:25 - I mean all this is cheesy for me what is
64:27 - not defined I better not do an elaborate
64:31 - drawing next time huh before I so let's
64:34 - just real Julien really quick okay now
64:36 - it works okay would you mind
64:52 - [Music]
65:06 - so now this really is the end of the
65:10 - coding challenge
65:11 - there it is Fourier transform of a
65:15 - complex number series into orbiting
65:18 - epicycles drawing this beautiful cat
65:23 - sound it's cat thank you very much for
65:25 - watching if you make something from this
65:28 - please share with me one thing you might
65:30 - try is go look at that quick draw data
65:32 - set from one some of my previous coding
65:33 - challenges or maybe these sketch are an
65:35 - N machine learning model you that those
65:38 - are the interesting things to combine
65:39 - with this right I think there's some
65:40 - interesting possibilities there okay
65:41 - what what what see you soon
65:54 - ohh-kay week mon is saying okay week
66:01 - mine is saying try and approximate
66:03 - version so I can't do that because I
66:06 - didn't store at the point I mean I could
66:09 - do it again I could add that to the
66:11 - drawing what time is it 11:30 huh well
66:15 - this video is gonna be a half an hour
66:16 - okay less than that this won't be a
66:19 - really long coding challenge am I crazy
66:20 - because I start at 10:30
66:22 - I wasted a half an hour now do it in 3d
66:28 - you go it in 3d what I think is also fun
66:38 - to do with this I'm gonna lose that cat
66:40 - now is I could draw a heart no no that's
66:46 - not what else that's a nice one actually
66:51 - simpler simpler drawings almost have
66:53 - more interesting but what I what I meant
66:56 - to do not that is I meant to just
66:58 - actually see how close to a circle I
67:01 - could draw that's terrible and you could
67:04 - see like that's pretty interesting to
67:06 - see like how close now I could try to
67:08 - trace this circle like how perfectly of
67:12 - a circle can I draw yeah that's pretty
67:16 - cool look at that
67:19 - that is wild I love that like to see
67:23 - there basically that's the air
67:24 - it's the error of the circle so what
67:27 - would it look like with just you know
67:30 - you should definitely read it in SVG
67:32 - files and do it yeah that would be a
67:33 - great thing to do so all these things
67:35 - are things hopefully you all as the
67:37 - viewers will watch and be creative is
67:40 - there a way to get the circles to sit
67:43 - outside each other is there a way to get
67:50 - the circles to do the camera just go off
67:52 - yet I don't understand what that means
67:54 - Oh to like well I mean I could certainly
67:58 - be more thoughtful about how I'm
67:59 - rendering them I don't know exactly what
68:02 - you mean about to sit outside of each
68:04 - other but
68:08 - yeah how to extract points from an image
68:13 - yeah that's a good question I don't know
68:17 - how to do that I think there's a variety
68:20 - of different ways you could do that
68:21 - certainly an SVG in theory is exactly
68:25 - that but an SPG is gonna have all this
68:27 - information in it about the different
68:29 - kinds of curves and vertices and how the
68:32 - shape is actually constructed that would
68:37 - be a good topic for another time enough
68:38 - anybody has any really good suggestions
68:40 - try to draw a square oh yeah that's a
68:42 - cool let's do that thank you for like
68:45 - distracting me from that question yeah I
68:47 - don't I don't there's I think a variety
68:49 - of techniques for doing that different
68:51 - code libraries actually will do this for
68:53 - you like for example there's processing
68:56 - just have this library called geometry I
68:57 - think it still exists which will extract
69:00 - the path from like a font I don't know
69:02 - if it does generic SVG's processing as
69:05 - an SVG loader I mean to something called
69:07 - a piece shape and it may have some
69:09 - algorithms in there that then allow you
69:10 - to extract the arbitrary vertices but
69:12 - yeah me I'm sorry says I also do the
69:15 - circle on an even rate although I could
69:17 - do also this thing called RDP RDP
69:20 - algorithm is rammer Douglas puker is not
69:27 - the right name for it is decimates a
69:31 - curve decimates a curve composed of line
69:34 - segments to a similar curve with fewer
69:36 - points so this would be also I should do
69:38 - this as a coding challenge I need to do
69:40 - this we need to add this feature to ml 5
69:42 - in the sketch RNN class anyway let's try
69:44 - the square
69:56 - that's pretty interesting to see but
69:59 - once again I could feed in welcome new
70:03 - member David Schneider hello thank you
70:06 - the lights are flashing in my house by
70:08 - the way joined in the middle of the
70:11 - mountain lights started flashing last
70:13 - night we up I think I'm gonna have to
70:14 - turn that off for a while I'm sleeping
70:16 - but thank you whoever choice in the
70:19 - night last night right it'll be
70:25 - interesting I mean one thing I'll be
70:27 - interesting to actually just to do
70:30 - Fourier transform to like the path of a
70:32 - like a flocking agent and think there's
70:34 - so many possibilities here let me check
70:36 - the super chat membership log okay
70:45 - that's the regular chat ah okay so thank
70:48 - you new members Benjamin grosser ty
70:50 - Smith mister Uggla thank you for your
70:55 - sponsorship of me getting the original
70:57 - book of random numbers and thank you
70:59 - David Schneider and remember what about
71:02 - a star alright okay okay this is this is
71:06 - the point I make this and then you can
71:07 - go have fun with it I don't know if I
71:11 - have the energy for the kan thing right
71:13 - now this is kind of cool
71:20 - there you go there is the star or what
71:25 - could I do today so I guess I could I
71:28 - have to go at 12:30 so there is 45
71:30 - minutes I mean part of me wants to just
71:32 - do one multiple to stay true to my like
71:35 - multiple livestreams one thing one thing
71:39 - per live stream like a I feel like that
71:42 - took a lot of mental energy towards got
71:44 - out and I'm a little bit drained I think
71:48 - starting the canine stuff that's too big
71:50 - of a project to try to tackle in the
71:52 - next 45 minutes that needs a whole
71:54 - session so I could dare I say I could
72:02 - dare I say just do like one more of
72:04 - these and load the quick-draw dataset
72:10 - people are saying KNN please oh that
72:13 - makes me sad please do kN all right
72:19 - all right all right all right let's
72:23 - erase this I'll do a little of the KNN
72:34 - the KNN stuff by the way is covered in
72:38 - the live stream I did it grow Paris
72:53 - I could also just sit here and do a
72:55 - dramatic reading of that paper on
72:58 - lattice boltzmann flow I would make sure
73:05 - all this is saved I'm gonna be uploading
73:07 - this not to worry it's gonna take a
73:23 - minute for me to set up here
73:52 - sign in here alright let's try to do the
73:58 - KN thing today I did I did sort of
74:00 - promise it and so I need to do the
74:03 - two-factor thing
74:32 - there's like a security thing mean these
74:34 - authentication codes come and go I don't
74:35 - can't imagine there's a reason for me to
74:36 - worry about typing it in here pretty
74:44 - sure we haven't updated the reference
74:47 - yet let me check yeah can and it's not
74:51 - on here where's the ml5 stuff
75:13 - [Music]
75:25 - I'm looking for I'm looking for where I
75:29 - last left off and this is gonna go on
75:31 - the beginner's guide to machine learning
75:33 - I don't think this will be a coding
75:34 - challenge and I'm just looking for where
75:36 - that's duh I know I mean I don't really
75:38 - it's fine I don't need I don't need it I
75:42 - just was curious um so let's make
75:44 - directory a cannon and let me just grab
75:52 - this is good to grab
76:22 - I think his current version
76:51 - I'm just getting myself ready it's some
76:54 - starting code
77:23 - I'm I am just getting so I want to start
77:28 - with base code that already has the
77:30 - video in it why is this not formatting
77:41 - that's weird
77:43 - why is my code formatting not working
77:46 - unsaved we've got going here
78:04 - this thing initialize our sketch line
78:07 - one
78:25 - okay um hold on why first of all there's
78:30 - a 7.3 FP v now oh I can't do it that way
78:42 - if it's gonna be global variable okay
78:50 - okay so that's working
79:19 - sorry hold on
79:36 - I just want to start I'm this is gonna
79:39 - go in just so you know where this is
79:44 - going this is going in so not even here
79:56 - I don't have that as a shelf anywhere on
80:00 - my homepage okay this is going in here
80:04 - so basically what I'm about to do will
80:08 - be in this playlist probably around
80:12 - eight prettier extension at the bottom
80:16 - is showing an X which means you have a
80:18 - syntax error that's why it's not
80:19 - formatting okay thank you so this is
80:26 - going to go I think in this playlist
80:27 - that's why I'm gonna start with this
80:30 - base code let's see does this run
80:32 - already
80:46 - so that
80:53 - just seeing if this is only if this is
80:56 - going to work okay yep does this matter
81:12 - I'm ready yeah okay great all right so
81:24 - so I'm almost ready to start
81:27 - it still skates 11:50 and then was I
81:33 - going to say what else do I need
81:38 - oh yeah why is my prettier not working
81:40 - oh now it is working oh there was just
81:43 - some air ah but I want single quotes I
81:46 - don't really care I'm not gonna I'm not
81:56 - gonna worry about this okay I'm gonna
82:01 - oh it's double quoting it automatically
82:03 - that's fine I don't care I don't care
82:07 - all right
82:18 - okay okay please hold
82:28 - [Music]
82:55 - [Music]
83:09 - test one two
83:11 - cause my microphone doing two bars two
83:18 - bars all right
83:20 - [Music]
83:28 - [Music]
83:39 - [Music]
83:52 - [Music]
84:17 - all right question how do you say this
84:22 - word how do you pronounce logits logits
84:41 - how do you say it what is it short for
84:43 - something
84:44 - define logits the logic function ok
84:50 - hohoho loge it legit it's a little bit
84:57 - of a cold can I hear it
85:02 - no loge it would seem the log odds the
85:09 - logarithm of the odds interesting logits
85:15 - like logics here's this low look that
85:21 - that specifically says low jet half an
85:30 - hour later logits logits lodges it can't
85:43 - possibly be wrong because it's on
85:48 - YouTube put it on Google Translate
85:58 - that's an interesting idea
86:04 - lock it log it I don't think that's
86:08 - right
86:09 - Loggins Loggins what if I what if I want
86:14 - it to be in French yeah I like that
86:20 - better
86:22 - I don't know lo JIT nobody knows nobody
86:32 - knows nobody knows nobody knows how to
86:34 - pronounce his word machine learning
86:41 - pronounce logits
86:54 - pronunciation
87:00 - whoa that's low this would be lo lo
87:04 - right lo JIT lo jet I'm sorry but I
87:14 - cannot possibly teach k9 cuz no idea put
87:17 - down flow jet logic low jet
87:21 - alright I'm gonna just go with low jet
87:22 - because that's what it says let's just
87:27 - try one more economic job rumors
87:45 - well no I don't want well I don't want
87:49 - like all these stuff
87:51 - well they tricked me look they got me
87:53 - with the start now button logic
88:05 - regression hmm not you to aggression
88:09 - larger progression
88:11 - I guess it's logit seems to be logic
88:14 - logic regression a larger progression
88:17 - logit regression logic regression not
88:23 - you to regression a lot of logits all
88:29 - right I'm putting that aside now I've
88:37 - got like a logit all right I mean good
88:45 - point Bruno says wrong pronunciation he
88:48 - goes more comments correcting you more
88:50 - video relevance for the YouTube
88:52 - algorithm okay
89:00 - so I'm gonna basically okay
89:16 - oh this is this is not using K&N
89:23 - classification oh hello annoying that's
89:28 - fine that's funny this is using the
89:33 - other way of transfer learning that's
89:35 - fine so we will keep the teacher one
89:37 - machine up this is an experiment that
89:44 - lets okay
90:11 - No do you hear that weird sound there's
90:19 - like a weird high-pitched sound Luigi
90:22 - [Music]
90:36 - okay great I am ready we're gonna begin
90:39 - this video logit logit logit logit I'm
90:51 - gonna say logit
91:11 - all right I'm not really super prepared
91:15 - but let's do this anyway
91:30 - oops
91:31 - this camera is off apparently no oh
91:39 - whiteboard camera went out that's not a
91:41 - good sign oh dear
91:49 - oh there we go okay
92:09 - okay
92:17 - hello I am back in the beginners guide
92:20 - to machine learning with ml 5 and today
92:22 - I am continuing this series and I'm
92:25 - going to do a few videos about something
92:27 - called kN and classification and the
92:30 - thing that I'm going to use it and apply
92:32 - it to is building your own teachable
92:36 - machine now this is the teachable
92:38 - machine project from Google Google
92:40 - Creative Lab demonstrating this idea of
92:42 - transfer learning taking a pre trained
92:45 - model and using it as a foundation to
92:48 - train a new model on top of didn't you
92:51 - already make these videos there was that
92:54 - whole thing with the feature extractor
92:55 - and classification regression and saving
92:57 - the model yes you are right I did
93:00 - already make those videos however I'm
93:02 - going to basically do the exact same
93:04 - thing
93:04 - again but with a slightly different
93:07 - technique and that technique is called
93:09 - cannon classification which has some
93:11 - advantages there are pros and cons to
93:13 - both these techniques and at the end
93:14 - maybe I can sort wrap up and look at why
93:16 - you might pick one over the other but
93:18 - the main advantage one of the main
93:21 - advantages of KNN classification is it's
93:22 - sort of training the training the model
93:25 - is happening as you're adding new images
93:28 - as opposed to a separate step and I'll
93:29 - get into why that is in a bit so this is
93:32 - the teacher machine project you can go
93:34 - to teachable machine with Google comm
93:37 - and what I'm gonna do is I've already
93:40 - trained this and so if I'm just standing
93:42 - here in the middle it's thinks it's I've
93:45 - trained it doesn't know I'm just me
93:46 - standing here with kind of like a angry
93:48 - look on my face that's orange my hand to
93:51 - the left as green my hand to the right
93:53 - as purple so what I want to do is
93:56 - emphasize that what you can actually do
93:58 - is build a gesture based controller for
94:01 - some type of game using this technique
94:04 - you could do this with the other way as
94:05 - well but it's not something I really
94:07 - looked at it as just a new way to like
94:09 - classified new images but here let's
94:11 - think about if I'm trading a model in
94:13 - real time to understand that I hand is
94:15 - holding up on my left and my hand is
94:17 - holding up on my right or I'm I know
94:19 - hands up at all you could imagine I
94:21 - could control a character a pong paddle
94:23 - to move left or right and maybe up or
94:25 - down so that's what I'm gonna do it's
94:27 - going to take a few videos as a bunch of
94:28 - things to get for
94:29 - but that's the idea all right so you can
94:31 - play around with this website to get a
94:33 - sense of this is a really nice interface
94:34 - there's an ml 5 version of this this is
94:39 - built with tensorflow J s ml 5 which is
94:41 - a library built on top of tension large
94:42 - s we have a similar version all of this
94:44 - work was done by sorry I'm in the wrong
94:48 - place all this work was done by yuning
94:54 - she 4 ml 5 and yuning she has been
94:56 - teaching a class called machine learning
94:58 - for the web at i TP and why you thank
95:03 - you so much for you tuning for allowing
95:05 - me to be inspired by and use your
95:07 - materials in these tutorials
95:09 - hopefully yunying will come and be a
95:11 - guest again on the coding train and to
95:12 - show some additional examples of things
95:14 - you can do with kN classification and
95:16 - you can highly recommend you look
95:18 - through this syllabus and examples and
95:20 - there's also a whole presentation about
95:22 - Kanan classification that's eating
95:24 - slides that you could look at but what
95:26 - I'm gonna actually follow is this
95:29 - article written by Nikhil flora who is
95:32 - one of the creators of tensorflow das
95:34 - one of the members of the research team
95:37 - at Google Google brain developing
95:40 - tensorflow yes you can see here and this
95:42 - is a notebook about how all of this
95:45 - stuff works and I'm going to basically
95:47 - go through this but not use the code
95:50 - here the code that's provided here if
95:54 - there is any code wait hold on yes sorry
96:00 - Matt - you can do a nice slide it there
96:01 - I'm not going to use this code which is
96:05 - kind of the raw tensorflow j/s code I
96:08 - encourage you to look at it and think
96:10 - about how it works and and you might
96:12 - this might be a place where you actually
96:13 - want to get more lower level into it but
96:16 - I'm going to use the new ml 5 k9
96:20 - classifier feature that is in the ml 5
96:23 - library now this feature is only in the
96:26 - light you're gonna want to make sure
96:27 - you're using at least version zero point
96:32 - 2 point 1 of ml 5 so as of version zero
96:37 - point two point one the can--and
96:38 - classifier is part of ml five
96:40 - but I will mention at the time of this
96:42 - recording that documentation is not yet
96:45 - up on the website but hopefully by the
96:46 - time this video is released as part of
96:49 - that playlist you will find the
96:51 - documentation on the website ml 5 j s
96:53 - org alright so now let's do this
97:19 - okay slide URL okay all right all right
97:42 - so let's start going through this
97:43 - article and let's start right here at
97:46 - this moment of background mobile net now
97:48 - this is mobile net the mobile net model
97:50 - is something that I've used in just
97:53 - about almost every video up until this
97:55 - point so if you've been watching the
97:57 - playlist you're somewhat familiar to it
97:58 - mobile net this is our first step load
98:00 - mobile net and mobile net is a machine
98:04 - learning image classification model
98:06 - that's been trained to recognize 1,000
98:09 - classes of images and it was trained
98:12 - based on a huge database of images known
98:15 - as image net this is typically I've said
98:17 - this before but this is a database that
98:19 - exists for researchers to use and try to
98:22 - develop machine learning algorithms with
98:24 - but it's not necessarily a model that
98:26 - just works particularly well in kind of
98:29 - like generic applications of image
98:31 - classification out in the world because
98:32 - it knows a lot about birds and dogs but
98:34 - not anything not about a lot of other
98:36 - stuff that appears in the world however
98:38 - it is a good basis to load to the first
98:41 - step one is to load this model it's a
98:44 - good basis from which to extrude this
98:46 - feature extraction process this transfer
98:48 - learning process which we did before and
98:50 - we're gonna do now in a different way so
98:51 - the next step is to then create create
98:57 - what's called a feature extractor so
99:03 - this I'm gonna I'm going to show you in
99:05 - the code this is actually basically what
99:07 - I've done before so this is what mobile
99:09 - net does here you can see it like can
99:11 - look at an image it could tell you what
99:13 - the probability of a particular class
99:14 - like Egyptian cat tabby cat tiger cat
99:17 - remote control apparently there is a
99:19 - like almost two percent chance it's a
99:21 - remote control okay cat you are not a
99:24 - remote control to me all right so now
99:26 - what I have already which is basically
99:29 - from my previous examples is a and let
99:31 - me just fill that out
99:33 - what I have already which is basically
99:35 - from my previous examples is a sketch
99:38 - that loads the image from the webcam and
99:40 - display displays it in the window and I
99:43 - also like I said have a reference to the
99:46 - ml5 library and I also have this feature
99:49 - extractor loaded so I'm using p5 I'm
99:53 - connecting to the webcam using a p5
99:55 - library to connect to the webcam and
99:57 - draw the webcams image and then I'm
99:59 - using ml 5 to create a feature extractor
100:02 - with the mobile net model so now we can
100:06 - go back to Nikhil's article and scroll
100:09 - down but like ok so this is actually
100:11 - this is the end result that Kat softmax
100:14 - so what does this mean so the mobile net
100:18 - model is a neural network that expects
100:24 - an input of an image that image comes in
100:32 - and it's processed over a variety of
100:35 - different layers so the image is like
100:38 - transformed and processed and twisted
100:41 - and turned and all of that is the neural
100:43 - network process which you know you'd
100:45 - have to refer to some of my other videos
100:46 - and other reference materials to
100:48 - understand about how more how this works
100:50 - underneath the hood but by the end what
100:53 - it gets is a big vector a big list of
100:57 - numbers that are all probabilities they
101:01 - all add up to 100% and if you look at
101:04 - that here that's what we're seeing here
101:06 - and we're seeing all the way over here
101:08 - like these classes have a very high
101:10 - probability so somewhere in here we're
101:13 - getting this like number like 0.9 you
101:15 - were getting 0.7 maybe we're getting
101:17 - point zero five and all of all sorts of
101:21 - other numbers they add up to one hundred
101:23 - and point nine is probably this
101:26 - particular number is the number that
101:28 - corresponds to the probability of it
101:29 - being an Egyptian cat so this is what
101:32 - mobile net would do on its own but both
101:37 - this stage is called the softmax stage
101:39 - softmax is a fancy term for normalizing
101:42 - the output of all of this process to a
101:45 - set of probable
101:46 - the values that all add up to a hundred
101:48 - percent but there is there are stages
101:50 - before one stage before the state before
101:55 - is called the logits and I really I felt
102:00 - like by the way before I record this
102:01 - video I smell like a half an hour trying
102:03 - to figure out I pronounce it whether its
102:04 - logits or logits and a lot of places
102:06 - said low jets and some other places said
102:08 - logits I'm gonna go with logic like
102:09 - logic or logical but you can see this is
102:13 - actually what the logics look like it is
102:15 - the unnormalized the non-normalized
102:19 - output of the neural network it is a
102:24 - layer I shouldn't be using my hand I
102:28 - have an eraser it is the layer right
102:32 - before this is called the logits and
102:37 - it's just like a lot of numbers who
102:39 - knows you know it's probably normalized
102:42 - within some type of range actually but
102:44 - it's a whole lot of numbers and softmax
102:46 - is applied to get this last output which
102:49 - is good for classification but this
102:51 - layer all of these numbers this is
102:54 - referred to as the features I know I
102:56 - explained this in a previous video but
102:58 - in case this this is useful to sort of
103:00 - give this another try and it's kind of
103:01 - again we haven't really gotten to the
103:03 - next step is where something pretty
103:05 - different is gonna happen this is still
103:07 - the same as before and so we can look at
103:10 - it this is this is what those cat logits
103:13 - look like and you can notice there's
103:16 - Peaks still around here but there's lots
103:19 - of other stuff going on and you can see
103:21 - the Keele rights this is a semantic
103:24 - semantic fingerprint of the image right
103:27 - it is this is basically the essence of
103:30 - the image the boiled down acid miracle
103:33 - essence of the image as perceived by the
103:36 - bubble net model so because an image
103:39 - itself right let's say this image I
103:42 - forget what the dimensions mobile net
103:44 - requires is is like maybe 224 by 224
103:47 - pixels this is like a lot of numbers so
103:50 - you could say this is the literal
103:52 - numeric representation of the image is
103:54 - all of the RGB values of every single
103:56 - pixel but that's too many numbers
103:59 - work with and compare and try to make
104:00 - sense of the image so this pre-trained
104:03 - model has already learned how to boil it
104:06 - down to just one thousand numbers and if
104:09 - we have one thousand numbers we can
104:12 - start to compare this image to let's say
104:16 - another image so this is the feature
104:20 - extracting extraction getting these
104:22 - features that essence the semantic what
104:25 - was what it wanted to kill right
104:26 - semantic fingerprint of the image if I
104:30 - have two semantic fingerprints of two
104:33 - images that are arrays of numbers
104:35 - there's lots of math that I could start
104:37 - to apply to them I could say well how
104:38 - similar are they well how similar are
104:40 - they compared to these other images or
104:42 - what if I were to sort of like move
104:44 - interpolate between one image to another
104:46 - and you've seen some of these maybe like
104:48 - our artistic visualizations of the
104:51 - output of neural networks as like moving
104:53 - through you might hear like walking
104:55 - through the late into space so this idea
104:57 - of like interpolating between the
104:59 - features of images to generate something
105:01 - all this is interrelated but here this
105:04 - now finally is the moment where I can
105:06 - say this is how it relates to K N and
105:10 - classification because K and M stands
105:13 - for K nearest neighbors so if we get the
105:18 - logits for an image I could say well
105:21 - what other images have I seen previously
105:23 - that this semantic fingerprint is very
105:27 - similar to then this image is within
105:30 - that category of those images that's K
105:33 - nearest neighbor so I'm gonna wrap this
105:35 - up and we're going to start implementing
105:37 - the code in the next video but let's
105:39 - take one more step let's actually look
105:41 - and see with ml5 how easy it is to get
105:45 - those logics so I'm gonna come back over
105:49 - here and I am going to industry this is
105:54 - my code right so in my code I have the
105:58 - video and I have a feature extractor the
106:01 - feature extractor I'm just calling it
106:02 - features is preloaded with the mobile
106:05 - net model so now what I'm gonna do is
106:07 - I'm just gonna say I'm just gonna have
106:09 - house pressed which is not what I'm
106:11 - gonna want to do
106:12 - ultimately and I'm going to say features
106:15 - dot infer video
106:17 - so the infer function is the naming I'm
106:20 - a little unsure about this naming but
106:22 - it's what the maybe it'll change at the
106:24 - API at some point but this is the idea
106:26 - of inferring the logits from this
106:29 - particular image so this could be a
106:31 - static image but since I have the video
106:33 - to whatever the snapshot of the video is
106:35 - right now and this could go into the
106:39 - logits this is basically giving me that
106:41 - particularly object and I'm gonna do
106:43 - something that it's gonna look weird I'm
106:45 - gonna say console.log logits like
106:47 - shouldn't that show me just an array of
106:49 - numbers not not exactly but I'm gonna
106:52 - show it to you let's see what happens so
106:54 - let me refresh this
106:56 - okay the model is loaded now I'm gonna
106:58 - click and you see what Oh what well this
107:01 - looks kind of d-type float32 okay
107:04 - floating-point numbers there's a
107:05 - thousand of them what's all this
107:07 - nonsense look at all this this looks
107:10 - crazy well guess what we just waited by
107:13 - accident are kind of on purpose there's
107:15 - a different purpose into TF Jas
107:18 - territory now we we to continue writing
107:21 - this code we don't ever have to look at
107:24 - the tension flow digest documentation
107:26 - but this isn't moment to realize like ml
107:28 - five isn't some magical thing that
107:30 - exists on its own it is operating on on
107:33 - top of tension flowed at us meaning it's
107:35 - managing something called it the tensors
107:37 - for you what's a tensor a tensor is
107:40 - basically a fancy word for an array of
107:42 - numbers or a matrix of numbers and so
107:45 - the logics are a tensor it's a
107:47 - one-dimensional array of all those
107:49 - numbers so there are actually a tensor I
107:51 - can actually look at those values in the
107:54 - console by saying logits
107:57 - I can actually logic print so let me do
108:00 - that now and if I click here now you're
108:05 - gonna see there it is now it's not
108:07 - printing it all out but you can see like
108:08 - oh that looks like an array of numbers
108:10 - and another way I could do it is I could
108:12 - say console dot log logits data sync so
108:18 - data sync is a function these are
108:19 - functions that are part of tensor flow
108:21 - GIS and you can go back and look at my
108:23 - tensor flow tasvideos as back
108:25 - where I goes to them this more
108:26 - specifically this is a function that
108:28 - gives me dot data as a regular array so
108:31 - last step here would be to do this click
108:35 - and there you go this is the this these
108:39 - are the logics this is the digital
108:42 - fingerprint of that image so we are now
108:45 - ready
108:45 - we now hopefully from watching this
108:48 - video
108:48 - you understand me a little bit about
108:50 - what can and classification might be but
108:52 - that's what I'm gonna get into that
108:53 - you're loading mobile net the
108:55 - pre-trained model you're creating a
108:57 - feature extractor which knows how to
108:59 - pull out the logits of the of the mobile
109:04 - net model with a given input image and
109:08 - then we're passing in an image from a
109:10 - video and instead of getting the
109:12 - classification getting just that digital
109:14 - fingerprint and that semantic digital
109:17 - fingerprint this is exactly what we're
109:19 - going to do in the next video to train a
109:21 - model a cam and classification model
109:23 - alright so if you want to keep watching
109:25 - then keep going in this playlist if the
109:27 - video doesn't exist yet it's because I'm
109:29 - still working on it but it'll be there
109:30 - soon bye
109:38 - okay wait a second so how many so how
109:43 - many horrible mistakes did I make I
109:48 - guess I've been looks like from
109:51 - go-faster Dan all right I like to
109:57 - explain things we can edit it down it is
110:02 - 12:20 I'll see if I can finish this
110:05 - today so I think I was kind of
110:11 - conflating I think I was being
110:18 - loosey-goosey I guess maybe I'll mention
110:20 - us the beginning with my kind of oh it's
110:22 - an array it's a vector it's a tensor
110:25 - technically speaking and maybe I'll
110:27 - mention this when I start than a tensor
110:29 - is an n-dimensional I don't know array
110:33 - is the right way but like an
110:34 - n-dimensional set of numbers but it's
110:38 - Simon right and dimensional thing right
110:41 - not really in writes and dimensional
110:42 - collection of numbers whereas an array
110:48 - is an array a list of things in code so
110:52 - it's that these are similar concepts but
110:54 - there are some there's some nuance there
110:56 - tensor is a much more sort of like
110:57 - generic term for this idea okay
111:08 - they are tuples not vectors okay
111:18 - let me just look at the definition of a
111:20 - tensor no not tensor flow what can I say
111:27 - besides the thing yeah could we possibly
111:40 - write this in a more confusing way
111:42 - tensors of geometric rot but I mean it
111:43 - is accurate that's what a nice
111:55 - yeah I think I think I don't need to get
112:00 - into the detail of this so but I will I
112:06 - will mention something I will I will
112:08 - mention that okay all right we are ready
112:14 - to do the canine classification
112:18 - right matrix okay thank you that is
112:21 - actually a very good point scalar is
112:25 - yeah M dimensions thank you
112:30 - these assignments writing some very
112:31 - helpful things here into chat okay
112:32 - construct all right thank you to new
112:37 - member sarah bloom our what am i doing I
112:47 - am looking for I'm looking for France
112:55 - I just want to since I don't have the ml
112:57 - five reference to look up I have my code
113:00 - from the workshop in France that I'm
113:04 - just pulling up over here in case I need
113:06 - to look up the names of any functions
113:09 - where was that I don't remember where I
113:14 - put that was it is it in Schiffman
113:18 - github Schiffman I'm sorry I'm looking
113:23 - on the invisible computer repositories
113:29 - the tank workshop yep so I'm looking at
113:34 - shift github.com / shift mint / the tank
113:38 - workshop because the code is
113:51 - let me look at the yet let me look at
113:57 - the final sketch example I just I don't
114:00 - remember all the functions are name
114:02 - classify load classify features can and
114:12 - classifier okay clean an ad example okay
114:18 - great okay okay alright
114:36 - whoops Oh as I did it before the models
114:39 - ready okay
114:53 - okay
115:21 - all right we are ready to continue our
115:25 - ml5 K&N classification but I'm calling
115:28 - game controller I want to be able to
115:30 - create an interface by which I can train
115:33 - a little a little controller for a game
115:36 - to move something left and right maybe
115:37 - up and down that's what I'm doing it's
115:39 - the last video I left off with at this
115:41 - step where I love the mobile net model I
115:45 - create a feature extractor I passed in
115:47 - an image from the webcam and I get the
115:49 - logits out so one thing I do want to
115:51 - mention on people in the chat were
115:52 - helpful I was being a little bit loosey
115:54 - goosey with the terminology of like
115:55 - scalar vector matrix and tensor and so I
115:58 - should mention that a scalar right being
116:01 - like a single number is really is really
116:04 - zero dimensions a vector is typically
116:07 - like a list of numbers which is really
116:11 - one-dimensional a matrix is thought of
116:14 - as a grid of numbers this is 2d and a
116:17 - tensor is a term to describe the sort of
116:20 - n-dimensional possibilities of any
116:23 - collection of numbers so a tensor can be
116:27 - can be zero dimensions one dimensions
116:30 - two dimensions three etc so that's what
116:33 - those terms mean and in this case the
116:35 - logits come out as a one-dimensional
116:38 - tensor and the shape of it the
116:39 - dimensions might actually be something
116:40 - different underneath the hood below yes
116:42 - but that's one way of thinking about so
116:44 - hopefully that helps clarify a little
116:45 - bit but let's now move on and I'm going
116:49 - to the next thing that we're gonna do is
116:51 - we're just only going to work from
116:52 - assuming that we have the logits and the
116:56 - algorithm we don't have to write
116:58 - ourselves I think I have a video where I
117:00 - do some kind of KN writing the algorithm
117:02 - out we will so we're like movie
117:04 - recommendations or something I'll try to
117:06 - reference that in the video's
117:07 - description but the next thing we need
117:10 - to do and I don't know what step I was
117:12 - on it's like four is create an ml five
117:17 - K&N model it's gonna be empty it's gonna
117:22 - be create an empty one so I'll explain
117:25 - what that means in a second but this is
117:26 - an empty one so the way that I do that
117:28 - let me go back to the code is I'm going
117:31 - to say I'm gonna make another variable
117:32 - I'm gonna call it k n N and then in
117:35 - setup I'm also gonna say k NN equals ml
117:39 - 5 k NN classifier I think that's how I
117:44 - write it let's see if that works and
117:47 - then if I look at it here this looks
117:50 - good
117:51 - looks like I've got one I've got some
117:53 - functions Oh hold on timeout
118:02 - wait this isn't right
118:12 - time out for a second here this is not
118:14 - with the new names this is weird
118:37 - there's no ml5 right okay oh hold on a
118:45 - sec apologies I'm not seeing the right
118:51 - names for the functions I don't think so
119:01 - on what I'm looking for is in the source
119:03 - scan and classifier index add example
119:09 - classify classify clear label clear all
119:13 - labels and yet when I see here is clear
119:25 - all classes key clear class we'd have to
119:30 - get my pre-built version of the library
119:36 - wait I tested this the other day
119:42 - all right let me explain what's going on
119:45 - here
119:45 - we recently did a release of ml5 library
119:52 - and I thought it had the these new names
119:58 - for the functions in it but pmj s ml 5
120:04 - I'm not seeing the new names that's the
120:17 - latest
120:23 - I could just build the library myself
120:27 - but I did reference saying you had to
120:28 - have zero point two point one I'm
120:37 - waiting for somebody to it's 12:30 I
120:40 - know I know I have a little more time
120:42 - I'm waiting for someone to figure this
120:44 - out for me but like nobody is so I have
120:46 - to figure this out myself so when I did
120:51 - this was weird when I did the workshop
120:55 - in France I had let me download this
121:11 - sorry when I did the workshop in France
121:14 - where's the tank what I'm going to do is
121:19 - go to Caden image example let me just do
121:27 - that the sketch we created in the live
121:29 - stream which has all the stuff that I
121:34 - want to do okay so I'm going to do
121:37 - download okay and then I am going to
121:46 - weird I already downloaded this one a
121:48 - different one I'm going to extract it
121:52 - I'm gonna put it on the desktop and I'm
121:57 - going to what is going on with my
122:18 - let's see if this works whoa something's
122:32 - going wrong here I think I know what
122:35 - that problem is
122:40 - sorry everybody had a little we've had a
122:49 - little bit of an issue here there's
123:01 - actually a mistake in this code which I
123:02 - can fix I just realized
123:05 - which is this should not this I should
123:20 - not be doing until the model is ready
123:27 - okay so this is where I can't remember
123:30 - what the classes were but this is in
123:32 - that example this is working and now if
123:38 - I go to
123:45 - here let me just get these things so
123:54 - instead of using let's use this local ml
124:00 - 5 so still work that still works now let
124:15 - me use ml 5 2.10 it works what
124:52 - hold on worse
125:17 - it still has the wrong function names
125:19 - here - looking in the wrong place I'm
125:26 - like losing my mind here this is so
125:33 - weird wait this is working yeah
125:44 - it's getting clearer labels that's fine
125:49 - it should have an error now that worked
125:51 - out huh but clear all classes is not a
126:02 - function
126:02 - but if oh oh I'm losing oh I'm so silly
126:08 - oh I was wasted so much time I get it I
126:15 - get it I get it
126:20 - I'm so silly
126:23 - everything was fine all along I
126:26 - overthought it let me now explain to you
126:30 - what my problem was so this is the KN
126:39 - object that we're working with here are
126:43 - all of the functions I was looking for
126:45 - get count get classifier data set clear
126:48 - lives save load these are the functions
126:50 - I'm looking for I went weirdly I went to
126:54 - here and started looking at these
126:56 - functions guess what these are all the
126:59 - tensorflow j/s native functions I have
127:02 - like some slightly different naming and
127:03 - some more stuff clear train data set
127:05 - matrix I was just completely looking in
127:07 - the wrong place everything is fine sorry
127:12 - for wasting your time there I have no
127:14 - idea where I was but I will figure that
127:16 - out we'll close this I will I don't need
127:21 - this little tank workshop won't open
127:23 - anymore
127:25 - which one I don't need this one open
127:28 - anymore
127:30 - I was in the code here and I was here ah
127:40 - let's see mine get a little further try
127:43 - at least finish this does anybody
127:46 - remember what I was doing
127:55 - they might remember what I was doing
127:57 - before I got lost in that I think I had
127:59 - I was over here and I said create an
128:03 - empty ml 5kn model so I walked over here
128:07 - and this was me creating the empty one
128:12 - okay well let me just do that again
128:18 - because I don't know I went off I went
128:21 - off the rails there so let me minimize
128:25 - this do this
128:35 - okay sorry everybody
128:37 - and I can close this out close this out
128:40 - okay
129:00 - okay
129:06 - all right
129:09 - so something something created empty ml
129:12 - 5kn model okay
129:24 - something something created empty ml v
129:27 - model okay now where do I want to do
129:33 - that so I have I have my video I have my
129:36 - feature extractor and now sorry I also
129:43 - have to go soon
129:45 - something something created by model so
129:50 - I'm going to add a new variable kN
129:54 - and then in setup also and I may have to
129:59 - move this somewhere else eventually but
130:00 - for right now I'm going to say KN is a
130:03 - new ml 5kn classifier simple as that so
130:08 - I have the feature extractor and the
130:10 - classifier I think it's time to talk
130:13 - about what is K&N classification luckily
130:18 - for us we can refer back to the Kiehl's
130:21 - article thank you again to Nikhil for
130:23 - publishing this and I'm going to skip
130:26 - through some of this more examples of
130:28 - different logits and I'm going to look
130:31 - down here and and look at this so this
130:34 - is a nice example demonstrating the idea
130:38 - of K nearest neighbors so let's sort of
130:43 - recreate that visualization over here on
130:46 - the board so I can talk through it a
130:48 - little bit let's say this is a two
130:51 - dimensional space it is and I'm going to
130:55 - put in this two dimensional space a
130:57 - bunch of A's and a bunch of bees now
131:03 - I've written them in a kind of certain
131:04 - way to make it very obvious in fact if I
131:08 - wanted to I could draw just visually I
131:10 - could sort of understand what's where's
131:11 - the critical decision boundary between
131:13 - these two different categories and I
131:17 - could kind of draw like this that's just
131:18 - me eyeball again I'm not sure if that's
131:20 - exactly those are the exact mathematical
131:23 - the decision boundary but and then I
131:26 - could say like oh if I threw a dart at
131:28 - the wall the darts either going to be
131:30 - like over here or it's going to be over
131:32 - here it's going to be either of Class A
131:36 - or of Class B it's going to be either I
131:39 - want to classify it now the way that K
131:42 - nearest neighbor works the N stands are
131:45 - nearest the N stands for neighbor the K
131:47 - stands for how many nearest neighbors
131:50 - are am I looking for so the way that it
131:53 - actually works the way that the decision
131:55 - boundary is computed let's take it out
131:57 - for a second is that if I were to look
132:00 - at any given point like this one let's
132:02 - say I have a K of three and typical you
132:06 - would want a K that's an odd number
132:08 - because what you want to do is it's
132:10 - basically like a voting system I want to
132:12 - look for the three nearest neighbors and
132:15 - in this thing I mean literally nearest
132:16 - the Euclidean distance by Euclidean
132:19 - distance by proximity in two-dimensional
132:22 - space which are the nearest well I can
132:24 - eyeball it I could say this is the
132:26 - nearest this is the nearest and this is
132:28 - the nearest so these are my three
132:30 - nearest neighbors they're they all vote
132:32 - and three to zero this spot gets
132:35 - categorized as an a we could get a
132:38 - little more complex like what if I went
132:40 - over here like I said what are the three
132:42 - nearest neighbors well this is the
132:44 - nearest this is the nearest and this is
132:46 - the nearest ah by a vote of two to one
132:50 - actually this K being odd is actually
132:52 - irrelevant because you can have more
132:53 - than two classes so I'm breaking the tie
132:56 - as a thing but but here I could say by a
133:00 - vote of two to one this point is
133:02 - classified as a B and this is exactly
133:06 - what
133:06 - Nikhil's visualization is doing and in
133:09 - fact this would be nice too to actually
133:12 - do make do a coding challenge of just
133:15 - like doing exactly this like remaking
133:17 - this visual explanation but what I can
133:20 - do here is I can vary this like I can
133:22 - say let's look at a three class example
133:25 - let's make a much larger like eight and
133:28 - we can see here this is showing which
133:32 - what category it is hold on
133:35 - close this make this little small
133:37 - ah so I could see it and I can also show
133:42 - that decision boundary and you can see
133:43 - here this is the decision boundary so
133:45 - this is the idea of K nearest neighbor
133:47 - wait so that might make sense to you it
133:50 - you might be thinking yourself what wait
133:52 - something's got this like
133:53 - two-dimensional graph at a bunch of
133:55 - points which ones and your each other
133:56 - what does that have to do with images of
133:58 - cats and logics of a thousand well it
134:01 - doesn't as something very specific to do
134:04 - with it in fact the reason why Nikhil
134:08 - picked that example in his write-up and
134:11 - the reason why I'm drawing it this way
134:13 - to explain it to you is because our
134:14 - brains are very well-suited to think in
134:18 - small amounts of dimensions two
134:20 - dimensions three dimensions so you could
134:23 - think of each one of these points in
134:25 - two-dimensional space as the logits that
134:28 - just has two values its x and
134:30 - y-coordinate but what the feature
134:35 - extractor does so I'm gonna say I'm
134:37 - gonna say like infer from an image right
134:41 - remember this step from the previous
134:43 - video this gives us a thousand logits a
134:47 - list of a thousand of the thousand
134:51 - numbers and I said like what if we got
134:55 - two of them two lists of a thousand
134:58 - numbers how could we compute which the
135:01 - it's the distance between these two
135:04 - things like it's weird to think about
135:07 - how do I think about the distance
135:08 - between two things in a thousand
135:10 - dimensional space
135:11 - well actually the formula that you would
135:14 - use for Euclidean distance in
135:16 - two-dimensional space is the same exact
135:18 - formula that you would use in a thousand
135:19 - dimensional space beyond the scope of
135:20 - this video I could make another video
135:22 - maybe it's you know basically it looks
135:24 - like the square root of the difference
135:26 - between all the values squared added
135:28 - together it's like the Pythagorean
135:29 - theorem but actually this Euclidean
135:32 - distance formula is not such a good one
135:34 - for higher dimensional spaces it kind of
135:37 - breaks down because you could have a lot
135:38 - of the numbers similar but just one
135:40 - number really far away from another one
135:42 - so there is actually other ways of
135:44 - calculating distances one of which is
135:46 - called cosine similarity or cosine
135:49 - distance and actually have referee
135:51 - that in my word to vectorial zazz well
135:53 - this comes up exactly in that word to
135:55 - vex stuff and this is a way of looking
135:58 - at you could think almost as if I wanted
136:00 - to compare a and B I might look at the
136:03 - angle between them right if if this is
136:06 - the origin right and I'm looking at
136:08 - these two points in 2d space are they is
136:12 - there a small angle between them that's
136:14 - kind of like what cosine similarity is
136:15 - doing but what's that sort of like angle
136:17 - between in a thousand dimensional space
136:19 - but the point is if I can infer the
136:25 - logits from an image I can build up a
136:28 - database a database of let's say cat I
136:32 - can then use the what I'm going to do is
136:35 - use the ad example function so ml five
136:38 - has an ad example function that I give
136:41 - the logits and the label so I can
136:45 - basically build up a database of a lot
136:47 - of logits labeled with cat and store
136:51 - them so that later when I get a new one
136:54 - I could see where is this new one in one
136:57 - dimensional in one thousand dimensional
136:58 - space near all those cat ones this is
137:00 - exactly we're gonna do so in other words
137:02 - let's come back here and I'm going to
137:09 - say under mouse press now instead of
137:11 - console logging it out I'm gonna say KNN
137:14 - add example cat and actually what I'm
137:18 - gonna do is I'm gonna add left and right
137:21 - I'm gonna try to do left and right
137:22 - because the idea is I want to control
137:24 - something so I meant of example these
137:26 - logits
137:27 - are categorized as left and I'm gonna
137:30 - change this to keep rest this is sort of
137:33 - silly what I'm doing but I'm going to
137:34 - say if key equals forget how I do the
137:39 - error if key equals L again I should be
137:45 - building a nice interface for this but
137:52 - this is going to just do the trick right
137:56 - so what I'm doing now is I can now build
137:59 - up that database this is the model the
138:01 - kN
138:02 - model is actually just the big database
138:05 - of all of the logits that are labeled
138:07 - alright so the idea here is that I
138:09 - extract the features from the video when
138:11 - I press L on saying like this is one to
138:13 - the left and when I press R this is one
138:15 - to the right let's take a look at that
138:16 - go back here click in here to give it
138:21 - focus so I want this is confusing cuz
138:23 - it's not mirrored this is my left you
138:26 - see it as my right this is my left hand
138:27 - so I'm gonna use my action left and I'm
138:29 - gonna press L so I'm training it and
138:34 - then I'm gonna do this and press R a
138:36 - bunch of times now of course I should be
138:38 - consul long to see what's happening but
138:40 - I at least can look now at that KN
138:42 - object and I can look in it and see what
138:47 - are some functions I can call I can do
138:50 - get number of labels to write left and
139:00 - right I could also probably like how
139:02 - many how many examples are there but
139:04 - this is me training it sorry ah I didn't
139:08 - mean for that to come up then if that
139:11 - part out okay thinking thinking we're
139:18 - actually not too far we're not too far
139:21 - from being done
139:22 - oh two labels oh and look left and right
139:31 - it even notice that map string to index
139:33 - that's there okay so now there's a let's
139:38 - think so now what what about what I do
139:40 - let's use mouse breasts let's go back
139:42 - and use mouse breasts
139:44 - what if I get something new and I want
139:46 - to classify it
139:47 - aha so let's say this is me training it
139:50 - like here's a bunch of less here's a
139:52 - bunch of rights and when I click the
139:54 - mouse I want to see what it is currently
139:58 - so what I'm going to do now is i'm also
140:01 - going to infer the logits from the video
140:04 - then I'm gonna say KNN classify those
140:08 - logits uh here's the thing this is where
140:11 - I now need a callback
140:12 - so everything so far I've been able to
140:15 - do
140:16 - criticize it but this is where this is
140:20 - now the the computer the ml5 library and
140:22 - tensorflow j/s but nice needs to like do
140:25 - something for a little bit let me know
140:26 - when it's done so I am going to stay at
140:29 - a function called got result and I'll
140:33 - just write a separate function again I'm
140:34 - doing this in a very sort of like es5
140:36 - callback kind of way you can use
140:38 - promises and all of that as well if you
140:40 - if you prefer that but I'm gonna say got
140:42 - result result and I'm just gonna say
140:47 - console.log result just see what that
140:50 - looks like so now I press keys to train
140:53 - it and you know it would be nice for me
140:55 - to console.log something so console.log
140:58 - left just so I see that it's working
141:02 - console.log right
141:05 - so I just console.log something there
141:07 - again if you are you doing this you
141:09 - probably wanna build a whole interface
141:10 - for this I'm doing everything with just
141:12 - key presses and console logs which is
141:14 - super awkward in terms of like user
141:16 - interaction but allows me to test and
141:17 - iterate and explain this idea more
141:19 - quickly
141:20 - alright so now refresh so what I want to
141:24 - do is by the way I'm gonna get an error
141:27 - so from Canon classify is not a function
141:30 - well oh I spelled it wrong classify so
141:33 - here's the thing I want to say like if
141:35 - okay I only want to do this if it's
141:38 - ready to classify I want to say if KN
141:40 - what was it what did I say can an get
141:47 - count or get number of labels or
141:49 - something I'm gonna say if can an get
141:50 - number of labels is greater than zero
141:54 - then actually do the classification
141:57 - pause for a second just turn off the
142:01 - sound there okay okay here we go
142:08 - I said now let me refresh and I'm going
142:14 - to click over here and train it left
142:18 - here's like 20 images train it right
142:22 - here's 20 images 2017 is 21 now I'm
142:27 - gonna click the mouse do this wrong and
142:34 - now five uses error first callbacks p5
142:37 - doesn't and so I'm so used to just the
142:39 - result being the first thing but the
142:41 - error and any error always comes in it's
142:44 - the first the first argument to the
142:46 - callback so I'd want to say if error
142:47 - console I probably want a hint like you
142:50 - know there's many ways I could actually
142:51 - handle the error otherwise console.log
142:55 - result and got to do this again it's
142:56 - fine here we go okay so I'm gonna train
143:02 - it wait no what's to the 21 I'm gonna
143:09 - try to do about the same amount 22 now
143:13 - please say left left please say right oh
143:21 - no looks clicked in the wrong place no
143:25 - right it's that right anyway right left
143:31 - it's working well that's exciting so
143:33 - we've done it now we this is basically
143:35 - it right and I could just so you know by
143:37 - the way I could say let's add one more
143:42 - let's call it up one of the advantages
143:45 - of doing K&N like I was saying this
143:50 - Canon classification unlike the other
143:52 - feature extractor with transfer learning
143:54 - example that I went through previously
143:55 - this requires no separate training step
143:59 - the model is just the database of
144:02 - training images and it's able to do that
144:04 - distance calculation in real time so
144:07 - also I can add labels later I can add
144:10 - new images later so you can kind of like
144:12 - train and classify all at the same time
144:15 - in a very flexible way that's one of the
144:17 - advantages of doing
144:18 - this can and classification way all
144:20 - right let's let's do one more thing
144:23 - which is let's actually just have it
144:26 - constantly try to guess so I'm gonna
144:29 - make a label paragraph I'm gonna say
144:36 - label paragraph equals create P need
144:42 - training data then what I'm going to do
144:46 - is let's just make sure that's working
144:49 - so it says need training data there then
144:53 - what I want to do is this Astraeus is
144:56 - [Music]
144:59 - I'm going to have a boolean variable
145:01 - called ready have it be false and then
145:06 - in in draw write whoops what I do
145:19 - uh sorry everybody I want this basically
145:26 - since draws looping anyway there's a
145:28 - more elegant way I could do this as long
145:30 - as it's not ready and if it's not ready
145:34 - and there's at least one label I could
145:37 - start so I can start this classification
145:39 - and I can now say ready is true and then
145:44 - in the classification I can when I get
145:47 - the result what are the results look
145:49 - like they have a class index confidence
145:56 - confidences by label so and the actual
146:00 - label so I can get the label I can say
146:02 - label p8 HTML result label and then
146:08 - guess what I can do right then I can
146:12 - classify again I probably want to break
146:15 - this out into a function but I'm just
146:17 - gonna copy paste the code right here
146:18 - whoops ah this video was going very well
146:22 - a moment ago well as well as could be
146:25 - expected
146:26 - okay and I don't need
146:26 - ah no that's not right I want to do
146:30 - these two lines of code what do I want
146:32 - to do let's put this into another
146:33 - function go classify I mean I could
146:37 - think of a better name for this and
146:40 - actually let's take this I'm gonna do
146:45 - this I'm gonna make this a little nicer
146:47 - I'm gonna do go classify there so if
146:50 - this is true then go classify will
146:53 - refactor it because why not this
146:56 - callback is a little silly to have it as
146:58 - a separate function let's just make this
147:00 - an anonymous function and put it in
147:07 - right here
147:08 - so this is maybe a little show so this
147:11 - is what I'm doing I'm basically saying
147:12 - classify what is classified do it gets
147:15 - the logits it calls classify with the
147:18 - logits then it has a callback at either
147:20 - gives an error it labels it and then
147:23 - guess what it does go classify again so
147:26 - this is kind of this recursive just like
147:28 - classify it when you're done classify
147:30 - again when you're done classify again
147:31 - okay let's see here needs training data
147:37 - needs training data so let me do this
147:39 - I'm gonna give it some left whoops
147:41 - kind of click over here so it's only
147:45 - going to ever be able to classify
147:46 - anything as left right now and at some
147:49 - point it knows that it's right left
147:54 - right left okay let's let's train it
147:58 - better first of all one thing that's
147:59 - bothering me is it's very hard to see
148:01 - that so style font size this is how this
148:08 - is how CSS works it with p5 do too big
148:16 - okay let's try this one more time here
148:19 - we go everybody
148:22 - that's so loud
148:28 - give it lots and lots of examples of me
148:31 - with my hand to my left about 50 of them
148:34 - now let's give it lots and lots of
148:37 - examples of me with my hand to the right
148:42 - you know maybe ok now left right left
148:49 - right left right left left right oh yes
148:56 - up ok so this is good so guess what
149:00 - we're kind of there I mean there's so
149:01 - much there's a lot of stuff what's
149:03 - what's missing here now first of all I
149:04 - want this to actually be able to control
149:07 - something like moving a paddle left and
149:11 - right and then also I might not want to
149:14 - have to Train it every time now I think
149:15 - there's interesting probably a lot of
149:17 - really unique applications for you to
149:19 - make something that the user is actually
149:20 - expected to train their own controller
149:22 - there's a tensorflow Jess what examples
149:25 - on has an example of training your own
149:27 - controller control pac-man I'll link to
149:28 - that in this video's description but in
149:30 - this case what I might like to show you
149:32 - is that I could sit here and train it
149:34 - for a while save that and load that
149:36 - model into like a different sketch which
149:38 - is just doing the classification to move
149:40 - something so um that's what I'll do in
149:42 - the very last video and I'll add up as
149:45 - well
149:46 - so the last next step that I'm gonna do
149:48 - is add saving and loading as well as a
149:50 - simple game mechanic to control as well
149:53 - and you probably you you save and load
149:55 - function or just call that save and load
149:57 - and so you might even try this yourself
149:59 - before you watch the next video where
150:01 - I'm gonna do it ok goodbye I'll see you
150:03 - soon okay is it 1 o'clock yeah so I
150:11 - definitely need to go I don't let me
150:15 - check my calendar sometimes I have more
150:17 - time than I think cuz I would be nice to
150:19 - just kind of finish this because there's
150:25 - not there's like very little left to do
150:27 - here
150:46 - okay hold on now now I'm like crazy
150:49 - looking at my email which I don't want
150:50 - to do calendar
150:56 - [Music]
151:08 - okay I have a little bit of flexibility
151:10 - here so much for my short life live
151:13 - streams alright I want to finish this I
151:15 - want to finish this because there's
151:21 - really very little left to do
151:35 - Wow look at that let's see if I can do
151:42 - down and up
151:43 - let me try let's just give myself a
151:51 - little bit of time to train it some more
152:11 - I'm curious how like how well it's able
152:15 - to just so this would be to the right
152:17 - actually look at my heads on the right
152:19 - of the screen
152:19 - no but if I want to move it's not I
152:22 - really should this is really awful like
152:24 - yeah I'm gonna make this to the right
152:26 - because I want to move it I move this
152:29 - way I wanted to go to this way yeah okay
152:34 - no this will be left
152:34 - I'm gonna use my vote yeah Ola let me
152:36 - just see do I have a okay let's see just
152:43 - want to see if it'll actually train
152:45 - according to the just the position of my
152:47 - head
153:28 - left
153:30 - right
153:40 - it works pretty well I mean the thing is
153:42 - I'm gonna I'm gonna talk about this all
153:45 - right all right we're gonna finish this
153:47 - off okay
154:14 - welcome back I'm gonna finish this ml
154:18 - 5kn classification example for like a
154:21 - gesture based controller so I just in
154:24 - between the last video and this one I
154:25 - just sort of trained a quick KN model
154:27 - where if my head is up here
154:29 - it registers as up my head is down here
154:32 - it registers is down over here would be
154:34 - to the left and over here would be to
154:36 - the right now you know interestingly
154:38 - enough you because I have a green screen
154:41 - here and I'm a sort of like quite a
154:43 - different color than the green screen I
154:45 - could probably just do this with some
154:46 - image processing and like pixel
154:48 - manipulation to sort of like check where
154:50 - my head is so with a lot of if
154:51 - statements that's a sort of interesting
154:53 - thing about like you can almost think of
154:54 - you doing machine learning it's looks
154:56 - like automatic if statement I think is
154:58 - one way of thinking about it but I also
155:00 - should note that I'm actually almost
155:02 - somewhat surprised that this is working
155:04 - because you have to remember the image
155:07 - classification model mobile net that
155:09 - this is built on is trained off of like
155:12 - a lot of things like dogs and cats and
155:15 - objects it really has never seen people
155:17 - there's no images in the database with
155:19 - like a green screen so I would have
155:21 - actually expected to actually think all
155:23 - of these images wherever I am are kind
155:26 - of similar according to the way it
155:27 - thinks about the world whereas if I were
155:30 - to like do this like that's going to be
155:33 - like remarkably different so there might
155:36 - be some ways that you could use the sort
155:40 - of the the the way the your
155:43 - understanding of how mobile net was
155:45 - trained and what kind of images were in
155:48 - there to have other images that are the
155:51 - most distinguishable for it to like
155:53 - learn about but this is something you
155:55 - probably have to do you could do through
155:56 - research and you could do through trial
155:57 - and error interestingly enough even if I
155:59 - move the computer rounds it's still
156:00 - going to work up-down left-right so I'm
156:06 - really at a huge advantage here having
156:08 - the green screen but if you're using
156:09 - this to build some kind of kiosk
156:11 - installation and you have it doesn't
156:13 - have to be green but like a fixed
156:14 - background that's gonna allow users to
156:17 - come play with and have it work pretty
156:18 - well alright but the next thing that I
156:19 - need to do right so what I want to do is
156:21 - two things in this video number one I
156:22 - want to be able to save it so I should
156:25 - actually
156:26 - this time training it as soon as i
156:27 - refresh the page I'm just gonna do it
156:29 - it's gone all of that training data is
156:31 - gone so I want to be able to add savings
156:32 - so let's add that first and I'm just
156:35 - gonna do that I'm also just I'm gonna
156:36 - keep doing everything in key pressed if
156:39 - key equals S I'm going to say cannon dot
156:42 - save model JSON so I think this is what
156:46 - it is but basically all everything that
156:50 - it's learned all of those logits and
156:52 - labels are all sitting in memory and I
156:55 - could spit them all out into a JSON file
156:57 - so let's just do that really quickly
156:58 - without a lot of training so I'm just
157:00 - gonna like arbitrarily train a bunch of
157:02 - things up and down and then let me hit s
157:06 - and we can see I got this model JSON
157:10 - file there it is I want to put it in
157:14 - pause for a second here I want to drag
157:24 - it over into my code folder so I could
157:28 - actually the other thing they'll be
157:29 - interesting to do is let's actually take
157:30 - a look at it and look at this look at
157:34 - this what's in this craziness this is it
157:36 - it's just like lists of numbers tons and
157:40 - tons of listed numbers with with the
157:42 - labels and you might think uh this is so
157:44 - much data is it gonna run so slow how is
157:45 - it going to do it but actually if you
157:47 - look at it if you look at it reveal in
157:50 - finder you know I didn't have that many
157:53 - examples but this is just a you know 600
157:57 - byte file so kind of kilobyte file about
158:00 - 559 bytes fired fifty-nine thousand
158:02 - bytes but oh I can't speak anymore
158:05 - hold on what what's uh matchy let's do a
158:10 - little like editing magic here
158:21 - let me do that again
158:29 - because let's get rid of all this stuff
158:36 - let's have
158:42 - this year just to make this like a
158:43 - little more elegant in the final video
158:49 - all right let me save whoops what just
158:54 - happened oh it was already there all
159:04 - right let me save oh all right let me
159:16 - save all right let me grab this model
159:23 - JSON file I'm gonna just drag it over
159:25 - into my code directory so now we can see
159:28 - that oh shoot it's one more time like
159:35 - sequencing is hard
159:44 - all right I'm gonna press s to save then
159:48 - I'm gonna go to the download directory
159:49 - I'm gonna grab this model dot JSON file
159:51 - just drag it into my code folder I
159:53 - already have one in there because I did
159:55 - this a few times how was it in there
160:00 - okay oh my god that's weird time this is
160:08 - really silly I should just like forget
160:10 - all this editing nonsense I'm spoiled by
160:12 - the possibility of editing now this used
160:15 - to just be how it was right deep breath
160:20 - there's nothing there all right I'm
160:25 - going to click Save then I'm gonna go to
160:28 - the Downloads directory you can see I
160:30 - now have a model JSON file I'm gonna
160:33 - drag it into my code folder and then I'm
160:35 - gonna go over to Visual Studio code and
160:37 - take a look at it there it is look this
160:39 - is actually the saved K&N model all this
160:42 - stuff you can see there's lots of
160:43 - configuration information up here this
160:46 - is kind of the domain of tensorflow jas
160:48 - this is all the stuff that tensorflow
160:50 - toucheth needs we could kind of ignore
160:52 - but interestingly enough you can see
160:53 - like look at this it's a whole lot of
160:55 - arrays of how many numbers I think we're
160:58 - gonna get down to wait what I don't know
161:07 - how it stores it why is it how does it
161:10 - store it forget I just shouldn't have
161:12 - said anything
161:13 - yeah it stores it in some way I just
161:16 - assumed there'd be what are these oh
161:19 - these are all the examples I'm so
161:21 - confused I don't know how it's Orson I'm
161:24 - not gonna bother trying to explain these
161:27 - are the tensors zero one Oh cuz it's all
161:31 - okay I'm gonna ignore nevermind
161:36 - ah all right this is all the domain of
161:41 - tensorflow Jas and figuration stuff
161:44 - that's super interesting you could go we
161:46 - could do a deeper dive into that but we
161:47 - don't have to worry about that we could
161:49 - see that all the numbers of all the
161:50 - logits are all in here it's just a big
161:52 - file with all this stuff all the logics
161:55 - and all the labels and the configuration
161:56 - information that tensorflow jazz and ml5
161:59 - needs now I should use might be thinking
162:03 - wow it's like a lot of stuff in there
162:05 - you know well how big of a file is that
162:07 - and actually it's just text and it's
162:09 - just 561 kilobytes so even if I had like
162:11 - hundreds and hundreds and hundreds or
162:13 - thousands of training images it's going
162:15 - to be fine you have to remember it's
162:17 - taken an image file which we work with
162:19 - all the time and boiling it down to just
162:21 - 1000 numbers so even though it is stored
162:23 - ultimately as text it's much less data
162:26 - and there are ways of optimizing the
162:28 - storage and all sorts of something that
162:29 - but ultimately this is a perfectly
162:31 - reasonable thing to do so now let's
162:34 - actually do a better job at training it
162:37 - let's actually get a better model to
162:39 - Train so I'm gonna hit refresh and oops
162:42 - oh I lost in next I HTML somehow pops
162:45 - timeout I deleted text so wonder
162:49 - somebody probably knows I don't have the
162:51 - chat up anymore
162:52 - I lost my index course Simon Says I lost
162:54 - my index file well I'm sorry to make
162:57 - this an editing nightmare Matz yeah
163:00 - [Music]
163:02 - where's the trash get that back trash
163:09 - where's index.html here it is this must
163:13 - be it
163:24 - interestingly yeah oh because if I click
163:29 - Save or s or something whatever
163:31 - all right let's alright we refresh and
163:39 - now let's try to train a new model so
163:42 - I'm gonna do a please bear with me about
163:44 - this could be we could speed this up so
163:46 - let's train 50 up I'm just picking 50
163:53 - arbitrarily 58 it down this is left and
164:11 - then this is right
164:21 - all right I've trained it let's see if
164:24 - it's working pretty well right left down
164:28 - up that left wasn't super great let's
164:31 - see but I just not give it enough time
164:33 - let's give it some more training move
164:38 - around here some more see we can make
164:40 - that more accurate left right down up so
164:46 - I'm sure we could do things to improve
164:47 - the accuracy that's good enough I'm
164:49 - going to click s for save Oh what s what
164:57 - Network error oh that's sad okay why is
165:03 - this not working what is going on
165:16 - what
165:30 - [Music]
165:32 - no why am I getting a network error now
165:38 - the definition of insanity is doing the
165:41 - same thing over and over again expecting
165:42 - a different results I don't have to
165:49 - refresh have to now it works thank you
165:58 - very much let's go through this again
166:06 - now we can train our model and we'll
166:09 - speed this up for you so you have to
166:10 - watch the whole thing
166:10 - oh that's to the right all right we'll
166:27 - train our model and speed this up for
166:29 - you so you don't have to watch the whole
166:30 - thing this way is to the left we move
166:33 - around a lot over here left left left
166:35 - left left left left left left move over
166:38 - here
167:03 - all right we've trained it let's see how
167:04 - it's performing left whoo it's a little
167:07 - not super accurate over here I left if I
167:09 - go off interesting but if I'm stay here
167:11 - left right down let's keep it some more
167:17 - training over to the left where I'm like
167:19 - off a little bit so that'll help clean
167:22 - that up it's a little more accurate now
167:24 - down up to the right okay now let's save
167:29 - it all that time training it please work
167:32 - what am I doing wrong
167:34 - is it like too big is it like too much
167:37 - data
167:48 - like it's just like it must just be like
167:51 - too much this is a bug but where do
167:53 - where can I find them like the bug like
167:59 - there's warnings well it would be in
168:01 - like the network just so weird
168:04 - alright I'm just gonna try doing it with
168:06 - less date huh
168:08 - is it cuz there's four it should be that
168:09 - there's four blah works
168:29 - like is it just that it's too much stuff
168:38 - save it from the console that's a good
168:41 - point so I was getting about 200
168:51 - examples by doing about 50 of each I
168:57 - think we found a bug in ml 5 yeah so I
169:04 - think there's a limit
169:05 - what is that limit this is definitely a
169:13 - bug always good to find the bugs
169:24 - I mean yeah 60 it failed at 60
169:39 - that works 2530 is fine 40 is fine 50 is
169:50 - fine
169:52 - 60 fails is it a specific number there
169:58 - shouldn't be a limit so why I wish I
170:03 - could debug this and get like an actual
170:05 - error in ml 5 so and and I assume if I
170:08 - do this same thing so weird I don't
170:20 - think anyone's following along is this
170:22 - something that's weird on my browser or
170:24 - computer well I may not be able to
170:29 - finish this today I can't figure this
170:31 - out I guess like does it really work
170:33 - with like 59 so why would that be the
170:36 - limit
170:45 - 51 whoops
170:49 - 51 works it works oh wait I don't know
170:57 - how many it is
171:01 - yeah as soon as I got to 57 or something
171:06 - it failed so so people in the chat it
171:14 - takes a finite time to save you may be
171:16 - trying to save while another file
171:18 - operation is going so this has got to be
171:21 - a bug in ml5 library what is what is it
171:26 - actually triggering is there
171:38 - is there a save like in tfj s or we're
171:42 - doing it ourselves what school look at
171:47 - the ml 5 library shoot
172:00 - source k9 classifier let's look at save
172:17 - you know what could possibly get
172:26 - classified data set it snapping it to
172:34 - with the labels
172:44 - you think
172:48 - and I Oh save file oh I always like a
172:52 - ml5 utility so the bug could be in there
173:30 - it's pretty weird for sure I don't
173:32 - understand this is a weird way to save a
173:37 - file but I guess that's how you do it
173:45 - alright maybe what I'm going to try to
173:47 - do let's bring this code into my thing
174:02 - see if I can discover what it is I
174:14 - really have to go soon I really want to
174:17 - finish this though
174:24 - [Music]
174:36 - I'm gonna hide this stuff down here
174:55 - just gonna
175:07 - okay so now I have my own save function
175:14 - let's see if this works
175:18 - where's s
175:33 - can you try to print the model to the
175:35 - console I could how could it be the
175:39 - memory just like the memory of the
175:41 - browser is full like it's just like my
175:43 - session has like gone crazy alright so
175:49 - now I doubt that but let's try it
175:53 - let me just completely restart the
175:56 - browser if that's really the case I'm
176:06 - gonna laughs let me go up to 60
176:18 - no it failed still so I don't think it's
176:21 - a whoops I was weird
176:30 - okay let me try my own save function
176:38 - okay that works
176:40 - does this look like it's the same as it
176:46 - look correct
176:54 - Oh interesting I did something wrong
176:57 - in my save function oh I'm not gonna be
177:05 - able to solve this am i I mean I am
177:08 - gonna be I can't solve this but like
177:10 - doing it right now is a little bit crazy
177:11 - I miss something here they're still at
177:14 - this in here
177:38 - I was weird
177:44 - that's weird
177:55 - oh it's not actually using it what's
177:58 - going on this is not happening
178:14 - now I'm really losing my mind
178:26 - maybe open the memory tab see if it's a
178:29 - memory issue look at chat please wait
178:39 - hold on
178:39 - I appreciate your suggestions and I'm
178:42 - happy to look at the memory tab but I'm
178:46 - just confused as to right now why my
178:50 - actual code isn't even seeming to run
178:59 - that's running save km why is this not
179:09 - happening
179:16 - so confused alright memory where's the I
179:28 - could also just do this with a little
179:30 - bit of training where's the memory here
179:33 - this
179:35 - [Music]
179:46 - what's going on here let's look at the
179:51 - network activity
180:03 - oops
180:22 - I might just come back later today to
180:28 - finish this 130
180:37 - network
180:44 - now you choose to work now you choose to
180:57 - work and which code are you running
181:19 - now there's an arrogant what
181:43 - Oh weird now my function seems to be
181:47 - working why do I not get the console.log
181:49 - hello that I'll never understand oh but
181:57 - I think my model file is no good right
182:02 - the one that it just did it doesn't
182:07 - actually have the stuff in it which is
182:09 - why it's definitely a memory thing it
182:12 - can't so we of the okay so this is a bug
182:15 - a the bug is definitely an issue with
182:21 - the way that file saving is written in
182:24 - ml 5 it can't do above a certain size
182:27 - and it's only working when I switch to
182:30 - my file saving function because my
182:32 - favorite function is not actually saving
182:34 - the data okay so yeah so that's it so
182:43 - that's definitely the issue and I'm
182:45 - gonna have to like debug this later what
182:50 - I think I could possibly do right now oh
182:53 - just to see if I could finish this is I
183:01 - could limit myself to training just a
183:08 - smaller data set so let me just try that
183:32 - so
183:44 - all right Oh delete it index.html again
183:47 - how do I keep doing that I know the
183:56 - cameras off I'm frustrated this today
183:59 - was going so well
184:01 - until I had to go and ruin it I keep
184:05 - deleting the wrong file
184:07 - delete this file
184:32 - so let's see I'm just curious if I
184:42 - little myself to like ten examples well
184:46 - that was too many
185:02 - down left right that's good enough
185:14 - Hey all right so maybe I could just
185:21 - quickly finish this off with a smaller
185:24 - number of examples and then we'll fix
185:26 - that bug in ml5 so please bear with me
185:34 - just save this like somewhere just in
185:38 - case I need it all right all right
185:39 - everybody okay I'm going to try training
185:51 - this now and saving it here we go so
185:53 - I'll speed this up for you this is the
185:58 - right oh that's too many myself to ten
186:07 - all right it's time I am going to try
186:09 - training this and then I'm gonna save it
186:13 - and let's see how that goes and I'll
186:14 - speed this part up man let's do left
186:24 - let's do up down all right I've trained
186:36 - the model just with ten examples in each
186:39 - that's very small let's let's let's see
186:42 - how well it's working so right left down
186:49 - perfect so I'm sure I could do more to
186:51 - make it more accurate to be honest with
186:53 - you I just have to let you know the
186:54 - reason why I only did ten is there's a
186:56 - bug right now where it was not working
186:58 - once I had too many examples but
187:00 - hopefully by the time you watch this
187:01 - it'll be fixed and then you'll have to
187:03 - use ml five version on the screen here
187:06 - which is the correct one to use so that
187:07 - you don't aren't limited okay so let me
187:10 - let me save let me save
187:12 - yes okay I saved my model and then I can
187:15 - go over
187:16 - and I can drag it into where where are
187:23 - we're here and now all I need to do is
187:27 - add some code to load it when the
187:30 - program starts so what I'm gonna do now
187:32 - is as soon as when the program starts
187:38 - when the feature extractor is created
187:42 - I'm gonna wait to create the K&N
187:44 - classifier until that feature extractor
187:49 - mobile net is loaded and then I'm going
187:51 - to say KNN load model JSON and then I am
187:59 - going to what am i doing
188:01 - now that's me loading the model and then
188:04 - that probably has a callback to which I
188:06 - could say function error result you know
188:11 - what I don't need to worry about the
188:13 - arguments here I'm just gonna say
188:15 - console dot log K and n loaded so this
188:19 - is the process I have to load mobile net
188:21 - then I have to load my KN model and then
188:24 - it can just start and then I can also
188:25 - actually say ready equals true and I can
188:29 - say go classify because I could start
188:31 - classifying without having to train it
188:34 - first all right here we go I think we're
188:36 - almost there
188:37 - let's refresh I have a syntax error line
188:42 - 57 function oh this needs a parenthesis
188:49 - semicolon to use the anonymous call back
188:51 - there get number of labels undefined
188:54 - system so it's working but I got some
188:57 - weird error here line 63 let's see
189:00 - what's just happened there line 63 if
189:03 - not ready and KN number of labels oh so
189:06 - you know what in fact let's let's
189:09 - actually just comment this out there's
189:11 - no reason to wait for the training since
189:14 - I'm loading there we go left right down
189:21 - up oh that's wait this is left let's
189:28 - train it some more
189:30 - there we go I fixed it left down right
189:35 - up all right so it's working pretty well
189:39 - now let's get it finally last step let's
189:43 - get it to control something so I am I'm
189:47 - gonna say background zero I'm gonna
189:50 - create a position I'm going to say
189:54 - position I mean let me just make a
189:56 - separate X&Y x and Y and I'm going to
190:00 - say X equals with divided by 2 y equals
190:04 - height divided by 2 and now I am going
190:07 - to say I'm going to say the label is
190:14 - nothing and when I get a result when I
190:23 - get a result
190:28 - help me scrolling out where do I get the
190:31 - results yeah when I get a result I'm
190:35 - gonna say label equals result label and
190:38 - then in draw I'm going to do something
190:41 - very silly I'm gonna take out the image
190:46 - I'm going to say ellipse X Y 24 fill 255
190:53 - and I'm going to say if label equals
190:56 - left then X minus minus otherwise if
191:04 - label label equals maybe I'll speed this
191:09 - part up to write X plus plus else if
191:12 - label equals up why - - else if label
191:19 - equals down y plus + and yes my allergic
191:24 - reaction to the switch statement is
191:26 - still in effect apparently all right
191:27 - let's go here we go
191:32 - move to the left move to the rock hit
191:36 - see myself would really help for me to
191:38 - see myself hold on let's not hide the
191:43 - video
191:44 - so I can see myself and here we go move
191:51 - to the to the left which is that way
191:56 - move to the left
191:58 - wait I really need a better training
192:02 - this is terrible I'm setting it to my
192:07 - all okay guess what I'm coming back
192:09 - later to fix this this is it I I need to
192:12 - fix that bug because without it being
192:15 - trained well it's not gonna work well
192:17 - this is all just a mess I'm gonna come
192:19 - back well let me just
192:22 - and also my left and rights are all
192:23 - mixed up my brain is dead the I'm gonna
192:26 - finish this another time this is silly I
192:30 - don't know why Mike so stubborn but
192:32 - there was one thing that I wanted to do
192:33 - oh yeah I wanted to at least add a
192:36 - constraint I'm not going to add it okay
192:38 - everybody thank you did you see my
192:43 - sending this to yourself of the future
192:45 - message Simon no I did not see that I
192:47 - will check that later okay let me I've
192:55 - gotta end this I must end this now and
192:59 - hopefully somebody can help me solve
193:01 - this ml5 bug and I'm just going to I am
193:13 - just going to chuck and say ah thank you
193:17 - two new members Benjamin
193:20 - Tai David and sera and thank you to mr.
193:23 - Uggla for the super chat I have to go
193:25 - it's going to be somewhat abrupt and
193:28 - also I got myself completely confused
193:31 - with the left and the right because my
193:32 - left is yep so I'm gonna if anyone can
193:35 - help figure out what that bug is it
193:39 - doesn't necessarily have to be fixed and
193:40 - published to ml5 because I could just
193:43 - like rewrite little secret code to like
193:45 - actually save the model without that bug
193:47 - and then I will come back
193:49 - ideally later today but my next plan for
193:52 - a live stream was this Friday
193:53 - to try to do the fluid simulation thing
193:55 - so if I don't come back later today to
193:58 - just finish this off I'll come back on
194:00 - Friday do the fluid simulation alright
194:02 - okay what do my what do I need to notice
194:05 - when are you uploading the code for the
194:06 - Fourier I will do that soon I don't know
194:11 - what Joel's referring to that I need to
194:13 - notice but who knows
194:15 - oh how big is that model JSON the one
194:19 - that worked
194:20 - alka is o is one megabyte so this one
194:25 - that I got to work is one megabyte and I
194:27 - don't know if I try to save it now I
194:29 - added a few oh yeah but I gotta go okay
194:34 - thank you Alka for volunteering to maybe
194:36 - look at that Suresh is saying I can fix
194:38 - it it's fixed now run I don't know
194:41 - what's going on okay I'll see you
194:44 - everybody everybody fit you cannot speak
194:46 - goodbye let me hit this stop recording
194:51 - let me now hit oh I'm still live
194:57 - streaming our night I get hit stop
194:59 - streaming here now that now this is
195:01 - really gonna end goodbye everybody