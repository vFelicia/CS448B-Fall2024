00:00 - in this video
00:01 - I'm going to tackle a very confusing but fundamental and important topic in Javascript programming something called a closure
00:09 - It's a big topic, and I think [I] probably could do several different videos around it
00:13 - I could also probably slow into it a bit more but in this video
00:17 - I'm just going to look at it in the context of set interval
00:20 - And kind of unpack everything [that] has to do with [the] closure with this particular example
00:24 - and then
00:24 - Things will be confusing and you'll feel a little weirded out
00:27 - And I'll come back and make some more videos based on questions people [asked] with some other scenarios that will hopefully make this more clear
00:32 - But let's just give it a try. I think give it a try
00:34 - You can give it a try by watching and I think it's going to be ok so, what is the scenario here?
00:39 - The scenario here is that I have and the canvas is irrelevant
00:44 - It's just sort of there to show that I could also have a canvas
00:46 - Animating the thing that's important here are these two particular Dom elements?
00:49 - One of which you can see is
00:51 - Counting up a number every 500 milliseconds you could think of any other types of thing you might do with a dom element
00:57 - [that's] doing some type of animation and the second one is not animating at all
01:01 - So, how is the first one animating now first of all again?
01:04 - I'm using set interval in a separate video that. I will reference at some point. I'm going to look at why you might use requestanimationframe
01:10 - [instead] of set interval, but for simplicity I'm using set interval right here
01:13 - So what set interval does is it says call this function time it right here every 500 milliseconds
01:21 - so every 500 milliseconds increment a counter and update the htML content of that element by that amount [so]
01:27 - What if I want to do the same thing for the second Dom element well certainly I could just add
01:37 - Timer to HtML. You know counter and we would see here
01:43 - That both of them are lockstep and in sync
01:46 - But there's only one function being triggered what if I want each [one] of them and have their own?
01:50 - Interval so they each get their own counter or they each get their own
01:55 - Time that [they] wait to increment that counter you might think of it. Here's a nice way [of] thinking about this
02:01 - What if you had an object?
02:03 - Right even if you like program to Java or C++
02:05 - And even Javascript you had an object each one of these things was an object and it had
02:10 - properties associated with it it had a counter and
02:12 - had an amount of time it waits to increment the counter a closure in Javascript is actually a way of doing something very similar to
02:19 - object-Oriented programming where I want to
02:21 - bottle up
02:22 - I wanted to create this little
02:24 - Container this bubble is close your bubble that has all the stuff that has to do with each one of those dom
02:29 - Elements
02:30 - and how do I create that bubble so let's come over here for a second and
02:34 - Let's just say and I feel like I'm in the darkness today for some reason
02:38 - But I don't know why this seems darker than usual, but it is what it is
02:40 - You can hopefully see me and read this um so let's just think about functions in Javascript for a second
02:46 - function
02:48 - Rainbow
02:50 - Right you have [setup] and Drawn P5, and there's all sorts of window although. There's all sort of functions
02:55 - You can write and define in Javascript all the time, and I could have another function down here. [I] could call it on what's up
03:03 - unicorn
03:04 - For lack of a better thing to think of and now I have two functions each one of them [Define] separately outside
03:11 - [of] each other and
03:13 - incidentally if this is no different in
03:17 - Javascript and now I am really easing my way into this but to say var rainbow
03:22 - equals function
03:24 - Right [a] function is just a thing you store in a variable
03:28 - [this] function is stored in the variable rainbow this function is stored in the variable Rainbow and in Javascript, then it's totally reasonable
03:35 - That you might
03:37 - Define a function inside
03:40 - another one
03:41 - So this unicorn function could be defined
03:45 - right inside of here
03:49 - This means unicorn is a local variable to the rainbow function. So if I were to call unicorn here
03:57 - That would be totally reasonable that would work if I were to call unicorn down here. I
04:05 - Could not call unicorn down here because it's out of scope because unicorn is now only local to rainbow now
04:12 - What if I?
04:16 - had a variable here like
04:19 - What goes with?
04:21 - Pot of gold. I don't know
04:23 - What goes with Rainbows got stars I?
04:26 - Have a [Star's]
04:28 - variable which equals
04:31 - 15 oh boy, why don't you choose a counter this I like so like lost in my world of rainbows
04:35 - Which is just ridiculous at this point [and] kind of embarrassing so what if I have a counter variable in here?
04:41 - This is also a local variable to the rainbow function
04:45 - Now let's think about this when I call the rainbow function
04:50 - that means these codes should be executing which means somewhere in the computer's memory a
04:57 - Counter is made and stored. What if I call the rainbow function again?
05:04 - Well if I call it again a new counter is made
05:09 - These local variables inside of a function are things that are
05:13 - Generated again and again every time you call the function that should almost be in a way intuitive or not
05:18 - It's basically you haven't thought of before
05:19 - But this is something you've definitely used before the same is true of this function each time I call Rainbow a new
05:26 - Function unicorn is declared and defined
05:28 - Which in some cases might be very inefficient? [which] is why sometimes?
05:32 - I don't want to like read [eclair] that function all the time if rainbow is happening over and over again
05:35 - [I] wanted to have it outside
05:37 - Just use it in there, but what if you wanted this function to operate differently each time you called rainbow [well], this is precisely
05:43 - so this by the way is a closure a
05:46 - closure is a
05:47 - function being enclosed in another function and and this idea of all of this stuff being
05:53 - maintained all this data the variable this function and including arguments that might be passed in here as
05:59 - Each time you call the rainbow function this bubble is made which a counter is stored and [a] reference to this unicorn function is stored
06:05 - Now there's all sorts of weirdness and strange things you can do with this newfound
06:09 - Power of putting a function inside a function, and I would love to get to all of these scenarios in all of my videos
06:14 - But let's come back to here
06:15 - This is precisely what I want in this particular scenario right because what I want are [two]
06:23 - Counters, so if I say I'm going to I'm going to I'm going to just make up a function for a second make
06:31 - Animation I
06:32 - Don't know if that's [oh] make make make timer make timer animation all it right, and then I'm going to define [that] function
06:42 - make timer
06:44 - whoops I'm defining it and I say var counter equals zero, so
06:48 - [what] I want to do is each [time] I make the timer I get a new counter so I could certainly call make timer twice
06:56 - So that makes a counter variable twice
07:00 - Local only to this make timer function, but that's going to be fine. Why?
07:04 - Because here set interval is
07:08 - Going to be called inside the make timer function
07:11 - And if set interval is called inside the make timer counter is no longer a global variable
07:17 - Then I could define here's a nice little closure for you. This time it function can be defined in here take out this one
07:25 - Look, what's happening here each time each
07:30 - So each time I call make timer I create a counter
07:34 - I set the interval and this function makes use of that particular counter
07:38 - So one thing that's really important about thinking about scope [and] Javascript. Well. I love stuff
07:42 - It's kind of like weird to think about but it's really interesting is that the scope isn't?
07:48 - Just where your variables are declared but kind of like when things happen like this function is all set and [done]
07:54 - But this set interval means time it is going to happen later and later and [later]
07:58 - So the closure even though this function is executed and finished all of the things made in here all the stuff stored in Memory is
08:05 - Maintained it's maintained as long as something still needs it and time it still needs it because set interval
08:12 - [we'll] be calling it again and again
08:13 - So let's just look at this and I'm going to call it just once so this should work for just timer 1
08:21 - Let's look at this you can see timer 1 is now counting up, right?
08:25 - That's it's doing exactly [what] we want it to do
08:27 - Why is it doing that because we create a counter we call set interval and every 500
08:32 - milliseconds the counter is incremented and the Dom element is updated, but now I
08:38 - Have this function make timer. It's only working for timer one because timer 1 is hard-coded inside there. So why not?
08:45 - Just say I'm going to just give it an argument call it elt
08:50 - Generic Elements, so now I want to make a timer for timer one
08:54 - same exact result
08:56 - But now this is the magic the magic of the closure I can make the timer
09:00 - For timer - so this whole bubble this closure bubble was almost like this object this counter this time it function to set interval each
09:08 - One of these will be done again each time [I] call that function for timer 1 and timer to the closure being this function in
09:15 - Close even though this function is happening later and later and later in life
09:18 - In a lot of programs running that all the stuff around it is maintained in memory for it
09:24 - So now if we run this we can see
09:27 - both of them
09:29 - What so what happened? I made a fatal flaw here
09:32 - I still hard-coded in timer 1 so I have to change that obviously the elt the point is to take the Dom element
09:38 - That's passed in and then use update that one's particular
09:43 - And you can see now here
09:45 - They owe their both going why they're both going exactly at
09:48 - 500 milliseconds each so what if I add another argument here 500 and you know and this one will be at
09:56 - 312 so totally arbitrary and I add an argument here called wait and
10:01 - Now I add wait there. So now when I call make timer, and I forgot a parenthesis here what I'm doing is saying
10:10 - Make this closure create a counter
10:12 - Start a set interval process with a particular function and remember that function this function
10:17 - If I were to put this right, not as a closure
10:20 - But out here
10:21 - It wouldn't make any sense because elt and counter don't have any scope out here in the global scope
10:27 - So I need that function to be read eclair each time
10:31 - inside of make timer and
10:34 - Here we go. Let's make this happen, [okay]?
10:38 - [look] at this and you can see now each one individually is just operating on its own
10:43 - Time because they both been triggered with one with 500 milliseconds and one with 312 and this is a closure
10:50 - So I could add a third Dom element and a fourth one
10:52 - I could do this in a loop or I could have them all animate I could start and stop them I could store a reference
10:57 - To the interval of different buttons when I click on it it starts when I click off [of] it it stops
11:01 - So there's a lot of possibilities here
11:03 - What I might suggest to you is think about you know try to use this exact framework and think about like well
11:08 - What's something more interesting you could do in terms of color or something else besides just counting numbers?
11:13 - The other thing that I might consider is what happens if you put those dom elements into an array?
11:17 - can you loop through them and
11:19 - Execute a closure for all of them to have them all doing some type of animation um that sort of thing [so] [I]?
11:25 - Hope this helps you get started with this idea of understanding what a [Javascript] closure is and what it's for
11:31 - I think [this] will come up again and again in videos that I make it certainly comes up a lot when making multiple api queries
11:38 - It comes up. I think [an] example that I want to make [that] looks up playing a musical melody
11:43 - It can come up if I have an array of notes, and I want them to each to happen a certain period of time
11:47 - So I look forward to your questions
11:49 - And see if I can come back and make [some] more videos to clear up anything or to cover this more again
11:54 - So thanks for watching [I]
11:56 - Can't believe I just made a video about a closure
11:58 - Which is something that [I've] ever even heard of like less than a year ago
12:01 - I probably heard of it, but was like. I don't know what that is so hopefully this made sense
12:04 - It was correct, [so] the internet will correct me. I'm sure if I was wrong, and I will see you all [sometime] soon
12:10 - Good. Oh, and this is only 12 minutes. I think that's kind of amazing