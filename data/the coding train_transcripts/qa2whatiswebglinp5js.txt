00:00 - Hello! Welcome to another Q&A
Coding Rainbow video
00:04 - This question comes from blinkityblank
Hi, blinkityblank!
00:08 - And blinkityblank writes: 
"WebGL: How to use it and make a 3D project in p5.js"
00:13 - So, im gonna try to answer 
this question in this video
00:15 - and one thing i want to say right
at the outright is, very much
00:19 - this video is really going to be
something that's kind of only relevant
00:22 - for a very short period of time, because, WebGL, 
the implementation of WebGL in p5.js
00:28 - is something that's very much in progress,
it's one of the newer aspects
00:32 - of p5.js and there are certain things
that worked beautifully, certain things
00:35 - that haven't been implemented yet, there
are probably bugs yet to be discovered
00:38 - so what I want to do is kind of like look at
all of those pieces there, show you where
00:42 - you can find some resources to get
started, and, and then also what is it you
00:46 - can do to kind of help make WebGL & p5.js work better, contribute to it, file a
00:51 - bug report that sort of thing so that's
kind of my plan for this video
00:54 - I'm trying not to walk into any more furniture, but,
let me just say
00:58 - maybe, maybe you don't even know, like, what-, 
what is this WebGL thing in the first place?
01:03 - so okay  anytime, you have-, you're running a
program and it draws pixels
01:07 - let's-, let's do that, I have some p5.js
code here and I'm going to just draw an
01:12 - ellipse in the center of the window
01:15 - that's 100 by 100 I'm gonna go back to
the browser I'm gonna find my ellip-
01:20 - my sketch, and then you
can see I have my circle
01:22 - so, how did that circle appear?
01:25 - well, p5.js as a library has a rendering
engine built into it, now p5.js could
01:31 - have its own rendering engine which
individually says, knows how to calculate
01:34 - every pixel of a circle and 
draw them to the screen
01:37 - in fact, p5.js is a layer on top of, uh, of a
rendering engine that's part of the
01:42 - HTML5 Canvas
01:43 - so, you could write all-, you could make
this exact sketch without p5.js
01:48 - you just have to know the raw JavaScript
canvas API, you say things like give me a
01:53 - context, and I want to like, set a stroke
on my context, and move my pen
01:58 - I don't know, all sorts of stuff there. So the
nice thing, one of the reasons why I like
02:01 - p5.js is it has a sort 
of comfortable, friendly,
02:04 - quick and-, quick and easy to use syntax,
all I have to do is say ellipse()
02:07 - so, that rendering engine
02:09 - using HTML5 canvas, is the default
rendering engine of p5.js
02:14 - however,  there's another rendering engine
you can use and what's special about
02:18 - this rendering engine is two things
02:20 - so first of all, I can change this
rendering-, I can change-
02:22 - how do I change the rendering engine?
02:24 - I change it by adding a third argument
to createCanvas(), in this case, i want to
02:28 - say i want a canvas that's 400 by 400
and I want it to be a WebGL
02:33 - I want it to be a web-, use the WebGL rendering engine
02:36 - so, what's special about WebGL? 
#01 is it supports 3D so suddenly I can
02:42 - create the illusion of three-dimensional
perspective in the sketches
02:45 - again, there's no actual 3D here
02:47 - this is-, this is a wall! Can you hear that wall? 
(Dan proceeds to drumming the beat for the next 'Coding Rainbow remix song')
02:52 - OK, I uh-, anyway, this is a wall, it's two-dimensional
02:55 - it's green, and that's why you see my computer 
screen, I, I get a little bit obsessed with that
02:58 - but anyway, the point is, uh-,
there is no 3D, but the rendering engine
03:03 - will take your code, which implies the
third dimension, and then figure out how
03:07 - to render it so that the viewer has 
the illusion of three dimensions
03:11 - but we don't need-, yeah
03:12 - anyway, so, I could refresh my sketch and 
look at that! there's still an ellipse there
03:17 - so, I'm kind of surp-(rised), I'm
thrilled and surprised to see that
03:21 - because, one of the things about
Processing, Processing Java, which is a
03:26 - project started in 2001, which also has a 3D
rendering engine, was this sort of goal
03:30 - of being able to use 3D and 2D fluidly
in the same sketch, to be able to kind of
03:34 - use the same concepts,
a lot of the same code
03:37 - you don't need this entire other way of
thinking in developing your code
03:40 - moving back and forth between 2D and 3D and in
many contexts that might be highly
03:43 - problematic, but in a kind of friendly
sketching engine that could be very useful
03:48 - so, what we can do things like, I'm
actually surprised that suddenly this is
03:52 - doing what it's doing, but let's just
keep going with this
03:56 - another thing I can do is I can write
box()
03:59 - let's try this, and you can see, 
suddenly, there is a box there
04:04 - now you might ask yourself the question
04:07 - oh, look at that! wait a second
04:11 - what's going on here? I have some
suspicions...
04:16 - Ooh! look at that! okay, whoa, craziness! I-, I
don't know why the ellipse was showing for a while there
04:22 - I don't know what I did wrong,
I didn't hit save properly
04:24 - but you can see *laughs* let me go back
now, take out WebGL, there's the circle!
04:31 - let me put WebGL back in...
04:38 - and you can see what-, what
appeared there? so I would say
04:41 - this is per-, this is in some sense, a
bug, uh, WebGL probably shouldn't draw a
04:46 - strange blue and black triangle off to
the right, when it has to draw an ellipse
04:50 - and this is one of the aspects
that's in progress, I'm kind of jumping
04:53 - around here but I'm going to show you actually,
this is something that currently there is a, uhh
05:00 - there is currently a pull request,
right now, which addresses
05:04 - a lot of these bugs, this is-, has 
not yet been merged into p5.js
05:09 - but is here, that will implement a lot
of the 2D drawing stuff you might ask
05:13 - well I don't want to use ellipse or
rectangle or, or triangle
05:16 - because I'm in 3D, I want to use box and sphere 
but again, you might want to have a flat
05:21 - two-dimensional shape in your 3D world
and that's something that's in progress
05:24 - and also, this reminds me that I would
like to, you know-, credit the folks
05:29 - who have really put in a tremendous
amount of time in developing p5.js WebGL
05:34 - indefinit here on GitHub is Kevin Siwoff, uh, he has been leading the
05:41 - development of WebGL p5.js, um,
Karen Peng and Matthew Kaney
05:47 - are two others that have been doing a lot of
development that I would just mention
05:50 - and if you go on to GitHub and look at
the contributors, you'll find many other people
05:54 - but this is a project, you know, sweat and
tears, I would say blood, sweat and tears
06:00 - but i don't know... it's just... how 
about just the sweat and tears?
06:03 - How about no tears!?
06:04 - there are no tears! Developing p5.js is
a happy, friendly, lots of high fives and
06:08 - hugs
06:09 - anyway, whatever
06:11 - so, um, you can see that a lot of this
stuff is in progress, now let me go back
06:15 - and put this box back in
06:22 - we can see that the box is there, it
looks strangely like a rectangle
06:26 - and, um, let's try drawing a rectangle just 
to see when I'm trying to put a rectangle
06:30 - in the middle and i'm going to say, uh
06:33 - cuz I want to talk about one of the key differences here
06:36 - uh, ok, look at that, so this didn't work, yet
another thing that didn't work in WebGL
06:42 - generally speaking, right now my sense
of the current implementation of WebGL
06:46 - is all of the stuff thats specific to 3D, works 
really well and a lot of the stuff that
06:50 - is kind of going back and forth
between, kind of 2D function
06:53 - some of that hasn't yet been implemented
06:55 - okay, so what the thing that i wanted to
mention... Which i'll just get to right now is
07:02 - that you'll notice that the box appears
in the center of the window
07:05 - so how do i specify the location of this
box? Well, I didn't, I just gave it a size
07:11 - so the box function, which is a 3D
primitive, gets a single argument, 100
07:17 - if i change that to 200
07:19 - you can see the box got bigger, but, the
way that you set a location of something
07:24 - in three-dimensional space
is with the translate function
07:27 - I need to translate to a location to
place the object there, the box function
07:30 - doesn't actually have a position
involved as part of its arguments so I
07:35 - could say I want to translate to the
center of the window and place the box
07:39 - right?
07:39 - 200, 200, but now look! the box is down
there...
07:43 - so one thing thats very very different
about WebGL rendering and p5.js is
07:48 - that the default origin point, is this
center, and this is more of a convention
07:54 - with 3D graphics environment
07:55 - the default is the center, whereas in 2D
graphics
07:58 - the default is the top left, so if I want
the default to be the top left
08:03 - I could simply just say: 
translate( - width / 2, - height / 2 );
08:08 - and you can see, now, the default origin 
is in the top left, did I get that right?
08:16 - anyway, I think I did, so then 
I can do things like, but, let's-
08:22 - forgetting about that for a second i can do things like
08:24 - translate( 0 , 0, mouseX ); 
so now you can see that box 
is moving closer and farther away
08:30 - again, I could make this as a 2D sketch, right? 
I could draw a rectangle and make its
08:34 - width and height bigger, or I can make it
a 3D sketch and draw a box and have the
08:38 - z-axis move forward and back
08:41 - but I could also do things like, say,
rotate(), so I can rotate by an angle
08:47 - and let me add a-...
let me add an angle = 0
08:51 - and then I'm just going to say:
angle += 0.1;
08:55 - whoops! so I got an error
08:59 - interesting... I wonder if I'm required to
specify the axis of rotation
09:03 - rotate() by default, is really rotateZ()
09:06 - there we go! so you can see now it's
rotating
09:09 - but I think to show you that there's a 3D thing going on here
09:11 - I want to say rotateX() and you can see
it's rotating along the x-axis
09:16 - my arm is the x-axis, and this thing is
rotating around the x-axis
09:21 - and I could also say, like, rotateY()
09:26 - and I could say, like:
angle * 0.6
09:30 - and you can see now I'm rotating along the x and the y axes
09:33 - and you can see the box has
this sort of default shading because I
09:36 - haven't done anything to specify what
color should be on the sides or what
09:40 - uhh.. I dont know, texture is something I can do to put an image on it so you can see
09:44 - to put an image on it, so you could see this
09:46 - I could change this box() to sphere()
09:51 - you can see now I have a 
spherical, hard to see the rotation
09:53 - because it's very symmetrical
09:54 - I could change to cone()..
Hey, look! There's a cone!
09:58 - amazing! I can change this to, is there
something called the torus(), maybe?
10:02 - WHOA! 
Look at that!
10:04 - Oh! i love it! Wooo! Hula hooping!
10:05 - so look! There's all sorts of exciting possibilities!
10:07 - all this is there! it just works
10:09 - Oooo! This is great! 
I love WebGL!
10:12 - ok, um, so you can see
that you can use 3D primitives
10:15 - and then position things with translate(),
and rotate things using rotate()
10:19 - um, so you might be asking the question
now, I like this WebGL thing
10:23 - could I use more? but, did I mention? 
I don't think I talked about
10:28 - *laughs* I really should script these out a bit more
10:30 - Oh look! I forgot that i can zoom in and out
10:32 - okay, wait, hold on
10:33 - so let's say you want to learn more
about this stuff
10:36 - so one thing you can do, is,
there is a wiki page
10:40 - Uh... This is the URL, the link to this will
be in this video's description
10:45 - and this has a, probably a much more coherent, sane, explanation of things that are possible
10:52 - a bit about the 3d coordinate system,
translate() and rotate(), as i mentioned to you
10:56 - camera and view is something that I-,
is also think you can do
10:59 - the camera being, it was a little bit
11:01 - it's sort of interesting, like let's
say this pen is the camera and my fist
11:05 - is a sphere that I'm going to draw in 3D
11:08 - I could do this, right? I could move the
sphere or I could move the camera and
11:15 - visually those will have the same result,
right?
11:17 - the sphere is getting bigger and 
closer  to the viewers eye
11:20 - so, um, but using camera perspective
11:22 - ortho() is something to create, that
sort of like, flat, Q*bert style, uhh
11:27 - three-dimensional look, those are
functions that you might investigate
11:30 - to sort of look at different ways that you
can manipulate the viewers perspective
11:34 - in 3D
11:35 - these are all the shapes, I tried-, I did some of them; 
cone(), torus(), sphere(), plane(), box()
11:40 - these are some other types of 3D shapes
that you can render, uh, there's some more
11:47 - stuff about that, textures is something
that you know, again, I would- I would want
11:51 - to make individual tutorials about all
these topics, this really a bit of an
11:54 - overview here, and i will-, i will do that
at some point, maybe later
11:57 - more towards the end of the summer when
a lot of the features are a little further along
12:00 - but you can see that you
can take an image
12:03 - oh boy! We should just do this right now!
Look at that! Look how simple that is
12:07 - ok, hold on! Stop! Wait, don't stop!
12:10 - stay with me, uh, I'm going 
to look for a hedgehog...
12:15 - image of a hedgehog
12:17 - ok let's, this is a nice cute 
hedgehog, I don't know
12:20 - do I have the rights to this image? 
I don't know what's going on
12:22 - maybe this is bad, i'm going to save this
image to my desktop under WebGL tests
12:30 - hedge.jpg and then what I'm gonna do
is go to my code and I'm gonna save our image
12:36 - and I'm gonna say, uh, I'm gonna have-, 
I'm gonna add the preload function
12:40 - just to make sure the image is loaded
12:49 - and then I'm going to say, here, i'm going to say..
12:52 - where do I say that? 
probably just right here:
texture( img );
12:55 - let's try that! 
Let's go back
12:59 - look at that! There's, I think, a
hedgehog on this spinning torus!
13:03 - Ha! Let's make that a box,
let's slow down the rotation a little bit
13:08 - there we go, look at that!
Woooo!
13:12 - spinning hedgehog! This deserves some 
sort of music, like the hedgehog song
13:15 - but I, uh, thats a little bit too much,  anyway
13:17 - so you get the idea this is kind of
wonderful and magical
13:19 - that you can do this stuff so quickly and easily *laughs*
13:22 - okay, there's some stuff going on in the chat
that I have no idea what it's about
13:26 - ok, so that's some other stuff that's
useful, text of, uh, here's another thing
13:32 - that I think is really important
13:33 - there are various lighting
functions, so, right
13:37 - ambient light, meaning light thats just as
if you have this sort of glowing orb
13:41 - that just kind of blasts
light all throughout a room
13:45 - versus a directional light, which is more
like a spotlight pointing in a specific direction
13:49 - versus a point light, which is like if I had a very small and bright glowing orb, about a specific spot
13:55 - so like the-, the ambient light is not
like an orb, that's a point light
13:59 - like an orb sitting in the space, almost as if
you wanted to create like a sun and the
14:04 - sun is blasting out light you could put
a point light where the Sun is located
14:07 - um, ambient light is more like the walls
of the room are glowing and just kind of
14:12 - there is just ambient light everywhere
so we could do something, like I could
14:15 - add this ambient light function, and I'm
gonna-, this would be-, uh
14:21 - whoops! Ah!
What happened?
14:24 - ambientLight(); 
let's make it a nice pink light, and i'm going to go back
14:27 - and I'm gonna go back, and refresh
14:29 - and you can see, look!
now there's some light
14:31 - of course, all these things could be variables
14:33 - I could also do like a point light,
let's look at the point light very briefly
14:37 - I should do these as separate tutorials
14:41 - I lost my, getting started
14:43 - okay, wai-, let's, okay, 
where can you find this stuff?
14:45 - also, the p5.js reference is also a really good place
14:49 - so let's look up the point light reference
14:52 - and what does point light require?
14:55 - it has a whole lot of different possible arguments
14:59 - but it has, um, a red, green
and blue (RGB) value and opacity
15:03 - and then an x, y, z position
of where the light is, so, uh
15:10 - so I could, do something like 200 , 0 , 0
and change this to a pointLight()
15:19 - and what I'm hoping you're going to see... is that, yeah, you can see that the light is kind of shining on it
15:26 - I should draw something where that is, 
just so you can see, so let's do: 
translate( 200 , 0 , 0 );
15:33 - and then draw a small sphere there
15:37 - whoops! oh, and now-, by the way,
if I translate something
15:41 - it affects everything after it,
so what I want to do
15:44 - is say: push matrix(); 
pop matrix();
15:49 - Oh, no no! In-, in p5 it's actually just
push() and pop() to save and restore
15:53 - again, I need to make a separate tutorial about
that, if  it doesn't exist already and then let's
15:59 - make this box a little bit smaller just
so we can kind of see what's going on here
16:02 - so, you can see, this is where the
light is, the light is emanating from here
16:07 - so you can see that this side, the
spinning rectangle is the only thing
16:11 - that's kind of reflecting or getting that light
again, my talents here in 3D
16:15 - are kind of pathetic, but you could see how
you can start to manipulate the lights
16:18 - in the scene as well
16:19 - (clears throat) ( ♪ music break ♫ ) Ooh! There's material, which is another thing you can read about
16:26 - um, but, ah! okay, so let's talk about,
now, let's say you start playing around with it
16:30 - you're trying to make a project in 3D, um,
there are some things that aren't yet
16:35 - implemented there, a fully-featured
virtual camera that might be something
16:38 - that's much more elaborate, in terms of
how you might move a camera around
16:41 - shaders, shaders is a special kind of
programming language
16:46 - that is very fast and allows you to
manipulate pixels and do all sorts of
16:50 - things with textures and geometry, 
in kind of special and interesting ways
16:54 - Matthew Kaney is working, on this summer,
a shader implementation for p5.js
16:58 - so that's going to happen in the future,
um, the other thing that you can look for
17:03 - is-, but if you are in the p5.js GitHub
repository, you can go under issues
17:09 - and, I believe, I wouldn't-, 
there is a WebGL...
17:13 - there is a WebGL label,
so i could click here, under area:WebGL
17:18 - and you can see these are two current
bug report / feature discussions
17:24 - and so, if you would like to, if you find
something that's not working
17:28 - or you're not sure about, this is a place
where you can post a bug report of
17:32 - you looked at this function, it's not working
properly in 3D, should it? should it not?
17:36 - that sort of thing, you can post that here
17:38 - the other thing I would encourage you to
look at, is, um, under the pull request
17:44 - you can see that there are, currently in
progress, I mentioned this one
17:48 - which is #1518
17:52 - there are lots of things, so this-, look! 
"Implements all rect* and ellipse* modes in webgl."
17:57 - so, this is now allowing a lot of those 2D functions
18:00 - so the next release of p5.js
may have some of this stuff working
18:04 - so I wouldn't file a bug report about
rectangle or ellipse at this moment
18:08 - and, you know-, maybe by the time you're
watching this video, that will be fixed
18:12 - um, but you can see, so this is, I think, a place where you can ask questions, submit bug reports
18:18 - uh, as well as, potentially contribute
to the development itself, of 3D
18:23 - so, um, if you have questions about
how you can get involved
18:26 - you can ask me a question on Twitter
or in the YouTube comments here
18:29 - or, as well, just sort of like jump in on p5.js
18:32 - there's also a, if you go to the p5.js wiki,
that's where, by the way, this, um
18:38 - "Getting started with WebGL in p5"
18:40 - a tutorial is, and also, um, there is a
wiki here about development
18:45 - and how you can get started contributing p5.js as well
18:47 - and since this is a rambling, very long,
somehow, answer to this question
18:51 - I hope this gives you an idea and a
sense of what some possible things are
18:56 - in p5.js with WebGL, and, um I, at some point, I
would like to make an actual, more- *laughs*
19:01 - I never make anything proper!
but, say, a proper sequenced tutorial series
19:06 - about how to do 3D stuff in WebGL,
and if you watched this video
19:09 - if you're doing stuff in WebGL, if you enjoyed it, please
19:12 - give your thanks and credit to the contributors and developers of p5.js, who are doing all sorts of work
19:17 - with their smiles and hugs!
19:20 - um, in making p5.js WebGL
19:24 - okay, goodbye! 
See you in another video, maybe, if you want
19:26 - okay, goodbye!