00:01 - Just when you thought it was safe to go back in the water the swim with the promises, I don't know
00:06 - Anyway, I I do want to add something to this list here. You're watching this
00:10 - So there's another video here. So I want to talk just really quickly and show you one thing about try and catch
00:16 - so if you remember where I left off with promise all what I had is
00:22 - I have this particular and I kind of made some modifications in between the last video and this one but I have this particular
00:31 - JavaScript program using the p5.js library that makes a bunch of calls to wordnik and the giphy API and
00:38 - When everything is done, and it's finished with all those calls, they're all promises I get back
00:44 - Some results and I place them all in the DOM with a paragraph element in the image elements now
00:51 - The problem here and again promises at all promise not all is not necessarily the best solution for this anyway
00:55 - but since I'm demonstrating it the main issue here is
00:59 - If any of those it's all or nothing if any single one of those has an error like there isn't a gif associated with that word
01:05 - Available in the giphy API the whole thing doesn't do it. It doesn't do anything
01:09 - So just about every time I run this I'm not getting anything now
01:12 - Let me just make it work by let me just let me just get like
01:17 - Three of them and let me just say they're all gonna be three letter words
01:20 - I think this will probably work right so I got three gifts with three 3-letter words so you can see that that worked
01:26 - But what I want is I want to I want it to work anyway
01:30 - And I want to see a 2-letter word a 3-letter word four or five six seven and so let's do that
01:34 - Oh, whoa, it actually worked so that was the first time that worked
01:40 - but most of the time we're going to get an error so
01:42 - There's a way around this and it is not a way around this but there's another concept that could help here. That's important
01:49 - Which is try and catch so a place that I could use try
01:53 - what I want to do is individually handle error messages differently and a way that I can do that here is
02:02 - Is by I can I can handle the error message myself and not cause it to fail by using a try-catch here
02:08 - So the first thing I'm gonna do is I'm actually just gonna say let image
02:13 - URL equal null so I'm gonna assume that I'm starting with the idea that there isn't an image URL then I'm
02:21 - going to try
02:24 - to get the image URL
02:27 - From
02:29 - from
02:30 - the
02:31 - Sorry, try to get the image URL. I'm getting sleepy after making all these videos
02:35 - I'm gonna try to get the image URL from the data now it might not exist. That's fine. I'm just gonna try
02:41 - Then I'm gonna return
02:43 - JSON one word and image URL now this will be no if this doesn't work so I can now go up. Oops
02:50 - I can go back up in my code and I could say hey
02:53 - If results index, I dot image equals null
02:58 - You know as long as it's not no do this
03:02 - So this now should let everything keep going and will only just skip making an image where there wasn't one. Let's see if that works
03:12 - Okay, ah all right so fine I was thinking I could demonstrate this without a catch and then show you the catch
03:20 - Next I thought there might be like a default catch. But clearly there's not that makes sense, right?
03:25 - So and there's a finally thing too off to come back to that another time, but what it's saying is like hey
03:30 - Hey, if you're gonna try something you I can try it
03:34 - But you got to tell me what to do if things go wrong like I
03:36 - You're in charge now, like the the error isn't just going to be handled however it's going to be handled
03:41 - So I need to actually say catch and the catch
03:45 - Actually gets inside of here. It's like a function. It's not an argument and I could call that error
03:52 - So I'm actually gonna catch that error. I'm gonna say console.log
03:56 - no image found for
04:00 - JSON oops for a json1.word
04:05 - And
04:06 - Then I'm also going to just say console.error
04:11 - I'm as well as print out that error as well and let's just call it e-r-r are just so we have things named differently
04:16 - So I think this is right now now what I'm doing is I'm saying hey
04:21 - let me uh
04:22 - Try to grab the image URL if it doesn't exist
04:27 - Just spit something out to the console and but keep going. So, let's see if this works now
04:34 - Whoa
04:35 - Right. It didn't find it for any of them weird
04:39 - Okay, so I got a mistake somewhere because it only didn't find it for one of them
04:45 - I think I'm I've got something wrong somewhere Oh Oh
04:50 - What did I do here? If yeah, if this is like total nonsense, this is what I need to eat lunch people
04:57 - I should not be making this video tutorial right now
05:00 - That was total nonsense what I wrote before what I'm saying is as long as the results image is not null
05:06 - Not not the image equal to no that makes no sense at all. Let's try that again
05:13 - Great now, they all unfortunately, they all worked
05:16 - But you can see now work, but no image found for fueler and we should see that fueler is still here
05:22 - But just no image is associated with it
05:24 - so no image found for fueler no image transfer whatever that word is and so now
05:29 - This goes through but I can sort of see what are the things where it doesn't work
05:34 - Okay, so I have talked to you about now. I added this last little bit
05:39 - about try and catch
05:41 - weird edit point, I'm getting some interesting feedback on the chat that's things like people use try catch too much and that
05:49 - try catch is useful, but it should be used as a last resort if all your other stuff fails, so I again
05:55 - I'm not necessarily suggesting
05:57 - That the way that I've done this is the optimal way to create this word gift generator
06:03 - I mean ultimately if I wanted to do that
06:05 - I'd probably want to not just like have a hundred promises that all happen all at once
06:09 - I'd want to animate and sequence and make things interactive and maybe I type in a word all sorts of possibilities
06:15 - But I'm trying to show you the bits and pieces and features. So the important thing here I think is that you can write an
06:23 - asynchronous function that returns a promise without ever saying promise by using the await keyword and the async keyword
06:31 - You can use promise.all
06:34 - to
06:35 - Execute some code when a whole lot of promises are finished and the results will always come in, in the same order as the array
06:41 - and
06:43 - But you can also sequence processing promises with .then, .then, .then. Nothing
06:47 - Ok, so there's some other things that I should do like I should use enhanced
06:51 - Object literals which is like an es6 feature. Maybe I'll come back and talk about that in a video that's thing with the strings
06:56 - What's the thing with the string strings?
06:59 - es6 literals
07:01 - There's like a thing template literals. I should use that
07:05 - So so somebody remind me in another video
07:09 - I'll talk about some other es6 features like template literals and
07:12 - Enhanced object literals now, just go look up those things on your own little tidbits here. Good-bye.