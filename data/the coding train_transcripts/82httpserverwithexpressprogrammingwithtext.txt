00:00 - okay welcome to a first video in a
00:02 - little series about building an API with
00:05 - nodes the question was asked in the live
00:07 - chat this is by the way you're probably
00:08 - watching this as a recorded archive but
00:09 - in the live chat why would you want to
00:11 - make an API and so you know I mostly
00:13 - right in the comments I'd love to hear
00:15 - why what your idea for an API and why
00:16 - you would like to make an i API is but
00:19 - there's there's a couple reasons that I
00:20 - think I could kind of start with here
00:22 - number one is you have uh data and you
00:27 - want to allow other people to use that
00:29 - data so this is a way of you kind of
00:31 - making a transaction a sort of handshake
00:33 - and saying like hey there is this means
00:35 - for you to access this data and I intend
00:37 - for you to be able to do so an API
00:39 - stands for application programming
00:41 - interface it's a way for two it's a way
00:43 - for two different applications to talk
00:45 - to each other so there's the applic
00:46 - we're going to build an application a
00:48 - node
00:49 - application um that has data or
00:52 - something associated with it and it's
00:54 - other PE other applications will be able
00:56 - to talk to it so that's kind of the main
00:58 - reason now there is sort of this
01:00 - scenario which I also am going to show
01:01 - you with you might be making an API for
01:03 - one person in the world one wonderful
01:06 - singular person and who is that person
01:08 - it's you all right so there are lots of
01:10 - projects where you're writing a front
01:12 - end a client side JavaScript thing
01:14 - you're making pretty pictures and
01:15 - drawing text and all sorts of
01:16 - interaction stuff on the page but you
01:18 - need some server side stuff to connect
01:21 - to download images to run long
01:23 - complicated processes to use other node
01:26 - packages so you might make an API just
01:28 - for your own project self and actually
01:31 - that's what we might see in some of the
01:32 - examples I have to show you so that's
01:34 - kind of number one you might just want
01:36 - to you know you you you have something
01:39 - and you want to allow other applications
01:41 - to connect or you might actually want
01:43 - other things being namely yourself okay
01:46 - um so hopefully that made someone sense
01:50 - of why you might make an API but really
01:52 - you know what the answer to that is
01:53 - let's try to make an API talk about it
01:55 - get to the end and um hopefully some
01:58 - creative ideas will will emerge in your
02:01 - head as you're watching these videos um
02:04 - okay so first I want to point you to
02:06 - this web page which is part of the
02:07 - course um the things that you will that
02:10 - need before you're watching this video
02:12 - is what is node.js and what is npm so
02:14 - you're going to need to have both of
02:15 - those things downloaded and in this
02:17 - video I'm going to start with adding
02:20 - Express so I want to use this Express
02:23 - package which is a fast unopinionated
02:27 - minimalist web framework for no Dutch
02:29 - ass so first of all I just love anything
02:31 - that says minimalist because programming
02:34 - gets like really complicated and looking
02:36 - through documentation and API is just
02:38 - like so it's nice that what a lot of the
02:40 - things that I'm that I want to do in
02:42 - this application that I'm going to build
02:43 - is like oh host some files or oh receive
02:48 - a query from a user and no and express
02:50 - is going to have a simple function for
02:52 - each of those as opposed to kind of
02:54 - writing all the code for that in raw
02:56 - node so to speak so I'm going to look at
02:58 - my directory where have the project and
03:02 - all I have is uh two things I have
03:04 - server.js file which is actually that's
03:06 - where I'm going to put my javascrip code
03:08 - which is empty and then I have this
03:09 - package.json file which you can make
03:12 - with npm in it but I already have one
03:14 - there that's your configuration file for
03:16 - the project and there's lots of
03:17 - important details about that if you go
03:19 - to publish your thing as a node package
03:21 - or an open source project but for now we
03:23 - can mostly ignore the contents of
03:25 - package.json um and I'll come back to it
03:28 - maybe another time um so you can see
03:30 - what's in it it's just like a little bit
03:31 - of stuff saying like hey this is the
03:33 - name of my project and this is the
03:34 - version but what I want to do is go and
03:37 - grab this and now install Express with
03:40 - this project so I'm going to say and I'm
03:42 - you can see I'm in that directory and
03:44 - I'm going to say npm install oh I'm
03:46 - actually I'm just going to paste it in
03:47 - there npm install Express
03:51 - ddave oh I have an error in par so I I I
03:54 - messed up I have an error here I I wrote
03:56 - that package that so by the way if you
03:58 - get if that happens to you let that
04:00 - happen um trailing comma I got an error
04:02 - in my package.json file so that should
04:05 - fix it I'm gonna say clear and try this
04:08 - again oh yay that looks much better so
04:10 - you can see it should now I should have
04:13 - a a new directory called node modules
04:15 - and you can see oh there's all this
04:16 - stuff installed in there I'm just going
04:17 - to have to trust that Express installed
04:20 - correctly so let's make sure
04:22 - everything's working I'm going to go
04:24 - into my server and I'm just going to say
04:27 - console.log server is starting
04:31 - and I'm going to say node server server
04:34 - is starting great so a node program is
04:37 - just like a program that's written in
04:39 - JavaScript that just runs on your
04:41 - computer and it runs without Graphics
04:43 - without a window and actually there's a
04:45 - lot of stuff you can do with node I mean
04:48 - you know I should probably really Learn
04:50 - Python one of these days but I use node
04:52 - a lot to do a lot of batch processes on
04:54 - my computer like oh I could just write a
04:55 - little node program to rename a whole
04:57 - directory of files or I can do you know
04:59 - make a request to some other API and
05:01 - download a whole bunch of things so you
05:03 - know node is something that you can just
05:04 - forget about web servers and apis you
05:06 - can just use as a little programming
05:08 - tool to try do a bunch of things for
05:10 - yourself on your computer through code
05:12 - but what I want to do the first thing I
05:13 - want to do is create a web server and by
05:16 - web server I mean something that opens
05:18 - up a port and allows browsers to connect
05:21 - to it and this is very easy with Express
05:23 - now I have most of this documented on
05:25 - this page so I'm kind of going to go and
05:27 - kind of copy paste some of the like
05:29 - pieces of code the first thing I
05:32 - need is uh I need to say VAR Express
05:36 - require Express this is like an import
05:38 - statement import the package express I
05:41 - want to be able to use express now the
05:43 - funny thing about this is I get requir
05:46 - Express I get this into a variable this
05:48 - whole package is actually a function
05:50 - Express is a reference to a function and
05:52 - I can execute that function and that's
05:54 - what I'm going to do here in this next
05:56 - line of code I'm going to say app equals
05:59 - Express so I execute Express and
06:02 - suddenly I get this web application this
06:04 - is what I mean about how great it is to
06:05 - use express it's doing all this stuff
06:07 - behind the scenes and the first thing I
06:09 - can do is I say Hey listen for incoming
06:11 - connections so I'm going to say server
06:16 - equals app. listen Port 3000 now there
06:20 - are various default ports that servers
06:22 - will will use but since I'm just doing
06:24 - all of my testing you know this diagram
06:26 - that I have over here of this idea of a
06:28 - server and a CL Cent right now all of
06:30 - this is happening on one computer the
06:32 - server is on the computer the client is
06:34 - that computer itself and that might
06:36 - actually for a lot of projects be all
06:37 - you need but at some point you also
06:39 - might want to deploy your server
06:41 - somewhere else so that other people
06:42 - could connect to it and I'll have to
06:43 - make some videos about that as well okay
06:46 - so now that I'm listening at Port 3000
06:50 - um I can do uh I can do a few different
06:52 - things so one thing let's just run
06:57 - this server is starting and you know
06:59 - what would be nice it would be nice to
07:01 - like add a little call back here so I'm
07:03 - just going to write I'm going to add
07:05 - something called function
07:06 - listening and I'm going to say
07:10 - console.log
07:12 - listening so I'm just wrote a little
07:14 - call back so that and and actually there
07:17 - the the reason I'm adding this into the
07:19 - code is there are a lot of things you
07:20 - can do here you can get the host address
07:22 - and the port and various things but most
07:23 - of this stuff is unnecessary for what we
07:25 - want to do but I want to at least sort
07:26 - of see this call back that it's working
07:28 - so I'm going to uh I'm G to run this
07:30 - again server is starting listening okay
07:34 - here we go now uh so let's go to Local
07:37 - Host 3000 this is where my server is I'm
07:41 - gonna look at the web page I made Oh
07:43 - cannot get anything so there's nothing
07:45 - there but you can see that this is
07:47 - working because at least I got the
07:48 - message I'm listening but I don't have
07:51 - anything to give you right the me the
07:53 - web browser right now made a get request
07:56 - to this to the server and this is kind
07:58 - of an important concept so one of the
08:01 - first things I might do although this is
08:02 - a little bit NE unnecessary for this
08:04 - idea of an API but it's kind of worth
08:07 - exploring right now that we're going
08:08 - through this Express stuff is I can
08:11 - use an aspect of
08:14 - Express to host static files meaning I
08:18 - can make and this this idea of uh this
08:21 - word public in there is something I
08:22 - could make up so I could call this
08:23 - website instead of Public public being a
08:25 - kind of standard thing this is saying
08:27 - use out of the express package its
08:30 - ability to host static files HTML files
08:33 - image files movie files all that sort of
08:35 - stuff so what I can do now if I go into
08:39 - here right into my project what I want
08:42 - to do is create a folder I'm going to
08:44 - call that folder website which is sort
08:46 - of a silly name and I'm going to put in
08:47 - that folder a file called
08:50 - index.html and then I'm going to
08:52 - say
08:54 - hello so in that file it says hello okay
08:59 - and then I I don't know why I'm speaking
09:01 - in that voice uh and then I mean I do
09:04 - know why I am but I don't know why why I
09:07 - am why I am anyway now if I hit refresh
09:11 - now first of all I've got to restart the
09:12 - server so here's the thing there's
09:14 - actually a really nice tool you notice
09:15 - how I have to like stop the server
09:17 - restart it stop the server restart it
09:18 - every single time I change my code
09:21 - there's a nice little node
09:25 - module I'm sure this is um which um
09:29 - called nodemon and node Monon like node
09:32 - monitor I think monitors your code and
09:34 - restarts the server for you every time
09:36 - you change the code now this can be
09:37 - problematic and you don't always want to
09:39 - use it but in this case it would be a
09:40 - lot more convenient and dash g means I
09:42 - want this package this isn't a package
09:44 - associated with this project I want this
09:46 - as just a global tool that I'm use on my
09:47 - computer and this probably is going to
09:49 - fail oh but maybe it's not I'm feeling
09:52 - hopeful now that actually this is going
09:53 - to work yeah so I got some error
09:55 - permission denied this is because I when
09:57 - I'm installing a global package it's got
09:59 - to to go into like user VAR local bin
10:01 - some secret place on my computer where I
10:03 - need special permission so I'm going to
10:06 - say pseudo for super super super do uh
10:10 - npm install node
10:12 - m-g and now I'm going to type in the
10:14 - password here and hopefully this
10:23 - works there that seemed to work or I'm
10:26 - getting some warnings I'm getting some
10:28 - things that look scary oh it's doing
10:29 - more stuff I think that worked so I'm
10:32 - now going to say nodon
10:35 - server.js and this is working so you can
10:37 - see that it is the server is starting
10:39 - listening and watch what happens if I go
10:42 - back and I say go to my server and I say
10:45 - um you know I make a just do a carriage
10:48 - turn and hit save you can see here look
10:50 - how many times it restarted the server
10:52 - so now I can kind of ignore terminal for
10:55 - a little while and just go from uh I can
10:58 - just go from my code to when I make a
11:00 - change refreshing in the browser so look
11:02 - at that by the way I now see the files
11:05 - that are in that directory website so
11:08 - this is this this is step one we have
11:09 - now written a web server with like
11:12 - barely any code at all look this is like
11:14 - all the code for the web server and
11:16 - incidentally if you've ever seen me or
11:18 - do something like this like often I'll
11:20 - run a web server on my computer by just
11:22 - saying python DM simple htpp server
11:25 - that's running a web server there are
11:27 - lots of other tools there's a node HTTP
11:30 - server there are lots of tools that just
11:32 - make a web server that hosts files this
11:34 - is what we have now done um in this
11:38 - exact program so Step One is completed
11:41 - we have written a web server that hosts
11:43 - files in the next video I'm going to add
11:46 - something to this called routes so in
11:49 - addition to hosting files I'm going to
11:51 - allow the user to send information or
11:54 - request information through something
11:56 - called a route a restian route and by
12:00 - rest in I mean you're going to want to
12:01 - take a rest after watching the video
12:03 - probably okay so I'll see you in the
12:04 - next video thanks for watching this one
12:05 - on setting up a basic web server with
12:12 - [Music]
12:18 - Express