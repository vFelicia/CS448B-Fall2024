00:00 - (bell dinging)
00:01 - - Alright, so, here we are.
00:03 - I am in another video in my
series about unit testing,
00:09 - test-driven development,
and continuous integration.
00:11 - And I have been building,
I have another playlist
00:14 - where I'm building a simple
neural-network library
00:17 - in javascript to make some examples.
00:19 - This video is not about how
the neural network library
00:22 - works or what a neural network is,
00:24 - you can go watch those videos for that.
00:26 - But with this video I'm going to do
00:28 - is I'm going to add tests to the library
00:31 - and then solicit contributions
from the community
00:35 - to add more tests, and I'm
going to have those tests run
00:38 - using circleci, which is
the sponsor of this video.
00:43 - You can find out more about circleci here.
00:45 - And then we're going to
have learned something
00:49 - cause this is new to me, I have never,
00:51 - other than the contributions
I've made to P5.js,
00:55 - really done a test-driven
development workflow before,
00:58 - but I'm excited about it
and I think what's exciting
01:00 - about it is to make,
contributing to open source,
01:04 - to open more pathways, to make
people feel more confident
01:07 - in being able to review pull requests,
01:09 - to submit pull requests, to
be able to run those tests.
01:11 - And also, writing the tests is a way
01:13 - you can contribute to a project,
01:14 - even if you don't know
how neural networks work,
01:16 - you might be able to contribute
01:17 - to this project by helping
write a single test for it.
01:19 - Okay, all that said, I've set
up a bunch of things already.
01:22 - So I have this GitHub repository,
01:25 - Toy-Neural-Network in JS, it's on GitHub.
01:28 - I have it locally.
01:30 - I have a package.json file which has a...
01:34 - Which assigns jest.
01:36 - Jest is the testing framework, open source
01:39 - testing framework from
Facebook that I'm going to use.
01:46 - That's pretty much all I need.
01:47 - And that's, the dependencies are there.
01:49 - So, I need to write a test.
01:51 - So, the first thing, oh, let
me first mention, thank you to
01:53 - Carla de Beer on Twitter,
who did this already,
01:58 - kind of gave me the
idea for this, in a way.
02:00 - I set up a series of
easy-to-use automated unit tests
02:02 - for the current version of your
02:03 - Artificial Neural Network
matrix library code.
02:05 - So, here are a whole bunch of tests.
02:07 - Now Carla used a framework called QUnit,
02:10 - so I'm going to click on her tests here,
02:14 - and I'm going to look under unit tests.
02:16 - And what's useful about
this is, you can see,
02:18 - Carla's doing something smart,
which I'm not going to do,
02:20 - which is actually creating
an html page to probably
02:22 - run the tests in the browser
to see how they work.
02:24 - But we can look at this, this idea of
02:29 - testing to see if matrix
addition is working.
02:32 - So we can hopefully use exactly this test,
02:36 - but convert it to the syntax
of Jest and get it to run.
02:39 - Okay, I'm going to attempt
to do that in this video.
02:41 - So what other pieces do I need?
02:42 - So, this is the matrix library.
02:45 - The matrix library is
a class called matrix
02:48 - that you can create matrix objects with
02:52 - and you can multiply those matrices,
02:54 - you can add things to those matrices,
02:55 - it's a math, a bunch of math code
02:57 - that I need in the neural network project.
02:59 - So, with Jest, something that
I can do, is I can create
03:02 - a new file and I can call
that file matrix.test.js.
03:08 - And this is where I'm going to write
03:10 - any tests that go along with matrix.js.
03:14 - And so let's go to the Jest, again,
03:16 - I don't really know what I'm doing,
03:17 - so this is going to be a
bit of a struggle here.
03:19 - So, in my previous videos,
where I went through a lot
03:22 - of steps of this, I just used
this toBe function, right?
03:25 - Expect two plus two toBe, which toBe
03:28 - is like two plus two equals four.
03:30 - But there's actually a function in Jest
03:32 - that I'm just learning
about now called toEqual,
03:35 - which'll check like, oh is this
object equal to this object.
03:38 - It'll recursively go through
and check all the properties
03:40 - of the objects or all
the elements of an array.
03:42 - So this should be the code
that I can start with.
03:46 - And, if I paste this into my test file,
03:49 - now what I really am testing
is adding number to matrix,
03:54 - and I'm going to go and grab Carla's code,
03:58 - and just kind of grab
this much of it at least.
04:02 - And I'm going to do this.
04:06 - And so what this is doing and saying,
04:07 - okay, make a three by three matrix,
04:10 - and these are all the
numbers in the matrix,
04:11 - and add, and instead of
having a variable right now,
04:14 - I'm going to just be simple about this.
04:15 - I'm going to just add one.
04:17 - Let's just add one.
04:18 - So the new matrix should
be two, three, four,
04:20 - five, six, seven, eight, nine, 10.
04:23 - So, I want to expect a to, a.data,
04:28 - and I'll call this m,
m for matrix, I think.
04:31 - M, m, m, m.
04:34 - toEqual and I should be able to now put in
04:39 - a two-dimensional array
with the values in it.
04:43 - Two, three, four, comma, three, four...
04:47 - Five, six, seven, comma, eight, nine, 10.
04:55 - So this, I believe,
04:58 - is now the test, right?
05:00 - Let's take a look at
this all together, right?
05:02 - I could be doing something
wrong here, but right?
05:04 - I want to create a matrix object,
05:06 - adding, and going to say adding a scalar,
05:08 - that's the name of the test, to a matrix.
05:11 - I'm going to add the number one to it,
05:13 - and then I'm going to check to make sure
05:14 - the matrices' data actually
equals all of this.
05:18 - And I probably could have
said expect m equal and
05:21 - then maybe done something like
when object with data in it?
05:23 - Would that be better?
05:24 - I don't know.
05:26 - Well, let's do that.
05:27 - Let's try this.
05:28 - So, just out of curiosity, let's
05:30 - try this to see if it works.
05:32 - Now, I'm not saying this is the best test.
05:35 - There's probably more ways in Jest
05:38 - to structure this, to
have it be more generic.
05:40 - I need to make lots of
tests, this is just one,
05:42 - but let's just see if this even runs.
05:44 - And I'm missing some important
pieces here, clearly.
05:47 - So, first thing I can do
is just write npm test.
05:51 - And what it's going to do,
it's going to find that file
05:53 - that says Matrix is not defined.
05:55 - So I need to make sure I export Matrix,
05:58 - and I say,
06:01 - modules.export equals Matrix.
06:05 - And then in matrix.test, I'm going to say,
06:10 - constant Matrix equals require
06:16 - dot slash Matrix.
06:19 - So this should be
exporting the Matrix class,
06:22 - and then importing it
here, so now it should know
06:23 - what Matrix is when I run that test.
06:30 - Running the test, now it failed.
06:32 - (laughing)
06:33 - Now, oh modules.export, okay.
06:36 - I can never get anything right.
06:38 - It's module.exports, can never
remember that apparently.
06:44 - Let's run the test one more time.
06:47 - Failed.
06:49 - Matrix is not defined.
06:52 - Oh, funny thing!
06:55 - Funny thing, order is important.
06:58 - Matrix doesn't exist yet cause
I haven't defined the class.
07:01 - So this actually has to be at the bottom.
07:04 - Let's try this one more time.
07:13 - Alright, so we got further, look at this.
07:18 - It failed because this is what it got,
07:21 - it got those correct
numbers, two, three, four,
07:23 - five, six, seven, but what it received
07:25 - also had columns and
rows and I forgot that
07:28 - in this case my matrix objects,
07:30 - if I look at the constructor, have not
07:32 - only the data, but columns and rows.
07:35 - So I need to go back to my test and say,
07:38 - expect, what do I really expect?
07:40 - It should have data, columns is
07:42 - three, and rows is also three.
07:44 - And, you know, the order
shouldn't matter here,
07:48 - the properties of an
object are not ordered,
07:51 - but I like to put columns and rows first.
07:53 - And really, rows should
be first, just in terms
07:56 - of my mental thinking, it's
always rows by columns.
08:01 - Okay, so this should, hopefully
the test should pass, right?
08:05 - And, this would be interesting
to not have those be equal.
08:07 - Okay, so let's run this again.
08:12 - Let's run the test and the test passed!
08:15 - Awesome!
08:16 - So we've written our first test.
08:17 - Now, have I done the
best job ever in terms of
08:20 - optimal, thoughtful,
test-driven development?
08:23 - No, but I've got a start.
08:25 - I've got an actual test here.
08:26 - If somebody were to try to refactor,
08:29 - if I were to try to
refactor my add function,
08:31 - and do it in a different way, and
08:33 - it didn't actually add
the numbers up correctly,
08:34 - this would fail and I would know.
08:36 - But, I don't want to do any more testing,
08:38 - what I want to do now,
08:40 - well, there's a couple things.
08:41 - There's one important
detail that I've missed
08:43 - because this is, right at the moment,
08:45 - just client-side code only,
but this requires stuff,
08:49 - and this module.export stuff
is going to mess that up.
08:52 - But, let me at least get
this building on circleci.
08:57 - So this repository is
already on GitHub here,
09:00 - and now I'm going to go to circleci,
09:02 - and I'm going to say add a project,
09:05 - and I want to add
09:09 - toy, why is it not showing up?
09:14 - Oh there it is, I just had to refresh.
09:15 - I want to add the project
Toy-Neural-Network-JS.
09:19 - I'm going to set up the project.
09:21 - It's going, I'm going to copy...
09:23 - So as you might remember if you
watched the previous videos,
09:25 - I need to create a new
folder called .circleci,
09:30 - and in that folder, I need to create
09:31 - a new file called config.yml,
09:36 - and then I can go here and copy to
09:39 - clipboard all of the setting stuff.
09:41 - Now I'm going to leave more
stuff in here this time.
09:44 - So, I'm going to check
and just I want to use
09:46 - the same version of node
that I'm using here, 8.9.
09:51 - So this is the version of node that
09:52 - it should run the TestWiz.
09:55 - I'm going to leave this
working, I don't think
09:58 - I need this working directory
thing, that's optional.
10:00 - I definitely need to checkout the code.
10:02 - Restore_cache, let's see
if this helps speed it up.
10:07 - So this should be a thing
where it saves a cache
10:11 - of previous dependencies
that it's already installed,
10:14 - so it doesn't have to reinstall them
10:15 - every time it needs to run the test.
10:17 - Run is npm install, I'm
using npm, not yarn.
10:22 - And then run the test is npm test.
10:24 - So I'm going to leave all of this here,
10:27 - and then I need to push this to GitHub.
10:32 - Git status, let's just make sure.
10:33 - Oh, I modified all this, I added
10:35 - the test, I modified matrix.js.
10:37 - I'm going to...
10:38 - oh and look at this!
10:41 - I've got a problem here, I've got a typo.
10:42 - That's got to be circleci.
10:44 - The e key (laughs), as anyone
who watches my videos knows,
10:47 - the e key on my keyboard only works
10:49 - about 75% of the time,
so, often misses it.
10:54 - So that should fix that.
10:57 - I'm going to say git status again.
10:59 - There's .circleci.
11:01 - I'm going to say git
add ., git commit - m,
11:06 - adding unit tests with circleci.
11:10 - I'm going to push this to GitHub and
11:14 - there it is, it's on GitHub.
11:16 - I'm going to over here to
GitHub just to make sure.
11:19 - I see .circleci is here and I should
11:23 - be able to say Start building.
11:24 - So I'm going to click Start building,
11:27 - and make sure this test runs.
11:31 - (light rumba music)
11:34 - Npm install is happening right now.
11:40 - ♪ Npm install song. ♪
11:46 - It's creating the cache.
11:48 - Yah!
11:50 - It's pipe failing!
11:51 - Oh no fail, ah!
11:55 - So why did the test
fail, let's take a look.
11:59 - Cannot find module dot matrix
from matrix.test.js, hmmm.
12:07 - Must be a path thing.
12:10 - Oh, no it's not!
12:12 - I just made a silly mistake.
12:14 - A very silly mistake.
12:16 - It is kind of a path
thing, it is a path thing.
12:18 - I made a silly mistake which is that
12:20 - I was thinking capital M
because it's a matrix class
12:26 - and I want to reference it as capital M,
12:27 - but the filename is actually lowercase m.
12:30 - That file is called matrix.js,
12:32 - and on my Macintosh-y computer thing,
12:35 - it didn't really care
about that, it worked,
12:36 - but the circleci servers are obviously,
12:39 - clearly case-sensitive, in
terms of what they're running.
12:41 - So let's git add, git commit,
12:46 - fix uppercase issue,
12:49 - (laughing)
12:50 - that's the worst description ever.
12:52 - Git push origin master, and I think
12:55 - it will auto-trigger a rebuild.
13:00 - (light rumba music)
13:02 - I'm waiting to see if it
does it automatically.
13:05 - Yup, it's running.
13:07 - Still running, still running,
oh, fixed, check, check.
13:14 - (laughing)
13:16 - So exciting, look, look, look!
13:18 - It checked out the code,
it restored the cache,
13:20 - it ran npm install, saved the cache,
13:22 - and it ran npm test, and my test passed!
13:25 - Woo hoo!
13:26 - So now, I am going to make it a moment
13:29 - where all of you can now contribute
13:30 - and give me some better tests.
13:32 - So what I'm going to do
here is I am going to do,
13:34 - there's a bunch of settings
I need to configure.
13:36 - I need to go to Settings,
I'm going to go to Branches.
13:39 - I'm going to protect
master, Protect this branch,
13:44 - Require status checks, I want to make sure
13:46 - circleci is checked, and I'm
also going to include myself.
13:50 - I don't want to be able to do anything,
13:52 - even though I'm the administrator,
13:53 - I still have to have my tests pass.
13:55 - I'm going to do Save changes.
13:57 - I need to add, I need to do one
13:59 - more setting, which is very important.
14:01 - I'm going to go back to circleci.
14:03 - Look, I have these two projects,
14:04 - TestingTestTest was the build
project I made in previous...
14:10 - In my previous video
tutorials where I did this
14:12 - a little bit slower, step-by-step,
14:13 - and I want to check the settings
for Toy-Neural-Network-JS.
14:17 - I want to go to Advanced Settings,
14:20 - and then I want to check, here's the
14:22 - really important one:
Build forked pull requests.
14:25 - I want to run the tests
for people not just
14:28 - from the coding train
official organization,
14:31 - who are kind of
contributing to the project,
14:33 - who can make a branch
within the repository,
14:35 - but people who are just from the community
14:36 - who have forked the
repository and then are
14:38 - sending back a pull request, I want that.
14:40 - So I'm going to click that
to on, that will live save.
14:45 - There might be something
where you have to like
14:46 - go back and rebuild any pull request
14:48 - that was like submitted
before I clicked that,
14:49 - but now, going forward,
they all should be fine.
14:51 - And so, I'm pretty much done, except
14:53 - I forgot something important.
14:55 - So, here's the thing, what
I'm actually working on here
15:00 - is a client-side javascript project.
15:03 - (coughing)
15:04 - At some point I might want to make this
15:06 - a neural network library
that could be a node nodule
15:08 - and I could have more
elaborate, fancy build process
15:11 - to deal with all of this, but right now,
15:12 - I've just written these tests
just for this matrix.js file
15:17 - that lives as part of this web project.
15:20 - So this is actually where it's being
15:21 - deployed and used as part of a webpage.
15:24 - The problem is, I'm running
a web server already.
15:26 - If I go and refresh that page,
15:30 - which I just did a second ago,
15:31 - this is the error I'm going
to get: module is not defined.
15:35 - So while the test might
run, because I've set up
15:38 - this export of matrix properly
so the test won't run,
15:42 - the client-side javascript knows
nothing about node modules.
15:44 - And again, there are
sophisticated and better ways
15:48 - to handle this, but I'm going to do this
15:49 - with a slightly, just
like a quick trick here.
15:52 - And I'm going to say, here,
is that I only want this
15:57 - to happen if the environment
I'm running is within node.
16:00 - And a way that I can do
that is, I can actually,
16:02 - I mean ideally I would just say this,
16:05 - if module, like if it
exists, then I can do that,
16:10 - but this actually won't work
cause it's still not defined.
16:14 - But a trick that I can do is, I can
16:16 - actually ask for the typeof it.
16:18 - Because the typeof it will return,
16:21 - I could say, if I'm just like
here, if I say typeof module,
16:25 - I'm going to get "undefined" in quotes.
16:27 - So I can actually just check, hey,
16:28 - as long as it's not equal to
undefined, then go right ahead.
16:33 - So now, I should be able to
16:37 - not have this error in the browser, and,
16:40 - watch this, git st...
16:43 - Let me add this change,
git status, git add,
16:48 - (deep breathing)
16:51 - checking if node environment for module.
16:56 - And now, oh, I did mean commit, yes.
16:59 - Oh, two m's, three m's, how
many m's are there in commit?
17:02 - I like m's.
17:03 - Okay, now, remember,
git push origin master.
17:09 - (dramatic orchestra flourishing)
17:10 - I cannot do it, I have protected myself.
17:12 - So I am now going to say, even if I feel,
17:15 - so one thing I probably want
to do is I might as well run.
17:19 - I might as well make sure
the tests still work.
17:21 - Yeah, so the tests work so I can feel
17:23 - pretty confident, it's
fine even with that change.
17:25 - Notice the recognizing
the module, and I can say
17:28 - git push origin master and then
17:31 - I'll call this branch, module-fix.
17:37 - I sent it up to GitHub.
17:40 - I am now going to go back
and I'm going to go here.
17:43 - I'm going to say Compare & pull request.
17:46 - I'm just going to Create this pull request
17:50 - and now I am going to wait.
17:52 - (light rumba music)
17:54 - C'mon, circleci, tell me
that my test has passed.
18:06 - Ah, somebody approved these, thank you.
18:08 - Okay, now I'm going to hit merge.
18:11 - Merge!
18:14 - Wonderful!
18:15 - So now, I have a project that involves
18:18 - test-driven development.
18:20 - It has unit tests for the matrix math,
18:24 - though it is as a protected master branch
18:27 - on GitHub, and only pull requests
18:30 - that run passing tests
will be able to be merged.
18:35 - So I am now opening this repository
18:36 - up to the community.
18:37 - Obviously, I have a lot
more work to do on it
18:39 - to make all the neural network stuff work,
18:41 - and you can imagine what other
tests do I need to write.
18:43 - But this is why this is important.
18:45 - This matrix.js library is pretty
18:49 - terrible and inefficient
and slow, so ultimately,
18:53 - I might like to continuously refactor
18:55 - all these math functions, and so
18:59 - I might start using like
things like reduce or fill,
19:02 - and I want to make sure that I
didn't break the actual math.
19:05 - And this process of
test-driven development
19:08 - will allow me to do that and will make it
19:10 - easier and nicer for those of you
19:12 - who want to, to contribute as well.
19:14 - You know, maybe I'll
swap out this whole thing
19:16 - with another matrix math
library, and then, but use
19:19 - the same function names and
does the code still work?
19:21 - There's so many possibilities.
19:22 - So, I hope you've enjoyed all of these
19:24 - videos about unit testing, continuous
19:27 - integration, and test-driven development.
19:29 - Is it possible that
I've actually done this?
19:32 - Because I am the least test-driven
19:33 - development person in the world.
19:36 - But I think it's a good
thing and I'm hoping
19:37 - to use it more in project in the future.
19:39 - Thank you again to circleci,
if you're interested
19:41 - in signing up, you can
check out this link here,
19:44 - and for sponsoring these tutorials,
19:46 - and I look forward to
seeing you in future ones.
19:48 - I have one more that I
want to make at some point,
19:50 - so hopefully, there might be
another video on this playlist.
19:52 - If you're watching this
right now, you can check.
19:53 - If it's not there, you can
complain in the comments.
19:56 - I love complaints.
19:58 - Warms my heart. Good-bye!
20:00 - (kissing)
20:01 - (bell ringing)
20:01 - (upbeat techno music)
20:09 - (bell dinging)