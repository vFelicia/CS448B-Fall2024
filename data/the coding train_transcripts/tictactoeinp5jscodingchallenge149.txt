00:00 - [WHISTLE BLOWING]
00:01 - Hello, and welcome to
a coding challenge--
00:03 - Tic-Tac-Toe.
00:04 - I'm going to make Tic-Tac-Toe.
00:06 - I'm hoping, when you look
at how long this video is,
00:08 - it's very short, because I don't
have a lot of time right now.
00:11 - So I'm going to try and make a
very beginner-friendly example
00:14 - of the game Tic-Tac-Toe
without any bells and whistles,
00:17 - without a lot of fancy code.
00:19 - I'm not going to
overengineer it.
00:20 - I will come back and--
00:22 - [MUSIC PLAYING]
00:23 - (SINGING) Oh, you will
refactor this later.
00:25 - You know I will--
00:27 - I will refactor later, because
the reason why I am making this
00:30 - is I eventually want to show
you some different algorithms
00:33 - for an AI or at least a bot
to play the game Tic-Tac-Toe.
00:37 - But that's not
happening in this video.
00:38 - We're going to make the most
basic, simple, friendly version
00:41 - of Tic-Tac-Toe right here, using
JavaScript, the p5.js library,
00:46 - and the p5 web editor.
00:48 - Follow along, if you wish,
and see what happens.
00:50 - I have not practiced or
planned for this at all.
00:54 - All right, I need a board.
00:55 - So I definitely need a board.
00:57 - I'm going to say, let board--
and it's going to be an array.
01:02 - And maybe, it'll be
an array of arrays.
01:04 - And let's use strings.
01:05 - This is probably
a terrible idea.
01:06 - So this will be the top row.
01:09 - This will be the middle row.
01:11 - Tic-Tac-Toe is 3-by-3-by-3.
01:14 - And then I need two players.
01:16 - So player one is an X.
And player 2 is an 0.
01:23 - So now, I need to
render the board.
01:25 - Let's put some stuff in it.
01:27 - Let's just pretend
it has some stuff.
01:28 - So I want to render the board.
01:29 - I could use this
with dom-- there's
01:31 - so many ways I could do this.
01:32 - I'm just going to do this with
Canvas and in the Draw Loop.
01:36 - So I'm going to say, for let
i equals 0, i is less than 3,
01:40 - i plus plus.
01:41 - For let j equals 0, j is
less than 3, j plus, plus.
01:47 - So this is pretty tricky.
01:48 - If you're a beginner programmer,
this is a nested loop.
01:52 - And I've basically
made this a grid.
01:54 - So every spot in this grid--
and let me actually fill it out
02:00 - just so we see something here.
02:04 - I'm going to pretend this
has just been played.
02:07 - So the idea is that this
two-dimensional array
02:10 - structure--
02:11 - this list of lists--
02:13 - is storing all the
information for what
02:15 - the current state of each cell
in the Tic-Tac-Toe grid is.
02:19 - At the beginning,
they're all blank.
02:21 - And then, as the players play,
X's and O's get filled in.
02:24 - So now I'm going to
nest a loop through--
02:26 - check every column, check every
row, and render something.
02:31 - So I could just use
the Text function.
02:34 - I could say, let spot equal
the board index i index j.
02:40 - And then I could say,
text that spot at x, y.
02:47 - So where is x and y?
02:49 - So I need a width.
02:52 - I'm going to fill
the whole canvas.
02:54 - So width equals the width
of the canvas divided by 3.
03:00 - And height equals the height
of the canvas divided by 3.
03:03 - It would make sense for me
to have players in an array.
03:07 - And maybe I could have 3.
03:08 - It doesn't have to be
a hardcoded number,
03:10 - because I could make, like,
a 5-by-5 tic-tac-toe board.
03:13 - But I'm doing this in the
simplest way possible.
03:15 - So x equals width times i.
03:20 - And y equals height times i.
03:25 - And let's run this.
03:26 - What's going to happen?
03:27 - Do you see anything?--
some X's and O's?
03:29 - They're sort of in there.
03:32 - And then I'm going to say, text
size 32, to make it bigger.
03:38 - Why are they all on top
of each other like that?
03:41 - Oh!
03:41 - Oh!
03:42 - I forgot j here.
03:44 - There we go.
03:44 - Look!
03:45 - There's my tic-tac-toe board.
03:47 - But things are kind of off.
03:49 - Oh, because of the way--
03:50 - you know what?
03:50 - I should just draw
it as a circle.
03:55 - Let's do this.
03:55 - If spot equals player 1, then
draw an ellipse at x, y width,
04:08 - width.
04:11 - And then otherwise, if
spot equals player 2,
04:17 - then draw a line from x,
y to x plus w, x plus h,
04:24 - and another line from x
plus w y to x, y plus h.
04:32 - So that's me drawing an x.
04:37 - Whoa!
04:37 - That looks totally wrong.
04:39 - So first, let me say, no fill.
04:43 - And the offset should
be plus w divided by 2.
04:47 - So we need to offset
all of those spot.
04:49 - [TRILLS TONGUE]
04:51 - Ugh!
04:52 - Oh, and then this would be--
04:54 - oh, no, no, no, no.
04:56 - No, no, no, no.
04:57 - Oh, my god!
05:01 - Help!
05:03 - Let's diagram this.
05:07 - I have a 3-by-3 board.
05:11 - This is x equals 0.
05:13 - This is x equals 1.
05:15 - This is x equals 2.
05:16 - This is y equals 0.
05:18 - This is y equals 1.
05:19 - This is y equals 2.
05:21 - So an x should be
drawn from here--
05:25 - from x, y, x, y to
x plus h, y plus h.
05:29 - So the x I did correctly.
05:32 - Let's go back to here and
comment out the ellipse.
05:36 - And let's make the
board all full of X's.
05:42 - Let's just make the top
row all full of X's.
05:46 - Oh, my goodness.
05:48 - [BUZZING NOISE]
05:50 - Everybody, I just
lost, like, two or--
05:52 - like, 45 minutes--
not really that long--
05:54 - by accident, because
I had an x here.
05:56 - This needs to be y.
05:58 - OK, so now we can see the X's.
06:00 - I could see the X's.
06:01 - Let's draw the grid.
06:03 - We could see the X's.
06:05 - Oh, those are really giant X's.
06:06 - Now, let's put the
circles back in.
06:09 - You can see, there's-- ah!
06:10 - The circles need to be--
06:12 - I need to say,
ellipse mode corner.
06:17 - There we go.
06:18 - Oh, boy!
06:19 - So the X's are all
kind of connected
06:21 - in a way that looks weird.
06:22 - So actually, wouldn't
it make sense
06:24 - to not draw everything
relative to the corners,
06:27 - but to draw everything
relative to the centers?
06:29 - And I could have just used
text-to-line and gone back
06:33 - with the letters.
06:34 - But I want to draw it.
06:35 - I want to draw it.
06:36 - So I'm going to draw everything
relative to the center.
06:38 - You'll see.
06:38 - This is going to improve it.
06:40 - Boy, this is really
going super well so far.
06:43 - So what I'm going
to do is say, each X
06:46 - is it's index into its column
and row times the width
06:53 - plus width divided by 2
plus height divided by 2.
06:56 - That offsets everything by 1/2.
06:59 - And then I'm actually
going to say, the size--
07:05 - I'll call this the X size.
07:08 - I'm going to have this
equal to w divided 2--
07:12 - half of that.
07:13 - And then I'm going to say, x
minus x size, y minus x size
07:21 - to x plus x size,
--let's just call
07:28 - this xr, kind of
like the X's radius.
07:36 - And then this one will
be plus xr to y minus xr
07:44 - and then to x minus
xr to y plus xr.
07:52 - And then, width divided by 4--
07:54 - there we go!
07:55 - There's my X's.
07:56 - And let's make the
stroke weight 4.
08:02 - There's my X's.
08:02 - And now the O's--
08:04 - no more ellipse mode.
08:05 - And let's make this w
divided by 4 or divided by 2.
08:10 - There we go!
08:11 - Look!
08:11 - So this is what the
tic-tac-toe board looks like.
08:13 - Yeah!
08:14 - I like the way it
looks better now.
08:15 - That was painful.
08:17 - So now, let's set
it up as blank.
08:19 - Oh, and by the way, I've
reversed my x's and y's.
08:22 - So actually, the
x's should be j.
08:26 - And the y's should be i.
08:27 - Actually, let's just do
it the other way around.
08:29 - Let's keep x's i
and y's j, but do
08:33 - the j loop as the
outer loop, and the i
08:37 - loop as the inner loop.
08:40 - There we go.
08:41 - OK-- whoo!
08:43 - So now, what I want to
do next is play the game.
08:52 - So let's have a variable
called currentPlayer.
08:57 - And currentPlayer is
equal to player 1.
09:03 - Let's randomly pick between
player 1 and player 2.
09:07 - So every time we start the
game, the currentPlayer--
09:12 - and let's actually--
let's make this an array.
09:18 - I like the idea of making
this an array for some reason.
09:21 - And let's have the
currentPlayer be
09:23 - player's index 0 or
the currentPlayer
09:25 - is players index 1.
09:28 - And then this-- we can make--
09:41 - 0 is a circle.
09:45 - 0 is the x.
09:45 - I did it right.
09:47 - 0 is the x.
09:48 - Index 1 is the circle.
09:50 - What's going on here?
09:52 - Where's my error?-- line 44--
09:56 - too many brackets, huh?
09:59 - Oh, I need a closing
bracket for setup.
10:01 - OK, come back, board.
10:04 - And let's make the
background a 255.
10:07 - Oh, this is very silly, because
I can say-- the whole reason
10:10 - for me doing that
is, in p5, I can say,
10:12 - currentPlayer equals
Random Players.
10:16 - So this will pick
a random player.
10:18 - I really need to
see those lines.
10:20 - So let's draw the lines.
10:23 - Let's draw a line
from w0 to w height--
10:29 - oh, no, no, no.
10:30 - So to w-- the whole height.
10:33 - Then we'll draw a
line from w times 2.
10:38 - So I just want to
draw that criss-cross.
10:41 - And we'll do the same
thing for 0 to width.
10:47 - And this will be h to h and
then h times 2 to h times 2.
10:58 - Now, really what I should do
is make this now interactive,
11:03 - so that you could click
and add the x or the y.
11:06 - I think I might leave that
as a little challenge to you.
11:09 - I'm just going to have
the computer play the game
11:11 - Tic-Tac-Toe and see
if somebody wins.
11:14 - So either the board
will be full and it's
11:16 - a tie or somebody will win.
11:17 - And I won't use any
intelligent algorithm.
11:20 - I'm just going to have each
player pick a random spot.
11:26 - So what I'm going
to do is I'm also
11:29 - going to make an array
called Available.
11:32 - So each available spot--
11:35 - in the beginning,
I'll just say--
11:37 - I'm going to make a nested loop.
11:41 - So much for making me be
super beginner friendly.
11:44 - So I'm going to say,
available.push--
11:48 - an i and a j.
11:51 - So right now, every little pair
of index values for that grid
11:57 - is available.
11:58 - So each time through Draw,
let's make a function
12:01 - that's called nextTurn.
12:02 - And we'll say, spot that I'm
picking is a random-- oh,
12:07 - I'm going to have
to get an index--
12:10 - index-- because I
want to remove it.
12:15 - Index is a random
number that's between 0
12:19 - and the length of how
many things are available.
12:23 - And then the Spot is going to
take that array, Available,
12:28 - and remove that index value.
12:32 - The splice function will
remove it and put it in Spot.
12:35 - And then I'm going to
say, board spot 0 spot 1--
12:42 - oh, that's so awkward.
12:44 - But spot is a little array
with two values in it, 0 and 1.
12:48 - And so this is not a comma.
12:50 - It's another little bracket.
12:51 - Ooh, look how
horrible that looks.
12:55 - Let's do, let i
equal spot index 0.
12:59 - Let j equal spot index 1.
13:02 - And then, in the board
ij, I'm going to say--
13:11 - [TRILLING NOISE]
13:12 - --the player-- currentPlayer
And then currentPlayer should
13:18 - equal--
13:19 - let's just pick a random player.
13:24 - This is not the
right way to do it.
13:26 - Let's just see if this works--
13:27 - mousePressed, nextTurn.
13:32 - So every time I click
the mouse-- uhhh!--
13:35 - currentPlayer is not a thing?
13:37 - When I splice it out,
does it come in an array?
13:40 - Oh, how awful!-- it
comes in an array.
13:43 - So I need to do that.
13:44 - There we go.
13:45 - There we go.
13:45 - I'm filling up the board.
13:49 - OK, I've done this in
such a super awkward way.
13:53 - I might want to rethink this.
13:54 - But it does work.
13:56 - You watching this will make
a nicer version of this.
14:00 - But I want to go back and
forth between the players.
14:02 - So currentPlayer should actually
be an index into that array.
14:08 - So I actually want to say
random players.length,
14:12 - because I want that
to be an index.
14:14 - Because then, when I am adding
the things to the board,
14:20 - I want it to be players
index currentPlayer,
14:23 - because the next player should
be currentPlayer plus 1 modulus
14:33 - players.length.
14:34 - So I've built this in
a way that you could
14:36 - have more than two players.
14:38 - So it should be
O-X-O-X-O-X-O-X-O. Hey!
14:43 - O won that one.
14:46 - All right-- so this works
with my wacky implementation.
14:50 - Now, I don't need
mousePressed to call nextTurn.
14:54 - I just want draw
to call nextTurn.
14:58 - So it fills up.
15:00 - But I also want to
check for a winner.
15:04 - Check for a winner.
15:07 - So what I'm going to do--
15:08 - I'm going to write a
function called checkWinner.
15:15 - And what I'm going
to do in checkWinner
15:17 - is see, first of all, if
available.length equals 0,
15:28 - then console.log toe.
15:33 - So it was a tie.
15:36 - So if the board fills
up, it was a tie.
15:38 - But first, I need to
check-- is there a winner?
15:42 - So let winner equal a null.
15:46 - So I'm going to say,
there's a winner.
15:49 - Now, what I'm going to
do is check all of the--
15:54 - first, I'm going to check
all of the ways across.
15:57 - So let's first check horizontal.
16:05 - So i is now the row.
16:08 - So if board index i--
16:12 - well, is that the row?
16:14 - I don't remember-- 0 equals
board index i 1 equals board
16:20 - index i 2, then winner
equals board index--
16:30 - whichever one it is.
16:31 - OK, so if all three
of those are equal,
16:35 - then the winner is
whoever you picked.
16:37 - I could also check
now the columns.
16:42 - I don't remember which
is which, but whatever.
16:46 - I'm doing one and the other.
16:47 - Then if they're all equal,
then I've got a winner.
16:54 - So this would be vertical--
16:56 - except it might be
the other way around.
16:59 - And now, I need
to check diagonal.
17:03 - So that's easy.
17:04 - I just want to say, if board
0 0 is equal to board 1 1
17:11 - is equal to board 2 2, then
the winner is board 0 0.
17:23 - And then I can also check, if
board 2 0 is equal to board 1 1
17:33 - is equal to board 0 2-- that
would be the other diagonal--
17:36 - then the winner is board 2 0.
17:40 - And now, if winner is
still null and available
17:45 - is length, console.log tie.
17:50 - Otherwise, console.log winner.
17:58 - All right-- X is the winner.
18:03 - But if there's a winner--
18:08 - so let result equal checkWinner.
18:17 - If result is not equal
to null, then no loop--
18:26 - stop the looping--
18:27 - console.log result.
18:32 - OK-- why am I getting errors?
18:34 - Oh, OK.
18:35 - Is nextTurn happening?
18:37 - Ah-- nextTurn has to
happen after this.
18:43 - No-- oh!
18:49 - [BELL DINGS]
18:50 - I did something so nuts.
18:53 - Look at this!
18:53 - I was like, that doesn't work.
18:56 - If this equals this equals
that, that doesn't work.
19:01 - This is the concept.
19:05 - I'm going to write a function
called equals3 a, b, c.
19:12 - And I'm going to return
if a equals b and b
19:18 - equals c and a equals c--
19:22 - so this is really the only way--
19:27 - there's other ways.
19:28 - But this will actually check--
19:29 - if a is equal to b and
b is equal to c and a
19:31 - is equal to c-- if
all of them are equal,
19:33 - then all three of
them are equal.
19:35 - So I'm sure people have
been screaming at their--
19:38 - so now I can say, equals3--
19:44 - and like this.
19:48 - And then same thing here--
19:50 - so this is checking
all the horizontal.
19:54 - This is checking
all the vertical,
19:55 - even though I have
this mixed up.
19:57 - This is checking
the two diagonals.
19:59 - If the winner is null and
available, length is 0.
20:04 - We have a tie.
20:06 - Is that redundant?
20:08 - Yes, this is redundant.
20:11 - Yes-- whoops!
20:13 - Where am I-- am I console
logging somewhere else?
20:16 - Oh, I forgot them.
20:17 - Oh, I'm not
returning the winner.
20:22 - [BELL DINGS]
20:24 - And I'm console logging a
lot of other nonsense here.
20:27 - I'm doing a horrible
job at this.
20:31 - This should be return.
20:33 - I'm rushing.
20:33 - You should never code and run.
20:35 - Take a deep breath and
relax while you're coding.
20:37 - Return tie.
20:41 - Otherwise, return winner.
20:47 - Now-- oh, they could be equal!
20:51 - They can't be blank.
20:52 - They can't all be--
20:53 - then somebody wins.
20:55 - They have to be full.
20:56 - So OK-- and a is
not equal to blank.
21:01 - There we go!
21:02 - X is the winner.
21:03 - Let's run it again.
21:05 - X is the winner.
21:07 - O is the winner.
21:08 - X is the winner.
21:09 - So let's at least make a
createP winner style color FFF.
21:25 - Oh-- result 32 point--
21:31 - there we go.
21:31 - That's what I'm looking for.
21:33 - OK, now every time I run it--
21:35 - tie, O, X, O wins.
21:39 - And let's changed
the frame rate.
21:40 - We're going to make
this super dramatic.
21:46 - Frame rate-- 1.
21:47 - OK, here we go, everybody.
21:48 - O, X, O-- where's X going to go?
21:51 - Oh!
21:52 - X, O, X-- oh!
21:56 - It was a tie.
21:57 - Oh, no-- O won.
21:58 - O won.
21:59 - [CELEBRATORY MUSIC]
22:00 - Congratulations, O. Let's
play this one more time.
22:05 - [RAGTIME PIANO MUSIC]
22:06 - Here we go--
22:09 - X, O. What will happen?
22:13 - Place your bets.
22:20 - X won.
22:21 - Congratulations, X.
22:23 - [RAGTIME PIANO MUSIC]
22:25 - X, O, X-- come on,
X. Oh, you can do it.
22:29 - Oh, good work, X. Wow!
22:31 - You really won that one.
22:33 - All right-- thanks for
watching this coding challenge,
22:35 - where I made an AI play
Tic-Tac-Toe against itself.
22:38 - You can see how
well it's learning.
22:40 - X just keeps winning
over and over again.
22:43 - I will come back in a
future second part to this.
22:46 - I know I say this for so
many coding challenges.
22:48 - You think I'm never coming back.
22:49 - It will be sometime in
the next several years.
22:51 - I will come back and fix
this up a little bit,
22:54 - as well as implement something
called the mini-max algorithm,
23:01 - to actually make thoughtful,
smart decisions for how
23:03 - to place your X's
and O's for an AI
23:07 - to learn how to beat this game
and to always win Tic-Tac-Toe.
23:09 - Ah-- and as a challenge
to you, the viewer,
23:12 - take this version of my
Tic-Tac-Toe coding challenge
23:16 - and, when X or O wins, draw a
nice little line through it,
23:20 - to indicate the winning.
23:22 - I don't have time
for that right now.
23:23 - I should really
add this to this.
23:25 - But please add it to this.
23:26 - Go to the Coding
Train website, where
23:28 - you will find this challenge
on the website itself
23:33 - and a place to add your
community contribution as well
23:36 - as--
23:36 - a video tutorial about how to
add your community contribution
23:40 - is out now as well.
23:41 - So I hope to see lots
of Tic-Tac-Toe games
23:43 - and computers playing
them, people playing them.
23:45 - And have a lot of
fun making those.
23:47 - And I'll see you in a
future coding challenge.
23:49 - Goodbye.
23:50 - [BLOWS WHISTLE]
23:51 - [MUSIC PLAYING]