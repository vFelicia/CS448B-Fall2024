00:00 - Let's review what we did
in the previous video.
00:02 - So this video is
entirely dependent.
00:04 - This is part two of
graphing a CSV data file.
00:09 - So in the previous
video, we went
00:11 - and got global world
temperatures, average world
00:15 - temperature, from
1880 to present.
00:18 - We got that as a CSV
comma-separated values
00:20 - file from NASA.
00:22 - We parsed it using some simple
string passing techniques
00:25 - with the split function.
00:27 - Now we'd able to
console log that data.
00:30 - But instead of console logging
that data, I want to graph it.
00:32 - There are so many different
approaches we could take.
00:34 - There are many JavaScript
libraries for making charts.
00:40 - Probably one of most famous
ones is D3, a data visualization
00:43 - library for JavaScript.
00:45 - We could also draw our own chart
just by using HTML 5 Canvas
00:50 - and drawing functions,
or using something
00:51 - like p5 js, which is a
creative coding JavaScript
00:55 - library that I use a ton
to draw all sorts of kinds
00:58 - of interactive animations.
00:59 - And I could draw something
based on the data there.
01:01 - But I want to show you just kind
of what might be the quickest
01:04 - path right now to going from
data to chart in the browser.
01:08 - And so a simple tool,
a Javascript library
01:10 - for doing this, is Chart.js.
01:12 - Chart.js is a library
you can import
01:14 - right there into your
client side JavaScript.
01:17 - With creating a chart object,
you can just configure it,
01:20 - you can give it the data,
give it some colors,
01:22 - tell it whether you want a
line or a bar chart, and poof,
01:25 - you'll see the chart on
the web page in a canvas.
01:28 - So I'm going to show you step by
step how to import the library,
01:32 - add a canvas, draw the
chart, and then draw
01:35 - the chart using your own data.
01:37 - So here we are the
Chart.js website.
01:39 - There's a lot of examples,
a lot of documentation
01:42 - in the source code on GitHub.
01:44 - I encourage you to check out
more about the JavaScript
01:46 - library.
01:47 - I'm going to move to this
Get Started page, which
01:51 - will give me the basic
techniques for using Chart.js.
01:55 - So, first thing is, how do
I even import the library?
01:58 - And this is crucial.
01:59 - I'm going to use a Chart.js CDN.
02:02 - So CDN stands for
content delivery network,
02:04 - meaning I'm going to
load the library via URL
02:06 - that's hosted somewhere
on the internet.
02:08 - So let's click on this and
see where that takes us.
02:11 - It takes us to js Deliver.
02:13 - Then all I need to
do is go down here.
02:16 - We can see this is the
most recent version, 2.8.0,
02:20 - of the library.
02:21 - If I click on this, it's
going to up a new web page.
02:23 - And, look that's actually--
that's the JavaScript
02:25 - library, all the code for the
JavaScript library itself.
02:28 - It's actually a bit
minnifield, meaning
02:30 - the raw source of
the library has
02:32 - line breaks and
big variable names
02:34 - and all that kind of stuff.
02:35 - But all I need is
this URL right here.
02:38 - I'm going to go
back into my code,
02:40 - I'm going to go into the header,
and I'm going to say script,
02:44 - I'm going to say source equals.
02:45 - And what I want is the URL
to the JavaScript library
02:49 - is, Chart.js.
02:51 - Now I'm going to
paste that right in,
02:53 - as soon as I close this.
02:55 - Visual Studio Code is
doing a nice thing for me.
02:57 - It's closing the script
tag automatically,
02:59 - but otherwise you would
have to type that in.
03:01 - So open script tag, source
equals this and the URL
03:06 - and then close script tag.
03:07 - So now I have Chart.js loaded.
03:10 - The next thing I need
is, I need to have
03:12 - a canvas in my HTML itself.
03:17 - So I need to add
a canvas element.
03:20 - I'm going to give it
an ID, like chart.
03:24 - And I think I also need
to give it a width.
03:27 - Let's just try 400.
03:28 - And a height, 400.
03:29 - And those should be in quotes.
03:30 - Thank you Visual Studio Code for
correcting me when I hit save.
03:34 - So there you go.
03:35 - So you can now see
I've added a canvas.
03:37 - I gave it an ID.
03:38 - And I gave it a
width and height.
03:40 - So somehow I need to tell
this data to graph itself
03:46 - on that canvas.
03:47 - Let's go back to that
Getting Started page.
03:49 - And, look, it's given
us some code here.
03:53 - This is code for some sort
of bar chart with some data.
03:57 - So one way that
we could actually
04:00 - start working with this
is, let's just copy, paste,
04:02 - and take this code.
04:03 - So when you're working
with a new library,
04:05 - you can try a variety of things.
04:06 - You could read through
the documentation,
04:08 - you could find an example.
04:09 - For me this getting
started example is going
04:11 - to be perfect to work with.
04:12 - So I'm just going to take
this, I'm going to copy it,
04:15 - and I'm going to paste it here
at the top of my script tag.
04:19 - OK.
04:20 - So there it is.
04:21 - So in theory, when I refresh
the page, I should see a chart.
04:27 - No.
04:28 - No.
04:28 - What happened?
04:29 - So we've now
encountered something
04:31 - that has to do with the
asynchronous events that happen
04:35 - when you load a web page.
04:36 - So it's saying,
cannot read property.
04:38 - Get context of null at index 13.
04:42 - Let's go to index line 13.
04:44 - Document-- oh, OK.
04:45 - Actually this is a
different problem.
04:47 - I didn't name my canvas my
chart, I named it chart.
04:50 - So let's see if this
fixes the error.
04:53 - There is a different error
that I thought was happening,
04:55 - but this is clearly an error.
04:57 - The ID of my chart is
just chart, not my chart.
05:00 - Oh, there it is.
05:02 - So look, there's the chart.
05:03 - Beautiful.
05:04 - So I have this
chart, it's counting
05:08 - votes for different
colors, it's got a scale
05:10 - on the y-axis, a
scale on the x-axis,
05:13 - and I see my data console log.
05:15 - How do I get my
data onto the chart?
05:18 - Well, let's look
at the code and see
05:20 - if we can just do some detective
work and figure it out.
05:22 - And if we get
stuck, we can refer
05:24 - to the Chart.js documentation.
05:27 - So we can see here, label.
05:28 - Well, the label that I want
is global average temperature.
05:37 - And again, I might
need to be a bit more
05:40 - thoughtful about the
accuracy of that statement.
05:42 - What is it truly, if I
look at the NASA data set,
05:45 - but global average
temperature will do for now.
05:48 - So let's just change that.
05:49 - And we can say,
look, it's showing us
05:50 - the global average temperature.
05:52 - But these labels,
red, blue, yellow,
05:55 - where did those come from?
05:57 - Those are here labels.
06:00 - So I don't want these labels.
06:03 - What I want are the years to be
the labels, the years that I'm
06:09 - parsing to be the labels
that go across the x-axis.
06:12 - So what if I were to say--
06:15 - first of all, this example is
using older JavaScript syntax.
06:19 - By the time you're
watching this is probably
06:20 - something different.
06:21 - But I'm going to say instead
const, instead of var.
06:24 - And I'm going to say const
here, instead of var, just
06:28 - to update my variable
declarations.
06:30 - If you're wondering
what const is,
06:31 - I have some other
videos about that.
06:33 - Then I am going to
create another variable.
06:37 - I'm going to call it
xlabels, for the x-axis,
06:40 - and set it equal
to a blank array.
06:43 - And I'm going to put that
variable referenced here.
06:50 - So the actual labels of
my chart are pointing
06:54 - to an array called xlabels.
06:56 - And there's no reason
why I couldn't,
06:58 - as I'm reading each year, just
add each year to that array
07:05 - xlabels.
07:06 - So now I have my data parsing,
I have my chart creation.
07:10 - So what I want to do
is parse all the data
07:13 - and start adding the
labels to the chart that's
07:16 - being drawn on the canvas.
07:17 - Let's see what happens there.
07:20 - OK.
07:20 - I don't see any labels.
07:23 - Now, I have the
other problem that I
07:25 - was thinking would
happen, which is
07:27 - I am making the chart first
and then loading the data.
07:32 - So this is a problem.
07:33 - Weirdly, by the way, if I just
kind of like resize the window,
07:36 - suddenly the data appears.
07:40 - But it should appear when
I first load the page.
07:44 - So I've got to do this
in a different order.
07:47 - I have this getData function
that gets the data that
07:51 - asynchronously using await
fetch, await response .text.
07:56 - What I want to do
now, then, is go up
07:58 - and put this creation of the
chart into a separate function.
08:05 - So I'm going to say function
chartIt and all of that's
08:12 - going to be in a function.
08:14 - Now, that this example
that was provided
08:17 - on the Chart.js
Getting Started page
08:19 - has a lot of really useful,
but for me right now,
08:22 - extra stuff in it.
08:24 - So there are a lot of
configuration options, how
08:27 - you can have the chart appear.
08:29 - I'm actually going to just
remove those right now.
08:31 - As an exercise for you, that
I'll suggest for you at the end
08:33 - is, maybe find different ways of
drawing the chart by looking up
08:36 - in the documentation.
08:38 - And then also I'm just going
to stick with one color.
08:41 - So I'm going to take all
of that out right now.
08:44 - I probably could take
out the color entirely.
08:46 - I'm going to hit save.
08:47 - So you can see, at least
now in my chartIt function
08:50 - there is a little bit
less stuff going on.
08:52 - So now I could call
this chartIt function.
08:56 - And if we go back,
this is the same thing.
08:57 - I've got the same problem,
but xlabels is not defined.
09:01 - So I somehow-- the
xlabels variable
09:04 - needs to be a global variable.
09:06 - I actually don't like something
about what I'm doing here,
09:08 - so I'm going to do
some refactoring as we
09:09 - get to the end to
clean up how I'm
09:11 - going to communicate
between getting the data
09:14 - and drawing the chart.
09:16 - But for right now, I'm going to
make xlabels a global variable.
09:20 - I'm going to call
the chartIt function,
09:22 - and call the getData function.
09:28 - Still the same problem.
09:30 - Well you would think, OK,
what if I call getData
09:33 - before chartIt.
09:35 - Still the same problem
because remember getData
09:37 - is asynchronous.
09:39 - So the solution that
I want employ here
09:40 - is make chartIt an
asynchronous function.
09:43 - And then actually call getData
at the beginning of it.
09:47 - So if I say, await
getData, now chartIt
09:51 - is going to wait till the
data is done before it
09:53 - does the rest of this stuff.
09:55 - And if we go back, we
can see, there we go.
09:57 - You can see all those
labels are applied there.
10:00 - Now this is not real data.
10:02 - This is still the data
that's right here.
10:06 - So what I want to do now is
let me do constant ytemps.
10:10 - So this is the temperatures
for the y-axis.
10:13 - And then I'm going
to say under data,
10:18 - I'm going to say ytemps,
instead of that dummy data.
10:23 - And then here, when I'm
reading each temperature,
10:26 - I'm going to say
ytemps.pushtemp.
10:30 - temp
10:31 - So now let's take
a look at this.
10:33 - There we go.
10:34 - Now we see the
global temperature
10:38 - from 1880 all the way to 2018.
10:41 - Now what's going on here?
10:42 - Negative 0.2, 0.
10:44 - What are these temperatures?
10:45 - Remember, these
are the difference
10:48 - from the global mean between
the period of 1951 and 1980.
10:53 - And that global mean can
be found on this web page.
10:56 - Here it is, 14 degrees Celsius.
10:59 - So if I wanted to be accurate
about what I'm doing here.
11:02 - I'm going to say--
11:07 - I want the temperature
to be temp + 14.
11:11 - Right?
11:11 - I just want to add 14 Celsius.
11:13 - I think this is going
to cause a problem.
11:14 - Let's see what happens here.
11:16 - Let's go back to my graph.
11:20 - I don't see anything
different here.
11:22 - pushtemp + 14.
11:25 - Well, I think what's going
on here, if I'm right,
11:29 - we'll find out the
second, is that anytime
11:32 - you're doing parsing from a text
file, your stuff is still text.
11:35 - It's a string.
11:37 - It doesn't know how
to add 14 to a string.
11:39 - I can actually use a
function called parseFloat,
11:42 - which is a global JavaScript
function that's available
11:46 - that takes a string and
turns it into a number.
11:50 - So now I can actually
add the number 14
11:53 - to the number of temp.
11:55 - So now we should
see, there we go.
11:57 - We can see this is the actual
average temperature from 1880
12:02 - to 2018.
12:04 - This is a bar chart.
12:05 - I don't think the bar chart is
the best way to describe this.
12:07 - it does look kind of
funny to me that this one
12:10 - is colored differently.
12:11 - I think that's because I
removed the color thing.
12:14 - So let's see if we can fix that.
12:16 - So I have a feeling that
if I get rid of the--
12:18 - I'm just guessing,
but I have a feeling
12:20 - the Chart.js works if I get
rid of the color as an array.
12:25 - Yes.
12:26 - It applies the
color to everything.
12:28 - And then I can also change
this from type to bar to line.
12:35 - And there we go.
12:35 - Now, I don't necessarily
want the fill below it.
12:38 - This is a good
example of where I
12:39 - need to look up in
the documentation
12:41 - because I have no
idea how to turn
12:42 - the fill below the line off.
12:45 - That's probably
some parameter that
12:46 - either goes in options
or with the data set.
12:48 - Let's see if I can find that
on the Chart.js website.
12:51 - Here along the side is all
of the different things.
12:55 - I imagine if I go into line--
12:58 - it's showing me
line, example usage,
13:00 - data set properties, fill.
13:02 - There we go.
13:02 - Fill.
13:03 - These are all these
different things I could try.
13:06 - Fill, Boolean, or string.
13:08 - Default is true.
13:10 - So I think that
means if I add fill:
13:13 - false here, as another option
in the data sets object.
13:18 - Then if I go back here.
13:21 - We can say, yes, no more fill.
13:22 - That looks great.
13:23 - I probably want to think
about what this label is
13:27 - to be more accurate.
13:28 - This is pretty important.
13:29 - So how about I say
exactly what the data is.
13:33 - So here's the exact data I got.
13:35 - the Zonal Annual Means, the
Combined Land Service Air
13:38 - and Sea Water
Surface Temperature.
13:39 - So land ocean temperature index.
13:45 - Let's change the label
to this, in Celsius.
13:52 - And then I have to type
that degree symbols.
13:54 - Does anybody know how to
type the degree symbol?
13:56 - Apparently its option, shift,
8 to type the degree symbol.
14:00 - I have not actually tried this.
14:01 - Let's see if it works.
14:02 - Yes.
14:03 - There we go.
14:03 - We've got Celsius.
14:06 - And let me go back
and we can see.
14:08 - There we go.
14:08 - So now I have my label up there.
14:11 - What I want to do--
let me refactor
14:12 - this code a little bit.
14:13 - So I don't really love the use
of these global variables here.
14:16 - I think what would
make more sense--
14:19 - and there's so many different
ways we could do this,
14:21 - but let me just do one way
to make it a little simpler.
14:25 - Let me actually have
a local variable here.
14:29 - I'm going to call
these X's and Y's.
14:33 - And then I'm just going to
push the X's here, push the Y's
14:38 - here.
14:39 - And then, when this
is done, I'm going
14:41 - to return an object
with X's and Y's in it.
14:44 - So the getData
function is actually
14:46 - going to return an object
with both of those arrays.
14:49 - And so then what I can
say here is I can say,
14:54 - data equals await getData.
14:56 - And then, here, under
labels, I want data xs.
15:00 - And here under the data
set, I want data ys.
15:05 - So, again, I'm not sure
this is the best solution.
15:08 - But at least now the chartIt
function and the getData
15:12 - function kind of
operate independently
15:14 - without sort of sharing
a global variable, which
15:16 - could cause some problems
later down the road.
15:19 - And we can see this
still works just fine.
15:22 - It might be nice to also just
add the degree symbol here.
15:26 - I have no idea if
that's possible.
15:28 - It's making these
labels automatically.
15:30 - So looking again at
the documentation--
15:32 - and I did just take a little
break to find this in advance.
15:35 - But under here, under
axes, under labeling
15:40 - is what I want to do.
15:41 - I want to change the way the
labeling of the y-axis works.
15:46 - So if I click here,
we can see there are--
15:50 - we can see these are
all the possibilities.
15:52 - But actually this is what
I want, custom tick format.
15:56 - So each one of these labels
on the left is a tick.
16:01 - Like tick, tick, tick,
tick, tick, tick, like that.
16:05 - And so what I want to do is I
need to add these options back.
16:11 - This is something
I removed earlier.
16:12 - So let me add the options back.
16:16 - Under y-axes, under ticks,
this is a callback function.
16:21 - This is kind of crazy.
16:22 - So this is an example for
including a dollar sign.
16:24 - It's basically saying,
here's a function
16:26 - that defines how to
label the y-axis.
16:30 - Take the value and turn it into
dollar sign plus the value.
16:34 - So what I want to do
is, take the value
16:37 - and turn it into
value + degrees.
16:42 - And I want to get
rid of this comment.
16:44 - And now I have that configured
as part of my chart.
16:47 - And here we are.
16:49 - Look, there you go.
16:50 - Now you can see the
degree symbol is there.
16:52 - So let me just spread
this back out again.
16:53 - I feel like this whole
the canvas size is weird.
16:57 - So I'm going to make
this like 800 by 400.
16:59 - There we go.
17:00 - Then I'm going to get
rid of the console.
17:02 - And, voila!
17:03 - We have our finished chart
that shows the combined land
17:07 - surface air and sea surface
water temperature in Celsius,
17:10 - average, from 1880
all the way 2018.
17:15 - And you can see here, by the
way, some very, very s evidence
17:19 - that the Earth is warming.
17:21 - The average temperature,
over time, since 1880 to now,
17:25 - is going up.
17:26 - To recap, we have
seen how to load
17:29 - tabular data in the form of a
comma-separated values file.
17:33 - We've seen a little
bit about how
17:35 - to parse that file manually.
17:36 - Although, ultimately,
we might want
17:38 - to use a parsing
engine that's going
17:40 - to be able to handle all
sorts of errors or things
17:42 - that might come up.
17:43 - Once we have that
data, we've seen
17:45 - how to repackage that data
for a different library
17:48 - to use it, in this
case, Chart.js,
17:50 - to apply a chart with
that data to the canvas.
17:53 - And we've seen how to
adjust a little bit
17:56 - of the sort of styles and
layout and format of that chart.
18:00 - So what should you do here?
18:02 - So you have a couple
of different options.
18:04 - One exercise is just do
exactly the same thing
18:06 - as I have here, but do
it with your own data.
18:10 - What's some CSV data
that you can find?
18:13 - Another thing that
might be fun to try
18:14 - is, go and get p5.js js library.
18:17 - Could you draw
your own line graph
18:19 - without Chart.js, but
using this raw drawing
18:22 - functionality of p5.js?
18:24 - I will include a
solution to that
18:26 - in this video's description.
18:27 - Another exercise
that you might try
18:29 - is actually graph multiple
lines on the same chart.
18:32 - In many cases, you want to
look at data and good person
18:34 - to other data.
18:35 - So for example, in
that same data file,
18:37 - you'd get the
average temperatures
18:38 - for the northern hemisphere and
for the southern hemisphere.
18:41 - So you could graph all three:
the global temperature,
18:44 - northern hemisphere,
southern hemisphere,
18:45 - altogether on that chart with
different colors for each line.
18:48 - And I'll include a solution
to that also as an exercise.
18:51 - So thank you for
watching this video.
18:52 - This concludes the second
part of the first module.
18:55 - We've learned about the
fetch function with images.
18:57 - And now we've learned about
the fetch function with CSVs,
19:01 - and also graphing the
data with Chart.js.
19:04 - In the next project
we're going to look
19:06 - at how to get data
from a web API,
19:09 - something that's
not a local file,
19:11 - and data that changes
every so often.
19:13 - And the data set, the example
that I'm going to use,
19:15 - is the location in
latitude and longitude
19:18 - of the International
Space Station.
19:20 - Where it is above the Earth?
19:21 - Then I'm going to show you how
to draw its location on a map.
19:25 - And refresh its
location every so
19:27 - often so that it
moves in real time.
19:30 - So that's the last part
of this first module
19:33 - of working with data and API.
19:34 - And I'll see you in that video.
19:35 - Thanks very much.