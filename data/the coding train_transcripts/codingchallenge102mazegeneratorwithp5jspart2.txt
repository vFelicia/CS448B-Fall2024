00:01 - part two of my depth first search
00:04 - recursive backtracker maze generation
00:07 - demonstration algorithm thing here we
00:09 - are so all I did so far this is what I'm
00:11 - trying to build this thing that's going
00:13 - to take some time and eventually
00:14 - generate this beautiful uh hopefully
00:16 - will beautiful although mine won't be so
00:18 - beautiful you'll take my code and make
00:19 - something more beautiful but I'm going
00:20 - to show you how to make this maze
00:21 - generation thing now just to recap all
00:23 - we have so far is just this grid so I
00:25 - have this grid and in the code I have
00:30 - cell objects each cell knows where it is
00:32 - what's its column what's its row and it
00:34 - knows whether to draw its walls top
00:37 - right bottom left top right bottom left
00:40 - and it has a Boolean variable to keep
00:41 - track of which walls are currently
00:43 - active in there so we need to now go and
00:46 - look at that Wikipedia page where the
00:47 - algorithm is described so I'm going to
00:49 - go over here and look at this this is
00:51 - the algorithm working recursive
00:53 - backtracker so the whole backtracking
00:54 - aspect that's going to be in part three
00:57 - but we're going to do the forward
00:59 - tracking aspect so the first thing here
01:01 - is that make the initial cell the
01:03 - current cell and Market is visited okay
01:06 - so this is a really key concept what's
01:08 - going to happen here is that the program
01:10 - is going to start on a given cell and
01:13 - it's going to start walking around the
01:15 - cells and just deciding whether or not
01:17 - it should remove a wall or keep the wall
01:19 - there now as it walks around the cells
01:22 - it should never go back and visit a cell
01:24 - that it's already been at so we need a
01:27 - variable to keep track of whether a cell
01:28 - has been visited or not
01:30 - so if I come back over here that's the
01:32 - very first thing I want to add is I want
01:35 - to add another variable here that says
01:38 - this. visited equals false so each cell
01:42 - should uh not be visit so the first it
01:45 - starts as having not been visited sorry
01:47 - now uh sorry in in the main part of the
01:50 - program what I want now also to have is
01:53 - I'm gonna have a variable called current
01:55 - so this variable current is the current
01:58 - cell this is the cell that is currently
02:00 - being visited and in setup we could just
02:03 - have it be current equals grid
02:07 - index0 so I'm going to start the current
02:09 - cell just at Zero in the top left it
02:10 - could be anywhere could start in the
02:11 - middle start to the bottom right this
02:13 - has to do with where you want your maze
02:14 - to begin and end but for now I'm not
02:16 - really going to worry about it so much
02:17 - starting at grid index zero will be just
02:20 - fine and then in draw the very first
02:23 - thing I'm going to do is say current.
02:26 - visited equals true now I think there
02:29 - would be something useful here to
02:32 - do for example what I I just to be able
02:36 - to see be best it would also be really
02:38 - useful for debugging and remember I kept
02:40 - this in here is that we could have put
02:44 - some spaces here if the cell has been
02:47 - visited let's change its color a little
02:49 - bit so that we can sort of see what's
02:50 - going on so I'm going to say uh if this
02:55 - do
02:57 - visited uh draw a re rectangle I'm going
03:01 - to get good at this someday draw a
03:03 - rectangle with uh so much I want to turn
03:05 - off that autocomplete in between this
03:07 - video and the next one of um make it uh
03:09 - a nice like purplish color with a little
03:11 - bit of
03:12 - alpha so what we'll see here if I run
03:15 - this again oh that's the wrong one here
03:18 - is we can see this cell has been visited
03:20 - just that first cell is now kind of a
03:22 - purplish color okay so now we've got a
03:25 - structure for knowing if a cell has been
03:26 - visited and we're also debugging wise
03:29 - can see if that's been visited by
03:30 - highlighting it which will help us as we
03:31 - try to figure out if the program is
03:33 - working or not so let's now go and look
03:35 - at the algorithm and what's next while
03:38 - there are unvisited cells okay so as
03:42 - long as there are unvisited cells so we
03:44 - know that we're going to be finished
03:46 - when all the cells have been visited we
03:47 - worry about that later if the current
03:50 - cell has any Neighbors which have not
03:52 - been visited okay this is probably going
03:54 - to be a pretty complicated piece we need
03:57 - to figure out does the current cell have
04:00 - any Neighbors which have not been
04:01 - visited so let's figure out how we're
04:03 - going to do that I'm going to go back to
04:05 - my code which is over here um and come
04:09 - back and what I want to do is say
04:11 - something like current. check neighbors
04:15 - whoa how did it know that's what I was
04:16 - going to type that's
04:19 - crazy that is
04:21 - insane it's like predicting the future
04:23 - it's got some kind of like deep learning
04:25 - machine learning magic I wasn't even
04:26 - using this editor earlier I did type
04:28 - something earlier today that's a check
04:29 - name gers I don't know what's going on
04:32 - some sort of magic okay uh maybe I
04:34 - opened up a different example already
04:35 - whatever the point is I want to grade a
04:37 - function that's called check neighbors
04:40 - so I'm going to add that function this.
04:42 - check neighbors now it should know is a
04:46 - function so how do I check the neighbors
04:49 - okay let's think about this first of all
04:51 - I don't have I'm in a real place and
04:53 - there could be neighbors outside
04:54 - neighbors are people that are to the
04:55 - right the left in front of me Etc let's
04:58 - look at how that works over here so much
05:00 - like we were talking about in the
05:03 - previous video the top right bottom and
05:06 - left
05:07 - walls now if I have a cell there are
05:10 - four
05:12 - neighbors if this cell is at I comma
05:16 - J this is I + one comma J this is IUS
05:21 - one comma J this is I comma J minus one
05:25 - and this is I comma J + one right y goes
05:29 - up by one down by one I goes up by one
05:32 - down by one so this is what we want to
05:34 - check check the neighbors we need to
05:35 - know are any of these neighbors visited
05:38 - or unvisited Okay so let's start doing
05:42 - that I got to come back over here and
05:44 - say something like so I'm going to make
05:45 - an array called Neighbors and I'm going
05:48 - to say um write equals grid and now this
05:53 - is where it would be nice if I was using
05:56 - a two-dimensional Ray and you know what
05:57 - I want to start with top remember top
05:59 - top right bottom left this is how I'm
06:01 - always going to track everything so the
06:03 - top is grid you know you would sort of
06:06 - think of it as like this right if I had
06:09 - a two-dimensional array I would say
06:12 - i j minus one that's the cell above me
06:16 - right but I don't have a two-dimensional
06:18 - array I have a onedimensional array
06:20 - there is a magic formula the magic
06:23 - formula to get an index into a
06:26 - one-dimensional
06:28 - array where everything 0 1 2 3 4 5 6 7 8
06:32 - 9 10 11 12 the the where everything is
06:35 - ordered going across rows but I want to
06:38 - think of the column and row coordinate
06:40 - is as follows index equals i+ J * the
06:45 - number of columns I will link to a
06:47 - separate video where about pixels where
06:49 - I go through this algorithm specifically
06:51 - if you haven't seen it before but for
06:53 - now you can sort of trust me that that
06:54 - works so what I'm really saying here is
06:57 - this
07:00 - I'm saying I want this particular right
07:03 - neighbor and that's not the right
07:04 - neighbor that's the top neighbor right I
07:06 - want to check is that top neighbor
07:08 - visited or not now because I'm going to
07:10 - need this formula so many times in this
07:12 - program I'm going to write a function
07:14 - and I'm going to call it index an index
07:16 - gets an i and a j and just returns I
07:19 - plus J times the number of columns so I
07:22 - can actually just do this I don't need
07:23 - this code here I could say the top
07:25 - neighbor is index i j minus one
07:31 - the right neighbor is
07:35 - I + one J and I I'll you know what I'm
07:38 - going to live dangerously today and I'm
07:40 - not going to fix all the formatting here
07:41 - I'll fix it after the fact when I post
07:43 - the code it'll be all nicely indented in
07:45 - Space the way I like it um but I'll fix
07:47 - a few things right uh bottom I can't
07:52 - help it I'm doing it anyway uh index
07:54 - bottom is i j + one and then left
08:00 - is
08:02 - grid uh I minus one J what J uh I'm
08:09 - losing my mind here I minus
08:13 - one uh J right because the the Y is the
08:16 - same okay so these are the neighbors top
08:18 - right bottom left now first of all have
08:21 - they been
08:23 - visited if top has been visited
08:29 - if top has not been visited then I want
08:32 - to add top to uh I want to add top to
08:37 - that array
08:39 - neighbors.
08:41 - push top now I should really probably
08:45 - condense I right now I'm doing something
08:46 - that I do often which is like I'm just
08:48 - writing things out very explicitly I
08:50 - know there's only four neighbors and I
08:52 - can just like have these four neighbors
08:54 - and then duplicate this code four times
08:56 - I could easily do it differently and
08:58 - kind of like figure out a nice way of
09:02 - um uh a nice way of like condensing this
09:05 - code but I'm going to just sort of live
09:06 - with being happy with this because I'm
09:08 - just to do this four times and do if
09:11 - bottom has not been visited put it in if
09:14 - uh right has not been visited put it in
09:16 - and if left has not been visited put it
09:18 - in and you know what I want to keep the
09:21 - same order even though it doesn't matter
09:22 - right yeah it does it might matter top
09:24 - right bottom left top right bottom left
09:26 - so I want to build an array of things
09:28 - that have not visited yet but I also
09:30 - have a little bit of an issue I need to
09:31 - deal with it's really unfortunate I wish
09:33 - I didn't have this problem but what if
09:35 - I'm over
09:37 - here I only have three neighbors there's
09:40 - no neighbor to over here and I could do
09:41 - something fancy where if you go over
09:43 - here you could come on that side but I
09:44 - don't want to do that so I also need to
09:46 - figure out to make sure my I the the
09:49 - neighbor that I'm looking for is not
09:51 - negative one or past the width so I need
09:53 - to deal with that H I wish I didn't have
09:55 - to life would be so much nicer if we
09:56 - didn't have these edge cases by the way
09:58 - that's why you call Edge case CU it's
09:59 - actually on the edge it's an edge case I
10:02 - can do something different for it I
10:03 - don't know if I ever thought about that
10:05 - before but you know um so one way I can
10:08 - deal with that is I think
10:11 - um uh I I'm gonna do it over here this
10:14 - is a little bit weird but I'm goingon to
10:15 - say uh if I because it's invalid I I I
10:20 - want an invalid index if I or J is less
10:24 - than right if I is less than zero or J
10:28 - is less than zero or I is greater than
10:30 - the number of columns minus one or J is
10:33 - greater than the number of rows minus
10:35 - one all of these are invalid index
10:39 - values right I has to be between zero
10:41 - and columns minus one J has to be
10:43 - between zero and rows minus one and then
10:46 - I'll just return a negative
10:48 - one so I'm going to get a totally
10:50 - invalid index otherwise I want the
10:52 - correct index and then down here do you
10:55 - know if it get negative 1 you know
10:57 - what's going to happen here top is going
10:58 - to be undefined or right is going to be
11:01 - undefined or bottom is going to be
11:02 - undefined so you know what I can just do
11:04 - as long as top is a real thing and it
11:09 - hasn't been visited then it can go into
11:11 - the array as long as right is a real
11:13 - thing and it hasn't been visited as long
11:15 - as bottom is a real thing and it hasn't
11:17 - been visited and as long as left is a
11:19 - real thing and it hasn't been visited
11:20 - boy this check neighbor's function it
11:22 - was a lot to do but we're kind of like
11:25 - we're really like practically there now
11:28 - what we figured out now is are there
11:32 - neighbors that haven't been visited if
11:34 - so select randomly one of those so now
11:39 - what I want to do is if neighbors is do
11:43 - length is greater than zero let's pick a
11:46 - random neighbor so I need a random
11:50 - value between zero and the length of
11:52 - that array
11:54 - array and then I'm going to say
11:57 - return that random neighbor
12:00 - otherwise uh what return let's just
12:05 - return undefined it probably would
12:07 - return undefined anyway if it doesn't
12:09 - return a neighbor but I'm going to
12:11 - explicitly say undefined so this is what
12:12 - we're doing we are in a Cell that's the
12:16 - current cell we're looking at all its
12:18 - neighbors we're finding any that haven't
12:19 - been visited and then we're going to
12:21 - visit that one so let's go back to this
12:25 - the main sort of part of the sketch and
12:28 - what I'm going to do here is
12:30 - say neighbor equals current check
12:34 - neighbor so this function should check
12:35 - the neighbors find a random unvisited
12:37 - one and return it and I'm going to
12:40 - say if neighbor is not undefined right
12:44 - then what neighbor and you know what I'm
12:47 - not going to call this neighbor I'm
12:48 - going to call this next because this is
12:50 - really the next cell current the next
12:53 - cell is one of the available neighbors
12:55 - as long as neighbor is not defined now
12:58 - next is not defined now next has been
13:01 - visited and current should be next right
13:06 - so this is like what we're doing we're
13:08 - marching through so let's just look at
13:10 - this if I run this now I probably made a
13:12 - mistake so check neighbors is not
13:14 - current. check neighbors is not a
13:16 - function so let's see what did I miss
13:18 - current check
13:20 - neighbors
13:22 - this check neighbors I spelled neighbors
13:25 - wrong okay so now let's run this again
13:28 - look at that so so you can see and let's
13:30 - let's reduce the frame rate so we can
13:31 - see what's going on I'm going to say
13:34 - frame rate uh just at at 5 frames per
13:38 - second so you can see here it's marching
13:40 - along and eventually it's going to get
13:41 - to a spot and there's no more available
13:43 - neighbors so we're doing pretty well and
13:46 - actually this is going to be the end of
13:47 - this part because we got to a good part
13:49 - we got the part of the algorithm where
13:51 - we're marching along to find neighbors
13:53 - until we get to a spot where there's no
13:55 - neighbors anymore now I haven't been
13:56 - removing the walls that's going to
13:58 - removing the walls I'm going to do in
13:59 - the next part but this is pretty good I
14:02 - can hit refresh again and we can see
14:03 - it's going to do this differently every
14:05 - time but you can see it's going to get
14:06 - stuck pretty fast so the next thing I
14:08 - need to do and uh is in the algorithm is
14:11 - actually start removing the walls so
14:13 - that we're carving out this maze so to
14:15 - speak okay see you in the next video