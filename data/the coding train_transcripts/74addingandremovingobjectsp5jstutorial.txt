00:01 - so if you watched the previous video
00:02 - about the Constructor function thank you
00:04 - for still being here and watching the
00:06 - next one CU that was a little bit rough
00:08 - maybe you actually watch the re-recorded
00:10 - one that I hope to make someday to kind
00:11 - of try to do a little bit of a better
00:13 - job here but I have a promise to you
00:15 - which is that I'm going to put my energy
00:16 - into this video and I think this
00:17 - particular video is going to uh uh let
00:19 - you do some really interesting things
00:21 - with an array that weren't possible
00:24 - before if you haven't looked at some of
00:25 - the other functionality that you can do
00:27 - with an array so what is that
00:28 - functionality that I'm talking about
00:30 - notice this example so what's wonderful
00:31 - about working with objects in an array
00:34 - is again I have a single number right
00:35 - there I change that number to five I run
00:38 - the code there are five bubbles I change
00:41 - that number to 500 I run the code there
00:45 - are 500 of them but what if I want to
00:47 - click click click click click and delete
00:49 - them or what if I want to click click
00:50 - click click click and add them how do I
00:53 - resize dynamically add or remove things
00:55 - from that array then well one of the
00:57 - nice things is right here no matter what
01:00 - do to the array this Loop will only ever
01:03 - iterate over the current state of the
01:05 - array right because dot length will
01:07 - dynamically always store the value of
01:10 - the array itself so that's a great thing
01:12 - that's the good news and then in order
01:14 - to add and subtract things from the
01:16 - array a nice technique for doing that is
01:19 - with two array functions so one array
01:23 - function is called push another array
01:26 - function is called splice now the truth
01:29 - of the matter matter is there are many
01:31 - array functions and I will try to
01:33 - remember to include in the description
01:35 - below a link to a JavaScript
01:37 - documentation page that runs through all
01:39 - these functions it might be a little
01:41 - scary weird looking links maybe you
01:43 - shouldn't look at it but these are just
01:45 - two functions that I'm going to
01:47 - demonstrate to you now the other thing
01:48 - that's a little bit weird is what a
01:50 - function for what right an
01:53 - array is this right nums equals 5 2 -37
02:00 - 1 right what do you mean a function to
02:02 - the array uh I could say nums index so
02:06 - this is 0 1 2 3 if I said nums index 4
02:12 - equals
02:13 - 21 it's like I'm taking the end of this
02:18 - array and adding element four to the
02:23 - array and making it one longer so this
02:25 - is a way to add an element to the array
02:28 - but it only works because I happen to
02:30 - know what that index value is I happen
02:33 - to know the the in that the length of
02:35 - that array so a more convenient way
02:38 - might be to no matter what just say
02:40 - append it to the end or add it to the
02:42 - end and the push function does that if I
02:45 - say nums do
02:48 - push 63 it will say whatever the size of
02:52 - the array is extend it by one more and
02:56 - put the thing you just pushed onto it
02:58 - there and it might have run out of space
03:00 - up there but I think you can see it now
03:02 - this is what's weird yes you can
03:04 - initialize an array yes you can refer to
03:07 - individual elements but you can call
03:09 - functions on it what is the thing that
03:11 - what's what is the thing you normally
03:13 - have that you say something do execute a
03:15 - function an object so this is one of the
03:18 - things about JavaScript I you know how
03:20 - we made an array of objects well guess
03:22 - what an array is also an object so and
03:25 - by the way we've seen this already it
03:26 - has a property the do length property so
03:28 - this is what we normally think of as the
03:30 - array itself and we're working with the
03:32 - values in the array but there are an
03:34 - array happens to be an object and there
03:35 - are special functions you can call in it
03:37 - push being one of the most you know sort
03:39 - of convenient ones or useful ones for
03:40 - you right now and I'll show you splice
03:42 - in a moment which will allow you to take
03:44 - stuff out of the array so let me come
03:46 - back over here and now that we know that
03:49 - I can do something to this code right if
03:52 - I can add the mouse pressed
03:56 - function and here in the mouse pressed
03:58 - function I can say
04:02 - bubbles. push and what what do I want to
04:06 - push into that array right before if I
04:10 - just had an array of numbers I could
04:11 - just say push this number or P push some
04:13 - random number or push some whatever this
04:15 - is just numbers here what I want to do
04:18 - is push a bubble object how do I make a
04:21 - new bubble object well that was what I
04:23 - spent all this time really trying my
04:24 - hardest to explain in the previous video
04:26 - the job of making objects is left to
04:30 - this Constructor function which is being
04:31 - eaten by the blue blob this Constructor
04:34 - function its job is to make an object
04:36 - how do you trigger its action to make
04:38 - that object by saying new bubble
04:41 - parentheses so right here all I need to
04:43 - do is say hey push a new bubble into
04:46 - that uh array so now you're not really
04:49 - going to notice so they popping up there
04:50 - but let's start with just two
04:52 - Bubbles and I could click and you can
04:55 - see every time I click a new bubble is
04:57 - being added to that array but I I want
05:00 - so I want to do better than that like
05:02 - what I want to do is I want to click
05:04 - right here and I want to see the bubble
05:06 - being added right there how do I do that
05:11 - well let's look at how is its initial X
05:13 - and Y picked its initial X and Y is
05:16 - picked randomly now the truth of the
05:18 - matter is I could just replace that with
05:20 - mouse X and replace this with mouse y
05:22 - but I'm using this as an excuse to show
05:24 - you something a little bit tricky about
05:26 - Constructor functions But ultimately
05:28 - rather useful
05:30 - functions can accept arguments you can
05:32 - pass things into a function I want to
05:34 - draw a line from this point to this
05:37 - point I want to fill with these
05:39 - particular RGB values I can say I want
05:42 - to make a bubble with this argument I
05:45 - want to make a bubble that is big or a
05:47 - bubble that is small or a bubble that is
05:49 - red I want to be able to modify the
05:51 - bubble as I make it and in this case I
05:53 - want to say I want to make a bubble at
05:56 - Mouse X at Mouse y so let me come back
06:00 - over here I erased my Constructor
06:02 - function but let's take a look at let's
06:05 - take a look at this syntax a little bit
06:06 - cuz this is really hard so I want to say
06:09 - new bubble and right now I'm going to
06:12 - say instead of mouse X and mouse y I'm
06:14 - going to say 50 comma 25 so this is the
06:18 - line of code I'm executing right and
06:20 - remember the Constructor function looked
06:23 - like
06:25 - this now it didn't have anything between
06:27 - the parentheses I'm going to add
06:28 - something in a minute
06:30 - and then it said this dox equals
06:33 - something and
06:35 - thisy equals something what I want to do
06:39 - is I want to get this 50 into that X and
06:42 - I want to get this 25 into that X Y when
06:45 - I make the new bubble object I want to
06:47 - make it with these values 50 should be
06:50 - its X property 25 should be the value of
06:52 - the Y property how do I do that well
06:55 - when you pass arguments into a function
06:57 - those arguments get received by that
06:59 - function parameters so I need to add how
07:01 - many parameters here two parameters an X
07:05 - and A Y I can actually call those
07:07 - whatever I want but a nice way that I
07:09 - might call them is I might call them X
07:11 - and Y and you know why JavaScript won't
07:13 - get confused because these are called X
07:14 - and Y because these are referring to
07:17 - this bubbles X and this bubbles Y and
07:19 - these are just a plain old X and a plain
07:21 - old y so if 50 goes into x x now has the
07:25 - value of 50 x can go into this dox if 25
07:28 - goes into y y y now has the value of 25
07:32 - and Y can go into this comma y so the
07:34 - these particular X and Y parameters to
07:37 - the bubble function they simply act as
07:40 - these like handoffs they're just here
07:41 - they're like waiting okay give me a
07:42 - value I got the value you take the value
07:44 - that's all they live for that's their
07:45 - entire purpose in life in terms of this
07:47 - code is just receive that value 50 and
07:49 - immediately handing it off because this
07:52 - is the x that really matters that's the
07:53 - bubbles X this is the Y that really
07:55 - matters that's the bubbles y these are
07:57 - just temporary just here to receive the
08:00 - value and and pass it off so let's come
08:02 - back I'm sure you have a question but
08:04 - you can't ask it um let's come back over
08:08 - here and uh um let's look at that so I'm
08:11 - passing in the mouse X and the mouse y
08:14 - I'm coming down here I need to add those
08:16 - parameters to receive that Mouse X and
08:19 - mouse Y and I need to assign those
08:21 - parameters to this.x and this doy so
08:24 - this is exactly what I went through
08:25 - before you can see now Mouse X goes into
08:29 - X which then goes into this.x Mouse y
08:32 - goes into Y which then goes into this.y
08:35 - okay here we go stop start and now when
08:38 - I click the mouse click the mouse click
08:40 - the mouse click the mouse click the
08:41 - mouse click the mouse look at that oh
08:42 - that is lovely it just works and you
08:45 - know I could do something like I'm I'm
08:47 - sorry but I I just have to make this a
08:48 - little bit nicer like you know let's
08:50 - give it like a little bit of a some sort
08:53 - of color um you know some
08:57 - Alpha and what um what I just realized
09:00 - though is what's weird like look at this
09:01 - for a second shouldn't we have like 200
09:04 - bubbles to start with there's no bubbles
09:06 - to start with look at this even I I
09:08 - rewrote the bubble Constructor to expect
09:11 - parameters but I didn't get any up here
09:14 - I didn't get an error message or maybe I
09:16 - did but I can't see the error message no
09:19 - there's no error message so the thing is
09:21 - it tried to do it but it didn't have the
09:22 - argument so we don't see those bubble
09:24 - objects so this is important if you
09:26 - provide arguments parameters to your
09:29 - Construction function you've got to use
09:30 - this so you know I don't know what I
09:32 - want to do up here I could put all of
09:33 - these starting ones at 100 100 so
09:36 - they're all right there I could put all
09:37 - these starting ones at a random location
09:40 - right I could pass the random location
09:42 - in and I could do that and now I kind of
09:45 - had what I had before but ultimately I
09:47 - think what I want to do in this example
09:48 - is just take this out like now I have a
09:50 - program which just starts with no
09:53 - objects it's fine to have an empty array
09:55 - I can Loop through that empty array you
09:57 - know how many times I'm going to Loop
09:58 - through that empty array zero times and
10:00 - the only time I'm ever going to add a
10:01 - new
10:02 - object is if I click the mouse because
10:05 - when I click the mouse I'll make a new
10:07 - bubble object at Mouse X at Mouse Y and
10:09 - push it into the array so that array
10:11 - grows so I can click click click click
10:14 - click click click and something I could
10:15 - do that's kind of fun is I could change
10:17 - I mean fun if you're me I guess but uh I
10:21 - could change that from Mouse press to
10:22 - Mouse dragged which is sort of a nice
10:24 - little effect meaning I can kind of like
10:25 - draw with this and notice this is this
10:27 - kind of answers that question you might
10:29 - have had in your head a long time ago
10:31 - which is what if you know if I don't
10:34 - draw the background I get this nice
10:36 - Trail right because I don't erase the
10:38 - previous shapes that I've been drawing
10:40 - here now I'm erasing the background but
10:42 - I'm using an array to keep track of the
10:44 - history of everything I ever did with
10:46 - the mouse and I'm making a new object
10:48 - for every one of those points and you
10:50 - can see even though you could probably
10:52 - come up with more interesting motion
10:53 - than this even though uh I start with
10:56 - this pattern that pattern quickly goes
10:58 - away as these objects start to move um
11:01 - randomly around the screen so I think
11:04 - okay but I was going to say this is a
11:06 - great exercise for you I think using
11:08 - this model can you create an object can
11:11 - you create an array that stores the
11:13 - history of the mouse As you move it
11:14 - around and what types of kind of motion
11:18 - or changes of color or things can you do
11:20 - now if you have a drawing program that's
11:22 - actually rotating the all of those
11:24 - locations in an array rather than just
11:26 - leaving them as pixels on the screen but
11:28 - before I go any further let's add one
11:29 - more thing to this what if I only ever
11:32 - want to have 50 like I want to
11:35 - delete the I want to I want to delete
11:38 - the oldest thing from the array right
11:39 - what I mean by that
11:43 - is
11:46 - if this is the array right the push
11:50 - function always adds things to the end
11:53 - so first it adds like a bubble to the
11:55 - beginning then it adds a new bubble to
11:57 - the next spot then it adds a new bubble
11:59 - to the the next spot then a new bubble
12:00 - to the next spot and once I get to a
12:02 - certain number what if I want to delete
12:04 - the oldest one shift everything down
12:06 - delete the next oldest one shift
12:07 - everything down and keep adding so the
12:10 - way to delete something from an array is
12:13 - with a function called splice it's a
12:15 - little bit confusing though because this
12:17 - splice function expects two arguments
12:20 - the first argument is the index of what
12:23 - you want to delete so if I say index 2
12:27 - and this was my array 012 would remove
12:30 - this element and all these would kind of
12:32 - shift down into the appropriate
12:34 - spots this second argument is how many
12:38 - so actually if I said 2 comma five it
12:41 - would delete this and the next four
12:43 - elements but in this case I just want to
12:45 - remove one at a time so I want to remove
12:47 - the element but but and I want to remove
12:50 - the oldest one so if I'm adding to the
12:52 - array the oldest one is always in the
12:54 - first spot so I want to delete the first
12:56 - element and just one of them okay so
12:58 - let's come back here and when do I want
13:00 - to do that like right now I could say
13:02 - like just just for the sake of argument
13:05 - key
13:06 - pressed bubbles. splice the first
13:09 - element one just that one element so you
13:13 - can see now I'm going to add a whole
13:15 - bunch of them and now start hitting the
13:17 - a key you can see it's removing them in
13:20 - order of what the how they were added
13:22 - but maybe what I really want to do is
13:24 - say something
13:25 - like okay if the bubble array ever gets
13:31 - greater than the value
13:33 - 50 then delete that first element so
13:38 - what's that going to do I'm going to
13:40 - keep making bubbles until suddenly I
13:41 - have 50 of them I can keep making more
13:43 - but keep deleting the older ones so if I
13:45 - ever have 50 delete the add a new one
13:48 - delete the previous one so you can see
13:50 - it's I sort of get this trail that kind
13:52 - of winds following me so
13:56 - push adding things to the array splice
13:59 - deleting things from the array now let
14:01 - me give you a challenging problem and I
14:04 - really should make another video with
14:05 - the solution to this problem I actually
14:07 - have one somewhere uh but it's it uses
14:10 - processing so I need to make a
14:11 - JavaScript one with this but what if you
14:14 - don't want to remove these objects just
14:16 - based on their age like when I get to 50
14:18 - but what if you want to remove them if
14:19 - they ever happen to wander off the
14:21 - screen right so look at this here's a
14:23 - bunch of objects leave them there or
14:26 - remove them if they uh if they hit the
14:29 - edge of the screen or if you click on
14:31 - them so how do you pick specific objects
14:34 - to move based on some set of condition
14:36 - that's a pretty difficult problem this
14:38 - somehow has to be inside of the loop but
14:41 - you got to watch out if you're looping
14:43 - through an array and modifying this the
14:45 - elements of the at the same time weird
14:47 - things can happen so that's something
14:49 - you can think about as a future problem
14:51 - uh but just to get started right now I
14:52 - might you know again work with this
14:54 - model see what you can do with the an
14:56 - object that sort of keeps track of an
14:58 - array that towards a history of what
14:59 - you've done with the mouse or maybe you
15:01 - have something moving independently
15:02 - randomly and you're keeping track of it
15:04 - a history of its location okay uh so
15:06 - hopefully this helped you with a little
15:08 - more about objects and arrays and I'm
15:10 - going to finish this video off now oh
15:12 - this was 15 minutes long that was
15:14 - long uh come on Mouse I gotta hit stop