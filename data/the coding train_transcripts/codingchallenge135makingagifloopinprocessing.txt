00:00 - (bell chimes)
00:01 - - Hello, I am here today
to make a coding challenge
00:04 - about making a perfect,
00:06 - well, whatever I make won't be perfect,
00:08 - but you might make
something perfect, GIF loop.
00:10 - What is a GIF ?
00:11 - Why am I talking about GIF loops?
00:13 - One way that artists,
00:14 - who work with computational
media and computer graphics,
00:18 - are distributing their work
and expressing themselves,
00:21 - is through posting GIFS
00:23 - to various different online platforms.
00:26 - An artist I would like to
highlight is Saskia Freeke,
00:29 - who has been making
daily animated artworks
00:35 - for quite a long time.
00:36 - In fact, maybe there have been
00:38 - at least 1500 of them,
which is mind-blowing.
00:40 - You can see a whole variety
of them here on her Tumbler.
00:44 - There's some others, I think
she wrote a Medium article
00:46 - about this process; they're amazing.
00:48 - A vary famous GIF artist
00:50 - that I have referenced in previous videos,
00:52 - in fact we do the whole coding challenge
00:54 - trying to recreate his Cube Wave,
00:57 - is Bees & Bombs.
00:58 - Bees & Bombs creates looping GIFs
01:02 - through algorithms and math and graphics
01:05 - in all sorts of astonishing
mind-blowing ways.
01:08 - So I encourage you to
check out Bees & Bombs,
01:10 - also Tumbler, to see all the kinds of GIFs
01:15 - that he has created.
01:16 - Golan Levin at Carnegie Mellon University,
01:18 - a professor at Carnegie Mellon University,
01:19 - gives an assignment every
semester in his course,
01:22 - interactivity and computation,
01:24 - to create a GIF gallery.
01:26 - To create a GIF.
01:27 - And this is a gallery of GIFs
01:30 - that students made in his
course just this past fall.
01:34 - Golan has a lecture about
01:38 - loops throughout the history of art.
01:41 - It's very easy to think as we work
01:43 - on program the computer
and make algorithms
01:44 - visual and happen, and
JavaScript in the browser
01:46 - with your OpenGL shaders, WebGL magic,
01:49 - that this is the first time
any of this has happened.
01:51 - But this kind of work has been happening
01:53 - for years and years,
01:54 - and predates the dawn
of computers themselves.
01:58 - This is a wonderful set
of historical references
02:02 - to different kinds of loops
02:04 - that people have been making.
02:06 - Of course, here's the iconic
Muybridge galloping horse
02:09 - that you can see here.
02:10 - I encourage you to check
out all these resources,
02:12 - read about loops, and in fact,
02:15 - you don't even need to watch this video.
02:16 - You can go right here to
Golan's loop templates,
02:20 - which has templates for Java,
02:22 - I'm sorry processing
Java, p5.js JavaScript,
02:25 - and Python processing, as well.
02:27 - What I'm going to do though in this video,
02:28 - is I'm going to make my own.
02:29 - I'm not worrying about making something
02:31 - artistic or innovative or beautiful;
02:34 - I'm just going to try
to to show the process
02:35 - from start to finish of
writing code and processing,
02:38 - rendering it out to files,
02:40 - and then packaging it up as
a GIF that you could post.
02:43 - I'm also going to come back
and do a follow-up video.
02:45 - There's a new p5 JavaScript GIF library
02:48 - that some students of mine worked on
02:50 - last semester in a
course about open source,
02:52 - so I will come back and show that
02:54 - in a future video, as well.
02:56 - Let's get started.
02:57 - What is the driving
principle of making a loop?
03:02 - If you look at Golan's code examples,
03:04 - the core idea is to have,
03:07 - first, a total number of frames.
03:09 - So a GIF, an animation, is just rendering
03:14 - a whole bunch of images in sequence
03:16 - at some frame rate for your eye to see,
03:18 - and it appears like animation.
03:22 - If whatever it is in the last frame,
03:26 - or really what would be the last frame,
03:28 - the sort of frame before the last frame,
03:30 - matches up exactly with the first one,
03:33 - then you have a loop.
03:35 - In other words, if I'm
drawing a circle here,
03:37 - and then it goes to here,
and then it goes to here.
03:40 - Oh! (snickers)
03:41 - Ah, I don't need that many frames!
03:43 - (eraser scuffles)
03:45 - Then, it goes to here, and
then maybe it disappears.
03:51 - I have a blank frame.
03:53 - Then, in theory, the
next frame I want to see
03:56 - would be it entering the screen again,
03:57 - but instead, I go back
and show the first one.
03:59 - So this will look like it's a loop
04:01 - that's going on forever,
whereas in reality,
04:03 - it's just starting at the beginning,
04:05 - and the last frame matches that,
04:06 - and so as it goes back to the beginning,
04:08 - it appears infinite.
04:09 - So this is the idea.
04:10 - A couple things we need to do,
04:12 - we need to keep track of what
is the total frames we want.
04:17 - And then, I also want to have
a variable called percent.
04:22 - The idea is that percent
04:24 - will always be the current frame count,
04:28 - will be the current frame,
the current frame number,
04:31 - divided by the total number of frames.
04:35 - What you'll see in Golan's example,
04:36 - let's do the same thing,
04:38 - is if we have the ubiquitous
processing draw loop,
04:43 - draws looping over and over,
04:44 - we could actually put
our codes somewhere else.
04:47 - Maybe I'll write a function called render,
04:49 - and we will just call that function
04:51 - render passing in the percent.
04:54 - This is a function that knows
04:56 - how to render some kind of design,
04:59 - based on what percentage of the way
05:01 - through the design it is,
05:02 - and as long as the design
05:05 - is thought of in a way where
the end matches the beginning,
05:09 - then this is going to work out.
05:11 - All the other stuff about saving frames,
05:13 - is it recording, is it not recording,
05:15 - that could be in the draw loop.
05:17 - Okay, this is way too much explanation
05:18 - for something that's, in essence,
05:20 - quite a bit more simple.
05:22 - All right there's two more things
05:23 - I want to say about this.
05:24 - One is Golan writes in his
instructions to his student,
05:28 - sketch on paper first, so I
really recommend you do that.
05:32 - If this is something you want to create,
05:34 - try working this out
with crayons, markers,
05:37 - charcoal, pencil.
05:38 - That's really helpful.
05:39 - Going into that sort of
analog drawing process
05:42 - will really help you
think through your ideas.
05:44 - Number two is what are
the kinds of algorithms
05:48 - that move a value from one
number to another number
05:53 - and in fact, maybe wrap back around?
05:56 - And there are all sorts of different kinds
05:58 - of ways of doing this.
05:59 - Probably, if you've watched
any of my videos before,
06:03 - you might be thinking
of the sine function.
06:05 - The sine function is an excellent function
06:07 - to use for a GIF loop because if it starts
06:09 - the sine function, if I were
to graph the sine function,
06:15 - where it starts, it repeats.
06:17 - It's a repeating pattern
over and over again.
06:20 - You could also use, and then there's a ton
06:22 - of different kinds of easing functions.
06:24 - There's this lovely website
called easings functions,
06:27 - easings.net, which is an
easings function cheat sheet,
06:31 - and I highly recommend you explore
06:33 - some of these other easing functions
06:34 - to think about how you might move a value
06:37 - through this loop.
06:40 - If you go to Golan's code,
06:41 - I'll just click on the
processing one for a second,
06:44 - you can see even in the code here,
06:46 - there is a double-exponential
easing sigmoid function.
06:53 - Anyway, that's a wrap;
06:54 - that's exploration you can do
separately from this video.
06:57 - Let's just get the
basic mechanics working.
06:59 - All right, so I have a
blank processing sketch now.
07:02 - I'm going to go add setup.
07:05 - I'm going to draw, let's
make it a square 400 by 400.
07:11 - Let's make the background zero.
07:13 - Ah, but no, no, no, no!
07:15 - Let's make another function called render,
07:19 - (typing)
07:21 - and this function is going
to take a value like percent,
07:26 - and what I'm going to do is I'm
going to say render percent.
07:30 - I'm going to say the percent
07:34 - is by the, I'm going to make
my own variable called counter,
07:38 - divided by the total frames.
07:42 - So this means I need to say,
07:44 - okay well, I want to have
120 total frames in this GIF.
07:48 - I want to have a counter equal to zero,
07:52 - and now here, let's just
do something like say,
07:57 - the ellipse, an ellipse
is at percent times width,
08:02 - this would a be linear function now,
08:06 - at height divided by
two, which is 20 by 20.
08:12 - So we can see now,
08:16 - if I say a counter plus plus,
08:18 - and I'm going to say a float counter,
08:24 - let's just see if this works for a second.
08:26 - This is the idea that I have
a total number of frames.
08:29 - I have a counter that's going to go up.
08:31 - I really want to start
the counter at zero,
08:35 - and then count up by one after render.
08:37 - The idea here is that a much more complex,
08:39 - sophisticated design with all sorts of
08:41 - different kinds of easing
equations could be in here,
08:45 - but let's just see if this works.
08:47 - I have some brackets out of place.
08:49 - Oh, I have some weird extra slash here.
08:52 - Let's see what happens, there we go.
08:53 - So we can see it's moving across.
08:54 - It's almost like the ball is moving,
08:56 - because it's being drawn
based on a percent.
09:00 - Now, how would I determine
how I want to render this?
09:05 - I'm just going to have
mine start recording
09:07 - right when the program starts.
09:08 - If you look at Golan's example,
09:09 - it's a bit more sophisticated.
09:10 - You press a key, it starts recording.
09:12 - Here what I'm going to do is
09:14 - I'm just going to say
09:16 - right here, save frame,
09:21 - GIF dash pound pound
pound pound, or hash, png,
09:27 - and I'm going to make
a folder called output.
09:29 - What this function does is
09:34 - it saves an image to the directory output
09:38 - associated with this
processing sketch as a png.
09:41 - Those hash symbols, or pound symbols,
09:43 - indicate to processing
that you want the file name
09:46 - to be numbered based on the frame count.
09:48 - (mutters)
09:50 - I want to use my own counter.
09:51 - This is going to use the
automatic frame count,
09:53 - which is probably fine,
09:54 - but what I want to do is I'm going to say,
09:58 - plus number format counter four, plus png.
10:03 - So I'm going to add the counter
number in here manually.
10:07 - I think that's going to be better.
10:08 - This number format function says
10:10 - use four digits no matter what.
10:12 - I guess I can just use three.
10:13 - 'Cause I know I'm going
to have 120 frames,
10:16 - I only need three.png.
10:18 - And then what I could say is
if counter equals total frames,
10:26 - I'm going to just basically say exit here.
10:29 - I'm going to tell the program to stop.
10:32 - So let's run this.
10:37 - Okay, now
10:40 - Let's look, I have a folder called output.
10:43 - I look in there and we
can see, there we go.
10:45 - I have all my images.
10:47 - So there are tons of ways
now I could take this,
10:50 - and stitch it together as a GIF.
10:54 - I'll show you how to
do the stitching later.
10:56 - In fact, this new p5 library actually
10:59 - will just create the GIF for you,
11:00 - but it's kind of nice to
have them as separate images.
11:03 - We do have this question of,
11:04 - do I have it matching up correctly?
11:06 - We should see the last one should be 119,
11:09 - and it's there so my algorithm
is perhaps, not the best.
11:13 - (chuckles)
11:15 - This percent times width
isn't really a perfect loop,
11:19 - so that's something I
might need to improve.
11:21 - Let's make something that I know
11:22 - will be a perfect loop.
11:24 - For example, one thing that I could do now
11:26 - is I could say, all
right let's use rotate.
11:30 - So I'm going to say angle
equals percent times two pi,
11:35 - (typing)
11:37 - and I'm going to translate
to the center of the window.
11:42 - I'm going to say rect mode center.
11:45 - I'm going to say no
stroke, I mean no fill,
11:50 - stroke weight two, and
then I'm going to say
11:54 - rectangle at zero, oh,
rotate by some angle.
11:59 - Rectangle, uh uh, let's use square,
12:02 - square at zero, zero,
12:04 - with a side length of 100.
12:08 - Let's look at this.
12:11 - Oh, what just happened?
12:13 - No fill, oh stroke 255.
12:16 - And this should have a fill of 255.
12:21 - So now we can see this is spinning.
12:24 - Now in theory, that's going
to match up perfectly,
12:28 - because that rotation at two pi
12:31 - equals the rotation at zero,
12:32 - and I'm rendering the very last frame
12:35 - right before percent would be one,
12:37 - in which case it would actually be two pi.
12:39 - So this should match up perfectly.
12:43 - Lets now, I'm going to comment this out.
12:46 - Let's do this one more time.
12:49 - Let that spin, stop;
12:51 - now let's actually make it a GIF.
12:53 - (bell chimes)
12:54 - All right, so now that
I've made all those images
12:56 - and saved them to the output folder,
12:58 - I'm going to try stitching
them together as a GIF.
13:00 - (chuckles)
13:01 - I'm using this website called ezgif.com.
13:04 - It must be easy 'cause it says so,
13:06 - so I'm assuming this
is going to work great.
13:09 - But there's lots of other ways.
13:10 - You could use Photoshop,
you could use Ffmpeg,
13:13 - there's all sorts of
different software tools
13:15 - that you can use to stitch
images together into a GIF.
13:18 - Lets see what happens if
I select choose files.
13:21 - Luckily for me, it's
already going straight
13:23 - to my output directory,
but you'd have to find that
13:28 - through your finder or
13:29 - whatever operating system you're using.
13:30 - I'm going to do select all.
13:31 - I'm going to click open,
and then I'm going to say,
13:34 - upload, and make a GIF!
13:36 - And this is going to work, right?
13:41 - Oh look, so we can see.
13:43 - Oh look at this, we can see
all that the delay is 20.
13:48 - 20 milliseconds would be,
I guess that's somewhere
13:51 - between 30 and 60 frames per second.
13:58 - And somewhere here I
should be able to say...
14:01 - Oh, I can change the delay time.
14:03 - So 60 frames per second would be 16.7.
14:05 - Let's just leave it at 20.
14:06 - Loop count, loop forever.
14:09 - I'm not going to cross-fade frames.
14:11 - What's interesting is
that it has that effect.
14:14 - Let's try this make a GIF.
14:15 - Oh, but I have to wait now.
14:17 - It's baking in the oven.
14:18 - (cheerful music)
14:21 - (alarm buzzes)
14:22 - Okay, it says right there on the page,
14:24 - in 1/100 of a second.
14:27 - 1/1000 of a second is a millisecond,
14:29 - so 32 milliseconds of
delay is maybe around 30.
14:34 - Let's make this three; we
want 3/100 of a second.
14:37 - Let's just try that;
let's see what happens.
14:39 - I mean, you might want it slower,
14:41 - but I want it to kind of look like
14:42 - how it looked like in processing,
14:43 - so let me click this again.
14:46 - There we go!
14:46 - Look, there's my GIF, there's my GIF!
14:48 - Is it perfectly looping?
14:50 - Sort of hard to tell, but now
14:51 - I should be able to download it.
14:53 - I can probably just right
click and do save image as,
14:56 - and say, put it on the desk top.
14:58 - Yay, I made a GIF, I
made a GIF, I made a GIF!
15:02 - (chuckles)
15:03 - So you get the idea.
15:04 - (sighs)
15:05 - All right, so ultimately the
creativity of what you design
15:10 - is really the thing that I'm hoping
15:14 - that you will discover in
yourself to make something.
15:16 - I mean, I just made a rotating square.
15:18 - I think, in order to be able
to explore your creativity,
15:21 - you're going to need the
tool you're working with
15:23 - to be a bit more flexible.
15:24 - Because right now, the
way that I set this up,
15:27 - is it kind of runs it once and then quits.
15:32 - But I really want to be able
to watch the thing loop,
15:35 - and then change the
code, and run it again.
15:38 - Change the code, and run it again.
15:39 - Then when I'm ready, hit record.
15:41 - Let's do that this way.
15:42 - I could do that through an interface,
15:45 - but I'm just going to make a
boolean variable called record,
15:49 - and I'm going to set that equal to,
15:50 - right now I'm going to
set that equal to false.
15:52 - Okay, so what I'm going to say here is,
15:57 - I'm going to say float
percent equals zero,
16:01 - and this is very similar
to Golan's, if record
16:06 - then I am going to use
this counter that I have.
16:13 - (typing)
16:16 - And then I'm also going
to do all this stuff
16:20 - like saving the frame.
16:23 - Otherwise, I am just going to say percent
16:27 - equals
16:31 - float, the actual frame count.
16:33 - I mean I could always use the counter.
16:35 - This is silly, I should
just always use the counter.
16:37 - But frame count modulus total frames
16:41 - divided by total frames.
16:43 - So this should really be,
16:45 - this is a little bit goofy,
16:47 - but I'm going to put the
percentage around here,
16:48 - the parenthesis around there.
16:50 - Okay, so let me give myself
16:51 - a little bit more room
to look at this code.
16:52 - This is weird, I got to
explain this for a second.
16:57 - Why, why, why?
16:58 - There we go, okay.
17:00 - What I want to do here is I
want to have the frame count
17:04 - always cycle back to zero,
17:07 - which I use the modulo operator,
17:10 - and then I want to divide
that by total frames.
17:12 - But I want to convert that into a float,
17:16 - so I don't need these extra parentheses
17:18 - or this parentheses.
17:19 - Yeah, no, yes, this is what I want, ah!
17:23 - ♪ I will refactor this later ♪
17:26 - ♪ You know I will refactor this later ♪
17:30 - So now that recording is false,
17:34 - this is just going to play the loop
17:36 - forever and ever again.
17:37 - I know that I ever want
to now record it, right,
17:41 - if I like my design, I can go
17:43 - and delete what was there before.
17:45 - Which I don't have to, it'll override it,
17:46 - and I can change recording to true.
17:50 - Then I can run it, it
will do the recording,
17:52 - and then it will quit out.
17:54 - You know what?
17:55 - There's a mistake here.
17:57 - I am recording the last
frame and I don't want to.
18:02 - Let's look at the output here.
18:07 - Yeah 120, I don't want 120.
18:10 - Because 119 is the frame right
before the starting frame,
18:14 - the way that I've coded this,
18:15 - so this save frame has to be here.
18:20 - That's a quick fix.
18:24 - Let me delete that again.
18:27 - Let me run this.
18:29 - Here it goes, record.
18:31 - It's going to draw that
last one, but that's fine.
18:33 - Now, we should see the very last frame.
18:38 - Shouldn't it exit before it does that?
18:40 - All right, well, let's do it this way.
18:43 - Let's just check if it gets to the end.
18:46 - If it gets to the end, the
frame before the last one,
18:50 - then quit.
18:53 - Now here we go, (gasps) that works.
18:56 - I can see just based
on where it's stopped.
18:58 - Okay, great.
18:59 - So this is what I want,
19:00 - I want the last frame to
match up before the first one.
19:04 - Okay, great, so there's so
much other stuff we could do.
19:08 - I could use a sign wave.
19:09 - Again, I would encourage you
19:11 - to look at different easing functions,
19:16 - and try all sorts of
different kinds of designs,
19:19 - and your only limitation for yourself
19:21 - is that the end matches
up with the beginning.
19:25 - Matching up can mean a
variety of different things,
19:28 - 'cause something can leave the window,
19:29 - and then enter again.
19:31 - As long as there's visual
continuity, your GIF will loop.
19:37 - I will come back; I will show you also
19:38 - how to do this in p5.js in the browser
19:40 - with a special new p5 GIF
library that I've been testing,
19:45 - thanks to the creators of that library,
19:47 - and I will come back and show
that to you in a future video.
19:48 - Please, ah!
19:50 - Share you GIF loops!
19:52 - We're going to have them
all over the place, I dunno.
19:54 - Coding train GIF loop,
no what should it be?
19:57 - Just share them.
19:58 - (mimics crying)
20:00 - Just look at this video's description.
20:01 - I will explain how to share them.
20:02 - Goodbye, thank you.
20:04 - (upbeat music)