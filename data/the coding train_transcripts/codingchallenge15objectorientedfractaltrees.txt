00:00 - Hello welcome to another coding challenge
00:02 - this one is a follow up on a
00:04 - Previous the previous fractal tree coding challenge one of the first things that people often ask me when they first see a fractal tree is
00:10 - oh
00:10 - I want it to grow from the bottom so how do you have it grow from the bottom this is also the same question as
00:15 - Oh, I want to put leaves on it, and then have the leaves fall
00:17 - So while the fractal demonstration I did in the previous video is a good demonstration and a useful technique
00:23 - you might need a different way of creating the tree to be able to do more types of
00:29 - animation like things with it and
00:30 - that the way of doing that is [to]
00:32 - Rather than draw the tree all at once in a recursive function is to actually build the tree out of objects so what I need
00:40 - In the tree [that's] over here. I'll just use this as my reference is I want to create an object
00:45 - That's a branch object and the branch object only needs two things
00:49 - It needs a start point and an end point and a display function that just draws itself there
00:54 - So let's look and I'm going to build from the previous code and I'm going to just from scratch take the previous code which draws
01:00 - This fractal tree and change it into something that uses an object object branch objects and an array
01:05 - okay, so let me go back to the code and
01:08 - Here we are and the one of the first things. I'm going to do actually is just create a new Javascript file
01:14 - I'm using the atom editor with the p5.js Javascript framework, but there's lots of different ways you could program this
01:21 - And I'm going to say new file, and I'm going to call this new file Branch
01:26 - Dot [J/S]. And then I'm going to go into Index dot html and make sure I include a
01:33 - reference to
01:36 - Branch [J/S]. So now I have two Javascript files
01:39 - I can work with and what I'm going to do in branch is is I'm going to write a constructor function
01:44 - Called Branch, and what Branch needs is when you create a branch. It needs a start and an end
01:50 - There's actually different ways of doing this which we'll see later
01:52 - And I'm just going to call on I'm going to say this dot start equals start and this dot end equals end
01:58 - So the first thing I need to do now start so one of the things that often happens which one of these is colored weirdly
02:07 - Start is so it looks like start is maybe a [keyword] in Javascript for something else
02:13 - It shouldn't really here, but I'm just going to call this then beginning
02:17 - Begin and end just to kind of get get away from that okay
02:20 - So that's the branch a branch object, and I know I could use like a some you were like watching this doing
02:26 - [oh], maybe you should use a [javascript] object literal and I could do that, too
02:29 - But I'm kind of using this constructor function because I'm going to add more to it. You'll see hopefully later
02:33 - well that's kind of a what another way of doing it that could be useful [so] I'm going to go back to the code and
02:38 - right here
02:40 - when I first call this branch function
02:42 - What happened in the in the first program is I translate to the bottom call the branch function which draws a line, but instead?
02:49 - What I want to do is
02:52 - say
02:55 - I'm going to make a I'm going to make something called or I'm going to make a variable [called] root
02:59 - Which is the root of the tree and I'm going to say it's a new branch which goes from where?
03:05 - the center of the screen with divided by two
03:08 - to
03:09 - Where like the width divided by two height? [oh], so?
03:15 - So I'm doing stuff and just programming and like I got lost in my thoughts for a second. You know what I really need is
03:22 - Interestingly enough let's go back and look at this
03:24 - I said oh, there's just two things involved in this branch a beginning and an end
03:28 - but what are those things the beginning and the end those things are points with an x and a [y] and
03:34 - One way that [I] can store a point in
03:37 - A in P5.js is using a vector
03:40 - Object a P5 vector object which is an object that has its own x and a y
03:44 - So what I'm actually going to do is I'm going to say I'm going to be very long-winded
03:48 - About this just to be quite explicit and say a equals create vector, and I'm going to make a vector
03:53 - That's at the bottom of the window
03:56 - With divided by 2 comma height and then I'm going to say B
03:59 - Is a vector that?
04:01 - is also in the middle but not at the bottom it's at the bottom [minus] this length, or
04:09 - [100-100] and then I'm going to make a branch
04:13 - Which is goes from a to b?
04:16 - And then what I want to do actually don't need this whole recursive function anymore
04:21 - And oh this should be in [setup] by the way, and I'm going to I'm going to get rid of this slider
04:27 - We can come using a slider later
04:29 - Because I'm starting from scratch and in draw. I'm Gonna say root
04:33 - Dot show what I want to do is take that. Oh, and this should [this] needs to be a global variable
04:42 - So what I'm trying to demonstrate right now is I can make a single branch object
04:46 - which is just the root of the tree and I can display that root and so I need a function called show and
04:52 - So I'm going to add a function called show and all that show does is
04:58 - stroke 255 draw a line from this stop beginning dot x this stuff beginning dot y to this end x
05:05 - This N
05:06 - Dot y, so you're going to see here that a branch
05:10 - Sorry a branch is just an object that has a beginning and an end point
05:14 - And it's displayed as a line between those two points so now if I come back to [here] and run this again
05:19 - You can see there's our first print. So we kind of double back. We're doing the same thing
05:23 - We did before but in a different way, [okay]?
05:26 - So let's think about now now. Here's the thing what I need is
05:32 - For every Branch to spawn two branch objects attached to it hmm
05:38 - How are we going to do that so one thing?
05:41 - I need actually is I going to have more than one branch
05:43 - So I need an array so I can what what the tree essentially is I?
05:50 - Don't need this root anymore. I'm going to say I'm going to make a variable [called] tree and tree is just an
05:56 - Array, so it's an empty array, and then this root is
06:05 - the first thing that goes in the tree and then
06:09 - And I know that camera just went off while in the middle of my typing. I'm going to put it back on
06:19 - in the middle of what I'm going to do is then
06:24 - draw
06:25 - All of the trees so now my structure is I have an empty array. I create the root of the tree I
06:33 - Put the root in the array, and then I display the array and once again. Oh, but by missing a curly bracket
06:43 - Once again, [I] still have that one root now
06:47 - Now comes the time where I can attach to that root two more branches, so how can I do that?
06:55 - Well one way that I could do that would be to add a function this branch object
07:00 - What is this branch object how to function within itself that would new where its end is and new how to spawn two more?
07:09 - Branches from that end so let's look at that, so I'm going to go back to this branch object
07:14 - And I'm going to write a function called
07:18 - And I'm actually just going to call it a branch [I]
07:23 - Don't know if I have a naming conflict anywhere
07:25 - I'm going to write a function called Branch and what that function is going to do is it is going to create?
07:30 - two additional branch objects attached to this branch object so how do I do that so
07:37 - So I'm going to call it the right branch is a new branch I
07:44 - hear voices [somebody] might be coming
07:47 - Who knows?
07:50 - There's something there. [I] don't know I lost my I started think about west side story one of my favorite musicals
07:58 - Simply people here hurt and I lost my train of thought okay. I need to make a branch ah so where does the
08:05 - Let's think about. I need a diagram. Let me come over here okay, so if I erase this diagram
08:11 - How am I doing this I have?
08:14 - This branch this is begin
08:18 - This is end. Now. I need a new branch, so this new Branch [its] begin point is the previous end point and
08:27 - Now and then I need to calculate. Where is it new?
08:31 - [where] is its new end point and the way that I might do [that] is by?
08:37 - Rotating this line, so I'm going to need to use some trigonometry in math for that, okay. We're going to get there
08:42 - We're gonna get there boy. This is hard to do without having just done it
08:46 - You know like just to do this from scratch on the fly okay, [okay]? So let's see new Branch
08:52 - so what I want to do is the new branch is going to start at the previous branches end and
09:00 - Now I need to fill in where it ends. So how can I do that?
09:04 - well one thing I can do is I can make [a] vector that [is] the direction of
09:10 - This particular branch right? I need it. What if I have a vector that?
09:15 - points
09:16 - From here to there a vector being an arrow
09:19 - That points from here to there and the way that I can make that vector is by taking this point and subtracting this point
09:26 - So I want to create a direction vector and say [P5] dot vector. Dot subtract. I want to
09:34 - subtract the [end] from the beginning
09:39 - so now I have a vector that points from the bottom to the top of that branch and
09:44 - One of the nice things about vectors is they actually have a rotate function built it to them
09:50 - So what if I were to [rotate] that vector by some angle like?
09:54 - 45 Degrees or Pi Divided by 4 and
09:58 - Then what if I were to?
10:01 - create a new
10:02 - Endpoint new end, and I would say the new end point is where it is
10:11 - add
10:14 - the Endpoint of the Previous vector
10:19 - with the Direction
10:22 - So in other words what I'm saying is we come back over here again [is] I?
10:27 - Now have this vector wrong wrong side of this pen
10:30 - [I] now have this vector ok and then what I want to do is take this vector and rotate it
10:38 - By 45 degrees and then I want to add this vector here
10:43 - So this is the new [endpoint], so this is the beginning and this is the [endpoint] and that's my branch so now I
10:51 - Can say the new Branch goes from this dot end to the new end. That's to the right?
11:01 - Okay, so let's see how this works, so let me now go back to the main program, and I'm going [to] say
11:10 - I'm going [to] say a new branch
11:13 - equals root, Branch [oh]
11:16 - What am I I need to do something? So once I have that?
11:19 - new Branch [I] need to return [it], so [I] need to return [it] so that I can get it and
11:26 - And then what I can do is say tree index 1
11:30 - equals New Branch
11:31 - so the
11:32 - zero index of the array is the root and then the next spot in the array is this new Branch that came out of the
11:38 - root
11:41 - Perfect look now. I have both of those now. I could probably cleverly
11:47 - Create both of them in this function, and then return both of them as an array and then add both of them
11:52 - But I'm actually just going to do. I'm just going to call this function branch a
11:56 - I'm gonna do something kind of lazy and just make a function Branch B
12:00 - And rotate the other direction, and you know I'm just going to call this v or b
12:07 - this is to the right and
12:09 - This is to the left, so I'm just going to have to again. You know good programming exercise for you
12:14 - It is like how can you combine this into one function?
12:16 - Maybe you just pass in the angle, but just to be lazy and explicit for a second
12:20 - I'm just going to have these duplicate functions
12:21 - the only thing is different is one is rotating to the right one is rotating to the [left] and
12:25 - I can go back. Sorry I can go back to the main program and
12:30 - I can say branch a and
12:33 - I'm actually just going to combine this a tree index one is branch a and
12:39 - Tree Index 2 is Root Branch B
12:46 - So now you can see this particular branch has two branches attached to it. Okay things are going well now
12:53 - Now one thing that I want to do is remember. I want to shrink the branches each time they're attached
12:59 - So let's go back into this function here
13:02 - this
13:03 - Direction vector should also be multiplied by
13:07 - 0.67 in
13:10 - Order to Shrink it a little bit
13:12 - And now you can see that it is now Shrunk
13:15 - So what I have now [is] I create a single branch object and it spawns to other branches
13:20 - I need a mechanism for then having those two other branches spawn two more branches and two more branches
13:27 - And maybe what I'll do is every time [I] click the mouse
13:29 - I add two more branches, so let's figure out how we would do that
13:35 - So let me go to sketch, and I'm going to take this out, and I'm just going to say
13:41 - Function mousepressed global and and put this here so in mouse press them and add those two branches
13:50 - So now two branches click the mouse [o] root is not defined
13:55 - So I'm going to say tree the thing that's global is the array
14:00 - Tree Index 0 tree index 0 so I'm going to add those two branches
14:04 - And now I'm Gonna Click the mouse
14:06 - Two branches there we go [ok] so I'm getting somewhere. I'm getting somewhere now
14:11 - I have this ability to take an existing element of the array and add to it
14:15 - So what I really want to do is not do it manually like this, but what I want to say is hey
14:23 - Anything that's in [the] array
14:25 - There are some number of branches in the array
14:29 - What I want to do for everything that's in the array
14:32 - I want to tree at so one way to add something to raise with the push function. I want to add
14:40 - Tree Index Index I branch a
14:47 - and
14:49 - Tree Index I branch B. So this is now an
14:54 - automatic way of saying whatever is in the array currently go through everything in the array and add to the array with branches from the
15:01 - Things that are the [Iraq] now there are some problems here problem number one is
15:08 - If [I'm] trying to loop through an array like I'm looping here
15:11 - So here's the beginning of the right here's the event end of the array and I'm looping through it
15:14 - And I'm adding things to it so as I'm going through the array the array is growing
15:18 - I'm never going to get to the end
15:20 - so one way to solve this would be to say to actually start from the end of the array and
15:26 - go down to 0
15:28 - This way I can add things to the like I'm going backwards through the array and new things can get added to the end that
15:35 - Will then get ignored so this should actually work and I'm going to run this
15:39 - you can see I can click and then I can click and then I can click and then I can click so that's
15:43 - Actually happening now each time I click
15:46 - Everything that's in the array gets two extra branches, but one thing that you might not be noticing here
15:51 - is that
15:52 - This particular [root] has been there every single cycle
15:56 - So every time I go through that or [right] it gets to new branches
15:59 - So there are multiple multiple new branches being added over and over again in the same spot
16:02 - Which is very unnecessary [so] one thing that I [think] would be useful to do is in the branch object I?
16:09 - Could add a variable like I'm Gonna call it grown or finish
16:12 - I'll just call it finished, and it's going to finish it's going to be false [and]
16:16 - In the branched function you know let's say. I'm just [going] to say
16:21 - this dot finished
16:24 - equals true, so whenever
16:26 - And you know maybe I'm going to actually I since I have this branch a and Branch B
16:30 - I'm just going to do it out [here], so I'm going to say a tree index. I dot finished equals true
16:36 - So [what] I'm going to do is every time a tree?
16:39 - Branches I'm going to say finished is true, and then I want to make [sure] if it's if tree index [I've] finished
16:47 - Only if tree Index the tree is not finished
16:54 - Should I actually add those branches so now?
16:58 - You can see every time [I] click the mouse. I'm adding branches now this might [not] seem very exciting to you
17:05 - Because ultimately [all] [I] have here is exactly what I had before
17:09 - But [the] difference is I actually have an array of objects and all of those objects
17:16 - Store their location dynamically where they are so there's no reason why I couldn't do weird things like
17:23 - In the branch function in in in branch. I could say I'm going to write a function called Jitter and
17:31 - I'm going to say this dot n. Dot x plus equal
17:35 - Random Negative 1 1 this n. Dot y plus equal random negative 1
17:41 - one one so one thing I'm going to do is I'm going to add this jitter function in Draw and
17:47 - I'm going to say tree show and
17:50 - Tree Index eye jitter
17:53 - So now if I run this you can see look at this. It's animating and as I click
17:58 - Those are all animating and shaking and doing weird random things, so I'm not suggesting. This is like a great result
18:06 - Because I don't know what I have here. I have this random shaking weird tree
18:10 - But you could imagine what if you did something a bit more thoughtful?
18:14 - You were changing colors based on some logic, or maybe you were swaying with perlin noise
18:19 - Or you applied some spring forces or a physics based system to the tree boy?
18:24 - I really wanted somebody remind me [someday]
18:26 - To do a video where we take this tree and actually attach spring forces to all of it
18:30 - So it can you could sort of like pull on it and just goes blue
18:33 - You know all [Springy] back into place or something that's always a nice [demonstration]
18:37 - So this opens up a lot of possibilities it also opens up one last possibility that I want to show you in this particular video
18:44 - So I'm going to turn off the jittering and what I'm going to do is I am going to say
18:52 - I'm going to keep track of a counter and I'm going to just every time I'm
18:59 - Going to say a count plus plus and what I want to do is say if count
19:07 - Equals equals five so if I've generated five generations of the tree what I want to do is
19:15 - say for
19:17 - Var I equals zero I is less than tree length I
19:24 - plus plus
19:25 - What I want to do is I'm going to make a I'm going to make leaf objects, so I want to create
19:32 - an array called leaves and
19:35 - then what I'm going to do is say for all of those last branches if
19:40 - The and when I get to five any branch that hasn't branches at the end what I want to do is
19:48 - Make a leaf
19:52 - Where do I want to make that leaf? [I] want to make the leaf at that [branch's] end?
19:59 - point
20:00 - [and]
20:02 - You know what? I don't even need to say create vector because it is a vector tree index. I dot and
20:08 - Dot copy so I want to go and grab that end point of that branch and make a copy of it
20:14 - And then [I'm] going to say leaves dot push that leaf
20:18 - So now in draw I can also
20:25 - Loop through all [of] the leaves
20:28 - and
20:30 - I can say now I could make [loot]. I should make the leafs an object the leaves the [leat]. I'm going to make some purplish
20:37 - leaves
20:39 - And I'm going to just make them circles. You can be more creative
20:47 - [Top] y
20:51 - So we should get now let's run this
20:55 - Everyone to like zero [weight] one two three four five so you see [like]
21:03 - So let's do a couple things
21:04 - One is let's make that angle where did I decide what the angle is the [angle] is right here?
21:10 - It's kind of like hard-coded in so this by the way would be nice to make a variable
21:13 - Maybe it could be slightly random that could be the thing that's changing, but oh
21:17 - and I did something interesting so I for some reason I'm going a different angle to each side which is kind of nice and
21:23 - Let's go in sketch. Let's actually go up to six levels and
21:28 - let's
21:29 - Let's say no stroke for the leaves and give it some alpha also
21:35 - So you can see I now have little leaves at the end of the tree and what's exciting about
21:40 - This is they aren't just circles on the screen those are all vector objects and what I could actually do if you go look at
21:45 - Any of my other nature of code tutorials?
21:47 - I could treat those as particles that would fall with the wind or something like that and just to sort of show very very briefly
21:54 - What I could do right now
21:57 - Is I could move all the leaves by some random amount in
22:02 - the Y-Direction
22:04 - So once I get up to six you can see they're falling now again
22:08 - I have made a really trivial
22:11 - Whoops this is a trivial result
22:17 - You know I don't I don't like necessarily that that
22:22 - That doesn't look like a very nice
22:24 - Glowing beautiful physics movement, but you in thinking about color and thinking about motion all sorts of possibilities
22:30 - You could have the branches be swaying you could have a gust of wind some of the leaves fall some don't what if you have?
22:36 - A program where you shake the tree and the leaves fall off
22:38 - And they don't all fall off at the same time all
22:39 - The possibilities are now open to you because the the fractal wasn't drawn through a single recursive function
22:45 - But rather was drawn as a set of objects with position vectors so all of those things could be manipulated after the fact
22:52 - Thanks for watching this video. If you make something with this, please let me know and I'll [see] you in the next one