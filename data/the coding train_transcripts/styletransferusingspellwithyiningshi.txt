00:16 - BIOGRAPHY 
00:19 - BIOGRAPHY.
>> WELL, THE CHAT IS VERY SMALL,
00:22 - I WANTED TO SEE YOU AND HEAR 
YOU, HALF THE TIME, I SET UP MY 
00:27 - MIC INCORRECTLY.  WELCOME TO A 
SPECIAL FRIDAY TRAINING EPISODE,
00:32 - I'M DAN SHIFFMAN, THERE'S A LOT 
OF THINGS THAT ARE EXCITING 
00:36 - ABOUT THIS EPISODE.
SO SOMEBODY SAID HI, SO I'M 
00:41 - GOING TO TAKE THAT AS THINGS ARE
WORKING.  AND SO TODAY IS A 
00:45 - SPECIAL EPISODE.  NUMBER ONE, WE
ARE DOING A MACHINE LEARNING 
00:49 - PROJECT FROM START TO FINISH, 
TRAINING A MODEL ENTIRELY IN THE
00:53 - CLOUD, GETTING THAT TRAINING 
MODEL BACK, AND THEN 
00:56 - IMPLEMENTING THAT MODEL IN THE 
BROWSER USING JAVASCRIPT.  SO 
00:59 - ALL THOSE PIECES, THAT IS GOING 
TO HAPPEN, AND THE WHOLE THING 
01:02 - IS GOING TO TAKE AN HOUR AND A 
HALF.  TO PRESENT ALL OF THIS TO
01:06 - YOU, WE HAVE A GUEST.  YINING 
SHI, YOU MIGHT REMEMBER HER FROM
01:12 - THE CODING TRAIN TUTORIAL THAT 
SHE MADE, I WILL LINK HER, SHE 
01:18 - IS AN ARTIST AND RESEARCHER, A 
CORE CONTRIBUTOR FOR THE MACHINE
01:25 - LEARNING 5 LIBRARY, THE ML5.JS 
LIBRARY, PART OF THIS TUTORIAL, 
01:29 - SHE WROTE THE STYLE TRANSFER 
MODULE OF ML5.JS, AND THAT IS 
01:34 - WHAT SHE IS GOING TO DO AND 
PRESENT.  SO YINING WILL BE HERE
01:37 - IN A MINUTE, AFTER MY LONG 
INTRODUCTION.  AND THIS VIDEO IS
01:41 - SPONSORED BY SPELL, SPELL IS A 
CLOUD COMPUTING FOR MACHINE 
01:47 - LEARNING SERVICE.  I DID AN 
INTRODUCTION TO SPELL, HOW TO 
01:49 - SET IT UP, WHAT IT DOES, WHAT 
ARE THE BASIC COMMANDS.  IF YOU 
01:53 - ARE WATCHING THIS AS AN ARCHIVE,
YOU MIGHT WANT TO WATCH IT FIRST
01:57 - AND RETURN.  IF YOU ARE WATCHING
THIS LIVE, HAVE NOT SEEN THAT, 
02:00 - WE WILL HELP YOU GET SET UP WITH
THAT.  IF YOU WANT TO SIGN UP 
02:03 - FOR AN CCOUNT AND FOLLOW ALONG, 
YOU CAN GET $100 IN FREEBIES.  
02:11 - YOU CAN GO TO 
SPELL.RUN/CODINGTRAIN.
02:15 - OKAY, AND ALSO, THANK YOU TO 
02:21 - SPELL, I'M -- SO WE HAVE CLOSED 
CAPTIONING, FOR THE FIRST TIME, 
02:25 - I'M USING 
02:28 - REALP TIME HUMAN WRITTEN 
CAPTIONED GENERATED BY WHITE 
02:33 - COAT CAPTIONING.  YOUTUBE HAS 
AUTO CAPTIONS, BUT THIS IS TYPED
02:37 - BY A PROFESSIONAL CAPTIONER IN 
REALTIME AS I'M SPEAKING, I 
02:40 - THINK.
THIS REMINDS ME OF THE ELEPHANT 
02:45 - AND PIGGY BOOK, WHICH IS -- YOU 
ARE IN A BOOK, AND THE 
02:50 - CHARACTERS -- THEY CAN MAKE THE 
CHARACTERS SAY WHATEVER THEY 
02:54 - WANT.  I CAN MAKE THE CAPTIONER 
TYPE BLUEBERRY, MANGO, 
03:00 - WATERMELON, THOSE WORDS SHOULD 
BE APPEARING.  SO THANK YOU TO 
03:04 - SPELL.RUN FOR THE SPONSORSHIP, 
THANK YOU TO YINING FOR BEING 
03:08 - HERE, AND THANK YOU TO WHITE 
COAT CAPTIONING FOR THE 
03:13 - CAPTIONING SERVICES AND TO SPELL
FOR PROVIDING THE FUNDS FOR 
03:16 - THOSE.  AND I WILL BE TO THE 
SIDE LOOKING FOR THE YOUTUBE 
03:20 - CHAT, I WILL TRY TO ANSWER THEM,
AND MOSTLY WE WILL SAVE 
03:27 - QUESTIONS UNTIL THE END.  IF 
THERE IS AN IMPORTANT KEY 
03:29 - QUESTION, I MIGHT INTERRUPT AND 
ASK THAT.  AND ONE OTHER THING: 
03:34 - YINING WILL TELL YOU ABOUT THIS,
BUT I CANNOT RESIST.  TO TRAIN A
03:40 - STYLE TENSOR MODEL ON THE CLOUD,
WITH A GPU, IT TAKES A LONG 
03:45 - TIME.  SO WE ARE LIKE A COOKING 
SHOW MECHANIC, WE'RE GOING TO 
03:49 - START THE TRAINING PROCESS AND 
THEN HAVE THE PRE-TRAINED MODEL 
03:52 - IN THE OVEN, FULLY BAKED, TO 
SHOW YOU HOW IT WORKS.  IF YOU 
03:57 - WATCH THIS TUTORIAL, YOU WILL BE
ABLE TO TRAIN YOUR OWN STILL 
04:03 - TRANSFER MACHINE LEARNING MODEL 
USING SPELL.RUN, AND IMPLEMENT 
04:07 - THAT MODEL IN THE 
04:12 - BROWSER.
OKAY, SO I'M LOOKING IN THE 
04:15 - CHAT.  THAT IS ALL OF MY 
INTRODUCTORY STUFF, YES.  SO I 
04:18 - AM JUST GOING TO TRANSFER IT 
OVER TO YINING, I'M GOING TO 
04:22 - MUTE MY MICROPHONE, I WILL 
UNMUTE IT ONCE IN A WHILE ONCE I
04:26 - HAVE SOMETHING IMPORTANT TO SAY.
AND WE WILL GET STARTED, OKAY? 
04:32 - SPEAKER: THANK YOU SO MUCH.  HI,
I'M YINING, AND I'M EXCITED TO 
04:38 - BE HERE TODAY TO TALK ABOUT 
04:48 - STYLE TRANSFER.
HERE.
04:49 - AND I WANT TO THANK EVERYONE FOR
WATCHING THIS VIDEO.
04:53 - I HOPE YOU ENJOY THIS VIDEO.  
05:05 - LET'S GET STARTED!
TODAY, WE ARE GOING TO TALK 
05:06 - ABOUT STYLE TRANSFER.
WE ARE GOING TO DO FOUR THINGS 
05:08 - TODAY.
WE WILL TALK ABOUT WHAT IS STYLE
05:11 - TRANSFER, HOW DOES IT WORK, AND 
WE ARE GOING TO A PLATFORM 
05:14 - CALLED SPELL TO TRAIN A NEW 
STYLE TRANSFER MODEL, AND PORT 
05:18 - THE MODEL INTO ML5.JS TO CREATE 
A AN INTERACTIVE DEMO.
05:23 - SPELL AND ML5JS ARE BOTH TOOLS 
05:27 - THAT MAKE ML MORE APPROACHABLE 
FOR A BROAD RANGE OF AUDIENCE.
05:34 - FOR OUR PROJECT TODAY, ML5JS 
ALLOWS US TO RUN OUR MODEL IN 
05:37 - THE BROWSER.
BY THE WAY, ML5.JS IS A 
05:43 - JAVASCRIPT LIBRARY BASED ON 
TENSORFLOW.JS.  SO OUR MODEL 
05:47 - THAT WE HAVE TODAY WOULD ALSO 
WORK IN THE 
05:53 - TENSORFLOW.JS.
AND SPELL PROVIDES COMPUTING 
05:55 - POWERS FOR US TO TRAIN A MODEL 
FASTER.
05:58 - IF I TRAIN THE MODEL ON MY OWN 
06:02 - LAPTOP, IT MIGHT TAKE SEVERAL 
06:05 - DAYS, BUT WITH THE REMOTE GPU 
PROVIDED SPELL, IT WILL ONLY 
06:08 - TAKE A FEW HOURS.
LET ME SHOW YOU WHAT ARE WE 
06:13 - GOING TO BUILD AT THE END OF 
THIS VIDEO.
06:32 - THIS IS A DEMO:  
HTTPS://YINING1023.GITHUB.IO/ 
06:35 - STYLETRANSFER_SPELL/.
THIS DEMO READS THE IMAGES IT 
06:39 - GETS FROM OUR WEBCAM, AND 
TRANSFER THE STYLE OF THE IMAGE 
06:42 - INTO THE STYLE OF THIS ART WORK.
THE STYLE IMAGE IS AN ANCIENT 
06:46 - CHINESE PAINTING CALLED FUCHUN 
SHANJU TU.
06:52 - THE STYLE IMAGE DOESN'T HAVE TOO
06:59 - MANY COLORS, BUT IF YOU TRAIN 
THE MODEL WITH OBVIOUS STYLE, IF
07:03 - YOU USE THOSE STYLE IMAGES, YOU 
WILL GET A MORE OBVIOUS
07:13 - RESULT.
THIS IS THE DEMO THAT WE ARE 
07:15 - GOING TO BUILD
07:23 - TODAY.
BEFORE WE BUILD ANYTHING,
07:30 - WHAT IS STYLE TRANSFER?
STYLE TRANSFER IS THE TECHNIQUE 
07:31 - OF RECAST THE CONTENT OF ONE 
IMAGE IN THE STYLE OF ANOTHER 
07:33 - IMAGE.
07:37 - FOR EXAMPLE, HERE IS A 
07:46 - PHOTOGRAPH, THIS TECHNIQUE CAN 
EXTRACT THE CONTENT OF THE 
07:55 - PHOTO, AND THE STYLE OF THIS ART
07:59 - WORK, AND COMBINE THE TWO TO 
CREATE A NEW IMAGE.
08:02 - HERE ARE MORE EXAMPLES.
08:09 - SO, HOW DOES IT WORK?
STYLE TRANSFER WAS FIRST 
08:16 - INTRODUCED IN THE PAPER A NEURAL
ALGORITHM OF ARTISTIC STYLE IN 
08:20 - 2015 BY GATYS.
08:23 - IN THE PAPER, THEY PROPOSED A 
SYSTEM THAT USES CONVOLUTIONAL 
08:29 - NEURAL NETWORKS TO SEPARATE AND 
08:32 - RECOMBINE CONTENT AND STYLE OF 
ARBITRARY IMAGES.
08:37 - BY THE WHY, AN
08:45 - COLUSIONAL NEURAL NETWORK IS A 
DEEP NEURAL NETWORK USED TO 
08:50 - ANALYZE IMAGES.
THE IDEA IS THAT IF WE TAKE A 
08:53 - CONVOLUTIONAL NEURAL NETWORK 
THAT IS TRAINED TO RECOGNIZE 
08:56 - OBJECTS WITHIN IMAGES THEN THAT 
08:59 - NETWORK HAS DEVELOPED SOME 
09:02 - INTERNAL REPRESENTATIONS OF THE 
CONTENT AND STYLE OF AN IMAGE.
09:08 - MORE IMPORTANTLY, THE PAPER 
09:13 - FINDS THAT THE REPRESENTATIONS 
09:20 - IN THE IMAGE CAN BE 
09:30 - SEPARATED.
WE CAN TAKE THE CONTENT AND 
09:35 - STYLE IN ONE
09:40 - IMAGE AND ARE SEPARABLE, WHICH 
MEANS WE CAN TAKE THE CONTENT 
09:42 - REPRESENTATION FROM ONE IMAGE 
AND STYLE REPRESENTATION FROM 
09:44 - ANOTHER TO GENERATE A BRAND NEW 
IMAGE.
09:47 - THE CNN THAT GATYS USED IS 
CALLED VGG. IT'S A NETWORK 
09:50 - CREATED BY THE VISUAL GEOMETRY 
GROUP AT OXFORD UNIVERSITY.
09:53 - THIS CNN IS THE WINNER OF 
IMAGENET, AN OBJECT RECOGNITION 
09:57 - CHALLENGE IN 2014.
10:00 - WE WILL SEE THE NAME VGG AGAIN 
WHEN WE TRAIN THE MODEL.
10:06 - THAT'S BECAUSE WE ARE TRYING TO 
10:10 - GET REPRESENTATIONS OF AN IMAGE 
10:14 - FROM THIS VGG CONVOLUTIONAL 
10:20 - NEURAL NETWORK.
NEXT, CONVOLUTIONAL NEURAL 
10:26 - NETWORKS LOOK LIKE
10:29 - FILTERS, DIFFERENT LAYER HAS 
DIFFERENT REPRESENTATIONS OF AN 
10:31 - IMAGE.
AN INPUT IMAGE CAN BE 
10:33 - REPRESENTED AS A SET OF FILTERED
IMAGES AT EACH LAYER IN THE CNN.
10:41 - WE CAN VISUALISE THE INFORMATION
AT DIFFERENT LAYERS IN THE CNN 
10:43 - BY RECREATE THE INPUT IMAGE FROM
ONE OF THE FILTERED IMAGE.
11:00 - WE CAN SEE THAT IMJ
11:07 - A, B, C, D, E ARE THE RECREATED 
IMAGES.
11:09 - THEY ARE ALMOST 
11:13 - PERFECT.
AS THE LEVEL GETS HIGHER AND 
11:16 - HIGHER, ALL OF THOSE DETAILED 
PIXEL INFORMATION IS LOST, BUT 
11:22 - THE HIGH LEVEL CONTENT OF THIS 
IMAGE IS STILL HERE.
11:26 - FOR EXAMPLE, FOR THIS IMAGE E 
HERE, GIVEN THAT WE CANNOT SEE 
11:33 - IT CLEARLY, BUT WE CAN SEE THAT 
-- HERE'S A HOUSE, THIS IMAGE.  
11:37 - SO THIS IS HOW CONTENT 
REPRESENTATION LOOKS LIKE IN
11:49 - THIS NETWORK.
NEXT, WE WILL TALK ABOUT STYLE 
11:54 - REPRESENTATION.
11:59 - ON TOP OF THE ORIGINAL CNN 
CONVOLUTIONAL NEURAL NETWORK, 
12:03 - REPRESENTATIONS THEY BUILT A NEW
FEATURE SPACE THAT CAPTURES THE 
12:04 - STYLE OF AN INPUT IMAGE.
THE STYLE REPRESENTATION 
12:08 - COMPUTES CORRELATIONS BETWEEN 
THE DIFFERENT FEATURES IN 
12:12 - DIFFERENT LAYERS OF THE CNN. 
12:17 - FOR DETAILED IMPLEMENTATION, WE 
CAN CHECK THE PAPER.
12:22 - BUT AS THE LEVEL GETS HIGHER AND
HIGHER, WE FIND THAT THEY 
12:28 - RECREATE THE STYLE OF THE INPUT 
IMAGE FROM STYLE 
12:32 - MATCHES THIS ARTWORK BETTER AND 
BETTER, BUT THE INFORMATION OF 
12:36 - THE GLOBAL ARRANGEMENT OF THE 
SCENE IS LOST.
12:40 - FOR EXAMPLE, FOR IMAGE D AND E, 
THE STYLE IS VERY CLEAR TO US 
12:45 - NOW.  BUT WE CANNOT SEE IF 
THERE'S A HOUSE ON THIS PHOTO 
12:50 - ANYMORE, BECAUSE THE CONTENT 
REPRESENTATION IS
12:58 - LOST.
AND THEN AFTER WE HAVE THE 
13:00 - CONTENT REPRESENTATION OF THE 
PHOTO, AND THE STYLE 
13:02 - REPRESENTATION OF THIS ART WORK,
AND WE'RE GOING TO SYNTHESIZE
13:09 - A NEW IMAGE THAT CAN MATCH THOSE
TWO AT THE SAME TIME.  THIS IS 
13:14 - HOW STYLE TRANSFER 
13:22 - WORKS.
AND JANE COGEN, THE CREATOR OF 
13:26 - MACHINE LEARNING FOR ARTISTS, HE
MAKES THIS AMAZING DEMO VIDEO 
13:30 - THAT TALKS ABOUT WHAT'S A 
CONVOLUTIONAL NEURAL NETWORK, 
13:35 - AND HOW IT SEES EACH LAYER,O YOU
SO YOU WILL HAVE A BETTER 
13:41 - UNDERSTANDING OF HOW THIS 
CONVOLUTIONAL NEURAL NETWORK 
13:45 - SEES IMAGES AND HOW IT FILTERS 
OUT THE IMAGE AND GETS THE 
13:51 - REPRESENTATION OUT OF ONE IMAGE 
AFTER WATCHING HIS
14:02 - VIDEO.
O  I HIGHLY RECOMMEND THAT YOU 
14:06 - WATCH HIS
14:12 - VIDEO.
AND GATYS'S PAPER OPENED UP A 
14:17 - NEW AREA OF RESEARCH, AND 
DIFFERENT KINDS OF TRANSFER 
14:20 - APPEARED IN THE LAST THREE 
YEARS.
14:22 - WE ARE GOING TO TAKE A LOOK AT A
FEW OF THEM HERE.
14:25 - AND THEN WE ARE GOING
14:29 - TO DIVE INTO TRAINING YOUR STYLE
TRANSFER MODEL WITH 
14:37 - SPELL.
IN 2016, THIS
14:43 - PAPER CAME OUT.  
IT IS CALLED A FAST STYLE 
14:46 - TRANSFER, IT SHOWS THAT A NEURAL
NETWORK CAN APPLY A FIXED STYLE 
14:50 - TO ANY INPUT IMAGE IN
14:55 - REALTIME.
IT BUILDS ON THE 
15:01 - GATYS STYLE TRANSFER MODEL, BUT 
IT IS A LOT FASTER.  THIS FAST 
15:05 - STYLE 
15:10 - TRANSFER HAS AN IMAGE 
TRANSFORMATION NETWORK AND A 
15:15 - LOSS CALCULATION NETWORK TO 
TRAIN THIS NETWORK.  WE NEED TO 
15:18 - PICK A FIXED STYLE IMAGE AND USE
A LARGE BATCH OF DIFFERENT 
15:21 - CONTENT IMAGE AS TRAINING 
EXAMPLES.  SO, IN THEIR PAPER, 
15:26 - THEY TRAINED THEIR NETWORK, THIS
MICROSOFT COCO DATASET, WHICH IS
15:32 - AN OBJECT RECOGNITION DATASET OF
18,000
15:42 - IMAGES.  TODAY, WE WILL USE A 
TENSORFLOW IMPLEMENTATION OF 
15:45 - THIS STYLE TRANSFER, SO WE ARE 
ALSO GOING TO USE THIS COCO 
15:49 - DATASET.  WE ARE GOING TO 
DOWNLOAD THIS DATASTYLE LATER.  
15:52 - AND HERE IS AN IMAGE FROM
16:01 - THEIR PAPER.
THIS IS THE ORIGINAL PHOTO, THIS
16:07 - GATYS RESULT AND THIS IS THE 
STYLE TRANSFER RESULT AND IT 
16:15 - WORKS A LOT FASTER.
  AND THE NEXT STYLE TRANSFER IS
16:17 - FOR VIDEOS.
THIS MODEL CAME OUT IN 2016, 
16:22 - TOO.
WE MAY THINK WE KNOW HOW TO 
16:24 - TRANSFER IMAGES, FOR VIDEOS, WE 
CAN JUST TRANSFER THE FRAME -- 
16:28 - EACH FRAME OF THE VIDEO ONE BY 
ONE AND THEN STITCH THOSE IMAGES
16:33 - TOGETHER TO MAKE A
16:41 - TRANSFER 
16:46 - VIDEO.
BUT IF WE DO THAT, WE CAN SEE 
16:46 - THE RESULT IS NOT GOOD BECAUSE
16:53 - THE VIDEO WILL FLICKER A LOT, 
BECAUSE MACHINE DOESN'T KNOW ANY
16:55 - INFORMATION ABOUT THE PREVIOUS 
IMAGE.
17:00 - SO YOU CAN SEE, IF WE JUST DO 
THAT, THE VIDEO WILL FLICKER
17:11 - A LOT.
THE PAPER IMPROVED 
17:13 - FRAME-TO-FRAME STABILITY BY 
ADDING AN OPTICAL-FLOW ALGORITHM
17:17 - THAT TELLS THE MACHINE THE 
17:21 - POSSIBLE MOTIONS FROM FRAME TO 
FRAME.
17:23 - IT'S ALSO CALLED TEMPORALLY 
17:27 - COHERENT, SO THE TRANSFERRED 
17:32 - VIDEO WOULDN'T BE FLICKERING TOO
MUCH.
17:37 - SO WE CAN SEE SOME RESULTS HERE.
THIS VIDEO IS NOT FLICKERING AT 
17:44 - ALL.  AND THEY GOT AMAZING 
RESULTS FROM THEIR
17:50 - MODEL.
THIS IS THE TRANSFERRED VIDEO, 
17:52 - THE RESULT LOOKS 
18:01 - GREAT.
18:04 - LET'S GO TO THE NEXT 
18:12 - MODEL.
THIS IS A VERY COOL MODEL 
18:14 - APPEARED IN 2017, IT'S CALLED 
18:17 - DEEP PHOTO TRANSFER:  THE STYLE 
18:21 - TRANSFER WE SAW SO FAR WORK 
REALLY WELL IF WE ARE LOOKING 
18:26 - FOR SOME ARTISTIC PAINTING 
RESULTS, BUT THEY ADD SOME 
18:30 - DISTORTION TO THE INPUT IMAGE.
THEY DON'T LOOK REALISTIC.
18:38 - BUT THIS DEEP PHOTO TRANSFER CAN
18:42 - PRODUCE REALISTIC PHOTOS.
18:51 - THIS INPUT IMAGE ON THE LEFT, 
AND IN THE MIDDLE, THIS IS THE 
18:55 - STYLE IMAGE, AND THEN ON THE 
RIGHT, THIS IS THE OUTPUT IMAGE.
19:00 - THE OUTPUT IMAGE LOOKS LIKE A 
REGULAR PHOTO TO ME, SO THE 
19:05 - RESULT IS ALWAYS SUPER
19:14 - GOOD.
THEY USED AFFINE TRANSFORMATION 
19:17 - TO MAKE SURE THAT THE SHAPES ARE
NOT DISTORTED DURING 
19:19 - TRANSFORMATION.
THE RESULT IS AMAZING.
19:25 - THIS IS THE NEXT STYLE TRANSFER.
THIS IS SEMANTIC STYLE TRANSFER:
19:30 - IT CAN PRODUCE SEMANTICALLY 
MEANINGFUL RESULTS, THE MACHINE 
19:36 - HAS AN UNDERSTANDING OF THE 
OBJECTS ON THE IMAGE.
19:41 - IN THIS EXAMPLE, THE MACHINE 
RECOGNIZE THAT BOTH IMAGES HAVE 
19:48 - NOSE, SO IT USES THIS 
INFORMATION IN THE 
19:52 - TRANSFORMATION PROCESS.
19:56 - THERE ARE A LOT OF APPLICATIONS 
20:00 - OF THIS MODEL, FOR EXAMPLE, YOU 
CAN USE IT TO CONVERT A SKETCH 
20:03 - OR A PAINTING TO A PHOTO.
20:09 - I THINK THE OUTPUT IS PRETTY 
GOOD.
20:13 - THIS IS SEMANTIC STYLE TRANSFER.
THE LAST STYLE TRANSFER IS VERY 
20:18 - SPECIAL.
IT'S UNIVERSAL NEURAL STYLE 
20:23 - TRANSFER:  ALMOST ALL PREVIOUS 
20:28 - STYLE TRANSFER, THERE ARE SOME 
20:31 - ABSTRACT STYLE IMAGES THAT DON'T
WORK WELL.
20:34 - IF THE STYLE IMAGE IS VERY 
20:40 - DIFFERENT FROM THE TRAINING 
IMAGES, THE RESULTS WON'T BE 
20:42 - VERY GOOD.
20:46 - FOR EXAMPLE, IF IT IS A BLACK 
LINE WITH A WHITE BACKGROUND.  
20:51 - IF WE TRAIN TOO MANY IMAGES, YOU
CANNOT GET A LOT OF INFORMATION 
20:54 - FROM THE LINE BECAUSE IT TRAINED
A LOT OF OBJECTS.
20:58 - BUT THIS MODEL CAN SOLVE THIS 
MODEL.
21:03 - THIS NEW MODEL IS ALSO BASED ON 
NN, BUT DOESN'T NEED TO BE 
21:05 - TRAINED ON THESE IMAGES, IT 
21:08 - WORKS ON ANY ARBITRARY STYLE.
21:14 - IT USES AUTO-ENCODER, IT HAS A 
21:18 - ENCODE AND DECODE PROCESS.
21:23 - SO WE PUT THE INPUT IMAGE IN, WE
ENCODE IT, AND AFTER WE DECODE 
21:30 - IT, IT CAN GIVE BACK THE 
21:40 - IMAGE.
IT USE THE ENCODE PART ON BOTH 
21:42 - INPUT IMAGE AND STYLE IMAGE, 
21:45 - THEN USE THE DECODER TO DECODE 
THE COMPRESSED VERSION OF THE 
21:50 - BOTH INPUT AND STYLE IMAGE.
IN THE END, YOU CAN GET THIS 
21:57 - RESULT.
THIS IS TRULY AMAZING, I THINK 
21:59 - IN THE FUTURE, WE CAN PORT IT TO
ML5JS AND PLAY WITH IT.
22:13 - HERE ARE THE STYLE TRANSFER 
MODELS THAT THEY
22:19 - TALK ABOUT.
TODAY, WE ARE USING THE 
22:24 - TENSORFLOW IMPLEMENTATION THAT 
IS A COMBINATION OF GATYS' STYLE
22:25 - TRANSFER, FAST-STYLE-TRANSFER, 
AND ULYANOV'S INSTANCE 
22:28 - NORMALIZATION.
THIS TENSORFLOW IMPLEMENTATION 
22:31 - OF FAST-STYLE-TRANSFER IS MADE 
BY LOGAN ENGSTROM.
22:39 - MAKE SURE, IF WE USE THIS CODE, 
WE CAN GIVE CREDIT TO
22:49 - HIM.
22:52 - NOW, FINALLY, WE ARE GOING TO 
USE SPELL TO TRAIN OUR OWN STYLE
22:53 - TRANSFER MODEL.
23:01 - THERE ARE 4 STEPS THAT WE NEED 
TO DO.
23:04 - PREPARING THE ENVIRONMENT 
DOWNLOADING DATASETS 
23:09 - BECAUSE WE USED THE VGG MODEL 
AND THE COCO DATASET, IT IS 
23:14 - LARGE, AND SO IT MIGHT TAKE AN 
HOUR TO FINISH THIS ONE, AND 
23:19 - THEN WE'RE GOING TO RUN THIS 
STYLE PYTHON SCRIPT TO TRAIN THE
23:25 - MODEL.
I THINK IT WILL TAKE ABOUT TWO 
23:29 - HOURS AND SIX MINUTES, AND THEN 
IN THE END, WE'RE GOING TO 
23:35 - CONVERT THIS TENSORFLOW SAVED 
MODEL INTO A FORMAT THAT WE CAN 
23:39 - USE IN TENSORFLOW.JS AND ML5.JS.
  AND HERE IS THE 
23:51 - DETAILED INSTRUCTION HERE.  IF 
YOU ARE CURIOUS, WE  YOU CAN 
23:57 - READ THE READ ME THERE.
HAHA 
24:05 - >> THERE WE
24:12 - GO.
  SPEAKER: FOR STEPS FOR
24:22 - 1-3, YOU CAN CHECK OUT THE 
24:31 - TUTORIAL.
AND YOU CAN FIND A STEP BY STEP 
24:32 - INSTRUCTION HERE:  I'M GOING TO 
SWITCH TO THIS PAGE, CAN FOLLOW 
24:34 - THE INSTRUCTIONS HERE.
I'M GOING TO TALK ABOUT THAT 
24:43 - LATER.
FIRST FIRST, WE WILL TRAIN THE 
24:47 - STYLE TRANSFER MODEL ON THE
24:57 - SPELL.
25:09 - I WILL GO TO AN EMPTY
25:21 - FOLDER.  
>> LIKE THIS? 
25:22 - >> I THINK THAT'S 
25:31 - GOOD, YES. 
>> THE FIRST STEP IS TO SET UP 
25:37 - THE ENVIRONMENT.  SO WE'RE GOING
TO GO TO OUR TERMINAL AND WE CAN
25:40 - GO TO ONE OF THE DIRECTORIES.  
WE CAN FIND A FOLDER, SO ON MY 
25:45 - COMPUTER, I WILL JUST GO TO 
25:55 - CDDEV/LIVESTREAM.
THERE IS AN EMPTY FOLDER AND NOT
25:58 - ANYTHING THERE
26:06 - YET.
FIRST I NEED TO INSTALL SPELL.  
26:08 - BEFORE I DO THAT, I NEED TO 
INSTALL PIP.  IT IS A PACKAGE 
26:13 - MANAGEMENT SYSTEM FOR PYTHON.  
IT IS LIKE NPM FOR JAVASCRIPT. 
26:17 - >> I DON'T KNOW IF I'M MUTED OR 
NOT, BUT YOU SHOULD MOVE THE 
26:21 - BOTTOM WHERE YOU ARE TYPING 
HIGHER UP BECAUSE THE CAPTIONS 
26:28 - ARE COVERING IT.  SO IF YOU CAN 
MAKE YOUR TERMINAL WINDOW GO -- 
26:32 - YEAH, THAT WORKS
26:41 - TOO.
27:03 - THIS IS MY TERMINAL WINDOW.  
BEFORE I INSTALL SPELL, I NEED 
27:08 - TO INSTALL PIP, THE PACKAGE 
MANAGEMENT STYLE FOR PYTHON.  IT
27:14 - IS LIKE NPM FOR JAVASCRIPT.
THE NODE PACKAGE MANAGEMENT.  IF
27:20 - YOU DON'T HAVE PIP INSTALLED, WE
CAN DO IT TOGETHER.  I THINK I 
27:23 - DID IT, SO IT IS FASTER FOR ME.
SO I'M GOING TO SWITCH TO THIS 
27:27 - PAGE TO SEE ALL OF THOSE STEPS.
SO FIRST, TO INSTALL THE PIP, 
27:33 - WE'RE GOING TO DOWNLOAD THIS -- 
WE WILL MAKE THIS BIGGER, TOO.
27:40 - WE'RE GOING TO DOWNLOAD THIS GET
PIP
27:52 - PYTHON SCRIPT.
SO WE WILL DOWNLOAD THIS GET PIP
27:58 - PYTHON SCRIPT, AND NOW IF I TAKE
A LOOK AT MY FOLDER, THERE'S A 
28:04 - GET PIP PYTHON SCRIPT.
AND THEN, I'M JUST GOING TO RUN 
28:08 - MY 
28:12 - SCRIPT.
PYTHON GET PIP.PY, IF YOU ARE 
28:17 - USING PYTHON 3, YOU CAN DO 
28:23 - PYTHON 
28:29 - 3..GET-PIP.PY.  IF THIS IS THE 
FIRST TIME YOU HAVE INSTALLED 
28:32 - PIP, IT MIGHT TAKE A MINUTE.
AND AFTER THIS IS SUCCESSFULLY 
28:38 - INSTALLED, WE'RE GOING TO PIP 
28:45 - INSTALL SPELL.
I ALSO HAVE DONE THIS, SO IT 
28:47 - MIGHT BE FASTER FOR ME.
SO HERE IT SAID ALL OF THE 
28:51 - REQUIREMENTS ARE SATISFIED 
BECAUSE I ALREADY DID IT ONCE.
28:53 - SO NOW WE HAVE SPELL INSTALL ED,
IF I TYPE IN SPELL, I SHOULD BE 
29:00 - ABLE TO SEE A SET OF COMMANDS 
THAT I CAN DO.  I CAN DO SPELLCP
29:06 - TO COPY A FILE, OR I CAN DO 
SPELLRUN TO RUN -- TO START A 
29:15 - NEW ONE.
AND I CAN DO SPELL LOGGING TO 
29:20 - LOG INTO SPELL FROM MY LOCAL 
COMPUTER.
29:22 - MY SPELL 
29:29 - USERNAME IS THIS, AND 
29:34 - MYMYPASSSWORD IS THIS.  AND I AM
SUCCESSFULLY LOGGED INTO SPELL.
29:39 - AND I CAN ALSO DO SPELL, WHO AM 
I, TO CHECK WHO IS LOGGED INTO 
29:44 - SPELL AND IT SAYS THE USER NAME,
THE EMAIL, CREATED AUGUST 13TH.
29:52 - AND NOW WE HAVE SUCCESSFULLY SET
UP SPELL, AND THEN WE CAN DO 
29:59 - PREPARE OUR ENVIRONMENT.
AS I MENTIONED BEFORE, WE'RE 
30:03 - GOING TO USE THIS TENSORFLOW 
IMPLEMENTATION OF FAST STYLE 
30:10 - TRANSFER MADE BY LOGAN.
SO NOW I'M GOING TO GO AHEAD AND
30:14 - CLONE HIS
30:21 - GITHUB REPOSITORY.
SO I WILL DO GIT CLONE.  AND 
30:25 - THEN I'M GOING TO GO TO HIS 
FOLDER, CD FAST STYLE TRANSFER.
30:31 - AND NOW I'M HERE.
THE NEXT STEP IS TO CREATE SOME 
30:37 - FOLDRSRS
30:42 - RS AND PUT IN OUR STYLE IMAGE.  
FIRST, I WILL CREATE A FOLDER, 
30:51 - CKKP CHECKPOINT.  I WILL CREATE 
A GIT IGNORE FILE INSIDE OF THE 
30:56 - FOLDER.  AND I'M ALSO GOING TO 
CREATE A FOLDER CALLED IMAGES 
31:04 - HERE.
AND I'M ALSO GOING TO CREATE 
31:08 - ANOTHER FOLDER INSIDE OF THE 
IMAGES CALLED STYLE.
31:11 - THIS IS THE FOLDER WHERE OUR 
STYLE IMAGE IS 
31:23 - LIVING.
IF I TAKE A LOOK AT THIS REPO, 
31:28 - THIS IS THE NEW FOLDER THAT WE 
JUST CREATED, AND THIS IS THE 
31:31 - NEW FOLDER THAT WE CREATED 
IMAGES.
31:33 - AND THE NEXT STEP IS TO FIND A 
STYLE IMAGE THAT WE TRAIN THAT 
31:39 - CAN BE TRAINED
31:48 - ON.
AND WHEN WE ARE CHOOSING STYLE 
31:53 - IMAGES, WE NEED TO MAKE SURE NAT
WE CAN USE THIS ARTWORK AND ALSO
31:57 - WE CAN USE THAT
32:03 - IMAGE BECAUSE WE NEED TO GIVE 
CREDIT TO THE IMAGES BECAUSE WE 
32:06 - DON'T WANT TO RUN INTO ANY 
COPYRIGHT
32:17 - PROBLEM.
I FOUND THIS PAINTING OF LOTUS 
32:20 - BY A CHINESE ARTIST NAMED 
32:29 - [SPEAKING IN CHINESE].
SO I GOT THIS IMAGE FROM 
32:34 - WIKIPEDIA, AND IF YOU HAVE 
ARTWORK THAT I CAN USE, YOU CAN 
32:38 - SHARE IT WITH ME AND I CAN TRAIN
IT WITH SPELL AND SEND BACK THE 
32:43 - MODEL TO YOU IF YOU ALLOW ME TO 
USE YOUR 
32:54 - ARTWORK.
IF THERE IS NO OTHER ARTWORK, WE
32:59 - WILL TRAIN THIS AGAIN.  I 
ALREADY TRAINED A MODEL ON THIS 
33:08 - IMAGE.
>> THEY ARE BEHIND IN REALTIME, 
33:10 - I THINK YOU SHOULD PROBABLY MOVE
FORWARD WITH THAT IMAGE, AND I 
33:13 - WILL SEE PEOPLE -- BECAUSE 
PEOPLE WILL DO THEIR OWN IMAGES 
33:17 - FOLLOWING ALONG, AND THEY WILL 
COME UP WITH A HASHTAG OR 
33:20 - SOMETHING IN THE END THAT PEOPLE
CAN SHARE THEIR STYLE TRANSFER 
33:26 - MODELS ON TWITTER OR SOCIAL 
MEDIA.  IT IS A GOOD PLACE TO 
33:29 - SHARE. 
>> OKAY, SOUNDS GOOD.
33:30 - SO WE HAVE DECIDED TO USE THIS 
IMAGE.  WHAT I'M GOING TO DO IS 
33:38 - TO PUT THIS IMAGE INTO 
33:43 - IMAGES/STYLE.
SO I'M GOING TO GO
33:53 - TO THE FOLD ER AND I'M GOING TO 
MAKE THIS 
34:05 - BIGGER.
I DON'T THINK I CAN MAKE THIS 
34:09 - WINDOW BIGGER, BUT I CAN PUT 
THIS STYLE IMAGE INTO 
34:14 - IMAGES.STYLE.
I'M GOING TO COPY THIS IMAGE, 
34:18 - THIS IMAGE IS CALLED 
34:23 - FUTRIN.JPG.
I JUST COPIED THIS IMAGE HERE.
34:28 - SO NOW WE HAVE OUR STYLE IMAGE. 
THE ONE THING THAT WE NEED TO DO
34:33 - IS TO GET AT THOSE TWO FOLDERS, 
AND ALSO COMMIT THESE CHANGES TO
34:40 - LET SPELL KNOW THAT WE MADE ALL 
THOSE CHANGES.
34:43 - SO HERE I'M GOING TO DO GIT ADD 
IMAGES, AND ALSO ADD THAT FOLDER
34:50 - CHECKPOINT.
AND THEN I'M GOING TO COMMIT 
34:59 - THESE CHANGES.  COOL.  SO NOW WE
HAVE PREPARED OUR ENVIRONMENT.  
35:04 - THIS IS DONE.  WE CAN MOVE TO 
THE NEXT
35:10 - STEP.
WE NEED TO DOWNLOAD THE 
35:21 - DATASET.
35:25 - IN ORDER TO TRAIN A MODEL, WE 
WILL NEED THE REQUIRED DATASETS.
35:27 - FOR FAST STYLE TRANSFER THE 
35:35 - ARE IN THE STYLE SCRIPT, SO WE 
CAN DOWNLOAD THE FAST STYLE 
35:41 - TRANSFER GITHUB REPO
35:51 - HERE.
NEXT WE ARE GOING TO RUN THIS 
35:53 - SCRIPT 
35:58 - SETUP.
AS YOU CAN SEE, IN HAD SETUP, WE
36:00 - ARE GOING TO CREATE A FOLDER 
CALLED DATA AND THEN GO INTO 
36:04 - THAT DATA FOLDER AND THEN GET 
THIS -- THE VGG MODEL, THE 
36:13 - CONVOLUTIONAL NEURAL NETWORK 
MODEL, BACK.  AND WE WILL ALSO 
36:18 - MAKE A FOLDER AND THEN DOWNLOAD 
THIS COCO 
36:28 - DATASET.
36:35 - UNZIP THE COCO DATASET.
TALKED ABOUT BEFORE, VGG IS CNN 
36:37 - FOR OBJECT RECOGNITION.
36:41 - WE NEED IT TO GET 
REPRESENTATIONS OF THE IMAGE.
36:45 - THAT'S WHY WE'RE GOING TO USE 
THIS VGG MODEL.
36:57 - FAST-STYLE-TRANSFER USES COCO 
DATASET TO TRAIN THE NETWORK AND
37:04 - OTHER OPTIMIZATION METHODS TO 
MAKE THE MODEL WORK IN 
37:05 - REAL-TIME.
IT IS AN OBJECT RECOGNITION OF 
37:09 - 18,000 IMAGES, AND WE NEED TO 
USE THIS BECAUSE THIS COCO 
37:12 - DATASET IS HUGE.  IT MIGHT TAKE 
A WHILE.  BUT WE ARE JUST GOING 
37:17 - TO DO IT.
SO THIS IS WHAT WE LOOK LIKE IN 
37:22 - THIS SETUP SCRIPT, AND NEXT WE 
ARE JUST GOING TO RUN THIS 
37:34 - SETUP.  
>> NEXT, WE ARE GOING TO RUN 
37:37 - THIS SETUP
37:46 - SCRIPT.
IN OUR TERMINAL, WE WILL DO 
37:49 - SPELL RUN, AND THIS IS THE 
SCRIPT THAT WE'RE GOING TO RUN. 
37:52 - BUT HERE, WE CAN ALSO SPECIFY 
THE MACHINE TYPE
38:01 - BY USING THIS
38:05 - FLAG//MACHINETYPE.CPU, IT IS 
FREE TO USE, SO WE ARE GOING TO 
38:08 - RUN THIS
38:17 - SCRIPT.
38:21 - NOW YOU CAN SEE THE EMOJI, 15, 
THIS NUMBER IS IMPORTANT TO US 
38:26 - BECAUSE LATER WE ARE GOING TO 
USE THE OUTPUT OF THIS RUN TO DO
38:30 - OUR NEXT TRAINING RUN.
SO IT MIGHT -- OH.
38:37 - IT IS DOWNLOADING THIS VGG 
MODEL.  LET ME MAKE IT A LITTLE 
38:41 - BIT 
38:45 - SMALLER.
I THINK AFTER DOWNLOADING THE 
38:49 - VGG
38:54 - MODEL, IT IS GOING TO DOWNLOAD 
THE COCO DATASET.  BUT HERE, I'M
38:59 - GOING TO DO CONTROL C TO EXIT.  
IT WOULDN'T STOP THIS RUN, IT 
39:03 - WOULD STOP PRINTING ALL THOSE 
LOGS.
39:07 - I TRIED TO RUN THIS RUN ON SPELL
AND IT TAKES ME ONE HOUR AND 30 
39:13 - MINUTES TO FINISH IT.
I CAN ALSO LOG INTO SPELL TO SEE
39:18 - MORE DETAILED INFORMATION ABOUT 
EACH RUN, BUT ALSO IN THE 
39:23 - TERMINAL, WE CAN DO SPELL PS.  
IT WILL LIST ALL OF THOSE RUNS 
39:29 - THAT I HAVE DONE
39:34 - BEFORE.
SO I HAVE 15 RUNS, AND THE LAST 
39:37 - ONE IS RUNNING, AND I AM -- AND 
THIS IS THE COMMIT THAT I PUT.  
39:42 - AND THIS IS THE MACHINE TYPE.  
WE ARE JUST USING CPU.
39:46 - BUT WE CAN ALSO LOG INTO THE 
SPELL WEBSITE, AND HERE I CAN 
39:53 - CLICK ON THIS RUN.  AND HERE I 
40:00 - CAN SEE ALL THOSE -- ALL THE 
INFORMATION ABOUT EACH RUN.
40:06 - THIS IS THE RUN THAT WE JUST 
DID, RUN 15.
40:11 - AND IT WILL OUTPUT A FOLDER 
CALLED DATA.  THESE ARE THE 
40:16 - LOGS, AND THIS IS THE CPU USAGE,
40:24 - CPU MEMORY, SO THIS RUN WILL 
TAKE ABOUT 1.5 HOURS.
40:30 - BUT LUCKILY, WE HAVE ANOTHER 
COMPLETE RUN.  I THINK IT IS RUN
40:38 - 13.  SO ON RUN 13, I RAN THE 
SAME COMMAND 
40:44 - SETUP HERE, AND IT IS ALREADY 
COMPLETED AND IT WILL OUTPUT A 
40:50 - FOLDER CALLED DATA, AND WE CAN 
CLICK ON THIS DATA TO SEE WHAT 
40:55 - KIND OF OUTPUT DID WE GET. 
WE WILL SEE THAT WE GOT THIS, 
40:58 - LET ME MAKE IT 
41:03 - BIGGER.
WE HAVE THIS VGG MODEL, WE'VE 
41:08 - ALSO GOT THE COCO DATASET.  HERE
IT IS TRAIN 2014.
41:14 - SO NEXT, WE'RE GOING TO USE THE 
OUTPUT FROM THIS RUN TO TRAIN 
41:27 - OUR MODEL.
41:34 - WE FINISHED THE SECOND STEP, 
DOWNLOADING THE DATASET.  AND 
41:38 - WE'RE GOING TO MOVE TO THE NEXT 
STEP, TRAINING WITH
41:47 - SPELL SCRIPT.  THIS IS THE 
COMMAND THAT WE'RE GOING TO RUN,
41:50 - BUT LET'S TALK ABOUT THIS 
COMMAND BEFORE WE ACTUALLY
41:56 - RUN IT.
THIS COMMAND STARTS A NEW RUN, 
42:00 - AND IT USES
42:04 - THE
42:09 - DASH DASH MOUNT FLAG TO OUTPUT 
RUN 13.  AND FOR 113, IT USES AN
42:14 - OUTPUT FOLDER, DATA, AND WE'RE 
GOING TO USE THIS MOUNT FLAG TO 
42:18 - COPY THIS DATA FOLDER INTO THE 
FILE SYSTEM OF OUR NEXT RUN.
42:23 - AND WE'RE GOING TO CALL THAT 
FOLDER DATASETS INSTEAD OF DATA.
42:28 - SO THIS IS THE MOUNT COMMAND.  
WE CAN SEE MORE INFORMATION IN 
42:34 - SPELL'S DOCUMENTATION.  AND THEN
WE'RE GOING TO SPECIFY THE 
42:39 - MACHINE TYPE.  I USED THE V100 
MACHINE.  WE CAN CHECK MORE
42:50 - DETAILED MACHINE TYPE
42:56 - HERE, THIS IS ON THE SPELL 
RUN/CORE CONCEPTS, YOU CAN TALK 
43:02 - ABOUT THE AVAILABLE MACHINE 
TYPES THAT YOU CAN USE, AND HERE
43:04 - THERE'S A PRICING TABLE THAT 
LISTS ALL THE MACHINE STYLES 
43:09 - THAT WE CAN USE.
THE ONE THAT I USED YESTERDAY IS
43:16 - CALLED V100.  AND NORMALLY, IT 
WOULD TAKE 12 HOURS TO TRAIN 
43:22 - THIS K18 MACHINE, AND IT WOULD 
TAKE FOUR HOURS TO TRAIN THIS 
43:27 - V100 MACHINE.
BUT I TRIED IT FOUR TIMES, AND 
43:33 - IT ONLY TOOK ME TWO HOURS TO 
TRAIN ON THIS V100
43:42 - MACHINE.
THIS IS THE MACHINE TYPE.
43:45 - AND THE NEXT COMMAND, WE 
SPECIFIED THE FRAMEWORK,
43:52 - IT IS TENSORFLOW.  WE WILL GET A
PACKAGE, THOSE ARE TWO ACTUAL 
43:57 - PACKAGES, THEY ARE FOR VIDEO 
44:07 - TRANSFER.   WE
44:11 - WILL USE THE?--APT AND?--PIP TO 
RUN THE PACKAGES.
44:13 - WE'RE GOING TO RUN THE STYLE 
PYTHON SCRIPT, AND WE'RE
44:19 - GOING TO TELL THE SCRIPTS WE 
WANT THE OUTPUT TO BE AT A 
44:25 - FOLDER CALLED CKKP CHECK POINT, 
AND WE'RE GOING TO TELL THE 
44:29 - SCRIPT THAT THIS IS THE PATH TO 
OUR STYLE IMAGE.
44:33 - AND THIS IS THE STYLE WEIGHT, 
THIS IS THE STYLE LOSS OF THAT 
44:44 - MODEL, WHICH IS 150, AND YOU CAN
READ MORE ABOUT IT AT LOGAN'S 
44:51 - GITHUB REPO ABOUT THE DEFAULT 
STYLE WEIGHT AND OTHER 
44:59 - INFORMATION.
IS
45:05 - -- WE WILL SPECIFY THE TRAIN 
PATH.  THIS IS THE PATH TO THE 
45:09 - COCO DATASET, AND THE PATH TO 
OUR VGG MODEL.  WE DON'T NEED TO
45:14 - CHANGE ANY OF THIS.  THE ONLY 
THING WE NEED TO CHANGE IS OUR 
45:19 - RUN NUMBER, WHICH WOULD BE 13, 
BECAUSE 13 RUN WILL DOWNLOAD TO 
45:24 - ALL OF THOSE DATASETS.  AND 
WE'RE ALSO GOING TO CHANGE THE 
45:27 - STYLE IMAGE NAME TO OUR OWN 
IMAGE NAME, WHICH IS 
45:39 - FUTRAN.JPG.
OKAY, LET'S DO THIS.
45:42 - SO I COPY AND PASTED THIS
45:54 - COMMAND.
46:00 - I'M JUST GOING TO REPLACE -- I 
WILL GO TO A CODE EDITOR FIRST.
46:07 - I'M GOING TO REPLACE MY -- I 
WILL REPLACE THIS WITH MY REAL 
46:13 - STYLE TRANSFER, STYLE IMAGE, 
WHICH IS FUTRAN.JPG.  AND ALSO 
46:20 - I'M GOING TO REPLACE THIS, THE 
RUN NUMBER OF THE SETUP RUN, TO 
46:23 - 13.  THAT'S THE RUN THAT WE 
USED.  AND THAT'S IT.
46:28 - SO NOW WE SHOULD BE ABLE TO COPY
AND PASTE THIS COMMAND AND RUN 
46:33 - IT IN OUR SPELL.
AND, BY RUNNING THIS, WE ARE 
46:37 - GOING TO START A NEW RUN TO 
TRAIN THE 
46:42 - MODEL.
LET'S JUST DO 
46:47 - IT.
IT SAYS CUSTOM SPELL, MACHINE 
46:54 - REQUESTED, RUN IS RUNNING, 
MOUNTING IS WHERE WE MOUNT THE 
47:01 - DATAFOLDER TO
47:08 - THIS RUN.
IT SAYS TESLA.100, THE MACHINE 
47:13 - TYPE, I THINK IT WILL GIVE MORE 
INFORMATION.  BUT I'M GOING TO 
47:18 - DO CONTROL C TO LET IT STOP 
LOGGING ALL OF THOSE LOGS.
47:23 - AND WE CAN ALSO DO SPELL.PS TO 
SEE OUR RUN.
47:28 - SO NOW I ACTUALLY HAVE TWO RUNS 
RUNNING, TWO RUNS RUNNING.  THE 
47:34 - FIRST ONE IS THE SET-UP, AND 
WE'RE STILL WAITING FOR THAT TO 
47:38 - FINISH, AND THIS IS THE TRAINING
SCRIPT.
47:42 - THIS IS THE V100
47:52 - MACHINE.
THE ONE THING I FORGOT TO 
47:57 - MENTION, BECAUSE IT TAKES A 
WHILE TO FINISH THIS RUN, IN 
48:00 - SPELL, THERE'S A PLACE WE CAN 
SET NOTIFICATIONS SO IT WILL 
48:03 - SEND EMAILS WHEN THIS RUN TAKES 
TOO LONG OR IT COSTS TOO MUCH 
48:09 - MONEY.
SO ON MY SPELL ACCOUNT, IF I GO 
48:13 - TO SETTING, AND THE 
NOTIFICATIONS HERE, I CAN SET 
48:17 - SOME, LIKE, EMAIL NOTIFICATIONS 
SAYING, EMAIL ME IF THE RUN 
48:26 - EXCEEDS $20, THINGS LIKE THIS, 
IN CASE THE RUN TAKES TOO LONG.
48:34 - SO WE CAN DO THIS.
AND ALSO, IF YOU ARE CURIOUS 
48:39 - ABOUT THE VERSIONS OF PACKAGES 
AND FRAMEWORKS THAT WE HAVE IN 
48:45 - THE SPELL ENVIRONMENT, ONE THING
THAT WE CAN DO IS
48:52 - TO DO SPELL, RUN, PIP, PHRASE.
IT WILL LOG OUT ALL OF THOSE 
49:00 - INSTALL PACKAGES
49:03 - FOR US.
SO THIS IS A NEW RUN, TOO.
49:06 - SO WE WILL CAST THE SPELL
49:17 - 17.
49:22 - THIS IS FINISHED, THE RUN TIME 
IS 10 SECONDS AND WE CAN SEE THE
49:27 - PACKAGES, TENSORFLOW 1.10.1, 
THINGS LIKE THIS IF YOU ARE 
49:32 - CURIOUS ABOUT THE VERSIONS OF 
THE 
49:37 - FRAMEWORKS.
  YEAH, SO LET'S GO BACK TO SEE 
49:45 - HOW DID OUR RUN IS DOING.
SO THIS IS THE RUN THAT I JUST 
49:48 - STARTED FOR TRAINING.
IT HAS BEEN RUNNING FOR THREE
49:58 - MINUTES, AND IT IS STILL 
50:07 - RUNNING.
50:15 - IT WILL TAKE ABOUT TWO HOURS TO 
FINISH, BUT I HAVE A COMPLETE 
50:19 - ONE, WHICH IS RUN 14.  AND RUN 
14 TAKES TWO HOURS AND 6 MINUTES
50:23 - TO FINISH, BUT HERE I TRAINED 
THE -- ANOTHER SPELL IMAGE, SEE 
50:31 - I HAD THIS EXACTLY THE SAME RUN.
I TRAINED THIS MODEL ON THIS 
50:42 - LOTUS IMAGE.
AND THIS IS THE OUTPUT OF THIS 
50:46 - RUN.
SO WHEN WE'RE WAITING FOR OUR 
50:51 - RUN 16 TO FINISH, WE CAN USE 
THIS RUN 14.  THIS RUN 14 
50:57 - OUTPUTS A NEW FOLDER CALLED CKPT
CHECKPOINT.  IF WE OPEN THIS 
51:02 - FOLDER, WE CAN SEE THERE ARE, 
LET ME MAKE THIS BIGGER.
51:08 - IF WE OPEN THIS CKPT FOLDER, IF 
EVERYTHING GOES WELL, WE SHOULD 
51:14 - BE ABLE TO SEE FOUR FILES IN 
THIS FOLDER.
51:18 - THEY ARE 
51:26 - CHECKPOINTS.DATA.INDEX.META.
THIS IS A FORMAT OF TENSORFLOW'S
51:30 - SAVED MODEL.  THIS .META STORES 
THE GRAPH
51:41 - INFORMATION AND THIS .DATA FILE 
HERE STORES THE VARIABLE OF THE 
51:48 - INFORMATION INSIDE OF THE GRAPH,
AND THIS .INDEX IDENTIFIES THE 
51:52 - CHECKPOINT, AND THIS CHECKPOINT 
FILE ONLY TELLS US THE MODEL 
51:58 - PATH.  BUT FOR THE NEXT STEP, WE
ARE GOING TO COPY THOSE FOLDERS 
52:04 - BACK TO OUR
52:13 - LOCAL COMPUTER.
SO WE CAN USE SPELL.LS TO LIST 
52:17 - ALL OF THE OUTPUTS FOR US.
SO I'M GOING TO DO THIS SPELL.LS
52:32 - RUNS.
AND THE RUN NUMBER IS 
52:39 - 114, THE COMPLETED TRAINING RUN.
SO IF WE DO THIS, SPELL WOULD 
52:43 - TELL US, OH, THE OUTPUT IS A 
FOLDER CALLED CKPT.
52:49 - SO I ALSO WANTED TO SEE WHAT IS 
INSIDE OF CKPT SO I CAN DO SPELL
52:54 - LS 
52:59 - RUNS/14CKPT.
AND THEN IT LISTS ALL OF THE 
53:02 - FOUR FILES THAT WE SAW ON THE 
SPELL WEBSITE, AND WHAT WE'RE 
53:06 - GOING TO DO IS WE WANT TO COPY 
AND PASTE ALL OF THOSE -- TO 
53:10 - COPY ALL OF THE FILES BACK.
SO I AM GOING TO CREATE A
53:17 - NEW
53:21 - FOLDER CALLED SPELL MODEL.
AND THEN I'M GOING TO GO INSIDE 
53:29 - TO THE MODEL AND THEN HERE, I'M 
GOING TO COPY ALL OF THOSE FOUR
53:38 - FILES.
AND THE RUN NUMBER, AGAIN, IS 
53:49 - 14.
53:53 - SO WE HIT ENTER, AND WE WERE 
COOPYING  -- COPYING THIS
54:07 - FILE.
>> SHORT INTERMISSION, 
54:12 - EVERYBODY.  WE KNOW THAT TWO 
HALF HOURS HAVE PASSED.
54:17 - WE'RE
54:21 - GOOD,
54:24 - WE'RE GOOD.
  IT IS A LITTLE BIT LESS THAN 
54:26 - AN HOUR, BECAUSE THE CAMERA 
STARTED BEFORE WE STARTED.  AND 
54:30 - IF YOU ARE WONDERING IF THIS IS 
LIVE -- PEOPLE ARE LIKE, IS THIS
54:39 - LIVE?
SO THIS IS FINISHED.  WE HAVE 
54:42 - SUCCESSFULLY COPIED ALL OF THE 
FOUR FILES, WHICH IS THE MODEL, 
54:46 - WHICH IS A TENSORFLOW SAVED 
MODEL BACK TO OUR LOCAL 
54:54 - COMPUTER.
SO WE CREATED A RUN FOLDER 
54:57 - INSIDE OF THE GITHUB REPO
55:08 - IS FINE.
IF WE LIST THE FILES, WE CAN SEE
55:13 - THE FILES ARE ON OUR LOCAL 
MACHINE.  SO THIS IS HOW WE CAN 
55:16 - GET THE TRAINED MODEL BACK FROM 
SPELL'S REMOTE MACHINE.
55:24 - AND ACTUALLY, WE CAN OPEN THAT 
TO SEE WHAT DO
55:32 - THEY LOOK LIKE.  
I'M GOING
55:37 - TO THAT DIRECTORY.  I JUST 
CREATED THIS NEW FOLDER CALLED 
55:42 - SPELL MODEL.  I'M GOING TO DRAG 
THIS MODEL OUT TO THE 
55:49 - DESKTOP.
AND, AS WE CAN SEE, WE HAVE FOUR
55:54 - FILES.  THIS IS THE FORMAT OF 
THE TENSORFLOW SAVED MODEL.  IF 
55:59 - WE OPEN THIS
56:05 - CHECKPOINT FILE, FOR  THERE ARE 
ONLY TWO LINES IN THIS FILE.  IT
56:10 - TELLS USH  US THE MODEL 
CHECKPOINT PATH IS .CKPT. 
56:18 - THIS IS IMPORTANT INFORMATION, 
BECAUSE WE ARE GOING TO USE THIS
56:20 - PATH FOR OUR NEXT STEP.
  SO JUST REMEMBER THE MODEL 
56:25 - CHECKPOINT PATH IS THIS.
56:33 - OKAY.
SO FAR, WE SET UP THE 
56:35 - ENVIRONMENT, WE DOWNLOADED THE 
DATASET, WE TRAINED THE MODEL 
56:43 - WITH THE STYLE PYTHON SCRIPT, WE
COPIED OUR TRAINED MODEL BACK TO
56:46 - OUR LOCAL COMPUTER, AND THEN THE
LAST STEP IS TO CONVERT THE 
56:52 - MODEL TO A FORMAT THAT WE CAN 
USE IN TENSORFLOW.JS AND ML5.JS.
56:59 - OKAY, LET'S DO THIS. AND BY THE 
WAY, THIS IS THE FOLDER -- THIS 
57:05 - IS THE IS THE TRAINED MODEL THAT
WE GOT ON THE
57:11 - DESKTOP.
57:15 - OKAY, SO IF I GO BACK TO MY OLD 
57:22 - DIRECTORY, WHICH IS 
57:29 - LIVESTREAM HERE,
57:34 - WE'RE GOING TO USE THE SCRIPTS 
THAT IS FROM FAST STYLE
57:46 - TRANSFER DEEP LEARN.JS.  THIS IS
THE FORMAL NAME FOR TENSORFLOW 
57:52 - JS.  THIS REPO
57:58 - IS BUILT BY GIRO NAKANO, HIS 
WORK IS AMAZING.  HE RECENTLY 
58:05 - CONTRIBUTED A NEW MODEL, SKETCH 
58:12 - RN, AS WELL.  YOU SHOULD CHECK 
OUT HIS WORK.  WE'RE GOING TO 
58:16 - USE HIS SCRIPTS TO CONVERT THE 
TENSORFLOW MODEL INTO A MODEL WE
58:19 - CAN USE IN
58:26 - ML5.JS.
THE WAY WE ARE GOING TO DO IT IS
58:31 - TO CLONE HIS GITHUB
58:42 - REPO.
58:55 - AND THEN WE WILL GO INSIDE THE 
GITHUB REPO.  AND WE'RE GOING TO
58:59 - PUT ALL OF THE CHECK POINT FILES
THAT WE GOT INTO ONE OF THE FOLD
59:08 - OF THE FOLDERS INSIDE OF THIS
59:14 - GITHUB REPO.
I HAVE TO GO TO FAST STYLE 
59:19 - TRANSFER.DEEPLEARN.JS AND GO TO
59:28 - SOURCE.
THIS IS NOT THE SOURCE, JUST THE
59:31 - ROOT DIRECTORY.  SO I'M GOING TO
DRAG, I WILL COPY THIS FOLDER TO
59:36 - THE ROOT DIRECTORY OF THIS 
GITHUB REPO.
59:40 - AND I JUST DID, IT IS HERE.
AND THEN WE CAN RUN -- WE'RE 
59:47 - GOING TO RUN TWO PYTHON IT  
SCRIPTS.  WE WILL DUMP THE EXEC 
59:54 - CHECK POINTS TO CON RURAL  -- 
CONVERT THE FORMATS.  SO WE WILL
60:00 - COPY AND PASTE
60:08 - THIS COMMAND.
SO I WILL ADD THIS IN THE CODE 
60:12 - EDITOR FIRST.  SO THIS IS IN THE
PYTHON SCRIPT, I WILL RUN THIS 
60:17 - SCRIPT, AND THE OUTPUT DIRECTORY
IS SOURCE/CHECKPOINTS/OUR FOLDER
60:23 - NAME, WHICH IS SPELL MODEL.
AND THEN THE CHECKPOINT FILE IS 
60:30 - IN THE ROOT DIRECTORY OF THE 
60:36 - GITHUB REPO.
SO IT IS THE SLASH SPELL
60:45 - MODEL, SLASH CKPT.  THIS IS THE 
PATH TO OUR MODEL WHICH WE SAW 
60:50 - BEFORE IN THIS CHECKPOINT FILE. 
THIS IS THE PATH TO OUR 
60:58 - CHECKPOINT.
THAT'S WHY WE HAVE THIS NAME 
61:01 - HERE.  OKAY.
SO NOW I'M JUST GOING TO
61:09 - RUN 
61:12 - THIS SCRIPT.
AND THEN YOU CAN SEE IT IS DONE.
61:15 - SO IT ACTUALLY CREATED ONE 
CHECKPOINT FILE, AND 49 OTHER 
61:23 - FILES.
AND WE CAN GO TO -- WE CAN GO 
61:27 - THERE TO SEE WHAT IS THE OUTPUT.
THE OUTPUT
61:34 - LIVES IN SOURCE CHECK POINTS, 
AND THIS IS OUR MODEL.
61:39 - AND YOU CAN SEE THAT WE GOT THE 
MANIFEST JSON.  THIS TELLS US 
61:46 - THE STRUCTURE OF
61:49 - THE GRAPH.  AND ALSO 49 FILES 
THAT TELLS US ALL THE VALUES -- 
61:57 - ALL THE VARIABLES IN EACH LAYER.
AND THIS IS THE FORMAT THAT WE 
62:04 - CAN USE IN ML5.JS AND 
TENSORFLOW.JS.
62:07 - OKAY.
SO NOW I'M JUST GOING TO COPY 
62:11 - THIS MODEL BACK TO MY
62:17 - DESKTOP.  
I WILL RENAME IT AND DRAG IT TO 
62:19 - MY 
62:29 - DESKTOP.
62:35 - SO FAR, WE GOT TWO MODELS.  WE 
HAVE A TENSORFLOW SAVED MODEL 
62:44 - THAT CAN WORK IN TENSORFLOW, OF 
COURSE.
62:45 - AND THEN WE ALSO GOT ANOTHER 
MODEL THAT CAN WORK IN ML5.JS 
62:50 - AND TENSORFLOW.JS.
SO THIS IS WHAT WE
62:56 - GOT TODAY.
AND THE NEXT STEP IS TO RUN THIS
63:00 - MODEL IN ML5.JS.
HERE ARE TWO 
63:06 - DEMOES, ON THE ML5 WEBSITE, AND 
WE ALSO HAVE THIS DEMO HERE THAT
63:14 - YOU CAN SELECT A DIFFERENT 
STYLE, YOU CAN UPLOAD THE IMAGE,
63:20 - YOU CAN CHANGE YOUR 
63:29 - STYLE HERE.
AND YOU CAN UPLOAD THE IMAGE, 
63:33 - I'M GOING TO UPLOAD A
63:44 - PHOTO.
63:49 - THIS IS A PHOTO OF A CAT AND 
CLICK ON TRANSFER MY IMAGE, THIS
63:54 - IS THE TRANSFERRED CAT.  YOU CAN
ALSO PLAY IT WITH DIFFERENT 
63:58 - STYLES, TOO.
OH, I LIKE THIS
64:05 - ONE.
AND ALSO, YOU CAN USE WEBCAM.
64:09 - ANDTHEN YOU  -- AND THEN YOU CAN
CLICK THIS BUTTON AND SEE THE 
64:20 - TRANSFERRED VERSION OF THE 
IMAGES FROM THE
64:30 - WEB CAM.
SO YOU CAN GO THERE AND CHECK 
64:33 - THIS DEMO OUT.  BUT NEXT, WE'RE 
JUST GOING TO RUN THIS MODEL IN 
64:41 - OUR P5 -- IN OUR ML5 
64:54 - DEMO.
SO WE CAN DO THIS
65:04 - QUICKLY.
HERE, WE ARE JUST GOING TO CLONE
65:06 - THIS GITHUB
65:15 - REPO.
65:28 - AND THEN WE WILL GO INSIDE TO 
THAT FOLDER, 
65:43 - STYLETRANSFER_SPELL AND WE WILL 
PUT THIS INSIDE OF THE CODE 
65:50 - EDITOR.
AND IN THIS, IN ITS MODELS 
65:57 - FOLDER, THERE IS ONE MODEL 
THERE.  WE ARE GOING TO ADD OUR 
66:00 - NEW MODELS INSIDE OF THIS 
FOLDER.
66:04 - SO WHAT WE'RE GOING TO DO IS TO 
FIND THAT GITHUB
66:17 - REPO.
AND INSIDE OF MODELS, I'M GOING 
66:22 - TO COPY AND PASTE THIS MODEL IN.
I'M GOING TO  RENAME IT TO 
66:29 - LOTUS, BECAUSE THE NAME OF THE 
ART IS CALLED 
66:38 - LOTUS.
AND NOW WE GO BACK TO THE CODE 
66:40 - EDITOR, WE HAVE A NEW MODEL 
HERE, AND WE CAN TAKE A LOOK AT 
66:45 - WHAT IS INSIDE OF THE 
INDEX.HTML.
66:49 - SO TO RUN THIS -- TO BUILD THIS 
DEMO, WE NEED P5 JS MAINLY TO 
66:57 - GET THE VADEIO FROM THE WEB CAM 
AND ALSO WE NEED A P5 LIBRARY TO
67:05 - CREATE DOM ELEMENTS FOR US, AND 
THEN IN THE END WE WILL USE THE 
67:14 - ML5.JS LIBRARY.  WE HAVE STYLES 
HERE, WE CAN IGNORE THEM FOR 
67:18 - NOW, AND WE ARE RUNNING THE 
SKETCH.JS SCRIPT HERE.  AND IN 
67:22 - THE BODY, WE HAVE A HEADER TAG, 
WE HAVE A P TAG, AND WE ARE
67:33 - LINKING THE SOURCE OF THE IMAGE,
THE ART STYLE IMAGE, AND ALSO WE
67:39 - ARE SHOWING THE ART IMAGE.  BUT 
I'M GOING
67:46 - TO CHANGE THIS 
67:50 - IMAGE TO THE LOTUS IMAGE.  THIS 
IS A PRE-TRAINED MODEL.
67:57 - I'M GOING TO ADD THIS IMAGE INTO
THIS 
68:05 - IMAGE FOLDER.
SO HERE, WE CAN SEE 
68:09 - IMAGES/LOTUS.  SO WE'RE GOING TO
SHOW THAT IMAGE, AND IN THE END,
68:13 - WE HAVE A CONTAINER TO CONTAIN 
OUR CANVAS.  AND NOW WE CAN GO 
68:22 - TO THE INDEX TERMINAL, AND THEN 
WE CAN GO TO SKETCH.JS.  I'M 
68:26 - JUST GOING TO DELETE ALL THE 
CODE HERE.  SO WE CAN DO IT 
68:35 - OURSELVES TOGETHER.
SO TO BUILD THIS DEMO, WE NEED 
68:39 - THREE THINGS.
SO WE NEED A VIDEO TO GET THE 
68:43 - IMAGES FROM OUR WEB CAM, SO WE 
HAVE VIDEO, AND WE ALSO NEED THE
68:52 - STYLE TRANSFER FROM ML5 LIBRARY 
TO ALLOW US TO TRANSFER IMAGES. 
68:57 - SO I'M GOING TO HAVE ANOTHER 
VARIABLE CALLED STYLE.
69:01 - AND
69:06 - IN THE END WE WILL HOLD THE 
OUTPUT 
69:17 - IMAGE.
69:21 - AND IN P5, THERE'S A SET-UP 
FUNCTION THAT IS CALLED ONCE IN 
69:25 - THE BEGINNING.  IN THIS SET UP 
FUNCTION, WE ARE GOING TO USE 
69:29 - P5.JS TO CREATE
69:34 - A CANVAS.
THAT IS 320
69:41 - WIDE AND 250 AS ITS
69:47 - HEIGHT.
AND WE'RE GOING TO USE THIS P5 
69:49 - DOWNLOAD LIBRARY TO PUT THE 
CANVAS ELEMENT INSIDE OF DIF 
69:54 - ELEMENT WHOSE I IT D
69:58 - IS CANVAS CONTAINER.
OKAY.
70:01 - AND WE CREATE A CANVAS, THAT IS 
IT.
70:03 - AND THEN WE'RE GOING TO CREATE 
THE VIDEO.
70:08 - SO WE HAVE THIS FUNCTION CALLED 
CREATE CAPTURE.  AND IF WE CAST 
70:17 - THE UPPER-CASE VIDEO, IT WILL 
TRY TO GUESS THE VIDEO FROM YOUR
70:20 - WEB CAM.  AND WE ARE ALSO GOING 
TO SAVE THE VIDEO HEIGHT, 
70:28 - BECAUSE WE DON'T NEED THE ORG 
VIDEO, BUT THE TRANSFERRED 
70:30 - VIDEO.  SO WE'RE ALSO GOING TO 
70:42 - SAY VIDEO HEIGHT.  WE ARE ALSO 
GOING TO CREATE THE RESULT 
70:47 - IMAGE, P5 DOWNLOAD LIBRARY HAS 
THIS -- I WANT TO MAKE IT A 
70:56 - LITTLE BIT BETTER.
WE'RE GOING TO CREATE THIS 
70:58 - RESULT 
71:02 - IMAGE.
TO CREATE IMG, PASS IT INTO THE 
71:06 - STRING THERE.  AND WE'RE ALSO 
GOING TO HIDE THIS 
71:13 - IMAGE.  WE'RE GOING TO DRAW THE 
IMAGE ON THE CANVAS, SO WE DON'T
71:16 - REALLY NEED THIS IMAGE.  IN THE 
END, WE'RE GOING TO USE ML5 TO 
71:20 - GET THE STYLE TRANSFER MODEL, 
RIGHT? SO STYLE EQUALS TRUE,
71:32 - ML5.STYLE TRANSFER, AND WE GOING
TO PASS IN THE PATH TO THE 
71:36 - MODEL.  SO 
71:41 - ITS 
71:50 - MODELS/LOTUS.
AND THEN WE CAN ALSO TELL THE 
71:52 - STYLE TRANSFER TO LOOK FOR 
INPUTS FROM OUR VIDEO.  SO WE 
71:55 - ARE PASSING THE VIDEO, AND ALSO 
WE HAVE A CALLBACK
72:02 - FUNCTION SAYING, OH, IF YOU 
FINISH THIS MODEL, LET ME KNOW. 
72:06 - THIS IS A CALLBACK FUNCTION 
CALLED MODEL LOTUS.  WE ARE 
72:10 - GOING TO DEFINE THIS FUNCTIONAL.
THIS IS A CALLBACK FUNCTION.
72:15 - SO WE'RE GOING TO DO FUNCTION, 
72:20 - MODEL LOADED, AND ONCE THE MODEL
IS LOADED, WE CAN JUST ASK THE 
72:24 - STYLE TRANSFER TO TRANSFER 
SOMETHING.  BUT, AT FIRST, I 
72:27 - WANT TO CHANGE THE TEXT ON THIS 
P TAGGING TO MODEL LOADED JUST 
72:32 - TO LET PEOPLE KNOW THAT THE 
MODEL IS GOOD TO GO.
72:38 - SO I'M GOING TO
72:44 - SELECT AN ELEMENT.
THIS IS A FUNCTION FROM P5 DOM 
72:51 - LIBRARY TO SELECT AN HTML 
ELEMENT FROM THE DOM.
72:55 - THE ID STATUS, AND THEN I WANT 
TO CHANGE IT, THE HTML TO MODEL 
73:04 - LOADED.
OKAY.
73:06 - AND THEN ONCE THE MODEL IS 
LOADED, I'M GOING TO ASK THE 
73:09 - STYLE TO TRANSFER SOMETHING.
SO I'M GOING TO SAY 
73:14 - STYLE.TRANSFER.
AND I'M GOING TO PASS IN ANOTHER
73:18 - FUNCTION
73:23 - CALLED RESULT.  THIS IS A 
CALLBACK FUNCTION, CONSTITUENCY 
73:26 - THE MODEL HAS ANYTHING BACK, THE
FUNCTION IS CALLED.  SO WE WILL 
73:29 - MAKE UP THIS FUNCTION.  
FUNCTION.RESULT, IT WILL GET TWO
73:33 - THINGS.  ONE IS IF THERE IS ANY 
ERROR DURING THIS PROCESS, IT 
73:38 - WILL PUT THE ERROR IN THIS ERROR
VARIABLE.  AND ANOTHER IS THE 
73:45 - OUTPUT, THE IMAGE.  AND ONCE WE 
GOT THE RESULT,
73:51 - WE ARE GOING TO GIVE
73:56 - THE RESULT IMAGE AN ATTRIBUTE TO
HOLD THIS IMAGE TO THE SOURCE.
74:00 - SO WE'RE GOING TO SAVE THE 
RESULT 
74:10 - IMAGE.ATTRIBUTE.  WE'RE GOING TO
COPY THE SOURCE OF THIS 
74:14 - IMAGE.SOURCE TO OUR RESULT 
IMAGE.  AND AFTER WE GOT THE 
74:18 - RESULT, WE WANT TO CALL THIS 
STYLE.TRANSFER AGAIN OVER AND 
74:27 - OVER TO SEE -- TO SEE MORE 
RESULTS.
74:29 - SO WE'RE GOING TO DO 
STYLE.TRANSFER RESULT AGAIN.
74:34 - AND ONE THING IS MISSING, 
BECAUSE WE DID UPDATE THE SOURCE
74:39 - FOR RESULT IMAGE, BUT THIS 
RESULT IMAGE IS HIDDEN.
74:43 - SO WE CANNOT SEE IT.
AND P5 HAS A FUNCTION CALLED 
74:50 - DRAW.  AND IT WILL RUN OVER AND 
OVER AGAIN IN THE DRAW FUNCTION,
74:53 - WE'RE GOING TO DRAW THIS RESULT 
IMAGE.
74:58 - SO I'M JUST GOING TO SAY IMAGE, 
LOWER CASE I. 
75:07 - IMAGE RESULT, ING, FROM ORIGIN 
0-0, AND THE SIZE IS 320 TO 240.
75:17 - THAT'S
75:26 - IT.
75:43 - WE NEED TO DO PYTHON
75:49 - MINUS M .SERVER.  AND IT STARTS 
THE SERVER AT LOCAL HOST 8000.  
75:55 - SO NOW IF I GO TO THE
76:05 - LOCAL HOST,
76:15 - WE SHOULD BE ABLE TO SEE 
SOMETHING.
76:17 - SO THE MODEL IS LOADED, THIS IS 
76:25 - THE STYLE SOURCE.
AND AS YOU CAN SEE, THIS STYLE 
76:28 - HAS MORE COLORS.  SO THE RESULT 
IS A LITTLE BIT BETTER THAN THE
76:39 - PREVIOUS MODEL.
THIS IS THE DEMO THAT WE
76:49 - BUILT TODAY.
HE'S  THESE ARE THE RESOURCES WE
76:56 - USED, THIS IS GATIS'S PAPER FROM
2015, THIS IS THE PAPER, WHAT 
77:03 - NEURAL NETWORKS SEES, THIS STYLE
TUTORIAL FROM SPELL, AND FROM 
77:09 - ML5.JS, IT HAS A STYLE TUTORIAL 
MADE BY CHRIS.  AND I RECOMMEND 
77:13 - YOU TO CHECK THAT OUT, TOO.
AND THIS IS THE LINK TO ML5.JS, 
77:18 - AND I ALSO WANT TO RECOMMEND 
THIS YOUTUBE CHANNEL BECAUSE I 
77:23 - LEARNED A LOT OF MACHINE 
LEARNING PAPERS FROM IT.
77:27 - AND I WANT TO GIVE CREDIT TO 
THOSE TWO PROJECT CREATORS.  WE 
77:34 - USED THE TENSORFLOW 
IMPLEMENTATION OF THE FAST STYLE
77:38 - TRANSFER MADE BY LOGAN INGSTROM 
AND THE SCRIPT TO CONVERT THE 
77:46 - TENSORFLOW SAVED MODEL TO A 
FORMAT WE CAN USE IN 
77:50 - TENSORFLOW.JS AND ML5.JS.  IT IS
MADE BY NAKANO.
77:57 - AND, TO WRAP UP TODAY, WE 
TRAINED A STYLE TRANSFER MODEL 
78:04 - WITH SPELL AND WE WILL RUN THIS 
78:09 - MODEL WITH ML5.JN THE BROWSER, 
YOU CAN CHECK OUT THE MODEL 
78:12 - HERE.  AND THAT'S IT.  I HOPE 
YOU LIKED THE VIDEO. AND IF YOU 
78:17 - RUN INTO ANY ISSU SHEN YOU ARE 
TRAINING OR RUNNING THE MODEL, 
78:24 - YOU CAN LEAVE COMMENTS ON THE 
GITHUB.  YEP.  
78:27 - >> COME OVER HERE, SO PEOPLE ARE
ASKING SOME INTERESTING 
78:31 - QUESTIONS.  AND
78:39 - I'M GOING
78:44 - TO DO A SHORT Q&A SESSION AND WE
WILL MONITOR AS WE ARE TALKING A
78:53 - LITTLE BIT.  SO ONE THING THAT 
SOMEBODY ASKED THAT IS 
78:55 - INTERESTING, WE ARE RUNNING SLOW
IN THE BROWSER, IT IS AMAZING 
78:58 - THAT IT RUNSSS AT ALL.  PEOPLE 
ASKED WHAT PERFORMANCE 
79:04 - CONSIDERATIONS ARE THERE, CAN 
THIS ACTUALLY RUN ON A MOBILE 
79:10 - PHONE?
AND HOW FAR DID YOU PUSH THOSE 
79:13 - EXPERIMENTS? 
>> FOR NOW, IT WORKS WELL IN 
79:17 - CHROME.
BUT I KNOW THAT TENSORFLOW.JS 
79:26 - SUPPORTS IOS AND OTHER OS.  BUT 
IT HAS SLIGHTLY DIFFERENT 
79:30 - RESULTS A IN DIFFERENT OS.  SO 
I'M NOT SURE.  
79:33 - >> RIGHT. 
>> BUT, YOU KNOW, MY EXPERIENCE 
79:37 - DOING THIS STUFF OVER THE LAST 
10-PLUS YEARS, THE THING THAT 
79:40 - YOU ARE DOING NOW, YOU KNOW, IN 
A COUPLE YEARS THAT WILL WORK ON
79:44 - THE SMALLER DEVICES.  AND THEN 
THE NEWER THING WILL BE SUPER 
79:47 - FAST, AND THAT WILL WORK ON THE 
SMALLER DEVICES -- THIS STUFF IS
79:51 - ALL VERY CYCLICAL AND, IN FACT, 
IF IT RUNS IN A BROWSER.  AND 
79:57 - AGAIN, TO BE CLEAR, THE TRAINING
PROCESS HERE IS A THING THAT YOU
80:01 - CANNOT EASILY DO IN THE BROWSER.
THAT IS A THING THAT TOOK A VERY
80:04 - LONG TIME.  YOU CAN DO IT ON 
YOUR OWN COMPUTER, YOU CAN BUY A
80:08 - GPU, BUT USING A CLOUD COMPUTING
SERVICE, WHICH SPELL IS ONE OF 
80:12 - MANY OPTIONS, IS AN -- AND SPELL
MAKES IT SUPER EASY BECAUSE YOU 
80:16 - CAN JUST DO IT FOR THE COMMAND 
LINE INTERFACE RIGHT FROM YOUR 
80:21 - COMPUTER.
THERE WAS ANOTHER QUESTION, I 
80:23 - DON'T KNOW IF YOU HAVE THE 
ANSWER TO THIS, BECAUSE I DON'T.
80:26 - PEOPLE ARE CURIOUS, ONE THING I 
TALKED A LITTLE BIT ABOUT IN 
80:30 - MORE BEGINNING LEVEL MACHINE 
LEARNING TUTORIALS IS A LOSS 
80:34 - FUNCTION.
WHAT IS THE -- DO YOU KNOW HOW 
80:36 - THE STYLE TRANSFER TRAINING 
PROCESS WORKS? LIKE HOW DOES IT 
80:39 - FIGURE OUT, LIKE, HOW WELL IT IS
DOING? 
80:42 - >> IT DOES.  SO, FOR FAST STYLE 
TRANSFER, IT HAS AN 
80:49 - IMAGEGE TRANSFORMATION NETWORK 
AND A LOSS CALCULATION NETWORK. 
80:54 - IT KIND OF -- I THINK I NEED TO 
CHECK THE PAPER IN 
81:03 - DETAIL, BUT IT CALCULATES THE 
LOSS AND THEN GOES BACK TO 
81:06 - MINIMIZE THE LOSS FUNCTION. 
>> I THINK WE WRAP
81:15 - UP.  THIS WAS AN HOUR AND 20
81:21 - MINUTES, I'M EXCITED TO SEE HOW 
REPLICABLE THIS IS FOR YOU.  CAN
81:30 - YOU CLONE THIS PYTHON CODE, CAN 
YOU PICK YOUR OWN STYLE IMAGE, 
81:34 - AND CAN YOU THEN RUN IT WITH ML5
IN YOUR WEB CAM AND STYLE YOUR 
81:40 - OWN FACE FROM THE WEB CAM? IF 
YOU ARE ABLE TO FOLLOW THIS AND 
81:44 - DO THIS, THIS WAS SUGGESTED IN 
THE CODE TRAINING SLACK CHANNEL,
81:50 - WHICH SLACK CHANNEL FOR PATRONS 
OR MEMBERS.  USE THE HASHTAG 
81:57 - THIS.STYLE.  AND PEOPLE ARE 
COMMENTING THAT YOU ARE FOR 
82:00 - GETTING THE SEMICOLONS, WHICH 
YOU DON'T NEED.  BUT THAT IS 
82:03 - FUNNY, I WAS -- THIS IS THE 
THING I ALWAYS FORGET. 
82:07 - >> YEAH, I USED SEMICOLONS ALL 
THE TIME UNTIL A COLLEAGUE SAID 
82:17 - USUALLY USE THAT IF IT IS NOT 
CLEAR, AND THEN I SWITCHED TO 
82:19 - NOT.
SO I'M GOOD WITH BOTH. 
82:21 - >> WE COULD BE HERE FOR THE NEXT
THREE HOURS DISCUSSING IF YOU 
82:25 - SHOULD USE THEM OR NOT.  SO 
THIS.STYLE, YOU CAN SHARE THINGS
82:29 - YOU MAKE ON TWITTER WITH THAT 
HASHTAG, WHATEVER SOCIAL MEDIA 
82:35 - YOU USE, THERE'S A COMMENTS 
SECTION ONCE THE VIDEO IS 
82:39 - ARCHIVED.  IN ADDITION, I WILL 
HOPEFULLY CREATE A PAGE ON THE 
82:47 - CODING TRAIN.COM WITH THE LINKS 
THAT YINING HAS SHOWN YOU HERE. 
82:50 - AND WE WILL HAVE ALL OF THE 
LINKS AND THE RESOURCES AND ALL 
82:54 - THE ARTISTS AND EVERYTHING, WE 
WILL UPDATE THE VIDEO 
82:57 - DESCRIPTION FOR THIS ARCHIVE FOR
THE ARCHIVED VERSION OF THIS 
82:59 - LIVESTREAM AFTERWARDS AS WELL.
THIS.STYLE -- I'M LOOKING TO SEE
83:06 - IF THERE ARE ANY URGENT OR 
BURNING QUESTIONS.
83:11 - WE CAN WAVE GOODBYE FROM 
83:19 - THIS.STYLE.
OKAY, BUT AND THEN THE ONLY WAY 
83:21 - -- OH, GET THE SLIDESISM
83:29 - WHATEVER MATERIALS WE CAN 
PUBLISH, WE WILL PUBLISH AND 
83:32 - SHARE THE SLIDES AS WELL.  AND I
WANT TO MENTION, CAN I GO TO 
83:35 - YOUR BROWSER HERE?
IF I GO TO YOUTUBE/CODINGTRAIN, 
83:43 - AND HOPEFULLY THIS IS NOT GOING 
TO -- 
83:47 - >> YOU CAN CLOSE THIS. 
>> I DON'T WANT TO CLOSE IT.  IT
83:49 - IS SO WONDERFUL.  YEAH, I WILL 
CLOSE IT.
83:53 - SO YOU CAN SEE THAT NEXT UP, 
SCHEDULED FOR, WHOOPS, SCHEDULED
84:00 - FOR OCTOBER 5, I THINK WE ARE 
GOING TO DO IT EARLIER.  IT SAYS
84:06 - 8:00AM PACIFIC TIME, OR 11:00 
EASTERN, WE WILL DO ANOTHER 
84:11 - TUTORIAL WITH ALL OF THE
84:18 - SAME ELEMENTS.  THIS IS WITH ALL
THE SAME ELEMENTS, ML5, SPELL, 
84:25 - AND TENSORFLOW TO TRAIN 
SOMETHING CALLED AN LSTM, A LONG
84:29 - SHORT TERM MEMORY NETWORK.  THIS
IS A KIND OF NEURAL NETWORK THAT
84:32 - IS WELL-SUITED FOR SEQUENCES.
SO IF YOU WANTED TO TRAIN A 
84:38 - MODEL TO KNOW ABOUT HOW 
CHARACTERS APPEAR NEXT TO EACH 
84:41 - OTHER IN TEXT OR MUSICAL NOTES 
APPEAR NEXT TO EACH OTHER IN A 
84:46 - SONG, OR HOW STROKES APPEAR IN 
SEQUENCE IN
84:52 - A DRAWING, THERE ARE SO MANY 
POSSIBILITIES.  WE WILL SHOW YOU
84:56 - HOW TO TAKE A TEXT FROM YOUR 
FAVORITE AUTHOR AND TRAIN A 
85:00 - MACHINE LEARNING MODEL ON 
SPELL.RUNCLOUD COMPUTING SERVICE
85:03 - TO DOWNLOAD THE MODEL AND THEN 
HAVE THE MODEL GENERATE NEW TEXT
85:09 - IN THE STYLE OF THAT AUTHOR FROM
THE BROWSER.  THAT IS TWO WEEKS 
85:14 - FROM TODAY, AND NEXT FRIDAY I 
85:23 - WILL BE BACK.
AND YEAH, SO STAY
85:30 - TUNED.
CERTAIN THINGS THAT YOU CANNOT 
85:32 - FOLLOW TODAY, I DID WORKFLOW 
VIDEOS.  AND YOU NEED THE EXACT 
85:40 - SAME STUFF, SO IF YOU ARE 
RUNNING GET, USING VISUAL STUDIO
85:44 - CODE, RUNNING STUFF FROM YOUR 
TERMINAL, AND I HAVE AN INTRO TO
85:48 - SPELL VIDEO.  SO A LOT OF YOU 
ARE LIKE, HOW DO I FIND SPELL 
85:53 - AGAIN? YOU CAN FIND THAT IN THE 
INTRO TO SPELL VIDEO.  I WILL 
85:57 - LINK TO THAT.
GREAT.
86:00 - I'M GOING TO GO, THIS IS THE 
AWKWARD
86:08 - PART, CJ WAS ANOTHER WONDERFUL 
YOUTUBE CHANNEL.  ALL OF THESE 
86:12 - THINGS 
86:15 - THAT YOU CAN DO IN OPEN 
BROADCAST VIDEO, PRESS A BUTTON 
86:18 - AND AN OUTRO VIDEO. 
>> THANK YOU FOR WATCHING, BYE. 
86:24 - >> THANK YOU, EVERYONE.  LOOK 
FORWARD TO HEARING FROM YOU IN 
86:34 - THE COMMENTS.  
>> THANK YOU TO SPELL, WHITE 
86:38 - COAT CAPTIONING, AND