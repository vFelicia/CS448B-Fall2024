00:16 - [Music]
00:23 - [Music]
00:31 - [Music]
00:35 - good evening and welcome to the coding
00:38 - train I'm your newscast coding
00:45 - newscaster Daniel chief bond and I have
00:50 - news to report
00:52 - javascript is a coding language that I
00:56 - use with much pain often all right I
01:00 - don't know that come through was anybody
01:04 - watching III was using the chair last
01:07 - two weeks ago I haven't been here for a
01:09 - couple weeks and I really felt like I
01:11 - was a newscaster no I didn't for
01:15 - parenting code but I heard a lot of time
01:17 - thinking about that little opening bit
01:18 - there I think maybe needs like writers
01:21 - and everything I know but it even the
01:24 - chat is like acknowledging anything here
01:27 - hmm
01:28 - yes I was so low because I've been
01:32 - having some back pain issues I'm doing
01:34 - much better now but two weeks ago I I
01:40 - require sitting in the chair do the
01:43 - coding challenge which was kind of nice
01:45 - the thing is this chair is very high but
01:48 - it's sort of broken I think it can go
01:49 - higher and I think there could be some
01:51 - value to using a chair every once in a
01:53 - while
01:53 - welcome how are you it it's not the
01:56 - evening where I am it is in fact the
01:57 - morning it is at 10:00 a.m. New York
01:58 - time welcome to the coding train today
02:00 - is Friday November 9th November is going
02:05 - to be one of my latest months I missed
02:09 - last week I don't even remember why oh
02:12 - yes I had to teach a workshop here at
02:14 - NYU on Fridays last Friday so I was not
02:17 - available to come do my livestream and
02:19 - then I'm here today but next Friday I'm
02:22 - excited to announce I won't be here on
02:24 - the livestream but I will be at if I
02:27 - could just find a web browser here
02:29 - thinker con-com so this is an event in
02:34 - Huntsville Alabama on November 17th from
02:36 - 6:00 to 10:00 p.m. I believe there are
02:38 - still some tickets available there are
02:39 - all sorts of like amazing people
02:41 - don't think I'm actually listed there
02:43 - which is fine but I will be there so if
02:47 - for some reason your happen to be in
02:49 - Huntsville Alabama I think your con next
02:52 - Saturday I think November 17th is a
02:54 - Saturday please say hello but I won't be
02:58 - live-streaming next Friday due to
02:59 - traveling to Huntsville Alabama all
03:04 - right so that's so then the week after
03:07 - that Friday I might be like gone after
03:13 - today for like weeks so I will try to
03:16 - make up with some extra content possibly
03:20 - in January and I will I am planning a
03:23 - holiday a end of Year holiday coding
03:26 - Train episode fundraiser for the
03:28 - processing foundation I will announce
03:30 - the date for that at some point soon I
03:33 - believe the super checked I like figure
03:35 - this out but I believe that I'm able to
03:37 - hook the super chat not right now donate
03:41 - yet hook it directly into the processing
03:44 - Foundation which is a United States
03:47 - tax-exempt Corporation so I am working
03:49 - on that I'm seeing all sorts of people
03:51 - saying hello in the chat and so now I
03:55 - turn to what I have a whole bunch of
04:02 - things I've been working on with the
04:04 - help of many other people and I'm kind
04:08 - of figure out what order to do this
04:10 - stuff in so let's think about this what
04:11 - what what am I going to do so first of
04:13 - all let let's go to the coding train
04:17 - calm and go to the last coding challenge
04:21 - I did which was coding challenge number
04:23 - 121 logo let me bring the okay
04:29 - logo and I'm gonna go click to the
04:32 - challenge and did we get we got a couple
04:34 - submissions here so let's look at a
04:36 - couple so so what I did in the last
04:39 - coding challenge is I built a very basic
04:41 - logo interpreter and if you're not
04:44 - familiar with logo it is
04:46 - a programming language designed in the
04:49 - 60s
04:50 - late 60s I believe I learned logo
04:53 - programming as a kid a little bit it's
04:55 - where you drive a turtle around the
04:57 - screen with commands like forward right
04:59 - left pen up pen down so I made a basic
05:03 - interpreter we can see it right here in
05:06 - the last coding challenge which just
05:09 - interpreted basic commands so you can
05:11 - see here forward 60 if I then say left
05:15 - 90 forward 10 you could say I can start
05:18 - to type commands and have those commands
05:20 - rendered here but I did not include the
05:23 - repeat command so that's what I'm going
05:25 - to do today now amazingly I don't know
05:29 - what to do about this I have I need a I
05:31 - I got to figure some stuff out but I
05:33 - posted the code to a github repository
05:36 - logo oh why did I put it here this is
05:39 - supposed to be what is wrong with me
05:42 - let's fix this this is supposed to be in
05:46 - the coding trains so transfer ownership
05:50 - logo and then I think it's just coding
05:53 - train I don't know why this is not there
05:55 - already let's transfer this repository
06:01 - sure whatever this is okay so I don't
06:08 - know why I didn't have that in the first
06:09 - place
06:10 - but now if I go to coding train logo
06:15 - let's see if it made it over yet okay so
06:18 - this is the repository for all that logo
06:21 - code that I built in the previous
06:22 - challenge and unbelievably there are 16
06:26 - pull requests with suggestions and
06:29 - design ideas for how to implement repeat
06:32 - and using like a recursive regular
06:33 - expression to unroll the repeat and all
06:36 - sorts of other amazing things and I
06:39 - encourage you to look through these
06:40 - maybe I can highlight a few of these I
06:42 - don't know how to manage this and I
06:45 - should be a person who knows how to
06:46 - manage something like this a lot of it
06:48 - right now is time a lot of it is like
06:51 - there are so many wonderful suggestions
06:52 - and pull requests here I can't how could
06:54 - I
06:54 - okay we pick just one so I need to
06:58 - figure out a mechanism of a way of
07:01 - managing the community better in terms
07:02 - of the open source aspects of the coding
07:05 - train stuff that aside let's go quickly
07:08 - take a look at the classic logo
07:13 - interpreter by Anurag Hazara so this
07:18 - looks like great so this you can see
07:20 - here is clearly an implementation that
07:23 - has repeat allowed so we can see this is
07:26 - very similar to what I did but already
07:28 - with repeat and a little bit more
07:29 - thoughtful interface stuff good work we
07:31 - can look here at the source code I
07:33 - tempted to look at how the repeat was
07:38 - implemented but I kind of have my own
07:40 - idea at the prep of how to do this so
07:42 - maybe I won't look at it right now next
07:45 - up let's look at this 3d 3d logo
07:49 - experiment by Dave briquette II
07:50 - apologies to Dave I'm mispronouncing the
07:53 - name let's take a look at this I'm you
07:55 - can see look that isn't that wild Wow
08:01 - this experiment is inspired by the
08:03 - coding tree breaking news I have a short
08:08 - one breaking news this experiment is
08:12 - inspired by Cody trains coding challenge
08:16 - over 121 it's a simple oh there goes
08:19 - that camera logo like experiment but in
08:29 - 3d with additional command up it's
08:32 - written in JavaScript in the language
08:34 - used by the users JavaScript rather than
08:36 - logo oh that's really interesting oh
08:38 - this would be enough Oh fascinating
08:41 - it didn't occur to me to do it this way
08:44 - look at this this is amazing and then
08:47 - like there's a bunch of different Wow
08:49 - and I wonder is this using is this using
08:54 - p5 WebGL or is it using 3j s or just
08:57 - custom WebGL I have no idea I don't see
09:00 - P oh no I do see p5 loaded in here so
09:03 - anyway and this looks like the code for
09:07 - it
09:10 - in fasten this is amazing okay I'm gonna
09:14 - have to investigate this more on my own
09:18 - but great
09:21 - okay speak French for your French
09:23 - viewers asses Alex
09:26 - rhyme our PB says not all viewers are
09:29 - French but it could be fun we for not
09:33 - muziboo is your pal if all say uh-huh
09:37 - did I see this message Simon is asking
09:40 - me yes Thank You Simon I saw all of your
09:44 - messages about about bit shifting I am
09:49 - NOT going to cover [ __ ] shifting or bit
09:50 - masking today but it is a useful
09:52 - information that I hope that I could use
09:54 - later alright
09:55 - when will he even read our chat asks air
10:01 - re on a dock hole uh right now I suppose
10:05 - it's very hard for me to read the live
10:07 - chat while coding and doing all the
10:10 - other stuff I want to do but this is
10:11 - where I'm going to begin so I think so
10:13 - let me talk about some other things that
10:14 - I want to do today I'm just curious let
10:16 - me go to ml 5 je s org there have been a
10:18 - lot of recent updates on the ml 5
10:21 - machine learning library so things that
10:24 - I want to cover soon are how to save and
10:28 - load a transfer learning model I have
10:30 - that series about using transfer
10:32 - learning to do your own custom image
10:34 - classification and now there's a feature
10:36 - in the library what I was curious about
10:38 - is whether I know the features in the
10:39 - library whether we managed to get that
10:42 - in the documentation so let me see here
10:48 - if there is a save function I don't
10:52 - think we have it on the website yet I'm
10:55 - looking here predict predict no so but
10:59 - so this is something I could still cover
11:01 - it because it's just the features are
11:02 - there in the library but haven't made it
11:04 - to the website yet so that's one thing
11:06 - on my list another thing on my list is
11:10 - so excited about sketch or if you don't
11:13 - know what sketch or an N is why it's
11:15 - very exciting let me just show you very
11:16 - briefly
11:18 - editor dot p5.js ml5 sketches i'm going
11:25 - to open up this this very basic one and
11:28 - go to the fullscreen view
11:31 - whoops this is a version of sketch RNN
11:43 - running with the ml 5 library and so
11:47 - what is this doing what this is doing if
11:49 - I press clear here it is drawing cats
11:55 - how is it drawing these cats this is a
11:58 - machine learning model sketch RNN you
12:01 - can find out a lot more about that by
12:02 - looking at the google magenta project
12:04 - and the work of david ha and many other
12:06 - collaborators but is a model that is
12:08 - trained on the Google quick-draw dataset
12:10 - which is millions and millions of
12:12 - doodles and drawings that people made
12:14 - while playing this Google quick-draw
12:16 - game so the model is trained on those
12:18 - drawings and is it the machine learning
12:20 - model is then able to imagine new
12:22 - versions so here's another one I read so
12:26 - I'm going to show you how the code for
12:28 - this works and how you can in how you
12:30 - can use the sketch aren't in machine
12:32 - learning model in your own p5 sketches
12:34 - and in fact how you could interact with
12:36 - it so that the user could draw and
12:38 - sketch our end could take over so
12:40 - there's a lot of interesting
12:41 - possibilities there but before I even
12:43 - get to that what I want to do is
12:47 - actually just show you how to use the
12:48 - raw Google quick-draw data set itself so
12:51 - that's sort of step one so that's so
12:52 - those are my three main things logo
12:54 - challenge get that repeat thing working
12:57 - mushiya ml 5 save and load transfer
13:00 - learning model and Google quick-draw
13:04 - data set all right
13:09 - so what do you think are we good Oh
13:15 - coding train is brought to you by water
13:20 - it is wet it can be in a jar you can
13:24 - freeze it and it turns solid to ice you
13:27 - can boil it it turns to a gas you can
13:29 - drink it some say you should have eight
13:36 - cups a day everybody in the world should
13:39 - have access to free to clean water and I
13:42 - think we should all I went off the rails
13:46 - there with my sponsorship one of these
13:50 - days I'll have a real sponsor I mean I
13:51 - sometimes I do okay let's see I've got
13:57 - pens so it's ten fifteen of the I I'm
14:02 - planning to be here until about noon and
14:05 - then I might even come back for an extra
14:07 - you know since I'm gonna be gone for a
14:09 - while I'm try to as much as I can today
14:10 - and I have most of the day free so we'll
14:12 - see what's going on water if it's wet
14:19 - legit legit Iser says water is not wet I
14:25 - know everybody always says that today I
14:27 - guess
14:28 - it's wet if what is that what is the
14:30 - strict definition of wet the solid phase
14:37 - is less dense than the liquid phase you
14:39 - know science is a wonderful thing some
14:41 - day I'm gonna learn about that stuff and
14:43 - maybe have some proper science on my
14:45 - channel here okay there are so many
14:48 - wonderful science channels out there
14:49 - have you watched the physics girl that's
14:51 - one of my favorites there's this whole
14:54 - video the other was released on YouTube
14:56 - about vortex rings and three blue one
14:58 - brown and fix girl to this collaboration
15:00 - it's really cool I'm plugging plugging
15:03 - their content okay let's get set up
15:10 - [Music]
15:20 - [Music]
15:51 - [Music]
16:07 - [Music]
16:38 - [Music]
16:51 - all right I think I am set up and ready
16:55 - to go
16:59 - and so this will now be coding challenge
17:04 - logo part to this in case your are
17:12 - first-time viewer the way I works on my
17:14 - channel is I do a live stream I do a
17:18 - bunch of stuff in the live stream and
17:20 - then I redundantly re-upload the content
17:24 - later as shorter edited versions of what
17:27 - happens in live stream so this is the
17:28 - full experience you are right but if you
17:31 - want the smaller experience that just
17:34 - kind of gets to only the key elements of
17:36 - the stuff that I'm doing you can tune
17:39 - out come back later for the uploaded
17:41 - version and then even crazily YouTube
17:43 - has this whole youtube premiers thing
17:45 - which I am trying to use very very
17:47 - cautiously because it's very confusing
17:48 - since I live stream upload recorded
17:51 - content so what does it mean to have a
17:52 - edited version of my live stream get
17:55 - uploaded as a YouTube premiere okay
18:04 - let's what's the name of everyone wants
18:07 - to know this song this song is called
18:08 - Tori the dog and it is by a wonderful
18:12 - composer whose name is Adam Blau who is
18:14 - a film and television composer and
18:17 - musician based in Los Angeles at Adam
18:19 - Blau on Twitter tell Adam Lau you love
18:22 - its music and you love the way that it
18:24 - is featured on
18:27 - look coding tree
18:36 - all right and blouse also the I don't
18:42 - have a I don't think I don't have a
18:44 - version of it here on my little
18:46 - soundboard thing but Adam was the
18:48 - composer of the coda great theme song as
18:52 - well okay I really have to make this
18:57 - happen now so let me go to let me just
19:03 - grab this real quick and get this back
19:09 - let me leave myself back to where I was
19:10 - before
19:16 - okay why is that not working what did i
19:24 - do do I break this code before oh good
19:31 - work what did I do here why is this not
19:37 - working
19:40 - wait it was working a second ago I was
19:44 - just demonstrating it wasn't I just
19:47 - demonstrating this a second ago oh no
19:49 - that was the version that was here all
19:53 - right what did I do
19:56 - let's just grab this version
20:03 - we're probably I probably up I probably
20:05 - had a bug in my code there we go okay
20:09 - where to start from here this is the
20:15 - coding challenge 122 or maybe 121 part 2
20:18 - who knows number 8 will sort itself out
20:21 - and I have this I have this let's put
20:25 - this over here
20:27 - and let's go here all right
20:30 - all right everyone oops
20:41 - ah hold on my Oh weird what's going on
20:46 - here oh shoot my laptop is not plugged
20:50 - in that should fix it great okay
21:06 - [Applause]
21:09 - hello welcome to part 2 of the logo
21:13 - interpreter coding challenge now if you
21:15 - watched the first part you might
21:16 - remember that I left off here all I have
21:20 - is a logo interpreter what is logo in
21:23 - case you don't remember logo is a let me
21:27 - just this is my one start over because I
21:30 - had this I meant to have this available
21:40 - ok as if I only ever start over once ok
21:48 - hello welcome to coding challenge logo
21:51 - interpreter part 2 a little bit scared
21:53 - of this alright so what's going on where
21:56 - are we why I here you might remember me
21:59 - from logo interpreter clue sounds number
22:01 - 121 look that's me I'm almost like
22:03 - wearing the same clothes this is a
22:05 - challenge where I looked at the logo
22:08 - programming language a language from
22:09 - design in 1967 turtle graphics you might
22:13 - be familiar with I talked a bit more
22:14 - about it in that video I encourage you
22:16 - to read about the history and also to
22:18 - check out the logo Foundation which is
22:20 - the foundation that supports a variety
22:22 - of wonderful initiatives including a
22:25 - scratch day so check that out but what I
22:28 - did was I made this logo interpreter
22:31 - that is able to interpret simple
22:33 - commands like four words 60 left 90
22:37 - forward 100 right so the wait a sec do
22:45 - you guys please don't distract me in the
22:47 - chat with lots of emojis okay because it
22:50 - makes me think my microphone stopped
22:52 - working okay all right all right I the
23:01 - chat the chat they can't look at the
23:03 - chat okay logo interpreter what was I
23:07 - saying
23:07 - look no interpreter something
23:13 - previously in the coding trade that's a
23:15 - good wait so what did I miss here what I
23:23 - missed is I only supported certain
23:24 - commands like forward okay all right
23:28 - ready nothing logo interpreter which
23:33 - Matsuo will magically figure out a nice
23:35 - way to edit this role left full of rage
23:38 - okay I just see this logo interpreter
23:43 - can parse these commands but I didn't
23:46 - actually implement many commands that
23:49 - are kind of crucial to actually draw a
24:06 - turtle first okay
24:07 - good chat I'm not looking at the chat
24:22 - so while this implementation of logo
24:25 - interpreting these logo commands like
24:27 - forward left forward etc works it's
24:29 - missing crucial components and so there
24:32 - are many commands in in logo and I
24:34 - implemented pen append down some of
24:36 - these but one of the most important ones
24:39 - that I did not implement is repeat so
24:42 - this is a tutorial from Brown University
24:44 - page about the history of logo that I'll
24:46 - also link to in this video's description
24:47 - but what I want to attempt to do is add
24:52 - the repeat functionality which
24:58 - complicated that well there are some
25:00 - simple ways probably to do it and I will
25:03 - point out in fact that when I posted
25:05 - this code 16 poll workers came in with
25:09 - suggestions and techniques for how to
25:11 - implement repeat and I would encourage
25:13 - you to go check all of these out I want
25:14 - to highlight one of them that was pretty
25:15 - interesting to me
25:17 - let me look for it regex implementation
25:20 - is this the one I'm looking for
25:22 - yeah this one oh yeah I love this which
25:25 - is just basically using a regular
25:27 - expression to search for the repeat
25:30 - command and then just replace the repeat
25:33 - command in the string itself with what's
25:36 - the thing to repeat multiple times so
25:38 - kind of like unrolling the string
25:40 - recursively with a regular expression
25:42 - pretty wild implementation I'm not going
25:45 - to do use that one I'm gonna try to spin
25:47 - up my own so this is my idea you have a
25:50 - marker alright so whoops this is my idea
26:00 - so one thing that I think will help is
26:02 - object-oriented programming what if I
26:05 - have this idea of a command class so I
26:11 - make this idea of a command class and it
26:13 - has the name of the command that could
26:16 - be like forward left except a nap etc it
26:21 - has an argument so if the command is
26:25 - forward maybe I would have an argument
26:28 - like one
26:30 - and by the way the command could be
26:33 - repeat and I know I'm about to leave
26:35 - your view here repeat and then the
26:38 - argument could be a number also because
26:40 - you're gonna repeat something a certain
26:42 - number of times so you have this idea of
26:44 - a command class and then maybe what I
26:46 - think what would be useful is to create
26:48 - a parser object and actually instead of
26:52 - using split so I used split as a way of
26:54 - like looking at the logo instructions
26:56 - and just splitting it into a big array
26:57 - but I think what I want to try to do it
26:59 - the most like sort of absurd thing ever
27:01 - it's just actually step through the
27:03 - constraint one character at a time so
27:06 - that I have the idea of a parser is
27:08 - keeping track of an index so the parser
27:13 - is always has a basically like a pointer
27:16 - into the command and can step through
27:18 - and if it finds repeat it can then pull
27:21 - out a chunk can do all sorts of stuff so
27:23 - if what I what I'm kind of thinking
27:26 - about here is this idea of a command a
27:28 - command could just be a thing that you
27:30 - execute with an argument but if the
27:32 - command is repeats then it could also
27:34 - have a list of it could have an array of
27:38 - its own commands that those are the
27:39 - things you repeat and then inside of
27:42 - this array there could be a command that
27:43 - is a repeat command so it could be
27:45 - nested and recursive so this is the idea
27:47 - I have not actually thought about this
27:49 - quite a bit and probably helped by
27:52 - looking at everybody's pull requests so
27:54 - I don't know to what extent this is like
27:55 - an original idea or just came from
27:57 - suggestions but it through osmosis
28:00 - my brick has come up with this idea but
28:02 - I have not tried to implement it so what
28:04 - you are about to watch is me actually
28:06 - trying to implement this for the first
28:07 - time and it might be a terrible idea and
28:10 - things will go wrong and you'll probably
28:11 - notice this video is 342 hours long but
28:15 - if you want to stick with me here we go
28:21 - so hold on let's move to here
28:31 - okay so let me go to the code I mean I'm
28:34 - gonna keep the code that I had before
28:35 - I'm gonna add a new JavaScript file
28:38 - called parser maybe it should be
28:40 - interpreter I don't know I'm gonna call
28:42 - it parser parser Jes I'm gonna write a
28:44 - parser class and the idea is that when
28:49 - you create the parser you give it some
28:52 - text so this is the full text that it
28:56 - needs to parse and then also it has an
28:59 - index which starts at zero okay and one
29:04 - of the functions that I would have here
29:06 - is like next next token so it could
29:09 - maybe look and sort of like find the
29:10 - next token or something in in this like
29:14 - text by like stepping through it with
29:16 - the index okay that's what I'm thinking
29:18 - about now I am also going to then create
29:22 - a another [ __ ] JavaScript class called
29:25 - command and this would be this is what
29:29 - I'm talking about it would have a name
29:30 - and an argument and then it could also
29:38 - have potentially subcommands you know
29:41 - cursive lee a command could also include
29:44 - a list of other commands okay so this is
29:47 - my idea now let's go to sketch KS and
29:50 - basically i'm this-this-this go turtle
29:54 - function i'm actually gonna just
29:55 - basically take out what i did before
29:57 - because i don't think this i'm not gonna
30:00 - use split anymore and i'm not going to
30:03 - have my own index here i'm going to say
30:07 - let parser equal new parser with that
30:12 - code so let's just for example say
30:15 - console dot log and parser next token so
30:23 - let me at least see if I can get parser
30:25 - next token to work and so and this
30:30 - should probably return the token so
30:31 - return test so if I just run this now
30:36 - I'm parsers not defined right I always
30:39 - forget this I've added a bunch of new
30:41 - javascript classes I want to make them
30:44 - separate reference those files here
30:47 - probably should get into like bundling
30:49 - and building and all that sort of stuff
30:50 - at some point parser and command so let
30:54 - me go back to sketch refresh okay so
30:57 - great
30:58 - I see test there I have got my command
31:01 - but I didn't really get the token right
31:02 - what I need to do is here I really need
31:06 - to say all right so I'm gonna step
31:08 - through the text one character at a time
31:12 - so what I mean by that is I'm gonna say
31:14 - let car equal this dot txt car at this
31:21 - dot index okay so while the character is
31:27 - not a I guess I could use a regular
31:31 - expression here so I want to well let me
31:37 - just say let me just do it this way for
31:38 - a second while the character is not a
31:40 - space what I want to do is I'm going to
31:44 - start with an empty token and I am going
31:49 - to say whoa I don't need a thirst while
31:53 - the character is not a space token plus
31:57 - equal the character character equals
32:00 - this dot text car at car at plus plus
32:07 - this dot index so what's going on here
32:10 - this the idea here is and again I could
32:12 - use right of expression and substring
32:14 - but I'm trying to do this in a very
32:15 - manual way to understand it what I'm
32:18 - doing is I'm saying let me look at the
32:19 - first character and as long as that
32:21 - character is not a space I'm gonna add
32:23 - that character in my token and then look
32:25 - at the next character and this is
32:27 - basically remember well this is
32:28 - something I covered in the first part of
32:30 - the challenge this dot index plus plus
32:32 - this side index is increasingly index by
32:35 - one and giving back that new value so
32:37 - now if I say return token let's see what
32:43 - happens
32:44 - refresh this text chat at the car at
32:48 - little typo there
32:50 - there we go look I got the first token
32:54 - that's great
32:55 - now what if I now want to say here next
33:02 - token oh it got a space so look at this
33:08 - this a space is not a valid token so
33:11 - what I can actually do here back into
33:13 - parser is I can actually say if if car
33:20 - equals a space return next well increase
33:27 - the index go to the next one and return
33:30 - next to this next token so this is a way
33:33 - of basically skipping and again this is
33:36 - definitely a clear example
33:38 - I'll refactor this later you'd like a
33:39 - little theme music there for that but
33:44 - but this is like this is a start okay so
33:47 - um this is this is basically saying like
33:49 - ignore the space and so now we could say
33:53 - I've got four words 60 but here's what I
33:54 - want to do really here I want to say and
33:59 - let me actually let me use a regular
34:01 - expression here so I'm gonna say like a
34:02 - Rick there's a category of command which
34:05 - is like a movement command forward
34:06 - backward right left so I'm gonna say
34:09 - that would be a regular expression that
34:12 - is forward or backward this is f be
34:17 - followed by D or left or right followed
34:20 - by a T and probably I should probably
34:24 - also make sure it's the full string so
34:26 - put this beginning and end so now I
34:28 - could say let's token equal parser next
34:35 - token if movement test token so if it's
34:43 - a movement command then create a new
34:47 - command with token and token and parser
34:52 - next token right because I think I said
34:56 - a command is I said the name of the
35:00 - command and the argument the argument
35:01 - always comes next so again I'm not doing
35:04 - a lot of error checking for people
35:06 - making mistakes logo code but
35:09 - we'll get to that later I suppose okay
35:11 - I'm setting myself up for hopefully
35:12 - being able to do a repeat right so where
35:14 - to where am I here right so so let's
35:16 - just see and actually let's make an
35:19 - array of commands I mean I might want to
35:20 - put all the commands into an array or I
35:22 - might want to process them one that
35:23 - there's there's various ways of doing
35:25 - this but let's actually put it into an
35:27 - array right now I think that'll be
35:28 - helpful whoops okay so let's see and now
35:35 - let's look at commands okay
35:42 - refresh look at I've got a command with
35:46 - arguments with the name is forward the
35:49 - argument is 60 and it doesn't have any
35:51 - sub commands because it's not a repeat
35:53 - okay so now hmm this is where I'm gonna
35:57 - get into trouble let's do let's do
36:02 - something like a wild parser is not
36:08 - empty while parser is has remaining
36:11 - tokens I don't know come up with a
36:12 - better name for that while parser has
36:15 - remaining tokens keep doing this so what
36:20 - is it doesn't mean here in the parser to
36:23 - say remaining tokens well on the one
36:27 - hand I can just return this dot index is
36:31 - less than this text dot length because
36:33 - if the index has moved past the end of
36:36 - the text then there's nothing left
36:38 - hmm I'm wondering if this is going whoop
36:43 - sort of I bet revenues getting an
36:45 - infinite loop here but let's just give
36:48 - it a try anyway and see right let's see
36:53 - what happens here right because if if it
36:57 - doesn't like if none of these things
36:59 - let's see what happens I'm sure I'm
37:00 - gonna have an infinite loop yes so I
37:04 - have an infinite loop I could tell
37:05 - because everything went blank this is
37:08 - just so I'm gonna actually unfortunately
37:09 - have to kill this page whoops aah and
37:14 - start over so let's think about why I
37:19 - have an infinite loop and I need to
37:21 - correct this I mean one thing I could do
37:23 - is I just for now I could so next token
37:27 - there are situations where if it hits
37:30 - the bracket bracket is not a space
37:32 - bracket is not so so I guess what I
37:38 - could do here is you know if car I mean
37:43 - this is really terrible but I'm I can't
37:46 - or if it's one of these brackets then
37:56 - return then also go up by an index and
38:01 - return that character so this definitely
38:04 - accounts for another thing so again this
38:07 - could be condensed and I can maybe use
38:08 - some more clever ways of doing this but
38:10 - if it's a space ignore if it's a bracket
38:18 - whoops if it's and I actually I'm gonna
38:22 - want to do something for if it's a
38:23 - repeat but anyway if it's a bracket send
38:26 - that back and otherwise accumulate until
38:34 - a space or bracket but okay there's so
38:39 - many problems with this but I have to
38:41 - build it one step at a time if you're
38:43 - willing to stick with me and keep
38:44 - watching this video then more power to
38:46 - you okay let's see if I managed to not
38:48 - have an infinite loop and I probably oh
38:50 - I forgot something important it could
38:52 - have been caching so let's do this Oh
38:56 - still infinite loop yeah all right all
39:01 - right let's be I have to be more
39:02 - thoughtful about this well one thing I
39:04 - can do right now just two let's do this
39:05 - this is a kind of a nice little
39:07 - debugging technique Oh actually no no no
39:11 - there's a problem here there's an even
39:15 - bigger problem where am I parser while
39:18 - character is not a space keep going up
39:21 - and this could get stuck or while
39:27 - character space and this dot index is
39:29 - less than this dot X dot length so I've
39:32 - also got to check to make sure I'm not
39:33 - hitting the end
39:34 - that might actually just be the only
39:36 - thing I needed here let's see can i
39:38 - refresh a page probably not
39:43 - let's see oh this is really awkward
39:45 - really Oh infinite loops are so sad
39:48 - I really should I have a thing that I oh
39:50 - there we go okay
39:52 - alright so that was definitely the
39:54 - problem now at least my infinite loop is
39:56 - gone let's look at these commands so
39:57 - forward sixty right one twice oh this is
40:00 - good this is what I wanted it to be but
40:05 - I need to be able to account for the
40:08 - repeat so this is good this is giving me
40:13 - a list of commands but what if the token
40:17 - that I get back now I need to deal with
40:21 - repeat so if if it is a movement I
40:27 - should also have something for a pen
40:30 - command which would really just be
40:32 - matching a pea at the beginning right
40:36 - any of the pen commands match just a pea
40:38 - so I should say else if pen test token
40:45 - so a pen command is just a command with
40:51 - just the token no argument so and now I
40:57 - could in theory if I added a pen up
41:05 - command we would see pen up is in there
41:08 - with no argument but that's fine so
41:10 - that's good so this would work or why
41:12 - isn't it true it's not drawing anything
41:13 - cuz I'm not bothering to draw sorry I
41:15 - keep opening up terminal by accident
41:17 - okay so I am now I've now written a
41:20 - parser I'm now written a parser that can
41:26 - go from tokido token and could create
41:28 - commands and knows how to handle any
41:30 - movement command or any pen command oh
41:33 - and this start remaining tokens uh yes
41:36 - great great suggestion from the chat
41:38 - abdi lab I got suggests that here
41:42 - I like this suggestion that this is
41:46 - already a test which is this
41:48 - stop remaining remaining tokens because
41:52 - I have that function right that already
41:55 - test that here so it's great okay still
41:59 - working all right now it's time to deal
42:02 - with the repeat so I need to handle the
42:05 - repeat in a very unique way and this is
42:08 - where I'm really gonna get lost
42:09 - so repeat is just matching the repeat
42:14 - command so this could be a regular
42:18 - expression here so else if repeat test
42:23 - token so now what if I get a repeat
42:27 - command then what I need to do is say so
42:34 - let command is a new command with with
42:38 - the token o and and also the next token
42:42 - so I could first get the number then
42:47 - what I need to do is I need to pull out
42:49 - hmm I need to pull out everything within
42:53 - the brackets so then what I want to say
42:55 - is to the to repeat is the parser get
43:03 - get repeat so I want to write a new
43:06 - function that then in the parser looks
43:09 - for that starting bracket looks for the
43:11 - end bracket and just gets it gives
43:13 - everything back okay so in in the parser
43:18 - now I'm going to say get repeat so I
43:23 - should first basically find that first
43:26 - bracket so so I want to in theory there
43:32 - could be spaces so so so car equals this
43:40 - dot txt text car hat this dot index
43:48 - should probably put that in a function
43:51 - and then if while car I guess I could
43:58 - say you know what I could do this while
44:01 - this is not equal to this opening
44:06 - bracket while it's not equal to this
44:13 - opening bracket o plus plus right I want
44:16 - to go ahead to the next one but stick
44:18 - where I am then just to keep going and
44:21 - and I guess I need to make sure and this
44:28 - dot remaining tokens now I have found
44:36 - basically I have found look I'm gonna
44:42 - say index I'm gonna I'm just gonna say
44:45 - the index this dot index this should
44:49 - console log where the index it so I need
44:52 - to put a repeat in here so let's start
44:55 - with something really simple like repeat
44:57 - 3 this and let's refresh all right it
45:07 - got forward it got right because but it
45:11 - got weird and it said 10 is that 0 0 1 2
45:19 - 3 4 5 6 7 8 9 okay so now it's at index
45:23 - 10 all perfect so now I love this okay
45:29 - so commands push so this is actually a
45:40 - function oh I gotta make like a sub
45:42 - parser of the sub thing I mean the
45:49 - recursion aspect of this right because a
45:51 - repeat could have a repeat inside of it
45:52 - if we're a pink couldn't have a repeat
45:54 - inside of it I kind of be done maybe I
45:56 - should do that first
45:58 - this would be a really long video I know
46:02 - I could say that but it just is okay so
46:04 - now what I want is to find the last one
46:09 - so let's start
46:14 - equal this dot index let end eat now I
46:20 - need to do this again move along here
46:24 - and let n equal this dot index and then
46:28 - return this dot txt substring start end
46:35 - let's see if this does what I think it
46:40 - should do and then let's see if it does
46:46 - what I think it should do okay
46:50 - commands token who a parser next let's
46:55 - just console.log this console.log to
46:59 - repeat okay yes okay look at that this
47:04 - is the thing to repeat and the command
47:06 - is the repeat perfect yes okay but minus
47:10 - 1 minus 1 minus 1 so here in parser end
47:17 - minus 1 because the index went 1 what is
47:19 - at the is actually the index passed that
47:23 - final bracket so now there we go the
47:28 - command is repeat its name 3 and now I
47:31 - just need to fill the command with an
47:34 - array of the stuff that's inside of that
47:36 - to repeat so this okay I have an idea
47:40 - now this function
47:49 - parce let commands I'm trying to think
47:56 - your parse I need to write a recursive
48:01 - function now where I come back and do
48:04 - this then for those sub commands okay so
48:08 - let commands equal and this is gonna be
48:10 - weird let me just try to parse parser
48:16 - dot parse does this one let commands
48:21 - evil parser dot parse should all this be
48:23 - in the parser and then this would I
48:30 - don't know about putting this in the
48:32 - parser if this is in the parser parse oh
48:42 - this is hard okay
48:47 - while this remaining tokens next took
48:54 - this so this I'm not so sure about
48:56 - putting this in here but I'm going to so
48:59 - everywhere I said parser I'm now saying
49:01 - this and then I am saying let commands
49:06 - is be an array and then basically at the
49:10 - end here I'm gonna say return commands
49:15 - just give me a sec I'm not gonna do the
49:18 - recursion yet so let's see let's see
49:22 - what happens here
49:23 - and then in sketch let commands equal
49:27 - parser dot parse console dot log
49:32 - commands this is crazy all right
49:38 - it sketched all right that's good that's
49:42 - good hold on hold on hold on
49:44 - I'm thinking I'm thinking oh there's a
49:45 - console log here where's that words
49:47 - there's extra console log 25 and 31 oh I
49:52 - have it twice okay okay so now okay okay
49:58 - now now let's
50:00 - this is the hard part alright so I have
50:03 - this to repeat and then what I want to
50:05 - say is command dot commands equals parse
50:18 - this dot parse to rip this is what I
50:22 - want to do to repeat okay so this isn't
50:26 - exactly going to work this is the idea
50:29 - of what I want to do but it's not right
50:34 - yet so close it's not right because the
50:39 - parse command inside it it's in its that
50:43 - it's working with this particular block
50:48 - in the like sort of global blocks block
50:50 - of text maybe it makes more sense for
50:54 - that not to be I guess I have to create
50:59 - a new post sorry
51:07 - maybe it makes sense for that not oh
51:10 - wait no no I think I have an idea
51:13 - oh all I have to do is make a new parser
51:18 - here with the to repeat stuff and then
51:25 - that equals a parser dot parse right and
51:40 - then this goes here right because then
51:46 - it would have I think this might work
51:49 - could this really work let's think about
51:51 - this I'm basically saying hey make a
51:56 - parser with all this code parse it and
51:59 - give me the commands the parser is going
52:03 - to do that and return that array of
52:06 - commands but internally oh wait wait
52:09 - yeah it's going to make so I thought I
52:12 - think this I mean it's so hard to speak
52:15 - this let's run it let's run it this is
52:22 - gonna produce a lot of errors or an
52:23 - infinite loop for sure
52:30 - cannot read property length of undefined
52:33 - parser KS line seven this dot text oh
52:41 - whoops I took that out when I was
52:43 - messing around with this idea okay not
52:45 - like the drum okay will command repeat I
52:55 - think that worked that's crazy
53:05 - oh my goodness
53:08 - I think this worked okay can we take a
53:16 - moment here to like see if this makes
53:19 - sense let's try to map this out right I
53:22 - feel like hold on sorry this this camera
53:31 - went off
53:47 - okay so I think this is a case where I
53:49 - was like figuring it out trying to
53:51 - explain it all at the same time but I
53:53 - don't know that I did that super
53:54 - successfully so let me take a minute to
53:58 - try to unpack what just happened
54:03 - okay and the idea here is that I have
54:08 - something like this repeat three forward
54:14 - 60 can you see that yes
54:16 - so the parser finds the first token and
54:19 - makes a command repeat with three then
54:27 - the parser because it found a repeat
54:31 - asks for this as basically like a
54:34 - substring and it makes a new parser
54:37 - object with only this so the first
54:39 - parser object started with everything
54:41 - the new parser object work just works on
54:44 - this and makes a command so I really
54:48 - should put this in like a JSON like way
54:51 - so the idea here and let's add some
54:53 - other stuff the way that it should work
54:55 - imagine if this had four word 60 here so
54:59 - the idea is that I would have an array
55:01 - with commands and the first command
55:04 - would have name for word argument 60
55:10 - then the next command would have name
55:15 - right repeat argument 3 but we knows it
55:22 - to repeat it then goes and makes a
55:24 - parser for this and the same way that
55:28 - this is a big array the parser now works
55:31 - on this to put it in an array here with
55:35 - like objects like for word 60 et cetera
55:38 - so in theory this could even have
55:40 - another repeat inside and this that
55:43 - repeat would be misery with its own sub
55:46 - commands hopefully that helps a little
55:48 - bit more but let's actually test this
55:51 - theory
55:53 - so let me go now to let me I'm afraid to
55:59 - like type stuff in here with and break
56:01 - it so I think what I'm going to do is
56:02 - just so let's start with like forward 60
56:06 - repeat let's just start with that first
56:09 - so we can see we got a forward 60 no
56:14 - commands and a second manager to repeat
56:17 - three with two other commands okay now
56:24 - what if I then put in here let's let me
56:29 - do it out here because for what if I do
56:32 - another repeat forward of so repeat four
56:37 - forward ten let's look at this
56:44 - okay so there's still forward 60 then
56:48 - there's a repeat and the repeat
56:50 - arguments is three there are three
56:52 - commands one of it uses repeat which has
56:54 - a sub command all right I think this
56:58 - works I mean I'm sure there's like needs
57:00 - error handling but the basic idea is
57:02 - actually working here while this is very
57:03 - exciting to me alright so what I need to
57:06 - do now is follow the instructions this
57:09 - should be in theory this should be the
57:10 - easy part
57:11 - so now that I have this commands I can
57:14 - just say for let command of commands and
57:18 - now I forgot how I did this in the first
57:21 - place because I have this oh boy this is
57:24 - that I have a I have this like
57:27 - dictionary thing that I made to like
57:28 - execute these different functions mmm
57:31 - so what do I want to do this is called
57:33 - commands so I'm gonna call this a
57:37 - command dictionary well I'll just call
57:41 - this commands command list command list
57:45 - it's not a list command lookup command
57:51 - look up with a block word variable name
57:54 - so what I want to do is now I want to
57:58 - say the name is command dot name and the
58:02 - argument is command argument
58:04 - and then I'm gonna say I have to figure
58:08 - out if it's a repeat
58:09 - so let like if name equals repeat then
58:18 - for let I equals zero I is less than
58:21 - argh I plus plus right because I want to
58:26 - do whatever is and then I'm going to go
58:29 - through its commands I guess I could say
58:32 - oh boy oh I need another recursive
58:36 - function to traverse it oh boy all right
58:42 - one step at a time people I'm just gonna
58:52 - do this so I just want to see like what
59:00 - happens here now so for uh whoops let me
59:08 - go back to something simpler without
59:14 - anything nested forward sixty repeat
59:18 - three times okay so this idea works but
59:26 - this needs to be a function like I need
59:29 - more recursion maybe I should be just
59:31 - doing this as I'm going into so execute
59:33 - I'm gonna call this execute and execute
59:35 - a list of commands so if you execute a
59:39 - list of commands and then you get the
59:42 - repeat you need to execute command
59:51 - document right so in other words I'm
59:58 - looking at the commands if I if it is a
60:03 - repeat then I want to execute the sub
60:05 - commands that are in the sum command
60:07 - list a certain number of times otherwise
60:12 - I can now say basically what I did in
60:16 - the very first version of this
60:18 - which is to do what command list name
60:23 - arc so the idea is I'm looking up the
60:27 - command list in the command list the by
60:30 - the name with an argument so that will
60:33 - then go here and say if it's forward it
60:35 - will execute this function moving the
60:38 - turtle forward by an amount I think
60:39 - there's a lot of redundant extra code
60:41 - now but this is fine let's see what
60:44 - happens
60:46 - syntax error oh this has to say function
60:52 - I'm not in an object anymore
60:54 - all right mm-hmm
60:58 - [Music]
61:00 - let's what is that 100 100 so what's oh
61:03 - oh I didn't execute anything execute
61:08 - commands command list is not defined
61:14 - command lookup okay I can't remember
61:17 - what I call anything command lookup hey
61:23 - this is working
61:26 - Wow okay dare I say this is complete
61:31 - does anybody have access to the code
61:35 - that produces this design I'm gonna take
61:39 - a break and try to find it
61:47 - all right I'm taking a little break here
61:49 - for a second because I think in one of
61:56 - the full requests and one of the pull
62:09 - requests mmm where's oh I think it was
62:16 - the one with the parser this one it has
62:20 - this picture yeah
62:21 - so it's this by the way when does it
62:42 - all right
62:46 - oops
62:59 - okay
63:09 - okay
63:13 - click on the photo on Wikipedia it shows
63:16 - it Oh
63:25 - yeah but what I don't have a lot of
63:28 - these commands I don't have these
63:32 - commands supported so I won't bother
63:37 - alright and also I think it should be
63:44 - going up first but I'll fix that okay
63:50 - let me just
64:05 - okay okay okay the chat is really seems
64:14 - off the rails every time I like look
64:15 - over there there's some kind of
64:18 - discussion people seem to be maybe being
64:20 - a little bit mean to each other is there
64:21 - anybody who's a mob can help clean
64:23 - things up over there just please be nice
64:25 - to each other in the chat and maybe
64:26 - don't argue about which laptop is better
64:28 - logo people okay all right all right all
64:33 - right here comes okay
64:42 - okay I'm back I found thank you too
64:46 - well let me just put the thank you there
64:55 - sorry okay
65:08 - all right thank you to stellar tux on
65:11 - github who posted this pull request I
65:14 - now have this command
65:17 - Oh Peto Oh should work mmm I might not
65:21 - have accounted I think I counted for pen
65:23 - up correctly we're gonna find out this
65:25 - command should produce that design and
65:28 - it's got nested repeats all sorts of
65:31 - crazy stuff so let's go ahead and see if
65:34 - I just pasted it in here no all right so
65:39 - let's look at what's going on here
65:41 - I've got repeat a command repeat 36
65:47 - times with five things left ten pan up
65:51 - undefined forward one pen down undefined
65:55 - repeat 120 and forward
66:00 - - and right - so it looks like my data
66:06 - structure here is correct the question
66:09 - is why is this not working we have to
66:16 - figure this out
66:17 - so let's first let's take this and put
66:19 - it just in here so the page loads with
66:24 - this and all right so what what's
66:31 - missing here so let's take some things
66:33 - out and just take out this second repeat
66:37 - oh I don't have to pan up and pen down
66:43 - or if just the scale is so much larger
66:53 - canvas is too small so so this might
66:59 - actually be a case where the canvas is
67:00 - just too small so let's make the canvas
67:04 - way bigger
67:15 - oh and am I not starting in the middle
67:21 - the turtle oh the turtle needs to start
67:30 - in with / - height / - boy really big do
67:41 - I need to stack the position before
67:43 - repeat
67:55 - hmm
67:59 - hmm let me hold on Matthew this is gonna
68:03 - be like an edited out thing because I
68:05 - wonder if I don't think that I need to
68:09 - stack the repeat it should exit that
68:14 - recursion should do it in the correct
68:16 - order
68:17 - I mean one thing that I could do to be
68:19 - sure is just console.log name argh right
68:28 - so right this
68:44 - all right maybe the pen up in the pen
68:49 - down is not working correctly let's yeah
69:00 - I should just make the length smaller
69:02 - that's but I'm worried that making the
69:05 - length smaller all right let's see these
69:15 - is forward 1 and right forward - I mean
69:18 - there's not really a way to make that
69:19 - smaller I'm thinking about here hold on
69:30 - to think about this thinking hold on I
69:37 - wanted to test pen up and pen down hold
69:41 - on board 110 up left for forward 100 I
69:59 - think my pan up and pen down is breaking
70:02 - stuff let's look at what I'm doing with
70:05 - pen up and pen down
70:12 - should actually be fine
70:19 - for 100
70:28 - it's almost telling me there's an issue
70:30 - with go turtle know this this starts it
70:36 - resets everything its restarts the
70:38 - parsing I think this is right
70:49 - I'm just not convinced the pen up and
70:52 - pen down is working all right that works
70:58 - left 100 left 90 forward 100 so what if
71:05 - I say and then left 90 forward 100 what
71:11 - if I say pent up yep
71:21 - so pen up and then if I say pen and down
71:32 - uh-huh
71:33 - pent up and pen down is doing something
71:35 - really weird so there's there's
71:38 - definitely an issue with pen up and pen
71:43 - down is it in the dictionary I could
71:46 - have thought that it was sort of thought
71:48 - that it was yeah turtle panty was false
71:54 - turtle pen equals true
72:03 - reset Pentacles to rotate translate
72:16 - it sure didn't matter
72:29 - Oh what's going on with Penta Penta the
72:37 - editor is only because if you're that
72:39 - error is only because of your live
72:40 - editing no I know that so a copper
72:44 - France it's working in your version
72:46 - interesting ah akhat CEO is giving an
72:59 - excellent suggestion there
73:04 - let me try doing this without the pen
73:10 - down or pen up keep track of the nesting
73:12 - repeat depth last elements have no
73:15 - arguments is your pen regex correct hold
73:23 - on everybody okay I need to figure this
73:26 - out so what I want to do actually is get
73:30 - rid of the live editing thing so that's
73:32 - a thing that I can do very easily with
73:36 - changing this to changed so now and let
73:42 - me go back to making it like smaller
73:45 - just so we can see this better can you
73:50 - see that probably not let me make it
73:52 - even smaller whoops so what I want to do
73:59 - is just say like forward 1/100
74:02 - so we're 50 okay so now I can I can only
74:07 - execute a when I hit tab so I can say
74:09 - left 90 forward 50 okay if I were to say
74:15 - then left 94 at 50 if I put now Ford 50
74:22 - pen up and then left 90 4.50 then pen
74:28 - down okay so it is working that's
74:32 - working pen up and pen down is working
74:35 - the way it's expected
74:39 - now what if I were to do what if I were
74:45 - to do so that's not the problem what if
74:47 - I were to do forward one left like
74:55 - forward five left five just that then
75:02 - repeat ten okay so that's giving me like
75:07 - a little circle and okay right this
75:21 - makes sense all right so this is making
75:28 - sense okay so that gives me a circle and
75:43 - what if closing brackets it stops when
75:48 - the first one which could be a nested
75:49 - one Oh Lucas okay wait I think there's a
75:52 - problem with the closing bracket because
75:54 - it stops when found the first one which
75:57 - could be a nested one well this will be
75:59 - a long video but this parts going to be
76:01 - edited out yeah five left so like I
76:12 - should be able to do this math right
76:14 - so repeat 50 that's an arc because it's
76:22 - 50 pixels okay so what if I then wanted
76:28 - to say inside of here
76:30 - repeat so repeat left like what if I
76:38 - went and said also like forward so what
76:44 - if I repeated this now ten times going
76:47 - less forward and
76:50 - but and also to the left for the lower
76:52 - angle this is what's going to break I
76:56 - think yeah so where did this go wrong I
77:05 - don't think it went wrong in here
77:14 - because forward five it's gonna repeat
77:26 - this ten times and it's gonna repeat
77:30 - this ten times oh look at this there we
77:36 - go
77:37 - that's the mistake
77:51 - there's definitely a problem there so
77:57 - that fixed died
78:08 - go back to that
78:19 - ah okay all right so there's an issue of
78:29 - the last people were telling me this I
78:31 - know you were all telling me this last
78:34 - Arg is not going okay fix that for that
78:37 - is finding backwards with Counting depth
78:42 - yeah okay so this is definitely it's
78:46 - what we said but you don't listen to us
78:48 - right know it you know it's very you try
78:52 - it's out and reading the chat it goes by
78:54 - very fast and you're also like you're in
78:58 - a different moment in time than I am so
79:00 - what you're typing is not related to
79:01 - what I'm saying it's very hard okay
79:06 - the tasteful toasty writes this is the
79:08 - problem I commented ages ago well this
79:10 - should be nothing new okay all right so
79:23 - all right so Matt's here this will be a
79:27 - nice little spot to edit let's go to let
79:39 - me go back to just put it back to that
79:45 - let's go remember this is fine
80:01 - okay off by one in the string copy yeah
80:12 - I'm not sure I'm not sure how to fix
80:20 - this actually okay okay everyone okay
80:39 - I'm okay I'm back
80:44 - thank you to stellar tux who suggested
80:48 - actually has this code repeat 36 left 10
80:52 - pen up Ford 1 pen down repeat 120 then 4
80:55 - to write 3 to get this particular
80:58 - pattern which is similar to what is on
81:00 - the Wikipedia logo page so I have this
81:03 - code pasted here and now what I'm going
81:05 - to attempt to do is go to my
81:10 - implementation and paste it in here now
81:13 - I have to admit something during that
81:16 - edit point because the live stream I
81:19 - already did this and it didn't work so
81:21 - this is actually not going to work it
81:24 - didn't give me an error and it seems
81:26 - like it's ok but there's some like
81:27 - really big problem here that took me
81:29 - quite a while to find even though the
81:31 - chat had found it about 4 and a half
81:33 - hours before I did it you could find go
81:36 - link to the live stream if you want to
81:37 - view this whole thing but will it look
81:39 - repeat 36 these 5 command so this is
81:43 - right and left 10 pen up undefined
81:48 - forward 1 pen down undefined that's
81:50 - right then the repeat here
81:52 - repeat 120 times forward to right blank
81:58 - so it's not actually picking up this 3
82:01 - here let's try this there we go
82:06 - suddenly it works if I put a space there
82:14 - why so now I have to figure that's as
82:17 - far as I got in my like one hour of
82:19 - debugging not to figure out why what is
82:22 - it about my code that causes it to break
82:25 - unless there's a space there so in the
82:29 - parser here it is getting when it's
82:37 - looking for that closing bracket and
82:40 - going up where is the spacings not
82:44 - picking up the last argument here but it
82:49 - picks up let me just see here like if I
82:52 - do this whoops like this does this pick
83:02 - up it picks up 120 here only if there is
83:07 - a nested one
83:15 - so let me like here if there's a nested
83:19 - one whoa something something terrible oh
83:26 - I forgot to put a number here if there
83:32 - is a nested one I know the mighty you're
83:43 - gonna have to do another edit point here
83:45 - cuz that people are laughing me people
83:49 - in the chatter saying I still don't know
83:51 - why it's reading the first bakit bracket
83:54 - clothes for both got it that makes sense
84:02 - because it's but it's parsing this
84:11 - [Music]
84:23 - really is that what it is
84:32 - outer one is dropped
84:35 - so it'll drop let me think about this
84:37 - right okay hold on let's go back to here
84:42 - if it finds a repeat get repeat where'd
84:57 - you get repeat yeah that's the start and
85:04 - it finds that I got it
85:06 - so it's grabbing why is the space fix it
85:12 - that's so weird
85:13 - so I don't understand I think I
85:14 - understand the problem but I understand
85:16 - why the space fixes it because when it
85:21 - finds the first repeat it's going going
85:24 - going going going on going and it stops
85:26 - here ah it needs to count how many of
85:33 - these there are okay and find the
85:36 - matching bracket all right we're gonna
85:43 - try this again hello okay g11 welcome to
85:51 - the live stream portion of the coding
85:53 - drain where it's now been an hour and a
85:55 - half of me still working on this okay
85:57 - okay gonna we're gonna do some little
86:02 - fake fake smoke and mirrors thing to go
86:04 - back and close these got it
86:18 - O'Kelly asking the chat what would
86:20 - happen if you did repeat three yeah it
86:24 - might parse that right that's an
86:25 - interesting question okay I'm gonna do
86:27 - the counting of the brackets I'm gonna
86:29 - do the counting of the brackets since a
86:31 - cloaca asked why not try to debug it
86:33 - step by step I definitely should have
86:35 - done that that would have been better
86:37 - okay okay I'm back what you don't
86:43 - realize is about an hour past of me
86:45 - doing some horrific debugging and if you
86:47 - want to find that I will link to the
86:48 - live stream version of this edited
86:50 - challenge in the video description those
86:54 - thing that you're watching right now
86:55 - which is not even though I am live it's
86:56 - not this okay this this is the code
87:01 - using only repeats left pen up and pen
87:04 - downs that will create this particular
87:06 - pattern and if I go and grab this I've
87:09 - pasted it here and if I go back to my
87:12 - example and I paste it in we've already
87:16 - seen it doesn't work what's wrong well
87:23 - weirdly I'm going to show you something
87:25 - weird if I put like a space here and a
87:27 - space here all of a sudden we have the
87:31 - pattern we were looking for all along
87:32 - but there's some weird buggy stuff going
87:35 - on why is it like a space but no space
87:38 - here is the issue so this took awhile to
87:41 - debug I will show you a way of finding
87:43 - the the way I found the error was by
87:46 - looking through a first of all the chat
87:48 - found this way before me and suggesting
87:50 - it I had to look and look and look where
87:52 - I found here all of a sudden in this
87:53 - last repeat here this command right
87:57 - right it didn't pick up the argument
88:00 - three it's blank so that's certainly why
88:03 - I'm not getting the pattern that I'm
88:04 - expecting to get now why is it doing
88:07 - that
88:07 - well the secret to that it's not a
88:09 - secret so much lies in the fact of the
88:12 - way that I parsed this bracket right
88:16 - remember if I have a repeat if I go here
88:19 - right I look for the first opening
88:22 - bracket that's the start the first
88:25 - ending bracket and that
88:26 - but what if there's a nested repeat if
88:29 - there's a nested repeat this is the
88:31 - starting bracket this is the ending
88:34 - bracket so it completely ignores it
88:37 - pulls it off here and then loses the way
88:39 - it's parsing it loses that three and
88:41 - somehow the having a space in between
88:42 - there kind of is able to still get that
88:44 - three by accident so what I really need
88:46 - to do is match the number of brackets so
88:50 - why love this dot text dot car at this
88:55 - 10 X plus plus does not equal the
88:57 - bracket this is this dot index so I
89:05 - think I need to do this in a different
89:06 - way maybe I need to count the number of
89:08 - of brackets so all right so bracket
89:15 - count equals equals zero okay and then
89:25 - for a long time let bracket count equals
89:30 - zero so first let me just do the bracket
89:32 - counts let's just do that so now
89:34 - basically I could say like I need so so
89:41 - okay like if I just sort of went all the
89:45 - way to the remaining tokens just for a
89:47 - second while while it has remaining
89:54 - tokens I could say this the character is
90:03 - this dot txt car at this dot index plus
90:07 - plus and if car equals a bracket this
90:14 - bracket bracket count plus plus bracket
90:21 - count
90:25 - and then it's I'm gonna say temporary
90:27 - equals this dot index and then set this
90:32 - dot index back to temporary so this is
90:37 - me just counting how many of these there
90:41 - are so this is not the greatest solution
90:46 - but it'll work for right now let me just
90:48 - see what happens where am I looking a
90:53 - parser jeaious line 20 is the number of
90:55 - brackets which is just 1 and I should
90:57 - really now include this as in the huh so
91:02 - many things I should have this just pull
91:04 - up here when i refresh the page do this
91:09 - all right so there were two brackets and
91:11 - then there were one bracket that makes
91:13 - sense
91:13 - so if there were two the start the start
91:21 - is correct
91:22 - while this Takhar at that index does not
91:26 - equal and so I need to so it's really
91:37 - this second while loop that I need to
91:39 - change
91:52 - this is like a kind of an easy problem
91:54 - but it's like I'm a tired person right
91:56 - now I need to eat lunch so and people
92:03 - are giving you all sorts of interesting
92:04 - suggestions in the chat yeah it would be
92:09 - easy with a recursion drop the get
92:11 - repeat function entirely ooh hold on
92:16 - there's some interesting suggestions no
92:21 - need to count just call command commands
92:23 - equal this dot this parse this text then
92:26 - change the parse command to skip o and
92:31 - return on a won't that be the same
92:33 - problem oh wait William this is so
92:36 - fascinating here bracket count equals
92:40 - one the way I did it was count plus plus
92:44 - for up close the repeat one count equals
92:48 - zero
92:49 - whoo I like that okay get all opening
92:53 - don't cry we heard with you were first
92:55 - parsing put bracket down and go on in
92:57 - the second while as oh so many great so
92:59 - many great suggestions TMC is saying
93:01 - only the shape changed the second while
93:02 - I like this idea
93:23 - so actually let's go back
93:29 - I like this I like a different idea here
93:33 - so Matt did this little I was counting
93:36 - which is fine all right I have a
93:47 - different idea
93:47 - now what if I think it's like finding
93:50 - the first one and finding the last one
93:53 - in this weird double wild loop way is
93:54 - kind of silly because all I need to do
93:58 - is keep track of I mean I do need to
94:02 - find the first one so let's stick with
94:04 - finding the first one and then basically
94:08 - once I found that first one bracket
94:10 - bracket count equals one so now what I
94:19 - want to do is while bracket count is
94:23 - greater than zero I'm gonna look at the
94:27 - character if character equals an opening
94:38 - bracket then then increase the bracket
94:42 - count else if it equals a closing
94:46 - bracket then decrease the bracket count
94:51 - and then I should have end should just
95:00 - now be wherever the index is wherever it
95:03 - last left off I might need to do minus
95:05 - one not sure right so this should be
95:08 - like I basically finding the first
95:10 - bracket just case there's like noise and
95:11 - spaces there and then I'm going to pull
95:14 - out I'm gonna it amazingly looking for
95:17 - where that last bracket is and if the
95:18 - last bracket comes bracket count will be
95:20 - zero I'll be done but if there are other
95:21 - brackets it's got to keep counting okay
95:23 - I should never use my drum sound because
95:29 - it always means it's not going to work
95:36 - all right there we go
95:42 - [Music]
95:54 - this worked I think this is done yeah
96:02 - that was really hard
96:03 - anybody else have any logo suggestions
96:07 - for me to paste in here
96:09 - Oh infinite loop Andrew Murray writes
96:12 - infinite loop if not enough closing
96:14 - brackets I'm not doing any error
96:15 - checking but actually since I'm live
96:17 - interpreting I do need to do some error
96:19 - checking all right fine
96:20 - fine one more thing so while bracket
96:23 - count is greater than zero and this dot
96:31 - remaining tokens I should just call this
96:35 - this should just be called remaining
96:36 - like remaining tokens is silly it's not
96:38 - remaining tokens it's like remaining
96:40 - stuff so this should fix that I mean it
96:43 - won't draw correctly but now right even
96:46 - if I do this like it's not doing it
96:51 - correctly but it's not breaking so you
96:55 - know weird things like this I just
96:56 - wanted to live interpret so all right so
97:00 - if you're watching this thank you this
97:05 - is a really fun project to work on
97:12 - that's well done let's go home hold on
97:20 - air handling during pent up and pen down
97:24 - that will work okay all right I just
97:27 - want to find one other logo patterns
97:35 - logo turtle gonna find me an interesting
97:39 - one
97:48 - like this forward let's repeat count
97:54 - right 89 mm oh that's the number of
98:00 - times are in the repeat I won't be able
98:04 - to do that I don't have that color like
98:13 - this one
98:22 - oops this one looks like it's kind of
98:25 - cool
98:43 - [Music]
98:54 - decrease the stroke yeah
99:05 - all right
99:08 - rep count command will be good yep
99:10 - change the pen regex to to stop that
99:14 - live editing error yeah that's a good
99:17 - point
99:20 - Oh somebody somebody suggested something
99:24 - repeat 8 right 45 the coding train logo
99:30 - logo code pull request number 3 okay
99:34 - thank you tasteful totes toasty file if
99:36 - you want me to try something file it as
99:38 - an issue here because that's where I can
99:40 - pull it up I can't copy paste from the
99:42 - chat pull request number 3
99:58 - whoo that's cool whoa whoa what all
100:10 - right but I need this as like a text
100:11 - file that is crazy so if you could paste
100:21 - me interesting things to try pasting it
100:23 - into the chat doesn't mean no good I
100:26 - mean I guess I could pull up the chat on
100:28 - the stream but I would prefer to grab it
100:31 - from the issues I think whoops I don't
100:42 - see any new issues tasteful toasty I
100:47 - would love to run that
100:58 - it's it's on the source on github well
101:02 - that's hard for me to find okay I can do
101:04 - it it's worth it the fact that you did
101:06 - that definitely I will look for it
101:09 - number three files changed got it
101:47 - not seeing it
101:53 - 8:40 by 760 is that why issue number 13
102:01 - has it as a text file hold on I just
102:07 - want to get this to work
102:26 - oops
102:38 - I'm not in the right place doesn't start
102:47 - in the center
103:11 - and what if I were to have the turtle
103:23 - start at zero zero there we go
103:26 - unbelievable still not big enough this
103:29 - is crazy
103:52 - why is it not getting bigger
104:02 - what happened here Oh cuz it's caching
104:05 - cuz I yeah sorry I forgot that I sorry I
104:10 - lost I'm lost in the world of this like
104:13 - insane thing that I found
104:36 - like I don't know what's going on
104:38 - anymore
104:42 - there yeah okay sorry start turtle at
104:46 - 20:20 yep
104:49 - all right there were some other
104:51 - interesting ones let me see here
104:57 - coding train logo a bunch of logo
105:00 - examples
105:04 - yeah but I can't do any of the ones I
105:07 - can only do the ones that this one I
105:10 - could do
105:22 - cool okay hold on all right hold on
105:36 - and
106:02 - hmm interesting that one's not in the
106:04 - center but okay all right
106:20 - okay let me let me finish this up
106:37 - whoops
106:50 - okay
106:55 - okay all right all right so this is
107:05 - complete it works I'm very excited about
107:08 - that people have pointed out some
107:10 - examples that I found like for example I
107:13 - could try to make this design let's see
107:17 - what happens if I post this in here
107:19 - right we can see oh I'm kind of off look
107:22 - where my starting point is off but now I
107:24 - could start to really be creative and
107:26 - and this the line is sort of thick here
107:28 - so I also feel like now that I'm doing
107:30 - more complex stuff I probably want to
107:32 - change the stroke weight back to one and
107:35 - we could see that looks a little bit
107:36 - nicer I just want to show you something
107:38 - though amazing if we go back to the logo
107:42 - repo before which is this is the state
107:44 - before I've done this video and I go to
107:46 - pull requests and I go for example to
107:48 - pour request number three from the
107:49 - tasteful toasty you can see here a whole
107:52 - bunch of other ones that you can see
107:53 - rate you can see that I could now try
107:55 - that should work with mine and I'm gonna
107:58 - show you something that's gonna blow
107:59 - your mind this ah let's make this work
108:02 - we have to make this work so I'm gonna
108:04 - go just before I leave think about other
108:07 - creative things you could add these are
108:08 - all the commands I am going to now go
108:11 - into index.html I'm going to put that in
108:14 - here hold on where it what's going on
108:17 - here I'm gonna let me give a carriage
108:19 - return here let me paste in all of those
108:22 - commands now I could now go back to here
108:26 - and do this we don't see anything so one
108:29 - thing that I really definitely need to
108:30 - do is give it a much bigger canvas so
108:35 - let's go back to create canvas you have
108:38 - to finish with this 900 by like 900
108:42 - something like that refresh but it's a
108:52 - little off-center
108:53 - oh let's let's change it to 2020 or zero
108:58 - let's actually just change it to zero
108:59 - zero and make it a little bit wider
109:08 - whoops there we go
109:12 - it is the Coney train loco made with
109:16 - literally with logo and all of these
109:20 - numbers here I hope you enjoyed this
109:22 - video there's so many things missing
109:23 - right there are all these logo if you
109:25 - look at the history of logo and you look
109:27 - at the language of logo there are lots
109:28 - of commands than I missed so I'll list
109:30 - some of those in the video's description
109:31 - try to implement those or also color
109:35 - how would you incorporate color with
109:37 - this how would you do think of other
109:39 - clever ways to make this interactive in
109:41 - real time to allow people to play with
109:43 - it
109:43 - so we now have a full interpreter here
109:46 - and finish with this project I can't
109:50 - wait to see what you make I'm gonna
109:51 - figure I'm gonna add this code to the
109:54 - this coding train logo repository and I
110:00 - will accept pull requests for
110:02 - implementing other commands bug fixes
110:05 - I'm adding things like color making the
110:07 - interface a little nicer so I'm probably
110:09 - gonna close out most of those pull
110:11 - requests that were implementations of
110:13 - repeat I thank you for them but but this
110:15 - will be now a community logo interpreter
110:17 - project that will start from the code
110:19 - that is in this video good bye everyone
110:22 - and see you in future coding challenges
110:29 - okay all right everyone that's gonna get
110:37 - edited into something are we good did I
110:40 - miss anything super crazy oh this is so
110:44 - cool
110:51 - all right so what I'm going to do right
110:56 - now let's do a little bit of management
110:58 - here of the repo
111:04 - let me grab this okay so whoops hold on
111:32 - let me what I'm gonna do is I'm going to
111:40 - now grab let me get this back to just
111:44 - two hundred two hundred one hundred one
111:48 - hundred what's the zero I forgot what
111:50 - that is
111:51 - Oh the angle I'm gonna go to here and
111:57 - put this back to this and I am going to
112:06 - grab this stuff from the desktop logo
112:13 - command I'm gonna grab all these things
112:16 - I'm gonna go to documents logo I'm gonna
112:21 - paste this stuff in here replace replace
112:24 - replace I'm gonna say get status get add
112:37 - new version from livestream git push
112:43 - origin master repeat parser I'm just a
112:49 - new parser so I am now pushing this to a
112:54 - new branch look somebody is banging on
113:00 - the door I don't know what that is
113:02 - I'm gonna pull request this parser code
113:09 - from live stream this pull request
113:17 - number ten will be very sad I'm sorry
113:19 - Tony and pull request number ten this is
113:23 - the new code from the live stream with a
113:27 - parser object
113:37 - and
113:44 - okay look cameras going off
113:57 - and now I'll merge this what what the
114:02 - hey ho and that was number 24 so now I
114:12 - have to go through and I'm gonna write
114:20 - some nice so let's look at all these
114:23 - let's take a minute to look at the work
114:25 - that all these people did I'm gonna
114:26 - close these things so this is a
114:29 - implementation of a repeat that how does
114:33 - it work
114:36 - pre-process the string and ah this is
114:39 - very similar to what I did this looks
114:41 - quite similar to what I did in terms of
114:44 - counting the brackets this is great okay
114:50 - my own version today in 24 thank you for
114:57 - this submission and probably gonna just
115:08 - put this same comment and all of them
115:11 - implemented recursive repeat and the
115:14 - coding train logo oh this is tasteful
115:19 - toasty who is watching right now
115:20 - thank you this was so fun to include in
115:25 - the live stream so thank you tasteful
115:31 - toasty for this implementation and this
115:39 - is really cool this is great referenced
115:43 - it several times during the livestream
116:00 - and now we're going to add parser
116:04 - command before loop draw prepares object
116:09 - with function wow this is a really
116:10 - interesting solution in okay now I am
116:29 - going here we go repeat implementation
116:32 - this one is from web bian weapon I
116:35 - successfully implemented the repeat
116:37 - command awesome let's look at the code
116:41 - here once again I should have looked at
116:46 - these right nice little like bracket
116:48 - counting and actually just repeating it
116:51 - great work
116:55 - whoops I'm in pull request number 12 I'm
117:03 - gonna close this one now I'm going to go
117:10 - into oh a turtle was added this is
117:16 - another nice implementation
117:18 - oh this executed command executing a
117:20 - stack this is great parsing the repeats
117:24 - and making laddie some like turtle e
117:27 - stuff cool
117:36 - okay
117:42 - with some similarities okay close this
117:49 - one thank you everybody for the time
117:52 - that you took to submit these implement
117:56 - repeat for a turtle
117:59 - this one is handle command this is very
118:05 - similar to what I did it looks like
118:06 - handle command function and parsing
118:10 - fancy more parsing excellent work great
118:14 - work - thank you fabritius
118:21 - and now we're gonna go we've got 9 left
118:25 - here looping color and make everything
118:28 - gorgeous looking whoa oh thank you for
118:34 - the readme stuff oh this is great so so
118:40 - let's see oh wow this is really nice
118:43 - oh so this would be this this I would
118:49 - love to okay so let me write here this
118:52 - looks like it has some stuff that I
118:53 - could include
119:04 - love to include the color and some
119:07 - design improvements from here could you
119:12 - submit them as separate pull requests
119:17 - using the repeat using the new parser
119:20 - stuff from number 24 also if you could
119:26 - include a clickable a demo a link to a
119:36 - demo running in the browser this makes
119:39 - it easier to review but screenshots are
119:44 - also good so we leave this open leave
119:53 - this one open here that one's gonna
119:57 - leave open add a very forgiving command
119:59 - parsing some more command parsing look
120:05 - at that nice error checking well look at
120:08 - this I like this eat eat the code next
120:12 - come out well this is very similar next
120:13 - command like my next token thing this is
120:17 - very similar alright we are now to
120:26 - visual redesign cool
120:36 - Oh excellent oh I like that is this is
120:42 - that turtle okay thank you thank you
120:55 - yeah I can't type thank God
120:57 - Thank You lovely how about we combine
121:04 - this with elements from number ten is
121:18 - the image of the turtle copyrighted all
121:26 - right so there we go there's that repeat
121:33 - and drawing option to draw a train draw
121:40 - a train ooh cool
121:47 - can you post maybe we can include
121:56 - interesting designs like the train as
122:04 - part of the readme okay okay
122:13 - um let's see where are we I feel like
122:15 - I'm when else am I gonna do this so I
122:16 - must do this we'll have live streaming
122:17 - here a better read me thank you to Dan
122:21 - here ah okay so thank you I definitely
122:30 - want to improve the readme to have more
122:36 - info about logo the video the the videos
122:45 - and and features related to this project
122:53 - they don't think that I want to do
122:59 - voting at the moment however thank you
123:04 - for thinking of this now that I have
123:10 - number 24 okay so thank you for that I
123:17 - definitely would accept pull requests to
123:19 - fix up the readme because there's
123:20 - nothing in there oh look at this oh it
123:26 - has that is the turtle
123:28 - that's fun cool awesome wow there's a
123:35 - lot of stuff here now now that I have
123:43 - number 24 I that I am no longer looking
123:52 - for code to repeat but I would accept a
123:59 - pull request with a nice turtle as well
124:11 - as as well as support for more commands
124:16 - maybe you can submit anything you want
124:22 - to pull recently please let's see please
124:28 - feel free to resubmit it's helpful if
124:34 - full requests just address one new
124:38 - command etc
124:44 - okay so I'm gonna close this one and now
124:50 - alternative for iterating the input and
124:52 - intent a repeat for output this one is
124:57 - from Ren Akira and we could see awesome
125:02 - excellent oh so nice like tokens shift
125:04 - oh there's some nice techniques here
125:06 - repeat function this is great that's
125:12 - wonderful thank you for this one chances
125:17 - chances and more Oh what is this
125:38 - so this is some kind of like pull
125:41 - request review system interesting and a
125:45 - to-do list okay well I like that this is
125:56 - great thank you
125:57 - I think I I think the the to-do list
126:05 - would probably work better in the issues
126:10 - and I'm no longer seeing my other
126:16 - comment re voting but I would gladly add
126:22 - informational stuff to the readme okay
126:27 - thank you for taking the time to to
126:33 - submit this okay
126:38 - now command parser I slightly rewrote
126:45 - the commands parser I have separate
126:46 - command lists into no arcs and one args
126:49 - oh there's some this is some excellent
126:51 - ah this is interesting so there's one
126:57 - argh
126:58 - and commands with two args interesting
127:00 - that's a new ID and thought of that
127:01 - turtle is re rewritten a bit here I
127:05 - think this I think 20 whoops thank you
127:09 - so much for this great work I
127:19 - implemented my own version today in
127:24 - number 24 okay we are getting through it
127:32 - ad okay we've already got a real pull
127:35 - request here ex new commands repeat
127:38 - count i commands i if arg equals repeat
127:47 - count and repeat count command
127:49 - okay this looks reasonable anybody who
127:52 - have any I would love to see like so I'm
127:56 - Henry 808 six in the in the chat it
128:00 - looks like just a minute this pull
128:01 - request so I definitely want to merge
128:04 - this you know obviously there's no unit
128:06 - testing for this project so I can't tell
128:08 - if this is gonna break anything looks
128:10 - totally reasonable to me
128:12 - one one thing that you can do Henry you
128:16 - know in a case like this is to if you're
128:19 - hosting your branch via github pages you
128:22 - could you could then like I provide in
128:26 - the description here like a link to it
128:27 - so then I could click on it and see that
128:29 - it works I'm gonna throw caution to the
128:31 - wind here and thank you very much for
128:33 - your efforts I'm gonna just add lots of
128:36 - like nice emojis here and I'm just gonna
128:40 - throw caution to the wind and I am going
128:42 - to merge this pull request excellent so
128:48 - that's that I'm gonna look at the issues
128:50 - now project now has its own
129:02 - implementation in number 24 so let's
129:10 - close this issue let's I think I ended
129:19 - up just doing my own in number 24 okay
129:26 - if you can be closed test data what's
129:30 - this oh oh look at this
129:34 - choo choo okay Wow
129:45 - amazing how how should we include these
129:50 - as part of the project in the readme in
129:56 - a wiki so let's leave that open your
130:13 - submissions please you will continue to
130:23 - contribute
130:40 - all right a bunch of logo examples
130:44 - awesome thank you shall we add this to
130:49 - the reaming all right coding training
130:54 - logo how do you do that oh that's all
130:59 - that's that's cool awesome it's the same
131:06 - sort of question here and loops formula
131:29 - okay and something similar I wrote and
131:41 - this this would make more sense train
131:46 - website if you like so website under
131:52 - here wiki community contribution guide
131:58 - alright so now under the issues what's
132:03 - this oh yeah okay label let's make a new
132:13 - label called examples
132:16 - oh that's annoying let's make a new
132:20 - label called examples for related to
132:25 - example logo designs and let's put that
132:30 - here let's label these I guess this is
132:43 - also an example we need a this has a
132:49 - license let me actually add I think I
132:58 - have the Code of Conduct actually for
132:59 - the coding training Code of Conduct
133:01 - which is fine some worry about that
133:03 - right now okay so this needs readme
133:11 - updates
133:12 - what does the readme need link to web
133:17 - demo link to coding train comm challenge
133:21 - pages
133:28 - link to his information and history of
133:32 - logo itself what else do we need on this
133:37 - homepage the readme here link to YouTube
133:43 - videos and example logo designs so
133:53 - things that I'm looking for to be added
133:59 - to the readme okay and this should be
134:06 - let's call this documentation yeah for
134:13 - related to documentation let's add that
134:18 - label okay so it's more pull requests
134:29 - okay okay so and then I probably should
134:35 - make a create okay I'm gonna add
134:53 - contributing markdown and contributing
135:03 - guidelines need to add to contributing
135:08 - MD linked to code of conducts
135:14 - information about so about what you can
135:21 - contribute which is design ideas support
135:28 - for additional logo commands and what
135:35 - else a bug fixes just um you know good
135:42 - too far okay so there we go so this is
135:47 - also documentation
135:53 - and there we go okay everybody people
135:57 - are still watching this so I did some
136:00 - cleanup to this repo so this can be I
136:05 - would love for people to continue to
136:06 - work on this in theory right now is this
136:10 - hosted with github pages it is if I go
136:13 - here this is what it looks like right
136:15 - now but I would gladly so this can all
136:19 - be improved now all right so it is 12:15
136:23 - I think I'm finished for at least part
136:27 - one of today's livestream which I've got
136:30 - one one video out of and now let me just
136:33 - look let me let me let me check a few
136:35 - messages here and figure out what I'm
136:37 - gonna do this afternoon because I'm
136:38 - gonna come back I'm just gonna see here
136:58 - so I'm just checking here to see okay
137:19 - all right okay all right everyone all
137:27 - right so the things that I didn't get to
137:31 - so I'm reading my email now so much to
137:36 - do so much to do the things I didn't get
137:43 - to today are save and load your model
137:46 - with transfer learning as well as
137:49 - working with the sketch RNN I was I'm
137:54 - sorry working with the Google quick draw
137:55 - dataset so I am going to come back I
137:58 - think it would be good for me to take a
137:59 - lunch break and I have I'm like free
138:04 - until 3:00 for it so what I'm gonna do
138:09 - is my goal is to come back between 2:00
138:12 - and 4:00 so let me actually put that in
138:15 - right now let's say 2:00 o'clock studio
138:22 - I'm going to actually create the event
138:24 - right now and I'm gonna go to live
138:28 - streaming and I'm gonna go to events 2
138:39 - p.m. by the way is an hour and 40
138:41 - minutes from now my time so I'm gonna
138:42 - create can I do like no I can't like
138:46 - duplicate this event new live event
138:51 - quick draw data I'm gonna set this for 2
139:02 - p.m.
139:03 - possible I would get started earlier but
139:06 - unlikely ending at 4 p.m. and and so let
139:13 - me create this event
139:26 - now that looks set the ingestion
139:34 - settings and changes so now if I go to
139:53 - YouTube the coding train we should see
139:59 - here upcoming live streams huh did I not
140:12 - live in 99 minutes how is that ninety Oh
140:15 - 99 minutes
140:16 - hold on I don't know why it's not
140:17 - showing up maybe because I'm
140:20 - live-streaming right now
140:22 - it doesn't want to show upcoming live
140:25 - streams there we go so this is now I'll
140:28 - set my reminder this is now where I will
140:31 - be coming back in 99 minutes to do the
140:37 - Google quick-draw stuff thank you
140:42 - everyone for tuning in today I'm glad to
140:46 - what is now really the completion of the
140:49 - logo coding challenge any additional
140:50 - stuff will just be managed through that
140:55 - repository I have to admit like my
140:57 - confidence level in my ability to
140:59 - continue to manage that repos very well
141:02 - until I sort of work out a system for
141:05 - doing that better with the community and
141:06 - maybe have a set of repo managers but at
141:10 - the moment and so if you're interested
141:12 - in volunteering for that I don't know
141:14 - that that's a you know III hasn't a to
141:16 - ask people to volunteer to do work that
141:18 - helps me but that's certainly a
141:21 - possibility all right
141:26 - 98 minutes what should I have for lunch
141:29 - that's the question don't know
141:36 - Thank You everybody I'll be back for a
141:38 - little bit more this afternoon
141:44 - I'm sorry Buddha but and now I have to
141:47 - hit the stop streaming thing okay where
141:49 - do I do that that was exhausting stop
141:58 - streaming