00:01 - hello and welcome to another programming
00:02 - from a toz video tutorial in this video
00:05 - tutorial I want to talk about the
00:06 - JavaScript string
00:09 - object um so what is the JavaScript
00:11 - string object well if you've ever
00:12 - written code like this bars equals
00:15 - hello now I have a variable and it has a
00:18 - string of characters a sequence of
00:21 - characters in it h e l l o this is a
00:23 - string object so on the one hand I can
00:26 - use this string object to put text in a
00:29 - Dom element I can use it to paint text
00:31 - onto a canvas I can use it to print text
00:33 - to the console but what I'm going to be
00:36 - doing in future videos is manipulate
00:39 - string objects so if I load all the text
00:41 - from a file and I have this big string
00:43 - object with all paragraphs and
00:45 - paragraphs about rainbows and I want to
00:47 - like chop it up and mix it up or analyze
00:50 - it or make poetry out of it I need to
00:52 - learn how to manipulate string objects
00:54 - in JavaScript so this is what I want to
00:56 - look at the basics of and then next week
00:58 - or in the next videos that you might see
01:00 - in the future that might already be
01:01 - there I'm going to look at something
01:03 - called regular Expressions which is
01:04 - really going
01:08 - to uh just like explode the possible
01:11 - things you could do with um text and uh
01:14 - JavaScript but for right now we're going
01:16 - to live with just the string object
01:18 - itself and so if you want to learn about
01:21 - all the possible things you can do with
01:22 - string objects um one the place that you
01:25 - I I would say that you can go to is the
01:28 - um Milla document the Milla uh document
01:32 - JavaScript documentation look under
01:34 - reference global object string I'll
01:36 - include a link to this page in this
01:38 - video tutorial and you can see ah
01:40 - there's like a nice little tutorial here
01:41 - that kind of runs through a lot of stuff
01:43 - you can see all of these functions that
01:45 - you can call on strings like index of
01:48 - and normalize and repeat and slice and
01:50 - strike and blah blah blah so I'm not
01:51 - going to go over all of this with you
01:53 - I'm going to give you a little bit of a
01:55 - kind of like weade into the Waters of
01:57 - manipulating string objects you can also
01:59 - find my not on this on um this
02:01 - particular web page the a toz
02:03 - programming website which uh I'll also
02:05 - link to this page in this video tutorial
02:07 - so I made a list over here on the
02:09 - Whiteboard of things that I want to look
02:11 - at um in this video so I'm going to look
02:13 - at
02:15 - um uh really just three pieces of
02:18 - functionality that have to do with
02:19 - strings a long list of the Milla
02:21 - documentation there's a lot of other
02:22 - ones that I encourage you to investigate
02:24 - and play with but three that I find
02:25 - useful to some things that I might do
02:28 - one is index of another is substring uh
02:31 - the length property of strings is
02:32 - something that you need quite often and
02:35 - then I want to also look at splitting
02:36 - and joining which are operations that
02:38 - I'm going to be doing continuously
02:40 - throughout many uh tutorials and
02:42 - examples in this video series there's a
02:45 - little bit of funny business about this
02:48 - that I have to uh get to and talk about
02:50 - at some point but I'm not going to right
02:51 - now okay so this is my list let's start
02:53 - let's just start like let's go in
02:54 - reverse order or some sort of strange
02:56 - other order let's talk about length so I
02:59 - have a example set up already uh right
03:02 - here that you can see first of all I can
03:04 - just say s. length right here I should
03:07 - just be doing all this in the console
03:08 - really if I say s. length you can see I
03:11 - get a length of five because hello has
03:13 - five characters h e l l o let's just
03:16 - look at how we would do this in code
03:18 - right I have a simple sketch which all
03:20 - it does right now is it has a text input
03:22 - box when I hit submit I create a
03:24 - paragraph element with that text input
03:26 - box I can go to my code and one thing I
03:28 - can do is I can say I'm just going to
03:31 - say VAR s equals text
03:34 - field. value so this is pulling what's
03:37 - in that text field and placing it into a
03:40 - string object and now I'm going to say
03:43 - uh create ps. length so now when I run
03:47 - this code again you can see that text
03:50 - has 42 characters so if you want to
03:52 - build a check to see if your text can
03:54 - fit into a tweet application you can see
03:56 - how if it's greater than 140 characters
03:58 - you know spit out this is too long to
04:00 - tweet or whatever so you can see that's
04:02 - one property we can use now here's
04:05 - another property here's another function
04:07 - that's really useful index of so let's
04:11 - say I say VAR s equals
04:14 - hello
04:16 - whoops and I say s index of rainbow what
04:21 - am I going to get ne1 index of is a
04:25 - function that searches for some text
04:28 - like rainbow in some other text S I'm
04:32 - looking for Rainbow in the text hello
04:34 - well rainbow doesn't exist in the text
04:37 - hello so what do I get negative one
04:40 - negative one means I can't find that
04:42 - substring in that larger string so this
04:45 - can be quite useful to you if a user
04:47 - types in some text and you want to
04:48 - figure out did they type in this word or
04:50 - search for a word in that piece of text
04:52 - now what else how what does it work how
04:55 - does it work if that text is actually
04:57 - there so let's look at that so let's
04:59 - actually add
05:00 - this so I'm going to say um VAR index
05:06 - equals s. index of
05:09 - rainbow and then I'm going to say create
05:11 - P index so I'm going to run this again
05:15 - and now I'm going to hit submit and I
05:16 - got 33 why did I get 33 well I'm going
05:19 - to say rainbow rainbow rainbow rainbow
05:21 - rainbow rainbow rainbow rainbow rainbow
05:23 - rainbow rainbow rainbow rainbow rainbow
05:26 - okay and now I'm going to hit submit and
05:27 - you can see I got zero so what is it
05:29 - doing I'm going to say 0 0 1 2 3 4
05:34 - rainbow I got five so what index of is
05:38 - doing is it's saying hey this is the
05:40 - index of the substring you're searching
05:43 - for 0 1 2 3 4 a rainbow starts at index
05:47 - number index five so this can be really
05:50 - this seems sort of like trivial and
05:52 - silly right now but you might load a
05:54 - massive amount of text in and you might
05:56 - want to find where something and this
05:58 - can be good for scraping and parsing ah
06:00 - I want to find stuff that's in between
06:02 - this so I have to find this and where's
06:03 - that and then I want to find something
06:05 - else and then I'm going to use another
06:06 - function I'm going to show you substring
06:07 - to plot something in between so you can
06:09 - see this is what index of does um so
06:13 - let's look at
06:15 - um actually that's fine right now I'm
06:17 - going to leave it at that oh one thing I
06:19 - should mention though is what about the
06:20 - case where I said rainbow
06:22 - rainbow boy do I love
06:25 - rainbows right in this case I always get
06:28 - zero
06:30 - how and but there's only one instance of
06:33 - it's always giving me the first rainbow
06:35 - but look what I can do what if here I
06:37 - say index of um and hold on um let's put
06:43 - this one thing I want to do is sorry I'm
06:44 - gonna put this as the default
06:47 - text in the text box and then here I'm
06:50 - in index of I'm going to do something
06:51 - weird where I'm just going to say comma
06:54 - 10 and I'm going to hit submit and look
06:57 - I got
06:58 - 30 why did I get 30 let me take out that
07:00 - comma
07:03 - 10 I got zero so here's here's something
07:08 - that the index of allows you to do it
07:10 - allows you to say search for the first
07:12 - instance of rainbow after a certain
07:15 - index so by default it'll start
07:17 - searching from zero but here I'm saying
07:19 - just start searching from the 10th
07:20 - character so here's a difficult
07:22 - programming exercise for you write an
07:24 - algorithm that searches using index of
07:26 - for every instance of rainbow so find
07:28 - the first one then search for the next
07:30 - one after the first one then search for
07:32 - the next one after that one and keep
07:34 - doing that until you get a negative one
07:36 - maybe I'll try to post a solution to
07:37 - that or make that as a coding challenge
07:39 - but that's something that you could try
07:40 - to do
07:42 - okay that's index up one more function
07:44 - that I want to show you in this
07:46 - particular video that I think would be
07:47 - useful to you is
07:49 - substring so what I'm going to do now is
07:53 - I'm going to
07:55 - say VAR new text equals s. substring
08:01 - uh 5 comma
08:03 - 7 and I'm going to run this it's submit
08:06 - o uh index is not
08:09 - defined uh create piece sorry new text
08:12 - run this again you can see I get o w why
08:17 - because 0 1 2 3 four five five is the O
08:22 - I want a substring starting at five and
08:24 - where do I want it to end six
08:28 - oops oh
08:30 - w67 oh it's ending on a space bad
08:32 - coincidence there so let me change this
08:35 - and change this to um actually I'll just
08:37 - change the text so I'm going to take out
08:40 - the spaces am I going to get o WR or am
08:44 - I going to get just o w think to
08:46 - yourself what's it going to be I still
08:49 - get o so this is a little goofy thing
08:51 - with substring but let's say I have the
08:53 - text h e l l o 0 1 2 3 4 if I say
09:01 - substring between one and four I'm
09:03 - including one but I'm excluding four so
09:07 - I'm guess getting L there so this is how
09:10 - substring works you might ask yourself
09:12 - well that's annoying that's weird why is
09:13 - it done that way there's actually a
09:15 - pretty good reason which is number one
09:17 - what's the length of this string three
09:20 - substring three what's four minus one
09:22 - three and often something you want to do
09:25 - is get a substring from some point of
09:27 - the text to the end of the text and in
09:29 - that case all I need to do is say give
09:32 - me a substring and here's something I
09:34 - could do I could say substring from s.
09:37 - length divided by two all the way until
09:41 - the end s. length so this is now my code
09:45 - right give me a subring between the
09:46 - middle of the string and the end of the
09:50 - string you can see do I love Rainbow do
09:52 - I love rainbows there is an answer to
09:55 - this question I don't have a sound
09:57 - effect or anything but the answer is I
09:59 - think it's you not it's yes okay so uh
10:02 - um do I love rainbows yes so you can see
10:03 - no matter what I this is the first half
10:08 - this is the second half and I hit submit
10:11 - and look at that that's amazing I got
10:13 - this somehow those worked out to be the
10:15 - exact number of characters I don't see
10:16 - how that's possible but it did uh this
10:18 - is the second half you can see how that
10:20 - works getting a substring of the second
10:21 - half so you can think of a lot of here's
10:23 - an exercise for you um what if you have
10:27 - something like this
10:29 - the
10:31 - temperature outside is 72 degrees
10:38 - fit write an algorithm that pulls out
10:41 - the number 72 without knowing that it's
10:44 - going to be the number of 72 so no
10:45 - matter what I type
10:47 - here every time I hit submit I get 72 21
10:51 - 50 how do you search for and and by the
10:54 - way also I could change this to a
10:56 - temperature or well the temperature
10:58 - outside is so it's not a fixed length
11:00 - how do you search for where is colon
11:03 - space is so that you know where the
11:05 - number starts and how do you search for
11:07 - where space degrees is so you know where
11:09 - the number ends and by the way it should
11:11 - still also work if I type in 101 so
11:13 - that's a programming exercise for you
11:15 - create a generic phrase of any length
11:17 - that and you need to pull out a subset
11:19 - of text of any of any length out out of
11:22 - that phrase um this is just one scenario
11:24 - this has to and by the way next week
11:26 - when I do a video tutorial about regular
11:28 - Expressions you're going to see
11:29 - a totally other magical
11:33 - powerful way of doing it okay so um this
11:36 - is the end of this uh video tutorial
11:38 - about strings there's all sorts of other
11:41 - things that I've missed this is just a
11:43 - small taste of it try some of those
11:44 - exercises try looking at the
11:46 - documentation page you know pick a
11:48 - random uh function like slice or search
11:51 - and see what a lot of these might
11:52 - require reg Expressions um and see what
11:55 - you get ah I forgot something on my list
11:58 - over here
12:00 - I want to briefly talk about briefly
12:01 - before I leave you in this video I want
12:03 - to talk about splitting and joining so
12:05 - let's just look at this this is an
12:07 - incredibly common operation that I need
12:10 - in so many videos and I could make
12:11 - another video about it but I'm going to
12:13 - leave it in this one so let's look at
12:15 - this because and and I'm going to get to
12:16 - more about this next week with regular
12:18 - Expressions so this is just a little bit
12:19 - of a so I'm going to use
12:22 - so I'm going to use right
12:25 - now there two functions that are part of
12:29 - the P I'm going to show you two
12:30 - functions that are three functions
12:32 - really that are part of the p5js library
12:35 - one is split one is split tokens and one
12:38 - is
12:39 - join now next week I'm going to show you
12:42 - how to use the native JavaScript split
12:44 - function to use regular expression so
12:46 - I'm going to kind of redo this but in
12:47 - this video I'm going to look at the p5js
12:49 - function split and we show you why this
12:51 - is so
12:52 - useful all almost all of the text
12:55 - analysis algorithms that I'm going to
12:58 - demonstrate later are based on word
13:00 - counting and one of the things you need
13:01 - to do with word counting is split a
13:05 - paragraph of text and a multiple
13:07 - paragraphs of text into sentence chunks
13:10 - into word chunks that sort of thing so
13:13 - um I'm going to do that right I'm going
13:14 - to show you how to do that with split
13:16 - and it's actually quite an easy
13:18 - operation so um
13:22 - basically I'm going uh and I'm just
13:24 - going to go to the uh sketch right here
13:27 - um whoops there's a a uh something
13:31 - whoops just missing here so I'm GNA
13:33 - leave this this this this gives you half
13:35 - the text but I'm just going to do
13:36 - something over here in the console which
13:38 - is vars equals uh text field.
13:42 - value so now I have in the variable s
13:45 - rainbow rainbow boy do I love
13:48 - rainbows and I'm going to say split s
13:52 - just see what I get so look at that I
13:54 - say split s on its own I don't really
13:56 - split it but I get an array and I get an
13:58 - array with the entire sentence in there
14:00 - the whole point of splitting text is to
14:02 - take one chunk of text and split it into
14:05 - an array so what if I say s and comma
14:10 - space in quotes you can see now look
14:13 - what I have I have an array with each
14:16 - word as a separate
14:19 - element so I'm going to do a few things
14:21 - here I'm actually going
14:23 - to do that right now in my code I'm
14:26 - going to say VAR words equals
14:29 - split s by space and then I can Loop
14:36 - through all of the
14:39 - words and do something with them
14:41 - individually I can say uh create P words
14:45 - index I so now you can see I get a
14:48 - different paragraph element for every
14:50 - word in there now let me add a comma in
14:53 - here and I'm going to hit uh I'm going
14:55 - to hit refresh and I'm going to add a
14:57 - comma in here notice how the first word
15:00 - has a comma H so what might I do in this
15:04 - case I might go to my code and I might
15:06 - say Okay split by space comma or comma
15:11 - space now look what happens I'm going to
15:13 - add the comma in there I'm going to hit
15:15 - submit now I just got two things rainbow
15:19 - and rainbow boy do I love rainbows
15:21 - because it's split by comma space and
15:22 - the only time a comma space appears is
15:24 - Rainbow comma space what I want to do is
15:27 - not say split by comma space split by
15:30 - comma or space and again a regular
15:32 - expression is going to be a nice
15:33 - solution to that but for right now
15:35 - without it there's a p5js function
15:37 - called split tokens and if instead of
15:38 - using split use split tokens it'll
15:40 - actually do that for you so I'm going to
15:42 - do this I'm going to put the comma in
15:43 - there I'm hit submit and you can see now
15:45 - it worked there's ways of retaining the
15:47 - delimiters not retaining the delimiters
15:49 - I'm going to show you more stuff about
15:50 - that uh in a future video but these are
15:53 - just the basic idea split and split
15:56 - tokens and join by the way does the
15:59 - absolute inverse so one thing I can do
16:01 - is I could say I could now say
16:03 - words. sort I think it'll sort it in
16:07 - Array I think it'll sort it by the
16:09 - default sorting and then I could say uh
16:13 - uh s equals um join
16:18 - words and I think I probably might make
16:20 - a new array so I need to say words
16:21 - equals words. Source sort and then I can
16:24 - say create PS and I'm going to comment
16:28 - this out
16:29 - so what I'm doing now is I'm taking this
16:32 - turning it into an array sorting it in
16:33 - alphabetical order putting it back
16:35 - together and then displaying it and you
16:37 - can see boy do I love rainbow rainbow
16:40 - rainbows and we can see this should be
16:43 - in alphabetical
16:45 - order alphabetical be in order should
16:48 - this so you can see here's a quick
16:49 - algorithm I've done something here to
16:52 - take a a sentence split it up sort it by
16:54 - alphabetical order and display it back
16:56 - to the user I'm sure you could think of
16:57 - something much more creative to do with
16:59 - this Paradigm of text input and text
17:02 - output and in the next video I'm going
17:03 - to show you uh do a coding challenge
17:06 - about how to implement Jackson mclo
17:07 - dastic uh which I'll explain in the next
17:10 - video as well um as text input text
17:12 - output okay uh thanks very much and yes
17:15 - I apologize for not using Celsius in
17:17 - this video okay thanks for watching and
17:19 - I'll see you soon in the next one
17:26 - [Music]