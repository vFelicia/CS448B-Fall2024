00:00 - hello I am going to do a coding
00:03 - challenge with the wikipedia API um I
00:05 - don't think I've done this before
00:07 - I'm not exactly entirely sure what I'm
00:09 - going to build in a way it might be
00:11 - better for me to just do a tutorial
00:12 - about the Wikipedia API but let's make
00:14 - this a challenge so this is what I'm
00:15 - thinking there's a lot of interesting
00:18 - things you could do if you can get
00:21 - access to the contents of Wikipedia you
00:24 - can make poetry machines and all sorts
00:25 - of experimental text things but one
00:28 - thing I know that people have done
00:29 - effectively is make games that you can
00:31 - play by sort of crawling and moving
00:32 - around Wikipedia and there are lots of
00:35 - interesting examples about that
00:37 - hopefully to get the chat so what I'm
00:39 - gonna attempt to do I think is create a
00:42 - sketch where I'm gonna say user input
00:49 - I'm going to create a little user input
00:51 - box and I'm gonna say user input equals
00:55 - I'm going to use the p5 function create
00:57 - input so now we should if I go to the
00:59 - code we should have a nice little input
01:01 - box and I'm gonna say and you know what
01:06 - I'm actually gonna do let me do this
01:07 - differently instead of using the create
01:10 - function let me get rid of the styling
01:11 - stuff let me actually put it in the HTML
01:15 - so Wikipedia coding challenge thing I'm
01:20 - hoping them and make something not so
01:22 - interesting and that you the viewer will
01:24 - learn and see how I did it but have a
01:27 - more creative and mind to make something
01:29 - more interesting and exciting so I'm
01:31 - gonna say word and then I'm gonna say
01:34 - input ID equals user input input so I
01:41 - just I prefer to like put the the
01:42 - elements that I want on the web page in
01:44 - HTML so now we can see and I so now what
01:49 - I can do instead of this I can say
01:51 - select so I'd rather just select it and
01:57 - now we have access to what's written in
01:59 - it in and so what did i do did I do
02:02 - something wrong input is this something
02:04 - wrong with my HTML here oh yeah this
02:06 - should be h1 thank you so there we go
02:09 - so and actually let me make it h2
02:12 - because it's
02:13 - large there we go so I want to enter in
02:16 - a word here hello and hit like enter or
02:19 - something so when I hit enter I can
02:23 - handle that event saying user input
02:26 - changed go wiki so what I want to do is
02:31 - have a function when the user hits enter
02:34 - or tab that that will signal that
02:36 - there's been a change in the text field
02:37 - I could also add a button or something
02:38 - but I'm not worrying about interface
02:40 - design here you could worry about that
02:41 - when you redo what I do and now I'm just
02:43 - going to write a function and I'm gonna
02:45 - call it go wiki and the first thing I
02:49 - want to do is just get what is in that
02:53 - what is in it so first I want to say let
02:56 - word or term or something term equal
03:00 - user input value console dot log term I
03:06 - don't know what I just did there above
03:08 - okay okay so again this is my sort of
03:12 - friendly style of writing JavaScript you
03:14 - could do this in 15 different other ways
03:16 - that's what I would do the other thing
03:17 - I'm gonna do is I'm just gonna add
03:20 - rainbow in here so it looks that's not
03:23 - right I guess I say value equals rainbow
03:28 - so it's in there and then changed of
03:31 - null so the idea here is user input and
03:35 - then in here I said select oh user input
03:41 - so it'd be nice if I put an ad in there
03:43 - so there we go okay so now if I hit
03:46 - enter tab oh it hasn't changed actually
03:50 - yeah so rainbows so the funny thing is
03:53 - he says it started with a rainbow when I
03:54 - hit enter it did I should probably is a
03:57 - button must submit whatever I'm actually
03:58 - gonna skip bypass all of that and I'm
04:00 - just going to when the window code
04:03 - starts I'm just gonna immediately call
04:04 - go wiki so I'm using this just like I I
04:08 - want to setup an interface to make this
04:10 - dynamic with different words but I just
04:11 - want every time i refresh the page for
04:13 - it to run to test what's going working
04:15 - so I should see every time I run it I
04:17 - get a console log of what's in there I
04:19 - could change a different word so now the
04:21 - first thing I want to do is look for
04:23 - list of articles with that term in it so
04:28 - I you know I've already done the
04:32 - research about the Wikipedia API and how
04:34 - it works normally in these coding
04:36 - challenges I like to kind of like figure
04:37 - that out but I have to admit the
04:38 - Wikipedia document API documentation is
04:40 - a bit difficult is to read but here it
04:43 - is and I can see this this is basically
04:45 - what I'm using here I think is that this
04:47 - is looking for this URL tells to send
04:50 - you the content of a page but there's
04:52 - also like a URL to get us to do a search
04:54 - so you can look through and read all
04:56 - about how to do this but I'm actually
04:58 - just gonna I already have a URL right
05:02 - here this is for a search so what I'm
05:05 - gonna do here is I'm gonna say VAR URL
05:08 - equals and actually let's um let me use
05:12 - these let me make these and I'm gonna I
05:14 - have to use let not bar I'm gonna say
05:16 - put this put this back up at the top
05:18 - there I'm gonna say let search URL equal
05:24 - and this is the full URL I'm gonna go
05:27 - all the way to the end and close the
05:29 - quotes but I'm gonna take that out
05:32 - because what I want to do is have an end
05:34 - and then I want the search term to form
05:37 - dynamically so I'm gonna say let URL
05:43 - equal search URL plus term so let's just
05:48 - console.log that URL to see that that's
05:51 - working ah there we go
05:54 - so now you can see that's the full URL
05:55 - it's searching for a rainbow and that's
05:57 - dynamic because if I were to put in here
05:59 - you know unicorn and hit enter now I'm
06:02 - gonna get unicorn so the first thing
06:04 - that I want to do is just sort of see
06:05 - what's in that I want to connect I just
06:09 - want to copy this URL and I want to look
06:12 - at it I didn't get it I could just click
06:17 - on it instead of copying it but I'm
06:19 - gonna put it in here and look this is
06:21 - the JSON JavaScript object notation
06:25 - formatted data that's coming from the
06:27 - Wikipedia API and it's giving me a list
06:28 - of all the possible pages with the term
06:31 - rainbow in it so let me just pick the
06:33 - first one so how do I even get that
06:38 - so it's coming in as an so first of all
06:41 - I have to request it from my code I'm
06:43 - looking at in the browser so I want to
06:44 - say load JSON URL and I'm gonna say got
06:48 - data so let's make sure this comes
06:51 - through and I'm gonna write a function
06:53 - called got data and that's the callback
06:56 - for when the data comes through and I'm
06:58 - kind of entering into a dangerous
07:00 - territory of having all these nested
07:02 - callbacks first there's a callback for
07:04 - the input box then there's a callback
07:05 - for the data then I'm gonna do something
07:06 - else with a callback so someday I might
07:08 - want to refactor this using a sort of
07:10 - more thoughtful approach of how to
07:12 - sequence all these callbacks but I'm
07:13 - just gonna kind of do it willy-nilly
07:15 - right now console dot log data so let's
07:19 - see what happens here
07:20 - ah so look at this
07:25 - this is like the bane of everybody's
07:29 - existence on the Internet access control
07:32 - allow origin header not present I can I
07:34 - use it course to say ba ba ba ba ba ba
07:36 - so this is a really unfortunate
07:39 - it's the Wikipedia API doesn't seem to
07:42 - have something called cores which is
07:44 - cross-origin resources or something like
07:46 - that enabled allowing us to fetch data
07:49 - from another server from a server which
07:50 - is where our code is running some api's
07:52 - will let you do this some won't I'm
07:54 - pretty sure since I've used this before
07:55 - in code that there's a way around this
07:57 - it's called JSON PE I sort of made a
07:59 - video about this somewhere else
08:00 - it's JSON with padding and p5 has a nice
08:03 - option so often what I do and I've said
08:06 - this before is it didn't work I got
08:08 - cores let me just add another argument
08:10 - here JSON P so if I last add this third
08:13 - argument let me try it with JSON P and
08:15 - let me run it again and there we go it
08:18 - came through so we could say a lot more
08:20 - about that but in this case were just
08:22 - lucky we tried it first without JSON P
08:24 - now we try it with JSON P so what I'm
08:26 - looking for is it comes in as an array I
08:29 - want the first element the first element
08:31 - of the first element of the array so I'm
08:34 - going to try to see if I could say
08:35 - console log data 0-0 let's see what I
08:40 - get and I could pick a random one that
08:41 - might be more interesting but let me
08:43 - just pick the first one I got are mmm
08:47 - did I get the Oh zero No
08:51 - zero sorry I want data one the second
08:54 - element the first element of the second
08:55 - element there we go
08:58 - rainbow so let's just see rainbow let's
09:02 - try putting other things in here like
09:03 - unicorn and let's just try like a few
09:08 - characters like ar e there's a I guess
09:13 - there's a Wikipedia page where re P P
09:20 - you why okay what's going on here let's
09:24 - look at the full data 0 tu Y oh there is
09:34 - a Wikipedia page for P Y which is the
09:36 - friend spinergy the point is if I Panter
09:38 - it in a search term that was just part
09:41 - of a page I wouldn't get it back but you
09:43 - you'll think of something so let's
09:46 - change it to random so what I'm actually
09:48 - gonna do is I'm going to say let's
09:49 - length equal data index 1 length it's
09:53 - probably it's I think it's gonna just
09:54 - give me sort of 10 by default and then
09:56 - I'm gonna say let index equal floor
10:00 - random length so I want to pick a random
10:03 - index into that array and I'm going to
10:06 - say data index 1 data 1 index so this
10:09 - should give me a random article that'll
10:12 - be better
10:13 - let me go back to my thing here so now I
10:16 - got rainbow the South Korean band if I
10:19 - type in what was IP u why I got P why
10:23 - but there are other ones that won't it's
10:27 - I don't I got to have the submit button
10:30 - unicorn
10:31 - I got unicorn bubble so you can see I'm
10:33 - getting a random one each time let's do
10:35 - rainbow again I got Rainbow Brite let's
10:38 - do a unicorn again and I got unicorns
10:41 - the cricket team okay so we're getting a
10:42 - random article each time that's good I
10:44 - forgot what I'm doing here exactly but
10:46 - now let's at least get the articles data
10:48 - so the next thing that I want to do once
10:51 - I have that title so really what I'm
10:53 - saying is VAR title equals this now one
10:58 - thing about Wikipedia titles is let's
11:00 - say I try to actually look for unicorns
11:03 - cricket team
11:04 - on Wikipedia so I'm gonna go to wicked
11:09 - unicorns cricket team Wikipedia see if I
11:12 - can get that page here it is look at the
11:15 - URL the title the way Wikipedia works is
11:17 - it actually uses underscores wherever
11:19 - there are spaces so I'm gonna need to
11:21 - account for that so one thing I'm gonna
11:24 - do is I'm now gonna say title equals
11:26 - replace oh sorry title this is a
11:30 - JavaScript function that allows me to
11:32 - use a regular expression which you can
11:34 - watch my regular expression tutorials
11:37 - match any white space I could have just
11:39 - done this any like space but let's do
11:42 - I'm gonna be smart about this any one or
11:45 - more white space in a row with an
11:47 - underscore
11:49 - now let me console.log that title and
11:53 - let's see what this looks like you can
11:59 - see I got rainbow flag now oh you know
12:01 - what I forgot it only replaced the first
12:03 - space so I need to have the global flag
12:06 - here so it replaces all the spaces and I
12:10 - know you can see it replaced all the
12:11 - spaces rainbow trout etc rainbow rainbow
12:15 - break etc okay so here we go now what am
12:20 - I gonna do now I need to ask Wikipedia
12:22 - and here's the next this is I'm gonna
12:26 - call this the content URL this is the
12:29 - URL for asking for the content and I
12:31 - think you can ask the fact that it's it
12:35 - you can see at the end here it's titled
12:37 - equals I think you can ask for content
12:39 - of multiple articles but I'm just gonna
12:40 - do one so what I'm going to do now is
12:44 - back into my code I'm gonna go down here
12:47 - to see what I mean by this sort of
12:48 - nested call back thing that I've done is
12:50 - kind of a bit of a problem I'm going to
12:52 - say load JSON okay let are here
13:02 - let-let-let URL equal the content URL
13:09 - plus the title and then I call it
13:12 - content URL with lowercase RL content
13:16 - URL plus the title
13:18 - and then lo JSON URL and then got now I
13:22 - need another you know most people when
13:25 - writing JavaScript I don't most people
13:26 - would put in an anonymous function right
13:28 - in there that's the callback or use some
13:30 - type of other technique to have nested
13:32 - callbacks like a sync or promises I'm
13:34 - gonna be pretty terrible about it and
13:37 - I'm gonna say I'm gonna call this got
13:39 - search and I'm gonna call this got
13:42 - content and just write another function
13:45 - call this data and I'm gonna say console
13:49 - whoops and I'm going to say console dot
13:52 - log data okay so now I want to see I
13:56 - want to look at the say console dot log
14:01 - querying and title oh there's that new
14:07 - like backtick fancy way in es6 of you
14:10 - doing strings got to do that at some
14:11 - point okay
14:13 - okay so let's do this uh-oh
14:16 - so I went for Rainbow Brite but it
14:19 - didn't get the content of Rainbow Brite
14:21 - so what I'm going to do is say why
14:24 - because I forgot about JSON P so I have
14:27 - to do JSON P I had that cross origin
14:29 - error again and does this look like I
14:34 - got stuff this looks weird so actually
14:38 - this is working I just find this to be
14:40 - totally confusing to look at but the
14:42 - content is in there I should have
14:44 - thought like I have to go and
14:45 - investigate how the JSON is formatted
14:47 - first so I could say I can I can copy
14:49 - this link and look at it and by the way
14:52 - I have a Chrome extension installed it's
14:54 - called like JSON format err
14:55 - so let me look at the stuff this way so
14:58 - really what this is I got to look under
15:00 - query pages huh I have to know that
15:04 - ideal hold on a second here so pages
15:09 - page idea revisions oh my god goodness
15:11 - three items content format star this is
15:17 - what I want which is oh this is the
15:19 - Wikipedia bi is organized strangely and
15:22 - maybe there's another way to do this but
15:25 - I actually need to I think I might
15:31 - I have to think about how do i if I
15:33 - don't if the page ID is gonna be
15:34 - different how do I know what to look up
15:37 - so looking at this I have query pages
15:41 - and then some number which is the page
15:43 - ID which is something that's going to be
15:45 - different for every article so I have to
15:46 - somehow pull that dynamically in order
15:48 - to get down here to this stuff which is
15:49 - the content which is what I want so what
15:52 - I'm going to do is I'm gonna say let me
15:55 - look here and I can change this
15:56 - console.log data dot query dot pages
15:59 - let's see what I get
16:01 - oops I'm in the wrong place and hit
16:02 - refresh so I got it so how do I know
16:05 - what this number is can I just use like
16:07 - an index I could get the key I could say
16:09 - object keys but what if I just say index
16:12 - 0 will that work for the first object no
16:15 - undefined so I could say object keys to
16:22 - give me all the keys that are in this
16:24 - and then look I've got that so the page
16:29 - ID this is pretty weird that what I'm
16:31 - doing I know if there's a better way to
16:33 - do this page ID equals object keys data
16:37 - query pages index 0 index 0 so let's see
16:45 - if that gives me the page ID whoops I
16:52 - have too many brackets what if I messed
16:55 - up here too many parentheses and okay
17:01 - here we go lots of errors here here we
17:03 - go let's try to get this right this this
17:05 - deserves a drumroll am I gonna see the
17:08 - page ID yes and I'm gonna see different
17:12 - page IDs look at that so I'm able to get
17:14 - the page IDs whatever so now what I want
17:22 - is the content to be equal to so so let
17:32 - I'm just got page equal data query pages
17:37 - and now I want to say page page ID right
17:44 - because I want to go
17:45 - and look at I want to look at page pages
17:54 - Oh pages page ID revisions star dot
18:00 - revisions star now here's the thing you
18:06 - can say dot the name of the thing if
18:08 - it's a valid variable name like
18:09 - revisions but I can't say dot star
18:11 - because star is not a valid character
18:13 - for a variable so I've got to use these
18:14 - brackets boy I'm really off my rocker
18:16 - here with this crazy convoluted using
18:18 - Wikipedia low okay here we go let's see
18:22 - what's the chance that I got something
18:23 - here Oh
18:24 - let's look console dot log content
18:28 - undefined mmm let's look at revisions
18:34 - okay got something there revisions zero
18:38 - oh it's an array so zero star oh my
18:42 - goodness zero stars these are really
18:45 - this is like detective work it's not
18:46 - even programming just to figure out how
18:48 - this thing works they are there look
18:50 - there's the content of the Wikipedia
18:52 - page I finally got the content of the
18:54 - Wikipedia page now what do I do with
18:55 - that Oh No
18:58 - so let's do this let's first do a couple
19:01 - things let's say let me at least say
19:08 - right about right before I asked for the
19:10 - content let me say create P title so I
19:17 - got that and now I got the content if I
19:19 - type unicorn in here and I get the
19:23 - content so now the question is what do I
19:26 - want to do well I could search for a
19:27 - word and then I could so I could pick a
19:29 - random word and then search for articles
19:32 - with that random word in it why not
19:34 - right I could look for links like I
19:36 - could look for special links to other
19:37 - Wikipedia pages but let's be really
19:39 - simple about this and let's just
19:41 - actually let's use another regular
19:44 - expression I got to move they're gonna
19:45 - make this challenge I got to finish this
19:46 - up at a wrap this challenge up somehow
19:48 - so let's use a regular expression let's
19:51 - say I want to say were word regex
19:58 - equals any valid sequence of word
20:03 - characters one or more and let's
20:05 - actually let's say it has to be at least
20:06 - four or more so it has to be at least be
20:09 - like a four-letter word and then and I
20:14 - could put word boundaries right word
20:17 - boundaries I guess and then make it
20:20 - global and then I could say what how do
20:24 - I do this again I say word regex exact
20:28 - or match where do I say content match I
20:33 - can't even remember my own right maybe
20:35 - we should content match the word regular
20:37 - expression by the way I'm kind of off my
20:39 - rocker here in the sense that I am now
20:40 - using all sorts of stuff like regular
20:43 - expressions you could compare egg
20:44 - expressions tutorial but what I'm trying
20:46 - to do here is create match a given word
20:48 - and that word is any sequence of
20:50 - characters four or more I'm deciding and
20:53 - then I want to look at this so let's see
20:55 - I don't know if I did this right let's
20:57 - see if this gives me a bunch of words on
21:00 - the page it look it did it gave me two
21:05 - thousand four hundred seventy four words
21:07 - like vandal M vandalism expiry the nice
21:11 - thing about p5 is I can now say I'm
21:14 - going to save our words equals the
21:17 - results of this regular expression then
21:19 - var word equals pick a random one so the
21:22 - P five random function could actually
21:24 - give it a ran I'll pick a random one out
21:26 - and I'm going to say console.log word
21:28 - and I'm going to run this and it gave me
21:32 - average so now what I'm gonna do is I am
21:36 - going to go wicket and you what I'm just
21:39 - going to give this forget I'm give this
21:40 - a go wiki word or turn so it starts with
21:47 - user input value but this go wiki term
21:51 - just does it with that thing so now I
21:53 - can say go wiki word now I'm gonna
21:57 - probably crash my browser because I'm
21:59 - gonna be doing this over and over again
22:00 - and I should put something in that stops
22:02 - but it'll actually just go back and do
22:04 - this whole sequence again so let's see
22:06 - what happens look at this
22:11 - a Wikipedia random article crawler I
22:14 - need to stop how do I stop it okay let's
22:18 - at least figure out oh good at least I
22:20 - got an error at some point that's how I
22:21 - stopped it look how far I got I got to
22:23 - the return of Saturn so somehow we got
22:27 - femme fatale made in America each tier
22:30 - from Rainbow South Korean band so I
22:33 - should at least probably do some type of
22:35 - protection here I'm going to do
22:37 - something sort of silly
22:38 - whichever's gonna say let counter equals
22:40 - zero I should come up with a better way
22:42 - of doing this and I'm gonna say counter
22:45 - equals counter plus 1 and if counter is
22:49 - greater than 10 O's less than 10 so I'll
22:54 - only do this 10 times and I'm just gonna
22:57 - say create div just so it's a little
23:00 - less of all that space and now let's try
23:03 - this one for time it did it 10 times and
23:07 - it stopped and in theory I should be
23:09 - able to know the counter should get
23:11 - reset anytime changed but you know what
23:15 - I'm gonna do forget it let's let's not
23:17 - have it do it it's only gonna be I'll do
23:18 - it once you got this will be easily
23:19 - fixable so now I'm gonna put something
23:22 - in here like unicorn and OH so what
23:27 - happened there oh whoops
23:31 - okay go wiki is the thing that starts it
23:34 - of course of course so I need another
23:35 - function start search so I'm going to
23:39 - create a function called function start
23:41 - search and that does go wiki user input
23:46 - dot value and also sets the counter
23:50 - equal to zero there we go perfect now
23:52 - everything is done so I can actually do
23:55 - this and I can change this to unicorn
23:58 - and it will give me crawl a bunch of
24:02 - random articles and then I could give it
24:05 - happy and it will crawl a bunch of
24:09 - random articles and end with music okay
24:11 - everybody thank you for watching this
24:13 - random Wikipedia article coding
24:15 - challenge thing it required a lot
24:17 - require regular expressions it requires
24:19 - of callbacks and low JSON and JSON P
24:24 - and how wiki API works Wikipedia I hope
24:27 - I hope you make something from this and
24:29 - actually be more thoughtful and have a
24:30 - an idea here of why you might want to
24:32 - crawl Wikipedia and make some kind of
24:34 - strange thing with it so share with me
24:36 - what you make and I look forward to
24:37 - seeing you in a future video
24:42 - [Music]