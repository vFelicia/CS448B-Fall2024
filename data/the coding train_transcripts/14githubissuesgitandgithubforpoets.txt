00:00 - - Part four of this Git slash
GitHub for Poets tutorial.
00:04 - I'm going to talk about GitHub issues,
00:06 - how to file an issue and then,
00:09 - also how to refer to that particular issue
00:11 - as you are working on particular commits.
00:15 - Now, what are GitHub issues for?
00:17 - Now this is one of the few
things that I'm showing
00:19 - you that's actually not
necessarily a Git concept.
00:23 - This is purely something
that exists as a layer
00:25 - on the GitHub website.
00:27 - So one, at some point when
you take your repository
00:30 - and put it locally onto your laptop,
00:32 - which I'll show you I
think in the next video,
00:34 - those issues won't come.
00:35 - The issues just are for the
purpose of collaborating
00:37 - through the GitHub website itself.
00:39 - But they do play a vital
role and I find them
00:41 - incredibly useful in managing complex
00:44 - software collaborative
GitHub project thingymabobs.
00:47 - Okay, so any repository.
00:49 - Here I have the Rainbow Poem repository,
00:51 - you never know when a pull
request is going to come in
00:53 - while I'm making this video by the way,
00:56 - I did refresh it.
00:57 - Hope I see a pull request.
00:58 - No, okay whatever.
00:59 - There's one but that's an old one.
01:01 - Ah, I'm off the track here.
01:02 - Okay, so let's look here.
01:03 - There is a button here,
01:07 - a link here, up here, called Issues.
01:09 - Issues is a place to leave
a comment about a project.
01:13 - You know this can be a variety of things.
01:15 - It can be I found a bug,
when I pressed this button
01:19 - on this app the whole thing crashes
01:22 - or it can be I noticed that
this word was misspelled
01:26 - or this...
01:27 - It can also, you can Issues to add
01:29 - feature requests or ask questions.
01:32 - In general, an issue,
GitHub issues are not really
01:35 - meant for the types of
things you might find on
01:37 - a programing help forum.
01:39 - They're more specific
questions and issues and bugs
01:42 - and feature topic discussions
around a particular project.
01:45 - That said, all projects
in GitHub repositories
01:49 - probably treat and use
Issues in different ways.
01:51 - You can use labels.
01:52 - You can organize them.
01:52 - So many possibilities.
01:53 - What I will say to you
is that in particular
01:56 - if you're watching these
videos and you're interested
01:58 - in Processing or p5.js some
of this can feel very scary
02:02 - and intimidating, like I'm going to file.
02:04 - I found what I think is a bug,
but I'm going to file an issue.
02:06 - I'm going to write something
and everyone's going to
02:07 - come in and yell at me and
tell me I did it wrong.
02:09 - And I will say to you that
this is not the way the world
02:12 - should work or GitHub
or Git should work or,
02:15 - in particular, please if you're not sure
02:19 - file the issue anyway in
Processing or p5.js projects.
02:24 - Write at Shiffman in your description
02:28 - to say that I said you should.
02:30 - Don't worry, there's no
way you can do it wrong.
02:32 - The point of the community
is to be open and welcoming
02:35 - and to help everybody figure
out how to do all this stuff.
02:37 - Nobody really knows how to do it anyway.
02:40 - The people who say that they
do probably don't really.
02:43 - I definitely don't.
02:44 - So anyway, please I'm also
just making this video
02:46 - to encourage you to file GitHub issues
02:47 - and participate in the
open source community.
02:49 - Now, let's say I go over
here and click on Issues.
02:53 - There aren't any issues
because there aren't any,
02:56 - but I'm going to write a new issue.
02:57 - So I click here and write a new issue.
02:58 - Issues should get a title
like Today is Earth Day.
03:04 - Today is Earth Day
03:06 - and I think the poem should reflect that.
03:10 - Now, another thing you could
do which is really useful,
03:12 - this a little bit of
an aside, but let's say
03:15 - you're trying to reference
something that's visual.
03:22 - You can quickly take a
screenshot of something.
03:24 - I just took a screenshot
and I can actually just,
03:27 - right down here that screenshot
03:29 - should be right here on the desktop.
03:30 - You can see that image file.
03:32 - I can drag that screenshot right into here
03:34 - and it's going to upload it to the issue.
03:37 - I can go here under Preview
03:38 - and I can see this is what
my issue looks like now.
03:41 - It has an image in it
03:42 - and also, the other thing
that I should point out,
03:44 - is this entire issue thread
you can use something
03:49 - called Markdown which is a special kind
03:51 - of markup for writing things.
03:53 - For example, this is a link.
03:59 - So this is the syntax for having a link
04:02 - to something you can see and this is bold,
04:07 - I think, or maybe that's italic.
04:09 - That's bold.
04:10 - So there's a lot of
markup that you can learn
04:12 - and if you want to learn
about that you can...
04:14 - Somewhere on here,
there's a styling Markdown
04:17 - with Markdown is supported and if I click
04:19 - on that it's taking me to a whole page
04:22 - which gives me all the
stuff about Markdown.
04:24 - But that's a little bit of an aside.
04:25 - So you can see now, I am writing my issue
04:28 - and I'm going to now click Submit Now.
04:31 - I could add labels.
04:32 - Like I could say it's
a bug, a help wanted.
04:35 - You know there's a sort
of standard labels.
04:37 - I can create my own labels.
04:38 - I could add it to a milestone.
04:40 - I could assign it to somebody saying
04:41 - like this is a thing you should work on.
04:42 - I'm going to assign it
to myself, RainbowCoder
04:46 - and then I'm going to
now Submit this issue.
04:50 - And you can see now the issue is submitted
04:53 - and if I click back on Issues,
04:55 - here is a list of all the issues.
04:57 - Now, notice a very important thing here.
05:01 - I have one open issue
and zero closed issue.
05:04 - An issue is open until it is resolved.
05:07 - When it is resolved it is closed.
05:09 - Only the person who submitted the issue
05:11 - or the owner of the
repository can close an issue.
05:15 - So you should know by the
way, that what I'm doing
05:16 - even though I'm the
owner of this repository
05:18 - and I'm submitting the
issue to this repository...
05:21 - I never, I have a timer
going to figure out how long
05:23 - these videos are and I never
hit start on the timer.
05:25 - (laughs)
05:26 - I'll hit start now.
05:27 - I've probably been talking
for about five minutes.
05:29 - But, so as I was saying a
second ago, that I am the owner
05:34 - of this repository and
I'm submitting issues
05:36 - but you as somebody else could come,
05:38 - you could submit issues to any repository.
05:43 - Now, let's say I want
to resolve this issue.
05:46 - So pretending it wasn't
me that submitted it
05:48 - or it doesn't matter even if
it was me that submitted it,
05:50 - I now want to make a change in my poem
05:53 - to acknowledge this particular issue
05:55 - and I want to refer back to that issue.
05:58 - So let's do that.
05:59 - I'm going to go to...
06:01 - I'm actually going to just open a new tab
06:03 - so I can come back to that tab.
06:05 - And I'm going to go here, I'm
going to go back to the poem
06:07 - and I'm going to click Edit.
06:09 - And I'm going to zoom in here
06:13 - and I'm going to write at
the top Today is Earth Day.
06:19 - That probably has capitals, Earth Day,
06:20 - it's like a holiday, special thing.
06:23 - So I'm going to write today is Earth Day
06:25 - and I'm going to say
adding Earth Day as per...
06:30 - Now, how do I refer to a particular issue?
06:33 - All issues have an ID number
and I'm going to go back
06:37 - to this tab and see what
is this issue's ID number.
06:40 - It's actually number 10,
which is surprising to me.
06:43 - I would have thought it would
have started with number one,
06:45 - but that's fine and we
could be sure about that
06:47 - by if I click on that
link you can see up here
06:49 - in the URL it's issues slash
10 that's important, too.
06:53 - So I can actually just say in
my change as per number 10.
06:59 - So I am now making a commit relevant
07:01 - to that particular issue.
07:03 - I'm going to now click Commit
07:06 - and if I go back to this Issue page
07:09 - and hit Refresh,
07:11 - (laughs)
07:15 - you can see here the
camera's about to go off.
07:16 - It took a second for it to appear.
07:19 - You can see that this
page now automatically
07:21 - has a little entry that
said that RainbowCoder
07:25 - added a commit that referenced
this issue just now.
07:27 - This is very useful
because if some day later
07:29 - I want to revisit this discussion
about this particular issue,
07:32 - I could now click directly on this
07:35 - and I could see, oh, this was the change
07:37 - and I can look directly
at that particular change
07:39 - associated with that issue.
07:41 - Now, if I felt that that was done,
07:43 - I could click this Close issue
07:44 - and the issue would be closed.
07:46 - It would go into the Closed category;
07:47 - however, I could do something else.
07:49 - There are certain keywords that will
07:51 - automatically close an issue
with a particular commit.
07:54 - So, for example, I go back to the poem
07:55 - and I hit Edit again.
07:57 - Today is Earth Day, I love Earth Day
08:01 - as the second line of the poem.
08:03 - I'm adding I love Earth Day.
08:04 - I could say this fixes number 10,
08:08 - adding that I love Earth Day.
08:11 - So now if I use the word
fixes inside my particular
08:16 - commit message, it's
going to recognize that...
08:20 - Whoa, I don't want to close
this off the broadcast.
08:22 - It's going to recognize that
as a commit that fixes...
08:26 - Oh, I messed up the camera a little bit.
08:28 - It's fine, everything's okay. (laughs)
08:29 - It's going to recognize that, sorry.
08:31 - It's going to recognize that as a commit,
08:33 - that resolves that issue
and closes it automatically.
08:35 - So let's see if that happens.
08:37 - I'm going to say Commit
08:40 - and now, if I go back
to this particular issue
08:47 - and hit Refresh, look it's already closed.
08:49 - So you can see RainbowCoder
closed this in 45355f5.
08:55 - What's that?
08:56 - Remember, oops, every single...
08:59 - (laughs)
09:00 - Here I am.
09:01 - Every single commit on the tree
09:03 - of your Git repository
changes thingamabob.
09:07 - This light is casting a terrible shadow.
09:09 - It's not supposed to do that.
09:11 - Every single commit
has a particular unique
09:14 - identifier known as a hash code with it
09:16 - and that's what you're seeing here.
09:17 - So incidentally, you can also reference...
09:23 - You can also reference
commits in an issue, so sorry.
09:27 - So, I'm going to go back.
09:28 - I know this is a little
bit of a frantic video.
09:31 - I'm going to try to
think more about rainbows
09:34 - and the earth a be a little more calm.
09:35 - But, I'm going to go to my history here
09:37 - and I'm going to see...
09:38 - First of all we can see,
look at all these people
09:39 - contributing to this repository.
09:41 - Please file your pull requests.
09:42 - And I'm going to go and I'm
going to look this particular
09:46 - issue of this particular commit.
09:48 - I'm going to click on it and I'm going to,
09:51 - what I'm going to do is I'm
going to grab in the URL
09:54 - this full hash code and
I'm going to do Command C.
09:58 - So I now have copied that
and I am going to create
10:01 - an issue that says, I'm not
so sure about this change.
10:09 - I propose that we consider
doing something slightly
10:18 - different, though I do love the thinking.
10:21 - I don't know, right?
10:23 - And then if I paste that value in here,
10:25 - see how I paste that
hash code into the text
10:28 - of this particular issue
and then I hit Submit.
10:30 - You can see how that
resolves itself automatically
10:33 - to a link that goes directly
to that particular change,
10:36 - Today is Earth Day.
10:38 - So there's lots of things
you can do on GitHub
10:41 - by referencing issue numbers
10:43 - and referencing commit hash
codes to in your commit messages
10:48 - or in your issue descriptions.
10:50 - So, here's what I would like you to do.
10:53 - I would like you to do a couple of things.
10:55 - If you're watching this video, one,
10:57 - file an issue on my
Rainbow Poem repository.
11:00 - Say something about what you
think the poem should have.
11:03 - Then, I would suggest that
you make a pull request
11:07 - that references that
issue that resolves it.
11:10 - See if you can do that.
11:11 - I'm going to accept all of your issues
11:13 - and pull requests, then close them all
11:14 - and it'll be exciting to
see how that works for you.
11:16 - And once you've done that,
you're well on your way
11:18 - to contributing to other open
source GitHub repositories.
11:22 - Okay, great.
11:23 - So this wraps up this part four.
11:26 - I think it was part four
about Git and GitHub.
11:29 - Thanks very much for watching.