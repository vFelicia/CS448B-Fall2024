00:00 - hello welcome to part two of the agario
00:03 - coating
00:04 - challenge in this challenge I am going
00:07 - to attempt to add networking so this is
00:09 - where I last left off obviously this is
00:11 - not the fully formed game agario it will
00:14 - not be by the end of this video but
00:15 - it'll give you a lot of the tools and
00:17 - Basics if you wanted to recreate it but
00:19 - hopefully you're watching this to learn
00:20 - about how to do some of this stuff and
00:21 - invent your own idea anyway so this was
00:23 - what I had before I had this sort of
00:25 - like world that I'm in that I can move
00:27 - around and I can start eating other
00:29 - little dots so but now what I need to do
00:31 - is take this this is a one-player
00:33 - version of the game there's no uh all
00:36 - the dots are just created randomly I
00:38 - need to make a version where if I launch
00:41 - it in one in a browser and you launch it
00:43 - in another browser we're both seeing
00:45 - each other in each other's canvas so I'm
00:48 - not going to start from the very very
00:49 - beginning with this because I do already
00:51 - have a playlist and set of tutorials
00:53 - about node and websockets so I'm just
00:55 - going to show you the uh that tutorial
00:57 - makes this example see how this in this
01:00 - canvas I am drawing a little pattern
01:03 - here um I'm going to refresh that
01:05 - because really what I want to draw is a
01:07 - nice
01:09 - rainbow that's the worst rainbow ever
01:11 - drawn in the history of time but you can
01:13 - see as I draw here it shows up over
01:15 - there as I draw here you know it shows
01:18 - up uh on the other screen so what is the
01:22 - um what is the uh um schematic what's
01:27 - the diagram of the things that are
01:29 - happening here there is browser instance
01:33 - one that's a browser there is browser
01:36 - instance 2 and in this case both browser
01:39 - instances are on my laptop and that's
01:40 - how I'm going to demonstrate everything
01:42 - today but certainly the idea here is
01:45 - that I could be playing this here in New
01:47 - York and you could be playing it in
01:48 - London or in Rio or in Tokyo or in
01:52 - Istanbul whatever any city that you
01:54 - could think of around the world I don't
01:56 - know why those cities popped into my
01:57 - head but they did so um and then there
01:59 - is is a
02:02 - server which is written in
02:05 - node.js
02:06 - and the canvas the game
02:10 - itself is written just in using p5js
02:13 - client
02:15 - side and what's Happening Here is there
02:17 - is communication these clients don't
02:20 - talk to each other they both talk to the
02:24 - server and when one talks to the server
02:27 - I can send my position to the server and
02:30 - the server can then send my position
02:31 - back to the other one so I think this is
02:33 - the way there's a a lot of different
02:35 - ways you could probably implement this I
02:37 - think what I'm going to do is have each
02:39 - client drive around its own world and
02:42 - broadcast its position to the server and
02:44 - then the server will broadcast the
02:46 - positions of all the other clients back
02:48 - to all the other clients so they can
02:49 - draw those other clients in their own
02:51 - window that sounds a little bit like
02:52 - loopy loopy but hopefully it'll start to
02:54 - make sense once we start to program in
02:56 - okay I'm going to come back over here
02:57 - and this is where I have the code for
02:58 - both of those projects so this
03:01 - is this is the code for the first agario
03:04 - example and this is the code for that
03:06 - sockets example um that does the shared
03:08 - drawing canvas so now what I want to do
03:11 - is I want to grab there's this public
03:13 - folder right here this public folder is
03:15 - where the client side code lives so what
03:18 - I'm going to do is I'm going to take the
03:21 - agario folder and I actually um I want
03:25 - to leave this I'm going to I'm going to
03:26 - do something a little weird I'm going to
03:28 - do uh canvas I just want to be able to
03:30 - refer to this code I'm going to put that
03:32 - in a different folder and I'm going to
03:34 - take agario and put that into here so
03:37 - now you'll notice um uh the node server
03:40 - is
03:42 - running uh on the port 3000 so if I type
03:46 - Local Host 3000 it's like I don't see
03:48 - anything but now if I go to Canvas
03:51 - you'll see this is that program and if I
03:54 - then go to
03:56 - agario uh that didn't show oh because
03:58 - you know why it didn't show up no let's
04:01 - check oh agario one I forgot that I
04:04 - called it agario one there it is there
04:06 - so I'm just now my node server is
04:08 - serving both the shared canvas client
04:11 - code and the agario code and that's
04:14 - useful to me because right now I want to
04:16 - be able to um pull pieces of the code
04:19 - from the shared canvas into agario so I
04:22 - can
04:23 - um uh so I can uh get not have to retype
04:27 - all that socket code from scratch okay
04:29 - so now let's go back to Adam and what I
04:32 - want to do is uh so I'm not going to
04:36 - adjust the server at the moment this is
04:37 - all the code for the server and again it
04:40 - does the sort of basic stuff of setting
04:42 - up a port listening for
04:44 - connections spitting something out to
04:46 - the console when somebody connects and
04:48 - then there's some messaging stuff the
04:49 - messaging stuff is all going to have to
04:51 - change the messaging stuff is what is
04:53 - happening uh for the shared canvas
04:56 - drawing I'm going to have to change that
04:57 - but what I want to do is I really want
04:58 - to look at the Cent Cent code so I want
05:00 - to look at uh the canvas sketch and I
05:03 - want to look at my agario sketch so I
05:05 - have both of these open I have the
05:07 - agario sketch and the canvas sketch and
05:09 - what I want to do is add a socket first
05:12 - I want to add a socket
05:14 - variable and uh and then I want to uh
05:21 - connect I want to
05:23 - connect when the sketch starts to the
05:26 - server so this is the basic idea the
05:28 - first thing I want to do is add a web
05:31 - socket to um add a web socket to my
05:35 - agario code now I'm missing a piece I
05:37 - believe because now I believe if I were
05:39 - to run that we're going to see an error
05:41 - message where it's like IO is not
05:42 - defined so I actually in addition to
05:45 - that I need to uh make sure I actually
05:48 - access
05:51 - the um sorry I'm in the wrong place I
05:53 - need to make sure I actually access the
05:56 - socket Library as well so I can access
05:58 - the socket Library by referencing a link
06:01 - to socket.io in the index.html so I'm
06:04 - also going to take that and go to the
06:06 - agario index HTML file and add a
06:09 - reference to the socket.io library and
06:12 - now you'll see there we go and if I look
06:15 - back at the server you can see we have a
06:16 - new client so I'm going to uh restart
06:19 - the server and I'm going to refresh
06:22 - agario and you can see this agario
06:25 - sketch has now connected to the server
06:28 - great uh
06:30 - okay so now we've got step one we've got
06:33 - the sketch connecting to the server are
06:36 - you guys with me here are you with me
06:38 - please be with me um I'm very happy and
06:41 - that's really like just an exciting
06:42 - moment just to have a connect so let's
06:44 - look now what one thing we've really got
06:46 - to think about is I've got to look at my
06:48 - agario code now this should go
06:52 - away notice how I had this bit of code
06:55 - at the beginning that just makes a whole
06:57 - bunch of blobs but there's no point in
07:01 - making these random blobs anymore the
07:03 - blobs should only actually exist if
07:05 - they're actual people playing the game
07:08 - so I am going to get rid of this in
07:12 - addition when I connect I should in
07:15 - addition to just connecting create a new
07:18 - instance of a Blog the server is going
07:20 - to have to keep track of a list of all
07:24 - the clients that are currently connected
07:26 - and I think we're going to have to
07:27 - figure out some way of giving those
07:29 - clients an ID number and there are
07:32 - probably some very clever and
07:33 - sophisticated ways I could come up with
07:35 - assigning IDs I might just to get
07:37 - started use a counter 0123 so we've got
07:41 - something that's going on here that I
07:42 - want to just think about here the server
07:44 - needs to keep track of list of
07:50 - connected clients this is data that the
07:54 - server needs to keep track of and that
07:56 - list is essentially going to be mirrored
07:58 - in the client as well and then the
08:00 - server is just going to update the
08:02 - positions continuously so when I go back
08:04 - to the server code right remember now
08:07 - it's very tricky to keep track of what's
08:08 - the server what's the client especially
08:10 - because they're both written in
08:11 - JavaScript there's a nicity to that but
08:13 - I'm going to go back to the server and
08:16 - what I want to do is add a variable so I
08:19 - want a variable at the top and I'm going
08:21 - to call it
08:23 - blobs okay so that is all of the blobs
08:27 - that are currently connected okay okay
08:30 - and I think it would be useful probably
08:33 - to create a blob
08:35 - object a little unsure about this but
08:38 - let's let's do this for right now what
08:41 - if I create um I don't know if I really
08:44 - need a Constructor function but let's
08:46 - just do it just for the sake of argument
08:48 - a blob has an x a blob for the a blob
08:52 - has a y and a blob has an
08:56 - ID so I don't know but in other words
08:59 - that list should always be keeping track
09:00 - of what's the blob's ID and where is it
09:03 - so I'm wrote a Constructor function just
09:06 - in case I need to use it but I'm not
09:08 - entirely sure I do just yet because I'm
09:10 - just doing this on the fly so when we
09:12 - have a new connection oh the socket gets
09:14 - an ID what a one I have an idea why
09:18 - don't
09:19 - we use that and we might end up using
09:22 - like some kind of like hasht thing where
09:24 - we look up where we look up the client
09:27 - in a list based on its ID there's so
09:29 - many things we could eventually add to
09:30 - this we'll see but basically at this
09:32 - moment when we have a new client what I
09:35 - want to do is create a
09:40 - blob which is a new blob object with
09:45 - socket. now I don't know how I'm going
09:47 - to get the XY position just yet so we'll
09:50 - figure that out later I'm just going to
09:52 - type in z00 right now and then I want to
09:54 - say blobs do
09:57 - push blob so in other words the moment
10:01 - that someone's
10:02 - connected we then have a new client now
10:05 - I think that actually to the truth of
10:08 - the matter is even better I have now
10:10 - have an idea maybe there the client
10:12 - should in addition to just connecting
10:14 - send a message like start so maybe there
10:17 - should be right because can I get
10:22 - um when a user socket uh okay hold on I
10:25 - have to think about this um when the
10:29 - server gets a message called Mouse does
10:32 - the do we yeah yeah yeah uh yes we
10:35 - should get the particular so we should
10:38 - still have access to that so socket ID
10:40 - so let's let's try something let's say
10:42 - there's a message called
10:44 - start and the message that comes in is
10:48 - uh rece uh is datax data
10:53 - doy and I don't want to broadcast that
10:58 - back
11:01 - what I want to uh I want to leave that
11:04 - so what I just want to see is I what I
11:06 - want is for and I want to see uh
11:10 - socket sorry I'm figuring this out as I
11:12 - go it's hard to like talk it through and
11:14 - do it okay this is what I want to do I
11:17 - don't actually want to create the blob
11:19 - the moment the connected I mean the I
11:21 - want to I want the client to explicitly
11:23 - also send an additional
11:25 - message because here what I want to do
11:28 - is is make a new blob object and have
11:31 - the client send in its XY
11:34 - position so let's now go to the client's
11:38 - code and here what I want is to send bro
11:43 - how do I send something ah I need to go
11:45 - back to my previous example which
11:50 - uh this is how I send something to the
11:53 - server so I'm going to grab this code
11:56 - and go back to my agario sketch and I
11:58 - want to send into the
12:00 - server
12:05 - uh right the server is going to make
12:09 - oops the server made that uh I lost a
12:11 - little bit of code there sorry sorry
12:13 - sorry let me get that back socket.
12:17 - emit so and I want this to be start so I
12:20 - want the data to be blob.
12:25 - X blob doy and by the way the blob's all
12:28 - need a size so does the server keep
12:31 - track of the size does the client keep
12:32 - track of the size I guess they both do
12:34 - for right now they're both going to keep
12:36 - track of it so let's make a size uh
12:39 - which is I think blob. R I
12:42 - assume um which by the way can I just
12:46 - emit The Blob it's going to have all
12:48 - this other stuff in it so I I'm going to
12:50 - do this right now so there's definitely
12:52 - a way I can clean this up right so
12:54 - essentially what I just made this blob
12:55 - object and then I make this data object
12:57 - which is what I'm sending I can clean
12:58 - clean that up in a bit but uh okay so I
13:01 - make the blob object and just to be sure
13:04 - it's R yep and then I want to send that
13:08 - so let's see if this works let me go
13:10 - back to the server code and I realize
13:13 - what I'm going to get I in addition I
13:16 - also want the blob to have an
13:19 - R to keep track of the
13:23 - size and I want to see
13:27 - that here as well well just to make sure
13:29 - it's all coming in and make it with a
13:32 - data. r so there's a lot of redundancy
13:36 - here but this should give us the basic
13:37 - idea right if I restart the
13:40 - server and I now refresh the
13:44 - client we have connected I got undefined
13:47 - undefined so I got the ID and I got 64
13:52 - why did I get undefined for the x's and
13:54 - y's so I'm going to have to debug that
13:57 - where's my debugging music someday else
13:58 - have it um let's look into this so where
14:01 - where are things being sent oh I bet you
14:03 - I know why so the blob is actually using
14:07 - vectors so it has a position Vector so
14:11 - instead of um uh uh there when I'm
14:14 - sending the information I actually need
14:16 - to see blob said blob. p.x blob. p.y so
14:21 - now if I were to refresh this and see we
14:26 - can see now the client connects and it
14:29 - sends its ID it's X and it's Y and its
14:32 - size so just to make things kind of have
14:36 - a little variety right now what I want
14:38 - to do is I want the The Blob to send in
14:45 - a random
14:49 - location and a random size and the size
14:52 - will be smaller between 8 and
14:55 - 24 so let's refresh this again
14:59 - and uh and interestingly there's a zoom
15:02 - thing happening because um everything's
15:06 - based on having a size of 64 but that's
15:08 - fine I'm not going to there's that thing
15:10 - where we're zooming I'm GNA just leave
15:11 - that b for right now um so whoops I went
15:14 - to the wrong place and we can see that
15:17 - uh you know it's very hard to debug in
15:20 - node because now I'm printing out these
15:22 - floating Point things we're getting all
15:23 - these values but you can see the stuff
15:25 - is in different places so this is really
15:27 - good right we both
15:30 - have a uh we we have now a client who
15:33 - connects who gets a unique ID and who
15:37 - broadcasts its starting oh I'm attached
15:40 - here who broadcasts its starting X and Y
15:43 - and size
15:46 - okay here we go let's keep moving
15:48 - everybody I'm excited we're getting
15:50 - we're getting to this uh so okay so now
15:54 - here's the thing every time through draw
15:58 - the block updates its location so what I
16:02 - think we need to do right now is update
16:06 - the server sense of where I
16:09 - am so what I need to do here is now say
16:13 - in draw I want to do this
16:18 - again but I want to emit an update
16:21 - message so I could probably combine
16:24 - these two but in the beginning a start
16:26 - message means I'm a new blog and now in
16:29 - draw I want to update my X and Y
16:30 - location continuously now latency and
16:33 - scale and all that are going to be
16:35 - complicated questions we're going to
16:36 - have to deal with at some point or maybe
16:38 - I won't deal with it but you will have
16:39 - to deal with it but this is kind of
16:41 - getting started right uh the chat um
16:43 - someone writes don't forget uh don't
16:46 - forget to delete Blobs of disconnected
16:48 - clients which I'll certainly have to do
16:49 - at some point okay so now what I want to
16:52 - do is in the
16:54 - server I need whoops sorry I have too
16:57 - many things open
16:59 - I'm going to just go to the server in
17:00 - the server code I need to deal with
17:03 - another message so that's the start
17:11 - message and this
17:15 - is an update
17:18 - message and I'm going to leave this in
17:20 - here and now instead
17:23 - of instead of
17:27 - um in instead of creating a new blob and
17:30 - putting it in the array what I want to
17:31 - do is find the blob with that ID now I'm
17:34 - going to do this in a terrible way I'm
17:36 - going to do this in a brute force method
17:37 - of just looping through the array to
17:39 - find the correct blob later I would love
17:41 - to improve this by using kind of like a
17:43 - Dictionary lookup um but I'm going to
17:45 - just to have the Simplicity of having an
17:47 - array right now I'm going to just leave
17:48 - it this way so uh which is I'm going to
17:52 - start with a blob called which which is
17:55 - the one actually I'm just going to say
17:57 - VAR blob and then I'm going to Loop
17:59 - through the length of that
18:03 - array and I'm going to say if blob. ID
18:08 - oh sorry if a
18:10 - socket. ID equals blob's indexi do ID
18:15 - right I want to find the blob who has
18:16 - the same ID as the
18:18 - socket then I want to say blob equals
18:20 - blob's index
18:22 - I and then what I just want to do is
18:26 - update the location so I want to say
18:27 - blob .x equals uh data
18:34 - dox blob doy equals data doy and blob do
18:40 - again I could certainly improve this and
18:43 - just copy the object or make it the same
18:45 - object but for Simplicity I'm say blob.
18:47 - R equals data. R so this is essentially
18:50 - here now updating that array so what I'm
18:54 - doing now is as the blobs update their
18:57 - location the array keeping track of
18:59 - where all the blobs are gets updated as
19:01 - well okay uh now I don't need pause. X
19:05 - here this is I this is accidental
19:07 - because the way that I programmed it
19:08 - maybe you could do this in a different
19:10 - more better way but I'm using a vector
19:12 - in the client but I'm not using a vector
19:14 - in the server uh Vector object that is
19:17 - okay so uh let's see what happens now
19:20 - when I restart the
19:22 - server and I also do this we should see
19:27 - now you can see here the you can see
19:30 - that the location is moving continuously
19:33 - and it's just I don't know it's going
19:34 - down let's see if I move let's see if we
19:36 - can I can like move into the client to
19:38 - see it now it's going back up so we
19:40 - we're not seeing anything move right
19:42 - because it only moves that it's drawn um
19:44 - relative to itself but you can see that
19:47 - this is actually working on some level
19:49 - and I by the way I'm going to have to
19:50 - put some you know constraints around
19:52 - where the blobs can move to okay uh so
19:56 - we're good we've got now every blob and
19:59 - you can see now if I were to connect a
20:00 - second
20:04 - one you would see here and if I kill the
20:07 - server for a second we should see I only
20:10 - see one
20:12 - ID so let me try that
20:15 - again let me hit refresh here and we hit
20:18 - refresh here and there should be
20:27 - h I have a new Cent Oh okay hold on
20:30 - there's an error
20:32 - here cannot set property X of
20:36 - undefined so I got some sort of
20:40 - error uh ah it must be oh the if I don't
20:43 - restart the server no we did get two
20:45 - client so this is I I really have to
20:47 - always just restart the server because
20:49 - the server's got this persistent uh list
20:51 - of clients and if somebody
20:54 - connects uh and then can't find that um
20:57 - can't find that in the list we're going
20:58 - to have a sends an update message so
21:01 - restart the
21:03 - server so you know there's some cleanup
21:05 - here I need to do um but I don't know
21:08 - why I'm not seeing more than one uh
21:11 - client
21:12 - message um I am back after some
21:14 - debugging which I realized aha browsers
21:18 - will play tricks on you sometime notice
21:20 - I'm only seeing the updated location of
21:22 - one client it's not because it's not
21:24 - working it's because my browser is
21:26 - actually only showing me client and the
21:29 - other tab which is hidden has gone to
21:30 - sleep this is a smart thing because why
21:33 - update an animation in a tab you can't
21:35 - see but if I pull this tab out and make
21:37 - it visible now you can see that I have
21:40 - both of them showing up as they're both
21:42 - neither's asleep so this is something I
21:43 - just have to keep an eye on as I develop
21:45 - uh things further so okay so I'm going
21:47 - to put this back I'll I'll pull it out
21:50 - or just actually close it I'll pull it
21:51 - out later when I need to so now we need
21:54 - to add a feature there's a problem here
21:57 - which is that
21:59 - um uh I'm letting these blobs just go
22:03 - infinitely off into like an infinitely
22:05 - large space and you can see its location
22:08 - currently is um its location currently
22:11 - is like negative thousand, something so
22:14 - I need to put something in the code to
22:15 - constrain them to a fixed space in the
22:18 - screen and the uh I could be um there's
22:21 - a lot of ways I could do this but I'm
22:23 - going to just do it in a really uh I'm
22:26 - just going to write a blog bl.
22:29 - constrain and in the blob object I'm
22:33 - going to write a function called this.
22:35 - constrain uh and I'm going to make that
22:39 - blob. dox equals constrain blob. dox
22:44 - zero and
22:46 - width uh and actually I'm going to say
22:50 - negative width to width and I'm going to
22:53 - say uh y negative height to height and
22:57 - because it's 0 I think is technically
22:59 - the center the way that I've written
23:00 - this if you remember from the previous
23:01 - tutorial so again I could make a bigger
23:03 - world I could make a smaller world I
23:05 - could make it a flexibly sized World
23:06 - depending on how many blobs are there
23:08 - but I'm just going to do this and this
23:10 - should give me a nice now if I refresh
23:12 - this you can't see me moving but if if I
23:15 - look at this location at some point I
23:17 - don't remember what the size of the
23:18 - window is I think it's around 600 uh
23:20 - you're going to see that it sort of
23:21 - stopped at -600 so this is really useful
23:24 - because as I'm testing it I don't I want
23:26 - to be able to see things within sort of
23:28 - like a similar World okay so now what I
23:33 - want to
23:36 - do what I want to do now aha so I have
23:39 - everything working I have a server which
23:43 - is receiving information from clients
23:46 - each client having its own blob that's
23:48 - moving around the screen what I'm not
23:50 - doing is
23:52 - broadcasting back to the the clients
23:55 - where everything else is
23:58 - so oh boy I'm realizing there's a big
24:00 - complication that's going to arise in a
24:03 - moment but it's okay we're gonna we're
24:06 - gonna we're gonna get through this
24:08 - together be in a happy place figuring
24:10 - this out but what I'm at least want to
24:12 - be able to see a step two here I want to
24:14 - see somebody else's blob appear on my
24:17 - screen I want my blob to appear on their
24:19 - screen okay so here we go let's figure
24:23 - out how to do that what I need to do is
24:26 - I need the server to do broadcast and if
24:29 - you look
24:32 - uh if you look
24:36 - here
24:39 - um I'm trying to think of the best way
24:41 - to do this to start um let's go back to
24:44 - the the the sorry the server code or
24:47 - have I I think the server code I've
24:49 - destroyed it I need to go and grab
24:54 - sorry uh so what I want to do
24:59 - is what I want to I just want to create
25:03 - a I want to
25:08 - create I'm trying to think here I want
25:11 - to think that I want to do is create
25:13 - just a heartbeat that every so often the
25:16 - server sends a list of all the current
25:19 - blobs in their
25:22 - location so I am going let's go back to
25:26 - the canvas example which
25:28 - I uh sorry I lost my original
25:32 - code let me find it ah let me find it
25:36 - this
25:37 - way
25:39 - uh uh sockets uh server so what I'm
25:43 - looking for is uh this io. sockets emit
25:48 - sorry I could have this was what I want
25:50 - to do is I'm going to write a function
25:51 - called set
25:54 - interval and what I want to do is have
25:57 - have a heartbeat function happen every
26:00 - I'm going to have it once per second now
26:02 - just to make it really slow to
26:04 - update and I want this function
26:10 - heartbeat to
26:12 - emit uh
26:15 - heartbeat uh I call it a heartbeat I
26:17 - think that's a common word in networking
26:19 - like it's like your heart is
26:20 - continuously beating at regular
26:21 - intervals this is something that the
26:23 - server just going to do at regular
26:24 - intervals and what's it going to do it's
26:26 - going to send out the full list of blobs
26:28 - and actually right now it's just going
26:29 - to send out
26:30 - hello so I just want to see and I I I
26:35 - just want to see a message I want to see
26:37 - that I can get the
26:38 - client to receive a message from the
26:41 - server every second okay so let's see
26:44 - how that works so I'm G to go back to
26:46 - the client code and the client code I
26:49 - need to go back into the canvas and see
26:52 - I I need to add this uh this on method I
26:55 - want to do something when I receive that
26:57 - heartbeat so I'm going to bring that in
27:00 - and I'm going to put it in
27:02 - setup and when I receive the
27:06 - heartbeat I just want to
27:08 - say console.log data so I just want to
27:12 - see that message come in
27:17 - okay so now I've added a heartbeat to
27:20 - the server and a heartbeat to the client
27:22 - so let's run this again let's run the uh
27:26 - client and we should see hello hello
27:29 - hello hello hello server is sending that
27:32 - now let's change the server to do
27:34 - something else instead of sending hello
27:37 - I'm got to go back to the server let's
27:39 - actually send that array let's just put
27:42 - the array in there let's see what
27:43 - happens if we just put the array in
27:45 - there we might have to stringify it I'm
27:46 - not sure but let's just put the array in
27:48 - there and see what we get oh that was a
27:50 - loud
27:51 - noise um okay uh so I'm going to restart
27:54 - the
27:55 - server and I'm going to to refresh the
27:58 - client and object object let's look in
28:01 - object there it is it's an
28:04 - array with uh so it's actually sending
28:08 - it as an object which is terrific you
28:10 - can see the ID R so I'm actually getting
28:12 - all this information in the
28:14 - client
28:16 - now bear with me here let's connect a
28:20 - second
28:22 - client and a third client and a fourth
28:26 - client and let's look at what that
28:28 - heartbeat looks like
28:31 - now I got to go look look at this an
28:33 - array of four
28:35 - things there we go all four things right
28:39 - there so what is it that we want to
28:41 - do all I've got to do now is Loop
28:44 - through those four things and display
28:45 - them on the screen the server is sending
28:48 - me here's where everything is here's
28:49 - where everything is here's where
28:50 - everything is oh this is wonderful so
28:52 - let's go ahead and do that so I'm going
28:53 - to add to the client
28:55 - code um
28:58 - where's my client code so many different
28:59 - things here it is I'm in
29:03 - draw uh okay so here so I need an array
29:06 - oh that array blobs I already have it
29:09 - I'm going to
29:11 - say blobs equals data so that was an
29:15 - array and then what I'm going to do is
29:17 - I'm going to say for VAR I equals zero I
29:21 - is less than oh I have that there so
29:24 - funny that I have this here already and
29:26 - I was going to backwards but I I they're
29:28 - not actually blob objects boy I'm just
29:30 - going to draw just to see that they're
29:32 - there I'm just going to draw an
29:35 - ellipse blobs indexi dox blobs indexi
29:39 - doy blobs index i. R *
29:44 - two and I'm going to draw it and I'm
29:47 - going to make it a different
29:49 - color and I'm going to say uh let's just
29:52 - make it like a blue or something so we
29:53 - see it as a different color so let's
29:55 - just see how that works
29:58 - there we go look those are the other
30:00 - blobs and I can kind of walk around and
30:01 - try to find them those are from the
30:03 - other clients and I could go to the
30:04 - other client and I could try to find
30:07 - probably presumably I have to refresh I
30:10 - could find the other blobs now one thing
30:11 - I might like to do is actually display
30:14 - the ID is that's going to kind of um
30:17 - kind of help things I don't know what's
30:19 - going on there if new blobs are
30:20 - connecting
30:22 - continuously uh let's just see blobs do
30:26 - length
30:32 - whoops there we go yeah I don't know why
30:35 - I have so
30:39 - many um so I there's some debugging that
30:42 - I've got to do here
30:46 - uh seven no it's right I guess I have
30:50 - seven tabs open do I have oops do I have
30:53 - seven tabs open I can't keep track uh
30:56 - you know what though the server hasn't
30:58 - been restarted and I've been doing all
30:59 - sorts of crazy stuff so in these kind of
31:01 - cases it's generally good to start
31:05 - over so let's just do two
31:09 - blobs and see if things are
31:13 - working so I'm
31:17 - gonna oops and I went to the wrong
31:20 - server the wrong project 3,000 here we
31:24 - go Okay so
31:31 - back
31:34 - in I'm drawing myself and I'm drawing
31:38 - myself only once per second so as I move
31:41 - around uh it sort of looks like I it's
31:44 - like I I'm still drawing myself in a
31:46 - previous historical location so that I'm
31:48 - going to fix as I stop drawing myself
31:50 - which I need to do so one thing I want
31:52 - to do is I want to
31:55 - draw the blobs with their ID so let me
31:59 - just for a second see if I can make that
32:01 - happen really kind of quickly in a in a
32:04 - like a not so awful I'm going to say
32:06 - Phil 255 text blobs index ID and then I
32:11 - want to say blobs index
32:13 - i.x blobs index i.y plus r blobs in uh
32:20 - index i. R time uh three let's have it
32:25 - appear below and let's say text
32:29 - align Center am I getting the
32:33 - ID yeah okay oh way that's not so let's
32:35 - make the idea a lot
32:39 - smaller I think probably
32:41 - the uh window yeah uh text size uh
32:48 - 12 and uh the times three was
32:55 - unnecessary uh okay so uh I want to see
32:58 - uh let's make this
33:02 - six what's going on with text
33:08 - size okay that's kind of what I wanted
33:10 - to do so I just want to be able to see
33:11 - quickly the ID below each of the
33:14 - blobs
33:17 - okay we're getting somewhere we're
33:19 - getting close now here's the thing I
33:21 - want to not draw
33:23 - myself there's going to be a third part
33:25 - to this clearly we're getting pretty
33:27 - close and I'm going to release this code
33:29 - and you guys can kind of get further on
33:30 - your own and I'll come back and do the
33:32 - third part at some point but the couple
33:34 - things I want to fix here number one is
33:36 - I want to uh I want to know my own ID
33:38 - and not draw myself so I need to have um
33:41 - in this particular uh sketch my own ID
33:46 - and I would like the uh I would like to
33:51 - send from the server a message just back
33:54 - to myself now um so when I send this
33:57 - first start I want in
34:04 - server to
34:07 - um I want the server
34:10 - to send a message back with the client's
34:15 - ID like the client needs to know its ID
34:18 - so the question is how do we in uh how
34:22 - do we use uh node websockets to send a
34:25 - message only to this particular ular
34:27 - client and uh it's probably something
34:30 - like socket. emit or something but I'm
34:33 - just going to look this up uh Set uh
34:36 - node uh sockets send message to one
34:41 - specific
34:44 - client uh so here uh so uh so how do we
34:51 - do this you have to grab the client ID
34:53 - uh and we just say io. client session ID
34:57 - uh. send let's see if that
34:59 - works
35:02 - um uh so let's see if this works like
35:05 - what if I then say
35:09 - this and so I want to
35:13 - say
35:17 - uh uh
35:20 - socket. I wonder if the client has this
35:22 - built in somehow does the client have
35:25 - this built in somehow let's look at
35:32 - this oh look there's the
35:35 - ID look the client already knows its own
35:39 - ID isn't that wonderful so I don't need
35:41 - to send it back the client knows its own
35:43 - ID now why does the client have to have
35:45 - it as
35:50 - um without
35:52 - the without the extra slash a number but
35:56 - that's fine we can work work that out so
35:57 - what I want to do here now um so I don't
36:01 - need
36:03 - this what I want to do in the client is
36:07 - I want to when I'm drawing them I want
36:11 - to only draw them if the ID is not my
36:15 - own ID so uh I want to say as long as
36:17 - blobs indexi doid does not equal uh
36:22 - socket. ID but the problem with that is
36:26 - is blob's ID has a couple extra
36:30 - characters at the beginning so I'll just
36:33 - do this I can just chop those off I
36:36 - think with substring substring is a
36:39 - method that will give me a part of a
36:42 - string and if I go back to the sketch
36:44 - and look please don't move around uh you
36:47 - can see that there are there are just
36:48 - two extra characters 01 so I want the
36:51 - substring to start at
36:52 - two um so I want the substring to start
36:56 - at uh two comma
37:00 - uh and let's just uh let's make this
37:02 - simpler let's say VAR ID equals blobs
37:06 - indexi doid and then I can say um id.
37:12 - substring two to the length of the
37:15 - string so I want to make a substring
37:17 - from the second character all the way to
37:19 - the end uh and as long as that's not the
37:22 - case
37:25 - then I can draw that particular blob
37:29 - okay so let's see
37:32 - here so we should be good in that um
37:36 - well there's a whole lot of blobs now we
37:38 - can see that I can find other
37:40 - Blobs of varying sizes if I kind of poke
37:44 - around the screen but I am not drawing
37:48 - myself
37:50 - um so we're in pretty good shape here
37:53 - let's let's change a couple things first
37:56 - of all let's restart the
37:58 - server I think that we can now in the
38:02 - server do a way with this console.log
38:05 - that's happening over and over again as
38:06 - everyone updates itself and we can um
38:10 - what we can do is now really test out
38:12 - two particular clients so to do this
38:15 - what I want to do is kind of divide
38:18 - my I'm going to get rid of the I want to
38:21 - divide my wi screen in half
38:24 - here and I'm going to to
38:27 - uh just go
38:30 - to have two windows open that aren't
38:33 - connected yet to the server then I want
38:38 - to run the
38:40 - server connect this one to uh sorry
38:44 - agario one and you can see there's a
38:47 - client connected then I want to connect
38:50 - this one to agario 1 and there's another
38:55 - client connected so we can see what
38:57 - their location starting locations are
38:59 - and I should be able to now move around
39:02 - and try to
39:03 - find
39:11 - it anybody
39:14 - anybody where are you other blob okay
39:18 - okay I am back okay so I'm gonna um just
39:21 - uh
39:23 - console.log the blobs X and Y position
39:27 - uh so I can take a look at that and the
39:29 - other thing I was going to do here is
39:32 - only say if Mouse is
39:35 - pressed then uh update the location so
39:38 - I'm actually not going to move a
39:40 - particular
39:41 - blob unless uh unless you click the
39:45 - mouse so what I want to do is I need to
39:47 - find terminal again this is going to
39:48 - help me debug so I'm going to kill the
39:51 - server I'm going to uh re hit refresh
39:55 - which uh we'll make it so that it
39:57 - doesn't actually connect uh and then I'm
39:59 - going to restart the server I'm going to
40:02 - start one blob and it's saying undefined
40:04 - so hold on I need to fix that uh blob.
40:08 - p.x blob.
40:11 - p.y uh so let me refresh again uh you
40:15 - can see okay so uh and that's now
40:18 - showing both of
40:19 - them uh so hold on I'm got to restart
40:22 - the server and refresh this okay so you
40:26 - can see here this particular blob has
40:29 - shown up at this location
40:31 - 150 comma
40:33 - 24 and let me make this a little bigger
40:36 - there we go and now I'm going to go to
40:38 - the other
40:39 - blob I'm going to start a new one oops
40:43 - and you can see there it is so now I
40:46 - want to move this blob a little bit
40:50 - whoops uh and let me see if I ah and
40:54 - that worked there we go and it the the
40:56 - thing is it's only
40:57 - updating it's only updating once a
41:00 - second uh and so I can move
41:03 - closer and you can see ah okay so let me
41:06 - fix that this is totally working by the
41:10 - way uh but uh let's kill the server
41:13 - again I'm going to make this look a
41:15 - little bit better so I should I don't
41:17 - know what's reasonable but I'm going to
41:19 - have the server have its heartbeat um 30
41:23 - frames per second is and uh um and
41:28 - there's a th000 milliseconds in 1 second
41:31 - so let's say let's have the heartbeat
41:33 - happen every uh like 33 milliseconds
41:37 - let's see if it can handle that so I'm
41:39 - going to restart the
41:41 - server and I'm hit refresh here and I'm
41:45 - going to take that out and I'm going to
41:47 - hit refresh here whoops I'm hit refresh
41:50 - here and we should see now as I
41:53 - move and let's get a third one going
41:59 - let's get a ah this I'm going to get a
42:03 - third one
42:07 - going and one more come on you can do it
42:14 - agario there we go so we can see here uh
42:17 - if I were to move
42:20 - around uh they're all responding to each
42:23 - other we've got a multiplayer kind of
42:26 - beginnings of a multiplayer agario here
42:29 - so okay everybody this is the end of
42:31 - part two I don't know how long this
42:33 - video was or if it was at all
42:35 - understandable or useful at the very
42:36 - least you sort of saw how difficult this
42:38 - is and the and I will release the code
42:41 - for what I've got so far so there's a
42:43 - big missing piece here which is that
42:45 - I've got to check intersection and
42:48 - figure out what to do actually uh add
42:50 - the game mechanics where you when they
42:52 - intersect the bigger one eats the
42:53 - smaller one the your game the smaller
42:55 - one's game is over maybe you can start
42:57 - again there's a lot more steps to add to
42:59 - this but this I think is going to get
43:01 - you a little bit further as you can see
43:02 - the sort of basic mechanics of having a
43:05 - server keep track of a list of everyone
43:07 - connected have the clients Implement
43:10 - their own motion physics update their
43:12 - location to the server and if the server
43:13 - send those new locations back to the
43:15 - clients so that they update so you know
43:17 - there's a question of you know how do
43:18 - you deploy this what would happen if you
43:20 - suddenly had 100,000 people playing this
43:21 - all at once is node and websockets going
43:24 - to support that but you can sort of see
43:25 - the basic ideas of how you can have this
43:28 - more sophisticated networking
43:30 - multiplayer networking um working um so
43:35 - um thanks for watching this particular
43:37 - video uh this was part two and at some
43:39 - point I will release a part three which
43:41 - I do a few more steps although it might
43:42 - be a while before I get to that thanks
43:44 - again