00:00 - hi okay I'm back so this is where I left
00:05 - off in the previous video I have a
00:06 - genetic algorithm attempting to find the
00:09 - shortest path between all of the cities
00:12 - which are these just two dimensional
00:13 - points innocent and the traveling set
00:15 - with the traveling salesperson problem
00:16 - so what I'm doing in this version that I
00:19 - made in the previous video is I am just
00:21 - looking at the borders the path that had
00:25 - the shortest distance and I am cloning
00:28 - those for a new generation and then kind
00:30 - of shuffling some about randomly but I
00:32 - am not actually applying crossover so
00:35 - then what one thing I want to do in this
00:37 - video is apply a crossover so in other
00:39 - words I have a set of points like 1 2 3
00:49 - 4 let me write this again 1 2 3 4 and 1
00:54 - order might be something like this and
00:57 - another order might be you know
01:00 - something like this so what I'm doing
01:04 - right now is we can see I don't know
01:05 - this it's hard to see these are by
01:07 - others so let's say this has a distance
01:10 - of some number that maps to a fitness
01:14 - probability score of point 6 and this
01:17 - has a distance of some number that maps
01:20 - to a probability score of point four
01:22 - what I'm going to do for the next
01:24 - generation is I'm going to make 2 if I
01:27 - only have a population of 2 I'm going to
01:30 - make two new orders
01:34 - can you guys hear that so loud noises in
01:39 - the hallway ok I'm going to make two new
01:40 - orders and I want to pick I'm going to
01:43 - make these two new orders out of the one
01:45 - that have done the best so I'm going to
01:47 - throw a dart at the wall and I hope I
01:51 - don't ruin this mark this beautiful
01:53 - marker I have a 40% chance really really
01:56 - a 50% chance of hitting either I have a
01:58 - 60% chance of picking this one a 40%
02:01 - chance of picking this one if I pick
02:02 - this one I'm going to clone it to the
02:04 - next generation but maybe swap two
02:06 - points so instead of you know the order
02:10 - goes from here to
02:11 - you hear I'm going to go from here to
02:13 - here to here then or something and then
02:15 - I might pick this one so I'm just doing
02:17 - I'm creating new elements of the next
02:22 - generation from the previous generation
02:23 - by making a copy what I want to actually
02:25 - do is have a mechanism for how I combine
02:28 - two of them into a new order and that's
02:31 - what I'm going to look at in this
02:32 - particular video now before I do that
02:34 - let me see if I can just add some simple
02:36 - little improvements to this so for
02:39 - example one thing I want to do is I'm
02:44 - only drawing the best ever and so what
02:48 - might be useful for me to also draw just
02:49 - to sort of see how this is working is
02:53 - what I could do is translate to the
02:57 - bottom of the window and I'm going to do
02:59 - this I could also draw just the current
03:02 - best so where am I evaluating the best
03:04 - one I'm doing that here so I could have
03:08 - another variable which is just sorry
03:12 - where I have a variable called best-ever
03:17 - I'm going to have like current best and
03:20 - what I'll do is here I will also say
03:27 - current record equals infinity and if I
03:34 - will now say also I will also check if d
03:37 - is less than current record then current
03:40 - record is this and current its best or
03:42 - best current I can't remember what I
03:43 - called it what did I call it current
03:46 - best current best is this so I don't
03:49 - know if this is that useful but I
03:50 - thought I would add it so I can also see
03:52 - now this is me drawing this is V drawing
04:00 - the best ever and now I also want to
04:02 - draw the current best so let's run this
04:07 - and we can see so we can see that it's
04:10 - you know the population is doing a lot
04:13 - more stuff internally but every time
04:14 - eventually as it's trying your life
04:16 - sometimes gets a better one so this is a
04:18 - little East we have something more to
04:19 - watch here to sort of see like that it's
04:22 - continuing to animate
04:23 - to try and guess future options okay so
04:26 - now Ken how else could we improve this
04:30 - let me look and first of all one thing
04:34 - that I did kind of weirdly which doesn't
04:35 - make too much which I feel like needs is
04:38 - a mutase function needs some improvement
04:40 - so what you take does is every time it
04:44 - clone something it just swaps two
04:46 - elements but I do have this idea of a
04:49 - mutation rate so I don't know I sort of
04:52 - feel like what might make sense is for
04:54 - me to say like well let me have a loop
04:57 - that goes through the total number of
04:59 - cities and then just says like if a
05:05 - random number one is less than the
05:07 - mutation rate then perform this swap so
05:12 - this is just a way for me to say like if
05:13 - there's ten cities then maybe I have a
05:15 - chance of like doing ten swaps but maybe
05:18 - I only have a 10% chance of doing a swap
05:21 - or something at any for any given city
05:23 - for any given spot I don't know this I'm
05:25 - not sure if this really makes a lot of
05:27 - sense but I am going to I'm going to try
05:31 - it this way and then where I say mutate
05:34 - I could give it like a mutation rate so
05:36 - if I give it a mutation rate of zero we
05:39 - would see that it's never ever ever
05:40 - going to get any improvement if I give
05:42 - it a mutation rate of one we're going to
05:48 - see it's just like really really really
05:49 - making a lot a lot a lot of swaps all
05:51 - the time I don't know if that's so
05:53 - optimal so maybe I would try something
05:56 - like a mutation rate of 0.1 and maybe
05:59 - that's like a little bit better so I
06:00 - don't know what's going to be an optimal
06:01 - mutation rate but at least I have some
06:03 - structure for saying do more random
06:05 - shuffles or less random struggles and
06:07 - that could probably be improved okay so
06:09 - now what we need to do is add crossover
06:13 - so first I got to think about how we're
06:15 - going to do a crossover algorithm but
06:17 - right now what I want to do before I do
06:18 - that is just find a place in the code
06:20 - where I'm going to do crossover okay so
06:22 - we're this is where I make this is where
06:27 - I I create a new order from I pick one
06:30 - from the population based on its fitness
06:32 - and then I
06:33 - mutated and at it so really what I want
06:34 - to do is I want to change this now to be
06:38 - order a and order B I want to pick to
06:41 - order a and pip order two and then I
06:44 - want to save our order equals cross over
06:48 - order a and order B so what I want to do
06:53 - is I want to pick to cross them over
06:55 - then mutate and then get a do now
06:57 - whether this is actually going to
06:58 - improve the performance of this it's
07:00 - unclear to me but certainly this would
07:02 - be something that's typically found in a
07:04 - genetic algorithm and worth giving a try
07:06 - but here's the really tricky thing so
07:08 - I'm going to come over to the white
07:09 - board and then we have to discuss how
07:12 - we're going to do crossover so remember
07:17 - let's say this these were the orders 0 1
07:21 - 2 3 these are the index size 0 1 2 3
07:26 - so one order is 0 3 1 2 that's one order
07:33 - another order is 0 2 3 1 okay
07:40 - so typically if you've watched any of my
07:41 - other videos about genetic algorithms
07:43 - the way that you could perform crossover
07:46 - with two arrays of genetic information
07:48 - is to take half of one and half of
07:54 - another and put them together in which
07:57 - case my new order would be 0 3 3 1 but
08:02 - there's a major problem here
08:04 - this is invalid in other genetic
08:06 - algorithm examples that I've done
08:08 - there's no such thing as an invalid DNA
08:11 - array because it's just a bunch of
08:14 - numbers but this is a special kind of
08:16 - DNA array that must have every single
08:20 - instance of each index or once and only
08:23 - once so this kind of splitting it half
08:26 - and half it won't work
08:28 - you know the flipping a coin algorithm
08:30 - won't work I can't say you know pick a
08:32 - or B 0
08:33 - pick a or B okay pick B to pick a or B
08:37 - okay
08:37 - pick a 1 okay pick a or
08:39 - pick me one once again even if I'm
08:42 - flipping a coin
08:42 - I now have ones in two places and I
08:44 - don't have three I'm sure there are lots
08:46 - of strategies for doing this kind of
08:49 - crossover and I would love to hear from
08:51 - any of you of your own ideas of what
08:53 - might be a good technique but here's one
08:55 - that I'm going to try one way that I
08:59 - could do this oh I shouldn't have a race
09:01 - that I can put this two hours in is
09:10 - where I start to lose it okay
09:12 - I erased okay not to please save me only
09:18 - one order again is zero three one two
09:23 - another border is zero two three one so
09:29 - what if I take some random part of one
09:33 - of these so let's say I just randomly
09:35 - decide I'm just going to take 3 comma 1
09:38 - and I'm going to start my next order 3
09:42 - comma 1 I have two empty spaces I need
09:45 - to fill well what if I then said ok I'm
09:48 - going to take oh this was a bad example
09:50 - because I'm going to let let me just
09:52 - pretend this order is a different one
09:55 - because I want to make an example that's
09:57 - a little bit that actually is something
09:59 - you can follow so so this is 0 1 2 3 and
10:06 - I'm going to go 1 3 0 2 1 3 0 2 so what
10:15 - I'm going to do is I need to fill in
10:17 - these last two spots and then it takes
10:19 - them from here in the same order that
10:21 - they're here as long as they aren't a 3
10:24 - or a 1 oops again I don't like this
10:27 - order can I just please have it be it's
10:30 - fun it's like you guys are going to get
10:31 - the idea what should I put a 1 here no
10:36 - it already exists 3 should I put a
10:38 - 3-year know it already exists 0 should I
10:41 - put a 0 here it doesn't already exist -
10:43 - should I put a 2 here yes doesn't exist
10:45 - so what I wanted this to be is in order
10:47 - that's something like 1 0 you know 3 2 I
10:51 - would still get the same thing right
10:53 - because I would
10:54 - one can't go there cuz it's already
10:55 - there zero can three can't go in the
10:58 - next spot but to Kent so I'm going to
11:00 - just pick a random part of the order and
11:01 - then fill the rest from the other I
11:02 - think it other than has a name for it I
11:04 - don't know what it is we've got somebody
11:06 - watching can tell me okay
11:07 - so let's actually implement that now
11:11 - okay let me let's look at that so what
11:18 - do I do I need to write this crossover
11:19 - function okay so coming down here I need
11:21 - a new function I'm going to put it above
11:23 - mutate and we're playing some music in
11:27 - the hallway
11:28 - cross it over order a order B so the
11:34 - first thing I want to do is I want to
11:35 - take a random slice of order a so I'm
11:39 - going to say start equals floor random 0
11:46 - comma order a just random order a dot
11:49 - length and then I'm going to say N
11:53 - equals some value between start and the
11:58 - end of random a we could always just
12:01 - take the first half or something but
12:02 - this is just I'm getting a random spot
12:06 - anywhere in here so maybe I pick this
12:08 - spot and then I want a random spot
12:10 - anywhere between here and here I
12:11 - probably should say plus 1 right plus 1
12:16 - okay so now I should probably say start
12:20 - plus 1 I think because the the when I'm
12:26 - about to use slice so I must say new
12:28 - order equals order a slice start comma
12:35 - end and I'm pretty sure that was slight
12:37 - if I give it 3 at the start and 3 at the
12:40 - end I won't get anything let's let's
12:42 - actually just look in the console to
12:43 - sort of see like if I have an array
12:45 - that's 0 5 0 1 2 3 4 a dot slice 0 comma
12:53 - 3 what do I get I get 0 1 2 I get I
12:58 - don't get 3 I get 0 1 2 and if I set a
13:01 - dot slice 3 comma 3 I get an empty array
13:04 - so I always want at least get
13:07 - if I would say a dot slice zero comma
13:10 - five that would be the whole thing so I
13:12 - think that makes sense okay now what I
13:17 - need to do is figure out how many things
13:19 - do I have left so I have a total number
13:23 - of cities - new order lengths so this is
13:29 - how many I need to add right because if
13:31 - the total number of things should be ten
13:34 - and I get this slice of six then I have
13:37 - four more that I need to add so I now I
13:39 - have a loop I equals zero I is less than
13:42 - left actually but here's what I want to
13:45 - do actually though is what I want to do
13:47 - is I want to say var I want to I want to
13:50 - actually loop through I want to loop
13:53 - through the order B's everything in
13:57 - order B right because City equals order
14:02 - B index I I want to know if new order
14:10 - concludes I think this is a JavaScript
14:13 - function that will tell me if it already
14:15 - exists in the array let's see so this is
14:17 - my array a a includes two is true a
14:23 - includes five is false so this is going
14:26 - to work for me I can say if new order
14:29 - includes I'm sure there's some fancy
14:31 - super JavaScript es6 array operation way
14:35 - to do this I look forward to hearing
14:37 - about that in the comment if new order
14:39 - includes city if new order does not
14:44 - include city then new order push city so
14:51 - I guess I could just I guess I don't
14:52 - need this left because by definition
14:54 - this should just work if I've done
14:56 - everything correct if I if I've done
15:00 - everything correctly then this should
15:02 - have the right number of stuff in it I
15:05 - think what I'm going to need to do is is
15:09 - definitely just try this function house
15:11 - so and then at the end I want to say
15:15 - return new order so let's try this so
15:19 - the program still running as it ran
15:20 - before I
15:21 - and actually introduced crossover or did
15:22 - I I don't think I actually put crossover
15:25 - in yeah oh I did it's actually doing it
15:30 - but let's let's see if if this actually
15:32 - works a equals an array like 0 1 2 3 4
15:38 - and B equals I'm going to say 4 3 2 1 0
15:43 - so what I want to say is cross over a
15:46 - comma B let's just see what I get 0 4 3
15:50 - 2 1 that makes sense I mean it work it's
15:55 - a random order but how is that a cross
15:57 - over
15:58 - it must have only picked 0 yeah only
16:00 - pick 0 from a and then it got 4 3 2 1
16:03 - okay that makes sense then it got it got
16:06 - 1 2 3 and then it got 4 and then 0 so
16:10 - this is working this algorithm appears
16:12 - to be working so now is this actually
16:15 - improving anything unclear let's uh
16:19 - let's reduce I think now we could really
16:22 - reduce that mutation rate because
16:24 - crossover is going to give us a lot more
16:26 - variation and I would love to just
16:30 - increase the population size to the
16:32 - point as large as I can increase it
16:34 - without it running too slow so let's try
16:38 - 500 so yeah this looks um this looks
16:44 - pretty good like I'm kind of seeing it
16:47 - slowly over time improved you know how
16:51 - many cities is this 10 cities when I put
16:53 - 20 cities let's give it some more space
16:57 - let's give this canvas like a bit more
16:59 - room to work with and see what we get
17:07 - now yeah well let's take a pause here
17:13 - I'm going to come back in a minute after
17:15 - I've let this run for a while
17:19 - okay I'm having a little rest there is
17:22 - my lullaby that's and I back so I let
17:26 - this run for a while you can see that
17:27 - it's doing pretty well it seems that
17:29 - this is the best one it's found and sort
17:30 - of sticking with that for quite a while
17:32 - so I'm going to see maybe we can do one
17:34 - or two more small improvements and I'll
17:36 - give you guys some ideas of things you
17:38 - might do with the code to improve it and
17:39 - then I'm hoping you're going to submit
17:40 - some user submitted improvements okay so
17:45 - a couple things one is that includes
17:47 - function that I'm using is actually part
17:48 - of es6 which is a newer version of the
17:51 - JavaScript syntax that I'm actually
17:52 - using in most of my videos and es6 also
17:55 - has something called it set which I
17:57 - guess is a which could be a data
17:59 - structure that would be useful here
18:00 - other than just a plain old array the
18:03 - other thing that I want that I should
18:04 - mention is that the distance function
18:07 - that I'm using to actually calculate the
18:10 - distance which is right here this is a
18:14 - pretty inefficient or slow algorithm
18:17 - because it uses the square root so one
18:20 - thing that I could do is add my create
18:21 - my own distance function that doesn't
18:23 - use the square root but just uses the
18:25 - squares of the differences because I all
18:27 - I care about is relative distance so I
18:29 - or the other thing is there's a fixed
18:31 - number of cities I'm only ever looking
18:33 - at distances between them so I could
18:36 - create a lookup table that just
18:37 - pre-compute all the distances I'm just
18:39 - summing up what it is but anyway that
18:41 - aside those are some things you might
18:42 - think about adding there was a great
18:45 - suggestion in the chat from Cole noxee
18:48 - the second wonder what that name is but
18:51 - that may be what I should try in
18:53 - mutation is instead of swapping to
18:56 - randomly actually swapping to neighbors
19:00 - so where do I do the youtaite so what if
19:03 - I pick index a and index B is actually
19:09 - index A plus one so it's the next one
19:15 - and I could say if index B is greater
19:20 - than total cities dot length then I
19:25 - could say or greater than or equal to
19:28 - right if I've gone off the edge then I
19:30 - could say actually index B
19:32 - is index a minus one there might be a
19:35 - nicer way to do this but so what if I
19:37 - only swap two that are next to each
19:39 - other would this be a better algorithm
19:42 - okay so let's run this we're going to
19:44 - lose everything we had from before but
19:45 - I'm going to run this okay so I made
19:47 - some sort of error here can't read
19:49 - property ex of undefined calc distance
19:52 - so that's this there's something wrong
19:53 - with my own app total cities not length
19:56 - total cities is just the total number of
19:58 - cities let's fix that
20:00 - okay so let's hope I'm gonna I'm going
20:03 - to take a little nap again and I'll be
20:06 - back in a while so by the way I'm
20:11 - letting to let that continue running but
20:12 - I realized this would this would be a
20:14 - nicer way of doing this would just be to
20:16 - use modulus operation so that I could
20:19 - just because I could swap the last one
20:21 - with the first one and so this would
20:23 - actually I think be just cleaner way to
20:24 - write this little bit of code I don't
20:26 - want to say rerun it because this has
20:27 - been running for a while I don't know
20:29 - did that improve it did it not 20 cities
20:31 - is a lot let's feel better about
20:32 - ourselves and the world and the
20:34 - traveling salesperson problem let's just
20:36 - quit 12 cities which twelve cities
20:39 - there's a lot of possibilities 12
20:42 - factorial is how many that's the nine
20:49 - million 479 million possibilities which
20:52 - would take quite a while to iterate
20:53 - through all of the possibilities but I
20:55 - have a feeling that if I run it with 12
20:58 - we're going to get something pretty good
21:01 - pretty soon like really fast that was
21:03 - like a pretty good I don't know if this
21:04 - is optimal found something even better
21:05 - oh I'm pretty sure oh you could
21:07 - definitely make it better by going from
21:09 - here today or then to there so anyways
21:11 - hopefully it's going to get even one job
21:12 - talking but we've done something that
21:14 - works pretty well so here's my request
21:17 - to you the viewer please
21:20 - once I post this code go to the link to
21:23 - the code will be a readme file there if
21:25 - you make an improvement add a link to
21:27 - your improvement in that reading file
21:29 - with a pull request if you don't know
21:30 - how to do that and I do have a video
21:31 - about how to make a pull request but
21:33 - just write a github issue comment or
21:35 - tweet at me at Schiffman I would love to
21:37 - see a couple things number one I would
21:38 - love to see what kind of efficient what
21:40 - kind of things can we add to this to
21:42 - make it more optimal let me there's a
21:44 - better way to do taste
21:45 - a better way to do swap a better way to
21:46 - do crossover so what can we add to this
21:48 - to make this optimal the other thing
21:50 - that I really have to think is what is a
21:52 - better way to visually tell the story I
21:54 - don't have this isn't really so great
21:56 - I'm kind of seeing like a bunch of
21:58 - random stuff and sort of the current
21:59 - best but could I see the full population
22:01 - of everything could I watch a graph of
22:03 - how it's improving could I see some
22:04 - annotation is there some interactivity
22:06 - to speed it up and slow it down so I
22:08 - would love to see variations and ideas
22:10 - for how you can tell the story of this
22:12 - problem and how the algorithm is working
22:14 - so thanks for watching these videos I
22:16 - finally did it I kind of I have
22:18 - completed I think the set of videos
22:19 - about the traveling salesperson problem
22:21 - and I look forward to hearing your
22:23 - comments and questions in the comments
22:25 - on YouTube I think oh I have somebody
22:27 - told me I should remind people to LIKE
22:28 - and subscribe so please like and
22:30 - subscribe there could be like an end
22:31 - screen thing popping up around me maybe
22:34 - we'll add that in like and subscribe if
22:37 - you watch these next videos
22:38 - and I'll see you in a future video I
22:41 - hope okay talk to you soon
22:42 - or whatever this is that we're doing
22:45 - here on the Internet
22:45 - did it fix that no okay wait like maybe
22:48 - it got better no no it should go up here
22:50 - and then there would just be so much
22:51 - shorter okay I'm going to watch off
22:53 - stick around and watch it I'll tell you
22:54 - what happens another time goodbye
23:00 - [Music]