00:00 - - Hello, welcome to a Q and A video.
00:03 - In this particular video,
I am going to talk about,
00:06 - I'm going to answer this question.
00:07 - Now (laughs) you might notice
on this GitHub repository
00:10 - that it was this person
whose name is Shiffman
00:13 - who asked this question.
00:14 - So, somebody asked me this question,
00:16 - I get this question a lot
00:18 - and so I just added it to the GitHub repo,
00:20 - but I would like to point out
if you're watching this video
00:22 - and you're interested
in asking me a question
00:24 - that I might answer in a future video,
00:26 - find the link to this GitHub repository
00:28 - in this video's description,
00:29 - go there and ask your own question.
00:31 - So, the question for today is,
00:33 - what is the difference
between p5.js and Processing?
00:36 - And I'm going to answer this, by the way,
00:38 - I haven't prepared anything (laughs),
00:39 - so it's going to be kind of
stream of consciousness here,
00:41 - but I'm going to answer this
in a sort of broader sense.
00:43 - So, one of the things
that's happening right now,
00:45 - this very week for me,
00:47 - is that I am teaching a class at ITP,
00:50 - which is a program at
Tisch School of the Arts
00:52 - at New York University called
00:53 - Introduction to Computational Media.
00:55 - This is a class for people
who want to learn to program
00:59 - who have never written any
code before, whatsoever,
01:02 - in their life.
01:04 - And this is another question
that gets asked a lot,
01:05 - oh, hey, I'm interested
in this code stuff,
01:07 - I want to write some code.
01:08 - What should I learn, what should I use?
01:09 - Now, I don't even for a brief millisecond
01:13 - pretend to actually have
the answer to that question.
01:15 - I don't, the answer to
that question is different
01:18 - for a number of reasons.
01:20 - Personal preferences,
background, interests,
01:22 - that sort of thing.
01:23 - So many languages, frameworks,
tutorials, et cetera.
01:25 - I can only sort of speak
from my own experience
01:27 - in the sort of smaller
scope of one of the things
01:29 - that I'm interested in and
work on personally which are,
01:33 - tools that allow people
to get up and running
01:36 - with programming very
quickly and sketch out ideas,
01:39 - in particular, creative ideas,
01:40 - often ideas that have a
strong visual component.
01:43 - Now, and the tools that I enjoy
for these kinds of projects
01:48 - and for learning code and
sketching out these kinds
01:50 - of ideas are, just happen to
be, coincidentally (laughs),
01:53 - p5.js and Processing.
01:54 - So I want to talk a little
bit about the history,
01:56 - and this is really now a
video that is, in some ways,
01:59 - I'm focusing,
02:00 - oh I already have this URL open,
02:01 - on something called the
Processing Foundation.
02:04 - So, the Processing Foundation
is a non-for-profit,
02:08 - United States, 501(c)(3) tax
exempt corporation (laughs).
02:12 - It sounds very official and ominous,
02:15 - Processing Foundation, duh.
02:20 - And it exists to maintain
software platforms
02:22 - as well as develop and
administer education,
02:27 - community and diversity
initiatives around code
02:30 - and creativity.
02:32 - And you can read about
the Processing Foundation
02:34 - on the website and I
encourage you to get involved,
02:36 - and I'll talk a little bit
about how you can get involved
02:38 - at least in contributing to open source,
02:40 - maybe more towards the end
of this particular video.
02:42 - So I encourage you to check
out the Processing Foundation.
02:44 - Now let me talk through,
02:45 - for those of you who might be interested,
02:47 - my sense of the history (laughs).
02:52 - (clears throat) History teacher.
02:53 - I don't know, okay.
02:54 - My sense of the history of
Processing and what it is,
02:59 - and what p5.js is and
also I want to talk about
03:01 - processing.py, or p-y.
03:03 - Oh and then there's
also Processing for the,
03:05 - there's so much.
03:06 - But let's start small.
03:07 - So 2001, I think I actually
have done a lot of this
03:09 - in another video but
I'm kind of repeating it
03:11 - just to kind of give some context here.
03:13 - So 2001, Processing.
03:20 - It was recently actually
the 15th anniversary
03:22 - of Processing itself.
03:23 - Ben Fry, one of the
creators of Processing,
03:25 - tweeted out a link to a workshop.
03:27 - I'll try to find that and put it
03:29 - in this video's description.
03:30 - It's not coming to me this moment.
03:31 - But there was the first kind
of public workshop using
03:34 - Processing was in August of 2001,
03:36 - if I'm correct about that.
03:37 - So the co-creators of
Processing, Ben Fry, Casey Reas,
03:46 - and Processing itself
came out of their work,
03:50 - at a place which still exists of course,
03:52 - which a lot of you have probably heard of.
03:53 - Called the MIT Media Lab.
03:55 - And their professor at the time named,
03:59 - John Maeda.
04:02 - World renowned designer,
artist, illuminary, thinker,
04:06 - former President of RISD,
professor at the MIT Media Lab,
04:09 - John Maeda.
04:11 - And I apologize if I'm
mispronouncing the name at all.
04:14 - Anybody's name throughout
the course of this video.
04:16 - So the group was called the
Aesthetics in Computation Group,
04:19 - that was the research group at the time.
04:22 - It would be great to have Ben and Casey
04:24 - just as sort of bobbling heads here.
04:26 - They don't need to be bobbling
but to actually talk here,
04:28 - but I think a reason why
Processing came into existence,
04:33 - on the one hand,
04:34 - you're a person whose
name happens to be Ben Fry
04:37 - or Casey Reas in 2001.
04:38 - You want to teach people
about programming.
04:40 - What do you use?
04:42 - There was a piece of software known as
04:46 - Design by Numbers at the time,
04:49 - which was created by John Maeda.
04:51 - And this was a software
platform that was designed
04:55 - for graphic designers to code.
04:57 - And so a lot of the ideas
of Processing came out
05:00 - of Design by Numbers and
of course so many things
05:03 - came before that.
05:04 - We can think of the Logo
programming language,
05:07 - and Turtle graphics and,
Hypercard and the work of,
05:13 - Seymour Papert and all
sorts of various other types
05:17 - of historical precedence
for this idea of creativity
05:20 - through coding.
05:21 - But the idea here (laugh) boy
am I being really long-winded
05:24 - about this (laughs).
05:26 - Okay I'm just going to keep going.
05:27 - I can't see the chat now,
maybe everybody's left.
05:29 - My 163 viewers has gone down to like 15.
05:33 - So this is kind of where
everything came from,
05:35 - this idea of okay number one, a tool that,
05:40 - let's say I'm the person who's
going to create Processing.
05:42 - Why am I doing it?
05:44 - One, I want to make my own work,
05:45 - so I need something with
which to make my own work.
05:47 - I also want to teach others
to make creative work,
05:50 - I need something to teach others.
05:51 - So one of the things that's been there
05:53 - from the very beginning with Processing
05:55 - is walking this fine line
between a kind of beginner,
05:59 - friendly, easy-to-get-started platform,
06:01 - that you can use right
from day one and write code
06:04 - and get stuff going,
06:05 - in a simple and friendly way.
06:06 - As well as a platform
that you can actually use
06:10 - for larger projects,
commercial work, artistic work,
06:14 - creative ideas, sketching out ideas,
06:16 - as you get more and more
knowledge through code.
06:19 - So it's something that can
give you a full journey.
06:22 - So the question then in this time is,
06:25 - well what is a good programming language
06:30 - to build Processing with
and build on top of?
06:33 - Now one of the limitations
of Design By Numbers was
06:35 - that all it really let you
do, if I'm correct about this,
06:39 - is make interesting
algorithmic geometric graphics
06:43 - through code.
06:45 - But what if you wanted to connect hardware
06:49 - or talk to the network?
06:51 - Or have your graphic
sketch visualize data?
06:56 - Or hardware being,
06:57 - other types of hard-,
I was thinking camera,
06:59 - but that's hardware.
07:00 - So one of the reasons
that Processing was built
07:03 - on top of Java is that suddenly,
07:07 - if you have this simple,
friendly environment,
07:09 - with a simple drawing API,
07:11 - but you build it with the language Java,
07:13 - you're going to get all
this other stuff for free.
07:15 - It's going to be extendable.
07:17 - You can write other libraries for it.
07:18 - You can pull other Java libraries into it.
07:20 - There was also at the time,
something called an applet.
07:27 - And one of the key pieces of Processing
07:30 - has always been the key sort of,
07:33 - of philosophical principles,
has been shareability.
07:38 - So I'm going to make something.
07:41 - I want to share it with my
friends, quickly, easily,
07:43 - instantly, and the web is a great platform
07:45 - with which to do that.
07:46 - I hope everything's still working, yes.
07:51 - So applets were the thing in 2001.
07:54 - If you had this animated
graphics thing that you made
07:56 - and you want to put it in a webpage,
07:57 - you put it with a Java applet.
07:59 - Anybody watching this now,
08:00 - you either have never
heard of an applet or
08:02 - that your only sense of an
applet is a frustrating moment
08:05 - where there's some web pages
trying to load a Java applet
08:07 - and you get like 15
different error messages.
08:09 - Try to restart, reinstall
Java like three times
08:11 - and it still never works.
08:12 - Eventually you give up
and do something else.
08:14 - So this is kind of where
Processing came from.
08:16 - So let me show you now over
here, I'm back over here,
08:21 - taking a peak at the chat.
08:23 - People are asking about our dweno
08:25 - which is kind of interesting to
08:26 - bring that into the picture as well.
08:28 - But I'm going to run the
current version of Processing
08:30 - right now.
08:32 - (laughs)
08:33 - And I'm going to open it.
08:34 - And so this is what Processing
is and in its form today.
08:38 - Come on Processing (snaps fingers).
08:45 - If it would come up I could
then have this applause.
08:47 - (applause)
08:49 - Did it come, what happened there?
08:51 - Oh it's there (laughs).
08:52 - There it is.
08:53 - So this is what Processing looks like.
08:55 - And I can do something
like just say, background,
08:58 - oh and let's make the font a big bigger.
09:05 - And I can do something like this.
09:07 - And I can say.
09:12 - And I can run this sketch.
09:13 - And there we go.
09:14 - And I have my first bit of code.
09:17 - So the idea here is that
I am writing code in Java,
09:20 - but a lot of what you
would normally have to do
09:23 - your first day of a Java programming class
09:25 - where you need to have a
main thing and a class thing,
09:29 - then set up your environment
variables and open up
09:31 - something called Eclipse
maybe, or command line,
09:33 - all of that is done for you inside of
09:36 - the Processing development
environment itself.
09:38 - So Processing is both
a library of functions
09:42 - and classes you can call and
do stuff with like, background,
09:46 - here's a nice sort of pink background.
09:47 - Ellipse which draws a
circle on the screen.
09:49 - And a development environment itself.
09:51 - And this development
environment has come a long way
09:54 - in 15 years.
09:55 - There is a console here,
there's a separate errors pane.
09:58 - When you have errors you can see here
10:00 - if I forget my semicolon
suddenly you'll see,
10:02 - missing a semicolon on line number two,
10:05 - and a little red squiggly here,
10:07 - and if I then put the semicolon back,
10:09 - the red squiggly goes away.
10:10 - There's even a debugger over here.
10:12 - I think I made a video
tutorial about the debugger
10:14 - that's on the Processing website.
10:15 - There are, I can go to
sketch, import library,
10:19 - add, woops.
10:20 - There's a whole contributions
manager so if I go here,
10:23 - I can find countless libraries
to do various things,
10:27 - with cameras and other pieces of hardware,
10:29 - and color and a GUI element,
and physics engines.
10:33 - So there's a lots and
lots of things I can do
10:35 - with Processing.
10:37 - (bell dings)
10:38 - (laughs)
10:40 - I'm getting text messages
which I was worried were like,
10:42 - everything's not working, okay.
10:47 - (whistles)
10:48 - So this is Processing.
10:49 - Now (laughs) I really
should just scrap this
10:52 - and start over 'cause I
could answer the differences
10:54 - between Processing and p5.js
rather quickly and instead,
10:56 - I'm going through this
sort of history thing.
10:58 - So let's fast,
10:59 - let me come over here (laughs).
11:05 - You know if I were in an
actual classroom with people
11:07 - I would get a read of the room, a vibe.
11:09 - People would raise their hands
11:11 - I would have a sense.
11:12 - Instead I'm just speaking
to this thing which is like
11:14 - a little circle here and
it's a nice little thing,
11:17 - but it doesn't really talk back to me.
11:21 - So let's think about,
11:24 - let me talk about a little
bit what's now happening.
11:33 - This is where, this is really,
11:38 - this history now has
many, many years (laughs).
11:40 - From 2001 all the way,
I would say up around,
11:42 - I believe around 2013,
11:45 - was when one of the first
conversations started
11:47 - to happen around,
11:52 - what if Processing,
11:55 - the way you could think of this question,
11:56 - is what if Processing started over?
12:02 - So instead of thinking about,
12:05 - so there have been a lot of
projects to port Processing
12:09 - to another environment.
12:11 - So take a literal translation
of the entire API.
12:15 - By API I mean all of
the functions and things
12:17 - that Processing can do,
12:18 - and translate it to another language.
12:21 - Notably I'll mention two of them.
12:23 - One of them is called Processing.py,
12:30 - which is a Python version
of Processing and in fact,
12:33 - if I come back over here,
12:35 - I can access that instantly,
up here under Java.
12:38 - I can actually switch here to Python.
12:41 - Now I don't think this
Python will show up here
12:43 - by default, you have to
first go to add mode,
12:45 - and then add Python,
12:47 - but if I switch to Python I
can suddenly type Python code
12:49 - in here and run Processing
sketches using the Python
12:52 - programming language and access
the entire Processing API.
12:56 - There is another project called
13:00 - Processing.js and this project is,
13:06 - this is very confusing because all these
13:08 - are named Processing.
13:09 - This was a project first
created by John Resig,
13:13 - which does something even more
magical than just taking all
13:17 - of the Processing API and
translating it into JavaScript,
13:20 - for a canvas element in the browser.
13:22 - What John Resig was able to
do is not only port Processing
13:26 - to JavaScript so you could write,
13:27 - call make Processing calls in JavaScript,
13:29 - but this also has an engine
to take your Processing code
13:34 - and translate it behind the scenes for you
13:37 - into JavaScript essentially.
13:38 - So you don't, you could write
your Processing code in Java
13:41 - and have it run in the
browser in JavaScript through
13:44 - an auto, magical process.
13:47 - So this Processing is a project maintained
13:51 - by the Foundation itself.
13:53 - Processing.py is also a project maintained
13:56 - by the Foundation.
13:57 - Processing.js was a
separate project as I said,
13:59 - created and started by John Resig.
14:02 - I believe it's now also used as an engine
14:04 - for the Khan Academy,
14:05 - a lot of the Khan Academy tutorials.
14:07 - I believe if it's still
the case that John Resig
14:09 - does work for Khan Academy.
14:11 - And at one point then
Processing.js was taken over
14:14 - by some folks who work
with the Mozilla Foundation
14:17 - and I've kind of,
14:18 - I don't know if I have all
the pieces of the history
14:20 - of that directly into my head.
14:21 - I haven't been as involved
with that particular project.
14:24 - But, this question in 2013 came up.
14:29 - What if Processing were to start over?
14:32 - And someone that I would
like to mention here,
14:38 - is Lauren McCarthy.
14:41 - Processing, one of the
things we do as a Foundation,
14:44 - is we offer fellowships.
14:46 - Small stipends to people
who propose a project around
14:51 - a code library, an education initiative,
14:53 - a diversity initiative and at the time,
14:56 - Lauren McCarthy I believe was one of,
14:59 - one of the first Processing
fellows to think about
15:02 - and answer this question.
15:04 - And so the question,
15:07 - and I'm not saying this
question was actually posed,
15:09 - but I'm thinking about it this way for now
15:10 - just for the sake of argument.
15:13 - You know there's a lot of
different paths that you
15:15 - could take I think,
15:16 - and it could make good
cases for all of them.
15:19 - But this idea of shareability,
15:23 - the idea of simplicity back to the sort of
15:26 - Design By Numbers core
ideas of simplicity,
15:29 - for with drawing, and
shareability on the web.
15:32 - Everything came back to
JavaScript again and again
15:36 - and again.
15:37 - So on the one hand you could say, okay,
15:39 - Processing.js already exists.
15:42 - What is the reason for having
yet another JavaScript version
15:46 - so to speak, of Processing?
15:48 - And I think what Lauren
said and what Lauren did,
15:51 - and now many others have
done and contribute to,
15:54 - beyond just Lauren who
started this project was,
15:57 - sort of say well, this
project called p5.js,
16:00 - and I want to talk about
the little p in a moment,
16:04 - this project called p5.js
is not just about saying,
16:09 - Processing is this thing that people like,
16:11 - let's port it to JavaScript,
16:13 - but let's not port the code,
16:15 - or the names of all the functions
or how everything works.
16:19 - Let's port the goals, the philosophies,
16:22 - the principles behind Processing.
16:24 - Openness, friendliness,
accessibility, design,
16:31 - visuals, art.
16:32 - Let's port all of those kind
of core principles and ideals
16:36 - of Processing and take those
and design a new platform
16:40 - around those ideas, in a new environment.
16:42 - Because if you're in the browser,
16:44 - it doesn't necessarily make
sense to do things the same way
16:48 - they've worked in what's now essentially
16:49 - a desktop application, development
environment, Processing.
16:54 - And you know what I'm realizing
this video that I'm making
16:56 - is kind of the history
of Processing and p5.js
16:58 - and I'm going to make a
separate video which looks
17:00 - at the differences between the two,
17:01 - and I'll make some code
examples that go back and forth.
17:04 - So I'm not actually answering
that question in this video,
17:06 - but that's fine.
17:08 - So this I think is really the idea,
17:10 - and JavaScript is such a
different place than Java,
17:15 - and being on the web is such
a different place than being
17:18 - in a desktop application.
17:19 - So many things are different.
17:20 - Most notably too,
17:22 - I'll mention two things right now.
17:24 - One is that in addition to
all the drawing functionality
17:28 - that's part of Processing,
17:29 - p5.js has a DOM manipulation library.
17:33 - And what I mean by that is,
17:35 - and I've kind of made this crazy map here
17:37 - and I almost don't want to erase anything
17:39 - so I'm just going to use
this little corner over here.
17:41 - If this is your Processing window,
17:45 - that you're drawing your
lovely spiral pattern in,
17:48 - that's all you get in Processing.
17:50 - Your graphics window.
17:52 - If this is your web browser,
and you're working in p5.js,
17:57 - and you create a canvas where
you draw your spiral in it,
18:01 - you get that in p5.js as this
canvas but you also get more.
18:06 - Because the canvas is
just one element sitting
18:08 - on the webpage.
18:09 - And you could have some paragraphs.
18:11 - You could have an image.
18:13 - You could have like a little audio player.
18:16 - You can create so much
more around the canvas on
18:19 - that webpage and that's
what p5.js also offers.
18:23 - It's not just,
18:24 - as Processing is to Java,
it's built on top of Java,
18:28 - p5.js is built on top of JavaScript,
18:30 - but it also has hooks into HTML.
18:33 - So here I think you know, really Java,
18:35 - there's also hooks into HTML,
18:38 - CSS and JavaScript.
18:45 - Okay so I'm kind of
wrapping up this discussion
18:46 - of the history here since this is,
18:48 - you might be watching this
just as a video (laughs).
18:51 - I don't know if you will
but, maybe you will.
18:53 - I'm going to check now
this is, at the moment,
18:55 - happening as a live stream,
18:56 - so I'm just looking at chat to see
18:58 - if there are any questions or corrections.
19:00 - So if you're watching this
now and you said something
19:01 - 15 minutes ago in the
chat but it was important,
19:03 - maybe add it again.
19:06 - So here I come back over
here and I'm going to look.
19:11 - (laughs)
19:12 - I don't actually see anything in the chat.
19:14 - So I think perhaps I'm
going to wrap up this video
19:16 - and what I'm going to do in
the next video is I'm going
19:18 - to actually look at Processing
and p5.js side-by-side
19:22 - and see how they work together
and how some of the code,
19:25 - how the code is actually
different and similar
19:27 - and what some of the capabilities are.
19:28 - What's faster here, what's slower here.
19:30 - What works better here,
that type of thing.
19:33 - Yes JavaScript is slower.
19:37 - Thanks for watching
this video a little bit
19:39 - about the history of Processing and, ah!
19:42 - I forgot something important.
19:44 - (bell dings)
19:45 - So I want to talk about
the little p because,
19:49 - JavaScript libraries
actually if you'll notice,
19:52 - often start with a capital P,
and I'm going to have to find,
19:56 - you're going to have to
bear with me for a second.
19:58 - I'm going to go to
github.com/processing/p5.js.
20:02 - I'm going to go under Issues, I'm
going to search for capital P,
20:07 - P5 with a capital P.
20:12 - I want to just read this to you (laughs),
20:15 - because I want people to
hear this and I, Lauren,
20:18 - I hope will have as a guest.
20:20 - You can read a great
interview with Lauren that
20:22 - was just done by Kadenze
and I'll try to link to that
20:25 - in this video's description.
20:26 - I can have her as a guest to
make these statements herself.
20:28 - But since I'm here on YouTube right now,
20:30 - I believe strongly in the
work that Lauren is doing
20:33 - and that the Processing
Foundation is doing
20:34 - to make these open source
environments more inclusive
20:38 - and accessible,
20:39 - and so I want to just essentially
read this statement to you,
20:44 - which is a little bit
of a weird thing to do
20:45 - on a YouTube channel.
20:46 - To just read something
that's in a GitHub issue.
20:48 - If you want to click and read it yourself,
20:50 - you can stop this video now.
20:51 - But there was a GitHub
issue thread that started
20:55 - P5 with a capital P.
20:59 - The question was sort of posed like,
21:00 - hey there's this kind of a
little bit of an advance thing
21:03 - if you haven't programmed
before that you'll see.
21:06 - new p5 is a way of doing
this kind of crazy,
21:10 - make an instance of a p5 sketch,
21:12 - and a sort of JavaScript
standard might be,
21:15 - capital P5, right?
21:17 - If you're making a new instance
of a JavaScript library,
21:19 - you might say it with a
capital P and Lauren wrote
21:22 - this response which I think,
21:25 - which is really I think
speaks to some of the goals,
21:28 - and principles of the project.
21:31 - Totally hear you.
21:32 - Indeed, namespaces in JS
are generally capitalized,
21:35 - this is a good point.
21:36 - However, we chose the
lowercase p to indicate
21:39 - that we were breaking with tradition a bit
21:41 - with this library.
21:42 - That is, breaking the
tradition of capitalizing,
21:44 - but also trying to
break with the tradition
21:46 - of many open source projects
that are male dominated,
21:48 - lacking diversity,
21:49 - and privileging experienced
developers in discussion
21:52 - over beginners.
21:53 - And so to this end,
21:54 - we are explicit in the community statement
21:56 - and the GitHub the code of content.
21:58 - So I highly encourage any
of you that are interested
22:00 - in open source and Processing and p5.js,
22:02 - to go to this issue and click on and read
22:04 - the community statement and
the GitHub code of content,
22:07 - and are really trying to see
what happens if you build
22:09 - an open source toolkit,
22:10 - founded on core values of
diversity and inclusivity.
22:13 - And this relates back to
something here which is that,
22:18 - this question that I asked
at some point in this video
22:21 - which is what if Processing started over?
22:22 - And this is something
that Lauren said to me,
22:24 - which I think is the
key principle of p5.js.
22:27 - The question isn't just,
22:29 - what is it that we should
be doing right now,
22:31 - to make a creative coding
platform, technology-wise?
22:34 - That's not the question.
22:35 - It's not about,
22:36 - make sure we support ES6
and the fanciest new,
22:40 - whatever, thing, that's
in the browser now.
22:45 - What's happening in the world today?
22:46 - How do we make something
that responds to the cultural
22:51 - landscape of today,
22:53 - that breaks with some of
these kind of traditions
22:58 - in open source development
that have excluded a lot
23:01 - of people of varying
backgrounds and skill levels?
23:04 - And genders and et cetera.
23:05 - So that's really sort
of a key core principle.
23:09 - It's not just about the code.
23:11 - It's not this thing, diversity,
23:13 - and thinking about diversity
is not a thing you do
23:15 - after you write the code.
23:16 - It's something you have have
to do right from the beginning
23:19 - of a project itself.
23:21 - We are really trying to see
what happens if you build an
23:23 - open source toolkit founded
on core values of diversity
23:25 - and inclusivity,
23:26 - letting all design
decisions flow from there.
23:31 - There's a lot more but, and Lauren writes,
23:33 - for me, the lowercase p
suggests a new tradition
23:36 - of including as many
different kinds of people
23:38 - as possible in the project.
23:43 - And I like this, I like the word plucky.
23:44 - Plucky little p, plucky little community,
23:47 - and there's some more
discussion here which,
23:51 - ah and this so, also I'll
mention, this is a nice little
23:53 - tidbat for, tidbit, tidbat,
23:55 - tidbit for those of you,
23:58 - which is that where
does this p5 come from?
24:02 - So actually when Processing
was first created,
24:05 - there was a URL which was,
24:09 - I like to say proce-five-ing (laughs),
24:12 - because Processing wasn't
actually available,
24:14 - so it had two fives in it instead of s's,
24:16 - which became p5 for short.
24:18 - So Processing has always,
24:19 - has often been referred
to as p5 for short.
24:21 - And now little lowercase
p with a five dot js
24:25 - for JavaScript.
24:27 - So boy this was a very long video that,
24:29 - if you watched and enjoyed
I appreciate it (laughs).
24:32 - I see in the chat people are asking me,
24:34 - talk about network programming,
24:35 - but you know I got to
get through this stuff.
24:37 - There's some more
interesting discussion here.
24:38 - So (claps hands) thanks for
watching this video about
24:40 - the history of Processing,
a little bit about it.
24:42 - I'm sure I missed some important things.
24:43 - I'm sure I missed some
important people's names
24:46 - and so if you have comments
and thoughts about it,
24:48 - please add them in the comments.
24:50 - Send me a tweet and I'm
going to do one more video
24:52 - that's really back to
this Q and A thing about,
24:55 - the sort of,
24:56 - technical differences
between Processing and p5.js.