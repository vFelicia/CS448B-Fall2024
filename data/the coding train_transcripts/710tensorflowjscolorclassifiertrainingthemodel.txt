00:01 - it's time it's time to fit our model
00:05 - here we go so so far you know hopefully
00:08 - you've watched all the previous parts of
00:10 - this series if you haven't that's fine
00:11 - too but what what I have so far is I
00:14 - prepared my data set loaded it from a
00:16 - JSON file I've turned everything into
00:18 - tensors and then I created a Model T F
00:22 - using touch flow data has a TF
00:24 - sequential model which is designed to
00:28 - receive RGB inputs and output a
00:31 - probability distribution for color
00:34 - labels and you know again this is
00:36 - somewhat of a trivial scenario but I'm
00:37 - classifying data simple data with just
00:40 - three values all between zero one and
00:42 - nine possible categories or labels okay
00:46 - so that's what I've done so far so now
00:49 - that I have this this is actually like
00:51 - it's always the feeders gonna be over in
00:52 - like two seconds not really all I need
00:55 - to do is call model dot fit so modeled
00:58 - outfit now what do I need to pass to
01:00 - model dot fit well the idea of model dot
01:02 - fit is that I'm saying hey here's the
01:04 - training data here are all the inputs
01:06 - and their associated target outputs
01:09 - which I have called X's and Y's now I
01:12 - think I'm gonna get an error right now
01:13 - let me just actually run this and I'm
01:16 - going to up so let me run this and see
01:18 - if I get the error that I'm expecting
01:20 - yeah
01:20 - so look at this Oh okay so a couple
01:22 - things welcome to your life doing
01:28 - machine learning shaped mismatching I
01:30 - didn't even expect this error so I have
01:31 - to think about this one error when
01:33 - checking input expected dense input to
01:36 - have shape three but got array with
01:38 - shape 5643 three so i guess right I'm
01:43 - sending in not just three inputs the
01:46 - shape of my inputs is many so I think if
01:52 - I just do aha
01:56 - so I made a mistake and I used input
01:59 - dimensions where what I really meant was
02:01 - input shape all right let's go look at
02:04 - the documentation
02:06 - and see what it says there and I
02:09 - actually I've got it pulled up already
02:11 - okay so you can see what I specified was
02:14 - input dimensions if specified defines
02:18 - input shape as bracket input dimensions
02:22 - Oh
02:22 - so actually I don't even need those that
02:27 - those array brackets there and that
02:30 - should fix it there we go
02:33 - but if I wanted to use those array
02:35 - brackets because I'm sending in many
02:36 - data points I could actually just
02:37 - specify the input shape directly and
02:40 - this would then have the array brackets
02:42 - around it so it's a subtle distinction I
02:44 - think because only input dimensions is
02:47 - documented let's use that one and let's
02:50 - put a three here okay so no peeps we've
02:53 - got that I wonder why that didn't oh
02:55 - because I didn't call fit before okay so
02:57 - now I'm fitting the model hmm I don't
02:59 - see an error I expected an error let's
03:02 - so what happens when I fit the model
03:04 - well it returns a promise model dot fit
03:07 - returns a promise if you don't know what
03:09 - a promise is guess what I have a whole
03:11 - set of videos about what a promises and
03:14 - I'm also going to be using eventually
03:15 - awaitin async which I also have videos
03:16 - about but right now I can just write the
03:20 - dot then the prompt if it returns a
03:23 - promise which I can then call a function
03:25 - called
03:25 - then to where the results will be passed
03:28 - in and I'm just going to say and I'm
03:32 - gonna use this arrow syntax that's es6
03:34 - arrow syntax console dot log results and
03:38 - eventually I might want to do more with
03:39 - this so I'm actually gonna make it a
03:41 - full function so this is what I'm saying
03:43 - is once you fit the model then log the
03:47 - results let's see what happens
03:53 - waitingwaiting
03:54 - up okay great look at this history loss
03:58 - and there's my loss so it fit that model
04:01 - it did one epoch and gave me a loss
04:07 - great so done train the model here's the
04:10 - thing I want what I want to do
04:13 - ultimately so this is actually in a way
04:15 - done what I want to do is first of all I
04:16 - want to train the model for more than
04:18 - one epoch so one thing that I need to do
04:21 - here is pass in some options so I'm
04:25 - gonna create a variable called options
04:27 - and one thing I can specify is like
04:30 - epochs I'm gonna say do it for 10 and
04:33 - then I'm gonna say and let's actually
04:36 - let's just say 2 right now because it's
04:39 - gonna take a while so the third argument
04:41 - to model dot fit is options and if I go
04:44 - into tension flow yes and I look for a
04:46 - model dot fit oops I was right there
04:48 - already we can see now these are the
04:50 - various options and I'm gonna be using a
04:52 - bunch of these but epochs is one of them
04:53 - the number of times to iterate over the
04:55 - training data so let's rub this now and
05:02 - you don't have to do I'm gonna I don't
05:03 - think we need all of this printing stuff
05:05 - so I'm gonna get rid of some of the
05:07 - earlier printing things because I don't
05:09 - need to look at all of that so much so
05:12 - let's run this whoops
05:14 - options is not defined I spelled that
05:17 - wrong I guess I still have 44 and 45
05:23 - console logging stuff which I don't need
05:25 - I didn't get an error that I expect to
05:28 - get which is kind of interesting and oh
05:33 - you know why one thing that I want to do
05:36 - is I want to update you know at the time
05:39 - of this recording I think the most
05:41 - recent version of tension flow chess is
05:43 - zero point eleven point seven well and I
05:47 - when I was previously recording I was
05:49 - using 0.4 and I think some things have
05:51 - changed so it was alright so let's let
05:53 - this run it's it's running four to
05:55 - epochs right now it's finished and I can
05:58 - look at the history and I can see both
06:00 - lost so we can see the loss went down
06:02 - for the second a pocket that's great now
06:06 - let's run this over ten a pox and let's
06:13 - run this and let's just console log
06:16 - results dot loss by the way or what was
06:18 - it is it results dot history dot loss
06:20 - might be that now let's look at what it
06:23 - is a history history dot loss okay so
06:27 - let's do this
06:28 - whoops I don't need that let's go back
06:31 - here
06:32 - hit refresh and waiting I'm gonna edit
06:34 - out this waiting part okay great so look
06:42 - at this over ten a pox the loss is going
06:44 - down this is good this is what we want
06:46 - to see now here's the thing
06:48 - what's it using to calculate that law
06:50 - huh oh there's so much to discuss I
06:54 - gotta get myself organized my thoughts
06:55 - here I want to here's I think maybe
06:58 - maybe I've done this video I'm really
07:01 - really drugged breaking this into lots
07:03 - of small parts and really what I've done
07:05 - now is call modeled fit with one single
07:08 - option the two things I need to do that
07:11 - are next one is I need to figure out
07:14 - what's getting that law like what data
07:16 - is it using to calculate that loss is it
07:18 - the training data didn't I talk about
07:20 - testing data and validation data maybe
07:22 - thinking about that it's a point so I've
07:23 - got to deal with that number two is I
07:25 - would like to the point of this is I'm
07:29 - in a p5 sketch and I could say function
07:32 - draw background zero and I can run this
07:36 - but look at this it just is loading up
07:38 - there all the while while it's training
07:40 - I've locked I don't have any ability to
07:43 - run an animation I want once it finishes
07:45 - I see the canvas
07:46 - I want the canvas to animate while it's
07:48 - training and I want to see the loss over
07:51 - time I want to have that reported back
07:53 - to me so those are the two things that I
07:55 - need to do I think I can tackle the
07:58 - training the testing and validation Dana
08:01 - thing right now because let's do that in
08:03 - this video and I'm going to add the
08:04 - animation stuff in the next video so
08:06 - first of all okay so I have my data set
08:12 - my data set has I think it was five
08:15 - thousand six hundred and forty three
08:17 - elements data points in it I said at the
08:22 - very beginning of this series where I
08:23 - was preparing the data set that a
08:25 - typical thing to do is divide the data
08:27 - and again this is really small for
08:30 - proper machine learning model robust I
08:33 - probably want to have a much larger data
08:35 - set but this will actually kind of work
08:36 - just fine as we'll see I want to use
08:39 - probably the 80/20 rule saying that
08:42 - eighty percent is actually the training
08:45 - so I want to just only use why does it
08:51 - it's because the keyboard is next to
08:52 - this it's going so I want to I want
08:58 - these X's and Y's to only actually be
09:01 - 80% of that original data so I'm not
09:04 - doing that I'll maybe I'll add that in
09:06 - another point that can be an exercise
09:07 - for you of the view for you as the
09:09 - viewer to take out 20% or maybe because
09:11 - my data centers are small just take out
09:13 - 10% of the data so that's what would be
09:16 - used to test the model after I finished
09:18 - training it but while I'm training it
09:20 - while I'm actually training it figuring
09:23 - out well how many input notes do I want
09:25 - a I want
09:28 - what are these sort of taper parameters
09:30 - what are the parameters of this system
09:32 - that I want to try different things how
09:33 - many pucks do I want to train the model
09:35 - for what what batch size do I want to
09:38 - use all these things are known as hyper
09:40 - parameters the parameters of the during
09:42 - the training process if I want to be
09:44 - playing around with those
09:45 - I need a separate data set to compute a
09:48 - loss that's not part of the training
09:50 - data but also is not part of my testing
09:52 - data that it would use when I'm
09:53 - completely done training that's what the
09:55 - validation data is the validation data
09:58 - is basically a test dataset but it's not
10:01 - your test data set when you're done and
10:03 - you're ready to publish your model
10:04 - it's your test dates that while you're
10:06 - doing all the training intensive like
10:08 - that jazz has a configuration option for
10:11 - models outfit that just says hey use
10:13 - this much as the validation data so
10:16 - let's go back over here let's go back to
10:19 - the documentation and we can see here
10:22 - now I could specify the validation data
10:24 - or I could just specify validation to
10:26 - split which is a float between 0 & 1
10:29 - it's the fraction of the training data
10:31 - to be used as the validation data so if
10:33 - I come back here and I just add an
10:35 - option validation data and I say 0.1 I
10:39 - want to use 10% of my training data as
10:43 - the validation data that's what's going
10:45 - to be used to calculate the loss but
10:47 - it's not part of the Train down now
10:49 - there might be an issue I also want to
10:51 - make sure I have shuffle on shuffle is a
10:55 - parameter that shuffles the training
10:58 - that each epoch because you don't always
11:01 - want to train with the data in the same
11:02 - order as you're tweaking all the weights
11:04 - and stuff as it's doing its training if
11:06 - it's in a different order it's gonna
11:07 - help it out but the validation data I
11:10 - think I looked at this before is before
11:14 - selected before shuffling so it's
11:17 - selected from the last sample so I might
11:19 - have a slight issue or if for some
11:21 - reason the order my data is in there's
11:23 - something weird about the end of it is
11:24 - all one label or something I probably
11:26 - won't like shuffle it myself manually
11:28 - but let's not worry about that right now
11:29 - but that's something definitely to be
11:30 - cautious of well this is so much to
11:33 - think about
11:33 - all right now so now that we've added
11:36 - shuffle and we've added 10% as
11:41 - validation data
11:42 - let me now run this again okay so we
11:48 - finished it trained now with the
11:50 - validation splits and Oh breaking news
11:53 - breaking news getting information from
11:55 - the chat that I wrote validation data
11:57 - here interested to give me an error so
11:59 - if I wanted to give it specific
12:01 - validation data that's what I would use
12:02 - but I want to use validation split thank
12:04 - you for to the chat for correcting me
12:06 - there let's try running this again let's
12:08 - give it just more epochs a little bit
12:10 - more time to wait let's give it 50 all
12:12 - right okay it's back let's take a look
12:20 - at our loss function over 50 epochs and
12:23 - we can see it's going way down to 0.75
12:26 - you can see it's kind of stopped
12:27 - actually we kind of accidentally might
12:30 - have you can see how it kind of goes up
12:31 - now we can see like it's not able to get
12:33 - any better so we might not even need 50
12:36 - epochs but we might want to tune various
12:38 - parameters to see but I'm not gonna
12:39 - worry about all that right now the point
12:41 - is I have now trained the model using
12:44 - model that fit shuffling the data with a
12:47 - certain validation saving 10% for
12:50 - validation I'm not doing proper testing
12:52 - data yet that would come later and 50
12:55 - bucks okay so in the next video what I
12:59 - want to do is make it so that I can run
13:03 - an animation I can graph the loss
13:05 - function over time all that sort of
13:07 - stuff and not have it kind of like
13:09 - blocking right the way it's doing right
13:11 - now the animation thread and then of
13:15 - course I also need to allow the user to
13:17 - specify a color and get a label for that
13:19 - so those are the next two steps I need
13:20 - to do see you in those videos
13:23 - [Music]