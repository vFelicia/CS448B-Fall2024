00:00 - hello welcome to another video tutorial
00:02 - in this video tutorial you will not be
00:04 - listening to me as I've mentioned on
00:05 - many of my previous live streams and
00:07 - other videos I'm hoping to have a
00:09 - playlist of many guests coming in to
00:11 - present on a variety of topics in
00:13 - particular topics that I might not use
00:15 - in my regular programming life and um uh
00:19 - so I'm excited to try this new
00:20 - experiment with essentially we I had a
00:22 - guest before an interview but this is
00:23 - the first guest tutorial uh with TGA
00:25 - brain so this is tga's website uh TGA is
00:28 - an artist and educator she teaches at a
00:31 - variety of places including school for
00:33 - poetic computation which is the school
00:35 - where I am standing right now um sfpc
00:38 - doio that you're interested in if you're
00:40 - interested in um that's the URL and um
00:43 - 's going to show you some stuff about
00:45 - physical devices and sensors a topic of
00:49 - which I have a sort of patholog
00:50 - pathological fear of anything um
00:53 - physical which is why I tend to stick
00:54 - with software so um excited to introduce
00:56 - and have TGA here in the studio with a
00:58 - couple different video tutorial tutal
01:00 - and here she
01:01 - is
01:03 - hello um today we're going to be talking
01:06 - about environmental sensing um and how
01:09 - to connect a couple of different forms
01:12 - of
01:13 - microcontrollers to p5js and we're going
01:16 - to be making datadriven
01:19 - animations so because we live in this
01:22 - time where there's a lot of excitement
01:24 - about the Internet of Things there's a
01:26 - lot of excitement about Wireless
01:28 - Technologies there been a whole lot of
01:31 - different options and different boards
01:33 - that have come out that allow us to
01:36 - connect a microcontoller
01:39 - wirelessly to a server somewhere and
01:42 - then using P5 we can connect to that
01:44 - server and use the data or control that
01:47 - little microcontroller to that little
01:48 - computer in various ways um this is
01:52 - exciting because it means basically if
01:55 - you think about a microc microcontroller
01:57 - as a little computer it means that that
02:00 - we can um build circuits on these
02:03 - microcontrollers that allow us to
02:05 - collect data and place sensors in
02:08 - different weird places um to collect
02:10 - information about the world so imagine
02:14 - if you wanted to create some sort of
02:17 - Animation that is using data from a
02:19 - particular environment or a particular
02:21 - location of your choice um if you can
02:25 - set up a wireless network here in that
02:28 - place you you would be able to set up a
02:31 - sensor Network or collect information
02:34 - from that site put it onto um the cloud
02:37 - you know on online and then create some
02:41 - sort of um p5js uh animation that can um
02:46 - allow you to use that information coming
02:48 - from that particular site so this stuff
02:51 - is really interesting and there's been
02:53 - lots of sort of examples of communities
02:56 - who set up um environmental sensing
02:58 - networks in order to like find out more
03:00 - about what's happening in their in their
03:02 - local environment so we can sense things
03:06 - like pollutant levels we can sense
03:08 - things like noise levels light levels
03:11 - um motion if you're interested in
03:15 - looking at sort of um I don't know
03:17 - animal populations or like sensing
03:20 - something that's happening in a bird box
03:21 - or so on um these sorts of Technologies
03:24 - might allow you to prototype that sort
03:26 - of thing so the two boards that I'm
03:29 - going to look at first in this tutorial
03:31 - and then the one that follows is the
03:33 - particle board which is a little
03:35 - microcontroller that plays really well
03:37 - with Wi-Fi and has a whole lot of um
03:40 - gpio pins general purpose inout pins
03:43 - that if you're familiar with Arduino you
03:45 - will have used um and so we can set up
03:48 - our own sensors and circuits on the
03:50 - particle and then put this data in the
03:52 - cloud so let's just walk over to this
03:58 - whiteboard so basically what we're going
04:01 - to do is we're going to set
04:04 - up a circuit on this is the particle and
04:09 - we set up the particle to talk
04:11 - wirelessly to you know our Wi-Fi router
04:14 - wherever that is in our in our situation
04:16 - in our house or whatever and then that
04:19 - Wi-Fi router is connected to you know
04:22 - the the cloud or the internet out here
04:26 - and then we uh have our little computer
04:30 - with P5 running on it that then is going
04:33 - to be getting information from the the
04:36 - internet right so I'm just going to show
04:40 - you uh particle board with a a light
04:43 - dependent resistor so a light sensor
04:46 - that is attached to it so this light
04:48 - sensor is on a little circuit and
04:50 - basically it's going to give us a value
04:53 - that indicates what the light levels are
04:56 - at the location of the board and so this
04:58 - value is then pinged up to our Wi-Fi
05:00 - router and the nice thing about the
05:03 - particle is it comes with this whole um
05:06 - platform that deals with the management
05:09 - of the data on on the server and on the
05:12 - internet um so it saves us from having
05:14 - to set a lot of that stuff up for
05:17 - ourselves and so the data that we
05:19 - collect on the light sensor goes through
05:22 - our router to the internet and then at
05:24 - the other end we will use that data in a
05:27 - P5 sketch to animate something
05:30 - um okay so the exam as I said the ex the
05:35 - circuit I'm not going to spend too much
05:37 - time talking about setting up the
05:39 - circuit on the actual um particle board
05:43 - because I'm just using the sort of basic
05:47 - example that they have very well
05:50 - documented on their website so if you
05:52 - end up getting one of these and working
05:55 - through their sort of getting started
05:57 - tutorial what I'm working with here is
05:59 - of is um a circuit that has the light
06:02 - sensor on it and a circuit that has an
06:05 - LED on it
06:08 - so I'll just spend a couple of minutes
06:10 - going through the actual particle
06:13 - documentation and website just so you've
06:16 - we can have a look at it um so it's at
06:20 - particle.io
06:22 - and uh the boards look like this there's
06:24 - a few different types of them there's
06:26 - also one that actually can connect um to
06:28 - cellia net cell cellular networks I
06:32 - can't I can't talk today um and so that
06:36 - that if you use um the cellular one it
06:38 - means that you could set up say a sensor
06:41 - somewhere where there isn't even a Wi-Fi
06:43 - network and if you buy a SIM card you
06:45 - could get data that way so if you wanted
06:47 - to do some you know online project where
06:50 - you need information from like a remote
06:53 - site somewhere um this is is an option
06:57 - for how you might manage that um because
06:59 - the data can come over the network that
07:01 - our um mobiles operate on so we're going
07:05 - to be using the photon
07:07 - today um and there's all these sorts of
07:09 - information about getting set up
07:11 - connecting um I'm not going to go
07:14 - through the whole Wi-Fi connection
07:16 - process cuz it's pretty
07:19 - straightforward um so these this um
07:22 - board is already on the Wi-Fi network
07:24 - that I have have we've got here in the
07:27 - studio um the we program the particle
07:32 - board using their web API so they
07:35 - actually have an API online sorry their
07:38 - web IDE so their web integrated
07:40 - development environment so this is a
07:42 - place where we can actually write the
07:44 - code that we want to run on this little
07:46 - microcontroller you know listen to this
07:48 - pin send me this data turn the LED on
07:51 - turn the LED off all that sort of stuff
07:54 - um and this code is uploaded to the
07:58 - particle via the Wi-Fi network um so
08:03 - it's there's quite a nice workflow
08:06 - because they have this web IDE we can
08:09 - use um and down here you see the
08:12 - examples that you know it ships with so
08:15 - you can go through and have a look at
08:17 - the various things it can do by
08:19 - uploading these examples to it so if we
08:22 - just have a look at the you know 101
08:24 - physical Computing example which is
08:26 - always the blink
08:28 - LED if if I bring that up you can see
08:30 - the code there in the
08:32 - editor
08:34 - and up here these icons are sort of the
08:37 - place where we send it to the board so
08:39 - if we're writing code for ourselves we
08:41 - would verify this code so that we're not
08:43 - sending you know terrible syntax errors
08:46 - to our
08:47 - board um and then once we've figured out
08:51 - all our debugging and our our errors we
08:53 - then flash it to the board so if I click
08:56 - flash you can see that the code's now
08:58 - going going over through the Wi-Fi
09:00 - network and hopefully it's arriving down
09:05 - here at the
09:07 - particle and we can see some lights
09:09 - flashing it should the data is coming in
09:11 - and the LED that I've get set up now you
09:13 - can see it's blinking so we know that
09:16 - we've got our Wi-Fi network set up
09:18 - correctly and we've got this blinking
09:21 - LED which is
09:23 - awesome um so that's that's basic setup
09:28 - this example is the standard um example
09:33 - that is explained really well on the
09:34 - particle website so I didn't write this
09:37 - code um and you can see it's commented
09:39 - really well um so I don't want to spend
09:42 - too long on it
09:46 - um but if we have a quick look you'll
09:49 - notice that the syntax is very is
09:51 - basically the same as using aduino so if
09:54 - you've used any kind of like aduino
09:57 - um board and done any sort of projects
10:00 - with Arduino you'll be quite um
10:03 - comfortable with the functions you see
10:06 - here so basically we've got a variable
10:11 - called LED which equals d0 so this is
10:14 - referring to the pin that our LED is on
10:16 - on the particle board we've got one for
10:19 - our photo resistor as well on a z so
10:22 - that's on one of the analog pins on our
10:24 - particle board we've got one some
10:27 - dealing with some power and we we we've
10:29 - also got a variable called analog value
10:31 - that is a variable that we're going to
10:33 - capture the value coming from our light
10:36 - sensor if we jump down to void setup
10:39 - you'll be seeing all these you know nice
10:41 - familiar
10:43 - um
10:45 - functions if uh that you'll recognize
10:48 - from uino so pin mode we're sending all
10:50 - our pins to either output or input
10:52 - output if it's if they're going to be
10:54 - pins for actuators things like lights or
10:58 - Motors input pins if they're listening
11:00 - pins or if they're listening for data
11:02 - from sensors so you can see that our
11:04 - photo resistor is on an input
11:07 - pin
11:09 - um what the the the line that I think we
11:12 - need to talk about is this particle do
11:14 - variable function So within the particle
11:18 - environment there's a class the particle
11:20 - class that has a whole lot of functions
11:22 - in it that allow us to program how our
11:26 - board is talking to their software
11:29 - that's running on a server you know in a
11:31 - desert somewhere um and this particle
11:36 - dot variable so we're using a function
11:38 - called variable that's in that class and
11:41 - you can see that it has three arguments
11:43 - the first argument is Def a string and
11:46 - it's defining our variable name so the
11:50 - variable name that we are setting up on
11:52 - the actual particle cloud or particle
11:55 - server is called analog value here um um
12:00 - there's
12:01 - a I'm zooming out um there is a second
12:06 - argument which is analog value and then
12:07 - we're saying that this is an INT so this
12:10 - uh function is unique to this particular
12:14 - system we're using and it means that we
12:17 - can then call that variable analog value
12:21 - when we set up our
12:22 - P5 um sketch later because it's actually
12:26 - like a spot in memory that we're kind of
12:28 - like reserving on their um system on
12:32 - their
12:33 - environment
12:36 - um so just jumping quickly through this
12:40 - uh you can see in void Loop we are
12:43 - reading values from the photo resistor
12:46 - pin there's a delay so that that we
12:49 - don't do it constantly and then there's
12:51 - also a little bit of code at the bottom
12:52 - where they're also toggling the LED off
12:55 - but basically that's irrelevant to us so
12:58 - so once we're happy with this
13:01 - program and it's sensing and we've set
13:04 - up the reading and writing to the
13:06 - particle board as we want it we then go
13:09 - up here we verify our code it's going to
13:11 - tell us if there are any errors in it
13:13 - you can see code verified great work so
13:15 - we're good to go and then we can Flash
13:18 - this to our board so the code is going
13:22 - up into the internet and is arriving at
13:26 - our
13:26 - board now we're going to look at this
13:29 - part so we're going to look at writing
13:31 - the P5 code that's getting the data
13:34 - that's sitting um on the particle
13:38 - Cloud okay so now is the p5js part and I
13:44 - have this really simple example setup in
13:47 - P5 that it allows us to get data from
13:51 - the internet from our um the variable
13:53 - that we set up to holds our light sensor
13:56 - data back into our P5 SC sketch so we
13:59 - can do something with it so how do we do
14:01 - that let's have a look at this sketch so
14:03 - you can see I have a number of global
14:05 - variables set up we have one that's
14:07 - going to contain our
14:09 - data we have one that's going to
14:11 - specifically contain our um Light
14:13 - reading and then I have a variable
14:15 - called current M which is containing the
14:18 - milliseconds the that the reading takes
14:21 - place so I've got a canvas here of 500
14:24 - 500 as you can see and then this is the
14:27 - important bit this is the interesting
14:29 - bits so we have this URL
14:31 - call so as I mentioned particle uses the
14:35 - rest a rest API and if you don't know
14:38 - what a rest API is go and watch some of
14:41 - Dan's videos on rest apis um but a rest
14:46 - API allows us to call it and get some
14:48 - data from it um and so we use an https
14:51 - call to do this and let's take a look at
14:56 - how we construct this http p ps call so
15:01 - if I jump back to my
15:03 - browser um we can have a better look
15:06 - at what what how to construct this URL
15:10 - so this H you can see https api.
15:14 - particle.io so we're talking to the
15:16 - particle um API and for the different
15:20 - ways you can construct calls that is
15:22 - documented in their API V1 devices and
15:26 - then this number so this number has to
15:29 - reflect the device number that is
15:32 - associated with the board that we are
15:34 - sensing on uh if we jump back and have a
15:36 - quick look you're you I think I
15:39 - mentioned before that this device number
15:41 - is listed on their web IDE and we can
15:45 - copy it and then paste it into this
15:48 - URL um analog question mark so we want
15:52 - to specifically get the variable that we
15:54 - set up called analog value on that
15:56 - server and then we need the access to
15:58 - token so we need that authentification
15:59 - part again which we can see here on
16:04 - their web um URL access token so you
16:07 - will have your unique one you need to
16:09 - copy it and place it in this um in this
16:13 - URL and so if I call that um URL that
16:17 - we've constructed from using all the
16:20 - different um uh values that we have for
16:23 - this board you can see that it's
16:24 - returning to me some Json data and it's
16:27 - returning to me
16:29 - the data in this Json format that is
16:32 - specific to that analog value variable
16:36 - that we set up before again if you're
16:38 - not sure what Json is or you can't
16:42 - really remember how to deal with it
16:44 - Dan's done some videos on that so pause
16:46 - this go check them out and then come
16:48 - back to us um but you can see that the
16:52 - particle API returns us these values in
16:55 - the format with the name value um of
16:58 - name value pairs which is you know
17:01 - fundamental to to the Json um data
17:04 - structure and when we ask for that
17:07 - information you can see we get some
17:09 - information a thing called name which is
17:12 - our sense our variable name the value
17:16 - and it has a bunch of other information
17:17 - in it like the last time that the data
17:20 - was logged is it connected or not some
17:23 - more information about
17:25 - time and the device ID and some
17:28 - information about the product so all
17:30 - that's there coming into our P5 sketch
17:34 - so after we put that
17:37 - um URL together we can then use the load
17:41 - Json function in processing in in P5 and
17:44 - so this load Json function is really
17:48 - handy when we need to talk to rest apis
17:50 - and again there's a number of videos on
17:52 - how to do this so if you need a
17:54 - refresher on apis go and have a look at
17:57 - them but the load Json function is that
18:00 - lovely that lovely thing called a
18:02 - callback function right so helps us deal
18:05 - with the asynchronicity of JavaScript
18:08 - and in this case we want to send that
18:10 - specific URL that we're
18:12 - using out to the internet and we don't
18:15 - want to do anything else until we've got
18:16 - the data back so that we're going to use
18:20 - the the call back function to manage
18:23 - that process so we send the URL load
18:26 - Json sends the URL and waiting waiting
18:29 - waiting eventually the data comes back
18:32 - and the data then gets passed into this
18:34 - variable we've got got set up called
18:36 - Data so it's going to have all that Json
18:37 - stuff that we just looked at in it and
18:40 - only once that data's come back will it
18:42 - then run this second part this second
18:44 - argument which is a function that we can
18:47 - see set up at the bottom of the code
18:48 - here called past data and so this second
18:52 - function then gets the Json data we just
18:57 - specifically get the reading the do
18:59 - result part of the Json data route and
19:01 - we put it in a variable called reading
19:03 - jumping back over here you can see that
19:06 - the there's this line three there's this
19:11 - value called 429 and it's its name is
19:14 - result which is why we are going data do
19:19 - result right so we get that number and
19:22 - then it's going to just print out in the
19:24 - console so if I run that you can see
19:26 - that ooh it's a little little bit um
19:30 - little bit hard to read there so you can
19:31 - see we're getting this thing called
19:32 - reading and it's 418 so if I um shade
19:37 - put shade over my sensor eventually we
19:40 - will see that number oh then I have to
19:42 - reload my S my um sketch you can see
19:46 - that it's come out to be a different
19:48 - number because I'm you know playing
19:50 - around putting my hand over it getting
19:52 - lower if I completely cover it up we
19:55 - should see that reading go way down so
19:58 - there it is at 41 right so I'm doing
20:01 - just a little bit of like um checking
20:03 - that everything's working as I think it
20:05 - should but we've successfully set that
20:08 - up so from that Json we're pulling out
20:11 - the the reading result and then just
20:14 - printing it out in the console so what
20:17 - can we do with that now
20:19 - um you can see there as I was playing
20:22 - around like it almost updates in in real
20:26 - time there's sort of like a a a little
20:28 - bit of a latency but it's not too bad
20:31 - I'm a little bit cautious of doing this
20:34 - whole API call in draw because we know
20:38 - that draw runs you know about 50 60 um
20:40 - Loops per second and most apis have rate
20:45 - limits on them and so if you violate the
20:49 - rate limit you know sometimes you can
20:51 - get blocked or whatever so I'm going to
20:53 - set it up here so that we are querying
20:55 - the API like maybe once every second or
20:57 - two just in case um so basically our
21:03 - sketch at the moment is just calling the
21:05 - API once and then printing that reading
21:07 - out to our console so we want to call it
21:10 - multiple times now so what I'm going to
21:13 - do is I'm going to write a new function
21:16 - called call Api and basically it's going
21:19 - to have all of this stuff that's in
21:23 - setup in it um it's going to take our
21:27 - URL it's going to use the load Json
21:30 - function to get the data back it's then
21:34 - once it has that back it's going to use
21:37 - the function pass data uh and it's
21:39 - taking note of the time so it's putting
21:41 - the current milliseconds so the amount
21:43 - of time that's passed since the start of
21:44 - the sketch into um this variable we've
21:48 - got called current M to understand what
21:51 - moment this happened in and so
21:54 - now if I want
21:56 - to um
21:59 - um see that data respond um we need to
22:03 - set up an if statement so that we can
22:05 - call it every second or or so so if we
22:08 - go if and I'm going to use the mlie
22:11 - function which is the millisec since the
22:14 - start of the sketch so if mlie minus um
22:19 - current M which is the milliseconds that
22:23 - the the moment the value for Millies
22:25 - when we took the data reading so so if
22:28 - Millie minus current
22:31 - m
22:33 - is uh greater than 2,000 so that'll do
22:38 - it every 2 seconds because there's a
22:40 - th000 milliseconds in a second then uh I
22:43 - want to call my
22:45 - API so then I want to call that that
22:48 - lovely um function that I just wrote
22:51 - that will get our data in so let's let's
22:54 - see if that works for us um
23:00 - so I've got the
23:02 - reading if I cover up my you can see
23:05 - that right so now I am printing it out
23:07 - to the console
23:10 - in every second or so as as my data is
23:13 - changing so that appears to be working
23:16 - so let's now then do something with that
23:18 - data I'm putting the data in the in the
23:22 - um variable called reading so if we want
23:25 - to just print it out to the screen we go
23:28 - reading and we'll just place it up there
23:31 - at
23:31 - 2020 and then how about we also write an
23:35 - ellipse so uh that changes size maybe
23:39 - with the um value that's coming in off
23:42 - the sensor so width height is reading
23:45 - reading and we'll just place it in the
23:47 - center of the screen width on two height
23:51 - on
23:52 - two
23:54 - um and then perhaps I want to
23:58 - just refresh my background every time I
24:02 - get some new data so that it doesn't
24:05 - look too crazy so I'm just going to put
24:08 - a background call at the top of my past
24:11 - data function which is the function that
24:12 - only gets called when the data comes
24:16 - in um and I put it made it made it red
24:20 - there so what's going on I drew my
24:23 - ellipse at 0 because there wasn't any
24:24 - data there
24:25 - yet um
24:30 - and we can see so I've got I've put my
24:33 - background in the wrong place again so
24:36 - let's just pick it up and I think if we
24:40 - put it at the top of call Api it should
24:44 - look a little bit better there that
24:46 - looks a bit better doesn't it oh and
24:48 - I've done this I've got my ellipse
24:50 - functional mixed up we actually want it
24:54 - to be XY width height so it's actually
24:57 - going to be width on two hide on two
24:58 - reading reading so that will fix my
25:03 - ellipse location that's looking better
25:05 - all right so
25:07 - now you can see that my lips is changing
25:10 - size just slightly with my different
25:13 - readings coming in um if I put the
25:16 - sensor in darkness so I'm covering it up
25:18 - you can see that my lips gets really
25:20 - nice and small and then bigger again so
25:23 - it's it's responding quite nicely if I
25:26 - wanted to be a bit more responsive you
25:28 - know instead of every 2 seconds I might
25:31 - say every 500 milliseconds or every half
25:34 - a
25:35 - second so there you can see it responds
25:38 - much much quicker and so I mean the
25:41 - great thing about this sort of setup is
25:44 - even though you know I have this
25:46 - particle Tethered to my computer the
25:48 - only reason I have it tethered like
25:50 - this um is for power so we could get a
25:55 - battery pack pop it on the particle and
25:59 - throw the particle up into a tree nearby
26:02 - and as long as it can hear the Wi-Fi it
26:04 - will then broadcast these light sensored
26:08 - values to us which we can then play
26:10 - around with in a sketch such as this one
26:13 - so it really um kind of expands the
26:16 - questions you can ask and the sort of
26:19 - information that you can collect about
26:20 - the world and then use in in your
26:22 - projects to create you know things that
26:24 - are interactive and responsive to um
26:28 - a a particular environment so I think
26:30 - there's lots of potential for this um in
26:32 - the world of data visualization and also
26:36 - I you know sometimes I make public art
26:38 - so thinking about um making
26:41 - interventions that respond to their
26:42 - location or respond to a site of
26:45 - interest um these sort of technologies
26:47 - will allow you to do that all right
26:49 - thank
26:56 - you