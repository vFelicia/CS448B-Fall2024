00:00 - hello welcome to a second video on
00:02 - promises now what I think if you watched
00:06 - the previous video I talked about the
00:09 - idea of a promise how to use a promise
00:12 - with this function called fetch which
00:14 - retrieves data from URL and variety of
00:18 - other things and I looked at how you how
00:21 - you when the promise finishes how you
00:24 - use then to execute code and how you use
00:26 - catch if there's an error and you can
00:29 - chain promises if there's a bunch of
00:30 - things happening in sequence that's what
00:32 - I tried to look at so far in the
00:34 - previous video now I'm actually gonna
00:35 - take a step back here and in a way do
00:37 - something much simpler and probably less
00:40 - important but maybe we'll give some good
00:42 - background foundational knowledge so I'm
00:44 - going to talk about how to make your own
00:47 - promise and just in case maybe you're
00:50 - here for like how to keep your own how
00:52 - to keep your product keep your own
00:53 - profits and if you're here for like a
00:56 - self-help video unfortunately somewhat
00:58 - this is but maybe you want to learn
00:59 - about coding you might want to go to the
01:01 - beginner ones know it but maybe this
01:04 - could be the first video watch it anyway
01:05 - how to make your own promise so let's
01:08 - come with me over here and so this is
01:12 - more relevant probably if you are the
01:14 - developer of the JavaScript library and
01:16 - you want to support promises in your
01:17 - library most of the stuff that I'm going
01:19 - to do will involve making use of other
01:23 - libraries that give me promises I take
01:26 - those promises and hope that they're
01:28 - kept and also I'm actually eventually
01:31 - gonna get to this like new I think these
01:34 - are a part of yes I think it's a 2793
01:39 - and 402 it's not even a number that's
01:45 - anyway I think it's actually just es 7 I
01:47 - was trying to make a joke there um but
01:49 - I'm actually gonna use a sink and a
01:50 - weight await the keywords to write an
01:53 - asynchronous function that returns a
01:54 - promise but I'm stepping through this
01:57 - stuff one step at a time so come back
01:58 - over here with me and so I've got a
02:00 - little p5 sketch there's nothing about
02:02 - this that you need p5 for
02:04 - but it's my comfort object you know when
02:07 - you're small and you have your little
02:08 - lovey that you sleep squares p5 was like
02:10 - a little lovey that I code with
02:12 - and so what does this do this in setup I
02:16 - don't make a canvas I call set timeout
02:18 - if you don't know what set timeout is
02:19 - I've whole video about that um which
02:21 - executes a callback the say hello
02:24 - function 1000 milliseconds later and
02:26 - that makes a paragraph hello so let me
02:28 - go to the browser and you can see one
02:30 - second later boom hello and if I made
02:32 - this 5000 or 6000 you know six seconds
02:37 - later that hello is going to pop up so
02:39 - this is the old the old way of doing it
02:44 - in JavaScript we have a function that's
02:46 - asynchronous that we pass a callback so
02:49 - what if I wanted to create a version of
02:51 - set timeout that return to promise
02:54 - instead so I'm gonna write my own and
02:56 - again this is really I don't know that
02:58 - this is something you need to do in a
03:00 - program but this is gonna give us some
03:01 - background so I'm gonna write a function
03:04 - and I'm gonna this by the way it's not
03:05 - my original idea sure you can find lots
03:07 - of tutorials that show this exact same
03:09 - scenario I probably read a few of them
03:11 - so I'm gonna write a function called
03:13 - delay I could also call it like set
03:15 - timeout promise just to be explicit
03:18 - about what I'm doing but I'm just gonna
03:19 - give it a different name called delay
03:21 - and what I want to do is I want that
03:23 - function to take an amount of time so
03:27 - that function is going to so really what
03:29 - I'm doing here is like just this to
03:32 - start set timeout so at first I've just
03:37 - like basically I mean this is completely
03:38 - insane what I've done I've written my
03:40 - own function called delay to just call
03:42 - set timeout and if I give that you know
03:44 - 1000 there we go
03:48 - but what I want to do is I want to do
03:50 - this I want to say delay 1000 dot then
03:53 - and I'm gonna use the arrow syntax here
03:57 - create P hello
04:00 - so again if the arrow syntax in is not
04:04 - familiar to you a new part of es6
04:06 - javascript i have a video on that and
04:09 - then I'm gonna say catch console dot log
04:15 - error so I won't and I'm missing some
04:20 - stuff here this doesn't need semicolon
04:22 - there we go so this is what I want to do
04:25 - I want to write
04:26 - I want to write my code like this I want
04:28 - the delay function to delay for one
04:31 - second return a promise when it's done
04:33 - create that paragraph and if there was
04:36 - an error somehow console.log the error
04:38 - and yesterday someone was saying to me I
04:40 - should say console dot error or I could
04:42 - put the error in the in the Dom as well
04:46 - so okay so this is what I want to do now
04:48 - this won't work right now because it's
04:50 - gonna say cannot read property then of
04:52 - undefined because there's nothing
04:54 - there's no promise that's been returned
04:56 - so what I need is my delay function has
05:00 - to return a promise all right so I
05:03 - forgot I need to return a new promise so
05:06 - this is sort of I'm kind of getting
05:08 - closer let's just see what happens now
05:11 - well promise resolver is undefined so if
05:15 - I want to make my own promise how to
05:19 - make your own promise in addition to
05:21 - just promising something I have to
05:23 - provide pathways for resolution of that
05:26 - promise or rejection of that promise so
05:30 - when I create the new promise I have to
05:32 - say what happens when it's resolved what
05:33 - happens when it's rejected well let me
05:35 - okay so what goes in here we need a
05:39 - function called deal with it till with
05:42 - promise resolve reject then I want to
05:53 - pass that deal with promise function
05:56 - into the into the new promise so the
05:59 - deal with promise function is a function
06:00 - that I'm defining to handle resolution
06:04 - and rejection of the promise and that
06:06 - function is put is returned with this
06:10 - new promise but again even though I like
06:13 - to write no one's really gonna write it
06:14 - this way you're mostly gonna see it as
06:17 - an anonymous function written right in
06:19 - here and then you know if we're sticking
06:21 - with this es6 arrow notation we would
06:24 - see it look like this so now this is
06:28 - most likely what you're gonna see I want
06:30 - this delay function to return a new
06:32 - promise and I need to provide pathways
06:34 - for how I resolve and reject those
06:36 - promises so here's what I could do what
06:39 - I want
06:40 - sorry is I want to call set timeout what
06:45 - I want to call set timeout
06:46 - with that amount of time so I'm gonna
06:48 - use the callback but what is the
06:50 - callback the callback is actually just
06:52 - resolved so and I don't need this say
06:56 - hello function anymore because I'm gonna
06:59 - handle what I want to do I don't have a
07:01 - callback anymore I mean I handle what I
07:03 - want to do with the then so here what I
07:06 - want to do is say after this amount of
07:10 - time resolve the promise okay
07:13 - so let's just see if this works yeah it
07:16 - worked now here's the thing I might want
07:18 - to do more stuff in here and so this
07:21 - could actually be I could actually also
07:23 - write this like this as a function that
07:26 - executes to resolve and then other
07:28 - things could happen in here but I think
07:30 - that's besides the point I just want to
07:33 - call resolve because all I'm doing is
07:35 - waiting for a certain amount of time but
07:38 - here's the thing what if I were to say
07:41 - also in addition to delay 1000 delay
07:46 - you know promise sing like this doesn't
07:51 - make any sense right you can't pass a
07:53 - string to the delay function it doesn't
07:55 - know how much time it's supposed to wait
07:57 - so if I run this now it's sort of just
08:00 - worked weirdly but I want to make that
08:03 - an error
08:04 - I want to reject the promise if I don't
08:06 - get a number so one thing I can do here
08:09 - is I can say if and there's a function
08:11 - actually in JavaScript I believe it's is
08:13 - n a n so is n a n stands for is not a
08:17 - number so if time is not a number I now
08:21 - want to reject that promise otherwise I
08:25 - want to resolve the promise after a
08:27 - certain amount of time so this is me
08:29 - taking the non promise function set
08:33 - timeout which has a callback and
08:34 - wrapping it in a new function that
08:37 - handles it with a promise but better
08:40 - than just car so this this should work
08:41 - now in other words we should see we see
08:44 - this like undefined sketch ojs line nine
08:48 - because but I should really give it an
08:51 - error so I should be able to say
08:53 - I believe reject new and pass an error
08:56 - new error you delay requires a valid
09:02 - number or something so if I do this
09:05 - and now let me just take this out here
09:08 - right so this now is the full promise of
09:12 - a five promise of a fight that's not a
09:14 - word
09:16 - delay function it returns a new promise
09:19 - which is a function that handles
09:22 - resolution and rejection and it's if
09:25 - it's if it's passed not a number it
09:27 - calls reject otherwise it just calls
09:29 - resolve after a certain amount of time
09:30 - so let's run this this is my this is me
09:34 - calling it now delay 1000 there we go
09:38 - hello and now if I say delay blah blah
09:43 - we should see error and you can see my
09:47 - error here delay requires a valid number
09:49 - so again this is more likely something
09:52 - you would be doing as the author of a
09:54 - JavaScript library and your library has
09:56 - asynchronous code that supports promises
09:59 - again though and I think I'm gonna do
10:01 - this in the next video I am going to
10:04 - actually completely rewrite that using
10:06 - and I got it wrong apologies to everyone
10:08 - so just to be clear this is es is so
10:13 - confusing so let me think about this yes
10:18 - five I don't know this stuff I'm gonna
10:21 - write this out that I'm gonna go check
10:23 - the chat and I'll come back and correct
10:24 - it so let me go backwards this async an
10:28 - 808 is from es 8 which is JavaScript es
10:33 - ECM CA or something MCA specification
10:38 - 2017 this is es 8 es 6 which promises
10:45 - are a native of JavaScript as the es6 is
10:47 - es 2015 I think and then es 5 I don't
10:54 - know when yet that's the kind of old
10:55 - JavaScript that with var so things that
10:58 - are in es6 are let const arrow and es 5
11:03 - is you know VAR callbacks
11:06 - promises so jobs could visit the thing
11:08 - javascript is like and always changing
11:10 - an evolving language and as you know
11:13 - watching this video in the year of 3122
11:19 - none of this is relevant anymore but
11:21 - thanks for watching anyway about because
11:23 - you were here for a little self hip help
11:24 - video about how to keep your promises
11:25 - alright what was I talking saying I'm
11:27 - gonna come back I'm in the next video I
11:30 - probably got this wrong so in the next
11:32 - video
11:33 - check this video's description for a
11:34 - link to the next one I will come and
11:36 - correct anything here and talk about
11:37 - async and a weight thanks for watching
11:43 - [Music]