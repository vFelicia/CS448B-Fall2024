00:00 - [BELL RINGS]
00:00 - Welcome back.
00:02 - I'm going to finish this
ml5 KNN classification
00:05 - example for like a
gesture-based controller.
00:08 - So I just-- in between the
last video and this one,
00:11 - I just sort of trained
a quick KNN model
00:13 - where if my head is up
here, it registers as up.
00:16 - If my head is down here,
it registers as down.
00:19 - Over here would be to
the left, and over here
00:21 - would be to the right.
00:23 - Now, you know,
interestingly enough,
00:25 - because I have a
green screen here
00:27 - and I'm a sort of
quite a different color
00:29 - than the green screen,
I could probably
00:30 - just do this with
some image processing
00:33 - and like pixel manipulation
to sort of like check
00:35 - where my head is, so with
a lot of if statements.
00:37 - That's the sort of
interesting thing about like,
00:39 - you can almost think
of you doing machine
00:41 - learning as it's
like this automatic
00:42 - if statement, I think, is
one way of thinking about it.
00:45 - But I also should note that
I'm actually almost somewhat
00:48 - surprised that this is working,
because you have to remember,
00:52 - the image classification model
MobileNet that this is built on
00:56 - is trained off of
like a lot of things
00:58 - like dogs and cats and objects.
01:01 - It really has never seen people.
01:03 - There's no images
in its database
01:04 - with like a green screen.
01:06 - So I would have
actually expected
01:07 - it to actually think that all
of these images wherever I am
01:11 - are kind of similar
according to the way
01:13 - it thinks about the world.
01:14 - Whereas if I were
to like do this,
01:18 - like that's going to be
like remarkably different.
01:21 - So there might be
some ways that you
01:23 - could use the sort of way, your
understanding of how MobileNet
01:31 - was trained and
what kind of images
01:33 - were in there to have
other images that
01:36 - are the most distinguishable
for it to like learn about.
01:39 - But this is something
you probably have to do,
01:41 - you could do through
research and you could
01:42 - do through trial and error.
01:43 - Interestingly enough, even if
I move the computer around,
01:46 - is it still going to work?
01:47 - Up, down, left, right, so I'm
really at a huge advantage here
01:53 - having the green screen.
01:54 - But if you're using this
to build some kind of kiosk
01:56 - installation and you have--
01:58 - it doesn't have to be green,
but like a fixed background,
02:00 - that's going to allow
users to play with it
02:02 - and have it work pretty well.
02:04 - All right, but the next thing
that I need to do, right?
02:06 - So what I want to do is
two things in this video.
02:08 - Number one, I want to
be able to save it.
02:10 - So I should add that I spent
all this time training it.
02:12 - As soon as I refresh the
page, I'm just going to do it,
02:15 - it's gone.
02:15 - All of that training
data is gone.
02:17 - So I want to be able
to add saving, so
02:18 - let's add that first.
02:20 - And I'm just going to do that.
02:21 - I'm also just going to keep
doing everything in keypress.
02:24 - if key equals S, I'm going
to say knn.save, model.json.
02:30 - So I think this is what it
is, but basically, everything
02:35 - that it's learned, all of
those logics and labels
02:38 - are all sitting in memory,
and I can spit them
02:41 - all out into a json file.
02:42 - So let's just do
that really quickly
02:44 - without a lot of training.
02:45 - So I'm just going
to like arbitrarily
02:47 - train a bunch of
things up and down.
02:49 - I'm going to click Save.
02:51 - And I'm going to go to
the Downloads directory.
02:54 - You can see I now have
a model.json file.
02:56 - I'm going to drag it
into my code folder,
02:58 - and then I'm going to go
over to Visual Studio Code
03:00 - and take a look at it.
03:01 - There it is.
03:02 - Look.
03:03 - This is actually
the saved knn model.
03:06 - All of this stuff.
03:06 - You can see there's lots of
configuration information
03:09 - up here.
03:10 - This is all the domain of
TensorFlow.js, configuration
03:13 - stuff that's super interesting.
03:14 - You could go and we could
do a deeper dive into that,
03:16 - but we don't have
to worry about that.
03:18 - We can see that all of the
numbers of all the logics
03:20 - are all in here.
03:21 - It's just a big file with all
the stuff, all of the logics
03:24 - and all the labels and the
configuration information
03:27 - that tensorflow.js
and ml5 needs.
03:29 - Now, I should, you
might be thinking, wow,
03:33 - it's like a lot
of stuff in there.
03:34 - You know, how big
of a file is that?
03:36 - And actually, it's just text,
and it's just 561 kilobytes.
03:40 - So even if I had like hundreds
and hundreds and hundreds,
03:42 - or thousands of training
images, it's going to be fine.
03:45 - You have to remember, it's
taking an image file, which
03:48 - we work with all the
time, and boiling it
03:50 - down to just 1,000 numbers.
03:52 - So even though it is
stored ultimately as text,
03:54 - it's much less data.
03:55 - And there are ways of optimizing
the storage and all sorts stuff
03:58 - like that.
03:59 - But ultimately, this is a
perfectly reasonable thing
04:01 - to do.
04:01 - So now, let's actually do a
better job at training it.
04:06 - Let's actually get a
better model to train.
04:08 - [BELL RINGS]
04:09 - You might not realize
this, but it's
04:11 - about four or five
hours in real time
04:14 - that has passed
since the moment ago
04:16 - when I was about to do the
next thing in this tutorial.
04:19 - I ran into a pretty
significant bug
04:21 - which ml5 didn't allow
for saving a json
04:26 - file of a certain size with
a certain amount of training
04:28 - images.
04:28 - And you can see right
now, I just tested it.
04:30 - With 76 training
images, it just worked.
04:33 - So I'm going to continue
this tutorial as if I'm
04:36 - picking up right
where I left off,
04:37 - but you should be aware
that you're actually going
04:39 - to need a newer version of ml5.
04:42 - The version number
will appear right here
04:44 - and be in the
video's description
04:47 - in order to get the example
to work with more than maybe
04:50 - 40 training images.
04:51 - So just be aware of
that particular bug.
04:53 - Now, where was what I?
04:54 - What I was about to do was
try to train a better model
04:58 - with left, right, up, and down.
04:59 - And I am going to do that now.
05:01 - OK, here we go.
05:02 - I'm going to move--
05:03 - now the thing is,
I just have to--
05:05 - I actually want us
to realize this.
05:06 - Even though this
is my left, that's
05:09 - to the right on the screen.
05:11 - So I need to call
this to the right.
05:16 - Wait, oh, it's so confusing.
05:17 - No, oh, no, no.
05:18 - I'll figure this out later.
05:20 - I'm going to actually go to my
left, which is to the right.
05:25 - It's fine.
05:26 - It's going to be OK.
05:30 - Here we go.
05:31 - Oh, no, let's speed this
part up, because I'm
05:32 - going to train it for a while.
05:33 - You don't need to
watch all of it.
05:39 - OK, so I trained it
for a little while.
05:41 - Let's see how well it
performs, and if it's not
05:43 - performing so well, I
could add some more images.
05:45 - So this is to the right.
05:47 - Pretty good.
05:48 - This is to the
left, pretty good.
05:51 - Where-- if I move
off, Like I probably
05:54 - should give it just like,
I should probably like,
05:56 - let's tell it this is left also,
even with just a sliver of me
05:59 - there.
05:59 - And then if I move
down, down, down, down,
06:03 - so even with just a sliver of
me, let's tell it it's down.
06:08 - OK, now up.
06:12 - Up, up, down, left.
06:16 - That's left, and right.
06:18 - OK, this is a good model.
06:20 - Let's now save the model.
06:22 - So I'm going to press S,
and the model is saving.
06:26 - I am going to go to
the Downloads folder.
06:28 - I'm going to take a look at it.
06:29 - Now look at this.
06:30 - This is actually
a 5.5 megabytes.
06:33 - And by the way,
using the word model
06:35 - is perhaps a little
bit misleading.
06:36 - I probably should
have just called
06:38 - it knn.json because a knn model
is just the raw, all the data.
06:45 - It's all of the logics
with their label.
06:47 - There's no neural network
involved here at all.
06:50 - There was a network
involved in generating
06:52 - the features of the
image, but now we're
06:54 - just storing a lot of them
so that we can do a nearest
06:56 - neighbor calculation.
06:58 - All right.
06:59 - So this needs to go
into the knn directory.
07:02 - And hopefully we can
see that it is here.
07:05 - There it is.
07:06 - It's a really big file.
07:07 - I could click on it.
07:08 - It kind of loads
in Visual Studio
07:10 - code, but I don't really
need to look at it.
07:11 - OK, so now, the next thing
that I need to do, right?
07:15 - If I refresh this page, it
wants me to train again.
07:19 - So the next thing that I
need to do is load the model.
07:23 - So I'm actually
going to move this.
07:25 - I want to make sure before
I load my knn model, the knn
07:29 - database, data set, what I want
to do is make sure MobileNet
07:34 - has finished loading.
07:36 - So I actually got to take
this out and put this
07:38 - in the model ready function.
07:42 - And then I am going to
say knn load model.json.
07:50 - And I don't need to ever--
07:53 - I don't need to train it again.
07:55 - I mean, I can train.
07:56 - I don't need to call go classify
and draw the way I did before.
08:01 - That's no longer relevant.
08:02 - I can just call, oh,
this needs a callback.
08:06 - So confusing.
08:07 - When the model is loaded,
then I can say go classify.
08:12 - So I'm just putting an anonymous
function callback in here.
08:15 - So when the first thing
is load MobileNet.
08:18 - MobileNet's ready.
08:19 - Load my knn data set.
08:21 - My knn data set is ready.
08:22 - Start classifying images.
08:24 - So let's go back and refresh.
08:27 - Load MobileNet.
08:29 - Oh, I should put in, let's see.
08:32 - I'm gonna say console.log.
08:35 - I'm gonna say MobileNet, let's
clean this up and load it.
08:39 - Then I'm gonna say
knn Data Loaded.
08:43 - And so now I'm going to refresh.
08:46 - Model loaded, knn
loaded, and then
08:48 - if I go right, left,
down, up, we've done it.
08:54 - We now have four
classes being triggered
08:57 - by where I put my head.
08:58 - And let's move on to the
next part, the exciting part,
09:01 - the sort of the part
where you should really
09:02 - stop watching this
video and come up
09:04 - with your own creative idea.
09:05 - But just for simplicity, I
am going to put an x and a y,
09:12 - just to give you a demo.
09:13 - I'm going to make an x and a y.
09:15 - I'm going to start
those x and ys at width
09:18 - equals 2, height, width divided
by 2 and height divided by 2.
09:22 - I am going to then, in draw,
I'm going to get rid of this.
09:28 - Oh, and by the way,
ignore this down here.
09:30 - I put in some extra
code here to get
09:32 - this to work right
now because it's not
09:33 - working in the ml5
library, but don't worry.
09:36 - It's-- by the time you
watch this hopefully,
09:38 - there'll be a version
in the ml5 library,
09:39 - and the example that I publish
will be the version that
09:42 - doesn't have that
extra code in there.
09:43 - But I added the corrected
bug fix from ALK,
09:45 - I put it directly in my code.
09:47 - Oh, boy.
09:47 - This is going to live on forever
in this tutorial, but whatever.
09:50 - It's good.
09:50 - Good to see how the process
works, and that's this.
09:53 - Your code is going to look
like this, not like this.
09:57 - But this is my little hack
extra Save function just
10:00 - to get it to work.
10:00 - OK, moving on.
10:02 - In draw, I'm going
to say background 0,
10:05 - and I want to draw an ellipse at
width divided by 2, height, no.
10:09 - I don't want to draw an
ellipse at the x and y.
10:11 - x and y with a size of 36.
10:15 - I'm making that up.
10:16 - I'm going to make it white.
10:17 - It always comes up here.
10:18 - I'm trying to like
shove it down there,
10:20 - but my auto format brings it up.
10:22 - OK.
10:23 - Then, I don't need to
draw the video anymore,
10:26 - however I would like
to see the video.
10:28 - So I'm going to get
rid of video hide,
10:31 - and let's just see
what happens here.
10:33 - All right, so we've
got the ellipse,
10:35 - and now I want to be able
to move it to the left.
10:38 - Now left is really to the right
in terms of it following me.
10:45 - But I want it to move
the opposite way of how,
10:47 - I want it to mirror myself.
10:48 - I got it.
10:49 - Let's start with up and down.
10:51 - That's easy.
10:53 - OK, so the thing
that I need to do
10:54 - is, I need a global variable.
10:56 - Why is this yelling at me?
10:57 - No, no, don't save.
10:58 - I need a global variable to
keep track of what the label is,
11:01 - and I'll start that as
just an empty string.
11:04 - When I classify, when
I get a classification,
11:09 - I want to set that variable.
11:12 - I do want it displayed
in the window
11:13 - so I can see it, but then, in
draw, whatever that label is--
11:19 - oh, I wonder if I should move
it, let's just do it in draw.
11:23 - There's a variety of different
ways I could do this,
11:25 - but I could just say
if the label equals up,
11:29 - then y minus minus.
11:31 - Otherwise, if the label
is down, then y plus plus.
11:36 - So I'm going to move
x and y up and down.
11:37 - Here we go.
11:41 - Up, down.
11:45 - Up, down.
11:47 - Works very nicely.
11:48 - I would probably want to do like
more of a physics simulation
11:50 - or something where I'm pushing
it, but you get the idea.
11:53 - Now let's add left and right.
11:54 - This is the confusing part.
11:55 - If label equals left--
11:58 - remember, left is my left,
meaning I'm moving this way,
12:04 - but it's actually moving--
12:07 - I'm moving this way, it's
actually going to the right.
12:10 - But I want it to go to the left.
12:11 - I'm going to see myself
going the wrong way.
12:13 - Oh, this is very confusing.
12:14 - No, but interaction-wise,
I want it to go this way,
12:19 - so I'm going to
say x minus minus.
12:21 - I should mirror the image.
12:23 - Maybe what I'll do, just
for the time being is
12:25 - x equals constrain
between x, like just
12:29 - don't let it go off the screen.
12:31 - And y equals constrain, just to
like leave this in the example.
12:35 - And then how do I
mirror the image?
12:38 - I know how to draw
it in reverse.
12:40 - Can I just do it
in the dom element?
12:42 - Like CSS magic?
12:43 - [BELL RINGS]
12:44 - Thank you once again to
ALCA Design who reminded me
12:47 - that there's a CSS
property transform, which
12:50 - I can give it basically
what looks like the p5 scale
12:53 - function.
12:53 - I want to reverse the
x-axis, keep the y-axis,
12:56 - flip it negative 1.
12:57 - This is some p5 code
to apply some CSS,
12:59 - but certainly, I could just
put it in HTML, et cetera.
13:02 - But now, when I go
back and refresh,
13:05 - as I move to the
right, now of course
13:08 - it's opposite now, down
what you're seeing.
13:10 - Like I could go and
like high five myself.
13:13 - But what I'm seeing
is exactly right.
13:16 - Like if I take
myself off, whoops,
13:18 - now I'm not in the picture, OK?
13:21 - So watch this.
13:21 - I'm going to move to the right.
13:24 - Come on.
13:25 - I'm going to try to
keep it in the center.
13:27 - That's going to be my game here.
13:28 - I'm not, up a little bit.
13:30 - OK.
13:30 - Down a little bit.
13:31 - I need to do a
classification, another label,
13:35 - for like don't move.
13:37 - Right?
13:38 - So I could add one more label.
13:40 - I'm not going to save
and train, but let's just
13:42 - see if this works.
13:43 - I really should go, oh, wait.
13:44 - You can't see me anymore.
13:45 - Here I am.
13:46 - I should add, where
is my key press?
13:50 - Let's add else if key equals
space knn add example logics.
14:07 - We'll call it stay.
14:10 - So stay, I don't
actually even have
14:11 - to do another if statement,
because it has to--
14:14 - the stay is like
not doing anything.
14:16 - So I can run this, and I'm going
to give it some training data.
14:22 - Stay, stay, stay, stay, stay.
14:24 - So I'm giving a training,
and so now it knows to stay.
14:27 - So I should move to
the right, and I'm
14:29 - going to turn myself out right.
14:32 - To the left.
14:33 - And by the way, it's
getting it wrong,
14:35 - so I can like just
give it some more data.
14:40 - Like that should be left, right?
14:43 - Stay-- come on, stay, stay.
14:46 - Oh, I hit save by accident.
14:47 - Stay.
14:48 - Up, up, down.
14:54 - I can do this all day.
14:55 - All right.
14:58 - This is my result. So now what
we have done, just to review.
15:05 - We have looked at loading
the MobileNet model.
15:08 - I guess I should bring
myself back here as well.
15:10 - We have looked at loading
the MobileNet model, which
15:13 - is an image classification
model trained on the ImageNet
15:16 - database.
15:17 - We are not using
the classifications
15:20 - from that model.
15:21 - Rather, we are taking
the logics that
15:24 - layer before the last
layer, before the softmax,
15:26 - before the
probability is a sign.
15:28 - We are taking that.
15:29 - We are saving a
lot of those logic,
15:33 - each paired with a label, and
building up a big database.
15:36 - And then when we
get new images, we
15:38 - think all of those
images with their labels
15:41 - are in 1,000 dimensional space.
15:43 - We get a new image.
15:44 - It's somewhere in 1,000
dimensional space.
15:47 - What collection of
neighbors is it closest to?
15:50 - And which label is that?
15:51 - That's its label.
15:52 - We get that result, and we do
something with it in with p5.
15:56 - So thank you for watching
this tutorial sequence
15:58 - about ml5, TensorFlow.jss,
and KNN classification.
16:02 - Please, if you make some
kind of interesting thing
16:05 - with this, please
share it with me.
16:07 - Look in this video
subscription for a way
16:09 - to do that, but certainly
@Shiffman on Twitter
16:11 - is a quick way to do that.
16:12 - Also, share it with @ml5js
also, so that ml5 can see it.
16:17 - OK, goodbye, thanks
for watching.
16:19 - [BELL RINGS]
16:19 - [MUSIC PLAYING]