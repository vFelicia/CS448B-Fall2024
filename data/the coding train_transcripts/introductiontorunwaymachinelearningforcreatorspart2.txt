00:00 - [TRAIN WHISTLE]
00:00 - Hello and welcome to
another video tutorial
00:03 - about working with Runway and
running machine learning models
00:06 - in Runway itself.
00:07 - Now, before you watch
this video tutorial,
00:10 - if you've never
used Runway before,
00:12 - you might want to go back
and look at my Introduction
00:14 - to Runway, how to
download and install it.
00:16 - But to be honest, you
probably can figure that out
00:18 - if you just go to runwayml.com
and click on Download Beta.
00:23 - You're going to want to download
and open the runway software.
00:27 - You'll go then to Browse Models.
00:30 - I might go here under Motion,
and I'm going to click PoseNet.
00:34 - And you'll find
yourself right here.
00:36 - So this is where I am.
00:37 - I've installed Runway.
00:38 - I've downloaded it.
00:39 - And I'm on the page in the
Runway software for the PoseNet
00:42 - machine learning model.
00:44 - Now, what is PoseNet?
00:45 - PoseNet is a machine
learning model
00:47 - that performs real-time skeletal
tracking of one or more people.
00:50 - And guess what?
00:51 - I'm a person, and I've
got Runway running here
00:54 - with PoseNet.
00:54 - So I'm going to run it.
00:55 - So let's actually first
click Add To Workspace.
00:58 - So I already have a
workspace that I've
01:00 - made in the previous video
called Coding Train Live
01:03 - Stream.
01:03 - I want to choose an
input source, which
01:05 - I want it to be my webcam.
01:07 - So, yep, Runway go right
ahead, and there I am.
01:10 - And then I want to choose an
output source, which eventually
01:14 - I want to be processing,
because I want
01:16 - to get the results of running
this machine learning model
01:18 - PoseNet into processing itself.
01:21 - But for right now, I'm just
going to click on Preview.
01:24 - So I click on Preview.
01:26 - Oh, and I have to run.
01:27 - But guess what?
01:28 - So this is different than what
I've showed in previous videos.
01:30 - I've got an option
for Run Locally.
01:32 - And, in fact, this model
can only be run locally.
01:34 - It would be silly to run
this one in the cloud,
01:36 - because I'd have to spend
all this time sending
01:38 - the data over the network.
01:39 - And it's very easy
for it to run.
01:40 - This is a very
small, fast model.
01:42 - It can be run on most
modern computers.
01:44 - So I'm going to
click Run Locally.
01:46 - So it requires no GPU credits.
01:47 - Absolutely, can
be used for free.
01:49 - And we can see there it goes.
01:50 - It's running right now.
01:52 - It is making guesses as to
where the various key points
01:56 - of my skeleton are on my body
in the output That's. viewable
02:00 - below.
02:01 - So one of the nice
things about working
02:02 - with Runway and
its models is a lot
02:04 - of times models have different
parameters and values
02:07 - and things that you can tweak
and change to try running it
02:09 - in different ways.
02:10 - And these are sort of
known as hyper parameters
02:13 - to a machine learning model.
02:14 - And so some of them
I would actually
02:16 - have to stop running
the model and then
02:17 - I can start to play with it.
02:18 - So, for example,
this Architecture one
02:20 - is something I can actually
make the models smaller.
02:23 - It might be less accurate,
but it will run faster.
02:27 - But so, for example,
I'm just going
02:29 - to change this to 0.75 instead.
02:31 - I'm going to run it again.
02:33 - But some of these
parameters can actually
02:36 - be tweaked in real time.
02:38 - So, for example, I can
change the width and height
02:41 - of the image, which
is actually changing
02:44 - the resolution of the image
from the webcam itself.
02:48 - And I can make it more
grayscale if I want.
02:50 - I could do various
things to actually tweak
02:52 - the image before it goes in.
02:53 - But this is not
the important piece
02:55 - of what I want to
do in this video.
02:57 - What I want to do
in this video is
02:58 - we have a moment here where I've
got a model running in Runway.
03:03 - And I'm able to play with
it, tweak it, get it exactly
03:06 - the way I want it to work.
03:08 - And I want to take
that next step
03:09 - from having it run here to be
able to see the result of it
03:12 - in my own piece of software.
03:14 - So let's make that happen.
03:16 - This software that I'm
going to use to attempt this
03:18 - is something called Processing.
03:20 - So since this size here
in Runway of the output
03:24 - is 640 by 362, what I'm going
to do in my Processing code
03:28 - is set the size of the
canvas to 640 by 362.
03:34 - void draw.
03:37 - background 0.
03:42 - So now, I have a
Processing sketch,
03:44 - which I am running right here.
03:45 - How do I see the results,
the output of the model
03:48 - in my Processing sketch?
03:50 - So there are a variety of
different network protocols
03:53 - that Runway supports.
03:54 - And I can find out
about them up here
03:56 - by clicking this Network tab.
03:59 - And the one that I want to use
for working with Processing
04:02 - is OSC.
04:03 - So there's a variety of
reasons why you might
04:06 - pick one protocol over another.
04:08 - It really depends on
what you're doing.
04:10 - In the case of where I just
want to get a single image,
04:13 - an HTTP request would
make the most sense.
04:15 - And I'll do that
in another video
04:16 - when I show you how to work
with style again in Runway.
04:19 - But right now,
I'm going to click
04:20 - on OSC, which works pretty
well with Processing.
04:24 - And it's telling me a
lot of information here.
04:27 - So it's saying, hey, this
is the server address.
04:30 - So this is the most important
thing that I need from Runway.
04:34 - It's what I'm going to tell
Processing is the unique IP
04:39 - address, which happens
to be the local IP
04:42 - address of this computer
and the port number
04:44 - from which it can
get the OSC messages.
04:47 - I'm going to click here.
04:48 - And I'm going to create
a string called like ip.
04:52 - I'm pretty sure
I'm probably going
04:54 - to want the port number
in a separate variable.
04:56 - And I'm going to create
a port number like this.
05:00 - Now, I could sit here
and write all the code
05:04 - for this, which
is what I usually
05:05 - do in Coding Train videos.
05:07 - But this is a fairly
different circumstance.
05:09 - I really just want
to get the example up
05:11 - and running and show
you how to do this.
05:13 - And one of the nice things
about working with Runway
05:15 - is there are a whole
bunch of premade examples
05:18 - for you with different platforms
and pieces of software,
05:21 - one of which is Processing.
05:22 - So let me show you
how you would actually
05:23 - do this in the real world, how
I would be doing this, which
05:26 - is the way to do it right now.
05:27 - So if I go to the
Runway ML GitHub--
05:31 - and I actually should
go back one level
05:35 - and go here under Runway ML.
05:38 - You can see here's the GitHub
page for the Runway software.
05:41 - And there's a lot
of information.
05:44 - There's some sort of
like high-level stuff
05:46 - here about how to port your
own machine learning model
05:48 - to Runway itself.
05:49 - So if you've trained
your own model or you
05:51 - find a model that's not
supported by Runway,
05:53 - how you could add it.
05:54 - But that's not what
we're really doing here.
05:55 - What I want to look for
is here Processing, Runway
05:59 - and Processing.
06:00 - If I click here,
this repository has
06:03 - a whole bunch of examples of
using Runway with Processing.
06:06 - So you can see there's a
StreetView one, attnGAN,
06:09 - face landmarks, im2txt,
and, voila, PoseNet.
06:14 - This is the one that
I'm working with.
06:16 - So I'm going to look
at this example.
06:18 - I should say that this is
an open source project.
06:20 - Processing is an
open source project
06:22 - that I'm involved
with that I've talked
06:23 - about in a lot of other videos.
06:24 - So maybe this is a place where
if you find another model
06:27 - in Runway that you've made
work and you want to contribute
06:30 - your Processing example here, I
would encourage you to do that.
06:33 - And Chris, one of the founders
and creators of Runway,
06:35 - and I have been talking
about making a Processing
06:38 - library for Runway.
06:39 - And it just so happens that I
made two recent video tutorials
06:42 - about how to make a
Processing Java library.
06:44 - So I see a project in the
future, which is a Processing
06:48 - library for Runway.
06:49 - So if you want to get involved
with that, with making that,
06:52 - write in the comments
and let me know.
06:54 - And maybe we'll create
a GitHub repo for that.
06:56 - OK, so I mean to go
here under PoseNet.
06:58 - And I'm just going to click
here under posenet.pde.
07:00 - So I could just copy
paste the whole thing,
07:02 - but I'm going to kind
of go piece by piece.
07:04 - And you can see here already
Runway host and Runway port.
07:08 - So I made a mistake in my code.
07:10 - So I got a-- oh, I'm
missing the 0.1 here,
07:13 - which I'm sure the Chat
is already talking about.
07:15 - And there's an extra 1 here.
07:17 - And this should be an integer.
07:20 - And this would really be Host.
07:21 - So actually let me
use the same variable
07:23 - names, runwayHost
and runwayPort.
07:25 - OK, so I think I've
gotten this right now.
07:27 - Now, in order for
the example to work,
07:30 - I need to make sure also
I have the Processing OSC
07:34 - library installed.
07:36 - So if I come over
here, I can copy
07:37 - paste these import statements.
07:40 - I can copy paste this OSC
object that I definitely need.
07:45 - And we'll see very
quickly that I
07:47 - have an error, which is the
class OscP5 does not exist.
07:51 - This is because I haven't
installed the Processing OSC
07:55 - library.
07:55 - You might have already have it
installed because you use it
07:57 - with a different project.
07:58 - But I could go here.
07:59 - And I could do Sketch,
Import Library,
08:03 - Add Library, OSC
to search for it.
08:06 - This is the library
I'm looking for oscP5.
08:09 - I'm going to click Install.
08:10 - And now, you'll see that
error message goes away.
08:13 - The next thing that I want
to do is create an object
08:15 - to receive OSC messages.
08:16 - And I think I can just make
this a new OscP5 object.
08:21 - I need to give it a reference
to this particular sketch,
08:23 - because it's going to need to
trigger events in the sketch
08:26 - when there's data available.
08:27 - And then just give
it the port number.
08:30 - This is called runwayPort.
08:33 - So if you look at
the runway example,
08:35 - it's actually using this object
called OscProperties, which
08:39 - is a bit more sophisticated.
08:41 - It says a remote address, a
listening port, a datagram
08:43 - size, and some other stuff.
08:45 - I should probably just copy
paste this into my example,
08:47 - but I'm curious if it will
work with just the sort of more
08:50 - simplified default OscP5
object, where I just say
08:53 - this and the particular port.
08:56 - But I do need this.
08:57 - I do need a broadcast
location, because I'm
09:00 - going to have to send messages
to Runway as well, saying I'm
09:03 - connected or I'm disconnected.
09:05 - So there's two
things at play here.
09:08 - There's the Processing software.
09:12 - And there's the Runway software.
09:17 - They're both running
locally on my computer.
09:22 - Now, it's possible
that in other scenarios
09:26 - there could also be
a cloud GPU involved
09:29 - that runway sends messages
back and forth between.
09:34 - And this is something
that I'm going
09:35 - to do in the next
example, where I work
09:38 - with something called StyleGAN.
09:40 - I'm going to have Runway
also talk to a cloud GPU.
09:43 - But that's not happening here.
09:44 - PoseNet is actually
running inside of--
09:48 - basically wrapped into
Runway itself locally.
09:51 - So PoseNets running
here in Runway locally.
09:54 - Processing is sending
a message like connect.
09:58 - Like, hey, I want
to hear information.
10:00 - That's a one-time message.
10:02 - And then Runway will just
continuously send data via OSC
10:08 - to Processing about what pose
it's detecting with the PoseNet
10:13 - model from the webcam input.
10:15 - So if I wanted, I probably
could figure out a way
10:17 - to get the camera
input into Processing,
10:19 - send the image to
Runway, and then have
10:21 - Runway send the results back.
10:23 - But Runway can connect
to the camera directly,
10:25 - so I might as well just do that,
because that's pretty easy.
10:28 - So I should also
put here that like
10:30 - if I make a little note
here, like webcam--
10:33 - that webcam is
talking to Runway.
10:36 - I might also have it
talk to Processing
10:38 - if I want to show the results
in Processing as well.
10:42 - So this is what's going on
in this particular example.
10:45 - So I want to create this
broadcast location, which
10:50 - is a net address object.
10:55 - So I need to put that in here.
10:57 - And then the first
thing that I want to do
10:59 - is just send the
connect message.
11:02 - So I'm going to copy this in and
paste it here and say Connect.
11:10 - So what I'm doing when
Processing starts up
11:12 - is it calls the
function connect, which
11:14 - creates an OSC message.
11:16 - Every single OSC message
is comprised of two parts.
11:22 - Those two parts are
an address, which
11:26 - is usually denoted as a
string, kind of like a path--
11:31 - and you can see this
is server/connect.
11:34 - That's the address.
11:35 - Or you might also think of
that almost as like the message
11:37 - name as the way I
sometimes think about it--
11:39 - and then the data.
11:42 - Now, in this case,
there actually
11:43 - is no data, because the
address itself is the message.
11:47 - So this is a very
simplified thing,
11:48 - where this connect message
is just, hey, I'm connecting.
11:52 - So the name of the
message, the address,
11:54 - is the only thing
needs to be there.
11:55 - There's no data.
11:56 - But when Runway
sends data back, it's
11:58 - going to have a message name,
like a data or key points
12:01 - or poses, something like that.
12:03 - And then that's going to have
packaged with it lots of data,
12:06 - like all the xy's of all
the positions of everything.
12:09 - All right, so let's run
this and see what happens.
12:12 - Yeah, that's pretty good.
12:14 - No errors.
12:15 - Now that I've connected, I
want to listen for messages.
12:18 - And the way that that is done is
with an event called OSC Event.
12:24 - So this is much
like mouse pressed
12:26 - or key pressed or serial
event or capture event.
12:30 - This is a function in Processing
that has a very special name,
12:35 - called OSC Event.
12:36 - And the oscP5 library
knows to call that function
12:40 - when there's data coming in.
12:42 - So I'm going to just
copy paste this.
12:44 - And I'm going to put it in here.
12:47 - And what I'm going to-- so
let's take a look at this.
12:50 - So there's an OSC Event
that has passed through it
12:53 - an OSC message.
12:54 - I'll just change
this to message.
12:57 - And if the message
has that data--
13:00 - so this is like its address.
13:01 - Remember that?
13:02 - Its address has data, that's
the address we're looking for.
13:06 - Or if it doesn't,
get out of here.
13:08 - So I want to ignore any
other messages coming in.
13:10 - Then what I want to do
is get the data itself.
13:16 - So the data of the message
actually comes in as a string.
13:19 - But the string is
formatted as JSON, which
13:22 - is JavaScript Object Notation.
13:24 - If you don't know what
JSON is I might refer you
13:26 - to a different video of mine
that explains what JSON is.
13:30 - JSON works really
nicely in JavaScript.
13:33 - It's a little bit
awkward to work with it
13:34 - in Processing, because
Processing is Java.
13:36 - It doesn't speak
JavaScript natively.
13:39 - But we're going to make it work.
13:40 - So the first thing
in the message
13:43 - itself is a big string of JSON
data, which then is a JSON
13:49 - object that can be parsed with
Processing's parseJSONObject
13:53 - function.
13:54 - And then I can just look
at it in the console.
13:56 - So let's see if we
actually get the data in.
14:02 - I'm not getting anything.
14:03 - And I'm wondering why.
14:04 - And actually I know why,
because I had to figure it out.
14:07 - So first of all, there's
a clue to me here.
14:10 - It says, could not
create datagram socket
14:12 - port 5100, because
it's already in use.
14:17 - And I forgot there's a
weird thing going on here.
14:19 - If I were using OSC to
communicate between two
14:24 - separate computers, I could
use the same port number
14:27 - on each separate computer
because it's just
14:29 - one port number.
14:30 - But, here, I need to be
able to send data to runway
14:34 - at a particular port, as well
as receive data into processing
14:38 - at a different port that
cannot be the same port,
14:41 - otherwise it will
be in conflict.
14:43 - So the port that I am
broadcasting to is 57100.
14:50 - That's what's listed in Runway.
14:53 - But the actual port that I
want to receive messages at
14:56 - is 57200.
14:59 - And maybe Runway knows just
to add 100 to it automatically
15:03 - behind the scenes.
15:03 - But this is the default
setup that's in Runway.
15:06 - So I need to have a different
port for receiving the data,
15:11 - as the port that I'm sending to.
15:13 - And let me show you what I
mean by that in the code.
15:15 - So this is the Runway
port right there, 57100.
15:20 - That's the port that I
want to broadcast to.
15:23 - And it's part of my
broadcast location.
15:25 - That's where I'm
broadcasting to.
15:27 - But where I want to receive
messages is actually 57200.
15:32 - So now, if I run this, I'm
actually receiving messages.
15:37 - But I've got a new error--
15:39 - ArrayIndexOutOfBoundsException.
15:41 - So this is a rare case,
where the data that Runway
15:44 - is sending for all of these
poses is actually quite large.
15:48 - And so what it
needs is more space.
15:51 - It needs a bigger packet size.
15:53 - And so that's why in
the Runway example
15:55 - there was this
extra OSC properties
15:58 - object, which allowed setting
a larger datagram size.
16:02 - And the listening port is 57200.
16:05 - So just before using
OscP5 by default--
16:07 - you don't need to
do this, but I'm
16:09 - going to copy paste this in.
16:12 - I'm going to put this
back here and then
16:16 - I am going to change
this to properties.
16:19 - And I think I now have
all of the pieces,
16:22 - and what I should see is--
there we go, a lot of stuff.
16:25 - And look at this.
16:26 - Now, I've got exactly coming
into processing a confidence
16:31 - score--
16:33 - it clearly cannot
see my left ankle,
16:36 - because my left ankle is
not viewable to the camera.
16:38 - So that's why that
confidence score is so low.
16:40 - Let's scroll up and
do like right ear.
16:43 - It's got a very high confidence
score and an x and a y
16:47 - for my right ear.
16:48 - So now, I'm at the point, where
I can actually use this data.
16:53 - Going back to the
Runway example,
16:56 - you can see here that
there's a very elaborate loop
16:59 - to parse through
the JSON and look
17:02 - at all the different
key points and get
17:04 - all the different positions
of everything that it detects.
17:07 - I'm going to try to do something
much simpler right now.
17:09 - I'm just going to get the
right eye and left eye.
17:12 - So let's see if we
can figure that out.
17:13 - One way we can
approach this is we
17:15 - can make this data
variable a global variable.
17:19 - So I'm going to take
this JSON object.
17:22 - And I'm going to make
this a global variable.
17:24 - I'm going to call it data.
17:26 - And then, in the
draw loop, I'm just
17:28 - going to say as long as
data is not equal to null--
17:32 - I forget that I'm in Java.
17:33 - I can just do that--
17:35 - data will be null until it's
received something from Runway.
17:38 - So as soon as it's received
something from Runway,
17:40 - all I need to do now
is parse this JSON.
17:43 - Something I've done to make
this a little bit easier
17:46 - is I've just taken that
JSON that prints it
17:48 - to the processing
console and I've
17:51 - pasted it into a
into a JSON file
17:56 - that I can look at
in Visual Studio Code
17:58 - just so I have something
to reference to for.
18:00 - So I know that I need to
get something called poses.
18:03 - So the first thing that I
want is the poses array.
18:07 - So one of the thing that's
really weird in Processing
18:09 - with JSON is you have to
specify whether the data you're
18:12 - looking at is a JSON
object or JSON array.
18:15 - And this poses data is
an array, as indicated
18:19 - by this square bracket.
18:20 - So I'm going to say
JSONArray poses equals
18:27 - data.getJSONArray string poses.
18:35 - Then, I want to get
the key points array.
18:38 - Oh, because there could
be more than one pose.
18:40 - But I'm going to assume
there's just one pose.
18:46 - So then that's the poses.
18:47 - So then I'm going to say
the key points are also
18:51 - an array equal poses.get 0.
18:56 - So that would be the first
element of the array.
19:00 - Now, get a new array
called key points.
19:05 - Get a JSON array key points.
19:11 - The good news is
the Runway example
19:12 - has all of this in there,
so if I get it wrong--
19:16 - key points.
19:18 - I have an error here, because
I can't just say get element 0.
19:23 - What is element 0?
19:25 - It's a JSON object.
19:27 - There we go.
19:29 - So now, I have the
key points, which
19:31 - are the JSON array called key
points in the first JSON object
19:35 - index 0.
19:37 - Then, what do I
want to look for?
19:42 - So now, I'm in the
key points array.
19:43 - This is element 0.
19:45 - If I knew like left--
19:48 - oh, this is easy, let's do
nose, left eye, and right eye,
19:51 - 0, 1, and 2, perfect.
19:53 - So I want to get
JSONObject nose equals
19:59 - keypoints.getJSONObject 0.
20:04 - And we'll do three of these.
20:07 - Left eye-- I'm doing
this a little bit
20:09 - different than the
Runway example.
20:10 - And then I'll point you runway
example after right eye.
20:14 - Certainly, I could
use a loop here--
20:16 - so nose, left eye, right eye.
20:18 - And then I need to
get the position--
20:21 - nosePos equals
nos.getJSONObject.
20:25 - I should just do the nose.
20:27 - I'm just going to
do the nose just
20:29 - to keep things simpler here.
20:30 - You can extrapolate
to figure out
20:32 - how to do the left eye
and the right eye--
20:33 - nose.getJSONObject position.
20:38 - And then x equals--
20:42 - I'm going to call
this nose position.
20:44 - Nose position gets x.
20:47 - Pretty sure this is right.
20:50 - And y equals nosePosition.get y.
20:53 - All right, let's see, what
have I gotten wrong here?
20:56 - getFloat.
20:58 - Again, I'm in Java.
20:59 - I've got to specify the type.
21:01 - So if I've done
everything correctly,
21:03 - I've gotten all the key
points of the first pose.
21:07 - I've gotten the object with
all the data for the nose.
21:11 - Then I can get the nose position
out of that object, then the x
21:14 - and y out of that object.
21:15 - Phew.
21:17 - Now, I'm gong to say
ellipse x,y 2020.
21:22 - And let's make it a red nose.
21:26 - fill 255.0.0.
21:28 - Let's give this a run.
21:30 - And there we go.
21:32 - I am now controlling my nose.
21:36 - From Runway into Processing
with OSC messages.
21:43 - Amazing.
21:44 - OK, so this really concludes
this particular video tutorial.
21:49 - Certainly, what you
might want to do
21:51 - is see the entire skeleton.
21:53 - To use PoseNet
effectively, you really
21:56 - want to have the camera
probably around 6 feet from you.
21:58 - You want to back up and allow
it to see your full form.
22:01 - You can also pass it images and
get the pose, the skeleton off
22:04 - from an image.
22:05 - There's lots of different
things you can do.
22:09 - And, certainly,
I would recommend
22:10 - that you check the example in
the Runway GitHub repo itself,
22:16 - which has a nice loop
to go through all
22:18 - of the different positions.
22:20 - And actually it also has
this little mapping to map
22:23 - what all the connections
are between them
22:25 - for the actual skeleton itself.
22:27 - So as a little
exercise, see if you
22:30 - can expand what I did to have
the right eye and the left eye.
22:34 - But even so, you could just go
get the Runway example itself.
22:38 - But this is a guiding
principle for how
22:41 - any particular model that you
might find in Runway itself--
22:45 - someone in the chat was
just asking about dense
22:47 - pose, for example, that you can
communicate from runway via OSC
22:52 - to Processing.
22:53 - But in a lot of other
cases, you might
22:55 - want to use web sockets
or an HTTP connection
22:59 - to communicate, particularly
if you're working
23:01 - in the browser with JavaScript.
23:02 - So what I'm going to
do in the next video,
23:04 - if you want to watch, is run
StyleGAN to generate a rainbow
23:09 - image and then pass
that image into P5
23:12 - and render it in
the browser itself.
23:15 - And breaking news
from the chat, Damien
23:17 - writes SRSP stand for Send
and Receive on the Same Port.
23:23 - By default, OSC packets
are not received and sent
23:25 - by the same port, if you
need to send or receive
23:27 - in the same port.
23:28 - Oh, so maybe I could have
actually done something
23:30 - with the port numbers.
23:31 - I have no idea.
23:32 - I'm sure people will write
about it in the comments.
23:34 - But this code works.
23:35 - The code in the Runway
GitHub repository works.
23:37 - So how fun.
23:38 - Use it.
23:39 - Make something with it.
23:39 - Please share it with me.
23:40 - And hope you enjoyed this
tutorial about Processing,
23:44 - Runway, and the PoseNet
model running locally
23:46 - on your computer.
23:47 - Goodbye.
23:48 - [TRAIN WHISTLE]
23:49 - [MUSIC PLAYING]