00:00 - ♪ I will refactor this later you know ♪
00:04 - - Hello and welcome to Coding Challenge:
00:06 - the Chaos Game, part
deux (says in French),
00:08 - electric boogaloo (laughs),
00:10 - I don't know what I'm talking about.
00:11 - Thank you to Espen Larsen,
@drcircuit on Twitter
00:15 - for creating the "I Will
Refactor This Later" song,
00:17 - this coding challenge is
in honor of that song,
00:19 - because, guess what...
00:21 - "Later" is now,
00:23 - I will refactor this now.
00:25 - So what I'm going to do
in this coding challenge
00:28 - is expand this idea of the Chaos Game.
00:31 - Instead of merely creating
this Sierpinski Triangle,
00:33 - I'm going to make a version of this
00:35 - where there could be more than
three points, seed points,
00:38 - and that, as the points move,
00:41 - as the newly random point move moves
00:43 - from point to point to point,
00:46 - I might move by a different
percentage than 50%.
00:50 - So if you didn't watch the
previous coding challenge
00:52 - where I made this,
00:53 - you could pause now and go watch that,
00:55 - or you could just stay
here with me right now,
00:56 - let's be together, let's
be friends on the Internet,
00:59 - programming stuff, okay.
01:00 - So the first thing that I
wanted to refactor this,
01:02 - I really want to play this song again,
01:03 - but I'm not going to overdo it,
01:05 - I'm going to use it sparingly,
01:06 - otherwise people will
get irritated and annoyed
01:08 - and I'm sure I will hear about it.
01:10 - The first thing that I wanted to do
01:11 - is I am going to make a array called seed,
01:17 - maybe I should call it seed points,
01:18 - let's just call it points, I don't know,
01:19 - let's call it points.
01:22 - And instead of having ax, ay,
01:25 - what I'm going to do in this array,
01:28 - let's get rid of this.
01:30 - First, I just want to
recreate this exactly,
01:32 - I am going to, say I'm
going to have three points,
01:37 - and I'm going to create a new point,
01:40 - which is a vector,
01:41 - I'm going to use vector
createVector function
01:44 - to make a new point anywhere
randomly in the canvass.
01:49 - I know I've run a little
bit out of space here,
01:51 - but that's fine.
01:53 - Come on, a little bit further over,
01:54 - wow, there's a space for a semicolon.
01:56 - And then I'm going to
say points.push(v), okay.
02:01 - And then I'm going to have
a point called current,
02:05 - which is also going to be...
02:11 - A vector, a random vector.
02:14 - There we go, there we go.
02:18 - So now what I can do is again,
02:21 - I have just refactored this
02:22 - to instead of having
separate x, y variables
02:25 - for all four points, I have an array
02:27 - that keeps my three seed points
02:29 - and I have my current point in,
02:31 - all current points at separate variable
02:32 - and both of those are p5-vectors.
02:34 - A vector being an object
that can hold an x, y, and z.
02:38 - But I'm not going to use the z right now,
02:40 - although, you could do
this in 3D, oh, you should,
02:42 - you should do this in 3D.
02:44 - I'm not going to.
02:45 - Alright, so then I'm going to say,
02:47 - for (let p of points),
02:53 - and I'm going to say, point(p.x, p.y);
02:58 - so we should see, there we go.
02:59 - Those are my first three seed points
03:02 - and then what I'm going to do here is
03:05 - random the length.
03:09 - And this is actually now,
03:11 - oh, you know what, I don't
even need to do this,
03:13 - guess what, the random function in p5,
03:19 - I'm going to say like next
equal to random function in p5
03:22 - will give me a random
object out of that array.
03:25 - Now if I want to pick them
with a different probability,
03:27 - I'd have to do something different,
03:29 - but here, this next is now
going to be one of those
03:32 - three points randomly.
03:33 - And then all I need to do is say,
03:35 - stroke, I'm going to
still give it this color,
03:41 - and then I'm going to say,
03:45 - next.x = lerp, this.
03:50 - So I'm lerping, but I'm
going to lerp between next
03:55 - and the current.
03:58 - Oh, and current is the result of that.
04:00 - So the current is the thing that's moving
04:02 - and it's really doesn't matter,
04:04 - but I like to think of it in this order.
04:06 - Current is moving and I
think there's actually
04:08 - a lerp() vector function,
04:10 - so I could do this in one line of code.
04:11 - That's another "refactor
this later-now" (laughs).
04:17 - So there we go,
04:21 - and then all I need to do
04:24 - is draw the point,
04:29 - all I need to do is draw that point...
04:32 - (keyboard tapping loud)
04:36 - And here we go, look at this, ta-dah!
04:39 - Now, one thing I should probably do
04:40 - is also reset it.
04:43 - Let's actually, all of this stuff here,
04:48 - is kind of the process of,
04:50 - let's right a function of resetting,
04:52 - like, I want, right
now it's like resetting
04:54 - every time I change the code,
04:55 - because of the p5 editors configured it
04:57 - to, like, relaunch the sketch,
04:58 - but I think what I would prefer to do here
05:00 - is right my own function called reset(),
05:02 - this is a nice refactoring.
05:04 - And I need to empty the array,
05:11 - and I'm going to say points equals, here.
05:15 - So this function reset()
05:16 - will just sort of reseed the environment.
05:19 - And I could do it whenever
I click the mouse,
05:22 - but just for right now, I'm going to say,
05:23 - if frameCount modulus,
like, 100, equals zero,
05:27 - then reset().
05:29 - So what that's going to do
is every 100 frames, right,
05:31 - because modulus of the
number 100 will equal zero
05:35 - any time the frameCount
is divisible by 100
05:38 - with a remainder of zero.
05:39 - So you can see, over and
over again, this is going to,
05:42 - so, no, I'm, I'm here,
I have refactored this.
05:45 - But now that I have refactored this,
05:47 - there are so many possibilities,
05:49 - oh, this is exciting, okay.
05:51 - So, for example, I could just do this.
05:55 - No, oh, yeah, look.
05:59 - Now, interestingly
enough, I don't really get
06:02 - a pattern that's super
interesting to look at
06:05 - with four points.
06:07 - Kind of accidentally I sometimes am.
06:11 - And do so what happens
if have eight points.
06:13 - Whoa, this is crazy.
06:16 - Now, probably what I would want to do,
06:17 - what might make sense for me to do,
06:18 - is place these points around a circle,
06:21 - just, I mean, it's interesting
to have them randomly,
06:23 - but I think I would prefer,
06:25 - just to sort of figuring out
what I want to with this,
06:28 - to have all those points
around a circle, right,
06:31 - so you can think about it, actually,
06:33 - this was a way of getting
my equal lateral triangle
06:34 - that I was looking for.
06:35 - So what if I have eight
points and then I get
06:38 - some kind of like hexagon,
octagon, septagon,
06:41 - whatever the number of sides is,
06:42 - based on the number of points.
06:44 - Alright, so what I'm going
to do here, actually,
06:46 - I'm going to have a fixed
set of points, right.
06:48 - So the points are, I'm just
going to do once in set-up.
06:52 - And what I'm going to do is
I'm going to use the constant.
06:55 - Const n equals eight,
06:58 - I know I could be using constants
other place of the code,
07:00 - and if you want to know more about consts,
07:01 - I made a video about it
07:02 - where I got a bunch of pics
wrong, but you can watch,
07:04 - so you might find a
different resource for that.
07:07 - But so, I just, now I'm making n points
07:10 - and what I'm going to do is say the angle
07:12 - is TWO_PI divided by,
aye, that's a bad idea,
07:17 - because I don't want to divide by zero.
07:20 - So, alright, we'll say, um...
07:24 - Oh, it's, I know what it is,
07:26 - it's i times TWO_PI divided by n,
07:30 - that's what it is, right,
07:31 - because I want to have, I'm looking for,
07:34 - if n is four, for example,
I want zero degrees,
07:39 - 90 degrees, 180 degrees, 270 degrees.
07:42 - It's probably going to go the other way,
07:43 - because the screen is
flipped, but that's the idea.
07:45 - So now, what I'm going to do is say,
07:48 - createVector at...
07:52 - Some number like, let's just do 200
07:54 - times cosine of the angle,
07:57 - oh, you know what, I think
there is p5.Vector from
08:02 - p5.Vector fromAngle,
08:04 - I think, is a function, angle.
08:07 - So it's going to make a
vector from that angle.
08:10 - And then I can say V dot, um...
08:16 - V dot
08:17 - Multiply 100,
08:22 - and that's working,
08:24 - but I need to translate
to width divided by two,
08:28 - height divided by two.
08:33 - And now we have these
points in the center,
08:35 - of course I also, if I wanted,
08:38 - I need to do that here, okay.
08:40 - So there we go, we can see now
08:42 - I've created eight points around
08:44 - and let's actually use, um,
08:48 - let's make that a little,
08:49 - ooh, why is this down here?
08:50 - Ooh, oh, there's a weird mistake,
08:53 - a goofy mistake happening.
08:58 - Oh, because when I reset, err,
09:02 - this is kind of, you know
what I'm going to do?
09:05 - The translator's fine,
but it's bothering me,
09:08 - I'm just going to make
life easier on myself
09:11 - and say, add, width divided by two,
09:14 - hight divided by two,
09:15 - I'm just going to move
that to the center manually
09:17 - by adding that to the vector, okay.
09:19 - Now what I want to do is multiply it
09:21 - by, like, width divided
by two, or something.
09:23 - Okay, great, ha, so now you see,
09:26 - those are all my points,
09:27 - we're still playing the Chaos Game.
09:29 - Now what I want to do is I'm going to have
09:32 - a variable called percent.
09:36 - And I also, I just want to
make, like, a lot more points
09:39 - really quickly, so I can
just sort of see the pattern.
09:42 - And what I'm going to do now is,
09:45 - I am going to try, I'm
going to when I lerp,
09:49 - I'm going to lerp by that percent
09:55 - and let's try different values.
09:58 - So let's try, so let's
go back to point five
10:00 - and this is what I get.
10:04 - Let's try point two-five.
10:07 - Interesting.
10:08 - Let's try point one.
10:11 - Let's try n of four,
10:13 - point two-five.
10:16 - (bell rings)
10:17 - Alright, I'm back.
10:19 - Nico Monsoon in the chat said,
10:21 - "Try three, just to see if
you didn't break anything."
10:24 - So I made the point n equals,
10:26 - I made n equal three,
10:28 - with the percentage of point five,
10:29 - and we could see I have
the Sierpinski Triangle.
10:32 - Actually, if you look on the
Wikipedia page for Chaos Game,
10:35 - you'll start to see a bunch of these.
10:38 - "A point inside a square repeatedly jumps
10:40 - "half of the distance towards
a randomly chosen vertex,
10:43 - "but the currently chosen
vertex cannot be two places
10:46 - "away from the previously chosen vertex."
10:49 - so this is interesting, right?
10:50 - So I could actually start to create
10:54 - some of these patterns by modifying
10:57 - how I pick a particular point.
10:59 - So this one actually would be nice.
11:00 - Let's do the pentagon one.
11:01 - "A point inside a
pentagon repeatedly jumps
11:04 - "half of the distance,
11:05 - "but the currently chosen
vertex cannot be the same."
11:07 - This is going to be an easy
one for us to implement.
11:09 - We just need to get a new random number
11:11 - that's not the same as the previous one.
11:14 - So, um, so let's go back here.
11:17 - Let's first make this five, okay.
11:20 - So we can see, even with five, a pentagon,
11:22 - we're kind of getting a somewhat
11:24 - of an interesting pattern here.
11:26 - I don't know why I obsess
over this sort of stuff,
11:29 - but I kind of feel, like,
let's give this just like
11:32 - a little bit of alpha
11:33 - and make the strokeWeight
one and do, like,
11:37 - a thousand points.
11:39 - So we can just sort of see
this pattern more quickly.
11:44 - Okay, now, what was I doing?
11:47 - Ah, so what I want to do now
is not allow the next point
11:51 - to be the same as what
was previously chosen.
11:54 - And so there's a variety
of ways I could do this,
11:57 - but actually I could just create a way of,
12:01 - I could just create a way of ignoring it
12:03 - if it happens to be the same one.
12:05 - So let's say, previous,
12:09 - I'm going to create a
variable called previous.
12:12 - And right here, where I
pick previous equals next,
12:16 - and I'm going to say, as
long as next is not equal
12:19 - to previous, then I could do this stuff.
12:25 - So now look at this.
12:27 - There we go, the Chaos Game, pentagon
12:30 - with one slight modification.
12:33 - And you know what,
12:34 - I don't want this to keep resetting,
12:36 - I just want it to, um...
12:40 - I want to tell it not to reset,
12:45 - and I want to go to Share,
12:49 - Full Screen,
12:51 - and I'm going to put this
in a different window
12:53 - and we're going to bring this up here
12:55 - and we're just going to enjoy this.
12:56 - Now, okay, here we go, we are done, ha,
13:00 - Chaos Game, thank you very much.
13:02 - Look at this,
13:03 - it's so beautiful, and
intricate, and amazing.
13:06 - So I now encourage you, now
you really got something,
13:09 - you can start to make
a variety of patterns
13:13 - and, really, here's the thing,
13:14 - one thing that you could do that actually
13:16 - is really, if you could think about,
13:17 - that I didn't do, if we go up here,
13:18 - look at this.
13:20 - This is actually a little, sort of,
13:21 - animated gif showing you the process
13:23 - of actually moving the points
from one spot to another
13:26 - and then to re-branching out.
13:28 - So imagine what you could do
if instead of just picking
13:30 - all the points and layering them,
13:31 - you actually created a
system where you animate
13:34 - the process of building this pattern.
13:37 - And you could see, you could see,
13:38 - maybe you can recreate some
of these other patterns
13:41 - by doing these rules.
13:42 - This one would be a nice one to create.
13:45 - You could try different percentages
13:49 - and see what you make.
13:50 - So, thank you for
watching this second part
13:53 - of the Chaos Game, I think we are done
13:55 - with all the chaos game
stuff I'm going to do.
13:57 - If you make your own version of this,
13:59 - please visit thecodingtrain.com link
14:02 - that's in this video's description.
14:04 - There, there are instructions
for how to submit
14:06 - alike to the version of the Chaos Game
14:08 - that you made yourself.
14:09 - You can share with me your images or gifs
14:11 - on Twitter @shiffman or @thecodingtrain,
14:14 - hashtag...
14:17 - codingchaosgame,
14:18 - and I'll see you in the future
coding challenge, alright.
14:21 - I don't know, maybe, I will--
14:22 - ♪ I will refactor this later-- ♪
14:24 - Wait, wait, wait, wait, wait,
14:26 - let's refactor this now,
14:28 - I'm not actually refactor it,
14:29 - I realized something.
14:31 - When I was playing with
the percentage earlier
14:34 - and making it lower,
14:36 - I started to get much noisier images,
14:38 - and, of course, this is true,
14:39 - because I'm not going very far.
14:42 - And so the points are sort of layering
14:44 - on top of each other and I'm just getting
14:46 - kind of a cloud of points.
14:48 - But what if instead of
going half way there,
14:52 - and, um, let's actually, I know I'm being
14:55 - kind of a lunatic about this stuff,
14:57 - but let me just make this white.
14:59 - Instead of going half way there,
15:01 - what if I go 75% way there.
15:04 - So actually going further
will start to yield
15:07 - some interesting patterns.
15:08 - And you can see here now, if is say 15,
15:11 - look at this.
15:12 - So this is now 15 points
going 75% of the way there.
15:17 - And by the way, maybe, if I were to make,
15:21 - oh, that's 90% percent of the way there,
15:23 - if I were to make some sort of slider
15:25 - or I varied a number of points,
15:27 - I could go back to putting these points
15:28 - all in a random location,
15:30 - that would be kind of interesting.
15:31 - Oh, let's do that now, I'm just curious.
15:34 - So where do I, uh, let's do this.
15:36 - Let's just really quickly,
15:37 - I'm just curious to see,
15:39 - I got to stop, you should...
15:41 - I shouldn't be doing this,
15:42 - you should be doing this.
15:45 - So you could see, ah,
okay, I'm not (mumbles),
15:47 - so anyway, so that's,
this is a clue to you
15:49 - of what you could now make, right,
15:51 - that I told you to share with me.
15:53 - You could vary that percentage,
15:55 - vary the number of points,
15:56 - vary where the seed point starts,
15:58 - animate, oh, so many possibilities, okay,
16:00 - see you later!
16:02 - (upbeat electronic music)