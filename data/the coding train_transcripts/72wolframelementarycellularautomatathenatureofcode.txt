00:01 - all right we're ready to look at our
00:04 - first cellular automaton now first I
00:06 - should mention that CA has kind of a
00:08 - there's a rich history of work you know
00:11 - that you could really look back into
00:12 - into the 1950s and were look at the work
00:14 - of John von Neumann in Stanislaw ulam
00:16 - there are all sorts of interesting
00:17 - beginning uses of this idea of modeling
00:20 - behavior that we see in our world or
00:22 - behavior that we could imagine through
00:24 - CA like principles and again we're going
00:26 - to look at the game of life which is a
00:29 - very well-known CA from the 70s in in a
00:33 - later set of video so we're oddly going
00:35 - to start kind of towards the end of this
00:37 - and a history of cellular automata and
00:40 - we're going to look at the work of
00:42 - Stephen Wolfram now I'm going to stop
00:45 - this discussion right here and point you
00:47 - to if you're really interested in kind
00:50 - of diving into deep into the science
00:52 - behind this stuff I would encourage you
00:53 - to take a look at Wolfram's book a new
00:56 - kind of science which you can read the
00:57 - entire book online
00:58 - I should note this book I think it's
01:01 - about 50,000 pages long or something I
01:03 - don't know maybe it's like a crew it
01:04 - requires like four iPads or something
01:06 - just to fill up the entire book anyway
01:08 - it's a lot of material and there's a lot
01:10 - of controversy about this material and
01:11 - the sort of big question is nature
01:13 - discrete or is it continuous does this
01:16 - but but will from central point here a
01:19 - principal I think is that this way of
01:21 - thinking this type of computational way
01:24 - of thinking is relevant to all forms of
01:26 - science now I'm not here to answer that
01:28 - question or even pretend to know have it
01:31 - appeared know the answer that question
01:32 - but I do want to sort of say that I just
01:34 - wanted to kind of point this out to you
01:36 - and I encourage you to take a look at
01:37 - this material but for us we're going to
01:39 - go all the way down to the guts of this
01:41 - and we're going to start in a very very
01:43 - simple place we're going to say we're
01:45 - going to ask ourselves okay if these are
01:47 - the defining characteristics of a
01:49 - cellular automaton what is and this is
01:53 - but what is the simplest possible
01:55 - scenario we could imagine okay
01:57 - so we started to go down this road but
02:00 - let's go through each of these and say
02:02 - what is the simplest possible scenario
02:04 - well a grid of cells the simplest
02:06 - possible grid of cells would be a one
02:09 - dimensional grid a linear grid so to
02:12 - speak I don't
02:13 - of selves the simplest possible set of
02:16 - states would be a zero or a one I
02:20 - suppose the simplest possible set of
02:21 - states would be just zero but we
02:23 - couldn't possibly get anything out of
02:24 - just having one state so we at least
02:26 - need two states 0 or 1 now we have a
02:29 - slightly more interesting question here
02:31 - which is what is the simplest possible
02:33 - neighborhood well let's say we're
02:35 - talking about this particular cell we
02:38 - might state that you know the simplest
02:41 - possible neighborhood it could be just
02:42 - to the left or just to the right but I'm
02:43 - going to say the simplest possible
02:45 - neighborhood is the three adjacent cells
02:49 - this cell and its neighbor to the left
02:50 - and to the right so if this is the
02:53 - simplest possible neighborhood one cell
02:57 - with its left and right neighbors am i
02:59 - recording yes now we have to ask our
03:01 - question how do we write the rules for
03:06 - the elementary CA where we get the cell
03:09 - state is a function of its neighboring
03:12 - states at the in the previous generation
03:14 - okay so this is our project right now we
03:16 - need to walk through these rules to find
03:19 - them and then see how they're
03:20 - implemented in code and then well look
03:22 - at the results have the results achieved
03:24 - anything interesting or a value or have
03:27 - they achieved complexity so let's answer
03:29 - that question so I'm going to erase this
03:32 - we can we can kind of remember this and
03:34 - let's look at a little bit more detail
03:36 - here so let's say this is our CA this is
03:45 - our CA at generation of acting
03:49 - anal-retentive here this is generation
03:51 - zero generation zero this is our CA okay
03:55 - and we're going to give it a bunch of
03:57 - cells of states and what I did here is
04:02 - somewhat arbitrarily I made a bunch of
04:03 - zeros and I gave one cell a state of one
04:05 - the reason I did that is this is kind of
04:07 - the classic or standard way of
04:08 - demonstrating a CA is to say let's have
04:11 - all the cells be off and just put the
04:13 - center one to one I don't know if that's
04:14 - actually the center one but close enough
04:16 - so we have to ask ourselves how do we
04:19 - evolve generation one I probably
04:23 - shouldn't have used the word evolve
04:24 - I don't think technically
04:26 - any evolutionary computing going on here
04:28 - although that is something we're going
04:29 - to examine in a future video how do we
04:31 - compute the next generation would be
04:33 - more accurate okay so this is our
04:36 - neighborhood now let's think about this
04:39 - what is this here this neighborhood
04:41 - that's going to give us at the very
04:47 - least the state for that particular cell
04:50 - at generation 1 how many possible ways
04:53 - could that neighborhood be configured
04:54 - well that neighborhood could be 0 0 0 or
04:58 - 0 0 1 or 0 1 0 or 0 1 1 or 1 0 0 or 1 0
05:04 - 1 or 1 1 0 or 1 1 1 right 1 2 3 4 5 6 7
05:10 - 8 ok so you know we should admit
05:13 - something to ourselves there's a lot of
05:15 - binary number stuff going on here and
05:17 - you know I kind of enjoyed that I think
05:20 - it's sort of fun you got zeros and ones
05:21 - and it makes you look like you're kind
05:22 - of a mad crazy person with writing all
05:24 - these zeros or ones but really um this
05:27 - might you might remember this if you
05:28 - want have you started first working with
05:29 - computers or learning to program or if
05:31 - you've had to work with a
05:32 - microcontroller what we have here are
05:34 - three possible ways of having a number
05:39 - with a 0 or 1 in it or we have 2 to the
05:41 - 3rd power possible way configurations or
05:43 - 8 possible configurations 1 2 3 4 5 6 7
05:46 - 8 so what's interesting to note is there
05:48 - only eight possible ways that
05:50 - neighborhood could be configured so if
05:52 - there's only 8 possible ways why don't
05:54 - we just define an outcome for every
05:56 - possible way meaning if the neighborhood
05:58 - is configured like so the resulting new
06:00 - state should be a zero if it's
06:02 - configured like so it should be a zero
06:04 - if it's configure like so it should be a
06:06 - 1 then let's say a 0 then a 1 then a 1
06:10 - then a 1 and then obsessive and then a 0
06:15 - right so I made up an arbitrary rule
06:18 - here but in a wolfram elementary CA this
06:21 - is what is known as a rule set Oh
06:25 - somewhere in my magical annotation
06:27 - system to this video you will see the
06:29 - decimal equivalent of this right it's
06:32 - some number I can't do this binary stuff
06:33 - in my head I wish I could that would be
06:35 - cool I could secretly like pause and
06:37 - rerecord the video and make it look like
06:38 - I know this
06:39 - so if you look at this this is the
06:42 - ruleset this is called the ruleset
06:43 - and now we have to ask ourselves another
06:46 - interesting question so we looked at
06:48 - this and said okay there are eight
06:49 - possible ways a neighborhood could be
06:51 - configured now how many possible rule
06:55 - sets are there well a rule set requires
06:58 - 8 binary numbers 2 to the 8th power is
07:03 - 256 that I do happen to know by hard
07:06 - drive memorize or somehow calculated my
07:08 - head I'm not sure which one so
07:10 - interestingly enough there are only
07:12 - there are only 256 possible ways an
07:15 - elemental wolfram elementary CA can be
07:18 - defined which means we can look at very
07:21 - easily week you know you know if we have
07:22 - like you got like 15 minutes we can look
07:25 - at you know if you're not too busy we
07:27 - could look at all the possible
07:29 - configurations we can see all the
07:30 - possible outcomes and what's really and
07:32 - we're going to do this in a moment
07:33 - what's really interesting about this is
07:35 - that a bull from actually categorizes
07:39 - all the possible outcomes into four
07:42 - classifications one is called uniformity
07:49 - another is a oscillate I would say
07:53 - oscillation remember if that's actually
07:55 - what it's called I like to think of it
07:56 - alt alternating values oscillation and
08:00 - another is I like to pause this video
08:03 - and fix what I'm thinking but I'm just
08:05 - going to keep going
08:06 - another is a random and then we have
08:12 - complexity so you know you might imagine
08:15 - the getting the first two components the
08:18 - first two classifications right if we
08:19 - look at this and we look at okay well 0
08:22 - 1 0 in this system 0 1 0 means you get a
08:25 - 1 and let's look at like 0 0 1 here
08:29 - would give us this value 0 0 1 gives us
08:31 - a 0 and then 1 0 0 gives us a 1 hey look
08:38 - at that we got 0 1 1 so we look at this
08:41 - we could imagine like we're just kind of
08:42 - sometimes we're flipping numbers
08:44 - sometimes we're not
08:44 - we might get like everything just
08:46 - becomes 1 so everything just becomes
08:48 - zeros or everything goes 0 0 1 z
08:51 - was your one repetition that would be
08:53 - perhaps a better name instead of I don't
08:56 - know wirelessly give oscillation I could
08:57 - think of it as an oscillation between
08:58 - states but repetition right good of
09:01 - uniformity everything tends towards just
09:03 - one state everything goes to zero
09:04 - everything goes to one or some type of
09:06 - repetition zero zero one zero zero one
09:08 - zero zero one zero zero one we could
09:10 - compute we could make up all these songs
09:12 - like southern CA songs one zero one zero
09:14 - one zero okay um so that's what you
09:19 - would expect but what's really shocking
09:20 - or kind of exciting or interesting about
09:22 - this stuff is the fact that we get not
09:25 - only do we get these sort of obvious
09:27 - results we get completely random results
09:29 - attention we all we essentially get a
09:31 - pseudo-random number generator out of
09:33 - just a CA I hope that's accurate um we
09:36 - also get we also achieve complexity we
09:38 - achieve this sort of ordered pattern
09:40 - that is unpredictable it's it's not pure
09:43 - random but it's also not pure repetition
09:45 - either we get this we get this
09:47 - intelligent behavior and this is really
09:49 - this is really interesting that this
09:51 - really highly computational system
09:54 - produces the type of result that we find
09:59 - in nature so that's that's the I suppose
10:03 - there's a good argument for why we're
10:04 - looking at this stuff in the first place
10:06 - I'm not timing myself and I'm just going
10:07 - on and on so we now need to kind of
10:10 - think about let's take a look at how
10:12 - this works in code okay all right I want
10:16 - to mention one other thing before we
10:18 - look at the code example so here's the
10:21 - other thing in the exact a well I'm
10:22 - going to go over to the example for a
10:24 - second and I'm going to open it up and
10:26 - I'm going to run I'm going to run rule
10:29 - 222 so what do I mean when I say rule
10:31 - 222 a great resource that you should
10:33 - take a look at is it can be found by any
10:35 - Google search but is this a page on in
10:39 - Wolfers math world about elementary
10:40 - cellular automaton at automata
10:43 - it's anise habitat and more we have
10:45 - we're talking about many of them they're
10:46 - automata but look we can see here here
10:48 - is a given rule set if we have three
10:50 - black cells or three cells with the
10:52 - value of one then we get a zero if we
10:54 - have one 1 0 we get a 0 you can see how
10:56 - this is modeled now if we go down we can
10:59 - see here this by the way is every the
11:03 - outcome of ever
11:04 - single possible rule so if we look at
11:06 - hey rule 88 and again rule 88 is just
11:09 - simply the decimal representation of the
11:11 - binary number 88 which would be zero
11:13 - zero one zero one blah blah blah blah so
11:16 - but what are these patterns that are
11:18 - being drawn how does this relate to a
11:21 - one dimensional CA so the thing that I
11:23 - should mention that I think is really
11:24 - important is when you look at through
11:26 - visual representations of this stuff you
11:30 - will see a two dimensional image why is
11:32 - it a two dimensional image it's because
11:35 - the way we're visualizing it is we're
11:37 - stacking all the generations so it's
11:42 - really important to note that the system
11:44 - is a one-dimensional system this grid is
11:47 - one-dimensional there's a
11:48 - one-dimensional array of cells each with
11:50 - the state but if when we want to
11:52 - visualize the result and see what
11:54 - pattern we get what pattern emerges what
11:57 - we're doing is we're looking at all the
11:59 - generations stacked and the reason why I
12:01 - have belabor it lately but I'm just like
12:04 - saying this over and over again is
12:06 - because we really are going to look at
12:07 - something in a moment or in a future
12:09 - video which is a two dimensional CA the
12:12 - two dimensional CA is really a grid of
12:15 - cells and each state we're going to look
12:17 - at as a different frame of animation but
12:19 - this is one generation right in the 2d
12:22 - CA this is a single generation right
12:24 - here yes
12:25 - involve camera and this is a
12:28 - one-dimensional CA where each generation
12:30 - is a given row in this pattern so let's
12:34 - take a look and now if we go back to
12:37 - processing here we're going to see first
12:42 - of all I'm representing up here I'm
12:46 - representing the rules as an array so
12:49 - you can see this is rule 222 this is the
12:51 - binary representation of the number and
12:53 - the comments were showing the decimal
12:54 - 190 31 10 and 90 these are some rules I
12:57 - want to take a look at for the different
12:59 - Wolfram classifications so let's run
13:01 - this first one and we can see yes this
13:04 - is what you would expect and in addition
13:06 - to stacking the generations that I've
13:08 - talked about over here what I'm doing in
13:10 - this particular scenario is letting them
13:12 - scroll by so we can see this is
13:15 - uniformity all the cell's just ten
13:17 - the same state now let's look at
13:19 - repetition which what rule 190 is an
13:23 - example of and we can see this now it
13:26 - looks like I don't know if you maybe if
13:27 - i zoom in here a little bit you can see
13:29 - there are these kind of diagonal lines
13:31 - it looks like but you can cut we have
13:34 - some kind of a this is making me crazy
13:36 - we have we can see that it's black black
13:38 - white black black white black black
13:40 - white that's the pattern if you look at
13:41 - any given cell from generation to
13:43 - generation so how is this stuff being
13:45 - calculated so I want to look a little
13:48 - bit I'm going to switch here to the kind
13:50 - of simpler example which is just showing
13:52 - this is rule 90 I believe which is by
13:54 - the way kind of amazing that with this
13:56 - simple system what is this pattern this
13:58 - is the sierpinski triangle it's a
14:00 - fractal pattern which we're going to get
14:01 - into more in future videos or previous
14:04 - videos if you're watching these out of
14:05 - order ok so what's going on here the you
14:10 - know I just want to point out a few
14:12 - things one is that the the cells are
14:16 - represented as an array of integers so a
14:19 - given generation is an array of integers
14:21 - 0 1 0 1 1 0 1 whatever it is that is the
14:27 - array that is that generation this is
14:30 - not my best video ok this function here
14:34 - generate is the key function for how we
14:38 - get the next generation right if we have
14:41 - an array of cells right we have an array
14:43 - of cells which is this here what do we
14:47 - need to do to get the next generation we
14:49 - mean to make a new array we have an
14:50 - array of int for that one generation we
14:53 - need to make a new array events here we
14:55 - go we've got a new array of int and now
14:57 - what do we need to do for every single
14:59 - cell we need to say ok the next
15:02 - generations value is a function of the
15:05 - cell to my left i minus 1 the cell to my
15:08 - right I plus 1 and me I I have I over
15:12 - here is I minus 1 or by plus 1 and over
15:14 - here is I minus 1 or whichever way
15:16 - you're looking at this video ok once
15:18 - we've calculated for all the cells the
15:20 - next generation then the actual CA which
15:24 - is cells becomes that next generation so
15:27 - we're doing this goofy thing where we
15:29 - are
15:32 - where we are creating we have an array
15:36 - called cells we're creating a new array
15:41 - called next-generation right this might
15:45 - have some values in it we calculate the
15:48 - next generation values and as soon as we
15:51 - do that we say hey cells is now this one
15:55 - and then we make another new array
15:56 - called the next generation so every
15:59 - generation we make a new array calculate
16:01 - everything into the new array and then
16:03 - hey say cells is now that next
16:05 - generation with zeros 1 2 so we're not
16:07 - in this particular example we're not
16:09 - storing a history we only have the
16:11 - current generation the next generation
16:13 - which is something to think about
16:14 - depending on how you're using this ok so
16:18 - the last piece of the code here that I
16:21 - think we should look at is well what is
16:24 - this function this function is saying
16:26 - hey I need to get a value from my state
16:32 - that I let the but from that
16:33 - neighborhood my new state is a function
16:35 - of my neighbors States and if we go look
16:37 - at this function called rules if we
16:39 - scroll down now I've in this particular
16:41 - example I've kind of written this in a
16:43 - ridiculous way just to demonstrate
16:45 - what's happening if my cells are one if
16:47 - the states are 1 1 1 give me the first
16:50 - element from the array if they're 1 1 0
16:52 - give me the second element if they're 1
16:54 - 0 1 give me the third element right so
16:56 - with that rule set array remember which
16:58 - is the encoding for all of how the cell
17:01 - state change over time we're getting
17:03 - those results from the from from these
17:06 - configurations now in truth there's a
17:09 - simpler way to write this function which
17:10 - is that we could just convert the 3 bit
17:12 - number into an index into that array and
17:15 - you'll see in other of my examples in
17:17 - the repository it does that but I think
17:18 - this is kind of a nice way of looking at
17:20 - it at first to say like what is the next
17:22 - generations value based on three states
17:25 - I think you can see that ok so now that
17:30 - we sort of see how this works
17:32 - let's go back and just look at a couple
17:34 - more examples so we have we saw we saw
17:37 - uniformly we saw repetition I also
17:40 - pointed out that we can get a fractal
17:43 - pattern which we have to ask the
17:44 - is this is this repetition is this
17:46 - complexity interesting question to ask
17:48 - I'll let you answer that for yourself
17:51 - but or discuss in the comments comments
17:54 - or I still really this is like a 30
17:56 - minute video basically probably or here
18:00 - let's take a look at rules 30 whoops
18:03 - come on run so rule 30 is a wonderful
18:08 - example of a surprising result or at
18:10 - least a result that I when I first look
18:12 - at this kind of stuff found surprising
18:14 - which is that how this this rule these
18:17 - rules are so unbelievably simple and yet
18:19 - look at this complete and total
18:21 - randomness now I don't know you know how
18:24 - do we get random numbers out of this
18:25 - maybe we could look at there's all these
18:27 - kind of like little kind of triangular
18:29 - patterns forming maybe we could use the
18:30 - areas of those triangles or something
18:32 - like that but and you know if Tasker
18:34 - quit is this better than existing
18:36 - pseudo-random number generators
18:37 - generators that it's worse but the fact
18:39 - that we can see this completely like non
18:42 - repeating pattern from such simple rules
18:44 - that just you know all you can think
18:46 - about is that we're going to get
18:47 - repetition from them is is a really
18:50 - interesting result
18:51 - and at the same time we can also see
18:53 - just from these simple rules if we go to
18:56 - rule 110 we can see that we're going to
18:59 - get something that has the properties of
19:02 - a complex system it's unparliamentary
19:08 - with simple rules the result is ordered
19:12 - yet unpredictable intelligent there's
19:15 - lots to look at here so this I think is
19:18 - a pretty unbelievable result and I think
19:20 - is what makes working with CAS so
19:23 - enticing alright there's a lot more to
19:26 - kind of say or look at with these but I
19:29 - think that I'm going to I mean I'm
19:31 - definitely gonna stop this video and the
19:34 - next video we're going to look at the
19:35 - game of life which is a 2d CA and