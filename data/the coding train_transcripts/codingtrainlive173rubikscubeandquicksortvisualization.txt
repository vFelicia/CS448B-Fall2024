01:12 - hello good morning and welcome to the
01:15 - coding train it is a Wednesday it is
01:18 - 10:30 in the morning here in New York
01:19 - City and I am your host Dan Schiffman
01:22 - live here on my YouTube thing that
01:25 - apparently is what I'm doing with my
01:26 - life
01:26 - oh one portion of my life that is at
01:30 - least so I'm really excited to be here I
01:32 - was not here last Wednesday last
01:35 - Wednesday was spring break at New York
01:37 - University where I work it's my day job
01:39 - and actually where I am broadcasting
01:42 - from right now so I missed last
01:45 - Wednesday but I'm here again this
01:46 - Wednesday and for the foreseeable future
01:48 - for the next month or two Wednesday
01:50 - mornings eastern time will be the time
01:52 - of the coding trade so what are you
01:53 - watching
01:54 - you're watching a person me Dan Shipman
01:57 - who comes live on the internet to code
01:59 - stuff and I am really excited about what
02:01 - I'm going to do today because I have a
02:02 - new obsession I even have this oh no
02:06 - wrong key I even have this set up here
02:09 - which is that I my son I have two
02:12 - children a daughter who's seven and a
02:14 - son who is 10 and my son has recently
02:17 - gotten into learning to solve Rubik's
02:19 - Cube and we've mostly been working with
02:20 - the 2x2 Rubik's Cube which seems like
02:23 - that's the starting point like wouldn't
02:25 - that be easier than 3x3 I find that 2 by
02:27 - du cube but I have learned I need to
02:32 - solve a 3x3 rubik's cube i started
02:36 - trying this over the weekends probably
02:38 - saturday or sunday I think my record
02:41 - time there's like 25 minutes or
02:43 - something and I even still have to refer
02:45 - to a little cheat sheet or some
02:47 - algorithms that I've written down but I
02:50 - would like to get better at this I'm
02:51 - really enjoying it I can't believe that
02:53 - I'm 45 and I never picked up really a
02:56 - Rubik's Cube until home last weekend
02:58 - because it's clearly the kind of thing
03:00 - that I'm into so I don't worry I'm not
03:02 - gonna sit here and try to solve the cube
03:04 - live although some of you might actually
03:06 - enjoy watching that what I am going to
03:10 - do is try to program a simulation of the
03:14 - cube in processing in 3d so I'm going to
03:16 - create a 3x3 grid of box objects each
03:22 - with different faces and each of
03:23 - face is having a different color and
03:25 - then I'm gonna have to figure out how do
03:26 - I apply these rotations and move the
03:28 - pieces around I really would like to
03:30 - eventually make a coding challenge about
03:32 - solving the cube itself but first I
03:37 - think it's actually going to be quite a
03:38 - difficult thing to just make the cube
03:39 - simulation in the first place
03:41 - so that's that's the main topic of today
03:44 - I'm just looking in the chat here let me
03:48 - pull up oh I'm I don't have the slack
03:51 - channel so I'm gonna open up my slack
03:55 - job so if you're wondering it's often
03:56 - referred to as a slack channel the slack
03:58 - channel if you would like to become a
04:00 - member of the coding train or joined via
04:01 - patreon you will get a slack invite the
04:04 - other reason why I bring that up is
04:05 - because I am working on I am working on
04:11 - a new playlist of content called data
04:14 - and eight working with data and api's in
04:16 - JavaScript and I have actually recorded
04:20 - video tutorials for all of this content
04:22 - so far one a the fetch function I've got
04:25 - a parsing a CSV file making a line chart
04:28 - with chart touch yes jazz those videos
04:30 - will be coming out sometime soon but
04:31 - I've decided actually for this new
04:33 - experiment I'm recording these not
04:35 - during the live stream so I'm kind of
04:37 - doing double-duty here actually we did
04:38 - this on Monday and so another benefit of
04:41 - signing up to be a member or patreon as
04:44 - I will share you share with you this
04:45 - content a little earlier as I'm kind of
04:47 - putting it together because there's a
04:48 - bit more post production which is really
04:51 - unlike me but thanks to the talents of
04:53 - coding terrain editor extraordinaire
04:55 - Mattia we're doing some more post
04:56 - production stuff with this content so a
04:58 - lot of it is actually just with me on
05:00 - the green screen talking about concepts
05:02 - and then we animate stuff after the fact
05:04 - I kind of want to show you two of the
05:07 - examples I don't actually mmm if bear
05:10 - with me for a second
05:11 - [Music]
05:23 - all right I want to show you the
05:26 - examples so this is one of the examples
05:29 - that I'm going to be walking through how
05:30 - to do in this tutorial this is a an SS
05:34 - snake is mentioning code bullet which I
05:36 - will reference definitely this is global
05:41 - average world temperatures from compiled
05:44 - by NASA the Goddard Institute for Space
05:46 - Studies ss I forgot what that stands for
05:49 - GIS s GISS you know I was right Goddard
05:55 - super Space Studies this is global Earth
05:57 - temperatures from 1880 to 2018 graphed
06:01 - parsing a CSV using chart touch a s and
06:03 - then the other example which is quite
06:06 - similar things that I've done before is
06:07 - this is the location of the
06:09 - international space station in latitude
06:11 - and longitude on top of a map built with
06:15 - a map is coming from leaflet touch a s
06:17 - and if I program this correctly it
06:22 - should be moving well maybe there's a
06:25 - bug in my code I haven't made this video
06:27 - tutorial yet but the goal of this
06:28 - example is to have it refresh and move
06:31 - all right so that's coming I'm working
06:34 - on that stuff
06:35 - if you want to follow along with the
06:37 - examples and the sort of syllabus for
06:39 - this playlist all of that is here a
06:41 - shout-out thank you to Joey Cayley who
06:44 - is helping prepare materials for this
06:46 - second and third module of this course
06:48 - that I'm gonna publish a one you got
06:51 - starting to use node and databases and
06:53 - stuff like that so it's gonna be
06:54 - exciting
06:55 - all right now now what am I to know
06:57 - something else that's new coding train
06:59 - welcomes a new sponsor for today's a
07:01 - live stream and by sponsor I actually
07:03 - mean a sponsor not my joke about h2o
07:06 - thank you to brilliant org you can I
07:09 - think if I you can sign up for free at
07:12 - brilliant org slash coding train and
07:14 - also as a benefit for if you want to buy
07:16 - premium access the first 200 subscribers
07:18 - who sign up will get 20% off so I'm
07:20 - going to come back and talk about
07:21 - brilliant org a little bit later it's a
07:24 - really amazing website to practice
07:26 - and learn a lot of math and science
07:29 - stuff so many things that I do on this
07:32 - channel there are and actually I was in
07:34 - looking at it over the last few days I
07:36 - was like oh there's a whole module on
07:38 - there unsorted algorithms remember that
07:41 - live stream I had a month or two ago
07:43 - where I did the quicksort and I totally
07:45 - failed and you might not notice that no
07:47 - published video ever came out about the
07:49 - quicksort well that's because it didn't
07:52 - work out but I'm gonna try that again
07:53 - today in addition to the Rubik's Cube
07:55 - I'm gonna try doing the quicksort I was
07:56 - reminded by it by looking at brilliant
07:58 - org and reading their tutorials and
08:01 - quizzes about the quicksort got my head
08:03 - thinking about it I figured it out and I
08:05 - think I'm ready to code it today so I'll
08:07 - come back to that my plan is start with
08:09 - the Rubik's Cube take a break do the
08:12 - quicksort I'll say I'll give you a
08:14 - chance to sign up for brilliant org
08:16 - during that time and then I will come
08:19 - back and finish the rubik's cube all in
08:21 - the next two hours what could possibly
08:25 - go wrong nothing could possibly go wrong
08:28 - I have papers today I have papers with
08:30 - me I have my algorithms I have some
08:35 - information about brilliant org to help
08:37 - me remember the things that I want to
08:39 - say about it and here we go all right oh
08:44 - but before I do any of that let me do
08:47 - what I like to do as my opening segment
08:49 - here on the coding train which is look
08:51 - at stuff that you all have made so my
08:54 - most recent video that have been
08:57 - published the edited versions of the
08:59 - livestreams were all about the number pi
09:01 - pi day so I did this video about
09:05 - counting the digits of pi through
09:07 - colliding blocks and this was all based
09:09 - on the work of three blue one brown eye
09:11 - the Leibnitz formula which is an
09:13 - infinite series fractions that you can
09:16 - use to approximate PI I did a video on
09:18 - that and this other weird video about
09:21 - counting the number of iterations at a
09:23 - certain point in the complex plane in
09:24 - the Mandelbrot set and arriving at the
09:27 - digits of pi so people have submitted
09:29 - their own versions of these no one has
09:31 - submitted a Mandelbrot community
09:33 - contribution yet so you could be the
09:35 - first you watching this right now could
09:37 - be the first person to submit but I'm
09:39 - let's take a look at
09:40 - look at the pie de collisions and the
09:42 - Leibnitz formula ones so here we go
09:46 - let's look I'm just gonna kind of click
09:47 - through these so we can see them this
09:48 - one is fast p5 implementation by matei
09:51 - Adria I remember mattei was in the chat
09:54 - giving me lots of advice so I think what
09:56 - matei so we can see you okay we got we
09:58 - approximated three with a mass of 1
10:00 - let's try 100 we should get 31 there we
10:04 - go
10:04 - 10,000 we should get 314 I'm missing the
10:09 - clack-clack we want the clack so we can
10:13 - see this works now I I would have to dig
10:15 - into the code and I would recommend that
10:17 - you do this - I think if I recall
10:19 - correctly that there are some
10:21 - optimizations in this particular code
10:23 - that that make it run faster you notice
10:25 - the mine really slowed down Chuck to a
10:27 - halt once I got to a certain number of
10:29 - digits okay thank you for that let's
10:32 - look next at Oh processing versus was
10:34 - big decibel by Daniel mmm sheath Mon
10:39 - interesting I think I'll skip that one
10:41 - because it's in processing and I can't
10:43 - easily run it animation without using PI
10:46 - huh what's that so this is the same oh I
10:50 - like this so this is nice to be able to
10:52 - visualize the actual velocity values and
10:55 - many people point out you should read
10:56 - the comments on my video as many people
10:58 - pointed out you don't need this
10:59 - animation at all it's all just about
11:01 - exchanging the velocities and so you
11:03 - could actually do this counting
11:05 - calculation without without the
11:08 - animation and then I remember this one
11:11 - I'm very excited to show you pi
11:12 - collisions visualizing optics by Anurag
11:15 - Hazra so this one is really wonderful
11:17 - because in the three blue one Brown
11:19 - video series and the third part grant
11:22 - references how you can make a
11:24 - calculation of the number of collisions
11:26 - based on a ray of light bouncing in this
11:29 - slice of pie so to speak and nuraghe
11:33 - visualizes this in this one so you can
11:36 - see this we don't we can see this is
11:38 - representing the array of light and each
11:41 - bounce so we got well I don't know what
11:47 - just happened there oh yeah we've got
11:49 - three one four one four collisions I
11:52 - don't know what that number is
11:55 - and so that's cool so I can let me add
11:56 - two more two more zeros to get 1 million
12:03 - oh we have the clock I didn't hear the
12:06 - clock before you gotta love that so
12:12 - beautiful all right okay so that's great
12:16 - and the source code is right here I love
12:18 - how people are adding interface elements
12:20 - let's take a look at the liveness ones
12:23 - there are a bunch of these we see
12:25 - another one by Anurag here my
12:29 - interactive version of the Leibniz
12:30 - formula for pi by Sahil Khattar cat
12:34 - coyote and I I'm I've really got to work
12:37 - on something someone if you ought to be
12:38 - an amazing tool I should have people
12:41 - when they submit their coding challenges
12:43 - to also like submit a little audio file
12:46 - of than pronouncing their name because I
12:48 - don't like mispronouncing people's names
12:50 - and oh this is nice so this is a much
12:52 - nicer design of the page you can scroll
12:54 - Scroll in to zoom in and out on the
12:56 - graph I'm not sure how that works
13:00 - exactly you can change the speed and we
13:04 - can see the source code here restart
13:05 - with a button I love that wonderful and
13:07 - I just love you know the beautiful digit
13:09 - pie right there great work but display
13:12 - the average of the last two iteration so
13:15 - this is a really smart way of doing it
13:16 - because the average of the last two
13:18 - iterations right it's the approximation
13:21 - is also always oscillating around around
13:25 - the number pie itself so we can see this
13:28 - is a nice we can see how by looking at
13:31 - the average of the last two oscillations
13:33 - the last two values that's really are
13:35 - sort of more pure approximation of the
13:38 - number pi okay and I think we've got one
13:40 - more two more to look at another by
13:42 - Anurag we did some clever different ways
13:46 - of visualizing the theories what I love
13:48 - these woo I'm having something like
13:50 - Fourier flashbacks here beautiful work
13:52 - and the circle display I haven't looked
13:55 - at this one Oh interesting
13:57 - oh look at this what is going on here is
14:00 - this some kind of this just show this is
14:02 - maybe showing me what the digits are
14:03 - three one four oh I love that so nice
14:08 - a visualization idea about how to
14:11 - represent the number pi or at least the
14:14 - current approximation and where it's off
14:15 - by colored circles great work that's a
14:18 - very creative idea okay
14:20 - all right so now look at me I'm so like
14:26 - organized today I'm gonna do I'm gonna
14:27 - I'm gonna open up processing I'm going
14:31 - to find my way into the chat here okay
14:45 - and alright so sorry I'm looking at the
14:51 - chat let me get set up here
14:52 - [Music]
15:03 - don't wanna mess it up because I want to
15:06 - be able to have business a reference so
15:22 - high-tech today
15:23 - [Music]
16:13 - [Applause]
16:14 - [Music]
16:15 - [Applause]
16:16 - [Music]
16:21 - [Applause]
16:23 - [Music]
16:32 - [Music]
16:43 - oh I didn't realize that I didn't
16:58 - realize that code bullet I know I've
17:00 - seen the code bullet video on solving a
17:04 - Rubik's oh no this is it
17:08 - this this must be the video that I
17:10 - watched right I know I'm confusing
17:15 - myself I don't think I think that code
17:17 - bullets video doesn't so here's what
17:20 - record scratch this is what I'm
17:23 - interested is a thought experiment could
17:26 - I use neuro evolution could I take the
17:30 - current configuration of a Rubik's Cube
17:32 - and have its its configuration be the
17:38 - inputs to a neural network and then the
17:40 - move there's really only certain number
17:42 - of moves forward you know forward
17:45 - clockwise counterclockwise backward kept
17:47 -  boys counterclockwise up clockwise
17:49 - counterclockwise bottom kind of
17:51 - clockwise right clockwise
17:54 - counterclockwise left clockwise
17:56 - counterclockwise how many is that
17:58 - six there's really only certain um six
18:00 - times two 12 whatever no yeah something
18:02 - like that anyway the point is could I
18:06 - use a neural network to decide what move
18:09 - based on the current configuration now
18:12 - this would typically be solved with
18:13 - reinforcement learning some type of
18:15 - policy reward system and there's
18:19 - actually I quit Google search last night
18:22 - I found a paper for someone who had
18:24 - solved Rubik's Cube using a neural
18:26 - network and reinforcement learning and
18:27 - the reward system was based on actually
18:30 - starting from the solve cube and trying
18:32 - to like find a configuration backwards
18:34 - similar to where you currently were but
18:38 - I I would be interested in trying the
18:40 - neuro evolution technique to just
18:42 - basically like make a bazillion random
18:45 - neural networks and see how they do
18:46 - after a certain amount of time the
18:48 - question is how do I evaluate how close
18:52 - they got to the final solution and I
18:55 - think I could do that in some ways
18:56 - I like counting the number of the number
19:00 - of pieces that are in the correct place
19:02 - that could be a score so I'm interested
19:05 - in trying to do that but before I can
19:06 - even do that I need to just make a
19:08 - Rubik's Cube simulation so I'm not doing
19:10 - any of the AI stuff today if I'll be
19:13 - happy if I can see the Rubik's Cube on
19:14 - the screen and I can apply like at least
19:16 - like one move to it that's kind of my
19:18 - goal for today the middle move yeah it's
19:23 - the middle move a move like so because
19:25 - the middle move if I do this this is
19:28 - this discussion was coming up the other
19:30 - day if I'm so bad at this if I do this
19:33 - ah
19:34 - that was like the middle
19:35 - counterclockwise but isn't that the same
19:39 - as bottom clockwise top clockwise so
19:42 - really the middle is just a two other
19:45 - moves in sequence yeah yeah you can
19:49 - score the progress okay thank you so the
19:51 - people so if you have ideas for this
19:54 - let's talk about it so I'm going to get
19:59 - started I'm gonna use processing I've
20:03 - got my cube and I think I'm just gonna
20:09 - begin put the Rubik's Cube on top of
20:13 - green paper turn on chroma key and then
20:16 - you can only show the Rubik's Cube ooh
20:20 - that is a clever idea I will consider
20:22 - that in future coding train episodes and
20:31 - pretend that I'm solving it aha
20:39 - that was completely faked by the way
20:41 - welcome to a coding challenge on the
20:45 - coding train Rubik's Cube
20:47 - so we try that again
20:53 - what would be like what's I'm gonna get
20:59 - my sequence down
21:04 - aha so that was fake um welcome to who
21:09 - he was already solved welcome to Cody
21:11 - challenge on the Kota Train Rubik's
21:14 - cubes so today a while back in April
21:17 - 30th 2018 Neil's Webb suggested a
21:20 - Rubik's Cube solver using a neural
21:21 - network by the way this is the greenside
21:24 - it's not the white side see okay and I'm
21:29 - really interested in this and I actually
21:31 - picked up a Rubik's Cube over the
21:32 - weekend I've been learning to solve it
21:34 - it takes me at least a half an hour but
21:37 - I do do it I don't have to watch a video
21:39 - while I'm doing it I did have to watch a
21:41 - bunch of videos to figure it out I'm
21:42 - getting off topic and but I really want
21:45 - to explore this idea what types of AI
21:47 - machine learning algorithms can I apply
21:50 - to solve a Rubik's Cube
21:52 - this will be interesting to try at some
21:53 - point on the channel but there's a lot
21:56 - of steps I need to get to before I can
21:57 - get there so what I'm going to start
21:59 - with today is just actually creating a
22:01 - Rubik's Cube simulation Simon Tiger also
22:04 - posted an issue showing all the
22:06 - different kinds of Rubik's cubes
22:08 - configurations that are out there
22:09 - apparently there's this 28 by 28 by 28
22:11 - one I have some of these at home they're
22:13 - super fun to play with anyway but so and
22:18 - so let me close all this stuff out I
22:19 - should also reference code bullet code
22:22 - bullet is a YouTube channel that has
22:23 - many different coding exciting
22:26 - adventurous topics and code bullet has a
22:30 - video using a particular algorithm to
22:33 - solve a rubik's cube then makes a giant
22:35 - rubik's cube so if you want to get the
22:38 - 16 minute version of everything that's
22:40 - gonna take me the next 700 days to
22:42 - figure out in one video and be
22:45 - entertained I would definitely recommend
22:46 - the code bullet one
22:47 - alright so closing that out I'm gonna
22:49 - start here in processing I'm gonna hit
22:51 - save and call this Rubik's I don't know
22:57 - Rubik's Cube why not put it on the
22:59 - desktop
23:03 - what's my first step processing if
23:08 - you're not familiar is a Java based
23:10 - development environment for creative
23:12 - coding images animations all sorts of
23:14 - stuff I use it a lot on my channel I'm
23:16 - pretty sure that's what code bullet used
23:18 - for for his Rubik's Cube I'm gonna add
23:21 - the set up and draw functions I'm gonna
23:23 - add a window that's 400 by 400 and I'm
23:27 - gonna put in P 3d so P 3d I definitely
23:31 - need to use a 3d render because I'm
23:33 - gonna represent the Rubik's cube in
23:35 - three dimensions so what do I need
23:38 - let's make I have an idea let's make a
23:42 - I'm gonna call let's make a class called
23:45 - box I'm gonna call each one of these
23:47 - little little cubes inside the larger
23:50 - cube each cell of this 3x3 grid I'm just
23:52 - gonna call it a box and so I need a
23:57 - constructor and I need to know where is
23:59 - it well this I need to know its index in
24:02 - some type of like maybe
24:03 - multi-dimensional array but for drawing
24:05 - and I really just need to know where it
24:07 - is in the virtual 3d space so let's when
24:10 - I create it let's give it an X a Y and a
24:14 - Z and then also I need a sort of side
24:17 - length so I don't know whether I need
24:18 - the full side length or a half length
24:20 - that's kind of like a big swing it's
24:22 - good to come up but let's just assume
24:23 - right now that I initialize it with a
24:25 - full side length and then I'll use a P
24:31 - vector a vector object for the position
24:33 - and a float for that side length let's
24:38 - just call that side I'll call that
24:39 - length and I use an underscore here to
24:43 - make this a different variable name so
24:44 - now I'm just a position is a new P
24:46 - vector XY Z and the this needs a
24:51 - semicolon here and the length is equal
24:55 - to this so then I'm gonna I'm gonna
24:58 - write a function called show and I'm
25:01 - just here I'm gonna say push matrix
25:04 - which saves the transformation states
25:07 - pop matrix which restores the
25:10 - transformation state oh my god what's a
25:12 - transformation state you might be asking
25:14 - so I'll
25:15 - what it is what I need to do is I need
25:17 - to say translate to position x position
25:20 - Y position Z this is basically
25:23 - positioning what I'm about to draw this
25:26 - box with this length at this position
25:29 - and I'm feeling people who are watching
25:32 - this live in the chat are telling me
25:33 - this isn't gonna work because I need to
25:35 - color this different face spaces
25:37 - differently I'll get there I mean I have
25:39 - to get there at some point but let me
25:41 - just use the processing box function
25:43 - which will just put a box right there so
25:45 - in order for each boxes translation to
25:48 - not affect the others that's what push
25:50 - matrix and pop matrix does and I'll put
25:52 - something in this video's description
25:53 - two more about matrix transformations if
25:55 - that is new topic for you alright let's
25:59 - just say fill 255 stroke zero stroke
26:05 - weight eight and then I have this box
26:10 - class so now I need to make a cube
26:13 - object it's not really cube are you
26:15 - gonna make it a right now I couldn't
26:16 - make a cube class I probably should but
26:19 - just for simplicity right now let me
26:20 - make a three dimensional array four rows
26:24 - columns and what's the other one I don't
26:27 - know if you have a third one it's the
26:28 - the z-axis I suppose and this is going
26:32 - to be let me make a variable called like
26:34 - dim four dimensions because in theory if
26:36 - I do this right we could just change
26:38 - that one variable I have a much bigger q
26:40 - equals new box which is dimensions
26:47 - dimensions by dimensions by dimensions
26:51 - then I'm going to say I'm going to do a
26:54 - triple nested loop with i IJ K IJ K IJ K
27:04 - IJ K and then I am going to say cube
27:15 - index i j k is a new box at some x y&z
27:25 - with some side length okay so how do I
27:29 - this out if this is going to be at zero
27:33 - zero zero this is going to be at 1 0
27:37 - zero if I go down here I'll be at like 1
27:40 - 1 zero back maybe the last row anyway
27:43 - you get the idea it's like a grid but
27:45 - with another dimension I think I'm doing
27:47 - this right so but I need a side length
27:49 - let's just make that up right now
27:50 - length is let's say it's 10 so the X
27:53 - would be length times I though and the Y
28:00 - would be length and I might have my axes
28:03 - wrong but whatever I call XY and z axis
28:06 - whatever they're all just different axes
28:08 - ijk and so I'm going to say box X Box Y
28:13 - box Z I'm ex y z and then length and
28:17 - then I mean there's no way this is right
28:22 - like how could I possibly get oh I need
28:24 - another curly bracket and then now if I
28:28 - grab this for a loop and I put it in
28:30 - draw but all I say now is cube ijk so I
28:36 - almost want to keep these in another
28:38 - array that's just a one-dimensional
28:39 - array for simplicity but let's see how
28:42 - this goes hey look that's kind of like
28:48 - the rubik's cube ething up there in the
28:50 - corner so one thing I want to do I
28:52 - definitely want to do is I want to add
28:54 - well I want to first give it a
28:56 - background background 200 like 1 I'd use
29:02 - my number 51 and then I probably want
29:04 - the side lengths to be much bigger and
29:07 - let's just run this again you can see oh
29:10 - it's sort of up there and I think I need
29:12 - a larger space here so I need to
29:17 - position it in the center so I can
29:20 - actually see it and there's a variety of
29:22 - ways of to do that I could just
29:23 - translate to the center but I'm gonna
29:24 - use a library I think I haven't
29:26 - installed import library I don't this is
29:28 - great I'm using a library called PZ cam
29:31 - and I'm going to hit install peezy cam
29:34 - for a processing easy camera is a way a
29:37 - library that allows you to very quickly
29:39 - get a mouse camera interaction where I
29:41 - can spin around a three
29:42 - scene in processing I've used it in
29:44 - other videos before so I think if I just
29:46 - say PZ cam cam
29:49 - and then if I say something like cam
29:51 - equals nu P Z PZ thank you - Jonathan
29:55 - Feinberg who created this library PC cam
29:58 - this and I forget this is something to
30:00 - do with like how sumed out or zoomed in
30:02 - it is Oh import I need to import the
30:05 - library which I can do automatically
30:09 - like this import library PC cam was it
30:13 - there and I just didn't see there ah
30:17 - there we go look look
30:20 - thank you know there's a lot more to do
30:23 - here but look at this that kind of looks
30:25 - like a ruby see now it's rotating around
30:27 - its little like corner there I want it
30:29 - to rotate around the center so what I
30:31 - need to do is I need to have an offset
30:32 - and the offset is going to be half of
30:37 - the full width so the full width is
30:40 - dimensions times length and then if I
30:43 - divide that by two so if I then subtract
30:45 - out the offset that should give me our
30:50 - nice little cube no that's not right Oh
30:53 - because but here I think this is my like
30:57 - off by I think the Box function is
31:01 - probably using the half width but then
31:06 - that'll be off now no that that's not
31:08 - right Oh what have I done I think I have
31:11 - this off by dividing by two I think
31:14 - about this
31:20 - we look at the box function okay I'm
31:30 - looking at I'm looking at the box
31:31 - function dimension of the box in the X
31:34 - dimension dimension of the box so it
31:37 - doesn't really say whether it's half or
31:38 - full width I can assume it's full width
31:40 - that would be the processing way Oh No
31:45 - yeah no dimensions times length divided
31:48 - by 2 why did that not work
31:59 - they're called I'm being told by the way
32:00 - these are called cubies 4x4 what did I
32:06 - miss here box is made from the corner oh
32:09 - the box is made from the core know that
32:12 - the each one I think box is made from
32:14 - the center right I mean it looks like
32:23 - it's off by just this amount but this
32:24 - doesn't make any sense
32:25 - time is it by the way yeah so that's
32:32 - right why why
32:47 - hold on
32:53 - if this is zero this is 10 and this is
32:59 - 20 it could be like this or it could be
33:12 - like this right where this is 0 10 20 so
33:22 - here I take dimensions which is 3 times
33:26 - length which is 10 which equals 30
33:29 - divided by 2 is 15 0 10 20 by 2 is 15 so
33:38 - if I offset everything by 15 then in
33:43 - this case it is at negative 15
33:51 - just like here and then negative and
33:58 - then negative 5 and then
34:03 - oh yeah that's wrong and then so it must
34:07 - be drawn from the corner the box is
34:09 - drawn from the corner and then if but I
34:14 - thought it was drawn like this in which
34:16 - case it would be at negative 15 would be
34:20 - the middle and this would be perfect
34:24 - oh but that's zero there oh yeah I need
34:33 - to shift it over because I want the
34:35 - because it's odd maybe yeah because it's
34:39 - not an even number
34:53 - remove length is there a box mode Center
35:01 - you're removing it as if it were drawn
35:03 - from the corner yeah exactly which would
35:06 - be right I'm moving it as if it were
35:08 - drawn from the corner it's actually
35:10 - drawn from the center okay thank you
35:15 - all right here all right here's the
35:19 - issue I actually just made a little
35:20 - diagram if the box these are just two
35:24 - dimensional rectangles were drawn from
35:25 - the corner like they are in rectangles
35:28 - but 2d rectangles in processing this
35:30 - would work because I'm just shifting
35:32 - everything over and the middle one is
35:34 - but their axes the middle one is now
35:36 - placed in the center because I'm
35:37 - shifting over by the total width is 30
35:40 - I'm shifting over by 15 we've got half
35:42 - here half there but they're not they're
35:43 - actually drawn from the center so by
35:45 - shifting them over I end up with the
35:48 - first two on one side and the other so I
35:50 - actually need to shift it I need I need
35:52 - I'm there's that there's a half of a
35:54 - length that's incorrect
35:55 - so there's probably a smarter way to fix
35:58 - this formula but right now I'm just
36:00 - gonna add another half length here
36:05 - and/or the offset actually that's that
36:08 - silly I should really add it in the
36:10 - offset so length divided by 2 plus this
36:13 - and now we should have oh no - and you
36:26 - shift it over but it's in the offset is
36:28 - the offset is a little bit less
36:30 - dimensions minus 1 that's the issue hold
36:34 - on everybody this is so silly
36:39 - change this to 0.5 and this is actually
36:42 - dimensions minus 1 times length and then
36:47 - half of that and now we should have it
36:51 - there we go
36:52 - there's my Rubik's Cube in the center
36:54 - all right and I'm being told by the way
36:56 - that these are called
36:58 - ruby's so I'm gonna change that class QB
37:02 - QB + QB QB + QB so step one is complete
37:16 - but as you'll see if we look at this
37:20 - whoops if we if we look at this Rubik's
37:22 - Cube each face has a different color
37:24 - there are only six colors there's white
37:26 - red well two white on the top yellow on
37:30 - the bottom and then red blue orange and
37:33 - green so let me make let me make an
37:37 - array with those colors I think what I
37:42 - can do is just say there's a data type
37:45 - in processing called color it's actually
37:46 - just an integer and I'm going to let's
37:50 - come up with an order I'm gonna say top
37:52 - bottom I don't know if this is a good
37:55 - order to do but top bottom I'm gonna
37:59 - think of the top as always white so top
38:02 - bottom and then right left front back
38:06 - right left front back and I know there's
38:11 - like actual rubik's cube notation and
38:14 - I'm probably getting that a little bit
38:15 - up I think it's actually not top out if
38:17 - it's up down up down right left front
38:20 - back so let's try that so the colors are
38:24 - four up is white and I'll do that in hex
38:29 - down is yellow what's yellow does
38:36 - anybody know the hex colors for all of
38:38 - the Rubik's Cube
38:47 - use the right hand rule for the order
38:49 - what's that bottom is white okay
38:51 - I mean bottom is white up down right
38:57 - left B F up down okay god I've got
39:04 - kuber's in the audience here yellow is
39:06 - up down is white wait so the up this is
39:15 - yellow this is down Matt - I think we
39:18 - can edit this part out we'll just I'll
39:20 - just come back to it red okay wait hold
39:25 - on
39:26 - so if up is yellow down is white right
39:31 - is green left is blue whoops and front
39:43 - is front is red and back is orange Wow
39:50 - orange orange is just like less green
39:56 - something like that I probably do this
40:05 - new int well I don't have enough just
40:14 - missing do I need the new end thing or
40:16 - will it be fine let's break this up
40:26 - okay up down
40:38 - the colors are not represented correctly
40:46 - white up green front okay white up green
40:50 - front is I'm being told oh there's video
40:52 - very serious about that Rubik's Cube
40:54 - stuff by the way as a bonus anybody
40:56 - sticks around to the end of the
40:57 - livestream I'm hope scramble this and
40:59 - try to solve it that'll sure be very
41:01 - entertaining and very embarrassing wait
41:07 - is top green is front okay
41:09 - so white oh and this should be top
41:18 - bottom I don't want to say top or bottom
41:21 - up or down I'm gonna say up and down so
41:25 - top is white down is yellow so then
41:30 - front right left back a front front back
41:37 - so front is then green back is blue
41:47 - right is red and left is left is orange
42:03 - is that orange I don't know up and down
42:08 - okay
42:10 - what is bottom people are very upset
42:13 - about whether white is the top or the
42:17 - bottom alright let's let's phone a
42:26 - friend
42:34 - no strawpoll I don't like this one white
42:41 - is on a cube on a cube white is top
42:49 - bottom and then create pole
42:54 - alright everybody there you go
42:57 - which is it I will emerge or ax T will
43:01 - rule here FF a500 is good for orange
43:07 - thank you
43:09 - FF a500
43:13 - I can always change this later that's
43:16 - what's great about programming up yellow
43:20 - down Y ok well Simon I've Simon is
43:22 - generally the voice of reason here so
43:29 - people are really this is almost like
43:32 - which which programming language is
43:34 - better a kind of discussion results for
43:39 - votes it stop Simon is really
43:45 - specifically saying it's the well the
43:50 - bottom can't be orange if the top is
43:52 - yellow Oh down ob is back down is right
43:58 - yeah yeah so confusing
44:01 - ok all right I'm gonna keep going I will
44:07 - I will change it later if need be
44:13 - let me see if I can show this draw pull
44:17 - link there you go
44:26 - check Wikipedia alright alright boy not
44:30 - really losing time here Rubik well sort
44:39 - of drawn here with white on the top but
44:43 - does that mean it's the top in when
44:46 - you're if you're like solving it by the
44:51 - way this would be interesting to just
44:52 - show it this way right back up down left
45:01 - right yes I know all this I know all
45:06 - this you know all this alright I have to
45:17 - give up here it really doesn't matter
45:19 - for the purpose of what I'm doing I'm
45:24 - gonna have white be the top for right
45:27 - now when I'm gonna check the results
45:29 - yeah very close but I'm gonna use white
45:32 - as the top for right now just for right
45:34 - now we can always change it okay
45:39 - all right I've returned and I've now
45:42 - finished off this array wait let me let
45:44 - me do that again
45:45 - or head back I finished off this array
45:48 - with the colors in the order of up and I
45:50 - know there's some disagreement as to
45:51 - whether yellow is the top or white is
45:54 - the top I can sort that out later but
45:55 - for right now I'm gonna say white is the
45:57 - top Green is the front so white is the
46:01 - top yellow the Bob but green is the
46:03 - front blue is the black blue them over
46:07 - time here
46:16 - okay okay I'm back I finished off the
46:22 - colors for this array and I'm using the
46:24 - order up down right left front back and
46:28 - I am just right now using the convention
46:30 - as white being on the top and I know
46:32 - there's some different ways of looking
46:33 - at the cube you can think of yellow as
46:35 - the top and white is the bottom but I'm
46:37 - gonna use yellow at the top and green as
46:39 - the front so I have these colors so how
46:42 - do I then apply these colors to the
46:45 - different faces of these little cubes
46:49 - it's like that's like the greatest thing
46:51 - I learned today so unfortunately I will
46:55 - not be able to use this box function
46:57 - anymore however I can use my own begin
47:03 - shape and shape so what I really want to
47:06 - do is I want to instead of what I really
47:18 - want to do is instead of all right one
47:26 - side sometimes when I lose my momentum I
47:27 - can't get it back
47:38 - what I want to do is instead of just
47:41 - using the Box function to draw the full
47:44 - three-dimensional QB I just need to use
47:46 - quads I can use four quads I can you
47:49 - probably just rectangle function or
47:51 - different things but I could do one
47:52 - qualta more than four I need to do six
47:54 - one quad another quad another quad
47:58 - another quad and another quad now of
48:01 - course if we look at the actual cube
48:03 - itself each of these corner pieces you
48:06 - can only see three phases the middle
48:09 - piece you can only see one the I figure
48:13 - out what these are called corner middle
48:15 - whatever these other pieces in the
48:18 - middle on the top you can only see two
48:19 - faces but I'm just gonna do all the
48:22 - faces for each QB we can we can we can
48:24 - optimize later if need be so let's just
48:26 - do one so in other words if I say begin
48:29 - shape quads then I can create the vert
48:34 - and then let me just say the R equals
48:38 - length divided by two so now I'm going
48:42 - to take that side length and divide it
48:44 - by two because I want to set the
48:46 - vertices offset from the center negative
48:49 - R plus R negative R plus R so I should
48:51 - be able to do for the first one vertex a
48:54 - negative negative R negative R zero and
48:58 - I'm gonna keep the Z at zero for this
49:00 - first one and then so let me just
49:03 - diagram this right if this is what I'm
49:06 - doing this is you know negative 1
49:09 - negative 1 this is 1 negative 1 this is
49:13 - 1 1 and this is a negative 1 1 so
49:17 - basically I just need to set all of
49:18 - these vertices to draw that quad and the
49:23 - negative RR it was our negative r r r- r
49:30 - r and now if we run this we should see
49:36 - whoa what did I just do so first of all
49:42 - oh you know what I'm doing I'm still
49:45 - drawing the box yeah take out that box
49:48 - thank you very much
49:50 - and there we go we can see a mite and we
49:53 - can see now I have just those front
49:55 - faces so all I need to do is do exactly
49:59 - the same thing I just need to do six of
50:00 - these so with different with different
50:03 - axes so if I put 0 0 0 0 0 0 0 0 and
50:11 - take that basically take the 0 off of
50:14 - the Z now I have got oh wait a second
50:22 - this is not right it's kind of
50:25 - interesting though how because now I
50:27 - actually wanna whoa I forgot that PZ cam
50:32 - does this oh what did I do wrong here
50:46 - create a function that draws a quad by
50:49 - passing a normal vector oh that's a good
50:51 - idea this is some messy code yeah yes it
50:55 - is welcome this didn't work
51:09 - because if I'm translating to the center
51:12 - oh oh I'm so silly
51:17 - this isn't zero this is either at
51:20 - negative R this is one side and then
51:24 - this same face so come at this one out
51:27 - would be at R right these don't cross
51:33 - the center of each little QB they go
51:34 - along the edges so the Z has to be so
51:38 - now we can see now this is right because
51:39 - it's a 3x3 cube it looks like why is
51:42 - there four but these are these are the
51:43 - front and back or the left and right or
51:46 - the top and bottom ever you want to
51:47 - consider it and so now if I do this with
51:53 - negative R of course of course and then
52:00 - the same thing with positive all right
52:02 - there's six faces there we go now I have
52:09 - my Rubik's Cube but without the left or
52:12 - right or the top or bottom I've told you
52:14 - what the orientation is so but the
52:16 - y-axis basically needs to be fixed so
52:19 - this is Z being fixed this first one was
52:23 - Z being fixed this one is X being fixed
52:25 - so I'm going to say Z Z fixed X fixed
52:33 - and now I need to do one that's why
52:36 - fixed and that is going to be so this
52:46 - one I copied what did I copy I copied Z
52:48 - fixed so all I need to do is fix Y so
52:52 - negative or negative are negative R a
52:55 - heart our R and then this should be
53:01 - negative r- r r- r r r- r r and same
53:10 - thing here negative our negative r r- r
53:14 - r r- r r
53:19 - look there it is again there's our cube
53:23 - but all different faces so I have no
53:26 - idea
53:26 - let's just make a total guess here what
53:29 - if I say just for this so let me do let
53:31 - me do a fill in all of these fill 255
53:37 - fill 255 fill 255 fill 255 I fill 255
53:47 - fill 255 so now they're all white but I
53:50 - can say I remember have my colors and
53:53 - what I'm actually gonna do let's make
53:54 - some there's thing let's make some
53:56 - variables that just keep these let's do
53:58 - top well let's do up well these are key
54:00 - words in these are key words in
54:04 - processing let's do them all three
54:07 - letters up is zero down is one I just
54:15 - want to like keep track of these
54:16 - constants final that is that a thing I
54:19 - don't know I don't know how Java works
54:21 - there's probably gonna innumerable down
54:23 - right left front and back
54:34 - this might I mean this is sort of
54:36 - unnecessary but let's do that so now up
54:38 - down right left front back so in theory
54:41 - I want to say fill if this is the top
54:44 - I've no idea if it is whatever the top
54:46 - is fill colors top up up yes that's the
55:00 - top it's facing whoa oh yeah it's why I
55:03 - shouldn't big white is the first one
55:05 - fill colors are already white down all
55:11 - right let's find where that is this is
55:12 - gonna be on the bottom
55:13 - no it's facing us but that's fine
55:14 - because the way I drew it this is really
55:16 - the top over here I think so that's fine
55:19 - I mean the point is I just have to be
55:21 - consistent colors so this would be if Y
55:25 - is fixed if Y is fixed we're doing oh no
55:31 - what
55:32 - if Zia
55:33 - fixed these fixed its front and back so
55:43 - behind is back this of course this is
55:47 - front and then if Y is fixed it's not
55:51 - really fixed then we have top um that's
55:57 - that's actually bottom and then this
56:02 - would be and it's down this is up boy
56:08 - this is taking a crazy amount of tie I
56:10 - can't believe how much time this is day
56:12 - cake and this everybody the Chad I'm
56:15 - sure it's going crazy with better
56:16 - solutions to this X this is left and
56:20 - this is right all right let's see oh
56:30 - hold on let's look here oh whoops
56:39 - not using enum can somebody tell me how
56:41 - to use n um maybe in the slack channel
56:43 - I'll fix that because I actually don't
56:45 - know how to use a none okay all right
56:50 - let's take a look now and I get the
56:55 - orientation the same white and then oh
57:01 - oh but this is mirrored right oh no no
57:06 - it's fine
57:06 - wait ah yo I can hold it anyway oh okay
57:09 - I can hold it any way I want
57:11 - yes okay white green orange is there I
57:17 - hope I can't I can't I can't figure it I
57:21 - can't look at it this way with the view
57:23 - all right it didn't work that's not
57:26 - gonna work for me do I have it off all
57:30 - right let me look all right let me check
57:31 - this I have white green red orange
57:37 - yellow blue red and orange are in the
57:42 - wrong place red and orange are in the
57:44 - wrong place
57:47 - so did I get did I left is red so left
58:00 - left should actually be in the way if if
58:02 - green is the front these are actually
58:07 - wrong so so actually actually drawing it
58:18 - is correct I just have the color swapped
58:21 - incorrectly here so this should be
58:24 - orange on the left and red should be
58:27 - here on the right let's take a look one
58:30 - more time
58:30 - and now I think if if I put this here
58:35 - you can kind of see right now I'm
58:38 - looking at it on the green I'm looking
58:40 - if I bring this down it's green if I go
58:44 - this way it's it's blue that doesn't
58:52 - work all right all right let me try this
58:55 - one more time and if I look at I'm
59:00 - looking at green and with with yellow on
59:05 - the top fine white on the bottom orange
59:10 - red and blue okay so my Rubik's Cube
59:14 - here is mirroring and I think my y-axis
59:16 - is flipped so all of you who want to
59:18 - yellow to be on the top congratulations
59:21 - you win all right everyone I'm not by
59:25 - any means oh did I have this on there
59:28 - the whole time I move the win let me
59:34 - let's do this one more time for much is
59:36 - editing purposes later let's check it
59:41 - here we go
59:42 - well I mean debug mode for no reason so
59:45 - okay okay let's check it here we go all
59:49 - right
59:50 - so I'm looking at green with yellow next
59:53 - to it so I'm now holding it the same way
59:56 - green with yellow next to it so if I go
60:00 - orange red white and on the back blue
60:06 - alright so this is the actual
60:09 - configuration of the standard Rubik's
60:12 - Cube I have it now this video is not
60:15 - over the next thing I need to do is
60:17 - figure out how to do this and so I can
60:21 - scramble it up and do and apply
60:22 - rotations to it um okay I'm going to add
60:29 - the enum enum colors how do I do it
60:45 - I'll also say the nice thing is for
60:47 - those of you what J love to be on the
60:49 - top looks like I drew it with my y-axis
60:50 - flip so everybody wins I'm using white
60:53 - as the top in my variables but when we
60:55 - see it yellow appears on the top so
60:57 - excellent I feel like I am being lied to
61:01 - how many times has this happened before
61:03 - live acting there's only one movement
61:06 - that needs to be coded oh that's
61:07 - interesting
61:11 - refactor time my green is green screened
61:14 - yeah all right well I'm gonna be taking
61:16 - my a break and doing my quicksort make
61:20 - this multi part yeah I think this but
61:22 - this probably should be multi part yeah
61:25 - I will figure that out later but yeah
61:29 - let's let's assume this is gonna be
61:30 - multi parts so I am going to what sides
61:39 - that should be black
61:40 - oh yeah I'll deal with that later I'm
61:43 - gonna just let there be extra colors in
61:45 - there all right how do I do
61:46 - 'inna I have to look up how to do you
61:49 - know I don't know how you know Java Java
61:52 - oh just like this that's so easy oh
62:08 - what's wrong with me no but if de
62:20 - color public enum color
62:31 - public enum directions
62:41 - but they'll do side okay before I wrap
62:47 - up this first part let's see he let me
62:49 - at least it's very painful apparently
62:51 - for a lot of people to watch this that
62:52 - I'm not using enums enums are not
62:54 - something that I'm used to
62:55 - I found the Java documentation page
62:58 - about what enum is it's a special
63:00 - datatype that enables a variable to be a
63:03 - set of predefined constants so which is
63:05 - really exactly what I'm doing here but
63:07 - in a much more sort of like awkward
63:08 - manual way so instead I should be able
63:10 - to say enum I could call it like side
63:13 - and then I can just say up how do I let
63:16 - me look at this syntax yeah and then I
63:18 - just put the public enums I don't need
63:21 - public in processing because processing
63:24 - assumes everything that's public so I'm
63:25 - gonna do up down right left front back
63:32 - just like that and then I can delete
63:34 - these and I should have exactly the same
63:40 - no
63:49 - oh it's inner everything's an inner
63:51 - class is that gonna be a problem
63:53 - can I have an enum that's an inner class
63:57 - did I just okay I just know what I do
64:06 - wrong
64:07 - how do use enums oh I see I see I see
64:24 - yeah okay okay okay so unfortunately I
64:34 - forgot that because processing
64:36 - simplifies your Java code and makes
64:40 - everything and wraps everything in one
64:42 - class I can't put an enum inside of a
64:45 - class so what what I can do is I could
64:48 - make another tab called side Java and
64:51 - then this would be class side I think
64:55 - and then I could say enum I'll just call
64:58 - it like face mmm QB I'll call it face
65:06 - and then I also this will allow me to I
65:10 - think it might I might just use then the
65:12 - actual full words left front and and
65:17 - back so now I should be able to say
65:21 - anywhere I'm using these I should be
65:24 - will say side back like this side front
65:29 - side down side up the reason why its
65:36 - syntax highlighting up and down is those
65:38 - are global constants in processing for
65:40 - dealing with the arrow keys which is why
65:42 - I was calling it upp instead of spelling
65:45 - up upp side left and side right no
65:57 - face face face oh no no I just do this
66:06 - like this can I convert from side to int
66:13 - I'm so lost public
66:36 - so it's making it yeah
66:45 - no semicolon but how do i I want it to
66:53 - be the integer value to look up in the
66:56 - array this is why I don't need to cast
67:02 - to end oh that's so annoying color gets
67:09 - int you stack overflow up equals zero
67:13 - now console.log values of side remove
67:19 - the semicolon downcast attune in yeah
67:21 - but I don't want this is like defeating
67:23 - the whole purpose of doing this if I
67:25 - have to cast it to an int there like it
67:27 - doesn't Kant doesn't let me anyway
67:34 - import side up equals Oh
67:43 - look yeah it has to be yeah all right
67:57 - I'm gonna not put this in the video
68:00 - right now I will come back I I need to
68:06 - be mindful of time here and so someone's
68:10 - gonna give interface and interface Oh
68:12 - ordinal I can do ordinal okay yeah I
68:18 - feel like I'm defeating the purpose of
68:28 - I'm defeating the purpose of using enum
68:58 - okay yes time to pivot okay
69:06 - so Matthew I'm gonna do a wrap-up and
69:08 - we'll do this in multiple parts I think
69:10 - I don't love the multi-part thing but I
69:12 - think that'll this Rubik's Cube thing is
69:14 - gonna be such a long project that I
69:16 - think I should so I have now drawn the
69:27 - Rubik's Cube I have a mate some of you
69:30 - happy who think that the top is yellow
69:33 - because the top is yellow here cuz I
69:35 - drew at the y-axis flipped even though
69:37 - it says top is white in my code who
69:39 - knows I'll figure that out later
69:40 - something that would really improve this
69:42 - would be using enums enumerables instead
69:45 - of these lists of constants it's a
69:47 - little tricky to do that in processing
69:49 - because of the way that processing wraps
69:50 - Java maybe I'll fix that up when I
69:52 - refactor this later but but in the next
69:55 - video I'm gonna work on actually trying
69:57 - to figure out how to do a rotation how
69:59 - to turn and move the stuff around and
70:01 - actually have all the data move as well
70:04 - so that I could shuffle the rubik's cube
70:06 - so if at least in this first part if I
70:08 - can now then make the moves then I could
70:10 - do another part where I could shuffle it
70:12 - and then play the shuffle back and
70:13 - reverse to make it look like it's big
70:15 - solved that'll be fun so if you want to
70:18 - try try your own say one thing that's
70:21 - another thing that's really missing here
70:24 - is that you'll notice on an actual
70:26 - Rubik's Cube that the the just the faces
70:30 - that you can't see are actually colored
70:31 - black whereas once I start rotating
70:34 - these all those other colors are
70:36 - actually there internally and in fact
70:37 - there's like a cube in the center you'll
70:39 - never see it has the colors on it in
70:40 - mind but you know dye a no I think I
70:45 - think I think I've done enough see you
70:50 - in the next video I think I've done
70:55 - enough I will see you in the next video
70:58 - alright everyone so I its 11:40 I've got
71:03 - about an hour and a half here we'll see
71:08 - if I get to the third part III
71:09 - envisioned this
71:11 - live stream is in three parts first
71:15 - doing what I just did
71:17 - second quicksort and third and third up
71:23 - applying the rotations to the Rubik's
71:25 - Cube so I am now going to work on don't
71:28 - leave don't leave there's Lauer's more
71:31 - to go you could you could go I mean no
71:33 - one's required to stay but give me a
71:36 - second I'm gonna pull up my job
71:41 - [Music]
72:58 - [Applause]
72:59 - [Music]
73:01 - [Applause]
73:02 - [Music]
73:06 - [Applause]
73:08 - [Music]
73:45 - [Applause]
73:47 - [Music]
74:27 - okay so as I mentioned I'm welcoming a
74:37 - new sponsor to today's livestream
74:39 - brilliant org I'll put up the banner up
74:43 - here on the top I will give you a few
74:46 - minutes after I do this coding challenge
74:48 - to sign up please go to brilliant org
74:50 - slash coding train to sign up for free
74:51 - if you're interested in the premium
74:53 - access the first 200 subscribers who
74:56 - sign up through that URL will get 20%
74:59 - off I suppose I don't know how many
75:00 - people are watching right now but if
75:02 - more than 200 maybe it's nope all of you
75:04 - go sign up I guess first-come
75:05 - first-serve there but what I wanted to
75:07 - show you so there's a couple things that
75:10 - I really have been enjoying about
75:11 - brilliant recently so brilliant is a
75:14 - website where you can practice and learn
75:17 - all sorts of different whoops of course
75:27 - of course my camera goes off during my
75:30 - talking about the sponsor so it has a
75:33 - daily problems in math science computer
75:35 - science lots of interactive topics and
75:37 - lessons so it's a nice companion to if
75:39 - you like watching the coding train it's
75:41 - not a person talking to you
75:43 - but it's actual interactive puzzles and
75:45 - quizzes and questions with lots of
75:46 - explanations so for example I don't know
75:48 - the other day I was playing around with
75:50 - doing the there was a probability daily
75:57 - challenge that I tried and I worked out
75:58 - the solution in JavaScript so lots of
76:01 - other people will work out the solution
76:02 - in pencil and paper but one of the
76:03 - things that I really struggle with these
76:04 - days is coming up with ideas for coding
76:07 - challenges and I get a lot of great
76:09 - suggestions from the audience I figure I
76:11 - pull stuff from my teaching here but I'm
76:14 - finding that brilliant org is a really
76:16 - great place for me to discover some new
76:17 - ideas of things that I want to try in
76:19 - particular if I go under practice and
76:22 - look under computer science there's a
76:25 - whole section
76:26 - frizzle there's hosting on artificial
76:27 - neural network so I'm very excited to
76:29 - dig into but there's a whole section on
76:31 - algorithms in particular
76:33 - courting and I was like oh and you can
76:35 - see this checkmark here because I did it
76:37 - this morning so I did it this morning
76:43 - because I was like oh I tried that on
76:48 - the channel I couldn't figure it out so
76:49 - I went through the quiz and the
76:50 - explanations and now we're gonna see
76:53 - what are the fruits of me trying to
76:55 - learn and remind myself about quicksort
76:57 - from brilliant I will say that merge
76:58 - sort probably makes sense to learn and
77:00 - practice with before quicksort but the
77:02 - merge sort
77:03 - I don't really know how to visualize
77:04 - that and I think I have an idea of how
77:06 - to do the quicksort so what I'm gonna do
77:08 - right now is actually I'm gonna take I
77:10 - need to get some water so I'm gonna take
77:11 - a short break and I'm gonna be like 5
77:15 - minutes or less
77:16 - when I come back I'm gonna do my
77:18 - quicksort coding challenge and in the
77:20 - meantime if you have five minutes now
77:22 - and you this also supports the work that
77:24 - I'm doing and you can sign up for free
77:26 - at brilliant org slash coding train and
77:30 - once again if you're interested in
77:31 - premium access you can the first to
77:34 - under subscribes get 20% off all right
77:36 - so I'm going to just switch to some
77:38 - music and I'll be back in five minutes
77:40 - five minutes
77:49 - you
80:22 - [Music]
80:51 - you
81:08 - I'm really good at this sponsorship
81:10 - attack I'm sorry my bike with you and
81:13 - now it's back on I noticed here that
81:17 - Simon actually who coding trained
81:20 - viewers Simon I mentioned that there are
81:23 - things that are worth mentioning about
81:25 - brilliant that he likes daily problems
81:28 - the eight principles different quizzes
81:32 - chapters and courses and there's also a
81:35 - gift memberships so one of the things
81:37 - that this sponsorship is allowing me is
81:38 - to not not monetize the livestream with
81:41 - YouTube ads so if you like that if
81:45 - that's nice for you and you want to help
81:48 - me out a little bit by giving it a try
81:49 - go sign up at brilliant org slash coding
81:53 - trained and I will be back in just one
81:55 - minute
82:08 - you
83:20 - [Music]
83:32 - you
83:37 - oh boy I really I didn't realize that
83:57 - the music cuz I could hear the music and
83:59 - i reconfigured that page to have the
84:02 - banner but unfortunately apparently the
84:04 - music wasn't working so sorry about that
84:07 - everybody I've really you can see that I
84:10 - have some work to do interpretive high
84:12 - up doing so well today with this
84:14 - livestream my professional set up here
84:16 - but I'm just doing my best
84:17 - bare with me everybody thank you
84:19 - brilliant thank you for reminding me
84:22 - about the quicksort algorithm please go
84:25 - and sign up and now I'm gonna get back
84:27 - to coding but actually I think what I'm
84:30 - going to do is I was going to do this in
84:36 - processing but I think what I would like
84:40 - to do people requesting to this dot song
84:45 - let me actually do this in p5 I think
84:49 - I'd like to do the quicksort in p5 and I
84:51 - will explain why momentarily so hold on
85:05 - people were requesting to this song here
85:07 - you go I always forget to do this this
86:10 - star this star this star this star song
86:12 - never forget the Vista or somebody
86:15 - composed that song from able if I
86:16 - couldn't get this done in the amount of
86:18 - time quicksort okay okay all right okay
86:31 - [Music]
86:34 - and then I need to open up the code and
86:46 - the camera of course goes off what is
86:56 - going on here
87:03 - all right so what I just want to get I'm
87:05 - gonna start from the bubble sort code
87:07 - that's why I'm just getting this sort of
87:09 - setup I'm not sure why that was focuses
87:21 - was visualizing it why is this J Global
87:26 - variable as well it shouldn't be
87:32 - minimize this and now I can get at this
87:37 - and I was doing something just because I
87:39 - wanted to I wanted to visualize it
87:48 - slightly differently
88:03 - can validly
88:13 - okay and then we make this 800 by 200
88:18 - and make this
88:37 - that's weird looking there we go
88:47 - so bright can I make the page
89:14 - is that not how CSS works body oh no :
89:22 - there we go
89:32 - that's not exactly right but whatever
89:34 - okay well that's enough and then let me
89:39 - set the frame rate okay
89:51 - all right everybody here we are we are
89:55 - ready to go I'm going to explain the
89:58 - quicksort algorithm I'm going to
90:00 - implement it I'm going to visualize it
90:03 - and I'm gonna visualize it oh you can't
90:05 - see me I'm gonna visualize it in two
90:07 - different ways and I think maybe let me
90:22 - write up here quicksort with some
90:27 - rainbows and like a couple hearts and a
90:38 - couple stars and a little smiley face
90:43 - okay that looks good oh you can't see my
90:45 - hearts on the top that's fine there we
90:50 - go okay all right so now I have the code
90:58 - here which you can see three-one
91:01 - three-one three-one thank you thank you
91:11 - okay coding rainbow flashback okay here
91:21 - we go everybody
91:22 - oh don't worry I'm still gonna there's
91:24 - still time with so much to do look
91:27 - hopefully I'm gonna be able to do my it
91:29 - takes me a half an hour to solve the
91:30 - Rubik's Cube
91:31 - I like the swapping elements yes that's
91:34 - a really nice idea
91:35 - Harpreet oh but I might try that we'll
91:37 - see
91:47 - hello welcome to a coding challenge
91:50 - quicksort visualization now you might
91:52 - remember a coding challenge what was it
92:11 - okay
92:14 - hello welcome to coding challenge
92:16 - quicksort visualization now you might
92:18 - remember coding challenge number I
92:20 - forgot one 14 bubble sort visualization
92:24 - where I visualized the bubble sort a
92:26 - sorting algorithm to take an array of
92:28 - numbers and put them in order from
92:29 - lowest to biggest smallest to biggest
92:32 - lowest to highest who knows put them in
92:34 - order it could be alphabetical order you
92:36 - could sort things by all sorts of
92:37 - metrics the bubble sort is a wonderful
92:42 - simple relatively simple algorithm to
92:44 - implement but it has a big flaw it is
92:47 - it's let's start over let's see as I
92:53 - want to have the quicksort Wikipedia
92:55 - page I just started to go down the Big O
92:57 - notation ooh
93:02 - look at this I like this visualization
93:05 - well this is way better than what mine's
93:07 - gonna be worst case and then so bubble
93:10 - sort o N squared quadratic right not
93:22 - exponential huh hello and welcome to a
93:32 - coding challenge quicksort visualization
93:34 - what you're seeing here are the results
93:36 - of my previous sorting visualization
93:38 - challenge where I did the bubble sort
93:40 - now the bubble sort is a really nice
93:41 - sorting algorithm to start with it's
93:44 - it's pretty easy to relatively easy to
93:47 - implement with just some four loops but
93:50 - it's very inefficient and it's super
93:51 - inefficient because it is an algorithm
93:54 - that takes on average Oh Big O being a
93:59 - weten Oh the blender Oh here standing
94:05 - for Big O notation or the order the
94:07 - magnitude of how long a particular
94:09 - algorithm takes based on how many
94:11 - elements of that algorithm there are so
94:13 - with an array of n elements the bubble
94:16 - sort is typically takes o N squared so
94:19 - the more elements but the magnitude of
94:23 - how long it takes to solve to sort that
94:26 - that or
94:27 - a increases quadratically now the
94:29 - quicksort algorithm is on average a Big
94:34 - O n log n algorithm and now maybe at the
94:38 - end they'll come back to like unpack why
94:40 - is this but this is much faster than
94:43 - this and there are many other sorting
94:45 - algorithms they get to them all someday
94:46 - there's more just Birds or sword and
94:49 - keep sword and radix sort and all sorts
94:51 - of other ones and I'm kind of jumping
94:53 - ahead here to maybe a more advanced one
94:55 - quicksort but what are the things I love
94:57 - about the quicksort is its divide and
95:00 - conquer approach that requires recursion
95:05 - so I've done a lot of things with
95:07 - recursion on this channel before more
95:09 - more in computer graphics or drawing a
95:11 - fractal tree or some other type of
95:13 - recursive pattern but here we're gonna
95:14 - see a recursive function a function that
95:16 - calls itself alright so what else do I
95:21 - need to look at nothing really
95:37 - all right so here I have the JavaScript
95:41 - code with that has the bubble sort
95:43 - implemented here and now I want to
95:45 - change to try the quicksort if you're
95:48 - looking I think I should just stay at
95:53 - the board
96:02 - so let me describe and try to diagram
96:05 - out the quicksort algorithm as best as I
96:07 - can from memory before I go and try to
96:11 - code it so there are really two there's
96:14 - two important functions that I need to
96:15 - write one I'm just gonna call quicksort
96:18 - and another I'm gonna call partition and
96:22 - these are not names I've made up these
96:23 - are the sort of classic terminology for
96:25 - this particular algorithm so let's say
96:27 - that I have some array the array has
96:30 - some amount of numbers in it 3 9 2 4 7 I
96:38 - don't know if I put that in a good order
96:39 - for demonstration purposes but let's see
96:41 - so the idea of a quicksort is to first
96:50 - the idea of the quicksort is to first
96:53 - apply the algorithm to a given array so
96:57 - I'm going to call the quicksort function
96:59 - on a given array that's what this is
97:02 - here and I need to specify what part of
97:06 - the array I want to apply this quicksort
97:08 - algorithm to I want to go from some
97:11 - start to end I really should have looked
97:18 - at the algorithm before I started this
97:19 - I'm like literally just drink this from
97:21 - memory so I know that I want to go from
97:25 - start to end and then I need to pick the
97:28 - pivot and I need to put everything yeah
97:41 - I need to just put everything on one
97:44 - side one side or the other and then I
97:46 - call partition our partition is what
97:50 - does that partition is what moves yeah
97:57 - yeah okay right let me just look at the
98:01 - Wikipedia page we just look at the
98:08 - Wikipedia page to remind myself yes
98:14 - exactly start and end oh right and then
98:18 - I partition and I get back the middle
98:21 - point and quicksort again okay right of
98:24 - course
98:24 - of course of course thank you very much
98:26 - Internet where was I here this is gonna
98:29 - be on the code okay I guess it's usually
98:33 - called low and high but I'm going to use
98:35 - start net
98:46 - so let me actually let me start this
98:48 - explanation over again cuz I realized I
98:50 - kind of I'm thinking about it in a
98:52 - slightly different way that makes more
98:57 - sense okay all right all right let me
99:11 - try to describe the quicksort algorithm
99:13 - as best as I can before I start
99:15 - implementing the code so first of all
99:16 - let's just say we have an array and I'll
99:18 - just make a really small array right now
99:20 - just I don't know 1 2 3 4 5 elements in
99:23 - it 7 - 6 5 4 alright so this is my array
99:29 - and I'm the idea here is I'm going to
99:32 - write some function and I'm gonna call
99:34 - that function quicksort now this
99:37 - function is going to expect being passed
99:40 - into it some array and then it also
99:44 - requires the idea of the quicksort say I
99:46 - wouldn't apply this algorithm the
99:47 - quicksort to some part of the array and
99:50 - we're gonna recursively subdivided
99:52 - subdivided subdivide the array of
99:53 - sorting different parts of it so the
99:55 - whole thing is sorted it's like magic
99:57 - but when we're starting what's going to
100:02 - get passed in is index 0 and 1 2 3 and
100:06 - index 4 so the first time I call
100:08 - quicksort I'm gonna say sort the array
100:09 - from 0 to 4 now one thing though that
100:12 - I'm going to want to check the whole
100:13 - point this is gonna be a recursive
100:15 - algorithm so the big thing is like start
100:19 - has to be before end right so the array
100:23 - is going to recursively get sub divided
100:24 - and subdivided so at some point if start
100:26 - and end are in the same spot that's what
100:28 - I'm done so that's going to be the first
100:30 - step here if I think I could just say if
100:32 - start is greater than or equal to end
100:35 - something like return that's going to
100:38 - get me out of it all right but here's
100:40 - here's the the key the idea of the
100:43 - quicksort is basically to say I want to
100:47 - do a step which is called partition and
100:53 - I need to pick some part of the array
100:56 - that is called a pivot
100:59 - so I'm gonna make a nice sort of easy
101:01 - way to pick that so I'll just have the
101:03 - pivot be the end spot and the idea is I
101:06 - want to take everything that is less
101:09 - than the pivot value and put it on one
101:13 - side of the array and everything that is
101:15 - greater on the other side of the array
101:16 - so if I were to do that with this I
101:19 - would I could just visually see I'm
101:21 - gonna get a two the two is the only
101:23 - thing less than the four and then the
101:26 - four is going to go here and then the
101:27 - other things are going to be on the
101:28 - other side like seven six five so it
101:30 - does they don't have to be sorted seven
101:33 - six five so this is what I'm doing I'm
101:36 - taking this pivot putting it in
101:38 - essentially the center so does the
101:41 - middle of the array and then everything
101:43 - that's less goes on one side everything
101:45 - that's more goes on the other side so
101:46 - this partition function where I give it
101:49 - the array the start I think I still give
101:54 - it the start and the end and then also
101:56 - the pivot right what I then want this
102:01 - function to return is an index value the
102:07 - index value of where the pivot ended up
102:10 - and actually I think I don't have to do
102:13 - this too can always use the pivot point
102:14 - as the end so I'll figure that out as I
102:16 - code it but it's better stay with me
102:19 - here so in this case what this actually
102:22 - ends up returning is the index one
102:26 - because what I then can do is I could
102:29 - say hey now that I got that index of
102:32 - where that pivot is I want to just quick
102:35 - sort so I'm going to recursively call
102:39 - quicksort
102:40 - on that array from start to that index
102:50 - minus one and then and also quicksort
102:54 - this is dividing and conquering from
102:56 - that array from index plus one to end so
103:01 - basically these are the steps we get we
103:05 - start with the array we fight we pick an
103:07 - arbitrary pivot we put everything on one
103:10 - side or the other and
103:12 - we figure out where that that pivot
103:14 - ended up and then we just quicksort the
103:17 - both sides and those will put something
103:19 - know this then this is done because it
103:21 - only has one element left so start an
103:23 - Ender in the same so we'll return this
103:25 - one we'll pick five as the pivot and
103:27 - then it will become five seven six
103:31 - because everything is on one side
103:34 - seventy-six are bigger than five so this
103:36 - is then done and then this thing gets
103:38 - quick sorted six becomes the pivot so
103:41 - seven goes on the side and we're left
103:43 - with two four five six seven roof so
103:47 - maybe my diagramming and explaining
103:50 - isn't the greatest and we also have to
103:52 - write the partition function I mean
103:53 - that's the hole how do we do this
103:55 - partitioning but let's start I think now
103:57 - let's take let's go over to the code and
103:59 - start writing it in our code where's my
104:15 - where is the cap to my marker
104:23 - where is the Captain America they
104:26 - somehow have lost the captain my marker
104:28 - I guess I'm gonna live without finding
104:31 - the captain my marker right now
104:50 - how can i serious it's so weird you know
104:53 - what I have other markers so I will just
104:55 - borrow a cap from one of these other
104:57 - markers because some of these are
104:58 - probably dead anyway okay oh shut up
105:03 - being the bumbling absent-minded person
105:05 - that I am
105:06 - look there's the cap to the marker it's
105:09 - on the back of the marker okay let me
105:13 - let me get to writing the code all right
105:22 - um and okay so I'm writing the code now
105:27 - let me cycle the camera
105:45 - okay all right so all right so
106:01 - previously this bubblesort
106:03 - example is designed to visualize the
106:06 - sorting process happening so what I'm
106:08 - going to do is actually take the bubble
106:10 - sort out and just leave the just leave
106:16 - the drawing of the array and I'm going
106:18 - to need this
106:19 - swap function so so the swap function
106:21 - something I'm gonna use and me alright
106:32 - so here I am with my code I'm previous
106:34 - I'm going to remove the bubble sort and
106:36 - I'm just gonna leave the drawing of the
106:38 - array and I'll take out this frame rate
106:41 - five thing for right now I'll leave that
106:42 - in there and now if I go and refresh we
106:44 - should see there it is every time i
106:45 - refresh I'm looking at the array of
106:47 - random values unsorted so the first
106:50 - thing I want to do is just see kind of
106:51 - get the sorting to work and then I'll
106:53 - figure out visualizing it is I guess the
106:54 - interesting part here in some ways but
106:57 - let's get it to work first so the idea
106:58 - right we need to write a function called
107:01 - quicksort it's going to receive an array
107:04 - and a start and an end and I said if
107:08 - start is greater than or equal to end
107:11 - then just return like jump out of there
107:14 - otherwise I need to get this pivot index
107:17 - where I'm going to partition partition
107:21 - the array from start to end so I want to
107:28 - call this partition function I mean this
107:30 - is really ironic they haven't explained
107:32 - the partition that's really where the
107:34 - algorithm is happening but I want to run
107:36 - partition and I definitely don't need to
107:38 - pass in an extra argument because I'm
107:41 - always going to use the end point as
107:43 - that pivot so that's fine and it index
107:47 - is going to come back and then what I
107:50 - want to do is say quicksort that array
107:52 - from start to index minus one and quicks
107:57 - is quick story
107:59 - quicksort stork quicksort quicksort that
108:03 - array from index +1 to end so this is
108:09 - the basic idea of the recursive
108:12 - algorithm divide and conquer
108:14 - divide and conquer and I'm gonna call
108:16 - the the array I'm gonna with I'm gonna
108:19 - call it first with values and go from 0
108:22 - to values not lengths now do I want to
108:24 - say values at length minus 1
108:26 - probably so I'll figure that out as we
108:29 - go because the last element is not the
108:32 - length it's the length minus 1 okay so
108:35 - now of course we really have this just
108:38 - so this is the idea now we have to
108:39 - figure out partition okay let's come
108:41 - back over here
108:55 - all right so let's figure out partition
108:59 - now remember we have this array which
109:01 - was I think it was I mean I can use any
109:04 - numbers here for two seven six five or
109:07 - something like that I don't remember
109:09 - let's say this is the array and so the
109:13 - start is zero the end is 0 1 2 3 4 is
109:17 - index 4 so what I want to do to
109:20 - partition this is first I need the pivot
109:23 - value so the pivot value is going to be
109:25 - this 5 it's going to be the number
109:28 - that's at the end then I need to start
109:30 - counting and I'll use I as a counter I
109:33 - need to start with I at 0 and basically
109:35 - what I need to do is say like a is 4 so
109:41 - sorry it's confusing because I have the
109:44 - index numbers here 4 and 0 let me get
109:45 - rid of those is 5 less than 4 no it's
109:50 - not
109:50 - so 4 is gonna need to be on the that
109:53 - side of it Oh 4 was I'm confusing myself
109:59 - because I'm using different values than
110:01 - when I had before so let me just start
110:03 - over okay because it's an extra point of
110:08 - confusion one more time explanation
110:13 - what are we where we at 12:20 LifeFlight
110:16 - could be worse okay we go alright let's
110:23 - work out that partition function so
110:25 - let's make up another array that is five
110:27 - elements in it
110:29 - - five four nine three let's make this
110:35 - six no I really want like a good alright
110:46 - let's let's talk about that partition
110:48 - function the partition function is
110:50 - really where everything happens I may be
110:51 - good array of just five elements nine
110:56 - two four six five okay I think this is
111:02 - good so when I call a partition right
111:05 - the first time we call partition we call
111:08 - it
111:09 - the array from start to end zero one two
111:14 - three four so from zero to four so the
111:18 - first thing that I want to do is I need
111:19 - to pick that I need to pick some pivot
111:22 - value then even put everything on the
111:23 - left or right side on the left side or
111:25 - the right side whether it's less than or
111:26 - greater than so the easy way to do this
111:28 - is since I can always just pick the last
111:31 - spot so the pivot is going to equal in
111:33 - this case five then what I want to do is
111:37 - iterate from zero all the way to three I
111:40 - want to look at every single one of
111:41 - these elements and compare them to five
111:43 - because if they're less they should go
111:45 - on the left side if they're greater they
111:46 - should go on the right side so we're
111:48 - gonna start with I equals zero and I is
111:51 - going to go all the way up to you know
111:53 - the length of this array and actually n
111:56 - minus one and we're gonna compare so
111:59 - nine is greater than five ooh so nine
112:04 - should be on the right-hand side of five
112:05 - so guess what we do if that's the case
112:08 - swap so we take five and put it here and
112:19 - put knight ways that right hold on I
112:24 - [Music]
112:25 - forget which five was here
112:28 - no no nine was here
112:35 - yeah then we're gonna swap yes that's
112:38 - exactly what we're doing let me just
112:40 - make sure let me just look at the
112:41 - algorithm again to make sure I'm getting
112:42 - it right right if I is low Oh actually
112:53 - we need to go from we're not we're going
112:57 - through all of them this is what I
112:59 - forgot
112:59 - we need like the pivot index that's like
113:02 - actually so I should call that index
113:04 - we've got to figure out where that pivot
113:06 - index is going to land and only if we
113:08 - swap do we increment the index yeah okay
113:15 - I need one more index yeah
113:27 - so I'm going to check and iterate and
113:30 - check I'm gonna check every one of these
113:34 - elements against five if it's greater
113:36 - then I'll put it on the other side of
113:37 - five if it's less then I'll put it on
113:39 - this side of five I'm gonna check every
113:43 - one of these elements from zero to n n
113:46 - minus one and if the element is greater
113:49 - than the pivot than five it should be on
113:52 - the right side if it's less than it
113:53 - should be on the left side but there's
113:54 - nothing I actually need another index
113:56 - I need kind of the pivot index because
113:58 - five this pivot is gonna end up
114:00 - somewhere and that's what gets returned
114:02 - from the partition function partition
114:05 - function that's the thing that I need to
114:07 - subdivide the array so actually let me
114:09 - call this J and let me call or actually
114:15 - I'll keep this as I so many different
114:17 - ways you could do this and let me just
114:19 - have another variable that's called a P
114:22 - index for a like pivot the pivot value
114:35 - let me keep this as I and then I'm just
114:38 - gonna have another variable which I'm
114:39 - just gonna which I'm going to call index
114:41 - so this is really the pivot index this
114:44 - is the pivot value okay so nine is nine
114:49 - greater than five
114:50 - oh it is so I'm gonna check if the array
114:54 - index I is greater than the pivot then
114:59 - what I need to do swap this is where I
115:02 - need to swap so I have a swap function
115:04 - from my bubble sort algorithm and what
115:06 - swap does is it just swaps these two
115:08 - elements so five goes over here and then
115:13 - I increment well if I'm swapping I also
115:16 - move that pivot index up by one so the
115:20 - pivot min index moves up by one and I
115:22 - moves up by one so now I'm checking two
115:24 - is to greater than five no it is not so
115:29 - I do not swap and I do not move the
115:32 - pivot index the pivot index is still
115:34 - staying here but now I go to here is for
115:37 - greater than five no it is not so I do
115:40 - not swap and I do not move the pivot
115:42 - index so I'm here now but I goes up now
115:46 - I'm here this is the last one you need
115:48 - to check is six greater than five oh it
115:51 - is six is greater than five so I swap
115:59 - wait a sec no something's wrong
116:07 - am i swapping if there should I be
116:10 - swapping when they're less than
116:23 - because six shouldn't end up there what
116:26 - am i swapping with
116:34 - I'm so confused
116:44 - oh if it's less than pivot right right
116:50 - right right not greater then of course I
116:54 - always get this stuff wrong right it's
116:56 - not bad
117:00 - [Music]
117:11 - alright let's just do this out and then
117:13 - I'm going to explain it again right so
117:14 - if the pivot is 5 is is 5 less than is 5
117:27 - yeah he's 9 less than 5 no so leave it
117:33 - there
117:34 - he's to less than 5 but what if 9 is
117:41 - less than 5 and swap and move it this is
117:45 - why am i confusing myself here all right
117:54 - let's just try let's just play it out
117:55 - the way that it says on Wikipedia this
117:57 - is the pivot is 5 is 9 less than 5 no
118:02 - don't do anything is 2 less than 5 yes
118:06 - Swamp is 4 less than 5 okay oh so now
118:15 - the pivot is here because I didn't move
118:16 - I didn't move the pivot index or
118:19 - actually the pivot index starts at 0 so
118:22 - now the pivot index is here now I'm
118:23 - going to check here is 4 less than 5 it
118:27 - is so swap with I and ok where the pivot
118:39 - index yeah so swap this doesn't seem
118:47 - right what am i doing and this moves
118:49 - here and then 6 what have I done I've
118:58 - done something I'm really obviously
118:59 - wrong make 9 pivot first it's funny I'm
119:08 - implemented this so many times and I'm
119:13 - just looking at this again let me just
119:15 - look at this pivot value is the high
119:18 - part of the array the this is the pivot
119:21 - index what I'm calling index that's the
119:23 - low part we start from a low
119:25 - if the array if that spot is less than
119:31 - the pivot then swap from the pivot index
119:39 - uh-oh I'm not swapping with the pivot
119:42 - this stays there the whole time
119:44 - that's what I'm just no wonder no wonder
119:47 - oh I'm just being ridiculous okay I'm
119:49 - just being ridiculous right so so you
119:54 - know whatever it doesn't matter what
119:55 - this array is let me just real quick a
119:58 - knock-back and get it again oh of course
120:00 - of course of course of course there's
120:02 - the pivot index there's the pivot value
120:04 - this pivot this never gets swapped till
120:06 - the end this stays here the whole time
120:08 - till the end of course so I start here
120:10 - is this less than that no so I leave it
120:14 - there
120:14 - is this and and the pivot index stays
120:17 - here is this less than that yeah so now
120:19 - I swap here and the pivot index goes to
120:24 - here is this less than that no is this
120:28 - less than that no and then now this
120:31 - swaps into here and this goes here we
120:34 - have all the bigger stuff on this side
120:36 - okay I just like thought about it wrong
120:40 - so here we go explanation attempt number
120:45 - 453 yeah don't worry everybody I am now
120:56 - going to explain it in a way that makes
120:59 - sense
120:59 - and then that you will edit this all
121:01 - together and everybody will be happy
121:03 - when the video comes out
121:10 - all right let's look at the partition
121:16 - function this is really where the magic
121:18 - happens this is the core algorithm so
121:20 - once again let's make up an array with
121:23 - just five elements in it let's say 9 3 5
121:28 - 6 4
121:31 - let me move just to make things more
121:33 - even let me put the 4 here and make the
121:35 - 5 here ok just I think an example work
121:37 - out better this way obviously any order
121:40 - the sorting algorithm will work so the
121:42 - idea of the partition function is when
121:45 - you call the function you give it the
121:47 - array this is the array you give it a
121:51 - start and an end so in this case the
121:54 - start is going to be 0 this is the start
121:58 - and the end is going to be in position 0
122:01 - 1 2 3 4 in index 4 so this is the first
122:05 - time I call partition it's going to get
122:08 - called on this array now what I need is
122:09 - a pivot value
122:10 - I need a pivot index and a pivot value
122:12 - the pivot index well we'll talk about
122:16 - that in a second the pivot value I'm
122:17 - just gonna echo pick anything in here
122:19 - but it's most convenient to just pick
122:20 - the last one so I'm gonna say the pivot
122:23 - equals 5 and the idea of what I want to
122:27 - do is I want to put everything I want to
122:29 - rearrange this array so that everything
122:31 - that's less than 5 like the 3 and the 4
122:33 - are on the left side and everything
122:34 - that's greater than 5 like the 9 and the
122:36 - 6 are on the right side and then five
122:38 - will be smack in the middle now won't
122:39 - always work out that the pivot ends up
122:41 - in the middle because everything could
122:42 - be bigger in it than the pivot would end
122:44 - up here and there'd be nothing on the
122:45 - left side but I made a little nice
122:47 - example so that works out cleanly ok so
122:49 - how do we do this so first we need to
122:52 - iterate through every element of the
122:54 - array I equals 0 all the way up to on
122:58 - the end minus 1 so we need to check
123:01 - every single element of the array and we
123:03 - need to compare every single element of
123:04 - the array against 5 I also need to keep
123:07 - track of the pivot index because as I go
123:10 - through this process I'm gonna need to
123:12 - find where did once I'm done the 5 is
123:14 - gonna stay here the whole time I need to
123:15 - quickly put 5 back into where it's where
123:18 - it's supposed to go so that I'm going to
123:19 - just call index it's really the pivot
123:21 - index so this is the pivot value this is
123:24 - the pivot index that's gonna start at
123:25 - zero and I'm gonna put a star here for
123:28 - that it's starting here so I is now zero
123:31 - nine is nine greater than five yeah it's
123:36 - greater than five I know that that means
123:39 - I do nothing so I'm checking if array
123:42 - index I is I'm checking if it's less
123:46 - than actually it's not less than if it's
123:49 - less than the pivot value so if it's not
123:53 - less than the pivot value I don't do
123:55 - anything okay
123:55 - now I goes up so I is now here is 3 less
124:00 - than 5 aha it is so guess what I do I
124:03 - now swap I and wherever the pivot index
124:08 - is remember the pivot index was at 0 so
124:11 - 3 & 9 are going to swap so 3 goes here
124:15 - and 9 goes here and then guess what I do
124:17 - I move that pivot index so the pivot
124:21 - index is now here and then I move I and
124:24 - I'm checking for is 4 less than 5 it is
124:28 - so I do this again swap I and the pivot
124:31 - index so 4 goes here 9 goes here and the
124:35 - pivot index goes up so the pivot index
124:37 - is here then I go here for I this is the
124:41 - last one you to check is I less than 5
124:43 - no do nothing so I'm done this is the
124:46 - array 3 4 9 6 5 huh well you can see
124:51 - that 3 & 4 here they're less than 5 9 &
124:53 - 6 in here they're greater than 5 guess
124:55 - what
124:55 - the reason why I need that pivot index
124:57 - is the last thing that I do is I swap
124:59 - the pivot index with end so now I can
125:04 - just take what was on the end put it
125:05 - here put the 9 here and I have this
125:08 - algorithm has successfully put
125:10 - everything less than then that pivot
125:12 - value on one side of the array and
125:14 - everything greater on the other side of
125:16 - the array and the really nice thing
125:17 - about this quicksort algorithm is I
125:19 - don't really have to use additional
125:21 - memory I didn't have to make a copy of
125:23 - the array to move things around and the
125:24 - merge sort if I ever do the merge sort
125:26 - you see you need to start like having
125:27 - extra copies of the array so that's one
125:29 - nice thing about the quicksort
125:35 - should have used I and J to be honest
125:38 - index and I is not a good choice that's
125:45 - probably a good point
125:50 - so the chat is gonna be some good
125:52 - feedback that the way I used I and index
125:54 - is a little bit awkward I think what I
125:56 - might actually do is name this pivot
125:58 - value and when I write the code and I'll
126:00 - name this pivot index it's a really
126:02 - that's being very long-winded but I
126:04 - think it'll make it more clear so let's
126:05 - go write that code now so if I come back
126:08 - to the code all I need to do is write
126:10 - the partition function so I'm gonna
126:12 - write a function called partition it's
126:17 - going to receive an array and a start
126:18 - and an end and then what did I say I
126:23 - want to do I need to have a pivot index
126:25 - which is going to start at 0 I need to
126:28 - have a pivot value which is going to be
126:31 - the array at end and then I need to
126:35 - iterate from I equals 0 to I is less
126:37 - than n minus 1 I I plus plus and now I'm
126:43 - checking if the array I is less than the
126:47 - pivot value then what I want to do is
126:53 - swap I already have a swap function a
126:55 - swap function just takes an array and
126:57 - two indices and says whatever was in a
127:00 - store it because you're gonna want to
127:01 - put B and a and then what you saved in a
127:03 - put it in B so swap array a and swap
127:06 - array B so I already have that function
127:08 - so I can say swap I and pivot index and
127:14 - then pivot index plus plus and then once
127:19 - I finished that loop I just need to swap
127:22 - pivot index and an end array pivot index
127:28 - and end wow that was quick to write is
127:30 - there any chance I got that right all
127:32 - right let's run the code okay we got an
127:35 - error a maximum call stack size exceeded
127:39 - so this is a very common error which is
127:43 - that if you recursively call stuff way
127:45 - too much things blow up and
127:47 - you've exceeded things so let's take a
127:48 - look at the code oh of course
127:52 - this is not where the pivot index starts
127:55 - you don't always go remember I just said
127:57 - zero because I was thinking about doing
128:00 - it over the whole array but the whole
128:02 - point of this is you're starting at
128:03 - start start isn't always zero that was a
128:05 - nice little mistake there so this should
128:07 - be start is that the only error I have
128:09 - let's see No
128:13 - so there's some other errors let's see
128:40 - it's start like it's this like actually
128:49 - what I want no oh it's swap Oh Oh yikes
128:58 - I forgot ACK so I forgot that my swap
129:02 - function huh my swap function the way
129:05 - that I wrote it there's no global array
129:07 - you have to tell it what array you want
129:09 - to swap the values in so that needs to
129:12 - be that needs to be explicitly added as
129:15 - an argument there was that the only
129:17 - mistake still more errors wait let's see
129:21 - what is it actually saying here at swap
129:40 - but
129:43 - it should I have that condition forgot
129:50 - the array in line 30 pivot index plus
129:54 - plus before the oh no it should end up
129:58 - in the right spot the pivot index I
130:01 - don't think I need to increase it one
130:03 - more it be in the right spot oh oh you
130:11 - know what here's my other error I know
130:16 - that this is I know that this is end so
130:21 - I want my loop to go from 0 to n minus 1
130:24 - but I'm using just the less than in my
130:25 - for statement so I don't need n minus 1
130:29 - I need just end that's so many errors
130:40 - still Oh return the index value
130:58 - okay I forgot the whole central idea of
131:01 - this the whole central idea of this is
131:04 - that the partition function returns back
131:08 - where that pivot index is so that you
131:11 - can divide and conquer conquer and do
131:13 - the right and left halves look at this I
131:16 - don't return that anywhere I just finish
131:18 - and I'm like I'm done here's an
131:20 - undefined pivot index I need to actually
131:23 - say return pivot index what an important
131:27 - important key line of code and I'm
131:36 - getting closer everybody I equals start
131:53 - [Music]
131:54 - mistakes
131:56 - I'm the worst this is also from start
131:59 - right I'm so focused on thinking about
132:01 - the beginning first step where you go
132:04 - from the beginning to the end of the
132:05 - array but the whole idea of this
132:06 - partition function is that you're
132:08 - anywhere in the array so this goes from
132:11 - also from start to end there we go
132:14 - so now there's my sorted array you can
132:17 - see that the quicksort actually works
132:21 - all right
132:22 - well though now that we're about three
132:24 - hours into this video I should I should
132:27 - visualize it now there's a couple
132:28 - different things I could do it's really
132:30 - tricky to visualize something that's
132:32 - happening recursively because it's not
132:34 - happening in an obvious first step
132:36 - second step third step so let me just
132:37 - draw it the first step draw it the
132:39 - second step so I think there's two
132:40 - approaches one is I could actually sort
132:43 - the array and keep track of all the
132:46 - swaps and then play back the play back
132:50 - all the swaps one at a time let's do
132:52 - that first so that's going to be my
132:54 - visualization technique number one so
132:56 - I'm gonna make a I'm gonna make a class
133:01 - called a swap and it's just going to
133:04 - have two variables associated
133:08 - with its which things are being swapped
133:12 - and then I am going to I am going to
133:18 - also keep make an array to keep track of
133:22 - all the swaps then what I want to do is
133:24 - once I have once I have my array I also
133:29 - want to have another array called a back
133:32 - up and back up is values dot slice 0 and
133:42 - pretty sure that's a slice as a way of
133:44 - giving me a portion of the array from a
133:46 - start to a finish copying it so this
133:48 - will copy the whole array let's just
133:49 - make sure that works so let's just look
133:59 - and make sure that these are two
134:00 - separate arrays yeah that looks right
134:06 - yeah those are the same values in fact
134:08 - check me out I'm going to assume it
134:10 - works ok so now what I'm going to do is
134:13 - every time I swap right every time this
134:16 - function is called I'm gonna create a
134:19 - variable called SW which is a new swap
134:22 - between a and B and swap stop push that
134:25 - swap so in theory now if I run run the
134:31 - sorting algorithm and I look at all the
134:34 - swaps it did 382 swaps these are all the
134:37 - swaps it did in order some order of
134:41 - recursively so now I can play back all
134:44 - of those swaps so what I want to in draw
134:47 - is I want to visualize backups right so
134:56 - weird
134:57 - did slice hold on but not back up back
135:01 - up back up back up
135:07 - where what just happened here set up
135:17 - shouldn't it be a copy like let me just
135:21 - oh sorry I didn't have the console open
135:25 - sorry I didn't of the console up but it
135:27 - was caching my code there we go so now
135:29 - I'm seeing the unn
135:42 - now I'm seeing the unsorted array back
135:45 - up it's sorted values values got sorted
135:48 - I'm just seeing the unsorted array so
135:50 - what I can actually do now in draw is
135:53 - I'm gonna have a variable called swap
135:55 - index equals zero and in draw I'm going
135:59 - to say let a given swap equal let it
136:04 - give them swap equal swaps index swap
136:08 - index my variable names are kind of
136:11 - lunatics here then I'm gonna say swap
136:13 - back up SWA swb and then swap index plus
136:20 - plus so I'm just going to eat draw I'm
136:22 - drawing the backup array and just doing
136:24 - each of the swaps one at a time good
136:30 - it's happening so slowly because I have
136:32 - the framerate set at five but let's just
136:35 - be sure that it's really working and
136:36 - let's set the framerate at 60 frames per
136:39 - second which should be the default there
136:42 - we go look we've got the quicksort
136:44 - visualized
136:44 - ooh look at that I feel like I need some
136:47 - music oh what's it doing
136:53 - oh it's unsourced scrambling - wow
136:59 - that's weird
137:04 - fascinating these swaps are there
137:21 - all right I'm not sure what's going on
137:24 - there let me at least say if where's the
137:29 - draw loop if so I'm only going to do
137:36 - this if swap index is less than swaps
137:42 - dot length otherwise no loop console.log
137:50 - done so this will tell me if I'm done
138:08 - why does it keep going
138:30 - oh so look at this I'm still adding more
138:38 - every time I swap they keep adding to
138:40 - the swaps array and it never stops oh no
138:42 - wonder oh how silly of me so I need a
138:46 - let me just use a boolean variable like
138:49 - sorted and it's false and I'm gonna say
138:52 - here only if it's if it's not sorted add
138:58 - a swap to that array otherwise if it is
139:01 - sorted when it's at the after this I'm
139:04 - gonna say sorted equals true so now and
139:07 - let's just make it fewer values let's
139:09 - make this 20 so we can really see this
139:11 - go there we go let's see it finish I
139:13 - think it'll stop now yay yeah I should
139:19 - never put my hands up here let's see it
139:21 - let's see if finish now yeah okay
139:28 - I have visualized the quicksort mmm what
139:37 - do i what do I want to do different
139:40 - color in the selector I do want to do
139:42 - that
139:55 - let's make a so this is what this is one
140:01 - way this is one way of doing it I am
140:07 - storing all the swaps and just playing
140:09 - them back but there isn't really a real
140:12 - reason why I couldn't just draw the
140:14 - original array over and over again while
140:16 - it's being sorted and a way that I could
140:20 - do this is by run the sorting in an
140:22 - asynchronous function so it's happening
140:25 - behind the scenes and then I'm always
140:27 - drawing the regular array let's see what
140:31 - happens if I do that so I'm gonna what
140:35 - I'm gonna do is I'm going to make a
140:36 - backup of this code
140:47 - and I'm going to go back and I'm going
140:52 - to get rid of the swap sorted stuff and
140:58 - back up
141:08 - and I don't need this and
141:31 - okay so this is sorting it
141:42 - right
141:45 - I don't need this anymore
141:51 - so I have my code now back to what it
141:55 - was originally so this is just pre
141:57 - sorting the array before I draw it so
141:59 - this is right now what happens what do I
142:02 - mean here what if I make this quicksort
142:05 - function a sink
142:07 - weird right let's just add that a sink
142:10 - keyword there same deal interesting let
142:16 - me also make this partition function a
142:20 - sink and what's important there oh oh oh
142:26 - I forgot I forgot something really
142:28 - important so I'm surprised that even
142:30 - work if I'm making the quicksort
142:32 - function a sink I'm gonna want to await
142:35 - quicksort both calls to quicksort I want
142:40 - to be able those are happening
142:42 - asynchronously and I want to await them
142:46 - because I want them everything to happen
142:48 - in the correct order also want my
142:49 - partition function to happen
142:51 - asynchronously so I'm gonna call put a
142:54 - weight in front of that now if the async
142:55 - and await keywords are new to you I will
142:58 - refer you to some other videos where I
142:59 - go through those in more detail but this
143:01 - is what I'm basically allowing this to
143:03 - happen is that this function quicksort
143:05 - can be called and then draw is gonna go
143:08 - on the thing is the sorting is so fat
143:11 - you can see it there's like a little
143:12 - blip there right that little blip where
143:14 - you see it but it sorts it so fast what
143:17 - this means is if I could just make
143:18 - something happen and let's make swap
143:22 - asynchronous and let's await it
143:26 - everywhere if I could just add a little
143:29 - delay somewhere I could force the actual
143:33 - sorting algorithm to slow down but draw
143:35 - would still be animating so there are
143:37 - other places where swap happens there
143:39 - swap and swap so how do I make this slow
143:41 - down well I could use set timeout but
143:45 - what I want is I want a function that's
143:47 - like delay that I could use a wait and
143:50 - I'm gonna have to write my own function
143:52 - for doing that timeout for a second
144:04 - yeah yeah I'm gonna add the timeout in
144:08 - to swap time dot sleep but that doesn't
144:09 - work there is no is there a time dot
144:12 - sleep that returns a promise does that
144:15 - actually work I didn't think you could
144:18 - do that I thought I have to write my own
144:19 - function yeah this is what I want to do
144:22 - this is what I was going to do
144:33 - this might be a bad idea for various
144:35 - reasons yes so on Stack Overflow I found
144:41 - this nice piece of code that basically
144:43 - takes set time out the set time out
144:45 - JavaScript function which has a callback
144:47 - which is callback based and resolves a
144:50 - promise when set timeout finishes and
144:52 - this is the equivalent of an
144:54 - asynchronous sleep function it's kind of
144:56 - like a wait and don't do anything wait
144:58 - and don't do anything for this amount of
145:00 - time so I'm gonna bring this function
145:01 - into my code I'm just gonna put it here
145:05 - on the bottom and now I can say await
145:07 - sleep 1000 what that means is hey before
145:11 - before you swap just wait a full second
145:15 - and let's see what happens I think my
145:22 - sleeping might be too long right a full
145:26 - second so let's just bring that down to
145:28 - 10 and we could see there we go
145:31 - so now we're seeing the animation now
145:33 - this is probably a bad idea for a
145:34 - variety of reasons because I'm not being
145:37 - very careful about what is the frame
145:39 - rate of my animation loop and where am i
145:41 - where do the swaps happening I'm just
145:42 - letting it kind of work out mostly by
145:44 - accident but I think this should let me
145:48 - do things like say if I equals the
145:54 - current pivot index is that a global
145:57 - variable and might not be keeping track
145:58 - of that globally so yeah so I want this
146:02 - to be I want a global let me call that
146:06 - so I'm already using pivot index here
146:09 - but that's fine let me make a variable
146:12 - called like glue I can't think of
146:18 - variable names
146:20 - I already used pivot index let me just
146:29 - say red pivot for a different variable
146:32 - name and I'm going to say as pivot is
146:38 - changing let's oh well if it's any of
146:43 - though so there's multiple pivot indexes
146:46 - ah I should have kept track of a list of
146:52 - all the pivot indexes as well this is
146:54 - actually trickier than I think yeah
147:07 - actually now I'm realizing of course
147:11 - this is recursive so there's many pivot
147:14 - into indices so actually this is perfect
147:16 - what I want here is like I'm just gonna
147:19 - call this pivots and I'm gonna make that
147:21 - an array and every time every time I am
147:28 - in let's see
147:42 - and every time I get one of these
147:46 - indices I'm gonna say pivot pivot dot
147:52 - I'm gonna add it to that array and then
147:56 - I think there's a way for me to just
147:58 - find it and take it out right so isn't
148:01 - there a way to give an array a value and
148:03 - remove it
148:07 - array JavaScript remove value
148:20 - I guess I have to find it to remove it
148:27 - so there's no native function index of
148:31 - index of I can use index of right
148:44 - so then after this is over
148:47 - let me grab the the that particular
148:53 - where it is in the array because it
148:55 - could the different things are going to
148:56 - add things to the array everywhere so I
148:58 - could say index of pivots I can actually
149:05 - just do this pivots splice wherever that
149:11 - value is pivots index of index one so
149:17 - this is gonna remove it so this should
149:18 - be make continuously making an array of
149:21 - all the pivots and like in theory if I
149:24 - just say let's just console.log that
149:26 - this is like I've lost my mind here
149:28 - let's log that in draw sketch gas line
149:34 - 47 oh yeah so let's forget about this
149:37 - for a second yeah so this is all the
149:41 - pivots and then they're gone this is
149:42 - perfect so now if in pivots index of I
149:50 - is greater than it's greater than
149:53 - negative one that means it's in that
149:55 - array then what I want to do is fill it
149:58 - as red and let's really slow down the
150:01 - frame rate here let's slow down the
150:04 - frame rate to five and we should see
150:07 - right well that happened so quickly
150:11 - let's oh no the frame rate doesn't
150:13 - matter I want the frame rate to be super
150:16 - fast I want to slow down the swapping
150:18 - more how come I'm not seeing oh I think
150:30 - I'm like the timing is kind of off let's
150:36 - make it let's let's have many many more
150:39 - elements
150:56 - does this look right to people
151:17 - I guess I should be removing the
151:39 - it's coloring after pivot really I mean
151:44 - it so maybe it actually makes more so
151:52 - that was interesting but maybe it
151:53 - actually makes more sense for me to kind
151:58 - of think keep track of things I want to
152:01 - color red not here but actually as I'm
152:06 - moving the pivot value here this is sort
152:10 - of crazy so like I want to basically
152:13 - every time I increment the pivot right
152:16 - before I increment the pivot index I
152:18 - want to get rid of it and then I want to
152:32 - add it in every time it increases and I
152:39 - also should be putting it in right here
152:46 - yes this makes more sense right yeah
152:54 - that's the pivot index moving along
152:56 - through the whole thing and then it's
153:02 - waiting over there while it's doing this
153:04 - one shouldn't be doing them
153:05 - simultaneously though cuz it's recursive
153:07 - somehow maybe all the oh wait Oh cuz of
153:09 - the oh wait thing I shouldn't have the
153:12 - recursive call be asynchronous because
153:14 - it has to wait but this is right now
153:17 - it's just I want it to animate on both
153:19 - sides it's kind of but this is right
153:22 - this is kind of interesting all right
153:24 - let me let this go faster I'm gonna let
153:29 - this go way faster yeah so that's the
153:33 - pivot moving throughout it as well yay
153:40 - all right one more try let's let's let's
153:46 - make the width just one let's let it
153:50 - happen with just five milliseconds of
153:53 - Bing let's get rid of my console.log and
153:56 - let me run this
153:58 - wait where's oh whoa no stroke No
154:03 - if it's a wreck count and let's let's
154:12 - fullscreen this by saying a window
154:18 - window with window height let's do a
154:25 - width of two let's actually have the
154:28 - stroke also be 255 and or red and here
154:37 - we go
154:39 - view enter full screen refresh enjoy
155:13 - oops all right there's your quicksort
155:17 - visualized here's the thing I spend so
155:21 - much time figuring this out that I
155:22 - wasn't really being thoughtful about how
155:24 - I might visualize this in a nice way you
155:26 - could add to sound to this which lead
155:31 - from my end explanation again I should
155:35 - probably just record this in front of
155:36 - the green screen but I'll just leave it
155:38 - like this do green after sorted yeah
155:51 - replace a weight quick sort with a
155:53 - weight promise all quicksort quicksort
155:55 - would that do both yes sorry the mouse
156:00 - is it oh no this mouse is in the way all
156:04 - right let's try this again and enjoy
156:41 - all right I have an idea I have an idea
156:47 - what if I just make the quicksort
156:51 - function not asynchronous so this
156:55 - doesn't have to wait for the recursion
156:57 - because swap only happens in oh but
157:00 - partition is oh yeah so this has to be a
157:06 - sink though or what if I mean I could
157:18 - use I don't have to use a wait I could
157:23 - say partition then like if I say let
157:38 - index equals negative 1 and then I say
157:41 - partition can I just do that oh and then
157:53 - oh right no no this
158:07 - if I do this
158:21 - now it's still doing it one at a time
158:34 - it's still got a wait partition one at a
158:37 - time you would think it would just be
158:39 - able to keep going if
158:51 - promised dot all is that the color the
158:55 - subset being sorted with a third color
158:57 - and the dancing sort videos I know I
159:01 - don't I'm afraid of like including those
159:04 - [Music]
159:05 - hold on I oh it's 110 my goodness well
159:10 - let me see if I can finish this off here
159:20 - so that didn't change anything so
159:23 - there's a promise dot all I don't
159:25 - understand how edu is promised at all
159:30 - everyone is telling me promise dot all
159:35 - so let me go back
159:43 - keep everything a sink oh you mean I
159:49 - could just start adding them so a weight
159:59 - promise dot all so I have a function
160:20 - quicksort needs to be a sink I think I
160:24 - might have to figure this out another
160:25 - time I was thinking like I don't want to
160:30 - wait go though yeah I don't want no wait
160:32 - the point is I don't want to wait I want
160:35 - to let it go yeah I don't see how I
160:44 - could use promised at all partition all
160:47 - quicksort quicksort whoa I keep it as
160:51 - saying partition I think I'm going to
160:58 - leave that up as a leave that as a
160:59 - challenge I think I'll leave that as a
161:04 - challenge
161:15 - so what could I could color something
161:18 - differently like start and end so since
161:29 - it's doing it one at a time I can
161:31 - actually just store the pivot index
161:33 - globally so I could say current pivot
161:44 - and then I could say here all right so
161:56 - let me go all the way back actually
162:00 - Matthieu this is going to be kind of
162:01 - crazy but I think we can get rid of my
162:13 - whole thing of making this array why
162:18 - it's still red
162:30 - what's Rios I didn't
163:19 - okay
163:46 - okay I cubics they erase the two
163:51 - separate calls to quicksort and replace
163:54 - them with a weight promise all quicksort
163:56 - quicksort fascinating
164:39 - so why is it
164:48 - do I have to explicitly like
164:58 - oh because if it returns nothing there's
165:04 - no promise I think this is the problem
165:18 - Oh oh I forgot the brackets okay
165:30 - Hey
165:38 - it's interesting getting close
165:59 - oh I messed something up well I mess
166:06 - something up completely what did I do
166:13 - oh I got rid of that by accident there
166:27 - we go
166:27 - okay oh look at that yeah okay okay
166:48 - yeah look at that oh that is much more
166:52 - exciting okay
166:55 - oh now I have to put my weird crazy
166:57 - erased or the pivots in there so who is
167:05 - that I Kubik I want to I want to thank I
167:07 - cube ik in the chat all right so hold on
167:44 - so one thing that I noticed and that the
167:47 - chat really just helped me out with is
167:49 - that because I am using a way tier with
167:53 - each separate quicksort step the actual
167:57 - sorting visualization is kind of do it's
168:00 - not the recursion is not happening
168:02 - simultaneously it's doing one half than
168:04 - the other half then one half then one
168:06 - half then one step by step which is kind
168:08 - of nice for visualizing it that's a
168:10 - really really fast I'm gonna put in a
168:12 - sleep time of like 25 milliseconds and
168:15 - you can sort of see how this is
168:16 - happening a little bit by bit by bit by
168:18 - bit and then it's done however I forgot
168:21 - that I could use promise dot all so I
168:25 - could await promise dot all both of
168:32 - these calls to quicksort at the same
168:34 - time so if I do that and just paste this
168:40 - one up here this is getting to be pretty
168:43 - goofy advanced JavaScript stuff but this
168:46 - is basically saying hey you could go do
168:48 - both of these simultaneously I'm just
168:50 - gonna wait for both of them to finish
168:51 - and this in theory can you visually see
168:57 - the difference of that I don't know how
168:58 - obvious that is to you it'll be much
169:00 - more obvious if I did something like
169:02 - color the various pivot points let's see
169:06 - if I can do that and I have a really
169:07 - goofy idea of how to do that which i
169:09 - think is probably terrible but I'm gonna
169:11 - this is the last thing I'm gonna do
169:13 - before putting this aside so what if I
169:16 - have an array because there's multiple
169:17 - pivot points that are being tracked what
169:20 - if I have an array called pivots and any
169:24 - time should I draw the pivots as they're
169:28 - moving or just draw them as they're let
169:32 - me draw them as they're moving do it I'm
169:33 - gonna do overkill oh this might not be
169:34 - the classic way of visualizing this but
169:36 - basically whenever there I get a pivot
169:39 - index I want to add it to this array I
169:42 - really want to use just like a lookup
169:44 - table I actually that's what I should
169:46 - use aha so I what I want is an array
169:52 - does I really want an array of true and
169:54 - false like is it what what's this state
169:56 - let me do this this is
169:57 - much better states so as I'm creating my
170:01 - values the states of every single spot
170:08 - is going to be negative one so the what
170:11 - the current status of a particular
170:13 - element of the array is is how I'll
170:15 - choose to color it so in the case of
170:18 - whenever I get a pivot index I'm going
170:21 - to say pivot I'm gonna say States pivot
170:24 - index equals Z equals zero so negative
170:29 - one means nothing zero means it's a
170:32 - pivot index so this is a little bit
170:34 - ridiculous but let me just bear with me
170:36 - and now I'm gonna say if if States index
170:47 - equals zero which cement for pivot index
170:49 - fill make it red otherwise otherwise
170:58 - make it white this is gonna be good I
171:02 - think this is gonna get us what we want
171:06 - so you can see anytime there's a pivot
171:08 - index it set it to right now I'm not
171:10 - unnhhh ascending it I'm not unsetting it
171:12 - so one thing that I could do then now is
171:15 - I could say here if I if I'm moving the
171:20 - pivot index right before I move it let's
171:22 - set that back to negative one and then
171:25 - set it again to zero so now you can see
171:31 - the pivot indexes are moving now again
171:33 - I'm not unsetting it when it's done
171:35 - which is sort of a problem so I suppose
171:38 - if I wanted to do that I could also say
171:40 - States index this is this is where it's
171:44 - like finished there you go see it's
171:48 - happening very very fast but that's the
171:50 - pivot stuff moving around
171:51 - I don't again I don't know if I'm doing
171:52 - this in the right way but also might be
171:54 - interesting too as I am sorting between
171:58 - start and end any given active partition
172:02 - like I could do I equals start I is less
172:05 - than end I plus plus I could say state
172:11 - it's index I equals 200 r1 and then I
172:17 - could also at the end after I'm done set
172:23 - it back to negative 1 so I could say
172:28 - that if else if States index I equals 1
172:40 - then maybe make it blue again I'm not
172:44 - doing too thoughtful about my color
172:45 - schemes but let's see what happens here
172:48 - I don't know that's kind of like what's
172:57 - going on let's give ourselves a much
172:59 - bigger space to work with let's actually
173:02 - make let's make this the full window
173:07 - window height let's make the let's make
173:12 - the width of each one just 5 and what
173:15 - most and let's let's make the width of
173:20 - each one 5 are we doing next
173:28 - let's
173:29 - the width of each one five and then I
173:31 - think I probably want to say no stroke
173:35 - here because if they're thinner that
173:39 - might mess up how it looks and let's
173:41 - like let's make a hundred milliseconds
173:43 - sleep time between each swap and let's
173:47 - go enter full screen hit refresh let's
173:53 - do this again and I'm gonna let you
173:56 - enjoy this I'm gonna step aside
174:09 - [Music]
174:34 - okay
174:35 - these colors are terrible I gotta have
174:40 - different colors this is cool it's also
174:42 - too slow so I can leave this full screen
174:51 - so I need to change the colors let's
174:55 - make it alright I need to change the
174:58 - colors those were no good so let's do
175:00 - something like this and something like
175:03 - this I don't know I'm not good at
175:08 - picking colors and then and then let's
175:12 - see how that looks
175:14 - mmm the pivots aren't marked oh because
175:20 - I'm on because this is undoing the pivot
175:27 - now but this is awaiting the swap oh so
175:31 - uh oh and then there's another mistake
175:33 - if I don't want to if I is pivot index
175:38 - so as long as I don't if I is not equal
175:41 - to pivot index I don't want to undo I
175:46 - don't want to undo the colouring of it
175:48 - being currently sorted so I think I just
175:52 - want everything to be much brighter and
175:54 - I maybe if I just use HSB can someone
176:00 - make me a nice color palette
176:08 - right cuz that's the pivot moving so
176:12 - that red let's I have an idea
176:14 - I like these colors actually they're
176:16 - just they need to switch where did I do
176:19 - the colors are these cult
176:21 - let me change let me change the colors
176:24 - again 255 25 100 125 255 and now let's
176:33 - refresh okay so I'm gonna that blue I
176:38 - feel like needs to be brighter one 50
176:41 - 100 150 100 it looks so weird over there
176:49 - it just needs to be much brighter oh and
176:58 - not there we go
177:00 - I forgot that I
177:13 - how are these colors I'm so work the
177:16 - worst of this put this back to 255 D 6
177:33 - FF b7
177:34 - all right D 6 FF b7 and what was the
177:43 - other one
177:44 - E Oh seven seven seven D yeah that's
177:54 - pretty nice thank you I want to switch
177:56 - them though
178:05 - all right this'll do
178:12 - let's make it faster let's also make
178:15 - these ten and let's make it alright
178:28 - alright thank you to the chat who
178:30 - offered these colors as suggestions I'll
178:32 - just leave it at that
178:33 - I'm gonna make the lines a little
178:36 - thicker let's like the width of 10 let's
178:40 - make it run a little bit faster so I'm
178:42 - gonna double the speed and here we go
178:45 - whoops
178:48 - what just happened there and here we go
178:54 - enjoy this bubble sort visualization Hey
178:59 - and here we go enjoy this bubble sort
179:04 - visualization as always I always forget
179:10 - to this stop it stop it stop my brain is
179:20 - so melted is it 2 o'clock no it's 1:30
179:21 - I'm okay alright hold on let me
179:35 - both okay all right I've got the code in
179:39 - the state that I want I'm gonna play you
179:41 - out with and give you and let you enjoy
179:43 - this last visualization of the quicksort
179:47 - and please make a nicer version of this
179:50 - bad sound
179:52 - add better colors do all sorts of stuff
179:54 - here I'm gonna hit refresh as always I
180:00 - always forget thanks for watching this
180:19 - challenge I don't think I'm gonna be
180:29 - getting back to the Rubik's Cube it
180:38 - slowed down for the sake of visuals
180:40 - simples quality don't forget to solve
180:43 - the rusev okay just for everybody who
180:46 - came late our fruit came early
180:51 - I'm not gonna do any more coding but I
180:56 - did say that I would attempt to solve
180:59 - the Rubik's Cube
181:01 - so let me shuffle let me shuffle it I'm
181:05 - shuffling it the drawing loop hasn't off
181:09 - by one error okay all right I feel like
181:17 - I should give a prize to whoever guesses
181:18 - the closest to the amount of time this
181:22 - is gonna take me so all right maybe a
181:27 - hashtag I will send you a code a train
181:31 - t-shirt you have the next one minute to
181:36 - post to Twitter hashtag train
181:48 - Rubick strain hashtag Rubik's strain at
181:51 - Schiffman guess how long this is gonna
181:54 - take me knowing I have to leave it to
181:56 - I've been live streaming for three hours
181:59 - it's either how long it's going to take
182:01 - me or the exact amount of minutes or at
182:04 - what time I give up and I'm gonna start
182:06 - a timer I don't have an egg timer with
182:09 - me but this is fine I will get a timer
182:13 - going stopwatch I do exit full-screen
182:26 - but why is my keyboard no longer working
182:29 - it's so weird okay so this will be the
182:36 - official time whoever note in the chat
182:43 - is no good so unfortunately I'm only
182:45 - going to accept official I'm only gonna
182:47 - accept submissions on Twitter
182:51 - up until 1:30 5:00 p.m. Eastern Time
182:56 - so if your submission comes after 1:30
182:58 - 5:00 p.m. Eastern Time
183:00 - the submission is not valid and your
183:07 - submission is not valid and yeah alright
183:14 - by the way I'm really bad at this oh the
183:16 - first time I ever tried to solve Rubik's
183:17 - Cube was like three days ago and I
183:21 - usually follow tutorials which I won't
183:23 - be doing although I do have some out a
183:25 - sheet of different algorithms oh no no
183:27 - no 3.2 yep
183:29 - by the way if you're anything less than
183:32 - 15 minutes I think you're way off just
183:34 - in case you're wondering okay it's 135
183:37 - now submissions are officially closed
183:40 - can somebody timestamp the official time
183:42 - on Twitter help me in the slack channel
183:46 - and and I mean you need to give me an
183:50 - amount of time in minutes hopefully the
183:52 - submission should all have minutes and
183:54 - seconds and I will send the winner a
183:58 - coding train
183:59 - t-shirt of your choice would it be funny
184:05 - if I like memorized all the shuffling
184:07 - moves I was doing and just did it
184:08 - backwards I did not so alright ready
184:16 - here we go and this is counting like if
184:19 - I have to go to the bathroom if the
184:21 - camera shut off this is not this is the
184:23 - actual real physical time any
184:26 - interruptions there's a fire drill I
184:29 - have to leave and come back this is no
184:32 - so there's no wiggle room there this is
184:34 - the actual one from when I hit start to
184:36 - when I hit to stop and if the answer
184:38 - might be I give up
184:39 - although I guess that's canoe I could
184:41 - come back and finish the livestream
184:43 - later and add those two together no but
184:45 - so it's however long I do this for it
184:47 - knowing I have to leave by two okay so I
184:50 - appreciate all these who are guessing in
184:52 - the chat I don't think I can accept
184:55 - those because it's hard for me to like
184:58 - figure out who you are and like the
185:01 - timecodes of them and like see the chat
185:03 - later so I'm gonna go with Twitter and
185:05 - I'll do this again if there's a better
185:08 - way to do it okay here we go ready okay
185:14 - don't laugh at me so first what I'm
185:17 - doing is I'm I'm like I my heart is
185:21 - beating really fast I got super nervous
185:22 - so this orange side piece needs to be
185:26 - with orange so that's there I'm making
185:29 - the I don't what you call this the cross
185:30 - first this is blue so it's gonna go wait
185:36 - where's the white and blue it's the
185:38 - wrong way though or if I put it up here
185:42 - [Music]
185:46 - I'm so nervous
185:48 - just making I read good okay red is in
185:50 - place red is in place orange is in place
185:54 - 19 the other middle piece green green is
185:59 - gonna go
186:15 - there we go okay green no no the other
186:18 - side other words where's where's your
186:19 - friend green mmm yeah there we go okay
186:24 - green red orange so I just need the
186:28 - other last one here oh there it is blue
186:30 - okay good so I've got blue blue orange
186:33 - orange green green red red that's good
186:37 - now let me put these on the white side
186:41 - now I just need to finish the top layer
186:44 - so this is white with green
186:50 - wait where's green there's like weird
186:55 - that piece go go here wait why is that
187:00 - orange now that's orange okay go back
187:05 - that's the wrong piece silly no you
187:10 - don't go there you go orange white with
187:13 - orange goes here ah the other way no
187:24 - wait this is in the right place this
187:25 - isn't the right place this is in the
187:26 - wrong place okay everybody's gonna be
187:28 - okay this is in the right place what
187:32 - goes here I need a white piece with an
187:34 - orange and a green where was that I just
187:36 - had that piece oh here it is but it's
187:37 - like on the bottom well that's annoying
187:40 - let's do the one that's though in the
187:42 - right place white with blue so that's
187:45 - just gonna go here oh no no the blue
187:51 - goes over there that's red there we go
187:58 - come back to me
188:00 - oh wait a sec oh yeah no we're fine
188:02 - we're still good we're good closer
188:05 - what am I at now in three minutes it's
188:08 - not so bad oh this is like really
188:12 - embarrassing I mean it's not a Barrett
188:14 - bursting is the wrong word okay let me
188:15 - put this to the side and then now this
188:19 - is an orange pea
188:21 - orange on this side white here wears
188:24 - orange tier so this needs to go one over
188:29 - and this comes down no oh it goes the
188:32 - other way
188:34 - goes the other way no where'd you go
188:39 - where'd you go my white piece with the
188:41 - orange hey hold on a sec this part I
188:47 - usually do way faster and this is like
188:49 - me being nervous okay ah perfect
188:51 - this has got to go right this has got to
188:54 - go right right there so oh but it's on
189:09 - the other side
189:09 - ah there we go what am I thinking there
189:16 - we go okay of course of course okay
189:18 - we're doing well now one more piece that
189:25 - should be easy
189:26 - good okay so I've got I've got at the
189:28 - top and one layer and now I need to
189:33 - figure out so like this piece here on
189:35 - the bottom needs to go here this piece
189:38 - needs to go here from left to right
189:40 - because it's blue goes here orange goes
189:42 - there so I go here left to right this
189:47 - comes down one two I totally messed that
189:52 - up no no that's right and put the white
189:58 - back alright I don't know if I put that
190:01 - in the right place oh I put it backwards
190:03 - Oh cuz I wasn't on such an idiot I the
190:07 - bottom thing wasn't matching up I needed
190:09 - to be on the orange side no what I did
190:10 - it right I moved the piece there but
190:12 - it's the wrong way I don't have to move
190:13 - it back that's really annoying but this
190:15 - one let's get this in the right place
190:17 - okay so this now here I'm going to move
190:21 - this from here to there this goes from
190:23 - here to there so left left to right left
190:28 - to right this comes down this goes here
190:33 - put the white back
190:36 - okay that's looking good now I need this
190:39 - piece oh right to left was gonna be hard
190:44 - I just go right to left right to left so
190:47 - this goes right to left this goes here
190:53 - right to left this comes down this goes
190:56 - like this it goes like this
190:58 - put the white back I had so much trouble
191:02 - at the beginning step because I got so
191:04 - nervous
191:04 - alright now green and yellow oh no
191:07 - yellow is no good green and orange oh
191:10 - this goes left right to left right to
191:13 - left so this needs to go here
191:15 - right to left this comes down do this
191:19 - this goes back up this goes here there
191:24 - we go okay almost getting there I need
191:27 - another piece yellow yellow oh this is
191:30 - the piece oh I left that piece there so
191:33 - I just got to like move anything there I
191:35 - guess move this so this is let me do
191:38 - left to right do I have any easier time
191:40 - with left to right who knows left to
191:44 - right left to right move this down this
191:49 - here should this should get it to me
191:54 - okay here we go
191:56 - no now where's that piece here it is
192:00 - it's going left to right so left to
192:05 - right and move this here left to right
192:09 - move this down move this over move this
192:13 - back up
192:18 - alright ok so I've got the top and I've
192:22 - got two layers I'm at seven minutes I'm
192:28 - like way better than I thought
192:29 - so just so you know now I have a
192:30 - printout of some algorithms doesn't say
192:33 - when I'm supposed to use them so I still
192:34 - have to figure that out but oh and I
192:38 - have this is the bar so this is known as
192:41 - the bar I'm the yellow side so I think I
192:43 - need it to be like this like sure I have
192:45 - these matched up who knows
192:47 - so the bar should be up going across I
192:49 - guess and the white is on the bottom
192:52 - yellow is the top here let's see so I'm
192:55 - going to do forward right up right
193:00 - counterclockwise up counterclockwise
193:02 - forward counterclockwise okay that's
193:05 - good now I need to get these two corner
193:09 - or this is the kind of like the fish but
193:12 - I have this corner already so I think I
193:14 - can do the next algorithm which is and I
193:18 - want it to be facing me so I want to do
193:23 - right up right counterclockwise
193:26 - up right up right counterclockwise oh
193:31 - well like I have a different
193:34 - configuration hmm let's try it again
193:40 - somebody somebody who's like a expert
193:42 - cuber is going to tell me how I'm doing
193:45 - this wrong which all right so let's try
193:47 - this again
193:49 - right okay don't this way this will do
194:06 - it this is it oh I need this to go here
194:08 - first let's see I don't know
194:10 - right oh okay that's better
194:18 - different something Oh a cou so now can
194:23 - I not this this will get me this will go
194:25 - there now I think
194:28 - oh maybe no no I
194:39 - that's again ah oh oh hold on just mess
194:53 - something up oh I messed something up
194:56 - I'm okay I'm getting it back okay I'm
194:59 - back I need to do it from a different
195:09 - corner first then when you get the fish
195:11 - do it the way you know it
195:12 - Oh Kevin Hernandez this time there are
195:14 - two yellow corners you need the one in
195:16 - the bottom right facing you
195:18 - yeah don't I need one facing me but
195:20 - they're not it's not there so should I
195:23 - do it like this first to move it let's
195:25 - see are 2d people are giving me all
195:33 - right let's all right let me try it from
195:35 - this way okay ah okay now I got the fish
195:45 - the way I know it Oh camera went off oh
195:53 - it's funny that I have my algorithm
195:55 - sheet in the view that's embarassing but
195:58 - I guess appropriate align the edges okay
196:01 - so now I think now I do it this way
196:12 - well I mess something up tonight yeah
196:16 - okay this is good
196:18 - this is good because now I have this
196:20 - here yeah there we go
196:30 - bingo okay now do I have same corners I
196:33 - have a lot of sit oh my god I have all
196:35 - same corners I've never seen that so
196:38 - that's weird I'm supposed to put the
196:40 - same corners to the bat let me all the
196:44 - corners are met I've never seen that so
196:47 - I assumed I could just pick any side
196:49 - then right okay I made it worse up but I
197:14 - have one just one same corners maybe
197:16 - that's what I needed so now I have same
197:18 - corners do it they should probably match
197:21 - up with their side right so let me try
197:24 - this again
197:46 - okay ah oh no no no this is good this is
197:54 - what I want I'm in the last step now I
197:55 - need to move these I did it extra I did
197:57 - it twice i undid it because I need to
198:00 - move these if red is here I need to move
198:04 - the blue clockwise orange no no blue
198:10 - goes here or blue they're in the wrong
198:12 - green goes here oh I've never seen this
198:15 - this is bad because they're going
198:19 - different directions blue needs to go
198:21 - clockwise they need to swap dad I've
198:24 - never seen before that I've never seen
198:30 - before
198:31 - yeah oh boy
198:33 - I've never seen this before alright let
198:35 - me just try clockwise and see what
198:39 - happens
198:41 - cuz this goes clockwise with this and
198:45 - that I've not seen I think I really made
198:46 - something crazy happen do I need to do
198:48 - the same corners thing again cuz I could
198:51 - try that I'll try this I mean what's the
198:55 - worst thing that happens
198:57 - [Music]
199:12 - okay oh I have one side done red goes
199:15 - here green goes here and orange goes
199:22 - there this is weird so this is
199:23 - definitely clockwise with one side done
199:26 - so this should be good
199:27 - I should be good this should be the last
199:29 - step
199:44 - [Applause]
199:47 - 14 minutes 37 seconds at point five one
199:52 - but anyone who ever is close to 14
199:55 - minutes 37 seconds and 51 there we go
199:59 - but you know having my cheat sheet
200:02 - really I did all the way up to step four
200:05 - without the cheat sheet that was pretty
200:07 - good alright everybody thank you for
200:10 - tuning in to this live stream I help me
200:16 - track down the winner on Twitter this
200:18 - was the time and I'm gonna do it doesn't
200:25 - matter whether you're over/under if two
200:27 - people guessed 14 minutes so I'm gonna
200:30 - consider this the closest I said I
200:33 - haven't looked I'm gonna consider this
200:35 - because I took me a little bit to click
200:36 - it I'm gonna floor this and forget the
200:40 - five one so the official time is 14
200:43 - minutes 37 so I'm going to do it by
200:46 - seconds if there are two people who tied
200:49 - I will send two shirts and I'm just
200:53 - gonna do my best
200:54 - I don't like to do these kind of like
200:55 - contest things because I feel like I
200:57 - always heard somebody mess something up
200:59 - and somebody's upset but 14 minutes so
201:03 - if you guessed 14 minutes in 40 seconds
201:05 - and somebody else guessed 14 minutes and
201:07 - 34 seconds you both get a shirt okay
201:21 - if people guessed in milliseconds I'm
201:24 - gonna ignore your milliseconds so your
201:26 - milliseconds don't count no rounding up
201:28 - rounding down I'm just gonna ignore them
201:31 - again I should made this all clear
201:35 - but hopefully hopefully this will be
201:39 - obvious on Twitter maybe those of you in
201:43 - the slack group can help me out here I
201:45 - didn't I kind of got pie there 3.1415
201:50 - there's so digits of pi in there alright
201:54 - everybody so what did I accomplish today
202:05 - know what I 8081 maybe know what is
202:09 - going on here oh there we go I
202:12 - accomplished this quicksort
202:14 - visualization I floor one two three four
202:24 - four is the winner okay so I
202:27 - accomplished this and I also
202:29 - accomplished this I'm definitely gonna
202:34 - come back and continue the rubik's cube
202:36 - next week but you can see here's my
202:43 - dozen can't reply any moves to it but
202:45 - I've drawn a Rubik's Cube and I'll come
202:48 - back and continue that next week I am
202:50 - exhausted so if you would like to
202:53 - support the work that I'm doing one way
202:57 - that you could do that today with the
202:58 - new sponsor is brilliant org you can
203:01 - sign up for a brilliant at brilliant org
203:04 - slash coding train sign up for free if
203:07 - you're interested in the premium
203:08 - subscription the first 200 people to
203:10 - sign up from today will get 20% off so I
203:13 - am going to say goodbye I'm will be back
203:16 - next Wednesday at 10:30 a.m. Eastern for
203:19 - another livestream stay tuned for edited
203:22 - versions of these coding challenges to
203:23 - come out later today on up today
203:26 - definitely not today by next week
203:28 - sometime and I will see you all in the
203:31 - future thanks for
203:32 - boy this was this was way longer than
203:34 - usual and I definitely need to take a
203:36 - break now so I'll see you later thanks
203:39 - for humoring me with my new obsession
203:41 - with Rubik's cubes if you've got any
203:43 - tips for me any good I really would
203:44 - prefer to get a book especially a book
203:46 - about the Rubik's Cube that's
203:47 - appropriate for a ten-year-old I would
203:49 - really love to hear from you because you
203:53 - know watching YouTube videos is great
203:54 - but since it's nice to be off the screen
203:56 - and so a good book for a ten-year-old
203:59 - about solving Rubik's cubes or a
204:00 - seven-year-old would be great and see
204:05 - you next time I'm gonna play with this
204:08 - song as always I always forget
204:11 - [Music]
204:38 - [Music]
204:50 - [Music]
205:00 - [Music]
205:04 - this this never forget to this stop I'm
205:10 - gonna do this this dot this dot this
205:12 - star this star song never forget the
205:14 - Vista but somebody composed that song
205:16 - for me