00:00 - (tooting train whistle)
00:01 - Hello, welcome to another
holiday coding challenge!
00:04 - Again with the snowflakes!
00:05 - This is my second snowflake challenge,
00:07 - but in this time instead
of creating an algorithm
00:10 - to draw a snowflake, I'm
going to ask a neural network
00:13 - to draw a snowflake for me.
00:15 - Now, there's a lot of
pieces to all of the work
00:18 - that's gone in to making the fact
00:20 - that I'm going to be able to do this
00:21 - in well what probably will be
about four and a half hours,
00:23 - but really could take just
about 15 minutes possible.
00:27 - The first thing I want to
reference is the Magenta Project.
00:30 - So the Magenta Project
is a make music and art
00:32 - using machine learning research project,
00:34 - it's an open source research
project from Google,
00:37 - and it has a ton of examples,
00:41 - projects with TensorFlow in
both Python and JavaScript,
00:45 - and you can look through at
all these featured projects.
00:47 - The project I want to mention
is, I'll just click over here,
00:51 - is this project called SketchRNN,
00:54 - or draw together with a neural network.
00:56 - Now, if you've watched
any of my previous videos
00:58 - about the Quick, Draw dataset,
01:00 - the Quick, Draw dataset
is this huge collection
01:02 - of millions upon millions of doodles
01:04 - that users from around the world made,
01:06 - playing the Google Quick, Draw game.
01:09 - So what the researchers
from Google Brain did,
01:13 - you can see them credited here David Ha,
01:14 - Jonas Jongejan, and Ian Johnson
01:17 - wrote this paper about
how a neural network
01:21 - could be trained on all of those drawings,
01:24 - so it could learn okay when
somebody's drawing a cat
01:26 - they kind of go like this,
and then they go like this,
01:30 - and it could start to
imagine new drawings of cats.
01:32 - And it's called SketchRNN because
the kind of neural network
01:37 - that it's using is something called
01:38 - a Recurrent Neural Network.
01:39 - And you might have also seen this,
01:42 - Nabil Hassein was here
and did a guest video
01:44 - about generating texting with
a Recurrent Neural Network.
01:46 - A Recurrent Neural Network is good
01:48 - at learning about sequential information,
01:51 - like hello world is
sequential information.
01:54 - H-E-L-L-O space W-O-R-L-D.
01:58 - Music is sequential
information (singing a scale)
02:02 - that's a sequence of notes and rhythms.
02:04 - A drawing is a sequence of vectors.
02:07 - So you can read this paper
all about how they used
02:10 - the Google Quick, Draw dataset
02:12 - to train a model to create new drawings.
02:15 - You could also look at their demo,
02:17 - and this is the code by
the way for their demo.
02:19 - There's a lot involved here
in all of these pieces,
02:21 - and here's the demo right here.
02:23 - So, I'm going to pick cat,
02:25 - and what I can do is I can start drawing,
02:28 - oops, I can start drawing a cat,
02:30 - I'm just going to draw a circle,
02:32 - and then it will pick up for me
02:33 - and finish the rest of the cat.
02:35 - So at some point I will do
a part two of this video
02:39 - where I actually create an
interactive version like that,
02:41 - but one of the things that
is in now the ml5 project,
02:45 - ml5 is a friendly machine
learning for the web library
02:49 - that's built on top of TensorFlow.js.
02:52 - It works with p5 which is the
open source JavaScript library
02:56 - that I use in a lot of my video tutorials,
02:58 - is it has a SketchRNN module for you.
03:01 - So on the one hand you might want to go
03:04 - and look all the way through all this code
03:06 - and read the research paper
to learn how it works,
03:08 - but if you want to
quickly get up and running
03:10 - with playing with a SketchRNN model,
03:12 - what we've tried to put
in ml5 will help you.
03:16 - Now, (laughs) you might
notice that if I go
03:18 - click on reference, at
the time of this recording
03:20 - it doesn't say SketchRNN here.
03:23 - So this is actually a new feature.
03:25 - There's a couple issues
in the GitHub repository
03:29 - for ml5 about things that
don't work perfectly,
03:31 - or need to be added, or fixed,
we welcome contributions.
03:34 - I will come back and maybe
do some more videos with it
03:37 - once it's gotten further along
and there is documentation
03:39 - but for the holiday season let's see
03:42 - if we can get it to
draw a snowflake for us.
03:44 - So, I'm not going to be
able to use the website
03:47 - because the documentation isn't there,
03:49 - but I've got some documentation
03:52 - over here on my invisible
computer (laughs)
03:54 - that I can look at if I need to.
03:57 - So what do I have?
03:58 - I have a blank p5 sketch
with just setup and draw,
04:01 - and also at index.html I should call this
04:04 - Snowflake SketchRNN.
04:07 - I have also in addition to the
p5 libraries being imported,
04:12 - I have the ml5 library and again
04:14 - at the time of this
recording it's version 0.1.3.
04:17 - Hopefully there'll be future
updates to improve SketchRNN
04:20 - and there'll be a higher numbered version.
04:22 - So the first thing that I want to do
04:24 - is I want to make a variable
and I'm going to call it model.
04:28 - So model, I could call it SketchRNN,
04:30 - maybe I should call it SketchRNN,
04:31 - I'll just call it model,
model is the thing
04:33 - that's going to hold the SketchRNN model.
04:36 - It is all of the information,
04:38 - the brain of that neural network
04:40 - that we can ask to generate new stuff.
04:43 - So we can say, hey give me a new point
04:45 - along the path that
you're imagining to draw.
04:47 - So I'm going to say model equals ml5
04:53 - SketchRNN,
04:56 - and then I'm going to just put
a callback in here, model ready,
05:00 - and this is the important
thing, what goes here.
05:02 - So there are a bunch of
available models with SketchRNN
05:07 - and we can see that
list here, whoops, here.
05:09 - For example there is cat,
let's start with cat maybe
05:13 - but we can see all the other ones like
05:14 - the Mona Lisa apparently
is in there, bird.
05:18 - So let's, whatever is available
we can put cat in here.
05:22 - I'm asking ml5 to load the cat model.
05:26 - It's actually doing this from the cloud,
05:28 - the model, all of the data
for this machinery model
05:31 - is stored on a server somewhere,
05:33 - and ml5 knows how to load that for you.
05:35 - So, then what I'm going
to do is add a callback,
05:38 - I'm going to say model ready.
05:40 - I'm going to write a
function called model ready
05:42 - and I'm just going to say
console.log model ready.
05:46 - So let's just run this code
and see if it even just works
05:50 - loading the model without an error.
05:52 - So I'm going to close this demo down,
05:54 - we have my own here.
05:56 - Okay, great the model is loaded,
05:58 - and just to be sure,
05:59 - oh yeah initialized SketchRNN model ready,
06:01 - just to be sure if I
put in here like tiger,
06:04 - which I don't think is something in there.
06:07 - Oh, maybe it is (laughs)
06:10 - guacamole, that must not
be something in there.
06:12 - I spelled guacamole wrong even.
06:14 - Okay, right it couldn't
even find guacamole
06:15 - and I know that's spelled wrong,
06:17 - apologies to guacamole
lovers all over the world.
06:20 - Okay, so we've got the cat
now what do I need to do?
06:23 - The first thing I need to do
as soon as the model is ready
06:27 - is ask for something.
06:29 - So what SketchRNN will give you
06:31 - every time you ask for
it to generate something
06:34 - is what is referred to as a stroke.
06:38 - Now, I'm not going to use
the variable name stroke
06:40 - in my code because stroke
is a global function in p5
06:43 - that sets the outline color of a shape,
06:46 - and I don't want to
get confused with that,
06:49 - but the stroke is a JavaScript
object with a few properties.
06:54 - It has dx, dy, and I think
it's just called pen.
07:01 - And dx is a floating point
number, some number like 1.3,
07:06 - dy is some number like negative four,
07:08 - and pen is a string.
07:10 - It can either be up, down,
07:14 - or end.
07:15 - And what this refers to is a particular
07:19 - stroke of a pen basically.
07:20 - So if you could imagine dx
for the change in x, delta x,
07:24 - dy for the change in y, delta y.
07:27 - If I were to go over 1.3 units
and up negative four units,
07:33 - basically the stroke is this.
07:35 - This is the path of the pen,
07:37 - that's what SketchRNN
should draw right now,
07:41 - and it should either draw it
as a line if the pen is down.
07:45 - If the pen is up it should just move
07:47 - from here to there, right.
07:48 - Because if I'm drawing a
cat, I'm going to draw this,
07:50 - then I'm going to pick my
pen up, move over here,
07:53 - so that action is also a stroke
07:56 - but it's a stroke with the pen up.
07:57 - And then pen end is when
the drawing is finished.
08:01 - So this is what ml5 does, the
actual native SketchRNN model,
08:06 - just gives you all these
things as array of numbers,
08:09 - and so we've kind of made
it as a JavaScript object
08:11 - that makes it a little bit
easier to read hopefully.
08:14 - Okay, so now coming back over here
08:16 - I think I just say model.generate
08:21 - got sketch (laughs).
08:24 - Oh, oh, oh, yes!
08:25 - Now actually, an important
thing that I should probably do,
08:27 - I don't necessarily need
to do this the first time,
08:30 - but because this is a kind
of machine learning model
08:33 - that is giving us sequential information
08:36 - the next stroke, like the
one that comes after this one
08:41 - is quite important, it's
related to this one.
08:44 - But if I want to start
over and draw a new cat
08:47 - I need to kind of go back to the beginning
08:48 - and say start a new cat over.
08:50 - And so a model.reset function
is the thing that does that.
08:53 - So model.reset I'm going to call that,
08:57 - It should be reset the
first time you load it,
08:59 - but I'm going to call that anyway.
09:00 - Then I can say model.generate got sketch
09:03 - and then I'm going to write a function.
09:04 - I'm going to call it got sketch.
09:06 - It should get that stroke path.
09:08 - Let's just call that S
and let's have a variable.
09:12 - I'm going to have a global
variable called stroke path.
09:17 - And I'm going to set that I just going to
09:18 - set it to null when the program starts,
09:20 - and then when I get a new
sketch I'm going to say
09:22 - stroke path equals S,
and then I'm going to say
09:25 - console.log stroke path.
09:28 - So let's see if we get this first thing.
09:33 - Model loaded!
09:34 - Undefined oh.
09:36 - (laughs)
09:37 - That was close!
09:38 - (sad trumpet sound)
09:40 - I forgot, this is
actually very hard for me,
09:42 - I always make this mistake,
ml5 is written in such a way
09:47 - that uses something called
error first callbacks,
09:49 - this is different than how p5 is written.
09:51 - So this got sketch function is receiving,
09:54 - what was actually undefined
there was the error,
09:56 - there was no error.
09:57 - All the callbacks need to
have an error argument first.
10:02 - So, if I wanted to be really
thorough about error handling
10:07 - I might do something like this.
10:12 - So I could console out the error,
10:15 - and then if there is no error
10:18 - now just console log out the stroke path.
10:20 - So this should work now.
10:25 - Load that model!
10:26 - Ah there it goes!
10:27 - So look at this, I need to move
10:30 - this many pixels in the x direction,
10:32 - this many pixels in the y
direction, and the pen is down.
10:35 - So this should be easy
enough for a sample then.
10:39 - If I have an x and a y global variable,
10:44 - I'm going to start them in the middle.
10:51 - Then I am going to, in the
draw loop I'm going to say
10:55 - if stroke path is not
equal to null, right.
11:01 - I got to check do I have
a new stroke path, right.
11:04 - The new stroke path will
come in the callback here.
11:07 - And draw is always
looping, so draw's looping
11:09 - to wait to see that there's a stroke path.
11:11 - And again I could control
how the draw loop works
11:13 - with the query to the
model in a different way,
11:17 - but this is like an easy
way for me to do it.
11:19 - Draw's just going to loop,
then I'm going to say
11:23 - draw a line from x, y, to
x + dx, y plus dy, right.
11:28 - Just draw that line and then what?
11:30 - Let's set stroke path to null again.
11:32 - So once I'm done set
that stroke path to null.
11:35 - Okay, so we should just
see that one first line.
11:42 - Oh dx is not defined.
11:46 - Strokepath.dx, right
it's part of stroke path.
11:49 - I don't know why, the dx
and dy is in the object.
11:56 - Here it goes.
11:59 - Do you see it?
12:00 - Is there a line?
12:02 - How come I didn't see that line?
12:03 - Oh, hmm.
12:05 - Stroke zero?
12:09 - Stroke weight,
12:12 - stroke weight four?
12:14 - What did I miss?
12:15 - Line...
12:16 - Oh you know what!
12:18 - (laughs) I'm sort of forgetting.
12:21 - I just don't want to, I just
want to draw the background.
12:23 - I'm redrawing the background,
so as soon as I draw the line
12:26 - (bell ringing)
12:28 - that's such a mistake that I always make.
12:30 - I drew that line but
then draw looped again
12:32 - and drew the background over it.
12:34 - So this is a thing where
I just want to draw
12:35 - the background once and I'll
draw it in setup in this case.
12:41 - So let's draw it at setup.
12:42 - Here we go, we're getting there.
12:44 - Let's see that line.
12:46 - There it is!
12:47 - That's the first stroke of our cat.
12:49 - So we got the first path
that the neural network
12:53 - the SketchRNN model imagined for the cat.
12:55 - So now what we're going to do is...
13:02 - Ah wait what do we need to do?
13:04 - Are you thinking what I'm thinking?
13:05 - Let's just ask for the next one.
13:07 - So how did I ask for the first one?
13:09 - Model.generate, I can
just say okay I got one,
13:12 - set it to null, generate
and wait for the next one.
13:15 - Also though I need to move
x and y to that new point.
13:19 - So it actually might
make sense for me to say
13:21 - like new x equals, and
this will clean up the code
13:24 - a little bit in a way that
makes it more readable,
13:26 - this is the new x value,
this is the new y value,
13:33 - draw the line from old x to new x,
13:38 - set the stroke path to
null, ask for a new one,
13:41 - and also move x and y to the new position.
13:45 - So now when there's a new one
we should get the new one in.
13:48 - Guess what?
13:48 - Here we go.
13:52 - Let's see our cat.
13:53 - There's our cat!
13:55 - Whoa woo-hoo!
13:56 - And it's console logging its drawing,
13:57 - now, that looks crazy, right?
13:58 - Because I completely ignored the whole
14:01 - pen up versus down thing.
14:03 - So that's something really important.
14:04 - And there's something that
actually I didn't bother
14:06 - to tell you that's kind of important
14:08 - and makes it a little bit more confusing.
14:09 - Let's take out this
console.log by the way.
14:12 - So, the thing that's extra
confusing about the pen up
14:15 - and pen down is when
you get this information
14:18 - it's actually telling you the
pen state for the next stroke.
14:22 - This is not the pen's state
for this particular path,
14:26 - it's the pen state for the next one.
14:28 - Why is that?
14:28 - Well, it's a little bit weird
but if you think about it
14:31 - when you first start
drawing the pen is down,
14:34 - it has to be down, that's the definition
14:36 - of the beginning of the drawing.
14:37 - And then when you're done you're saying
14:40 - finish that last one then end.
14:42 - So, what it really is it's the pen state
14:45 - that you get in the previous
stroke sets the next one,
14:47 - and when it's end we're done.
14:49 - So let's try implementing
that, and a way we can do that
14:52 - I think is just by having a variable
14:54 - that's called like previous
pen, and previous pen,
14:58 - or I can just call it pen
actually, let's just call it pen.
15:01 - Because by definition pen is down.
15:04 - So pen is going to be down to start with.
15:06 - Pen is down.
15:08 - And here I'm only going to
actually draw it if pen,
15:13 - whoops sorry,
15:14 - if pen equals down then I should
actually draw the drawing,
15:20 - draw the line sorry,
15:22 - I should always, oh I
should always move X, right.
15:28 - So I always want to move X, but
I only want to draw the line
15:33 - if pen is down, and then what I need to do
15:37 - is here I need to say pen equals,
15:40 - oh I am going to need like a previous pen.
15:43 - Or can I do this like right before
15:45 - I get the new stroke path?
15:47 - I'm confused.
15:49 - Oh I can just say, I can say
pen equals strokepath.pen.
15:54 - So basically the pen starts as down,
15:57 - then I'm going to draw
and then pick up that
16:00 - for when the next time comes around.
16:02 - So don't pick up the actual
pen value from the object,
16:06 - you might need to think
about this for a little bit.
16:08 - This is really like previous pen,
16:10 - maybe I should call it previous.
16:12 - Because really what I'm checking here
16:14 - is the pen from the last time
16:15 - 'cause I'm picking it up after.
16:17 - Let's see if this works.
16:18 - (snare drumrolling)
16:22 - Look at that cat! (laughs)
16:25 - I was waiting for like, here's the thing,
16:27 - we don't know what we're going to get.
16:28 - This has just been trained on what
16:30 - users all over the world drew cats.
16:32 - And sometimes we're going
to get a nose and whiskers
16:34 - and sometimes we're not.
16:35 - We're going to see a
variety of different cats.
16:37 - Okay, but now we also need
to figure out what to do,
16:39 - we need to check for pen ending.
16:42 - So, if I here were to say
16:46 - if pen, let's set the stroke path to null,
16:49 - we can do all this but as long
as pen is not equal to end
17:00 - then I am going to say generate the new.
17:03 - So if pen is equal to N
don't bother to generate
17:06 - another stroke, and then I'm
going to just put in here
17:08 - else console.log
17:13 - drawing complete, okay.
17:16 - Let's give this a try.
17:17 - We're going to see the cat.
17:22 - There's out cat, there's our cat.
17:25 - Drawing complete!
17:27 - So maybe we should have
it restart a new one?
17:29 - And this is going to be
good for our snowflakes,
17:30 - you'll see in a second.
17:32 - So actually instead of drawing complete
17:33 - what I could actually do now
is I could say model.reset
17:40 - and model.generate again.
17:45 - So this is going to
instantaneously do another one.
17:51 - Let's see if this works. (laughing)
17:52 - Here's a cat, oh you know what,
17:54 - it's going to do it
from wherever it ended.
17:57 - So the other thing I need to
do is reset where x and y go,
18:00 - so let's say x goes back to
the middle of the screen,
18:04 - y goes back to the middle
of the screen also.
18:07 - It takes a while to load
the model, so each time
18:09 - I'm refreshing I have to
wait a little bit. (laughing)
18:13 - So let's see our cat, I
also need to give myself--
18:14 - oh look at that it's a
very different kind of cat.
18:16 - Drawing complete now
it's doing another one.
18:18 - So this is perfect because this is exactly
18:19 - what I want to do with snowflakes,
18:21 - this is exactly what I
want to do with snowflakes,
18:23 - so first let's change this to snowflake.
18:26 - Let's make this x a random place.
18:30 - Let's make this y a random place,
18:33 - and actually let's also
translate to the center.
18:40 - I want to translate to the center,
18:42 - and I'll explain why in a second.
18:44 - So actually this is going to be at random,
18:50 - anywhere randomly in the canvas,
18:53 - so x is going to be
between negative half width
18:56 - and positive half width.
19:02 - Y is negative half height,
positive half height.
19:06 - And then I want to do
exactly the same thing
19:09 - whenever I finish the snowflake.
19:13 - Okay, here we go.
19:15 - And let's see what happens.
19:18 - I don't know how big these
snowflakes are going to be.
19:21 - There's a nice snowflake.
19:24 - There we go, look it's
drawing snowflakes. (laughing)
19:26 - So I wanted to create a
big scene of snowflakes,
19:29 - so I think in order to do that
19:30 - I need to scale everything down.
19:33 - And so I could do this in so many--
19:36 - what if I just...
19:39 - What if I just did this.
19:44 - What if I just scaled
all the dx's and dy's
19:48 - by like one percent, by ten percent.
19:50 - I was actually going to do
it a totally different way,
19:53 - but would this actually work this might be
19:55 - an easier way to do it.
19:58 - Yeah, there we go.
20:00 - All right, here is our
festive world of snowflakes,
20:05 - and I am going to make this larger,
20:13 - I'm going to get rid of
the console, do this.
20:17 - Whoops.
20:20 - Whoops.
20:21 - (laughs)
20:25 - Nice big canvas.
20:26 - Oh, there we go that's good enough.
20:29 - Okay, go!
20:31 - Draw snowflakes!
20:32 - So (laughs) there we are everybody.
20:36 - So you could imagine you
could probably create
20:37 - a whole scene with a
bunch of different things,
20:39 - and do much more.
20:40 - I'm going to let this
run for a little bit,
20:42 - we'll speed this up so we can see what
20:44 - this scene of snowflakes looks
like in a couple minutes.
20:47 - (light cheerful music)
20:57 - All right, so as you can see--
20:58 - by the way during all that time (laughs)
21:00 - I changed the background
to black, made it sort of
21:02 - full screen and drawing
the snowflakes white.
21:04 - But you can see this is
what after it's drawn
21:06 - a whole bunch of them this is what we get.
21:09 - So I would encourage you,
this is what's going to be
21:10 - interesting about this is oh
could you save those in objects
21:13 - and then combine this with my last year's
21:16 - snowflake snowfall coding challenge?
21:18 - Could you think about color,
could you animate them
21:21 - in some way, what other
types of things might you do
21:24 - with SketchRNN into a scene,
so many possibilities.
21:27 - I'm sure you will create something.
21:30 - Take a look in this video subscription
21:32 - for the link to the codingtrain.com page
21:35 - where you can submit
your versions of this,
21:37 - and hopefully when you're watching this
21:40 - there'll be more information also
21:42 - about SketchRNN on the ml5 website itself.
21:44 - Okay, thanks for watching!
21:46 - (tooting train whistle)
21:47 - (light cheerful music)