00:01 - Hello, and welcome to
the first tutorial video
00:04 - in this new series, working with
data and APIs in JavaScript.
00:08 - So in this first video, I just
want to look at one thing,
00:10 - the web fetch API.
00:12 - Fetch is a function.
00:12 - It's a wonderful function.
00:14 - It allows you to fetch
stuff-- data, images,
00:16 - from all sorts of
different kinds of places
00:18 - and do stuff with it.
00:19 - So we're going to start
with a very basic example.
00:21 - It's right here.
00:23 - It fetches a rainbow image,
a local file, a JPEG file,
00:27 - and displays it on
the web page itself.
00:30 - That's going to build-- that's
the foundation on top of which
00:34 - we will build
other examples that
00:36 - are grabbing a
spreadsheet of data
00:37 - and graphing it, or reaching out
to some like Weather Service,
00:40 - and getting the local--
the temperature, based
00:42 - on the latitude and longitude.
00:44 - All sorts of
possibilities, we're
00:45 - going to start just
by looking at fetch.
00:47 - The best place for you to
learn all of the details
00:49 - with everything you
could ever possibly want
00:51 - to know about the fetch web
APIs is on the Mozilla Developer
00:55 - Network site.
00:56 - So that's where
I tend to look up
00:58 - documentation stuff
for JavaScript stuff
01:00 - I want to do in the browser.
01:01 - I'm going to show you
a small slice of what's
01:03 - possible with Fetch and kind of
build on that as we go video,
01:06 - video to video.
01:07 - There's this idea
in web programming
01:09 - of making a request, an HTTP
request, a hypertext transfer
01:14 - protocol request.
01:15 - I could make a get request.
01:16 - Will you please-- could I
please get some information.
01:20 - I can make a POST request.
01:21 - Could I please send
some information to you?
01:23 - And we're going to do both
of those kinds of requests.
01:26 - And fetch can actually
both retrieve and send.
01:29 - But in this example, I just
want to look at a simple
01:32 - get request with Fetch.
01:34 - Let me outline
these steps for you.
01:36 - So that our program
is going to do--
01:38 - the first thing it's
going to do is going
01:40 - to call the fetch function.
01:43 - And it's going to give it
a single argument, which
01:46 - is the path to the resource.
01:48 - And in this case, it's
going to be a file.
01:50 - And that file is just going
to be a local file called
01:52 - rainbow.jpeg.
01:55 - The next thing we need to do
is deal with the response.
01:58 - So when we call fetch,
a response comes back,
02:01 - presumably with the data we're
looking for somewhere in there.
02:04 - I mean, it could be an error
or other things could come back
02:06 - as part of that response.
02:07 - But I'm just going to
write down response.
02:10 - Now this involves this
idea of a promise.
02:13 - And the fetch
function is a function
02:16 - that happens asynchronously,
meaning we call fetch,
02:19 - but some time passes
because it takes some time
02:22 - to retrieve that data.
02:23 - So how we get the response
as part of a promise
02:27 - is a detail that
I'm going to have
02:29 - to look at specifically
when we get into the code.
02:32 - And I will also include
in its video's description
02:35 - some links to further
details about how
02:38 - to work with JavaScript
promises, some other videos
02:40 - that I've made that might
fill in some of the gaps here.
02:42 - The response is actually
a stream of data.
02:46 - So we get the response but
we need a whole other step
02:50 - because we need
to read that data.
02:52 - We need to sort of
like complete that data
02:54 - and store it in a format
that we can work with.
02:56 - And the kinds of
formats we might have
02:58 - is like-- oh, it's text data.
03:00 - Or it's a blob.
03:01 - Maybe it's like image data
would come in as a blob.
03:04 - There's all sorts of--
there's array buffer.
03:06 - And a really, really
important one is JSON.
03:09 - So JSON stands for
JavaScript Object Notation.
03:13 - And this is going to be
a format for storing data
03:15 - that we're going to see
again and again and again.
03:18 - But in this case, we
want to get it as a blob.
03:21 - So I think we could call this
third step like complete data
03:26 - stream.
03:27 - And what I think
complete data stream--
03:29 - I really mean complete
and grab the data that's
03:32 - in the body of the response.
03:34 - So there's this concept
of the response body
03:37 - which is pretty important, which
is where the data actually is.
03:40 - But it should be
noted that there's
03:41 - lots of other metadata about
the network communication
03:45 - that's in the response as
well, that you could look
03:47 - at in certain circumstances.
03:49 - So once we've done that, we've
completed the data stream.
03:52 - We've got the image blob.
03:54 - And then we can just--
03:55 - this is really the
steps for using fetch.
03:58 - But in this
particular scenario, I
04:00 - want to make an image element.
04:03 - Make an IMG HTML Dom element.
04:08 - Make an image element
with that data.
04:12 - OK, so these are the
steps of this example.
04:15 - And I think we can
just go code this now.
04:16 - So what I'm beginning
with is just
04:18 - some boilerplate HTML basic
HTML file with nothing in it.
04:22 - And so let's add
some stuff to it.
04:24 - So first, let me add an
image element to the body.
04:28 - And I'm going to leave the
source of the image element
04:31 - blank.
04:32 - But I'm going to give it an ID.
04:33 - And I'm going to
call that rainbow.
04:35 - The next thing I
want to do is just
04:37 - add a script tag so I can put
some JavaScript with presumably
04:39 - that fetch function.
04:41 - Now ultimately, I might
want to put my JavaScript
04:45 - code in a separate file.
04:46 - I might want have a whole
build system for my project.
04:48 - But we're just working
with the basic ideas here.
04:50 - So I'm going to
just do everything
04:52 - in one file, one
HTML file that has
04:53 - the HTML stuff and the
JavaScript stuff in a script
04:56 - tag.
04:57 - And I'm going to say fetch.
04:59 - And I'm going to
fetch rainbow.jpeg.
05:02 - I'm going to put
that in the code
05:03 - and I'm also going to add a
console.log about to fetch
05:09 - a rainbow, because why not.
05:12 - So I'm using something
called live server--
05:15 - it's a node package--
05:16 - to host this particular
email page on my computer.
05:20 - So every time that I hit Save,
it updates in the browser.
05:23 - And you can see that now I
have that console.log there.
05:26 - Now I said earlier
that the fetch function
05:28 - returns a promise.
05:29 - And a promise is a
way in JavaScript
05:31 - to handle an asynchronous event.
05:33 - It gets resolved when
the event is over,
05:36 - when the data is retrieved.
05:37 - And I will refer you
to some other videos
05:40 - on my channel that go into
promises in more depth.
05:42 - But the quick explanation
here is that you
05:46 - can use the method then.
05:47 - So the method then
is a place where
05:50 - I can handle this response.
05:51 - So right now, what you're seeing
is I type the method then--
05:55 - I put an argument response--
05:57 - I use the JavaScript function
arrow syntax to then do
06:00 - something with that response.
06:02 - And what I want to do with
that response honestly,
06:04 - is convert it to a blob.
06:06 - But before I do that, let me
just say console.log response
06:10 - just so I can see it.
06:12 - So it helps to spell
things correctly.
06:14 - Response.
06:16 - And we can see
there's that response.
06:18 - And you can see all the metadata
associated with the response is
06:21 - here in the JavaScript console.
06:22 - And what I actually want to
do is say return response.blob
06:29 - because I wan to-- this is
what we talked about before--
06:32 - I want to convert the
response into an image blob.
06:36 - That triggers another promise.
06:38 - So when I have
another promise, I
06:41 - can change them by
saying.then again.
06:44 - And now the response.
06:48 - If we look at that response--
console.log response,
06:51 - now I have the response
to the next promise.
06:55 - And we can see that is also not
defined because I cannot spell
07:00 - to save my life.
07:01 - That is now the blob.
07:03 - So in this case
actually, maybe it
07:04 - makes more sense for me to name
this variable something else,
07:08 - like let me just call it blob.
07:10 - And now, what you'll
see is there's
07:12 - this sequence is as follows.
07:14 - First, fetch the rainbow.
07:15 - Second, look at the
resolved promise
07:20 - and then convert that complete
reading the stream of data
07:24 - into a blob.
07:25 - So presumably, once I'm
there, all I have to do
07:27 - is say, remember I have
this image element.
07:30 - I have this image Dom element
with an ID of rainbow.
07:33 - I can say document.get
element by ID.
07:40 - Give it the ID rainbow and at
dot source, equals that blob.
07:46 - So this is me just taking
the data of that image which
07:48 - comes in as a blob,
and placing it
07:52 - into the source attribute
of the image Dom element.
07:56 - You can see that doesn't
work because the blob--
07:59 - the data blob
isn't in the format
08:01 - that the image Dom
element expects.
08:03 - Luckily for us, there happens
to be a function called
08:05 - create object url that
takes a blob object
08:08 - and turns it into the
format that an image Dom
08:11 - element would expect.
08:13 - You can look up more
about this function also
08:15 - on the MDN JavaScript docs.
08:17 - But all I need to do here
is say url.create object
08:21 - url, pass in the blob.
08:25 - And there it is.
08:26 - We have our rainbow.
08:27 - It's kind of a large image.
08:29 - So I'm just going to
add another attribute,
08:31 - like with equals 480.
08:35 - So it sort of makes
the image smaller.
08:36 - And there we go.
08:37 - Oh, we have a beautiful rainbow.
08:39 - So this really wraps up
this particular tutorial.
08:42 - We've got the whole thing.
08:44 - We now know how to call fetch,
how to read the response when
08:49 - the promise resolves, how to
turn the data of that response
08:52 - into an image blob, and
add it into an image ELT.
08:55 - But here's the thing.
08:56 - There's a couple
other things that I've
08:58 - missed that it would be nice
to include in this video.
09:00 - Number one is I've done
nothing to handle errors.
09:03 - So what if something goes wrong?
09:04 - I should handle error, at least
log the error to the console
09:08 - so I can see that
something went wrong.
09:10 - Number two is I want to
introduce the JavaScript
09:15 - keywords async and await.
09:18 - And these are new features
of the JavaScript language
09:21 - that allow us to handle
promises in a slightly more
09:24 - readable and elegant way.
09:26 - So I'm going to show you.
09:27 - I'm going to rewrite this
particular example using async
09:30 - and await instead of
the dot then method.
09:34 - And I will also refer
you to some other videos
09:37 - I've made that go into these
keywords with a bit more depth.
09:40 - Let's first add
some error handling.
09:42 - One of the nice
things about working
09:43 - with chaining promises-- that
we have fetch, then this, then
09:47 - this, then this-- is that
error can happen anywhere
09:49 - throughout there.
09:50 - And I don't have to handle
each error in a specific way
09:53 - with each part of that sequence.
09:55 - I can just put at the
very end dot catch.
09:57 - So like a dot
then, which handles
10:00 - the resolution of the
promise, dot catch
10:02 - handles stuff that goes wrong--
10:05 - when stuff goes wrong
during that promise.
10:07 - So I can write catch.
10:08 - I can give an argument error.
10:09 - And I can just say something
like console.error error.
10:16 - So this is a bit
more long-winded
10:18 - than it needs to be.
10:19 - There are ways of
condensing this.
10:20 - But in a moment, I'm going to
do that all with just async
10:23 - and await.
10:23 - So I'm not going to
worry about it too much.
10:25 - I'm going to make an error
happen just so we can see it.
10:27 - To be sure that this is
really happening though,
10:29 - let me put another
console log here
10:31 - like this will be my
own message-- just
10:33 - error exclamation point.
10:35 - And then what I'll do is--
10:36 - let me misspell the name of
the ID of the Dom element.
10:40 - I will write rainbow
with two O's.
10:43 - And then, now if I go
back to the browser,
10:45 - you're going to see my
message error printed out.
10:48 - And also you can see the
actual error messages there.
10:51 - So this is a really nice
way of handling errors.
10:54 - One more thing.
10:55 - Let's look at how I
can condense the code
10:58 - and make it a bit more
readable using async and await.
11:01 - The way this works is if I'm
going to use this new keyword
11:05 - await, I can only
use the keyword await
11:08 - in the context of
an async function.
11:11 - Async is a keyword that
specifies this function is
11:14 - going to happen asynchronously.
11:16 - So essentially what I want to
do is write a new function.
11:18 - I'm going to call it async.
11:21 - I'm going to call
it catch rainbow.
11:24 - Oh, and I've got to
declare it as a function.
11:26 - So I could use the keyword
function or the arrow syntax.
11:29 - I'm kind of using them
interchangeably here.
11:31 - But I'm going to make an async
function called catch rainbow.
11:34 - Now when I call fetch, instead
of having to use dot then,
11:38 - I can still say
fetch rainbow.jpeg.
11:42 - I can set the result
of the fetch function
11:45 - to a variable called response.
11:47 - So this is like the dream
of how I like to write code.
11:50 - I just want to say the
response equals the result
11:53 - of the fetch function.
11:55 - But this is where the
await key word comes in.
11:58 - Because fetch is an asynchronous
function, I have to add await.
12:03 - So this is really
just syntactic sugar.
12:05 - It's the same exact thing that
I was doing with dot then.
12:09 - But because I'm in
a sync function,
12:11 - I'm allowed to write the
code in a single line
12:14 - by saying await
the result of fetch
12:17 - and store that result in this
variable called response.
12:20 - And then I can do the
same thing with the blob.
12:22 - I can const blob equals
await response.blob.
12:28 - And so now in two lines
of code, I've said fetch.
12:31 - I've gotten a response.
12:33 - I've said dot blob.
12:34 - I've gotten the blob.
12:35 - And then this other line
that I have down here, which
12:38 - puts the blob as a url
into the Dom element,
12:42 - I can just take that
and put that up there.
12:44 - And you see like all of that--
all those lines of code of dot
12:48 - then, dot then, dot then--
12:49 - I'm going to keep
this catch by the way,
12:51 - because I'm going to
need this for something
12:53 - I'll show you in a second--
12:54 - all of this gets to go away.
12:58 - Now look at that.
12:59 - It's just three lines of code.
13:00 - And I'll have to do now
is say catch rainbow.
13:03 - Just call that function.
13:05 - So I put all the stuff
that's asynchronous
13:07 - inside a function
that's async and then
13:09 - just call that function.
13:10 - And now if we go
over here, look!
13:11 - It's still working.
13:12 - There's our rainbow.
13:14 - But the reason why
I kept that is I do
13:16 - want to keep this catch thing
because if there is an error--
13:21 - let me once again misspell
that name of the Dom element,
13:26 - we can see I have got- I
have now handled that error.
13:30 - I can attach the error
to the async function
13:33 - that I've written.
13:34 - And in fact, that
function by definition--
13:38 - an async function by
definition returns a promise.
13:41 - So I could also say dot then.
13:43 - And you know, if I
wanted to do something
13:47 - to indicate that it's done,
I can say like, for example,
13:51 - console log yay.
13:53 - And now whoops, oh, I've got
to spell rainbow correctly.
13:57 - And there we go.
13:59 - We can see console log yay.
14:01 - So now I have the whole thing.
14:03 - I have written an async function
that makes the fetch request.
14:09 - It turns the body of what
comes back in the HTTP response
14:14 - into a blob.
14:15 - It converts that
blob into the format
14:17 - that the Dom element expects.
14:19 - And I've put a little
message saying, yay.
14:21 - It worked or an error
if there's an error.
14:24 - And that's it.
14:24 - That's this full example.
14:26 - Now that we know how to use
fetch in the generic sense
14:29 - when we're working with an
image here, in the next video,
14:31 - I'm going to use
fetch with a data set.
14:33 - I'm going to grab a comma
separated value file,
14:37 - a CSV file.
14:39 - This is a file from NASA.
14:40 - It's global world temperatures
from 1880 to present.
14:44 - And I'm sure you
had a graph those.
14:45 - But before we get there, I might
give you a little exercise.
14:48 - You could just move
on to the next video
14:50 - to see actually
working with the data
14:51 - and how you might
chart-- data file
14:52 - and how you might chart that.
14:53 - But as a little exercise,
you might try some things.
14:56 - For example, could you
fetch more than one image?
14:59 - How would you-- what if
you had an array of images?
15:02 - What if your file
was not an image file
15:05 - but maybe it was just
a plain text file?
15:07 - Could you put the text that
was in that file in a paragraph
15:10 - element?
15:11 - So try one or two
of those exercises.
15:13 - I will also include in the
GitHub repository that's
15:15 - associated with
this video series--
15:18 - I'll include solutions
to those two exercises.
15:20 - So try multiple images.
15:22 - Try a text file and see
if you can get those
15:24 - to appear in your web page.
15:25 - So thanks for watching
this tutorial.
15:27 - And I'll see you
in the next video.