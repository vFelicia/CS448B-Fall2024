00:00 - (bell dings)
00:01 - - Hello, again; I'm back.
00:02 - In my previous video in this series
00:04 - about unit testing and
continuous integration,
00:06 - I got all the way up to the
point where I wrote the test,
00:11 - and I ran the test through npm test,
00:13 - and then the test passed.
00:15 - Now, this video series
is sponsored by CircleCI.
00:22 - Link to find out more
about CircleCI right here,
00:23 - because the goal that
I have for this series
00:26 - is to show that once, all I've
done so far is this piece.
00:29 - Once I've written my
test locally using Node
00:33 - for some JavaScript thing
that I'm working on,
00:36 - I want to put that code up
on GitHub and integrate it
00:39 - with CircleCI so that the
test that I could run locally
00:42 - will run automatically here.
00:43 - Now I still might want to,
00:44 - it's still a good practice
to run the test locally.
00:46 - Like, why push something to GitHub
00:49 - that I know isn't going to work?
00:51 - I might as well test it, but the point is,
00:52 - if I'm collaborating with
lots of other people,
00:54 - somebody might forget to
run the test, not know how
00:57 - to run the test, and this is
going to make the, hopefully,
00:59 - the open source contribution
process a bit friendlier
01:02 - and instill confidence and happiness
01:05 - in the open source contributor.
01:07 - I hope it does that.
01:09 - That's what I, that's
what I would like in life.
01:10 - Okay, happiness and confidence.
01:15 - You know, maybe 30% of one of those.
01:17 - Anyway, so here we are.
01:19 - So let's, how am I going to do this?
01:20 - Now.
01:22 - You might not be aware of this, but I can,
01:23 - I don't need GitHub at all,
01:25 - if I just want to use
version control on Git.
01:27 - I can just use version
control on Git right here
01:30 - with Terminal on my computer,
and just like I said,
01:32 - npm init to create a Node
project, package.json, .json file.
01:37 - I'm going to say git init.
01:40 - I think that's right.
01:41 - Sometimes, you know.
01:43 - Ah, initialized empty GitHub repository
01:45 - in TestingTestTest/.git/.
01:47 - Now, one thing that I
definitely want to do here
01:50 - is I want to create a new
file called .gitignore.
01:54 - Now, this is a bit of an aside,
but it is sort of important.
01:57 - .gitignore file is a file
where I can put names
02:00 - of things that I don't want to be a part
02:03 - of the repository when
I push it up to GitHub.
02:05 - Like, I might need those files locally,
02:07 - so if something had passwords
in it or secret API keys,
02:10 - those would be things that I
don't want to push up to GitHub.
02:12 - But in this case, I
actually just don't want to
02:14 - send up the Node modules,
like, whoops, modules.
02:16 - Like, if I have, in
package.json, I'm using
02:19 - this devDependencies
jest to run the tests,
02:22 - and if I go into node_modules,
02:24 - it's like a huge amount
of folders and files.
02:27 - Those things are not
my code, it's not even,
02:30 - those will get installed separately
02:31 - whenever I put it somewhere
else on the server.
02:32 - So I really don't want those
things to be committed.
02:35 - I also might as well say,
because I'm on this ridiculous
02:37 - Macintosh machine which
makes these .DS_Store files,
02:40 - which, by the way, are my initials, DS,
02:42 - which kind of freaks me out.
02:43 - Like, is this all these computers,
02:46 - all about my store in some weird way?
02:48 - Anyway, I don't know.
02:49 - A little freaked out.
02:50 - And then, I don't know,
I don't know what this,
02:53 - I forgot what this package.lock file is.
02:56 - I'm going to, I'm just
going to ignore that too.
02:57 - So I don't want these files.
02:59 - And now, I can say git status
03:03 - to sort of see what's going on.
03:04 - And we can see, aha, these
are the untracked files.
03:08 - These are the files that are
part of my GitHub repository.
03:11 - So I am now going to say git add .,
03:16 - 'cause I want to add everything.
03:17 - Then I'm going to say git
commit, starting a new project
03:23 - about testing with tests
and also more tests, okay.
03:29 - So I commit that, and then I say
03:31 - git push origin master, right?
03:34 - Doot, doot, doot, doot,
doo, boom, boom, boom, wow.
03:36 - Of course I can't say
git push origin master.
03:38 - I just made this nice git
repository on my computer.
03:40 - It doesn't know what master
is, origin, any of this stuff.
03:43 - So, in order for me to do that,
03:45 - I need to create the repository on GitHub.
03:48 - So I'm going to go, I'm on GitHub.
03:50 - I'm logged in to my
Daniel Shiffman account.
03:55 - And, but I'm going to
create a new repository,
03:59 - and this repository's going
to be called TestingTestTest.
04:03 - It is all about testing
with test, also tests.
04:10 - Then, I'm not going to do this
04:12 - initialize repository with a README.
04:14 - I don't need the .gitignore
'cause I did that myself,
04:17 - and I want to, ooh, owner.
04:19 - I want to put this, now,
this doesn't really matter
04:21 - so much to you, but I'm going
to put this in the CodingTrain
04:24 - organization to make it
easier for you to find
04:26 - perhaps, rather than in my own account.
04:28 - And then I'm going to say
create repository, and the nice
04:32 - thing about this is it's
giving me this command.
04:35 - I kind of did this stuff already.
04:36 - Like, I created the repository
locally on my computer.
04:40 - Usually, by the way, my
other videos, I just make
04:42 - the repository on GitHub
and then it's empty
04:44 - and I clone it to my
computer to add stuff,
04:46 - but I'm just showing you a
different way of doing this.
04:47 - Like, I made it already.
04:48 - Now I'm going to link it up with GitHub.
04:50 - So I can just grab this command right here
04:53 - and I'll paste it into
here so you can see it.
04:55 - So the idea here is that
I'm saying, hey, remote,
04:58 - I want to add a remote
repository for this repository
05:02 - on my computer, remote
location for this repository.
05:04 - I'm going to call it
origin, and this is its URL,
05:07 - git@github.com:CodingTrainTestingTestTestTest.
05:12 - Now, I have my, this computer
already set up with like,
05:16 - special keys to be logged in
and all that sort of thing.
05:18 - That's a whole separate topic.
05:20 - But if you have that, I
can make a video about that
05:22 - I suppose if I need to.
05:24 - But this might, you might
have some permissions issues
05:26 - if you haven't set that up yet.
05:27 - Okay, here we go.
05:29 - Oh, so that looks like it did that,
05:31 - and now, I should be able to
say git push origin master.
05:39 - (retro instrumental music)
05:40 - Okay, that was fast.
05:41 - It finished before I could
get the waiting music on.
05:43 - So there it is.
05:44 - Now it's there, I can go back to GitHub,
05:46 - I can hit refresh, and we can
see all the code is there now.
05:49 - You know what, it's really a
good idea to have a README,
05:52 - and I agree, so I'm going to
use this nice little button
05:55 - that says add a README,
05:56 - and I should put more in the
README, which I will do later.
05:59 - But I'm just going to commit
directly to the master branch.
06:01 - (Daniel gasps)
06:02 - I committed!
06:04 - (dramatic instrumental music)
06:05 - Directly to the master branch!
06:08 - I do that all the time, in every project,
06:10 - but apparently, there are
other ways of working.
06:12 - So, I'm actually going
to make it, the next step
06:14 - is I'm not going to be
allowed to do that anymore.
06:16 - I can't just commit stuff
directly to the master branch,
06:19 - the sort of published, finished version
06:20 - without running those tests first.
06:24 - So, the README is there.
06:25 - Now,
(Daniel claps)
06:27 - so, where are we?
06:28 - If I look back at my diagram,
06:30 - we have now checked off this much.
06:35 - We have now pushed it to
GitHub, so we've checked off
06:37 - this much, and anybody
watching this, most of you are
06:39 - probably watching this as
a recorded video tutorial,
06:41 - but I'm actually doing
this live at the moment.
06:43 - So, not yet, but in a moment,
06:46 - you can start submitting
your pull requests to this
06:49 - repository, because I'm
going to, and please be nice.
06:54 - Be nice about it,
(Daniel laughs)
06:55 - and be on your best behavior,
06:57 - and I am going to, I probably
shouldn't have said that.
07:01 - I'm going to, your pull requests,
tests will be run on them.
07:06 - All right.
07:09 - So, I need to link this now to,
07:12 - why I'm here in the first place, CircleCI.
07:15 - So CircleCI is a company
that provides as a service
07:18 - continuous integration,
and how do I get that?
07:21 - I'm going to go to Go to app.
07:23 - So I'm at circleci.com.
07:24 - You can start by going to this URL.
07:28 - And I'm going to go to app.
07:31 - Now, I'm already logged in.
07:33 - So let me actually log out,
07:36 - 'cause I think this will be useful.
07:38 - So, you probably want to do Sign Up.
07:41 - Let's just click that for a second.
07:43 - And sign up with GitHub.
07:45 - That's what I did.
07:47 - I think I could probably
just log in since I already
07:49 - have an account, but, so
I'm going to go to log in,
07:52 - and I'm going to just
click Log in with GitHub.
07:54 - So both should work just fine.
07:57 - I log in, and now, I am
in my CircleCI dashboard.
08:02 - Interestingly enough, I have no projects.
08:05 - I'm going to go over here to projects,
08:07 - and it says CodingTrain has
08:08 - no projects building on CircleCI.
08:10 - That's because I don't actually know
08:12 - anything about this or do this.
08:13 - I'm just trying to learn it this week
08:15 - and make a video tutorial about it.
08:16 - But I'm going to more in the future.
08:17 - I'm very excited about it.
08:19 - So what I want to do is
I want to add a project.
08:21 - I want to add a project,
and then, hmm, no, no,
08:25 - this is, oh, there it is, TestingTestTest.
08:27 - Huh, that's what I want to add.
08:28 - Now, I should show, I
should go back over to,
08:31 - oh, it figured out already.
08:32 - So I could have gone to other, like,
08:35 - I am a member of the ITPNYU
organization, which is
08:38 - where I teach, the Processing
Foundation, there's me.
08:40 - So luckily, I didn't realize this,
08:42 - it's already defaulting to CodingTrain.
08:44 - So if you don't see the
project that you're looking
08:46 - for here, the GitHub repository,
it could be because you're
08:49 - actually not in the correct
organization or account.
08:52 - But I am, so I'm going
to go to TestingTestTest
08:54 - and hit Set up project.
08:55 - Now, I want to use the
2.0 version of CircleCI,
09:01 - because it's new.
09:02 - It says new there, and I hear it's great.
09:04 - (Daniel laughs)
09:05 - Oh, it has something called Docker.
09:07 - So this is another little piece
09:09 - that I got to put into this puzzle.
09:11 - What is this Docker thing?
09:15 - We'll talk about that in a second.
09:18 - Come back over here, all right.
09:19 - And I'm going to pick my language.
09:21 - I am using Node.
09:22 - Oh, beautiful.
09:23 - It, wow, did it just
like, know that already
09:26 - because of the code that's in there?
09:26 - It probably did.
09:28 - And then, it's going to
give me some instructions.
09:31 - Create a folder named .circleci
and add the file config.yml.
09:37 - So, this is what you need to do.
09:39 - CircleCI can see your GitHub repository,
09:42 - because you've integrated them.
09:44 - But, it doesn't know
what to do, like, what,
09:47 - am I supposed to run a test?
09:49 - Like, what does he want me to do?
09:50 - So, in order to tell it, I'm
going to go back to my repository.
09:53 - I'm going to create,
whoops, not a new file.
09:55 - Shoot.
09:56 - I'm going to create a new folder.
09:59 - This folder has to be called .circleci,
10:04 - and it, inside that folder, I
need a file called config.yml.
10:12 - So that, .yml is a format,
much like .xml or .json,
10:17 - and it is, I believe, called yeml.
10:22 - So now, what I could do
actually is just like,
10:25 - there's a sample.
10:26 - So CircleCI is nice enough
to provide me with a sample.
10:29 - I'm just going to use that sample,
10:30 - but I'm actually going to
simplify it after I use it.
10:32 - So I'm going to copy it to clipboard,
10:34 - and I'm going to paste it in here,
10:36 - and I am going to, I'm going
to delete a bunch of stuff.
10:54 - Okay, I want to do this.
11:04 - Okay, I think I've got what I want.
11:06 - So I make, you know, I'll try
to return back to that file
11:10 - at some point to look at some
of the other pieces there.
11:12 - Okay, so this is the .yml
format that is giving,
11:16 - much like package.json has all
the configuration information
11:21 - for, for my Node project, config.yml has
11:26 - all the configuration
information for CircleCI.
11:29 - And these are the things
that I want to do.
11:31 - The jobs that I want to do is
I want to build my project,
11:34 - and I want to build it using
this image with Docker.
11:39 - What is that image?
11:41 - So this is what's exciting.
11:42 - Docker is not something
that I've used at all in any
11:44 - tutorial before, but Docker
is, and somebody correct me
11:47 - if I'm wrong here, but Docker
provides a way of having
11:50 - this like, self-contained environment
11:53 - that has no nothing,
external setup yet, right?
11:57 - So I can say, like, hey,
11:58 - this is this clean, new environment.
12:00 - It's going to install
node, install the packages,
12:03 - run the code from scratch.
12:05 - So I couldn't, so, in other
words, if by accident,
12:08 - a package is installed
but I don't have it in my
12:10 - configuration file and I wasn't
using something like Docker,
12:14 - I could not realize that
my code's actually broken,
12:16 - but it kind of runs by accident
12:17 - over here for some arbitrary reason.
12:19 - So Docker is a way of saying
like, let me start with this
12:21 - Docker image, this environment,
standalone environment,
12:24 - and the one that I'm
using is I want any Node.
12:28 - And maybe what I should
do probably is if I go
12:30 - onto my, back to Terminal,
if I say node -v,
12:33 - I'm using 8.9.0, so
maybe I would say, like,
12:38 - hey, why don't you give me
8.9., is it zero, or is it 10?
12:41 - Yeah, zero.
12:42 - So, I think that'll be fine.
12:43 - But, you know, you might
want to, that's another thing
12:44 - you deal with, which version
of Node you're using,
12:46 - and then, in order to
know that my code works,
12:49 - I just need to run npm install,
12:50 - because I need to get all those packages,
12:53 - and I need to run npm test.
12:54 - And this, by the way, is going
to make it run very slow,
12:57 - 'cause npm install
takes a while to install
12:59 - lots of packages, and
I have to install fresh
13:01 - every single time CircleCI runs it.
13:04 - And there's ways of caching
it, and probably a lot of that
13:06 - has to do with what I
deleted out of there.
13:08 - We can come back to that later.
13:09 - But I want you to just see,
13:10 - this is the very, very basic idea.
13:13 - I should also point out
that this working_directory
13:15 - I think is actually unnecessary
for a basic example,
13:17 - but if you need to, 'cause
it's going to probably
13:19 - just default to my root project directory,
13:21 - but if I need to be
specific about directories,
13:23 - I could use that potentially.
13:25 - Okay, so let's leave that there, and now,
13:27 - what I'm going to do is I'm
going to say git status.
13:33 - Oh, and by the way,
(Daniel laughs)
13:34 - somebody in the chat told
me that it's actually
13:35 - probably a good idea to
have the package.lock file,
13:38 - 'cause it has some
important metadata in it.
13:39 - So let me put that back
while I'm doing this.
13:41 - And I'm going to say git status,
13:45 - and I'm going to, I'm going
to say git add everything,
13:49 - git commit, adding CircleCI
13:53 - and package-lock.json for no good reason.
13:59 - I'm going to do that.
14:00 - Okay, now, I'm going
to say git push origin.
14:06 - (dramatic instrumental music)
14:11 - (Daniel laughs)
Ah, it rejected!
14:13 - Oh, oh, well, so why did that happen?
14:15 - So this actually happened, I
was excited for things to get
14:18 - rejected later, but the
reason why this happened now
14:20 - is I forgot that I added
this README file on GitHub,
14:25 - so my local repository
doesn't have that change yet.
14:28 - So I better pull that README file and now,
14:35 - (Daniel laughs)
14:35 - it put me into some text in
there, and I just said colon,
14:38 - return, like, instinctively,
and I'm going to now say
14:43 - git push origin master, all right.
14:46 - (Daniel claps)
14:47 - So now I have sent
everything up to GitHub.
14:52 - So, what do I have now?
14:55 - I've done this.
14:56 - I've sent it up to GitHub, and in theory,
14:59 - I'm like, linked somehow with CircleCI.
15:01 - Huh.
15:04 - Let's see, what else do I need to do?
15:05 - There's a bunch of steps I want
to do, but I'm just curious.
15:08 - What else do I need to do
actually, technically speaking?
15:10 - So if I go back here, oh, well,
15:13 - I want to stay Start building.
15:14 - So I might be ready now.
15:16 - Did I follow all these steps?
15:17 - I updated the .yml file.
15:19 - I pushed the change to GitHub.
15:20 - And now I can click Start
building, so I'm going to do that.
15:25 - Oh, my goodness, ah, ooh, it's running.
15:28 - (retro instrumental music)
15:32 - It ran npm install, it ran test, oh.
15:37 - (buzzer sounds)
15:39 - Okay, so, I missed, the
reason why it failed
15:42 - is I missed a really important step here.
15:44 - In my trying to make that
file simpler, I missed a very
15:47 - important step, which is
that I need to checkout.
15:50 - So, what the first thing I need to do
15:51 - is check out the current
code from the repository
15:54 - before I run npm install and npm test.
15:57 - So it ran those things, 'cause
that's what written here,
16:00 - but it didn't actually grab
the repository from GitHub.
16:03 - So, now, let's try this one more time.
16:06 - So what I should be able to do
16:07 - is I should be able to say
git status, just to check.
16:10 - Okay, the only thing I did
was modify my config file,
16:13 - git add, git commit,
forgot the checkout step,
16:20 - and git push origin master.
16:24 - And now, if we go here, now, it should,
16:28 - if I go back to here, it's
actually running already.
16:33 - So it's automatically, any time
I push something to GitHub,
16:36 - it's already linked,
and it's running this.
16:38 - So I can go in here and wait.
16:43 - (retro instrumental music)
16:46 - Yeah, you can see now, it's, whoo!
16:50 - It did it.
16:51 - So look at that.
16:52 - Adds one plus two equals three,
16:53 - passed in four milliseconds!
16:55 - Test suite, one passed, tests, one passed,
16:56 - total time, ran all the test suites!
16:59 - (train whistles)
17:00 - Oh, that was the wrong sound effect,
17:01 - but whatever, kind of works.
17:03 - All right, so this works.
(Daniel claps)
17:05 - Wonderful, wonderful.
17:06 - Now, just for the sake
of argument, let me, ooh,
17:11 - no, no, no, let's, so let's
now go and protect ourselves.
17:14 - Let's do this last step.
17:15 - So, I do have the test
running on CircleCI,
17:18 - but what I want to do
now is I want, on GitHub,
17:21 - I want to say protect master.
17:25 - I want to make it so that
you cannot push any code
17:28 - to master, at all, and you
cannot merge any code to master
17:32 - without the tests having
run and passed first.
17:35 - So let's go do that.
17:37 - So that is something I have to do
17:38 - through the GitHub interface.
17:40 - So I go back to the project,
17:41 - and I'm going to go to Settings,
and I'm going to go to Branches.
17:45 - And right here, what I want to
do is under Protected branches,
17:50 - I want to protect master.
17:53 - And I'm going to do a bunch of things.
17:54 - I'm going to click Protect this branch.
17:56 - I'm going to say, I'm not going to require
17:58 - pull request reviews right now.
17:59 - That could be interesting.
18:00 - But I'm going to require status checks,
18:02 - and I want to make sure,
look at this right down here,
18:06 - that my CircleCI status checks run,
18:11 - and then, I also want to
do Include administrators.
18:15 - So, even me, as the
administrator of this project,
18:19 - cannot do anything without
those tests running.
18:23 - So, I'm going to hit Save changes.
18:25 - I am going to put in my password, and now,
18:34 - what I'm going to do is I'm going
18:40 - to make a change in my code.
18:41 - I'm now going to work on my
code, doot de doot de doo,
18:43 - oh, a plus b plus 42.
18:47 - That's definitely going to be
a good change to my code, yay.
18:51 - And now what I'm going to
do is git add, git commit,
18:58 - I know a better way to add two numbers.
19:02 - And I'm going to say git push origin
19:06 - (Daniel gasps)
master!
19:10 - Aha, yes, good, okay.
19:12 - So it says protected.
19:13 - It did not let me do that.
19:14 - Protected branch update
failed, required status check.
19:18 - So it did not do that.
19:19 - So now what I'm going to do
is I'm going to say, okay,
19:22 - I'm going to say git push origin master:.
19:27 - So what I could do is I could
branch here on my computer
19:30 - and then create a new branch and move that
19:32 - and do the change there and push it,
19:33 - but this is a nice, easy way of doing it.
19:35 - Git push origin master:livecodingtrain.
19:39 - So this is a new branch that
I'm calling livecodingtrain.
19:43 - I want that to be the branch on GitHub,
19:44 - and I'm going to take my master
branch for my local-y self
19:48 - and push it up to GitHub.
19:49 - And I'm going to do this,
19:50 - and so that, it had no
problem having me do.
19:53 - Then, I'm going to go here.
19:55 - Look at this, already,
less that an minute ago,
19:57 - it says, huh, you recently
pushed branches livecodingtrain
20:01 - less than a minute ago.
20:02 - Let me compare and pull request.
20:05 - So, I know a better
way to add two numbers.
20:09 - Seriously, I really do.
20:11 - It involves the number 42.
20:14 - So, you know, obviously,
good practice in writing
20:16 - thoughtful messages and
everything in your pull requests.
20:19 - I'm being silly here.
20:20 - I'm going to hit Create pull
requests, and now look at this.
20:23 - It already ran, wow, it
already ran the test.
20:27 - I took so long talking and
like, blah, blah, blah,
20:29 - that it actually probably ran the test
20:31 - even before I did the pull request.
20:33 - So look at this.
20:35 - Required, the test failed.
20:37 - And so, this is disabled.
20:39 - I cannot merge this pull request.
20:41 - I can press this button as much as I want,
20:43 - but the test has failed.
20:44 - And I can even go under
here under details.
20:46 - I can probably, I can do this.
20:48 - It's going to take me
directly to CircleCI,
20:51 - and I can look that it
expected the number three
20:54 - but received the number 45.
20:56 - So I don't think that if you
20:58 - click on that under more details,
20:59 - you would be able to
get here, but because me
21:01 - as the administrator and the
owner of this CircleCI account,
21:04 - I can see what actually caused
this pull request to fail.
21:08 - So, now I can, now I realize,
it was the number 42.
21:12 - I can say git add, git commit,
21:15 - fixing the adding numbers thing,
21:21 - and then I can say,
git push origin master,
21:25 - what did I call it, livecodingtrain?
21:26 - So I'm going to push
this change that I made
21:32 - locally on my master to CodingTrain,
21:35 - and we should see now,
live, in the page, ah,
21:39 - come on, get there quick!
21:41 - Shoot, where is it?
21:43 - Ah!
21:46 - It's running the checks again.
21:49 - (retro instrumental music)
21:50 - Come on, do the test.
21:51 - (Daniel claps)
21:52 - So, one pending check, one pending check!
21:54 - I added some new commits.
21:55 - You can see my new commit here.
21:56 - It's there.
21:58 - Please work, please work, please work,
22:00 - please, please work, please, please, work.
22:06 - (Daniel whistles)
22:06 - Ah!
(Daniel laughs)
22:09 - (triumphant music)
22:10 - So now, all the checks have passed.
22:13 - This branch has no conflicts.
22:15 - I can show all checks.
22:17 - I can see it there.
22:18 - I can click on the details.
22:19 - But now, I can simply
merge this pull request,
22:23 - and it is now done.
22:26 - All right, there was a
little edit point there
22:28 - while I waited to let you
meet people from the community
22:30 - who are watching this live, you,
22:33 - except for this moment
in time right now are not
22:35 - watching this live, and there
are some pull requests here.
22:38 - So we can see here by the
way, some of this yellow
22:40 - means the status of the test
is waiting to be reported,
22:45 - and this means the test
ran and test passed.
22:49 - So let's look at this, meiamsome.
22:51 - Let's look at what's been changed.
22:54 - So, this, first of all,
interestingly enough,
22:57 - there is, this is some
nice things we can learn
23:00 - about better programming than I do here,
23:02 - that a product function was
added to return the product
23:04 - of a and b, and then module.exports
was made into an object
23:08 - so you could get the sum,
which is the sum function,
23:11 - or the product, which
is the product function,
23:13 - and then, look at this!
23:15 - Const { sum, prod } = require('.sketch').
23:19 - So this is a nice way of
importing multiple functions.
23:22 - And we have here then a test of that.
23:27 - So, let's actually, let's
run this pull request.
23:30 - I mean, we don't need to
run this pull request.
23:31 - Let's merge it, looks great.
23:33 - So I'm going to say all checks
have passed, looks great.
23:37 - So I'm going to comment,
and I'm going to merge,
23:41 - and then I can go back
to my pull request page,
23:44 - (Daniel laughs)
23:45 - and we can see evil pull request.
23:47 - So I'm not going to keep
going through all these.
23:48 - It'd be interesting to see, you know,
23:50 - it's very slow to run all of them,
23:52 - because so many pull
requests came in all at once,
23:54 - which is probably unlikely
in a real scenario,
23:56 - but it also, it has to run
npm install every single time,
24:01 - and there is a way that
that could be cached,
24:03 - if you look at the sort of
full sample config.yml file.
24:08 - All right, so I will review
24:09 - all of these later and merge them.
24:11 - So what's left to do?
24:12 - I think I've shown you the full picture.
24:14 - I'm going to do one
other video where I set,
24:17 - almost in a way do this again,
24:19 - but I'm going to set this up
for a real, open source project
24:22 - that I'm developing, and
I'm going to just add
24:24 - maybe one test to it,
and then I'm going to
24:26 - ask the community to
contribute more tests to it.
24:28 - So I'll do that in the next video,
24:30 - because it relates to the neural network
24:33 - machine learning project
that I'm working on.
24:34 - Okay, I took another break, and boy,
24:36 - have the pull requests been coming in.
24:38 - It's kind of amazing.
24:39 - But you'll notice, every
single one of these
24:42 - is waiting, waiting, waiting.
24:44 - Strangely, I just showed you
how I merged meiamsome's.
24:47 - Well, I forgot that meiamsome is a member
24:50 - of the CodingTrain organization.
24:52 - So meiamsome was able to make
a branch within the coding,
24:57 - within TestingTestTest itself
25:00 - rather than a fork of TestingTestTest.
25:02 - That's a little bit of a
subtle distinction here,
25:03 - but all of you watching,
all of these, have made your
25:06 - own fork and then submitted
the pull request from there,
25:08 - and there's actually a setting inside,
25:12 - if, so, if I'm on my
TestingTestTest project
25:17 - and I go here to Settings and
I go to Advanced Settings,
25:23 - Build forked pull requests.
25:26 - This is what I need to click to on.
25:29 - So in this sense, if you're only working,
25:32 - working in a private repo
or repo where only people
25:34 - with some sort of permissions
are making changes,
25:37 - but if you're accepting
contributions from the community
25:39 - at large, you're going to
want to have this be on.
25:41 - So I'm going to click this as on.
25:43 - I think it'll dynamically save?
25:45 - Let's see.
25:47 - Let's see, if I refresh here, if it starts
25:51 - running some of these status checks.
25:54 - Okay, we can see that
these test are now running.
25:57 - We can see evil pull request
somehow passed the test.
26:01 - I think some of them probably won't run
26:03 - until, now, let's see, required, let's,
26:09 - I think it, so, and we can go,
26:10 - we can go and look in CircleCI.
26:12 - We can see here's a queue
26:14 - of all the different
tests that are running.
26:16 - This one's running now,
pull request number 22,
26:19 - failed, rebuild, I could rebuild that one.
26:21 - So we can see, now, I should
be able to look through all
26:25 - of my pull requests, and
we can see, ah, yeah,
26:29 - it's just running them in some order.
26:30 - It's going to take a
while to run all of them.
26:32 - Okay, great.
26:32 - So, I think I finished this video.
26:36 - I think I already finished it earlier,
26:37 - and then I came back and kept going.
26:38 - But hopefully, you've seen
all of the basics now, right?
26:41 - You've seen how it is you can
write some JavaScript code,
26:46 - how it is you can make a Node project
26:48 - that can run some tests
for you using Jest.
26:54 - You can push all your code to GitHub,
26:57 - integrate it with
CircleCI so that any time
26:59 - somebody makes a pull
request to your project,
27:02 - which is protected, you run
the test, and you can see
27:05 - whether those test passed
before you merge the code.
27:07 - All right, so I want to
try to do another video
27:10 - where I'll look at a slightly
more real-world scenario
27:12 - where I'm going to push my
matrix math library to GitHub
27:17 - and put all this
together, and then solicit
27:20 - contributions for tests and
the like from the community.
27:23 - Okay, thanks for watching.
27:25 - (upbeat electronic music)
27:32 - (bell dings)