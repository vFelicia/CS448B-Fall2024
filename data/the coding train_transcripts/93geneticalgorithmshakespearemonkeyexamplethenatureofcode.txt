00:00 - hello and welcome to part three of my
00:02 - genetic algorithms video series I'm
00:05 - almost ready to like dive in and
00:06 - actually start looking at all the pieces
00:08 - of the code and how they implement the
00:09 - actual genetic algorithm itself but what
00:11 - I want to do in this example you can see
00:13 - that genetic algorithm just ran and it
00:14 - arrived at the phrase to be or not to be
00:16 - what I want to do is just kind of run
00:18 - this example a bunch of times while
00:20 - tweaking various parameters of the
00:22 - system and look at kind of what all the
00:26 - pieces here of the example running are
00:28 - so here's the algorithm I have it for
00:30 - reference that we could come back to and
00:31 - first thing I want to do is just run
00:33 - this example this is this is running in
00:35 - the browser this example is programmed
00:37 - in p5.js I will show you at the end of
00:39 - this video I'll just run the same thing
00:40 - in processing to show you the Java code
00:42 - as well and you can see in the talking
00:44 - there in the talk am I talking it
00:47 - evolved this system evolved to be or not
00:49 - to be that is just to be or not to be
00:51 - period so one thing you can see in this
00:53 - example is that I'm kind of drawing on
00:56 - the right side here all of the various
00:58 - current elements of the population and
01:00 - you can see those current elements of
01:01 - the population at this point where the
01:04 - program stops where one of them is the
01:06 - exact correct phrase you can see here
01:09 - what they look like and if i refresh the
01:10 - page you can see you can see the
01:13 - population itself started to get closer
01:14 - and closer to that correct phrase and
01:17 - eventually it's going to stop and here's
01:19 - just sort of a selection of those
01:20 - members of the population you can also
01:22 - see over here I'm kind of having the
01:24 - program always show you the current
01:26 - elements of the population with the
01:27 - highest fitness and you can see that
01:29 - over here and you can see this is the
01:30 - current element of the population with
01:32 - the highest fitness eventually that will
01:34 - be 100% fitness to be or not to be and
01:37 - then I'm also showing you how many
01:39 - generations so this happened in 514
01:42 - generations
01:43 - what's the average fitness remember the
01:45 - fitness function calculates the
01:47 - percentage of characters correct from 0
01:49 - to 100% how many characters does the
01:52 - phrase have correct you can see the
01:53 - average pop Fitness goes up over time it
01:57 - doesn't get to 100% because when one of
01:59 - the phrases has the correct the correct
02:01 - one of the elements of operations the
02:02 - correct phrase the rest of them still
02:04 - don't have the correct phrase and then
02:06 - also showing you the total population
02:08 - and the mutation rate so before I get
02:10 - into the code I even just want to change
02:11 - a couple variables here and show you a
02:13 - little bit
02:13 - about how the system behaves so for
02:16 - example what happens if i take this
02:18 - mutation rate and these the the maximum
02:21 - population and the mutation rate are
02:23 - simply just variables in the code
02:24 - there's also a target phrase right so I
02:26 - could actually just change this program
02:28 - right now to be unicorn I've never done
02:32 - this and run it again you can see how
02:33 - quickly it only tip with a short phrase
02:35 - when we took five generations to get
02:37 - unicorn come up with your I'm going to
02:39 - go back to to be or not to be I'm going
02:41 - to take the mutation rate and make it
02:43 - zero and now I'm going to run this again
02:46 - now notice what's going on it's kind of
02:50 - sort of settled into something
02:51 - look all the members of the population
02:53 - actually have exactly the same sequence
02:56 - of characters the best phrase is not
02:58 - changing and the total generation is
03:00 - just going up and up and up and up and
03:01 - up so this is a scenario where if there
03:04 - is no mutation there was not enough
03:07 - variation at the start to actually
03:09 - evolve the phrase right there was no
03:11 - initial member of the population with an
03:14 - O as the one two three four five six
03:16 - seventh character so this is something
03:19 - you really have to be careful of this
03:21 - mutation is route now one thing I could
03:23 - do is just say well the total population
03:24 - was only 200 so I could make the total
03:27 - population a thousand and look we
03:31 - actually got to the best phrase the
03:34 - target phrase in 44 generations with no
03:36 - mutation so with a population of 1000
03:38 - elements there is actually plenty of
03:40 - variation you know we can see what
03:42 - happens by the way I don't know if I
03:43 - just have a population of one well I
03:45 - broke it let's give it a population of
03:47 - two that broke it all so a ten right you
03:52 - can see oh this me I love this this page
03:55 - is in Norwegian
03:59 - sadducees so with with only two members
04:03 - of the population
04:04 - we got a phrase that's in Norwegian okay
04:06 - so you can see how this the size of the
04:09 - initial population is quite relevant now
04:12 - let me let's talk about something here
04:14 - that's kind of important little factor
04:16 - also let's go back to that population of
04:18 - a thousand we can see I was able to
04:20 - involve the correct phrase in forty one
04:23 - generations very quickly now let me make
04:25 - the population max of five thousand
04:29 - twenty seven generations even more
04:32 - quickly let me give it a little bit of
04:34 - mutation one percent mutation rate it
04:38 - took longer that time but this is sort
04:40 - of randomly I'm getting it rather loud
04:43 - noise there I'm getting it rather
04:44 - quickly one of the I should mention here
04:46 - is you have to remember this is an
04:48 - artificial problem that I've designed to
04:51 - demonstrate a genetic algorithm I'm not
04:53 - actually trying to get to be or not to
04:56 - be the fastest because I could do all
04:59 - sorts of things like okay I know what
05:00 - the answer is so when a when a member of
05:04 - the population has the correct the
05:07 - correct character I could actually just
05:08 - use that correct character and make sure
05:10 - I put that in the next year there's all
05:11 - sorts of things I could do to actually
05:12 - try to get to the answer more
05:13 - efficiently
05:13 - like just say print line to be or not to
05:15 - be but so but what we want to do here is
05:18 - just sort of look at how does the
05:19 - genetic algorithm behave and perform
05:21 - changing some of these variables but you
05:24 - I kind of got off track there and I sort
05:27 - of meant to talk about that later but
05:28 - whatever it's fine um here's the thing I
05:32 - could keep ramping up the population max
05:35 - thinking it's going to be faster and
05:37 - faster and now I have the population max
05:40 - of fifteen thousand characters and you
05:42 - can see that I was able to get to be or
05:44 - not to be in thirty generations but look
05:46 - how slow the kind of frame rate so to
05:49 - speak of each generation the program
05:51 - starts to run slower and slower and
05:53 - slower like if I were to have a hundred
05:55 - thousand members of the population I
05:57 - think I might have just crashed I've
05:59 - practically crashed the browser here
06:01 - like I might be able to it's running so
06:03 - there's a trade-off here having a large
06:06 - population helps because you have a
06:08 - larger Matt larger pool to start with in
06:10 - terms of very
06:11 - but once your population is so large the
06:13 - computation can become rather slow that
06:16 - it just takes forever to get there so
06:17 - even though I might have gotten there in
06:19 - 25 generations it took much longer than
06:22 - if I just said 1,000 members of the
06:25 - population which you can actually crunch
06:27 - through really really fast might take
06:28 - more generations but actually happens
06:31 - faster so that's another important thing
06:34 - that's another important thing for me to
06:36 - mention another thing that I should
06:38 - mention here is that the mutation rate
06:41 - itself but I haven't started looking at
06:43 - the coast yet the mutation rate itself
06:45 - is also a prime key factor you know more
06:49 - mutation you think might help but what
06:51 - if I say point one like 10 percent
06:53 - mutation if the mutation rate is so high
06:58 - that those mutations have been so often
07:00 - it's almost akin back to that brute
07:02 - force solution where everything's just
07:04 - random in the first place for example at
07:06 - 50 percent everything becomes almost
07:08 - completely unrecognizable in the sort of
07:11 - like list of the population and if I
07:16 - were to make the mutation rate 100
07:18 - percent this is actually complete and
07:20 - total randomness okay so thanks for
07:23 - watching this particular video in the
07:26 - next video I'm actually going to peel
07:27 - open tert like pull open whatever this
07:32 - like I'm going to open a suitcase or
07:34 - pull a curtain something correctly look
07:36 - at the code itself go back to this
07:39 - algorithm what are the pieces of this
07:40 - algorithm and where are those pieces of
07:42 - code and how are the different
07:43 - techniques working to make this
07:44 - algorithm run