00:00 - hello welcome to a coding challenge in
00:03 - this coding challenge I am going to
00:04 - attempt to make a quadtree now you might
00:09 - be asking yourself and it's a perfectly
00:11 - appropriate question what is the
00:13 - quadtree
00:14 - what is a quadtree and why do I care
00:16 - well let me talk about that over here so
00:20 - something that you might have noticed in
00:22 - many many many of my videos and various
00:24 - things that I've made is look at this
00:26 - beautiful marker how really made a nice
00:29 - rectangle there that I create a lot of
00:32 - systems that have a lot of what you
00:34 - might call particles in them or little
00:37 - agents that flock around the screen or
00:40 - that bounce around or bump into each
00:41 - other at magnetic forces and one of the
00:44 - elements of doing it one of the elements
00:47 - of these kinds of scenarios is that for
00:49 - every particle for every dot for
00:52 - everything that's in my two-dimensional
00:54 - space I have to check its location
00:56 - relative to all the other ones so this
00:58 - one I need to check relative to all the
00:59 - other ones this one I need to check
01:01 - relative to all the other ones and that
01:03 - is a lot of checks for example if there
01:06 - are ten if I have ten particles and I
01:09 - want to know the distance between each
01:11 - particle and every other particle I need
01:14 - to perform ten times ten checks which is
01:18 - 100 now of course there are like little
01:19 - optimizations there that I can reduce
01:21 - the number a little bit but but at its
01:23 - core this is the idea so this is what's
01:25 - known as an N squared algorithm because
01:29 - I have n elements and I need to do
01:34 - something N squared amount of times
01:35 - which means if there were a hundred then
01:38 - suddenly I need to do ten thousand
01:40 - checks and if there were a thousand or
01:43 - something to do one what million checks
01:49 - the pinkie maybe I'm not so sure so
01:52 - you'll notice that these are going up by
01:54 - a factor of ten but these are going up
01:57 - by a factor of well not ten ten squared
02:01 - and more right because this is a hundred
02:06 - times this and this is a thousand times
02:09 - this so it's its X button
02:11 - so this idea here that we can we do
02:13 - better well I have an idea for you
02:16 - because I'm really thinking about this
02:18 - my idea is well okay what if I know I
02:23 - know I know
02:23 - I know I got this what if instead of
02:26 - like for this particular particle right
02:27 - here
02:28 - instead of checking all the particles
02:31 - why don't I just check the ones that are
02:34 - near it like within a slight range
02:37 - around where it is okay but how do I
02:39 - know which are the ones that are near it
02:41 - okay let me check all the particles and
02:43 - see which ones are near it but I'm then
02:45 - I am checking all the particles again is
02:47 - there a way that I somehow could create
02:50 - these sort of regions of particles and
02:53 - then ask give me just the particles
02:55 - within that range without having to then
02:57 - suddenly go through all the particles
02:59 - and in fact there is such a way and that
03:03 - one way there are many ways is known as
03:05 - a quadtree now the reason why it's
03:07 - called a quadtree is that the idea is to
03:12 - take a space and section it into four
03:15 - four sections quad and each of those
03:19 - sections could potentially be sectioned
03:21 - into four and those could be into four
03:25 - and the reason why it's a trie is that
03:29 - the sections I don't know if there might
03:31 - be about the cells the tiles actually
03:34 - include references to their sub sections
03:37 - and so it's like a tree and there's
03:39 - going to be a recursive algorithm here
03:41 - so we're gonna start with this idea of a
03:44 - rectangle and that rectangle will store
03:46 - a reference to four rectangles and each
03:49 - of those four rectangles will store a
03:50 - reference to four rectangles but here's
03:52 - the thing
03:53 - they only are going to need to store to
03:56 - store reference to these children
03:58 - rectangles if there are a lot of
04:00 - particles in their area otherwise they
04:02 - can just keep track of their particular
04:03 - particles so the idea is that I can take
04:06 - all of these particles register them
04:08 - inside of this quad tree and then the
04:10 - quad tree is something I can query to
04:12 - say hey think about this this part of
04:15 - the window is part of the canvas just
04:17 - give me everything that's there and it's
04:18 - going to reduce the number of checks by
04:22 - a lot I'm pretty sure I should go look
04:24 - I think this is most likely turning this
04:27 - into n log n so instead of N squared and
04:32 - this has to do with something called Big
04:34 - O notation
04:35 - which is the way of notating how
04:38 - expensive or how long an algorithm takes
04:40 - based on the number of elements that are
04:42 - part of that algorithm so an N algorithm
04:45 - is wonderful because if there's only
04:47 - draw I just want to draw ten things
04:49 - that's an N algorithm check everything
04:52 - against everything else that's N squared
04:53 - and log n is going to reduce that number
04:55 - quite a bit let's go to the Wikipedia
04:57 - page for quadtree to see if I'm right
04:59 - about that okay so this is the Wikipedia
05:01 - page for quadtree it this reminded me
05:03 - that I that are there that I didn't
05:05 - mention that there are also other kinds
05:06 - of trees like an ox tree which you might
05:09 - use for three dimensions and you could
05:11 - just say K tree for any generic amount
05:13 - of sub sectioning but but I'm gonna
05:18 - really just implement the sort of
05:19 - standard quad tree also known I believe
05:21 - as a point quad tree and if you look
05:23 - here it says operating in O log n time
05:26 - so you might have a thought that I got
05:28 - this wrong because I said n log n but I
05:32 - think I'm actually correct here because
05:33 - the idea here is that to look up a bunch
05:37 - of particles for one for a given area
05:39 - that can happen in log n times but in
05:43 - this where I want to check every
05:44 - particle against every other particle I
05:46 - need to do the log n thing n times so
05:49 - this like let's just say let's just go
05:52 - for let's look at the 1,000 instead
05:54 - instead of 1 million this would be
06:00 - equals one thousand times log of one
06:04 - thousand which is just three thousand
06:07 - checks this is a massive improvement a
06:11 - question has been asked in the chat
06:13 - wouldn't you have to restructure the
06:15 - quadtree every time an object moves and
06:17 - in fact the answer to that question is
06:20 - absolutely 100% yes this quad tree is
06:24 - something that work for collision
06:25 - detection that you have to build each
06:27 - frame of animation and there is a lot of
06:30 - time that it takes to build the quad
06:32 - tree but it's totally worth it because
06:34 - if I can get this one
06:36 - number down to three thousand and just
06:37 - think about it if I had ten thousand
06:39 - elements how much I'm gonna be able to
06:40 - reduce it it's worth building the
06:42 - quadtree okay so what do we need to make
06:45 - this quadtree I'm gonna do make an
06:47 - example using p5 but I'm going to and
06:51 - let me make another JavaScript phylum to
06:53 - call it quadtree je s so this is where
06:56 - so I even though I'm going to use p5 for
06:58 - this example I'm gonna write the
07:00 - quadtree algorithm in JavaScript with no
07:02 - p5 dependencies that way it can be
07:05 - applied you know to lots of different
07:07 - scenarios with other frameworks ok so
07:09 - what do I need to build a quadtree well
07:12 - I need a few kind of core elements here
07:15 - for example I want to have a point class
07:18 - and a point class is just going to be
07:21 - something that stores an x and a y
07:22 - together and again I'm gonna be doing a
07:25 - quadtree in two dimensions I also want
07:28 - to have a rectangle class and a
07:30 - rectangle class is going to be I could
07:34 - have a point you know what I'm gonna do
07:35 - something a little goofy I'm going to
07:37 - give it an X and a y and a width and a
07:43 - height so I need these ideas I need to
07:47 - be able to make and and I couldn't use a
07:48 - p5 vector for the point class but again
07:51 - I want to build this without any p5
07:53 - dependencies so I need these data
07:54 - structures because the what I'm gonna
07:57 - the way I'm going to make this quadtree
07:58 - work is by feeding it points I'm going
08:01 - to say insert points into the quad tree
08:03 - and the quad tree is going to have as
08:06 - part of itself references to all these
08:09 - rectangular areas ok so now let's make a
08:16 - quad tree class so what do I need to
08:23 - make a quad tree now here's the thing
08:25 - think about this a quad tree hoo boy you
08:28 - might go back and look at my binary tree
08:31 - video tutorial or some of my other
08:34 - videos that have to do with recursion
08:35 - because it's what you might think is oh
08:38 - I'm going to have an array and the array
08:41 - is going to store a list of all of these
08:44 - sections or tiles or
08:46 - but I'm not the quadtree is actually a
08:49 - reference just to the large kind of
08:54 - parent the sort of root level rectangle
08:57 - that area and it's gonna have a
08:58 - reference to the four things the four
09:01 - subsections and those a lot of reference
09:03 - of four subsection so that's a tree so
09:04 - actually a quadtree only has the only
09:08 - bit of data that I really need and we'll
09:09 - call it a boundary this stop boundary
09:13 - and that boundary is going to be a
09:14 - rectangle so for example in sketch KS I
09:19 - might say let QT be a new quad tree and
09:24 - I might say let boundary EB a new
09:28 - rectangle and you know what I think it's
09:31 - gonna make life easier if the rectangle
09:33 - is something that we think of as
09:36 - centered registered around its center
09:38 - point and those width and height values
09:40 - are actually just the distance from the
09:42 - center to the edge so not the full not
09:45 - the full length of each sides but the
09:47 - half length so I'm gonna say the
09:49 - boundary is at 200 200
09:51 - well with a width of 200 200 that's kind
09:55 - of awkward but fine because it's 400 400
09:57 - okay so I'm going to create this quad
09:58 - tree with a boundary console dot log Q T
10:02 - so this is like a beginning point a
10:04 - starting point so let's take a look
10:09 - rectangle is not defined because I
10:11 - forgot to reference my new JavaScript
10:14 - file here in my HTML file quad tree as a
10:20 - boundary of a rectangle it has these
10:22 - properties so so far no errors we're
10:24 - moving along now what do I need to do
10:25 - next the thing that I want to do with
10:28 - any quad tree is I want to say something
10:30 - like let me make a little loop and I'm
10:33 - gonna just do it one time and I'm gonna
10:37 - say a point I'm gonna make a random
10:39 - point and a random area in the canvas
10:45 - and I want to say quad tree insert that
10:48 - point the idea is that what I want to do
10:52 - is I want to take all the points that
10:54 - are within this space and these points
10:55 - might represent particles any type of
10:59 - moving age
11:00 - entity but right now I'm just gonna
11:01 - build the static quadtree with static
11:03 - points I want to insert them into the
11:04 - quadri so an important aspect of the
11:08 - quadtree
11:09 - is a property known as capacity so how
11:14 - big is the quadtree when do I choose
11:18 - that I need to subdivide for example if
11:20 - I start putting particles in this
11:23 - section here oh maybe once there's 10
11:25 - particles in that section it's gotten
11:27 - too big I need to subdivide it so we can
11:31 - we could a typical thing might actually
11:32 - be to just have that actually be one as
11:35 - soon as there's more than one particle
11:36 - in that area subdivide but let's give it
11:38 - let's pick the number 4 it's kind of an
11:40 - arbitrary capacity and it might make
11:42 - sense to create a quadtree with a given
11:46 - capacity so when you create it so I'm
11:48 - gonna say capacity equals n so now in
11:52 - sketch I'm gonna do quadtree boundary
11:54 - comma 4 so this is a quadtree
11:57 - with each section each rectangle having
12:01 - a capacity of 4 ok was just pointed out
12:04 - to be that I did have a mistake here
12:05 - this should be height you know it is a
12:07 - square so width and height are equal but
12:10 - if I want to set myself up for success
12:11 - in the future let's try to correct that
12:13 - put height there ok so now I need to go
12:18 - here and I need sure what do I need to
12:19 - do I need to write this insert function
12:21 - insert and what do I want to insert a
12:23 - point and OH
12:26 - what I need to do here so oh wait a
12:30 - second I'm missing something super
12:32 - important what is the quadtree
12:35 - what is each tile need to have
12:38 - associated with it well we know it needs
12:40 - its boundary we now know it needs its
12:41 - capacity but it also needs to keep track
12:43 - of a bunch of points that are part of it
12:45 - so what I can do here is say as long as
12:48 - the length of the points array is less
12:52 - than the capacity then I can just say
12:58 - this dot points push push what the point
13:07 - I've inserted the point now what if the
13:12 - capacity is full
13:14 - well if the capacity is full then what I
13:18 - need to do is subdivide so I'm going to
13:24 - make this into a separate function I
13:26 - think if you look at the Wikipedia page
13:28 - the algorithm that's outlined there kind
13:31 - of does the same thing so I want to make
13:33 - a function called subdivide and what
13:36 - that function does is it takes any
13:40 - rectangle object
13:43 - remember that has an X Y and a width and
13:47 - a height and subdivide it into four
13:50 - sections over there and so all I need to
13:53 - do is compute these four points and
13:55 - these four width in Heights and I'm
13:58 - going to store those in variables and a
14:00 - way that you could do this right I think
14:02 - I've done this is like top left top
14:04 - right bottom right bottom left another
14:07 - thing that I've seen done is on north so
14:10 - north east is this Northwest Southwest
14:13 - southeast and so that's the sort of
14:16 - convenient way I can refer to these
14:18 - styles these subsections as Northwest
14:20 - northeast Southwest southeast so just to
14:24 - be kind of concise about the words I'm
14:26 - going to use I probably should type
14:28 - these all the way out actually so let's
14:30 - do this this dot north-west equals a new
14:35 - quadtree so I need to make all of these
14:38 - subdivisions south north east south west
14:49 - south east okay so this is gonna work so
14:54 - each one of these I'm making a new quad
14:56 - tree for each one of these set
14:59 - subsections but they need to when you
15:01 - make a quadtree you need to give it a
15:02 - boundary so what I need to do is say I'm
15:05 - gonna say let North let North West equal
15:09 - a new rectangle that is so North West is
15:14 - up here X plus width divided by 2y minus
15:19 - height divided by 2 and then with
15:22 - divided by 2 height divided by 2 so I'm
15:26 - gonna make a new rectangle that
15:28 - at this dot X plus this hot w divided by
15:32 - 2 comma this stop Y minus this dot H
15:35 - divided by 2 and then this w divided by
15:38 - 2 this dot H divided by 2 so that is the
15:41 - boundary for the northwest northwest
15:45 - quadrant and then I'm going to pass that
15:47 - in here and then I'm going to do the
15:49 - same thing for northeast for Southwest
15:55 - and southeast
15:57 - so now though northeast would be X minus
16:00 - and then Southwest and southeast R plus
16:06 - Southwest is X plus and the southeast is
16:10 - X minus so does this make sense right
16:12 - plus minus plus minus and then minus
16:17 - minus plus plus so I think I've gotten
16:19 - all the quadrants here so I've made
16:21 - rectangles out all the quadrants and put
16:23 - them into variables now here's the thing
16:25 - I don't always want to subdivide right I
16:28 - only want to subdivide if I haven't
16:30 - already subdivided this quadrant this
16:34 - this quadtree so I could check I think
16:36 - what I'm going to do is I'm gonna make a
16:39 - variable called divided which is false
16:42 - and then I'm going to say if not if not
16:46 - this dot divided this dot subdivide and
16:51 - then this dot divided equals true now
16:56 - what I need to do is if I'm at capacity
17:00 - I remember I'm inserting a point the
17:03 - whole thing that I'm doing here is
17:04 - inserting a point I've made a pretty big
17:07 - error here I've gone off the deep end
17:10 - writing way too much code before testing
17:12 - it there is no this refers to this
17:15 - particular quad tree there's no this dot
17:18 - X what there is is this boundary X boy
17:21 - this is going to make this super
17:22 - long-winded let's do this I kind of feel
17:25 - silly doing this but I think this is
17:27 - going to make our life much easier just
17:29 - in terms of being able to read the code
17:31 - so I'm gonna make this is totally
17:37 - unnecessary but just to make the code
17:39 - more readable let's make some local
17:41 - variables to this function that are kind
17:44 - of like aliases to this longer way and
17:46 - then I'm gonna start over again and I'm
17:49 - gonna say X plus W divided by 2 y minus
17:54 - W divided by 2 W divided by 2 H divided
17:58 - by 2 and this should be H and now I'm
18:02 - gonna put these all back here north east
18:06 - south west south east and this is X plus
18:14 - X minus X plus X minus y minus y minus y
18:19 - plus y plus mi right finally West and
18:28 - Easter swapped Oh also West the Easter
18:36 - SWAT boy northeast I'm gonna do it this
18:39 - way northeast northwest yeah south east
18:43 - south west right because east west if
18:51 - this is the center right east to the
18:54 - west north to the south ok everybody I
18:57 - think I've got it now
18:58 - oh boy so now I'm gonna now I need to
19:00 - pass in those boundaries north east no
19:07 - north east north west south east south
19:17 - west really bad feeling that about 15
19:22 - minutes of this video is me just trying
19:24 - to figure out north south east west the
19:26 - good thing is that parts done I think
19:29 - we're good now ok so I'm feeling pretty
19:31 - good about this code there still could
19:33 - be an error there but I'll find it later
19:34 - if there is so remember where we were we
19:37 - were checking if it hasn't been divided
19:40 - subdivide it and now what's the whole
19:42 - point remember the whole point of what
19:44 - I'm doing I was just saying this before
19:45 - I found all those errors are the chat
19:46 - found all those errors that I'm trying
19:48 - to insert to point so if I'm at capacity
19:51 - now I just need to insert the point in
19:53 - my subsections
19:55 - so I can actually say remember these
19:56 - subsections are all quadtrees so I can
19:59 - recursively call the insert function on
20:02 - those so I can say this dot North East
20:06 - dot insert that point so let me do it to
20:10 - each one of these north west south east
20:19 - south west so think about this I'm gonna
20:23 - get rid of some of this extra whitespace
20:25 - the idea here is that okay if I have
20:30 - room I'm gonna take the point and I'm
20:32 - done if I don't have room then I need to
20:37 - check do I have some children quadtrees
20:40 - if not ah if I don't I'll make them and
20:43 - then I'll just say add I'll just sort of
20:45 - say hey pass the buck here you take that
20:47 - point all four of you and all four of
20:49 - those will say do I have room but here's
20:53 - the thing I'm missing something kind of
20:55 - important here should I really be taking
20:58 - that point and I kind of made sense at
20:59 - the beginning that I just said well why
21:01 - I've room take the point but really I
21:03 - should be checking is this point
21:06 - something that's within my boundary
21:08 - that's the whole point of this because
21:10 - now that I'm gonna say hey all four of
21:11 - you only one of those should really
21:13 - actually take the point right those so
21:16 - what I really need to do before I even
21:17 - insert the point at all is I need to say
21:19 - something like if if this dot boundary
21:25 - contains the point and better yet
21:29 - something like if this stop boundary
21:31 - does not contain the point then just get
21:33 - out of here like I don't want to do
21:36 - anything if I'm ignoring I don't contain
21:39 - the point stop don't go any forward I'm
21:42 - the wrong path I'm the wrong section
21:44 - some other sections gonna take care of
21:46 - it this dot boundary dot contains well
21:49 - that means in my rectangle function
21:51 - I need a contains function that returns
21:55 - true or false based on some point so
21:59 - what I can say is I could say hey is or
22:03 - I can actually just return point dot X
22:06 - and this is going to be really long
22:07 - point dot X
22:08 - if it has to be within all of the bounds
22:11 - so it's got to be greater than this dot
22:13 - X minus this dot W and and I can put
22:19 - these I think on different lines just to
22:21 - point dot X is point dot X is less than
22:25 - this dot X plus this W and point dot y
22:30 - is less than is greater than this y plus
22:34 - way this is a really exciting thing in
22:35 - programming and point dot y is less than
22:39 - this dot y plus this dot H oh my
22:42 - goodness minus and plus right remember
22:48 - contain contains contains this is a
22:52 - function that checks if this particular
22:56 - point is within the boundary so is the
22:59 - point is a particular point within the
23:04 - center - the width and the center plus
23:08 - the width the center - the height and
23:10 - the center plus the height and I'm gonna
23:11 - stare at this code for a second to see
23:13 - if it's right ok I feel like that's
23:16 - pretty good so why not let's keep going
23:21 - here so if it's not in here go away
23:25 - otherwise if I'm not a capacity add the
23:29 - point if I'm not divided subdivide and
23:32 - then just try to insert to all my all
23:36 - these children points now I feel like I
23:38 - need insert to kind of like return true
23:42 - or false but I guess because at some
23:45 - point it's gonna be done but I think
23:47 - this is actually pretty good ok I had a
23:51 - nice suggestion from the chat which that
23:54 - maybe it makes sense to in the subdivide
23:56 - function actually set this dot divided
23:58 - equal to true okay so let's let's think
24:01 - about this how am I doing here what is
24:04 - this gonna do let's let's actually try
24:06 - running the code all right so I have a
24:10 - boundary its capacity is four it has a
24:12 - points array and it got a point
24:14 - that's good that's great let's add four
24:18 - points
24:24 - all right look at this I've got a
24:27 - boundary I've got a capacity divided is
24:30 - false and I've got four points great so
24:33 - now if I add five points it's definitely
24:36 - gonna have to subdivide let's see how
24:38 - that works let's add five whoops let's
24:40 - add five points now it could have
24:43 - changed the capacity of the smaller oh
24:44 - we've got a problem so look at this when
24:48 - I when I set in the constructor this
24:54 - property n as the capacity but when I
24:58 - make these new quadtrees I'm not passing
25:01 - that in so I could like do something
25:05 - like this but I think let's just I made
25:11 - this a little extra complicated but
25:12 - let's pass in also the capacity so that
25:15 - capacity needs to continue to be there
25:18 - now let's try with five points all right
25:24 - look at this it's got four points
25:27 - where's that fifth point where's that
25:30 - fifth point it's not in the North West
25:33 - East it's not in the North West
25:34 - it's not in the southeast it's in the
25:36 - southwest because does this seem right
25:39 - the point is 104 354 that sounds like
25:43 - South West yes West it's this way south
25:50 - it's this way so I think this is working
25:51 - I think we're kind of getting it
25:53 - subdivided correctly let's let's try 50
25:57 - points no errors I've got a quadtree
26:02 - with a capacity of 4 it's got four
26:04 - points North East has a capacity of four
26:06 - it's divided it's got four points it's
26:09 - got a bunch of subsections which of
26:11 - which have this one just has one point
26:13 - but maybe this one has no points so I
26:17 - think it's is working but here's the
26:19 - thing is this working looking at the
26:22 - console is only going to get me so far I
26:26 - think what would help me now to see if
26:28 - this is working really is to visualize
26:30 - it so I'm gonna break with what I said
26:33 - at the beginning whoops which
26:35 - trying to purely have this I I think
26:40 - what I want to do I mean I kind of want
26:42 - the quadtree thing to be independent of
26:44 - p5 but I'm going to give that up just
26:46 - for a second because I want to write a
26:47 - function called quadtree show and what
26:50 - I'm gonna do here is I am going to write
26:53 - out a function called show and what is
26:57 - this going to do I'm gonna say stroke
26:59 - 255 or let's a stroke 255 no fill and
27:04 - I'm gonna draw a rectangle at this stop
27:07 - boundary dot X and this stop boundary
27:11 - dot Y and this dot W times two I need to
27:18 - say times two because p5 expects the
27:20 - full with this dot H times two so I'm
27:24 - drawing the rectangle for the boundary
27:26 - and then sorry I'm thinking about this
27:35 - for a second and then I'll write then if
27:38 - then I want to recursively draw any of
27:41 - its children boundaries so if this is
27:43 - divided then I can say this dot North
27:47 - West Show so I want to recursively north
27:53 - east south east south west doesn't
27:58 - really matter what order but just to be
28:00 - consistent northeast northwest southeast
28:02 - southwest let's take a look a rectangle
28:08 - is not defined quadtree jsf wrecked in
28:14 - p5 w is not defined line 73 oops this
28:20 - should be two and then let's see here
28:27 - background zero alright what happened
28:35 - here
28:35 - thankfully the chat is here to tell me
28:39 - that this is this dot boundary right I'm
28:44 - always confusing forgetting that the X Y
28:46 - width height properties are in the
28:48 - boundary object
28:50 - not part of the quadtree object itself
28:51 - so you can say this boundary H so let's
28:55 - see what happens now
28:57 - there we go Oh everything looks like
28:59 - it's right but off kilter and this is an
29:02 - easy one
29:03 - I forgot to say rect mode Center because
29:05 - I want to draw the rectangle space on
29:07 - the center there we go
29:08 - this looks good now let's actually draw
29:11 - the points point let's say for for let P
29:19 - of points this dot points and let's just
29:24 - say point O P sorry point P X P dot Y so
29:34 - this isn't very many points and it's
29:35 - very hard to see those so let's say
29:37 - stroke wait for and stroke wait one up
29:46 - here stroke wait one and let's go to
29:50 - sketch J s and let's make 500 points and
29:54 - there we go this kind of makes sense
29:56 - right you can see for whatever reason
29:59 - there are not as many points here so it
30:01 - didn't need to subdivide but it's sort
30:03 - of idea we never got anywhere to
30:04 - subdivide beyond just this size right is
30:08 - there any so what's kind of unfortunate
30:10 - about this is why not because I'm
30:12 - calling things randomly about kind of
30:15 - setting the points randomly the
30:16 - subdivisions are just like perfect it's
30:20 - so evenly distributed distributed that
30:22 - the subdivisions aren't that interesting
30:24 - let's change this I have an idea let's
30:26 - actually add let's get rid of this
30:29 - whoops let's say let's add let's add the
30:38 - draw function and I'm gonna say if I
30:42 - could use Mouse drag but I'm gonna say
30:44 - if mouse is pressed and I'm going to say
30:47 - because I have an idea here I'm gonna
30:50 - well first I want to always draw it and
30:52 - then I want to make a new point where
30:57 - the mouse is
31:01 - and I want to insert that point and I
31:07 - need that this to be a global variable
31:09 - now the quadtree itself I'm just gonna
31:11 - call it tree because I don't like QT is
31:15 - sort of a I think it'll pick a little
31:17 - bit more I guess I'd call it Q tree kind
31:19 - of like that Q okay so bear with me for
31:26 - a second what I'm doing here is I want
31:28 - to insert points where I'm clicking the
31:30 - mouse so with this show of undefined oh
31:36 - whoops I do not want to read Eclair Q
31:39 - tree with let so we can see as I draw it
31:45 - has to subdivide more where I am that's
31:47 - kind of cool is it what's why is the
31:53 - framerate seem so slow so let me
31:56 - actually insert what I wanted to do was
31:59 - just insert a bunch of points I think
32:01 - this will make it more interesting to
32:02 - look at like if I actually insert five
32:05 - random points whenever I'm clicking the
32:07 - mouse and we can just set these like a
32:11 - little bit randomly around one area and
32:14 - let me run this again yeah so you can
32:17 - see I'm just getting these like
32:19 - subdivisions and so now we can sort of
32:21 - see that what I'm doing here and is I'm
32:28 - getting a nice it's subdividing more
32:31 - where it needs more subdivisions if that
32:34 - makes it out I'm being asked a couple
32:36 - different questions from the chat number
32:38 - one is edge cases and what I mean by
32:40 - edge cases what if the point is exactly
32:43 - on the edge of one of those sections
32:46 - I didn't account for that the truth of
32:48 - the matter is that these random numbers
32:49 - and floating points but this could
32:51 - really happen so what I think that I
32:53 - need to do here is in the insert
32:55 - function in the contains function what I
32:59 - need to do probably is just consider
33:02 - whether it's less than or equal to and I
33:05 - could do that on just two edges so that
33:07 - it would kind of but you know what if
33:10 - it's on the edge of the very edge I
33:11 - don't know what I could do is just kind
33:14 - of
33:14 - inclusive how do you write these like
33:19 - this and this should take care of that
33:24 - because I'm gonna I'm gonna just say if
33:26 - you're on my edge I'm gonna I'm gonna
33:27 - I'm gonna take you don't worry and I
33:30 - probably could get not but I'm not
33:33 - concerned too much about the accuracy of
33:34 - this and you can see so same same thing
33:36 - and interesting it's really subdividing
33:39 - a lot in these areas I could so here we
33:42 - go so this is kind of this is kind of an
33:44 - interesting visual result like I almost
33:45 - want to go back to not drawing the
33:48 - points now like let me take out the
33:51 - points because now I'm able to draw I'm
33:54 - kind of like with my mouse I'm drawing
33:56 - this kind of interesting recursive tree
33:59 - pattern it's not doesn't seem like a
34:01 - tree but it's all if I were to unpack
34:03 - the way it's stored its all this nested
34:05 - tree of rectangle objects okay so what
34:08 - am I really done here I have made the
34:09 - quad tree but I'm missing kind of a
34:12 - really important point because what I
34:14 - want to use the quad for is to query it
34:17 - I want to say hey this area could you
34:20 - please give me all the particles back
34:22 - that are in that area and I think what
34:24 - I'm going to do is make that part 2 of
34:25 - this coding challenge because this first
34:28 - part of the coding challenge is is I can
34:32 - is is finished I've made the quad tree
34:38 - data structure and I'm storing the
34:39 - points in it ah there was I do want to
34:41 - address one question is oh yeah this
34:46 - will add okay so hold on I realized that
34:49 - so the thing is it is it is going to add
34:52 - it to more than one of these which is a
34:55 - problem so before I leave it was
34:57 - rightfully pointed out to me that the
34:59 - way I just did that with equals is that
35:02 - it would actually go into if it was
35:03 - exactly on the edge between like east
35:06 - and west it would end up in both of
35:08 - these quad trees which is a bit of a
35:09 - problem so there's a couple ways I could
35:12 - address that again though what I think
35:14 - what I want to do here is I want this
35:16 - function the 'insert function to return
35:19 - true or false whether it's succeeded in
35:21 - in in inserting the point so it should
35:24 - return false if it's not contained
35:27 - and it should return true it should
35:32 - return true if it is actually inserted
35:35 - into the points array and then I could
35:36 - just say if I can wrap each one of these
35:41 - I can actually just return the result of
35:46 - each one of these right so that way oh
35:53 - no no no no no no no I can't do this
35:56 - because they don't want I really have to
35:58 - say if it insert only if it's true
36:02 - return true if this is a little awkward
36:05 - but this is fine oh yeah you know you
36:06 - know me I like to refactor later so what
36:09 - this is gonna do is it's just going I
36:13 - could use an else at least I guess right
36:17 - because I so what I want to do is I want
36:21 - to find it's gonna you know I want to
36:23 - find where it's been where it's got
36:27 - inserted and then I want to return true
36:29 - okay so all this extra stuff I'm adding
36:32 - here maybe this is silly and I should
36:37 - have just used thought of the boundaries
36:39 - more carefully but this is going to
36:41 - guarantee that it's only ever inserted
36:44 - into one and it is giving slight
36:45 - preferential treatment to North East
36:47 - because it was on the boundary it's
36:48 - always going to go into North East as
36:50 - opposed will never get to North West but
36:52 - that's okay I think so let's just see if
36:55 - this is still working it is somehow I
36:57 - like imagining it's working faster but I
36:59 - don't think it actually is wonderful
37:01 - okay am I really at the end now ah
37:04 - there's a nice little there's yeah
37:09 - there's people are giving you all sorts
37:11 - of suggestions about how to improve this
37:13 - code I could use like an or and so I
37:15 - encourage you to make a much nicer
37:18 - version of this in your own code I'm
37:20 - gonna leave it like this because it's
37:21 - really explicit about the algorithm I do
37:23 - want to write some comments in here so
37:25 - I'm gonna finish with this first part
37:27 - one of quadtree I've made a quadtree
37:30 - in like only four and a half hours it
37:32 - took me and I'm gonna do a part two and
37:35 - in part two what I'm going to do is ask
37:38 - for a selection of point
37:43 - within a certain boundary and then I can
37:46 - apply that to a collision detection out
37:47 - a problem and make that collision
37:49 - detection problem much much faster okay
37:51 - so thanks for watching this part one and
37:53 - watch part two if you liked it'll be
37:54 - next-- and you can find a link to it in
37:55 - this video's description
38:01 - [Music]