00:00 - hello I'm so excited for you to watch
00:02 - this next tutorial video which is a
00:04 - guest tutorial video because the guests
00:07 - always make more sense to imparied a
00:09 - little less insane in a good way trust
00:10 - me today we have goal on leaven a
00:12 - inspiration of mine in fact he was the
00:15 - inspiration behind the clocks coding
00:17 - challenge that I recently did and port
00:20 - of the John Midas twelve O'Clock project
00:23 - goal on 11 has been making art with
00:25 - computers and a variety of things for a
00:27 - very long time you can see all about him
00:29 - more about him on his website which will
00:31 - be in this video's description he is a
00:32 - professor at the Carnegie Mellon
00:34 - University the director of the studio
00:35 - for creative inquiry there I hope you
00:37 - decide after watching this video that
00:39 - you want to learn all about goal 11 and
00:41 - he's gonna talk to you about something
00:43 - that I can't believe I don't have a
00:44 - tutorial about somehow I don't I don't
00:46 - even know how to say it modulo modulus
00:48 - something like that good thing I'm not
00:49 - making the tutorial all aboard the
00:51 - modulo coding trade thing with goal 11
00:54 - enjoy hey everyone I'm going on 11 and I
00:57 - am so thrilled to be here on coding
00:59 - train today thanks so much Dan for
01:01 - having me here
01:02 - here's over here and today we're gonna
01:04 - talk about the modulo operator which is
01:06 - this weird non alphanumeric character
01:08 - when I first started learning the
01:09 - program I was looking over the shoulder
01:11 - of programmers and I saw you know lots
01:13 - of these strange characters and like
01:15 - plus I understood and - I understood but
01:16 - like this weird % huh like what does
01:20 - that mean and so today the topic is the
01:24 - modulo operator modual oh okay so but
01:29 - you might see for example a sentence
01:31 - that looks like this you know like a
01:34 - equals 5 mod 3 or something like that
01:41 - and if it's processing you might say
01:42 - like int a or if it's JavaScript with p5
01:46 - it might be like you know var a but the
01:49 - key here is this 5 % 3 what's that
01:51 - that's what we're gonna talk about ok so
01:54 - what we should really do is talk about
01:56 - the different parts of this this part
01:58 - here is called the dividend just so we
02:02 - know this part here is called the
02:06 - divisor
02:08 - okay this part here is called the
02:11 - remainder
02:14 - okay so the modulo operator is remainder
02:18 - after division and what does that mean
02:20 - well after you divide something by
02:22 - something else sometimes it goes in
02:24 - evenly but sometimes there's a little
02:25 - bit left over and that's the spare
02:27 - change that we're interested in so to do
02:28 - this we're gonna look at a table of the
02:31 - mod operation and it's going to look
02:32 - something like this I'll say here's the
02:34 - mod and here's the remainder after
02:39 - division and we'll start with five
02:41 - because I've got five fingers okay and
02:43 - I'll start to be here with five mod five
02:46 - now what is five by five one way to read
02:49 - that is to say I'm going to take five
02:51 - divide it by five and look what and look
02:54 - at what's left over well when I do that
02:56 - I have five divided by five well that
02:58 - goes in exactly once and there's nothing
02:59 - left over five goes into five perfectly
03:02 - so since there's nothing left over the
03:04 - remainder is zero now how about six mod
03:08 - five what's that that's a funny-looking
03:10 - five there all right
03:12 - six mod 5 well 5 goes into 6 once and
03:14 - what's left over obviously one one's
03:17 - left over so that's cool that is the
03:19 - remainder after division right how about
03:22 - seven mod 5 well 5 goes into 7 once and
03:27 - there's 2 left over right you know after
03:30 - you divide it and there's still five
03:32 - then six and seven so there's 2 left
03:33 - over how about 8 mod 5 easy there's
03:38 - three left over 5 goes into 8 once and
03:40 - there's 3 left over 9 mod 5 okay and
03:45 - well 5 goes into 9 once and with 4 left
03:48 - over okay and how about 10 mod 5 10 mod
03:53 - 5 be careful here 5 goes into 10 twice
03:57 - but the answer is not - the answer is
04:00 - zero because there's zero left over
04:02 - after 5 goes into 10 right 5 goes into
04:05 - 10 twice zero left over now the thing I
04:08 - want to bring your attention to is this
04:09 - interesting pattern here which is 0 1 2
04:12 - 3 4 0 right because it's going to keep
04:14 - repeating that way if I say 11 mod 5 5
04:18 - goes into 11 twice that's my bottom here
04:22 - ok 5 goes into 11 twice but there's one
04:24 - left over and
04:25 - back up the other way if I say 4 mod 5
04:28 - what happens when this number is less
04:30 - than this one that's ok 5 goes into 4
04:33 - zero times but there's four left over
04:34 - and three mod five
04:37 - well easy there's three left over after
04:40 - five goes into three zero times to mod 5
04:44 - gives us two left over gives us one left
04:49 - over and here we see this pattern one
04:51 - two three four zero one two three four
04:52 - zero in fact if we're taking something
04:56 - mod five we will get a pattern that goes
04:58 - from zero up to five minus one or four
05:01 - we'll say 0 1 2 3 4 0 1 2 3 4 0 that's
05:06 - the pattern we're going to see so let's
05:07 - hop over to the code so I have p5.js up
05:11 - on the screen and we can you know just
05:14 - try and see what happens when we print
05:15 - something like 5 mod 5 does it actually
05:17 - check out let's try it out oh look it
05:19 - prints out 0 but if I say 6 mod 5 and I
05:24 - run that I get 1 let's run a little for
05:26 - loop and just kind of verify this for
05:28 - ourselves I'll say for VAR i equal 0 I
05:31 - is less than let's say 20 i plus plus
05:35 - and we will print something like i mod 5
05:41 - okay i run that and if we look at what
05:46 - the result is
05:47 - we'll see this pattern we talked about 0
05:49 - 1 2 3 4 0 1 2 3 4 0 right now that's
05:53 - because we're taking something mod 5
05:55 - let's try a different number over here
05:58 - in this in this mod place let's try I
06:01 - mod 3 we can extend this window down and
06:05 - extend this up and we see 0 1 2 0 1 2 0
06:10 - 1 2 remember I said it's gonna go from 0
06:12 - up to the number we're taking the Motta
06:14 - of -1 so the remainder is 0 the
06:17 - remainder is 1 their major is 2 and the
06:19 - next one is a multiple of 3 so the
06:20 - remainder is 0 again alright
06:22 - in fact to make it even more clear we
06:23 - can print out I plus a space plus I mod
06:26 - 3 and we'll sort of see what this looks
06:28 - like together right we'll see o 0 mod 3
06:31 - is 0 1 mod 3 is 1 2 mod 3 is 2 3 mod 3
06:34 - is 0 again because 3 goes into 3 once
06:36 - with 0 left over
06:38 - so why are we really here today well
06:41 - I've seen Dan do a lot of lectures where
06:43 - he sort of mentions the mod operator in
06:45 - passing I thought be nice to focus on
06:47 - that and actually like see what we can
06:49 - do with it
06:50 - in its own way look how can we use it to
06:52 - do interesting and creative art and so I
06:55 - we're gonna set up some examples where
06:56 - we sort of see what the mod operator can
06:58 - do okay
07:00 - so here's a real simple boilerplate
07:01 - application let's get started with a
07:03 - nice little mod project I set up the
07:05 - canvas at 600 by 400 pixels and then
07:08 - I've set the background to white let's
07:10 - draw a series of lines whose lengths are
07:12 - based on a mod of an iterating number
07:16 - I'll say 4 I'm not typing what happened
07:22 - there okay for VAR i equals 0 i is less
07:28 - than let's say the width of the screen i
07:30 - plus plus and let's just draw a little
07:33 - line we'll say something like i'll say
07:37 - that there's a VAR i'll call it y and
07:39 - it'll be equal to i mod pick a number
07:44 - like 5 like we did before i mod 5 and
07:46 - we'll draw a line which is located I
07:48 - across starting from the top zero down
07:51 - to I across Y down and let's draw that
07:55 - now do we get anything hmm
07:58 - actually it looks like we did but you
08:00 - have to zoom all the way in do you see
08:02 - that oh it's happening there we're gonna
08:05 - have to kind of zoom in on that to see
08:06 - it better though let's choose not I mod
08:08 - 5 but I mod 50 and if I run that now we
08:13 - can really see it so what's this strange
08:15 - pattern well in fact it's counting up
08:18 - remember 0 1 2 3 4 0 1 2 3 4 when we
08:22 - were looking at I mod 5 here it's
08:23 - counting up from 0 1 2 3 4 all the way
08:26 - to 49 when it repeats again and then it
08:29 - repeats it jumps back down to 49 so from
08:32 - 49 to 0 so one thing that mod is really
08:36 - useful for is taking a number which is
08:38 - counting up indefinitely for example and
08:40 - producing from it a periodic pattern ok
08:43 - which is constrained tightly constrained
08:46 - to a region that we care about so here
08:48 - for example I have a number it's going
08:49 - up to the wid
08:51 - and which you know extends in this case
08:53 - up to 600 but even though the width
08:56 - extends up to 600 I which is going up to
08:59 - the with mod 50 keeps going 0 to 49 and
09:01 - 0 to 49 0 to 49 0 to 49 if I make that I
09:04 - mod 37 I'll get these smaller triangles
09:07 - to go from 0 to 36 right ok so let's
09:13 - look at another example of what we can
09:15 - do with mod so let's doubt this time
09:17 - we'll use the position of an object
09:18 - that's animating I'm gonna say that
09:20 - there's var X will be equal to the frame
09:23 - count mod let's say mmm 100 now a frame
09:29 - count as you may know is a number which
09:30 - is counting the number of frames since
09:32 - the program was executed if we want we
09:34 - can print it out so let's print just to
09:36 - see what this looks like we'll print X
09:38 - plus a space to separate it and then
09:41 - we'll print out the frame count so we
09:43 - can see what what it actually looks like
09:45 - so X plus the frame count and if we were
09:50 - to run this okay we'll see oh it's
09:52 - counting up to 100 but then X is keeps
09:57 - is is constrained to the range from 0 to
10:00 - 99 even though the frame count continues
10:02 - up indefinitely as long as we run the
10:04 - program okay which means we can use this
10:08 - for animation in some interesting ways
10:09 - if I were to draw an ellipse which is
10:12 - located at X across and height over to
10:18 - down which was let's say 50 by 50 pixels
10:22 - and I'll set the fill to my favorite
10:24 - color which is like a pink 200 200 then
10:28 - we run that here's this little circle as
10:32 - you can see over here and it keeps
10:34 - moving across this way and then
10:36 - repeating so I've gotten periodic
10:39 - repetitive motion in the same way by
10:43 - using mod of a continually increasing
10:45 - quantity so for my next trick we're
10:48 - going to use mod to determine whether a
10:49 - number is odd or even and use that to
10:52 - create a different kind of repeating
10:53 - pattern in this case a checkerboard so
10:56 - let's go I'm gonna say 4 when we turn
10:59 - off my little pink dot there
11:01 - okay for VAR i equals zero I is less
11:05 - than let's say 8 for a checkerboard 8
11:06 - squares across I plus plus I'll set my
11:09 - background to middle gray so that it's a
11:11 - not black nor white and let's just draw
11:14 - a square I'll set my fill to white for
11:17 - the start 255 is white in a grayscale
11:21 - color now let's draw a little rekt will
11:23 - say that there's a rect and I'll draw it
11:25 - at I times 50 located at height over 2
11:31 - down and we'll make it 50 across 5050
11:34 - use its width and height and let's just
11:36 - draw that here we go ok great so I've
11:38 - got 8 squares as you can see right there
11:40 - 8 squares but they're all white now
11:43 - suppose I want to have every other
11:44 - square be black right black with a white
11:47 - black white black white black how do I
11:49 - do that well I can tell whether
11:52 - something is odd or even by looking at
11:54 - I'm odd to think about it I'm odd too if
11:58 - I were to be 0 0 divided by 2 well 0 and
12:03 - the remainder what's left over is 0 1
12:06 - mod 2 2 goes into 1 0 times with one
12:09 - left over 2 mod 2 2 goes into 2 one time
12:13 - 0 left over 3 mod 2 well 2 goes into 3
12:17 - one time with one left over and so we
12:20 - see that pattern again 0 1 0 1 0 1
12:22 - that's our odd even odd even odd even
12:25 - pattern and we're going to use that so
12:27 - let's say the following
12:28 - let's do make let's make a little a
12:30 - little test for this we'll say if I mod
12:33 - 2 is equal to 0 which is to say if it's
12:38 - an even number if it has 0 left over
12:41 - then I'll set the fill to white else
12:47 - I'll set the fill to black so there we
12:52 - see the fill is white if I mod 2 is 0
12:54 - otherwise the fill is black and we run
12:58 - this and look there it is white black
13:01 - white black for my final trick I'd like
13:04 - to show you just a kind of one last
13:05 - program that kind of summarizes in a way
13:07 - what we've already learned today about
13:08 - mod and this is a program that begins in
13:11 - the following way
13:12 - I have a constant called number of
13:14 - elements n elements and I'm gonna say
13:16 - it's ten for the time being and I have a
13:18 - variable called my counter which is
13:20 - gonna count the number of times that I
13:22 - press a key on the keyboard I set up my
13:24 - canvas that's a standard kind of
13:25 - boilerplate thing and then over here I
13:27 - have a in my key press function you'll
13:29 - see that I'm going to say my counter
13:31 - equals my counter plus one so every time
13:34 - I press the key I'm going to increment
13:35 - my counter for those of you who like to
13:37 - save a few keys on key pressed you can
13:40 - say my counter plus plus same thing and
13:43 - I'm also gonna make a little a little
13:45 - bell or a little a little click sound
13:47 - whenever I do that so downstairs I have
13:49 - some some playing stuff that plays a
13:50 - sound so let's just run that and here's
13:54 - the program the draw is we'll get into
13:56 - the minute but it's basically it draws
13:58 - some stuff based on the mod function
14:00 - we'll talk about how that works in a
14:01 - second down here and display text I
14:03 - serve show what the text is and then I
14:05 - got some stuff to load and play the
14:06 - sounds but the goodies are really all up
14:08 - here and set up and keep pressed let's
14:10 - let's just kind of run so here I am and
14:12 - whenever I click the button on the
14:15 - keyboard it's going to increment my
14:16 - counter so now my counter is 1 and of
14:19 - course my counter mod 10 in this case is
14:21 - 1 and then now I click it again in my
14:24 - counter mod 10 is 2 7 8 9 now when I
14:28 - press it one more time my counter is
14:30 - gonna increment to 10 but my counselor
14:32 - mod 10 will be 0 I can keep doing this
14:38 - and you'll notice here that when I say
14:41 - something mod 10 I'm actually just
14:43 - looking at the ones digit but if we
14:46 - change the number of elements to
14:48 - something unusual and prime like 7 then
14:52 - I'm looking after the remainder after
14:54 - division so this has all sorts of
14:57 - efficient uses if you have for example
14:58 - an array of fixed length and you're
15:00 - putting elements into it and you want to
15:02 - sort of constantly add to the end and
15:04 - you maybe pop off the beginning of
15:05 - pluses other kinds of ways of doing that
15:07 - with data structures in JavaScript but
15:09 - this is just a way that I can I can
15:12 - constantly
15:16 - what make sure that as I ain't come in
15:18 - something I'm constrained to arrange
15:20 - while producing periodic to agent
15:23 - finally some last quick remarks can you
15:26 - take the mod of floating-point numbers
15:29 - that have like fractional bits like can
15:31 - you do a mod 2pi or mod of 5.3 and the
15:35 - answer is yes but it depends on the
15:38 - environment you're in
15:39 - so in processing and in p5 you can but
15:42 - for example in Arduino you can't because
15:44 - it's an integer only system and that's
15:46 - actually more common and if you're using
15:48 - open frameworks which is a sort of C++
15:50 - based environment you actually can't use
15:53 - the mod operator it with a little % for
15:55 - doing mod instead if you want to do
15:57 - floating-point mod you have to use a
15:58 - function called F mod which is a little
16:01 - a little different function specifically
16:03 - for floating-point modulus operated
16:05 - operations lastly what is something mod
16:08 - 0 mm-hmm well actually it's undefined
16:12 - because you're asking for the remainder
16:13 - after dividing something by zero and
16:15 - there it depends on how your environment
16:17 - treats the division by zero in the case
16:19 - of of p5.js if I say over here if I say
16:26 - void setup oops excuse me
16:29 - functions that have a little bit of Java
16:34 - there and if I say print 5 mod 0 what's
16:40 - gonna happen in p5.js I'll get no it's
16:46 - actually kind of saving your but there
16:48 - but in processing let's run that
16:52 - here's processing ok what do we get if I
16:57 - say print line 5 mod 0 what happens oh I
17:04 - get an a RRIF arithmetic exception
17:06 - division by 0 so be careful you can end
17:09 - up with with problems if you do mod 0
17:11 - and that's all for today thanks everyone
17:19 - [Music]