00:00 - hello again where i last left off in the
00:02 - previous video i
00:03 - implemented the steering behavior seek
00:06 - this little triangle is seeking this red
00:09 - circle and i am on a quest i would like
00:12 - to implement
00:14 - every single one of these behaviors that
00:15 - craig reynolds outlines in the 1999
00:18 - paper
00:18 - steering behaviors for autonomous
00:20 - characters so i haven't gotten very far
00:22 - i've just done seek i don't know that
00:24 - this round of videos that i'm making in
00:26 - this year this moment right now 2021
00:29 - if i will get to all these i'm going to
00:30 - get to a bunch but hopefully sometime in
00:32 - the future when you're watching this you
00:34 - will write a comment saying
00:35 - congratulations you finally have a video
00:37 - on every single one of these for now all
00:39 - i have is seek good news
00:41 - in this video i'm going to knock out
00:43 - flea pursue
00:44 - evade and arrival all at once
00:47 - let's make a list
00:52 - as a reminder the seek behavior is
00:54 - defined as steer towards the target at
00:56 - maximum speed
01:01 - this is the desired velocity and the
01:03 - length of that velocity
01:04 - is max speed we're going to be done with
01:08 - flea in about
01:09 - 30 seconds you start the clock
01:12 - flee is defined as steer away from the
01:15 - target at maximum speed
01:17 - so this would be the desired velocity
01:20 - for flee
01:21 - going back to the code it's as easy as
01:24 - finding the seek function
01:25 - looking for the force and multiplying it
01:28 - by negative one
01:29 - if i hit run there it goes it's going to
01:31 - flee that target
01:32 - and i think that i did this in the 30
01:34 - seconds a lot
01:36 - but i actually want to pause and take a
01:38 - little bit of moment to breathe here
01:39 - because really i have a goal i don't
01:42 - want to build examples that only do one
01:44 - thing
01:45 - i eventually want to be able to mix and
01:47 - match
01:48 - all of these different behaviors within
01:50 - one sketch but
01:51 - i'm getting ahead of myself let's live
01:53 - where we are for the moment
01:55 - in the present with this example and how
01:58 - could i
01:59 - take this force multiply negative one
02:02 - write a function called
02:03 - flee and then
02:06 - not have to copy paste all this code
02:08 - into there though there's any number of
02:10 - clever ways i could do this with
02:12 - different arguments and overloading
02:14 - but i think it would be advisable for me
02:16 - to actually
02:17 - in these steering functions never
02:19 - directly call apply force
02:21 - the goal of a steering function should
02:23 - be to return the steering force
02:25 - and then whatever is calling that
02:27 - steering function can figure out
02:29 - whether or not to apply it or not
02:33 - so i want it to look like this call the
02:35 - function seek
02:36 - get a vector back apply that force so
02:39 - remove apply force here
02:42 - and replace it with return force
02:45 - let's make sure this is the same it is
02:47 - now guess what
02:49 - fleeing a target is what
02:53 - return the result of seeking the target
02:56 - multiplied by negative one
02:59 - and i'm just going to rename this to
03:00 - steering here so it's more generic
03:04 - and there we go fleeing the target makes
03:06 - use
03:07 - of the seek function and just adjusts
03:09 - the direction of the vector
03:11 - in the opposite direction we're moving
03:13 - along here
03:14 - flea is done next up pursuit
03:18 - the key difference between seeking a
03:20 - target and pursuing a target
03:22 - really has nothing to do with the
03:23 - steering behavior itself and more has to
03:25 - do with
03:25 - what is the target doing pursuit refers
03:28 - to
03:29 - seeking a moving so now i'm going to
03:32 - draw this as a triangle as well
03:34 - i could give it a different color
03:38 - does that help and the target also has a
03:41 - velocity
03:43 - now on the one hand i could say hey this
03:45 - vehicle it wants to reach this target
03:47 - even though it's moving
03:48 - just go in the direction of the target
03:50 - this desired velocity would work
03:51 - fairly well but the idea of an
03:53 - autonomous agent is having this limited
03:55 - perception in the environment
03:57 - so maybe this target has been kind of
03:59 - moving along
04:00 - this path this vehicle is it has this
04:03 - intelligence to it it's able to perceive
04:05 - the way the target is moving kind of out
04:07 - of the corner of its eye you can think
04:09 - of
04:09 - and it understands that in a few moments
04:12 - it's actually going to be
04:14 - over here so it's perception that
04:16 - environment involves making a prediction
04:18 - about the future location of this moving
04:22 - target so that its desired velocity
04:24 - should then be
04:29 - move at maximum speed towards
04:32 - its predicted future target and it will
04:35 - recalibrate that future target every
04:37 - frame so if this vehicle were to
04:39 - suddenly turn and go over here
04:40 - you know a couple frames later it's
04:43 - going to be looking at its future target
04:44 - as being here its future target might
04:47 - also be further away
04:48 - or closer based on how fast the vehicle
04:52 - is moving
04:52 - in order to demonstrate this what i'd
04:54 - like to do
04:56 - is make both the vehicle and the target
04:58 - vehicles
04:59 - i'm going to call one the pursuer the
05:02 - other the target
05:06 - and make them both vehicles
05:09 - now the vehicle should be seeking the
05:11 - target's position that's without this
05:13 - new pursuit algorithm
05:16 - and i've got to change that to pursuer
05:21 - i'd like to make these vehicles a little
05:22 - bit more visually distinctive which one
05:24 - is the pursuer
05:25 - which one is the target so i'm gonna go
05:27 - back to my
05:29 - inheritance lesson from chapter four
05:37 - and just override the show function
05:42 - and make it a simple circle
05:45 - and also give it um a color
05:48 - and change this from a vehicle to a
05:51 - target
05:53 - so interestingly enough if i'm going to
05:55 - write a class that extends another class
05:58 - i've got to put this one after it
06:01 - great now i just need to put this target
06:04 - into motion so i can hard code in a
06:06 - velocity
06:09 - and make sure that i call update on the
06:12 - target
06:13 - and now there we go that target's in
06:16 - motion
06:17 - i have this edges function from before
06:19 - that i can also just call
06:21 - just to have the target wrap around wrap
06:23 - the edges
06:25 - so the pursuer is not wrapping around
06:27 - and i actually get this sort of fun
06:28 - behavior because the the target keeps
06:30 - like disappearing and reappearing
06:31 - somewhere else
06:32 - and it kind of just can't catch it so uh
06:34 - you know i could probably
06:36 - let the steering force be larger let the
06:39 - maximum speed be higher and get it to
06:40 - catch the target
06:41 - but let's just see now what happens if i
06:45 - add this idea
06:46 - of pursuing its future
06:49 - predicted location so i'm going to add a
06:52 - function called pursue
06:54 - give it the argument target and then
06:58 - i've just realized something i don't
07:01 - want
07:02 - to give it a vector the position of
07:05 - what i need to pursue is not enough
07:07 - information
07:08 - i need to look at this whole vehicle
07:10 - know where its position is and its
07:12 - velocity
07:13 - to predict its future location so this
07:16 - should actually be another vehicle
07:18 - and the target is the vehicle's position
07:22 - make a copy of it then add to it
07:25 - the vehicle's velocity now this isn't
07:29 - everything because i'm just adding its
07:31 - velocity so i'm just looking at
07:32 - where it will be the next frame and i
07:35 - probably want to look like
07:36 - 10 frames ahead or 20 frames ahead but
07:38 - let's just see what this gets us
07:40 - so now i'm going to call pursue that
07:44 - target
07:46 - and it looks kind of the same let's draw
07:48 - some debugging information so i can see
07:50 - where that target is
07:55 - and then let's look a certain number of
07:57 - frames ahead how about
07:59 - 10. so now what it's actually seeking is
08:02 - that position
08:03 - in front of that target vehicle itself
08:06 - oh oh oh i've actually made a terrible
08:08 - mistake here
08:09 - i was about to explain how i didn't make
08:11 - the mistake and i made the mistake
08:14 - i was assuming i was okay because i
08:16 - copied the vehicle's position before i
08:18 - started
08:19 - messing with it but i didn't copy the
08:21 - vehicle's velocity
08:23 - and it's not actually causing a problem
08:25 - because i've got a limit on the
08:26 - vehicle's velocity
08:27 - so i'm multiplying it by 10 and then it
08:29 - ends up getting limit but this is this
08:30 - is bad
08:31 - and so to be safe let me just have a
08:33 - separate variable called
08:35 - velocity which is a copy of the
08:38 - vehicle's velocity
08:40 - i can then multiply that by 10
08:43 - and i can chain those to have that at
08:46 - dot copy dot multiply
08:48 - but and then i can say target dot add
08:51 - that velocity and you know what i'm
08:53 - going to call this um
08:55 - prediction just to it's not it's no
08:58 - longer really a velocity it's helping us
09:00 - with our prediction about its future
09:01 - location
09:03 - and this should look the same but i've
09:06 - now
09:07 - less prone to error here now i've got
09:10 - pursue done
09:12 - let me quickly add evade which is
09:15 - exactly the same as pursuit
09:16 - but just in the opposite direction
09:24 - so now i call the pursue function
09:26 - multiply the result by negative one and
09:29 - then return that
09:31 - i can change this to evade and run it
09:35 - ooh oh i made a spelling error pursuit
09:38 - oh my god how do you spell
09:40 - pursuit it's with you
09:45 - there we go now the vehicle is just
09:46 - going to leave and never come back
09:48 - i could add let's see we're just i'm
09:50 - just out of curiosity let's add the
09:51 - edges to the pursuer
09:54 - i also am going to take out the sort of
09:56 - debugging the circle
09:58 - and now we can see this triangle is
10:00 - always going to try to evade
10:02 - that other moving circle i'm actually
10:04 - kind of curious and maybe
10:05 - i'm going off on too many tangents here
10:07 - but what if i add a second
10:09 - vehicle target and have it pursue one
10:12 - and evade the other
10:22 - so two targets call evade on one pursue
10:25 - on the other apply
10:26 - both of those forces i don't know let's
10:28 - see what happens
10:31 - which one is it pursuing which one is it
10:33 - evading i don't know
10:35 - and of course i should probably be
10:37 - thinking about using an array
10:38 - and uh designing things that it wants to
10:41 - pursue versus things that wants to evade
10:43 - in a more intentional way but you're
10:45 - hopefully you're seeing
10:47 - the beginning steps of how you might
10:49 - start to take
10:50 - multiple steering behaviors and apply
10:52 - them into one sketch
10:54 - putting this back to just a single
10:56 - pursuit vehicle and one target
11:04 - getting rid of the idea of edges
11:09 - i think another effective demonstration
11:11 - here would be when
11:12 - the pursuer reaches the target the
11:15 - target
11:15 - disappears and reappears in a new
11:17 - location with a new velocity
11:22 - so i can look at the distance between
11:24 - the pursuer's position and the target's
11:26 - position
11:27 - if that distance is less than the sum of
11:29 - their radii
11:33 - then recreate the target at a random
11:36 - location
11:37 - let's give ourselves more space to work
11:39 - with
11:41 - let's also let the pursuer have a higher
11:42 - top speed
11:45 - and i'll also set the pursuer back to
11:47 - the center of the canvas
11:51 - let me add the edges to the target and
11:54 - finally
11:54 - let me also give the target a random
11:57 - velocity
12:02 - and this is a nice demonstration of a
12:04 - moving target
12:05 - and a vehicle pursuing that target this
12:08 - would probably be a much
12:09 - more compelling demonstration if the
12:12 - target itself had its own rules for
12:14 - motion beyond just a constant velocity
12:16 - maybe it bounces off the edges maybe
12:18 - it's its own
12:19 - has its own set of steering behaviors
12:21 - that governs how it moves around the
12:23 - window
12:23 - i'm going to look at a behavior called
12:25 - wander in the in a future video what if
12:27 - it were
12:28 - wandering and then this thing was
12:29 - pursuing it so many possibilities there
12:31 - i'd also be curious to see what kinds of
12:34 - ways can you annotate this to make all
12:36 - the parameters of the system more clear
12:38 - beyond just drawing like one green dot
12:40 - ahead of it where it's
12:41 - actually uh seeking and in fact how far
12:44 - ahead you look
12:45 - could be a parameter that you tune up
12:47 - and down so many possibilities i'm going
12:49 - to stop here
12:50 - uh you know i have now successfully gone
12:53 - through seek flee pursue and evade and i
12:55 - really was going to do arrive in this
12:57 - video
12:57 - but i think it actually makes sense to
12:58 - pause here let you play around with that
13:00 - particular example
13:01 - try your own version of it and i will
13:03 - come back this time i really will
13:04 - come back in the next video and look at
13:06 - what it means for
13:08 - a vehicle to seek a target and slow down
13:12 - as it's getting closer
13:13 - the arrival behavior
13:20 - [Music]
13:24 - you