00:00 - this is a video sort of about var but
00:05 - this is a video about bar in 2017 now I
00:09 - should admit that I'm really way way way
00:13 - behind the times because in 2015
00:18 - something came out called es6 what is
00:24 - es6 well es6 is short for e c MC a
00:30 - script 2015 what's the chance that I got
00:35 - that right
00:36 - hold on a sec this is an extra seat ECMA
00:41 - it stands for something some kind of
00:42 - consortium of Hmong mango loving
00:47 - astronauts I don't know but this is a
00:49 - consortium of people who come together
00:51 - to talk about what what is the syntax of
00:55 - the JavaScript language and how should
00:57 - it work and so in 2015 which was quite a
01:00 - while ago at this point the the
01:03 - consortium came together and thought
01:05 - let's instead of saying var to declare a
01:07 - variable let's declare a variable right
01:11 - instead of saying var x equals 100 let's
01:13 - declare a variable by saying let x
01:16 - equals 100 and also quite possibly let's
01:20 - offer an alternate option by saying
01:23 - Const x equals 100 so currently right
01:28 - now if you were to write this into your
01:30 - code all three of these would be valid
01:33 - JavaScript statements but they would all
01:36 - do something slightly different and I
01:39 - should also mention that one of the
01:40 - reasons why it's taken people like me
01:42 - years to get with the program is because
01:45 - even these aren't necessarily supported
01:48 - by every single web browser that people
01:51 - are using in the world I think at this
01:54 - point you know most modern web browsers
01:58 - support es6 natively and if you're a web
02:01 - developer their professional web
02:02 - developer there are all sorts of ways to
02:04 - put something behind the scenes that so
02:06 - that if somebody is if the code is
02:08 - written in es6 but the web browser
02:10 - doesn't support it it works anyway this
02:12 - is
02:12 - the subject of this video but this is a
02:15 - subject of what are these things they're
02:17 - in by the way isn't there like es8
02:19 - like I'm already way behind so I'm like
02:21 - here making height yet yes six video
02:23 - somebody in the future when it's like es
02:25 - 712 would be like amused by this old
02:27 - historical antiquated like video this
02:31 - human being with actual like human body
02:33 - instead of robotic whatever anyway I'm
02:36 - off track now yes six is a standard I'm
02:39 - starting to use it in all my videos so
02:42 - what is the difference why so I'm gonna
02:45 - just tell you what the difference is in
02:47 - technical terms and then I'm gonna go
02:49 - and explain it
02:50 - var X uses something called block scope
02:56 - let X oh my god I said it wrong it did
03:01 - it totally wrong oh by there's like
03:03 - there's like so many people watching
03:05 - this video we're just like screaming at
03:07 - their screen for like the last 30
03:09 - seconds bar uses function scope let uses
03:17 - block scope and if you program if you
03:22 - learn to program in Java okay drop by
03:24 - sorry folks in Java in C++ in processing
03:28 - which is built on top of Java and this
03:30 - is how I learned to program everything
03:32 - was always block scope it's the only way
03:34 - that I think I actually just when I even
03:36 - use var I'm just assuming it's block
03:38 - scope and writing code as if it is block
03:40 - scope but it's not and that's what's
03:42 - prone to error and block scope I
03:45 - personal mean they know I don't want to
03:47 - I don't want to be too down on function
03:49 - scope I'm sure function scope is a very
03:50 - nice scope and I would love to hang out
03:53 - with function scope and have some time
03:55 - together but I prefer block scope and so
03:59 - let's let me get to skip you this is way
04:01 - too long of a video to explain this let
04:05 - me get to the computer and start to
04:06 - explain what I mean here okay I'm over
04:09 - here so I have some code and I am going
04:15 - to start writing some code so what I'm
04:17 - going to do is I'm going to say var x
04:19 - equals 100 okay let's say var x equals
04:23 - 100 I'm going to say console dot log
04:26 - Exce console dot log X this is a look a
04:34 - weird example to start with it I'm gonna
04:36 - get to some examples that will hopefully
04:37 - help a little bit more but what should
04:39 - happen when this code runs set up starts
04:43 - this first line of code should execute
04:44 - and what should say I don't know what X
04:46 - is are you nuts
04:47 - I haven't heard about anything named X
04:49 - now I'm gonna say what X is and if then
04:51 - if it was able to go on to the next line
04:52 - of code would say what X is and then it
04:54 - would console.log 100 but that's
04:56 - actually not what's gonna happen I'm
04:58 - gonna hit refresh all I care about is
04:59 - the console here I got undefined in 100
05:04 - well that's that's so unreasonable right
05:06 - because X is something that's undefined
05:08 - but shouldn't I really maybe possibly
05:11 - get an error there let's look what
05:12 - happens if I switch this now to let
05:17 - uncaught reference error X is not
05:19 - defined so you might say oh I like the
05:22 - other way better because it didn't break
05:23 - but here's the thing the fact that it is
05:26 - not letting you talk about that variable
05:29 - above where it was declared and
05:32 - initialized is is a is more is is a
05:38 - situation which is less prone to error
05:40 - let me show you some reasons why so
05:43 - first of all one thing that's
05:45 - interesting is I could do this let X
05:48 - then I could say x equals 100 and then I
05:53 - could put the console log here this
05:55 - would now give me exactly what var did
05:59 - so why why what's going on here well
06:02 - there's something in JavaScript with var
06:08 - called hoisting hoisting I'm so proud of
06:13 - myself my posting is because there was a
06:14 - long period of time where people would
06:16 - say on what that is but now I do I think
06:18 - and I'm gonna explain it so if I'm
06:24 - hoisting what is hoisting so I'm gonna
06:27 - write some other code I'm gonna say I'm
06:30 - gonna say for VAR i B's bar I equals 0
06:33 - is less than 100 I plus plus I'm in rate
06:36 - OOP and I'm gonna like some stuff will
06:39 - happen here and then I'm gonna say VAR x
06:42 - equals Mouse X plus 100 and then I'm
06:45 - going to say if X is greater than 50
06:48 - then VAR Z equals 20 and Y and and then
06:55 - draw an ellipse you know whatever bar y
06:58 - at X comma Y 100 100 so this is sort of
07:01 - nonsense code but I'm writing this code
07:04 - to make a point there is a point when
07:08 - you write code like this in ES fought
07:11 - previous to es6 in JavaScript what the
07:15 - interpreter actually means you're
07:17 - actually modified before it runs it does
07:19 - this thing called hoisting and it
07:21 - actually does this I don't think right
07:27 - and then I'm going to take out it it
07:29 - adds like a line of code at the top of
07:31 - the function that declares all the
07:32 - variables and then deletes all the
07:36 - variable declarations so this is why
07:39 - this is why those variables with var
07:42 - there's variables with var have function
07:45 - scope because even though if I declare
07:49 - var down here VAR y equals 20 the
07:52 - hoisting process puts the declaration at
07:54 - the top and it's a variable that's
07:55 - available for the whole for the entire
07:58 - function setup it has function scope
08:01 - even though it's declared and only used
08:02 - inside of this if statement so I can say
08:04 - things like console.log Y up here and I
08:08 - can do things like console.log I at the
08:11 - bottom so I'm gonna get undefined
08:14 - because Y doesn't have a value yet and
08:16 - then I'm gonna get what am I going to
08:17 - get down here console.log 100 because
08:19 - that loop is gonna have finished and
08:20 - left eye with the value 100 so that's
08:24 - exactly what I got and even drew part of
08:25 - an ellipse and then so technically like
08:30 - this code is sort of problematic because
08:33 - I've declared two variables I've wasted
08:36 - two variables called I right so now the
08:40 - so this is really the this is really the
08:43 - issue this wasting process which happens
08:45 - behind the scenes and lets variables be
08:48 - available to a broader
08:49 - scope beyond where they are actually
08:51 - declared and used makes big code prone
08:55 - to error at least in my experience so
08:58 - you know for example if I'm writing a
09:02 - loop here if I'd simplify this like and
09:06 - I want to have a separate variable for I
09:09 - somewhere else I'm really just I'm
09:11 - running into trouble the fact that I can
09:13 - actually use this variable I afterwards
09:15 - is there's all these problems that could
09:17 - happen by accident if I had another
09:19 - variable that was more global called I
09:21 - and the scope can get really confused so
09:25 - I should probably do this video so using
09:30 - let is a nice solution to this problem
09:32 - now I don't know so why is it called let
09:35 - versus var I mean in my understanding of
09:38 - this is well why not just change the
09:40 - behavior of bar well if you change the
09:42 - behavior of bar then you're possibly
09:45 - going to break all this code that has
09:48 - been written over time so in order to
09:49 - write order to have a new version of a
09:51 - JavaScript that has variables that only
09:53 - have block scope block scope they're
09:56 - only available within whatever curly
09:58 - brackets they're declared and whether
09:59 - that's if whether that's for a new name
10:04 - has to be invented so we just have to
10:05 - all change over and say like now let's
10:08 - just all use let let's use let I can't
10:10 - remember but let's use let let's use
10:11 - left let's use yeah I'm gonna just let
10:12 - them to use let let again this video
10:16 - could have been made 30 seconds by me
10:17 - just saying hey remember that thing
10:18 - called var it's called let now but there
10:21 - is actually a technical difference and
10:22 - let's look at that again right right now
10:26 - I'm gonna run this code and we see 100 i
10:32 - console log I as 100 if I change this to
10:36 - let I will get an error I is not defined
10:39 - and that's the error that I want I is
10:42 - only available inside of this block this
10:45 - is the block that's the block I has
10:49 - block scope if I put an if statement in
10:51 - here if mouse X is greater than 20 let J
10:57 - equal 20 console.log
11:02 - J I will get an error here because J is
11:05 - only available for this and you want
11:07 - your variables to only be available for
11:10 - I mean sometimes you need global
11:11 - variables I'm not saying all variables
11:13 - should have the littlest scope as
11:14 - possible but they should have the
11:16 - smallest scope that is needed it helps
11:18 - you organize your code helps you be less
11:20 - prone to error I mean they're making
11:21 - errors is fun everybody should make
11:23 - errors but this is a helpful thing okay
11:26 - huh what do you guys think did I explain
11:29 - that what questions do you have
11:31 - I guess write them in the comments and I
11:34 - didn't get to talking about what Const
11:38 - is so let me try let me try to talk
11:43 - about in a separate video in the next
11:44 - video
11:45 - what Const is and if there's anything
11:47 - that I missed or some questions there's
11:48 - a live chat going on right now if you're
11:50 - watching this as it edited video later
11:51 - is there anything that I missed I'm
11:53 - gonna go check that live chat and talk
11:55 - about at the beginning of the next video
11:56 - and there's a lot more es6 stuff that I
11:58 - want to talk to talk about so there's
12:00 - classes and there's promises so I want
12:02 - to get to that stuff eventually but I
12:04 - just wanted to talk about in this video
12:05 - let
12:11 - [Music]