00:01 - Okay, so let's consider. What we've established. So far in terms of the flow of a program
00:06 - We know we have two new blocks of code that we've established
00:10 - one is called set up and
00:13 - one is called draw.
00:17 - we write code inside both of these blocks between the curly brackets and
00:24 - the code here in setup happens once and only once
00:29 - First at the beginning and the code here and draw happens forever. It loops over and over again
00:36 - when ever it gets to the end
00:38 - It loops right back at the beginning stuff happens here once looping over and over again. So this is a very basic
00:44 - simple
00:45 - model for controlling the flow of
00:48 - a program how it executes the instructions in what order
00:51 - So in this video what I want to do is introduce
00:54 - one more layer on top of this this idea of an event now truth be told a
00:59 - Lot of programs don't have this animation loop at all everything is just a bunch of events. Right, this event triggers this event which triggers
01:06 - this event, then the program waits until this event happens. That is certainly on a model for building
01:11 - programs. A lot of web applications certainly work that way, but here we have an animation program
01:17 - that's always running continuously, but some events might interrupt this loop.
01:22 - So we finished through draw, an event execute we go back into draw. Two
01:26 - obvious events that we can start with that are very simple to begin with are
01:30 - this idea of an interaction event a mouse click or a key pressed. So for example
01:36 - let's just say we want an event to be triggered when the mouse is pressed.
01:40 - We can now write
01:43 - Another block of code another function definition this time. It's called mousePressed, right. It's setup()
01:50 - we have draw(), now we're adding mousePressed.
01:53 - We put our parentheses we put our open curly bracket and our close curly bracket. This is an event.
02:00 - This we can consider an event and it also only happens once. Now
02:06 - I don't mean once in the course of the whole program,
02:09 - but it executes once at the moment of the event. setup() truly happens only once when the program first begins.
02:15 - mousePressed() might never occur we could write the most amazing sophisticated beautiful
02:21 - code ever written our entire life put it here and if no one clicks the mouse it will never happen.
02:27 - So this is something we have to realize this only happens when the mouse is pressed.
02:30 - So the syntax remains the same as these blocks of codes, the difference.. than these blocks of code... these blocks of code
02:38 - But the difference is the name of this method that we're implementing this block of code is called mousePressed().
02:43 - Ok, so let's go over and take a look at implementing this in our actual program.
02:49 - Here if you recall we have this continuous line drawing application where I'm just moving the mouse
02:56 - and it's drawing a line from previous mouse position to current mouse location. So what if I... add
03:02 - this event
03:04 - mousePressed(), now one thing we should notice again is you've got to make sure you spell things correctly
03:09 - If I wrote it as mousepressed with a lowercase p...
03:13 - This is incorrect
03:14 - Notice here that it doesn't turn blue, right?
03:18 - It doesn't turn blue because it's not a known word without that capitalization does matter however
03:23 - If I were to run this I get no error that's because I just want to bring this up now
03:29 - It's technically going we're going to see later
03:31 - How you can make up all sorts of other blocks of code that you want right now
03:35 - we're trying to use specific ones, but so Processing thinks
03:38 - I'm just trying to make up a new one called mousepressed with lowercase p
03:41 - but it won't function correctly.
03:42 - We want to make sure we have that capital p and we can see once we have that capital p
03:46 - we've got the nice blue color. It's been recognized. So what's something I could put inside mousepressed()? I
03:52 - don't know why don't we erase the background, we clear the background. Clear the background set a background of greyscale value 50 again. Here
04:00 - I'm moving the mouse around every time I click it. It
04:03 - erases what was there before?
04:05 - So we can see here is... boom an event, execute that code go back and to draw boom an event execute that code go back
04:11 - into draw(). So
04:13 - This is really powerful. This is um...
04:15 - we have so few tools right now because we haven't gotten to some of the really fundamental pieces of
04:22 - defining our own variables and
04:24 - conditionals to change the course of how the information flows in a program.
04:28 - We just have these little pieces
04:29 - But you can start to see that when you you could it can have you can have different things happen.
04:33 - We could also do something kind of Kooky for example. I
04:38 - could say
04:40 - void keyPressed(), just to add another event and I could say background
04:45 - you know, this I said do something kooky, and I'm like yeah, this is really crazy
04:50 - Totally crazy. We're doing a different color when keyPressed().
04:52 - But what can you do um so, we could say here every time I click the mouse
04:55 - it erases the background with grey. When I... when I click the mouse
05:00 - It's very hard for you to see that when I when I press a key then it does a green background so you can see
05:05 - How this these are separate events a key pressed a mouse press. We're going to see later
05:10 - how do you do something when a specific key is pressed? There's also a mouse
05:13 - Released event right when the mouse is pressed [an] event is triggered when it's released another event is triggered
05:18 - There's a mouse drag event you can look through the Processing reference
05:23 - and you'll see there are bunch of built-in events that Processing can handle for you by
05:28 - implementing that block of code that function definition
05:31 - and then writing the code that you want to execute when that event is triggered inside there, okay?
05:35 - So this is a nice little short video looking at my list of things
05:39 - I think this kind of covered what I meant to cover
05:41 - so now we really have control over the whole flow of a program and
05:46 - what I would suggest to you is in most of the I gave you the exercise previously but try to
05:52 - animate stuff with what you have so far now you have some events to try to have different things happen of what happens
05:59 - what can you do with these events if background is a draw not as much of but... You can try different
06:05 - configurations of this come up with problems that you
06:07 - that you think you could solve and in many of these you might not be able to solve because you're going to need the concepts
06:12 - we're going to go over in the next set of videos. So in the next set of videos, right
06:16 - what just to remind you one of the ways we introduced this idea of variation into
06:22 - the draw loop was through this idea of a keyword, mouseX, I called it a built-in variable it stands for a
06:29 - number, the... the x location of the actual mouse. What we're going to look at
06:34 - the next video is how do we make up our own variables?
06:39 - I mean, if you think about it, we don't want to always just move things according to the mouse
06:44 - we want might want something to move autonomously we need to store its position and...
06:49 - and manipulate that position according to some mathematical formula. We're going to start to see how to do that in the next set of videos.
06:57 - Sure, I missed something. I'll think of it. I'll write it off my list and then later. I'll add a new video
07:01 - That'll be numbered with these numbers at the end. It'll fill in some of these details
07:04 - That's kind of my plan right now because I already have something. I want to go back and add to them the earlier videos, okay?
07:10 - Goodbye, and I'll talk to you later. I don't know I get it better like like sign off. You know
07:17 - Catchphrase, but I'll think of that.