00:00 - hello in this video I want to talk about
00:01 - something called polar coordinates okay
00:03 - what are polar coordinates and I've been
00:05 - I've been making all these videos coding
00:07 - challenges where this scenario comes up
00:10 - over and over and over again I have a
00:13 - point here call this point XY I have
00:17 - relative that point I have some sort of
00:21 - angle call that angle angle what if I
00:25 - want to find a point out here based on
00:29 - that angle and a distance to that angle
00:33 - so this is what I mean by polar
00:36 - coordinate a Cartesian coordinate is an
00:39 - XY coordinate in a name for the French
00:42 - mathematician for any dickon's
00:46 - XY coordinates in a two dimensional
00:49 - space so we move over x spaces we move
00:53 - up Y spaces in computer graphics system
00:55 - you know we've got the we've got the
00:57 - flip thing where we move over X spaces
00:59 - we move down X basis and that's X Y a
01:01 - polar coordinate is thinking about a
01:04 - coordinate that is defined by a radius
01:08 - or a distance from a distance and an
01:11 - angle often using the Greek letter theta
01:13 - to define that angle the proper reason
01:16 - so both of these are useful ways of
01:18 - thinking about points in space if I want
01:21 - to do a spiral pattern polar coordinates
01:23 - are gonna be really useful because I
01:24 - could just change that angle and maybe
01:26 - shrink to the radius and I've got a
01:28 - spiral pattern the issue is that all
01:30 - drawing functions in computer graphics
01:34 - things like p5 KS or processing I'm
01:37 - filling the blank there think about core
01:40 - really only think about coordinates and
01:42 - Cartesian coordinates so the ellipse
01:44 - function which draws a circle takes an X
01:47 - Y the point function which draws a point
01:50 - the line function the rectangle function
01:52 - all of these require X Y so what if you
01:54 - are thinking about R theta and you want
01:58 - to you want to have your program run
02:02 - with this idea of r theta but you have
02:05 - to draw with X Y so we need a formula to
02:08 - come
02:08 - from polar to Cartesian we also
02:14 - sometimes want to convert from Cartesian
02:16 - to polar I'll maybe I'll talk about that
02:18 - in a separate video but in this video I
02:19 - just want to look at polar to Cartesian
02:21 - and the way to do this boils down to
02:25 - trigonometry trigonometric functions if
02:28 - I have this triangle I have a theta an
02:31 - angle here this is my arm right so I
02:33 - know this point what I want to do this
02:36 - is some X Y what I want to figure out is
02:39 - what is this point and I'll call this x2
02:43 - y2 or whatever if we call this x1 y1 how
02:47 - do I get this point okay well if I knew
02:51 - what this was I'll call this DX as in
02:54 - like Delta x2 change in X and this is dy
02:58 - that change in Y if I knew these two
03:02 - values then I could say x1 plus DX
03:06 - equals x2 and and y1 whoops plus dy
03:12 - equals y2 so if I could get these two
03:15 - values then I could move from here to
03:17 - there so how do I get these two values
03:20 - from these two values and this is
03:23 - where's my eraser this is exactly what
03:26 - we need to do okay
03:28 - I've drawn the same diagram so many
03:29 - times now let's just let's just make the
03:31 - math happen okay so do you remember at
03:35 - some point in your life you might have
03:36 - heard of a function called sine or
03:37 - cosine sohcahtoa sine equals opposite
03:41 - over hypotenuse cosine equals adjacent
03:44 - over hypotenuse that's referring to the
03:46 - sides of a right triangle and guess what
03:48 - this is a right triangle right here this
03:50 - is opposite to the angle this is
03:51 - adjacent to the angle so sine of theta
03:55 - equals opposite D Y divided by
04:00 - hypotenuse which is R in this case
04:02 - cosine of the angle equals adjacent
04:05 - which is DX divided by hypotenuse which
04:10 - is R and these equations can be
04:13 - another way I can simply say D Y equals
04:18 - R times sine of theta now you might be
04:22 - asking how do I get from here to there
04:24 - one of the things you can do with an
04:26 - equation is you can multiply both sides
04:28 - of the equation by a number so if I
04:30 - multiply this side by R and this side by
04:33 - r this side becomes R times sine of
04:36 - theta and this side becomes just dy
04:38 - because dy times R divided by our our
04:40 - divided by R is 1 so this just becomes
04:43 - dy and DX also becomes R times cosine of
04:47 - theta so now I have those two formulas
04:51 - so if I have this XY point I have an
04:54 - angle and our distance for a radius or a
04:58 - length what to call it then I can
05:01 - calculate DX and dy based on that and
05:03 - get that point let's make that happen in
05:04 - the code so I have a very simple code
05:07 - pen here open I'm using the p5.js
05:10 - library and so the p5 just library is
05:12 - already loaded into this code pen
05:15 - project and the link to this code pen
05:16 - project will be in this video's
05:18 - description okay so if you want to know
05:21 - how to do that I have another video
05:22 - about how to set up a p5 just project in
05:24 - code pen so what I want to do and
05:25 - actually just very very simply is I'm
05:28 - gonna say what if I have let me just do
05:31 - this all in setup I think right now we
05:32 - can or orange raw it's fine what if I
05:34 - have an x and a y which is like 100 100
05:39 - can you see this font is very very small
05:43 - ok I'm back with a bit smaller a big
05:46 - commitment larger font so now I just
05:48 - want to draw a point at that X Y and I
05:52 - must say stroke 255 to make it white
05:55 - there you go look at that tiny little
05:58 - point point okay now it's a happy point
06:02 - I wouldn't want you to say that for so
06:04 - long okay
06:06 - stroke wait let's make it a little
06:08 - bigger stroke weight 8 ok there's my
06:11 - point uh that's not a good location for
06:14 - this point let's put it further down at
06:16 - 300 ok now what I want to think about is
06:19 - let's say at this point I want to have
06:22 - an angle of 45 degrees so I'm now
06:26 - going to make an angle equal to 45
06:30 - degrees now here's the thing so I want
06:32 - 45 degree a 45 degree angle 45 degrees
06:37 - because because Y points down will
06:39 - actually rotate me this way
06:40 - and I want to rotate up so a negative 45
06:42 - degrees now I keep saying degrees
06:44 - because that's the way I tend to think
06:45 - about angles 45 90 degrees 360 degrees
06:48 - most computer graphics systems will
06:50 - think about angles in a unit of
06:52 - measurement called radians 360 degrees
06:55 - is two pi radians and that that's
06:57 - something that that I'm gonna just sort
06:59 - of ignore for this particular video and
07:01 - I'm just gonna say angle mode degrees so
07:03 - now P five is gonna think in terms of
07:05 - degrees and I'm gonna say angle negative
07:07 - 45 okay now what do I do here I remember
07:12 - I have a distance so I'm gonna just say
07:15 - maybe a hundred pixels out a hundred
07:17 - pixels and I need to calculate VAR
07:21 - whoops R equals 100 and I need to say
07:24 - VAR DX then equals R times cosine of
07:31 - that angle and dy was R times sine of
07:35 - that angle and now I can simply just now
07:40 - I can simply just make another point at
07:42 - X plus DX and y plus dy and let's see
07:46 - what we get there it is 45 degrees and I
07:50 - could also connect those and I can
07:53 - connect those with a line and you can
07:59 - see oops and you can see there have this
08:01 - line now I could change that angle so
08:04 - now I could say let me have the angle be
08:07 - mapped you know I should actually let me
08:11 - have it just be mapped to Mouse X so
08:13 - Mouse X which goes between zero and
08:15 - width I'm gonna have the angle between
08:17 - negative PI and PI whoops oh no no sorry
08:21 - negative Nydia 90 because I'm doing this
08:23 - in degrees and you can see here as I
08:25 - move as I move the mouse it's changing
08:30 - that particular angle okay so this is
08:32 - the idea there's a lot of applications
08:33 - of this you're gonna see that one of the
08:35 - reasons why I'm making this video
08:37 - now as I'm about to do a coding
08:38 - challenge about something called
08:40 - forward at inverse kinematics where if
08:42 - you think of this as one segment of a
08:44 - robot arm
08:45 - what if it's attached to another segment
08:47 - and another segment and how do those all
08:48 - rotate relative to each other so this is
08:51 - the kind of thing that you need for that
08:52 - I should mention that you can also I
08:55 - could have made this exact same p5
08:57 - sketch with just the actual rotate
09:00 - function so there's a rotate function a
09:02 - draw a line align I could rotate it by
09:05 - an angle and that would actually be a
09:06 - wonderful perfect way of doing this as
09:08 - well I have some videos about that
09:10 - probably as well about how to do
09:12 - transformations using rotate and
09:13 - translate but I in this case for this
09:16 - kinematics example that I want to make
09:18 - having having the doing doing the polar
09:23 - to polar to cartesian cartesian
09:25 - conversion in the code is a good thing
09:28 - okay
09:28 - I will see you guys in a future hope
09:30 - this video was somewhat useful to you
09:36 - [Music]