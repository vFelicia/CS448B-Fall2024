00:00 - welcome to another and what might
00:02 - possibly actually be the last video in
00:04 - this playlist about how to build your
00:07 - own API in nodes so if you remember it
00:11 - uh you might have just watched the last
00:12 - video but it's been a while since I made
00:13 - it so I'm going to just kind of set the
00:15 - stage here very very briefly we have so
00:18 - far an API made in node that saves words
00:22 - and a score a a kind of positive or
00:25 - negative veilance the idea that we're
00:27 - going to do a sentiment analysis um
00:29 - application
00:30 - um that stores those words over time so
00:33 - I have a particular route where if I go
00:35 - to the uh server all I can see all the
00:39 - words that are in a particular in that
00:41 - database I also made a little front end
00:43 - that if I add a word like uh kitten and
00:47 - I give it a score like four and I hit
00:50 - submit and I don't um then I can hit
00:52 - refresh here and we can see now kitten
00:54 - has now been added to that database now
00:56 - it's not actually a database it is
00:58 - simply just a a uh a list a Json file
01:03 - but the node program is receiving the
01:05 - word and score from the client saving it
01:07 - to the Json file and loading again for
01:09 - later use so there are two things in
01:11 - this video that I want to add to this
01:14 - particular application number one I want
01:17 - to use the I want to add a pre-existing
01:21 - list of words and veent scores and this
01:23 - list is known as the
01:25 - a111 so this will just make the
01:27 - sentiment analysis work a little better
01:28 - by giving us seating it with a
01:30 - pre-existing list of words um I made a a
01:33 - separate video where I went over this in
01:34 - more detail but um which I'll link to in
01:36 - this but um this list comes from uh um
01:39 - this particular uh website and it was
01:41 - developed by Finn Arup neelson and uh if
01:44 - you use it you should uh credit it and
01:46 - um there's links and information about
01:47 - how to do that
01:48 - here okay so that exists that's number
01:51 - one I want to bring that list over let's
01:52 - actually do that first I'll see what the
01:54 - number two is in a second number two is
01:56 - I want to look at a post to the API
01:58 - what's the difference between get and
01:59 - post so that's going to be part of this
02:00 - video too so I'm actually just going to
02:02 - absurdly just do save as and I'm going
02:05 - to go to my um node folder and I'm going
02:08 - to save it as a1. Json and then I'm
02:12 - going to go to the server and we're
02:14 - going to look at
02:16 - where the server
02:19 - loads uh where does the server load that
02:21 - file right here VAR data equals readfile
02:24 - syncwords Json so I also want to load
02:31 - Apen what is it a1. Json into a variable
02:35 - called Apen uh actually um and I I'll
02:39 - call this aan
02:41 - data and then I want to say VAR data
02:45 - equals json.parse
02:48 - aen data oh no so sorry VAR aen so now
02:52 - my node server has
02:55 - both the word list that's being saved
02:58 - and the apin list now here's the
03:02 - thing so I think what I want to do is
03:04 - just change this I'm going to change
03:06 - this to additional I think I'm going to
03:07 - keep these in separate files because
03:09 - this aan 111 is never going to change
03:13 - and what I want to do is
03:15 - um um but I'm going to call that file
03:18 - additional just to uh just for
03:22 - clarification um
03:25 - additional and what I want to do now is
03:28 - um
03:30 - uh in the server so so I have them as
03:32 - two and and I I must have a
03:34 - save uh place somewhere else so I need
03:37 - to change this to additional as well
03:38 - where I save that file because what I
03:40 - want to do is when it comes time to do
03:43 - this sentiment analysis I need to look
03:45 - both in both of those I need to look in
03:47 - the apan word list is it there if not
03:50 - look in the additional word list and um
03:53 - and I should decide if one overrides the
03:55 - other in this case probably the
03:56 - additional should override the apan so
03:58 - I'll look in additional first okay great
04:00 - so actually
04:02 - done we did it yay but I guess I could
04:05 - in all let's look at that all route
04:09 - again uh let's uh here let's actually do
04:12 - something kind of a little goofy I'm
04:14 - going to do um I'm going to say uh the
04:17 - data is uh
04:20 - additional is uh words and Ain is the uh
04:27 - uh is the Apen list so then so I'm
04:30 - changing the server when you ask for All
04:33 - To Not Just give you the the words that
04:37 - are in the database but look at both of
04:38 - them so this is just changing the
04:40 - response of the server um and what I'm
04:42 - going to do here if you go here now like
04:44 - oh I have to restart the
04:46 - server uh where oops sorry everybody I'm
04:49 - going to restart the
04:51 - server and I'm going to do this and we
04:54 - can see now I have both the additional
04:58 - list and the a fin list wonderful okay
05:01 - so now and but this probably broke this
05:05 - part because it the way I was parsing I
05:09 - was using that all root but you know
05:10 - what I'm going to get rid of this
05:12 - drawing thing it's sort of unnecessary
05:13 - right now I just want to have this word
05:16 - score interface so let's go back to the
05:18 - client uh which is here and let's get
05:21 - rid of uh the
05:23 - draw data
05:25 - thing uh which we don't need to do
05:28 - anymore um because we're going to do
05:30 - some different stuff here so I just want
05:33 - to see that this uh and I don't need to
05:36 - draw data anymore I want to see that
05:38 - this works so I want to see what's
05:40 - another word that I could
05:42 - add uh
05:43 - puppy and uh three hit submit and uh we
05:49 - can see that that worked success
05:51 - although I probably again should add
05:53 - something to this page it says thank you
05:54 - I added that word to the list um that's
05:57 - a great exercise for you but we can just
05:59 - confirm IR now that if I go back to here
06:01 - under additional puppy is there okay so
06:04 - everything is working but my API behind
06:06 - the scenes has access to both the full
06:08 - apan list and any additional words that
06:11 - have been added notice how things are a
06:13 - little bit different here I probably
06:15 - should have been more thoughtful about
06:17 - fixing this up so that these are
06:18 - actually numbers and not strings but I
06:20 - can deal with that later so okay now the
06:24 - thing we need to change now is how do we
06:28 - send a large body of text from the
06:32 - client to the server and so I'm going to
06:37 - come over here for a second to oh boy
06:38 - this camera is off G to come to the void
06:42 - and I want to talk about the difference
06:44 - between a get and a
06:48 - post so
06:51 - HTTP which stands for hyper text
06:55 - transfer protocol I don't know if that's
06:57 - right it's probably right um the
07:00 - uh is a request and response protocol hi
07:04 - I'm a web browser could I please I'm
07:07 - making a request have have some
07:09 - information about where I could get some
07:11 - nice apples this time of year and maybe
07:13 - I would ask that to Google and Google
07:14 - being the server would say hey here's a
07:16 - response here's some information and the
07:20 - way that I can talk to that server in
07:22 - this request and response protocol you
07:24 - know if we have server and we have
07:28 - client is I can make a get request which
07:32 - is like could you please give me some
07:34 - information back or I could make a post
07:38 - request which is would you please take
07:40 - this information and save it onto your
07:42 - server or do something with it so if I'm
07:45 - logging in with my username and
07:48 - password that would be something I would
07:50 - want to send with a post request if I
07:53 - want the results of a search I might ask
07:57 - use a get request to get the results
07:58 - back
08:00 - here's the thing even if even though
08:02 - this is how this protocol is designed
08:05 - and how it works you'll notice something
08:07 - in our program a little bit strange if I
08:09 - go back to the code for a second you
08:11 - might ask where are these happening well
08:15 - right here when I set up a route I'm
08:18 - actually saying this is handling a get
08:21 - request if the browser asks with a get
08:25 - request for slash all send this
08:28 - information back as the response
08:30 - information that comes with the request
08:32 - is in this variable stuff that I want to
08:35 - do to respond is in this variable this
08:37 - is a get request and it makes sense I
08:39 - would like all of the data in the
08:40 - database please could I please have that
08:42 - thank you I really wish it was this get
08:45 - please but um it's just get I guess
08:48 - there's no need for politeness between
08:49 - computers um kindness there's something
08:51 - that said to be said for kindness
08:53 - between computers though and people
08:54 - anyway I'm off track here but you'll
08:56 - notice something this is also a get
09:01 - request get adword
09:04 - score now it makes sense that uh you
09:07 - would have parameters for a get request
09:09 - like search so this is a get request
09:12 - search do you have the word kitten in
09:14 - your database if so could you please
09:16 - tell me its score that's what's
09:18 - happening
09:19 - here but in this particular
09:22 - route this is a get request and my get
09:25 - request is saying here are this word and
09:28 - this score we please add those to your
09:30 - database and according to my discussion
09:33 - over here that should really be a post
09:35 - right if you're sending data to the
09:37 - server for the server to save that's
09:38 - really a post and not a get the thing is
09:42 - though it's just so darn convenient to
09:46 - use a get why is it so convenient
09:48 - because that's what the browser does
09:49 - natively on its own I can actually now
09:51 - Sim I can actually just make a get
09:53 - request by saying Local Host uh 3,000
09:56 - add um you know yellow which is maybe a
10:00 - neutral color or slightly positive um so
10:02 - this is me now making a get request that
10:04 - get request is done it saved into the
10:06 - database I can use the fact that I can
10:09 - add parameters to a get request through
10:11 - the route or a query string there lots
10:13 - of ways to do it to actually have the
10:15 - server save to send stuff to the server
10:17 - for it to do stuff with as well and
10:19 - because it's just like a little bit of
10:20 - data it's just so easy to do it in the
10:22 - route with a get request why not but
10:24 - there are times where this get request
10:28 - isn't sufficient and you really need to
10:30 - use a post well one is like username and
10:33 - password like so if security matters you
10:36 - don't want to have the username and
10:38 - password just in the URL path as part of
10:40 - a get request that anybody could
10:42 - potentially hack and get access to so
10:44 - this is really where for hidden data it
10:46 - really needs to be a post the other
10:48 - thing is like media if you want to
10:50 - upload an image to a server or upload a
10:53 - sound file you can't do that through a
10:55 - get request you can't easily although
10:56 - there's some tricky ways you could like
10:58 - base 64 or encode your image into like a
11:01 - number string that goes into the URL but
11:03 - basically for media but really what I
11:05 - mean in a lot of ways is like large data
11:08 - so if I want to send a full paragraph to
11:11 - be or a full many paragraphs a thousand
11:14 - words to be analyzed and have the server
11:16 - send me a result back I want to send
11:18 - that data through a post rather than a
11:20 - get because it's going to be much too
11:22 - awkward to try to like encode a full
11:24 - paragraph of text into some sort of
11:26 - route or URL query string so this is
11:28 - really the difference between get and
11:30 - post post is for sending data it happens
11:32 - behind the scenes in an invisible way
11:35 - get is for making a request and it
11:36 - happens right in a visible way because
11:38 - it's really basically the same as what
11:40 - you would be doing to type in a URL into
11:43 - the address bar okay so now that we've
11:45 - covered that how do I there's two things
11:47 - I need to figure out one is how do I
11:49 - handle a post in the server the nice
11:52 - thing is you could
11:54 - imagine that it might be something like
11:57 - this app. poost
12:03 - analyze analyze and analyze this right
12:08 - so this is now I'm going to write and I
12:10 - have a
12:13 - function to handle that post
12:16 - request so this is now how instead of a
12:19 - get request in a node program I can
12:22 - handle a post by saying app. poost
12:24 - analyze this and then what's the other
12:28 - part how do I make a post request well
12:31 - there are countless ways you could do it
12:33 - because you could look at jQuery and you
12:35 - could look at Native JavaScript and you
12:37 - can look at any JavaScript framework you
12:39 - want in P5 there's a very nice lovely
12:41 - little function uh called HTTP post and
12:45 - so let's I'm going to add something what
12:48 - I'm going to do is in the uh here I'm
12:52 - going to add a uh text
12:55 - area um so I'm going to say I'm going to
12:59 - make another
13:00 - paragraph and I'm going to say uh
13:04 - text area ID equals text
13:10 - input text area let's just do columns
13:15 - equals 40 and rows equals 5 so we can
13:18 - and so if I go now to here we should see
13:22 - there's a text area there so what I want
13:24 - to do is when I and I'll add another
13:26 - submit
13:27 - button I'll call call it uh
13:33 - analyze so now I have an analyze button
13:36 - what I want is when I analyze this
13:38 - button to make a post request to the
13:41 - server so what I need to do is I need to
13:44 - also in JavaScript get access to the
13:47 - analyze
13:49 - button uh button a for analyze and
13:56 - analyze and uh Analyze This I'll say um
14:01 - function analyze this and here what I
14:04 - want to do is get the text which is the
14:10 - um I can select the text input area and
14:14 - say value and then I want to make a post
14:18 - and the way I make a post is with the
14:21 - pii function HTTP post so when I wanted
14:24 - to make a get request load Json was all
14:27 - I needed to do because load Json by
14:29 - default is a get request just like load
14:31 - image or load um any of the load
14:35 - functions there is by the way an HTTP
14:37 - get method which allows you to uh uh
14:40 - have more control over that get request
14:42 - but here I just want to make a post so
14:45 - um okay so I'm going to do p5.js
14:48 - reference and I'm going to look at HTTP
14:52 - post and let's look at this page the
14:55 - difference is and boy does this look
14:57 - confusing the difference is is when I
14:59 - make a post I need to send it a whole
15:02 - object which is all the data that I want
15:04 - included as part of the post so this
15:06 - allows for a lot of possibilities
15:08 - because I can have multiple fields and I
15:10 - have multiple kinds of data so really
15:12 - there's there's a bunch of stuff I need
15:13 - here but what I care about most right
15:15 - now is the
15:17 - um is I need to give it the path which
15:20 - is the route the data that I want to
15:22 - send I guess what kind of data it is
15:24 - which I'm going to make it Json based
15:26 - data and then a call back for when it's
15:29 - finished so let's do all of that and I'm
15:31 - going to say uh where where was it HTT
15:34 - post so first I need to say data is uh
15:39 - uh the text is the
15:43 - text and uh that's actually all I need
15:46 - to post is just what's in there so but I
15:48 - could add a lot more things into this
15:50 - object and I want to go to uh Slash
15:54 - analyze is that how I did it in uh like
15:57 - the low Json add I need the slash in
15:59 - front sorry analyze and then I need to
16:03 - say it's going to be
16:05 - Json and then I need to say uh uh data
16:11 - posted and then I could also say data
16:13 - error but let's uh let's skip the error
16:15 - right now I should actually probably
16:17 - data a post error so let's write those
16:22 - functions function data
16:25 - posted uh result I'm going to say
16:28 - console log result and in the server now
16:32 - so now I've posted this data to the
16:35 - server and again this could be a lot
16:37 - more stuff than just that
16:39 - text and um in this function and
16:46 - um
16:48 - and uh post I should have a call back
16:50 - for error and so now I just want to look
16:53 - at what comes back after it's posted
16:56 - okay uh so now in the server
17:00 - uh I'm just going to say
17:01 - response. send thank
17:07 - you uh and actually let's make this a a
17:10 - reply message thank
17:13 - you uh and send that
17:15 - reply and let's just look at
17:19 - console.log
17:21 - request so we're going have to figure
17:23 - out how do we get the stuff that was
17:24 - posted right here in the request okay
17:28 - here we go uh so let's see how far did
17:32 - we get here first I need to restart the
17:35 - server and I want to go to this page
17:39 - here the uh here which I should see this
17:43 - I want to look at the console and now if
17:45 - I this is a test and I hit analyze I got
17:49 - the message back so the round trip
17:52 - happened the question now is let's look
17:55 - at what's in the request oh my goodness
17:57 - how am I ever going to look through all
17:59 - this and find the data that was posted
18:01 - so here's the thing how do I find that
18:05 - text this is a mess of data that comes
18:08 - in with the request now we know if you
18:10 - go back to the server when I had a get
18:13 - request I can simply just look at the
18:15 - requests parameters because these are
18:18 - the parameters that come in with the
18:19 - request with a get with a post request
18:22 - it's not so simple there isn't just the
18:24 - parameters there's this part of it
18:27 - called the body which has all this
18:29 - information in it and I I actually and I
18:31 - have to parse it luckily for us there's
18:34 - a node package which will do this
18:36 - parsing for us and this parsing uh this
18:39 - package is called body parser so what I
18:42 - need to do is I need to install that
18:45 - package body a
18:47 - parser and I want to save that as part
18:50 - of this project so I'm saving it now I
18:52 - have the body parser package and then
18:54 - what I want to do and I'm on I'm on the
18:56 - I'll include a link in this video's
18:58 - description but I'm on the GitHub
18:59 - repository I just want to look at uh I
19:01 - just want I need to require
19:04 - it uh so I need to add it to my code at
19:07 - the top or it doesn't really I'm going
19:08 - to add it uh here where I require
19:11 - Express and then after I create the app
19:14 - uh this is serving static files I now
19:16 - want to use this body parser package so
19:19 - I'm going to just scroll all the way
19:21 - down here on this documentation page
19:23 - where I know there's a quick example and
19:25 - I can grab this
19:26 - code and I can add it in
19:29 - so I now am telling this app this web
19:32 - application which was is an express
19:34 - application that's listening on this
19:36 - port which uses static hosting for the
19:38 - stuff in the website folder now also has
19:41 - the body parser and I want to use uh
19:44 - Json because I want to get the stuff um
19:46 - I want to parse everything as Json okay
19:48 - so now that I have that I should be able
19:51 - to say oh boy do I hope that that's true
19:54 - um uh in the where where in the post
19:57 - where I'm handling the post I've already
19:59 - lost it right here let's say console.log
20:02 - request.
20:03 - body and so I'm going to uh restart the
20:07 - server
20:09 - whoops and I'm going to uh refresh this
20:13 - page I'm going to say this is a test I'm
20:15 - going to hit analyze I got the message
20:18 - back and
20:19 - oops the bug is fixed this is blank
20:23 - because I forgot to actually pass in the
20:25 - data I had a mistake which some of you
20:27 - might have been screaming at your
20:30 - television system I not why you're
20:31 - watching this on um in my client code
20:34 - right in my client code right what do I
20:36 - need to do I need to send it the route I
20:39 - need to send it the data what the format
20:41 - of the data is and I had call backs for
20:43 - when it's finished or if there's an
20:44 - errow what's missing I just listed five
20:46 - things I forgot to actually send the
20:47 - data data goes here so I forgot to post
20:50 - the data so there's no way for me to
20:51 - read or receive the data if I didn't
20:53 - post it so that's done now and I I I
20:56 - think it's going to work so let me uh oh
20:58 - actually don't have to restart the
20:59 - server because I just changed the client
21:02 - code and you know what I this is driving
21:03 - me crazy I just want to in the client I
21:06 - just want to say uh uh just add
21:09 - something here like uh I am happy today
21:15 - because I saw a rainbow and some kittens
21:20 - okay so now I have some
21:22 - text pre-filled in I can hit analyze uh
21:26 - I got a message saying thank you and I
21:28 - can go look at the server and I can see
21:30 - that that data came into the server via
21:32 - the
21:33 - post we have a post we have a post
21:37 - working that is awesome okay so now all
21:39 - I need to do is do sentiment analysis I
21:41 - really should just give this to you as
21:42 - an exercise and end this video now but
21:44 - I'm going to uh finish it up myself so
21:47 - the nice thing is um I uh all I um I can
21:50 - this isn't too hard for me to do now in
21:52 - the server I'm going to go to the server
21:55 - code and right here instead of console
21:58 - log I want to look at and say VAR text
22:03 - equals request. body text then I want to
22:07 - split it up text. spit and I'm going to
22:10 - use just a regular expression here uh to
22:13 - split it up into words by anything
22:15 - that's not a word a letter or number um
22:19 - I explained this in so many videos but
22:21 - this uh this is pattern matching and
22:23 - back slash capital W is anything that's
22:26 - not a to z or 0-9
22:29 - and so now I can Loop through those
22:36 - words and I can um I can say now what I
22:41 - want to do is I want to First Look I
22:43 - need a total score so I'm going to have
22:45 - a total score started at zero I need to
22:49 - say if um words oh boy I should call
22:54 - this I need to call this uh additional
22:59 - so because that's going to be a problem
23:01 - uh let's look everywhere I use words
23:03 - because
23:05 - um
23:07 - additional
23:10 - additional
23:12 - additional oh boy additional okay I just
23:16 - don't want to confuse my variable
23:20 - names um so here uh I should have just
23:23 - called that token so I wouldn't have had
23:24 - that problem but if additional has own
23:29 - property and I want to see if word
23:33 - equals words index I has own property
23:38 - word then total score plus equal
23:43 - additional that word the value and a
23:46 - number I'm doing this kind of fast I
23:48 - should uh reference you I did this exact
23:50 - sentiment analysis entirely in a
23:52 - separate coding vid uh challenge which I
23:54 - went through in a little more detail um
23:56 - so I can check if it's there
23:59 - if it's not
24:02 - there then I should also
24:06 - check if it is in the aen
24:11 - list and if it's in either one of those
24:14 - I also let's get make a word
24:17 - list
24:19 - um uh we'll just make it yeah a word
24:22 - list so uh we'll actually make it a word
24:26 - list sure an array um I could say either
24:28 - of these cases word list. push an object
24:34 - that has word word score and then uh and
24:39 - the score is VAR the score is
24:43 - oh I can say VAR score if it's in
24:47 - additional oh yeah yeah yeah score
24:51 - equals number
24:54 - additional and then add that
24:58 - this is not interesting to watch
25:00 - anymore and otherwise if it's in
25:06 - Apen that's the
25:09 - score and
25:14 - um um and then uh
25:18 - sorry uh if I've and
25:21 - so number okay so I'm just cleaning this
25:24 - up because now I can say total score
25:27 - plus equal
25:29 - uh plus equal the score so the score can
25:32 - start for every word can be assumed to
25:34 - be zero and if it's in additional add
25:38 - the score at you know actually so I
25:41 - don't need this here anymore get the
25:42 - score from additional if it's in apan
25:45 - get the score from apan and now what I
25:47 - could do let's just get this working I
25:50 - could say reply is
25:53 - score uh total
25:56 - score and
26:00 - comparative
26:02 - comparative
26:04 - comparative comparative in in the aan
26:07 - 111 sentiment analysis the comparative
26:10 - value is the total
26:12 - score divided by how many words are in
26:15 - the text words. length so now we should
26:19 - see that I'm getting the text so my
26:22 - server is now receiving the text as the
26:24 - post request chopping up into words
26:26 - looking at every single word seeing if
26:28 - it's in one of the lists and then
26:30 - spitting back a total score so let's run
26:34 - this oh I need to restart the server oh
26:38 - I have an error words is not defined
26:41 - where in line number six which uh is
26:44 - here I don't actually need this console
26:46 - log it was just for debugging
26:49 - earlier so let's run the server
26:53 - again refresh and hit analyze ah and we
26:58 - got an error uh false I got some error
27:02 - so what happened let's look at the
27:04 - console oh yeah I got an error uh comp
27:07 - is not
27:08 - defined um so I made a mistake because
27:10 - I'm trying to do this so quickly and I'm
27:12 - not being careful and where is where I
27:15 - I've lost where the code this is oh comp
27:20 - oh wait
27:21 - comp and then this can be comparative
27:24 - I'm just not naming things carefully so
27:27 - this is the reply that I want to send
27:30 - back
27:31 - um uh oops I have to restart the
27:38 - server there we go and look at this
27:41 - every time I analyze I get both the
27:43 - comparative score and the score now I
27:45 - really want to also send back a list of
27:46 - words and I want this to be an exercise
27:49 - I'm going to do it anyway because I want
27:50 - to see it here so what I'm going to do
27:52 - is I am going to also say I'm going to
27:55 - make a variable called found and say
27:58 - found is
28:01 - true found is true and then uh I'm going
28:05 - to have a word
28:07 - list and then if found so if it's found
28:12 - then I want to add it push and I'm going
28:16 - to make an object um that has I'm going
28:19 - to just add into an OB I'm going to make
28:21 - an array of objects with word word score
28:25 - score which is a little awkward but now
28:27 - what I can do is I can also send
28:30 - back the list of
28:34 - words so I'm just saving every word and
28:37 - its score if it was found in one of
28:39 - those lists because
28:41 - now if I run this again and I hit
28:44 - analyze array zero so I did something
28:48 - wrong let's look at this
28:50 - again whoops I initialized the array in
28:52 - the loop which means I kept clearing it
28:54 - out so of course there's nothing in the
28:55 - array let me take that out there
28:58 - run this again refresh analyze and now
29:02 - we can
29:03 - see this is what it got this is the
29:06 - comparative oh this is very small for
29:08 - you to
29:09 - read oops you can see here that this is
29:13 - the comparative that's the score and
29:15 - this is the list happy and rainbow so
29:17 - what I could say is H Why didn't it get
29:19 - kittens so what I would like to do is
29:22 - add kittens and kittens should have a
29:24 - score of four so I'm now going to hit
29:26 - submit and now when analyze it again
29:29 - oops we can see that I got a um I got a
29:33 - score of 14 and let's say today is
29:36 - really positive with a number 100 I can
29:39 - add that to the database and analyze
29:41 - again and now I have a score of 114 so
29:44 - now I have both in on one page I have
29:47 - both ass system wow we've really
29:48 - finished this example where I can submit
29:51 - to the database using a get request I
29:54 - can post to have text analyzed I can
29:56 - submit to the to the um to the API with
30:00 - a post and I can get back the results
30:02 - now here's the thing as a challenge as a
30:05 - as an exercise take this exact code and
30:08 - really work on the interaction here and
30:11 - how this works how could you actually
30:12 - effectively crowd Source a full word
30:15 - list how could you uh use an animation
30:18 - or use design to show the results in the
30:21 - word list you could click on them and
30:23 - what if it showed you all the words here
30:24 - and the ones that are missing and it let
30:25 - you type them in and hit submit so you
30:27 - could kind of like how could you train
30:29 - this to have a larger database of words
30:31 - for more sophisticated uh sentiment
30:33 - analysis this would be I think a
30:34 - challenge for you to take this and take
30:36 - it further but this is a fully
30:37 - functioning API there's one piece of
30:39 - this that I think I should
30:42 - mention this API can be accessed by my
30:46 - so the server the node server the thing
30:48 - running right here can be accessed by
30:51 - this web page because they this web page
30:54 - is hosted on this server but what if you
30:56 - wanted to make a sentiment analysis API
30:59 - that is running somewhere but anybody
31:00 - could access it from their own web pages
31:02 - and their own programming without being
31:04 - the programmer of the server well to do
31:06 - that you what you want to do is open up
31:09 - on your server something called cross
31:11 - origin resource sharing you want to say
31:13 - I want other people to be allowed to
31:15 - send get requests or post requests to
31:17 - this server not just me the programmer
31:20 - of the server who also is hosting like
31:22 - HTML files packaged with it and to do
31:24 - that you need to enable cores which
31:26 - stands for cross origin resource Shing
31:28 - you've probably encountered the flip
31:29 - side of this error anytime you've tried
31:31 - to request something from a server and
31:32 - you got this like XML request H not
31:35 - allowed cross origin resources not
31:37 - enabled so if I want to enable cores I
31:39 - can search for Coors node package
31:43 - express this is something I can enable
31:45 - with Express and I can actually just
31:49 - install uh uh this chors
31:53 - package and uh I can say uh npm in
31:57 - install cores D- saave now I've
32:01 - installed that node package and I can go
32:05 - here and I can just grab app.use oh I
32:08 - can say cores require
32:10 - cores uh right up here the same place
32:13 - that I used body parser VAR cores equals
32:16 - require cores
32:18 - and app use body parser app use Etc and
32:22 - app use cores so now I now have enabled
32:25 - cores so if I put this if I deploy this
32:28 - to Heroku or digital Ocean or whatever
32:30 - web server hosting environment my
32:31 - whatever my server is now if I handed
32:33 - out the IP address or the URL other
32:36 - people could call low Json or HTTP post
32:39 - from their own p5js code running on
32:41 - their computer to your particular server
32:44 - so this concludes my uh series about how
32:47 - to build an API from scratch using node
32:50 - and a front end to that API using p5js
32:52 - hopefully you found this useful if you
32:54 - make an API if you build something share
32:56 - it with me ask in the ask ask in the
32:58 - comments like share this video I guess
33:00 - those are the things I'm supposed to say
33:01 - and I look forward to seeing you I'll do
33:03 - some follow-up videos as part of this
33:04 - playlist if there are some good
33:05 - questions or other features that I think
33:07 - of adding okay see you soon goodbye
33:14 - [Music]