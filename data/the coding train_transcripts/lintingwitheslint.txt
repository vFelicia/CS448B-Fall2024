00:00 - oh hello welcome to a video about this
00:05 - video is actually about my life's
00:07 - passion I have a passionate in life
00:09 - everybody should find the thing that
00:11 - makes them happy feel at ease now you
00:13 - shouldn't be like me and you should
00:14 - definitely pick a different life's
00:16 - passion but my life's passion is
00:19 - indentation and spacing so this is my
00:24 - phyllotaxis coding challenge code which
00:27 - I went against every instinct that I
00:29 - have in this life messed up the sort of
00:33 - spacing and indentation and so what I'm
00:37 - going to emphasize in this video
00:39 - tutorial is so and by the way this is
00:41 - not a video tutorial you're watching
00:43 - from an expert in this topic
00:46 - this is a video tutorial from someone
00:47 - who just learned about this topic really
00:49 - in the last week and I'm going to kind
00:52 - of learn about it while attempting to
00:54 - apply it to this piece of code and that
00:56 - topic is lifting
00:59 - I forgot my I really wish I'd brought my
01:01 - lint brush so I could have some kind of
01:03 - linting stick but oh well you'll have to
01:06 - live without that now what is linting so
01:09 - one of the things that makes me really
01:11 - happy is when a code editor has
01:14 - something like auto format or beautify
01:17 - and I'm using in here the atom text
01:19 - editor you have lots of people use
01:22 - different text editors and code editors
01:23 - and online editors and console-based
01:26 - editors and I haven't configured in such
01:28 - a way that if I hit command S which is
01:32 - for save or if I go up here under
01:35 - packages atom beautify beautify I have
01:39 - this atom beautify package which allows
01:42 - which will automatically apply a bunch
01:44 - of styling conventions to the code so
01:47 - this horrible uncomfortable thing like
01:49 - look at this will be fixed and
01:56 - everything will be right with the world
01:59 - if I hit command s okay here we go here
02:02 - we go here we go okay
02:07 - especially now so here's the thing I'm
02:10 - being silly and joking around here
02:13 - there's no reason why I couldn't have a
02:17 - program automatically look through the
02:20 - code and analyze it to determine if
02:23 - there are little things like a missing
02:26 - semicolon or maybe there should be a
02:28 - space here between this now again the
02:30 - code these are I'm looking for things
02:32 - that don't stop the code from running
02:34 - but that don't adopt a certain style
02:37 - convention for readability of the code
02:40 - and also for maintenance of the code so
02:43 - I tend to optimized for legibility and
02:45 - maintenance over like never making my
02:49 - code like as concise and short and
02:51 - cryptic as possible obstacle and I think
02:55 - that's one of my favorite words which I
02:56 - can't really pronounce
02:58 - obviously location okay so and this can
03:03 - make an open-source project more
03:05 - accessible actually to contribute to
03:07 - because you kind of feel more confident
03:09 - as a contributors say like oh I can run
03:11 - this little module that tests the code I
03:13 - want to submit to see if it adopts the
03:15 - style conventions and so this is kind of
03:17 - related to unit testing and continuous
03:19 - integration that I have a whole other it
03:23 - will pop up somewhere video tutorial
03:25 - series about okay so let's get started
03:26 - here we know I have Adam beautify that
03:29 - will but it's not telling me about the
03:31 - semicolon here so I need to figure out
03:33 - how to do lint ik so the the package
03:36 - that I'm gonna use to lint oh look at
03:38 - this phyllotaxis pattern let me just
03:40 - refresh let me actually adjust this just
03:43 - stop after a certain point I'm just
03:45 - gonna add something if n is greater than
03:47 - 1000 no loop so that will stop this
03:54 - phyllotaxis pattern will blossom and
03:57 - bloom until a thousand until that
03:59 - variable and reaches a thousand and then
04:01 - it will stop okay like that what the
04:04 - code is doing is less important in this
04:05 - video coming back here let's look for
04:08 - something called EES lint pluggable
04:10 - JavaScript linter es lint is an
04:13 - open-source project originally created
04:15 - by Nicholas Zakas in June 2013 its goal
04:19 - is to provide a
04:20 - huggable linting utility for javascript
04:23 - so I encourage you to read through all
04:26 - of the documentation about this there's
04:28 - a developer guide there are there's this
04:31 - whole documentation of rules that's a
04:33 - bunch of default rules so so the rules
04:36 - are the style conventions that you're
04:38 - applying to the code there's a
04:40 - command-line interface all sorts of
04:41 - stuff what I want to look for here I
04:43 - think is the getting started I want to
04:47 - just click on this getting started and
04:49 - uh there's this apparently this YouTube
04:51 - tutorial that you should probably just
04:52 - stop watching this video and go watch
04:54 - this right now let me sure it's better
04:56 - than whatever I'm gonna do but I'm going
04:58 - to engage with es lint via node so while
05:03 - this project I'm making this phyllotaxis
05:07 - pattern is a client-side JavaScript
05:09 - sketch that doesn't involve a server or
05:12 - anything I can use node the server-side
05:14 - programming JavaScript framework to kind
05:18 - of act as my project manager and I can
05:21 - import certain packages and things that
05:23 - I can run such as unit testing or
05:25 - linting so this is what I want to run
05:28 - the problem is I don't think I want to
05:31 - install es lint this moment right now
05:34 - because I haven't even set this up to be
05:38 - a node project and the reason why I know
05:41 - it's not set up to be a node project is
05:42 - that it would have a package.json file
05:45 - which is like a configuration file for
05:47 - this so that node knows how to kind of
05:49 - manage this project so I'm gonna go here
05:52 - looks so I am now now in terminal so if
05:57 - you're not familiar with the command
05:58 - line I probably have some video tutorial
06:00 - that goes over that I'm gonna just check
06:02 - yes I am in my folder my life's passion
06:04 - I'm gonna say NPM in it this is the
06:07 - command that I can run that will create
06:09 - the package.json file the configuration
06:12 - file for this project I could make it
06:14 - manually or copy/paste it from where
06:16 - else but let's run this this utility
06:19 - will walk you through blah blah blah
06:20 - blah blah my package name and let's see
06:24 - what this can be over here my package
06:26 - name is definitely my life's passion it
06:28 - is version 1.0 whatever demonstrating
06:33 - linting for the coding train oh my
06:37 - goodness by the way I seriously need
06:42 - like a linter for my email so I stopped
06:44 - putting two spaces after the period cuz
06:45 - I just like I have a bad habit of that
06:47 - entry point
06:49 - sure sketch KS test command I'm not
06:51 - gonna run tests right now so I'm gonna
06:52 - leave that out git repository I'm gonna
06:56 - leave that out right now I can I can add
06:58 - that in later keywords linting tutorial
07:03 - education JavaScript let's do that
07:06 - author is the coding train and the
07:10 - license will be MIT and I'm gonna say
07:14 - MIT by the way is a software license
07:16 - that's very permissive and I try to
07:18 - adopt it for all my projects when I can
07:20 - there's sometimes other considerations
07:22 - but it pretty much lets people use it
07:24 - for anything without having to give
07:25 - credit without we can use it
07:27 - commercially etc okay is this okay yes
07:31 - but for example I use a Creative Commons
07:33 - non-commercial license for like my
07:36 - nature of code open source book because
07:37 - I wouldn't want someone to take the
07:39 - nature of code book and resell it but
07:41 - with something like this phyllotaxis
07:43 - pattern linting tutorial use at will
07:46 - okay
07:47 - is this okay yes yes okay so now I'm
07:50 - gonna I'm just gonna type clear to get
07:52 - back to the top and I'm gonna look we
07:53 - can see now AHA package.json so I have
07:56 - this package out JSON which is the
07:58 - configuration file for my project and
08:01 - now I'm lifting to it this video is
08:06 - brought what has this been like 45
08:07 - minutes we just like doctor anticipating
08:10 - adding glinting all right so you're
08:13 - wonderful to watch this npm install es
08:15 - lint - - saved it so you might be
08:17 - wondering so first of all npm node
08:19 - package manager and we'll install a
08:21 - package to go with this project
08:23 - yes lint is the package now what's this
08:25 - - - saved dead now if you've watched
08:27 - some of my other node tutorials you have
08:29 - might have noticed that I say - - save
08:31 - because often the code for my project
08:34 - itself depends on a node package this is
08:38 - not the case right now the code for my
08:42 - phyllotaxis project does not
08:45 - and on ES lint yes lint is a developer
08:48 - dependency meaning I want to use this
08:50 - package while I am developing the
08:52 - project but when I release the project
08:54 - it doesn't need
08:55 - yes lint to go with it it's just the
08:58 - little animation that's gonna be in the
09:00 - browser so that's this is saying I
09:02 - wanted to pendency for this project but
09:03 - I want it to be a development dependency
09:05 - so I'm gonna do this I'm gonna copy
09:07 - paste this I'm gonna go back to terminal
09:09 - I'm going to paste it in and that was
09:15 - fast
09:17 - okay so now it added everything and I
09:20 - have es lint now I have a feeling we're
09:22 - missing some other packages and we're
09:23 - gonna kind of arrive at all of that as
09:25 - we go but we can now say here we can now
09:30 - we can now we can now see that first of
09:31 - all under this has been added to package
09:33 - that JSON under dev dependencies
09:35 - yes lint version 4.1 8.2 or higher so
09:40 - that's there and in theory now now I
09:43 - should say that some people choose to
09:46 - install yes lint globally on the
09:49 - computer so this now what I've done is
09:51 - I've installed es lint for this
09:53 - particular project only it might make
09:55 - sense for me as a person who might want
09:57 - to use it for everything that I'm always
09:59 - doing on my computer to install it
10:00 - globally but for now let's leave it as a
10:05 - local module so that anybody using this
10:09 - project can can have it there sort of as
10:12 - a standalone thing okay so now what I'm
10:15 - gonna do is I can run yes lint by
10:20 - referencing the es lint execution file
10:24 - in node modules in dot bin and your file
10:27 - I could run es lint on sketch dot yes so
10:30 - let's actually just do that okay so I'm
10:36 - gonna run this but instead of your file
10:38 - Dutch ass I'm gonna write sketch Dutch
10:40 - ass
10:42 - oops something went wrong so here's the
10:45 - thing
10:47 - yes lint isn't just magic it's not just
10:50 - like oh let's just gonna let there I
10:52 - know I as the eslint know exactly how
10:55 - you should style your code I
10:58 - there's no matter you have to set up a
10:59 - configuration file so that configuration
11:01 - file is it's has a name and it is called
11:08 - it is a file that you create called es
11:12 - lint RC in the directory of the project
11:15 - and so I could create that manually and
11:17 - I could start to add some of the rules
11:19 - like hey I always want to semicolon or I
11:21 - always want to use double quotes me I
11:23 - like single quotes whatever I like to
11:26 - mix them up anyway I don't know what I
11:29 - like so but I could also now run let's
11:32 - try this
11:32 - I can run es lint in it and I think it
11:36 - will give me it will step me through a
11:38 - series of questions it will ask me all
11:40 - about my preferences my passions my
11:43 - hopes and dreams and fears and it will
11:46 - create a nice configuration file of how
11:48 - I should style the code the longest
11:50 - video ever anyone ever made on linting
11:53 - it's insane okay oops oh right
11:55 - but I have to instead because it's not a
11:58 - global module I have to say this a - -
12:05 - in it this should work okay I'm so
12:09 - excited to have this conversation how
12:11 - would you like to configure es Lin to
12:13 - use arrow keys use a popular JavaScript
12:16 - style guide that sounds reasonable
12:17 - inspect your JavaScript files mm-hmm I'm
12:21 - not sure hmm I don't know actually let's
12:25 - inspect our JavaScript files so one
12:27 - thing you should know is that there are
12:29 - popular JavaScript styles and a lot of
12:31 - them have been created by companies for
12:33 - example there's an air B&B style there's
12:35 - a Google style and these are these you
12:37 - can adopt and me I can we'll find out
12:41 - about some of these but let's I don't
12:42 - know I've actually never tried this
12:43 - inspector JavaScript files so let's try
12:45 - that which files should be examined
12:47 - sketch is what format do you want the
12:51 - config file to be in I let's stick with
12:52 - JavaScript am I using EMC ECMAScript 6
12:58 - features yes
13:00 - yes six modules no but I should be
13:02 - someday I got to do a tutorial about
13:04 - that where will my code run okay this is
13:07 - browser code only it is not node do you
13:10 - use common Dutch common J's no do you
13:13 - use JSX no okay great so it enabled a
13:19 - whole bunch of rules for me look at this
13:20 - oh let's look now that file is there and
13:22 - we can examine it look at this array
13:26 - bracket new line array bracket spacing
13:28 - oh it's just like it looked at my code
13:30 - and created a configuration style not
13:32 - aloft or how I currently have it now
13:34 - some other things I might do is I might
13:36 - go back and try to adopt one of these
13:38 - common JavaScript styles I might look at
13:40 - a project like p5.js if I go to the if I
13:42 - go to p5.js on github github calm /
13:50 - processing / p5.js I'm guessing I'm
13:53 - gonna find look at that this open-source
13:55 - project has an ESL int RC file so I
13:58 - could say like you know what I want to
14:00 - adopt the same rules that p5 adopts and
14:03 - so I could look through here now however
14:07 - I should be able to run Valente now here
14:12 - we go
14:14 - whoa okay so this is really interesting
14:17 - I got a lot of errors points is assigned
14:22 - of value but never used setup is defined
14:25 - but never used create canvas is not
14:28 - defined angle mode is not - 5 degrees is
14:31 - not defined so wait a second this is
14:33 - nuts I mean yes you're right if I look
14:36 - at my code hmm there is a background
14:40 - translate rotate and it's saying those
14:43 - things are not defined but they are
14:45 - they're defined they're part of the
14:47 - p5.js so one thing that I probably want
14:49 - to do here is tell yes lint that I'm
14:53 - using the library p5.js and if you're if
14:56 - something in my code is not defined but
14:59 - it's defined in p5.js
15:00 - you don't have to give me a warning or
15:03 - error about that so let's look at how we
15:05 - do that in fact one way of doing this is
15:08 - using another node package p5 config
15:13 - config
15:14 - eslint so if I go now to here you'll see
15:19 - that there is this other node package
15:21 - called es Lynde config p5.js which
15:25 - allows me to put in my yes lint RC file
15:31 - that this that I extend I am I am also
15:36 - should look at all the stuff that's part
15:38 - of p5 Jaz so let's now install this dev
15:41 - dependency to the project to feel are
15:48 - way too fast again that was installed
15:50 - and then what I want to do is look at my
15:53 - es lint RC file is there already and
15:56 - extends in here yes extends yes lint
16:00 - recommended so let's see what else I
16:02 - want to extend extends p5 just now ah so
16:09 - if I want to extend a bunch of things
16:11 - looks like I can create an array this
16:14 - doesn't look right right there should be
16:16 - commas here I think this is probably
16:18 - incorrect we should submit a pull
16:20 - request to this project just to fix its
16:23 - documentation as I have a feeling what I
16:25 - need to do is turn this into an array
16:31 - and then so I'm going to now add also
16:36 - p5.js and let's just add I'm not using
16:40 - it but let's add p5.js Dom so you can
16:43 - see this should be how I can add other
16:45 - kind of lint configurations that I'm
16:48 - going to es link configurations that I'm
16:50 - going to import into my project so let's
16:53 - see now I should be able to say I'm
16:56 - going to run linting again I'll leave
17:01 - this here ah ok great so now you can see
17:05 - that got rid of all that now here's the
17:06 - thing points is assigned a value but
17:09 - never used line I line 9 let's look at
17:14 - line 9 what is that so I go back to my
17:18 - code line 9 oh look at that
17:22 - that's actually a totally legitimate
17:24 - thing that it found I
17:28 - I'm not using that array anywhere so
17:30 - that's good to know
17:31 - I'm gonna take this out and now I'm
17:35 - gonna run it again and I fixed that now
17:38 - okay great so um here's the thing I
17:40 - probably uh maybe I'll look into this in
17:42 - a few chinna part two or something
17:43 - there's probably a nice way that I can
17:45 - create my own custom rule so that I'm
17:48 - set up and draw are allowed it does
17:50 - think that I'm maybe that should be
17:52 - saying it's actually added to p5 the
17:54 - p5.js configuration but in this case in
18:00 - this case the it is it is kind of
18:03 - accurate that I've defined this function
18:04 - setup and it's never called
18:06 - but p5 the library itself is calling it
18:08 - set up it does actually is that in a way
18:09 - I almost want to say it almost are give
18:12 - me an error like hey where's your set up
18:13 - function let's do some other stuff let's
18:16 - let's put in some weird spacing and see
18:20 - what it gives me let's forget some
18:22 - semicolons knocking oh I I have to do
18:25 - something so one thing that I have is
18:27 - that as soon as I hit command s it's
18:31 - going to reformat the code so I need to
18:35 - turn off my atom beautify package so I'm
18:38 - gonna go to preferences wait hold on
18:41 - pack it I'm gonna go to atom preferences
18:43 - and I'm going to go to packages I'm
18:46 - gonna go to beautify so again this is a
18:49 - really atom the text editor specific
18:51 - which is a little less relevant to this
18:53 - video because you might be using a
18:55 - different text editor but I'm gonna go
18:56 - to settings of atom beautify and I'm
18:59 - gonna go down to JavaScript and there's
19:02 - by the way I can I'm going to uncheck
19:03 - this beautify on save which is what I'm
19:06 - doing right here by the way I can add I
19:08 - can actually link the text editor with
19:10 - es lint so maybe that I'll do that in a
19:13 - separate video just look at that but
19:14 - again that's Adam Adam editor specific
19:16 - so I unchecked that preference so now I
19:19 - should be able to hit whoops I should be
19:22 - able to hit save all right and all of
19:25 - the mistakes or style mistakes are so
19:28 - one thing just to see like I shouldn't
19:30 - I'm not broken the code the code still
19:35 - runs I have not broken the code I've
19:37 - only broken my style conventions and so
19:40 - now I'm gonna run
19:41 - again and look at this oh look at this
19:46 - uh oh let's see if I can it's really
19:50 - bothering me that I'm not that this
19:52 - formatting oh no this is fine now okay I
19:54 - just want to be able to see this a bit
19:55 - better I'm gonna make this a bit bigger
19:57 - so it looked a space is required after
20:01 - the column yes
20:02 - yes it is there should be spaces inside
20:05 - this parenthesis multiple spaces found
20:08 - before degrees so so this is wonderful
20:10 - and look at this it's saying potentially
20:13 - fixable with the - tax - - fix option so
20:16 - in theory I should be able to now run
20:19 - this again with - - fix and it will
20:22 - actually fix some of those style errors
20:26 - so look at that it didn't find any
20:28 - errors anymore and if I go back to the
20:30 - code okay I'm upset didn't I got a let's
20:40 - run this again yeah so interestingly
20:43 - enough this is deeply deeply upsetting
20:46 - to me that there aren't two spaces here
20:50 - if I run my package out of beautify I
20:54 - will get those spaces back so that's
20:56 - something that I have to investigate and
20:58 - probably what I need to do is go look at
21:00 - the ESL into documentation whoops in the
21:05 - ESL in documentation go under and go
21:11 - under rules and look for a rule that I
21:13 - can add to make sure that is fixed now
21:16 - here's the thing most likely if I adopt
21:18 - one of these more popular JavaScript
21:19 - style guides it's gonna have more stuff
21:21 - in it that I might want and maybe I'll
21:23 - come back and try some of those in a
21:25 - separate video but I do want to mention
21:28 - one thing here this was kind of no fun
21:32 - what I did in the sense that know
21:34 - nothing about this is fun that I have to
21:37 - do this because I have es lint as a
21:39 - local a local a local module and so one
21:45 - thing I can add to my package JSON file
21:48 - and it's here under scripts so you could
21:51 - see like one of the things you might
21:52 - have if you watch my videos about unit
21:54 - sting I could say things like npm run
21:56 - test and what that will do is will run
21:59 - whatever commands I have that are mapped
22:01 - to test in scripts so I'm going to add
22:05 - one here called lint and I'm going to
22:10 - say whoops I'm going to go and grab this
22:17 - and then I'm also going to say star J s
22:23 - so this would in theory lint any
22:25 - JavaScript files that are in the
22:28 - projects in them in the main directory
22:30 - and there I think it might not hopefully
22:32 - it won't look for the at the people the
22:34 - library files which is something I
22:35 - definitely want to ignore but if I do
22:37 - this and save this now I can simply say
22:42 - NPM lit run lint and there we go now
22:48 - that didn't work why did that not work
22:52 - lint es lynnster yes mmm okay I'm back
22:58 - thankfully I make these videos with a
23:00 - live chat of people who know more than I
23:02 - do about this and actually I want to see
23:05 - this because what happened is yes lint
23:07 - exited with an error code because there
23:10 - were errors and if I'm gonna run this
23:12 - automatically through some other process
23:13 - like it's exit status is one because
23:16 - there was an error and that other
23:17 - process needs to get that report so if I
23:19 - integrate this with some kind of other
23:21 - unit testing system or continuous
23:23 - integration framework I'm gonna good
23:24 - what are these things
23:25 - you know check my other videos or ask in
23:27 - the comments this is something that I
23:30 - actually want to see so unfortunately
23:31 - without setting up a rule but I can just
23:35 - see just I can just for a moment just as
23:37 - a kind of like hack for a second is I'm
23:40 - gonna just comment out my setup and draw
23:43 - functions and I am going to run this
23:47 - again and we'll see oh boy comments
23:52 - should oh look at the crazy ah oh look
23:55 - at this
23:56 - and Oh terrible idea these variables are
23:59 - assigned but never used and comments
24:01 - should not begin with a lowercase
24:03 - character and you know what yes lit it
24:05 - knows
24:06 - better than I know myself because I
24:08 - agree I do not want my comments to begin
24:12 - with a lowercase letter although I do
24:13 - want an exception to that if I'm
24:15 - commenting out a bit of code although I
24:17 - guess ultimately in a sort of more
24:20 - formal open source project maybe I don't
24:22 - want to submit a pull request or
24:24 - something with commented out code but
24:26 - again it's kind of okay for me while I'm
24:29 - experimenting of commenting code I'm
24:31 - certainly not going to like do this
24:32 - because that would ruin everything
24:34 - so I have to think about that I might
24:36 - want to disable that rule but you get
24:39 - the idea I'll delete it let's just
24:43 - delete everything hold on I'm gonna do
24:48 - command X and I'm gonna say console dot
24:53 - log
24:57 - what kind of I'm so stressed out right
25:01 - now yes perfect that my colon okay now
25:11 - how do I do that automatic clear again
25:14 - okay I'll just type clear because that's
25:16 - how I that's how I do it okay nvm run
25:18 - lint here we go oh I expected console
25:23 - statement no I should not have consoles
25:26 - David strings must use double quotes
25:27 - okay I reject
25:30 - yes lint I reject your configuration
25:33 - let's go let's go see this video is my
25:36 - way he's like I can't we be blur to be
25:37 - like oh what's new from the coding train
25:39 - today Oh a video about linting wait why
25:41 - is it two and a half hours long got like
25:44 - crazy person made it let's look for
25:46 - quotes in here so oh I don't quotes
25:49 - quote quotes quotes all right double
25:54 - wait where there should be somewhere in
25:56 - here oh maybe because it's getting the I
25:58 - gotta end this video and learn about how
26:00 - this stuff works
26:00 - single double so I wonder if it's
26:04 - getting it from yes Lynch recommended
26:06 - like I wonder if some of these rules are
26:08 - coming from es lint recommended command
26:11 - K thank you and so let's let's get rid
26:15 - of that just for a second
26:19 - [Music]
26:22 - strings let's use double quotes no
26:25 - alright but fine I'll fix it oh it
26:35 - couldn't fix it command K right yeah
26:39 - there we go
26:40 - it couldn't fix it so I will fix it
26:43 - myself we're gonna make this thing this
26:47 - big lint itself by golly let's get rid
26:52 - of the fix let's make it let's make it
27:00 - much bigger so you can see by the way
27:08 - this stuff can be problematic and you
27:11 - really have to be thoughtful and careful
27:12 - about what makes sense for your project
27:14 - in your workflow and if you are making a
27:15 - creative art project and you spend all
27:17 - day during your linting file and you
27:21 - don't express yourself through your code
27:23 - maybe that's a problem
27:24 - but as you after a while at certain
27:27 - point after you've worked on a project
27:28 - and have a kind of a first version you
27:30 - might go back edit clean up the code add
27:33 - some style conventions if you're open
27:35 - sourcing it so other people can
27:36 - participate in it alright so that wraps
27:38 - up this video about linting thank you
27:41 - for watching it's probably the next day
27:43 - now it's really nighttime if you started
27:48 - this video and it's daytime it's been so
27:49 - long I will be doing a part two and I'm
27:52 - sure I've made a lot of mistakes and
27:53 - missed some things and I want to really
27:55 - sort of think about what kind of
27:56 - configuration rules I want to set up for
27:58 - my workflow and maybe experiment with
28:01 - integrating with Adam or trying other
28:02 - text editors so leave your notes and
28:05 - feedback in the comments I'm I'm gonna
28:07 - wait at least a week before I do the
28:09 - part 2 so I can compile a lot of
28:11 - feedback at comments and then come back
28:12 - and do a part two and hopefully
28:14 - integrate this also with unit testing
28:16 - okay thanks for watching
28:23 - [Music]