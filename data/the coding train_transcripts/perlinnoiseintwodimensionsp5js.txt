00:01 - Hello.
00:02 - The time has come to talk about
two-dimensional Perlin noise.
00:04 - That is not two-dimensional
Perlin noise.
00:06 - Right behind me over here
is a visual representation
00:09 - of one-dimensional Perlin
noise, a kind of graph
00:12 - over time or over some sort of
x-axis of Perlin noise values,
00:17 - of smooth random values.
00:19 - So what I want to talk about in
this video, coming over here,
00:21 - is what does it mean
for Perlin noise
00:23 - to suddenly be in
two dimensions?
00:25 - So let me draw for
you essentially what
00:28 - was happening in that sketch.
00:29 - So this is a graph of Perlin
noise in one dimension.
00:34 - And we know that the noise
function takes an input, which
00:40 - I called in my
previous example xoff,
00:43 - meaning some sort of
offset along the x-axis.
00:47 - And the function will
return the particular value
00:50 - related to that x offset.
00:52 - So now, even though this
is a two-dimensional board,
00:57 - and I am here with you
in three dimensions,
01:03 - this is a visual representation
of one-dimensional value,
01:05 - of values in one dimension.
01:07 - So now I need a
visual representation
01:10 - of values in two dimensions.
01:12 - So what I'm going to do
here is now draw you a grid.
01:17 - And right on, this
marker is failing me.
01:19 - Let's try the other side.
01:22 - I think I need to like not have
gravity in this space maybe.
01:25 - And then the ink wouldn't
drip to the back.
01:28 - I'm trying to like
hold it up like this.
01:30 - I need one the those
astronaut pens.
01:31 - Anyway, so this is now
a two-dimensional grid.
01:37 - What if, instead of a
particular noise value--
01:43 - let me come back to this.
01:45 - I am going to Staples,
and I am buying
01:47 - a box of fresh
whiteboard markers
01:50 - as soon as I finish
making videos today.
01:54 - Noise.
01:55 - What if I say xoff comma yoff?
02:00 - What I'm saying here is give
me a particular noise value
02:05 - at a particular x-location
and y-location in this space.
02:10 - So in the same way that this
looks like a bumpy terrain,
02:13 - but it's flattened,
you could imagine
02:15 - this being a bumpy terrain
that's coming out towards you.
02:19 - There's all of these values.
02:21 - And so this particular
value, this particular value
02:24 - is similar to the value
that comes after it
02:27 - or the value that
comes before it.
02:29 - This particular value is
similar to all the values
02:32 - that surround it.
02:36 - There's a difference between--
02:37 - again, this is a very kind
of like a difficult thing
02:40 - to wrap one's head around.
02:41 - There's a difference
between drawing stuff
02:44 - in two dimensions versus pulling
values from two dimensions.
02:48 - But what I'm going
to do now, I think,
02:50 - is try to demonstrate Perlin
noise in two dimensions
02:53 - by doing the most sort of like
literal visual representation
02:56 - of this.
02:57 - So what I'm going to do is--
03:00 - what I'm going to do is
color every single pixel
03:05 - with a grayscale value according
to a Perlin noise value.
03:08 - So let's make that happen.
03:10 - Hopefully, that
explained it somewhat.
03:11 - Now I'm coming back over here.
03:13 - And here we go.
03:14 - So let's do some stuff here.
03:20 - I'm going to keep this
increment variable.
03:22 - I'm going to get rid
of this start variable.
03:26 - And I'm going to get rid of
a lot of this stuff actually,
03:29 - but I'm going to
keep this outer loop.
03:34 - And what I'm
actually going to do,
03:35 - and I could do this with pixels.
03:37 - Let's do it with pixels.
03:39 - So what I need to say, I'm going
to make the canvas 200 by 200.
03:44 - And then I'm going to say
low pixels here in Draw.
03:48 - Now, the way that a pixel
array works in p5 GS
03:51 - is a little bit tricky.
03:53 - And I have an entire video
dedicated to just that.
03:56 - So if you haven't used
pixels before in p5 GS,
03:59 - go find that video now
and then come back.
04:01 - There'll be a link to it in
the description of this video.
04:03 - But what I'm going
to do here is I'm
04:08 - going to add two loops,
one for the x values,
04:12 - one for the y values.
04:15 - And then I don't need
beginShape and endShape.
04:18 - I don't need any of this stuff.
04:20 - I can actually get rid of so
much stuff from this example.
04:24 - Then I'm going to say
update pixels at the end.
04:26 - And now what I need to do is
I need to calculate an index,
04:31 - which is x plus y time-- this
is what I cover in the other
04:34 - video--
04:35 - x plus y times width times 4.
04:40 - And then I want to say
pixels that index equals 255.
04:46 - And then that's the red value.
04:48 - This is the green value.
04:52 - This is the blue value.
04:53 - And I'm going to say
plus 0 just so you see.
04:56 - Plus 3.
04:57 - And this is the alpha value.
04:58 - So if I do this, I
should just see, ah OK.
05:02 - So what just happened here?
05:03 - Something weird just happened.
05:04 - It so happens that my
machine is actually
05:07 - a high-density display.
05:08 - It's a Mac retina screen.
05:11 - And so the way
high-density displays work
05:14 - is they actually pack four
pixels in for every pixel.
05:17 - And I don't want to get lost
in the discussion of that,
05:20 - but I can kind of fix this issue
just by saying pixel density--
05:23 - I can turn off the sort of
high-densitiness of the display
05:26 - by just saying pixel density
1, 1 pixel per pixel.
05:30 - And now you can
see-- there we go.
05:31 - So let's look at this now,
and let's say I say random.
05:36 - For each pixel, I'm
going to give random.
05:38 - I'm going to pick a brightness,
which is a random value, rr.
05:54 - What?
05:55 - Adam is auto-completing me
like I'm a crazy person.
05:57 - OK.
05:58 - So you can see, there we go.
05:59 - We've got, you know,
back in olden times,
06:04 - when you might have
used something called
06:06 - a television, the telly, and
you couldn't get your antenna
06:10 - to connect to anything,
you would see this kind
06:12 - of noise, static, randomness.
06:16 - That's what it looks like.
06:17 - Every single pixel is a
random grayscale value
06:23 - between 0 and 255.
06:27 - This is making me feel crazy.
06:28 - So now what do I want to do?
06:30 - You can see that there's no
relationship between any pixel
06:32 - and the pixel next to it.
06:34 - And I could say no
loop, just so we could
06:37 - take a closer look at this.
06:40 - And you could see
it's zoomed in.
06:41 - You could see
every pixel is just
06:43 - sort of a random value
with no relationship.
06:45 - So now, what if I want
to use Perlin noise?
06:50 - So let's [MUTED] one-dimensional
Perlin noise for a second.
06:55 - What if were just to
say, I have a global--
06:58 - I have a variable called xoff.
07:02 - And what I'm actually
going to do for every pixel
07:06 - is take a noise value at
xoff and multiply it by 255.
07:13 - You can see now
every single pixel
07:16 - gets a single noise
value from time
07:19 - 0 in one-dimensional noise.
07:21 - Every single pixel
now has this color.
07:25 - Now what if I start marching
through the one-dimensional
07:29 - noise, and I were to say,
OK, for every pixel change
07:35 - xoff by some amount?
07:39 - It's kind of interesting.
07:40 - I get this sort of
like weird streak.
07:42 - Why do I get this
weird crazy streak?
07:44 - Well, let's think about it.
07:45 - First of all, why
is it going down?
07:46 - Shouldn't it go across?
07:48 - Let's look at those loops again.
07:51 - The inner loop is the y loop.
07:53 - So actually, for every x,
I'm doing all the y pixels.
07:56 - Let me move y to the outer loop.
08:01 - Look.
08:01 - Those streaks are going across.
08:03 - What's happening here is
that-- and we can kind of
08:06 - zoom in here for a second.
08:09 - Every pixel is changing
ever so slightly,
08:12 - according to Perlin noise.
08:13 - White to gray to gray, and
then when it gets to the end,
08:17 - look at the color
that's over here.
08:18 - It's hard for you to see,
but the color that is over
08:20 - here just comes right back
and picks up in the next row.
08:24 - So in the grid, if I have
one-dimensional Perlin noise
08:28 - values, I'm getting a variety
of continuously smooth numbers,
08:32 - but then the one
that is here, it's
08:34 - similar not to
what's above it, it's
08:37 - this one is similar to
what's before and after,
08:39 - but has no relationship
to what's below.
08:41 - So what I actually want to
do is also give Perlin noise.
08:45 - This is where I want
to have the values.
08:47 - I don't want to visualize
in two dimensions,
08:49 - one-dimensional
Perlin noise, I want
08:50 - to visualize two-dimensional
Perlin noise.
08:52 - So if I come over
here now, and I
08:55 - were to say let me
also have a y offset,
09:01 - now, this is a
little bit strange.
09:03 - Now, where do I
initialize these?
09:05 - So the y offset, right, if I'm
looping like this, x offset
09:10 - is going up, up, up, up, up up.
09:12 - Then x offset should reset and
y offset should go up by 1.
09:16 - Up, up, up, up, up, up, up,
x offset reset, y offset
09:20 - goes up by 1.
09:22 - So what I actually need
to do is x offset needs
09:26 - to be initialized here,
because for every single row,
09:31 - I want to restart
x offset back at 0.
09:35 - And then I want noised then
I want noise of x offset,
09:38 - y offset and then
after every single row,
09:42 - after every single inner loop,
I want the y offset to go up.
09:47 - And I forgot I have a
variable called increment.
09:50 - So let me just add that in here.
09:53 - And I'm going to run this again.
09:54 - And now look what I've got here.
09:56 - I've got something that
appears rather cloudy.
09:59 - Why?
09:59 - Because pixels are similar
to the pixels around it.
10:03 - It's very much like
blurring an image.
10:05 - Actually, if I took that
random snow, that random static
10:08 - and blurred it over and over,
blur, blur, blur, blur, blur,
10:12 - that's like that
cosine interpolation
10:13 - function that I referred to
all the way back about how the
10:16 - Perlin noise algorithm was
generated in the first place.
10:18 - So a blur, the sort
of blur convolution--
10:20 - I can't believe I'm using
a technical jargon--
10:23 - this blur convolution
meaning a way
10:25 - of like mixing pixels together.
10:27 - But this blur thing is very
similar to sort of smoothing
10:31 - out that randomness.
10:32 - Averaging.
10:33 - So I could do
things, by the way,
10:34 - to like increment just 0.1.
10:36 - Oh, and it's not looping.
10:38 - So let me turn loop back on.
10:41 - And let me make the
increment bigger.
10:44 - You could see what that looks
like with a bigger increment.
10:46 - There's more changes.
10:48 - I could make the increment
be something even smaller.
10:54 - And you can see how this sort
of noise, this noise field
10:57 - appears.
10:58 - So this is a literal
visualization
11:01 - of the two-dimensional
Perlin noise values.
11:06 - And as you might imagine,
you could take those values
11:10 - and map them to lots of other
things like bumpy terrain
11:14 - or a flow field, which is
a thing that I'm ultimately
11:16 - going to get to in the
next particular video.
11:19 - So hopefully this
helps you understand
11:21 - a bit more about
how the Perlin noise
11:24 - two-dimensional noise works.
11:27 - And I'm going to do some
more of it in the next video
11:30 - to make a flow field.