00:00 - hello welcome to another coding
00:02 - challenge in this coding challenge I'm
00:04 - going to take the Mandelbrot set which
00:05 - is here programmed in processing and I'm
00:08 - going to convert that code to the Julia
00:10 - set so I'm going to explain a little bit
00:12 - about what the Julia set fractal is and
00:14 - then just write the code for it play
00:16 - with it make an animation out of it do a
00:18 - few other things and then I'll be
00:20 - finished so first I want to say is I'm
00:22 - going to assume a little bit of
00:23 - knowledge which you can pick up and
00:25 - watch the previous video about the
00:26 - Mandelbrot set if some of the stuff is
00:29 - confusing to you okay I have to keep
00:31 - going here so first let's look let me
00:33 - just don't remind you what's going on so
00:36 - the idea is that there is a canvas and
00:38 - the canvas has an x-axis and a y-axis
00:43 - but I'm thinking that canvas though it
00:46 - exists on the screen with that x-axis
00:48 - and y-axis I'm using it to visually
00:51 - represent something called the complex
00:53 - plane what do I mean by the complex
00:55 - plane while a complex number is a number
00:58 - written like a plus bi where I is an
01:01 - imaginary number or the square root of
01:03 - negative 1 there's you know think about
01:06 - that it's imaginary right what's the
01:08 - square root of negative 1 you're gonna
01:09 - be thinking for a very long time until
01:10 - you just decide like I can't come up
01:11 - with the answer so I'll just make up an
01:13 - imaginary number that is the answer
01:14 - called I so the all complex numbers have
01:18 - a real component that's the a and an
01:20 - imaginary component that's the B and so
01:23 - the x-axis represents a and the y-axis
01:26 - represents B and so the in the
01:29 - Mandelbrot set what happens in the
01:31 - Mandelbrot we're saying for every
01:32 - complex number C which equals a plus bi
01:36 - every complex number on this plane we
01:38 - want to test the function where Z of
01:42 - some iterative function so Z of n Zn
01:47 - plus 1 equals Zn the previous Z squared
01:50 - plus that complex number so if we start
01:55 - the first write Z sub 0 would be C and
01:58 - then Z sub 1 would be C squared plus C
02:02 - and then Z sub 2 would be C squared plus
02:05 - C squared plus C right this is the
02:07 - iterative process that's going to happen
02:09 - over and over again I mention all discs
02:11 - okay so now
02:14 - one thing that we need to know is how to
02:18 - take a complex number I'm doing this
02:20 - again because I think it's worth it a
02:21 - plus bi and square it so if we take a
02:24 - plus bi squared take a plus bi multiply
02:28 - by itself we get a squared plus a B I
02:33 - write a times a plus bi times a plus bi
02:37 - times a which is a bi plus bi squared so
02:45 - this turns out to be a squared plus a
02:47 - oops sorry plus 2 a B I plus B squared
02:54 - times I squared
02:55 - well I is the square root of negative 1
02:56 - so I squared is negative 1 so this is
02:59 - minus B squared and now we have a
03:01 - squared plus B squared minus B squared
03:05 - plus 2 a B I so this is now another
03:08 - complex number with a real component and
03:11 - an imaginary component and you can see
03:14 - this that math is happening in the code
03:17 - all the way down here so this is what's
03:22 - happening it's we're iterating over and
03:24 - over again and looking at the so a A's
03:28 - represents a squared B B represents B
03:30 - squared so the new complex number is a
03:33 - squared minus B squared plus that Plus
03:36 - see the real plus C a of C can see that
03:40 - a of C and then the B component is 2 a B
03:44 - plus y so x and y are remembering the
03:48 - previous a and B okay so that's what's
03:51 - happening with the Mandelbrot set and
03:52 - the whole point of the Mandelbrot is
03:53 - testing ok is the point going towards
03:56 - infinity or is the iterative process
03:58 - resulting infinity or is it resulting in
04:01 - a bounded number that doesn't tend
04:02 - toward Finity and my test to see if it's
04:04 - going to infinity is just essentially
04:06 - look at its distance from 0 a squared
04:09 - plus B squared is greater than
04:10 - arbitrarily 16 and typically you just
04:12 - couldn't check a 4 2 squared is 4 but
04:15 - you know you can kind of play around
04:16 - with this because what I'm doing is also
04:18 - mapping the number of iterations it
04:20 - takes to get to a certain color and so
04:21 - there's a variety of ways you could kind
04:23 - of approach this in here as a strict
04:25 - mathematical approach but I'm
04:27 - all over the place and trying different
04:28 - things so you can see doing that and
04:31 - then just setting a pixel color based on
04:33 - how many iterations there were and then
04:36 - we get this particular famous well-known
04:39 - pattern known as the Mandelbrot set so
04:41 - that's my recap of the Mandelbrot set
04:43 - you don't have to watch that previous
04:45 - video after call let's talk about what
04:48 - the Julius set is so the Julia set is
04:51 - actually something very specific and I'm
04:54 - going to go I'm going to use this Paul
04:57 - Bork site which has to do with this
04:59 - particular insane looking function Z to
05:02 - the fourth power the gap sorry that
05:04 - Julie said his name for a mathematician
05:05 - named Gaston Julia who is looking at
05:08 - this particular crazy polynomial
05:10 - expression but I'm going to look at kind
05:12 - of what is more conventionally known or
05:14 - thought of as the the Julia set itself
05:18 - which is actually a connected deeply to
05:24 - the Mandelbrot set so what you can see
05:27 - Julia said welcome thought of as like
05:28 - Mandelbrot dust these patterns that
05:31 - emerge out of these like pieces of the
05:33 - Mandelbrot set in a way and so there's a
05:35 - key difference in how the Julia set
05:37 - works the way that Julia set works is
05:41 - instead of C itself being related to the
05:49 - very pixel that you're iterating see in
05:53 - the Julia set is actually just a
05:55 - constant so Z sub 0 the first Z is equal
06:02 - to the complex number represented by the
06:04 - pixel but the thing that you add to it
06:08 - the C is actually just a constant so
06:10 - while Z sub 0 changes as you move along
06:13 - C always remains constant and I'll show
06:16 - you in the code I can actually just
06:17 - change two things in the code in two
06:19 - seconds and we'll see the Julia set so
06:21 - let me show you what I mean by that and
06:24 - somebody please make a version of a
06:25 - rainbow Julia set for me I'm going to do
06:27 - everything black and white so let me
06:29 - show you what I mean so fun thing I'm
06:30 - going to do is I'm gonna go to the
06:31 - Wikipedia page and I'm going to scroll
06:33 - down and you can see there are different
06:35 - results that you can get and let's pick
06:38 - this one like I want to get this
06:39 - particular result
06:40 - so look at this constant this is a
06:42 - complex number with both a real
06:45 - component and an imaginary component and
06:47 - it's a constant so what I want to change
06:50 - in the code is instead of that constant
06:55 - right each iterative process I take the
06:57 - the squared a squared minus B squared +
07:00 - 2 a B and add it to the particular
07:02 - complex number that I'm iterating but
07:04 - instead of that instead of that specific
07:06 - X&Y saved complex number I want to just
07:09 - use these so this the constant so this
07:13 - would be negative 0.7 something so I'm
07:16 - going to change this to that negative
07:17 - 0.7 something and this I'm going to
07:21 - change to negative 0.3 so now if I run
07:26 - this there we go look I've got the Julia
07:29 - set fractal with exactly the same code I
07:31 - didn't really change anything about it
07:33 - so that's the secret here the Julia set
07:35 - is really just a little bit of a trick
07:37 - in many ways in terms of all you care
07:39 - about is the visual pattern is just a
07:41 - trick to use a constant instead of the
07:43 - actual complex number that's associated
07:44 - with that pixel now what I really should
07:47 - do to improve what I'm doing here is
07:49 - make that constant a variable so what
07:51 - I'm going to do is I'm going to comment
07:54 - that out I'm going to go backwards and
07:57 - I'm going to here in side draw at the
07:58 - very top I'm going to add a see a
08:01 - referring to the a component of the
08:04 - complex constant and and I'm going to
08:07 - make a variable called CB and I'm going
08:10 - to get that for CA and I'm going to make
08:13 - that for a c.b.c that's going to be ca
08:17 - and that's going to be CB then what I'm
08:19 - going to do is I'm going to go down here
08:23 - and change this to CA and CB so now you
08:27 - can see there we go
08:28 - there is my this particular Julia set so
08:33 - now we have a mechanism by which I could
08:35 - kind of just keep going be like Oh
08:36 - interesting
08:37 - let's grab this particular number which
08:40 - you notice by the way this particular
08:42 - pattern only has has a 0 for the real
08:45 - component so I'm going to go and I'm
08:48 - going to just change this to 0 and this
08:51 - to 0.8
08:55 - and I'm gonna run that and you can see
08:57 - there's that pattern matches exactly
08:59 - what we just saw on Wikipedia I'm doing
09:02 - fine
09:02 - that'll be the thumbnail for this video
09:05 - so okay so this is interesting we're
09:09 - getting somewhere
09:10 - now let's say I want to animate this
09:12 - there's two things that I want to do in
09:14 - this video number one is I just want to
09:16 - make this animate and number two I want
09:19 - to look at how I might use a mouse over
09:23 - the Mandelbrot set itself and see the
09:25 - Julia set associated with each point on
09:27 - the Mandelbrot set itself back from an
09:29 - awkward cut I kind of went off at a
09:31 - misdirection into something that wasn't
09:32 - so important you can watch the the
09:34 - archive live version of this for all of
09:36 - the chatter about that but the only
09:38 - thing I'm going to do is actually right
09:39 - now let's just move this up here because
09:41 - technically I want to check if it's
09:42 - going toward infinity and with the Julia
09:44 - set I actually only need to check you
09:46 - know it's good enough just to check if
09:47 - it's greater than 4 but once I once I
09:50 - square those values I could check here
09:52 - to see if those values have gotten
09:53 - greater than 4 and then iterate to the
09:55 - next generation at the next generation
09:58 - and you can see here I've still got the
09:59 - Julia set going okay so there's a lot of
10:01 - things I could do here and I want to do
10:03 - a couple things the first thing I want
10:04 - to do is just make this animate so one
10:07 - thing I could do is in these constant
10:09 - values instead of having them oh before
10:12 - I get to that let me show you something
10:13 - so this is a particular Julia set where
10:16 - only the only the imaginary number which
10:21 - which has no real component the real
10:22 - number is 0 the imaginary number is 0.8
10:25 - but if I actually try to pick one where
10:28 - there is no imaginary component one
10:31 - thing you'll notice is that the the
10:35 - Julia set is always perfectly
10:36 - symmetrical if there is no imaginary
10:38 - component so we could keep trying
10:40 - different like values I don't know if
10:42 - I'll get something and you can see here
10:43 - is another perfectly symmetrical Julia
10:46 - set so if if the imaginary component is
10:48 - always 0 you will get perfect symmetry
10:50 - but one thing that I want to do is I
10:52 - want to just say let me map the mouse
10:54 - value which goes from between 0 and
10:56 - width to between like negative one and
10:58 - one Mouse x value and let me also map
11:01 - the mouse Y value which goes between 0
11:04 - and height to between
11:05 - negative one and one and now what I can
11:06 - do is you can see as I move the mouse
11:09 - around I am seeing all the different
11:11 - Julia sets now ultimately what I wanted
11:14 - to do is put the Mandelbrot set next to
11:16 - this is essentially the same thing so as
11:17 - I move the mouse over the Mandelbrot you
11:19 - can set you can see the Julia set next
11:21 - to it and maybe I'll leave that as
11:23 - somebody as an exercise to somebody you
11:25 - can see just on Paul Bork's site here
11:28 - this diagram is what I intended to do as
11:30 - I move the mouse over the Mandelbrot set
11:31 - you would then see the Julia set the
11:33 - corresponding Julia set the dust so to
11:35 - speak next to it but this is kind of a
11:37 - nice effect here and you can see
11:39 - something about this range of like
11:40 - negative one to one is kind of a nice
11:42 - range to use and I can try to get if I
11:45 - get to 0 where 0 along the y-axis would
11:49 - be here so these should be all the
11:51 - symmetrical ones but you can see I'm not
11:52 - exactly at zero but you can see if I'm
11:55 - at zero I've got the symmetrical one so
11:57 - you can see I can somebody could make a
11:59 - nice dancing gif I should add some music
12:02 - here I'll do that enough Bobby I just
12:04 - could do this in the middle of the video
12:05 - I don't care anymore
12:14 - Nancy Julia said ok so but what I want
12:19 - to show you what I think could be
12:20 - interesting to try is instead of having
12:23 - it be Mouse interactive or a really
12:25 - quick way that I could have those values
12:26 - in the Julia set adjust automatically as
12:28 - I could use a sine wave so what if I had
12:30 - an angle and set that equal to zero and
12:35 - then let me comment this out and then I
12:38 - say float ca equals sine of that angle
12:42 - and float CB I'm just going to make the
12:46 - imaginary component 0 for right now and
12:49 - I'm going to say oops and not a angle
12:51 - and then I'm gonna have that angle
12:52 - increase you know over time by some
12:57 - amount and you can see look what's
13:00 - happening now that it's oscillating
13:02 - between negative 1 and 1 so you almost
13:04 - have this like breathing Julia set let
13:06 - me zoom in on that a little bit
13:07 - we could this would be good for like
13:09 - meditation so the other thing I could do
13:16 - is I could oscillate only the imaginary
13:22 - component I could set the real component
13:24 - to zero and now you can see this sort of
13:27 - like oscillation happening here we'll
13:29 - sort of almost has this like left and
13:31 - right feel to it then what I could do is
13:33 - I could oscillate them both and have
13:35 - this one like kind of be it a different
13:38 - period I'll just multiply the angle by
13:39 - something and you can see what's
13:42 - happening we should have this kind of
13:44 - like infinite set of oscillating Julia
13:47 - fractals and I almost want I just want
13:49 - to sort of see like you can see it's
13:51 - like animating quite quickly I want to
13:53 - just sort of see like how far I can push
13:55 - this if I up the resolution a bit if
13:57 - processing performance-wise is still
13:59 - good I'm going to go to like a thousand
14:01 - by eight hundred so you can see
14:05 - performance wise it's starting to slow
14:06 - down a little bit but I'm still able to
14:08 - get pretty fast performance out of pixel
14:10 - operations so I will make a JavaScript
14:12 - version of this but you'll see the
14:13 - canvas pixel operations in JavaScript
14:15 - without doing something like WebGL magic
14:17 - are going to be much much slower okay so
14:21 - I think so let's do one more thing so
14:24 - let me put this back one thing that I
14:25 - think would be useful is we need this
14:27 - Julia set to be a rainbow so I'm going
14:29 - to leave the exercise of putting a
14:30 - Mandelbrot set and a Julia set next to
14:32 - each other for somebody on the internet
14:33 - to do and share with me or maybe I'll
14:35 - just post the code to that go with this
14:36 - video and this should now say Julia set
14:38 - but what I want to do is change the
14:41 - color mode to HSB so instead of reading
14:44 - the red green and blue values of a color
14:46 - I'm going to make colors based on hue
14:50 - saturation and brightness so what I'm
14:52 - going to do down here is when I make the
14:54 - color and since I have this sort of
14:58 - crazy formula based on the number of
15:01 - iterations sorry let me go over here and
15:03 - grab this I'm just going to put this in
15:05 - a separate variable called H for hue
15:08 - then we make a color hue with a
15:10 - saturation and brightness of 255 that's
15:14 - why does it not like H duplicate
15:18 - variable H I use that for something else
15:19 - hu for he
15:21 - okay let me run this ah there we go
15:24 - there's my rainbow Julia set finally and
15:28 - you know I could potentially I don't
15:30 - know you know we could play with these
15:31 - values a little bit - or the brightness
15:33 - - actually we I don't know why even
15:35 - consider playing with the saturation and
15:37 - we can say here's my lovely rainbow
15:40 - julia said now oh i this this would be a
15:44 - good this is a good screenshot but i
15:46 - need to pick a good
15:49 - so let's look let's go back to Wikipedia
15:50 - I'm in this video let's look let's look
15:52 - for this 1.8 this one looks kind of nice
15:55 - right point eight point one five six so
15:59 - zero point eight zero point zero point
16:03 - one five six ooh I didn't get that right
16:08 - something's negative probably own
16:10 - egative point eight negative point eight
16:13 - there we go ooh the how lovely so this
16:17 - will be my do this with my thumbnail for
16:21 - this video I shouldn't be deciding to do
16:23 - that after the video but you're watching
16:25 - me make the thumbnail in the video
16:27 - whatever um okay uh and that's it I
16:32 - think for this video here's the thing I
16:34 - would one thing that I'm not doing is
16:36 - the zooming so this would be an
16:37 - interesting exercise for you guys the
16:39 - range is defined in this particular code
16:42 - by these values W and H so for example
16:46 - if I were to change this to two you're
16:50 - going to see I'm quite zoomed in on it
16:52 - so that is also something I could use to
16:54 - animate for example what if I said the
16:57 - absolute value of sine of that angle you
17:00 - know times five this would sort of zoom
17:06 - in and out so you can see here I am
17:08 - zooming into as I'm zooming directly
17:10 - into the center which might which you
17:12 - can see like kind of zooms into
17:14 - blackness but you could probably figure
17:17 - out like where's the sort of point you
17:18 - want to zoom also at a certain point you
17:21 - know these numbers are getting smaller
17:23 - and smaller and smaller and smaller and
17:24 - smaller is the degree of accuracy I'm
17:26 - gonna get with floating point math won't
17:27 - work so well but I encourage you to sort
17:29 - of explore the zooming on your own
17:31 - and sort of see how that and you can see
17:34 - how it's like really slowing down also
17:36 - as it gets
17:36 - computation wise as it gets closer and
17:38 - closer in but that's something you can
17:40 - also explore with and play and I could
17:42 - even put this back this will be my final
17:46 - move here that we can sort of see it's
17:49 - zooming as those values are changing as
17:52 - well so this is the full finished
17:53 - version thanks for watching this Julia
17:55 - set tutorial I hope that you learned
17:56 - something I hope I didn't get too much
17:58 - wrong I usually get quite a few things
17:59 - wrong but I'll hear from the internet
18:01 - with Corrections and make them again in
18:02 - a future video thanks very much
18:04 - everybody
18:04 - good bye