00:00 - in the previous video I used node and a
00:02 - node package called Express to make a
00:04 - very simple web server all it does is it
00:06 - spins up a server listening on port 3000
00:09 - and if I run it it looks it serves up
00:15 - anything that's in this directory called
00:17 - website ok and in that directory called
00:20 - website is a little index.html file it
00:22 - says this and now I see that in the web
00:25 - page in the web page didn't make sense
00:27 - ok so what do I want to add to it the
00:30 - goal of this video series is to make an
00:33 - API now there are a lot of different
00:35 - ways and styles and flavors and designs
00:38 - and types of ways you could make an API
00:41 - I'm sure and the kind of API I'm to show
00:43 - you is a restful api and i like to call
00:46 - it i like the idea of it being restful
00:47 - because i want it to be relaxing and
00:49 - enjoyable a soothing soothing api but
00:53 - rest is like a sensually like a style so
00:57 - to speak of how it's a broader term it
01:01 - stands for representational straight
01:02 - state transference your link to the
01:04 - wikipedia page and you can read all
01:06 - about it but it's really a style by
01:08 - which users of the api can make get
01:11 - requests and receive information back
01:15 - from the API so and let me try to
01:17 - describe kind of the basics of how it
01:19 - looks and works so i'm gonna erase all
01:21 - of my diagrams from some other previous
01:23 - video and let's let's think about what's
01:25 - happening so let's say you have a deer
01:28 - making a API about flowers think it's
01:32 - about rainbows think what about rainbows
01:34 - but flowers I'm gonna use flowers right
01:35 - now flowers API dot-com so HTTP this is
01:43 - your website your webserver your domain
01:45 - all that stuff you might go to flowers
01:48 - API comm and you will see the index.html
01:50 - page that's there that's the web server
01:52 - bees written we've written you might go
01:55 - and say like slash about and maybe
01:59 - actually you have in your website
02:01 - directory of your public directory a
02:02 - folder called about with another
02:04 - index.html file and when you go there
02:06 - you see that one so this idea of paths
02:08 - with slashes is something that you
02:11 - typically see to
02:13 - through directories of a website however
02:17 - these slashes and the things in here
02:21 - don't just have to be directories they
02:23 - can actually signify a route so for
02:26 - example what if I went to a Minnesota
02:29 - call it flip flour API comm slash search
02:37 - sunflower right what if I went to this
02:41 - and this isn't actually of directories
02:44 - these are these are commands that I am
02:47 - issuing to the API I'm saying search for
02:50 - this particular flower called sunflower
02:52 - and I want to get back maybe some big
02:55 - JSON fudge all this information about
02:59 - sunflowers so this is an idea of a route
03:02 - and when you build an API you might
03:04 - build different routes for different
03:06 - kinds of ways of accessing the data you
03:08 - might make a route for getting all the
03:11 - data or for searching for one piece of
03:12 - the data or a route that signifies I
03:14 - want all the data but I want it sorted
03:16 - in this manner or I want all the data
03:18 - but only if the data starts with the
03:21 - letter P for example so there's a lot of
03:24 - ways you can use routes so now here in
03:27 - the code this is not the code I need to
03:29 - start to a manage how those routes are
03:32 - handled so right here I'm gonna start
03:35 - adding that code so I'm gonna add a
03:37 - bunch of carriage returns and right here
03:38 - I'm going to set up a route when a user
03:41 - goes to one of these routes or goes to
03:44 - in the browser types in a URL or clicks
03:46 - on a link to a URL they are making
03:48 - something called a get request please
03:51 - may have something from you
03:54 - server can I get stuff back and you will
03:57 - get images there's a dog barking images
04:01 - HTML files CSS all that sort of thing
04:04 - so if you want to handle a get request
04:05 - that goes to a specific route I could
04:08 - say app get o get /im that's my train of
04:17 - thought let's just we're thinking about
04:19 - flowers right flower and then I need a
04:24 - callback
04:26 - send flour send flour all functions
04:31 - should be called seven flower sunflowers
04:34 - okay so I'm gonna write send flower so
04:37 - the idea here is I'm now writing the
04:39 - code if any user of this API user
04:42 - meaning oh not necessarily a person but
04:44 - a web browser some client that's gonna
04:46 - connect to it goes to slash flower then
04:49 - this function send flowers should be
04:51 - executed
04:52 - that's the callback now the send flower
04:55 - has two arguments associated with it a
04:57 - request and a response every web
05:02 - transaction so to speak when I go and
05:04 - type you know google.com or rainbow
05:08 - something something calm I'm making a
05:10 - request to the server so all the
05:13 - information about me is in that variable
05:15 - called request the server then sends
05:17 - back a response all the information
05:20 - about the server's response is in that
05:22 - variable response and I'm using this
05:24 - idea of all the information very loosely
05:25 - information Dave you know in request you
05:28 - could find like what was the operating
05:30 - system what was the browser what are the
05:31 - headers well you know there you're gonna
05:33 - see like we're there any parameters sent
05:35 - also the response has things like ah I
05:38 - can send back some data so what I'm
05:40 - gonna do is I'm going to now say right
05:42 - here response send I love flowers too so
05:49 - if the user goes to slash flower rather
05:53 - than look for a directory of HTML CSS
05:56 - JavaScript files along that path this is
05:58 - a route that I'm gonna handle
06:00 - programmatically and I'm gonna say I
06:01 - love flowers too so let's hit refresh
06:05 - the server is still running I am now up
06:07 - here going to change this to say go to
06:09 - the route slash flower and I see I love
06:12 - flowers too now there's no HTML page
06:15 - there's nothing there's just code and
06:18 - the response sent back the response okay
06:22 - so this is part one but remember this
06:24 - idea of like searching right the idea of
06:27 - using an API to search what I want to do
06:29 - is have a well there's a lot of things I
06:32 - can do but something at least to get
06:34 - started with is what if I were to sir
06:38 - at a second a second toke the second I
06:43 - don't what to call it a second element
06:45 - to this route search / sunflower but
06:49 - rather than come back over here rather
06:54 - than say / search / sunflower what I
07:01 - actually want to handle is not the
07:04 - specific route I want if they go to
07:06 - search
07:07 - I then want the second element to be a
07:09 - variable so to speak something that
07:11 - changes every time so here I'm going to
07:14 - say : flower so that indicates that this
07:18 - search that that search is the route
07:22 - followed by something that the user
07:24 - enters and that will be here found in
07:28 - the request so in other words I'm now
07:30 - going to go to search / sunflower and
07:36 - you're gonna see it still says I love
07:39 - flowers - that's what I'm sending back
07:41 - but now I can do something more I can
07:44 - say there's some data associated with
07:48 - this request something came in beyond
07:50 - just search some type of flower I can
07:53 - say request dot params there are
07:57 - parameters flower is a parameter and now
08:00 - I can say here send the response back I
08:04 - love data dot data dot flower - so I'm
08:14 - kind of I don't like this amount of
08:15 - space that I have here I'm gonna fix
08:18 - this and make this a little smaller ah
08:19 - no no picture small maybe this will get
08:22 - edited for flow okay so here you can see
08:28 - that in it I in the response I'm
08:31 - actually gonna send back something that
08:33 - was sent now what i'm doing here has no
08:35 - there's no point to it i'm just showing
08:36 - you the pieces of how things work so we
08:38 - can get to the place where it has a
08:39 - point so let's see now if this works if
08:43 - i refresh here I love sunflower - and I
08:46 - can put Daisy I love Daisy - and I can
08:50 - put rainbow
08:51 - doesn't have to be a flower and I can
08:52 - put so in other words there's a round
08:54 - trip happening I'm making a get request
08:57 - with this route search / something the
09:01 - server gets that something as a
09:04 - parameter part of the request and looks
09:07 - at it puts it in this variable data then
09:09 - pulls out farther so there could be a
09:11 - lot of parameters so I can add another
09:13 - one I could say slash num and then I can
09:19 - say var num equals data dot num and I
09:23 - can then have I was gonna do a for loop
09:26 - or something and have it say I love Dana
09:28 - dot flower so many times let's just do
09:31 - that that's sort of silly but why not so
09:33 - I can say response equals this and then
09:36 - for VAR I equals 0 I is less than num i
09:41 - + + response you can't call this
09:45 - response a reply I call it reply + equal
09:50 - this and then I'm gonna send back that
09:55 - reply right so I've added a little logic
09:59 - so based on whatever number I get in I
10:01 - do that a bunch of times and now we can
10:03 - see I'm getting both a flower and a
10:05 - number and if I go search rainbow 5 I
10:09 - get it if I do it / 50 I get it 50 times
10:13 - right so the reply is now based on what
10:17 - has been sent into the server so this is
10:20 - the basic idea of how a route works with
10:27 - a get request now of course there's
10:28 - something later you're gonna see there's
10:30 - also a post request I can say app post
10:32 - and we're gonna need that for this
10:33 - example that I hope to ultimately build
10:35 - but in the next example what I want is
10:38 - what the next video what I'm gonna do is
10:39 - add a little bit of persistence to this
10:41 - so what I want to do is allow the create
10:45 - a set of routes where the user can
10:47 - retrieve data and then contribute to
10:49 - that data as well as well so we'll see
10:52 - that in the next video