00:03 - okay now that that first video is out of
00:05 - the way we're back and we're ready to
00:07 - deal with the Practical side of particle
00:09 - systems and that practical side that
00:10 - we're going to start with is an array
00:12 - list what is an array list well before
00:14 - we even get to an what is an array list
00:16 - let's talk about why we might want an
00:18 - array list okay so you have a particle
00:21 - object now you want to have many
00:24 - particle
00:25 - objects your first thing you're going to
00:26 - do is say aha I used to declare a
00:29 - variable particle P now I'm going to
00:31 - declare an array of particles so I'm
00:33 - going to say I'm going to come over here
00:34 - where I don't really have any room to
00:35 - stand but I'm going to say ah particle
00:38 - brackets uh
00:40 - particles equals new
00:44 - particle 100 semicolon right what have
00:47 - we written out here this is an array
00:49 - declaration we have a type particle the
00:52 - brackets indicate it's going to be an
00:54 - array our name is particles and then we
00:56 - have 100 elements 100 particles in that
00:58 - array this is what we're used to then we
01:01 - can Loop through that array and we can
01:02 - draw all them and update them and do all
01:04 - sorts of things great the issue is what
01:08 - if we want to start with zero particles
01:10 - and then add one then add one then add
01:11 - one then delete them and delete one we
01:13 - could kind of do that with an array we
01:15 - could have a variable to keep track of
01:16 - what part of the array are we using I's
01:18 - use this section we could reuse elements
01:20 - there's also even in processing if you
01:22 - look through the processing uh
01:24 - documentation there's
01:25 - append contract there's a bunch of
01:27 - functions that seem to like add and
01:29 - subtract stuff from the array and the
01:31 - syntax is kind of weird and it's
01:32 - confusing and then you know it's just
01:35 - not a it's not a place we want to go to
01:37 - right now the place we want to go to is
01:39 - using an array list an array list is
01:42 - going to allow us to have this
01:43 - essentially this like empty bucket this
01:46 - empty bucket where we can put particles
01:47 - in we can take particles out we can
01:49 - manage our system of objects it's going
01:52 - to be great so how do we know how do we
01:55 - learn about what an array list is okay
01:57 - so there's a couple places that we could
01:58 - go to just just that that I think I
02:00 - should mention before we start kind of
02:01 - mapping out the parts of what an array
02:03 - list is that we need to know so number
02:05 - one is processing okay so an array list
02:08 - is not really something that is part of
02:10 - processing an arrayas is a class that's
02:12 - part of java but it's so commonly used
02:15 - that it's that that you will find it
02:17 - documented on the processing website so
02:19 - you will find a a documentation page
02:21 - with a little bit of an examples and it
02:23 - says in the description and array list
02:25 - stores a variable number of objects and
02:27 - this is great so we could find out some
02:28 - initial information here and you can see
02:30 - ah there's a size method an add method a
02:33 - get a remove and in fact those are the
02:35 - methods that we're going to want so for
02:38 - the kind of easygoing introduction to
02:40 - the concept of an array list this
02:42 - processing reference page is going to be
02:44 - perfect for us however um it I should
02:47 - note that where it really comes from is
02:50 - from java so there is this kind of
02:52 - balloon giant like read all this stuff
02:54 - about what an array list is this is the
02:56 - Java reference page and you can see look
02:58 - at all of these methods add at all clone
03:01 - ensure capacity get is empty remove
03:04 - remove range so there's a huge amount of
03:06 - things that an a rail list can do but
03:09 - what we want to look at is a kind of
03:11 - subset of that we're going to start by
03:13 - looking at just a small list of methods
03:16 - in an array list um so you know what I'm
03:18 - just forget about it we don't even need
03:20 - this
03:21 - anymore we want to make sure we are
03:23 - comfortable with this idea of adding to
03:25 - an array list we want to sometimes get
03:29 - things out of an array list sometimes we
03:31 - want to remove things from an array list
03:34 - and sometimes we need to know the size
03:37 - of the array
03:38 - list so this can kind of be our list of
03:41 - methods that we're going to need to feel
03:43 - comfortable with in order to program
03:45 - this particle system simulation within
03:47 - Ray list hooray
03:50 - okay low energy day low energy day okay
03:54 - um don't fall asleep wake up okay uh all
03:59 - right so how do we even
04:01 - start okay how do we even start let's
04:03 - say we we're assuming the
04:07 - existence of a class called
04:10 - particle so this class called particle
04:13 - we assume exists so we're going to make
04:16 - an array list with particle objects in
04:18 - it now there's some funny bit of syntax
04:20 - here that's I want to say new but I
04:23 - think it's years old at this point it
04:24 - just it feels new because when I first
04:26 - started working with array list it
04:27 - didn't exist but when we declare an
04:30 - array list I'm going to declare an array
04:31 - list over here I'm going say hey I'm
04:33 - going to have an array
04:35 - list and I'm going to call it
04:40 - particles okay so here's the thing about
04:42 - this declaration one of the things about
04:44 - array list is they are it's a general
04:46 - purpose bucket that you can put any kind
04:48 - of objects you want to in I could put
04:50 - some particles in and some movers in and
04:51 - some P fonts in a couple P images and I
04:53 - could just start putting objects in
04:54 - there but this is not typically how you
04:56 - use an array list typically use an array
04:59 - list to collect a bunch of the same
05:01 - kinds of objects and in our case this is
05:03 - exactly what we're going to do we know
05:05 - that this array list that we're about to
05:07 - make we're only ever going to put
05:09 - particle objects in it so we can specify
05:12 - in advance at the moment that we're
05:13 - going to create this array list called
05:15 - particles that what it's Our intention
05:17 - to put particle objects in it this is
05:19 - called generics the syntax is called
05:21 - generics and the way that we do that I'm
05:24 - like standing in the strangest way ever
05:27 - is by use of the less than and greater
05:29 - than signs and we put we put the type in
05:33 - in in in between those signs so we're
05:35 - saying I'm going to have an array list
05:36 - it's going to be full of particle
05:37 - objects and we're going to call it
05:39 - particles now just for the purpose of
05:41 - this demonstration a it's going to allow
05:43 - me to write less things on the board but
05:45 - also to emphasize remember this is your
05:47 - variable name it can be anything you
05:49 - want and often it is confusing I have an
05:51 - array list with particle objects I'm
05:53 - calling a particles and I get a particle
05:55 - what's what so we're going to have an
05:56 - array list of with particle objects in
05:59 - it I'm going to call it just
06:01 - a so we're not done anytime that you
06:04 - have a variable right anytime that you
06:06 - have an object you need to declare the
06:08 - object and you need to initialize that
06:09 - object you initialize an array list by
06:11 - calling the Constructor just like you
06:12 - say particle P equals new particle we're
06:15 - now going to say array list a equals new
06:18 - array list and I could do that in one
06:20 - line of code but just to demonstrate
06:22 - here on the board I'm going to say a
06:23 - equals new array
06:26 - list and this is another moment where I
06:29 - need to
06:30 - specify what goes in it a is a new array
06:34 - list with particle objects in it so this
06:38 - is all we need this is the beginnings of
06:40 - what we need we need to declare a
06:42 - variable of type array list say what
06:44 - we're going to put in the array list and
06:46 - then we need to call the Constructor to
06:48 - have this empty bucket now that we have
06:50 - this empty bucket we are
06:52 - golden we can start using add get remove
06:56 - size we can do all of these things and
06:58 - one of the first things we might do is
07:00 - just say
07:01 - hey let's
07:03 - add a new particle object into our array
07:07 - list we can do this at any point we
07:09 - could do this when we click the mouse we
07:10 - could do it in setup we could do it over
07:12 - and over again in draw we can add
07:14 - particles to that array
07:16 - list and okay so boy there's a lot of
07:20 - stuff here and we've been seven minutes
07:22 - this is going to be everything's fine
07:24 - I'm need to edit this part out okay I'm
07:26 - just trying to map out in my brain where
07:27 - we're going with this okay where are we
07:30 - we let's go over to our example for a
07:35 - sec okay so here we are and we have our
07:38 - uh particle example before with a single
07:41 - particle now what we want to do is add
07:43 - an array list to this example so that we
07:45 - could eventually have multiple particles
07:47 - so instead of the single particle
07:49 - variable at the
07:51 - top we want to type in an array list
07:54 - called particles instead of initializing
07:57 - that single particle we are going to
07:59 - initial uze an array list that will have
08:02 - particle objects in it and and this is
08:07 - no longer uh relevant but we'll we'll
08:09 - come back to it in a second so here we
08:11 - go now our program has an array list but
08:14 - it's empty there's nothing in it there's
08:16 - no particles in it so we could say aha
08:19 - let's add particles in it maybe we want
08:20 - to start with 10 particles how would we
08:22 - start with 10 well how would we even
08:24 - have one we know the add
08:27 - method allows us to add a particle
08:30 - object so we can call add on the array
08:32 - list and put in any object reference a
08:35 - new particle in this case and put that
08:37 - in the array list if we want to add 10 I
08:39 - could just say I don't know let's just
08:41 - have a little
08:45 - Loop and you can see now there's 10
08:47 - particles in the array list so now how
08:50 - do we update and display all those array
08:54 - all those particles that are in the
08:55 - array list okay so now we need to go
08:57 - back we need another function for that
08:59 - all we know now is how to create the
09:01 - array list and how to add things to it
09:03 - now we need to access the elements of
09:04 - that array list okay so to access the
09:07 - elements of that array list okay we've
09:08 - done add get is going to do that for
09:11 - us get is a way of getting objects from
09:14 - the array list so that we can access
09:16 - them and call methods on them so how do
09:18 - we do that for number one is I could say
09:19 - hey a our our particle system by the way
09:22 - over here is called a in the example
09:23 - we're building is called particles and
09:25 - that's fine because we can make up any
09:26 - variable names we want a.get
09:31 - zero this would get the zero element out
09:36 - of that array list what do I mean by
09:37 - zero element well remember an array is a
09:41 - list of elements a regular array which
09:43 - each element has an index and if we had
09:45 - an a regular array called you know my
09:49 - array we would access the first element
09:52 - by its index with
09:54 - brackets brackets we put zero in between
09:57 - the brackets and we're talking about
09:58 - this element right here well the get
10:01 - function in the array list does exactly
10:03 - the same thing as the brackets do with a
10:04 - regular array so what are we doing what
10:07 - is get actually get actually returns for
10:09 - us a reference to an array to it so to
10:12 - it to that object in that spot okay
10:16 - right so particle P equals a. get zero
10:18 - this gives us that first particle out of
10:20 - the array list so that's kind of getting
10:22 - us closer and we can go over here to
10:24 - this example and we could say all right
10:26 - let's just confirm that that actually
10:28 - works I'm going to say particle
10:31 - P equals
10:33 - particles. getet
10:36 - 0o p. update p. display and if we run
10:40 - this we can see great there's that
10:42 - there's that first particle and I could
10:44 - say hey there were 10 in there let's get
10:46 - the fifth one our index number four hey
10:48 - there's that one so clearly this works
10:51 - we have an array list we can put stuff
10:53 - in it we can get stuff out of it and we
10:55 - can do stuff to it but obviously we need
10:56 - to do this with a loop right we want to
10:58 - say for every particle in the array list
11:01 - update and display for every particle in
11:04 - the array list update and display for
11:07 - every particle in the array list update
11:09 - and display how do we say that well one
11:11 - this is a moment if you haven't used
11:13 - this kind of loop before in processing
11:15 - going to erase all this because this is
11:18 - like a thrilling moment in my life when
11:21 - I discovered you know if you ever
11:22 - programmed in all these other languages
11:24 - you have all these four each Loops which
11:26 - seem really convenient you don't need to
11:27 - count I and index
11:29 - you can do that in processing you
11:31 - actually do this with regular arrays or
11:32 - with an array list this is just a nice
11:34 - moment to see that this kind of loop
11:36 - works we want to say
11:39 - for every
11:42 - particle P colon in the array list in
11:45 - this case
11:48 - a
11:49 - update and also display so if you
11:53 - haven't seen a loop like this before
11:55 - here it is this is called an enhanced
11:57 - for Loop what it's doing is saying there
12:00 - is a list called a it has particle
12:02 - objects in it we can just this Loop says
12:05 - whatever's in there access every single
12:07 - one and update them and so we can put
12:10 - this into our program over here and we
12:13 - can
12:16 - say
12:18 - for every particle sorry for every
12:21 - particle p in the array list
12:24 - particles p. update p. display
12:30 - and here we go boom we see this like
12:33 - little mini explosion right at the
12:35 - beginning it's 10 of 10 particles let's
12:38 - see if we can make that happen again I
12:39 - don't know why we need to we want to see
12:40 - it again poof okay so we can see that
12:43 - this is working this is very exciting we
12:45 - have a list we've added 10 particles to
12:47 - that list and now we know how to access
12:49 - all 10 and call methods on them update
12:51 - display update and display we see them
12:53 - all now they're gone when they're gone
12:55 - we should really delete them from the
12:57 - list so that's the next step I'm going
12:59 - to actually stop this video right here
13:01 - we're going to the next step is going to
13:03 - be deleting elements from that array
13:05 - list and once we have that then we're
13:08 - going to have to look at hey we don't
13:10 - what we want to do is all this gobbly
13:12 - good code that's in our setup and draw
13:14 - this is all actually a could be code
13:16 - that's in a system class so the particle
13:19 - class talks about an individual object
13:21 - the system class manages the list of
13:23 - those objects so we're going to get to
13:25 - all of that so what I would say to you
13:27 - is if you're following along find that
13:29 - example you had with your single object
13:31 - moving and try to make an array list of
13:33 - them try to do things like maybe add to
13:34 - the array list when you click the mouse
13:37 - uh you know see if you can start with
13:38 - nothing then add 20 then add one see if
13:40 - you can kind of add to it in a in a with
13:43 - some logic that happens over time by
13:45 - some means okay so um this is the end of
13:47 - this
13:49 - video goodbye