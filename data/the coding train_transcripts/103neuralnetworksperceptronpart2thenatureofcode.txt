00:01 - hello welcome to a followup on my
00:05 - previous perceptron coding challenge so
00:08 - if you happen to watch the previous one
00:09 - and if you hadn't you probably should go
00:11 - back and watch it Link in the
00:12 - description I created a simple
00:14 - perceptron a perceptron is a model of a
00:16 - single neuron that receives inputs and
00:20 - then produces an output and this is a
00:22 - very simple scenario where the output is
00:24 - only trying to guess whether a point is
00:27 - on one side of the line or the other is
00:29 - it above the line or below this line so
00:31 - in this follow-up video what I would
00:33 - like to do is really just refine this
00:35 - example nothing really about the
00:36 - mechanics of the perceptron itself but
00:38 - make this example a bit more
00:40 - sophisticated and allow for some more
00:42 - cre hopefully some possibly some more
00:44 - creative uh
00:46 - possibilities so um first thing I I got
00:50 - a bunch of things I'm going to do I
00:51 - would list them all but I can't remember
00:52 - what they are so I'm just going to tell
00:53 - you what the first thing is the first
00:55 - thing is let me come over here to the
00:56 - Whiteboard um so what I did with the
00:59 - first perception was just used the raw
01:02 - pixel coordinates of the processing
01:05 - window I can't remember what size it was
01:07 - but you know it was like a 640 by 480
01:09 - window and 0 0 is over here and you know
01:12 - this turned out to be the line and I was
01:13 - looking for points over here but the
01:16 - idea of using a neural network based
01:19 - system is typically to get some kind of
01:22 - data input that's not based on pixels so
01:26 - what I think that I want to do here is
01:29 - uh just redo this
01:31 - example and
01:34 - consider a cartisian plane with 0 0 in
01:38 - the center and Y pointing up so whereas
01:43 - this is zero and this is 480 down here
01:46 - you know 480 would be kind of up here so
01:49 - I would like to just redo this whole
01:50 - example and then the line y equal x we
01:53 - should see as appearing like this the
01:56 - reason why I want to do this is the next
01:58 - thing that I'm going to do is create a
02:00 - perceptron that will learn any uh
02:02 - division of data points so it doesn't
02:05 - just have to be a DAT a division that's
02:07 - slicing it right down the middle so
02:09 - first let's make that change okay so how
02:11 - do I make that change
02:13 - H well where do I make the points I
02:16 - think I had this I had this point object
02:19 - and the point object makes a random
02:22 - point a random point with a random x
02:24 - value and a random y-value what I'm
02:25 - going to do and I think you know I'm
02:27 - going to just make these now random
02:28 - values between negative 1 and
02:31 - onega 1 and one okay so the random
02:34 - values are between negative 1 and one in
02:36 - in some ways that's it done aha but now
02:40 - right before I show them what I want to
02:42 - do is I'm going to say PX for like pixel
02:45 - X and I'm going to Map X which has a
02:47 - range between negative 1 and one to zero
02:50 - and width map is a built-in function in
02:53 - processing that takes a value with one
02:54 - range and Maps it to another it's very
02:56 - simple math and I actually have a whole
02:57 - other video which I will try to link to
02:59 - that goes over the map function and Y I
03:02 - can do the same exact thing so let's
03:05 - look at this ah except for with
03:08 - Y right what I want is
03:12 - why when the Y value is high I want it
03:16 - to be low in terms of you know when it's
03:19 - high I want it to be it's flipped right
03:22 - Z 0 instead of positive pointing down
03:24 - and points up so I want to reverse that
03:27 - mapping and the map function does that
03:29 - for you by saying hey when Y is negative
03:31 - 1 it should be at the bottom and when Y
03:33 - is one that's a nicer way to say it it
03:35 - should be at the top zero okay now what
03:37 - happens if I were just to run this uh
03:40 - kind of looks like a whole lot of
03:41 - nonsense right didn't seem to work well
03:43 - first of all I forgot I forgot a major
03:46 - thing I did the mapping but I'm still
03:48 - drawing the ellipse at those NE at those
03:50 - values I'm going to say PX
03:53 - py okay good look at this there are all
03:56 - the points and you can see how they're
03:58 - divided but the line is drawn in the
04:02 - wrong place so where do I draw that line
04:05 - so I'm just going to change the
04:06 - coordinates I'm going to hardcode new
04:07 - coordinates for the line we'll deal with
04:09 - that later but um so I'm going to say uh
04:12 - uh Z comma height to width comma zero
04:17 - and we should see there we go there are
04:20 - all the points now what's going on
04:22 - before I had this thing in it in this
04:25 - program where I would draw a red or
04:29 - green ellipse whether or not the
04:31 - perceptron had guessed correctly um and
04:34 - that's not working anymore because I am
04:37 - not doing the mapping anymore so I need
04:40 - to
04:42 - also just take the same exact math and
04:45 - probably I should package that into a
04:47 - function or make a part oh you know what
04:48 - I should do I should make aha the point
04:52 - object should just have a function
04:54 - that's
04:55 - called get uh get pixel X is a little
05:00 - bit of an awkward naming get pixel y
05:04 - let's just call it forget about pixel X
05:07 - and pixel y so I'm just going to
05:09 - calculate these on the fly whenever I
05:11 - need them and pixel X will do this
05:15 - return that mapping and pixel y will
05:21 - return that other mapping there we go
05:24 - and then I can just get those values
05:27 - here and get those values here here this
05:30 - should be the same but at least I took
05:33 - that mapping and put it into a separate
05:35 - function that way when I need it here I
05:37 - can say pt. pixel X and point. pixel y
05:44 - so rather than draw the ellipse at that
05:47 - points X and Y I can trigger those pixel
05:50 - X and pixel y functions oh I like that
05:52 - that was a nice little uh nice little
05:54 - addition I had there this is exactly the
05:56 - same program the only thing that's
05:58 - different is is uh the points now live
06:02 - in a sort of traditional cartisian plane
06:05 - and then I'm mapping those points on
06:07 - into the pixel space when I want to draw
06:09 - them great so that's step one of this
06:11 - follow-up video complete let's do step
06:14 - two so what is step two I want to
06:19 - change um what I want to change here is
06:22 - this if x is greater than y I want to be
06:26 - able to have let's come over here any
06:31 - particular uh function so I could say y
06:34 - =
06:36 - 3x
06:37 - + uh or you know plus two right that
06:41 - would mean if x is
06:45 - zero then if x is zero then Y is going
06:49 - to be at two if x is one y is going to
06:53 - be at five so you can see this is that
06:57 - particular line so I want to be able to
06:59 - train the perceptron to recognize this
07:02 - versus this and I want to be able to
07:04 - change this formula I can make it -2X -
07:07 - 3.7 I want to be able to have any
07:10 - generic uh formula for a line work with
07:13 - this example so let's add that into the
07:17 - code so I think the easiest thing for me
07:19 - to do and I'm just going to put it in
07:21 - this tab is to write a function I'm
07:22 - going to call it it's going to return a
07:24 - float and I'm actually just going to
07:25 - call it f is that like a terrible thing
07:27 - to do F of X being the function for I
07:31 - maybe I'll call this like line whatever
07:33 - I'm going to call it f ofx and I'm going
07:36 - to say return what did I say 3 3 * x + 2
07:42 - so this function basically represents
07:44 - the formula for the line and I'm going
07:47 - to say y = m MX plus b right that's the
07:51 - formula for a line we've seen this in
07:54 - other so funny how all these examples
07:56 - have this like two-dimensional space
07:57 - with a line in it because this is the
07:58 - simplest way way to start working with
08:00 - data and visualizing that data but
08:02 - ultimately as I get further along in
08:04 - these machine learning examples we're
08:06 - going to have these you know end
08:07 - dimensional spaces that we can't even
08:09 - fathom or visualize
08:10 - okay okay so um now the one thing that's
08:15 - a little bit of an issue with this is my
08:17 - mapping is between negative - 1 and one
08:20 - and negative 1 and one I want to make
08:21 - sure the line isn't kind of off and out
08:24 - of our view so what I'm actually going
08:26 - to do is I'm going to have this be Z 0.3
08:30 - * x + 0. again I could have changed the
08:33 - mapping between -10 and 10 but I kind of
08:35 - like this idea of between 1 and 1 for
08:37 - whatever reason so I'm going to change
08:38 - it to that and now what I'm going to do
08:41 - I at least just want to draw that line
08:42 - so I'm actually not going to change any
08:44 - of the code in this example I'm just
08:45 - going to see can I draw that line so
08:48 - this is where I previously drew the line
08:50 - so what I want to do is I want to draw a
08:52 - line
08:55 - from NE from where I want to draw I want
08:58 - to get the Y value for when X is Z when
09:03 - X is Nega 1 and the Y value for when X
09:06 - is one and then I can draw a line
09:08 - between those two points so okay so I'm
09:11 - going to say -1 F so let's I'm just
09:16 - going to say x = -1 Y = F
09:20 - ofx this is X1
09:24 - y1 and then the second point is
09:30 - uh X = positive1 and Y = F of X2 Y2 is f
09:36 - of X2 so I'm going to draw a line from
09:39 - X1 y1 to X2 Y2 and you know this is a
09:42 - perhaps a very long- winded way of
09:45 - writing this but just to see what I'm
09:47 - using is that formula for a line to get
09:49 - the corresponding corresponding y to a
09:53 - certain X okay let me run this uh H
09:57 - what's wrong with this function
09:59 - oh whoops I have to say float X I I I
10:02 - lived in JavaScript land for a second I
10:04 - must set the type for that variable
10:05 - probably everybody in the chat was
10:08 - probably shouting at me about that okay
10:09 - where's the line I don't see it why
10:13 - don't I see that line ah guess what
10:15 - guess what I forgot I have to do that
10:18 - mapping H all right all right everybody
10:21 - settle down I'm going to do it I'm going
10:23 - to reuse I'm going to reuse that pixel
10:26 - y so I'm G to say Point P1 equals a new
10:32 - point which is at -1 F of1 I'm going to
10:36 - do I'm going to write this in a bit of
10:38 - a a crazy way P2 is a new Point ah new
10:42 - point between at one F of one okay and
10:47 - then I'm going to draw the line from P1
10:50 - pixel
10:53 - X ah can I please type today um P1 pixel
10:58 - XP fast forward this part I'm typing
11:00 - here P1 pixel Y and then
11:04 - P2 pixel X P2 pixel y but look at this
11:08 - why am I getting an error here I want to
11:10 - make a point at a specific X and Y what
11:14 - do point do what does the point object
11:16 - do I can make a point at a random point
11:20 - but I can't seem to make one at a
11:22 - specific point well guess
11:24 - what guess what in Java processing is
11:28 - Java you can do something called
11:31 - overloading just so happens I'm going to
11:33 - cover overloading Constructor
11:34 - overloading in this case I can say I
11:36 - want to have another
11:38 - way of creating a point and I'm going to
11:42 - use the underscore kind of ugly
11:44 - underscore notation but what I want to
11:46 - do is pass have some arguments to the
11:48 - Constructor I don't want to call them X
11:50 - Y because the point objects variables
11:52 - are X and Y so I'll call them
11:54 - xcore and that's going to be a way that
11:58 - I can do this I could ALS also figure
12:00 - out the label but I'm not going to worry
12:03 - about the label in this case cuz I'm not
12:04 - using I'm not labeling these points I'm
12:07 - using them just to draw the line okay so
12:09 - now that went away and I should be able
12:11 - to there's that line so there's the line
12:14 - boy this was a lot of work just to draw
12:16 - that one
12:17 - line and you can see though I can change
12:20 - the formula for the line if I say you
12:22 - know minus .2 now the line is further
12:25 - down if I say Min
12:27 - -.3 now the line is pointing the other
12:30 - direction so I can now create any
12:32 - formula for the line and visualize that
12:35 - in the window okay so now what's going
12:39 - on here this is now so now that I have
12:42 - this formula for the line I need to uh
12:45 - change this no longer do I want to check
12:49 - just is X greater than y how do I
12:51 - determine and I'm I'm looking for my
12:53 - Eraser how do I determine whether a
12:55 - given point is above or below a line
13:01 - so let's say I have this
13:04 - line and the line is y = 3x + 2 I know
13:09 - it should be all right let me try to be
13:12 - more accurate about this I'm going to
13:14 - point it up
13:17 - more and I have some point so let's say
13:20 - I have the uh um this is the cartisian
13:23 - plane here oh kind of drawing this as a
13:26 - mess okay so let's say I have the Point
13:29 - uh x uh X comma um X is uh three so if x
13:37 - is 3 then this point is 3 comma 11 right
13:43 - I think cuz 3 * 3 is 9 + 2 is 11 so if I
13:46 - had the point 312 it's above if the Y is
13:52 - greater than the Y that would be on the
13:53 - line and if I have the point like 3
13:56 - comma 3 it's below if the Y is less than
13:59 - the Y that would be on the line so I can
14:01 - do that for any value of x so if I take
14:03 - any value of x all I need to do is
14:05 - calculate the point that's on the line
14:06 - and see whether it's greater than or
14:07 - less than so let's add that into the
14:11 - code so here what I want to do is I want
14:13 - to
14:15 - say l I'm going to say line Y equals F
14:20 - ofx right I'm going to calculate the
14:23 - actual y value for this particular X on
14:28 - the line then all I need to do is ask is
14:32 - the Y value above it then it's a one or
14:36 - is it below it then it's a negative one
14:37 - so hey that was easy that's done
14:41 - now and there we go so we should be able
14:43 - to see this perceptron over time
14:45 - learning to figure out whether points
14:48 - are above or below that line it's a
14:49 - little bit stuck right now you can see
14:51 - that it's and and this probably has to
14:53 - do with learning rate and you know how
14:55 - it's started how the initial weights
14:56 - were started but so I want to kind of
14:58 - figure out like why is it kind of stuck
15:00 - so why is this get one Reon here's the
15:03 - reason why this is getting stuck and I
15:05 - mentioned it in the previous coding
15:07 - Challenge and I completely forgot about
15:08 - it until now the bias so let's talk
15:11 - about why does there need to be a bias
15:13 - here's the
15:14 - thing let's consider the point 0
15:18 - 0 when I say well this is the point 0 0
15:23 - y = 0 * x + 2 the corresponding y value
15:29 - is two so zero is below the
15:33 - line here's the thing with my
15:36 - perceptron as I send in the x value and
15:40 - the yv value if I send in Z 0 no matter
15:44 - what these weights are If I multiply the
15:46 - inputs by the weights and sum them I'm
15:48 - always going to get a zero coming out
15:50 - which can't be right and this actually
15:52 - in this formula for a line y = m x + b
15:59 - these weights are actually dis deter are
16:02 - describing the rise and the run is that
16:05 - those the right terms of the line the
16:07 - slope the numerator and the denominator
16:09 - you can almost think of this as I think
16:11 - weight 1 / weight 2 * X plus b for bias
16:16 - the bias being the Y intercept of that
16:19 - line where is it so what the bias is in
16:23 - a perceptron is another input that
16:26 - always has the value of one but has a
16:30 - different has its own weight you can
16:32 - call it the bias weight and now you can
16:34 - think of this formula as y equals weight
16:38 - for y divided by weight for x or is it
16:41 - the other way around somebody's going to
16:42 - tell me in the chat plus times X plus
16:46 - weight for the bias times 1 so hard this
16:50 - is sort times x does this make
16:53 - sense so this is really what the
16:55 - perceptron is learning we know the
16:57 - formula for the line and could do all
16:59 - this with math a neural network is often
17:03 - referred to as a universal function
17:05 - approximator thank you to the chat who
17:07 - just posted that terminology right we
17:10 - with a simple like two-dimensional space
17:12 - in a formula for a line we can do the
17:13 - math directly but here uh you can
17:16 - imagine once our data inputs that gets
17:19 - once we have all this data with lots and
17:20 - lots of inputs beyond that are in end
17:22 - dimensional space we want to be able to
17:24 - approximate a function to work with that
17:27 - data and and this is we're seeing just
17:29 - beginnings of that here okay so let's go
17:31 - now and implement the bias in the
17:34 - code all right so for the bias there's a
17:36 - couple things I want to do number one is
17:39 - I'm just going to add that to the point
17:41 - I'm going to say it has float B for bias
17:43 - let's just call it bias and bias is
17:46 - always equal to one so every point is
17:48 - going to have an X and Y and a
17:50 - bias and then
17:53 - um the perceptron now needs to have
17:57 - three weights needs to have the weights
18:00 - for the two inputs the X and Y and the
18:02 - bias and one thing I might do is
18:06 - um give the perceptron
18:08 - Constructor a number of
18:11 - arguments so that we could have a sort
18:13 - of more generic p perceptron and I can
18:16 - say weights equals new float n and then
18:19 - when I create the perceptron I want to
18:22 - say
18:23 - perceptron uh
18:25 - three and then here oh this was just
18:28 - something I had to test the
18:30 - code um now the inputs should always
18:35 - be an array of three
18:39 - things and is there another uh here
18:43 - training do I should always make sure to
18:45 - include that bias I think I was able to
18:48 - get all of the and so let's run this
18:50 - again we can see that it's still a
18:52 - little bit stuck I'm pretty sure that I
18:54 - have the correct code
18:56 - now but here's a way that I'm going to
18:59 - be able to determine whether it's
19:01 - working or not um what I want to do now
19:04 - is also visualize what the perceptron
19:07 - currently thinks is the line so remember
19:10 - this is where I
19:11 - drew the the actual line the correct
19:15 - formula for the line what I want to do
19:18 - now is um let me I think I could do this
19:22 - with the perceptron so I can say Point
19:24 - P1 equal new point
19:29 - 1 and I'm going to say uh what did I
19:31 - call the perceptron brain brain.
19:36 - guess
19:40 - y1 so I'm going to ask the and P2 is one
19:45 - brain. guess Y and then I'm going to
19:48 - draw the line oh uh let's call this P3
19:51 - and
19:53 - P4 so I am going to attempt to draw the
19:58 - ver original line that the perceptron
20:00 - thinks and this should be one so now if
20:02 - I go into the
20:04 - perceptron and I
20:07 - say I already have a function called
20:09 - guess guess y it's a little bit awkward
20:11 - here naming wise guess
20:14 - why and I have an x value the formula
20:18 - for the line so the slope should be
20:21 - weights index 0 divided by weights index
20:26 - one and the Y intercept should be
20:30 - weights index 2 so I should return x m *
20:35 - x +
20:40 - B so something's happening here but I
20:43 - think I'm off right
20:47 - maybe what I meant to say was weights
20:51 - one divided by weight
20:57 - zero so this this is the line trying to
21:02 - learn boy it's really not doing a very
21:04 - good job so I think I need to take a
21:06 - closer look at this and figure out
21:08 - what's if this is really right I was
21:10 - just kind of trying to guess so there's
21:11 - a way we can actually do the math for
21:13 - that properly um remember the perceptron
21:16 - right the x is multiplied by a weight
21:18 - the Y is multiplied by a weight the bias
21:21 - is multiplied by a weight all those are
21:23 - summed so the formula for the line that
21:26 - it's learning is actually the Z
21:29 - weight * X plus weight index 1 * y plus
21:35 - weight index 2 * B all of this should
21:37 - equal zero so that means weight index 1
21:40 - * y should be weight index 2 * B minus
21:45 - weight index 0 *
21:48 - X and then y should equal weight 2 /
21:54 - weight 1 * B minus weight 0 divided
21:57 - weight 1 time x I think that's
22:02 - right that's pretty different than what
22:04 - I have let's take a
22:07 - look oh there's a major error
22:12 - here even before I got to this thank you
22:16 - to Ethan Elliott in the chat I forgot to
22:21 - initialize the bias in this
22:23 - Constructor what a disaster so probably
22:26 - do save me from for myself I'm just
22:30 - going to initialize it up there Wonder
22:32 - that's really going to so I never
22:33 - actually even had a bias so I think this
22:36 - is actually working but I'm not
22:38 - visualizing this line perhaps correctly
22:41 - so let's go back now and let's see where
22:45 - do I want to do that I'm going to say uh
22:49 - y
22:52 - equals
22:54 - um so let me let me use the formula that
22:57 - I just used
22:59 - return so let me do
23:03 - this I'm just going to create some
23:05 - shorter variable
23:07 - names to make this easier to look
23:11 - at and I'm going to say uh
23:15 - return uh I'm looking over here at that
23:17 - formula I wrote over here I'm going to
23:20 - say return uh
23:23 - W
23:25 - W2 ided W1 time
23:32 - B time sorry times
23:35 - bias oh times one the bias is always one
23:38 - so W2 um divid One Plus w0 / W1 times
23:46 - that x
23:47 - value now let's take a
23:50 - look and see now if things are working
23:54 - as they perhaps should I think you can
23:58 - see that that it's actually I flipped
24:00 - somewhere do am I missing a negative oh
24:03 - this should be negative switched this to
24:10 - negative this looks very close but it's
24:14 - kind of off right thank you to the chat
24:18 - somebody in the chat just told me that
24:20 - my equations are wrong and they are this
24:24 - should be negative right because this
24:27 - all of these add up to zero so I need to
24:29 - take if to make this equivalent y1 * y
24:33 - equal-- y W2 W1 * y = W2 minus
24:40 - w0x that's going to fix
24:43 - it okay so now I'm going to say negative
24:47 - here and we're going to run this and
24:50 - we're going to watch the perceptron over
24:53 - time and you can see as it's correcting
24:55 - all those circles are turning green uh
24:59 - with this learning rate slowly over time
25:01 - the line is converging to the correct
25:07 - [Music]
25:10 - spot perceptron learn the line so um you
25:13 - know there's going to be a part three
25:15 - and a part four to this because I think
25:16 - I'm going to wrap up this particular
25:17 - video there are some other things that I
25:19 - wanted to add to this but at least now
25:21 - in this video I've added the
25:23 - bias I've made it so that I have a
25:25 - cartisian space I can work with and I
25:27 - can work with any formula for a line as
25:30 - you can see life is just one big
25:33 - refactoring and there's so many things I
25:35 - could do to refactor this and Visually I
25:37 - still don't necessarily love what I have
25:39 - here in terms of explaining what's going
25:41 - on but at least now let's just before I
25:44 - go let's make a new formula shout out
25:46 - your numbers to
25:48 - me nobody can shout out to me uh 8 n * X
25:54 - +2 or let's do minus 2 -.1 let's just
25:58 - have a different formula for a line and
26:00 - see that this again works we can also
26:03 - probably have a much better sense of
26:05 - what learning rate is doing like look
26:07 - what happens if I make the learning rate
26:09 - 0.2 right now you can see how it makes
26:12 - these very large movements so it gets to
26:16 - the the correct answer very quickly but
26:18 - it can't do the fine detail to really
26:21 - find the correct spot and if I make the
26:24 - learning rate really ridiculously small
26:27 - you know you can't even see I mean it is
26:29 - in theory this line is moving it's so
26:31 - small that I can't even see it let's not
26:33 - be so crazy let's do
26:35 - that why I can't even find the line the
26:37 - line currently isn't even in the space
26:39 - because remember it starts with
26:40 - something random let's run this
26:43 - again so this line is moving but it's
26:46 - just really really really slow so it's
26:49 - all about finding and that learning rate
26:51 - can change over time I could start with
26:53 - a large learning rate I should make a
26:54 - slider to adjust the learning rate I
26:56 - could start with a large learning rate
26:57 - so it gets close look at that it just
26:59 - locked right in um and then I could uh
27:02 - lower the learning rate for those
27:03 - refined uh Mo movements okay so I have a
27:06 - couple things I want to do I think I'm
27:08 - going to make a couple follow-up videos
27:09 - on this they'll appear at some point um
27:12 - but there was a great comment in the
27:14 - original first version of the coding
27:16 - challenge about adding data that is not
27:19 - part of the training set which of course
27:20 - is very important in machine learning so
27:22 - I'm going to do that in the next uh
27:24 - followup to this perceptron coding
27:26 - challenge thanks for continuing to watch
27:28 - watch
27:32 - [Music]