00:00 - I'm giving a quick intro to the video
00:02 - you're about to watch where I attempt to
00:04 - make a pull request to the p5.js project
00:07 - and what I'm at trying to add is the
00:09 - load bytes feature now all that will be
00:11 - explained in the video but I ran into
00:13 - some like debugging issues that are not
00:15 - really relevant for the pull requests
00:18 - aspect of the video so there's gonna be
00:19 - some strange cuts in it of me trying to
00:22 - where I've did a lot of debugging in
00:23 - between you're welcome to also check the
00:26 - video's description for the link to the
00:27 - full hour-and-a-half livestream but
00:29 - hopefully this video is much shorter and
00:31 - you're gonna get sort of like the
00:32 - essential parts of it okay enjoy this
00:35 - pull request video hello welcome to a
00:39 - special video that's part of my whole
00:41 - set of videos and things about
00:43 - contributing to open source so in this
00:45 - video I'm gonna attempt to do something
00:46 - that's not very visible because I'm
00:49 - Adhan doing I'm doing this and this is
00:50 - also a live stream that's going on right
00:51 - now even though you might be watching
00:53 - this recorded I am going to attempt to
00:56 - make a pull request to this project
00:58 - called p5.js
00:59 - now if you don't know a lot about p5.js
01:01 - i mean if you watch any of my videos you
01:02 - probably know something about it
01:04 - but I encourage you to check out
01:05 - processing foundation.org p5 GS dot org
01:08 - all those links are in this video's
01:10 - description I little while back was
01:14 - creating a doodle classifier example
01:16 - based on the quick-draw dataset and
01:18 - while I was doing that I needed a
01:20 - function called load bytes now if I go
01:23 - to github p5.js and I search this
01:29 - repository for a function called load
01:31 - bytes which the idea of this function is
01:33 - a function that I can call just like
01:35 - load JSON or load strings or load XML or
01:38 - load image but what I want or just the
01:40 - raw bytes from a file a digital file if
01:44 - I search for this you're gonna find
01:46 - oh it's nowhere in the code it's nowhere
01:48 - in the commits but there are a couple
01:49 - issues about it one of which is here
01:52 - under finish file IO implementation this
01:55 - is from 2013 right it wasn't finished
01:58 - and one is from me twelve days ago
02:01 - implementation of load bytes because I
02:03 - filed this issue describing exactly what
02:06 - I'm talking about right now and
02:07 - published some code that
02:09 - accomplished it now here's the thing in
02:12 - the discussion here there's some nice
02:14 - discussion here
02:16 - Linsey why kenneth commented saying that
02:19 - using HTTP do which is a function that's
02:22 - part of the p5 library would be more
02:25 - consistent with the rest of the loading
02:26 - code it's a nice to have I'm going to
02:28 - submit this pull request without doing
02:31 - that just with using my code that uses
02:33 - the native JavaScript HTTP request
02:36 - because I don't want to because using
02:40 - HTTP do is going to require adding and
02:42 - rewriting the HTTP do function as well
02:45 - and I want to kind of keep the scope of
02:47 - this particular video small now it might
02:49 - be that later it might be that this pull
02:53 - request doesn't actually get merged into
02:55 - the project alright I did a different
02:57 - way but let's just sort of see if we can
02:59 - at least make it happen using this code
03:01 - that I have that load bytes and the
03:03 - other point of this I won't you be able
03:04 - to watch this and not really care about
03:07 - what it means to load bytes and how this
03:09 - implementation works just to see the
03:11 - process of adding some new code to kind
03:13 - of a large open source project that is
03:15 - all sorts of dependencies and build
03:17 - settings and things let's see if I can
03:19 - figure that stuff out while doing this
03:21 - in theory I should know how to do this
03:22 - but even if I do know how I'm probably
03:24 - gonna get tripped up and have all sorts
03:25 - of problems I can tell it's gonna happen
03:27 - so let me say a couple things first
03:29 - number one is this this wiki is going to
03:32 - be really important this is on the p5.js
03:35 - wiki under slash development this is
03:37 - gonna have some instructions that I'm
03:39 - going to need to follow to how to build
03:40 - the p5.js project which I'm going to
03:42 - need to do to test the new code that I
03:44 - want to implement and then also I would
03:47 - highly recommend you check out this
03:50 - video series from Luisa Pereira where
03:52 - she created a video series called
03:54 - looking inside p5 I believe there's a
03:56 - Spanish language and English language
03:58 - and these videos go through in great
04:00 - detail with a beautiful animation of
04:03 - drawings and animations how the p5
04:05 - library is structured and built so that
04:08 - will give you an excellent background to
04:10 - what I am going to about to attempt to
04:12 - do ok so what is the first thing that I
04:16 - need to do so what I'm actually going to
04:18 - do is I'm going to go right here to
04:23 - p5.js and i'm gonna go over here to
04:25 - clone so what I'm gonna do is I'm gonna
04:26 - start fresh
04:27 - I certainly have on my computer the p5
04:30 - just repository already I work with it I
04:32 - probably have different branches and
04:33 - forks ah you're running to do it I'm not
04:35 - gonna clone it I am first gonna hit fork
04:38 - so what I want to do is work in my own
04:40 - fork so I'm gonna hit fork and I want to
04:44 - fork this oh look at this
04:46 - let's fork this to the coding train and
04:50 - I'm gonna fork this with a coding train
04:52 - it's gonna take a little bit of time oh
04:54 - it already finished okay so now what I'm
04:59 - gonna do is I'm gonna clone and this is
05:01 - good because even if this goes totally
05:03 - haywire maybe I don't want to actually
05:06 - submit what I do here to the actual
05:09 - p5.js project I just want this to be a
05:11 - little sandbox playground for me to
05:13 - learn about open source so here we go
05:15 - I'm going to grab this now I am going to
05:18 - clone from this particular URL I'm using
05:21 - git at github calm because I have
05:24 - already done this crazy SSH key
05:25 - passphrase thing which I would be happy
05:27 - to show in another video if you haven't
05:29 - done that step you might want to clone
05:31 - just using this the HTTP URL so I'm
05:34 - gonna do this I'm gonna hit copy and
05:36 - then I'm gonna go to my terminal where I
05:39 - am a weirdo who actually just uses the
05:42 - plain Mac terminal with no extra
05:45 - settings I aspire to do better I will do
05:48 - better someday and I'm gonna say git
05:49 - clone wait I first got to see where I am
05:51 - sure I'm gonna go to the desktop I'm
05:54 - just gonna put this on the desktop and
05:55 - now I'm gonna say git clone that so this
06:00 - is step one step one is clone the
06:03 - repository
06:06 - oh it's already done okay great now I
06:11 - have clone the repository step 2 deep
06:14 - breath step 3
06:18 - change directory into the repository and
06:21 - then I'm going to open up all the code
06:24 - in a cook text editor and I'm going to
06:27 - use the atom editor for that I have my
06:29 - computer configured in such a way that I
06:30 - can type atom dot and it opens atom
06:33 - automatically and so now you can see I
06:35 - have the entire p5.js project here so
06:38 - first what I want to do is can I even
06:40 - just build p5 the way that it is without
06:43 - making any changes to it okay I don't
06:45 - want to make any changes I don't want to
06:47 - worry about my pull request and all that
06:48 - stuff should want to see if I can build
06:49 - it so I'm gonna go back now to this
06:53 - particular and oh I did this first step
06:55 - right fork and clone right fork and
06:57 - clone fork and clone I did that now I'm
07:01 - gonna oh I did see the npm install so
07:03 - npm node package manager install is a
07:06 - command that's going to I have to have
07:08 - node installed on my computer check out
07:10 - my videos about nodejs
07:13 - but i'm gonna use no to install all the
07:15 - other libraries and other things that p5
07:18 - the library itself depends on so I'm
07:21 - going to say npm install now I'm really
07:24 - definitely gonna have to wait
07:30 - well we finished okay that was 33
07:34 - seconds and we add added 1584 hooks and
07:39 - people are saying in the chat what about
07:41 - yarn you know someday I'll you know I
07:44 - you know me I'd like to kind of like
07:45 - live in the past for a little while so
07:48 - I'm using no yarn is another package
07:53 - manager' though that you could use
07:54 - instead of NPM and apparently it's like
07:57 - faster and better for some reason now
07:58 - okay to create the Creek complete
08:01 - library from source run grunt so one
08:05 - thing that I should emphasize here is
08:07 - that when I go look at the code like
08:09 - where do I actually want to change the
08:11 - code somewhere right I want to add the
08:14 - load bytes function all the code for p5
08:16 - is all here color core data events hmm
08:20 - i/o input output probably the code for
08:24 - load bytes should go in IO and if I look
08:28 - here and I go down files Jas maybe
08:32 - that's where it is
08:33 - let's look at files Jas and you can see
08:35 - here is there like a load JSON is here
08:41 - solo JSON is here in files dot j s so I
08:47 - just need to add p5 dot prototype dot
08:50 - load bytes to add that function but the
08:52 - thing is if you've ever used the p5
08:54 - library right you don't have like a
08:57 - directory of all of these you just have
09:00 - that p5.js file or that p5 dot min dot
09:02 - JS file so there is a build process it
09:05 - would be unreasonable to try to develop
09:07 - this big library all from one file and
09:10 - be like oh I want to add something to it
09:12 - let me go to line you know 70 2421 so
09:15 - everything's broken out into separate
09:16 - files and then there's a build process
09:18 - the build process happens with where am
09:22 - I here via this other tool called grunt
09:28 - what's what's grunt grunt JavaScript
09:35 - let's look for that the JavaScript task
09:39 - runner so grunt is a task runner that
09:42 - will look worried that you could
09:43 - configure to do a lot of things like run
09:45 - all the unit tests check the linting for
09:47 - style bill put all these files all
09:50 - together minify it all that kind of
09:52 - stuff that I have some video tutorials
09:53 - about in my github series in my lip
09:56 - linting and testing series but basically
09:59 - all the kinds of things that you might
10:00 - do with a JavaScript project grunt -
10:03 - something that can allow you to sort of
10:05 - sequence all of that and a lot of this
10:06 - work was done by sakshum Saxena for last
10:11 - year's google Summer of Code 2017 we did
10:14 - a lot of work to improve the
10:16 - infrastructure alas pecs and operations
10:17 - of the p5 library itself so that all the
10:20 - sort of build stuff so let's try now and
10:23 - see can we run npm run grunt and let's
10:28 - see what happens oh this is exciting so
10:32 - let's see if I can talk through the
10:33 - things that it's doing oh ok so what am
10:37 - I missing
10:38 - oh I just said I actually I just I need
10:43 - to say npm run the grunt I just typed
10:45 - and chim grunt if I type NPM grunt it
10:47 - goes like this and all right here we go
10:51 - so it's running grunt its building some
10:54 - docks and the reference then it's
10:58 - running in a min task it's running some
11:00 - sort of type right it's building it it's
11:02 - linting it it's testing it all sorts of
11:06 - exciting stuff is happening oh it's
11:09 - running browserify which is something
11:11 - that people do and it's running uglify
11:13 - which is also something but it's doing
11:15 - all these different tasks then boy
11:16 - wouldn't it be nice mocha to go through
11:18 - it so look at the little kitty cat and
11:20 - it's running all the unit tests the
11:22 - value of X is 10 boy this is gonna take
11:24 - a really long time false false so it's
11:27 - gonna take a really long time to do all
11:28 - this I think probably I'll just be back
11:30 - in a second one is done it's complete
11:36 - and it passed everything passed it was
11:39 - done without errors so now we can start
11:42 - to add our own code to it now maybe I
11:44 - want to like makes it duper oh yeah I'm
11:46 - gonna make a branch so I think I don't
11:49 - know I think what I'm gonna do is I'm
11:51 - gonna say git branch load bytes I don't
11:57 - call it fix or at load bytes add that's
12:00 - a good name for the branch I think I'm
12:02 - gonna add load branch maybe I should
12:03 - call it add load bytes ok so I'm going
12:08 - to create that branch and then I'm also
12:11 - going to check out that branch so now
12:16 - working on the code I'm in a different
12:18 - branch which is going to be helpful for
12:20 - me later when I want to compare pull
12:23 - request send echo there's a lot of stuff
12:26 - that I'm kind of you know this isn't
12:27 - like I've this is the first video you're
12:29 - ever watching about git or github or
12:31 - open source a lot of this is gonna be
12:33 - unfamiliar to you hopefully you can
12:35 - pause here and find some of the
12:36 - background links and come back but ok so
12:38 - I'm in a separate branch now all right
12:40 - now I'm just gonna go to the code I'm
12:41 - gonna write some code code code code
12:43 - code code here we go alright so I'm
12:45 - gonna write some code stressed out
12:47 - alright ah so here's the thing let me
12:50 - give myself a little bit more room here
12:52 - one thing that's interesting to note
12:55 - about p5 is to look at all what's all
12:57 - this stuff oh my goodness there's like
13:00 - this is just the load
13:01 - JSON function first there's these
13:03 - comments then there's some like crazy
13:06 - notation here there's like this looks
13:08 - like an example so there's a lot that I
13:10 - need to do just to add load bytes beyond
13:13 - just the load bytes function itself
13:14 - because I need to also make sure I
13:16 - include the documentation and eventually
13:19 - I'm gonna want to also probably add an
13:21 - example to the website and all sorts of
13:24 - other stuff but let's do one step at a
13:26 - time I think what might help us actually
13:28 - amazingly is let's use this load JSON
13:34 - implementation as a template so I'm
13:36 - actually gonna copy everything from load
13:39 - JSON like this and I'm going to put it I
13:43 - don't know if it if there's a correct
13:46 - order I'm gonna put it at the bottom I'm
13:49 - gonna put it at the end because I'm
13:53 - gonna put it after look at me I'm just
13:54 - like scrolling like a crazy person
13:56 - I'm gonna add it after
13:58 - before hgp do and I'm gonna add it
14:03 - before HTT p-- oast oh this is very
14:06 - silly what's going on now HTTP GET load
14:14 - xml so i'm gonna add it after load xml
14:16 - before after load xml before HTTP GET
14:19 - that feels like a good place to put it I
14:22 - paste this in here now then what I'm
14:25 - going to do is I'm going to make sure
14:27 - I'm in the right place this is the load
14:33 - JSON function and it's right after the
14:35 - XML one okay so now I will really need
14:38 - to rewrite this quite a bit and I need
14:40 - to make this a little smaller can you
14:43 - still see this is this too small for you
14:45 - now I think I'll survive here
14:48 - loads a binary file from a fire all a
14:53 - URL and returns an object with a byte
15:00 - property containing a so what is it that
15:06 - it's containing when I my load bytes
15:09 - function it if I run the load bytes
15:10 - function it actually creates this with
15:12 - this you into eight array okay a array
15:16 - note that even if the JSON file contains
15:19 - an array and object so this is
15:20 - irrelevant
15:22 - this method is asynchronous meaning it
15:24 - may not finish before the next line in
15:26 - your sketch
15:26 - okay don't need JSON P so that can be
15:30 - removed now the method is called load
15:36 - bytes the parameter is a string which is
15:39 - name of the file or the URL to load
15:42 - object so I don't think I need to JSON
15:45 - piece stuff that I don't need a callback
15:49 - and an error callback so I own a string
15:52 - a callback and an error callback
16:00 - function to be executed after load bytes
16:04 - completes data is passed in as its first
16:08 - argument function be executed if there's
16:10 - an error responses passed
16:12 - as the first argument that makes sense
16:15 - return an object it only returns an
16:18 - object because the object has contains
16:23 - and a you int array bytes field property
16:33 - I'm going to say property and then I'm
16:37 - going to say calling load bytes inside
16:42 - preload guarantees to complete the
16:43 - operation before being set up and draws
16:45 - called that is the case now there's an
16:47 - example here unfortunately I'm good what
16:49 - I'm going to do right now is I'm gonna
16:52 - take out the example maybe I can add one
16:56 - in later but I'm just going to say to do
17:00 - add example and then outside of preload
17:05 - add example with preload outside of
17:10 - preload you may supply a callback
17:12 - function to handle the object to handle
17:14 - the data I'm gonna say and then what I'm
17:19 - gonna do here I'm going to delete this
17:20 - and I'm gonna say to do add add example
17:31 - without with callback wonder why it's
17:35 - syntax ting ha syntax highlight how
17:36 - because it's inside of this oh maybe
17:39 - this will this will just do oh yeah this
17:41 - is all I need to do okay so this all I
17:45 - need to do is add sorry I need to put
17:46 - this in comments I'm trying to figure
17:47 - out what it's expecting expecting
17:49 - JavaScript code here which I don't have
17:52 - ready to put so I'm gonna put this to do
17:54 - note with JavaScript comment okay what
17:57 - is this alt oh this is alt text I think
18:03 - this is like leftover from something
18:05 - that's not exactly right so this is a
18:07 - mistake I think I need to like take a
18:10 - look at this I'm gonna leave that there
18:12 - but this I don't think is right I'm
18:14 - gonna come back to that okay now I'm
18:15 - gonna get my code so I'm going to change
18:17 - this to load bytes and I'm gonna go now
18:22 - to the code that I wrote another time
18:25 - and I've been sort of mucking around
18:26 - with it trying a few different things so
18:29 - what I'm gonna do is I'm gonna do this
18:33 - I'm gonna tape I'm gonna I'm gonna do
18:36 - this bit by bit I'm sure I'm gonna just
18:38 - take out I was playing around with HTTP
18:40 - do I'm gonna take that out so I'm gonna
18:42 - grab my code which is this and I'm going
18:46 - to copy it and I'm going to go back here
18:48 - and I'm going to I'm going to leave this
18:52 - stuff here so you're gonna see why in a
18:58 - second because I actually uh what I want
19:04 - I want to retain this check for the data
19:10 - type argument so this is some code from
19:12 - load bytes which is checking to see
19:14 - here's an argument if it's a string I
19:17 - don't need to worry about this json p
19:19 - stuff so if it's a if it's a function
19:28 - and there is no callback then it becomes
19:30 - the callback otherwise it's the error
19:33 - and i can get rid of this and I can say
19:40 - I can say path should always the
19:44 - arguments index 0 so this is actually
19:49 - this is probably more complex than it
19:52 - needs to be so I don't know if this is
19:56 - really necessary I but I'm gonna leave
19:58 - this like this so this is saying like oh
20:00 - this is already there you know what I'm
20:06 - gonna say yeah I'm gonna do this so this
20:09 - is a nice way I'm gonna leave it like
20:10 - this this is a way of just checking are
20:12 - there additional arguments if so put
20:14 - them in the right place then I don't
20:17 - want to do this anymore what I want to
20:21 - do is my own whoops
20:23 - load bytes code which is this and I'm
20:27 - gonna paste that in here now the
20:28 - difference is I wrote my code with a
20:30 - variable called data and the the
20:33 - convention in p5 is returned so I want
20:37 - to say
20:38 - our return equips return equals an empty
20:42 - object and then when the data comes in
20:44 - I'm gonna say return bytes equals that
20:47 - array I'm gonna do the callback and then
20:50 - I also need to how do I have an error so
20:54 - on request dot on error this is my guess
21:02 - lower case on error but being told that
21:04 - may be lower case on error actually
21:06 - works so let's see if this is a function
21:10 - H HTTP XML Roksana HTTP request on error
21:19 - yeah there's a non error there we go
21:22 - equals callback so that should work
21:24 - we're gonna test all this stuff before I
21:26 - submit a pull request don't worry okay
21:28 - so now I think I've written my code I'm
21:31 - happy with it I don't have the examples
21:33 - but I have the stuff that's needed for
21:35 - the documentation I have a little
21:37 - description ah I am missing something
21:39 - though weirdly enough the way that p5
21:42 - works when you have a function that it
21:44 - supports preload is I also need to
21:47 - register that function with load bytes
21:51 - I'm sorry register that function with
21:53 - preload so this has to go somewhere
21:55 - register a preload method now where does
21:57 - that go does that actually just go is
21:59 - that in this no so where does that
22:02 - happen in the p5 library hmm let's go
22:05 - back to the p5 repository and search for
22:10 - register preload method and let's look
22:12 - for code oh it's in core preload methods
22:18 - let's see hmm yep it's here it's in core
22:25 - so what I need to do is add it to this
22:27 - list we can see there's no load bytes in
22:30 - this list so I also need to go to core
22:32 - which is here under core core jf let me
22:37 - look for a load JSON and find that here
22:42 - and now what I'm gonna do is I'm gonna
22:43 - put it right here as this in
22:46 - alphabetical order no I don't know that
22:49 - there's a particular logic to this order
22:50 - so I'm just going to put it
22:51 - your load XML I'm gonna say load bytes
22:56 - I'm being told there might be a bug in
22:59 - the way that I called the date called
23:01 - the callback thank you for that so let
23:03 - me go back to files J s go back to my
23:06 - load bytes and I am calling the callback
23:10 - I with data which I renamed based on the
23:13 - p5 convention to ret okay so I think
23:17 - that's good alright so look we did it
23:20 - we're done goodbye I'll see you later
23:22 - no no there's so much more to do this is
23:24 - I think I have written all the code for
23:27 - adding the load bytes function to p5 now
23:30 - I've missed two important things one is
23:32 - I haven't finished writing the doc
23:34 - example documentation and two it's
23:37 - possible you know it is as in that
23:39 - thread that get up issue thread this
23:40 - isn't perhaps the ideal implementation
23:43 - of load bytes but it hopefully at least
23:44 - is one that works so now what I'm going
23:47 - to do is guess what I'm gonna do I'm
23:49 - just gonna run again npm run grunt so
23:52 - let's just rebuild p5 i also haven't
23:56 - written any tests so I'll be back when
23:58 - this is done hmm okay this is good so
24:05 - this is no surprise there's no way I
24:07 - could have done that without getting any
24:09 - errors so I got some sort of error
24:12 - yes lint source failed so what did I do
24:15 - I wrote on so I have some some some code
24:20 - that doesn't that doesn't work that
24:23 - doesn't fit the styles defined by the p5
24:27 - open-source library oh boy boy there's a
24:29 - lot of stuff oh no oh no oh no something
24:35 - bad has happened
24:36 - I forgot I have Adam beautify package
24:42 - installed and it happens anytime I hit
24:45 - command s it read
24:47 - formats all my code with some styles
24:49 - defined by my Adam beautify which don't
24:52 - match up with the p5.js library whoo so
24:56 - I got to undo out of this I did undo
24:58 - sorry I was confused so I undo out of
25:01 - that and save it now I've got to go to
25:04 - files dot yes now
25:05 - on fortune what I'm gonna do here I'm
25:06 - gonna do something a little bit insane
25:08 - which is that I'm going to grab my load
25:11 - bytes function I don't care if there are
25:14 - errors I need to fix there I'm gonna
25:16 - grab my load bytes function I'm gonna
25:19 - hit command X to get rid of it I'm then
25:23 - I'm gonna undo I'm gonna do undo all the
25:27 - way back to how this file was originally
25:31 - [Music]
25:33 - today wow I made a lot of changes this
25:36 - is insane good thing I know I couldn't
25:38 - use get stash I probably just use good
25:40 - stash - like stash all that now okay
25:43 - now I'm gonna hit save now this is if I
25:46 - if I if I do get diff I have made no
25:49 - changes from the p5 library I'm gonna
25:52 - make those changes again I'm gonna paste
25:54 - in my load bytes function I'm gonna hit
25:56 - save now I'm gonna go to court ASI told
26:00 - you this would go awry and I'm gonna
26:03 - look for lo JSON and I'm gonna add in my
26:06 - load bytes function I'm not no
26:09 - beautifying it's gonna happen this time
26:11 - load bytes and I'm gonna hit save and
26:14 - now we can see Jorge s has changed you
26:18 - can see by that Adam changed the color
26:21 - and files such as have changed but
26:22 - beautify didn't run I hope so now what
26:26 - I'm gonna do is I am going to try to run
26:28 - this again and hopefully I mean I'm sure
26:30 - I'm gonna be back he'll be some other
26:32 - error you'll see me in a minute when the
26:34 - next error comes up I am back with more
26:37 - linting errors but at least there are
26:40 - only these linting errors in files yes
26:43 - so what is a path is assigned a value
26:44 - but never used ah I forgot like I've
26:47 - made mistakes in my code here that this
26:48 - is this is so good that it has linting
26:51 - because I I created this variable called
26:55 - path but then here I'm using file this
27:00 - needs to be path this definitely needs
27:02 - to be path here so that was a mistake
27:04 - you know I'm tempted to just run this
27:06 - again just to do one fix at a time more
27:10 - linting errors replace get with get so
27:15 - it wants me to use a single quotes
27:19 - I agree with you thank you p5 for making
27:22 - my dreams come true this should probably
27:23 - be single quotes as well okay so now
27:26 - that's good let's run it again I
27:29 - probably could run just the command for
27:31 - linting separately like instead of doing
27:34 - run grunt the whole time okay another
27:37 - linting error insert a semicolon line
27:41 - 752 align 752 oh really really okay all
27:47 - right hey you want a semicolon there
27:50 - yeah that's the end of this onload being
27:52 - equal to is it gonna want another one
27:54 - yeah oh yeah like I have one here that
27:56 - makes sense okay I'll buy that I'll buy
27:58 - that
27:58 - semicolon all right one more let's see
28:03 - if it gets past it let's see if it gets
28:05 - past the linting okay told to be request
28:11 - for the music up nope
28:14 - alright it didn't get past it we've got
28:16 - one more on Rick one our EQ is not
28:20 - defined oh oh I just like have a total
28:25 - typo I have this as onr EQ when the
28:28 - variables name is o req so this by the
28:30 - way is good evidence I have a lifting
28:33 - tutorial by the way that well that that
28:35 - is out you can go check out my tutorial
28:37 - about linting this is why having linting
28:39 - especially than open source library it's
28:40 - good I might have liked well I probably
28:42 - would have tested this at least tried to
28:44 - run an example before I submitted the
28:45 - poor request but this has really helped
28:47 - me clean out and fix a whole bunch of
28:49 - things Thank You p5.js and your linting
28:52 - configuration let's try this one more
28:54 - time
28:58 - I'm feeling good feeling like it's gonna
29:00 - make it all the way through okay look it
29:03 - built no errors I have actually now
29:05 - completely rebuilt the entire p5.js
29:07 - library with my new code all the tests
29:10 - pass you know with the caveat that I
29:12 - didn't actually write any tests for load
29:14 - bite so but at least I didn't break
29:15 - anything else that's in existing tests
29:17 - no linting errors my code style is right
29:20 - didn't complain at me that I'm missing
29:21 - something important so I can feel
29:23 - somewhat confident that I've done
29:24 - something that's reasonable now let's
29:28 - let's look let's see okay so let's go
29:30 - into let's go into Lib so the built file
29:35 - is actually you can't see it here
29:36 - because it's actually in my atom editors
29:39 - configured not to show me files that are
29:41 - in git ignore but I can actually go here
29:44 - and open it up manually file open Lib
29:48 - this is the new p5 just library that I
29:51 - have now built manually and there's also
29:54 - this empty example this is wonderful
29:57 - because I'm gonna be able to now mess
29:59 - around in this empty example folder to
30:01 - test to sort of manually test to see if
30:04 - the code works so I'm gonna open this up
30:06 - and we can see we can look this has been
30:09 - built on March 12th that's today 2018
30:15 - and I can look like I can do a fine now
30:17 - Adam is my complain at me because it's a
30:19 - really big file but I can look for load
30:20 - bytes look at this there's a there's a
30:23 - low byte that was that's not in p5 the
30:25 - code there's another load bytes there's
30:28 - another load bytes there's a load bytes
30:30 - is there and look at this here it is the
30:33 - load bytes method actually online 59
30:36 - thousand something
30:39 - 575 so this is now a version of p5
30:42 - library it's not a rule it's not
30:43 - released it's not merged it's not part
30:44 - of the the actual p5 project yet but it
30:48 - did work to build a library so now what
30:50 - I'm going to do is I'm gonna go into
30:53 - this empty example now this empty
30:55 - example you'll notice point to those new
30:58 - built library files so I can start to
31:01 - test that code so what I'm going to do
31:03 - is I'm going to go to terminal here and
31:05 - I'm going to where am i I am in p5.js
31:07 - I'm going to go to to Lib I'm going to
31:09 - go into empty
31:10 - imple I'm gonna run a little server just
31:15 - so the just so I can sort of see oh
31:19 - there's already a server running let me
31:22 - run a server on a different port then
31:24 - I'm gonna go to the browser and now now
31:28 - I can see okay didn't find these files
31:32 - hmm let's think about this
31:34 - oh you know why because I've got to go i
31:36 - its it needs I need to run the server I
31:41 - need to run the server from the from
31:45 - this directory right because empty that
31:48 - empty example points to these files so
31:51 - let me run the server from this
31:53 - directory and go to empty example now
31:57 - let's just see I'm in empty example let
31:59 - me do some stuff like create canvas 400
32:04 - 400 background 0 I won't make this part
32:08 - of my commit I don't want the empty
32:10 - example to be part of what I commit but
32:13 - I'm just messing around the code here
32:14 - just to test so here we go I can see
32:17 - okay so stuff is running now here's here
32:20 - is the real test
32:23 - let me just write the load bytes
32:25 - function in setup okay this is good
32:29 - that's an error I want if low bytes
32:33 - didn't exist is the p5 library we've got
32:35 - an error saying I don't know what load
32:36 - byte this so now I can I can kind of go
32:39 - what I have a some test code on my
32:41 - desktop where I have a data file this is
32:47 - some this is a binary file was 1000 cat
32:52 - drawings so I'm gonna copy that I'm
32:55 - gonna go to empty examples I'm gonna say
32:59 - just show and finder and I'm gonna go to
33:07 - empty examples and I'm gonna paste that
33:09 - in so now I have a binary file there I
33:12 - want to see that that so that binary
33:14 - file is there and what I want to try
33:16 - doing is I want to say load bytes cats
33:20 - 1000 dot bin so let's just see
33:24 - if I get any error there no error this
33:27 - is a good sign now here's the thing
33:31 - function let me put this in preload so
33:34 - did my preload integration work VAR data
33:38 - I'm just gonna be es5 for today equals
33:42 - load but I'll say let cuz that's how I
33:43 - can't say bar any more load bytes and
33:47 - then I'm gonna say console log data so
33:51 - let's make sure this works great the
33:54 - data is there that's the correct amount
33:57 - of data you know looking at some of the
34:00 - numbers I can see that this makes sense
34:01 - that I knowing what this file is this is
34:03 - the right kind of stuff there's a lot of
34:05 - black pixels and then some gray and
34:07 - white outlines so this looks like it's
34:10 - working and you know just to make sure
34:13 - preload is really doing what it should
34:15 - right it's empty there but by the time
34:18 - it gets the set up now
34:20 - what if I take this here and put it in
34:23 - set up now this shouldn't work because
34:27 - I'm no longer using preload right I'm no
34:30 - longer using preload so it's empty but I
34:32 - can add a callback I can say got data
34:35 - and I can write a function called got
34:39 - data with an argument data so this is
34:43 - the callback and I don't need to set it
34:46 - equal to anything anymore so this should
34:48 - now I don't need this draw function it's
34:49 - nice that that was there so this should
34:51 - now work I can see the data is there
34:54 - that's good and then I also want to
34:58 - let's test the error I'll so I'll call
35:02 - it got error so I have to make an error
35:06 - happen let's see if I can think about
35:07 - how to do that so let me consult log the
35:12 - error so let's see so this there
35:16 - shouldn't be in it no error happened
35:17 - that's good what if I change the name of
35:19 - the file there we go sketched so
35:26 - interestingly enough oh this is a
35:28 - problem so it called got error sketched
35:32 - out yes
35:32 - no it didn't it it passed the error into
35:37 - got data
35:38 - so I have a mistake I'm pausing this
35:41 - video because what happens next is me
35:44 - spending like a really long time trying
35:46 - to figure out what to do with error
35:47 - codes and the error callback and that's
35:49 - not really relevant to the pull request
35:51 - aspect if you want to see that part
35:52 - check the video description for the
35:55 - whole hour and a half livestream but I'm
35:57 - just gonna jump now to the part where I
35:58 - figure out what to do with the error
35:59 - codes and continue alright hope you're
36:02 - just playing this video can you keep
36:03 - watching maybe okay it's done let's do
36:08 - some more checks okay
36:13 - so let's see here let me check now my
36:16 - empty example again let's just first see
36:19 - if it works correctly so I've got the
36:21 - got data and the got error callback so I
36:24 - am now going to check the example and we
36:32 - can see okay it works if I give it a
36:36 - nice binary file it if I give it the
36:42 - wrong file name great it gives me an
36:45 - error that's what I want
36:46 - the callback never happens because there
36:48 - is nothing to get file not found that's
36:51 - what I want
36:53 - let's see if I give it a URL that's like
36:58 - doesn't exist what does that do all
37:02 - right
37:03 - Oh got a 404 and it also got a No so
37:06 - this is fine and it got an error so
37:11 - that's fine I'm getting everything
37:12 - getting everything I want with the error
37:14 - callback maybe I want something more
37:17 - specific here but I'll leave this here
37:20 - and then what I'm gonna do is let me
37:25 - check preload again let me just check
37:28 - make sure preload is not broken and so
37:32 - I'm going to say function preload and
37:40 - let data data equals load bytes with
37:46 - this made-up URL
37:52 - and let's say let's console.log the data
37:57 - okay so now I just want to check preload
38:00 - this is the preload code with let me
38:02 - check it first with an actual correct
38:05 - file whoops oh I own a console log the
38:11 - string data I want to console log the
38:13 - data perfect now let me check it with a
38:16 - file that doesn't exist hangs and this
38:20 - is the actual this is what p5 does
38:22 - natively it hangs if the file doesn't
38:24 - exist it doesn't keep going so that's
38:26 - what it should be doing and then let's
38:28 - if I get a cours error across origin
38:31 - resources like I try to access some URL
38:34 - great perfect not found and that error
38:37 - so this is all perfect this is exactly
38:40 - what I wanted to do my tests have passed
38:42 - guess what I'm pretty much done that was
38:45 - a very loud Bell okay so now what
38:49 - happens now I want to say git status
38:51 - just to see what's going on in the
38:53 - repository so whoa where am I here
39:01 - modified oh yeah sorry
39:03 - so I've modified a bunch of things I
39:05 - modified empty example sketch dot yes
39:08 - that's not part of the work that I'm
39:09 - doing I've modified cord uh chance that
39:12 - is part of the work I'm doing I modified
39:14 - files that yes that's the work that I'm
39:15 - doing I am NOT if I've added this weird
39:17 - binary file that's just for my own
39:18 - testing I don't want to deal with that
39:20 - so what I want to do now is I want to
39:22 - say git add source core cord is because
39:28 - I want to add these changes to cord a s
39:31 - then I want to add a source I Oh files
39:37 - Dutch ass okay then what I want to do is
39:40 - I want to say git commit oh boy it's
39:44 - gonna run something for me wow so
39:48 - there's and now ooh it is giving me now
39:52 - I can write my commit message okay
39:55 - implementing load bites this is relevant
40:01 - to issue two six seven four
40:06 - so then I'm going to write this pull
40:10 - wrote this pull request I'm not gonna
40:14 - say pull request this commit adds load
40:19 - bites adds the load bites function to
40:24 - p5.js as demonstrated during a live
40:30 - stream on the coding train there are
40:36 - some there are some remaining issues
40:41 - here for example there are no tests and
40:49 - I am also not using HTTP do which would
40:55 - be more of the convention here for p5 as
41:00 - discussed in issue 2 674 I also I am
41:06 - also handling errors like 404 or cores
41:13 - in perhaps an odd way and would be happy
41:19 - for any feedback okay so this is my nice
41:23 - long commit message and what I'm going
41:27 - to do is I'm now going to so I have I
41:30 - have my git commit tied to Adam so I can
41:33 - now so I can write a nice long
41:35 - thoughtful commit message this will all
41:37 - be ignored this is just information for
41:38 - me I'm gonna hit close and now I'm gonna
41:41 - look at terminal and the commit has been
41:45 - made to the add load bytes branch and
41:48 - now I am going to say now I'm gonna say
41:51 - git remote - V so the remote that this
41:55 - is tied to is the coding train a fork so
42:00 - I can say I'm going to say git push
42:03 - origin load what did I call this branch
42:09 - git git branch add load bytes git push
42:14 - origin add load bytes so I'm going to
42:16 - push if I have been made this to master
42:19 - by the way I could have said
42:19 - push my changes to master to a new
42:22 - branch called add load bytes but since
42:25 - its I mean a branch already gonna say
42:26 - git push origin add load bytes
42:28 - I forgot dear diary should I amend I
42:32 - definitely think I need to amend that I
42:33 - forgot okay so here we go I pushed it
42:37 - there now I'm gonna go to I'm gonna go
42:41 - to my fork
42:42 - who here is it so many things open I'm
42:45 - gonna hit refresh and look at this less
42:48 - than a minute ago I pushed this add load
42:50 - bytes branch I can now do compare and
42:53 - pull request compare pull request I'm
42:58 - eyes right so this is now saying hey I'm
43:04 - going to I want to pull request add load
43:06 - bytes from coding train /p v yes to
43:10 - processing p5 just base master and then
43:13 - I think what I want to do is I want to
43:15 - suggest some reviewers so Kenneth Lim
43:20 - should definitely be a reviewer Kenneth
43:24 - Lim posted some great comments I don't
43:27 - know if oh I should definitely add
43:30 - something so when I did my commit
43:32 - message it had these like line breaks in
43:34 - it which are bothering me here and I
43:37 - also want to add some formatting like
43:40 - this the back ticks to format this I
43:45 - should say a thanks to for for for this
43:55 - branch which was a nice reference for me
43:59 - so I just want to add a little thank you
44:00 - here too and I'm gonna go back to my my
44:10 - code where I kept a little this URL to
44:13 - remember it so and then I'm gonna write
44:21 - Oh
44:26 - [Music]
44:28 - it's okay if this doesn't get merged
44:33 - hopefully doing this on a live stream
44:37 - was helpful to somebody all right so now
44:44 - we're gonna look and see like look
44:45 - there's the change I made here's the
44:48 - load bytes function Oh also also an
44:54 - example code is missing finally I am not
45:00 - using rewriting my message dear diary
45:09 - Sincerely Yours the coding train okay so
45:15 - let's now go back and say preview and
45:20 - this can actually because of a nice way
45:23 - that it's rendering this can just go
45:24 - like this
45:25 - let's read this over implementing load
45:28 - bytes 264 dear diary this commit adds
45:32 - the load bytes function to p5.js as
45:36 - demonstrated during a live stream on the
45:37 - coding train there are some remaining
45:40 - issues here for example there under
45:42 - tests also example code is missing
45:47 - finally I'm not using HTTP due to
45:49 - Norfolk EQ vention for p5 as discussed
45:53 - I'm also handling errors like 4/4 and
45:55 - perhaps an odd way
45:56 - ba-ba-ba-ba-ba-ba-ba-ba-ba it's ok it's
45:58 - ok if this doesn't get merged hopefully
46:00 - doing this one lashing was helpful to
46:01 - somebody okay all right I think we're
46:03 - ready everybody I think we've now come
46:05 - to the end of this video
46:07 - drum roll please we are going to create
46:12 - the pull request
46:19 - and that was a 73 and full hour and 42
46:26 - minutes to submit a pull request to p5
46:31 - yes live on YouTube
46:37 - [Music]
46:42 - you