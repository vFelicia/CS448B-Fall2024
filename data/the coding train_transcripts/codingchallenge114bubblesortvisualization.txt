00:00 - (whistle toots)
(bell dings)
00:01 - (laughs)
- Hello!
00:03 - I should let you know I'm
about to do a coding challenge,
00:05 - you're gonna watch this, apparently,
00:07 - and I have been live streaming
00:09 - for three and a half hours
(laughs)
00:12 - so my apologies in advance.
00:13 - But I'm excited to do this,
I really wanted to try this
00:16 - for awhile, it's been
a suggested many times.
00:19 - I am going to visualize
a sorting algorithm
00:22 - and I'm gonna start with the Bubble Sort,
00:24 - one of the most basic sorting
algorithms of them all.
00:26 - And I might just do a follow up one with,
00:28 - like, a Selection Sort
and then a Quicksort
00:30 - and other sorts, so suggest
all your fancy sorting
00:33 - algorithms in the comments below (laughs).
00:35 - But this is inspired by many
things but most notably,
00:39 - probably, this article
called Visualizing Algorithms
00:42 - by Mike Bostock.
00:43 - This is actually an article from 2014,
00:47 - it has a wonderful set of
interactive explanations
00:50 - of different algorithms, I'm
gonna search for sorting,
00:55 - and...
00:58 - Oh, that's the shuffling one, sorry.
01:00 - (laughs)
I missed sources for sorting.
01:01 - Ah, right here!
01:02 - So this is visualizing
the Quicksort algorithm.
01:04 - I like that what's happening in this
01:06 - is that it's sorting all
these lines by their angle,
01:10 - so I think that there's
a lot of really unique
01:11 - and interesting visual possibilities,
01:14 - that you could visualize
data and then sort it
01:17 - and then visualize that sorting process.
01:19 - Maybe you could sort, like, musical notes
01:21 - or you could sort text,
there's so many possibilities.
01:23 - So I encourage you to be creative
01:25 - with your own visual interpretation
of what I'm going to do
01:27 - and share it with me.
01:29 - I'm gonna do this in
Processing, my happy place,
01:32 - thank you very much.
01:33 - I will make a Java script
version of it, as well,
01:35 - with the p5js library
so you can find the code
01:38 - for both of those things linked below.
01:39 - Okay, so let's just talk about
what a Bubble Sort is first.
01:43 - You know, of course, wait.
01:44 - If you've watched any
of my video tutorials,
01:46 - I talk about bubbles a lot, so
this is kind of appropriate.
01:49 - So, let's say we have a list of numbers
01:51 - and list of numbers is in an array.
01:54 - So there is an array of
one, two, three, four, five,
01:57 - six things and they're
numbers like six, two, nine,
02:00 - seven, three, four.
02:03 - What a Bubble Sort does, is
it starts by just comparing
02:07 - pairs of numbers.
02:10 - So, we start at the beginning
02:11 - and we compare these two numbers.
02:13 - And let's say I want the list to be
02:16 - from smallest to largest.
02:17 - I could want it from largest to smallest,
02:18 - or I could be comparing the
values in any number of ways
02:21 - but if I want from smallest to largest,
02:24 - looking at these two values,
I should switch them.
02:27 - So, what am I gonna do?
02:30 - I'm gonna have to draw this a lot.
02:32 - I swap them, I perform a swap.
02:34 - Two, six, nine, seven, three, four.
02:36 - Now, I look at these two values.
02:38 - Wait, this one's bigger than that one,
02:40 - I don't need to swap.
02:41 - Now I'm gonna look at these two values,
02:43 - I do need to swap them.
02:44 - Seven, nine, three, four, two, six.
02:48 - Now, I look at these two
values, nine is bigger.
02:50 - Two, six, seven, three, nine, four.
02:53 - Okay, now I look at the last
two values, nine is bigger.
02:56 - Two, six, seven, three, four, nine.
02:59 - Now, look at this.
03:00 - The largest value is always
gonna end up in the last spot.
03:04 - So, I'm now done all the
way up to the last spot,
03:07 - so I could do the same exact
checking the pairs of values
03:10 - but just do them one at a time,
03:12 - all the way up to the last spot.
03:14 - So, this Bubble Sort is probably
03:18 - the least efficient
sorting algorithm, in fact,
03:23 - it is an n2, big O notation.
03:27 - Big O notation about the
order of an algorithm,
03:29 - how long does it take for an
algorithm to perform, right?
03:33 - If I have six,
03:37 - an array of six things,
03:38 - I've gotta do, how many slots?
03:41 - One, two,
03:42 - One, two, three, four, five.
03:44 - Then I have to do one, two, three, four.
03:46 - And then, one, two, three.
03:48 - So, as the array gets bigger,
03:51 - the amount of swaps I need
to check grows exponentially.
03:55 - So, this is a slow algorithm
but I don't care about that
03:57 - 'cause I wanna visualize it.
04:01 - All right so, the next
thing we're gonna do
04:02 - is we need some way
04:03 - of visually representing the array.
04:06 - So I'm gonna say void
setup(), void draw().
04:10 - I'm gonna make an array,
I'm gonna make a window
04:13 - of size 600, 600.
04:15 - I'm gonna set the background to zero.
04:19 - I am going to create an array
04:22 - of values, and that's gonna be an array.
04:27 - I wanna have the same number of values
04:32 - that I have as pixels, so I'll say width.
04:35 - And then I want each,
04:37 - I wanna loop over that entire array.
04:42 - And I wanna say values index
i equals random height.
04:47 - So, I wanna get a random number from zero
04:49 - to the height of the window
04:51 - because I'm gonna visualize that.
04:54 - I'm gonna visualize it now by saying
04:56 - for int i equals zero, i is
less than values.length, i++.
05:01 - I'm gonna draw a line from
the bottom of the window,
05:08 - so, i, height
05:09 - to i, height minus values index i.
05:13 - So I'm going to draw a line
with that random number
05:18 - and then,
05:21 - I am going to run it.
05:23 - Oh, maybe I need to set the
stroke of the line to be 255
05:29 - and there we go.
05:30 - So this is what I wanna
sort, this looks kinda weird.
05:33 - Let's it make it,
05:33 - I think I wanna different aspect ratio.
05:35 - Let's make it like 800
by 500 or something.
05:40 - Okay, that's better.
05:41 - So this is what I wanna sort,
I wanna sort all of these
05:44 - so we see the smallest one on the left
05:46 - and the largest one on the right.
05:48 - And I wanna watch the sorting
process happen in real time.
05:52 - All right, let's think about this.
05:53 - So, first let's program
that sorting algorithm.
05:55 - Let's just do the sort right here.
05:58 - First of all, Processing, I'm pretty sure
06:01 - has built into it a function called sort.
06:05 - Ta-da!
(laughs)
06:06 - I sorted it!
(bell dings)
06:07 - Goodnight, thank you very much.
06:09 - (triumphant music)
06:10 - See you later.
06:10 - No, so I need to write
the sort algorithm myself,
06:14 - so let's do that first.
06:16 - So the first thing I need
to do is I need to have
06:18 - i equals zero, i is
less than values.length,
06:24 - so I need to, what I'm gonna
do is for every single,
06:29 - for the amount of things in the array,
06:32 - I now need to check
06:34 - for int j equals zero,
06:37 - j is less than values.length
06:41 - minus i j++.
06:45 - Think about that.
06:46 - The first time I go through, I
have to do every single swap.
06:52 - The second time I go through, I have to do
06:54 - every single swap up until one less,
06:57 - so then two less, then three less.
06:59 - So as i goes up
07:01 - I check fewer, I check i
less elements in the array.
07:06 - All right, so now
07:08 - for each one of these
things I'm going to check
07:16 - I'm gonna get value a is values index j
07:21 - and value b is values index j+1.
07:27 - And then I'm gonna say
if a is great than b,
07:32 - then I need to swap a j and j+1.
07:36 - So, this is a function
that I intend to write,
07:38 - a function called swap which
gets the values into indices
07:44 - and swaps the values in that array.
07:45 - I'm putting that in a separate function
07:47 - 'cause it's a very common algorithm
07:49 - to swap two values in an
array and I might as well
07:50 - encapsulate that somewhere,
07:52 - encapsulate is probably the wrong word.
07:53 - I might as well farm that
off to another function.
07:55 - Now, the thing is, I think
this actually should go
07:57 - to minus i minus 1, because
technically when I'm checking
08:01 - the last element I am
checking the last element
08:05 - against the element before.
08:07 - The last element has no
neighbor to its right
08:09 - so I actually should go minus 1 here.
08:12 - So then, I am going to
write this swap function.
08:17 - I'm just gonna put it at the bottom, swap.
08:20 - This is a generic function
08:21 - that gets any sort of array and an index,
08:26 - and an index i and an index j
08:30 - and what it does is, the idea,
08:32 - is what I wanna say is index i
08:35 - equals the spot that j has
08:38 - and j, this is swapping the values, right?
08:41 - Maybe I should make these a and b,
08:43 - it might be a little bit more clear.
08:45 - A should get b's value and b
should get a's value, right?
08:50 - That's swapping it.
08:51 - If you haven't seen this before,
08:52 - think about what's wrong here.
08:54 - What's wrong here?
08:55 - A should get b's value,
b should get a's value.
08:58 - That's conceptually
correct but guess what?
09:01 - If b gets a's value, a just got b's value,
09:03 - so b is getting b's value, ah!
09:05 - So, really what we need
to do is temporarily store
09:10 - a's value, give a's b value,
but don't worry we've saved
09:14 - a's value in temp, and now,
09:16 - this is actually swapping
those two values.
09:19 - Okay, here we go.
09:20 - And now if I run this,
09:23 - haha, yes, so this sorted.
09:25 - So, great, I sorted
everything with a Bubble Sort
09:28 - right up here in the top.
09:30 - But now I wanna animate this.
09:32 - I wanna just do one of these every frame,
09:35 - so now I need to think
about the draw() loop.
09:38 - Based I need i and j to become
global variables, right?
09:42 - The idea is here I wanna do one of these
09:44 - each time through draw()
09:49 - I wanna basically do this once
09:53 - and then I want the loops
to just sorta happen somehow
09:57 - outside, like, I gotta do those manually.
10:00 - So, I gotta say int i starts at zero,
10:03 - j starts at zero, right?
10:05 - And so now, I do this first
with i as zero and j as zero.
10:10 - Then, what?
10:10 - J goes up, j equals j+1.
10:16 - Now...
10:18 - Now,
10:19 - if j gets to the end, right?
10:23 - J's limit was values.length
minus i minus 1.
10:28 - So if j is greater than or equal to
10:32 - values.length minus i, minus 1,
10:35 - then what happens?
10:37 - J goes back to zero
10:40 - and i equals i+1, right?
10:43 - So this is basically
doing one step of the loop
10:46 - each time through draw().
10:47 - J goes up always and
when j gets to the end
10:51 - it goes back to zero and i goes up,
10:52 - and then j is gonna go
through all of that again.
10:54 - I think that's the right idea.
10:56 - Now, however,
10:59 - I do need an end condition, right,
11:01 - because at some point I only wanna do this
11:04 - if i is less than values.length.
11:09 - As soon as i becomes values.length
11:10 - I wanna stop doing this entirely
and I do something like,
11:14 - it's finished, so I could
say print line finished
11:19 - and I could say no loop.
11:21 - Dare I say that this challenge
might actually be complete?
11:25 - I'll be shocked, oh my goodness.
11:28 - Shortest challenge ever, I love it.
11:32 - Oh no no no no, no no no no, no.
11:35 - (buzzer sounds)
11:37 - Oh, whoops!
11:39 - I think I did everything correctly
11:41 - but I just put this inside here.
11:43 - The whole point is do
that and when you're done,
11:45 - then say print line
finished and noLoop, right?
11:49 - Do all this stuff, the
incrementing through the sorting
11:52 - and then when I am done, say that.
11:54 - Okay, okay, okay.
11:55 - (exhales loudly)
11:56 - Breathe everybody, let's breathe.
11:57 - Here we go, here we go.
12:01 - Oh, it's sorting, look!
12:02 - Look at that one line
just traveling across,
12:05 - hi over there!
12:07 - Oh boy, this is gonna
take a really long time.
12:09 - (laughs)
12:11 - How much time do you have?
12:13 - (cheesy elevator music)
12:16 - Okay, never mind, never mind.
12:18 - I did some calculations
12:19 - and that was gonna take about
an hour and 10, 20 minutes,
12:23 - hour and a half, something
like that to complete.
12:25 - So we're gonna, number one,
is gonna be like, oh, I know,
12:28 - let's just do a little
tiny 100 by 100 window.
12:33 - Oh, maybe we could sit here
and actually watch this sort.
12:37 - So, I do kind of like the
idea that I'm seeing that,
12:41 - sort of like, line going over time.
12:45 - But...
12:48 - yeah, I'm gonna need to speed things up.
12:49 - So, let's do that.
12:53 - Let's go back, let's not be as ambitious.
12:55 - Let's do 400 by 300 and
then I'm gonna do this,
12:59 - I'm gonna do this.
13:01 - I mean, I could do the full j each time
13:03 - but then it's really
like a Selection Sort,
13:05 - which is, I don't wanna do.
13:07 - So, I'm going to (laughs)
13:09 - this is a flawed idea.
13:10 - I'm just gonna do like 100 per frame.
13:15 - So I'm gonna add, oh, can't add.
13:17 - I'm gonna call this n.
13:19 - I'm gonna just do this
100 times per frame.
13:23 - You know what, the print line
13:24 - is something I really
should take out here.
13:30 - I should basically, I'm
making this a Selection Sort.
13:32 - By the way, spoiler alert,
13:34 - the next video I was gonna make
13:36 - I'm now basically making now.
13:37 - A Selection Sort is, instead of swapping,
13:40 - bubbling through the whole array,
13:43 - you just look through the whole
array, find the biggest one,
13:45 - put it at the end.
13:46 - And look through it again,
find the biggest one
13:48 - and put it through the end.
13:49 - So, I would have to write a
slightly different algorithm
13:51 - to do that, but in essence,
I'm gonna animate this
13:54 - as a Selection Sort by...
13:57 - going here and just saying
14:00 - just having i go up by 1.
14:03 - So, every frame I'm gonna say for,
14:06 - I'm gonna take this,
14:08 - and I'm just gonna do all the js.
14:11 - Oh, wait a second.
14:13 - No, no, no no no no, no no no no, no.
14:15 - I made a big mistake here.
14:17 - If I'm gonna do it more than once,
14:19 - I gotta swap each time, too.
14:21 - (laughs)
14:22 - So this should really,
14:24 - I don't know why I have this here.
14:25 - This should have all along,
14:27 - boy, now I suddenly
made this a long video,
14:30 - 'cause of my incompetence.
14:31 - I should have had this
all along, basically,
14:35 - well, I like the idea of
doing it first, but...
14:39 - in here, so hold on.
14:41 - Bear with me for a second.
14:42 - I'm gonna leave this up here,
14:44 - I'm gonna take this here,
14:46 - I'm gonna do one i each time
14:50 - then for every j
14:55 - I'm going to check the values
14:58 - so I'm still doing the Bubble
Sort but I'm only gonna update
15:02 - and then, every frame
15:04 - I'm just gonna say i++
15:08 - and then I have some extra brackets here
15:09 - that are totally unnecessary.
15:10 - All right, this should now
15:15 - visualize a little bit faster.
15:16 - Oh, that's kinda nice.
15:18 - (laughs)
15:19 - There we go.
15:20 - (smacking kiss)
15:22 - Now, let's make it bigger.
15:26 - Let's make it full screen.
15:29 - Come on, everyone.
15:31 - So, this is my basic sorting algorithm
15:35 - that is doing a Bubble Sort
but I'm only visualizing
15:38 - every way all the way through, so really,
15:40 - in the end it's kind of like a
Selection Sort visualization.
15:43 - You should do something
like sort by color,
15:46 - sort by frequency of audio, sort by text,
15:50 - something else, and in fact,
15:52 - what if I use perlin
noise or like a sine wave?
15:57 - What if I said...
16:01 - noise of i divided by 100,
16:05 - this is using perlin noise,
16:06 - times height, this should
be kinda interesting.
16:12 - Whoa, oh, that's weird.
16:14 - Oh, 'cause I used integers.
16:17 - Ah, because I didn't say point zero,
16:18 - that's kinda cool.
16:21 - Let me do this.
16:23 - This is what I meant to do.
16:24 - Yeah, look at this.
16:25 - So I had like this mountainous
region that I'm now
16:27 - kind of like sorting, this
is actually kinda cool.
16:30 - Oh, this is more than
just a Selection Sort
16:32 - because the other stuff is
swapping, as well, I think.
16:35 - It's confusing to think,
16:36 - it's hard for me to think about this.
16:38 - Anyway, you get the point.
16:39 - (laughs)
16:39 - There are lots of possibilities here.
16:41 - Make your own beautiful version of this.
16:43 - Think about the algorithm
in a different way,
16:45 - think about the data you're
sorting in a different way,
16:47 - put this one the web, share it with me.
16:50 - Sorting train, #sorting train,
16:52 - on Twitter #sorting
train, there'll be a link
16:55 - to thecodingtrain.com webpage
16:57 - where you also can submit contributions
16:59 - and I look forward to
seeing what you make, okay?
17:01 - Thanks for watching!
(bell dings)
17:03 - (groovy upbeat music)
17:10 - (bell dings)