00:00 - hello welcome to a coding challenge this
00:03 - is a coding challenge about recursion
00:05 - recursion is a technique it is actually
00:08 - a concept about self reference recursive
00:12 - function is a function that is defined
00:13 - according to itself this is what I'm
00:15 - gonna do in this coding challenge what
00:16 - does that even mean
00:17 - but I'm the reason why I want to show
00:19 - you recursion is the key concept behind
00:21 - the fractal geometry of nature so I have
00:24 - here benoit mandelbrot seminal book on
00:26 - fractals the fractal geometry of nature
00:28 - I have a wonderful book I encourage you
00:30 - to if you're interested in this subject
00:31 - it's it's the beginning of everything in
00:34 - terms of this subject so I encourage you
00:36 - to take to get it for yourself or borrow
00:38 - it from the library and I have a lot of
00:41 - other videos you can chow link to them
00:42 - in this video's description I made
00:44 - fractal trees nature of code tutorials
00:47 - about fractals fractals being a
00:49 - self-similar shape a shape that's kind
00:52 - of made up of itself recursion is this
00:54 - concept of self reference a recursive
00:56 - function is a function defined according
00:58 - to itself so it's a really elegant way
01:02 - of creating patterns I I'm gonna do that
01:05 - right now I'm gonna make a really simple
01:06 - one it's just basically the I'm gonna
01:08 - build the example that's been in
01:10 - processing for many years or something
01:12 - like it from scratch and then you I've
01:14 - been so enamored with the previous ten
01:16 - print coding challenge there's just a
01:17 - simple bit of code and what people made
01:19 - from it so I'm hoping that the same
01:20 - thing is gonna happen I don't know what
01:21 - the hash tag should be hash tag coding
01:26 - trained recursion some people come up
01:28 - with something better
01:28 - ten pretty I would say recursion but
01:30 - that's no just recruit I don't know the
01:32 - point is share all those things you make
01:34 - on Twitter and also in the readme file
01:36 - that'll be on github link from this
01:38 - video's description so let's get started
01:40 - so I'm gonna start with some really
01:42 - simple code I have a sketch which makes
01:44 - a canvas that's 600 by 400 I am just
01:47 - going to draw in the middle of the
01:49 - canvas an ellipse and it's going to be
01:52 - at 300 comma 200 and it's going to be
01:56 - 300 pixels wide and 300 CIL's high I
01:58 - always forget this but with ellipse if
02:01 - the width and height are equal I can
02:03 - just use one argument and there it is ah
02:06 - now one thing I want to do about this is
02:09 - I want to say stroke 255 and no fill
02:13 - so let's say for the sake of argument
02:16 - what I want now is to repeat this
02:17 - pattern I want this ellipse then another
02:20 - ellipse then another ellipse then
02:22 - another lips and they're shrinking as
02:23 - they move off to the right well the
02:25 - typical way that I would do that is with
02:27 - a loop structure a while loop or a for
02:29 - loop this is a control structure that
02:31 - allows you to repeat code like drawing
02:34 - ellipse and change what's happening each
02:36 - cycle through the repeat but I'm gonna
02:38 - do it in a different way recursion is
02:40 - much recursion a recursive function
02:43 - executes with a loop unto itself but in
02:47 - a slightly different way so let me keep
02:48 - going with this and I'm gonna say what
02:51 - if I wrote a function almost absurdly
02:53 - just called draw circle and that
02:55 - function I just put this ellipse in it
02:57 - and what I said is let me give it an X a
03:00 - Y in a diameter and so I'm gonna draw
03:03 - the ellipse of XY damnit diameter and
03:05 - then I'm gonna set call say draw a
03:07 - circle at 300 200 300 so this is like a
03:12 - totally like absurd thing that I've done
03:15 - the code runs exactly the same right
03:18 - this is the same what I've done is
03:20 - basically redefined the ellipse function
03:22 - and give it a different name and then
03:24 - call that so this seems kind of
03:25 - ridiculous but there's a reason why I'm
03:27 - doing that what would happen now just
03:29 - bear with me for a second what would
03:31 - happen if right in here I said hey draw
03:34 - another circle at X plus I don't know 20
03:39 - Y D so this is now this idea of
03:44 - recursion I'm defining draw a circle
03:47 - according to itself so when I execute
03:49 - draw a circle it draws an ellipse then
03:51 - calls itself so it draws an ellipse then
03:53 - calls itself so it draws an ellipse then
03:54 - calls itself so it draws an lips and
03:56 - calls itself I'm gonna stop this
03:57 - eventually drops calls itself this could
04:00 - result in an infinite loop so I need
04:03 - some way just like with a for loop or a
04:05 - while loop I need to make sure I have an
04:07 - exit condition so if this function is
04:08 - going to recursively and you know this
04:10 - probably looks like something you're not
04:11 - supposed to do right you can't call the
04:13 - function from inside the function but in
04:15 - fact
04:16 - is a technique that happens in many
04:18 - algorithms require this kind of
04:20 - recursive thinking what I'm doing right
04:21 - now does not require this cursive
04:23 - recursive thinking I could probably do
04:24 - this more easily in a for loop but in a
04:27 - moment I'm gonna do something else that
04:28 - a for loop wouldn't really work as well
04:30 - for so here we go I'm gonna give myself
04:32 - an exile weirdly let's just see what
04:34 - happens do I crash my browser yeah you
04:37 - know what so what happened is I got this
04:39 - error
04:40 - fortunately the browser was like smart
04:41 - enough to say like yeah yep hey hey
04:43 - there buddy you are calling yourself way
04:47 - too much stop so it's a maximum call
04:50 - stack size exceeded in blah blah blah
04:52 - like draw circle circles wrong oh this
04:54 - is bad so it stopped but you can see I
04:56 - did have this result of it doing itself
04:59 - over and over again so I could add an
05:00 - exit condition and say well only
05:02 - actually only actually call yourself if
05:06 - X is less than width so if X is changing
05:12 - right so keep going until you get to the
05:15 - edge and now I could do this again and
05:17 - there's it stopped right but this is not
05:20 - what I want to do actually what I want
05:21 - to do I want to move but I also want to
05:24 - shrink the diameter so with each new
05:27 - ellipse
05:28 - I want the diameter to shrink so we can
05:32 - see that's happening here the diameter
05:33 - shrinks by half and I also want to do
05:36 - something where I move it according to
05:39 - half of the diameter so so now I'm
05:44 - moving each ellipse over according to
05:46 - the radius and shrinking which is half
05:48 - the diameter it's turning it by half so
05:51 - there we go oh and I got the so I got
05:53 - the call thing so now I need to use as
05:55 - long keep doing this as long as D is
05:58 - greater than 2 whoops
06:01 - as long as D is greater than 2 not less
06:03 - than so there we go so now we see I have
06:07 - this ellipse that's moving to the right
06:08 - that's moving to the right that's moving
06:10 - to the right now let's think about this
06:11 - for a second so what I have remember
06:14 - what I have is an ellipse with a smaller
06:17 - one and a smaller one and smaller one
06:19 - and a smaller one that's what I have now
06:23 - you might think well what if I want to
06:24 - also have the ellipses going to the left
06:27 - so I could pretty easily do that
06:29 - I could have two for loops or one for
06:31 - loop that kind of grows and shrinks but
06:33 - what if what I really want is to say
06:34 - this is not an ellipse a circle with
06:37 - circles to the right and the left what
06:40 - it means to be a circle is to have a
06:42 - circle to the right and the left so this
06:44 - circle also needs a circle to the right
06:46 - and the left but then this one needs one
06:48 - to the right and left oh and this one
06:49 - needs to the right and left and this one
06:50 - needs to the right to the left right and
06:52 - left right and left oh but this one's
06:53 - right up this goes on forever
06:55 - this is this idea of recursion a fractal
06:58 - a self-similar shape if i zoom in on any
07:01 - given portion it's going to and look
07:03 - like the whole the whole shape itself
07:05 - this is a perfectly self similar fractal
07:08 - where every piece of it is exactly the
07:11 - same but one thing you think about you
07:12 - could build a little randomness into
07:14 - here and that's actually referred to as
07:15 - cystic a stick fractal and something
07:17 - like lightning would be that if you look
07:19 - at lightning right it's kind of all this
07:23 - like or blood vessels or trees but not
07:26 - every piece of it is exactly the same
07:28 - but the kind of idea of it is the same
07:29 - so map a little tangent there let's
07:31 - actually make I wanted this to make this
07:33 - happen
07:33 - so let me come back in here so now right
07:36 - this is what I have and so now what I
07:38 - can do right is I can say hey why don't
07:41 - you not only draw a circle to the right
07:43 - and to the left now I I died i
07:46 - double-dog dare you with the cherry on
07:47 - top and some non-dairy whipped cream
07:51 - low-fat not a low-fat you got supposed
07:52 - to do low-fat anymore anyway I dare you
07:54 - to try to recreate what I'm just gonna
07:56 - show you right now without recursion
07:57 - somebody will do it and my mind
07:59 - bull-like explode but it's this is the
08:01 - this is just like one two three four
08:04 - five six seven lines of code that's
08:06 - going to do something kind of phenomenal
08:07 - there we go
08:09 - so this is the result right it's not
08:11 - just circles to the right and left but
08:13 - it's circles look at this zoom in that
08:15 - looks just like what I drew zoom in this
08:18 - looks just like right now I'm zooming
08:19 - using the zoom feature of the Mac I'm
08:22 - using a Mac but could you actually draw
08:27 - zoom use scale or some other kind of
08:29 - trickery to like do this sort of like
08:30 - infinite zoom into the fractal could you
08:32 - animate this don't draw circles use
08:35 - color there are so many possible things
08:38 - you could expand on from
08:39 - you know just to like keep going for
08:42 - another minute or two I could do them
08:46 - all so oh I could say hey put some
08:49 - circles down right y plus D times zero
08:55 - point five and let me make the canvas a
08:59 - little bit bigger and look at this now
09:01 - what's crazy about this is oh my god I
09:03 - can't believe this is happened
09:07 - this is actually called the sierpinski
09:09 - triangle which formed out of all these
09:11 - circles which is a triangle filled with
09:14 - other triangles filled with other
09:15 - triangles for your blood rounds that's a
09:17 - fractal you could try to make I mean I
09:18 - mean this sort of weird roundabout way
09:20 - by putting all these things next to each
09:21 - other so what if I have them go up what
09:24 - if I have them only go to the right and
09:25 - down like this is like now I'm just too
09:27 - curious I'm going to take out to the
09:29 - left so this is to the row that's kind
09:32 - of blue it's like the fractal thing on
09:34 - its side there are so many possibilities
09:36 - here so I want to think though like so
09:39 - couple things one is this is now
09:41 - executing over and over again but I'm
09:43 - not doing anything to animate it you
09:46 - know I could kind of like give the
09:49 - initial size to like Mouse X so you can
09:51 - see it's kind of like I'm zooming in and
09:54 - out in a way and interestingly enough
09:56 - but so so there's a there's a lot of
09:58 - things I could do to animate but I'm
10:00 - gonna add no loop right now because I
10:02 - also want to show you you know if I were
10:04 - to add just a little bit of randomness
10:06 - into this let me go back to the original
10:08 - one but for example what if I said let
10:12 - new D and did I use var no I didn't have
10:15 - I don't have any variables yes let new D
10:18 - equals D times random you know 0.2 to
10:21 - 0.8 and so now I'm gonna say plus new d
10:26 - divided by 2 so I could use put some
10:29 - randomness in here I don't know what
10:30 - this is gonna do this is probably a bad
10:33 - idea for some reason I can't think of
10:34 - just yet and you can see I don't know
10:38 - that so this was I don't love what I got
10:39 - came up with here but you know every
10:43 - time I do this it's gonna give me a
10:44 - slightly different version of it it's
10:46 - not perfectly this is a stochastic
10:48 - fractal the quality of how the shape is
10:51 - repeating itself similar
10:53 - and someone's telling me to do D times
10:55 - 0.25 in the chat Bay that's going to
10:58 - create a more interesting pattern but
11:01 - this so and again I have discovered from
11:03 - doing the 10:00 print coding challenge
11:05 - that the viewership of these videos is
11:07 - way more creative and has so many
11:08 - beautiful design ideas than I do so I
11:10 - really just need to stop because I don't
11:12 - have any of those ideas but I'm trying
11:14 - to show you some possibilities here so I
11:16 - am going to just do one other thing
11:18 - which is I'm going to take this and make
11:19 - this 0.25 which somebody in the chat was
11:22 - telling me to do oh yeah so that's kind
11:25 - of cool
11:26 - wait wait wait let me make the first
11:29 - circle bigger oh but maybe I need to oh
11:33 - but now I don't want to go over by / -
11:36 - no yeah so that's interesting well I
11:39 - make crazy weird recursive eyes anyway
11:42 - see I'm terrible at this
11:43 - so have fun make some parameters make
11:46 - some color choices make some design
11:47 - choices share with me on Twitter hashtag
11:49 - recursion Cody Trey Oh somebody I'll pin
11:54 - a comment what the some people come up
11:56 - with a good hashtag idea and I'll pin it
11:57 - to the top of the comments and also
12:00 - contribute the readme and I'll show a
12:02 - bunch of people's recursive designs on
12:04 - next week's coding train which will be
12:06 - next week okay talk to you soon
12:08 - thanks for watching
12:13 - [Music]