00:00 - okay we're still working with our data
00:02 - at some point we're gonna start training
00:05 - a model what have I done so far okay so
00:07 - just to recap for a second I've got this
00:11 - whole database of crowd-sourced colors
00:14 - with a label and now I've converted all
00:17 - that stuff to tensors so and I'm just
00:19 - looking at the inputs now the inputs
00:21 - that I want to use for my machine
00:22 - learning model so I 5643 RGB values so
00:27 - the shape of the tensor is 5060 or 43
00:30 - comma 3 and I can look at it here I have
00:32 - all the RGB values normalized to 0
00:34 - between 0 and 1 now I need to do the
00:38 - wise I need to figure out what are the
00:40 - target outputs associated with each RGB
00:43 - value and this is exciting because we
00:46 - are going to cover we being me and you
00:48 - being the person watching I am going to
00:50 - cover a concept known as one hot
00:52 - encoding so we have to understand why
00:56 - we're going to do one hot encoding I
00:58 - need to jump all the way to what would
01:01 - essentially be like the very end of this
01:03 - video series what am I asking the neural
01:06 - network that I'm gonna build right the
01:07 - neural network that I've been in build
01:08 - is gonna have three inputs are GB it's
01:12 - gonna have some architecture some
01:13 - configuration of all the stuff in the
01:15 - middle the inputs being RGB what do I
01:20 - want the outputs to be the output should
01:22 - be a label right I want to say is it
01:26 - reddish is it blue ish but this is just
01:30 - the label that we I've used as a human
01:32 - being to say what I think it is like if
01:35 - I was doing image classification the
01:36 - label would be cat or dog or rainbow or
01:38 - unicorn but those strings are not going
01:42 - to be meaningful in the sort of numbers
01:44 - based neural network system that I'm
01:46 - building
01:47 - I need this to return a number so we
01:50 - could think if there are nine possible
01:52 - labels I could return the number zero
01:54 - one two three four five six seven or
01:57 - eight now while I could try to do
02:01 - something where I just have one output
02:02 - and that's a floating-point number that
02:04 - kind of around till the nearest integer
02:07 - that indicates the label that's not
02:08 - going to work so well what I actually
02:10 - really want is I want a prop
02:12 - value I want a probability value for
02:15 - each one of these labels so we could
02:17 - imagine if there are nine labels
02:20 - why don't nine is such I should've made
02:21 - a ten if I could go back double back in
02:24 - time start this whole series over I
02:26 - would have made Ted labels because all
02:28 - this would be so much easier to work out
02:29 - but imagine there are nine labels I
02:31 - don't know why I'm drawing it like this
02:32 - but one two three four five six seven
02:35 - eight nine and what if I had a
02:36 - probability like oh there's a 10% chance
02:39 - it's the first label and there's a 20%
02:42 - chance it's the second label in the zero
02:45 - zero zero zero and then a 70 percent
02:47 - chance
02:47 - zero zero right all of these values
02:50 - might add up to 100% and we could say ah
02:54 - it's most likely this one which is index
02:59 - zero one two three four five six which
03:02 - maps to you know purplish so I'm trying
03:07 - to create the target outputs if I know
03:09 - that this particular color should be
03:12 - purplish the target output that I want
03:16 - is actually zero zero zero zero zero
03:19 - zero one zero zero zero one two three
03:24 - four five six seven eight nine labels
03:26 - zero through eight indices this is one
03:29 - hot encoding I am taking the idea of
03:32 - index six and making a vector a 1
03:36 - dimensional vector full of zeros with a
03:39 - 1 in the spot that matches the label a
03:43 - 100% chance because if the neural
03:46 - network was working perfectly this is
03:48 - the output that I would get so one hot
03:51 - encoding is the idea of creating your
03:54 - vector having all zeros and sort of
03:57 - flipping a bit on in a way and just one
03:59 - of them a switch goes on and that's
04:00 - assigned one now I could come up with an
04:03 - algorithm pretty easily
04:05 - probably not easily but I could work
04:07 - hard on it and try it would be hard and
04:08 - I could say take all of my labels and I
04:12 - could convert every single label into an
04:14 - array with a 1 in the right spot luckily
04:16 - for us we're using tension flow j s and
04:18 - it has a function called TF 1 hot so I'm
04:23 - going to create the Y's for this
04:25 - system using the TF dot one-hot function
04:28 - and that's what I'm gonna go do next all
04:32 - right so let's go look at the code and
04:34 - now what I need to do I made this colors
04:37 - array now let me make this labels array
04:40 - and if I say labels dot push now here's
04:45 - the thing what I want is for this I mean
04:48 - I could just push the label in it so
04:49 - let's just do that a record label let's
04:53 - just look at this real quick and I'm
04:56 - going to comment out the console logging
04:59 - and I'm gonna say console dot log labels
05:03 - so let's just see this should be right
05:05 - this is all the labels the strings of
05:07 - the labels so the first thing I need to
05:09 - do is convert each one of these into an
05:11 - index value so I need a mapping for that
05:14 - all right so I need to find my list of
05:17 - labels I could just type them out labels
05:20 - oh no but uh all labels equals I could
05:27 - say I could say label list let me call
05:29 - it like the list and a grayish blueish
05:32 - but I have that right here right in
05:33 - crowdsource color when I made those
05:35 - buttons these are all the labels 1 2 3 4
05:38 - 5 6 7 8 9 so if I come back to what I'm
05:41 - doing here and just put this here and
05:42 - then let me just do a find replace
05:46 - whoops let me do a find replace for just
05:54 - this I just need to get rid of this yes
05:58 - you're watching me like failing at doing
06:02 - fine replace and then let me look for
06:06 - ish and replace that with ish comma
06:13 - there we go now I have my array my label
06:17 - list array so now what I want to put in
06:20 - in the labels array is not the actual
06:23 - string of the label but label list index
06:27 - of that label so the index of function I
06:31 - need another parenthesis there the index
06:33 - of function will say look for this
06:35 - particular element in the array
06:36 - and giving back its index so let's look
06:39 - at that now let me run this again
06:42 - and we can see there we go now I have
06:44 - five thousand six hundred and forty
06:46 - three index values and guess what this
06:51 - is when I now want to go and I apologize
06:53 - and I wrote TF dot one hot up there you
06:56 - can't see it so let me just write that
06:58 - again TF one hot is the name of the
07:01 - function let's go to the tensorflow
07:03 - j s documentation page right over here
07:07 - and look i already have it open to one
07:09 - hot how convenient
07:10 - and basically this documentation let's
07:13 - see if we can understand this i need to
07:15 - give it all the indices that's what I
07:17 - already have I mean oh but you know what
07:19 - these have to be a tensor already so
07:22 - first I need to make a tensor of all
07:24 - those indices let's do that so I want to
07:28 - say let label tensor tensor tensor
07:34 - labels tensor let's call it equal TF
07:37 - tensor 1d labels and let's say let's
07:42 - just look at that label tensor labels
07:45 - tensor dot print let's just make sure
07:49 - that's kind of right we can see that's a
07:51 - big long tensor of all of the labels and
07:55 - then now the wise is TF dot one hot so
08:00 - if I go back and look at this one hot
08:04 - needs the list of all of those index
08:07 - values which are zero through eight and
08:09 - the depth the depth means how many
08:11 - possibilities are there and there are
08:13 - nine possibilities a non value will
08:16 - default to 1 and the off value defaults
08:18 - to zero but if I presume reason I wanted
08:19 - to one Haughton code with three the
08:22 - number three for every spot in the
08:23 - number point one for every non spot I
08:26 - could change those values but all I need
08:28 - to do then is say one hot labels tensor
08:33 - and um nine and then I could say wise
08:39 - dot print so X's dot print and wise
08:44 - doctrine so now I have my X's and Y's
08:46 - I remember the previous video I did this
08:49 - I looked at all the RGB
08:51 - i / 255 and then i sorry i lost my train
08:58 - of thought here and then I made those
09:02 - into a 2d tensor and now I've made the
09:05 - Y's and I what I do want to see is
09:07 - console.log let's look at X's dot shape
09:10 - and console.log wise dot shape also okay
09:16 - right let's look and see if everything
09:17 - seems right ah indices must be of data
09:22 - type int 32 Oh interesting so when I
09:26 - made this tensor my labels if we look at
09:30 - them are actually like if I go back and
09:34 - console.log the labels those are
09:37 - floating-point numbers because I wasn't
09:39 - really worrying about it when I was just
09:40 - working with regular JavaScript arrays
09:42 - but I need to very specifically make
09:45 - sure that I set the data type index
09:47 - values for a1 hot vector cannot be
09:49 - floating point values so I think if I do
09:51 - this we can see that fixed it right so
09:56 - now I have the shape right this makes
09:58 - sense there's five thousand six hundred
10:00 - forty three data points this each data
10:03 - point for the inputs for the X's has an
10:05 - RGB that's three and there are nine
10:07 - possible labels so I have the shape as
10:10 - 5643 nine possibilities and each one of
10:13 - those just is one hot encoded so this
10:17 - means blueish and this means purplish or
10:19 - whatever the mapping is I don't remember
10:20 - the second one is greenish and zero one
10:26 - two three four five the six one is 0 1 2
10:30 - 3 4 5 is pinkish that's the sixth one
10:33 - yes whatever so I this is gonna be
10:35 - really important which labels actually
10:37 - go with with index values is something
10:39 - that I'm going to have to save for the
10:41 - duration of this project because when I
10:43 - show the results to the user I want to
10:45 - actually show the strings not the number
10:47 - value okay so I am now ready to try to
10:49 - fit four sides up so what's next I need
10:51 - to architect the model right I got all
10:54 - the input data and I got all the output
10:57 - data I need to divide into training and
10:59 - testing architect the model fit the
11:02 - model and
11:03 - then I'm sort of done maybe so that's
11:05 - gonna be like many more videos into the
11:07 - future so I got at least three or four
11:08 - little more steps to build here until I
11:10 - have this like final version of this
11:13 - color classifier built with tension flow
11:14 - jazz wait wait don't leave just wait
11:18 - don't leave just yet I do want to think
11:22 - about memory management and I'm maybe
11:24 - I'm gonna think about memory management
11:25 - later but and the X's and Y's I'm going
11:28 - to want to use in the next video but I
11:30 - probably should after I make the one hot
11:32 - vector
11:33 - I don't need when I'm working with
11:36 - lower-level tend to float yes I've got
11:38 - to clean up stuff I'm not gonna use
11:39 - anymore and I don't need these labels
11:41 - anymore so I can dispose that one so
11:44 - that was just the last little tidbit
11:45 - here and then I'll move on in the next
11:47 - video I'm going to start creating the
11:48 - architecture of the neural network model
11:50 - itself and OH I'm gonna introduce some
11:52 - new concepts soft backs and
11:54 - cross-entropy isn't that exciting
11:57 - [Music]
12:06 - you