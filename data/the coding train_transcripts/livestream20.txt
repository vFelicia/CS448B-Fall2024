00:00 - school for poetic computation here in
00:01 - New York City it is Friday March 16 or
00:10 - is the date on this computer it's gone
00:12 - whatever its 17th oh my god this is
00:15 - terrible hair I can look over here I
00:16 - have the date over here 18 I knew that
00:19 - this friday March 18 about 440 eastern
00:25 - time and I'm here this sort of like a
00:29 - last-minute effort to record a video
00:31 - this week I have not been able to have
00:33 - been sort of fiddling with lights and
00:34 - trying to get things set up and life
00:36 - gets in the way next week I hope that I
00:38 - will be having too much longer sessions
00:41 - and I hope that next week I'm actually
00:42 - get started and doing my git and github
00:44 - tutorials which i plan to do but today
00:47 - I'm also more to sort of starting doing
00:50 - another test here in this space I have a
00:53 - different whiteboard set up here I'm
00:56 - going to see how this works I'm probably
00:59 - a little knocked it over oh my goodness
01:02 - it's very I'm gonna get one that's
01:04 - mounted to the wall but this is just a
01:06 - test where's a pen I'm probably out of
01:09 - focus which I need to deal with but
01:12 - maybe this is not out of focus and
01:17 - readable tell me in the chat if that's
01:18 - the case I don't know if there's anybody
01:20 - actually watching right now let me go
01:22 - check this live dashboard to see if
01:24 - there is anybody it says there are five
01:26 - people who I can see that that looks
01:30 - pretty hard to see tell me feedback wise
01:34 - about how that whiteboard looked how is
01:37 - that hello everyone in the chat so i
01:42 - thought i would do i had on my list here
01:46 - I'm trying to look for like a little
01:48 - quick and dirty topic to do i thought i
01:50 - would do I could do p5 Jess instance
01:53 - mode actually just I'm over here sorry i
01:57 - thought i would do si not contrast isn't
02:03 - great okay let me look over here see if
02:07 - i can improve this I wonder if actually
02:11 - I'm going to change the lean on the
02:14 - camera here for a second that's probably
02:19 - a little bit better that that looks like
02:22 - that's a little bit better like it's the
02:24 - lighting in here it's not good i need to
02:26 - work on that there's all these like
02:27 - shadows let me try pointing this up and
02:31 - putting this up boy oops I turned that
02:35 - off and I turn that off boo what did I
02:41 - press a and press anything now I'm in
02:44 - the dark but this might be better hey I
02:54 - have an idea sorry let's try to get the
02:57 - lights here put this over here oh this
03:00 - doesn't oh my goodness this is riveting
03:04 - for you to watch I'm sure this is I need
03:06 - a piece of cardboard or something here
03:11 - we go here is a piece of cardboard I'm
03:15 - going to put that over here and see if I
03:20 - put this here and point that light at me
03:25 - from over there there we go there's a
03:29 - little bit of glare here but I feel like
03:31 - that's a little bit better this here
03:36 - how's that how's how's that okay that's
03:39 - gonna have to do for right now gonna
03:42 - have to work on this over here hello I'm
03:44 - back over here uh yeah I should get I
03:48 - should get somebody who oh good people
03:53 - are saying it's better maybe I made it
03:54 - worse in the meantime I should get
03:57 - somebody to come in here help me which I
03:59 - will but mostly I just don't have a
04:01 - couple lights that I plan to have and I
04:03 - don't have the right plugs I don't have
04:05 - the right whiteboard but this will do
04:06 - for today ok so I was going to do and
04:12 - something called a minimum spanning tree
04:14 - let's see if I google that this is
04:17 - perfect and let's look at the definition
04:19 - of this it connects all ok so what is
04:23 - the minimum I so first of all I'm
04:24 - interested if you can
04:25 - tell me in the chat what this might be
04:27 - useful for I'm not doing my video
04:29 - tutorial just yet I'm just kind of doing
04:31 - my prep so and I don't have a lot of
04:34 - time but I think this will manage so
04:36 - what you can see here is that a minimum
04:38 - spanning tree is a spanning tree of
04:40 - connected undirected graph it connects
04:42 - all the vertices together with the
04:43 - minimum total waiting for its edges so
04:46 - in other words translation if I have a
04:49 - whole set of points and those points are
04:53 - just randomly in a window in a canvas
04:55 - how can I have all the points connected
04:58 - to each other and if you add up all the
05:00 - distances you have the minimum distance
05:02 - so you can see that here in this light
05:05 - oops you can see over there in that
05:06 - image there's lots of different ways you
05:07 - could connect all those points but those
05:10 - the particular darker edges that are
05:13 - there it happens to be a path through
05:15 - all the points which has the minimum
05:18 - distance okay oh look on this page is
05:23 - even gonna say there are quite a few use
05:24 - cases telecommunications company which
05:26 - is trying to lay out cables and new
05:27 - neighborhood okay I that makes sense
05:30 - okay that's good that's a good so this
05:32 - is like a computational geometry problem
05:34 - so I thought what I would do is build a
05:37 - p5 there's a algorithm called prims
05:39 - algorithm let's see if we look up that
05:46 - it's a greedy algorithm that found a
05:49 - minimum spanning tree for weighted
05:51 - undirected graph so the way the prims
05:54 - algorithm works i'll diagram this out
05:55 - and we do that tutor I'm just sort of
05:57 - talking this through to practice is that
06:00 - you could start with you can start with
06:03 - any random point and you find the point
06:09 - that's closest to that and then you go
06:11 - to the next one and you find the one
06:12 - that's closest to that etc etc etc I
06:18 - know that's not right you find the one
06:22 - let me look let me look I don't have I
06:25 - have my example that I made the other
06:27 - day if you're you start with a point and
06:31 - you look at the distance between all the
06:33 - yeah maybe that is right
06:35 - and then you then it's reached you draw
06:38 - a line are we're going to try it we're
06:39 - going to try making this hmm this sound
06:42 - about right let's read this by building
06:46 - this tree one vertex time from arbitrary
06:48 - starting vertex adding each step at each
06:51 - step adding the cheapest possible
06:52 - connection from the tree to another
06:53 - vertex that is what i said ok I think
06:55 - this is going to work this is a very
06:57 - simplistic algorithm it's not the most
06:59 - efficient but it's an easy way and it's
07:01 - kind of a visually it's kind of fun to
07:03 - see what happens once you start clicking
07:04 - around the screen and seeing it happen
07:06 - in real time so I think that anybody
07:09 - have any questions about that i think
07:11 - i'm going to try to just build that i'm
07:14 - going to the quality is good
07:16 - everything's good i'm going to try to
07:17 - just build this i'm going to diagram it
07:19 - i'm going to build it hold on we get p5
07:22 - open i almost want to like do it yes it
07:26 - is if i do want to open it let's see
07:31 - here and i'm going to save this as i
07:35 - made this the other day but i have it on
07:36 - this other computer over here i'm going
07:41 - to save this as a prim our minimum
07:46 - spanning tree and I want to just see I'm
07:52 - going to maybe get a few things set up
07:54 - in the code already i'm going to look at
07:56 - my example because i need to have a
08:01 - variable called vertices which will be
08:04 - an array for all the vertices i'm going
08:09 - to create a canvas 600 x 400 or
08:14 - something like that or i usually do 640
08:17 - x 360 i'm going to do that and i'm just
08:21 - going to say background 0r like 51
08:29 - something like that and i'm going to i'm
08:34 - going to what i'm going to do is add
08:36 - also mousepressed vertices dot push so
08:44 - VAR v equals create vector i'm just
08:46 - getting
08:47 - this setup and here i'm going to say at
08:54 - the bottom of this right so that now i
09:02 - fill 255 ellipse VX v dot y 16 16 and
09:14 - stroke 255 something like that so every
09:18 - time I click oops I don't know what I'm
09:20 - writing their vertices index I vertices
09:23 - index I every time I run it will see
09:26 - there's a vertex there so what I need to
09:28 - do now to add to this program is connect
09:30 - all those with lines where everything is
09:33 - connected and you add up all the
09:35 - distances together so it's the least
09:36 - amount of cable that you need to connect
09:38 - all those if this was some sort of like
09:39 - electrical or telecommunication system
09:42 - and then we're going to I'm going to
09:44 - look at my solution again just to like
09:45 - kind of make sure draw the points
09:47 - reached unreached all the ones are first
09:49 - unreached and then start at the first
09:52 - one at find the record so you need the
09:56 - one that is the huh reached I'm o for
10:05 - everything in unreached find the
10:11 - shortest ah ok so acts a little bit less
10:14 - it's a little bit more complicated than
10:22 - let's see then for everything that's in
10:25 - so I'm thinking this through I have to
10:27 - have be ready for this I don't know if
10:28 - anyone's like I'm sure that just have
10:31 - maybe I can get this open over here so
10:34 - you guys can see what I'm thinking of so
10:40 - P five dot so i made this example the
10:43 - other day p 5 ide oo KU app com / yeah
10:51 - that should work I made it in the web
10:54 - editor
10:56 - the p5 has a web editor which is a very
11:00 - very alpha e project i need to login
11:06 - let's see if you guys are have any other
11:08 - questions for me or anything in the chat
11:09 - people or somebody asked last time you
11:14 - talked about summer internships but
11:16 - never got around to describing it well
11:18 - somebody had asked about google Summer
11:20 - of Code and unfortunately the processing
11:23 - foundation was not selected for google
11:24 - Summer of Code this summer so we don't
11:26 - have our usual summer internships but
11:28 - I'm seeking other sources of funding or
11:32 - other mechanisms for having them so I
11:34 - don't have an answer to that right now
11:35 - but if you're interested feel free to
11:37 - send me a message on Twitter or if
11:38 - you're a source of funding for the
11:40 - processing foundation please let me know
11:42 - okay open recent sketchbook I should
11:48 - have something in here minimum spanning
11:52 - tree open does this work open sketchbook
12:00 - come on oh wait me left it okay open
12:05 - sketchbook Oh doesn't seem to be working
12:13 - spanning okay let's see let me do
12:22 - something crazy here well you really oh
12:25 - wait which is I'm going to read some i'm
12:29 - going to read off the number the
12:31 - hashcode 5695 5695 d s f-18 593 140 300
12:43 - 14 f to ec almost there everybody
12:57 - let's see ah there we go okay I think
13:00 - there was just like some sort of caching
13:01 - issue so this by the way is it the
13:06 - finished version of what I'm about to
13:07 - try to make here you can see that this
13:10 - works and I just wanted to kind of peek
13:13 - at the code a little bit to remind
13:17 - myself how this works are going to build
13:19 - it from scratch though so let's let me
13:21 - let me talk this through for a second so
13:23 - we start with a copy of all of the
13:29 - current vertices every vertice every
13:32 - vertex is not a one that's reached
13:34 - unreached one being one that we've used
13:36 - already we have a line connecting it
13:38 - unreached being we haven't connected it
13:40 - so we start with them all unreached we
13:42 - pick a random one or the first one I
13:46 - heard a door I don't know if somebody's
13:49 - here I should go look I still have my
13:55 - mic on
13:59 - oh hey how are you good okay just the
14:09 - neighbor okay um I'm going to get to the
14:15 - video tutorial soon the part that will
14:17 - actually be recorded and saved for
14:18 - posterity okay so all of the all of the
14:28 - knows lots of hearing noise down so all
14:33 - of the vertices start out as unreached
14:36 - except for one and we just picked the
14:38 - first one which we could pick a random
14:40 - when we pick the first one and then we
14:42 - try to find as long as there are
14:45 - unreached vertices go through all the
14:50 - all the ones that are reached and find
14:57 - okay for every reached Fort vertex which
15:01 - is just one at the start will diagram
15:04 - this out once I remember how this works
15:05 - I shouldn't this before this is a bad
15:07 - idea that's complicated algorithm it's
15:09 - not that complicated and we see if
15:10 - they're doing the chat wow there's still
15:12 - 16 people watching me try to like
15:14 - remember how this works as long as there
15:18 - are unreached vertices start off with a
15:21 - large a large random large distance
15:24 - we're going to fight try to beat that
15:25 - distance so we have a reached an
15:27 - unreached so for every reached vertex
15:29 - find all of the check the distance
15:33 - between that reach one and all the
15:34 - unreached if the distance ah got it got
15:38 - it got it so this is for the case that
15:41 - it's only for the IC so here we go now
15:44 - if I click here I cannot can let's rerun
15:46 - this okay this totally makes sense now
15:48 - so here if I click here and I click here
15:51 - these two get connected and then this
15:55 - one here this gets connected now the
15:57 - issue is as I'm going through and trying
16:01 - to fight I'm and there's a new point
16:03 - right if there's a new point here I'm
16:05 - about to click a new point here I don't
16:07 - want to connect the last one to it I
16:09 - want to connect whichever one of those
16:11 - happen
16:12 - to be closest which happens to be this
16:14 - one and same thing if i go here you're
16:16 - going to see you then those two get
16:17 - connected so okay so this makes sense in
16:19 - my head now it might not have made sense
16:21 - to you but I just had to figure this out
16:23 - so that I could explain it from scratch
16:26 - okay here we go so now i'm going to
16:30 - minimize this i'm going to have this set
16:33 - up we're going to talk about i'm going
16:37 - to run run this over here and i'm going
16:39 - to start i'm gonna hit record in a
16:41 - second and I'm going to make a video
16:43 - which shows how to solve the minimum
16:46 - spanning tree of just recording video
16:51 - tutorials yeah just this ignore me this
16:55 - is actually live right now live on
16:57 - YouTube it's okay there's only there's
16:59 - only 15 people watching but it gets
17:01 - recorded more people watch later yeah
17:04 - you come say hi if you want ya see so
17:10 - this here is me and this is the code
17:12 - this is the neighbor Joe yes awesome my
17:17 - calls okay thanks for stopping by
17:23 - you later okay alright that was exciting
17:27 - moment you have here happen okay so I'm
17:30 - about to it's good that that happened
17:31 - before i actually hit the record button
17:33 - so now i'm going to do the record the
17:35 - tutorial for posterity which is solving
17:37 - the minimum spanning tree problem which
17:41 - connects a set of vertices all connected
17:44 - with the least amount of if you add up
17:48 - all the distance you have the least
17:49 - amount of distance ok and then we're
17:50 - going to diagram it going to code it and
17:52 - got this example going and that's going
17:55 - to be the video tutorial ok all right
17:59 - anybody have any last and this was this
18:01 - was this is very dangerous here I don't
18:03 - know this as well clearly ok but alright
18:06 - so here we go I'm hit record hello this
18:12 - video I'm going to give myself a
18:14 - headache I can tell already but I'm here
18:16 - to describe to you a problem called the
18:19 - minimum spanning tree it's a problem
18:22 - from computational geometry kind of
18:24 - thing
18:25 - and I'm going to describe that problem
18:28 - we're going to look at a solution to
18:30 - that problem known as Prince algorithm
18:32 - name for somebody big print presumably
18:35 - and then we'll implement it in pjs and
18:38 - as always I will also upload a
18:40 - processing version of this as well but
18:42 - i'm going to use p 5 GS to actually
18:44 - write the code so first let me just show
18:46 - you before i describe to you what the
18:48 - actual problem is and the solution let's
18:50 - just look I have a simple example preset
18:53 - that's gonna that's the foundation for
18:55 - what we need so if I just look at the
18:57 - code for this example for a second first
18:58 - there's just an array a blank array
19:00 - calling it vertices because every time I
19:02 - click the mouse I'm going to create a
19:04 - vector a vector being an object that
19:06 - stores in X and a why so I'm going to
19:08 - create a vector with mouse x mouse why
19:10 - where the mouse is and then I'm going to
19:13 - add that vector to an array and then you
19:15 - can see in draw here I'm just drawing an
19:17 - ellipse for every single one of those
19:20 - vertices so if i run this program and i
19:24 - click you can see here that every time I
19:28 - click a vector gets added to that array
19:30 - and I draw a circle for every one of
19:31 - those spots so the question is what is
19:35 - what is the minimum spanning tree
19:37 - problem and this is a temporary
19:39 - whiteboard that I'm going to see how it
19:40 - works so bear with me please what is the
19:44 - problem how what is this problem once
19:46 - you have these points so let's say you
19:49 - have the points and I'm going to make
19:50 - some random points the minimum spanning
19:54 - tree problem says how can i connect
19:57 - every single one of these points every
19:58 - single one of these points must be
20:00 - connected to another point and if i add
20:02 - up all the distances i have the smallest
20:06 - amount of distance so there's lots of
20:08 - ways that I could connect them all like
20:10 - I could just do this and they're all
20:15 - connected but I could also have done
20:18 - this and they're still all connected and
20:20 - I could have also done this and they're
20:24 - still all connected and if I have these
20:25 - I made these pretty evenly spaced out so
20:28 - probably if I hope moose is scary
20:32 - probably if I were to draw a diagram
20:34 - like this and then if i put
20:40 - other one here right they're all
20:44 - connected like this but that's probably
20:46 - if I add up those distances it's going
20:48 - to be a lot greater than if i connect to
20:51 - them like this so and it doesn't have to
20:55 - be a closed shape it doesn't have to be
20:56 - a continuing path the only thing that
20:58 - has to happen is that every single point
21:00 - has to be you have to be able to get
21:02 - from every point to every other point
21:03 - somehow so this is the kind of
21:05 - application that you could probably
21:06 - create some kind of interesting visual
21:08 - art project out of but it's used it's a
21:12 - relevant practically as practical
21:13 - applications for example if you wanted
21:15 - to connect everything with some kind of
21:16 - like electricity or telephone telephone
21:19 - people use those anymore telephone
21:20 - signal you know and you only had a
21:22 - certain amount of cable like what's the
21:24 - way to have them all connected and using
21:25 - they'll you're saving the most money
21:26 - using the least amount of cable and I'm
21:28 - sure you could come up with all sorts of
21:30 - other scenarios for where this is
21:32 - relevant so how do you solve this
21:35 - problem okay so there's a variety of
21:38 - different solutions to this problem some
21:40 - of which are more efficient some of
21:42 - which are less efficient some of which
21:44 - do it you know it more quickly or less
21:50 - quickly but the solution i'm going to
21:51 - show you sorry is called prims algorithm
21:55 - and it works as follows what if we start
22:01 - with a random point essentially let's
22:03 - start with this random point okay now
22:06 - what if what we do and we have this i'm
22:09 - going to introduce this idea of an
22:10 - unreached vernet vertex or a reached
22:15 - vertex so at the start all of the
22:19 - vertices are unreached there's no line
22:21 - connected to it they're all unreached
22:23 - vertices I can't get the telephone
22:24 - signal to them and we're going to start
22:26 - with one single and this is now a
22:27 - reached vertex so what I want to do is
22:30 - say okay what can i connect this one to
22:33 - that has the least distance so this
22:36 - particular vertex I can check every
22:38 - other one and I can see and I check the
22:40 - distance and this one actually has the
22:42 - least distance so now I have two reached
22:44 - vertices this one is reached and this
22:47 - one is reached now what I need to do is
22:48 - the same thing I need to find not just
22:51 - the one that's closest to
22:53 - this one but the one that's the least
22:55 - distance between this one or this one so
22:58 - in other words if if this were here I'd
23:02 - but you know this is a little bit longer
23:04 - than this but shorter than this and this
23:06 - I'm going to go and i'm going to go
23:07 - ahead and connect this here but if this
23:09 - one is if this one is closer to this one
23:11 - I'm going to go ahead and connect this
23:12 - now i need to say is this shorter than
23:15 - this then this then this or this and
23:17 - this so everywhere i have to check every
23:18 - single reach vertex against every
23:20 - unreached vertex and find whichever
23:23 - pairing has the least distance and then
23:25 - that gets and maybe maybe right now it's
23:28 - this one and all these are reached and
23:29 - then maybe right now it's this one and
23:32 - it's this one and then maybe it's this
23:34 - one maybe it's this one I don't know if
23:35 - that's exactly right but you can see
23:37 - that eyeballing it that's probably a big
23:39 - solution so this is the problem now
23:41 - let's go and write the code to solve it
23:44 - ok I'm coming over here ok so what is
23:47 - the first thing that we need to do well
23:49 - the first thing we need to do is is
23:51 - implement this idea of reached and
23:54 - unreached so I'm going to create in the
23:57 - draw loop I'm going to create two new
23:59 - arrays 14 to store all the vertices that
24:02 - have been reached and one to store all
24:04 - the vertices that haven't been reached
24:06 - at the beginning what's going on here
24:08 - every single vertex should go in sorry
24:16 - in unreached so i'm going to write a
24:19 - loop here it so i'm gonna say unreached
24:21 - dot push vertices index I so this is me
24:25 - just essentially cotton and I'm sure
24:27 - there's up somebody in JavaScript land
24:29 - could tell me a better way to copy an
24:30 - array into another array but one way to
24:32 - do it is just say hey let me go through
24:34 - everything in this one array and put it
24:36 - on this other array so at the beginning
24:38 - all the vertices right all the vertices
24:41 - are unreached every single one ok come
24:45 - back over here now I want to pick one
24:47 - vertex to start being the one that's
24:50 - reached I need something to go in the
24:51 - reached array so i'm going to say var
24:56 - start equals unreached index zero and
25:02 - then i'm going to say reached dot push
25:05 - start
25:06 - I want to put i'm sure i could you know
25:08 - whatever this is silly to have a
25:09 - separate variable i'm going to just put
25:11 - a unreached index 0 0 not o i'm going to
25:17 - put one the first verdicts from
25:20 - unreached in reached just to get us
25:22 - started okay once we have that i need to
25:25 - do something else if I'm taking a vertex
25:28 - from unreached and it's going and
25:29 - reached I need to remove it from
25:31 - unreached so i need to say unreached
25:33 - splice 0 so the splice function set is
25:37 - like delete delete the zero element only
25:40 - I'm not done yet the splice function
25:42 - wants you to say not just which element
25:44 - do you want to remove but how many so so
25:46 - I want to just remove one element from
25:48 - that zero spot okay now now I have an
25:53 - algorithm I want my algorithm to go as
25:56 - well I want the goal of this is to get
25:59 - everything from unreached to reached and
26:01 - unfortunately this camera shut up
26:03 - because i forgot to start it at the
26:05 - beginning this video so i want
26:06 - everything to go from unreached to
26:09 - reached so here we go i'm going to say
26:12 - as long as unreached dot length is
26:17 - greater than zero I can keep going so
26:22 - maybe there's another way in JavaScript
26:24 - to test if the array is empty or not but
26:26 - basically what I'm saying is as long as
26:28 - there are still unreached vertices we
26:30 - haven't finished the algorithm yet so
26:32 - every single cycle remember every single
26:34 - cycle we need to say what are the
26:37 - reached vertices for every reached
26:39 - vertex check the distance against every
26:41 - other unreached vertex and find the
26:43 - shortest distance so in order to find a
26:46 - shortest distance amongst a bunch of
26:48 - candidates we always have to start with
26:50 - something that's kind of the record if I
26:53 - was trying to find the longest distance
26:54 - it'll be easy i say this is the distance
26:56 - bigger than 0 then it's currently the
26:58 - longest distance so the first thing I
27:00 - need to do is just come up with i'm
27:01 - going to call it record some like large
27:03 - number a hundred thousand so there's not
27:06 - going to be any vertices that are a lot
27:08 - more than a hundred thousand pixels from
27:09 - each other in a 640 x 360 window then I
27:12 - need to say for every oh and I probably
27:19 - shouldn't know it took
27:20 - use I for every vertex in the reached
27:25 - array check every vertex in the
27:35 - unreached array okay for every vertex in
27:40 - the reached array check every so ever
27:43 - every reach vertex check every unreached
27:45 - vertex and what do I need to do the
27:48 - thing that I want to know is the
27:49 - distance between and let's let's say v1
27:52 - is reached index I and v2 is reached
27:59 - index J and I want the distance between
28:02 - v1 x v1 dot y 2 V 2 X + v2 dot y so the
28:08 - core algorithm here is check every
28:10 - distance between every reached vertex
28:12 - and every unreached vertex now if the
28:15 - distance is less than the record then
28:17 - the record is the distance so what we're
28:20 - doing is we're saying I want to find
28:22 - what is that shortest distance at the
28:24 - beginning the shortest distance is a
28:26 - hundred thousand and the first distance
28:28 - is like 300 oh it's less than it that's
28:30 - the record then the next one is 250 oh
28:32 - that's less than it that's the record
28:33 - then the next one is 400 oh that's not
28:35 - the record then the next one is 100 oh
28:36 - that's the record so we're doing every
28:38 - single one always if we have a distance
28:40 - that beats the previous record we have
28:42 - the record so this is the core algorithm
28:44 - for finding that shortest one but if I
28:46 - find that shortest one what do I need to
28:48 - do i need to store also the two vertices
28:50 - that are involved in that shortest
28:52 - distance so I I need to have in addition
28:56 - to just the record i need the reached
28:59 - i'm going to call this the our index the
29:02 - reach index and the unreached index so
29:07 - if this is the case if I found that
29:09 - record our index is I that's the index
29:13 - from this array and you index is J and
29:21 - in fact I don't I could actually instead
29:24 - of storing the now what we'll do that
29:25 - we'll do it with the distance with the
29:27 - index so I got those so so now you can
29:31 - see here I now AM store
29:34 - I've Luke chef ever checked every
29:36 - reached every unreached found the
29:38 - shortest one and once that's done once
29:42 - that's finished what happens I need to
29:44 - do exactly what I did up here right I
29:48 - need to say put take take the unreached
29:53 - one and put it in reached and then
29:58 - remove it and then remove it from
30:01 - unreached so this is my algorithm to i
30:04 - found that new vertex remove it from
30:07 - reach moved from one array and put it in
30:10 - another array there's probably I
30:12 - probably could like do this all in one
30:13 - fancy line of code but it's nice to have
30:15 - it in two and then while I'm here I
30:17 - might as well draw a line oh I don't I
30:23 - don't have those as global variables
30:25 - that's fine I might as well draw a line
30:26 - between reached our index dot X so this
30:31 - is going to get very long very quickly
30:34 - alright next dot y and then unreached
30:42 - unreached index dot x unreached
30:48 - unreached index dot y ok so let's see I
30:55 - don't know did that work ok so line 45
30:59 - I'm esta Leo because you know what I
31:02 - better not here's a problem right i
31:04 - mucked around with the arrays and then I
31:06 - drew the line after so that's definitely
31:07 - not going to work right I need to if I'm
31:09 - drawing the line right before I start
31:11 - moving them around I should do that so
31:13 - let's just see here ok so we got kind of
31:16 - something happened and then and then
31:19 - something didn't happen ok so so let's
31:23 - think about this for a second what what
31:25 - so this is the core idea let's let's
31:28 - review for a second how long have I been
31:30 - at this only 13 minutes that's not
31:32 - terrible so we started with every time
31:35 - we every time there's something slept
31:37 - and unreached we start with a record we
31:39 - have two indices we go through
31:41 - everything in the reached check it
31:42 - against everything and under cha look at
31:44 - that that's not right v2 equals reached
31:47 - so the
31:47 - one of the second one is to pull
31:49 - something out of the second right that's
31:51 - clearly not going to work and yeah this
31:54 - looks like it's working look at that and
31:56 - I don't like the way the lines will look
31:57 - here so i'm going to say stroke 255
32:00 - stroke weight too and here and you can
32:05 - see there we go we have our minimum
32:06 - spanning tree as i add points and
32:10 - conceivably by the way you know if i
32:14 - wanted to just demonstrate this in a
32:17 - different way i could say i could just
32:21 - add like 50 random points right when the
32:23 - program starts and I could say random
32:26 - just with a random height and do this
32:32 - you can see every time I run it we get a
32:35 - new and the one thing I'll mention about
32:37 - this is I'm doing in this program you
32:39 - notice the whole algorithm is happening
32:41 - in draw so it's recomputing the minimum
32:43 - spanning tree over and over and over
32:44 - again it doesn't need to do that it but
32:47 - you know it conceivably if the points
32:49 - were always every time you add or
32:51 - subtract a point you would need to
32:52 - recompute it and I'm so you might be if
32:54 - you were using this and something you
32:55 - might be more thoughtful about only
32:57 - recomputing it at a certain point the
32:58 - other thing I'm not doing here is this
33:00 - particular like drawing is just sort of
33:03 - drawn I can't do anything with it so if
33:05 - I were if I wanted to go further with
33:07 - this I would probably make edge objects
33:09 - so in other words I might have an array
33:11 - of points or vertices or like a vertex
33:13 - object I'm just using the p5 vector
33:15 - object with create vector but then I
33:17 - might create these edge objects so the
33:19 - things that I could animate or change
33:21 - color and put those in an array as well
33:22 - you and the place that I would do that
33:25 - is right here right instead of just
33:26 - drawing a line like I just said I
33:28 - figured out the vertex I'm just going to
33:30 - draw a line there I could actually
33:31 - create that edge object alright so this
33:34 - is pretty much the end of the video I'm
33:36 - actually going to look though I don't
33:37 - know if people are posting quit i have
33:38 - this even though if you're watching this
33:40 - you might be watching this like 10 years
33:41 - from now i actually am recording this
33:43 - live and there are some people watching
33:45 - this live so I'm going to you could shut
33:46 - this off now if you want but I'm gonna
33:47 - just looking to see if there's any
33:48 - questions somebody points out that okay
33:51 - there are two improvements that are
33:53 - pointed out in the chat which I'll
33:55 - mention let's see if they still work so
33:56 - first I just want to make this with just
33:58 - 20 so one is that
34:01 - I could copy the array by saying reached
34:08 - reached equals unreached the JavaScript
34:13 - function can cat which I guess is like
34:15 - concatenate no but then that doesn't
34:18 - it's not an array it just joins them I'd
34:20 - have to then split it or something but
34:23 - and then Oh reached push unreached shift
34:27 - is another way to put the first one in
34:28 - some people are so there's all these
34:30 - other array functions but that one's not
34:32 - going to work I'm sure there's another
34:33 - thing to put it in the comments who read
34:35 - the comments absurd will be fixed in
34:36 - there there are all sorts of other kind
34:39 - of array functions is there anything
34:40 - else I'm missing here I think we did it
34:42 - I'm gonna post this code a link to this
34:44 - code please post your questions in the
34:46 - comments because I I don't know how well
34:48 - this was explained or if this makes any
34:50 - sense at all but I'm glad to have me in
34:52 - a video today on Friday it's
34:53 - five-fifteen I got to go we just look is
34:57 - the code available somewhere yeah the
35:01 - coat someone asks the code is going to
35:03 - be there be a link in the description
35:05 - it's not available yet if you're
35:06 - watching this live I'm going to stop the
35:07 - recording and then talk to the live
35:08 - people okay bye thanks for watching this
35:15 - okay uh so I've got to go but the live
35:23 - chat yes the code is not currently
35:25 - available but I'm hitting save on this
35:28 - and I will um i will go i'm going to
35:31 - post it later tonight when i post the
35:33 - video recording if you want to find it
35:35 - now you can actually go into this
35:38 - particular URL you're going to probably
35:39 - pause take a screenshot of that but I do
35:42 - have a version of it at that URL that's
35:44 - up top that I did the other day okay any
35:48 - other questions that's okay sorry that
35:51 - could cat it was a good idea though does
35:56 - anybody have any other questions they
35:59 - want to ask I'm going to poke around
36:01 - here and see if I have any other
36:03 - notifications any Twitter questions okay
36:12 - I'm hoping that this one will get that
36:14 - people will find my youtube
36:15 - with this particular video because I
36:16 - feel like this is kind of like a minimum
36:18 - spanning tree kind of thing that people
36:19 - would search for all right thanks I'm
36:22 - going to be back next week tuesday
36:23 - hopefully friday hopefully maybe
36:25 - thursday i'm going to talk to do a bunch
36:26 - once i get a new whiteboard in here this
36:29 - whoops this whiteboard it wasn't the
36:31 - best solution but it worked hopefully
36:34 - for today once i get a new whiteboard in
36:36 - here and get the lighting better i will
36:38 - i will be back and I'm gonna hope to do
36:42 - some git and github tutorials ok what's
36:46 - the best way to contact me about a
36:48 - question youtube comments if if you have
36:51 - a question that's related to one of the
36:52 - videos i always try to answer them there
36:54 - twitter is fine but if you have a
36:57 - complex question what I often suggest is
37:00 - posting a question 24 m dot processing
37:02 - org it's p5 Jess there's a p5 Jazz
37:05 - category and then you can tweet me or
37:07 - email me the link that waits I like to
37:10 - answer programming questions if I can in
37:12 - like a public forum just so you know it
37:14 - so there's like a record of it and helps
37:16 - other people too but my email address is
37:18 - on like my website you could dangle at
37:22 - Schiffman net oh I'm not if you can't
37:24 - even see me this whole time I've been
37:25 - talking and you can see me at all but
37:27 - hopefully you heard that ok twitter is
37:30 - at Schiffman ok thanks everybody i'm
37:33 - going to hit stop now and i'll be
37:36 - uploading the 17-minute video chunk soon