00:01 - welcome to a new coding challenge maze
00:03 - generation so I've got a maze generator
00:06 - running behind me it's using something
00:08 - called a depth first search and a
00:10 - recursive backtracker those are all very
00:12 - fancy sounding names and what I'm going
00:14 - to do in this challenge probably in
00:16 - multiple parts so there'll be two or
00:17 - three videos you can follow along in
00:18 - sequence is build this simulation
00:21 - entirely from scratch and it will cover
00:23 - a lot of Concepts in object-oriented
00:25 - programming thinking about arrays
00:27 - thinking about something called a stack
00:29 - thinking about recursion all sorts of
00:32 - crazy stuff so um so without further Ado
00:36 - so to speak let's just get started ah no
00:38 - actually there is some to do here so
00:40 - this is the a version of it running that
00:42 - I built a while ago meaning earlier this
00:44 - morning and I just want to show you
00:46 - where this comes from uh all this will
00:47 - be linked to the source code for this
00:49 - and this Wikipedia page will be linked
00:51 - to in the description um this is a
00:52 - Wikipedia page on Ma generation there's
00:54 - a lot of different algorithms if I were
00:56 - to just keep scrolling I'm implementing
00:58 - this depth first search and I'm going to
01:00 - implement exactly this pseudo code which
01:03 - is written right here under a recursive
01:05 - backtracker but if you keep scrolling
01:06 - down you'll see there's various other
01:08 - algorithms and maybe we'll come back and
01:10 - in future videos If you like this topic
01:11 - do more of them so this is what I want
01:13 - to focus on now before I can even focus
01:17 - on really getting to the algorithm I
01:18 - need to kind of like set the scene of
01:20 - like what is it that we're building so
01:21 - I'm going to come over here to the
01:23 - Whiteboard and what I'm going to have is
01:26 - I'm going to have a canvas so I'm going
01:28 - to build this on a web page in a browser
01:30 - using HTML 5 canvas using p5js and I'm
01:33 - also using an atom as my text editor
01:35 - some tools that I'm using here but what
01:37 - I ultimately need is I need to
01:40 - think of this canvas as a grid and each
01:46 - spot on that grid is a cell object and
01:49 - essentially what the program is going to
01:52 - do is it's going to figure out what
01:56 - walls should be removed to make a nice
02:00 - maze pattern and you can sort of see
02:03 - what I'm doing here if I remove certain
02:06 - walls you could see now ah here is sort
02:09 - of a maze that you want to follow so
02:11 - before I can and there's going to be a
02:12 - strategy for like why do we remove
02:14 - certain walls to create a continuous
02:16 - maze a continuous Labyrinth but the
02:19 - first thing I knew before I could do any
02:20 - of that is just sort of set myself up
02:21 - with some kind of data structures to
02:23 - figure out how to do this in the first
02:25 - place so what I need is a cell object
02:28 - the cell object should know where it is
02:30 - in this grid it should know what column
02:32 - it's in and what row it's in so every
02:34 - one of these spots has like a column
02:37 - number 0 1 2 3 or four and a row number
02:40 - 0 1 2 or three so the cell needs to know
02:42 - where it is and it also needs to know
02:44 - like what's the deal with its
02:46 - walls does it have is the wall to the
02:50 - right open or closed is the wall to the
02:52 - top open or closed to the left open or
02:54 - close to the bottom open or close so I'm
02:56 - let's go and build this cell object and
02:59 - I'm going to use a instructor function
03:01 - so I'm back over here this is uh so I'm
03:03 - going to uh this is still running we'll
03:05 - let that run I'm going to come over here
03:07 - this is my blank canvas with nothing in
03:09 - it yet I'm going to go to my code editor
03:11 - I'm using Adam and I've set up just
03:12 - create canvas and background so in this
03:14 - first video all I'm going to do is get
03:17 - the the grid there so the first thing I
03:20 - want to do is write a Constructor
03:23 - function for uh a cell object
03:32 - so oops so you can see and I want to put
03:34 - some line breaks down here at the bottom
03:36 - so this is what I'm trying to do I'm
03:38 - trying to create a cell object that has
03:40 - an i and a j the I being its column
03:43 - number the J being its row number so
03:46 - actually let's think about how do we
03:48 - even know what how many columns and rows
03:49 - there are so I want to have some Global
03:51 - variables I'm going to call those
03:52 - columns and rows and I also want to have
03:55 - another variable which is the size I
03:57 - really need a variable which gives keeps
03:59 - track of like how wide and high how how
04:02 - big is this Square it's going to be a
04:03 - square not a rectangle same height same
04:05 - so I can have a single a single variable
04:07 - I'm just going to call that variable W
04:09 - and let's just say that variable is 40
04:12 - so right I have a canvas that's 400 by
04:14 - 400 and the width and height of each
04:15 - square is 40 so it's 10 rows and 10
04:19 - column 10 columns and 10 rows it's an
04:21 - easy way of thinking of it first and how
04:23 - do we calculate that we say column
04:25 - equals width divid W that's the total
04:27 - number of columns so width divided by
04:29 - how it big each one is rows equals the
04:32 - height divided by how big each one is
04:34 - and I should also use the floor function
04:36 - to make sure I'm dealing with integers
04:38 - here whole numbers even though I know
04:40 - that 400 divided by 40 is the whole
04:42 - number 10 but what if I have a different
04:44 - Siz canvas and that'll just make things
04:45 - easier so now that I have that I have a
04:49 - cell object each cell gets its I and J
04:53 - gets its gets its column and row okay so
04:56 - how do I create all the cell objects
04:58 - well I want to say
05:01 - for every
05:08 - Row for every row go through every
05:12 - column so the first row create cell
05:14 - create all these cells the next row
05:16 - create all these cells the next row
05:17 - create all these cells that means I need
05:19 - a nested Loop so four I goes through all
05:21 - the rows and you know what I like to
05:24 - call J I'm thinking of J as the row so
05:27 - I'm going to change that to J and I
05:28 - could use the X and Y that might even
05:30 - make things easier but I'm used to I and
05:32 - J as my sort of names of things so um so
05:35 - so it kind of makes sense in my brain
05:37 - immediately you know use your whatever
05:40 - variables make you feel comfortable
05:41 - about columns and rows that's what you
05:42 - should use maybe you can use cat and
05:44 - kitten or something but anyway and then
05:46 - I want to say I want to make a cell is a
05:49 - new cell at i j so this now is a nested
05:53 - Loop that's going to
05:54 - make 100 cell objects right 10 by 10
05:58 - grid every for every column of every row
06:01 - make 100 cell objects make them each
06:03 - know where they are now where do I put
06:05 - those what I want what I need is an
06:07 - array so I need an
06:09 - array and I could use a two-dimensional
06:12 - array and I two-dimensional arrays in
06:14 - JavaScript first of all there's not
06:15 - really any such thing as a
06:16 - two-dimensional array it's really just
06:17 - an array and the things in the array are
06:19 - other arrays that's a two-dimensional
06:21 - array but and there's some conveniences
06:23 - for doing that but uh um I think it's
06:25 - going to be simpler actually if I use a
06:26 - one-dimensional array and we'll s of
06:27 - talk about why and see some pieces of
06:29 - that as I keep going okay so I have a
06:31 - onedimensional array right this list is
06:33 - going to store all the cell objects and
06:35 - I'm going to say grid. push cell so all
06:38 - I'm doing here is I'm saying make all of
06:41 - these cell objects and put them into
06:43 - this big array once I have that in
06:46 - draw I could actually
06:53 - then Loop through all of
06:57 - them and display them I'm going to
07:00 - call function called show so what this
07:02 - means is what I want to do now is just
07:04 - see that this is working and so what am
07:06 - I going to do in this cells in the what
07:09 - it need now is a new function called
07:10 - show in the cell object so I can add
07:13 - that here this do cell uh sorry this.
07:15 - show equals a function and here I want
07:17 - to draw something so where is the x
07:21 - coordinate for this particular cell well
07:23 - it's at the I location it's column
07:25 - location times W right cuz it's column 0
07:30 - 1 2 3 or 4 scaled up by how big those
07:33 - squares
07:34 - are X is
07:37 - this.j times W and then so I could just
07:41 - draw a rectangle at XY at that size and
07:45 - I could say stroke 255 no fill and now
07:49 - if I run this we should see ah okay so
07:51 - what did I miss cells is not defined
07:54 - sketch. JS
07:57 - Line2 okay so the array I called it grid
08:00 - not cells whoops I wonder why grid is uh
08:04 - oh and this should be grid
08:07 - also uh okay so that should fix
08:10 - that great so you can see now I have
08:12 - that grid there now we should dig a
08:15 - little bit deeper here because the whole
08:17 - point of doing this was not to draw
08:19 - rectangles here but each cell has walls
08:22 - it has four walls a top a right a bottom
08:25 - and a left so I should be either drawing
08:28 - the wall should be there or they
08:30 - shouldn't there be there so I need to
08:31 - draw them as individual lines so let's
08:33 - figure out how I would do that so here
08:35 - where I'm drawing instead of drawing the
08:38 - rectangle I want to draw the walls so to
08:41 - draw the wall I'm just going to use line
08:43 - so we can get rid of the rectangle I
08:44 - might want this later so I'm going to
08:46 - leave that commented out I'm going to
08:48 - say line what x x comma yx+ W comma y
08:55 - what's that going to give me so you can
08:58 - see here that that gives me a line from
09:01 - the top left to the top right of each
09:04 - cell now I could also draw from X comma
09:09 - y +
09:12 - W to X comma y+ W no no no no no no no
09:19 - to yeah yeah X plus W okay okay okay
09:23 - let's go to the Whiteboard here because
09:25 - this will be easier to figure out if I
09:26 - do this here okay so what's going on
09:28 - each cell
09:31 - this location is
09:32 - XY this location is x + W comma y this
09:37 - location is x + w y + W and this
09:40 - location is X comma y + W I think I got
09:43 - all those right so I need to draw a line
09:45 - from here to here a line from here to
09:47 - here a line from here to here and a line
09:49 - from here to here let's do
09:51 - that so that should be and I I can refer
09:54 - I can look back you know you can kind of
09:56 - imagine that that's there but I'm
09:57 - looking back at it and I'm saying the
09:59 - next line is X+ W oops I don't know
10:02 - where that came from x +
10:06 - W comma y to x + w y +
10:13 - W and then I need X+ W comma y + W and
10:18 - there's an extra boy there all doing all
10:20 - sorts of autocomplete stuff for me I'm G
10:22 - to have to work that out in this editor
10:24 - uh so to X comma y + W oh boy we're
10:29 - going to get get this eventually and
10:30 - then x y + W back to XY so now if I run
10:34 - this we can see ah it looks just like it
10:36 - did before but let's just sort of make
10:38 - sure things are working here like what
10:39 - if I take out this particular line
10:42 - actually doesn't look any different
10:43 - because if I take out the right side the
10:45 - left side of the cell next to it always
10:46 - picks it up but if I take out both both
10:50 - sides we just see only the oh the top
10:53 - and the bottom we only see the uh the
10:55 - horizontal lines um okay um
11:00 - so uh okay so okay I'm getting somewhere
11:05 - but I I got to think about this one
11:06 - thing I want to do this is me being like
11:07 - the anal anybody see the SAT Live sketch
11:09 - anal retentive Chef where like the
11:11 - garbage goes in the Ziploc bag and then
11:13 - that gets like and then like Ziploc bag
11:15 - goes in the plast the paper bag and the
11:16 - paper bag gets folded and gets taped
11:18 - well I am the anal retentive coder and
11:20 - what I want to do is just like align all
11:23 - of this so I can kind of like see this
11:26 - more
11:27 - easily what's going
11:29 - on uh and this is bothering me because I
11:32 - want spaces here so you should you
11:34 - should now turn this video to two times
11:36 - speed while I'm doing this and then go
11:38 - back but this I think is useful to be
11:41 - able to
11:42 - see exactly what's going on and I will
11:46 - do this
11:48 - periodically and this needs a space boy
11:51 - what is go oh I have just lost my mind
11:56 - here uh and this needs a space Oh you
11:58 - know what thing I need is uh Auto format
12:00 - I'm gonna when I take a break to go to
12:03 - the next
12:04 - video we'll edit this part out okay so
12:07 - oh oh and I need some spaces here this
12:09 - is really I really have you should not
12:11 - be like me be like some don't have this
12:13 - kind of problem be fine with the spacing
12:16 - and everything not being exactly right
12:17 - you know indentation is important but at
12:19 - some point in your life you just need to
12:21 - like write your code anyway the reason
12:22 - why I did this is I want to see like
12:23 - okay I want to see clearly like this is
12:26 - the x coordinate this is the Y this is
12:27 - the X I wanted everything to line up now
12:29 - L okay now how am I going to figure out
12:32 - a way I need something else for these
12:34 - cells I need you to figure out a way to
12:37 - know does it have a wall on any of these
12:40 - sides so what I'm going to do this is
12:42 - going to be a little bit strange I think
12:43 - a way of doing this is to create Boolean
12:45 - variables so I have a Boolean variable
12:48 - for the top for the right for the bottom
12:53 - and for the left top right bottom left
12:56 - are are there walls um
12:59 - are are does the wall exist for this
13:02 - particular cell so let's let's look at
13:04 - how I might do that so each cell and
13:06 - honestly I think what would be easier
13:08 - would be to say this. walls equals true
13:11 - comma true comma true comma true so I'm
13:14 - creating an array so each cell when it
13:17 - starts every wall is there true true
13:20 - true true so it's up to me to memorize
13:21 - let's all memorize this together top
13:24 - right bottom left top right bottom left
13:28 - stay it with me top right right bottom
13:30 - left okay that's going to be the order
13:31 - did I get it right here top right bottom
13:36 - left I think that's the right Order X to
13:39 - X Plus w y to y + W X plus W to x y + W
13:44 - to Y I'm pretty sure I got that right so
13:46 - what I can say here now is if walls
13:49 - index
13:51 - zero then draw this
13:54 - line
13:56 - and I'm going to repeat this a bunch of
14:00 - times and put
14:05 - in uh I bet you there's a key command
14:07 - this is the first time I've ever used
14:10 - Adam uh eventually there's a key command
14:12 - to Auto format it and one and two and
14:17 - three now I'm sure some of you could
14:18 - come up with like a case statement or
14:20 - you wouldn't need the curly brackets but
14:21 - I'm trying to be as explicit as possible
14:23 - so these are the lines I'm going to draw
14:25 - if the wall exists so you can see here I
14:28 - hit refresh walls is not defined so what
14:30 - of course I made the mistake that I
14:32 - always make which this needs to say this
14:34 - do walls and all of
14:37 - these and you can see there it is now if
14:40 - I change this to false false false top
14:45 - middle right wait top right bottom left
14:50 - I already forgot top right bottom left
14:51 - we should only see the left
14:53 - lines and you can see those are all the
14:55 - left lines um so and we can be sure
14:58 - about so so you can see at some point
15:00 - I'm going to be able to change these
15:01 - Boolean variables from true or false to
15:03 - add and remove walls based on how that
15:05 - Labyrinth should look okay so I think
15:08 - I'm actually this this concludes this
15:10 - first video where essentially all I've
15:12 - done is set up a grid a two-dimensional
15:16 - array ah it's a one-dimensional
15:19 - array and it has a bunch of cells that
15:22 - live on a grid each with an i and a j
15:25 - each cell is drawn as four lines top
15:28 - right bottom left I don't I probably
15:31 - said something totally wrong before
15:32 - because I think I was saying middle
15:34 - there's no middle top right bottom left
15:36 - top right bottom left and uh I also have
15:40 - a mechanism an array that has booleans
15:42 - in it to know whether top is right is
15:44 - true right is true bottom is true left
15:47 - is true if those lines should be there
15:49 - or not okay in the next video I'm going
15:51 - to look at the algorithm and see how we
15:53 - start to start from one of those cells
15:56 - and decide whether to remove a wall or
15:58 - not and that will start us with
16:01 - actually the maze creation itself