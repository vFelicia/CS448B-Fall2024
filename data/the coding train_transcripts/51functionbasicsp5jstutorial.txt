00:02 - Functions, in this
video I'm finally
00:04 - going to take the time to
go a bit deeper into what is
00:08 - this thing that's a function.
00:11 - We've seen functions,
and called functions.
00:13 - We kind of defined functions.
00:14 - There's a setup function,
the draw function.
00:16 - What is all this stuff?
00:18 - And what does it mean to
define your own functions
00:21 - and call your own functions?
00:22 - And why might you
want to do that?
00:24 - Now functions as a whole in
JavaScript is a huge topic.
00:27 - And they're kind of the
fundamental, foundational
00:29 - building block of
JavaScript in many ways.
00:31 - So hopefully, there's
going to be lots more
00:35 - to discuss in future
videos and topics
00:38 - as many different
gaps are filled
00:40 - in in terms of what
functions can do
00:41 - and how they're
used in JavaScript.
00:43 - But here, right now, I just want
to start with the very basics,
00:48 - calling a function and
defining a function.
00:51 - Now this is not a new topic.
00:53 - You, I, all of us who have done
anything in p5 and JavaScript
00:57 - before have been
doing this a lot.
00:59 - So for example, this line of
code here, ellipse 100, 100,
01:04 - 50, 50, this is
calling a function.
01:08 - Calling-- executing a function.
01:11 - Draw an ellipse in the
window, in the canvas.
01:15 - This, when I say
function setup and then
01:21 - presumably put
some code in here,
01:23 - this is defining a function.
01:27 - I'm defining a
function named "setup",
01:30 - and this is the code that
goes inside that function.
01:32 - Now if you're looking
at these two things,
01:34 - these are things that we've done
in so many different examples.
01:37 - But there's a strange
little fact here.
01:42 - In the examples, I've
called the ellipse
01:44 - function many, many times.
01:45 - But I never personally
defined the ellipse function.
01:50 - The setup function, we
have the inverse thing
01:52 - that's going on here.
01:53 - I've defined the setup
function many, many times
01:56 - in many examples.
01:57 - But I've never actually
called the setup function.
02:00 - This is because both
of these functions
02:02 - here are special
functions, special to p5.
02:05 - One of the things I said
that p5 is, p5 is a library.
02:09 - It's a library of functions--
ellipse, rect, line, fill,
02:13 - stroke, background.
02:15 - So the definition for
the ellipse function
02:17 - doesn't live within us--
although maybe in some ways
02:20 - it lives within us.
02:21 - But it lives within p5.
02:23 - It's part of the p5 library.
02:25 - You and I, we don't
have to define it.
02:27 - It's defined in p5.
02:29 - The setup function is also
a special p5 function.
02:32 - It's up to the user, the
programmer, me, it's up to you
02:35 - to define it.
02:36 - But p5 knows when to execute it.
02:38 - It executes it automatically
when the page loads.
02:42 - So both of these, they
are a little bit strange.
02:44 - You know, hopefully it was
intuitive to you to use these,
02:46 - but it's a little bit of
a strange thing going on.
02:49 - Define setup, p5 executes it at
the beginning of the program.
02:52 - Call functions,
like ellipse, those
02:54 - live with inside the p5 library.
02:56 - So what does it
mean to both define
02:59 - and call your own function?
03:02 - And so there are two reasons
why you might want to do this,
03:05 - and I'm sure there's many more.
03:06 - But two fundamental reasons,
sort of key principles
03:09 - of functions--
03:11 - one is modularity,
right down here.
03:15 - And the other, if I can
dare spell this right,
03:17 - is re-usability.
03:21 - So functions are a way that you
could organize your program.
03:25 - You've got like hundreds
of lines of code and draw.
03:27 - Some of it's doing this.
03:28 - Some of it's doing that.
03:29 - Some of it's doing that.
03:30 - You want to break that
up into modular pieces.
03:32 - You can put those into
separate functions
03:34 - and it helps keep your
code rather well organized.
03:38 - Re-usability-- I'm sure you've
encountered this scenario.
03:41 - You draw this very
elaborate pattern,
03:42 - and it has lots of
different shapes in it.
03:44 - You've figured out
how to draw it.
03:46 - And then you want to draw
it again in the window.
03:48 - Well, if you had a
function that takes
03:50 - care of all of that stuff, you
could then call that function
03:53 - twice, reuse that function
giving it different parameters.
03:56 - So these are the pieces
that I would like
03:59 - to look at in these videos.
04:00 - And you know what?
04:00 - I think what I'm going to do
in this video is just start
04:04 - with the modularity piece.
04:06 - So I'm going to
look at an example
04:08 - and make that example modular.
04:10 - And then in the next video,
I'll look more specifically
04:13 - at the re-usability piece.
04:15 - Because this is where
this question of arguments
04:20 - and parameters will come up.
04:22 - So let me see if I can just get
through this idea of defining
04:26 - a function, calling it, and
making a program modular
04:29 - and then move into
the next video.
04:31 - We'll look into this sort
of re-usability question.
04:34 - And then, there would
be some other things.
04:36 - So I have a list over here.
04:37 - There's a couple of other
things that I want to do.
04:39 - So there will probably be
three or four of these.
04:40 - OK, so let's come over
here for a second.
04:42 - I have a simple sketch,
if I can see it here.
04:45 - I'm going to run it.
04:46 - It's just a bouncing
ball sketch.
04:47 - It's a variation on
one of the sketches
04:50 - that I made earlier in a
video about conditionals.
04:52 - A couple of things that I'll
point out are different.
04:55 - One is, I turned the
variables into an object.
04:58 - So a lot of the
examples might just
05:01 - say bar x, bar y, bar speed.
05:03 - Here, I'm doing
this for a reason,
05:05 - because later there's
another aspect
05:07 - I'm going to fill in here.
05:08 - But remember, in
JavaScript you can
05:10 - make a variable
that's essentially
05:11 - a container for other variables.
05:13 - These are actually referred
to as key value, or name value
05:16 - pairs.
05:17 - The name is yspeed, the
value is negative 3.
05:19 - The name is xspeed,
the value is 4.
05:21 - So ball has all of
these variables.
05:23 - And you can see
down here, if I want
05:25 - to draw an ellipse
at ball x or ball y,
05:29 - then I just use the dot
syntax-- ball.x, ball.y.
05:33 - So that's what I have here.
05:34 - I have a bouncing ball sketch.
05:37 - Hurray.
05:38 - Now if I look inside
draw here, you
05:41 - can see there are a few
different kind of sections
05:44 - of code.
05:45 - I'm going to even add
a line break here.
05:47 - You could say
like, OK, well this
05:48 - is all the code that
draws the circle,
05:50 - the ellipse on the screen.
05:52 - This is the code that
handles what happens
05:54 - if it hits any of the edges--
05:55 - it inverts the speed.
05:57 - And this is the
code that moves it.
06:00 - It changes its x by its xspeed,
it changes its y by its yspeed.
06:03 - So there's really three things.
06:04 - There's draw.
06:06 - There's display.
06:07 - There's bounce.
06:08 - And there's move.
06:09 - So what I would like to
do is turn this program
06:11 - into a modular program
and has three parts--
06:14 - a drawing part, a bouncing
part, and a moving part.
06:18 - OK?
06:19 - So we need to write
three functions.
06:23 - I lost my pen.
06:23 - I need to come back
over here, and I
06:25 - want to just quickly
review, or actually
06:27 - layout for the first time
what the syntax for defining
06:31 - a function is.
06:33 - And actually, we have
that syntax already.
06:36 - This is the syntax.
06:38 - All we need to do is declare
the keyword function.
06:42 - I am going to declare--
06:44 - I'm going to define a function,
that's what that says.
06:46 - Then the function needs a name.
06:48 - Here the name was setup, but I
might make the name like move
06:51 - or display or bounce,
depending on the functions
06:54 - I intend to write.
06:55 - Then you need parentheses.
06:57 - Now, right now you notice
the setup function,
06:59 - the draw function just has an
open and closed parentheses.
07:02 - And that's what, for this
particular example that I'm
07:05 - making, we don't
need to put anything
07:07 - in between the parentheses.
07:09 - That's where we have to set
up arguments and parameters.
07:12 - Parameters, sorry.
07:13 - The word actually
I'm looking for
07:14 - is parameters here
for the function.
07:16 - And then, some code is going
to go inside the function.
07:19 - And that code is in between
an open and curly bracket.
07:22 - So the parentheses stuff I'll
get to more in the next video.
07:24 - So this is that syntax.
07:26 - So now I could come over
here, and I can scroll down--
07:30 - let me scroll.
07:30 - Let me move this over a little
bit so I think you can see it.
07:33 - I can scroll down.
07:35 - So first, where do I want
to define the function?
07:37 - Now this is a very
tricky question
07:40 - because you can
define functions kind
07:41 - of all over the place in
all sorts of crazy ways
07:45 - in JavaScript.
07:45 - But right now, I'm going to
do something kind of simple
07:48 - and just say, below draw--
07:49 - you know, kind of
like where I might
07:50 - have put mouse pressed or key
pressed or other functions,
07:53 - I'm going to make up
some of my own functions.
07:55 - I'm going to say make
a function called move.
07:59 - And I'm going to make a
function called bounce.
08:02 - And I'm going to make a
function called display.
08:05 - So now you can see,
I defined three.
08:08 - Ooh, boy!
08:08 - What are all these
extra curly brackets?
08:10 - I don't know where
those came from.
08:12 - But you can see I
have now defined
08:13 - three functions-- function
move, function bounce,
08:16 - function display.
08:18 - Even though the words
sound very like,
08:19 - oh, those must be
important-- move, bounce.
08:23 - Those are not words that
are part of the p5 library.
08:25 - They are new words
that I am making up
08:27 - only for the purpose
of this sketch, right?
08:28 - I could've called it
flibbidy-flew, or whatever.
08:31 - It doesn't really matter.
08:32 - I mean, it matters
because you want to pick
08:34 - function names that make sense.
08:35 - And you don't want to pick
function names that are already
08:37 - used for something else.
08:39 - But for the most part, you
can pick whatever names
08:42 - that you want, just like
picking a variable name,
08:44 - same rules apply.
08:45 - So if we look, this is the
code for moving the ellipse
08:49 - around the screen, changing
its x by its speed.
08:52 - So I'm going to actually just
cut this and paste it in here.
08:55 - This is the code for
the bounce, and I'm
08:58 - going to put that in there.
08:59 - And this was all the code.
09:01 - And I'm going to leave
background and draw,
09:03 - because conceptually I feel like
drawing the background is not
09:08 - part of drawing that
bouncing ball itself.
09:10 - It's separate.
09:11 - So what I really
just want to do is
09:13 - keep the code that's for
displaying the ball itself.
09:16 - So we can see now draw
has nothing in it anymore.
09:22 - There's just a move
function, a bounce function--
09:24 - and if I scroll down--
a display function.
09:27 - And now let me stop and
run this sketch again.
09:31 - Nothing in the window--
09:33 - canvas that is.
09:35 - Nothing in the canvas.
09:35 - Why is there nothing
in the canvas?
09:37 - All the functions are there.
09:39 - So all we did was define
the functions, right?
09:44 - All we did was
define the functions.
09:45 - The flow of the program--
09:47 - setup runs once, draw
runs over and over again.
09:49 - The only thing that's
happening is background.
09:51 - Now setup and draw, I never
had to call those functions
09:55 - because they're
special p5 functions
09:57 - that p5 executes
in order to control
10:00 - the flow of the program--
10:01 - setup once, draw
over and over again.
10:03 - But any other functions
that I define,
10:05 - I've got to tell
the program when
10:07 - to make those things happen.
10:08 - So I could put
them all in setup,
10:10 - but I don't want to
move the ball in setup.
10:12 - I don't want to display
the ball in setup.
10:14 - What I want is to have
those things happen
10:16 - every time through draw.
10:17 - So I want to move--
10:19 - whoops-- bounce, and display.
10:23 - Now this, by the way, is the
syntax for calling a function.
10:27 - And notice, it's no
different than the syntax
10:29 - for calling background.
10:31 - Background, we're executing it.
10:32 - You can see it's
colored red because it's
10:34 - part of the p5 library.
10:36 - Move, bounce, and
display are functions
10:37 - that aren't part
of the p5 library,
10:39 - but I have to find them below.
10:41 - So now, this should be exactly
the same program we had before.
10:45 - I do want to note, however,
that background requires
10:47 - an argument, a color.
10:49 - And move, bounce, and display
don't require any arguments.
10:52 - And this is an essential
topic that I would like
10:54 - to look at in the next video.
10:57 - OK, so let's run this
and see if this works.
11:00 - Hey, it's the same exact
program that we had before.
11:04 - The only difference now
is that it's modular.
11:06 - There is a move part, a
bounce part, a display part.
11:09 - And this is useful for you for
a couple of different reasons.
11:12 - Number one, if I just want to
test how things are working,
11:16 - I could comment out this
move function and run it.
11:20 - And you can see the ball
is no longer moving.
11:22 - So if I have these functions--
11:24 - if I have the code kind of
organized into these pieces,
11:26 - I can kind of control which
pieces I turn on and turn off.
11:29 - I can also say things
to myself like,
11:31 - oh, I just want to change
the way the ball looks.
11:34 - Oh, well, I know
where I need to look.
11:36 - And in a small program
this seems sort of silly.
11:38 - But in a much larger
piece of software,
11:40 - it might be hard to find
the right part of the code.
11:42 - But if you have that part
of the code in a function,
11:45 - I could say, ah, I wanted it
to have some color, some fill.
11:51 - So I know all I need to do is
change the display function.
11:54 - And now I added a
fill to that circle.
11:57 - OK, so this is the essential
basics of defining a function
12:01 - and calling a
function and looking
12:04 - at how you can take
parts of a program
12:07 - and put them in
separate functions
12:08 - to make a program modular.
12:10 - In the next video,
what I want to do is--
12:12 - whoops-- I want to
look at what happens
12:17 - if you want to call a function
multiple times, if you want
12:20 - to take an idea, package
it up into a function
12:23 - and reuse that idea in different
ways with different parameters.
12:27 - And that's kind of
a key piece as well.
12:29 - OK, here we go.