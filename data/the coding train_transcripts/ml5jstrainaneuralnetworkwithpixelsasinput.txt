00:00 - and you thought we were done with the
00:03 - ml5 neural network tutorials but no
00:06 - there is one more because I am leading
00:09 - to something I am going to you'll will
00:11 - soon see in this playlist a section on
00:14 - convolutional neural networks but before
00:17 - I get to convolutional neural networks I
00:18 - want to look at reasons why a
00:21 - convolutional layer I have to answer
00:24 - this question like what is a convolution
00:26 - I've got to get to that but before I get
00:28 - to that I want to just see why they
00:30 - exist in the first place so I want to
00:33 - start with another scenario for training
00:35 - your own neural network that scenario is
00:38 - an image classifier now you might
00:41 - rightfully be sitting there saying to
00:43 - yourself you've done videos on image
00:45 - classifiers before and in fact I have
00:47 - the very beginning of this whole series
00:50 - was about using a pre trained model for
00:53 - an image classifier and guess what that
00:55 - pre trade model had convolutional layers
00:57 - in it
00:58 - so I want to now take the time to unpack
01:01 - what that means more and look at how you
01:03 - could train your own convolutional
01:06 - neural network again first though let's
01:09 - just think about how we would make an
01:11 - image classifier with what we have so
01:12 - far we have an image and that image is
01:18 - being sent into an ml 5 neural network
01:23 - and out of that neural network comes
01:26 - either a classification or regression
01:28 - and in fact we could do an image
01:30 - regression and I would love to do that
01:32 - but let me start with a classifier
01:34 - because I think it's a little simpler to
01:35 - think about and consider so maybe it
01:39 - comes out with one of two things either
01:41 - a cat or a dog and some type of
01:46 - confidence score I previously zoomed in
01:51 - on the ml5 neural network and looked at
01:52 - what's inside right we have this hidden
01:54 - layer with some number of units and an
01:57 - output layer which in this case would
01:59 - have just two if there's two classes
02:01 - everything is connected and then there
02:04 - are the inputs with PostNet you might
02:08 - recall there were 34 inputs because
02:10 - there were 17 points on my body each
02:12 - with an X
02:13 - my position what are these let's just
02:18 - say for the sake of argument that this
02:20 - image is 10 by 10 pixels so I could
02:24 - consider every single pixel to be an
02:30 - individual input into this ml 5 neural
02:34 - network but each pixel has three
02:39 - channels an r g and b so that would make
02:44 - 100 times 3 inputs 300 inputs that's
02:49 - reasonable so this is actually what I
02:52 - want to implement take the idea of a two
02:55 - layer neural network to perform
02:57 - classification the same thing we've I've
02:58 - done in previous videos but this time
03:01 - use as the input the actual raw pixels
03:04 - can we get meaningful results from just
03:07 - doing that after we do that I want to
03:11 - return back to here and talk about why
03:13 - this is inadequate or not really
03:16 - inadequate but how this can be improved
03:18 - on by adding another layer so this layer
03:23 - won't look sorry the inputs will still
03:25 - be there we're always going to have the
03:27 - inputs the hidden layer will still be
03:30 - there and the output layer will still be
03:32 - there but I want to insert right in here
03:35 - something called a convolutional layer
03:38 - and I want to do a convolutional a
03:40 - two-dimensional convolutional layer so I
03:42 - will come back you want to just skip to
03:44 - that next video well if and when it
03:46 - exists that's what I will start talking
03:48 - about that but let's just get this
03:50 - working as a frame of reference I'm
03:52 - going to start with some pre-written
03:54 - code all this does it's a simple p5.js
03:58 - sketch that opens a connection to the
04:00 - webcam resizes it to 10 by 10 pixels and
04:04 - then draws a rectangle on in the canvas
04:08 - for each and every pixel so this could
04:11 - be unfamiliar to you how do you look at
04:14 - an image in javascript in p5 and address
04:16 - every single pixel individually if
04:18 - that's unfamiliar to you I would refer
04:20 - to my video on that topic that's
04:23 - appearing over next to me right now
04:25 - and you could go take a look at that and
04:26 - then
04:26 - back here but really this is just
04:28 - looking at every X and y position
04:30 - getting the RGB values filling a
04:32 - rectangle and drawing it so what I want
04:35 - to do next is think about how do I
04:38 - configure this ml5 neural network which
04:42 - expects that 10 by 10 image as its input
04:46 - let me make a variable called pixel
04:48 - brain and pixel brain will be a new ml5
04:52 - neural network I should have mentioned
04:58 - that you could find the link to the code
05:00 - that I'm starting with in case you want
05:01 - to code along with me the both the
05:03 - finish code and the code I'm starting
05:04 - with will be in this video's description
05:05 - so to create a neural network I call the
05:08 - neural network function and give it a
05:10 - set of options one thing I should
05:12 - mention is while in all the videos I've
05:14 - done so far I've said please yet you
05:17 - need to specify the number of inputs and
05:19 - the number of outputs to configure your
05:21 - neural network the truth is ml 5 is set
05:24 - up to infer the total number of inputs
05:26 - and outputs based on the data you're
05:28 - training it with but to be really
05:30 - explicit about things and make the
05:33 - tutorial as clear as possible I'm going
05:34 - to write those into the options so how
05:38 - many inputs think about that for a
05:40 - second the number of columns times the
05:43 - number of the rows times RGB maybe I
05:45 - would have a grayscale image maybe I
05:47 - could just make it I don't need a
05:48 - separate input for RGB but let's do that
05:50 - why not I have the the 10 by 10 in a
05:53 - variable called video size so let's make
05:55 - that video size times video size times 3
05:58 - let's just make a really simple
06:00 - classifier that's like I'm here or not
06:03 - here so I'm gonna make that 2 the task
06:10 - is classification and I want to see
06:14 - debugging when I train the model so now
06:18 - I have my pixel brain my neural network
06:21 - oops that should be three let's go with
06:25 - my usual typical terrible interface
06:28 - meeting no interface and I'm just going
06:29 - to train the model based on when I press
06:31 - keys on the keyboard so I had a key
06:34 - press function and then I'm let me just
06:38 - lay a little goofy here which I'm just
06:39 - gonna
06:40 - a when I press the key ad example key so
06:44 - I need a new function called out example
06:49 - label so basically I make the key that I
06:52 - press the label so I'm gonna press a
06:54 - bunch of keys where I'm standing in
06:55 - front of the camera and then press a
06:56 - different key when I'm not standing in
06:57 - front of the camera now comes the harder
07:00 - work I need to figure out how to make an
07:03 - array of inputs out of all of the pixels
07:07 - luckily for me this is something that I
07:09 - have done before her and in fact I
07:11 - actually have some code that I could
07:12 - pull from right in here which is looking
07:16 - at how to go through all the pixels to
07:17 - draw them but here's the thing I am
07:20 - going to do something to flatten the
07:22 - data I am NOT going to keep the data in
07:25 - its original columns and rows
07:27 - orientation I'm going to take the pixels
07:29 - and flatten them out into one single
07:32 - array guess what this is actually the
07:34 - problem that convolutional neural
07:36 - networks will address it's bad to
07:38 - flatten the data because it's spatial
07:40 - arrangement is meaningful
07:41 - I'll start by creating an empty array
07:43 - called inputs then I'll loop through all
07:46 - of the pixels and to be safe I should
07:52 - probably say video dot load pixels the
07:55 - pixels may already be loaded because I'm
07:57 - doing that for down here and I could do
07:59 - something where if I'm drawing them I
08:01 - might as well like create the data here
08:03 - but I'm going to be redundant about it
08:04 - and I'm going to say ah but this is we
08:08 - this here's the weird thing I thought I
08:11 - wasn't going to talk about the pixel
08:13 - array in this video and just refer you
08:14 - to the previous one but I can't escape
08:16 - it right now for every single pixel in
08:20 - an image in p5.js there are four spots
08:24 - in the array a red value a green value
08:28 - of blue value in an alpha value alpha
08:30 - value for transparency the alpha value I
08:33 - can ignore because it's going to be 255
08:35 - for everything oh there's no
08:37 - transparency if I wanted to learn
08:38 - transparency I couldn't make that an
08:40 - input and have ten by ten times four but
08:43 - I don't need to do that here so in other
08:44 - words pixel zero starts here 0 1 2 3 and
08:49 - the second pixel starts at index 4
08:52 - so as I'm iterating
08:54 - over the all of the pixels I want to
08:56 - move through the array four spaces at a
08:59 - time there's a variety of ways I could
09:00 - approach this but that's gonna make
09:02 - things easiest for me so that means
09:04 - right over here this should be plus
09:06 - equals four then I can say the red value
09:09 - is video dot pixels index I the green
09:17 - value is at I plus one and the blue
09:20 - value is at I plus two and just to be
09:22 - consistent I'm gonna just put a plus
09:24 - zero in there so everything lines up
09:26 - nicely so that's the r g and b values
09:29 - then I want those are G and B values for
09:33 - this particular pixel to go in the
09:34 - inputs array the chat is making a very
09:39 - good point which is that I have all of
09:41 - the stuff in an array already and all
09:44 - I'm really doing is like making a
09:46 - slightly smaller array let's removing
09:48 - every fourth element I could probably do
09:50 - that with like the filter function or
09:52 - some kind of higher-order function or
09:53 - maybe just use the original array not
09:55 - really sure why I'm doing it this way
09:56 - but very emphasize the sort of data
09:58 - preparation step so I look forward to
10:01 - hearing your comments about and maybe
10:03 - re-implementation to this that just used
10:05 - the pixel array directly but I'm gonna
10:06 - keep it this way for right now so I'm
10:08 - taking the are g and b and putting them
10:10 - all into my new array then the target is
10:13 - just the label a single label in an
10:16 - array and I can now add this as training
10:18 - data pixel brain add data inputs target
10:24 - lets console.log something just to see
10:26 - that this is working so I'm gonna
10:28 - console.log the inputs and let's also
10:33 - console.log the target just to see that
10:36 - something's coming out so a yeah we can
10:41 - see there's an array there and there's
10:43 - the a and now if I do B I'm getting a
10:46 - different array with be there so I'm
10:48 - gonna assume this is working I could say
10:50 - inputs dot length to make sure that
10:52 - that's the right idea yeah it's got 300
10:56 - things in it okay next step is to train
10:58 - the model so I'm going to say if the key
11:02 - pressed is T
11:05 - don't add an example but rather train
11:10 - the model and let's give it train it
11:14 - over 50 epochs and have a call back when
11:17 - it's finished training let's also add an
11:22 - option to save the data just in case I
11:24 - kind of like stop and start a bunch of
11:26 - times and not not collect the data again
11:28 - and I'm ready to go except I miss
11:33 - something important I have emphasized
11:35 - before that when working with neural
11:37 - networks it's important to normalize
11:40 - your data to take the data that you're
11:42 - using as inputs or outputs look at its
11:45 - range and standardize it to some
11:47 - specific range typically between 0 and 1
11:50 - or maybe between negative 1 and 1 and it
11:53 - is true that ml5 will do this for you I
11:55 - could just call normalized data but this
11:58 - is a nice opportunity to show that I can
12:01 - just do the normalization myself for
12:03 - example I know this is another reason to
12:06 - make a separate array sort of I know
12:08 - that the range but of any given pixel
12:11 - color is between 0 and 255 so let me
12:14 - take the opportunity to just divide
12:19 - every RGB value by 255 to squash it to
12:22 - normalize it between 0 and 1 let's see
12:24 - if this works I'm gonna collect it so
12:29 - I'm gonna press this is a little bit
12:30 - silly but I'm gonna press H for me being
12:33 - here in front of the camera
12:37 - then I'm going to move off to the side
12:40 - and I'm going to use n for not being in
12:43 - front of the camera so I'm not here and
12:46 - I'm just gonna do a little bit right now
12:48 - and then I'm gonna hit T for train and
12:52 - whoa lost function going crazy but
12:55 - eventually it gets down it's a very
12:57 - small amount of data that I gave it to
12:59 - train but we can see that I'm getting a
13:01 - low loss function if I had built in the
13:04 - inference stage to the code it would
13:07 - probably start to guess Dan or no Dan so
13:09 - let's add that in when I'm finished
13:11 - training then I'll start classifying the
13:16 - first thing I need to do if I'm going to
13:17 - classify the video is pack all those
13:20 - pixels into an input array again then I
13:26 - can call classify on pixel brain and add
13:32 - a function to receive the results let's
13:38 - do something fun and have it to say hi
13:40 - to me so I'm gonna make this label a
13:43 - global variable with nothing in it and
13:45 - then I'll say label equals results label
13:48 - after I draw the pixels let's write
13:51 - either write hi or not write hi
13:53 - [Music]
13:58 - so just to see that this works let's
14:00 - make the label H to start it says hi now
14:06 - let's not make it H and let's go through
14:09 - the whole process
14:14 - train the model and says hi no I forgot
14:25 - to classify the video again after I get
14:29 - the result so it classified it only once
14:31 - and I want to then recursively continue
14:34 - after I get the results to classify the
14:37 - video again just so we can finish this
14:40 - out I actually saved all of the data I
14:42 - collected to a file called data JSON and
14:44 - now I can say pixel brain load data data
14:48 - JSON and when the data is loaded then I
14:55 - can train the model so now I've
15:01 - eliminated the need to collect the data
15:02 - every single time let's run the sketch
15:05 - it's going to train the model I don't
15:08 - really even need to see this when it
15:10 - gets to the end hi I'm pleased that that
15:23 - worked
15:23 - I probably shouldn't but I just want to
15:26 - try having three outputs so let's try
15:29 - something similar to what I did in my
15:30 - previous videos using teachable Machine
15:33 - to train an image classifier and we'll
15:35 - look at this ukulele coding train
15:37 - notebook and Rubik's Cube so let me
15:40 - collect a whole lot of data open to
15:42 - press you for ukulele RF rubik's cube
15:45 - and and for notebook
15:49 - [Music]
15:56 - save the date in case I need it later
15:58 - and train the model all right so now
16:03 - ukulele you and for notebook and can we
16:11 - get an R I wasn't I stood to the side
16:13 - when I was doing the Rubik's Cube so
16:15 - that is pretty important so it's not
16:18 - working so well so that's not a surprise
16:21 - I don't expect it to work that well this
16:23 - is why I want to make another video that
16:27 - covers how to take this very simplistic
16:32 - approach and improve upon it by adding
16:34 - something called a convolutional layer
16:37 - so what is a convolution what are the
16:40 - elements of a convolutional layer how do
16:42 - I add one with the ml5 library that's
16:45 - what I'm going to start looking at in
16:46 - the next section of videos but before I
16:50 - go I can't resist just tweak one more
16:53 - thing because I really want to look at
16:55 - and demonstrate to you what happens if
16:58 - you change from using in pixel input to
17:01 - perform a classification to a regression
17:03 - so I took code from my previous examples
17:06 - that just demonstrated how ml5 and
17:08 - regression works and I change the task
17:10 - to regression I had to lower the
17:12 - learning rate thank you to the live chat
17:14 - who helps me figure this out after like
17:16 - over an hour of debugging I had to lower
17:18 - the learning rate to get this to work I
17:20 - train the model with me standing in
17:22 - different positions associated with a
17:24 - different frequency that p5 sound
17:26 - library played and you can see some
17:28 - examples of me training it over here and
17:30 - now I am going to run it and see if it
17:33 - works
17:37 - so I said save the data and now it's
17:39 - training the model and as soon as it
17:42 - finishes training you'll be able to hear
17:46 - [Music]
17:51 - all right so I will leave that to you as
17:54 - an exercise
17:54 - obviously include the links of the code
17:57 - for this in the video's description on
17:59 - the webpage on the coding training comm
18:00 - with this particular video I can come
18:02 - back and implement it you can go find
18:04 - the link to the live stream where I
18:05 - spent our over an hour implementing it
18:07 - but I'll leave that to you as an
18:09 - exercise see if you have you follow this
18:11 - video and have image classification
18:12 - working can you change it to a
18:14 - regression and have it control something
18:16 - with continuous output okay whoof you
18:19 - made it this far
18:20 - what thank you and I will be back and
18:23 - start to talk about convolutional neural
18:25 - networks what they mean in the next
18:26 - video
18:31 - [Music]