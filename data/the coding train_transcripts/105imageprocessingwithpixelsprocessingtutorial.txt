00:02 - Okay, we're ready for the next stage. So now that we've kind of looked at the...
00:07 - the pixel array and understand how the pixel array mapped to the actual pixels in a window the next thing
00:13 - I want to do is think about this particular scenario.
00:16 - So here is our Processing... our Processing window.
00:22 - Now what if we have an image, and the image I have in the example that I'll work with is of a frog.
00:28 - So what if I have an image frog.jpeg, which I am not gonna attempt to draw a frog, has a frog in that image.
00:36 - Let's say I want to look at every single pixel of that frog
00:40 - and copy that pixel into the window. Why might I do that? Well for the one thing we know the image function
00:48 - frog
00:50 - is a function that takes an image and draws it to a given x y. So essentially what we're doing here is learning how to
00:57 - write the guts of this function.
00:59 - How we have an image, we can look at every single pixel, take every single pixel value and
01:04 - put those pixel values into our Processing window.
01:07 - The reason why we might do this without the image function is we want something else to happen right here.
01:13 - In the moment of taking this pixel and transfering it to the screen.
01:16 - Maybe we want to make that pixel, brighter or darker or turning to black and white or...
01:22 - insert you're much more creative and interesting idea for image processing right there. So...
01:27 - this is... this... if we can understand this
01:30 - algorithm of looking at the pixels, putting them into the window and doing something to manipulate the colors of those pixels in between...
01:38 - then we can start building a Photoshop and
01:43 - you know from scratch. I don't know what I'm saying exactly.
01:46 - But, you know what I'm saying.
01:48 - Okay, so this is the idea. Let's look at how we might do this. Ah! But before we do I want to mention something.
01:55 - So this is the way that I'm going to build our first example of looking at image processing however
02:02 - I'm going to suggest that there might be a slightly... a way
02:05 - that's... it might actually be a little bit better in the end for a variety of reasons.
02:10 - So let's just say our Processing window is here. This is our Processing window, and we have our image of our frog.
02:19 - What if I had another image? A blank image...
02:24 - another PImage object and here
02:26 - I actually process all the pixels from the frog into this image object through our
02:32 - algorithm pixel by pixel by pixel and then here I just use the image function
02:38 - to draw this new blank image into the window. The reason why this is useful to do is
02:44 - this is going to work really nicely for demonstration purposes, but as soon as the window is a slightly different size than our source image, we're going to have some problems.
02:52 - So this way if I am creating an empty PImage
02:56 - I'm manipulating the pixels of this frog.
02:59 - Putting it into this empty PImage and then putting that PImage onto the screen.
03:02 - Then my window it kind of retains its purity it could be any size
03:05 - I could be drawing stuff on it
03:07 - and I don't have to worry so much about having some type of conflict between setting the pixels and drawing stuff.
03:12 - So this is a nice way of working as well in terms of image Processing.
03:15 - I should mention that we also could just to give a third option here....
03:20 - If this is my frog and this is my Processing window
03:24 - I could just like manipulate the pixels of the frog itself
03:27 - onto itself, and then draw it to the window. The reason why this is not the best strategy in all cases is once
03:34 - I've manipulated the pixels of the frog image to draw it the window
03:37 - I've lost my original frog image.
03:39 - So this scenario
03:41 - saves this frog image. It never changes it. If I'm
03:44 - manipulating the pixels, the new pixels are going to a separate image and that separate image is going to the window
03:49 - but again
03:50 - let's start with this simpler case of just reading the pixels of the frog and
03:53 - putting those pixels in the window and let's take a look at how that might work.
03:57 - Ok, so I'm back over here, and if I run this particular sketch...
04:02 - here's my frog that
04:03 - I just grabbed from the internet.
04:05 - And I'm loading the image and drawing the image and there it is in the screen. Now notice here
04:10 - the size. Why is my size of this window 858 by
04:13 - 536? That's because this image of the frog I downloaded those are the dimensions of
04:17 - that image and to make this example work really nicely without by accident running into a problem...
04:22 - you know with all this math of multiplying by width... If the width of the image and the width of the window are different....
04:28 - our math has to be a little bit more sophisticated to account for that. Which is an important thing to learn in practice
04:33 - I would say
04:34 - maybe try that as an exercise.
04:35 - First get this idea of image processing to work with an image and window of the same dimensions, then see what happens when you change
04:42 - the dimensions. Although,
04:43 - this again is going to be a good scenario for that. Doesn't matter what size the window is because these will always be the same exact image.
04:50 - Okay, so let's come back over here, and think about how to do this. Now...
04:53 - I have from our previous example in the previous video that code commented out, so if I...
05:00 - Comment this back out, in and run this. I now have, oh, I have that weird...
05:07 - dark center white....
05:09 - white edges,
05:11 - result. Right? Because I'm setting every, the pic, every pixel according to some arbitrary algorithm
05:15 - that's coloring the pixels according their distance from the center. But I don't need that here.
05:19 - I can get rid of this line of code and what do I actually want here?
05:23 - I want image dot pixels loc. Look at this single, ok it's not image, I'm sorry it's frog.
05:32 - Look at this line of code. What I'm saying is: "Go to that frog image,
05:36 - give me the pixel from that location,
05:38 - take that pixel and put it into the screen at the same
05:41 - location. For every single pixel go and get the pixel for the frog put it on the screen."
05:46 - Now one thing I missed is... you see how I'm loading the pixels for the window because I'm going to mess with those pixels?
05:52 - I probably should also alert Processing to the fact that I want to look at the frogs pixels as well.
05:58 - So I'm going to say frog.loadPixels(). The truth of the matter is I've a feeling if I didn't add that in this would still work.
06:04 - Loading and updating pixels is sort of a funny thing like, sometimes you need to, sometimes you don't. I would say: "Why not just do it all the time?"
06:11 - Then you don't have to worry about whether you needed to or not. Okay. Look at this. There's our frog.
06:16 - I just...
06:17 - Just to prove that this is really doing that I'm going to comment out this line of code which was drawing the entire frog image to the window.
06:24 - There it is. There's our frog. We have now written the guts of that image function.
06:28 - We have now written the code that says look at every pixel from an image and put it all, everyone of those pixels in the window.
06:34 - We haven't really done anything yet interesting cuz we're just verbatim taking that exact color and putting it exactly in the window.
06:40 - Let's look at what we might do to kind of mess with that. So one problem here
06:45 - is that, you know, I could start to do something weird like...
06:48 - Well, what if I just said like divide by 2?
06:51 - That's kind of a strange result right? The thing about, that's kind of cool actually, a sort of surprising result. The..
06:58 - The reason why this is giving us such a strange,
07:01 - unintentional, confusing, difficult to predict result is remember the actual color is just this
07:07 - conglomerate of the RGB values into one big integer.
07:11 - So the actual number is somewhat irrelevant. What we need to do is actually look at the red, green and blue components individually.
07:17 - So what I think might be a good strategy here would be to say give me...
07:25 - the red part of the pixel, the green part, the blue part,
07:33 - and then...
07:35 - make a new color RGB.
07:40 - Okay, so I added one little bit here. What did I do?
07:43 - I've got my frog again it's exactly what it was before.
07:46 - But instead of saying that exact pixel put it there I said:
07:50 - "Hey, give me the red, give me the green,
07:52 - give me the blue, make a new color, RGB and put it there. Now I at least understand what's really going on.
07:58 - I now have access to the red, green, blue components of every single color. What am I choosing to do with that information?
08:04 - Absolutely nothing. I'm just gonna get verbatim on the screen, but I could it could be really mischievious here, and I could say: "Aha,
08:10 - let me swap the green and the red values." And now I've kind of
08:14 - done something strange to the color of this frog. So you can start to see that once I've done this I
08:18 - now have the ability to start doing anything I want to those pixels.
08:23 - I could say like you know, the blue value times 2. Which is making it much bluer. So this is really... now... now
08:30 - we're here in the world of image processing. We are looking at every single pixel....
08:35 - For every single pixel we were grabbing the RGB components, and we are manipulating those values and drawing a new image.
08:41 - This is essentially what an image filter does, you know...
08:45 - Sell your Instagram now for 2 billion dollars or whatever and send me a thank you note in the mail or whatever.
08:51 - Um, so...
08:53 - This appetizer is in many ways a good place to stop
08:56 - because
08:56 - here you now could kind of recreate this algorithm and your assignment, your exercise would be like come up with something a little bit more
09:02 - interesting to do, but let's... let's... before we get
09:06 - Before, before I leave you with that kind of exercise,
09:09 - Let's think about some creative possibilities that or that go beyond just kind of changing the colors around. One thing is,
09:17 - the pixels are spatially oriented. We know they're x y values so we can do something different to each pixel. Right now
09:25 - we're doing the same operation to every single pixel. We could say like for example. What if I...
09:30 - You know if x is greater than 200 do this...
09:35 - otherwise if
09:38 - X otherwise do, you know, put the pixels back to normal and we can see, you know, I am only have only
09:45 - doing this weird algorithm to these pixels and not to these pixels. So you can start to do whatever you can kind of imagine
09:51 - in here, based on the X&Y values.
09:54 - Another idea that I might have for you is to go back to that distance idea
10:00 - What if I said... okay, give me the distance between the... oh sorry, the center of the window...
10:09 - and the xy of that pixel and now
10:13 - whoops, pixels loc equals a color. Why don't I say...
10:20 - use that distance to and... to add it, to each one of these colors.
10:31 - Now I can start to see well
10:33 - everything just got really really bright. So one thing we can notice here. Is that how do we affect the brightness of a pixel?
10:40 - The brightness of a pixel is affected by the magnitude of its color value. So we're using distance here
10:47 - but perhaps an easier demonstration would be let me just add mouseX to every single pixel color you can see that over here
10:53 - I'm brightening, brightening, brightening, brightening the image, of course once all those values get to 255 I have a completely white image.
10:59 - Another way of doing this would be to multiply each color. So what if I multiply each color times you know 1.1
11:06 - I'm making each color 10% brighter.
11:09 - So, you know, if you're not familiar with the map function of
11:13 - Processing, the map function says given a value of certain range and map it to another range.
11:17 - So what if I have a factor?
11:19 - And I map the distance, the distances, you know somewhere between like 0 and 200 or something like that....
11:25 - And why don't I map that to between 0 and 2?
11:30 - And why don't I multiply each...
11:35 - each component of the
11:38 - color by that factor? So what I've done here now when I run this...
11:45 - oops
11:47 - sorry the distance....
11:49 - I'm saying, has a range between 0 and 200 map that range to a range between 0 and 2.
11:55 - And if you notice as I... the pixels are now
11:58 - darker in the center and brighter to the, towards the edge and really
12:02 - I think it might be more interesting if they're brighter towards the center and
12:05 - darker towards the edge. Look I kind of highlighted the center of this image.
12:09 - And why am I hard coding in the center when I could actually just move the mouse around?
12:15 - Now I have this kind of like flashlight effect.
12:18 - So I'm manipulating the brightness of every single pixel according to its distance from the mouse. Again
12:24 - I kind of quickly just like mocked up this demonstration the point is, it doesn't matter...
12:31 - What you do here. The point... What matters is I'm getting the RGB and I'm making a new color.
12:38 - So for you....
12:39 - Come up with your own idea of how you might manipulate the image. Look, just, just, I should probably finish this video...
12:44 - But just to do one more demonstration.
12:50 - An interesting... I'm going to comment this out, so I have access to it later if I'm saving these and putting them somewhere.
12:57 - Something we might know about an image is the brightness of a pixel, so let's say I just get the brightness...
13:04 - of the frog's pixel at a given location.
13:09 - A threshold filter... Something we could do is we can say let's redraw this image...
13:13 - But I'm only going to only draw a white or black. It doesn't matter.
13:16 - I'm not going to draw any kind of interesting color. I'm not even going to draw a grayscale color. I'm only ever going to say...
13:26 - Make every pixel black.
13:29 - Not every... Make a pixel black or make a pixel white. Now, what if....
13:35 - I make all the pixels white if the brightness
13:40 - of the frog pixel is greater than 100 but black if it's less than 100.
13:46 - Let's run this... and you can see... I sort of see the frog in there.
13:51 - Pixels are white or black and you can see what's the threshold?
13:54 - The threshold is 100. If a pixel is brighter than 100,
13:58 - it's white and, you know, maybe what I should do here is kind of use the mouse to
14:03 - control this threshold and we can start to see like I can now kind of recreate this frog image
14:09 - and my threshold with the mouse over here seems kind of like a nice one.
14:13 - For I'm seeing the frog as white and the background is black. So...
14:17 - the reason why I point this out to you is, this is starting to kind of walk into this area of computer vision,
14:23 - that we're going to look at later. If I wanted to find the frog in this image...
14:28 - Applying a threshold would allow me to sort of separate out the image into only white or black pixels...
14:34 - And maybe I could then get the average location of all the white pixels
14:37 - And that's about where the frog is. So you could see how like visually it's kind of almost easier to recognize
14:42 - it's actually not easy to recognize visually for us because we're a human being and all the colors are very meaningful to us but to
14:47 - a computer algorithm now
14:49 - it's very easy to recognize a white pixel versus a black pixel. So perhaps this idea of different types of image processing filters might be
14:56 - useful later as we begin to try to recognize or analyze or get, gain some sort of aspect of the...
15:02 - knowledge about the image according to its pixels.
15:05 - So these are some sample ideas of things you can do. I could just set every pixel to black or white, I could set every pixel according to the
15:11 - distance. I would say here is now an opportunity for you to do a couple things. One...
15:16 - try to invent your own image processing algorithm or recreate one that you know about. Another thing that you might consider...
15:22 - I don't know if I'm going to have time to put this in the videos right now or I'll come back and do it later is....
15:26 - If you could make your own image
15:31 - by saying createImage...
15:33 - this is the function you could look this up in the Processing reference that makes an empty image.
15:37 - See if you could redo this example from drawing... and I have this, I'll try to link to it below that...
15:43 - from instead of drawing your pixels from the image to the window draw your pixels from an image to a
15:49 - blank image and then draw that blank image to the window, and then you could have that blank image rotate, grow, shrink...
15:54 - There's lots of possibilities for what you could do from there, but I'll try to fill in a video that covers that at some point.
16:00 - So maybe by the time you're watching it'll actually just be the next video. Okay.
16:04 - Thanks very much, and this one is finished now.