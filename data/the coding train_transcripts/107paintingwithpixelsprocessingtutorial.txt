00:02 - Okay in this video. I want to think about images in a slightly different way let's first though
00:08 - let's think about how we've been thinking about them so far.
00:11 - How have we been doing that? We have an image? You know our example is a file called frog dot JPG.
00:18 - Can you see that? I think so. It's got a frog in it, and we load that image, and maybe we have a
00:25 - Processing window and the frog... oh my God, I'm going to try draw a frog is drawn into the window.
00:33 - So we take this image that we've loaded from a file
00:35 - and we're drawing it into the window. Another thing that we've seen is...
00:38 - Well instead of just taking the image and displaying it all by once
00:42 - What if we look at every single pixel one at a time?
00:44 - Let's look at this first pixel and do something to it and set that first pixel there. Let's look at that second pixel,
00:49 - let's do something to it and let's set that second because there. Image processing. Make it brighter,
00:54 - make it darker, a threshold effec,t bla bla bla all this stuff that we've been doing.
00:58 - Here's a different way that I want to think about what we might do with an image in this video.
01:05 - Okay
01:06 - Here is a Processing window. What if I forgot all about the fact that I could load images
01:11 - or do anything with images and all I'm doing is I'm making some kind of drawing pattern.
01:14 - Oh, maybe I wrote a program that draws cool squiggly lines all over the screen, or maybe I wrote a program
01:21 - that's a particle system and
01:23 - there's all these bubbles and when I click the mouse the bubbles float up
01:27 - and they bounce across the top and then they explode into flying stars and hearts, whatever it is. Whatever kind of animated
01:34 - geometric design algorithmic pattern Thingamabob that you're making...
01:37 - You're making it. How do you decide what colors should be in this thing?
01:42 - Maybe you pick your favorite colors my favorite colors are purple and pink. Maybe you pick your...
01:49 - Random colors, and you use random or maybe perlin noise or gaussian or all these crazy other ways of picking numbers...
01:55 - But maybe you have something else.
01:57 - Maybe you have a database of color.
01:58 - You have this like file with all these things written in it. Which are all the colors that you'd like; a palette so to speak.
02:05 - What could be that database of color? What could be that palette? It could be a source image.
02:10 - So what if instead of simply drawing an image or having one-to-one; every pixel pixel, every pixel pixel...
02:16 - I just had an independent drawing system from which I am pulling colors from an image. How do we make that work?
02:23 - So this is what I want to start to do and I want to build a couple little quick examples...
02:28 - To see how this might work, so let's go back over.... I hope I'm recording. I am recording.
02:33 - Let's go back over here, over to the code oops. You could see my laptop all secrets are revealed, okay,
02:39 - hopefully that's better um by the way. I have this watch this...
02:43 - Whoa... Can you hear that? Just like a hydraulic desk, okay.
02:47 - Alright, so you know we've got to take some minutes here to enjoy the the small wonderful little things in life, okay.
02:53 - So here's a Processing sketch.
02:55 - It loads an image, it draws the image and...
02:58 - That's what it does. Now, let's think about some other things
03:01 - we might do in a Processing sketch like let's say
03:04 - I make a black background at the beginning and what I'm going to do is I'm going to draw a circle
03:11 - somewhere
03:13 - in the window instead. Here's my independent drawing system.
03:16 - How should I pick my colors maybe I'll pick my colors from the frog. But let's make this a little bit more interesting. Let's....
03:23 - at least
03:25 - every time we run through draw let's draw a
03:29 - circle at a different location.
03:32 - So now if we run this we can see every time through draw, I'm not erasing the background
03:36 - I'm drawing a new circle, drawing a new circle,
03:38 - I'm drawing a new circle.
03:39 - And we could say, we could, we could, we could take ourselves up on this challenge
03:43 - and say what are my favorite colors? My favorite colors are...
03:48 - You know some sort of purplish color. Now I'm drawing a purplish.
03:52 - I could say actually what I wanted is it to be a random color now. I'm drawing them somewhat randomly. Now,
03:59 - let's do something finally different. What if I were to say?
04:05 - Give me a color
04:08 - from the frog.
04:13 - Look at this little bit of code here.
04:17 - The get function. Now, here's a moment... I don't remember what I did in the previous videos.
04:21 - I wish I did but in the previous video certainly we were accessing the pixel array. We were saying....
04:29 - We were saying...
04:30 - We would say something like this frog dot pixels and then the pixels
04:35 - index and maybe that index would be an x plus
04:39 - y times the width. Right, this we spent we certainly spent all this time
04:44 - trying to make; figure out how this algorithm works, right?
04:47 - There's a two dimensional image. All the pixels in that image are in a one dimensional array.
04:51 - If I have an x and y coordinate
04:53 - I want to look up at a pixel from that.
04:55 - I need to convert from the x and the y to that single index into the array. And this is
05:00 - probably how we should do this example here, but just for simplicity...
05:06 - And this is sort of the fastest the the fastest way of doing these pixel operations.
05:10 - But if you'll notice something about this example that I'm making...
05:14 - How many pixels do I need to look up in draw here? One. Every time through draw
05:19 - I just want a single pixel. Where am I drawing this ellipse.
05:23 - That single pixel here.
05:26 - We can use the get() function. get() is convenient, it's maybe a little slower, but in this case, it's totally fine.
05:31 - We just need one pixel.
05:33 - But if I run this... I'm going to get an error the method get() expects parameters like this: (int, int).
05:40 - This is a lovely error message by the way. This is... if you're don't, not aware...
05:44 - I mean, this is going to become quickly out of date this video then if I say this, but this is version 3.0a5.
05:50 - A lot of the error messages have changed in recent Processing versions to make them a bit more friendly and understandable.
05:56 - But what is the error here?
05:57 - I mean, I'm able to draw an ellipse at pixel x comma y, even though they're not integers.
06:03 - But
06:04 - while Processing is a
06:06 - forgiving and friendly and happy to take your floating-point numbers and figure out which pixel you meant on the screen, after all pixels are really
06:13 - integers. There's no such thing as
06:16 - pixel 2.5 or 3.5. I think I think we might have covered this at some point.
06:20 - I really shouldn't make these videos like weeks apart that I've no idea what I did in the previous ones.
06:24 - But let's think about this if I have an image, and I have a pixel location like 300 comma
06:32 - 215, these are integers.
06:34 - There's no pixel 215 point 2, there might be kind of sub pixels in our mind and fancy ways of thinking about this
06:40 - but we need an integer.
06:42 - Even if I say ellipse 300 point 5
06:45 - where Processing is really going to draw that ellipse, it's going to just take off that decimal place and draw it at 300.
06:50 - And however with the get() function with the pixel array we have to really enforce that use of integer.
06:56 - So I'm going to
06:57 - very... an easy way for me to do this is
07:00 - to simply convert these values into integers before I ask for that pixel color and I'm going to do this we can see oh
07:08 - if only we could just sit here and wait for a long period of time, maybe we would see our frog.
07:15 - So in my mistakes, I stopped and paused the video, and I've returned. I actually left this run for a while
07:20 - which was a good result which you can start to see that that image of the frog kind of peering through here.
07:26 - So we've what we've done is we're not displaying the image anywhere.
07:30 - We're simply loading it into memory. We came up with some weird idea which is like
07:34 - let's just draw circles all over the screen, and then we picked colors out of the...
07:39 - we pick colors out of that image. We essentially, that image became a lookup table, a database of color by which we choose;
07:47 - Wherever we drew a circle
07:49 - we looked up the
07:50 - corresponding color at that, in that location in the image and
07:52 - drew it there.
07:53 - So let's just do a couple more things to this. One is I'm going to take out the stroke and then I'm
08:01 - also going to just to make this happen faster... if I put a little loop in draw...
08:11 - I can say like oh just do one hundred at a time. So now we can see, now we can see that
08:17 - we're just like layering
08:17 - 100 random circles with colors every frame... and, and you can sort of see the quality here is kind of different, it has this...
08:24 - The resolution is not very high.
08:26 - But you can see all these circles are picking up the colors from the image and another thing. We might do is...
08:32 - Just add a little alpha here.
08:34 - So if I give it an alpha value of 25
08:37 - you can see that now these colors are going to slowly blend in over time.
08:43 - And you get this kind of watery like
08:46 - appearance... and, and, if, you know, I've kind of gotten addicted to doing this. If I had to do
08:50 - 500 circles per frame it's going to be much much faster
08:52 - and you might even see almost as if we have this kind of shimmering version of a frog. So this is one example.
08:59 - I kind of...
09:02 - Let's, let me save this and let me go to a different sketch.
09:05 - You know there's there's not much different about this sketch other than instead of simply
09:11 - randomly placing a circle on the screen each frame, this is they're particle objects.
09:15 - They move randomly about and while they're moving there's no reason why I couldn't say like okay. Well, where,
09:22 - here where I display it. I'm making them white why don't I...
09:30 - pull up wherever...
09:32 - This frog is... this frog; this ellipse is going to be drawn at x comma y.
09:37 - Why don't I before I draw it wherever it is look up the pixel underneath in that image? So...
09:44 - If I go back and actually I need to load the image. I already have it in the data folder. I did that before.
09:56 - Jpeg and let's go back to this crucial... right let me put this in here 255. We can see...
10:04 - There are my white circles. Now, let me instead say see the color from the frog and you can see wherever it is
10:11 - it's sort of
10:12 - revealing the color that's underneath it in that image. Now, we can't make out the frog at all. I could say like okay...
10:18 - Well, what if I instead of having 2000, maybe
10:21 - 3000 circles
10:23 - And you can see like... oh...
10:24 - You can sort of see how that frog is kind of being revealed as these circles move around I could start to do things like...
10:32 - okay, well let's uh let's give it some alpha and....
10:38 - If I do that you can see like, it's like much dimmer.
10:42 - But what if instead of drawing the background every frame...
10:46 - I move the background back into setup and you can see oh
10:49 - I'm like painting the frog now as these particles move about and I had so many on the screen
10:55 - I wonder if this would have been a slightly more effective
10:57 - demonstration with only 100 you can see how these are moving around and we're kind of, they're kind of
11:01 - streaking and painting. So again I haven't picked
11:05 - two very creative ideas. I just said, okay
11:08 - well, why don't I randomly put circles on the screen or why don't I randomly move circles around the screen.
11:13 - But you could come up with a much more elaborate set of behaviors.
11:17 - Things bouncing into each other, swirling around and spiral patterns things that aren't just circles.
11:22 - Streaks of lines could you make kind of like...
11:25 - What kind of painterly non-photorealistic rendering
11:29 - techniques might you be able to generate by layering shapes with different
11:32 - alphas. What if you use like images. Like other images that you're tinting as they're like smearing across. There's so many possibilities.
11:39 - But I will leave you with
11:41 - a couple exercises.
11:44 - One is...
11:46 - If as soon as I have some system, where you could find these code examples... Although
11:50 - they're mostly the same as in the in learning Processing chapter...
11:56 - 15
11:59 - Let me give you a couple exercises. One is
12:02 - change these from using get() to using the pixel array.
12:05 - Just as a kind of practice between get and the pixel array and seeing the difference. Another thing you might think about is...
12:11 - This one that, this particle one that we just made.
12:16 - These particles are moving and their color is
12:19 - adapting to their location according to the image.
12:22 - But what if you drew the entire image as a set of particles and then the particles started moving
12:27 - but they took their pixel color with it, with them?
12:29 - So could you make an image can fall apart and then could it put itself back together? So that's certainly a challenging problem
12:36 - but one that you might think of in terms of like
12:38 - practicing all of these techniques and and the last one that I'll mention I think which is worth...
12:43 - Which is one of the examples here. Is you might think about what this would mean in three dimensions?
12:48 - So if I went I'll open up this example, and I hope this works. I think it's just using a sunflower.
12:53 - It's very low, but you can see here. We have this image.
12:58 - Which is actually drawn as a bunch of rectangles, and I'm moving those pixels in a
13:04 - three-dimensional space according to their brightness.
13:06 - So this is another thing you might think about. What if you had, you took a 2-dimensional image and brought it into 3D?
13:12 - Could you could you have a pick, a kind of like...
13:16 - 3d, 3-dimensional space of pixels that are all moving around each other? Okay, so
13:21 - you will write some comments or email me or
13:24 - tweet at me. I guess.
13:27 - And I will
13:29 - provide some solutions to some of these exercises or answer questions, or post on the forum.
13:33 - I don't know.
13:34 - There's got to be some better way of being in touch with each other than be just spouting to a
13:38 - camera with a screen behind me. But for now I'm going to go this video. I meant to time it.
13:44 - It's I don't know it's been a while.
13:46 - Goodbye