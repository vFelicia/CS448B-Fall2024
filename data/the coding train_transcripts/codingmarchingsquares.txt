00:01 - [Music]
00:13 - welcome to another episode of coding in
00:17 - the Cabana today I am going to tackle
00:20 - something called marching squares the
00:29 - topic of marching squares are marching
00:31 - cubes was originally suggested for the
00:33 - coding train on February 18 2019 by
00:36 - Quinn the sunrise so I do want to try
00:39 - marching cubes I suppose that'll either
00:41 - be in a follow-up video whether it's a
00:43 - Cabana one or a livestream I'm not so
00:45 - sure just yet but I'm gonna stick with
00:47 - just marching squares for this first
00:50 - video if you're looking to do some
00:52 - research into this algorithm the first
00:53 - place to look is the 1987 paper marching
00:57 - cubes a high-resolution 3d surface
01:00 - construction algorithm by William
01:02 - Lorenson and Harvey Cline Sebastian lag
01:05 - has a wonderful coding adventure video
01:06 - about using the marching cubes algorithm
01:08 - to create a endless underwater world as
01:12 - well as a video using marching squares
01:14 - for 2d to generate procedural cave
01:17 - patterns coding challenge number 28 on
01:21 - the coding train is about metal balls
01:23 - which I've used a pixel-based approach
01:25 - to create those patterns but you can
01:27 - also use marching squares to create a
01:29 - similar effect and Jamie Wong zero wind
01:32 - online documents this process and a
01:35 - wonderful article about meta balls and
01:37 - marching squares from August 2014 I'm
01:41 - going to demonstrate the marching
01:42 - squares algorithm just by using it on a
01:45 - noise space I'm use the open simplex
01:48 - noise algorithm although you could
01:50 - certainly use worldly noise or any of
01:51 - the other noise algorithms I've talked
01:52 - about and then once I finish that up we
01:55 - can I'll try to return back to some of
01:57 - these ways that you could expand it
01:58 - further into meta balls and terrain
02:00 - generation and 3d and then hopefully
02:02 - you'll make lots of wonderful variations
02:05 - of this and I'll be able to look at
02:08 - those and show them on a live stream
02:09 - someday so here's how marching squares
02:11 - is described
02:12 - a computer graphics algorithm generates
02:14 - contours for a two-dimensional scalar
02:16 - field rectangular array of individual
02:18 - numerical values what so let's try to
02:21 - break that down what that means so the
02:23 - good news is this is a two-dimensional
02:24 - algorithm and it's something that we can
02:26 - visualize in a two dimensional space so
02:28 - a nice little p5 canvas or processing
02:31 - window I think I'm gonna use processing
02:33 - which I like to do in these Cabana
02:34 - videos but always there will be a Java
02:37 - Script p5 GS version released as well
02:39 - that you can find in this video's
02:40 - description what does this mean the
02:43 - rectangular array of individual
02:45 - numerical values as two-dimensional
02:46 - scalar field well if I take my
02:50 - processing window and divide it into a
02:52 - two dimensional grid we could think of
02:54 - each cell of this grid as having a
02:57 - number that's how we visualize
02:59 - two-dimensional Perlin noise or whirling
03:01 - noise or all sorts of other algorithms
03:03 - that I've looked at on this on the
03:04 - coding train but in order to make
03:06 - marching squares happen I need to put a
03:08 - little twist on this I don't actually
03:10 - want to think of the center of each one
03:12 - of these as having a number I want to
03:14 - think of these spots here where each
03:18 - square note the idea of square here has
03:21 - four corners and each of those four
03:23 - corners represents a number
03:25 - ultimately it's the same sort of thing
03:26 - like it's just a matter of where am i
03:28 - drawing my lines and where am i drawing
03:30 - add my dots but there is a 2d grid of
03:32 - numbers and each one of these spots has
03:35 - a value so let me first create a
03:37 - processing window that just draws little
03:39 - dots like this and maybe gives each one
03:41 - a random number between 0 and 1 I think
03:47 - I'll want some type of variable to keep
03:49 - track of what is the resolution what's
03:51 - the what's the distance between any
03:54 - given tot and the next dot so if the
03:55 - pixel window is 600 by 400 maybe each
03:58 - dot is separated by 10 pixels I'll call
04:01 - that rez for short for resolution with
04:06 - the Z so once I have a resolution I want
04:10 - to know how many columns and how many
04:12 - rows and now I have my two-dimensional
04:17 - array which is going to keep track of
04:18 - all these values in this scalar field
04:23 - so let's just write a Luke a nested loop
04:29 - that is to look at every spot in the
04:31 - array oh and I can just say random one
04:37 - then I'm going to do that exact same
04:39 - nested loop in draw to visualize the
04:43 - field I'm gonna visualize it as a stroke
04:46 - color field times 255 point at eye x res
04:54 - J times res right because there's this
04:56 - many columns spaced out by resolution
04:58 - and let's see what that looks like okay
05:03 - we can see that here now let me make
05:05 - those a little bit bigger and we can see
05:09 - here's my two dimensional scalar field
05:11 - or a rectangular array of numerical
05:13 - values so the idea of marching squares
05:16 - is what would be some algorithm to find
05:18 - contours and patterns in this array of
05:22 - numbers and I think just to make this
05:24 - easier to see I'm gonna just increase
05:26 - the resolution to 20 let's actually have
05:28 - the stroke weight be the resolution
05:30 - times like 0.2 or something and actually
05:34 - make that more like 0.4 and there we go
05:37 - so I just wanted to be able to see this
05:39 - a bit more clearly at higher resolution
05:41 - so to demonstrate how this works I think
05:44 - it would be actually easier for me to
05:46 - consider each one of these numerical
05:48 - values as just a zero or one later I'm
05:51 - going to describe what you can do once
05:53 - you have a floating point continuous
05:55 - values and how that affects the marching
05:57 - squares algorithm but something much
05:59 - simpler to start just with zeros and
06:00 - ones so let me actually change that so
06:02 - I'm gonna say floor random - and I'm
06:06 - gonna change this to an integer I'm
06:07 - gonna come back to floats later but
06:08 - let's just leave it as an integer right
06:09 - now let's let the background be gray so
06:12 - I can see whoops and this has to be
06:13 - integers so now I can see I have just
06:18 - black and white dot to figure this out
06:20 - let's look at just one square
06:26 - each one of these corners will call them
06:29 - maybe a B C and D just as a naming
06:34 - device each one of these corners has a
06:35 - value of 0 or 1 so let's just say for
06:38 - the sake of argument this one is 1 and
06:40 - maybe I'll visualize that by filling it
06:42 - in and this one is 2 oh sorry this one
06:45 - is 0 this one is 0 and this one is 0 so
06:47 - I'm gonna just consider we draw that
06:49 - again I'm gonna consider just this one
06:52 - particular configuration well it so
06:54 - happens that this particular
06:55 - configuration the way that I choose to
06:58 - visualize it is by drawing a line here
07:01 - we can see that all of these are empty
07:03 - but this one is full therefore the line
07:06 - goes across from the midpoint here to
07:08 - the midpoint here I could show you
07:10 - another one maybe from this you could
07:14 - guess right this one is full and this
07:17 - one is full so I want to separate that
07:18 - so the idea here is that basically I
07:21 - whichever ones are on or off I want to
07:23 - separate the ones that are on from the
07:26 - ones that are off so for example if this
07:28 - was full and this was full and by full
07:31 - hello it told me that I should say this
07:32 - were one not zero then the line would
07:35 - actually end up here
07:36 - and now how many possible scenarios are
07:40 - there well if there are four corners and
07:44 - each corner could be on or off
07:46 - a zero or a one in each one of these
07:49 - spots whoops zero zero zero all the way
07:52 - up to 1 1 1 1 well this is like a 4-bit
07:56 - number there are 4 bits for zeros or
07:59 - ones 2 to the 4th power equals what
08:02 - that's 16 so there are 16 possible
08:05 - configurations the glorious of water she
08:08 - seems very thirsty it's hot dates
08:10 - early-ish the sun's not beating down in
08:13 - here yet but it's getting worn she looks
08:16 - like she could use some water
08:19 - come on let's go get you some water okay
08:32 - [Music]
08:46 - so these are all 16 possibilities let's
08:49 - put the numbers underneath zero one two
08:52 - three and now let me put these these are
08:57 - called ISO lines so number 10 here just
09:09 - so I have a fixed version of it here
09:14 - should be looking at my processing
09:19 - window right now I realize I'm missing
09:21 - an extra column an extra row right
09:24 - because the idea is I want to look at
09:25 - each square with four corners and the
09:28 - school in order to fill the full space
09:29 - down here at the edges I'm missing the
09:32 - right and bottom corners so I can fix
09:36 - that very easily just by adding one more
09:38 - column and one more row and now see I'm
09:41 - ready to look at each collection of four
09:43 - corners and figure out which isoline
09:46 - should I draw up based on that I look at
09:48 - any individual square these are the
09:51 - important points all right these
09:53 - midpoints between the corners because
09:56 - that's what's gonna connect the line
09:57 - whether it's this or whether it's this
09:59 - or whether it's this any of these are
10:01 - what I'm drawing so I think I'm gonna
10:03 - call this one a B C and D so let me
10:06 - first calculate the positions of each
10:08 - one of those points I'm gonna do this in
10:10 - a separate loop also because I need to
10:13 - stop at minus one because the final
10:16 - column doesn't have any neighbors to the
10:18 - right and the final row doesn't have any
10:20 - neighbors to the bottom a is AP time
10:23 - need is P vector just to figure out what
10:25 - speaker ABC and D the x value is what
10:29 - column I'm on times that resolute
10:31 - and point a which is over here is the
10:36 - x-value of this plus half right this the
10:42 - length of each side is my variable red
10:44 - so half of that plus res times 0.5
10:47 - that's x and y for a is just at the top
10:51 - so using that same idea I can figure out
10:54 - b c and d c is why is all the way at the
11:00 - bottom and x is again in the middle and
11:03 - then d is X's at its original location
11:09 - of the top left and Y is in the middle
11:11 - and I forgot to make a variable for Y
11:14 - and because of the person who I am which
11:20 - I am just happy to be these days
11:22 - I must align all of the spacing here I
11:25 - [Music]
11:32 - don't know whether that makes it better
11:33 - or worse but I'm very happy with how
11:35 - that looks right now so if I just wanted
11:38 - to put let's say this line at every
11:42 - single spot I would say line from a dot
11:45 - X a dot y to be X B dot y let's say
11:51 - stroke 255 oh and let's make these
11:56 - thinner stroke weight one and there we
12:00 - go so we can see now I've got this line
12:04 - every single at in every single square
12:07 - but that's not what I want to do I only
12:09 - want that line if the squares are this
12:14 - particular configuration configuration
12:17 - number four so B's by the way if I were
12:20 - to say 0 0 0 0 0 0 0 1 0 0 1 0 notice
12:27 - that I'm counting in binary so each one
12:30 - of these maps to the binary
12:32 - representation of the numbers I don't
12:34 - know if I made that totally clear so if
12:36 - I take any binary number I just need to
12:40 - convert this into its base 10 rappers
12:43 - tation this being four and then figure
12:47 - out which one of these it is and draw
12:49 - the appropriate line
12:50 - so let me write a function I'm gonna
12:53 - call it a get state that gets the
12:57 - numeric the int the base ten state based
12:59 - on four zeros and ones so I'm gonna give
13:02 - it four arguments this is kind of silly
13:03 - because I could actually use some type
13:05 - of built-in java function to convert
13:07 - from binary to decimal or base two to
13:09 - base 10 but I'm just gonna do this in a
13:11 - very manual way because I know I only
13:13 - ever have four bits
13:15 - return a times one plus B times two plus
13:19 - C times four plus D times eight and so
13:22 - if I were to now say int state equals
13:26 - get state oh no no no I'm not passing
13:31 - these in what I'm passing in is the
13:33 - value of each of these corners which is
13:36 - in my field array so this is field I J
13:41 - field I plus 1 J I J I plus 1 J I plus 1
13:47 - J plus 1 I plus 1 okay it all fits on
13:57 - one line so that looks good looks good
13:59 - to me
13:59 - okay so now if state is for this
14:05 - particular line that I've drawn that's
14:08 - only if the state is for Oh guess what
14:11 - here's a really excellent time to use a
14:13 - switch statement oh I'm so afraid of
14:16 - switch statements but I'm gonna be
14:18 - strong and brave and I'm gonna use a
14:20 - switch statement today and I'm not
14:23 - definitely not going to Google syntax
14:25 - for a switch statement in Java
14:26 - no I I know it off the top of my head
14:28 - right cuz I've been programming for 20
14:29 - years of course I know the syntax for a
14:31 - switch statement off the top of my head
14:34 - [Music]
14:37 - so in the switch the thing that I'm
14:40 - checking is state and then I'm checking
14:42 - whether it's zero one oh let me just add
14:47 - one for zero since this code I copy
14:50 - pasted in here already has starts from
14:52 - one then I'm going all the way up to 15
15:00 - now you might be thinking oh isn't there
15:03 - some nice elegant way to do this without
15:05 - a separate line of code for each
15:07 - particular state probably I'm so excited
15:11 - for people to watch this video and make
15:13 - all sorts of new and different ways of
15:14 - doing this algorithm with shorter code
15:16 - more efficient code cook more creative
15:18 - code so please share that with me but
15:20 - I'm just gonna get this to work gonna do
15:22 - it based on each state individually of
15:24 - course I actually don't need a case for
15:26 - 0 because in the case of 0 I don't draw
15:28 - anything so I didn't need to put that in
15:30 - there I mean I might want to add those
15:31 - back in if I wanted to do something
15:33 - based on that but let's just add case 1
15:35 - which is drawing a line from and if you
15:38 - I remember this is from a C to D line
15:42 - and you know what I'm gonna write my own
15:44 - function you can do this in Java because
15:46 - you can overload functions so I'm gonna
15:49 - write a function that gets two P vectors
15:51 - v1 v2 I'm just gonna call it line and
15:55 - draws a line between them so I don't
15:58 - have to like constantly type out the X
16:00 - and the y over and over again so let's
16:04 - do that that's right right XY XY okay
16:07 - good now I'm going to say line from C to
16:10 - D and that makes sense you can see that
16:13 - line appearing every time there's a mmm
16:17 - it's not right
16:18 - Oh the first one is x 8 oh boy this is
16:23 - been there for a while my binary number
16:26 - starts on the left that goes to the
16:28 - right so the left-hand digit 0 or 1 is
16:31 - the amount is the is the 2 to the fourth
16:35 - no two to the third excuse me two third
16:38 - 2 squared 2 to the 1 2 to the 0 there we
16:44 - go now we're seeing that in
16:46 - correct place case number two now I
16:48 - should be able to do these fairly
16:49 - quickly case number two is a line
16:51 - between B and C case number three is a
16:58 - line between a B and D so I'm now going
17:04 - to speed through this and you'll see if
17:07 - you can see I'm sure I'm gonna make a
17:08 - mistake but you'll see if I do I think
17:17 - I've put in all the correct line
17:19 - configurations based on every possible
17:21 - values for the four-corners what this
17:26 - gives me Hey look at that I have now
17:30 - drawn contours around all of the areas
17:34 - of black and white let's try putting in
17:38 - a different algorithm now I'm gonna use
17:41 - open simplex noise I would refer you to
17:44 - some videos that I made on open simplex
17:46 - noise I even worked on a library for
17:48 - processing that incorporates open
17:50 - simplex movies didn't really get
17:52 - finished so I'm just gonna pull in the
17:54 - open simplex noise code directly from
17:56 - one of my previous examples here this
17:59 - was developed by Kurt Spencer in 2014
18:04 - it's direct Java code without all the
18:08 - processing niceties so I'm actually
18:10 - gonna put it in a opens inflect annoys
18:12 - Java tab and then I should be able to
18:14 - say open simplex noise noise noise
18:20 - equals new open simplex noise and then I
18:26 - what I'm going to do is I'm going to
18:28 - calculate in the draw loop new values
18:31 - each time so let's move this into the
18:35 - draw loop and instead of a random number
18:38 - I'm going to say noise eval and I want
18:41 - to offsets an X offset and a Y offset so
18:45 - let's have X offset start at 0 and let's
18:47 - link seems super strange like when
18:49 - you're talking about X offset Y offset
18:51 - noise eval so you'll have to go back and
18:54 - look at some of my videos on Perlin
18:56 - noise and open simplex noise but the
18:59 - shore
19:00 - the gist of it here is I am looking at
19:03 - this two-dimensional space and looking
19:05 - for smooth random value so I'm going to
19:07 - get nice smooth gradients from white to
19:10 - black like smooth gradients of gray
19:12 - throughout this space by calling this
19:14 - function so first of all let me change
19:16 - this to float that's gonna cause all
19:20 - sorts of problems and then this I have
19:23 - to convert to a float because the noise
19:25 - algorithm gives me a double it just
19:26 - gives me a decimal number with more
19:28 - precision but I don't need that I could
19:29 - convert it right to a float for using it
19:31 - processing let's use this casting syntax
19:34 - to convert the output okay just check to
19:36 - make sure oh my god the mic has been
19:39 - down here this whole time
19:43 - when I had
19:44 - integers just zeros and ones each corner
19:47 - had a value now each corner has a value
19:52 - a noise value and open simplex noise
19:54 - gives me numbers between negative 1 and
19:57 - 1 so I want to keep these values because
19:59 - I might be able to do something more
20:02 - with them if they're continuous values
20:04 - later or at least suggest some things
20:05 - that you could try but basically I think
20:08 - a solution that it could have is you
20:10 - know zero being right here in the middle
20:11 - if it's greater than zero it's a 1 if
20:13 - it's less than zero it's a zero in terms
20:16 - of converting it to a binary
20:17 - representation and I can actually just
20:19 - use the ceiling function so if I have a
20:20 - number between negative 1 and 1 ceiling
20:22 - raises it up so if it's below zero it'll
20:25 - become zero if it's above zero to become
20:26 - one so I think this is going to be a
20:28 - little bit awkward code like in terms of
20:31 - making this so long but I can just put
20:32 - ceiling around each of these all of the
20:37 - values here are all the same because I
20:39 - took the same noise value at the same x
20:43 - offset and wah I offset so I need to
20:45 - move throughout that two-dimensional
20:46 - space so I'm going to create a variable
20:48 - called increment I'm going to call that
20:51 - just I'm gonna just set that to 0.1 and
20:53 - for every column X offset will go up by
20:57 - increment and for every row Y offset
20:59 - will go up by increment and now there we
21:03 - go so we can see this is the noise space
21:06 - and this is drawing a contour around it
21:08 - now maybe what I want to do let me
21:10 - lower the resolution a little bit I
21:12 - think it's time to do that now and there
21:14 - we go we can start to see this terrain
21:17 - it's like terrain like thing with these
21:18 - contours drawn around it I love this
21:20 - alright let's do something a little bit
21:22 - more and let me use the fact that open
21:25 - simplex noise can be calculated in
21:27 - three-dimensional space so while this
21:30 - really could be something quite exciting
21:32 - if I were rendering in 3d and then
21:34 - eventually could use four day open
21:36 - simplex noise what I'm going to do
21:38 - instead is use that third dimension
21:39 - essentially as thinking of it like time
21:41 - so frames of animation so if I create a
21:44 - global variable called Z offset set that
21:48 - equal to zero and then every frame Z
21:51 - offset goes up I think I might want to
21:53 - control this separately from the X often
21:55 - Y off incrementation so I'm just gonna
21:57 - hard code this in there the same number
21:59 - but I want to be able to have separate
22:01 - control over it and now hmm oh well of
22:05 - course I need to add that to the noise
22:06 - calculation whoa that is why I want to
22:12 - control it separately because I want to
22:15 - have it go up much slower and there we
22:20 - go so now you can just see this is very
22:23 - very fast algorithm so some things that
22:26 - might be interesting to try here one is
22:28 - I don't know how much value I'm getting
22:31 - out of rendering those points it's nice
22:33 - to see actually you know what a way that
22:34 - I would like to render them just because
22:36 - I'm curious let me say let me actually
22:39 - make this fill and no stroke just
22:43 - control these as recta this isn't
22:45 - exactly accurate because the value is
22:47 - the corner I'm just sort of curious
22:50 - oh yeah that's kind of nice looking I
22:53 - sort of like seeing it this way that's
22:55 - what I was imagining and I could make
22:57 - the resolution much smaller I could make
23:01 - this fullscreen very slow one thing I
23:10 - could do that might be interesting is
23:12 - just actually not bother drawing this at
23:17 - all the rectangle so that'll speed
23:19 - things up a little bit make the
23:21 - background
23:22 - black and then I could also probably use
23:25 - the P 2d renderer which is a hardware
23:28 - accelerated there we go look at that so
23:33 - here we go this is the this is really
23:35 - the end of this video it's the marching
23:37 - squares algorithm over a 2d open simplex
23:41 - noise field but I have really only
23:43 - scratched the surface I think with the
23:45 - creative possibilities here I have not
23:47 - explored color I'm just creating the
23:50 - field of numbers just with open simplex
23:52 - noise there are lots of other noise
23:54 - algorithms oh I could use an image
23:56 - convert it to grayscale and have those
23:58 - be the values I could use my live webcam
24:00 - image I could use distance from
24:06 - different circles or other objects
24:08 - floating in the space this is what's in
24:09 - the Jamie Wang article about using a
24:12 - moving circle screen a metal balls like
24:14 - pattern you can look at what Sebastian
24:15 - lag did for a procedural cave generation
24:18 - there are so many possibilities but one
24:21 - thing that I haven't explored that you
24:23 - will notice in if you look at the
24:24 - Wikipedia page explanation or Jamie
24:26 - Wong's article is that I am always
24:30 - drawing the lines from these exact
24:32 - midpoints however each one of these
24:35 - corner values now has a floating point
24:37 - number what if I had right if these are
24:43 - ones we know the line goes here but what
24:48 - if these are what if the values here
24:50 - were this is just like 0.01 and this is
24:53 - 0.99 maybe this should be for the higher
24:58 - value not closer to this edge or further
25:00 - away and vice-versa for this so this
25:02 - idea of a linear interpolation where the
25:05 - midpoint is actually variable according
25:08 - to the magnitude of the value on the
25:12 - corner and this is something that would
25:14 - I think if I'm correct about my
25:17 - understanding of this would make for
25:18 - much smoother patterns that feel like
25:22 - they're less blocky looking I might
25:24 - rather like this blocky looking and it
25:26 - kind of works for a certain aesthetic
25:27 - but that's the thing that would be worth
25:29 - exploring and if I'm able to do that
25:31 - after this video you'll be seeing right
25:33 - here next to me a version of that this
25:35 - exact
25:36 - sample of how it looks so thanks for
25:40 - joining me through this a little
25:41 - exploration of the marching squares
25:43 - algorithm I've got to find Gloria pickle
25:47 - where has she gone she never came back
25:48 - for her water maybe the plants actually
25:51 - really I know last time when I made a
25:52 - coating the bad video said I was gonna
25:54 - go water to the plants and then I didn't
25:55 - actually water the plants I mean I might
25:56 - have actually watered the plants if I
25:57 - didn't show you the watering the plants
25:58 - who knows what really matters here but I
26:00 - need to water the plants it's very hot
26:02 - and probably a little bit sweaty does it
26:04 - go cool off water the plants fine pickle
26:08 - make sure she's okay and has some water
26:09 - and some food she probably needs to go
26:11 - for a walk and I'll see you in a future
26:14 - coating the Cabana video
26:16 - [Music]