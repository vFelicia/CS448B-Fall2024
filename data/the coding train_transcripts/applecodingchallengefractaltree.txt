00:00 - Hello, YouTube.
00:00 - Welcome to Coding Together.
00:02 - In the previous episode, I
programmed the snake game
00:05 - in Applesoft BASIC on this
Apple II Plus computer
00:08 - by printing text to the screen.
00:10 - Today, I am so
excited because guess
00:12 - what we're going to do today?
00:14 - Computer graphics.
00:16 - (SINGING) Coding together.
00:19 - We'll always be best
friends forever.
00:22 - I'll be there whenever.
00:26 - If you feel down, then
I'll make it better.
00:29 - Know what to measure.
00:32 - The for loop we have,
the joy, the pleasure.
00:35 - So let's go to
enjoy the weather.
00:38 - These are the days
I'll always treasure.
00:52 - Oh, baby, we're coding together.
00:56 - We'll always be best
friends forever.
01:00 - Coding together.
01:03 - Coding together.
01:11 - I've got everything I need
here, my Apple II reference
01:13 - manual, my basic programming
reference manual for Applesoft
01:17 - BASIC, and my brand
new, just-released,
01:20 - published-in-1979
Applesoft tutorial.
01:24 - Just to jog your memory, to
print text to the screen,
01:27 - I use the Print command.
01:31 - If I want to draw to the
screen instead of using print,
01:35 - I can enter graphics mode
with the command, GR.
01:40 - Let's take a look
in the tutorial
01:42 - about how graphics mode works.
01:44 - The first thing it's
showing me how to do
01:46 - is how to set the TV color.
01:48 - Now, one of these
days, I'm going
01:50 - to get my hands on a color TV.
01:51 - But for now, I just have
this monochrome monitor.
01:54 - Good news for you, the
way that I'm actually
01:56 - capturing the output
of the Apple II
01:58 - through an analog
to HDMI converter
02:01 - and into a modern PC with
Open Broadcast Studio,
02:04 - even though I can't
see it, you'll
02:05 - actually see the full
color in the video
02:07 - that you're watching right now.
02:09 - One of the nice things
about graphics mode
02:10 - is that I've got a little
prompt here still at the bottom.
02:13 - I get about three
rows of text to work
02:15 - with while I've got the graphics
mode at the top of the screen.
02:18 - And I can set the
color to, let's try,--
02:22 - what, it's telling me it's
purple, a light purple,
02:24 - lavender.
02:26 - And then let's
plot a point, 0,0.
02:30 - Look at that.
02:31 - Is it purple?
02:32 - I don't know.
02:33 - I'm seeing just
green right here.
02:35 - But you're probably
seeing purple right
02:36 - in the top left just like
Processing or P5, 0,0,
02:40 - top left.
02:41 - Now, what's the
resolution of its display?
02:45 - That's the top right
corner, 39 comma 0.
02:48 - So we've got 40 pixels
across and 40 down.
02:56 - There, all four corners.
02:57 - I can also draw lines with
Hline for horizontal line
03:01 - and Vline for vertical line.
03:03 - If I want to draw a
horizontal line from 0 to 39,
03:09 - those are the horizontal
positions across
03:12 - at a vertical position
like 20, there we go.
03:17 - Horizontal line in the middle.
03:22 - Vertical line up and
down in the middle.
03:25 - Clear the screen.
03:26 - Go back to text mode.
03:28 - And here we are.
03:29 - What should we try to do?
03:31 - How about let's program
a bouncing ball.
03:34 - If you remember
if I want to write
03:36 - some code that I
can execute, I've
03:37 - got to give it line numbers.
03:39 - So let's start with line number
10, entering graphics mode.
03:43 - Line number 20, let's
create an x and a y
03:46 - for where the ball will be.
03:49 - Then in line 30, let's set
the color, a nice purple ball.
03:55 - Line 40, let's plot the ball.
03:57 - And in line 50, let's
go back to line 30.
04:03 - And there we go.
04:04 - The ball is not moving because
I need to add an x speed and a y
04:09 - speed.
04:09 - And what if I make those random?
04:15 - Some value between
0 and 3 for x speed.
04:22 - Some value between
0 and 3 for y speed.
04:25 - I could include having
negative numbers in the random,
04:28 - but this is just for
demonstration purposes.
04:30 - I'll leave that as a challenge
for you to try in an emulator.
04:32 - Now, right after I
plot the xy position,
04:36 - let's have x increment by
x speed and y by y speed.
04:43 - Let's try running this.
04:45 - Oh, syntax error in line 25.
04:48 - So this is something that
I've been noticing a lot when
04:50 - programming in Applesoft BASIC.
04:52 - There are a lot
of reserved words.
04:54 - And if I ever use
those reserved words
04:57 - even as part of a variable
name, I can run into issues.
05:00 - So let's try xs
just for x speed.
05:03 - I could also use dx or delta
x or vx for velocity x.
05:08 - I like vx actually.
05:16 - Those should be the
changes I need to make.
05:20 - Look at that.
05:21 - It started moving.
05:24 - And it's random and
different each time.
05:27 - But I'm getting an
illegal quantity error.
05:29 - Why is that?
05:30 - Because I've left the boundaries
of where I'm allowed to draw.
05:33 - So I can add an if statement.
05:34 - Let's overwrite line 50 and say,
if x is greater than 39, then
05:41 - vx equals vx times negative 1.
05:45 - So that should reverse the
direction of the x velocity.
05:49 - Can I actually say an or?
05:50 - I think I could put an
or in here because I also
05:53 - want to do this.
05:54 - If it is or if x is
less than 0, then vx
06:00 - equals vx times negative 1.
06:04 - And then 60, well, let's
make it 70 because I
06:07 - know I'm going to do a y.
06:09 - We're also going
to say go to 30.
06:15 - So we still got an
illegal quantity.
06:17 - Is that because I
haven't done the y yet?
06:22 - I like how it looks
like it's like trying
06:23 - to draw something
past where it can,
06:26 - and it put these pound signs.
06:28 - Let's try adding the y.
06:32 - You know what the issue is?
06:34 - If x is greater than
39, that means it's 40.
06:37 - And what was the
last thing I did?
06:39 - Plot xy.
06:40 - So I actually
allowed myself to try
06:42 - to plot it at the column
40, which doesn't exist.
06:45 - There's different ways
I could handle this,
06:47 - maybe greater than or equal.
06:48 - But just for simplicity's
sake right now,
06:51 - let's make the boundary
38 and less than 1.
06:58 - Then let's do the y.
07:08 - What have I done here?
07:09 - I messed up my line number.
07:11 - So line 50 is still in there.
07:13 - Now, I've got changing x and
y, checking x, checking y.
07:18 - And now, I need
to say on line 80.
07:20 - And I actually don't need
to set the color again.
07:22 - So I can go to line 40.
07:26 - Whoa, look at that.
07:28 - There's my bouncing
ball or giant spider.
07:32 - And eventually it's
covered the whole terrain
07:34 - of where it's going to go, and
it's just overwriting itself.
07:36 - Now, of course, you're
probably noticing
07:38 - that it's drawing a trail.
07:39 - I'm not erasing the
background as I might
07:42 - in, say, Processing or P5.
07:44 - This is actually a big
topic of discussion.
07:47 - We take for granted
that Processing
07:49 - and in JavaScript, there's
request animation frame,
07:52 - that handle, what's known as
double-buffered animation.
07:55 - There's always an
off-screen memory buffer
07:58 - of what's being
drawn to the screen
08:00 - that it can swap out so that we
don't see these interim steps
08:03 - of clear, draw, clear, draw.
08:06 - If you've ever seen a computer
graphics program flickering,
08:08 - it's because the
double-buffered animation is not
08:11 - implemented properly.
08:12 - This is something
that I actually
08:13 - think I might like to do another
video all about, how to do
08:17 - double-buffered animation.
08:18 - Maybe I can create a simple
3D renderer in BASIC.
08:21 - Ooh, that would be fun.
08:22 - But for now, let's
just look at how
08:25 - to erase the previous ball
position so that we just
08:30 - see one moving along.
08:31 - So how about if right
before I change the x and y,
08:36 - I save the previous
x and y position.
08:38 - Let's say previous x equals
x, previous y equals y.
08:44 - Then in line 30, let's
set the color to black
08:50 - and plot the previous
x and previous y.
08:54 - That way, after I've
changed x and y,
08:58 - I can set the color back to--
09:00 - and let's just have
it be white for right
09:01 - now because I actually have
no idea what it's looking
09:04 - like on what you're watching.
09:05 - Just to make sure I have
something that's working,
09:07 - let's set the color to 15.
09:09 - And then in line 55,
let's plot x comma y.
09:13 - Let's see what happens.
09:16 - So this is working.
09:17 - But it's not erasing
the previous position.
09:20 - And I got an illegal
quantity error in 55.
09:23 - 55 is plot xy.
09:26 - Let's debug this by
printing out the values of x
09:29 - and y in line 52, followed
by space and then y.
09:37 - This is now working nicely.
09:40 - It looks like my random values
were kind of wonky there.
09:43 - Yeah, there we go.
09:44 - So I got a negative number.
09:46 - So clearly, something
went wrong there
09:48 - having to do probably
with the way I'm
09:50 - using floating-point values.
09:52 - I could just, anytime
it reaches the edge,
09:55 - if it got a little bit
passed, I could slide it back
09:58 - into the last column, last
row, first column, first row.
10:01 - Let's do that.
10:02 - So in line 60, I need to
instead of just reversing the x,
10:06 - I need to reverse x and
set x back to a position.
10:10 - I need to do two things, which
means I need a subroutine.
10:17 - And same for line 70.
10:25 - The first subroutine,
reverse vx.
10:31 - If x is less than one, I can
actually just set x back to 0.
10:37 - Oh, I'm realizing
this is actually
10:40 - also going to solve
the problem of me
10:42 - using 38 and 1 as the boundary.
10:44 - But let's not worry
about that right now.
10:46 - If x is less than
1, then x equals 0.
10:49 - If x is greater than
39, then x equals 39.
10:54 - Return.
11:01 - What's wrong with me?
11:02 - I'm being so inconsistent
about my edges.
11:04 - Let's just see if this works.
11:06 - Whoops.
11:06 - Oh, I think I forgot return.
11:13 - There we go.
11:13 - No errors no matter what I do.
11:15 - Still not erasing the
previous position properly.
11:19 - Let me fix all of the boundaries
to be what they properly
11:21 - should be.
11:35 - 48?
11:36 - How did it get to be 48?
11:38 - I really should be
plotting the x and y
11:41 - after I do this
because these are
11:43 - where my constraints are now.
11:45 - So we can get rid of this print.
11:47 - I feel pretty confident now.
11:48 - We can get rid of
line 50, line 55.
11:51 - And at 75, we can say Plot.
11:53 - We can say Color
15, Plot x comma y.
12:01 - By the way, I can list a single
line of code by saying List 75.
12:05 - And I forgot the equals.
12:17 - Illegal quantity error in 75?
12:19 - Oh, my goodness.
12:21 - I'd go sub 1000 also in line 70.
12:32 - There we go.
12:33 - Now, I have my
perfect bouncing ball.
12:35 - I'm just not erasing
the previous position.
12:39 - How am I going to do that?
12:41 - Oh, no.
12:43 - I see the problem.
12:46 - My logic is 100% correct.
12:49 - Go to 40 is where I plot px, py.
12:53 - 30 is where I set
the color to black.
12:59 - There we go, everybody.
13:02 - You know what we
should have it do?
13:03 - We should have it beep
when it hits the edge.
13:07 - How do I make a sound?
13:09 - Sound equals Peek.
13:11 - Oh, I can use a Peek.
13:14 - Let's look at our Peeks.
13:16 - Click speaker is 49200.
13:23 - So that gives me a
syntax error probably
13:26 - because, like it's
telling me here,
13:28 - I need to set it to a variable.
13:35 - Did you hear anything?
13:36 - I didn't.
13:47 - Did you hear that buzz?
13:49 - I love that.
13:50 - OK, let's write
another subroutine.
14:05 - And then I want to call this
buzz subroutine in both the x
14:10 - and y boundary subroutines.
14:18 - There we go.
14:24 - That's the most
satisfying sound ever.
14:29 - This is way too much fun.
14:31 - There's so much I could do here.
14:33 - We could try creating
Pong, Brick Out.
14:36 - We could make a fancier version
of the snake game with color.
14:39 - I'm not going to stop here
because while I have shown you
14:43 - GR, graphics mode, I
have something even more
14:47 - exciting and futuristic to show
you, high-resolution graphics.
14:54 - What if I now say plot.
14:56 - Well, let's set the
color again to 15.
14:59 - What if I say plot 10 comma 10.
15:03 - I don't see anything.
15:04 - Hplot 10 comma 10?
15:06 - Oh, look at that.
15:07 - A little tiny dot up there
in high-resolution graphics.
15:11 - Amazing.
15:12 - We're going to need a
whiteboard for this.
15:23 - High-resolution graphics.
15:26 - For high-resolution
graphics, instead
15:28 - of having a 40 by 40
low-resolution grid,
15:32 - I now have a canvas
to draw in that
15:35 - is 280 pixels wide
by 160 pixels high.
15:43 - And I believe that
HGR2 will actually
15:48 - allow me to draw 20
more pixels below.
15:51 - But I like having my ability
to have a command prompt here.
15:55 - And as we've seen,
instead of plot,
16:00 - I now have high-resolution
Plot, or Hplot.
16:04 - It says here, now, color-wise,
high-resolution graphics
16:07 - are truly wonderful,
but you do have
16:10 - to make some sacrifice
in order to use them.
16:12 - There are fewer
colors available.
16:14 - The high-resolution colors go
from 0, black, to 7, white.
16:18 - Let's set the color to
white just to start.
16:24 - Now, let's see if we can
draw a line from the top left
16:29 - to the bottom right.
16:35 - With 280 by 160, the edge
pixels are index 279, 159.
16:43 - Oh, look at that beautiful line.
16:44 - This makes me want
to do a for loop
16:46 - and draw some twirling
lines really badly.
16:50 - I'm going to wipe our bouncing
ball program by saying New.
16:55 - So let's make a loop,
where x goes from 0 to 279.
17:02 - Let's draw from x comma 0
to 297 minus x comma 159.
17:14 - Is it going to let me do that?
17:16 - 40 Next x.
17:22 - Let's have the step be
a little bit higher.
17:25 - I just don't know
where I put that.
17:27 - Let me look here.
17:29 - I just put it on
with the for loop.
17:31 - So I can say in line 20, for
x equals 0 to 279 step 5.
17:42 - Awesome.
17:43 - I probably should stop here.
17:45 - But I want to try something
pretty high degree
17:47 - of difficulty.
17:48 - Can I make my coding
challenge, a fractal tree,
17:53 - right here in Applesoft BASIC
on this Apple II Plus computer?
17:58 - Now, I don't have
access to Push.
18:01 - I don't have access to Pop.
18:03 - I don't have Rotate.
18:04 - But I think I can
do it with Line
18:08 - and some basic trigonometry.
18:11 - What if I were to start to draw
a line from the bottom middle
18:16 - here up until about the center?
18:19 - Then let's say what I want
to do is draw the next line
18:25 - half as long but rotated
by, let's say, 45 degrees.
18:32 - What does that mean?
18:34 - Let's not worry about
shrinking the line.
18:36 - We know this is about 80 pixels.
18:40 - So what is the offset
of x and the offset of y
18:47 - to find this next point?
18:49 - This is certainly something
I've covered extensively
18:52 - in videos about polar
coordinates and trigonometry.
18:56 - I'll make sure to include
a bunch of resources
18:58 - and references to those
videos along with this one.
19:00 - But the quick
answer here is if I
19:04 - know this angle using the Greek
letter theta to notate it,
19:09 - sine of that angle
is the opposite side
19:17 - y divided by the length of this
line, which I just said was 80.
19:23 - Cosine of this angle is the
adjacent side x divided by 80.
19:33 - And so I can actually
get these offsets
19:37 - to find this point
by saying x equals
19:42 - 80 times cosine of
that angle y equals
19:47 - 80 times sine of that angle.
19:50 - This is going to be the length
of a given branch of the tree.
19:54 - And then I need to find
the next branch of the tree
19:56 - by drawing a line
from its endpoint
19:58 - to a new point
offset by an angle.
20:02 - Let's see if I can make that
work in a BASIC program.
20:05 - Let's start over again.
20:07 - Enter HGR.
20:09 - Set the color to 3.
20:12 - Just have everything be white.
20:14 - I need a length.
20:16 - What's the length of
this first branch?
20:18 - What did I say, 80?
20:20 - Then I need to draw a line.
20:23 - If I'm going to ultimately
start drawing this tree pattern,
20:26 - I need to start with this
point, move it to this point,
20:29 - and then move it to this point.
20:30 - So I need a variable for that.
20:33 - Let's call that
x, which would be
20:36 - at the bottom, 159, and y, which
would be at the middle, 140.
20:43 - Sorry to interrupt.
20:44 - I don't know what
I was thinking.
20:45 - But I wrote x is
159 and y is 140.
20:50 - The middle horizontal is 140.
20:52 - That's what x should be.
20:53 - The bottom y should be 159.
20:55 - It's going to be wrong through
the rest of this video.
20:57 - It'll be slightly askew,
but you get the idea.
20:59 - I'll make sure to correct it
in whatever code I release.
21:02 - 50 plot from xy to xy minus l.
21:12 - There's my line.
21:13 - Is that really the middle?
21:15 - No, that's not the middle.
21:16 - You swap your x's
and y's, Shiffman.
21:19 - Approximately, let's
make the arc length less.
21:23 - Start at 50.
21:25 - Now, what am I doing here?
dx equals the length times
21:31 - cosine of an angle.
21:33 - And let's say that angle
is about 45 degrees, which
21:36 - is 90 degrees is about 1.5
radians, 1.6, divide that
21:41 - by half.
21:42 - Let's just call it
0.7 for approximation.
21:45 - And in fact, let's make that
a variable, a for angle,
21:49 - and dy is the length
times sine of that angle.
21:54 - Let's set up the
angle in line 25.
21:57 - Angle is 0.7.
21:59 - Once we've drawn that
first line, let's move y.
22:04 - And then the next line
will be Hplot x comma
22:09 - y to x plus dx comma y plus dy.
22:14 - Let's take a look
at this whole thing.
22:17 - So in theory, I'm drawing a line
from the bottom to the middle
22:22 - and then calculating it
offset based on some angle
22:25 - and drawing a new line
to that new point.
22:29 - OK, so what did
I get wrong here?
22:33 - The angle is actually
this angle right here.
22:37 - And I want it to be
this angle up here.
22:40 - So I think I can just
invert what I'm doing with y
22:44 - and say Hplot xy to x
plus dx, y minus dy.
22:54 - Much better.
22:55 - This looks like the
beginnings of my tree.
22:57 - So now, I have the math
that I need for branching.
23:01 - But I need some kind of loop.
23:03 - Because ultimately, I want
to attach another branch
23:06 - to this branch.
23:07 - And I also want to have another
one going the other way,
23:10 - if you've looked at my
fractal recursion videos.
23:12 - I start with this line,
attach two lines to that line,
23:18 - and to those, attach
two more, and to those,
23:21 - attach two more, and
so on and so forth.
23:24 - This is a process
known as recursion.
23:27 - And again, I have several
videos where I cover
23:30 - this much more extensively.
23:31 - The question is can I
do recursion in BASIC
23:36 - on this Apple II computer?
23:37 - I think so.
23:39 - First thing first.
23:40 - I need a subroutine to
draw each line of the tree.
23:45 - And I'm going to
put that at 1,000.
23:47 - So actually, at 1,000, I'm
going to calculate dx and dy.
23:57 - Then let's actually put into a
variable the next xy position.
24:03 - I'll put it in one
line, minus dy.
24:07 - And then let's draw.
24:12 - Well, I'm just going to
put line 1900 Return.
24:16 - I don't want 50, 55, 60,
or 70, or 80 anymore.
24:25 - So in line 50, I say GoSub 1000.
24:28 - And then in line 60,
I'm going to say End.
24:30 - When it comes back,
it'll be done.
24:33 - OK, so I got that one line.
24:35 - Oh, because the angle,
right, that first line,
24:37 - is now a branch to the right.
24:39 - So let's actually have
the angle start at zero.
24:44 - And let's have a variable
for the delta angle.
24:48 - I'll call that da.
24:52 - We'll see where that comes in.
24:53 - But now, OK, so it's
doing it horizontally.
24:57 - This is where
everything is flipped
24:59 - because my y-axis is
really my x-axis, which
25:03 - is kind of awkward.
25:04 - But I think there's going to
be a quick easy way for me
25:07 - to resolve this by ultimately
just swapping the sine
25:11 - and cosine or the x and the y.
25:14 - I don't know what's going to
be the least confusing thing
25:16 - for me to do.
25:17 - You know what?
25:18 - I could also start the
angle at 90 degrees.
25:24 - So that's approximately pi
times 0.5 with my delta angle.
25:29 - And you know what?
25:29 - This should be on a
separate line of code
25:31 - because I'm going to want to
change that delta angle pretty
25:33 - often.
25:33 - So let's make that line 27.
25:40 - There we go.
25:41 - I've got the first
branch of the tree.
25:43 - All right, what do I do next?
25:45 - As soon as I draw that
line, the next thing I do
25:49 - is move xy to its next position,
alter the angle, and then what?
26:01 - GoSub 1000.
26:03 - Do it again.
26:04 - So inside of this subroutine
that starts at line 1000,
26:09 - I'm going to restart
the subroutine.
26:11 - Only, I need an exit condition.
26:13 - If I just said GoSub 1,000,
it's going to do it forever.
26:16 - So what else can I do here?
26:18 - In addition to changing the
angle, let's shrink the length.
26:22 - So let's add another variable.
26:24 - Let's call it shrink.
26:27 - So every new line will be
about 2/3 of the length.
26:30 - And so in line 1060,
length equals length times
26:35 - shrink and then GoSub 1000.
26:39 - Oh, no, no.
26:40 - If l is greater than 10,
then GoSub 1000 as long
26:45 - as there's more than 10 pixels.
26:47 - So calculate the offset.
26:49 - Get the new position.
26:50 - Draw the line.
26:51 - Move to the next spot.
26:52 - Change the angle.
26:53 - Change the length
And do it again.
26:58 - That's one side of the tree.
26:59 - Look at that.
27:01 - So now, I just need to
also go to the other side.
27:04 - Right after I GoSub 1000,
what do I need to do?
27:10 - I need to rotate back
the other direction.
27:14 - So that would be 1080.
27:17 - a equals-- I just
changed it by da.
27:21 - a minus da times 2.
27:26 - 1090, if l is greater
than 10, then GoSub 1000.
27:36 - Well, unfortunately,
I've got a problem.
27:39 - In addition to
reversing the angle,
27:42 - I've also got to go back
to the previous position.
27:46 - I don't think this
is going to work.
27:48 - I think I'm going
to need an array
27:49 - to keep track of all
the previous positions.
27:51 - But in theory, I could
say x equals x minus dx,
27:56 - y equals y minus dy is
what I want to undo.
28:00 - After I've drawn
the second line,
28:03 - I need to come back
to the original angle
28:05 - and unshrink the length,
add da back, and say l
28:12 - equals l divided by Shrink.
28:19 - Oh, kind of getting there.
28:20 - But look, all my
positions are wrong.
28:23 - So this is the main problem.
28:25 - This just subtracting
back is not
28:27 - getting me to the right place.
28:28 - I need an array to
keep track of what's
28:31 - known as a stack of all
the previous positions.
28:34 - And in fact, something
that I can use
28:37 - is this idea of a level.
28:39 - This maybe would be
level 0 of the tree.
28:44 - This is level 1 of the
tree, 2, 3, et cetera.
28:52 - So each generation--
I could also
28:53 - call that generation--
is something
28:55 - that I want to keep
track of separately.
28:58 - So at the beginning
of the program,
29:00 - right before I go to GoSub
1000, let's add line 45.
29:06 - Level equals 0.
29:09 - And I also want to then have
a maximum number of levels.
29:13 - Well, let's just try 2 to start.
29:17 - Call it MaxLev equals 2.
29:20 - Then instead of my exit
condition being the length,
29:24 - let's keep track of what
level of the tree I'm on.
29:27 - So 1070 would be, if Level
is less than max level,
29:32 - then GoSub 1000.
29:35 - And 1090 would also be, if
Level is less than max level,
29:39 - then GoSub 1000.
29:42 - Then every time I
get a new position,
29:45 - I go to the next level.
29:51 - And after I've drawn
those branches,
29:55 - I go back a previous level.
30:01 - Let's list from 1,000 to 2000,
so this is just the subroutine.
30:05 - What's happening
in the subroutine?
30:07 - I find the offset.
30:08 - I get the new position.
30:09 - I draw the line.
30:11 - I go to the next position.
30:12 - I increase the level.
30:13 - I rotate.
30:14 - If I'm not at the end, go
back and do the next one.
30:17 - Then undo.
30:18 - Go the other way.
30:18 - Go back and do the next one.
30:20 - Then come all the way back
again to the previous level
30:22 - if you have to keep going.
30:27 - Illegal quantity error in 1030.
30:29 - Again, I'm off into outer space.
30:32 - I'm not keeping track of
the positions properly.
30:35 - I'm going to need an array.
30:38 - Let's put that somewhat
awkwardly at line 48.
30:43 - Remember, for an array,
I use Dim for dimension.
30:45 - Call the x's max level.
30:53 - Right before I
increase the level,
30:56 - let's save the current x
position and the current y
31:01 - position.
31:02 - I could use a two-dimensional
array here, just
31:04 - have the maximum
number of levels
31:05 - and then two for the
second dimension instead
31:07 - of two arrays.
31:08 - But anyway, this is a little
easier for me to think through.
31:11 - And then once I've
gone back to the level,
31:15 - I should be able to just update
and get that position back.
31:23 - I'm sure I'm missing
something here.
31:27 - OK, I didn't pop back.
31:29 - So you could see this as
the correct second branch
31:31 - for two levels, but it didn't
pop back here properly.
31:34 - Why is that?
31:35 - Weirdly, it looks like the x
came back, but the y did not.
31:38 - So that just might be a typo.
31:41 - Oh, I don't need
to do this anymore.
31:42 - I don't need to try to
move back with 1085.
31:45 - That's what my array will do.
31:48 - Ooh, that's right, closer.
31:52 - But I need to come
back to there.
31:54 - Where did I-- did I store
it in the wrong place?
31:56 - Maybe I'm supposed to save x
and y before I get nx and ny.
32:02 - If I move line 1040
to 1043, look at that.
32:13 - Oh, my goodness.
32:14 - I'm sure if I change
the max levels to three,
32:18 - there's some
unanticipated issue here.
32:20 - But this is really close.
32:23 - Max level equals 3.
32:28 - Oh, my goodness.
32:29 - It's a fractal tree
on the Apple II.
32:32 - Oh, this is amazing.
32:33 - OK, let's just go.
32:34 - Let's just go for it.
32:36 - Max level equals, let's try, 7.
32:39 - That might be too ambitious.
32:42 - Look how slow it's drawing
all the little bits by bit.
32:49 - Well, now, you see
what's possible
32:51 - with high-resolution
graphics, recursion, drawing
32:55 - lines, algorithmic shapes.
32:57 - Can you make your own tree?
32:58 - Can you alter the angles?
33:00 - Oh, you know what would be fun?
33:01 - Let's just do one thing.
33:02 - I want to show you how I could
get input from me, the user.
33:06 - Maybe I can enter in
an angle and a max
33:10 - number of branches or
something like that or a color.
33:13 - Let's just do the angle.
33:14 - I'm just going to
enter the angle.
33:16 - Let's list just the
beginning of the program.
33:18 - So before I even get
into graphics mode,
33:20 - I really wish there is--
there used to be a command
33:22 - to renumber all the numbers.
33:23 - And it used to be Renumber.
33:25 - Or Renum.
33:26 - Sorry, again from
the future again.
33:28 - It looks like that
Renumber command
33:30 - that I remember so fondly, just
not available when the Apple II
33:33 - Plus boots up without
any disk put into it.
33:35 - But I'm pretty sure it was
part of DOS 3.3, ProDOS.
33:38 - If you remember, if you know,
let me know in the comments,
33:41 - and I'll link to some
resources about how
33:43 - you renumber a BASIC program.
33:45 - So I've got to use
between 0 and 10.
33:47 - I can say, let's call it line 2.
33:50 - I can use the input, and I
can get in a variable, da.
33:56 - Let's get rid of line 27.
34:01 - And let's say on line
5, say Input da, 0.5.
34:09 - Is that a different angle?
34:10 - I think it is.
34:13 - 0.1.
34:15 - Make it much more extreme.
34:17 - Yeah, there we go.
34:18 - Yeah, so I'm going off
the screen with that.
34:19 - I don't have any error checking.
34:21 - Let's do 1.5.
34:24 - Woah, that is wild.
34:26 - I should probably print a query
and say Home and all that.
34:29 - So let's make this a little
bit nicer before I go.
34:35 - Enter an angle in radians.
34:37 - 1 equals Home.
34:38 - All right, let's
run this program.
34:40 - I will draw you a tree.
34:41 - Enter an angle in radians.
34:43 - I kind of like that 1.5.
34:45 - Let's try 2 or 1.8.
34:49 - This is way too much fun,
but I've got to stop here.
34:52 - I hope that you
take what I've done.
34:54 - Find one of the emulators.
34:55 - I'll link to them in
this video's description.
34:57 - Try running this code.
34:59 - Make it your own.
35:00 - How can you alter the tree?
35:02 - Can you try color?
35:03 - One advantage you'll have is
will probably run quite a bit
35:05 - faster than here.
35:06 - What should be the topic of
the next Coding Together video?
35:09 - Should it be double-buffered
animation and a 3D renderer
35:12 - on this Apple II Plus?
35:13 - Do you need me to get
back to Processing and P5?
35:15 - Because I could do that also.
35:17 - Let me know in the comments
on Twitter @Shiffman,
35:19 - @thecodingtrain, any of these
places where you can find me.
35:22 - I can't wait to be with
you again coding together.