00:00 - hello how are you doing welcome to a
00:03 - coding challenge where I'm going to make
00:04 - something called inverse kinematics you
00:06 - might say hey look at that did you do it
00:08 - already
00:08 - and I'll say though I have not this is
00:10 - actually from the previous video where I
00:13 - did a simulation called forward
00:15 - kinematics so one of the main things I
00:17 - need to do before I get started coding
00:19 - is talking about well what's the
00:20 - difference between forward and inverse
00:22 - and why I let you use you one over the
00:24 - other
00:24 - one thing I will mention if you watch
00:26 - the previous videos I did change one
00:27 - slight thing about the code which you
00:29 - might be interested in I added something
00:30 - to make the segments have a different
00:32 - stroke weight based on where they are
00:34 - the higher stroke weight towards the
00:37 - bottom and a smaller stroke weight
00:39 - towards the top so that's kind of an
00:40 - interesting little variation that you
00:41 - could look at ok now let's talk about
00:43 - let me come over here and let me see let
00:46 - me erase some of this oh I'm going to
00:48 - leave this up here ok so this was a
00:52 - diagram I had based on forward
00:54 - kinematics here over here where the idea
00:57 - is I have a bunch of segments they're
01:01 - all connected to each other maybe these
01:03 - are segments of a kind of alien tentacle
01:06 - or they're a leg that's walking or
01:08 - whatever they might be robot arm we're
01:11 - getting to that the idea what forward
01:14 - kinematics is if I turn this one then
01:18 - all of these should rotate with it so
01:21 - the angle that changes here gets passed
01:23 - along to all of the segments that are
01:26 - connected so this one turns and they all
01:28 - and then this one turns doesn't get
01:30 - packed - the one behind it it gets
01:31 - passed the B's and so that example is a
01:33 - tentacle they're all kind of moving a
01:35 - little bit randomly with some Perlin
01:36 - noise or I also use like a sine wave or
01:39 - whatever whatever Al's I'm using to move
01:41 - them the point is as you move one it
01:43 - affects the other ones inverse
01:44 - kinematics does well as the name is
01:48 - stated B inverse in other words what if
01:52 - you imagine this arm this I'm calling an
01:54 - arm for reason against if this connected
01:57 - set of segments needed to reach and grab
02:00 - something and this is a problem that
02:02 - happens in robotics you create a robot
02:04 - arm that's a bunch of things connect to
02:06 - each other with some kind of like
02:07 - hydraulic rotational mechanism thing
02:10 - that I don't nothing
02:10 - the house and you need to figure out I
02:12 - want the arm to pick up this thing so if
02:15 - my hand by hand is the robot arm to get
02:18 - that I know my hand needs to be there
02:21 - what should the rest of me do how do i
02:23 - if I know that this needs to go here how
02:28 - do I figure out how all of these should
02:30 - be oriented in order for to do that and
02:32 - you might plainly see that this is you
02:34 - know the best orientation for reaching
02:36 - something far away in that direction but
02:38 - what if suddenly needs to grab something
02:40 - here well we can plainly see maybe a
02:41 - good way for to do that would be this
02:44 - but how do we calculate that we know the
02:46 - end point how do you pass the angles
02:48 - back inversely through the segment's
02:51 - impersonally is that even a word that's
02:53 - what I'm going to do hope I hope I felt
02:56 - this before I think but it's been years
02:57 - I think I have no idea
03:00 - okay so we'll coming back over here I am
03:04 - now looking at my forward kinematics
03:06 - example and I'm not going to I'm going
03:08 - to start the code over from scratch and
03:09 - I'm going to say setup I'm using
03:11 - processing which is a development
03:14 - environment and a Java library for doing
03:18 - creative coding graphics and animation
03:20 - more more yada yada yada
03:23 - okay so what I want to do and I'm gonna
03:25 - say sighs 600 400 and there we go we've
03:29 - got the window and then si background 51
03:33 - so I want the same sort of idea that I
03:37 - had in the previous example where I have
03:38 - this idea of a segment object so let's
03:41 - take let's let's make this object called
03:44 - segment and I want to make a new I want
03:49 - to make a new segment and I'm going to
03:52 - give it a location I get the segment
03:54 - class doesn't exist I'm doing this
03:56 - reverb sort of thinking like okay I want
03:57 - to give it an X Y and a length and maybe
04:01 - an angle so this is similarly to what I
04:04 - did before we're gonna have to deal with
04:05 - some kind of like Parent Child stuff
04:07 - let's just start there now I'm going to
04:09 - say I'm going to make a new tab called
04:11 - segment to create a segment class and
04:15 - I'm also going to want my segment class
04:18 - to have what I think I wanted to have a
04:21 - and B
04:24 - let me describe what I'm doing here so
04:27 - if this is one segment I want to have a
04:30 - meeting the point over here be meaning
04:33 - the point at the end length being how
04:36 - long the segment is and angle being
04:38 - what's its angle of rotation relative to
04:40 - the x-axis so those are the properties
04:42 - of this object a I'm going to say what
04:49 - am I doing here I'm Matt hi hi how did I
04:52 - keep what I was doing
04:53 - angle and length and I'm going to create
04:58 - a constructor function which gets an x
05:01 - and y usually X well keep it the way and
05:06 - an initial angle which ultimately is an
05:09 - initial on an initial angle and an
05:13 - initial links now you'll notice length
05:16 - just got highlighted as like length blue
05:18 - because linked as a keyword as a
05:20 - property the length of an array the
05:22 - changes to le n for length is I don't
05:23 - want to it would be fine but I don't
05:25 - want to make it unnecessarily confusing
05:27 - so I'm going to say a is a new P vector
05:30 - it's at X comma Y its angle is that
05:33 - angle and it's length is that length
05:40 - that I specified so now is that what I
05:43 - said so now if I run this I got no
05:45 - errors but nothing's happening the next
05:46 - thing I want to do is I want to say
05:48 - segment dot show and this is just about
05:51 - exactly what I did before and I'm just
05:53 - doing it again to kind of get started
05:54 - I'm going to write a function called
05:56 - shell and I'm going to make a line
05:59 - between ax and a dot y + BX and B dot y
06:03 - NS a stroke
06:05 - 225 stroke weight for and now if I run
06:11 - this I'm gonna get the same issue I got
06:12 - before where I haven't done I figure out
06:15 - where B is so I read a function called
06:17 - calculus a lot of this really is the
06:19 - same calculate B and this is I'm going
06:21 - to use my polar to Cartesian coordinate
06:23 - transformation again I have a feeling
06:24 - though I'm after me I'm going to start
06:27 - eating to calculate a based on B because
06:29 - I'm going to move the arm to the point
06:32 - that it's trying to grab so anyways
06:33 - Bullough see we'll see
06:35 - I'm going to what am I doing here I'm
06:38 - going to calculate B which is saying the
06:43 - X offset from a is equal to the length
06:47 - times cosine of the angle and the Y
06:50 - offset is equal to the length times sine
06:52 - of the angle and then B is a new P
06:58 - vector at X plus DX y plus py one thing
07:02 - I'll mention here is oh sorry a dot X
07:07 - and a dot Y let me now mention here that
07:11 - I don't love is that every time I
07:13 - calculate B I make a new peeve Ector
07:15 - object any Java on my desktop computer
07:18 - which you know gigs of RAM is never
07:21 - going to be a problem there's a little
07:23 - bit of issue it might make more of a set
07:24 - more sense maybe I'll just do it right
07:26 - now for the sake of argument for me to
07:28 - make a an empty P vector and then what I
07:32 - would do is I would say B dot set so
07:36 - that would be I'm not making a new
07:38 - object but I'm just setting its values
07:40 - to these two values I think this will
07:41 - work exactly the same way it's a bit
07:43 - more memory efficient so to speak and
07:45 - doesn't really matter okay so now what I
07:47 - want to do is I'm on an update function
07:51 - we're all going to do is just calculate
07:54 - B which is quite redundant right now but
07:56 - it's like calculate not calculate and
08:01 - then sag not update so okay this doesn't
08:07 - look right what did I miss
08:09 - hmm length o I put these in the wrong
08:15 - order so this is like this is angle so
08:18 - this is length and this is angle has the
08:21 - length that's 0 and maybe I'll just for
08:24 - consistency change the order there and
08:26 - there we go so now I really haven't
08:28 - gotten very far but I've built my
08:30 - segment now here's the thing that's
08:32 - different though what I'm going to do
08:35 - now this is why I didn't want to this is
08:37 - why this is quite different now what I'm
08:39 - going to do is let me zoom in on this
08:41 - segment here the first thing that I'm
08:43 - going to do is I just want this segment
08:45 - to follow the mouse so wherever I move
08:47 - the mouse I wanted to
08:48 - turn to move towards the mountain so
08:50 - actually what I want to do is I wanted
08:53 - to I want it to be two points at the
08:56 - mouth so I went to grab mouse is what it
08:58 - is I wanted to grab the mouse what's the
09:00 - point at the mouse so how do I do that
09:04 - so this is yet another example of
09:07 - needing this polar to Cartesian
09:08 - trigonometry stuff so I'll have it move
09:13 - according to the mouse which is a good
09:15 - way to start so if I have this segment
09:17 - and then the mouse is down over here
09:21 - what I need to do what I want to do is
09:23 - turn it so that it points this way and
09:26 - then move it all the way so that it's
09:29 - here so so that's so that'll gives the
09:34 - sort of motion that we're expecting I
09:36 - think so I want it to point at and then
09:39 - you know they're going to be different
09:40 - one thing it could be fixed and it
09:41 - always just points this in the sort of
09:43 - tentacle case I wanted to turn but so
09:45 - what I need to do is figure out this
09:46 - angle on languages guess what we've now
09:48 - got to do the know where that is inverse
09:50 - kinematics we also have to do the
09:52 - inverse we're not converting from polar
09:54 - to Cartesian we now have to convert from
09:56 - Cartesian to polar because what I need
10:00 - is I need this angle based on knowing
10:05 - the and I think I want to use this
10:08 - endpoint so actually I think the angle I
10:10 - want is this right or is it from a know
10:14 - what's that somebody else Billy in the
10:16 - chat will tell me because I could
10:17 - calculate an angle of it pointing from B
10:19 - or from a I think I want it from a I
10:21 - think I wanted to turn and go there so I
10:24 - want to start so what I want to do is
10:26 - calculate this angle and what is that
10:28 - angle it's this dy and this DX so it's
10:35 - Mouse X minus this object ax and mouse Y
10:41 - so that's those but if I have those how
10:43 - do I get the angle now here's the thing
10:45 - I should do another video about this
10:47 - because I can use something called arc
10:49 - tangent
10:50 - inverse tangent the trigonometry
10:52 - function to get the angle from the x and
10:54 - y value and there's even a special way
10:56 - to do that with code functions or
10:58 - something called atan2
10:59 - so to remind me to a separate video
11:01 - about that but I'm going to do this just
11:02 - with vectors because of the P vector P
11:05 - vector object does this by the scenes if
11:07 - I can create a vector that points from
11:08 - here to here then I can call a function
11:12 - in the P processing vector object called
11:15 - heading and that heading function gives
11:18 - me this angle if we look at the source
11:20 - code it's got a tan two in it so it's
11:23 - doing this but I might have a function
11:24 - that does this math for me already let's
11:26 - just use that okay so now I come back
11:28 - over here hello hello inverse kinematic
11:31 - thing and now what I'm going to do is
11:34 - I'm going to write a function that
11:37 - called segment dot follow Mouse X Mouse
11:44 - why okay so I want this segment to
11:47 - follow the mouse so I'm going to go here
11:52 - into segments a void follow and I get a
11:56 - target X and let me just call it TX and
12:01 - ty4 like target X target y probably
12:04 - should use the full word target I'm
12:05 - trying to keep my code within the space
12:07 - that you can see and so now what I need
12:10 - is I need a vector the direction which
12:14 - points from so here's the thing I could
12:19 - do this a number of different ways I'm
12:20 - going to say target equals a new P
12:24 - vector that's at that T X and T y and
12:27 - then I say P vector dot subtract the
12:29 - target minus a so this is what I want I
12:34 - want a vector that points from a to the
12:36 - target that's the direction that I
12:38 - wanted to point and then now what do I
12:39 - do
12:40 - I say angle equals DRG heading so that's
12:47 - all there is to it so now if I if I run
12:51 - this we can see it's always pointing
12:54 - towards the mouse so that's just making
12:57 - a vector getting the angle and using
12:59 - that angle of this that here's the thing
13:01 - what happens now though if not only do I
13:03 - point towards
13:04 - but I actually move B to the mouse
13:08 - location so now what I'm going to do is
13:11 - I'm going to say B equals target dot
13:16 - copy now this is going to do something
13:18 - weird okay first of all so actually I
13:24 - don't want to calculate B here's the
13:26 - thing I make this a little bit weird
13:27 - what I'm doing here but I have a
13:29 - function that calculates be based on a
13:31 - so actually what I want to do this is
13:33 - actually easier than I thought what I
13:35 - want to do is write what I did is I
13:39 - rotated it to here I want now this
13:43 - vector to have the magnitude of length
13:46 - and then I just want a to be positioned
13:50 - where it's distance from the target is
13:55 - that length does that make sense I think
13:57 - I need to draw this again so this is the
14:00 - this is the segment this is the target
14:03 - so the segment goes here and I have this
14:07 - as a vector and now I need to figure out
14:10 - where is a so that if I lined it up with
14:13 - here B would end up right there so all I
14:18 - need to do is take this vector and put
14:21 - it right here right put it right here
14:25 - then multiply it by negative 1 and then
14:28 - I have a vector right leg that goes this
14:30 - way and then a goes right here so now I
14:33 - want that arm to be positioned at this
14:35 - angle but where a is there there's
14:36 - probably some redundancies in the way
14:38 - that I'm thinking about calculating this
14:39 - as there always are but let's just do
14:42 - this so forget about moving B what I
14:45 - want to do now is say directions set
14:47 - magnitude to length right then I want to
14:49 - say Direction multiplied by negative 1
14:53 - so I wanted to be as long as the segment
14:55 - and I wanted to move in the other
14:56 - direction because now all I need to do
14:58 - is say a equals P vector ad target plus
15:03 - direction right so I want a to be
15:06 - positioned I'm going to change the angle
15:08 - and then position a that distance away
15:10 - from the target and now we should see
15:12 - there we go so now as I knew of this you
15:15 - can
15:15 - this particular segment is following the
15:20 - mouse in a somewhat life's like way and
15:24 - here's the thing this is going to get
15:25 - much more exciting right this is inverse
15:28 - kinematics and then I'm starting with
15:30 - the thing at the end but there's nothing
15:32 - connected to it so now what I need to do
15:34 - is now that I figured this out oh this
15:37 - is exciting
15:37 - yeah this is going to be beautiful
15:41 - you're gonna make all sorts of wonderful
15:43 - Houston squiggly little snake-like
15:46 - colorful creatures a little antennae I
15:48 - can't wait to see all of them right if I
15:51 - have this now here and let's just say
15:55 - for example it started like this so this
16:00 - got moved to here what I need to do is
16:05 - point this now this one does exactly the
16:09 - same thing that this one did ah this is
16:11 - what inverse kinematics is menlo does
16:13 - exactly the same thing that this one did
16:15 - but its target at this point so it
16:18 - points towards it and then it shifts
16:21 - there so we're actually done we've done
16:24 - all of this already we just need to add
16:25 - a segment that's connected that does the
16:27 - same exact algorithm but not would be
16:29 - first target but would once attached it
16:31 - let's go add that so now here what if I
16:34 - add what if I do the same thing I did
16:35 - before where I make this segment one
16:37 - eventually we need to make this an array
16:39 - or a linked list whatever we do and I
16:41 - need to make this segment two it segment
16:46 - two okay segment two to do this segment
16:51 - two equals a new segment and guess what
16:54 - it's parent I'm thinking of it in the
16:57 - inverse way it's a parent of the thing
16:59 - at the end is segment one and it has a
17:03 - length of 100 I don't know if it really
17:05 - needs an initial angle the way the stuff
17:07 - is going to get calculated but let's
17:09 - leave that in there this might be
17:10 - completely unnecessary in this scenario
17:12 - so now I need to write another
17:14 - constructor function just like this one
17:17 - I need to give them all a parent and I'm
17:24 - instead of getting an x and a y it's
17:26 - going to get up
17:28 - parent and then so here parent is always
17:33 - know if it's the first one I'm gonna
17:37 - have the same issue I'm going to need
17:38 - the child thing to go but I mean I can
17:40 - go forward this them anyway we'll figure
17:42 - it out then what I'm going to do is say
17:47 - almost their parent is that parent and
17:51 - then a is always sick
17:58 - we don't actually it doesn't really
18:00 - matter where a is because what I need to
18:04 - do now is just follow the parent so I
18:07 - want to follow I want to follow parents
18:15 - a and this just a right I want to just
18:18 - do that algorithm and I better set my
18:22 - length and angle before I do that right
18:25 - so the first thing I do is just attach
18:27 - myself to it wherever it is and then
18:31 - here yeah so this should be good I can
18:37 - see that this is really going to need to
18:39 - be refactored but I'm going to just keep
18:41 - it right now so now what I want to do is
18:44 - it's kind of terrible what I'm doing but
18:46 - I'm going to say segment one update okay
18:49 - let's let's just make sure they're both
18:50 - they're segment to update and show okay
18:57 - what did I get here
18:59 - target parent a X oh oh oh no
19:06 - hold on I got a nullpointerexception
19:07 - what's wrong here news segment segment
19:15 - one follow okay hold on listen dad I
19:20 - should definitely get why am I getting a
19:22 - null pointer in follow is it when I it's
19:25 - up heat focus okay I've got a
19:29 - nullpointerexception
19:30 - with targeted age eight what's target is
19:34 - not null because I can see that I made
19:35 - it right here a is null and why is a Mel
19:38 - because I'm doing something wrong
19:40 - ah and you know I'm setting the parent
19:43 - because I know it needs to be tested
19:44 - but even though I'm doing inverse
19:46 - kinematics I don't want I'm thinking
19:50 - about this incorrectly what I want to do
19:53 - is this is still the root the first
19:55 - thing it's gonna be a lot easier if I
19:56 - then attach the next segment here attach
19:59 - the next thing Here I am going to do the
20:00 - math backwards by starting with the last
20:02 - one but they need to have some initial
20:04 - configuration that makes sense so when I
20:06 - make the next one its parent is actually
20:09 - the thing behind it still so that's what
20:11 - that's what I'm doing wrong here so let
20:13 - me come back and it's just about the way
20:15 - that I'm building it so this is actually
20:17 - not in front of it this is not behind it
20:20 - it's actually in front of it so let's
20:21 - let's do that and segment two is
20:24 - actually the thing that's going to
20:25 - follow the mouse if you if you catch my
20:27 - drift so hold on a second so what I'm
20:30 - going to do when I make that thing from
20:32 - the parent a is still located it's at
20:40 - the end segment two is at the end of
20:43 - segment one
20:43 - so Sigma choose a location gets the B
20:46 - location from segment one so that's fine
20:49 - and forget about this follow thing
20:50 - that's not happening here so what I'm
20:53 - going to do now is let's just make sure
20:56 - that these both show themselves in the
20:58 - right location get rid of this follow
21:00 - okay so those okay well looks like
21:02 - there's a segment up here why is that
21:04 - because 300 200 segment until it's the
21:09 - Oh Felicity here what went wrong there
21:12 - ah
21:14 - so the first segment didn't get it's be
21:17 - calculated in set up in its constructor
21:20 - so so that messed up the second one and
21:23 - in that sense I should probably
21:25 - calculate it be here so look so there so
21:31 - now they're connected and we can just we
21:34 - know that this is correct even though I
21:35 - think the initial angle isn't really
21:37 - going to matter here if I were to give
21:39 - it you know an angle of saving like
21:42 - negative 45 degree radians and just we
21:46 - can see you know negative attend
21:49 - so we can see this is now these segments
21:52 - are connected 45 degrees and then 10
21:55 - degrees okay because here's the thing
21:57 - its segment - the whole point of this is
22:01 - that I want the end to follow them out
22:04 - by the way the parent thing is going to
22:05 - work so much better here they start the
22:07 - end and I just go back to the parents I
22:08 - don't actually need the child like I
22:10 - needed in the forward one okay so now we
22:12 - can see segment two is following the
22:14 - mouth but segment one is not coming
22:16 - along with it so what do I need to do
22:18 - I could just say segment one follow
22:21 - segments to a x segment to a dot Y and
22:28 - now we're going to see this there we go
22:30 - we can see now I have this inverse
22:32 - kinematics where it's all about the
22:35 - other figuring out where the end is and
22:38 - the angles get calculated kind of
22:40 - rippling back the first one falls the
22:42 - mouth the second one falls the end of
22:43 - one and you can see not this this is it
22:45 - this is kind of feels somewhat like a
22:48 - realistic skeleton arm like thing of
22:50 - course there's scale you're using this
22:52 - Forks but we've got the basic idea oh
22:54 - good so now what I want to do is I want
22:59 - to add I want to make this I don't want
23:05 - to just have two separate variables so
23:06 - once again I'm going to call this
23:07 - tentacle or snake or whatever we call it
23:09 - tentacle and tentacle is a new first
23:14 - segment then I'm going to say I'm just
23:18 - going to make just for simplicity I'm
23:19 - just going to have three and add three
23:20 - and the same kind of thing I did before
23:25 - where what I want to do is I need the
23:28 - current segment is starts with tentacle
23:33 - the next segment is attached to that
23:39 - tentacle and let's just give them all an
23:41 - initial angle of 0 again that makes just
23:44 - things a lot simpler
23:46 - and then next current is next so once
23:52 - again I'm making a linked list where I'm
23:54 - saying the first object is connected to
23:59 - the next object which is connected to
24:00 - the next object so I can iterate them
24:02 - could just go through them and but yeah
24:04 - so but I'm actually connecting them
24:06 - backwards which is perfect it's all
24:07 - perfect yay
24:08 - okay so make the next one based on that
24:12 - and then current becomes neck and this
24:14 - should not say tentacle here that's a
24:15 - mistake
24:15 - this should say current right because
24:18 - current is changing
24:19 - next is based on current the next
24:21 - becomes current so now I should be able
24:23 - to do the thing that I was hoping for
24:26 - where I say for no no I I make say just
24:33 - a current or next I don't know
24:36 - next equals tentacle while next is not
24:41 - equal to null next let's not do the
24:47 - follow for a second next up update next
24:49 - show and then next equals tentacle dot
24:57 - parents oh I see what the problem is
25:01 - will send us on a function so this is a
25:04 - problem why is this a problem this won't
25:06 - work oh it's always gonna work out so
25:08 - beautifully I need the last one I need
25:11 - to start from the last one I wonder why
25:13 - I'm spending all this effort avoiding
25:15 - putting them into an array because my
25:16 - just what I was doing array I have the
25:18 - end has a beginning but since I'm
25:20 - spending all this effort voiding and
25:21 - putting them into an array I'm going to
25:23 - say I'm actually going to say I'm going
25:27 - to do this this is crazy
25:29 - current it's just this first one right I
25:34 - don't need to keep track of anything
25:35 - that tentacle is actually whenever this
25:38 - finishes it's whatever was current 10th
25:44 - Cole right so I don't actually want to
25:47 - save the first one in my variable I want
25:49 - to save the last one so it will start at
25:51 - the end and go backwards okay so now I
25:55 - could say next is that tentacle and then
25:58 - get the parents I'm going backwards so
26:00 - this should show all of them didn't why
26:04 - didn't it next oh this is totally wrong
26:08 - next equals next dot parents
26:10 - of course so this is what's wrong this
26:14 - the whole point of this idea of a linked
26:16 - list kind of system is that you run this
26:19 - again there we go
26:20 - I would say next equal tentacle net net
26:23 - so I was only saying next is the first
26:24 - one so what's stuck in a kind of
26:25 - infinite loop there so I want to show it
26:28 - and then get its parent then show it to
26:30 - get its apparently now if I call update
26:31 - that will should do anything because
26:33 - update is just calculating the end and
26:35 - now what happens if I have though this
26:38 - one follow a mouse X mouse Y so you can
26:48 - see that one's working that last one but
26:50 - I heed now I need to do some kind of
26:52 - following here so I'm gonna say next dot
26:54 - follow and it should follow the it has
27:00 - to follow the if the previous one so
27:05 - what I can do is oh this is why having
27:11 - an array would be nice or having the
27:13 - child allowing is the child relationship
27:15 - because it's got to follow it childhood
27:18 - put that back in let's so maybe I do
27:21 - like this double leg delisting I'm
27:22 - really over engineering this I think but
27:25 - I'm going to give them give it a child
27:27 - and then so I have that reference so
27:30 - what do I do here when I make them the
27:33 - next one is based on the previous one
27:38 - and then what I need to do right now I
27:47 - have the relationship that every segment
27:49 - knows its parent but in this inverse
27:53 - kinematics it's got to follow the one
27:55 - that's in front of it which is actually
27:56 - its child so right now the way that I'm
27:59 - creating them is that the the next
28:05 - object parent is current but the current
28:08 - object child is next
28:10 - so I also need to say current child
28:13 - equals next and then here I can say
28:18 - follow right so the first one just
28:22 - follows
28:23 - it's now flawless amount and then and
28:27 - then what I might do actually is say
28:30 - next equals next parents just to go to
28:32 - the next one and then at the beginning
28:37 - here
28:37 - I should call next follow so if I give
28:40 - it follow with a particular target it'll
28:42 - follow that but I need another follow
28:44 - function I can overload functions right
28:46 - I want the same at all but I don't want
28:48 - to redo this math all I need to do is
28:51 - say void if I just call follow then what
28:56 - I need is target X is child dot as
29:03 - follows to a child a x rays kind of
29:06 - follow it and target
29:09 - why is child dot a dot y and then follow
29:16 - target X target Y so this is a target x
29:23 - target watch so this is kind of an
29:25 - interesting technique that I'm doing
29:26 - which is I have that follow algorithm
29:28 - where this segment can follow any
29:31 - arbitrary point and then what I realize
29:33 - is what I wanted to do is follow it's
29:35 - child point a so rather than write a
29:38 - whole other function that does this in a
29:40 - different way I can just write another
29:42 - function that calls this one with the
29:45 - chalk that that particular child x and y
29:47 - so this is the two functions both names
29:49 - follow if I just say follow without any
29:51 - argument it follows its child if I say
29:53 - follow with arguments it will follow
29:55 - that so now if I go back to here I
29:58 - should be the first one it's following
30:01 - them now and actually this is silly what
30:03 - I'm doing I should just say this will be
30:07 - tentacle tentacle follow the mouse right
30:13 - we know the end the tentacle object is
30:16 - the end of this whole tentacle thing
30:18 - then next is going backwards whatever
30:23 - the tentacles parent is and then and so
30:26 - this is a segment and now I have my loop
30:28 - as long as there is something there
30:30 - follow its child update and show and now
30:34 - we should have we will
30:37 - hold on hold on ah look I forgot to say
30:39 - that next equals next dot parent so I've
30:43 - got to keep going right I've got to go
30:44 - on to the next one otherwise I got a
30:46 - need for the loop stuck there again so
30:48 - now we can see it's doing that right we
30:50 - can see that if this whole thing is
30:52 - following the mouth oh you know it's a
30:54 - little bit off and like laughter oh I'm
30:56 - not drawing the tentacle because that
30:58 - everything is shown in that loop I also
31:00 - have to I'm kind of I have to show the
31:02 - tensed up that front element whoa what
31:05 - did I do here ah that's crazy
31:12 - what's the bug what's this bug I've got
31:16 - a weird mistake because I forgot to call
31:18 - up Kate that's what it is okay okay so
31:22 - this is again refactoring is a wonderful
31:25 - thing but I could see this loop the idea
31:28 - of this loop is to do all the three
31:30 - steps follow updates show I didn't fall
31:32 - in show but I forgot to update it what
31:33 - happens in update it's kind of important
31:35 - it recalculates the end point which is
31:38 - also silly now by the way that I have an
31:40 - update function that that's all it does
31:41 - I thought it might need to do some other
31:43 - stuff so but I guess it's good in their
31:45 - case it needs to do some other stuff so
31:46 - I need to say tentacle update there we
31:50 - go and now there we go so now I have
31:53 - this thing that follows the mouse and
31:56 - kind of like a real little slightly
31:58 - realistic skeletal like way and what I
32:01 - can do now is I could say hey guess what
32:04 - I want to have ten of these connected I
32:07 - want to have the first one and I want
32:13 - them to all and again knee should all be
32:15 - variables I should I want them to be
32:17 - separated by only ten pixels and have 20
32:20 - of them connected and you can see what
32:21 - do I have now you know I have something
32:23 - that looks like this
32:25 - and you can see this is different by the
32:28 - way then a particle that keeps track of
32:30 - its own path right there is an aspect of
32:33 - it kind of keeping track of its own pets
32:34 - but it's actually you know in a way more
32:36 - like a rigid body of connected joints so
32:40 - so there's a lot of possible ways you
32:42 - can vary this and just thinking about
32:44 - this is why I think we could maybe get a
32:45 - nice fish simulation especially
32:47 - there were some added Wiggles to it
32:49 - there's a sort of almost like the
32:50 - muscles where all those joints are in
32:53 - the face that they trigger and close me
32:54 - there's some sine wave oscillation also
32:56 - as it's moving so this is what I want to
32:57 - maybe try to do it in next a second part
33:01 - I don't know I'm going to edit this a
33:02 - mini-course web card I've on but but
33:06 - that's something to think about now I
33:07 - think it would be worth just out of
33:09 - curiosity let's try adding that thick
33:12 - thickness stroke weight thing to it so
33:14 - it could be useful for every segment and
33:16 - I don't need the angle so I'm going to
33:18 - reuse the item instead of having the
33:19 - angle the angle could just default to
33:22 - zero because it's just being calculated
33:24 - so I'm going to have all of them have a
33:26 - default angle of zero and I'm going to
33:29 - make this last thing pass this index
33:33 - into the array because what I can do
33:35 - with that number I have each segment
33:37 - knowing whether it's 0 1 2 3 4 whatever
33:40 - it is in the total number of segments
33:42 - and so what I can do is for example if I
33:45 - wanted to have stroke weight as a
33:47 - variable and whenever I draw it that's
33:50 - it's drawn with a variable stroke weight
33:52 - you know if I were to just say right now
33:53 - and I think that I have to do this in
33:55 - two places so this is something I really
33:57 - need to refactor stroke weight equals
34:00 - like a random number between 1 and 10
34:03 - and I'm doing this in two places which
34:05 - is terrible
34:06 - and I don't need angle anymore you can
34:09 - see they all have like a range of the
34:10 - stroke weight but what if I want to say
34:13 - and I want to map the index which goes
34:19 - from 0 to the total number of segments
34:22 - which in this case is 20 0 to 20 and I
34:27 - want the stroke weight to go between 1
34:28 - and 10 so I know this is terrible
34:32 - there's good put these in both places
34:33 - now we can see it's thicker at the end
34:38 - closer to the mouth and thinner thinner
34:41 - thinner as it gets further to the back
34:44 - so you could think that's a nice little
34:45 - variation I could I could also alter its
34:47 - color based on the same exact algorithm
34:50 - we've got this kind of feel like thing
34:51 - that we could start to work with in our
34:54 - sketch when I look at this snake-like
34:56 - thing I see a one object and in a way I
35:01 - kind of have that because they just have
35:02 - this one variable called tentacle which
35:05 - in a way because it's a linked list
35:06 - refers to everything but I really could
35:09 - organize the code in such a way that if
35:11 - I made another class called
35:14 - snake or creature or something and I
35:17 - could take everything that's basically
35:19 - and set up and draw and put it into that
35:22 - other class this would allow me to more
35:24 - easily duplicate many of these on the
35:27 - screen and that's something that I like
35:29 - to do in maybe the next video so I will
35:31 - do another one where I have more than
35:32 - one of these and maybe they move in some
35:34 - way because what if instead of following
35:37 - them now mouth they follow a bouncing
35:39 - ball or if you look at any of my just
35:42 - take the flocking example for example
35:43 - what if instead of having a triangle
35:45 - moving throughout that flocking example
35:47 - you have this snake-like wiggly creature
35:50 - thing moving through so that's so that
35:52 - there's there's a couple things I think
35:55 - you could think about doing as an
35:56 - exercise if after watching this number
35:58 - one refactor the code just have the two
36:01 - constructors there's some efficiency
36:02 - there putting everything that has to do
36:04 - with this one creature into a class if
36:07 - you get more than one of those on the
36:08 - screen and then thinking about those
36:10 - things not calling them out so what are
36:12 - those things move independently through
36:13 - some other particular kind of logic so I
36:16 - hope you will do that I hope you will
36:17 - make cute and cuddly and rainbow
36:19 - colorful and Tenant new creatures and
36:21 - share those with me in the comments at
36:23 - shipment on Twitter by submitting it to
36:26 - the github repository and all that sort
36:28 - of stuff that people often do when
36:29 - they're watching these videos thanks and
36:30 - I'll see you soon
36:32 - [Music]
36:36 - you