00:04 - some crazy idea
00:13 - [Music]
00:24 - [Music]
00:38 - [Music]
00:52 - [Music]
00:58 - [Music]
01:29 - I did it again they did it again again
01:33 - hello
01:35 - I failed you know the thing is my new
01:40 - system here which hopefully is going to
01:42 - be better with less crashing still is
01:45 - subject to human error and I to play
01:48 - that ridiculous trailer thing I have to
01:51 - mute my microphone or else I will be
01:53 - talking over it
01:54 - and then I forgot to unmute my
01:55 - microphone because with OBS the
01:58 - microphone settings are not on a per
02:01 - scene basis they're kind of global
02:03 - anyway that's not it week hello it is me
02:05 - Dan Schiffman and the coding trade to
02:09 - welcome you on a Friday what I was
02:11 - saying is that I'm pleased if it's the
02:12 - afternoon here in New York City it's a
02:14 - slightly earlier time than usual I know
02:16 - that there are viewers all around the
02:17 - world who have been watching the middle
02:21 - of the night are way past their bedtime
02:23 - some of your younger viewers in Europe
02:25 - you know I'm talking about Simon and
02:30 - we're saying way past their bedtime so
02:32 - I'm glad that it's a more reasonable
02:33 - hour today ah wait wait wait you could
02:38 - hear me though right oh oh oh people are
02:42 - saying no live stream for me I'm looking
02:43 - at the chat which I really should do
02:45 - because got to know I ain't going to
02:47 - work so I can't watch no live stream
02:49 - meaning I can't watch it not that it's
02:51 - not working okay I am getting warmed up
02:55 - so welcome this is the Kotick train my
02:57 - name is Dan I come here every Friday to
02:59 - do some coding stuff something like that
03:02 - I also embarrass myself and make lots of
03:05 - mistakes and I generally don't know what
03:07 - I'm talking about as evidenced by the
03:10 - video on Const that I released this week
03:14 - and made last week which I kind of got a
03:16 - lot of stuff wrong so you should read
03:17 - the comment thread hopefully you guys
03:18 - can upload the like clarifications in
03:20 - that comment thread I pinned one to the
03:23 - top and I'm thinking maybe I should
03:24 - rerecord it the main thing that I got
03:25 - wrong in the I need a sound
03:27 - I need like my something better but like
03:31 - my Corrections Department sound clip
03:34 - which is that I talked a bit about how
03:37 - Const as an yes as a
03:40 - as a tool for memory management or
03:42 - efficiency because the computer or the
03:45 - interpreter or the browser whatever it
03:47 - is knows that you're never going to
03:50 - reassign the value so it can like be
03:53 - more efficient about the memory and
03:54 - that's not really true at all maybe
03:56 - there is like some slight benefits but
03:58 - really the reason is just for
03:59 - maintainability and for the human being
04:01 - to kind of protect oneself from not
04:05 - making future errors don't go off my
04:06 - chat yeah I'm curious about the sink I
04:10 - do have the delay on to keep the audio
04:12 - in sync all right so that was my main
04:18 - Corrections Department about my constant
04:21 - vigil I'd be curious tweet at me at
04:22 - Shipman if you think I should redo it or
04:24 - kind of like yeah it's fine you kind of
04:25 - got it wrong but it's in the comments
04:27 - and you're not going to destroy the
04:28 - world with misinformation but it is true
04:31 - that I I you know there was a time I
04:34 - feel like when I first started making
04:35 - these videos that I had researched and
04:38 - thought about and read about and taught
04:39 - for like a whole bunch of years I'm like
04:43 - grounding in some sort of knowledge and
04:44 - then was rehearsed and prepared and then
04:47 - more recently I'm just like the good
04:49 - friend make some videos on Friday es6
04:52 - constant probably means this so but
04:54 - thank you to the community for very
04:56 - nicely offering me some corrections okay
04:58 - what I want to do today is a bit tight
05:00 - it is a 5 of 1 p.m. here Eastern
05:04 - Daylight Time I have a meeting to be at
05:06 - 3 p.m. Eastern Daylight Time so whatever
05:09 - happens around 2:45 two hours from now
05:12 - I'll be wrapping things up I want to
05:14 - talk about the community projects and
05:15 - show things that people have made and
05:17 - today's topic is es6 classes so a couple
05:23 - words about that first of all for those
05:25 - of you who are like where are your
05:27 - machine learning videos I have a bad
05:30 - habit the more people ask me about
05:32 - something I kind of getting this like
05:33 - procrastination like mental block thing
05:36 - like with Chrome extensions I think
05:39 - we're learning is fully following in
05:40 - there I will get to it if you really
05:43 - want to yell at me and make me feel
05:44 - guilty about it you should join the
05:45 - patreon group patreon.com slash coding
05:48 - train and contribute and join the slack
05:50 - channel and then that's where you can
05:51 - really help me and I'll feel
05:52 - they'd probably end up in a little
05:53 - sooner but right now I am focused on
05:57 - work making tutorials for beginners
05:59 - we're just starting to learn to code we
06:02 - in a Java Script and perhaps p5.js and
06:04 - so today's topic well today's topic is
06:07 - classes object-oriented programming for
06:10 - the total beginner so let me look for
06:15 - something here I'm gonna have to
06:16 - ridiculously go to my channel and
06:20 - quickly scroll past that video I'm gonna
06:22 - go here to up the camera went off what
06:27 - are the numbers anybody know the numbers
06:28 - from lost I feel like I need to punch
06:30 - those in before I press this button well
06:33 - I have a new camera thank you to some
06:36 - other folks here who are doing some
06:38 - tutorials at NYU in this room there's a
06:40 - camera right up here I could probably
06:42 - show it to you and I could go look at it
06:43 - like this I'll do that in a little bit
06:44 - somebody remind me but I want to
06:46 - continue my train of thought here so
06:49 - this oh don't watch this ad
06:52 - look at these oh how do I get there I
06:54 - want the playlist and what the playlist
06:57 - what ah there we go
07:00 - this playlist which is the playlist
07:03 - intended for beginners ah a couple
07:05 - things I need to mention so this is
07:08 - where if you had never programmed before
07:09 - and want to get started you can get
07:11 - started right here with introduction to
07:13 - p5.js and I did make these a couple
07:15 - years ago so some of the stuff is a
07:16 - little out of date but mostly still
07:17 - relevant this one point to video was me
07:20 - trying to put a bandaid on the fact that
07:22 - the desktop p5 editor that I used in
07:25 - this it throughout the videos it's not
07:27 - really available anymore
07:28 - so using brackets was just one
07:30 - possibility but there is a problem which
07:33 - is that and let me just mention this
07:34 - which is that which is that the download
07:43 - the p5 just download changed so the
07:46 - folder structure that I used in the
07:48 - video changed and so if you look at this
07:51 - link however you can get the same folder
07:53 - structure that I used in the video let's
07:54 - see if anybody said that that worked for
07:56 - them Thanks and without a notice this it
07:58 - works there's a syntax highlighting my
08:00 - brother's okay I'll come back to this
08:01 - later okay so now let me go back here
08:04 - where are we function basics okay that's
08:08 - gonna be fine
08:09 - function parameters and arguments that's
08:12 - gonna be fine
08:14 - functions and return that's gonna be
08:17 - fine
08:18 - functions inside of objects oh all of
08:25 - this I don't like any of this oh then
08:28 - the constructor function oh oh oh
08:30 - multiple J's files okay ah this will do
08:33 - clicking out got to redo all this up got
08:35 - to redo all this huh oh my goodness
08:37 - because I now I'm the person you
08:43 - couldn't do I know if you heard that I
08:45 - could hear it who uses es6 classes a
08:48 - different way of programming
08:49 - object-oriented programming in
08:50 - JavaScript that is newer and I like it
08:53 - better frankly I like it better so so I
08:57 - need to redo all these videos so oh boy
08:59 - I didn't realize how many I had to redo
09:01 - well but at the very least I'm going to
09:04 - pick up I think from here so I'm gonna
09:08 - start a new six point series which will
09:11 - be about objects not to replace all this
09:13 - stuff I don't know what this is gonna be
09:16 - hard so that's what my main plan for
09:18 - today is so I'll come back to that so
09:23 - I'm looking at the chat I'm seeing all
09:26 - sorts of messages that are confusing me
09:27 - I will not read them then okay now I
09:30 - want to talk about some of these
09:31 - community projects github can you guys
09:34 - by the way here the like party chatter
09:36 - things going on the hallway about people
09:38 - talking coding train github.com slash
09:43 - coding train so this is the github
09:45 - repository organization thing for the
09:48 - coding train I know I already have a 6.0
09:51 - all those videos are gonna go away I'm
09:52 - gonna read number in it's fine it's fine
09:53 - I'm gonna figure it out so there's a
09:57 - bunch of things here so first of all I
09:59 - have been totally amazed by by people's
10:04 - 10 print things so first of all I did
10:07 - bring the 10 print book with me let me
10:09 - be perfectly clear a lot of people are
10:11 - saying thanks to Dan's inspiration
10:14 - thanks to the inspiration the coding
10:15 - train video I made this 10 print
10:17 - thing here thank these people who make
10:19 - wrote this book and inspired me I love
10:21 - this book it's like a wonderful history
10:24 - of creative computing especially if you
10:26 - were you know not born during some of
10:30 - the years that are talked about in this
10:32 - book you'll find a lot of this
10:32 - fascinating and it's a wonderful
10:35 - historical and cultural perspective so I
10:37 - want to plug this book and say thank you
10:39 - to all the authors of 10 print 10 print
10:41 - org and then if you're looking for what
10:44 - people have made with the 10 print
10:45 - challenge one place you can just go is
10:47 - twitter.com slash hashtag probably slash
10:51 - ten print is that how the URL is formed
10:53 - and you can just see so many wonderful
10:57 - kind of beautiful versions and
11:00 - variations off ten print so one thing
11:02 - that I was really thrilled about that I
11:04 - think I would like to do more of in the
11:05 - future and look at this this is
11:06 - wonderful Paul 0x1 see use the school
11:10 - lesson to try 10 print on paper using
11:13 - some kind of like ancient machine what
11:17 - is that it's a class I Oh a cos I Oh
11:21 - oh my goodness you know I used to have a
11:23 - Casio watch I wish I still have one of
11:25 - those cos I own watches ain't no way to
11:28 - announce it so figuring out how to
11:30 - program random numbers into that and
11:32 - then drawing on that look at this ha in
11:34 - this area 22 by 22 there's two to 484
11:40 - options
11:40 - well that's a big of possible 10 print
11:43 - this is blowing my mind right here this
11:45 - is awesome wonderful work so I really
11:47 - been thrilled to see the diverse the
11:52 - diversity of ideas and people who have
11:54 - created things with 10 prints so one
11:55 - thing that I discovered that's so
11:56 - successful about this is it's actually
11:58 - that my video was like eight or nine
12:00 - minutes long or ten minutes or twelve
12:01 - minutes is very short and the amount of
12:03 - code in it was basically nothing
12:04 - it's like twelve lines so I think I
12:07 - would like to do more of this in the
12:08 - future coding challenges that I make
12:10 - that are incredibly simple I demonstrate
12:12 - a simple geometric idea and then see the
12:14 - explosion of ideas that come out of that
12:18 - yes it is a scientific accion t seek cal
12:25 - calculators calculate or
12:28 - that sounds like something really
12:30 - interesting okay so I wanted to mention
12:33 - that I will also show you so it's great
12:35 - to see all these on Twitter with the
12:36 - hashtag we should have a hashtag for
12:37 - like the coding challenges whoo right
12:39 - I'm with it I know about hashtags I snap
12:44 - chat not really okay
12:47 - I'm very embarrassing but oh my goodness
12:51 - look at this so many changes recently so
12:54 - first of all thank you to me I am so me
12:56 - they have been helping me wonderfully
12:59 - with keeping these that github
13:01 - repositories maintain and pull requests
13:02 - that I've just fallen totally behind on
13:04 - so I'm gonna go to rainbow code another
13:06 - place you can submit if I go under
13:08 - coding challenges all the way down to
13:11 - the most recent one coding challenge
13:13 - 7610 print you should also feel free to
13:17 - and we can see we just have a bunch here
13:19 - compared to what's on Twitter is nothing
13:21 - this is nothing compared to what's on
13:23 - Twitter so it's nice that the Twitter
13:24 - thing is great and especially if you're
13:26 - sharing something with me if you can
13:27 - make a little animated gif for an image
13:28 - and that's really wonderful and helpful
13:30 - for me to be able to see it and share it
13:31 - with other people but let's click on
13:33 - let's just let's go nuts and click on
13:34 - all of these real quick so how do I do
13:36 - that open in a new tab automatically
13:38 - option click nope command click so let's
13:44 - look at this here is a wonderful by
13:48 - Virgin by Joseph couch our I don't know
13:52 - if that's pronounced correctly I love
13:53 - this with its scrolling that's really
13:54 - cool I wonder if you could make a
13:56 - terrain like a 3d terrain out of this
13:58 - almost like an overhead view that's
13:59 - really nice wow this is awesome oh oh
14:03 - this is that oh no it's doing it oh I
14:05 - just pressed any keys and it goes
14:07 - through it Wow look at that emulator of
14:10 - the Commodore 64 right here in the
14:12 - browser that is totally awesome thank
14:14 - you to marriage in from the Netherlands
14:17 - one of my favorite desserts is awful
14:20 - that I press that correctly anybody
14:23 - likes stroopwafel we're very into it
14:26 - here okay now let me see here the horror
14:30 - this is something so it's great for you
14:32 - to share with me the coat it's much
14:33 - nicer if you can try to host it online
14:34 - or put a little video documentation or
14:36 - something
14:37 - windy ten print Wow windy
14:40 - hey windy but this looks much more windy
14:42 - look at this a blog post with
14:44 - documentation and reference boy do I
14:47 - love this so this is one thing that I
14:48 - highly encourage anybody who's embarking
14:50 - on a journey of learning to code is
14:52 - don't just make the thing document your
14:54 - process tell people how you made it
14:56 - share that process it's not just for the
14:58 - good of the world it's good for you too
15:00 - to have that to refer back to - if
15:02 - you're you know if you're applying for a
15:03 - job and you can show the way that you
15:05 - think and how you build things that's
15:07 - going to be a good thing so I really
15:08 - encourage you guys to do documentation
15:11 - totally not how you pronounce it okay
15:14 - fine I'm gonna really have somebody will
15:17 - help me okay Justin look at this I love
15:20 - this oh and this is using by the way
15:23 - glitch taught me which is a wonderful
15:25 - new code editor development environment
15:28 - that all runs in the browser made by fog
15:30 - Creek I would love to do more with
15:33 - glitch on this podcast because that's
15:37 - all I do a little bit body cast this is
15:39 - not a bad guest I would be terrible at a
15:41 - podcast because I actually and not I
15:43 - don't make sense with the words things I
15:45 - just like compensate by waving my arms
15:47 - around a lot which was kind of you know
15:49 - a little touch-and-go there for a little
15:50 - while with this elbow problem okay
15:52 - that's wonderful oh I love this kind of
15:55 - looking like twigs wonderful worship
15:57 - version Matic ooh and now we're that's
16:01 - great so thank you everybody alright two
16:05 - more community things I got to get to
16:06 - the tutorial stuff we're at 105 I'm
16:08 - moving quickly today is the
16:12 - International Coffee Day I think I used
16:18 - to not drink coffee I was about 20 years
16:20 - I didn't drink coffee and then like a
16:21 - few years ago this was another one ten
16:25 - print oh and here did I look at this one
16:27 - already I did not oh look at this with
16:29 - sliders oh I love that so I could kind
16:31 - of change the parameters of it color
16:34 - size love what it's doing maybe line
16:38 - thickness this is really cool
16:39 - wonderful so I love all these and
16:41 - pressing a key restarts it okay
16:45 - wonderful so now what are the other
16:50 - community projects I want to talk about
16:52 - number
16:53 - one is I am amazed so I was a little
16:56 - worried like oh I love this historical
17:00 - work absolutely it's a historical but
17:01 - this work from the 90s by John Maeda
17:04 - I never know if I'm pronouncing his name
17:06 - correctly to be honest with you uh and
17:08 - which is actually in looks like it's in
17:12 - San Francisco MoMA and but this post
17:16 - from Golan Levin's course at Carnegie
17:19 - Mellon University is really the only
17:20 - visual documentation that exists that I
17:24 - know of of the twelve o'clock project
17:27 - and I did a clock coding challenge and
17:28 - said hey why don't we try to remake
17:30 - these in p5 Jeff and me I am so me set
17:32 - up a wonderful like mechanism for
17:35 - contributing and this is amazing I'm
17:37 - going to show this to you right now I'm
17:38 - gonna go to coding train I'm gonna go to
17:43 - community not twelve o'clock and I'm
17:46 - gonna click on this link here and look
17:50 - at this oh no no we still got one so
17:54 - first of all we need to look at these
17:57 - and sort of check for accuracy although
17:58 - I'm this is Wow how did this one get
18:01 - done is this done with like this I'm
18:04 - wondering is this done with p5.js or 3j
18:06 - s or is it actually not a 3d render but
18:08 - just this like illusion amazing
18:12 - but look clock twelve was still not
18:14 - implemented so all of you watching if
18:16 - you want to contribute first of all you
18:17 - can always help this is not meant to be
18:19 - one person per clock this is meant to be
18:21 - a community collaboration so maybe you
18:23 - notice something that's can be improved
18:25 - or that doesn't match visually the
18:27 - originals but this is kind of incredible
18:30 - to me and I I just want to thank this
18:32 - generous and creative and talented
18:35 - community I really should just at this
18:39 - point I'm not I I guess I just exist to
18:42 - hopefully give you guys some interesting
18:44 - ideas because you're all much better at
18:45 - this than I am at least in certain terms
18:47 - of being creative and visual design and
18:48 - so this is really wonderful so I think
18:49 - if I click on one of these or they've
18:51 - been just highlighting them we can so
18:52 - we'll think about this website I need to
18:54 - think about a way of Hyder Ali Punjabi
18:58 - and the chat is saying I made nine and
19:00 - ten thank you so much that nine and ten
19:03 - is
19:04 - 12 11 10 these are 90 dead if I got that
19:10 - right so I'm gonna share this with John
19:13 - mighta probably within the next week
19:14 - since it's almost complete so please get
19:17 - your contributions in and I need to
19:19 - think of a way to thank people and you
19:22 - know obviously github has a history so
19:24 - we can see everybody's contributed
19:27 - simply by going here under under commits
19:30 - and I can look and I can see the history
19:34 - of what people have done and that's one
19:35 - way of thanking people I can also go to
19:39 - here I think just under contributions
19:41 - and we can see all of these github users
19:44 - who have contributed but I would like to
19:46 - think of something beyond this that I
19:48 - can thank in terms of credits in that
19:49 - sort of thing all right I'm looking at
19:52 - the chat everything seems good what more
19:54 - community projects so you may know there
19:57 - is something happening called processing
19:59 - Community Day it is the first time you
20:02 - know of course lots of people who do
20:04 - stuff with creative coding and code and
20:06 - all get together in all sorts of forms
20:08 - and formally classes conferences on the
20:10 - subway and restaurants all sorts of
20:12 - things but this is the first official
20:14 - processing foundation organized
20:16 - sponsored event it's happening on
20:18 - October 21st at the MIT Media Lab you
20:21 - can still get a ticket to come to the
20:22 - event I'm supposedly doing a live coding
20:25 - train I don't know what that's gonna be
20:26 - I'm hoping they tell me they being me I
20:28 - told myself cuz I guess I'm helping
20:30 - organize it but that Mateo Choi is
20:33 - really a spearheading this and he is
20:34 - wonderful the founder of the school for
20:36 - poetic computation SFP cio and i'm
20:40 - hoping you wait 20 minutes but so i'm
20:42 - gonna do this live coding train and so
20:45 - the idea for that right now is where do
20:50 - i go here here i guess i'm gonna go to
20:54 - github.com coding train is to make a
20:57 - cloud maker like Algar algorithmic
21:00 - generate generative cloud design and so
21:03 - I'll guess I'll make my own but before
21:05 - the processing day I'm asking people to
21:07 - contribute their own cloud design and
21:10 - I'm actually going to use these cloud
21:11 - designs to be printed on nametag
21:13 - people at the event so if you want to
21:15 - contribute sure just be you can create
21:17 - whatever you want to this because I'd
21:18 - love to see all sorts of creative videos
21:19 - for clouds but to print it on the
21:21 - nametag it's gonna have to be like a
21:22 - thin black outline and then the names
21:24 - will be nicely handwritten in alright so
21:27 - we click here and we can see I think
21:31 - every time I click I just get a new
21:32 - random cloud and I can actually pick
21:35 - some and it has a who created it here
21:37 - and so like let's look cartoon cloud we
21:40 - can see and thank you to Austin coding
21:44 - train patron who to me I am so me
21:47 - created this site and Austin did some UI
21:49 - design and visual design for it
21:52 - cumulus that's pretty cool Thank You
21:54 - Luke and cloud from Kazakhstan that's
21:58 - really nice thank you to Ilyas so I
22:00 - encourage you all the way up until
22:03 - around the probably like the first of
22:05 - October which is coming up soon what's
22:07 - today's date
22:08 - oh my watch I think a battery oh no came
22:12 - back alive oh that's soon so like for
22:13 - the next week another week to take cloud
22:16 - submissions so thank you everybody
22:19 - alright now pause for a second here
22:24 - and see did I miss anything
22:28 - any questions about these community
22:30 - projects processing day before I get
22:35 - started with es6 classes Tonka's did I
22:42 - miss something did you submit something
22:44 - it's very hot you try following a lot of
22:46 - YouTube chat and live-streaming and this
22:48 - lack Simon is pointing out that I'm 22
22:51 - minutes in which is pretty good if I
22:52 - actually start doing some tutorial
22:53 - encoding so actually I should get myself
22:56 - organized while I'm singing if they're
22:57 - questions one thing that's always
22:58 - helpful for me those of you who are in
23:02 - the slack group who are patrons
23:03 - patreon.com slash coding train if if you
23:08 - notice a comment in the YouTube chat
23:10 - that's something that I should address
23:12 - or share or it's like a correction
23:14 - that's useful if you can copy paste it
23:16 - in with the person's name because it's
23:17 - easier for me to follow that and Austin
23:20 - is saying I made it so you can change
23:22 - the background color on the community
23:24 - clouds now too wonderful
23:26 - oh just a video suggestion challenge
23:29 - okay uh and Ilyas is saying my cloud is
23:32 - randomly generated every time and yes
23:35 - that Wow look at that that so that
23:39 - that's really what also what I'm looking
23:41 - for in a way is like you're cloudy
23:42 - it's an idea for a design of a cloud but
23:45 - it comes out differently so it's
23:46 - procedural design or conditional design
23:48 - its design and formed by an algorithm
23:50 - that varies there's a set of rules that
23:53 - define what it means to be a cloud but
23:54 - it varies okay
23:56 - so hello - blowed again and I'm cutest
24:01 - thing I forgot neural networks you did
24:03 - not forget trust me nobody is letting me
24:05 - forget yeah I did forget Chrome
24:08 - extensions though that was gonna happen
24:10 - today alright so if anybody wants to
24:18 - help said we sound effects make sound
24:21 - effects music I could play without
24:23 - getting copyright notices please please
24:26 - I am available to improve okay so let's
24:33 - look here if you can bear with me for a
24:36 - second
24:37 - I'm gonna look at the so what did I do
24:40 - in this video yeah yeah okay no no don't
24:47 - watch the ad I know you probably can't
24:55 - hear this can you
25:04 - okay all right I'm thinking here okay so
25:12 - what I where I left off is this idea of
25:15 - like a bubble okay function so this is
25:20 - Oh Opie beginnings so I need this code
25:24 - maybe okay
25:31 - okay ooh I could get three months of
25:34 - YouTube read for free should I do that
25:36 - okay yeah actually should do that
25:38 - because then when I play stuff the ads
25:40 - won't play yeah okay hold on maybe I
25:42 - won't sign up for that right now I don't
25:46 - sign up for that right now during the
25:48 - live stream okay okay so I think I have
25:51 - a sense of what I need to do all right
25:54 - so what's the chance that there's some
25:57 - code on this computer already called
26:00 - Opie beginnings there it is how lucky
26:02 - for me okay now and that is in other
26:09 - documents p5 just videos Opie beginnings
26:12 - so let me grab that let me put that on
26:15 - the desktop in a folder called Opie and
26:21 - actually what I want to do here is and
26:24 - when we close this oh I'm Austin who I'm
26:27 - mentioning over and over again now has
26:29 - turned me on to something called I turn
26:31 - which I haven't had a chance to look at
26:32 - yet but I'm going to try using maybe a
26:34 - different terminal application and do a
26:36 - little tutorial about it this computer
26:38 - went off okay so now I need to go to
26:46 - desktop and I want to generate a project
26:56 - called op1 and now I'm going to open up
27:03 - Adam and I can I'm going to run a server
27:14 - so I'm getting set up here this is what
27:17 - I'm supposed to pay my waiting music and
27:21 - I'm gonna get this what all right this
27:25 - is already like the changed version
27:27 - [Music]
27:30 - that's funny this is what's funny is
27:34 - what I have here is the code from the
27:36 - end of that video so it kind of but I
27:38 - think I know basically I don't like this
27:42 - way of doing it at all and I'm gonna
27:50 - bear with me here for a second everybody
28:00 - [Music]
28:18 - don't go full screen it would work much
28:52 - better if this bubble would move a
28:58 - little bit more
29:02 - [Music]
29:05 - oh did you guys want me to do some
29:13 - coding and stuff okay sorry I got
29:15 - confused
29:16 - I thought that somebody wanted to watch
29:17 - with me and my desire to be an
29:19 - avant-garde performance artist okay
29:28 - the only chatter not happy
29:31 - all right um okay so one of the things
29:43 - that you if you haven't watched this of
29:45 - these videos before that I do is this is
29:48 - a live stream and then portion of the
29:50 - live stream get edited in tutorial
29:52 - videos that make it into various
29:53 - playlists um there will be a slight
29:55 - delay on the edited videos this week due
30:00 - to some scheduling stuff so one thing
30:03 - I'm definitely gonna try to make sure I
30:04 - do is have a good match it helps me to
30:07 - is amazing and helping me do this make
30:10 - sure that I have like links to the time
30:11 - codes of the actual tutorial portions
30:13 - and I'm going to try if I can to not do
30:16 - the thing that I stop and start all the
30:18 - time to make it a little bit more
30:21 - watchable but not that I'm really
30:24 - interested in making this watchable oh
30:28 - if my timing is so off
30:39 - okay okay I think I hurt myself I think
30:43 - I might have pulled a muscle in my neck
30:45 - okay so the first thing I'm gonna do is
30:50 - make a quick video that's going to go in
30:53 - between it's going to go I lost the
30:58 - YouTube playlist but it's gonna go in
30:59 - between the last functions video and the
31:02 - first objects video and maybe someday
31:03 - this video will be deleted but it will
31:06 - I'm just like tell people that I'm these
31:10 - are hey let me just do it hello this is
31:15 - not actually a tutorial video you could
31:17 - just skip to the next one if you want
31:18 - the actual tutorial content but if you
31:20 - happen to be watching this as a playlist
31:21 - because you're learning to program in
31:23 - JavaScript with p5 just for the first
31:25 - time I just want to give you a little
31:26 - warning all the videos you've been
31:28 - watching before this video were made as
31:30 - of right this moment a couple years ago
31:32 - I now am going to I am now programming
31:36 - in JavaScript with a slightly different
31:37 - style it's a more modern style start of
31:40 - es6
31:41 - what's es6 you could go watch a
31:42 - different video where i talk about that
31:44 - then I'll link to this video description
31:46 - but where I use something called classes
31:50 - to make objects so the videos that are
31:52 - coming next the older ones are
31:54 - deprecated they'll be off in some other
31:56 - playlist somewhere that you could go and
31:57 - find but the videos that are coming next
31:59 - I like I do now just like with more grey
32:02 - hair I have a scar on my elbow that I
32:05 - didn't have before and but I but those
32:09 - videos will not assume any prior
32:12 - knowledge they will assume that you are
32:14 - arriving here just at the moment where
32:16 - you are about you just learned about the
32:18 - basics of functions and you're about to
32:20 - learn object-oriented programming so if
32:22 - that is what you would like to do please
32:25 - stay with me and just watches this video
32:29 - transitions to the next one probably
32:31 - with an ad on it sorry about that sorry
32:32 - okay see you in the next video maybe
32:37 - all right I need to flash the firm don't
32:44 - replace and just make a new playlist
32:46 - yeah Simon you're right that is a good
32:48 - point
32:49 - there's no I'm no they're not gonna
32:50 - replace I just have to I think I would I
32:53 - want those four people if their first
32:54 - finding the videos to find these but
32:58 - definitely I'm not gonna delete anything
32:59 - and I'll have all older version of the
33:01 - playlist as well so anyway Matthew and I
33:03 - will figure out an appropriate way to do
33:05 - that and of course I'm happy to have
33:06 - suggestions oh I forgot this was behind
33:07 - me the whole time oh and I forgot to
33:10 - mention that I was gonna do another
33:11 - editor uh okay hold on maybe I maybe
33:14 - this could be spliced in also I should
33:17 - mention that yeah maybe could just place
33:21 - this in the middle somewhere Matthew
33:22 - okay also I should mention that in the
33:25 - these videos I'm using a slightly
33:26 - different editor at this point I'm kind
33:28 - of hoping that maybe you already have an
33:31 - editor maybe I had a different tutorial
33:32 - that showed you an editor to use so you
33:34 - could you could this is the Adam editor
33:36 - you can use it but I'm gonna focus on
33:39 - the code in these videos and not the
33:41 - editor but just if you're wondering why
33:42 - it changed that's why I'm using
33:44 - something different these videos alright
33:49 - yes I Greg says I suspect the dancing is
33:54 - only for the gifts that is correct
33:57 - it is my it's all missions in life
33:59 - ultimately oh yeah we're gonna make this
34:01 - happen I need to do my first tutorial
34:03 - but this is gonna be worth it
34:05 - hold on just give me a second here you
34:08 - can still hear me I think right oh it's
34:11 - gonna be off them create new overhead I
34:16 - really shouldn't be doing this
34:18 - I hope you can actually hear me it's
34:21 - going to be this first one and it's
34:24 - going to be 1080i five nine ninety four
34:28 - then I'm gonna hit okay and then I have
34:31 - to somehow find the button to press up
34:33 - here oh did it come on no it didn't work
34:38 - all right I'll look for that let's try
34:40 - to just for goofiness turn on this over
34:42 - camera oh okay edit the bit about the
34:45 - editor good point good point I think by
34:50 - the way is at 150 no it's 120 okay here
34:52 - we go so I have to figure out how to get
34:58 - started here all right so I have to
35:02 - really remember that I'm making a video
35:04 - for people who have just were in there
35:08 - like 5th week maybe of taking a course
35:10 - about programming and they are they've
35:16 - never done out of Georgia program before
35:18 - and they have just learned about what
35:20 - functions are okay okay here we go water
35:32 - it is always important on the coding
35:35 - train to stay hydrated because as you
35:38 - know coding train is brought to you by
35:41 - water it's liquid and you can drink it
35:49 - okay oh one thing I need to make sure I
35:53 - have is a marker and that's a hey what
36:00 - happened to my shortcut keys for the
36:02 - whiteboard and stuff there we go let's
36:05 - just see oh whoa whoa I'm very big weird
36:10 - what's going on here we may need to zoom
36:12 - out a little bit maybe that's better
36:14 - actually maybe this is actually better
36:16 - is this better maybe you can actually
36:21 - see that better maybe I'll leave it I
36:23 - gotta go check and see if the focus is
36:24 - fine it looks good okay I'm gonna leave
36:26 - it all right
36:32 - oh I knew that was gonna happen so
36:35 - that's why I was waiting for the camera
36:37 - to go up and now I can start do you like
36:40 - afraid to do this tutorial and so that's
36:43 - why but I just have to I have to get
36:45 - over my fear okay oh and why this is my
36:51 - computer now that I look at the slack
36:54 - chat keeps going to sleep one of these
37:04 - was a good marker yeah I don't think it
37:07 - was this one who knows I think it was
37:10 - this one hello this is a very exciting
37:19 - moment for me I don't know if this is an
37:21 - exciting moment for you this is the
37:24 - video where I am going to talk about
37:26 - object-oriented programming in
37:28 - JavaScript using something called
37:30 - classes for the very first time ever in
37:33 - any of my videos so this video is part
37:36 - of a playlist and if you're watching
37:37 - that playlist what you just learned
37:39 - about is functions and you might have
37:41 - done something where you first use
37:43 - functions to reorganize your code and
37:45 - you said okay I have some code which
37:48 - draws a circle and I have some code
37:50 - which moves the circle so I'm changing
37:53 - some XY variables and draw drawing
37:55 - ellipse at some X Y variables and then I
37:57 - put those into these own functions call
37:59 - them display call them move and I could
38:01 - call them and draw so I've organized my
38:03 - code and I even have this thing I kind
38:05 - of have this thing called an object it's
38:07 - a JavaScript literal object meaning I'd
38:09 - saying I literally want an object with
38:12 - an x and a y so I can see those up there
38:15 - and so the thing is I got distracted
38:19 - first I get the thing is this isn't
38:23 - really this was a nice way to learn
38:25 - about how to declare and define your own
38:27 - functions and there are reasons why you
38:28 - might want to do that you're gonna see
38:30 - those in many future videos just sort of
38:31 - standalone functions that exist unto
38:34 - themselves and in fact there is a style
38:35 - of programming called functional
38:37 - programming which JavaScript is
38:38 - well-suited for because functions are
38:41 - kind of like the core building block of
38:43 - JavaScript but I am
38:45 - do take a different direction here
38:46 - because in particular if what I want to
38:49 - do is program graphics simulations
38:52 - animations things moving around the
38:54 - screen one way to do that is to think
38:56 - about this circle moving around as an
39:00 - object now I'm already thinking about it
39:02 - as an object it's a bubble it's got an X
39:05 - and a Y it has data but I want to think
39:08 - about it as having functionality it can
39:11 - move it can be displayed I want to I
39:16 - want to say things like in addition
39:19 - bubble dot move bubble dot display this
39:23 - is ultimately how I want to write my
39:24 - code and I'm kind of wondering why I
39:27 - display there is being syntax
39:29 - highlighted I think it's probably like a
39:30 - key word or something in JavaScript
39:32 - somewhere else I'm going to just change
39:33 - that to show what I want to do is I want
39:36 - to write code where I cry where I create
39:38 - these objects and I issue commands on
39:41 - them and the reason why I want to do
39:43 - that is because well ultimately
39:45 - ultimately I'd changed the code and I
39:48 - won't run again this is not going well I
39:54 - said I would restart recording so I
39:56 - can't you're just gonna have to keep
39:57 - watching this what I want to do is
40:02 - change at least just give me a second
40:06 - here to like this will be one small
40:07 - little edit point what I want to do if I
40:11 - could think about this thing moving
40:12 - around on the screen as an object then I
40:15 - can maybe make a second bubble and a
40:17 - third bubble so I have to think
40:19 - conceptually about what I'm doing so I
40:21 - think what's gonna be helpful actually
40:22 - is if I come over here hello to you too
40:26 - and talk about this with the whiteboard
40:28 - so the one of them there's a couple of
40:30 - different principles I talked about with
40:31 - functions that there's some principles
40:33 - behind why you might use functions you
40:35 - can make your code modular or you can
40:36 - make your code reusable this is also
40:38 - true of object-oriented programming but
40:40 - one of the first key principles of
40:42 - object-oriented programming is this idea
40:44 - of encapsulation I want to encapsulate
40:48 - everything that it is to be a certain
40:51 - thing inside of an object
40:54 - what does it mean to be a bubble what is
40:58 - there what do bubbles have what
41:00 - properties do they have what things do
41:02 - they do throughout their life
41:03 - I want to encapsulate all of that into
41:05 - something and the idea of using
41:08 - something called a class in JavaScript
41:11 - we can think of a class another way to
41:14 - think of it is the word template I think
41:17 - is appropriate or the word blueprint is
41:20 - also appropriate the class which is a
41:23 - new block of code that I'm going to ask
41:28 - you to write if you choose to follow
41:30 - this these tutorials is this idea of
41:35 - encapsulating that goes in between the
41:37 - open curly braket and the closed burg
41:39 - curly bracket is everything that it
41:41 - means to be a bubble what does it mean
41:44 - we're gonna find out what does it mean
41:46 - to be a bubble all that will go in there
41:48 - so that in my main program which has set
41:52 - up and draw I don't have to write the
41:56 - code for the bubble I could just do
41:58 - things to create bubbles I could say
42:01 - things like bubble equals new and I
42:03 - think I'm gonna go off the whiteboard
42:05 - here something to write this down here
42:06 - new bubble so there's a new keyword
42:08 - which ironically as is new new is a key
42:12 - word that means to create an object
42:16 - we're gonna see what that actually
42:18 - really refers to in a second and then as
42:21 - my animation continues throughout the
42:23 - draw loop I can see say things like
42:24 - bubble dot float dark pop or dot move or
42:29 - whatever whatever commands these are
42:32 - functions that are somehow part of the
42:33 - object objects the idea of encapsulation
42:36 - is to encapsulate the idea of data and
42:42 - functionality into an object so for
42:47 - example I had this weird little
42:49 - JavaScript literal object this is an
42:52 - object that has data in it it has an x
42:55 - value and a Y value and actually I mean
42:58 - if I really wanted to I could do this
42:59 - this is something you'll see I probably
43:02 - shouldn't show this to you I'm not I
43:03 - don't really do this that often but it's
43:04 - totally reasonable I can only put a
43:06 - function in there
43:08 - for that way you know this is this is
43:12 - the thing welcome to your life there are
43:15 - 15 different ways to do everything in
43:16 - JavaScript and also this video will be
43:18 - out of date by the time you watch it
43:19 - because there'll be a different way that
43:20 - people are doing now but I'm just trying
43:22 - to keep with the times and I think
43:24 - classes are a nice way they're a way
43:26 - that I am now choosing to create objects
43:28 - in JavaScript so let me come back over
43:30 - here a class is the idea of the template
43:35 - this is the template you can think of
43:36 - this I think this is a bit of a this is
43:39 - not my invention here but one way of
43:40 - thinking about this is the class is the
43:43 - cookie cutter the object itself this is
43:46 - the object also often referred to as an
43:48 - instance this is the thing itself this
43:51 - is the template this describes there is
43:53 - no bubble here this just describes what
43:56 - does it mean to be a bubble this is the
43:58 - actual bubble I make a new bubble based
44:01 - on what it means to be a bubble am i
44:03 - saying the same thing over and over
44:04 - again I am but I'm hoping this helps
44:06 - make this make sense to you so object
44:09 - instances instance object template
44:12 - cookie cutter is like the thing you use
44:15 - to make the actual cookies so this is
44:17 - the cookie and this is the cookie cutter
44:22 - so now that that hopefully makes some
44:24 - sense to you
44:26 - the next point of discussion is what
44:29 - goes inside the class how do we write
44:33 - the class I'm gonna pause for a second
44:36 - oh and let's see so I'm not used to I
44:39 - wrote encapsulation up here that you
44:42 - can't see you just zoom out a tiny bit
44:48 - don't change the which is the focus
44:50 - which is the zoom oops okay let me just
44:54 - zoom out a tiny bit so that way at least
44:57 - oh I didn't rise so much of this you
44:59 - couldn't see
45:05 - so what I'm gonna do here is if bat to
45:10 - for any reason you want to like fade in
45:13 - like when I was writing so people can
45:14 - actually see then fade back to where you
45:15 - can't see we could try to do that people
45:19 - are probably so you guys have been
45:20 - telling me all the time you've been
45:22 - yelling at the screen I think it's gonna
45:24 - be fine
45:24 - right oh wait okay so how bad was that
45:39 - hold on
45:44 - like was that terrible is this workable
45:48 - do I need to redo this I don't think I
45:51 - need to redo this all really bad Oh
45:56 - pretty bad what was so bad
46:02 - retake time
46:04 - not so bad bad enough well I don't
46:08 - understand was it because wasn't it just
46:09 - this stuff that's cut off and can't I
46:12 - like I could superimpose that in
46:15 - post-production oh it's out of focus it
46:20 - was all right so much for my whole like
46:24 - this this live stream is gonna stand
46:26 - alone people gonna better watch this
46:28 - without mill on it like just by looking
46:30 - at the time codes it's good to be fine
46:36 - yeah okay you could not see the top
46:39 - things like class so I can fix that
46:45 - everybody's giving their own opinion I'm
46:47 - gonna okay I think that much yeah Matt
46:53 - is a genius and he's going to come up
46:55 - with some way of when we make it I make
46:57 - an edited version of this tutorial of
46:59 - when I wrote something that you couldn't
47:01 - see of like just like putting it on tops
47:04 - okay
47:06 - all right
47:11 - alright ok we're on camera oh no ok
47:15 - I'm gonna keep going so so now I even
47:23 - forgot what I was thinking about there's
47:25 - a big glare on the board yeah I know
47:26 - that's not something I can do too much
47:28 - about oh you can't see which is which
47:31 - light is the glare coming from yeah it's
47:34 - this one all right they're not fixed the
47:37 - glare
47:38 - all right okay continue thank you for
47:42 - pointing that out that helps a little
47:43 - bit and I'm still viewable here okay all
47:49 - right I don't think that met you is
47:54 - unfortunately able to watch at this time
47:56 - so I don't think that he's here but I
47:57 - will I'm gonna keep going and if I have
48:00 - to all redo that first part okay
48:05 - or even just like parts of it alright so
48:10 - let me think I guess that's I don't know
48:11 - how help if anybody has to guess how
48:13 - long was that about because what I want
48:21 - to do I think let me see what are those
48:22 - videos what were the videos I made
48:24 - before before I did oh my goodness
48:39 - I just put functions inside of it so I
48:42 - just need to do this myself okay I did
48:46 - this in like a crazy weird way all right
48:51 - okay all right yeah so actually this is
48:57 - really important and I'm gonna do this
48:59 - now so I don't have this problem again
49:00 - I'm gonna get a little tape or actually
49:04 - I'm not gonna use the tape I will just
49:06 - use a blue marker a pink marker that I
49:12 - have here oops and
49:15 - this is about the top this is about the
49:23 - right I mean I don't usually come over
49:27 - here
49:28 - this is here and then the bottom is
49:32 - about like here so you probably can't
49:35 - see any of those marks I guess you can
49:37 - kind of see this mark make that a little
49:39 - bit higher and oh you can see this mark
49:43 - over here so let me do it about here
49:49 - you can still see that but whatever it's
49:51 - fine okay okay
50:06 - all right okay so first let me just
50:10 - apologize I had a little technical
50:13 - glitch where I drew stuff out of your
50:17 - viewpoint in the previous video I'm
50:20 - hoping that by the time you're watching
50:21 - this I figured out some nice magic to
50:23 - make it make sense or redid this video
50:25 - and you're not even watching this
50:27 - because I don't have to say this but
50:29 - we'll see but I'm gonna go on and what I
50:31 - want to do in this video is now talk
50:33 - about we really need to like hopefully
50:35 - that the first video helped you
50:36 - understand the concept behind
50:38 - object-oriented programming in a very
50:39 - simple and basic way and now what I need
50:42 - to do is look at the actual syntax how
50:45 - do I write the class how do I make
50:49 - object instances and how do I use them
50:52 - so let's let me I guess I should be over
50:54 - here so what is the syntax of writing
50:56 - the actual class what is the syntax of
50:59 - making actual object instances okay
51:02 - where should we start so I keep saying
51:04 - that now I keep saying what I said
51:06 - before there was this new keyword called
51:08 - do and what new does is it creates an
51:12 - object instance it says hey make a new
51:15 - instance of an object that's defined
51:18 - inside of a class called bubble so I
51:20 - know I want to make a bubble which is
51:22 - something I made up this is a made-up
51:23 - game for a class but what could what
51:26 - actually happens do when I call a
51:27 - function when I say something like you
51:30 - know draw a robot I look for a function
51:32 - called draw robot that draws the robot
51:34 - this new keyword actually says execute a
51:37 - function but it's a special kind of
51:38 - function it's a function to create an
51:40 - object or actually maybe let me use a
51:42 - different word construct it's a function
51:46 - to construct an object and so the first
51:49 - thing that I need to write and I need to
51:50 - write this if you might work without it
51:51 - but I really need to write this in every
51:53 - class that I make is constructor so I
51:58 - actually declare a function called
52:04 - constructor it is written just like I
52:08 - don't have to say function by definition
52:09 - it is a function so it's just like any
52:12 - old function definition it's a function
52:13 - definition inside the class and in here
52:16 - this is
52:17 - kind of like the objects set up so we
52:21 - think of set up a draw in our code like
52:23 - a p5 set up is where I initialize
52:24 - everything draws where I animate stuff
52:27 - and loop over and over again the clad
52:29 - the constructor is like the object setup
52:32 - so I'm defining again what does it mean
52:34 - to be a bubble now I'm getting more
52:36 - specific what does it mean to be the
52:38 - first moments when the bubble is formed
52:40 - that first baby bubble it comes out of
52:44 - the bubble making machine and what is
52:48 - what happens so in this case I'm just
52:50 - gonna say x equals 100 y equals 100 so
52:56 - this isn't correct yet so don't yell at
52:58 - me if you know about how this works I
53:00 - need to add something to this but this
53:01 - is the idea I want to declare remember
53:03 - objects are a collection of data and
53:05 - functionality so this is where I say
53:07 - this is all the data that has to do with
53:10 - this particular bubble this particular
53:12 - bubble has an x and a y now here's the
53:15 - thing and nowhere in here did I declare
53:18 - var X or let X debate which video to
53:22 - JavaScript by the way as two different
53:24 - ways of declaring variables and I'm kind
53:26 - of using let now but I probably use the
53:27 - bar to previous video I hate that this
53:29 - is happening but it's happening but I
53:30 - didn't actually declare the variable so
53:33 - and what's weird here is that I don't
53:35 - actually declare it in the way that I
53:38 - previously had so something that happens
53:41 - here when I say new bubble is there's a
53:42 - new object instance and I need to like
53:45 - actually say this is a variable that I
53:47 - want to attach this is a variable that
53:49 - is a property of that object and so the
53:52 - way that I do this and this absolutely
53:54 - this I'm awkwardly saying this because
53:56 - the thing that I put right here is
53:58 - actually this this dot X this dot Y this
54:05 - is a keyword in JavaScript that can mean
54:07 - a lot of different things and over time
54:09 - in future videos I will use it for a
54:11 - variety of different purposes but for
54:14 - right now the this keyword is a
54:17 - reference to the current object instance
54:20 - it doesn't exist right this is a
54:21 - template so it's like in theory if I
54:23 - would ever use this template to make an
54:25 - actual instance of a bubble that
54:27 - instance that's being made I'll just
54:29 - call this out here
54:31 - the instance that's being mean has a
54:33 - variable name called bubble I declared
54:35 - it let bubble I mean I said let bubble
54:39 - any might have said bar but I'm saying
54:40 - that now let bubble bubble is a new
54:43 - bubble that's the object instance that's
54:47 - the real object instance this is the
54:49 - theoretical object instance and then
54:51 - when I say new bubble this code actually
54:53 - happens that actual bubble is created
54:54 - this and bubble point to the same thing
54:57 - but the nice thing is I can use this
54:59 - template for any object I create because
55:01 - this is a generic term to refer to
55:03 - whatever it is I have to do making at
55:05 - the moment so that's the idea so let's
55:08 - go let's start writing this code and
55:10 - just let's put this in this this this
55:15 - dot this dot you know I'm talking about
55:17 - right this is good if this dot is the
55:19 - bane of your existence now welcome to
55:21 - your life okay so I'm going to get rid
55:25 - of this I just have this idea right of a
55:27 - bubble and I'm gonna change it to say
55:29 - let and I'm gonna say bubble equals new
55:34 - bubble we're gonna comment out
55:37 - everything in draw because I don't have
55:39 - anything yet
55:39 - I don't even wanna I'm gonna comment all
55:42 - this out because anybody use it later
55:43 - but the idea now is that I want to write
55:46 - the class now where I define the class
55:48 - could kind of be anywhere and I might
55:49 - show you a way of organizing stuff in
55:51 - two different files at some point but
55:53 - I'm gonna write class bubble open curly
55:56 - bracket close curly bracket now I'm
55:58 - gonna create that constructor like this
56:01 - I'm gonna say this dot x equals you know
56:06 - 5 100 200 this dot y equals 150 and I'm
56:11 - just going to say print line X double
56:18 - dot X double dot Y and it's not println
56:21 - anymore in p5 it's just print which is
56:24 - the same as console not log but that's a
56:25 - bit of an aside so now I'm gonna run
56:28 - this and I'm gonna see look at that 200
56:32 - comma 1 200 150 and actually one thing I
56:35 - can do just to kind of I can actually in
56:37 - this interactive console that I'm using
56:39 - in Chrome I can actually just type
56:41 - bubble and look and see look now I have
56:43 - an object it's a
56:44 - like bubble and has two properties X&Y
56:47 - so that's what we've done we have made a
56:50 - constructor in the bubble object we can
56:54 - create new object instances and there
56:58 - they are the timeout or end a video I'm
57:02 - not sure so hold on hopefully I'm doing
57:08 - okay here all right
57:23 - uh I'm in the wrong frame okay I'm
57:25 - thinking I'm thinking I'm thinking I
57:32 - think you know I'm kind of enjoying
57:34 - these as short videos so I think I'm
57:36 - gonna like the next video we'll just be
57:40 - adding the funk that's this video is
57:42 - just about the constructor and then the
57:45 - next video or I should probably keep
57:47 - going so tricky to like figure out where
57:50 - video should stop and start I guess then
57:54 - there's certainly the next step is to
57:57 - write the functions inside of the class
58:01 - and right so hovering the chat is making
58:08 - a really good point why would you write
58:12 - prop the constructor like this to
58:15 - hard-code the values of x and y and to
58:17 - be honest most cases you wouldn't and
58:19 - this is something that I'm going to have
58:20 - to get to do I have time I still have an
58:22 - hour today so I think I could get you
58:24 - the part where I'm gonna add constructor
58:26 - arguments I think this can be in one
58:29 - video I think this can be in one video
58:31 - I'm gonna sew this all this talking I'm
58:33 - doing right now is an editing point and
58:35 - I'm gonna have to come to the next point
58:37 - which is adding the functionality
58:48 - yeah austin's make a good good point
58:51 - aren't constructor variables typically
58:54 - prefaced with an underscore it's not
58:55 - necessarily that's a popular convention
58:56 - yeah there are conventions of like
58:58 - making certain instance variables public
59:00 - versus private and underscore I'm really
59:03 - this is really uh you know my my point
59:07 - of view and teaching this stuff is to
59:09 - not that's an important point and I it's
59:11 - a perfectly valid an interesting
59:12 - discussion for us to have but I want
59:14 - these videos to be for you know
59:16 - potentially even like the eighth or
59:17 - ninth grader who is learning to program
59:18 - in JavaScript first time and just wants
59:20 - to make some stuff and I think that
59:22 - level of detail is unnecessary at this
59:23 - point though interesting and yes setters
59:26 - and getters and extends I will get to
59:28 - all of that not in these intro videos
59:31 - this is really just about the principles
59:33 - of object origin and the basics okay
59:36 - here we go
59:38 - are these live streets basically never
59:40 - for the people that are watching them
59:42 - correct
59:43 - I used to not do them as live streams I
59:45 - would just make all the videos and
59:46 - release them for some reason people seem
59:49 - to enjoy not necessarily the if you you
59:54 - can just do this stuff out and just come
59:56 - back for the edited videos this is this
59:59 - is my process it is my process it
60:02 - involves oh there's nothing there I was
60:06 - gonna involve this will does
60:18 - all right
60:31 - all right so I don't know it's so the
60:39 - next step now is we can't actually do
60:41 - anything the goal here is I want to
60:42 - write nice elegant easy to read code
60:45 - where I say things like now I want this
60:47 - bubble to move now I want this bubble to
60:50 - show and ultimately I'm going to do
60:53 - things like let bubble 1 let bubble 2
60:56 - and again I know some of you might have
60:58 - just watched the previous video where I
60:59 - used a bar some day I'm saying this it
61:01 - won't matter and the aliens will have
61:03 - figured it out too like dub over my
61:04 - voice in a way that makes all this make
61:06 - sense but for now I've got music music
61:09 - Matt so I ultimately I want to be able
61:12 - to make multiple objects we're going to
61:13 - look at this thing called an array in
61:14 - future videos but we haven't gotten all
61:18 - the way through right well the only
61:20 - thing I've put inside of this class is
61:22 - the constructor and I've I've
61:24 - initialized and I've did I've set I've
61:26 - I've I've defined attached I specified
61:38 - the data for this particular bubble what
61:41 - it is to be a bubble as to have an X
61:42 - into y so now what I need to do is add
61:45 - the functionality if I know I want to
61:49 - say at some point bubble dot move what I
61:53 - want to say here is move so this is how
61:57 - I declare a function of piece of
62:00 - functionality inside the bubble class
62:04 - this is what it means for a bubble to
62:07 - move notice I don't have to say function
62:10 - here so classes the functions that are
62:12 - part of the bubble template I do not do
62:15 - are by definition functions I don't have
62:17 - to say functions and then what do I want
62:19 - for the bubble to move I want to change
62:21 - its exit its Y so can I just say x
62:24 - equals x plus something to change its X
62:27 - no say it with me this dot this dot this
62:32 - dot it's so hard to remember but inside
62:35 - of the template inside of the class I'm
62:37 - referring to the variables the data
62:39 - that's part of a bubble object I need to
62:41 - refer to it as this dot X
62:44 - and this dot X so let's go now add that
62:46 - to our program so I'm going to add a
62:50 - function called move and I'm just going
62:53 - to do and by the way what do I want to
62:54 - do in this I want to do exactly what I
62:56 - did in the previous example and I'm just
63:00 - gonna take this and put it up here the
63:01 - difference is and weirdly I'm gonna do
63:03 - something this is horrible
63:04 - I should not and and I'm let's do show
63:08 - at the same time why not I don't have to
63:09 - do them one at a time I feel I'm feeling
63:11 - confident I'm gonna do this and then I'm
63:15 - gonna take all this code from that show
63:17 - function and I'm gonna put it up here
63:19 - inside this show function and then I'm
63:21 - gonna delete this stuff down here and
63:23 - now I have everything whoops I need to
63:26 - uncomment it and I have everything for
63:28 - my class can I fit it all in one screen
63:33 - KY yes I can perfect
63:35 - look at this so this this is wrong avert
63:38 - your eyes don't don't don't implant this
63:40 - into your brain just yet but this is
63:42 - weirdly gonna work so we should be done
63:46 - in a way right I made this I made this
63:48 - bubble class I have a bubble object and
63:50 - it sort of worked by accident it worked
63:53 - because I have this global variable
63:54 - called bubble and it's the only bubble
63:57 - in the world but the template the
63:59 - blueprint should not refer to a specific
64:01 - bubble this won't work as soon as I try
64:03 - to add a second object this bubble this
64:08 - template needs to use this dot so all of
64:11 - the X and the y is to refer to bubble
64:13 - non-xml one now here it is take this
64:17 - implant into your brain this is a you
64:21 - know I should mention there are lots of
64:23 - other features of things I could do in
64:24 - here there's these things called gathers
64:26 - and senders and there's extends I'm
64:27 - gonna get to that eventually or maybe
64:29 - never because this is this is a good
64:30 - start the basic idea is to find the
64:33 - template the class define a constructor
64:35 - which specifies how that object is
64:38 - initialized and then add whatever
64:40 - functionality you want and then the
64:42 - world is your oyster to make bubble one
64:46 - Bubble to bubble one bubble to
64:53 - bubble one move show bubble to move show
65:01 - so look at that there are now two on the
65:04 - screen and I didn't have to change
65:06 - anything about the class the class is a
65:08 - generic template it knows nothing about
65:11 - where it might be used or how it might
65:12 - be applied it's just the template so
65:15 - this is a way of defining objects and
65:18 - it's going to you know this is also this
65:20 - is no good because this works for two
65:21 - but eventually I'm gonna want to have a
65:22 - hundred I'm gonna get to that in a
65:24 - future video and there's lots there's
65:25 - some other missing pieces here and
65:26 - that'll be in the next video but for now
65:29 - if you're watching this here's an
65:30 - exercise to do for yourself find a
65:32 - sketch you made that had some thing in
65:34 - it get kind of a simple thing thing
65:36 - moving around the screen maybe you
65:37 - didn't use objects in it at all try to
65:40 - encapsulate everything that has to do
65:42 - with that object into a class what are
65:45 - the properties that are part of that you
65:47 - know if you're making a rainbow the
65:49 - properties are the colors potentially I
65:52 - don't know or its position on the screen
65:54 - what are the what's its functionality it
65:58 - can appear it could disappear it can
66:00 - shine and glow whatever it can whatever
66:02 - it does make those functions try to
66:05 - create one object instance and operate
66:08 - it and then see if you can create a
66:10 - second object instance now you might
66:12 - have a problem we're both of your
66:14 - objects you make two but they do exactly
66:16 - the same thing so you can't actually see
66:18 - that there are two and that's the thing
66:19 - that I want to address in the next video
66:20 - this idea of kind of hard coding these
66:23 - values so that every single bubble
66:25 - always starts at the same place is
66:27 - someone problematic and I'm going to
66:29 - address that with something called
66:30 - arguments or parameters to the
66:32 - constructor so that's what I'll do in
66:34 - the next video make your objects share
66:36 - them with me and I'll see you in a
66:38 - future video unless I'm gonna still be
66:40 - here in a second because I may I might
66:41 - have gotten something wrong I have to
66:42 - correct it so now I'm gonna look did I
66:47 - miss anything super important or get
66:49 - something really wrong there
67:01 - I'm just looking at the chat lambda
67:04 - keyword bah-bah-bah that was a good take
67:07 - bah blah blah yeah it's you know what's
67:12 - weird about this is you know and why I'm
67:14 - kind of taking this approach is for me
67:16 - coming from a Java and C++ background
67:20 - this is like oh thank you for the class
67:24 - it's just like it all makes sense to me
67:26 - again where it's that whole like
67:27 - constructor function and prototype stuff
67:29 - is like what is this but I suppose if
67:31 - you kind of got used to that or if you
67:33 - approach program with more of a
67:34 - functional style this may be this is
67:36 - harder or more confusing but for me this
67:39 - is this is helping me okay so I'm
67:41 - getting some feedback too that was fine
67:43 - okay I didn't perfectly nobody in the
67:45 - chat is telling me that I did anything
67:46 - horribly wrong in this video tutorial I
67:49 - may be I'll hear from you in the
67:51 - comments but I will see you in the next
67:52 - video where I talk about constructor
67:54 - arguments shouldn't X&Y be declared that
67:59 - actually is a good question maybe I can
68:00 - address this so let me let me see if I
68:02 - can explain this king weak minus I so
68:04 - this is the weird thing about JavaScript
68:07 - it just want it's just like it's none
68:10 - because what actually was declared is
68:14 - the reference the memory I mean this is
68:17 - I think this doesn't need to go in a
68:18 - video tutorial is like supplemental but
68:19 - if I understand the question if I
68:21 - understand the answer correctly is what
68:23 - I'm saying new bubble I suddenly
68:25 - allocate memory for an object and this
68:28 - variable or that this keyword is
68:30 - pointing a variable being a pointer
68:33 - somewhere in the computer's memory to
68:34 - the data and stuff all that stuff for
68:36 - that particular object so I don't have
68:38 - to specifically say let I'm not
68:40 - allocating new I am kind of but the way
68:44 - the memory management works is probably
68:45 - is more complicated than I'm prepared to
68:47 - like really but the idea here is what I
68:49 - want to do is I want to attach an x and
68:50 - a y here and so the attachment of it is
68:54 - through the reference dot the thing and
68:56 - so if I now here I mean I could have
68:58 - easily just said bubble equals new
68:59 - bubble not put this here and said bubble
69:02 - dot x equals something and now that that
69:04 - bubble has an X but if it's part of the
69:07 - class it's kind of always going to be
69:09 - part of any bubble so that this
69:11 - the thing Java scripts gonna let you do
69:12 - it any which way you want but this is
69:15 - one particular style and if we are a
69:18 - Java or C++ or processing it would just
69:20 - like you know there would be the way to
69:21 - do it and that's the only way to do it
69:24 - which for people like me is like oh yeah
69:27 - thank you
69:28 - this is so much more comfortable I can't
69:30 - take the fact that I look on the
69:32 - internet and I see 50 different ways of
69:33 - doing the same thing all right
69:37 - yes so me I am so me also says I think
69:41 - the idea is that you aren't adding them
69:43 - to the local scope so you don't need a
69:45 - letter bar and that's also a good way of
69:47 - describing it alright how am I on time
69:56 - dual clock
69:57 - I still have 45 minutes okay so all
70:05 - right so here's the thing okay I think
70:09 - I'm ready for the next right that's
70:14 - another good point austin is making the
70:15 - point if i went back to the old code
70:17 - which is over here that when i when you
70:21 - declare an object this way you don't say
70:23 - let X here it's just these are the
70:25 - properties that the thing that I'm
70:26 - declaring is bubble all right okay okay
70:30 - the discussion is going on it's really
70:32 - just feel I just want to like read the
70:33 - discussion to you but I'm not going to I
70:35 - want to see if I can at 2:30 stop and
70:38 - try to do like a simple coding challenge
70:39 - for this week because I really like that
70:41 - I'm not gonna really have one with these
70:43 - object tutorials and I think maybe I'll
70:45 - just do like simple recursion and I
70:47 - brought so somebody we're gonna yell at
70:49 - me at 2:30 to like try to do that simple
70:51 - coding challenge and then I can wave
70:53 - this book the fractal geometry of nature
70:55 - by benoît mandelbrot around alright okay
71:03 - I gotta keep going so let me close these
71:07 - out um save I don't know make sure this
71:13 - is still working okay and I can make
71:17 - this a little bigger too
71:21 - so this video format who will be
71:25 - watching this later is about constructor
71:28 - arguments that's kind of so the first
71:30 - the other I don't know we'll figure out
71:31 - what's the title these later our end on
71:36 - a Rendon is asking why use classes
71:38 - anyway but and so let me try to come
71:43 - back to that but yeah but people are
71:47 - there's a lot of other features that I
71:49 - haven't shown you yet that are in theory
71:50 - for quite good for entre Corita
71:53 - programming okay all right
72:00 - hello okay so here's the thing hopefully
72:03 - by now you kind of have a sense of the
72:05 - principle of a capsulation and the idea
72:08 - of making a template to create objects
72:10 - item number one item number two is maybe
72:13 - you have a sense of what the syntax for
72:15 - writing a classes that template
72:18 - constructor
72:19 - initializing some variables that are
72:21 - attached to that object writing some
72:23 - functions that are the functionality of
72:24 - that object the reason why you might
72:27 - want to do this is because one reason
72:30 - why is just to kind of organize your
72:31 - code of ultimately I don't I could make
72:33 - this exact sketch without all this class
72:36 - and constructor and all that it just
72:38 - could make some variables but one of the
72:40 - nice things about this is I have two
72:41 - things on the screen I don't have two
72:44 - x's and two y's I just have two bubble
72:47 - objects because imagine if these things
72:48 - have a speed and an X Peter Y speed and
72:51 - a color and radius you know I don't want
72:52 - to have 15 sets of variables for
72:55 - everything I have to make I want one set
72:57 - of 15 to apply to a bunch of things but
73:01 - one of the things that I've done here
73:02 - that's not really scalable or
73:04 - sustainable in a way that's gonna be as
73:06 - useful is you know what if I want these
73:09 - but right now they they do move
73:11 - independently of each other which is
73:12 - nice but they always start at the same
73:14 - spot now I could change their starting
73:18 - location to be random but what if I want
73:20 - to specify where they should start or
73:22 - specify a size so look one of the ways
73:25 - to do that is I want to say I often want
73:28 - to say ah what I would like to do is not
73:31 - just make a bubble but I would make like
73:33 - to make a purple bubble or a blue bubble
73:36 - or I would like to make a fast bubble or
73:38 - a large bubble or a small bubble I want
73:40 - to be able to modify the way that I
73:42 - create an object and the way that I do
73:44 - that is by adding stuff inside here I
73:47 - add arguments to the constructor new
73:50 - bubble with a radius of 50 and an XY of
73:53 - 70 comma so let me do it the other way
73:55 - let's imagine that what I want I want
73:57 - one bubble to be at 200 comma 200 and I
74:00 - wanted to have a radius of 40 and I want
74:02 - the other bubble to be at 400 comma 200
74:04 - and I wanted to have a radius of 20 now
74:07 - one of the weird things about Java
74:08 - Script is again it just wants to work so
74:12 - I could add I'll add that and I could
74:15 - run this code and I don't know what it
74:20 - still works it doesn't actually the same
74:21 - thing so those numbers go nowhere but
74:23 - the idea is just like if you watch my
74:26 - video about passing arguments to a
74:28 - function I can pass arguments to a
74:32 - constructor and if I do that what I want
74:35 - is for the constructor to receive those
74:38 - arguments so if I'm giving it three
74:40 - arguments 200 240 I need to define the
74:43 - constructor with three parameters I
74:46 - think I'm getting this right these are
74:49 - the arguments the values the things that
74:51 - are passed in these are the parameters
74:54 - the variables that go inside the actual
74:57 - definition of the function in this case
74:59 - the constructor so I'm going to add an X
75:00 - a Y and an R so I'm gonna say this x
75:05 - equals x this dot y equals y and you
75:07 - know what I'm gonna create a new
75:08 - variable called R this dot R equals R
75:12 - and then in draw I'm going to actually
75:15 - say I almost just type R times to almost
75:19 - just type r times 2 I need to say this
75:21 - dot and actually in p5 with the ellipse
75:23 - function if you want the with the
75:25 - diameter along the width and the height
75:27 - to be the same I don't only need one
75:29 - value so now what I should do right if I
75:33 - run this we can see I should be making
75:35 - two bubbles with different starting
75:37 - locations and a different radii radius
75:40 - so look those starting at the right
75:43 - location
75:44 - sighs looks the same what did I get
75:46 - wrong here uh hmm missing semicolon
75:51 - 40:20 list our times - you really should
75:57 - be different right oh they are I don't
76:00 - know I just probably forgot to save hold
76:01 - on pause I have to sneeze little mute
76:12 - myself for a second call okay
76:37 - so I'm very yes and so all right so this
76:43 - is the part that I need to and I agree
76:45 - with me I am Sabina saying prototypical
76:47 - inheritance is a headache and so that's
76:48 - why I like this is less for me using
76:50 - classes instead of the other way of
76:51 - doing this at javascript is less of a
76:52 - headache that's entirely the reason okay
76:57 - so I did just blow my nose I feel like I
77:00 - have to sneeze again maybe a cold is
77:02 - coming on I don't even know where I put
77:04 - my tissues they're over here I feel bad
77:06 - for everybody's watching this and it is
77:09 - a two thirty yet nope okay so uh now I
77:14 - remember what I want to say okay so you
77:22 - might be looking at this and thinking oh
77:23 - god this is like the most awful thing
77:25 - I've ever seen you mean those variables
77:28 - X the same as the Vista X and and
77:32 - actually if you look at some my examples
77:34 - in previous programming environments
77:35 - that I've used I often will do something
77:38 - called this temp X temp Y this is one of
77:41 - the most confusing aspects of
77:42 - programming with classes and creating
77:45 - objects and then this would have to be
77:47 - temp X right that would have to beat my
77:49 - intent are is that these variables
77:52 - inside the constructor they're temporary
77:54 - local variables just for the sole
77:56 - purpose of receiving the value and
77:58 - quickly passing it to the variable that
78:00 - counts so this dot X is the variable
78:02 - that counts it's actually the thing that
78:03 - I'm going to use to keep track of where
78:04 - the object is and draw it and move it
78:06 - but I I can't access it directly from up
78:09 - here I mean the ways that I could but
78:12 - they would be weird and they wouldn't
78:13 - necessarily be make any more sense so I
78:16 - want this 200 to go into this dot X I
78:18 - need something to temporarily receive it
78:21 - like 10 max and then quickly pass it to
78:23 - X so but I maybe I have a bad habit but
78:26 - I like I actually just like to name
78:29 - these the same name because I know that
78:31 - which ones which by whether there's a
78:33 - Vista or not but you will see that
78:37 - conventions like this or name them with
78:39 - an underscore or an underscore after or
78:43 - with a temporary you know you can come
78:46 - up with your own style but it's
78:47 - important rods that these are all just
78:48 - things I've made up
78:49 - like unicorn fluffy rainbow and this
78:56 - code which you know in many ways has its
78:58 - advantages unicorn I'm gonna just play
79:01 - this whole thing out
79:02 - fluffy rainbow just to prove the point
79:06 - here this works as well the same exact
79:10 - result the question is what kind of
79:12 - variable naming convention makes sense
79:15 - to your brain and being consistent kind
79:18 - of helps in there are you can follow
79:19 - other people's conventions and styles
79:21 - but I would say there are no real rules
79:22 - here and if you want to name your
79:24 - variable unicorn fluffy rainbow pink
79:27 - fluffy unicorns jump whatever it is I
79:30 - got it wrong but 12-8 unicorn is not
79:32 - fluffy rainbows but you should make a
79:34 - fluffy or somebody make a fluffy rainbow
79:36 - p5.js sketch it's gonna be awesome to
79:38 - share with me okay so I got a little off
79:41 - track there but the point of it is
79:44 - whatever I do whenever I put in here
79:47 - I say bubble 200 it gets sent all the
79:52 - way to the constructor definition some
79:55 - variable it's like saying let x equal
79:58 - it's like I'm initializing X with this
80:00 - value 200 it goes in here and this just
80:02 - if I have this here exists solely to set
80:05 - this value so that I can use it later so
80:08 - that's the real purpose of these
80:09 - template constructor parameters to
80:12 - receive arguments and pass them to
80:14 - variables of course you can use them in
80:15 - all sorts of other ways you don't have
80:16 - to follow this exact design pattern but
80:19 - it is kind of a typical standard one so
80:22 - if you're watching this video what I
80:24 - would suggest to you is see see what
80:26 - else you can add to this can you add a
80:28 - color what's the difference between
80:30 - making the color random for every bubble
80:32 - versus initializing each bubble with the
80:35 - color of what other properties can you
80:37 - add to this play around can you add
80:38 - another function like can you add a
80:40 - function called like edges that do
80:43 - something when the bubble reaches the
80:44 - edges is this even really a bubble what
80:46 - does it mean to be a bubble if we answer
80:48 - that question I don't think so so try to
80:49 - add your own constructor arguments at
80:51 - additional constructor arguments and see
80:53 - what questions you have and let me know
80:55 - thanks very much for watching
81:02 - all right yeah I'm just look I'm taking
81:11 - a break now looking at the chat did I
81:16 - actually kind of finish object-oriented
81:18 - program I mean just blenny more to it
81:21 - you know what this wasn't actually a
81:23 - good reference this because I did this
81:27 - so weirdly I feel like when I made these
81:29 - video tutorials in JavaScript and it's
81:32 - kind of like this oak so yeah cuz so the
81:34 - next thing is really the array stuff I
81:36 - don't necessarily feel like getting into
81:38 - that today so what I'm curious what it
81:42 - did I include the other the other
81:45 - relevant playlist here which is actually
81:47 - probably more is the learning processing
81:51 - one and if I go to object-oriented
81:56 - programming so this is Rho this is from
81:59 - this is from even longer ago like I have
82:04 - like no gray hair in this I'm wearing
82:11 - different glasses I mostly look the same
82:13 - though anyway I look much stronger I'm
82:17 - like the rock in this picture right now
82:19 - I'm just like spindly man okay
82:22 - I'm not serious okay so defining a class
82:26 - part one part two constructor arguments
82:28 - more on objects passed by value passed
82:31 - by reference what's in more on objects
82:35 - what did I do in this video covers
82:38 - objects is data for other objects
82:40 - overloading and authors communicating
82:41 - with other objects okay so I think in
82:47 - JavaScript you overloading it can I I
82:50 - kind of feel like it's 210 it's weirdly
82:53 - like how am I going this so fast I'm
82:55 - always running out of time I'm like it
82:57 - feels a little off that I'm not running
82:58 - out of time
83:01 - so what what I'm looking at this don't
83:10 - forget kittens yeah
83:12 - so I'm trying to think so this
83:15 - overloading thing is let me go back here
83:17 - I don't want to publish the code with
83:19 - this so what's interesting and maybe I
83:23 - guess I could do a video about this
83:24 - right now
83:25 - why not so the things that I need to do
83:29 - our objects talk more about odd let me
83:32 - make a list and I be curious to hear
83:38 - feedback especially in the slack group
83:41 - about what might follow next so one
83:44 - thing is objects like intersect other
83:50 - objects I mean talking to other like
83:52 - objects communication between objects so
83:54 - writing a function where you pass one
83:56 - object to another another is a this idea
83:59 - of quote-unquote overloading objects as
84:05 - data for other objects
84:12 - that's one inheritance is obviously
84:16 - another getters and setters I don't know
84:18 - that I ever want to talk about that
84:19 - getters and setters this is kind of like
84:21 - public versus private public versus
84:25 - private and inheritance and polymorphism
84:30 - so I definitely want to do inheritance
84:32 - at some point I definitely want to do
84:35 - objects talking to other objects and
84:38 - overlook all this stuff would be useful
84:40 - at some point so the question is you
84:43 - know today my goal is to get through
84:44 - this introductory stuff which I actually
84:45 - feel pretty happy about that I got
84:47 - through even though I botched the first
84:49 - video hopefully it can be corrected and
84:57 - so but I could do one more before I'm
84:59 - gonna do a recursion coding challenge I
85:04 - could also do a partner but I need to
85:07 - teach arrays before I do a particle
85:08 - system coding challenge I don't need to
85:10 - teach them because I can just do that
85:11 - and then cuz I'm gonna do the arrays
85:13 - eventually
85:17 - [Music]
85:18 - Pauline right do these classes have the
85:22 - Gotcha that they have to come higher in
85:23 - the code and the code that calls them
85:25 - not really as long as the whole page is
85:28 - loaded before you try to use any of it
85:30 - if those classes have been defined
85:32 - somewhere you'll be fine
85:35 - do a strawpoll I don't know why I'm not
85:38 - really feeling like doing the straw poll
85:39 - today I think I should leave this and
85:47 - come back to this stuff can somebody
85:50 - write this out for me in a list and like
85:54 - tweeted at me or something or I'll save
85:56 - it for later I think that I want a a
85:59 - little bit of like quit while I'm ahead
86:01 - today let me so many people are asking
86:04 - about the overloading I don't know if
86:05 - I'll eventually just make a video about
86:07 - this but cuz I need to think about this
86:09 - is a little bit not so friendly towards
86:11 - beginners but I don't know though people
86:17 - are gonna see this maybe I should just
86:18 - do the overloading what did I say I did
86:21 - again in this video maybe I could do
86:22 - this more on objects objects is data for
86:25 - other objects overloading and object
86:27 - communicate with other objects how long
86:28 - is this video I somehow did that in like
86:36 - this is in 13 minutes and it's 2:15 and
86:46 - this was made more recently by the way
86:48 - you can tell by the gray-haired stop it
86:54 - amuses me
86:55 - I don't please don't watch me do this
86:59 - strawpoll recursion but okay Simon is
87:02 - making a good suggestion I'm gonna do
87:05 - this recur uh what do you think
87:11 - recursion now more on objects first
87:21 - so here you go you have approximately
87:27 - one minute to vote on this and I'm going
87:32 - to answer some questions
87:33 - Ricardo asks when are you going to
87:35 - continue neural networks as soon
87:37 - unfortunately right now I am I feel like
87:40 - I should turn this volume down
87:45 - maybe the volume is actually fine but is
87:48 - I'm hearing it too loud the what was the
87:55 - question
87:56 - oh right now I'm trying to do videos for
87:59 - the courses I'm currently teaching and I
88:01 - was when I was started these internal
88:02 - network videos teaching about neural
88:04 - networks and then I had bicycle accident
88:06 - yada yada yada I'm behind on it so as
88:08 - soon as I can get a break and some time
88:10 - where I can kind of get back to it I
88:12 - will and I'm hoping that'll be before
88:14 - the end of 2017 but it will 100% know
88:19 - 90% be January 2018 if I don't get to it
88:25 - before the end of this year I think I
88:26 - will Danko's make a good point that I
88:31 - won't listen to what the straw poll is
88:32 - which is kind of true
88:34 - [Music]
88:38 - all right so I think that was a minute
88:42 - problem is you guys are behind me in
88:44 - time
88:45 - so did I really give you a minute I
88:48 - don't know if I did
88:56 - I think I should do the recursion
88:57 - challenge now by the way oh good looks
89:02 - like alright so I'll come back to the
89:04 -  objects and I'm gonna do the
89:08 - recursion challenge now I'm just going
89:10 - to refresh the results refresh the
89:12 - results looks like it's only going up so
89:13 - that's what we're gonna do so I'm gonna
89:15 - I don't I don't know that this is as
89:16 - great as I don't know if anything can
89:22 - ever be as wonderful as that 10 Fred
89:24 - coding challenge I just feel like that's
89:26 - gonna be the epitome of everything I
89:28 - ever tried to do that's the wrong war
89:30 - but let's do recursion so I'm going to
89:41 - why am i losing what and this way also
89:44 - there's no risk of me not getting to it
89:47 - because the time is running out and I'm
89:51 - just gonna put it in this folder
89:56 - P 5 generate - B if you're wondering by
89:58 - the way I've started using this tool
90:00 - called p5 manager that I made a video
90:01 - about people I've generate - B+ I need
90:05 - to read some random numbers hello p5
90:08 - generate - B recursion and um I can go
90:16 - into Adam here and I have recursion and
90:19 - again I know there's a way in p5 manager
90:21 - for me to change the template but I
90:23 - absurdly prefer to just manually do it
90:34 - so let me just get this started here let
90:37 - me go back to the browser and go back
90:40 - kerschen let me minimize this and now
90:45 - one thing I do need to do is uh and I
90:49 - think you know with all this new classes
90:53 - and objects in JavaScript we definitely
90:55 - need so I need to erase the whiteboard
91:02 - oh okay
91:18 - I'll get some screenshots oh I should
91:31 - probably redo that constant video maybe
91:36 - my apology is it good enough okay woo
92:11 - good thing this arm works okay here we
92:21 - go
92:26 - recursion I know I already did the Const
92:29 - video but I feel like I just like kind
92:31 - of screwed it up but I feel like I
92:32 - should redo it right okay what's theirs
92:36 - that recursion joke but I don't remember
92:38 - what it is you know the recursion joke
92:48 - actually so first of all whoops I think
92:55 - I'm realizing like didn't I okay well I
93:01 - did it for a nature of code and then I
93:03 - think only I've only done it in
93:05 - JavaScript these like trees and that was
93:08 - kind of more complicated than what I'm
93:10 - gonna do now
93:10 - and that was coding challenge 14 so
93:14 - let's do it again anyway then I'll read
93:21 - some random numbers I know that's what
93:23 - you all really tuned in for it okay all
93:33 - right yes loops versus recursion that's
93:36 - it's simply gonna be a piece of this so
93:39 - here we go
93:40 - today's coding challenge is about
93:42 - recursion I'm going to make a really
93:45 - simple design of recursion it's not my
93:49 - own design it comes from processing
93:51 - examples I would have to look time out
93:58 - this is so silly that I'm doing this
94:00 - right now but
94:06 - this is basically what I want to do
94:07 - there's no credits to this okay but I'm
94:10 - gonna do it slightly differently anyway
94:16 - hello welcome to today's coding
94:19 - challenge about recursion so I'm gonna
94:22 - make an incredibly simple p5 GS sketch
94:26 - with recursion in it it's not gonna be
94:28 - the most beautiful thing it's not even
94:29 - really my own design it's just based off
94:30 - of a processing example that's been
94:32 - around for many years but recursion is
94:35 - the key it was a key principle behind
94:37 - the fractal geometry of nature so I have
94:39 - been Wat Mandelbrot seminal book on
94:41 - fractals here the fractal geometry of
94:42 - nature I have lots of videos about
94:44 - fractal trees and nature of code video
94:47 - style this is a thread of you know
94:49 - fractals being this self similar shape
94:52 - that exists in nature if you think about
94:54 - a tree a tree is a trunk that has
94:56 - branches and those branches have
94:58 - branches and those branches up branches
94:59 - and those branches have branches this is
95:00 - recursion this is self-similar shape the
95:03 - site well that's that's not a recursion
95:06 - ah remember I said I wasn't gonna start
95:09 - over and I my nose is running this is
95:14 - i'ma give me one more shot please
95:20 - YouTube shut down much should be allowed
95:23 - to be here
95:24 - Oh
95:27 - tail recursion and how it's now super
95:30 - efficient in j/s okay that'll have to
95:32 - come another time alright one more time
95:34 - I'm just gonna start over hello welcome
95:38 - to a coding challenge this is a coding
95:40 - challenge about recursion recursion is a
95:43 - technique it is actually a concept about
95:46 - self reference recursive function is a
95:49 - function that is defined according to
95:50 - itself this is what I'm gonna do in this
95:52 - coding challenge what does that even
95:53 - mean but I'm the reason why I want to
95:56 - show you recursion is the key concept
95:58 - behind the fractal geometry of nature so
96:00 - I have here benoit mandelbrot seminal
96:02 - book on fractals the fractal geometry of
96:04 - nature I have a wonderful book I
96:06 - encourage you to if you're interested in
96:07 - this subject it's it's the it's the
96:09 - beginning of everything in terms of this
96:11 - subject so I encourage you to take to
96:13 - get it for yourself or borrow it from
96:15 - the library and I have a lot of other
96:17 - video
96:18 - you can all link to them in this video's
96:19 - description I made fractal trees nature
96:23 - of code tutorials about fractals
96:24 - fractals being a self-similar shape a
96:28 - shape that's kind of made up of itself
96:29 - recursion is this concept of self
96:31 - reference a recursive function is a
96:33 - function defined according to itself so
96:37 - it's a really elegant way of creating
96:39 - patterns I I'm gonna do that right now
96:42 - I'm gonna make a really simple one it's
96:43 - just basically the I'm gonna build the
96:45 - example that's been in processing for
96:47 - many years or something like it from
96:49 - scratch it's
97:02 - from scratch and okay wait what was I
97:07 - lost my train of thought was gonna say
97:08 - next um from scratch and then you I've
97:11 - been so enamored with the previous ten
97:13 - print coding challenge which it was a
97:14 - simple bit of code and what people made
97:15 - from it so I'm hoping that the same
97:17 - thing is gonna happen I don't know what
97:18 - the hashtag should be hashtag coding
97:23 - train recursion some people come up with
97:25 - something better
97:25 - ten pretty I would say recursion but
97:27 - that's just recruiting I don't know the
97:28 - point is share all the things you make
97:31 - on Twitter and also in the readme file
97:33 - that'll be on github link from this
97:35 - video's description so let's get started
97:36 - so I'm gonna start with some really
97:39 - simple code I have a sketch which makes
97:41 - a canvas that's 600 by 400 I am just
97:44 - going to draw in the middle of the
97:46 - canvas an ellipse and it's going to be
97:49 - at 300 comma 200 and it's going to be
97:53 - 300 pixels wide and 300 CIL's high I
97:55 - always forget this but with ellipse if
97:58 - the width and height are equal I can
98:00 - just use one argument and there it is ah
98:03 - now one thing I want to do about this is
98:05 - I want to say stroke 255 and no fill so
98:11 - let's say for the sake of argument what
98:13 - I want now is to repeat this pattern I
98:15 - want this ellipse then another ellipse
98:17 - then another ellipse then another lips
98:19 - and they're shrinking as they move off
98:21 - to the right well the typical way that I
98:23 - would do that is with a loop structure a
98:25 - while loop or a for loop this is a
98:27 - control structure that allows you to
98:29 - repeat code like drawing ellipse and
98:31 - change what's happening each cycle
98:33 - through the repeat but I'm gonna do it
98:35 - in a different way recursion is much
98:38 - recursion a recursive function executes
98:41 - with a loop unto itself but it's a
98:43 - slightly different way so let me keep
98:44 - going with this and I'm gonna say what
98:48 - if I wrote a function almost absurdly
98:50 - just called draw circle and that
98:52 - function I just put this ellipse in it
98:54 - and what I said is let me give it an X a
98:57 - Y in a diameter and so I'm gonna draw
99:00 - the ellipse at X Y damnit diameter and
99:02 - then I'm gonna set call say draw a
99:03 - circle at 300 200 300 so this is like a
99:09 - totally like absurd thing that I've done
99:12 - the code runs exactly the same right
99:15 - this is the same what I've done is
99:16 - basically redefined the ellipse function
99:19 - and give it a different name and then
99:20 - call that so this seems kind of
99:22 - ridiculous but there's a reason why I'm
99:24 - doing that what would happen now just
99:26 - bear with me for a second what would
99:28 - happen if right in here I said hey draw
99:31 - another circle at X plus I don't know 20
99:35 - Y D so this is now this idea of
99:41 - recursion I'm defining draw a circle
99:44 - according to itself so when I execute
99:46 - draw a circle it draws an ellipse then
99:48 - calls itself so it draws an ellipse then
99:49 - calls itself so it draws an ellipse then
99:51 - calls itself so it draws an ellipse and
99:53 - calls itself I'm gonna stop this
99:54 - eventually drops calls itself this could
99:57 - result in an infinite loop so I need
99:59 - some way just like with a for loop or a
100:02 - while loop I need to make sure I have an
100:03 - exit condition so if this function is
100:05 - going to recursively and you know this
100:07 - way it looks like something you're not
100:08 - supposed to do right you can't call the
100:10 - function from inside the function but in
100:12 - fact this is a technique that happens in
100:15 - many algorithms require this kind of
100:17 - recursive thinking what I'm doing right
100:18 - now does not require this cursive
100:19 - recursive thinking I could probably do
100:21 - this more easily in a for loop but in a
100:23 - moment I'm gonna do something else that
100:25 - a for loop wouldn't really work as well
100:26 - for so here we go I'm gonna give myself
100:29 - an exile weirdly let's just see what
100:31 - happens do I crash my browser yeah you
100:34 - know what so what happened is I got this
100:36 - error
100:36 - fortunately the browser was like smart
100:38 - enough to say like yeah yeah hey hey
100:40 - there buddy you are calling yourself way
100:44 - too much stop so it's a maximum call
100:47 - stack size exceeded in blah blah blah
100:49 - like draw circle circles wrong this is
100:51 - bad so it stopped but you could see I
100:53 - did have this result of it doing itself
100:56 - over and over again so I could add an
100:57 - exit condition and say well only
101:00 - actually only actually call yourself if
101:03 - X is less than width so if X is changing
101:09 - right so keep going until you get to the
101:12 - edge and now I could do this again and
101:14 - there's it stopped right but this is not
101:16 - what I want to do actually what I want
101:18 - to do I want to move but I also want to
101:21 - shrink the diameter so with each new
101:24 - ellipse I
101:25 - want the diameter to shrink so we can
101:29 - see that's happening here the diameter
101:30 - shrinks by half and I also want to do
101:33 - something where I move it according to
101:36 - half of the diameter so so now I'm
101:41 - moving each ellipse over according to
101:42 - the radius and shrinking which is half
101:44 - the diameter and shrinking it by half so
101:47 - there we go
101:48 - oh and I got the so I got the call thing
101:51 - so now I need to use as long
101:53 - keep doing this as long as D is greater
101:55 - than 2 whoops
101:58 - as long as D is greater than 2 not less
102:00 - than so there we go so now we see I have
102:03 - this ellipse that's moving to the right
102:05 - that's moving to the right that's moving
102:07 - to the right now let's think about this
102:08 - for a second so what I have remember
102:11 - what I have is an ellipse with a smaller
102:14 - one and a smaller one and a smaller one
102:16 - in a smaller one that's what I have now
102:19 - you might think well what if I want to
102:21 - also have the ellipses going to the left
102:24 - so I could pretty easily do that and I
102:26 - could have two for loops or one for loop
102:28 - that kind of grows and shrinks but what
102:30 - if what I really want is to say this is
102:32 - not an ellipse a circle with circles to
102:35 - the right and the left what it means to
102:37 - be a circle is to have a circle to the
102:40 - right and the left so this circle also
102:42 - needs a circle to the right and the left
102:44 - but then this one needs one to the right
102:45 - and left oh and this one needs to the
102:46 - right and left and this one needs to the
102:47 - right and left right and left right and
102:49 - left oh but this one right up this goes
102:51 - on forever this is this idea of
102:53 - recursion a fractal a self-similar shape
102:56 - if i zoom in on any given portion it's
102:59 - going to look like the whole the whole
103:01 - shape itself and this is a chute what's
103:06 - the term for that stochastic is what
103:08 - it's random but this is the I guess it's
103:10 - not stochastic uniform somebody in the
103:14 - chat will tell me give myself a break
103:17 - here for a second how are we on time
103:22 - 2:30 it's like the time of building so
103:24 - slowly today self some a deterministic
103:31 - heuristic no beautiful ok whatever
103:34 - I guess maybe there isn't a term for it
103:37 - stochastic if it's random
103:38 - but this is a perfectly self-similar
103:43 - fractal where every piece of it is
103:46 - exactly the same but one thing you would
103:47 - think about you could build a little
103:48 - randomness into here and that's actually
103:50 - referred to as a stochastic fractal and
103:52 - something like lightning would be that
103:54 - if you look at lightning right it's kind
103:58 - of all this like or blood vessels or
104:00 - trees but not every piece of it is
104:02 - exactly the same but the kind of idea of
104:04 - it is the same Wow
104:05 - also a little tangent there let's
104:07 - actually make I wanted this to make this
104:08 - happen
104:08 - so let me come back in here so now right
104:11 - this is what I have and so now what I
104:13 - can do right is I can say hey why don't
104:16 - you only draw a circle to the right and
104:19 - to the left
104:20 - now I double dog dare you with the
104:22 - cherry on top and some non-dairy whipped
104:25 - cream low fat not low fat you got
104:27 - supposed to do low fat anymore anyway I
104:29 - dare you to try to recreate what I'm
104:31 - just gonna show you right now
104:32 - without recursion somebody will do it
104:34 - and my mind bull-like explode but it's
104:36 - this is the this is just like one two
104:39 - three four five six seven lines of code
104:41 - that's going to do something kind of
104:42 - phenomenal there we go so this is the
104:45 - result right it's not just circles to
104:47 - the right and left but it's circles look
104:49 - at this zoom in that looks just like
104:51 - what I drew zoom in this looks just like
104:54 - right now I'm zooming using the zoom
104:56 - feature of the Mac I'm using a Mac but
105:00 - could you actually draw zoom use scale
105:03 - or some other kind of trickery to like
105:05 - do this sort of like infinite zoom into
105:07 - the fractal could you animate this don't
105:09 - draw circles use color there are so many
105:12 - possible things you could expand on from
105:14 - here you know just to like keep going
105:16 - for another minute or two I could do
105:21 - them all so oh I could say hey put some
105:24 - circles down right y plus D times 0.5
105:31 - and let me make the canvas a little bit
105:35 - bigger and look at this now what's crazy
105:37 - about this is oh my god I can't believe
105:39 - this has happened
105:42 - this is actually called the sierpinski
105:44 - triangle which formed out of all these
105:47 - circles which is a triangle filled with
105:49 - other triangles filled with other
105:50 - triangles for your electrons
105:52 - that's a fractal you could try to make I
105:53 - mean I mean this sort of weird
105:54 - roundabout way by putting all these
105:56 - things next to each other so what if I
105:58 - have them go up what if I have them only
106:00 - go to the right and down like this is
106:02 - like now I'm just too curious I'm gonna
106:04 - take out to the left so this is to the
106:07 - row that's kind of blue it's like the
106:08 - fractal thing on its side there are so
106:10 - many possibilities here so I want to
106:14 - think like so couple things one is this
106:16 - is now executing over and over again but
106:19 - I'm not doing anything to animate it you
106:21 - know I could kind of like give the
106:24 - initial size to like Mouse X so you can
106:26 - see it's kind of like I'm zooming in and
106:29 - out in a way and interestingly enough
106:31 - but so so there's a there's a lot of
106:34 - things I could do to animate but I'm
106:35 - gonna add no loop right now because I
106:37 - also want to show you you know if I were
106:40 - to add just a little bit of randomness
106:41 - into this let me go back to the original
106:43 - one but for example what if I said let
106:47 - new D and did I use var no I didn't have
106:50 - I don't have a variables yes let new D
106:53 - equals D times random you know 0.2 to
106:56 - 0.8 and so now I'm gonna say Plus nu D
107:02 - divided by 2 so I could use put some
107:04 - randomness in here I don't know what
107:06 - this is gonna do this is probably a bad
107:08 - idea for some reason I can't think of
107:09 - just yet and you can see I don't know
107:13 - that so this was I don't love what I got
107:15 - came up with here but you know every
107:19 - time I do this it's gonna give me a
107:20 - slightly different version of it it's
107:21 - not perfectly this is a stochastic
107:23 - fractal the quality of how the shape is
107:26 - repeating itself similar and somebody's
107:29 - telling me to do D times 0.25 in the
107:32 - chat Bay that's going to create a more
107:34 - interesting pattern but this so and
107:37 - again I have discovered from doing the
107:39 - 10 print coding challenge that the
107:40 - viewership of these videos is way more
107:42 - creative and has so many beautiful
107:44 - design ideas than I do so I really just
107:46 - need to stop because I don't have any of
107:48 - those ideas but I'm trying to show you
107:49 - some possibilities here so I am going to
107:52 - just do one other
107:53 - which is I'm going to take this and make
107:55 - this 0.25 which somebody in the chat was
107:57 - telling me to do oh yeah so that's kind
108:00 - of cool
108:01 - wait wait wait let me make the first
108:05 - circle bigger oh but maybe I need to oh
108:09 - but now I don't want to go over by / -
108:12 - no yeah so that's interesting why make
108:15 - crazy weird recursive eyes anyway see
108:17 - I'm terrible at this
108:18 - so have fun make some parameters make
108:21 - some color choices make some design
108:23 - choices share with me on Twitter hashtag
108:25 - recursion code e-trade Oh somebody I'll
108:29 - pin a comment what the some people come
108:31 - up with a good hashtag idea and I'll pin
108:33 - it to the top of the comments and also
108:36 - contribute to the readme and I'll show a
108:38 - bunch of people's recursive designs on
108:39 - next week's coding train which will be
108:42 - next week okay talk to you soon thanks
108:43 - for watching all right another direction
108:52 - up that would have been good okay so
108:54 - look at this it's 237
108:57 - I almost weirdly am disturbed by the
108:59 - fact that I have extra - so many things
109:01 - are wrong with today number one is that
109:03 - livestream never crashed number two is I
109:06 - think to be on schedule I did draw
109:09 - outside of the I did draw outside of the
109:13 - view for a while and I did have my
109:15 - microphone unit at the beginning
109:16 - otherwise I'm doing pretty well ah let
109:19 - me mention one thing I know this is the
109:21 - end I should have mentioned this at the
109:22 - beginning but here at NYU whoops we are
109:28 - starting a new program called
109:30 - interactive media arts it's an
109:32 - undergraduate program to do stuff in
109:35 - creative coding sphere in a much wider
109:38 - broader space than the stuff that I even
109:41 - just do on this channel if you're
109:43 - interested or thinking about applying if
109:45 - you're a high school student right now
109:46 - if you're a high school senior reach out
109:48 - to me directly please I'm at Schiffman
109:50 - on Twitter or some other means the PI
109:54 - Twitter is the best way I'm happy to
109:55 - answer your questions
109:56 - check out the open houses um this is a
109:59 - new program it's ready next year we're
110:00 - kind of wondering if anybody's gonna
110:02 - reply so I would apply so I have at
110:04 - least like to know if
110:06 - thinking about applying so because I'm
110:08 - curious and I think there's an early
110:09 - decision deadline coming up and then of
110:12 - course there's the regular deadline so
110:14 - let me know I would love to see some of
110:15 - you here I'm going to teach us part of
110:18 - this program supposedly if I don't get
110:20 - fired before then or if I you know maybe
110:23 - they'll just lock me in this room and
110:25 - I'll just be a 24 hour stream ah and now
110:26 - it's time for everybody's favorite part
110:29 - of the coding train storytime oh let's
110:41 - read some Gaussian deviance so dangerous
110:47 - two point three four to one point seven
110:51 - six six two point one one two well those
110:54 - are negative two points I don't know why
110:57 - I read to the side it's weird
111:00 - point four one eight point four OH three
111:03 - negative point five five six point two
111:06 - four two two point six one oh one point
111:12 - six one five point six seven negative it
111:18 - was and two point four two three I'll
111:22 - have to do more point one seven nine one
111:25 - point three one three negative point
111:27 - seven one nine point seven six and three
111:30 - point five nine one point four seven our
111:33 - negative point three one
111:39 - okay hey good night everybody
111:43 - and I'm here I can answer a few more
111:49 - questions I'm gonna be here for another
111:52 - four or five minutes cuz I apparently
111:54 - like some strange bizarre Oh Dan
111:57 - starting I didn't really start on time
111:58 - but I was only like three minutes late
112:00 - and I kind of made some videos and it's
112:01 - only two hours like last week I should
112:03 - fly straight for four hours and was like
112:05 - a mess okay
112:07 - I'm from Brazil and I make some videos
112:09 - about Python I was making challenge
112:11 - videos if this thing you created no no
112:13 - okay so this is a great question thank
112:15 - you for asking everything that I I'm not
112:18 - so good about being explicit about the
112:22 - sort of licensing of the materials that
112:24 - I produce here on the coding train 100%
112:26 - all of it well I mean I never say one
112:28 - percent but it's my intention for all of
112:31 - the code that I do in my tutorials and
112:33 - challenges to be MIT license which is
112:35 - the most permissive license I also am
112:38 - thrilled when people do things inspired
112:40 - by the videos so if you want to make
112:41 - your own videos redoing the challenges
112:43 - or I think the thing people do is like
112:45 - reaction videos but anything that
112:48 - remixes my content you are absolutely
112:51 - welcome and encouraged to do so if I'm
112:53 - using somebody else's stuff I try
112:56 - whenever possible one of the things that
112:58 - I really struggle with is that things
113:00 - get misattributed to me so like for
113:02 - example I did the ten print coding
113:03 - challenge because I love this book and
113:05 - then people you know you might get lots
113:07 - of I said this is the beginning but like
113:08 - oh then invented tendrá nobody actually
113:11 - said that but you know and this happens
113:14 - a lot with flocking I mean I've made a
113:16 - lot of examples of flocking simulations
113:18 - and all of my examples are based on the
113:19 - work of Craig Reynolds and you know I
113:22 - didn't discover processing myself I
113:24 - discovered processing because other
113:26 - people like I meet potaro and JT Nimoy
113:28 - or we're doing workshops at ITP about
113:30 - processing so yes I have this public
113:32 - face of this channel I try to you know I
113:35 - always you know number one there's
113:37 - actual rules and laws about copyright
113:39 - and licensing I try to follow those but
113:42 - I also just try to overdo it and be
113:43 - generous with thanking and giving credit
113:45 - where credit where the things I do come
113:47 - from so please do your own challenges
113:49 - share them with me put them on
113:50 - YouTube etc that book does exist for
113:55 - real so if you think about this why does
113:57 - this book exist so there are lots of
114:00 - types of things that you might want to
114:03 - study about the way how the world works
114:06 - that you want to stimulate that involve
114:09 - randomness and you might need a sequence
114:11 - of random numbers this could be referred
114:13 - to often as a Monte Carlo simulation and
114:15 - so yes and Simon is doing this it what
114:22 - Simon's videos on YouTube but really
114:23 - that's only 8:40 so I was gonna go to
114:25 - bed at normal time do I talk about Simon
114:27 - too much Simon you're the greatest do
114:30 - you want me to stop mentioning your name
114:32 - okay so why is this book exists so this
114:38 - book is from the RAND Corporation pre
114:40 - the times where we just had like a
114:42 - computers with pseudo-random number
114:43 - generators on them and if you needed a
114:45 - sequence of random numbers to do some
114:47 - type of scientific study
114:48 - you couldn't just like make them up
114:50 - because it's very hard for a human being
114:51 - to come up with random numbers you could
114:53 - flip coins for a while perhaps you'd get
114:55 - some kind of like thermodynamic heat
114:56 - gastrulation and measure it and would
114:58 - produce randomness but this is a book
115:00 - that people used just to look up and
115:02 - have a sequence of random numbers for
115:04 - some type of research so this is a
115:07 - reprint this isn't theory I would love
115:09 - if an original of this book exists that
115:11 - I would like on eBay or something I
115:13 - would you know within reason pay a lot
115:16 - to get an original copy that this is a
115:19 - reprint and I think you could get this
115:20 - on Amazon I should love to have like a
115:23 - coating trade book that was like I know
115:27 - that doesn't make any sense
115:28 - can you make something about voxels and
115:31 - Kenya makes more stuff with 3d so I
115:34 - don't do a lot with 3d let me one thing
115:37 - I do want to mention though I would like
115:39 - to do more tutorials about 3d especially
115:41 - this semester when it comes up in my
115:43 - class twitter.com slash p5.js go p5 XJS
115:51 - is the Twitter account so I'm gonna p5x
115:58 - je s and what if I search actually
116:04 - gl okay that's kind of funny um look at
116:14 - all this amazing stuff whoa look at this
116:16 - oh I
116:19 - that is awesome what's that game this is
116:20 - like that game I've played it before
116:23 - it's so cool
116:24 - okay wait I'm finding all my own stuff
116:26 - what I was looking for is here we go
116:31 - this is what I'm looking for actually is
116:32 - to highlight the work of KJ Holland on
116:36 - Twitter and also Stahl Jia who did
116:38 - google Summer of Code and I think I
116:40 - should just go to the p5.js account
116:43 - because I probably I think it tweeted
116:45 - about this
116:48 - come on recently that all this wonderful
116:52 - stuff you should look at all this stuff
116:53 - here we go yes so there's a I feel like
116:58 - there's a blog post on this and I'm just
117:00 - missing and I apologize maybe somebody
117:02 - can find it for me
117:03 - coding math YouTube channel is also
117:05 - great for math of maths of 3d stuff but
117:09 - stal jia and kate KJ Hollin a kate
117:14 - Hollenbach did a ton of work this summer
117:18 - on a WebGL mode and i haven't really had
117:20 - the chance to dig into it and try making
117:21 - some new examples but i'd love to do a
117:23 - new video tutorial about it so you
117:25 - should all thank them for the wonderful
117:27 - work that and and so I would love to do
117:28 - more with 3d and p5.js
117:30 - with this a3 Jas is a wonderful
117:32 - JavaScript library for doing 3d on the
117:34 - web to that I would certainly recommend
117:36 - will learning p5 make me more employable
117:39 - ask Fink bottom and I'm being told it's
117:42 - 247 so I'm gonna go in a second feelin
117:44 - camera I don't know I could get to work
117:46 - I should give it one more try
117:48 - okay turn it off on anyway
117:53 - I don't know here's the thing learning a
117:57 - particular framework or library or
118:00 - language like learning node or learning
118:02 - how to make an electron app or learning
118:04 - angular or learning react or learning p5
118:06 - or learning 3j s these things come and
118:09 - go learning how to learn I think is the
118:12 - skill and so trying new libraries
118:14 - playing with them trying to
118:15 - different one comparing and contrasting
118:16 - learning how to contribute learning you
118:19 - have to be part of a community of people
118:21 - building software I think these are the
118:22 - vital skills as opposed to learning a
118:24 - particular technology it's easy for me
118:26 - to say that in the sort of like the
118:29 - world that I live in is having this sort
118:30 - of like full-time job I guess teaching
118:32 - but I do think that this is really key
118:35 - so p5 chess is is really the space that
118:39 - it occupies is place for creative coders
118:42 - and artists and making visual stuff or
118:44 - sketching so you can think of it as a
118:46 - place to learn a place to prototype a
118:47 - place to make animations and games and
118:50 - so it's not as obvious of a link to like
118:54 - doing you know software development for
118:56 - a large company that's gonna build a
118:57 - massive website that involves a database
118:59 - and a server-side framework and all this
119:00 - front flying front-end stuff so there's
119:02 - so many things to learn but I certainly
119:04 - think p5 is a great place to explore
119:06 - creativity and learn about programming
119:08 - and build stuff and so that ultimately I
119:11 - think is something that hopefully can
119:13 - make you employable that's my answer
119:18 - machine 30 yeah make this answer into a
119:23 - video yeah somebody could just tweet me
119:26 - the link to that answer precisely and
119:28 - see if it'd make any sense 3d stuff Oh
119:30 - sell your a lot of people want us to
119:31 - sell your automata a challenge that
119:33 - would be good all right I'm gonna play
119:34 - my goodbye song I don't I know why I
119:37 - call this a goodbye song but it's just
119:39 - some arbitrary thing I found on
119:41 - soundcloud or
119:41 - Free Music Archive once when I searched
119:44 - rainbow I like this old timey style
119:48 - music fazer Dutch yes is great I've been
119:50 - trying to get it hopefully gonna have a
119:52 - guest I've only had more guests do a
119:53 - tutorial about fazer at some point I'm
119:56 - it's really my fault just in terms of
119:57 - like time and the amount of time I have
120:00 - a time it takes to organize guests
120:03 - ceiling camera sorry I don't like I'll
120:06 - try the ceiling camera one more time
120:09 - okay so can we turn it off and on
120:15 - concealing camera settings
120:23 - no settings ah that's it I found it can
120:31 - you see it
120:33 - look hi it's me look into the ceiling
120:41 - camera oh you know I could do that's
120:43 - really this is the look here's my marker
120:47 - these are my hands no feel like camera
120:51 - this is what I do this is what I like to
120:53 - do in the coding training and like to me
120:55 - the idea of having a camera above me
120:56 - ostensibly this is for like hardware
120:58 - tutorials but me I'm just doing
121:00 - ridiculous stuff with it
121:03 - and now what I'm gonna do is I'm gonna
121:05 - be ridiculous and I'm going to add
121:06 - another existing and I'm going to do
121:12 - green Canon and now here I am i greased
121:19 - your baby nose up but let me take off my
121:22 - glasses whoa okay wait uh I have an itch
121:25 - well you know I have some mild psoriasis
121:28 - here on my forehead can you see that
121:29 - does that close-up look I'm kind of
121:33 - going bald and I have a lot of gray hair
121:39 - [Music]
121:40 - [Laughter]
121:45 - okay thank you everybody
121:48 - and see alright so yes it is weird
121:57 - welcome to the weird corner of the
121:58 - Internet and I will see you all next
122:00 - Friday I don't know what time yet
122:02 - usually every Friday morning a New York
122:05 - City time around 7 or 8 or 9 a.m. I try
122:07 - to post a time for the day sometimes
122:09 - it's early like this one as it's later I
122:11 - often try to tweet the day before but
122:13 - it'll sometime next Friday I guess I
122:14 - could try to look at my schedule and
122:15 - determine but that's what it is so thank
122:17 - you everybody for watching I'm gonna
122:19 - just check the slack channel if you want
122:22 - to join the slack group it is
122:29 - lucien bernard if i'm pronouncing that
122:32 - all correctly says i'm a freelance
122:34 - creative coder and processing one of my
122:36 - first experience with the creative
122:37 - coding coding training also helped me
122:39 - get started great and okay
122:45 - so if you want to join the patreon its
122:52 - do i plug this too much i feel like i'm
122:54 - plugging it because people seem to enjoy
122:56 - it and it helps motivate me and you know
122:58 - i use the funds a i don't know if this
123:01 - is a sustainable thing in terms of rocky
123:02 - earning income but i I used the funds to
123:05 - to put back into the videos in a lot of
123:08 - ways and to getting help with doing
123:09 - coding stuff and editing the videos and
123:12 - producing stuff like the crazy trailer
123:14 - which may be fun but I enjoyed it so
123:17 - anyway if you're interested please join
123:19 - okay so thank you everybody
123:21 - and here we go I am going to I don't
123:27 - know where I stopped to stop streaming
123:28 - goodbye
123:30 - and again the edited versions these
123:32 - videos won't come till the middle of
123:33 - next week
123:34 - but the hopefully this actual livestream
123:36 - archive will be up later today or
123:38 - tomorrow or sometime this weekend and if
123:40 - you really need to see it and it's not
123:41 - up you can always tweet me I can send
123:43 - you like a private link of it till we
123:45 - have it released goodbye everybody
123:47 - I can't find the button to stop streak
123:52 - me oh there it is oh thank goodness I
123:56 - recorded this to disk okay hit stop
123:59 - recording uh and you know please do not
124:03 - feel obligated to contribute I enjoy
124:06 - doing this I'm gonna do this anyway the
124:08 - patreon is a bonus for me it really
124:10 - helps out but it is not the reason why
124:12 - I'm not doing videos that you have to
124:14 - buy and there are they are ad supported
124:16 - but just because I want anybody's bill
124:17 - to watch them and I don't know if
124:19 - YouTube is the best place to make that
124:20 - happen and if there's places where
124:22 - they're not accessible or the p5 and
124:24 - computers aren't accessible but if I can
124:25 - help at some part bring coding to places
124:28 - in the world where there where people
124:30 - may not have access to some of those
124:32 - knowledge are tools I hope I'm doing a
124:34 - good job of that okay good bye