00:00 - [DING]
00:01 - Hello, welcome to
another Working
00:02 - With Data and APIs video.
00:03 - And in this video, I'm
continuing the Weather Here
00:05 - Project, and I just
wanted to one thing.
00:07 - One thing.
00:07 - A very important thing.
00:09 - I want to look at how to stop my
API key from just sitting there
00:14 - in my code.
00:15 - I mean, I have something
a little bit better
00:17 - here, which is at least the
API key is in my server code.
00:20 - So no one can go view source
just in the browser page
00:23 - and see API key is there.
00:24 - However, I would like
to open source this.
00:26 - This is a public example
I would like to post.
00:28 - I would like to share it.
00:29 - I don't want that API key just
sitting there in the code.
00:32 - And the way that I'm going to
address this is with something
00:34 - called an environment variable.
00:35 - An environment
variable is a variable.
00:37 - You know about variables.
00:38 - It's just like a
thing I have my code,
00:40 - like const API key equals.
00:42 - The thing is, I don't want
my variable in the code.
00:44 - I want it stored
in the environment.
00:46 - I want it to be something that's
set within the operating system
00:49 - or whatever framework
or system I'm
00:51 - using to run software itself.
00:53 - And I'm just pulling
it in the code.
00:55 - So how do I set environment
variables with node?
00:59 - Ultimately, there's
no one way to do this.
01:01 - A lot of different
platforms will
01:03 - have mechanisms for
storing and retrieving
01:06 - environment variables.
01:08 - And, in fact, when I look in
the next video about deploying
01:10 - your project to a
web server, we'll
01:12 - have to examine,
well, how do I have
01:14 - environment variables saved
on this particular web server?
01:17 - But a nice sort of clean way
I can do it right here locally
01:20 - demonstrated is by using a
node package called dotenv.
01:24 - So I'm going to go
over to terminal
01:25 - and I'm going to say
npm install dotenv.
01:31 - How dotenv works is summed up
perfectly in this one sentence.
01:34 - Dotenv is a
zero-dependency module
01:36 - that loads environment
variables from a dotenv file
01:40 - into process.env.
01:42 - Let me show you exactly
what this means.
01:43 - I'm going to go
over to the code,
01:46 - I'm going to just make
sure I've got it here.
01:47 - Yes, I've got the dotenv package
installed as a dependency.
01:52 - I'm going to go
to my server code.
01:54 - In order for dotenv
to be in action,
01:56 - I need one line of code,
and it's right here.
01:59 - I want to say require
dotenv, and then
02:01 - call the config function.
02:03 - So this is going to tell
this particular server
02:07 - to load anything that's
in a file called dotenv
02:11 - into an environment variable.
02:12 - So now what I need to do in
whatever text editor I'm using
02:15 - is I need to make a new file.
02:17 - And I'm going to call
this file-- guess what?
02:19 - Dotenv.
02:21 - Then this is now
a plain text file
02:23 - where I can put my
environment variables.
02:25 - Typically, you might
use all uppercase
02:27 - for an environment variable,
though I don't know
02:29 - if that's necessarily required.
02:30 - But I'm going to say API key--
02:32 - api_key equals-- I want
to go back to my code,
02:36 - I'm going to grab the API key,
I'm going to go back to dotenv,
02:40 - and I'm going to paste it in.
02:42 - So now I just want to do
one thing now in the server.
02:45 - I want to log console.log
process dotenv.
02:52 - and we should see that anything
that's in the dotenv file,
02:57 - as long as I could require
dotenv call config,
03:00 - will now be inside
of process dotenv.
03:04 - So let's restart the server,
and we can see, oh, boy.
03:08 - Whoa, a lot of stuff.
03:09 - Look there's lots of environment
variables already there.
03:14 - But look at this.
03:15 - I've added one right
here at the bottom--
03:17 - API key.
03:18 - There it is.
03:19 - Which means I can now
go here into my code,
03:25 - and I can change this to
be API key equals process
03:29 - dotenv dot API underscore key.
03:32 - So I can pull this API key
from the environment variable.
03:36 - It's no longer in
the code whatsoever.
03:39 - Let's remove that console log.
03:41 - Let's make sure the
application is still working.
03:43 - I'm going to run the server.
03:44 - I'm going to hit refresh.
03:46 - And looks like I'm still getting
the weather information, when
03:49 - I go look at the check-ins
everything is still there.
03:51 - I check in and I'm still getting
the weather information again.
03:54 - But you might be asking,
how is this any better?
03:59 - Sure, there's no API
key here in the code,
04:02 - it just says process
dotenv dot API key.
04:05 - But you have a file right over
here that has the API key in it
04:09 - right there.
04:10 - And so this is a convention.
04:12 - So it is a convention
for environment variables
04:16 - to be stored either
in a dotenv file
04:19 - or through some other
mechanism based on whatever
04:22 - server you're using.
04:23 - But not to be published
when the code is published.
04:26 - So this begs the question, am I
bothering to publish this code?
04:31 - Is this fine?
04:32 - How do I-- what do I
do when I deploy this?
04:34 - So to some extent,
this is really
04:36 - going to matter
when it comes time
04:39 - to deploy this project to
a web server somewhere.
04:42 - And I'm going to do
that in the next video,
04:44 - and we'll have to revisit
this environment variable
04:46 - question here.
04:47 - But let's just say I just want
to publish this as an Open
04:49 - Source project on GitHub.
04:50 - So why not--
04:51 - [DING]
04:52 - Little extra feature
in this video.
04:54 - This feature is also
about hiding your API keys
04:56 - and then publishing your
project onto GitHub.
04:58 - And I'm going to do it in the
most lightweight, simple way
05:00 - possible.
05:01 - Now, you might be asking
yourself, what's GitHub?
05:03 - What's Git-- those could be
completely unfamiliar things
05:06 - to you.
05:07 - And so I'm going to refer you
in the video's description
05:09 - to some additional
information about that,
05:11 - as well as some video
tutorials that I've
05:13 - made of the basic interaction
to Git and GitHub.
05:16 - So this won't be
comprehensive at all.
05:18 - I'm going to kind of
assume some knowledge,
05:19 - but try to be as
beginner-friendly to you
05:22 - as possible to when walking
you through the steps.
05:24 - So the first thing
that I want to do
05:26 - is actually create another file.
05:27 - I'm actually going to
create two other files.
05:29 - I'm going to make a file,
I'm going to call it dotenv--
05:34 - I'll call it like sample.
05:36 - So because I actually want,
when I published this,
05:38 - to publish a file that tells
you how to put your API key in.
05:42 - And so I'm just going to
say your API key here.
05:48 - So this dotenv sample file
is the sort of sample.
05:52 - It's sort of implying
rename this file
05:54 - to dotenv, and put your
real API key in here.
05:58 - And I could
probably-- in a README
06:00 - or somewhere I would
want to provide
06:01 - more context and information.
06:02 - But this is a nice
starting point.
06:04 - Then I need yet another file.
06:06 - I'm going to create
another file,
06:07 - and I'm going to
call this .gitignore.
06:10 - So this is really important.
06:11 - Git is version
control software that
06:13 - keeps track of all of your files
and various versions of them.
06:16 - What .gitignore
does, it says hey,
06:18 - don't keep track of this file.
06:20 - This is my own
personal secret stuff.
06:22 - I just have it
here on my machine.
06:23 - Don't keep track with Git,
don't upload it anywhere,
06:25 - don't ever use it anywhere.
06:26 - So in order to do that, so
I'm going to create that file.
06:30 - And what's the file
I want to ignore?
06:31 - I want to ignore dotenv.
06:33 - I actually also want to
ignore some other stuff
06:35 - like node modules.
06:37 - I don't want that node
modules directory.
06:39 - This is all of the
other people's code
06:41 - of all these packages.
06:42 - It's a huge amount of stuff.
06:44 - That's not something that I
want to publish and upload
06:46 - when I'm publishing a project.
06:47 - But everything else,
I could presumably
06:50 - maybe ignore the database.
06:51 - Like maybe I don't want
to keep the database,
06:53 - but I don't really care
about that right now.
06:56 - So I'm just going
to leave that be.
06:58 - I kind of want to ignore it.
06:59 - Let's ignore it.
07:00 - This is an interesting question.
07:01 - I'm not so sure whether it
makes sense to ignore or not,
07:04 - but I'm going to ignore it.
07:05 - The next step that I need to
do is go back to terminal.
07:07 - I'm going to go
back to terminal,
07:08 - I'm going to quit
the server, I am here
07:11 - in the directory
of this project--
07:13 - The Weather Here.
07:14 - And I'm going to type
the commands git init.
07:18 - That's going to initialize this
folder as a git repository.
07:22 - Git init.
07:24 - So it initialized an
empty git repository.
07:26 - Then I'm going to do my first
commit of everything that's
07:30 - in the directory.
07:32 - A git commit is a
moment in time saying
07:35 - this is a particular
set of changes
07:37 - that I want a snapshot
as a moment in time
07:39 - with this project and
save for its history.
07:41 - And the truth of the matter
is, this is my first commit,
07:43 - so I'm just really saying
can you add all this stuff
07:45 - and save it.
07:46 - So to do that first commit I'm
going to do this in two steps.
07:48 - I'm first going to
say git add, which is
07:50 - like add all these new files.
07:52 - Git add, and the dot
means add everything.
07:55 - Now I'm ready to
type git commit.
07:57 - Now you might think there's
a little bit strange.
07:58 - Why is it two steps?
07:59 - Git add and then git
commit-- don't I just want
08:01 - to commit all this stuff?
08:02 - Well, this has to do with how
git works as a software system.
08:06 - There's a staging area
that files get added to,
08:08 - then those files
can be committed,
08:10 - and things can be moved around
in all sorts of complex ways.
08:12 - And this is something
that I cover
08:13 - in more depth in that
other GitHub video series.
08:17 - But for now, all
I want to tell you
08:18 - is that I need to
add all the files,
08:20 - and then I want to
commit these files.
08:21 - So I'm going to
say -m, and I going
08:22 - to put a little message here.
08:24 - There's more ways
you can write longer,
08:26 - more thoughtful
messages, but I just
08:28 - say this is the code from
Weather Here, as of video--
08:33 - I think this is going
to be video 5-4,
08:36 - then I'm going to hit Enter.
08:38 - And then all this
stuff has been added.
08:40 - Now look, if you
look at this list,
08:42 - do you see node modules there?
08:43 - Do you see dotenv there?
08:44 - No, because those were
ignored with git ignore.
08:48 - The next thing that I want
to do is put this on GitHub.
08:51 - So GitHub is a website that
can host your git repositories.
08:56 - This is now a get repository
sitting on this laptop.
08:58 - So I'm going to navigate over
to GitHub.com/codingtrain.
09:06 - I'm going to come
up over here, I'm
09:07 - going to click this button
to create a new repository,
09:11 - then I want to go here,
and I want to make this--
09:13 - I have a GitHub organization
which is called Coding Train,
09:16 - so I'm going to select that.
09:17 - And then I'm going to
make a project called
09:19 - The Weather Here.
09:21 - This is based on Joey Lee's
project, The Weather Here.
09:27 - I'm going to initialize
this with a README--
09:31 - no!
09:32 - There's so many different
ways to do all this stuff.
09:34 - And I think I show you in
other videos different ways.
09:37 - But what I've actually-- the
steps that I'm following here,
09:39 - I already created
the git repository,
09:42 - so I don't want
to make a new one.
09:44 - I want to just up--
09:46 - I just want to sync the two.
09:48 - So I'm just going to click
now, I want this to be public,
09:51 - I'm just going to click
Create Repository.
09:52 - And GitHub is so nice to me.
09:55 - It's just saying, this
is all I need to do here.
09:57 - All I need to do is
add this as a remote--
10:00 - right, the coding
train Weather Here.
10:02 - Add as a remote, and then I
can push, which means send it.
10:06 - So I can just literally
copy paste to this command,
10:10 - go back to terminal,
type that in.
10:13 - Copy this command, go back
to terminal, paste that in,
10:17 - and I have sent all
of the code to GitHub.
10:22 - I hit refresh here.
10:23 - This is the full project here,
and if I navigate in and look
10:26 - at index.js, we can
see that the code--
10:31 - oh, I mean, sorry, the API key
is come from the environment
10:33 - variable.
10:34 - But the environment
variable is not set.
10:36 - There's just an
environment sample,
10:39 - which is just showing
how to add your API key.
10:41 - And this is where, hopefully by
the time you watch this video,
10:45 - there won't be this
add a README button,
10:47 - and I will add
this README, and I
10:49 - will add all sorts of
information and instructions
10:52 - about how to work with this and
add your own API key itself.
10:56 - And maybe I can actually
even teleport into the future
10:59 - and show you a little bit
of what it'll look like.
11:00 - And I also want to consider
adding maybe a licensing
11:03 - information, a contributing
file, a code of conduct.
11:06 - All the kinds of things that
I might put with a new Open
11:08 - Source repository.
11:10 - So I've shown you know how
to both hide your API keys,
11:12 - as well as publish your
code in a git repository
11:14 - to the GitHub website itself.
11:16 - So there's one last piece
that I want to show you
11:18 - before I wrap up this series.
11:20 - How to, again, actually
run the code off of GitHub,
11:22 - although maybe that's
something that you'll
11:24 - be able to do in a future time.
11:27 - How can I put this code
somewhere on a server where
11:30 - that node server can actually
be executed, and I have either--
11:33 - and I have a domain that's
hosting this website itself,
11:36 - that other people can access.
11:38 - That's what I'll show
you in the next video.
11:40 - See you there.