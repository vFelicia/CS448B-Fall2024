00:04 - [Music]
00:15 - [Music]
00:45 - [Music]
01:12 - [Applause]
01:13 - [Music]
01:23 - [Music]
02:22 - so this is random this is noise Perley
02:25 - noise that is in the core random
02:27 - algorithm the actual random algorithm
02:29 - itself those numbers aren't related at
02:32 - all you pick like I'm picking random
02:34 - numbers between zero and ten nine two
02:36 - seven six one nine four eight nine to
02:41 - one thirty I pick nine a lot apparently
02:43 - but with Perlin noise I might pick
02:45 - numbers like this two three four three
02:48 - four five six five four five six seven
02:52 - five six seven five six seven eight nine
02:55 - eight seven six well this is like Perlin
02:58 - noise performance part
02:59 - [Music]
03:04 - 89 2 1 3 1 2 3 4 3 4 5 6 5
03:11 - these look like pearls and noise
03:13 - performances but with curly noise I
03:21 - might pick numbers like this
03:29 - by purling noise that is Hurley noise so
03:31 - this is Hurley noise that is Hurley
03:33 - noises this is Hurley noise that is
03:34 - Hurley no so this is Hurley noise that
03:36 - is her pearling know her pearling noise
03:38 - that is hurling boy this is Hurley noise
03:40 - that is hurtling this is this is Hurley
03:41 - noise so this is her but with pearly
04:01 - noise I might pick numbers like this
04:03 - [Music]
04:09 - [Music]
04:18 - this is like Perlin noise performance
04:21 - part good morning hello and welcome to
04:25 - the coding train live on a Wednesday
04:29 - where there's nothing else going on on
04:31 - the Internet today
04:32 - I think people aren't watching anything
04:33 - they're here rows watching videos about
04:35 - simplex purlins gradient fractal value
04:38 - whirly noise right right hello my name
04:42 - is Dan Shipman and I at the moment am
04:45 - here every Wednesday at exactly this
04:47 - time and is the morning for me here in
04:49 - New York City and you are here also so
04:53 - thank you thank you for watching I'm I'm
04:56 - a bursting at the seams to do today it's
05:00 - topic and I'm gonna get to that in a
05:03 - second it looks like people are saying
05:06 - hello in the chat one thing you might
05:09 - have noticed I instead of kind of
05:12 - waiting till I'm completely ready to
05:14 - flip the switch to start live stream to
05:16 - you to youtube you table youto utopia
05:19 - YouTube YouTube it ooze um I instead
05:24 - start streaming with just the logo and
05:28 - playing some music while I'm getting
05:30 - ready that way at least some things up
05:32 - and running people get the notification
05:33 - take some time for people to arrive I do
05:36 - hope and plan to soon have that beat
05:38 - something that's animated maybe that
05:40 - says like starting in just a couple
05:42 - minutes but you know all in good time
05:44 - I'm still a person who streams on the
05:46 - internet with a camera that shuts off
05:47 - every 30 minutes so technical stuff is
05:50 - it's it's happening it's getting there
05:52 - I'm starting to become a professional
05:54 - ish
05:55 - person so now what what thing I just
06:02 - want to say that it's really an honor
06:04 - and a thrill and brings me a lot of joy
06:06 - and happiness ease how many parts of the
06:09 - world people are from who are watching I
06:12 - saw Ethiopia Iran Cambodia Cambodia
06:15 - Thailand India and those are just some
06:18 - of the countries that I saw people type
06:21 - in scrolling past in the chat and I know
06:22 - that there's probably some US viewers
06:24 - there that is still in terms of the
06:27 - viewer
06:27 - ship when I look at the YouTube
06:28 - analytics the highest number but and and
06:31 - anything that I can do to make the
06:34 - content more accessible to international
06:36 - community and all sorts of different
06:38 - communities with access to technology
06:40 - and the internet in different ways I
06:42 - would love to hear from you maybe you're
06:44 - from somewhere in the world where you
06:45 - can't get this but you want to maybe
06:48 - there's some kind of subtitles I could
06:50 - do or bring on a guest or help somebody
06:52 - else do videos in a different language I
06:54 - don't know this is the thing I would
06:55 - love to do so makes me I mean you see
06:56 - France Belgium Poland Belgium Australia
06:59 - and Nepal Portugal Romania France
07:01 - Germany Bulgaria amazing amazing turkey
07:05 - Russia Pakistan Belgium Israel hungry
07:09 - Egypt Kerala Netherlands Poland
07:14 - Bangladesh okay I have to stop reading
07:16 - this it's just - it's too thrilling and
07:17 - wonderful so um let me talk a let me
07:21 - make a few announcements first I'm gonna
07:25 - open up my browser this spoiler alert
07:27 - I'm gonna talk about that ah the coding
07:30 - train web site let me yet again
07:31 - highlight the fact that there is this
07:33 - web site and what one of the primary
07:36 - things about the coding train web site
07:39 - it is a place for you to share things
07:42 - that you have made based on videos that
07:45 - I put out which the youtube comment
07:48 - system isn't particularly great I mean
07:51 - there's I'm trying to think of the good
07:52 - qualities about the YouTube commenting
07:54 - system well they have a little heart
07:56 - button I get to press a heart button I
07:58 - like that I'm trying to think of other
08:06 - things anyway so if I go here to for
08:10 - example my most recent purlins and when
08:13 - I say purlins for every single video I
08:15 - have ever made up until today please
08:17 - just insert a footnote a parenthesis a
08:20 - parenthetical a subscript a superscript
08:23 - please insert the year 1983 Oh 1983 I
08:29 - was a young 10 year old boy in Baltimore
08:35 - Maryland innocent of what would happen
08:38 - in the future to me not realizing that
08:40 - what's
08:41 - my life blowing into a wood device that
08:45 - when air goes through it and then comes
08:47 - out makes a whistling tune anyway this
08:53 - particular Perlin noise algorithm is an
08:57 - algorithm that dates back to 1983 and
08:59 - today we're we are entering the future
09:02 - we are entering the 2000 the 21st
09:05 - century we're gonna hit 2001 in this
09:07 - video baby and talk about simplex noise
09:10 - anyway I was saying something all right
09:12 - the point of me showing you the website
09:14 - is this is a place where any challenge
09:16 - and let's go to this one Perlin noise
09:19 - loops and go to the challenge here you
09:22 - can find the various links of things
09:25 - that I talked about in the video you can
09:28 - find other related parts that are
09:31 - related to this challenge other videos
09:32 - but here's what I want to highlight the
09:34 - community contributions and currently
09:37 - the system for submitting your community
09:40 - contribution requires a pull request on
09:42 - github this might not be a thing you're
09:44 - familiar with or comfortable and how to
09:45 - do but guess what the coding trade
09:47 - community is make your first pull
09:52 - request on github if you can't do
09:54 - anything wrong you can't break anything
09:55 - you can't do it the wrong way we will
09:57 - help you and so uh there's only one
10:00 - contribution right now from Carlos Ponce
10:03 - source code here let's click on the
10:06 - project and take a look at it
10:09 - there's controls there's a horn oh look
10:14 - at that oh look at that this is
10:15 - beautiful X Y Z oh I can I can put the
10:18 - access see X axes the access is the ax e
10:21 - is there it can make it not rotate this
10:24 - is beautiful and by the way I did look
10:27 - at this before I started live-streaming
10:28 - this is need renderer we blows my mind
10:33 - that's really awesome thank you for this
10:35 - submission so I encourage you to submit
10:38 - your ideas to here there was something
10:41 - one thing I would love just as a little
10:43 - note little tidbit you make me so happy
10:46 - if you do it this way and maybe it
10:48 - should be more explicit in the
10:49 - guidelines but if I go here into like
10:51 - the pull requests oh look there's one
10:54 - there's another one
10:55 - right here also by JC pons if I click on
10:58 - it and it there's a comment here what I
11:02 - would love even though the URL to this
11:05 - particular project is in the actual
11:08 - files that were changed in the pull
11:09 - request we can see it here for me to
11:11 - look at it I have to go in here and then
11:13 - do this and hit copy would be so nice if
11:16 - you could just put the URL to the
11:17 - project also in the comments you put
11:20 - here so it's really easy to click on and
11:22 - see to make sure it isn't some something
11:24 - that's not appropriate or there's an a
11:27 - mistake that URL is broken that type of
11:28 - thing helps just check it and I just
11:31 - love looking at them so that would be
11:33 - that would be wonderful so that would
11:35 - just bring me a little sparkle sparkle
11:37 - into my day to have that okay
11:41 - what else did I want to talk about
11:43 - announcement wise aha yes google Summer
11:47 - of Code so again I'm not an official
11:50 - representative of Google Summer of Code
11:51 - I don't work for Google I don't I'm not
11:57 - I'm not an organizer of google Summer of
11:58 - Code but I want to I like this because I
12:00 - do participate in google Summer of Code
12:02 - and it is an excellent program
12:04 - for any of you watching who might be a
12:06 - excellent opportunity for any of you
12:08 - watching more students who might like to
12:10 - get involved in open source and get paid
12:12 - to do so so if you are again you should
12:15 - really double check the eligibility
12:16 - requirements from Google's official
12:17 - materials but for my understanding if
12:20 - you are a current university or graduate
12:22 - student even if you are graduating this
12:24 - year you are eligible to apply for
12:26 - google Summer of Code you can find all
12:28 - of the different organ touring
12:30 - organizations here I will you know we
12:32 - can look through them there's some that
12:33 - I'm a little bit familiar with there's
12:35 - some that I'm quite intimately familiar
12:37 - with and if I keep scrolling down and
12:41 - eventually we get to the peas ah there
12:44 - we go the processing foundation so the
12:46 - processing foundation is here I'm going
12:48 - to click on this you can click to learn
12:51 - more anyway I'll come back to this
12:53 - another time I don't think the deadline
12:55 - is for quite a while if people have
12:56 - questions but I would encourage you to
12:59 - apply a processing foundation I is is
13:02 - the particular open source organization
13:04 - that I participate with for google
13:06 - Summer of Code I didn't know
13:08 - which was kind of exciting to me that
13:09 - tensorflow is on here and I didn't check
13:13 - I should I better check it soon as I
13:15 - stop live stream and check this if the
13:17 - tensor flow J s is part of what they're
13:20 - looking for contributions in for google
13:22 - Summer of Code but that's certainly a
13:24 - project that I have some passing
13:26 - familiarity with that I might encourage
13:29 - you to apply also o clips the clips I
13:34 - need like a love I need like a love
13:35 - sound effect for when I have love for
13:37 - something I used to spend a lot of time
13:41 - programming in Eclipse I even saw
13:45 - Eclipse passed by on a YouTube video the
13:48 - other day that I was watching I'll tell
13:50 - you more about that later and I've been
13:53 - trying to find a time to do some stuff
13:56 - about Eclipse on this channel the coding
13:59 - train oh oh that would that would be
14:02 - nice
14:02 - and I haven't thought of it I found a
14:05 - reason to do so I'm the thing that I've
14:06 - been wanting to do is actually show the
14:07 - steps to make a processing library a
14:09 - processing java library you know this
14:12 - might have been more relevant more
14:14 - timely I've gotten around to it a year
14:17 - ago two years ago five years ago ten
14:18 - years ago but I still think it has value
14:20 - today and in particular if you're
14:24 - learning about programming in Java if
14:26 - you want to understand more about
14:26 - contributing to processing itself it's
14:28 - good timing with Google Summer of Code
14:30 - coming up so I think what I would like
14:32 - to do and I don't think I'll get to this
14:35 - today but I I would like to turn the
14:38 - simplex noise open simplex noise
14:40 - algorithm by Kurt Spencer that I'm going
14:43 - to look at into a processing library and
14:46 - I could do that in a video and then we
14:48 - could make a JavaScript library I think
14:50 - there might already be a JavaScript
14:51 - implementation of Kurt Spencer's code
14:53 - will off to look into that but that's
14:54 - something that I am interested in
14:56 - Wolfgang oh hey everybody wolfgang
15:00 - amadeus mozart is here I thought I had
15:03 - some Mozart music you know I have some
15:06 - Beethoven here anyway Wolfgang Amadeus
15:10 - Mozart asks do you prefer JavaScript or
15:13 - Java well your I love them both equally
15:16 - it's like asking me to pick between my
15:18 - children some days I like one more than
15:20 - the other
15:21 - sometimes one is complaining more the
15:23 - other ones complaining more the next day
15:24 - some days one of them wants to give me a
15:26 - big hug the other one doesn't but then
15:27 - the next day the other one does the
15:29 - other one does it not that they should
15:30 - be required to give me hugs whatever I
15:31 - don't know what I'm talking about
15:32 - anymore but no I will not tell you which
15:35 - one I prefer I love all programming
15:37 - languages and they're all nice and they
15:40 - all have their good points and their bad
15:41 - points and people can some people like
15:43 - these and some people like these to me
15:45 - any all the different paths for getting
15:47 - started and making stuff and expressing
15:49 - yourself and finding the joy in
15:51 - computing is the nice thing all right
16:00 - what is this whoo Java Linux found it
16:04 - ooh ooh I don't a processing foundation
16:07 - I need a thing for a thing someone give
16:10 - me some kind of all right so that is
16:13 - that let me close this up oh now we're
16:16 - to the topic so here's what's happening
16:19 - today first of all what's again
16:20 - mentioned I have I have a like whatever
16:24 - the equivalent of writer's block is for
16:26 - what it is that I do I have that maybe
16:28 - you can help get me out of this
16:31 - youtubers block I through a learning
16:37 - incentive grant from Google from YouTube
16:39 - I am working on creating a new playlist
16:44 - which is entitled working with data and
16:46 - API in JavaScript I've mentioned this
16:48 - before I do have some videos that I have
16:50 - made previously on this topic but
16:54 - they're mostly out of date and it could
16:56 - use a little refreshing plus there's a
16:57 - lot of stuff I didn't get to so I need
17:00 - to start doing this I have to finish
17:01 - this playlist my deadline is you know
17:04 - late April early May and so I want to
17:07 - get started on this and so next
17:09 - Wednesday
17:10 - come lower high water I think we'll say
17:15 - hell but I don't swear on my channel and
17:16 - if you noticed that I don't curse or
17:19 - cuts or whatever word you want to use I
17:22 - secretly just like a little goody
17:24 - two-shoes
17:25 - I had my wild period my Rumspringa but
17:33 - what what did you put it here cafe chain
17:38 - that will remain nameless because you're
17:40 - not actually sponsoring me but you could
17:43 - I'm looking at you at all J anyway I
17:56 - have to finish this so come hell or high
17:59 - water that's what I was trying to say
18:00 - but I felt weird saying hell I'm gonna
18:10 - do this next week so please please help
18:13 - me out here give me your ideas
18:15 - contribute to this hopefully there'll be
18:17 - an I'm digging a train ride on Friday
18:20 - and I'm hoping to work on this thing is
18:21 - the audio gone alright sounds really low
18:29 - right now okay let me thank you for
18:31 - letting me know there's mic issues let
18:35 - me see what could have caused that
18:41 - test test that's weird
18:49 - test test all right III here I've got it
18:53 - everybody can't hear me anymore all
18:55 - right
19:08 - I'm aware of the sound problem just let
20:07 - it fly live on the edge let your freak
20:11 - flag fly
20:12 - no don't don't don't nobody fly any
20:13 - freak flags in the chat keep everything
20:15 - please
20:21 - alright so that's that so today I have
20:25 - an obsession my obsession is with noise
20:28 - algorithms I have you have seen me spend
20:34 - all of my time on this for the last two
20:36 - weeks there's got to be a stopping point
20:39 - at some point sure there probably is no
20:40 - stopping point now the mic okay alright
20:52 - let's restart the system alright
21:07 - back
21:52 - [Music]
21:56 - music playing please let me know I
21:59 - checked I've checked a whole bunch of
22:04 - things and everything is working as hard
22:06 - as I can tell people are asking if the
22:12 - issue might have been
22:14 - we hear you okay great so the reason why
22:17 - I don't think the issue is the mic is
22:19 - because you couldn't hear the music
22:20 - either and the music and the mic are
22:23 - completely separate audio inputs that
22:26 - are coming in in different ways so if
22:29 - they're both if you're not hearing
22:30 - either of them somewhat her between the
22:36 - computer and quick alright okay so well
22:53 - I had momentum I had energy I feel
22:55 - sleepy now what time is it oh good
22:59 - as long as I get started coding by a
23:01 - half an hour in that's a good thing so
23:04 - um it's the mic wait hold on
23:10 - audio gone but music on oh no you could
23:13 - hear the music fine oh okay okay
23:16 - it is the mic let me got it
23:22 - test test I hear myself in the monitor
23:31 - boy
23:40 - the good news is I have another mic i'm
23:52 - gonna mute the mic because i don't want
23:55 - any like popping sounds that come up i'm
23:56 - just gonna play with the cables for a
23:58 - second
25:23 - okay all right let's see if the mic is
25:29 - back the weird thing is I don't see the
25:34 - level change in the the monitor that
25:41 - shows me like this little green bouncing
25:42 - bar alright so right now you can hear me
25:52 - I did switch out the batteries I
25:57 - unplugged and plugged in the cables
25:59 - let's see if that fixes it if not the
26:01 - good news is I do have a second mic but
26:04 - it'll take me a little bit of time to do
26:06 - that through my sweater and see if it
26:12 - works now I hopefully the music doesn't
26:15 - like mess it up so it is clipped to me
26:19 - now and hopefully we're okay
26:23 - everybody seems to say it's good alright
26:26 - alright so hopefully this is going to
26:32 - work let's play a little music
26:39 - to make sure that that's not causing the
26:42 - problem
26:47 - [Music]
26:49 - I'm gonna say once again
26:54 - [Music]
27:05 - coordinates
27:08 - [Music]
27:14 - okay all right here we go now let me go
27:20 - back to what I was saying before I had
27:21 - all the different mic audio shenanigan
27:23 - problems I have an obsession Perlin
27:27 - noise I have done a lot of videos about
27:29 - Perlin noise I have done a lot of videos
27:32 - you know what let me just get started
27:35 - with the actual coding challenge because
27:39 - I'm gonna explain everything that I'm
27:40 - gonna do and then I'm gonna end up
27:41 - explaining it again so I have this open
27:45 - yes and then all right that's good
27:50 - enough okay
27:53 - all right all right here we go Simon I
28:05 - see that you are asked me did you see my
28:07 - long message it's not possible for me to
28:09 - read long messages during the live
28:11 - stream so I will check it out later
28:13 - thank you very much okay here we go this
28:22 - will be coding challenge 137 open
28:27 - simplex noise although I'm not I have to
28:29 - think about how to title this because to
28:31 - be clear what I'm going to do in this
28:32 - video is not implement open simplex
28:36 - noise I'm going to use a particular
28:39 - implementation of open simplex noise in
28:41 - a processing sketch so if it says coding
28:44 - challenge open simplex noise
28:45 - some of them might think that means I'm
28:47 - implementing it which I will not be
28:49 - doing alright
28:55 - I'm just checking the chat to make sure
28:58 - the that to make sure anyone saying
29:05 - there's an audio problem and Paul says
29:07 - hello from Brooklyn hey I live in
29:09 - Brooklyn I'm not in Brooklyn right now
29:11 - but that's where I live
29:12 - okay hello
29:17 - now this video has been a long time
29:20 - coming because let me tell you something
29:21 - I've been living in the past I've been
29:24 - living in 1983 my whole life I mean I
29:26 - didn't live in 1983 for ten years of my
29:28 - life then I actually lived in 1983 and
29:30 - then it the years went going but but
29:31 - since then or at least for the recent
29:34 - times and I was making these coding
29:35 - training videos about parolee noise I
29:36 - was living in nineteen 383 all along and
29:39 - I sort of knew that but I never really
29:41 - bothered to look into it I didn't want
29:42 - to know I didn't want to know about
29:43 - what's happened since 1983 I am going to
29:49 - update my life right now and your life
29:51 - to to the year 2001 and actually more
29:55 - like the year 2014 and all the way to
29:57 - the present because today I'm going to
29:59 - unpack what it means it's the best of my
30:02 - ability what it what is the difference
30:04 - between the original Perlin noise
30:06 - implementation from 1983 something that
30:09 - came out in 2001 which is an updated
30:12 - version of Perlin noise called simplex
30:14 - noise by Ken Perlin himself and some
30:17 - open source implementations that have
30:19 - been made more recently um notably by
30:21 - Kurt Spencer called open simplex noise
30:24 - so a lot of stuff discovery this video
30:28 - will be approximately 71 hours and 32
30:30 - minutes long I hope you enjoyed it now I
30:35 - will be prepared to begin speaking
30:48 - let's go travel back in time to 1983
30:51 - hear what happened in 1983 no I want to
30:59 - know the year 1983
31:10 - war
31:22 - let's drop a fact and let's travel back
31:25 - to the year 1983 Oh is a simpler time
31:28 - when Jim Henson's fragglerock launched
31:31 - and uh-oh there's the bad stuff happened
31:36 - oh let's not look I don't want to know
31:37 - what happened Paige am i on all right
31:44 - let me get to the point here 1983 the
31:49 - original Perlin noise a type of what's
31:51 - known as gradient noise was developed by
31:54 - Ken Perlin in 1983 Ken Perlin won an
31:57 - Academy Award for this work it is the
32:01 - the algorithm that Ken Perlin invented
32:03 - in 1983 forms the basis for the source
32:06 - code the implementation that's in
32:07 - processing itself in all these videos I
32:09 - made about Perlin noise where I the
32:14 - place where I learned to understand how
32:18 - Perlin noise is works and how its
32:21 - created was this webpage which is no
32:23 - longer online but I found it through web
32:26 - archive Perla noise by hugo elias and
32:30 - you might have remember to go elias from
32:34 - the problem is when i look over here now
32:37 - to look at myself and what i'm pointing
32:40 - to I see the chat and then I see weird
32:44 - stuff happening in the chat I have to
32:45 - distract myself
32:55 - this page by Hugo allies this is where I
32:58 - learned and first understood how the
33:00 - Perlin noise algorithm works why it's
33:03 - this kind of gradient noise what this
33:06 - concept of octaves of octaves is the
33:09 - idea of waves and amplitude and
33:11 - frequency so I would encourage you to
33:14 - check out this article and look at it
33:16 - and think about the whole thing over
33:23 - I'll just start over from where I'm on
33:25 - the Hugo Elias page because I it's bad
33:30 - for me to stop because it's good for me
33:32 - to just keep going okay where I first
33:38 - learned about how the Perlin noise
33:40 - algorithm actually worked was from an
33:42 - article written by hugo elias this page
33:44 - is no longer on the internet but you can
33:46 - find it through web dot archive.org this
33:49 - is a wonderful introduction noise
33:50 - functions talks about random sampling
33:54 - interpolation applet ood and frequency
33:57 - octaves and looks at this kind of
33:59 - gradient smoothing process that happens
34:01 - to create Perla noise and explains why
34:03 - you get these sort of patterns on how
34:05 - this stuff works there's actually even
34:07 - implementation so but I am NOT going to
34:09 - go through this today I will point you
34:11 - to the idea of gradient noise this is a
34:13 - key idea because the idea of Perlin
34:19 - noise is to smooth gradients in perhaps
34:27 - what well let's say we're considering a
34:29 - two dimensional space two smooth
34:30 - gradients within a two dimensional space
34:32 - squares on a grid this is how we usually
34:35 - think of a 2d space the reason why I'm
34:37 - highlighting this is because this idea
34:40 - of how this space is oriented the
34:42 - geometry of the space is the key
34:44 - distinction between classic cool classic
34:47 - Perlin noise and simplex noise all right
34:50 - so we'll come back to that next stop on
34:53 - my Wikipedia tour is the page for
34:58 - simplex noise so simplex noise is an
35:02 - algorithm for constructing n-dimensional
35:04 - noise it's comparable to perla noise
35:07 - created by Ken Perlin himself but the
35:09 - key element here is fewer directional
35:12 - artifacts so what do I mean by
35:14 - directional artifacts maybe you've
35:16 - noticed this in some of the videos that
35:17 - I've done before let me pull up this
35:19 - processing sketch look at this does it
35:23 - feel like it has this this is um
35:25 - - I'm visualizing two-dimensional noise
35:27 - using a third dimension of noise as
35:31 - slices of animation do you feel this
35:33 - like kind of bouncing like it's kind of
35:35 - like herky-jerky
35:36 - classic Perlin noise is kind of
35:38 - herky-jerky it kind of gets to a point
35:40 - or stops it bounces that's the sort of
35:42 - visual quality of a directional artifact
35:44 - it doesn't feel smoothly continuous over
35:47 - long periods of time and so this is
35:51 - really the innovation of simplex noise
35:53 - now the innovation has to do with
35:56 - symplectic geometry which is really and
35:59 - this is actually in an article that I'll
36:01 - refer to but a simplex grid looks like
36:03 - this so the core innovation is the idea
36:06 - is that instead of smoothing the noise
36:08 - calculating these gradients over a
36:10 - square great rectangular grid a tiled
36:14 - system of equilateral triangles and
36:16 - there's lots of variations of this and
36:18 - this this also generalizes to multiple
36:20 - dimensions and symplectic sym I can't
36:22 - say that word but symplectic geometry
36:24 - which maybe would be a topic for another
36:25 - day to visualize some of this stuff in
36:27 - higher dimensions but this is the core
36:29 - innovation I I couldn't possibly begin
36:31 - to say that I understand exactly how all
36:35 - of the pieces of the algorithm works and
36:37 - how this smooth is out smooths out those
36:39 - directional artifacts but I do want to
36:42 - highlight the work of I lost the page
36:45 - here but oh yeah here of Stefan
36:48 - Gustafson who is a computer graphics
36:51 - researcher in particular the page of
36:55 - documents on simplex noise and this PDF
36:57 - which I'll scroll all the way back to
36:59 - the top called simplex noise demystified
37:01 - so I read this on the subway home last
37:04 - night and on the subway to work this
37:06 - morning and so I have some picture in my
37:10 - mind of how this works I probably need
37:11 - to read it about 73 times as a court but
37:15 - this will give you much more background
37:17 - into the difference between classic
37:19 - noise which
37:20 - there's a nice and you can see here
37:22 - these this idea of these gradients and
37:24 - SCIM simplex noise and how the tiling
37:27 - system works in multiple mention so I
37:28 - encourage you to check that out now what
37:31 - are the oddities about a simplex noise
37:34 - is that there's a patent for it this if
37:38 - I'm correct is the patent patent us six
37:40 - eight six seven seven seven six b2
37:42 - inventor Kenneth purlins you can
37:44 - download the pdf this was filed in 2001
37:48 - at the time of the invention of simplex
37:49 - noise and there's a lot this is an
37:52 - apparatus for generating image the
37:54 - apparatus includes a compute or the
37:57 - apparatus includes a display connected
37:59 - to the computer on which images from the
38:00 - computer appear I will stop now doing my
38:03 - dramatic reading of this patent and so
38:05 - to me I'm not a lawyer I'm not an expert
38:07 - in this but it's unclear to me what it
38:10 - would mean to use the sort of like
38:12 - literal version of the simplex noise
38:15 - algorithm which is described in great
38:17 - detail here in the patent in say a
38:20 - processing library or processing sketch
38:22 - in an open source environment so there
38:24 - is fortunately a a post that was on
38:27 - reddit that I found from four years ago
38:29 - from dot whoops sorry dot let me find
38:33 - the username k dot jpg which is a post
38:37 - about this new version of what's called
38:41 - open simplex noise so this algorithm is
38:44 - very similar it's it's highly correlated
38:48 - and relates to the Ken Perlin simplex
38:51 - noise but there are some key differences
38:52 - and this the code for this algorithm is
38:55 - published here on K dot JPEGs github
39:00 - gist open simplex noise Java and which
39:05 - means I can use this in process because
39:07 - it's Java and if you scroll down first
39:10 - you could look and be like whoa you got
39:11 - to love anything that has a variable
39:13 - named squish constant 3d oh that is a
39:17 - beautiful variable name but I want what
39:19 - I want to do is highlight down here I
39:20 - looked I looked I looked I'm gonna keep
39:22 - going there's a lot of code tests and
39:29 - then here this is free uncovered
39:32 - software released into the public
39:35 - so I believe this is something that I
39:39 - can use and I'm going to use it in the
39:41 - context of this video boy that was a lot
39:43 - of explanation so what does this mean so
39:46 - I want to do another video after this
39:47 - one which is I just find every single
39:49 - piece of code I ever wrote music me
39:51 - prostrate pearl enjoys function and try
39:53 - to do it again with open simplex noise
39:55 - but I'm just do that just for one thing
39:57 - right now one thing then I'm gonna do a
40:00 - coding challenge with it maybe this
40:02 - isn't a coding I don't know what we'll
40:03 - see this might get divided into two
40:05 - videos I'm thinking now all right let me
40:06 - go here raw let me do a base big
40:10 - copy-paste I'm gonna go to processing
40:12 - because processing this is the sketch I
40:15 - want it whips I want to change this
40:18 - particular sketch from purl in classic
40:21 - pearl in 1983 noise the noise function
40:23 - in the processing library aka gradient
40:27 - noise there's that there is also
40:28 - something called a value noise there's
40:30 - all these fine distinctions between them
40:32 - but anyway it's easy to get confused and
40:36 - I'm somebody will write a nice extinct
40:38 - comment that I will pin to this page
40:39 - that has us all explained perfectly I'm
40:41 - sure I want to change this to use open
40:45 - simplex noise and I want to examine and
40:47 - look at the difference in quality and by
40:49 - the way what does it mean what do I mean
40:52 - when I say quality so first of all let's
40:55 - go I like thinking let's take it like a
40:57 - dive into this a little bit further
40:58 - let's go to processing org slash
41:00 - reference let's search on this page for
41:03 - noise I'm gonna click here and I'm gonna
41:05 - go down and I'm there's a I'm gonna redo
41:09 - this whole description but I'm gonna go
41:10 - down here and I'm going to say I'm gonna
41:13 - read this part there have been debates
41:14 - over the accuracy of the implementation
41:16 - of noise in processing for clarification
41:19 - it's an implementation of a classic
41:20 - Perla noise from 1983 and not the newer
41:23 - simplex noise method from 2001 so why
41:27 - not I mean processing by the way was
41:30 - invented it started by Casey Reis and
41:32 - Ben Frey is a project in 2000 run one at
41:34 - the same time why not update the version
41:37 - of Perlin noise that's in the library so
41:38 - I think you could make a good case from
41:40 - you could make an argument for both
41:41 - cases but there there is a different
41:44 - quality to the values and there is now
41:46 - historically years
41:48 - years of people making artworks visual
41:49 - art works and projects based on the
41:52 - quality of the Perlin noise the noise
41:54 - function in processing just say noise
41:57 - I'm just gonna say noise for now on and
41:59 - if we if it were to be updated those
42:02 - projects would suddenly maybe not look
42:04 - the way they were intended not look as
42:06 - beautiful not look as compelling not not
42:09 - be as visually distinctive because it's
42:12 - not that one is better than the other I
42:13 - mean there are reasons why you can say
42:15 - simplex noises and improvement those
42:18 - artifacts and the smoothness and a
42:21 - computational complexity those types
42:23 - those are things that had changed and
42:25 - are updated that are better in in in
42:27 - according to a lot of different kinds of
42:29 - metrics but it would make much more
42:31 - sense to have a separate library that
42:33 - you could use with processing to get
42:35 - open simplex noise I mean you could make
42:36 - the case and there is a get up issue
42:38 - this discussion about this you could
42:40 - make the case that it might make sense
42:42 - to add to processing something called
42:44 - noise mode in which case you could put
42:47 - in here I don't know whether you would
42:48 - what the terminology would be that would
42:50 - put in 1983 what a year now like but you
42:54 - could put in maybe gradient pearl in
42:57 - simplex value you could have whirly
42:59 - noise in my research there's look up
43:02 - something called Worley wor le why I
43:05 - want to really implement that noise it
43:06 - looks really cool so that could be
43:09 - something that you could do I would say
43:10 - a good test case to see if this makes
43:14 - sense to add to the processing API we're
43:16 - just being to make it as a library first
43:17 - where you could pick your different
43:19 - noise mode and then if everybody in the
43:22 - world is suddenly using it and creates
43:24 - so much opportunity and possibilities
43:25 - maybe then it would make sense to fold
43:27 - into course that would least be my point
43:28 - of view I'm not speaking as an official
43:31 - representative a processing I'm just
43:32 - telling you my take on this all right
43:35 - now so let's let's see the difference
43:40 - let's see the difference this this this
43:42 - this moment being living in the year
43:45 - 2001 in 2019 has really changed my life
43:51 - people tell me in the comment to stop
43:53 - giggling oh well I can't new tab so ah
43:59 - wait let me do save as
44:01 - let me save this on the desktop here
44:05 - save noise 3d okay so what I think
44:09 - because processing is built on top of
44:10 - Java I can actually I'm gonna create a
44:13 - tab I'm gonna call it open simplex noise
44:18 - I am going to paste in all that code and
44:23 - this code because it is written as a
44:26 - standalone java class will work just to
44:29 - have the box ranked like this with no
44:31 - changes in processing it's really
44:33 - amazing I could even if I wanted to have
44:35 - named the tab open simplex noise dot
44:41 - Java and sometimes this is necessary if
44:44 - there's certain features of Java that
44:46 - the processing IDE won't understand but
44:47 - in this case it's not necessary and I
44:50 - should say again thank you to attend
44:51 - Jakob for showing me this and giving me
44:55 - lots of advice and help I mentioned that
44:57 - Tian's work in several videos so far but
44:59 - ok so now we're going to change this
45:02 - over the first thing that I'm gonna do
45:04 - is I am going to create an object called
45:08 - open simplex noise just call it noise
45:11 - I'm gonna say noise equals a new open
45:14 - simplex noise object and I'm just gonna
45:19 - run this to make sure I'm not getting
45:20 - any errors I am getting errors Oh weird
45:25 - amazingly I did this yesterday I swear I
45:31 - did this yesterday just to test and they
45:32 - didn't have to make any changes but this
45:34 - is one of those things you can't have
45:36 - static functions in a class inside
45:39 - processing has to do with things being
45:40 - internal classes yadda yadda yadda so
45:43 - what I'm gonna do let's try renaming
45:45 - this to open simplex noise Java I think
45:49 - that will fix that issue great so no
45:54 - errors and maybe that's what I did
45:55 - before and I just didn't notice it's
45:57 - running now it's running the current
45:58 - noise algorithm the noise function in
46:01 - processing now we're getting getting
46:03 - close what I'm going to do now is just
46:05 - change this and I'm gonna comment this
46:09 - out and I'm going to say actually let me
46:14 - just do so I'm gonna
46:15 - show you something it's kind of
46:16 - interesting let me comment this out I'm
46:19 - going to put this in and instead what
46:21 - I'm gonna do is I'm now gonna say Noyes
46:23 - dot eval so that noise object has an
46:27 - eval function the eval function takes
46:29 - one Val I don't know if that if it's
46:31 - supporting one dimensional noise we can
46:33 - talk about how you can get that you just
46:34 - fix the second dimension but then I give
46:36 - it the arguments for 3d noise X offset Y
46:39 - offset and Z offset and I'm now using
46:41 - the libraries noise function instead of
46:44 - the built-in noise function let's run
46:45 - this I'm gonna get errors cannot convert
46:47 - from a double to a float so this is a
46:49 - little bit of funny business that we're
46:51 - stuck with here and this is what I if
46:52 - turning into a processing library I
46:54 - would clean this up processing in it's a
46:57 - simplification of Java has basically
47:01 - ignored the existence of the data the
47:04 - data type double double is a floating
47:06 - point it's not a floating point L is a
47:08 - decimal number that you connect that is
47:09 - more memory more accuracy more digits
47:11 - than just floating point and so here
47:14 - what I need to do is do something like
47:16 - hey well I need to convert which is
47:18 - called casting what comes out of the
47:20 - eval function as a float and then look
47:24 - at this now interestingly this looks so
47:28 - different now there's a couple reasons
47:29 - why this looks different one is look at
47:32 - those look at those I don't see a single
47:34 - directional artifact in there do you see
47:36 - any directional artifacts there are no
47:38 - discernible direction look at this just
47:39 - like flowing smooth noisy transition
47:43 - okay now but it looks kind of weird and
47:48 - one of the reasons that it looks weird
47:50 - is that the noise functions are
47:51 - generally designed to give you a number
47:54 - between negative 1 and 1 the mean being
47:57 - 0 Processing's implementation gives you
47:59 - a value between 0 & 1 as a sort of
48:01 - convenience but so this multiplying by
48:04 - 255 this is why we see these vast areas
48:07 - of the color black because any noise
48:10 - value that's less than 0 gets reduced to
48:12 - black which is kind of interesting to
48:14 - note now what I can do here and I should
48:17 - really take out the third dimension to
48:19 - demonstrate this but so if I change this
48:21 - to float N and then I say float bright
48:26 - equals map N which
48:28 - between negative 1 1 2 0 and 255 now
48:32 - whoa that's not what I meant to happen
48:35 - but that is cool
48:37 - whoa what arrow did I make hold on
48:43 - this is so weird what am i doing that I
48:46 - did differently than yesterday what
48:52 - numbers am I getting oh oh oh oh whoops
48:56 - I forgot that's kind of cool by the way
48:59 - that this by accident on it and I should
49:02 - not be having this print line thing here
49:03 - hold on okay this is actually a really
49:08 - nice by accidental effect I kind of love
49:10 - that I got this but I forgot that I had
49:12 - previously multiplied it by 255 here so
49:15 - that I need to take out I'm sure the
49:17 - chat is yelling at me about that there
49:18 - we go this looks whoops this looks more
49:22 - like what you what we originally started
49:24 - with it's a different noise algorithm
49:27 - I'm visualizing it in a very literal
49:30 - fashion in a two-dimensional space and
49:33 - there you go now there's lots of ways we
49:36 - could alter the quality of what we're
49:39 - getting I mean one thing would be this
49:40 - increment value is really playing a big
49:43 - role in and the Z increment values
49:47 - playing a big role in the quality of
49:48 - what we're seeing like for example let
49:49 - me make increment point 1 like suddenly
49:52 - look that's what the noise looks like
49:54 - look at that ooh this is really nice oh
49:57 - I love this and then you know I could
50:00 - the Z increment you know if I made that
50:02 - really fast then you're just seeing it
50:04 - sort of like changing really fast and
50:06 - that that now it has a lot more sort of
50:08 - chaotic randomness to it but only this
50:10 - is a nice addendum now the quality of
50:12 - this has such a sort of like smooth and
50:15 - graceful visual quality even that moving
50:19 - beyond just this very plain visual
50:24 - representation there enormous
50:27 - possibilities and I would refer you to
50:28 - the work let me just refer you to the
50:30 - work of young Jacob who makes all these
50:36 - amazing gift loops using
50:41 - open simplex noise and a variety of
50:43 - techniques all described in his blog
50:45 - post so now this thus this ends this
50:48 - video which I don't think was a coding
50:49 - challenge at all just explaining a
50:52 - little bit about the background and
50:53 - difference between the different noise
50:54 - algorithms and I will now do a video
50:58 - where I attempt to loop I would do a
51:02 - coding challenge where I I'm gonna do
51:04 - two more things I'm gonna do one coding
51:05 - challenge where I attempt to do a two
51:07 - dimensional noise loop using four
51:10 - dimensions I'll explain what that means
51:11 - in a second and then I think I also want
51:14 - to do I wouldn't do like a speed video
51:15 - or I just take every single thing I ever
51:17 - made with the point is I don't it's not
51:18 - gonna be everything coding challenges
51:21 - wise and like change it over to open
51:22 - simplex noise alright so you in those
51:24 - videos what Simon is now giving you
51:35 - message and the coding challenge you
51:36 - picked a random between one 1,000 or one
51:38 - in a million to use to give you the
51:41 - maximum number in Java you can use
51:43 - integer max value and integer.min value
51:45 - thank you
51:47 - okay okay whoa oh this is what I want to
51:59 - do look at that it is so cool whoa look
52:03 - at that oh my god these are like
52:06 - ridiculously amazing jeez I love these
52:12 - oh my god
52:22 - okay all right so first of all I'm just
52:26 - curious does anybody that that was my
52:29 - take on Perlin noise simplex noise a
52:32 - little bit about that history of those
52:33 - things does anyone have a does anyone
52:42 - want to point out any significant
52:45 - Corrections or things that you might
52:48 - know about and now I'm gonna close all
52:55 - of this and I'm trying to think
53:05 - yeah
53:13 - yes instead of changing a spectral piano
53:16 - rights this is a really good instead of
53:18 - changing the place where you loop in the
53:20 - noise space you can make a noise object
53:22 - with different seeds yes that's what I
53:25 - was thinking of doing
53:26 - um let's look at does this take a seed
53:30 - that's what I don't remember so there is
53:33 - oh yeah it does a seed so they think
53:36 - this is what I'm gonna do instead of
53:38 - doing different spaces I'm going to do a
53:41 - take a seed to a coding challenge where
53:46 - you reproduce one of those animations
53:47 - flocking patterns but by this kind of
53:52 - noise yeah so this is what I'm gonna do
53:54 - now I just need to figure out what my
53:59 - demonstration is going to be I mean I
54:02 - think I'll do something simple I mean
54:04 - one thing I can do is just do a grid
54:05 - like the flow field thing so let me let
54:08 - me open up what I'm what I'm thinking of
54:10 - doing so I have this example in nature
54:18 - of code book under agents flow field 3d
54:25 - noise yeah it's basically let me let me
54:32 - take out the vehicles to show you what I
54:34 - mean oops
54:44 - and I don't need this text so this would
54:49 - be an easy thing for me to do not I mean
54:51 - easy this would be a good starting point
54:53 - like I could make this Luke this is
54:55 - noise um open simplex noise in
54:58 - two-dimensional space and I could use I
55:01 - could use a four dimensional space to
55:04 - loop to loop the two-dimensional space
55:06 - it sounds weird I'm going to try to
55:08 - explain that but I don't know is this
55:10 - visually interesting enough another
55:11 - thing I could do is I could just put a
55:12 - bunch of these in like random spots I
55:14 - could go back and do the landscape but I
55:17 - already have that terrain generator
55:19 - let's find that code let's find that
55:24 - code terrain generation
55:27 - Schiffman noise so if I go to here and
55:34 - then I do download code let's download
55:36 - the processing version and open this up
55:50 - like I have this and so I really like to
55:55 - add the simplex noise to this and see
55:57 - what happens but this is a much more
56:02 - complex example I feel like this is a
56:05 - second part let me do the first one let
56:09 - me do them both I think I want to
56:11 - explain the stuff with a simpler case
56:13 - and then do terrain as a separate case
56:20 - because I already have built the terrain
56:23 - and I can do the other one
56:26 - from scratch everyone's egg do this do
56:29 - this this is better I'm gonna do this in
56:31 - 2d first to explain it I will come back
56:34 - to this okay terrain on a sphere oh
56:44 - that's a great idea
56:47 - I'm not ready for that right now okay
56:50 - let me cycle the cameras I really really
56:54 - want to cover es6 inheritance because
56:57 - it's a topic that I use in a lot of my
56:59 - programming classes here at NYU and and
57:08 - it's a topic I use in a lot of my
57:10 - programming classes here at NYU and I
57:12 - would like to have some video tutorials
57:13 - to refer people to okay all right okay
57:21 - all right so let me put this away all
57:28 - right
57:33 - so let me just what I'm gonna do close
57:36 - this
57:39 - [Music]
57:47 - okay I'm gonna actually just start with
57:49 - this as the base code alright it's just
58:04 - a bomb stump right so you have read up
58:06 - on purlins simplex gradient noise and
58:08 - yet still call the processing noise
58:09 - function per Lin
58:10 - it's a hard habit to break I'm sorry try
58:15 - I know people get very bent out of shape
58:17 - about these the the particular
58:19 - distinctions between these noise
58:20 - functions and III would like to be as
58:23 - accurate as possible and I apologize for
58:25 - any inaccuracies and conflation that I
58:29 - have done in the past and I'm sure will
58:31 - continue to do in the future hopefully I
58:33 - am providing a set of resources for
58:34 - people to be able to do a deep dive into
58:36 - this to understand it further okay so
58:52 - okay so I guess if I'm being absolutely
58:54 - correct about this let me see if I
58:56 - understand this correctly the original
58:59 - Perlin noise sorry the original noise
59:03 - function from 1983 is no longer referred
59:06 - to as Perlin noise because simplex noise
59:09 - is Ken Perlin updated version so that's
59:11 - really at this point Perlin noise that
59:14 - other noise I would need some other name
59:17 - like gradient noise or 1983 noise
59:19 - because it's no longer truly purlin
59:22 - anymore but open simplex noise is based
59:26 - on Perlin noise simplex noise in a with
59:29 - this other slightly different algorithm
59:31 - maybe that's kind of right I don't know
59:33 - terrain inside the sphere please turn
59:36 - ringing on a hypercube okay I'm really
59:43 - trying to get this right everybody I'm
59:44 - just doing my best here okay maybe I'll
59:48 - invite Ken Perlin over to come be the
59:50 - final word on this he does work here at
59:54 - NYU and I have I've been lucky enough to
59:57 - speak with him on a few different
59:59 - occasions and see him speak and be very
60:01 - inspired by his work okay all right all
60:09 - right okay I know what I'm doing now
60:20 - okay
60:24 - OLF yes can you change noise method
60:27 - pearl and old Oh simplex by clicking on
60:30 - the canvas yes but I'm not I'm not gonna
60:36 - do that right now that would be a nice
60:37 - sum it would be great for someone to
60:38 - make and actually in this paper sorry I
60:40 - know I said I was kind of done with the
60:42 - background stuff but one of the things
60:44 - that's really like about Stefan Stefan
60:49 - Gustafson is paper on simplex noise let
60:53 - me just find it again here and by the
60:56 - way there is also this implementation
60:58 - which is Stefan Gustafson uh speed
61:03 - improved simplex noise algorithm for 2d
61:04 - 3d and 4d I just wasn't clear what the
61:07 - license is about this so I thought I
61:13 - wasn't sure about whether what I mean it
61:14 - does say the code is placed in the
61:16 - public domain you may use it as you see
61:17 - fit but attributions would appreciate it
61:19 - so I said I just don't I it's unclear to
61:21 - me what violates and doesn't violate the
61:23 - patent and at least on the reddit thread
61:26 - there are some pretty good arguments for
61:28 - why open simplex noise doesn't violate
61:29 - the patent oh but what I wanted to show
61:33 - you which i think is really nice about
61:35 - this particular article that I would
61:37 - recommend you check out going we find
61:39 - this diagram is there's a just a couple
61:41 - of visual demonstrations of all the
61:43 - different noise algorithms side by side
61:45 - I think this is where I saw it yeah so
61:49 - classic pearl in noise maybe I'll say
61:50 - classic Perlin noise how about that
61:53 - probably noise classic it's what I'm
61:55 - going to say and simplex noise you can
61:58 - see the sort of visual differences just
62:00 - here mapped onto a terrain
62:03 - Fourier series drawing the Perlin noise
62:05 - terrain I hope somebody knows that all
62:07 - right
62:07 - coding challenge time I mean I can
62:12 - actually just loop this which would be
62:14 - kind of interesting but I don't know why
62:20 - yeah actually you only be kind of
62:23 - interesting would be to
62:30 - you know right like because what I could
62:32 - do here is I could say n is greater than
62:44 - zero
62:45 - how do you do those turn around turn or
62:47 - anything zero something like this is
62:51 - that right
62:51 - what's the chance I got that right oh I
62:53 - did like this would be kind of fun to
62:56 - Luke like and then if I change the
63:02 - incrementation value no but like this
63:09 - let's do it this this actually yet
63:14 - looping this would be kind of
63:15 - interesting
63:22 - as it would be surprising to see this
63:24 - loop right but I think I want to go with
63:36 - all right let me I mean I need sorry the
63:43 - other thing I need is yeah I have an
63:54 - idea for what I'm doing I think I have
63:58 - an idea now I'm never getting to that
64:00 - inheritance stuff mi I need just the
64:05 - gift loop code download this or actually
64:12 - it's just one yeah I just need this
64:27 - and put this on the desktop
64:38 - and I can close that I don't think I
64:47 - need this
64:53 - great oh and this is doing this great
64:58 - okay all right all right I am ready
65:05 - classic see Perlin noise is classic
65:08 - Perla noise is a good way of calling it
65:09 - just there's so many people calling
65:10 - fractal noise purlins that is often hard
65:12 - finding actual articles about either
65:13 - that makes sense
65:14 - try to that makes sense that is a good
65:17 - bit of feedback okay
65:20 - fractal noise yes that's another term I
65:23 - should have used okay okay so wait I
65:32 - need this to go back to what it was
65:47 - all right
65:54 - okay I've got it I got it I got it I'm
65:57 - gonna do to two things in this video all
66:00 - right
66:12 - three things who knows
66:20 - alright alright I gotta get started
66:27 - whoops uh-oh come back camera there we
66:33 - go 11:36 okay hello welcome to an
66:41 - exciting moment for me we do that again
66:47 - so Pradesh in the chat says am I the
66:50 - only one who is curious to see the four
66:52 - dimension animation so to be clear what
66:55 - I'm going to show you is still going to
66:57 - be visualized in two dimensions I'm
66:59 - using the third and the fourth dimension
67:01 - to create a closed loop of the values
67:04 - that are in two dimensions that sounds
67:06 - like a really weird thing and I will try
67:07 - to unpack that a little further I do
67:10 - actually have a video about a hypercube
67:13 - a four dimensional cube a tesseract
67:15 - visualized in three dimensions that's
67:16 - that you might want to refer to if
67:18 - that's what you're kind of looking for
67:19 - but this is really I'm using a higher
67:22 - dimensional space to pick values that
67:25 - are still being visualized ultimately in
67:27 - two dimensions alright hello welcome to
67:30 - a coding challenge entitled 4d open
67:35 - simplex noise Luke that's got to be like
67:37 - a clickbait title if I ever heard one
67:39 - right anyway let me thank somebody and
67:43 - met you I didn't have this prepared so
67:46 - you'll have to like edit this the artist
67:52 - I'm a Tian Jacob who I've referred to is
67:54 - like the last 307 challenge with you
67:58 - that I've made because I keep doing this
67:59 - topic over and over again it's been
68:02 - really an inspiration for these videos
68:04 - makes these amazing noise loop gifts and
68:08 - I've talked a little bit about some
68:10 - techniques for doing that using classic
68:12 - Perlin noise the noise function in
68:14 - processing which you can also refer to
68:16 - as fractal noise and I've recently
68:19 - through feedback and research bin turn
68:22 - on to this idea of simplex noise and
68:25 - open simplex noise and I made an entire
68:28 - video all about that and the differences
68:30 - in a little bit about the history there
68:32 - so I'll refer you to that video if you
68:34 - want to find out more in this particular
68:36 - video all I'm going to do is I now have
68:39 - the processing 3d noise example which
68:44 - you'll see nothing is three-dimensional
68:46 - here there's really a two dimensional
68:48 - space of noise and the third dimension
68:51 - is what's creating the animation frame
68:53 - you can think of that third dimension
68:55 - almost as time I'm seeing frame by frame
68:57 - by frame what I want to do with this is
68:59 - take this and make it loop I want to
69:03 - have this noisy scene and this is using
69:05 - open simplex noise which has a different
69:08 - quality and character to it it has less
69:10 - what are known as directional artifacts
69:12 - that have that I referred to in the
69:14 - previous videos like this herky-jerky
69:15 - feeling of what kind of the noise
69:17 - algorithm could sometimes do it feels to
69:18 - like stop and turn around and so the
69:21 - smoothness of this is quite pleasant and
69:23 - has a kind of visual quality that's for
69:25 - a lot of scenarios better so there's
69:29 - more to say about that you could go
69:30 - watch the other video but what I want to
69:32 - do is make this run just over a few
69:34 - seconds and then render it as a gift
69:36 - that loops seamlessly and if I were to
69:38 - do that right now if I were to just say
69:44 - well hold on timeout let me make as
69:47 - example of this really quickly
69:55 - I mean this one I don't think this needs
69:57 - to go in the video but I think this
70:04 - would be a good demonstration of this oh
70:09 - whoops I want to do this No
70:23 - I didn't fix that yet where am i where
70:30 - am I
70:31 - what's my sketch called noise 3d am I on
70:37 - the desktop so confused
70:39 - I am oh it's this ffmpeg
70:49 - - oh shoot what is it I use - I image to
70:56 - notice - f - ash f image - - framerate
71:02 - 30 - I output no I'm in the directory
71:08 - what I call it a no loop - percent 3d
71:13 - dot PNG no loop gif
71:17 - oh wait I really should stop it from
71:20 - rendering that's though it's not like in
71:22 - the middle of doing both at the same
71:24 - time let's do that again yes
71:33 - does this make the case that I want to
71:39 - make effectively Omak preview won't show
71:47 - me at all what is wrong with computers
71:50 - these days
72:11 - does that look like it's looping I don't
72:20 - see it actually kind of feels like it's
72:22 - looping there's got to be an obvious I'm
72:25 - gonna look closer oh there we go it just
72:27 - took forever to get there cuz I just
72:30 - have likes way too many images yeah I
72:32 - think I just had way too many images
72:34 - let's uh hold on it's surrender this
72:46 - again let me just do it in the outside
72:51 - directory like for that's like it's like
72:59 - it's over ten seconds I don't need that
73:02 - many
73:02 - only two ten second big wonder let's
73:06 - delete a bunch more energy in ajiz
73:31 - yeah
73:38 - there you go see that flicker there
73:40 - because it's starting over yeah okay I
73:50 - still wanted to for this demonstration
73:53 - like let me just let me reduce it by
73:55 - half now
74:06 - let me minimize this
74:15 - take this out
74:28 - okay perfect
74:35 - all right
74:37 - hopefully the YouTube compression will
74:39 - make this obvious let me cycle the
74:43 - camera
74:52 - I took a quick break there just to
74:56 - render out that processing sketch I
74:59 - rendered it out like a few seconds and
75:00 - as you'll see it's I rented it to a gif
75:02 - and every few seconds you see this a
75:04 - jarring thing happened where it goes
75:06 - back to the beginning the last frame of
75:08 - this noisy scene doesn't match the first
75:11 - frame and this is something that I
75:12 - talked about in previous coding
75:14 - challenge videos how to get a sequence
75:17 - of values a one-dimensional array of
75:20 - random values where the last value
75:22 - matches up with the first you close that
75:24 - loop and the way that I did that was I
75:26 - want one dimension of values let me walk
75:29 - around a circle a circular path in a 2d
75:34 - noise space so now what we're doing is I
75:37 - want two-dimensional looping values so I
75:42 - need to basically walk around the space
75:45 - of a torus right I need all of these
75:47 - values to move around and like come on
75:50 - back and the way that I can do that
75:52 - right if what I'd wanted was if what I
75:56 - wanted was one value then what I all I
76:00 - need to do is walk around the path of
76:02 - the two dimensions now what I want is I
76:07 - always want one value sorry let me say
76:09 - that again
76:18 - if what I want if what I want is a
76:22 - 1-dimensional a single dimensional list
76:24 - of values then I'm saying the same thing
76:27 - again I don't need to say that the
76:29 - tourist thing is fine so so in order to
76:33 - do this I just need to give it two
76:35 - dimensional values I need to give it its
76:38 - two dimensional coordinate space and
76:39 - then its other space along the circle a
76:43 - circular path so I need four dimensions
76:46 - right
76:46 - I need the X and the y and then I need
76:49 - the location along the circular path
76:51 - that's coming out somebody who could
76:53 - make hopefully make a nice diagram of
76:54 - this that I can link to include some day
76:56 - is like an overlay here look look at
76:58 - this diagram if you make this in the
77:01 - next couple days it will go here I swear
77:04 - all right so all right okay so let's do
77:12 - this so first what I want to do is so
77:15 - this is let me just be clear this is the
77:16 - processing noise 3d example and the only
77:19 - thing change is I've added this open
77:21 - simplex noise code from Kurt Spencer I
77:24 - will link to where that code and some
77:25 - background about this open source
77:27 - implementation where it comes from in
77:28 - the video's description and instead of
77:31 - calling Processing's noise function I'm
77:34 - calling noisy foul from Kurt Spencer's
77:37 - open simplex noise and that gives me a
77:40 - double so I have to convert that in a
77:41 - float and also gives me a range of
77:42 - values between negative 1 and 1 which is
77:44 - different than the values between 0 and
77:45 - 1 okay so what what I would like to do
77:48 - though however is make this a bit more
77:49 - visually obvious what's going on so I'm
77:52 - gonna change this I'm gonna threshold
77:54 - this to render the color either black or
77:57 - white and one way I can do that is with
77:59 - a nice little ternary expression I can
78:01 - say brightness equals like is noise
78:04 - greater than zero if the noise value
78:06 - that comes out is greater than zero then
78:07 - I want to see 255 otherwise I want to
78:12 - see zero so if I do that you'll see we
78:15 - get this and I can kind of play with
78:18 - this sort of increment values like maybe
78:19 - let me make the increment a little less
78:22 - but make n but make it go through the z
78:24 - space faster I don't know so now we can
78:27 - see so this this would be action animate
78:30 - I should render this to a gift so you
78:32 - see it not looping but this is what I
78:33 - want to have Luke and also look at the
78:36 - beauty of this particular noise
78:37 - algorithm it's very smooth it doesn't
78:40 - feel like it's sort of it doesn't have
78:44 - that directional artifact doesn't feel
78:45 - like it's sort of slowing down to a stop
78:46 - and then going backwards it just keeps
78:49 - going with this kind of beautiful
78:50 - organic randomness alright so now that I
78:54 - have this let's turn this into a gift
78:56 - loop all of these videos are now kind of
78:59 - this series everything's depending on
79:00 - each other so I have a previous coding
79:02 - challenge where I made processing code
79:05 - that just renders out the frames of the
79:08 - frames for a gift loop and a
79:10 - demonstration it's just a rotating
79:12 - square so what I want to do is I'm gonna
79:15 - use that as my basis and I'm gonna grab
79:17 - what I need from here so I'm gonna grab
79:19 - all of the variables that are at the top
79:22 - here you know what I pause for a second
79:30 - I one of the things I meant to do was
79:32 - also do a screen capture because it's
79:40 - possible that when we edit stuff back
79:42 - together later that having that just the
79:44 - plane screen capture might be helpful so
79:46 - let me just set that going I meant to do
79:48 - this at the beginning but obviously I
79:50 - forgot but I noticed here I'm standing
79:52 - in front of the code so this could be a
79:53 - place for that
79:55 - let me grab the alright so medium
79:58 - let me grab the the all the code before
80:01 - setup from here which is all of this I'm
80:04 - gonna put that into my gift loop code
80:08 - then I wanted to make the new open
80:12 - simplex noise object and I'm going to
80:15 - put that in here now it's complaining to
80:17 - me it doesn't know what open simplex
80:18 - noise is so I do need to make a new tab
80:21 - I'm gonna call it open simplex noise
80:25 - Java and whoops it needs to be dot Java
80:30 - because this particular open simplex
80:33 - noise class is using some features of
80:35 - the Java programming language that don't
80:36 - work super elegantly in processing so I
80:40 - can then just go copy and paste it over
80:42 - you know certainly there's more more
80:44 - streamlined ways of
80:45 - of importing a java class but just
80:47 - copying it over is one way then I'm
80:49 - going to come back to here and what I'm
80:51 - gonna do is everything that's in draw is
80:55 - what should go into this render class
81:01 - this render function so this render
81:03 - function should now have all of the
81:05 - drawing code and I'm gonna run this now
81:08 - I messed up oh I'm missing sorry I'm
81:12 - missing one curly bracket there we go
81:15 - so this is exactly that oh there's so
81:17 - many things open here by the way this is
81:21 - for when the audio wasn't working what
81:23 - can you can clip this part out all right
81:27 - let me just rearrange here I don't know
81:29 - why oh what a mess
81:37 - all right so here now we have this
81:39 - running now it's not looping in I've got
81:41 - to figure that out I also I want to give
81:44 - myself more frames probably and actually
81:48 - let's make it short because I really
81:49 - want to make sure it's looping and let's
81:53 - make it let's make it 640 by 360 it's
81:56 - kind of nice to have that aspect ratio
81:58 - okay so now this is what I want to
82:01 - render as what I want to render as a
82:04 - perfect loop so what's going on okay so
82:08 - here's the thing
82:09 - the thing that needs to loop is the the
82:13 - z axis the z axis instead of moving
82:16 - forward in time should move around in a
82:19 - circular path to create that donut in
82:21 - three-dimensional space so how do I do
82:24 - that exactly well it turns out that the
82:28 - way that I can do that is let me
82:29 - actually get rid of this idea of Z
82:30 - offset and I want to have the if let's
82:34 - see if I can diagram this
82:50 - all right so this is my two-dimensional
82:54 - plane of noise in three-dimensional
82:57 - space what I and I'm at any given point
82:59 - what I want to do is kind of walk around
83:02 - in a circle and if this were the flat
83:07 - plane the circle would come out like
83:08 - this
83:08 - so what I need is an angle I need to
83:11 - rotate around need to use that polar
83:13 - coordinate formula to rotate around a
83:15 - circular path within that's like one
83:18 - plane of one plane of the
83:20 - three-dimensional space so to do that I
83:22 - use four dimensional noise because what
83:27 - I'm doing here is I get remember in
83:29 - looping a gift I want a percentage from
83:31 - zero to a hundred percent so I can now
83:34 - have an angle which is equal to map that
83:38 - percent from zero which goes between
83:41 - zero and one to between 0 and 2pi then I
83:47 - can have I'm gonna call this like you
83:49 - offset for the third dimension and I'm
83:52 - gonna call this a V offset for the
83:54 - fourth dimension and so what what those
83:57 - are is I'm gonna say cosine of the angle
84:01 - and sine of the angle right so I'm gonna
84:05 - use the polar to Cartesian coordinate
84:07 - transformation and map these values
84:12 - which go between 0 and 1 no sorry go
84:17 - between negative 1 and 1 to between some
84:23 - spread some noise radius some noise
84:26 - diameter this is a concept I talked
84:28 - about in the previous looping video but
84:33 - it's very hard to type and talk at the
84:34 - same time sometimes I do a good job
84:35 - sometimes I'm a mess and right now I'm a
84:37 - mess because this is very hard to
84:38 - explain so this is exactly the same
84:41 - technique that I did in the first noise
84:44 - loop video where I just had an X and a Y
84:46 - now I have an X and a Y but the looping
84:49 - is happening in the U and the V so
84:51 - that's where the size of this circle is
84:56 - important so I'm not sure whether I can
84:58 - the open simplex noise algorithm if I
85:00 - can have negative values or not but to
85:02 - be safe I'm just gonna like map these
85:03 - between like 0 & 2 so that's some what
85:06 - I'm picking sort of an arbitrary this I
85:08 - think we called noise diameter or
85:10 - something like that I'm picking an
85:12 - arbitrary value now down here change
85:14 - this to you you offset V offset and
85:20 - let's run this did I get everything
85:22 - right
85:23 - no no oh I have an extra 0 in here
85:28 - because I'm going crazy I don't have Z
85:32 - offset is not a thing anymore and here
85:34 - we go why is it running so slow
85:39 - did I turn rendering on no he did this
85:48 - the other day the fourth dimension
85:49 - didn't didn't make it run so slow
86:15 - 40 is slower Oh Etienne is watching it's
86:20 - yen's Jakob
86:21 - hi Etienne everybody say Thank You NCN
86:25 - and the chat applause so maybe it just
86:28 - is that slow I could have sworn though I
86:32 - did this oh maybe I just automatically
86:35 - rendered it okay so one thing to note
86:45 - here is that for D the the
86:49 - implementation for getting for D noise
86:52 - is quite slow and you can see this
86:54 - framerate sort of like chugging along
86:56 - the good news for us is we're here to
86:59 - render out to a loop so I don't care
87:02 - about the speed the framerate I am just
87:04 - going to turn record to true and I'm
87:06 - gonna run this again and I will see you
87:08 - when it finishes rendering
87:29 - I'm loving watching seeing everybody say
87:31 - hi at the end thanks at the end Thank
87:33 - You Etienne
87:48 - almost 220 frames that's like four
87:54 - seconds
87:58 - okay so finished rendering alright it
88:02 - finished rendering so here the good news
88:03 - is just to reiterate because 3d noise
88:06 - works quite smoothly if you're not
88:08 - rendering out to a loop you don't need
88:11 - that fourth dimension you could just use
88:13 - the third dimension and sit watch your
88:15 - real-time software in your media art
88:17 - installation work beautifully but if I'm
88:19 - rendering it out I want to close that
88:21 - loop I do need that fourth dimension
88:23 - okay so let's now I'm gonna use the same
88:26 - technique where I am going to go to I
88:29 - need to open up terminal
88:31 - I have ffmpeg installed
88:34 - I am I in the right directory I am going
88:38 - to say no I'm not I need to go to my
88:40 - this directory and I'm gonna say ffmpeg
88:44 - - F image - - framerate 30 - I
88:51 - and then the directory was called output
88:53 - gif there's three digits % 0 3 D dot PNG
89:00 - and then looping loop no loop I'll just
89:03 - call it noise loop dot gif here we go it
89:06 - hardly exists I must have done this
89:08 - before sometime let me overwrite it oh
89:10 - whoa whoa whoa something weird happened
89:14 - I'm in the wrong directory shoot yeah
89:18 - give loop before D I'm totally in the
89:19 - wrong directory ok fortunately alright
89:28 - I'm gonna switch over to my terminal
89:31 - window and I'm in the gift loop for D
89:34 - sketches folder and now I'm gonna use
89:36 - ffmpeg to render all those frames into a
89:39 - gif so I'm gonna say ffmpeg - F image -
89:44 - and ffmpeg is a utility you would have
89:47 - to install separately on clue 2 links to
89:49 - how to do that in this video's
89:50 - description - f image - - frame rate
89:54 - let's give it 30 frames per second - I
89:57 - the file path which is output gif
90:01 - it's each each file is gift - and then a
90:04 - number so 0 3 digits dot PNG and then
90:09 - I'll call it noise Luke dot gif and I'm
90:12 - gonna render that out I am going to take
90:15 - a look at it here it is let's take a
90:17 - look and by golly if that doesn't loop I
90:22 - don't know what Luke's right this is
90:24 - about a 4 seconds long one one thousand
90:27 - two one thousand three one thousand four
90:29 - one thousand one one thousand two one
90:31 - thousand three one thousand four one
90:33 - thousand so of course you can see you
90:39 - might be able to detect the loop because
90:41 - it's so short but if I made it longer
90:43 - and if there was a bit more if I was a
90:45 - more artistic and add more creative
90:47 - ideas about how to vary the visual
90:49 - quality you might be able to create
90:51 - something more like what I showed you in
90:53 - those original Etienne Jakob gifts so
90:57 - now is that now now I think I need to do
91:01 - some more with this I think do I do it
91:06 - in this video I'm trying to estimate
91:07 - like how long that actually was
91:24 - all right yes I do want to do something
91:27 - more I'm just trying a side should be in
91:28 - a separate video
91:29 - I'm gonna keep keep going Q learning i
91:46 - with only this was Q learning I really
91:49 - I'm so easily distracted by noise
91:51 - algorithms getting stuff I'm supposed to
91:54 - be doing all right now you might be
92:02 - thinking oh I finished come to the end
92:05 - of this video I don't need to watch
92:06 - anymore but there's more what I want to
92:09 - look at very briefly and it probably not
92:11 - be brief I want to look at how to do a
92:14 - few more things with this what if I want
92:16 - multiple parameters to loop in
92:19 - interesting ways I don't know I don't
92:21 - know that I can actually describe what
92:22 - it is I want to do I'm just gonna start
92:23 - coding it so first of all let me do
92:25 - something with this
92:26 - let me I'm just gonna stay in this gift
92:29 - loop thing I'm gonna turn a record to
92:32 - false and I'm also just going to at the
92:35 - moment just comment out V off so that I
92:40 - can see this run much faster so by the
92:43 - way this is what happens if you do three
92:44 - dimensions it's looping but you're just
92:47 - kind of going forward in time then
92:49 - backward a lot people were asking why
92:51 - don't why do I need four dimensions so
92:52 - this is what it looks like with three
92:54 - dimensions it's got directional
92:56 - artifacts I'd say it's kind of moving
92:58 - towards a spot and then it's coming back
93:00 - to the beginning so I couldn't make it
93:02 - loop with three dimensions but that's
93:03 - not what I want to do what I just want
93:06 - it to run fast right now so what I want
93:09 - to do I'm thinking thinking thinking aha
93:32 - what I want to do is draw it not render
93:36 - this as pixels anymore I want to start
93:37 - visualizing my own geometry that I'm
93:39 - inventing and designing so to do that I
93:42 - think a nice way to do that would be to
93:43 - think of the the screen as a grid of
93:46 - quadrants maybe with each and let me use
93:49 - an integer here each each having each
93:51 - square having a width of like 20 pixels
93:54 - and then I'll need a number of columns
93:56 - and rows and so I'm going to say in
93:59 - columns equals the width divided by W
94:02 - into rows equals height divided by W I'm
94:07 - gonna go here and I'm still gonna have
94:08 - essentially this same a loop but I'm
94:12 - gonna change it from and let me simplify
94:14 - here also let me look let me say for int
94:17 - I equals 0 I is less than number of
94:22 - columns for int J equals 0 J is less
94:27 - than number of rows and then I'm gonna
94:31 - get rid of all this X offset y offset
94:33 - I'm just gonna get rid of la stuff let
94:36 - me comment this out I'm gonna I'm gonna
94:38 - do something we're incredibly simple for
94:40 - a second I'm not drawing pixels
94:44 - I'm not updating pixels well all I want
94:47 - to do is I want to know X the X location
94:50 - is I times W the Y location is j j times
94:56 - w i want to translate to XY I'm going to
95:02 - use push matrix and pop matrix to make
95:06 - this translation only apply to this
95:08 - singular moment and I'm going to draw a
95:09 - line from from from 0 0 to W comma 0 and
95:17 - why do I not see anything something is
95:21 - stuck somewhere
95:23 - percent zero render percent right record
95:28 - false background 0 stroke 255 what did I
95:38 - miss
95:44 - what am I missing here ike / - oh oops i
95:57 - have a bug here not height / - height
96:01 - divided by W so now I should be able to
96:03 - see these lines no J + + stroke - 55
96:19 - what am I doing wrong here renders being
96:23 - called for since not being used
96:34 - oh-oh-oh-oh I have another really bad
96:37 - bug oh this is such a common error in
96:40 - processing in Java I declared gloop sir
96:42 - I declared global variables calls and
96:45 - rose up there and then I read Eclair
96:47 - them here so columns and rows are zero
96:49 - so many bugs these need to not be read
96:53 - Eclair just setting them here there we
96:55 - go this is what I wanted to see and let
96:57 - me just to be clear about this let me
96:59 - use random I'm gonna put a rotation here
97:02 - like rotate by actually let me just
97:04 - rotate by pi divided by eight right you
97:09 - can see these are a whole bunch of lines
97:11 - so what I want to do is set the rotation
97:13 - according to open simplex noise alright
97:19 - so in order to do that I now need to say
97:23 - here's my noise value and I'm going to
97:27 - put V offs back in and then I want to
97:32 - take that value angle equals map n which
97:37 - has a range between negative 1 and 1 to
97:39 - between 0 and 2pi and I'm gonna put n
97:44 - sorry angle in here and we have this X
97:49 - often oh and now I need to create X
97:52 - offset and Y offset so X offset is map
97:55 - the columns which go from 0 to columns 2
97:57 - between like 0 and again these shirt I'm
98:00 - just going to go between 0 and 2 the I
98:02 - should make these variables right to
98:04 - think about thing about those actual
98:06 - offsets and then oh I have this also as
98:13 - an angle let's call this a there we go
98:20 - and let me offset it a little bit let me
98:23 - let me make it a little bit bigger oh
98:25 - they only have the width is 20 that's
98:27 - fine let me I think also what I should
98:30 - do is translate by W divided by 2 W
98:35 - divided by 2 so that everything is
98:37 - centered nicely and I should probably
98:40 - draw the lines from negative W divided
98:43 - by 2 2 W 2
98:44 - - bye - there we go so now look at this
98:47 - this is my oh wait something is wrong
98:49 - here because each column is identical so
98:54 - I have something wrong
98:55 - ah this needs to be je but why I'm
98:59 - getting everything wrong all of a sudden
99:00 - take a deep breath everybody I'm trying
99:02 - to rush this there's no need to rush
99:04 - we're gonna be here for a while you run
99:08 - this there we go this is what I'm
99:10 - looking for this is now open simplex
99:12 - noise where I'm showing you is I can map
99:14 - this onto geometry but I really should
99:16 - make a nice terrain right that's coming
99:18 - so I can map this on to geometry
99:20 - now here's the thing what if what I want
99:24 - is different noise values sorry I'm
99:33 - looking at the chat the chat is giving
99:36 - me Corrections but it's behind me in
99:37 - time I gotta stop doing this
99:56 - I'm thinking here
100:11 - joy I don't want to use a different
100:13 - noise seed or do i I do
100:18 - okay so I'm thinking this is tricky
100:24 - yeah okay sorry
100:30 - yeah okay
100:42 - okay okay so what I think would make
100:51 - this more visually interesting is right
100:54 - now I'm only varying one parameter
100:56 - I'm just varying the rotation of each
100:58 - line at each spot in two-dimensional
101:00 - space but what if I want it to vary like
101:02 - a color also or the thickness of the
101:05 - line you know it's obviously drawing
101:07 - everything in a perfect grid what if I
101:09 - wanted to draw things not in a perfect
101:10 - grid that I think I'm gonna let you
101:11 - explore I need multiple two-dimensional
101:14 - noise space loops
101:15 - so what I did previously to do this was
101:19 - create a class called a noise loop class
101:21 - I'm gonna do that again so let me create
101:24 - a noise loop class oh this is gonna be
101:29 - hard to think what needs to go in here
101:31 - well what it needs is its own noise
101:37 - space sorry so basically the idea is
101:42 - that if I create a new noise loop I
101:45 - create a new noise space and what I can
101:51 - do is I can give it a seed so I'm gonna
101:54 - say int seed equals int random you know
101:59 - and again I'm just gonna pick some
102:00 - arbitrary range between like 0 and
102:02 - 10,000 I could be more thoughtful about
102:03 - like sort of the maximum integer
102:04 - Rainer's or something
102:06 - but now what I'm doing is I'm having
102:08 - multiple simplex noise generators each
102:11 - with a different seed this is slightly
102:13 - different than what I did in my previous
102:16 - in in the previous coding challenge
102:19 - where I used a different part of the
102:21 - same noise space but here I'm using a
102:23 - different seed so now what I should be
102:26 - able to do is I'm just gonna write if
102:29 - there's a variety of ways I can do this
102:30 - but right now let me just put an eval
102:32 - function in this and this is kind of
102:35 - silly I don't necessarily need to wrap
102:36 - open simplex noise into a separate class
102:39 - because I could just make a bunch of
102:40 - instances of it that's I think you know
102:42 - what let's just do it that way I think
102:45 - there's going to be some benefit to
102:47 - wrapping it into a class but just to
102:49 - demonstrate this idea I could do this
102:51 - right although I might want to have
102:55 - differ
102:56 - diameter spaces no let's write I'm I'm
102:59 - very I'm very conflicted here yes I'm
103:02 - gonna wrap it into a class because the
103:06 - reason why I want to do that is I also
103:09 - want to have a variable that's that
103:10 - diameter the diameter of the tourists
103:13 - basically and that's something that I
103:15 - want to be able to set when I create the
103:19 - noise loop so in other words and then I
103:22 - have an eval function in which I would
103:24 - get X offset Y offset Z and then an
103:28 - angle and I would do exactly I could and
103:35 - there's more that I could there's and
103:37 - then I would take this right here so
103:43 - it's what I'm looking for yes and then I
103:48 - would also give it a minimum and a
103:50 - maximum and so let me give it minimum
103:54 - and maximum and I'm using some weird
103:57 - variable naming here but that's just
103:59 - what I'm doing right now
104:01 - because that way and I I think I want to
104:05 - like store the X offset and Y I'll
104:06 - calculate that in here somewhere but I
104:08 - haven't figured out how to do that just
104:09 - yet so oh and I need now what I need
104:13 - thank you very much is I need this
104:16 - calculation to happen in here and then I
104:30 - this is now between you know I only need
104:34 - the maximum no oh no no no this is
104:36 - between zero and the diameter and then
104:41 - I'm returning map the noise result which
104:46 - goes between Z negative 1 and 1/2
104:49 - minimum and maximum so let me just
104:52 - recreate using this I've encapsulated
104:54 - all of the ideas of the noise loop into
104:57 - my own class that has its own seated
105:00 - open simplex noise object so now if I've
105:04 - done everything correctly this this I
105:08 - don't need any more
105:09 - I'm going to create a noise loop I'm
105:12 - going to call it like loop loop one and
105:16 - in setup I'm going to say loop 1 equals
105:21 - a new noise loop what do I need to
105:25 - create the noise loop I want to know the
105:26 - diameter - I'm the minimum maximum 0 and
105:30 - 2pi and then down here I'm saying float
105:42 - float a equals an OOP one eval X offset
105:48 - Y offset and angle so this should be
105:50 - exactly what I had before
105:52 - no oh and these have to say float in
105:54 - Java you have to type everything and I'm
105:57 - just data type everything I mean I'm
105:59 - forgetting that I'm forgetting that
106:01 - again here because I'm so used to
106:03 - JavaScript these days and cannot and
106:07 - this is not a void function this returns
106:10 - a float
106:10 - speaking of typing things all right so
106:13 - this is the same as what I had before
106:14 - right
106:15 - the difference is I am now taking that
106:20 - angle and passing it to my noise loop
106:23 - function I guess do I I guess I really
106:26 - need to give it that noise Luke me into
106:28 - the x and y offset outside no I'm going
106:30 - to keep that here so in theory what I
106:32 - can do now just bear with me I don't
106:35 - know that I've explained this super well
106:36 - I need to come back to it at the end is
106:38 - I can create a second noise loop whoops
106:44 - let me do like for color I'm gonna do
106:47 - two like let me do I think I let me call
106:49 - this like our loop and G loop our B loop
106:58 - what I can do is I can create two more
107:01 - and I can sorry this is what I should be
107:07 - so I have our loop and G loop and this
107:12 - should really be D loop for diameter
107:13 - maybe no no a loop for the angle a loop
107:18 - for the angle of rotation
107:19 - I don't know and these should go between
107:21 - 0 and 255 maybe I want to give them like
107:24 - a larger diameter and now what I can do
107:29 - is I could say let me also draw a
107:32 - rectangle separately like let me say
107:36 - rectangle 0 0 with with this is this is
107:41 - really a square let me just see what
107:47 - happens if I just add something that's
107:50 - white here with some alpha G loop oh gee
107:56 - loop B loop B loop this is now a loop
108:02 - oh the squares are off because of the
108:06 - way that i centered everything that's no
108:08 - problem we say rekt mode Center great so
108:13 - now I'm going to also say here no stroke
108:17 - let me draw the I don't know I should
108:21 - just make the line color I don't know
108:22 - why I'm drawing a background but the
108:24 - point is I'm just showing you the
108:25 - possibilities now if you will indulge me
108:29 - for a second
108:30 - I can now also say float R equals this I
108:37 - can get the looping values R and B and I
108:42 - can put those into here are you know R
108:47 - comma 100 comma B to get some colors and
108:54 - give it a little more so now okay so why
109:00 - why is that not changing very much so
109:04 - what did I miss
109:05 - Oh
109:12 - people and shatters think he's tired I
109:15 - think that's true all right this should
109:18 - probably be its own separate video but
109:20 - anyway oops
109:22 - I'm people that chatter saying that I'm
109:24 - tired with tequila I am I'm not paying
109:25 - attention to lots of things I'm doing
109:26 - this should be our loop B loop there we
109:29 - go wha that's all happening way too fast
109:34 - so let me make the diameter much less I
109:38 - want these colors to be a little bit
109:40 - brighter so let me Mint make the minimum
109:42 - 100 all right so you can see now this is
109:45 - now the color is changing I could make
109:48 - another loop for the thickness in a way
109:51 - I kind of want to like not draw the
109:52 - lines anymore because I'm just curious
109:55 - about this color yeah so that's kind of
109:59 - interesting you can see I mean this
110:01 - really is just another way all of these
110:03 - are kind of the same but it might have
110:05 - been more interesting to vary the
110:07 - thickness of the line so let's I just
110:10 - want it let me just try that if you will
110:11 - indulge me for a little bit longer so
110:14 - I'm going to say like s loop which I'll
110:17 - also use to and goes between like stroke
110:20 - weight of one and Stroke rate of six
110:22 - let's put the line back and let's say
110:27 - I'm gonna say stroke weight is the S
110:31 - loop evaluate and then I'm going to say
110:35 - stroke weight SW and then I need to also
110:42 - declare it up here we need another s
110:46 - loop now that's kind of interesting
110:50 - oh I should make it like this the length
110:53 - of it there's so many possibilities oh
110:56 - this is terrible but I I think actually
110:58 - what I would like is for it to be much
111:01 - thicker yeah so that's kind of
111:04 - interesting anyway you see the point I
111:06 - should make that the color let's get rid
111:10 - of the let's least try to finish with
111:11 - something and then render it to a gift
111:13 - please please let me get somewhere with
111:15 - this so I'm gonna take this out and I'm
111:18 - gonna say stroke our 100 our 50 be 200
111:26 - whoa where is oh I still have the square
111:31 - in there there we go I don't know what
111:34 - I've done look I don't like this at all
111:42 - I mean I'm demonstrating the idea it's
111:48 - so fast all right let me try giving it
111:52 - some more frames to work with so that I
111:56 - can slow down and there we go I don't
111:59 - claim to have made anything of any
112:02 - particular visual magic here I like the
112:05 - first one that I made better frankly
112:06 - don't you just end the video there
112:09 - I should just ended the video where I
112:14 - started I think maybe we won't include
112:17 - this digression I'll just go to the
112:20 - terrain I think that makes more sense so
112:23 - I think this can end unless I can think
112:34 - of oh but I do like the idea of
112:38 - demonstrating how you can have multiple
112:39 - noise loops in a separate class maybe
112:42 - this is nicer than I think I just can't
112:44 - see the beauty in it spectral praiano
112:51 - right it's really hard to follow because
112:53 - you're using for loops yes six inherits
112:57 - how many people are desperate for the
112:58 - es6 inheritance because I'm gonna do
113:01 - that
113:01 - I should make them thicker what would
113:05 - have been interesting I think would okay
113:07 - let's try that all right well let's just
113:09 - let me let give me a minute to like play
113:13 - let's make them
113:20 - like what if I actually build like let
113:22 - it go all the way down oh yeah that's
113:26 - kind of more interesting and let's let
113:29 - the color have a bit more change to it
113:36 - oh you know what would actually be a
113:40 - different way of experimenting with this
113:43 - would actually be to go over a larger
113:46 - space in the 2d directions there we go
113:49 - this is what I was like looking to do I
113:52 - knew I was missing something all along
113:57 - yeah okay oh good this wasn't all for
114:03 - naught this wasn't all for naught ah
114:06 - this is what I was missing okay hold on
114:10 - we back up here
114:34 - all right I'm not very happy I'm not
114:39 - very happy with this visual result right
114:41 - now and I just suddenly realized what's
114:47 - wrong here what I actually am looking at
114:50 - here when I left to be really really
114:52 - small I I was so focused on my tourist
114:54 - loop that I forgot to think about the
114:58 - fact that I also have this two
114:59 - dimensional space and I am actually
115:02 - looking at a very small section of it
115:05 - and so the values are so similar to each
115:07 - other and where is that happening in the
115:09 - code that's actually happening here
115:11 - before I had like an increment value
115:14 - that I was playing with and instead of
115:16 - having an increment value I'm just
115:17 - mapping between 0 & 2 I'm looking in the
115:21 - whoops I'm looking in the two
115:30 - dimensional space between 0 & 2 and if I
115:34 - just were to expand that out I'm gonna
115:36 - have more variety I think and I'm gonna
115:39 - see a more interesting pattern so let's
115:42 - do that so let's change a few things
115:44 - number one is what where am I here let's
115:47 - look at the values I have up here so
115:49 - this is all fine let's actually give me
115:51 - like let's actually have a quite a bit
115:53 - more variety of thicknesses and maybe we
115:57 - can also like Ram pack up these up a
115:59 - little bit but really this I think is
116:01 - going to be the key so let me look from
116:04 - 0 instead of 2 to 2 0 to 10 there we go
116:09 - and so now this is more like what I was
116:12 - kind of imagining we might get this is a
116:15 - seen it and it's actually looping let me
116:19 - give it in a way I kind of want to like
116:23 - take out the loop to let it 360 is good
116:25 - so I think this is good let me give it a
116:28 - what I'll give it the full range of
116:29 - color and let me actually set this back
116:32 - down to zero
116:34 - maybe those are too thick I mean I got
116:36 - to stop playing with this there we go
116:38 - okay I like this whatever here's what
116:41 - here we go
116:41 - this is my
116:44 - four dimensional 2d open simplex no loop
116:48 - and now it's time to render this as a
116:51 - gift why not right so I am going to all
116:55 - I have to do is change record to true
116:58 - hit run wait a little bit see you in a
117:03 - few minutes
117:28 - in the chat Espen Larsen
117:36 - [Music]
117:45 - Oh your lack see says I made the middle
117:51 - it stopped
117:51 - we made the mini version fluoridation
117:53 - all right it has it has rendered now I
117:59 - should be able to just run ffmpeg again
118:01 - I'm going to overwrite my previous gif
118:03 - no no I don't want to overwrite it let's
118:06 - keep my previous gift
118:07 - the noise loop - let's render that out
118:10 - and this video has come to a close
118:14 - let's take a look we this was our first
118:16 - noise looping gif and now we have a new
118:18 - one there it is can you find the loop
118:24 - can you detect the loop now I don't I
118:27 - hopefully I think so here's the thing do
118:36 - this again let me find my looping gif
118:42 - there it is by the way this is my
118:43 - previous one here's this one I should
118:46 - really just and and let me open it up
118:48 - preview it here and there we go so this
118:50 - is now complete this is open simplex
118:53 - noise in a two dimensional space
118:56 - different parameters of each element
118:59 - being drawn are controlled by different
119:02 - seated open suplex noise spaces each of
119:05 - which is looping over this like torus so
119:09 - I'm excited to see what you might make
119:12 - from this and but I think you know I'm
119:18 - excited to see what you might make from
119:19 - this and I think one thing that is
119:21 - missing from what I've done here is I am
119:24 - locking myself to the two-dimensional
119:28 - grid and if you look at its yin Jacobs
119:31 - work you'll see that there is a kind of
119:34 - ingenuity and creativity to how the two
119:38 - dimensional space is drawn and where
119:41 - things are placed so this is in still a
119:44 - kind of literal visualization of the
119:47 - noise data and I'm just knew I have some
119:49 - different parameters that I'm trying but
119:51 - I think you could go further with this
119:53 - and you could think about how what it is
119:55 - you're drawing in this space in addition
119:57 - and I would definitely like to do this
119:59 - you could do this with a terrain and I
120:02 - do have a coding challenge Perlin noise
120:04 - terrain which uses Perlin noise classic
120:06 - which you can now try with open simplex
120:08 - noise and see what kind of visual
120:10 - quality it has as well as make it a loop
120:17 - so thank you for watching if you made it
120:20 - all the way to this video at the end of
120:22 - this video I am quite impressed and I'm
120:24 - really thrilled and I really just can't
120:26 - thank you enough for sticking with me
120:28 - with this and there you go so Rory
120:35 - O'Connor writes if you want a perfect
120:37 - loop just reverse it end-to-end so yes
120:42 - that is true it would loop but it would
120:46 - have a particular visual quality to it
120:48 - where you would see it suddenly come to
120:50 - a stopping point and then reverse
120:52 - direction at you know I suppose it's
120:55 - possible you could design it in such a
120:57 - way that that's not detectable but this
121:00 - is a smoother way to be able to achieve
121:03 - that effect alright
121:17 - all right
121:19 - not you I don't know how you're gonna
121:21 - make any the unit you're gonna make a
121:24 - mole if you can make I was a mountain of
121:26 - mess if you could make a molehill out of
121:27 - it go and reverse or make a mountain out
121:29 - of a molehill maybe that was a molehill
121:31 - as a molehill LMS understand this
121:32 - expression works I have to it's 12:30
121:38 - a very ill-advised plan would be for me
121:42 - to do my inheritance tutorial now but I
121:45 - do have a little bit more time and I'm
121:47 - going to do that I'm not gonna look at
121:49 - the terrain unfortunately okay I just
122:10 - want to look at this by the way with I
122:13 - never mind and so let me quit this and I
122:29 - mean eggs out of here p5 web editor
122:37 - where did I do the inheritance stuff
122:40 - prototype discussion I did it here okay
122:42 - let's do it with I'm gonna take a short
122:47 - break just to get some water let me get
122:54 - this set up okay maybe I'll try to you
122:56 - luck see is the MIDI version easy for me
123:01 - to find because I will play it while I
123:03 - take a short break
123:36 - oh oh I got to fix my Michelle I will I
123:43 - will get to that eventually
124:00 - [Music]
125:00 - I'm too tired to explain what I'm doing
125:03 - right now I'm just getting myself ready
125:08 - coffee I don't I I probably should get
125:11 - some coffee I don't have I could get
125:13 - coffee but you'd be waiting a lot more
125:14 - than just a few minutes which is what
125:16 - it'll take me to get water
125:56 - okay it's very quiet it's weird lists
126:00 - ominously quiet okay I'm ready I think
126:06 - maybe I missed something yeah not yet
126:10 - okay yeah let's do let's be a little
126:13 - more
126:52 - okay
126:55 - all right I'll hey I'm ready I am ready
127:06 - all right I didn't see where's that MIDI
127:10 - file Alexei MIDI polar to Cartesian oh
127:19 - here we go
127:28 - okay I'll download this other okay oh
127:34 - you can't hear this or maybe
127:41 - you can't hear this because it's coming
127:42 - through my microphone
127:46 - I got to learn how to play this
127:52 - [Music]
127:58 - so I have to get some water
128:02 - i I have to change settings to get the
128:05 - output of the laptop on to and I can
128:10 - like download it I'll have to be able to
128:12 - play that once I get it on the sound
128:13 - board I can play it I'll just have to
128:14 - play the actual one I'm gonna mute my
128:16 - mic I'm gonna put it on to the wallpaper
128:20 - you can still hear me it's you can hear
128:25 - because it's coming through my mic
128:30 - this song's not long enough for me to
128:31 - get water all right I'll be back
128:35 - I need a waiting animation
128:38 - [Music]
128:59 - [Music]
129:33 - [Music]
129:44 - [Music]
130:14 - [Music]
130:40 - [Applause]
130:42 - [Music]
131:59 - [Music]
132:38 - [Music]
132:53 - [Music]
132:57 - alright I'm back
132:59 - [Music]
133:44 - I'm just waiting for that part at the
133:46 - end I was trying to time Mike
134:07 - Oh
134:10 - [Music]
134:17 - [Music]
134:19 - am i alive streaming right now well for
134:22 - God
134:41 - okay all right okay
134:48 - like on the camera I know if I just did
134:52 - this I'm gonna give myself till 1:30 I
134:56 - mean I would love to be done before then
134:58 - but that's kind of my that's my limit
135:02 - that's my definite limit okay all right
135:16 - I am here in this video to talk to you
135:21 - about something called inheritance
135:23 - inheritance in the context of
135:25 - object-oriented programming and
135:28 - JavaScript and es6 classes poof so first
135:32 - of all there are three core foundational
135:34 - principles to object-oriented
135:36 - programming
135:36 - let me write those down there's this
135:38 - idea of encapsulation there is this idea
135:43 - of inheritance that is the topic of this
135:47 - particular video and there is also the
135:49 - concept of polymorphism which I will
135:52 - come back to and I have made videos on
135:55 - all of these topics before I can link to
135:58 - them those videos however were all made
136:01 - in the processing programming
136:02 - environment and looking at these three
136:04 - principles and the java programming
136:06 - language now i am talking about exactly
136:09 - the same thing but in javascript and i
136:13 - have already made a whole set of videos
136:15 - about encapsulation and object-oriented
136:17 - programming javascript making use of
136:19 - something called es6 classes so one of
136:23 - the things you have to get used to if
136:25 - you choose to spend your life
136:26 - programming in JavaScript is that it's
136:29 - just always changing and there's 500
136:31 - different ways to do the same thing and
136:32 - everybody's got their opinion on which
136:33 - way is best and a lot of my older videos
136:37 - used a prototype a prototypical object
136:41 - based way of doing object-oriented
136:43 - programming with a constructor function
136:45 - and you'll find those in older coding
136:47 - challenges and you'll even find a set of
136:49 - videos about how to do object-oriented
136:51 - programming that way and even one about
136:53 - how to do inheritance that way and if
136:56 - you watch that you're a true champion
136:57 - because this is wildly confusing and I
137:00 - have no idea if I explain that well but
137:01 - I'm here in this video to talk about es6
137:04 - classes so what is a class sorry es6
137:09 - being the version of JavaScript that
137:11 - came out in in 2015 and it's currently
137:14 - 2019 while I'm recording this but it is
137:17 - now pretty widely supported across all
137:19 - browsers you know you have to look up
137:21 - the exact specifications but I think we
137:22 - can feel pretty comfortable using it so
137:25 - the idea of a class and I'm gonna use as
137:28 - my example
137:29 - something called particle because I am
137:32 - demonstrating this in the context of
137:33 - animation and graphics so I'm drawing
137:36 - particles in a canvas those particles
137:38 - move around the canvas and the class is
137:41 - a template for the making of an object
137:47 - if I create a particle class then I can
137:50 - have a variable somewhere else maybe I
137:52 - call it P and I can say new particle a
137:58 - metaphor analogy that's often used for
138:01 - is it a metaphor analogy I'm just a
138:03 - cookie cutter I think it's really an
138:04 - analogy yeah an analogy that's often
138:10 - used to describe the distinction between
138:12 - the class and the object is the cookie
138:15 - cutter versus the cookie so the cookie
138:17 - cutter doesn't isn't actually a cookie
138:20 - it's a thing that you can make cookies
138:22 - with so this is a template there's no
138:24 - particle object here this is just a
138:26 - template to make actual particle objects
138:29 - and if I have my template I can make
138:31 - more than one particle objects within
138:33 - one particle object each with its own
138:35 - set of properties all made from the same
138:37 - template so the new keyword here saying
138:40 - new particle means execute something
138:43 - inside the class called a constructor
138:45 - function so I'm kind of I guess I'm by
138:47 - accident reviewing some of the basics of
138:50 - es6 classes and object-oriented
138:51 - programming to get myself into the
138:53 - inheritance topic but I'm gonna I'm
138:54 - gonna kind of move along because you can
138:56 - find and see many more details and
138:57 - examples about this in the other videos
138:59 - so this is the basic idea so let's go
139:02 - over to the code for a second and what I
139:05 - have in this if i refresh I've got this
139:07 - little dot moving around and what I want
139:11 - to do is gonna look at the timeout for a
139:13 - second my upper text is out of frame
139:16 - let's see how bad that was oh that's
139:21 - weird
139:21 - what's out of frame because I see it all
139:25 - in my preview
139:33 - what's out of frame don't use the word
139:39 - template for es6 oh just something wrong
139:43 - what's out of frame
139:56 - mmm don't see anything out of frame let
139:58 - me look on my preview over here Oh
140:04 - welcome new member jord Evander bolt I'm
140:14 - so weird
140:17 - because what I see
140:22 - this is so weird hold on let me look at
140:25 - the livestream here view on watch page
140:29 - no I see it not out of frame nothing is
140:33 - out of frame okay I think maybe okay we
140:37 - come on you've scrolled up or something
140:39 - you've scrolled on your screen cuz it's
140:41 - all in frame okay I've written portico
140:51 - yes okay somebody has their YouTube
140:53 - window scrolled crisis averted what's
140:58 - coming over here okay I forgot what I
141:06 - was doing but this is good okay
141:15 - there's a little there's a little thing
141:18 - that's particle anyway um alright so
141:22 - what I have over here in my sketch is a
141:25 - single particle moving around the canvas
141:27 - oh wait time out why was I not supposed
141:29 - to say template a class is a Brooklyn
141:34 - wait hold on
141:36 - blueprint I'm being trolled
141:39 - no it's not for es6 for it's for a class
141:42 - which is correct your class is a
141:44 - blueprint okay all right I'm gonna I'm
141:50 - gonna I'm gonna keep that alright looks
141:57 - alright so I'm so whatever have over
142:04 - here is a canvas with a little dot
142:05 - moving around and this dot is an example
142:08 - of a particle object so here's my class
142:10 - I have the constructor the object gets
142:13 - an X and a Y and the update function
142:15 - changes the X&Y randomly and the show
142:17 - function draws it as a point this is
142:24 - what happens when you live stream for
142:25 - like two and a half hours drops and
142:27 - that's a point it would be great if
142:30 - there was a function called point by the
142:32 - way anyway so let's say now let's say
142:36 - this is your life this is you this is
142:37 - what's happening to you you know what I
142:39 - would like I would like to put another
142:41 - one of these particles I wanted to but I
142:43 - wanted to look different and so I wanted
142:46 - to be a square particle so the first
142:48 - thing you might do is like okay I'm
142:50 - gonna make a boolean variable like is
142:53 - Square and I'm gonna set that to a
142:57 - square I'm adding another argument here
143:00 - Square and then I'm gonna say hmm all
143:04 - right if this dot is square then draw
143:10 - this as a oh not a square a function
143:15 - then just use rectangle this dot X this
143:18 - done why when will this ever end least I
143:21 - could use the square functions the least
143:23 - I could do could say square otherwise
143:26 - make it a point
143:28 - and then oh I'm so tired already and
143:31 - then I can go over here too why is it
143:36 - what
143:47 - why is it not oh well I need a
143:50 - parenthesis here and then I have to go
143:53 - over here and I could change this to
143:55 - true because I want it to be a square
143:58 - and then a refresh and look it's the
143:59 - square and then I could say false and
144:01 - it's not so now I could have I could
144:04 - have two particles oh I could have P 1
144:09 - and P 2 and I could have P 1 do this and
144:13 - P 2 do this I'm so tired
144:17 - this is so much work and so much coding
144:20 - I'm gonna call it update and show on
144:22 - both of those and there we go now I have
144:25 - my circle my square alright so that's
144:27 - one solution to this I have two
144:29 - different mostly the same things with
144:32 - some sort of core essential difference I
144:34 - don't like this solution let me do it
144:36 - another way I'm gonna make another I'm
144:39 - gonna just create a new JavaScript file
144:40 - I'm gonna call it square J s I'm gonna
144:44 - go here I'm gonna copy paste the whole
144:47 - thing paste that in here I'm gonna get
144:50 - rid of this idea of is square and I'm
144:52 - gonna have a class called square P 4
144:55 - square particle I'm gonna get rid of
144:57 - this variable and then I'm going to this
145:02 - one's the square so I'm gonna draw it as
145:04 - a square and then this one is the circle
145:08 - so I'm gonna draw this just as a plain
145:10 - old point and I don't need this anymore
145:12 - and I don't need this so I have
145:14 - basically a particle class and I have a
145:17 - square class square P class they're
145:20 - entirely the same but one draws is a
145:22 - square and one draws as a particle I'm
145:24 - gonna go back to sketch touch a s and
145:25 - I'm gonna say new square square P and
145:31 - I'm going to refresh and if I did
145:34 - everything right no square P is not
145:36 - defined because I forgot to reference it
145:38 - in my index.html so let me do that then
145:43 - I'm gonna go back and there we go
145:47 - goodnight this video is now over but not
145:49 - at all in fact I'm only just getting
145:51 - started
145:52 - all of this was exposition exposition to
145:55 - the point where we are right now where
145:56 - we real we think to ourselves there has
145:59 - got to be a better
146:00 - way there's got to be a better way than
146:01 - having some kind of like type variable
146:04 - inside of my class and then I use if
146:06 - statements or to have two separate
146:09 - classes which I've just copy pasted the
146:11 - code and changed some things how could I
146:13 - have this idea of classes that inherit a
146:18 - bunch of properties from another class
146:20 - but modify them and this is in fact what
146:22 - inheritance is for so there are lots of
146:24 - examples of this and inheritance the way
146:27 - you might design your software
146:29 - inheritance can operates in a tree like
146:32 - structure so maybe I'll come back to
146:35 - that so let's I don't know what I'm
146:38 - saying I was going to go off on I don't
146:43 - know what's going on in which I should
146:47 - not look at the chat should not look at
146:49 - the chat do not look at the chat or look
146:51 - at the jet I don't don't look at a jack
146:53 - so let's now think about that in the
146:56 - context of this what if I could write
147:01 - another class and I'm gonna call that
147:03 - class square P which is like the
147:08 - silliest name for a class ever but it's
147:10 - somehow my example for this video so
147:13 - what happens when you record a tutorial
147:14 - after three hours of recording tutorials
147:17 - class square P ah but I missed the most
147:21 - important piece of this you had to wait
147:23 - through like so much video just to get
147:25 - to this point where now I am going to
147:28 - say extends and this is the most
147:31 - important thing particle this is the
147:35 - keyword extends is a keyword in
147:38 - javascript in es6 that makes the square
147:42 - particle class the square p class
147:45 - inherit from particle so let's think
147:48 - about what this is now the constructor
147:50 - is a special case the constructor is a
147:53 - special case we're gonna have to work
147:54 - with it in a different way but if what
147:59 - this means is if there is an update
148:02 - function update function and if there is
148:08 - a show function that it's as if I
148:14 - be pasted the update in the show
148:15 - function into square P but I don't
148:18 - actually have to these functions are now
148:20 - part of the square P class it extends
148:24 - from particle inherits particle this is
148:26 - also sometimes referred to as the child
148:29 - class or maybe the subclass I'm getting
148:33 - close to the top I know and this is
148:36 - often referred to as the superclass or
148:38 - the parent class and the word super is
148:42 - quite important here because that's
148:43 - actually a key word a key word in
148:46 - JavaScript that's gonna allow us to do
148:47 - some interesting things later in a
148:49 - moment alright so now I said the
148:52 - constructor was a special case you
148:54 - really always have to write your own
148:56 - constructor so no matter what even if I
148:59 - want to make this Square P an exact
149:02 - replica of particle I still have to
149:04 - write the constructor here and then I
149:07 - could put my own code in here but in a
149:09 - lot of cases what I want to do is
149:11 - actually say particle dot call this this
149:17 - is really weird syntax but essentially
149:19 - what this is doing is it's saying hey
149:21 - you know what I want to do when I create
149:24 - a square p particle what I want to do is
149:27 - do everything that I do in the particle
149:30 - but to this object this object and
149:32 - that's we're essentially calling the
149:33 - particles constructor so let's go do
149:35 - that right now so I'm coming over here
149:39 - and what I'm gonna do now is I'm just
149:40 - gonna have square P extends particle I
149:44 - now don't need to include these here and
149:48 - instead of having this code here I could
149:51 - say particle dot call this do I need to
149:56 - do something with the XY z-- don't I hmm
150:00 - let's call it confetti I know I used
150:03 - confetti somewhere else
150:08 - wait this is right right home we just
150:10 - see yeah no that's not right what did I
150:18 - miss here do I say this
150:21 - X
150:21 - like this no what am I forgetting
150:28 - I guess I'll look at my examples uh
150:36 - where are my examples a nature of code
150:43 - I've done this so many times recently I
150:46 - don't know why I'm blanking on this
150:47 - right now Systems inheritance confetti
150:55 - yeah I didn't even do it in here you
151:00 - don't have to what is wrong with me what
151:02 - am i losing I'm losing my mind
151:12 - super XY yeah oh I'm totally wrong oh
151:22 - hold on let me be sure about this cuz I
151:26 - was doing this in class yesterday
151:28 - I think I'm just remembering the
151:29 - prototype thing Oh
151:33 - let me just be sure about this let me
151:35 - find my sketch from class here
151:38 - then why you inheritance demo square yes
151:45 - super super all right I have done
152:04 - something quite wrong I have used I
152:08 - spent this whole time explaining that
152:11 - there's this thing called es6 I guess I
152:13 - erased that which means I don't have to
152:15 - use the old prototype way in JavaScript
152:17 - and yet I just did that by accident this
152:19 - is from the old way huh what is wrong
152:21 - with me
152:22 - I spent some time explaining to you why
152:27 - this can be referred to as the
152:29 - superclass and why that keyword is
152:31 - important it's because I
152:34 - like redo that part of the video or is
152:36 - it like interesting it's not really
152:37 - interesting to have this mistake in
152:38 - there I don't remember where I said that
152:42 - though yeah I think it's not interesting
152:47 - to have that mistake in there so did I
152:55 - let's see if anybody can remember did I
152:59 - yeah super is called I know I know I
153:05 - know I know I know
153:06 - everybody's telling me this here's my
153:08 - question for you if anybody can remember
153:10 - the last 15 minutes of your life
153:12 - watching this did I reference super and
153:16 - parent and child and sub both after I
153:20 - wrote particle call this or did I write
153:24 - particle call this and then talk about
153:26 - that because if the last thing I did was
153:30 - just write particle don't call this I
153:31 - can just do that again
153:33 - I will give the chat a second to catch
153:39 - up is 1 o'clock maybe I can scroll back
153:45 - yeah I mean mark pal writes it is
153:48 - interesting to have a mistake I agree
153:50 - it's interesting to have this mistake in
153:51 - the live stream but the edited videos
153:54 - and sometimes it's useful in the coding
153:55 - challenges to have mistakes but I feel
153:57 - like sometimes the people who come to
153:59 - find the videos later are just looking
154:00 - to learn how it works and an extra 5
154:04 - minutes of getting it wrong is confusing
154:07 - first came before super ok yeah after
154:18 - talking about sub super class that's
154:20 - what Nathan is saying but people in the
154:22 - chatter telling me super before oh
154:28 - that's the same thing excellent ok so
154:32 - let's see if nacho can work his magic
154:37 - and I'm just gonna go from where I wrote
154:42 - but where did I write constructor
154:45 - I don't know we'll try something alright
154:56 - so I think what I did so actually
155:03 - weirdly I think it might work without me
155:06 - explicitly calling super and that's but
155:10 - I think it's bad that's bad kind of bad
155:12 - practice now while I could be done by
155:24 - just inheriting update and show and like
155:26 - sort of assuming I'm also going to
155:27 - inherit the constructor its profits it's
155:30 - a good habit and I think in almost all
155:32 - cases you really need to explicitly
155:34 - write your own constructor even if you
155:37 - are extending another class but in the
155:40 - case where all I want to do is when I
155:44 - make a square P a square particle and
155:47 - actually in my nature of code book which
155:49 - is example is mostly the same I call
155:51 - this class confetti that's another name
155:53 - I could be using if I want to just say
155:56 - you know what I'm gonna define my own
155:58 - constructor but I want to do exactly the
156:01 - same thing as whatever happens in here
156:03 - and the way to do that is just by
156:05 - calling the super function so the super
156:08 - the keyword super means execute
156:11 - something from the parent or superclass
156:14 - so super with parentheses means run the
156:17 - constructor so let's now actually try to
156:19 - go over and and do this in the code so
156:23 - hold on I have to back I have to back up
156:27 - here I just realized
156:43 - all right so now what we can do is we
156:47 - can say square P extends particle this
156:50 - is the magic once I've extended particle
156:53 - ah I could just get rid of this that
156:56 - stuff is all inherited now from particle
156:59 - whoo-hoo and then I could just say hey
157:02 - super do the same thing and I still have
157:04 - to pass in those arguments this is
157:06 - basically saying hey you're making a new
157:08 - square P when you make a new square P go
157:11 - ahead and make a call the particle to
157:15 - construct the code that's in the
157:16 - particle constructor so this is now the
157:18 - square particle if let's call this
157:19 - confetti just as like a different name
157:24 - now if I go back to the sketch and this
157:28 - was left over from before I forgot that
157:30 - I had this in there
157:31 - right if I run this again we have two
157:35 - identical particles it's as if I made
157:38 - two particles because the square the
157:41 - confetti class the confetti object is a
157:44 - complete duplicate it just inherits the
157:46 - particle class completely but the whole
157:50 - point of this is we can now do things
157:52 - like augment and override so what if I
157:57 - want my confetti objects to always have
158:00 - a color so maybe I can add another value
158:04 - here like I'm gonna call this this dot
158:06 - brightness or this dot bright equals a
158:09 - random number between 0 and 255 so
158:12 - school confetti objects do everything a
158:15 - particle does but get an additional
158:17 - property and then maybe you know they
158:20 - don't actually that I want to draw them
158:22 - a different way I want their physics to
158:24 - be exactly the same so I want to inherit
158:26 - the update function but I want to draw
158:28 - them a different way so I can actually
158:30 - override the show function so if I write
158:34 - a function that has the same name of the
158:36 - function that it's inheriting then this
158:39 - will then be ignored for any confetti
158:41 - objects and just to change that name
158:45 - here let me call this confetti so let's
158:48 - do that let's all mint and override I
158:51 - mean those are sort of terms I don't
158:53 - know what the technical term for those
158:54 - things are so back over here I might say
158:56 - something like all right so initialize
158:59 - X&Y the same way but add a new sorry add
159:03 - a new property that's a random number
159:05 - between 0 and 255 then override the show
159:08 - function you know I could go back and be
159:10 - like well how did I do this in no but I
159:13 - don't need to I don't even need to I'm
159:14 - just gonna say in the show function I'm
159:16 - gonna say fill this table right stroke
159:20 - 255 stroke weight 1 and then I'm gonna
159:25 - say square square this dot X this dot y
159:31 - at oh maybe this should also have you
159:34 - know a subtle called R for like the side
159:36 - length and I'm gonna make that 10 and
159:39 - then I'm gonna say this dot R so now if
159:44 - I run this we can see look there is a
159:47 - square there's a confetti particle and a
159:50 - regular particle so this is that this is
159:52 - the magic here and listen you can do so
159:57 - okay what have I shown you so far this
159:59 - is the idea of inheritance I can have a
160:01 - base class or I can have a parent class
160:03 - I can inherit from it I can add
160:05 - properties and I can override but guess
160:08 - what I could also do let's say what I
160:10 - want to do is you know my confetti
160:13 - object it should update just like a
160:16 - particle updates but I also want to do
160:18 - one thing more I wanted the size to
160:20 - change so if I come back to here one
160:24 - thing I could do is in the confetti
160:26 - object I could say update and then I
160:30 - could say well first do whatever you do
160:35 - in the parent object call super dot
160:38 - update so do whatever you would normally
160:40 - do for updating and then do one more
160:42 - thing this dot R + equal you know random
160:46 - value so in addition to and let's in
160:50 - addition to sorry changing the and
160:53 - that's going to be too much in addition
160:55 - to changing the x and y which presumably
160:57 - is taken care of by what it's inherited
160:59 - also change our and now there we go you
161:02 - can see that this is now having an
161:04 - additional behavior the size is changing
161:06 - as a buoy now I don't know that the way
161:08 - that I've set this up
161:10 - is particularly elegant or useful but
161:12 - what I will say is a common technique
161:15 - especially you'll see this if I in some
161:17 - of my videos where I work with physics
161:19 - libraries is that you might have kind of
161:21 - like this base class that includes all
161:24 - of the code and math for the physics of
161:26 - how something moves but and you can
161:29 - imagine that being a particle class but
161:31 - you have all these different variations
161:32 - of that with slightly different
161:34 - behaviors and different design elements
161:36 - so that that base class can kind of be
161:39 - the core physics of your system but lots
161:42 - of different things can exist in your
161:44 - system and be customized in ways without
161:46 - having to duplicate code over and over
161:48 - again I should also mention that classes
161:51 - can only inherit from one other class
161:54 - but it is called a tree an inheritance
161:57 - tree because an example that I think
162:01 - I've given before in other videos is an
162:02 - animal kingdom so you could imagine a
162:05 - scenario where you have this idea of an
162:11 - animal class right and maybe that has
162:15 - some properties that all animals share
162:19 - wait I thought I can't think of but then
162:24 - you might have from that you might have
162:26 - something like mammal a mammal class a
162:31 - reptile class those would have things
162:34 - specific to that and then maybe the
162:36 - mammal from that is going to like
162:39 - inherit there's gonna be a canine class
162:41 - this is right biologically or what but
162:44 - the point is you can inherit things all
162:46 - the way up the tree so if animal has a
162:49 - property called weight and mammal has a
162:52 - property like you know fur color then
162:55 - canine is going to get fur color and
162:57 - weight it's going to inherit that
162:58 - everything inherits so you can have and
163:00 - it's not a network it's a tree and so
163:04 - this is something that's really quite
163:05 - powerful in designing large software
163:08 - systems and working with other
163:10 - JavaScript libraries that you want to
163:12 - like have a very flexible and agile way
163:15 - of augmenting and using features from
163:17 - something else while implementing your
163:18 - own thing this is kind of the core
163:20 - principle of object
163:21 - oriented programming in inheritance so I
163:24 - need to come back and I need to do one
163:26 - more video to talk about one other thing
163:28 - which is the term polymorphism which for
163:31 - me feels a little less relevant in
163:33 - JavaScript because polymorphism really
163:35 - comes up when you have a strongly typed
163:37 - language because you how you specify
163:39 - what data types certain things are
163:41 - javascript is very good at just kind of
163:43 - figuring it out in lots of cases but in
163:45 - this case what I can do is I can make an
163:48 - array that's full of lots of different
163:50 - kinds of objects that inherit from each
163:52 - other and then just like blanket apply
163:54 - the same thing the same functions the
163:56 - same functionality to all of them so
163:57 - maybe I'll try to do one more video just
163:59 - to basically take this and put it into
164:02 - an array alright
164:03 - thanks I hope you got something from
164:05 - this there's probably like a lot more
164:07 - that you can do but this maybe gives you
164:09 - an inkling of how inheritance works and
164:11 - might change the way you think about
164:12 - making a project in JavaScript in the
164:15 - future Thanks all right
164:34 - all right so I don't know the
164:40 - polymorphism thing is kind of let me
164:52 - think about this let me make I got 15
164:55 - minutes I mean it's like this is like a
164:56 - five minute video to mention
164:59 - polymorphism polymorphism I mean what
165:07 - polymorphism means to me is it's the
165:11 - idea in like in Java for example this is
165:15 - why it's polymorphism we talked this
165:19 - through for a second I could say
165:22 - particle P and this is Java equals new
165:25 - confetti and this is the core idea of
165:30 - polymorphism in that I can treat an
165:35 - object in multiple forms like I can
165:38 - declare it as a particle but it's
165:39 - actually a confetti and then and then
165:45 - even if I call P update it'll know the
165:47 - proper update function to call which is
165:49 - the one from confetti and this makes me
165:51 - this makes it easy to like pull a lot of
165:53 - stuff out of an array and but it doesn't
166:00 - it doesn't sorry someone's saying no
166:02 - sound in the chat it that doesn't really
166:04 - apply in the same way in JavaScript
166:07 - because you're just doing this or this
166:09 - so I'm trying to think like is there
166:19 - something is there like a salient point
166:22 - here that I'm missing about the idea of
166:24 - polymorphism
166:39 - okay let's see what's I'm reading this
166:44 - Stack Overflow post
167:00 - this is so old yeah
167:22 -  I mean
167:35 - hmm you know once no one's telling me
167:37 - anything that I don't are let's see
167:51 - his ability to react differently
167:53 - depending on the object type yeah I
167:58 - guess to putting in an array is kind of
168:00 - because they're all I mean one of the
168:06 - great article that I love is how my dog
168:09 - learned polymorphism
168:11 - I remember reading this like years ago
168:16 - and this is what I'm saying you can do
168:20 - this this but this is irrelevant in
168:24 - JavaScript
168:27 - [Music]
168:35 - so
168:51 - yeah that's what I was gonna do Rubin
168:54 - writes you could generate an array
168:55 - filling it random with particles in
168:56 - confetti and iterate the list calling
168:58 - show on each so that's what I was going
169:02 - to do but I don't really it doesn't get
169:07 - at polymorphism the same way but I guess
169:09 - that's what I'm gonna do I'm gonna just
169:11 - explain I'm gonna cop to it and explain
169:13 - exactly what I'm talking about
169:16 - okay we cycle these cameras
169:36 - just google es6 polymorphism that's what
169:40 - i just did but nothing that came that
169:43 - nothing that answered my question came
169:46 - up I'll do it one more time
169:56 - I'm just gonna I'm gonna explain it in
169:59 - my own way
170:01 - overloading is polymorphism yeah yeah so
170:04 - that's really what in essence the poly
170:06 - more mean that's I think that's an
170:08 - oversimplification if I might be so
170:10 - respectfully but yeah all right I wish I
170:19 - hadn't erased this okay so give me a
170:25 - second here
171:02 - all right I guess I just did that I'm
171:09 - Jule
171:09 - oh why do I hell it's like cycle to
171:13 - camera and then the cable like Wiggles
171:15 - loose okay I've got one more topic here
171:26 - about object oriented programming in es6
171:29 - with classes and that is what is
171:32 - polymorphism and what is polymorphism
171:35 - mean and how is it applied in JavaScript
171:37 - so just to review the core idea of
171:39 - object-oriented programming creating a
171:41 - blueprint a template as a class that
171:44 - makes that encapsulates a whole bunch of
171:46 - data and functionality together that is
171:49 - the idea of encapsulation it's a little
171:51 - package of an object with data and
171:53 - functionality inheritance is the idea of
171:56 - once I've made a class and I want a a
171:59 - class to inherit a lot of properties or
172:01 - functions but modified with its own
172:04 - custom stuff that's the idea of
172:06 - inheritance and inheritance is a thing
172:08 - that happens in a tree because you can
172:10 - have something inherit something which
172:12 - is here it's something else and actually
172:13 - the end of this video I'm a little bonus
172:14 - I will just show one little trick about
172:16 - inheritance that might be kind of
172:18 - interesting now what is polymorphism so
172:21 - polymorphism if we look at the word
172:23 - itself poly meaning many and morphism
172:27 - more for like form means we can treat an
172:31 - element an object that has a particular
172:34 - type like a confetti object as either a
172:38 - confetti object or a particle object
172:41 - depending on what's convenient for us
172:43 - and yet somehow the system the compiler
172:46 - the interpreter the executor of the code
172:49 - is going to know what to do correctly
172:51 - and so if I were in a strongly typed
172:53 - language which JavaScript is not what I
172:55 - strongly typed I mean you have to
172:57 - declare the type of the thing before you
172:59 - make a variable I would have to say
173:01 - something I could say normally I would
173:02 - say like confetti C equals a new
173:06 - confetti object this is the way and a
173:09 - strongly typed language I would declare
173:11 - a variable C I would give it a type its
173:13 - confetti and I'd call the confetti
173:15 - instructor to make that object in a
173:17 - strongly typed language I could also say
173:21 - particle PE or particle C whatever it is
173:24 - equals nu confetti and this would be
173:28 - allowed because confetti extends
173:32 - particle so in that case I could
173:35 - consider this variable to be of
173:37 - different forms I can consider it to be
173:39 - a particle when it's convenient or a
173:41 - confetti object when it's convenient but
173:43 - the compiler will always know to execute
173:46 - and use the properties and functions of
173:48 - the confetti class and this is
173:51 - especially convenient when you want to
173:53 - put a lot of stuff into an array in a
173:55 - strongly typed language because you
173:56 - don't want to keep track of which type
173:58 - which things are we can basically do the
174:00 - same idea in JavaScript it will just
174:03 - look less fantastic because javascript
174:06 - is so flexible anyway about types but
174:08 - this is the core idea so let's actually
174:10 - go and do this
174:11 - let's over here let's change this is
174:15 - code from my previous video about
174:17 - inheritance let's change this to an
174:19 - array and I'm going to make an array
174:21 - called particles and I'm gonna put a
174:26 - little for loop to just add 10 particles
174:31 - in setup then I'm gonna say just to get
174:36 - started I'm gonna say particles index I
174:39 - is a new particle and I'll just put them
174:42 - all in the center whatever and then now
174:45 - I can say for let P of particles and I
174:52 - can say and this is an a for of loop
174:54 - which lets me go through every particle
174:57 - I could use a for each loop I know a lot
174:59 - of people prefer those but let P of
175:02 - update and show so now I should see if i
175:04 - refresh this
175:05 - I should see here we go I've got 10
175:07 - particles moving around now what if what
175:10 - I wanted to do was say if random 1 is
175:14 - less than 0.5 so I basically want to
175:17 - give a 50% chance of either putting a
175:20 - particle object or a confetti object
175:28 - the magic of all of this is that I don't
175:31 - have to change this code down here
175:33 - I just an fill this same array with a
175:35 - bunch of different objects as long as
175:37 - they're kind of linked through this idea
175:39 - of inheritance they all have an update
175:41 - function they all have a show function
175:42 - polymorphism says this variable P is
175:45 - going to know for each one it's gonna
175:47 - know whether it's a confetti or a
175:48 - particle object and it's going to
175:50 - execute the right version of the
175:51 - function so we should now see we have a
175:54 - bunch of particles and a bunch of
175:55 - confetti at every time i refresh this
175:57 - there's a different random amount so
176:00 - that's polymorphism why I made a kind of
176:03 - a short video timeout for a second
176:08 - somebody's telling me strongly typed or
176:11 - explicit typing strongly typed or
176:21 - explicit typing that's a death
176:23 - difference strongly typed versus
176:27 - explicitly explicitly types I don't know
176:40 - I think I say use strongly typed
176:44 - correctly is Java a strongly typed
176:48 - language Python is a dynamically typed
176:51 - line statically typed language in a
176:54 - weakly typed language both Java but look
176:59 - look according to my Google search Java
177:02 - is a strongly typed language so I think
177:03 - I'm okay there I think I'm okay
177:10 - so tin says the Cody train you are
177:13 - confusing strong typing and explicit
177:15 - typing mmm no no let's look at this
177:21 - answer Java is a strongly typed
177:24 - programming language yeah Simon's asking
177:27 - about the inheritance trick yes I'm
177:28 - gonna come up with that strong typing
177:36 - and we I'm gonna I'm gonna assume I'm
177:37 - okay
177:38 - I'm gonna move on I'll come back and
177:39 - correct that later if I need to
177:42 - I'm though I didn't talk about Python so
177:45 - that's okay I can be its Python
177:49 - strongly-typed dynamically typed Java
177:51 - sadly tight oh so confusing uh explicit
177:58 - versus implicit strongly versus weakly
178:01 - okay okay I think I'm close enough right
178:05 - you know for learning purposes that's
178:07 - the maybe a detail alright so I promised
178:15 - a little extra tidbit here so one of the
178:17 - things I would like to show you that's
178:19 - useful and this relates to actually how
178:22 - the toxic libs library work oh no that's
178:25 - not important okay so I promised a
178:32 - little extra tidbit here at the end of
178:34 - this video so one of the things that's
178:36 - really interesting about inheritance and
178:37 - that inheritance tree is that
178:39 - inheritance is not just the thing that's
178:41 - useful because you can oh you designed
178:44 - your own particle class and now you're
178:46 - designing your own confetti class that
178:48 - extends particle maybe somebody else
178:50 - designed something and you want to
178:52 - inherit everything from that for example
178:54 - there is a thing in p5 called p5 vector
178:58 - I've used it a lot of coding challenges
179:00 - and videos p5 vector object is a vector
179:03 - object it has an X Y and a Z component
179:05 - and has a lot of functionality for
179:07 - vector math so what I actually could do
179:10 - here is I could say look at this I could
179:13 - say class particle extends p5 dot vector
179:17 - so in that case now I'm just going to
179:21 - say super X Y like I don't need this is
179:25 - now an object that's gonna get X&Y
179:29 - from the parent class but I don't
179:34 - actually I can now start to use other
179:36 - stuff so for example my particle might
179:39 - also have a velocity which is I'm going
179:44 - to just make that a which is like create
179:46 - vector 0 comma I want to make it random
179:53 - so I'm actually going to use the
179:55 - p5 vector from from angle no no random
179:59 - 2d function so it could have a random
180:02 - velocity and then I could say oh this is
180:04 - so crazy
180:05 - but this dot add this dot velocity
180:07 - because there's an ad function and I
180:10 - want to add the velocity to this object
180:13 - because it is a p5 vector and then I
180:15 - could just draw it at this at X&Y let's
180:17 - see if this works amazingly this works
180:21 - so this might this is very the behavior
180:24 - is very different cuz it's not a
180:24 - different random velocity it's just a
180:26 - random direction but you can see this is
180:28 - a very pop our 'fl particle extended p5
180:32 - vector I suddenly got access to all of
180:34 - the vector math that's in p5 vector and
180:36 - then confetti extends particle so it's
180:40 - also a vector and let's just look I
180:43 - think it's pretty useful for me to very
180:46 - briefly before I go just go over to the
180:49 - console and do something like let a P
180:52 - equal a new particle let's just look at
180:54 - this look at this I want to take a look
180:57 - at this you can see that this is now it
181:02 - this particle object has an x y&z and
181:04 - this this is actually how it works
181:07 - underneath the hood you can see here
181:09 - that it's prototype where it inherits
181:11 - everything from is from this particular
181:13 - object and if I looked at a confetti
181:16 - object this has to do with the prototype
181:20 - stuff this is what es6 classes
181:21 - completely hides from you and if i look
181:25 - at this object now we can see look it
181:27 - has the brightness and r it has this
181:29 - velocity it has an XYZ its prototype
181:33 - what it inherits from is particle and
181:35 - thats prototype is vector so you can
181:38 - actually see this is generally a place
181:40 - you kind of don't want to look because
181:41 - it's like super confusing but you can
181:43 - see the inheritance chain the prototype
181:46 - chain or the inheritance tree here
181:48 - confetti extends particle which extends
181:52 - vector and this s dot vector is like a
181:54 - weird notation because of the way the p5
181:56 - library works alright so that's a little
181:58 - extra trick you can think about that
182:00 - maybe that would confuse to you that's
182:01 - ok kind of confused me while I was
182:03 - explaining it hopefully you got a sense
182:05 - of inheritance and polymorphism as
182:07 - features of us as aspects of
182:10 - object-oriented programming that you can
182:11 - apply in JavaScript using es6 javascript
182:15 - thanks very much and I'll see you later
182:17 - all right there's a discussion going on
182:30 - about all sorts of stuff in the chat
182:33 - that's very interesting I think I'm
182:35 - finished for today I don't know what's
182:39 - happened there's a parent I don't know I
182:41 - the news is completely - I'm it's
182:45 - actually great to livestream because I
182:47 - am NOT looking at the news I am NOT
182:49 - looking at Twitter I'm not looking my
182:50 - email who knows what's happened in the
182:52 - world in the last few hours because I'm
182:56 - gonna be returning to my email getting
182:57 - some lunch having some appointments some
182:59 - office hours and different things I will
183:01 - be back next Wednesday and next
183:04 - Wednesday hold on Tim is writing
183:09 - something tan said Java is strongly
183:13 - typed because you typed confetti see but
183:15 - that fact makes it explicitly typed not
183:17 - strongly type strongly typed meanings
183:19 - that a value sticks to its type ok all
183:24 - right Minnie what I meant by strongly
183:29 - typed and I was maybe being too informal
183:32 - with language is that you have to
183:35 - specify the type of a variable when you
183:39 - declare it so Tim maybe what you could
183:44 - do when I publish the edited version of
183:49 - this that's in the tutorial playlist if
183:50 - you can write a succinct explanation of
183:53 - the nuance of that I can put it in the
183:55 - description or even like pin a comment
183:58 - but I think I don't think there's
184:02 - anything like horribly wrong in what I
184:06 - said
184:10 - and Simon writes Python is strongly
184:12 - typed but not statically so there is a
184:15 - difference between strongly typed and
184:16 - dynamically typed language yeah
184:20 - yes that's explicit typing all right
184:23 - maybe I should just record a little all
184:29 - right all right all right all right all
184:31 - right I have an idea not she's gonna
184:34 - work his magic here
184:38 - Python is strongly typed but you don't
184:40 - write types I see that's so true I get
184:44 - it
184:45 - I sort of get it I sort of get it so
184:49 - what's the key definition of strongly
184:51 - typed that's what I'm gonna do here is
184:54 - you're gonna see Oh
185:02 - eleska Lexi I'm so sorry I never got to
185:05 - that
185:07 - [Music]
185:26 - so what does strongly-typed mean I get
185:31 - the browser back a strongly type area
185:39 - one where each type of data is
185:41 - predefined as part of the programming
185:43 - language and all constants are variables
185:45 - defined for given Oh strongly typed
185:48 - means you can't make up your own strong
185:51 - and weak typing write what you said it's
186:08 - confusing Schiffman because using
186:09 - strongly type when you mean explicitly
186:10 - type typing is already confusing is
186:12 - enough that it'd be nice to be right
186:14 - with the definitions used strongly typed
186:16 - variables and objects inherently have a
186:17 - type that cannot be changed if you
186:19 - assign a new type you recreate and
186:21 - reassign the variable okay data
186:30 - structures and functions must know what
186:32 - types they operate on beforehand once
186:39 - you make the variable a given type
186:40 - alright okay
186:42 - I get it I think yeah I'm reading the
186:50 - Wikipedia page also I mean I think there
186:58 - are I'm not the only person to be
187:01 - colloquial about it can I reuse a
187:09 - variable going from number to string in
187:11 - strong types okay yeah all right okay so
187:17 - I'm gonna try a little quick addendum
187:21 - explanation that will come in in the
187:22 - middle that's he will do his magic one
187:28 - moment please
187:29 - so during this video I refer to Java as
187:32 - a strongly typed language and all the
187:35 - places I looked on the Internet do
187:36 - describe Java as a strongly typed
187:39 - language however the aspect that I was
187:41 - explaining is really something known as
187:43 - explicit typing meaning you have to say
187:46 - if you're gonna declare a variable a
187:48 - variable P I have to say what kind of
187:50 - data I'm putting in there is it an
187:51 - integer is it a float is it a particle
187:53 - which strongly typed means is that that
187:56 - type could never change it has to remain
188:00 - the same and there's really like a lot
188:02 - of stricter rules around how that works
188:05 - so like Python for example is also
188:07 - strongly typed but you don't have to
188:09 - declare what it's not explicit you don't
188:11 - have to say what kind of type that
188:13 - variable is you just can't change it
188:14 - later you've got to be it's got to work
188:16 - all when it's compiled so there's a lot
188:17 - of nuance to that and some very spouts
188:19 - I'll try to include some reading
188:21 - material in this video's description to
188:22 - explain that better but what I really
188:24 - meant was explicit typing okay now back
188:27 - to the video all right Tim and everybody
188:34 - watching is that a kind of reasonable
188:37 - correction that that would just like pop
188:38 - in somewhere in this video
188:51 - or do I need to do that again whoops
188:54 - with anything that I maybe said
188:58 - incorrectly
189:08 - oops
189:11 - okay so that will end up somewhere
189:14 - overlaid in the edited version okay
189:18 - people are saying even dynamically
189:21 - static says yes correction is okay says
189:25 - Nathan thank you everybody you know
189:26 - what's really kind of fun about doing
189:27 - this I really don't know half this stuff
189:29 - I mean people think that I know all that
189:31 - stuff and I you know I'm just like
189:32 - figuring this out like the rest of you
189:34 - and actually you know this really helps
189:37 - my teaching here and all the other stuff
189:39 - that I'm doing I learned so much from
189:41 - people watching and I really thank you
189:43 - for that I was too close to the green
189:47 - screen and that's she is very good at at
189:50 - at his work with magic with Adobe
189:52 - Premiere so it'll be fine
189:56 - Python is really if Li but it's mostly
189:58 - correct well we'll see all right thank
190:03 - you everybody all right so Alexi that I
190:06 - probably asked about contributing to
190:08 - p5.js so let me make a list so I mean I
190:13 - don't unfortunately I really have to go
190:14 - and I don't have time to talk about that
190:15 - today but I will say if you're
190:18 - interested in contributing I'm pretty
190:21 - sure there is a wiki page about getting
190:23 - started this is where you want to go
190:28 - so things moves so this is like a short
190:31 - answer if you're interested in
190:32 - contributing to p5.js this on the wiki
190:35 - is where you want to kind of start right
190:38 - here go to the github repository wiki
190:40 - and down here there'll be information
190:41 - about different ways to contribute the
190:44 - community statement and code of conduct
190:45 - and overview and a development guide so
190:47 - this is a place that you should get
190:50 - started all right I have got to go so I
190:56 - really have to do this data stuff next
190:58 - week I the things that I didn't do is I
191:00 - didn't do the terrain I didn't do my
191:02 - like video that I imagined of redoing
191:04 - every single Perlin noise example that I
191:05 - ever made
191:06 - alright classic Perlin noise example
191:08 - that I ever made with open simplex noise
191:10 - that I didn't do I look at Fermi's I'm
191:13 - kind of on this idea of making a Rubik's
191:15 - Cube so I would want to get to that at
191:16 - some point and I really would like to
191:18 - make a processing library anyway I don't
191:21 - know when I'm gonna do that I want to
191:22 - come back and show Eclipse
191:24 - and how to make a processing library all
191:26 - right I'm gonna go so thank you everyone
191:34 - I am going to play you out with the MIDI
191:41 - version I'm gonna take that sometime
191:45 - here to go to System Preferences sound
191:49 - and I think if I do the multi output
191:52 - device if I play this you're gonna hear
192:00 - this through yep
192:04 - [Music]
192:11 - we hold on so Matthew Jeolla raucous
192:17 - makes a really good point I think a good
192:20 - thing to keep in mind is that other
192:21 - languages have arrays where the type of
192:23 - the array is dependent on the type of
192:24 - the contents in Python most of the time
192:28 - the container is not defined by its
192:30 - contents yes that's an interesting okay
192:34 - so I am going to the I'm muting my
192:36 - microphone I am going to the wallpaper
192:39 - I'm gonna play about with this everybody
192:45 - see you next week on the coding train
192:47 - every Wednesday 10:30 a.m. Eastern
192:50 - nothing makes me happier than getting
192:53 - people's like weird musical remixes of
192:54 - my coding stuff doing that please make
192:59 - tough I like to have more sounds of
193:01 - music to play I will see you all next
193:03 - week
193:04 - [Music]
193:05 - [Applause]
193:09 - [Music]
193:43 - ah