00:16 - [Applause]
00:16 - [Music]
00:26 - did you think that learning coding would
00:28 - be really rough throw your hands up in
00:31 - the air and say enough enough do you
00:33 - want to learn to code and make some
00:35 - awesome stuff learn that anyone can when
00:38 - you're
00:39 - [Music]
00:45 - with whether you're a pro or this is all
00:48 - brand
00:51 - new learn the overarching concepts and
00:54 - some fun stuff too and with Dan is your
00:56 - guide come along for the ride on
01:02 - make a crazy pixel mirror to reflect
01:04 - your face you can make it jump to light
01:06 - speed into outer space you can generate
01:09 - a maze that can go on for days you can
01:12 - make your own terrain and some purple
01:14 - rain you can make a retro game to see
01:16 - how it's done and then tweak a piece to
01:19 - make it yours for everyone make some
01:21 - fract trees or Twitter Bots if you
01:23 - please and when the Cesar are you can
01:26 - make them your
01:28 - own
01:34 - ride the colors of code you can follow
01:36 - the road
01:49 - to hello ah okay hello I think I'm
01:52 - broadcasting live I had the microphone
01:54 - muted which I often do while I'm getting
01:57 - set up to not record myself by accident
02:00 - um but I would like to hear from the
02:02 - chat I know I've been sort of on a big
02:04 - delay today so I would like to hear in
02:05 - the chat um if uh so I don't know how
02:08 - many people are there because I'm kind
02:10 - of much later than I said I would
02:11 - originally be but um if the sound is
02:14 - working if you can hear me and see me
02:16 - okay otherwise I'm going to kind of get
02:17 - started rather quickly I'm going to try
02:19 - to forego all of my introductory stuff
02:22 - Beyond two or three sentences so please
02:24 - if you are actually watching this live
02:26 - and you can hear me and there's no
02:28 - static and the sound seems fine please
02:30 - let me know in the chat I don't see a
02:32 - single message in the chat so I'm just
02:34 - going to keep going um my name is Dan
02:36 - schiffman this is a live stream that I
02:38 - do every week typically Tuesday
02:41 - afternoons um about creative coding and
02:43 - creative coding is kind of a
02:46 - broad term but um to uh think about
02:50 - creative ways to I'm still looking in
02:52 - the chat I don't see a message I feel
02:54 - like I'm just here by myself and there's
02:56 - no one out there in the world I'm going
02:57 - to see if there's anyone it does say 73
02:59 - people are watching which is kind of
03:01 - unbelievable um okay I'm still keeping
03:03 - an eye on the chat so uh I do a lot of
03:05 - different topics um from animation and
03:09 - physics simulation um but this fall I
03:11 - have been going through a series of uh
03:15 - video tutorials all about programming
03:17 - with text generating text analyzing text
03:20 - that type of thing if you would like um
03:23 - to know more or um I just want to point
03:26 - you out to uh a couple resources uh
03:29 - coding rainbow
03:30 - you can subscribe um there is also uh I
03:34 - have a patreon running which is a way
03:35 - that you can fund what I'm doing and and
03:38 - and get membership into a slack channel
03:39 - for more discussion and I do send out
03:41 - email announcements when I'm doing the
03:43 - live streams here as well so I encourage
03:45 - you to sign up for any of those things I
03:47 - still don't see a single message in the
03:50 - chat which is kind of disturbing me I'm
03:54 - GNA I'm going to have to tweet um
03:56 - because I'm going maybe I'm going to
03:58 - reload my preview here because I just
03:59 - want to make sure this is working and
04:01 - I'm not talking to no one in thin air so
04:04 - I'm going to it let's say 100 people are
04:06 - watching I'm going to refresh my
04:08 - dashboard um and see if anyone comes ah
04:11 - now I see oh now I see all sorts of
04:13 - messages so somehow the chat had gotten
04:17 - um somehow the chat had gotten stuck
04:20 - okay so now I see there are a ton of
04:22 - messages so much for my awkward opening
04:25 - all right so what am I going to do today
04:27 - so um topicwise
04:30 - um topicwise I am here and it says um
04:35 - week nine here on this syllabus but
04:37 - really I'm on session eight and so the
04:39 - topic for today is how to build your own
04:42 - API in node so if you uh have been
04:46 - following this course over however many
04:49 - weeks I've been doing it I spent a week
04:51 - looking at working with data and apis so
04:55 - uh for example how to grab uh dictionary
04:57 - information from an API called wordnik
04:59 - how to get news articles from an API
05:01 - called New York Times API called New
05:03 - York Times there's so but what if you
05:05 - have data and you want to expose that
05:08 - data to other people or what if you want
05:11 - to collect data and then uh make that
05:14 - data open so there are a variety of okay
05:17 - possibilities hold on a second I'm gonna
05:19 - have to uh please um if you can
05:23 - um um if you can try not to uh post the
05:27 - same message over and over and over
05:29 - again
05:30 - um uh Abby is asking if I can go over
05:33 - modularity which I don't know what that
05:34 - means specifically but um chat wise I
05:37 - don't I can't watch I can't catch every
05:40 - message in the chat but I do look at it
05:42 - periodically and um I will try to answer
05:45 - them as I go mikolai asks what about the
05:47 - new channel name I don't have a new
05:48 - channel name yet I have to admit that
05:51 - things are just incredibly busy these
05:53 - days with the NYU semester and I hope to
05:56 - I'm I've been uh talking to some
05:58 - designers and and coming up with
06:00 - different ideas and brainstorming things
06:02 - and I hope to have something by the end
06:03 - of the year it's my goal in kind of
06:05 - relaunch in 2017 with a new name yes if
06:08 - it's Hearts In Rainbows that you can
06:10 - spam uh and and can you explain a rest
06:14 - API that is what I hope to do today now
06:16 - unfortunately it's about 3:10 I only
06:19 - have till 4:30 p.m. it's eastern time so
06:21 - I have about an hour and 20 minutes and
06:23 - I have this absurd list of topics so I'm
06:27 - making a commitment to at some point
06:29 - making videos around all these things on
06:31 - this list but today I'll be happy if I
06:35 - can talk about the basics of using
06:38 - something called Express in
06:39 - node and um as well as uh what a rest
06:45 - API is and how to set up a route to
06:47 - return information to somebody who's
06:49 - querying that API and then I would like
06:52 - to see if I can make a sentiment
06:53 - analysis API example that's going to be
06:58 - difficult but that I'm so I'm just going
06:59 - to going to get started um this is what
07:01 - we're going to do today and then you
07:02 - know at some point I and next week by
07:05 - the way I hope to be back to talk about
07:06 - Chrome extensions and at some point I am
07:09 - going to
07:12 - um I you know I'm planning to get to
07:16 - everything on this list in terms of
07:17 - videos one thing that's been I've been
07:18 - making examples of recently is how to
07:19 - use Firebase which is a database as
07:21 - service so I want to talk about that
07:23 - point these Emoji hearts in the uh chat
07:26 - are just the most wonderful things I've
07:27 - ever seen they make me so happy okay uh
07:30 - let's put on some
07:32 - music as always I always forget the this
07:35 - dot this dot this dot this do I'm do
07:45 - [Music]
07:48 - this looking
07:54 - [Music]
07:58 - here this this this this going to do
08:02 - this this
08:05 - do going to do okay so um I'm gonna get
08:09 - started with the first video which
08:11 - typically what I do so if you haven't
08:13 - watched these before what I do is I um I
08:17 - do a session which is a longer session
08:18 - which has all of my fumbling around and
08:21 - trying to answer questions in the chat
08:22 - and then uh the wonderful MAA takes this
08:25 - longer session which today will be only
08:28 - an hour and 20 minutes um and edits it
08:30 - into shorter tutorial videos so cuts out
08:32 - some of my like longer debugging
08:35 - problems and also it's helpful I think
08:37 - people find having the shorter video
08:39 - chunks more searchable and E easily
08:41 - findable on YouTube okay the hearts are
08:43 - wonderful actually I actually just
08:45 - enjoying them I was going to tell you to
08:46 - stop but I don't know I'm kind of just
08:48 - enjoying them anyway um okay so the
08:51 - first thing that I do usually is um
08:53 - since this is part I'm a little bit
08:54 - confused about this actually and I don't
08:56 - know if beta is there in the chat but um
08:59 - this is session nine of eight of
09:03 - programming from A to Z but um in a way
09:06 - this can operate as its own set of
09:08 - Standalone tutorial its own Standalone
09:10 - tutorial about making an API with node
09:13 - so I think what I'm going to do is is
09:15 - I'm I'm not sure yet so I'm just going
09:17 - to record these videos and I'll figure
09:19 - out how to organize it later but this
09:21 - first video will be just kind of an
09:22 - introduction to this session and all of
09:24 - the topics in the session and then I
09:27 - want to make sure I have a marker um and
09:30 - then the second video will start with
09:32 - how to make an API in node and that
09:34 - might end up being it sort of own
09:36 - playlist as well about node but we'll
09:37 - figure that out later okay um so thanks
09:41 - for all of you for being here I see so
09:42 - many wonderful messages in the chat
09:44 - supportive messages and I'm going to get
09:47 - started right
09:50 - now I'm a little worried about a light
09:52 - that I have here turn this off for a
09:57 - second yeah
10:00 - so I have to turn this light off
10:04 - unfortunately because um I just turned
10:06 - one of the hallogen lights off I I also
10:09 - just like looked at it and now I can't
10:10 - see anything I'm blinded by it I'm a
10:12 - little bit darker unfortunately right
10:14 - but that there's a problem with this
10:16 - light and it is um it's burning and I
10:19 - don't want it to catch on fire so I'm
10:21 - turning it off we will be in slight
10:24 - Darkness today but I still think I think
10:26 - you guys can see me okay yes
10:29 - [Music]
10:30 - um okay so that's just it's that's how
10:34 - it's going to be okay um so let me get
10:36 - started here did I cycle the cameras I
10:38 - can't
10:41 - remember that's too bad I brought an
10:44 - extra light but it's something is wrong
10:47 - it's oh I wonder if there's a way for me
10:49 - to dim it is there a dimmer on it and
10:53 - then it won't
10:54 - overheat but I'm okay I'm just not going
10:56 - to worry about it Safety First every
10:59 - everybody yeah okay it's fine um okay
11:02 - here we
11:03 - go um I here we go
11:06 - okay I still can't see you know when you
11:09 - look to the Sun and you see all the
11:10 - spots I went over to look at the light
11:12 - because it looked like it was smoking a
11:14 - little bit and I'm stared straight into
11:16 - it okay
11:19 - uh here we
11:23 - go hello welcome to session nine oh no
11:27 - no no no session eight let's try that
11:30 - again hello and welcome to session eight
11:33 - of programming from A to Z in this
11:35 - session I want to talk about and look at
11:39 - more deeply how to build an API using
11:42 - node so this whole course has focused on
11:46 - working with text reading text analyzing
11:49 - text generating text and most of the
11:52 - stuff almost everything that I've shown
11:54 - you happens in client side JavaScript so
11:57 - let's talk about a little bit just
11:58 - generally what the difference is so if
12:00 - you have a laptop that you're working on
12:03 - and it has a web browser in it you might
12:05 - be running your p5js sketch right there
12:09 - in the browser itself so this is going
12:12 - to get you very far there is so much you
12:14 - can do with just this as we've seen now
12:17 - you can do word counting and marov
12:19 - chains and all sorts of projects but
12:21 - there are some limitations here so for
12:23 - example let's just go back and think
12:25 - about word counting so one of the things
12:27 - we did is okay so you have some text
12:30 - document and you want to count how many
12:33 - times each word appears in that text
12:35 - document and visualize it in some way
12:37 - with your p5js sketch this will work
12:40 - just fine all client side unless and
12:44 - unless a couple of things one is where
12:47 - is this data coming from if you have a
12:49 - little text file that you can put on
12:50 - your server great but what if this is
12:53 - instead of one text file what if this is
12:55 - 1,000 or 100,000 or 1 million million
13:00 - one I need the the like Austin Powers
13:02 - music one million text files you know
13:06 - it's going to be kind of unreasonable to
13:08 - expect the client side just your P5 just
13:11 - guest in the browser to sit there and
13:12 - churn through millions of text files for
13:14 - 10 minutes a half an hour and then
13:17 - produce the result this is where serers
13:19 - side programming can come
13:22 - in and now the platform that I'm going
13:25 - to use for server side programming is no
13:28 - is no .js of course there are a variety
13:30 - of ways you can approach server side
13:32 - programming so okay so there's a lot of
13:33 - pieces to this so one thing that we've
13:36 - established is if you have a really
13:38 - large data set perhaps server side
13:41 - programming is going to help you here's
13:43 - another thing what if you have users
13:46 - entering in their favorite words and you
13:49 - or they you have your Madlibs
13:51 - application and they're entering words
13:53 - nouns adjectives to generate
13:56 - stories what if you want every time time
13:58 - the user comes back to be able to see
14:01 - what they entered before or what if you
14:03 - want when a user comes comes to the page
14:05 - to be able to see what everybody has
14:06 - entered this is also so large there's
14:09 - some reasons for server side programming
14:11 - is large data
14:12 - set another one is
14:16 - persistence and I don't know how to
14:17 - spell that persistence meaning saving
14:21 - data and there's a variety of ways you
14:22 - can save data but with client side
14:25 - JavaScript only while you can download
14:27 - data to that user's local computer
14:28 - computer there's no way to save data
14:31 - across multiple sessions using a
14:33 - particular web application so this
14:35 - server is a place where if we could send
14:37 - data to the server it could be saved on
14:39 - the server in you know what's known as a
14:41 - database so these are some pieces to why
14:44 - you need server side programming now
14:48 - here's another reason what if you want
14:51 - to
14:53 - expose everything your data or your
14:56 - algorithm or the thing you're working on
14:58 - to to other users as an
15:01 - API this is another reason why you might
15:04 - want server side programming and this is
15:06 - mostly what I'm going to focus on in
15:07 - this particular week eight session or
15:10 - session eight however I'm going to kind
15:12 - of look at all of these pieces by the
15:14 - time I get to the end of it but this
15:16 - idea of maybe you have uh this wonderful
15:20 - spreadsheet of all of this information
15:22 - about flowers and you want to allow
15:24 - other people to make queries go to
15:26 - flower ai.com
15:28 - SL chrysanthemum or flower ai.com
15:31 - sunflower and receive Json back with all
15:34 - this information about flowers this is
15:36 - something you're going to want server
15:37 - side programming for as well and this is
15:39 - going to be the focus here now there was
15:42 - one other thing on my mind and I'm
15:44 - trying to kind of come up with it uh uh
15:48 - API persistent large data set aha I
15:52 - thought of
15:54 - it I'm gonna I'm going to just say
15:57 - scraping but um and and with persistence
16:01 - by the way could be kind of like user
16:02 - accounts and all that sort of stuff but
16:04 - I'm kind of staying away mostly from
16:05 - like traditional web development here
16:07 - and looking at kinds of creative
16:08 - applications of this stuff but I'm
16:10 - saying scraping because one thing you
16:12 - might have noticed is in p5js if you try
16:15 - to the the bane of your existence might
16:18 - be this this is this thing called cores
16:20 - or you might see it as like XML HTTP
16:23 - request error you might have tried to
16:25 - load image from some URL or load strings
16:28 - or load Json you get this error I can't
16:30 - do it security cross origin resources
16:32 - sharing not allowed inaccessible stop
16:34 - stop stop so there's a lot of times
16:37 - where the client side for security very
16:40 - good security reasons is not allowed to
16:42 - reach to another server and request data
16:44 - but your server side program is allowed
16:46 - to do that so your server so for web
16:49 - scraping for example if you want to look
16:51 - at a web page download all its HTML
16:53 - parse it out pull out some things you
16:55 - want you can do that from server side
16:57 - and pass that to to the client side so
16:59 - these are kind of four reasons why you
17:02 - might want to use server side
17:05 - programming number three being make your
17:07 - own API this is where in many ways I
17:10 - want to
17:11 - start okay so what are the pieces of
17:14 - this the first thing that I want so I'm
17:16 - going to make a bunch of videos and they
17:18 - will eventually be here on YouTube for
17:20 - you to watch or I don't know what the
17:22 - platform of the future is when YouTube
17:24 - goes away but hopefully the videos will
17:26 - still exist um number one I'm going to
17:28 - sh talk about um I have a bunch of
17:30 - videos that I will um link to in this
17:32 - playlist of kind of what is node and
17:34 - what is npm for node package manager so
17:37 - you need to install node and get up and
17:39 - running with something called npm first
17:41 - and I already have the videos made for
17:42 - that which I will reference and link to
17:44 - somehow um but here I'm going to start
17:46 - with a node package called Express which
17:49 - makes building a web server which is
17:51 - what you're going to need the score the
17:53 - web server is the thing that's going to
17:54 - pass information to your client your
17:56 - p5js sketch or somebody body else is
17:58 - making an API query so we need to look
18:00 - at Express um I want to look at saving
18:03 - data and I got to have like a secret to
18:05 - tell you which is one of the easiest way
18:07 - I'm sure someone like I'm G to get
18:08 - struck by lightning for doing it this
18:10 - way but to a a really easy way to have a
18:12 - database is just save a Json file save a
18:14 - text file to the to the hard drive of
18:16 - the computer and then load it every time
18:18 - the server runs so I'm going to look at
18:19 - the simplest way you can have a database
18:21 - and then some other more complex ways
18:23 - maybe using a database system like couch
18:24 - DB or mongod DB and then something
18:26 - called Firebase which is a Google
18:28 - product that allows you to just send
18:30 - them information they save it for you
18:31 - and can request it later um I want to
18:33 - look at some point at scraping other web
18:35 - pages so how could you grab an image and
18:38 - then pass that to p5js or an HTML page
18:41 - and pass that to p5js um there's a lot
18:43 - of topics here about making an API
18:45 - there's this thing called rest I don't
18:47 - even know what that is but we'll try to
18:49 - figure it out together there's this
18:50 - thing called cores cross origin resource
18:53 - sharing which I think I do know what it
18:54 - is um and then I want to look at a bunch
18:57 - of different examples mostly around
19:00 - working with text to follow the theme of
19:02 - this course so what if you what if you
19:04 - had the sort of Big Data scenario where
19:06 - you need to load massive amounts of text
19:09 - and you want to pass to a user a word
19:11 - counting inform you want to pass to make
19:13 - an API for word counting information um
19:15 - so that's something that I'll look at as
19:17 - well as some uh I want to build an API
19:20 - for sentiment analysis using this um Ain
19:23 - 111 list of words um and I have a couple
19:25 - of examples that use of of a
19:29 - that use a node package called node
19:30 - natural which is another text
19:33 - analysis uh natural language processing
19:36 - um node package which has a lot of great
19:37 - features and I'll show you a couple of
19:39 - them uh here so I'm going to get started
19:42 - in the first next video you know this
19:44 - isn't the order that I'm going to go in
19:45 - I'm really going to focus on uh working
19:47 - with Express setting up this idea of an
19:50 - API and then see if I can transition
19:53 - that into a simple sentiment analys
19:55 - sentiment analysis API um and we will
19:58 - see see how that goes okay see you next
20:04 - video okay um H why would I want to make
20:08 - an API yay it's Ryan asks a really
20:11 - really good
20:12 - question um why would I want to make an
20:16 - API I I I I I guess I I wanted to
20:19 - address that in this but maybe I will um
20:21 - address that in the
20:24 - next video so I would say why would you
20:27 - I would love to hear from the chat why
20:28 - would you want to make an API let's see
20:30 - if we have some good suggestions from
20:31 - the chat while I get set up here
20:41 - okay
20:45 - okay Max musterman writes basically to
20:49 - allow communication between two parts of
20:51 - a system and that's right um you know
20:53 - there's a I I have sort of two ideas in
20:55 - my head and I I think hopefully it'll
20:57 - become clear
20:58 - um um um as as I start to make this
21:02 - example where are we at 3:25 I really
21:04 - have so little time I'm just letting you
21:06 - guys know that this is probably going to
21:07 - only be partially completed by the end
21:09 - of today and I apologize for the sort of
21:11 - late shorter um the late shorter uh live
21:14 - stream that I have going okay but I just
21:16 - want to keep on moving here so I have
21:18 - terminal let me get terminal up here's
21:22 - terminal I'm good uh here is I want to
21:26 - get Adam here here's my code I want to
21:29 - make sure I have my notes and I'm going
21:32 - to um keep this page open uh okay uh
21:38 - basically back for making popcorn okay
21:41 - uh good way to share communication
21:42 - easily share your data with your
21:44 - developers these are all great great
21:46 - great suggestions about why you'd want
21:48 - to make an API okay so here we go I am
21:51 - going to for no particular
21:53 - reason cycle these cameras and I think
21:56 - I'm going to do this in multiple parts
21:58 - so this is going to be building your own
22:01 - API in node and I think in this first
22:04 - part I'm going to get as far as having a
22:10 - uh
22:11 - route and then I'm going to do routes
22:13 - with okay so I'm going to do this in
22:15 - multiple Parts okay um here we
22:21 - go okay welcome to a first video in a
22:24 - little series about building an API with
22:26 - noes the question was asked asked in the
22:28 - live chat this is by the way you're
22:29 - probably watching this as a recorded
22:31 - archive but in the live chat why would
22:32 - you want to make an API and so you know
22:35 - I mostly right in the comments I'd love
22:36 - to hear why what your idea for an API
22:38 - and why you would like to make an i API
22:40 - is but there's there's a couple reasons
22:42 - that I think I could kind of start with
22:44 - here number one is you have uh data and
22:48 - you want to allow other people to use
22:50 - that data so this is a way of you kind
22:53 - of making a transaction a sort of
22:55 - handshake and saying like hey there is
22:57 - this means for for you to access this
22:58 - data and I intend for you to be able to
23:00 - do so an API stands for application
23:02 - programming interface it's a way for two
23:05 - it's a way for two different
23:06 - applications to talk to each other so
23:07 - there's the applic we're going to build
23:09 - an application a node
23:11 - application um that has data or
23:13 - something associated with it and it's
23:16 - other PE other applications will be able
23:18 - to talk to it so that's kind of the main
23:20 - reason now there is sort of this
23:21 - scenario which I also am going to show
23:23 - you with you might be making an API for
23:25 - one person in the world one wonderful
23:28 - singular person and who is that person
23:30 - it's you all right so there are lots of
23:32 - projects where you're writing a front
23:34 - end a client side JavaScript thing
23:36 - you're making pretty pictures and
23:37 - drawing text and all sorts of
23:38 - interaction stuff on the page but you
23:40 - need some serers side stuff to connect
23:43 - to download images to run long
23:45 - complicated processes to use other node
23:48 - packages so you might make an API just
23:50 - for your own project itself and actually
23:53 - that's what we might see in some of the
23:54 - examples I have to show you so that's
23:56 - kind of number one you you might just
23:58 - want to you know you you you have
24:01 - something and you want to allow other
24:02 - applications to connect or you might
24:04 - actually want other things being namely
24:07 - yourself okay um so hopefully that made
24:11 - soone sense of why you might make an API
24:13 - but really you know what the answer to
24:15 - that is let's try to make an API talk
24:17 - about it get to the end and um hopefully
24:20 - some creative ideas will emerge in your
24:23 - head as you're watching these videos um
24:26 - okay so first I want to point you to
24:28 - this web page which is part of the
24:29 - course um the things that you will that
24:32 - need before you're watching this video
24:33 - is what is node.js and what is npm so
24:36 - you're going to need to have both of
24:37 - those things downloaded and in this
24:39 - video I'm going to start with adding
24:42 - Express so I want to use this Express
24:45 - package which is a fast unopinionated
24:49 - minimalist web framework for no dutchs
24:51 - so first of all I just love anything
24:53 - that says minimalist because programming
24:56 - gets like really complicated and looking
24:58 - through documentation and apis is like
25:00 - so it's nice that what a lot of the
25:02 - things that I'm that I want to do in
25:04 - this application that I'm going to build
25:05 - is like oh host some files or oh receive
25:09 - a query from a user and no and express
25:12 - is going to have a simple function for
25:14 - each of those as opposed to kind of
25:16 - writing all the code for that in raw
25:18 - node so to speak so the first thing I
25:20 - need to do which is right here is
25:22 - install Express so I just so you know I
25:24 - happen to be uh in a project which is uh
25:28 - right here it's just a folder and it has
25:30 - nothing in it it has uh it all it has so
25:32 - far is a server.js file which is going
25:35 - to be the node program I intend to write
25:38 - but it's empty so let's come let's go
25:41 - over here and I'm going to go to
25:42 - terminal and I am in that directory
25:45 - right now which is Session 8 API 1 and
25:47 - I'm going to install Express I want to
25:50 - make sure that my oh and you know what I
25:53 - didn't do yet I need to have a
25:54 - package.json file so the package.json
25:57 - file for a node project is the kind of
25:59 - configuration file so I'm going to say
26:01 - npm init
26:05 - and
26:07 - yes uh oh this is
26:11 - bad
26:13 - timeout H there something wrong with my
26:15 - node
26:16 - installation uh that really would suck
26:18 - uh let's why did that um I'm just gonna
26:22 - I'm just going to do
26:24 - something
26:26 - uh you're I know this is like the worst
26:29 - thing ever to do what wait what what let
26:31 - me actually look at the error I'm
26:36 - getting uh cannot find module
26:40 - spdx oh did I upgrade not
26:47 - and uh oh dear um this is very sad my
26:54 - node is uh messed up on this computer I
26:57 - wonder if
26:59 - um let me just see if I can power
27:01 - through this for a second and see what's
27:04 - in here yeah that's pretty good now
27:07 - let's see oops no no no don't delete
27:09 - that I want to delete the debug
27:12 - log uh and
27:17 - um um I'm going to just say npm install
27:21 - Express D
27:24 - save okay so I just have something screw
27:27 - with my npm innit
27:30 - so I'm going to double back and just
27:32 - skip that in this video and I'll just
27:34 - have a package.json
27:38 - file uh API
27:42 - test I'm just gonna like pretend I made
27:45 - it by myself Mata this will be a um yeah
27:49 - I need to reinstall node thank you guys
27:51 - Mata this will be a little bit of a
27:52 - challenge for you but um I don't think
27:55 - it'll be too much of a problem I'm going
27:58 - to delete this um so I'm going to go
28:01 - back to where I said I have all I have
28:06 - is server and package.json it's going to
28:08 - have to get edited together somehow I
28:10 - don't remember what I was in but
28:11 - probably I was over
28:14 - here so I'm going to look at my
28:17 - directory where I'm have the
28:19 - project and all I have is uh two things
28:22 - I have server.js file which is actually
28:24 - that's where I'm going to put my
28:25 - JavaScript code which is empty and then
28:27 - I have this package.json file which you
28:29 - can make with npm in it but I already
28:31 - have one there that's your configuration
28:33 - file for the project and there's lots of
28:36 - important details about that if you go
28:37 - to publish your thing as a node package
28:39 - or an open source project but for now we
28:41 - can mostly ignore the contents of
28:43 - package.json um and I'll come back to it
28:46 - maybe another time um so you can see
28:48 - what's in it it's just like a little bit
28:50 - of stuff saying like hey this is the
28:51 - name of my project and this is the
28:52 - version but what I want to do is go and
28:55 - grab this and now install Express with
28:58 - this project so I'm going to say and I'm
29:00 - you can see I'm in that directory and
29:02 - I'm going to say npm install actually
29:04 - I'm just going to paste it in there npm
29:06 - install Express
29:09 - ddave oh I have an error in par so I I I
29:12 - messed up I have an error here I I wrote
29:14 - that package that so by the way if you
29:16 - get if that happens to you let that
29:18 - happen um trailing comma I got an error
29:21 - in my package.json file so that should
29:23 - fix it I'm gonna say clear and try this
29:26 - again Oh yay that looks much better so
29:29 - you can see it should now I should have
29:32 - a a new directory called node modules
29:34 - and you can see oh there's all this
29:35 - stuff installed in there I'm just going
29:36 - to have to trust that Express installed
29:38 - correctly so let's make sure
29:40 - everything's working I'm going to go
29:42 - into my server and I'm just going to say
29:45 - console.log server is
29:48 - starting and I'm going to say node
29:51 - server server is starting great so a
29:54 - node program is just like a program that
29:57 - that's written in JavaScript that just
29:58 - runs on your computer and it runs
30:01 - without Graphics without a window and
30:03 - actually there's a lot of stuff you can
30:04 - do with node I mean you know I should
30:07 - probably really Learn Python one of
30:09 - these days but I use node a lot to do a
30:11 - lot of batch processes on my computer
30:12 - like oh I could just write a little node
30:14 - program to rename a whole directory of
30:15 - files or I can do you know make a
30:18 - request to some other API and download a
30:20 - whole bunch of things so you know node
30:22 - is something that you can just forget
30:23 - about web servers and apis you can just
30:25 - use as a little programming tool to try
30:27 - do a bunch of things for yourself on
30:28 - your computer through code but what I
30:31 - want to do the first thing I want to do
30:32 - is create a web server and by web server
30:35 - I mean something that opens up a port
30:37 - and allows browsers to connect to it and
30:40 - this is very easy with Express now I
30:42 - have most of this documented on this
30:44 - page so I'm kind of going to go and kind
30:45 - of copy paste some of the like pieces of
30:48 - code the first thing I
30:50 - need is uh I need to say VAR Express
30:54 - require Express this is like an import
30:57 - state statement import the package
30:59 - express I want to be able to use express
31:01 - now the funny thing about this is I get
31:03 - requir Express I get this into a
31:05 - variable this whole package is actually
31:08 - a function Express is a reference to a
31:10 - function and I can execute that function
31:12 - and that's what I'm going to do here in
31:13 - this next line of code I'm going to say
31:17 - app equals Express so I execute Express
31:20 - and suddenly I get this web application
31:22 - this is what I mean about how great it
31:23 - is to use express it's doing all this
31:25 - stuff behind the scenes and at the first
31:27 - thing I can do is I say Hey listen for
31:29 - incoming connections so I'm going to say
31:32 - server
31:34 - equals app. listen Port 3000 now there
31:38 - are various default ports that servers
31:40 - will will use but since I'm just doing
31:42 - all of my testing you know this diagram
31:44 - that I have over here of this idea of a
31:46 - server and a client right now all of
31:49 - this is happening on one computer the
31:50 - server on the computer the client is
31:52 - that computer itself and that might
31:54 - actually for a lot of projects be all
31:56 - you need but at some point you also
31:57 - might want to deploy your server
31:59 - somewhere else so that other people
32:00 - could connect to it and I'll have to
32:01 - make some videos about that as well okay
32:04 - so now that I'm listening at Port 3000
32:08 - um I can do uh I can do a few different
32:11 - things so one thing let's just run
32:15 - this server is starting and you know
32:17 - what would be nice it would be nice to
32:19 - like add a little call back here so I'm
32:21 - just going to write I'm going to add
32:23 - something called function
32:25 - listening and I'm going to say
32:28 - console.log
32:30 - listening so I'm just wrote a little
32:33 - call back so that and and actually there
32:35 - the the reason I'm adding this into the
32:37 - code is there are a lot of things you
32:38 - can do here you can get the host address
32:40 - and the port and various things but most
32:42 - of this stuff is unnecessary for what we
32:43 - want to do but I want at least sort of
32:44 - see this call back that it's working so
32:46 - I'm going to um I'm going to run this
32:48 - again server is starting listening okay
32:52 - here we go now uh so let's go to Local
32:56 - Host 3,000 this is where my server is
32:59 - I'm going to look at the web page I made
33:01 - Oh cannot get anything so there's
33:03 - nothing there but you can see that this
33:05 - is working because at least I got the
33:07 - message I'm listening but I don't have
33:09 - anything to give you right the me the
33:12 - web browser right now made a get request
33:15 - to this to the server and this is kind
33:16 - of an important concept so one of the
33:19 - first things I might do although this is
33:20 - a little bit NE unnecessary for this
33:22 - idea of an API but it's kind of worth
33:25 - exploring right now that we're going
33:26 - through this Express stuff is I can
33:29 - use an aspect of
33:32 - Express to host static files meaning I
33:37 - can make and this this idea of uh this
33:39 - word public in there is something I
33:40 - could make up so I could call this
33:41 - website instead of Public public being a
33:43 - kind of standard thing this is saying
33:45 - use out of the Express package its
33:48 - ability to host static files HTML files
33:51 - image files movie files all that sort of
33:53 - stuff so what I can do now if I go into
33:57 - here right into my project what I want
34:00 - to do is create a folder I'm going to
34:02 - call that folder website which is sort
34:04 - of a silly name and I'm going to put in
34:05 - that folder a file called
34:08 - index.html and then I'm going to
34:10 - say
34:13 - hello so in that file it says hello okay
34:17 - and then I don't know why I'm speaking
34:19 - in that voice uh and then I mean I do
34:22 - know why I am but I don't know why why I
34:25 - am why I am anyway now if I hit refresh
34:29 - now first of all I've got to restart the
34:30 - server so here's the thing there's
34:32 - actually a really nice tool you notice
34:34 - how I have to like stop the server
34:35 - restart it stop the server restart it
34:37 - every single time I change my code
34:40 - there's a nice little node
34:43 - module I'm sure this is um which um
34:47 - called node Monon and node Monon like
34:50 - node monitor I think monitors your code
34:52 - and restarts the server for you every
34:54 - time you change the code now this can be
34:55 - problematic and you don't always want to
34:57 - use it but in this case it would be a
34:58 - lot more convenient and dash g means I
35:00 - want this package this isn't a package
35:02 - associated with this project I want this
35:04 - as just a global tool that I'm use on my
35:05 - computer this probably is going to fail
35:08 - oh but maybe it's not I'm feeling
35:10 - hopeful now that actually this is going
35:11 - to work yeah so I got some error
35:13 - permission denied this is because I when
35:15 - I'm installing a global package it's got
35:17 - to go into like user VAR local bin some
35:20 - secret place on my computer where I need
35:22 - special permission so I'm going to say
35:24 - pseudo for super super super do uh npm
35:29 - install node
35:31 - m-g and now I'm going to type in the
35:33 - password here and hopefully this
35:41 - works there that seemed to work or I'm
35:44 - getting some warnings I'm getting some
35:46 - things that look scary oh it's doing
35:47 - more stuff ah I think that worked so I'm
35:50 - now G to say nodon
35:53 - server.js and this is working so you can
35:56 - see that it is the server is starting
35:58 - listening and watch what happens if I go
36:00 - back and I say go to my server and I say
36:03 - um you know I make a just do a character
36:06 - turn and hit save you can see here look
36:09 - how many times it restarted the server
36:11 - so now I can kind of ignore terminal for
36:13 - a little while and just go from uh I can
36:16 - just go from my code to when I make a
36:18 - change refreshing in the browser so look
36:20 - at that by the way I now see the files
36:23 - that are in that directory website so
36:26 - this is this is step one we have now
36:28 - written a web server with like barely
36:31 - any code at all look this is like all
36:33 - the code for the web server and
36:34 - incidentally if you've ever seen me or
36:37 - do something like this like often I'll
36:39 - run a web server on my computer by just
36:40 - saying python DM simple htpp server
36:43 - that's running a web server there are
36:45 - lots of other tools there's um a node
36:47 - HTTP server there are lots of tools that
36:50 - just make a web server that hosts files
36:52 - this is what we have now done um in this
36:56 - exact program so Step One is completed
36:59 - we have written a web server that hosts
37:01 - files in the next video I'm going to add
37:04 - something to this called routes so in
37:07 - addition to hosting files I'm going to
37:09 - allow the user to send information or
37:12 - request information through something
37:14 - called a route a restian route by
37:18 - restian I mean you're going to want to
37:19 - take a rest after watching the video
37:21 - probably okay so I'll see you in the
37:22 - next video thanks for watching this one
37:24 - on setting up a basic web server with
37:25 - Express
37:28 - I'm going to take a look at the chat I'm
37:30 - taking a look at the
37:32 - time
37:34 - um this computer my computer that has
37:37 - the chat died I think the batter I only
37:40 - have one plug so I I I don't know if
37:43 - anybody's telling me anything or if
37:44 - everything has gone completely kaput I'm
37:48 - still smelling a little the smoke from
37:49 - that
37:50 - hin come computer wake up I want to see
37:53 - the
37:54 - chat uh I don't know I was going to put
37:57 - on some
37:59 - music ah the chat's coming back the
38:02 - chat's coming
38:05 - back come on wake up
38:10 - ah uh 1% I see I did run out of the
38:13 - battery
38:15 - life um and now cancel
38:22 - okay
38:23 - um okay um everybody I I I see a bunch
38:29 - of chat messages chat is coming back um
38:33 - okay so is everything working okay you
38:34 - guys can hear me and see me um hopefully
38:37 - everything is
38:39 - good um yeah no I'm using Mac OSX um yes
38:43 - okay all right so uh in the next video
38:46 - I'm going to start talking about routes
38:48 - now let's I gotta figure out what this
38:51 - why it's called rest so let's look a
38:54 - Wikipedia will tell us this is me like I
38:57 - just like oh soap I remember there used
38:59 - to be
39:01 - soap soap is a protocol rest is an
39:04 - architectural style why is it called
39:05 - rest though and why is it restful stands
39:08 - for represent representational State
39:11 - transfer uh I I can't bring myself to
39:14 - read this um but I uh architectural
39:18 - client server stateless oh this is like
39:20 - way too much so I'm going to um uh let's
39:24 - see let's see API apply to web services
39:26 - web service adhere the rest
39:28 - architectural constraints are called
39:29 - restful apis defined with the following
39:32 - aspects they have a base URL an internet
39:35 - media type that defines State transition
39:37 - data
39:38 - elements URL standard HTTP methods all
39:41 - right get
39:43 - put yeah yeah this is this makes sense
39:47 - to me
39:49 - okay okay
39:52 - so there's what what's the chance that I
39:54 - can remember representational state
39:57 - transfer whatever okay so now what we're
40:00 - going to do is I'm here and I am going
40:04 - to start talking about
40:07 - restian
40:09 - restful restful
40:18 - routes and I'm cycling these
40:21 - cameras um I really hope that we can
40:24 - kind of get still got 4 5 minutes today
40:27 - so I think there's a good chance of
40:28 - getting through a decent amount of
40:30 - material but certainly not everything
40:32 - okay here we
40:39 - go I'm ready I'm gonna
40:45 - start in the previous video I made a
40:48 - simple little web server it's like only
40:50 - got this much code in it and all it does
40:54 - is never mind
40:57 - let me start
41:01 - over in the previous video I used node
41:04 - and a node package called Express to
41:06 - make a very simple web server all it
41:08 - does is it spins up a server listening
41:10 - on Port
41:11 - 3000 and if I run
41:14 - it it looks it serves up anything that's
41:18 - in this directory called website okay
41:21 - and in that directory called website is
41:23 - a little index.html file that says this
41:25 - and now I see that in the web page in
41:28 - the web page I don't know if that even
41:30 - makes sense okay so what do I want to
41:31 - add to it the goal of this video series
41:34 - is to make an API now there are a lot of
41:37 - different ways and styles and flavors
41:40 - and designs and kinds of ways you could
41:42 - make an API I'm sure and the kind of API
41:45 - I'm going to show you is a restful API
41:47 - and I like to call it I like the idea of
41:49 - it being restful because I want it to be
41:51 - relaxing and enjoyable a soothing I a
41:54 - soothing API um but rest is like a
41:57 - essentially like a style so to speak of
42:00 - how um it's a broader term it stands for
42:03 - representational straight State transfer
42:06 - it's you can link to the Wikipedia page
42:07 - and you can read all about it but it's
42:09 - really a Style by which users of the API
42:13 - can make get requests and receive
42:16 - information back from the API so and let
42:19 - me try to describe kind of the basics of
42:21 - how it looks and works so I'm going to
42:23 - erase all of my diagrams from some other
42:25 - previous video and let's let's think
42:27 - about what's happening so let's say you
42:30 - have um you're making a API about
42:33 - flowers maybe it's about rainbows make
42:35 - one about rainbows but flowers I'm going
42:37 - to use flowers right now flowers
42:41 - ai.com so HTTP this is your website your
42:46 - web server your domain all that stuff
42:49 - you might go to flowers ai.com and you
42:51 - will see the index.html page that's
42:54 - there that's the web server we've
42:55 - written we've written
42:56 - you might go and say like uh
43:00 - slab and maybe actually you have in your
43:03 - website directory your public directory
43:04 - a folder called about with another index
43:06 - on HTML file and when you go there you
43:08 - see that one so this idea of paths with
43:12 - slashes is something that you typically
43:14 - see to navigate through directories of a
43:18 - website however these slashes and the
43:22 - things in here don't just have to be
43:25 - directories they can actually signify a
43:27 - route so for example what if I went to
43:31 - I'm just going to call it FL
43:33 - flower
43:34 - ai.com
43:39 - search
43:41 - sunflower right what if I went to this
43:44 - and this isn't actually a directories
43:47 - these are these are commands that I am
43:49 - issuing to the API I'm saying search for
43:52 - this particular flower called sunflower
43:55 - and I want to to get back maybe some big
43:58 - Json F all this information about
44:01 - sunflowers so this is an idea of a route
44:05 - um and when you build an API you might
44:07 - build different routes for different
44:09 - kinds of ways of accessing the data you
44:11 - might make a route for getting all the
44:13 - data or for searching for one piece of
44:14 - the data or a route that signifies I
44:17 - want all the data but I want it sorted
44:18 - in this manner or I want all the data
44:20 - but only if the data starts with the
44:23 - letter P for example so there's a lot of
44:26 - ways you can use routes so now here in
44:29 - the code this is not the code I need to
44:32 - start to manage how those routes are
44:34 - handled so right here I'm going to start
44:37 - adding that code so I'm going to add a
44:39 - bunch of carriage returns and right here
44:41 - I'm going to set up a route
44:45 - so please edit that cough
44:48 - out when a user goes to one of these
44:51 - routes or goes to in the browser types
44:54 - in a URL or clicks on a link to a URL
44:56 - they are making something called a get
44:58 - request please may I have something from
45:02 - you server can I get stuff back and
45:06 - you'll get images there's a dog barking
45:09 - images HTML files CSS all that sort of
45:12 - thing so if you want to handle a get
45:14 - request that goes to a specific route I
45:16 - could say
45:18 - [Music]
45:20 - app.get um uh get
45:23 - slash um I'm I lost my train of thought
45:27 - um let's just we're thinking about
45:28 - flowers right uh
45:31 - flower and then I need a call
45:34 - back um send
45:37 - flour send flour all functions should be
45:40 - called send flour send flowers okay so
45:43 - I'm going to write send flow so the idea
45:47 - here is I'm now writing the code if any
45:49 - user of this API user meaning a a not
45:52 - necessarily a person but a web browser
45:54 - some client that's going to connect to
45:55 - it goes to
45:57 - slfl then this function sflow should be
46:00 - executed that's the call back now the
46:03 - sflow has two arguments associated with
46:06 - it a request and a
46:08 - response every web transaction so to
46:12 - speak when I go and type you know
46:15 - google.com or rainbow somethings
46:17 - something.com I'm making a request to
46:20 - the server so all the information about
46:22 - me is in that variable called request
46:25 - the server then sends back a response
46:28 - all the information about the server's
46:30 - response is in that variable response
46:32 - and I'm using this idea of all the
46:33 - information very Loosely information
46:35 - data you know in request you could find
46:37 - like what was the operating system what
46:39 - was the browser what are the headers you
46:41 - know there you're going to see like were
46:42 - there any parameters sent also the
46:44 - response has things like ah I can send
46:47 - back some data so what I'm going to do
46:49 - is I'm going to now say right here
46:52 - response send I love flowers
46:56 - to so if the user goes to
47:00 - slfl rather than look for a directory of
47:04 - HTML CSS JavaScript files along that
47:06 - path this is a route that I'm going to
47:08 - handle programmatically and I'm going to
47:10 - say I love flowers too so let's uh hit
47:13 - refresh the server is still running I am
47:15 - now up here going to change this to say
47:17 - go to the route
47:19 - slfl and I see I love flowers too now
47:22 - there's no HTML page there's nothing
47:25 - there's just code and the response sent
47:28 - back the
47:29 - response okay so this is part one but
47:32 - remember this idea of like searching
47:35 - right the idea of using an API to search
47:37 - what I want to do is have a well there's
47:40 - a lot of things I can do but something
47:42 - at least to get started with is what if
47:45 - I were to search at a second uh a second
47:51 - tok a second I don't know what to call
47:52 - it a second
47:53 - element um to this route searchs
47:57 - sunflower but rather than oh I'm come
47:59 - back over
48:02 - here rather than say
48:05 - slash um search SLS sunflower what I
48:10 - actually want to handle is not the
48:13 - specific route I want if they go to
48:15 - search I then want the second element to
48:18 - be a variable so to speak something that
48:20 - changes every time so here I'm going to
48:23 - say colon flour so that indic Ates that
48:26 - this
48:28 - search that that search is the route
48:31 - followed by something that the user
48:33 - enters and that will be here found in
48:36 - the request so in other words I'm now
48:39 - going to go to uh searchs
48:44 - sunflower and you're going to see it
48:46 - still says I love flowers too that's
48:48 - what I'm sending back but now I can do
48:51 - something more I can say there's some
48:54 - data associated with this request
48:58 - something came in Beyond just search
49:00 - some type of flower I can say uh
49:04 - request. params there are parameters
49:06 - flower is a parameter and now I can say
49:10 - here send the response back I
49:14 - love
49:16 - data do uh data. flower
49:21 - to so I'm kind of I don't like this
49:24 - amount of space that I have here
49:26 - I'm going to fix this and make this a
49:27 - little smaller ah no no way too small
49:30 - maybe this will get edited for
49:34 - flow okay so here you can see that in I
49:38 - in the response I'm actually going to
49:40 - send back something that was sent now
49:42 - what I'm doing here has no there's no
49:44 - point to it I'm just showing you the
49:45 - pieces of how things work so we can get
49:47 - to the place where it has a point so
49:50 - let's see now if this works if I refresh
49:53 - here I love sunflower too and I can can
49:55 - put daisy I love Daisy too and I can put
49:59 - rainbow doesn't have to be a flower and
50:01 - I can put so in other words there's a
50:03 - round trip happening I'm making a get
50:05 - request with this route search SLS
50:09 - something the server gets that something
50:12 - as a parameter part of the
50:14 - request and looks at it puts it in this
50:17 - variable data then pulls out flow there
50:19 - so there could be a lot of parameters so
50:21 - I can add another one I could say slash
50:26 - num and then I can say VAR num equals
50:30 - data. num and I can then have a I was
50:34 - going to do a for Loop or something and
50:35 - have it say I love data. flower so many
50:38 - times let's just do that that's sort of
50:40 - silly but why not uh so I can say uh
50:43 - response equals this and then for VAR I
50:46 - equals z i is less than
50:48 - num uh
50:51 - i++ uh respon I can't call this response
50:54 - uh reply reply I'll call it
50:57 - reply plus
50:59 - equal
51:01 - this and then I'm going to send back
51:04 - that
51:05 - reply right so I've added a little logic
51:07 - So based on whatever number I get in I
51:09 - do that a bunch of times and now we can
51:12 - see I'm getting both a flower and a
51:14 - number and if I go search Rainbow 5 I
51:18 - get it if I do it slash 50 I get it 50
51:22 - times right so the reply is now based on
51:25 - what has been sent into the server so
51:28 - this is the basic idea of how a route
51:33 - Works um with a get request now of
51:37 - course there's something later you're
51:38 - going to see there's also a post request
51:40 - I can say app.st and we're going to need
51:42 - that for this example that I hope to
51:43 - ultimately build but in the next example
51:46 - what I want to what the next video what
51:48 - I going to do is add a little bit of
51:49 - persistence to this so what I want to do
51:52 - is allow the create a set of routes
51:55 - where the user can retrieve data and
51:57 - then contribute to that data as well uh
52:00 - as well so we'll see that in the next
52:04 - video
52:06 - okay all of a sudden I have my cof is
52:09 - back it is five of four it's very hot in
52:11 - this room again I think the heat is on
52:13 - and then I have these Hot Lights
52:17 - um is this making
52:19 - sense everybody I don't know I'm kind of
52:22 - making these like really really short
52:25 - yeah I this like cold that I've had has
52:28 - just been lasting La lasting
52:31 - forever um okay um so what I want to do
52:36 - next
52:39 - is um I'm going to create
52:43 - a um okay good um I'm trying to think of
52:47 - what I mean I was going towards doing
52:50 - sentiment
52:51 - analysis so I think uh um sorry was I
52:57 - hope the cough didn't blow out your ears
53:00 - um search is sort of silly search is is
53:03 - meaningless it's something that I made
53:04 - up so I'm going to um change this I'm
53:08 - going to go towards the sentiment
53:09 - analysis example that I'm ultimately
53:11 - going to make although I was kind of
53:13 - going to do that all from
53:16 - scratch um
53:19 - but um can we have op yeah you can have
53:21 - optional variables absolutely so let me
53:24 - um
53:26 - let me add uh let me add some stuff to
53:28 - this and I think I will go towards the
53:31 - sentiment analysis example
53:34 - okay use Baker cat as an example I don't
53:37 - know what that is but I appreciate the
53:40 - how to manage a slash inside the search
53:42 - query yeah alesandro that's a good
53:45 - question there are ways of um URL
53:49 - encoding um various kinds of characters
53:51 - that cause a problem um so I would I I
53:54 - would have to look at that that
53:55 - specifically but of course there's
53:56 - always a way around it
53:58 - um optional variables in the middle of a
54:01 - URL is hard yes definitely hard it's at
54:04 - the end that kind of works best okay so
54:06 - I'm going to try to get one step further
54:09 - here with this at least if not two um
54:15 - and that's all I'm going to be able to
54:18 - do
54:19 - today um okay so
54:24 - um
54:25 - and what I want to do
54:27 - is um just add
54:31 - this oh really I guess it's uh is it
54:35 - rendering it as HTML
54:37 - yeah um and I wanted to actually have it
54:41 - be
54:42 - this okay
54:45 - um okay so I looking at my phone which
54:49 - is no reason okay so I got to get to the
54:52 - next
54:53 - stage the next stage of of this is I
54:57 - want to take input from a user and
55:00 - essentially save it to a database which
55:03 - is GNA I'm going to do in two stages um
55:06 - and then I also want to look at how to
55:08 - send that information
55:10 - back
55:15 - okay
55:18 - okay uh where am I here I will start
55:23 - here okay
55:25 - sorry why live I've got lots of uh this
55:28 - has the default YouTube Clean language
55:30 - settings I think you'll come I think
55:32 - it'll let you back in y live a if
55:34 - anybody knows how to let y live a back
55:36 - in okay here we
55:41 - go in
55:44 - the in the previous video I got as far
55:47 - as defining a route with parameters the
55:50 - route is search slash some keyword slash
55:54 - some number and the response from the
55:56 - server that comes back is always I love
55:59 - whatever word however many times the
56:00 - number is so if I were to change this to
56:02 - unicorn and a unicorn and put it just
56:06 - with Slash three I would see I love
56:08 - unicorns 2 three times so this is well
56:10 - fun and I like to see how much you love
56:12 - unicorns and rainbows do you love them
56:14 - as much as me I don't know probably not
56:16 - which is a very
56:17 - healthy probably much healthier than
56:20 - however I am but the point of what I'm
56:22 - saying is this is kind of useless let's
56:24 - turn turn this into something useful and
56:26 - so the example that I'm ultimately
56:28 - building here is a sentiment analysis
56:31 - API and so one approach to sentiment
56:34 - analysis is to keep a dictionary of
56:36 - words that either have a positive or
56:39 - negative uh score associated with them
56:42 - so I'm going to go to the
56:44 - code and I'm just going to right here at
56:47 - the top I'm going to create a variable
56:50 - and I'm going to call it uh
56:53 - words and I'm going to put some words in
56:56 - it with a score so I'm going to say
56:57 - rainbow has a score of uh five and
57:04 - unicorn has a score of three what are
57:06 - some sad
57:08 - words Doom has a score of negative3 okay
57:13 - so this is my very basic sentiment
57:16 - analysis dictionary I've got three words
57:18 - in it and what their score is so first
57:21 - thing that I want to do in making a
57:23 - sentiment analysis AP is Expos this data
57:27 - so I'm going to actually add another
57:29 - route here I'm going to say
57:31 - app.get
57:33 - all uh send all and then I'm going to
57:36 - say function send
57:39 - all and this is the call back which has
57:42 - a request and a response and all I'm
57:44 - going to do is say response. send words
57:47 - now notice what I did up here in this
57:49 - reply I just created this string and
57:52 - this string just kind of like spit
57:55 - itself out into the browser but somebody
57:57 - using the API is probably going to want
57:59 - to get the reply back formatted as Json
58:02 - so I better do something to format this
58:05 - as Json well what is words it's a
58:08 - JavaScript object what is jav what is
58:10 - Json JavaScript object notation so one
58:12 - of the magical things about using
58:14 - Express is Express will automatically
58:17 - format your JavaScript object that you
58:19 - send out into the world as Json so this
58:23 - is actually done so I can now go to
58:26 - slash all and I can see this is now me
58:30 - making an API request to my
58:32 - API and I'm getting the list of words
58:35 - and if I add another word to it like
58:38 - Gloom Doom and
58:42 - Gloom uh now I have another uh word
58:46 - there with a score of negative -2 I hit
58:47 - refresh I see that as well so what I
58:50 - want to do in addition to having this be
58:52 - an API so there's a couple things I
58:54 - could do one is that I might want to
58:57 - search for a particular word to see if
58:58 - it's in the API if it is get the score
59:01 - or I might also want to be able to as a
59:03 - user add words to the API so that that
59:06 - you know this is a sort of design
59:07 - decision you know what are you what are
59:09 - you doing here I'm just making a
59:10 - demonstration I think it would be useful
59:11 - to see how can you create a route where
59:14 - a user can insert data into the database
59:17 - and by the way that's my database right
59:20 - now so I as I go through these videos
59:23 - I'm going to get into per IST working
59:25 - with databases and there are various
59:27 - levels of that you know on the one hand
59:30 - this will persist it will never go away
59:32 - it's written there into the code my
59:34 - database is hardcoded not the best
59:36 - solution but it's a good starting point
59:38 - so I'm going to change this particular
59:41 - route and I'm going to change it to add
59:45 - word
59:47 - score add word so I want a route where
59:51 - if the user adds a word with a score It
59:54 - Go goes into the database so I'm going
59:56 - to change this to add
59:58 - word here are the
60:01 - parameters the word is Da uh data.
60:07 - word the uh score is and this is I'm
60:10 - kind of being very long-winded about
60:11 - this I can just say word equals request.
60:14 - pam. word but uh data.
60:18 - score and then what I want to do is say
60:22 - words word
60:25 - equals
60:27 - score look at this this is me taking in
60:30 - the data from the user the word in the
60:32 - score and putting it into that object
60:35 - right putting it into that object the
60:37 - with a key value pair the word is the
60:40 - key the score is the value and then I
60:43 - need to create a reply and all of my
60:46 - replies I want them to be written as an
60:48 - object so I'm going to say message thank
60:51 - you for your
60:53 - word
60:55 - okay so there we go so now if I run
60:59 - this and I go here to all we can see all
61:04 - of the data is there now I'm going to go
61:06 - to one more window and I'm going to go
61:09 - to add uh
61:12 - purple five purple is a very happy word
61:15 - I'm going to hit enter it's going to say
61:17 - message thank you for your word so I got
61:20 - that message back and if I go to all we
61:23 - can see purple oh and look at that it
61:26 - got the uh you know of course the way
61:29 - that it's working is um it came in as a
61:31 - string not a number so I I could correct
61:33 - that if I want let's correct that um so
61:36 - I could say let's make sure that is
61:39 - actually a
61:40 - number because I might want to do some
61:42 - mathematical operations with it later so
61:44 - let's convert that to a number and I'm
61:46 - going
61:47 - to add the word again hit refresh and
61:50 - now you can see I got purple five so
61:52 - there we go I have saved this word
61:55 - forever more in the API now let let's
61:58 - there's a couple things I want to add to
62:00 - this number one is what if I just go to
62:02 - add purple and I forget to add a number
62:05 - I run this it says it cannot get
62:10 - that
62:13 - um time out okay I have to look up in my
62:16 - example I thought it was gonna get this
62:18 - but give me an error on the server side
62:20 - like
62:23 - um like if the last one can be optional
62:26 - I did this I thought in one of my
62:28 - pre-made examples so I'm paused now I'm
62:31 - going to uh go look at my pre-made
62:34 - examples uh oops not here
62:38 - um uh where did I do this simple API
62:41 - Express probably here did I do it here
62:44 - oh no no this is not what I
62:46 - did uh I thought there was a way to
62:50 - determine to make it optional somebody
62:52 - in the um somebody in the uh chat might
62:56 - tell me before I figure it out oh no
62:59 - look at routes rest can I do that in
63:04 - here yeah do think so the last one
63:07 - should be optional that's the way I did
63:09 - it if it doesn't exist then just set it
63:14 - to
63:15 - one how come that didn't work for
63:18 - me
63:23 - um uh
63:35 - right can I just do this didn't get a
63:38 - zero all right I guess I'm not going to
63:40 - add this feature to this program right
63:42 - now and I'll come back to it
63:46 - later hold on let's see console do did I
63:51 - did I add an
63:52 - extra I thought
63:54 - I mean I know I could just do a route
63:56 - without
63:58 - it uh nobody in the chat knows
64:02 - this uh hold on let's let's see here uh
64:06 - console.log m i
64:09 - here uh so if I go
64:12 - to uh
64:13 - here and what if I do a
64:16 - slash no I guess I could do
64:19 - it uh
64:22 - whoops I don't want to get to stuck on
64:25 - this uh add I mean I can do something
64:28 - where if I do this
64:31 - right yeah I don't
64:36 - know am I
64:37 - [Music]
64:39 - here no
64:41 - okay um and not you destroy if there is
64:45 - any uh try yeah I know this do you add a
64:49 - question mark for an optional one I'm
64:50 - going to just not worry about the
64:52 - optional thing because it's not that
64:54 - fundamental to this I can bring that
64:56 - back later I just was going to do it
64:57 - because it seemed like an obvious thing
64:58 - to look at right now um mostly because
65:00 - I'm in a tri Crunch and I have to leave
65:02 - in like 15 uh minutes and I want to get
65:05 - this thing finished so I am going to go
65:09 - back and not worry about that I'm trying
65:13 - to think where I left off before I tried
65:15 - doing
65:16 - that uh I want to get to the um so
65:21 - there's the um there's the optional
65:24 - thing that I
65:26 - did um I'm I'm losing my train of
65:30 - thought um oh it's in a question mark
65:32 - for an
65:37 - optional
65:39 - optional param
65:43 - Express
65:47 - uh yeah I'm curious here um I don't want
65:52 - to get too lost with this key
65:57 - uh uh oh question
66:01 - mark So does that make it optional here
66:04 - question mark yeah after the parameter
66:06 - name
66:08 - okay all right um so I think if I add
66:14 - this
66:18 - now and I take this out
66:23 - y and then right just giving me no okay
66:27 - great sorry about that okay so um
66:31 - wherever that
66:33 - was I will be coming back to that now so
66:36 - whatever I wherever I was I was
66:38 - here and I was
66:47 - saying okay this is where I
66:50 - was it cannot add this because it's
66:55 - looking for this particular route and
66:57 - the route requires also a score however
67:00 - there is a way to make that score
67:01 - optional which could be useful for
67:03 - something you might do which is adding
67:05 - just a question mark to and this really
67:07 - only works for the last one although I'm
67:09 - sure there's some fancy ways around that
67:11 - and then what I could do is I could say
67:14 - if not score you know score equals five
67:19 - or I could
67:22 - say um I could actually say score is
67:26 - required so let's say score is required
67:28 - just to like I could add some error
67:30 - handling here like I could say VAR
67:34 - reply
67:36 - score is
67:40 - required
67:42 - else all of
67:45 - this so I'm basically saying whatever
67:48 - word comes in if I get a score so if not
67:51 - score and also I should probably check
67:53 - and I'm not going to do all this but you
67:54 - know if I want to be really serious
67:56 - about this I would also check like to
67:57 - make sure score is a number and if it's
68:00 - if you sent me the score as like
68:03 - friendship I would say the score has to
68:05 - be a number but here I can just create
68:07 - this variable VAR
68:09 - reply I can fill it if there is no score
68:12 - I can say score is required if there is
68:14 - a score I can add it to the table and
68:16 - say thank you for your word and then
68:18 - send the response so this is one extra
68:21 - thing that I'm adding to this and if I
68:23 - now run this it's going to say hey score
68:26 - is required so I can say now five thank
68:29 - you for your word and we can go back
68:31 - here and we can see purple is there with
68:34 - a score of five so there are a lot of
68:36 - ways to sort of check and see what how
68:40 - PE what what what's coming in and
68:42 - determine whether something is there or
68:44 - not
68:45 - okay so let's add one more thing to this
68:49 - um let's add a search route so that if
68:52 - the user of this API wants to query for
68:54 - a particular word and get the score back
68:56 - let's see how that would work so I'm
68:58 - going to add another
69:00 - route and I'm going to call it I'm just
69:02 - going to go down here to the bottom I'm
69:04 - going to call it a search for a
69:08 - word and I'm going to say
69:11 - search uh search word I'm going to add
69:13 - that fun a call back now search word
69:15 - with a request and a response and I'm
69:18 - going to say the word you're searching
69:20 - for is request pams word
69:24 - and now what I want to do is see does
69:27 - that word
69:28 - exist if if that word is part of our
69:32 - words table I need to make a
69:35 - reply I'm going to send back a message
69:40 - uh you know I'm G to say
69:43 - status
69:46 - found you know
69:48 - word word that's kind of probably a it's
69:51 - a little awkward what I'm doing I'm just
69:53 - going to call this yeah it's fine um
69:55 - it's a little awkward what I'm doing
69:56 - with these variable names and then score
69:58 - I'm going to say words word so what I'm
70:01 - doing here is I'm saying uh if it's
70:04 - found then the reply sorry equals this
70:07 - particular
70:10 - object so if it's found the status is
70:13 - found here's the word here's the
70:16 - score otherwise the reply
70:21 - is status not found and then there is no
70:25 - I can send back the word word there is
70:26 - no score and I can say uh
70:32 - response do Send reply so the idea here
70:36 - is that you know I'm just showing you an
70:38 - example now I'm making a route for the
70:40 - API where a user could say hey do you
70:42 - have this word rainbow in your database
70:44 - if you do could you give me a score if
70:46 - you don't will you tell me that you
70:47 - don't have it um so this is jet another
70:49 - thing search word check to see what word
70:52 - did the user set in is it part of the
70:54 - data if it is say it's found and this is
70:56 - often a good technique let me give you
70:59 - back the data you asked for because a
71:01 - user of this API might be querying like
71:03 - a thousand different words and all the
71:05 - all the responses are coming back and if
71:07 - the data that came with the request also
71:10 - comes back with response it's going to
71:11 - make it easier for the user to manage so
71:13 - now let's run this and I can see here uh
71:17 - I'm going to go now to search SL rainbow
71:23 - we can see status found the word is
71:25 - Rainbow the score is five
71:28 - search
71:30 - unicorn status found word unicorn score
71:33 - 3
71:35 - search
71:38 - kitten status not found word kitten so
71:41 - this is how I am now making an API that
71:44 - allows a user to query the database so
71:47 - we have the ability and then by the way
71:49 - now I can say add kitten five and then I
71:53 - can say say search
71:56 - kitten and now it's found with a score
71:59 - of five so notice how I'm only
72:01 - interacting with this API via the URL
72:04 - address bar and ultimately as I get
72:06 - through more videos here I'm going to
72:08 - look at how do I actually interact with
72:09 - it from my client side JavaScript code
72:11 - which will really open up a lot of
72:13 - possibilities so I now have an API which
72:15 - has three features I can look at all the
72:19 - words that are in the database and their
72:21 - score I can add a word uh like uh purple
72:27 - didn't I already add purple so we're
72:28 - gonna have to talk about that and oh
72:30 - purple's positive give it three so I can
72:32 - add a word and I can also search and see
72:36 - if a word is in
72:38 - there purple is in there but
72:42 - perhaps pink is not so this is a good
72:46 - start I have this idea of persistence
72:48 - there's a database of information users
72:51 - can add to that database users users can
72:53 - request all of the data from the
72:55 - database or they can request one item
72:57 - from the database but you'll notice
73:00 - here I have this wonderful thing where I
73:03 - have I added kitten in purple so now
73:06 - what I'm going to do is I'm going to
73:08 - quit the server and I'm going to restart
73:11 - it and I don't have kitten in purple
73:14 - anymore so while there is persistence
73:18 - across do you hear the puppies barking
73:21 - about my wonderful API discussion
73:24 - um while there is this idea of
73:26 - persistence while the server is running
73:28 - as soon as I quit the server and restart
73:30 - the server I've lost any new data that
73:33 - wasn't just part of what was originally
73:35 - written in here so in the next video
73:38 - what I'm going to show you is how to
73:40 - keep persistence across and multiple
73:42 - times running the server how do I take
73:45 - what's here and actually not have it be
73:47 - hardcoded but save it to a database okay
73:50 - and I'll see you in the next video or
73:52 - I'll do that
73:55 - okay you guys can hear the dog barking
73:58 - okay that's going to be wonderful that's
73:59 - always hear okay it's
74:01 - 4:18 um I I I unfortunately I'm just
74:04 - going to check to make sure there was no
74:06 - change in my
74:08 - schedule uh oh okay oh I have to
74:11 - check I have to live check to see if I
74:15 - won the Hamilton Lottery that's really
74:17 - going to change my day Hamilton New York
74:19 - Lottery results unfortunately you were
74:22 - not selected reer tickets to the
74:23 - November 1st 7 PM performance of
74:25 - Hamilton okay that's good to
74:27 - know um so because I have to leave in
74:30 - about 10 minutes I would like to keep
74:32 - going through this but I also just don't
74:33 - want to rush it I feel like this is a
74:35 - good meaty uh vegetarian
74:39 - tofu topic um and let's let me go back
74:43 - to my list and sort of think about how
74:45 - far we really got which is which I have
74:47 - to admit is not very far um and uh where
74:51 - is where was my um
74:54 - main I'm go back to here um this is U so
75:00 - I was able to get really
75:03 - through the things that I would check
75:05 - off here if I were checking things off
75:06 - would be using Express and serving files
75:10 - um having a
75:13 - uh a query string uh actually I didn't
75:16 - use do the query string looking at a
75:18 - restful routes restian routes didn't
75:21 - really talk about cores which is
75:22 - something I'm going to have to
75:23 - and sending back Json I wish I wish
75:26 - there was a um a way I could annotate
75:29 - this um so when I come back for another
75:32 - live stream which gosh I really wish it
75:34 - could happen this week but it won't
75:37 - because there's maybe it could happen
75:38 - over the weekend I'm not sure um um you
75:43 - know in terms of the um the time I have
75:45 - and just this the amount of the the
75:47 - availability of this space um but I will
75:50 - continue this I want to get all the way
75:52 - through building out this API and saving
75:55 - the data to a database and then actually
75:56 - starting to use it to do symptomate
75:58 - analysis and then loading a pre-existing
76:01 - list of words and their scores so
76:05 - um um so um I'm actually not vegetarian
76:10 - but I in
76:12 - spirit I feel like a a um you know we
76:17 - should I anyway I don't I don't have I
76:19 - don't know what I'm discussing here I've
76:20 - lost my lost my mind yes sorry um some
76:23 - is asking very an important question
76:25 - that this would this would actually look
76:27 - like this if you were coding along with
76:29 - me um and that I actually am using a
76:32 - Chrome extension that formats the Json
76:34 - that you get back kind of nicely which
76:36 - is just very convenient to use um so
76:41 - um um so anyway I have 10 minutes I
76:44 - would like to take some questions from
76:46 - the chat about anything really I can do
76:48 - that for about five or 10 minutes and
76:50 - then I'm going to have to say goodbye
76:52 - apologize for for the short session
76:54 - today um and we'll be back next Tuesday
76:57 - okay um shiffman do you know something
77:00 - about goang no I don't um but that's an
77:05 - interesting idea for me to investigate
77:07 - shiffman why not use a my SQL server for
77:09 - this so this is the discussion I want to
77:11 - have when I get to this idea of
77:15 - persistence so there are a lot of ways
77:19 - that you can store your data and
77:21 - probably the most sophisticated robust
77:23 - scalable way is to use a database a
77:26 - mySQL database a SQL database that's
77:30 - kind of the same thing mongod DB couch
77:32 - DB there are a lot of systems for doing
77:35 - that I'm here teaching about kind of
77:38 - creative projects and rapid prototyping
77:40 - for a lot of things where you're just
77:41 - sort of stitching stuff together and
77:43 - making an example learning a whole
77:45 - database system could be kind of
77:46 - Overkill when you could just save the
77:48 - data to a Json file so I'm kind of going
77:50 - to that's where the next step that I'm
77:51 - going to take which is actually quite
77:53 - easy and works quite well of course of
77:55 - course if there's scalability concerns
77:57 - massive data lots of relational data if
77:59 - there's um you know privacy and security
78:01 - issues you know you're going to need
78:03 - something more than just a Json file but
78:05 - that's actually going to be pretty
78:06 - powerful to use I also want to show you
78:09 - um and I do have all these examples
78:12 - already I just haven't um gotten a
78:14 - chance to go over it but I'm going to
78:15 - show you something called Firebase which
78:17 - is a database as service essentially
78:20 - where you can just sign up for an
78:21 - account and uh you know I've been able
78:23 - to do everything for free so far at
78:25 - least with my examples and sort of send
78:27 - the data to Firebase Firebase will save
78:29 - it for you and you can always request it
78:31 - back and actually you don't even need
78:32 - node to use Firebase you can do
78:34 - everything from the client side which is
78:35 - quite nice
78:37 - um okay um Mac brick asks shiffman how
78:41 - long have you coded um I think I
78:43 - probably started programming really in
78:46 - 2001 so that would be I don't know you
78:48 - do the math um but it was sort of late
78:52 - late late later in life than uh a lot of
78:54 - people I mean there's no time where you
78:56 - can't start coding but I was in my later
78:59 - 20s around then I think if that's right
79:02 - um I did a little bit of programming in
79:04 - Middle School uh using the basic
79:06 - programming language and also Assembly
79:07 - Language and I maybe took like one
79:10 - course on like C++ like when I was in
79:12 - college but I never really started
79:13 - programming till about
79:15 - 2001 uh okay um trying to think if there
79:19 - are other important announcements let me
79:21 - look at I'm kind of nearing the end so
79:24 - to speak of this course um so I want
79:26 - there's a lot more that I want to look
79:28 - at building apis and using these node
79:30 - packages uh for doing some other text
79:33 - classification text generation analysis
79:35 - stuff I want to do a whole session on
79:37 - Chrome extensions that's probably might
79:38 - take a two-e period as well this is
79:40 - taking two weeks um and then you know
79:43 - there's this time in my actual course at
79:45 - ITP at NYU where students are over four
79:48 - weeks are working on Final projects so
79:50 - um any of you who are interested in kind
79:52 - of of thinking about watching these
79:54 - videos and as if you're taking a course
79:56 - you could just do that and share with me
79:58 - on Twitter or in the comments any
79:59 - projects you make but I will say you can
80:02 - also uh subscribe to my patreon um and
80:06 - patreon.com coding rainbow and um there
80:10 - if you join that there's a slack Channel
80:12 - where you know it's kind of trailed off
80:13 - I think people are busy but I'm hoping
80:15 - that we can kind of revive it a little
80:17 - bit where people are discussing
80:18 - assignments and asking questions and
80:19 - that sort of thing ah um so oh yeah
80:23 - using a Excel for a database or a
80:25 - spreadsheet for a database is um quite
80:27 - useful and in fact I over that I would
80:29 - say and I have an example that I made
80:31 - previously of just using a Google sheet
80:33 - so you can actually and there is
80:34 - something called
80:36 - shetu uh shetu Doom I believe this is a
80:39 - commercial service I think you can use
80:41 - it for free but turns a Google
80:42 - spreadsheet into a rest API hey maybe
80:45 - you know what a rest API is now
80:46 - spreadsheet as database so this is
80:48 - something I should add to my list to
80:50 - maybe do a video about in particular um
80:53 - a lot of I've gotten a lot of requests
80:55 - for more kind of like classic arcade
80:57 - game coding challenges and I think what
80:59 - I might do is when I have time towards
81:01 - the end of the NYU semester where I'm
81:04 - not where I'm done with these topics I
81:05 - might just do a couple weeks where I
81:06 - just do those arcade game coding
81:08 - challenges because I find them to be a
81:09 - lot of fun and you know to be honest the
81:12 - snake one that I made which isn't really
81:13 - even that good as
81:15 - like hundred times more views than any
81:18 - of my other videos um what do you think
81:21 - about making a project in the type of a
81:23 - big collaboration of the whole Community
81:25 - I would be thrilled for something like
81:26 - that um uh I would be glad to support
81:29 - that and I would hope that that
81:31 - Community would include people from all
81:34 - sorts of backgrounds um and genders and
81:37 - ethnicities it would be terrific if we
81:39 - could make a community project like that
81:41 - um joining the patreon the slack channel
81:42 - would be a good place to start with a
81:44 - smaller Community there are other more
81:46 - open uh slack channels I believe there's
81:48 - a creative coding one um and um but
81:51 - certainly um
81:53 - uh you know send me a tweet I'll retweet
81:56 - it if you want people to get in touch
81:57 - with you about a project um um uh John
82:02 - is asking something about install no
82:04 - Damon I don't know what that is um oh
82:08 - and um but I'm using something called
82:10 - nodemon which you don't you can just use
82:11 - npm installed nodemon um are we called
82:15 - creative coding now it's well I don't
82:17 - have a short answer to that question and
82:19 - I only I have four minutes before I said
82:20 - I was going to go um will I do more
82:22 - generative art stuff yes so by the way
82:24 - this spring I'm going to at NYU be
82:27 - teaching a couple courses based on my
82:29 - nature of code materials which have
82:31 - generative algorithms physics simulation
82:34 - back to sort of graphic stuff and so I
82:36 - expect that once I get back up and
82:38 - running with videos in 2017 after this
82:41 - fall and winter finishes you'll see a
82:42 - lot more graphics and generative
82:44 - algorithm stuff on the um Channel um
82:49 - yeah creative coding is a strange term I
82:51 - you know I personally kind kind of like
82:53 - it to uh signify that the idea here is
82:56 - that we're doing that this isn't
82:58 - computer that this is different than
83:00 - computer science in the sense that
83:01 - computer science really about systems
83:03 - thinking and algorithms and this is
83:05 - really about um kind of playful
83:08 - experiments and
83:10 - applications um and I think of it
83:12 - similarly to um you know there's a
83:13 - little bit of a problem which make is it
83:15 - is it implying that other coding is not
83:17 - creative which I would say is absolutely
83:19 - not true I
83:20 - mean all coding is creative but you know
83:24 - there's a certain distinction that is
83:25 - similar to if you say creative writing
83:27 - you kind of get a sense of like oh maybe
83:28 - you're writing poems or novels or
83:30 - fiction which is different than maybe
83:32 - writing for journalism but writing for
83:34 - journalism is a creative as well but it
83:36 - just kind of codifies at least gives
83:39 - some context to what what the what the
83:42 - context is and so I I like to use
83:44 - creative coding as a term um yeah what
83:47 - did I miss um okay so um thank you
83:51 - everyone for tuning in again I
83:54 - apologize um that this was kind of a
83:57 - shorter session today I can see that it
83:59 - was an hour and 23 minutes long I did
84:01 - have a live stream once that was four
84:03 - hours long um I will be back next week
84:06 - next Tuesday um if I can squeeze a time
84:09 - in before then I would absolutely love
84:11 - to um I'm trying to figure out ways to
84:14 - have more time to do this because it's I
84:16 - quite enjoy it um but it does take a lot
84:19 - of time and energy and certainly having
84:20 - the support emotion uh the friendly
84:23 - feedback the constructive feedback the
84:25 - critical feedback is always helpful and
84:27 - appreciated um please uh if you feel so
84:31 - inclined and there's nowhere it's like I
84:32 - feel like if there was a place to write
84:34 - a review you know honest reviews only I
84:36 - would tell you to but I don't think you
84:37 - can write reviews of YouTube channels
84:38 - but you know share if you if you have a
84:40 - chance to share if you if you like what
84:42 - I'm doing or um hit the like button that
84:44 - kind of thing it certainly uh helps um
84:46 - other people find the channel which
84:48 - makes it easier for me to do this stuff
84:49 - with more things yeah oh by the way way
84:52 - next Tuesday oh my is election day and
84:55 - I'm about to have I'm me seriously
84:56 - where's my anti-anxiety
84:58 - medication um oh the camera went off
85:01 - that's good so I think I will be um
85:03 - broadcasting live on election day uh I
85:05 - don't think I'm going to do any sort of
85:07 - election themed content it is by the way
85:10 - um I forgot to mention that it is nano
85:12 - genmo which I think that I say that
85:14 - right um which is generate a novel month
85:16 - so all the stuff that I'm doing I I I
85:18 - maybe I should give that as a a
85:21 - challenge uh my t is at shiffman maybe
85:24 - I'll think of something election related
85:27 - but I think I'll probably just continue
85:28 - with this API thing and you know we'll
85:31 - see how it goes so thank you guys for
85:33 - tuning in I'm sorry to again today was a
85:35 - little bit shorter I would love to have
85:36 - a conference oh let me just plug
85:38 - something uh for no apparent reason but
85:40 - someone mentioned conference there is a
85:42 - conference coming up called
85:44 - codeland uh which is uh the code newbies
85:48 - conference maybe it is not uh maybe
85:50 - there is not a website for it yet but
85:52 - I'm I'm going to look here on Twitter
85:55 - um um so this is uh April 21st and 22nd
85:59 - 2017 in New York City the reason why I
86:02 - mentioned it is you know I don't want to
86:04 - be so bold but I feel like um uh I I
86:07 - I've gone to some code newbi event I
86:08 - listened to the code newbies podcast um
86:11 - sarin I think I just said her name
86:14 - incorrectly
86:16 - who siron oh my goodness why I'm just
86:19 - like blanking but she the who runs code
86:21 - newbie
86:22 - is absolutely wonderful she's created an
86:24 - amazing community so I feel like if I
86:26 - were to run a conference I would hope
86:28 - that it would have the spirit and
86:29 - community that I expect this conference
86:30 - to have um you can uh and so I would
86:34 - encourage you to think about that I hope
86:35 - to attend although you know I'm not sure
86:37 - 100% but um that would love to see any
86:40 - of you if you're in New York City and
86:42 - meet some of you who are watching um
86:44 - okay I yes it's a bit too far away
86:47 - hopefully there'll be some conferences
86:48 - in other parts of the world that we can
86:50 - meet or have a maybe I could do like a
86:52 - I was about to say coding rainbow I
86:54 - could do some sort of World Tour um okay
86:56 - I'm I MA brick says I have a question so
86:58 - I'm waiting for that one question before
86:59 - I
87:01 - go my song ended this is usually where I
87:04 - hit stop the live
87:05 - stream but the chat seems to be restful
87:08 - yes that's actually great advice from
87:10 - coder for Life
87:12 - everyone sleep is really important your
87:15 - health is really important take it easy
87:17 - don't try to do too much be with people
87:19 - give people
87:21 - hugs um um so uh uh yeah World Tour
87:26 - would be great all if you have questions
87:27 - so uh tweet at me your questions at
87:30 - shiffman um unfortunately I'm going to
87:32 - have to say goodbye right now um I have
87:34 - to go and pick up some small children
87:37 - from their after school activities and I
87:39 - don't want to be late great John says
87:41 - npl install noon worked for me did you
87:44 - include the dash G because you're going
87:45 - to need it to be a global module so I
87:47 - hope to see you guys next week or on the
87:50 - internet in some other fashion and and
87:52 - um thanks again for tuning in and thanks
87:55 - for um um school for poetic computation
87:58 - for having me in their space sfpc doio
88:01 - thank you ITP it. nyu.edu for the
88:04 - students that I wasn't having office
88:05 - hours this afternoon with and I'll see
88:07 - you guys all sometime soon okay