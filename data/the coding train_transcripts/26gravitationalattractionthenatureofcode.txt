00:02 - this I think is the last video in this
00:07 - section all right that maps to chapter 2
00:10 - of the nature of codebook so we're
00:12 - looking at forces in this chapter we
00:14 - started by just understanding that force
00:16 - is a vector it causes an object with
00:18 - mass to accelerate we looked at Newton's
00:20 - law we wrote an apply force function we
00:23 - figured out we could just make up some
00:24 - forces this force is this and this force
00:26 - is that we could calculate some forces
00:28 - you could make you know you could make
00:30 - forces that are random perla noise you
00:32 - could make forces that are based on
00:33 - formulas and in this last video what I
00:37 - think is useful to look at here is
00:39 - another case study of a formula a force
00:41 - that has a formula that you find in a
00:43 - physics textbook gravitational
00:45 - attraction that's we're going to look at
00:46 - and also I think what's useful to look
00:49 - at with this force is that we have
00:51 - objects that what I'm never going to use
00:57 - these again this is the last video that
00:58 - I'm using this but this object attracts
01:01 - this object and this object also
01:03 - attracts this object how do we have this
01:05 - kind of dance of the particles so to
01:07 - speak tenth of the grey circles that
01:09 - moving around our screen so that's kind
01:11 - of what I want us to look at in the
01:13 - context of this video okay
01:15 - so first what is the formula for
01:19 - gravitational attraction okay and I
01:24 - should say that what we're doing now is
01:26 - you know even though it's all the same
01:28 - we're taking earth out of the picture
01:30 - here right every time in all of our
01:31 - previous examples that we're kind of
01:33 - simulating gravity there was this
01:34 - invisible earth maybe below the window
01:37 - that was pulling everything down now
01:39 - we're actually moving into outer space
01:41 - this makes no sense whatsoever but do
01:42 - you make sense in my head we're moving
01:44 - to outer space and we're looking at
01:45 - gravitational attraction between bodies
01:47 - so if you wanted to kind of create the
01:49 - beginnings of a solar system style
01:51 - simulation you could you could use from
01:54 - the stuff we're doing here although I
01:56 - should say we're not kind of we're not
01:58 - going to be really rigorous about our
02:00 - scientific accuracy we just want to look
02:01 - at the formula for gravitational
02:02 - attraction and try to build it into our
02:05 - code loosely so let's look at that again
02:06 - the force of gravity equals G
02:13 - times m1 the mass of one object times
02:18 - the mass of another object m2 divided by
02:21 - distance squared and then I'm going to
02:23 - say times are the unit vector R so
02:26 - remember a force has a magnitude and
02:29 - direction and in this case this whole
02:35 - section right over here is the magnitude
02:37 - and R I'm just taking our unit vector
02:39 - that's going to be our direction so I
02:40 - think I did this backwards what probably
02:43 - would have made more sense was to start
02:44 - with a diagram but let's do it backwards
02:46 - and now let's look at the diagram that
02:48 - matches this formula so we have an
02:50 - object one with a mass so this is object
02:54 - one and it has a mass and this is object
02:58 - - it has a mass and what is our R is a
03:03 - vector that points all the way from one
03:07 - object to another
03:08 - right so object the gravitational force
03:11 - on object one is a vector that points
03:14 - from one to two the gravitational force
03:16 - on object 2 is a vector that points from
03:18 - two to one but let's just actually make
03:21 - things simple to start with in our
03:22 - example we're going to have something
03:24 - called an attractor that doesn't move
03:26 - and we're going to have this is our
03:27 - mover okay so the attractor is this
03:31 - fixed thing and the force is going to
03:32 - map from mover to the attractor okay so
03:37 - you know we kind of did this now this is
03:40 - it this is our you know what's the
03:43 - direction of the force it's our it's our
03:47 - normalized okay we have to I got it I
03:51 - got it this is what we're doing right
03:52 - hopefully we understand this diagram
03:54 - it's pretty simple this thing is being
03:56 - pulled to that thing this is the
03:58 - magnitude that's the direction we need
04:00 - to write this in code so how do we get a
04:02 - vector that points from one position
04:04 - location to another location I wish you
04:08 - were here because you would totally
04:09 - answer this question now and I also
04:10 - wouldn't be so lonely
04:11 - but anyway so what we could get the
04:17 - answer is subtraction we can subtract
04:19 - location 2 minus location 1 gives us R
04:22 - so what I'm going to do is right up here
04:24 - I'm going to make a
04:25 - called direction and it is going to
04:28 - equal and I'm not going to have enough
04:31 - room on this board but I'm going to
04:32 - write down here P vector dot subtract
04:36 - and I'm going to just say location 2
04:38 - minus location 1 so I'm kind of making
04:41 - up that variables exist we'll go look at
04:42 - a practical example in a second but
04:44 - assume that we had two location vectors
04:46 - the direction is the difference a vector
04:49 - that points from 1 to 2 is location 2
04:51 - minus location 1 but we need to
04:54 - normalize it so now we can say di r dot
04:58 - normalize and di r is the direction that
05:03 - the unit vector R we're done so we have
05:07 - the the forces Direction once we have
05:10 - the forces Direction we just need to
05:11 - scale it according to its magnitude
05:13 - what is its magnitude G times n1 times
05:16 - n2 divided by distance squared so a
05:18 - couple things here what is G G is the
05:20 - universal gravitational constant it's
05:22 - some number that I absolutely do not
05:24 - have memorized because I know I like
05:27 - program things in processing I don't
05:28 - actually like look at stuff in the real
05:30 - world and how it interacts so you know
05:32 - we don't need the real world number in
05:35 - our processing code we just real what we
05:37 - that is a constant what we can use that
05:39 - constant for is is the force strong is
05:42 - the force strong or is it weak how is
05:44 - that force so for right now we could say
05:47 - G is 1 or whatever it's some but
05:49 - constant but we could um and I'm gonna
05:52 - um I'd like to use it's going to be flat
05:56 - it's fine I'm gonna I gives me a little
05:59 - anxiety to make a variable that's a
06:00 - capital letter because you know that
06:03 - could be breaking some conventions but
06:04 - let's just do it for effect right here
06:05 - so I'm going to say G is 1 now mass of 1
06:09 - and mass of two those are going to be
06:11 - constants variables scalar quantities
06:13 - floats so we could assume that we have
06:16 - mass 1 and mass 2 and distance what is
06:19 - the distance between location 1 and
06:21 - location - well processing has a
06:23 - distance function that we could use
06:27 - processing also has a distance function
06:29 - to give us the distance between vectors
06:31 - but if you remember what did we do right
06:34 - here we said give me a vector that
06:36 - points all the way from object 1 to
06:38 - object to
06:38 - that we normalized it what we could do
06:40 - is say hey right before we normalize
06:42 - that vector what is its magnitude right
06:45 - the magnitude of the vector that points
06:46 - all the way from 1 to 2 the magnitude of
06:48 - that vector that's the distance between
06:50 - those two objects so right up here now
06:54 - this is where we really need to insert a
06:55 - line of code we could say float D equals
07:00 - dir dot magnitude and if I wanted to
07:04 - this is what I kind of fumbled in my
07:07 - last video but there is a method in
07:11 - processing called mag squared which will
07:13 - actually give you the 92 squared but
07:15 - maybe for right now for simplicity I
07:16 - won't use that but that that will
07:18 - optimize the code a little bit if we use
07:20 - that ok so now that we have that dir
07:25 - multiplied times G times you know the
07:29 - mass of object 1 times the mass of
07:32 - object 2 divided by D times D so right
07:35 - this is the magnitude as it maps to this
07:38 - formula and again we have something very
07:41 - special here it's very special and nice
07:43 - about this what we're doing remember I
07:46 - you know I'm not suggesting that
07:49 - gravitational attraction is like this
07:51 - force that's going to make all these
07:53 - magical beautiful wonderful projects
07:54 - what I am suggesting is that you coming
07:57 - up with a creative way of calculating a
07:59 - force might be able to create a behavior
08:02 - an effete emotional quality some form of
08:05 - interaction that's going to be
08:06 - successful in a project that you're
08:07 - making what's interesting about this
08:10 - force is divided by distance squared
08:13 - the further the objects are away the
08:16 - weaker the force the closer they are the
08:18 - stronger the force maybe you want to do
08:21 - something different maybe you want a
08:22 - force that's weak when they're close but
08:24 - strong when they're far maybe you're
08:26 - creating some type of like these circles
08:29 - on the screen that are in love and the
08:31 - further apart that way they more they
08:32 - must come back together but once they're
08:34 - together they can just kind of beat I
08:35 - don't know what the what I'm talking
08:37 - about here but you know we should all
08:39 - aspire to create love in our prosthetic
08:41 - sketches so okay but that the point of
08:43 - what I'm saying here is this is a really
08:45 - this divided by distance squared again
08:47 - we're seeing the properties of the
08:49 - system itself
08:50 - are informing the
08:52 - magnitude of that force and how you
08:53 - build that into things you make is very
08:55 - important I think so okay so now that we
08:58 - have this we could look at how do we
08:59 - apply this in code now here's the thing
09:02 - let's okay let's I'm gonna just
09:04 - unbelievable anxious about this because
09:06 - don't really know where this is going
09:07 - but let's let's I'm gonna tiptoe slowly
09:09 - over here and we do have a processing
09:12 - sketch that we can look at now it's
09:13 - actually not going to run because I
09:14 - deleted some code out of it and I'm
09:18 - going to just save I should have done
09:19 - this before but I'm just going to save
09:21 - it as I'm working with in in in the
09:25 - nature of code book this is example 2.6
09:28 - simple attraction so that's the example
09:30 - I'm working with here and if we run it
09:32 - we're going to see it can't find this
09:33 - method attract this is the method that I
09:35 - want us to add to this program together
09:37 - I guess it's really just me but let's
09:39 - feel like we're doing it together in
09:41 - this video so one thing I should point
09:43 - out about this is that we have both an
09:45 - attractor and a mover so we have two
09:47 - separate objects and in fact if I just
09:50 - briefly for a second comment out this
09:55 - part that we're eventually going to use
09:56 - and I run this we can see this is our
09:59 - sketch we have this attractor in the
10:00 - center and we have this mover up top and
10:03 - we want the mover to experience a force
10:05 - that where the up we're to track to the
10:09 - object and I shouldn't have commented I
10:10 - just notice I shouldn't have commented
10:12 - MDOT update what's really happening here
10:14 - is that mover is moving to the right so
10:16 - instead of just moving at a constant
10:17 - velocity to the right we want it to be
10:19 - attracted pulled into that object okay
10:22 - so how do we do that so this is what I'm
10:25 - talking about in terms of nice
10:27 - object-oriented programming syntax this
10:29 - is only one way of doing it there are
10:30 - countless ways you could organize your
10:32 - code but what we're doing is we're
10:33 - saying hey the attractor has a method
10:36 - that can receive a mover calculate a
10:38 - force and then we can store that force
10:40 - in a variable and apply it to the mover
10:42 - so we're having objects communicate by
10:44 - saying the mover a truck I'm sorry the
10:47 - attractor attracts the mover okay so how
10:50 - what this this tells us let's actually I
10:53 - don't know where we are in time this is
10:55 - nine minutes so far so I'm going to keep
10:57 - going to I'm going to belabor this point
10:58 - for a second so if I come back over here
11:03 - you know if you if you're really
11:06 - familiar with object-oriented
11:07 - programming you might want to just kind
11:09 - of skip ahead a couple minutes but I'm
11:11 - going to I'm going to just cover this I
11:12 - think is it's kind of important we wrote
11:14 - code that says a dot attract M and the
11:18 - result of that gets stored in a vector
11:23 - so this this is I think a nice strategy
11:25 - a is an attractor object M is a mover
11:27 - object and this kind of reads nicely it
11:30 - says attractor attract the mover return
11:32 - that force and then we can say mover dot
11:35 - apply force F that force can then get
11:39 - sent back into the mover now okay so
11:42 - well what's what's going on here we
11:45 - wrote this code but we haven't written
11:47 - the attract function it doesn't just
11:48 - magically exist right there's no attract
11:50 - function just magically in an attractor
11:52 - class but we wrote it this way it's kind
11:54 - of a an indicator to us that what is the
11:56 - function we need to define the function
11:58 - we need to define is called attract it
12:02 - receives a move or object which I'm
12:04 - going to call other and it returns a P
12:08 - vector so this here is that method
12:12 - signature it's a function called attract
12:14 - that's going to go in the attractor
12:15 - class it's going to receive a mover
12:17 - object and it's going to return a P
12:19 - vector so I just wanted to go over this
12:21 - kind of a this is important this is kind
12:22 - of how we have a nice way we can have
12:24 - objects communicate with each other by
12:25 - having one object receive the other one
12:27 - is an argument to the function and then
12:29 - they can you know do stuff in that
12:32 - function together ok let's go back and
12:35 - let's put this into our code now okay so
12:38 - if we go into the attractor class we now
12:43 - need to write a function called attract
12:45 - which receives a mover as its argument I
12:49 - got it these things are going to fall
12:51 - off this little podium okay so we're
12:53 - going to write a function called attract
12:54 - the mover is its argument it's going to
12:56 - return a P vector so what's the first
12:58 - thing we need to do we need to know the
13:00 - direction of that force so I'm actually
13:02 - going to miss make a variable called
13:03 - force which equals we're going to
13:06 - subtract the movers look on the location
13:11 - of the of the attractor minus the movers
13:15 - location now notice here
13:17 - in the attractor object so since we're
13:19 - in the attractor object its location is
13:21 - just location the movers location is the
13:24 - argument the mover is the argument so we
13:26 - need to refer to that mover ends
13:27 - location so the attractive location -
13:30 - the movers location then we're going to
13:33 - normalize that and then this is the so
13:37 - we have the direction this is us
13:39 - direction of the force that's the
13:42 - direction now once we have the direction
13:44 - we need the magnitude magnitude of the
13:47 - force so what is the magnitude it is
13:51 - I'll call it strength equals G times the
13:56 - attractors mass which is just mass times
14:00 - the movers mass which is MDOT at mass
14:03 - divided by and just be safe here let's
14:06 - put some parentheses around here divided
14:08 - by distance squared now notice if we run
14:12 - this it's going to say it can't find
14:15 - anything named D so D is the thing that
14:17 - we haven't actually calculated yet but
14:19 - remember distance we have a vector
14:20 - pointing from the at one locations
14:22 - object to the other look up one
14:24 - locations object put hot chicks location
14:27 - to the other objects location we've got
14:29 - a vector pointing between those two the
14:31 - length of that vector is the distance
14:32 - between the two so right before we
14:34 - normalized force we could say hey what
14:37 - is your magnitude so this is us saying
14:39 - hey we're getting that vector we want to
14:41 - normalize it but before we normalize it
14:43 - just wait a second we please have your
14:45 - length because that's the distance once
14:46 - we have that this will work all we need
14:49 - to do is then put magnitude and
14:51 - Direction together by multiplying by
14:54 - that strength and I think I spelled it
14:55 - wrong so this is putting magnitude nough
15:02 - tude and direction together and now we
15:08 - have force multiplied by strength so
15:09 - this is the direction this is the
15:11 - magnitude this is them together let's
15:13 - say return force and we do we have
15:17 - everything on we have all that commented
15:19 - back in we're getting the force we're
15:20 - applying it we're updating it let's run
15:22 - this it's going to be very dramatic and
15:23 - exciting and good ok so what happened
15:26 - here it didn't seem to work
15:29 - so let's go back in
15:31 - look at this code again why might this
15:33 - not have worked it's really tragic
15:35 - because we really very careful to put
15:37 - everything in here here's the thing I
15:39 - have something to mention this is not
15:42 - the real world right that's a little
15:44 - gray pixel circle on the screen this is
15:47 - some made-up code we're kind of correct
15:48 - this is where we have to say you know
15:50 - what the real world has this formula but
15:53 - we want to make the appearance of
15:54 - something we've got a kind of adjust and
15:56 - tweak here and what's the problem the
15:58 - problem is that distance times distance
16:00 - in pixels can be really large and as
16:04 - soon as these objects get like 150 200
16:06 - 250 pixels away that force is so weak
16:09 - that it's it's just floating off in the
16:11 - distance at the same time when the
16:13 - object gets so close that force could
16:15 - suddenly become so large that some
16:17 - really strange behavior could create
16:18 - could happen so this is a nice moment
16:22 - where we could use the constrain
16:23 - function we can kind of constrain our
16:25 - world in an unrealistic way but in a way
16:27 - that's going to just make us feel
16:29 - happier in our lives so let's do that
16:33 - we're going to say I know this is the
16:35 - actual distance but what I want to do is
16:37 - constrain that I'm going to say between
16:39 - 5 and 25 so even if you're more than 25
16:43 - pixels away just consider yourself as 25
16:45 - pixels away note I'm not actually
16:46 - constraining its location it can be
16:49 - anywhere what wants to be I'm
16:50 - constraining the result of that distance
16:52 - calculation so now if we run this again
16:55 - you can see we get this kind of
16:57 - attraction behavior so you could see
16:58 - it's like this almost orbiting around of
17:01 - the attractor in the center so this is
17:05 - really it in terms of getting that
17:07 - gravitational force to work but I want
17:11 - to just we can see here we have the
17:13 - attractor which is fixed and actually if
17:15 - you go and look at this example one
17:17 - thing you'll see is this attractor can
17:18 - actually be moved which i think is kind
17:20 - of a useful thing to look at but you can
17:23 - look at the code for how that's done but
17:25 - what I want to look at though however is
17:28 - one thing that this example isn't doing
17:30 - so this example is saying hey have an
17:34 - attractor attract a mover and if we
17:36 - wanted to we could expand that very
17:39 - quickly by
17:43 - I must change the size of the sketch we
17:46 - could expand that very quickly by having
17:47 - a lot of objects be attracted to that
17:50 - singular attractor so here we can see
17:52 - like oh we could do that in a loop we
17:54 - could say hey all of the movers every
17:56 - mover I be attracted to the attractor so
17:58 - that's a sort of instant change we have
18:00 - a single attractor we have an array of
18:02 - attractors but what's a little bit more
18:04 - difficult is and you can kind of
18:06 - consider this as an exercise for
18:07 - yourself I guess is how do you have
18:09 - mutual attraction every object is
18:11 - attracted to every other object a hint
18:14 - of that is you need a nested loop for
18:16 - every mover be attracted to every other
18:20 - mover so for every mover for every mover
18:23 - again and then of course you want to
18:24 - make sure that one mover is not a try
18:26 - any mover is not attracted to itself we
18:28 - need to build in something for that and
18:30 - if you're looking for the answer to that
18:31 - it is example in 2.8 so if you're
18:35 - falling on the book example 2.8 will
18:37 - show you that mutual attraction and one
18:39 - thing you might think about to go beyond
18:41 - that is a how could you do that in 3d
18:44 - and B I'm looking at these how could you
18:47 - change that force from an attraction
18:48 - force to a repulsion force and could you
18:51 - have objects attracted to something in
18:53 - the center but repelled from each other
18:55 - how could you mix this up to create a
18:57 - dynamic system with multiple different
18:59 - behaviors happening at the same time
19:00 - just while we're here I also thought
19:03 - that I would just kind of quickly bring
19:05 - up this kind of a classic project of use
19:07 - of attractors this is called Metro pop
19:09 - denim I actually forgot the year but
19:11 - this is clayton cubit and tom carden's
19:12 - for many many years ago I think this was
19:14 - done with like the alpha version of
19:16 - processing that's before you know before
19:18 - this 2.0 beta before 1.0 etc before 1.0
19:22 - beta so but you can see that this this
19:24 - there is a if you were to trace the
19:27 - pathways of particles being attracted to
19:29 - may be invisible attractors you can
19:30 - create these kind of patterns and these
19:32 - patterns were combined with fashion
19:34 - photography to create these spreads for
19:36 - a magazine and really I don't know if
19:39 - they did this with the project but you
19:40 - can imagine positioning the attractors
19:41 - according to some properties of the
19:44 - photographic imagery in such a way so
19:46 - there's lots of possibilities that you
19:47 - can use this for and so I don't know
19:51 - have a good time
19:52 - drawing the stuff out and leave some
19:53 - comments or ask some questions or
19:56 - I don't know something this is the end
19:57 - of chapter 2 in the next set of videos
19:59 - which will all be numbered three points
20:01 - something we'll be looking at
20:02 - oscillating motion and reviewing
20:04 - trigonometry Seacrest out is that
20:08 - something I could say I'm not Brian
20:09 - Seacrest so that make any sense okay
20:10 - goodbye