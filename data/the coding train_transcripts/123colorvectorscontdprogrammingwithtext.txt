00:00 - (bell dings)
00:01 - - Hello, and welcome to
word2vec tutorial number three.
00:04 - I am not yet actually to the
part where I'm going to use
00:07 - the word2vec algorithm model itself.
00:11 - I'm still just in a place
where I'm looking at,
00:13 - okay, well I have words,
00:14 - and I have numbers.
00:15 - What does that mean, what kind
of things can I do with that?
00:17 - And the scenario that I'm using,
00:19 - which is from Allison Parrish's excellent
00:21 - understanding word vectors tutorial,
00:24 - available under the Creative
Commons 4.0 License,
00:26 - please if you're basing
stuff off what I'm doing,
00:29 - also attribute this.
00:32 - The scenario we're looking at is colors.
00:37 - You can find that down here.
00:40 - So what I have, is I have a p5 sketch,
00:43 - which is loading this
color database of the 954
00:49 - most common RGB monitor
colors from an XKCD survey,
00:55 - The previous tutorial.
00:56 - So here's my idea, this is what
I'm going to do in this video.
00:59 - I am going to take some text from
01:01 - the rainbow Wikipedia page,
01:03 - And I'm going to say, let's
sprinkle some red on it,
01:06 - or sprinkle some blue, or
sprinkle some of this color.
01:09 - What does it mean to add some color to it,
01:11 - and how does the text change?
01:12 - So, I've written a tiny bit of code here,
01:16 - basically nothing, I introduced
from the previous video,
01:18 - I introduced a variable called lines.
01:20 - I'm loading this text file,
01:22 - where I just copy, paste
the Wikipedia content into.
01:25 - You can think of a
different way of doing this.
01:27 - and then, now what I'm
going to do in setup is,
01:30 - I have a global variable called rainbow.
01:32 - I'm going to say rainbow equals join.
01:35 - When you load a text file
in p5 with loadStrings,
01:38 - it gives you an array, where every line
01:39 - is in a different element of the array,
01:43 - so I'm going to say join lines,
01:46 - and I'm going to give it a
delimiter, like the br tag,
01:49 - and then I'm just going to now add setup,
01:52 - I'm going to say createP(rainbow).
01:56 - So right now we should have, if I go here,
02:00 - is we should see, and I'm
going to say no canvas,
02:03 - although I might want
actually use the canvas
02:05 - a little later,
02:06 - we can see here I have all that text.
02:09 - Now, what I want to do actually is,
02:11 - I want to highlight and
color anything in the text
02:15 - that appears in the X,
in the color database.
02:18 - So I think actually, what I want to do is
02:19 - first split this up into words,
02:22 - so I'm going to use rainbow.split,
02:27 - and you could check out my tutorials about
02:28 - regular expressions and word counting
02:30 - and all that stuff where I do this a lot.
02:31 - I could definitely come up with
a better regular expression,
02:34 - but I'm just going to split by anything
02:36 - that's not a character that's A through Z,
02:39 - or zero through nine.
02:42 - So I'm going to do this,
02:43 - then I'm going to say i equals zero,
02:45 - i is less than words.length, I++,
02:48 - and I'm going to say createSpan(words[i]).
02:53 - The br stuff is going to mess up.
02:56 - I'm going to say this,
02:59 - or the br.
03:03 - Will this work?
03:05 - Oh boy, didn't like that, did it?
03:07 - The br stuff is going to mess that up,
03:09 - so I'm just going to make
that a space instead,
03:12 - and now if I refresh this page,
03:13 - there, we can see all the words.
03:15 - Whoo!
03:17 - Oh, woops.
03:19 - All the words are together in one line,
03:21 - I need to put spaces between them.
03:23 - This is kind of a terrible
idea, but I'll just do this,
03:27 - and now, okay, so here's the thing.
03:28 - So now, here's the text.
03:30 - What if one of those words
appears in the color database?
03:35 - So let's look.
03:37 - Let me just say,
03:38 - and actually another way
that I could do this,
03:40 - like use a for of loop,
03:41 - let word of words,
03:44 - and then,
03:47 - it's just a little bit
nicer to do it this way,
03:49 - If (vectors[word]),
03:52 - if it exists, then what do I want to do?
03:55 - I want to get the color.
04:04 - I want to say, let color
equals that (vectors[word]).
04:09 - And then I want to say, I'm going to say
04:12 - let span equals create span.
04:15 - And I going to say span.style I'm using.
04:20 - Once again, the p5 dom
library background color.
04:25 - Wish I'd save my code
from the previous video,
04:27 - going to write exactly
the same thing, r,g,b
04:32 - and then I'm going to take
04:35 - sorry,
04:37 - c.x,
04:41 - c.y,
04:43 - and c.z,
04:45 - c.y and c.z.
04:48 - So let's see if now,
04:50 - we can see some of those
highlighted, there, great.
04:53 - So anything that was in that database,
04:55 - I am now highlighting sky,
sky, red, violet right.
04:58 - Now the other thing I
might as well do that
05:00 - is I might as well store those things.
05:02 - So let me keep track of
color spans as an array.
05:10 - And I'm going to add span into this array.
05:16 - And now I can start doing stuff.
05:18 - So what might I want to do?
05:20 - First of all, one thing I could do,
05:21 - which is kind of interesting is,
05:22 - let me just get the average
color of all those things.
05:25 - So what if I say, I guess I'll say,
05:31 - let keys equal keys.
05:41 - I'm also going to save all of those.
05:44 - The word.
05:46 - So let's just take a look.
05:47 - I'm just curious here, console.log keys.
05:54 - So we can see these are the
only things in this text
05:57 - that matched and again
I should have checked
06:00 - for two pairs of words and things.
06:02 - I'm missing a lot of steps here.
06:04 - But you can improve my code.
06:05 - That would be wonderful.
06:06 - Make your own version of this.
06:08 - But let's at least get
the average color here.
06:10 - So let's see what the average color is.
06:12 - So now I can say average
equals create vector 000.
06:19 - So any math that you can do with numbers,
06:23 - you can now do with those
words, because now I can say,
06:26 - let key of keys and I
can say V is vectors,
06:32 - that's associated with that key,
06:34 - average.add and then at the end,
06:37 - I can say average.divide the
length of all those keys.
06:43 - Then all I need to do is,
06:47 - find nearest that particular vector,
06:53 - and then console log nearest purplish.
07:01 - So the average color of this text
07:03 - and this is directly again
from Allison's tutorial,
07:05 - she has something very
similar in it is purplish
07:08 - and if I wanted to now
I could create a canvas.
07:13 - You know very small one.
07:16 - 50 comma 50,
07:17 - and then I could say,
07:19 - background avg.x avg.y avg.z
07:28 - and we would see there it is.
07:30 - So that's the average color
and it's label is purplish.
07:35 - Now what if what I
wanted to do was actually
07:39 - add some color or subtract
some color and change the text.
07:44 - So let's try to do this dynamically,
07:47 - this is going to be hard but
this will be extra fun. (laughs)
07:51 - So I'm going to create three sliders.
07:57 - R equals r slider.
08:00 - R slider, g slider, b slider
08:02 - and I'm going to hope that
one of you watching this video
08:05 - and gets inspired to make
08:06 - a really interesting wonderful interface.
08:08 - I'm going to completely
ignore anything about
08:11 - interface design here and
just kind of do this raw.
08:14 - r slider equals create
slider between zero and 255.
08:21 - And starting with zero and
I'ma do the same thing.
08:23 - And again these are p5 functions
08:26 - and I could obviously
just write these down
08:29 - into the HTML directly.
08:30 - But now I have three sliders.
08:33 - And what I want to do is,
08:34 - anytime I change any of these sliders,
08:37 - so I'm going to say r
slider input slider changed.
08:42 - I'm going to call the same function
08:45 - if any of the sliders are changed.
08:47 - So I'm going to sign this slider
changed event to all of these.
08:52 - And then,
08:54 - I'm going to write this
function slider changed
08:57 - and now I need to get the values.
08:59 - r equals rSlider.value,
09:02 - g equals gSlider.value,
09:07 - and b equals bSlider.value.
09:11 - Now, let me just make
sure this is working,
09:13 - console dot log r,g,b.
09:15 - Okay, so let me run this.
09:17 - And now as I move these sliders,
09:18 - you can see anytime I move the
slider, I need these sliders.
09:21 - I'm getting this color value.
09:23 - Now I'm going to take that color value
09:25 - and add it to these colors
09:26 - and then have the words change
with the new color matting.
09:29 - I probably should make it so
I could subtract color too.
09:32 - So let's actually make
it let's just make it,
09:35 - so I can add or subtract some amount
09:38 - between negative 100 and 100.
09:41 - Negative 100 and 100,
09:43 - and negative 100 and 100.
09:46 - OK, so now in this slider change
09:48 - what I'm going to do is
I'm going to go through
09:52 - all of the spans and keys I guess.
09:58 - I need to, I could probably
be more thoughtful.
10:01 - We'll refactor this later.
10:02 - (bell ringing)
10:03 - But then make these global variables
10:06 - and I'm going to go
through all of the spans,
10:09 - let span of colorSpans,
10:13 - and I'm going to get the key.
10:18 - The word is the HTML of that span
10:21 - actually you don't have to look it up.
10:23 - Otherwise, then the vector
10:25 - is the vector associated with that word.
10:30 - Then I'm going to say, vector add r,g,b.
10:35 - I think this will work, right?
10:36 - This, this takes that vector
and adds these amounts to it.
10:40 - Then I need to say nearest
equals find nearest.
10:46 - Oh, I need to make a copy of it.
10:51 - So I don't actually want
to change that vector.
10:55 - I need to make a copy of it.
10:57 - So I'm going to say
copy because I'm pulling
11:00 - just a reference to the
vector that's in that object,
11:03 - and you don't want to adjust it.
11:04 - That's the actual vector associated word.
11:05 - I want a copy of it that
I'm going to mess with.
11:08 - And then I want to find nearest to that.
11:10 - And then I'm going to
say span html that word.
11:14 - So look at this.
11:17 - These are, let's take a look at these.
11:19 - These are all the color words.
11:20 - Let me add some more red to them.
11:24 - This doesn't seem to be working.
11:28 - I was so excited to see this work.
11:33 - What did I do wrong?
11:34 - Find V span h2 oh,
nearest, nearest, nearest.
11:38 - Right, word is the original word.
11:40 - Nearest is the new one.
11:41 - After I added that color.
11:44 - I think this is going to work.
11:46 - It's very exciting.
11:48 - So I need more space.
11:51 - Okay, ready?
11:51 - Here we go.
11:53 - I add a lot of red and I got
bright red and bright magenta.
11:56 - Let's add a lot of green
I got white already.
11:58 - And a lot of off white white right.
11:59 - If I add, take away, let's subtract color.
12:03 - I subtract color, now I've got
black, everything is black.
12:07 - So look at this, you could take,
12:10 - you could take a whole
text any novel you like,
12:13 - you could say,
12:14 - let's just re-write it
with a little bit more red
12:16 - and find any instance of
anytime a color is referenced.
12:19 - And guess what,
12:20 - when we do this with a more
generalized word effects system,
12:25 - we could actually add, start to add
12:26 - this idea of add red to words
that aren't actually colors.
12:30 - We might have a corpus
that includes way more
12:33 - than just these, you know,
12:34 - 496 or whatever that
number is color values.
12:37 - So hopefully you're starting to see.
12:38 - The idea here is that with
the idea of word embedding,
12:42 - with words associate with vectors
12:43 - with text associated with numbers
12:45 - that if I can do math to the numbers,
12:48 - I can go translate back into words,
12:50 - I can always translate
those words as numbers,
12:52 - do more math and translate back
12:53 - and do all sorts of strange
transformations like this.
12:56 - So make a better version of this.
12:57 - Think about what texture you're using,
12:59 - fix that problem for me.
13:00 - Where I look also for like
pairs of words that match.
13:03 - Make a nice interface.
13:04 - I don't know, think about
the way you design this.
13:06 - There's so many possibilities.
13:07 - I look forward to seeing
what you make with this
13:09 - and see you in the next video
13:10 - where I actually now go
to look at the ml5 library
13:14 - which has a built in class.
13:17 - Built in basically feature that allows
13:19 - you to work with word2vec without
13:21 - having to write all the math yourself
13:22 - which is what I'm mostly doing
in this particular video.
13:25 - Okay, goodbye.
13:27 - Oh, change the background as well.
13:29 - Stop, hold the presses.
13:33 - I totally forgot that I must also change,
13:43 - change this as well.
13:47 - V.x, v.y, v.z.
13:54 - Here comes.
13:55 - Now as I'm adding the colors
13:57 - it's also changing what's actually
14:02 - the background color as well.
14:04 - We can see that that's
actually changing as well.
14:08 - Which is a nicer way of looking at it.
14:09 - Okay now I'm really going, goodbye.
14:10 - (lips smacking)
14:11 - (bell ringing)
14:12 - (upbeat music)