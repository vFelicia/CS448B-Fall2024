00:00 - hello welcome in this video I'm going to
00:04 - demonstrate how to take let me run this
00:05 - again how to have an object on the
00:08 - screen store a history of its path now
00:12 - this object just happens to be a
00:14 - bouncing ball it's bouncing up and down
00:16 - but you could maybe have something move
00:18 - and spiral pattern or something move
00:20 - along a sine wave or use something
00:21 - called Perlin noise or move randomly or
00:23 - maybe you've watched them on my other
00:24 - videos where I show how to have things
00:25 - respond to forces the point is you have
00:27 - something that you've already programmed
00:29 - to move around the screen what if you
00:31 - want to draw a trail or to have that
00:34 - history of its path for some other
00:36 - purpose I feel like this comes up a lot
00:38 - so on the one hand you might already say
00:40 - oh I know how to do this right because
00:42 - in the basics of using an environment
00:44 - like processing or p5.js there's this
00:46 - background function and the background
00:48 - function erases the background so if you
00:51 - were to take the background function
00:52 - from draw which is continuously erasing
00:54 - the background and move it in to set up
00:57 - now we can see this object is drawing a
01:01 - trail and you can barely see it moving
01:02 - anymore which is something that I should
01:04 - have considered probably but you can see
01:06 - that it's drawing a trail but it's kind
01:08 - of this is not really a good solution
01:12 - because a it's just continuously drawing
01:14 - its trail forever I can't have some
01:16 - things draw one trail something's not
01:17 - draw a trail something's draw a long
01:19 - trail something's wrong short trail I
01:20 - can't have the things in the trail
01:22 - changing color or moving according to
01:24 - their own set of principles so in order
01:26 - to do something anything any idea that
01:28 - you have that's a bit more sophisticated
01:30 - beyond just see the things sort of like
01:32 - smearing a trail of its path along the
01:34 - screen you're going to need to keep that
01:36 - background in draw and figure out a way
01:38 - for the object itself to store a history
01:41 - of its own path so let's think about how
01:44 - we might do that I feel obligated to use
01:46 - the whiteboard for a second even though
01:47 - I don't know that it's necessary so
01:49 - let's kind of unpack this a little bit
01:51 - we have on the screen we have a circle
01:54 - maybe it's moving maybe it's your
01:57 - program it's some sort of like ant like
01:59 - insect like creature and it's moving
02:00 - around and what you want is for it to
02:03 - have almost like this like body that it
02:07 - pulls along along its path in some type
02:10 - of
02:11 - well this would be a good topic for a
02:13 - video looking at inverse kinematics all
02:15 - that stuff to create like a skeleton
02:16 - oh that's going to be good but we'll do
02:17 - that in another video here we just want
02:19 - the trail so the object if we think of
02:23 - this object as called
02:24 - a particle as a very generic term for a
02:27 - thing moving around the screen this
02:29 - particle has an X this particle has a Y
02:32 - and now what is this particle deed in
02:37 - addition to the X and the y it needs to
02:40 - have something that I'll call a history
02:42 - and that history can be an array because
02:47 - what this particle will do is it stores
02:49 - its X Y as its current location but
02:52 - another property of it is actually an
02:54 - array where it can keep track of older x
02:57 - and y's and older x and y's and older x
02:59 - and y's so let's look at how that might
03:01 - be done so if I come back over here to
03:05 - this particular example you can see the
03:09 - basics of the code right there's a
03:10 - particle object it makes a new particle
03:12 - object in setup and then that particle
03:15 - object update and show where all of the
03:17 - code world the stuff for that particle
03:18 - object is is over here in this
03:20 - constructor function and you can see
03:22 - it's just got some basic stuff it has an
03:25 - X and a y variable it has a Y speed
03:28 - variable because all this thing is doing
03:29 - is moving up and down it changes Y by Y
03:33 - speed it changes Y speed by gravity it
03:35 - checks if it gets the bottom then if it
03:37 - gets the bottom it reverses its
03:38 - direction and then it also has a
03:40 - function to display itself so what I'm
03:42 - suggesting to you here is the first
03:43 - thing that we need to do is add another
03:46 - property to this object the way that we
03:48 - add a property this object is by saying
03:51 - this object this thing this particle
03:52 - thing that's going to be made through
03:54 - this constructor function this dot the
03:56 - name of that property and I'm going to
03:57 - call it a history and I'm going to make
04:00 - it an array so this is a wonderful thing
04:02 - about working in JavaScript I'm after I
04:05 - do this video I'll make a version of
04:06 - this code in processing and I'll upload
04:09 - both examples so you have the p5 and the
04:11 - processing version but the JavaScript
04:13 - version will be a little bit simpler
04:15 - because an array in JavaScript natively
04:17 - is a thing that you can just start as an
04:19 - empty thing and start filling it with
04:20 - stuff whereas in processing in Java
04:23 - I'll have to build the example with
04:25 - something called an ArrayList and I will
04:27 - link to other videos about how ArrayList
04:29 - worked at some point there so okay so
04:31 - this is our first start here we make
04:33 - this history variable so what do we do
04:36 - with that history variable every time
04:38 - the object updates its location every
04:42 - time it moves I want to store where it
04:44 - previously was how do I do that
04:46 - so how do I add something to an array so
04:48 - this is the update function right here
04:50 - right this is where the wat its X&Y
04:54 - location might change it's moving around
04:55 - the screen so what I want to do is add
04:57 - something here where I say this dot
04:59 - history and I want to somehow I want to
05:02 - like add something into this history so
05:04 - the way that you add something to an
05:06 - array in JavaScript a way that one
05:09 - there's many ways you can do it but one
05:10 - way you can sum to add something to the
05:12 - end of that array is with a function
05:14 - called push so if I were to say push dot
05:17 - X what I'm doing is I'm saying take this
05:19 - object's current X location and by the
05:21 - way I can't say X I have to say what
05:25 - JavaScript this dot X I have to take
05:28 - this object's current X and put it into
05:31 - the array so if I did this and ran this
05:33 - program every time an update it would
05:34 - say save it's X in the array save it's X
05:37 - in the array and that array would just
05:38 - become full of its X locations and we
05:41 - could do something amusing I don't know
05:44 - how amusing this would be I'm going to
05:46 - say print its history out and you can
05:48 - see here right I'm getting I'm printing
05:52 - out these arrays and there's just tons
05:54 - of values of 100 because it's X is never
05:56 - changing so why don't I put its Y in
05:58 - there and you can see I look the Y
06:01 - values are just being stored the history
06:03 - of its Y values are being stored in that
06:05 - array oh maybe I should put both the X
06:07 - and the y and you can sort of see now
06:11 - that array has XY XY XY XY XY so
06:14 - interesting the push function you can
06:15 - just push a bunch of things in the array
06:17 - by separating them but this is this
06:20 - while this is fine it's worth noting
06:23 - that's something that's going to make
06:24 - our life much easier to do this
06:27 - particular example is using something
06:29 - called a vector so let me come back over
06:33 - here for a second and talk briefly about
06:36 - what a vector
06:37 - is if you haven't encountered it before
06:39 - and I'm probably going to do some other
06:40 - videos that go through this stuff in
06:42 - more detail but let's say I have an
06:46 - object oh this pen is terrible let's say
06:50 - I have an object whose location is at an
06:55 - x and a y I could have separate x and y
07:00 - variables or I could have a variable
07:04 - that I'll call a vector and what I could
07:08 - do in p5 is I can call a function called
07:11 - create vector and give it two values can
07:15 - you see that you can I've gone off the
07:17 - here look live fixing live editing this
07:21 - is what I do a live editing just going
07:22 - to move the camera a little bit so you
07:24 - can see that so instead of having a
07:27 - separate x and y variable I can have a
07:29 - single variable using the create vector
07:31 - function to put an x and y in why does
07:35 - that work why is that relevant well a
07:36 - vector is essentially one way of to give
07:39 - a vector is as an arrow or directions
07:41 - for how to get from one place to another
07:43 - and here in this case an object's
07:45 - location is a vector for how to get from
07:47 - the origin to where it's actually being
07:50 - displayed and the you could think of
07:53 - this as a triangle with a Y component
07:55 - and an X component so this arrow is a
07:57 - vector so instead of that big array that
08:01 - I want to fill instead of trying to put
08:03 - an X then Y then an X then Y then an X
08:06 - than a y it'll be much simpler if I say
08:09 - let's put a vector an XY and then put
08:12 - another vector
08:12 - another XY so I can kind of group the
08:15 - history as its position is this X Y then
08:18 - its position was this X Y that history
08:20 - is a whole bunch of vectors so over here
08:23 - now if I come back to the code what I
08:25 - want to do is I'm going to say VAR v r v
08:32 - equals create vector this dot X this dot
08:36 - Y and I'm now going to push that vector
08:41 - into the array and run this again and so
08:45 - now as this program is running as this
08:48 - is running over and over again
08:51 - this history array is getting like
08:52 - bigger and bigger and bigger let's take
08:53 - a look at that let's let's look in the
08:56 - console at this history dot length so
09:00 - you can see as the program is running
09:02 - I'm just storing over and over again a
09:04 - vector for every single point that this
09:06 - object has ever been so right if I
09:09 - wanted to draw a trail of everywhere
09:12 - it's ever been
09:13 - then I can simply do that pretty easily
09:17 - because I have all those points in an
09:19 - array I feel like I pause fast questions
09:21 - but I can't pause because I'm just
09:22 - making this as a video okay so we've now
09:24 - we've got the core mechanic here now
09:26 - which is just this which is just like
09:28 - every time as the object gets updated
09:30 - take its current location save a copy of
09:33 - it stored in the array so let's do
09:35 - something with that now let's in the
09:37 - display function I could always now say
09:41 - I could have a loop to go through that
09:45 - entire array and I could draw and of
09:51 - course I'm forgetting to save this this
09:54 - and now this is a little bit what I
09:56 - think might be worth doing here's make a
10:00 - variable called position which is this
10:02 - dot history index I so here what I'm
10:07 - doing is right here this is an important
10:09 - little thing to look at for a second is
10:10 - I want when I'm going to draw this
10:12 - object in addition to drawing its
10:14 - current X Y I'm going to go through loop
10:16 - through the entire history and pull out
10:19 - each and every spot in history index 0
10:21 - index 1 index 2 and those things are
10:24 - vectors and I'm going to store them in a
10:26 - variable called pause for a position and
10:28 - now if I want to draw another circle
10:31 - there I can just say paused at X pause Y
10:34 - and I'll make this a smaller circle and
10:38 - we can see now if I run this program you
10:41 - can see it is drawing a circle at every
10:46 - spot in its history and now you know
10:47 - what I had this idea where like all a
10:49 - bouncing ball is going to make sense and
10:51 - I just I just don't like it anymore
10:52 - let's let's get rid of this idea of Y
10:56 - speed and grab let's just be much
10:59 - simpler about this and
11:02 - let's just chain and let's get rid of
11:04 - this bouncing thing let's just do what I
11:06 - originally set out to do which I think
11:08 - will demonstrate this idea much better
11:10 - which is just to have it move randomly
11:14 - so I'm just changing this particle to
11:16 - instead of bouncing up and down to have
11:19 - it move randomly so you can see now as
11:20 - it's moving randomly it's leaving a
11:23 - circle everywhere it's ever been in its
11:26 - path and I do I am erasing I am erasing
11:31 - the background each time so this allows
11:33 - me to do lots of different things for
11:35 - example you know each one of those
11:38 - circles could be drawn randomly there
11:41 - their size could be random you know just
11:44 - so you can see here I don't I don't know
11:45 - what the value of this is but you can
11:47 - see that those things can be animated in
11:50 - their own way I don't particularly like
11:52 - what I've done with randomness but
11:54 - there's a lot of possibilities there so
11:56 - this is the simple idea right that
11:59 - instead of just drawing a circle at its
12:01 - location also store a and also keep
12:04 - track of an array that stores a copy of
12:06 - its location over time and draw
12:08 - something there so I want to add a few
12:10 - things to this number one is I think it
12:14 - might make sense to limit that history
12:15 - right so one thing we could say is if
12:18 - this dot history dot length is greater
12:20 - than 25 then this dot history dot splice
12:29 - splice is a function that allows you to
12:31 - pull out things from the array and the
12:34 - oldest thing in the array is the first
12:36 - thing index number zero and I want to
12:38 - just take one thing out of the array so
12:40 - this place function takes two arguments
12:42 - the index where you want to delete
12:44 - something and how many things you want
12:46 - to delete which is just one so now if we
12:48 - run it you can see and let's have it
12:51 - move at larger steps so you can see here
12:57 - and goodbye
12:58 - it left the screen those are too large
13:01 - let me I came back that was nice of it
13:04 - and we could do something like have its
13:07 - size just bi so you can see that come
13:13 - back okay well let's do something else -
13:15 - okay
13:15 - so here's the amazing thing about doing
13:17 - this I only have one particle and this
13:20 - is like at first I have this like tiny
13:22 - window so just so we can see more stuff
13:24 - happening let's put that in the middle
13:27 - so uh what's
13:29 - oh and it's Oh ed etre you should have
13:31 - changed your size but you didn't so you
13:35 - can see that this gives you a lot more
13:37 - potential now in things that you can do
13:39 - in terms of having this thing store its
13:41 - own history I've like barely scratched
13:43 - the surface there's so many better ideas
13:44 - you probably have good ideas too but
13:46 - what I at least want to do is expand
13:48 - this now because the point of having
13:50 - done this and encapsulating this entire
13:52 - idea of the history inside of this
13:54 - object right the entire capturing the
13:57 - history inside of this object now what's
13:59 - possible is let me make this called
14:01 - particles let me not have any particles
14:05 - in setup and let me loop through I'm
14:07 - going to let me make an array of all the
14:10 - possible particles and let me say
14:13 - particles index i dot update particles
14:18 - index i show so now what I've done is
14:20 - I've changed the main program for having
14:23 - just this one single particle to
14:24 - starting with an empty array of
14:26 - particles and any of the particles that
14:27 - are there they all should update they
14:29 - all should show now of course there's
14:31 - none right now why because we haven't
14:33 - added any so now what's exciting about
14:35 - this is let's say anytime I click the
14:39 - mouse let's add write adding something
14:45 - to an array with the push function new
14:48 - particle and let's add it where the
14:52 - mouse is so now if I run this look at
14:55 - this I click there click there all of
14:57 - these objects are all storing their own
14:59 - history and I can just keep making many
15:02 - of them so this is pretty great because
15:07 - now you know and just to demonstrate
15:08 - that the background isn't 100% the
15:11 - background is not being erased I can
15:15 - have something else move I'm going to
15:19 - just move frame count modulus width I
15:21 - don't know if this is going to work but
15:23 - like a let me not do this I'm just going
15:25 - to say frame count zero frame count
15:28 - height
15:29 - just to see like there's something
15:31 - moving across the screen that is not
15:34 - drawing a trail so we can have some
15:36 - things draw a trail we can have a lot of
15:37 - control over that trail being that
15:39 - what's the size of that trail do the
15:42 - objects do they change color do they
15:45 - animate that sort of thing so let me
15:48 - like to addictiveness I'm like at 15
15:50 - minutes you can just stop this and do
15:52 - something else but I want to do a couple
15:53 - more things with this so you see this
15:55 - basic example one thing that I think
15:57 - would be useful to demonstrate is to see
16:00 - that a common thing that you'll want to
16:02 - do is actually draw the trail as I'm
16:07 - over here now so a common thing come on
16:09 - button a common thing that you might
16:11 - want to do is with this object draw the
16:14 - trail as a continuous set of lines like
16:19 - that and a way of doing that is with a
16:23 - begin shape and end shape so I'm going
16:26 - to comment out the ellipse and I can say
16:29 - begin shape at the beginning of the loop
16:32 - and end shape at the end of the loop and
16:34 - just say vertex
16:37 - pause dot X pause dot Y so what I'm
16:41 - actually doing here is making a new
16:42 - shape that's going to appear on the
16:44 - screen and all the vertices of that
16:46 - shape are going to be made up of the
16:48 - history of that object so if I run this
16:50 - and click you can see that shape now
16:53 - weirdly enough that shape is closed and
16:56 - it has a fill so a couple things I want
16:58 - to do is I want to say no fill the other
17:00 - thing I might want to do is I think I
17:01 - want to make this let this be a lot
17:03 - longer let this be 100 and we can run
17:07 - this and you can see now you can see
17:09 - that it's drawing this like squiggly
17:11 - line and again if you change this to
17:13 - have it move more smoothly or some other
17:15 - different algorithm you can imagine how
17:17 - useful this might be and again I can
17:19 - have all of them continue to do this now
17:22 - here's the other thing that's amazing
17:24 - about this not only do we have this
17:27 - history stored as data but because we
17:29 - have this history stored as data in an
17:31 - array those things can change so there's
17:34 - no reason why I couldn't say while the
17:36 - object is moving
17:37 - in its update function right its update
17:40 - function does what it changes the X&Y
17:42 - location then it stores a copy of that
17:45 - XII location in its history but there's
17:47 - no reason why while it's moving
17:49 - I couldn't also loop through the entire
17:54 - array and have history always forget to
18:00 - this this I could say this dot history
18:03 - index I dot X move randomly and index I
18:11 - dot y move randomly so what I've added
18:13 - here is I'm saying aha in addition to
18:15 - the object's location moving its history
18:19 - those points also move as well so now if
18:22 - I draw something you can see that its
18:24 - history is kind of like undulating as it
18:26 - moves as well all those vert vert X's
18:29 - vertices have their own kind of motion
18:31 - so again I don't really like necessarily
18:34 - my own visual result here because the
18:36 - only thing I'm using as the driving
18:38 - force behind the motion is randomness
18:40 - but you could imagine what sort of
18:42 - possibilities might there be there in
18:44 - terms of a creature design in terms of
18:47 - color in terms of smooth motion in terms
18:50 - of oscillating motion kept boy like
18:52 - having all of those points like sort of
18:54 - oscillating is this if it's like a
18:55 - waving fish or something or waving snake
18:57 - there's just so many possibilities so I
18:59 - hope that I'm gonna upload this code
19:01 - example complete this upload this video
19:03 - upload the code example make a p5
19:05 - version make a processing version if you
19:07 - make something built off of this example
19:09 - please share it with me in the comments
19:10 - I don't understand how this video became
19:12 - 20 minutes long but it did and I hope
19:14 - that you found it somewhat useful
19:16 - goodbye and see you in the next video
19:18 - someday