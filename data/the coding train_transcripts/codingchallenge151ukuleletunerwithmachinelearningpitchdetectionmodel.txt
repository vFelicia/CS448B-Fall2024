00:00 - Hello and welcome to
a coding challenge.
00:03 - Oh, my ukulele is
very out of tune.
00:06 - What luck this happens to
be the make a ukulele tuner
00:09 - coding challenge.
00:10 - What a coincidence.
00:12 - Well, I'm here in my
new studio located--
00:15 - it's not my studio,
but it is a studio.
00:17 - It's in Brooklyn at
New York University.
00:19 - And I'm doing my first
coding challenge from here.
00:22 - I don't really know
what makes sense.
00:24 - If this is a moment to do
some sort of particular coding
00:27 - challenge, I don't know.
00:28 - I'm just going to do
we're going to tune
00:30 - the ukulele because the tuner
I have, the battery is broken.
00:32 - My ears are not so good.
00:33 - So we'll see if this works.
00:35 - I'm going to use
the ml5.js library.
00:37 - This is a JavaScript library
that I'm lucky enough
00:40 - to participate in
its development
00:42 - and I try to make tutorials
with, so this works well.
00:45 - It has a pretrained model
for pitch detection, which
00:48 - I'll talk about in a moment.
00:50 - And then I'm also going
to use the p5 Web Editor.
00:53 - It'll be a little tricky to
do this in the p5 Web Editor
00:55 - because it's going
to involve having
00:57 - to upload a bunch of
stuff, but the good news
00:59 - is I already have the
ml5 library right here.
01:04 - All you need to do if
you're in the p5 Web
01:06 - Editor at editor.p5js.org,
if you go to the ml5 website
01:12 - under Getting Started, click
on this link, which will open
01:15 - a sketch in the p5 Web Editor
with the ml5 library already
01:19 - imported.
01:19 - OK, so we're there.
01:21 - I can make sure this is working
by saying something like,
01:25 - console.log ml5.version.
01:29 - I'm going to hit Run.
01:31 - And I see the version down
here, so I've got ml5 going.
01:34 - Now, what do I need to do next?
01:36 - So if I go to the ml5 website,
I'm going to Reference.
01:40 - And in Reference, I can see
that the various functionality
01:43 - of ml5 is divided into different
categories based on media.
01:46 - And what I definitely want
to do is look at sound
01:48 - here because I want
to find a sound model.
01:51 - And lo and behold, there is a
model called pitchDetection.
01:55 - Now, I should mention
that there are
01:57 - ways of analyzing a sound
for pitch that you don't
02:01 - need machine learning for.
02:03 - You could do FFT analysis and
look at the different various
02:07 - amplitude of different
frequencies and pick the one
02:09 - that's--
02:09 - there's a variety of ways.
02:10 - And people much smarter who
know much more about sound
02:13 - could tell you how to do that.
02:14 - And I'm sure you could find
other tutorials, but I'm here.
02:17 - I want to try to
use the ml5 library.
02:19 - But this really
begs the question,
02:20 - like, well, how is this working?
02:22 - You said something
about pretrained model.
02:24 - So ml5 comes with a certain
model known as CREPE.
02:29 - I don't know if that's
how you pronounce it.
02:31 - I like to say crepe, which is
a Convolutional Representation
02:35 - for Pitch Estimation or CREPE.
02:38 - I like fruit-- a little banana--
02:41 - and maybe a little
Nutella is kind of good.
02:43 - I don't know.
02:44 - It's too much for
me, the Nutella.
02:46 - This is about pitch
detection though.
02:47 - That's what this video is about.
02:49 - And so you can read a lot more
about this particular model
02:53 - and what data was used to
train it, which is always
02:55 - a question you should ask
when you're using someone's
02:57 - pretrained model because
there's a lot of things that
03:00 - can go wrong, or right, or
be problematic potentially
03:03 - about a model based on
the data it was trained.
03:05 - And this paper describes
that in more detail.
03:08 - You could click on this link
over here to see a demo of it
03:10 - in the browser, but we're
going to do this in ml5.
03:14 - And a big thank you
to Hannah Davis,
03:16 - who actually did the porting
of this model into ml5.
03:20 - And I'll include some
links to her work
03:21 - in this video's description.
03:23 - OK, so here I am on the
ml5 documentation page.
03:28 - And it looks a little bit
like, what's going on here?
03:30 - So I need to create
a pitch object.
03:33 - And there's some sort of,
like, string ./model/.
03:37 - What's that?
03:38 - First thing I want to tackle
here is what this ./model/ is.
03:41 - So a lot of times
when using ml5,
03:44 - it's going to load the
model files from a URL.
03:48 - And you might actually
put the URL into your code
03:51 - or ml5 might just know the
URL automatically-- it's
03:54 - saved on a Google server
or some other server,
03:57 - it's saved on GitHub
and pointed to by ml5.
04:00 - In this case, this is
a case where I actually
04:02 - need to have the model
files with my code.
04:05 - This was probably
going to change.
04:07 - Just by making this video,
I've realized we probably
04:08 - should host a version
of the CREPE model
04:11 - that you could access
through ml5 more easily.
04:14 - But luckily, if I go to the
ml5-data-and-models GitHub
04:20 - repo, where I am right
here-- github.com/ml5js.
04:24 - I can navigate to
models/pitch-detection/crepe.
04:27 - And these are all
the model files.
04:29 - So this is very typical
of any pre-trained machine
04:32 - learning model.
04:33 - There will be a JSON file.
04:35 - This is essentially a file
that describes the model.
04:39 - And then there's all
these other files,
04:41 - which are the actual
weights, the numbers,
04:43 - the secret sauce of the model
after it's been trained.
04:46 - All of those little parameters
of the neural network
04:48 - are all stored in
all of these files.
04:50 - Now, I've actually downloaded
all of these already.
04:53 - And you can see them.
04:54 - They're right here in a
folder on the desktop here.
04:57 - So what I want to do right
now is add all of them
04:59 - to the P5 web editor.
05:01 - Let's see how that goes.
05:02 - I've really only worked with
uploading little media files
05:05 - and sound files, but I
think this is going to work.
05:07 - So I'm going to go here.
05:08 - I'm going to create a new--
it's hard for you to see this,
05:10 - but I'm going to
create a new folder.
05:12 - And I'm going to
call this crepe.
05:17 - And then I'm going
to do Add File.
05:20 - And I'm hoping that I could
just select all of these
05:22 - and drag them here.
05:29 - So I forgot that the web
editor currently only supports
05:32 - certain file types, like
JSON, or CSV, or JPEG image
05:38 - files, sound files.
05:40 - So these model files that
include all the weights,
05:42 - they can't be uploaded
to the web editor.
05:44 - And that's something that
might change in the future.
05:46 - But luckily, I can actually
just point to the model files
05:52 - that are on GitHub itself.
05:54 - So this particular
URL right here
05:59 - where all these model
files are stored,
06:01 - there's actually a way
to turn any file that's
06:06 - sitting on GitHub
into a URL that you
06:08 - can load from a content
delivery network.
06:12 - And so a way of doing
that, this is a nice blog
06:15 - post that I found
on gomakethings.com
06:17 - that just shows this base URL.
06:20 - So I can always access
files through this URL,
06:24 - cdn.jsdelivr.net/gh for GitHub,
and then the path to the user
06:29 - name, the repo, and
the path of the files.
06:31 - So I actually have
done that right here.
06:34 - I'm going to hit Refresh.
06:35 - And you can see look,
this is that model.json.
06:39 - file.
06:40 - And now, I can
actually look and see,
06:41 - oh, it's all of the
configuration information
06:44 - about this particular model.
06:46 - And I can grab this, and I
can put this into my code.
06:50 - So let me close this.
06:51 - I'm going to go to the top.
06:52 - I'm going to say
const modelurl equals,
06:56 - and I'm going to
paste that in there.
06:58 - So now, I actually
want just the path,
07:01 - because I want the model
to load all the files.
07:03 - So I'm going to then
remove model.json.
07:06 - And this is the path
to the crepe model.
07:09 - And I can go ahead
and just delete this
07:11 - from here, this folder.
07:13 - It's gone.
07:14 - I guess I need to also delete
the files one at a time.
07:17 - Let me do that.
07:19 - And now, I am ready to
start putting in some code.
07:22 - So I'm going to make a
variable called pitch detector.
07:26 - Let's just call it pitch.
07:28 - I'm going to say pitch
equals ML5 pitch detection.
07:31 - Let me give myself
some more space.
07:35 - Pitch detection.
07:38 - I'm going to go back
to the reference page.
07:40 - And these are the things
that I need to load.
07:43 - So let me copy-paste.
07:44 - These are the parameters
that I need to pass in.
07:50 - I'm sitting here wondering
why I have an error.
07:52 - And of course, if I declare
a variable as a const,
07:55 - I can't just have it not equal
anything and then assign it
07:58 - later.
07:58 - So this is going
to have to be let.
08:00 - And I'm going to make a
lot of people angry right
08:02 - now by making everything
let just to simplify things.
08:06 - And now, I have the--
08:08 - I've now created a
pitch detection object.
08:12 - Now, what I want is to give
it a bunch of arguments
08:17 - to create itself, one of
which is the model itself.
08:21 - So this is no longer a
local directory of files.
08:24 - I'm going to say modelurl.
08:27 - I need to get this audio
context and mic stream.
08:30 - Let me come back to that.
08:31 - But I also need a
model loaded function,
08:35 - so that I know that the
model has been loaded.
08:41 - All right.
08:42 - So audio context and mic
stream, what are those things?
08:45 - Well, let's hope the
documentation tells us.
08:48 - Audio context, the browser
audio context to use.
08:54 - Stream, media stream,
the media stream to use.
08:59 - I'm a little bit
lost, to be honest.
09:01 - Can I get some more information?
09:03 - You know what I think
we might do here is
09:04 - let's just look at the example.
09:06 - So the example here, if I
look at the example code,
09:10 - is showing, ah, perfect.
09:11 - So an audio context I
can just get by saying
09:15 - get audio context.
09:16 - Perfect.
09:17 - So this happens to be something
that's built into JavaScript.
09:20 - It's part of the Web
Audio API, I would assume.
09:27 - And I'm sure somebody
in the chat or someone
09:30 - will leave a comment to explain
what this is a little bit more.
09:33 - But I'm just going to go
ahead and put it in here.
09:36 - I'm going to say audio context
equals get audio context.
09:43 - And then for the
mic stream, this
09:45 - is actually me connecting
to the built-in microphone.
09:49 - Or potentially, I could
specify a different microphone.
09:52 - And that I'm going to connect
by using the P5 Sound Library.
09:55 - So I can make a
variable called mic,
09:58 - and then I can say mic
equals P5 Audio In, I
10:02 - believe is the function.
10:04 - So this is the function.
10:05 - This is part of
p5sound.js, which
10:08 - incidentally is a library
that I am accessing here
10:12 - in indexed HTML.
10:13 - And look at this.
10:14 - I am on such an
old version of P5.
10:16 - Let's update this stuff.
10:18 - And I think the
current version is 9.0.
10:21 - So while I'm here, I'm going to
update that, go back to here.
10:25 - And then I think I can get
this mic stream from the P5 Mic
10:29 - Object.
10:30 - I'll just look it
up here, mic.stream.
10:33 - Perfect.
10:34 - So this P5 audio-- oh, and
I need to say mic.start,
10:40 - start pitch.
10:41 - I don't see any function.
10:43 - Oh, interesting.
10:44 - Look at this.
10:45 - So I wasn't paying
close attention.
10:49 - I didn't really think what
I'm doing, because I've
10:51 - got to do two things here.
10:53 - I need to load them--
10:54 - I need to access the microphone,
and I need to load the model.
10:57 - When I load the model, I want
to connect it to the microphone.
11:00 - And maybe I need to think about
the sequence going on here,
11:03 - because as you know if you've
done programming or watched
11:06 - a Coding Train video
before, things in JavaScript
11:08 - happen asynchronously.
11:09 - So maybe I don't need to do it
this way that's in the example,
11:12 - but I probably do.
11:13 - Let's try to do it not
the way that's an example
11:15 - and see if it works.
11:16 - It's probably going
to break without being
11:18 - thoughtful about the order.
11:19 - So I'm just going to say
mic.stream right now.
11:22 - Then I'm going to say mic.start.
11:25 - And I'm going to have a
callback like listening.
11:29 - And then I'll write a
function called listening.
11:35 - And I'll say console.log.
11:37 - I'm going to take off
this auto refresh,
11:39 - because it's doing
crazy stuff, listening.
11:42 - So let me, Uncaught SyntaxError,
invalid or unexpected token,
11:46 - line 20.
11:47 - What?
11:47 - I don't see any invalid token.
11:50 - Line 10.
11:52 - Listening, cannot read
property start of undefined.
11:55 - Let's go back to the example.
11:57 - New, new.
12:01 - I forgot to say new.
12:03 - So the new keyword
is very important.
12:05 - When you are calling
a constructor
12:08 - to create an object, you
are required to say new.
12:12 - There's something
really interesting
12:13 - that's going on here,
which is that I need
12:16 - the new here, new P5 audio in.
12:20 - But how come I'm not saying
new ml5 pitch detection?
12:24 - Oh, do you know why?
12:26 - It's because people like to
do things in different ways.
12:29 - This is actually a
little bit more standard
12:31 - from what I understand in
the world of JavaScript.
12:33 - This is not actually calling
an object constructor.
12:37 - The little clue to that is
the lowercase p right there.
12:40 - This is calling a function
that's part of the ML5 Library.
12:43 - The function itself calls
an object constructor.
12:46 - But you actually don't--
12:48 - and the new happens in there.
12:50 - But our interface to it as
the user of the library,
12:53 - we just call the pitch
detection function.
12:55 - That's why sometimes I say these
are the list of functions in P5
12:58 - instead of these are the
list of objects or classes.
13:01 - But this is actually calling
the P5 audio in constructor,
13:05 - all right?
13:05 - Let's see if that fixed things.
13:09 - All right, listening,
model loaded.
13:11 - That's promising.
13:12 - So it was happy.
13:13 - It seems to be
happy with the order
13:16 - that I'm doing
things in now, right?
13:18 - The order of the example is to
make sure the mic is started,
13:21 - and then load the. model.
13:22 - But this doesn't seem so upset.
13:24 - Maybe it's going to work.
13:26 - So what's the next step?
13:28 - Well, what I want
to do just to get
13:30 - this working is
the pitch is going
13:32 - to come in as a number,
a frequency value.
13:35 - So I just want to draw that
frequency value in the canvas.
13:38 - So how do I get it?
13:40 - Presumably, there's
some callback.
13:42 - There's a callback
model loaded, but I need
13:44 - to actually tell it to listen.
13:46 - So let's go back to the--
13:47 - I could look at the
example, but let's look
13:49 - at the documentation.
13:50 - Pitch get pitch, and
here's a callback.
13:52 - So this is what I want to do.
13:54 - This is like the function that
I call to ask for a pitch.
13:59 - And then when it hears
something, it console logs it.
14:02 - So I should be able to do this
in the model loaded function.
14:06 - I'm going to say
pitch get pitch,
14:08 - and then I'm going to
write a function called
14:10 - got pitch, because
I'm trying to do this
14:12 - in a very long-winded, highly
descriptive way where I now
14:16 - have a separate function
called got pitch.
14:19 - And then it receives an
argument like frequency,
14:22 - and I'm going to
actually draw that.
14:25 - Well, no, let's
just console log it.
14:26 - Console log frequency, OK.
14:31 - Let's run this.
14:33 - Model a loaded.
14:34 - (WHISTLING) (SINGING)
La, pitch, frequency.
14:41 - It is not working at all.
14:45 - This is a failure.
14:48 - All right, this is not
working, because it
14:51 - failed to execute
create media stream
14:54 - source on the audio context.
14:57 - Parameter one is not a
type of media stream.
15:00 - I have a feeling that this
is the problem, right?
15:04 - I did things out of--
the order now is the--
15:07 - I'm assuming the
order is the problem.
15:09 - So I need to make sure the
microphone is ready before I
15:11 - start trying to load the model.
15:14 - So in this sense,
let's try to re--
15:17 - let's try to redo this order.
15:21 - So mic audio in,
mic start listening.
15:25 - Once I am listening, then
I will load the model.
15:30 - Then once the model is loaded, I
will call get pitch, got pitch.
15:36 - If I look at the
documentation, get pitch--
15:39 - oh, oh, oh, womp, womp, womp.
15:43 - I forgot something
else really important.
15:46 - I can never remember this.
15:47 - I don't know why.
15:49 - ML5 functions, callbacks are
all written with this style
15:53 - known as error first callbacks.
15:56 - So you must include
two arguments.
15:59 - The first one is the error.
16:01 - This enforces you to think
about error handling, which
16:04 - is a thing I don't really
think a lot, but at least ML5
16:07 - is trying to get me to do it.
16:09 - And I should try to be an--
16:10 - I should be an error-checking
kind of person.
16:12 - So this should have
error frequency.
16:15 - And I could do a
little error handling.
16:17 - Like, I could say, if
error console.error error.
16:28 - Otherwise, console.log
the frequency.
16:31 - And I'm now actually
realizing that there's
16:33 - a slight inconsistency
in the way
16:35 - that the pitch detection
model works in ML5.
16:38 - One of the things that is all
of the other features identified
16:41 - do is they return an object.
16:43 - So maybe, it gives
you an object that
16:45 - has the value you're looking
for, a confidence score.
16:48 - So probably, the raw frequency
shouldn't be in there.
16:50 - It should be an object.
16:51 - Maybe it actually already
is and I'm wrong about that.
16:54 - Let's try running
this one more time.
16:59 - Oh no, I like that.
17:00 - I'm seeing something.
17:02 - So this is promising in
that something came out.
17:05 - Did the error come out?
17:06 - No.
17:07 - If it was an error
that came out,
17:08 - it would have been red,
because console.error
17:10 - will print something to
the console that's red.
17:12 - So frequency came out, but
frequency came out as null.
17:15 - That's fine.
17:16 - It detected no frequency.
17:18 - I wasn't making a sound.
17:19 - And it's not checking anymore.
17:21 - The reason why it's
not checking anymore
17:23 - is it doesn't know
to keep checking.
17:24 - I have to explicitly
ask it to keep checking.
17:27 - So I say give me the pitch.
17:29 - And then once it's got
the pitch, it logs it,
17:34 - and then I say give
me that pitch again.
17:37 - So this is a little bit of a
way of calling this recursively.
17:41 - This is kind of recursion,
because it's not exactly--
17:44 - it's a loop really.
17:45 - So let me run this.
17:49 - There we go.
17:50 - So when it detects a
frequency, it console logs it.
17:53 - And let's see.
17:57 - Higher frequency,
lower frequency.
18:03 - Higher frequency.
18:05 - Excellent.
18:05 - So now, I don't want to just
see this in the console anymore.
18:09 - I want to create a variable.
18:12 - I'm going to call it freq.
18:15 - And I'm going to set it to
0, just so it has some value
18:20 - to start with.
18:21 - And then here, I'm
going to say whenever
18:24 - I get a frequency, if--
18:26 - I don't want to assign it null.
18:29 - So I'm going to say if
frequency, freq equals
18:33 - frequency.
18:35 - I might want to account
for null in a better way.
18:37 - And then now in
the draw function,
18:39 - which is quite unnecessary, but
I'm going to do this anyway,
18:42 - I'm now going to say
text align center.
18:48 - Text frequency, I'm going
to put width divided by 2,
18:54 - height divided by 2.
18:55 - And let's say let's
do text align center,
18:58 - so it centers in both
horizontally and vertically.
19:02 - I'm going to say fill 255
and text size, I like 64.
19:07 - And then I'm going to
say frequency 2, fixed 2.
19:10 - So I want to see
two decimal places.
19:12 - And now, let's run this.
19:17 - OK.
19:18 - Hey, so the ukulele notes are
A, E, C, G. Is that right?
19:28 - A, E, C, G?
19:28 - So this should be an A. This
should be 440 if I'm right.
19:34 - So there's math that
you could do this with,
19:38 - but I can also just
look it up here.
19:40 - Yeah, right there.
19:40 - Look at that, it's
even highlighted.
19:43 - I guess it's highlighted
because it's like A4.
19:46 - So this is the frequency I want.
19:47 - So let's just say I
just want to tune--
19:49 - I'm going to just
tune the A string.
19:52 - And then maybe I'll do
the rest, but speed up
19:54 - the video or something for you.
19:56 - So I'm going to
tune the A string.
19:59 - People in the chat
are pointing out
20:00 - that I could also just
use a tone generator.
20:02 - That's probably a smart idea.
20:03 - Let me do that right now.
20:05 - All right, so thank you to
Alca in the chat who suggested
20:08 - this online tone generator.
20:10 - I'll include a link to that
also in the video's description.
20:12 - I'm just going to play it.
20:15 - And as I do the
slider, we can see
20:17 - the pitch is pretty much-- the
pitch detection is matching.
20:21 - I mean, I'm talking,
which is messing it up.
20:23 - It's matching the tone
that is generating.
20:27 - Now, you'll notice it's
not perfect, right?
20:29 - This is a machine
learning model that's
20:31 - been trained on some
data set of sounds,
20:33 - and then it's making
a guess, a prediction
20:35 - of what it thinks it is.
20:36 - This is not a 100%
accurate analysis
20:39 - that you could probably
do mathematically,
20:41 - especially with a pure tone.
20:42 - But this is an approximation
that would hopefully
20:44 - work with a variety of
different kinds of sounds
20:47 - that might be harder to analyze
and pull out that exact pitch.
20:50 - Also, I have no idea
what I'm talking
20:52 - about when it comes to sound.
20:53 - I'm just trying to
get this to work.
20:54 - All right.
20:55 - So now, what I want
to do is I want
20:56 - to make some kind
of visual indicator.
20:59 - So I think what would be
useful here is for me to draw--
21:05 - maybe I should draw some
type of rectangle that is big
21:08 - when I'm way off or smaller--
21:10 - or maybe it's when
I'm above the pitch,
21:12 - I'm drawing it to the right.
21:13 - When I'm below, I'm
drawn it to the left.
21:14 - Some type of-- and I'm
sure you, hopefully,
21:17 - will make a version of this
with a much nicer and more
21:20 - thoughtful interface.
21:21 - But to do this, I think
all I would need to do
21:23 - is say let difference equal--
21:26 - I want the frequency, what
that frequency is, minus 440.
21:32 - So right now, I'm
just tuning for A,
21:34 - just tuning the A string.
21:36 - So then I want to draw--
21:39 - let's do rect.
21:41 - I'm going to make it
white for right now.
21:46 - I'm going to say
its position is--
21:49 - what's the size of the canvas?
21:51 - 200, 200, 400, 400.
21:52 - So I'm going to say
it's at 200 comma 50.
21:55 - Let's move the text way down.
22:00 - And then so I'm going
to move this down here,
22:03 - and then I'm going to make
the width of it different.
22:06 - I'm just going to multiply it by
10, just to scale it, and have
22:09 - the height be 50.
22:11 - So let me just try
this for a second.
22:15 - And let me play the tone.
22:18 - Whoops.
22:21 - So this actually works.
22:23 - The nice thing is if I
give it a negative width,
22:25 - it seems to draw
it as a negative.
22:30 - It draws the rectangle in
the opposite direction.
22:32 - I don't actually
have to flip it.
22:34 - So the question is--
22:35 - I think times 10 is
actually quite a bit.
22:37 - So let's actually not
multiply by anything.
22:39 - Let's think about what are
these differences like.
22:41 - If it's 500, that makes sense.
22:43 - 60 pixels is pretty reasonable.
22:45 - Let me play it.
22:46 - So I'm not seeing any rectangle.
22:50 - There's a little rectangle.
22:55 - Talking messes it up, because
it gets a different picture
22:57 - of my voice.
22:58 - But I could also do
something right now--
23:00 - I could be a little bit
more thoughtful about this
23:02 - and I could map--
23:05 - I could say let
amount equals map
23:09 - the difference between
if it's between 100,
23:12 - if off by like 10 and 100
to a value between 0 and 1.
23:19 - And the reason why
I'm doing this is I
23:21 - could use the
function lerpColor.
23:24 - So let me say I
have the color red,
23:26 - which is 25500 and I have the
color green which is 02550.
23:33 - And what I want to do is
when it's all the way,
23:37 - I want to get the actual--
23:39 - I want it to have the
actual color be lerpColor.
23:44 - So lerpColor gives me a linear
interpolation between two
23:47 - colors, like red and green.
23:50 - Oh, this is actually
not what I want to do.
23:53 - I want it to be green
when it's in the center.
23:56 - So actually, I want to
map the absolute value
23:59 - of the difference.
24:01 - I want to map the absolute
value of the difference--
24:03 - and this is much easier
now-- between 0 and 100.
24:07 - And I want to then--
24:09 - when it's zero, it's
perfectly green.
24:13 - When it's 100, it's red.
24:17 - And I don't know if this is
going to actually look right,
24:21 - but let's try it.
24:23 - (SINGING)
24:31 - So we can see here now, if
I try to tune the ukulele.
24:37 - (TUNING)
24:54 - Let's make this an A4 again.
24:56 - (TUNING)
25:09 - Yeah, let's not use lerpColor.
25:11 - I think the lerpColor
was an interesting idea.
25:14 - And really, just having
like dials that like
25:17 - fill in or low-- there's just so
many nicer ways of doing this.
25:21 - There we go, OK.
25:22 - Here's my interface.
25:24 - I worked very hard on this.
25:26 - I am now going to
play a tone and I'm
25:29 - going to try to tune it.
25:38 - And then when you get there--
25:41 - and I'm going to let myself be
within three frequency values.
25:45 - I'm going to say also this.
25:51 - Auto refresh was
a terrible idea.
25:53 - Fill 02550.
26:00 - OK, ready?
26:02 - Let's tune this ukulele.
26:04 - (TUNING)
26:13 - Five is way too much.
26:20 - Let's have the threshold be one.
26:28 - (TUNING)
26:41 - There's my ukulele tuner.
26:42 - You can see that is
not the right note.
26:50 - So so many things
need to be thought of.
26:52 - First of all, that
does not sound right.
26:55 - This is going to be a much
better way of tuning it.
26:57 - (TUNING)
27:00 - Oh, it's actually not so bad.
27:03 - It's better than I thought.
27:06 - Now, really quickly
what I want to do
27:11 - is actually allow myself in
this one sketch to tune all four
27:16 - of the strings.
27:18 - And I really should stop
this video right now and not
27:20 - go any further, but I
would like to do this.
27:23 - There's so much that needs to be
27:26 - [MUSIC PLAYING]
27:30 - And you will do that.
27:30 - You will also make
a version of this
27:32 - with an interface that looks
like an actual, thoughtful
27:36 - tuner.
27:37 - Let's make an
array of the notes.
27:40 - And I'm going to create
a bunch of objects.
27:43 - And each object is going to
have the note and the frequency.
27:48 - And the note, for example, is
A and the frequency is 440.
27:57 - So I don't know why I did
all that work when I just
27:59 - want to do this.
28:01 - So there are four
strings on the ukulele.
28:04 - There is A, E, C,
and G. So let's
28:09 - look up those frequencies.
28:11 - So now, the thing
that I want to do
28:14 - is I want to find out
what am I tuning against.
28:18 - So first of all,
this is horrific.
28:20 - I cannot bear this code
that I have written.
28:23 - So let's at least make
this a little bit better.
28:27 - Let's make a variable
called threshold.
28:30 - And again, I should do
a mapping or whatever,
28:33 - but let's make
that threshold one.
28:35 - And I will at least put
that there so we know.
28:39 - And again, it's
ridiculous that I
28:41 - have these if statements in two
places, but that'll be fine.
28:44 - But the first thing
that I need to do
28:46 - is actually figure
out which note
28:48 - am I trying to compare it to.
28:50 - And I want to
automatically do that.
28:52 - So I don't know
actually which string
28:54 - I'm playing unless I did some
kind of crazy computer vision
28:56 - thing, but I'm
just going to like
28:57 - find the note that it's closest
to and tune against that.
29:01 - So what I want to do
here is I'm going to loop
29:03 - through all of the notes.
29:07 - And I'm going to
find the closest
29:11 - note is an index like 0.
29:18 - And then I'm just going to
say negative 1 right now.
29:21 - And then the record
difference is--
29:26 - I'm going to start
with infinity.
29:29 - And then I'm going to say the--
29:33 - I'm going to say
the difference is
29:36 - notesindexi.frequency, the
actual frequency minus that.
29:45 - And I'm sure I could do some
kind of fancy higher order
29:49 - array function, but let
me just do it this way.
29:51 - If the difference is less
than the record difference,
29:55 - then the closest note is i.
30:05 - And then once I've done that,
I have the closest note.
30:10 - So now-- and let me just
keep that difference.
30:13 - Oh, I have it in
record difference.
30:15 - So difference equals
record difference.
30:21 - And it's not less than,
it's absolute value.
30:23 - Sorry, got to have that
absolute value in there,
30:25 - always got to have that
absolute value in there.
30:27 - And then the actual
note itself--
30:32 - can I use this variable name?
30:34 - is the notes index closest note.
30:38 - I mean, I could've just--
30:39 - I don't have to save the index.
30:41 - I could've saved the object.
30:42 - But yeah, let me save
the object, notesindexi.
30:47 - I don't need to save the index.
30:49 - And that's the closest note.
30:50 - And then what I'm doing
is I'm showing the value,
30:55 - and then I want to draw--
30:58 - instead of where I'm drawing
this value right here,
31:01 - I actually want to just
put the note on the screen
31:04 - as well, which would
be-- where do I do that?
31:06 - Where do I actually
draw that difference?
31:09 - Oh, the text is up here.
31:11 - So I'm going to make
this much smaller.
31:15 - And then I'm also going
to right here say--
31:21 - I'm going to say text size 64.
31:26 - I'm going to say
closestnote.note.
31:31 - And this I'm going to place
150 pixels up and this 50
31:35 - pixels up.
31:36 - Let's see what that does.
31:37 - Great.
31:38 - So now, I should be able
to tune all of the strings.
31:44 - So it should detect here.
31:46 - (TUNING)
31:49 - It doesn't work.
31:56 - So why is it not giving
me any information?
31:59 - We're going to
have to debug this.
32:01 - Oh, you know I didn't do?
32:03 - I'm missing a super
obvious thing.
32:06 - I forgot to set the
record difference
32:09 - equal to that difference.
32:10 - Well, duh.
32:12 - OK, here we go.
32:16 - So my A is pretty tuned.
32:18 - (TUNING)
32:33 - Ah, I'm the worst.
32:36 - Let's put the
absolute value here.
32:39 - And then I won't
make this mistake.
32:42 - If the difference-- this has to
be the absolute value as well.
32:47 - That's definitely a problem.
32:48 - All right, here we go everybody.
32:49 - I think this is good now.
32:51 - (TUNING)
32:52 - That's A. I need the
negative difference.
33:04 - Oh, I need it here.
33:08 - OK, everybody.
33:09 - Everything's going to be fine.
33:12 - So when I'm getting the record,
I want the smallest one.
33:17 - But then when I
use it down here,
33:20 - if it's negative or not is
kind of important, right?
33:23 - No, I'm using the
absolute value everywhere.
33:26 - Oh, except for
drawing where it is.
33:33 - How about this?
33:35 - How about that?
33:36 - Huh?
33:37 - How about that?
33:38 - If the absolute value
of the difference
33:39 - is less than the absolute
value the record difference,
33:41 - then the record
difference-- but I
33:43 - see the negative
for use down here.
33:47 - (TUNING)
34:06 - I would like to be able
to see more movement.
34:09 - So where is this divide by 10?
34:11 - Give me a break.
34:12 - Divide yourself by two, people.
34:14 - (TUNING)
34:26 - Whoops, wrong string.
34:28 - (TUNING)
35:02 - This has been my
first coding challenge
35:04 - in the new Coding
Train studio over here
35:07 - at New York University
in Brooklyn.
35:09 - I made a ukulele tuner and it
has the worst ever interface
35:13 - for a ukulele tuner,
but I do think
35:15 - there are some nuggets in here.
35:17 - It's nice to see how that
pitch detection model works.
35:19 - I would love it if you made
your own version of this.
35:23 - You could go to the
codingtrain.com,
35:26 - find the page for
this coding challenge,
35:28 - look at the instructions
to submit your own.
35:30 - I actually video tutorial
for how to do that.
35:32 - If you make your
own ukulele tuner
35:34 - and you put it on the web, I
will tune this ukulele with it
35:37 - in my next live stream.
35:39 - So thank you very
much for watching.
35:41 - And I will see you in a
future Coding Challenge.
35:44 - Goodbye.
35:44 - [MUSIC PLAYING]