00:02 - hi
00:03 - okay so we're we're kind of almost there
00:05 - we're working with data and processing
00:07 - and we've seen what a string is we've
00:09 - seen how to draw text onto the screen
00:11 - and now we've also seen the function
00:12 - split the function split takes a string
00:15 - of text might be numbers it might be
00:18 - words it could be any sequence of
00:19 - characters and chops it up somehow the
00:22 - scenario that we're going to start with
00:23 - is let's load a large body of text and
00:28 - let's count the number of times every
00:30 - word appears in that body of text the
00:32 - the actual text I'm going to use in this
00:33 - scenario is to play Hamlet you can get a
00:35 - lot of stuff from a website called
00:38 - Project Gutenberg which has a lot of
00:40 - public domain text and that's a great
00:42 - sort of thing to use in this type of
00:44 - scenario so but what did we start with
00:47 - we had here in this example this sort of
00:50 - like rudimentary data visualization
00:52 - example we started with what's the data
00:54 - it's this string that's hard-coded into
00:56 - the the code itself
00:58 - this is not this is not a practical it's
01:02 - not the reality for us what we want to
01:04 - do is get that data that same data that
01:05 - text from a file a URL a website that
01:09 - has information about whether there's
01:11 - some external source we need to pull
01:13 - that stuff into processing the way that
01:15 - we pull that stuff into processing is
01:17 - with the function load strings now there
01:22 - are going to be other loading functions
01:24 - we'll see in a video or two from now
01:26 - because sometimes the data comes in a
01:28 - very specific format like comma
01:30 - separated values or something called XML
01:33 - or something called JSON we'll get into
01:35 - what those things exactly are in a bit
01:37 - and in those cases we might use bloat
01:39 - table or load JSON or load XML but for
01:42 - any generic just raw text load strings
01:46 - is going to do the job for us so what
01:48 - did we have so let's say we wanted to do
01:50 - something where we had Shakespeare play
01:53 - as a string to be or not to be and we
01:58 - know we could use the split function and
02:00 - say split this text up by spaces and now
02:03 - we have a token an array of where each
02:08 - element of the array is an individual
02:09 - in this particular text but I don't want
02:12 - to just hard code to be or not to be
02:13 - I let's say I have a file and that file
02:16 - is called Hamlet dot txt and the entire
02:20 - Shakespeare play is in this file why can
02:23 - I say string s equals load strings then
02:31 - the file name Hamlet dot txt this is
02:34 - just like what we did with images I have
02:36 - a JPEG in my data folder I'm gonna load
02:39 - the JPEG in is a PM edge and draw to the
02:41 - screen now I have a text file in my data
02:44 - folder right data is the data folder of
02:46 - the sketch is where any sort of media
02:48 - assets can go images fonts data files
02:52 - it's called beta after all Hamlet dot
02:54 - txt so that's where this file can go and
02:57 - if that's file is there I could use load
02:59 - strings and I've got it and now it's in
03:00 - my string only sadly this is not exactly
03:05 - right this is what we're looking for we
03:06 - want the entire play into a single
03:09 - string so we can split it into words but
03:12 - load strings actually does something
03:13 - slightly different which at this moment
03:15 - of our life will seem rather
03:17 - inconvenient and annoying but actually
03:20 - it's a it's a useful thing anyway what
03:23 - is that thing I'm beating around the
03:24 - bush here load strings actually takes a
03:27 - text file and loads it into an array of
03:29 - strings what why an array why would it
03:33 - ever possibly be an array well let's say
03:35 - this is my text file this is my text
03:39 - file this is what's actually in the file
03:42 - and each one of these is a line break or
03:44 - carriage return load strings will take
03:46 - each line of text and make it a separate
03:48 - element in an array so in other words
03:50 - the first element of the array would be
03:52 - this is the next element would be my the
03:55 - next moment would be text etc etc so
03:58 - there's a lot of scenarios where this is
04:00 - actually useful for example let's say I
04:03 - am want to load every word from the
04:05 - English language and I have a text file
04:06 - that has every word from the English
04:08 - language on a separate line I can just
04:11 - load it in and suddenly I have an array
04:12 - with each word as an individual element
04:15 - in that array and that could be a useful
04:16 - thing in this case we don't really and
04:20 - there's a lots of other scenarios where
04:22 - that array is useful
04:23 - actually with comma-separated values
04:25 - even though we can use table it would
04:26 - make sense that each row on a
04:28 - spreadsheet would be a separate line and
04:30 - we get that into an array however in
04:33 - this case we don't want an array we want
04:35 - the entire play in a single text file
04:37 - and right now we're gonna get every line
04:39 - from the play into it a different
04:43 - element so what can we use if I now say
04:47 - I want to put the entire play in a
04:49 - variable name that I named ham the join
04:51 - function the join function is the
04:57 - inverse of split
04:59 - so while split takes a string and chops
05:02 - it into an array join takes an array and
05:05 - joins it all as one string so what I'm
05:08 - doing here is it's kind of this strange
05:10 - thing is I I have the text file I load
05:13 - it into an array of strings I join it so
05:15 - it's one long string and what am I going
05:17 - to do immediately after that I'm gonna
05:22 - take I'm gonna I'm gonna call split and
05:26 - split that text back up into an array of
05:30 - words so this is the process text file
05:34 - for forward counting applications where
05:36 - we're starting with load the file it's a
05:38 - big array of strings join it together
05:41 - it's one long string with the entire
05:43 - play in it and now I want to look at
05:44 - each word in that string I've got to
05:46 - split it up again so its lines which
05:49 - goes to one string which is split again
05:51 - into words I'm saying it's way too many
05:52 - times okay I think I'm trying to
05:55 - convince myself that this makes sense so
05:57 - let's look at actually doing that so
05:59 - let's just let's actually just start
06:01 - with this scenario in this particular
06:03 - example and we revise and say to be or
06:05 - not to be and then what I'm going to do
06:09 - is say split that string not by a comma
06:14 - but by space and let's give myself a set
06:18 - up and let's give myself a draw and
06:23 - let's make this global variable and
06:26 - let's pink words sorry I have to I
06:27 - should have adjusted this in advance
06:29 - make that a global variable split it in
06:31 - set up and now in draw
06:39 - instead of doing an ellipse at every
06:42 - moment
06:43 - let's sorry let's draw each word so
06:53 - let's take a look at this run this what
06:56 - did I get wrong this is called words
06:57 - like ok and let's do text size 32 so we
07:04 - can see it a little bit better we can
07:05 - see there we go now we have a string we
07:09 - started with we used split to split it
07:13 - up into an array of tokens and then
07:15 - we're drawing each one of these words
07:17 - one at a time in an array so this is
07:19 - what we're kind of on the path here now
07:22 - let's think about this again so to be or
07:26 - not to be this was a single string let's
07:29 - look at the data folder and now you can
07:32 - see here I have the entire play Hamlet
07:35 - right here in a text file this is the
07:37 - text file so what I can do here is say
07:43 - load strings Hamlet txt and let's just
07:53 - print that out to the console we don't
07:55 - need this anymore well let's go leave
07:56 - that there and you can see that in fact
07:59 - there's a huge array and that huge array
08:02 - has like almost 5,000 lines in it every
08:06 - element of that array is a single line
08:08 - of text from the play so what I want
08:10 - first want to do is I want to join that
08:12 - whole thing together ok so now I'm gonna
08:15 - say entire play equals join lines and
08:20 - put a space in between each line now
08:23 - let's print the entire play now we can
08:29 - see here now all the text from the
08:31 - entire play is here down in the console
08:34 - it's all in this single string so this
08:36 - single string entire play is just like
08:38 - my string s up here so let's take this
08:40 - out and I'm not splitting up s anymore
08:42 - I'm splitting up entire play and let's
08:46 - do something slightly different
08:50 - let's have let's keep track of an
08:52 - individual index and let's just display
08:56 - I'm gonna say text-align:center words
09:03 - doing I don't know if I like the way I'm
09:05 - doing this video by pulling this whole
09:07 - example from scratch maybe you find it
09:09 - helpful and I'm gonna say index plus
09:11 - plus background 0 fill 255 text size 64
09:18 - ok so I just really really quickly in
09:20 - here just put a little algorithm to
09:22 - display a single word at a time like we
09:24 - split up that whole play which probably
09:25 - has thousands of words in it and we're
09:27 - gonna look at each word one at a time
09:29 - every time through draw so index is 0
09:31 - draw the first word go index goes up by
09:33 - 1 draw the second word just and we don't
09:35 - need this location can just be we can
09:37 - draw all these words in the middle of
09:39 - the window so here we go we can see look
09:41 - this is every word in the plate now
09:43 - you'll notice something we slow this
09:46 - down let's just say framerate 5 if we
09:55 - slow this down you can see that there's
09:58 - question marks and apostrophes and
10:00 - colons and we don't really want that
10:02 - when we go to actually count words we
10:04 - want to we want um and we look at this
10:07 - before but we have we have a scenario
10:10 - where our text look something like this
10:17 - hello comma my name is Dan question mark
10:24 - yes so if this is our text what I want
10:29 - is hello I want my I want name I want is
10:33 - I want Dan I want yes I don't want any
10:35 - of the punctuation I don't want in any
10:36 - of the spaces so just to remind you
10:38 - again split the function split takes a
10:42 - sequence of characters that access a
10:44 - delimiter so if I put space in here I'm
10:47 - gonna get hello comma then I'm gonna get
10:49 - my name is Dan question mark yes
10:51 - exclamation point if I were to do
10:53 - something like say oh space space comma
10:57 - it's actually gonna look for a space and
10:59 - a comma as the thing to split which is
11:00 - not what I want to look for I want to
11:02 - say
11:03 - split anytime there's a space or a comma
11:05 - or a exclamation point or a question
11:07 - mark and to do that there is a function
11:11 - of processing called split tokens and
11:12 - what that does is it takes any character
11:16 - that's in it that's any character that's
11:19 - here in a string any one of these
11:22 - characters individual characters can be
11:24 - a delimiter so if I come back to this
11:26 - particular program and I change this to
11:29 - split tokens and I say you know comma
11:32 - period question mark exclamation point :
11:35 - you know and the list goes on we could
11:36 - come up with a lot of other
11:37 - possibilities and I run this again we
11:39 - can see now none of the punctuation is
11:41 - there so the apostrophe is there because
11:44 - I didn't include apostrophe as a
11:45 - possible delimiter but we could say I'm
11:47 - getting one word at a time just to take
11:52 - a look in the console I think this might
11:56 - be worth looking at we can see
11:58 - everything is there there are twenty
12:00 - nine thousand six hundred and three
12:02 - individual words in this particular play
12:05 - Hamlet a couple things to point out here
12:07 - one is and if we look right here we can
12:10 - see an example of this we can see I've
12:12 - got cap T cap the capital T so
12:17 - ultimately what I want to do and we're
12:19 - gonna do in the next video is count how
12:23 - many times the word the' appears but the
12:25 - word the' and i probably already made
12:27 - the next video a priority said the next
12:29 - video do you might get this twice but so
12:35 - capital a sorry we want to count the
12:37 - with a lowercase t and though the
12:40 - capital case t could the capital t as
12:42 - the same word so one thing i can add to
12:44 - this by the way is i can use the
12:46 - function words index to lowercase so now
12:51 - if i add to lowercase here we can see
12:53 - every single word is now all lowercase
12:56 - characters which will help us in in the
12:59 - counting of them so I think this really
13:02 - kind of like wraps up this particular
13:03 - scenario what we with this video but I
13:07 - intended this video really to cover is
13:09 - simply how the load strings function
13:11 - works so what I would suggest to you is
13:13 - find some text maybe that maybe
13:16 - it's comma-separated numbers and you
13:17 - want to draw a graph by using split and
13:19 - a comma maybe it's a different finding
13:22 - something else on Project Gutenberg or
13:23 - find something you wrote or get all of
13:25 - your emails into a text file do some
13:27 - type of visualization based on the stuff
13:30 - that's in a text file and hear what one
13:32 - of the things we're doing here is every
13:34 - word is appearing on the screen no
13:36 - matter how many times it's into play so
13:38 - the next video we're gonna look at how
13:40 - do I know I'm looking through every word
13:42 - how do I know if this is one I've
13:43 - encountered before or if this is a new
13:45 - word that's kind of the next piece so
13:47 - you could you could try like your own
13:49 - version of that if you want or certainly
13:51 - just try doing this but visualize it
13:53 - different see if you can get every word
13:54 - up from the play like to fit on it in a
13:56 - single processing window or something
13:59 - like that so anyway I'm rambling and I
14:01 - want to get to the next video which and
14:03 - so this will be the end of this one
14:05 - hopefully this was somehow somewhat
14:07 - helpful even though it's only 14 minutes
14:10 - which isn't so crazy okay goodbye