00:00 - hello welcome to what I hope will be the
00:02 - last video about matrix stuff in this
00:07 - series building a neural network so what
00:10 - I want to do is in this video it's just
00:11 - a little bit of cleanup I'm working on
00:13 - this toy matrix library in JavaScript
00:16 - that does the math operations of going
00:18 - to need for the neural network that I'm
00:20 - gonna start building in the next video
00:22 - but before I get to that next video I
00:24 - want to clean up a few things and make
00:26 - the library a little better again my
00:28 - goal with this is really educational and
00:31 - for my own amusement in many ways
00:34 - I'm not trying to create this highly
00:37 - optimized or efficient comprehensive
00:39 - matrix math library just a little simple
00:42 - toy library with some key functions that
00:44 - I'm going to need and as we get later as
00:46 - I get further and further along I will
00:48 - eventually replace this with something
00:50 - else that somebody has made which will
00:51 - be much better okay so what is it that I
00:54 - want to do I made a little list I'm
00:57 - checking it just once it's a list of my
01:01 - favorite things I'm just trying to
01:02 - reference random songs okay
01:04 - this is the list of things that I want
01:06 - to do and a lot of these came from
01:07 - comments from viewers so thank you for
01:09 - those one is I'm gonna add something
01:12 - called static methods to the library and
01:15 - why am I gonna do this well some of the
01:17 - functions that I have currently in the
01:19 - library affect the current matrix object
01:22 - that I call the function on matrix dot
01:25 - add some number to it that matrix itself
01:28 - changes when I add a number to all of
01:30 - the elements but some of the functions
01:33 - in the library actually create a new
01:34 - matrix object and return it don't affect
01:37 - the library the object that the
01:40 - functions being called on and this is
01:41 - where I want to introduce something
01:42 - called static methods which will make
01:44 - this more clear so I'll get into that as
01:45 - I introduce it I just notice there
01:47 - already is a randomize function in there
01:49 - but I want to improve that a little bit
01:52 - although I'll come back to that later I
01:53 - want to add something called a math
01:55 - function and what I want to do with the
01:57 - map function is I want to be able to
01:59 - take any arbitrary function and apply it
02:03 - to every element in the matrix so if I
02:05 - could write a function that doubles a
02:06 - number and then I could just apply to
02:07 - the matrix to double every number in the
02:09 - matrix that's going to be incredibly
02:11 - useful when I get to that neural network
02:12 - stage I have to say
02:13 - hey compute something like the sigmoid
02:16 - or the tan H the arktech there's gonna
02:18 - be all sorts of things that I want to do
02:20 - to every elements of the matrix so a
02:21 - generic function called map like nap
02:24 - this function to each number that's
02:26 - gonna be really useful and then I think
02:29 - that I thought of his eyes just I do so
02:30 - much console dot table the values if I
02:33 - just make a print function that does
02:35 - that for me that'll make my life easier
02:37 - and nicer and programming anyways hey it
02:40 - should be more than it's more than this
02:41 - but sometimes it's just about making
02:42 - your life a little bit nicer on a daily
02:44 - basis okay so I'm gonna start working on
02:46 - these things there's a live chat going
02:48 - for the people who will happen to be
02:49 - watching this live and not the archived
02:51 - edited version so maybe I'll get some
02:52 - other suggestions along the way okay so
02:55 - let's first ah first thing that I want
02:58 - to do I got this comment several times
03:01 - from viewers this is a particularly I
03:04 - did a kind of poor job choosing the name
03:07 - for this variable so this variable right
03:09 - here this dot matrix which is part of a
03:12 - matrix the matrix class every matrix
03:14 - object has a matrix variable it's kind
03:16 - of problematic because it has the same
03:18 - name as the name of the class and this
03:19 - can really confuse people so one thing I
03:21 - want to do is just change this to data
03:23 - so a matrix object has a certain number
03:25 - of rows and columns in the
03:27 - two-dimensional array that stores all
03:29 - the values that's just the data of the
03:30 - matrix object so I want to change that
03:32 - and then there's some fancy those of you
03:35 - who watching probably know there's a
03:37 - like a fancy way to do this an atom
03:38 - let's see how do I do it like I always
03:41 - do this by accident and I can't do it on
03:43 - purpose where you click on something and
03:45 - it like changes everywhere else it is
03:47 - scratch that I'm gonna do it the
03:49 - old-fashioned way and I'm gonna do just
03:50 - to find replace I'm going to say this
03:52 - dot matrix replace that with this data
03:55 - because basically everywhere that I'm
03:57 - referring to it I'm referring to it by
03:58 - this time matrix so let's do that
04:00 - replace all feel confident about that
04:02 - and hopefully that's ok all right so
04:04 - I've done that now let let's move on
04:09 - what is the thing that I want to do I
04:11 - want ock static methods ok so let's look
04:15 - through this function randomized effects
04:19 - the data of this object fine this
04:23 - function add adds a number or adds
04:26 - another matrix to this
04:27 - particular matrix changing the values
04:29 - done transpose mmm
04:32 - I'm a little confused what to do here
04:35 - with transpose I'm gonna leave that I'll
04:37 - come back to it this is the one oh boy
04:41 - this is the one where I really really
04:45 - need to fix up because this is such this
04:49 - is such a disaster the way that I've
04:50 - written this function if if I get a
04:54 - matrix I create a new object and return
04:57 - that object if I get a single number I
05:00 - just multiply every value to this
05:03 - objects matrix so this is this is kind
05:05 - of a disaster I've kind of done two
05:07 - different wildly different things in the
05:08 - same function so what I want to do is
05:10 - add a static function so what do I mean
05:13 - exactly by a static method so methods
05:16 - are functions that are part of a class
05:19 - that are attached to objects made from
05:21 - that class from that template and so in
05:24 - the case here what I'm really doing is
05:25 - I'm saying things like let M be a new
05:29 - matrix and if I were to say something
05:33 - like m dot multiply multiply 2 this is
05:41 - not a static method in fact this is what
05:44 - I guess I think you would refer to as an
05:45 - instance method maybe it's a it's a
05:47 - regular function it's a function that's
05:49 - called on this particular instance of a
05:51 - matrix object but what if what I wanted
05:54 - to do is say what if I had two matrices
05:56 - and an N and I wanted to create our m1
05:59 - and m2 and I wanted to say and three is
06:04 - and currently the way the library works
06:07 - right now is I would say m1 dot multiply
06:13 - m2 this is currently the way the library
06:16 - works right now and it would be fine to
06:18 - keep it this way but I think what would
06:20 - work better is for me to actually say
06:23 - matrix dot multiply
06:28 - m1 m2 and this is a and you've seen this
06:32 - before right any time in job JavaScript
06:35 - when you've done something like math dot
06:38 - random or math
06:41 - dot sign these functions are static
06:45 - functions part of the math object Oh God
06:51 - JavaScript it really tries to be crazy
06:52 - the naming of all these things but the
06:55 - point is it's a it's kind of a nice way
06:56 - of name spacing a collection of just
06:59 - utility functions and so there are some
07:01 - functions in the matrix library that
07:03 - operate on actual instances of matrix
07:06 - objects and other functions that are
07:07 - just kind of named spaced as part of the
07:09 - matrix world the matrix world and you
07:13 - could just put things in them and get
07:15 - things out of them and that's what I
07:16 - think I want to have this multiply
07:17 - function do so now I need to look up I
07:20 - actually have to look up that syntax for
07:22 - static methods in JavaScript because I
07:24 - don't know I've done this a bunch of
07:26 - times in the java programming language
07:27 - but it's probably different in
07:29 - JavaScript so let me come back over here
07:32 - and let me look up static method
07:36 - JavaScript and I'm gonna type in Mozilla
07:39 - because I like to generally get the
07:40 - Mozilla Foundation documentation and
07:43 - here we go static keyword ah so it looks
07:46 - like all I need to do it's very very
07:48 - simple
07:48 - it's just put the keyword static in
07:51 - front of the function so if I now in the
07:55 - real question is can I have a stat the
07:58 - same the same function with two names in
08:00 - other words am I allowed to have I
08:06 - basically want to have a static version
08:09 - of multiply that receives two matrices
08:13 - m1 and m2 and a non-static version that
08:17 - receives a single number that is that
08:21 - that actually affects the that matrix
08:23 - itself so what I'm gonna do here is I'm
08:25 - gonna go and find I'm gonna go and take
08:27 - out this all of this math so this is all
08:32 - of the matrix product math that I worked
08:36 - out in the previous video and naming
08:39 - wise incidentally I called the two
08:41 - different matrix objects a and B so in a
08:44 - much simpler way I can just actually
08:47 - make the argument names a and B and
08:49 - remember I'm checking if a is columns or
08:51 - equal to bees rose okay so this should
08:55 - be fine I'm done and then here this
08:59 - multiply function is just the scalar
09:03 - product all right let's see if this
09:07 - works but before I see if it works let
09:10 - me actually add this print function this
09:13 - is not going to be I'm going to put
09:15 - through this on the bottom I'm gonna add
09:16 - a function called print I could just
09:19 - call it log maybe maybe a log is a
09:21 - better no no let's call it print and in
09:23 - the print function I'm going to say
09:25 - console dot table this dot data right so
09:31 - I want to just console table that this
09:33 - this dot data so let's take a look and
09:35 - let's let's let's try to manipulate some
09:40 - stuff in the console so let's say oops
09:44 - cannot read property matrix Jas line 45
09:48 - of undefined
09:49 - so I messed something up so I had some
09:57 - other places in the code where I was not
10:00 - saying this dot data but some other
10:02 - matrix dot what neat now needs to be
10:05 - data so I can look for any where I'm
10:08 - actually saying dot matrix and your some
10:14 - other places and some other places that
10:22 - that's pretty good okay so I took care
10:24 - of that let's go back here alright
10:27 - oh I forgot that I have a sketch that's
10:29 - running that's trying some things out
10:30 - but let's um let's just say m1 equals a
10:33 - new matrix that is 2x2 and I'm gonna say
10:40 - m1 randomise m1 dot print okay that's
10:48 - the matrix m1 dot multiplied two so I
10:52 - want to double all those values and then
10:56 - m1 dot print again m1 dot print and we
11:00 - could see okay so that's working my old
11:02 - multiply function the multiply function
11:04 - that takes
11:05 - single number and affects every element
11:08 - of that matrix is working now let's see
11:11 - if the static one works so now I'm going
11:14 - to say let em M to be a new matrix and
11:19 - I'm gonna say m2 dot randomized and m2
11:24 - dot print just to check it out
11:25 - whoops mmm why did that not work oh I
11:30 - didn't give it so I probably so I forgot
11:34 - to give it a number of rows and columns
11:37 - I should probably add some error
11:39 - handling into the library it's there's
11:40 - like hey you forgot to give me the
11:41 - columns and rows or use a subtree fault
11:43 - value let's let's try that again m2
11:47 - equals a new matrix that's also 2x2
11:51 - let's print it out and let's randomize
11:55 - it and let's print it out and there we
11:58 - go okay so now let and three equal
12:03 - matrix dot multiply m1 m2 this is now
12:09 - how I want to get a new matrix which is
12:12 - the result of the dot product a matrix
12:15 - product between matrix one and matrix
12:18 - two and if I say m3 dot print okay so I
12:24 - can only assume that the math works
12:26 - correctly somebody watching this a
12:28 - should feel free don't pause and check
12:30 - that method right in the comments if
12:31 - it's wrong but what I was really looking
12:34 - for I checked the math at the math work
12:36 - correctly last week so I'm really
12:37 - looking for now and I get do am I
12:41 - allowed to have two methods one that's
12:43 - static with a given name and one that's
12:44 - not static with a given name and it
12:46 - looks like I am and it makes sense that
12:47 - it would be able to do that because
12:49 - they're called in completely different
12:50 - ways there's no reason why the computer
12:53 - should ever get confused between the
12:55 - instance the computer the JavaScript
12:57 - interpreter should ever get confusing
12:59 - the instance version and the static
13:01 - version as an exercise to the viewer you
13:03 - know we can make some arguments whether
13:05 - what's what's the sort of optimal or
13:07 - most elegant way to write this library
13:09 - but for it as an exercise for the viewer
13:11 - what you could do is take this transpose
13:13 - function and make a static version of it
13:16 - which is essentially this right we
13:19 - about to to it make a static version of
13:21 - this and perhaps leave an instance
13:23 - version which changes the internal data
13:25 - of the matrix object itself to be the
13:27 - transpose matrix but I'm gonna leave
13:29 - that as an exercise for the viewer so
13:30 - the last thing that I need to do in this
13:33 - particular video is create a map
13:35 - function that's going to be a function
13:37 - that takes any generic function as an
13:40 - argument whoa
13:41 - so if yeah I visit I think I think this
13:44 - might be the first time I've really done
13:45 - this in a video in JavaScript let's
13:49 - think about this for a second I can
13:51 - write a function let's let's think about
13:52 - how I'm gonna write this can I use this
13:55 - eraser it looks like I can alright so I
13:58 - am going to create a function we got it
14:01 - we got to think about this for a second
14:03 - so if I were writing a function and I
14:07 - did this already called something like
14:08 - add and it receives a number right this
14:13 - is a function I have in my matrix object
14:15 - we're what I'm gonna do is say plus
14:17 - equal you know I'm gonna have a whole
14:19 - bunch of for loops for every element of
14:22 - the matrix add this number to it that's
14:26 - what this function does what I'm saying
14:29 - I want to do is create a function called
14:32 - map and what that function does is it
14:37 - receives a variable maybe I'll call it
14:39 - FN right now for function maybe callback
14:42 - is it's not really a callback so it's
14:44 - not a callback a FN for function and
14:47 - what it's going to do is it's going to
14:49 - execute this function somewhere in the
14:53 - code and this is something that you
14:55 - can't really easily do in a programming
14:58 - language like Java you can't make a
15:01 - function a variable that you pass around
15:04 - easily without some like real crazy
15:07 - gymnastics but this is very native to
15:10 - how JavaScript works arguments we think
15:13 - of M parameters to a function we think
15:14 - of emilie's Oh send these numbers in or
15:16 - send these yeah send these other objects
15:19 - in but a function is the thing that I
15:21 - can send in just as well so let's look
15:23 - at how this would work in other words
15:25 - instead of adding a number to every
15:26 - element of the matrix I want to apply a
15:28 - function to every element of the
15:30 - and let's look at how we do that okay so
15:37 - let's
15:39 - I think the ad function actually we can
15:41 - look here at this is kind of a useful I
15:44 - mean I'm gonna use this multiply
15:45 - function that instead of ad it just
15:47 - multiplies this number to every elevator
15:49 - as a starting point so I'm gonna call
15:52 - this function map as a kind of generic
15:54 - term for mapping a function and what I'm
15:56 - going to do is I'm going to say so I
16:01 - want this same exact apply a function to
16:06 - every element of matrix and I'm gonna
16:10 - say right now I'm just going to create a
16:12 - variable let value equal this data
16:16 - IJ in other words I want to say I want
16:19 - to look through every element of the
16:21 - matrix and I want to take that value now
16:23 - this would be me just assigning that
16:26 - element of the matrix its value what's
16:29 - its value assignment this is this would
16:30 - not change the matrix at all but in two
16:33 - steps I pull the value out and I put it
16:34 - back in but if I have this function what
16:38 - why don't I just apply that function to
16:40 - the value and put it in so I can execute
16:43 - that function with the value and then
16:47 - assign the result of that function to
16:49 - the data makes sense
16:51 - so this'll might make even more sense
16:53 - once we see how it's used and you know
16:55 - this is only gonna work if I send in
16:58 - functions that are written in a certain
16:59 - way but we'll look at that
17:00 - and maybe somebody watching can let me
17:02 - know what's it is there a conventional
17:03 - name for what you might call a generic
17:05 - function that's being passed in you know
17:07 - I don't wanna I don't want to call it
17:09 - function because that's a reserved
17:11 - keyword I could call it func
17:13 - map its funk funk that's good I like
17:17 - that funk let's change it to funk okay
17:21 - all right so now let's let's in order to
17:24 - see if I've done this correctly let me
17:27 - go to sketch KS which is sort of just a
17:29 - bit of like code that I can use to sort
17:32 - of mess around and see if things are
17:33 - working okay so let me keep and in fact
17:38 - this will actually negate the need for
17:40 - certain functions like randomized
17:43 - potentially or ad
17:44 - because I could always create those
17:45 - functions and did call them through the
17:47 - map but let's look at this so let's say
17:49 - I have a matrix and I'm gonna say a dot
17:51 - randomized and then I'm going to say a
17:54 - dot print so what I want to see is just
17:57 - and I'll keep this just as a two by two
17:58 - matrix it's easier to see so I'm gonna
18:01 - refresh this page we can say here's my
18:02 - random 2x2 matrix now what I want to do
18:05 - is I'm gonna write a function called
18:07 - double it and it takes some arbitrary
18:11 - value let's call it X and it returns x
18:15 - times two so this is a function a
18:18 - generic function that receives a value
18:20 - and returns the doubled version of it so
18:23 - if I say an a dot map double it what
18:28 - this should do is it should send this
18:31 - function double it in through the
18:34 - function map it's going to receive it
18:38 - here run through and now it's saying
18:40 - this data I J equals double it now so
18:44 - it's calling the double it function for
18:46 - every value in the matrix so let's go
18:49 - back to here and if I say a dot print
18:53 - now and I run this we should see look at
18:56 - this here's a matrix with values two
18:58 - seven seven three or two seven actually
19:00 - whoa and and now I have four fourteen
19:04 - fourteen six all the values are double
19:05 - great that works myself a little high I
19:11 - need a little reassurance it's no file
19:13 - in the form of bad lame sound effects
19:16 - okay
19:19 - so ah so I'm being told in the chat that
19:23 - and this is by the way it's often
19:24 - referred to as a lambda function maybe
19:26 - but sometimes it is useful to actually
19:32 - use the index values so there are there
19:35 - are so there might be a reason why you
19:39 - want to optionally also pass in the IJ
19:43 - the row column location of of each when
19:48 - you're calling the function that's being
19:50 - passed in because you might want to you
19:52 - might want to operate on it depending on
19:53 - where it is in the matrix so maybe if
19:55 - it's an edge
19:56 - you do something different so in that
19:58 - case this can be useful so this is a
20:01 - little bit of an additional advanced
20:03 - thing I'm gonna leave it out of my very
20:04 - simple library but I thought I should
20:06 - mention that and and it's up to you to
20:10 - then therefore so I could do something
20:13 - like as long as I is greater than zero
20:15 - return x times two otherwise return just
20:21 - X so I could start to do sort of
20:23 - advanced things like I don't want to
20:24 - just do this to everything but not to do
20:26 - something different to the first row all
20:28 - right so this brings me to the end of
20:32 - this particular video I am sure there
20:35 - are things I mean I'm really sure there
20:38 - are things this matrix class is missing
20:40 - that any comprehensive matrix class
20:43 - would need and I wouldn't be surprised
20:45 - even if we discover some things we have
20:47 - to change and alter to this as I start
20:49 - building the neural network but in the
20:51 - next video what I want to do is return
20:54 - back to this topic of a perceptron what
20:56 - happens when I have multiple perceptrons
20:58 - a multi-layered perceptron and why all
21:02 - of a sudden does this concept of a
21:04 - matrix become so meaningful and
21:07 - important for the math of feed-forward a
21:09 - neural network is actually often
21:12 - referred to as a universal function
21:15 - approximator right
21:16 - it receives input it generates an output
21:18 - why do I need matrices inside of that
21:22 - neural network to manipulate how I get
21:24 - the output from the input that's what I
21:25 - want to look at the next video the
21:27 - feed-forward algorithm okay thank you
21:33 - [Music]