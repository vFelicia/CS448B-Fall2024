00:00 - hallo there welcome to another video
00:03 - about context-free grammars that's what
00:06 - that's what I'm talking about so um I've
00:08 - already done I've sort of explained what
00:10 - a context-free grammar is I looked at a
00:11 - JavaScript framework library called
00:13 - tracery and in this video I want to look
00:15 - at yet another JavaScript library called
00:18 - Rita dot J's that has a functionality
00:21 - that allows you to generate text based
00:23 - on grammar now I previously made a video
00:26 - about the Rita Jas library I've showed
00:28 - some other aspects of it ways that you
00:31 - can generate and do and evaluate
00:33 - actually analyze text with the Rita
00:34 - library and I'll make sure the link to
00:36 - that in this video's description so I
00:37 - encourage you to check that out but an
00:39 - aspect that I did not look at is the are
00:41 - the Rita grammar there are eye grammar
00:44 - object so how does the RI grammar object
00:46 - work and what kinds of things can you do
00:48 - with it ok so first of all um the RI
00:50 - grammar object is designed for use with
00:52 - the context-free grammar now if you're
00:53 - wondering what a context-free grammar is
00:56 - you can double back a couple videos
00:57 - where I maybe talk through in a bit more
00:59 - detail but just to remind you if you're
01:01 - wondering a context-free grammar is a as
01:04 - a system that defines the structure of a
01:07 - particular language and in this sense of
01:09 - it could be a very small tiny little
01:11 - language like here's a language that has
01:13 - only these elements sentence nouns verbs
01:16 - and the cat dog meows and barks so there
01:20 - are terminal and non-terminal characters
01:22 - these are non-terminal characters
01:24 - meaning they get replaced with something
01:25 - SAS for sentence gets replaced with the
01:28 - noun verb noun gets replaced with cat or
01:31 - dog verb gets replaced with meows or
01:34 - barks so if I start with sentence this
01:37 - gets expanded to the env that is
01:41 - terminal so it stays as the and becomes
01:43 - flip a coin cat or dog V becomes flip a
01:46 - coin cat or dog and we get this
01:48 - expansion so certainly the idea here is
01:52 - to design sophisticated and interesting
01:54 - grammars with all sorts of creative
01:56 - language in them to generate text with
02:00 - some purpose maybe you're making
02:01 - automatic you know Harry Potter spells
02:03 - or maybe you're making recipes that are
02:05 - gonna like randomly generate you're
02:06 - gonna cook some strange thing for dinner
02:08 - based on what your context-free grammar
02:10 - made you lots of possibilities there but
02:12 - let's see if we can figure out how to
02:13 - make
02:13 - a simple grammar work with the Rita
02:15 - library and then we'll also look at some
02:17 - other examples of grammars that you can
02:20 - generate with the Rita library okay so
02:22 - looking at this the first thing you
02:25 - might notice is I need to say make a new
02:27 - Rita grammar object so let me go to code
02:31 - and I'm gonna say VAR I'm gonna call it
02:34 - RG just like in the example by the way
02:36 - Rita is by Daniel how Thank You Daniel
02:39 - Hale for this wonderful generative text
02:41 - library encourage everybody watching to
02:42 - thank Daniel Holland and contribute to
02:44 - the development of Rita RG equals nu RI
02:48 - grammar now I'm gonna leave the argument
02:50 - here empty so ultimately there's a lot
02:53 - of different ways that we might be able
02:54 - to create the grammar I can do it
02:57 - dynamically in code by just adding the
02:59 - rules we're just wanting to try to do
03:00 - right now or I could load the grammar
03:02 - from a pre-existing file and I can mix
03:05 - and match too but let's try to just
03:06 - dynamically generate it with code so the
03:08 - first thing I want to do is just looking
03:10 - at this is see if I have an object there
03:12 - so you can see I have some Rita grammar
03:14 - object it's got like some rules in it
03:16 - something's happening but I can't do
03:18 - anything yet now if I go to here and I
03:22 - say let me look at a result let me
03:25 - expand remember an expansion is
03:27 - expanding from the sort of start of the
03:30 - grammar out and getting a sentence that
03:32 - fits that grammar so if I get some sort
03:35 - of result and I say console dot log
03:37 - result I should get nothing
03:40 - so no grammar rules found so the first
03:44 - thing that I need for a grammar to do
03:45 - anything is to have some rules so let's
03:47 - look now at the add rule function so the
03:53 - add rule function requires a name oh
03:56 - look at this oh wait I love that this
03:58 - has that that is so fantastic so it has
04:00 - the rule name and the rule definition
04:03 - and the rule weight so here's the thing
04:05 - we're gonna have to figure out what does
04:07 - really I I honestly don't know this I'm
04:09 - gonna figure this out while doing the
04:10 - video what does Rita expect that how
04:13 - this is formatted so I'm gonna look I'm
04:16 - sure there's an example that I can look
04:17 - at but on the one hand I know that I
04:19 - could say RG dot add rule and so I could
04:22 - say maybe like start becomes a sentence
04:26 - or I could let me just say the cat meows
04:30 - there's a rule sentence becomes the cat
04:34 - meows and probability of a weight of one
04:37 - now I doubt that's enough so so that did
04:42 - not work so I expect that I've got to
04:45 - conform to the syntax of the Reta
04:49 - library and how it expects it to work
04:51 - now I kind of getting a little clue here
04:53 - rule not found start so I think by
04:55 - definition
04:56 - Reeta probably except I'm just guessing
04:58 - from looking at this error that Rita
05:00 - expects there to be a rule called start
05:03 - so let's see if that works if I now get
05:06 - the cat meows I did so now every time I
05:11 - get the cat meows now how can I get
05:13 - maybe so let me see if I can now call
05:17 - this now I'm expecting maybe if I make a
05:19 - rule that has this syntax with the sort
05:22 - of tag symbols around it I can say add
05:25 - rule N and I can say cat so now let's
05:33 - just see if I have a rule which this set
05:35 - in the start is the end meows and maybe
05:38 - I'm gonna get cat perfect now how do I
05:41 - get now I have a feeling that the syntax
05:43 - it expects is this so there are a bunch
05:46 - of sort of conventional syntaxes for
05:52 - grammars and you know you're gonna see
05:55 - them in a variety of different ways that
05:58 - you can encode into JSON as we saw in
06:00 - tracery with uh sort of pound symbols
06:02 - this I believe is based on some standard
06:04 - I should look it up and try to figure
06:05 - out what it is annotation appear here to
06:07 - explain but I have a feeling based on
06:10 - what I've done before and seen before
06:11 - that it's expecting the pipe symbol as
06:15 - one or the other right let's say what
06:16 - would happen if I didn't do this okay
06:18 - CatDog well I'm gonna get the cat dog
06:21 - meows that's what again that's the whole
06:23 - thing that's replaced but if I put this
06:25 - pipe symbol here - cat meows the dog
06:28 - meows the cat meows the dog meows so we
06:30 - can see now the rules now one thing I'm
06:32 - curious about is does this require these
06:34 - tags it does not the cat
06:40 - the cat the cat the cat the dog so so we
06:43 - can see here that the this is this can
06:45 - be a useful distinction just for
06:47 - ourselves to kind of illustrate what I
06:50 - mean to be a you know non-terminal maybe
06:52 - put the tag the less than the
06:54 - greater-than less-than around it and
06:56 - that can be useful here so one thing
06:58 - that I'm kind of the other thing that
07:00 - I'm kind of curious about is if I say
07:03 - this I could also probably put them in a
07:06 - separate line the dog the dog the cat
07:09 - the cat the dog and so now let's look at
07:13 - let's think about this wait so if I go
07:15 - back now to the documentation and we
07:17 - look at the rule wait optional defaults
07:21 - to one so how might I alter the
07:25 - probability so I'm just going to make
07:27 - sort of a guess that if I do something
07:29 - like five then I've got kind of a five
07:33 - to one you know maybe a five out of six
07:35 - chance of picking cat over a dog and
07:38 - what we could do is I could also do this
07:41 - you know maybe a hundred times just to
07:45 - sort of see how this works and let's run
07:51 - this and so you can see here it's
07:55 - picking cat you know it pick cat sixteen
07:57 - times then a pick dog then cat 4 times
07:59 - then it picked dogs and cat four times
08:01 - then cat seven times so you can see that
08:03 - that waiting allows you to add the rules
08:06 - and kind of wait them in particularly I
08:08 - could also probably do cat or unicorn
08:10 - and both I'm imagining both of those
08:12 - probably have the weight of five and the
08:14 - dog has the weight of one so if I ran
08:16 - this again we can see there's going to
08:18 - be a lot of cat in unicorn and not so
08:21 - much dog I'm sort of guessing so I'd
08:22 - have to really like strictly evaluate
08:24 - how this is working but you can see it's
08:26 - nice that you have this ability to
08:27 - manipulate the weights so if I go back
08:29 - to this particular simple scenario let's
08:33 - just finish implementing that I'm gonna
08:35 - save the noun and I can add a cat
08:39 - unicorn dog I'm gonna just leave the
08:42 - default weights and then I'm gonna add
08:46 - another rule what sound does a unicorn
08:49 - make meows
08:53 - Meow's the dog barks the unicorn the
08:58 - Twi'leks that's the sound of a unicorn
09:01 - it's a word that I made up called tulips
09:02 - and then I'm gonna put a period here and
09:05 - so now we can see if I generate this we
09:09 - can see all of these different possible
09:11 - sentences all which conform to that
09:13 - grammar so this is a very basic idea you
09:17 - can imagine how you could make this much
09:19 - more sophisticated through nesting you
09:24 - know what if so there's I'm going to
09:26 - kind of like stay away from more
09:28 - exciting and interesting possibilities
09:30 - that this here I'm just kind of giving
09:31 - you the building blocks but let's look
09:33 - at actually what happens if you want to
09:35 - encode a grammar not in your code but
09:38 - have it come from a separate file and I
09:41 - can look here in the reference and look
09:43 - at load from whoops I've clicked on the
09:45 - wrong thing I'm gonna click it load from
09:47 - so what load from says load from a file
09:50 - or URL with an option
09:52 - so in option the option in JavaScript is
09:55 - going to be a callback because when you
09:56 - ask for a file it's it's gonna happen
09:58 - the files could be loaded asynchronously
09:59 - so I need to know when the grammar is
10:01 - ready so there are a bunch of different
10:04 - ways grammar files can be formatted and
10:06 - a typical way you might see is with a
10:09 - syntax that looks something like this
10:11 - and I have some examples that when you
10:14 - look at the code examples that load
10:15 - files that look like this here's another
10:17 - sort of way that looks a little bit like
10:19 - JSON this I found in some of Daniel
10:22 - house examples but Rita so I'm gonna try
10:25 - loading this particular file which is a
10:27 - dot grammar file and whoops I've so let
10:30 - me comment this out and I'm gonna say RG
10:33 - load from test grammar and I'm gonna say
10:38 - grammar ready so this is my callback for
10:42 - when the grammar is ready I'm gonna just
10:45 - say ready so if I do this and run this
10:50 - now it's gonna say uh grammar appeals to
10:53 - be appears to be invalid JSON please
10:55 - check it if you're using llamo so there
10:58 - are so many different kinds of
10:59 - standardized data formats
11:01 - you know there's XML markup and yamo and
11:04 - blah blah blah blah blah blah
11:05 - if you've watched some of my data videos
11:06 - I kind of cover some of these different
11:08 - formats
11:08 - I think JSON is going to be the easiest
11:11 - format for us to encode a grammar and
11:14 - then load it into Rita or another
11:16 - program that we write right so I
11:18 - actually have already taken this exact
11:21 - grammar and rewritten it using a JSON
11:24 - syntax and you can see that here so I
11:26 - have a start which is a noun phrase or a
11:29 - verb phrase the noun phrase is a
11:30 - determiner and a noun a verb phrase
11:32 - could be verb phrase followed by verb
11:34 - followed by a noun phrase or just a verb
11:36 - so you can see there is some nesting
11:38 - into this grammar and then here you can
11:39 - see the sort of terminals I mean each
11:41 - key has an array for multiple
11:43 - possibilities so now if I were to go
11:46 - back and to my code and load grammar dot
11:50 - JSON I should at least be able to run
11:53 - this and I see no error I just see ready
11:56 - and now I have a grammar already going
11:58 - and I could say result equals grammar RG
12:03 - expand and then console dot log RG here
12:09 - we go and we can see up look at that
12:11 - what did I just say RG no that was
12:14 - interesting the result is what I want to
12:15 - see and we can see the unicorn dances
12:17 - the unicorn dances the rainbow the
12:19 - unicorn dances a rainbow dances a
12:21 - rainbow dances the rainbow unicorn
12:22 - dances a rainbow dances the unicorn
12:24 - dances rainbow dances unicorn dances the
12:26 - rainbow somebody could make a song out
12:27 - of that the unicorn dances the rainbow
12:29 - the rainbow dances the rain unicorn
12:32 - dances the unicorn okay so yes please
12:34 - not yeah Mille someone says in the chat
12:36 - not to worry so now you can see here
12:38 - once again just as with tracery it's
12:42 - your job if you want to work with
12:45 - context-free grammars to design the
12:47 - grammar and this is an effective way of
12:49 - working with in that you could actually
12:50 - have a completely separate file where
12:54 - you put all of the grammar so this could
12:56 - become very long in fact you might start
12:58 - thinking about hmm how could I do things
13:01 - like whenever I get to a noun instead of
13:04 - picking from just a fixed list actually
13:06 - used to read a lexicon to give me a
13:08 - random noun or query word Nik - like an
13:11 - API to get it down from there's a lot of
13:14 - possible ways you could sort of think
13:16 - about this one other Graham
13:19 - that I want to show you which again is
13:20 - thank you to Daniel how the creator of
13:22 - Rita I'm gonna see if I can pull this up
13:25 - because I have it in one of my other
13:26 - examples this one so let's see if this
13:29 - works I'm gonna copy paste this grammar
13:31 - and I'm just gonna put it I'm just gonna
13:33 - overwrite here grammar JSON paste it in
13:36 - hit save and I'm gonna run it and we can
13:38 - see now and actually what I'm going to
13:40 - do is let's let's let's uh let's get be
13:42 - a little bit more sophisticated about
13:44 - this sophisticate this is a very this is
13:46 - a very sophisticated cooking shy by the
13:48 - way this is called the cooking show now
13:49 - I'm cooking cooking with code maybe
13:51 - that's it button equals create button
13:55 - generate button Mouse pressed this is
14:00 - I'm using the p5 Dom library to attach a
14:02 - click event to a button and I'm gonna
14:05 - say a new haiku and then I'm gonna say
14:11 - function new haiku and I'm going to say
14:18 - var and now I'm going to do here I'm
14:19 - gonna get the result is expand the
14:22 - grammar and then I'm going to say create
14:24 - P result so let me run this and we
14:29 - should see our result is not defined
14:30 - line 12 I forgot that I have some extra
14:34 - code there so the idea here is that I
14:36 - generate and I get these haikus now a
14:38 - couple things about this why is there
14:40 - this % in there so one of the things you
14:43 - could do when designing a grammar is
14:44 - kind of create your own protocol like I
14:46 - really what I want to have is like a br
14:48 - tag there so I could just go into the
14:50 - grammar and just do this which will
14:55 - probably work and because I'm outputting
15:00 - to HTML I'm getting a br tag but I might
15:03 - be outputting to other things and I
15:04 - actually want to replace that with a
15:06 - line break so but you can see here let's
15:08 - look at how this grammar works this is
15:09 - an interesting way that you can use a
15:11 - grammar to generate haiku so I could
15:15 - form is a complex thing there is a
15:17 - variety of ways you can sort of think of
15:19 - haiku but here's one scenario line with
15:22 - five syllables aligned with seven
15:24 - syllables and aligned with five
15:25 - syllables so that is the start axiom
15:31 - then here are all a bunch of ways you
15:33 - can create a line with five syllables a
15:35 - one syllable followed by four syllable a
15:37 - one solo followed by three are 1 a 1 a 1
15:39 - 3 1 2 2 1 2 1 1 so you can see here's a
15:42 - whole set of possibilities here are
15:44 - possibilities for 7 line notice how I'm
15:47 - reusing the 5 line here because I could
15:49 - have 1 1 5 line 2 5 line 5 line 1 1 or 5
15:52 - line 2 and then here's a whole lot of
15:54 - one syllable words this is all from
15:56 - Daniel how a whole lot of two syllable
15:59 - words a whole lot of three syllable not
16:00 - just words but phrases for syllable etc
16:03 - so now if I were to run this we can see
16:06 - I'm always going to get cranes Japan I'm
16:10 - gonna get out 5 syllables cranes Japan
16:12 - Daybreak's followed by seven Dawn's
16:14 - smoke Japan dawn rushing followed by
16:17 - five souls through smoke juniper so I
16:20 - encourage you to think about what might
16:22 - be some creative ways you can write a
16:24 - grammar to generate text and now we've
16:28 - seen how you can do this same type of
16:30 - context-free grammar with tracery we've
16:32 - seen how you can choose do it with the
16:35 - reader library and in the next video
16:37 - which I which will be coming at some
16:39 - point if it's not already there I'm
16:40 - gonna just kind of look at the basic
16:42 - recursive algorithm for doing this
16:43 - expansion from scratch in case you at
16:46 - some point want to start playing around
16:47 - with sort of guts of how the
16:49 - context-free grammar generation system
16:51 - works okay thanks for watching