00:02 - We are ready to begin
00:03 - a new set videos. The first set of videos were
all just introductions, "Where are we?
00:08 - What's the world coming to?" All that
kind of stuff and now we're going to
00:12 - begin actually looking at the practical
reality of writing code.
00:15 - Now, we're doing something in this
"Whatever you wanna call it"
00:19 - video series which is we are learning
00:23 - about computer programming, the
foundations of computing through the
00:26 - lens of computer graphics,
00:28 - drawing to the screen. So, actually in this
very first video in this series of a bunch
00:33 - we're not going to write instructions
just yet.
00:36 - We're going to begin by just feeling
comfortable, getting together,
00:40 - having a moment, and understanding what
it means to draw
00:44 - pixels to the screen. What is the 
coordinate system of the screen?
00:47 - What does it mean to draw a point, a line,
a rectangle? How do we actually
00:51 - put stuff onto that? So, this should be a
short video we're gonna do this video first
00:56 - then we'll actually look at opening up
Processing, how Processing works, and writing
01:00 - code to implement our drawings,
01:02 - then we'll add color and do all sorts of
other stuff as well.
01:05 - So, what's the beginning? What's the
first thing that we need to understand?
01:09 - When we
01:10 - write our first Proccessing program, which
01:13 - we'll eventually call it a sketch,
01:17 - what happens is a window opens and here is
what happens. We can represent this window
01:22 - by drawing a
01:23 - rectangle over here. This is our computer
graphics window. All of the instructions
01:27 - we write as we learn about all this stuff
about foundations of computation,
01:32 - we're gonna write instructions that are gonna draw
stuff to the screen.
01:35 - You know, it's important to note though
that this is a small fraction percentage
01:40 - of what you can do with computation,
right? Draw,
01:43 - make drawings. It's just a nice way to begin
but, you know,
01:47 - you should realize that you're not limited
01:50 - to this world of drawing to the screen. You will go
out and
01:53 - solve all sorts of interesting problems
and create all sorts of wonderous
01:56 - things with the power of computation but we're
going to start, you know, we're going to
02:00 - be super excited when there's
02:02 - know a red circle in the middle of the screen.
We're gonna think we
02:05 - really achieved something brilliant. Okay,
so we have this
02:08 - rectangle, boy am I long winded.
You might have
02:12 - one time in your life taken a
02:15 - math course, a geometry course, some sort of
course
02:18 - where you drew something that looked
like this. The Cartesian coordinate
02:22 - system maybe you had graph paper even.
02:25 - The graph paper is a great thing. If you
have any graph paper lying around
02:28 - the house go pause,
02:30 - go and get it, and pull it out. You'll be very
happy you have graph paper. But when
02:33 - you have a Cartesian coordinate system, you add
something called the "x-axis".
02:40 - I'll walk over here.
02:41 - Then you add something called the "y-axis". And
then we could say, "Oh look, there's a
02:45 - point over here".
02:46 - What is that point? Maybe it's 1, 2, 3, 4, 5.
02:49 - 1, 2, 3, 4. And were gonna say, hey, it's
02:53 - 5 comma 4 meaning its
02:58 - x equals 5, right, with this point over here.
03:01 - The center being your origin. (0, 0)
Right?
03:05 - and this is 5 comma 4 and why,
excuse me, 1, 2, 3, 4, right?
03:10 - This should feel somewhat intuitive, somewhat
familiar to you, right?
03:15 - This is this idea, you have this coordinate system
and we can locate
03:19 - spots on the coordinate system by their
numeric numeric horizontal value, x, by their
03:23 - numeric vertical value, y. We're going to do
this
03:27 - same exact thing in computer graphics only
the
03:30 - coordinate system is going to be
slightly different. You know, one thing I
03:33 - should mention is, what is this point
here?
03:37 - This point is 1 comma -3,
03:39 - right? This is positive 1, 2, 3, 4, negative
points down.
03:43 - -1 -2 -3. And here's -1 -2 -3 along the
x-axis.
03:49 - So, we have this idea of this
coordinate system with
03:51 - (0, 0) in the center, positive x going
to the right,
03:55 - positive y going up. Now, in computer
graphics,
03:58 - we have something similar to this but
04:02 - flipped and with (0, 0) in a different place,
right? A computer graphics window,
04:06 - right, here's a window. This is actually
Processing but you can see, we can say, hey that's the
04:09 - top left of this
04:10 - window which is this big rectangle on screen.
The top left of any computer graphics window
04:16 - is the origin, (0, 0)
04:19 - and this is the x-axis going this way,
04:24 - and this is the y-axis going this way.
04:28 - But we should note something:
04:33 - What is this point?
04:36 - This is the point 5
04:40 - comma 4, right?
04:43 - This was 5 comma 4 in this
coordinate system,
04:46 - This is 5 comma 4. 1, 2, 3, 4, 5.
04:50 - 1, 2, 3, 4 in this coordinate system.
04:54 - y is positive pointing down, x is positive
pointing to the right.
04:58 - ????!!!!
05:01 - I don't know, I feel at ease
with this but I don't know if
05:05 - this makes you uncomfortable or its just like,
oh my God,
05:08 - I can't believe you're still talking about where the
point 5 comma 4 is. But,
05:11 - what we should note here is it
doesn't make sense to have negative pixels,
05:16 - right? So, all the pixels within our window
are positive numbers.
05:20 - There's no such thing as a negative pixel.
Now of course,
05:23 - all of this could be-is going to
change
05:27 - as we look at more advanced environments. 
There's certainly ways, when we get into 3D,
05:31 - where (0, 0) you want to consider at the
05:33 - center. There are all sorts of reasons
why you might consider negative numbers
05:37 - versus positive numbers
05:38 - but we're starting at a very simple, nice
friendly, happy-go-lucky place
05:42 - where we just have (0, 0) in the
top-left, positive x to the right,
05:47 - positive y going down.
05:48 - Now, you might be wondering, boy you took a
very long time to
05:52 - explain that and I'm not sure why I did but
hopefully that was helpful.
05:56 - So, the reason why we really need to be
comfortable with this
06:01 - is because as we start to write
instructions to draw to the screen,
06:05 - the way we're going to say, hey,
put a rectangle here
06:08 - at this (x, y) location with this width in
pixels with this height in pixels.
06:13 - Draw a line from this (x, y) to this
(x, y) location.
06:16 - So, this idea of being comfortable with
an x axis, a y axis,
06:19 - and this kind of scale of pixels is important to
realize.
06:22 - Now, let's take this, I have an eraser somewhere.
06:25 - Let's take this a few steps further. Now that we're
comfortable with our
06:30 - coordinate system, let's start to understand how
we might write an
06:35 - instruction, right, we want to draw to
the screen.
06:38 - How might we write an instruction to draw
to the screen? So, let's start with
06:43 - something a little different than I
expected.
06:47 - That's gonna be shocking to you, I going to start with a
line
06:50 - instead of a rectangle. A rectangle is often the first example but let's start with a line. So, let's say
06:55 - here is our window and the only other thing
about a window, we need to define,
07:00 - any window we need to define a width and
height. So,
07:03 - let's say, I think most of the Processing
examples
07:06 - tend to start with width of 640 pixels
07:10 - and height 360 pixels. This is drawn relatively
to scale.
07:14 - So. that's all another you wanna realize.
If this is (0, 0) in the top left,
07:19 - what is this pixel in the middle? It would
be
07:23 - half way to 640 which we could do that math
in our head
07:26 - math 320. Halfway
07:30 - right down with 360 at the bottom, comma
180.
07:33 - Right, so, this is what we need to start
getting used to, this idea scale we're
07:37 - not thinking of, well
07:38 - it's two meters to the wall or three feet
this way.
07:41 - We're always going to be thinking in pixels and generally,
07:44 - you know, what are we talking about? Something 
that's full screen which is like 1920 by 1080
07:48 - or is it a small window 200 by 200.
It really depends. Am I making a print,
07:52 - an instilation, a little game for the
web?
07:55 - What what type of scale? We're working generally
in this scale.
07:58 - Okay so, let's just say that what we want
to do
08:03 - is we decided we could design a
little picture
08:06 - by making a bunch of lines. You know, maybe
the lines are like this.
08:10 - We're gonna make a face
with a nose.
08:15 - So, we could imagine that what if we could draw
all these lines on the screen
08:19 - we could create this pattern of this
08:22 - of this very serene face. So, we need to
understand,
08:27 - what does it mean to write an
instruction to draw a line
08:31 - on the screen? And let actually just even do,
08:34 - let's just do this. I'm going to arbitrarily
make something up.
08:38 - I'm drawing little circles here to
indicate the beginning
08:43 - and end of the line. So,
08:46 - I don't have anyone to talk to here but you're, kinda, if you're watching this
08:50 - still, somehow, you're
thinking along with me.
08:53 - What do we need to
define how to draw a line?
08:57 - What we're looking for is how to write
the instruction
09:00 - to draw a line. Once we figure that
out, we're gonna maybe understand how to
09:04 - write the instruction to draw a rectangle,
to draw a circle, to draw a curve,
09:08 - to draw a polygon. All sorts of elaborate shapes
and designs that we might want make.
09:12 - But with the line, you might say hey, a line is
09:17 - a bunch of pixels between 
point A and point B.
09:21 - We can call this point A, we can call this
point B. What do we need to define
09:26 - each of those points?
09:27 - An (x, y). We might say this is
09:30 - (x1, y1) and this
09:32 - (x2, y2), right? So, to draw a line
we might say,
09:36 - in English we might say, "draw a line
09:39 - between" and here we can, say let's
09:43 - make up some numbers. Here, maybe this is
about 100, 200, 300, 400.
09:46 - Maybe this is about pixel 100 and this is about pixel 50.
09:50 - "Draw a line between (100, 50) to"
09:53 - Maybe this is, like, pixel 600
09:57 - and this is pixel 250. I'm kind of making
10:01 - this up. "To (600, 250)"
10:06 - Right, this how you would write that
English. "Draw a line
10:10 - between (100, 50) to (600, 250)".
10:13 - We draw that that line. How do we write
this
10:17 - in code? We don't know! This is where
10:21 - learning to program comes in. One of the things we
have to learn is syntax.
10:25 - So, while we kind of all have a generic
understanding the syntax of the
10:29 - English language or whatever language
you might speak in,
10:33 - you're not familiar with the
syntax of Processing.
10:36 - So, I'll show you what it is. This is the
syntax
10:40 - "line 100
10:44 - comma 50 comma 600
10:48 - comma 250" So, here you go.
10:51 - This is our first line of code
10:54 - that we are ever writing in our
entire lives,
10:57 - for dramatic effect. Were saying line
parentheses a number comma
11:02 - another number comma another number comma
another number parentheses and semicolon.
11:06 - And in fact, this is where we begin.
Everything that we're going to write
11:12 - in this first beginning set
of videos,
11:16 - I'm forgetting that the camera is there. Hello! 
Has this format.
11:21 - It has, what we're gonna say is, a function
name,
11:24 - can you see that? Yes.
Followed by a parentheses,
11:29 - followed by some set of arguments. We're going to call these
11:33 - arguments which are values separated by
commas.
11:38 - Ending with a parentheses and ending
with a semicolon.
11:42 - What does this mean exactly?
11:45 - You can think of this as a command for
now.
11:48 - Truly, it's a function or a method or a
procedure. There's lots of different words for this.
11:53 - Function, I think, will be the word we use
continuously. But, we can think of this as a command. I command you
11:59 - to draw a line. Arguments are the
parameters
12:03 - that define how we're gonna execute that command.
12:06 - If I'm trying to program you, I could
say, "walk" or
12:09 - i could say, "walk fast" or I could say, "walk to this location".
12:13 - "Fast" or "this location", those are arguments to the
command, the function, walk.
12:18 - So, everything we write and the first ones
we're going to learn
12:21 - are like rectangle, ellipse,
12:26 - we just did line already,
12:29 - and a point. So, this, I think, is a nice, easy
place for us to start.
12:33 - How do we define a rectangle? How do we
define an ellipse?
12:37 - How do we define a line? How do we define
a point? What are the arguments for each
12:41 - one of those?
12:42 - We can then draw rectangles, ellipses,
lines, points. So,
12:45 - what I would suggest to you, here your
exercise for the end of this video,
12:49 - what you should do with come up with
some design that
12:52 - you would just draw with pencil and
paper, if you've got graph paper, fantastic.
12:57 - Draw that design. Make it simple. Only use
rectangles, circle, ellipses,
13:01 - circles, lines, and points,
13:04 - and then try to guess, what would the
instructions look like with this kind of
13:10 - syntax. What arguments
make sense for drawing a rectangle?
13:14 - Hint: The location, width, and height. What arguments
make sense for an ellipse?
13:19 - For a line? For a point? Try to come up with
something and in the next video we're gonna starting seeing the
13:23 - answers to some of these questions, we're gonna 
start putting this code into Processing,
13:27 - executing it, and seeing our first programs
run. I don't know-
13:31 - I forgot to set a timer so i dont know how long
this was but i was hoping it's just about five or
13:34 - six minutes.
13:35 - Then you're probably looking down and it's like 20 minuts long or something. Anyway, I'll see you in the next
13:40 - video if you choose to watch, which is
totally reasonable
13:44 - you if don't, I would completely understand, okay?
Thank you!