00:00 - hello and welcome to a coding challenge
00:03 - in this coding challenge I am going to
00:04 - attempt to make a 2d water simulation
00:07 - now you might be asking how are you
00:09 - going to do so so this is actually I
00:11 - wrote this code not I didn't invent this
00:13 - algorithm but I wrote this code it's got
00:15 - to be at least 10 years ago this is one
00:16 - of the first things this essay on how to
00:20 - create this algorithm for creating 2d
00:22 - water ripples has been on the internet
00:24 - for a really long time in fact it's not
00:26 - on the internet anymore
00:27 - this was the URL and this URL hugo dot
00:32 - elias it doesn't go anywhere but
00:35 - thankfully the Internet Archive and I
00:38 - don't know who this person is who wrote
00:39 - this essay thank you hello if you're out
00:41 - there let's get in touch write in the
00:44 - comments but this is a really fun
00:46 - algorithm and it works it's very if you
00:49 - if you're looking for some background
00:50 - for it you want to know a little bit
00:52 - about how pixels work two-dimensional
00:54 - arrays maybe cellular automata this idea
00:57 - of a grid of cells with States I've had
00:59 - a bunch of videos that I made related to
01:01 - how this algorithm works that I will
01:02 - link to in this video's description
01:03 - excuse me
01:04 - but what I'm going to attempt to do in
01:06 - this video is just read this webpage and
01:10 - write the code that falls along exactly
01:12 - what it's doing and see if we can get
01:14 - the result that is on that it's
01:15 - described here to create 2d water
01:18 - ripples so let's just get started I'm
01:20 - all eyes for Hoffman have to read this
01:22 - out loud ok blah blah blah
01:23 - narrative narrative narrative narrative
01:25 - narrative so firstly you'll need two
01:27 - arrays of words both integers okay so
01:31 - let's do that
01:32 - so let me go open up processing
01:35 - processing I always feel I have to say
01:37 - this is a programming environment built
01:39 - on top of java more information at
01:41 - processing org download this if you want
01:43 - to follow along and I will create a
01:45 - JavaScript version of this that runs in
01:47 - the browser as well when I polish the
01:49 - code all right so let's set void setup
01:53 - void draw these are the sort of basic
01:56 - functions to control the flow of the
01:58 - program in processing and I'm going to
02:00 - say I'm going to make two 2-dimensional
02:05 - I'm just going to say like 100 by 100
02:07 - just arbitrarily right now let's
02:09 - actually do a 200 by 200 and I'm gonna
02:13 - I'm gonna say water one water to because
02:16 - I don't know what those are could be
02:17 - used for yet look at this and like I'm
02:20 - gonna say size 200 200 okay so I have a
02:23 - window that is 200 by 200 pixels and I
02:27 - have this these two men Tori's and I bet
02:30 - you could write like a super-fast crazy
02:31 - version of this with shaders or
02:33 - something so maybe you're watching this
02:35 - you're gonna want to do that later but
02:36 - let's try to do this basically just
02:37 - follow along okay back to here
02:39 - that's right these arrays will hold the
02:42 - state of the water one hold the current
02:44 - state the other holds the state from the
02:45 - previous frame so let's actually call
02:47 - this current and previous oh why can't
02:52 - those have the same number of letters in
02:53 - them no preview play to you so this is
02:56 - gonna be current and play view whatever
02:59 - no that bothers me more previous okay
03:02 - it's important you have two arrays since
03:04 - you need to know how the water has
03:05 - changed since the last frame buffer -
03:06 - but for one buffer - I could call them
03:08 - buffer one buffer - anyway data from the
03:09 - previous frame blah blah
03:11 - damping some integer between 0 & 1 so we
03:14 - need some some so we need to have a
03:16 - damping let's try 0.9 so the beginning
03:20 - loop what I need to do well first I need
03:24 - to I need I need to fill those arrays
03:26 - with some values strengthen matters I
03:28 - think they're gonna get filled by
03:29 - default with with zeros and I also want
03:35 - to I think I want to keep track of the
03:36 - columns and rows in a variable oh that
03:43 - didn't work the way I wanted it to I
03:46 - lost my ability to type oh that's right
03:49 - all right there we go
03:54 - for every knot so let's this is begin
03:56 - loop so this is the it boy this
03:58 - background is making hard for you to see
03:59 - the algorithm but for every non edge
04:01 - element so let's do that for every non
04:03 - edge element what does that mean for int
04:06 - X x equals 1 well let's actually use I
04:12 - and J I equals 1 I is less than
04:17 - columns minus 1 I plus plus that is a
04:21 - way of looping through every non edge
04:23 - element and I'm gonna do the same thing
04:25 - with j j is less than rows minus 1 and a
04:29 - j plus plus alright and now what do I do
04:38 - let's just copy paste this and say all
04:45 - right so what this really means here is
04:47 - this is saying current the current X Y
04:53 - which is really current I J is equal to
04:58 - the sum I mean you can see these are a
04:59 - bunch of neighbors X minus 1 X plus 1 y
05:02 - plus 1 Y minus 1
05:04 - what this is really doing if I come over
05:06 - here to the whiteboard you'll have to
05:07 - excuse this I'm doing some tutorials
05:08 - about tensorflow death I didn't want to
05:10 - race that so that's still here in this
05:12 - coding challenge basically if this is my
05:18 - current IJ I want the new value that
05:22 - goes in this i J to be a function of its
05:25 - value as well as its neighbors to the
05:27 - right to the top to the left and the
05:29 - bottom so that's what's happening here
05:30 - so I'm gonna go and I'm going to say
05:34 - equals previous X minus 1 y plus
05:42 - previous oh it's not X I'm using I and J
05:45 - which now I regret making that decision
05:48 - all right I J it's all plus right now
05:55 - let me go back here
05:57 - wait these are being or these being
06:01 - multiplied by each other this is weird
06:03 - where are the pluses I sort of assumed
06:07 - this was all being added together right
06:10 - it doesn't actually say let me see does
06:15 - it describe this yeah I'm pretty sure
06:17 - this is addition
06:19 - well if let's try it it would make sense
06:22 - to add everything together so I minus 1
06:24 - J boy I plus 1 J
06:30 - then plus I J minus one plus I J plus
06:45 - one rule
06:48 - come on indent this the way that I like
06:51 - plus and then so that this whole thing
06:57 - divided by 2 minus previous I J so I
07:07 - think I got that right so basically and
07:12 - let's actually let's just do this so
07:18 - this should be all of it I mean I don't
07:20 - love the way this is Auto formatted but
07:22 - we'll live with it I can actually put
07:24 - this on the next line might make me
07:26 - happier so this is all of these added
07:29 - together previous I minus I minus 1 I
07:32 - plus 1 J minus 1 J plus 1 all added
07:35 - together divided by 2 minus what the
07:38 - current value is so this is kind of like
07:40 - an image processing algorithm you're
07:41 - saying like add up all the things around
07:44 - me and then subtract my value okay now
07:49 - display buffer 2 and swap the buffers
07:52 - wow this is really coding jobs gonna be
07:55 - over soon so what do I what's one way I
07:58 - could display it hmm well let's first
08:01 - set a background and then while I'm
08:04 - doing this I could say load pixels and I
08:09 - could say update pixels right because
08:11 - what I could do is I could use the value
08:14 - of current IJ to be the pixel color yes
08:20 - so I'm gonna say pixels so let me first
08:25 - get an index value index equals I plus J
08:29 - times columns this is an algorithm that
08:33 - I've talked about many many 200 this has
08:36 - to be inside of the loop
08:41 - this particular algorithm I talked about
08:44 - many times and what this algorithm is
08:46 - doing is it's saying like the pixels are
08:48 - actually stored in a one dimensional
08:50 - array but I'm looping through this
08:51 - two-dimensional array so find the right
08:53 - location in the one dimensional array
08:54 - and then give me a color equal to the
08:59 - current I J value okay and update pixels
09:07 - so let's just run this and see if
09:09 - anything happens
09:10 - it's all black that's good because it's
09:13 - all zeros right what if I were to just
09:16 - initialize let me just go through I
09:18 - didn't actually do the swapping part but
09:21 - just just for the sake of argument let
09:24 - me go through and actually write
09:27 - something to initialize that whole array
09:30 - two dimensional array and just say
09:33 - current I equals 100 previous is just V
09:38 - IJ J equals this is a little bit silly
09:41 - what I'm doing but I just want to see
09:42 - that this is working run this again we
09:47 - should see a gray value whoops run this
09:50 - again right we see a gray vow if I do
09:52 - 255 for both of those I'm gonna see
09:56 - white okay so it actually is rendering
09:58 - what's in there and then I forgot
10:00 - something really important which is
10:01 - written in the algorithm swap the
10:03 - buffers because what is now current
10:06 - should be previous for the next frame
10:08 - and then we have a new current which
10:10 - would then become previous for the next
10:11 - frame and so there's a nice swapping
10:13 - algorithm that I can use to do that I
10:14 - can create a two dimension of referenced
10:17 - called that I'm gonna call temporary
10:19 - which should equal current then I'm
10:24 - going to say previous equals oh no a
10:27 - miss a twitchy
10:28 - equals actually yeah previous ten so I
10:34 - missed a previous is now the current
10:36 - right the current is now previous and
10:38 - then I can just reuse that other the
10:41 - previous one for current instead of
10:43 - making it new two dimensional array this
10:44 - is a swapping algorithm I have to store
10:47 - a reference to previous because I'm
10:49 - gonna overwrite what previous is
10:50 - pointing to but then
10:52 - yes that current equal that so this
10:53 - should now still work but I'm not gonna
10:56 - see anything so now hopefully we're
10:59 - gonna see something now here's the thing
11:00 - I kind of I kind of want these to be
11:02 - floats I don't know why they're integers
11:04 - sort of feel like they should be floats
11:07 - because I'm going to do all this like
11:08 - math to them and so this should also be
11:16 - a float and now what if what I'm going
11:21 - to do is I'm going to whenever I click
11:25 - the mouse so let's just see if this
11:28 - works
11:28 - to be lets say previous previous like
11:35 - 100 100 equals 255 and let's see if this
11:46 - is gonna do what I think it's gonna do
11:47 - I'm just thinking thinking I'm thinking
11:49 - I'm thinking like a crazy person while
11:51 - I'm live-streaming does this make sense
11:54 - what I'm doing of whatever let's just
11:56 - run it yeah there we go
11:58 - ooh something happened it's like spread
12:00 - its spread out from the center there mmm
12:02 - what did I get wrong
12:03 - oh if did I forgot about the dampening I
12:07 - forgot about the dampening very
12:09 - important there so where do I do that so
12:12 - now I also need to say current I J I
12:15 - need to dampen it equals current IJ
12:19 - times damping what I call it damping or
12:22 - dampening because I should call it
12:23 - dampening right dampening I'm back that
12:33 - was edited out like a me just like
12:36 - spinning my head around for a while
12:37 - there because I really was not being
12:39 - very careful it this says buffer 2 here
12:42 - this says buffer 1 here and in my code I
12:46 - have previous I'm adding up all the
12:49 - previous dividing that by two and then
12:51 - subtracting out previous but that's not
12:53 - what I want right because we have
12:59 - current
13:01 - and we have previous and so it's
13:06 - different data so I'm taking the
13:09 - neighbors from previous and then
13:12 - subtracting out what's in current so let
13:13 - me fix that let me fix that change that
13:19 - here the dampening is there I added that
13:23 - in while I was debugging maybe you just
13:25 - saw me do that I'm not sure
13:27 - and now aha
13:31 - there we go that looked like a water
13:32 - ripple all right let's let's be a little
13:35 - bit more explicit of all let's um let's
13:37 - just make the dampening zero like really
13:40 - high I'm just curious yeah you can see
13:42 - that ripple kind of going out whoa and
13:44 - bouncing around the edges cool I'm gonna
13:46 - leave it at 0.9 now this is really what
13:49 - I want to do let me make this like 600
13:51 - by 400 let me add mousepressed and by
14:00 - the way the let me put let me I'm gonna
14:03 - take the columns should equal the width
14:06 - I'm gonna put all this the rows should
14:10 - equal the height and I want to
14:15 - initialize I got to do this all after I
14:17 - set the size and now these I can set the
14:25 - the two arrays oh so I want to do all
14:32 - that and setup so that whenever I change
14:33 - the size of the window to the number of
14:35 - columns rows and the kind the two
14:37 - dimensional arrays all change so let's
14:40 - run this and see just see whoops what
14:42 - happened to my oh I commented it out
14:44 - that out so now what I want to do is
14:46 - when I click the mouse I want to find
14:52 - the right spot in the array and I want
14:55 - to say index equals Mouse X plus Mouse Y
14:59 - times rows and me clicking the mouse is
15:03 - like dropping a pebble into the water
15:05 - and so I can say I think I should I put
15:07 - it in previous I
15:08 - it might not matter previous index oh no
15:11 - no no I forgot these are two dimensional
15:13 - arrays already so I can actually just a
15:14 - previous mouse X now it's y equals to 55
15:20 - so as I click and I'm just curious I
15:23 - think it'll actually work the same way
15:25 - if I put current yeah so let's let's use
15:29 - current it kind of makes a little more
15:30 - sense to me
15:30 - let's D let's increase the dampening a
15:33 - bit
15:34 - I mean it's actually decreasing it so
15:36 - the ripples go out a little further I
15:37 - want to see them interact with each
15:38 - other that's pretty cool and so there we
15:41 - go
15:42 - water ripples in processing pixel-based
15:45 - water repulsive and now would be so what
15:47 - oh oh what am I even doing what am I
15:50 - even doing Mouse dragged there we go how
15:56 - lovely look at this wonderful water
15:58 - ripples all rippling around so yeah I
16:01 - think now I've made something that you
16:04 - the viewer could do much more with for
16:06 - example what if you thought about color
16:09 - what if you actually started with an
16:12 - image and then you made the sort of
16:14 - pixels of the image the initial values
16:17 - ah and you could like ripple over those
16:19 - oh I still want to do that I'm not gonna
16:21 - do that I'm gonna let you do that
16:23 - make something with this now this is
16:26 - eventually gonna get really slow and
16:27 - it's probably gonna be really slow into
16:30 - more the big larger the higher the
16:31 - resolution I make and if I'm gonna try
16:33 - to make a JavaScript version of it it's
16:35 - probably going to be really slow due to
16:37 - how slow pixel operations are in html5
16:39 - canvas but I will think about all this
16:41 - stuff I just want you to be aware of
16:42 - that I'm sure that some of you will
16:46 - write in the comments and have some
16:47 - clever ideas how to make this into like
16:49 - a shader or something that's heavily
16:50 - optimized but I'm happy where this is
16:52 - this is two-dimensional water ripples
16:54 - thanks to the Hugo Elias page from many
17:00 - years ago about how to do this algorithm
17:02 - in two dimensions okay thanks for
17:05 - watching goodbye
17:07 - [Music]