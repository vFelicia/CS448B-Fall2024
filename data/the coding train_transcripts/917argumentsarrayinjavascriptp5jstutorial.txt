00:00 - Hello and welcome to another p5.js
javascript video tutorial thingy mabob
00:05 - thing that I'm making. In this tutorial I'm
going to cover something called the
00:09 - arguments array which exists
mysteriously in JavaScript perhaps
00:13 - without you even knowing that it is there
00:15 - what you can use it for and this idea of
overloading a function or overloading a
00:20 - constructor and how do you have optional
arguments to a function all this stuff.
00:24 - Okay what am I talking about first of all,
so let's just say today is a nice sunny
00:29 - warm beautiful day it rained last night a
rainbow came out and you just sat at
00:33 - your computer and decided I want to
program my own function called sum, and
00:38 - what sum is going to do is it's going
to take two arguments a and b; and
00:44 - it's going to say return (a+b). So
it's just going to make a sum of
00:48 - whatever things I pass to it, so I
could then say, here in setup
00:53 - I could say, var c equals.. aah you know c
equal or whatever.. value equals the sum
01:00 - of 5 and 15 and if I say console.log(val);
01:05 - we should see then if I go here, I should
see 20 and I could say something like
01:09 - sum(2, 7) and I'm going to get 9 
or sum(-3, 7) and I'm
01:17 - going to get 4. So this function works;
but what if I were to say this: sum(4)
01:22 - Not a Number (NaN)
01:25 - Well let's say I wanted to be able to
actually have it return just the
01:30 - number four.
01:31 - How could I have it do that? It's getting
not a number because what is the value
01:35 - of the b in this case? If I were to say
console.log(b) and run this again
01:43 - you're going to see the value of b is
undefined
01:47 - another.. another way that I can
consider undefined, undefined if I were
01:53 - to ask is undefined true or false,
01:55 - undefined is actually false so something
that I could do for example is just say
02:00 - something like if b
02:05 - return a + b, otherwise return a. So in
this case I now have a function that can
02:18 - perform differently based on the number
of arguments it gets, right? As long as it
02:23 - gets a second argument return two of
those two numbers together if it doesn't
02:28 - get the second argument right?
02:30 - if b is false simply return a so in
this case now if I go back to the
02:35 - browser and I say sum(4, 5)
02:39 - I should get nine but if I say sum(4)
I'll just get four so we have now
02:43 - written a function that can optionally
have a second argument very very basic
02:48 - idea here
02:49 - now let's take this a few steps further
what if I just said sum() with no arguments
02:56 - now I've got undefined again so in this
case I could actually say if a.. if a and
03:05 - b else if.. then.. wait.. I was going to say if b
that means there has to be an a right?
03:15 - return a + b, else if a return a, else
return 0. Ooh I made this sort of like messy
03:24 - and awkward and weird but you can start
to sort of see what the possibilities
03:27 - are so now I'm kind of checking if I get
two arguments return some of both of
03:31 - those, if I have.. if I have one argument
return just that one argument if I have
03:36 - no argument
03:37 - return the value zero. Let's just at least
make sure that works, right? So I could
03:42 - say sum of four and five, I get nine;
sum of four, I get four; sum with nothing
03:47 - I get 0. So great, so this is working but
what if I now want to say sum(4, 6, 8)?
03:54 - I still only get 10, right?
03:57 - Eight isn't involved, well guess what
anytime you call a function in
04:02 - JavaScript the arguments to that
function 4, 6, 8
04:09 - those things get placed into what..?
an array, an array called arguments. You could
04:17 - just say the word arguments and suddenly
you have everything in an array. Let me
04:20 - show you what I mean by that,
04:22 - if I go back to the code and 
I just say here
04:26 - I say console.log(arguments) and I
say sum.. oops.. sum(4, 6, 8) you can see
04:39 - what is the value of arguments?
04:41 - It's an array 4 , 6 , 8 so you know what
I could actually do in the case of this
04:46 - function I can write a function called
sum, I don't even have to name any of
04:50 - the arguments here. I can say there is a
value at 0
04:55 - I can then go through the
length of the array
04:58 - i starts at zero; i goes all the way up
through the.. all the arguments; val
05:02 - plus equals arguments index i 
and then return val.
05:07 - this is now a function that can take any
amount of things you've.. any number of
05:14 - arguments, 0 arguments, 5 arguments, 10
arguments, 20 arguments and it can loop
05:19 - through and add them all together
05:22 - so now here I could say things like sum(5)
and I have a woops..
05:29 - sorry. I think I didn't reload it, sum(5)
05:36 - I have the number five; sum(5,6)
05:39 - I have the number 11;
sum(5, 3, 2, 5, 1, 10, 11, -5, 3, 33)
05:50 - 68!! Somebody confirm for me that that
number is correct.
05:53 - It's going to take any number of
arguments and loop through all of them
05:57 - so you can think of all sorts of
interesting possibilities that this
06:00 - might open up for you in how you write a
function.
06:03 - I could also name those arguments too as
well so like for example
06:06 - I don't know why I want to do this 
but I could
06:09 - name the first argument and I could also
say that, return val + a
06:14 - so in this case this is a little bit
weird but if i say sum(1, 2) it's
06:19 - going to add one and two and then add 1
to it again so I would get the number 4.
06:22 - A little bit silly but you can see
that you can both use that arguments'
06:27 - array and you can also name
06:29 - optionally name those arguments coming
in so there's a lot of possibilities of
06:32 - things you can do here.
06:34 - Now let me make this even.. just to make
this even more a little bit stranger
06:38 - what if i want my function let's say I
were to create an array.
06:46 - So I have an array that has the values 
[5, 3, 6] in it. So I know I could say
06:53 - (5, 3, 6) with sum and i'm going to get 19
06:57 - did I take.. did I leave that weird
extra plus a thing in there?
07:00 - I want to take that out and run this
again and I'm gonna make that array
07:04 - I'm going to do this 14, right? So what
what if I.. what if I also wanted to be
07:09 - able to say sum(array)? In this case look
what it did something crazy happened
07:14 - because it actually tried to add 0 with
the array but then it tried to make the
07:20 - array a string and it concatenated
together
07:22 - JavaScript just tried to figure
something out but this isn't what I want
07:25 - I want that if you pass this function
an array as its argument that you're
07:30 - going to add the elements of that array
07:32 - so how would I do that? Well what I want
to do is I want to check
07:36 - I could put this back in, a, I could say
if a is an instance of array and I think
07:45 - capital or like this so this is a kind
of keyword in JavaScript, instanceof
07:51 - that can determine what kind of argument
you passed in
07:55 - so you could say like oh well if the
function receives a string as its argument
07:59 - it should act this way but if it
receives a number as its argument
08:02 - it should act this way
08:04 - so if a is an instance of array, and I'm
actually going to call this
08:08 - arr, then what I want to do is do exactly
this algorithm but instead of using the
08:17 - arguments array
08:18 - I just want to use that actual array so
now I'm going to say
08:22 - array.length and add all that up,
right?
08:26 - so if you get an array loop through that
array and return the sum of everything
08:31 - in that array, if you don't get an array
then loop through the.. because it's..
08:35 - there's just a sequence of numbers then
use the arguments array so now I have
08:39 - like all sorts of possibilities here for
how this function could perform
08:43 - so now I can say let me have sum.., it
still works if I give it five three and six
08:50 - now if I make an array [5, 3, 6] and I
say sum of that array
08:56 - I should also get that same number and
if I were to say array dot 4 equals
09:01 - negative one and look at that array..
09:06 - Whoops I have an undefined, array[3]
equals 2 and look at that array again
09:12 - and let me clear that, clear it,
look at that.. look at the array and now if I
09:17 - say sum(array) I should still get..
I should get 15 which is right
09:21 - fourteen plus two is sixteen minus one is 15
so now I have this function which can
09:25 - both receive an array.. now
09:26 - unfortunately I can't do this, right?
09:30 - I would have to write it.. as an exercise
for yourself if you want a tricky exercise
09:33 - how could you now write this function so
that it can have mixed arrays and
09:37 - regular numbers and still add all those
things together
09:42 - Ok... yes
09:45 - so in the chat some people are saying I
could use the apply function up and
09:49 - other types of things to like put the
array into the arguments array and
09:52 - that's a great suggestion maybe I'll
cover that in a separate video, but right now
09:55 - I just want to look at different ways
that you can have flexible arguments for
09:59 - a function and this often comes up in
the case of making objects like a
10:04 - particle object. So let's take this a
little bit further and let's just say
10:07 - that this is going to be a program and
I'm just going to take this and
10:11 - comment it out for right now and I'm
gonna say let's say I have a.. I'm writing
10:15 - a program with some sort of particle
object and the whole part of this
10:22 - particle object is that it has a
position which is a vector and I'm gonna
10:27 - make that vector width/2, height/2
10:31 - and then I'm going to have a function
called show which..
10:35 - what does that function do? It draws a circle on
the screen at that vector's x and y and
10:43 - maybe fill that 255 and I'm going to
stay here.. I'm going to say var p is a
10:51 - new particle and then p.show
10:56 - now, you can see I run this program and I
get that circle appearing in the center
11:02 - of the window
11:03 - now let's think about all the possible
ways I might want to make a particle
11:07 - for example I might want to make.. and
let's do it.. let's do this differently
11:10 - now, let's.. let's say there's an array
called particles and what I'm gonna do
11:16 - is I'm gonna say particles index 0 is a
new particle and then I'm going to loop
11:21 - through and I'm just going to call show
and all the particles in that array so
11:29 - this is essentially the same program but
the reason why I want to show this to
11:33 - you, right?
11:34 - is that I want to be able to say things
like this, well particles index one
11:39 - what if I could make a particle this way?
what if I could say this?
11:48 - and what if I could say particles index
2 equals a new particle with that
11:57 - particular vector?
11:59 - what if I were to say this, particles
index 3 equals equals a new particle
12:08 - whoops let's make this (150,100).. 
(100,150). Now I'm not so sure I really want
12:17 - all of these but you could imagine an
object
12:20 - you might be able to, in your code you
might want to make particles and
12:23 - sometimes you make a particle with no
object no arguments and always puts it
12:27 - in a default location or you could
specify the location as two values an x
12:32 - and y or you could just pass in a vector
it would put the particle at that vector
12:36 - or maybe for some reason you are getting
data from a text file you're reading
12:40 - in strings
12:41 - and what if you give it two numbers
separated by a comma how would you deal
12:45 - with it then?
12:45 - This is the kind of scenario that can
come up in many things that you might
12:49 - want to program.
12:50 - So let's see if we can get all these
particles to appear on the screen
12:53 - so one thing that I might do here first
of all is give it some
12:58 - let's give it two arguments an x and y
so one thing we can do is say this and
13:07 - actually I'm gonna.. I'm going to change
it from having a position vector
13:12 - just to give it.. just right now I'm going
to change it to just having an x and y. So one
13:17 - thing I could actually do that you'll
see is am gonna say this.x equals x or
13:21 - 100, this.y equals y or 100. This would
cover me for these first two cases, right?
13:31 - I'm basically saying I want to take the
value that comes in or some default
13:35 - value if it's false
13:37 - and in this case it would be false because it 
would be undefined and no value would come in
13:41 - so let's uh let's actually say I want to
make the particle at 150, 50 and we
13:46 - could see.. we should be able.. we should
see two particles now, right?
13:51 - so this is
13:52 - and let me give all the.. ok it
doesn't really matter the point is you
13:56 - can see now when the particle gets two
arguments coming in it..
14:02 - it uses those two arguments like 
150,50; when it doesn't get those
14:06 - coming in to use 100,100
14:08 - so this is 100,100 and this is wh..
50,150 thats that second particle
14:16 - ok so those two cases are covered
14:19 - now what about this third case what if
I'm passing in a vector? So one thing I
14:24 - can do is I can say okay well actually
right here I could say if this. x is an
14:31 - instance of a p5.vector object then
this.x equals x.x and this.y
14:38 - equals x.y
14:40 - now this is a little bit weird because
I'm sort of stuck in this place of I
14:45 - named that first argument x so now x is
kind of this vector I still have to call
14:50 - it x, so I might actually want to just
use more generic names like a and b
14:56 - in this case so I can say if.. and I'm not
saying if this.x, I'm saying if a is an
15:01 - instance of p5.Vector do this otherwise
go back to this other idea
15:08 - so now I'm checking, I've had two three
possibilities, one is I've gotten a
15:12 - vector or another possibility I got
nothing
15:15 - or I got two separate values and we can
run this again you can see now I have
15:20 - three of them, all three of those work
and I have one last possibility which is
15:24 - this string so I can also say else if a
is an instance of string I guess?
15:33 - I forgot there's a sort of funny thing with
strings that I forgot about because this
15:39 - if a the instance of string is not
actually checking it a is just text but
15:43 - if it's an actual like fully formed
string object in JavaScript and let me
15:48 - just show you this, a little bit of it
aside but it's kind of worth it since it
15:51 - might come up
15:52 - let's say I create a var s equals test
15:56 - now if I say s instanceof String
16:00 - you're going to actually see that that
gives me false but if I were to say s
16:03 - is a new string with the text 'test' in it,
right? it's actually like a whole string
16:10 - object now and this will actually return
true but in most cases I'm just going to
16:16 - be in the land of saying s equals test
16:20 - whoops something like this so another
function that I can use in JavaScript is
16:24 - typeof() and I could say typeof(s) and
I'll actually get the word string back
16:31 - and so I think in this case I could say
else if typeof(a) equals string
16:41 - oops.. then now let's see if that works
I'm gonna run this and you can see that
16:45 - came through
16:47 - so since that came through what I need
to do now is say I can use like
16:55 - a.split by a comma and then I can say 
this.x equals Number
17:02 - nums index 0 and this.y equals Number
17:08 - nums index one. So split() takes something
takes the string.. so let me do this
17:14 - actually
17:15 - so let's say s is 100.. the numbers in a
string 100,150 and what I want to do
17:23 - is I want to say nums equals s.split
by a comma ahh.. s.split by a comma
17:29 - so now nums is just an array with two
strings in it and so I could say nums
17:33 - index zero but that's actually not the number
one hundred it's the string 100 but..
17:39 - and there's lots of ways I could probably
convert it but one way is I could just
17:42 - do this
17:43 - convert it to a number num..whoops not
numbers number and you can see now I
17:48 - have the value 100 so I'm just doing
that in the code here I'm saying Ah if I
17:52 - happen to get a string split it up by the ,
then convert those two numbers and we
17:57 - should see then another particle at ahh..
18:01 - 100,150. So if I now run this again we
can see now I have four particles so we've
18:06 - now written a constructor function
that optionally it takes two arguments,
18:12 - you could give it no arguments
18:13 - you could give it two numbers, you could
give it a vector, you could give it a
18:16 - string and it's going to figure out how
to fill in the x and y based on what it
18:21 - gets so this is one just kind of small
instance of that but there's lots of
18:26 - other scenarios where this could come up
where you want to write a function to
18:30 - arbitrarily handle a certain number of
arguments of different types. In the
18:34 - incidentally if you were doing this in
Processing or in Java you would just write
18:38 - multiple copies of the function each
with different arguments and then handle
18:42 - the.. those arguments in that but in
JavaScript since the arguments don't
18:46 - have a type, a type is not part of this
signature of that function of that
18:50 - method you have to handle them with an
if statement by having sort of optional
18:54 - flexible arguments
18:56 - ok hopefully you found this helpful and
you learned something about what the
18:58 - arguments array and JavaScript does and
how to write a function or a constructor
19:02 - function that has flexible different
kinds of arguments and different numbers
19:05 - of arguments. 
Thanks for watching, goodbye.
19:07 - Subtitles by the Amara.org community