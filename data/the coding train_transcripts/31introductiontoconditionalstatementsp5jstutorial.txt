00:02 - Hello again.
00:02 - So this video, I am now starting
a new little section of videos
00:06 - about working with code and
programming and all that fun
00:08 - stuff in p5.js.
00:10 - And the topic here is
conditional statements.
00:13 - Conditional statements, Boolean
expressions, true or false,
00:16 - if this, then that, if this,
then that, otherwise this.
00:20 - How does a program make
decisions while it's running?
00:23 - So in the previous
videos when we started
00:24 - working with variables,
the topic was kind of, OK,
00:27 - how do we store information?
00:29 - And that information
changes over time.
00:31 - Now we start to think
about this new question,
00:33 - how can a program take
different paths, right?
00:36 - The only path we
really have right
00:38 - now is starting and setup.
00:40 - That's the first
thing that happens.
00:45 - Moving on to draw and
looping over and over again,
00:48 - draw repeats over
and over again.
00:50 - We saw that you have
these event functions.
00:53 - There was also the event
function, mousepressed.
00:57 - So if you clicked
the mouse, the code
00:59 - would take a break from draw,
go execute something down here,
01:02 - and continue and draw again.
01:03 - But now I want to
ask the question,
01:05 - how can the code execute
differently each time
01:08 - through draw?
01:09 - So one time through draw, it
might draw a purple circle.
01:13 - And the next time through draw,
it might draw a pink circle.
01:15 - And in fact, this I would like
to be the first example that I
01:19 - make in this particular video.
01:21 - I don't know if I can get
purple and pink just right,
01:23 - but I want to have
a circle that's
01:25 - drawn with two different
colors based on something
01:28 - that the user is doing.
01:29 - Perhaps where the
user is positioning
01:31 - the mouse would be a
good place to start.
01:34 - So in order to do
this, we need to learn
01:36 - about conditional logic.
01:43 - Another sort of term we
can think of in this case
01:45 - is Boolean expression.
01:48 - Boolean logic from
the mathematician
01:51 - logician George Boolos, which
I'm probably not getting right.
01:56 - Internet will
correct me, I assume.
01:59 - Dub this over, or put
some sort of popup thing.
02:01 - I don't know, whatever
fancy thing that works here.
02:04 - So Boolean-- the word Boolean
indicates that something
02:07 - is true or false.
02:10 - This is often also thought
of as 1 or 0, 0 being false,
02:15 - 1 being true.
02:16 - And what I'm going to
show you how to write
02:19 - is an expression that
says if something is true,
02:22 - do this code.
02:24 - If something is not
true, don't do this code.
02:27 - So let's think about
how the kinds of things,
02:30 - the kinds of Boolean
expressions that might
02:33 - evaluate to true or false.
02:37 - So I'm going to give you a
Boolean expression right now.
02:40 - And in your mind,
you will think about
02:41 - whether it's true or false.
02:43 - And hopefully, this will
be a rather easy one.
02:45 - 5 is greater than 6.
02:50 - This is not true.
02:52 - This evaluates to false.
02:56 - Here's another one.
02:58 - 7 is less than 210.
03:03 - This is true.
03:05 - So you can see I'm starting
by creating these Boolean
03:08 - expressions using something
called a relational operator.
03:13 - Relational operator, it's an
operator that is, in this case,
03:18 - is going to compare two numbers.
03:20 - There's lots of ways
eventually in code
03:23 - that you'll see
that you can have
03:24 - something that's true or false.
03:26 - But a good way to start
is just comparing numbers.
03:29 - Are these numbers equal?
03:30 - Is one number bigger
than the other one?
03:32 - Or is one number less
than the other one?
03:34 - So now that we have
this idea of how
03:37 - we can create a
Boolean expression,
03:39 - a mathematical operation that
evaluates to either only two
03:42 - answers--
03:43 - true or false-- we
can learn the syntax
03:46 - for writing that
statement into our code.
03:48 - And this is how
the syntax works.
03:50 - If-- we've got a word in
the English language, if,
03:54 - that means exactly what it says.
03:56 - If, some Boolean expression
that is inside parentheses.
04:02 - This is our Boolean expression--
04:05 - if Boolean expression open curly
bracket, close curly bracket.
04:10 - So we've created
another block of code.
04:12 - This is a block of code
with a beginning or an end,
04:15 - just like setup and draw our
blocks of code with beginning
04:18 - and ends.
04:19 - And the key thing here is
if this Boolean expression
04:23 - evaluates to true, then the
code here should be executed.
04:28 - If this Boolean expression
evaluates to false,
04:31 - then the code here
should not be executed.
04:34 - So let's say I write something
like if 5 is greater than 6,
04:40 - fill 255, 0, 0.
04:45 - So only ever if 5
is greater than 6,
04:47 - should you set a red color.
04:49 - Now if you're thinking about
this piece of code here,
04:52 - you're realizing
what I've created
04:54 - in this scenario was kind
of ridiculous and useless,
04:57 - in a way.
04:57 - Like 5-- no matter
how much we try
05:00 - over and over and
over again, 5 is never
05:02 - going to be greater
than 6, ever.
05:04 - Maybe there'll be
another universe,
05:06 - or a parallel universe,
or some other kind
05:08 - of wormhole thing we go through,
and 5 will be greater than 6.
05:11 - But right now, in
this room, where
05:12 - I am under these
very hot lights that
05:14 - are making me feel a
little faint for a second,
05:16 - 5 is not greater than 6.
05:18 - So you can see this while
this is the correct syntax--
05:20 - this is showing
us the idea here--
05:22 - this doesn't really
make any sense.
05:24 - The point of what I'm trying to
show you is that if a variable
05:28 - is part of this
Boolean expression--
05:30 - a variable has different values
at different times of the day
05:32 - and different moments, depending
on what other things are
05:35 - happening in the code--
05:36 - then that variable might
sometimes be greater than 6
05:39 - or might sometimes
not be greater than 6.
05:41 - And so we can change
this expression
05:44 - to say something like if
mouse x is greater than 100.
05:52 - So now as the user
is moving the mouse,
05:54 - it's not greater than 100.
05:55 - It's not greater than 100.
05:56 - It is greater than 100.
05:57 - So this code, even
though it's sitting there
05:59 - in the draw loop--
06:00 - I haven't put it there yet,
but that's where it will live--
06:03 - this code will not
necessarily be executed.
06:05 - In fact, you could
run the program.
06:07 - If the mouse never
goes past 100,
06:08 - that code will never happen.
06:10 - It will just sit there,
never get executed.
06:12 - This is the power of a
conditional statement.
06:15 - So let's go and look, and
put this into our example.
06:18 - And I think that will actually
wrap up this video, just
06:20 - sort of the very, very basics.
06:22 - And there's more
to it than this,
06:23 - but I'll get to that later.
06:27 - OK, so here we are.
06:28 - I a nice, simple example
that I prepared in advance.
06:31 - This is me actually
preparing to make quantities
06:33 - with you in advance.
06:34 - I've got createCanvas up here.
06:36 - And I'm drawing a
circle, so nofill.
06:39 - So what I would like to do now
is add something down here.
06:44 - If mouseX is greater
than-- and let's say 300--
06:48 - which is the middle of
the window, fill 255, 0.
06:54 - Let's try to give ourselves
some purplish color.
06:57 - And we can see this is
what I've added here.
06:59 - This is the syntax.
07:00 - So you can see-- whoops.
07:02 - Let's move over here.
07:04 - You can see a
couple things here.
07:05 - So the Boolean expression
is in between parentheses.
07:08 - The if statement opens
with a curly bracket,
07:10 - ends with a curly bracket.
07:11 - And notice how
fill gets indented.
07:13 - So the indentation has not
changed the way the code runs,
07:16 - but it helps you visually see.
07:18 - You could have a lot
of lines of code.
07:19 - You could have a
lot of things happen
07:21 - within that if statement.
07:22 - So those curly brackets
say this is the code that
07:24 - should be executed.
07:25 - And remember if this evaluates
to false, this doesn't happen.
07:28 - Draw is looping
over and over again.
07:29 - It might be true.
07:30 - It might not be true.
07:31 - So let's run this
and see what we get.
07:34 - This is very exciting.
07:36 - OK, where's my mouse?
07:37 - I don't know.
07:38 - I think it's out at like
50, so we're not there yet.
07:40 - OK.
07:41 - I think it's like
100, 150, down to 200.
07:45 - OK, we're getting there.
07:46 - It's almost there.
07:46 - It's almost there.
07:47 - Ah, yes, we got it!
07:48 - All right.
07:49 - So you can see that as
the mouse gets beyond 300,
07:52 - that circle turns this
purplish pinkish color.
07:54 - When I move the
mouse back, it's off.
07:56 - So this is pretty exciting.
07:57 - And you could think
like, you almost
07:59 - have this sense of like
making a rollover here.
08:02 - I mean, we don't
at all, but you can
08:03 - start to imagine like,
what's that if statement
08:06 - that says if the mouse is
inside the circle, highlight it?
08:11 - So these are the
kinds of things,
08:12 - all of these interface
elements that you
08:14 - might be used to using
on your computer,
08:16 - this is how they work.
08:17 - And I don't know
if I will actually
08:19 - solve this particular
problem in a video.
08:20 - It involves looking up
the distance function
08:23 - because you've got to test
the distance of the mouse
08:25 - from the center of that circle.
08:26 - But that could be
something, if you
08:28 - want a kind of tricky problem to
look at, you might sort of see.
08:33 - Later, I'm going
to definitely get
08:34 - to an example that
uses a rectangle
08:37 - to try to see if the
mouse is within the bounds
08:39 - of the rectangle.
08:40 - I think that's in my
mind of future videos.
08:43 - So there's one other thing
I want to mention, just
08:46 - to kind of make sure this
video kind of wraps itself
08:49 - up and doesn't leave
off any details.
08:51 - I showed you these
relational operators.
08:54 - There are other ones.
08:55 - There is greater
than and equals.
08:59 - There is less than or equals.
09:00 - So in other words, 5 is
greater than or equals 6.
09:05 - This is actually true.
09:07 - No, it's not.
09:09 - I meant to say like--
09:11 - that's not true.
09:12 - 5 is greater than
or equal 5, right?
09:14 - Because it is equal.
09:17 - I was doing so well
with this video,
09:18 - and now I'm kind of losing
my mind here a little bit.
09:20 - So but there are other
relational operators
09:22 - that you could use.
09:23 - These are probably
the most common ones.
09:24 - You're going to get pretty far.
09:25 - And then there's
also double equals.
09:31 - There's a funny distinction
between the double equals
09:34 - and the triple
equals in JavaScript
09:35 - I'm going to leave
out of this video
09:36 - and just use double equals.
09:38 - Because the distinction--
and maybe this is a bad idea.
09:43 - I don't have to rerecord
this or write something
09:45 - in the video's description.
09:46 - But there's a key
sort of thing here.
09:50 - If I want to check this,
if mouseX is equal to 200,
09:59 - I cannot say mouseX e--
10:02 - I cannot use this
as my expression.
10:05 - The reason I cannot use this
as my expression is a single
10:07 - equals means an
assignment operation,
10:10 - meaning I want to assign
the value 200 to mouseX,
10:13 - which is not something
I want to do.
10:14 - mouseX doesn't
even get assigned.
10:16 - It just picks up the
value where the mouse is.
10:18 - So if you want to test if a
variable is equal to something,
10:21 - you need to use
the double equals.
10:23 - And I don't know, maybe when
I get to strings, that's
10:25 - when I'll look at the
distinction between double
10:27 - equals and triple equals.
10:29 - And some might say that
you should actually
10:30 - use the triple equals,
instead of the double equals.
10:33 - I've really gone
off the deep end.
10:34 - If I'd really
thought about this,
10:36 - I wouldn't have mentioned
this in the first place.
10:38 - So these are some things
you could look at,
10:40 - but honestly, this is
generally not such a good idea.
10:43 - Because when are
you really trying
10:45 - to test if the mouse
is on an exact pixel?
10:48 - Generally, you're
looking for ranges.
10:51 - And I think what you
could get started
10:52 - with is take something you made
earlier, where something is
10:56 - growing or something is
moving, according to the mouse,
10:58 - and see if you can have a color
change, or a shape change,
11:01 - or something you could do
that's kind of interesting.
11:03 - Here's an exercise for you,
is have this shape change,
11:07 - have it be a
circle, or a square,
11:08 - or possibly even as a-- because
you have three possibilities--
11:11 - or a triangle,
depending on where
11:12 - the mouseX is or the mouseY is.
11:14 - That's something
you could try doing
11:15 - as a quick little
exercise after this video.
11:17 - OK, this was 11
minutes and 20 seconds,
11:21 - which is I'm trying to
keep these to 10 minutes,
11:23 - so I almost sort of got that.
11:24 - And I'm going to hit stop
now and record the next one.
11:28 - The stop button's over here.
11:29 - OK.