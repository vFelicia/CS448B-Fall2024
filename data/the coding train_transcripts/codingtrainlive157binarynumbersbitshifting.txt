00:08 - good morning I think I am live do you
00:11 - hear me
00:12 - do you hear the soft sounds of the
00:15 - ukulele in the background I'm wondering
00:17 - because when I tested oh no you're not
00:22 - hearing the ukulele oh definitely not
00:24 - okay now I know what's wrong my voice is
00:30 - coming through but
00:33 - [Music]
00:35 - hold on I will fix this this is very
00:37 - important this is quite possibly the
00:40 - most important thing of the day and here
00:49 - we go
00:57 - Oh
01:01 - I know you're just hearing it through my
01:02 - mic sorry I should have fixed this
01:04 - before I started this is terrible
01:07 - somebody eventually when this gets
01:09 - published put in the cup pinned I'll put
01:14 - a pin comment for the time code where
01:15 - this actually starts we just see
01:17 - something here no way here we go
01:24 - no no
01:28 - [Music]
01:31 - yes okay there we go monitor through
01:36 - the output device
01:42 - I just start this over hold on gonna hit
01:44 - stop and fix this people can't hear me
01:48 - either
01:49 - hold on voice alright hold on I'm
02:00 - timeout I'm stopping this oh you hear me
02:04 - okay
02:10 - like half asleep but I starts this live
02:13 - stream we can hear me okay okay but all
02:16 - I just want to fix this sound thing
02:26 - there we go I fixed it
02:28 - just forget how to do this okay let's
02:32 - start over
02:33 - hello good morning welcome to the coding
02:38 - train with me Daniel Schiffman so I'm a
02:45 - little bit half-asleep today I don't
02:47 - usually stream in the morning it's not
02:49 - even really the morning frankly it's
02:50 - 10:40 I've been awake for like at least
02:52 - like four and a half hours I get up very
02:54 - early but it's been a very long week I
03:00 - probably should like stream on Monday
03:03 - not that my weekends are so restful but
03:06 - I'm excited to be here I am ready
03:09 - I've got like a scratchy throat like a
03:11 - cold kind of it's getting close like
03:14 - chilly in New York it's like it was like
03:16 - the summer then it was sort of the fall
03:18 - for like one day it's interacting so but
03:24 - I'm excited to be here and do some
03:26 - coding stuff I want to see if I have
03:28 - anything to cover here
03:34 - Simon is asking if I saw his suggestion
03:37 - yes Simon has given an excellent
03:39 - suggestion for octahedra which is a cube
03:42 - with faces connected up I would
03:44 - definitely like to get to that at some
03:46 - point but I don't know if I'll get to
03:48 - that today I am I'm excited to premiere
03:52 - something wait a second
03:56 - I have to wait till I get a message like
03:59 - I have to create the fake scenario for
04:06 - the thing that I want to premiere wait a
04:09 - second
04:14 - breaking those news breaking news this
04:18 - is not going well
04:19 - how do I turn my brain on there's got to
04:22 - be a way to turn my brain on you know
04:23 - what I think is a way to turn my brain
04:25 - on coding let's just get started so one
04:29 - of the things that I want to do today
04:30 - and let me let me go to seven-segment
04:36 - display actually you know what let's
04:38 - let's take a moment here and go to the
04:41 - coding train website you know what I
04:43 - think the website might be broken cuz
04:45 - it's supposed to show I think a note
04:47 - here when I'm live-streaming
04:49 - it's the most recent livestream that
04:51 - it's showing is for March 14th
04:53 - so Oktoberfest don't want to help fix
04:55 - this on the website that would be a good
04:57 - thing to fix
04:59 - but I want to come here for a second ok
05:06 - so I recently did a coding challenge 7
05:09 - segment display and look at this this
05:13 - has been really successful in my view in
05:16 - the sense that it inspired a lot of
05:18 - creative possibilities one that I really
05:21 - want to look at shoot can I just do a
05:25 - search on Twitter without logging in
05:27 - maybe I can log in as the coding train
05:33 - yep that was an easy way to do it and
05:36 - there we go this is actually what I'm
05:37 - looking for I love this from Sebastian
05:40 - vane out 7-segment display combined with
05:45 - p5.js and matter digest many here
05:48 - um let's click on let's actually click
05:50 - on all of them why not let's just look
05:54 - through all of them really quickly
05:55 - alright so we've got this one we've got
05:58 - time maybe I don't know cool I love that
06:05 - okay so this is wonderful because this
06:08 - is exactly what Tom Scott talked about
06:12 - in his video about 7-segment display
06:15 - looking up and using a regular
06:17 - expression to figure out what is the
06:18 - longest word you can display on a seven
06:21 - segment display we've got super trance
06:24 - and
06:24 - then dole maybe and so we can choose the
06:28 - color of the display that's a really
06:30 - nice feature and I really should be
06:31 - crediting the people here so I probably
06:33 - should click on them one at a time here
06:34 - this is from Tom Seeley source code here
06:38 - thank you Tom Seeley this is one from BL
06:42 - for score and look at this oh wait I'm
06:47 - in the wrong page this is nice it's
06:51 - interactive this is relates to something
06:53 - that I want to do today we've got
06:55 - another clock from weimar shippers I
06:58 - love this oh look at this and guess what
07:01 - this is actually a new feature of the
07:03 - p5.js web editor now when you share your
07:07 - sketch with the full URL it you get a
07:12 - little like bar on the top that has the
07:15 - p5 logo the name of your sketch and a
07:17 - credit so by Willie Waring you can still
07:21 - get a view actually so let's see if we
07:23 - can do this well if you go to file share
07:28 - full screen there is still a full view
07:32 - without it which is would be in bed so
07:35 - if we go here and I switch to embed
07:40 - there's still a full view without the
07:42 - the p5 information all right so now we
07:45 - also have another clock from swifty
07:47 - turtle excellent name this is lovely
07:50 - great work we have a seven segment
07:54 - display from Tony Stark hey Tony Stark
07:57 - thanks for contributing to the coding
07:58 - train
08:00 - look at this with all the segments to
08:02 - find the binary stuff defined I don't
08:04 - know this is a let's see if we can read
08:06 - a bit more about what this is from
08:08 - prasad pandit a decoder app so this is a
08:11 - maybe an app that's helping you figure
08:13 - out the encoding and decoding of the
08:16 - binary stuff the binary numbers and how
08:18 - those represented on the 7-segment
08:20 - display itself we've got a processing
08:24 - 7-segment display so I should really
08:27 - just to be a good person let's let's
08:30 - actually run this code this is the one
08:32 - thing that's a little bit tricky it's a
08:33 - little bit harder oh this is just
08:34 - actually a raw port so I don't actually
08:35 - know
08:36 - need to run this this looks like it's
08:37 - just raw port thank you for that and
08:40 - then we've got the object-oriented
08:43 - refactoring so this let's take a look at
08:47 - this because I have to say I take this
08:49 - as a badge of honor but most people are
08:52 - very nice to me in the comments but I
08:56 - get a lot of the the negative comments
08:59 - that I get which I don't necessarily you
09:00 - is negative are your code is terrible
09:03 - it's messy it's disorganized you should
09:06 - you're teaching your variable names are
09:08 - bad you should be teaching good code
09:10 - practices and fair criticism guilty as
09:15 - charged
09:16 - but one of the things that I like to
09:18 - emphasize and that's part of my process
09:20 - which I recognize maybe isn't for
09:22 - everybody is that messiness is part of
09:25 - playful experimentation now you're right
09:29 - software development requires care and
09:32 - time and thoughtful engineering
09:37 - commenting code organizing code these
09:39 - are valuable and important skills but
09:42 - sometimes you want to play around make
09:43 - up an idea and I also view it as a
09:46 - prompt to the viewer to think about what
09:49 - I've done with my code and make and
09:52 - change it to work for you and that could
09:54 - mean organize it but I do aspire to you
09:59 - know teach good practice and also use
10:01 - good practices myself on this channel so
10:03 - we'll see maybe I'll maybe I'll get
10:05 - better point taken
10:07 - all right so let's look at this one
10:09 - though I really want to look at the code
10:10 - for this one so one of the things I can
10:11 - probably do actually I think if I just
10:14 - click here in this new view it will take
10:17 - me to the page with the code and we can
10:18 - see look at this we've got a segment
10:20 - class an off collar on off color and on
10:24 - color a length and a width and a state
10:26 - so this is really nice and look how
10:28 - nicely documented this is so this is a
10:31 - sort of format for self-documenting code
10:34 - comments which will can be generated
10:36 - into a documentation page display the
10:39 - segment set on set off this is lovely
10:42 - now let's see if we look here when we
10:45 - see there's even now a 7 segment display
10:47 - class which has
10:50 - a set of segments in them it initializes
10:53 - them it has the hex codes look at this
10:57 - this is a really excellent work this is
11:01 - excellent work who did this brew Alves I
11:04 - know thank you so much
11:06 - so all of you who are looking for a more
11:09 - thoughtful refactoring and
11:10 - reorganization of my quick and dirty
11:13 - seven second display this is a great one
11:15 - to look at and you can see now the main
11:17 - program is just making new seven
11:20 - segments but look at this let's see if
11:22 - we can even figure out to make two of
11:25 - these like how hard would it be now if I
11:27 - say let's make two of them or me so I'm
11:31 - gonna say create canvas six hundred four
11:33 - hundred now this of course should use an
11:37 - array but let's just say I want to put
11:39 - two next to each other and I make two of
11:42 - them and I want to display a digit
11:45 - update you know these are counting and
11:49 - maybe I want to also display a digit and
11:53 - maybe I'll say like 10 minus index or
11:55 - something now what's going on here I
11:58 - don't actually see two of them so this
12:00 - is where I might offer an idea for
12:03 - improvement which is that the the offset
12:07 - vector is hard-coded here so what if I
12:11 - were able to give it an X and a Y then I
12:15 - could add the X and y here then under in
12:20 - sketch I could say let's have one at
12:22 - like zero zero comma zero and let's have
12:26 - one at 100 comma zero now interestingly
12:29 - I've still not seen two of them let's
12:34 - see like right why don't I see two of
12:36 - them well let's take a look at how it's
12:39 - drawing the offset vector whoops in
12:44 - 7-segment display this is like kind of a
12:48 - private variable here but it must be
12:49 - used somewhere where is it used
12:53 - somewhere in maybe like a draw function
12:56 - right transform oh look at this top oh
13:00 - there's all these trance
13:01 - whoa this is crazy kind of unbelievable
13:05 - Wow generate display okay okay here's
13:09 - what we need we need a push here and a
13:12 - pop here that's my guess because my
13:15 - guess is that the generate display
13:18 - function is not self-contained so all of
13:21 - these translations that happen here are
13:23 - affecting other ones do transformations
13:27 - this seems reasonable now why aren't I
13:29 - still seeing two of them one two all
13:37 - right so let's see here zero let's see
13:42 - let's try to figure out what's going on
13:43 - we have to debug this a bit more let's
13:45 - change the on color huh so weird why why
13:56 - are my changes not taking effect on
14:04 - color stroke on color off color hmm
14:11 - interesting
14:14 - let's go back to just 400 by foreigners
14:17 - bothering me that it's off the and now
14:21 - let's do 100 so we've moved this both of
14:25 - them over so also interestingly oh you
14:29 - know what
14:30 - aha where is the background being drawn
14:37 - let's I think there's also an issue with
14:40 - this which is a problem which is that
14:45 - the background is being drawn here in
14:48 - update so this is a problem because in
14:50 - when the way I think about
14:51 - object-oriented programming is that I
14:54 - only want the object to know about and
14:58 - do things that are part of that object
15:01 - itself and background is not part of the
15:03 - object background is part of the world
15:04 - so this really needs to come out and be
15:09 - here in draw and look at this now now we
15:13 - have successfully
15:17 - you know maybe made two of them whoops
15:21 - so now we've got two of them so that's
15:24 - good I've got two seven segment displays
15:25 - why did my change of the color not
15:28 - actually take effect it's a little bit
15:30 - weird and it's not a super important
15:31 - detail but I'm curious oh because
15:33 - there's a set and a set on color so
15:36 - somewhere else the color is being set
15:39 - and so presumably that's happening here
15:48 - it's actually here so it's interesting
15:50 - like this is a bit I mean it's nice that
15:53 - that's there but the color is actually
15:55 - being set in the display itself so for
15:59 - example if I were to change this now
16:02 - we're going to see we're going to see it
16:06 - now blue okay so anyway I'd sorry I got
16:09 - went off on a bit of a tangent here
16:10 - looking at this project I'm gonna save
16:13 - this as well one thing that it would be
16:17 - nice if the p5 editor could keep track
16:20 - of where this came from but I'm gonna
16:22 - I'm gonna do that myself
16:24 - this was from object ordinary fracturing
16:28 - so let's buy Bru all so let's a credit
16:33 - brew all and over here so if anyone
16:41 - wants to take a look at this revised
16:46 - from brew all which is here and also
16:51 - let's credit this github page alright so
16:56 - this is the thing this is really this is
16:58 - that here's an important tidbit that I
17:00 - believe in with all of my heart and soul
17:02 - and if I ever make a mistake in this
17:05 - realm please let me know open source is
17:12 - a thing and I encourage my students for
17:15 - example to use open source code examples
17:18 - in the creation of a project and
17:20 - whatever the license might be right you
17:23 - might find a license like open source
17:25 - licensing is a big top
17:28 - unto itself that would be lovely to
17:30 - discuss in depth some open-source
17:32 - licenses require attribution some have
17:36 - restrictions on what you can use the
17:37 - code for whether commercial or
17:39 - non-commercial purposes some require
17:41 - share back like if you make a change you
17:45 - have to share that change back but some
17:47 - open-source licenses notably like the
17:48 - MIT license and the BSD license are very
17:51 - permissive meaning yeah I don't I make
17:55 - no warranties with this code whatsoever
17:56 - and you do what you like anything goes
18:00 - however I feel that it is good practice
18:02 - to no matter the license credit your
18:05 - sources so there are some situations
18:07 - where that's certainly required but even
18:09 - if it's not required I wouldn't want to
18:11 - build on top of somebody else's code to
18:14 - educational material even if it's open
18:16 - sourced without crediting it back so
18:17 - that's something that I always try to
18:19 - remember to do and I would encourage you
18:21 - as you make projects to always credit
18:24 - back all right so I will this will get
18:27 - hopefully left somewhere in the video's
18:29 - description maybe somebody who has
18:30 - privileges can share this in the in the
18:33 - chat right now actually one thing that I
18:35 - wanted to also mention housekeeping wise
18:38 - is there have been some recent
18:40 - improvements to the coding train website
18:43 - which is pretty much a community project
18:46 - I I do would like to apologize that
18:50 - there are a lot of open poll requests
18:51 - and issues I really need to do a better
18:53 - job of maintaining this community
18:56 - project and I'm hoping to figure out
18:57 - ways in the future to get more people
18:59 - involved in that maintenance but one of
19:03 - the new things that happened recently
19:05 - I'm gonna go under pull requests and
19:07 - closed is look for this web editor it
19:15 - might be further down here let's look
19:18 - for this web yes add web editor to video
19:23 - page so this is a feature that adds an
19:27 - option to include a link to a coding
19:30 - challenge our tutorial with the web
19:32 - editor so if I look at any web page for
19:35 - example this 7-segment display one let's
19:39 - come back to this
19:40 - here you can find weird
19:44 - oh is it broken hey where are the
19:46 - buttons there should be like buttons to
19:50 - like download what if we broke something
19:54 - oh I did 10 - in Dec people are wait
20:00 - hold on I'm getting a note from the chat
20:07 - 10 - index is causing a bit of a problem
20:10 - with this which is that 10 minus 0 is 10
20:14 - and I want to go from 9 down to zero so
20:16 - this should really be 10 minus index
20:20 - minus 1 that should do the trick right 3
20:23 - 2 1 not yeah there we go okay thank you
20:26 - for that back to what I was saying weird
20:29 - where did it go let's go to a different
20:31 - challenge
20:32 - like for example let's go do coding
20:38 - challenges and let's go to like that
20:41 - this one also let's go to here okay so
20:43 - this one is hasn't it I don't know why
20:45 - it wasn't showing up and now there's two
20:48 - rows of buttons which is weird some
20:51 - stuff got messed up hey people feel free
20:55 - to file github issues and pull requests
20:58 - but so what's supposed to happen here is
21:02 - that there is a link to view the code
21:08 - which if I click here will take me to
21:12 - the github page that has the actual code
21:15 - there is a link to download the code
21:18 - which if I click that will just trigger
21:20 - an automatic download of the code as a
21:22 - zip file
21:22 - this is processing then there's live
21:24 - example now live example this is not
21:27 - active live example should point to the
21:30 - p5.js version that runs in the browser
21:33 - and I'm not sure why there isn't one for
21:35 - the Lisa G occur delecia Shuker curve
21:39 - table but there's also this oh and look
21:42 - at this this now view code points to the
21:46 - p5.js web editor one right which was the
21:50 - new feature and this one
21:54 - points to the web editor live version
21:56 - look at that so I got to clean this up
22:02 - figure out what should be here and what
22:04 - shouldn't probably this should be if I'm
22:10 - thinking about it
22:11 - [Music]
22:13 - view code is always nice to go to some
22:17 - github repo download code is nice to
22:23 - have right so this gives you a zipped
22:25 - and then I would say the live example
22:33 - should probably go to the p5.js web
22:37 - editor if it's there or or github pages
22:46 - URL if there's no p5.js web editor or
22:50 - then nothing it's deactivated
22:53 - if there is no live example so and so
22:56 - this might be processing or you know or
23:01 - a p5 this would also be processing or p5
23:05 - but this live example would always be p5
23:09 - so this is the implementation well you
23:12 - can screenshot this and file this as a
23:15 - github issue and then what I could use
23:17 - help with actually is going back and all
23:19 - the old challenges that don't have a p5
23:22 - web editor version of them actually
23:24 - creating them now here's the thing in
23:25 - order for you to do this though I need
23:28 - to give you access to the coding train
23:30 - p5 web editor account because I think it
23:33 - would be nice for this to show up under
23:35 - the under the coding train account I
23:37 - mean that's what I'm thinking
23:39 - so you might have to get in touch maybe
23:41 - somebody who's in the patron group or
23:43 - the slack channel can help with that
23:45 - specifically ok
23:49 - don't tell me it's like okay it's only
23:51 - 11 all right
23:57 - I'm really slow getting started today so
24:02 - let me talk about what's on the horizon
24:04 - here
24:08 - let me I should sign in maybe there's I
24:13 - don't know should probably sign in as
24:16 - myself when I look at the YouTube page
24:18 - but let me just see here is that
24:20 - playlist public yet so a couple things
24:23 - let me mention if you hadn't noticed my
24:27 - friend Cal Akana
24:28 - also because I have YouTube premium okay
24:37 - no thanks I'm good okay sorry
24:39 - sorry for that digression there with an
24:41 - ad so recently the video tutorial with
24:50 - Nabil has same for all was published
24:53 - this was this is an edited version of a
24:55 - live stream so if you are interested in
24:58 - learning how to train a long short-term
25:02 - memory network with tensorflow and then
25:05 - running that in the browser this came
25:07 - out I also wanted to just alert you to
25:10 - some a text that Nabil added to the
25:13 - description related to taking about data
25:18 - and ethics and responsibility so I
25:20 - encourage you to read through this
25:21 - description here so I want to note that
25:25 - that was published now what I'm also
25:27 - looking for tonight welcome to let's see
25:33 - created playlist
25:34 - I think it's not a public playlist yet
25:38 - let me look over here and see if I can
25:40 - switch that give me a second
25:46 - people are telling me to install
25:48 - adblocker okay what is let me look at
25:53 - this playlists might as well make this a
25:56 - public playlist if people want to get
25:59 - started looking at this stuff and at
26:02 - playlist I think this is where I would
26:05 - do this unlisted edit
26:14 - how do you change iya public okay let's
26:20 - make this public right now okay so now
26:24 - if i refresh this i haven't released
26:27 - these videos yet I'm still working on
26:28 - the captions and various elements but if
26:30 - I go here I there is now session 12 I
26:38 - have released session 12 word Tyvek with
26:43 - three video tutorials these are edited
26:45 - from last week's livestream so if you
26:48 - want to get started looking at this
26:50 - stuff I'm gonna hopefully continue my
26:54 - discussion of word Tyvek today alright
26:58 - alright now it's time to have some fun
27:07 - one of the things that and I know that's
27:09 - a black screen right now I will fix that
27:11 - in a second one of the things that I did
27:21 - with the 7-segment display is in the
27:24 - 7-segment display I picked up
27:29 - hexadecimal numbers this releaser this
27:31 - is a paper towel where's my nice eraser
27:33 - I picked up hexadecimal numbers from the
27:37 - from the Wikipedia page about 7 segment
27:40 - display and I converted those
27:44 - hexadecimal numbers into binary sort of
27:47 - and did bit shifting and bit and asking
27:50 - on them and I kind of glossed over and a
27:53 - hand waved the explanation of bit
27:56 - shifting and bit masking and one of the
27:58 - comments I got was I didn't understand
28:01 - the bits part so what I'm gonna do today
28:03 - is you know I thought like oh let me
28:06 - just do like a 1 minute
28:08 - binary numbers tutorial I think those
28:10 - kinds of things exist on YouTube already
28:12 - and probably are better than what I
28:14 - could do you know because they're
28:16 - explainer videos with animation
28:18 - and sort of thoughtful diagramming and
28:20 - so what I thought that I would do is do
28:21 - two coding challenges around binary
28:23 - numbers today and I would basically make
28:25 - an interactive display to convert from
28:29 - binary numbers to decimal numbers and
28:31 - back and then I would sort of explain
28:36 - what binary numbers are and then also
28:38 - look at bit shifting and bit masking as
28:41 - part of this so I don't that's exactly
28:44 - the entire plan that I have I didn't try
28:46 - coding any of this in advance so this is
28:48 - what I'm going to do and I think that
28:51 - doing this in the web editor will be
28:53 - fine there's definitely some complicated
28:56 - aspects of this let me close all these
29:00 - windows let me save this there's an
29:03 - issue by the way a current open issue
29:05 - with the p5 web editor is that if you
29:08 - rename a sketch and even if you saved it
29:11 - it really thinks that you didn't save it
29:13 - but how I'm used to go ahead I'm used to
29:15 - that okay so binary numbers base two and
29:18 - bits and bytes okay
29:21 - let me get the chat open here to make
29:24 - sure I haven't missed anything and
29:27 - welcome new member breaking news this is
29:30 - another breaking news let me credit
29:34 - these people who made these breaking
29:35 - news things Tristan thank you - Tristan
29:38 - new member who made this wonderful let
29:42 - me find who made these breaking news
29:44 - things so Nick thank you -
29:48 - soundcloud.com slash Nick ramstad slash
29:54 - Schiffman breaking news Nick Ramsay made
30:02 - this money and then there's another one
30:04 - I have to find it
30:09 - let's see
30:16 - let's see let me find this under
30:18 - community which video is this breaking
30:23 - news
30:25 - oh no don't I just search breaking news
30:28 - on github by accident I mean uh I'm
30:34 - looking at my youtube comments not on
30:36 - github okay Zach Solomon on live stream
30:39 - number live stream number internet is so
30:47 - slow won't even tell me which number it
30:53 - is live stream number 156 let's see if
31:02 - this comes up live stream videos live
31:12 - stream 156 meet the Landers the
31:15 - revolutionary who's standing is from
31:17 - under featuring the latest in high-tech
31:20 - advancements the Landers set up in just
31:22 - minutes and come with us thank you very
31:25 - much all right where where are you Zach
31:29 - Salomon there was a comment here about
31:33 - breaking news
31:36 - let's get that ad fine is it show up
31:45 - here
31:47 - SoundCloud soundcloud.com solo mozz
31:54 - slash coating train breaking news oh
32:05 - it's gone here we go so this one thank
32:13 - you to Zach I'm here for all of your
32:20 - coding trade breaking news that other
32:22 - sound effects that I can use throughout
32:24 - the
32:24 - livestreams alright sorry for that
32:26 - digression I am getting myself ready for
32:29 - the coding challenge beginning of today
32:31 - okay alright hello my live talking yes
33:06 - going train this coding challenge is
33:09 - brought to you by water I have water
33:13 - today and I didn't last time my throat
33:15 - is killing me after my livestream okay I
33:25 - should really say water I drink it and
33:28 - then I have to go pee which is what I
33:29 - feel like I have to do right now but I'm
33:31 - going to do this coding challenge
33:34 - nonetheless ha-hee dino asks can i code
33:39 - my data structures homework in p5 I
33:41 - would love to know if that's Bobby
33:44 - certainly you can do data structures in
33:46 - p5 which is just a library for
33:48 - JavaScript and you can create data
33:50 - structures in JavaScript and visualize
33:52 - them with p5 but I don't know what your
33:54 - homework is exactly so if your homework
33:56 - is create a linked list in C++ then
33:59 - doing it in p5 won't do you a lot of
34:01 - good but I have some videos where I do
34:03 - different data structure stuff in
34:05 - JavaScript and maybe that will help you
34:06 - alright let's begin
34:11 - hello welcome to a coding challenge
34:15 - binary numbers alright so uh
34:18 - oh wait wait hold on I want to reference
34:21 - the 7-segment display Schiffman coding
34:30 - train this really should come up
34:35 - there we go this is making me crazy yeah
34:47 - okay
34:57 - hello welcome to a coding challenge now
35:01 - I recently did a coding challenge number
35:03 - 117 about the 7-segment display and
35:06 - there was weird code in there like this
35:08 - like Val
35:10 - greater than greater than shift
35:12 - ampersand 1 oh my goodness what is this
35:15 - I did something called bitwise
35:18 - operations this is actually a bit
35:19 - shifting and bit masking and let me tell
35:22 - you I did not explain it well at all in
35:25 - the video if I scroll down a look at the
35:27 - comments so many of the comments were I
35:29 - did not understand that pitch shifting
35:31 - stuff so I've decided to do two coding
35:33 - challenges the first one I'm doing right
35:34 - now about binary numbers so if you don't
35:39 - even know what binary numbers are you're
35:41 - in the right place if you want to kind
35:43 - of think about maybe a creative project
35:44 - you might make around binary numbers
35:46 - like a clock that is the time is
35:49 - displayed in binary they're also in the
35:51 - right place I am going to try to in this
35:53 - coding challenge make a what am i doing
36:00 - I can I just start over this is my one
36:02 - mole again which I say every time now
36:06 - the coding starts okay okay come on
36:19 - energy energy hello welcome to a coding
36:28 - challenge about binary numbers now I
36:30 - previously did a coding challenge number
36:32 - 117 about the 7-segment display as
36:34 - displayed right there and I had some
36:36 - weird code in it like Val greater than
36:39 - greater than shift ampersand 1 what that
36:42 - is that well this is a bit shifting
36:46 - operation and this is a bit masking
36:48 - operation and I sort of explained it but
36:51 - not really in that video in fact I
36:52 - explained it rather terribly kind of
36:54 - glossing over it and I got a ton of
36:56 - comment about a few comments the ratio
36:59 - of the percentage of comments
37:04 - don't go up with all these tangents
37:12 - editing is a thing editing is a thing
37:16 - last time last time I think I have to
37:20 - I'm gonna make it through this I just
37:22 - gotta get going
37:24 - it's really tortures to live viewers
37:27 - that the chat will be full of rage again
37:29 - wow so many read I don't usually do this
37:31 - many retakes but today just happening
37:36 - okay previous one was better
37:39 - oh it's the fake energy and enthusiasm
37:41 - oh my goodness alright real energy this
37:48 - is authentic energy and enthusiasm I am
37:51 - genuinely excited to talk about binary
37:54 - numbers and don't hello and welcome to a
38:00 - codec challenge this coding challenge is
38:02 - a coding challenge about binary numbers
38:04 - okay why am I doing this well previously
38:07 - I did a coding challenge called the
38:09 - 7-segment display where I made the
38:11 - 7-segment display in an orange make it I
38:13 - did these weird operations with this
38:15 - greater than greater than and this
38:16 - ampersand and these operations are known
38:19 - as bit shifting and bit masking I really
38:21 - did not explain those concepts well or
38:23 - even at all in that challenge and I got
38:26 - a bunch of comments saying I didn't
38:27 - understand the whole bits part so let me
38:29 - go backwards here in time travel back in
38:33 - time or forward or whatever because you
38:34 - could I'm just gonna do a video which
38:36 - explains binary numbers I'm gonna do to
38:38 - two challenges one to just explain
38:41 - binary numbers and two to actually
38:44 - explain bit shifting a bit masking so
38:47 - first but I need to make these a coding
38:53 - challenge so what I'll actually do let
38:55 - me try it I think what might make sense
38:56 - is to build a little visualization
38:58 - system where if I type in a number a
39:00 - decimal number a regular number I'll
39:02 - talk about what a decimal number is in a
39:04 - second then I see it
39:06 - in binary and maybe I can click on the
39:08 - binary number and change the bits and
39:10 - then have it converted back into decimal
39:13 - that's what I'm gonna try to do so okay
39:15 - so if you've never heard about binary
39:17 - numbers
39:18 - welcome I am going to attempt to explain
39:19 - right now so first of all before I even
39:22 - explained binary numbers we've got to
39:23 - understand this concept of a base the
39:26 - base a number a number system like a
39:29 - base 10 or a base 16 or a base 64 or
39:32 - base 2 number system the base refers to
39:36 - the number of possibilities of digits
39:41 - that you can use to encode a particular
39:44 - number it could be more than digits if
39:46 - we get beyond 10 for example so we talk
39:49 - base 10 with our 10 fingers and 10 toes
39:53 - is the way we traditionally think about
39:55 - numbers 10 or deca Dec and that's why we
40:01 - call this decimal numbers so base 10 is
40:03 - decimal numbers there are 1 2 3 4 5 6 7
40:09 - 8 9 I counted that wrong 1 2 3 4 5 6 7 8
40:14 - 9 10 10 digits when we get up to 9 right
40:22 - we're counting up to 9 the next one we
40:23 - have to go back to zero and then add an
40:26 - extra spot then go to 11 and I'm going
40:29 - off the off the lot now we could have
40:31 - base to base 2 is binary 2 possibilities
40:37 - by 0 1 1 0 1 1 this is me counting and
40:49 - binary 1 0 0 right because I only have
40:54 - and I could sort of add the zeros here I
40:57 - only have two possible digits for each
41:01 - spot in my numbering system so this is
41:05 - binary
41:05 - now other well-known encoding systems
41:08 - like base 16 or hexadecimal allow for
41:13 - well now for 16 and well how can we have
41:16 - more than 10 well in hexadecimal when
41:20 - you get after 9 yet the letter A then B
41:23 - then C then D then e then F so you've
41:26 - got 16 possible digits that's why if you
41:29 - see something like this FF
41:31 - this is a hexadecimal number I'm
41:39 - thinking I'm thinking I'm thinking okay
41:45 - so the reason why this is important in
41:48 - computing is that computers actually
41:52 - store everything in memory as in binary
41:56 - a single spot for a single binary number
41:59 - is called a bit so we could say that if
42:03 - I were to sort of imagine the computer's
42:05 - memory as a sequence of slots each slot
42:10 - can have a 0 or a 1 in them 2 3 4 5 6 7
42:16 - 8 now 8 bits is referred to as a byte so
42:26 - when you hear somebody say this file
42:29 - takes takes up like 3,000 kilobytes well
42:35 - a kilobyte is a certain amount of bytes
42:37 - with a certain amount of bits let's talk
42:39 - about how many spots in the computer's
42:40 - memory or is required to store this
42:43 - information so I'm taking a break for a
42:52 - second I'm looking at the chat I kind of
43:00 - want to start over again all right
43:11 - so you might have noticed when you were
43:15 - learning programming or p5 or different
43:17 - things that like why there's so many
43:19 - situations where there are 256
43:22 - possibilities right the red 4 if you're
43:26 - going to set the color of a shape you're
43:28 - gonna draw the range is between 0 and
43:32 - 255 which is actually 256 possibilities
43:35 - where interestingly enough right what is
43:39 - the binary representation of 256 it is
43:45 - if I just come back here and create
43:47 - another set of slots 1 1 1 1 1 1 1 1 all
43:53 - the bits being on in an in a single byte
43:56 - is 256 counting from 0 to 255 it's
44:03 - actually 255 excuse me but it's the 256
44:05 - possibility counting from 0 to 255 is
44:09 - something you can do within a single
44:12 - byte this is why many systems are
44:21 - optimized to work with powers of 2 2 4 8
44:27 - 16 32 this is native to how the computer
44:32 - stores information so that 7 segment
44:34 - display that looked like this it was
44:42 - designed to have 8 possible options
44:46 - because it can be the how the display is
44:49 - shown rendered can be configured in a
44:53 - single byte right is this spot a 0 or a
44:57 - 1 that means that maybe this is either
45:00 - on or off what about this one on or off
45:02 - now it's weird that it's called
45:04 - 7-segment because why isn't it an eight
45:06 - segment display every eight segments
45:08 - well that's because it also has an extra
45:10 - seven segments but an extra spot for the
45:12 - decimal point okay so that's some
45:14 - background on binary numbers alright so
45:20 - the next thing I'm gonna do
45:22 - edit this part out is write an algorithm
45:27 - okay all right okay I've got an idea
45:33 - here so let's go back over to the
45:37 - computer for a second because actually
45:38 - JavaScript itself if I just like open up
45:42 - a console here in the browser has
45:44 - functions in it to convert between a
45:48 - decimal numbers and binary numbers what
45:51 - is the decimal representation of this
45:53 - binary number for example what is the
45:57 - binary representation of this decimal
46:00 - number for what server that's really
46:02 - what I'm doing in this coding challenge
46:03 - I want to write an algorithm that can
46:04 - convert back and forth now you don't
46:06 - need to do this in JavaScript because
46:08 - JavaScript will do this for you so for
46:10 - example if I were to if I were to have a
46:15 - binary number I'm gonna call it num
46:18 - equal and I'm gonna put it in quotes
46:20 - like as a string what was that number it
46:24 - was zero one zero one one zero one zero
46:27 - I can use the JavaScript built-in
46:30 - function parse int give it that number
46:34 - and I must explain what base is that
46:36 - number in and that is and it's going to
46:39 - give me the decimal equivalent ninety so
46:42 - remember I said how remember how I said
46:46 - FF is a number in hexadecimal well I can
46:50 - now say parse int num in base 16 255
46:57 - write FF is 255 and by the way let's
47:03 - actually let's say parse int 1 2 3 4 1 2
47:07 - 3 4 that's also 255 so the parse int
47:12 - function will take the string Lee text
47:15 - representation of any number at any base
47:17 - and convert it to decimal as long as you
47:20 - give it the second argument base which
47:21 - is also sometimes referred to as radix
47:23 - so you pronounce that I don't know now
47:28 - what if you want to go the other way
47:31 - around like what if I have the number
47:34 - 255
47:35 - and I want to get that exactly it's
47:38 - telling me here what if I want to get
47:41 - that what if I want to get that number
47:44 - in in its binary representation well the
47:47 - two string method will do that and I can
47:50 - actually give that a base array so if I
47:52 - say 255 to string actually I just say to
47:55 - string it's actually gonna give me an
47:57 - error because it's like you can't call a
47:59 - function on a primitive value like a
48:01 - number nut luckily if I put that in a
48:04 - variable I could say num to string
48:09 - whoops
48:11 - num to string and I get the string 255
48:15 - and now if I were to say num to string
48:20 - base - I get the binary representation
48:23 - so and I can also I could do this by the
48:26 - way I think if I put it in parenthesis
48:27 - or something like that I will get that
48:30 - so now we've seen how JavaScript can do
48:32 - all this for you automatically
48:34 - now's the time for me finally to write
48:36 - some code I could just use that but I'm
48:39 - gonna be I feel like writing my I feel
48:43 - like learning about how this binary
48:44 - stuff works in a slightly more deep way
48:47 - so I'm gonna write my own algorithms to
48:49 - convert back and forth and I'm also
48:51 - gonna create a visual system to make
48:53 - that interactive pause for a second and
48:58 - of course the chat is talking about
49:00 - whether a thousand bits is a kilobyte or
49:03 - a thousand 24 bits is a kilobyte and
49:05 - that's why I didn't actually say it
49:06 - either way let me get that I lost the
49:12 - chat here
49:12 - Oh dot dot what does the dot dot mean
49:17 - alka ah XOR thank you
49:22 - Simon is also maybe it's not breaking
49:33 - news breaking news from the chat where's
49:35 - the company from it's a decimal followed
49:39 - by a dot oh how weird that's the
49:45 - weirdest thing I have ever seen
49:48 - why does that work so that works that's
49:56 - so weird
50:01 - okay octal yeah all I wanted to mention
50:07 - that you can make up any all right okay
50:20 - where's my eraser okay all right so
50:25 - let's look at how this works first of
50:27 - all I'm a you know this what I'm doing
50:29 - in this video is it's just working
50:31 - worrying about binary numbers and
50:33 - decimal numbers but it would be
50:34 - interesting to create your own as a
50:36 - challenge to you after you watch this or
50:38 - just go do it right now write a function
50:40 - that takes two numbers in in any
50:43 - arbitrary base and our one number in any
50:46 - arbitrary base and can convert it to any
50:47 - other arbitrary base because even though
50:49 - I talked about decimal or hexadecimal or
50:52 - binary we could just make up a we could
50:55 - say base five or base three like base
50:57 - three would be 0 1 2 3 1 0 1 1 1 2 1 3
51:04 - this is so hard to do to 0 to 1 right
51:07 - that's base I space for not phase 3 this
51:10 - is base 4 because there's four possible
51:13 - combination digits combinations ok so
51:16 - but what I want to do here is if we're
51:18 - in binary the easiest the easy way to
51:21 - start is to the easy way to start is to
51:28 - look at converting between binary and
51:31 - decimal to decimal will also do decimal
51:34 - to binary but let's start with binary to
51:37 - decimal ok
51:40 - so 0 I'm just going to make a little
51:42 - table manually is 0 1 is 1 1 0 is 2 1 1
51:52 - is 3 1 0 0 then is 4 you notice
51:59 - something here we've got
52:02 - what's important here is we've got zero
52:05 - well sir hold on it's a little bit
52:11 - confusing here the way yeah
52:13 - yes sorry what's important here is
52:17 - what's important here is this 1 this 2
52:22 - and this 4 look at the pattern here
52:25 - 1 is a 1 1 0 is a 2 1 0 0 is a 4 can you
52:34 - guess what 1 0 0 0 is going to be now
52:37 - guess what it's 8
52:39 - each bit represents the amount in
52:44 - decimal yep each sorry each bit
52:49 - represents a power of 2 this is 2 to the
52:55 - 0 that's 2 to the 1 that's 2 to the 2 2
52:59 - squared this is 2 to the 3 so what we
53:02 - can actually do to convert from binary
53:06 - to decimal is use this pattern here is
53:11 - this is this first binary digit a 0 or a
53:16 - 1 so hold on
53:19 - I shouldn't plan this out shouldn't
53:21 - practice this let's go back to that
53:29 - number I think it was 90 oh boy
53:32 - I think it was this I don't know it
53:35 - wasn't I think it was this so this is
53:37 - the way we could do it basically each
53:39 - one of these spots this is 2 to the 0
53:42 - this is 2 to the 1 that's 2 to the 2
53:45 - that's 2 to the 3 that's 2 to the 4
53:47 - heads 2 to the 5 this is 2 to the 6 this
53:52 - is 2 to the 7 right so now 0 times this
53:57 - is 0 1 times this is 2 0 times this is 0
54:05 - 1 times this is 8 1 times this is 16 we
54:11 - got a 0 here what's what's 8 16 32 this
54:15 - is 60
54:16 - four and then this is zero so now I can
54:18 - add all this up 64 plus 16 plus 8 plus 2
54:22 - we've got 20 carry the 2 990 look at
54:27 - this we have now converted between
54:30 - binary representation and decimal whoo
54:33 - okay let's go now and write the code to
54:37 - actually do this and also let's
54:39 - visualize it alright so let's start with
54:49 - just a number which equals zero one zero
54:55 - one one zero one zero okay and now we're
54:59 - gonna write a function called binary to
55:05 - decimal a decimal and it's going to take
55:08 - a value and what I need to do is just
55:12 - loop over all the digits and again
55:14 - there's all sorts of fancy ways we could
55:16 - probably lose in one line of code with a
55:17 - higher order function and but we're
55:19 - gonna do this in the long winded way to
55:21 - really understand it I equals 0 I is
55:24 - less than Val dot length I plus plus now
55:28 - actually here's the thing if my death
55:31 - binary number is a string I actually
55:36 - want to start at this digit first all
55:39 - right because I want I don't think this
55:42 - could be any given length but I wanna
55:44 - you know I want to add things starting
55:46 - counting at zero so what I might do here
55:50 - is actually say now the index equals
55:56 - value dot length minus I minus 1 right
56:00 - so let's say there's eight of them I
56:02 - went when I is zero I want to look at
56:06 - the 7th when I is one I want to look at
56:09 - the six when I is 2 I'm going to look at
56:10 - the fifth so we've got this now all I
56:13 - need to say is let me get the bit is a
56:20 - value car at I sorry car at index I want
56:28 - to get that
56:29 - is it a zero or one and I also need to
56:32 - turn it into a number I'm just gonna use
56:34 - parse int for that which by default will
56:37 - turn it into a zero or 1 in decimal
56:39 - without any and then I'm going to say
56:42 - and I need a sum sum equals zero then
56:47 - I'm going to say sum plus equal power 2
56:52 - to the 8th power times bit so I'm
56:58 - basically doing exactly this I am saying
57:01 - for when I is zero go to this bit which
57:07 - is the last character in the string and
57:09 - then multiply it by x 2 to the ice power
57:13 - oh shoot then multiply it by 2 to the
57:21 - 8th power okay then when that's all done
57:26 - I'm going to return some all right now
57:32 - so we could test this idea out like I
57:35 - could just say now a console.log binary
57:39 - to decimal none and look we've got 90
57:45 - down here
57:47 - [Music]
57:49 - this is like a 45-minute video so far
57:52 - where all I did was convert one number
57:54 - two but anyway we're getting somewhere
57:56 - now what I want to do that took me a
58:00 - half an hour since I started how am I
58:04 - making how is it possible that I'm
58:06 - making a coding challenge and it's like
58:11 - hours long
58:28 - okay let's now visualize this binary
58:33 - number so I'm gonna say let's let's make
58:37 - a canvas that's like four hundred by 100
58:39 - I'm gonna say background 255 and I'm
58:42 - gonna say I four let a equal zero eyes
58:45 - listen um dot length I plus plus and now
58:50 - what I'm going to do is I'm going to say
58:55 - the width of the the width of each I'm
58:59 - gonna draw a rectangle for each bit and
59:01 - the width the the size of each rectangle
59:03 - is with / numb not length and then so I
59:11 - want to draw I'm going to say fill zero
59:15 - rectangle I times W 0 W height so I want
59:23 - to draw a bunch of rectangles and let's
59:25 - say stroke 255 just so I put something
59:28 - around it and we'll say it's size is
59:30 - minus 1 and minus 1 so minus 1 so there
59:36 - you go
59:37 - so I now have this visualization of all
59:39 - the bits and I'm going to say the fill
59:44 - is numb car at I times 255 there we go
59:54 - and then let's make the stroke like a
59:57 - grey so it shows up kind of no matter
59:59 - what
59:59 - so again boy my design
60:02 - skills and let's say a stroke wait for I
60:06 - really have terrible design skills oh
60:08 - this is awful
60:09 - but you see the idea it's like thicker
60:10 - here and oh wow I don't like so this is
60:13 - the idea that I am now and then I want
60:16 - to say and I'm gonna say no loop here
60:22 - create P create P binary to decimal numb
60:35 - there we go Owen let's okay it's fine so
60:41 - we can see here this is what I've got so
60:43 - I'm gonna NGO you can't buy hold on just
60:49 - timeout for a second I'm thinking
61:03 - I'm just going to very briefly add
61:06 - something to style dot CSS so because I
61:11 - want the font color to be white
61:13 - [Music]
61:15 - what is that text color that was just
61:17 - color font color no color oh that what
61:22 - 255 is not anything I'm just gonna oil
61:31 - it just so that this is a bit more
61:35 - legible I am going to very briefly just
61:38 - edit the CSS here and I think I can add
61:40 - color and then by the way I need to do
61:42 - this in hexadecimal ffffff
61:46 - shouldn't that be white now do I not
61:49 - have enough EPS there we go I am going
61:53 - to say size text size font size
61:56 - it must be font size 64 point there we
62:02 - go so now now I can see here so now any
62:07 - binary number I put in here I will get
62:12 - the decimal representation I'm
62:15 - converting it and I'm visualizing it so
62:18 - now you the viewer of this because kody
62:20 - challenge is complete it's kind of a
62:23 - very sad result but I am very excited
62:26 - for you to do something better with this
62:28 - so for example I would love to add the
62:30 - feature where I like to do is click on
62:32 - these and I can switch the bits so that
62:34 - would be great
62:35 - try that what if you know there's
62:38 - probably some nice or more visually
62:40 - pleasing way maybe I want to put text um
62:42 - you know I oh I need to add something to
62:44 - this I want to make this content
62:46 - editable so I could actually edit this
62:49 - let me just show you so what I could do
62:51 - here is and let's let's put this let's
62:55 - make let's just make it a div and I'm
62:58 - gonna say create div just so it shows up
63:00 - without all right here and now I'm gonna
63:03 - say um I'm gonna say I'm just gonna add
63:07 - this for you div equals creative div dot
63:10 - attribute attribute I think it's the p5
63:13 - way of doing this
63:14 - content editable and I'll just say true
63:18 - so I'm adding a HTML attribute to this
63:20 - div which makes it content editable so
63:24 - now what if I edit that I want to update
63:28 - the bits so I have to convert the other
63:30 - way I guess I could do that in another
63:31 - video maybe I'm done right now pause
63:35 - that stop this silliness of watching me
63:37 - and go go to the URL that's in the
63:39 - video's description to take a look at
63:41 - this sketch and make your own beautiful
63:44 - interactive version of this with ways
63:47 - that I couldn't possibly imagine right
63:48 - now alright thanks for watching and see
63:49 - you soon I was terrible I almost want to
63:58 - do the whole thing over again
64:05 - [Music]
64:17 - I'm looking at the chat the over give me
64:19 - interesting suggestions zero to zero
64:28 - isn't you can use binary literals in
64:31 - JavaScript that as well yes I didn't
64:36 - mean for this to be a coding challenge I
64:38 - meant to just sort of like extra explain
64:40 - take two it's like how long do you think
64:45 - mean I don't know I don't know I guess I
64:48 - should move on okay just now I'm
64:49 - realizing I'm coding this maybe doesn't
64:52 - make sense as a coding challenge maybe
64:57 - it's really like a tutorial series
64:59 - because it could be multi-part like I
65:09 - can make it do it over again
65:18 - what are you doing next asks Nasir make
65:22 - the rectangles draggable like I mean
65:24 - there's so many things I would like to
65:25 - that I meant to sort of like do here
65:37 - hold on
66:09 - I'm thinking I don't write I know yes
66:16 - but I felt like so Alessandra makes a
66:18 - very good comment in the chat which is
66:20 - the thing is this didn't really explain
66:22 - the bit operations in the 7-segment
66:23 - video yes that's definitely what I was
66:26 - going to do next because not once I have
66:29 - a visual system I can start to add like
66:32 - shifting to it like what if I press the
66:34 - right arrow and shift everything over I
66:40 - sort of feel like I'm just torn as to
66:51 - what to do here I kind of want to just
66:53 - do that whole thing over again there's
66:55 - like a second take now that I kind of
66:57 - understand what it is I'm doing because
67:00 - I can probably be much less long-winded
67:02 - about it let me at least erase over here
67:05 - I don't know if that will it was
67:10 - ultimately these live streams are not
67:12 - what the larger YouTube audience watches
67:15 - the larger YouTube audience watches the
67:18 - edited versions of these
67:30 - I'm out of time I'm thinking about
67:33 - redoing this over the color should be
67:45 - the other way around
67:46 - yeah they definitely should be no I
67:49 - guess so I don't know let's guess I
67:54 - could use Dom elements click on them I
68:08 - want to do this one more time I'm gonna
68:11 - do this one more time because I won't be
68:12 - able to live with myself if I don't so I
68:14 - apologize to everybody
68:25 - okay all right
68:33 - I'm I guess I'm just gonna make a new
68:35 - sketch yeah here we go
68:49 - okay
68:53 - okay all right everyone the the IR irony
69:00 - here is that I don't have very much time
69:02 - and I'm gonna end up just doing only the
69:03 - binary stuff today which I actually
69:05 - don't really mind so much all right
69:08 - everybody
69:13 - so all of you watching live should just
69:17 - go on with your day now go do something
69:19 - else make yourself a cup of tea go watch
69:22 - a different youtube videos play a game
69:26 - of chess we'll go outside if it's a nice
69:29 - day outside where you are may have
69:32 - something to eat let's go do something
69:34 - else
69:35 - because I am literally going to do
69:37 - exactly what I just did just just just
69:39 - just to see what happens just I'm just
69:46 - damn curious for this experiment if
69:48 - actually I produce better content doing
69:50 - something twice or whether the
69:51 - spontaneousness of the first time is
69:54 - actually better we'll find out won't we
70:13 - okay oh no I'm in the wrong place here
70:20 - we go okay so this is the thing maybe
70:28 - this doesn't make sense as a coding
70:30 - challenge I think I was just thinking
70:32 - coding challenge because that's what but
70:44 - all right all right we're gonna do it is
70:46 - the coding challenge it's fine and then
70:49 - we'll do addendum it's part multi-part
70:50 - cuz why not or it'll be long it's gonna
70:56 - be long that's fine all right I just
70:59 - have to know that it's gonna be long at
71:00 - the beginning hello and welcome to what
71:03 - will undoubtedly be the longest video
71:05 - you've ever watched my binary numbers so
71:08 - why am I making this challenge here so I
71:11 - made a coding challenge number 117
71:13 - called the 7-segment display and what I
71:16 - was doing was creating a visual
71:19 - JavaScript HTML canvas version of a
71:22 - 7-segment display and to do that I had
71:24 - some weird code in there Val greater
71:26 - than greater than shift ampersand 1 and
71:28 - that code but code right up there made
71:32 - no sense to anybody and I tried to
71:34 - explain it but I got a lot of comments
71:35 - saying I didn't get what this was so
71:36 - this is a bit shifting and bit masking
71:38 - so before I can even get into that I
71:40 - thought let's take a deep breath and
71:42 - let's just enjoy and go back backwards
71:45 - in time days of yore when we didn't have
71:48 - anything but binary numbers and we had
71:50 - to program everything in binary
71:51 - I don't know that this never happened
71:53 - for me but I can imagine there was a
71:54 - time where this really happened so this
71:56 - is a coding challenge where I will
71:58 - explain what binary numbers are and then
72:01 - I will create a sketch p5.js sketch in
72:03 - JavaScript that converts a binary number
72:08 - to a decimal number okay so maybe you're
72:10 - even asking right now what is a binary
72:13 - number what is a decimal number so
72:15 - before I can even answer that we have to
72:17 - talk about this idea of base base is
72:22 - is a term that refers to the number of
72:26 - possibilities in a counting system in a
72:29 - number system so base 2 or binary there
72:35 - are only two possibilities a 0 or a 1
72:38 - base 10 10 Dec deca or decimal has 10
72:46 - possibilities 0 through 9 there are
72:49 - other well-known numbering systems that
72:51 - get used often probably the one you see
72:53 - in computing the most is base 16 or
72:57 - hexadecimal and this actually has 16
73:00 - possible digits 0 through 9 and also A
73:04 - through F so when you see something like
73:07 - this in CSS like FF 0 0 FF this is
73:13 - hexadecimal encoding this FF in decimal
73:18 - is 255 this 0 0 in decimal is 0 this FF
73:24 - is 255 so this is the color this is a
73:28 - representation of the color red of to
73:30 - 5500 of green and blue 255 so anyway so
73:34 - this kind of encoding of information
73:36 - exists and by the way in my 7 segment
73:38 - display there were hexadecimal
73:41 - representations of what should be
73:43 - displayed on the 7-segment display okay
73:46 - so hexadecimal is interesting I'm not
73:47 - gonna do hexadecimal conversion in this
73:49 - video but you know it's important to
73:51 - realize like these are maybe something
73:52 - that you see I think like base 8 is used
73:54 - for like some file systems but um you
73:58 - can make up anything like if you have
73:59 - base for you just have four
74:01 - possibilities maybe 0 1 2 or 3 and when
74:04 - I say possibilities it it this defines
74:07 - how you count and by the way this
74:10 - historically there are all sorts of
74:12 - alternative ways of counting I believe I
74:15 - was looking and the Aztecs used maybe
74:18 - units of like 0 then 20 then 40 then 800
74:23 - then 8000 there's like these were the
74:25 - idea and those were instead of digits
74:27 - there were actually like drawings of
74:28 - what so anyway so you look that up
74:30 - somebody will make a nice explained our
74:32 - YouTube video about
74:33 - systems but if we have base 2 this means
74:37 - there are only two possibilities so like
74:41 - let's let's use base ten decimal because
74:43 - we understand that ten fingers ten toes
74:45 - that's why base ten is the convention 0
74:48 - 1 2 3 4 5 6 7 8 9 10 11 12 right because
74:54 - once we get to 9 we've run out of
74:56 - possibilities in a single digit so we
74:59 - switch to 0 and then the next digit over
75:03 - the tens unit becomes a 1 this is what
75:08 - kids learn in elementary school in
75:10 - counting in groups of 10 hundreds units
75:13 - etc alright so but if I were doing this
75:15 - in binary I would say 0 then I would say
75:18 - 1 and then I have run out of digits so I
75:23 - have to say 1 0 and then 1 1 and then a
75:29 - 1 0 0 then 1 0 1 1 1 1 I'm totally like
75:37 - this is the worst drawing ever and then
75:40 - 1 0 0 0 did I get that right no I
75:44 - totally did not 1 0 0 1 0 1 1 1 0 then 1
75:51 - 1 1 and then 1 0 0 0 oh this is hard
75:55 - ok let me match up some things for you
75:58 - so something that's really interesting
75:59 - here is 1 matches up with 1 1 0 matches
76:04 - up with 2 1 0 0 matches up with four
76:07 - five six seven one zero zero zero zero
76:11 - matches up with eight notice that when
76:14 - there is only the leading digit one and
76:17 - everything else is a zero
76:18 - there's a pattern here 1 2 4 8 maybe now
76:25 - you could imagine what 1 0 0 0 0 is
76:29 - going to be how about 16
76:33 - whoops sorry 16 I should put that over
76:35 - here 1 2 4 8 16 these numbers are
76:39 - doubling so in fact each one of these
76:43 - digits in binary represents not
76:46 - the tens the twos so with a one this is
76:51 - actually one this is actually 2 to the 0
76:54 - power 2 this is 2 to the 1 power this is
76:57 - 2 squared 2 to the third power we're
76:59 - doubling so this is by the way the
77:01 - algorithm that I need to write in my
77:03 - code to convert from binary
77:06 - representation to decimal representation
77:09 - are you ready to do that okay um I don't
77:19 - know maybe that was better so far so I'm
77:23 - going to show the thing in JavaScript
77:24 - where you can actually it'll do this for
77:25 - you all right
77:36 - all right so actually before I write my
77:38 - own algorithm I should point out that
77:40 - this is the kind of thing that you can
77:42 - actually do in JavaScript so first of
77:44 - all I think you can make a number like
77:46 - if you say 0b like if you put like the 0
77:50 - then the B it's like oh now this numbers
77:52 - gonna be in binary so like if I say like
77:54 - 1 0 that should be no oh whoops sorry
77:59 - actually it is right hold on let me come
78:01 - back here refresh this page oh god I
78:04 - have to watch this crazy ad again okay
78:12 - all right happy give an 8 now we come
78:15 - back alright so one thing I want to show
78:19 - you first is you can actually you you
78:23 - don't need to write your own algorithm
78:24 - do this conversion this is built into
78:26 - the way that computers work and actually
78:28 - javascript has several helpful front
78:29 - help helper functions that'll do this
78:31 - for you I think if I say for example a
78:34 - equals zero B if I have a variable
78:37 - that's equal zero B I can put any
78:38 - encoding so like what if I put 1 1 1 1 1
78:42 - 1 1 1 actually the value of that's
78:45 - actually 255 so this is I can actually
78:48 - hard code a number in binary by saying 0
78:51 - B I can also use this parse int function
78:56 - so if I say parse int and give it a
78:58 - string like 255 just converts it this
79:02 - string to a number but I can do things
79:05 - like say parse int 1 1 0 and then give
79:10 - it a radix sort this is another word for
79:13 - bass and say like what is the value of
79:16 - the integer value the decimal integer
79:19 - value of 1 1 0 in base 2 right it's 6 in
79:22 - base if it were base 10
79:25 - obviously it's honored and 10 so this is
79:27 - that this will actually be done for you
79:29 - just threw that parse int function but
79:31 - let's go and actually write our own
79:33 - algorithm for this yes there is a bell
79:37 - ringing and let's go to the web editor
79:41 - so let's let's just assume for the sake
79:44 - of argument that the binary numbers that
79:46 - I want to work with are going to be
79:47 - strings
79:49 - so I am going to make a number and I'm
79:53 - going to make it a binary number and you
79:55 - know there's a thing about like when you
79:57 - have eight bits it's kind of important
80:00 - here right each one of these is referred
80:03 - to as a bit each spot in a binary number
80:06 - is a bit when you have eight of them
80:08 - that's a byte and so this has to do with
80:11 - how things are stored in the computer's
80:12 - memory right everything ultimately in
80:15 - the depths of your computer is stored in
80:17 - binary format and the amount of Spacek
80:19 - takes up is the number of bytes or
80:21 - kilobytes or gigabytes etc terabytes but
80:26 - I'm going to waste a lot of space and
80:29 - encode my binary number as a string so
80:32 - let's just say let's just try something
80:34 - really simple like 1 0 0 and we know
80:37 - that should be 4 right 0 1 1 0 no that's
80:44 - not 4
80:46 - yeah it's 4 I lost my mind for a second
80:51 - there right this is 0 this is 1 this is
80:54 - 2 this is 3 this is 4 so we should get
80:57 - we do this right we'll get 4 ok now I
81:01 - want to write a function I'm gonna call
81:03 - it bin binary to decimal
81:08 - it'll take in any arbitrary value which
81:10 - is a string and we could make this much
81:12 - more generic so by the way as a
81:13 - challenge to you what if you made a
81:15 - function like this which is just number
81:18 - converter it takes a number and to base
81:21 - a base and a second base so here's the
81:23 - number in a given base give it back to
81:25 - me in another base it'll be generic
81:27 - that's a challenge for you to do now or
81:29 - later or whenever you want ok so the
81:31 - thing that I need to do is I need to
81:33 - loop through the sorry I equals 0 I is
81:38 - less than value dot length so if it's a
81:41 - string I'm going to loop through the
81:43 - string one character at a time so for
81:46 - each character the way to convert it is
81:49 - to add up all of the twos so for example
81:54 - 1 0 1 is 5 because it is 1 0 0 plus 0 0
82:01 - 1 is
82:02 - 1:01 and this is 4 and this is 1 so 1 0
82:06 - 1 is 5 so if I just start here and take
82:11 - the first digit multiplied by 2 and take
82:14 - the second digit multiplied by sorry x 1
82:18 - the second digit x to the third digit
82:20 - multiplied by 4 add all those things
82:22 - together and by the way it's not just 1
82:26 - to 4 it's 2 to the 0 2 to the 1 2 to the
82:30 - 2 2 to the 3 so it's the exponent that's
82:35 - counting up so I'm going to say sum plus
82:40 - equal power and now I need to get this
82:43 - value so I need to get V I need to get
82:46 - the 0 or the 1 so I'm gonna say the bit
82:50 - equals a value car at I now here's the
82:56 - thing mmm-hmm
82:58 - this is an interesting question here
83:01 - what is I when it starts at 0 I is
83:06 - actually the string representation this
83:10 - is the zero index so even though I want
83:13 - to do the conversion by starting over
83:14 - here I'm actually over here so I
83:17 - actually want to get to the end of the I
83:20 - want to start from the end of the array
83:21 - another you write the end of the string
83:23 - and a quick way that I can do that is by
83:26 - saying val val dot length minus i minus
83:31 - 1 right if there are three digits I have
83:36 - not I have 2 1 0 not 0 1 2 2 1 0 so 3
83:42 - minus I minus 1 so sum equals power of 2
83:46 - to the bit and I need to make this a
83:50 - number so I'll just use parse int
83:52 - because it's a string and then let's
83:56 - just say console dot log some and I
84:00 - think we're done sort of console that
84:04 - logs some and let's see let's let's do a
84:10 - binary binary to decimal Val and
84:15 - actually so this should
84:16 - returned numb sorry and oh there we go
84:22 - for let's test some other ones out let's
84:25 - add another 1/6
84:28 - let's try one zero one zero zero this is
84:32 - a byte right if all the ones are on in a
84:34 - byte right
84:36 - everything is on eight bits is a byte
84:39 - and if everything is a one what do we
84:40 - get
84:41 - ok I need one more wait what's going on
84:44 - well something is wrong no this isn't
84:47 - right I've made a mistake too to the
84:51 - parse int bit
85:02 - by the way down low is asking why not
85:05 - iterate from Val dot length minus one to
85:07 - zero
85:10 - what did I get wrong here
85:25 - oh-oh-oh this is not right at all oh my
85:33 - goodness I'm so wrong this code is not
85:40 - correct at all so remember I am each
85:44 - digit represents a 1 a 2 a 4 2 to the
85:49 - 8th power I actually even said that
85:51 - somewhere somewhere I some time earlier
85:53 - I'd say to be i2 power maybe only in my
85:55 - head so what I'm actually doing is
85:57 - taking that bit and multiplying it now
86:00 - of course it's a string so I have to
86:02 - convert it the string value it now this
86:05 - is what I'm looking to do and now 255
86:10 - there we go
86:11 - boy huh so now it's getting there were
86:13 - some right answers by accident so that
86:15 - should be 4
86:16 - this should be 5 yep look at the kid
86:22 - have twos there that should be 18 so I
86:25 - should probably write some error
86:26 - handling right because actually this
86:28 - would actually work if I put a 3 in
86:30 - there it's gonna give me a number but it
86:31 - makes no sense at all so and once again
86:34 - I was what I wanted to show was that 8
86:36 - bits all on gives me 255 and in fact
86:42 - this is why we see again the range you
86:46 - can store 256 possibilities in a single
86:49 - bite a bite being 8 bits
86:52 - 256 in decimal or 2 digits in
86:56 - hexadecimal okay I'm getting some
87:06 - messages from the chat saying that maybe
87:08 - it would be more intuitive to run the
87:10 - loop backwards so yes but then I have to
87:13 - so it's six of one half dozen of the
87:15 - other as far as I'm concerned because I
87:16 - either have to invert it here or I have
87:20 - to invert it here
87:21 - so I don't know which would be more I
87:22 - mean I could have a counter so you know
87:24 - I could do this counter equals zero and
87:27 - I could run the loop backwards and then
87:29 - increase the counter but I don't know
87:31 - I'm gonna stick with what I have all
87:32 - right now I said this was gonna be a
87:35 - long one and I'm gonna let it just be a
87:37 - long one you want to stick around
87:38 - keep watching you could go through
87:39 - something else but what I'm going to do
87:41 - is now make this interactive so I want
87:44 - to make something where I can actually
87:45 - click here and I can turn on and off
87:48 - bits and see the conversion live so
87:52 - let's figure out how we're gonna do that
87:53 - so I think I want to use some
87:55 - object-oriented programming and I am
87:58 - going to make a class I'm going to make
88:02 - an add another javascript file called
88:03 - bit j/s and I am going to make a bit
88:07 - class and the bit class is going to have
88:12 - a and let me take off this auto refresh
88:15 - for right now it's gonna have an X I'm
88:20 - gonna just it's gonna have an x and a y
88:24 - and a psyche with a size maybe I'll make
88:30 - it on a circle so it's gonna have like a
88:32 - diameter I'll use a circle to represent
88:34 - each bit and then it's going to have a
88:37 - state right its state is going to be on
88:39 - or off then I'm going to have a show
88:43 - function or render I could call it where
88:46 - I'm gonna say a stroke 255 let's make
88:50 - the outline white and should it be I
88:54 - know I can never figure this out is is
88:56 - black on white on I don't know maybe I
88:58 - should make it red and blue we'll figure
89:00 - it out I'll we'll see how it looks so
89:02 - I'm gonna say draw an ellipse at this
89:06 - dot X this dot Y this dot diameter and
89:15 - its fill is going to be 255 times this
89:21 - dot state so in this case it would be
89:23 - white if it's on so what I want to do
89:26 - now is make an array and let's just
89:31 - let's just use eight we'll do a byte and
89:33 - actually so I could call this a byte
89:35 - well that's probably like a bad word for
89:37 - me to use because maybe that's reserved
89:39 - somewhere in JavaScript but let's say I
89:40 - equals zero I is less than eight I plus
89:44 - plus and let's make a bit equals a new
89:49 - bit at I times so let's say
89:52 - I want to fit all eight across in mind I
89:54 - could use Dom elements or something
89:56 - that's gonna be easier to interact with
89:57 - but I'm just going to draw them as
89:58 - circles so I am going to say I need to
90:01 - calculate a width which is the width of
90:05 - the canvas divided by eight so I'm gonna
90:11 - say it's its x value as I times with its
90:16 - Y value will be at fifty and its
90:19 - diameter will be W and I'm gonna say
90:23 - byte index I equals that bit and I guess
90:28 - I don't need a separate variable here
90:29 - I'll just do this and then I want to say
90:34 - here I want to say byte index I dot show
90:41 - so what do we got oh let me turn back on
90:43 - auto refresh and I've got some errors
90:48 - show is undefined I see a show function
90:52 - oh wait whoops I put these in the wrong
90:57 - place the creation of them has to be in
91:00 - setup and note stop don't all right
91:08 - unbid is not to fight oh of course I
91:11 - forgot that if I'm adding another
91:12 - JavaScript class I need to make sure I
91:15 - reference it from my HTML file and now
91:19 - we're seeing and if I if all of them
91:21 - have a state of on I'm not seeing
91:25 - anything
91:26 - so let's see oh I've got to pass in the
91:29 - arguments X Y D so right now I want to
91:33 - set the arguments based on this there we
91:35 - go
91:36 - there they are there's all my bits and
91:38 - maybe I want to offset them a little bit
91:41 - and maybe I actually want like this to
91:46 - be their diameter to be like have a
91:49 - little buffer in it whoops there we go
91:55 - so this is looking nice there are my
91:57 - bits thank you very much oh I'm excited
91:59 - about this this is gonna be good
92:02 - and now if I take the state and like
92:04 - state zero
92:05 - there we go so now let's make this state
92:07 - let's actually also initialize the state
92:11 - I'm just going to write that and in a
92:14 - separate so I'm gonna set State and I'm
92:19 - gonna actually say numb dot car at I so
92:26 - I'm going to use the character sorry I'm
92:30 - gonna use the the individual character
92:32 - there to set the state of the particular
92:34 - bit now set state is not a function
92:38 - because I need to add that in here and
92:41 - I'm going to say set state state and I'm
92:44 - gonna say this dot state equals and I'll
92:46 - add parse int in here just to make sure
92:48 - it's a number and now what's going on
92:54 - set state is not a function set state I
93:00 - see that as a function sketch dot o is
93:10 - not of course byte index I dot set state
93:14 - there we go so now as I change values in
93:20 - here it chain turns those bits on off
93:24 - okay we're getting somewhere now what I
93:27 - want to do is I'm going to add a decimal
93:32 - I'm gonna say decimal P decimal P equals
93:37 - create P grapey and then in the draw
93:45 - loop and it's filly that I have a draw
93:47 - loop here I don't need to continue to
93:48 - draw but that's something that can
93:50 - revise later I'm gonna say where's that
93:53 - function binary to decimal binary to
93:59 - decimal I'm going to say decimal P HTML
94:10 - binary to decimal num and so now we
94:15 - should see it says undefined whoo Oh cuz
94:18 - it's console.log again
94:19 - I want to return some okay 182 now you
94:23 - can barely see that so let me go to my
94:25 - CSS for a second and add a color and
94:28 - guess what I'm gonna use accessible
94:32 - we'll actually do it no I can use three
94:34 - FS because it'll but um let's use six to
94:37 - do RGB and let's also make the font size
94:41 - like much bigger okay so now and let's
94:45 - actually make this a just it's got this
94:48 - extra because it's a paragraph element
94:50 - actually this is so silly but I'm gonna
94:52 - make it a div just so it shows up up
94:55 - here okay so now this is not interactive
94:59 - but I could do this and it does feel it
95:03 - does look inverted right this really
95:05 - looks like on/off on on the way that
95:08 - I've kind of drawn this somehow the
95:10 - black color looks like I've turned it on
95:12 - so you know I could probably make the
95:14 - background much darker like if I made
95:16 - the background like 51 yes maybe this
95:20 - look like stand still I don't know it's
95:21 - so confusing
95:22 - what if I'm a I don't know which is
95:24 - which you tell me I my visual design
95:27 - skills are kind of a disaster but if I
95:29 - go back to this but anyway whichever way
95:32 - I think it is I could actually just say
95:34 - 255 minus this and now right now it is
95:39 - colored black when it is on and I could
95:41 - say one zero one zero one zero zero one
95:44 - we could see 169 okay should I make this
95:48 - interactive I mean I've gone on for way
95:49 - too long already
95:50 - let's make because I need to make this
95:52 - interactive do you know why because the
95:54 - whole point of doing this was to talk
95:55 - about pitch shifting and bit masking I'm
95:57 - gonna get to that that I'll do in a
95:59 - separate video let's make this
96:01 - interactive so what do I need here I
96:04 - need some sort of function to see if it
96:07 - if this a bit contains a point so if so
96:11 - what I need to do is calculate the
96:12 - distance between this point and its
96:15 - X&Y and then if the distance is less
96:21 - than the radius which is the diameter
96:24 - divided by two and it's this dot
96:27 - diameter and I'm going to call this
96:29 - toggle I'm actually just gonna I could
96:32 - return I'm going to make this
96:33 - toggle function then I'm going to say
96:35 - this dot state equals now if the state
96:41 - is a zero I want it to be a 1 if it's a
96:44 - 1 I want it to be a zero what's a nice
96:47 - way of doing that I mean I could write
96:48 - an if statement speed this part of me
96:57 - thinking up I mean not okay I thought of
97:09 - a way I could say not this times 1 right
97:15 - wouldn't it
97:17 - what's gonna give me a true with this
97:19 - work
97:20 - no we hold on yeah I know I could use
97:27 - that silly ternary thing no I know not
97:32 - state would work plus 1 mod 2 I love
97:36 - that to the power of negative 1 well
97:42 - these are all such good suggestions all
97:45 - such good suggestions true or false
97:48 - yeah yeah
97:55 - all right so people give me great
97:57 - suggestions like hold on I lost all the
98:05 - suggestions now Oh anyway oh yeah people
98:08 - are giving people give me great
98:09 - suggestions like plus one modulus two to
98:12 - the power of negative one I think I'm
98:13 - just gonna admit to myself that really
98:15 - what I meant was for this to be true or
98:18 - false so I'm gonna the state's gonna be
98:22 - false and when I say set state I'm gonna
98:24 - do parse boolean it's that a function in
98:26 - JavaScript let's see if it is and then I
98:30 - could say not this dot state parse
98:34 - boolean is not defined
98:37 - there's no parse boolean but if I do
98:39 - boolean ah there we go
98:41 - okay so boolean is like a function I
98:44 - guess or that will convert that to this
98:49 - and then here what I want to do is I
98:53 - could just say if this dot state fill 0
98:57 - and of course this is rather awkward but
98:59 - I don't care this is how I like to write
99:00 - code there we go
99:02 - mmm this is not this is no good no good
99:06 - that didn't work
99:14 - oh you know what those are strings so
99:22 - this needs actually say parse int there
99:25 - we go okay we're back we're back baby
99:28 - okay now this boy there's lots of things
99:32 - you could improve right all right now
99:34 - what I can do is make these interactive
99:36 - so I can now add the mousepressed
99:39 - function and I can just say for and I
99:44 - can loop through again once again I can
99:47 - loop through and this should really be
99:48 - byte length I can do this and I can look
99:53 - through all of them and I can say toggle
99:57 - whoops no and I can just call toggle
99:59 - with the mouse coordinates and now look
100:07 - at this oh but how come it's not
100:08 - updating oh shoot it's been a half an
100:10 - hour
100:12 - especially not so bad so it's toggling
100:22 - the toggling is working but it's not
100:23 - updating why is it not updating because
100:27 - oh I am converting this string this my
100:32 - function converts a string so I could do
100:34 - something like make the I could make the
100:37 - buying it the decimal version of the
100:39 - number out of the array of bit objects
100:41 - but I think what might actually work
100:42 - nicely here is for to make the string
100:47 - out of it so what if what I do now is I
100:51 - say in here I'm gonna say well let's go
100:55 - I'm just gonna use that same variable
100:57 - num equals an empty string and then I'm
100:59 - gonna say num plus equal
101:04 - oh this isn't set up sorry in draw plus
101:10 - equal oh now I want to have a 0 or a 1
101:14 - but in excited state so this is where I
101:19 - have to use but I have to embrace the
101:21 - ternary operator it's something that I
101:23 - have never natively really understood
101:25 - it's like never fit into my
101:27 - brain but there's this thing called
101:29 - ternary operator and it looks like this
101:33 - the condition and if the condition is
101:36 - true this is the result if it's false
101:39 - this is the result we can make this
101:41 - happen right now we can use that ternary
101:43 - operator the condition is actually just
101:46 - bite in X is 8 then I need the question
101:52 - mark and this is so nice I just need to
101:55 - have if it's true a 1 or a 0 its false
101:57 - oh I need to say recreate that string
102:09 - whoa look it's going crazy there we go
102:13 - look at this now oh so lovely let's go
102:21 - everybody we did it I made a binary
102:25 - thing that you can click on bits and
102:29 - convert it to a binary number now here's
102:31 - the thing oh boy you the creative person
102:34 - watching if you made to the end of this
102:35 - video
102:36 - wow you really are so big thank you I
102:39 - can't believe it because this was
102:42 - ridiculously long-winded to just explain
102:44 - binary numbers but you now have the
102:47 - opportunity to make something creative
102:48 - here you could what if you made it you
102:50 - could make a clock that displays the
102:52 - time in binary maybe you could actually
102:54 - also show the hexadecimal value you
102:56 - could actually make this a form content
102:59 - editable that you could convert
103:00 - backwards how do you convert this as a
103:02 - thought experiment for you I can come
103:04 - back and do another video but how do you
103:05 - convert not from binary to decimal
103:08 - how would you convert from decimal to
103:10 - binary I'll give you a hint it has to do
103:12 - with division and the remainder I think
103:15 - so there's so many things you could do
103:18 - you can make a more interactive version
103:20 - you could make a counter that sort of oh
103:22 - this would be fun to have this like
103:23 - count up in binary well that's kind of
103:25 - like the clock you'll be in color other
103:28 - ways of visualizing it you'll come up
103:29 - with something I know you will you
103:31 - always do thank you so much for watching
103:33 - this coding challenge and I will I
103:36 - remember at the beginning when I said
103:37 - the whole point of this was talking
103:38 - about pitch shifting a bit masking I
103:40 - will come back
103:41 - and I will do that so that will be in a
103:43 - separate challenge I'm going to add some
103:45 - buttons for shifting and masking alright
103:56 - okay alright everybody I can't believe I
104:02 - spent the entire two hours basically on
104:05 - this of course I wasted half an hour and
104:07 - I did it twice but I think we've got
104:09 - something maybe hold on I gotta check my
104:17 - schedule I sigh I sort of said I was
104:19 - gonna be done at 12:30 but I really want
104:23 - to do the masking and shifting because
104:26 - there's gonna be some really cool stuff
104:28 - you'll see what the shifting okay okay
104:39 - let me let me check the calendar here
104:45 - I'm on the calendar what time is the
104:48 - thing 1 o'clock ok the thing I need to
104:52 - go to is that one which is 40 minutes
104:54 - from now I also need to get lunch but I
104:56 - can bring lunch to the thing so I think
104:59 - that if I'm done at 12:45 that's ok all
105:06 - right everybody I don't know why but
105:09 - this really pleases me I really like
105:11 - this this is who I am
105:14 - alright and that's actually and I think
105:22 - I can actually get I think it would
105:24 - actually be better I'm just gonna adjust
105:26 - the code a little bit to
105:46 - yeah
105:54 - okay
105:59 - all right so let me save this as
106:04 - actually maybe I should make them all on
106:09 - yeah
106:11 - let me save this and save it as bits and
106:16 - bytes here is the URL if somebody wants
106:20 - to post this in the chat and now
106:31 - duplicate yes duplicate well let me just
106:37 - say interactive bits interactive bits
106:39 - let's call it that then I'm gonna say
106:42 - duplicate and I'm gonna call it
106:44 - interactive bit well interactive bit
106:48 - shifting okay let me organize the code a
106:55 - little bit
107:10 - all right
107:16 - if it still works all right here we go
107:19 - oh let me erase all this
107:54 - okay okay I will read this Zachary and
108:02 - the chat rightz read my joke
108:04 - why do mathematicians always a mistake I
108:07 - don't have like a laugh do I have a
108:09 - laugh track no or like a bump
108:12 - why do mathematicians always mistake
108:14 - Halloween and Christmas because acht 31
108:18 - equals Dec 25 I'm gonna put my salad I
108:25 - do thank you very much thank you all
108:30 - right um here we go
108:40 - hello welcome to coding challenge bit
108:43 - shifting so this is the second part sort
108:47 - of of this coding challenge series about
108:50 - binary numbers that all came from me
108:52 - work me do implementing this in the
108:55 - 7-segment display video coding challenge
108:58 - and then everybody asking what was that
109:00 - that you did this shifting and masking
109:02 - makes no sense to me so what I did in
109:04 - the previous video if you actually
109:05 - managed to watch that video was I
109:07 - created this little interactive binary
109:10 - to decimal converter system so this is a
109:14 - single byte with eight bits every bit
109:17 - being on I don't know maybe that should
109:19 - be white if it's on black if it's off it
109:20 - whatever but black in this case means
109:22 - it's on and so you can see here if I
109:26 - toggle all them off I have a 0 this is 1
109:31 - this is 2 this is 3 this is 4 so I can
109:37 - just toggle these bits on and off and
109:39 - get the decimal representation of that
109:41 - number ok so what do I want to do now
109:44 - what I want to do now is add bit
109:46 - shifting to this well what is bit
109:48 - shifting and why would you ever want to
109:50 - do it I don't know I mean I know what it
109:53 - is why you would ever want to do it well
109:55 - I needed to do it with my 7 segment
109:57 - challenge so maybe that's the reason why
110:00 - you
110:00 - do it let's okay so let's say for the
110:02 - sake of argument that we have the number
110:05 - 1 0 0 1 1 actually hold on let's say for
110:16 - the sake of argument that we have the
110:18 - number 0 1 0 1 1 0 1 0 so first of all I
110:25 - need to convert this into decimal just
110:27 - to I mean I don't need to to do bit
110:29 - shifting but just to sort of think about
110:30 - it so let's think about that this is 1
110:34 - so this is 2 + 8 + 16 + 64 so that's 80
110:42 - + 10 is 90 so this number is 90 where's
110:47 - my reciprocal okay so that's 90 so what
110:54 - is bit shifting so bit shifting when you
110:56 - take any number like the number 90 you
110:59 - can ask to for the computer to think
111:03 - about it in binary which it's already
111:05 - doing that's actually what it's doing
111:07 - and shift the bits around so I could say
111:09 - shift to the right
111:11 - or I could say shift to the left and I
111:14 - could say shift by a certain amount so
111:17 - let's say I just say shift to the right
111:18 - by one so this is bit shifting and what
111:22 - that actually does is it shifts all the
111:24 - bits over so this is a 0 this is a 0
111:27 - this shifts are here that's a 1 that's a
111:30 - 0 1 1 that's a 0 and this is a 1 now
111:33 - interestingly enough I can tell you that
111:36 - this is the number 45 I hope it's the
111:39 - number 45 why this is what's really
111:42 - interesting shifting the bits over by 1
111:45 - is actually the same operation as
111:46 - dividing by 2 think about the powers of
111:48 - 2 and a binary numbers work shifting to
111:50 - the other way to the left is multiplying
111:54 - by 2 look at this let's be sure about
111:55 - this this is 1 2 4 8 16 32 so 40 + 5 45
112:07 - I was right so this is what bit shifting
112:11 - is basically does so in theory does when
112:15 - you say 90 divided by 2 does it shift
112:18 - the bits I don't know maybe but this is
112:20 - actually I've heard I think this was
112:22 - right that this is a faster way to / -
112:24 - of course you can only do it with
112:25 - integers and how floating point numbers
112:27 - are representatives of bits is a whole
112:28 - other discussion
112:29 - but now what we can do is let's add this
112:32 - feature to our code and by the way we
112:36 - can shift by more than one at a time I
112:38 - could shift by four bits etc but all
112:41 - right
112:42 - and you might be thinking yourself I
112:44 - don't get it
112:45 - why is this one a zero like wouldn't
112:48 - there be some bit over here to shift in
112:50 - well when you apply bit shifting you can
112:52 - imagine that the number 90 if you were
112:54 - represented in two bytes all of these
112:56 - would be zeros so it always can only
112:59 - sort of assume that thing to the right
113:00 - of zero and whatever is here gets
113:03 - shifted over and basically gets removed
113:05 - so by the way if we tried to shift again
113:06 - and divide this we would get what would
113:08 - we get we get the number 22 we wouldn't
113:11 - get 22 and a half because we get the
113:13 - integer value of dividing that by 2
113:15 - which takes off the decimal value ok
113:18 - let's add that so let's go over here and
113:21 - let's add a button let's add a shift B
113:26 - button and let's say and I'm just using
113:29 - shift button equals create button and
113:33 - I'll put this in the button so now it's
113:38 - it's so tiny but that's fine so this is
113:41 - going to be my button whenever I click
113:43 - it I'm going to shift the bits to the
113:45 - right so how am I going to do this hmm
113:48 - function so let's let's say shift shift
113:56 - button shift bits so I'm going to write
114:01 - a function called shift bits Q all of
114:07 - the jokes about me being Daniel shift
114:09 - man Mon chief ma what function with a C
114:14 - and now is not a function
114:18 - shift bits shift button Oh shift
114:21 - dot mousepressed this is the p5 Dom
114:24 - library that I will be able to attach a
114:27 - function as event to when I click the
114:28 - mouse on this button so now what I'm
114:31 - gonna do is okay well here's the funny
114:34 - thing is I I was doing this to show you
114:36 - about bit shifting oh I guess I could
114:38 - take that
114:39 - Oh interesting oh look at this think
114:41 - about ah this is really interesting so
114:45 - what there's a couple ways I could
114:46 - approach this problem if you watch the
114:48 - previous video all of these are like a
114:50 - bit object and I can I've kind of kept
114:53 - all information about like its X&Y its
114:56 - diameter and its state and I'm rendering
114:58 - it but what I'm actually gonna do here
115:01 - is I can take the decimal version right
115:06 - so so this is a little bit of code here
115:11 - I'm going to put into a function which
115:13 - is going to be which is just gonna be a
115:15 - function like get decimal so whatever
115:19 - the state is I'm going to get
115:23 - oh no that's get sorry get binary string
115:30 - this is going to return the binary
115:33 - string of whatever the visualization is
115:36 - reporting so I'm gonna say get binary
115:42 - string so now I'm back to what I had
115:45 - before right but now in this shift bits
115:49 - I can't do exactly this again so I want
115:55 - to get the binary string then I want to
115:58 - get the number then the value equals get
116:05 - you close binary to decimal
116:08 - oh that number then I want to say Val
116:13 - equals Val shift by 1 so I want to shift
116:16 - the bits over by 1 but now I'm gonna
116:19 - have to convert that back to binary I
116:22 - don't actually have a decimal to binary
116:26 - function what I want to say now is num
116:29 - equals decimal to binary right
116:35 - of value so this is what I want to do I
116:38 - want to be able to now anytime I click
116:42 - this get the could get the conversion
116:44 - back to decimal oh I have to write a new
116:46 - function so this was binary to decimal
116:49 - now I need to write a function I know I
116:52 - knew I would have to do this I left this
116:54 - as an exercise but I'm gonna need it now
116:56 - decimal to binary now again I could get
116:59 - JavaScript to do this for me natively
117:02 - with two string so for example if I just
117:04 - open up the console here and I were to
117:06 - say let numb equals 90 I could say numb
117:11 - to string two I'm done maybe I'll just
117:15 - do this it'd be really nice to just do
117:18 - this but I'm gonna do it myself
117:20 - so what I'm going to do is I need to get
117:23 - now I get a value in oh I'm using these
117:26 - variable names and terrible ways I need
117:28 - to do a refactoring of this with better
117:29 - variable names and what I'm going to do
117:32 - is and I know I'm going to always do
117:34 - this as eight bits so this is a bit of a
117:36 - constraint I don't have to be so super
117:38 - generic here I'm gonna say int I know
117:41 - not int let a equal zero ah I is less
117:46 - than eight I plus plus and now what do I
117:51 - want to do I need to divide it by so
117:54 - here's the thing how do you this work
117:55 - I'm pretty sure this is how you do it
117:58 - let's say I'm going to take the value 90
118:03 - and try to turn that into binary so my
118:07 - theory here is that I'm going to divide
118:09 - by 128 divided by 64 divided by 32
118:18 - divided by 16 divided by 8 divided by 4
118:24 - and you can see what I'm doing here I am
118:27 - taking the thing same thing I did powers
118:29 - of 2 but I'm going to use the division
118:31 - operator what do I get when I say 90
118:34 - divided by 128 I get a 0 90 divided by
118:38 - 64 I get a 1 remainder something 90
118:44 - divided by 32
118:46 - oh here's the thing
118:49 - so what's the remainder okay so this is
118:51 - what I need to the remainder here is
118:54 - sorry 60 470 480 426 so this bit is
119:02 - going to be a 1 and now I take that I
119:04 - don't take do 9 u divided by 32 ah what
119:07 - am I thinking here this is not what I
119:09 - meant to do ah something fell over get
119:13 - rid of this 9 here so this is 0
119:16 - remainder 90 basically right 0 remainder
119:19 - 90 so that remainder comes over here now
119:22 - it's 1 remainder 26 26 comes over here
119:26 - 26 divided by 32 is 0 remainder 26 26
119:31 - divided by 16 is 1 remainder 10 right 10
119:36 - divided by 8 is 1 remainder 2 you can
119:39 - see where I'm going here so I should be
119:40 - able to do this now come back over here
119:42 - to the code it's weird how much fun this
119:46 - is for me
119:48 - so what I need to do now okay so I'm
119:50 - starting with the number and I'm gonna
119:52 - say the binary bits is this I'm going to
119:59 - use a string and I'm going to go from 2
120:03 - to the 7th I equals 0 I is greater than
120:06 - equal I starts at 7 I goes down to 0 I -
120:10 - - and the remained I'm going to need
120:13 - this remainder value so the first thing
120:15 - that I want to do is to call the divisor
120:19 - equals power of 2 to the I then what I
120:25 - want to do is I need to do integer
120:28 - division so I want to say number I want
120:32 - to say the the answer or the the value
120:36 - the bit value equals number divided by
120:44 - divisor pause for a second I lost my
120:48 - chat
120:58 - number by divisor this is kind of
121:03 - awkward is there a way to do integer
121:07 - I'll just use foot number divided by
121:10 - divisor here's the thing I'm gonna use
121:12 - floor so Java JavaScript natively it's
121:16 - going to do everything as floating-point
121:17 - if I were in like the Java programming
121:19 - language it would just give me the
121:21 - without the remainder so and then I'm
121:24 - gonna say the remainder equals the
121:30 - equals the hold on it lost my train of
121:37 - thought for a second all right
121:39 - I lost the chat over here because I'm
121:40 - getting things are beeping at me to go
121:42 - to meetings
121:50 - okay what division it's like oh he's
122:10 - modulus you can simply do mod two to the
122:20 - I remainder equals numb okay sorry okay
122:34 - I forgot I forgot something that I have
122:37 - a whole video actually Golan Levin came
122:39 - did a guest tutorial about a particular
122:41 - operation called modulus represented I
122:44 - think they operated students called
122:45 - modulo and maybe they symbol is modulus
122:48 - I can never remember this someone's
122:50 - going to get a lot of comments telling
122:52 - me the correct way to do this I could
122:53 - just see it already but this gives you
122:55 - the remainder of the division operation
122:57 - so what I can do here and this by the
123:01 - way this should be remainder and
123:03 - remainder should be numb and then the
123:06 - remainder is the remainder modulus
123:12 - divisor right and now oh and this and
123:19 - the bit value is bits plus equal bit
123:22 - value boy is this possibly right and
123:25 - then return bits where did I let's just
123:33 - see if this function even works so one
123:36 - thing I could do actually I'm just going
123:38 - to go that the p5 web better consult
123:40 - isn't interactive but I can go here to
123:43 - the canvas frame and I can say right
123:46 - what was that name of that function
123:48 - decimal to binary and if I have the
123:53 - decimal number like one hunt
123:58 - I think that's right it works okay
124:03 - it's 255 yeah okay great
124:07 - so that works so now we're when I'm
124:12 - shifting right what was I doing I was
124:13 - shifting then I get decimal to binary
124:17 - and then what do I need to do update
124:20 - this is really in draw right in draw
124:24 - there's a draw function somewhere this
124:26 - is like update the states what oh no oh
124:31 - no where do I do that
124:34 - oh I did that here so I need to update
124:36 - all the states so look I have a set
124:38 - state function how convenient
124:40 - so I also now once I do that I need to
124:43 - go through and set the state to numb car
124:48 - at I and and this probably has to be a
124:55 - number but maybe I have that in set
124:57 - state oh it's Bulli
125:00 - right I forgot I have this whole crazy
125:01 - thing to take this string which is 0 1
125:04 - turn it into number and turn it into a
125:05 - boolean perfect so it does that already
125:07 - so now I can shift oh boy / 2 / - look
125:12 - at this oh my goodness so I can now bit
125:15 - shift wow this is let's go back to 90
125:18 - right this is 90 whoops
125:21 - 90 okay ready here we go let's this is
125:25 - gonna be exciting moment no no aah don't
125:27 - click there no get back to 90 there we
125:30 - go
125:43 - but we now have interactive bit shifting
125:45 - now you the viewer of this you probably
125:48 - want to add shift the other way that
125:50 - wouldn't be too hard to add I do just
125:52 - add another button ship the other way
125:53 - maybe I want to actually have like a
125:55 - slide or shift by a certain number of
125:56 - bits maybe I don't want to limit myself
125:58 - to eight I want to have two bytes
126:00 - displayed but there's all sorts of
126:03 - possibilities now in terms of how I can
126:05 - do bit shifting I've got a new bit
126:06 - masking that's good because he's gonna
126:08 - be another video here okay but there's a
126:10 - couple things I want to I know everyone
126:13 - is going crazy that I have the black is
126:16 - on let's fix this let's make it more
126:20 - clear so I don't leave leave everybody
126:24 - in such a traumatized State so I'm gonna
126:27 - make the background 51 and then I'm
126:32 - going to in fill or I'm drawing it I am
126:37 - going to and let's let's use a ternary
126:44 - operator I'm comfortable with them now
126:47 - so I'm gonna say fill this dot state if
126:52 - this that state is on the Phyllis 255 or
126:55 - if it's off zero there we go so this is
127:00 - they're all off now they're on it looks
127:04 - weird to me
127:05 - Oh background 51 is like the same as the
127:09 - actual anyway so and I could shift now
127:11 - that's crazy yeah that looks better
127:13 - right I'm shifting down okay I forgot
127:18 - about you the viewer alright so I don't
127:21 - know thrill me with your weird weird
127:27 - variations on this I look forward to it
127:30 - I do need to do something about bit
127:32 - masking which I will do an ampersand and
127:35 - or an or and Simon has been telling me
127:39 - breaking news in the chat over and over
127:43 - again I can also do X or so you can also
127:46 - do X or as a bit wise operation so
127:49 - thanks for watching this challenge and
127:52 - I look forward to seeing what you make
127:53 - share with me stuff in the comments all
127:56 - your Corrections and complaints and
127:58 - happy thoughts or whatever and I'll see
128:00 - you again in another video goodbye all
128:09 - right all right everybody I've got to go
128:14 - oh yeah
128:23 - Soyuz 51 oh yeah yeah okay use 51 for
128:36 - disabled no oh yeah that's everything on
128:40 - and then make the stroke weight for this
128:49 - came from oh oh you're the chat scrolled
128:52 - by it yeah this is better but maybe also
128:57 - I want to just make this 200 yeah or
129:00 - maybe I want to make the stroke then
129:01 - zero how about that I don't know I can't
129:04 - figure out what to do I don't make it
129:06 - better
129:06 - I am so visually challenged stroke like
129:11 - what about if it was like pink or
129:13 - something I'm so visually challenged I
129:18 - think I'll just leave it let's just
129:20 - leave it at this let's make the stroke
129:22 - weight to not forty to two and let's
129:27 - have them be off at the beginning I
129:33 - could actually let's make it random at
129:37 - the beginning sets state random - yeah I
129:44 - was gonna add floor in here but let's
129:47 - all right so that's good
129:49 - every time it starts it's something
129:51 - random okay
129:55 - ah
129:59 - Nathan writes second time in a row I've
130:02 - super chatted Dan and it went past him
130:04 - without noticing and Simon wants me to
130:09 - show the gist okay so hold on let me
130:12 - find well how come it goes away I don't
130:13 - see it here but thank you Nathan you
130:16 - solar liner I believe for the super chat
130:19 - that is very kind of you I'm sorry that
130:21 - I missed it I don't know how to like see
130:23 - the super chat if it's like in the past
130:26 - I don't have that maybe I can see it in
130:29 - my view over here no top chat no live
130:35 - chat super I can I can send a super chat
130:40 - what if I send a super chat to myself
130:43 - this is interesting
130:56 - was it gonna let me so far it's letting
130:58 - me hey it worked okay now can I see
131:07 - previous ones no I don't think so sorry
131:16 - I got a million messages here in github
131:21 - I mean it's like okay a super chapter
131:24 - floorliner tada now go to your meeting
131:26 - thank you
131:29 - I can probably see it in the history of
131:32 - my whatever what you might call it
131:36 - YouTube super I got to go get lunch I've
131:39 - ten minutes to get lunch before this
131:41 - thing I'm going to I don't want to be
131:42 - too late to it but I do
131:46 - oh and I forgot to record this thing to
131:47 - disk again I'm sorry Matt see I can't
131:49 - know why I can't remember that these
131:50 - days I there was something that I wanted
131:53 - to do there's something else Oh Simon's
132:00 - just alright so gist github.com slash
132:07 - Simon - Tiger let's find this gist
132:12 - bitwise j s these are all the bitwise
132:16 - operations and or XOR not who not would
132:23 - be a fun one to do zero Phil shift left
132:27 - zero Phil shift right and signed boy so
132:31 - many more things to talk about
132:32 - Chris ray asked are you going to word
132:34 - Tyvek today sadly apparently no because
132:38 - I make a list of things to do and I
132:40 - think like it's I have two hours and I
132:42 - take much longer to do them so I the
132:45 - word to Beck's stuff I'm going to do
132:46 - because I teaching it in my class
132:49 - actually here at NYU next week so
132:51 - hopefully it'll happen next week maybe
132:53 - maybe I can find a time before next
132:56 - Friday even to do it I do want to
132:59 - mention one thing which is I'd be
133:05 - curious for any feedback on this I've
133:08 - been really trying to find a new
133:09 - merchant
133:09 - I shop people request merchandise and
133:12 - actually if I just go to I think the
133:18 - coding training channel and go to
133:20 - community tab I posted a link there so
133:25 - this is a bunch of new designs that I'm
133:28 - actually wearing one of them right now
133:30 - the microphone just went you know the
133:32 - microphone is still attached to me you
133:34 - can see never forget that this dot shirt
133:38 - is here underneath so adjacent Haglund
133:43 - who has done all the illustrations for
133:45 - the coding train has made a whole new
133:46 - set of designs with I'll refactor that
133:48 - later never forget this dot and all the
133:50 - different coding train characters so
133:52 - I've been trying to find a good place to
133:54 - have these available for people who are
133:56 - interested and I really like this new
133:58 - site called designed by humans so right
134:01 - now it's just in progress there's very
134:03 - few options
134:04 - ooh apparently I can sign up and get 10%
134:06 - off my next order can I go away from
134:09 - that but for example if I click here I
134:13 - think I can see like this shirt but
134:17 - there's like other colors and there's
134:19 - like anyway I'm curious for feedback
134:21 - does this you don't have to buy anything
134:22 - but you could sort of like click around
134:24 - here just see how it works for you and
134:26 - then a comment in this thread with any
134:30 - feedback or things that would be helpful
134:33 - then that would be that would be super
134:36 - helpful to me I'm gonna try to launch
134:37 - this hopefully sometime next week
134:39 - and I believe this is this is my
134:41 - question so Rahul asked can you send
134:44 - those t-shirts to India one of the
134:46 - reasons why I picked design for humans
134:48 - is well one is they they seem to have a
134:51 - nice policy in terms of the quality and
134:54 - labor practices of the shirts that they
134:55 - make so again I haven't done a deep dive
134:58 - into this but a brief view of their site
135:00 - seems like a good organization with good
135:02 - quality stuff made in with good
135:05 - practices and they also have
135:06 - international shipping at reasonable
135:08 - prices so check that for me Rahul even
135:11 - if you don't buy anything if you could
135:12 - click all the way into like where the
135:14 - last step before you would buy or at
135:16 - least calculates your shipping let me
135:18 - know what that price is for you to India
135:19 - you can send me a tweet or a comment on
135:21 - that thread
135:22 - in the community tab I would love to
135:23 - know that all right everyone ma you are
135:28 - so wonderful to give a shout out doesn't
135:33 - need a shout out but I've been watching
135:34 - smarter every day recently loved those
135:37 - videos and watching them with my kids
135:39 - random shout-out to a much larger
135:42 - youtube channel than me
135:45 - but i one of the things that I saw that
135:47 - I was actually thinking of doing is a
135:48 - coding challenges recent we can find it
135:50 - a smarter every day I really need to go
135:53 - this is something I'm thinking of doing
135:55 - I never know like about reappropriation
135:58 - other contests okay not the backwards
136:02 - brain bicycle this one cannon shockwaves
136:07 - let me find um he shows oh wow these are
136:13 - like not skippable ads interesting I
136:15 - don't have not skippable ads enabled for
136:17 - my channel spectra by the way oh thank
136:21 - you
136:22 - ah okay oh my goodness the gaming Jin
136:29 - writes I want to thank you for all the
136:31 - videos you have made they're super
136:33 - useful by the way I am deaf so I can't
136:36 - hear you in the stream alright so I want
136:41 - to just pause for a second to address
136:43 - this I have been I'm really priority for
136:46 - me as accessibility and I have all of my
136:48 - video tutorials the edited versions that
136:50 - come out of the livestream that I use
136:52 - for my courses all of those are now
136:53 - being captioned through rev.com and I
136:56 - make sure that captions are there before
136:57 - I upload publish them so I would like to
137:00 - know I'd love to hear from you if those
137:01 - captions are helpful and work for you I
137:03 - some of my recent live streams and I
137:05 - recognize the absurdity of me doing this
137:07 - where the gaming Jin is not able to know
137:09 - what I'm talking about right now there
137:11 - are automated captions but I have been
137:14 - trying to do live captioning with a
137:16 - company called white coat captioning so
137:18 - I'm gonna type a message to the gaming
137:22 - jinn right now just in the chat please
137:29 - get in touch via email or Twitter I'd
137:33 - love to chat
137:36 - captioning for accessibility so I'm
137:40 - writing that in the chat right now there
137:44 - is I do I think I have the automated
137:46 - live captions which are something but
137:50 - anyway I would love to I love to be in
137:52 - touch to figure out ways to make the
137:53 - live streams more accessible and I've
137:55 - actually been asking YouTube about this
137:56 - directly so somewhere in this video
138:01 - Destin does frame differencing on the
138:03 - slow motion this is it this is like
138:06 - totally wild so this is a slow-motion
138:09 - cannon firing but with a frame
138:15 - differencing algorithm applied to it and
138:17 - it really like shows these shock wave
138:19 - patterns I was maybe I'll get in touch
138:22 - with Destin I would love to get the raw
138:24 - footage and try to implement the code
138:26 - and I guess I could probably pull it off
138:27 - the channel but I think I probably ought
138:30 - to get permission to do this well that's
138:31 - a giant Destin there if I'm saying the
138:33 - name raise it Dustin or Destin but I
138:38 - would love to get to try to do that in
138:41 - processing I think that would be
138:42 - interesting okay I was watching this
138:47 - last night with my kids and they stayed
138:48 - up way too late
138:49 - no more smarter every day at night kids
138:51 - you kids stay up late watch the smarter
138:54 - every day but my kids go to bed on time
138:57 - please thank you very much everybody I
139:02 - have to go this is the end of today
139:07 - [Music]
139:10 - I'm gonna just check the chat
139:13 - [Music]
139:16 - Destin okay I am I recently had the
139:20 - chance to meet Destin that was awesome
139:21 - of him oh I was I played it cool though
139:28 - alright looking at the chat we'll get
139:34 - the chat all right all right everybody
139:39 - do you dye your hair because you had
139:41 - videos with gray hair you know I don't
139:43 - it's a great question actually and I
139:45 - think what it is is the green screen
139:47 - actually makes the gray less also when I
139:51 - have shorter hair it's not as obvious
139:54 - and the focus will be off you can see
139:57 - first of all you can see me with a
139:59 - balding up here but I think for whatever
140:03 - reason the a green screen maybe if I go
140:05 - to the if I take that off this is very
140:09 - important to address of course
140:14 - [Music]
140:16 - this is the question I'm choosing to
140:18 - answer each oh wait no it's here what's
140:28 - locked filters yeah I turn off the
140:35 - filtering nope ah there we go all right
140:41 - there's my baldness and my gray hair
140:44 - plenty of gray hair but somehow the
140:48 - camera makes me look younger we turn
140:55 - that back on
140:58 - [Music]
141:06 - and
141:07 - [Music]
141:11 - I have to put this back no open
141:17 - broadcaster you ill enough there we go
141:19 - goodbye everybody good night see you
141:22 - next week I have to find where I shut
141:25 - the stream off awkwardly gonna be here
141:27 - for a little longer Lotte be on the
141:32 - lookout for my word to vex series which
141:33 - is going to start publishing public as
141:36 - soon as this weekend or Monday or
141:39 - whatever and yeah