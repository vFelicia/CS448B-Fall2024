00:01 - [Music]
00:11 - [Music]
00:18 - good afternoon again here on coding
00:25 - train my name is Dan NASA kop and the
00:31 - chat asks does it start now in fact it
00:34 - starts now or maybe officially it starts
00:38 - now welcome to the coding train
00:40 - afternoon edition there was a full two
00:43 - and a half hour morning edition of the
00:45 - coding train today where I completed
00:51 - completed is perhaps not the most
00:53 - accurate way to describe what happened
00:55 - but I did attempt to continue to work on
00:59 - the logo coding challenge but that's all
01:02 - I'm done with that I won't be returning
01:06 - to that anytime soon just in case you
01:07 - weren't here this morning I will show
01:09 - you I will pull this up very briefly if
01:13 - I go to a logo coding train slash logo
01:18 - this is the github repo there are some
01:22 - issues here that I would love help with
01:25 - and thoughts on there are a couple of
01:27 - design pull requests but I merged a
01:30 - couple things without checking them so
01:31 - let's actually see coding train github
01:34 - slotto slash this should be the demo and
01:38 - it still works so there you go so this
01:41 - is what it does it is a logo interpreter
01:43 - where you can type logo commands and it
01:45 - will draw them for you and apparently
01:47 - now it supports some some new commands
01:50 - that it didn't as of this morning based
01:52 - on a few pull requests but I don't want
01:53 - to rehash that too much what I want to
01:57 - do I'm just gonna get right into things
02:04 - right into things I am going to continue
02:07 - today the beginner's guide to machine
02:10 - learning with ml v j s in particular i
02:12 - am going to make
02:14 - new video which will appear as number
02:16 - seven in this playlist and what I'm
02:21 - going to do is I'm going to take this
02:24 - previous example that I made and I am
02:28 - going to save which trains a model I'm
02:31 - gonna save that model and then reload it
02:35 - back into the sketch so that I don't
02:38 - have to constantly retrain every time i
02:40 - refresh the page etc so this has been a
02:43 - long overdue feature or a widely
02:46 - requested feature in the ml 5 library
02:48 - let's go to github let's go to issues it
02:52 - might be closed let's look where did
03:03 - this get added there we go so this is
03:14 - the support this is the pull request ok
03:18 - so I'm gonna leave this open ok yes Kay
03:26 - we c'mon here we are again
03:28 - I am streaming extra a little bit extra
03:31 - I decided to come try to do two streams
03:33 - today because AI didn't get to last week
03:35 - because I was teaching and then also I
03:38 - will just mention again that I will be
03:39 - next week next Saturday at thinker con
03:42 - in Huntsville Alabama a place I've never
03:44 - been to the home of the rocket and if
03:48 - any of you are going to be there please
03:49 - say hello ok alright let's just get
04:00 - started here alright let's just get
04:05 - started let's that's is so so what else
04:06 - am i I've got an hour or so or to some
04:10 - amount of time
04:11 - I am definitely I'm gonna start with
04:13 - this ml 5 save load model I am going to
04:16 - also look at an example with working
04:18 - with the Google quick-draw dataset
04:20 - because that is a leading up to looking
04:26 - at
04:26 - sketch RNN model in ml5 so many things I
04:29 - got a long ml5 list of things to cover I
04:32 - want to look at the new some new stuff
04:34 - that's been added for recurrent neural
04:35 - networks with text sketch RNN pose net
04:40 - KNN classifier so many things so lets us
04:46 - begin hello I am here to make video
04:54 - number seven which is not yet exist if
04:56 - you have been watching this playlist the
04:58 - place where I left off was training a
05:11 - hold on I forgot I forgot to turn on
05:15 - this part of my brain hello welcome to a
05:20 - new ml five beginners guide to machine
05:23 - learning video I am about to make video
05:26 - number seven right now that's what
05:28 - you're watching I'm where I left off I
05:30 - looked at how you could train your own
05:31 - image classifier with images coming in
05:34 - from the webcam with a technique known
05:36 - as transfer learning this is the example
05:37 - so this example needs to be trained but
05:39 - I could do this again a lot examples of
05:43 - me being happy a lot of examples would
05:46 - be being sad then I can hit the train
05:49 - button and once it finishes training it
05:51 - is then going to be done now hi this
06:00 - this failed
06:01 - I shouldn't been so I didn't give it
06:03 - enough ok what we're trying this time
06:09 - with feeling everybody don't you just
06:11 - love watching the live stream before I
06:13 - just do the same thing over and over
06:15 - again hello and welcome to another
06:19 - beginner's guide to machine learning
06:21 - with ml 5 G's video this is video number
06:23 - 7 in this playlist at least that's where
06:25 - I intend it to be and in this video I'm
06:27 - gonna take a step forward I am going to
06:29 - do something that has been so widely
06:31 - requested a new feature that was
06:33 - recently added to ml 5 to save and
06:36 - reload a model now what kind of model am
06:39 - I talking about
06:40 - the last example I left off with was
06:42 - this transfer learning example where I
06:46 - can train my own image classifier with
06:49 - images coming in from the webcam so for
06:51 - example I could say here's a lot of
06:52 - images of me being happy what's going on
07:00 - what are you doing sad then I'm gonna
07:06 - train it and then I'm gonna come back
07:09 - it's gonna be done ha-hey so that works
07:15 - but what happens now if i refresh the
07:18 - page need to be trained again that model
07:22 - is lost
07:23 - so there is a new feature in ml 5 a load
07:27 - function in the save function or a save
07:29 - function the load function this is what
07:30 - I'm gonna show you in this video let's
07:31 - see if we can get it to work that's it
07:34 - so I've got the code from the previous
07:36 - example here to pull it up and what I'm
07:39 - going to do let's add another button
07:41 - where'd it where the buttons did I use
07:43 - create yeah I use Create button I guess
07:44 - so I'm going to go into setup and I'm
07:47 - gonna these are called Duke buttons and
07:50 - whistle buttons because why not I'm
07:54 - gonna make a save button equals create
07:57 - button save then I'm gonna say save
08:01 - button Mouse pressed I'm gonna put an
08:04 - anonymous function in here and I am
08:07 - going to now say classifier dot save
08:11 - that's it the classifier object if you
08:15 - remember is a classification object made
08:22 - from a feature extractor from the mobile
08:24 - net library ratalie Mike
08:27 - sorry timeout is the Micah problem
08:47 - is this better now okay so Mike okay I
08:51 - kind of want to start this video over
08:53 - again I just I'm waiting before I keep
09:03 - going to see that the sound is okay yes
09:10 - one two one two my mic is clattering a
09:13 - lot is it still clattering maybe I
09:15 - better go back and redo this whole video
09:16 - nothing would make me happier
09:19 - let's actually see if this works well
09:26 - I'm here I redid
09:34 - classifier debt see oh I forgot
09:38 - great so this I'm going to have this
09:40 - happen because I have to upgrade my
09:42 - version of ml5
09:55 - yep great okay so that worked
10:04 - okay
10:09 - and we tell it not to show the warnings
10:18 - so where's the where's the preference
10:21 - for showing warnings so I kind of would
10:25 - prefer not to see them frankly I network
10:31 - your evaluation preserve vlog show
10:36 - warning somebody'll show me it's anyone
10:42 - in the slack can't channel could tell me
10:43 - how the mic is going I would really
10:46 - appreciate that show warnings chrome
10:52 - hide warnings in the console window is
10:56 - their top filter errors level warning
11:00 - okay so it must be I just don't see it
11:03 - here because there we go so let's ah
11:11 - there we go
11:12 - there it is got that okay the mic
11:22 - quality is perfect now okay apologies to
11:24 - everyone but just because there was some
11:25 - mic issues I'm gonna start over and so
11:40 - I'm actually going to do this and go
11:44 - back to here take this out
11:51 - fresh all right here we go everybody so
12:03 - I realized that some of you watching
12:06 - might not have actually gone through
12:08 - this video tutorial ml the idea of ml
12:10 - five might be totally new to you just
12:12 - very briefly ml five is a beginner
12:15 - JavaScript beginner friendly JavaScript
12:17 - library for machine learning it's built
12:19 - on top of tensorflow das which is the
12:21 - open source machine learning a library
12:23 - made by google tensive load address is a
12:25 - javascript port of types or flow which
12:27 - is C++ and Python and you know mmm
12:30 - that's about as far as I'm going to go
12:32 - with that right now and this series
12:36 - explains how image classification works
12:38 - with the pre-trained model and then how
12:40 - you can train your own model on top of
12:42 - that so that's where I left off but you
12:44 - could never save it so now here we are
12:56 - hello and welcome to another beginner's
12:59 - guide to machine learning with ml five
13:01 - jazz video it's gonna happen if you
13:07 - happen to watch all the previous videos
13:08 - a while ago and you discovered this one
13:10 - new a new feature has been added to ml
13:12 - five the save load feature extractor
13:15 - with ml five specs so you can find the
13:17 - pull request here if you want to see
13:19 - more about how that was implemented but
13:21 - the point of that is the following where
13:24 - I left off was this example this is an
13:27 - example that loads a pre-trained image
13:29 - classifier called mobile net something
13:31 - that was trained by somebody else
13:32 - explained in my previous videos and
13:34 - allows you to allows the user allows the
13:37 - coder to use a process known as transfer
13:39 - learning to extract the features from
13:42 - the that they have to model the text in
13:45 - an image and reassign them to new labels
13:47 - so for example I can make a very happy
13:49 - face and click on happy a bunch of times
13:53 - and wonder why my Mac is showing that
13:55 - weird window and then I could add a
14:00 - bunkered times and then click train and
14:03 - now we have to wait for
14:04 - minute we always blow the train whistle
14:07 - for train oh and how the training is
14:09 - complete and I go hey let me go back and
14:15 - do this kit it's really bothering me
14:17 - that this clicking on this is like was
14:20 - pulling that thing up it's because I'm
14:21 - selecting the text all right okay when
14:30 - I'm kind of standing in front of it too
14:32 - so at this example I can make a happy
14:34 - face and click happy this is me giving
14:38 - it a bunch of examples of me being happy
14:40 - and then we've been retired now I can
14:47 - press that train button it is training
14:50 - and now that it is finished training it
14:53 - will recognize it will - it will
14:56 - determine if the webcam is showing an
14:58 - image that looks more like happy or sad
15:01 - happy happy happy okay so that's what
15:09 - the example did before if you're still
15:11 - watching what the problem with this
15:13 - example is if I hit refresh it's gone it
15:17 - needs to be trained again so what I want
15:20 - to show in this video and boy it's taken
15:21 - me a long time to get to it is how to
15:22 - save and really there's just two
15:24 - functions we're gonna add here a
15:25 - function and a load function so I'm
15:27 - starting with the code from before and I
15:29 - am going to go into setup and this is
15:32 - where I made the buttons for sad and
15:34 - happy and train I gave them like weird
15:36 - variable names which don't have any
15:38 - meeting anymore but I'm gonna make a new
15:39 - button called save button equals create
15:41 - button save I guess I should I guess I
15:46 - should make this a global variable just
15:48 - to be consistent that might be
15:49 - unnecessary but and then I'm going to
15:53 - add a function to handle the event when
15:57 - the Save button is pressed so what do I
15:59 - need to do when the Save button is
16:00 - pressed guess what this is super simple
16:02 - all I need to do is say classifier dot
16:05 - safe
16:05 - I'm just saying classifier I should know
16:07 - what's gonna happen there let's wait and
16:09 - see so I'm gonna go here I'm going to oh
16:12 - look the Save button is there going to
16:14 - be happy
16:15 - I'm gonna train then I have to wait for
16:18 - it to finish training once it's done I'm
16:21 - gonna hit save and guess what I got an
16:23 - error save is not a function so I left
16:25 - this error happen on purpose this is a
16:27 - new feature of the ml 5 library and if I
16:30 - go and look into my HTML I can see I'm
16:32 - using the ml 5 their library 0 point 1
16:36 - point 1 maybe you're watching this maybe
16:38 - it's like right now it's like 9 point 4
16:40 - point 3 and you're like in this like
16:43 - future world of ml 5 but the current
16:46 - version is 0 point 1 point 3 so if I add
16:49 - that I'm going to hit refresh now I'm
16:51 - gonna really try to train a good model
16:52 - here so let's try oh I don't have the
16:54 - ukulele I do have the train whistle
16:57 - so I'll just do happy and set I'm happy
16:59 - with the train whistle and I'm very sad
17:07 - with no train whistle I don't have a
17:10 - train whistle now I'm going to train so
17:15 - I gave it a whole bunch of examples and
17:17 - Oh something weird is going on here ok
17:20 - let's see if this works
17:23 - happy I'm happy with the train whistle
17:25 - I'm sad no train whistle I'm happy with
17:27 - the train wrist full I'm sad no train
17:29 - was long and I want to keep this model
17:31 - so I'm now gonna click save and look at
17:35 - this look what has downloaded to the
17:38 - download directory I'm gonna go show in
17:41 - finder and see look at this two files
17:43 - today this 2:17 p.m. model JSON model
17:48 - dot wait stock pin okay
17:50 - so let's take a moment to explain oops
18:07 - let's see why is the whiteboard not
18:11 - working loose cable maybe check check no
18:19 - check yeah there we go okay let's take a
18:26 - moment to talk about what's in these
18:28 - files so why is there a file called
18:31 - model dot JSON and a file called I
18:34 - already forgot model dot weights dot bit
18:38 - model dot weights dot big okay so we
18:45 - haven't really a part of this video
18:47 - series at least talked about the details
18:50 - of what a neural network is but this
18:54 - particular machine learning model is a
18:58 - neural network and a neural network has
19:00 - some kind of architecture to it it has a
19:03 - whole bunch of inputs and it has a bunch
19:07 - of outputs and in this case it actually
19:09 - just has two outputs a happy or a sad
19:14 - and the actual thing the neural network
19:16 - is producing is a probability of one or
19:19 - the other
19:21 - now in between oh in the inputs sorry
19:26 - the inputs is an image so maybe every
19:30 - single pixel of the image is wired to
19:32 - one of these inputs then there are these
19:35 - layers the data is going to be processed
19:37 - forward math and various things are
19:40 - going to happen to the data as it goes
19:43 - forward and it needs to have some amount
19:45 - of hidden layers and other types of
19:48 - nodes and everything is connected and
19:50 - this is stuff that I have described in
19:52 - other videos and I'll also refer you to
19:54 - the three blue one Brown what is a
19:57 - neural network video which is terrific
19:58 - to see more but the reason why I'm
20:00 - mentioning this is this model JSON is a
20:05 - file that describes the architecture
20:08 - maybe is architecture of the model and
20:11 - this model dot weights dot bin is a file
20:15 - that describes all the
20:17 - so what I mean by architecture is how
20:20 - many inputs
20:21 - how many outputs how many hidden layers
20:24 - and all sorts of configuration details
20:26 - about the architecture of this neural
20:28 - network that I've you're in a pretty
20:30 - crude way one of the thing that I'm kind
20:33 - of like not mentioning because I don't
20:35 - want to be here for the next 17 hours
20:37 - you're going to every sound every
20:38 - different road of detail here is that
20:40 - the data as its passing through the
20:42 - neural network all of these different
20:45 - nodes between the inputs and the outputs
20:46 - and the hidden layers all of these nodes
20:50 - are connected and each one of those
20:52 - connections has a weight you can think
20:54 - of the neural network is the thing that
20:55 - has like just lots and lots of dials in
20:57 - it and it's trying to learn what the
20:59 - goods what the right setting for all the
21:00 - dials is to produce the appropriate
21:03 - happy or sad result based on the input
21:05 - image so all of the numbers that store
21:08 - the values of all of these weights are
21:10 - all in this file so this is actually a
21:13 - file that we could very easily go and
21:14 - look inside its JavaScript object
21:16 - notation it's a JSON file we will look
21:18 - at that but the weights is really like
21:20 - the big thing it's we're like there's a
21:22 - ton of stuff there's tons of these
21:24 - connections it's many many numbers so
21:26 - it's typically stored in binary format
21:29 - raw digital data so that just sort of
21:32 - like have it be the smallest file size
21:34 - so these are the two files that we need
21:36 - let's go take a look at those so the
21:39 - next step for us is to take these two
21:41 - files I'm gonna copy them and actually I
21:46 - think I could probably just drag them
21:49 - into visual studio code because I want
21:51 - them to be part of this example right so
21:52 - that we can see that they're here now
21:54 - now that I have model JSON and model dot
21:57 - weights bin as a part of my project if I
22:00 - were using the p5 web editor I need to
22:02 - upload these files I'm not sure if
22:03 - that's actually possible I have to look
22:04 - into that and then if we look at model
22:07 - dot JSON for example you can see and I'm
22:09 - gonna hit save we can see this is the
22:12 - model topology it's a sequential model
22:14 - and these are the inputs the inputs are
22:17 - 7 by 7 by 256 and somewhere uh yes
22:23 - ml 5 specs these are the labels happy
22:26 - and sad there's all sorts of other stuff
22:29 - there's there
22:30 - some dense layers and there's where it
22:32 - gets the weights and it's using
22:34 - tensorflow layers intensive float yes so
22:36 - all of this information is in here the
22:39 - bin file is not something we can really
22:41 - look at because it's in binary format
22:43 - but we can know that that all of the
22:46 - numbers those weights are there so now
22:47 - guess what we're gonna go back to our
22:50 - code and I'm gonna look at the steps
22:54 - here in setup again
22:55 - so in setup the first thing that I do is
22:58 - I create a feature extractor with mobile
23:02 - net when that model is ready what I'm
23:08 - thinking for a second yeah just timeout
23:15 - for a second I just want to look firstly
23:18 - the documentation isn't up on the
23:20 - website for this so I just want to check
23:22 - some things to make sure I'm doing it
23:23 - correctly I'm gonna look at it over here
23:25 - real briefly I'm just looking in the
23:28 - existing examples there actually is an
23:31 - existing example for this I don't know
23:32 - why I'm not pulling it up here probably
23:34 - should I just need to understand the
23:43 - order of this classifier oh yeah okay
23:48 - it's interesting guess that works the
23:53 - order of all this stuff is weird and I
23:55 - feel like this is a thing we have to
23:57 - work on with the library
24:05 - alright I'm gonna not worry about this
24:11 - too much okay so once the model is ready
24:21 - then I can go ahead and where's that
24:25 - this is this is the function for when
24:28 - the model is ready I can now go and say
24:30 - classifier dot load and guess what I
24:33 - want to tell it to load model dot JSON
24:35 - and I'm gonna say a custom model ready
24:42 - custom model ready custom custom model
24:54 - is ready so first mobile net has to be
24:57 - loaded once that's done then the custom
25:00 - model can be loaded now look at this
25:01 - classifier load model dot JSON remember
25:04 - there are two files model dot weights
25:06 - bin and model dot JSON ml five is set up
25:10 - to work that if you just tell it word
25:12 - that JSON file is model JSON it'll look
25:15 - for the corresponding model that weights
25:17 - not bin file in the same directory it
25:19 - there are ways that you could customize
25:21 - what those file names are and have them
25:22 - in different paths but this is the
25:24 - simplest way of doing it so let's see if
25:26 - this works now
25:28 - [Music]
25:30 - models ready ah got an error what is
25:39 - this error that was sad maybe what has a
25:53 - zero let's look at five megabytes that
26:00 - makes sense that's right that's
26:02 - definitely like weight there
26:03 - oh it didn't find it Oh weird oh I know
26:15 - what the problem is
26:16 - oh I don't like this I think it's gonna
26:23 - work now yeah so it did load so the
26:37 - issue is the following is that it
26:39 - doesn't so this is actually kind of like
26:40 - a bug because it's not looking in the
26:44 - local directory unless you specifically
26:48 - do the dot slash but you know I think it
26:50 - would be simpler to let the user just do
26:52 - this so that is a bug to file let me do
26:58 - that real quick but I won't worry about
27:04 - that right now
27:10 - [Music]
27:14 - what is this a feature extractor model
27:21 - loading relative path so is this look at
27:31 - this is this the following works do it
27:39 - making an exam a live example live on
27:44 - YouTube right now the following works
27:57 - [Music]
27:59 - however just referencing the file name
28:03 - and expecting it to be the local path
28:07 - doesn't doesn't work because it looks
28:12 - for model dot weights dot bin somewhere
28:20 - else this is a minor detail because we
28:25 - can definitely get it to work
28:32 - let's get this error
28:41 - and let's go back to github here Oh
29:00 - weird but it actually did look in the
29:03 - right place
29:13 - that's weird but this is a thing I'm so
29:19 - confused
29:29 - oops
29:34 - oh it would have worked this is
29:39 - interesting it would have worked
29:48 - I'm not being careful enough if I were
29:53 - running the server from here it works it
30:08 - it works because it's a subfolder but I
30:13 - feel like it should figure out that it's
30:16 - in a subfolder right so okay so I got to
30:25 - change my error message here okay
30:30 - [Music]
30:36 - if the sketch is not at the root path I
30:44 - can load the model via a relative path
30:48 - as follows but however if I look for
30:59 - model model JSON with a relative path
31:10 - like the following it then looks in the
31:21 - root directory or model dot weights been
31:27 - this is minor for my example but noting
31:32 - as it's an error
31:34 - people will encounter is it trivial to
31:41 - support looking always in okay so I
31:49 - think this is if the sketch is not at
31:52 - the root path I can load the model via
31:56 - via the current directory at the current
32:01 - path directory as follows however if I
32:05 - if I ask if I ask for model dot JSON at
32:10 - as follow this way it then looks in the
32:18 - root directory for model dot weights dot
32:20 - bin alright so let me let me submit this
32:29 - yeah let me submit this I think this
32:32 - makes sense now apologies if this issue
32:35 - is weird because I'm doing this no
32:39 - lecture ok so I'm actually we're gonna
32:45 - fake this here no one will notice
32:57 - okay we're gonna fake this uh-huh
33:00 - so Matt's yeah I'm gonna this is at I'm
33:02 - not gonna show that error actually
33:03 - because that errors is irrelevant
33:06 - what I'm doing here so let's see if I
33:15 - can get it to work just like this okay
33:18 - cuz I think that'll get fixed later I
33:19 - hope okay okay let's go back oh it's
33:26 - already that's no good
33:28 - so how do I hold on
33:41 - all right let's try now loading that
33:43 - model you hit refresh models ready
33:49 - videos ready custom model is ready so
33:50 - it's been loaded but I'm not I'm not
33:56 - seeing the labels so it doesn't even
33:59 - though that model was loaded I now have
34:01 - to figure out and now I have to tell the
34:03 - code to no longer really needs to be
34:06 - trained in this case you know I might
34:08 - want to retrain and do fancy aim I'm
34:09 - going to take out the training button
34:11 - and then somewhere there's like an event
34:13 - where it finished training where I said
34:17 - classify or classify got results and so
34:21 - that's what I want to do now and the
34:22 - custom model is ready so the the events
34:26 - are as follows let's bring this down
34:28 - here first load the mobile net model
34:33 - when the mobile net model is ready then
34:37 - load the custom model when the custom
34:40 - models ready start classifying the image
34:42 - all right so here we go let's what I
34:52 - hope with this hand I can't remember
34:53 - that was this ad all right so this is
34:55 - working on those buttons are now no
34:57 - longer relevant so I could actually take
34:59 - all the buttons out and this is now
35:01 - again whether you want to have one
35:03 - sketch that where you train and save and
35:05 - load or two different ones but I'll just
35:07 - show you right now the idea here is I
35:09 - did my training I'm done and now I have
35:12 - something that automatically loads the
35:14 - model yeah all right
35:16 - so I hope this was helpful you can now
35:18 - see that process right what is the
35:19 - process train the model call the save
35:23 - function to download model dot JSON and
35:25 - model dot wait stock pin then take those
35:28 - files into your sketch use the load
35:30 - function to load them both and then
35:32 - start classifying alright so give this a
35:35 - try see what you can do now that you can
35:37 - spend a lot of time training your model
35:39 - because you can save it and see what you
35:41 - make with it all right thanks for
35:42 - watching and I will see you in another
35:44 - mmm I'm going there be more Emma five
35:46 - videos I don't even know what's next but
35:48 - if there's a video that's next you could
35:49 - watch it goodbye
35:53 - all right hopefully that can be made
35:55 - into something understandable wonder
36:09 - what would happen if I'm just curious
36:10 - what would happen if I retrained it
36:24 - yeah I guess it retrains yeah but then
36:31 - if i refresh its loading that previous
36:33 - model okay any questions about this well
36:39 - J s always load the setup function
36:41 - automatic asks Tobias so this is a
36:44 - feature of the p5 library so I'm using
36:47 - the p5 library and the p5 library always
36:50 - calls the setup function first that's
36:53 - the way it's configured but this is not
36:54 - something that will just happen in any
36:55 - JavaScript environment it's here it's
36:57 - specifically part of the part of the p5
37:05 - library ok
37:14 - copper asks so save not save all the
37:18 - model like in Kerris that's right
37:20 - completely understand that question but
37:21 - I'm let I'm in front rephrase I think
37:23 - what copper is asking is is this like
37:27 - saving a model in Kharis and the answer
37:29 - is yes
37:30 - there's a lot of nuance to this because
37:32 - number one it's saving the model in a
37:34 - particular format that is compatible
37:36 - with tensorflow dot yes so this model
37:38 - that we saved won't necessarily work
37:40 - with a Python Karras example without
37:42 - being sort of converted to what it needs
37:44 - there and there's also this sort of
37:50 - strange feature of it which is that it's
37:52 - already like it's we're just saving this
37:55 - sort of part that's on top of the mobile
37:57 - net model so I haven't like resaved the
37:59 - entire mobile that model and just saving
38:01 - the transfer learning piece of it that
38:03 - is plugged into the mobile net muddle
38:05 - because it's still always loading the
38:08 - mobile net model and yes Kate Wycombe
38:12 - says as far as I know you can even
38:13 - import a Karass model into TF Jas so yes
38:16 - if you want to import import a Karass
38:18 - model into TF j s you just need to look
38:22 - for the TF j s converter this is a
38:24 - script that will take any tensorflow
38:27 - or Karis save model and convert it into
38:29 - tensorflow just this is from the
38:32 - tensorflow project itself does that mean
38:34 - it will work automatically with ml 5 in
38:36 - theory yes but ml Phi
38:38 - is kind of a subset of tensorflow chess
38:40 - with a bunch of things wrapped to be a
38:42 - little simpler to work with I don't want
38:45 - to do that video again cuz I feel like I
38:48 - don't know if I hit all the right notes
38:52 - I'm gonna do it again cuz it and then
38:58 - Matt chick and pull cuz I feel like this
39:00 - is a really sort of important one and
39:11 - then I will do the quick draw stuff
39:15 - asdfghjkl space asdfghjkl asks why do
39:23 - you choose p5 GS over other JavaScript
39:25 - libraries I mean it's a great question
39:31 - and I don't think there I certainly am
39:33 - NOT here to say please I think you the
39:37 - viewer of this channel should use p5.js
39:39 - the reason why I use it is because it's
39:42 - a project that's connected to a project
39:45 - it is a project it's part of a project
39:47 - called the processing foundation an
39:48 - entity that I've worked on for many
39:50 - years that I have a lot of personal
39:52 - investment in and the goals of that
39:54 - project in terms of being
39:56 - beginner-friendly being inclusive are
39:59 - values and principles that are close to
40:02 - my heart and that work well the kind of
40:04 - stuff that I want to do in this channel
40:05 - is it perfect no are there other things
40:08 - that you might want to use instead
40:10 - definitely but it's it's it's a good
40:13 - foundation library for me to build a lot
40:15 - of stuff with alright I know I'm
40:17 - torturing you all but I'm gonna do this
40:18 - again just to give Matt you more
40:20 - material to work with now that I have a
40:25 - sense of what the issues are so I'm
40:30 - gonna go back to what it was originally
40:33 - I'm gonna redo a couple things to make
40:36 - it less awkward
40:43 - I am going to let's just see here okay
40:58 - let's see here
40:59 - okay so good move some things around I
41:07 - think to make things less awkward is
41:15 - that legible this font size is this
41:21 - legible it's smaller than I usually have
41:24 - it but this might be helpful to have a
41:30 - little bit more room to look at the code
41:49 - yeah let me rename the uke and whistle
41:52 - button thank you let me rename those
41:55 - thank you that is I don't know why I'm a
41:58 - happy button sad button train button
42:07 - okay so that's good any other
42:09 - suggestions
42:17 - it's fine alright let me try it with the
42:24 - code a little bit smaller okay here we
42:41 - go everybody all right let's do this
42:57 - ridiculous thing again I mean that's you
42:59 - whenever you watch this you can take
43:02 - stuff from the first try and mix it if
43:04 - you want but I hope I it's my hope that
43:06 - this will just be a cleaner version of
43:08 - that video and apologies to all of you
43:10 - watching live when I make the same jokes
43:12 - again not that I made any jokes not that
43:14 - any of them were funny but if I did then
43:16 - I'll probably make them again more
43:18 - awkwardly can you continue working on
43:22 - the loco project ask David I don't think
43:24 - so okay hello and welcome to another ml
43:29 - five beginner's guide to machine
43:31 - learning with ml 5 j s video all right
43:33 - so this one's a good one
43:35 - I hope I'm about to make video number
43:37 - seven in this playlist and this the
43:40 - element in the ill oh oh - draw up some
43:43 - firm well I forgot that I have all of
43:46 - this stuff here already and I don't want
43:49 - it to be totally the lead I'm so in love
43:53 - with you
43:54 - delete delete Oh with my eye so blue
43:57 - delete delete delete delete delete oe
44:08 - who's gonna come here all right here we
44:13 - go hello and welcome to another
44:18 - beginner's guide to machine learning
44:20 - with ml 5gs video now in this video I am
44:23 - going to unlock something for you it's
44:25 - already unlocked for you but I'm gonna
44:27 - show it to you that is incredibly
44:28 - powerful for what you could do now with
44:30 - ml 5 that you couldn't do before but
44:32 - many of you asked about in the comments
44:33 - and what is that it is the save load
44:36 - feature extractor this is a new feature
44:39 - that was added to ml 5 just 5 days ago
44:42 - you need to make sure that you are using
44:45 - ml 5 zero point one point three or
44:48 - whatever number in the future past that
44:51 - but certainly this is the version of the
44:53 - library that I'm using in this video now
44:55 - what does it do so the last example if
44:58 - you've been watching this these video
44:59 - series in order was this example what
45:02 - this example does is it loads a
45:04 - pre-trained image classification model
45:06 - called mobile then on mobile net is
45:09 - trained on a thousand different kinds of
45:10 - things and recognizes puppies and dogs
45:12 - and birds and different kinds of objects
45:14 - transfer learning is the process by
45:17 - which we take that pre-trained mobile
45:19 - net model basically disconnect it from
45:21 - all those labels and reconnect it to our
45:23 - own labels for example I'm gonna make up
45:25 - a label called happy and a label called
45:27 - sad I could certainly have more than
45:29 - just two and I'm going to show it things
45:31 - like the train whistle is me being happy
45:39 - would Joe at that train with a little
45:41 - bunch of time say happy happy happy
45:43 - happy happy now no train whistle this is
45:46 - very sad I'm sad no train whistle was
45:48 - sad oh wait so much time on this because
45:51 - I haven't implemented the thing that I
45:52 - want to implement now I'm gonna say
45:53 - train and it's gonna train and then once
45:56 - it's done happy sad happy train whistle
46:04 - sad ok so it works it is now learning to
46:07 - classify images in real time according
46:09 - to those two categories but I'm a very
46:12 - big spaz and I'm gonna just be over here
46:15 - to refresh and I
46:16 - I lost that forever I no longer have
46:19 - that model it's gone the new feature is
46:22 - ability to save that custom trained
46:25 - model and then reload it so if you're
46:27 - using this for like installation and
46:30 - you're gonna like take down the computer
46:32 - and set it up every day you can save
46:33 - that model you can imagine there's lots
46:35 - of possibilities here so there's only
46:37 - two things that I really need to add to
46:39 - the code there's a save function and a
46:40 - load function
46:41 - there's a bunch of pieces there but
46:42 - that's what I'm gonna do right now so
46:43 - I'm gonna go here into the code and I'm
46:46 - going to just add another button like I
46:49 - have a happy button a sad button and a
46:50 - train button choo choo I'm gonna add a
46:53 - sad button no no that's that a Save
46:57 - button I'm gonna call it save and save
47:00 - button when the mouse is pressed I'm
47:02 - just gonna say classifier dot save
47:04 - that's it all of us a classifier let's
47:06 - see let's see what happens so I'm not
47:10 - going to train it very actually no I
47:13 - can't I'm gonna train I'm gonna let's do
47:15 - a really good solid training this time
47:16 - because this is the one we're gonna save
47:18 - what it works all right so let's do the
47:20 - same thing happy happy happy happy
47:24 - train whistle is a happy thing a happy
47:26 - happy happy thing just B is very sad
47:30 - there's no train whistle I'm so sad I'm
47:32 - very sad and very sad and now I'm going
47:33 - to train this weird how the lost is zero
47:37 - I'm just gonna like not worry about that
47:39 - too much I'm gonna hit save and now you
47:44 - can see that down here by the way that I
47:45 - did this a couple times practicing now
47:47 - what it did is it downloaded come on to
47:51 - my download directory two files model
47:55 - JSON and model dot weights not been so
47:58 - those files will end up wherever the
48:00 - default downloads directory of your
48:02 - browser is and uh and the next that step
48:04 - is just to load those files in but
48:06 - before we load them let's talk about
48:07 - like what's in those files so there's
48:09 - two files I said model JSON and a model
48:15 - dot
48:21 - model dot weights dot bin okay so what
48:29 - is a neural network love what is a
48:32 - machine learning model what is the thing
48:33 - that we're saving well in this case it's
48:35 - actually saving the configuration of a
48:37 - neural network now if you want to know
48:39 - what a neural network is I have some
48:41 - videos about that but I would refer you
48:43 - to the three blue one brown video what
48:46 - is a neural network I will link to that
48:48 - in this video's description that will
48:49 - give you a much bigger deep dive into
48:51 - those details but if you look at that
48:54 - video what you'll see is there's
48:55 - basically like a big diagram and the
48:58 - diagram has a bunch of inputs it has
49:01 - some outputs by the way in this case we
49:03 - could actually say the outputs are just
49:05 - too happy and a sad and what the neural
49:10 - network what the machine learning model
49:12 - outputs is a probability maybe like you
49:15 - know 80% of it being happy and of that
49:19 - image being happy and 20% that image is
49:21 - sad so the whole point of this is to
49:23 - feed in an image right it's the image
49:26 - and maybe all the pixels of the image
49:29 - that are actually these inputs it goes
49:31 - through this magic neural network thing
49:33 - which isn't really magic it's the thing
49:34 - that you can learn about and then out
49:36 - the other end comes a guess as to
49:39 - whether it's happy or sad now what is
49:41 - all this stuff in the middle the stuff
49:43 - in the middle is typically referred to
49:45 - and there are many different styles and
49:46 - flavors and kinds of neural network but
49:48 - in the sort of zoomed out view in
49:50 - general terms is what's known as a
49:52 - hidden layer or hidden layers so every
49:55 - input is connected to the output but not
49:58 - directly there are some amount of nodes
50:01 - maybe for two hidden layers each with
50:04 - four nodes and every input is connected
50:07 - to every node and then every node is
50:09 - connected to every node and then every
50:11 - node is connected to every output and so
50:12 - on and so forth so I could be here all
50:13 - day trying to do this diagram and draw
50:16 - every connection between everything I'm
50:17 - not going to do that but all of the
50:21 - information about here is what is saved
50:23 - in these two files model dot JSON is a
50:27 - file that just explains all of these
50:29 - pieces the layers the out
50:31 - puts that in puts all of that stuff that
50:33 - is what is in model JSON I'm the moment
50:37 - I will just open up that file and look
50:38 - at it model got weights is an
50:39 - interesting thing so the magic of a
50:42 - neural network what makes a neural
50:43 - network work is a number that's
50:45 - associated with every single one of
50:47 - these connections known as a weight you
50:48 - could think of it as like a whole bunch
50:50 - of dials so I'm tuning the dial sorry
50:52 - I'm trying to get the dials in the right
50:53 - position so that it really makes good
50:55 - guesses about happy versus sad that's
50:57 - the training process once that training
50:59 - process is done I want to save where all
51:01 - those dials are all of those numbers are
51:03 - in this file this is a binary format
51:05 - file because there's a lot of numbers
51:07 - millions upon millions of connections
51:09 - potentially between a lot of pixels and
51:11 - a lot of labels a lot of hidden layers
51:12 - so this you'll notice like the file that
51:14 - we saved is five megabytes because it's
51:16 - tons and tons of numbers so it ends up
51:18 - but this is just a very small file with
51:20 - a little bit of text information about
51:22 - how this is configured okay I spend a
51:24 - lot of time on that only that's a
51:25 - helpful background to you let's go back
51:27 - and actually look at those files so now
51:30 - I've got those files the what I'm gonna
51:31 - do is I'm just going to drag them into a
51:34 - visual studio code which is what I'm
51:36 - using to code this right now but you
51:38 - could be using any environment look they
51:40 - didn't make it into the right place let
51:42 - me try that again I'll clean this up
51:44 - later but I want them in this directory
51:45 - great so you can see that they're
51:46 - they're model dot JSON model dot weights
51:48 - not bin if I click on this you can see
51:51 - you could start to you could start to
51:53 - see like all the stuff in it there's
51:54 - information about the input shape and is
51:57 - it flies in a sequential model and like
51:59 - what kind of algorithm that are using
52:01 - and oh is it dense and it uses something
52:03 - called soft matte all this stuff so this
52:04 - is way beyond the scope of what I'm
52:07 - doing in these videos but if you're
52:08 - interested in more about these details
52:10 - you could look at some of my videos that
52:11 - use tensorflow digests natively to
52:13 - understand more pieces here but you can
52:15 - see here this is we're looking for the
52:18 - weights file etc etc and this is really
52:20 - important this is something this is
52:22 - really just the tensor flow what tensor
52:24 - flow is would do natively but ml5 is
52:27 - helping with a little bit on top of it
52:29 - by adding these happy and sad labels
52:31 - okay so now all we have to do is load
52:35 - the model now okay so we're gonna go we
52:37 - saved that model and so the steps are
52:39 - the first thing we have to do is load
52:42 - the mobile net model so we're not
52:44 - actually saving
52:45 - original pre-trained image classifier
52:46 - we're just saving the bits and pieces
52:49 - that are like hooked into it so we can't
52:52 - hook into it until mobile Matt is ready
52:54 - so once we've hooked into what's mobile
52:57 - net is ready we can then say classifier
53:00 - dot load model JSON now there are two
53:04 - files model dot JSON and mild model dot
53:07 - wait stock bin but you if you I'm gonna
53:10 - fly to set up that if you just give it
53:12 - one file it'll look automatically for
53:13 - the other file in the same place there
53:15 - are ways of customizing the file names
53:17 - and their paths and all that but that's
53:18 - that you can sort of look into in the
53:21 - documentation but the easiest thing for
53:22 - just to do this and then I'm gonna say
53:24 - custom model ready so I'm gonna write
53:27 - another event function a custom model
53:31 - ready and there I'm gonna say custom
53:36 - model is ready so it's a two-step
53:38 - process we have to load mobile net
53:40 - mobile then is ready then load model dot
53:42 - JSON with the weights custom model is
53:45 - ready alright let's just run this zoom
53:49 - back out and there we go everything's
53:53 - loaded but I don't see any results hmm I
53:56 - don't see results why
53:57 - well this sketch was written with
54:00 - originally with code to train so I'm
54:03 - supposed to press the buttons and it
54:04 - train but now I don't need to train cuz
54:05 - I loaded the model so this is where I
54:07 - kind of like though I don't know what
54:09 - you should do next maybe you want to
54:11 - keep two separate web pages two seperate
54:13 - sketches one for training and one for
54:15 - loading maybe you do it all in one
54:17 - you'll actually see if you go to the ML
54:18 - five examples there's one that has like
54:20 - a button that you can like drag and drop
54:23 - you can actually like select files and
54:24 - load them and save them all on the same
54:26 - sketch but what I want to do now is
54:27 - basically a workflow for I'm done with
54:30 - the training so I'm not gonna ever train
54:32 - again so I can actually remove all of
54:34 - these buttons right they're no longer
54:36 - relevant to me the text that should show
54:40 - up at the beginning is just loading
54:43 - model and then when the model is ready I
54:48 - would say label equals model ready so
54:56 - let's run this now so loading model load
54:59 - model model ready and now once the model
55:01 - is ready all I need to do is start
55:02 - classifying and before I didn't classify
55:06 - until the training was finished the
55:09 - training is now irrelevant I could
55:10 - actually completely comment this out as
55:13 - well and basically I want to start
55:15 - training when the model is ready not
55:18 - training sorry I want to start guessing
55:20 - when the model is ready by saying
55:21 - classifier to classify got results and
55:24 - now here we go
55:25 - loading the model models ready happy sad
55:31 - happy sad and I can refresh the page
55:36 - again and happy happy sad
55:44 - alright so it works now you can train
55:49 - your own transfer learning model you
55:50 - could do this with the regression
55:51 - example too if you watch that video you
55:53 - could save it so I don't know share you
55:55 - can share models let's all share models
55:57 - with each other sharing share share your
55:59 - model with me let's see what happens
56:01 - alright I'm curious to see what kind of
56:02 - creative stuff you come up with what
56:04 - kind of in German the interaction that
56:06 - I've done here is like super awkward
56:07 - like I'm gonna press the button all the
56:08 - time and maybe you don't actually have
56:10 - to train with just video you could load
56:11 - a bunch of images so there's so many
56:13 - possibilities here and I look forward to
56:15 - seeing what you make and stay tuned for
56:17 - more ml5 videos I'm more stuff is coming
56:20 - yet what but where stuff is coming good
56:22 - bye
56:25 - okay all right everyone I think I'm glad
56:32 - that I did that a second time this
56:39 - computer went to sleep for no reason and
56:46 - it's very little going on in this
56:48 - computer
56:56 - oh okay
56:59 - so maybe that's fine somebody wrote a
57:02 - comment on my issue okay all right so
57:14 - I'm done there okay that's gonna be a
57:17 - good one to release now we are gonna
57:20 - move on to something totally different
57:24 - what time is it three o'clock
57:35 - actually so now I need to release this
57:38 - example so I'm going to delete the model
57:43 - and the weights I'm going to delete the
57:53 - model and the weights I'm going to I
57:58 - just want to leave this I think what I'm
58:02 - going to do is leave this example with
58:05 - this stuff here and then this is tricky
58:13 - comment out loading this comment this
58:20 - out so this example is now left in the
58:24 - training state but it has the loading
58:29 - code in it but comment it out and so now
58:33 - let me just put this we just put this
58:38 - online
58:47 - code from fright save blowed live stream
58:58 - save load ml5 so this is now it should
59:05 - be in the websites I'm going to create a
59:09 - pull request here this is the code from
59:17 - eleven nine live stream I'm not sure if
59:22 - I should make this two examples or just
59:25 - one for now the save it the loading code
59:30 - is commented out okay so I'm gonna
59:36 - create this pull request and just bejust
59:41 - these files yep okay good great so that
59:44 - code will be on the MF on the coding
59:47 - train website just for people who are
59:48 - looking there is also this where yeah
59:55 - this example I had an open so this is
59:58 - the same exact example I'll note though
60:00 - that like this example uses a button
60:02 - that you can like select and then select
60:04 - files and load them so there's a lot of
60:05 - other ways of approaching this so here's
60:07 - yet another example with sort of more
60:09 - features that you can look at okay
60:13 - [Music]
60:16 - alright so now what do I want to do
60:24 - alright I am going to go to the desktop
60:27 - and
60:47 - and I just want to get
60:56 - I just want to have like a p5 sketch in
60:58 - that directory that I can kind of start
61:02 - using and so let's let's get rid of
61:12 - everything here and here and index quick
61:26 - draw okay
61:43 - okay now what did I minimize that so I
61:49 - need the browser and
62:23 - I draw data there we go okay
62:54 - and then this is part of hold your own
62:59 - API with node where's that okay okay
63:15 - yeah that looks like there's a
63:17 - discussion in the chat about why I'm
63:20 - using the a separate terminal and then
63:23 - what if that one thing goes away so I
63:26 - don't know why is this keep this camera
63:29 - keep going out very like a loose cable
63:33 - or something there we go
63:51 - okay okay okay okay okay everybody
63:58 - everybody settle down
64:01 - we're gonna do something really fun oh
64:04 - this is empty this is the last thing I'm
64:09 - gonna do before the weekend and there
64:12 - will not be any live streams next week
64:14 - unless somehow I figure out some magic
64:16 - way to live stream from thinker con but
64:18 - we'll see if that's possible or not and
64:27 - all right now I think I am ready I think
64:38 - I am ready I'm all the pieces that I
64:39 - want this is actually I'm gonna make
64:42 - this a coding challenge
64:44 - maybe the sketch art and stuff will be
64:46 - tutorial ish with ml5 but okay well I
64:55 - don't know what to do I'm gonna make
64:56 - this a coding challenge people watch the
64:58 - coding challenges more than if they're
65:00 - in the tutorial videos okay I'm just
65:04 - trying to do like my stretching because
65:11 - you know hold on
65:13 - match yeah I'll make a thumb I better
65:16 - make a good thumbnail for this really
65:17 - remind me to make some thumbnails I mean
65:20 - just like pose with the results okay
65:28 - okay
65:31 - oh hello and welcome to a coding Jackson
65:35 - you know what no no no no no no no no
65:37 - this this is this is what its gonna be
65:39 - okay I'm gonna start this behind me okay
65:44 - [Music]
65:46 - okay you a grand entrance hello hello
65:55 - and welcome to a coding challenges
65:57 - quick-draw edition now I have been
65:59 - talking about doing this for a very long
66:00 - time and I'm excited to finally try this
66:02 - on my channel one of my favorite data
66:04 - sets that is out there in the world is
66:06 - the quick-draw data set now
66:08 - here's the reason one of the reasons why
66:10 - I'm interested in this is not just this
66:12 - data set of 50 million drawings which is
66:15 - interesting and fun to play with on its
66:17 - own but there is something called sketch
66:20 - RNN which was developed by a set of
66:23 - researchers at Google Google brain and
66:25 - you can see some of them here who wrote
66:27 - this paper and explained how sketch RNN
66:31 - is a neural network a recurrent neural
66:34 - network that learned about how to draw
66:36 - various things from the quick-draw
66:38 - dataset and then can try and imagine and
66:42 - create new drawings based on how it
66:44 - learned and can even interact and draw
66:45 - with you so many possibilities so this
66:47 - is where I'm going with this I am going
66:49 - to make a sketch RNN has recently been
66:51 - added to the ml 5 library and I'm going
66:54 - to show you an example I'm gonna build
66:58 - that what's get turn in amplify but I
66:59 - feel like before we start making the
67:03 - artificially intelligent system that
67:05 - generates the drawings let's look at the
67:07 - actual data itself that it was trained
67:10 - on so first where did that data come
67:12 - from so apologies if I get anything
67:15 - wrong with the comments because this is
67:18 - not my project I am just inspired and
67:20 - enthused by it so the quick-draw project
67:22 - is a project the AI experiment made by
67:25 - friends from Google and it is a game
67:27 - that you could play where you say draw a
67:30 - pencil in 220 seconds ok here we go no
67:36 - no that's not really like a pencil is it
67:38 - if I put an eraser here
67:40 - no rocket I'm the worst yeah I don't
67:46 - know what that is either
67:47 - time is running out sorry all right
67:53 - let's try basketball nose or moon all
68:03 - right I win okay so yeah I could be
68:06 - stuck here for quite a while um now what
68:09 - you might not watch you what when you
68:10 - are playing this game your doodles are
68:13 - being collected and over 15 millions of
68:16 - players have contributed millions of
68:18 - drawings playing quick draw oh and I've
68:19 - used this before right I made a example
68:22 - with a neural network that tried to
68:23 - recognize your drawing so this has been
68:26 - done on my channel before but what I
68:28 - haven't actually looked at what I looked
68:29 - at before was I looked at all the
68:30 - drawings as pixels what's actually
68:32 - what's interesting about the data is
68:34 - that the data which you can find here
68:37 - information about and github is not
68:39 - pixels it's actually the pixel paths of
68:43 - the people making the drawings with
68:45 - timing information so you could load
68:47 - that data and replay any drawing back
68:50 - and each data each drawing is that has
68:55 - the word that was associated with it the
68:57 - country where the person is from who
68:58 - drew at least the IP address presumably
69:00 - and then whether it was recognized and
69:03 - then the actual drawing itself so what I
69:07 - want to do and you can see here that the
69:09 - format of the data is a whole lot of XY
69:12 - positions X Y XY X Y with timing what
69:15 - time was I at the first point the second
69:17 - point the third point then I might have
69:19 - lifted up my pen moved and started doing
69:22 - another one so it's a bunch of strokes
69:23 - so this is it's a little tricky because
69:25 - I can't use the word stroke as a
69:28 - variable name in p5 because stroke is a
69:30 - function that actually sets the pen
69:31 - color but the idea is that if I do this
69:35 - it's sampling a bunch of my points as I
69:38 - drew along that path each one of these
69:40 - is an XY point associate with a given
69:43 - time and then there is an array with all
69:45 - of the X's all the corresponding Y's and
69:49 - the corresponding x now what I'm
69:51 - actually going to use in this video
69:53 - is if there are a bunch of different
69:55 - versions of the data I'm gonna use a
69:56 - simplified version of it because these
69:58 - are huge data files and but I encourage
70:00 - you as an exercise to try to do what I'm
70:02 - gonna do but with the non simplified
70:04 - version maybe with the timing aspect of
70:06 - it but the simplified drawing files are
70:09 - are are the same exact thing the same
70:15 - exact thing but no timing information
70:18 - and also they have been sub a meaning
70:22 - you know you in theory as the person is
70:25 - drawing as the user is drawn a lot of
70:27 - points are being captured but maybe you
70:29 - don't need that level of detail and
70:31 - that's often referred to as like pixel
70:32 - factor or scale factor I believe or
70:34 - epsilon value I guess you could say
70:36 - simplify all strokes using the RAM or
70:38 - Douglas puker algorithm if I pronounced
70:40 - that correctly with an epsilon value of
70:43 - 2 so these are available at something
70:46 - called nd JSON now if you've watched my
70:49 - videos before you're probably familiar
70:50 - with JSON JavaScript object notation
70:52 - that is a format where you can store
70:56 - data that's in JavaScript rotation I
70:58 - have some videos about what is JSON ndj
71:00 - song is a funny thing
71:01 - ha-ha-hilarious it's like the most the
71:04 - funniest version of JSON but let and it
71:08 - is actually is a it's a set of multiple
71:11 - JSON elements each on a different line
71:14 - in a file so it makes sense to do that
71:15 - each drawing is its own sort of like
71:18 - JSON object on a different line in the
71:20 - file so let's go grab one of these files
71:22 - so getting the data we can actually go
71:24 - to the public data sets
71:26 - oops no I'm sorry I just want to go to
71:28 - the list of the files in the cloud
71:29 - console which is right here
71:32 - I'm going to say I agree and I don't
71:35 - want any I realize you can't see
71:42 - anything here so let's try to make this
71:44 - a bigger
71:44 - let me dismiss this right now and come
71:48 - on
71:48 - I guess I'll make the smaller I'll just
71:51 - zoom in so these are the different
71:53 - formats they're actually all the data in
71:55 - just like binary there's this numpy
71:56 - bitmap which is useful for other kinds
71:58 - of machine learning different things you
72:00 - might want to try the raw data but let's
72:01 - look at the simplified data and let's
72:04 - pick oh I don't know which model
72:07 - should I pick there's so many banana
72:08 - bandaged baseball basketball bat beach
72:11 - bear beard I guess I should do beard
72:14 - right that's kind of lame though
72:17 - birthday cake is there like a unicorn
72:20 - maybe there's a unicorn no was there a
72:23 - rainbow yes there's a rainbow all right
72:29 - so we use the rainbow so I am going to
72:31 - whoops download this file so here's the
72:34 - thing this is a very large file I had a
72:39 - reason why I was doing this challenge
72:40 - also this is a 43 megabyte file now I
72:43 - could just use some code in my
72:45 - client-side JavaScript to load that file
72:48 - and put it on the web and at some point
72:51 - I might show you some techniques for
72:52 - doing that stay tuned in the future but
72:55 - I think this is a good case where my
72:57 - video series the sort of module from my
73:00 - programming from A to Z class or the
73:02 - program with Tex class building an API
73:03 - with node and Express this is a case
73:05 - where I've got this what if I want to
73:07 - have every drawing some of them some of
73:08 - the there's just millions of them I
73:10 - don't want to like load hundreds of
73:12 - megabytes and gigabytes of files in my
73:14 - client-side JavaScript I could write a
73:16 - little note program whose sole purpose
73:18 - is to hold on to all that data and my
73:20 - client-side JavaScript could just
73:22 - request it so this could be because what
73:24 - I want to do is create an API out in the
73:26 - world for people to like get drawing
73:28 - information but this isn't data that I
73:30 - own in a way that I would necessarily do
73:31 - that we'd have to look at the licensing
73:33 - to see if that's even something
73:34 - reasonable to do but what I can do is on
73:42 - my computer here right the idea here is
73:46 - look oh I'm gonna make a server and the
73:48 - server is gonna hold all of the drawings
73:51 - and then my p5 sketch can just say hey
73:54 - can make a request like a get request
73:57 - please could I have a rainbow and then
74:00 - the server is gonna send back just a
74:02 - single drawing it's not gonna send back
74:04 - hundreds of megabytes of data it's it's
74:06 - storing all that data but it's gonna
74:07 - send back just one piece the interesting
74:09 - thing is this server can easily just
74:11 - also run on the laptop so and I could
74:14 - connect to it so there's a variety of
74:15 - ways you could deploy this and use this
74:17 - but I'm gonna do it all from this laptop
74:19 - alright so to run a server
74:21 - known and Express you could go back and
74:22 - watch some of these videos where I step
74:23 - through this in more detail I'm just
74:25 - going to start an in the directory in my
74:27 - console then I'm going to say NPM in it
74:30 - and I'm gonna call this a coding train
74:34 - quick draw example and it's version zero
74:39 - point zero point one it is an example
74:41 - that I am making on the coding train and
74:45 - you know whatever I'm gonna skip through
74:46 - a lot of this stuff yes okay so now if I
74:49 - go to my code you can actually see I
74:52 - have this package JSON file the
74:54 - package.json file has all that
74:56 - information that I just entered this is
74:58 - the configuration file for my project
75:01 - notice these were central manager of
75:03 - this project now so I need a couple node
75:06 - packages to be able to make this work I
75:08 - need to use Express Express is what I'm
75:11 - gonna use to handle those get that get
75:13 - request this HTTP GET request so I'm
75:17 - gonna say NPM install Express and then I
75:19 - also need something to load that nd JSON
75:22 - file so nd JSON node let's just mmm I've
75:26 - actually used this before but let's look
75:28 - so this is a node package for loading an
75:31 - ende JSON file so I'm gonna say npm
75:34 - install ND json great there we go and
75:39 - now i meant i to show you what is that
75:41 - ndj oh i got to grab that file now
75:45 - so I also need I'm just gonna rename
75:47 - this to rainbow MD JSON I'm gonna drag
75:50 - it here into my project so now this is a
75:53 - huge file and so you can see that Visual
75:55 - Studio code is like freaking out it's
75:57 - like I don't want to deal with this file
76:00 - because it's too big and I'm not but you
76:03 - can see that what this is is every
76:05 - single drawing on what on one line so
76:09 - it's like this is my like database
76:10 - essentially a database of rainbow
76:12 - drawings okay so what was i doing back
76:19 - to the code in the server oh I don't
76:23 - have a server yet I'm gonna add one I'm
76:26 - gonna call it server Jas I can call an
76:29 - app that jsr in that index yes and here
76:32 - I'm going to go back to this and
76:33 - basically I just want to do
76:35 - exactly this so the first thing I want
76:39 - to use this I need the file system
76:42 - module so I'm gonna say Const FS equals
76:44 - require file system file system is a
76:47 - module that comes with node I don't have
76:49 - to install it but I also want the nd
76:53 - JSON module which did doesn't come with
76:57 - node but I've added it and here we go
77:03 - and we can see by the way that when I
77:04 - installed those they are now
77:06 - dependencies in the package.json file
77:08 - and now ah there we go now this is so
77:14 - what is this doing this is streaming it
77:16 - so this is really useful it's a huge
77:18 - file rainbow dot nd JSON I certainly
77:22 - could load it just using loading the
77:25 - file into a big string chopping it up
77:26 - and parsing it but when you have a big
77:28 - file like an ND JSON file you want to
77:30 - read it as a stream essentially one line
77:32 - at a time because it could be like a
77:33 - gigabyte file I'm not gonna in this case
77:35 - I'm just gonna say like I'm gonna make
77:37 - an empty array and every single object
77:41 - I'm just going to push into that array
77:46 - but let's console.log them just to see
77:49 - that this is working so this is the
77:52 - stream well as it reads line by line by
77:54 - line the nd JSON file it's going to
77:57 - console.log that object okay so let's
78:01 - let's go here and I'm gonna say node
78:04 - server yes and there you go you could
78:07 - see this is it this is every single
78:09 - drawing it's gonna take quite a while
78:11 - because there's thousands and thousands
78:13 - and thousands of them but you can see
78:14 - this is the word this was the country
78:16 - code this is whether it was recognized
78:18 - it has an ID and then the drawing is in
78:20 - these arrays which aren't console
78:21 - logging but I can get access to them
78:23 - wonderful so I now have an array that
78:27 - has every single every single drawing in
78:32 - it now how do I get access to that I
78:34 - need to be able to make a get request to
78:38 - the server so let's see how we would do
78:40 - that so I need to make an Express server
78:43 - e thing let's just look up Express
78:47 - and go to the kind of like quick getting
78:51 - started hello world like the hello world
78:54 - Express example is all we need basically
78:56 - I'm going to grab all of this and I'm
78:59 - going to put it into my code so what's
79:02 - going on
79:02 - number one is I need to require the
79:04 - Express library I need to create an app
79:07 - which is calling the Express function
79:08 - I'm adding the semicolons gosh darn it I
79:11 - need semicolons to live I can't I can't
79:14 - do without I'm I need to pick a port so
79:16 - port this is somewhat arbitrary but we
79:18 - used to port 3000 and then I'm going to
79:21 - set up a route so the idea I prefer to
79:24 - be a little more long-winded about this
79:26 - this is using the arrow syntax which is
79:29 - a kind of es6 JavaScript syntax and I'm
79:37 - just going to I just I I have to I just
79:41 - have to do things the way that I do then
79:43 - so there's two functions that I care
79:46 - about with my app one is that I needed
79:48 - to listen on the port so this I'm
79:50 - setting up the sub creating a server and
79:52 - that server is listening because
79:53 - ultimately I got to get to that pin five
79:55 - sketch it's gonna make the drawing
79:56 - haven't even gotten there yet
79:57 - now I then want to set up a route and
80:03 - then when the user makes a request of
80:06 - that route send something back so in
80:08 - this hello world example if I run the
80:10 - server and go to localhost 3000 it says
80:18 - hello world but that's not what I want I
80:20 - don't care about sending hello world
80:23 - what I want to do is let me make a route
80:26 - called rainbow then what I'm going to do
80:29 - is I'm gonna say let a random number
80:32 - equals math.floor math.random times
80:38 - drawings dot length so ever many
80:41 - drawings have been loaded when somebody
80:43 - goes to this route pick a random one and
80:45 - then I'm gonna say and this could be a
80:47 - Const I guess and I'm gonna say response
80:50 - send drawings index R and I suppose I
80:53 - should call this index so now whoops
80:58 - index
80:59 - let's rerun the server and there is a
81:02 - tool called node mod which will restart
81:04 - the server for you I'm gonna do this
81:06 - manually and then I'm gonna go here
81:08 - cannot get / because there is no route
81:12 - anymore at / but if I go to / rainbow
81:17 - there we go there is the drawing hold on
81:23 - a sec timeout for a second let's go to
81:31 - sworn I have a this like a extension
81:35 - that will format the JSON but I guess I
81:37 - didn't alright I just installed a Chrome
81:45 - extension to format the JSON so I could
81:47 - see it so here's a random drawing and
81:49 - this is all the information now all I
81:52 - need to do is have p5 request JSON from
81:57 - this route and then render the draw and
82:01 - pause for a second I think I must not
82:05 - doing multi-part videos this day all
82:10 - right oh there was up some there's been
82:12 - some new members thank you very much all
82:14 - right so now the question is where do I
82:27 - run my p5 sketch and there are a variety
82:29 - of ways in theory this is an API that
82:31 - anyone could make a request to whether
82:33 - or not I'm opening it up for other
82:36 - people requests to it or not is a
82:37 - complicated question but one way that I
82:40 - could use it is just have this
82:41 - particular server host a p5 sketch in
82:44 - the first place so the way to do that if
82:46 - I go back to my files and I go to a
82:49 - desktop quick draw this is where all the
82:52 - files are I'm actually going I have a p5
82:54 - for HTML file and a and a sketch dot J's
82:57 - file in here but I'm going to make
82:58 - another directory called public so these
83:00 - would be the where I want files that are
83:03 - hosted by the server to live public and
83:07 - then I'm gonna say something like in my
83:09 - code app I don't remem
83:12 - static file hosting Express serving
83:18 - static files and Express is just this so
83:20 - basically what I want to do is serve up
83:23 - the HTML and the JavaScript files as
83:26 - well so I'm going to do that here I'm
83:28 - gonna add this so now look at this now
83:32 - and let's go to the p5 code and let's
83:36 - say you know background 0 so I all let
83:40 - this p5 code does is create a 100 by 100
83:42 - canvas with the background of 0 so now
83:45 - guess what if I go to localhost 3000
83:47 - slash rainbow I get a drawing because
83:50 - I'm handling that rainbow route with a
83:54 - bike sending back a drawing but if I go
83:57 - to just slash oh oh I didn't restart the
84:00 - server did I we've restart the server go
84:03 - to slash there's the p5 sketch so now my
84:07 - p5 sketch can finally ask for the server
84:12 - for the drawing okay I'm gonna go over
84:15 - here and I'm gonna say first of all one
84:17 - thing is by the way that simplified data
84:19 - set all of the simplified version of the
84:21 - quick-draw data set all of the drawings
84:23 - were simplified or scaled to 255 by 255
84:27 - pixels so that makes things easier to
84:29 - work with I'm gonna call the function
84:31 - load JSON and guess what I'm just gonna
84:33 - say lo JSON rainbow cop rainbow right
84:38 - yeah and then I'm gonna write a function
84:40 - got rainbow that gets some data and I'm
84:44 - gonna say console.log data so this is
84:46 - the idea now know if you've seen load
84:48 - JSON before maybe before I've used it
84:51 - for like load this actual JSON file or
84:53 - maybe I've said load JSON from an API
84:55 - like word NIC now I'm going to the slash
84:58 - rainbow route which is local to this
85:00 - particular server and guess what I don't
85:01 - actually even need to restart the server
85:03 - because this this will be loaded
85:05 - dynamically so let's go here and we can
85:07 - see there it is this is the rainbow
85:10 - drawing right here I'm gonna give me
85:12 - some more room and here's the drawing
85:13 - itself so all I need to do now is write
85:16 - an algorithm to go through and draw
85:18 - destroying all right we're ready so let
85:21 - me make the background like 200
85:24 - and let me say the drawing is in dated
85:31 - drawing is that right console.log
85:34 - drawing look at that yes so this is the
85:37 - actual drawing it's just two arrays
85:39 - because it was just two strokes now I am
85:42 - going to say for let I equals 0 I is
85:46 - less than drawing dot oh did the mean
85:54 - let me figure this out array this is an
85:55 - array oh right Oh weird
85:57 - I'm sorry I'm blah oh all right okay so
86:00 - I have a draw this is only one stroke
86:02 - that's why this was confusing here some
86:04 - of these rainbows there we go this is
86:05 - what I want to look at I have three
86:07 - different strokes so first I need to
86:10 - look at all the strokes sorry
86:11 - so I want to say let and I'm going to
86:14 - call it a path so for let path of
86:18 - drawing this is each and every path path
86:20 - 0 path one path to then each path has a
86:24 - bunch of points that's 0 has 15 path one
86:27 - has 10 path to has 6 I'm gonna say 4 let
86:32 - I equals 0 is less than path path index
86:37 - 0 dot length because this and then the X
86:41 - is path index 0 index 1 wait no patty X
86:47 - I oh sorry this is confusing and the y
86:50 - is path index 1 index I right so this is
86:54 - what I'm doing I am looping through 0 1
86:58 - 2 that's the outer loop the each path
87:01 - each path is 2 arrays the path C Row is
87:05 - all the X's path 1 is all the Y's I need
87:08 - to look at all the X's and all the Y's
87:09 - and then set a vertex X comma Y so I can
87:13 - say begin shape and shape I can say no
87:20 - fill stroke 0 whoops stroke 0 and maybe
87:26 - I'll say stroke weight 3 just to make
87:30 - the lines a little bit thicker and let's
87:33 - see what I see there we go rainbows
87:36 - rainbows
87:39 - these are everybody's rainbows each time
87:41 - I hit refresh you know one thing I could
87:43 - do now is when it finishes I could just
87:47 - say like lo JSON again ooh maybe I would
87:53 - want to redraw the background every time
87:58 - that might make sense and here we go
88:03 - this is a random drawing over and over
88:05 - over again so I could start to do things
88:07 - like request a specific drawing from a
88:09 - certain country I could download
88:11 - different scan I mean you know different
88:13 - models like let's just let me pause for
88:15 - a second and grab another model so let's
88:22 - get what's a good one Apple asparagus
88:36 - acts by mean cat is sort of like this
88:38 - typical one so let's just do cat so many
89:03 - all right I downloaded the cat file now
89:06 - and I'm just going to put that in here
89:08 - as well whoops did I put that somewhere
89:11 - weird no I'm sorry sorry let me do that
89:14 - again
89:17 - delete shoot
89:31 - um hold on sorry everybody here we go
89:41 - okay so I downloaded one more set of
89:44 - drawings the cat files so I'm gonna the
89:47 - cat drawing so I'm going to copy that
89:48 - into here and we can see now I have cat
89:51 - MD JSON if I go back to my server I
89:54 - could do I'm gonna say I'm gonna call
89:57 - this rainbows and I'm gonna do a
90:00 - different one for a cat and I'm also
90:04 - going to do cats cats push object and
90:10 - then I'm going to make another route for
90:15 - for cats so now if I run the server and
90:25 - I go back to my actual sketch and I
90:30 - switch to going to the cat route now
90:33 - where was that Here I am I'm going to
90:36 - hit enter oh I got some issue a cat
90:40 - internal server error so what's going on
90:42 - here drawings is not defined so I made a
90:47 - mistake in my server oh this is over
90:52 - here is rainbows length and this is cats
90:56 - dot length and I would have seen that
90:58 - error here if I was paying closer
91:00 - attention there now I've got cats and
91:03 - now let's look at a lot of cats oh oh
91:09 - it's still giving me rainbows did I not
91:13 - hit save load JSON cat Oh low JSON cat
91:19 - whatever I'm not being too thoughtful
91:20 - about this give me the cat run the
91:30 - server again
91:36 - let me refresh this page it's still
91:40 - rainbows cat cat got rainbow somewhere I
91:46 - messed this up cat cats ah this is what
91:55 - I get for trying to code so quickly this
91:57 - is supposed to say cat dot JSON cat MD
92:02 - JSON now here we go oh we have to
92:05 - restart the server and here we go
92:09 - finally cats there's a lot of different
92:12 - cat drawings I really should slow this
92:13 - down like let me just slow this down a
92:16 - little bit
92:16 - oh here's what I want to do actually oh
92:18 - this video should really be over but
92:20 - you've already watched this much watch a
92:22 - little bit more right I really want to
92:25 - draw draw the drawing in sequence now
92:29 - I'm not I don't have the timing
92:31 - information and that would be useful to
92:34 - have but let's let's make it actually
92:35 - animate so I'm going to add a draw
92:38 - function I'm not gonna add a page
92:43 - transition event and so when I've got a
92:47 - cat and I'll just change this what I'm
92:50 - actually going to do is just set current
92:57 - I'm is just a set cat equal to data so
93:00 - I'm going to take out all of this cat
93:02 - equal to data dot drawing so I'm gonna
93:06 - comment this out let's think about this
93:10 - and then I'm going to say let X comma Y
93:15 - and I'm gonna have I'm gonna say if cat
93:20 - then I now need to keep track of where I
93:24 - am let stroke index equals zero
93:29 - let let pen index equal zero so I need
93:35 - to keep track of two indices right
93:37 - because I'm going to walk through one at
93:39 - a time the each vector of the first
93:43 - stroke and then I'm Strokes going to go
93:46 - from zero to one and go through each of
93:47 - the other ones
93:48 - so if
93:49 - there's a cat the first thing I need to
93:52 - do is say so if I'm gonna say x equals
93:59 - and what was this stuff it is path o
94:05 - path drawing so cat index stroke index
94:15 - index pen index roof index 0 boy this is
94:23 - really awkward about how it's like using
94:25 - just arrays for everything but I'm in
94:26 - the first stroke in the first pen is not
94:29 - the right term I don't know what to call
94:30 - it vertex but whatever I could actually
94:32 - just call this index maybe the stroke
94:35 - index and the index then 0 is for X and
94:37 - then 1 is for Y and let me just just to
94:43 - see that this works let me say point let
94:50 - me say point X comma Y and I don't these
94:54 - don't need to be global so let's see
94:58 - what this does and so first of all let's
95:00 - just run this oh boy I freaked it out it
95:04 - won't ever stop
95:08 - well I think by the way I killed this I
95:11 - need to build in a little more of a
95:12 - delay with these API calls so cat is not
95:15 - defined sketch dot J's line 12 if cat
95:19 - that needs to be a global variable so
95:24 - and let me just say here console.log X
95:29 - comma Y let's see did I get an X comma Y
95:31 - yes so I've got that first point over
95:33 - and over again and presumably 52 comma
95:36 - 48 I don't know why I don't see I guess
95:38 - I need to say stroke 0 stroke weight 3
95:47 - there we go so there it is that's the
95:49 - first point so now what I need to do is
95:52 - say index plus plus if index is greater
95:59 - than or equal to cat stroke
96:03 - index dot length then stroke index plus
96:11 - plus and index equals zero so this is me
96:15 - marching through them one at a time so
96:20 - oh and I don't have the Y right you can
96:24 - see that something's wrong here I mean
96:28 - this let's see next less fuss I think
96:35 - this is right well the point of this is
96:41 - what I actually want to do hmm timeout
96:45 - for a second I forgot the variable well
96:46 - that's probably an old comment from the
96:48 - floor hold on I need a little break for
96:50 - a second why does not work something is
97:06 - off about this
97:25 - do I have these in the wrong order hold
97:33 - on
97:37 - right it's going zero zero zero one one
97:40 - zero there were 17 oh no no I have these
97:49 - in the wrong order that's weird
97:59 - I have these in the wrong order
98:16 - like I think it should be zero index it
98:21 - actually works this way
98:43 - doesn't seem more like the cat
98:54 - it's this this is what it is of course
99:13 - right because stroke index then zero is
99:18 - the ex's one is the Y's index is going
99:23 - up uh and then this there we go yeah
99:33 - yeah it's hard to see but these are the
99:35 - cats okay I got it now
99:37 - all right let me go back to where I was
99:54 - all right and once it wasn't paying
99:57 - attention if I look at how those arrays
99:59 - are organized the for the the its it I'm
100:04 - sorry
100:30 - okay something is terribly wrong here
100:32 - and actually I have not been carefully
100:34 - looking at how those arrays are
100:36 - organized very confusing to like stir
100:38 - all these data's in arrays but there are
100:42 - eleven strokes and there this stroke has
100:47 - 23 points this stroke has nine points
100:50 - but notice that the I have the order
100:54 - wrong right this is an array of an array
100:57 - of arrays and so basically the stroke
101:01 - the the zero element of the stroke is
101:05 - all the different X values and this is
101:08 - one element of the stroke is all the
101:10 - different Y values I had those out of
101:13 - order and then here the number of points
101:16 - is not the number of strokes but rather
101:19 - the number of X's so now if I redo this
101:24 - I should see I can sort of see it
101:26 - drawing oops
101:34 - you can see the outline of a cat there
101:37 - if I you can start to see if I the
101:40 - outline of a cat here of course it gets
101:41 - stuck at the end it's giving me an error
101:43 - so first let me fix that error so the
101:45 - error that I need to check is if stroke
101:48 - index equals a cat dot length then I'm
101:56 - done then I'm going to say cat equals no
101:59 - I am going to say no more to the cat and
102:02 - there we go so this is the drawing the
102:05 - cat now of course I'm just drawing all
102:07 - the points I need to connect the
102:08 - previous points to the the the other
102:11 - point so I'm going to add a previous X
102:13 - previous y and then I'm going to say
102:18 - here down here previous x equals x
102:22 - previous y equals y and then here I'm
102:25 - going to say a line between previous X
102:29 - previous y and x and y now it should do
102:32 - nothing when those values are no so now
102:35 - we see there ooh oh wait a sec no no no
102:39 - no no no aah when I get to the next
102:41 - stroke then I need to say previous x
102:44 - equals you know undefined again and
102:47 - previous wide well son because I don't
102:48 - want to draw they I don't want to
102:50 - connect the strokes so that's a little
102:51 - bit of an awkward way of doing it it's
102:53 - still doing that isn't it
102:56 - so and then I want to say if previous X
102:59 - maybe if I do this does not equal
103:03 - undefined then draw the line let's see
103:07 - if this works
103:07 - whoops sketch the line 19 I always have
103:11 - this extra equals there well weird it's
103:17 - still connecting everything lovely
103:20 - little cat there what am I missing
103:22 - right I don't want to draw the line
103:27 - these are undefined at the beginning oh
103:29 - it gets set to here so I need it else
103:33 - here else like don't set it if it's at
103:38 - the end okay there we go finally we are
103:43 - drawing cats now all I have to do you
103:46 - then when I reset there I can just ask
103:49 - for a new one so let's ask for a new cat
103:53 - and whenever I've got a cat let's draw a
103:58 - white background let's make a little bit
104:01 - gray will set it gray at the beginning
104:04 - there we go
104:05 - now here we go we're now going to draw
104:08 - lots of cats that you finish Wow
104:11 - then get another one sketched on line 13
104:17 - cat is undefined and then there should
104:24 - be no more cat until I've got a cat try
104:27 - that again
104:29 - there we go I don't know what did wrong
104:35 - like it's true the cat is it asking for
104:46 - a new cat should I say no loop and then
104:52 - when it gets a cat say loop Oh stroke
104:57 - index needs to be set to zero okay thank
105:00 - you to the chat hey hold on Matt you you
105:06 - can like edit out me trying to think
105:07 - about this for a minute
105:11 - thank you to be I am so me and Louise
105:15 - both in the chat who just pointed out
105:17 - that my my technique here is correct but
105:21 - the issue is that I need to reset
105:23 - everything back to zero so here I need
105:26 - to set stroke index back to zero and I
105:29 - think index will already be zero
105:31 - yeah index is already zero so yes that
105:33 - stroke Enix needs to go back to the
105:34 - beginning and now I think we're ready to
105:35 - enjoy a whole bunch of cats
105:41 - [Music]
105:46 - patro eggs
105:48 - alright thanks for watching this coding
105:51 - challenge with the Google quick-draw
105:53 - dataset
105:54 - stay tuned for a future video where I
105:58 - show how to do this is where I show how
106:04 - to create new drawings with a sketch of
106:07 - RNA and model the machine learning model
106:09 - that was trained on these roads and if
106:11 - this was one of your drawings thank you
106:13 - for making this beautiful package and
106:14 - I'll see you in a future Cody
106:17 - [Music]
106:24 - [Music]
106:40 - this is like immensely satisfying like I
106:51 - could just watch this all day
106:55 - yeah is it not finishing the drawings
106:58 - [Music]
107:02 - well I should give it a little like
107:04 - delay like if I did set time out let me
107:20 - just make a function called new cat
107:22 - [Music]
107:30 - Oh what music I just played weird so now
107:42 - let's take a look and I just give it a
107:44 - little delay what's what what
107:54 - thirty-eight miss something odd I mess
108:00 - something up with my
108:13 - yeah I think I think that's right
108:23 - is it finishing it I think it's
108:30 - finishing the cat it does sort of seem
108:37 - like it's not doing the very last one
108:39 - right
108:50 - yeah I don't know that's way too long to
108:56 - wait
109:03 - people who draw - Trish yeah
109:13 - all right everybody now is it it's not
109:17 - even four o'clock yet do I dare dare to
109:23 - sketch RNN oh right because the Google
109:27 - quick truck guessed it before the person
109:29 - finished that's interesting yeah I think
109:41 - I might be done for today did I do what
109:47 - I said I was going to do this when we
109:51 - just look here
110:20 - sorry I'm looking here to think about
110:23 - sketch our end so people are this by the
110:30 - way is not this by the way is not sketch
110:34 - RNN just to be clear this is the these
110:38 - are the actual drawings not the imagined
110:40 - drawings I feel like I I think I'm done
110:43 - for today what did I what did I make
110:46 - today I got the logo part to done I got
110:51 - the I got the looks our logo part to the
111:02 - ml5 save model and the quick draw stuff
111:05 - I think I want to wait till sketch RNN
111:07 - is in within the documentation of ml5 so
111:11 - I will come back and do that another
111:13 - time plus I feel like yeah alright I
111:22 - could watch this all day let me make
111:27 - sure it's actually doing the last bit
111:29 - let's think about this if stroke index
111:38 - equals cat length yeah this it has to
111:44 - have done the last one right so let's
111:51 - let's not do this for a second and let's
111:55 - console.log
112:07 - yeah it's greater than I think yeah I
112:12 - think it's doing all of them I'm looking
112:14 - at this code it wouldn't be skipping one
112:16 - because this is an index is invalid here
112:19 - and then it goes up it's resets index to
112:24 - zero
112:24 - it'll loops back around and starts over
112:28 - yeah it's got though it's got to have
112:30 - gotten the last one just try going one
112:32 - further it'll break and you'll be right
112:34 - yeah yeah I mean I could say or
112:45 - something
112:53 - yeah it broke sketch that just line 18
113:05 - broke
113:14 - interesting so I think maybe it wasn't
113:18 - maybe it was not getting the very last
113:23 - one of each stroke why is that
113:28 - that's crazy cat
113:38 - thank plus-one
113:43 - index goes up oh because I'm pulling it
113:49 - here and then index goes up by one that
113:56 - doesn't make sense
114:00 - I'm so confused my brain is confused me
114:06 - I am so me as typing this means the
114:08 - answer is about to come through the last
114:10 - index won't error yeah that won't error
114:12 - it's just gonna be undefined okay so I'm
114:15 - good it's the same right okay I'll just
114:18 - be undefined yeah
114:19 - all right we're good we're good
114:20 - everybody my mental math is still
114:22 - correct all right thank you everybody it
114:27 - is 4:00 o'clock I think I am finished I
114:30 - just want to like is there any last
114:31 - little bits of stuff that I want to like
114:33 - cover or talk about today um pac-man
114:43 - yeah thank you everybody
114:47 - so let's see I could put this code
114:49 - somewhere this will be so let me do a
114:58 - little quick just so the code is ready
115:02 - I'm going to do this now so I'm going to
115:11 - grab these three files I'm going to put
115:18 - them in a website coding challenges so I
115:30 - need to make the question is is was code
115:38 - was this morning like part 2 of logo I
115:41 - think it kind of was let's so this will
115:45 - be 122 quick draw
115:51 - so that stuff goes in there and let's do
115:59 - let's change this to 1 and then also
116:06 - make a version 2 sorry if you can't see
116:08 - this and then I'm going to go to desktop
116:14 - logo this should be everything for this
116:19 - version so now if I go to really messed
116:34 - up here because I didn't let me just
116:43 - only merge this this was the code from
116:50 - save/load livestream all right I'm gonna
116:53 - merge this and then okay
117:06 - and I'm going to get Branch quick-draw
117:17 - checkout withdraw get get ad coding
117:29 - challenges on 22 quick-draw code from
117:36 - quick-draw challenge push for gin
117:43 - quick-draw okay let me go check out
117:51 - master and what I want to do is shoot
118:04 - have an idea here what is this nonsense
118:15 - there's some extra thing here that I'm
118:17 - going to just get rid of it
118:26 - branch logo get check out logo and hold
118:38 - on now
118:39 - logo one logo to get a doc - a moving
118:49 - logo code around and adding second parts
118:53 - and get push origin logo so I should
119:00 - have to separate pull requests now
119:03 - welcome to weird things with github so I
119:08 - should be able to pull requests this
119:12 - this is the quick-draw code
119:15 - [Music]
119:18 - or challenge 1:22 ooh
119:26 - well wait why is my what sort of set of
119:34 - tabs is this what have I been using for
119:40 - space tabs all this time and not notice
119:42 - it like there's like 18 space tabs this
119:45 - is insane what is going on this look
119:51 - like two spaces tab size to render white
119:58 - space all hmmm oh those are tabs why is
120:09 - it what's setting in vs code is changing
120:12 - those two tabs oh my goodness this
120:17 - cannot be
120:33 - what am i forgot if I'm using prettier
120:35 - eye I switched everything in my workflow
120:38 - but I never actually did it on this am I
120:42 - do not how I have alright alright let's
120:48 - see oh this I have this crazy thing
120:56 - indent with tabs indents size 400 let's
121:15 - let's disable this for a second
121:24 - let's let's install this prettier thing
121:35 - reload okay oh what a mess where am i oh
121:49 - oh who knows where I am I'm lost
121:54 - I've ruined everything I'm in the
121:56 - quick-draw thing I want to be in the
121:59 - website thing looks oh what a mess I've
122:09 - made of everything logo 1 yeah these are
122:15 - these are fine yeah there we go ah
122:21 - oh no it's inheriting do I need to react
122:31 - reload this thing No
122:51 - prettier default two tabs false
123:12 - semicolons true so these are all the
123:17 - settings oh I've gone off the deep end
123:24 - here so people really watching me do
123:26 - this right now right where is the chat
123:35 - hold on Oh github it was rendering in a
123:46 - 6 space tabs okay hold on editor tab
123:49 - size to vyas code prettier settings
123:57 - let's see this yes yes prettier ah here
124:06 - we go here we go
124:17 - prettier oh there's all these things
124:19 - here okay great great great great great
124:21 - prettier table with two that's nice I
124:36 - fixed that and then what was the other
124:40 - thing that I want now is Oh hold on
124:43 - prettier spaces spaces use tabs that
124:57 - must be right false that's the default
125:06 - value
125:13 - this is very important what I'm doing
125:15 - right now no wait - why why is this one
125:30 - still tabs
125:40 - why is this one taps what have I done
125:42 - what have I done to deserve this
125:45 - insert spaces when pressing tab Tech
125:51 - Center auto auto indent yes
126:07 - detect uh I don't ever want to use tabs
126:13 - let's try that no but it's not even
126:21 - formatting it huh uh hold on why is this
126:33 - why have I lost my format on save format
126:43 - unsaved true detect indentation false
126:57 - restart prettier yeah that's a good idea
127:00 - let's just restart whole thing
127:13 - weird let's go to extensions prettier
127:18 - now okay let's try this
127:56 - well it's not formatting on save and now
128:04 - it is I don't need this though
128:23 - I saved it as a new file a tenth
128:28 - reformatted it
128:41 - there fix it this is fine this is fine
128:49 - and this is fine don't know what was
128:51 - wrong with that one file
128:53 - this is spaces this is spaces and spaces
129:10 - not tabs well how is scary oh but my
129:22 - quick-draw stuff oh hold on hold on pull
129:28 - requests oh I didn't actually make the
129:31 - pull request okay so hold on now
129:33 - everybody just relax I can't believe
129:37 - like how much time what was it called
129:40 - quick-draw uh hold on wait where's my
129:46 - own quick-draw yeah we go to this branch
129:51 - and then here that spaces tabs oh this
130:01 - file - what is it with the files that
130:04 - what if I like manually like why are
130:08 - certain files not formatting that's so
130:21 - weird I've never seen this whoops format
130:24 - document format say format selection
130:28 - whoops oh that did it format selection
130:32 - did it I can't explain it
130:38 - where am i but that did it
130:47 - right yeah okay oh it's this cuz of this
130:55 - file maybe yeah because I'm in this repo
130:59 - that's probably why it must be like
131:03 - picking up oh it's picking up settings
131:05 - from here yeah all right that's got to
131:11 - be it all right I know the camera went
131:20 - off
131:34 - alright let's finish these pull requests
131:36 - people
131:44 - oh wait now hold on let's do the quick
131:46 - draw one first this is the quick draw
131:50 - code for challenge 122 if we look at
131:58 - this there look at this look at this
131:59 - nice normal normally indented code okay
132:03 - now let me do this
132:10 - this moves challenge 121 into 121
132:16 - underscore one and adds 121 underscore
132:19 - two for the second part of the logo
132:22 - challenge it shouldn't be merged without
132:29 - fixing the markdown file for challenge
132:34 - 121 part one first so let me do that
132:49 - what does this get repeat oh yeah okay
132:54 - what kind of crazy code that I write
132:56 - earlier today
132:57 - okay all right I'm definitely done I
133:13 - like I really want to do more but
133:15 - sometimes you just have to know when to
133:17 - quit
133:18 - I don't usually know when to quit I
133:20 - would be glad to take any questions a
133:26 - few questions thank you to new members
133:29 - who joined
133:30 - [Music]
133:31 - actually okay so let me do a little a
133:33 - few housekeeping me I can't imagine that
133:34 - anybody's still watching but if you are
133:37 - I will mention that I am way behind on
133:41 - sending out stickers and books to patron
133:44 - and YouTube members I am really this is
133:49 - my goal everybody joined November first
133:51 - or earlier sorry if you join the last
133:53 - week cuz I compiling everything I've got
133:55 - to get everybody everything by the
133:56 - holidays if you do not have something
133:59 - and are wondering about the status of it
134:01 - please send me a message on slack if
134:04 - you're a youtube member you don't have a
134:05 - slack invite then make sure you find the
134:08 - community post which has the forum to
134:09 - get a slack invite and also you can
134:11 - message at math blank on slack who is if
134:15 - you are interested in coding train
134:18 - merchandise I might as well plug this
134:20 - just for a second because it's new
134:23 - actually I am wearing right now this is
134:26 - uh one of these shirts it looks like I
134:31 - am disrobing don't worry I am NOT I'm
134:33 - just showing you my never forget it was
134:36 - kind of like translucent never forget
134:37 - that this dot shirt you can get your own
134:40 - never forget the dis da shirt designed
134:42 - by human slash shop slash coding trained
134:45 - and believed so you can see these are
134:49 - the various shirts and things I wanted
134:52 - to mention people have it's hard to
134:54 - notice this but this phone case here is
134:58 - $35 that's crazy but this is actually
135:01 - designed I should probably make this a
135:03 - default for a zip hoodie where they
135:05 - never forget that this dog is on this
135:06 - side all right we just want to mention
135:08 - that other housekeeping things let's see
135:11 - what other questions there are what do
135:12 - you think about Gans or generative
135:15 - adversarial networks they are very
135:17 - interesting to me and I would love to
135:19 - learn more about them and maybe do some
135:22 - tutorials about them a wonderful artist
135:25 - who does wonderful things with gann is
135:31 - yes you should check out Glogau lista on
135:35 - Twitter who makes all sorts of amazing
135:38 - again related projects yeah
135:44 - [Music]
135:54 - [Music]
135:56 - I'm not going yet waiting to see if
135:59 - there's any more questions my mic is
136:02 - very quiet that doesn't surprise me
136:04 - because I like it got moved around but
136:06 - hopefully it's fine now thank you effect
136:11 - for letting me know this is the end of
136:12 - today's livestream today I'd like about
136:14 - four hours of live streaming today I
136:22 - won't I'm gonna be gone for they're
136:25 - quite a while because of thinker con and
136:27 - Thanksgiving so apologies in advance for
136:29 - that hopefully I'll be able to catch up
136:32 - a lot of content when I get back we have
136:36 - a lot of notifications here on Twitter I
136:40 - look at these layer this is the coding
136:42 - training account I should do a coding
136:46 - train gift basket option for an
136:48 - excellent shot sure or sense a cloak OS
136:53 - are you planning to step up on your
136:55 - debugging game I know I could do better
137:04 - yes no I'm not planning to but I
137:06 - appreciate you I mean yes I mean I I I
137:09 - think that it would be helpful for me to
137:11 - develop continue to develop better
137:14 - strategies for debugging to demonstrate
137:16 - do you mean you don't like my technique
137:18 - of having a bug you just sitting there
137:20 - going like this you're like maybe the
137:22 - chat will tell me what's wrong in just a
137:24 - minute do you cook Tim asked do you code
137:30 - any other languages than JavaScript yes
137:34 - so I do a lot of programming in Java
137:37 - specifically using processing which is a
137:40 - Java based platform you can download
137:43 - here I actually was thinking of doing
137:46 - the quick-draw stuff in processing
137:48 - because loading the big files I didn't
137:50 - want to deal with the server but then I
137:52 - went ahead and did the node things I
137:54 - thought that was interesting okay
137:58 - [Music]
138:10 - [Music]
138:18 - [Music]
138:24 - just use debugger in the JS file and
138:27 - chrome will stop at that break point for
138:29 - you I should probably try that at some
138:31 - point that's a very good suggestion
138:32 - thank you thank you Juke for your kind
138:36 - comment what classes do you teach and
138:38 - what are they about code all right so uh
138:43 - very quickly I will answer aki mcs
138:46 - question thank you to aya Luis Misa
138:49 - who's added who has added to pull
138:51 - requests so I teach classes at New York
138:55 - University and participle of the arts
138:57 - there's a grad program called ITP and an
138:59 - undergrad program called ima and then
139:02 - online I make videos for this YouTube
139:05 - channel and some of them are loosely
139:07 - grouped into things that could possibly
139:08 - somewhat be classes but I haven't really
139:11 - cracked that nut yet of like this this
139:14 - thing on YouTube is a course that you
139:16 - could take it's really just a lot of
139:18 - content and hopefully inspirational and
139:19 - helpful but in terms of the actual
139:22 - things being a course the place where
139:24 - you can look and I'm true to one thing
139:26 - is I'm really trying to do is in theory
139:29 - I would like to continue to work on and
139:31 - improve the navigation here so there are
139:34 - some so in theory I would like this
139:38 - website to be a place where it's easier
139:42 - to find the packaged courses right now
139:45 - if you're looking for that I think if
139:46 - you go to coding trained YouTube coding
139:48 - trained playlists playlists and if I do
139:54 - all playlists whoops
140:00 - you can see like but you know this is a
140:03 - big mess of things so I'm trying to
140:06 - figure this out and some things are
140:08 - organized for example you can see here
140:15 - these are the beginner JavaScript
140:17 - tutorials playlist one through seven
140:20 - playlist eight etc these are some
140:23 - playlists associated with neural
140:24 - networks in machine learning this is an
140:27 - old antiquated Twitter bot tutorial that
140:29 - probably doesn't work anymore these are
140:30 - some old nature of code videos here's
140:32 - the beginner processing videos get
140:34 - github
140:34 - but again I please somebody save me and
140:39 - help me figure out how to organize all
140:41 - this stuff okay why not create a
140:51 - storyboard for the website
140:53 - yes actually so Matthew if you go to the
140:57 - github repository for the website if you
141:01 - go under issues there are a few
141:03 - different issues that are currently
141:06 - tracking the dis discussion so this is
141:10 - one proposal to have the website
141:14 - organized as coding challenges beginner
141:17 - playlists and then other courses that
141:20 - are not for beginners so that's one
141:24 - thing that and then all the live stream
141:26 - archives so again this is like anneals
141:28 - webb has done and many other
141:30 - contributors but Neil's web in
141:32 - particular has done a tremendous amount
141:34 - of work Niels Niels Weber is a student
141:36 - in germ and web developer in Germany and
141:39 - so so thank you so much to Niels web and
141:44 - I am certainly happy for people to
141:47 - contribute and participate in the
141:49 - development of the website I haven't
141:50 - figured out really like a structure to
141:51 - do that but it's happening in a sort of
141:53 - ad hoc basis
141:55 - [Music]
141:59 - Tushar Mishra asked last question do you
142:02 - game alright you're gonna be sorry you
142:05 - asked if you go to youtube.com and you
142:11 - search for EOD gaming this here with 166
142:19 - subscribers is my gaming channel with my
142:24 - kids who I'm very conflicted about but
142:26 - this this video is really what I would
142:28 - recommend my daughter I played like
142:31 - snipper clips or snipper clips for an
142:33 - hour and 40 minutes and it's a wonderful
142:40 - game and hopefully we'll do this again
142:42 - this weekend sometimes but we do live
142:43 - streams trying to play I love this game
142:47 - so much it's so much fun of course I got
142:52 - a copyright notice because I use the
142:54 - snipper clips oh look at this like I'm
142:58 - on my own youtube gaming so if I go to
143:01 - like gaming YouTube calm look at this
143:08 - yeah so someday this is gonna be even
143:12 - bigger than the coding trait I don't
143:16 - think so alright everybody goodbye
143:18 - thank you so much for tuning in I am
143:20 - going to now stop this livestream and go
143:22 - about go on with my life and I hope to
143:28 - hear from you see you you're coming to
143:30 - think archons let me know I would love
143:32 - to see you there I'm so excited about it
143:37 - okay
143:46 - this is playing it what's fun is to put
143:48 - this in double speed come on we can get
143:52 - it in that basket well though I have to
143:56 - it's hard I just have to wait this took
143:59 - us so long okay come on
144:03 - well maybe I'm probably gonna get deep
144:09 - copyright notice now in this video there
144:12 - you won't be all day you probably can't
144:13 - really hear this can turn music off oh
144:27 - [Music]
144:31 - boy oh come on I'm like reliving this
144:34 - it's so painful I really have to go okay
144:39 - goodbye everybody you could go and watch
144:40 - this video on your own the link to I
144:43 - will link to it in the chat or somebody
144:45 - can link to in the chat for me it is
144:46 - this we had so much fun
144:50 - alright goodbye everybody I'm gonna stop
144:53 - streaming now see you next time won't be
144:56 - for a few weeks so stay tuned if you
144:59 - want to get an alert when I scheduled
145:01 - the next live stream subscribe and then
145:05 - click that alarm bell is the thing
145:06 - you're supposed to do if you want okay