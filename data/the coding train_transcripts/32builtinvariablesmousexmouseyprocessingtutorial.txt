00:02 - Remember this program right? We just finished [with] this
00:05 - It's a dynamic
00:06 - program. It has one line of code that executes its set up a bunch of lines of code [that] happen over and over again and
00:12 - Draw repeating repeating repeating and what's the result this static rectangle that just sits there in the window?
00:18 - So what is it that? We want to do we want to figure out? How do we animate that rectangle?
00:23 - how do we introduce this idea of variation into a program and truly what we're leading up to is this idea of learning about a
00:31 - fundamental concept of
00:33 - Computation this idea of a variable a program that stores data over time in the game context that data could be
00:41 - the scores of different players the level that a player is on it could be the
00:46 - Positions of things over as they're moving right any program [that] has something moving you've got to store its position
00:52 - What is its size, and if it's growing? What is its new size, there is data
00:57 - Associated that a program is storing a Processing sketch is storing whenever it runs that stuff is being stored in the computer's memory
01:04 - [so] that's what we're leading up to but we're going to kind of start in a simpler way just by kind of sneaking in on
01:10 - this idea of
01:12 - variation into our processing sketch, so
01:16 - What if for [example] we could say?
01:19 - [erase] this block of code thing here. We have we're writing this
01:23 - Rectangle and we're writing. We're drawing this we're calling the function rectangle
01:27 - We're drawing a rectangle at 100 comma 100 with the size of 50 comma 20 what if instead of saying that I could just say?
01:33 - it ah I'm going to draw a rectangle at
01:36 - the Mouse's
01:40 - x position
01:42 - Comma 100 comma 50 count of 20 wouldn't that be nice, right?
01:47 - Instead of saying oh, I want to draw a rectangle [at] this specific value
01:50 - I just want to say draw that rectangle where the mouse [is] at the mouse's x position
01:55 - So if we were to type this into processing I am almost certain we would get an error which would say something like unexpected token void
02:02 - You know missing a blah blah blah. It doesn't know what this is
02:06 - But the but in fact we can do exactly the same thing
02:11 - I don't know where I was going with this, but we can actually do this instead of saying the mouse is x position
02:18 - We can go over here and look at this program, and we can actually say
02:23 - Mouse x look at that it turned this
02:28 - Beautiful pink color it turned this beautiful pink color right this blue color is for a function
02:33 - We think of it as a command rect mode [center] stroke 255 mouse x isn't a command a function
02:41 - it's a variable it's a word that stands for a number. mouseX
02:47 - stands in for whatever the current value of the mouse's
02:51 - x position is and because Processing knows about this word. It turned it pink for us all I forgot the cameras are going [up]
02:59 - And and and and it's great, I've just excuse me for a second
03:03 - I'm going to come and say hi to you. Hi, and I'm going to turn this off and turn it back on and
03:09 - Someday I'll edit that out, but I can't right now okay, so um so this is great now
03:14 - Let's actually they were had a big exciting moment here. We had a little pause
03:17 - I'm gonna go back, and I'm gonna run this program. [I'm] gonna run this program. Oh my goodness. Look at this look at this holy
03:24 - Holy Moly right you know I don't I'm getting excited by just this rectangle moving on the screen, but I don't know it's really not that
03:31 - great what can we do um so we have this rectangle now moving on the screen right because its
03:37 - Position where it's being drawn right? It's drawing it draw the rectangle draw the rectangle draw the rectangle at any moment
03:43 - It's and draw the rectangle where the mouse x is where the mouse x's as I move it we get this new rectangle
03:47 - this is pretty super darn exciting so we now see how we can introduce this idea of
03:54 - variation into a processing sketch
03:57 - So let's see let's think about some other [things] well for one one thing
04:01 - I'll [just] going to do here really briefly is I can add. You know mouse y here?
04:07 - And so now I'm moving this rectangle with where [its] x position
04:11 - And it's y position is wherever the mouse is. By the way we can start to get a little crazy
04:15 - I don't know why I decided to do this, but what if I were to write something like?
04:20 - height
04:21 - - mouse [y] we can start to add oh
04:23 - I got this I wrote the word oh height and I
04:25 - Explain with that then so here look at this look at this thing about this for a second, right?
04:28 - I just introduced the idea of these what's called a built-in variable
04:32 - A built-in variable is a word that stands in for a value, and there are just a small number of them
04:38 - There's mouse x mouse y. There's another one. There's width and height
04:43 - When we set up that Processing window
04:45 - we gave it a width of 640 in a size of 360 we could use those values again later in our program
04:51 - But what if we change the size of the window?
04:53 - Someday then we're going to have to find wherever we put those numbers everywhere else and rewrite and change those as well
04:59 - we can
04:59 - dynamically access the current width and height of our sketch window through key words width and height and so if I do something like height
05:07 - [minus] [mouse] y you know think what's going to happen, okay?
05:11 - Well, what mouse y is zero and the height is 360 360 minus zero is 360 so when the mouse is at the top?
05:17 - It'll actually draw it at the bottom and vice versa. Let's run this sketch, and [we] can see look. It's kind of inversely its
05:25 - Location [its] vertical location is inverse to the mouse value so we can see this is kind of like actually kind of fun to to
05:31 - know
05:33 - Anyway, so [I] [wish] there whatever nevermind sorry
05:37 - Okay, so back [to] what we were talking about
05:43 - We have I'm putting it back to just mouse x minus y so we can see there are other built-in variables all of which
05:51 - We could find and I think even if I right-click on this I can say find in reference right down here
05:57 - you can see there's a find in reference so if I wanted to look up mouseX or mouseY but certainly in the reference if
06:02 - You go to the Processing reference all these are going to be documented there?
06:06 - Okay, so this brings us to another interesting point
06:09 - Let's run this and remember. I think in the previous video. We talked about okay
06:15 - Well size should definitely go and set up because size is an initialization condition of our program. It's what we do at the beginning
06:21 - Right the rectangle should definitely go and draw because we want to try [this] stuff all the time while the program is running
06:26 - Where should background go couldn't really decide. [we] just picked an arbitrary decision. We put background in draw.
06:32 - Well, let's think for a moment. What happens if I put background in [setup]
06:39 - Okay, so think for in your mind pause, pause and think what's going to happen. ok maybe you paused, maybe you didn't
06:45 - let me give you a little help
06:48 - when background was in draw
06:50 - Every time before we do the rectangle. We would draw the background who would wipe the background clean with a solid color now
06:57 - What does it mean to put background in [setup] [setup] the code and setup only ever execute once when the program first begins?
07:05 - We're only drawing the background once when the program first begins. What will happen let's run this sketch
07:13 - We can see that look we have a history of
07:17 - Every single rectangle ever right because if we don't clear the background if we don't wipe it every time before we draw the next rectangle
07:24 - We're leaving the pixels we filled in there previously
07:27 - So this is this this is a very like simple thing right if we put background and setup
07:32 - We're kind of always seeing everything we draw on top of itself over and over again if we put background and draw
07:38 - then we are wiping clean the frame that the
07:42 - We are wiping clean the window every [time] through draw which gives us that illusion of motion
07:47 - Right wipe the background draw the rectangle wipe it draw the rectangle a little further over
07:51 - Right [there] draw the rector and a little further over that gives us this illusion of motion
07:55 - And you might actually be asking yourself the question when background was in draw
08:01 - How come I don't see like all these steps how come I don't see draw the background
08:05 - [I] see in blank background, then I see the rectangle [dentist] a black round there to see the red camel [darkness] in the background
08:09 - Right and we're almost like flicker the reason why you don't see that is processing
08:14 - Only updates what you see at the very?
08:16 - End of draws almost as if there's an invisible line of code right here that says update the screen
08:21 - So all of this stuff accumulates through draw and when you get to the end it updates
08:25 - This is why if I put background at the end?
08:28 - We'll never see [that] rectangle right no matter. What we do
08:31 - It's always wiping it at the end of draw which is what we clearly don't want to do in this case
08:35 - This is [a] bug in our program essentially
08:37 - Okay, so I've shown you mouse x and mouse y
08:41 - I'm going to
08:44 - Very quickly show you one other thing
08:49 - Which is that in addition to mouseX mouseY, there are two other built-in variables?
08:58 - Which are called a pmouseX and pmouseY so if we look at this sketch?
09:06 - but whatever
09:09 - To do this, but if we look at this sketch
09:12 - What's happening here draw a line from P mouse x p mouse y to mouse x mouse y?
09:19 - So so what does that mean?
09:22 - Let's come over here for a second. [oh]
09:27 - Come over here with me. Let's come over here for a second. This is our processing window [and]
09:31 - This is our mouse our mouse is here at one moment in time [at]
09:36 - Another moment in time. We move the mouse and maybe it ends up over here
09:40 - So this is kind of like time equals zero
09:43 - And this is kind of like time equals one those are the mouse positions as if we're moving it
09:47 - Well this we know at the current time we can think of as mouse x mouse y
09:54 - Processing always stores for us the Previous mouse position and mouseX and mouseY position
10:01 - So if this is the previous one
10:05 - What does it mean to draw a line between the two it means draw that line?
10:08 - but if what if we do this over and over again
10:10 - Always draw a line from previous to current previous to current what happens if the mouse moves over here
10:15 - And then the mouse moves over here and the mouse moves over here, so this is [the] [beginnings]
10:19 - this is a you can almost like one line of code create a drawing app in processing now actually the
10:26 - work that the
10:27 - Possibilities here are endless what you can do with creating drawing
10:31 - drawing applications in terms of
10:32 - colors and thickness and [brushstrokes] in and
10:35 - Saving drawings and manipulating them later and also that I almost want to just like stop and always talk about that for a while
10:40 - But we can't but [weird], but this is saying you might think about if you're looking for an idea for a project
10:45 - But here we have this very simple idea draw from previous to current let's see what happens when you do that
10:52 - if we run this program
10:54 - We can see look. Oh look at this
10:57 - You can kind of see it there, right?
10:58 - There's that blind from previous to current why am I not seeing that continuous line because I forgot
11:05 - Backgrounds in draw this is a case where [we] absolutely want background to be in setup because we want to be able to see
11:11 - That continuous line, we don't want to ever erase what we've drawn so here. We can see look
11:19 - Right now it's always doing it you know later
11:21 - we want to see like how [can] I do it only when I click the mouse we're going to start this so much more for
11:25 - Us to look at and understand in terms of adding logic and stuff to a program
11:29 - But this is a nice little example of something else you can do
11:32 - So what have we got now? We've got all the tools to draw
11:36 - I don't know. Why there's nothing over here to look at we've got all the tools to draw in a processing window
11:40 - rectangle ellipse
11:42 - stroke fill background
11:43 - we now understand how to control the flow of
11:45 - things at the beginning and things happen in Draw
11:48 - We can we see that we can start to vary the program a little bit
11:51 - But really, what's the only [thing] that we have so far to vary our program mouseX, mouseY maybe pmouse
11:57 - X, pmouseY. so anyway here, but so you don't have a lot so far
12:02 - but you [know] essentially what I would say to you but
12:05 - We're going to look at what we're trying to get much further than this we want to be able to introduce all
12:09 - Sorts of other variables our own variables
12:11 - Events that happens when the mouse is when the run up and the mouse is clicked or a key is pressed
12:16 - So we're going to get to all that but right now
12:17 - I would say to you see if you can manipulate your processing sketch just with the current mouse location in the previous mouse location
12:24 - you know
12:25 - These values don't have to be used just for locations of things on the screen
12:28 - what if you control [the] fill right the color of something when the mouse moves to the right it becomes more red it moves to
12:35 - Down it becomes more blue. How would you do that?
12:37 - how could you control the
12:38 - Thickness of this line based on how fast you're moving it right the speed at which you move the mouse is somehow
12:45 - Related to the difference between the current location in the previous location
12:48 - how could you vary its thickness as it moves by the way is a clue to [that] there's a
12:53 - We haven't looked at there's a function processing called strokeWeight()
12:56 - look that up in the reference stroke weight allows you to control almost the
13:01 - Thickness of this line right is it a very thick line you're drawing thin or is it very very thick right
13:07 - So that's something you could look at do it and in the next [video]. What we're actually going to look at [where]
13:11 - the next thing we're to look at is how to
13:13 - control how to make things not, but when you click the mouse
13:15 - And when we press a key so we just look very briefly at events in the next video
13:20 - so try that, and I hope you enjoy it and
13:24 - You know also do something else enjoyable that [has] nothing to do with the computer because it's probably good idea to okay [good]. Bye