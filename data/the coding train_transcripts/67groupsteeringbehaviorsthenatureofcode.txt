00:00 - hi you may be wondering what's going on
00:04 - in the world today we've got a lot of
00:08 - videos about steering behaviors but
00:10 - there's two things about the steering
00:12 - behaviors that we haven't considered
00:14 - that are perhaps the most important and
00:17 - earth-shattering exciting parts of
00:18 - working with steering behaviors what are
00:21 - those two things number 1 and number 1
00:23 - is what this video is really going to be
00:25 - about we have all of the videos have
00:26 - been individual behaviors I need to
00:29 - follow this path I need to follow this
00:31 - flow field I need to seek this target I
00:32 - need to catch this thing flee from this
00:35 - thing what we want to look at our group
00:37 - behaviors uh what is this steering what
00:39 - what is it what does it mean to have a
00:41 - steering behavior where the desired
00:43 - velocity is determined based on the
00:45 - behavior of other vehicles in one
00:48 - vehicle given neighborhood that's what
00:51 - we really need to look at I don't know
00:52 - if you remember we started looking at
00:54 - thinking about raping Berg vehicles and
00:56 - looking at Casey Reese's process
00:58 - compendium all a lot of these behaviors
01:01 - involve entities sniffing out other
01:04 - entities around them and making a choice
01:06 - to move based on that that's what is
01:09 - going to allow us to ultimately build
01:10 - these unpredictable complex systems
01:14 - simple elements simple rules globally
01:18 - intelligent and amazing and exciting
01:21 - emergent behavior okay so I'm filled
01:25 - with hyperbole today exciting ok um so
01:28 - this is this for that's one thing number
01:31 - two is we haven't actually looked at
01:33 - what happens when we combine two
01:34 - behaviors what if you want to both
01:36 - follow a path and also seek a target or
01:40 - it's escaped from your neighbor but but
01:44 - while you're on a flow field so that's
01:46 - that's what we're gonna look at and kind
01:48 - of on the next video but but but what do
01:51 - we have here so here is a personal
01:53 - everybody I think I said this already
01:55 - everybody should have a favorite staring
01:56 - behavior so pause the video take a
01:58 - moment and try and decide what is my
02:00 - it's like your favorite color your
02:01 - favorite stare maker my favorite
02:02 - favorite steer maker is cueing so this
02:05 - is a group behavior it's actually a
02:07 - combination to number one there's a
02:09 - desired velocity of making it through
02:10 - this doorway but there's another
02:12 - velocity which has to do with not
02:13 - running into your neighbors so you see
02:15 - this really nice behavior of all of
02:17 - these vehicles going towards this
02:19 - doorway but also stopping and kind of
02:21 - jockeying for space around that doorway
02:23 - so how do we implement first before we
02:26 - can get to combining them how do we even
02:28 - implement a group behavior so let's take
02:31 - a moment the first one that I want to
02:32 - look at is a simple behavior known as
02:34 - alignment so what is alignment I am
02:38 - recording this video what is alignment
02:40 - alignment means my desired velocity is
02:43 - the velocity of my neighbors I wish to
02:45 - align my speed and direction with how my
02:48 - neighbors are moving so you can imagine
02:50 - how that might play out if this vehicle
02:52 - is moving like this and this vehicle is
02:55 - moving like this ultimately eventually
02:57 - they would hopefully align with each
02:59 - other and be moving in the same
03:00 - direction how is it that we can make
03:02 - make this work I mean you know it's not
03:05 - so complicated if I only have these two
03:07 - vehicles like I say hey what is this
03:12 - vehicles design this is its current
03:14 - velocity what is this vehicles desired
03:17 - velocity well this vehicles desired
03:19 - velocity is that once it wants to align
03:22 - with its neighbor and this vehicles
03:23 - desired velocity is that one so they
03:25 - each have this desired velocity they
03:27 - steer and we end up getting ultimately
03:29 - the Sayle to this every frame the same
03:30 - velocity moving in same direction it's a
03:32 - bit more complicated if this is a given
03:35 - vehicle let's forget about its curve
03:37 - velocity for a second and there are
03:39 - several other vehicles around it
03:43 - what is this vehicles desired velocity
03:48 - in the case of alignment in the case of
03:54 - alignment I'll write this all out a
03:56 - vehicle's
03:58 - desired velocity is the average no it's
04:03 - just it's not quote it stars and hearts
04:06 - I always want to draw Minds it's the
04:09 - average velocity of all neighbors now
04:17 - what does all neighbors mean this is an
04:20 - interesting question remember when we
04:22 - started thinking about the tongue is
04:23 - agents we were taught we we said an
04:25 - autonomous agent has a limited ability
04:28 - to perceive this environment so all
04:29 - neighbors could mean every vehicle in
04:31 - the entire world
04:33 - like imagine if you do alignment
04:35 - globally it'll be kind of interesting or
04:37 - it might mean just the things that it
04:39 - can see within a certain distance or
04:41 - within a certain range in front of it
04:42 - etc so okay but let's start with
04:45 - something simpler average velocity of
04:48 - all of its neighbors how do you get the
04:49 - average velocity of a whole bunch of
04:51 - vectors add all the vectors up I add 10
04:54 - vectors together divided by 10 so let's
04:57 - take a look at this in action in code
04:58 - for a moment here we are over here and
05:03 - close out Reynolds and go back to whoops
05:07 - go back to alignment and let's take a
05:10 - look at this running run so you can see
05:16 - very very quickly all of these vehicles
05:18 - are circles are now moving in the same
05:20 - direction and as I add more that each
05:23 - are starting with a random velocity you
05:25 - can see that the the global kind of
05:27 - Direction starts to change based on some
05:29 - new ones ultimately there's not enough
05:31 - of them but you can see that they very
05:33 - quickly kind of like fall into place and
05:35 - this is odd result we almost feel like
05:36 - you're panning over a scene right when
05:39 - they're all moving at exactly the same
05:40 - speed in direction almost feels like
05:41 - they're still but we're panning anyway
05:43 - um so how does this work in the code
05:45 - this is actually a pretty simple
05:47 - algorithm if you look at the vehicle
05:49 - what is the vehicle doing it's saying
05:52 - hey let me look let me start with the
05:54 - sum of 0 let me look at every other
05:56 - vehicle let me add all the velocities
05:58 - together and let me divide by the total
06:01 - number of vehicles it's fine I'm gonna
06:06 - leave it this way there's a there's some
06:08 - extra stuff here like it seems a little
06:09 - weird that we're counting how many
06:12 - vehicles when we know the size of the
06:14 - ArrayList but we need that it because
06:16 - we're gonna add something period so the
06:18 - moment that's gonna make it much more
06:19 - interesting but you can see my desired
06:21 - velocity is the sum of the velocity of
06:23 - all of my neighbors and normalize that
06:26 - sum set it to maximum speed oh that's
06:28 - weird that's interesting I didn't
06:31 - realize I was doing this in this example
06:33 - but well we're actually doing years
06:35 - look at this this is an interesting
06:37 - question as we're saying hey it's not
06:39 - the average velocity of all the favors I
06:41 - just want to move at maximum speed in
06:43 - the direction of the average direction
06:45 - of all my neighbors
06:46 - that's one so something you could try
06:48 - doing is actually do not always try to
06:51 - move at maximum speed in your neighbors
06:52 - direction but move also according to
06:54 - their average speed so you'll get very
06:58 - different results but that's something
06:59 - you could try with this okay so but what
07:01 - is it that I really want to look at here
07:02 - notice again how the entire group moves
07:06 - instantly almost at the align to the
07:08 - same direction now this is because we
07:11 - haven't really limited the vehicles
07:14 - ability to perceive its environment
07:16 - every vehicle in this world can see all
07:19 - of the vehicles but what I would like to
07:21 - do which I think will be a more flexible
07:24 - and interesting simulation is say okay
07:28 - here are a whole bunch of vehicles this
07:32 - is a world of vehicles and let's say I
07:35 - this is the vehicle we're working on
07:37 - right now
07:38 - it can only see other vehicles within a
07:42 - certain distance so what it's actually
07:44 - doing is moving according to the average
07:46 - velocity of all the neighbors within a
07:48 - certain distance how do we do that as
07:51 - we're looping through we could find the
07:53 - distance between all of them and check
07:55 - is the distance less than some radius
07:57 - some line-of-sight some neighbor
08:01 - distance we could call it so let's look
08:03 - at actually adding that to this program
08:04 - in real time a little live coding here
08:07 - so first of all we have that distance
08:09 - already so we have the distance between
08:11 - my location and the other vehicles
08:14 - location and what I can do here is I
08:16 - could say if that distance is is a
08:18 - little trickier if that distance is
08:20 - greater than zero when is the distance
08:22 - gonna be equal to zero I suppose there
08:24 - could be two vehicles somehow by
08:26 - accident in perfectly exactly the same
08:27 - location we're dealing with floating
08:29 - point values here that's gonna be so
08:31 - rare we at we check to make sure the
08:33 - whole thing distance is greater than
08:35 - zero because generally we don't want a
08:36 - vehicle to align with itself this
08:38 - doesn't really matter so much in this
08:39 - example when we look at separation where
08:41 - you don't want to bump into your
08:42 - neighbors you don't want to try to
08:43 - separate from yourself it's very painful
08:45 - I so there's a wake with the morning
08:47 - feel like I just want
08:48 - separate for myself but you know I don't
08:50 - I don't I never figured out how to do
08:52 - that yet okay so as long as that
08:53 - distance is greater than 0 or less then
08:56 - some neighbor distance and what is that
08:59 - neighbor distance I don't know what's a
09:01 - good number shout it out just shout out
09:03 - a number you're in your you know cave
09:06 - with your hood on and like the glowing
09:09 - light of the laptop is you're watching
09:10 - this video
09:11 - shout out a number okay thirty fifty
09:15 - hundred hundred okay let's try a hundred
09:18 - and let's so let's just check as long as
09:21 - the distance is within a hundred pixels
09:22 - what happens here so let's run this we
09:25 - can see pretty quickly again like I
09:27 - don't know if you saw we got a lot of
09:29 - the same location but you can start to
09:31 - see there so you like subgroupings ask
09:33 - the neighbors kind of find each other
09:35 - and get close one hundred was kind of a
09:36 - bad number to pick let's actually just
09:38 - bring this all the way down to 25 and
09:40 - you can see look at all of these sub
09:42 - groupings as they only now are able to
09:44 - align move this over here with their
09:46 - neighbors and I have with their sort of
09:48 - more immediate neighbors we add a whole
09:50 - lot of vehicles it's hard to like look
09:52 - and talk so you can see we're getting
09:54 - here even more interesting I would say
09:56 - it to me this is a little bit more
09:58 - visually interesting it feels more
10:00 - lifelike somehow and it's also kind of a
10:04 - little bit of a surprise we get these
10:06 - clumps so you can see eventually the
10:08 - whole world is moving in the same
10:10 - direction but if I run this again just
10:12 - from the beginning we can see these
10:13 - little small clumps starting to form and
10:15 - as the clubs get near then they align
10:17 - with each other they're within that
10:19 - distance okay so this works for you well
10:22 - let's briefly take a moment to just
10:25 - demonstrate separation and then I think
10:27 - we'll be done with this particular video
10:30 - okay so separation I don't know if you
10:37 - recall but earlier several videos ago we
10:42 - had a behavior called seek where we had
10:44 - a vehicle and we had the target and the
10:47 - vehicles desired velocity was in the
10:51 - direction of the target well so this is
10:53 - seek we could also have behavior we did
11:00 - I don't know how to demonstrated this
11:01 - but you could really easily make a
11:02 - fleeing behavior right here's the
11:04 - vehicle here's the target
11:05 - what's the desired velocity in the
11:08 - opposite direction of the target seek
11:10 - and flee separation is in fact a
11:13 - variation on Fleet so let's just say
11:16 - right now we have a vehicle and it has a
11:21 - bunch of other vehicles around it maybe
11:23 - this is too many we try drove this okay
11:24 - sorry everybody we have a vehicle and we
11:29 - have let's just do two vehicles that are
11:31 - around it so what can we do what we
11:34 - could do is say hey here's a desired
11:37 - velocity that is pointing away from this
11:39 - vehicle here's a desired velocity that's
11:41 - pointing away from that vehicle let's
11:43 - take the average of those two velocities
11:46 - and we have a desired and this is our
11:48 - ultimately our seek re separate set set
11:52 - bar rate desired velocity so we consider
11:58 - all the vehicles within a certain
12:00 - distance we create a vector that points
12:03 - away from those vehicles and then we
12:05 - take the average of all of those you
12:07 - know we that's pretty good I think we
12:10 - did a good job but we could make this a
12:12 - little bit better let's think about this
12:14 - from here's my vehicle here is a vehicle
12:19 - that's near me and here's another
12:21 - vehicle that's near me ask yourself the
12:25 - question which one of these should I be
12:28 - seeking from more vigorously he works
12:30 - right the one that's closer so we could
12:33 - actually wait the length of that flee
12:39 - force essentially that vector we could
12:41 - scale the vector that's pointing away
12:42 - from the target according to not the
12:45 - target away from the other vehicle it's
12:46 - too close according to how close it is
12:49 - and you'll see that in the algorithm
12:51 - that as we're averaging all of these
12:55 - separation forces the separation forces
12:57 - are weighted according to distance now I
12:59 - should point out that this is not
13:01 - collision avoidance
13:03 - you might start to think god this is
13:05 - collision
13:05 - avoidance but it's not let me explain to
13:08 - you why here is the vehicle and here is
13:11 - its velocity here is a vehicle that's
13:14 - really close to it and here is another
13:16 - vehicle that's close to it but not as
13:19 - close separate a separation algorithm
13:22 - will cause this vehicle to really want
13:24 - to get away from this one more than that
13:26 - one obviously it's gonna get closer to
13:27 - that one and then it's gonna want to
13:29 - move a collision avoidance algorithm
13:30 - might actually look at where it's going
13:33 - it is again and completely ignore this
13:35 - one so look at take its current velocity
13:38 - into consideration in separation we're
13:41 - not looking at whether it's in front or
13:43 - behind we're just trying to like create
13:44 - a perfect ring of space around ourselves
13:47 - which you know there's different
13:49 - scenarios that you want for different
13:50 - reasons but I thought that was an
13:51 - important thing to point out so let's
13:53 - take a look at this example running in
13:55 - action in processing
13:58 - okay so we have alignment here and
14:00 - alignment is by the way an extra example
14:03 - that I just added today to the github
14:04 - repository it's just called alignment
14:06 - but the separation one if you're
14:08 - following along in the book oops is
14:10 - actually example six point seven so I'm
14:12 - gonna put up example six point seven and
14:14 - we can just take a look at it for a
14:18 - second right now
14:19 - and just see as I add a bunch of
14:21 - vehicles you can see they're all trying
14:23 - to stay separated from each other you
14:25 - can see none of them are actually
14:26 - running into each other it almost has
14:27 - this kind of heating up gas particles
14:30 - like and they get all excited and
14:32 - jittery and moving around in a space
14:34 - sort of thing that's what you feel it
14:35 - looks like so you can see separation at
14:37 - in action here
14:38 - now let's take a look at the algorithm
14:40 - very briefly if we go into the vehicle
14:42 - class and we can see here we're what's
14:46 - really important is there is a desired
14:48 - there's a desired separation and in this
14:50 - case every ellipse has a radius and I'm
14:54 - saying I want to my desired separation
14:57 - is the radius times two and actually R
14:59 - if I look at how it's being displayed is
15:02 - not technically the radius fix that
15:04 - right now because I was using this the
15:05 - diameter so now if I run this again
15:09 - right we can see that this is actually
15:11 - what's interesting about this is it
15:13 - actually feels like this almost looks
15:16 - like these things are bouncing into each
15:17 - other
15:17 - we've created the illusion of like
15:19 - collision detection and collision
15:21 - resolution all that stuff that box2d did
15:23 - but in fact none of that is happening
15:25 - here what's happening is when they get
15:26 - close to each other a big force pushes
15:28 - them apart which is kind of like what
15:30 - happens with the collision so very
15:31 - similar outlooks and in fact you could
15:35 - probably do some kind of interesting
15:36 - circle packing algorithm here if you had
15:37 - them all different sizes and their
15:39 - desired separation varies according to
15:41 - their sizes that's a great exercise for
15:43 - you try to see what happens when you
15:45 - make them different sizes and see if you
15:46 - can have that separation force be
15:48 - weighted according to its size as well
15:50 - okay so but what I wanted to point out a
15:53 - couple things one is when I say if I say
15:56 - R times H for example you can see
15:58 - they're really trying to stay further
16:00 - apart there's not there's many of them
16:02 - so they can't do it perfectly but that
16:03 - you can see that they're not able to get
16:04 - as close to each other so that distance
16:06 - that they desire to be separated is is
16:09 - really quite important here and the
16:12 - other thing that we can see here is this
16:14 - is what we're doing again this is the
16:16 - algorithm that I said what we're doing
16:19 - is we're making a vector that points
16:22 - from the other from from me toward
16:26 - upstarting we're making a vector this is
16:28 - over here this is my location for very
16:34 - long time here this is my location this
16:40 - is the other location and separation
16:45 - says the force should be a vector that
16:47 - points in the opposite direction so we
16:49 - think of it as a force pushing it away
16:51 - we can see that's the calculation that's
16:53 - happening right here in this line of
16:55 - code and here look at this it's it's
16:58 - late its magnitude is being weighted by
17:01 - distance we're dividing by distance so
17:03 - if you divide by a number when that
17:04 - distance is big that separation force is
17:06 - smaller when the distance is smaller
17:08 - that separation forces bigger we add
17:10 - them all up we take the average of them
17:12 - we want to move away at maximum speed
17:14 - and then we implement steering equals
17:17 - desired minus velocity so this is exact
17:19 - this is very very similar to alignment
17:21 - the difference is my desired velocity
17:23 - isn't just a copy of my neighbors
17:25 - velocities it's it's a set of vectors
17:28 - that point
17:29 - way the average it's as if the average
17:32 - of all the vectors pointing away from my
17:34 - neighbors and so here we have separation
17:38 - so what's interesting about this and
17:40 - what we're gonna look at in the next set
17:42 - of videos is what happens when we start
17:45 - to combine these behaviors the last
17:47 - example we're to look at is this
17:49 - example the simulation of birds flocking
17:52 - bees swarming the swarming flocking
17:53 - behavior in FLAC in fact flocking is
17:56 - separation alignment and one more
17:59 - cohesion so as an exercise to yourself
18:02 - you've now seen alignment implemented
18:04 - separation implemented implement
18:06 - cohesion what is cohesion cohesion is my
18:12 - desired velocity
18:16 - let's is a vector that points towards
18:20 - the average location of all of my
18:22 - neighbors so let's say this is all of my
18:24 - neighbors and the average location is
18:26 - right over here
18:27 - each one of these objects desired
18:29 - velocity should point towards that
18:31 - center location so see if you can
18:33 - implement that it's there in the
18:35 - example if you're looking for the
18:37 - solution and we're gonna start looking
18:38 - at how to combine these different
18:39 - steering behaviors in the next video