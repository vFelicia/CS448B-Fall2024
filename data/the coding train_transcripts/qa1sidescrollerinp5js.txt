00:00 - "I'm attempting to create a moderately
functional side scroller using different"
00:04 - "forces and whatnot but the acceleration
of my object seems immediate and abrupt"
00:07 - "going from 0 to acceleration to an
immediate constant acceleration"
00:12 - *ect noises* "i'm
looking for advice how to simulate"
00:16 - "gravity so that jumping can be
implemented such as when a user presses"
00:20 - "a key to jump a force is exerted
displaying that jump" ok I think I get
00:24 - this question this is a great programming
problem I think we can spend some time
00:27 - working it out ok let's talk about when
I think we're gonna program here to
00:31 - answer this first question so let's
imagine this is your canvas and you have
00:39 - this sort of like scene where you have
this stick figure and the stick figure
00:43 - is moving across like a platform this is
some standard kind of game I think right?
00:47 - but somebody can post it in the chat
00:49 - not a platform game it's like a side scroller maybe
that's what it's called
00:53 - this person is moving this way and maybe
there are like different obstacles and
00:58 - what you want is for this person this
character to be able to jump over those
01:01 - obstacles not too dissimilar from like
Flappy Bird also right? in Flappy Bird
01:06 - there's like... I just wanted to see if I could draw a bird. (laughs)
My alien bird, ooh look with some weird crazy dragon wings
01:17 - or something, I don't know.. and i got lost lost my own
fantasy imagination there for a second. Sorry..
01:23 - So umm, you can imagine this bird flying this
way and you press the key and it puts the
01:26 - force pushing up so one of the things
that actually in most of my examples and if
01:30 - you go back and watch all my nature of
code videos that are on youtube or the
01:33 - videos that are for this Kadenze
course; generally you'll see that i have
01:36 - these forces being applied continuously
01:39 - gravity is always there, or an object is always
seeking a target so I think this is an
01:43 - interesting thing to discuss what about
a kind of instantaneous force.
01:47 - For example I'm just standing here and suddenly.. this GREAT Force just
01:51 - instantaneously pushes me up from the
bottom., and I jump. So how would you
01:55 - simulate that.. and of course like a
keypress or a mouse click could do
01:58 - something like that so the other thing that I
think is interesting about this problem
02:01 - is that umm.. you know; what what's moving
02:06 - right in the world right if I move this
way I move this way right I'm..
02:14 - here's this pen and I'm moving -- oh no I cant do it -- I'm moving 
towards the pen but what's not to say
02:21 - that I can't do this optical illusion
the pen moving, am I moving or is the pen
02:25 - moving? You can see because the background... The point is..,  -- that was a terrible demonstration --
02:29 - the point is what happened.., what if I want the
background to move I want it to appear that
02:33 - this person is moving but they're
actually, in the canvas, staying in the place
02:36 - so that's kind of an interesting question
as well. So let's I.. I guess let's go see
02:41 - if we can, let me come back here. Umm so let's see
what's to figure out where we're going to
02:45 - program this. So umm, one thing I should do I think,
is let's not start from scratch so what
02:52 - I'm going to do is I'm going to go to
"Github" and I have a lot of code and a
03:00 - lot of places. I don't know what that means.. 
that sounds a little weird and I want to go to
03:06 - repositories and I'm gonna look at this
one for right now. So I have a lot of
03:12 - different nature of code repositories
for various simulation of physics' examples examples this has
03:17 - some code that goes specifically with
that particular online course, so am just gonna
03:20 - start from there and I'm going to just
download it as a zip
03:26 - If you're wondering about Git and Github for only $0.00 you can watch my
03:32 - Github tutorials.. is it popping up here?
--No-- because it doesn't do that. But I do have some Git and Github
03:39 - tutorials they are free, you have to watch some adds
I might turn off the ads I don't know what to
03:43 - do about the ads. Ok, so I think I
downloaded that and what am gonna do is show in Finder
03:48 - I'm going to open up this folder and
uhh "session one", "session two" and let's put this folder
03:56 - on the desktop just for right now, over
here; and let's find an example to start
04:01 - with
04:02 - session 2
04:06 - three examples which to begin with? Let's
do the particles array one and I'm gonna..
04:14 - what we're doing is actually
quite different than these examples so
04:17 - I'm gonna use this p5 editor, even
though I haven't actually been using it
04:21 - recently and these video tutorials. I have
been using Atom or Sublime. Uhh, ok but let's
04:28 - just, let's look at what this example is doing.
Click, it says here click to add
04:34 - particles so ok so you can see what this,
this is this is how my examples typically
04:38 - look. Right.., my examples typically look like
okay there's a bunch of things in the
04:42 - screen and there are various forces, one
force is gravity another force is wind.
04:48 - So, I think when I click the mouse you can see
that there's this wind force suddenly
04:50 - being applied; so in that sense a force is
being applied... one force is being applied
04:56 - continuously - the gravity force, another
force is being applied only when the mouse
05:00 - is held down. But, neither those are just
like a single one time force but let's
05:05 - at least look at where in the code
that's happening
05:07 - and them a going to completely restructure this example to do this platform thing. Ok, so uhh here
05:17 - in the sketch we can see this happening
here. So umm, there are these particle
05:23 - objects and the particle objects are in a
particles array and an applyForce function
05:28 - is being called on each of those. applyForce(gravity) is always being called,
05:32 - applyForce(wind) is only being called if
the mouse is pressed. Basic structure for
05:37 - an example and now if I go to the
particle object here is the key thing
05:42 - that I want to show you, this is the
applyForce function, so I you know I
05:47 - don't know who's watching this or where
you're or why you're here or if you've already
05:51 - left or what. But, just to mention briefly
these examples are built on Newton's
05:57 - second law of motion which is stated
as 'force equals mass times acceleration'.
06:01 - The definition of a force is a vector, a
thing that causes an object with mass to
06:07 - accelerate so if I push something with a
force that object it has a mass, it's going to
06:12 - accelerate so that's written this way
force equals mass times acceleration. It
06:16 - can also be written as acceleration equals
force
06:19 - divided by mass so if I go back over
here to the code you'll see that's exactly
06:23 - what's happening here; the applyForce
function receives a force variable it
06:27 - divided by mass and it adds it to the object's
acceleration now there's a lot more to
06:31 - say about that so if you want to kind of
go back at what's a vector and how to
06:36 - get all the way to this point then you
could go and watch either my just like a
06:41 - walking advertisement for myself, but you
can watch the nature of code videos that
06:46 - have on youtube or even better yet you might
just go and watch the videos that are
06:50 - with on the Kadenze website for this
particular course. Where are we..,  ok so now
06:54 - I need to completely restructure this
example because if you're still with me
06:58 - what I'm trying to build is this... Well let's make a game, why not. Let's make a game where you're a
07:03 - little person or a big person or an
alien or whatever it is and you're
07:08 - running and obstacles are there and you've to jump over them. Ok so here we go, so I gotta.. I don't know if it
07:15 - was so great to start with this
particular example because it's got a lot of
07:17 - extra stuff in it but I'm gonna do "Save As.."
and am just going to put this on the
07:23 - desktop right now and am gonna call this
the running game. Is that a thing "running
07:27 - game"? I don't know what that is, I hope that's not
something like weird that I just called it. Ok so
07:33 - what I want to do here is now have a
person and I'm gonna just say the
07:43 - person forget about this mouse press
thing. Oh how's this font size? I feel like this
07:50 - font size needs to be a litte big bigger. That looks good,
 I think you could read that. Let me know if
07:58 - the font size is ok. Woow this is definitely a
record that there are eighty people watching
08:03 - this on YouTube right now which kind of terrifying.
Ok, the person is a new particle and I have this like...
08:12 - I have so many things that I want to do
in these videos, well let's how much time we have today.
08:17 - It's 11:30 I got at least till 1 o'clock/1
p.m., then I will be attending, there is
08:22 - an exhibition at ITP
08:24 - of experimental storytelling things if anybody
wants to stop and say Hi.
08:27 - Aah ok,  It's a little hot in here! So now what I want to do
is am just going to say let's umm.. am going to simplify some things.
08:37 - This particle object is going to be my
person and I am going to take out this
08:42 - idea of mass because that will make things a
little bit simpler and I am going to and
08:50 - I will review all the pieces of this code
 once.. am gonna say, once things are kind of going.
08:56 - I'm gonna say person dot update; a
person dot.. is it show or display? Let's see
09:02 - what's the name of that function display
person dot display and let's just see and
09:09 - the particle, and let's just rename this to
Person and I'm gonna say new *oops*. I'm gonna say
09:18 - then new Person(); ok and let's see. So what do I
have now if I run this, good, I don't see
09:25 - any errors
09:26 - let's go *noo* and then I'm gonna go here and
I'm gonna just get rid this click to add
09:31 - particles from the HTML file and I'm gonna run
this, ok; that's strangedidn't I delete
09:38 - that? Did I not save it? There we go. Oh, ok so now
I've got my empty canvas. Now, ok so what I
09:45 - I want this person, let's just make the person
a rectangle you will do this someday on
09:50 - your own and make this more interesting
and actually I'm gonna just simplify
09:55 - things and get rid of these arguments
and say the person is going to be at
10:00 - pixel 50 and the location will be at Y
is..  height. So I'm gonna draw this person.
10:11 - This is.. uhh everything is always so tricky
I'm gonna draw this person I wanna
10:15 - draw this person just as a rectangle
kind of sitting on the bottom of the
10:19 - screen so let's see, so the location is,
am I back here yet? No.
10:24 - The location is the bottom of the screen
so now I want to, in the display
10:29 - function, I want to make this a rectangle
so a rectangle at "this.x" and y is
10:37 - the height but let's say height.. let's say
that the person is 50 pixels tall so
10:43 - "this.y" minus 50 and like 20 pixels wide and
50 pixels high, and those should be variables
10:48 - but let's just see if at the very least
we have, I don't see the person yet so
10:51 - what's, what's missing
10:54 - let's *let's let's* get rid of umm update for
a second. I still don't see the person, let's
11:03 - see, let's uhh. Oh, "this.pos" is the name of
the variable, it's a vector object not
11:11 - individual X's and Y's of course. There we go! So now
we're getting somewhere, yaay!! We have a little
11:18 - square there at the bottom and I want
that person to move so let's put let's
11:25 - put, sorry, let's put "update" back in.
11:28 - Ok so, I'm at a point now where I can
take a moment to breathe and kind of I
11:34 - just had to restructure that example, I, it probably
would have been, honestly been easier for me just to
11:37 - program this from scratch but that's the
example we had. So the person has/is an
11:43 - an object with an 'update' and a  'display'
function. Let's look at what it means to
11:46 - be this person. The person has a position
which is where that person is on the
11:51 - screen, a velocity - meaning its current
change in position and acceleration
11:55 - which is the thing that's going to be
how does it's velocity change which is changed
12:00 - by force.
12:01 - So, let's, just to get a sort of
experiment going here what if I were to
12:05 - say in the person's velocity instead of
being '(0, 0)' was/is '(1, 0)' so now if I
12:15 - were to run this again we can see
there's the person moving. So we can
12:18 - see that velocity, this velocity vector,
controls the person's movement. Now
12:23 - interestingly enough let's place an
obstacle in the scene I wanna come to
12:27 - tackle this weird viewport
12:30 - question/problem first before I get
too far into this. So let's, let's place
12:37 - an obstacle on the scene and I'm gonna
just say obstacle equals,  I'm gonna say, I'm gonna
12:42 - make a variable called obstacle and I'm gonna
say obstacle equals createVector..
12:50 - you know what, I'm just going to have the...
there's so many different ways I could do this.
12:56 - I'm gonna say, you know what am gonna do? I think we are going to want an obstacle object so, for right
now I'm gonna do something totally silly which
13:04 - is just hard code something in. So am going to make
 this a nice, some sort of purplish pinkish
13:09 - color and am going to say rectangle where this
window is 640 pixels wide so let's stick
13:15 - it at 400 pixels make it 50 pixels wide
and 50 pixels high. So am doing the same
13:24 - sort of thing here like this.
13:30 - Oh no, 350, aah so this will be height minus 50. Ok so 
I'm just try to draw a red, another rectangle
13:36 - that sits at the bottom and so what I
want is the idea here, for this example,
13:41 - is as this thing is moving I want to
press the spacebar and have it jump over
13:46 - that obstacle, this is what we're going
for.You guys still with me? Oh! 94
13:49 - people, my head is exploding. Oh my god, this is totally
insane, this is not very good. What am I going to do? It will get better, maybe..
13:57 - or not.
13:58 - Ok so here's the thing, right
now we see the person moving towards the
14:04 - obstacle what if I, because the person
has a forward velocity. So I want to keep
14:08 - my physics kind of true to form with that forward
 velocity but what if I want to see the person
14:13 - in place and the obstacle moving instead.
14:15 - Well interestingly enough I think you
know, I'm kind of,  honestly, am not really like a game
14:21 - programmer and they're might be, there are probably 
some very standard ways of doing these things
14:24 - that I might be missing here but I might also
just be coming up with these sort of
14:28 - things on the fly in exactly the same
way but the way that I would approach
14:32 - this would be rather than setting the
velocity of this to zero and have given this
14:36 - a velocity. What I might do is just
14:40 - almost our view of the scene always to
be centered on this particular character
14:46 - and the way I could do that is with
translate so the translate function
14:50 - am going to write this down. The translate function,
and this is a kind of function that exists
14:55 - across most computer graphics
environments,  so any type of OpenGL
14:58 - programming environment, processing, p5 open frameworks probably like three.js
15:04 - I don't know, who knows, they have their own way.
They? Is there a they with three.js, three.js - it? Whatever, it has
15:10 - its own way of doing things. Ok so what
translate allows you to do is move the
15:14 - point of origin. So the point of origin
by default in a canvas in the browser is
15:20 - the top left corner - that is 0,0. So this
character is drawn relative to 0,0 but what
15:28 - if I sort of think of, instead of drawing
the character relative to 0,0 but I always
15:34 - position the origin relative to where
the character is. So in other words if
15:40 - the character moves over here then I
just want to move the origin kind of over here
15:44 - as well so that I always see.. the characters sort of staying in
15:49 - place. Now I know that may not have been
the most succint or sensical way of
15:55 - explaining that but, hopefully that made some sense to 
you and oh my god I think I might actually hit to a
16:01 - hundred people today and so what I think
I can do here is right here I can add a
16:08 - so let me just show you what I mean
by this. What if I were to just say
16:11 - translate -100, 0 so I moved the
origin negative 100 pixels to the left
16:18 - what does this do to our scene, well everything
is shifted over you can see how, right, let
16:23 - me do that again. So and I'm gonna make
this a variable, am going to do something crazy I'm
16:31 - gonna show you some wacky JavaScript
debugging craziness because I'm just feeling
16:34 - like this is whatever today. I'm just, am
warming back up to doing this on a
16:38 - weekly basis. Ok x equals.. x equals zero.
So I'm just gonna put translate here and
16:46 - what I'm going to do is I'm going to run this
and I'm gonna go to this little gear
16:50 - icon here
16:51 - here so that I have a nice little
JavaScript console and right now if
16:54 - I say x equals negative 100, you  can see how I'm
shifting things over, right? So I'm live
17:02 - updating that value of x to kind of move
where that origin is, to move my view of
17:06 - the scene like.. it's kind of like moving
the camera over so I think a nice way of
17:10 - doing, *that wasn't the greatest
demonstration, I thought it was going to be a much more
17:12 - interesting*. Umm, I think what would work
really well here's what if I just say
17:18 - 'person.pos.x' what if I always
just offset the view by that person's
17:23 - x-position only not
17:25 - it's x-position; negative it's x-position. Because as that
person's moving I want to offset the view
17:29 - further back. So let's do that, let's run
this and you can see, look at that, now
17:34 - the obstacle is moving. So the physics
haven't changed. Right? The physics of this
17:41 - scenario are a hundred percent the same.
It's just our view is changing and I
17:46 - could do like weird stuff like I could
say like times .5 and then you
17:51 - kind of have this like weird like the
view is like the camera's moving but not
17:55 - as fast and anyway that's kind of crazy.
 It's sort of hard to see, it  just looks like their
17:59 - crossing; but if they were multiple things moving
at different speeds you could maybe even get
18:03 - some kind of crazy parallax effect but
anyway I'm gonna keep things simple
18:06 - right now and just keep this. Only I
don't want the person I think all the
18:09 - way at the left
18:10 - I like them kind of shifted over so I'll
just shift it over by like 50 pixels,
18:13 - so you can see this is now my view of the
game and what I want now is when I press
18:17 - the spacebar for the the user to jump and guess
what this is actually super easy it's
18:26 - not super easy in general but it's super
easy because all of the work of building
18:30 - a kind of mini physics engine into this
example is already there. Now, admittedly I
18:34 - haven't done that work in today's
session but if you're following along
18:37 - and other materials you're kinda, that's,
your sort of ready for that. So in other
18:41 - words we are, this is easy because I
already have this apply force function
18:45 - so I have a mechanism for saying here's
a vector, stick that vector in the object
18:50 - and normally that vector is put in, normally I 
don't know what normally means,  but as you saw my
18:58 - other examples that vector might be
put in 'draw'. So for example if I were to
19:04 - say
19:04 - a force is createVector and I'm
just gonna give it like a little push to
19:10 - the right so that it goes faster
actually let's have it, let's give it a
19:13 - little push to the left
19:15 - so that it slows down.This will be interesting and then if
I say 'person.applyForce()' you can see now
19:23 - the person is slowing down and slowly 
moving backwards and it's weird because it really
19:27 - looks like that other thing is moving, it's so hard to like..
I think like a more complex scene with a lot more things
19:34 - you would have more of a sensation of
this particular character moving but you
19:39 - can see here now if I could also do
something like if mouseIsPressed only
19:44 - then will I apply this force. So here the
person is moving.. Ahh! I want to slow down
19:48 - slow down slow down slow down go back,
backup backup backup you know what will
19:52 - also help if the person was a little
animation of like a running person, you
19:56 - know, obviously there's visual cues you could add to this, to make this better. Ok,
19:59 - so you can see this is how we apply a
force now what I want to do is apply not
20:05 - a continuous force in 'draw' over and over
again but a force only when a certain
20:09 - event happens, so what I'm going to do is
I'm gonna add a function; this is something
20:13 - specifically to the p5.js library that
function is going to be called keyPressed
20:22 - Boy, am usually such a good typist and today's just 
a disaster and what I want to do is am just
20:27 - gonna check like if the key is the spacebar that's a really easy way of just
20:31 - checking like what key was pressed if
the key is the character space then this
20:35 - is where I'm going to apply this force. So what
should that force be? And I'm gonna call
20:40 - that a variable jump and I'm gonna
say createVector, now I want the user to
20:45 - do what jump in the air, straight in the
air. So I'm gonna just give it a force
20:48 - pointing up which is "0, 'some negative number' ". Now,  normally if you
20:53 - ..in alot of my other examples
you'll see generally forces have very,
20:58 - small amounts .1, .01, .002379841.
Had a joke there, that I forgot to do
21:07 - but I'll make it happen later.
21:09 - Umm, it was a terrible joke anyway. So.. I just like lost my breath for a second, train of thought.
Okay, so normally you want sort of like a
21:19 - small number because if a force is something being
applied continuously that thing
21:22 - is going to up it's acceleration continuously
and numbers can get out of
21:25 - control very fast in that kind of Canvas
animation environment, things going crazy. But this is
21:29 - an instantaneous force for it to have an
effect it needs to be something rather large
21:33 - so let's make this -1 and then
I just want to say person.applyForce
21:38 - jump. Ok? So let's see if this is enough
for us. Here comes...There we go! I'm jumping.
21:49 - Now interestingly enough, I win, I fly to the heavens.
 That was an easy game and no obstacle whatever will ever hit me again.
21:57 - So why did that not appear to
do anything like you might imagine it
22:02 - should?
22:03 - Well remember if, if you apply force to
something moving up gonna move up and if
22:09 - there's no force to push it back down
its not gonna move down that's like
22:12 - newton's first law of motion. So we need
to have gravity in this world and so and
22:18 - that is a force that should be applied
continuously in the opposite direction
22:23 - so I'm gonna create a vector and I'm
gonna make this sort of a small vector
22:27 - and I'm gonna say person.applyForce
gravity. So now I want to continuously
22:33 - apply gravity. Oh I hit 100 people!! That's very
exciting, 103 people are watching on YouTube.
22:39 - I should check the chat is it still working? Ok,
now so look at that what happened now? Oh no..
22:46 - We've got a problem
22:48 - gravity was applying and there's
apparently, this is a quicksand simulation. So I
22:53 - don't have a sense of the ground here.
Now this is where we get into a lot of
22:57 - trouble with our wanting to be true to
the physics of the world you know in
23:00 - truth gravity is a force on me. So my
body is applying a force to the floor
23:06 - and then there's like this like the 3rd
law of motion with the equal and
23:09 - opposite and there's you know, tension force
because the floor is attached to some beams.
23:13 - I don't know, I'm lost already but I
think this is a scenario where.. I know there was just
23:18 - rectangle on the screen;
23:20 - so I think we can probably just say you
know what don't go below the bottom. So
23:24 - in that sense one of the things we could
do and this particle, this
23:28 - person object actually from the previous
example has this edges function and so
23:33 - let's use that function and let's forget
about this, this aspect of it. Let's just
23:38 - say ok what do we do if this object is
going below, falling below the window
23:46 - itself so this old code here, this old
cold like 'This Old House'. Anybody ever
23:51 - watch 'This Old House' on PBS. Is this kind of
 like this old code?
23:55 - Instead of "CodingRainbow" maybe I should just call it
'This Old Code'. Anyway let's see if anyone gets that
24:00 - reference. I don't even know if I do it's sort of like this
weird childhood memory that like popped
24:04 - into my head so this old code; I did have
a point here, was a bouncing code. So
24:11 - something is falling its velocity
reverses direction and turns around.
24:15 - So its for bouncing, but I dont really want bouncing here right now I mean I might want bouncing. What I want is
24:18 - jump and stick. Stick the landing kind of
gymnastics stick the landing. So what
24:24 - I'm gonna do actually is, am just going
to multiply its velocity times zero;
24:30 - meaning if it hits the bottom its
velocity, multiplying its y-component
24:35 - of its velocity makes its y-velocity zero meaning it's
 instantly stuck to the bottom. That's like the
24:40 - least accurate physics simulation thing
I could ever possibly do but I think it
24:43 - will work in this case and then I also
just wanna like, let's keep the position at
24:47 - the height. So let's not get into like a
weird thing where it's like a little bit below. If it
24:51 - goes below at any point, stop it from
moving set it back to the bottom. So now,
24:55 - if we run this. Oops, ok person is not
defined. So I must have a syntax error
25:00 - somewhere; so this is a, this a is a good
thing to happen because this will
25:07 - happen to you. Let's look what did
 I add? Oh I think I, ooh I added..
25:12 - I think I lost a curly bracket, that's all I did.
So look this, this closes this curly bracket
25:18 - this closes that curly bracket and then I
needed a curly bracket for this whole
25:22 - Person constructor function. Ok so let's run
this now.
25:25 - The quicksand is still active. Ok so I think we have
  a problem which is that, I just didn't call that
25:32 - edges function here; so I also want to,
after I update I want to call edges to
25:39 - do that test for the edges as you can see, 
the person is not falling down. Now I could press jump
25:44 - oh boy; so that force is way to week. Am not
making it over that square anytime soon.
25:48 - So let's kind of just play with some
numbers here, let's give it like.. get
25:52 - ten times as strong. There we go! Wooah, that was a
really high jump. Oh quick.. Ok so that worked so
26:02 - you know maybe let's try half, split the
difference
26:07 - That's pretty good, I might have to actually
time this correctly. Woah that was perfect. That was very exciting. Ok so it's kind of the
26:16 - basic idea. I would love it if some of
you watching this, perhaps when I post
26:20 - this code later, take this code and kind of put your
spin on it, try and add an animation, add a character,
26:27 - add a sound, add multiple obstacles; maybe
think about the view. The view is like a
26:32 - little bit weird right now but umm anyway....