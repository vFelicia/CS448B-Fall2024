00:00 - [BELL RINGS]
00:01 - Hello and welcome
to module three
00:02 - of working with data and
APIs in JavaScript.
00:05 - So I just wrapped up
module 2, the second part,
00:08 - with a project called
the Data Selfie App.
00:10 - And there were some new
things hopefully to you
00:12 - that you learned and
are excited to apply
00:14 - in future projects like
server side programming
00:16 - and GET requests and
POST requests and saving
00:19 - data to a database,
all of the things.
00:21 - But I think there are some
key elements of building a web
00:26 - application that involves data
from external API and server
00:29 - side and client
side that I missed.
00:30 - One of the most
crucial things I think
00:32 - is making an API request
to an external data
00:34 - source from the
server, and there
00:36 - are a variety of reasons
why you might want
00:38 - to do that or need to do that.
00:39 - And I really want to demonstrate
that in this new project called
00:42 - The Weather Here.
00:43 - The original
Weather Here project
00:45 - is once again by
Joey Lee and was
00:47 - built for a course called
Quantum Humanists at NYU,
00:50 - where I also teach.
00:51 - In Joey's project, the
user arrives on a web page.
00:54 - There's information about
latitude, longitude.
00:55 - We know how to do that already.
00:57 - There's information about
the current weather and air
00:59 - quality.
01:00 - This will be new
that we want to add
01:01 - and then a big Check In button.
01:03 - So a press Check In button,
all that information is logged
01:06 - to a database, and
then there's also
01:08 - a view where you can view
all the different check ins
01:10 - plotted on a map
with leaflet.js.
01:13 - Most of the functionality
that I need for this Weather
01:15 - Here app we already have it
from the data selfie app,
01:18 - but we can start with this
baseline of code from there.
01:20 - But there are some new things
that I want to demonstrate
01:23 - to you in this project.
01:24 - So number one is I want to
add connected to external API.
01:27 - So we're going to use
two different APIs--
01:29 - one for weather information,
one for air quality.
01:31 - One of those APIs going to
require an API key and not
01:34 - actually even allow us to
connect from the client side.
01:37 - So we're going to
have to look at, well,
01:39 - how do I connect
to an API from Node
01:40 - but then have the client build
display that information?
01:42 - So that's going to
be a key new thing.
01:44 - Now I also want to figure out
how do I hide the API key.
01:47 - So if I want to open
source and publish my code
01:49 - but I don't want include my
API keys, how do I do that?
01:51 - So that's going to be an
important piece of this
01:53 - as well.
01:54 - This project also
allows us to kind
01:55 - of play with our logs
page, and let's look
01:57 - at instead of just a list
of all the information
01:59 - in the database, how do
we pull a bunch of records
02:02 - from the database and
plot them on a map?
02:04 - And mostly, we can pull
from the previous example
02:06 - I made with the
International Space Station
02:08 - to create a map with leaflet.js.
02:10 - And finally, before I go,
before this series wraps up,
02:13 - I really think it's
important to talk
02:14 - about deploying a project into
the real world, so to speak.
02:17 - So right now, I'm tinkering
and playing around,
02:19 - developing the service running
here, the clients running here.
02:22 - This is just all contained
within my laptop.
02:25 - But if I want to deploy
this project to a server
02:27 - so that it can live on the web
that many people could access
02:30 - that share of the
data, participate in,
02:32 - and view the
website, essentially.
02:34 - How do I do that?
02:35 - So we're going to look at
a few different options
02:37 - for deploying your
project onto the web.
02:39 - Hopefully, I'll give
you some pointers.
02:41 - It is an option where
you can do that for free
02:42 - as well as if you have
a larger project, what
02:44 - sort of considerations are
for our hosting services
02:47 - and paying for hosting.
02:48 - So this is where
I'm going to begin.
02:50 - I've got just sort of the
very basic functionality
02:52 - from the data selfie app.
02:53 - I stripped away p5, the
webcam images, a lot of stuff.
02:56 - The page just loads and shows
my latitude and longitude.
03:00 - When I click Check In, it's
saving that current latitude
03:02 - longitude and the
timestamp to the database.
03:04 - And when I go to
View Check Ins, I
03:06 - see a login of all of
my recent check ins
03:08 - at this latitude,
longitude, and time.
03:11 - So the very first thing that I
want to do in this series now
03:13 - is add weather.
03:15 - I want to build this display
on this Page information
03:18 - about the current temperature
outside at this latitude
03:20 - and longitude.
03:21 - Now I have to figure out
where I can get the weather
03:23 - information from.
03:24 - So I don't really
feel so inclined
03:26 - to build my own set of sensors
in my own weather station.
03:30 - So most likely, I could find
some type of APIs service
03:33 - that I can make a request
to get the data back,
03:36 - maybe even in JSON format.
03:37 - This is very similar
to what we did
03:39 - when we looked at the
International Space Station
03:41 - latitude and longitude
from an external API.
03:43 - And there are many weather APIs,
Google Weather API, JSON data.
03:48 - You'll probably find a ton.
03:49 - One that I've used in
previous video tutorials
03:51 - is Open Weather Map.
03:53 - That's one that you
could look into using.
03:55 - The National Weather Service--
03:56 - probably their other
governmental organizations
03:59 - or public institutions
that have public weather
04:01 - data that you could
use that have APIs,
04:03 - and you request data from.
04:04 - I'm somewhat arbitrarily
picking an API call Dark Sky.
04:07 - What are the things I look
for when trying to pick an API
04:09 - is, does it have
good documentation?
04:11 - Are the examples easy to follow?
04:13 - Can I get up and running
with it fairly quickly?
04:14 - And looking at Dark
Sky, I find that to be
04:16 - true the documentation
is pretty easy to follow,
04:18 - and I can get up and
running with it quickly.
04:20 - And it offers the
data in JSON format.
04:22 - While it's not entirely
a free service,
04:25 - it lets you do 1,000
API calls per day free,
04:28 - and that's for
demonstration purposes.
04:29 - That's pretty much all I need.
04:31 - A risk here, of course, is that
by the time you're watching
04:33 - this video, the Dark Sky
API won't exist anymore
04:36 - or the way that it works
will have completely changed.
04:38 - But that's just a fact.
04:40 - So really, what you should be
taking away from this video
04:42 - is less the specifics
of the Dark Sky API
04:46 - but what you need to do
when you find an API,
04:48 - how to get your API key,
how to make the request,
04:50 - how to get the data
and then present
04:52 - the data, and hopefully, maybe
follow along with this video
04:54 - along but use a completely
different weather API
04:56 - while you're following.
04:57 - So unlike the
International Space API
05:00 - that we looked at
in a previous video,
05:01 - the Dark Sky API requires
you to authenticate.
05:04 - It's pretty simple
to authenticate.
05:05 - All you need is
a single API key.
05:07 - Other APIs can have a much
more involved process.
05:10 - But if you're going to
follow along and use this,
05:12 - you're going to need to first
go to darksky.net and click sign
05:15 - up.
05:16 - You're going to want to
register with your email address
05:18 - and make up a password.
05:20 - Now I've already done
that, so I'm just going
05:21 - to go straight to logging in.
05:23 - Once you're logged
in, you're going
05:24 - to arrive exactly to this page.
05:26 - And you can see this
is really important.
05:27 - This is my API key.
05:30 - It's a little bit of
irony here that I've
05:32 - made this public video
on YouTube showing
05:34 - you my API key right here.
05:36 - By the time you're
watching this,
05:37 - I'm going to have
regenerated my API key,
05:39 - and this one won't be valid.
05:40 - So don't try typing this one in.
05:42 - You're going to need
to get your own.
05:43 - But while I'm making
this video, this
05:45 - is one that I'm going to use.
05:46 - The other thing that
I love about this--
05:49 - already, I need to
read the documentation.
05:52 - But even without reading
the documentation,
05:53 - right here, I can see a
URL for making an API call.
05:58 - So if I want to get the
forecast all I need is
06:01 - api.darksky.net/forcast.
06:03 - That's the endpoint.
06:04 - We've learned about endpoints.
06:05 - Now my API key and then slash
latitude comma longitude.
06:10 - So I can actually just click
on this, open it in a new tab.
06:13 - And we can see,
look, this is weather
06:15 - for that's a latitude and
longitude for Los Angeles.
06:18 - I'm getting a summary.
06:19 - I'm getting near storm
distance-- all sorts
06:21 - information.
06:21 - I can use any of this
in my application.
06:24 - So let's assume
what I want to do
06:26 - is now request this API endpoint
in my client-side JavaScript.
06:32 - That's the thing that
we've done before.
06:33 - We did that with
International Space station.
06:35 - So I'm going to grab this URL.
06:37 - So right here,
once I geolocated,
06:39 - then I can say I can
make an API URL, which
06:44 - is equal to exactly that.
06:47 - I'm going to make this a
string literal because instead
06:51 - of hard coding in the
latitude, longitude,
06:53 - I might as well say
latitude comma longitude.
07:01 - And then now I can say this is
all stuff we've done before.
07:04 - I can fetch-- make a GET
request to that API URL.
07:07 - So I can say the response
equals await fetch API URL.
07:12 - Now since I'm using
the keyword await,
07:15 - I need to add the
async keyword up here
07:17 - to this callback function.
07:19 - Then I can say JSON equals
equals await response.JSON.
07:28 - And then I can
console log the data.
07:31 - So in theory, now, the
feature that I've added here
07:34 - in addition to geolocating, I'm
going to take that geolocation,
07:38 - set it to the darksky.net API,
and get the weather information
07:41 - back.
07:42 - Let's try giving that a run--
07:44 - going here to here,
hitting refresh.
07:48 - I'm the only person
in the entire world
07:50 - that's really excited to
see the dreaded CORS error.
07:54 - CORS stands for Cross
Origin Resource Sharing.
07:58 - It can be enabled or disabled.
08:00 - If it's enabled, it's
saying like, hey, I
08:01 - want you as a separate server
from a different origin
08:04 - if you'll share my resources.
08:06 - Now, the thing that's
sort of crucial here.
08:09 - If, of course,
it's disabled, it's
08:11 - not that the API is saying you
can't have access to my data.
08:14 - It's just requiring that you
do it from your own server.
08:17 - And this is one that's explained
in the Dark Sky APIs FAQ.
08:20 - If you scroll down,
you'll find the question,
08:22 - why do I get the error, no
access control out origin?
08:24 - And it's because they explain
that it's for security reasons.
08:27 - Because the API key is
part of that request,
08:30 - they want you to enforce that
you can't make that request
08:33 - from client side code.
08:34 - You can only do it
from server side code.
08:36 - So this is a nice
demonstration of how
08:38 - we're going to make that
request from node itself.
08:41 - So in fact, what I want to
do is take this code itself
08:46 - and put it in the server.
08:48 - So go to index.js,
and I'm just going
08:51 - to paste it in the bottom.
08:52 - But where do I
want to call this?
08:56 - I want to make a new
endpoint in my server that
09:00 - receives the latitude and
longitude then makes a call out
09:04 - to darksky.net and
then returns that
09:07 - back so that I could actually
have this still in my client.
09:11 - I don't want to
actually remove this.
09:15 - What I want is to
change this URL maybe
09:18 - to just a local path weather
slash latitude longitude,
09:25 - weather being the endpoint
that I'm going to create
09:28 - and then console log it here.
09:30 - So I'm going to go
into the server.
09:33 - I'm going to make a new
endpoint for a get request.
09:38 - I'll call that weather.
09:41 - This is now a function that
gets closed off like this.
09:45 - And now, OK, I'm getting
some errors here.
09:48 - What's the issue?
09:51 - This is a couple of things.
09:53 - One is the argument is to the
function is called response,
09:56 - so I really should call
that response here.
09:58 - So I'm just going to
call this fetch response
10:01 - and then say fetch
response.json.
10:04 - But there's a missing
piece here, actually.
10:06 - Number one is this needs
to be an async function
10:08 - because I'm using await.
10:10 - And then instead
of console logging,
10:12 - I want to say
response.json.json.
10:16 - So I'm going to make the
API call from within here
10:20 - and then send it back.
10:22 - This is what's known
as a proxy server.
10:24 - It's basically the server
is a proxy for darksky.net.
10:28 - I can't make the call
the darksky.net directly
10:31 - in the client.
10:32 - So I just send off the latitude,
longitude, receive it here,
10:36 - and make that request.
10:37 - But wait a second--
10:39 - how do I have these variables,
latitude, longitude?
10:43 - Oh boy, this is opening
up a can of worms
10:46 - about passing
parameters with an API.
10:48 - Here I am in the
client side code.
10:50 - I want to send to my
new weather end pointthe
10:53 - latitude, longitude that I've
gotten from the client side
10:56 - code.
10:57 - Then somehow in
the server, I need
11:01 - to receive those and put them in
here when I send the Dark Sky.
11:05 - Now I need to show you
how this is going to work.
11:07 - But for right now,
let's just make
11:08 - sure this is actually working.
11:10 - Let's just hardcode in
the latitude, longitude.
11:13 - So I'm going to go back to this
particular latitude, longitude
11:17 - that I know will work.
11:19 - I'm going to go to my server
I'm going to comment this out,
11:23 - and I'm going to paste
in a hardcoded latitude
11:26 - and longitude.
11:29 - So now when I go
to that endpoint,
11:31 - I don't need to pass in
a latitude and longitude.
11:34 - I am just going to get exactly
the weather for Los Angeles.
11:38 - I'm also going to do the
same thing in the client.
11:40 - I'm going to just temporarily
comment this out and then
11:44 - get rid of the
latitude and longitude.
11:47 - And I think for the
paths to be correct,
11:49 - I should have
included a slash here.
11:50 - OK, so let's restart the server.
11:54 - Let's go to the client
and hit refresh.
11:58 - We didn't leave out an
async function, sketch.js.
12:02 - I forgot to put my
async function in here.
12:08 - Ah, right, let's check
the server, of course.
12:12 - So up here, it's going to
give me a nice error that
12:14 - says fetch is not defined.
12:16 - Fetch is not defined.
12:18 - I forgot about that.
12:19 - Fetch-- the web fetch API--
12:22 - is part of the client
side browser API.
12:24 - If I want to use it
from within Node,
12:26 - I can, but I need to install
a Node package for that.
12:29 - The package I can use to do
that is called Node-Fetch.
12:33 - So I'm going to
go over back here
12:34 - and say NPM install node-fetch.
12:40 - If I go to my
package.json, I can just
12:43 - see that that's in there now.
12:45 - And then most likely,
what I need to also do
12:49 - is say a const fetch
equals require node-fetch,
12:53 - so that's going to pull the
fetch function from node-fetch.
12:56 - So I can add that
up here at the top,
12:59 - fetch equals require
node-fetch, rerun the server,
13:04 - give it one more refresh here.
13:07 - And there we go-- look at that.
13:09 - I now have the weather from
Los Angeles right over there.
13:14 - The last step here--
13:15 - I know this has been a bit
of a longer video than usual,
13:18 - but I just want to finish
off this one last step--
13:20 - and this last step is
sending from the client
13:24 - the latitude and
longitude to the server,
13:27 - so the server could send
that latitude and longitude
13:29 - to Dark Sky, get the weather,
and then send the weather
13:32 - backend to the client.
13:33 - The way that I'm going to do
that is with route parameters.
13:36 - Now, we learned about routes.
13:37 - If I have a GET request
or a POST request,
13:39 - I set up a route,
a path, an endpoint
13:42 - for that particular request.
13:44 - Route parameters are
extra parts of that path
13:47 - that you can name and capture
as variables, essentially,
13:50 - with data that's
sent from the client.
13:53 - Another way to do
this is with something
13:55 - called a URL query string,
which I cover in another video.
13:58 - And so either way
would work here,
13:59 - but I'm going to go
with route parameters.
14:02 - So here on the
express documentation,
14:04 - we can see that
a route parameter
14:05 - is specified with a colon.
14:08 - So the route is users.
14:10 - And then I might say users
slash Daniel or users slash
14:14 - Schiffman, and that will come
in as a user ID parameter.
14:18 - So to add that, I'm going
to go back to the server.
14:22 - I can remove this
hardcoded lat, long in
14:25 - and put back in the one that
has the latitude and longitude
14:31 - variables.
14:32 - So now, I need to add
the root parameters.
14:35 - So one thing I
could do is I could
14:36 - do slash colon lat
slash colon long,
14:39 - so I could have two
parameters coming in.
14:41 - I don't know.
14:42 - I think I'm going
to just make it one.
14:43 - I'll call it lat long.
14:45 - And then I'll send
it in with a comma.
14:47 - And those, you can see I haven't
used this request argument yet.
14:51 - This is finally a chance
to use that request object.
14:53 - Inside of the request object
is a property called params,
14:58 - and inside that params object
are all of the parameters.
15:01 - In this case, there's just
one parameter-- something
15:03 - called lat long.
15:04 - So I could type in lat
long, or I could also
15:08 - put that I could also put
that in brackets in quotes.
15:12 - So either way, this will work.
15:15 - I'm going to just go
with the dot syntax.
15:17 - And what I'm going to
do is I'm going to put
15:19 - that in another variable.
15:20 - So I'm going to say constant
lat long equals that.
15:25 - And then actually
what I'm going to do
15:26 - is undo is I'm going
to do dot split,
15:30 - and I'll split with a comma.
15:31 - And then the latitude
is the lat long index 0.
15:38 - And the longitude
is lat long index 1.
15:41 - So in theory, as
long as I send in
15:45 - as the route parameter
the latitude and longitude
15:50 - separated by a comma, I can
pull it out of request.params,
15:53 - split it by comma into
an array, and put them
15:56 - in each one of these variables.
15:57 - So I probably should have
done this more incrementally
15:59 - and console log some stuff.
16:01 - But let's just hope
that this works.
16:05 - I'm going to add some console
logs to debug just so I see
16:13 - in case something goes wrong.
16:14 - Then I'm going to go
back to the client.
16:16 - Now I need to go back
to the client code.
16:20 - And here I can go back
to this because this
16:24 - is exactly what I'm sending in.
16:26 - I'm going to the weather route
with the parameters latitude
16:30 - comma longitude.
16:31 - I already set that up.
16:32 - OK, let me add one more console
log request.params, so we
16:37 - can see the raw request params.
16:39 - And let's hope that this works--
16:41 - go back to the
browser hit Refresh.
16:43 - And there we go.
16:45 - I have got the correct
latitude, longitude, route
16:47 - and the weather
now from New York,
16:49 - the actual latitude, longitude
that I sent to the server.
16:53 - Let's check the servers
logs and there you go.
16:55 - You can see, there we go.
16:56 - So this is the request
parameters that came in.
16:59 - There was just one
called lat long.
17:01 - Then I used split to
turn it into an array,
17:04 - and then I took the 0 index
of the array and index number
17:06 - one of the array.
17:07 - So luckily, I wrote the correct
code, and it actually worked.
17:11 - The next step here would be
to present that information--
17:14 - well, there's several
next steps here.
17:15 - I need to save stuff
in the database
17:17 - and all sorts of
other things, but
17:18 - the small immediate
next step would
17:21 - be to display the
weather information here
17:23 - in the DOM itself.
17:24 - So I'm going to leave that
for you as an exercise.
17:27 - I will do that at the
beginning of the next video.
17:29 - And then I'm going to
continue on and make a request
17:31 - to Open Air Quality,
the Open AQ API
17:34 - to get both the weather
information and the air quality
17:36 - information for a single
latitude and longitude.
17:40 - [MUSIC PLAYING]