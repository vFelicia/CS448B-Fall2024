00:00 - [BELL DING]
00:00 - Hello.
00:01 - Welcome to another
video in Nature
00:03 - Of Code, Chapter
1, Vectors series.
00:06 - I really thought
that in this video,
00:07 - I was going to start
making this example.
00:09 - I almost have arrived there,
where this mover object is
00:12 - accelerating towards the mouse.
00:14 - But there's a
particular math function
00:16 - that I'm going to
need for this example,
00:18 - that I want to cover
in a separate video.
00:20 - And that's the
Normalize function.
00:21 - I want to look at
how I deal with
00:24 - and calculate the magnitude
of the vector, how
00:26 - I normalize a vector.
00:27 - What does that even mean?
00:28 - And the way that
I'm going to do this
00:31 - is look at creating a
vector between the mouse
00:34 - and the center of
the canvas, itself.
00:37 - The scenario I want to
look at is as follows.
00:40 - I have a canvas, and I have
some mover on the canvas,
00:46 - a particle somewhere.
00:47 - Let's just position
it in the center.
00:49 - Let's say this is 600 by 400.
00:52 - It's not exactly drawn to
scale, but close enough.
00:54 - So this is 300 comma 200.
00:56 - Then I have the mouse.
00:58 - I'm moving my mouse
around somewhere.
00:59 - And let's say I have
the mouse over here.
01:01 - I'm going to try to
draw a mouse arrow.
01:05 - And we'll call this
location 580 comma 20.
01:12 - What I'm looking
to do is figure out
01:14 - how do I calculate, if
I know this position
01:18 - and this position, a vector that
points from one to the other.
01:22 - If I want this
particular particle
01:24 - to accelerate towards
the mouse, how
01:28 - do I calculate this
particular vector?
01:30 - Call it V. Well, when I say
calculate the vector, what
01:35 - I'm really looking for is the x
component and the y component.
01:40 - So v dot x equals what?
01:44 - 580 minus 300.
01:48 - So 580 minus 300, that's 280.
01:51 - v dot y equals 200 minus 20.
01:55 - This length is 180.
01:59 - So this vector is 280 comma 180.
02:04 - What mathematical operation
did I just do, here?
02:08 - I have two vectors, really.
02:09 - I have this vector,
which I'll call position.
02:13 - And I have this vector,
which I'll call mouse.
02:15 - What I did is I said
mouse minus position
02:19 - gives me v. v equals
mouse minus position.
02:30 - Let's confirm that this really
works, the subtract operation,
02:33 - by diagramming this.
02:34 - So if I take this
mouse vector that's
02:36 - pointing from 0 to this
location, 580 comma 200,
02:40 - and I draw that down here,
this is not exactly right.
02:43 - But I just sort of
duplicate this, here.
02:45 - If I were to add, if I
were to say plus position,
02:48 - I'd put these
vectors end to end.
02:49 - So we'd take this vector
and put it over here.
02:52 - I'm about to go out
of your range of view,
02:54 - so I'll just draw a
little bit shorter.
02:56 - But this is the idea.
02:57 - Mouse plus position would
give me this vector.
03:01 - Mouse plus position.
03:03 - But I want to say
mouse minus position.
03:06 - So that's taking
this position vector
03:09 - and pointing it in the
opposite direction.
03:12 - This is minus position.
03:15 - So mouse minus position is
this vector, v, right here.
03:22 - And you can see that
matches up with that.
03:32 - So this example is
drawing random vectors
03:34 - that emanate from the center.
03:35 - Let's try that math operation.
03:38 - I'm going to actually
get rid of all this.
03:40 - And I'm going to
say position equals
03:42 - createVector, the
center of 200, 200.
03:46 - Mouse equals createVector,
mouseX, mouseY.
03:51 - And then v is--
03:55 - to do this subtraction,
mouse minus position
03:58 - and store it in a new vector,
I need a static function!
04:03 - That's what the
previous video is about.
04:05 - So I can say p5 dot Vector dot
subtract mouse minus position.
04:11 - And actually, let me
put the translate back,
04:13 - because I want to
draw everything
04:14 - relative to the center.
04:17 - Oh, look at that.
04:18 - I still have the funny
background thing,
04:19 - which I'll keep.
04:20 - So no matter where
I move the mouse,
04:22 - I now have a vector that
points from the center to where
04:25 - the mouse is.
04:25 - Now, certainly,
this visualization
04:27 - could have been created just
by calling the line function
04:29 - and saying line 200,
200, mouseX, mouseY.
04:33 - But the reason why
I'm doing it this way,
04:35 - through vector
subtraction, is to show you
04:38 - about the normalize function
and what kind of power that
04:42 - unlocks.
04:44 - Let's say that I have a
collection of vectors.
04:46 - Let me draw five of them, all
random directions, all varying
04:53 - lengths.
04:54 - Those are my five vectors.
04:55 - The process of
normalization, which
04:59 - is executed with the
normalize function in P5.js
05:02 - is to take any vector of
any length and any direction
05:06 - and make it into a unit vector.
05:09 - A unit vector is one where the
magnitude of the length is 1.
05:15 - So let's just establish that
this is approximately length 1
05:20 - in terms of this arbitrary,
two dimensional space I'm
05:23 - working with.
05:23 - So this vector normalized
would be this vector.
05:27 - This vector normalized
would be this vector.
05:30 - This vector is less than 1, so
normalizing it would actually
05:33 - be to grow it.
05:33 - It would be this vector.
05:35 - This vector would
be this vector,
05:37 - and this vector
would be this vector.
05:38 - Now, of course, I would
draw these exactly right.
05:40 - But this is the idea.
05:41 - All of these are normalized
versions of these.
05:45 - And you could think
of the term normalized
05:46 - as making all these vectors into
a normal vector, normal being,
05:50 - well, a normal
vector is length 1.
05:52 - Otherwise, it's some
wacky, crazy, insane vector
05:54 - with a much longer length.
05:56 - It's basically
having a standard.
05:58 - By the way, in vector
notation, a vector
06:02 - is typically written like
vector v with an arrow on top.
06:05 - The unit vector is often
written as vector v
06:08 - with the hat or carrot on top.
06:10 - So this would be a unit
vector v or any given vector
06:13 - v. So if I come back
to this example, here,
06:16 - one of the things
we could look at is
06:18 - I could say v dot normalize.
06:21 - What does that do?
06:26 - Well, it makes the
vector length 1,
06:27 - so I could just keep
zooming into this.
06:29 - I'm drawing something
of pixel length 1.
06:31 - So how does the math
for normalize work?
06:34 - Luckily, for us, we can
just call normalize in P5.
06:36 - But this is a moment for
us to take a little time
06:38 - to look at the math for that.
06:41 - Well, before we can look
at the math for normalize,
06:43 - we actually should
look for the math
06:45 - at another function called mag.
06:48 - And mag is a
function that returns
06:50 - the magnitude of a vector.
06:52 - So it returns the scale or
length of any given vector,
06:57 - that magnitude itself.
06:59 - So one thing that
I could do here
07:00 - that could demonstrate this
is let me take the background
07:03 - and draw it in Draw.
07:05 - Run this again, and I guess I
will make this much brighter.
07:10 - So now, I've just got this
line pointing to the mouse,
07:13 - and I'm going to ask
for the magnitude.
07:18 - So that is now getting
the magnitude of that.
07:21 - And actually, let's
just console log it.
07:24 - So you can see,
this console log,
07:26 - down here, is giving me the
magnitude of the vector itself.
07:30 - As I move the mouse
closer to the center,
07:33 - you can see it's always a
positive number, because it's
07:36 - the length of it, no matter
what direction it's pointing in.
07:39 - I could try something
interesting,
07:41 - like I could say, oh, let's make
the background color associated
07:44 - with the magnitude.
07:45 - So now, you can see the closer
the mouse gets to the center,
07:48 - the brighter the background is.
07:51 - It's sort of an
interesting interaction
07:53 - that you could play with.
07:55 - And the reason why this
magnitude value is so important
07:58 - is it plays a fundamental role
in how a vector is normalized.
08:02 - Let's say I take this vector,
and this is the magnitude, m,
08:08 - and this is the x component
and the y component.
08:10 - Well, another way I
could draw this diagram
08:14 - is like this, a right
triangle with a, b, and c.
08:18 - And if you've ever seen
this kind of diagramming
08:20 - in a geometry context,
you might have
08:22 - seen it paired with something
called the Pythagorean theorem.
08:25 - The Pythagorean theorem states
that a squared plus b squared
08:29 - equals c squared, or c equals
the square root of a squared
08:35 - plus b squared.
08:37 - And in fact, that is exactly
how the magnitude is calculated.
08:41 - So when the mag function is
called on a vector, v dot mag,
08:47 - it takes the square root
of the x component squared
08:50 - plus the y component
squared, and that gives you
08:52 - that magnitude.
08:53 - Now that I understand how
magnitude is calculated,
08:56 - I'm ready to look at
how normalization works.
09:01 - Let's use the 3, 4, 5 triangle
as our starting point.
09:05 - So once I have a vector,
its components are 4 and 3.
09:12 - We know that the magnitude now
equals the square root of 4
09:16 - squared plus 3 squared, which
is 16 plus 9, which is 25,
09:22 - the square root of which is 5.
09:24 - So the magnitude is 5.
09:26 - You can see how this math for
calculating the magnitude, now,
09:29 - works out.
09:29 - If I wanted to
normalize this vector,
09:32 - that means I want to shrink this
length, which is 5, down to 1.
09:37 - So it turns out, if
I'm taking a vector
09:39 - and normalizing its length down
to 1 or up to 1, 5 divided by 5
09:44 - is 1.
09:44 - I can actually just take
the x and y components
09:47 - and divide by the magnitude.
09:49 - So this length, right
here, is actually 3/5.
09:52 - And this length, right
here, is actually 4/5.
09:55 - And that's how you normalize
a vector, by dividing it
09:57 - by its magnitude.
09:59 - So removing this background
little digression,
10:03 - I can now actually
normalize v by saying
10:07 - v dot divide, div for divide,
a vector by its magnitude.
10:13 - So if I do that, wait a second.
10:16 - Well, there it is.
10:16 - You can see, no matter
where I put the mouse,
10:18 - I have this nice
vector of length 1.
10:21 - But maybe what I
should do is then
10:23 - scale it up by something
like 50, multiplying it.
10:28 - And look at this.
10:29 - So now, I have this
multi-step process
10:32 - to make a vector that points in
a given direction with a fixed
10:36 - length.
10:36 - I have some vector that
I've calculated, call it v.
10:40 - And the first thing I do
is I call v dot mag, which
10:44 - gives me the magnitude.
10:45 - Maybe it's 100.
10:46 - So the length is 100.
10:48 - Then what I want to do
is normalize the vector.
10:51 - I want the vector to be that
same vector, but of length 1.
10:55 - So I can say v dot divide
by that magnitude or 100.
11:00 - That takes this vector and
shrinks it down to here.
11:03 - Then I want to scale it up
by some amount, like 50.
11:09 - And that will then scale it back
up to a higher length of 50.
11:13 - So this is my
multi-step process,
11:15 - but this is with
all of this math.
11:17 - And in fact, instead of
calculating the magnitude
11:20 - and dividing by the magnitude,
I can just, instead, call--
11:24 - it's such a common operation--
11:28 - v dot normalize.
11:29 - So v dot normalize is the
act of taking any vector
11:32 - and shrinking it to length 1.
11:33 - I did a terrible job of drawing
these in the same direction,
11:36 - but hopefully, you get the idea.
11:38 - So now, I can simplify this by
commenting these out and just
11:42 - changing this to
v dot normalize.
11:48 - And we've got the same exact
result. But guess what?
11:51 - v dot normalize, v
dot multiply times 50,
11:55 - is also such a
common operation--
11:57 - like I want this vector
in this direction,
12:00 - but I just want it to
be this magnitude--
12:03 - that, in fact, I
can even take these
12:07 - and just call v dot setMag 50.
12:10 - So this function, v dot set
the magnitude of a vector,
12:14 - is the process of normalizing
it down to length 1
12:17 - and then scaling it to
a particular magnitude,
12:20 - in this case, arbitrarily, 50.
12:22 - And the process of normalizing
is calculating the magnitude
12:25 - and dividing by that magnitude.
12:27 - And we should see this
is the same result.
12:30 - Incidentally, it's
worth pointing out
12:32 - that I could actually
go and confirm this
12:34 - by looking in the P5
source code, itself.
12:36 - So this is the source code for
the P5 vector object, itself.
12:40 - And there's a
normalize function,
12:41 - which what does it do?
12:42 - It calculates the magnitude.
12:44 - And as long as the
magnitude isn't 0--
12:46 - because you can't divide by 0--
12:47 - then it multiplies by 1
divided by length, which is
12:51 - the same as dividing by length.
12:52 - So that is the
normalize function.
12:55 - I could even look at the
setMagnitude function
12:57 - and see that it's
normalize the vector
12:59 - and then multiply it
by some quantity, n.
13:02 - In fact, you can see here that's
something that I'm not doing
13:05 - is chaining.
13:06 - So a lot of these math
operations on vectors
13:08 - can be chained, meaning I
can say normalize, multiply.
13:12 - And by that, I mean these two
operations, v dot normalize,
13:16 - v dot multiply could be written
as v Dot normalize dot multiply
13:21 - 50.
13:22 - So once again, we
now see there are
13:24 - so many different ways to
do the same exact thing.
13:27 - But hopefully,
this is giving you
13:29 - a better picture of what
vector math operations do,
13:33 - how they work, and how you might
choose between static functions
13:37 - versus instance
functions, and how
13:40 - you might manipulate
vectors by using
13:41 - these mathematical operations.
13:43 - So I think this truly
is the penultimate video
13:46 - in the chapter on
vectors, because we're now
13:49 - ready to take this idea of
calculating a vector that
13:53 - points to the mouse and apply it
as an acceleration to an object
13:58 - and see what happens.
14:01 - So that's coming
in the next video!
14:03 - See you there.
14:04 - [MUSIC PLAYING]