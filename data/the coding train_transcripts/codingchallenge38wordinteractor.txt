00:00 - Hello welcome to a coding challenge. This
coding challenge is called I'm not sure
00:05 - because after i record this I'm gonna come
up with the name of it. Right now its
00:08 - called Word Interactor. You might see it
called something different. The point
00:12 - of this coding challenge is actually not 
really to make anything that interesting
00:15 - but to give you a template for creating a
creative project that allows a user to
00:21 - interact with text on a word by word basis
So each word being an individual token.
00:26 - For example, I'm gonna add a little bit
of code here I'm starting with a code
00:32 - base from some other example. Right now
i have the text here, I hit submit, and I
00:37 - see this text. I can't interact with this 
text, I can copy and paste it but what
00:42 - I want the user to be able to do is
interact with each one of these words
00:46 - individually. So for example what if 
everytime I click on this word or hover
00:52 - over this word I query an API and return
a synonym and replace it? Or based on
00:57 - some property of it I change it's color. 
This actually is a project that, so theres
01:04 - a lot of possibilities in what I could do
with this. Lets figure out how I do that.
01:08 - The first thing that I need to do, is
figure out a way of splitting that text
01:14 - up into an array of separate words. If 
you've been watching some of my other
01:18 - videos you'll notice theres a whole video 
about split and regular expressions.
01:21 - So I'm gonna use the concepts from that 
video and just split this up. What i'm
01:26 - gonna do here first is I'm gonna say, I
had a little bit of a code base where I'm
01:31 - just selecting some HTML elements,
a text field, an output paragraph, and a
01:34 - submit button, because I'm gonna use 
those things. First thing I'm gonna do is
01:38 - I'm gonna say var words equals S dot split
S is all the text that comes in from that
01:47 - text field. Of course you could get the 
text from a variety of other sources. I'm
01:51 - just using a text field. I want to split 
it up, and I need to pass the split an
01:55 - argument which is a delimiter. So what 
should that delimiter be? It could be
01:59 - space, it could be comma, it could be 
space or comma. Im gonna do something
02:05 - simple for now, I'm gonna write a regular 
expression that says anything thats not
02:09 - a letter or a number, one or more not 
letters or numbers. So backslash lower case
02:15 - 'w' is any A through Z or Zero through 
Nine. Capital 'W' is anything thats not
02:20 - A through Z or Zero through Nine, and plus
I guess the case sensitivity doesn't
02:25 - matter here. Lets just make sure that 
works. Im gonna say console log words.
02:30 - Just so we can see that. I'm gonna refresh
this, and we can see that looks good.
02:36 - I've got now an array of everything as a 
separate word. Why do I want to do that
02:40 - Because what I want to do is create
an individual DOM-HTML element for
02:50 - each word. The kind of element I'm gonna
use is a 'Span' element. If you're not so
02:59 - used to this developer console, I'm in the
javascript console right here. Another
03:04 - thing thats gonna be really useful 
is the elements tab of this console.
03:08 - Because if you look at this, I have this 
paragraph here and I have this
03:12 - paragraph here. Look at this, this 
paragraph element here is all this
03:19 - single body of text highlighted there.
What i want instead is to make individual
03:25 - things. I'm going to loop through the 
array of words and I'm going to create
03:38 - a DOM element for each one, I'm gonna
make it the Span element. Span element
03:42 - is useful because its something I can 
style and have control over but it rests
03:47 - inline as if the text just flows in a 
regular paragraph. So i'm gonna say
03:50 - create span words index i. I'm gonna take
this out and I'm gonna take this out too.
03:55 - Lets look at this, now we can see, submit,
Look what I got there. So first of all I
04:00 - made all of these spans but theres no 
spaces in between them. But you can see
04:03 - there they are. They're all separate 
individual span elements. Magic,
04:08 - fascinating, wonderful! Ok this is great.
I want to do 2 things here, #1 I want to
04:15 - put some spaces in between them...
Now we can see look at that I also have
04:25 - these span spaces, theres probably another
way I can put those spaces without having
04:28 - those be spans. But its fine you can see
it looks like an individual block of text
04:33 - but they're separate DOM elements that 
I can control individually. In my HTML
04:42 - file, I have this paragraph called output.
Let me run this again, I hit submit, look
04:52 - at this output paragraph and then all of 
these spans. I kind of want the spans to
04:55 - be inside the paragraph element just so 
if I have to style it or do something
04:58 - with it as a whole I don't want the spans
to be free floating they should be in a
05:02 - paragraph element. This won't look any
different to you, but what I want to do
05:07 - is say in the code, var span equals 
create, I'm gonna say span 1, var
05:15 - span 2 equals, and then I'm gonna 
say span 1 dot parent output. By
05:25 - the way I'm using the p5 DOM library
of course I could do this with native
05:29 - javascript, append this, document get
element ID this, I could do this with
05:33 - jQuery and have dollar signs all over my 
code. But I'm doing this with the p5
05:36 - library because its what I work on 
and what I use, its good for sort of
05:40 - sketching and quick experiments. So i'm 
gonna do this, same thing parent this
05:46 - So now look at this, I now have all of
those spans inside this paragraph.
05:56 - Again why is this useful? If I wanted to
I could add some CSS styling to style that
06:04 - paragraph as a whole as well as access 
the spans individually. Heres the thing
06:08 - that I want to discuss, notice how the 
original text has periods, spaces, and
06:14 - commas. But this text does not. It only 
has the spaces because I split by anthing
06:22 - but then I didn't retain I just 
automatically inserted spaces. Even though
06:26 - this will make it more complicated and 
take another 5 minutes, lets rebuild the
06:31 - text with the original punctuation. I 
think thats gonna be something you might
06:34 - want to actually do if you're gonna use 
this as a template for a creative project.
06:37 - How do I do that? One thing I need to do
in the split regular expression, I need to
06:47 - use capture in parentheses. Notice what 
happens when I use capture in parentheses
06:52 - And I run this again. We should see, oops 
I put the parentheses in the wrong place.
07:04 - They go inside here, the capturing 
parentheses are part of the regular
07:09 - expression itself, in between the slashes
Lets do this again, hit submit, now you
07:15 - can see look, theres some sort of 
Frankenstein thing where theres extra
07:18 - spaces and the periods. Its because I'm
also adding the extra spaces, I don't need
07:23 - to do that anymore. So now I can get rid
of this. The array actually, that array,
07:29 - if I say, console dot log words. Just to 
look at that array, with the capture in
07:34 - parentheses. You can see that this array
actually keeps the commas, the spaces,
07:39 - it keeps everything. But heres the
question, I don't necessarily want to
07:45 - One thing I could do in p5, i can say
span dot style. Im gonna say span dot
07:55 - style, background color, I'm gonna give it
some arbitrary background color, I'm gonna
08:05 - run this again, hit submit. It also gives 
the background color to every space and
08:12 - every punctuation mark. What if I don't 
want that, one thing I could do is use a
08:16 - regular expression to validate whether its
a word or a delimiter so what can I do now
08:23 - remember this regular expression that I 
used, i could use it again. I can say
08:30 - if, and I'm just gonna write a regular
expression right here, backslash capital
08:35 - W plus dot test words index I, then only
apply this styling. Now this looks a
08:45 - little bit crazy and I actually got it 
wrong. I want to check if this regular
08:56 - expression I want to test it against this.
Actually this is gonna do the inverse.
09:01 - Watch what happens, this actually 
highlighted for me only the delimiters.
09:07 - Let me go back, if not, now I'm 
highlighting only not the delimiters.
09:18 - Of course I could make them all a random
color, I think recent version of p5 will
09:25 - allow me to pass in three arguments as a
RGB value. Lets see if this really works
09:33 - No, I thought it allows you to do this. 
Maybe I could do a color object, that must
09:39 - be what it is, there we go watch this now
>From this alone you can see how I can
09:50 - apply an algorithm to how its colored. 
Of course I could do something more
09:54 - like, I could color it by part of speech,
I could color it by length of character
09:59 - that sort of thing. Theres a lot of
possibilities here in how you might color
10:03 - this text. But really I want to show you
is how you interact with it. So how you
10:11 - interact with it is by giving the span an 
event listener. So I only want an event
10:17 - listener for the elements that are words
and not the delimiters. I'm gonna comment
10:29 - this out, I don't need this line. What i 
want to do is I want to say span and I
10:35 - want to say mouse over. So i'm gonna use
the p5 event mouse over. This is the
10:42 - equivalent of a native javascript saying 
the element dot add event listener.
10:49 - Im gonna pass it a function, I'm gonna 
call it highlight or something. What this
10:56 - means, I could write an anonymous 
function here, but I'm gonna write a
10:58 - function somewhere else called highlights.
Just to make sure this is working,
11:08 - console dot log hover. To see what happens
Let me run this, hit submit, now look at
11:19 - this. Everytime I move my mouse around to
go over a word we can see that in the
11:24 - console the word hover is spit out. So i 
have these events firing for every single
11:29 - individual word. Thats good news. The 
question is how do i know which word
11:34 - I'm hovering over? Thers just this one 
function highlight for all of them. How
11:39 - do i know which one. There is kind of an 
answer to this which involves the use of
11:44 - something called a closure in Javascript.
Next week I'm gonna make a coding
11:48 - challenge where I use that. Lets say I 
wanted to make an API call everytime
11:52 - I hover over a word, I'm gonna need to 
employ some more sophisticated logic.
11:56 - But for right now I can actually do 
something rather simple because I'm
12:01 - using p5. In javascript there is a key 
word called this. I should probably
12:15 - make a separate video about 'this'
Another way of thinking about this
12:20 - is context. If you ever just say this in
p5 or setup or something, its referring
12:27 - to something called 'window' which is like
the global Javascript context that you're
12:32 - in, in a webpage. If you've ever done 
something like write a constructor
12:36 - function which you can see other videos
that I do. Where i say something like
12:39 - function particle this dot x equals, this
dot y equals. When i say new particle
12:49 - javascript behind the scenes creates a new
context which is a new particle object
12:56 - and it attaches the x and y properties to 
that new object. Theres a function in
13:01 - javascript called bind which I could do a 
video about at some point, which binds
13:05 - the context the keyword this to something
arbitrary that you might want to bind to.
13:10 - The keyword this can mean different things
depending on where you're programming
13:16 - what you're doing, where you're living in 
the world. P5 does something really
13:20 - magical behind the scenes for you and it 
makes working with p5 DOM events very
13:26 - easy. What it does is it automatically, in
here, binds the context, assigns the
13:32 - context to the DOM element you happen 
to be hovering over. Im gonna say console
13:38 - dot log this. Watch this now, submit, 
hover, look at this. All these different
13:50 - p5 elements are showing up here. This
automatically equals what I'm hovering
13:55 - over. By the way just to prove the point
if I say console dot log this right here
14:01 - in setup, look at this, thats like the 
global context. Which is like the window
14:06 - object which is all sorts of properties
and things we could investigate and look
14:09 - at. So this doesn't mean something 
different depending on whats going on
14:12 - Often a library or something that java
script does will assign it to something
14:17 - behind the scenes for you, for your
convenience. In this case the convenience
14:21 - is the DOM element. Look at what I can do
I can say, console dot log this dot HTML
14:33 - This dot HTML, HTML is a dom element 
function in p5 that returns the contents
14:40 - of that element. So i can hover of it and 
we can see the words in the console
14:46 - are whatever I'm hovering over are 
appearing. Now what could i do?
14:52 - I could do something like var s equals 
this dot HTML dot replace. I could use
15:04 - the replace function to say hey search
for any word that is...Let me just do
15:24 - something simple. This dot HTML rainbow
and this dot HTML dot style, background
15:41 - color, var c equals a color random 255,
random 255, random 255. I'm gonna say
15:54 - c here. Anything you hover over change it
to the word rainbow and give it a color.
16:05 - Sorry this dot style, style just like HTML
is a function that sets its value. Style
16:16 - is a function that sets its CSS styling
dynamically. So whenever I hover over
16:21 - a word it changes to rainbow and gives it
a color. So heres my rainbow web
16:26 - application. I should probably do 
something which sets the property so
16:32 - that when I'm hovering it changes to that
mouse hovering thing, I have to click on
16:37 - it. Come up with your ideas of what you 
might do thats more intersting. How might
16:41 - you replace the text, how might you use
a regular expression maybe with a callback
16:47 - to replace the text, to translate it. How 
can you interact with a body of text
16:51 - on a word by word, sentence by sentence,
character by character level. So i hope
16:56 - you take this code, expand on it, and 
create some interesting web based
17:00 - experiments out of it. Next week I'm 
gonna do a similar coding challenge
17:04 - where when you click on each of these
words I make an API query and replace
17:08 - it with either its definition or another
word or something like this, OK?
17:12 - Thank you so much for watching this 
coding challenge and see you soon in
17:18 - another video!~~~
17:29 - Subtitles by the Amara.org community