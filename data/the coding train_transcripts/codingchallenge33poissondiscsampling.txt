00:00 - welcome to a video tutorial where I'm
00:03 - going to implement I'm gonna read this
00:05 - paper in this video out loud to you so
00:08 - if you ever thought oh you don't want to
00:09 - do I want to watch a video on YouTube or
00:11 - somebody reads out loud to be an
00:13 - academic paper with some math stuff in
00:15 - it you come to the right place it is
00:18 - called fast fast + song disc sampling in
00:21 - arbitrary dimensions just to kind of
00:23 - cover what that is
00:24 - the idea here is that I want to fill a
00:26 - space with points these could be you
00:29 - know I want to I want to use this to
00:31 - create a bigger better good examples
00:35 - like an ecosystem simulation where
00:37 - creatures are wandering around I want to
00:38 - fill a space with food or I want to use
00:40 - these as seed points for some type of
00:42 - other generative growth algorithm or I
00:44 - just want to have a nice pretty dots
00:46 - pattern then I color according to some
00:48 - image and I want those points to be
00:49 - evenly spaced around and not overlapping
00:51 - so let's look at how we can implement
00:54 - this algorithm and I'm not going to read
00:56 - the whole paper I'm just going to start
00:57 - from down here and the idea is the
00:59 - algorithm takes and by the way let's
01:01 - just so look you look in this video over
01:03 - the URL for this paper and it's by
01:05 - Robert Britain from the University of
01:06 - British Columbia and this is I think
01:08 - from I assume that this oh seven means
01:10 - it's from 2007 so the algorithm takes as
01:14 - input the extent of the sample domain
01:17 - the minimum distance R between samples
01:20 - okay so what does that mean a sample by
01:22 - the way is each one of these dots that's
01:24 - a sample so I first won't eat a minimum
01:27 - distance so I'm going to go to my code
01:29 - oh by the way what's my code doing right
01:31 - now so I'm starting with this code
01:33 - written in JavaScript using the p5.js
01:35 - library and it just draws what has a
01:37 - loop to go from zero a thousand to draw
01:39 - a thousand random points in a window and
01:41 - we can see that's happening here and you
01:44 - can see that these points don't have
01:45 - that kind of distribution they're
01:47 - overlapping they're not kind of evenly
01:49 - spaced right this is a perfectly fine
01:50 - distribution I don't have nothing
01:52 - against this particular pattern
01:53 - whatsoever but it's interesting to look
01:56 - at other patterns of what types of
01:58 - beautiful beautiful beautiful beautiful
02:01 - things could emerge out of that okay so
02:05 - here we go okay so now back to the paper
02:08 - where was I okay so let's go okay so our
02:11 - aah so I need to add our so I'm an
02:14 - a variable R and let's say right now
02:16 - we're going to start with I want these
02:18 - points to be 10 pixels apart that's kind
02:21 - of a reasonable value to start and then
02:23 - a constant K what is K as the limit of
02:26 - samples to choose before rejection in
02:28 - the algorithm typically K equals 30 okay
02:31 - so well that seems to me I can create a
02:33 - variable k equal to 30 but what does
02:35 - that mean limit of samples to choose
02:38 - before rejection so probably in the
02:40 - algorithm I've read this before
02:42 - I haven't implemented the code yet but I
02:43 - did read this before so I know but it
02:46 - means there's going to be some point
02:47 - where I'm going to try to do something a
02:49 - certain amount of times and if it
02:50 - doesn't work at some point I'm going to
02:52 - quit and this is this is telling the
02:55 - algorithm to quit after 30 times and
02:56 - that's obviously both of these are
02:57 - numbers we could play with to see if we
02:59 - get different effects so now what I want
03:01 - to do is initialize an N dimensional
03:03 - background grid oh boy what then what is
03:07 - an N dimensional background grid that
03:11 - sounds complicated sorry I just needed
03:14 - to get to my keyboard here so what I
03:15 - want is to have a two dimensional
03:20 - background grid meaning I want to think
03:23 - of some sort of grid and what I'm going
03:26 - to do is I'm going to store everything
03:27 - in that grid in an array so I'm going to
03:30 - make actually just one I think I'm going
03:32 - to make a one dimensional array and that
03:35 - one dimensional array will number the in
03:38 - every single element in that grid and
03:40 - this is what I do I've done this in
03:42 - countless different examples and things
03:44 - online where online on YouTube on the
03:49 - internet where well this is where I have
03:53 - this one dimensional array to store
03:55 - information in it's for a
03:56 - two-dimensional space pixels do that all
03:58 - sorts of things so let me come back here
03:59 - and let's set that up so what I'm going
04:02 - to do is I'm going to create a variable
04:04 - and I'm going to call it grid and I'm
04:06 - going to make it an array now I need to
04:08 - think about what is the what is this
04:11 - this pens by the way very light can you
04:13 - see this what is the size of each one of
04:15 - these cells in the grid so here it says
04:19 - we pick the cell size to be bounded by R
04:23 - divided by the square root of n
04:27 - our is the minimum distance we want
04:29 - between our points and is the dimensions
04:32 - to dimensions I mean so interestingly
04:34 - enough we could do this in three
04:36 - dimensions or in four dimensions or and
04:38 - I was gonna play some Spacey music for
04:40 - four depictions but whatever I'd I'm not
04:43 - I got to work on this whole soundboard
04:45 - think I'm not very good at it um okay so
04:47 - uh so so that's something I need to
04:50 - calculate and I'm gonna calculate it
04:53 - I'll just do it up here I'm gonna call
04:56 - that variable W to be the I have a black
05:00 - marker now by the way so you can see
05:02 - this better the size what's the width
05:04 - what's the height of each one of these
05:06 - cells okay so I need that to be R
05:10 - divided by the square root of n which is
05:14 - two so uh so you know you can figure
05:18 - that out but III have to think of that
05:20 - out because the perk the code will
05:21 - calculate that for you okay so I have
05:22 - that now so let's read this so okay the
05:28 - grid can be implemented as a simple n
05:30 - dimensional array of integers the
05:32 - default negative one indicates no sample
05:34 - a non-negative integer gives the index
05:37 - of the sample located in a cell so
05:39 - basically that big array is either going
05:40 - to have a negative one in it or or
05:43 - another number in it to say like oh
05:45 - there's something in that all right so
05:47 - let's let's start by okay so first of
05:51 - all we have to figure out how many
05:52 - columns are there because the space is
05:56 - 400 by 400 pixels and the size of each
05:59 - one of those cells is W so I want to
06:01 - have it I want it to be an integer so
06:03 - I'm going to use the floor function I
06:04 - want to take the width divided by W for
06:07 - the number of columns and the number of
06:09 - rows is the height divided by W and then
06:13 - what I want to do is loop through every
06:21 - single spot which is the number of
06:23 - columns times the number of rows and in
06:25 - the grid initialize its value to
06:29 - negative one so I'm starting with a grid
06:31 - the idea here is the grid I just pick up
06:34 - a different marker each time where the
06:36 - grid is just filled with these are the
06:38 - index values but the grid itself is
06:41 - filled with negative one negative one
06:43 - negative one negative one we're gonna
06:44 - start actually putting points filling
06:46 - that grid with values okay who still why
06:48 - is it still interesting to you I hope so
06:50 - okay so going back to this paper okay
06:52 - good good good good good good
06:53 - ah select the initial sample X sub 0
06:58 - whatever what does I mean pick a random
07:00 - point that means pick one random point
07:02 - randomly choose a chosen in uniformly
07:04 - from the domain insert it into the
07:07 - background grid and initialize that
07:09 - active list whew okay there's a bunch of
07:11 - extra stuff there okay so forget about
07:13 - this active list for a second let's say
07:15 - I need to pick a random point that's not
07:17 - too hard I can pick a random point what
07:20 - so what were let's let's see here so
07:22 - this is a this is really uh if I'm
07:26 - reading the paper this was step zero and
07:29 - now I'm going to do this by the way is
07:33 - no longer relevant now I'm going to do a
07:36 - step one so which was pick a random
07:39 - point var x equals random with bar y
07:45 - equals random height and you know what
07:49 - mix make that a vector I think it's
07:51 - going to be useful a vector in p5 is an
07:53 - object that stores both in x and y so I
07:56 - don't to keep them as separate variables
07:57 - let's make a vector called Paz with it X
08:01 - and the y in it okay we're doing well
08:03 - okay so that was there we go so now
08:07 - select the initial sample chosen
08:10 - ba-ba-ba inserted into the background
08:12 - rib so what does that mean so if I pick
08:15 - a random point some pair in this window
08:19 - ah I got to throw a dart right ready one
08:22 - two three ah it worked
08:26 - exciting live demonstration ok so right
08:29 - I pick this random point and I can see
08:32 - that it's in spot eight unfortunately I
08:34 - can't actually in my code like throw
08:36 - something and just see where it is so I
08:38 - have to figure out where it goes and the
08:41 - oh did I yeah okay um I have two am i
08:46 - back in the right place okay um I have
08:49 - to now figure out where it goes
08:50 - and how do I figure out where something
08:52 - where it's column which I'm going to
08:54 - call I is the exposition divided by W
08:58 - right W being the size that's that sort
09:00 - of scaling factor the size of each cell
09:02 - and I also want to use the floor
09:05 - function to make that an integer is
09:08 - going to be an index into an array and
09:10 - then J is the y-value divided by W and
09:14 - so what I want to say is the grid I plus
09:18 - J times the number of columns equals
09:21 - that position so this is me inserting it
09:24 - into the grid I pick a random XY point I
09:27 - find its column and row position I'm
09:30 - saying I and J in the grid I make a
09:33 - position vector out of it and I insert
09:35 - it into the array so this I plus J times
09:37 - columns thing this is a formula that
09:39 - exists in just about so many of my code
09:43 - examples but it basically is a formula
09:45 - for taking a column position and a row
09:49 - position and figuring out ah if the
09:51 - column is 0 1 2 3 and the row is 0 1 2
09:56 - that the actual position in the array is
09:59 - 13 and you can see that is the column
10:02 - plus the row times the width 1 2 3 4 5
10:06 - so 5 times 2 is 10 plus 3 is 13 yeah
10:09 - that formula works so that was kind of a
10:11 - quick explanation I think I have a video
10:12 - somewhere over that more you could try
10:14 - to find it yeah ok great so now we have
10:18 - that inserted so that's step two let's
10:21 - go back oh no that's step one sorry so
10:24 - now we've done step two ah but we're
10:25 - missing something active list so this
10:28 - algorithm requires an active list of
10:31 - points that we are currently working
10:32 - with and that's going to make more sense
10:34 - as I get further into this but there's
10:39 - some interesting stuff going on to the
10:40 - live chat here ok so so let me let let's
10:43 - create I want to create another array
10:45 - called active and what I want to do is
10:48 - also say active dot push that position
10:51 - so I want that position that vector to
10:54 - both be inserted into the grid member
10:56 - this grid is an array now that has
10:58 - negative 1 everywhere except for this
10:59 - one spot that it actually has a vector
11:01 - and then what I want to do is I'm going
11:03 - to add the draw function back in
11:05 - I want to say background zero and I just
11:08 - want to say I want to loop through the
11:10 - grid just to make sure things are
11:13 - working and I want to say a stroke 2:55
11:18 - stroke wait for and then I want to say
11:23 - sorry I want to say a point grid index
11:27 - IEX
11:28 - grid index I dot y however I only want I
11:32 - want to loop through the whole grid and
11:33 - draw all the points but I'll not there's
11:35 - a negative one there so I want to say as
11:38 - long as grid index I does not equal to
11:41 - negative one then I can draw the point
11:45 - so I just want to be able to see what's
11:47 - going on and then also I think it would
11:50 - be useful to look at all the active
11:53 - points so I'm also going to loop through
11:55 - the active array this is really mostly
11:57 - for debugging but I think it might also
11:58 - make kind of an interesting pattern and
12:00 - I'm going to say stroke 255 comma 0
12:03 - comma 255 stroke wait for and I'm going
12:08 - to draw a point but this time at the
12:12 - active spot okay there we go whoops
12:17 - how's this looking everybody live reload
12:20 - going let's take a look up so we have an
12:22 - error square root is not to find look at
12:24 - that so this is by the way a very common
12:26 - p5.js problem if you ever try to call a
12:29 - p5.js function outside of setup it
12:32 - actually won't work because p5.js has
12:34 - not been initialized the page has not
12:36 - been loaded until setup this is like an
12:37 - unloaded type event I could get around
12:40 - that here just because it's square root
12:41 - by just accessing the JavaScript square
12:43 - root function directly I'll just do that
12:45 - otherwise I don't have to move the
12:46 - square root function in to set up call
12:48 - is not defined sketch is line 15 this is
12:53 - columns times rows there we go okay so
12:56 - you can see there's one random point
12:58 - that's also one active point and you can
13:01 - see each time I reload the page it's
13:03 - somewhere there ok we're moving along
13:05 - here we're trucking along here I'm
13:07 - getting somewhere now I think yes yes
13:11 - people in the chatter tell me to use a
13:12 - for each loop I'm I've nothing against
13:14 - for each loops but I think it's a little
13:15 - bit more readable to do this right at
13:17 - the moment so let me
13:19 - go back to this paper and now we're
13:22 - going to look at step two this is the
13:26 - this is the tofu of the algorithm right
13:29 - this is where the main stuff is
13:30 - happening while the active list is not
13:34 - empty choose a random index from it okay
13:37 - let's start with that so I have to say
13:39 - down here let's put let's put step two
13:41 - at the beginning of draw and I'm going
13:44 - to say while active is not okay while
13:49 - active dot length is greater than zero
13:51 - that's that's saying as long as it's not
13:54 - empty now I'm going to make something a
13:56 - little bit different here the algorithm
13:59 - has a while loop in built into the
14:01 - description in other words it's saying
14:03 - while this is true keep doing this keep
14:05 - doing this keep doing this but I
14:06 - actually don't want to do this I want to
14:07 - make use of the draw loop which animates
14:09 - so I can see the algorithm animating
14:10 - itself so I'm actually just going to say
14:12 - if because I want to just do this one at
14:14 - a time and it's going to come around and
14:15 - do it again with draw so if active dot
14:17 - length is greater than zero what's the
14:19 - next thing I choose a random index okay
14:23 - so I can save our index I'll call that
14:26 - our maybe our equals
14:28 - random active dot length and I need to
14:32 - floor that that's a random index and
14:35 - then generate up to K points chosen
14:40 - uniformly from the sphere spherical
14:43 - annulus between radius R and 2 R and
14:48 - oops sorry I don't have my
14:53 - really don't point to be something um
14:55 - okay ah okay hold on hold on hold on
14:57 - we're going to be okay let's go bets
15:00 - let's start with generate up to this
15:02 - chart with generate up to K points I'm
15:06 - going to say for VAR n equals 0 n is
15:09 - less than K + + + so I'm going to do a
15:12 - loop at least K times up to K points and
15:15 - then now this is kind of crazy uniformly
15:19 - from the spherical on ulis between
15:23 - radius R and 2 R around X index I let's
15:27 - talk about what this means okay
15:31 - so I have to find an eraser which I'm
15:35 - gonna use this paper towel so here's
15:37 - what we have to do this is kind of a
15:39 - useful thing in programming to sort of
15:41 - think about I have a point that I just
15:43 - picked this is my random active point
15:48 - now there is some value in our program
15:51 - called R which has this distance okay so
15:57 - our I don't know why wrote distance
15:58 - there or has some length
15:59 - so what I want to do is pick another
16:02 - point around this point whose distance
16:06 - is somewhere randomly between R and 2 R
16:11 - so in other words I want to pick any
16:15 - point that's within kind of this
16:21 - doughnut right I don't want it to be it
16:24 - can't be within our otherwise it's
16:26 - invalid and I don't want it to be really
16:29 - far away I want it to between R and 2 R
16:31 - so how do I do that
16:33 - well one thing I need to do is one thing
16:34 - I could do is just pick a random angle
16:36 - right first let me pick a random angle
16:38 - and then let me pick a random value
16:40 - between R and 2 R and I want to place
16:43 - the point offset from here along that
16:46 - angle somewhere between aren't you our
16:49 - so that's what I need to do
16:50 - so let's come back to the code and what
16:56 - I want to do is say so first I want to
16:59 - angle random 2pi honestly here's the
17:03 - thing I could take some let me do it
17:05 - long-winded ly
17:06 - but I can take some shortcuts because
17:07 - there's some functions in p5 out sort of
17:09 - do some of these steps for me but then I
17:11 - want to create the offset values so
17:16 - offset X is cosine of that angle offset
17:21 - Y is sine of that angle right this is
17:24 - trigonometry that if I have an angle I
17:27 - can get the the sides of the triangle
17:29 - right the from that angle with cosine
17:31 - and sine look for one of my video
17:32 - tutorials that goes through this math so
17:34 - but actually what I can actually do by
17:37 - the way is just pick a random vector so
17:39 - all of this really what I want to do is
17:41 - say var offset equals P five vector
17:45 - random 2d because what that's going to
17:47 - give me is a random unit vector pointing
17:51 - out in some direction from here and then
17:54 - all I want to do is make the length of
17:56 - that vector between R and 2 R so now I
18:00 - want to create a magnitude which is some
18:02 - random value between R and 2 times R and
18:05 - then I want to take the offset and set
18:08 - the offsets magnitude to that random
18:11 - value and then where's the point that
18:14 - point actually I can just say offset ad
18:19 - oh wait I forgot to get it so the
18:22 - position the position that I'm working
18:24 - with is from the active array that
18:28 - particular so I remember I'm picking a
18:31 - random point from the active array and
18:33 - then up to K times 30 times I'm going to
18:36 - pick random points around it between
18:38 - between what between R and 2 R so now if
18:43 - I add position to that offset this is
18:46 - really the point and actually here's
18:48 - what I'm going to do I'm going to change
18:49 - my variable naming a little bit what I'm
18:51 - trying to do is make a new sample so I'm
18:54 - going to call this sample and I'm going
18:56 - to make a random vector and then and
18:58 - then sample is going to get the position
19:00 - added to it so now that's that actual
19:03 - point so I'm now done with this this
19:08 - particular step generate up to K points
19:09 - I've done one point uniformly between R
19:12 - and 2 R for each point check if it is
19:15 - within
19:16 - distance oh wait there's a mouse in the
19:18 - way check if it is within distance are
19:20 - of existing samples using the background
19:23 - grid to only test nearby samples this is
19:27 - an exciting moment okay I don't know if
19:30 - anyone is still watching this video
19:32 - however many minutes and I might be like
19:34 - 20 minutes in already this is like a
19:36 - video about Plusle disappointing but
19:38 - this is a moment because what I'm gonna
19:40 - do here actually applies to a lot of
19:42 - other scenarios let's think about this
19:44 - for a second I want to talk about what's
19:46 - going on we find my marker we find my
19:48 - paper towel okay we come over here so
19:53 - let's think about this there is a space
19:57 - and that space is full of points and I
20:04 - am working with a particular new point
20:06 - right here and let's say I want to know
20:11 - is this point too close to any of the
20:15 - points in the space most algorithms
20:18 - would say I have to check this point
20:20 - against every other point in the space
20:22 - and there could be you know something
20:24 - like 10 million points in a space and
20:26 - this could take a long time especially
20:28 - I'm doing this apart some animation
20:29 - algorithm however the whole point of
20:32 - this place'll disk thing that we're
20:34 - doing is that the points are registered
20:37 - to a spot on the on some kind of grid
20:40 - and if the only thing I care about is is
20:44 - a point too close to another point if
20:46 - this point is within this spot on the
20:48 - grid I kind of know 100% that I don't
20:52 - need to check these points or these
20:54 - points or these points the only ones
20:56 - that are worth checking are the ones
20:57 - that are in immediate neighboring spots
20:59 - on the grid and this allows a massive
21:02 - savings in performance and in a flocking
21:06 - simulation in a collision detection
21:07 - simulation this kind of algorithm can
21:09 - also be used and it's quadtree type
21:12 - stuff I'll do some other videos at some
21:15 - point but so let's look at how we're
21:16 - going to do that here okay now uh so
21:22 - what I need to do is check I want to
21:26 - check okay so first of all I need to
21:27 - know where is this point in the grid so
21:30 - I
21:30 - need to know its column position is
21:33 - sample dot X divided by W and I need to
21:37 - floor that so this is where it's going
21:39 - to be in the grid then I need to know
21:44 - its row position which is sample dot Y
21:46 - divided by W and then I need to do
21:48 - another loop like you could check in to
21:50 - neighbor individually but let's do
21:51 - another loop right nested loop I starts
21:54 - at negative one which is like the spot
21:56 - to the left I is less than or equal to
21:59 - one which is the spot to the right I
22:01 - plus plus and then J is equal to
22:06 - negative one same thing J is less than 1
22:09 - j plus plus and then what I want to do
22:13 - is I want to look at I want to look at a
22:18 - point I don't know what to call it
22:20 - a neighbor I'll call it neighbor equals
22:24 - the grid at I plus J times the number of
22:27 - columns and I want to check the distance
22:30 - now between the sample the distance
22:34 - between and I can use the P five vector
22:37 - distance function the distance between
22:39 - the sample and the neighbor and I want
22:43 - to do something right this is going to
22:46 - if if that distance is less than R right
22:51 - the whole point of this whole thing that
22:53 - we're doing is to make all these points
22:55 - on the screen where none of them are
22:57 - within this distance threshold okay so
22:59 - this is a very key right here what do I
23:01 - do if I find one by accident that's too
23:03 - close to so let me go back to this and
23:05 - see for each point in turn check if it
23:08 - is within distance R okay if a point is
23:12 - adequately far from existing samples
23:14 - then it becomes then it goes into the
23:16 - active list and it's good okay so we're
23:18 - trying to find three times we're going
23:20 - to try to find a point that's okay so
23:23 - here what I think would work best is for
23:25 - me to create a boolean variable like I'm
23:28 - going to call it okay and I'm gonna
23:30 - assume it's okay bar okay is true it's
23:33 - going to be okay however if that
23:34 - distance is ever less than or it's not
23:39 - okay anymore so I got to check
23:42 - everything i here's a
23:43 - I don't want to check oh here's another
23:46 - first of all there might be nothing in
23:47 - the grid so I only want to do this
23:50 - if only want to do this if the neighbor
23:53 - is not equal to negative one remember
23:55 - negative one there's probably a
23:56 - different way I might clean this code up
23:58 - later
23:58 - famous last famous words of every single
24:01 - programmer ever
24:02 - I might clean this code up later but
24:06 - here remember if something's not
24:08 - actually in the grid we're just sticking
24:10 - a negative one in the array so I only
24:12 - want to do this right if negative one if
24:14 - there's nothing there it's definitely
24:16 - not too close because there's nothing
24:17 - there to be too close to so okay so
24:19 - after I do this I want to check and say
24:22 - after all this if it's okay what do I
24:25 - want to do I want the grid at that spot
24:31 - to be that sample and I want active I
24:36 - want to add that sample to active so I
24:40 - remember I'm keeping two lists I'm
24:42 - keeping an array of this grid so I want
24:44 - to put the point in the grid but I also
24:46 - want to put it in the active list
24:47 - because it's going to be another point
24:49 - that we could use later to pick a point
24:51 - next to it okay oh boy this okay so now
24:57 - let's think I feel like there's some
24:59 - there's a sort of missing issue here
25:01 - there's kind of an issue what if I I
25:04 - think I need to check it's not written
25:07 - in let's keep limp let's keep reading
25:08 - the paper
25:11 - so okay Amit is the next okay so let's
25:16 - let me guy I feel like I've missed a
25:18 - step here that isn't explicitly written
25:19 - here but I'm going to keep going with
25:21 - what's written here so okay so one thing
25:23 - we should do is say like well if it's
25:25 - okay remember I'm in this loop to try
25:27 - this K times if I find a point I don't
25:30 - need to keep trying so our dark should I
25:34 - keep trying generate up to K points I
25:38 - guess I could keep trying but but I do
25:42 - need to check I do need to figure out if
25:44 - I get two K and I haven't found a point
25:47 - then at least one point then I need to
25:50 - remove this active one so let's say
25:52 - let's create a variable called found is
25:55 - false so I'm assuming
25:56 - I'm going to try now k times if I find
25:58 - something I'm gonna said found equal to
25:59 - true
26:00 - here is where I know I found something
26:02 - so I'm going to say found equals true
26:05 - and then what I'm also going to do now
26:08 - is if I get to the end of this loop kay
26:12 - boy there's a lot of code here if it's
26:15 - not found what do I want to do active
26:18 - dot splice R comma one right remember
26:21 - the whole point is I started with a
26:23 - random point in the active list and I
26:26 - tried to find points around it that are
26:28 - okay if I didn't find any points around
26:30 - it that are okay I want to take that
26:32 - point out of the list and splice is a
26:35 - JavaScript function that removes an
26:36 - element from an array splice at the
26:38 - index R oh boy there's a big problem
26:40 - here right I've used R as the variable
26:43 - name for that minimum distance threshold
26:45 - and then I just made a new variable R
26:47 - for that index so I'm going to rename
26:49 - this to R and index let's use a better
26:51 - variable name Rand index and then go
26:55 - back and add that here okay I can't
26:58 - believe I've written so much code
26:59 - without running it terrible idea
27:01 - actually I generally try to avoid doing
27:02 - this yeah Taylor in the chat says can't
27:05 - you break after o fault okay equals
27:08 - false I think actually after okay is
27:10 - true yeah so I was going to put a break
27:12 - here let's comment this out and see how
27:14 - it works
27:15 - with or without it let's just put a
27:17 - little question here should we break Oh
27:19 - we'll discuss that later so weirdly I
27:23 - kind of have all of the code right now
27:26 - right if we go back and look at this
27:29 - we're done now but I know that I in my
27:33 - head I there's something that I'm
27:34 - missing let's see if you can think about
27:35 - what I'm missing but let's actually just
27:37 - try running it well nothing's happening
27:45 - yeah okay
27:46 - so there's a bunch of errors in my code
27:48 - one of which which is quite crucial is
27:50 - that actually the this year is
27:53 - absolutely wrong what I'm looking for
27:56 - right this nested loop where I'm trying
27:57 - to find the neighbors I need to add the
28:00 - actual place that I'm at so this should
28:03 - actually be column plus I plus and I
28:07 - kind of hate the way that I've written
28:09 - this row plus J
28:10 - times columns but we'll leave it you
28:13 - know III think I might like to say
28:15 - something like this just to kind of put
28:18 - this in a separate variable like
28:20 - calculate that index this way okay so
28:22 - that was something I definitely was
28:23 - missing so that's the thing I'm
28:28 - definitely missing let's see if we can
28:29 - kind of debug this a little bit I'm
28:34 - actually I'm gonna there's something
28:35 - else that I feel like I'm missing which
28:37 - is sort of crucial which is that if I
28:39 - pick a point I let's add the break there
28:43 - maybe the break is a bit of a problem
28:46 - let's see if things are going let's um
28:52 - whoa okay let's okay let's check the
28:56 - code Oh Kyle's is not defined okay so
28:59 - one thing that I forgot is that if I'm
29:01 - going to use these in setup or draw they
29:03 - need to be global variables so let's do
29:05 - that okay oh look at this
29:08 - amazingly it's actually working I kind
29:12 - of thought for sure I had a problem uh
29:14 - yeah okay great
29:15 - so we have an uncaught cannot read
29:18 - property copy of undefined let's see if
29:20 - we can the distance function in draw
29:23 - sketch j/s line 52 so we have a problem
29:27 - here and I think I know this is what I
29:28 - was thinking of here that what it if
29:32 - neighbor does not equal negative one
29:35 - well guess what neighbor could also be
29:37 - could neighbor ever be or could sample
29:41 - be undefined trying to think about this
29:44 - well to me there's an issue here which
29:46 - and I don't know if this would this this
29:48 - this is what I'm thinking okay this is
29:52 - what I'm thinking I'm thinking that what
29:54 - this new point that I've picked if grid
30:00 - oh oh I know what it is of course so
30:03 - there's definitely a major issue here
30:04 - which is that if neighbor does not equal
30:07 - negative 1 or if neighbor I think I
30:12 - could just say if not neighbor and you
30:15 - know what you don't really better let's
30:17 - not even because I could just fill it
30:20 - with undefined because
30:23 - undefined in JavaScript evaluates to
30:25 - false and then is there another place
30:30 - that I was checking negative one and
30:32 - then I can just also say if not grid
30:35 - index I which I think is a better way to
30:37 - the reason why I want to do this is this
30:40 - is sometimes going to give me what if
30:43 - I'm on the edge right if I'm if I'm in
30:46 - the cell on the edge and I try to look
30:49 - to neighbor negative one it's going to
30:50 - be undefined so I also need to check for
30:53 - that and if I come back over here did I
30:58 - switch to the other screen there I don't
31:00 - know if I did so I'm still getting this
31:03 - issue okay okay what what happened here
31:10 - sketch line 52 so let's look at let's
31:18 - look at what the value of neighbor is
31:20 - undefined
31:21 - oh if neighbor I want to do this not if
31:25 - not neighbor if neighbor cannot read
31:28 - properly X of undefined line 78 if only
31:35 - if not if not only if boy here we go now
31:39 - we can start to see this working and
31:42 - we're getting this distribution now I
31:43 - kind of thought that I needed another
31:45 - check but I'm kind of amazed that this
31:46 - is working anyway I guess I don't need
31:48 - another check and you can see which
31:49 - points are active and which points are
31:51 - finished and we can let's just let this
31:54 - finish it should get now the reason why
31:58 - you're not seeing this happen really
31:59 - really fast is because is because I'm
32:05 - doing it once per frame and P 5 only
32:07 - runs like 30 frames or 60 frames per
32:09 - second but I could now really really
32:11 - couple things I want to check what I
32:12 - want to take this console log out one
32:14 - thing I'm just curious but if I take out
32:16 - this break yeah then we could find
32:18 - multiple points per frame so if I'm
32:20 - checking for 30 points around a point
32:22 - this is that I'm fighting multiple
32:24 - points per frame doesn't really make a
32:26 - difference I kind of like the animation
32:28 - better when I am enforcing just one
32:31 - point per frame and look at that
32:34 - starting from the bottom now but
32:36 - something
32:37 - and I want to add here just to show you
32:39 - is I'm going to change this to a while
32:40 - loop and look at this so there is an
32:47 - issue with the code which is that um
32:51 - what happens when it's not finishing
32:53 - correctly so I need to figure this out
32:57 - right so tailor s is asking this
33:00 - question how quick is if it runs
33:01 - entirely one frame and this is not
33:03 - working right now and I even crashed the
33:06 - so so let's think about this why is this
33:10 - not working so I think there's an issue
33:11 - this is an issue that I'm thinking of
33:14 - when I pick I know what the problem is
33:18 - what if I pick this sample point and
33:21 - there already exists a point in that
33:24 - spot in the grid I could be stuck in an
33:26 - infinite loop because I could
33:28 - continuously just keep picking a new
33:29 - sample point if the grid is ever full I
33:32 - don't want to pick points anymore so I
33:34 - think that I should add a check right if
33:37 - grid column plus Rho times the columns
33:42 - right if it exists then then I don't
33:51 - write if something exists there then
33:57 - also skip everything I hold on is like
34:02 - I'm thinking okay I'm back and to debug
34:06 - this um which I just did and you can
34:08 - find the live stream version of this if
34:10 - you want to see that about like 15
34:11 - minutes of be figuring this out I've
34:13 - changed the frame rate to one and I'm
34:15 - looking now and seeing like whoa why is
34:18 - it generating all of these positions
34:20 - that are like way off screen like
34:22 - negative 16 and negative 68 those aren't
34:24 - valid points in my space and I forget I
34:27 - always forget that a JavaScript array is
34:29 - this dynamic thing so it has no problem
34:32 - just saying like oh okay
34:34 - you're generating points off the screen
34:35 - I'm just going to keep adding them as
34:37 - opposed to giving me something like an
34:38 - index out of bounds exception like oh
34:40 - you generated a point that's not part of
34:41 - your original grid so I need to protect
34:43 - against that in some way and the way
34:45 - that I think I could do that right here
34:48 - is in the same way that
34:50 - I am checking to make sure that this is
34:54 - not that this is a spot that's not
34:58 - already filled what I can also check is
35:02 - that column I want to make sure that
35:05 - column is less than columns and I only
35:08 - can go forward if the column is actually
35:10 - on the screen and row is less than the
35:13 - total rows and it is a spot that is
35:16 - empty so that if I add that in we should
35:18 - be able to watch this now and if I run
35:21 - this I shouldn't see any points being
35:23 - generated off screen so let's look and
35:28 - see if this is working on going to
35:29 - console.log the length of the active
35:31 - array and I'm going to get rid of
35:33 - console logging where that point is and
35:36 - I'm going to put the framerate back and
35:41 - I'm going to run it again and we should
35:43 - see obviously I only checked not
35:51 - obviously because apparently not
35:52 - obviously to me I only checked it was
35:54 - off the right-hand side or the bottom so
35:56 - I need to also check if it's greater
35:58 - than zero or if it is or if it's greater
36:02 - than and actually zero is perfectly
36:04 - valid so greater than negative one I can
36:06 - say greater than or equal to zero all of
36:08 - these as well this is a very awkward if
36:10 - statement so maybe I can figure out a
36:11 - better way to write that at some point
36:12 - and now you can see there we go active
36:15 - got down to zero and you can see how it
36:17 - fills up rather quickly so let's go back
36:18 - now and I'm going to comment this out
36:21 - I'm going to make the screen again 400
36:25 - by 400 and I am going to give myself
36:30 - some more space to see this in I'm going
36:33 - to make our back down to like 10 and I'm
36:36 - going to run it and you can see now here
36:38 - it is filling the entire window now
36:40 - let's just see if I actually put in a
36:42 - while loop here in draw and I can also
36:47 - say no loop so it only does it once and
36:49 - you can see boom each time i refresh it
36:55 - you can see I get a completely different
36:56 - distribution very very fast and I could
36:59 - make this even higher resolution I'm
37:00 - gonna get this image very very fast I do
37:02 - kind of like watching it grow
37:04 - so let's see if we can make some
37:05 - something a little prettier out of this
37:08 - so one as we see the active points and
37:11 - the non active points which is kind of
37:13 - interesting to see one thing that I
37:16 - might be curious to do is change that
37:17 - art of like four and change the stroke
37:20 - way to one and then also I think what
37:22 - could be interesting is let's actually
37:24 - have it pick more than one point per
37:25 - frame so I'm going to I'm going to say
37:28 - for var total equals zero total is less
37:31 - than five total plus plus so this I'm
37:35 - just going to do this whole thing five
37:38 - times per frame I don't want to draw
37:42 - everything five times per frame and we
37:44 - can see now you can see it growing kind
37:47 - of faster look at this I have a stroke
37:48 - way for somewhere else and you can see
37:56 - look at this kind of Spacey thing
37:58 - growing I think it's even actually kind
38:01 - of beautiful let's make this I mean you
38:04 - can now stop watching this video and go
38:05 - and grab my code and play around with
38:07 - this but I could do like 25 at a time
38:09 - it's kind of nice to watch it grow you
38:12 - know I could even make that are like two
38:14 - and you can see look at this kind of
38:16 - amazing what I'm getting the good kind
38:20 - of pattern and then I could also think
38:21 - about what if as I'm drawing these
38:25 - points I did something like I said
38:28 - colormode HSB and I use the color to be
38:35 - so this is just the active let's get rid
38:38 - of the active points for a second what
38:39 - if I said the color is I module is 360
38:45 - 255 a 100 100 I think are the defaults
38:49 - so you can see something interesting
38:51 - happening here and maybe I should say
38:54 - something like I divided by 100 you can
38:59 - see I kind of am getting this rainbow
39:01 - pattern out of the growth of points so
39:07 - that's interesting this is not what I
39:09 - was expecting I know because I'm doing
39:14 - it based on where they are in the grid
39:15 - not their order of when they were added
39:18 - so you know what I would need to do Oh -
39:24 - people are making great suggestions in
39:26 - the chat which I would like to this
39:28 - video needs to be over soon so this by
39:30 - the way is just giving you you're just
39:32 - seeing the stripes because it's just
39:33 - drawing them according to the grid
39:35 - pattern but what I want to actually do
39:37 - is have their order so let's have
39:38 - another array sure there's much I'm
39:41 - going to call it ordered and every time
39:44 - I add a sample to the grid a valid
39:47 - sample I'm going to say ordered dot push
39:50 - sample so I'm just going to make a
39:52 - separate array that just has them in
39:54 - order and then actually what I would
39:56 - like to do is draw them based on the
40:00 - order and whoops and I need to do this
40:03 - as well order ordered I called it
40:08 - ordered I think right so if I add this
40:11 - now we can see and I don't need that
40:14 - divided by 100 anymore you can see now
40:19 - their color is according to when they
40:21 - were created and this is a bit too you
40:23 - know too extreme and you know it might
40:25 - be nice by the way it's just that my
40:27 - stroke weight Br because then you can
40:31 - see there we go and let's you know it
40:33 - just so I can see this more consistently
40:35 - let's add always start the point not
40:38 - random but actually have the first point
40:41 - just be in the middle and there we go
40:48 - okay so now we have fast animated Wasel
40:53 - disk pointing evenly distributed and one
40:57 - of the suggestions and really actually
40:59 - unfortunately the way that I've written
41:00 - this because of the way that this should
41:02 - really be divided by 2 or x 0.5 there we
41:08 - go so that that way they won't be
41:09 - overlapping so you can see this is kind
41:11 - of an interesting algorithm for seizing
41:13 - these points um I um somebody in the
41:16 - chat yes I am addicted to HSB you know
41:19 - I'm going with the rainbow theme if
41:20 - somebody I should really think of a
41:23 - different way of doing it but it's my
41:24 - theme so if somebody on what somebody
41:27 - suggested and this is
41:28 - an interesting thing to think about how
41:29 - could you start with larger points and
41:32 - then slowly over time have smaller
41:34 - points and have that distance threshold
41:36 - be something that's variable and that
41:38 - grid be something that's variable that's
41:39 - kind of probably quite a complex program
41:41 - problem which I would like to think
41:42 - about and do future videos on ok so
41:45 - thanks for watching this video about
41:48 - possible distribution of points in a two
41:50 - dimensional plane see if you can expand
41:52 - this into three dimensions see if you
41:54 - can change the size of these find a
41:56 - different way to color them use this as
41:58 - a way of seating another type of system
42:01 - and what kind what ever creative
42:03 - possibilities you build out of this
42:05 - build from the code that you'll find in
42:07 - this video's description and keep me
42:09 - posted and share on Twitter or wherever
42:11 - you can share it and I'm excited to see
42:13 - what you make ok goodbye