00:00 - [Music]
00:02 - hello happy bride hey this is actually
00:07 - the second livestream today but this is
00:09 - the official huh I don't know the answer
00:14 - to that question sorry my computer is
00:16 - beeping at me ah okay
00:18 - welcome everything is going wrong first
00:21 - of all hello how are you I'm out of
00:25 - sorts even more than I usually a.m.
00:28 - I had a wonderful trip this week I was
00:30 - in Zurich Switzerland which I I'd been
00:33 - to before but not in many years and I
00:35 - had a wonderful time and then there was
00:38 - this snowstorm in New York now I keep
00:40 - thinking every week is gonna be the week
00:43 - that I finally take away the snowy is
00:46 - this the snowy one yeah
00:47 - the snowy wintry themed coating trade
00:51 - background wallpaper but no there was
00:55 - like all the snow and my flight was
00:57 - canceled then I could got another fly
00:59 - then that was cancelled then I had had
01:01 - to change this and I ended up actually
01:02 - flying through a place I had never been
01:04 - before Iceland I was in Reykjavik for
01:08 - approximately one hour in ten minutes I
01:10 - did get a little picture out the window
01:12 - of the airport I night now I feel like I
01:13 - really got to go back to Iceland do I
01:15 - have any viewers from Iceland seemed I
01:17 - was listening to everybody on the plane
01:18 - talk about their vacations and I was
01:21 - only there in the airport so oops I'm in
01:24 - the wrong screen here hopefully
01:30 - everything is working fine so I'm
01:34 - operating at 50% and since I actually my
01:41 - brain capacity is that a normal day is
01:44 - really just like 50% of the average it's
01:46 - only 5% but I'm gonna I'm gonna make do
01:50 - I'm gonna I'm gonna put my energy into
01:52 - this and I'm gonna make do so what I
01:53 - thought I would do I got back late last
01:55 - night and I just didn't have the time to
01:58 - kind of get myself settled into the mode
02:01 - where I felt like I wanted to continue
02:03 - the trajectory of neuro evolution that's
02:07 - weird so I think what I would like to do
02:12 - is tack
02:14 - a topic I am sure oh there's a new print
02:21 - oh there's a new printer on my network
02:26 - what could it be
02:27 - what network am I on why is there a new
02:30 - printer well that seems suspicious to me
02:33 - let's turn off the Wi-Fi here okay cuz I
02:36 - really just want to be on the ethernet
02:37 - network so I'm going to this repository
02:40 - rainbow topics which I think I should
02:43 - probably change to like train stations
02:45 - or something it's still so I've sold
02:48 - historically named a lot of these with
02:50 - the word rainbow and I want to look up
02:52 - quadtree it don't worry I will explain
02:53 - what a quadtree is and it is not an
02:55 - octree or a tri tree I don't know what
03:01 - other kinds of trees there are look at
03:02 - this coding challenge quad tree spatial
03:05 - distribution coding challenge quad tree
03:08 - emerges quad tree collision detection
03:10 - octree oh my capacity is definitely not
03:18 - eight times today alright so so let's
03:24 - let's let's look at this so I'm just
03:26 - curious let me just click on these three
03:28 - let's do some github maintenance here at
03:31 - the beginning of the coding train for
03:34 - optimizing 3d alright octree is what you
03:36 - would use for 3d right cuz quad tree for
03:39 - 2d ok so going to attempt this today
03:50 - closing in lieu of so what was the first
03:52 - suggestion I like to usually keep the
03:54 - oldest one which was August 5th 2016 so
03:59 - August this is a nice one August 5th so
04:03 - this one ok all right let's thumbs up
04:06 - this whoops no I already thumbs up it
04:08 - this is 144 going to attempt this today
04:12 - closing in Liu is that the right thing
04:15 - to say
04:15 - in lieu of 144 thank you
04:23 - it's mighty all right that's how I feel
04:26 - like woohoo let's copy-paste this and
04:32 - gonna write the same exact message here
04:34 - and there we go so now I've got quadtree
04:40 - collision detection we're gonna go up to
04:42 - quadtree Wikipedia oh well whoo I like
04:49 - this image though so this is what we're
04:51 - gonna make this is a really nice image
04:52 - lovely image all right hexa Decca trees
04:58 - perhaps I'm just looking at the chat for
05:03 - a second I have never been I don't think
05:10 - I've ever been to Sweden there are so
05:12 - many places that I have never been to
05:13 - that I would like to go someday the
05:16 - coding train World Tour will happen but
05:18 - now I don't have a budget for that but
05:21 - we'll see we will see if we can work
05:22 - that out
05:25 - okay so quadtree know okay before I get
05:28 - to quadtrees let's do some housekeeping
05:30 - first I I'm gonna go to the Twitter
05:35 - account of cat small cat did a yeah I
05:43 - did a guest tutorial about the fazer j/s
05:47 - library this afternoon
05:51 - it is linked from her twitter at cat
05:53 - small this youtube link right here it is
05:55 - an unlisted video because I haven't
05:56 - cleaned it up and figured out how do
05:58 - what will done that sort of like
06:00 - LastPass over it but this link will work
06:02 - so if I click on this here this video
06:05 - should start it has me in it but
06:07 - eventually it has cat in it oh look the
06:10 - coding train is live now let's go check
06:13 - that out
06:13 - Oh live now oh all right sir I would
06:20 - love this recursive thing that happens
06:22 - we're now it's going to infinitely do
06:26 - this over and over again all right I
06:27 - have to stop that so I encourage you to
06:29 - check this out this was real a this was
06:32 - wonderful for a couple reasons number
06:34 - one is cat isn't
06:36 - amazing she is a super awesome presenter
06:38 - she gives a lot of talks at conferences
06:40 - she makes a lot of games so you should
06:42 - go and learn about her work if you don't
06:44 - know about her work and she was
06:46 - incredibly well prepared which is
06:48 - letting you know that I am not good at
06:49 - doing for my videos so and there's a
06:52 - thoughtful example there there's links
06:53 - to it there's links to code pen so I
06:55 - really encourage you to check that out
06:56 - oh maybe it's not unlisted great no
06:59 - reason for it to be unlisted it's listed
07:02 - wonderful so I want to mention that now
07:12 - so I want to mention that number to
07:15 - housekeeping wise I am here today I will
07:18 - be back again next Friday I have some
07:20 - exciting plan that I will be continuing
07:22 - my series on nerve neuro evolution and
07:26 - eventually we'll get this combination of
07:30 - genetic algorithms and neural networks
07:31 - all embedded inside this little flappy
07:35 - bird which will learn how to play this
07:37 - game and and and and wonderful things
07:40 - will happen I hope senses are not
07:43 - getting put together I think I need to
07:44 - work out something that's like just like
07:45 - a coding problem and I think things will
07:47 - start to click into my brain it's so
07:50 - warm in here again hmm all right so
07:53 - that's my housekeeping stuff I don't
07:55 - have any housekeeping stuff let's just
07:57 - get started I don't have a lot of time
07:59 - today to go to sleep Oh a Rodrigo says
08:06 - how do I tell him that he forgot to
08:08 - close a suggestion on github well today
08:12 - is your lucky day I happen to just peek
08:14 - at the chat that very moment so let's
08:18 - take a look and let's look for quadtree
08:21 - again I can't spell quadtree and this is
08:27 - the one that ah thank you to me I am so
08:31 - me for taking care of that for me
08:33 - oh the internet is amazing would love to
08:38 - come back to Finland who I have not been
08:40 - to Finland either I have been to Norway
08:45 - let me tell you about a place that I've
08:47 - been to in Norway
08:49 - mmm that I absolutely love it is an
08:52 - island called rune de and I apologize if
08:55 - I'm not pronouncing that correctly rune
08:57 - de Norway it is near the city of Ã¥lesund
09:02 - oh let's look at this and it is a little
09:07 - island you get to it by driving over a
09:09 - bridge there it is
09:11 - I believe it's known as bird island I
09:13 - don't know if rune de actually
09:15 - translates directly to bird Island but I
09:18 - have so many wonderful pictures and
09:22 - there's a what's that there's the rune
09:26 - de bird there's like a science center
09:29 - there I don't know what to call it bird
09:32 - something-or-other
09:34 - Environmental Center yes the rune de
09:36 - Environmental Center there's a little
09:38 - this is a nice panorama picture anyway
09:41 - amazing hiking story right now I there's
09:47 - a funny story not so funny not so funny
09:49 - oh we did the first time I was there was
09:51 - with my family we did a nice long hike
09:53 - took about a half an hour up to this top
09:55 - of this hill and got this beautiful view
09:57 - of all these birds went back down ask
09:59 - somebody Oh how's the hike to the
10:01 - lighthouse is it it's a little bit
10:04 - longer than that a little bit harder but
10:05 - you'll be fine the house was like hours
10:09 - and hours and hours and very steep as
10:11 - with small children at the time was we
10:14 - got there was like got there after hours
10:15 - hours of hiking and the lighthouse the
10:18 - only way to get there is by hiking and
10:20 - the only way to get back is by hiking
10:22 - but I did ask the proprietor of the
10:24 - lighthouse is there a boat it could take
10:27 - us back she laughed at me in a very
10:30 - friendly wonderful warm and welcoming
10:32 - way I highly recommend this wonderful
10:35 - little spot I hope to go back there
10:36 - again I'm kind of into the a birder into
10:39 - birding birding Bert Bert Bert
10:41 - ornithology is that the right term
10:44 - anyway I'm way off topic now can I get
10:48 - like a satellite view of this oh yeah
10:52 - yeah here it is oh look at this
10:55 - so this this kind of is where the road
10:57 - is there's a campground where's the
10:59 - lighthouse that we hike to is that it
11:02 - here
11:03 - this is the lighthouse here does that
11:05 - look like a lighthouse do you know
11:06 - there's like roads there so wherever we
11:08 - went to the lighthouse there were no
11:09 - roads I think I need some 3d going on
11:12 - here okay looks like the lighthouse was
11:15 - like out over here or something okay
11:16 - you're not interested in this oh I'll do
11:18 - this on my own time I heard a camera
11:27 - grow all right so it's making this
11:30 - anything in this livestream I don't know
11:31 - I'm procrastinating remember this
11:36 - afternoon when there was like a
11:37 - thoughtful prepared presenter let's come
11:42 - over here let's let me talk a little bit
11:44 - about quadtrees and while I erase the
11:51 - whiteboard so something I've actually
11:57 - been wanting to do this for a very long
11:59 - time and I'm embarrassed to admit well I
12:02 - shouldn't no one should ever be
12:03 - embarrassed about anything about coding
12:06 - and learning to code that I actually
12:08 - have never implemented a quadtree before
12:10 - I know what it is and I did actually
12:16 - write some code for one on the airplane
12:18 - so I what I when I say I haven't never
12:21 - implemented one I have hadn't until
12:23 - yesterday when I was on the airplane and
12:26 - I thought oh let me give this a try
12:27 - because this is what I'm gonna do
12:28 - without internet there's something very
12:33 - loud going on in the hallway you would
12:34 - think that noise was me watching the
12:36 - whiteboard but it was not but one of the
12:38 - things and I I don't want to get too far
12:40 - into this because I want to include this
12:42 - in the sort of edited portion of the
12:44 - video but one of the things that's a
12:47 - common thread in many of my tutorials
12:49 - and videos is a particle system that
12:53 - could be a system of like flocking Birds
12:57 - it could just be particles making
12:59 - fireworks or particles making a
13:02 - waterfall
13:02 - it could be particles that all have
13:05 - magnetic attraction to each other could
13:07 - be particles that are all bouncing off
13:09 - each other there's so many kinds of
13:11 - collections of things collections of
13:14 - particles and if
13:16 - I ever want to have every particle check
13:19 - every other particles location this is
13:23 - something that is very expensive
13:26 - algorithm to do and in fact it's an
13:29 - exponential algorithm because if I have
13:31 - ten ten elements and each one needs to
13:34 - check its location relative to the other
13:36 - ten that's 100 checks if I have 100
13:40 - that's 10,000 checks if I have 1,000
13:43 - that's 1 million checks so while the
13:45 - amount of particles is going up by 10
13:47 - the amount of checks is going up by 10
13:50 - squared I think that's right so so
13:59 - anyway I'm getting kind of aid to the X
14:01 - 2 far to the explanation so I'm gonna
14:03 - I'm gonna double back and start this
14:05 - over in a second but a quadtree is a
14:07 - solution i just want to mention that I
14:09 - do have another a the thing that I
14:12 - always had done before which is not as
14:14 - sophisticated and if I go to nature of
14:17 - code examples why did I pick this
14:24 - algorithm for today and if I go to
14:27 - agents and I think if I go into yeah
14:32 - bin lattice spacial subdivision do I
14:38 - have these examples on this computer
14:48 - I have the p5.js ones was know if they
14:50 - have anyway I have this example which
14:52 - you could take a look at which
14:53 - implements a particular algorithm that
14:56 - divides the canvas the window the
15:00 - two-dimensional area into a grid and
15:03 - each element registers where it is on
15:05 - the grid and so what I can do is instead
15:09 - of having every element check every
15:11 - other element each element can check the
15:14 - other elements that are registered in
15:16 - the same area that it's registered in
15:18 - and this reduces the number of checks
15:19 - significantly but it has a big problem
15:22 - which is that it treats the entire space
15:24 - equally so it doesn't matter what the
15:28 - actual distribution of the particles are
15:30 - you know each cell of that grid is the
15:33 - same size what a quad tree does is it's
15:36 - a way of creating this grid of
15:39 - sectioning off parts of the space but
15:42 - get providing more and more detail where
15:44 - there are more and more particles to
15:46 - allow for the retrieval of particles
15:49 - within a certain area in a more detailed
15:51 - and efficient way so this is what I am
15:54 - going to attempt to implement so what do
15:56 - I need to implement this I need a brain
16:00 - that is working better than mine
16:03 - currently is I need some p5 stuff
16:15 - I also AM of a mind to turn I would like
16:20 - to you know I really want to make a
16:22 - tutorial about building a processing
16:24 - library and I was thinking actually I'm
16:26 - gonna do this in JavaScript today
16:27 - because I think it's actually this is
16:28 - but easier to implement in JavaScript
16:30 - just because javascript is so flexible
16:32 - in terms of what you can do with arrays
16:35 - but I was thinking that maybe what I
16:40 - might do in the future is make a
16:46 - JavaScript libraries for quad trees but
16:48 - make a quadtree library that you could
16:50 - basically just pass it a whole bunch of
16:52 - objects as those of those objects all
16:54 - had an XY point associated with them you
16:56 - could then also pass it like I'll here's
16:59 - an area give me the things that are in
17:00 - that area so I'm thinking about turning
17:03 - this into a library at some point I am
17:08 - going to just to this get rid of draw
17:13 - I'm going to do this ridiculous thing
17:17 - that I do because I can't help myself I
17:19 - don't need I don't think I need Dom or
17:21 - sound and then I want to go to the
17:25 - browser and localhost I guess I can take
17:33 - out these links right now from pi day
17:42 - and oh I should show some of one thing I
17:47 - could possibly do is just really quickly
17:48 - go to twitter.com hashtag hashtag hi
17:52 - train these are some things look at
17:56 - these they're some things people made
17:57 - for these are animated the first few
18:00 - digits of pi using processing this is a
18:03 - nice one
18:04 - they've got three more digits and
18:05 - modified them by shape another one
18:08 - here's another pi train visualization so
18:10 - these are some this is from something
18:13 - else pi train still so anyway i just
18:16 - wanted to show that some people were
18:17 - making things it's nobody really seeing
18:21 - anything in the slack group I guess
18:23 - that's the case all right so
18:28 - quadtree let me close this I've got the
18:32 - Wikipedia page up so the Wikipedia page
18:40 - actually has pseudo code for this
18:42 - algorithm and it's here it has like
18:46 - objects store in XY an object to store a
18:49 - rectangular area and then the sort of
18:52 - quadtree class Khatri object quad tree
18:55 - object that has a capacity so I couldn't
18:57 - I could maybe copy/paste and sort of
18:59 - write it from the pseudo code I think
19:01 - though I'm going to kind of program it
19:04 - from without looking at the pseudo code
19:07 - and I'll reference it if I need to
19:08 - alright okay just give me a second here
19:35 - all right
19:38 - I'm ready now officially ready brain
19:49 - power activate oh cool life headed that
20:02 - was a very long whistle coating train
20:05 - let's not have that let's let's start
20:07 - over here did my mic is my mic on yes it
20:18 - is okay really yes just like something
20:26 - that's weird is going on here no I guess
20:28 - just nobody's posting anything okay
20:31 - hello hello welcome to a coding
20:45 - challenge in this coding challenge I am
20:47 - going to attempt to make a quadtree now
20:51 - you might be asking yourself and it's a
20:53 - perfectly appropriate question what is
20:56 - the quadtree
20:56 - what is a quadtree and why do I care
20:59 - well let me talk about that over here so
21:03 - something that you might have noticed in
21:05 - many many many of my videos and various
21:07 - things that I've made is look at this
21:09 - beautiful marker how it really made a
21:12 - nice rectangle there that I create a lot
21:14 - of systems that have a lot of what you
21:16 - might call particles in them or little
21:20 - agents that flock around the screen or
21:22 - that bounce around or bump into each
21:24 - other have magnetic forces and one of
21:26 - the elements of doing it one of the
21:29 - elements of these kinds of scenarios is
21:31 - that for every particle for every dot
21:34 - for everything that's in my two
21:36 - dimensional space I have to check its
21:38 - location relative to all the other ones
21:40 - so this one I need to check relative to
21:42 - all the other ones this one I need to
21:43 - check relative to all the other ones and
21:45 - that is a lot of checks for example if
21:48 - there are ten if I have ten particles
21:52 - and I want to know the distance between
21:54 - each particle and every other particle I
21:56 - need to perform 10 times 10 checks which
22:00 - is 100 now of course there are like
22:02 - little optimizations there that I can
22:03 - reduce the number a little bit but but
22:05 - at its core this is the idea so this is
22:07 - what's known as an N squared algorithm
22:11 - because I have n elements and I need to
22:15 - do something N squared amount of times
22:18 - which means if there were a hundred then
22:21 - suddenly I need to do 10,000 checks and
22:24 - if there were a thousand I suddenly need
22:26 - to do one what million checks the pinkie
22:33 - maybe I'm not so sure
22:34 - so you'll notice that these are going up
22:36 - by a factor of ten but these are going
22:39 - up by a factor of well not ten ten
22:43 - squared and more right because this is a
22:48 - hundred times this and this is a
22:51 - thousand times this so it's it's
22:53 - exponential so this idea here that we
22:56 - can we do better well I have an idea for
22:58 - you because I'm really thinking about
23:00 - this my idea is well okay what if I know
23:05 - I know I know I know I got this what if
23:08 - instead of like for this particular
23:10 - particle right here instead of checking
23:13 - all the particles why don't I just check
23:16 - the ones that are near it like within a
23:18 - slight range around where it is okay but
23:22 - how do I know which are the ones that
23:23 - are near it okay let me check all the
23:25 - particles and see which ones are near it
23:27 - but I'm then I am checking all the
23:28 - particles again is there a way that I
23:30 - somehow could create these sort of
23:34 - regions of particles and then ask give
23:37 - me just the particles within that range
23:39 - without having to then suddenly go
23:41 - through all the particles and in fact
23:43 - there is such a way and that one way
23:47 - there are many ways is known as a
23:48 - quadtree now the reason why it's called
23:50 - a quadtree
23:51 - is that the idea is to take a space and
23:56 - section it into four four sections quad
24:00 - and each of those sections could
24:03 - potentially be sectioned into four
24:05 - and those could be into four and the
24:09 - reason why it's a tree is that the
24:12 - sections I know if there might be about
24:14 - the cells the tiles actually include
24:17 - references to their subsections and so
24:21 - it's like a tree and there's going to be
24:22 - a recursive algorithm here so we're
24:24 - gonna start with this idea of a
24:26 - rectangle and that rectangle will store
24:29 - a reference to four rectangles and each
24:32 - of those four rectangles will store a
24:33 - reference to four rectangles but here's
24:35 - the thing
24:36 - they only are going to need to store to
24:39 - store reference to these children
24:41 - rectangles if there are a lot of
24:43 - particles in their area otherwise they
24:44 - can just keep track of their particular
24:46 - particles so the idea is that I can take
24:48 - all of these particles register them
24:50 - inside of this quad tree and then the
24:53 - quad tree is something I can query to
24:55 - say hey think about this this part of
24:58 - the window is part of the canvas just
24:59 - give me everything that's there and it's
25:01 - gonna reduce the number of checks by a
25:04 - lot I'm pretty sure I like to go look
25:07 - this up I think this is most likely
25:09 - turning this into n log n so instead of
25:13 - N squared and this is has to do with
25:15 - something called Big O notation which is
25:19 - the way of notating how expensive or how
25:22 - long an algorithm takes based on the
25:24 - number of elements that are part of that
25:25 - algorithm so an N algorithm is wonderful
25:29 - because if there's only a draw I just
25:31 - want to draw ten things that's an N
25:32 - algorithm check everything against
25:35 - everything else that's N squared and log
25:37 - N is going to reduce that number quite a
25:39 - bit let's go to the Wikipedia page for
25:40 - quadtree and see if I'm right about that
25:44 - just pause for a second I'm gonna find
25:50 - ya oh oh just log n point quadtree
25:57 - constant time is it just log n not n log
26:01 - n oh but it is n log n because a lookup
26:07 - is log n but I'm gonna do it n times
26:10 - right can somebody confirm this for me
26:13 - before I moved on yeah it's 10 times 9
26:16 - not 10 times n that's what I mean like
26:18 - we
26:18 - - check the but that that's sort of not
26:21 - relevant I mean because I mean it is
26:25 - relevance re it's a good point but I
26:27 - didn't mean to that it's a very valid
26:29 - question and a good point I just mean
26:31 - that does this really does this idea
26:33 - change very much if this is 90 and this
26:37 - is like well hundred times like 99
26:39 - thousand whatever whatever it whatever
26:41 - it is yes oh and log n ok so it's under
26:56 - there under point quadtree which is what
26:58 - we're going to do ok
27:16 - okay so this is the Wikipedia page for
27:18 - quadtree it this reminded me that I that
27:21 - are there that I didn't mention that
27:22 - there are also other kinds of trees like
27:25 - an ox tree which you might use for three
27:27 - dimensions and you could just say kay
27:29 - tree for any generic amount of sub
27:31 - sectioning but but I'm gonna really just
27:35 - implement the sort of standard quad tree
27:37 - also known I believe as a point quad
27:39 - tree and if you look here it says
27:40 - operating in o log n time so you might
27:44 - have to thought that I got this wrong
27:46 - because I said n log n but I think I'm
27:49 - actually correct here because the idea
27:51 - here is that to look up a bunch of
27:54 - particles for one for a given area that
27:57 - can happen in log n times
27:59 - but in this where I want to check every
28:01 - particle against every other particle I
28:03 - need to do the log n thing n times so
28:06 - this like let's just say let's just go
28:09 - for let's look at the 1,000 instead
28:11 - instead of 1 million this would be
28:17 - equals one thousand times log of 1,000
28:21 - which is just three thousand checks this
28:25 - is a massive improvement woohoo alright
28:36 - pause pause pause pause pause a question
28:43 - has been asked in the chat wouldn't you
28:45 - have to restructure the quadtree every
28:48 - time an object moves and in fact the
28:50 - answer to that question is absolutely
28:52 - 100% yes this quad tree is something
28:56 - that work for collision detection that
28:57 - you have to build each frame of
28:59 - animation and there is a lot of time
29:02 - that it takes to build the quad tree but
29:04 - it's totally worth it
29:06 - because if I can get this 1 million
29:07 - number down to 3,000 and just think
29:09 - about it if I had 10,000 elements how
29:11 - much you're gonna be able to reduce it
29:12 - it's worth building the quad tree ok so
29:15 - what do we need to make this quad tree
29:17 - I'm gonna do make an example using p5
29:20 - but I'm going to and let me make another
29:23 - JavaScript file them to call it quad
29:25 - tree Jas I'm gonna build the quad tree
29:29 - code
29:30 - oh let me just get rid of this message
29:32 - sorry we met - you can edit this part
29:35 - out quick click update we install a fine
29:39 - I'm just gonna relaunch Adam thank you
29:41 - very much
29:57 - shoot I forgot what I was saying do this
30:01 - again I'm going to add a new file called
30:06 - quad tree quad fail total failure try
30:15 - this again I'm going to add a new file
30:19 - I'm gonna call it quad tree J s so this
30:24 - is where so I even though I'm gonna use
30:25 - p5 for this example I'm gonna write the
30:27 - quad tree algorithm in JavaScript with
30:29 - no p5 dependencies that way it can be
30:33 - applied you know to lots of different
30:34 - scenarios with other frameworks ok so
30:36 - what do I need to build a quad tree
30:39 - well I need a few kind of core elements
30:42 - here for example I want to have a point
30:45 - class and a point class is just going to
30:48 - be something that stores and x and a y
30:50 - together and again I'm gonna be doing a
30:52 - quad tree in two dimensions I also want
30:56 - to have a rectangle class and a
30:58 - rectangle class is going to be I could
31:01 - have a point you know what I'm gonna do
31:03 - something a little goofy I'm going to
31:05 - give it an X and a y and a width and a
31:10 - height so I need these ideas I need to
31:15 - be able to make and and I couldn't use a
31:16 - p5 vector for the point class but again
31:19 - I want to build this without any p5
31:20 - dependencies so I need these data
31:22 - structures because the what I'm gonna
31:24 - the way I'm gonna make this quad tree
31:26 - work is by feeding it points I'm gonna
31:29 - say insert points into the quad tree and
31:31 - the quad tree is going to have as part
31:34 - of itself references to all these
31:37 - rectangular areas ok so now let's make a
31:43 - quad tree class so what do I need to
31:50 - make a quad tree now here's the thing I
31:53 - think about this a quad tree hoo boy you
31:56 - might go back and look at my binary tree
31:58 - video tutorial or some of my other
32:01 - videos that have to do with recursion
32:03 - because in what you might think is oh
32:06 - I'm going to have an array and the array
32:08 - is going to store
32:10 - a list of all of these sections or tiles
32:13 - or rectangles but I'm not the quadtree
32:16 - is actually a reference just to the
32:19 - large kind of parent the sort of root
32:23 - level rectangle that area and it's gonna
32:26 - have a reference to the four things the
32:28 - four subsections and those love
32:30 - references for subsection so that's a
32:32 - tree so actually a quad tree only has
32:34 - the only bit of data that I really need
32:36 - and we'll call it a boundary this stop
32:40 - boundary and that boundary is going to
32:41 - be a rectangle so for example in sketch
32:45 - KS I might say let QT be a new quad tree
32:50 - and I might say let boundary he be a new
32:56 - rectangle and you know what I think it's
32:58 - gonna make life easier if the rectangle
33:01 - is something that we think of as
33:04 - centered registered around its center
33:06 - point and those width and height values
33:08 - are actually just the distance from the
33:10 - center to the edge so not the full not
33:13 - the full length of each sides but the
33:14 - half length so I'm gonna say the
33:16 - boundary is at 200 200 well with a width
33:21 - of 200 200 that's kind of awkward but
33:23 - fine because it's 400 400 okay so I'm
33:25 - going to create this quad tree with a
33:27 - boundary console dot log Q T so this is
33:30 - like a beginning point a starting point
33:34 - so let's take a look
33:36 - rectangle is not defined because I
33:39 - forgot to reference my new JavaScript
33:41 - file here in my HTML file quad tree as a
33:47 - boundary of a rectangle it has these
33:49 - properties so so far no errors we're
33:51 - moving along now what do I need to do
33:53 - next the thing that I want to do with
33:55 - any quad tree is I want to say something
33:58 - like let me make a little loop and I'm
34:01 - going to just do it one time and I'm
34:04 - gonna say a point I'm gonna make a
34:06 - random point and a random area in the
34:12 - canvas and I want to say quad tree
34:15 - insert that point the idea is that what
34:19 - I want to do is I want to take all the
34:21 - points that are within this space and
34:22 - points might represent particles any
34:26 - type of moving agent or entity but right
34:28 - now I'm just going to build the static
34:29 - quadtree with static points I want to
34:31 - insert them into the quadri so an
34:34 - important aspect of the quadtree
34:37 - is a property known as capacity so how
34:42 - big is the quadtree when do I choose
34:45 - that I need to subdivide for example if
34:48 - I start putting particles in this
34:50 - section here oh maybe once there's 10
34:53 - particles in that section it's gotten
34:55 - too big I need to subdivide it so we can
34:58 - we could typically might actually be to
35:00 - just have that actually be one as soon
35:02 - as there's more than one particle in
35:04 - that area subdivide but let's give it
35:06 - let's pick the number four it's kind of
35:08 - an arbitrary capacity and it might make
35:10 - sense to create a quadtree with a given
35:14 - capacity so when you create it so I'm
35:16 - going to say capacity equals n so now in
35:20 - sketch I'm gonna do quadtree boundary
35:22 - comma four so this is a quadtree with
35:26 - each section each rectangle having a
35:29 - capacity of four timeout for a second oh
35:37 - yeah so I have a mistake there I think I
35:40 - want to make the font a little bigger is
35:42 - the font seems a little small I don't
35:46 - know why if I like shrunk it since the
35:48 - last time I was coding when I can move
35:50 - this over here and then this needs to be
35:54 - height thank you thank you
35:56 - a hello who points out this needs to be
35:58 - height just pausing for a second here
36:07 - okay there is a little error here this
36:09 - should say height it doesn't really
36:11 - matter here because it's a square but
36:12 - just for the sake of argument and
36:15 - timeout my oh the yeah my autoformat on
36:24 - save is turned off let me let me go back
36:29 - let me do that too
37:36 - okay okay it's back thank you thank you
37:39 - thank you I know I muted
37:41 - that's so weird why did it mute all
37:44 - right that's Oh everything's okay that
37:51 - was really weird
37:52 - okay I'm gonna wait now until you guys
37:56 - catch up to me
37:57 - because I'm not getting the
38:05 - notifications on my watch
38:07 - oh they're on no that's weird okay okay
38:11 - the mic is back on sorry about that
38:12 - everybody let's try this again okay was
38:17 - just pointed out to me that I did have a
38:19 - mistake here this should be height you
38:21 - know it is a square so width and height
38:23 - are equal but if I want to set myself up
38:25 - for success in the future let's try to
38:27 - correct that put height there okay so
38:29 - now I need to go here and I need to what
38:33 - do I need to do I need to write this
38:34 - insert function insert and what do I
38:37 - want to insert a point and Oh what I
38:41 - need to do here so oh wait a second I'm
38:45 - missing something super important
38:46 - what is the quadtree what is each tile
38:51 - need to have associated with it well we
38:54 - know it needs its boundary we now know
38:55 - it needs its capacity but also needs to
38:57 - keep track of a bunch of points that are
38:59 - part of it so what I can do here is say
39:02 - as long as the length of the point's
39:04 - array is less than the capacity then I
39:12 - can just say this dot points push push
39:20 - what the point now I'm gonna just I'm
39:24 - going to come for a second I'm sorry but
39:26 - thank you everyone in the slack group
39:29 - posted these like animated colorful
39:32 - rainbow like kitty cats and I can't look
39:37 - it can you I can't look at that anymore
39:38 - it's like in the corner of my eye it's
39:40 - making me really crazy so you'll
39:44 - understand in
39:46 - minute why I am typing these messages
39:52 - okay great all right okay we're good
39:55 - we're good we're good we're good
39:56 - I'm just thinking about this for a
39:58 - second okay so okay so I've inserted the
40:07 - point now what if the capacity is full
40:12 - well if the capacity is full then what I
40:16 - need to do is subdivide so I'm gonna
40:23 - make this into a separate function I
40:24 - think if you look at the Wikipedia page
40:26 - the algorithm that's outlined there kind
40:29 - of does the same thing so I want to make
40:31 - a function called subdivide and what
40:34 - that function does is it takes any
40:38 - rectangle object
40:41 - remember that has an X Y and a width and
40:45 - a height and sub divides it into four
40:48 - sections over there and so all I need to
40:51 - do is compute these four points and
40:54 - these four within Heights and I'm going
40:56 - to store those in variables and a way
40:59 - that you could do this right I think
41:00 - I've done this as like top left top
41:03 - right bottom right bottom left another
41:06 - thing that I've seen done is on north so
41:09 - north east is this Northwest Southwest
41:12 - southeast and so that's the sort of
41:14 - convenient way I can refer to these
41:16 - styles these subsections as Northwest
41:19 - northeast Southwest southeast so just to
41:22 - be kind of concise about the words I'm
41:25 - going to use I probably should type
41:26 - these all the way out actually so let's
41:28 - do this
41:28 - this North West equals a new quadtree so
41:35 - I need to make all of these subdivisions
41:38 - south north east north I'm sorry that
41:49 - that I'm so easily distracted by things
41:59 - okay north east south west south east
42:11 - okay so this is gonna work so each one
42:14 - of these I'm making a new quad tree for
42:17 - each one of these set subsections but
42:20 - they need to when you make a Quadra you
42:21 - need to give it a boundary so what I
42:23 - need to do is say I'm going to say let
42:26 - north let North West equal a new
42:29 - rectangle that is so North West is up
42:34 - here X plus width divided by 2y minus
42:39 - height divided by two and then with
42:41 - divided by two height divided by two so
42:45 - I'm gonna make a new rectangle that's at
42:47 - this dot X plus this dot W divided by 2
42:52 - comma this stop Y minus this dot H
42:55 - divided by two and then this w divided
42:57 - by 2 this H divided by two so that is
43:01 - the boundary for the northwest northwest
43:04 - quadrant and then I'm going to pass that
43:06 - in here and then I'm going to do the
43:09 - same thing for North East for Southwest
43:14 - and southeast oh shoot
43:25 - my mic is still working okay
43:36 - Southwest and southeast
43:38 - so now though northeast would be X minus
43:42 - and then Southwest and southeast R plus
43:48 - Southwest is X plus and the southeast is
43:51 - X - so does this make sense right plus
43:54 - minus plus minus and then minus minus
43:59 - plus plus so I think I've gotten all the
44:01 - quadrants here so I've made rectangles
44:03 - out all the quadrants and put them in
44:05 - two variables now here's the thing I
44:07 - don't always want to subdivide right I
44:10 - only want to subdivide if I haven't
44:12 - already subdivided this quadrant this
44:15 - this quadtree so I could check I think
44:19 - what I'm going to do is I'm gonna make a
44:21 - variable called divided which is false
44:23 - and then I'm going to say if not if not
44:28 - this dot divided this dot subdivide and
44:33 - then this dot divided equals true now
44:38 - what I need to do is if I'm at capacity
44:42 - I remember I'm inserting a point the
44:44 - whole thing that I'm doing here is
44:46 - inserting a point all right hold on
44:51 - timeout hold on a second the chat is
44:54 - telling eyes of east west confusion west
44:58 - east west east north north south south
45:14 - I've made a pretty big error here I've
45:17 - gone off the deep end writing way too
45:19 - much code before testing it
45:20 - there is nope this refers to this
45:23 - particular quad tree there's no this dot
45:26 - X what there is is this boundary X boy
45:29 - this is gonna make this super
45:31 - long-winded let's do this I kind of feel
45:33 - silly doing this but I think this is
45:35 - going to make our life much easier
45:37 - just in terms of being able to read the
45:39 - code so I'm gonna make this is totally
45:45 - unnecessary but just to make the code
45:47 - more readable let's make some local
45:49 - variables to this function that are kind
45:52 - of like aliases to this longer way and
45:54 - then I'm gonna start over again and I'm
45:57 - gonna say X plus W divided by 2 y minus
46:03 - W divided by 2 W divided by 2 H divided
46:06 - by 2 and this should be H and now I'm
46:10 - gonna put these all back here north east
46:14 - south west south east and this is X plus
46:22 - X minus X plus X minus y minus y minus y
46:27 - plus y plus mi right finally West and
46:36 - Easter swapped Oh also West the Easter
46:48 - SWAT boy northeast I'm gonna do it this
46:51 - way northeast northwest yeah south east
46:55 - south west right because east west if
47:03 - this is the center right east to the
47:06 - west north to the south okay everybody I
47:09 - think I've got it now oh boy so now I'm
47:12 - gonna now I need to pass in those
47:13 - boundaries north east no north east
47:21 - north west south east south west really
47:32 - bad feeling that about 15 minutes of
47:34 - this video is me just trying to figure
47:36 - out north south east west the good thing
47:39 - is that parts done I think we're good
47:41 - now
47:43 - I'm just pause for a second to just
47:45 - check this code one more time
47:56 - No okay so in the chat the suggestion is
48:00 - being made to top left top right the
48:04 - suggestion is saying shouldn't it be W
48:05 - divided by four and that's actually not
48:07 - the case because I am and I am thinking
48:12 - of W and H as not being the full width
48:16 - but actually being the half width
48:18 - already that's good it just makes life
48:20 - easier to sort of sort all this out so
48:24 - I'm actually just moving over half of W
48:30 - okay
48:34 - yeah wreck mode set but I'm not drawing
48:36 - anything yet so I'll need wreck mode
48:38 - Center if I start to draw some stuff
48:39 - okay okay so I'm feeling pretty good
48:46 - about this code there still could be an
48:48 - error there but I'll find it later if
48:49 - there is so remember where we were we
48:52 - were checking if it hasn't been divided
48:55 - subdivide it and now what's the whole
48:57 - point remember the whole point of what
48:58 - I'm doing I was just saying this before
49:00 - I found all those errors are the chat
49:01 - found all those errors that I'm trying
49:03 - to insert to point so if I'm at capacity
49:06 - now I just need to insert the point in
49:08 - my subsections so I can actually say
49:10 - remember these subsections are all
49:13 - quadtrees so I can recursively call the
49:16 - insert function on those so I could say
49:19 - this dot north-east dot insert that
49:23 - point so let me do it to each one of
49:25 - these north west south east south west
49:36 - so think about this get rid of some of
49:39 - this extra whitespace the idea here is
49:42 - that okay if I have room I'm going to
49:46 - take the point and I'm done if I don't
49:50 - have room then I need to check do I have
49:53 - some children quadtrees if not if I
49:56 - don't I'll make them and then I'll just
49:58 - say add I'll just sort of say hey pass
50:01 - the buck here you take that point all
50:03 - four of you and all four of those will
50:05 - say do I have room but here's the thing
50:08 - I'm missing something
50:10 - important here should I really be taking
50:13 - that point night kind of made sense at
50:14 - the beginning that I just said was why
50:16 - vroom take the point but really I should
50:18 - be checking is this point something
50:22 - that's within my boundary that's the
50:24 - whole point of this because now that I'm
50:25 - gonna say hey all four of you only one
50:27 - of those should really actually take the
50:29 - point right those so what I really need
50:31 - to do before I even insert the point at
50:33 - all is I need to say something like if
50:36 - if this dot boundary contains the point
50:42 - and better yet something like if this
50:45 - stop boundary does not contain the point
50:47 - then just get out of here like I don't
50:50 - want to do anything if I'm ignoring I
50:53 - don't contain the point stop don't go
50:56 - any forward I'm the wrong path I'm the
50:58 - wrong section some other sections gonna
51:00 - take care of it this dot boundary dot
51:02 - contains well that means in my rectangle
51:05 - function
51:06 - I need a contains function that returns
51:10 - true or false based on some point so
51:14 - what I can say is I can say hey is or I
51:18 - can actually just return point dot X and
51:21 - this is going to be really long point
51:23 - dot X if it has to be within all of the
51:25 - bounds so it's got to be greater than
51:27 - this dot X minus this dot W and and I
51:34 - can put these I think on different lines
51:35 - just to point dot X is point dot X is
51:39 - less than this dot X plus this dot W and
51:43 - point dot Y is less than is greater than
51:47 - this taut y plus way this is a really
51:50 - exciting thing in programming and point
51:52 - dot y is less than this dot y plus h oh
51:56 - my goodness minus and plus right
51:59 - remember contain contains contains this
52:06 - is a function that checks if this
52:13 - particular point is within the boundary
52:15 - so is the point is a particular point
52:19 - within the center - the width
52:24 - and the center plus the width the center
52:26 - minus the height and the center plus the
52:28 - height and I'm gonna stare at this code
52:30 - for a second to see if it's right
52:46 - nobody's written anything that it's
52:48 - wrong this is all gonna get edited out
52:50 - so I've frozen myself at this position
52:55 - okay I feel like that's pretty good so
52:58 - why not let's keep going here so if it's
53:03 - not in here
53:04 - go away otherwise if I'm not a capacity
53:08 - add the point if I'm not divided
53:11 - subdivide and then just try to insert to
53:14 - all my all these children points now I
53:17 - feel like I need insert to kind of like
53:21 - return true or false but I guess because
53:24 - at some point it's gonna be done but I
53:27 - think this is actually pretty good
53:31 - [Music]
53:40 - looking at the chat contains as a
53:44 - reserved word notes or it perhaps
53:48 - missing the point equals boundaries
53:49 - stuff break up the existing points well
53:57 - I shouldn't be reading the chat so much
53:58 - because it's distracting me from my flow
53:59 - I should just keep going and make all my
54:01 - mistakes I'll come back to them later
54:10 - as someone earlier mentioned sub-divided
54:12 - needs to handle existing points and can
54:15 - set subdivided itself oh yeah yeah
54:19 - that's a good point yeah it could handle
54:23 - the points but I'm gonna I'm I'm gonna
54:27 - keep it the way I'm doing it but that's
54:28 - a good point okay I had a nice
54:31 - suggestion from the chat which that
54:33 - maybe it makes sense to in the subdivide
54:35 - function actually set this dot divided
54:38 - equal to true okay so let's let's think
54:41 - about this how am i doing here what is
54:43 - this gonna do let's let's actually try
54:45 - running the code all right so I have a
54:50 - boundary its capacity is four it has a
54:52 - points array and it got a point that's
54:54 - good that's great let's add four points
55:03 - all right look at this I've got a
55:06 - boundary I've got a capacity divided is
55:09 - false and I've got four points great so
55:12 - now if I add five points it's definitely
55:15 - gonna have to subdivide let's see how
55:17 - that works let's add five whoops let's
55:19 - add five points now I could have changed
55:22 - the capacity of the smaller oh we've got
55:24 - a problem so look at this when I when I
55:31 - set in the constructor this property n
55:35 - as the capacity but when I make these
55:38 - new quadtrees I'm not passing that in so
55:42 - I could like do something like this but
55:45 - I think let's just I made this a little
55:50 - extra complicated but let's pass in also
55:53 - the capacity so that capacity needs to
55:56 - continue to be there now let's try with
56:00 - five points all right look at this it's
56:05 - got four points where's that fifth point
56:08 - where's that fifth point it's not in the
56:12 - North West East it's not in the North
56:13 - West it's not in the southeast it's in
56:15 - the southwest because does this seem
56:18 - right the point is 104 354 that sounds
56:23 - like
56:24 - West yes
56:27 - Weston's this way South it's this way so
56:30 - I think this is working I think we're
56:32 - kind of getting it subdivided correctly
56:34 - let's let's try 50 points no errors I've
56:41 - got a quadtree with a capacity of 4 it's
56:43 - got four points North East has a
56:45 - capacity of four it's divided it's got
56:47 - four points it's got a bunch of
56:49 - subsections which of which have this one
56:52 - just has one point but maybe this one
56:54 - has no points so I think it's is working
56:58 - but here's the thing is this working
57:00 - looking in the console is only going to
57:04 - get me so far I think what would help me
57:07 - now to see if this is working really is
57:09 - to visualize it so I'm gonna break with
57:12 - what I said at the beginning whoops
57:14 - which is trying to purely have this eye
57:18 - I think what I want to do I mean I kind
57:21 - of want the quadtree thing to be
57:23 - independent of p5 but I'm going to give
57:25 - that up just for a second because I want
57:26 - to write a function called quadtree show
57:28 - and what I'm gonna do here is I am going
57:32 - to write out a function called show and
57:35 - what is this going to do I'm gonna say
57:38 - stroke 255 or let's a stroke 255 no fill
57:43 - and I'm gonna draw a rectangle at this
57:46 - dot boundary dot X and this stop
57:50 - boundary dot Y and this dot W times 2 I
57:57 - need to say times 2 because p5 expects
57:59 - the full with this dot H times 2 so I'm
58:03 - drawing the rectangle for the boundary
58:05 - and then sorry I'm thinking about this
58:15 - for a second and then all right then if
58:18 - then I want to recursively draw any of
58:20 - its children boundaries so if this is
58:22 - divided then I can say this dot North
58:26 - West Show so I want to recursively North
58:32 - East
58:35 - southeast Southwest doesn't really
58:38 - matter what order but just to be
58:39 - consistent northeast northwest southeast
58:41 - Southwest let's take a look a rectangle
58:48 - is not defined quadtree jsf wrecked in
58:53 - p5 w is not defined line 73 oops this
59:00 - should be two and then let's see here
59:06 - background zero alright what happened
59:14 - here oh I'm running out of battery
59:18 - timeout where is the power
59:25 - that's one power here's another power
59:31 - don't worry
59:44 - all right what mistake have I made
59:46 - thankfully the chat is here to tell me
59:50 - that this is this dot boundary right I'm
59:55 - always confusing and forgetting that the
59:56 - X Y width height properties are in the
59:59 - boundary object not part of the quadtree
60:01 - object itself so we can say this
60:03 - boundary H so let's see what happens now
60:07 - there we go Oh everything looks like
60:10 - it's right but off kilter and this is an
60:13 - easy one I forgot to say rect mode
60:15 - Center because I want to draw the
60:17 - rectangles based on the center there we
60:19 - go this looks good now let's actually
60:21 - draw the points point let's say for for
60:29 - let P of points this dot points and
60:34 - let's just say point O P sorry point P X
60:40 - P Y so this isn't very many points and
60:46 - it's very hard to see those so let's say
60:48 - stroke wait for and Stroke wait one up
60:56 - here stroke wait one and let's go to
61:01 - sketch J s and let's make 500 points and
61:05 - there we go this kind of makes sense
61:07 - right you can see for whatever reason
61:09 - there are not as many points here so it
61:12 - didn't need to subdivide but it did so
61:14 - divided here we never got anywhere to
61:15 - subdivide beyond just this size right is
61:19 - there any so what's kind of unfortunate
61:21 - about this is why not because I'm
61:23 - calling things randomly but kind of
61:25 - setting the points randomly the
61:27 - subdivisions are just like perfect it's
61:31 - so evenly distributed distributed that
61:33 - the subdivisions aren't that interesting
61:34 - let's change this I have an idea let's
61:37 - actually add let's get rid of this oops
61:44 - let's say let's add let's add the draw
61:49 - function and I'm gonna say if I could
61:53 - use mouse drag but I'm gonna say if
61:55 - mouse is pressed and I'm
61:57 - say because I have an idea here I'm
62:01 - gonna well first I want to always draw
62:02 - it and then I want to make a new point
62:07 - where the mouse is and I want to insert
62:14 - that point and I need the this to be a
62:20 - global variable now the quadtree itself
62:22 - I'm just gonna call it tree because I
62:24 - don't like cutie is sort of a I think
62:26 - it'll take a little bit more I could say
62:28 - I call it Q tree kind of like that Q
62:35 - okay so bear with me for a second what
62:38 - I'm doing here is I want to insert
62:40 - points where I'm clicking the mouse so
62:42 - at this huh show of undefined oh whoops
62:48 - I do not want to read to clay our cue
62:50 - tree with let so we can see as I draw it
62:55 - has to subdivide more where I am that's
62:58 - kind of cool what's why is the framerate
63:04 - seem so slow
63:17 - sorry hold on
63:22 - interesting questions in the chat
63:47 - yeah yeah yeah yeah yeah there's so many
63:54 - good questions in the chat here and I
63:56 - want to address but I got to come back
64:01 - too I got to try to remember the people
64:02 - are asking about the edge cases if
64:04 - something's equal are asking about
64:05 - should I move the points into the
64:08 - subsections but I just for a second here
64:11 - this is all edited out here Matt yeah I
64:13 - just it feels like it's running really
64:14 - slow whoops
64:20 - 30 frames per second no it's just that
64:24 - I'm not using mouse dragged so that
64:36 - oh yeah I need to do yeah I know I need
64:38 - to do greater than or equals on a couple
64:41 - of the edges okay I'm just trying to
64:43 - think of what else I want to do here
64:55 - because I was gonna what I was gonna do
64:56 - is insert a bunch of random points so
65:02 - let me actually insert what I wanted to
65:06 - do was just insert a bunch of points I
65:08 - think this will make it more interesting
65:09 - to look at like if I actually insert
65:11 - five random points whenever I'm clicking
65:14 - the mouse and we can just set these like
65:17 - a little bit randomly around one area
65:20 - and let me run this again yeah so you
65:24 - can see I'm just getting these like
65:26 - subdivisions and so now we can sort of
65:28 - see that what I'm doing here and is I'm
65:35 - getting a nice
65:36 - it's subdividing more where it needs
65:39 - more subdivisions if that makes it now
65:41 - I'm being asked a couple different
65:43 - questions from the chat number one is
65:45 - edge cases and what do I mean by edge
65:47 - cases what if the point is exactly on
65:50 - the edge of one of those sections
65:52 - I didn't account for that the truth of
65:54 - the matter is with these random numbers
65:55 - and floating points but this could
65:58 - really happen so what I think that I
66:00 - need to do here is in the insert
66:02 - function in the contains function what I
66:06 - need to do probably is just consider
66:08 - whether it's less than or equal to and I
66:12 - could do that on just two edges so that
66:13 - it would kind of but you know what if
66:17 - it's on the edge of the very edge I
66:18 - don't know what I could do is just kind
66:20 - of be inclusive how do you write these
66:25 - like this and this should take care of
66:30 - that because I'm gonna I'm gonna just
66:32 - say if you're on my edge I'm gonna I'm
66:34 - gonna I'm gonna take you don't worry and
66:37 - I probably could get not but I'm not
66:39 - concerned too much about the accuracy of
66:41 - this and you can see so it's same same
66:43 - thing and interesting it's really
66:45 - subdividing a lot in these areas I could
66:47 - so here we go so this is kind of this is
66:50 - kind of an interesting visual result
66:52 - like I almost want to go back to not
66:54 - drawing the points now like let me take
66:58 - out the points because now I'm able to
67:00 - draw I'm kind of like with my mouse I'm
67:03 - drawing this kind of interesting
67:04 - recursive tree pattern it's not doesn't
67:07 - seem like a tree but it's all
67:09 - if I were to unpack the way it's stored
67:10 - it's all this nested tree of rectangle
67:13 - objects okay so what have I really done
67:15 - here I have made the quadtree but I'm
67:18 - missing kind of a really important point
67:19 - because what I want to use the Quadra
67:22 - for is to query it I want to say hey
67:25 - this area could you please give me all
67:28 - the particles back that are in that area
67:30 - and I think what I'm going to do is make
67:31 - that part two of this coding challenge
67:33 - because this first part of the coding
67:36 - challenge is is like is is finished I've
67:43 - made the quadtree data structure and I'm
67:45 - storing the points in it there was I do
67:47 - want to address one question is oh yeah
67:52 - this will add okay so hold on I realized
67:56 - that so the thing is it is it is going
67:59 - to add it to more than one of these
68:01 - which is a problem well look just
68:03 - timeout for a second I should only do I
68:06 - forgot I do have to only do two edges
68:11 - the problem is the thing is I kind of
68:14 - want if it's added it to Northeast I
68:17 - want to just jump out of this
68:20 - so I mean this I'm intro like I want to
68:27 - say I think what would be nice is for
68:29 - this to do something like return false
68:32 - return true so that if I don't have to
68:38 - check the other ones I think that's
68:43 - gonna be
68:44 - I almost rather do it that way and it'll
68:48 - just take the first one
68:51 - Simon says you can have the points be a
68:53 - different color that's an interesting
68:56 - suggestion Oh like just make them random
69:00 - colors Oh a different color than the
69:01 - boundaries yes Oh be good yes okay okay
69:07 - boy I'm really making this an editing
69:10 - nightmare but so before I leave it was
69:14 - rightfully pointed out to me that the
69:17 - way I just did that with equals is that
69:19 - it would actually go into if it was
69:21 - exactly on the edge
69:22 - between lek east and west it would end
69:24 - up in both of these quadtrees which is a
69:26 - bit of a problem so there's a couple
69:29 - ways I could address that again though
69:31 - what I think what I want to do here is I
69:33 - want this function the insert function
69:35 - to return true or false whether it's
69:37 - succeeded in in in inserting the point
69:40 - so it should return false if it's not
69:43 - contained and it should return true it
69:49 - should return true if it is actually
69:51 - inserted into the points array and then
69:53 - I could just say if I can wrap each one
69:58 - of these I can actually just return the
70:02 - result of each one of these right so
70:10 - that way oh no no no no no no no I can't
70:13 - do this because they don't want I really
70:15 - have to say if it insert only if it's
70:19 - true return true if this is a little
70:21 - awkward but this is fine oh yeah you
70:23 - know you know me I like to refactor
70:24 - later so what this is gonna do is it's
70:30 - just going I could use an else at least
70:31 - I guess right because I so what I want
70:38 - to do is I want to find it's gonna you
70:40 - know I want to find where it's been
70:43 - where it's got inserted and then I want
70:45 - to return true okay so all this extra
70:49 - stuff I'm adding here maybe this is
70:53 - silly and I should have just used
70:55 - thought of the boundaries more carefully
70:57 - but this is going to guarantee that it's
71:00 - only ever inserted into one and it is
71:02 - giving slight preferential treatment to
71:03 - North East because it was on the
71:05 - boundary it's always going to go into
71:06 - North East as opposed will never get to
71:08 - North West but that's okay I think so
71:11 - let's just see if this is still working
71:13 - it is somehow I like imagining it's
71:15 - working faster but I don't think it
71:16 - actually is wonderful okay am I really
71:19 - at the end now ah there's a nice little
71:23 - there's yeah there's people are giving
71:27 - me all sorts of suggestions about how to
71:29 - improve this code I could use like an or
71:31 - and so I encourage you to make a
71:35 - nicer version of this in your own code
71:37 - I'm gonna leave it like this because
71:38 - it's really explicit about the algorithm
71:40 - I do want to write some comments in here
71:42 - so I'm gonna finish with this first part
71:45 - one of quadtree I've made a quadtree in
71:47 - like only four and a half hours it took
71:50 - me and I'm gonna do a part two and in
71:52 - part two what I'm going to do is ask for
71:56 - a selection of points within a certain
72:01 - boundary and then I can apply that to a
72:04 - collision detection out problem and make
72:06 - that collision detection problem much
72:07 - much faster okay so thanks for watching
72:09 - this part one and watch part two if you
72:11 - liked it'll be next-- and you can find a
72:12 - link to it in this video's description
72:21 - or in contains as much faster oh you
72:27 - mean just check if it's outside yeah
72:30 - yeah that's a really good suggestion so
72:40 - actually this is a good point someone in
72:42 - the chat now it's that it's scrolled
72:44 - past public am i so i could do it or
72:51 - right instead of saying if it's this and
72:53 - this and this and this i could just
72:54 - check this or the opposite if it's not
72:56 - anywhere within these boundaries it's
72:58 - not within the boundaries so let
73:01 - somebody else up i think i want to make
73:03 - this like even though this will go as a
73:05 - coding challenge into my github coding
73:08 - challenges repo I think I'm gonna make a
73:10 - standalone quadtree repo that'll have
73:12 - make this into a little library okay
73:22 - Simon the colors or things I encourage
73:25 - the viewers to add and make better Simon
73:30 - I would like to know had you ever heard
73:32 - of a code tree before I miss our quad
73:34 - tree a code tree I
73:37 - I bring this like it's barely alive 5:20
73:40 - I can do the second part alright so how
73:41 - do I do this second part let me think
73:43 - about this for a second let me look at
73:45 - the Wikipedia page the Wikipedia page
73:52 - algorithm is insertion query range oh
73:59 - right I just check if it's intersecting
74:03 - and then I give it those points no
74:10 - points in range wait Oh emptiness right
74:14 - if it's not no I say if it's not
74:15 - intersecting then give it an empty array
74:18 - otherwise give it the array that it
74:22 - contains if it's not subdivided you're
74:25 - done and otherwise append the result oh
74:30 - yeah yeah okay just looked up this
74:32 - pseudocode algorithm that was very
74:33 - helpful so I don't have to just need it
74:35 - a little a little help there okay this
74:46 - is like totally what I'm gonna do is
74:47 - just change this to cuz it is just I
74:53 - really should have the whole time been
74:56 - doing this with mouse dragged because I
74:59 - don't need to recalculate it it's just
75:01 - like eating my fan is spinning the so
75:04 - let me just this is a bit better yeah I
75:11 - don't know why I didn't do this in the
75:12 - first place okay
75:23 - all right
75:32 - okay
75:37 - right that's a very good point so when I
75:40 - do this now to determine if I've done it
75:42 - correctly I do need to have the points
75:44 - to be different colors so I can see if
75:45 - it really works okay so let me put the
75:51 - points back in I put the points back in
75:58 - like I'm like picking my nose live on
76:01 - air thanks everybody
76:08 - let's make a color here
76:18 - okay
76:20 - and let's set the background here all
76:28 - right okay
76:45 - mic is still working okay here we go
76:59 - okay welcome to I'm taking this
77:11 - very seriously
77:14 - welcome to quadtree coding challenge
77:17 - part 2 I am going to in so in part 1
77:22 - I implemented a quadtree meaning I made
77:24 - a data structure that tracks every point
77:28 - I'm why is it so slow I'm not going to
77:33 - worry about that right now
77:36 - is it the drawing that slow I think it's
77:39 - the drawing I got to come back and start
77:40 - this over but there is no frame rate now
77:43 - because I'm really I doing this and the
77:48 - frame rate idea is meaningless look how
77:50 - slow it became is this just JavaScript
77:53 - Oh different color per cell that's a
77:59 - great idea
78:01 - hold on maybe that's just that I'm
78:03 - adding so many points think something is
78:06 - going wrong here
78:14 - hold on I'm not doing part two right now
78:16 - I want to just let's I like this idea of
78:18 - a new color so let's just add this in
78:22 - for a second and I'll just make it a
78:27 - random one
78:41 - well let's make it to its gets let's put
78:44 - that back to four cuz yeah it's working
78:53 - as far as I can tell so why is this one
78:57 - green well the reason why this one is
78:59 - green is it was actually probably in the
79:02 - full one first then as more got added it
79:05 - had to subdivide so these blue you can
79:07 - see but these are probably these are
79:09 - within this so it's a little let's yeah
79:14 - but I'm pretty sure this is working
79:16 - right I just feel like it's weird that
79:18 - it's running so slow maybe it's not yeah
79:32 - I mean I guess JavaScript is slow and
79:41 - this computer is probably like
79:58 - oh wait a second now
80:06 - oh just have to color on this it's a
80:09 - good that's a good point
80:13 - so what another thing I can do is I can
80:15 - say as I can that's a good idea
80:18 - fill this dot color I need to give it
80:24 - some alpha though this is silly with it
80:36 - this is so silly what I'm doing
80:41 - move fun
80:43 - pretty colors D pretty pretty colors you
80:50 - know another thing I could do actually
80:52 - by the way is that it's not it's not so
80:55 - insane to make the capacity just one but
81:06 - it's sort of hard to figure out what's
81:07 - going on because I'm not it was
81:08 - mentioned in the chat before what if you
81:11 - subdivide you should add the parents
81:13 - point to the right subdivision so I'm
81:14 - not actually doing that because the
81:19 - problem we then I've got a capacity I
81:22 - guess you could make the argument that
81:24 - you should do that but I think the
81:25 - typical quadtree implementation doesn't
81:27 - do that because it's just I mean it you
81:31 - can do that but it's it's just it
81:33 - doesn't add any efficiency necessarily
81:35 - it's fine for you to just check those
81:37 - first four points always within the law
81:40 - in the higher level and you're only
81:42 - you're just getting more and more
81:43 - detailed as you as more and more points
81:45 - are added they're set the color on the
81:49 - cell and draw the point draw the point
81:52 - with the cell color to make sure each
81:53 - point in the right cell I'm feeling
81:55 - somewhat confident that it's actually
81:59 - working because each one of these only
82:02 - has one point that has none so right one
82:10 - point here
82:14 - I don't see what making the background
82:16 - white would do but I do like the fact
82:21 - that it's colorful all right I'm just
82:22 - I'm just
82:23 - I think JavaScript is just slow and it's
82:26 - actually not the quadtree that's slow
82:27 - it's the drawing like watch this so
82:30 - let's do something here let me let me
82:35 - add 10 points and let me console.log
82:40 - watch this frame rate I think it's just
82:44 - the drawing that's slow whoops so you
82:51 - can see look at this now it's going at
82:55 - like 4 frames per second however let me
83:01 - comment out the show function so I'm
83:07 - doing everything but drawing I'm
83:09 - inserting all the points into the
83:11 - quadtree so many times over and over
83:14 - again it's just not really I mean it's
83:16 - you know it got a little bit slower than
83:19 - 30 frames per second but at this point
83:20 - there's a lot of points because I
83:23 - probably you know I've added so many
83:26 - points so I'm now I feel okay about it
83:28 - it's the it's not the algorithm that's
83:32 - slow only draw the rectangle if it has
83:35 - no children that would make sense so
83:41 - that's a good idea battle that's
83:45 - interesting too let's let's look at that
83:46 - though because that'll be nice to see
83:49 - and then in show if not this dot divided
84:04 - draw the rectangle and the points else
84:17 - if this not divided whoops what did I do
84:27 - here oh if it's not divided else
84:31 - oh no whoops
84:41 - I think this is right
84:46 - and I made it let's make the capacity
84:48 - for
84:56 - yeah by the way I it's funny I Oh
85:01 - let's write it's hard to sort of see if
85:05 - it matches right because I put some
85:06 - alpha there that's why you're saying
85:08 - make the background white yeah you could
85:18 - see that it's right this is cool so you
85:24 - can see that there are right but
85:29 - interestingly why oh yeah right
85:36 - yeah this is cool watch so if I just
85:40 - kind of click it does a few points it's
85:42 - not subdivided yet now it's subdivided I
85:46 - don't see those other points anymore but
85:47 - I see those four here subdivided now
85:51 - there's only one new point in the new
85:52 - section yeah so I'm pretty happy with
85:54 - how this is working and in fact it's
85:57 - just the rendering that's quite slow p5
86:02 - disabled friendly errors equal true at
86:04 - the top yeah that's actually let me try
86:07 - that just out of curiosity to see I
86:09 - forgot about this this is a little tip P
86:11 - 500 what is it P 5 disabled friendly
86:23 - errors disabled friendly errors equals
86:29 - true I think also if I use the minim
86:30 - fide version it kind of does this
86:31 - automatically oh yeah this seems to be
86:39 - running faster this is so lovely
86:46 - I'm kind of addicted to this pattern
86:49 - actually okay so I'm feeling pretty
86:54 - confident that the algorithm is is
86:58 - working correctly and so what I want to
87:02 - do is unfortunately I've done all sorts
87:04 - of craziness to this I'm going to take
87:08 - out the color stuff and I'm going to put
87:18 - this back I just want to put it back to
87:24 - what it was
87:27 - [Music]
87:37 - show if this is invited yep strokeweight
87:40 - one whoops and let's get rid of by the
87:50 - way this this is like a terrible thing
87:52 - to do that's really just slowed down
87:53 - also and put background to zero okay so
87:57 - I'm back to what I was before and okay
88:09 - okay all right so let me get to this
88:13 - part too now I'm actually pretty
88:14 - confident this is working and so what I
88:17 - need to do now I mean ultimately I'm
88:21 - going to want to use this with like the
88:22 - flocking simulation or just even like a
88:26 - collision detection example that's gonna
88:28 - be part three but what I want to do now
88:34 - is just arbitrarily check to see
88:42 - retrieve a certain number of points
88:45 - within a certain area okay so what I'm
88:48 - actually going to do is I'm going to
88:49 - comment this out put this back and add
89:11 - and one thing that I could do you one
89:15 - thing that I could also do is just make
89:19 - the campus smaller you know boy this is
89:23 - actually gonna just have it run faster
89:26 - now I have an idea that it's so evenly
89:30 - distributed I have an idea which is that
89:33 - is there a random I think at the mean
89:47 - and a standard deviation so I'm just
89:53 - gonna use this random Gaussian for a
89:55 - second to have the points cluster around
89:57 - the center
90:12 - yeah there we go
90:18 - I'll explain what I'm doing in a second
90:25 - yeah this is better let's put it back to
90:30 - this okay yeah this is good because it's
90:40 - showing me and let's make these stroke
90:46 - wait - there we go okay okay all right
90:55 - so assignment asks why is this collision
90:59 - detection so I'm gonna have to get to
91:00 - that in part three time for today but
91:04 - let me at least do part two well I have
91:11 - to just check a message here all right
91:18 - well there's 800 people watching that's
91:19 - nuts all right here we go
91:26 - okay this is part 2 of my quadtree
91:29 - coding challenge and so I made a few
91:32 - adjustments I used something called a
91:34 - Gaussian distribution of random numbers
91:36 - to pick a whole bunch of random points
91:38 - that cluster towards the center so at
91:40 - least we can sort of see the quadtree
91:42 - is sub sectioning the canvas area in a
91:45 - way that's not sort of uniformly
91:47 - distributed so it allows us to sort of
91:49 - like check and see if this is working so
91:50 - what I want to do right now is I want to
91:52 - basically like pick a arbitrary section
91:55 - like I want to just say like you know
91:56 - some rectangle like down here like for
92:00 - example let me make a boundary so let me
92:03 - make let me down here let me say let the
92:07 - query be a new rectangle and I'm gonna
92:10 - make something totally arbitrary like
92:12 - 200 200 100 hold on hold on let me think
92:20 - about this for a second 350
92:28 - let's start this video over can I hide
92:35 - this somewhere if I put this like you
92:39 - just I don't want that to I don't want
92:42 - anyone to see that what if I put this
92:44 - here
92:45 - well this actually work alright cuz I'm
92:50 - not gonna go look at this HTML file
92:57 - don't need this draw function well no
93:02 - I'm starting over starting over if I
93:08 - look to the right and yell does it not
93:10 - does it not blow up in your ear okay
93:35 - hello welcome to part 2 of my coding
93:39 - challenge quadtrees so what I want to do
93:44 - in this part is I want to look at how I
93:46 - can retrieve a list of points from a
93:49 - given area without having and this is
93:52 - going to I don't have to like I could
93:54 - tell like this boundary over here give
93:55 - me all the points in that area well I
93:57 - can just look through every points and
93:58 - see if that they're contained within
93:59 - that boundary but the quadtree is going
94:01 - to allow me to do that more efficiently
94:03 - by kind of looking at the sections that
94:06 - are that are near this particular range
94:08 - that I'm going to create boy am I not
94:10 - explaining this well let me explain this
94:12 - visually so what I'm gonna do let me
94:15 - just draw a rectangle let me say
94:17 - something like stroke 0 255 0 let me
94:21 - draw a rectangle and I think because I'm
94:24 - gonna say rect mode Center and I'm gonna
94:27 - draw a rectangle that's how big is the
94:29 - canvas 400 400 so I'm gonna go over to
94:32 - like 300 down to like 300 and then say
94:35 - 100 comma 50 so and that this is way too
94:39 - exact like so let's let's say 107 and
94:43 - like 92 okay so and I'm always really
94:49 - bothering me that there okay so
94:52 - basically what I want is I just want the
94:54 - points and there's not a lot of points
94:56 - there so let me move this over wasting
94:59 - so much time on it's perfect this is
95:02 - what I want what I want now is to say
95:04 - like just give me all the points that
95:06 - are in this area but I want to ask the
95:08 - quadtree for it because the quadtree is
95:10 - gonna have a capability of giving me
95:12 - those points more efficiently it's not
95:13 - gonna have to check every single point
95:14 - so let's see if I can do that so in
95:18 - order to do this what I need is in the
95:20 - quadtree I need a new function and I'm
95:23 - gonna call it query and let me put it
95:26 - above show show is just sort of a
95:28 - drawing stuff which is really for just
95:30 - for debugging at this point I'm gonna
95:31 - write a function called query and it's
95:33 - going to take as an argument or range
95:36 - and what that range is it's essentially
95:38 - a boundary I don't want to use the word
95:39 - boundary cuz it's gonna get confusing
95:40 - cuz the quadtree object itself has a
95:43 - this.top boundary whoa whoa did you guys
95:49 - hear that
95:58 - okay
96:00 - no nobody heard that there was like a
96:03 - really weird sound I'm like frozen in
96:05 - what you did yes what was that that was
96:09 - weird
96:14 - hey let's keep going
96:16 - Simon's saying make it random I'll make
96:18 - it random but later first I want to just
96:20 - use that fixed area okay it's query the
96:33 - range so the first thing I need to do is
96:35 - I just need to I I need to say does this
96:37 - range and this quadtree do they overlap
96:41 - if they do then there might be some
96:43 - points that I want to give you if not it
96:45 - could be ignored and if it can be
96:47 - ignored that means I don't have to check
96:48 - any of its any of the points that are in
96:51 - it or any of its nested subsections so
96:54 - that's the first thing I need to say is
96:55 - say if this dot boundary dot intersects
97:00 - range if it does not intersect the range
97:05 - let's just get out of here
97:07 - I'm done I don't need to look I don't
97:09 - need to look look away don't need to
97:11 - look any further I'm done I'm gonna have
97:13 - to change this in a little bit but but
97:15 - this should work now now here's the
97:17 - thing if I'm saying if this dot boundary
97:19 - intersects well it kind of got a bit of
97:21 - a problem here which is that the
97:24 - boundary is a rectangle object and I
97:26 - don't see an intersex function but guess
97:28 - what I can write one so idea I'm gonna
97:32 - write an intersex function intersects
97:35 - another I'm going to say range why not
97:37 - range so oops
97:46 - so there was there was another coding
97:49 - challenge where I had to do this I can't
97:52 - remember what it was is one of my early
97:54 - coding challenges where I had to test do
97:57 - two rectangles overlap or do they not
97:59 - overlap and I think there's a nice way
98:02 - of doing this with an or basically
98:04 - saying hey if any of these or conditions
98:06 - are true they can't possibly be
98:08 - overlapping for example if the X of this
98:11 - one is greater than well the X this edge
98:14 - if this edge is greater than that edge
98:17 - or if this edge is less than that edge
98:21 - or if this edge is greater than that at
98:22 - or if this edge is less than that edge
98:24 - if this is anywhere outside then they
98:27 - are not they are not not not not
98:31 - intersecting this is going to be so
98:34 - painful to write oh there's got to be a
98:38 - really easy way to write this if okay so
98:44 - let's think about this if range dot X
98:46 - plus minus range dot W is greater than
98:54 - right so if this is the rectangle range
98:57 - and this is its left edge is greater
98:59 - than this this right edge actually this
99:02 - isn't going to be so bad it's greater
99:04 - than this dot X plus this dot W or right
99:11 - range dot X plus this dot W is less than
99:17 - this X minus this dot W or so let me I
99:24 - think I can do this now with the Y's
99:27 - range dot y H Y H h Y H this is really
99:39 - you're watching a person here type this
99:40 - stuff H alright so and I want to return
99:43 - this not if I want to return so if they
99:47 - intersect if an if this is true they
99:51 - don't intersect so I want to return not
99:53 - this whole expression
99:59 - yeah I think I did it hate me stare at
100:03 - that coat again for a little bit
100:15 - [Music]
100:26 - I'm working to see a lot of people in
100:28 - the chat saying it's right you can move
100:30 - on Mattia maybe this is one of these
100:37 - moments where you can do the speedup
100:38 - thing
100:40 - [Music]
100:57 - [Music]
100:59 - i thinkit's without the negative width
101:01 - if the position is in the corner Frogger
101:05 - is the challenge I got this myself
101:28 - oh that's an interesting way of doing it
102:15 - [Music]
102:24 - all right nobody can seem to tell me
102:26 - that I'm wrong I stared at it enough
102:28 - time I'm sure I move on also it was
102:31 - pointed out it was the Frogger coding
102:33 - challenge where I struggled through this
102:34 - for a very very long time
102:36 - so I could go back and check my Frogger
102:39 - code and I probably could also use
102:40 - somebody else's library that has like
102:43 - geometry math in it but let's move on ok
102:46 - so now if this this should work now what
102:51 - if they do intersect if they do
102:53 - intersect ah here's what I need to do
102:55 - actually so I need to recursively go
102:57 - through everything and I'm gonna say I
103:00 - want them have a I'm gonna create a
103:03 - variable called found so I want to find
103:06 - all of the points so if they don't
103:10 - intersect return found it'll be an empty
103:13 - array so this will be an empty array
103:18 - otherwise now now if they do intersect
103:22 - let me look through all the points that
103:27 - are part of this quad tree
103:38 - all the points that are part of this
103:41 - quadtree and say if range dot contains P
103:47 - found dot push P so now and now I know
103:52 - that these the boundary in the range
103:54 - that this quadtree intersects that range
103:56 - let me check all its points and see if
103:59 - they're within the range then I can add
104:01 - them perfect I've added them and now
104:05 - what I need to do though is say if this
104:09 - dot divided then okay well basically
104:16 - what I want to do is I'm gonna return so
104:18 - then I should return those points right
104:19 - but before I return those points what do
104:23 - I need to do well if it has some
104:25 - children quadtrees that I need to check
104:28 - if any of those points are in there
104:30 - so what I need to do is say if it's
104:36 - divided so if it's not divided I can
104:38 - ignore this I can say return this dot
104:47 - north-west query query range but I don't
104:59 - want to return but I need to pause for a
105:01 - second here and you think about this
105:13 - what I'm going to do is now I'm gonna
105:16 - can can just concatenate ah yes alright
105:23 - I've got an idea
105:24 - okay I know it's gonna be easier here
105:27 - right I could pass the array and keep
105:29 - adding to that array reference which is
105:31 - what I think what you would normally do
105:32 - with recursion but for some reason the
105:34 - way that I'm thinking about this right
105:35 - now
105:36 - is I can say found dot concat this dot
105:42 - Northwest query range and then I can say
105:46 - north east south west south east what
105:52 - this is going to do and then I can
105:56 - return found here so what I can do is
106:00 - write I'm going to start with an empty
106:03 - array if it does intersect just return
106:06 - an empty array because and all this
106:10 - concatenate concatenate you're just
106:12 - joined two arrays together so what I
106:16 - need to do is if I if I if I if there's
106:19 - nothing here move along
106:20 - return nothing otherwise if there is
106:23 - something here check my points to see
106:25 - which ones I should add then if I've
106:27 - divided I should also add any of the
106:31 - points that are from my children and
106:34 - then when I'm all done finally I'm gonna
106:36 - return that array I think this is good
106:39 - I'm sure something's wrong here and get
106:43 - rid of all these extra line breaks so
106:45 - they don't need any more and now here I
106:49 - should have okay so I have this
106:50 - rectangle but this is actually I need to
106:54 - say a range is and I really should make
106:58 - this let range be a new rectangle that
107:03 - is 250 250 107 75 and I'm gonna
107:11 - multiplied those by whatever that's fine
107:15 - I'll make it bigger and then I'm going
107:17 - to draw the rectangle at range dot X
107:19 - range Y range W times to range H times 2
107:25 - so let me just take a look at
107:28 - w is not defined whoops times two all
107:32 - right so I just make it a little bit
107:33 - bigger so now what I want to do is I
107:36 - want to say oh boy
107:38 - let points equal cue tree dot query
107:47 - range and just to see let me consult out
107:51 - log that array without even trying to
107:53 - draw stuff let me just see if this
107:55 - function even returns anything it gave
107:57 - me all three points okay so this can't
107:59 - possibly be right
108:01 - I've done something wrong which is that
108:06 - I only got three points so I of people
108:09 - in the in the chat again I can't credit
108:11 - everybody tell me the concat method is
108:13 - used to merge two or more arrays the
108:16 - method does not change the existing
108:17 - array but instead returns a new array
108:19 - this is from pierre in the chat so what
108:23 - the issue there is and maybe now i'm
108:25 - kind of don't want to use this concat
108:29 - because i have to write this right I
108:32 - have to say fad
108:33 - I think passing the array is gonna be
108:34 - better so apologies I'm gonna say return
108:40 - I kind of like passing the array better
108:44 - so query range array if if no array then
108:54 - I'll call this found then found is a
108:58 - blank array so I create the array if it
109:04 - doesn't exist then I can just return the
109:06 - empty array then I can push the stuff
109:09 - here and then now I can get rid of this
109:12 - crazy this concatenated idea was very
109:15 - silly I don't know who thought of this
109:18 - and we've got extra parentheses like mad
109:21 - here now I can say with the array and I
109:24 - could just pass the array so I'm just
109:27 - gonna let you know just gonna pass the
109:28 - array around and I actually don't even
109:30 - need to oh I do want to return found
109:32 - when I get mmm oh you know what yeah
109:39 - let's do this where I
109:40 - hmm hmm because now I want to return it
109:51 - but I only want to return it at the end
109:55 - of the very first so I think let me do
109:59 - it this way there's got to be a better
110:03 - way for this but let me just to get this
110:05 - work let me pass let me pass in an array
110:14 - I'm gonna think about how to return it
110:16 - better in a second but let me create an
110:19 - empty array and then pass it in and then
110:22 - be a little bit look at that array so
110:25 - okay this just gets me out of here
110:31 - etc etc etc okay okay here we go all
110:36 - right 160 that makes a little bit more
110:39 - sense
110:39 - there could be 160 points in there so
110:42 - let me now in the sketch let me say four
110:49 - let P of points and then stroke zero 255
110:57 - 0 I guess I already have that let me
111:02 - just let me draw the points and let me
111:08 - say point P X P dot Y so let's look and
111:12 - see if that worked
111:13 - hey this is looking pretty good day per
111:16 - day hey good all right let's make this
111:19 - rectangular range random so let's pick a
111:24 - let's pick a random point a random
111:28 - height and let's give it a let's give it
111:32 - some random width within a hundred
111:34 - actually let's just always make it a
111:36 - hundred 100 and let's see what happens
111:41 - all right so we're ever oh wait wait
111:43 - whoa wait why are some of the why are
111:48 - there's some points here not showing up
111:49 - something is wrong
111:53 - all right yeah not all the points are
112:00 - selected we're gonna have to look into
112:13 - this
112:24 - could be my intersects function this
112:27 - could be wrong
112:29 - contains function I'm pretty sure is
112:31 - right oh oh no that's right found push
112:43 - mmm oh we've told you a million times
112:49 - you've mixed range W with this dot W and
112:52 - range that H with this dot H in the
112:56 - intersects function intersects was wrong
113:02 - guess what
113:05 - remember this function that I spent like
113:08 - an hour staring at apparently I was
113:17 - looking at the chat the whole time
113:18 - there's a significant error in here that
113:20 - I have mixed up oh yeah look at that
113:22 - range dot X plus this dot W o range dot
113:28 - W range
113:30 - H range range range range range range
113:34 - range range this this this this this
113:36 - this this this I got to stare at that
113:38 - for a little more time
113:49 - so it's also being pointed out in the
113:52 - chat that you use the width as the full
113:55 - width instead of the half width and that
113:57 - I don't think that's true I think I
113:58 - being consistent about it's confusing
114:00 - because the only time I ever need to not
114:03 - think about the width as half width is
114:06 - what I'm drawing it so alright alright
114:11 - so I think that's corrected it we'll
114:13 - find out I don't I can't find any points
114:18 - oh look at that
114:21 - look at that beautiful I found all the
114:23 - points within that region now just out
114:29 - of curiosity right if I had to check
114:34 - every single point I'm just sort of
114:38 - curious here if I had to check every
114:40 - single point right this is where in the
114:44 - query this is where I am looking through
114:46 - all the points if I had to check every
114:49 - single point and I had like a global
114:51 - variable oh sorry sorry everybody
114:56 - pause if I had to check every single I
115:06 - should make the query rectangle move
115:08 - with the mouse that's such a great idea
115:09 - hold on if I had to I just want to I
115:12 - just want to check something for myself
115:14 - if there are 300 points so if I create
115:19 - of just I'm just gonna create a global
115:21 - variable called count right and if I
115:25 - were to check every single point I would
115:30 - if I would look through every single
115:32 - point to see if it's within that range
115:34 - count plus plus count would equal 300
115:36 - but I am going to here just as a little
115:39 - sort of like hack check is I am going to
115:42 - increase the count here and I shouldn't
115:46 - have to look at all 300 points I should
115:49 - only have I should be looking at a sub
115:51 - set of points so let me console.log that
115:54 - count 31
115:57 - 27:48 219 now
116:00 - course I've got to look at a lot with
116:04 - this big range because you know I kind
116:08 - of got picked randomly through the
116:09 - center but so but I never have to look
116:11 - through all the points and so this
116:14 - algorithm like you know if I make the
116:16 - range the whole canvas well then I have
116:19 - to look through all the points the point
116:21 - is if my range is something much smaller
116:24 - like even if it's like 25 by 25 right I
116:29 - have to do very very few checks even if
116:32 - it's randomly in the center and let's
116:34 - now let's get rid of this count idea
116:37 - because I don't need that count idea
116:39 - anymore let's go this is gonna be fun
116:42 - oh so much fun let's let's go put this
116:49 - in draw and let's make the rectangle a
116:55 - mouse X mouths Y count is not defined
117:01 - we're at draw sketch touch yes line 26
117:06 - Oh quad tree line 87 sorry quad tree
117:13 - line 87 save so now you can see as I
117:19 - move the rectangle it is highlighting
117:21 - only the points that it finds I kind of
117:24 - want the count back because I kind of
117:27 - want to like know how many checks but
117:29 - this is great all right boo boo
117:33 - oh I think I've successfully now
117:38 - implemented the full quad tree because I
117:40 - have both an insert function and a query
117:44 - function let's quickly go to that
117:45 - Wikipedia page
117:47 - and if we look at the pseudocode right
117:50 - we can sort of match this up with what
117:52 - we did there's this idea of a point in X
117:54 - Y and AABB which is my rectangle and
117:58 - axis aligned boundary box
118:00 - there's the quadtree class and as the
118:02 - capacity has a boundary north west north
118:05 - all of those things will have an insert
118:07 - subdivide and query range right query
118:10 - insert yeah so I think that I have
118:13 - basically done everything and probably I
118:17 - did read this Wikipedia page the other
118:19 - day and that's why I think I started
118:20 - using concat because it's using a pend
118:23 - so but I think I like my so here's the
118:26 - thing ah I really should just this video
118:28 - should be over cuz it's taking way too
118:29 - long
118:30 - but I do kind of want I really sort of
118:33 - want this oh I know what I can do I want
118:39 - to return I want to return the points
118:42 - array let me fix it so it returned to
118:44 - the points array let points equals query
118:47 - that range I really just want to get an
118:50 - array back so now if I go in here so if
118:57 - found does not exist found should equal
119:01 - a empty array and then can I just say
119:06 - returned found down here is that gonna
119:08 - work that works I don't know why I
119:13 - thought it was so complicated the reason
119:16 - why I kind of was afraid to do that is
119:18 - that these are also returning their
119:21 - reference to the array but doesn't
119:23 - matter because I'm not doing anything
119:24 - with it so that's fine so we don't only
119:26 - really own the only return that really
119:28 - counts is the very very very last one
119:30 - which is the original call to the query
119:33 - function so so now okay that was that
119:36 - was much easier than I thought
119:37 - so now at least I have the function
119:39 - return that array okay
119:41 - I'm gonna be done there's one more video
119:44 - I need to make and I think though I mean
119:49 - there's many more videos I need to make
119:50 - but part three of its gonna come later
119:53 - hopefully by the time you watch this it
119:55 - might actually be linked to but what
119:57 - it's what that video is going to do is I
119:58 - want to apply the quadtree algorithm to
120:01 - a collision detection problem and in
120:03 - particular a really good one for me to
120:05 - apply it to it's not really a collision
120:06 - detection is my flocking simulation I
120:08 - also would like to port this to
120:10 - processing and make a Java version of
120:12 - this so those are all the things that I
120:14 - want to do I'm gonna so but if you're
120:17 - watching this video right now and the
120:18 - next one isn't available as a challenge
120:20 - to yourself see if you can take this and
120:22 - apply it to a collision detection
120:25 - and then I'll be back and doing that
120:28 - myself someday and and and that's what's
120:30 - gonna happen okay thank you everybody
120:34 - okay I unfortunately have to leave it's
120:37 - after 6:00
120:40 - so I'm this is gonna have to be a very
120:43 - much of a to be continued anything that
120:47 - I have really please show the counter
120:52 - and target a single point pretty sure
120:54 - some points are counted twice or more I
120:57 - don't that's possible um something else
121:01 - asks would this be hard to expand to 3d
121:04 - it's called an octree so in 3d you would
121:07 - use an ox tree gives you to have eight
121:09 - subsections right if you think about a
121:13 - cube that you would divide into
121:16 - subsections wouldn't it be nine
121:18 - oh no eight I don't know whatever you
121:20 - read the Wikipedia page for octree my
121:23 - brain is dead right if I go down here to
121:26 - octree you can see you're right right ah
121:32 - octree yeah of course it's eight you can
121:33 - see this subsection recursive
121:35 - subdividing yeah the daylight savings
121:41 - hours are different I think between the
121:42 - US and Kate week Minh asked about
121:44 - daylight savings time which is something
121:45 - that I'm absolutely equipped to discuss
121:47 - I believe daylight savings it's now
121:49 - Eastern Daylight Time it was that was
121:52 - like a week ago so that's we're now at a
121:53 - five hour difference and then Europe
121:55 - when he and maybe you do it this weekend
121:57 - it will be back to six hours again I
121:58 - think that's right it is a time in
122:03 - Zurich it is 11:09 p.m. that is the time
122:09 - that it is for me right now at least
122:10 - mentally and then but however in
122:13 - Reykjavik
122:15 - there's only 1009 but that's because
122:17 - there's an hour difference between those
122:18 - two places just case you're wondering KD
122:21 - tree is better yeah I should look into
122:26 - that
122:26 - yeah we don't change until next weekend
122:28 - right UK changes on Sunday night
122:31 - oh it's 10 o 9 in the UK oh my god
122:36 - really oh it's only 1009 oh so like
122:40 - Zurich already changed I'm so confused
122:42 - or Zurich is just an hour difference GMT
122:45 - plus one well London is obviously GMT
122:50 - all right
122:51 - so this is like way more fun than I ever
122:54 - expected I think you could probably make
122:55 - some colourful visualizations out of
122:57 - this so I look forward to seeing what
122:59 - comes of that let me try to answer a few
123:02 - questions in two-and-a-half minutes so
123:14 - I'm now gonna take two and a half
123:15 - minutes of questions of course you're
123:16 - about 30 seconds behind me Jostein
123:27 - writes is this Jay s and P five only so
123:32 - well the algorithm quadtree is a generic
123:35 - algorithm that can be used in any
123:37 - programming environment this particular
123:40 - example that I have made is JavaScript
123:42 - the language is JavaScript I'm using the
123:44 - p5 library for the drawing aspect all of
123:48 - the quadtree algorithm none of that
123:50 - depends on p5 but the algorithm itself
123:53 - I'm sorry the drawing of it I'm using p5
124:00 - is this exponential or linear as far as
124:04 - memory requirements so I think what
124:07 - you're asking for is the and it's it's
124:09 - neither so we're talking about the the
124:13 - order the Big O notation of the
124:15 - algorithm and this is not it if I was
124:19 - the way I want to apply this algorithm
124:22 - is log n just for that one if there's n
124:26 - element it takes approximately law on
124:28 - average of log n of those elements to
124:30 - look at all to find all those points
124:33 - within the square however what I talked
124:35 - about earlier in the video is what I
124:36 - want to do is I want to do this for each
124:38 - and every point arranged around it so
124:40 - that's going to be n log n whereas if I
124:42 - didn't have the quadtree it would be N
124:44 - squared
124:45 - I would never implement a quadtree if I
124:49 - only had like a hundred things because
124:51 - why bother but as the space grows really
124:53 - really big it can be much more efficient
125:00 - where did you get the music and the
125:02 - sound effects um it's sort of like
125:04 - there's some random stuff that I pieced
125:05 - together I would love for somebody to
125:08 - just like build me a whole like sound
125:12 - effects music board extravaganza but I
125:15 - have that time to do that myself
125:19 - you could add a function for changing
125:21 - the green rectangle size with the mouse
125:22 - wheel that's a great idea so I encourage
125:25 - somebody to add that to the code
125:28 - important question what's on page 99 of
125:34 - a book of random numbers thank you for
125:38 - reminding me I forgot to have cat read
125:41 - the random numbers also why could I
125:42 - never remember to get the guest read the
125:44 - random numbers
125:45 - [Music]
125:52 - my prettiest fried eleven thousand three
125:57 - hundred thirty nine nineteen thousand
125:59 - two hundred thirty three fifty thousand
126:02 - nine hundred eleven fourteen thousand
126:04 - two hundred nine thirty nine thousand
126:06 - five hundred ninety four sixty-eight
126:08 - thousand three hundred sixty-eight
126:09 - ninety seven thousand I feel like I'm in
126:12 - a black mirror episode or something but
126:14 - thousand five hundred forty two thirty
126:17 - six thousand two hundred fifty two
126:18 - twenty seven thousand six hundred
126:20 - seventy one that's that's one line
126:22 - that's one line of it okay so far the
126:26 - only guest I remember to read the
126:28 - Reverend remembers as blood Labrador
126:30 - they're random numbers his goal on 11
126:32 - [Music]
126:35 - all right got a min and a half left here
126:39 - would it be difficult to add different
126:41 - shapes not necessarily I would need an
126:45 - intersect function so if I wanted to
126:46 - look at all the points contained within
126:48 - a circle I need to have an intersect
126:51 - function for the circle and the in the
126:56 - bounding box but that's no big deal like
127:00 - I just need that different contains
127:01 - function but that would definitely be
127:03 - possible read the book of Pi
127:10 - yeah
127:19 - [Music]
127:22 - what was I doing in Switzerland and do
127:25 - you do a meet-up
127:26 - so I really I I haven't really done any
127:28 - official coding trade meetups would love
127:31 - to do something like that I mean I I was
127:34 - in Switzerland for a meeting that was at
127:37 - the Google office there that was really
127:38 - interesting and fun to be there and
127:39 - there just wasn't enough I was fooling
127:41 - well actually ended up being there
127:42 - longer snowstorm but I was only there
127:45 - for you know less than something like 36
127:48 - hours so I would love to do especially
127:51 - because I know there's a lot of viewers
127:52 - there's a lot of viewers all over the
127:53 - world but in particular I do know that
127:55 - there are certainly a large number of
127:57 - viewers in Europe so I would I would
128:00 - love to do a meet-up somewhere and I'm
128:02 - rubber my my coding train World Tour
128:04 - somebody that happen oh ok opinion on
128:07 - Java 9 modules Simek asked what kind of
128:11 - sounds would you like for your sound
128:12 - music board tweet me at Schiffman and I
128:15 - can I can kind of discuss it so tweak at
128:18 - Schiffman if you want to help put
128:20 - together like music and sound stuff that
128:22 - I can use I would love to hear from you
128:25 - alright so this is the end of today and
128:30 - is a last question Rick asks is Java
128:35 - more powerful than processing guess what
128:37 - processing Java completely 100%
128:40 - identically the same thing not really
128:42 - but processing is just a library for
128:44 - Java so Java itself is it more powerful
128:48 - than processing processing itself is it
128:49 - more powerful than Java processing is
128:51 - just giving you a set of functionality
128:53 - that you can call with a certain API in
128:56 - the Java programming language in that
128:57 - sense it's not more powerful but maybe
128:59 - it makes prototyping a bit quicker and
129:02 - easier getting you up and running a bit
129:03 - faster and do drawing stuff it with less
129:06 - less code ok the next stream will be
129:12 - next Friday so unless I unless I have
129:14 - some surprise extra live stream during
129:16 - the week thanks everybody I will see you
129:18 - next Friday I have a guest coming that's
129:24 - very exciting I'm very excited about so
129:26 - stay tuned for that
129:27 - all right this little little teaser
129:29 - there oh boy a youtuber one of my
129:32 - favorite youtubers it's going to be here
129:34 - I don't know
129:35 - sometime next week definitely alright
129:39 - see you then
129:40 - goodbye everybody