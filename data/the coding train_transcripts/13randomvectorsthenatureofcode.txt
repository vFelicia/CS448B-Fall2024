00:01 - Hello.
00:01 - So this is another video on
working with vectors in p5.js.
00:04 - And in this video,
I really just want
00:06 - to talk about what it means
to make random vector, which
00:09 - seems like, why is there even
a whole video about that?
00:11 - But I have a point to
this, which I will get to.
00:14 - It also is, I think,
useful, because it's
00:16 - kind of opening up this can of
worms, this vector of worms,
00:18 - which I want to
open up, because I'm
00:20 - going to end up looking at
some other math functions
00:22 - that I need.
00:22 - And it's going to
lead me to something
00:24 - about static functions.
00:26 - But that'll be in
the next video.
00:27 - Right now, I just want to look
at this example that I have.
00:30 - And what I have here
is, first of all,
00:31 - notice I'm translating
the coordinate space
00:33 - to the center of the canvas.
00:35 - This is very important
because I want to treat--
00:37 - just for this visual
demonstration--
00:38 - I want to treat 0, 0 as
the center of this canvas.
00:41 - Then I'm making a vector
with an x component of 100
00:44 - and a y component of 0.
00:46 - And I'm representing the
vector as a line from 0,
00:49 - 0 to the x and y.
00:50 - So it would be nice if I could
draw a little hat on the end,
00:53 - so it looks like an arrow.
00:54 - But that's going to
be too much work.
00:56 - I could change these numbers,
you know, negative 150.
00:59 - And you can see there's my line.
01:02 - So let's just
think about, first,
01:04 - what would it mean to
pick a random vector?
01:07 - Well, your first
instinct might be
01:09 - this, which is a very
reasonable instinct,
01:12 - let's make a vector that
has between negative 100
01:14 - and 100 as it's x.
01:15 - And this is going to
start getting very long.
01:18 - I'm going to have to
drag this way off over.
01:21 - Negative 100 as it's y,
that's like the range of stuff
01:25 - that I'm picking.
01:26 - And if I run the sketch, you
know, at every single frame,
01:30 - it is picking a new
value for x and y,
01:32 - and I'm seeing that line
point off in a direction.
01:34 - So this is a random vector
generator, in a way.
01:40 - But I want to show you something
a little bit odd, which
01:42 - is that if I take back ground
0 and put it into Setup,
01:47 - what do you expect to see?
01:50 - I'm going to see collect over
time every single vector that
01:55 - points from anywhere
from 0, 0 to what?
01:58 - Something with an x
and y, minimum maximum
02:01 - between negative 100 and 100.
02:02 - Let's run this.
02:04 - I'm going to let this
play out for a little bit.
02:07 - [MUSIC PLAYING]
02:10 - Look at that result. I am
seeing all of the vectors
02:15 - fill up a square--
02:17 - the worst drawn square ever.
02:19 - Any vector, this vector,
this vector, this vector,
02:22 - this vector, right?
02:23 - Because minimum, maximum.
02:28 - This is, you know--
02:30 - In many cases when
working with vectors,
02:32 - however, it's quite
common that you
02:35 - want to pick a vector with a
random direction, but a fixed
02:40 - magnitude.
02:41 - What do I mean by that?
02:42 - Here, the direction and the
magnitude, it's all random.
02:45 - And the magnitude even has
kind of this arbitrary range,
02:48 - because this is the
longest vector possible,
02:51 - but if I go to extend to here.
02:52 - This one is actually shorter.
02:54 - What would it mean
for me to pick
02:56 - vectors that fill out a circle?
02:59 - There is something
called a unit vector.
03:05 - And a unit vector is
a vector of length 1--
03:07 - that's the unit--
with any direction.
03:11 - So it's a kind of
vector that you
03:12 - use when you only really want
to talk about the direction.
03:15 - Ah, the magnitude
doesn't matter.
03:16 - Let's just pick 1 as a standard,
and let's now pick a direction.
03:20 - So what if I wanted
to pick any unit
03:22 - vector, any vector of length
1, but in any direction?
03:25 - Oops.
03:27 - So I could start to look
into some trigonometry math
03:29 - to do this.
03:30 - And I will come to
that soon enough.
03:34 - But one of the benefits of
working with vectors in p5.js
03:37 - is there's a function
that'll pick a random unit
03:39 - vector for you.
03:40 - And that function is
just called random 2D,
03:43 - because I want a
random 2D vector.
03:45 - v equals p5.vector.2D.
03:50 - Now, there's something
really odd about this,
03:52 - which is I'm calling
this function random 2D,
03:55 - p5.vector.radom2D.
03:58 - What is all that?
03:59 - So this is veering off
into this other topic
04:02 - about static functions.
04:04 - And I'm going to talk
about that and cover
04:06 - that in the next video.
04:07 - But for right now,
let's just understand
04:09 - this as a function that
returns a random unit vector.
04:13 - So now, if I were to run this,
look at all those random unit
04:18 - vectors.
04:18 - They're all of length 1.
04:19 - Well, I can't
really visually see
04:21 - what's going on, because
1 pixel isn't very much.
04:24 - I could use scale.
04:24 - I could try using the scale
function to kind of blow things
04:27 - up.
04:27 - But this is a really
nice opportunity for me
04:30 - to talk about another vector
math function-- multiply.
04:34 - Remember, when I
had vectors a and b?
04:37 - And I said a plus b is add
the x's together, add the y's
04:42 - together, and I'll get 8, 3.
04:44 - Those are the numbers
I used before,
04:46 - but I think this
math is correct.
04:48 - And the function in
P5 to do this was add.
04:55 - Now, what if I wanted to use
the idea of multiplication
04:58 - with vectors?
04:59 - Oh, my goodness,
could I say a times b?
05:03 - Well, I kind of can, but
vector multiplication--
05:07 - the vector product is
a whole other topic
05:11 - that I'll cover eventually.
05:13 - But you might have heard
of things like the dot
05:15 - product or the cross product
or even something called
05:17 - the Hadamard product.
05:20 - But I'm not covering those now.
05:22 - When I'm referring to this
function in P5, called
05:25 - mult for multiply, I'm talking
about scaling the vector,
05:29 - multiplying the vector
by a scalar quantity.
05:32 - So, in other words, I'm talking
about saying a times, not
05:36 - another vector, but
like the number 2.
05:39 - And what do I mean
when I say that?
05:40 - If I have a vector
that's pointing
05:42 - in a given direction with
a given magnitude, like 3--
05:47 - well, let's actually make
it 5, because I'm going
05:50 - to use the 3, 4, 5 triangle.
05:52 - If I multiply it by 2, now
I have that same vector--
05:55 - no, sorry, I have
a different vector,
05:57 - but it's the same direction
with length twice as much.
06:01 - So the length of
this vector is 10.
06:03 - And the way that this works
is if it's in 3, 4, 5--
06:09 - if the components are 3
and 4 because it's in 3,
06:12 - 4, 5 triangle, then
all I have to do
06:15 - is multiply each component.
06:16 - So if I want to take a
and multiply it by 2,
06:20 - the vector I get is 6, 8.
06:23 - 3 times 2, 4 times 2.
06:26 - So in this case, after I pick
this random unit vector, which
06:29 - has length 1, I can
scale it to any quantity
06:32 - by saying v multiply 100.
06:35 - And think about what's
going to happen now.
06:37 - I'm going to run this sketch.
06:40 - And I get any vector,
always of length 100,
06:43 - pointing in any direction.
06:44 - This opens up, incidentally,
a lot of possible,
06:46 - just like visual possibilities,
just from this alone.
06:50 - And certainly, I could
change this and say, oh,
06:52 - any vector between 50 and 100--
and I should probably give this
06:55 - some alpha to sort of see.
06:59 - And we can see now
I have any vector,
07:01 - it's at a minimum length
50, maximum length 100.
07:04 - And just from that
I'm getting this sort
07:05 - of like nice visualization.
07:07 - That would be harder
to do without these
07:10 - built in functions in vectors.
07:12 - Before I move on, let's
just quickly move back
07:14 - to this walker example
and see that I could now
07:17 - say this top velocity
equals p5.vector.random2D.
07:24 - And this would now be a
way of taking a walker
07:27 - and every time I
run the sketch, it's
07:29 - going to go in a
random direction.
07:31 - The speed, the magnitude
of the velocity
07:33 - is always going to be 1.
07:35 - So I could also randomize
that to some value
07:40 - between like 0 and 3.
07:44 - Oops.
07:45 - This dot velocity dot multiply.
07:48 - And now you're seeing
just another way
07:50 - of thinking about how you
might initialize something
07:52 - with randomness.
07:54 - And maybe Perlin noise
could play a role here.
07:56 - Is there some way you
can create an array
07:58 - of all these walkers
with initial velocities
08:01 - according to Perlin noise?
08:02 - If you go back and look
at my Perlin noise videos,
08:04 - that might create some
interesting trails
08:05 - you could consider.
08:08 - But I'm going to
stop here and let
08:09 - you do some
variations of this now
08:12 - that you see about how random
2D works and multiply works.
08:17 - There is another aspect to this,
though, that I want to unpack,
08:20 - which is what does it mean to
call a function like .multiply,
08:23 - which is on a vector v, versus
a function like random 2D,
08:27 - which is not on a
specific vector,
08:29 - but on the type of
thing itself, p5.vector.
08:32 - So I'm going to
come back and that's
08:34 - called a static function.
08:35 - I'm going to cover that
in a separate video.
08:37 - And then after that,
we'll be ready to start
08:38 - looking at acceleration and all
the other good stuff, magnitude
08:41 - and normalize and all
that sort of stuff, OK?
08:43 - So thanks for watching this one.
08:45 - And I'll see you in
the next, one maybe.
08:46 - I don't know.
08:47 - Good bye.
08:48 - [RINGS BELL]
08:49 - [MUSIC PLAYING]