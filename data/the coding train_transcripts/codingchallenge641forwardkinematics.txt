00:00 - welcome to a multi-part coding Challenge
00:03 - series on kinematics this is an example
00:08 - from processing processing a Java based
00:11 - platform open source creative coding
00:13 - environment that I use in a lot of my
00:16 - videos this is an example by Keith
00:18 - Peters from coding math of the coding
00:22 - math YouTube channel which are also
00:23 - highly recommend I believe that Keith
00:24 - Peters has some video tutorials on the
00:27 - exact same topic with and if you're
00:29 - looking for the video tutorial where
00:31 - it's somebody who really understands the
00:32 - math and doesn't make any mistakes
00:34 - I recommend that video that gel so just
00:37 - go leave and watch that channel but you
00:39 - can see this is an example called reach
00:40 - 3 and what you can see is that there's
00:43 - this bouncing ball moving along and that
00:46 - there's this kind of tentacle thing
00:48 - that's just reaching out trying to touch
00:50 - it trying to catch it and then move
00:52 - along with it and it behaves in this
00:53 - very I might say robot arm like fashion
00:57 - so this is an implementation of
00:58 - something called inverse kinematics
01:00 - which refers to the motion of a
01:03 - connected segments from the front to the
01:07 - back so the front is what's really
01:08 - controlling it it's trying to reach and
01:10 - how should all these other segments be
01:12 - oriented so that that front can get as
01:14 - close as possible to this target versus
01:16 - forward kinematics which is like you
01:19 - know I'm going to move this how should
01:22 - the rest of my arm move when I move this
01:23 - part of my arm which is different then
01:25 - well I want to inverse which I need to
01:27 - move my hand how does the rest of my arm
01:29 - move in order to get there so I want to
01:31 - do both of those things with the goal of
01:33 - thinking like a swimming fish or a weird
01:34 - goopy tentacle thing really the goal of
01:37 - like showing how these things work and
01:38 - then you making someone that's creative
01:40 - and colorful and exciting and lifelike
01:42 - and crazy and weird or beautiful or
01:43 - whatever so let's get started let's look
01:47 - let's so this video I'm gonna do forward
01:48 - kinematics and then I'll do some other
01:51 - videos so I'm not sure yet so let me
01:53 - move over here and let's discuss what
01:55 - the core stuff that we need to build
01:57 - into our code is so we need so the idea
01:59 - is if I
02:00 - think of it as tune segment but I need
02:02 - to have these I think I'm going to call
02:04 - these segment objects so I'm going to
02:06 - have segment objects that almost as if
02:08 - they're connected with a joint now by
02:10 - the way you could probably do a lot of
02:12 - this using a physics engine like box2d
02:14 - and a revolute joint which I have other
02:16 - videos about but I'm going to do this
02:17 - without a physics engine just kind of
02:19 - with the raw trigonometry math that we
02:22 - need so the idea here is that I have a
02:24 - segment in every segment would have a
02:27 - kind of starting point and we'll call
02:29 - this point a which is an XY point it
02:32 - also has an end point which I'll call B
02:34 - which is also an XY and one of the
02:37 - crucial pieces of data that I'm going to
02:39 - need is this angle so first all I want
02:43 - to do is create one segment with an
02:45 - angle change the angle and a length
02:48 - sorry would keep the distance between
02:50 - these two points is the arms length of
02:52 - segment blank so I want to discrete one
02:54 - segment with its a and B points and an
02:58 - angle and I want to be able to turn it
02:59 - let's just do that to start so to do
03:04 - that I'm going to get out of this
03:05 - example here I'm going to create a new
03:09 - tab and I'm going to call it segment I
03:12 - probably think of something better but
03:13 - segment I think is a good and actually
03:15 - that's probably from Keith Peters
03:17 - example I'm sure that Millman clay Chur
03:19 - is used there so to make a segment class
03:20 - and what did I say each segment needs it
03:23 - needs a big start point and a a I'm
03:28 - going to use a P vector object to store
03:29 - an x and Y for that point it needs a B
03:33 - and use that's its end point it needs a
03:36 - length which is the distance between
03:38 - those two points and it needs a angle
03:41 - which is the angle now here's the thing
03:43 - now what I'm realizing if I go back to
03:47 - this drawing is really the information
03:48 - is a length and angle B is the point
03:52 - that I calculate based on how that angle
03:55 - is changing and this relates exactly to
03:57 - this idea of polar and Cartesian
03:58 - coordinates and I just made a separate
04:00 - video about that if the trip what solar
04:02 - entities and coordinates are I would
04:04 - find a link to that video in this
04:05 - video's description but the short
04:08 - version of that is if I have a point
04:10 - here and I have an angle and
04:13 - have a distance the length of radius
04:15 - from here to here I can get this point
04:18 - by by by saying R cosine of theta R
04:22 - times cosine of theta and R times sine
04:24 - of theta will give me the how far we
04:29 - move along the x axis and how to
04:30 - pardonable on the y axis to get to here
04:32 - so those Hartman's I derive an
04:33 - explainable in a separate video that you
04:35 - could look at ok so if I come over here
04:38 - what I'm going to do now is say ok what
04:41 - when I create this segment what does it
04:43 - need
04:43 - well you can get an x and a y like where
04:46 - is it and it can get a length and so I'm
04:51 - using just different variable names for
04:53 - the parameters that get passed in and it
04:55 - can get an initial angle so what I'm
05:00 - going to do now is I'm going to say a
05:02 - equals a new P vector at XY lengths
05:06 - equals whatever length we specify and
05:10 - the angle equals what a variable we
05:13 - specify that's pretty good and then what
05:18 - I can do next is that we just write a
05:19 - function called show where I'm going to
05:22 - draw it as I'm going to say stroke
05:25 - 2:55 stroke weight 2 or 4 and then I'm
05:29 - going to say line from from ax a dot y
05:35 - to be X B naught Y okay so now the idea
05:39 - here is I can say something like segment
05:44 - seg four segment seg segment is a new
05:50 - segment and maybe I'll have it start on
05:55 - the left hand side of the screen and
05:56 - point to the right so it's going to be
05:58 - at something like 10 comma 200 with a
06:00 - length of 50 and an angle of 0 and then
06:03 - I want to say segment dot show so now I
06:06 - have this idea of a segment it starts at
06:09 - you notice but if this is my canvas it
06:13 - starts right here at like 10 comma 200
06:16 - it has an angle of 0 and the length of
06:18 - item Marissa
06:19 - so I should see something like this on
06:21 - the screen now I've missed the key stuff
06:23 - here I just it on purpose but let's
06:25 - let's just see what happens to that a
06:27 - background and now let's run this okay I
06:31 - got an error I got a
06:32 - nullpointerexception so what does no
06:34 - pointer exception mean by the way null
06:36 - pointer exception means you're trying to
06:38 - use something whose value is actually no
06:40 - and so you can't use it the value is no
06:43 - nothing sad this boy fads dullness let's
06:48 - let's get it out of being null and the
06:51 - thing that's null is not a a is a vector
06:54 - B was never calculated so like I said
06:56 - being is a thing that you calculate
06:58 - based on where a is what the angle is
07:00 - and what that length is so I'm going to
07:02 - write a function I think I'm going to
07:04 - write a function called calculate I
07:07 - don't know this probably enter name for
07:09 - this calculate B update and something
07:12 - like that so I'm going to do that
07:13 - calculate B and so how do I do this now
07:17 - I could do that math all I need to do is
07:19 - say hey DX the change in X is the length
07:23 - times cosine of the angle and the change
07:28 - in Y is the length times sine of the
07:31 - angle and then B is a new P vector which
07:36 - is X plus DX y plus dy so I now have a I
07:44 - start ax a dot Y so I now just calculate
07:49 - what is the change along x and y from a
07:52 - based on the length and the angle and
07:54 - then give me that new P vector and if I
07:57 - say now in setup in the in the
08:00 - constructor calculate B we now see there
08:04 - it is there's that segment with an angle
08:06 - of 0 now let's let's see if this is
08:08 - really working let's change the angle to
08:11 - and I need to work with a unit of
08:13 - measurement called radians so I find if
08:16 - I just want it to be 45 degrees or
08:17 - negative 45 degrees converted to radians
08:20 - now it's pointing up so we got the idea
08:23 - this is working I have one segment yay
08:28 - now okay so what's the next step here
08:31 - hmm I need a break
08:33 - I'm going to keep this like okay what's
08:35 - the next step here Liz there's a few
08:37 - different things what is really we
08:38 - should see maybe we should make that
08:39 - angle change so I'm going to write a
08:43 - function called I'm going to say in draw
08:48 - I'm going to say uh let's let's leave
08:52 - that to later actually I was thinking
08:53 - like we would use curly noise to make
08:55 - the angle change or just have it turn
08:56 - around that type of thing but I do kind
08:59 - of want to move it a little bit over and
09:00 - maybe make it a little bit longer so
09:02 - let's do that
09:03 - okay so now what I need to do is I need
09:06 - another segment
09:07 - I need another segment that connects to
09:10 - that segment hmm let's think about this
09:13 - do I want to enjoy but it also needs the
09:19 - segment's to have an awareness of which
09:22 - one they're connected to so actually
09:24 - first let's add something the segments
09:26 - need to know the segment's are going to
09:28 - need to know who they're connected to
09:29 - and I'm going to call that a parent so
09:32 - this particular segment idea so this
09:35 - particular segment that I made has no
09:37 - parent the parent is null but I'm going
09:42 - to make a new segment that's connected
09:44 - to this one like I want to say segment
09:48 - segment two I really want an array but
09:53 - I'm going to do it this way just for a
09:54 - second I going to say segment two is a
09:59 - new segment and I'm not going to give it
10:01 - a position I'm just going to give it a
10:05 - parent right I want to be able to say I
10:09 - sometimes want to make a segment at this
10:11 - exact location but I sometimes just want
10:13 - to make a segment that's connected to
10:15 - another segment so there's two different
10:16 - ways of making a segment and guess what
10:18 - in Java which processing is you can have
10:22 - two different constructors you could
10:23 - just write both of them so the second
10:26 - constructor is going to be just like the
10:28 - first one but instead of taking an X Y a
10:34 - length in an angle it's going to take
10:36 - another segment I'm going to call that
10:39 - up
10:40 - harren and a length of an angle so it's
10:43 - a position is actually so first of all
10:45 - its parent is not null its parent is
10:50 - equal to its actual parent right the one
10:53 - that was assigned and its location where
10:56 - it is is what this segment location a is
11:02 - that the exact location where this
11:04 - segment location B is so all I need to
11:08 - do is say its location a should be at
11:11 - parent BX parent B dot Y okay so that's
11:20 - another way and then the rest is the
11:21 - same length angles calculate B okay so
11:25 - this I think is good and now I'm going
11:28 - to say segment to say go to show hey
11:39 - look at that and it's angle is also 45
11:41 - well let's give it a different angle
11:43 - just so we can see let's give it an
11:45 - angle of 0 looks like there's our two
11:48 - segments now here's the thing I haven't
11:52 - really connected these things like one
11:55 - of the things I want to do is I would
11:57 - like the what if I just wanted them to
11:59 - spin so what if I put them more in what
12:02 - if I put them in the center and so
12:05 - that's that should be in the center and
12:06 - I'm just going to say I'm going to write
12:08 - a function called like update where I
12:14 - say angle equals angle plus 0.01 just so
12:21 - it rotates kind of slowly and I'm going
12:23 - to say segment 1 update is that too slow
12:31 - so one of the things it's doing it the
12:33 - angle changing but guess what whatever
12:35 - the angle change I need to recalculate
12:37 - the end point I don't see anything
12:39 - because I haven't updated
12:40 - I haven't calculated B so any time I
12:43 - change the angle I need to recalculate
12:45 - its end point so the angle changes
12:48 - recalculate its end point now let's run
12:49 - this again there we go
12:53 - but that other one is not moving it's
12:55 - not connected to it that's no good right
12:57 - I need to say that I need to say
13:01 - basically like if I have a parent when I
13:05 - update myself if I have a parent our
13:07 - parent is not equal to null then what I
13:11 - want to do is and then what I want to do
13:17 - if pair is not equal to null sorry I
13:19 - like thinking about this what I want to
13:21 - do is get my angle okay couple things
13:26 - first I need to set a my point a is
13:31 - equal to parent B copy so that's by the
13:36 - way another way I did this here like I
13:39 - just made a new vector from parents at B
13:41 - so another way I could do this actually
13:43 - that's a little bit more less code to
13:44 - write as I could say parent B copy which
13:47 - just makes copies of function as part of
13:49 - the P vector object that copies it so I
13:52 - could always update by making saying
13:56 - that and then I can now now I need to
14:00 - update both of these so now we can see
14:07 - that they are both that that is
14:10 - connected so as one turns the other one
14:13 - is connected so this is really forward
14:16 - kinematics yeah I could do someone in
14:18 - the chat is saying I could say child not
14:20 - parented and that's actually a very good
14:22 - point but you know I just thought of it
14:25 - that way probably because I somebody
14:27 - else implemented it that way so you know
14:29 - notes that might be a good improvement
14:30 - maybe I'll double back and kind of see
14:32 - if that's a good refactoring but
14:33 - encourage you to try that as your own
14:35 - exercise to use to create a child rather
14:38 - than a parent and so now what I should
14:41 - be able to do by the way is yeah because
14:46 - when I iterate over them I guess I could
14:49 - start at the last one but if I had a
14:51 - child I could iterate forward through
14:53 - them so now you can caught me but I'm
14:56 - going to keep going with the way that
14:57 - I'm thinking about it and let's see if I
14:58 - have some time at the
14:59 - and I'll refactor it okay I'm actually
15:01 - going to keep the parents thing but I
15:03 - think this idea of having child
15:05 - references versus parent references is
15:06 - something that is worthwhile considering
15:08 - here's the thing though I just realized
15:10 - this is kind of working in a way that
15:13 - it's supposed to by accident and so one
15:15 - thing I want to do is I'm going to I
15:17 - want to segment out this idea of it
15:20 - wrote of the angle changing from it's
15:23 - updating based on its parent so I'm
15:27 - going to just - I'm going to write
15:29 - another function I'm gonna call it like
15:31 - wiggle or something or another like yeah
15:33 - let's just call it wiggle because
15:35 - eventually I'm going to have the arms
15:35 - wiggling maybe and so that that's where
15:40 - the angle changes and then I want I'm
15:45 - going to call update separately so
15:48 - because I want to show you what's really
15:49 - going on here because what happens if I
15:52 - only wiggle segment one and it's not
15:57 - wiggling it's turning you can see that
15:59 - it's actually that segment is always
16:02 - keeping it's not it's not it's not
16:05 - moving along with it realistically it's
16:06 - always keeping its original angle
16:08 - pointing to the right so one of the
16:10 - things when you update in forward
16:13 - kinematics as I'm moving forward from
16:16 - arm to arm from segment to segment to
16:18 - segment I always need to bring the
16:21 - parents angle along with me or pass the
16:24 - angle from the parent to the child so
16:26 - that happened accidentally because I was
16:28 - rotating both of them equally but once
16:30 - they're rotating in different ways that
16:31 - won't work anymore so what I want to do
16:33 - here in addition to a update just
16:38 - pulling in the parents location I also
16:41 - want to take my angle and offset it by
16:45 - the parents the parents angle is that
16:50 - enough that all I want to do let's take
16:53 - a look at that No oh that's kind of
16:56 - interesting though so this is this is
17:01 - way off as you can see because I'm
17:03 - accumulating all the time I want to pass
17:05 - off the parents angle but just as an
17:08 - offset to whatever its own angle is at
17:10 - really doing so in a way I kind of need
17:12 - two variables here which is I need it to
17:16 - do its own thing and then always just
17:20 - add so you need to calculate its own
17:21 - angle based on some something that it's
17:23 - doing which ironically I think if I and
17:29 - then add so if I just said angle equals
17:32 - if I just start with angle equals zero
17:34 - and then add the parents angle oh I
17:40 - think that I think the issue is actually
17:43 - that I do need to it the issue is
17:47 - actually that I'm going this rotating
17:49 - the arm thing is sort of not that
17:52 - necessary because I'm going to calculate
17:54 - things in a different way but I do need
17:56 - two variables self angle and parent
17:58 - angle yeah
17:59 - so what I need is yeah yeah okay okay
18:03 - okay okay
18:03 - I need its actual angle and then I think
18:06 - what I would do is I'm going to say a
18:07 - self angle I'm going to create a
18:08 - variable called self angle that's a good
18:10 - suggestion self angle and I'm it I'm
18:15 - sure there's it easier there's a slight
18:17 - cadets way of writing it but just the
18:19 - way that have created this example I'm
18:20 - have self angle start at that same angle
18:23 - and then angle is always self angle is
18:33 - the thing that I might have some
18:34 - algorithm to change it and the angle
18:41 - itself is always so what I'm going to do
18:49 - is angle equals self angle right
18:52 - everything that's updating takes its own
18:55 - current angle as itself and then adds on
18:57 - there we go adds on the parents angle I
19:00 - think this is going to work there we go
19:02 - so the angle is zero and this is exactly
19:04 - what I want it's zero relative to
19:06 - whatever its parent is and now if I
19:08 - actually gave it instead of you know
19:10 - also negative 45 degrees we can see now
19:13 - it's moving in there we go this is what
19:15 - I want so this this angle turned what
19:19 - the
19:20 - the parents angle turns and the other
19:22 - angle updates whatever its own angle is
19:24 - relative to the parents so they can
19:26 - accept independent independent
19:27 - calculations for calculating their own
19:29 - angle so now what can I could start to
19:32 - do some interesting stuff here so for
19:34 - example I can say segment 2 dot wiggle
19:38 - and that one is going to rotate itself
19:43 - along so it's rotating relative to the
19:46 - other one now I don't really necessary
19:47 - have something that interesting here
19:48 - they're both just rotating and this is
19:50 - literally very similar to my solar
19:52 - system example where one bigs rotating
19:54 - around one thing and other things
19:55 - rotating on another thing but I think
19:57 - where you get something much more
19:58 - interesting if we use a sine wave to
20:00 - rotate them or purling noise let's try
20:02 - using Perlin noise so I'm going to add a
20:06 - I'm going to add a variable called X
20:09 - offset which is just going to be some
20:11 - random value and I encourage you to go
20:13 - back and look at some of my curly noise
20:14 - tutorials it's probably noise is a
20:16 - smooth randomness and then in wiggle I'm
20:20 - going to say self angle equals the noise
20:25 - function I'm going to map noise of X
20:29 - offset which has a range between 0 and 1
20:31 - to like between negative 1 and 1 and
20:34 - those are some arbitrary angles and
20:35 - radians and then I'm going to increase X
20:38 - offset over time so now okay so that's
20:42 - too fast so we can see here now I have
20:46 - this kind of arbitrary moving almost
20:49 - like wiggling tentacle-like phase so now
20:52 - I have this wiggling tentacle and I kind
20:53 - of mostly done with this idea forward
20:55 - kinematics but I want to improve on this
20:57 - a little bit so I very least this is not
21:00 - great this is not a very sustainable
21:03 - path so what I want to do is either
21:06 - create an array or some other mechanism
21:08 - and actually I think I'm going to try
21:10 - doing this without an array so I'm going
21:14 - to and I'm going to use kind of a
21:15 - concept called a linked list where every
21:17 - object is just linked to another object
21:19 - and I can iterate through them that way
21:20 - so I'm going to create a something
21:23 - called tentacle I'm going to make my
21:24 - variable called tentacle and tentacle is
21:28 - a new segment
21:32 - tentacles a new segment that's that
21:34 - starts at 300 200 with a length of 100
21:37 - and radians of negative 45 so now what
21:42 - I'm going to do is I'm going to say for
21:43 - int I equals 0 I is less than 2 I'm just
21:47 - going to add two segments to it segment
21:53 - next okay so hold on what I want I want
21:57 - I want to say something like books say
22:02 - clips hold on I want to take something
22:07 - like segment current equals tentacle
22:11 - okay then segment next equals a new
22:15 - segment whose parent is the current one
22:22 - and then the same thing length 100 let's
22:27 - just do angle 0 and we're going to start
22:30 - this with an angle of 0 2 there's no
22:31 - reason to to have that anymore okay so
22:35 - and so the next segment is a new segment
22:38 - attached to the current segment current
22:41 - being the tentacle which is kind of like
22:42 - the root and I could call this route if
22:44 - we're seeing about of a tree and then I
22:47 - can say current equals next so what this
22:51 - will do is say I have a segment attach
22:54 - the new one to that then make that the
22:56 - current segment so the new one attaches
22:58 - to that so I think this algorithm should
23:00 - work and I should be able to just say
23:03 - now I could just say tentacle wiggle
23:09 - tentacle update tentacle show what this
23:14 - should do is I run this it's working but
23:16 - I'm only seeing that root one the root
23:19 - segment I don't see the one that's
23:21 - attached to it so what I can do now is I
23:24 - could say segment
23:26 - kurz I can use the same thing equals I'm
23:29 - going to call it next actually because I
23:31 - just for this look as a segment next
23:33 - equals tentacle while next is not equal
23:37 - to null then I can wiggle update and
23:42 - show it and then I can say
23:46 - a I could we'd all update and show it
23:49 - and then I could say next equals next
23:52 - dot oh wait I have to go backwards this
23:55 - is why people were telling me to use
23:59 - parent-child so how can i select add
24:03 - child I'm going to have both let's add
24:06 - and you probably don't need both but I'm
24:08 - going to add a child reference as well
24:10 - so this is like a that called double
24:12 - linked list where they're linked forward
24:14 - and backwards so what I'm going to do
24:18 - here is when I'm creating them
24:21 - next is the new segment and then current
24:26 - child equals next so I'm also going to
24:30 - link it that way and that way now as I
24:34 - iterate through stem I could say next
24:36 - equals next child so I dig it a little
24:38 - bit awkward way maybe so in other words
24:41 - okay this is hard to keep in your head
24:43 - but let me try to say it again I'm
24:45 - starting with and actually it might make
24:48 - sense by diagram this but I'm starting
24:50 - with the the root note the root segment
24:54 - the first one I make a new one that's
24:57 - attached to it and its parent gets that
24:59 - current one and the current one's child
25:01 - is the next one so they're both linked
25:02 - to each other and then current becomes
25:04 - this although I knew once I linked up
25:06 - with the same parent-child relationship
25:08 - so that I think should work and now I
25:10 - can iterate them I start with the root
25:12 - and I wiggle and update and whalen
25:14 - update going from iterating through it
25:17 - eventually one of them will not have a
25:19 - child right because it next index it
25:24 - will be no so I should I should say just
25:26 - here by default it's no because at some
25:31 - point we'll get to the end but some way
25:35 - in this loop we'll get to the end and
25:36 - then it won't come back and so the last
25:38 - one won't have that child so as long as
25:40 - as long as it's no okay so this should
25:42 - work yeah there's all three of them okay
25:46 - all three of them wiggling with their
25:47 - weird curling
25:49 - so let's make this a little bit more
25:50 - interesting let me think about let me I
25:53 - kind of want it to feel more like a
25:54 - tentacle from the bottom so I'm going to
25:57 - give its initial location with divided
26:00 - by two and the height so at least it's
26:03 - kind of starting from the bottom there
26:05 - but now I need to think about how that
26:07 - range of angle so the range of angle
26:10 - should actually be between around around
26:14 - a negative 90 degrees right but because
26:17 - that's pointing up so I want to offset
26:19 - that so that the what I'm mapping to is
26:22 - like it looks the max angle is something
26:26 - like negative pi divided by 2 plus you
26:30 - know 1 and the min angle is negative pi
26:37 - divided by 2 minus 1 so I want to map
26:39 - the noise to max angle mid angle I have
26:44 - a feeling like a sine wave might
26:45 - actually work better than this and now
26:48 - we can see okay we can see what it's
26:50 - doing up okay it's got a pretty broad
26:52 - set of possibilities in terms of its
26:54 - angle so let's make this let's make this
26:58 - like a quite a bit smaller oh wait why
27:00 - is it what did I do wrong here oh
27:02 - because oh I don't want them high we
27:06 - want the first one pointing up the rest
27:09 - are all relative to the ones below aha
27:14 - I don't know why I decided I had to do
27:16 - this like kinematics thing
27:19 - so let's actually leave it at 0.1
27:24 - negative point 1 I'm just going to do
27:26 - something kind of like hacky which is to
27:29 - say if it doesn't have a parent if it if
27:35 - it doesn't have a parent I just want it
27:38 - to point up because I want the whole
27:40 - thing to point up I'm going to say angle
27:42 - plus equals negative PI divided by 2
27:46 - all right so that should yeah so instead
27:50 - just has the first one pointing up but
27:52 - the rest point to the left and the right
27:53 - okay so the quick little fix and now I
27:56 - can make this much much bigger of a
28:00 - range
28:01 - and the other thing that I really wanted
28:03 - to do here is I can make a lot more of
28:05 - these so let's make 20 of them and let's
28:07 - just make the segments like 10 pixels
28:09 - long and so now we have this wiggling
28:13 - tentacle-like thing with curly noise I
28:15 - don't know what it's going to do I kind
28:17 - of want the range to be bigger you know
28:20 - this is the kind of thing that it can
28:21 - play with forever so let's make the
28:22 - range bigger and let's maybe have the
28:26 - offset we know would be interesting to
28:28 - do here I have a weird idea which is to
28:32 - have the offset move a little faster
28:35 - yeah so we can see this now I don't know
28:38 - what this is crazy creeping up why is
28:40 - the first one did I make the first one
28:42 - it's still I still have 100 dots so
28:45 - let's make this one 10 right so we can
28:47 - see here's my crazy creepy tentacle arm
28:50 - thing that's a little one trying to do
28:52 - but there you go that's forward
28:54 - kinematics let's change it to a sine
28:56 - wave just to see what we get so instead
28:58 - of using purling noise I'm going to map
29:01 - a sign between max angle and min angle
29:05 - let's try that okay and that's like way
29:08 - too much so let's give that much smaller
29:12 - angle so we can see now oh and they're
29:14 - all starting so actually what I want
29:16 - this is I'm getting ridiculous here but
29:19 - let's all start them with this yeah so
29:22 - this actually if I give them a perfect
29:24 - sine wave it's just going to curl onto
29:26 - itself but if those sine waves are
29:29 - slightly offset from each other
29:31 - I've got it off the rails here it's the
29:33 - Train is be revealed for sure but let's
29:36 - let's let's make this a little bit more
29:38 - interesting what I really want to do is
29:40 - add this as a parameter to the segment
29:44 - so I don't want to just have them all be
29:46 - 0 or all be random let me show you what
29:48 - I need I want that X offset which I'm
29:50 - using essentially I think in decoding
29:52 - math YouTube channel I know that to use
29:55 - used a variable called stays which is
29:57 - kind of what I don't know if that's
29:58 - right though but it's like it's the
29:59 - saying that you're passing into sine or
30:01 - cosine alpha think of it as time so let
30:03 - me use let me use a t4 time and I'm
30:06 - going to add another argument here and
30:08 - I'm going to set T
30:11 - I'm going to do this T equals T and I
30:14 - could I could really improve the weight
30:15 - of these constructors are I could
30:19 - combine the constructors and that's in a
30:21 - probably in a in a better way but so let
30:24 - me just let me just add a limb l last
30:26 - argument here where now each of these
30:30 - each of the descendant always gets its
30:32 - time that that the thing that you're
30:34 - passing in to sign and always whatever
30:36 - to set the angle and what I'm going to
30:39 - do is I just pass in 0 here let's pass
30:43 - in 0 for all of them and we should have
30:46 - the same exact thing except for I want
30:48 - to call this P now and T moves up by a
30:51 - certain amount ok so now you can see
30:53 - this is what happens when I have the
30:54 - sine wave there we go
30:57 - because people in the chat are asking
30:59 - what his goal I have no idea this is by
31:02 - the way a way to think about creative
31:04 - coding it says it's a stream of
31:06 - consciousness improvisational I don't
31:08 - know where I'm going I'm just playing
31:10 - around it I really should stop sneeze
31:11 - now so okay because I'm kind of off in
31:13 - the weeds here but I think there's an
31:15 - interesting aspect here that I could do
31:16 - so now everything starts at 0 but what
31:20 - if the phase we're going to use the word
31:23 - phase here maybe or I can just say T
31:25 - actually T equals 0 T goes here and then
31:29 - in this loop I say T plus equals 0.1 so
31:34 - what if they're all just slightly off
31:36 - phase from each other now you can see
31:40 - I'm getting a sort of more a bit of a
31:44 - different kind of quality to this now
31:46 - it's very much of an exact repeating
31:50 - pattern so I think if I also changed you
31:54 - know not only the period of these
31:56 - oscillations must be not sorry not only
32:00 - offset the where they are in terms of
32:03 - their oscillation but change their
32:04 - period which is a frequency so that's
32:09 - that's this variable here ok I'm going
32:12 - to stop now and I'm going to let you I'm
32:13 - going to let you guys play with these
32:15 - ideas but I would I have a suspicion
32:17 - that if you mess around you know look
32:20 - what I did
32:20 - sine has a range I
32:22 - using the range of output from the neues
32:24 - function which is absolutely not correct
32:27 - the sine function has a range between
32:29 - negative 1 and 1 so that's why by the
32:32 - way it was going so I think I'm getting
32:35 - close to this swimming fish kind of
32:36 - quality too as well so I kind of want to
32:40 - put the pearly noise back in also now
32:42 - that I have this ideas I'm being
32:43 - slightly offset from each other so let's
32:45 - put noise and we can see who we can see
32:50 - I kind of got this also this wiggling
32:53 - quality to this to it and I kind of want
32:55 - to make the range a bit wider to see
32:58 - what the sort of possibilities are so
33:00 - you can see I think that you will
33:02 - probably come up with a more creative
33:03 - way to make use of this forward
33:06 - kinematics idea and you know it'd be
33:09 - really interesting to now put an array
33:11 - of all these across the bottom or you
33:13 - know map them to the F this would be
33:14 - great mate you could make a creature
33:16 - like a circular creature that has all
33:17 - the tentacles attached to the edges of
33:20 - it and it kind of Wiggles along like a
33:22 - centipede try to make a new no in the
33:25 - chad is saying trying to make the
33:26 - segments go shorter as they reach the
33:28 - tip and that's certainly an interesting
33:29 - idea let's try adding that really
33:31 - quickly so right now the segments are
33:32 - all so I could do something like float
33:34 - length equals 50 and start with that
33:38 - here and then I could also shrink the
33:40 - length so I could say like length equals
33:42 - itself times 0.9 so there's like 10
33:47 - percent shorter each time okay let's
33:49 - make them half as long each time so you
33:52 - can say let's make them 75% as long each
33:55 - time so you know I'm not making it
33:58 - obvious to see how that is because I'm
33:59 - not drawn I could make them different
34:01 - colors but you can see there's a lot of
34:02 - variables you could play with here so I
34:04 - hope that you enjoyed this forward
34:06 - kinematics coding challenge and in the
34:08 - next video ever do is do the reverse of
34:10 - this where I actually am starting where
34:11 - I want the end to be and how does the
34:13 - rest of it behave okay thanks for
34:17 - watching and see you in the future video
34:19 - [Music]