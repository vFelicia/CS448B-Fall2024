00:00 - all right welcome back this for the
00:03 - moment for the time being is the last
00:05 - video in my series on promises in es6
00:10 - and a sink and a weight in ES 8 now many
00:15 - people who are watching the live version
00:17 - of this you might be watching the
00:18 - recorded version or making lots of
00:20 - excellent comments about things that I'm
00:21 - not demonstrating for example what if I
00:24 - want things to happen like on the
00:26 - interim during various stages of this or
00:28 - why I want to show like a loading bar oh
00:30 - you know I want my asynchronous calls to
00:32 - be happening in parallel instead of like
00:33 - waiting for all this to be done and then
00:36 - just showing the results those are all
00:37 - really good questions so I'm trying to
00:40 - stay in sort of a simple place to
00:41 - demonstrate the basic idea but I would
00:44 - leave some of those as exercises to you
00:46 - and maybe I can come back and continue
00:47 - this series if there are some key things
00:49 - that I've missed so please give me your
00:51 - feedback in the comments but what I want
00:52 - to show in this particular video is what
00:55 - if I want to make multiple calls to word
00:57 - gift and I want them I want to be able
01:01 - to retain sort of something about the
01:03 - sequence of those calls so for example
01:05 - something I absolutely could do is I
01:07 - could just do this twice right and in
01:10 - fact I can still leave the catch at the
01:13 - end so I can actually do this I think
01:17 - right because this returns oh no I would
01:21 - have to say right this is a little bit
01:22 - goofy but I could say return word gif of
01:27 - sorry word gift inside of here and then
01:32 - I could say then do another one right so
01:37 - this is just me doing - this is a little
01:38 - bit weird and I'm need to finish off the
01:41 - code here and I need a dot here so this
01:44 - is the way of chain this is kind of
01:46 - without the await thing this is the way
01:48 - of chaining promises so first I call
01:51 - word gif I show the results I return the
01:54 - next call to word gift which is a new
01:57 - promise and then I show those results so
01:59 - let's run this and see if we get two up
02:01 - sorry I'm in a different place we see
02:04 - two and they happen one after the other
02:06 - and sometimes I'm gonna get an error if
02:08 - there's no gift okay now here's the
02:11 - thing I want to change
02:13 - thing about the word gift function I
02:15 - want to make this have an argument numb
02:18 - and that's going to be the number of the
02:25 - number of sorry I'm spacing the number
02:27 - of letters that I want so I'm gonna go
02:31 - to the word Nick API and hmm I'm gonna
02:37 - take this out and I'm gonna say when I'm
02:42 - calling that I'm gonna say plus and so
02:46 - I'm just adding and um there's a nice
02:48 - way I should use those what's that
02:50 - called in es6 the string thing I'll have
02:51 - to make a video on that but I'm gonna do
02:53 - it my highly manual way I'm just adding
02:57 - in the minimum maximum length as a
02:59 - number so hopefully you can follow what
03:02 - I'm doing here because I'm alright so
03:04 - what I'm doing is I'm just modifying the
03:06 - call to the word Nick API to specify a
03:09 - number of characters so I'm gonna say
03:11 - word Nick for and then word Nick 5
03:14 - we're sorry not word Nick word gift for
03:16 - word gift 5 so I should get a
03:17 - four-letter word and then a five letter
03:19 - word four letters alright I got an error
03:25 - four letters five letters okay
03:28 - so that this works for letters five
03:31 - letters in sequence so so why am I doing
03:33 - this so one thing I want to point out
03:36 - about sequence versus parallel I know
03:38 - I'm gonna get the promise that all
03:39 - interestingly enough what if I didn't
03:41 - chain these so let's take out the second
03:45 - one and just leave this first one and
03:50 - now I'm going to actually just
03:51 - completely duplicate this code and say
03:56 - I'm gonna say 3 & 4 3 & 4
03:58 - let's run this now so now they're not
04:00 - chained so I'm not waiting to do the
04:02 - second one until the first one comes
04:04 - back I'm just saying do these in
04:05 - parallel do both of them and when they
04:07 - both come back create the paragraphs in
04:10 - the image so let's look at this 3 4 3 4
04:13 - 3 3 4 so interesting enough let me let's
04:18 - I'm sort of surprised
04:19 - I want to just try now with a 5 as well
04:22 - I look at this for 3
04:27 - five so when they're happening in
04:29 - parallel what I'm saying just like do
04:31 - this do this do this just start them all
04:33 - I'm not necessarily going to be sure
04:35 - about the order that they come back in
04:36 - so one way to deal with that is to chain
04:40 - them like I did there's another way to
04:41 - deal with that if I want to say like
04:43 - wait till everything is done and then
04:45 - show the results and that's where
04:47 - promise dot all comes in
04:50 - so promise dot all requires an array so
04:55 - let me let's just so let's just pretend
04:58 - I have something like called promises
05:00 - and it has it's an array of three
05:04 - promises if there is an array of three
05:07 - promises I can write promise dot all
05:11 - pass in promises that array and then add
05:18 - sorry it's a then and catch so hold on
05:23 - I'm I'm this is hard I have to think
05:27 - about this while I'm doing it
05:29 - promise dot all promises then and this
05:32 - gets a function of what to do when it
05:35 - comes back and this gets a function
05:37 - which is pretty much you know if there
05:40 - is an error okay so I think this is the
05:46 - skeleton of what I want I have some
05:48 - syntax errors here maybe I you know
05:50 - semicolon looking looking looking oh
05:54 - well this should say error console.log
05:58 - err what's wrong here what am I missing
06:00 - ah this needs us there we go no okay
06:06 - this is actually correct this curly
06:07 - bracket I don't know why I was I had a
06:08 - little brain malfunction there where I
06:10 - thought it was supposed to be there but
06:11 - this is actually closing set up so this
06:13 - is in the correct spot so this is the
06:14 - skeleton the idea is and by the way this
06:19 - this is really a problem
06:20 - this needs to have an argument the idea
06:22 - the skeleton is if I create an array of
06:25 - three promises I can say when all of the
06:28 - promises are complete and resolved give
06:31 - me the result of all those promises in
06:33 - an array of the same order as the
06:35 - original promises that's the idea of
06:37 - promise all so what are these promises
06:40 - well they could be this word gift three
06:46 - word gif for and certainly I could
06:50 - create them in a loop or with separate
06:51 - variables but just to do this word gif
06:53 - five so this is the idea here let me
06:56 - give myself a little bit more space that
06:59 - what I can do here is just say hey I
07:01 - want to make three promises I want three
07:04 - word gift things when all of those are
07:07 - done show me the results and now this is
07:11 - I'm just gonna use a like a regular loop
07:15 - because instead of a four of loop I'm
07:18 - not sure why but that's how I feel right
07:19 - now so now I can do a loop to go through
07:21 - all the results and then I could say
07:24 - data equal results index I and then what
07:30 - do I want to do actually let's just put
07:33 - this in here the difference is I'm
07:35 - saying results index I results index I
07:39 - right so the idea here is now this is
07:42 - exactly what I had before starting took
07:44 - me a little while to get to this this is
07:46 - exactly what I had before the difference
07:48 - is I am putting all the promises in an
07:51 - array I'm not handling them with our
07:53 - each their own then or in separate
07:55 - blocks I'm just putting all the promises
07:57 - right word gift returns a promise
07:59 - remember this code of this this I can
08:02 - totally delete now remember this async
08:07 - function we wrote the async function
08:09 - with a weight returns a promise when the
08:12 - promise is resolved
08:14 - you get this particular object so now
08:16 - when all of the promises are resolved
08:19 - then I have all of the resolutions in an
08:21 - array called results and I can go
08:23 - through them one at a time and they
08:25 - should be in the same exact order as the
08:27 - array original array
08:33 - did I do this correctly did I do this
08:36 - correctly uh shoot gets that to have
08:42 - slide 49 what did I do
08:44 - wine 49 am I even in the right yeah I'm
08:49 - in the right 49 hold on that's not I
08:52 - didn't save I didn't save save this is
09:01 - like wasted time in the video but well
09:06 - I'm 20 now should never use that drum
09:09 - sound effect oh I just have an extra
09:11 - curly bracket thank you there we go so
09:15 - when they're done all three of them
09:18 - happen at once and they're always in the
09:20 - right order three four five three four
09:24 - or five
09:25 - let's get an error I'm sure we'll get
09:28 - errors if we give longer words so let's
09:35 - just see what happens with an error
09:38 - didn't get in how are we not getting any
09:43 - errors all right so I got an error so
09:46 - here's the thing this promised out all
09:48 - might not actually be such a great
09:50 - solution for this because promise dot
09:52 - all is all or nothing so if any of those
09:54 - promises have an error then I don't get
09:56 - any of the results so if what I wanted
09:58 - to do here was create a for loop you
10:00 - know let I equals zero I is less than
10:03 - 100 I plus plus and I have like let
10:08 - promises equal an array and then it's a
10:12 - promises dot push word gift you know for
10:16 - for I write this is now going to work
10:22 - and it should show me a hundred word
10:24 - gifts but if any one of those words come
10:26 - does not have a proper gift associated
10:28 - with it I'm not gonna get anything so
10:31 - let's see it's doing them all but this
10:33 - is actually a great exercise now for you
10:35 - to do a loading bar because this takes a
10:37 - while and actually I got lucky I guess
10:40 - like all 100 of them worked but if I
10:42 - want to see them like appearing as they
10:44 - come in
10:45 - want to do them more in parallel I want
10:46 - to sequence them but hopefully you've
10:48 - seen the range of ideas here so I'd
10:50 - encourage you to take this code play
10:52 - with it maybe back out of the promise
10:54 - tall thing what can you add a loading
10:56 - bar how can you like load them cleverly
10:58 - and try some other stuff with it and I
11:02 - also I think I'm forgetting I guess I'll
11:05 - do this in another video if I can
11:06 - remember I also can use try and catch
11:09 - inside of this async function if I want
11:11 - to handle the errors in a slightly more
11:13 - custom way I think that's correct
11:16 - but if that's not correct eventually
11:17 - I'll make a video about try and catch
11:19 - thanks for watching this series on
11:21 - promises I think I now have made a video
11:24 - tutorial that follows this list leave me
11:27 - your comments and your questions and all
11:29 - that sort of stuff and I'll see you
11:31 - again sometime goodbye
11:37 - [Music]
11:40 - you