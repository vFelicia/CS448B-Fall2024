00:00 - hello welcome to the fourth part of this
00:01 - coding challenge now this fourth part of
00:04 - the coding challenge is just going to
00:05 - start in a sort of middle place and it's
00:08 - actually um a fourth part that I
00:09 - recorded last week where I add sound the
00:12 - reason why I'm here at the beginning of
00:13 - this video just to let you know about
00:15 - this is because um I made some
00:17 - improvements in the third part of the
00:19 - coding challenge where I uh increased
00:21 - the peg size and uh and fix some of the
00:25 - uh physics setting so um if you if
00:27 - you're curious about that you can go and
00:28 - you haven't watched the third part go
00:30 - back watch the third part otherwise stay
00:31 - here watch the fourth part where I add
00:33 - sound and then uh check the code on
00:35 - GitHub make your own version of this the
00:37 - code on GitHub will have all the pieces
00:38 - from all the parts uh combined together
00:40 - so thanks enjoy watching me add sound
00:43 - which will actually be some dinging
00:45 - which will be very annoying so if you
00:46 - don't like loud a lot of dinging please
00:49 - go go find some other vi video of some
00:51 - cute kittens snuggling or something on
00:52 - YouTube there's lots of those they have
00:54 - many more views than me which is fine
00:56 - there's no competition with the cute
00:58 - kittens I think I'm off topic enjoy the
00:59 - coding challenge goodbye so now what I
01:02 - have in the um the directory here uh I
01:07 - did this dur when I took a little break
01:09 - if I go to the Plinko example I have an
01:12 - MP3 file ding called
01:15 - Ding which makes a little ding I have a
01:17 - feeling this is going to be somewhat
01:20 - annoying that it's going to make a ding
01:21 - sound but let's let's give it a try
01:23 - anyway and see what happens I think it
01:25 - would be much more exciting to have them
01:26 - be musical notes and maybe in in a
01:28 - certain key or something and it plays a
01:29 - little song I hope you create that so um
01:32 - you can use sound synthesis so I am just
01:34 - going to add a function
01:37 - preload which is a an easy way to load
01:40 - some media assets before the sketch
01:42 - starts without a call back although I
01:44 - certainly could use a call back and I'm
01:45 - going to make a variable called Ding I'm
01:47 - going to say ding equals load sound uh
01:49 - ding. mpp3 now one thing I need to make
01:52 - sure is in
01:54 - index.html I don't see oh I do have a
01:56 - reference to
01:57 - p5.js so you need to also load the Sound
01:59 - Library
02:01 - and now what I'm going to do is uh go
02:04 - back to here and I just want to play the
02:07 - sound so what I want to do is I'm just
02:09 - going to add
02:11 - function uh mous
02:14 - pressed uh and I'm just going to say
02:16 - ding.
02:17 - playay so let's just see what this
02:20 - does oh I
02:25 - I so that's basically all I need is that
02:28 - really loud I hope that's okay okay um I
02:31 - I think I have the volume kind of turned
02:33 - down as it goes in um so now here's the
02:36 - thing I thought oh this will be an easy
02:39 - problem all I have to do is play the
02:41 - sound every time a particle hits a
02:47 - Plinko or a peg I'm going to have to
02:49 - look at the matter.js
02:51 - documentation because the problem is I'm
02:54 - not in control of the physics remember I
02:56 - just set up the world and said put these
02:58 - things in in these locations and and let
03:00 - it
03:01 - go about to sing a copyrighted song
03:04 - which I stopped myself to do okay you
03:07 - really don't want me to um so um how do
03:10 - I know if I'm not in control of the
03:12 - physics engine when a particle hits a
03:14 - peg you know I could start to look at
03:16 - their distance against each other but
03:18 - that's then I'm like the whole point of
03:20 - this I'm not um so Mo so I'm not the one
03:23 - I don't want to do that because then I'm
03:24 - rewriting the physics engine the physics
03:25 - engine is doing this so most physics
03:27 - engines come with some type of event
03:29 - listener a way that I can get a call
03:32 - back function that's triggered Whenever
03:33 - two bodies Collide so I actually have no
03:36 - idea how to do this CU I haven't tried
03:37 - to do this yet with matter.js I've done
03:39 - it with box 2D and other physics engines
03:42 - so let me come over here and I guess
03:43 - we're just going to have to start
03:44 - looking in the matter.js
03:47 - documentation um so I'm going to look in
03:51 - uh documentation what am I looking for
03:54 - events that sounds right Events off
03:57 - events on a callback function to a given
04:00 - event so this might be right trigger no
04:03 - event on I have a feeling that's it
04:05 - subscribe Now what are my possible event
04:08 - names and what is the
04:10 - object I need some more information here
04:13 - matter.js documentation so let me think
04:15 - about this maybe there's an
04:17 - example uh is there an example matter.js
04:21 - example uh Collision
04:25 - event uh so this looks like exactly what
04:28 - I want to do I I want to know when a
04:31 - when a collision has started and I want
04:33 - to know which things have collided so
04:36 - let's grab this code and put it
04:40 - in right here so and okay so matters.
04:45 - event so what I'm going to do I'm gonna
04:47 - I'm going to keep with our way of doing
04:48 - things and I'm going to say events
04:50 - equals matter. events just to keep that
04:53 - in my list of aliases and I'm going to
04:55 - say events on and I should I need to do
04:58 - this in setup so as after I've made the
05:01 - engine I can create I want to assign a
05:04 - collision start event and I'm going to
05:07 - take this out here and say
05:09 - Collision so I'm going to I think it'll
05:12 - be a little easier to read here if I
05:13 - have my own function called a collision
05:16 - that receives an argument called event
05:19 - so the idea here and I apologize for
05:21 - this not being let me see if I can move
05:22 - this over a little bit so the idea here
05:25 - is that I'm going to say I want to
05:28 - assign a collision start event event
05:30 - with this particular engine to this
05:32 - function called collision and then this
05:33 - function Collision will automatically
05:35 - receive an argument called event which
05:37 - is going to have information about
05:39 - what's collided so I'm just going to say
05:41 - console.log event I just want to see
05:44 - what those events look like so let's see
05:47 - if this
05:49 - works ah okay okay stop stop there's too
05:52 - many there's too many of you I just want
05:53 - to look at one so what I see is
05:56 - Collision start a pair the pair has ooh
05:59 - an object it has a body a and a body B I
06:03 - have a feeling that these are the two
06:04 - things that have collided body a and
06:07 - body B so that's good I need that
06:10 - there's probably other there's
06:11 - information about the Collision all
06:13 - sorts of par there's all sorts of stuff
06:14 - in there but I think it's enough for me
06:16 - to look at the event
06:19 - pairs index
06:22 - zero why could there be multip I guess
06:24 - there could be multiple pairs in the
06:26 - same time um that that come into one
06:28 - event but I'm going to so I want to look
06:30 - at the pairs are event
06:33 - Pairs and then the um
06:39 - Collision is the I'm going to do a loop
06:43 - I'll do a loop that's fine there could
06:44 - be multiple pairs so this is an
06:49 - array probably unnecessary it looks like
06:51 - there's just one pair each time but I'm
06:53 - going to say body a equals pairs index
06:57 - I body a
07:00 - and body b equals pairs index I body B
07:04 - now bodies can have labels and names and
07:07 - IDs which could allow you to uh and I
07:10 - think I'm going to need to do this
07:11 - actually I'm going to need to assign
07:12 - them a label um so uh let's just look at
07:16 - this for a second so let's look at what
07:17 - I'm getting and let's just look at
07:19 - console.log body
07:21 - a and body B oh maybe I need to do look
07:26 - at those separately let's just look at
07:27 - one of them let's just look at body a so
07:30 - here we go refresh wait hold on why is
07:32 - that stupid X thing there okay refresh
07:35 - so okay now I'm getting I'm getting a
07:37 - body oh look it even says Circle body it
07:39 - has a label and it has an ID so this one
07:43 - has a label it has a different ID so
07:46 - this is good so the thing that I want to
07:48 - know though is all these things can
07:50 - collide with each other I want to know
07:52 - only when a particle has collided with a
07:55 - Plinko I mean I might want to know when
07:57 - particles collide with each other or
07:59 - part collide with the the ground body or
08:01 - the wall these bucket things but just
08:03 - for right now I want to know when so so
08:07 - uh the way that I'm going to do this is
08:09 - there's probably a mechanism in
08:11 - matter.js that might handle this for me
08:13 - but here's the thing this is my thing
08:15 - particle my particle has a body in it
08:18 - and what I want to do is I'm going to
08:19 - say this do
08:21 - body dot uh I'm G this is what box 2D
08:25 - does actually box 2D allows you to sign
08:27 - user data so I'm just going to kind I
08:29 - don't I'm trying to think of what's the
08:31 - best way you know actually I'm just say.
08:34 - particle oh no no no uh I'm going to say
08:38 - type uh yeah I'm just say type equals
08:41 - I'm just I'm just going to use a string
08:43 - so I'm adding my own property to the
08:46 - matter.js body called type and I could
08:49 - use the lab maybe I should just use its
08:50 - label I'm going to overwrite its label
08:52 - how about that and I'll call it particle
08:55 - because I'm not using the label for
08:56 - anything else I don't think internally
08:58 - particle doj is is using the label so I
09:00 - need to give particle a label and then
09:03 - in the Plinko thing I'm going to say I'm
09:07 - going to give it a label as
09:08 - Plinko so now what I want to do is in
09:12 - that
09:13 - listener right where I have this
09:16 - Collision I want a console log body. a.
09:20 - label let's look at
09:22 - this particle particle particle particle
09:25 - poo particle particle so let me look at
09:28 - body. a label and body. B label so now
09:31 - we're seeing particle and Plinko
09:34 - particle and Plinko particle and Plinko
09:35 - Plinko and particle Plinko and particle
09:37 - Plinko and a particle particle in a
09:39 - rectangle body right that's the bottom
09:41 - so I only want to play the sound if it's
09:43 - a particle and a Plinko so what I can
09:46 - say now
09:50 - is if body
09:53 - a is a
09:57 - particle and body
10:01 - B oh label so hold on uh let's just call
10:05 - label a equals body A's
10:08 - label and label
10:11 - B is B's B's label got this whole extra
10:16 - Collision listening thing in this video
10:17 - tutorial all of a sudden so now I want
10:19 - to say if label a is a particle and
10:22 - label B is a
10:27 - Plinko uh what is what was it called
10:30 - ding.
10:31 - playay and then uh this is a very silly
10:34 - way that I'm going to write this because
10:36 - there's all sorts of nicer ways I can
10:37 - write this but also you know if the
10:39 - first one was a Plinko and the second
10:41 - one is a particle also play the sound so
10:43 - let's give this a try and see what
10:48 - happens oh my
10:55 - God okay okay stop stop
11:00 - please nobody ever run this program
11:03 - again you get the idea though so I
11:05 - encourage you to think be more
11:07 - thoughtful about this let's comment this
11:09 - out right
11:10 - now let's comment that out to think
11:12 - about how could you you know have a
11:15 - different label or different type for
11:17 - each row how could you have a bunch of
11:19 - different sound did that really hurt
11:20 - everybody's ears I'm so sorry um I there
11:23 - needs to be a warning is that going to
11:25 - be like do I need to do that again so
11:28 - hopefully this isn't ruining everybody's
11:29 - ears but I'm actually done with this
11:31 - this is Plinko I'm going to let it run
11:34 - uh for a little while uh thank you for
11:36 - watching this was
11:39 - uh I could have recorded my uh train
11:43 - whistle thing um so this is the Plinko
11:46 - coding challenge in matter.js I hope
11:49 - that you make a better version of this
11:50 - maybe you think of create I me you uh
11:53 - you think about the visual design of it
11:55 - you think about the sound aspect of it
11:56 - you think about why you're using it in
11:58 - the first place um perhaps you can use
12:00 - it as a part of a game or something else
12:02 - or a poetry generator um I'm sure there
12:05 - are like lots of inaccuracies in terms
12:07 - of like an actual perfect Plinko board
12:10 - that creates a nice normalized
12:12 - distribution you should see a nice bell
12:14 - curve so maybe you can make a variation
12:15 - of it where you really see that bell
12:17 - curve um perfectly um so share those
12:20 - with me um share share the versions you
12:22 - make and uh I'll see you in another
12:24 - coding challenge someday thanks for
12:26 - watching
12:31 - [Music]