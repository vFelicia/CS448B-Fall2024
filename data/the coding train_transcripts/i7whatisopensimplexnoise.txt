00:00 - - Hello! Now, this video
has been a long time coming,
00:04 - because let me tell you something:
00:06 - I've been living in the past.
00:07 - I've been living in 1983 my whole life,
00:10 - I mean, I didn't live in 1983
for ten years of my life,
00:12 - then I actually lived in
1983, and then the years
00:15 - went on, but since then, or at least
00:17 - for the recent times in those--
00:18 - making those coding training
videos about Perlin Noise,
00:21 - I was living in 1983, '83 all on,
00:23 - and I sort of knew that
but I never really bothered
00:25 - to look into it, I didn't want to know,
00:26 - I didn't want to know about
what's happening since 1983.
00:29 - (laughs)
00:31 - I, am going to update my life, right now,
00:34 - and your life too, 'til the year 2001,
00:36 - and actually more like the year 2014
00:39 - and all they way to the
present, because today,
00:41 - I'm going to unpack what it means,
00:44 - to the best of my ability, what is--
00:46 - what is the difference between
00:48 - the original Perlin Noise
implementation of 1983,
00:51 - something that came out in 2001,
which is an updated version
00:55 - of Perlin Noise called Simplex
Noise by Ken Perlin himself,
00:59 - and some open-source implementations
01:02 - that have been made more recently,
01:03 - notably by Kurt Spencer
called Open Simplex Noise.
01:07 - So, (chuckles) a lot of stuff
to cover here, this video
01:11 - will be approximately 71
hours and 32 minutes long,
01:14 - I hope you enjoy it.
01:16 - 1983, the original Perlin noise,
01:19 - a type of what's known as gradient noise,
01:22 - was developed by Ken Perlin in 1983,
01:24 - um, Ken Perlin won an
Academy award for this work.
01:28 - It is the-- the algorithm that
Ken Perlin invented in 1983
01:32 - forms the basis for the source code,
01:35 - the implementation that's
in processing itself
01:37 - and all these videos I've
made about Perlin noise.
01:39 - Where I first learned about, uh,
01:41 - how the Perlin noise algorithm
actually worked was from
01:43 - an article written by Hugo Alias.
01:45 - This page is no longer on the internet,
01:47 - but you can find it
through web.archive.org.
01:50 - This is a wonderful
introduction, noise functions,
01:52 - talks about, uh, random
sampling, interpolation,
01:57 - amplitude and frequency, octaves,
01:59 - and looks at this kind of
gradient-smoothing process
02:02 - that happens to create
Perlin noise and explains
02:05 - why you get these sort-of patterns.
02:07 - How all this stuff works--
02:08 - there's actually even imputation.
02:09 - So. But I am not going
to go through this today.
02:12 - Um, I will point you to
the idea of gradient noise.
02:15 - This is a key idea, because
the idea of Perlin noise
02:20 - is to smooth gradients, in perhaps what-
02:25 - well let's say we'll consider
here two-dimensional space,
02:27 - to smooth gradients within
a two-dimensional space.
02:30 - Squares on a grid,
02:32 - this is how we usually
think of a 2D space.
02:34 - The reason why I'm
highlighting this is because
02:36 - this idea of how this space is oriented,
02:39 - the geometry of this space
is the key distinction
02:42 - between classic, (chuckles)
what I like to call,
02:44 - classic Perlin noise and Simplex noise.
02:47 - Alright, so we'll come back to that.
02:48 - Next stop on my, uh,
Wikipedia Tour, (laughs)
02:53 - is the page for Simplex noise.
02:56 - So Simplex noise is an
algorithm for constructing
03:00 - n-dimensional noise. It's
comparable to Perlin noise
03:03 - created by Ken Perlin himself.
03:05 - But the key element here is
fewer directional artifacts.
03:09 - So what do I mean by
directional artifacts?
03:11 - Maybe you've noticed this
in some of the videos that
03:14 - I've done before. Let me pull
up this processing sketch.
03:17 - Look at this. Does it
feel like it has this--
03:20 - this is--
03:21 - um, two--
03:22 - I'm visualizing
two-dimensional noise using a
03:25 - third-dimension of noise
as slices of animation.
03:29 - Do you feel this, like, kind of bouncing,
03:31 - like it's kind of like, herky-jerky?
03:33 - Classic Perlin noise
is kind of herky-jerky,
03:35 - it kind of gets to a point
where it stops, it bounces.
03:37 - That, the sort of visual quality of a
03:40 - directional artifact. It doesn't feel
03:41 - smoothly continuous over
long periods of time.
03:45 - And so this is really the
innovation of Simplex noise.
03:49 - Now the innovation has to do with, um,
03:52 - Symplectic geometry, which is really,
03:55 - and this is actually in an
article that I'll refer to, but
03:57 - a Simplex grid looks like this.
04:00 - So the core innovation is the idea that
04:02 - instead of smoothing the noise,
04:04 - calculating these gradients over a
04:06 - square grid, a rectangular grid,
04:09 - a tiled system of equilateral triangles,
04:12 - and there's lots of variations of this.
04:14 - And this also generalizes
to multiple dimensions,
04:17 - and Symplectic-- Symb-- (laughs)
04:18 - I can't say that word,
but Symplectic geometry,
04:20 - which maybe even will be
at topic for another day.
04:22 - I do want to highlight the
work of Stefan Gustavson,
04:27 - um, who is, uh, a computer
graphics researcher.
04:29 - In particular, uh, the page
of documents on Simplex noise,
04:34 - and this PDF, which I'll scroll
all the way back to the top
04:36 - called Simplex Noise Demystified.
04:38 - So, I've read this (stifled
laugh) on the subway home
04:41 - last night, and on the
subway to work this morning,
04:44 - (chuckles) um, and, so I
have some picture in my mind
04:48 - of how this works, I probably
need to read it about
04:49 - 73 times more, but um, this will give you
04:53 - much more background into
the difference between
04:55 - classic noise, which there's a nice, uh,
04:58 - and you can see here, this
idea of these gradients,
05:02 - and Simp-- Simplex noise, and
how the tiling system works in
05:05 - multiple dimensions. So I
encourage you to check that out.
05:07 - Now one of the oddities
about Simplex noise
05:10 - is that there's a patent for it.
05:12 - This, if I'm correct, is the
patent. Patent US6867776B2.
05:19 - Inventor: Kenneth Perlin.
You can download the PDF.
05:21 - Uh, this was filed in 2001,
05:24 - at the time of the
invention of Simplex noise.
05:26 - Um, and there's, uh--
05:27 - (stutters)
05:28 - This is an apparatus
for generation an image.
05:29 - The apparatus includes a computer.
05:33 - The apparatus includes a display
connected to the computer,
05:35 - upon which images from
the computer appear--
05:37 - I will stop doing a dramatic
reading of this patent.
05:40 - And so, to me, I'm not a lawyer,
I'm not an expert in this,
05:44 - but it's unclear to me
what it would mean to use
05:47 - these sort of like, literal version of
05:50 - the Simplex noise algorithm,
which is described
05:53 - in great detail here, in the patent,
05:55 - in, say, a processing
library or processing sketch
05:58 - in an open-source environment.
06:00 - So there is, fortunately, a
post that was on Reddit that
06:04 - I found from four years
ago, from 'KdotJPG',
06:07 - which is a post about this new version
06:12 - of what's called Open Simplex noise.
06:16 - So this algorithm is very
similar, it's highly correlated
06:21 - and relates to the Ken
Perlin Simplex noise,
06:23 - but there are some key
differences. And this--
06:26 - the code for this algorithm
is published here,
06:29 - on 'KdotJPG's GitHubGist
"OpenSimplexNoise.java"
06:35 - (bell rings) Java! And
which means I can use this
06:38 - in process 'cause it's Java,
and if you scroll down--
06:41 - (laughs) first you can
look and be like, "Whoa!"
06:43 - You got to love anything
that has a variable named
06:46 - 'SQUISH_CONSTANT_3D'-- muah!
06:49 - That is a beautiful variable name.
06:50 - Um, but what I want to do
is highlight down here.
06:52 - I looked, I looked, I looked, uh,
06:54 - (chuckles) keep going,
there's a lot of code,
06:56 - Whoa! There's a lot of code! Oh my God!
06:58 - Scroll, scroll, scroll!
06:59 - Ah! Test, and then here.
07:02 - "This is free, unencumbered software
07:05 - released into the public domain."
07:07 - So, I believe this is
something that I can use, and
07:11 - I'm going to use it in
the context of this video.
07:13 - Boy, that was a lot of explanation.
07:15 - So, what does this mean?
07:17 - I want to do another video after this one,
07:19 - which is I just find every
single piece of code I ever wrote
07:22 - using the classic Perlin noise function,
07:24 - and try-- do it again
with Open Simplex noise.
07:27 - But I'll just do that
for one thing right now.
07:29 - Alright, let me go here: 'Raw'.
07:30 - Let me do a nice, big 'copy/paste'.
07:33 - I'm going to go to processing
because processing--
07:36 - this is the sketch, I want to-- whoops!
07:38 - I want to change this
particular sketch from Perlin--
07:43 - classic Perlin 1983
noise, the noise function
07:45 - in the processing library;
uh, AKA, gradient noise.
07:50 - There is also something
called value noise.
07:52 - There's all these fine
distinctions between them.
07:55 - But anyway, it's easy to get confused.
07:58 - And somebody will write a nice,
07:59 - succinct comment that I
will pin to this page that
08:01 - has this all explained
perfectly, I'm sure.
08:04 - Um... Uh, I want to change this
to use Open Simplex noise and
08:08 - I want to examine and look
at the difference in quality.
08:10 - And by the way, what does it mean?
08:14 - What do I mean when I say 'quality'?
08:15 - So first of all, I'm going to re--
08:17 - I'm not going to redo
this whole description,
08:19 - but I'm going to go down
here and I'm going to say--
08:22 - I'm going to read this part:
08:23 - "There have been debates over the accuracy
08:25 - "of the implementation
of noise in Processing.
08:27 - For clairification, it's an implementation
08:28 - "of 'classic Perlin noise' from 1983,
08:31 - "and not the newer 'simplex
noise' method from 2001."
08:36 - So why not-- I mean,
processing, by the way,
08:38 - was invented-- it started
by Casey Reas and Ben Fry
08:41 - as a project in 2001 at the same time--
08:43 - why not update the version of Perlin noise
08:46 - that's in the library?
So I think you could
08:48 - make a good case for-- you
could make an argument for
08:50 - both cases. But there is a
different quality to the values.
08:54 - And there is now, historically,
years and years of
08:57 - people making artworks,
visual artworks and projects
09:00 - based on the quality of the Perlin noise,
09:03 - the noise function in processing.
09:05 - Just say noise, I'm just going
to say noise from now on.
09:08 - (laughs)
09:09 - And if it were to be
updated, those projects
09:12 - would suddenly maybe not look
the way they were intended,
09:15 - not look as beautiful,
not look as compelling,
09:18 - not-- not be as visually distinctive,
09:20 - because it's not that one
is better than the other.
09:22 - I mean, there are reasons why you can say
09:24 - Simplex noise is an improvement,
09:26 - those artifacts, and the smoothness,
09:30 - and the computational
complexity, those types--
09:33 - those are things that had
changed and are updated that are
09:35 - better, in-- in-- according
to different kinds of metrics,
09:39 - but it would make much more sense to have
09:41 - a separate library that you
could use with processing to get
09:44 - Open Simplex noise. I mean,
you could make the case--
09:46 - and there is GitHub
issue/discussion about this.
09:48 - You could make the case that
it might make sense to add
09:51 - to processing something called noiseMode,
09:54 - in which case, you could put in here--
09:57 - I don't know what the
terminology would be--
09:59 - (laughs) I would put in
'1983'. Put the year--
10:02 - No, but you could put in
maybe 'gradient', 'Perlin',
10:05 - 'Simplex', 'value'. You
could have Worley Noise!
10:09 - In my research, there's--
10:11 - look up something called
"Worley", W-O-R-L-E-Y.
10:14 - I want to really implement that
noise. It looks really cool!
10:17 - So that could be something
that you could do.
10:19 - I would say, uh, a good
test case to see if
10:23 - this makes sense to add the
processing API would just be to
10:25 - make it as a library first,
where you could pick your
10:28 - different noiseMode; and then
if everybody in the world
10:31 - is suddenly using it and it
creates so much opportunity
10:34 - and possibilities, maybe
then it would make sense to
10:35 - fold to decor. That would, at
least, be my point of view.
10:38 - I'm not speaking as an
official representative
10:40 - of processing. I'm just
telling you my take on this.
10:43 - (chuckles)
10:44 - Alright, now--
10:45 - (clears throat)
10:46 - So... Let's see the difference,
let's see the difference.
10:51 - This-- this-- this-- this moment,
10:53 - being-- living in the year 2001,
10:55 - in 2019 has really changed my life.
10:57 - So-- ah! One other thing:
because processing is built
11:00 - on top of Java, I can actually--
I'm going to create a tab,
11:04 - I'm going to call it 'OpenSimplexNoise'.
11:10 - I am going to paste in all that code,
11:12 - and this code, because it is written as a
11:16 - stand-alone Java class, will
work just out of the box,
11:19 - right like this, with no
changes in processing.
11:22 - It's really amazing. I
could even, if I wanted to,
11:25 - have named the tab, um,
11:28 - 'OpenSimplexNoise.java',
11:32 - and sometimes this is necessary
11:34 - if there's certain features of Java that
11:35 - the processing IED won't understand,
11:37 - but in this case it's not necessary.
11:39 - And I should say again
'thank you' to Etienne Jacob,
11:42 - for showing me this and giving
me lots of advice and help.
11:46 - I mention Etienne's work
in several videos so far,
11:48 - but, um, okay. So.
11:50 - Now, we're going to change this over.
11:52 - The first thing that I'm going to do is
11:54 - I am going to create an object called
11:58 - 'OpenSimplexNoise', just call it noise.
12:02 - I'm going to say 'noise =
new OpenSimplexNoise object',
12:08 - and I'm just going to
run this to make sure
12:09 - I'm not getting any errors.
I am getting errors.
12:12 - Oh! Weird!
12:15 - (scoffs) Amazingly..
12:17 - (laughs)
12:18 - I did this yesterday! I
swear I did this yesterday
12:21 - just to test, and I didn't
have to make any changes;
12:23 - but this is one of those things:
12:25 - you can't have static functions in a class
12:28 - inside processing. It
has to do with things
12:30 - being internal classes, yada yada yada.
12:33 - So, what I'm going to do--
let's try renaming this to
12:36 - 'OpenSimplexNoise.java'.
12:39 - I think that will, uh, fix that issue.
12:42 - Great! So, no errors, and
12:44 - maybe that's what I did before
and I just didn't notice.
12:47 - It's running now, it's running
the current noise algorithm--
12:50 - the noise function in processing.
12:51 - Now, we're getting-- we're getting close.
12:54 - What I'm going to do
now is just change this,
12:57 - comment this out; I'm going
to put this in and instead,
13:01 - what I'm going to do is I'm
now going to say 'noise.eval',
13:05 - so that noise object
has an 'eval' function.
13:08 - The 'eval' function takes one val--
13:10 - I don't know if that-- if it's supporting
13:11 - one dimensional noise
but we can talk about
13:13 - how you can get that. You
just fix the second dimension.
13:16 - But then I give it the
arguments for 3D noise:
13:18 - x-offset, y-offset, and z-offset;
13:21 - and now using the library's
noise function instead of
13:23 - the built-in noise function.
13:25 - Let's run this. I'm going to get errors.
13:26 - Cannot convert from a double to a float,
13:28 - so this is a little bit
of funny business that
13:30 - we're stuck with here and this is what I--
13:32 - if turning into a processing
library, I would clean this up.
13:35 - Processing in its, uh,
simplification of Java
13:40 - has basically ignored the
existence of the data-type double.
13:45 - Double is a floating point--
13:47 - (it's not a floating point I would say)
13:48 - - -decimal number that has more memory,
13:50 - more accuracy, more digits,
than just floating point;
13:53 - and so here what I need to
do is do something like,
13:56 - well I need to convert--which
is called casting--
13:59 - what comes out of the
eval function as a float.
14:03 - And then look at this!
14:05 - Now interestingly, this
looks so different!
14:09 - Now there's a couple reasons
why this looks different.
14:10 - One, is-- look at those, look at those!
14:13 - I don't see a single
directional artifact in there.
14:15 - Do you see any directional artifacts?
14:17 - There are no discernible directional--
14:19 - look at this just, like, flowing,
smooth, noisey transition.
14:24 - Okay. Now-- but it looks kind of weird,
14:28 - and one of the reasons
that it looks weird is that
14:30 - the noise functions are
generally designed to
14:33 - give you a number between
-1 and 1, the mean being 0.
14:38 - Processing simplementations
gives you a value
14:40 - between 0 and 1 as a sort of convenience,
14:42 - so this multiplying by 255--
14:44 - this is why we see these vast areas
14:46 - of the color black, because
any noise value that's
14:50 - less than 0 gets reduced to black,
14:52 - which is kind of interesting to know.
14:55 - Now, what I can do here--
14:57 - and I should really take
out the third dimension to
14:59 - demonstrate this--
15:00 - but-- so if I change this to float 'n',
15:03 - and then I say, uh,
float bright = map 'n',
15:08 - which goes between -1, 1, to 0, 255, now--
15:12 - Whoa! That's not what I meant
to happen, but that is cool!
15:17 - Okay, uh, this is
actually a really nice but
15:19 - accidental effect. I kind
of love that I got this, but
15:21 - I forgot that I had
previously multiplied it
15:24 - by 255 here, so that I need to take out.
15:27 - I'm sure the chat is
yelling at me about that.
15:29 - There we go. This looks
more like what you--
15:33 - what we originally started with.
15:35 - It's a different noise algorithm.
15:37 - I'm visualizing it in
very literal fashion,
15:40 - in a two-dimensional space,
um, and there you go.
15:44 - Now, there's lots of ways we could
15:46 - alter the quality of what we're getting.
15:48 - I mean, one thing would
be this increment value,
15:51 - is really playing a big role in, um--
15:55 - and the z-increment value
is playing a big role in the
15:57 - quality of what we're seeing.
15:58 - Like, for example, let
me make increment .1--
16:01 - like, suddenly-- look: that's
what the noise looks like.
16:03 - Look at that! Ooh, this is
really nice! Oh I love this!
16:08 - And then, uh, I could--
the z-increment, you know,
16:11 - if I made that really fast,
then you're just seeing it
16:14 - sort of like, changing
really fast, and that--
16:16 - that now has a lot more sort
of chaotic randomness to it,
16:19 - but ultimately this is a nice addendum.
16:21 - Now, the quality of this
has such a sort of like,
16:23 - smoothing, graceful visual quality,
16:26 - even that moving beyond, uh,
16:30 - uh, just this very plain
visual representation--
16:34 - they're enormous possibilites.
16:36 - And I would refer you to the work--
16:39 - let me just refer you to
the work of Etienne Jacob,
16:42 - who, uh, makes all these amazing, um,
16:48 - gifloops, uh, using Open Simplex Noise
16:52 - and a variety of techniques--
16:53 - all described in his blog post.
16:54 - So now, this-- thus this ends this video,
16:57 - which I don't think was a
coding challenge at all,
17:00 - just explaining a little
bit about the background and
17:02 - difference between the
different noise algorithms;
17:04 - and I will now do a video
where I attempt to loop--
17:11 - I will do a coding challenge where I--
17:12 - I'm going to do two more things:
17:14 - I'm going to do one coding challenge
17:15 - where I attempt to do a
two-dimensional noise loop
17:18 - using four dimensions (I'll
explain what that means
17:21 - in a second), and then I
think I also want to do
17:23 - like, a speed video where I just take
17:24 - every single thing I
ever made with noise--
17:27 - it's not going to be everything,
coding-challenges wise,
17:30 - and like change it over
to Open Simplex Noise.
17:32 - Alright? See you in those videos! Muah!
17:34 - (bell rings)
17:35 - (upbeat pop music)