00:00 - hello and welcome to session seven of
00:02 - programming from A to Z and the topic
00:04 - for this session is generating text with
00:07 - something called a context-free grammar
00:10 - so what I want to do in this video is
00:11 - just talk a little bit about the broader
00:13 - topic of what a grammar is and then
00:16 - specifically what a context-free grammar
00:18 - is and look at some different and give
00:21 - you an overview of what code libraries
00:23 - and algorithms you might use to generate
00:25 - text with a context-free grammar and as
00:27 - soon as I'm done with that I'm gonna
00:29 - just move into the next video and
00:30 - actually start to implement a grammar to
00:31 - generate stories and texts or poems or
00:33 - whatever and you will see how you can do
00:36 - it so if you want to just jump to the
00:37 - code you can skip to the next video but
00:38 - here I'll give you kind of an overview
00:39 - so if you're interested in the topic
00:41 - first of all so what is a grammar this
00:43 - is a page about grammars buy at Matt
00:45 - might on Twitter I find it a useful
00:47 - overview of grammars I'll link to it in
00:49 - this video's description and Matt might
00:51 - makes the point which is grammar you
00:53 - could think of it as the language of
00:56 - languages right so we have language but
00:59 - how do you describe the syntax and
01:01 - structure of a language what's the
01:02 - language for a language and that's what
01:03 - a grammar is and if I were to scan
01:05 - through this page there's you know diff
01:07 - bacchus now form grammar and a buck is
01:09 - now extended bacchus now there's all
01:10 - these different syntax syntaxes how do
01:13 - you say house what's the plural syntax
01:15 - some people write in the comments for me
01:16 - and a variety of ways of expressing
01:19 - grammars for a language one thing I'll
01:21 - point out to you whoops is this is a
01:24 - grammar programming languages are made
01:28 - actually with this thing called a
01:29 - context-free grammar so I haven't
01:30 - described what a context-free grammar is
01:32 - but you can see here this is a
01:34 - context-free grammar for C++ statements
01:37 - so you can see what is a statement could
01:39 - be if expression and statement or if
01:41 - expression statement else statement what
01:44 - is a statement a statement could be do
01:46 - statement while expression so this idea
01:48 - of fitting things in to a grammar a
01:51 - defined structure so let's think of okay
01:56 - and so there are a variety of kind of
01:58 - now that sort of seminal work on
01:59 - grammars you can real link to the paper
02:03 - by Noam Chomsky where you can think of
02:06 - grammars divided into four categories so
02:08 - there's this kind of unrestricted
02:10 - grammar type zero which is just
02:11 - basically every
02:13 - in English languages are like highly
02:15 - sophisticated complex grammar but there
02:18 - are also context-sensitive grammars
02:20 - which I think will actually make a lot
02:21 - more sense once I describe what a
02:23 - context-free grammar is so there's a
02:26 - bunch of different kinds of grammars and
02:27 - I Accord you to explore this hierarchy
02:31 - of grammars and think more deeply about
02:33 - grammars beyond what I'm gonna do in
02:34 - these videos but the classic grammar
02:37 - that can be used to create generative
02:41 - text is a context-free grammar so let me
02:45 - talk up to you a little bit about in
02:46 - general what a context-free grammar is
02:48 - maybe we'll look and then I'll show you
02:50 - some tools that allow you to generate
02:53 - with context-free grammars and then I'll
02:55 - just start writing code so context-free
02:57 - grammar is made up by I'm gonna say you
03:01 - could we can use different terms for
03:02 - these things but there's an alphabet or
03:04 - there's a set of valid elements in the
03:07 - language like you can only say the cat
03:10 - you know meow and puppy all right those
03:14 - are that's the alphabet of the language
03:15 - it only has four possible words right
03:18 - the there are also in a grammar there
03:23 - some of these are what are known as
03:25 - terminal and some of these are known as
03:29 - non terminal so the alphabet is terminal
03:35 - and non terminal now this is probably a
03:36 - bad idea
03:37 - but I'm going to just use like sort of
03:40 - generic characters for this alphabet so
03:42 - let's pretend that we have an alphabet
03:44 - which is a B and C and those are this is
03:49 - the alphabet and these are non-terminal
03:54 - characters I don't know what I put these
03:56 - little quotes around them for for no
03:57 - particular reason and then we also have
04:00 - terminal characters and those will be D
04:03 - E and F okay so these are terminal
04:07 - characters now the grammar will also
04:09 - have production rules a production rule
04:16 - is a rule and these are also referred to
04:18 - as like replacement rules so a
04:20 - production rules are ruled by which if
04:23 - you have a certain character
04:26 - like eh what does that get replaced with
04:30 - let's say egg gets replaced with B D E
04:34 - and B gets replaced with a F and C gets
04:42 - replaced with a so this now could make
04:47 - up the entire grammar and I kind of hate
04:50 - what I'm doing here and I'm doing it
04:51 - anyway and I knew this morning when I
04:53 - was having the same discussion that I
04:55 - shouldn't do it this way because I think
04:56 - this makes so much more sense if I have
04:58 - content here right but let's look at it
05:00 - let's just think about it in the
05:01 - abstract sense and as I start to go
05:03 - through code examples we'll get to well
05:06 - I think it might if this is confusing to
05:09 - you when we ask some actual content it
05:10 - might click in for you okay so these are
05:13 - the production rules so now what I need
05:14 - is this is sometimes referred to as an
05:16 - axiom or maybe a starting sentence but
05:19 - what I'm gonna call it an axiom just to
05:21 - be formal here what I need is an axiom
05:23 - so what do I start with so let's say I
05:26 - start with the axiom a C so what that
05:33 - means is I start with a C and then I
05:35 - start to go through my replacement rules
05:38 - what am I doing here a becomes B D E so
05:43 - this becomes b d e and c becomes a now
05:50 - we do this again B becomes a F and D is
05:55 - terminal so D stays as D E is terminal
05:59 - so e stays as E and a becomes what B D E
06:04 - so I could keep going now event I didn't
06:08 - do this very smartly because my non term
06:11 - might non-terminal characters all all
06:15 - get replaced with something that is also
06:17 - non terminal so this is kind of this
06:20 - this way this this is known as an
06:21 - expansion I'm expanding out the grammar
06:24 - by iteratively running these replacement
06:27 - rules over and over again and when we
06:28 - write the code for this you'll see this
06:29 - happens with this fancy thing called a
06:31 - recursive algorithm but you can see here
06:34 - that that that this is going to get go
06:39 - until infinity
06:40 - but if I were to do this in a slightly
06:41 - different way for example I'm going to
06:45 - show you a grammar created by Alison
06:47 - Parrish for a class that she teaches
06:53 - called reading and writing electronic
06:54 - text I encourage you to check out those
06:56 - examples a lot of my code is ported from
06:58 - her code in Python and you can see here
07:02 - here are here are the sets of production
07:06 - rules sentence becomes noun phrase noun
07:10 - phrase verb phrase or a sentence becomes
07:12 - interjection noun phrase verb phrase a
07:14 - noun phrase becomes determined or noun
07:17 - or determiner noun that verb phrase so
07:19 - you can see these are all the possible
07:21 - and these are all non-terminal
07:23 - non-terminal elements of the grammar and
07:27 - then here you can see um here are some
07:29 - terminal elements for example
07:31 - interjection could be O or my or Wow or
07:34 - Dan sort of like a cursed on my youtube
07:36 - stream I just call it my YouTube stream
07:39 - that's also a little bit weird
07:40 - determiner is this that are the so if I
07:42 - were to just go to the example I'm going
07:44 - to not bother looking at the code but we
07:46 - can see here if I go to week eight a
07:50 - context-free grammar reader this example
07:52 - generates is this the right one that I
07:54 - was looking at yes this example
07:56 - generates sentences based on that
07:58 - grammarly move this a little bit over
07:59 - and zoom in here and you can see Wow the
08:02 - bald restaurant sneezes my the smug
08:04 - corsage computes that overstaffed
08:06 - corsage this corsage inter inter
08:09 - interprets the blue restaurant so
08:11 - there's a lot of course notches in this
08:13 - particular generative system so it's
08:16 - interestingly enough typically what you
08:19 - might use a grammar for I'm over here
08:22 - now and I kinda want to leave this but I
08:23 - think I want to refer to this later what
08:25 - you might worth you use a grammar for is
08:27 - you have an existing sentence maybe you
08:30 - have a bit of code like for example what
08:32 - if I go to a code editor I'm jumping
08:36 - around like a crazy person here let's
08:38 - see if this works with code pen I'm
08:40 - gonna go to code pen and we make a new
08:42 - pen and I'm gonna say something like if
08:47 - for VAR I equals zero let's make this
08:50 - bigger
08:53 - I is less than I plus plus now where's
08:58 - my JavaScript linter to God here we go
09:00 - here look at this unexpected token so
09:03 - look at this how does the code
09:06 - environment understand that this
09:09 - semicolon is unexpected it should be
09:12 - there so normally not normally but one
09:14 - way of using a grammar and in this case
09:16 - a context-free grammar is to look at an
09:19 - existing sentence like this block of
09:20 - code and see if it fits
09:22 - right the reverse see if it fits the
09:26 - structure of the grammar going in
09:28 - Reverse and if it doesn't right then
09:30 - there's an error like oh there's got to
09:33 - be something here like let's look at it
09:34 - without the parentheses we can see here
09:38 - right unexpected token so it's a lot
09:40 - expected tell you it's getting some new
09:42 - thing that doesn't fit doesn't fit the
09:44 - grammar so this is one way that grammars
09:46 - are used to evaluate text and that might
09:48 - be something you explore but what I'm
09:51 - exploring is the reverse which is saying
09:53 - here is the grammar start with a
09:56 - sentence start with an S turn that in to
09:59 - either noun phrase verb phrase or
10:00 - interjection noun phrase verb phrase and
10:02 - let's see what we get again now we I
10:04 - showed this to you already but let me
10:06 - make a new one and we can see that
10:08 - seagull right that is a noun phrase
10:12 - determiner noun that seagull
10:16 - so that can see that that fits that
10:18 - computes this corsage is a verb phrase
10:22 - right which is I probably ended up
10:24 - getting oh you know it that it actually
10:27 - made the noun phrase determiner now that
10:29 - so you can see how this gets complicated
10:30 - right I'm trying to I could diagram and
10:32 - run backwards
10:33 - but the point is I don't need to do that
10:35 - I allow you to do is write the grammar
10:37 - and then if I have a system that
10:38 - generates text it habit so one of the
10:40 - nice things about working with this and
10:42 - it's say you're gonna do a exercise or
10:44 - try some playful experiment based on
10:45 - these videos that I'm making is you
10:47 - could just write your grammar you don't
10:49 - need to write any code potentially
10:50 - because there are a lot of existing
10:52 - systems that will read a grammar file
10:54 - and generate text based on it and so let
10:56 - me give you an overview so I'm going to
10:57 - show you three things um the first thing
11:00 - I'm going to use is a grammar called
11:02 - tracery a grouse are a grammar story
11:05 - grammar generation system
11:06 - called race tracery for JavaScript
11:08 - written by Kate Compton at galaxy Kate
11:11 - here on github and you can see there's a
11:14 - syntax to it which I'll go over and talk
11:16 - about in the next video there's some
11:18 - nice examples I'll just pull up this is
11:20 - one of my favorite ones I don't know if
11:22 - this is going to if this is called
11:25 - interruption Junction so I don't I
11:28 - encouraged so this is you know I don't
11:34 - know if you guys can hear that but but
11:36 - you know you can't cuz I haven't I
11:37 - haven't piped the sound of this laptop
11:39 - in through the stream but I need to
11:41 - click and need to click so you can see
11:44 - this is one of the things that's
11:45 - interesting about working with these
11:46 - generative systems whether you're doing
11:48 - the Markov chain or context-free grammar
11:50 - or combining them in some way is really
11:52 - not just the algorithm and what it
11:54 - generates but the context where you
11:56 - display those results and I think
11:58 - thinking about dialogue or interactive
12:00 - animated story system there's a lot of
12:02 - interesting possibilities there and if
12:03 - you look through tracer e's the github
12:06 - repository for tracer you'll find a lot
12:07 - of links to a lot of fun and interesting
12:09 - projects made with these kind of crazy
12:12 - grammars so tracery is the number it's
12:14 - the first video that I'm gonna make
12:15 - after this one will be showing you how
12:17 - to build and generate text with a
12:19 - tracery grammar another JavaScript
12:23 - library read a digest that I have
12:26 - mentioned before has a limb grammar
12:30 - object right it's called RI grammar you
12:34 - can add rules to it you can expand those
12:37 - grammars you can check if there's a rule
12:39 - you can load text into it you can remove
12:41 - a role reset so you can see that there
12:43 - this is essentially a JavaScript library
12:45 - that it allows you to generate those
12:46 - grammars I'm sorry that allows you to
12:48 - generate text based on an existing
12:50 - grammar from a file potentially so I'd
12:53 - encourage you to look at tracery and the
12:54 - reader library
12:55 - finally I think for educational purposes
12:58 - and ultimately if you really want to
13:00 - play around with this idea of grammars
13:02 - and context-free grammar that is and
13:05 - customize it highly you might want to
13:06 - write your own code or at least play
13:08 - around with my example code and modify
13:10 - it for example what if while the text is
13:12 - being generated you're querying an API
13:14 - to grab words from say word Nick or
13:16 - something like that you might be limited
13:18 - with using some of these existing
13:20 - libraries or frameworks but if you've
13:21 - written all the code yourself you can
13:23 - kind of add in sort of features that are
13:26 - more procedurally based inside of the
13:28 - algorithm itself as it's running so in
13:30 - that sense the last thing that I'll do
13:32 - besides tracery and Rita is I will show
13:34 - you how to write your own sorry how to
13:38 - write your own grammar object and so I
13:42 - have an example that makes a
13:43 - context-free grammar object and that you
13:45 - can add you can simply just add rules to
13:48 - it whether it's coming from a file or
13:49 - whether it's just directly in the code
13:51 - so those are the things I'm going to
13:52 - show you I'm gonna make up probably two
13:54 - or three or four little video tutorials
13:56 - all about context-free grammars
13:57 - somewhere in there I'll try to make sure
13:59 - I mention the whole idea of a
14:00 - context-sensitive grammar but I think
14:02 - it'll be it'll make more sense once we
14:04 - start looking at their nitty gritty okay
14:05 - so I hope you enjoyed this brief
14:07 - overview check some of the links in this
14:09 - video's description for more reading and
14:11 - materials about the background in theory
14:13 - of using grammars with text and
14:15 - hopefully I'll see you in some of the
14:16 - actual coding tutorial videos next