00:00 - part three of my 2048 coding challenge
00:06 - so what am I trying what do I got here I
00:08 - actually have it's very hard to follow
00:10 - without animations and not maybe I'll
00:12 - come back and add animations in another
00:13 - part but I have the full game mechanic
00:16 - available to play right now
00:17 - so the things that I want to add in this
00:19 - video are number one score number two a
00:23 - test to see if I've run out of moves to
00:25 - say game over and number three I want to
00:28 - be more thoughtful like if I could ever
00:30 - play it well enough to get to 128 she
00:33 - would see that it wouldn't fit so I'm
00:37 - just like randomly making moves right
00:39 - now so I need to deal with the font size
00:42 - to make it more dynamic so let's try to
00:43 - do some of that stuff so according to
00:46 - the game rules I'm going to say let
00:48 - score equal zero
00:51 - whenever you combine two tiles your
00:54 - score goes up by the value of that
00:56 - combined amount so we can say here
01:00 - wherever I have my combined function and
01:03 - again this would be so helpful to
01:06 - organize this so right here
01:09 - whenever I combine if a and B I can say
01:12 - score plus equal a plus B or and why
01:16 - don't I say row index I just for the
01:18 - sake of so I added those two
01:20 - the score goes up by that much now let
01:23 - me just really really quickly in the
01:26 - body add a paragraph ID score and again
01:30 - I'm not going to be this is a very very
01:33 - early crude way of doing it but I'm just
01:35 - going to in using the p5 Dom library in
01:39 - the draw function I'm going to say
01:41 - sketch I'm going to say select score dot
01:47 - HTML score so now should see there's the
01:52 - score okay let's make that score a
01:54 - little bit bigger and I'm just gonna say
01:58 - style I'm just gonna put it in line
01:59 - style here style equals font size thirty
02:05 - two point that should do the trick there
02:10 - we go and now okay so now
02:13 - I should have the score I'm pretty sure
02:17 - this is working correctly as it's
02:19 - supposed to so now I have my score all
02:21 - right boy am i doing great
02:23 - so I added a score that's wonderful now
02:26 - I need to add a check to see if I
02:29 - finished playing the game so how do I do
02:33 - that so in the main code and by the way
02:36 - this is this is the other thing that's
02:37 - terrible I don't want to have a draw
02:39 - loop here I should really just be I
02:42 - should be update canvas I should in
02:47 - setup oh look at all this code this is
02:51 - horrific I should say no loop and again
02:56 - I'm gonna need to animate later so I'm
02:58 - gonna need the draw loop back but just
03:00 - for right now in keep rest where I say
03:05 - if the game was played I'm gonna say
03:08 - update canvas so now and I should to it
03:15 - at least once at the beginning update
03:19 - canvas so now at least
03:21 - performance-wise I'm not like spinning
03:24 - the browser sprinting that using the
03:26 - processor over and over again to redraw
03:27 - the same thing okay so now I need a
03:29 - check when I've played I need to right
03:34 - here I need to sue is game over so I'm
03:40 - going to write a function
03:41 - I'm just going to put it on the top
03:42 - right now function is game actually we
03:49 - kind of know here's the thing the game
03:52 - is over if there are no numbers next to
03:56 - each other that are identical and the
03:58 - board is full so there's no zeros so I
04:01 - can write a function I will write this
04:02 - function is game function is game over
04:07 - and I'm gonna say I'm gonna do a loop
04:11 - I'm gonna get my double loop which I
04:13 - have everywhere and for each spot I'm
04:22 - gonna I'm gonna assume
04:24 - game over is true
04:27 - and I mean for each spot if the grid I J
04:35 - equals zero then the game is not over
04:40 - return false so if there's a zero the
04:43 - game's not over because I can move if
04:48 - grid I J equals grid I J plus one so I
04:59 - could check everything to the right and
05:01 - just go zero through three but I'm gonna
05:07 - have to check the four for a zero I
05:09 - think if it's equal then something can
05:14 - be combined return false if grid I J
05:23 - equals grid I plus 1j j then also the
05:31 - game is not over so the game is not over
05:34 - and really so the game is not over if
05:39 - there's any zeros or and so I'm gonna
05:45 - check every single spot but I'm only
05:49 - gonna check the edges if I is not equal
05:53 - to three and there's two that are the
05:57 - same or if J is not equal to three and
06:01 - they're to the same so this should tell
06:03 - me if I get through every single spot
06:06 - and it's not equal to what's to the
06:09 - right of it or to blow it or it's not a
06:10 - zero then the game is over and so if I
06:16 - get to the end I'm going to say return
06:17 - true I don't actually need this boolean
06:19 - variable at the beginning this is my
06:21 - ridiculous function now to determine if
06:23 - the game is over and where did I check
06:26 - it here so I'm going to say let game
06:29 - over equals is game over and if game
06:35 - over console dot log
06:38 - game over okay let's see if this works
06:45 - up sketched a test line 13 has an error
06:49 - if J oh I'm missing a curly bracket
06:56 - somewhere I'm in extra parentheses there
06:59 - we go okay here we go let's take this
07:02 - again line 21
07:04 - I have an extra bracket here now okay
07:08 - let's try to make the game over I'm just
07:13 - gonna rely on my random whatever there
07:20 - we go uncut type error cannot read
07:23 - sketch such as line 13 property 0 of
07:26 - numb undefined so I got into a funny
07:28 - place here so I guess now the game is
07:31 - over but I got an error when the game
07:33 - ended if J is oh whoops look at this I
07:39 - got to be checking J here and I here I
07:42 - did this in like a weird order I want to
07:44 - do I first and J second so that was a
07:46 - mistake
07:47 - what I should I should build in
07:49 - something to test it without having to
07:52 - like go crazy playing it but you know
07:57 - eventually I get to the game over game
08:02 - over okay it actually tells me the game
08:06 - is over because there are no more moves
08:08 - left okay now we need to let's add a
08:10 - little bit of color and change the font
08:12 - size so where do I where do I draw the
08:16 - text here so text size should be
08:21 - actually a function I'm going to map the
08:26 - value which goes between 0 and 248 and
08:32 - when it's 248 it should be 16 point and
08:37 - when it's 0 it should be 64 so it's
08:41 - bigger
08:42 - maybe it's like 16 point when it's 2048
08:45 - so let's try this why is the font size
08:51 - not changing
08:52 - okay so this was kind of a nice idea but
08:55 - now I'm realizing that basically I
08:57 - really need to shrink it exponentially
09:00 - as it goes down so I really should take
09:03 - like the log of the value maybe I could
09:07 - and then that'll go from zero between
09:10 - the log of zero and 2048 will this do
09:13 - the trick for me to dip logarithmic
09:16 - scale yeah you can see it's getting but
09:22 - ultimately yeah so this is better using
09:26 - logarithmic scale it's a little bit
09:27 - nonsensical because really I should just
09:28 - have a better idea
09:30 - like let's get rid of this for a second
09:32 - let's just let's just convert it into a
09:36 - string so this is be making a string
09:40 - from the value and then I want to get
09:46 - the length of that string and then the
09:51 - font size text size should be the I can
09:57 - make an array right sizes equals okay so
10:04 - if it's the if it's one I want to be 64
10:07 - if it's two I want it to be 64 if it's
10:11 - three maybe 32 and if it's for 10 24 to
10:15 - 48
10:15 - let's make it 16 so now I just want to
10:18 - say sizes just based on that length so I
10:23 - could just see how long is the string
10:25 - and then pull one of these from the
10:27 - array based on the length is now an
10:28 - index into that array and that should
10:30 - give me hook to play it for a little
10:34 - yeah 16 which is 200 this it would be 0
10:40 - so length plus or minus 1 apologies for
10:45 - that
10:47 - so now if I get to 3 if I have to get to
10:52 - 10 you're gonna have to trust me on this
10:54 - this is gonna require a lot of editing
11:00 - so I'll come up back in a minute
11:01 - oh I'm back because I finally got a 128
11:04 - and you can
11:05 - the 128 is smaller oh boy you could do
11:07 - so many better ways of doing that okay
11:11 - so now you know obviously I couldn't map
11:13 - a color to the background I could do
11:15 - animations but this is really it
11:17 - I now have essentially the full game I
11:19 - have a mechanism for trying to figure
11:21 - out you know I could map a color to each
11:24 - number easily by having some kind of
11:27 - lookup table but I it's some point maybe
11:29 - I'll come back and try to animate this
11:31 - but please please make your own version
11:32 - of this improve it this is the end of
11:35 - this coding challenge I have made 2048
11:42 - it's not what it's called goodbye
11:48 - [Music]