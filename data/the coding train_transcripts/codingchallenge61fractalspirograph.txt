00:00 - hello welcome to a coding challenge
00:03 - fractal spirograph day today here on the
00:06 - coding Train choo Cho all that sort of
00:08 - stuff so what you're about to watch is
00:11 - really awkward and a little bit odd it's
00:12 - going to have some awkward edits in it I
00:14 - had several long stretches where I got
00:17 - sort of stuck on a debugging problem if
00:19 - you're interested in that longer
00:21 - debugging process you can go and click
00:23 - on there's a there'll be a link in this
00:24 - video's description to the long almost
00:26 - like 2 hour at this point live stream
00:29 - where I uh did this challenge but what
00:30 - you'll see here is that I do have an end
00:32 - result that closely matches this
00:34 - particular image on this blog so the
00:36 - blog is Benise equation
00:42 - blogspot.com um is uh thank you to CJ
00:45 - Chen um the Creator I believe of this
00:48 - blog proposing and describing some of
00:50 - these images so this coding challenge is
00:52 - going to start twice because I'm doing
00:53 - this intro and then it's going to
00:55 - actually happen where I'm going to
00:56 - introduce it again because I think that
00:57 - I don't need this intro and then at the
00:59 - end it's actually going to end twice cuz
01:01 - I I'm going to finish and then realize
01:03 - and come back and add a few bits to make
01:05 - this more closely match the images on
01:07 - this particular blog so I hope you make
01:09 - something creative with this I I really
01:11 - hope this this uh has some put something
01:14 - out into the world that's useful because
01:15 - boy did I spent a long time trying to
01:16 - make this video with a lot of problems
01:18 - and please share it with me um shiffman
01:21 - on Twitter uh hash coding train wreck
01:25 - hello welcome to a coding challenge in
01:27 - this coding challenge I am going to
01:30 - attempt to make something that is called
01:32 - a fractal spirograph perhaps or fractal
01:34 - roulette or sort of like an orbital
01:36 - thing or a pattern thing so this was
01:39 - requested it's uh in my rainbow topics
01:42 - repository and it I I I'm still trying
01:44 - to figure out um why it's sometimes
01:46 - called the Benise equation and also how
01:50 - to pronounce that so perhaps uh it's
01:53 - called that because somebody who keeps a
01:54 - Blog uh maybe their name is benice and I
01:58 - really should just research this but I'm
01:59 - going to rely on the YouTube audience
02:01 - here to correct me and fill me in in the
02:04 - in the uh comments so you can see here
02:06 - that there's this idea of nested circles
02:09 - uh orbiting each other and um then you
02:13 - the smallest one sort of like the last
02:15 - nesting of the circle tracing out a
02:17 - pattern and you get this kind of nice
02:19 - beautiful uh fractally thing um and so
02:22 - you can see here's a bunch of varieties
02:24 - of it oh I really like this one maybe we
02:27 - can try to do this one so I'm gonna try
02:28 - to make one of these and see if we can
02:30 - get it to work and you will hopefully
02:32 - then adjust the code think of your own
02:34 - ways of making the pattern of of using
02:37 - Color your own design and creativity I'm
02:40 - going to do this in processing now uh
02:42 - processing if you're not familiar with
02:43 - it you know I'll try not to say this in
02:45 - every video I make but it is a Java
02:47 - based platform uh with a uh robust
02:50 - drawing library and a a development
02:52 - environment so I'm going to be able to
02:54 - just write code with Java syntax call a
02:56 - lot of draw drawing functions and see
02:58 - the results of my program in a quick
03:00 - sketching prototyping way now another
03:02 - thing I want to mention is this is quite
03:04 - similar and let me come over to the
03:05 - Whiteboard here this is quite similar to
03:07 - a coding challenge I did a while back
03:09 - called solar
03:11 - system you guys yes thank you thank you
03:14 - very much thank you did you hear that or
03:16 - am I just doing weird stuff people
03:17 - started cheering in the hallway I'm not
03:19 - sure why uh okay so uh in the solar
03:22 - system coding challenge I created a
03:24 - system that had a circle and each circle
03:26 - had some number of other circles
03:29 - orbiting around it and those had other
03:33 - circles orb orbiting around it and I
03:35 - used to do this functions like translate
03:40 - and rotate and these function calls were
03:42 - nested so I would from the center of one
03:45 - Circle translate out and then rotate by
03:47 - some angle and then I would translate
03:49 - out again and rotate by some angle so
03:51 - that I could have nested circles
03:53 - orbiting each other which is very
03:55 - similar to and so the idea of this is
03:57 - like the sun and this is a planet and
03:58 - this is the moon that sort of thing this
04:00 - is quite similar to what you're seeing
04:01 - in this orbital fractal thinggy um but I
04:04 - think what I want to attempt to do in
04:06 - this challenge for no other reason just
04:08 - to see a different way of doing it is to
04:10 - uh actually use some trigonometry math
04:13 - so if I know the radius of this circle
04:17 - and I want to have another Circle right
04:20 - outside of it and I know its
04:23 - radius then I can figure out where this
04:26 - circle should be positioned based on
04:30 - based on Polar coordinates and this is
04:32 - something that I've used again and again
04:34 - and again in various coding challenges
04:36 - where I say okay I have it I have a a
04:40 - two-dimensional space with an XY
04:43 - coordinate and then I can also think of
04:45 - that XY coordinate as a distance from
04:48 - the center R and an angle so uh x equals
04:53 - radius time cosine of that angle y =
04:57 - radius * s of that angle and this is a
04:59 - formula for converting from a polar
05:02 - coordinate to a cartisian coordinate
05:03 - that I've used again and again and I
05:05 - will once again Link in this video's
05:07 - description to a uh video that covers
05:10 - the this formula in more detail so let's
05:12 - start uh trying to program this let's
05:15 - start in a very basic way what do I need
05:17 - I need a circle in the center so I'm I'm
05:19 - going to make a global variable which
05:20 - might not be necessary called R but
05:23 - let's just make it Global just to just
05:25 - to see later how we're going to use it
05:26 - and let's make that radius uh 100 let's
05:29 - start with a radius of 100 so I'm going
05:31 - to set a background color of 51 because
05:34 - that's my favorite background color and
05:36 - um I am going to then say uh no stroke
05:41 - no no no I'm going to say stroke of 255
05:44 - no fill so I want to have an outline of
05:46 - circle with no interior and then I'm
05:47 - going to use the ellipse function which
05:49 - draws a circle at uh 300 300 with r * 2
05:54 - as the width uh and R * 2 as the height
05:57 - and if I do this I have have my for
06:00 - first Circle so some things that I might
06:02 - do just to make it easier for you to see
06:05 - on the live stream or however you're
06:06 - watching this uh is just increase the
06:09 - stroke weight a little bit so I have a
06:10 - little bit of a thicker circle now I
06:12 - want to position a circle right outside
06:15 - of it and maybe I want its radius to be
06:17 - half the
06:21 - size so let's work out the math for this
06:24 - so what I need to do is I also need an X
06:26 - and A Y so that's going to be the center
06:29 - of the first
06:31 - Circle and I think I'm going to need to
06:33 - do this in an object oriented way soon
06:35 - enough why I really didn't plan this out
06:37 - at all so this is going to be at X and Y
06:40 - so now I want another Circle I'm going
06:43 - to say uh and and let me not make these
06:46 - Global variables actually I'm just going
06:47 - to sort of figure out a static version
06:49 - of this just to get started uh then I'm
06:52 - going to say uh Ral R * 0.5 so R divides
06:58 - by two so so I'm going to have a a uh
07:01 - I'm going to say uh R2 for the second
07:04 - Circle uh I'm definitely going to need
07:06 - to do some object oriented way of
07:08 - nesting these but I'm just doing it this
07:10 - way for right now just to get the basic
07:11 - idea so now what I need to do is say uh
07:16 - X2 = X + r +
07:19 - R2 and then I can say ellipse X2 y R2 *
07:25 - 2 R2 * 2 and now we can see I have two
07:28 - circles I just wanted to see the basic
07:30 - idea there of putting two next to each
07:32 - other why does this
07:37 - work here's a circle at
07:40 - XY and here is a
07:44 - circle at X2 comma y this is R1 and this
07:49 - is R2 so you can see X2 is offset by X
07:53 - by R1 + R2 now of course things are
07:55 - going to change quite a bit once I start
07:57 - this to rotate let's see if we can just
07:59 - make just this rotate around how do I do
08:03 - that so really the the answer here is
08:06 - what I really need is an X2 and a
08:10 - Y2 and really what our what I what I the
08:14 - distance is oh boy these are terrible
08:16 - variable names I'm going to clean this
08:17 - up in such a nice way so soon we've
08:20 - really got to get to it so let's say r r
08:25 - oh my god let's make this R1 X1 y1 just
08:29 - for the let's just at least make this
08:31 - make some amount of sense for a second
08:34 - uh X2 Y2 and what I want to do is I want
08:39 - to say uh R sum equals R1 + R2 and then
08:45 - X2 equal R
08:48 - sumtimes cosine of some
08:52 - angle and y 2 = R Su * s of some angle
08:57 - right what I want is is to rotate this
09:00 - around so I want to do this formula but
09:02 - this R is actually the sum of R1 and R2
09:06 - so now what I'm going to do is uh uh do
09:11 - this and I'm going to say the angle is
09:13 - zero so I'm going to start with an angle
09:15 - of
09:16 - zero and now whoa that is way off way
09:22 - off what mistake did I make okay let's
09:24 - look at this R2 is half of R1 R sum is
09:27 - R1 + x two is R so it's right but it
09:32 - needs to be offset by the where it
09:35 - originally was so this is just the
09:36 - offset from the center of R1 so X2
09:39 - really equals X1 plus this X y1 plus
09:43 - this there we go so now the circle's in
09:46 - the right place now let's make this
09:48 - angle a global variable and let's say
09:51 - angle plus equals
09:53 - 0.1 and we can see there we go so we now
09:56 - have the circle rotating around so this
09:59 - is the core mechanic I used I could have
10:02 - done this in a much simpler I don't know
10:04 - if it's simpler is the right word but
10:05 - with less code and less math I could
10:08 - have just used translate and rotate and
10:10 - achieve the same effect see my other
10:12 - video about how to do that but one of
10:15 - the reasons why I wanted to do it this
10:16 - way is I have full control like I can
10:19 - now uh draw a path so I'm going to just
10:23 - add something to this I'm going to say
10:24 - array list P
10:27 - Vector uh path
10:29 - so what am I doing here I'm using a data
10:31 - structure that's a Java data structure
10:33 - called an array list it's like a
10:35 - flexibly sized array and I'm going to
10:37 - fill it with P Vector objects P Vector
10:40 - objects are two-dimensional or
10:42 - threedimensional vectors an X and a y
10:43 - and x y and a z so what I want to do in
10:46 - setup then is I'm going to say path
10:48 - equals new array
10:50 - list filled with P
10:52 - vectors and then what I want to do is
10:55 - every time I rotate this I want to say
10:58 - uh path. add a new P Vector at X2 Y2 so
11:04 - as this thing is going I'm going to
11:06 - store all the points to keep track of a
11:08 - path and then at the end here I can say
11:12 - uh for every single
11:15 - position in the path so this is a nice
11:18 - Java enhanced for each Loop for every P
11:22 - Vector pause in path I want to say a set
11:26 - a Vertex at pause dox and pause
11:30 - doy and I'm going to say begin
11:33 - shape and end shape to make this one
11:38 - continuous path and
11:41 - now we can see this so whoops we can see
11:44 - that it's tracing its path so we've got
11:47 - the core idea down from the Benise
11:49 - equation the orbital fractal which is
11:52 - that we need to have some way of
11:54 - positioning a circle outside of another
11:56 - Circle rotating and then then uh keep
12:01 - track of the points of its path and uh
12:05 - draw something okay so we're good
12:07 - now we've got a serious problem
12:11 - here this is not sustainable right I
12:14 - could maybe do some kind of like weird
12:16 - for Loop here and kind of just keep
12:18 - building on the previous one but I I
12:20 - don't I don't that's a problem so what I
12:24 - want to
12:25 - do is um is this really going work well
12:30 - we're going to give it a try what I'm I
12:32 - might have some angle issues but what
12:34 - I'm going to do is I what I need is to
12:36 - make this into an object so let's take a
12:39 - look at what I mean by that so I need an
12:41 - object to keep track of what I need an
12:45 - object to keep track of a a circle that
12:48 - has so each circle let's call it an I
12:51 - get yeah a cir let's call it an orbit I
12:53 - don't know I don't know what it should
12:55 - be called I'll call it a circle cuz I'm
12:58 - confused uh it needs to have an x a y
13:01 - and an r and then it would have like a
13:05 - child so we can think of these as parent
13:07 - child
13:08 - relationships this is the parent of this
13:10 - circle and if this one has one going
13:12 - around it this is the child of this one
13:15 - and if this one has a little one so as
13:16 - this one so that's what we can think of
13:18 - now it also probably
13:22 - needs um it needs to know it probably
13:24 - needs to know have a reference to its
13:27 - parent so that it can pull its parents
13:30 - radius and then it also needs to have
13:34 - some type of uh orbit
13:37 - speed so I think I could call each of
13:39 - these an orbit an orbit has its current
13:42 - XY it has its own radius and it might
13:45 - have a child it might have a parent
13:47 - right the first one has no parent the
13:49 - last one has no child so I think this is
13:51 - a structure of each object that we can
13:53 - build I think this is going to work I'm
13:55 - sure you guys can think of better ways
13:56 - to do this okay so I'm going to make
13:58 - make a new tab here in processing and
14:00 - I'm going to name that tab orbit and I'm
14:03 - going to write a
14:04 - class to create an orbit and I'm going
14:07 - to say each orbit has what and I could
14:09 - use a p Vector to describe its position
14:11 - but I'm going to be a little bit I'm
14:12 - just going to use an X and A Y here so
14:14 - it needs an X and A Y it needs a
14:17 - radius that's its own radius and it
14:20 - needs what it needs a parent its parent
14:24 - is another instance of an orbit and it
14:27 - maybe has a
14:30 - child um you know I could call it's like
14:33 - parent the it's sun and it's ch the
14:35 - child it's moon but let's just use I
14:37 - think parent and child will be easier
14:39 - for me to remember and then what else
14:41 - did I
14:42 - say uh orbit speed okay so uh it needs
14:46 - I'm just going to call it um speed oh
14:49 - and guess what it also needs an angle
14:52 - right needs to keep track of that
14:56 - angle um so angle and angular velocity
14:59 - is really what we've got here okay so
15:01 - all of these things are all the
15:03 - properties this object needs so when I
15:05 - make an orbit I can maybe
15:09 - get now this is like a a kind of
15:12 - annoying convention that I follow but
15:15 - the arguments to a Constructor in Java
15:18 - are uh variables that are kind of like
15:20 - tempor they I mean these are arguments
15:21 - to the Constructor but I'm going to use
15:23 - them just as temporary variables to fill
15:26 - the um to fill the the actual instance
15:29 - variables of the object itself so I kind
15:31 - of just name them with an underscore to
15:33 - mark them as
15:35 - different but I realize this often looks
15:37 - kind of uh cryptic or confusing but
15:41 - let's do this and then uh if I'm making
15:45 - one I could
15:48 - assign I would assign
15:51 - myself as a parent so parent equals
15:56 - P so let's think about how so something
15:59 - like this might work like I'm going to
16:01 - make an orbit is going to have an X and
16:02 - A Y it's going to have an R radius and
16:05 - it's going to have apparent orbit thing
16:09 - so I'm going to comment all this out
16:12 - because we might need it again later but
16:15 - what's interesting about this is I don't
16:17 - actually need an array of all the orbit
16:20 - objects I could make one but each orbit
16:23 - object is simply going to keep track of
16:24 - the next one so to iterate through them
16:26 - I can just go to one which points to the
16:28 - next with point to the next and this is
16:29 - actually somewhat by accident a data
16:32 - structure called a linked list so we're
16:35 - we're kind of programming a bit of a
16:36 - linked list here um because each orbit
16:38 - is linked in like a list format so I'm
16:40 - going to say orbit and I could call it
16:43 - root like it's the core but I'm going to
16:45 - call it sun I'm going to call it sun and
16:47 - I'm going to say sun is a new
16:50 - orbit and it is it has a X and A Y which
16:53 - is the middle it has a radius which is
16:55 - 100 and what else did I say it needs it
16:58 - needs a parent and this one has no
17:00 - parent so I'm going to say null now I
17:04 - could do something here's an interesting
17:05 - technique in Java I could actually
17:08 - overload The
17:09 - Constructor um and actually let's do
17:11 - this just so you see this you can
17:13 - actually write for an object multiple
17:17 - Constructors in JavaScript you would
17:19 - just have one and you would you would
17:20 - query the amount of arguments but I'm
17:23 - going to uh do it this way I'm going to
17:25 - write another Constructor that does not
17:27 - have the fourth option
17:28 - and I'm going to
17:30 - say this which means call the call a
17:33 - different Constructor with x y r and
17:37 - null so meaning if you ever create an
17:40 - orbit without the fourth argument it
17:42 - just does the other Constructor and
17:44 - sends it null there's not really a major
17:46 - point of me doing this but I don't want
17:47 - to have a parent for the original one so
17:50 - now one thing I definitely want is I
17:52 - want some sort of display function which
17:54 - these days I'm uh calling show and what
17:58 - I want to do in the show function is say
17:59 - stroke 255 stroke weight
18:04 - 2 and then
18:06 - ellipse at The X and Y with r * 2 R * 2
18:11 - so
18:12 - now if I here if in draw I just say sun.
18:20 - show if I run this again we should see
18:23 - there it is now how come I guess I
18:25 - forgot no
18:27 - fill so sun. show there it is
18:31 - okay I don't know how long have you been
18:33 - watching this video and all I've got is
18:35 - a circle on the screen I'm very very
18:36 - sorry but it I'm hoping this will get
18:38 - more interesting soon okay so now what
18:41 - we need to do is we probably want to say
18:46 - how do we add a child maybe what we
18:49 - should
18:50 - do is say a sun let's just write a
18:54 - function to it sun. add child I'm just
18:57 - gonna write a function called sun. ADD
19:00 - child I mean I'm gonna write a function
19:01 - called ad child so I need to write ADD
19:04 - child what does ADD child do okay so
19:07 - first of all uh it has a child so I'm
19:10 - gonna I'm gonna set
19:12 - child explicitly to null here I'm going
19:15 - to set angle to zero and uh angle speed
19:19 - to 0.1 just to give those some values so
19:22 - adding a child means I don't want it to
19:23 - be null anymore I want to say child
19:25 - equals
19:27 - new uh
19:29 - orbit now I need to give it an X and a y
19:32 - a radius and a parent okay so the X and
19:37 - the Y so first of all I should say uh
19:40 - new radius equals R * .5 so I'm just
19:45 - divide it by half I there's probably
19:46 - some appropriate ratios I'm supposed to
19:48 - use but I'll just try uh dividing it by
19:50 - half by two uh um so I want the new
19:54 - orbit now I need to get those X and Y
19:55 - points so a new X X should equal x
20:01 - plus r plus new new radius right because
20:07 - I just want to offset it by its own X
20:10 - Plus its own radius plus the new radius
20:12 - and New Y will just be the same so I
20:16 - want to create a new orbit at X new X
20:20 - New Y and I want a new X New Y with new
20:25 - R I'm just going to call it new r just
20:28 - to for a little bit more shorthand and
20:30 - then its parent is this so I'm having
20:34 - the function
20:37 - itself I'm having the object itself
20:39 - create its own child and it's going to
20:41 - pass a reference to itself to the child
20:45 - so that the child then keeps track of
20:46 - the
20:47 - parent good okay so
20:51 - now let's see what's happening here so
20:54 - now what
20:56 - if I say
20:58 - uh what if I say orbit current equals
21:03 - Sun why I'm going to have to sort of
21:05 - type this out so what I want to do is I
21:06 - want to write a loop I want to say show
21:09 - all the orbits so start with the sun
21:12 - draw it look at the sun's child draw it
21:15 - look at the son's child child draw it
21:17 - and when eventually one of the CH
21:20 - children has no child then stop so as
21:24 - long as current is not equal to no
21:29 - say current. show and then I'm going to
21:32 - say current equals sun. child so this is
21:36 - now an algorithm I have look at this for
21:38 - saying look at the Cur start with one
21:41 - this is iterating through all of them
21:43 - it's kind of like I probably should do
21:45 - something like um you know write a
21:48 - function that returns it called Next or
21:50 - something but just for Simplicity I'm
21:51 - just going to say the current equals its
21:53 - child so start with current equal to son
21:57 - it's not null so show it then get the
21:59 - child is it null it's not then show it
22:01 - then get the child and this should say
22:03 - not sun. child current. child right
22:06 - because I'm really in a way I I maybe
22:09 - I'll call this
22:11 - next while next is not null go to the
22:14 - next child something like that doesn't
22:15 - matter if they call it current or next
22:16 - or whatever the point is it's a variable
22:18 - that's iterating through all of the
22:20 - things so let's see what we get now
22:23 - awesome we've got the son and his child
22:25 - now what if I had
22:29 - this actually also return the
22:32 - child so in addition to creating it and
22:36 - assigning it it returns a reference to
22:38 - it because then what I could do is I
22:41 - could say uh uh orbit child equals sun.
22:46 - ADD
22:48 - child now this is terrible but I could
22:51 - then say orbit Child 2 equals child 1.
22:57 - ADD child
22:58 - something like that right so this is
23:01 - this idea of like I could have the son
23:03 - create a child and then the child of the
23:05 - sun create a child etc etc so I probably
23:07 - want to write a loop there but you can
23:09 - see now I've got a bunch of them this is
23:11 - pretty good this is looking pretty good
23:13 - okay so why don't we do this why don't
23:17 - we write a why don't we do this a
23:18 - certain number of times three
23:21 - times and I think we can employ the same
23:24 - sort of idea where we can say and and
23:27 - this needs to be an integer where we can
23:29 - say uh orbit next equals
23:34 - Sun
23:36 - so uh next
23:40 - equals next. ADD
23:44 - child right so this is a little Loop to
23:47 - start with one and then add a child get
23:50 - its reference back do it again do it
23:51 - again do it again so this should give
23:54 - me oh right cuz I started with the sun
23:57 - then I added three children so you can
23:58 - say I was like why do I have four I have
24:00 - four because I did it three times but I
24:02 - started with one and we could even see
24:05 - here you know this should probably be a
24:06 - parameter but if I made them much
24:07 - smaller like 0.
24:09 - 2 uh well that's a bad idea let's just
24:12 - leave it at 0 five so this is good so
24:14 - you can obviously play with this okay
24:15 - now interestingly enough I just want to
24:17 - show you something really quickly what
24:18 - if I just change this to a
24:21 - minus look what I got there so that's
24:24 - interesting to see a little quick
24:25 - variation right instead of offsetting it
24:27 - out by the sum of the radi what if I
24:29 - offset It Out by one radius minus the
24:32 - other that's going to give me a circle
24:34 - inside so that's something that you
24:35 - might a little variation that you might
24:36 - play with okay
24:39 - now what happens if we want these things
24:42 - to rotate is this just going to work uh
24:45 - what if I write in the
24:47 - orbit uh okay so I need to write a
24:51 - update
24:52 - function update uh function so first
24:57 - what what did I do back here I kind of
25:00 - figured out this algorithm here let's
25:02 - grab this
25:06 - algorithm so our sum in this
25:10 - case is now the sum of my own radius
25:14 - plus my parents
25:16 - radius then my the X should update to
25:21 - be the parents X plus the sum time
25:25 - cosine of the angle right and y so this
25:28 - is updating should be the parents y plus
25:30 - the sum Time s of the angle so this is
25:33 - me updating its position every frame
25:37 - right I want to look at the I want to
25:40 - offset my location based on the parents
25:42 - XY um um plus a uh whatever my rotation
25:47 - is and the sum of the two radi so that
25:50 - should update everything and then in
25:52 - addition to that I want to say angle
25:55 - plus equals angle speed or what did I
25:58 - call that uh just speed so I always want
26:01 - to increment the angle I have a feeling
26:03 - there's a mistake here so that should
26:06 - update so let me just run this no syntax
26:09 - errors I think I'm missing some pieces
26:11 - but let's let's throw caution to the
26:13 - wind and as we iterate through them all
26:15 - let's also update
26:19 - them okay what's wrong here ah okay I've
26:22 - got a null pointer exception why because
26:25 - I don't want to update it if it has no
26:27 - parent
26:28 - so I'm trying to
26:31 - well yeah the the parent never moves
26:33 - never spins so it's really only for the
26:35 - Sun so I'm trying to you know where I
26:37 - put the
26:39 - um you know one thing I could do there's
26:41 - a bunch of ways I could solve this but
26:43 - probably a good way to do this is just
26:45 - to say if parent does not equal null I
26:48 - just do this right now just to make sure
26:49 - it's not a null parent then I'm going to
26:51 - actually do
26:52 - this okay interesting now why why is it
26:56 - doing that I have a feeling it's doing
26:58 - that because they're all spinning at the
27:01 - same exact
27:05 - speed let's see if I uh let's see if I
27:09 - can create another I'm going to create
27:12 - another argument here float
27:14 - s for
27:17 - Speed and I'm going to say speed equals
27:21 - s and actually before I even do that
27:23 - let's just give them a random speed
27:25 - let's just try a random speed between uh
27:28 - between 0.01 and
27:32 - .1 and forget about this for a second so
27:34 - let's give them a random speed H whoops
27:39 - speed is a signed
27:40 - twice uh so I need to get rid of this
27:43 - and like leave these random speeds let's
27:45 - run this again and see so you can see
27:47 - now we're seeing some like slightly
27:49 - different offsets from each other now
27:51 - there's probably an exact science to
27:54 - this and they all also there's a bit of
27:56 - an issue where they're all have the
28:00 - same uh they all have the same angle
28:02 - rotation I am looking at the YouTube
28:04 - chat right now speed reset to 0.1 um so
28:07 - I think I want to look at the original
28:10 - uh the original version of this
28:13 - again let's pull that up and let's see
28:16 - if we can kind of uncover what the
28:18 - relationship is
28:20 - between so first of
28:22 - all are they this one is moving so
28:26 - they're moving in opposite that one's
28:27 - moving this this one is moving
28:29 - counterclockwise and the other one is
28:31 - moving clockwise so this would be
28:33 - something to do so let's actually think
28:37 - about that so I have a kind of idea
28:39 - let's just actually leave them with the
28:40 - same so first of all let me add another
28:43 - uh let's let's minimize this let me add
28:45 - another argument
28:47 - here
28:51 - uh and um what I'm going to do is just
28:57 - give the first one
29:00 - 0.1 so I'm going to uh well I I'll
29:04 - there's so many different ways I could
29:05 - do this but let's let's try to be a
29:07 - little somewhat consistent about it
29:09 - let's add a fourth argument for Speed
29:11 - right here okay so let's make sure that
29:14 - works and then speed equals s now they
29:16 - should all have exactly whoops and here
29:20 - I should pass in oh speed so now they
29:24 - all have the same exact speed and that's
29:25 - a little bit fast I want I think it'll
29:27 - be easier to sort of figure this out if
29:28 - we watch it a little bit more slowly so
29:30 - let's uh let's start with just kind of
29:32 - like 0.4 oops 0.04 or something okay
29:37 - that's a little bit easier to look at
29:38 - okay now let's just try a simple idea of
29:41 - when I make the child the child should
29:44 - have the negative speed of the parent
29:46 - same speed but opposite
29:49 - direction now this looks more like
29:51 - something the question is is this
29:54 - exactly the path that is is and you can
30:00 - see this is this exactly the path yeah
30:03 - speed is actually angular velocity
30:05 - someone in the YouTube chat writes which
30:06 - is a good point it seem and I'm also
30:08 - getting it seems that speed is I minus 2
30:11 - times the parent speed so maybe it
30:13 - actually is faster but um but in the
30:17 - opposite direction so let's try
30:19 - that yeah this looks so but I've started
30:21 - with it too fast um so let's try it as
30:24 - much
30:25 - slower yeah this looks good so I feel
30:28 - like this looks much more like what the
30:30 - original uh program had so now did the
30:33 - original one also have a total of four
30:37 - circles let's see let's look back at
30:39 - that original example and I can't see
30:43 - zero one it also looks like they'
30:45 - they're shrinking more by like a third I
30:48 - can't exactly tell you know exactly but
30:52 - it looks like there's four and it looks
30:53 - like maybe they're shrinking by a third
30:55 - so let's um let's div divide it by
30:59 - three and see so this looks much more
31:02 - like what happened there and I think we
31:04 - can also start the original one at
31:08 - 200 uh I guess that's a little bit off
31:10 - this window so let's try 150 there we go
31:13 - so now I think we've gotten kind of
31:17 - exactly what's in that thing let's try
31:20 - tracing the
31:22 - path okay um so all we need to do is we
31:26 - need to to uh we need to to have a
31:29 - reference to the last one so what's the
31:31 - best way for us to reference the last
31:33 - one when this is done next is null
31:35 - unfortunately so I think um I think what
31:40 - I'll do is just for Simplicity is I'll
31:43 - just keep track of a global variable
31:45 - called end and at the end end equals
31:49 - next so the very last child is the end
31:52 - and then I can actually just go back and
31:55 - add this back this path stuff exactly
31:58 - back
31:59 - in and uh I can say um
32:05 - n.x and N doy so this should now be that
32:09 - path and let's make the path I don't
32:11 - know pink or something or purple let's
32:14 - make it um just so we can see it and
32:16 - let's um let's also make the uh orbits
32:19 - let's make them maybe a little bit
32:21 - lighter give them a little Alpha and
32:24 - let's see what we
32:26 - get
32:28 - well that's certainly
32:30 - something let me make the stroke weight
32:33 - a little bit more visible
32:35 - here and we can now see how it's tracing
32:38 - that path it's kind of nice doesn't look
32:41 - like that fractal pattern at all I'm
32:43 - seeing in the chat um that I'm being
32:45 - suggested to multiply it by -3 so maybe
32:49 - I just had that
32:50 - off3 let's try
32:53 - that there we go so this looks more like
32:57 - that
32:59 - pattern uh and second Circle has five
33:02 - times the speed and last has
33:04 - 20 times four so I think the how those
33:08 - speeds are changing is
33:10 - actually it you know we can see what
33:12 - kind of patterns that's times four I
33:14 - think they're actually uh almost
33:16 - exponentially
33:19 - increasing okay there was an awkward
33:21 - edit there but there was a bunch of
33:23 - debugging that that happened that I was
33:24 - trying to get this right by just
33:25 - eyeballing it and actually uh the chat
33:29 - nicely pointed out to me that the
33:30 - formula is just in the comments lower
33:33 - down in the page so I'm going to go back
33:35 - down here and look at the formula which
33:39 - is right here and it says uh okay so
33:44 - speed of speed is equal to k a constant
33:48 - to the N minus one power and N being um
33:53 - the level so the first circle is zero
33:55 - the next one is one so n must be the
33:57 - level and then also something that is
33:59 - important here is I also need to use 10
34:02 - or 11 circles where I am in my code I
34:06 - actually only have uh three or four
34:09 - because the first one is zero so um what
34:11 - I want to do is go and look how am I
34:13 - getting the speed so I'm multiplying the
34:15 - speed by -2 I think I tried a bunch of
34:18 - different things so maybe where I last
34:19 - left off it might have been four we can
34:21 - see multip like increasing the speed
34:23 - gives me kind of more interesting
34:24 - patterns but really what I want is is
34:27 - not what I want to do is rather than
34:32 - have the speed be this thing that
34:34 - changes I want each orbit to keep track
34:36 - of its level so ultimately what I want
34:38 - to do is just send in the number zero
34:42 - the sun is zero so I'm going to add a
34:46 - variable called n to keep track of its
34:48 - level and instead of s I'm going to pass
34:51 - in
34:55 - n and and I'm going to set n equal to
34:59 - that level then speed is going to be
35:02 - something that I calculate based on the
35:05 - formula so if I go back and look at the
35:07 - formula it is K now I don't fully
35:11 - understand this but K I believe is
35:13 - usually uh a constant so I think maybe I
35:15 - can just sort of like pick one of these
35:17 - so I am going to uh arbitrarily pick uh
35:22 - K of
35:23 - two and then I'm going to say speed
35:26 - equals power K to the N minus one is
35:30 - that is that correct K to the N minus
35:33 - one yes and then when I create the next
35:38 - orbit I just send in n + one so the next
35:42 - one is the next level the next one is
35:44 - the next level let's just take a look at
35:45 - this really
35:47 - briefly and why is this giving me oh
35:51 - this should be an integer I'm using
35:52 - integers for the level and same thing
35:55 - here not this really matters that much
35:59 - so now oh something is way off ah okay
36:03 - here's an issue these values are very
36:05 - large and that's my so one thing I could
36:08 - do is just maybe think of them as angles
36:10 - and convert them to
36:13 - radians and now we've got something that
36:16 - more now there's a couple problems with
36:17 - this first of all I'm getting a pretty
36:19 - interesting shape even just from this
36:21 - one thing that I need to do is I need
36:23 - them to alternate their Direction so the
36:25 - nice thing about setting something to
36:27 - the power of an integer is that if it's
36:29 - to if it's a negative number to the
36:30 - power of two squared it'll be positive
36:33 - to the power of three negative to the
36:34 - power of four positive so I can actually
36:36 - just say k equals -2 and now they're
36:39 - going to go in opposite directions and
36:41 - you can see this kind of looks
36:42 - remarkably like what I started with but
36:45 - let's try having this K be something
36:49 - larger and we can start to see now that
36:53 - this resembles much more closely to the
36:56 - pattern
36:57 - that we saw in this
37:00 - original um this original image now I'm
37:04 - not getting so much detail here and I
37:07 - think the way that I'm going to get more
37:08 - detail is by actually having many many
37:10 - more levels there's only three let's add
37:13 - 10 and now we can see now I'm still my
37:17 - incrementation steps are kind of large
37:20 - from that conversion to radians so
37:22 - there's probably a way for me to have
37:23 - the time steps be smaller so I can get
37:26 - more detail out of here cuz you know
37:28 - this would be interesting to try adding
37:29 - a hundred of
37:30 - these and it can't even I don't know
37:33 - maybe it's let's just try adding 20 but
37:37 - my incrementation steps are so large
37:40 - that I'm not getting that level of
37:41 - detail so we've we've we've got
37:45 - something that kind of um that kind of
37:48 - resembles it um I I suppose if I wanted
37:51 - to really trace it out um I could uh
37:55 - have the incrementation steps be much
37:58 - smaller maybe I could just divide by a
38:00 - thousand but add like a
38:03 - 100 it's going so so slow so I'm going
38:06 - to have to speed this up and time-lapse
38:08 - it I'm going to leave that to you as a
38:11 - challenge so the challenge that you
38:12 - should do and um uh maybe I'll come back
38:15 - and revisit this in a future challenge
38:17 - let me get this back to a state where we
38:19 - get something is to take this basic idea
38:23 - and more closely match the level of
38:26 - detail in these images and also think
38:28 - about how can you adjust where how the
38:31 - circles are positioned relative to each
38:33 - other to change to get these different
38:36 - kinds of patterns and I would read
38:37 - through this entire page and uh and see
38:40 - look at some of these kind of amazing
38:41 - crazy patterns and see what you can get
38:44 - see how you can color it see what you
38:45 - can do and these are uh I'm loving this
38:48 - I just want to let's try one more thing
38:50 - let's at least try the thing where we
38:52 - Nest the circles inside of themselves
38:54 - rather than outside whoops
38:57 - that didn't work uh sum where's my
39:01 - sum that's what I'm looking for here
39:05 - uh uh yes so let me say minus here with
39:07 - the sum and now we can see this
39:10 - particular pattern that's very similar
39:12 - but now sort of more inside of this
39:14 - particular uh Circle okay so um thank
39:18 - you for watching this coding challenge I
39:20 - have no idea if this was interesting or
39:22 - useful at all I feel like there were
39:23 - some nuggets at the beginning if you've
39:25 - made it to the end of this
39:27 - hasht trre coding train wreck I think is
39:30 - the new appropriate hashtag for this
39:32 - channel uh you can tweet Me @ shiffman #
39:35 - coding trre with your non-rain W
39:38 - beautiful visualizations that you've
39:40 - made from this uh benice benice biche I
39:43 - don't know how to pronounce it uh
39:44 - somebody will tell me I'm sure in the
39:45 - comments uh equation uh orbital fractals
39:48 - thank you for watching okay I'm
39:51 - back for like the 10,000th time for a
39:54 - quick addendum this train wreck is not
39:56 - finished of some nice I got some
39:58 - wonderful nice comments in the chat and
40:00 - I would like to improve uh I think it's
40:03 - worth taking an extra minute of your
40:04 - time to improve my particular drawing uh
40:08 - to match more closely what's going on
40:10 - here so first of all the first thing and
40:13 - I'm sure everybody who want this is
40:15 - bothering a lot of you I know which is
40:16 - that I didn't actually line everything
40:18 - up with the top and you'll notice that
40:21 - if we look at mine it lines up perfectly
40:23 - to the right at the zero angle so I just
40:25 - want to go rotate piun / 2 a 90° so
40:31 - first thing I can do is just very
40:32 - quickly fix the angle to be Pi / 2 and
40:38 - in this case now we at least have the
40:41 - pattern pointing up now one of the
40:44 - reasons why we don't have the same level
40:48 - of detail that's here is that I my
40:51 - incrementation amount is quite large so
40:54 - as it moves the rotation is is happening
40:56 - fast and I want to see this play out in
40:58 - real time but if you'll notice this is
41:01 - this has a kind of like stuttery I mean
41:03 - it's a it's a gif so there's probably
41:05 - some some issues with how that s but
41:06 - this has a kind this is actually
41:08 - probably each time it moves it's kind of
41:10 - drawn a whole lot of points so I can
41:12 - emulate that so I'm going to make a
41:14 - global variable which I'm going to call
41:17 - um I'm going to call resolution and I'm
41:20 - going to set that resolution right now
41:21 - to uh one to one so what I want to do is
41:26 - here what I want to do is look at the
41:28 - speed and I want to divide the speed by
41:31 - resolution meaning I how many how how
41:34 - many incremental steps do I want to take
41:36 - in between each each angular change of
41:39 - that angular velocity so maybe I just
41:41 - want each time step is like a full unit
41:43 - of one so I want to divide by resolution
41:45 - there and then what I need to do here is
41:49 - each frame each cycle through draw I
41:52 - want to do this same updating the path n
41:54 - amount of times that resolution amount
41:56 - of times so I'm going to write a for
41:58 - Loop here to do this n amount of
42:04 - times so there's a little bit of an
42:06 - issue here where I'm drawing the I'm
42:07 - going to be drawing the circle multiple
42:09 - times but I want to get all those
42:10 - incremental path points n amount of
42:13 - times now resolution amount of times I
42:14 - shouldn't use n because that's being
42:15 - used somewhere else now if I run this
42:17 - this is exactly what I had
42:19 - before now I could if I wanted take this
42:23 - out I I kind of did this all at once CU
42:25 - I practic this a minute ago when I was
42:27 - debugging um so uh but even if I just
42:31 - change that resolution
42:33 - now to something like 10 what you're
42:36 - going to get is you're going to see this
42:38 - giving us a finer level of detail but
42:41 - it's going to be running more slowly
42:44 - because the whole animation is doing
42:46 - kind of 10 steps so one way I can kind
42:49 - of clean that up is I can do 10 steps
42:53 - each cycle through draw to keep that
42:55 - same speed
42:56 - the one thing you'll notice is those
42:57 - circles look much brighter because
42:59 - they've been layered on top of each
43:00 - other a bunch of times I mean one thing
43:02 - I could actually do is just not bother
43:04 - to draw the circles and we could just
43:06 - see the path and there it is and I
43:08 - probably should also you know stop it
43:11 - from redrawing when it gets around a
43:12 - full rotation so you can see it's it's
43:14 - kind of drawing over itself but you can
43:15 - see this has much more like the quality
43:18 - of what's in the original image and you
43:20 - know just to sort of see you know if I
43:22 - make the resolution 100 does this really
43:25 - give us anything better I'm not sure but
43:27 - you can kind of see now I've got even
43:28 - more levels of detail so the number of
43:31 - levels of C nested circles and that
43:33 - resolution you know it would be I think
43:35 - a great thing to try making this very
43:37 - high you know blowing this up and making
43:39 - this a large pixel area and trying to
43:41 - really see how detailed can you make
43:43 - that and and make it kind of like a high
43:45 - resolution image version of this okay so
43:48 - um thank you for watching this uh coding
43:51 - challenge um I think there's a lot of
43:53 - exciting creative possibilities that you
43:54 - could build off of it if you able to
43:56 - follow this I will post in the GitHub
43:59 - repository I will post both a processing
44:02 - version of this and a P5 GS version of
44:04 - this that you can run in the browser and
44:05 - I look forward to seeing what you make
44:07 - thanks for
44:12 - [Music]
44:17 - watching