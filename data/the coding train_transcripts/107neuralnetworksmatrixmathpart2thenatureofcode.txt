00:00 - hi yes you don't know what you're about
00:03 - to watch this is ostensibly just like a
00:06 - random video in the middle of a very
00:08 - long series of building and neural
00:10 - network and I'm kind of knowledge doing
00:12 - matrices and I already started in this
00:14 - is really just a video about doing
00:16 - element-wise operations with a matrix
00:18 - and adding that to the matrix little
00:20 - matrix library that I'm building but
00:21 - guess what an opening in this video is
00:23 - something really exciting that I just
00:24 - learned and I never knew Thank You
00:27 - Julito from the YouTube chat for
00:30 - pointing this out but what let let me
00:32 - set the stage of where I am we're
00:35 - building this matrix library the idea is
00:38 - to be able to store numbers in a grid
00:40 - and perform different mathematical
00:42 - operations with them and we're going to
00:44 - ultimately use this library to do
00:49 - weighted sums in a neural network and
00:51 - right now I'm about to add an element
00:53 - wise operation but I just did the basics
00:57 - of creating the matrix and multiplying
00:59 - or adding a value to it okay so now
01:02 - let's review I could say var M is a new
01:08 - matrix and it's 3 by 2 and then I
01:12 - previously was looking at it like this
01:15 - and kind of going like this and trying
01:16 - to like look at the values in it but I
01:18 - learned then I can say console dot table
01:21 - and then pass in and array look at this
01:26 - console table pass in an array
01:35 - [Music]
01:40 - my whole life has changed in an instant
01:43 - realizing that now I can have this nice
01:45 - little tabular view and so I could just
01:48 - say multiply Ahdoot add five and then I
01:53 - can look at it again and I can see that
01:54 - there's fives in there and I could try
01:56 - to do other stuff and there's so many
01:57 - things I'm going to need to do to like
01:59 - check if it's working this is going to
02:00 - make it so much better I got to fake my
02:03 - reaction right now good let's really the
02:05 - first learner than I was genuinely I
02:06 - know I'm still genuinely excited about
02:08 - it okay but for everybody watching live
02:10 - had to watch me get excited about it
02:12 - twice apologies for that okay so on you
02:14 - watching this video right now let's add
02:16 - the next piece so what's interesting
02:18 - here is one of the things I wanted to do
02:20 - right it's just saying 1 D for example
02:22 - adds i multiplies with add the number 2
02:25 - to each one of these values but what if
02:28 - I had another matrix you know 3 1 4
02:33 - negative 3 and what if I wanted to add
02:37 - this matrix to this matrix elements wise
02:41 - what element wise means is if I have two
02:44 - matrices a b c d and i have e f g h i
02:52 - get a resulting matrix that has a plus e
03:01 - b + f c+ g d plus h i just take these
03:11 - two values and add them together at
03:12 - these two values add them together these
03:14 - two values added together these two
03:15 - thousand together now this will only
03:18 - work the way that I've described it to
03:20 - you if these matrix matrices have the
03:23 - same dimensions the same number of rows
03:25 - in the same number of columns now there
03:27 - is there something in Python the numpy
03:29 - library which is the core you know
03:32 - matrix math library and python has extra
03:34 - what it's called I'm not it's called
03:37 - broadcasting in numpy so but we're going
03:40 - to live in a simpler world
03:42 - were we for this we have to have the
03:43 - dimensions match exactly so what I want
03:46 - to do now is I want to keep those
03:47 - multiply and add functions I want them
03:51 - to be the same function but I want those
03:53 - functions to be able to receive a single
03:55 - number and add that single number to all
03:57 - of the values or receive another matrix
04:01 - and add all those ads the values of ads
04:05 - those guys element-wise so let's go back
04:07 - and add this now there's some things
04:08 - that I need to do for example I first
04:11 - why don't I at least write a function
04:14 - called randomized and what this function
04:24 - will do and you're going to see this and
04:25 - everything is just give each value a
04:28 - random value so I am going to I'm going
04:33 - to do something rather silly right now
04:35 - we're going to say math.floor
04:36 - math.random times 10 so I'm not using
04:41 - the p5.js random and floor functions
04:44 - writing this library because I want this
04:45 - library to be able to be used outside of
04:48 - the p5.js library so I have to actually
04:50 - just use the native JavaScript random
04:51 - and floor functions so I should be able
04:54 - to now whoops
04:56 - syntax error line 16 oh this should say
04:59 - equals function I should be able to say
05:05 - here's a new matrix and randomize and
05:09 - then let's look at its values and you
05:13 - can see there we go one one eight three
05:15 - eight one four those are random values
05:17 - so now if I were to say n dot multiplied
05:21 - by two and look at it again we can see
05:25 - there we go to 16
05:26 - 6 16 to eight great so now at least we
05:29 - can experiment and use different values
05:31 - now here's the thing look at this
05:34 - function matrix prototype ad equals
05:38 - function and the argument coming in is n
05:42 - a single value but what if n isn't a
05:45 - single value what if it was actually a
05:48 - matrix actually what I can do here is
05:51 - say if
05:53 - and is an instance of matrix let's see
05:59 - is that right instance of what does that
06:01 - mean I'm trying to determine what the
06:03 - type of n is so I can look at that here
06:08 - write n an instance of matrix true and
06:14 - instance of what's another JavaScript
06:17 - object array false right so it's and if
06:22 - what I'm basically saying is here the
06:25 - add function receives an argument that
06:27 - argument might be a matrix it might be
06:29 - something else if it is a matrix what I
06:33 - want to do is add all the values element
06:38 - wise otherwise now I should probably
06:42 - check like is it actually just a single
06:45 - number but I'm kind of going to assume
06:47 - here that there's only two possible ways
06:49 - any reasonable person would call this
06:50 - function either with a matrix or a
06:53 - single number so if it's a matrix as the
06:55 - eval use element wise every IJ should
06:59 - get added to the corresponding PI J
07:01 - otherwise otherwise just adds the single
07:06 - value into every single value
07:07 - so let's now see if this element wise
07:10 - works because I still some more space
07:14 - here so I'm going to make a matrix that
07:18 - is I'm going to call it m1 and I'm going
07:24 - to say m2 is also a three by two matrix
07:28 - I'm going to randomize and one I'm going
07:33 - to randomize m2 then I'm going to say
07:37 - console I'm going to look at them both
07:38 - table m1 oh what's sorry let me clear
07:42 - this console table and one dot the
07:47 - actual array in their console table m2
07:54 - so we can see here these are my two
07:58 - matrices six three seven two zero seven
08:01 - zero four three one seven three let's
08:05 - double the values and
08:07 - just to see that that works or like to
08:09 - add to the value sorry what I did this
08:11 - would add right so I'm going to say m2
08:13 - dot add one let's add one to every value
08:16 - in m2 and let me make this font a little
08:21 - smaller hopefully you can still see it
08:23 - let's look at m1 and m2 so we can see
08:28 - yep every value to m2 increased by one
08:31 - now if I add m1 to m2 I should get a
08:36 - matrix that has 7 8 right 6 plus 1 3
08:41 - plus 5 7 plus 4 2 plus 2 let's say m1
08:44 - dot add em to let's do that up hmm
08:54 - cannot read property 0 of undefined what
08:58 - did I get wrong matrix Dutch is 29
09:01 - what's wrong here n oh you know what I
09:07 - forgot probably a lot of you in the chat
09:11 - notice this or if you watch this you
09:13 - know is this the matrix object has
09:16 - inside of itself a variable that
09:18 - actually stores the values called matrix
09:20 - and maybe I should call that something
09:22 - else I'm not so sure about this this has
09:24 - to be n dot matrix right if this is an
09:26 - instance of the matrix object I want to
09:29 - add this matrix values to the n matrix
09:32 - size so unfortunately I'm going to have
09:35 - to redo all this I have one matrix I
09:43 - have two matrices now I'm going to add
09:49 - one to the second one
09:51 - and then I'm going to add m2 to m1 oh
09:56 - didn't get an error now let's look
10:01 - [Music]
10:05 - oh wait I didn't randomize that and they
10:08 - won't have the same value it's going to
10:12 - be zero belief okay give me a second
10:15 - here oh no m2 is going to have one in it
10:18 - so let's uh let's just let's randomize
10:21 - m1 let's ran to 5 m2 let's add one to M
10:28 - - Oh takes a long time just to like get
10:31 - back to my test drives write this code
10:33 - into like a code example you'd be much
10:35 - nicer that way I'll do that in the next
10:38 - video now let me look at all of them
10:41 - console table m1 matrix
10:45 - console table and - dot matrix okay 1 +
10:51 - 5 - 6 6 plus 5 is 11 so let's see what
10:56 - we get M m1 dot add M - okay
11:06 - console table m1 I don't know dot matrix
11:19 - I think that's right I scroll back up I
11:25 - cleared it I can't scroll back up
11:26 - someone will have to confirm the map but
11:29 - I think we have successfully now written
11:31 - a function into our library that can do
11:33 - either scalar operation or an element
11:35 - operation element wise operation and
11:37 - it's the same function and if I go back
11:40 - to the library I could do this same
11:42 - thing with multiply however I'm going to
11:44 - leave that I'm going to just do that on
11:45 - my going time I'm going to leave that as
11:47 - an exercise for you so if you're
11:48 - following along and building this
11:50 - library with me now go and write the
11:54 - same code to make multiply work both
11:56 - scalar and element wise and we're yes
12:00 - there is expel so to speak the thing
12:02 - that's the most important thing that I
12:04 - haven't gotten to is actual matrix
12:07 - multiplication that isn't element wise
12:11 - and this by the way this element-wise
12:12 - matrix multiplication is referred to is
12:16 - commonly known as
12:17 - the hard Maru no I know so that's that's
12:24 - on Twitter Arthur on Twitter does
12:25 - amazing work but what's that product had
12:29 - Hadamard product let's go to the
12:32 - Wikipedia page so that's what this is
12:35 - called
12:35 - Hannum are also as the sure product
12:38 - that's the element wise multiplication
12:40 - but matrix multiplication itself is
12:44 - actually going to work in a completely
12:45 - different way it could be the
12:47 - fundamental piece of how you look at
12:49 - inputs and weights and how we multiply
12:53 - those things that add them all together
12:55 - in a neural network so so this is where
12:57 - we're building up to so in the next
12:58 - video I am going to look at matrix
13:02 - multiplication the sort of core piece
13:04 - and we're going to put that into our
13:06 - library there's some other things we
13:07 - have a look at transposing a matrix is
13:09 - something we'll need and a few other
13:11 - things too and then we'll be back into
13:13 - the neural network and starting to put
13:15 - those pieces together hoof there's a lot
13:16 - of a lot of elements to this a lot of
13:18 - videos but thanks for staying with me in
13:20 - this journey processed thing and
13:22 - hopefully I'm doing okay see you soon
13:27 - [Music]