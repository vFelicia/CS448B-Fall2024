00:00 - oh it's time for coding challenge number
00:04 - 100 here we go uh in this coding
00:07 - challenge I am going to do something
00:10 - that I have been wanting to do on this
00:11 - channel for uh know about 100 coding
00:14 - challenges I am going to make a project
00:18 - that involves neuro evolution I am going
00:21 - to combine both neural networks and
00:22 - genetic algorithms into an agent into a
00:26 - simulation of a simple game and I'm
00:28 - going to train choo-choo train
00:32 - that agent to play that game effectively
00:35 - by making decisions with a neural
00:36 - network and evolving its neural network
00:39 - with a genetic algorithm wait a bunch of
00:41 - explanation so this is a demonstration
00:43 - that versatility on github coding train
00:47 - contributor Eric made this is using the
00:51 - flappy bird clone github repository that
00:53 - various folks have contributed to design
00:55 - ideas too and it is actually running
00:57 - neuro evolution right now you can see
00:59 - these trains are kind of getting better
01:01 - and better at making their way through
01:03 - these little gaps so I'm going to
01:05 - program this myself now I'm gonna make a
01:07 - version of this in this coding challenge
01:10 - the difference however is I don't want
01:13 - to work in a sort of a simpler place so
01:15 - I am going to use the code from I think
01:18 - it was coding challenge number 31 which
01:20 - just is this simple version of flappy
01:22 - bird that I'm playing with the spacebar
01:24 - right now so I took out all the design
01:26 - stuff just to see if we can get the oh
01:28 - god I'm terrible at this the mechanic
01:30 - the mechanic of the game working now I
01:34 - need to move over to the white board to
01:36 - it for a second before I can write any
01:38 - code I want to talk about all of the
01:40 - pieces going on here alright so number
01:43 - one I need the I need to have the flappy
01:47 - bird game so you can look and find you
01:51 - if you wanted to recreate this coding
01:53 - challenge you can go and get a coding
01:56 - challenge number 31 I've actually made a
01:57 - few minor tweaks to it but I will I
02:00 - guess after this is over I'm gonna
02:01 - update those so coding challenge 31 will
02:03 - mirror the code as I start with then I
02:07 - also need the toy neural net
02:11 - work library which has two files
02:16 - associated with it matrix is and also
02:24 - neural I think it's just called n NJ s
02:27 - so this is the code for the neural
02:29 - network and a some code for some matrix
02:31 - multiplication math that's part of the
02:33 - neural network if you're interested in
02:35 - how this library was made boy do I have
02:37 - a lot of tutorials for you link to those
02:39 - somewhere in this video subscription and
02:41 - this by the way incidentally just just
02:43 - has a file for the main sketch I believe
02:47 - it has a file called pipe touch a s and
02:49 - one called I know I'm probably writing
02:52 - off the side here but close enough pipe
02:54 - digest and one called
02:56 - bird s so this is all the code that I'm
02:59 - going to start with now nowhere in here
03:03 - is there anything about a genetic
03:06 - algorithm so most of the code that I'm
03:08 - going to write during this coding
03:09 - challenge I'm going to put into a new
03:11 - file and I will call it GA j s there are
03:15 - a couple features that are that are in
03:18 - this neural network class that are that
03:23 - I put there for the purposes of being
03:26 - able to apply a genetic algorithm and
03:28 - those are a function called copy which
03:31 - allows me to make a complete copy of a
03:33 - neural network in its like current state
03:36 - as well as mutate which is a function
03:39 - that allows me to make some minor random
03:42 - changes to the state of that neural
03:44 - network and when I say state I mean all
03:46 - of the weights so these are some things
03:48 - that I'm going to definitely need to
03:49 - make use of what I will not be doing is
03:52 - I won't be training the neural network
03:54 - in the sort of traditional way that you
03:56 - might have seen in some my other videos
03:57 - like the doodle classifier or the XOR
04:00 - challenge where I'm using this thing
04:02 - called back propagation supervised
04:04 - learning what I want to do in this video
04:07 - is something that's akin to this idea of
04:11 - reinforcement learning now
04:15 - reinforcement learning is a field of
04:19 - research that's been around for a very
04:20 - long time
04:21 - it predates deep learning neural
04:23 - networks
04:24 - that sort of stuff and there's I would
04:26 - love to UM do lots more tutorials about
04:28 - reinforcement learning the recent
04:30 - advances that you might have seen with
04:31 - things like deep mind and it's Bach that
04:36 - learned to beat all of the Atari games
04:38 - those were developed with a style of
04:41 - reinforcement learning called a deep cue
04:43 - learning which uses a neural network and
04:48 - trains the neural network based on this
04:52 - reward based system so you have this
04:54 - idea of in reinforcement learning that
04:57 - you have a world the world is going to
04:59 - be in our case the world of flappy bird
05:01 - the world has a given state the agent or
05:07 - the entity that is being reinforced or
05:10 - train that is learning based on that
05:13 - state just taught just decides to make
05:16 - an action I'm going to jump up I'm going
05:19 - to not jump up in this case the fly bird
05:21 - is very simple and then based on that
05:23 - there is a reward that reward is fed
05:29 - back into the system and we kind of
05:31 - repeat here now here's the pig this is
05:33 - what makes deep reinforcement learning
05:36 - and other reinforcement learning
05:38 - scenarios very complicated let's just
05:40 - think about this in the case of flappy
05:42 - bird I am a bird I am over here I now
05:47 - this is the state the state could just
05:50 - be the pixels of the display and that's
05:52 - in fact what was used in this in the
05:55 - deep mind project I am a bird and I am
06:00 - looking at the state and evaluating the
06:02 - state I'm going to choose to make an
06:04 - action that choice is to jump up
06:07 - I now expect my reward please everybody
06:10 - shower me with your gifts I have made
06:12 - this wonderful decision to jump up the
06:13 - problem is how do I know if that was a
06:15 - good or bad decision
06:16 - I don't really right now I don't until
06:18 - much later I don't the payoff for
06:22 - certain things that I might do in a game
06:24 - scenario how do I know if I'm playing
06:27 - say the game chess if this move is
06:30 - really gonna be a good move for way down
06:32 - the line this is something I really need
06:35 - to be to figure out I think it's very
06:38 - calm
06:38 - located very quickly the good news is I
06:40 - can use a different system I can say you
06:44 - know what instead of trying to actually
06:46 - figure out whether it was a good or bad
06:47 - decision I'm just going to make a whole
06:51 - lot of these birds maybe like a thousand
06:53 - of them they will all have random neural
06:56 - networks random neural networks they
06:58 - will just make random decisions and
07:00 - maybe some of those random decisions
07:02 - happen to be better than some of the
07:04 - other random decisions I will then take
07:06 - those into a new generation and
07:08 - repopulate the world with a hundred new
07:10 - birds based off of those ones that did
07:12 - well over and over and over again this
07:14 - same principles of a genetic algorithm
07:16 - so now I might refer to if you have not
07:19 - ever worked with a genetic algorithm
07:20 - before I prefer to you to my the
07:22 - gatherer of the tutorial series okay so
07:25 - let's go and write a little bit of code
07:27 - and then we're gonna have to come back
07:28 - here just with the white board I know in
07:30 - a second but let's let's start doing a
07:31 - little bit of code here so I'm gonna go
07:33 - into the code I'm gonna go into the bird
07:35 - class and right here I'm noticing okay
07:37 - this is the function that causes the
07:42 - bird to jump up how is that currently
07:44 - decided that is currently decided in
07:47 - sketch KS here when I press a key this
07:51 - will no longer be the case this entire
07:54 - function is now going to be commented
07:55 - out I want the bird to make its own
07:58 - decision whether it should jump up or
08:00 - not so now I'm gonna go over here and
08:04 - I'm going to say this dot brain equals
08:10 - new neural network so the idea here is
08:14 - that the inside the bird object the bird
08:19 - object will have its own neural network
08:21 - and its neural network will be the thing
08:23 - that makes the decision whether it
08:24 - should jump or not I'm remembering this
08:27 - is not an original idea I have of course
08:29 - I will include some links in this
08:32 - video's description to other references
08:33 - and papers on neuro evolution but I also
08:36 - want to briefly just point out a bunch
08:38 - of these links which are here these are
08:42 - some other neuro and
08:44 - demonstrations that are on github from
08:47 - various other github users there's a
08:48 - flap e-learning one an asteroids
08:50 - learning one the steering agent snake
08:52 - neuro-evolutionary Lucian plague super
08:54 - mario so I'll include links to all these
08:55 - as well as well some of these papers and
08:58 - other resources in the video's
08:59 - description ok so now here's the thing
09:04 - if you watched any of my neural network
09:07 - tutorials you might have might remember
09:09 - that what do I need to put in here I
09:11 - need to say how many inputs I need to
09:15 - say how many outputs and I need to say
09:17 - how many hidden nodes so what goes in
09:23 - there this is whatever we have to return
09:25 - to the white board ok so here's the
09:28 - thing this is the game flappy bird I'm
09:33 - going to now architect my neural network
09:38 - down here I need a bunch of inputs I
09:40 - need a bunch of hidden and I need a
09:42 - bunch of outputs let's go with the easy
09:46 - part first the easy part here is perhaps
09:49 - the outputs so let's say I was playing I
09:53 - wanted to train an agent to play a game
09:55 - that used the arrow keys
09:57 - so the the player of the game can either
10:00 - move up down left or right there's four
10:02 - option I would have four outputs I want
10:05 - a vector with four outputs each
10:08 - representing the probability or the
10:10 - confidence score of whether it's the
10:12 - play the agent should move up move down
10:14 - move left or right in this case I don't
10:17 - need for the only decision is jump or
10:20 - don't jump in this case I really only
10:22 - need one output right I can have one
10:24 - output that ranges between 0 and 1 if
10:26 - it's greater than 0.5 jump if it's less
10:29 - than 0.5 don't jump let's just do that
10:31 - so let's do that that's gonna make our
10:34 - life so much easier so I'm just gonna
10:35 - have one output
10:36 - oh so simple we'll do some other I'll do
10:39 - some other examples in other videos with
10:40 - more complexity one output now how many
10:45 - inputs this gets a little harder now
10:48 - wouldn't it be nice if I could write
10:51 - some generic code that's basically gonna
10:54 - work for any game as long as I have a
10:56 - way of evaluating the score
10:58 - the game the same code will work for
11:01 - everything and one way of doing that
11:03 - would actually be the pixels of the game
11:06 - as inputs so maybe I take the the
11:10 - visuals of the game i sample it down to
11:12 - a lower resolution image i flatten that
11:14 - into an array I take the brightness of
11:16 - every pixel I feed that in as the inputs
11:18 - that's certainly one thing I could do I
11:19 - would love to try that as an experiment
11:21 - in as a counterpoint so the way I'm
11:24 - going to do it in this video I'm instead
11:26 - going to take somewhat of a higher level
11:29 - approach and I'm gonna do some feature
11:31 - extraction manually with my brain I'm
11:34 - going to say that I think I'm going to
11:38 - decide that I think that the important
11:42 - properties the inputs should be the Y
11:47 - location of the bird the X location of
11:53 - the closest pipe the Y location of the
11:59 - top pipe and the Y location of the
12:02 - bottom pipe how many inputs is that 4 so
12:09 - I'm going to have 1 2 3 4 inputs and 1
12:14 - output so I've decided how many inputs
12:16 - and how many outputs so now the other
12:19 - question is how many hidden nodes should
12:22 - I have this isn't a very complicated
12:30 - problem this might work was just one
12:32 - hidden node it might work with no hidden
12:36 - layer at all even in fact it might work
12:39 - with just two of these inputs and be
12:40 - able to figure it out but let's just
12:43 - decide that we're also gonna use four
12:45 - just for the sake of having some hidden
12:48 - nodes we can experiment does it work
12:50 - better if I make 64 hidden or four or
12:52 - eight trial and error is your friend in
12:54 - machine learning systems okay so now
12:57 - this is now the diagram of the neural
13:01 - network I must sit here and connect all
13:08 - of the various lines
13:11 - alright so the inputs come in here and
13:13 - the output comes in here for inputs for
13:17 - hidden one output if you want to learn
13:22 - more about how a neural network works
13:24 - all of the internals that are going on
13:25 - here what all these connections are in
13:27 - the weights refer you back to my neural
13:29 - network tutorial series but this is
13:30 - pretty similar also to what I did in the
13:32 - color predictor there were three inputs
13:33 - and two outputs I can't remember alright
13:36 - so now we've decided that I want to have
13:40 - four inputs four hidden nodes and one
13:45 - output so we now have the brain of our
13:48 - bird and then in updates the bird is
13:54 - going to decide oh well this is more
13:59 - complicated than I thought let's write a
14:01 - new function let's write a function
14:03 - called think so in think basically what
14:06 - I want to do is I want to say let the
14:09 - output equal the this dot brain predict
14:13 - and I want to send in the inputs so for
14:17 - example the inputs have to be an array
14:19 - of four numbers right so they would look
14:26 - like something like this I'm gonna put
14:28 - them in there and then I'm just going to
14:30 - say and if the output is greater than
14:36 - 0.5 then this dot up right so this is
14:40 - the idea here that the neural network
14:43 - library that I'm using has a function
14:45 - called predict when I call that function
14:48 - I send in the inputs the inputs go feed
14:53 - through times the weights some
14:56 - activation function times the weights
14:58 - some activation function I get the
15:00 - output and based on that output if it's
15:04 - greater than 0.5 the bird jumps if it's
15:06 - less than 0.5 the bird doesn't do
15:08 - anything but this is no good here right
15:11 - this is just me let's just see if this
15:13 - works though I mean these are hard-coded
15:16 - inputs that never change that's not what
15:17 - I want but let's just at least see if I
15:19 - don't get any errors so I'm gonna in
15:21 - here now I'm gonna
15:22 - I'm gonna add something I'm gonna say
15:24 - bird dot Fink and I'm going to run the
15:28 - sketch again look look at that it's
15:30 - thinking it's jumping right it decided
15:34 - every time it's basically always going
15:36 - to be up at the top or at the bottom
15:37 - right because it's getting the same
15:39 - inputs over and over again now what I
15:41 - need to do is actually make inputs out
15:44 - of these values these values
15:48 - it's y-position top bottom and the
15:51 - exposition of the pipe okay let's do
15:53 - that
15:53 - so now I'm going to say digit I did it
15:59 - back in the bird I'm gonna say let
16:02 - inputs equal an empty array I'm going to
16:06 - say inputs 0 is this Birds Y position Y
16:15 - position inputs one is oh boy okay
16:19 - here's the problem now I need to know
16:21 - about the pipes so I am a bird and I
16:24 - need to know about the pipes how do I do
16:27 - that
16:28 - so maybe what I'll do is I'll take in as
16:32 - an argument to this function I will take
16:34 - in the pipes array so that is sent into
16:39 - the pink function now I'm gonna go here
16:43 - and I'm gonna say I'm just gonna do
16:45 - pipes index 0 this is a bad idea but
16:48 - let's just start with this pipes index 0
16:52 - top inputs to equal pipes index 0 bottom
17:00 - inputs 3 equal pipes index 0 X right so
17:08 - this is the idea here
17:09 - I want all of those things to be the
17:11 - inputs to the neural network I don't
17:14 - need this anymore right because I am
17:17 - getting them from the properties that
17:18 - say and now let me run this and see what
17:20 - happens yeah it's kind of jumping all
17:23 - the time alright so this did enjoy seem
17:26 - to Bravo look oh it's doing something
17:28 - now it actually cannot look did
17:29 - something and making its own decisions
17:31 - this that was very exciting all right
17:33 - well what I've got some problems here
17:35 - number one is when I sort of made my
17:37 - pretend version of it I purposely made
17:40 - numbers between zero and one so one
17:42 - thing I should really do is normalize
17:44 - all these values that's a pretty typical
17:46 - thing to sort of clean your data so what
17:48 - I'm going to do is I'm say this stop Y
17:49 - divided by height this dot top divided
17:53 - by height and this on the pipes bottom
17:55 - divided by height and the pipes X
17:57 - divided by width so let's do that and
18:04 - identify opes let's get rid of this now
18:06 - you know does this nothing really
18:09 - different is gonna happen here I'm gonna
18:11 - run this a bunch of times oh it's true
18:14 - that was a good one right those are
18:16 - pretty good one all right so you can see
18:18 - that it's doing something it's trying to
18:20 - think but I've got another problem I
18:23 - don't know is pipes zero the right pipe
18:25 - I think I need to I probably need an
18:28 - algorithm to check which pipe is
18:30 - actually the one closest when you
18:31 - remember let me look at the main sketch
18:33 - how do I add the pipes yeah so first of
18:36 - all the pipes are getting added to the
18:37 - end and when did the if the pipe goes
18:39 - off-screen it gets deleted from its spot
18:43 - which would typically be the earliest
18:45 - one so he might work but let's let's be
18:53 - smart about this let's actually let's
18:55 - just say that I'm probably this is
18:57 - probably overdoing it but let's actually
18:59 - find the closest pipe so I'm gonna
19:05 - assume the closest pipe is pipes index 0
19:08 - then I am going to look at all of the
19:13 - pipes starting with 1 and I'm gonna say
19:17 - oh actually you know what let's do this
19:22 - and I want closest different closest D
19:28 - being the closest distance to be the
19:29 - absolute value of this X minus closest X
19:37 - ok then I'm going to say let D equal we
19:43 - can start with 1 here
19:46 - absolute value of this X
19:50 - closest closest X and if d is less than
20:00 - closest D then the closest is that
20:04 - particular pipe and the closest D is
20:09 - that new distance so this is a little
20:11 - quick algorithm find the closest pipe
20:14 - here's the thing though I don't want to
20:17 - pipe if it's gone behind me already that
20:19 - one shouldn't matter I got an idea let's
20:22 - get rid of that absolute value thing
20:26 - right because as long as the distance so
20:32 - what I can do if okay the pipes X minus
20:35 - my x it's positive if it's over here and
20:37 - I want that to be a lower lower number
20:39 - but I don't want it to be negative so as
20:42 - long as D is lessons closest D and D is
20:45 - greater than zero then we're fine but
20:48 - the but if this is negative but it
20:52 - wouldn't be at the beginning okay a
20:54 - couple of mistakes here one is this
20:57 - should be pipes index I I'm going to
20:59 - change this to say closest is null and
21:01 - the closest distance is infinity I love
21:05 - that you could type infinity in
21:07 - JavaScript like knows what that is
21:09 - that's a number it could store in memory
21:12 - but what I'm actually going to do here I
21:14 - think this will work now and then I can
21:15 - start with zero right so as long as it
21:18 - is in front of it that's the closest one
21:21 - so now I can say instead of pipes index
21:25 - zero I'm going to say closest down here
21:30 - I'm gonna say closest here and closest
21:34 - here and here we go now we are ready Oh
21:37 - cannot read property top of no all right
21:41 - so what's going on here oops so the way
21:44 - I program this I've got I've got to say
21:46 - pipe school I took out the absolute
21:47 - value I've got to say pipes index I -
21:52 - this X right because I want it to be
21:55 - positive like the pipe pipe pipe pipe
21:57 - pipe everything goes past it okay this
21:59 - should be fine
22:03 - mmm or not Oh X dot X pipe sniffs I dot
22:09 - X okay there we go so I can do this a
22:13 - bunch of times and we can see I'm gonna
22:15 - get a bunch of random birds that are
22:17 - doing sort of random things whoo all
22:19 - right I think this is gonna be a multi
22:21 - partner coding challenge I am now
22:22 - wrapping up the end of this first part
22:25 - because just to summarize what have I
22:27 - done so far I have built a system where
22:31 - I have the game flappy bird I have
22:34 - developed a neural network architecture
22:35 - for the bird to read in the States sort
22:39 - of evaluate the state of the game
22:42 - make a guess as to what it should do
22:44 - should it jump up should it not based on
22:46 - that and then I have put that into
22:48 - motion that neural network is part of
22:52 - the bird object now it has a brain 4:41
22:56 - and then it has a think function which
22:59 - sends the data about the game into the
23:01 - neural network and decides to go up or
23:03 - not now what I need to do is actually
23:07 - implement the neuro evolution part so
23:12 - I've been implemented the neuro part I
23:14 - designed a way for the bird to make a
23:16 - decision based on how its evaluating the
23:18 - scene and what I need to do now is make
23:21 - a population of them and try them all
23:23 - and evolve them over time so I'm going
23:26 - to take a little break here I'm going to
23:28 - meditate for a minute on how much my
23:30 - brain doesn't work as well as a simple
23:33 - multi-layer perceptron and I will be
23:35 - back in the next video to actually
23:37 - implement the genetic algorithm part
23:39 - thank you for tuning in and being on
23:41 - this journey with me
23:46 - [Music]