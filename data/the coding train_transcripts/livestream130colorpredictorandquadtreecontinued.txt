00:01 - okay I have returned and I have
00:05 - restarted the computer and I have also
00:08 - switched some settings - I had it set on
00:12 - youtube for low latency because I like
00:14 - the live stream viewers to be as close
00:16 - in time to the actual real time of me
00:19 - speaking and demonstrating things but I
00:23 - switch it to normal latency in the hopes
00:25 - that that it you know it says their
00:27 - highest viewer playback quality so fixed
00:31 - great alright wonderful ok so that's
00:35 - good to know
00:36 - I guess I can't really use that low
00:38 - latency what I'm curious about is to do
00:42 - a little bit of timing so what i'm gonna
00:45 - do so i'm gonna watch the patron group
00:48 - in the slack channel i'm going to clap
00:50 - and then i'm gonna start a timer on my
00:54 - watch
00:58 - stopwatch reset and i'm gonna clap and
01:02 - then i want you to type clap into the
01:07 - patron slack channel
01:09 - when i clap and i'll see how well how
01:12 - long the delay is ready oh wait oh yeah
01:16 - actually i'm gonna say now i can't clap
01:18 - because I've been to press into I'm
01:20 - gonna I'm gonna press into the stopwatch
01:24 - ready and now so just type now when you
01:29 - hear this although it'll be passed I'm
01:35 - waiting I'm waiting
01:46 - okay I really botched that but so you're
01:50 - about 17 seconds behind which is fine
01:53 - typically I've been able to get the live
01:55 - stream lag down to less than 10 seconds
01:57 - but I'd much rather have higher quality
01:59 - for you okay we're back
02:05 - all aboard good boy it's the coding
02:09 - train with me your host something or
02:14 - oh there's actually a thing which gives
02:15 - the live latency alright so I'm all
02:20 - rattled now so what was I talking about
02:22 - let me read let me let me let me act as
02:25 - if nothing has happened and I've just
02:26 - started I'm gonna click over here now
02:30 - I wasn't saying run out of so much time
02:34 - it's coming soon next week some point a
02:38 - video tutorial from Lisa Jamboree about
02:41 - the connect Tron project so I was
02:45 - talking about that earlier I guess I
02:46 - won't talk about it again I feel like
02:47 - I'm repeating myself even though maybe
02:49 - that's all that bad quality stream thing
02:52 - is now gone from the internet any
02:53 - forever this afternoon I want to get
02:57 - started with some coatings I've already
02:59 - lost a lot of my wasting time time this
03:02 - afternoon I am very excited to announce
03:04 - that twitter.com let me go actually
03:07 - twitch
03:08 - noop cat lets on the live stream this
03:11 - afternoon will be a new cat from twitch
03:19 - that you might know from ads don't let
03:21 - me watch this ad okay okay hold on let's
03:29 - go to new cats website Sue's so a new
03:33 - cat Sue's Hinton will be here this
03:35 - afternoon at about 2:30 p.m. eastern
03:37 - time to talk about doing stuff with
03:41 - hardware and JavaScript I will stand all
03:44 - the way I will have to leave the room or
03:46 - stand all the way in the corner or
03:47 - something cuz if I go near hardware its
03:49 - spontaneously burst into flame there's
03:52 - actually downstairs in the shop and the
03:54 - physical computing areas there's various
03:55 - alarms that are set up if I walk
03:57 - anywhere near all the alarms go off all
03:59 - the students go running because but I
04:00 - have the opposite effect sometimes on
04:02 - just like code JavaScript code I could
04:04 - just walk by a computer and the bugs
04:06 - kind of go away I lead a very strange
04:09 - life so I would love for you to come and
04:14 - tune in this afternoon I'm really
04:15 - excited to have
04:16 - new cat as a guest and I encourage you
04:18 - to subscribe to her twitch channel she
04:20 - typically does live streams on Sundays
04:22 - and I'm hoping to make a appearance on
04:24 - one of her live streams as well in my
04:26 - desire to collaborate with other people
04:29 - in the world of streaming educational
04:34 - coding technology I don't know I if
04:36 - there's anybody out there doing musical
04:38 - theater
04:38 - I would love to collaborate with you
04:40 - actually but you probably don't want to
04:41 - collaborate with me okay is it new cat
04:45 - or no ope no like no op I always just
04:48 - say new cat am I've been saying it wrong
04:50 - all this time like no op cat like no
04:53 - operation cat I have no idea
04:55 - have I been saying it wrong all this
04:57 - time well guess what we're gonna find
04:58 - out this afternoon the mystery will be
05:01 - solved so what am I here to do today I
05:07 - am going to talk to you about these
05:09 - things first what I'm gonna do while I'm
05:10 - talking about these things I'm going to
05:12 - erase this whiteboards wouldn't it be
05:16 - nice if during a live stream I could
05:19 - have that like effect we're just like
05:21 - being fast-forward doing it really fast
05:24 - maybe I could try to do that live
05:25 - because that was recently in one of my
05:26 - videos
05:28 - Matt Jie who does the editing put in
05:30 - this like speed up effect thing and
05:32 - everybody loved it I'm kind of in love
05:33 - with that okay I'm an attempt I'm an
05:35 - attempt to do that maybe if I have the
05:36 - music on it'll help me
05:59 - sorry beast up it was a beautiful
06:02 - diagram
06:19 - [Music]
06:28 - okay how's my exercise for the day see
06:35 - what my Fitbit thinks of my steps
06:36 - Fitbit not officially a sponsor but
06:38 - Fitbit sponsor sponsorship on ticket
06:42 - sponsors now living in New York City is
06:44 - very expensive
06:45 - okay what does it do it need a marker
06:49 - alright so here's what I want to do
06:51 - today first of all Sue's which now I'm
06:55 - apparently even saying this wrong all my
06:57 - life no o P cat or noob cat which is the
07:00 - way that I say it 2:30 Eastern Daylight
07:05 - Time come for the rainbows stars hearts
07:15 - this is the most important thing to
07:17 - happen today at least I don't know I
07:20 - might have something else that's kind of
07:21 - important but I don't think so no today
07:23 - in my life this is the most important
07:24 - thing to happen now this morning she's
07:27 - coming at 2:30 we're meeting to get set
07:30 - up here before that I need to eat some
07:31 - lunch so I think that I can reasonably
07:34 - stream until about 1 p.m. right now
07:37 - which is only an hour and 20 minutes
07:40 - right now which is not a lot of time so
07:42 - on my list is I wanted to finish off the
07:46 - quadtree
07:48 - challenges and do quadtree with
07:50 - collisions I want to do gibreel color
07:58 - predictor my to finish off that
08:01 - collaboration so if you're not aware
08:04 - Jabril was here last Friday did a guest
08:07 - spot on the coding train about the color
08:09 - predictor then on Sunday released a
08:11 - video on his own channel about the color
08:13 - predictor that has me in it and then I
08:17 - thought I would do as a las or last
08:18 - piece of that do a tutorial about
08:20 - building your own neural network based
08:22 - color predictor and that's kind of my
08:24 - highest priority I think for this
08:26 - morning
08:27 - the third thing as I want to follow up
08:31 - on my p5 load bites pull requests and
08:39 - number four oh boy
08:41 - I need to like come back tomorrow or
08:44 - something and Sunday and Monday so I got
08:48 - like an hour there's like any one of
08:49 - these things that really take me the
08:50 - whole time and the fourth thing is I
08:52 - want to talk about tensor flow wait hold
09:02 - on I've got a sound effect for this
09:04 - somewhere tensor flow dot yes so if
09:16 - something new came out last Friday
09:18 - called tensor flow j/s which is actually
09:21 - formally known as deep learned is which
09:24 - I have referred to and boy am i planning
09:26 - a lot of sessions and tutorials and
09:29 - stuff about using that and how it
09:32 - relates to this other project which is
09:33 - called ml5 I guess dot J s which is an
09:38 - open source library built on top of
09:41 - tensorflow J s this is kind of like a
09:43 - flawed analogy but just to make the case
09:45 - for a second you might say that like p5
09:47 - is a kind of higher level API for html5
09:52 - canvas sort of a lower level API for
09:55 - working and drawing in the browser p5 is
09:58 - more than that and the distance between
09:59 - these two things actually isn't even
10:01 - that far but that's the I guess that's
10:03 - the easiest way for me to explain what
10:05 - ml 5 is tensorflow being a JavaScript
10:08 - version of tensorflow with low-level
10:11 - functionality to do machine learning
10:13 - algorithms and mathematics and various
10:16 - tasks ml5 being a higher level layer API
10:20 - on top of that now the other thing is I
10:22 - should mention in between those two
10:23 - things is something called Kerris
10:25 - without going into a long history of
10:27 - what's tensorflow what's carousel that
10:29 - would probably be an interesting topic
10:30 - for a video tensorflow digest supports
10:33 - what's called the layers API which is
10:36 - Kerris itself is a higher-level layer on
10:39 - top of
10:40 - enter flow and so ml5 is probably even
10:43 - higher level so a lot of the features
10:46 - that I'm hoping to work on in the next
10:47 - month or two and certainly well over the
10:50 - summer is building out examples and
10:52 - tutorials that build on top of Harris
10:55 - and tensor flow yes okay for machine
10:59 - learning stuff thank you good night
11:03 - that's all I have so this is my list and
11:05 - I have to decide what to do and I know
11:07 - if Simon is watching Simon's and say to
11:10 - a straw poll but the straw balls never
11:12 - go well for me I think what I'm going to
11:17 - I'm actually looking to see if there's
11:19 - any questions here in the chat I know
11:23 - you're 20 seconds behind of me oh and I
11:29 - guess I should put my secret cloaking
11:33 - device on top of this secondary laptop
11:39 - where I keep all of the answers and all
11:42 - my code because like that's my secret no
11:45 - I'm just kidding
11:46 - and that's pretty good
11:51 - this needs to be actually I need to fix
11:53 - one thing you do this oops wrong thing
11:59 - sorry I'm just fixing something in the
12:01 - live stream here moving myself down a
12:03 - tiny bit there we go
12:06 - that's usually how I have it and there
12:09 - we go
12:09 - ah Kenneth Lim is around for an hour if
12:14 - you want to do the pull request first I
12:17 - do but I think that's probably not wise
12:21 - but let's let's actually let me at least
12:22 - revisit why I did since since Kenneth
12:26 - has in the chat let me go quickly to
12:30 - github.com processing p5.js
12:36 - pull requests and load bytes here we go
12:44 - okay so I did just release a video this
12:47 - morning I mean this was made like weeks
12:49 - ago I just was kind of had like a mental
12:52 - block with releasing it
12:54 - which was this is this video adding a
12:57 - function to p5.js so I wanted to in that
13:01 - video show the process of making a pull
13:04 - request to a larger open-source project
13:06 - and what's involved with that and I did
13:09 - that this is the pull request there are
13:11 - some nice comments from me I am so me
13:13 - and from Lim zy Kenneth who's in the
13:17 - chat and so I think actually just
13:20 - scanning this over probably what I just
13:22 - want to do is implement this change to
13:27 - how I'm finding the error but so before
13:31 - this can be merged what is over here
13:35 - there's like some noise but that's fine
13:37 - before this can be merged I've got to
13:39 - push some more changes to the pull
13:42 - request but I think I'm not going to do
13:44 - that right now but I would welcome any
13:47 - feedback or comments here and I'll try
13:48 - to get to that soon all right so now the
13:56 - question is color predictor or let's do
14:00 - this let me do a straw poll because that
14:02 - I can't decide color predictor I really
14:06 - feel like I should do the color
14:07 - predictor because it's following up on
14:10 - the live stream from last week and it
14:12 - will doing it later will be stale I'm
14:15 - gonna do the color predictor yeah let's
14:20 - do the color predictor so let me get
14:22 - let's we have an hour and 15 minutes for
14:24 - that and that I think it's gonna have
14:25 - one thing though I'm a little bit
14:26 - freaked out about is the following let
14:33 - me show you what I'm freaked out about
14:36 - coding challenges we go to this playlist
14:39 - coding challenge 1 13 minutes starfield
14:43 - in processing many fewer gray hairs
14:47 - nicer shirt this shirt has now been gone
14:50 - into textile recycling because it had
14:51 - two holes in it but anyway that's
14:53 - according challenge 1 whenever that was
14:54 - recorded if I go all the way down to
14:57 - here keep scrolling I'm gonna scroll
14:59 - look at this quadtree 98
15:06 - [Music]
15:08 - this means my color predictor the color
15:11 - particular Brielle's color predictor
15:12 - would be coding challenge 99 now I can
15:15 - get away with coding challenge 98.3
15:18 - bidding quadri part 3 but then it's
15:22 - gonna be time for coding challenge
15:24 - number 100 I feel really stressed out
15:26 - about but I could just say it's just
15:29 - another it's just another coding
15:31 - challenge it's just number 100 but I
15:32 - feel this like pressure to do something
15:35 - extra special for that could be the
15:37 - neuro evolution thing because that's
15:38 - kind of like a topic I've been building
15:40 - up to for a while
15:41 - it could be Tetris but I don't not so
15:43 - game focus that that really makes sense
15:45 - anyway I'm open to your ideas that's
15:50 - what that's what I'm thinking about
15:52 - these days all right let's do the color
15:54 - predictor so let me get myself situated
15:59 - someone's gonna have to wake up gibreel
16:02 - who's early on the west coast that I
16:04 - know he's not a morning person
16:06 - that's me thing I learned I was like let
16:09 - me schedule you for this thing at NYU at
16:11 - 10 a.m. that's a problem for you right
16:15 - yeah we're gonna have a y2k issue
16:18 - because suddenly now the coding
16:19 - challenges have three numbers instead of
16:22 - two and we haven't our unit tests don't
16:25 - accommodate that CD desktop p5 G - B
16:32 - color predictor I don't know if color
16:38 - predictor is actually the right term for
16:39 - this CD color predictor open let's see I
16:47 - don't care about so actually this is
16:51 - ridiculous what I'm doing here but I'm
16:53 - gonna do it anyway I'm gonna get rid of
16:55 - the libraries folder I'm gonna go to
16:58 - [Music]
17:04 - think here I'm gonna see if there's any
17:07 - changes to my neural network library I'm
17:09 - going to grab come on
17:18 - what okay I'm gonna go grab me a whoa
17:22 - I'm gonna go grab matrix J ass a neural
17:24 - network Jas and to put those in here
17:28 - let's put those in a little folder
17:30 - called Lib because I'm being silly and
17:34 - then now we need to get one of these
17:37 - days what are these days of switched to
17:40 - visual studio code and I term but I mean
17:43 - I'm way behind the times
17:44 - I'm waiting til there's like the thing
17:46 - that people are using that's not AI term
17:47 - then I can switch tighter that's how it
17:50 - works with me
17:51 - oh look and this is Jabril here's this
17:53 - code is the last thing that was open on
17:55 - this computer so maybe that's good to
17:57 - have that available so because I can
18:01 - reference it where is that where was
18:03 - that just probably just on the desktop
18:04 - also it's gonna be sad when by the time
18:08 - I get this set up to ready to start
18:10 - coding the e key doesn't I need a
18:14 - password with no e key that yeah that
18:21 - there we go thank you
18:25 - alright so now what am I doing here now
18:31 - I need the atom editor I want to open
18:39 - why your computer's never work huh
18:42 - someone tell me that why do they not
18:44 - work the way they're supposed to come on
18:47 - Adam there you are
18:48 - let's open the color predictor code
18:50 - which is nothing right now a blank
18:52 - sketch dot J yes file index.html let's I
18:58 - want to link to the p5 CDN because I
19:02 - feel like that's just gonna be better so
19:07 - let me do that here and I'll put that
19:13 - here and I don't need sound I probably
19:19 - do need dumb
19:26 - you know what I should also I should
19:28 - just use them minified because I'm not
19:32 - going to be messing with the p5 library
19:34 - itself so let me do this actually
19:37 - and let me link to those get rid of this
19:43 - extra stuff one of these days I will
19:46 - change my template instead of just
19:49 - redoing it every time neural network
19:52 - touch a s-matrix dot yes all right I
19:56 - think we are just about ready to go Here
20:00 - I am let's run a little local web server
20:03 - I will check the chat in a second fail
20:13 - to load because why because I put those
20:17 - in a folder called Lib I think we're
20:23 - good yep let's make this let's think
20:31 - about the amount of space I want here
20:36 - make this a little bigger alright I
20:38 - think I am ready now to start coding
20:46 - there's some discussion in the chat
20:48 - going on about numbers now I just
21:04 - realized something which is that I'm
21:06 - going to use the whiteboard for this
21:09 - tutorial and I now have this whole thing
21:12 - here I guess what I'll do is scream
21:16 - somebody's just screencap this for me
21:20 - we'll save it for later I guess I'm
21:22 - gonna erase it I need
21:29 - so I'm gonna remember this list for
21:34 - another time I'm gonna remember that
21:39 - Suze I'm calling her by her name because
21:44 - I'm afraid to say noop cat no peek at no
21:50 - op cat incorrectly cat you know I view
21:57 - er me I am so me I used to call me I am
22:00 - son that's what I thought it was so this
22:03 - is a pattern I have misinterpreting and
22:06 - mispronouncing things okay we are just
22:09 - about ready to get started
22:11 - I am going to very briefly now I just
22:16 - need to pull up something now maybe I'll
22:19 - pull up let me pull up a Jabril youtube
22:22 - channel that can be my background here
22:33 - to start it's no ooh
22:39 - peek at no Oh peek at I don't know new
22:45 - but cat no anyway okay thanks for all
22:48 - the suggestions all right okay super
22:55 - simply writes I'm so bored I don't blame
22:58 - you it's only been what like an hour and
23:03 - I haven't done anything yet it's like
23:04 - 1153 already alright
23:06 - that was exciting there all right you're
23:08 - no longer bored right that's dispense of
23:10 - weather I will catch that or not here we
23:12 - go we are going to make a color
23:15 - predictor sip of the tea tea tea goes to
23:23 - dangerous spot and here we go okay
23:32 - there's like a thing oh it's actually
23:34 - just on my screen that's what that is
23:38 - by the way I keep thinking it's time for
23:40 - me to get rid of this snowy background
23:43 - but it just keeps snowing in New York
23:45 - let's go just got very hot here
23:51 - Oh sweating okay here we go
24:00 - okay hello and welcome to coding
24:07 - challenge number 99 oh boy you're
24:10 - getting close to 100 I don't know what
24:11 - I'm gonna do if you have any ideas for
24:12 - what coding challenge 100 should be
24:14 - please put them in the comments but this
24:15 - coding challenge is to make a colorful
24:20 - network color predictor and I am basing
24:22 - this coding challenge off of s okay Matt
24:32 - - you just got to do it edit there and
24:33 - I'm gonna figure it out here I liked my
24:35 - beginning so I'm gonna keep it F how
24:38 - does he say it s science F science F
24:41 - science I can't say it anybody tell me
24:44 - he told me this before
24:46 - SEF science I should just say Jabril I'm
24:49 - just gonna say gibreel this coding
24:53 - challenge is based off of Jabril youtube
24:56 - channel and his color predictor machine
24:59 - learning demo so I encourage you to
25:00 - check out that video he also did a live
25:03 - stream actually have Seth stuff
25:07 - Seth stuff I think I just say SEF stuff
25:09 - that's what it is I'm gonna do the whole
25:13 - thing again here we go it won't be as
25:19 - natural when I redo the whole 99 thing
25:21 - but hello and welcome to coding
25:25 - challenge number 99 no IFL comes later
25:30 - never ever stick a hello and welcome to
25:35 - another coding challenge now this coding
25:37 - challenge is number 99 which means the
25:40 - next coding challenge is
25:43 - we're 100 and idea what I feel this
25:46 - pressure to do something special so
25:47 - please in the comments write your
25:49 - suggestions for coding challenge number
25:51 - 100 and maybe I'll think of something or
25:53 - you'll help me think of something okay
25:54 - so what's happening now I am going to do
25:57 - a coding challenge to make a neural
25:59 - network color predictor this is based
26:01 - off of project made by Jabril I would
26:04 - check out his YouTube channel this link
26:06 - in this video's description he has a
26:08 - video called color predictor machine
26:10 - learning demo that I'd encourage you to
26:11 - watch he also actually came on as a
26:13 - guest and I'll link to a video with
26:15 - Jabril where he talks through this color
26:17 - predictor but I'm gonna make my own
26:18 - version of it and I'm gonna use my toy
26:20 - neural network JavaScript library okay
26:23 - so first before I start coding I want to
26:28 - spend some time with you you were just
26:31 - taking deep breaths together thinking
26:33 - about flowers okay well I I guess I
26:37 - should talk through what the problem is
26:38 - so here's here's the problem so to speak
26:41 - now one of the reasons why I love this
26:43 - idea which came from Jabril is that I'm
26:45 - always looking for really simple almost
26:48 - trivial scenarios to demonstrate a
26:50 - machine learning concept where they all
26:53 - the pieces of how the algorithm works
26:55 - its visual it involves interaction and
26:58 - involves drawing because this to me is a
27:00 - good basis for people watching and
27:02 - learning to then build their own more
27:03 - complex or sophisticated design machine
27:07 - learning system things so this is
27:09 - incredibly simple and in fact just to be
27:11 - clear you do not need a neural network
27:13 - for this it almost makes no sense at all
27:15 - to use a neural network for this but it
27:17 - makes the point you might have heard
27:19 - this you might have heard this idea that
27:21 - a neural network is a universal function
27:25 - approximator so I think that this video
27:31 - and this topic in this demonstration
27:33 - will unpack what this means in a in a
27:36 - nice way what do I mean by that
27:38 - so what is the problem that we're trying
27:40 - to solve so the problem is let's say I
27:44 - have a color some RGB color some RGB
27:50 - color and I want to put text on top of
27:53 - that color so I could make a more
27:55 - complex problem which I would encourage
27:57 - do as an exercise after watching this
27:58 - what would be the most pleasantly
28:00 - looking or complimentary that detector
28:03 - that's actual thing color to overlay on
28:06 - that RGB color but I'm just gonna ask a
28:08 - simple question which looks better black
28:11 - or white and we could get an old
28:16 - discussion of why you know perception
28:18 - and what looks better but I just mean
28:20 - just in the sort of arbitrary sense like
28:22 - which is easier to read which is more
28:23 - legible and we could write a function
28:26 - right
28:27 - we could write a function a JavaScript
28:31 - function I'm just checking to see right
28:33 - and that JavaScript function takes as
28:36 - its arguments on our a G and a B and
28:40 - what it does is it returns maybe it
28:44 - returns I mean black or maybe somewhere
28:48 - else in the function it returns white
28:50 - and maybe we just have like this if
28:52 - statement and maybe I'm doing something
28:54 - like if R + G + B is less than 100 or
28:59 - less than 200 returned black otherwise
29:03 - return white so this is the idea this is
29:05 - a function it takes inputs how many
29:10 - inputs 3 and it returns an output how
29:15 - many outputs 1 but out of 2
29:17 - possibilities is important here there
29:19 - are 2 possible out out - 2 possibilities
29:22 - it takes one output it to function it
29:26 - takes 3 inputs and returns one output
29:28 - the inputs are numbers between 0 and 255
29:33 - and the output is one label which is a
29:37 - string but another way I could think
29:39 - about this as it could return a kind of
29:41 - probability value how likely is it that
29:43 - black looks better and how likely is it
29:45 - that white looks better and that would
29:47 - be that would be kind of also - so -
29:51 - floating-point numbers we could think of
29:52 - it that way so this is a function so a
29:55 - lot of machine like imagine this so now
29:58 - I have this function takes the RGB color
29:59 - now let me tell you let me let me give
30:00 - you another function write a function
30:02 - that takes a image data of 200 by 200
30:06 - pixel image and then return
30:09 - what's in that image now you could
30:10 - imagine in this case deciding whether it
30:13 - should be black or white is just a
30:14 - matter of okay should I is it bright as
30:17 - a dark which close gonna be like a
30:18 - bright color looks better on a dark
30:20 - color a dark color looks better on a
30:21 - bright color but if I took in a full
30:23 - image I needed to return whether it's a
30:25 - cat a dog a turtle a coffee mug cell
30:28 - phone a walking stick a conductors baton
30:31 - I don't know where my brain is going
30:33 - here i toy tricking right try writing a
30:39 - bunch of if statements to do that well
30:41 - if the pixel colors are this and shaped
30:44 - like this right having to hard code and
30:46 - algorithm a function that takes inputs
30:49 - and generates an output would be really
30:51 - difficult this is what a neural network
30:55 - is for and just to make this case here
30:58 - the idea here is that a neural network
31:02 - can approximate any function it can
31:06 - learn to receive inputs and return the
31:10 - outputs for any input data for any sort
31:14 - of problem in field is this true that at
31:16 - Google any in capital letters the big
31:19 - underline is true that's an open
31:20 - question what are the limitations what
31:22 - should and should not we be doing should
31:24 - we even be using a neural network for
31:26 - this task are we causing harm by doing
31:28 - this machine learning tasks but those
31:30 - those questions aside now we can say
31:32 - well if I have this quote-unquote neural
31:35 - network thing what if I were to just
31:38 - send three inputs into it our G B and
31:43 - then I want to receive two outputs
31:48 - probability of black probability of
31:52 - white this is now a universal function a
31:57 - approximator it is going to stand in so
32:00 - what is neural net machine learning
32:01 - doesn't necessarily replace you can
32:03 - think of it as I mean it will machine
32:05 - learning replace the need to write code
32:06 - completely at some point maybe but here
32:09 - what I would make the case is that
32:10 - machine learning a neural network might
32:12 - replace the guts of a function that you
32:15 - might hard code otherwise okay boy am i
32:18 - spending a long time explaining this so
32:21 - now
32:22 - how what goes here what goes here now if
32:24 - you want to learn more about the
32:26 - structure of a neural network and the
32:28 - internals of it I would refer you to the
32:30 - three blue one brown video series as
32:32 - well as my video series the I would
32:41 - refer you to the three blue one brown
32:43 - video series as well as my video series
32:46 - which goes through building this neural
32:48 - network library in JavaScript for us as
32:51 - the user of the neural network library
32:53 - the only things we need to decide are
32:55 - how many how many inputs and how many
33:02 - outputs and then so this is inputs and
33:08 - outputs are the things we as the end
33:10 - user of the neural network look at and
33:13 - control we're sending in the input we're
33:15 - reading the output we're doing something
33:16 - with the output we're sending you the
33:18 - input we're reading the output we're
33:20 - doing something with the output but
33:22 - those sort of quote-unquote magic which
33:24 - isn't magic it's just math numbers
33:26 - multiplied and added together all sorts
33:28 - of other stuff is this idea of a hidden
33:31 - layer and there could be multiple hidden
33:33 - layer there can be hidden layers of
33:35 - different nodes but for the sake of
33:37 - argument this is such an incredibly
33:38 - simple problem who knows if we even need
33:41 - the hidden layer for it we probably do
33:42 - but we can just kind of come pick
33:45 - something somewhat arbitrarily so I'm
33:48 - gonna say there are three inputs there
33:52 - are two outputs and what I'm going to do
33:56 - is just say this is what Jabril use so
33:59 - why not use the same I'm gonna add three
34:01 - hidden nodes and the idea of a neural
34:05 - network is the inputs all go into each
34:09 - hidden node they get processed by the
34:11 - hidden node they an each in node
34:13 - connects to every output whoops I do
34:16 - that and then they get processed by the
34:18 - outputs and we get the results that's
34:20 - known as feed-forward what is that
34:22 - processing it has to do with the weights
34:24 - of the connections the summing of the
34:26 - values the activation of the neural net
34:28 - work I think at this point it probably
34:30 - makes more sense for me to refer you to
34:32 - my other tutorials that go through the
34:34 - mechanics of this
34:35 - I just want to now use it and in the
34:38 - sort of higher level way as a library
34:40 - where I'm gonna send in my inputs and
34:41 - look at the outputs and of course I'm
34:43 - gonna have to train it I'm gonna have to
34:45 - teach their neural network to give me
34:46 - certain outputs that I want so that's
34:48 - what I'm gonna get into when I go and
34:50 - write the code right now okay boy how
35:00 - was that like half an hour but I kind of
35:03 - wanted to make that explanation because
35:05 - I feel like people say Universal
35:08 - function approximator I hear that all
35:11 - the time and I don't and I wanted to
35:13 - make some sort of connection of what
35:15 - that actually means was that helpful
35:16 - give me a little feedback here before I
35:18 - move on should this now be part two I
35:20 - don't think so I think this can all
35:22 - still be in one video and by the way I
35:31 - really should be adding softmax
35:32 - it's about neural network library but I
35:34 - don't have time to do that oh yes yes
35:42 - yes yes yes the normalization so that
35:45 - will come up that will cut have
35:47 - mentioned that here thank you for
35:49 - pointing that out but I'll just have to
35:50 - get to that when I start doing the
35:52 - coding that will come up all right what
35:59 - time are we at 1206 that's a lot of time
36:02 - let me do a little camera cycling maybe
36:07 - if I had time in between during lunch
36:09 - today
36:10 - bye time to try to install that firmware
36:12 - to fix the camera finally oh that was
36:17 - only eight minutes at the white board oh
36:19 - that's not bad at all
36:20 - that's fine okay great oh yeah Tim I
36:26 - apologize so let me just touch on this
36:29 - for a second because this is a really
36:30 - good question I have to really apologize
36:32 - I I did not expect I mean maybe I should
36:36 - have I I sometimes don't realize that
36:39 - the audience for this channel it's kind
36:41 - of
36:41 - you know large and when I release
36:45 - something people really are excited to
36:46 - contribute and there are currently 32
36:49 - outstanding pull requests here on this
36:51 - neural network library I just honestly
36:54 - like haven't really had the time to go
36:58 - through them and see and I also want to
37:00 - like add some stuff to it first I really
37:02 - appreciate all of these contributions
37:04 - and I got to figure out a way to manage
37:07 - that I just don't have the truth that
37:09 - matters I just don't really have one
37:10 - right now Cody challenge 100 should be
37:13 - fixing the camera that's good get a bell
37:19 - for that alright okay so let me alright
37:31 - alright
37:32 - there's a lot of messages retracted I
37:34 - don't know what that means okay okay so
37:40 - first let's take a look at gibreel code
37:42 - he might have a newer version by now but
37:44 - this is what he demonstrated last week
37:46 - on the coding train so I could say like
37:48 - oh I think white looks better on this
37:50 - color by the way I'm like the have no
37:54 - ability for what our talent for visual
37:58 - design whatsoever time to get on the
37:59 - truck I don't know black looks better
38:01 - black looks better white looks better so
38:04 - you can see this is me active this is a
38:06 - this dot represents the computer
38:09 - guessing which ones it thinks it should
38:11 - be and me clicking has to do with me
38:15 - giving this or like training information
38:17 - like hey girl network it should be this
38:19 - one so I'm gonna go through a bill all
38:20 - the pieces of this there's some other
38:22 - stuff going on in here where Jabril is
38:24 - using a genetic algorithm and there's
38:25 - like this sort of voting thing going on
38:27 - but let's let go let's just start
38:28 - building some code from scratch and we
38:30 - can kind of compare and contrast or you
38:32 - can compare test on your own later okay
38:34 - so this is my color predictor I'm going
38:37 - to go to an empty sketch the first thing
38:39 - that I want to do is I'm just going to
38:41 - create variables for r g and b and when
38:45 - the pro i'm gonna write up maybe i'll
38:47 - write a function pick color and I'm just
38:51 - gonna say R equals random 255
38:55 - g/b and I am going to then draw the
39:01 - background RG B and I'm gonna say
39:06 - mousepressed pick color so let me make a
39:13 - few key points here me in creating this
39:16 - example in writing this code I'm not
39:17 - thinking about interaction design I'm
39:19 - not thinking about visual design I'm not
39:21 - thinking about optimized efficient code
39:23 - I just want to sort of demonstrate the
39:25 - idea and get something up and working
39:27 - quickly you the viewer can then take
39:30 - this and make a more interesting
39:32 - thoughtful designed version of it even
39:35 - perhaps with a different algorithm or a
39:37 - different problem altogether but let's
39:38 - just see now this should be enough code
39:40 - for me to every time I click the mouse
39:43 - get a new random color okay so I might
39:46 - as well also pick that color in setup
39:48 - now I also want to draw let me say text
39:52 - size 64 then I want to safe I mean to
39:58 - know stroke I think if text can have an
40:00 - outline in a fill I'm gonna do fill 0
40:02 - text black and let me do
40:06 - text-align:center also so black and that
40:14 - should be what is my let me make the
40:16 - dimensions of this a little simpler 400
40:18 - by 300 so this would be 150 then I guess
40:23 - 150 150 I don't know and 250 150 and
40:30 - this would say white so let's see how
40:32 - this goes
40:35 - alright so that's a little bit too big
40:38 - but I could also just make it wider 600
40:42 - and then this would be 200 and 400 right
40:47 - there we go
40:49 - okay this one should be fill 255 okay so
40:58 - now I have a system where at least I am
41:00 - seeing which one it should be black or
41:04 - white I'm not seeing both colors written
41:07 - on
41:07 - in the background let's draw a line down
41:09 - the middle I think they me visually it
41:11 - needs that i don't think i centered
41:13 - these correctly but whatever okay okay
41:19 - we're getting somewhere
41:21 - center Center someone in the chat is
41:23 - telling me to use center center why not
41:25 - so that aligned it Center vertically two
41:27 - beautiful thank you well that was an
41:29 - excellent suggestion okay so now what I
41:31 - want to do is I guess what we're ready
41:34 - so this is what I love about this
41:36 - problem we're ready for the neural
41:39 - network because we could do it so what
41:45 - do i what do I need I want to make a I'm
41:47 - gonna call it brain I'm gonna make a
41:49 - variable called brain it's gonna be the
41:50 - neural network now I just don't get a
41:52 - neural network in JavaScript just by the
41:55 - nature of programming JavaScript I'm
41:56 - getting it because I have imported
41:58 - already into my HTML file two files and
42:02 - nsj and matrix touches this is a little
42:04 - toy neural network library that I
42:06 - developed in a whole set of video
42:07 - tutorials at some point in the future
42:09 - I'm gonna replace this with this new
42:11 - project called tensorflow j/s which is a
42:13 - lower-level machine learning library and
42:15 - almost also ml5 this other library but
42:17 - I'll come back to that another time I'm
42:18 - still using this little toy neural
42:20 - network so what I want to do now in the
42:23 - code is I just want to say brain in
42:24 - setup I want to say brain equals a new
42:28 - neural network now it expects three
42:32 - arguments three arguments now this is
42:35 - not universal to how neural network
42:37 - libraries work this is a very simple one
42:39 - that is very basic features and what it
42:42 - expects is how many inputs
42:45 - how many outputs and how many hidden
42:47 - nodes but not in that order inputs
42:49 - hidden outputs so this we can see is 3 3
42:52 - 2 that's the architecture the model
42:55 - architecture that I have designed three
42:58 - three two wonderful now I've got them
43:02 - done I got it no I keep going now what I
43:05 - could do is let's say every time so
43:08 - let's make let's let's let's make a
43:11 - variable called which like which one is
43:14 - better black or white and I will just
43:18 - start with saying black
43:22 - and what I'm gonna do is let's do the
43:25 - same sort of technique that gibreel did
43:28 - if which equals black then then I'm
43:34 - gonna draw a circle a circle which is
43:41 - where at two hundred two hundred three
43:45 - hundred sixty sixty and I there and then
43:51 - else if it's white then draw it at four
43:57 - hundred and so this would be fill zero
43:59 - this would be fill two fifty five and
44:02 - we're still no stroke okay so now we can
44:06 - see that's very far down so let me move
44:10 - this up to two hundred
44:14 - that's no sense of dimensions whatsoever
44:19 - perfect oh this looks weird now it's not
44:21 - all centered but fine oh my god I can't
44:24 - I can't take it I can't take it let's
44:26 - let's move this I really shouldn't be
44:29 - doing this what I'm going to let's make
44:31 - this one hundred one hundred and let's
44:35 - make this two hundred two hundred oh
44:40 - okay I feel better now
44:41 - okay so it's always going to it's always
44:44 - going to pick black right now because no
44:47 - matter what I've just made which equal
44:50 - to black but I can use the neural
44:53 - network now I could use the neural
44:55 - network the neural network is my
44:56 - function approximator let's actually
44:58 - let's let's actually write this code
45:00 - with our own non neural network first
45:02 - just to make this case I'm gonna write a
45:04 - color predictor and I'm gonna say again
45:07 - an RGB and now if I'm gonna just say if
45:11 - R plus G Plus B is greater than 300 then
45:15 - return black else return white so I'm
45:21 - gonna do a hard coded this is my own
45:23 - human learning algorithm I've decided
45:26 - that this is what it means to predict
45:27 - which color would be better and then I'm
45:30 - going to say let which equal color
45:33 - Victor RGB so now we can see it's making
45:40 - that prediction based on my algorithm I
45:42 - wrote an algorithm to make that
45:44 - prediction now so we've got this we
45:47 - could be done no machine learning
45:48 - necessary I finished this project now
45:51 - what I want to do though is I want to
45:53 - chim to comment this out and I'm going
45:56 - to say what am I going to say I'm going
45:58 - to say first I need to make some inputs
46:00 - so the neural network library expects as
46:04 - inputs right my library expects and this
46:07 - is pretty typical of any kind of machine
46:10 - learning based library that you might
46:12 - use it expects the inputs to come in as
46:15 - an array of three numbers and typically
46:19 - you're going to want to have those
46:20 - numbers normalized between 0 and 1 so
46:23 - this is what I need to send into the
46:25 - neural network so inputs equals an array
46:30 - and so how do i normalize these values I
46:32 - can just divide them all by 255 and
46:35 - again more likely this is going there's
46:37 - going to be a much longer process of
46:39 - sort of cleaning and normalizing your
46:40 - data but in this case of a single color
46:42 - super easy to do now what I'm going to
46:46 - do is I'm going to ask for the output
46:48 - from the neural network let outputs
46:51 - equal and I'm going to say brain dot and
46:54 - the function write the function to do
46:56 - the feed-forward algorithm to send the
46:59 - data through and get the result back in
47:01 - my library
47:02 - it's called predict because I'm making a
47:03 - prediction another term for this might
47:05 - be inference guess that type of thing
47:09 - so I'm gonna say brain dot predict and
47:11 - I'm gonna pass in the inputs now let me
47:14 - just let me just console.log those
47:18 - outputs just so we can see and this is
47:22 - gonna sort of break but let's just see
47:23 - what the outputs look like whoa hold on
47:29 - why is this do okis draws right so one
47:33 - thing I just realized is I'm kind of I'm
47:35 - doing all this in the draw loop which is
47:37 - sort of silly so let me actually just
47:39 - say no loop and then in pick color in
47:45 - pick color which is where
47:48 - where is the pick color right here I'm
47:50 - gonna say redraw so I only want to like
47:52 - redraw the canvas up there I don't have
47:54 - anything animating so I don't need the
47:55 - draw loop to be going over and over
47:56 - again so cannot read property predict of
48:01 - undefined sketched out yes oh you know
48:05 - what oh why do I have that bug I created
48:08 - the neural network after I called pick
48:10 - color the neural network needs to exist
48:12 - before I call pick color okay that's
48:15 - good to know
48:16 - great so we can see look at this and why
48:18 - do I have this happen twice 29 why is it
48:22 - happening twice you know I guess it's
48:25 - going through the draw loop once so
48:28 - maybe
48:32 - yeah interestingly okay I'm not gonna
48:35 - worry about I'm not gonna get I'll
48:36 - fiddle with that later
48:37 - the point is oops
48:42 - every time I click we can see these this
48:45 - is the output of the neural network it's
48:47 - an array with two floating-point numbers
48:50 - and those I'm considering to be like the
48:52 - probability right if this number is
48:55 - higher it should be a white maybe black
48:58 - is the correct color if this number is
49:00 - higher the other one what's my hand
49:02 - disappeared the white color should be
49:03 - the one of it now I have to I haven't
49:05 - implemented some things there's a
49:06 - particular algorithm which I really
49:07 - should put into my neural network
49:09 - library I called softmax I have to make
49:11 - a video tutorial about that in the
49:12 - future which would ensure that these two
49:15 - numbers these add up to a total of one
49:18 - and really represent a probability but
49:20 - my neural network is very simple I can
49:21 - just look at which of these output
49:23 - numbers is bigger so I can say then
49:26 - right here I can say now if outputs
49:30 - index 0 is greater than outputs index 1
49:33 - will make that mean return black
49:40 - otherwise return white so now I have my
49:47 - color predictor function no longer uses
49:49 - a hard coded algorithm it uses the
49:52 - results of sending the input data
49:54 - through a neural network so let's go
49:57 - ahead and run this and I can click that
50:00 - you can see
50:01 - it's kind of always picking white by
50:04 - refresh still always picking white by
50:07 - refresh it's kind of always picking
50:08 - black so what's going on here how come
50:11 - this isn't working why is this not
50:13 - learned properly which color should go
50:16 - on top of the other color guess what the
50:19 - the entire mechanic into all of the
50:22 - settings all the parameters all of the
50:24 - weights of all these connections of the
50:26 - neural network were initialized
50:27 - completely randomly a new network isn't
50:30 - just going to learn as if by magic it
50:33 - needs to be taught and there are lots of
50:36 - different strategies for training and
50:38 - working with the neural network one of
50:40 - those strategies is something called
50:41 - supervised learning and you probably
50:43 - can't supervised learning which I have
50:45 - covered in other videos in particular my
50:49 - doodle classification coding challenge
50:51 - so you might look at that as an example
50:53 - but what's going on here so in a sort of
50:56 - normal date mortar of data science
50:58 - driven machine learning context we might
51:00 - prepare a giant training set like I'm
51:04 - going to make a big spreadsheet of every
51:06 - RGB color I can think of and which one
51:08 - looks better black or white that's my
51:10 - training data set to pass through and
51:13 - train this neural network with then I'm
51:15 - going to have a testing data set and
51:16 - that testing data set I'm not it's not
51:19 - part of the training data set because I
51:20 - don't I don't want that neural network
51:22 - to know about it but it also has a bunch
51:23 - of label data colors with black or white
51:26 - labels then I'm going to pass that
51:28 - through and see how well the neural
51:30 - network does guessing against those and
51:32 - if it starts to do well then I could say
51:34 - my model is complete it has been trained
51:36 - I can save it and I could deploy it in
51:38 - some application which has to pick black
51:40 - or white on the fly but I'm not gonna do
51:42 - any of that in this video I'm gonna live
51:44 - in sort of a loosey-goosey interactive
51:46 - world where I'm just gonna let it guess
51:49 - randomly and I'm going to click in order
51:51 - to correct it so I'm gonna I'm going to
51:53 - train the neural network one data point
51:56 - at a time with no training data no
51:58 - testing data just random data as I go so
52:01 - you might think about how would you
52:03 - restructure this to in a more sort of
52:05 - traditional training testing deployment
52:10 - context so what do I mean by that what I
52:13 - want to do is I'm going to create two
52:14 - button
52:15 - I am going to let's just do this here
52:19 - let's say Korea let's do let w button
52:24 - I'm going to have a W button and a B
52:27 - button white button black button and we
52:29 - say W button equals create button white
52:35 - and B button equals create button black
52:45 - and let's take a look here now let's see
52:49 - if I can make this let me I know I don't
52:56 - want to get lost in time manipulation
52:58 - but really really briefly style no no
53:06 - I'm not gonna get lost in Dom
53:07 - manipulation I'm just gonna leave it
53:08 - okay I'm gonna leave oh you can't see
53:09 - that I'm gonna move this over I'm gonna
53:12 - make everything a little smaller no no
53:13 - no no stop stop the coding train does
53:21 - not spend hours and hours and hours
53:23 - during tutorials trying to style and
53:25 - layout is simple examples where it
53:27 - really doesn't matter say this to
53:29 - yourself over and over again okay I'm
53:31 - just gonna keep going doesn't matter
53:32 - doesn't matter if it's a little bit off
53:34 - you can't see it perfectly you get the
53:36 - idea
53:38 - these are my buttons over here white
53:41 - black the idea is that look at this each
53:44 - time I press it goes on to the next
53:45 - color which is kind of interesting I
53:47 - actually fine with that so what I want
53:50 - to do now and I probably would be a
53:52 - nicer interaction if I just sort of like
53:53 - clicked in the in the window there but
53:55 - what I want to do who is that wait some
53:56 - events I'm gonna say mousepressed oh
54:03 - this is so silly but it's fine it's fine
54:05 - it's fine you go pause just give me a
54:09 - timeout for a second I'm gonna need you
54:10 - to edit point got take a deep breath
54:13 - yeah on click figure out which side of
54:15 - the canvas is clicked that seems much
54:17 - better
54:27 - yeah I think I'm gonna back up here
54:29 - let's back up let's forget about the
54:31 - buttons buttons were like an attempt in
54:34 - my mind to make this simpler but there's
54:36 - really no point to them let's draw that
54:38 - line down the middle okay what time is
54:48 - it I got 35 minutes let's keep going all
54:50 - right okay so I want to click what I'm
54:55 - gonna do here is as the trainer I'm
54:57 - gonna click on the side of the canvas
54:59 - that I think looks better like I think
55:00 - white looks better so I'm going to click
55:02 - over here just to make this a little bit
55:04 - easier to follow I'm also going in to
55:07 - draw I'm going to draw a stroke wait for
55:14 - stroke 255 0 I guess I'm going to align
55:18 - with / 2 0 with width / 2 height there
55:27 - we go so I'm gonna draw this so I can
55:29 - click wise these are totally not
55:31 - centered at all I'm like a lunatic
55:34 - either they're not in the right place I
55:37 - I'm sorry I have to correct that it's
55:39 - making me crazy it is how wide is the
55:42 - window it's 600 wide 300 is the middle
55:46 - Oh silly me 15350 thank you very much No
55:53 - 450 450 thank you very much okay
55:58 - 152 please bear with me 450 okay
56:04 - now we're doing well here okay so now
56:06 - the idea here is every time I click over
56:08 - here I want to teach the neural network
56:10 - which one I think it should be so how do
56:13 - I do that
56:14 - so I told you there was a function
56:16 - called predict and the function called
56:19 - predict would send in the input data and
56:23 - give me an output prediction now what I
56:25 - want to do is I want to use a different
56:27 - function called train so each time I
56:30 - click the mouse where is that mouse
56:32 - press before I pick the new color
56:35 - I want to determine is the mouse on the
56:38 - right side or the left side
56:39 - so if met so so I want to create some
56:43 - inputs which is an array and we just let
56:48 - put inputs and if Mouse X is greater
56:52 - than with divided by two then the
56:56 - correct the correct actually so I'm
56:59 - sorry I want to create some targets this
57:01 - is known as targets I mean there's gonna
57:03 - use different terms for all these things
57:04 - but targets are the target outputs I
57:06 - want so if I click on the right side I
57:10 - want the target outputs for white and
57:12 - white means the second number is greater
57:16 - than the first number so the targets if
57:18 - I click on the right should be 0 1 these
57:23 - is the correct this is the correct
57:27 - output if that I that I'm telling the
57:30 - neural network should be if I'm clicking
57:32 - on the right side else the targets and I
57:39 - know I could use one of those ternary
57:41 - blah blah blah things but this is just
57:43 - gonna have to do the targets are if if
57:47 - they're on the Left should be 1 comma 0
57:49 - let's pick up the pace here people by
57:52 - people I need me not you you're doing
57:53 - you're doing great if you're actually
57:54 - still watching this and now what I'm
57:57 - going to do is I'm going to say brain
57:58 - dot train up I need those inputs so the
58:02 - inputs are the same exact thing I did
58:04 - here the inputs are the current RGB and
58:07 - what I want to do is I want to say hey
58:09 - train brain train yourself with these
58:12 - inputs with these targets and in fact
58:16 - this now is going the neural network is
58:19 - going to what's it going to do I'm
58:20 - saying here are the inputs here are the
58:22 - correct outputs that go with those
58:23 - inputs do whatever adjustments you need
58:25 - to do whether you were right or wrong
58:27 - just figure it out and what is that
58:30 - figuring out so interestingly enough I
58:31 - think this is worth even though this is
58:33 - covered in much more detail in my other
58:35 - videos let's say I let's say the neural
58:39 - network I feed in some inputs and what
58:42 - it actually gives me is like 0.8 0.2
58:47 - right this is what it gives me
58:49 - the outputs but ice cave it I'm training
58:53 - it I'm gonna give it targets and the
58:55 - correct targets are zero one that's what
58:59 - the odds the output that I wanted to get
59:02 - that's the correct output so what the
59:04 - neural network does is actually
59:05 - calculate something called an error and
59:08 - the error is really simple it's simply
59:11 - the desired the desired minus the guests
59:15 - or the targets minus the prediction or
59:18 - the targets minus the outputs so the
59:21 - error would actually be negative zero
59:23 - point eight one minus and point zero
59:26 - point eight interestingly enough very
59:28 - symmetrical there so this would be the
59:30 - error and then what happens inside that
59:32 - train function an algorithm called back
59:35 - propagation happens the back propagation
59:37 - takes this error and sends it backwards
59:40 - so when I do prediction I'm sending the
59:42 - data forward through the neural network
59:44 - the training process is about looking at
59:46 - the outputs calculating an error and
59:48 - sending the error backwards through the
59:50 - network and all these little changes all
59:52 - these weights that are adding up numbers
59:53 - and doing those math they all get
59:54 - adjusted so the errors would adjust all
59:56 - the parameters and that's what's
59:58 - happening again you could dive into my
59:59 - other tutorials which go through this in
60:01 - more detail but that's what's happening
60:03 - right here in this function so we are
60:06 - ready to go right all right so I'm gonna
60:14 - what I'm gonna do maybe will do I'm
60:15 - gonna train this for a while you'll
60:18 - watch if you're watching the edited
60:19 - version this it'll speed through fast if
60:21 - you're watching this live here we go
60:24 - what white white black black uh wait
60:46 - anybody see these numbers are they
60:47 - really adjusting this isn't really
60:49 - working very well is it but don't worry
60:51 - wait wait wait just talk amongst
61:01 - yourselves I probably need to have like
61:07 - a the interesting thing is like this is
61:10 - why you need a lot of data for this
61:11 - stuff to work do anything I could make
61:14 - the learning rate much higher that's
61:15 - probably what I should do but you can
61:18 - see here let me just keep going hold on
61:22 - let me at least just tell everything to
61:23 - be white yeah okay so it is sort of
61:26 - learning whoa
61:29 - and I probably using like softmax and
61:32 - it's going to have much more okay so let
61:38 - me keep going
61:53 - do I have an error somewhere good news
62:02 - is I have a half an hour left
62:19 - all right so one thing I want to try to
62:21 - do let's see if I can train it okay I
62:24 - have an idea I mean it is working the
62:31 - problem is like for this to actually so
62:33 - first of all maybe I need more than
62:35 - three hidden nodes I don't think so it's
62:37 - such a simple problem and it I think it
62:39 - probably just needs a lot of training
62:41 - data so so let's actually let's train it
62:46 - let's train it with a lot of training
62:48 - data so I'm gonna I'm gonna go through
62:49 - and do that so I'm gonna ask okay so
62:54 - much.you this can be the end of that
62:55 - sped up thing so and I'll come back
63:01 - alright I'm back
63:03 - actually you know so guess what this
63:04 - didn't work very well I mean I think it
63:05 - is working working with air quotes
63:08 - because if I start teaching it like hey
63:10 - I think black looks better over
63:12 - everything it's eventually gonna switch
63:14 - and then if I just click on white for a
63:16 - while it's gonna switch oh and it's kind
63:17 - of you can see sort of switching back
63:18 - and forth but I think I'd have to sit
63:20 - here and click like for a really really
63:22 - really really really really long time to
63:24 - get it just really like learn to make an
63:28 - optimal decision I need like a lot of
63:30 - training data this is a thing what the
63:34 - discussion is going on in the chat
63:35 - you're really messing with me I just I
63:40 - guess I just shouldn't look at it when
63:41 - it's like you're out there not not about
63:42 - what I'm talking about
63:43 - so I'm oh jeez what if what have I done
63:44 - what have I done wrong alright let me
63:46 - let me uh I don't know you can use all
63:53 - this as like some more fast forwarding
63:54 - time I'm going to start over
63:56 - okay okay I'm back so I tried training
64:04 - this for a while I tried talking about
64:05 - it for a little bit I didn't really get
64:06 - very far even though I think you could
64:08 - see like I I'm gonna like I'm picking
64:10 - and it's kind of actually whoops no I
64:12 - should really move it's giving me sort
64:14 - of different results that's black this
64:17 - one is black that's correct that one is
64:18 - white that's correct
64:19 - look at this yeah hey I think we're good
64:22 - we could see that it's not kind of
64:23 - making some decisions we think this one
64:24 - it should be white let's correct it that
64:26 - seems right this is definitely right
64:28 - that seems right this seems right this
64:31 - seems right right
64:33 - right black is better with this one
64:36 - white is better I don't know why anyway
64:42 - you can see it's kind of gay I don't
64:43 - know that I really give it enough
64:45 - training data to really work optimally
64:47 - and maybe I could be an interesting
64:49 - project if this were like deployed in a
64:51 - distributed way on the web and thousands
64:53 - of people could all come and click on it
64:55 - and like through and train it together
64:57 - as a group of people in the world but
64:59 - let's try training it automatically to
65:01 - see if that works a little bit better so
65:04 - how are we going to do that so let me go
65:06 - back to the code
65:07 - remember this nice little bit of code I
65:10 - had here why not let's train it to
65:12 - actually learn a certain threshold so
65:15 - I'm going to I'm going to write a
65:18 - function here called train color and it
65:27 - gets an r g and b and it's going to
65:30 - return black or white and what i'm going
65:33 - to do now is in setup this is a little
65:37 - bit silly before I do anything I'm just
65:40 - going to say for let I equals 0 I is
65:43 - less than 1000 i plus plus and i'm going
65:46 - to pick a i'm going to pick a different
65:52 - set of random colors that are different
65:54 - from the global random colors then i'm
66:01 - going to i'm going to say the correct
66:08 - answer or the answer oh shoot
66:23 - I'm gonna say the answer is where's a
66:31 - train color train color with RGB and you
66:36 - know what I'm gonna do I'm gonna send
66:38 - you this targets let's let's skip a step
66:42 - here and this I can't remember which is
66:45 - which whoops let's just return the
66:49 - targets is this right somebody in the
66:50 - chat tell me if I've got these back
66:51 - routes or not let's just return the
66:54 - targets I'm kind of skipping some steps
66:56 - here I'm not now I'm not being as
66:57 - thoughtful about how I'm organizing this
66:59 - but I want to get those targets then I
67:01 - want to say the inputs are are divided
67:04 - by 255 g g / 255 b / 255 and this should
67:11 - say inputs and then i'm going to say
67:13 - brain train inputs with these targets so
67:18 - this is me just running through and kind
67:20 - of quickly using a thousand colors to
67:22 - train it and i'm being told that this is
67:25 - probably backwards there's no way I
67:27 - could have possibly guessed that
67:29 - correctly
67:29 - okay so let's and actually I'm gonna
67:32 - even I'm just gonna let's let it run
67:34 - 10,000 times so I'm gonna run 10,000
67:36 - colors through the network right and set
67:38 - up I was like training data basically
67:42 - okay so now let's just and actually in a
67:47 - way what I'm gonna do now just to see
67:49 - I'm not even gonna click I'm going to
67:52 - not bother to train it anymore I'm just
67:56 - gonna be I'm just gonna pick let me
67:57 - comment out my own interactive training
67:59 - and let me just pick new colors okay so
68:04 - so every time I click yeah you can see
68:07 - it's making guesses are they good
68:09 - guesses I don't know but they I bet you
68:11 - those guesses are pretty accurately
68:13 - aligned with that threshold of 300 so I
68:16 - could continue to train it a little bit
68:18 - but I feel pretty happy now with this
68:22 - color predictor okay what's what's going
68:26 - on I finished this coding challenge I'm
68:28 - gonna release this code
68:30 - what can you do with it so a couple
68:31 - things one is could you make this same
68:34 - exact project but instead of having it
68:37 - just pick whether black or white goes on
68:40 - top could you pick a RGB color that
68:43 - looks nice maybe it's a maybe you could
68:45 - have a neural network solve the formula
68:47 - for complementary colors could you think
68:50 - of a more thoughtful way to design this
68:52 - could you use some other data entirely
68:54 - could you train based on like fun which
68:57 - font to pick could you train a system to
69:00 - make design decisions based on you some
69:04 - set of training data or some user
69:05 - interaction something like that so I
69:07 - hope you make your own neural network
69:09 - design predictor thingy and share it
69:12 - with me you can go to the kodi train
69:14 - comm website there's some instructions
69:16 - there for how to contribute your version
69:19 - of a project like this you can write in
69:20 - the comments you can tweet me at
69:22 - Schiffman I guess I'm supposed to say
69:24 - you should subscribe to the channel blah
69:26 - blah blah thank you for tuning in and
69:28 - there is the color predictor wait hold
69:33 - on stop timeout
69:34 - I'm getting a good suggestion in the
69:36 - chat well it might be nice to see like
69:39 - what the number is so hold on let's this
69:43 - is a good idea let's do this hold on
69:45 - hold on timeout everybody where do I
69:48 - have I have some console.log going on
69:50 - here let me get rid of this console.log
69:51 - and let me in here let's console log R +
69:58 - G + B so let's see if this value is
70:03 - bigger and I'm just going to floor it so
70:05 - it looks I don't need to see the decimal
70:09 - let's see if this let's see if it really
70:11 - learned the threshold of 300 right 319
70:17 - that should be white so it didn't get
70:19 - that right looks 376 ah 442 289 oh wait
70:26 - no no it did get it right I'm done I've
70:28 - got it backwards if it's if it's higher
70:30 - than 300 it should be over black if it's
70:32 - lower than 300 it should be over white
70:34 - and we can see here right 289 white 431
70:40 - black 550 13 black 561 black 520
70:43 - seven right this is working and just to
70:45 - prove this point let me run it again
70:47 - with a different threshold where do I
70:53 - add that in the training let me give it
70:56 - a silly threshold of 100 that's much too
70:58 - low for it to be visually correct
71:00 - probably whatever that means but we can
71:02 - see now it's going to only go to white
71:05 - if it's below 100 oh it didn't actually
71:09 - 97 it didn't even get there now the
71:11 - quite I'm gonna have to do this for
71:12 - quite a while to get lucky enough to
71:14 - pick something lower than 100 what I
71:18 - really doesn't want it how long do I
71:20 - have to can I have like a 1 out of I
71:22 - guess 7 or 8 chance my goodness I'll
71:29 - speed this up again will speed this up
71:31 - keep going edit this out come on give me
71:34 - something oh no no no no no no no
71:38 - and I'm very unlikely to get a number
71:42 - lower than 100 because I'm picking three
71:46 - random numbers between 0 and 255 so I
71:49 - actually have I'd have to pick three
71:52 - random numbers basically lower than 33
71:56 - and which has a pretty low probability
71:58 - of doing that in a row so let's do the
72:00 - opposite thing let's say let's do this
72:02 - only if it's greater than 500 296 white
72:08 - so if I ever get it greater than 500
72:10 - black write 393 is white so it is
72:14 - learning that threshold whatever I kind
72:17 - of whatever I earn I picked 300 and
72:19 - probably what would make sense for me to
72:21 - pick is just you know 256 or 2055 times
72:25 - 3 / yeah - or 55 times 3
72:29 - / - I really should stop this video of
72:33 - two or three minutes ago when I had the
72:35 - chance so we can see now here's my color
72:37 - predictor it's trying to predict which
72:40 - text looks better over the colorbond
72:42 - season now we're finally done oh please
72:44 - PLEASE creative wonderful people of the
72:46 - internet make a more interesting better
72:48 - version of this and I will see you in a
72:50 - future coding challenge good bye thank
72:51 - you again - gibreel for this particular
72:53 - idea subscribe to his channel link in
72:56 - this video's description
73:01 - yes hard-code the colors I could have
73:04 - hard-coded the colors yes yes Oh Tim
73:14 - makes a great suggestion you should use
73:16 - softmax and set the circles exposition
73:19 - based on the output to visualize the
73:21 - confidence if it's more confident and
73:24 - put the circle more to the left and vice
73:26 - versa that is such a good idea
73:28 - some people ease scope to that as their
73:30 - own project all right I think I finished
73:32 - for today's 12:43 oh oh boy do I want to
73:36 - try to do that quadtree thing this is
73:39 - probably gonna be like a 45 minute to an
73:41 - hour coding challenge I would guess but
73:43 - hopefully there's a lot that can be
73:44 - edited out when it gets to that point I
73:51 - was getting some like messages let me
73:54 - see if there's anything super important
73:56 - here okay yeah okay everything seems
74:04 - good I'm just checking my email I'm not
74:08 - checking my email not checking my email
74:10 - I got a super chat thank you for
74:13 - alerting me let me look in my dashboard
74:15 - here that might be an easier way so I
74:17 - can thank the super chat Oh uncreated
74:22 - name thank you for your super chat
74:24 - message and your donation it is much
74:26 - appreciated
74:27 - thank you if you want to support the
74:31 - work that I'm doing you can subscribe
74:33 - also to the patreon and join our little
74:37 - slack community which is a fun place to
74:38 - discuss and ask questions and that sort
74:40 - of thing I should work on the p5 pull
74:43 - request I could do that I kind of feel
74:47 - like I could do the Quadra I mean I
74:48 - don't have mmm 45 let me take a look at
74:53 - the quadtree thing for a second let's
75:01 - let's just just hol hold your horses
75:04 - let's be ambitious here for a second I
75:07 - really should get myself more time to do
75:09 - other things I need to do today is this
75:17 - this is just the example so hold on
75:23 - quadtree let me grab this repo real
75:27 - quick oh oh right quadtree why I think I
75:51 - should do this I don't know I just kind
75:58 - of wanted that to be done do I still
76:01 - need to fix the quadtree bug what was
76:04 - the quadtree bug I mean I was just gonna
76:06 - go and use the the quadtree code that's
76:10 - already in the new quadtree repo which
76:12 - probably has that bug fixed but I should
76:14 - oh it's the return the I'm not returning
76:18 - the right array yeah
76:20 - hundred people left that's fine but
76:22 - people should do this oh but I that's
76:37 - not a real place oh that's not it's
76:40 - gonna say that's not a real bug it is a
76:42 - real bug but it's not a bug that I feel
76:44 - that I need to fix it is so let me go to
76:46 - this I mean now I'm sort of Oh number 98
76:53 - where did all the issues go oh that's on
76:56 - coding terrain website so let's discuss
77:00 - this for a second
77:02 - [Music]
77:04 - yeah so this I don't this is this is a
77:09 - great whoa so this is a really great
77:12 - point and maybe I should open
77:14 - the video with this but and let me let
77:19 - me try to explain this so the quadtree
77:21 - that I made does not continuously pass
77:25 - and I apologize if you're tuning in this
77:27 - livestream you didn't watch the quadtree
77:29 - live stream or the quadtree videos you
77:31 - probably have no idea what I'm talking
77:32 - about so I apologize for that but I
77:34 - suggest you go back and watch those if
77:36 - you're interested but the quadtree is a
77:38 - data structure that stores points in in
77:45 - my case in two-dimensional space into
77:48 - the leaves of this tree it's constantly
77:50 - subdividing sections of the canvas
77:53 - intercept into fours and then if there's
77:56 - too many points there it's subdivides
77:58 - again into fours if there's too many
77:59 - points there it's subdivide beginning
78:00 - for us and it has a capacity variable
78:02 - like 4 I actually use mean that's a
78:04 - coincident could've made it 5 could have
78:05 - made it 3 quadtree is dividing into 4
78:07 - but I also have to use that capacity for
78:09 - each leaf as having 4 so this looks like
78:12 - this should be a mistake right how this
78:14 - is a leaf
78:15 - how could there possibly be more than 4
78:17 - even if we kind of are generous and say
78:20 - that these are in these are just drawn
78:21 - in a weird way and they're actually in
78:22 - the other ones there's still 1 2 3 4 5 6
78:26 - and the reason that this is the case is
78:28 - that a bunch of these are likely
78:31 - actually in this node this larger space
78:35 - because when I subdivide a node into 4 I
78:38 - don't take the points that are in that
78:40 - parent node and pass them down I could
78:43 - do that and there's a case to be made
78:46 - for that being you know more correct or
78:48 - more efficient but in terms of like
78:50 - writing the code in a simple way it's
78:52 - much easier to just not bother with that
78:54 - and I get enough of a speed improvement
78:58 - without doing that that I don't need to
79:02 - I didn't bother I'm not doing this to
79:04 - try to make this perfect visualization
79:06 - I'm just trying to do this to make
79:07 - looking at the I'm just doing this to
79:12 - really the chat the same time which I
79:14 - should never do I'm done
79:16 - I'm doing this to you why am I doing
79:19 - this I'm doing this to try to make a
79:21 - collision detection example faster and I
79:23 - can show you that even with this
79:24 - quote-unquote bug if I go to my
79:28 - tree repo and I go here I've actually
79:33 - made this example already just to test
79:36 - if it would even work I'm gonna go to
79:37 - demo so this is now a p5 sketch which
79:42 - has 1000 dots in it and every dot is
79:46 - checking if it's intersecting another
79:48 - dot and if it is it lights up and it's
79:50 - using the quad tree data structure right
79:52 - now let me just uncheck this check mark
79:53 - and you can see right now without the
79:56 - quad tree data structure I'm getting a
79:58 - frame rate of 5 with the quad tree data
80:00 - structure I'm getting it let's just
80:02 - let's just move down and see if we can
80:03 - oh I think it might be you can see like
80:06 - even with like 2500 I'm getting a pretty
80:10 - decent frame rate if I take off the quad
80:12 - tree you know forget it the frame rate
80:15 - is basically like 1 frame per second
80:17 - even at best so so I feel that my code
80:21 - does the job does it do it the best way
80:24 - the most optimally way it was optimally
80:26 - optimal way I'm not entirely sure okay
80:32 - so hopefully that explained it oh there
80:34 - are flocking examples in the poll
80:35 - requests
80:39 - what's empiricist Academy what is your
80:42 - idea I missed it I'm really not
80:43 - following the chat I should say like
80:45 - look over here every once awhile so the
80:46 - question now is with my ten minutes can
80:50 - I create this demonstration and I think
80:52 - that I can I did have some other real
80:57 - bugs and I'm sorry I don't mean to say
81:00 - that I I don't I don't if I'm not
81:04 - thoughtfully I I I'm worried that I'm
81:08 - not being sort of kind in my reply to
81:09 - this bug report cuz that is an excellent
81:11 - github issue to post and merits a lot of
81:13 - discussion and I don't even know if I'm
81:15 - am right about this so that is an
81:17 - appropriate bug report whether I but in
81:20 - my point of view I'm wondering if that's
81:21 - a bug or sort of more of a question of
81:23 - how I want to design the algorithm and
81:25 - in fact if you go to the quadtree
81:27 - Wikipedia page and you look at the
81:31 - pseudocode for the quadtree down here
81:35 - you will find that the insert function
81:41 - not redistribute the points so this
81:43 - example Wikipedia version pseudocode
81:46 - version of the quadtree algorithm does
81:48 - not redistribute points at the
81:50 - subdivision points so that's kind of
81:52 - that's kind of my point of view about
81:53 - that all right so let's see this is bad
82:01 - idea a terrible idea terrible idea but
82:04 - we're gonna do it anyway so what I'm
82:06 - gonna do is I'm gonna go into examples
82:10 - I'm gonna rebuild this intersection
82:13 - quadtree no copy of it I'm going to just
82:27 - delete that this is so I just literally
82:34 - copied a folder deleted it and then
82:36 - repainted but I wanted to save a backup
82:39 - of it but there's really no point in me
82:40 - doing that so silly what I just did I
82:44 - remember what I was gonna then what I
82:46 - was doing is I don't have time to do
82:48 - this I meant to do this take this put
82:55 - this on the desktop then go grab this
82:58 - quadtree j/s put that in here then go
83:02 - and open this on the desktop go into
83:10 - sketch and go into index.html and do
83:20 - that then I'm going to terminal know
83:32 - and then I'm going to say oh then I'm in
83:37 - a server that's there but what I'm gonna
83:47 - do now
83:48 - I think what I'll do is I'm gonna leave
83:50 - this particle code I'm gonna leave this
83:55 - simple particle code I'm gonna take this
83:57 - out I'm gonna take the highlight thing I
83:58 - don't add that and leave that and then
84:09 - I'm gonna get rid of everything here
84:18 - well there's a lot of code I'm gonna
84:20 - have to write apparently Oh cuz I know I
84:23 - don't need to show the quadtree stuff
84:24 - okay that's great okay
84:30 - okay so I think I'm ready for this this
84:33 - could be I think six minutes left and I
84:36 - gave myself till one o'clock I'm gonna
84:38 - get myself till 1:15 and if this is not
84:41 - done at 1:15 I really can't do this now
84:50 - I'm gonna I'm gonna try against my
84:53 - better judgment I'm gonna try what I'm
85:04 - gonna do here
85:17 - okay
85:19 - okay hello and welcome to part 3 of my
85:25 - quadtree coding challenge and in this
85:27 - coding challenge what I want to do is I
85:28 - want to see can this work will this work
85:31 - I have this very very very slow sketch
85:35 - that has 1000 particles each particle is
85:39 - checking every other particle where it
85:41 - is in the window and if it is
85:44 - overlapping or intersecting one of them
85:46 - it's highlighting itself white and if
85:49 - it's not it's keeping its color to gray
85:51 - and you'll notice this is running at
85:52 - about 5 frames per second can I use a
85:55 - quadtree to reduce the number of cycles
85:58 - computational cycles I need to do to
86:01 - check every particles location against
86:03 - every other particles location and get
86:05 - this running at 30 frames per second
86:09 - let's let's go ok so I'm actually gonna
86:13 - refresh this and when there's nothing
86:14 - there now because I actually do I had
86:17 - all that code I deleted it I'm gonna
86:19 - write it now so what I do have already
86:21 - is a particle class so I have a very
86:24 - simple particle it just has an X a Y and
86:25 - a size and it's drawn as a circle so
86:28 - let's do this let's say I'm thinking
86:33 - about this I'm thinking about this let's
86:34 - make an array of particles and I'm gonna
86:37 - say 4 let I equals 0 eyes less than 1
86:39 - let's just start with 100 because I
86:42 - don't want to deal with it running slow
86:43 - until it's time to really implement the
86:44 - quadtree
86:45 - and I'm gonna say particles index I is a
86:47 - new particle and I'm gonna give the
86:49 - particle a random location on the window
86:52 - then I'm gonna say 4 let P of particles
86:57 - and I think it's like P dot update
87:00 - probably and P dot I don't know what it
87:03 - is let's look move and render alright
87:05 - who knows what I called these things
87:06 - move and render and I must say
87:10 - background 0 ok so now we can see there
87:15 - we go no problem
87:16 - look at all my beautiful particles I'm
87:18 - moving around and so we can see by the
87:21 - way just even with like a thousand of
87:23 - them drawing a thousand particles is no
87:25 - problem p5 canvas I could draw a
87:28 - thousand circles any old day of the week
87:30 - 30 frames per second whatever nice frame
87:32 - rates
87:33 - but now what if I were to say four and I
87:37 - think I could say let I'm gonna do this
87:38 - again this is I'm gonna separate this
87:40 - out into a separate loop let P of
87:42 - particles for let other of of particles
87:47 - and I want to now check if P intersects
87:52 - other then I want to highlight this
87:56 - particle P dot highlight so this is the
88:01 - idea right I want to check I want to do
88:04 - a nested loop for and also I should I
88:06 - got to make sure as long as P is not
88:08 - equal to other so as long piece
88:11 - shouldn't check itself again there are
88:12 - plenty of ways to optimize this nested
88:14 - loop like I don't if P is checking other
88:16 - I don't need other to check P but that's
88:18 - not the point here I'm going to let this
88:20 - be as inefficient as possible is right
88:22 - now
88:22 - do I have an intersect function do I
88:24 - have a highlight function I don't think
88:25 - so
88:26 - it would have been nice if I kept those
88:28 - so let's write an intersex function
88:31 - intersects other so what do I need to do
88:36 - I need to know the distance between this
88:38 - X this dot Y and other dot X other dot Y
88:42 - and then I'm going to return distance is
88:45 - less than so they're intersecting if the
88:48 - distance is less than this dot R plus
88:51 - other dot R right so this is going to
88:53 - tell me then I'm gonna just do I'm gonna
88:56 - make a variable called highlight and set
89:00 - that equal to false I'm going to in
89:03 - render if highlight fill white otherwise
89:10 - fill just this sort of grayish color and
89:12 - it should be this dot highlight and then
89:17 - reset highlight and I'm gonna say this
89:23 - highlight equals and then value so I'm
89:26 - gonna write a function that's like set
89:28 - highlight that's going to turn
89:30 - highlighting on or off I could do a
89:32 - better job of this but this will work
89:34 - right because basically what I want to
89:36 - do is first I want to just set the
89:39 - highlight false for all the particles
89:43 - right they're all not highlighted then
89:46 - what I'm doing the
89:47 - if it actually is intersecting I can set
89:52 - the highlight to true so now let's go
89:54 - back to just 100 particles and we can
89:58 - see perfect when there okay
90:00 - now the distance oh you know what I'm
90:03 - not drawing them I'm drawing them with
90:06 - the radius as the diameter so they're
90:08 - actually half the size so I should fix
90:11 - that in my render function I'm not being
90:13 - consistent this should really be radius
90:15 - times two if I'm using R as a radius for
90:17 - the math so now we can see right when
90:21 - they are overlapping they're highlighted
90:23 - white when they're not overlapping
90:24 - they're not okay so this is working fine
90:27 - I can actually let me look here in the
90:32 - oh there's like oh I got a deal with
90:35 - that for a second hold on I have a
90:39 - little extra bit of code in there by
90:40 - accident I can look at the framerate
90:42 - no problem 27 frames per second let me
90:45 - just ignore what I'm doing for a second
90:47 - in my quadtree code I was adding some
90:49 - unit tests and stuff and I'm gonna just
90:52 - get rid of that okay so we can see here
90:54 - look at the frame rate 26 frames per
90:56 - second now let's see that if I go back
91:00 - to my sketch and I add a thousand
91:03 - particles let's look at the frame rate
91:06 - now five frames per second also now that
91:09 - I have so many I'd probably want it to
91:12 - be them not to be as big because so
91:17 - let's actually make them half the size
91:18 - and now frame rate is still 5 frames per
91:21 - second okay we're here for the quadtree
91:24 - right let's add the quadtree so the
91:26 - thing is what do I need to do right here
91:30 - this is what I need to replace I'm
91:32 - saying I'm still want to go through
91:34 - every particle but now instead of
91:36 - looking at every every every every
91:38 - particle I want to just query I'm gonna
91:40 - say let others equal oh wait I have to
91:44 - create a quadtree
91:45 - so I'm going to first I need a quadtree
91:47 - variable quadtree then I'm gonna say
91:51 - quadtree is a new quadtree I have I did
91:55 - that color coded John so long ago I
91:57 - forgotten what I need I think I need a
91:58 - boundary so I'm gonna say
92:01 - boundary is a new rectangle like my
92:04 - quadtree example has some geometry
92:07 - classes like a rectangle and the
92:09 - rectangle I'm going to make it 300 comma
92:11 - 200 that's the center and it's 600 comma
92:13 - 400 so I probably should use width / 2
92:16 - height divided by 2 with light but it's
92:18 - fine I'm just gonna leave that so I'm
92:20 - gonna make a new quadtree with that
92:21 - boundary then what I'm going to do and I
92:26 - think this got added after so what are
92:30 - the things that actually this is a bit I
92:31 - can't leave I'm not even at I forgot
92:32 - about this but these things are moving
92:34 - so if I build the quadtree with all of
92:37 - those particles as soon as they move how
92:40 - like I'm missing so many pieces here
92:42 - there's more to this video than I
92:43 - thought all right hold on here we go
92:46 - this is gonna be good
92:47 - I knew I knew there was something going
92:48 - on here okay so what do I what does what
92:51 - does this quadtree expect the quadtree
92:54 - if I look at it it expects me to insert
92:57 - a point a point is a particular object
93:01 - with an x and a y oh look I already
93:03 - added this oh so this is so if you
93:05 - follow the last tutorial this won't be
93:07 - there let's take this out so here's the
93:09 - idea let's watch watch and learn okay
93:12 - here we go
93:12 - this is where I left off in the last
93:14 - tutorial I forgot about this now I'm
93:16 - gonna go back to my code save this and
93:19 - I'm gonna say okay what I want to do is
93:21 - I want to build this quadtree so what
93:24 - I'm gonna do is I'm gonna say quad tree
93:26 - I'm gonna say let a point be a new point
93:30 - at particles index I dot X and particles
93:34 - in X I dot Y and I'm going to say
93:36 - quadtree dot insert that point right
93:39 - this is where I last left off I'm
93:41 - creating a point object and putting the
93:43 - point object in the quadtree the
93:45 - quadtrees going to organize itself to
93:46 - keep points together that need to be
93:48 - together but here's the thing I've now
93:51 - made this new point object I want to put
93:52 - the particle in the quadtree
93:54 - so really I want my quad tree to store
93:56 - the particles and then the particles are
93:58 - moving some kind of like update their
94:00 - location in the qua tree how am I gonna
94:01 - deal with this well there are a variety
94:03 - of solutions to this number one I wrote
94:05 - the quad tree code so I could just
94:07 - rewrite it to work with my particle
94:09 - object and set the point object but
94:11 - something I could do to make it more
94:13 - generic
94:14 - is I could add this is a this box2d
94:16 - works this way and some physics
94:18 - libraries do I could add a property to
94:20 - the point object called user data and
94:24 - what that means is when I create a point
94:30 - object the core McDade ahthe at i need
94:32 - for the quadtree is its XY location but
94:35 - I could also say attach yourself to this
94:37 - other object so that when I find this XY
94:39 - location I can know that it's attached
94:41 - to this particular particle so in other
94:43 - words what I can do now is I can say
94:45 - make a new point with this particles X&Y
94:49 - referencing also this particle again
94:52 - there's some redundancy here but this
94:53 - will work well enough it's also very
94:55 - generic so if somebody else is using
94:57 - this quad tree as a library they could
94:59 - kind of use it with whatever classes
95:00 - they've they've they've created so but
95:03 - here's the thing this created that quad
95:05 - tree but as soon as I call all the
95:07 - points move they're going to be in a
95:08 - different location they're not where
95:09 - they originally were so actually I don't
95:11 - want to do this here what I want to do
95:14 - is do this here in draw and I this the
95:18 - nice thing about this is I have the
95:19 - particle and a variable called P so I
95:22 - want to create a new point whoops what
95:26 - is going on here give me back my coche
95:30 - okay I want to do a new I want to create
95:33 - a new point add an x and y with a P and
95:35 - I want to insert it into the quadri but
95:37 - draws looping over and over again so
95:40 - when I insert the first time the next
95:41 - time I don't want to reinsert it I just
95:43 - want to update this location well the
95:44 - truth of the matter is while that would
95:47 - be a nice way of doing it updating the
95:50 - locations and probably most efficient it
95:52 - actually is a little bit simpler if I
95:54 - just remake the quadtree every frame the
95:57 - quad tree is the thing that I'm just
95:59 - going to recreate every frame for the
96:01 - purpose of optimizing the collision
96:03 - detection so again I could be more
96:05 - thoughtful about this and have a global
96:07 - quad tree I think there's even maybe a
96:09 - clear function by now in that quad tree
96:11 - class that I wrote but I'm just gonna
96:12 - remake the quad tree object every frame
96:15 - build it from scratch
96:25 - build it from scratch every time through
96:28 - draw okay so now I've inserted all of
96:32 - the points the quadric let's just run
96:34 - this to make sure it's like still
96:35 - working oh syntax error sketch ah yes
96:38 - line 29 oh I forgot that I was doing
96:42 - something down here
96:43 - okay another error quadtree 9 your
96:46 - capacity should be a number but is
96:47 - undefined ah I forgot about the capacity
96:50 - so the quadtree each node of the
96:52 - quadtree has a limit to how many
96:54 - particles can go in it let's just use
96:55 - for that's what I've been using we might
96:57 - get better better or worse results
96:59 - depending on that number
97:02 - so let's and let's let me give myself
97:07 - some more space here with all this okay
97:11 - so we can see that this is working but
97:12 - running slow so while I've got the Quan
97:16 - building the quadtree I have it lost
97:17 - even though there's computation involved
97:19 - in building the quadrat for rebuild at
97:21 - every frame there's so much less
97:23 - involved in doing that then checking all
97:25 - the locations and now here's the thing
97:28 - that I want to do let me just shut this
97:30 - off so that I don't like kill my
97:32 - computer what I want to do now is here I
97:35 - started here instead of looking at every
97:38 - other particle in the whole particles
97:42 - ArrayList I want to query I want to say
97:44 - I'm gonna say let others equals QT e dot
97:48 - query now what do I want to quit I think
97:51 - query is the name of the function query
97:55 - query class query query query query
97:58 - query quick query range and found but
98:02 - and also worried about found found a
98:04 - member when I wrote that found as the
98:05 - array that's being recursively added to
98:07 - but I want to query a range and the
98:11 - range could be and Moraine could be a
98:15 - rectangular range or a circular range
98:18 - and actually I have this this has been
98:20 - added since the last tutorial but this
98:22 - geometry object for a circle I'm going
98:24 - to use a circular range why I have to
98:28 - erase the whiteboard shoot
98:32 - I think that color predictor thing was
98:35 - done so as long as I just erased this
98:38 - really quickly I can finish this by 1/15
98:51 - have this video out next week sometime
98:53 - okay if I have a particle and has a
99:02 - given R and my other particle has a
99:06 - given R I only need to look at particles
99:09 - within what a range that is are I drew
99:14 - this kind of bigger R times 2 right
99:17 - because a particles are intersecting
99:19 - only if they are within our times 2 of
99:23 - this particle now if the particle were
99:24 - different sizes
99:25 - we'd have a more complicated problem and
99:28 - I encourage you to implement that as
99:30 - your own exercise but because my
99:31 - partners are the same sizes I've got a
99:33 - pretty easy easy scenario here so what I
99:36 - can do is I can in sketch I can say quit
99:40 - okay so first make a circle there's a
99:43 - new circle object where it should be at
99:45 - P X P Y and it's size is PR times two
99:51 - this is the range I want to check for
99:54 - any other particles within the range the
99:57 - distance of this particles radius times
99:59 - two I want to query that circle and
100:02 - let's call this range I want to query
100:05 - this range then others is now a smaller
100:08 - amount this is all I just needed an
100:10 - other of others so I'm no longer
100:12 - checking the full particles list I'm
100:14 - querying the crotch quadri for a smaller
100:16 - subset of particles for me to check
100:19 - intersection and now I think we might be
100:21 - done I don't know I don't know I don't
100:23 - know they look at this this was remember
100:25 - this let's let this run again this is it
100:29 - running before really slow five frames
100:33 - per second I'm gonna hit refresh
100:36 - I hope I don't have any errors okay oh
100:42 - that looks good it's running fast but
100:46 - it's not highlighting so what happened
100:50 - there
100:51 - P does not equal other and P intersects
100:53 - other Y okay hold on I have a bad
100:57 - feeling that oh the particle thank you I
101:04 - forgot so that's the thing ah right
101:07 - right right right right so this is the
101:09 - whole thing these are points I called
101:12 - them others well let's call them points
101:13 - I'm getting the points for every other
101:18 - of points for every point of points
101:23 - other equals point dot user data I need
101:28 - to actually look at the that object
101:31 - right the remember the particle which is
101:33 - the thing that works with intersects
101:35 - that set highlight and all of that is is
101:38 - this this Quadra is giving me an array
101:40 - of points and as I look at each point I
101:42 - need to pull out the user data okay I
101:44 - can't I can't bring myself to use that
101:46 - drummer there we go so now whoops
101:50 - framerate look at that
101:53 - 48 frames per second it was 5 frames per
101:56 - second now it's 48 frames per second
101:57 - whoo-hoo so you know there's issues with
101:59 - this well I've really set myself up for
102:01 - success here these particles have a
102:03 - really nice even uniform distribution
102:06 - across the entire canvas they're all the
102:09 - same size there's only a thousand of
102:11 - them I'm not actually like having them
102:13 - bounce off of each other or any kind of
102:14 - complex collision resolution but this is
102:17 - the basic idea which you can see is that
102:19 - with a quadtree
102:20 - right if I just quickly like all I have
102:23 - to do now to to switch them on and off
102:27 - right is to say let me comment this out
102:31 - and if I say for other let other of
102:36 - particles
102:40 - this is so now no quadtree right I'm
102:45 - just looking at every other particle
102:49 - super slow super slow frame rate of
102:52 - about five and now switch to using the
102:55 - quadtree super fast so goodbye everyone
103:03 - thanks for watching this tutorial I
103:04 - encourage you to try to make a version
103:05 - of this where the particles on a
103:07 - somebody already has done this a pull
103:09 - request on my quadtree repo but making
103:12 - it a version of this with the flocking
103:13 - simulation can't you know how is that
103:15 - going to work what if you have you know
103:18 - what if the particles aren't so evenly
103:20 - distributed how could you do it with
103:21 - different sizes Oh could you visualize
103:23 - the quadtree so draw the quadtree
103:25 - dynamically as it's like changing and
103:27 - updating that might be a beautiful thing
103:28 - to create make your own quadtree
103:30 - visualizations I hope you do all those
103:31 - things share them with me and I will see
103:34 - you in a future got any challenge
103:37 - something or other video goodbye
103:38 - subscribe like I don't know that kind of
103:41 - stuff goodbye oh yeah I could have done
103:48 - map okay okay map I could have done map
103:51 - all right grant asks is there a forum or
103:57 - group where people discuss p5.js yes
104:01 - forum dot processing work isn't there a
104:06 - way to share the code real-time
104:08 - typically what i do is try to upload
104:09 - this stuff to github right afterwards
104:11 - this code is already on github because
104:12 - it's part of the quadtree repo and is it
104:16 - possible to use quadtrees with k-means
104:18 - clustering probably that would be an
104:19 - interesting thing anyway I really got a
104:21 - run because I'm gonna be back in an hour
104:24 - in 15 minutes it won't it'll be it's if
104:28 - I go to coding train well is it here
104:33 - where do I find it there's an event let
104:37 - me just go to twitter twitter no peek at
104:41 - oop cat here is the link
104:49 - live in 74
104:52 - minutes there will be a guest tutorial
104:55 - here about hardware and JavaScript so
104:58 - I'm going to run I'm gonna grab
104:59 - something to eat I will be back in an
105:02 - hour or so will be a new new cat and I
105:04 - will be here for a couple hours doing
105:06 - her desk tutorial and that will then be
105:08 - the end edited versions of all these
105:10 - challenges and stuff will come out next
105:11 - week yeah alright so thanks everybody
105:16 - for watching and I will see you I'll see
105:20 - you it if you're gonna tune in I'll see
105:21 - you in like an hour
105:22 - okay goodbye