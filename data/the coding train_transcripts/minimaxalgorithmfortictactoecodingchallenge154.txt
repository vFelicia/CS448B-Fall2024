00:00 - oh hello and welcome to a Cody challenge
00:02 - tic-tac-toe Oh with the minimax
00:06 - algorithm that's why I'm here because I
00:08 - made this other coding challenge
00:09 - tic-tac-toe where I created a kind of a
00:11 - big it was kind of a mess if I'm being
00:13 - perfectly honest but I made a working
00:14 - version of the tic-tac-toe game that
00:16 - just played with two players picking
00:18 - random spots so since then and you can
00:21 - check one of my live streams if you want
00:22 - to find where I did this I made some
00:24 - adjustments to it so that I could as a
00:26 - human being play the game so right now
00:28 - I'm going to play the random computer
00:30 - picker I'm gonna I'm gonna go here and
00:32 - then I'm gonna block X and I'm gonna go
00:34 - here I win Owens so what I have the
00:38 - adjustment that I made is that I added a
00:41 - mouse pressed function where I find
00:44 - where did I click and I put my human
00:48 - variable which is the letter O onto the
00:51 - board and then I called next turn where
00:53 - next turn picks a random spot in the
00:56 - board and makes that the AI spot or X's
00:59 - spot so the whole point of this video is
01:02 - for me to implement something called
01:04 - minimax
01:05 - which is an algorithm a search algorithm
01:08 - if you will to find the optimal next
01:11 - move for the a I mean it could find it
01:13 - for myself and then I could implement it
01:14 - but the idea is I want this player the
01:17 - computer player to beat me at the game
01:19 - or at least tie to play a perfect game
01:21 - and if you want to learn more about the
01:22 - minimax algorithm I would suggest to
01:24 - resources that you can look at that I
01:26 - actually looked at before beginning this
01:27 - coding challenge haven't programmed this
01:29 - before but I watched this video by
01:31 - Sebastian leg
01:32 - that explains the minimax algorithm also
01:34 - something called alpha beta pruning
01:35 - which I'm not going to implement but
01:37 - could be a good exercise next step for
01:39 - you and I also found this article on the
01:41 - geeks for geeks org website which has a
01:44 - three part series about the minimax
01:46 - algorithm and how to apply it to
01:48 - tic-tac-toe so those resources are
01:50 - probably your best bet for learning
01:51 - about the theory of the minimax
01:53 - algorithm and how it can be applied to a
01:55 - wide variety of scenarios but I'm going
01:58 - to look at the specifics of tic-tac-toe
02:00 - which is a great starting example
02:02 - because it's a simple enough game that I
02:04 - could actually diagram out all of the
02:06 - possibilities which even if that's
02:08 - computationally possible is very hard to
02:10 - diagram and there's lots of scenarios
02:11 - where
02:12 - couldn't even compute all the possible
02:14 - outcomes and chess is an example of that
02:16 - so minimax is typically visualized as a
02:19 - tree so the root of the tree is the
02:21 - current state of the game board so I've
02:27 - drawn a configuration here of the
02:29 - tic-tac-toe board midway through the
02:30 - game because I don't want to start at
02:32 - the beginning where there's so many
02:33 - possibilities that I couldn't diagram it
02:35 - so right now it's X's turn and X has
02:38 - three possible moves so I could express
02:41 - that in a tree diagram as move one move
02:45 - two and move three so let's take a look
02:48 - at what I mean by that I'm going to use
02:51 - a blue marker so you can see the new
02:53 - moves so let's say one possible move is
02:55 - X going here let me diagram out the next
02:58 - two possible moves another possible move
03:03 - is X going here and another possible
03:08 - move move is X going here so we need to
03:11 - look at eight each of these and
03:12 - determine is the game over or is it
03:15 - continuing so only in this case is the
03:18 - game over and in this case the game is
03:20 - over and X has won so I'm gonna mark
03:24 - this green for the state of X having won
03:27 - the game
03:28 - now it's o's turn and for each of these
03:30 - spots o could make has two possible
03:33 - options
03:36 - Oh could go here ro could go here Oh
03:43 - could go here
03:45 - RR Oh could go here and look at these in
03:48 - this case and this case Oh has one
03:51 - remember we're trying to solve for the
03:54 - optimal move for X X is making the first
03:56 - turn so this means I can mark these were
03:59 - Owens as red I was like those are bad
04:03 - outcomes so while these are not terminal
04:06 - states there's only one move possible
04:08 - for X so I could draw an arrow and put
04:09 - that down here but ultimately I can just
04:11 - consider this as x has to go here so
04:14 - these you could consider as terminal and
04:16 - in which case X will win now you see
04:20 - that I visualized all the possible
04:22 - outcomes of the tic-tac-toe game based
04:25 - on this starting configuration so how
04:28 - does X pick which path to go down where
04:31 - we can see here that the goal is for X
04:34 - to win the game to get to here here or
04:36 - there how does it do that and the way
04:38 - that it does by the way spoiler alert
04:41 - this is the move it should pick it
04:42 - should just win instantly but the idea
04:45 - of the minimax algorithm is if we can
04:48 - score every possible outcome those
04:51 - scores can ripple back up the tree and
04:53 - help X decide which way to go to find
04:57 - the highest possible score then they
04:59 - think about tic-tac-toe is there's not a
05:01 - range of scores the end points are
05:05 - either you won you lost are you tied I
05:07 - can say if X wins it's a score of +1 if
05:11 - a wins it's a score of negative 1 and if
05:15 - it's a tie it's a score of 0 so in other
05:18 - words we can give this a score of plus 1
05:21 - this is score of plus 1 this is score of
05:24 - negative 1
05:25 - this is score of negative 1 and this a
05:28 - score of plus 1 but we've got an issue
05:31 - I'm trying to pick between this option
05:33 - this option in this option these two
05:35 - don't have a score how do I pick their
05:37 - score well I can pick their score based
05:40 - on which one of these would be picked
05:42 - but who's picking these this is why the
05:46 - algorithm is called me
05:48 - max because we have two players each
05:55 - trying to make an optimal score X is
05:59 - what's known as the maximizing player so
06:02 - to go from here to here it's X's turn
06:04 - and X is maximizing but here it's now
06:10 - O's turns o wants to win X can assume
06:15 - that o is going to play their optimal
06:18 - smooth now you could have a situation
06:21 - where your player doesn't play optimally
06:24 - and that's something you might have to
06:24 - consider in terms of game theory but in
06:27 - this case of the algorithm we can assume
06:29 - that o is going to make the best
06:30 - possible move I mean if it makes a worse
06:32 - move that's only better for us anyway so
06:34 - it's all gonna work out so o is what's
06:36 - referred to as the minimizing player the
06:40 - minimizing player so o has the option of
06:43 - picking negative 1 or plus 1 negative 1
06:46 - or +1 which one is o going to picks pick
06:49 - as the minimizing player the option to
06:52 - win so we can then take the best outcome
06:55 - for O the minimizing outcome for O and
06:58 - pass that back up here's the score and
07:00 - the same thing here now X is the
07:04 - maximizing player which one of these is
07:06 - gonna pick negative 1 plus 1 or negative
07:08 - 1 these are negative 1 because even
07:10 - though it could win here if X goes this
07:14 - way o is gonna win if X goes this way oh
07:16 - it's gonna win if a plays optimally so
07:18 - this is the way to go this scenario that
07:21 - I picked might not be the best
07:23 - demonstration of the idea in fact
07:25 - there's no ties here there's only two
07:27 - turns being played so you may be what
07:30 - you might want to do is pause this video
07:31 - and do the same exact diagram but have X
07:35 - and O with two starting positions and
07:37 - see if you can diagram that whole thing
07:39 - out yourself so how do we implement this
07:42 - in code so that your first clue should
07:44 - be the fact that this is a tree diagram
07:46 - and each time you see a tree diagram
07:48 - typically speaking a recursive algorithm
07:51 - a function that calls itself is
07:53 - something that will apply in this case
07:56 - is no different I want to call minimax
07:58 - on this board position
08:02 - try and then loop through all the
08:04 - possible moves and call minimax on each
08:06 - one of these board positions loop
08:08 - through all the possible moves if I ever
08:10 - get to an end point return the score and
08:13 - have that score backtrack up or ripple
08:16 - back up the chain so let's see if we can
08:18 - write the code to do this so this here
08:21 - is the place where I want to write the
08:22 - new code currently a move is chosen by
08:26 - picking a random available spot and I no
08:28 - longer want to do that so I'm gonna I'm
08:30 - actually gonna change the name of this
08:32 - function to best move and I don't need
08:34 - to worry about this what's available
08:36 - I just want to actually look at all the
08:39 - possible spots so basically I just want
08:42 - to know is the spot available if the
08:47 - spot is available I want to try going
08:49 - there so I'm going to say board i j is
08:52 - the AI player and then i want to call
08:55 - minimax on the board why do I want to
08:57 - call minimax because I want to get what
08:59 - is the score
09:00 - I want minimax with to return to me the
09:03 - score for this particular move now it's
09:07 - gonna have to recursively check these
09:09 - two spots but we'll get that we're
09:10 - getting there ultimately though I need
09:12 - to figure out which one was the best so
09:14 - I need to keep track by saying like the
09:17 - best score is negative infinity if score
09:22 - is greater than the best score then
09:29 - that's the new best score and the best
09:32 - move is this particular IJ and let me
09:36 - declare best move so again I haven't
09:44 - implemented minimax yet I'm just getting
09:46 - the basic idea down for the very
09:49 - furthest turn I need to start by looking
09:52 - at all the possible moves get the score
09:55 - for those by calling this mysterious
09:56 - minimax function and I'm about to write
09:58 - and find the best one then apply that
10:00 - move there's a big issue here though
10:02 - because I am changing the global
10:04 - variable board
10:05 - I am altering the game I am moving X to
10:08 - that spot and then moving X to the next
10:09 - spot so I could make a copy of the board
10:11 - but I think an easy way to deal with
10:13 - this would actually just be to undo it
10:15 - so right afterwards I'm gonna just
10:17 - quickly undo that move the next step
10:20 - would be to write the minimax function
10:21 - that rule II write the algorithm itself
10:23 - I kind of want to know to see if there's
10:25 - any errors here so actually what I'm
10:26 - gonna do is I'm just gonna put a
10:27 - placeholder function in minimax which
10:30 - receives a board and then I'm just gonna
10:31 - return the score of 1 so minimax is
10:34 - always going to return the score of 1
10:35 - meaning it's not gonna be able to pick
10:38 - it's just gonna they're all gonna be a
10:39 - tie so it's good always gonna pick the
10:41 - first one but let's let's see how that
10:43 - goes next turn is not defined because I
10:47 - called it best move and it's in one more
10:51 - place here in setup okay where it went
10:56 - there watch it's gonna go to the next
10:58 - available spot to the next available
11:01 - spot to the next available spot so you
11:04 - can see this is working it's working the
11:07 - sense that the algorithm is making a
11:08 - choice but no matter what it's always
11:11 - just going to go in order of the board
11:13 - and Oh X 1 there's also a big issue here
11:17 - which thankfully didn't no major
11:19 - problems happen but I named this
11:21 - function best move and then it created a
11:23 - variable inside of the function with the
11:24 - same name which you know you're always
11:26 - run into trouble so let me actually just
11:27 - change this to move sort of by
11:29 - definition it is the best move make sure
11:35 - this still works
11:36 - all right X is just picking straight
11:38 - down now the hard part I need to write
11:41 - the minimax function itself so one thing
11:44 - that I skip skipped here which is
11:45 - typical of a minimax algorithm is I
11:47 - would also keep track of the depth
11:49 - because ultimately I could want to
11:52 - consider like how long is it taking me
11:54 - to get somewhere what is the depth of
11:57 - the tree that I'm on so that's something
11:58 - that you'll you'll see often within the
12:01 - algorithm implementation so let me add
12:02 - that so I add an argument depth here and
12:08 - then give it a zero at first oh you know
12:10 - what I need another really important
12:12 - argument this is a turn-based game and
12:16 - the algorithm is going to behave
12:18 - differently whether it is the maximizing
12:20 - player's turn X or the minimizing
12:23 - player's turn o in this case again you
12:25 - could have more than two players or
12:27 - there could be a lot of we
12:29 - stuff going on but that's ultimately
12:31 - what I need here so let me also add is
12:36 - maximizing is maximizing and the this
12:40 - here would be true right so I want to
12:44 - perform minimax on this board with the
12:46 - starting depth of zero and the first
12:48 - move is the maximizing player so let's
12:50 - say I'm maximizing what do I want to do
12:53 - actually what I want to do even before
12:55 - this is check to see if somebody won so
13:00 - I'm pretty sure I already have a check
13:02 - winner function that's something that I
13:04 - wrote in the previous coding challenge
13:05 - let me double check that check winner
13:09 - the winner is null and then by the end
13:13 - it returns a tie it returns null a tie
13:16 - or the winner so the score is and let's
13:20 - let's make a little lookup table that's
13:23 - basically exactly what I wrote here if X
13:27 - wins it's a 0 if a wins is a negative 1
13:29 - if it's a tie it's a 0 all right so this
13:34 - is my lookup table for what the score
13:37 - then and again it's a very simple
13:38 - scenario there's only three possible
13:40 - scores if the result is not equal to
13:42 - null the score is the associating that
13:47 - the number associated with this
13:48 - particular oh it got rid of those I
13:50 - didn't need those quotes oh Visual
13:52 - Studio code just clean that up for me
13:54 - thank you very much the score is based
13:56 - on whoever won and then I can return
13:58 - that so this would be the terminal
14:01 - condition if I am calling minimax on
14:04 - this particular board configuration at
14:06 - this particular depth and it's an end
14:09 - state if it's a terminal state just
14:11 - return the score that's what I'm
14:12 - supposed to do if it's not a terminal
14:17 - State if it's not this state I can't
14:21 - just return the score I need to check
14:22 - all the possible next moves so I got
14:25 - this wrong actually the next move right
14:28 - I'm actually this is the AI player
14:30 - trying to trying a spot there move so
14:33 - the next move is actually not the
14:35 - maximizing player this should be false
14:37 - but I'll better write this as if it is
14:39 - so if it's the maximizing player
14:42 - I can copy-paste that from above check
14:45 - all the spa possible spots again if it's
14:50 - available try you know now that's the
14:54 - human right then oh no this is the AI
14:56 - I'm confused because currently the way
14:58 - I'm stepping through this it's in my
15:00 - mind it's o's turn but i'm writing the
15:02 - code for both whether it's x's turn or o
15:04 - certain so for the sake of argument
15:05 - it's x's turn right now so i'm checking
15:08 - all of those spots and then i'm going to
15:10 - say return no I need to check how you
15:14 - defined I define the best move I'm kind
15:16 - of doing what I did again is there a way
15:18 - for me to reduce the amount of code I'm
15:19 - writing I'm not going to worry about
15:21 - this I want to once again find the best
15:23 - score which will be in this case
15:25 - negative infinity and I want to say the
15:29 - score is the minimax algorithm of the
15:33 - board at depth plus one and now the next
15:37 - players turn is false
15:40 - because I'm the maximizing player and
15:41 - then I'm going to undo this just like I
15:44 - did before
15:44 - why do I have to write this code twice
15:46 - I'll think about later if I can refactor
15:48 - this to only do it once if score is
15:51 - greater than best score best score is
15:56 - equal to score and then after all of
15:59 - this for loop for loop if it's an empty
16:03 - spot boom boom return the best score so
16:11 - this is finding the best score for all
16:14 - the possible next turns by the AI player
16:18 - or if it's not the AI player if it's the
16:23 - minimizing player we could do exactly
16:24 - the same thing and again maybe there's a
16:27 - way and I've I'm missing a curly bracket
16:31 - yes thank you there's a curly bracket so
16:35 - this is very important there's a lot of
16:36 - ifs and four-state for loops here so
16:38 - maybe there's also a nice way to
16:39 - refactor this make it more readable but
16:41 - if it's the maximising player check all
16:43 - the spots find the best possible outcome
16:46 - and return it but call minimax
16:48 - recursively and the next future move and
16:51 - then here I'm going to start write the
16:53 - minimizing player wants to find the
16:55 - best score for it which is the lowest
16:57 - score so and that's the human player and
17:01 - if the score is less than the best score
17:04 - and then return that best score whew oh
17:11 - forget about this return one I'm gonna
17:13 - stare at this to make sure on my mic my
17:15 - curly brackets line up if if for four
17:21 - and then return the best score otherwise
17:24 - if if for four and return the best score
17:28 - I think this might actually be good
17:30 - should we just try it error on line 33
17:38 - which will hold on Richard oh this
17:40 - should be ah look at this so this is a
17:42 - huge mistake here return true why did I
17:44 - have that there I don't know why did
17:46 - that that's return score this should be
17:48 - returned score the whole point of this
17:50 - and I don't even need a separate
17:51 - variable here I can just say returns
17:53 - scores result right so this is any kind
17:55 - of recursive function needs a terminal
17:58 - condition needs to exit right this
18:00 - function is always going to keep calling
18:02 - itself and calling itself minimax
18:04 - minimax minimax minimax I don't know
18:11 - what this extra code isn't here and
18:14 - minimax okay oh yes assignment is
18:19 - pointing out something to me which is
18:20 - great which I don't need this if
18:22 - statement to find the best score the
18:24 - whole point of this video and also
18:26 - there's a great chess where you use the
18:27 - min function in the max function because
18:29 - it's the minimax algorithm so I can
18:31 - actually say score is the lower one the
18:35 - minimum between score and best score
18:37 - it's going to make it way easier to read
18:40 - thank you and oh no but this one is Max
18:44 - is Max and then this one oh thank you
18:47 - for this I don't know why I didn't think
18:48 - of this I'm sure it's in every
18:51 - implementation score is the minimum
18:53 - between score and best score so this
18:57 - makes it much more much easier to read
18:59 - here okay let's try it let's try it why
19:04 - not
19:04 - caution to the wind
19:06 - okay excellent and the top left that's
19:09 - definitely the optimal place to go they
19:11 - go here no no bad X bad X you're not
19:18 - going in the right place yeah I be -
19:22 - you're still going in order why are you
19:27 - still going in order
19:28 - oh whoa you're not going in order you're
19:32 - making weird decisions oh oh I see the
19:38 - error I see the error of my ways this
19:40 - has to be true right after the
19:43 - maximizing players turn its the
19:46 - minimizing players turn after the
19:48 - minimizing players turn it's the
19:50 - maximizing players turn okay that's a
19:57 - good move X I see what you did there why
20:04 - can't you figure out to go there X oh
20:10 - okay
20:12 - this I'm finding this this is the score
20:16 - is the new score and the best score
20:18 - should be the bigger one the maximum
20:21 - between to score and best score not
20:22 - score ah this has to be this because I'm
20:26 - returning best score and this s Venus
20:29 - okay okay let's see I really should not
20:34 - continue to play this
20:38 - come on X figure out where to go okay
20:41 - I'm gonna go here that's in the wrong
20:50 - place it's in the wrong part I new look
20:53 - like brackets bad brackets I need to
20:55 - return the best score hello after I've
20:57 - checked all of the possibilities meaning
20:59 - both four loops the I and the J have
21:02 - completed I got that right up here but
21:05 - not down here oh okay I really think
21:09 - we've got it this time
21:11 - Tiffany's housed
21:13 - ah tie alright alright you we're gonna
21:26 - go into competition now I'm gonna I'm
21:29 - gonna let you win by going here ah
21:33 - so if I don't go in if I go in a corner
21:36 - yet if I don't go to the middle it's
21:39 - always gonna win so X is always gonna
21:41 - win unless I go to the middle in which
21:44 - case it's always gonna be a tie unless I
21:46 - make a mistake and then it's gonna win
21:47 - but if I go to any other spot X is going
21:51 - to be able to win because it's always
21:53 - gonna so one thing that might be
21:58 - interesting for me to try here really
22:00 - quickly before I sort of finish off this
22:01 - challenge would just be to comment out
22:03 - the AI going first so I know this is
22:06 - technically incorrect cuz X is supposed
22:08 - to go first but let's see what happens
22:09 - if I start with a fresh bolt forward and
22:11 - I go first so I'm gonna go here I'm
22:14 - gonna go here oh it's high am i oh etic
22:20 - something became undefined oh if I go
22:24 - last I guess there's no move for X and
22:26 - I've got it here so that's things like
22:27 - can I beat uh no I lost I don't believe
22:34 - there's any way for me to beat the AI
22:36 - player it's a solved game because it's
22:38 - always gonna go to the center so I could
22:41 - try going here I could go here go here
22:43 - and I'm the best I could do is a tie so
22:46 - you've watched this coding challenge
22:47 - maybe you have a creative idea about how
22:49 - to make your own version of this but I
22:51 - just quickly whipped up thanks to the
22:53 - chat in the live stream also some
22:55 - suggestions of things you could try so
22:57 - first of all what happens if you just
22:58 - make two AI players that just play
23:01 - against each other over and over again
23:02 - well in that case it's gonna be a tie
23:04 - every single time it's a solve game but
23:06 - that might lead to some interesting
23:08 - possibilities um one thing that I'm not
23:10 - using is using the depths in the score
23:12 - so for example if I go back to the code
23:14 - and I change these to say 10 and
23:17 - negative 10
23:18 - I could account for the depth meaning I
23:20 - could have a higher score if I win more
23:23 - quickly than if it takes longer to win
23:25 - right now I'm not accounting for that
23:27 - so where in the code would you subtract
23:29 - out depth that's something you could try
23:30 - certainly it would be interesting to
23:33 - make a larger board so can you play
23:35 - trick tic-tac-toe in a five by five or a
23:37 - seven by seven you the winning
23:39 - conditions would change
23:40 - the optimal play would change that would
23:42 - be exciting to try I hope somebody does
23:44 - that you could try more players like how
23:46 - would you have a tic-tac-toe game with
23:48 - three players that's something you'd
23:50 - write with a larger board you could try
23:52 - another game let me connect four would
23:53 - work that might be able apply minimax to
23:56 - just thinking about the interface
23:59 - animation like right now how whenever
24:01 - whenever I go the next turn happens
24:04 - immediately you could have you could
24:05 - think about timing and that sort of
24:06 - thing
24:07 - but then I always say high degree of
24:10 - difficulty and maybe worth me coming
24:12 - back to in a future video at some point
24:14 - would be these two last items one is
24:17 - known as alpha beta pruning alpha beta
24:20 - pruning refers to the aspect of the
24:24 - minimax algorithm where you find an
24:26 - optimal path and you know that all the
24:29 - other possibilities are going to be
24:31 - worse and you don't need to go forth and
24:33 - check every possibility so you could
24:35 - research how that works
24:36 - and add it to this algorithm it's
24:38 - explained in the Sebastian lag video
24:40 - then there's a possibility of a game
24:42 - where the number of moves is so vast you
24:45 - couldn't possibly compute the entire
24:48 - tree chess is the classic example of
24:51 - that so you need some heuristic or a way
24:53 - of an estimated guess of what the score
24:56 - could be with any given state so one way
24:58 - of doing this which I'm not saying is a
25:00 - good strategy but a simple thing you
25:02 - could do with chess is you could add up
25:03 - the total number of white pieces versus
25:06 - black pieces but you could say like well
25:08 - the score is higher if you have if the
25:09 - maximizing Claire has more pieces than
25:12 - the opponent so that's one way of
25:14 - approaching it so you don't actually
25:16 - stop at the end of the tree but you just
25:18 - go some pre-determined depth and then
25:21 - calculate an estimate and have that
25:23 - ripple back up the tree so you maybe
25:26 - give that a try with a more complex game
25:27 - um certainly other types of AI
25:30 - algorithms that neural networks could
25:32 - play a role at some point with how you
25:33 - make that estimate but ultimately that
25:37 - that is something that would be
25:38 - interesting to try as well
25:40 - one more idea that just came from the
25:42 - chat so this is quite similar to the
25:43 - idea of a larger board but instead of
25:45 - just a larger 2-dimensional board you
25:47 - could create a 3-dimensional board so
25:49 - tic-tac-toe that happens in a cube I
25:51 - should just do that as a coding
25:52 - challenge separately myself
25:54 - so hopefully you learned something and
25:56 - maybe this algorithm that looked a
25:57 - little terrifying to you at one point
25:59 - now seems quite accessible and doable
26:01 - um maybe your creative idea is not on
26:03 - this list please make your own version
26:06 - of this share it with me at the coding
26:08 - train com there will be a link in this
26:10 - video's description with instructions
26:11 - for how to share it if you don't know
26:13 - how to share it just write a comment
26:15 - file an issue we the coding train
26:17 - community are here to help you oh and I
26:20 - can't wait to see you in a future video
26:21 - goodbye
26:26 - [Music]