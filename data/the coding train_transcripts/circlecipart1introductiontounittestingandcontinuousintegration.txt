00:00 - (train whistle)
00:01 - - Hello, welcome to a
special Coding Train episode.
00:06 - This episode is the first in a series
00:08 - of some number of videos that I don't know
00:11 - right now because I haven't made them yet,
00:13 - all about unit testing and
continuous integration.
00:17 - This really fits into my playlists
00:20 - and topics about open-source development.
00:24 - So, if you've never used Git
or GitHub before you're here,
00:27 - I might suggest going and watching
00:29 - my Direction to GitHub videos.
00:32 - If you've never used Node,
00:34 - you might even watch
my What is Node video.
00:36 - I'll link to both of
those in the description.
00:38 - But other than that, this
is for the total beginner
00:41 - who has never done any unit testing
00:44 - or continuous integration.
00:45 - You know why I know that this
video is for that person?
00:49 - (dinging)
00:50 - I am that person! (laughs)
00:52 - Before last week, I barely, I mean,
00:54 - I've done a little bit of unit testing,
00:55 - and I've dabbled, I've read,
I've seen other people do it.
00:58 - Mostly I'm afraid of it, I think oh,
01:00 - they're just going to make it so I can
01:01 - never get anything done anymore.
01:02 - And people say, "No, it's going to make it
01:04 - so you can get everything done anymore."
01:05 - So, I'm here to investigate that.
01:06 - I should have mentioned
this at the outright.
01:07 - This video series is
sponsored by CircleCI,
01:10 - which is a company that provides
01:12 - as a service, continuous integration.
01:14 - Now, what that is, I
will get to eventually.
01:17 - Unfortunately, you're
going to have to watch
01:19 - me continuing to talk to get to that.
01:21 - So, let's start.
01:22 - I'm going to come over to the whiteboard
01:23 - for really no reason other than to write
01:25 - the word here, unit testing.
01:29 - So, continuous integration can be used
01:32 - for a variety of different things,
01:33 - but probably one of the more
common things it's used for,
01:36 - from what I understand is TDD,
01:39 - or test driven development.
01:41 - So, let's think about this.
01:43 - I was saying, another video
series you could watch
01:44 - which is very useful about unit testing
01:46 - and with CircleCI is from
MPJ, Fun Fun Function.
01:50 - I will link to those videos
in the description as well.
01:52 - And MPJ says that you
can think of software,
01:55 - a software project, a P5 sketch,
01:57 - you can think of my
snakes and ladders game
01:58 - from last week as a big project
02:01 - divided into lots of little parts.
02:02 - There's the player part,
there's the snake part,
02:05 - the ladder part, all of these are units.
02:08 - What if I change
something about the player
02:11 - to fix a bug, but don't realize
02:13 - it's also going to break whatever
02:15 - the ladder functionality or
the snake functionality is?
02:18 - In this case, if I have tests that run
02:22 - for each unit to say,
this little test code runs
02:25 - and says the ladder is working,
02:27 - this little test code runs
02:28 - and says the snake is working,
02:29 - this little test code runs
02:30 - and says the player is working.
02:32 - If I change just one, I can run
02:33 - all the tests and know
that my code is fine.
02:36 - The benefit of this is not just for
02:38 - your own personal sanity,
but for collaboration
02:41 - and open source projects
because this can be automated.
02:44 - You can have, whenever somebody submits
02:46 - a pull request to your
project, that tests are run.
02:49 - And it doesn't just give you confidence
02:51 - about merging, it gives the contributor
02:53 - a good feeling and confidence
that the tests have run,
02:55 - and if they haven't run, then you can
02:57 - help them figure out how to fix it
02:58 - so that they do run,
so all of this is good,
03:01 - good, good, good, good.
03:02 - I'm going to learn how to do it and try
03:03 - to adopt it more in my own work.
03:05 - Where have I encountered this before?
03:08 - The place I have encountered this before
03:10 - is with the open source project P5.js.
03:13 - P5.js, you might be
aware of, is a library,
03:19 - is a JavaScript library that I use
03:20 - for a lot of my tutorials, learning about
03:22 - the basics of coding and graphics
03:24 - and creative coding and data stuff
03:25 - and all this sort of stuff.
03:26 - All of the source code for
P5.js as a project is here.
03:30 - You may have encountered P5.js
03:31 - as just this file, and here I have
03:34 - my snakes and ladders game in which
03:38 - you can see like, that's
the P5.js library.
03:40 - If I click on it, it's like oh my god,
03:41 - this is all the P5.js code,
03:43 - but if you're working on
developing the library,
03:45 - scroll, scroll, scroll, scroll.
03:48 - If you're working on
developing the library,
03:49 - it's likely that you don't want to work
03:50 - with that file, so it's divided into
03:53 - lots of little units and those units
03:55 - you can find in the GitHub repository,
03:58 - in this folder called source.
04:00 - In source you can see there's all the code
04:02 - for all the color stuff, core stuff
04:04 - is like the core drawing functionality,
04:05 - data, events, and then
there's a build process.
04:11 - Once you finish doing your little change
04:13 - or whatever, then the build process runs
04:16 - and finishes off with
this smooshed together
04:20 - P5.js file that is all of the bits,
04:22 - all of the units together in one file
04:24 - so it can be used more easily.
04:25 - During that build process, tests run.
04:29 - These are the source folders.
04:31 - For example, I'm going to go here,
04:33 - one of the aspects that I worked on
04:35 - a while ago was the random functionality.
04:37 - There's a file called random.js,
04:41 - and if I click on that, we can kind of
04:43 - look down and see like oh, look,
04:45 - this is the actual random
number generator code
04:49 - that's inside the P5.js library.
04:51 - This is what actually
runs and it's kind of
04:52 - really interesting, I should do a video
04:54 - about this linear
congruental generator stuff
04:57 - and how random seeding works,
but that's another topic.
05:00 - So we can see this is the code.
05:01 - Now, where was that?
05:03 - We have to remember that was in
05:05 - P5.js source math random.
05:09 - Now let's take a look and say,
05:12 - hmm, there is also test.
05:17 - There's a folder called test,
05:18 - folder called source, folder called test.
05:19 - I'm going to go into
test and look at this.
05:21 - Then I'm going to go into unit. (laughs)
05:25 - All of a sudden look at this.
05:27 - Don't these directories
look very familiar to you?
05:29 - For every single unit, piece of a puzzle
05:33 - of the P5.js library, there
is a corresponding test.
05:37 - Let's go right into math and
let's go right into random.
05:40 - This is not the source code
for the library, remember.
05:42 - You could cut back and
forth between the video
05:44 - and it'll look the same, but if I go here,
05:46 - you're going to see ah, this is a test.
05:48 - You might be wondering like
ooh, what does suite mean
05:51 - and what is test, and assert, and type of?
05:58 - What is all of this code?
05:59 - This is where you most likely want to
06:01 - involve yourself with, that's a weird way
06:04 - to say it, but might
want to select and use
06:06 - a testing framework or a testing library.
06:09 - If I'm right about this, P5 uses
06:11 - a testing framework called Mocha,
06:13 - which is a very popular one.
06:15 - I'm going to, as I get a little further
06:16 - into this tutorial, use
something called Jest,
06:18 - and I'll talk about the differences
06:19 - or what that is and I'll
get to that in a little bit,
06:22 - but even without knowing
anything about it,
06:24 - we can see some code here
because look at this.
06:27 - This is how we test the function random.
06:29 - The first thing we do is
we set the random seed
06:32 - and then we pick five random numbers.
06:34 - Then we set the random seed again
06:36 - and pick five more random numbers.
06:37 - What should that do that makes it correct?
06:40 - If we set a random seed, if you get
06:42 - the same sequence of random numbers.
06:43 - First of all though,
before we even do that,
06:45 - does random even produce a number?
06:47 - We should check to make sure all 10
06:49 - of those things are
numbers and that's what
06:51 - this assert type of blah blah
blah is a number is checking.
06:54 - Then we should check to make sure,
06:56 - well random is supposed
to give us a number
06:57 - between zero and one, so we should check
06:58 - to make sure all of those
numbers are between that range.
07:01 - Then we should test to make
sure random seed worked.
07:04 - Is it the same sequence of random numbers?
07:05 - A way you can also test is when you
07:07 - pass in the argument five, if you get
07:09 - a number between zero and five.
07:10 - When you pass in the arguments one and 10,
07:13 - do you get a random number
between one and ten?
07:16 - This is what testing is, that way
07:18 - if I'm contributing to
P5 and I change something
07:21 - somewhere else, what if I don't realize
07:24 - that something I'm doing somewhere else
07:25 - in the library actually breaks the way
07:27 - random works, this will tell me that.
07:30 - This is why unit testing can be valuable
07:33 - in a large or even a
small software project
07:36 - that is a collaborative project,
07:37 - or even one that you're just doing it
07:38 - to test yourself as you go.
07:41 - Okay, so that's the basic idea of testing.
07:44 - Now let's think about what
are all the pieces you need?
07:49 - Number one is, there's
so many possibilities.
07:53 - We can do testing in Python or
07:55 - whatever language you're
doing, there's so many.
07:57 - I'm going to zero down and
live in the JavaScript world.
08:01 - You could be doing a server side web app,
08:03 - just like the client
side JavaScript thing,
08:05 - some open source library that's meant
08:06 - to be used, there's so
many complicated scenarios,
08:09 - but let's pick a simple one.
08:11 - I just have a single JavaScript file
08:14 - called sketch.js and this is my
08:17 - P5 creative assignment, blah blah blah.
08:22 - What I want to do is I want to run a test
08:25 - on the code that's in that file.
08:27 - I need some mechanism to do that.
08:29 - The tools that I'm
going to use to do that,
08:31 - so this is just for the testing,
08:34 - is I'm going to use Node,
and I'm not using Node.js
08:38 - because I'm creating a web server,
08:40 - although I might be doing that
08:41 - at some point in another project.
08:43 - I'm using Node just essentially as like
08:45 - a command line utility to run the test
08:47 - because there are Node packages,
08:51 - collections of code and libraries
08:52 - to allow you to do testing through Node
08:54 - and the one that I want to
use is something called Jest.
08:58 - I'll be perfectly honest, the reason why
09:00 - I'm using Jest is because I asked
09:02 - a whole bunch of people who seemed
09:03 - to know about this stuff what should
09:04 - I use and they said Jest.
09:06 - I believe P5 uses Mocha,
type in the comments
09:10 - your favorite testing framework, go nuts,
09:13 - but Jest is an open source project
09:15 - from Facebook, open source that I believe
09:17 - is generally paired with React.
09:19 - Again, I'm not doing React, I know less
09:21 - about React than I know
about continuous integration
09:24 - but I'm going to use Jest because
09:26 - it's pretty simple and I liked it,
09:27 - I looked at it, it's fine.
09:29 - That's what I need, so what
I'm going to need to do
09:32 - is somehow configure my Node project
09:35 - so that I can write NPM test.
09:38 - I want to run this command,
09:40 - it's going to do a whole bunch of stuff,
09:42 - and it's either going
to say something like
09:43 - success or failure and hopefully
09:47 - if it's failure it's
going to give me a report.
09:52 - This is the idea of testing.
09:54 - While I'm here in the kind
of overall landscape of this,
10:00 - let me make a little map here.
10:03 - I've got to erase this.
10:05 - Let's think about where everything lives,
10:08 - because how does GitHub
play a role in this
10:11 - and how does CircleCI or
10:13 - continuous integration
play a role in this?
10:16 - Number one, I have on my laptop,
10:19 - which is my local client computer
10:21 - where I'm doing the
development, I have sketch.js.
10:27 - I also have my whole Node project,
10:31 - which is really just by the way
10:33 - a package.json file and some other stuff.
10:40 - What I could do is I could
10:42 - push this repository, I'll use the idea
10:46 - of a cloud even though it's really just
10:48 - an underground bunker
of course as we know.
10:50 - I could push this repository to GitHub,
10:57 - so I can have it saved on GitHub
10:58 - and the nice thing about that is
11:00 - lots of other people could start to
11:02 - pull it and then make changes or
11:05 - propose changes through pull requests.
11:08 - Where do I run the tests?
11:09 - On the one hand, these are lots of
11:11 - other little client computers.
11:13 - On one hand, I could change my code
11:17 - and run my test locally and I know ah,
11:19 - my tests run, great, I'm
going to push to GitHub.
11:23 - Other people could clone the repository,
11:24 - make changes, run the tests themselves,
11:27 - and feel confident and
push to the repository,
11:30 - but wouldn't it be nice if GitHub
11:32 - could run the tests for me?
11:34 - Any time that I try to push code there,
11:36 - it's going to say let me test that first,
11:39 - I'll tell you if it's okay.
11:41 - It can't, GitHub does
not have that a service.
11:44 - You can't execute code on GitHub.
11:46 - You can host your projects there,
11:48 - you can even web host client side
11:51 - JavaScript programs there,
but you need something else.
11:56 - You need a continuous integration service
11:58 - and that is where something
like CircleCI comes in.
12:02 - I don't know what I'm drawing here,
12:04 - but CircleCI is another thing
12:05 - that lives in the cloud
shaped underground bunker
12:09 - and what CircleCI does
is it can be a service,
12:14 - it can be linked as a service to
12:16 - your particular GitHub account.
12:18 - You sign up for a CircleCI account
12:19 - in the same way you sign
up for a GitHub account.
12:22 - CircleCI has a good, free tier
12:24 - which you could do just about everything
12:25 - that I'll show you in this video
12:27 - for small projects and small teams,
12:28 - you can absolutely use it.
12:31 - So what you can do is you can say hey,
12:33 - any time I push or any time I commit
12:36 - or do a pull request, please go
12:38 - and run, open a little
instance of a server
12:42 - on CircleCI to run a bunch of Node stuff
12:45 - to check the test and report back.
12:48 - This is the process, and so what
12:49 - I'm going to show you in the next video,
12:52 - I'm going to actually
just make an entirely
12:54 - simple, basic example of one
little JavaScript program
12:57 - with one test and continuous integration,
13:00 - I'm going to make it so
that if you, the viewer
13:02 - watching right now, you can submit
13:05 - a pull request, but I as the administrator
13:08 - of the repository will
not be allowed to merge it
13:11 - unless the tests that I have
written for the project pass.
13:14 - That's the basic gist of it.
13:15 - I'm sure there are going
to be some questions
13:17 - and things and I will return in a moment
13:19 - in the next video to start writing
13:22 - what I need in package.json,
13:23 - what I need in sketch.js,
13:25 - what did I need in a test file
13:26 - and all the other things that
13:27 - I'm forgetting to mention right now.
13:30 - (upbeat music)