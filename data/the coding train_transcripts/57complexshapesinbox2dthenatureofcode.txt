00:02 - okay so there comes a time if you're
00:05 - using box2d where you want to put things
00:07 - on the screen than aren't just a box or
00:11 - a circle right well an important thing
00:13 - to realize is first of all that what we
00:15 - are actually doing is all of our
00:18 - examples so far are literally
00:20 - representing the box 2d physics on the
00:23 - screen so for example when we set up a
00:25 - polygon shape which is a box with a
00:27 - width and a height this is what box 2d
00:30 - thinks is in its physics world and then
00:33 - we go and draw it on the screen
00:34 - literally this way glasses are dirty so
00:39 - we we are representing that box
00:42 - literally just as a rectangle in
00:44 - processing but we very easily could have
00:47 - you know loaded a p.m. edge that had you
00:50 - know some hearts in it and we could have
00:52 - even you know drawn a few lines on the
00:55 - side to give it like some fur so it's
00:57 - like this furry pillow with hearts on it
00:58 - and it's gonna look right right the key
01:02 - thing here is that what we tell box2d
01:04 - about the physics only needs to
01:06 - approximate the way we visually render
01:08 - on the screen and for the most part it's
01:10 - gonna look right you know certainly the
01:12 - creators of angry birds aren't modeling
01:13 - every single nuance of the birds design
01:16 - there's really just a circle under there
01:17 - that's knocking into a bunch of boxes so
01:20 - this is one of the things that we need
01:21 - to think about and later on once we look
01:23 - at joints we're gonna see even more
01:24 - elaborate ways of creating skeletons for
01:27 - complex designs that we might want to
01:29 - actually visualize in the processing
01:31 - sketch so but there comes a time we're
01:33 - just a mere rectangle or a mere circle
01:36 - is not enough of an approximation so
01:38 - there for example let's just say you
01:40 - wanted to make some type of creature
01:42 - like thing or a little alien design that
01:45 - you know looks like this so it's sort of
01:47 - a terrible drawing but how would you
01:49 - implement this in box Edie certainly we
01:51 - could kind of use a bounding box
01:53 - approach and create a box that just kind
01:55 - of approximate does it not but we could
01:57 - get much more specific about this and
01:59 - there are two ways of doing it so the
02:02 - two ways that we're going to just that
02:03 - I'm going to describe and look at in a
02:05 - couple examples one way is to use set
02:07 - the vertices manually of a polygon shape
02:09 - so I'm going to call that cusp
02:12 - polygons so that is strategy number one
02:15 - we could create a custom polygon
02:17 - strategy number two involves multiple
02:21 - shapes attached to one body so these are
02:30 - two strategies we can do one is we could
02:32 - create a custom polygon two we could
02:34 - create multiple shapes and attach them
02:36 - to the same body
02:37 - the truth is two could also include one
02:40 - we could create multiple custom polygons
02:42 - and attach them to the same body so
02:43 - let's look at how this works let's think
02:45 - about first the custom polygon and then
02:47 - we'll look at the multiple shape
02:48 - scenario in a moment so custom polygons
02:51 - what do I mean by that what I mean is
02:53 - instead of just saying hey the polygon
02:55 - is going to be a box with a width and a
02:56 - height we're gonna set the vertices
02:58 - individually this is very similar to the
03:00 - way that we set the vertices for a
03:02 - change shape the difference here is we
03:03 - have an enclosed polygon shape so we
03:06 - could set vertex vertex vertex vertex
03:10 - vertex and we want to set all of these
03:13 - vertices using remember world
03:15 - coordinates so if we think of these as
03:17 - pixel coordinates we're gonna have to
03:19 - convert them to world coordinates before
03:20 - we set them and we're gonna use the same
03:24 - exact method we can create an array of
03:27 - ektu objects all with these locations
03:29 - and the polygon shape right polygon
03:32 - shape object has a very simple function
03:34 - called set where we can pass that array
03:37 - in so we can say so before we said set
03:39 - as box we give it a width and a height
03:41 - now we're just saying set the vertices
03:43 - according to this array of vertices now
03:45 - there's two important aspects of this
03:47 - and I guess I'll just erase this down
03:49 - here and come back to this in a moment
03:51 - that we need to remember one is convex
03:55 - shapes only well I hope this is still
03:57 - true in box 2d stuff kind of changes
03:59 - sometimes but convex shapes only there's
04:03 - actually a new version of J box 2d so I
04:05 - might have to update all of these
04:06 - someday but I haven't haven't haven't
04:08 - updated yet but convex shapes only a
04:10 - concave shape is a shape whose surface
04:13 - turns inward right so this is a convex
04:16 - shape if I'm drawing this correctly and
04:19 - here's a concave shape
04:23 - box2d cannot handle collisions for
04:26 - concave shapes however can for convex
04:28 - shapes and your ask yourself but I want
04:30 - to do pac-man and how do i do pac-man
04:32 - how could I do this well one thing
04:34 - that's interesting remember we just said
04:35 - there's a multiple shape approach well
04:37 - interestingly enough any conduct have
04:40 - notes over that so I keep looking
04:41 - any concave shape you can make out of
04:45 - two convex ones so right if I just draw
04:48 - a line here this is a convex shape a
04:51 - this is a convex shape B stick those two
04:54 - together and we have a concave shape I
04:57 - can't remember the difference between
04:58 - concave and convex this is very much of
05:00 - a struggle okay so that's one thing
05:02 - that's important the other thing is
05:04 - box2d expects the vertices in clockwise
05:08 - order so when you're giving the vertices
05:11 - in this array you've got to start in
05:12 - clockwise order however you're most
05:15 - likely going to be thinking of the
05:17 - vertices in pixels as we're gonna see in
05:18 - the example in a moment so you actually
05:20 - want to create the vertices in
05:23 - counterclockwise counterclockwise four
05:29 - pixels because if you're converting them
05:32 - one at a time they're going to be
05:33 - remember the y-axis is flipped they're
05:35 - actually gonna you're gonna end up
05:36 - giving them two vaak siddhi in clockwise
05:38 - order you know all this stuff sounds
05:40 - like a real big pain in the neck and the
05:42 - truth of the matter is it is a big pain
05:44 - in the neck and that's why you know we
05:46 - want to be careful about when do we use
05:47 - box2d when do we not use box a' D it's
05:49 - totally worth all this extra effort when
05:52 - when you really need box D for a project
05:53 - and when you don't need it it's not
05:55 - worth all this extra effort so okay so
05:57 - this is strategy number one the custom
05:59 - polygon approach let's take a look at
06:01 - the example this is example 5.4 I'm
06:05 - gonna run it and you can see oh I forgot
06:07 - to change the size but you can see here
06:09 - all these shapes their custom polygons
06:11 - and look at this I'm setting all of
06:13 - these vertices in the code in an array
06:15 - and converting them and then converting
06:17 - them there aren't coordinates they're
06:19 - vectors these are vectors that are all
06:21 - pointing from the center of the shape so
06:22 - that's one thing that I didn't mention
06:24 - is that what we're thinking of is if you
06:26 - think of this as like zero zero these
06:28 - locations you can think of them as
06:30 - vectors pointing from the center of the
06:32 - shape again you want to think of them in
06:33 - o'clock counterclockwise so you get them
06:35 - in o'clock
06:36 - and you can see them here you could you
06:38 - know as an exercise to yourself is like
06:40 - go and get this code try to like get a
06:42 - piece of graph paper and draw out those
06:43 - vertices see if you get the shape that's
06:45 - appearing in the examples and right here
06:47 - we can see we make the polygon shape and
06:49 - it's very simple
06:50 - pS set so instead of set as box with a
06:53 - width and height just set with an array
06:56 - of vertices so that's how you can make a
06:58 - custom polygon shape and then again
07:01 - we're just drawing it begin shape and
07:03 - shape with the standard drawing ways
07:04 - that you do in processing but you might
07:06 - choose to visualize it in a different
07:07 - way so that's option number one now
07:09 - option number two in some ways this
07:12 - actually maybe I should have started
07:13 - with it in some ways it's a little bit
07:15 - simpler I think so the example that I
07:18 - have just creates something that
07:20 - resembles a lollipop is I think what I
07:22 - called it the lollipop object so we
07:24 - could make an object like this a little
07:27 - kind of person with no legs or arms
07:29 - right out of a rectangle a polygon shape
07:32 - and a circle shape so what we're
07:34 - actually doing in our steps here define
07:36 - a body create a body create a shape
07:39 - create a fixture attach their body to
07:41 - attach the shape to body with fixture
07:42 - we're gonna do this in times so we have
07:47 - to we have to define the body and create
07:49 - the body then we create the polygon
07:52 - shaped box and attach it to the body
07:54 - then we create the circle shaped box and
07:56 - attach it to the body now if we just
07:59 - went ahead and did that without thinking
08:01 - it through what we might end up getting
08:03 - is a shape that looks like this right
08:06 - because these shapes are always attached
08:09 - in a way to the center of the body and
08:11 - one of the things in the example that
08:13 - you're going to see is that the circle
08:15 - is given an offset location along the
08:18 - y-axis so one of the additions we're
08:21 - going to have to do here when we create
08:23 - the shape is set an offset if in fact we
08:28 - want these shapes to be offset from each
08:30 - other in some way so again it's really
08:32 - up to you you know what do you know try
08:34 - to come up with some scenario like maybe
08:36 - you want to make a three leaf clover and
08:39 - you could do that out of a rectangle and
08:42 - three circles or something I don't know
08:43 - there's come up with some type of
08:45 - scenario where you want to make a
08:46 - complex shape figure out where's the
08:49 - Center what are the shapes one of their
08:51 - properties what are the radius of the
08:52 - circles what's the width and height of
08:53 - the rectangle what are their offsets on
08:55 - the x and y axis from the center and
08:57 - let's take a look at a scenario that of
08:59 - that in code if I come over here this is
09:02 - example five point five multiple shapes
09:04 - and if I just run it we're gonna see
09:07 - here that as I click oh and I forgot
09:11 - someday I will edit this out that
09:13 - there's a mistake in here and I'm gonna
09:16 - go back to this and run it again oh and
09:19 - I'm not even over here hi okay you know
09:22 - these aren't gonna be perfect especially
09:24 - not today because I have a cold and been
09:27 - doing this for hours if it's volume but
09:29 - okay so here you can see if you can like
09:31 - kind of zoom in there we can see we have
09:33 - these nice shapes which are a rectangle
09:35 - attached to a circle two shapes attached
09:38 - to the same body so I'm going to zoom
09:39 - back out and we can see how is this done
09:41 - here well we have step one to find the
09:45 - body crea and step to create the body
09:46 - and now look at this create a circle
09:48 - shape and create a polygon shape two
09:51 - shapes and right here this is a kind of
09:52 - key line of code this is where we're
09:54 - defining that offset the circles MP dot
09:58 - set so this is like again wading through
10:00 - all this documentation you know
10:02 - hopefully it's in an example if not
10:03 - you're gonna have to sort of look it up
10:05 - detect it but a shape object has a
10:07 - variable called M underscore P which is
10:10 - its offset position as a vector and we
10:12 - can set it to our offset which we I
10:14 - guess had previously had defined oh no
10:17 - we defined it right here and converted
10:20 - it we made a vector in pixels then we
10:21 - converted it and then we assigned it so
10:23 - there's all these steps right this is
10:25 - that same thing this offset
10:26 - we're probably think of eating n of us
10:28 - pixels like oh this circle is 50 pixels
10:31 - above the rectangle so if we look at
10:33 - that right here we create the vector
10:35 - with a height above that then we have to
10:37 - convert it from pixels to world and then
10:39 - set that as its offset so there's a lot
10:41 - of these steps a lot of these
10:42 - gobbledygook kind of steps to get
10:44 - comfort with and then remember this we
10:46 - need to attach both shapes of the bodies
10:49 - each with its own fixture and one of the
10:51 - things that I haven't mentioned by the
10:52 - way is there is a thick there's code for
10:54 - a fixture shorthand look at this
10:57 - remember in the other examples we would
10:59 - say fix your definition equals new
11:01 - fixture definition set the
11:02 - friction sat the restitution set the set
11:04 - the density you can do that if you need
11:07 - to custom manage those physics
11:09 - parameters but one thing that you can
11:11 - also do is if you just want to use the
11:14 - default friction and the default
11:16 - restitution you can in one line of code
11:18 - attach the bot the shape to the body
11:20 - with a fixture and it's just called body
11:21 - create fixture pass in the shape and the
11:24 - value one there is the density so the
11:26 - one thing you can set is the density so
11:29 - another thing that's just in this
11:31 - example that I'm noticing right now is a
11:32 - body can have an initial velocity you
11:35 - can also have an initial angular
11:36 - velocity so that's why when we run these
11:38 - you can see that they're already kind of
11:39 - moving and spinning just when I click
11:41 - the mouse and adding them to the screen
11:42 - okay so this is Alyssa's a lot but
11:45 - hopefully you have a sense of okay if I
11:47 - just want a box polygon shape CETIS box
11:50 - if I just want a circle circle shape
11:52 - with a radius if I want a more complex
11:54 - shape I could define a custom polygon or
11:56 - I could stick multiple shapes together
11:57 - and these examples five point four and
11:59 - five point five will kind of lead you
12:01 - down that path so if you're looking for
12:02 - an exercise design some kind of crazy
12:04 - alien looking shape that you think you
12:06 - could never make in box 2d and see if
12:08 - you can build it up with custom polygons
12:09 - and multiple shapes okay