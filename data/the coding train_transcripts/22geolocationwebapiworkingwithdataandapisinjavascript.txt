00:00 - Welcome to the second video in
the Data Selfie App Project.
00:03 - Thank you, Joey Lee,
for this sample project.
00:06 - I'm excited to keep
building this with you who
00:09 - are watching this right now.
00:11 - So one of the things, one of the
reasons for this project, one
00:14 - of the things I'm excited
to demonstrate to you
00:16 - is what is this whole thing
about client side and server
00:19 - side programming.
00:20 - If you watched the first
video, all I did really
00:22 - was make two files,
Index.js, the JavaScript node
00:26 - code to run on the server,
and Index.html, the web page
00:30 - that the server is hosting
up to run on the client.
00:33 - And this is one of the
most confusing things
00:35 - when you're first
learning to program
00:37 - and thinking about client
side versus server side,
00:40 - when do I want to do one
or what goes on where.
00:42 - So let's take a minute to
dissect that a little bit here.
00:46 - We have the file Index.js.
00:51 - This is the server.
00:56 - Only functionality
on the server right
00:57 - now is as follows,
host static files.
01:04 - The goal here is to build
additional functionality, what
01:06 - other kinds of things does
the server need to do?
01:09 - Save information to our
database, for example,
01:12 - retrieve information
from the database
01:14 - and pass it to the client, also.
01:17 - But for right now, all it
does is host static files
01:19 - and the static file
it happens to host
01:22 - is Index.html living
on the server.
01:25 - What happens, the client
connects to the server
01:29 - and says, we'd like to request
to view your website, your web
01:33 - application.
01:34 - And so with that
request, Index.html
01:40 - gets sent to the client.
01:43 - Then it gets rendered
in the client's browser.
01:47 - If this Index.html
happens to have JavaScript
01:51 - files with it or references
to other JavaScript files.
01:54 - And, of course, there could be
other media and other things
01:56 - going along as well, that
JavaScript is sent as raw text
02:01 - and get executed here.
02:05 - So the big difference, even
though we might have JavaScript
02:08 - in two places, we have
JavaScript in Index.js,
02:12 - we have JavaScript
in index.html,
02:15 - this JavaScript that's
running on the server
02:17 - is never seen by the client.
02:19 - It has no ability to access this
code, it can make a request.
02:23 - This is a program that's
running, the code is in it.
02:26 - This is an important distinction
because at some point,
02:29 - when we start
connecting to APIs,
02:31 - as we might need to do
some authentication.
02:33 - So that's another thing that we
want to do here on the server.
02:37 - We said earlier
save to database.
02:42 - That's the thing that we
can't do on the client.
02:45 - The server has to
take care of that.
02:46 - Here's another thing.
02:47 - Some APIs could
authenticate from here,
02:50 - like the JavaScript code
could go here, execute
02:53 - and connect to the API.
02:54 - But then, whatever is in
here is visible to the user.
02:58 - You could do view source
and see the JavaScript,
03:01 - you could see the
API keys there.
03:03 - So this is an important point.
03:05 - We may in most cases want
to do authentication here
03:10 - on the server.
03:10 - So we're keeping track
of a list of things
03:12 - we want to do in the
server and keeping track,
03:14 - we don't really have
a list of things
03:15 - we want to do in the client.
03:17 - In this particular
video right now,
03:19 - I don't want to add any of this
functionality to the server.
03:23 - I'm going to do that later.
03:25 - What I want to do right
now is add functionality
03:27 - to the client.
03:28 - So I'm adding JavaScript
to Index.html.
03:31 - Something that I can only do
on the client is geolocate.
03:36 - Geolocate.
03:37 - Right?
03:38 - The client is
somewhere in the world.
03:40 - There could be many of them.
03:41 - That's another thing.
03:42 - There's only one server,
I'm writing the server,
03:45 - there's only one
Index.html file.
03:47 - But that file can be sent
to many different clients.
03:50 - Those clients could
geolocate themselves and then
03:54 - send that data
back to the server.
03:56 - It's particularly confusing
because when you're
03:58 - practicing this and
developing this,
04:00 - remember I've got the server
and the client running here
04:04 - locally on my laptop, so
they're both in one place.
04:09 - Towards the end of
this video series,
04:11 - I'm going to show you
how to take the server
04:13 - and deploy it to the
cloud, so to speak,
04:15 - or a server that's somewhere
else that many clients could
04:19 - ultimately connect to.
04:20 - So I'm just repeating
a lot of the same stuff
04:21 - over and over again.
04:22 - So all we're going to do in
this first step is figure out
04:25 - how to geolocate where the
client is, show the client
04:28 - their latitude and longitude
on their browser page,
04:32 - and then we'll be ready
for the next step, which
04:35 - I'll do in the
subsequent video to send
04:37 - that information on the server
and have the server save it
04:40 - to a database.
04:41 - One of the things that
is available to you
04:43 - if you're writing JavaScript
for client side browsers
04:46 - is the web API navigator.
04:48 - So this interface, this
Navigator interface
04:51 - has information about the
user agent, the identity,
04:54 - the specific user itself.
04:55 - Things like the user's
language or at least
04:57 - their language setting in
the browser, their battery
05:01 - about a battery left, yes.
05:02 - There's a navigator and
API functions for battery,
05:06 - and geolocation is one of them.
05:07 - So you can check out
the Mozilla web docs
05:09 - for all the different things
you can access via the navigator
05:12 - object.
05:13 - The one I want to look at
here is just geolocation.
05:16 - So here I am on
the geolocation API
05:17 - page, which I can access
with that navigator object.
05:20 - One thing that's really key
here is this little note.
05:24 - This feature is available
only in secure contexts HTTPS.
05:30 - So this is quite true
of several things.
05:33 - For example, if your website is
not hosted in a secure context
05:37 - you may not be able to get
access to a user's webcam.
05:40 - That's another feature that
we're going to add here.
05:43 - And so this is
something you really
05:44 - need to be conscientious about.
05:45 - For us right now developing
locally on this laptop
05:48 - the permissions are
much more loose.
05:51 - We're allowed to access
geolocation, allowed
05:54 - to access the
camera on local host
05:55 - because we haven't actually
deployed anything to a real web
05:58 - server where there's users
besides ourselves just
06:00 - playing around with it.
06:01 - But this is definitely
something going
06:02 - to want to watch out for when
you get to that deployment
06:04 - stage.
06:05 - The other thing to
really be aware of is not
06:07 - all-- not every browser
that anybody might be using
06:10 - on any operating
system with any version
06:12 - is going to have
support for geolocation.
06:14 - So the first thing you would
always want to do in your code
06:16 - is test to see if geolocation is
even a thing that's available.
06:20 - Luckily for us, the
code for how to do that
06:22 - is right here on the
documentation page.
06:24 - So I would consider
retyping it, but it'll
06:26 - be easy to just copy-paste.
06:28 - So I'm going to take
that, I'm going to go back
06:30 - to the Index.html file.
06:32 - I'm going to add to
the body a script tag
06:39 - so that I can put
this code in here.
06:42 - And I'm going to say console.log
gelocation available,
06:50 - and then console.log
geolocation not available.
06:54 - So at a minimum here,
when I load the page,
06:56 - I should see one or the
other of those messages.
07:00 - And geolocation is available.
07:01 - Fantastic.
07:02 - So if geolocation
is available, then I
07:05 - can choose to take the
next step and geolocate.
07:08 - The way that I do that is by
calling to getCurrentPosition
07:11 - function.
07:12 - And the getCurrentPosition
function
07:14 - requires me to pass in
a callback function that
07:17 - is executed when the position
is ready to be retrieved.
07:21 - That's a bit of a
mouthful, but we
07:22 - can copy-paste the code that's
here on the documentation page
07:27 - and then unpack
that a little bit.
07:28 - So let's go to our code.
07:29 - If it's available, I
want to put this here,
07:33 - so let's look at this.
07:34 - Navigator.geoloc
ation.getCurrentPosition.
07:38 - That's really the
function I'm calling.
07:40 - I can take all of this out.
07:42 - This is what we're
calling right here.
07:43 - The issue is, we need to
give it a callback, right?
07:46 - This is going to
happen asynchronously.
07:48 - So only when it's ready to
grab that latitude-longitude,
07:52 - this function will get called.
07:54 - I don't need this
do something here.
07:56 - This is a nice little--
07:57 - it's implying the
documentation is implying now
08:00 - you do something with that.
08:01 - All I wanted it to do to see
that this works is actually
08:04 - console log this out.
08:06 - So I'm going to say console log,
position coordinates latitude,
08:12 - and console log position
coordinates longitude.
08:15 - Get the current position.
08:17 - When it's ready, call this
callback passive position
08:20 - and console log in.
08:21 - I am trying to do this series
about building these projects
08:25 - using updated ES6 syntax.
08:27 - There's a variety of different
versions of JavaScript.
08:29 - Yes, this is actually
from quite a while ago.
08:31 - I have a bunch of videos
about different versions
08:33 - of JavaScript, but
what I mean here
08:35 - specifically is I want
to use the arrow syntax.
08:38 - So what I can actually do is
eliminate this function key
08:40 - word and just say position arrow
into these two lines of code.
08:45 - So this is a nice way
of writing saying,
08:48 - let's get the current
position when it's ready,
08:51 - console log it.
08:52 - And in fact, I'm just
going to say console--
08:54 - I'm going to simplify
this even further.
08:56 - Just going to say console.log
position.coordinates, OK?
09:00 - Because I want to
look at the full
09:02 - object to see what's in there.
09:03 - Oh, I want to look at position.
09:05 - I want to look at everything.
09:06 - So let's do that.
09:07 - Let's see what happens.
09:09 - So I'm going to go back
here and hit refresh.
09:11 - Now look at this.
09:12 - This is really important.
09:13 - Localhost 3000, that's the
URL present for my website,
09:18 - it's just localhost, I'm
just developing locally.
09:20 - If you had deployed
this somewhere
09:21 - and your website was
DataSelfieApp.com,
09:24 - it would say DataSelfieApp.com
wants to, what?
09:27 - Know your location.
09:28 - So, of course, of
course, of course
09:30 - this is something that the
user has to opt into, right?
09:33 - You can't just secretly
behind the scenes
09:36 - log users location without
them saying yes, this is OK.
09:39 - So not only does
the website have
09:41 - to be secure, so that
information is transferred
09:44 - securely, but it also has to be
explicitly allowed by the user.
09:49 - This might be
different if you were
09:50 - doing geolocation within
an app itself because maybe
09:53 - the user by purchasing
the app or maybe the user
09:57 - by downloading the app and
through system settings
10:00 - has already oft opted into
that app using location,
10:03 - but just on a website itself
the user is going to say allow.
10:05 - So I'm going to say allow.
10:08 - And then--
10:10 - [CHUCKLES]
10:13 - Boy, that took a while.
10:14 - Took a while.
10:16 - So you could see that
for it to figure out,
10:18 - for it to do the location,
that takes a while.
10:20 - How is it doing the location?
10:22 - This is this laptop.
10:23 - It didn't have a GPS in it.
10:24 - Let's look and see what's
in here, first of all.
10:26 - So we have coordinates,
we have timestamp.
10:29 - Coordinates have accuracy,
altitude, possible heading,
10:32 - latitude, longitude, speed.
10:33 - So there's a lot of
extra information
10:35 - here that you might get if
you were doing this on mobile.
10:37 - So that would be excellent.
10:38 - We'll pause this
video, try to make
10:40 - this run in a
mobile browser, then
10:43 - see what else you get there.
10:44 - And what I'm looking
for, of course,
10:46 - is just the latitude
and longitude.
10:47 - Now, just out of curiosity,
let's see where I
10:49 - am and see how accurate it got.
10:51 - Looks like it got
it exactly right.
10:53 - So this is not where the
International Space Station is,
10:55 - but this is exactly the code
from my International Space
10:58 - Station example.
10:59 - I just hard-coded in the
latitude and longitude
11:01 - that I got from
geolocating myself,
11:03 - and then there I am, right here
in New York City on Broadway
11:08 - between Washington Place
and Wimberley Place
11:10 - at the Tisch School of the Arts.
11:11 - That's exactly where I am.
11:12 - So it works.
11:13 - Most likely, my
guess, my assumption,
11:17 - is that it's able to
locate me by the IP address
11:19 - where I'm connected
to the NYU Wi-Fi
11:21 - and the NYU Wi-Fi,
that IP address,
11:23 - is registered to this
particular address
11:25 - at Tisch School of the Arts.
11:26 - But if I'm opening this
on a mobile device,
11:28 - I would most likely
get that latitute
11:29 - and longitude the GPS itself.
11:31 - A good exercise could then be
to add the Leaflet.js code right
11:35 - here and actually have
the browser geolocate
11:39 - and then show the user
where it thinks they are.
11:41 - But I'm going to do something
much simpler because really
11:43 - what I want to do
is get to sending
11:45 - that data to the server.
11:46 - This is the heart of
this particular module
11:49 - of this series, which is how
to communicate data that's
11:53 - extracted in the client,
send it to the server,
11:56 - and save it to the database.
11:57 - So in many ways we're
done, but let's at least
11:59 - add that latitude and
longitude to the web page
12:01 - itself so we can
see it in the Dom.
12:03 - Let's add a couple
of Dom elements.
12:05 - For example, I'll
just say latitude,
12:09 - I'll make a span, latitude,
and that'll be empty.
12:14 - And then I'll add a break
and say the same exact thing,
12:23 - but longitude.
12:25 - Let me also add the
degree symbol, which
12:28 - I can do by just
saying & deg semicolon,
12:31 - and the same exact
thing down here.
12:34 - & deg semicolon.
12:37 - So now if I refresh the
page here, there we go.
12:42 - Latitude and
longitude are blank.
12:44 - It's got the position there,
let's pull out the latitude,
12:49 - position.coodinates.latitude
and then I
12:53 - can say document.getElementByID.
12:57 - The ID is latitude,
and then I can
13:00 - say text content
equals that latitude,
13:05 - and I can do the same
thing with the longitude.
13:12 - I'm having serious
case of deja-vu here
13:15 - because we did a lot
of this kind of idea
13:17 - in the previous video.
13:18 - And then I can put that here.
13:21 - And now we are ready to go.
13:24 - Now I can refresh the
page and there we go.
13:27 - We see the latitude
and longitude
13:29 - right there in the
browser itself.
13:31 - There you have it.
13:32 - Now we're done with step two.
13:33 - We have data that we have
acquired from the navigator
13:38 - geolocation API on the client.
13:42 - We have a server that is
hosting the code that is being
13:46 - sent to the client to run.
13:47 - The next step is
for that information
13:51 - once it's retrieved
on the client
13:52 - to be sent back to the server
and saved in a database.
13:57 - And the way that's
going to happen
13:59 - is through a POST request.
14:02 - In previous videos, I have
covered the Fetch function
14:06 - extensively and looking at
how to do a get request,
14:08 - how to retrieve
data using Fetch.
14:12 - It makes sense, Fetch kind of
implies fetch, retrieve, get.
14:16 - But it so happens that the
fetch function can also
14:18 - be used to send data by making
it instead of a Get a POST.
14:22 - I can fetch a POST,
I can POST a Fetch.
14:25 - Who knows what the lingo
means, but I can send data
14:27 - from the client to the server.
14:29 - That'll be the next step.
14:30 - Then after that, we'll save
the status of the database
14:32 - that gets sent, and
more and more and more.
14:34 - Before you move on
to the next video,
14:35 - I might suggest just playing
around with the client code,
14:39 - add the map with Leaflet, think
about maybe a more elegant
14:42 - interaction, maybe there
should be a button the user
14:45 - presses to retrieve the
current latitude and longitude,
14:48 - try it on a mobile device.
14:49 - There's a bunch of
things you could try.
14:50 - Let me know how that
goes in the comments,
14:51 - and I'll see you
in the next step.
14:53 - Thanks for watching.
14:54 - [MUSIC PLAYING]