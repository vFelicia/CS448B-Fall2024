00:00 - okay hello I'm in part two of my coding
00:03 - challenge where I am attempting to
00:05 - evolve a vehicle triangle thing to eat
00:08 - some green dots and avoid some red tots
00:10 - because I thought that's what my license
00:12 - becomes it's kind of interesting though
00:13 - I'm having a good time okay so where did
00:15 - I where do I last left leave off so
00:17 - right now I have a vehicle that just is
00:18 - attracted to red and green and try to
00:20 - track goes to whatever its nearest to
00:22 - but there is actually a big issue it's
00:24 - going to have an error every once in a
00:25 - while because one thing that I'm doing
00:27 - here I'm surprised that I haven't had a
00:29 - problem yet is that oh I already fixed
00:32 - it no no I didn't fix it this could
00:37 - happen where I delete a certain element
00:39 - from the list and then I seek it
00:41 - afterwards so what I really need to do
00:43 - is if I'm about to eat that dot I don't
00:45 - need to seek it anymore so I only either
00:47 - want to eat it or seek it and it because
00:51 - if I'm eating it and deleting it it
00:53 - might not even be there for me to seek
00:54 - anymore and then also to be honest it's
00:57 - technically possible that there could be
00:58 - no dots and closest could be none number
01:01 - one so I should also just double I
01:02 - should also just negative search could
01:05 - be negative one could be an invalid
01:07 - index so I should also really just check
01:09 - and say also let me make sure that
01:11 - closest is not equal to negative one or
01:16 - maybe I could just say is greater than
01:17 - negative one is fine too so this is
01:20 - really a bit more of error protection
01:21 - here and this might change later because
01:22 - I'm thinking about how I'm going to keep
01:24 - going with this but right now I should
01:26 - only I should either eat and delete it
01:28 - or seek it as long as it actually exists
01:31 - and so now this should run without any
01:35 - errors and what I might do just to kind
01:37 - of test this out is just to be sure
01:40 - let me not add any poison and whoops I
01:47 - probably should I think a good way to
01:50 - just quickly test this is let me not add
01:52 - any poison and let me add a hundred
01:55 - pieces of food and let me just run this
01:57 - and we're going to see very quickly I
01:59 - shouldn't have any errors I suppose
02:01 - there could be an error when it gets to
02:02 - the last one so let me just add two
02:05 - pieces of food one two okay we're good
02:09 - so now
02:11 - we're good this code is working we can
02:14 - keep moving on so now here's the thing
02:17 - let me add ten pieces of food ten pieces
02:21 - of poison and here we are getting now
02:22 - here's the thing for me one of the
02:25 - magical things about working with
02:28 - steering behaviors and this is really
02:31 - where your creative outcomes could come
02:33 - from is that there can be multiple
02:35 - factors at play this is a very primitive
02:39 - demonstration of that there are two
02:40 - factors at play my level of attraction
02:44 - to green dot my level of attraction to
02:46 - red dots
02:47 - those that level of attraction could be
02:49 - weighted it could be positive it could
02:51 - be negative and those things could
02:53 - change over time and they could be
02:54 - different for different vehicles so what
02:56 - I need to add to this and I'm going to
02:57 - try to evolve the appropriate weights
02:59 - for those two forces but what I need to
03:02 - add to this is not not waiting so let's
03:07 - figure out how we're going to do this
03:08 - and my concept here is that those
03:11 - weights are going to be the objects DNA
03:16 - it's genetic information so I'm going to
03:19 - add a variable called this DNA and I'm
03:22 - going to make that an array and yeah I'm
03:27 - going to this is a little bit if you
03:29 - hear but let's do this I'm going to say
03:31 - this DNA index 0 is a rant there's a
03:35 - random number between negative 5 and 5
03:36 - and this dot DNA index 1 is a random
03:40 - number between negative 5 and 5 okay
03:43 - what's really good about this so now the
03:46 - idea here is the other thing that I
03:48 - really think that I need to do is I
03:54 - think what I want so there's a little
03:56 - bit awkward here is that it's not
03:58 - awkward but I think it's an improvement
03:59 - that I need to make on this is that I
04:01 - really should just use yeah let's use
04:06 - another function I just might not be
04:08 - unnecessary but this might not be
04:10 - necessary but I'm going to I'm going to
04:17 - say apply I'm going to call this apply
04:19 - I'm just call this behaviour I don't
04:23 - like what I'm doing I'm just think about
04:24 - it
04:25 - do we really want another function yeah
04:27 - I'll talk this through for a second
04:29 - because what I could do is I could apply
04:33 - the weight right here I kind of liked
04:38 - the idea of having a separate function
04:39 - and this just returns this returns the
04:43 - steering force and then I'm going to do
04:45 - the weight somewhere else that's what
04:46 - I'm going to do this might not be
04:48 - necessary but I'm going to write another
04:50 - function called behaviors and the idea
04:55 - here let me just sort of sketch this out
04:57 - is I'm going to say this dot food ste
05:02 - I'm going to call it food steer equals
05:05 - something I know there's no this sorry
05:08 - VAR food skier equals something VAR
05:11 - poison steer equals something I want to
05:15 - get what's the steering force for food
05:18 - and poison then I want to say food steer
05:25 - multiply this DNA zero poison steer dot
05:34 - multiply this DNA index one so the idea
05:40 - and then I want to say this dot apply
05:42 - force food steer and that should say
05:47 - apply can you see that code yes you can
05:49 - and this dot apply force poison steer
05:53 - the idea here is and again I don't
05:56 - necessarily need a whole separate
05:57 - function for this but this to me is the
05:59 - magic of working with steering makers
06:00 - imagine if the thing you invent is so
06:02 - much more complex that there are all of
06:05 - these different forces at play in the
06:07 - system that it could cause it to do
06:10 - something at any given moment and
06:11 - they're all weighted differently so I
06:13 - want a function where I calculate all
06:15 - the different steering forces I wait all
06:17 - of them and then I apply all them I can
06:19 - sort of see it in one place so what goes
06:21 - here well honestly what I want to do is
06:23 - I want that to be this eat the food and
06:28 - this dot eat the poison and I'm going to
06:35 - zoom back out here so
06:37 - I need to change the way to eat function
06:39 - works to return the appropriate vector
06:42 - the appropriate force rather than use it
06:44 - there but that and I actually probably
06:47 - should honestly you know how to do I'm
06:50 - going to say good bad I'm gonna give
06:52 - this arguments good bad and then I can
06:57 - also say is fine I'm going to say steer
06:59 - G steer B I'm just going to make this
07:03 - more generic just to you know make these
07:06 - variable names different so because you
07:09 - know you could imagine having different
07:12 - lists doing different things okay so now
07:14 - that I have this that would change the
07:17 - main code to say instead here vehicle
07:24 - behaviors food comma poison the ideas
07:29 - there's one function it gets the food in
07:31 - the poison and it does the stuff in it
07:34 - so let's come refactoring here so now
07:37 - the each function each function here
07:41 - should say return this dot seek so what
07:46 - I want to do is I want to return the
07:49 - vector that comes out of seeking how the
07:51 - seek function doesn't do that so but if
07:54 - if it finds something that it should
07:56 - seek return it if it doesn't I'm just
08:00 - going to say this is rather inefficient
08:03 - but I'm just gonna say return a zero
08:05 - vector
08:06 - so if it's seeking something return that
08:09 - otherwise return a 0 vector if there's
08:11 - no food there's no poison Lehrer vector
08:14 - ok now this function now should instead
08:20 - of applying the force just return the
08:24 - steering force so I altered this I again
08:27 - I'm sure if I thought about this even
08:29 - more or you probably have your own idea
08:31 - of a different way of organizing this
08:32 - but there's this kind of chaining
08:34 - happening here the first thing that
08:36 - happens is this behaviorist function
08:38 - gets called then I say eat this good
08:42 - stuff and what that function does is it
08:45 - runs through this eat algorithm and
08:46 - returns the result of a vector
08:50 - from calculated from the steering force
08:52 - for the closest thing so eat behaviors
08:55 - triggers eat twice and eat triggers seek
08:58 - and then what's returned from seek comes
09:01 - back to eat and get to return back up
09:03 - here okay so now if I run this and let's
09:07 - just make the weights let's make the DNA
09:11 - just for the sake of argument now 1
09:14 - comma 1 so I should see now that up air
09:20 - poison poison is not defined sketch line
09:23 - 37 because I like to spell poison wrong
09:28 - apparently all the time plus soul poison
09:31 - fish ok so now we should see that it's
09:35 - the same thing was doing before however
09:37 - now if I were to go into the vehicle and
09:40 - say a negative one we should see that it
09:46 - is attracted to let's see this is not
09:50 - optimal we're going to emit it's kind of
09:53 - working but it's it could be that it's
09:55 - so repel right right now it's so
09:57 - repelled by by the poison that it might
10:01 - not be able to actually get find a green
10:03 - thing so we're going to I would evolve
10:05 - it to work out all this stuff pretty
10:06 - well but I think we're in kind of good
10:10 - shape here I'm going to make this a
10:11 - little bit bigger so we can easier to
10:15 - sort of look at and track it ok now
10:16 - let's go back to doing this 5 comma
10:20 - negative 5 and let's run it again so I
10:23 - don't know what weights it has oh oh
10:27 - that's actually I do know what it has
10:28 - let's make it random that's what I meant
10:31 - to do so one thing that I think would be
10:36 - useful is to visualize those weights so
10:41 - that I have an understanding of what it
10:43 - thinks it's doing you can see right now
10:44 - it's eating all the red stuff okay here
10:48 - we are
10:48 - so what I want to add now is I want to
10:52 - visualize those weights so we can see
10:54 - and we can see what's going on so I'm
10:56 - going to go just to the D this shouldn't
10:58 - be too hard of a thing to do because I
11:00 - have this nice display functional
11:03 - and the display function is drawing this
11:05 - triangle and it's rotating the triangle
11:07 - based on an angle in the direction that
11:11 - it's moving so what I want to do let's
11:13 - just see what happens if right here if I
11:15 - add after after the triangle is drawn if
11:18 - I add a line from 0 0 100 0 100 0 and I
11:25 - say stroke 255 okay so you can see
11:30 - there's a line pointing out to the right
11:32 - so I want the line to point out to the
11:35 - front so I'll say from 0 0 to 0 100 now
11:41 - it's pointing out to the back that's
11:42 - fine so what I want to do is actually
11:44 - have this DNA index 0 dot sorry DNA
11:53 - index 0 times let's just multiply it by
11:58 - 10 so between 0 and 50 long and then I
12:01 - want to draw another one index 1 and
12:04 - this if it's I have it in reverse I
12:08 - guess for whatever reason so if it's
12:10 - positive it should be pointing to the
12:12 - front so I should make this negative and
12:14 - so this one DNA 0 is for green dots and
12:20 - DNA index 1 is for red dots so now we
12:24 - should see visually uh okay this DNA the
12:29 - stump is stuck
12:31 - it's not DNA let's run this again okay
12:35 - so we can see here and maybe if I do
12:39 - this randomly a bunch of times maybe
12:42 - between I should multiply it by 20 so
12:45 - that's a bit bigger and you know what I
12:49 - might actually do in fact is draw this
12:51 - before the triangle so it might actually
12:56 - be a bit more effective whoa and then
12:59 - now I should say a stroke 255 let's get
13:04 - the or whatever it is so let's try that
13:09 - okay so we can see and we do this again
13:15 - there we go so now we can see this looks
13:17 - like one that's pretty optimal right it
13:20 - should be attracted to green and not
13:22 - attracted to red but it didn't really do
13:27 - a very good job so now we need to try to
13:28 - evolve this thing we need to evolve what
13:31 - might be some optimal ways what are some
13:37 - steps ok well first of all oh boy let's
13:39 - add a few more things before we get to
13:40 - part three remember one is let's add a
13:43 - bunch of these vehicles so let's go here
13:46 - to the main program instead of having a
13:48 - single variable called vehicle I'm going
13:50 - to say vehicles equals an array then I'm
13:53 - going to say VAR I equals zero I is less
13:56 - than ten because I'm just making ten of
13:58 - everything let's let's create vehicles
14:04 - index I is a new vehicle and what I can
14:07 - also do is give the vehicles random
14:10 - locations to start start at so this year
14:14 - now I should know oh and then here what
14:17 - do I need to do here I need for this to
14:19 - go through and up call these functions
14:21 - on all vehicles so this is a really
14:23 - quick thing just to add an array and we
14:29 - can get rid of this now and run this
14:31 - again and what do I have vehicle is not
14:34 - defined right because this should be
14:35 - vehicles index I vehicles and decide
14:38 - vehicles index I so I'm looping through
14:40 - and calling these functions on all of
14:41 - the vehicles and we can see there's a
14:43 - whole bunch and we could sort of say
14:45 - some of them are doing well so they're
14:47 - not doing well that sort of thing so now
14:49 - let's add something else to this I would
14:52 - like the vehicle as I said earlier the
14:56 - primary mechanic here is health so as
14:59 - they eat the red dot the green dots we
15:01 - should increase their health as they eat
15:03 - the poison not they should decrease
15:05 - their notes
15:05 - so let's now add that to the vehicles so
15:11 - I'm going to add a variable I'm going to
15:12 - call it where are we where are we where
15:15 - are we where are we I'm going to say
15:17 - health this dot health I'm going to give
15:19 - them a health of one so I think it's
15:21 - going to be easiest for me to think
15:22 - about this as their health is some
15:25 - number between zero and one
15:27 - so they have a health of one every frame
15:32 - let's just say their health goes down by
15:36 - a little bit let's just say I don't know
15:38 - what's going to be a good number but
15:40 - every time through update they lose a
15:41 - little bit of health now also when
15:46 - they're eating now here's a tricky thing
15:49 - this is the moment here this is the
15:53 - moment this is the moment of a tick I'm
15:58 - looking over there to watch me type that
16:00 - this is the moment of eating but this is
16:02 - a generic function how do I know if
16:05 - they're eating something good or bad so
16:11 - many ways I could approach this I don't
16:13 - know if I don't know if I'm going to
16:13 - love this right now but I'm going to say
16:15 - I'm going to give this I'm going to give
16:17 - this actually you know what I'm going to
16:18 - love this one negative one so when it
16:23 - eats it eats something and it has kind
16:25 - of like is that good or bad and I'm
16:27 - actually going to I'm actually just
16:28 - going to put so every time it eats maybe
16:31 - a piece of good food its health goes up
16:34 - by 0.1 and every time it eats some bad
16:37 - food is to poison its health goes down
16:40 - by negative point five so let's make the
16:43 - the poison really really bad so now what
16:48 - I could do here is say this dot health
16:51 - plus equals and eat should have I'm
16:54 - going to just call this argument
16:56 - nutrition nutritional value this that
16:59 - health plus equals nutrition so now I
17:03 - mean I don't know what we're not going
17:05 - to see anything different here but in
17:07 - theory they've got this Health's that's
17:09 - changing but this is also something I
17:10 - really need to be able to visually see
17:11 - to understand what's going on so how do
17:15 - I do that one thing that I could do is
17:17 - right here right this is where I am
17:19 - setting the color of the of the what is
17:26 - this thing that's a vehicle so there's a
17:30 - function oh boy this is exciting there's
17:33 - a function in p5 and a processing called
17:35 - lerp
17:36 - color lerp is a word that means linear
17:38 - interpolation and just a diagram this
17:40 - for a second if you could imagine red
17:42 - being over here and green being over
17:46 - here you could imagine all the colors
17:48 - that exist in between red and green and
17:52 - if I said maybe zero means all the way
17:55 - red one means all the way green 0.5
17:58 - means somewhere in the middle point
17:59 - seven five beans over here this is
18:01 - perfect because I have this house when
18:03 - it's zero it should be red when it's
18:05 - green when what it's health is one it
18:07 - should be fully green so the alert color
18:09 - function if I give it two colors and a
18:12 - percentage it's going to give me that
18:13 - color somewhere in the middle so I'm
18:16 - going to come over here and I'm going to
18:18 - say var gr4 green equals color zero two
18:24 - is probably better way for me to do this
18:26 - but Rd for red is color to 5500
18:31 - and now I'm going to say var the actual
18:34 - color is lerp color between red and
18:38 - green and this dot health so this should
18:45 - now give me a color in between I
18:47 - couldn't put these directly in here I'm
18:49 - just putting in two separate variables
18:50 - to make it more legible but I am now
18:52 - giving myself a color somewhere between
18:55 - red and green so now I'm going to say
18:58 - fill by the color stroke by the color
19:03 - and now I'm going to run this and we
19:06 - should see they're all green that one's
19:08 - red slowly over time you can see how
19:10 - they're turning red as I eat the poison
19:12 - there we go
19:13 - okay so here's the thing let's just do
19:17 - one more thing before part three what I
19:20 - need to do is I need to say like well
19:22 - what if it what if its health goes all
19:24 - the way down to zero I've got to
19:25 - eliminate it from the world
19:27 - it died so to speak so I'm going to
19:29 - write a function this dead equals
19:32 - function and I'm going to say return I
19:36 - never write code like this but I'm going
19:38 - to do it this dot health is less than
19:40 - zero what this means is this is a
19:42 - boolean expression I could say if this
19:44 - dot health is less than 0 return true
19:48 - but I don't need to say that because
19:49 - this side health less than zero
19:51 - evaluates itself to true or false so
19:53 - return the result of this boolean
19:56 - expression is it less than zero return
19:57 - true if it's not less than zero return
19:59 - false because less than zero true it's
20:02 - dead and then what I'm going to do here
20:04 - in the sketch is I'm going to say if
20:08 - vehicles index I dead vehicles dot
20:15 - splice I comma one so this is me saying
20:19 - if the vehicle health has gone less than
20:23 - zero delete it from the array it's gone
20:25 - from the world it shall live no more a
20:29 - little bit of a problem here which is I
20:31 - have to talk about this from so many
20:33 - different coding challenges in various
20:34 - videos but if I'm going through an array
20:37 - and picking things out of the array as I
20:41 - enter eight through it things start
20:42 - shifting around and I could skip stuff
20:44 - I've got a little bit of an issue here
20:45 - one way to solve this problem is to go
20:47 - through the array backwards I will try
20:49 - to remember in this video's description
20:50 - to link to a video where I actually go
20:52 - through this in detail wipe and there's
20:55 - other solutions to this problem but I'm
20:57 - going to just start at the end of the
20:58 - array go all the way down to zero and
21:00 - say I - - and now let's watch this go so
21:05 - we should see does anyone survive
21:08 - everything died let's just do something
21:12 - I'm going to do a couple things just
21:13 - till I kind of make this look I'm going
21:14 - to make the vehicles a little bit
21:15 - smaller and I'm also going to add a
21:20 - great deal more health I mean food and
21:23 - add 50 food and only ten poison and
21:25 - let's just see how if any of them do
21:28 - particularly well and kind of live now
21:30 - one thing is the food is going to run
21:32 - out but you can see that one's doing
21:35 - pretty well it died
21:36 - okay so we were close let's add one more
21:39 - thing let's add one more thing before
21:40 - part three let's at least every so often
21:44 - add some more food so I'm going to say
21:47 - if random one if I pick a random number
21:49 - and it's less than 0.05 so five percent
21:52 - of the time
21:53 - let's do the thing where I add a new
21:56 - piece of food and I could put that in a
21:58 - separate function so every so often I'm
22:01 - going to add a new
22:01 - piece of food so there's always new food
22:03 - for these things to eat okay come on so
22:07 - you can see this one has survived so
22:10 - this one and I had some evolution
22:12 - excited for it like go go eat all the
22:15 - food don't die gives it enough so it
22:17 - might need like for itself to go down a
22:19 - little bit less or for the food to
22:21 - actually have a greater nutritional
22:22 - value but you can see this I think we
22:26 - need to tune this a little bit but good
22:29 - enough for now okay so we're close we've
22:32 - got this whole system now we are we have
22:35 - a bunch of vehicles they all get random
22:38 - weights attraction or repulsion and some
22:41 - of them seem to do better but how could
22:42 - I really evolve over time to get the
22:44 - optimal weights and I also need to add
22:46 - I'm going to add another property to
22:48 - these vehicles to make the evolution a
22:50 - bit more interesting and that property
22:52 - which you could do try to add this
22:53 - yourself is how far away can actually
22:57 - see a piece of food what if it ignores
22:59 - food unless it's within a certain
23:01 - distance of site and it ignores poison
23:04 - unless it's within a certain distance of
23:05 - site and some are there some optimal and
23:08 - I suspect based on the fact that I've
23:11 - made something like this before that
23:13 - when I see an interesting result there
23:15 - so anyway I'll be back with part three
23:16 - trying to see if you can add that add
23:18 - two more properties which you can think
23:20 - of it as its perception its food
23:22 - perception and it's it's sorry its food
23:25 - perception and it's poison perception
23:26 - and I'll see you in the next video where
23:28 - I actually add that myself because
23:29 - that's what I'm going to do right now
23:30 - tip for you it's I don't know if could
23:32 - be right now or not or whatever but okay
23:33 - see you soon
23:35 - [Music]