00:00 - (dinging)
00:01 - - Hello, this is another video,
00:03 - which is a tutorial about working with
00:05 - git and GitHub, and in this tutorial,
00:07 - I'm going to talk about remotes. (laughs)
00:11 - So, I'm in the middle of livestreaming
00:14 - and I'm working on this project
00:16 - that has to do with
this Flappy Bird clone,
00:18 - and I'm going to train a bot
using a genetic algorithm
00:22 - and a neural network to play Flappy Bird,
00:24 - and I have a wonderful pull request
00:27 - from GitHub user KeeghanM,
00:30 - who has added this particular image
00:34 - to be the Flappy Bird, and
this particular background
00:37 - to be the background of
the Flappy Bird game.
00:40 - I really want to accept this pull request,
00:42 - but what I want to do,
and I can examine it
00:44 - through the GitHub interface,
00:46 - I can see, ah, this was deleted
00:48 - and this was added 'cause now
00:49 - it's going to have an image,
00:50 - and there's an icon variable
which loads the image.
00:54 - Those are some wonderful things like that
00:57 - that I want to accept,
00:58 - but I don't have any unit testing,
01:01 - and this isn't hosted anywhere,
01:04 - so I want to actually really look at it
01:05 - locally on my computer to run the code
01:09 - and sort of see before I merge it.
01:11 - There's a variety of ways
that this can be done
01:14 - more efficiently than what I'm going to
01:15 - show you right now, but this is
01:16 - a good excuse to talk about remotes.
01:19 - What is a remote?
01:20 - So right now, my terminal window,
01:22 - which I want to make a little bit bigger,
01:25 - is in the directory of this project.
01:28 - I am on the desktop, Flappy Bird Clone.
01:30 - If I say git remote, that will
01:33 - run this command, dash
V, dash V for verbose,
01:36 - like I want to know as much as possible.
01:37 - I want to be very
verbose about the remote.
01:40 - It's going to say oh
look, you have a remote
01:43 - that is named origin that is tied to
01:46 - this URL, and that makes sense.
01:48 - That's my GitHub URL,
CodingTrain/Flappy-Bird-Clone.
01:52 - That's the GitHub repository.
01:54 - This remote was automatically created
01:56 - because at some point in time I said
01:58 - git clone and I put this in.
02:03 - When I did this, this
default remote was created,
02:06 - so the remote being another location
02:09 - where this git repository exists.
02:13 - The word origin is kind
of a default convention
02:16 - for the original remote,
sort of canonical remote
02:21 - being GitHub in this case,
but it's just a made up thing.
02:25 - I can say git remote,
and I do this actually
02:27 - with a lot of projects, I can say
02:28 - git remote delete, I think, origin.
02:32 - Nope, git remote remove origin, yes.
02:37 - Now if I say git remote -v,
02:40 - there's no more remotes, but I could say
02:42 - git remote add and instead
of calling it origin,
02:45 - why not call it GitHub or unicorn?
02:48 - I can call it anything I want.
02:49 - Let's call it GitHub
and then I can paste in
02:55 - Flappy Bird Clone, I'm just going to
02:57 - grab this URL here and I
can paste this in here.
03:00 - Now I am adding this remote and I can say
03:03 - git remote -v again, and we can see
03:05 - there it is back but
it's now called GitHub,
03:08 - so if I ever say git pull origin master
03:12 - to grab some changes, master by the way
03:15 - is this name of the core branches,
03:18 - also just a completely made up thing.
03:20 - I can could have source branch or
03:21 - release branch or development branch
03:23 - or experimental branch.
03:24 - That's a separate video about branches
03:26 - that you can go and watch,
03:27 - but if I say this, it'll say ah,
03:29 - origin doesn't appear to to be
03:31 - a git repository because it's not there,
03:34 - but I can now say git pull GitHub master
03:38 - and, there we go.
03:41 - Now I'm already up to date, so
03:42 - I don't have to worry about it.
03:44 - Here's the thing, I want, let's go
03:46 - back to this pull request which is
03:48 - once again from KeeghanM.
03:52 - So where is KeeghanM's, we can see here,
03:55 - ah, KeeghanM:graphics, so KeeghanM
03:59 - made these code changes in a branch
04:03 - called graphics in
their GitHub repository.
04:06 - One thing I'm going to
do is I'm just going to
04:08 - copy paste this right here,
04:09 - there's probably a way I can go in to it
04:11 - and I'm going to go up to the URL
04:12 - and I'm going to change
coding train to KeeghanM.
04:15 - I'm going to get rid of the pull address.
04:17 - I just want to go over there and see that
04:19 - this is the fork of the repository.
04:23 - There we can see this is KeeghanM's fork.
04:26 - We can see branch master,
we can see branch graphics.
04:29 - I can start looking around.
04:30 - Now what I'm going to do is I'm going to
04:32 - go to clone and I'm going to grab this.
04:34 - I'm now going to grab KeeghanM's fork
04:38 - of my Flappy Bird clone,
I'm going to grab that
04:41 - and I'm going to say
git remote add Keeghan,
04:47 - I can make up anything here.
04:49 - I'm just going to say Keeghan 'cause
04:50 - I think I can remember
that, and I'm going to
04:53 - then paste in that
particular URL for KeeghanM.
04:57 - One thing you might notice,
04:58 - these URLs say git@github.com.
05:01 - You might actually, and this is because
05:03 - I have set up this very fancy way
05:06 - for my computer to be auto logged in
05:08 - with an SSH key and a passphrase,
05:11 - but if you don't have that set up
05:12 - and I should do a video tutorial
05:14 - that explains how to do that, you might
05:16 - want to use HTTPS, this is also a way,
05:20 - this is just the sort of standard URL
05:22 - without having the sort of secret keys
05:25 - that log you in automatically,
05:26 - but that's a little bit of an aside here.
05:28 - I'm going to add this remote, and now
05:31 - I'm going to say git remote -v
05:32 - and we can see, look at this,
05:34 - I have GitHub remote which is tied to
05:37 - me at CodingTrain, I
have Keeghan's remote,
05:39 - which is tied to KeeghanM, which is
05:42 - tied to the GitHub repository KeeghanM.
05:44 - Now I'm going to say, there's a lot
05:46 - of different things I can
do, but what I'm going to do
05:48 - is I'm just going to
say git branch graphics.
05:51 - I'm going to make a branch
locally called graphics
05:54 - and I'm going to quickly
go into that branch.
05:56 - Again, you should probably watch
05:58 - my branches tutorial about how this works.
05:59 - I'm going to go into that
branch by using checkout.
06:02 - Then what I'm going to
do is I'm going to say
06:04 - git pull, and usually I
almost reflectively just
06:07 - git pull origin master,
git pull origin master,
06:09 - git pull origin master,
git pull origin master,
06:10 - git pull origin master, but I don't want
06:13 - to pull from origin, I
want to pull from Keeghan.
06:15 - I don't want to pull from master,
06:17 - I want to pull from graphics.
06:19 - Git pull Keeghan graphics.
06:21 - Ah, ooh, interesting, hmm.
06:25 - So something has happened here in that
06:28 - I have now been launched
into a text editor
06:32 - known as VI, whoa, this has been like
06:35 - way off the screen, that's
what's going on here.
06:37 - That's crazy, and so there's some sort of
06:40 - merging that needs to happen for
06:43 - KeeghanM's branch graphics to come into
06:46 - my branch graphics, because I had
06:47 - actually made some other changes.
06:49 - It would have been nice
if this didn't happen,
06:51 - but this is actually quite normal,
06:53 - this is a regular thing, and
I have to deal with this.
06:56 - What I want to do is say that,
06:59 - I'm going to say, what do I type in VI?
07:03 - (laughs) This always happens to me.
07:07 - I think I say :insert, no.
07:12 - I for insert, I for insert.
07:17 - Again, you can link a
different text editor
07:20 - to your git work on your computer,
07:23 - but this is, now that I've been launching
07:25 - this text editor, I just want to say
07:29 - I'm making a tutorial
video so I don't have
07:35 - a lot of time but this is here to merge
07:42 - Keeghan's graphics with
some recent changes I made.
07:49 - Then I'm going to say colon, whoops,
07:53 - I got to get rid of insert, escape maybe?
07:56 - Escape, :qw, which I think will then
08:00 - quit and write this out, I don't
08:02 - really know how to use VI. (laughs)
08:05 - Whatever I meant to call it, :qw
08:09 - and I'm going to just do that,
no, not an editor command.
08:13 - :wq, write and then quit?
08:16 - There we go, and now it's fine.
08:20 - It didn't commit it, that's fine.
08:21 - Now this is good, I just really
08:23 - wanted to look at it, all I wanted to do
08:24 - is look at it, I don't need to commit this
08:27 - right now because I'm not
really worrying about merging.
08:28 - Now I should, if I come over here,
08:30 - this is me looking at
my code in the browser
08:33 - before I checked out and pulled
08:35 - from that other remote and there we go.
08:38 - Look at this, and now
we have the CodingTrain,
08:42 - Flappy Bird, Flappy CodingTrain game
08:44 - with our little unicorn train
and the scrolling background.
08:50 - Okay, wonderful, so this is good.
08:52 - Now I feel, I'm like oh,
this looks great, I'm done.
08:55 - Interestingly enough, if I wanted to,
08:58 - I could actually merge everything
09:00 - right now from the command line.
09:02 - Normally I would just
go to the pull request
09:07 - and I would scroll down here and I would
09:09 - just click on merge and this would
09:11 - merge that pull request.
09:12 - In fact I can write a comment,
09:14 - thank you so much, I
am going to merge this.
09:18 - What's wonderful about
using GitHub as a service,
09:22 - which is very different from
the git software itself,
09:25 - the version control software, is that
09:27 - it provides a visual interface
09:29 - to a lot of the common things that
09:30 - you might want to do like merging
09:32 - and looking at the differences between
09:34 - two files and that sort of thing.
09:38 - But I think while I'm here, if you can
09:39 - tolerate to continue to watch this video,
09:44 - however I am going to demonstrate
09:50 - merging from the command line for a fun,
09:55 - so stay tuned.
10:00 - I'm going to add that comment,
so I added that comment
10:03 - and now I'm going to
return to the command line.
10:04 - I should say that something about
10:08 - the way, I really need to make a video
10:10 - about setting up terminal or
10:13 - whatever you use as your
terminal application
10:16 - to work with git more effectively
10:19 - because there's no
reason why I couldn't see
10:21 - things being syntax highlighted
10:23 - or showing me what branch I'm currently on
10:25 - and there's also like
other terminal software
10:27 - like iTerm that I can use,
10:29 - so I've got to come back for that,
10:30 - but right now I don't even remember
10:33 - where I am, so I'm going to say git status
10:36 - and I'm going to say
okay, all conflicts fixed
10:38 - but you are still merging.
10:41 - I didn't actually ultimately commit
10:44 - that merge that I did, so
I'm going to say git commit.
10:48 - Here's the thing, I have learned recently
10:50 - that using -m is not as thoughtful,
10:57 - I'm going to do a video about how to
11:00 - not use -m and write more thoughtful,
11:02 - longer commit messages,
but for lack of the time
11:04 - right now, I'm just going to say commit -m
11:07 - and I'm going to say merging changes from
11:11 - and I'm going to want
to remember KeeghanM,
11:19 - from KeeghanM, okay I'm going to do that.
11:28 - I'm going to say git status again.
11:31 - On branch graphics, so now
I'm going to go to master,
11:37 - and what I'm going to
do is I'm going to say
11:39 - git merge graphics and
what that will do is
11:42 - it'll take the graphics branch
and merge it into master.
11:45 - It's exactly the same thing that
11:47 - would happen if I
pressed this button here,
11:49 - which would merge
KeeghanM:graphics into master.
11:54 - I'm just going to do that
from the command line.
11:56 - Git merge graphics, okay.
12:04 - Here we go.
12:07 - I'm getting some good feedback in the chat
12:08 - of other things to mention.
12:10 - Yay, okay, it's merged and now
12:13 - I can say git status, I'm going to say
12:16 - git status, I type git
status all the time.
12:19 - One branch master, nothing to commit,
12:21 - working directory clean, alright.
12:23 - So now let me put these
changes back, right?
12:26 - They're here on master
but they are not here.
12:30 - If I go here, we'll see
what's the latest commit?
12:33 - It's still something else
that I was working on.
12:35 - I'm going to now say git push,
12:39 - I'm not going to say origin,
I'm not going to say origin,
12:41 - because I renamed it to GitHub, master.
12:45 - If I do that, now I have sent that up.
12:51 - I'm going to hit refresh here
12:55 - and I'm going to see,
look, all of those changes
12:56 - from KeeghanM are now here.
12:58 - We can see they're here
back on version three.
13:00 - This was me merging, this was me
13:02 - correcting the mistake, this was
13:04 - some other stuff, some other stuff.
13:06 - We can see all of that is here.
13:07 - Now the real question is
if I go into pull requests,
13:11 - look at this, where is that pull request?
13:14 - It's not there anymore.
13:16 - GitHub is smart enough to realize that
13:19 - I merged this via the command line.
13:25 - The merge button is gone
and it is now in closed.
13:29 - Wonderful, so hopefully
you learned something
13:31 - a little bit about git remotes and
13:34 - about merging in this video tutorial.
13:37 - Thanks for watching and I will come back
13:39 - and make many more of these working with
13:41 - git and GitHub open
source tutorial thingies.
13:43 - Thank you. (dinging)
13:45 - (upbeat music)