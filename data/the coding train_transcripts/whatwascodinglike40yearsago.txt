00:00 - This video is brought to
you by Nebula Classes.
00:05 - Hello, and welcome to a very
special coding challenge
00:08 - right here on The Coding Train.
00:10 - Now, I'm not sure when
you're watching this.
00:12 - If I had to guess, it's
probably, maybe, 40 years or so
00:15 - into the future.
00:16 - I'm going to attempt to
program my most popular coding
00:20 - challenge ever on this Apple II
Plus computer in Apple Basic.
00:25 - Now, if you've never programmed
in Basic before, don't worry.
00:27 - I'm going to show you all you
need to know, step by step,
00:30 - as I attempt to make this game.
00:32 - Let's get started.
00:33 - (SINGING) Coding together.
00:36 - We'll always be best
friends forever.
00:39 - I'll be there whenever.
00:42 - If you feel down, then
I'll make it better.
00:46 - No one can measure
the for loop we have--
00:50 - the joy, the pleasure.
00:52 - So let's go to
enjoy the weather.
00:55 - These are the days
I'll always treasure.
00:58 - [MUSIC PLAYING]
01:09 - Oh, baby, we're coding together.
01:13 - We'll always be best
friends forever.
01:16 - Coding together.
01:20 - Coding together.
01:29 - OK.
01:30 - The jig is up.
01:31 - These are fake glasses.
01:32 - There's no prescription
lenses in them.
01:35 - I can't see a thing.
01:36 - I'm putting on my
real glasses, OK?
01:38 - Today is-- shoot.
01:39 - This Casio watch doesn't tell
me the correct time or date.
01:42 - It's August 2022.
01:44 - Here I am.
01:44 - This is my childhood
Apple II Plus computer.
01:47 - Let's get started
looking at Basic code.
01:49 - So the first thing
I want to show
01:51 - you is that just at
the command prompt,
01:52 - with that blinking cursor, I
can type code, like Print--
01:55 - [KEYBOARD CLACKING]
01:56 - Oh, listen to that
beautiful keyboard--
01:58 - "Hello, world!"
01:59 - I can also put a line
of code in a program
02:03 - by writing a line number.
02:04 - That's right.
02:05 - I actually have to specify
a line number, like line 10.
02:10 - No text editor for me with
automated line numbers and all
02:14 - that fancy future
stuff that you have.
02:17 - Now, I can type List, and I can
see the contents of my program.
02:22 - I can type Run, and I
can run the program.
02:24 - It prints out Hello, world!
02:26 - I can even add
another line of code--
02:27 - one of my favorite
commands ever--
02:29 - GoTo 10.
02:32 - I can put that at line 20.
02:33 - Type Home to clear the screen,
List, run this program.
02:37 - And here we go.
02:38 - It's going to
print Hello, world!
02:40 - forever and ever until I turn
the computer off and turn it
02:46 - back on.
02:46 - [BEEP]
02:47 - Oh, beautiful beep.
02:48 - So there's a lot more to
Basic, of course, than that.
02:50 - I've got an entire manual here.
02:52 - I'd love to do a lot
of videos about this.
02:54 - So if you like this one,
let me know in the comments
02:57 - that you'd like to see
more Apple II videos.
02:59 - But let's see how far
I can get showing you
03:01 - everything that
there is to know--
03:03 - or that I know--
about AppleSoft Basic
03:05 - just by making the Snake game.
03:06 - Now, one of the things I
would find in this manual
03:09 - is the fact that there
is a graphics mode.
03:11 - And I think if I type G-R, it's
going to enter graphics mode.
03:14 - That was kind of cool.
03:15 - And there's even
HGR, which will enter
03:17 - a high-resolution graphics mode.
03:19 - Maybe that's for another time.
03:20 - Today, I'm going to
try to make Snake just
03:24 - by printing characters
to specific locations
03:26 - on the screen and
animating them.
03:28 - So the first thing
I want to do--
03:31 - oo, I've got to exit
that graphics mode.
03:34 - Plot, PDL, Text-- ah.
03:35 - I think I just type Text.
03:39 - And I'm back in text mode.
03:40 - OK.
03:41 - I don't need Google!
03:42 - I have a manual.
03:43 - Take that, future programmers.
03:45 - So I'm actually going to
start my program on line 10
03:49 - with Home.
03:50 - So whenever I run it, it will
start by clearing the screen.
03:53 - I also want to keep track
of the data associated
03:56 - with the Snake program, the
width and height of my canvas--
04:00 - if you will-- as well
as the x and y position
04:02 - of the snake itself
and the piece of food
04:05 - that it's trying to eat.
04:06 - So I need some variables.
04:10 - This happens to be
a 40 by 24 display.
04:15 - And Let W equal 40, that's
me creating a variable,
04:19 - assigning it the value of 40.
04:20 - And I can actually also
say Let H equal 24.
04:24 - So I can put two lines of
code, essentially, in one
04:26 - by joining them with a colon.
04:28 - And we can take a
look at the program.
04:30 - And we see what I've got so far.
04:31 - Now, it's important
here that I'm
04:33 - leaving space between line 10
and line 20 because guess what?
04:37 - If I want to put a line
of code in between those,
04:39 - I got no copy-paste.
04:40 - I got no move things
around, no edit.
04:42 - I would have to actually
type in a new line of code.
04:45 - And now, I could only put--
04:46 - 1, 2, 3, 4, 5, 6, 7,
8, 9-- lines of code
04:49 - in between 10 and 20.
04:50 - So far, I don't need that.
04:51 - Let's start with the
snake's x position.
04:55 - So I'll just say x--
04:56 - and in the middle
of the screen--
05:00 - y.
05:01 - OK.
05:01 - Then, how do I place a character
at a particular location?
05:07 - I could look it
up in the manual.
05:08 - But I happen to know
the commands are
05:10 - HTab and VTab for horizontal
and vertical position.
05:17 - And then, I can just say
Print, and let's use S.
05:20 - And let's just quickly
say GoTo 40 on line 60,
05:25 - so that the program keeps
running-- kind of like a draw
05:27 - loop, if you will.
05:28 - [DING]
05:31 - And there we go
I've got an S right
05:33 - in the middle of the screen.
05:35 - And I can hit Control-C to quit
out of the program at line 60.
05:41 - Next thing I would like
to do is animate S. So
05:43 - instead of just printing
it out at one location,
05:46 - I want to increment the value
of x and print it again.
05:48 - Increment the value of
x and print it again.
05:50 - Or actually, y or decrement
based on keyboard interaction.
05:54 - Now, I'm noticing that I only
have left and right arrows.
05:57 - There's no up and down
arrow on this keyboard.
05:59 - So let's use W for up,
S for down, A for left,
06:03 - D for to the right.
06:05 - I need to handle the
keyboard interaction.
06:07 - Ah ha.
06:08 - I would like to have a
separate function that
06:10 - takes care of reading
input from the keyboard,
06:13 - and then changing the values of
x and y based on whatever input
06:16 - it's getting from the keyboard.
06:18 - How do I write a function?
06:19 - Well, another word that I
could use is subroutine.
06:23 - And in fact, that's exactly
what I'm going to do.
06:25 - And if you think you
liked the GoTo command,
06:27 - well, I have news for you.
06:29 - There's another command which
I love even more called GoSub,
06:33 - or Go Subroutine.
06:35 - So I'm actually going
to just wipe out line 60
06:37 - and say go GoSub
some line number far,
06:40 - far away that I can't mess
up with the lines of code
06:42 - that I'm writing right now--
06:44 - let's say 1,000.
06:45 - Then, I'll add my GoTo
line 40 back at line 70.
06:51 - Now, I need to write my
subroutine, my function,
06:53 - at line 1,000.
06:55 - What do I do?
06:56 - I need to write a line of
code to tell me what key was
07:00 - pressed last on the keyboard.
07:01 - And that information
is sitting somewhere
07:04 - in the computer's memory.
07:06 - And if only I could get access
to the computer's memory.
07:08 - I know it's in this manual here.
07:10 - But it's also-- come with me.
07:13 - It's also over here
on this poster--
07:15 - Peeks, Pokes, and Pointers.
07:17 - If I want to read the
computer's memory directly,
07:21 - I can just peek into the memory.
07:23 - If I want to write to
the computer's memory,
07:26 - I can poke the memory.
07:28 - We have direct access to
the computer's memory.
07:30 - And somewhere on
here, it's going
07:32 - to tell me that to
read the keyboard,
07:34 - I need to look at
memory address 49152.
07:38 - So I'm going to
put in a variable,
07:40 - let's call it K. Peek--
07:43 - let's peek at memory
address 49152.
07:47 - Then, just for
debugging purposes
07:50 - let's print that value out.
07:51 - And then, when the
subroutine has finished,
07:54 - we need to return back to where
we were previously in the code.
07:57 - That's line 70.
07:58 - And the way we do
that is with Return.
08:03 - Let's take a look at
the whole program again.
08:05 - And let's give it a run.
08:08 - So the last key pressed was 13.
08:10 - I'm not sure what I pressed
to get the value of 13.
08:12 - But let's see what W is--
08:13 - 215.
08:15 - S is 211.
08:17 - 196 is D. 193 is A. So on line
10 I'm going to query If K is--
08:25 - equals-- and by the way,
this is an if statement.
08:28 - That's how you write an if
statement in Apple Basic.
08:30 - I think 196 was D?
08:34 - Then x equals x plus 1.
08:37 - So let's just only check
for pressing to the right.
08:40 - So I think if I press D--
08:43 - there we go.
08:43 - Whoa!
08:44 - OK.
08:45 - So S's filled the screen.
08:46 - But this is exciting
because this is working.
08:48 - And it did some wrap
around, and then it
08:50 - came to an illegal quantity.
08:51 - We'll deal with some error
handling in a moment.
08:53 - Let's start adding,
now, to the left.
08:58 - I think that was 193?
09:03 - 215 was up, I think.
09:10 - 211, I think, was down.
09:16 - I need my Return.
09:17 - Let's try giving it a run.
09:21 - Look at this.
09:22 - Oh!
09:23 - Whoa!
09:23 - That was fun.
09:24 - OK.
09:24 - Now, it's animating kind
of fast, which is fine.
09:27 - But I would like to be
able to slow it down.
09:28 - I think it's going to be quite
hard for me to play this game
09:31 - with it running so fast.
09:32 - So I think, if memory
serves me correctly,
09:35 - the way that this is
actually typically done
09:37 - is by writing a for
loop that just counts
09:40 - through a bunch of
numbers before it can move
09:42 - on to the next line of code.
09:43 - And you would think that
wouldn't cause much of a delay.
09:45 - But on this computer, it's
quite a nice solution for this.
09:49 - So let's actually, right before
line 70-- where I say GoTo 40--
09:54 - so let's put this at line 65--
09:56 - let's write a for loop.
09:57 - How do I write a for loop?
09:58 - Let's say For N
equals 1 to 100--
10:02 - let's just try running
from 1 to 100--
10:05 - Next N. So nothing will
happen in that for loop.
10:09 - I'm just going to run it.
10:11 - And let's see.
10:13 - And look.
10:14 - Now, it's running a bit slower.
10:16 - And I could sit here and
draw a beautiful spiral.
10:20 - So what else do I need?
10:21 - I need to add some food.
10:22 - And then, I need the snake to
grow when it eats the food.
10:25 - But right now, the snake is just
growing because I'm just seeing
10:28 - all of the S's.
10:29 - What I need to do is clear
the S after I print it.
10:32 - So I could add,
at line 35, Home.
10:36 - And then at 70, I could
say GoTo 35 instead.
10:39 - Let's try that.
10:41 - It actually works fine.
10:42 - I was worried I would have
too much flickering there.
10:45 - And that might become an issue
at some point, in which case,
10:49 - what I would actually
want to do is just
10:50 - print a space over the
old location of the S.
10:53 - But let's see how far we
can get it working just
10:56 - by using Home essentially
as a background-- clear
10:58 - the background.
10:59 - And then, I'm realizing here--
11:02 - hold on.
11:03 - I'm putting my thinking cap on--
11:05 - no wait-- my
thinking glasses on.
11:08 - Ah ha.
11:09 - Let's add an array.
11:11 - So the snake, instead
of being one x and y,
11:14 - should actually be a series
of x's and y's, depending
11:18 - on how long the snake is.
11:20 - Now, I don't have the ability
to have a resizable array.
11:23 - I just have a fixed array.
11:24 - But if I ask for, say, 100 or
200 or 1,000 spots in memory--
11:28 - I don't know how
much space I actually
11:30 - can ask for-- then
I can just assume
11:32 - the snake's never going to get
longer than some fixed amount.
11:35 - So let's actually change
line 30 to, instead of Let
11:40 - x, let's say Dim x--
11:42 - Dim for Dimensionality.
11:45 - What is the dimensionality
of the array?
11:47 - And It could be
multiple dimensions.
11:49 - I'm going to stick with
a one-dimensional array.
11:52 - And let's just go with a fixed
length of 100 for right now.
11:56 - So now I have an
array with 100 spots
11:59 - for x and 100 spots for y.
12:01 - Then in line-- running out of
space for my lines of code.
12:04 - Then, let the first
element of the array be 20.
12:08 - And the first element
of the y array be 12.
12:13 - But I don't actually
want to use 1.
12:15 - What I want to use is
what is the current length
12:19 - of the snake?
12:20 - So I need another
variable, which
12:23 - I'll call L. How about
I call it L for Length?
12:27 - So let's put it at line 15.
12:29 - Let L equal 1.
12:32 - Then, what I want
is to say x index L.
12:39 - I probably should have
kept my x and y variable
12:41 - and just put the new
result into the array
12:44 - because now I got to
fix it everywhere else.
12:46 - But I feel good
about doing that.
12:47 - I can do it.
12:48 - I can manage it.
12:48 - It's just typing.
12:51 - And in fact, this
line 40 is going
12:52 - to change soon, as you'll see.
12:55 - But let's just get what
we had before working.
12:57 - [MUSIC PLAYING]
13:07 - Is this the same
program we had before?
13:10 - Let's find out.
13:13 - Looking good.
13:14 - Now, we need to pick a
location for the food
13:18 - that the snake is attempting
to get, and then print that
13:22 - to the screen as well.
13:23 - I'm running out of
lines of code here.
13:25 - So let's write a
subroutine to deal
13:28 - with initializing the food.
13:30 - I'm going to put that
right at line 17.
13:33 - I'm going to say GoSub 2000.
13:35 - So 2000 will be my work
with the food thing.
13:38 - And I can actually put in
comments in my code with R-E-M,
13:42 - Rem, for remark.
13:47 - Then, let's pick a location
for the food exposition.
13:51 - I'll call that Fx.
13:52 - And I need to get
a random value.
13:55 - So I'm going to look in
my manual here, again.
13:58 - R-N-D for random is on page 102.
14:01 - "Returns a random real number
greater than or equal to 0
14:05 - and less than 1."
14:06 - Oh, and it takes
an argument, where
14:08 - if I pass in a number
greater than 0,
14:10 - I get a new random number
each time it was used.
14:12 - This is going to be some
number between 0 and 1,
14:15 - multiply that by the
width, and convert it--
14:19 - oh, no.
14:20 - [LAUGHS]
14:20 - This is not a text editor.
14:22 - And then convert
it to an integer
14:24 - because the food position
can't be a decimal number.
14:28 - I think this is good.
14:32 - Then, the y-position
for the food--
14:37 - OK.
14:38 - Then, Return.
14:40 - So between line 50
and 60, I would now
14:45 - want to print F for the food
at the Fx and Fy location.
14:50 - So let's do that at line 55.
14:58 - Oo.
14:59 - Oh, boy.
14:59 - Something crazy
is going on here.
15:01 - Oh, look at that!
15:03 - HTab Fy-- that's a mistake.
15:06 - You probably noticed that.
15:08 - I did not.
15:09 - VTab.
15:14 - Illegal quantity error in 55.
15:18 - OK.
15:19 - Line 55.
15:21 - Did I just pick a
bad random value?
15:24 - Let's debug this.
15:27 - [MUSIC - "EYE OF THE TIGER"]
15:50 - We can join more than
one thing while we're
15:53 - printing with semicolon.
15:55 - So Print Fx, colon,
space, then Fy.
16:02 - And why are those values 0?
16:04 - Ah!
16:07 - [LAUGHS]
16:08 - I can't believe I missed this.
16:11 - OK, look at this.
16:12 - Line 17-- GoSub 2000.
16:15 - What happens in 2000?
16:17 - Set Fx and y based on a
random number times W.
16:22 - What's the value of W?
16:23 - Well, I am initializing
the value of W on line 20!
16:27 - That's after line 17!
16:29 - All this time!
16:31 - OK.
16:32 - I've got it now.
16:33 - Let's switch those
two lines around.
16:35 - So 17 will be Let W equal 40.
16:39 - Let H equal 24.
16:42 - Line 20 will GoSub 2000.
16:45 - I can get rid of a bunch
of other debugging things
16:48 - I added in there.
16:51 - Clearing the screen, Home, back.
16:53 - And let's go.
16:54 - There we go.
16:55 - I've got my food.
16:56 - See?
16:56 - It's blinking.
16:57 - It's bothering me.
16:58 - The blinking is bothering me.
17:00 - I'm going to get
rid of the Home--
17:03 - clear screen-- at line 35,
which if you'll recall, now
17:07 - I'm seeing the full
trail of the S.
17:10 - Let's take line 40, where I
go to the x and y position
17:15 - and print S, and let's put
that in its own subroutine.
17:21 - Because ultimately,
that's where I'm
17:22 - going to have to do a loop
for the array and everything
17:24 - anyway, so I need to
do that somewhere else.
17:26 - Line 3000.
17:28 - And I don't lead line 50
any more, then, either.
17:31 - So 3000-- what I
should do is say--
17:35 - ah.
17:36 - Ah ha.
17:36 - Wait a second.
17:37 - Wait a second.
17:38 - This go sub 1000,
which moves the snake,
17:42 - should also be part of
what I'm about to do.
17:45 - So let's get rid
of line 60 as well.
17:50 - If I just had what I had before,
I would say HTab x index L,
17:58 - VTab tab y index
L. Then, Print--
18:03 - now, this is a little
bit nuts, but I'm
18:05 - going to print the space because
what I'm going to print first
18:10 - is erasing the previous S. Then
I can go and move the snake
18:18 - based on the keyboard
interaction, which
18:20 - is GoSub 1000.
18:22 - And then, I can
update the location.
18:25 - This will ultimately be a loop--
18:28 - which I'll do a next, Print "S".
18:33 - And 3050 would be Return.
18:37 - OK.
18:37 - So the S is blinking.
18:39 - That's what I want.
18:39 - But notice, the F is not.
18:41 - Now, just to have this
work more properly,
18:44 - instead of doing HTab
x(L), VTab y(L), Print "S",
18:47 - that should be a loop there.
18:49 - Let's have 3025
because I want to add
18:52 - the loop in before that HTab.
18:55 - For I-- I'll use Index, I--
equals 1 to L. Then, 3030
19:00 - needs to be HTab
x(I), VTab y(I).
19:05 - And then, Print "S".
19:07 - And then, 3050 is Next I.
And 3060 would be Return.
19:12 - Now, eventually, the snake
is going to have its older
19:17 - positions in the array.
19:19 - Maybe its recent
position should be always
19:21 - at the end of the array,
and it's oldest position
19:23 - at the beginning of the array.
19:25 - In which case, line 3000
should actually be HTab x(1)--
19:31 - index 1-- because I always
want to erase just the oldest
19:35 - position of the snake.
19:36 - Now, let's figure out if the
snake has eaten the food.
19:40 - Right before I go and do
the keyboard input-- no,
19:44 - right after I do the keyboard
input I'm going to do another
19:48 - subroutine--
19:49 - 4000.
19:51 - And then, I want to say If--
19:52 - well, actually, I only want to
do this subroutine if the snake
19:57 - has gotten the food.
19:58 - So instead of the If
being in the subroutine,
20:00 - let's actually just
say in line 3022
20:04 - If x index L, which would be the
most recent spot for the snake,
20:09 - equals Fx and y index L
equals Fy, then GoSub 4000.
20:19 - And right now at 4000,
let's just say Print "Yum".
20:27 - Let's see if I
can get that food.
20:30 - Yum!
20:32 - OK, so that's working.
20:33 - But instead of printing
yum, what do I want to do?
20:37 - I want to say L equals L plus 1.
20:40 - Then, I need to say the snake's
new L-position is equal to what
20:48 - the most recent position was?
20:51 - L minus 1?
20:58 - Let's try this now.
20:59 - Whoops.
21:00 - No, not Run, there.
21:01 - Return.
21:08 - Oh, yeah.
21:09 - OK.
21:09 - This is good because
now, the snake
21:11 - is off and running
with an extra spot,
21:14 - and I'm not erasing correctly.
21:15 - No problemo.
21:17 - Every frame of animation, I need
to shuffle all of the positions
21:24 - down in the array.
21:26 - All right, I'm looking
at my subroutine 3000.
21:29 - I'm erasing the oldest
spot of the snake.
21:33 - Then, before I go to animate
the snake based on the keyboard,
21:39 - let's slide everything down
in the array, which will
21:42 - be a subroutine at line 5000.
21:46 - I will refactor this later.
21:48 - (SINGING) I will
refactor this later.
21:50 - For I equals 1 to L minus 1.
21:54 - X index I--
21:57 - I plus 1.
22:01 - Y index I equals
y index I plus 1.
22:07 - This is shuffle everything
down in the array.
22:10 - Now, here's the question.
22:12 - When L is 1, is it
going to do this?
22:15 - It shouldn't.
22:16 - But I don't know what this
For loop is going to do with
22:19 - For I equals 1 to 0.
22:21 - So let's say only if L
is greater than 1, then
22:26 - GoSub 5000.
22:27 - Right?
22:28 - I don't want to do this if
L is 1 because this is not
22:33 - going to work.
22:33 - Those values don't exist.
22:36 - OK.
22:36 - That makes more sense.
22:38 - Now-- oh, my god--
22:39 - what's the chance this works?
22:42 - No, go down.
22:42 - OK.
22:44 - Yeah, there we go!
22:45 - Look, my snake is of length 2.
22:49 - My snake is-- whoa.
22:53 - It kind of worked.
22:54 - Wait.
22:55 - All right.
22:55 - So one thing should also happen.
22:57 - When I GoSub 4000, I also
need to move the food.
23:03 - And I think that's going to be--
it's maybe causing a problem.
23:05 - So I need to just
GoSub 2000 again, also.
23:09 - So 4000-- before I jump
out of here, 4025, let's
23:15 - GoSub I'm pretty
sure it was 2000
23:17 - that picks a new food location.
23:19 - Let's try this.
23:22 - Yeah.
23:22 - OK.
23:23 - The food moved.
23:24 - It jumped after I ate it.
23:28 - Oo, why-- it worked
for the first two.
23:32 - I don't know if
this is the problem,
23:34 - but I'm realizing
that the fact that I'm
23:36 - printing F over and over
again is unnecessary here.
23:39 - Where do I print F?
23:41 - Line 55.
23:42 - Since I'm not clearing
with home anymore,
23:45 - I only need to
print F the moment
23:47 - I pick the location
for the food right
23:50 - here, line 2000 subroutine.
23:52 - So let's add 2025.
23:59 - And then, line 55 is
no longer necessary.
24:06 - So let's see.
24:06 - So that the food is there.
24:09 - Capture the food.
24:10 - I've got two S's.
24:15 - Oh!
24:16 - Wait a second.
24:17 - You can see that it's continuing
to just erase that same-- ah.
24:21 - Somehow that first
spot in the array
24:23 - is not moving along with it.
24:25 - Right?
24:25 - Because it's only
blinking there.
24:27 - That's actually a nice clue.
24:29 - Oh!
24:32 - (LAUGHING) I know
what the problem is.
24:34 - Why was it only working when
the array had two but not three?
24:39 - I'm missing a key
aspect of the loop here.
24:42 - Look at this loop where
I'm printing all the S's--
24:44 - Next I. Look at this loop--
no Next I. All right, folks.
24:54 - OK, two S's.
24:59 - Three S's.
25:01 - Can I see a four S?
25:05 - Four?
25:08 - Five?
25:10 - I think we have our
snake game, people.
25:12 - This is running
really, really slow.
25:15 - Right here, let's
double the speed.
25:25 - Now, of course, I've
built nothing in
25:28 - to test if I'm hitting
the edge of the screen
25:31 - or if the snake is
going over itself.
25:34 - But that would kind of
ruin the fun of just being
25:36 - able to play this forever.
25:39 - I'm going to get rid
of that loop entirely.
25:41 - Actually, I'm not going
to get rid of it entirely.
25:43 - Let's just make it
a loop from 1 to 2.
25:52 - I guess HTab and VTab
really slows things down.
25:56 - I think it's just
an old computer.
25:58 - I mean, I don't mean
to be mean to you.
26:00 - You're my friend, Apple II Plus.
26:02 - [BEEP]
26:03 - Oh.
26:04 - Illegal quantity in 2025.
26:06 - Ah.
26:07 - So it picked an invalid
location for the food,
26:09 - probably because one of
the positions it could pick
26:12 - is 0, which is not a valid
column or row position.
26:16 - So there's more that I
need to do here, right?
26:19 - I need to do some
error-checking to make
26:21 - sure the food is always picked
between 1 and 40, and 1 and 24.
26:26 - I need to make sure
the snake is not
26:28 - allowed to go off the edge--
26:29 - game is over-- or
run into itself--
26:31 - game is over.
26:32 - I'm going to write
that basic code,
26:34 - reorganize this, clean
up the line numbers,
26:37 - add some code comments, show
you what that looks like here.
26:40 - I'm also, in case you don't
happen to have your own Apple
26:43 - II Plus just sitting around and
you want to try this yourself,
26:46 - I'm going to include links to
a bunch of different emulators
26:49 - I found on the web that you
could try running this code
26:51 - and modifying it.
26:52 - And I really hope that you make
your own version of the snake
26:56 - game in Basic and
share it with me
26:59 - at the link on the
Coding Train website
27:01 - that I'm showing you right now.
27:02 - But if you like learning about
AppleSoft Basic programming
27:05 - on an Apple II Plus,
maybe you have a friend
27:08 - who's never coded before
and wants to learn
27:10 - to code from scratch in Basic.
27:12 - Guess what?
27:13 - I just made an entire
course all about
27:17 - how to code-- what
is code-- with Basic,
27:20 - relating it to modern
programming languages
27:22 - as they stand today.
27:24 - And where is that class?
27:25 - I'm looking at it right now.
27:26 - It's on the world's
first curated library
27:29 - of practical hands-on classes
owned and operated by creators.
27:33 - There are new classes
launching all the time.
27:35 - If you're interested
in making videos,
27:37 - like me, one of the
classes that I'm
27:38 - watching these days
to improve my game
27:40 - is Rene Ritchie's
Rapid Turnaround video.
27:42 - I mean, certainly if
you're interested in Apple,
27:44 - you might know about Rene
Ritchie's YouTube channel.
27:47 - He's got a course.
27:48 - The course I've been
watching right now, since I
27:50 - do a lot of live streaming,
is being yourself
27:53 - on camera with Luria Petrucci.
27:55 - There's Philip Damico's course
on next-level animation.
27:58 - There's business
101 for creators.
28:00 - So many classes
and nebula talks,
28:03 - which are inspirational
short-form guest lectures.
28:05 - If you already
subscribe to Nebula,
28:07 - which I've talked about
before on my channel,
28:09 - you could upgrade to Classes
for just $5 per month.
28:11 - If you're brand new to Nebula,
never heard of it before,
28:14 - go to
nebulaclasses.com/CodingTrain.
28:17 - It's $10 a month, or
$100 for the year.
28:20 - However, through that
link you can get it
28:22 - for $80 for the entire year.
28:24 - Subscribing to Nebula
Classes also gets you Nebula.
28:27 - There's over 14,000 videos
from your favorite creators,
28:30 - as well as dozens of
high-production originals,
28:33 - content that you
can't find on YouTube.
28:35 - By signing up for Nebula
and watching my class--
28:38 - All About Apple
Basic and What is
28:39 - Code-- you're supporting
The Coding Train.
28:41 - And I think you'll also
discover a ton of other content
28:44 - that you really love.
28:45 - I hope to see you there.
28:46 - Thanks for watching.
28:47 - And see you next time.
28:48 - I don't know where--
28:49 - JavaScript, Basic
processing, who knows?
28:52 - You tell me.
28:53 - Goodbye.
28:54 - [THEME MUSIC]