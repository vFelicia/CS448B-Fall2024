00:00 - [WHISTLES]
00:00 - Hello, and welcome to
a coding challenge--
00:03 - interactive drawing
with Sketch RNN.
00:05 - And maybe you're watching this
and thinking to yourself, huh?
00:08 - What's Sketch RNN?
00:10 - Then you're in the
right place, because I
00:11 - will explain to you a bit
about what Sketch RNN is
00:14 - and provide you with
links in the description
00:16 - to a lot of background
material if you
00:18 - want to do a deeper dive
into the machine learning
00:20 - model that is Sketch RNN.
00:22 - But what I'm going to build in
this video that you're watching
00:24 - is my own version of
this exact project.
00:28 - So this is a project
on the Magenta website.
00:30 - Magenta is a project
from Google that
00:33 - is around creativity and AI.
00:35 - There's a lot of music examples
with the Magenta project.
00:38 - And what you're seeing here
is the AI, so to speak--
00:42 - it's really a machine learning
model making predictions--
00:45 - drawing a cat.
00:46 - And I can hit Clear here and
I can begin drawing the cat.
00:48 - Like I could just
stop there, and it's
00:50 - going to try to fill in
the rest of the cat for me.
00:52 - Let's see.
00:53 - If I try to draw one like
this with like a sort of body
00:56 - and like a tail, we can
sort of see what happens.
00:59 - So this is the--
01:00 - I've used Sketch RNN
before, because I
01:02 - can generate a drawing from
nothing with Sketch RNN.
01:06 - But what I want to do in this
video is create something where
01:08 - the person using the
computer draws with a mouse--
01:12 - but you can imagine all sorts
of interface interaction ideas
01:15 - that you could do--
01:16 - and then has-- the machine
learning model takes over
01:19 - and finishes the drawing.
01:20 - And you can see there are
quite a few other models.
01:24 - Sketch RNN-- the Sketch
RNN model isn't one model.
01:27 - It's actually a collection
of many models based
01:28 - on these categories,
because the data that
01:31 - was used to train the
machine learning model
01:34 - is from a project
called Quick, Draw!
01:36 - So Quick, Draw!
01:37 - is a game that you can play,
also from Google, where
01:41 - the website prompts
you to draw something,
01:43 - and then it tries to like
guess to see if you're
01:45 - drawing the correct thing.
01:47 - And you people
playing that game,
01:49 - Google collected
all those drawings.
01:50 - And there's lot of
interesting questions
01:52 - around the data set itself, but
it is an open source data set.
01:56 - There's 50 million drawings.
01:57 - I think there are
384 categories.
01:59 - I'm not 100% sure about that.
02:02 - And so that's the data set
that it was trained on.
02:05 - The kind of machine
learning model architecture
02:08 - is something called a
recurrent neural network.
02:10 - This is a wonderful
article that I
02:11 - read that really taught
me a lot about how
02:13 - recurrent neural networks work.
02:15 - It's quite technical,
but also pretty friendly,
02:18 - and uses some nice examples to
describe how they're working.
02:22 - But you can also read
the original paper
02:24 - by David Ha and Douglas
Eck, researchers
02:27 - at Google Brain, that describe
the Sketch RNN model, how
02:31 - it was trained, and all
of the details behind it,
02:35 - including the real lower-level
machine learning math details.
02:38 - You can also read this
excellent blog post
02:41 - on the Magenta blog called
"Draw Together with a Neural
02:43 - Network," which mentions
other collaborators
02:46 - and gives you more details also
about how Sketch RNN works.
02:52 - Guess what, though?
02:52 - I'm going to start
coding now, because one
02:55 - of the projects that I work
on, which is an open source
02:57 - library for machine
learning called ml5js,
03:00 - is built on top of
TensorFlow.js, which
03:03 - is Google's open
source JavaScript
03:06 - version of TensorFlow machine
learning open source library.
03:09 - And ml5 also includes the
Sketch RNN model as part of it.
03:15 - So if I go here to Reference,
I can find the Sketch RNN page
03:22 - and read a bit more about Sketch
RNN and get some starter code.
03:27 - First thing that I
need to do if I'm
03:29 - going to use the ml5 library
is make sure to import it
03:32 - into my p5 sketch.
03:33 - So on the Getting
Started page, there's
03:36 - actually a p5 web editor
template I could click on.
03:38 - But I'm actually just going
to copy this reference.
03:41 - And guess what?
03:41 - New version of ml5
out today, 0.4.0.
03:45 - Lots more to say about that
in other videos to come.
03:48 - But I'm going to go back to
my sketch in the web editor.
03:51 - I'm going to click over
to find index.html,
03:54 - and I'm going to add it
as one of the libraries
03:56 - right up here in index.html,
click Save, and go back
04:00 - to sketch.js, and
I'm ready to code.
04:02 - [BELL RINGS]
04:04 - I'm going to add the
preload function in order
04:07 - to load the Sketch RNN model.
04:10 - So I'll make a variable.
04:11 - I'll call it sketchRNN.
04:12 - Then I'll say sketchRNN equals--
04:16 - and I'll go back
to the reference--
04:18 - ml5.sketchRNN.model
and callback.
04:21 - The model is a string that
indicates what category.
04:25 - Was is the thing
that I want to draw.
04:26 - And I can actually find a
list of all of them here,
04:29 - but I'm going to
start with just cat.
04:32 - And I don't need a
callback because I'm
04:34 - loading the model in preload.
04:36 - So I can assume that once I get
to setup, the model is loaded.
04:41 - And let me run it.
04:42 - No errors.
04:44 - Good sign.
04:45 - Model is loaded.
04:46 - Sketch RNN initialized.
04:48 - Using Sketch RNN is
actually as easy as just
04:52 - calling a single function,
the generate function.
04:55 - I could say in setup
sketchRNN.generate.
04:59 - And then all I need to
do is give it a callback.
05:02 - In the callback, I'm going
to say got path stroke.
05:07 - I'm not sure what to call this.
05:08 - I'm going to call it
StrokePath, gotStrokePath.
05:12 - And I'm going to write
this function, function
05:14 - gotStrokePath, that receives two
arguments-- an error, in case
05:19 - something went wrong, and then
an actual strokePath object.
05:24 - Or I should maybe
call this results.
05:25 - I don't know.
05:26 - But I'm going to
call it strokePath.
05:27 - And I'm just going to say
console.log strokePath.
05:31 - Let's run this and see
if anything comes out
05:33 - in the console.
05:35 - I love it when things work.
05:37 - It's like so rare in coding.
05:39 - This is now the
foundation upon which
05:42 - everything else that I do in
this example will be built.
05:46 - So let me unpack this
for you for a second.
05:49 - A recurrent neural
network is a kind
05:52 - of machine learning model that
deals with sequential data.
05:55 - That could be text, like
a sequence of characters--
05:58 - R, A, I, N, B, O,
W. It could be text,
06:03 - like a sequence of words--
06:05 - choo, followed by chew.
06:09 - It could be music.
06:10 - Maybe a sequence is a melody of
notes and rhythms, a sequence.
06:18 - Each one of these
units in a sequence,
06:22 - you could think of as the state.
06:23 - So in this case the
state is very simple.
06:26 - It's a single character.
06:27 - Here it's maybe, with words,
a little more complex.
06:30 - And, certainly, musical
notes, the state
06:32 - might have which note is it,
what's the amount of time,
06:35 - the duration of that note.
06:37 - Drawing-- a drawing
can also be thought
06:39 - of as a sequence-- draw, draw,
draw, draw, draw, draw, draw.
06:43 - This is a sequence of
vector paths or stroke paths
06:47 - as I'm calling them.
06:48 - Strokes-- their
strokes of a pen.
06:50 - And you'll notice back
here in the code there's
06:54 - a dx, a dy, and a pen status.
06:59 - So all of the states, each
element of the sequence
07:03 - involves a vector path, a
change in x, a change in y,
07:09 - and whether the
pen was down or up.
07:13 - Is the pen down?
07:14 - Is the pen up?
07:14 - And there's actually
a third state,
07:16 - which is is the drawing
completed, which is end.
07:19 - So if I-- all I need
to do is figure out
07:21 - a way to say, like, OK,
you gave me this state.
07:23 - Now I'm going to take that
data and visualize it.
07:26 - Interestingly enough,
I'm going to visualize it
07:28 - in a very literal form by
drawing the path according
07:31 - to that vector in a canvas.
07:33 - But maybe that state could be
translated into music or words
07:36 - or some other kind of media.
07:37 - How could you create an
audio version of Sketch RNN?
07:41 - That would be something
to think about.
07:43 - There is a tricky thing
going on here, which
07:45 - is when do I choose to draw?
07:47 - Because if you've
used p5 before,
07:50 - you know that
there's this function
07:51 - draw that you're asked to
write which is always looping.
07:54 - That's the animation loop.
07:55 - And, generally, that's what
you want to do your drawing.
07:57 - But the stroke, the
data for the stroke,
07:59 - has to come back
in this callback.
08:01 - So I could get rid
of the draw loop
08:03 - and do some of my own timing
stuff and draw in here,
08:05 - but I think what
I'm going to do,
08:07 - I'm going to create a
variable called currentStroke.
08:11 - And I'm going to-- whenever
I get a new stroke,
08:14 - I'm going to stay currentStroke
equals strokePath.
08:17 - Just going to set--
08:18 - I'm going to get
the data coming in
08:20 - and set it to a global variable.
08:22 - Then in draw, I'm going to
ask if currentStroke exists--
08:28 - I'm actually going
to say if it's--
08:29 - yes, I'm going to
say if currentStroke.
08:31 - If it exists, then I
want to draw a line
08:34 - from some value x, y to x
plus currentStroke.dx, y
08:41 - plus currentStroke.dy.
08:44 - So, in other words, I
need some new data here.
08:46 - I need to have this idea of
where is the current pen.
08:49 - And this is up to me.
08:50 - This is not part of the model.
08:51 - The model is just telling me
relative directions to go.
08:55 - So I'm going to create my
own variable called x and y.
08:59 - In setup, let me initialize
it to just the center
09:02 - of the canvas.
09:05 - Let me just fill
in the background
09:07 - with a white background,
and then draw this line.
09:12 - Let's say a stroke
0, strokeWeight 4
09:18 - so it's a little bit thicker.
09:19 - And let's run this now.
09:22 - There it is.
09:23 - My cat.
09:24 - Meow.
09:26 - My drawing, of course, has
stopped, because I only asked--
09:30 - the generate function
just gives me
09:31 - what is essentially the
next path, the next vector.
09:35 - So once I have that, I need
to ask for another one.
09:38 - So there's a bunch of different
ways I could implement this,
09:40 - but for me the logic
is such that setup is
09:43 - going to ask for the first one.
09:46 - Then I'm going to receive
it in the callback, draw it.
09:48 - And then right here,
after I've drawn it,
09:50 - let me ask for the next one.
09:52 - So I could just do
exactly this again,
09:55 - but what I want to also do, if
I'm asking for the next one,
09:59 - let me set currentStroke
to nothing again.
10:02 - Let me just sort of
clear that variable.
10:05 - So the draw might
continue to loop,
10:07 - but it won't continue to draw
that same stroke over and over
10:09 - again until a new one comes in
and fills into that variable.
10:13 - So I think now, if I run
this, we're going to see--
10:16 - ah, OK.
10:19 - Wah, look at this cat.
10:21 - Meow, meow, meow, meow,
meow, meow, meow, meow, meow.
10:23 - I drew the vector path
but didn't move the pen
10:25 - to the next spot.
10:27 - So I need to say x plus
equals currentStroke.dx.
10:33 - And the same thing, y plus
equals currentStroke.dy.
10:36 - Let's try that again.
10:37 - Whoa, there we go.
10:39 - Oh, it's a cat.
10:40 - OK.
10:41 - So I can't erase the
background and draw.
10:43 - And there we go.
10:44 - Now, this doesn't look
exactly right, right?
10:47 - The thing that's missing here
is I haven't dealt with the pen.
10:50 - I really should only
be drawing the line.
10:53 - I always want to
move the x and y,
10:55 - but only if
currentStroke.pen is down
11:05 - do I want to actually
draw that line.
11:07 - Let's try this now.
11:10 - Hmm.
11:11 - Something's off.
11:13 - I know what the problem is here.
11:15 - I'm having a bit of
a sense of deja vu
11:17 - because I went through this
in the snowflake video.
11:19 - But if this sequence where
every single state has a dx, dy,
11:24 - and a pen state, the
pen state is actually
11:28 - describing what you should
be doing for the next stroke.
11:32 - It's a little bit weird
but it's off by 1.
11:35 - I suppose that's because
the drawing always
11:38 - starts with the pen down.
11:39 - And, also, there's
a pen state of end.
11:42 - So when you get a
dx, dy, you do that,
11:44 - and then the next thing is end.
11:46 - So this value that
comes back in the pen
11:49 - is actually for the next state.
11:52 - So I need to think about
this in a more clever way.
11:55 - So I'm going to have a
separate variable that
11:58 - keeps track of nextPen.
12:03 - And it's going to
start with down.
12:05 - Then what we say is if nextPen
is down, which it will be,
12:11 - then draw the line.
12:13 - And then nextPen equals
currentStroke.pen.
12:19 - So I'll save it
for the next time
12:21 - around, and then always
pick it up again.
12:23 - And I'll obviously stop
if the nextPen is end.
12:29 - So I can say something
like if nextPen equals end,
12:35 - I could say noLoop, and return.
12:38 - This will just
kill the p5 sketch.
12:40 - It will stop.
12:44 - It kind of looks
like a cat, right?
12:46 - [BELL RINGS]
12:48 - Now I have this cat, and it is
the correct generated drawing,
12:52 - a duplicate of what I did in the
snowflake Sketch RNN challenge.
12:56 - But here I am ready to add
the next component, which
12:59 - is a person coming here
drawing their own starter path,
13:05 - and then having
Sketch RNN take over.
13:07 - How would I do that?
13:08 - So one of the things
that I have to revisit,
13:10 - I need to revisit the state.
13:11 - So any given moment
of the drawing
13:14 - is a dx, a dy, and a pen state.
13:16 - So I need to collect
a sequence of those
13:19 - from the person who is drawing.
13:21 - One way I can do
that is I want to--
13:23 - the drawing, I'm not going to
be too sophisticated about this.
13:26 - I'm going to have the user
start the drawing when
13:28 - they click the mouse, and stop
when they release the mouse.
13:31 - So I basically want two events
that are tied to the canvas.
13:35 - So I'm going to store
the canvas in a variable.
13:38 - And I'm going to say
canvas.mousePressed
13:41 - startDrawing, and
canvas.mousePre--
13:46 - mouseReleased.
13:49 - I want to say finished
drawing, but it's not finished.
13:51 - There's Sketch RNN.
13:53 - I can say sketchRNNStart.
13:56 - So I no longer want to call
generate right here in setup.
14:01 - I'm not going to
start generating.
14:03 - I'm going to first collect
the data from the user.
14:06 - And function startDrawing--
presumably right here
14:17 - is where I'm going
to start generating
14:19 - the drawing, sketchRNNStart.
14:21 - So I need a--
14:23 - what I'm going to call
this is the seedPath.
14:25 - It's what I'm seeding the
machine learning model with.
14:28 - So seedPath is an array.
14:33 - And I'm going to have
a variable called
14:35 - personDrawing, which is false.
14:40 - And as soon as I--
14:42 - as soon as startDrawing happens,
personDrawing will go to true.
14:46 - Because in draw I'm going
to say if personDrawing,
14:52 - I want to collect those states.
14:55 - So what are the states?
14:58 - The strokePath is an object
which has a dx, a dy, and a pen
15:07 - state.
15:08 - Well, the pen is always
going to be down.
15:09 - Again, I could do something
more sophisticated
15:12 - where I could have
an interaction,
15:13 - that the person, the user,
could actually draw, stop,
15:17 - pick up, do different things,
and then have Sketch RNN know
15:19 - how to take over.
15:20 - But, by definition, the
way I'm building this
15:22 - is when the mouse is released
Sketch RNN takes over.
15:24 - So the pen is always down.
15:26 - And dx is--
15:27 - I could use built-in
variables of p5.
15:29 - It stores the current
mouse position
15:32 - minus the previous
mouse position.
15:34 - So this is actually
really easy to do in p5
15:36 - because I have these
values already.
15:39 - So the difference
between the current mouse
15:40 - and the previous mouse, dx,
dy, and the pen is down.
15:44 - Then I can say
seedPath.push strokePath.
15:52 - And then when the mouse is
released, sketchRNNStart.
15:59 - personDrawing is false.
16:02 - Let's give this a try.
16:03 - OK, big problem.
16:04 - I don't see what I'm drawing.
16:07 - [SOMETHING BUZZES]
16:08 - That would be nice.
16:09 - Oh, it drew a cat as soon
as I released the mouse.
16:12 - So I need to add something in
draw which does the following.
16:18 - Hmm.
16:19 - I guess I just want to draw--
16:21 - I don't want to do
exactly what I did here.
16:24 - So universally let's set
stroke 0, strokeWeight 4.
16:28 - And let's just take this
line function, put it here.
16:33 - And I want to draw x,
y, x plus strokePath.
16:39 - And then I want to
say the same thing.
16:41 - I want to do this.
16:43 - So, again, there might be a way
to consolidate this code and--
16:48 - but there it is.
16:50 - So this now, at least I
should see what I'm drawing.
16:56 - Whoa.
16:57 - OK, that's weird.
16:59 - Oh, it's drawing
everything relative
17:01 - to the mouse relative
to the center.
17:04 - That's not good.
17:06 - Aha.
17:07 - So the first point that I'm
drawing, moo, is actually--
17:11 - aha.
17:12 - So x and y don't get
initialized in the center.
17:14 - Of course, of course, of course.
17:16 - x and y get initialized
when I start
17:20 - drawing wherever the mouse is.
17:24 - That should fix this problem.
17:27 - Here's my cat.
17:28 - Now continue drawing my cat.
17:30 - Weird.
17:30 - Wait.
17:31 - I drew the circle.
17:32 - I drew the cat's face already.
17:34 - So it's picking up
where I left off
17:35 - but it seems to be
starting the drawing over.
17:38 - Why?
17:39 - Because I never told the
model, the Sketch RNN model,
17:43 - about my seed strokes
in the first place.
17:47 - I still just call
sketchRNN.generate
17:50 - that first time.
17:52 - But guess what?
17:53 - The generate function can
take as a additional optional
17:57 - argument an array of states
that are fed into the model.
18:00 - And I have those
already in seedPath.
18:03 - Is that what I called it?
18:04 - So now-- drum roll, please--
18:09 - I believe this is
the last detail.
18:10 - There's plenty more I want
to say and a couple more
18:12 - things I want to do, but this
is the last sort of key detail
18:15 - here.
18:16 - [DRUM ROLL]
18:22 - [FANFARE MUSIC]
18:25 - That was good.
18:26 - But there's a-- I got lucky.
18:28 - So it's sort of worked,
it sort of didn't work.
18:30 - There is an issue.
18:31 - There is something
really important
18:33 - that I need to implement.
18:34 - And, actually, it's
my intention for this
18:36 - to actually become
a feature of ml5
18:39 - and it's going to handle
it for you automatically.
18:41 - But that hasn't been implemented
yet in ml5, so in this video
18:44 - I'm going to try it out.
18:46 - And then maybe in
a future video I'll
18:47 - do a video about adding
this as a feature to ml5.
18:50 - And it has to do with the RDP
line simplification algorithm.
18:53 - Which, guess what?
18:54 - If you look at the
previous coding
18:55 - challenge, what a coincidence.
18:57 - It is the RDP line
simplification algorithm.
18:59 - So why does this matter?
19:01 - Let's go back to
this example here.
19:03 - And I'm going to do something.
19:04 - Pay close attention.
19:05 - I'm going to hit Clear.
19:06 - I'm going to zoom way in close.
19:09 - I'm going to draw
very, very slowly
19:11 - a lot of squiggly lines like
this really, really slowly.
19:14 - And watch what happens
when I lift up the mouse.
19:17 - Ready?
19:18 - 1, 2, 3.
19:20 - Do you see how the
drawing changed?
19:22 - Somehow it's very
subtle, but some
19:25 - of the points that I was
drawing were removed.
19:28 - The fidelity of the
line was lowered.
19:32 - Even though it's capturing--
19:33 - I'm capturing the mouse
positions in my sketch
19:38 - at presumably 60
frames per second.
19:40 - I'm capturing a lot of points.
19:42 - So I'm giving the machine
learning model, the Sketch RNN
19:46 - model, all of these
states where the dx and dy
19:49 - values are really, really tiny.
19:51 - The model wasn't actually
trained with drawings
19:54 - that have a super high fidelity
to them, with lots and lots
19:56 - of points close together.
19:58 - I'm actually not sure if that's
in the original Quick, Draw!
20:01 - Data set, or whether that was
like a processing of the data.
20:04 - But I was in touch
with David Ha,
20:06 - who explained that
the RDP algorithm was
20:09 - used to simplify the drawings
when the model was trained.
20:12 - And so when you're
feeding stuff into it,
20:14 - you want to have those
drawings retain that quality.
20:16 - So here is the code for
the last coding challenge,
20:20 - was the RDP line
simplification algorithm.
20:22 - And I'm just simplifying a
sort of mathematical curve
20:26 - just to recreate the animation
that's on the Wikipedia
20:28 - page for the RDP algorithm.
20:30 - But I should be able to
take these functions--
20:32 - I'm going to create
another file called rdp.js.
20:37 - I'm going to reference
it here in index.html.
20:40 - I'm going to grab my
implementation of the RDP
20:43 - algorithm, which includes
all four of these functions.
20:46 - You can watch the other video
to see me write those functions.
20:50 - I'm going to paste
them all here.
20:52 - And what I want to
call is just rdp.
20:55 - So I give the rdp
function an array
20:57 - of a whole bunch of points.
20:59 - Then I-- and I also
give it an empty array,
21:02 - that it's going to fill
with the RDP reduced points.
21:05 - The way I created the example
is with a global variable
21:08 - called epsilon.
21:10 - So I'm just going
to sort of hard code
21:12 - in a value for that at 10.
21:14 - Now, right before I
generate the seedPath,
21:17 - I need to perform RDP
line simplification.
21:23 - Interestingly enough,
the RDP algorithm
21:26 - doesn't know anything about
Sketch RNN and dx, dy,
21:29 - and pen state.
21:30 - So, actually, what
I want to do is
21:33 - I want to have another
array called seedPoints,
21:43 - and those are what I
actually want to collect.
21:46 - Oh.
21:46 - I may have just kind
of overcomplicated it.
21:48 - It's OK.
21:50 - I'm going to comment this out.
21:53 - This is going to
become important again.
21:55 - But I'm going to say
seedPoints.push createVector,
22:04 - mouseX, mouseY.
22:07 - And then the line
that I want to draw
22:10 - is actually just mouseX,
mouseY, pmouseX, pmouseY.
22:21 - So let's try this.
22:23 - So the drawing still works.
22:25 - What I want to do is perform
the RDP line simplification now.
22:28 - So I can go back to my
previous example once again
22:31 - and basically find
exactly this code.
22:33 - So I'm going to grab this code
and I'm going to put it here.
22:37 - And what this is doing is it's
creating a new empty array
22:40 - and it's calling
the rdp function
22:43 - on the allPoints array, which
is now called seedPoints,
22:47 - filling it with the simplified
version of the line.
22:50 - And then what I need to
do after that is-- now I
22:53 - have these rdpPoints,
which is the simplified
22:55 - version of the line.
22:57 - I want to say for let i equals
0, i is less than rdpPoints--
23:03 - I'm going to
actually start at 1--
23:05 - rdpPoints.length, i++.
23:09 - And I need to create
the states now.
23:11 - Right here.
23:11 - This is exactly
what I want to do.
23:14 - I want to create the
strokePath, which
23:17 - is rdpPoints index i dot x minus
the previous one, i minus 1.
23:32 - Do the same thing for y.
23:36 - And then the pen is down.
23:40 - Then I can-- I could redraw--
23:41 - I'm not going to redraw
anything just for a second.
23:44 - And then I want to put
that into the strokePath,
23:47 - and then call generate.
23:48 - All right.
23:50 - That was a little manic here,
which I guess all my coding
23:53 - challengers are pretty manic.
23:54 - But what just happened?
23:55 - Again, the idea, ultimately,
is for ml5 to handle this.
24:00 - I think that's what
I would like to do.
24:01 - I'd like to create a
helper function in ml5
24:04 - that Sketch RNN takes your
seed path in and like performs
24:08 - the line simplification for you.
24:09 - But this is my challenge
to implement it manually
24:12 - to see if it helps.
24:13 - So what I'm doing here
is I have a set of points
24:16 - that I've collected
in seedPoints.
24:18 - I call the rdp algorithm,
which simplifies that path.
24:22 - Previous coding challenge goes
through that in more detail.
24:25 - Then I have to
generate the states
24:27 - based off the simplified path.
24:29 - And then that's what I put
into the Sketch RNN model.
24:32 - Not feeling super
confident here,
24:34 - but let's give this a try.
24:36 - [DRUM ROLL]
24:44 - [FANFARE MUSIC]
24:45 - It looks the same.
24:47 - But I think, if I'm correct,
if I did this many, many times,
24:52 - I would have better results.
24:54 - I think, however,
it's very important
24:56 - that I create that same
visual effect where
24:59 - I redraw the simplified line.
25:02 - And that's actually a
pretty easy thing for me
25:04 - to do right here.
25:05 - Because what I can do
is, in sketchRNNStart,
25:10 - after I do the line
simplification,
25:13 - I can redraw the background.
25:15 - And then I can say beginShape.
25:19 - It should have been endShape.
25:21 - And I'm going to say
for let v of seedPath--
25:28 - I'm just getting all the
vectors out of the seedPath.
25:31 - vertex v.x, v.y.
25:34 - And I'm going to say noFill.
25:38 - I should have--
25:39 - I've already been
drawing, but just
25:41 - to be consistent, let me take
this here, put that here.
25:46 - So now I'm drawing and drawing
and drawing, erasing it,
25:50 - and then drawing
the simplified line.
25:52 - Let's see how that goes.
25:57 - Mmm.
25:58 - Yes.
25:58 - I didn't see it.
25:59 - What did I do wrong here?
26:02 - Oh, no, not the seedPath.
26:04 - seedPoints.
26:06 - And I should be
doing this before--
26:08 - technically speaking, it
doesn't really matter,
26:10 - but this is what
I want to do here.
26:14 - So this is performing the
line simplification, drawing--
26:20 - and line isn't really right,
but simplified path, path
26:23 - simplification.
26:24 - And then now converting
to Sketch RNN states.
26:26 - All right.
26:27 - Let's try this one more time.
26:33 - Did you-- did that simplify?
26:35 - It's hard to see.
26:36 - Let's try like a much
higher epsilon, like 100.
26:47 - Yes.
26:48 - Oh, yes, it did.
26:49 - It's just not super obvious.
26:51 - Oh no no no no no.
26:52 - Ah.
26:55 - [SOMETHING BUZZES]
26:56 - Ah.
26:59 - Coding, coding,
whoops whoops whoops.
27:01 - rdpPoints.
27:04 - Simplified line is in rdpPoints,
not in the seedPoints.
27:10 - The seedPoints was
everything I collected.
27:12 - The simplified one
is called rdpPoints.
27:14 - I should use better naming.
27:16 - Now I think-- let me go back and
change the epsilon back to 10,
27:21 - something more reasonable.
27:23 - And we're going to try
this one more time.
27:27 - Draw it slowly so that
there's a lot of extra points,
27:30 - and make a weird curve here.
27:32 - Here we go.
27:33 - 1, 2, 3.
27:35 - There we go.
27:37 - [FANFARE MUSIC]
27:38 - So that looks like it really
simplified it like way
27:41 - too much.
27:41 - So this would be an
interesting thing to tune,
27:44 - because I want this to be in--
27:46 - this will be like sort of
a hard-coded value probably
27:48 - in ml5, although maybe it's
a parameter the user of ml5
27:51 - could adjust.
27:52 - But this is what I would
want to sort of play
27:54 - with to figure out what
makes the most sense.
27:58 - But now I can really see the
line simplification happening.
28:02 - What it should actually
be, I have no idea.
28:04 - [SOMETHING BEEPS]
28:07 - So, as always, with any of
these coding challenges,
28:11 - I'm doing just a really
sort of basic version.
28:13 - I think that I have mostly
successfully recreated
28:16 - exactly this.
28:18 - But one of the
things you'll notice
28:19 - is that there's a lot more
thoughtfulness to the interface
28:23 - than the design.
28:24 - First of all, it's drawing over
and over again what Sketch RNN
28:27 - an is drawing.
28:28 - It's a different color.
28:29 - There's a nice
interface for picking
28:31 - which model you want to load.
28:33 - You can kind of like
randomize stuff and clear it.
28:37 - And there's a page of
information all about
28:39 - how this works.
28:41 - So maybe you want to
create your own version
28:43 - and think about what is
that interaction design,
28:46 - how are you visualizing what the
person is drawing versus what
28:50 - the model is drawing,
and how are you
28:52 - picking which model to draw.
28:53 - Maybe you can make
this into a game,
28:56 - an art project,
something that is--
28:59 - just tells a story, that
draws based on words that--
29:04 - text to speech, or speech
to text, or something that.
29:06 - There's so many ideas that
I think you could explore.
29:08 - So I hope you make
one of those ideas
29:09 - and share it with me by
going to the codingtrain.com
29:11 - and following the instructions
about how to share
29:13 - your community contribution.
29:15 - But I will, before
I go, just kind of
29:17 - give you a nice compilation.
29:19 - I think one of the
things that I want
29:20 - to return to is all the
different pre-trained models
29:25 - that are available.
29:26 - Now, I could also
train your own model,
29:28 - which would be a really
interesting thing to try.
29:30 - Very high degree of difficulty
there, but possible.
29:32 - But the reason why I'm assuming
there are models in here that
29:36 - are-- in addition to
frog, there's frogsofa--
29:39 - is because the frog
model was trained
29:41 - with only drawings of frogs.
29:43 - The frog-- the sofa models
trained with drawings of sofa.
29:46 - The frogsofa models,
drawings of both,
29:49 - without a distinction
between the two.
29:51 - So the AI, the machine
learning model,
29:53 - is just learning about
paths that happen when
29:56 - you're drawing frogs and sofas.
29:58 - And so we could try
crabrabbitfacepig.
30:00 - But I'm just going to enjoy
myself and try the everything
30:05 - model.
30:05 - Wait a second.
30:06 - I wanted to do it
again and again.
30:08 - So let's at least add
that here as well.
30:13 - So if the state is end,
instead of saying noLoop,
30:19 - what I want to do is actually
call sketchRNN.reset,
30:27 - which will reset the model,
and then call sketchRNNStart.
30:32 - So if I reset the
model, call start again,
30:35 - it's going to draw
a new version.
30:44 - No?
30:45 - Here's the mistake.
30:46 - When I'm resetting
everything, I don't
30:48 - need to do all this again,
but I might as well.
30:51 - So I could refactor this.
30:53 - (SINGING) I will refactor
this later, you know.
30:58 - At a minimum, what
I need to do is--
31:01 - actually, I don't need
to do any of this,
31:03 - because seedPath is
a global variable.
31:07 - But I'm just going to do this.
31:09 - I'm just going to
reset seedPath.
31:10 - So, yes, we need
to refactor this,
31:12 - but I don't want to add all
the seedPoints to the seedPath
31:14 - again.
31:15 - So let's try this.
31:19 - What will the model draw?
31:21 - Enjoy.
31:29 - No?
31:30 - It's not working still?
31:32 - Oh, this-- so this
return is a problem.
31:36 - So I think I needed nextPen
to not be end any more,
31:39 - and currentStroke to null.
31:41 - Oh.
31:42 - Oh.
31:44 - x and y.
31:46 - x and y.
31:47 - [SOMETHING BUZZES]
31:48 - X and y.
31:51 - x equal rdpPoints, the last one.
31:58 - x and y need to just be
wherever this leaves off.
32:02 - I think this is the last
thing I forgot to reset,
32:05 - which I didn't even
set for the first time.
32:07 - x, y needs to like pick
off where we left off.
32:10 - And I will say goodbye
to you by letting
32:13 - you watch a compilation of
Sketch RNN drawn cat pigs.
32:21 - [MUSIC PLAYING]
32:36 - This is way too much fun.
32:38 - [MUSIC PLAYING]