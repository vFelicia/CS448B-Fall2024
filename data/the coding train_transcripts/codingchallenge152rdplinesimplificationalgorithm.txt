00:00 - [BLOWS HORN]
00:00 - Hello, and welcome to
a coding challenge.
00:02 - In this coding
challenge, I'm going
00:04 - to make what you're seeing right
here, which is a curve lowering
00:09 - its resolution--
00:10 - the same curve is being
drawn over and over again
00:13 - with fewer and fewer points.
00:14 - This is known as the
Ramer-Douglas-Peuker algorithm.
00:19 - Now, there are many
different algorithms
00:21 - for doing this same exact task.
00:23 - But this is a particularly
well-known one.
00:25 - The reason why I want
to implement it is I
00:29 - am working on a new example
with the ml5js library that
00:33 - allows you to draw
with the computer
00:36 - or with a particular
machine learning model,
00:38 - that model being sketch-rnn,
which I've used before
00:41 - in a video about snowflakes.
00:42 - And that model was trained
on the Quick Draw Dataset.
00:45 - So here is an example of
redrawing doodles of cats
00:49 - from the Quick Draw Dataset that
I also did in a previous coding
00:51 - challenge.
00:52 - And in order to
draw along with it,
00:54 - I need to capture the person--
00:57 - the person who's drawing--
00:58 - the path of their mouse.
01:00 - And the resolution of
what they're drawing
01:02 - might be capturing so
many points along the way,
01:04 - that that's going to confuse
the machine learning model.
01:07 - And a researcher at Google,
who worked on sketch-rnn
01:11 - explained this to me on GitHub.
01:14 - And so one of the things
that I want to add to ml5js
01:19 - is this RDP algorithm
to be able to reduce--
01:23 - scale the resolution of a
path that's being drawn.
01:26 - So in this coding
challenge, I'm not
01:28 - going to worry about ml5 or
sketch-rnn or any of that.
01:31 - I'm just going to try to
recreate exactly this.
01:34 - I'm going to start
with this formula.
01:36 - I'm going to draw this graph.
01:38 - And then, I'm going to vary
a parameter called epsilon
01:40 - and see if I can
lower the resolution
01:43 - of this particular graph.
01:44 - I'm not really sure
if resolution is
01:45 - the word I'm looking for here.
01:47 - People in the chat are
suggesting granularity,
01:50 - fidelity.
01:50 - But I think all of these
words kind of describe
01:53 - what it is I'm going for--
01:55 - the number-- the distance
between individual points
01:58 - along a path.
02:00 - And on Wikipedia,
I think a nice way
02:02 - of describing this is the
purpose of the algorithm
02:05 - is to find a similar
curve with fewer points.
02:08 - So depending what
that epsilon is,
02:09 - let's say can we approximate
that curve with the least
02:13 - number of points, you
know, fewer points turning
02:15 - the epsilon up, more points
turning the epsilon down?
02:18 - I wrote a little
code beforehand so
02:20 - that I had it to get started.
02:21 - If you to see me
write this code you
02:22 - can find the link to the
live stream associated
02:24 - with this edited
coding challenge.
02:26 - And so what I've done
here is just taken
02:27 - that mathematical function,
which is right here--
02:31 - f of x equals e to the
negative x of cosine 2 pi x,
02:34 - where x between 0 and 5.
02:36 - And I've graphed
it in processing.
02:39 - So if I run this, we'll
see I have this graph.
02:41 - But what I need to do
now is create an array
02:44 - with all of the points in it.
02:46 - And I think I'm going to end
up using an array list, which
02:48 - is always a little bit awkward.
02:49 - But let's do that.
02:50 - So I'm going to say ArrayList.
02:52 - It's going to have
PVector objects in it.
02:54 - And again, when I--
02:55 - eventually if I make a
JavaScript version of this,
02:56 - it's much simpler to
just have a plain array.
02:59 - But a resizable array in
Java is a little trickier.
03:01 - So I like to use array lists.
03:03 - We'll call this allPoints is
a new ArrayList with PVectors
03:10 - in it that is empty.
03:12 - And so now, I can say here
allPoints.add new PVector--
03:18 - in P5, it would be
createVector-- x comma y.
03:22 - I think it's an
interesting question of,
03:23 - should I perform this
algorithm on the units that
03:27 - are in the sort of range
of 0 to 5, negative 1 to 1,
03:31 - or should I perform the
algorithm on the pixels?
03:34 - I don't think it really matters.
03:36 - But I'm going to do
it on the pixels,
03:37 - because that's going to
be closer to when I do it
03:40 - with, like, a user-drawn path.
03:42 - So I don't know how long I want
this coding challenge to be
03:45 - or how much time I have.
03:46 - But ultimately, if I
can get this to work,
03:47 - the next step would be
have a user draw a path
03:50 - and then play with that curve.
03:51 - Maybe I'll leave that as an
exercise to you, the viewer.
03:54 - OK.
03:54 - So now, let's actually
not draw here.
03:57 - Let's get rid of
the drawing here.
04:00 - And let's put that
into draw itself.
04:05 - So I'm going to say for every
P vector v in all points vertex
04:16 - and endShape.
04:18 - By the way, if
you were wondering
04:20 - what this
surface.setLocation is,
04:22 - it's just so that
when I run the sketch,
04:24 - it will appear over to the
right every single time.
04:26 - So it's not obscuring
the code a little bit.
04:28 - That's how you can set the
processing window to a fixed
04:30 - location.
04:31 - Now that we have all of
the points in a list,
04:35 - we can iterate over
that list presumably
04:37 - and implement the algorithm.
04:39 - So what is the algorithm?
04:40 - You can find a narrative
description of the algorithm
04:42 - here.
04:43 - And you can also see
another nice visualization
04:45 - of it happening.
04:46 - Let me try to diagram
for it and sort
04:47 - explain it in my own words
the way that I understand it.
04:49 - Well, I don't know if
that will be better
04:50 - than you just reading it.
04:51 - So you know, skip ahead a
minute and read this instead.
04:54 - I leave it up to you.
04:55 - [MUSIC PLAYING]
05:01 - So here's a path
with 1, 2, 3, 4--
05:03 - 1, 2, 3, 4, 5, 6, 7, 8 points.
05:06 - Now, presumably, when I
actually do the algorithm,
05:08 - there's going to be lots
and lots and lots and lots
05:09 - of points very close together.
05:11 - But to be able to describe
it through a diagram,
05:13 - I need a very low resolution
or low fidelity, a curve
05:16 - or a path.
05:17 - So the idea of the algorithm--
it's a recursive algorithm.
05:21 - And what I mean by
that is we're going
05:23 - to be dividing these set--
05:25 - this, like, continuous
series of points
05:27 - into subsections and
applying the same algorithm
05:30 - to those subsections,
which they'd get divided.
05:32 - And we apply it to those
subsections, as well.
05:34 - So this is totally going to
make it harder to program.
05:36 - But it is also quite
elegant and lovely.
05:39 - All right.
05:39 - So the first thing
that you do is you--
05:42 - we need a list of points
that we're going to keep.
05:44 - So we're going to
keep start and end.
05:48 - That's the first part of the
algorithm-- keep start and end.
05:50 - So this is the start.
05:52 - And this is the end.
05:53 - So we know at a minimum, we
need those two points, right,
05:56 - because in a way, this is an
approximation of that curve.
06:02 - It's like the lowest
fidelity approximation,
06:05 - but an approximation
nonetheless.
06:06 - So now, we have-- you know,
if I label all these--
06:09 - A, B, C, D, E, F, G, H--
06:15 - now, we have a list with,
like, A and H in it.
06:19 - The next thing we
need do is we look
06:21 - for the point along the
curve that's farthest away
06:25 - from this line segment.
06:26 - By that, I mean we
look for this distance,
06:29 - the normal from all of these
points to the line segment.
06:33 - And just eyeballing
it, it's either B or G.
06:36 - Just to make this more obvious,
I'm putting F up here actually,
06:39 - because that way we
don't have this--
06:41 - it's also like I kind of want
something more in the middle.
06:43 - I think it will be a better
demonstration of the idea.
06:45 - OK.
06:46 - So I found the point
furthest away from the line.
06:51 - So that now--
06:52 - I think I then test that point
against this epsilon value.
06:56 - But let's come back to
epsilon in a second.
06:57 - I'm not entirely sure.
06:58 - I'm going to go back
to the Wikipedia page.
07:01 - But what I do is I say, I
want to keep that point.
07:04 - So I'm going to keep that point.
07:06 - Now, this is the recursive part.
07:07 - Now, I have another path
that goes from A to F
07:11 - and one that goes from F to H.
And I apply the same algorithm
07:14 - again.
07:15 - So now, I take this line segment
and look for these distances
07:20 - from C, D, and B. And I
would say eyeballing it,
07:27 - C is probably the
one that's furthest.
07:30 - So I'm going to keep that.
07:31 - And we can see how
now if I stopped here,
07:34 - this is my approximation.
07:35 - I go from A to C
to F to H. And I
07:39 - think epsilon has to do with
this distance threshold.
07:43 - I think at a certain
point, we realize
07:45 - the point that I'm keeping
is within a certain distance
07:48 - from the curve itself that I
can just stop and discard it.
07:52 - I think that's what epsilon is.
07:53 - Let's go back and confirm that.
07:55 - And here's the
highlighted section.
07:56 - This is exactly right.
07:57 - If the point furthest
from the line segment
08:00 - is greater than epsilon
from the approximation,
08:02 - then that point must be kept.
08:05 - So the algorithm is going
to recursively call itself
08:07 - over and over again as long
as the points it's keeping
08:11 - are greater than epsilon.
08:13 - Once it finds they're less
than epsilon, it will stop.
08:16 - So it's not about an
exact number of points.
08:18 - It's about a threshold
of approximation
08:20 - to the fidelity of the curve.
08:23 - Quick correction--
08:24 - [LAUGHS]
08:25 - --thanks to Simon in the chat--
08:26 - I sort of forgot that I
had this point E here,
08:28 - which if this is
my approximation,
08:32 - this one is actually
the furthest one.
08:34 - So this is actually the one
that I would be keeping next.
08:37 - And then, I would be recursively
subdividing the segment here
08:41 - and checking these.
08:42 - But the idea was correct.
08:44 - I just forgot
about the point E .
08:46 - Let's go try to implement this.
08:48 - I'm not entirely sure
the best way to do this.
08:50 - But I'm going to try with
creating another array.
08:56 - And I'll call this,
like, rdpPoints.
08:59 - I also want to have a variable
called, like, epsilon.
09:03 - And let's just set that at--
09:04 - I'm going to set that to,
like, 10 pixels right now.
09:07 - That's a kind of-- maybe
that's a high number.
09:08 - I don't really know.
09:09 - And I want to make
this ultimately
09:11 - interactive so that I
can change the epsilon.
09:14 - But let me just do it right now
with a fixed epsilon in setup.
09:18 - So I should have two curves.
09:20 - So for example, if
I say rdpPoints--
09:23 - [MUSIC PLAYING]
09:30 - So this is the first step.
09:31 - Give me the start.
09:32 - Give me the end.
09:34 - And add start and end
to this new array.
09:37 - Then, presumably, I could
also draw the new array
09:40 - and just make it
a different color.
09:42 - [MUSIC PLAYING]
09:46 - So here we go.
09:47 - That's my low-- super low
fidelity visualization
09:53 - of this curve as a line
just from the first point
09:55 - to the last point.
09:56 - I think the way to implement a
recursive algorithm-- the way
10:00 - that I'm thinking about it
is to have a function that
10:02 - returns a point.
10:05 - So I'm going to call
the function rdp.
10:07 - I'm going to get
a list of points.
10:10 - I'm going to get a--
two index values.
10:13 - I'm going to get a--
10:14 - I'll just call it A and B,
so A being the beginning,
10:18 - B being the end.
10:21 - And then, let me just-- so
it doesn't give me an error,
10:23 - let me just write
return null here.
10:25 - And the idea is that I
am going to find the--
10:29 - I'm going to iterate--
10:31 - this is point A.
This is point B. I'm
10:33 - going to iterate
through all the points
10:34 - and find the one that is
furthest from that line
10:37 - segment.
10:38 - So I want to go from i equals
a to i is less than b i++.
10:47 - And I'm going to
have a distance--
10:48 - I'm going to have, like,
the record distance.
10:50 - I want to find the furthest one.
10:52 - So the record distance
can start at 0.
10:54 - I could make it negative 1
just for the sake of argument.
10:58 - And then, I need
some-- another function
11:00 - that's going to
give me the distance
11:01 - between a point and a line.
11:04 - And a way that I could do that
is if I think of it this way.
11:09 - I have a point A. I have a
point B. I have a point C.
11:15 - If I take this line segment,
find this normal point,
11:18 - and find the length of this
[? normal ?] point, that
11:20 - would be the distance.
11:21 - So I need a function that
takes three P vectors
11:25 - and gives me the distance
between the line between A
11:27 - and B and the point C.
11:29 - So I'm going to create
a function-- float
11:32 - distance-- line distance.
11:33 - Let's call it lineDist
between a point C
11:38 - and a point A and a
point B. And that's
11:44 - going to return some value.
11:46 - Just put 1 there for right now.
11:48 - I'm going to have to get the
code to do that at some point.
11:52 - So if the--
11:53 - OK.
11:53 - So the start point is
start is points.get(a).
12:03 - end is points.get(b).
12:06 - And then, actually, I'm going to
go from a+1 all the way up to b
12:09 - minus 1.
12:10 - And I'm going to get the--
12:13 - I need to get the, you know,
current point is points.get(i).
12:22 - So the distance is line distance
between current point and start
12:30 - and end.
12:31 - If d is greater than
the record distance,
12:37 - then that's the new
record distance.
12:39 - And what I want to do
is return that point.
12:43 - I'll call it furthest.
12:45 - And furthest equals record--
12:51 - equals currentPoint and
then return furthest.
13:02 - OK.
13:04 - Oh, am I blurred?
13:05 - [DING]
13:06 - Sorry.
13:07 - I was out of focus there.
13:08 - I fixed the camera now.
13:09 - OK.
13:10 - So this is my algorithm.
13:11 - It's going to return
that furthest point.
13:15 - And where am I
calling that function?
13:18 - PVector nextPoint is rdp--
13:22 - right?
13:23 - This is going to be--
13:24 - this is where it
needs to be recursive.
13:25 - So I want the next point.
13:27 - So I'm going to call my rdp
function with allPoints,
13:31 - and starting at the
index, 0 and total-1,
13:42 - starting at the
index 0 and total-1.
13:45 - Oh, I need the index.
13:47 - When it comes back, I actually
want it to return the index.
13:51 - So I don't want to return--
13:53 - I want furthest index,
because I want to add it here.
14:01 - furthestIndex is negative 1.
14:04 - And then, return furthestIndex--
14:07 - this returns an int.
14:11 - So int is nextIndex
is rdp allPoints.
14:18 - So then, I would
say rdpPoints.add(al
14:20 - lPoints.get(nextIndex)) and
then call rdp again between--
14:42 - OK.
14:42 - So I should also
say startIndex is 0.
14:47 - endIndex is total-1
start, endIndex.
14:58 - rdp between-- and I haven't--
14:59 - I have to make this recursive.
15:01 - But I'm just thinking
this through right now--
15:04 - rdp(allPoints,startIndex,
nextIndex) and nextIndex,
15:23 - endIndex, startIndex--
this has to be startIndex.
15:29 - I think I have an idea for
how I can make this happen.
15:31 - I think this isn't
actually the rdp algorithm.
15:35 - What this function is should be
called is findFurthest, right?
15:40 - This is a function to find
the furthest point, given
15:43 - a list of points with
a start and end index.
15:46 - findFurthest-- all right.
15:51 - That's the index.
15:53 - And then, nextPoint
is allPoints.get.
16:05 - And then, if nextPoint--
16:09 - if the-- oh, I
need that distance.
16:14 - If record distance is--
16:18 - if it's greater than epsilon,
return furthestIndex.
16:23 - Otherwise, return
negative 1, right?
16:26 - I need an exit condition.
16:28 - So as long as it's actually--
that distance is greater--
16:31 - return the furthest distance--
16:33 - and then, here,
I'm going to say,
16:37 - if next index is not
equal-- is greater than 0,
16:44 - then rdpPoints.add(al
lPoints.get(nextIndex)).
16:55 - I'm having trouble, like,
finding the recursive moment
16:59 - here.
17:01 - So then what I want to do--
because I have to do this--
17:04 - because I could
just do this, right?
17:06 - while nextIndex
is greater than 0,
17:09 - rdpPoints.add(al
lPoints.get(nextIndex)).
17:12 - And then, I could just say this.
17:21 - allPoints-- if we can startIndex
and nextIndex and nextIndex
17:30 - and endIndex--
17:33 - so but this doesn't work.
17:34 - This is where the
recursion needs to happen.
17:37 - So this has to be a function.
17:40 - Yeah, OK.
17:43 - Let's try making this a function
just for a second called rdp--
17:53 - not function-- sorry-- void
rdp startIndex endIndex.
18:02 - Then, I want allPoints
and rdpPoints.
18:11 - I mean, I could just
keep those global.
18:13 - But let's do this correctly.
18:18 - So now, let's add those.
18:20 - Then, let's call rdp(0,total
1,allPoints,rdpPoints).
18:30 - And then, nextIndex
is find the furthest.
18:35 - If it's greater than 0, rdp--
18:40 - this.
18:44 - startIndex, next--
and it has allPoints.
18:46 - I mean, it's a little silly
to have these arrays here.
18:48 - But I'm going to just keep going
with it-- rdpPoints and this--
18:57 - nextIndex, endIndex.
19:03 - All right.
19:04 - I think my logic is sound here.
19:06 - So there is the findFurthest
function, which just gives me
19:12 - the index to the point
that's furthest away
19:15 - between-- in a list of
points between A and B.
19:18 - So first, I'm going to just
call it and do the whole list.
19:23 - Then, as long as
it's a valid point,
19:26 - I'm going to add it and then
check the other two ways.
19:29 - And I should also say--
19:33 - I mean, this is a
little weird, but if--
19:35 - as long as start index--
19:38 - there's probably a more
elegant way of doing this,
19:40 - but let me just write it
this way for a second.
19:42 - if startIndex is not
equal to nextIndex--
19:48 - like, if they're the same,
I don't want to do it.
19:53 - And same thing here-- if
endIndex is not equal to--
19:56 - and I could probably
do a greater than
19:58 - or something, because I
don't want to go past it.
20:00 - But this is all--
20:00 - I'm protecting myself here.
20:02 - Like, I want to make
sure that I have--
20:06 - it'll exit even if epsilon is 0.
20:09 - So let's just say--
20:11 - like, this should actually work
if the distance is always 100,
20:16 - right?
20:16 - So I don't-- I need the actual--
but if I run this right now,
20:19 - I believe my rdp should be the
reduced fidelity line curve
20:26 - should be the same, because
I'm not actually calculating
20:29 - the line distance.
20:31 - Basically, I'm creating,
like, a fake scenario,
20:32 - where all the points are
always within 100 pixels.
20:35 - So they're all above epsilon.
20:37 - They'll always all
be kept, I think.
20:40 - So I can test if my
recursion is working.
20:43 - [LAUGHS]
20:46 - Infinite loop--
recursion not working.
20:49 - [BUZZ]
20:50 - This is definitely
the problem here.
20:52 - I had a while loop
in there before,
20:54 - because I was thinking
about the rdp loop--
20:57 - do this again and
again and again.
20:58 - But that's before I implemented
the recursive algorithm
21:01 - of the function calling itself.
21:02 - This is just an if statement.
21:04 - As long as I get a valid
index, then add the points
21:11 - and call the function again.
21:12 - And this should work.
21:13 - Now, why do we still
have this line in there?
21:16 - The reason why it was
drawing this weird extra line
21:20 - is because I put
the start point.
21:22 - Then, I put the end point.
21:24 - Then, I put this point.
21:25 - So I-- my actual line
is drawing like this.
21:28 - So what I actually need to
do, which is quite lovely,
21:31 - is first add the start point,
then perform the RDP algorithm,
21:35 - then add the end point.
21:38 - There we go.
21:39 - So I have this working,
where the RDP algorithm,
21:43 - the Ramer-Douglas-Peuker
algorithm,
21:46 - just adds all the points,
because it's not actually
21:49 - calculating the distance.
21:51 - Luckily for me, I have worked
through this line distance
21:55 - problem before.
21:57 - And in fact, if you refer
to my Nature of Code book,
22:01 - in chapter 6, I work on a
particular algorithm that
22:07 - is related to path following.
22:09 - So in a path-following
algorithm, I have the start--
22:12 - I have a line segment that
has a start and an end.
22:14 - And I have a vehicle that's
moving at a given velocity.
22:17 - So part of the
algorithm involves
22:19 - projecting out its
future location
22:21 - and finding the normal
from the point to the line.
22:24 - So I actually have
already written
22:25 - a code example that does this.
22:27 - And I would encourage you
to pause here and maybe
22:29 - go look at this chapter if
you want further explanation.
22:31 - But in the interest of time--
22:33 - and I can come back and do this.
22:34 - I actually already have this
example ready to go here,
22:38 - which shows this
scalar projection.
22:41 - So this is showing if I
have two points, A and B,
22:44 - and I have another point
C, I can always find
22:47 - the normal point of the line.
22:48 - This is called
scalar projection,
22:50 - because you can
imagine if I bring
22:52 - this down here for myself--
22:53 - if I had a light--
22:54 - [LAUGHS]
22:55 - --if this were a flashlight--
oh, I can't do this--
22:58 - if this were a
flashlight shining,
22:59 - down it would cast
a shadow there.
23:02 - And I would find that's like
a projection onto from 3D--
23:05 - from 2D into 1D really.
23:07 - OK.
23:07 - So I should actually
be able to just take
23:10 - this exact function, which is
called scalar projection, which
23:15 - gives a--
23:17 - starts with a point, P, which is
C in this case, and calculates
23:23 - the scalar projection
between A and B.
23:24 - So let's do that--
23:25 - scalar projection-- and it
has to do with the dot product
23:29 - and all this sort of stuff.
23:30 - So I'm going to come back here.
23:33 - And I'm going to
paste this in here.
23:34 - So I want to find--
23:37 - I'm going to call this the
normal point is the scalar
23:42 - projection between C, A,
and B. And then, I just
23:46 - need to return the distance,
the PVector distance between C--
23:55 - that point C and
the normal point.
23:58 - So again, if I have
point C, I have point A,
24:02 - I have point B, my
function that uses
24:05 - the dot product calculates this
point, which I'm naming Norm.
24:10 - Hi, Norm.
24:11 - You're such a nice point, Norm.
24:13 - And then, that is
the normal point.
24:15 - So now, the distance
between C and Norm
24:18 - is exactly this
particular distance
24:20 - that I've been looking for.
24:22 - So I-- dare I say that
this is going to work.
24:26 - [DRUM ROLL]
24:26 - Especially why I use this--
the drum roll-- that means
24:29 - it's not going to work.
24:30 - I got sad trombone ready.
24:32 - Oh, what?
24:34 - [TRUMPETS]
24:36 - It kind of looks like it did--
definitely did something.
24:40 - That is nuts.
24:41 - That is amazing.
24:42 - So it does it just once.
24:44 - Let's try different epsilons--
24:45 - epsilon of 1.
24:47 - Ooh, oh, it's adding
stuff in the wrong order.
24:51 - If you look at where
I'm adding the point,
24:54 - I think if I just add-- for--
24:56 - I think if I add it in
between these two checks,
24:59 - then everything
is going to, like,
25:00 - sort of ripple into the
array in the correct order.
25:03 - Let's see.
25:05 - I need to add the point there.
25:07 - Yes, yes, yes, yes, yes,
yes, yes, yes, yes, yes, OK.
25:11 - OK.
25:11 - We've really got it now.
25:13 - So now, what I need--
25:13 - I want is to animate.
25:15 - So I need to do this
particular algorithm in draw.
25:20 - This needs to happen in draw.
25:22 - And rdpPoints has to be
recreated every time.
25:28 - That's a new-- so I'm doing
this over and over again.
25:32 - So I'm-- every
time through draw,
25:35 - I'm starting with a fresh
array before I draw everything.
25:39 - And then-- so that's good.
25:42 - So this should now work, right?
25:44 - Now, all I need to do
is change the epsilon.
25:47 - So if I start with an
epsilon-- what happens
25:50 - if I have an epsilon of 0?
25:52 - There we go.
25:53 - So I'm going to
have an epsilon--
25:55 - I believe 10, by the way--
25:56 - I seem to remember 10 pixels
was the correct epsilon
25:59 - for the sketch-rnn
model I referred
26:00 - to the beginning of this video.
26:01 - But so I'm going to
start with epsilon at 0.
26:05 - And I'm going to say here
epsilon plus equals 0.01.
26:15 - And then, I'll just say if
epsilon is greater than 10--
26:20 - let's just set epsilon
back equal to 0.
26:23 - And let me see
what happens here.
26:27 - Are we seeing it change?
26:29 - It's very hard to detect this.
26:30 - But we are-- it is there.
26:32 - Let me get rid of this.
26:33 - And let me say fullScreen.
26:35 - Just for the sake of argument
so you can see this more easily,
26:38 - I'm going to have this
go up much faster.
26:39 - And then, I'm going
to let epsilon
26:41 - go all the way up to 100.
26:43 - So what I've done here
to really demonstrate it
26:44 - is I have epsilon going up much,
much faster and all the way up
26:47 - to 100 pixels.
26:49 - So you can see I'm now
approximating this curve
26:51 - with only seven points.
26:52 - And I don't know if it's going
to ever get less than seven
26:55 - as it gets up to 100
if it starts over.
26:58 - So now, you can see it
very, very quickly reducing
27:00 - the number of
points in the curve.
27:02 - Thank you so much for
watching this coding challenge
27:05 - Ramer-Douglas-Peuker algorithm.
27:08 - Stay tuned for how this
gets implemented hopefully
27:12 - into the ml5js library.
27:14 - And a example of an interactive
sketch-rnn drawing application
27:20 - makes use of this
particular algorithm.
27:22 - And so what I would
encourage you to do
27:23 - is make-- can you find
a creative use of this?
27:25 - And as a technical
exercise, make a version,
27:28 - where the user draws.
27:29 - And you alter the fidelity
of what they're drawing.
27:32 - But maybe there are
some other things
27:33 - you could try that are
more artistic by layering
27:36 - different f with
different colors.
27:38 - I don't know.
27:39 - I can't imagine.
27:39 - I hope that you come
up with something.
27:41 - Share it in that--
thecodingtrain.com in the link
27:44 - that you'll find in this
video's description.
27:45 - And I will show community
contributions on the (SINGING)
27:49 - next live stream.
27:50 - We're going to keep this in.
27:51 - I'm back.
27:52 - The cameras are
shutting off again.
27:54 - That's always a mystery
here on The Coding Train.
27:56 - See you in the next
coding challenge.
27:57 - Goodbye.
27:58 - [BLOWS HORN]
27:58 - [MUSIC PLAYING]