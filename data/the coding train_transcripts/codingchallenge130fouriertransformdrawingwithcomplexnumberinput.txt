00:00 - (whistling)
00:01 - - Hello it is time for
yet another video about
00:05 - the Fourier Transforming epicycles.
00:07 - Now you might be asking yourself, what?
00:09 - Why?
00:10 - I mean what's wrong with you?
00:11 - What's this weird,
unhealthy obsession you have
00:12 - with Fourier Transform?
00:14 - That's a good question,
I'm not so sure actually>
00:16 - But I do know that there
is absolutely at least if
00:19 - not more one thing that I
feel is very important to
00:22 - demonstrate to you as part of this series,
00:24 - this now three part coding challenge about
00:27 - drawing a path with the epicycle,
00:30 - epicycles and the Discrete
Fourier Transform algorithm.
00:33 - Alright, so, what I want you to look at
00:35 - here from the previous
coding challenge is this,
00:39 - this is the coding train,
train logo being drawn by
00:43 - two sets of nested orbits.
00:47 - And the frequencies,
amplitudes, and phases of
00:52 - these orbits are all calculated from
00:55 - the Discrete Fourier Transform algorithm.
00:58 - The Discrete Fourier Transform
algorithm (laughs) takes,
01:01 - it's over here and this is
going to look like what,
01:03 - are you crazy?
01:05 - I'm not going to watch
the rest of this video.
01:07 - But just stay with me or
don't stay with me but
01:09 - stay with me if you feel so inclined.
01:11 - Don't worry if this
looks crazy weird to you,
01:13 - I'm going to help you through it.
01:16 - And actually I did this
already and you might
01:18 - want to stop and go back and
watch that first video but
01:21 - what the Discrete Fourier
Transform does is it
01:24 - takes any signal and that signal,
01:26 - is sort of represented
here by x sub n signal.
01:31 - And you could think of
the signal as really just
01:33 - a list of numbers.
01:34 - One, five, ten, negative
three, seven, nine, four.
01:39 - Right?
01:40 - It's just a list of numbers
that signal these could
01:41 - be the x values of a path.
01:42 - They could be the y values of a path.
01:44 - They could be the values of a sound wave.
01:48 - There's so many types of
things that this could be and
01:51 - it takes this signal,
01:55 - and breaks it down into
01:57 - a collection of wave patterns.
01:59 - Each wave pattern has
a particular frequency,
02:02 - frequency meaning how many
cycles does it repeat,
02:06 - within one unit of time.
02:08 - So how many repeats per
second you might think?
02:10 - 60 hertz is 60 cycles per second.
02:13 - It also breaks it down into,
02:16 - so there's different frequencies.
02:20 - But there's also different amplitudes.
02:21 - And different phases.
02:23 - So is this wave pattern
like actually a little bit
02:25 - offset one way or the other?
02:27 - Is it much taller?
02:28 - Is it much shorter?
02:30 - It breaks it down and
I can visualize those
02:32 - wave patterns as rotating circles.
02:34 - (imitates bomb exploding)
02:35 - Okay.
02:36 - So that's a lot!
02:37 - That's a lot there.
02:39 - I'm sure you have questions.
02:40 - Maybe hopefully some of
this stuff is covered in
02:43 - a bit more depth in my
previous two videos,
02:45 - or of course in the
supplementary material about
02:48 - the Fourier Transform that
I'm including as links in
02:50 - this video subscription,
I've talked about those
02:52 - way too much but in
particular I'll highlight
02:54 - the three blue, one brown video about the
02:55 - Fourier Transform that you might want to
02:57 - check out which goes
into this in more depth.
02:59 - Now!
03:00 - So here I have two sets of signals.
03:02 - I have x's.
03:04 - Oh no this is y actually, I have y's.
03:06 - And over there I have x's.
03:08 - I treat them separately, I
apply the Fourier Transform to
03:11 - each and then I render out
these rotating circles and
03:15 - get this path.
03:15 - What I want to do now is treat,
03:19 - the signal,
03:23 - the signal is not one,
03:26 - a list, a vector,
03:28 - an array of numbers.
03:31 - It is an array of pairs of numbers.
03:34 - So we could think of the
signal as x of a path.
03:39 - X one, y one.
03:41 - X two, y two.
03:43 - X three, y three.
03:46 - And this is a really useful
way of thinking about it
03:48 - because so much in
computer graphics is this.
03:51 - Vector graphics, scalable
vector graphics, SVG's.
03:55 - Those are really just defined
paths, collections of points.
04:00 - Now we can do all sorts
of crazy math if these
04:02 - points actually mean like draw
a Beziar curve between them.
04:05 - But I'm going to do this in
the simplest way and this
04:08 - is just if I had, this was my path,
04:13 - I would have three points.
04:15 - X one, y one, x two, y
two, x three, y three.
04:19 - And I would want to create
three orbiting circles to
04:24 - be able to render out this path.
04:26 - That's what I want to do.
04:27 - So how do,
04:29 - what happens when the pairs of
numbers go into this formula.
04:32 - Well guess what?
04:33 - If you watch my first
video, I talked a bit about
04:36 - how this is actually something
known as a complex number.
04:40 - A complex number is a number
that has two components.
04:45 - A real component, a real
number being the numbers
04:48 - we're kind of familiar
with more often (laughing).
04:50 - And quote, unquote, imaginary number.
04:52 - Now the fact that it's called imaginary is
04:54 - unfortunate naming, it's
somewhat misleading.
04:57 - But the idea is that it is
a real number paired with
05:02 - the number i.
05:03 - And the number i is the
solution to the problem,
05:07 - I squared equals negative one.
05:11 - So this is often referred to as an
05:13 - imaginary number because
it's kind of like what?
05:15 - The square root of negative one?
05:17 - You can't square something
and have negative one.
05:18 - But yet you can, there
is a solution to this.
05:21 - We can, that's a topic
for a Khan Academy video,
05:24 - a math video.
05:25 - But if I can treat,
05:28 - any one of these points
as a complex number.
05:30 - X plus,
05:32 - so x one plus y one i, then
and that's actually what
05:36 - I was doing before.
05:37 - I just was leaving out
the imaginary component,
05:40 - I just had a whole bunch of
x's and a whole bunch of y's.
05:43 - Always in the real component.
05:45 - So if I can actually
have this signal be in
05:48 - a list of complex numbers,
I could have this be
05:51 - complex numbers, this is
already a complex number.
05:55 - Then I just need to know how do I multiply
05:57 - two complex numbers together.
06:00 - You got that?
06:01 - Sort of, maybe?
06:02 - Let's go write some code.
06:03 - I'm going to go write some code.
06:05 - Because there's more to do over
here but I think we need to
06:07 - take a moment to breathe, absorb that
06:09 - a little bit and write some code.
06:11 - Alright so if we go back
to the code where I left it
06:14 - off from this previous iteration.
06:17 - Which I have right here,
06:19 - I had a particular java script file,
06:21 - fourier.js.
06:22 - Where I had my alimentation of
06:24 - the Discrete Fourier
Transform algorithm, dftx.
06:27 - X being exactly that x, sub n over there.
06:32 - The array of the signal,
the array of numbers.
06:35 - And then big X, being this,
06:39 - the array of complex numbers
that came out that I get
06:42 - the phases, frequencies, and amplitudes.
06:45 - Okay, so,
06:47 - what I want is to rewrite
this so that little x is
06:51 - actually an array of complex numbers.
06:53 - And I think one way
that I could do this is
06:56 - to actually put here,
06:58 - I'm going to write a complex number class.
07:01 - Now if you're paying attention
or if you've used p5 before,
07:05 - you might be thinking to yourself
07:07 - oh just use p5.vector because actually,
07:11 - I'm just going to swing on here over to
07:13 - the Wikipedia page about complex numbers.
07:16 - Look at this, this is how you
represent a complex number.
07:19 - It is a vector in the
complex plane where what we
07:23 - think of as the y-axis
is the imaginary axis.
07:26 - What we think of as the
x-axis is the real axis.
07:28 - And right here it says,
a complex number can
07:31 - visually be represented as a pair of
07:32 - numbers, a, b, forming a
vector on a diagram called the,
07:34 - I never knew this, Argand diagram.
07:36 - Oh look at that.
07:37 - More stuff.
07:39 - So I could just use the fact that p5 has
07:42 - a vector class but I kind
of want to take the time to
07:47 - really think this through and I need to
07:49 - do complex number multiplication which is
07:51 - different than just like a
vector dot product perhaps.
07:55 - (laughs) So...
07:56 - It's similar, but anyway,
so just let me do it myself.
08:00 - So I'm going to write a constructor.
08:02 - I don't know that I
should call these a and b.
08:05 - Maybe, so one way to do it is a plus bi,
08:09 - I think though I might stick
with the real and imaginary.
08:13 - So let's say real and imaginary but
08:16 - I'll leave these a and b.
08:18 - So this is my complex number.
08:19 - So this is what I wanted to do first.
08:21 - So I just have a complex number and if
08:25 - I go back to the main sketch,
08:29 - instead of having two
separate x and y variables,
08:33 - I'm going to get rid of this.
08:34 - Let's get rid of y,
08:37 - everywhere in this code.
08:40 - In a weird sort of way I'm
kind of simplifying things.
08:43 - Let's get rid of y everywhere.
08:47 - Well I'm not going to
worry about this right now.
08:49 - I'll come back to this in a little bit,
08:51 - let's comment that out.
08:54 - And let's, so what I had before,
again you probably want to
08:56 - watch the previous video as
I have this big file that
09:00 - just has a ton of x, y
points for the path of
09:02 - the drawing and I separated them into
09:04 - separate x and y's and
now what I'm actually
09:06 - going to do is say,
09:10 - constant c equals a
new complex number with
09:15 - the real component as the x
and the imaginary component as
09:20 - the y and then I'm going
to push that into x.
09:25 - So that array is now an array of
09:28 - complex numbers with the x and y's.
09:31 - And in fact then I want
to go here and say look,
09:33 - you know what?
09:36 - I don't need to treat these as
09:38 - separate real and imaginary components.
09:40 - I have this idea, I'm going
to call it like the sum.
09:45 - As a new complex number with zero, zero.
09:49 - Then the idea is I could
say sum dot real plus
09:52 - equals sum dot imaginary plus equal.
09:55 - Right I'm going to treat this as
09:57 - a complex number object
with two components.
10:02 - The problem is this is no longer correct.
10:06 - I mean everything is right
but this no longer flies.
10:08 - This asterisk is multiplication.
10:11 - Cosign of phi is a floating point number,
10:15 - it's like a complex number
with no imaginary component.
10:18 - X, previously, x index n
was just a single number.
10:24 - So I need to rethink how these,
10:28 - because this is now a
complex number how do
10:30 - I multiply a complex number
with another complex number?
10:33 - I have to completely rethink this.
10:36 - So the next step is for us to
10:38 - work out complex number multiplication.
10:41 - So typically,
10:45 - if I'm going to,
10:48 - if I'm going to want to
implement complex number
10:51 - multiplication in my source
code I could actually
10:53 - just look up the formula
for it and put in the code.
10:56 - But I don't know, I got a
little extra time today.
10:59 - I started early today.
11:00 - Let's actually do it here.
11:02 - So if I have two complex numbers,
11:04 - let's say I have a plus bi.
11:08 - And I want to multiply
that and often reference,
11:10 - this is references the dot product.
11:12 - This is exactly what I
have here by the way.
11:13 - I want to multiply that by,
let's call that c plus di.
11:21 - Then how do I do that?
11:22 - Well guess what?
11:24 - What's this multiplication
property called, commutative?
11:28 - (laughing)
11:29 - Record scratch sound.
11:31 - (imitates record screeching)
11:31 - A commutative is the
property of multiplication or
11:35 - addition where I could
these in either order and
11:37 - I would get the same result.
11:38 - The distributive property is
the one that I'm looking for.
11:41 - Where I can say a times, well this,
11:44 - a is going to distribute
multiply times c plus this.
11:47 - So I'm going to say a
times c plus adi, right?
11:53 - A times c plus a times di plus,
11:57 - bi times c which is I could write as bci.
12:03 - Plus, look this is crazy
this is the fun part.
12:06 - Plus bi times di,
12:10 - which is bdi squared.
12:13 - Hey guess what?
12:14 - Remember how I wrote up on the board
12:16 - over here i squared equals negative one?
12:18 - By the way somebody pointed
out that the traditional way
12:20 - you might see this written is like,
12:21 - i is the solution to x
squared plus one equals zero.
12:25 - You could see that's the same thing.
12:27 - X squared equals negative one.
12:28 - Or you could also think of
it as the square root of
12:30 - negative one although somebody,
12:31 - YouTube comment I had
earlier said that's not
12:33 - a good way to describe it but whatever.
12:37 - This is negative one, so guess what?
12:39 - This becomes negative one which
means this is just a minus.
12:43 - And now a complex number is
real and imaginary components.
12:47 - What's the real component?
12:49 - The real component is ac minus bd.
12:53 - And the imaginary component,
also I could pop out
12:56 - that distributive property
again as a, whoops ah!
13:03 - Ad...
13:06 - Plus sorry, plus bci.
13:10 - So this is the real component and this is
13:14 - the imaginary component.
13:15 - We have just done, I don't know what is y,
13:19 - I just can't believe this
is the coding train first.
13:22 - Complex number mathematics.
13:23 - Now the truth of the
matter is I could probably
13:26 - spend a whole video,
many videos building out
13:29 - an entire complex number class.
13:32 - But I'm just going to
stick to what we need,
13:33 - which basically is just
the multiplication.
13:36 - Alright just in case, just to be sure.
13:38 - I quickly Googled, how do
you multiply complex numbers?
13:41 - And the same notation is here and
13:43 - the same answer dare I say is there.
13:45 - And then I was also reminded
also by the chat, that there is
13:48 - an acronym FOIL, for a
way of remembering this.
13:52 - First, Outer, Inner, Last.
13:55 - (bell ringing)
13:55 - Hah I looked it up I figured it out!
13:58 - First is you first
multiply a and c together.
14:02 - Then you multiply the outer.
14:04 - Which is a and d, right?
14:06 - Oh wait, hold on, hold on.
14:07 - First,
14:10 - first, outer,
14:13 - inner, last.
14:15 - First, outer, inner, last.
14:19 - We've got a new coding train
song called FOIL, FOIL, FOIL.
14:23 - (bell ringing)
14:24 - Alright it's time now, what we can do is
14:27 - take this result that we've got here,
14:30 - and add it to the complex number class as
14:34 - a multiplication function.
14:35 - So let's imagine I am saying I have
14:37 - a complex number dot multiply
another complex number.
14:40 - Which I'll call c.
14:42 - And so the one complex number is this,
14:44 - and the other complex number is c.
14:46 - So I need to make the,
14:50 - the real component is,
14:53 - this real component times,
14:56 - I'm looking over there on the
white board at this formula.
14:59 - Times c,
15:02 - is the other's real component,
15:05 - minus this real component,
15:09 - no, yes,
15:10 - no, no, no, this imaginary
component (laughs),
15:13 - is written as b over there.
15:16 - Times the others,
15:19 - d is its imaginary component.
15:22 - Okay.
15:23 - And then the imaginary component is
15:26 - this real component times the
other's imaginary component
15:31 - plus this imaginary
component times the other's,
15:37 - let's see,
15:38 - c, c, c, is the other's real component.
15:45 - Let's take a moment to
meditate on that and wait for
15:47 - the chat to tell me I did it wrong.
15:49 - (laughs)
15:50 - And then I'm going to say return,
15:53 - a new complex number with
this real component and
15:56 - this imaginary component.
15:57 - Okay.
15:58 - So now,
16:01 - I should be able to say...
16:06 - Sum.add, x index n,
16:13 - oh I need a new complex number.
16:14 - Okay so I also need, now I
need to make a complex number.
16:21 - I'll call it c.
16:23 - For what?
16:25 - I need to make a complex
number that is cosign,
16:29 - of this and negative sign of this, okay?
16:32 - So this is the,
16:35 - I did this before but I
just never bothered to
16:36 - separate it out.
16:37 - So my complex number is
a new complex number with
16:41 - cosign of phi and
negative sign of the phi.
16:46 - That's the complex number.
16:48 - And then the,
16:51 - if I take, sorry x, sum.add
16:55 - x of n,
16:58 - dot multiply c.
17:00 - So I want to add up,
17:04 - this complex number
17:05 - multiplied with c added up to the sum.
17:08 - What does that mean?
17:09 - I need an add function.
17:11 - And so if I go back to
the Fourier class up here.
17:16 - I can write an add
function which also takes
17:18 - a complex number and I just add
the real components together
17:24 - and the imaginary components together,
17:30 - like this.
17:30 - Now I've done something
sort of terrible here where
17:32 - the add function adds to,
17:35 - (laughs) this particular
complex number rather than
17:38 - returning a new one and
the multiply function
17:40 - returns a new one.
17:41 - And that's definitely an opportunity for,
17:44 - (upbeat alternative music)
refactoring this later.
17:46 - But I'm going to just leave that for now.
17:49 - This is not good object-oriented
programming design,
17:52 - maybe I won't want it to be static,
17:53 - but I'm going to leave that as is.
17:54 - Woo, okay.
17:56 - Then I can say sum, and
I'm just going to do this.
18:01 - Let's just leave this, I
could write a divide function,
18:05 - but I'm just going to leave this as this.
18:07 - And I think, dare I say, this is now done.
18:10 - This is now the version,
18:14 - and somebody in the chat is telling me
18:16 - I've made a mistake so hold that thought.
18:17 - This is the version of this
algorithm where this array is
18:23 - no longer just an array of
floating point numbers but
18:25 - is an array of complex numbers.
18:27 - Ah yes, this is c.
18:28 - I was saying other in my
head but it is c, thank you.
18:34 - So let's just see, dare I say,
18:38 - let's just console log
Fourier x and see what I get.
18:45 - Re is not defined, Fourier line 33.
18:49 - I'm sure I forgot, oh boy, oh boy.
18:52 - I forgot (laughs),
18:54 - that now all of this is in an object.
18:58 - Again I should put in
the complex number class,
19:03 - a magnitude function.
19:04 - And an angle function, but
I'll just do it this way.
19:08 - And then I have to say this.
19:11 - I'm just going to, this really
should be refactored but
19:14 - I will leave it like this
just to see if it works.
19:17 - Great, so here we go and we
can see what does it look like.
19:21 - I have a real component, I have
a frequency, I have a phase,
19:24 - I have a real, where is
the imaginary component?
19:26 - Huh?
19:27 - Okay let's go back, ah,
imaginary component.
19:31 - Let's try that again.
19:32 - I have in each one of
these, a real component and
19:36 - an imaginary, you can't see this.
19:37 - A real component and an
imaginary component, a frequency,
19:40 - a phase, and an amplitude.
19:41 - Those are all the things I need.
19:43 - Now, we're not going to
know if this worked 'till
19:45 - I try to draw it.
19:46 - All these numbers they're there.
19:48 - There's no not a number.
19:49 - But I'm just going to hope.
19:53 - (drum beat)
19:55 - There's a lot more code
for me to write before
19:56 - I can actually run it.
19:58 - So this timpani sound is premature.
20:01 - Alright so a couple things,
20:02 - one is it's complaining
to me that there's some
20:06 - leftover Fourier y in sketch line 58.
20:10 - Oh okay well that's just the length and
20:11 - we have Fourier x now.
20:14 - Whoops, ah!
20:16 - No errors.
20:19 - (laughs) This is a long timpani sound.
20:21 - So I just need to do the epicycles.
20:26 - This is stuff I wrote in the
previous coding challenge.
20:28 - It's calculating all
the epicycles based on
20:30 - a particular Fourier series
that was calculated from
20:34 - the Fourier transform.
20:35 - I don't need separate vx and vy.
20:39 - So and I can just basically,
20:42 - this is actually simpler now,
we don't need these lines.
20:45 - And what I should be able to do is there.
20:49 - It should actually just be this,
20:50 - ironically it's a lot simpler, right?
20:52 - 'Cus all I need to do is
get all the epicycles,
20:54 - the epicycles return
this function epicycles,
20:58 - which I never liked that
I capitalized the c.
21:00 - So let's fix that.
21:02 - This epicycle's function
basically goes through and
21:05 - calculates all the xy positions
of the circles and angles.
21:08 - It was done before but the
same function should stand.
21:10 - And now,
21:12 - (rapid drum beat)
21:18 - (laughs)
21:24 - (celebratory orchestral music)
21:25 - Thank you, thank you.
21:27 - Great job, it is now,
21:30 - done, look at that!
21:32 - Woo!
21:33 - Alright so that is the Fourier Transform.
21:37 - Now okay, quickly, quickly, quickly.
21:38 - Let's not go just yet.
21:40 - I really vastly prefer the
version where the user has
21:44 - to draw their own thing.
21:46 - This is another version of
the coding challenge that
21:49 - I made where the user
just draws something.
21:53 - And very quickly let me bring in my new
21:55 - Discrete Fourier Transform
algorithm to this one.
21:58 - Just so we can see this at play.
22:00 - So what I'm going to do is
I'm going to go over here,
22:02 - to Fourier.js, I'm going
to paste it into here.
22:06 - And so I now have the new algorithm there,
22:08 - then I'm going to go into sketch.js.
22:10 - And the drawing is,
22:14 - so again I don't have x's and y's.
22:18 - Just the x's.
22:21 - And the x is a new complex number.
22:26 - With the x and y of the drawing,
22:30 - as a component.
22:33 - Just want to see how quickly
I can get this to work,
22:35 - then I'm sorting it.
22:37 - And then all of this is the
same and then here this is
22:41 - just creating the drawing offset by
22:44 - the middle of the screen.
22:45 - And then put that offset in
here, same sort of thing.
22:50 - I can just change this.
22:53 - I don't like that that function
had the capital c in it so
22:57 - I must fix that as well.
22:58 - A little refactoring now instead of later.
23:01 - I can get rid of these
lines and here we go.
23:04 - And now,
23:07 - 26 I'm missing a parenthesis.
23:10 - Ah, need another parenthesis here.
23:13 - And now alright let's see.
23:16 - (rapid drum beat)
23:17 - I'm going to draw a little cat.
23:20 - This is going to be really
sad when this doesn't work.
23:23 - It has to be a continuous path.
23:24 - It'd be interesting to try to do this
23:26 - without a continuous path.
23:32 - Ah!
23:33 - (foot stomping on the floor)
Oh!
23:34 - You can see it did it,
it calculated it but...
23:38 - (sad trombone music)
I need a better sound than
23:39 - that trombone thing, it's a little cheesy.
23:41 - I mean all of this is cheesy.
23:42 - Fourier y is not defined.
23:46 - I better not do an
elaborate drawing next time.
23:48 - (laughs) Before I,
23:50 - so let's just redraw it really quick.
23:51 - Okay now it works.
23:52 - Okay.
23:54 - (rapid drum beat)
23:55 - We'll do my cat now.
24:02 - (laughs)
24:11 - Hold on.
24:19 - (celebratory orchestral music)
24:23 - So now this really is the
end of the coding challenge.
24:27 - There it is.
24:29 - Fourier Transform of a
complex number series into
24:33 - orbiting epicycles drawing this beautiful,
24:37 - Meow, meow, meow, meow.
24:38 - Don't have a cat sound, it's a cat.
24:40 - Thank you very much for watching.
24:42 - If you make something from
this, please share it with me.
24:45 - One thing you might try is go look at that
24:47 - quick draw data set, so watch one of
24:49 - my previous coding challenges,
24:50 - or maybe the sketch RNN,
machine learning model.
24:53 - Those will be interesting things to
24:55 - combine with this, right?
24:56 - I think there's some
interesting possibilities there.
24:57 - Okay?
24:58 - (lips smacking) See you soon.
25:01 - (upbeat pop music)
25:08 - (bell ringing)