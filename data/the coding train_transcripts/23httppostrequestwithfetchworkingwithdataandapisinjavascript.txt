00:00 - [BELL RINGING]
00:01 - Welcome back.
00:01 - I don't know what you
did since the last video,
00:03 - but I went and got a haircut.
00:05 - Thank you.
00:06 - In this video, I am going
to do something important,
00:09 - a key feature here.
00:10 - What I want to do is take data
from the client, the latitude
00:15 - and longitude, and
send it to the server
00:18 - and have the server receive it.
00:19 - Ultimately, the point of
this is for the server
00:21 - to eventually save
that to a database.
00:24 - But I'm not there yet.
00:24 - I just want to say, the client
executes its own client side
00:29 - JavaScript, gets the
latitude and longitude,
00:32 - and sends that data to
the server and the server
00:35 - can just console log it.
00:36 - I'm going to need to
look at three things
00:38 - in order to do this,
I'm going to need
00:40 - to look at a concept
known as a routing,
00:42 - how do I set up a
route in express.
00:45 - This is the place, the end
point for the API, the address
00:50 - at which I will send the
data to and later also make
00:52 - a request to receive some data.
00:54 - I need to look at adding
JSON parsing to express.
00:58 - I need the route
when it receives
01:00 - data to understand
that data as JSON
01:02 - and make it readable in my code.
01:05 - And then I also need to look
at adapting the fetch function
01:08 - to specify a POST request, a
request that is posting data
01:13 - or sending data to the server.
01:16 - Let's start with the route.
01:17 - So I want to set up
a route on my server.
01:21 - So the way that I do
that is by specifying
01:23 - this particular route, will
either be a Get or a POST.
01:27 - In this case I expect
a POST request,
01:30 - so I am going to go
and say app.post.
01:33 - Now, once I have a post, I want
to specify both the address
01:39 - where I want to receive that
POST, as well as a callback
01:42 - function where I'm going to look
at the information coming in
01:45 - and send a response back.
01:47 - So let's set up
that address, let's
01:49 - set up the endpoint for
this particular route.
01:51 - Where I want to
receive the post.
01:53 - And I could call it anything
I want, like Unicorn, Cupcake,
01:56 - Rainbow.
01:58 - Let's call it Rainbow.
01:59 - All right, I'll give it a name
that's maybe more appropriate.
02:02 - I'm going to call it API.
02:03 - API because what I'm
really doing here
02:06 - is setting up an application
programming interface.
02:09 - This is my API for clients
to send data to me.
02:12 - Next, I'm going to set up a
callback, request response,
02:18 - and I'm using the ES6,
JavaScript ES6 arrow syntax.
02:21 - Just sort of a nice, clean
way of putting this in here.
02:24 - So the function is here and
it has two arguments, request
02:29 - and response.
02:30 - The request variable
hold everything
02:32 - that's contained within that
request, all the data that's
02:35 - being sent, any
information I need
02:36 - to know about that
particular client that's
02:38 - sending the information.
02:39 - The response is a variable that
I can use to send things back
02:43 - to the client.
02:44 - So I'm going to need
ultimately to do stuff there,
02:47 - but for right now,
I'm just going
02:48 - to say console.log
request, and I'm just
02:52 - going to leave it like that
because let's at least see
02:54 - if we can get this working
and see if we can see
02:57 - something console log there.
02:58 - The next step is to have
my client send something
03:02 - to this particular
endpoint with a post.
03:05 - I can now move over
to the client code
03:07 - and setup the post
itself using Fetch.
03:10 - So I want to fetch my post
over to slash API endpoint.
03:15 - So the client code,
remember, this
03:17 - is confusing, server
and index.js, client
03:20 - and index.html.
03:22 - I'm going to move over here.
03:24 - This, what I'll
do is I'll choose
03:25 - to send this latitude and
longitude as soon as I've
03:28 - received it.
03:28 - This is what I did in
the previous video.
03:31 - And so now, what I
can do is I'll setup--
03:33 - I'm just going to make
up an object called Data,
03:35 - and what I want to send is
the latitude and longitude
03:37 - inside of an object.
03:40 - So that's what I want to send.
03:41 - So you might think all I
need to do if I were just
03:43 - doing a regular Fetch, right?
03:45 - I just wanted to fetch
something, that's
03:47 - a Get, regular Get request
like I did in previous videos,
03:50 - I would then just say this.
03:53 - Hey, fetch me the
stuff from slash API,
03:57 - and I might actually do that
a little later when I just
03:59 - do a Get request and get the
data that's in the database.
04:02 - But right now, what I
want to do is send a POST.
04:05 - In order to send a POST, I
need a second argument here,
04:09 - which is just a
JavaScript object.
04:11 - I'm going to call it
options, and that way I
04:13 - can set it up separately
as a variable and kind
04:15 - of examine it more closely.
04:17 - The first property that
I need to put in options
04:20 - is the method that I'm using.
04:22 - And that method is a POST.
04:25 - Now, there's a
lot of information
04:26 - that you can put
here under Options.
04:28 - And if you want to look
at all the possibilities,
04:30 - I refer you back to
the MDN web docs.
04:33 - There's a nice page
here about fetch
04:35 - and we can kind of
see all the stuff.
04:37 - OK, what mode and
cash and credentials,
04:39 - but really what I need, what I
want, the key thing that I want
04:43 - is body.
04:44 - So the body of the POST
request is where I'm
04:47 - packaging up all of my data.
04:49 - And you can see here,
even though there
04:51 - are different ways to send
the data, what I want to do
04:54 - is send it as a string text.
04:57 - I want to stringify, take
the JavaScript object data
05:01 - and make it into a JSON string.
05:03 - So I want exactly
this right here.
05:10 - And there's one other
piece that's important.
05:13 - I am specifically sending
data in JSON format.
05:18 - So it's useful to specify that
in something called a header.
05:22 - A header is something that can
be packaged along with any POST
05:26 - or Get request that's moving
between client and server,
05:29 - and it's a way of adding some
additional meta information.
05:31 - You can read more about this
also on the Mozilla docs.
05:36 - Headers have a name,
a colon, and a value.
05:38 - And so the one that
I want to use here,
05:40 - I can actually
just go and grab it
05:42 - from here, which is this
content type application JSON.
05:46 - I'm going to grab
this and I'm also
05:49 - going to put this
here in my code.
05:54 - So even though there's
more that I could put,
05:57 - I the basic pieces
that I need are,
05:59 - hey, I want this data
to get sent as JSON.
06:03 - I want to tell you that
it's going to be JSON
06:05 - and I want to post
it to the API.
06:08 - So now we're good, right?
06:09 - So I get the location
data, I put it
06:12 - into a JavaScript object,
I package it as a POST,
06:15 - and I send it to my endpoint.
06:17 - And in the server, I
receive a console log.
06:21 - Let's see what happens.
06:22 - So I'm going to say node
index.js to run the server.
06:25 - I'm going to go
back to the browser,
06:27 - I'm going to refresh
my page, I probably
06:30 - should put some console
logging in the client to see--
06:33 - but presumably now,
it's sensing the server.
06:35 - I don't see an error here,
I go back to the server--
06:38 - whoa, so this is good news.
06:41 - It console-logged something.
06:44 - Oh, as you might have noticed,
there's a ton of information
06:48 - as I scroll through
this, crazily.
06:51 - While there might
be points at which I
06:53 - need to examine certain aspects
of all of the metadata that's
06:57 - part of the request, all
I really want to look at
06:59 - is the body.
07:00 - So let me now say
console log request.body.
07:08 - Now, one thing I should
mention, by the way,
07:10 - is notice how I have
to re-run the server
07:13 - every single time I change
it, there is a utility
07:16 - that I could use called
Node Mon or node monitor,
07:19 - and I could install it
as a global node module.
07:23 - [MUSIC PLAYING]
07:26 - And if I choose to use it, I
can say now, Node Mon for node
07:30 - monitor index.js.
07:32 - And anytime I change the code
it's going to rewrite the--
07:37 - sorry, anytime I
change the code,
07:38 - it's going to rerun the server.
07:40 - So, for example,
I'm going to go here
07:42 - and say, console.log,
I got a request.
07:49 - And over here, you'll notice
it restarted the server.
07:51 - Sometimes you could run
into trouble with this
07:54 - if you're doing a
lot of things at once
07:55 - and I often prefer to manually
stop and start the server.
07:58 - But for right now,
this might be useful.
08:00 - So let me leave that
there for right now.
08:02 - Then I'm going to go over
here and hit refresh.
08:05 - And presumably it
sent the data--
08:08 - oh, it must have sent the data.
08:09 - Presumably it sent the data.
08:11 - I'll go back to the server.
08:12 - I got a request.
08:12 - Undefined, undefined.
08:14 - Why is it undefined?
08:16 - I forgot one of the steps
that I told you about.
08:18 - So I did two of them, right?
08:20 - I set up my route called
API to receive the request.
08:24 - I also modified
the fetch function
08:27 - to send data as a POST.
08:29 - What I did not do
was add to my server
08:32 - the ability to parse any
incoming data as JSON.
08:37 - The way to do that is with the
express function express.json.
08:40 - So, similarly to how I
used express.static to say,
08:44 - I want to host--
08:45 - I want this server
to host static files,
08:48 - I'm going to say
express.json because I
08:50 - want this server to
be able to understand
08:52 - incoming data as JSON.
08:55 - So In the code I want
to do just like I did up
08:58 - here, app.use
express.static, I'm going
09:00 - to say app.use express.json.
09:04 - And then I can actually
put some options in here
09:07 - to control or limit what
is possible in terms
09:11 - of receiving data.
09:12 - So all of that is documented
here on the Express website.
09:16 - Let's add just as an
example this limit.
09:19 - So Limit allows me to specify
the maximum size of anybody
09:23 - that's coming in.
09:24 - So I'll say a limit.
09:27 - Let's just say one megabyte
as a kind of starting point.
09:30 - So this protects against
flooding my server
09:32 - with huge amounts of
data, potentially.
09:34 - There's more to protecting
your server than just that,
09:37 - but we're seeing an
inkling of this here.
09:39 - All right.
09:40 - So now we can see
Node Mon has restarted
09:43 - my server a bunch of
times and I should
09:45 - be able to go back to the
webpage and hit Refresh.
09:51 - And it's going to get the
latitude and longitude,
09:53 - and now I should
see the server--
09:55 - ha-ha, I got a request and I
got the latitude and longitude.
09:58 - So the server has successfully
received the data.
10:03 - This is what I wanted
to do in this video.
10:05 - So in a way, I'm done.
10:06 - Oh, that's exciting.
10:07 - What I've actually
done here is pretty
10:09 - terrible in that it is required
that you complete a request.
10:15 - So if a Get request
or a POST request
10:16 - is coming into
the server, I need
10:18 - to do something to complete it.
10:20 - The nicest thing to do if
I'm trying to be polite here,
10:22 - which it's good for your
server to be polite and send
10:25 - a response back.
10:26 - But at a minimum, I can
just say response.end.
10:30 - So this is required
to do something.
10:32 - What I think that I would like
to do which makes more sense
10:35 - is say response.json, which is
a function that will send data.
10:41 - I can also say response.send
for just a short message
10:43 - as a string, but I
want to send maybe
10:46 - an object back with
some data in it.
10:48 - So I'm going to
do response.json,
10:49 - and then I would say--
10:52 - I could say like status.
10:54 - I'm just making this up.
10:56 - Success.
10:57 - And then maybe I'll just repeat
back what was said to me.
11:02 - This is the therapy
server, it listens and then
11:04 - it just repeats it back to you.
11:06 - So I'll say latitude,
lat, longitude, lon.
11:14 - So this is what I want to
send back now as JavaScript.
11:18 - OK.
11:19 - So then in the client I need to
do something to receive this.
11:23 - So if I go back to
index.html, what I have here
11:26 - calling the fetch function is
where I'm sending the data,
11:29 - and Fetch returns a promise.
11:31 - So I can just say dot then,
and then handle the response.
11:35 - Response console.log.response.
11:42 - All right.
11:42 - So let's take a look at
this in the browser now.
11:45 - I'm going to hit refresh.
11:47 - It's retrieving my
latitude and longitude,
11:49 - it's going to send
this to the server,
11:51 - and then here we
are, the response.
11:55 - Oh, boy.
11:56 - Look at this.
11:56 - Lat is not defined.
11:58 - Let's look at my code back
on the server-- oh, yes.
12:01 - These aren't a thing.
12:02 - Remember, everything
is in request.body.
12:05 - So what I could do
is say data equals--
12:08 - I could put this in
another variable.
12:12 - And then I could
just say data dot--
12:13 - I could just say
request.body.lat, data.lon.
12:16 - OK.
12:17 - There we go.
12:18 - Let's try this again.
12:19 - So the server should
be restarting now
12:22 - any time I make changes
because I'm running Node Mon,
12:26 - then I could just go back to
the client and hit Refresh.
12:29 - And there is, the response.
12:30 - Now, this isn't what
I was looking for.
12:32 - And if you recall from when
I first looked at the Fetch
12:37 - function in this whole series,
when Response comes back
12:42 - after a Fetch call, it
comes in as a data stream.
12:44 - So it's up to you to specify
how you want to read that, is it
12:47 - text, is it a blob,
is it json, and I
12:49 - want to read this as JSON.
12:51 - So I've got a handle
that in the client.
12:54 - And I could use
another dot then,
12:57 - but it might be nice to make
this an async function, right?
13:01 - This callback inside of get
current position can actually
13:04 - be an async function
with the async keyword,
13:07 - and then I can use--
13:07 - wait, so I'm going to say const
response equals await Fetch API
13:12 - options, then const json.
13:16 - I'll just maybe call it data.
13:18 - There's a wait response.json,
and then console log that data.
13:24 - OK.
13:25 - Now I didn't change
anything in the server,
13:27 - even if I did, Node Mon
going to rerun it for me.
13:29 - Now I should be able
to refresh here.
13:32 - Data has already been declared.
13:35 - I'm reusing-- I already
use data up here,
13:37 - so let's just call this json.
13:40 - One of the nice things
about using or let
13:43 - is it's going to enforce these
kind of things to not by action
13:46 - use the same variable.
13:49 - And there it is.
13:53 - Status success and
latitude and longitude.
13:57 - [BELL RINGING]
13:58 - We have completed this
feature to review.
14:01 - We have now a server
that hosts a static file.
14:06 - So when I go and load the
server into my browser,
14:10 - I see index.html.
14:12 - The JavaScript HTML locates
the latitude and longitude,
14:16 - sends that with a POST to the
server, the server receives it,
14:20 - console logs it out, and sends
it back saying, I got it.
14:24 - That handshake is complete,
the data is exchanged.
14:28 - Usually when I
finish these videos
14:29 - I like to give you a little
exercise to do, so here's one.
14:32 - The goal, what I'm going
to do with the next video
14:34 - is actually save the
latitude and longitude
14:36 - along with a timestamp
to a database
14:38 - so that I can keep this
history of all of my latitude
14:41 - and longitudes over time.
14:42 - Two steps along the way to
using a database is, number one,
14:45 - just make a variable, a
variable like an array.
14:48 - Every time you get that
latitude and longitude
14:50 - save that latitude and
longitude into an array.
14:53 - That is persistence.
14:54 - Of course, once you quit the
server and restart the server,
14:57 - it's lost.
14:58 - So another thing
you could try to do,
15:00 - and this requires
some detective work,
15:01 - is look up the Node
file system package.
15:04 - Maybe you could use the
node file system package
15:06 - to save all of the stuff in
that array to a text file.
15:09 - And you can always load that
text file, maybe it's JSON
15:11 - format, maybe it's plain
text, maybe it's even CSV.
15:14 - Also, while you're doing
this, whether you're
15:16 - saving the latitude longitude
to an array or a text file,
15:19 - you might want to add a
button to your HTML page
15:21 - so that every time you
click that button that's
15:23 - when you send the latitude and
longitude to the server itself.
15:27 - So this is something that
you can really start with,
15:29 - and I will actually implement
this and have two examples that
15:32 - show it just storing it an
array and then saving it
15:34 - to a local JSON file.
15:36 - But what I'm going to come
back to in the next video
15:38 - is a bit more direct.
15:39 - I'm going to use a database node
package called NeDB to actually
15:45 - save to a database, and I'll
talk about what a database is
15:47 - and what some of the advantages
are in the next video.
15:50 - So see you there.
15:51 - [BELL RINGING]
15:51 - [MUSIC PLAYING]