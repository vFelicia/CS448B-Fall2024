00:00 - all right it's time yes 8:00 I have
00:05 - never talked about es8 before but this
00:08 - video I'm going to look at something
00:09 - called a sink and a weight and it's part
00:14 - of es 8 which is es 2017 but anyway this
00:18 - is really what's often referred to as
00:22 - syntax sugar so basically we're not
00:27 - gonna get any new functionality but
00:30 - we're going to have a different way to
00:32 - write in asynchronous function that
00:34 - returns a promise that just makes things
00:37 - easier to follow and nicer I think I
00:40 - mean we can you can choose to decide
00:42 - whether it's better or not but I I think
00:44 - I like it it's new for me I haven't
00:47 - really worked with this until yesterday
00:49 - so let's see how this goes all right so
00:51 - just your review if you watched the
00:53 - previous video I wrote this function
00:55 - called delay this function called delay
01:00 - returns a new promise and uh ooh I
01:05 - there's one mistake here so this isn't
01:06 - that big of a deal
01:08 - once the promise is rejected I really
01:10 - should stop and not do anything else but
01:12 - this code keeps going and calls this set
01:14 - timeout it won't resolve the promise but
01:16 - still doing this weird set timeout so I
01:17 - could there's some options here I could
01:19 - say like return I could also I think
01:21 - what I'm just gonna do for my the way I
01:23 - like to do things is just put an else
01:24 - here so I'm gonna add that so this
01:27 - function receives a number creates a
01:30 - promise o receives an argument if the
01:33 - receives a parameter if the parameter is
01:35 - not a number it rejects the promise and
01:39 - throws an error if it is it calls set
01:42 - timeout and resolve the promise that way
01:44 - I can say after a certain delay like
01:47 - 1,000 milliseconds create a paragraph or
01:49 - catch the error so now what I'm gonna do
01:52 - is I'm gonna write delay es8 so here's
01:59 - the thing if a function returns a
02:01 - promise if a function returns a promise
02:05 - and what returns a promise the delay
02:10 - function returns a promise
02:13 - so I'm gonna do something weird here so
02:17 - I'm gonna what I want to do is called
02:19 - delay es 8 so I'm just I'm writing a new
02:23 - function I'm gonna call that this is
02:25 - gonna stay exactly the same this is
02:28 - gonna stay exactly the same now this is
02:29 - really weird and you know it in the next
02:31 - video I'm gonna do this with the word
02:33 - Nick and gif V example that's gonna make
02:35 - way more sense I probably should just do
02:37 - that now but I'm already going down this
02:38 - or you can skip to the next video if you
02:40 - want this is a little bit weird you
02:42 - almost want to forget pretend that delay
02:45 - isn't a function that I wrote but delay
02:48 - is a function that's part of some
02:51 - JavaScript library that I've imported
02:53 - and delay returns a promise so and I'm
02:58 - trying to think of a better name for
02:59 - this and delay es8 but I guess I'll keep
03:02 - that right now so what this allows me to
03:06 - do right if a function this function I'm
03:10 - taking a long time to get to this
03:12 - returns a promise if that's the case I
03:16 - can suddenly use this keyword a wait
03:21 - meaning just wait for the promise to
03:26 - resolve it's almost like it's kind of
03:28 - like writing blocking code so I can say
03:31 - a wait delay time a wait delay time then
03:40 - I can return now this is why I really
03:45 - want to do this with the fetch function
03:47 - because there's so much more this is
03:49 - like a very tiny little bit but this now
03:52 - should it's going to make much more
03:54 - sense when I actually have to do more
03:55 - steps to do anything just awaiting that
03:58 - I don't do anything after but this now
04:00 - will automatically return prophets now
04:02 - I'm missing an important piece let's
04:04 - just run this and see what happens I
04:06 - don't know if I like this video so far I
04:07 - might have to rethink this but I'm going
04:09 - I'm going I'm going with it let me
04:10 - refresh a wait is only valid in an a
04:14 - sync function oh dear so here's the
04:19 - thing the oh wait keyword kit just use
04:23 - it anywhere in your code like oh wait
04:25 - for this then do this then wait for this
04:26 - you have to write your own asynchronous
04:29 - function basically you have to write a
04:32 - function that returns a promise but
04:34 - rather than having to say new return
04:37 - return new promise the a think keyword
04:40 - just says hey do all that stuff kind of
04:43 - invisibly behind the scenes for me so
04:46 - now if I come back over here and I tag
04:49 - this function basically attacking is the
04:53 - wrong word but I modify by giving this
04:55 - function a modify or a sync I say this
04:57 - is an asynchronous function it's going
05:00 - to execute asynchronously and and when
05:03 - and return a promise after all after
05:05 - however many calls to a weight that I
05:07 - want so now let me just hit refresh here
05:11 - and this works again so this now is an
05:16 - asynchronous function so this and that's
05:20 - the reason why this is exciting
05:22 - is I can start to do this so I can
05:30 - sequence a bunch of things that are
05:33 - asynchronous that and and and some of
05:37 - these might actually return something
05:39 - and this now instead of having to chain
05:43 - all these different promises with then
05:45 - dot n dot then dot then dot then catch
05:48 - this catch that I could just do it all
05:50 - in one function and that function will
05:52 - return a promise so I think I don't know
05:56 - how much I don't know this was that
05:58 - useful to you um hopefully gives you
06:00 - kind of a sense but I think a practical
06:01 - example will make a lot more sense so if
06:04 - you remember this particular example
06:08 - look at what I had to do here I had to
06:10 - fetch from Wernick then get the response
06:13 - converted to JSON then convert that then
06:15 - get the word out of that then go to
06:17 - another API I'm gonna rewrite all of
06:19 - this in an asynchronous function using a
06:22 - weight and I think that's going to help
06:25 - make things make more sense so that's
06:27 - what's gonna be in the next video okay
06:29 - see you there maybe maybe not
06:35 - [Music]