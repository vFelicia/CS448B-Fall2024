00:00 - oh hello welcome to a coding challenge
00:03 - this coding challenge I am going to
00:06 - attempt something called breadth-first
00:08 - search now this is an example of an
00:11 - implementation in p5.js of breadth-first
00:14 - search it comes directly from this book
00:16 - rocking algorithms by Aditya why
00:19 - bhargava it's a wonderful book I highly
00:22 - recommend it buzz marketing books here
00:23 - on my youtube thing but I do want to say
00:27 - that's where I learned more recently
00:29 - about this algorithm and in practicing
00:31 - it implemented the example so what is
00:33 - breadth-first search so this video first
00:35 - of all is also placed in a series of
00:37 - videos about graph systems and search
00:40 - algorithms so you can image this video
00:42 - description go back to some of the
00:43 - introduction videos that will lead you
00:45 - up to here because just be here right
00:47 - now because I'm going to do everything
00:48 - from scratch with no knowledge but a
00:49 - graph system is a system of nodes and
00:52 - edges and you can see here the node now
00:54 - the nodes all have a name these names
00:56 - are exactly the names in that grokking
00:58 - algorithms book and they have edges so
01:01 - they have connections you can think of
01:02 - this as maybe a map of friends and their
01:06 - relationships you could also turn this
01:08 - into more like a maze
01:11 - type thing there's so many different
01:12 - ways you could sort of visualize this
01:14 - idea of a graph system and you'll see in
01:16 - some future videos that I actually made
01:18 - previously I do have some
01:19 - implementations of graph systems to
01:21 - create mazes but that aside what breadth
01:24 - first search is designed to do is find
01:27 - the shortest path between two nodes and
01:30 - it's something like this you know it's
01:33 - quite a simple problem to eyeball it we
01:37 - can see like if I want to get from you
01:39 - or me or whoever this person is to Tom I
01:42 - can see through Claire there are just
01:44 - two steps if I want to get to a node
01:46 - this through Bob is faster than going
01:49 - through Alice Peggy Bob onion so how do
01:52 - you figure this out it's called the ah-1
01:55 - algorithm for doing this it's called
01:56 - breadth-first search and the reason why
01:58 - it's called breadth-first search rather
01:59 - than something else that you might learn
02:02 - about or see in a future video called
02:03 - depth-first search is breadth-first
02:05 - search by definition looks at all the
02:07 - nearest nodes first sees it it finds
02:11 - what is looking for then looks at all
02:12 - the nearest one
02:13 - those first infuse what it looks as
02:15 - fines book as opposed to going all the
02:17 - way through I recently made a video
02:18 - about binary trees and search trees
02:21 - that's more like depth-first search
02:22 - because in the binary tree you just keep
02:24 - going to the left all the way to the
02:26 - bottom but here breadth-first we're
02:28 - looking at the nearest neighbors to
02:30 - start okay so what's the problem that
02:32 - I'm going to work with today you may or
02:35 - may not be familiar with I know if this
02:37 - is a thought experiment weird idea six
02:40 - degrees of Kevin Bacon there's actually
02:42 - a website it's called Oracle of bacon
02:45 - and I'm going to go to it right now and
02:47 - I don't know I needed I need an actor or
02:50 - I need an actor
02:51 - let's pick any Schumer and I'm going to
02:57 - pick a fine link okay Amy Schumer has a
03:01 - bacon number of two the shortest path
03:03 - between Amy Schumer and Kevin Bacon
03:06 - Amy Schumer was in the movie trainwreck
03:08 - with Marisa Tomei who's in the movie
03:10 - Crazy Stupid Love who with Kevin Bacon
03:13 - so this particular website has a massive
03:16 - database of movies cast and uses
03:20 - breadth-first search to find the
03:22 - shortest path between two actors and the
03:24 - thought experiment Evan Bacon has just
03:26 - been in so many movies that anyone could
03:29 - be within six degrees of Kevin Bacon I
03:31 - don't think I have an IMDB what's the
03:33 - what's the chance that Kevin Bacon -
03:35 - Daniel Shipman yeah infinity infinity we
03:39 - got to work on that come on help me out
03:40 - with this here I want my Kevin Bacon
03:42 - number to come on down okay so how are
03:45 - we going to do this now I would love if
03:47 - anybody so this is an experiment you I'm
03:51 - going to do this for you and hopefully
03:53 - teach you something about this and then
03:54 - maybe you could do something similar but
03:56 - with a different data set but I'm going
03:58 - to use just a toy data set essentially I
04:00 - manually created before coming here
04:03 - right now this data set so this data set
04:06 - has a few movies in it some of which
04:09 - have Kevin Bacon in it and some of which
04:11 - don't have Kevin Bacon it's organized in
04:14 - JSON format which is JavaScript object
04:16 - notation I do have some video tutorials
04:18 - about that if that's unfamiliar to you
04:20 - but I'll try to talk about that a little
04:21 - bit as I go through so let's let me move
04:24 - over to the whiteboard to figure out how
04:26 - we're going to work this
04:27 - so what I need to do in my program we're
04:31 - going to look at the algorithm itself on
04:32 - Wikipedia and start translating it into
04:34 - code but before we even do that what I
04:36 - need is I need a - I need a node I need
04:41 - a node object so in the end there's
04:43 - going to be Kevin Bacon there's going to
04:46 - be some movie and there's going to be
04:48 - some other actor so and then there's
04:52 - lots of other stuff so in order to keep
04:55 - track of these what I need is I need
04:57 - some sort of object I'm going to call it
04:59 - a node and that object establish called
05:02 - a value or a label or say a value it
05:06 - also needs each object needs to keep
05:08 - track of its edges which other knows is
05:13 - it connected to so we need edges and
05:15 - this will be an array I don't like these
05:18 - dashes here that look like - science so
05:20 - I don't know dot how looks like
05:22 - something else what they want these are
05:23 - this is the data now at its core this is
05:26 - very similar to my binary search tree
05:28 - that I mentioned which each node just
05:30 - has a left and a right but here each
05:33 - node could have just one connection zero
05:35 - connections ten connections now there's
05:36 - other pieces of data that the node is
05:38 - going to need I mean these are part of
05:40 - the breadth first search algorithm I'm
05:42 - just going to mention them right now
05:43 - because that whether in my mind one is
05:46 - we need to know a boolean has it been
05:48 - checked search or not like is this or
05:51 - looking for Kevin Bacon is this node
05:53 - been checked already to see whether it's
05:54 - Kevin take it or not so this is going to
05:56 - be true or false this is going to be a
05:58 - boolean and we're also going to want
06:00 - eventually we're trying to solve for
06:01 - that path so we're going to have nodes
06:04 - keep track of their parents meaning as
06:06 - I'm checking and good moving about
06:08 - through this graph system I want to keep
06:10 - track of where I came from what was the
06:12 - previous node so that when I find Kevin
06:14 - Bacon I can back up and find that full
06:17 - path so I want to keep track of the
06:18 - parent as well okay so we know we need
06:21 - an object that stores all this stuff so
06:24 - let me come back and start building that
06:26 - and I'm just going to put that so I have
06:29 - I have a JavaScript project set up if I
06:32 - go to the browser and refresh the page
06:34 - there's nothing on the page but I'm
06:36 - going to start adding some code so first
06:39 - thing I'm going
06:39 - do is I'm going to write a constructor
06:41 - function for a note object and I'm going
06:45 - to say I'm going to say this value
06:47 - equals something we needed that this dot
06:52 - edges is an array this dot searched is
06:55 - false it hasn't been searched and this
06:58 - dot parent I'm going to set it equal to
07:00 - no so I want to be able to whenever I
07:04 - make a node with this constructor
07:06 - function you know even though this by
07:09 - definition its parent will be undefined
07:12 - I mean it explicitly says the double
07:13 - just so I'm kind of keeping track of
07:14 - that okay so this is pretty good this is
07:17 - pretty good okay turtle it should be
07:19 - blank so maybe when I say new node I'm
07:21 - going to give it a value okay so this is
07:27 - good you know what I want to do I want
07:28 - to take this code and I want to put this
07:30 - in a file called a price shouldn't call
07:32 - it knows that - should I find we call it
07:35 - no touching okay okay uh so now sketch
07:42 - doesn't use so in P 5 P 5 has a set up
07:46 - function set up function is kind of like
07:47 - window page loaded type thing so that's
07:50 - going to be in sketch I'm also going to
07:51 - make here's the thing I'm going to make
07:54 - a graph object so I might have two
08:00 - redundancy or some things in my code in
08:02 - the list without a fixture here that are
08:04 - a little bit unnecessary but what I
08:06 - would like to do with the graph object
08:08 - is I would like to store an array of all
08:14 - the nodes and then I would like of all
08:18 - the nodes and I probably need you know
08:19 - what the graph really should be as a
08:21 - data structure it would be something
08:24 - like I could look up each node by its a
08:29 - photograph by its label by its value so
08:33 - this mode typically be something like
08:35 - you know a hash table where the the key
08:40 - might be Kevin Bacon and then I could
08:45 - with that key I would find out all of
08:48 - its edges its
08:49 - harren and all that other stuff so I
08:51 - want to be able to have I might not need
08:53 - this array because I could only don't
08:54 - play the algorithms to traverse the
08:56 - graph to find what I'm looking for but
08:58 - it might be useful to have this array if
08:59 - I want to visualize it or do something
09:01 - that I could just iterate over all the
09:02 - nodes really quickly there's going to be
09:04 - we're super done here but this is what
09:05 - I'm going to do so let's go and do that
09:08 - and I look forward to hearing from
09:12 - everybody later about how I'm not doing
09:14 - terrific like I'm going to say function
09:17 - graph this dot nodes is an array and
09:21 - this graph is an object an empty object
09:25 - so if you're beneath this object
09:26 - essentially as an associative array or a
09:28 - hash table and has a video about that if
09:29 - you're interested okay now I need to
09:31 - read the data that's the first thing I
09:33 - need to do so I'm going to use p5 has a
09:37 - function called preload which I can use
09:40 - to missus a VAR data and then I'm going
09:44 - to say data equals and this is a p5
09:46 - function called lo JSON where I could
09:48 - just pass in the name of my JSON file
09:51 - which is Kevin Bacon JSON Kevin Bacon
09:56 - jason jason jason ah what is it somebody
09:59 - will tell me I'm pretty sure from the
10:01 - comments that it's gifts though and not
10:03 - just I've been told that many a time
10:05 - okay
10:06 - so now I'm just gonna instead up I'm
10:07 - gonna say no canvas p5 makes the canvas
10:09 - by default but I don't need it and then
10:11 - I'm going to consult out log the data so
10:13 - let's just make sure the data is there
10:15 - we can see there it is so the data came
10:17 - in I'm an object which has an array
10:20 - called movies and each movie has a a
10:22 - property called cast which is an array
10:24 - of all the actors so that's great so now
10:27 - what I need to do is I need to make a
10:29 - node for every movie and every actor ok
10:34 - so I want to be able to parse through
10:36 - and read this list so the object has
10:39 - movies so I'm going to save our movies
10:42 - equals data movies then I'm going to
10:45 - loop over all the movies in that JSON
10:48 - file well I'm really not onto
10:52 - breadth-first search yet I'm just kind
10:53 - of gathering the data and I'm going to
10:55 - get and what I'm going to do is I'm
10:57 - going to get the movie equals and what
10:59 - was the movie the movie has a cast
11:02 - title so the title is also a node so
11:05 - once the movies movies index I title and
11:08 - cast equals movies index I cast so first
11:12 - I need to make a note VAR N equals a new
11:18 - node movies index I title ok
11:24 - so excited we can say that again movie
11:27 - so I need to make a movie node and then
11:30 - what I want to do in the graph is I want
11:33 - to say oh I want to say I'm going to
11:35 - make a graph object and then write the
11:38 - graph object is the thing that's going
11:39 - to keep track of all the nodes so I need
11:41 - to say at the beginning graph equals new
11:45 - graph and then what I would like to do
11:47 - is add this node to the graph so I'm
11:50 - going to take this node object which
11:52 - whose value is a particular movie and
11:54 - add it to the graph graphs add node and
12:00 - now can I just do this and get this to
12:02 - run tada no grass is not defined okay so
12:06 - first of all I forgot a bunch of things
12:08 - one is I forgot I need to add a
12:10 - reference to my node object javascript
12:15 - file and the grass object javascript
12:16 - file that's one problem number two add
12:19 - node is not a function this doesn't just
12:21 - exist it's a function that I need to
12:23 - write so I'm going to attach a method to
12:26 - the grass object using the prototype I
12:29 - have a video about what prototype is if
12:31 - that's not familiar to you grasp that
12:33 - prototype add node equals function ok
12:38 - now what comes in a node so what do I
12:42 - want to do okay so I need first couple
12:46 - things one is I want to save this node
12:47 - dot push that node so any node that
12:50 - comes in I want to put it in the array
12:52 - because I want to store all the nodes in
12:53 - a range might be necessary stuff doing
12:55 - that it's a safety mechanism then I also
12:57 - want to have a lookup of the node based
13:01 - on the name so the movie name needs to
13:04 - be the key for that node object so this
13:07 - is going to look a little bit weird but
13:08 - I'm going to say title equals and dot
13:12 - title the dot value right
13:13 - no that title is stored in the nodes
13:15 - value then let's say this graph index
13:19 - that title equals that node so this is
13:24 - me putting this is node into array and
13:30 - node into you know it's not really a
13:34 - hash table cuz it's JavaScript but I'm
13:35 - thinking of it as like a hash table okay
13:37 - so that's good I've got the UM I've got
13:44 - see what do I have the movies okay let's
13:46 - now add the actors what I'm gonna do in
13:49 - this first part is I'm going to add all
13:50 - the data to get the graph set up and
13:52 - then I'll take a break and we'll be a
13:53 - second part of this video which will be
13:55 - the actual implement the algorithm okay
13:57 - so now the cast for I need another loop
14:00 - I can't use I so we use J the cast
14:04 - length J plus plus and now I need to
14:08 - make a node I'll call this a you know
14:12 - actor equals cast and that caught sorry
14:15 - cast index I yes the strings are just
14:19 - there in the array
14:20 - let me just console log everything so
14:22 - make sure I'm getting all the that's
14:25 - comes that's correct what I'm thinking
14:27 - here okay so we can see that okay I use
14:31 - index I like why is it Steve Guttenberg
14:33 - 14 times because this needs to be J okay
14:39 - so now okay so now you can see how
14:41 - that's be iterating over all the movies
14:43 - and the actors so now what I need to do
14:45 - is I need to say var actor node equals a
14:51 - new node with that actor name and then
14:55 - grasp add node actor node so just like
14:59 - for every movie add the movie then add
15:01 - all the actors wonderful okay so now
15:05 - let's also at the end of setup now let's
15:08 - say console dot log graph just so we can
15:12 - look at what's in there and I don't need
15:14 - to console log to data anymore I feel
15:16 - confident about that so look and I don't
15:19 - need to console that log the actors
15:21 - anymore so let me go ahead so this is
15:24 - the graph you can see it's an array it's
15:26 - got an array of 70
15:27 - or nose it's also got a whole bunch of
15:29 - objects which all have that actor name
15:32 - or the movie name as a lookup so this is
15:34 - good I'm kind of almost there
15:36 - like what do I have so far I have a
15:38 - graph object which stores all these
15:41 - notes only it looks like this I haven't
15:45 - done any of the edges so what do I need
15:47 - to do every movie needs to be connected
15:50 - to every factor that's in that movie
15:53 - so I need some way of setting edges so
15:56 - the edges for each node should be a list
15:59 - of other nodes that it's connected to so
16:01 - let me see if I can do this so yeah if
16:04 - I'm thinking about this code wise what I
16:07 - want to do here is for every actor when
16:09 - you call this movie node I want to say
16:14 - something like movie node dot connect
16:17 - actor node so I want to connect the
16:21 - movie to the actor the other thing I
16:22 - want to do so this is a question that
16:24 - comes up with these kind of algorithms
16:25 - is the graph does the graph only go in
16:28 - one direction or your things going to
16:30 - directions so in this case I want to be
16:31 - able to go in either direction so let's
16:33 - let's we need to add this connect
16:35 - function or add edge maybe I should just
16:37 - call this add edge because I've add node
16:39 - now have an add edge function okay here
16:41 - in node so now I want to add to the node
16:45 - object a function called add edge and it
16:50 - gets another an alcohol to neighbor and
16:53 - then I just want say this edges dot push
16:57 - neighbor simple as that all I need to do
17:01 - push the name it now hold on a second
17:04 - we've got a problem
17:06 - I just realized we have a problem the
17:09 - whole point of this is that actors can
17:12 - be in multiple movies right so here I am
17:16 - always always always making a new actor
17:20 - node now I know I can't have two
17:22 - instances of the same movie in this data
17:25 - set but I could have two instances of
17:27 - the same actor so whenever I go through
17:30 - the cast I need to figure out if thick
17:32 - node already exists if the node R exists
17:35 - I shouldn't
17:36 - a new note so I want to say if graph
17:41 - contains actor then actor node let's
17:50 - save our actor note I was good set an
17:53 - actor no to null for a second if graph
17:56 - contains the actor then I want to say
18:00 - graph dot get node actor or something
18:04 - you know what I could do is I could say
18:07 - var actor node equals graph get the
18:11 - actor get node so I could just have a
18:13 - function that says get node and if that
18:16 - function will return null if the actor
18:18 - is not in there so then I could say if
18:20 - actor node equals null then I make a new
18:29 - actor node so what do I need to add here
18:33 - I need to add a get node function into
18:35 - the graph so let me add that so let me
18:38 - say graph dot prototype dot get node
18:42 - equals function and what do I you want
18:45 - to do I want to look up and so this is
18:47 - like a actor so I want to say what do I
18:53 - say VAR n equals this grass look up IV
19:00 - actor and then return n so this is going
19:08 - to get undefined right it's not going to
19:10 - return null so I should actually say in
19:13 - the main program if actor node equals
19:15 - undefined cloth exhausted this is
19:18 - exhausting are you still watching this
19:20 - video I need to take a nap but I've got
19:23 - to finish this it's also getting late
19:25 - okay maybe you just woke up and you're
19:27 - having a nice little sip of tea and
19:28 - watching this video okay I think this is
19:32 - going to work I might have made a
19:33 - mistake but let's take a look refresh
19:38 - okay no js' line eight there is an error
19:42 - oh this should say equals function and
19:45 - just have the wrong syntax so now let's
19:48 - look at this
19:49 - the grep the nose so let's look at any
19:51 - given node this is mickey rourke
19:54 - it doesn't have any edges so what did I
19:56 - forget the edges have to go both ways so
20:00 - this edges push neighbour and neighbor
20:05 - edges dot push this both directions so
20:13 - let's try that again refresh let's look
20:16 - at a just arbitrary node Kevin Bacon
20:19 - which is connected to that what did I
20:22 - just do like Kevin Bacon up which is
20:26 - connected to Flatliners Footloose and
20:28 - diner and if I look at zero which is
20:30 - diner it's connected to all these other
20:34 - actors which are also connected to other
20:35 - things so I think this is right I'm
20:37 - pretty sure I have the data correct
20:41 - anybody want to say otherwise
20:43 - instead I'm gonna move on to part two so
20:46 - now we could actually do the algorithm
20:48 - right so this we're really nice if I had
20:50 - a visual example right so one of the
20:53 - edge this I will link to this code
20:55 - example is that well which is using a
20:56 - force directed graph to like arrange it
20:58 - and as an exercise you can even stop
21:01 - here and just try to like visualize this
21:03 - graph not the easiest problem I would
21:05 - love to see your solution but I'm going
21:08 - to stop and what I'm going to do in the
21:09 - next video is I'm going to implement the
21:11 - breadth first search algorithm and when
21:14 - I come back at the beginning of it if I
21:15 - found any mistakes I'll let you know