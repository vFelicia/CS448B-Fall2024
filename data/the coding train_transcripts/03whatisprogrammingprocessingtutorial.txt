00:04 - We got a question, we just gotta 
get this out of the way.
00:06 - "What is programming?" I mean really...
00:09 - that answer will come about... the real
answer to that question
00:13 - reveals itself the more you do
programming.
00:16 - But let's talk about it kind of in general
for a second, the thing we have to
00:20 - realize is
00:20 - okay... I wish I had like Google glasses on,
I could just like POP
00:23 - show you what I'm looking at, but that
computer, there's a computer over there.
00:26 - It's not very smart, it's incredibly
powerful, it's kind of amazing that they
00:31 - exist, and that they can do all this stuff
00:33 - but it doesn't know how to do anything.
At all.
00:36 - Nothing! It needs human beings
00:39 - to write instructions for it to do
certain things -- to crunch some numbers, to
00:44 - draw certain colors to the screen --
00:46 - everything has to be written as
instructions for the computer.
00:50 - And this is really what it means to
program, to write those instructions,
00:54 - to write an algorithm. 
What is an algorithm? It's just
00:57 - a sequential list of instructions that
solve a particular problem.
01:01 - An algorithm for example -- I can't believe
I'm going to use this as an example but
01:06 - you know "you put your right hand in,
01:08 - you put your right hand out, you put your right
hand in and you shake it all about".
01:12 - You know "Hokey Pokey". It feels really
ridiculous to do but that,
01:16 - that's a program. Not for a computer to
follow perhaps but for a
01:20 - toddler. As you may be painfully aware
these videos are not planned or
01:25 - rehearsed!
01:26 - That might be a good idea to start doing but
I went off on a tangent about the Hokey Pokey
01:30 - I don't edit them either but this is a
moment we're editing.
01:34 - So let's let's just sort of think of another
example here, OK?
01:38 - So let's say that you need to...
01:41 - you've met somebody who has very poor
dental hygiene(?) and they
01:45 - never brush their teeth, and you need to
explain to them
01:48 - how to brush your teeth. Well, how would
you do that? You might say
01:51 - "you know the toothbrush, put toothpaste
on it and like brush it back and forth".
01:55 - Right? That might be some instructions.
But what we have to realize with programming,
02:00 - and one of the things that makes programming
02:01 - hard, is this fact that the computer
doesn't have any intuition
02:04 - or ability to -- you know -- to communicate
02:08 - from human being to another human
being with instructions. There's body
02:12 - language, there's intuition, there's
02:13 - all sorts of ways that we communicate
02:16 - without kinda detail and specificity.
Writing computer programs,
02:21 - you need that specificity and that's
one of the things that's going to make it
02:25 - hard I guess, is
02:26 - understanding the syntax and the
fact that if I say...
02:29 - um... "teeth your brush", you could probably 
figure out -- that sounds a little weird --
02:34 - that I meant to say "brush your teeth".
02:36 - But a computer, you know, if you just left
out one word, one
02:40 - letter, one semi-colon, one piece of
punctuation, the whole thing's just
02:45 - not going to work at all and that's
going to make things kinda challenging.
02:48 - The other... the so... but let's return to
this brushing your teeth. So let's let's
02:52 - actually be even a little bit more
specific. We might say
02:55 - you know the first step is "locate
02:57 - toothbrush", right?
03:02 - The next step is "locate toothpaste". I
don't know how absurd we need to get
03:07 - you know... pick... you know, you know, 
we could say like
03:11 - "move finger one away from thumb".
03:14 - You know, "Use the fingers to pick up the
toothbrush", right? We could get so crazy
03:17 - specific. But you know,
03:18 - we need to say like "squeeze the
toothpaste onto the toothbrush", right?
03:22 - There's just a sequence of steps here.
03:24 - And you know rather go through this
myself you might take this as a little
03:28 - exercise to
03:29 - yourself -- you know, really try to do
this, and then you know, find a
03:32 - very willing and kind friend to try to
follow the instructions literally and
03:37 - see like
03:38 - did they perform the program correctly?
Were there are bugs in your system,
03:41 - right?
03:42 - You know how how does that
really work? But I want to mention a few
03:46 - other things about
03:47 - this. So let's say um...let's 
consider the following
03:54 - What if I said even before this step
03:57 - "If it 9 a.m. do this."? Right, so
04:00 - if it is 9 a.m.
04:04 - locate your toothbrush, locate your 
toothpaste, start these steps. So these are the
04:09 - things that we...
04:10 - that I'm just starting to point out,
the fact that programming,
04:12 - it isn't just a matter of saying 
"do this, do that,
04:16 - do this". There are... there's logic, there's
04:19 - there's there's a sort of sophisticated
logic that possible here, where
04:24 - we start having conditions "if this
condition is met perform these steps".
04:28 - That's one of the things that you want to
start thinking about right? "If it's the
04:31 - morning brush your teeth.
04:32 - If it's noon... I don't know... stop making this 
video and go eat some lunch for God's sake."
04:37 - I'm feeling a little like... woozy
04:40 - but I think everything's gonna be fine,
don't worry.
04:43 - Okay, so that's another thing. The
other thing I might mention is that
04:47 - you might say "Okay, move...
04:48 - you might... we might have a step
which is somewhere further along,
04:53 - "Put bristles on front teeth."
04:58 - The next step is "Move
05:01 - bristles horizontally
05:05 - and rapidly back and forth." Or something.
I'm just making up these steps.
05:10 - "Move the bristles horizontally amd rapidly
back and forth".
05:13 - I don't know... is this really... am I really
here talking about how to brush your teeth?
05:17 - Oh my goodness. So you might do this, but
05:20 - but but one thing we might say here
also is "repeat
05:24 - number six
05:27 - ten times." Sorry, I'm just showing you that
05:31 - as you start to write out these steps,
think about "Are there conditions? Are
05:35 - there things that get repeated?"
05:37 - How would you really design
05:38 - this algorithm that has a beginning, a
middle and an end
05:42 - that someone could follow and no detail
would be lost?
05:45 - This is really the beginning of writing
a computer program. And if you think
05:49 - about
05:50 - making the game "Pong" you're really going to
be doing the same thing,
05:53 - right? You're going to be saying "Draw a
rectangle on the left side of the screen.
05:57 - Draw a rectangle on the right side of
the screen. Draw a
06:00 - rectangle... a circle... in the middle. Move
the circle towards the rectangle. If the
06:06 - circle hits the rectangle, turn
06:08 - the circle around, right?" This set 
of steps -- "If the circle goes past the
06:11 - rectangle, increase
06:12 - the score of the other player
by one", right?
06:15 - Try to write out a list of
instructions in English
06:19 - for the game "Pong". Now there's a couple
things I want to mention about this
06:23 - which is sort of exciting. One is
06:25 - we have just described this concept
06:29 - known as -- I don't think I spelled it
right -- "pseudo-codeo".
06:33 - Pseudocode. This is something
06:35 - that... uh... you will want to do in your
future life, unless you've already turned this off
06:41 - and you're bike riding or... I don't 
know, having a nice
06:45 - salad with a little... some nuts and 
cranberries is nice. But anyway...
06:50 - but pseudocode is something
06:52 - that you want to get used to doing, right?
The syntax of programing can be
06:56 - challenging,
06:57 - difficult and hard to do. If you can plan
out your code
07:01 - in English -- or whatever your language is,
whatever your language you think and
07:06 - write and speak in --
07:07 - then you can begin to design the
steps of your program
07:10 - in advance, which will help you when you
go to sit down to actually write the
07:14 - actual code. But the other thing this
brings up, which I think...
07:18 - I don't know if this has a real name
anywhere other than in my
07:21 - mind... but I'm going to say this thing 
called the 'philosophy
07:24 - of incremental development'.
07:28 - Here's the real reason why programming
is hard, why everything we're gonna do
07:33 - is going to be challenging and not going
to be just...
07:36 - you're not going to do it instantly and you're
going to struggle. You have a very very
07:41 - incredibly powerful
07:42 - thing in your head, which is your brain.
And you can think about all sorts of
07:47 - sophisticated systems and ideas and
07:49 - design ideas and come up with the steps, 
the pseudocode,
07:52 - and understand how stuff works, right? 
Maybe you haven't played the game
07:56 - "Pong" before, but if you have, you kind of
know how it works. You could describe it
08:00 - to me, you could understand,
08:01 - you could probably without watching a
single video anymore you could sort
08:05 - of describe
08:06 - how to write the computer program 
for "Pong".
08:08 - But actually putting that down into code, 
all at once,
08:13 - is kinda impossible. This idea
that you really need to get used to
08:19 - is taking an idea like "Pong"...
08:21 - let's say the project -- and and you're gonna
come up with
08:24 - hopefully much more interesting and exciting
creative ideas -- the project "Pong"...
08:30 - Ah, I just realized I forgot to mention all
the stuff in the introductory video, but
08:33 - I'll figure out how to fit
it in somewhere.
08:35 - The project "Pong", you wanna break that
down in your head
08:40 - into lots and lots of mini programs, right?
08:44 - Here's a mini program for you, 
one that draws
08:47 - a rectangle on the screen. One that moves
08:51 - the rectangle up and down, 
just with the keys,
08:53 - right? The up and down keys for 
example. Another program is one
08:58 - that just draws a circle in the middle
of the screen, that moves the circle,
09:02 - that turns the circle around 
when it... you need lots and lots
09:05 - of little pieces. A program that... 
um... you can
09:09 - hava a number appear on the screen that
can go up and down,
09:12 - maybe randomly. You need to divide "Pong" 
into lots and lots...
09:16 - "Pong" wasn't the best example... but 
you want to divide
09:19 - "Pong" into lots and lots of mini programs, 
and make all those mini programs
09:23 - one at a time. Then you can start to
piece them together.
09:27 - You can't just sit down, "Do do do do 
do do do do do do do...
09:31 - I'm writing code for an hour or
two.
09:33 - Finished. Done. Run. Ah, I have "Pong".
09:37 - You need to make lots and lots 
of mini steps, and
09:40 - accomplish them one at a time. Always run
your program, always make sure it's still
09:44 - working. Otherwise,
09:46 - if you write a ton of code,
and then run it and it doesn't work,
09:48 - where are you... how are you going to know what 
went wrong? Right? This idea of making
09:52 - little incremental changes, taking a
larger problem and breaking down into
09:56 - smaller pieces,
09:57 - this is how you going to make stuff. But
this is going to feel wrong to you
10:00 - because you understand how it all works, 
and it's going to seem almost very
10:03 - kindergarten-esque. Kindergarten is
a wonderful place by the way, we should all just
10:08 - live in perpetual kindergarten, we'd all be
much happier. I don't mean that in a bad
10:11 - way, but it's going
10:12 - to seem like I should be
able to move faster than this.
10:16 - I should be able to do this more quickly,
with more agility,
10:19 - but you have to think about it -- this is a
very very flawed
10:22 - analogy here -- but you think about
learning a new language,
10:26 - you know, a new foreign language,
you'e not going to pick it up
10:30 - immediately.
10:31 - It's going to be a long process, and the
same is true for learning this new
10:33 - language
10:34 - of writing code. Okay,
10:37 - so that's really "What is programming?"
Kinda what is your first
10:41 - program,
10:42 - how we're thinking about and how we're going to
approach all these problems
10:45 - as we begin to write actual examples, 
which we're getting to very soon.
10:49 - The nice thing about this is you can always
just stop and move right to it. I think
10:53 - the next video was gonna, I'm just going to
talk about different programming
10:55 - languages,
10:55 - and this language called Processing, and
why I'm using it in this video series, and what
11:00 - the pros and cons of that are.
11:01 - So that will be next.
11:03 - Whew. Pause