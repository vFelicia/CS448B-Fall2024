00:00 - Okay, I want to record one last video today
00:02 - it occurred to me while I was making that video about looking at how objects might communicate with each other. That there's a kind of
00:08 - a key principle going on in how variables are passed in as arguments to other functions
00:13 - that has been missed throughout all of these videos. So I don't think I'm going to have an example for this
00:18 - I'm just going to kind of dia... Talk you through this and diagram it and
00:22 - we'll see what's missing and what needs to be added and what's confusing but
00:25 - So I'm going to make up kind of a silly function almost a function that has no point
00:30 - I'm going to call it
00:32 - change
00:33 - and
00:34 - it's going to receive a
00:37 - single number as an argument and
00:40 - Inside this function, I'm going to say that value equals value
00:46 - times two.
00:48 - okay, so this function receives a number and and
00:53 - multiplies that number by two and stores it back in itself.
00:56 - So if I say int x. Can you see that? No you can't. Let me write it a little lower. int x equals
01:02 - 50 and then I say change
01:06 - x and
01:08 - Then I say print
01:10 - Line X
01:12 - What is the result of this print line going to be so let's think about it x has the value 50?
01:19 - change x means x goes into val
01:23 - So val now has the value 50 then val equals itself times 2 so val
01:28 - Now has the value of 100, but when I print x am I going to see 100 or 50?
01:34 - Think about that you know as the designer of the programming language. It's up to you to decide. What it should be.
01:42 - The Java Programming language on which processing is built on top of
01:46 - What we're going to see is the number 50. Why is that? This is known as pass by copy.
01:53 - When you pass a primitive value a number,
01:57 - integer, float
01:59 - ETC into a
02:01 - function you pass a copy of that value meaning in the computer's memory x
02:07 - is
02:09 - Referencing a place in the computer's memory with the value 50 then val is
02:15 - Referencing another place in the computer's memory with what the value 50 gets copied in there then over here
02:22 - val gets multiplied by 2. Val now equals 100, but x which is pointing to 50 is unaffected
02:29 - Pass by copy. The reason why I have bringing this up and to realize why this is so import..
02:34 - this is so important. Is if you pass an object into a function. It does not work this way. It works with something called pass
02:42 - by reference.
02:44 - So let's pretend
02:45 - There's a made-up particle object and that particle object just has an x and a y. So I'm going to say a Particle
02:54 - p equals new Particle... you know 50 comma 100. And
03:01 - then I'm going to say, change
03:04 - p and there's a function called
03:07 - void change
03:09 - which receives a Particle object call it a...
03:14 - blah. It just needs to be a different variable name, it's terrible. I
03:18 - hate that I just made up a variable name blah. Let's think of something particle... I'm going to call it some p, aP. A
03:26 - particle. aP. Now if I say aP dot x
03:31 - equals
03:33 - 300.
03:35 - What's happening? Okay, so...
03:39 - This is my equivalent of int x equals 50 change x now I'm saying particle P equals new Particle change p.
03:46 - This change function, I should've... instead of multiplying it by 2
03:50 - I'm just setting it to the value 300 and remember x
03:53 - was 50 and then we made a new variable val was 100. So here
03:57 - I have a particle p and it is pointed to somewhere in the computer's memory.
04:02 - Where both 50 and 100 is stored.
04:06 - Now here. I make a new particle. aP. Some p at tempP, whatever.
04:13 - I do not make a new object when you pass an object into a function
04:18 - You're passing the reference. The at... the location of the the data in memory, not a copy that data.
04:25 - So aP is actually pointing over here, and if I change...
04:30 - the aspects, parameters, data of that object like x becomes 300. I'm changing the original
04:38 - variable as well. Pass by reference, so in Java when you pass a
04:43 - primitive value into a function, as an argument you make a copy of it and the original variable is unaffected. When you pass an object
04:51 - into a function, the original...
04:53 - you're passing just a reference and if you change that object in the function it is also changed as well.
04:58 - Let me... let me show you an actual scenario where this matters. So if we come back to this...
05:05 - right. What if my... this is... this example where I'm just changing the background color so I'm going to...
05:13 - Save this as a version 2 and I'm just going to make a function called p1
05:19 - overlaps p2 and it's not going to return true or false anymore.
05:24 - Ok and in that function, it's just
05:27 - void. I can I'm going to do something if they overlap.
05:32 - And what am I going to do? I'm going to give?
05:35 - the
05:37 - the particle a color and
05:39 - that color is going to be...
05:44 - Black to start. And I'm going to say fill that color
05:48 - And when it overlaps I'm going to say other dot color equals red.
05:57 - otherwise other dot color equals...
06:00 - Black. So I know I'm doing this kind of quickly you may or may not be following along
06:05 - But let me show you why this is so important.
06:11 - Notice when they overlap this particle changes its color. I'm passing
06:16 - p2 into the function. A copy is not made.
06:20 - I'm passing the... a reference to the actual object and p2, the reference to that object, goes into other. And now I'm changing
06:28 - values of other. If I'm changing values of other that means I'm actually
06:33 - changing values of p2 and p2 is now going to be red.
06:37 - Incidentally I could say
06:40 - also, this objects color is green and let me give these each a little alpha...
06:54 - So if we look at this, you can see now...
06:56 - They're both black... one turns green, one turns red, one turns green, one turns red.
07:01 - The other thing to note about this is it seemed like in the original
07:05 - version of this program p1 overlaps p2 was equivalent to p2 overlaps p1.
07:11 - But now if I were to change that
07:13 - Since I'm giving them the p2 is now turning green and the other one is turning red.
07:17 - So there's a lot of goofiness going on here in this sort of like forest and fake example...
07:21 - But I think this is important to realize that if you're passing
07:25 - This object into a function you can actually change that object in the function itself, okay...
07:30 - So I don't know if this makes things better or worse. I think I just said that in the last video...
07:35 - But I'm kind of like today
07:36 - I just have this day where I'm wrapping up all these videos are trying to make extra little pieces of content, so
07:41 - This one's only like 7 minutes long which isn't so bad. ok see you later.