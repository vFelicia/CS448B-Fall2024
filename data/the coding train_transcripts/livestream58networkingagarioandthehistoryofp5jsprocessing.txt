00:00 - coding rainbow this is not really the
00:02 - first episode of the new season starting
00:06 - this fall in September although today is
00:08 - September 1st um mostly I'm going to say
00:11 - that because I feel very out of sorts uh
00:14 - I've installed some new software I'm
00:16 - trying some new things out it's been
00:17 - several weeks since I've done a live
00:18 - stream I'm planning to get officially
00:21 - fully rolling uh next week next Tuesday
00:24 - the day after Labor Day or possibly next
00:25 - Wednesday I am going to for the first
00:27 - time ever this fall establish a regular
00:31 - schedule so I will be having an
00:33 - appointed time every week once per week
00:36 - and I'm going to also follow I
00:38 - definitely don't want to use the word
00:39 - syllabus unless it's spelled s i l l y
00:42 - like syus um but uh I'm going to follow
00:46 - a plan so you're going to be able to see
00:48 - kind of what I'm going to cover each
00:50 - week over the span of this fall and what
00:51 - I want to use today is to kind of talk
00:53 - about my plans kind of get myself
00:55 - organized um uh and just make sure
00:58 - everything's still working so I can kind
01:00 - of get going next week um so I see that
01:03 - the chat is there uh I I forgot to tweet
01:06 - that I'm live again so if you guys don't
01:08 - mind bearing with me for a second I'll
01:09 - put on some music first of
01:12 - all can you hear that can you hear that
01:15 - Applause it's not real people applauding
01:18 - I have a new new system oh
01:21 - shoot hold on this I I'm embarrassed to
01:24 - admit that I'm a half an hour late today
01:26 - because I was trying to get some sound
01:28 - software working and the way that I
01:30 - wanted to do it did not work but this
01:32 - should
01:33 - work
01:37 - Applause theme
01:42 - song so um let me know how this audio oh
01:45 - uh so uh oh The Face Place The Face
01:48 - Place is not working but you know what
01:50 - I'm sort of done with the face place if
01:52 - you don't know what I'm talking about I
01:53 - I actually mean Facebook I think it's
01:55 - called um can you let me know please how
01:58 - is this going so I I I I'm hoping to now
02:02 - be able to use this mobile device known
02:04 - as a uh iPad IP aad
02:08 - aod um I had an Android device I was
02:11 - trying to get to work and it didn't
02:12 - really work for me um where I can just
02:15 - kind
02:16 - of uh do my sound effects because that's
02:19 - really why you're here apparently oh
02:22 - there's a hole in my shirt yes so I
02:24 - thought I would wear the coding rainbow
02:26 - t-shirt uh and I have some leads on how
02:29 - to make a uh more International Friendly
02:32 - uh t-shirt shipping possible um but
02:35 - unfortunately there's this green stripe
02:37 - in the rainbow and as this is a green
02:39 - screen I can show you here very briefly
02:41 - all right I'm actually standing in front
02:42 - of a green screen so this is what this
02:43 - shirt actually looks like but the
02:45 - problem is this green color is much too
02:47 - similar to the wall behind me so uh when
02:51 - I come back to here there's like a weird
02:52 - Little Slice so I don't know maybe I
02:54 - should button up
02:56 - here so that doesn't look so weird of
02:58 - course I could make it even weirder with
02:59 - my green headband but
03:03 - um all right so uh I yeah why do I use
03:07 - all Apple devices I don't have a good
03:09 - answer for that question
03:10 - someday someday I will Branch out into
03:13 - the world of non-apple devices I'm sort
03:16 - of like caught I'm caught I'm sucked in
03:17 - I can't get out I keep trying to get out
03:19 - but they keep pulling me back in I'm
03:21 - looking at the chat um okay so um I have
03:25 - a water in the other room give me a
03:27 - moment here
03:28 - please
03:37 - and okay so I'm I'm so happy to see all
03:40 - these greetings online it's so nice
03:43 - again I'm kind of just trying to get set
03:45 - up here um so okay so let me start by uh
03:51 - doing a couple things uh let me
03:53 - introduce myself this is uh and what's
03:56 - going to happen this fall and uh um
03:58 - somebody take notes
04:00 - I got to talk through a whole lot of
04:01 - plans I have and I got to somehow get
04:03 - organized and figure out how to bring
04:05 - all this into fruition so I have a
04:08 - website it is called coding rainbow.com
04:11 - uh here you can see that I am currently
04:14 - live look at this I'm going to press
04:15 - play right here uh oh I got to turn the
04:17 - audio off
04:20 - hopefully uh
04:22 - oh I think it's okay let me know if
04:24 - you're hearing a weird crazy feedback
04:26 - where you hear my past self talking um
04:29 - oh yikes okay so oh look it's like
04:32 - infinite look at that I love this like
04:35 - uh we just keep zooming in forever and
04:38 - ever um okay so this is a live internet
04:41 - show about programming and creative
04:44 - coding uh I uh am here uh and I'm going
04:48 - to be here once per week teaching
04:50 - various topics so first thing you can do
04:53 - if you're new here is certainly just
04:54 - subscribe to the YouTube channel you
04:56 - will get notices when a new video has
04:59 - been published or when I'm going live uh
05:02 - if you're interested in tuning into the
05:03 - live streams I'm finally going to
05:05 - establish a regular time um which I will
05:08 - announce shortly it's going to be
05:09 - Tuesday afternoon or Wednesday morning
05:10 - it's looking like at this point and I
05:12 - will make that announcement on Twitter
05:14 - and over here uh and also in my email
05:16 - list which you can
05:18 - subscribe now the other thing that I
05:20 - have done here is I have I am I am using
05:24 - a service called patreon patreon is a
05:27 - crowdfunding platform that's different
05:29 - than something like a Kickstarter which
05:30 - is kind of like a one-time purchase it's
05:32 - a subscription model and so the course
05:35 - the the content that I'm planning to
05:37 - cover this
05:38 - fall uh let's see uh A2Z
05:43 - df16 I started oops and that's the
05:47 - wrong shiftman A2Z
05:52 - F16 uh this is a course that I am
05:56 - teaching
05:57 - um at it TP which is a two-year Masters
06:01 - program at Tish School of the Arts which
06:02 - is at New York
06:03 - University and
06:07 - um uh this is the Silly Bus spelled s i
06:11 - l l i b s for that course um you can see
06:14 - that it is a course that is all about
06:16 - programming with text in JavaScript in
06:19 - the browser using both SC server side
06:20 - and client side uh JavaScript and
06:23 - various creative applications I'm going
06:25 - to cover basic thing I'm going to cover
06:27 - things like regular Expressions which
06:28 - you may not know what those are if you
06:29 - don't then you've come to the right
06:31 - place I'm going to look at working with
06:33 - data and apis I'm going to look at uh
06:35 - node and twitterbots which I've actually
06:36 - already done the videos for um I'm going
06:38 - to look at text analysis and different
06:40 - algorithms for text generation look at
06:42 - Chrome extensions we're going to look
06:43 - more at node various things like this so
06:45 - this is kind of my plan each week I'm
06:47 - going to do some of these topics so the
06:50 - the topics will always happen in my live
06:52 - YouTube stream which is the thing that
06:54 - I'm kind of practicing again right
06:56 - now and then in addition if you want to
07:00 - participate in a uh slack Channel where
07:03 - you can post and share assignments or
07:05 - ask questions or discuss the content of
07:07 - the course you can subscribe to the uh
07:11 - patreon so I'm going to click here one
07:12 - of the things I want to do today
07:13 - actually is I want to record so if I go
07:16 - to this become a patron link let's click
07:17 - on
07:18 - this
07:21 - uh um if I go here you can see here uh
07:27 - this is I think the video H I think this
07:30 - is like the video that would show up by
07:33 - default uh and so I need to make some
07:36 - sort of like quick hi my name is Dan
07:39 - welcome to patreon these are the kinds
07:40 - of things you're GNA why I'm doing this
07:42 - and this is what you so I need to do
07:43 - that at some point today so I could put
07:45 - that on patreon because right now if you
07:46 - go to patreon my intro video is just the
07:48 - mener sponge so the other thing that I'm
07:50 - thinking about so the $5 a month per
07:53 - month level sounds like this ridiculous
07:56 - sort of sales thing that I'm doing but
07:58 - um this is experiment that I'm trying in
08:00 - addition to teaching my physical course
08:02 - inperson at ITP I'm going to try to
08:04 - teach it online but sort of custom bake
08:06 - my own thing not through a big uh online
08:09 - uh education company um so uh the $5 a
08:12 - month subscription will uh give you
08:15 - access to that um slack
08:17 - Channel well that's good uh uh Christian
08:21 - in the chat writes the mener sponge vid
08:23 - was the one to hook me so I don't know
08:25 - maybe I should have kept that now I'm
08:28 - thinking of adding a $10 level I've
08:32 - really been loathed to do this but I've
08:34 - had some requests in which I will also
08:36 - send you a care package and I don't have
08:38 - a a care package will include some
08:41 - stickers uh I don't know if you can see
08:43 - these very well but these are some
08:44 - lovely stickers they're also on my
08:46 - laptop uh and I will also send you um
08:49 - copies of nature of code book some other
08:52 - things like that so I might put that
08:54 - together if you're interested in that
08:56 - let me know I kind of now that I've say
08:58 - this I even not not so sure that I want
08:59 - to do this but uh right you could just
09:03 - by the way you could I will give you the
09:04 - stickers for free if I happen to see you
09:06 - in person because I carry them with me
09:07 - but you can also purchase them uh at
09:10 - Sticker Mule let's see if a Sticker Mule
09:13 - coding rainbow Google search comes up
09:15 - yep comes up so you can also uh you can
09:18 - also just get them yourself if you're so
09:20 - interested in these stickers I think if
09:21 - you buy a sticker I get like 15 cents or
09:23 - something like that uh uh okay so uh um
09:30 - this
09:32 - is um so that's kind of um that's my
09:35 - plan for the fall so I want to try to
09:36 - spruce up the uh patreon page uh get a
09:40 - regular schedule
09:41 - going um and uh get some more online
09:45 - discussion and questions and kind of see
09:47 - how that goes and um I'm thinking and if
09:49 - this goes well I'll do another uh course
09:52 - in the spring probably on a physics
09:54 - simulation generative algorithms and
09:56 - machine learning I know a lot of people
09:57 - been requesting machine learning stuff
10:00 - and I have I've been doing some genetic
10:01 - algorithm videos and I've made some
10:03 - quick experiments in building a
10:04 - processing library and done some other
10:06 - stuff looking at node with JavaScript
10:08 - and different machine learning uh
10:10 - libraries but it's looking more and more
10:12 - like that's going to get pushed back a
10:13 - bit further as I kind of try to get
10:14 - things going for this
10:16 - fall
10:18 - um uh uh Ser
10:22 - Cy hello
10:26 - um um I would love to chat okay so um
10:31 - okay so that oh oh my God why are there
10:33 - how are there 132 people watching it
10:35 - must be that I actually announced that I
10:37 - was going to do this oh boy this is I
10:38 - better make this good I don't know maybe
10:41 - some people came for the dancing
10:42 - apparently have a very bad or good habit
10:44 - of just like I get like stressed out and
10:47 - full of anxiety and just start um
10:49 - playing some music and
10:53 - dancing okay so that's kind of now
10:56 - [Music]
10:58 - um
11:00 - so uh another thing that I'm planning to
11:02 - start doing this fall and I got to start
11:04 - scheduling that probably the week after
11:06 - next it'll start is I'm going to have
11:07 - some guests so I'll say more about that
11:10 - in the future but I'm going to have some
11:11 - guests come and show some things or
11:13 - maybe do some guest tutorials and those
11:15 - of you I've gotten messages from folks
11:17 - who are interested in participating in
11:18 - that I'm going to see if I can get a
11:20 - system for that going first and then
11:22 - I'll be able to kind of see how I can
11:24 - include other people no one request in
11:27 - the chat for no dancing okay okay the
11:29 - this Dot Song yes okay
11:32 - um all right I don't know how long I can
11:35 - oblige the no dancing um uh
11:39 - uh back I'll do back propagation if
11:42 - that's somehow like a dance where it's
11:44 - like back propagation somehow uh oh I
11:47 - think I like might have pulled something
11:49 - that was a little bit dangerous okay um
11:51 - all right so the other thing I want to
11:53 - look at now is the rainbow topics GitHub
11:57 - uh list so one thing that you may or may
11:59 - not be aware of if you are new is that I
12:01 - keep track of topics that I intend to
12:03 - someday explore and questions that I'm
12:06 - going to that I would like to answer on
12:09 - um this uh rainbow topics GitHub
12:12 - repository and I right and um and so
12:16 - things that I am um looking at doing
12:22 - today uh I've sort of made a little
12:24 - thread for this um so I want to follow I
12:27 - made a video tutorial about code
12:29 - and I want to follow up on some of the
12:31 - things on that tutorial uh maybe you
12:33 - want to look at or think about or talk
12:35 - about adding networking to my agario
12:37 - example uh I did I left off in August
12:41 - with looking at the traveling
12:42 - salesperson problem and solving it with
12:44 - a Brute Force algorithm and I wanted to
12:46 - expand that to use a genetic algorithm I
12:48 - want to make a patreon video I discuss
12:51 - my fall plan and scheduling which I've
12:52 - done and I think that I would like to uh
12:56 - talk about uh processing and p5js as two
13:00 - creative coding platforms that are part
13:02 - of the processing Foundation that I work
13:04 - on and contribute to and what those are
13:07 - how they're different and how you can
13:08 - contribute to those things and what's
13:09 - kind of coming for this
13:12 - fall
13:13 - um so
13:17 - um um so this is kind of what I'm
13:20 - thinking about uh for today let's take a
13:23 - look through um the topic list um and
13:27 - I'm going to sort it I probably
13:28 - shouldn't do this I'm going to sort it
13:29 - like this we can see what's just to see
13:31 - if there's anything actually what I kind
13:33 - of wanted to look for was
13:34 - questions um to see if there were some
13:37 - uh questions that I wanted to also try
13:39 - to
13:40 - answer
13:42 - uh um okay so yes yes yes ah you know
13:47 - what I really would love to do today but
13:49 - I guess I won't is I um also uh I am
13:53 - broadcasting this to Twitch I believe
13:54 - although I'm not looking at the twitch
13:55 - chat somebody asks um so so I uh also
14:01 - would love to do I I would love to do
14:03 - sometime this fall uh keep reminding me
14:05 - about this something about uh how to
14:07 - make a processing library and how to
14:08 - work with processing in Eclipse um okay
14:12 - so let me go back to here
14:16 - and um all right so I don't know um I'll
14:21 - start by answering a question that's
14:22 - been asked in the chat uh Brian woo asks
14:26 - hey can you tell us how you got into uh
14:32 - programming I
14:34 - can
14:35 - um how I got into programming uh was
14:39 - actually through this program that I now
14:41 - teach at called ITP I had done um you
14:44 - know I uh done other little sort of
14:46 - dabbling programming things here and
14:48 - there but I discovered programming
14:49 - through uh the creative arts and ITP
14:53 - which sort of lives in an art school and
14:56 - uh using programming as a tool to
14:58 - realize new and interesting ideas so
15:00 - that's that's really actually how I got
15:02 - into programming this kind of not that
15:04 - interesting of an answer um but I I
15:06 - first uh there learned actually
15:07 - programming using a macromedia director
15:10 - and the lingo programming language then
15:11 - I kind of got into Java a bit and from
15:14 - there I discovered processing in around
15:16 - 2003 and got involved with uh processing
15:19 - as an open source project since then and
15:21 - a couple years ago um oh yeah so uh a
15:24 - couple years ago I started working with
15:25 - JavaScript and P5 Jazz so um let me see
15:28 - here let's do let's let me
15:30 - do probably should be so by the way if
15:33 - anybody has any uh suggestions for a
15:36 - good iOS application that I could use as
15:38 - a soundboard um please let me know I I
15:42 - bought I I tried a couple but and then
15:45 - that's like a big pain to like load the
15:46 - sound files on there so I only have
15:51 - Applause thank you thank you very much
15:54 - and my uh somebody that song for me Cody
15:57 - Rainbow theme song
16:00 - uh Bumper Music
16:05 - okay
16:07 - uh yeah I do definitely need to do an
16:10 - updated video with my setup okay um so
16:14 - let's see it is about 2:20 in the
16:16 - afternoon I'm not prepared for
16:23 - this and let's see let's see can I make
16:27 - this do
16:30 - this okay here we go uh let's close this
16:34 - this this so I want to think
16:41 - about um
16:43 - okay 163 people is insane this is I'm
16:47 - like I'm at my worst right now it's
16:51 - like but since all so many of you are
16:54 - here
16:57 - uh uh
16:59 - uh time to tweet so we can get to 200
17:02 - okay I didn't so why not uh so bear with
17:05 - me for a second I'm going to
17:08 - Twitter and I'm going to
17:10 - tweet I am live now for a pre season uh
17:18 - coding rainbow Test episode I'm calling
17:21 - this a Test
17:27 - episode uh
17:30 - because that's kind of what it is um wow
17:35 - this is crazy there's so many people
17:36 - watching I better do something
17:38 - interesting um okay sorry let me get
17:40 - back to the
17:41 - chat uh I'm I'm just like out of
17:44 - practice with my systems and
17:48 - everything okay um all right
17:56 - so I am going to to start today
18:02 - with uh a
18:05 - question which I which I asked myself
18:11 - apparently so I think I'm going to make
18:13 - uh this is going to go into my Q&A
18:16 - playlist um and uh what I want to sort
18:20 - of use this video as and I realized that
18:22 - a lot of you who are watching are maybe
18:24 - experienced programmers or familiar with
18:26 - these platforms and so you can can
18:28 - either uh tune out for a little while
18:30 - and go do something else or just leave
18:31 - me on in the background if you like or
18:33 - you can tune in and watch and kind of
18:34 - help give me some feedback as to what
18:37 - makes sense and that sort of thing so
18:38 - what I what I want to do will The
18:40 - evolutionary tsp be in this episode I
18:43 - hope
18:44 - so I I'm having a conflict which is that
18:47 - I've had so many people request that I
18:49 - finish the traveling salesperson problem
18:51 - and I've had so many people request that
18:53 - I do networking with the agario game and
18:55 - I can't seem to decide which is more
18:57 - requested or or not oh I forgot I have
18:59 - my
19:00 - bell um so
19:04 - um yes if you are hungry please eat
19:07 - something uh that I think is a good idea
19:09 - so what I want to use this video for um
19:12 - is I want to use this video as kind of a
19:14 - hello it's the fall maybe you are taking
19:16 - a course uh you know this could be a
19:19 - video that my students would watch who
19:20 - are about to enroll an introduction to
19:22 - computational media and I want to use
19:24 - this just to talk about the current
19:26 - landscape of creative coding
19:29 - platforms um a Twitter poll time I could
19:32 - do a Twitter poll I'll do okay I'll do a
19:34 - Twitter poll let's just see so if you uh
19:37 - on the Twitter poll I'm gonna
19:41 - um uh I'm going I'm going to just make
19:44 - it like one hour very short poll like
19:47 - one hour would be way too too long
19:48 - actually because I hopefully get to this
19:49 - in about a half an hour so I'm gonna
19:51 - make a poll I'm I'm at SHI I'm SL shift
19:54 - shiftman on Twitter uh a a guard .io
19:59 - networking tsp with genetic
20:03 - algorithm traveling
20:07 - sales
20:08 - person uh okay genetic
20:13 - tsp uh topic priority for today uh poll
20:18 - length zero days how about just uh 30
20:22 - minutes I'm going to leave this poll
20:24 - going for 30 minutes there it is on uh
20:28 - Twitter I'll bring this up right here so
20:31 - those of you can uh vote and I think if
20:34 - I'm logged into my Twitter I'll be able
20:37 - to actually live see the
20:40 - results uh
20:43 - yep so here we go that's uh I'm going to
20:46 - leave this in the background please vote
20:48 - here and I'll just start oh one hour
20:51 - left I think I made it for just 30
20:52 - minutes so um in 30 minutes whatever
20:55 - this is at that's going to be the
20:57 - decision I'm not it's not even up to me
20:59 - whoa seven votes okay that was exciting
21:02 - that was an exciting
21:04 - moment so far agario in the lead genetic
21:07 - tsp really that sounds like some sort of
21:10 - disease that you could contract so could
21:13 - probably come up with a better name for
21:15 - that
21:16 - okay so uh here we are again let me get
21:19 - back to the chat uh thank you first of
21:22 - all thank you everyone for tuning in um
21:26 - this is uh
21:28 - really a thrill for me to get to do this
21:31 - um and uh uh in hear from people all
21:35 - over the world who are watching and who
21:36 - have questions and are enjoying these
21:38 - videos that I'm doing and I apologize
21:41 - for you know mostly I get I get like you
21:45 - know n nine out of n you know 39 out of
21:48 - 40 feedback emails or tweets or like oh
21:51 - I like the weird dancing strange awkward
21:53 - whatever and then one out of those is
21:55 - like you're really annoying you're
21:57 - really annoying please like calm down
21:59 - and those really sit in the back of my
22:01 - mind so I'm I'm I don't know I'm feeling
22:03 - a little for some reason I'm feeling a
22:04 - little uneasy it's also just weird to be
22:06 - in there a room by myself I can't see
22:07 - you there's nobody here I can't hear any
22:10 - just like it's a very strange thing
22:13 - okay so let's start with our first
22:17 - Q&A um and I just want to make sure I am
22:19 - hooked up so I can go to the Whiteboard
22:21 - I can go here ah you know what I want to
22:23 - do sorry I want to download the most
22:25 - recent version of processing
22:31 - uh
22:33 - and I'm going to do
22:38 - that
22:40 - and
22:44 - 7030 uh okay processing is downloaded 5
22:47 - seconds
22:48 - left
22:56 - um
23:00 - uh I'm going just copy this to the
23:03 - desktop and uh
23:06 - okay let's see how this is going oo
23:09 - agario networking boy that's the one I
23:11 - know how to do the least that'll be
23:15 - interesting uh yes yes Chris Jordan also
23:19 - mentions I was going to make the
23:20 - ellipses a bit more wobbly and um and
23:23 - not so perfectly round all the time yes
23:25 - I will uh let's let's remind me of that
23:27 - when I get to it because it looks like
23:28 - agario is probably winning okay is this
23:40 - the okay uh all
23:45 - right all right so here we
23:50 - go and I'm recording this and I'm
23:53 - streaming live let me cycle the
23:56 - cameras yeah I'm sorry for today I'm
23:59 - it's such a so amazing how large the
24:01 - audience is today and today was sort of
24:02 - like my like I just G to test things out
24:05 - to make sure they're still working
24:11 - uh take the top off of this T
24:20 - here okay here we
24:26 - go hello welcome to a Q&A video in this
24:31 - particular video I am going to talk
24:33 - about I'm going to answer this question
24:35 - now you might notice on this GitHub
24:37 - repository that it was this person whose
24:39 - name is shiffman who asked this question
24:42 - so you know somebody asked me this
24:43 - question I get this question a lot um
24:46 - and so I I just added it to the GitHub
24:47 - repo but I I I would like to point out
24:49 - if you're watching this video and you're
24:50 - interested in asking me a question that
24:52 - I might answer in a future video uh find
24:54 - the link to this GitHub repository in
24:56 - this video's description go there and
24:57 - ask ask your own question so the
24:59 - question for today is what is the
25:01 - difference between p5js and processing
25:03 - and I'm going to answer this by the way
25:06 - I haven't prepared anything so it's
25:07 - going to be kind of stream of
25:08 - Consciousness here but I'm going to
25:09 - answer this in a sort of broader sense
25:11 - so one of the things that's happening
25:12 - right now this very week for me um is
25:15 - that I am teaching a class at ITP which
25:18 - is a program at Tish School of the Arts
25:19 - New York University called introduction
25:21 - to computational Media this is a class
25:24 - for people who want to learn to program
25:26 - who have never written any code before
25:29 - whatsoever in their life and this is
25:31 - another question that gets asked a lot
25:33 - oh hey I'm interested in this code stuff
25:35 - I want to write some code what should I
25:36 - learn what should I use now I don't I
25:38 - don't even for a brief millisecond
25:41 - pretend to actually have the answer to
25:42 - that question I don't you know that that
25:44 - the answer to that question is different
25:45 - for a number of reasons but but you know
25:47 - your personal preferences background
25:49 - interest that sort of thing so many
25:51 - languages Frameworks tutorials Etc I can
25:53 - only sort of speak from my own
25:54 - experience in the sort of smaller scope
25:56 - of one of the things that I I'm
25:57 - interested in and work on personally
25:59 - which are tools that allow people to get
26:03 - up and running with programming very
26:04 - quickly and sketch out ideas in
26:06 - particular creative ideas often ideas
26:08 - that have a strong visual component now
26:11 - um and the tools that I enjoy for um
26:14 - these kinds of projects and for learning
26:16 - code and sketching out these kinds of
26:17 - ideas are and just happen to be
26:19 - coincidentally p5js and processing so I
26:22 - want to talk a little bit about the
26:23 - history um and and this is really now a
26:26 - video that is in some ways I'm focusing
26:27 - oh I already have this URL open on
26:29 - something called the processing
26:30 - foundation so processing Foundation is a
26:34 - uh non-for-profit uh United States uh
26:37 - 501c3 tax exempt Corporation sounds very
26:41 - official and like ominous processing
26:43 - Foundation but um uh and and it exists
26:48 - to maintain software platforms as well
26:51 - as develop uh and administer education
26:55 - uh community and diversity initiatives
26:57 - around code and creativity uh and you
27:00 - can read about the processing foundation
27:01 - on the website and encourage you to get
27:03 - involved and I'll talk a little bit
27:05 - about how you can get involved at least
27:06 - in contributing to open source maybe
27:08 - more towards the end of this particular
27:09 - video so I encourage you to check out
27:10 - the processing Foundation now let me
27:12 - talk through for those of you who might
27:14 - be interested my sense of the
27:19 - history history teacher time I don't
27:21 - know okay uh my sense of the history of
27:23 - processing and what it is and that these
27:26 - and what p5g is and also I want to talk
27:28 - about processing. piy or py U oh and
27:31 - then there's also processing for the r
27:32 - there's so much let's start small so
27:35 - 2001 I think I actually have done a lot
27:36 - of this in another video but I'm kind of
27:38 - repeating it just to kind of give some
27:40 - context here so
27:43 - 2001 processing and
27:47 - uh it was recently actually the 15th
27:49 - anniversary of processing itself Ben fry
27:52 - one of the creators of processing
27:53 - tweeted out a link to a workshop I'll
27:55 - try to find that and put it in this
27:56 - video's description it's not coming to
27:58 - me this moment but uh there was a the
28:00 - first kind of public Workshop using
28:01 - processing was in August of 2001 if I'm
28:04 - correct about that so the the
28:06 - co-creators of processing Ben fry Casey
28:12 - Reese and processing itself came out of
28:17 - their work at a place which still exists
28:19 - of course which a lot of you have
28:20 - probably heard of called the MIT media
28:22 - lab and their professor at the time
28:25 - named John
28:28 - maida uh world-renowned uh designer
28:31 - artist luminary thinker uh former
28:34 - president of Ry professor at the MIT
28:36 - media lab John maida um and I apologize
28:39 - if I'm mispronouncing uh the name at all
28:42 - uh anybody's name throughout the course
28:43 - of this video so uh the group was called
28:45 - the Aesthetics and computation group
28:47 - that was the research group at the time
28:49 - and you know it would be great to have
28:51 - uh Ben and Casey just to sort of like
28:52 - bobbling heads here they don't need to
28:54 - be bobbling but this to actually talk
28:55 - here but I you know there's I think a a
28:58 - reason why processing came into
29:00 - existence on the one hand you're a
29:02 - person whose name happens to be Ben
29:04 - frier Casey Reese in 2001 you want to
29:06 - teach people about programming what do
29:07 - you use um there there was a uh a piece
29:12 - of software known as Design By Numbers
29:15 - at the time which was created by John
29:17 - maida and this uh this was a software
29:21 - platform that was designed for graphic
29:23 - designers to code and so a lot of the
29:25 - ideas of processing came came out of
29:27 - design by numbers and of course so many
29:29 - things came before that we can think of
29:32 - uh the logo programming language Turtle
29:35 - graphics and you know hypercard and uh
29:38 - the work of
29:40 - um Seymour papert anduh all sorts of
29:43 - various other types of kind of
29:45 - historical precedents for this idea of
29:47 - creativity through coding but the idea
29:49 - here boy I being really longwinded about
29:52 - this okay I'm just going to keep going I
29:55 - I can't see the chat now maybe
29:56 - everybody's left my 163 viewers has gone
29:58 - down to like 15 but um so this is kind
30:01 - of where everything came from this idea
30:03 - of okay number one a
30:06 - tool that uh I let's say I'm the person
30:09 - who's going to create processing why am
30:10 - I doing it one I want to make my own
30:12 - work so I need something with which to
30:14 - make my own work I also want to teach
30:16 - others to make creative work I need
30:17 - something to teach others so one of the
30:19 - things that's been there from the very
30:21 - beginning with processing is walking
30:23 - this fine line between a uh kind of
30:26 - beginner friendly easy to get started
30:28 - platform that you can use right from day
30:31 - one and write code and get stuff going
30:32 - in a simple and friendly way as well as
30:35 - a platform that you can actually use uh
30:38 - for um larger projects commercial work
30:41 - artistic work creative ideas sketching
30:43 - out ideas as you get more and more
30:45 - knowledge through code so it's something
30:46 - that can give you a a full Journey so
30:50 - the question then in this time is well
30:54 - what what is a good programming language
30:57 - to build processing with and build on
30:59 - top of now one of the limitations of
31:01 - Design By Numbers was that all it really
31:04 - let you do if I'm correct about this is
31:07 - make interesting algorithmic geometric
31:10 - Graphics through code but what if you
31:13 - wanted to connect Hardware or talk to
31:17 - the network or have your graphic sketch
31:21 - visualize uh data or you know Hardware
31:24 - being C other types of I was thinking
31:26 - camera but that's hard so one of the
31:28 - reasons that processing was built on top
31:31 - of java is that suddenly if you have
31:35 - this simple friendly environment with a
31:36 - simple drawing API but you build it with
31:39 - the language Java you're going to get
31:41 - all this other stuff for free it's going
31:43 - to be extendable you can write other
31:45 - libraries for it you could pull other
31:46 - Java libraries into it there was also at
31:49 - the time something called uh an
31:54 - applet and one of the key pieces of
31:57 - processing uh has always been uh the key
32:00 - sort of philosophical principles has
32:02 - been sharability
32:06 - so uh I'm going to make something I want
32:08 - to share it with my friends quickly
32:10 - easily instantly and the web is a great
32:12 - platform with which to do that I hope
32:14 - everything's still working yes okay um
32:18 - now so applets were the thing in 2001 if
32:21 - you have this animated graphics thing
32:23 - that you made and you want to put it in
32:24 - a web page you put it with a Java applet
32:26 - as you know anybody watching this now
32:28 - you either have never heard of an applet
32:29 - or the only sense of an applet is like a
32:31 - frustrating moment where there's some
32:33 - web pag is trying to load a Java applet
32:35 - you get like 50 different error messages
32:36 - try to restart reinstall Java like three
32:38 - times and it still never works and
32:39 - eventually give up and do something else
32:42 - um so this is kind of where processing
32:44 - came from so let me show you now of um
32:47 - over here I'm back over here taking a
32:49 - peek at the chat people are asking about
32:51 - Arduino which is kind of interesting to
32:53 - uh bring that into the picture as well
32:55 - but I'm going to run the current version
32:57 - of processing right
32:59 - now uh and I'm going to open it and so
33:02 - this is what processing is and in uh in
33:04 - its form today come on
33:11 - processing if it if it would come up I
33:13 - could then have this
33:15 - Applause did it come what what happened
33:18 - there oh it's there there it is so this
33:21 - is what processing looks like and I can
33:23 - do something like just say background oh
33:26 - and uh let's make the font a bit
33:29 - bigger
33:31 - uh and I can do something like
33:34 - this and I can say
33:38 - uh and I can run this sketch and there
33:41 - we go and I have my first bit of code so
33:44 - the idea here is that I am writing code
33:47 - in Java but a lot of what you would
33:50 - normally have to do your first day of a
33:52 - Java programming class where you need to
33:53 - like have a main thing and a class thing
33:56 - and set up your environment variables
33:58 - and open up something called Eclipse
33:59 - maybe or command line all of that is
34:02 - done for you inside of the processing
34:04 - development environment itself so
34:05 - processing is both a library of
34:09 - functions and classes you can call and
34:11 - do stuff with like background here's a
34:14 - nice sort of pink background ellipse
34:15 - which draws a circle on the screen and a
34:17 - development environment itself and this
34:19 - development environment has come a long
34:21 - way in 15 years there is a console here
34:24 - there's a separate errors pain when you
34:26 - have errors you can see here if I forget
34:28 - my semicolon suddenly you'll see missing
34:30 - a semicolon on line number two and a
34:33 - little red squiggly here and if I then
34:36 - put the semicolon back the red squiggly
34:37 - goes away there's even a debugger over
34:39 - here I think I made a video tutorial
34:41 - about the debugger that's on the
34:42 - processing website there are uh I can go
34:45 - to sketch import Library ad L whoops
34:47 - there's a whole uh contributions manager
34:49 - so if I go here I can find countless
34:52 - libraries to do various things uh with
34:55 - cameras and other pieces of hardware and
34:56 - color and uh gooey elements and physics
35:00 - engines so there's lots and lots of
35:02 - things I can do with
35:06 - processing I'm getting text messages
35:09 - which I was worried were like
35:10 - everything's not working okay so
35:14 - um so this is processing now I'm GNA I
35:18 - really should just scrap this and start
35:20 - over because I could answer the
35:21 - differences between processing pgs
35:22 - rather quickly and instead I I'm going
35:24 - through the sort of History thing so
35:26 - let's fast let me come over
35:31 - here you know if I were in an actual
35:33 - classroom with people I would get a read
35:36 - of the room A vibe people would raise
35:38 - their hands I would have a sense instead
35:39 - I'm just speaking to this this thing
35:41 - which is like a little circle here and
35:43 - it's a nice little thing but it's it
35:45 - doesn't really talk back to
35:48 - me okay so let's think about uh uh let's
35:51 - let me talk about a little bit what's
35:53 - what's now happening
35:55 - so
35:59 - there are so okay so the processing this
36:00 - is where this is this is really
36:04 - um this history now has many many years
36:07 - from 2001 all the way I would say around
36:09 - I believe around
36:11 - 2013 was when one of the first
36:14 - conversations started to happen uh
36:19 - around what if
36:22 - processing way you could think of this
36:23 - question of what if processing started
36:25 - over
36:30 - so instead of thinking about okay so
36:33 - there have been a lot of projects to
36:35 - Port processing to another environment
36:39 - so take a literal translation of the
36:41 - entire API by API mean all of the
36:44 - functions and things that processing can
36:45 - do and translate it to another language
36:48 - uh notably I'll mention two of them one
36:51 - of them is called uh
36:54 - processing. py which is a python version
36:58 - of processing and in fact if I come back
37:01 - over here uh I can access that instantly
37:04 - up here under Java I can actually switch
37:07 - here to python now I don't think this
37:09 - python will show up here by default you
37:11 - have to first go to add mode and then
37:13 - add python but if I switch to python I
37:15 - can suddenly type python code in here
37:17 - and run processing sketches using the
37:19 - Python programming language and access
37:21 - the entire pyth uh processing API there
37:24 - is another project um
37:27 - uh called
37:31 - processing.js and this project this is
37:33 - very confusing uh because all these
37:36 - named processing this was a project
37:38 - first created by John Rig which does
37:41 - something even more magical than just
37:44 - taking all of the processing API and
37:46 - translating it into JavaScript for a
37:48 - canvas element in the browser what John
37:50 - Rig was able to do is not only Port
37:53 - processing to JavaScript so you could
37:54 - write call make processing calls in jav
37:56 - JavaScript but this this also has an
37:59 - engine to take your processing code and
38:02 - translate it behind the scenes for you
38:04 - into JavaScript essentially so you don't
38:06 - you could write your processing code in
38:08 - Java and have it run in the browser in
38:10 - JavaScript through an auto magical
38:14 - process now so this um processing is a
38:17 - project maintained by the foundation
38:19 - itself processing. py is also a project
38:22 - M maintained by the foundation
38:24 - processing.js was a separate project as
38:26 - I said uh created and started by John
38:28 - Rig I believe it's now also used as an
38:31 - engine for the KH Academy a lot of the
38:33 - KH Academy tutorials I believe if it's
38:35 - still the case that John Rig does work
38:37 - with for KH Academy and at one point
38:40 - then procing duts was taken over by um
38:42 - some folks who work with the Mozilla
38:44 - foundation and um I've kind of I don't
38:46 - know if I have all the pieces of the
38:47 - history of that directly into my head I
38:49 - haven't been as involved with that
38:50 - particular project
38:53 - but this question in 2013 came up what
38:57 - if processing were to start over and
39:01 - someone that I would like to mention
39:04 - here is Lauren
39:07 - McCarthy uh processing found one of the
39:10 - things we do as a foundation is we offer
39:13 - fellowships small stipend to people who
39:16 - want who propose a project around a code
39:19 - Library an education initiative A
39:21 - diversity initiative and at the time
39:23 - Lauren McCarthy I believe was one of um
39:26 - I don't I one of the first processing
39:27 - fellows to think about and answer this
39:31 - question and so the question what and
39:35 - I'm not saying this question was
39:35 - actually posed but I'm thinking about it
39:37 - this way for now just for the sake of
39:39 - argument you know there's a lot of
39:42 - different paths that you could take I
39:43 - think and you could make good cases for
39:45 - all of them but this idea of sharability
39:50 - uh the idea of Simplicity back to the
39:53 - sort of Design By Numbers core ideas of
39:56 - of simp licity for withdrawing and
39:58 - sharability on the web everything came
40:01 - back to JavaScript again and again and
40:04 - again so on the one hand you could say
40:06 - Okay processing.js already exists what
40:10 - is the reason for having yet another
40:12 - JavaScript version so to speak of
40:14 - processing and I think what Lauren said
40:17 - and what Lauren did and now many others
40:20 - have done and contribute to Beyond just
40:22 - Lauren Lauren who started this project
40:24 - was s of say well this project
40:26 - called p5js and I want to talk about the
40:29 - little p in a moment this project called
40:32 - p5js is not just about saying processing
40:37 - is this thing that people like let's
40:39 - Port it to JavaScript but let's not Port
40:42 - the code or the names of all the
40:44 - functions or how everything works let's
40:47 - Port the goals the philosophies the
40:50 - principles behind processing openness
40:53 - friendliness accessibility uh um design
40:58 - visuals art let's Port all of those kind
41:01 - of core principles and ideal of
41:04 - processing and take those and design a
41:06 - new platform around those ideas in a new
41:08 - environment because if you're in the
41:11 - browser it doesn't necessarily make
41:13 - sense to do things the same way they've
41:15 - worked in what's now essentially a
41:17 - desktop application development
41:19 - environment processing so uh and you
41:21 - know what I'm realizing this video that
41:23 - I'm making is kind of the history of
41:24 - processing in p 5gs and I'm I'm going to
41:26 - make a separate video which just looks
41:27 - at the differences between the two and
41:29 - I'll make some code examples that go
41:30 - back and forth so I'm not actually
41:31 - answering that question in this video
41:33 - but that's fine so um so this I think is
41:36 - really the idea and JavaScript is such a
41:40 - different place than Java and being on
41:43 - the web is such a different place than
41:45 - being in a desktop application so many
41:47 - things are different Mo most notably to
41:49 - I I'll I'll mention two things right now
41:51 - one is that um in addition to all the
41:54 - drawing functionality that's part of
41:56 - processing p5js has a Dom manipulation
42:00 - library and what I mean by that is uh
42:02 - and I I've kind of made this crazy map
42:04 - here I I almost like don't want to erase
42:06 - anything so I'm just going to use this
42:07 - little corner over here if this is your
42:10 - processing
42:11 - window that you're drawing your lovely
42:14 - spiral pattern in that's all you get in
42:17 - processing your graphics
42:19 - window if this is your web browser and
42:22 - you're working in p5js and you create a
42:25 - canvas
42:26 - where you draw your spiral in it you get
42:29 - that in p5js as this canvas but you also
42:32 - get more because the canvas is just one
42:35 - element sitting on the web page and you
42:37 - could have some paragraphs you could
42:39 - have an image you could have like a
42:41 - little like uh audio player you can
42:44 - create so much more around the canvas on
42:47 - that web page and that's what p5js also
42:50 - offers it's not just as processing is to
42:53 - Java it's built on top of java P5 just
42:56 - is built on top of JavaScript but it
42:58 - also has hooks into HTML so here I think
43:01 - you know really Java there's also hooks
43:03 - into HTML uh
43:06 - CSS and uh um
43:10 - JavaScript okay so I'm kind of wrapping
43:13 - up this discussion of the history here
43:15 - since this is you might be watching this
43:17 - just as a video I don't know if you will
43:19 - but maybe you will I'm going to check
43:21 - now this is at the moment happening as a
43:23 - live stream so I'm just look in the chat
43:25 - to see if there any questions or
43:26 - Corrections so if you're watching this
43:28 - now and you said something 15 minutes
43:29 - ago in the chat but was important maybe
43:31 - add it again um so uh and so here I come
43:35 - back over here and I'm going to look
43:38 - um I don't actually see anything in the
43:41 - chat so I think perhaps I'm going to
43:42 - wrap up this video and what I'm going to
43:44 - do in the next video is I'm going to
43:46 - actually look at processing and p5js
43:48 - side by side and see how they work
43:51 - together and how some of the code how
43:52 - the code is actually different and
43:54 - similar and what some of the
43:55 - capabilities or what's faster here
43:57 - what's slower here what works better
43:58 - here um that type of thing yes uh
44:01 - JavaScript is slower okay so um thanks
44:05 - for watching this video a little bit
44:06 - about the history of processing and P ah
44:09 - I forgot something
44:11 - important so I want to talk about the
44:13 - little p because
44:15 - um JavaScript libraries actually if
44:18 - you'll notice uh often start with a
44:21 - capital P and I'm going to have to find
44:24 - you have to bear with me for a second
44:25 - I'm going to go to github.com
44:27 - processing p5js I'm going to go under
44:31 - issues I'm going to search for capital P
44:34 - P5 with a capital
44:36 - P and um I want to just read this to you
44:42 - because I want people to hear this and I
44:45 - uh Lauren I hope we'll have have a as a
44:47 - guest you can read a great interview
44:49 - with Lauren that was just done by kadenz
44:51 - and I'll try to link to that in this
44:52 - video description I can have her as a
44:54 - guest to make these statements herself
44:56 - but since I'm here on YouTube right now
44:58 - I believe strongly in the work that
44:59 - Lauren is doing and that the processing
45:01 - Foundation is doing to make uh these
45:03 - open source environments more inclusive
45:06 - and accessible and so I want to uh just
45:08 - essentially read this uh statement um to
45:11 - you which is a little bit of weird thing
45:12 - to do on a YouTube channel to just read
45:14 - something that's in a GitHub issue you
45:15 - don't if you want to click and read it
45:17 - yourself uh you can stop this video now
45:19 - but the there was a GitHub issue thread
45:21 - that started P5 with a capital P and um
45:26 - uh you know the question was sort of
45:27 - posed like hey there's like this this
45:29 - kind of a little bit of an advanced
45:30 - thing if you haven't programmed before
45:32 - that you'll see um new P5 is a way of
45:36 - doing this kind of crazy Make an
45:37 - instance of a P5 sketch and a sort of
45:40 - JavaScript standard might be Capital P5
45:44 - right if you're making a new instance of
45:46 - a JavaScript library you might say it
45:48 - with a capital P and Lauren uh wrote
45:50 - this response which I think um which is
45:53 - uh really uh I think speaks to some of
45:55 - the goals and principal HDA project okay
45:59 - uh totally hear are you indeed name
46:00 - spaces in JS are generally capitalized
46:03 - this is a good point however we chose
46:05 - the lowercase p to indicate that we are
46:07 - breaking with tradition a bit with this
46:08 - library that is breaking the tradition
46:10 - of capitalizing but also trying to break
46:12 - with the tradition of many open source
46:14 - projects that are male-dominated lacking
46:16 - diversity and privileging experienced
46:18 - developers in discussion over beginners
46:21 - and so to this end we are explicit in
46:23 - the community statement and the GitHub
46:24 - code of conduct so highly encourage any
46:26 - of you who are interested in open source
46:28 - and processing in p5js to go to this
46:30 - issue and click on and read the
46:32 - community statement and the GitHub code
46:33 - content um and are really trying to see
46:35 - what happens if you build an open-
46:37 - Source toolkit founded on core values of
46:39 - diversity and inclusivity and this
46:41 - relates back um to something here which
46:45 - is that this question that I that I that
46:47 - I asked at some point in this video
46:48 - which is what if processing started over
46:50 - and this is something that Lauren said
46:51 - to me which I think is a key principle
46:53 - of p5js the question isn't just what is
46:57 - it that we should be doing right now to
46:59 - make a creative coding platform
47:01 - technology-wise that's not the question
47:03 - it's not about make sure we support es6
47:05 - and the fanciest new like
47:08 - whatever thing that's in the browser now
47:12 - what's happening in the world today how
47:14 - do we make something that responds to
47:17 - the land the cultural landscape of today
47:20 - that uh that that uh that breaks with
47:23 - some of these kind of uh uh traditions
47:26 - in open source development that have
47:27 - excluded a lot of people of varying
47:29 - backgrounds and skill levels uh and
47:31 - genders and Etc so um that's really sort
47:34 - of a key core principle that's it's it's
47:37 - not just about the code it's not this
47:39 - thing diversity and thinking about
47:41 - diversity is not a thing you do after
47:43 - you write the code it's something you
47:44 - have to do right from the beginning of a
47:46 - project itself um we are really trying
47:49 - to see what happens if you build an open
47:51 - source toolkit founded on core values of
47:52 - diversity and inclusivity letting all
47:55 - design decision flow from there um and
47:58 - um there's a lot more but the and Lauren
48:00 - writes for me the lowercase p p suggests
48:03 - a new tradition of including as many
48:04 - different kinds of people as possible in
48:06 - the project and um uh and I like this I
48:11 - like the word Plucky Plucky Little P
48:13 - Plucky little community and there's some
48:15 - more discussion here which uh um ah and
48:18 - this also I'll mentioned this is a nice
48:20 - little tidb for tidbit tidb tidbit for
48:23 - those of you um which is uh which is
48:27 - that where does this P5 come from so
48:30 - actually when processing was first
48:32 - created uh there was a URL which was
48:36 - proc I like to say process
48:38 - fiving uh because processing wasn't
48:40 - actually available so it had two fives
48:42 - in it instead of s's and which became P5
48:45 - for short so processing has always has
48:47 - often been referred to as P5 for short
48:49 - and now little lowercase p with a five
48:52 - .js uh for JavaScript okay so boy this
48:55 - was a very very long video that uh if
48:56 - you watched and enjoyed I appreciate it
49:00 - I see in the chat people are asking talk
49:02 - about Network programming but you know I
49:03 - got to get through this stuff oh there's
49:04 - some more interesting discussion here so
49:06 - thanks for watching this video about the
49:07 - history of processing a little bit about
49:09 - it I'm sure I missed some important
49:10 - things I'm sure I missed some important
49:12 - people's names um and so if you have
49:14 - comments and thoughts about it please
49:16 - add them in the comments uh send me a
49:18 - tweet and I'm going to do one more video
49:20 - that's really back to this Q&A thing
49:21 - about uh the the sort of like technical
49:24 - differences between processing and P5
49:28 - Jess okay uh thanks folks so I see
49:34 - um uh so um if you guys have requests
49:39 - about particular topics and you post
49:41 - them over and over again in the chat is
49:43 - not really going to help me uh get to it
49:45 - um any uh
49:47 - faster
49:49 - uh um okay um let's see here now let me
49:54 - go to the Twitter poll look at this I'm
49:58 - definitely going to do some networking
49:59 - today I'm excited about it give it a
50:03 - try uh okay
50:07 - um thanks Alvaro for keeping an eye on
50:11 - the chat trying to keep things organized
50:12 - there and posting links in there really
50:14 - really appreciate
50:16 - that um okay so um it is
50:20 - 3:00 um Running Out of Time those of you
50:23 - who are expecting agario networking got
50:26 - to get to it but let me just move along
50:28 - here and do part two to this really
50:31 - quickly um and
50:35 - um uh and
50:39 - um um let me do part two of this and I'm
50:41 - going to kind of open
50:43 - up uh both processing and p5js and look
50:48 - at them uh side by side a little
50:53 - bit so I'm going to use this P5 desktop
50:57 - editor
51:01 - um I'm going to not bother with a newer
51:03 - one right
51:06 - now
51:09 - uh and
51:15 - just uh
51:17 - oh little tidbit for those of you there
51:20 - is a new feature
51:23 - let's make this a separate video in a
51:26 - second I'll come back to that in a
51:27 - second
51:29 - uh ah somebody's reporting that there's
51:32 - some chroma key issues nothing I can do
51:34 - to fix that right now but people keep an
51:36 - eye on that and if if if people are
51:38 - seeing that please keep me posted about
51:39 - it okay
51:48 - uh so let me get sort of set set up
51:53 - here uh and
51:57 - and uh sidebar
52:00 - off
52:03 - okay okay
52:08 - uh so I want to talk a little bit about
52:11 - I'm going to come back to this
52:16 - um uh okay so I'm going to go back to
52:20 - that where's my web
52:24 - browser I don't know what uh here I lost
52:28 - the pages I had
52:31 - open
52:35 - uh code no no no
52:38 - issues uh qu labels
52:43 - question and
52:47 - there
52:50 - okay it happens when I ah yeah I can see
52:54 - that so I can work on fixing that uh I'm
52:57 - going to not bother with that too much
52:58 - right now if it's not a big problem okay
53:09 - um okay I think I'm back here hopefully
53:13 - I'm back sorry about this you
53:15 - guys welcome back this is not not going
53:19 - very well today but it's good I just
53:21 - needed a you're right there could be an
53:22 - issue with wirecast 7 I actually noticed
53:24 - that there's a
53:26 - uh an actually an updated version of
53:28 - wirecast 7 which maybe I'll try I was
53:29 - getting this freezing problem even
53:31 - without wirecast 7 but we'll see yast 7
53:34 - has some features that are really useful
53:36 - to me so um I would like to see if I can
53:39 - use it um uh okay so volume
53:45 - wise uh you're fine volume wise great
53:48 - okay um all right let's try to move this
53:51 - along here
53:53 - folks I've got more head bands and
53:55 - things on um okay
53:58 - so let me look at agario here for a
54:01 - second our like you know little tiny
54:03 - version of
54:07 - it and one thing uh that somebody posted
54:10 - was the speed that you're moving is
54:12 - actually related to how far you are from
54:15 - the mouse in other words if I move the
54:17 - the mouse closer I'll kind of slow down
54:19 - and stop so I think that would be a good
54:21 - thing to add as an improvement so so
54:27 - um uh so I some people are in the chat
54:30 - are saying that they're maybe not oh
54:34 - yeah okay but maybe you guys are working
54:35 - this out okay so um let me just look at
54:40 - uh let's make this a little Improvement
54:41 - for a second and let's look at uh this
54:45 - is um how the um this is how the object
54:49 - moves if you recall from the previous
54:51 - tutorial these are like
54:53 - itchy and this is just is a little bit
54:55 - too weird um so uh this is um I
54:59 - basically create a vector that's
55:00 - pointing from the center of the screen
55:02 - to the mouse and then I just set that
55:05 - Vector automatically to a magnitude of
55:08 - three and then kind of uh uh interpolate
55:12 - towards that Vector so I sort of
55:13 - smoothly move move to it another thing I
55:15 - could do is actually just
55:17 - say um new velocity limit three so
55:22 - instead of setting it to three I just
55:24 - cap it at three that way if you're
55:25 - actually closer this would be only if
55:27 - you're closer than three pixels which uh
55:29 - um I think isn't going to be very good
55:32 - but the idea here is
55:33 - that you know I would slow down but it's
55:36 - I I can get myself but that's only if
55:38 - I'm within three pixels so let's
55:40 - actually I think what would be worth
55:41 - doing is saying let's um
55:47 - oh let's uh let's take that new velocity
55:50 - and like divide it by uh 10 and then
55:53 - limit it to three or maybe divide it by
55:56 - 100 even let's try
55:59 - 50 uh and that way you can see faster
56:02 - faster slow down so is this more like a
56:04 - Gario like I'm only moving if I think
56:07 - this is like a really small but like
56:09 - useful Improvement yes okay um is are
56:13 - people able to get the watch the
56:16 - live people in the chat are for some
56:18 - reason not is somebody seeing me live
56:20 - right now uh so I I I don't know what I
56:24 - uh I'm not sure what to do about YouTube
56:27 - not working because I think I am
56:29 - streaming live um okay um so that's
56:34 - taken care of that's a little tiny
56:36 - Improvement that I think is worth doing
56:39 - um and I'm just going to reply into that
56:43 - issue uh that uh and I'm gonna uh I'm
56:49 - going to sign in as
56:51 - me to GitHub and then I'm going to say
56:54 - on on uh
56:55 - today's live stream I I I added this
57:00 - feature by adjusting the vector
57:05 - calculation like so so you guys can find
57:07 - this on GitHub by the way little tidbit
57:10 - for you if you didn't know um on GitHub
57:14 - if you are adding code into a comment uh
57:18 - normally I would just do this and then I
57:21 - would add the three back ticks at the
57:23 - bottom right that's going to render as a
57:25 - code block but if I want syntax
57:27 - highlighting I can put the programming
57:29 - language right there and then if I click
57:31 - comment you'll see that I actually got
57:33 - this little code snippet with syntax
57:34 - highlighting little tidbit for those of
57:36 - you if you didn't know
57:39 - um hopefully you guys are seeing this
57:41 - live okay so now what I need to do it is
57:44 - 3:15 I've got about an hour to work on
57:46 - this okay so I'm going to take about an
57:48 - hour right now to go through how to add
57:50 - networking to this
57:52 - agario um agario example code code and
57:55 - at a certain point I'm going to uh start
57:58 - as if this is going to be a standalone
58:00 - video tutorial so let me
58:02 - um let me see uh uh and I know Chris
58:07 - Jordan had um Chris Jordan had um
58:11 - mentioned this sort of like making them
58:12 - Blobby and I do want to see if I can get
58:14 - to that but I want to focus on the
58:15 - networking thing so what I actually want
58:18 - to do is if you're if you're not aware
58:20 - if I go to my YouTube channel I already
58:23 - have an introd ction to node with
58:26 - websockets so I'm going to kind of
58:28 - bypass that and I'm just going to go to
58:32 - the uh I'm going to try to find that
58:35 - playlist for you guys uh I don't know
58:38 - why I don't see it websockets here we go
58:40 - so this uh tutorial is about websockets
58:43 - and p5js uh there's an introduction to
58:47 - node uh there's using Express with node
58:50 - there's connecting a client server with
58:52 - socket.io uh and and the shared drawing
58:54 - canvas so I'm going to go grab that
58:57 - example uh real quick uh and I'm going
59:00 - to grab that where is that
59:05 - um what's that called shared
59:10 - canvas uh
59:11 - [Music]
59:12 - node okay I know where to get it rainbow
59:18 - code I'm going to go to uh sockets it's
59:23 - called in here so here here it is under
59:25 - the rainbow code repository do I have
59:27 - that downloaded somewhere uh yes I do so
59:32 - let me grab here uh
59:36 - sockets so I'm going to grab this
59:38 - example put it here in
59:40 - agario and then I'm going to go to
59:42 - terminal
59:44 - again uh and I'm going to go into
59:46 - sockets and do uh node
59:51 - server uh uh and I'm going to say npm
59:53 - install so so I'm skipping over some
59:55 - things which are that uh what is node
59:59 - how do you set up a node project and how
60:01 - do you uh use the socket module to
60:04 - connect a client to a
60:05 - server um so uh and then I'm but this is
60:10 - going to be become important the
60:12 - terminal later so I'm going to get this
60:14 - a little bit more
60:16 - featured so let's just see if this is in
60:18 - fact still working this
60:23 - example
60:25 - so why is it so interesting
60:32 - uh so I'm going to draw a circle like
60:34 - this here and we should see it there and
60:37 - then I'm going to draw two stripes down
60:39 - the side like this and we see those on
60:41 - this one so uh this is sort of hard for
60:43 - you to see what's going on here but I'll
60:46 - make this a little bit more explicit
60:47 - this is an example that has
60:53 - uh
60:55 - it's like I I should adjust it let me
60:57 - adjust it here because it's kind of
60:59 - insane how uh I don't know what why this
61:03 - is so
61:04 - big and why the canvas is so
61:10 - small
61:16 - uh so what this example
61:20 - does so I should fix that somebody wants
61:23 - to update I'm a pull request on GitHub
61:27 - um so you can see what I'm doing here as
61:30 - I'm drawing on this side it appears on
61:32 - this side and as I'm drawing on this
61:34 - side that went away but if I minimize
61:37 - this you can see as I'm drawing here it
61:39 - appears on the other side so the the
61:43 - um so what I'm going to do I'm going to
61:46 - start I'm just going to do this on the
61:48 - Fly I I have not done this before I
61:50 - don't know that I even have a good sense
61:52 - of how to do it so this is going to be
61:53 - figuring it out
61:56 - together but I'm about to start part two
61:59 - of the agario coding
62:03 - challenge adding networking and so what
62:07 - I'm going to do is bring the agario code
62:10 - into this node
62:11 - project and change the server so that
62:14 - instead of sharing drawing you're
62:16 - sharing your location and other messages
62:18 - are sent for when you're eating or not
62:20 - eating now if anybody in the chat could
62:22 - help me out for a second
62:26 - uh and I realize you're probably like 10
62:27 - or 15 seconds behind but let's say the
62:29 - here are two people playing let's I need
62:31 - to figure out how to make this work
62:33 - let's say you're two people playing
62:34 - agario the only two people playing it
62:36 - you start like this and you start like
62:39 - this so um you maybe you start over here
62:43 - right okay so hold on so one person is
62:45 - going to be a square one person is going
62:46 - to be a
62:48 - circle and it looks like this so what
62:51 - happens if you meet and you're like the
62:53 - same size
62:55 - who eats
62:57 - whom what can I how can I create an
62:59 - artificial scenario should I just create
63:01 - an artificial scenario where like one
63:03 - player randomly starts bigger than the
63:05 - other one you just get a random size and
63:07 - so obviously if there's a lot of people
63:09 - playing and things are growing over time
63:11 - it'll sort of like work itself out but
63:13 - just to like get it started and have a
63:14 - two-player demo what makes sense for me
63:17 - to do if anybody has any suggestions to
63:19 - that please okay um the bigger eats the
63:22 - smaller not they just overlap if they
63:23 - have the same value they hover on each
63:25 - other if they're the same size no one
63:26 - eats no one I've played them a little
63:28 - but if the same side you bounce off each
63:30 - other I think okay so obviously I'm not
63:32 - going to u whoops I'm not going to
63:34 - create as sophisticated a version of
63:37 - agario as the real game is um you need
63:40 - to be 90% of the size okay thank you um
63:45 - one with more speed okay so what I'm
63:47 - going to do I think is give you a random
63:50 - size when you start and I might kind of
63:52 - hardcode that in even just so and then
63:54 - and then it'll build in the feature um
63:58 - that the um if you're the same size you
64:00 - actually don't eat each other something
64:01 - like that okay uh great okay so
64:06 - [Music]
64:08 - um so here we go so this is going to
64:13 - be
64:15 - agario with
64:18 - networking and I'm going
64:21 - to
64:23 - uh
64:31 - uh just get myself ready here I've got
64:35 - Adam open
64:37 - and uh
64:39 - and I'm going to make this
64:47 - happen Okay so
64:50 - uh close this close this close
64:55 - this uh I just want to check
64:59 - something okay okay here we
65:13 - go all right
65:18 - um I'll cycle the
65:20 - cameras uh if it's 4:30 and I'm still
65:24 - here 4:30 p.m. Eastern I'm still here
65:27 - you guys should start yelling at me
65:28 - because I have to be at a meeting at ITP
65:31 - which is a maybe a 15minute city bike
65:33 - ride at five
65:35 - o'clock uh
65:37 - okay here we go I'm ready for this I'm
65:40 - excited I don't have sound effects today
65:42 - I screwed up too much stuff I think I do
65:44 - have this though
65:48 - uh
65:50 - oh it's only actually playing I I'm not
65:53 - going to bother with setting up the
65:54 - sound effects because you guys don't
65:56 - need that cycle the camera music okay
66:01 - uh
66:04 - okay sweatband you know too many people
66:07 - I can't I somebody find me on the
66:09 - internet some nice rainbow style things
66:12 - I can wear that don't have green in them
66:15 - and then I then I'll then I'll wear them
66:18 - okay
66:22 - uh okay here we go
66:25 - uh hopefully things won't freeze and
66:27 - we're just going to keep it moving let
66:28 - me have a sip of
66:31 - tea and a sip of
66:36 - water and we got one hour I think we can
66:41 - make this happen in an
66:46 - hour hello welcome to part two of the
66:49 - agario coating
66:51 - challenge in this challenge I am going
66:54 - to attempt to add networking so this is
66:56 - where I last left off obviously this is
66:58 - not the fully formed game agario it will
67:01 - not be by the end of this video but
67:02 - it'll give you a lot of the tools and
67:04 - Basics if you wanted to recreate it but
67:06 - hopefully you're watching this to learn
67:07 - about how to do some of this stuff and
67:08 - invent your own idea anyway so this was
67:10 - what I had before I had this sort of
67:12 - like world that I'm in that I can move
67:14 - around and I can start eating other
67:16 - little dots so but now what I need to do
67:18 - is take this this is a one-player
67:20 - version of the game there's no uh all
67:23 - the dots are just created randomly I
67:25 - need to make a version where if I launch
67:28 - it in one in a browser and you launch it
67:30 - in another browser we're both seeing
67:32 - each other in each other's canvas so I'm
67:35 - not going to start from the very very
67:36 - beginning with this because I do already
67:38 - have a playlist instead of tutorials
67:40 - about node and websockets so I'm just
67:42 - going to show you the uh that tutorial
67:44 - makes this example see how this in this
67:47 - canvas I am drawing a little pattern
67:50 - here um I'm going to refresh that
67:52 - because really what I want to draw draw
67:54 - is a nice
67:56 - rainbow that's the worst rainbow ever
67:58 - drawn in the history of time but you can
68:00 - see as I draw here it shows up over
68:02 - there as I draw here you know it shows
68:05 - up uh on the other screen so what is the
68:09 - um what is the uh um schematic what's
68:14 - the diagram of the things that are
68:16 - happening here there is browser instance
68:20 - one that's a browser there is browser
68:23 - instance two and in this case both
68:25 - browser instances are on my laptop and
68:27 - that's how I'm going to demonstrate
68:28 - everything today but certainly the idea
68:32 - here is that I could be playing this
68:34 - here in New York and you could be
68:35 - playing it in London or in Rio or in
68:37 - Tokyo or in
68:39 - Istanbul whatever any city that you
68:41 - could think of around the world I don't
68:43 - know why those cities popped into my
68:44 - head but they did so um and then there
68:46 - is a
68:49 - server which is written in node.js
68:54 - and the canvas the game
68:57 - itself is written just in using p5js
69:00 - client
69:02 - side and what's Happening Here is there
69:04 - is communication these clients don't
69:07 - talk to each other they both talk to the
69:11 - server and when one talks to the server
69:14 - I can send my position to the server and
69:17 - the server can then send my position
69:18 - back to the other one so I think this is
69:20 - the way there's a a lot of different
69:22 - ways you could probably implement this
69:24 - I think what I'm going to do is have
69:26 - each client drive around its own world
69:29 - and broadcast its position to the server
69:31 - and then the server will broadcast the
69:33 - positions of all the other clients back
69:35 - to all the other clients so they can
69:36 - draw those other clients in their own
69:38 - window that sounds a little bit like
69:39 - loopy loopy but hopefully it'll start to
69:41 - make sense once we start to program it
69:43 - so
69:45 - um uh okay you can't hear me hopefully
69:48 - uh I see somebody in the chat saying
69:49 - they can't hear me but hopefully
69:50 - everybody else can hear let me know if
69:52 - there's a sound problem okay so let me
69:54 - close this and get this open here and
69:57 - what I'm going to do now the first thing
69:59 - that I want to do is in this uh sockets
70:03 - example this is the actual code there's
70:05 - a folder oh I'm in the wrong window
70:08 - stop pause okay there's going to have to
70:10 - be an edit point there Mata who is uh
70:13 - helps me so wonderfully with the uh
70:15 - YouTube channel um this will have to be
70:17 - a point where because I walked over
70:18 - there and
70:19 - then uh I didn't switch the camera so uh
70:24 - because I don't have my automatic sensor
70:25 - that just does that automatically that I
70:27 - keep intending to set up uh and so let
70:31 - me let me do that
70:33 - again uh so I have to press one when I
70:36 - do that
70:39 - okay okay so over here what I want to do
70:42 - is I'm G whoops I want to come to this
70:45 - uh agario example and what I'm going to
70:47 - do is I'm going to go to the finder ah
70:49 - let me do this one more time because why
70:51 - did I lose that folder
70:54 - should have it
70:57 - here
71:03 - okay try that one more
71:10 - time okay I'm going to come back over
71:12 - here and this is where I have the code
71:13 - for both of those projects so this
71:16 - is this is the code for the first agario
71:19 - example and this is the code for that
71:21 - sockets example um that does the shared
71:23 - drawing canvas so now what I want to do
71:26 - is I want to grab there's this public
71:28 - folder right here this public folder is
71:30 - where the client side code Lids so what
71:33 - I'm going to do is I'm going to take the
71:36 - agario folder and I actually um I want
71:40 - to leave this I'm gonna I'm going to do
71:41 - something a little weird I'm going to do
71:43 - uh canvas so I just want to be able to
71:45 - refer to this code I'm going to put that
71:47 - in a different folder and I'm going to
71:49 - take agario and put that into here so
71:52 - now you'll notice um
71:54 - uh the node server is
71:57 - running uh on the port 3000 so if I type
72:01 - Local Host 3000 it's like I don't see
72:03 - anything but now if I go to Canvas
72:06 - you'll see this is that program and if I
72:09 - then go to
72:11 - agario uh that didn't show oh because
72:13 - you know why it didn't show up no let's
72:16 - check oh agario one I forgot that I
72:19 - called it agario one there it is there
72:22 - so I'm just now my not server is serving
72:24 - both the shared canvas client code and
72:27 - the agario code and that's useful to me
72:30 - because right now I want to be able to
72:32 - um pull pieces of the code from the
72:35 - shared canvas into agario so I can
72:38 - um uh so I can uh get not have to retype
72:42 - all that socket code from scratch okay
72:44 - so now let's go back to Adam and what I
72:47 - want to do is
72:50 - uh whoops uh
72:55 - pause time
72:57 - out frustrating moment here this
73:00 - happened to me the other
73:02 - day I have to um I don't want to waste a
73:07 - lot of time with this
73:09 - but okay it's
73:13 - fine
73:14 - uh okay never mind I had a weird glitch
73:17 - that I'm not going to worry about okay
73:22 - um
73:26 - so uh Mato sorry that's another edit
73:28 - point then I'm just going to come right
73:30 - back into it
73:32 - here so I'm not going to adjust the
73:34 - server at the moment this is all the
73:36 - code for the server and again it does
73:38 - the sort of basic stuff of setting up a
73:40 - port listening for connections spitting
73:44 - something out to the console when
73:45 - somebody connects and then there's some
73:46 - messaging stuff the messaging stuff is
73:48 - all going to have to change the
73:49 - messaging stuff is what is happening uh
73:52 - for the shared canvas drawing I'm going
73:54 - to have to change that but what I want
73:55 - to do is I really want to look at the
73:57 - client code so I want to look at uh the
74:00 - canvas sketch and I want to look at my
74:02 - agario sketch so I have both of these
74:04 - open I have the agario sketch and the
74:06 - canvas sketch and what I want to do is
74:09 - add a socket first I want to add a
74:11 - socket
74:12 - variable and uh and then I want to uh
74:19 - connect I want to
74:21 - connect when the sketch starts to the
74:24 - server so this is the basic idea the
74:26 - first thing I want to do is add a web
74:29 - socket to um add a web socket to my
74:32 - agario code now I'm missing a piece I
74:35 - believe because now I believe if I were
74:36 - to run that we're going to see an error
74:39 - message where it's like IO is not
74:40 - defined so I actually in addition to
74:43 - that I need to uh make sure I actually
74:46 - access
74:49 - the um sorry I'm in the wrong place I
74:51 - need to make sure I actually access the
74:53 - socket Library as well so I can access
74:56 - the socket Library by referencing a link
74:58 - to socket.io in the index.html so I'm
75:02 - also going to take that and go to the
75:04 - agario index HTML file and add a
75:07 - reference to the socket.io library and
75:10 - now you'll see there we go and if I look
75:12 - back at the server you can see we have a
75:14 - new client so I'm going to uh restart
75:17 - the server and I'm going to refresh
75:19 - agario and you can see this agario
75:22 - sketch has now connected to the server
75:26 - great um okay so now we've got step one
75:30 - we've got the sketch connecting to the
75:33 - server are you guys with me here are you
75:35 - with me please be with me um I'm very
75:38 - happy and that's really like just an
75:40 - exciting moment just to have it connect
75:41 - so let's look now what one thing we've
75:44 - really got to think about is I've got to
75:46 - look at my agario code now this should
75:49 - go
75:50 - away notice how I had this B bit of code
75:53 - at the beginning that just makes a whole
75:55 - bunch of
75:56 - blobs but there's no point in making
75:59 - these random blobs anymore the blobs
76:02 - should only actually exist if they're
76:04 - actual people playing the game so I am
76:07 - going to get rid of this in addition
76:10 - when I connect I should in addition to
76:13 - just connecting create a new instance of
76:16 - a blob the server is going to have to
76:19 - keep track of a list of all the clients
76:22 - that are current connected and I think
76:24 - we're going to have to figure out some
76:26 - way of giving those clients an ID number
76:29 - and there are probably some very clever
76:31 - and sophisticated ways I could come up
76:33 - with assigning IDs I might just to get
76:35 - started use a counter 0 one two three so
76:39 - we've got something that's going on here
76:40 - that I want to just think about here the
76:42 - server needs to keep track of list of
76:48 - connected clients this is data that the
76:51 - server needs to keep track of and that
76:54 - list is essentially going to be mirrored
76:56 - in the client as well and then the
76:58 - server is just going to update the
76:59 - positions continuously so when I go back
77:02 - to the server code right remember now
77:05 - it's very tricky to keep track of what's
77:06 - the server what's the client especially
77:07 - because they're both written in Java
77:09 - scripts there's a nicity to that but I'm
77:11 - going to go back to the server and what
77:14 - I want to do is add a variable so I want
77:17 - a variable at the top and I'm going to
77:19 - call it
77:21 - blobs Okay so that is all of the blobs
77:24 - that are currently connected okay and I
77:28 - think it would be useful probably to
77:31 - create a blob
77:33 - object a little unsure about this but
77:36 - let's let's do this for right now what
77:39 - if I create um I don't know if I really
77:42 - need a Constructor function but let's
77:44 - just do it just for the sake of argument
77:46 - a blob has an x a blob for the a blob
77:49 - has a y and a blob has an ID
77:55 - so I don't know but in other words that
77:57 - list should always be keeping track of
77:59 - what's the blob's ID and where is it so
78:01 - I'm wrote a Constructor function just in
78:04 - case I need to use it but I'm not
78:06 - entirely sure I do just yet because just
78:08 - doing this on the fly so when we have a
78:10 - new connection oh the socket gets an ID
78:14 - what a one I have an idea why don't we
78:18 - use that and we might end up using like
78:20 - some kind of like hashtable thing where
78:22 - we look up where we look up the client
78:25 - in a list based on its ID there's so
78:26 - many things we could eventually add to
78:28 - this we'll see but basically at this
78:30 - moment when we have a new client what I
78:33 - want to do is create a
78:38 - blob which is a new blob object with
78:42 - socket. ID now I don't know how I'm
78:45 - going to get the XY position just yet so
78:48 - we'll figure that out later I'm just
78:49 - going to type in 00 right now and then I
78:52 - want to say blob s.
78:55 - push l so in other words the moment that
78:59 - someone's
79:00 - connected we then have a new client now
79:03 - I think that actually to the truth of
79:06 - the matter is even better I have now
79:08 - have an idea maybe there the client
79:10 - should in addition to just connecting
79:12 - send a message like start so maybe there
79:15 - should be right because can I get
79:20 - um when a user socket uh okay hold on I
79:23 - have to think about this um when the
79:27 - server gets a message called Mouse does
79:30 - the do we yeah yeah yeah uh yes we
79:33 - should get the particular so we should
79:36 - still have access to that so socket ID
79:38 - so let's let's try something let's say
79:40 - there's a message called
79:42 - start and the message that comes in is
79:46 - uh rece uh is data dox data
79:51 - doy and I don't want to broadcast that
79:58 - back what I want to uh I want to leave
80:01 - that so what I just want to see is I
80:03 - what I want is for and I want to see uh
80:08 - socket sorry I'm figuring this out as I
80:10 - go it's hard to like talk it through and
80:12 - do it okay this is what I want to do I
80:15 - don't actually want to create the blob
80:16 - the moment the connected I mean the I
80:19 - want to I want the client to explicitly
80:21 - also send an additional message
80:24 - because here what I want to do is make a
80:27 - new blob object and then have the client
80:29 - send in its XY
80:31 - position so let's now go to the client's
80:36 - code and here what I want is to send bro
80:41 - how do I send something ah I need to go
80:43 - back to my previous example which
80:48 - uh this is how I send something to the
80:51 - server so I'm going to grab grab this
80:53 - code and go back to my agario sketch and
80:56 - I want to send to the
80:58 - server
81:03 - uh right the server is going to make
81:06 - oops the server made that I lost a
81:09 - little bit of code there sorry sorry
81:11 - sorry let me get that back socket.
81:15 - emit so and I want this to be start so I
81:18 - want the data to be blob.
81:21 - X
81:24 - blob. Y and by the way the blobs all
81:26 - need a size so does the server keep
81:28 - track of the size does the client keep
81:30 - track of the size I guess they both do
81:32 - for right now they're both going to keep
81:33 - track of it so let's make a size uh
81:37 - which is I think blob. R I
81:40 - assume um which by the way can I just
81:44 - emit The Blob it's gon to have all this
81:46 - other stuff in it so I I'm going to do
81:48 - this right now so there's definitely a
81:50 - way I can clean this up right so
81:51 - essentially what I just made this blob
81:53 - object and then I make this data object
81:55 - which is what I'm sending I can clean
81:56 - that up in a bit but uh okay so I make
81:59 - the blob object and just to be sure it's
82:02 - R yep and then I want to send that so
82:06 - let's see if this works let me go back
82:08 - to the server code and I realize what
82:11 - I'm going to get uh in addition I also
82:14 - want the blob to have an
82:17 - R to keep track of the
82:21 - size and
82:23 - I want to see
82:25 - that here as well just to make sure it's
82:27 - all coming in and make it with a data. r
82:32 - so there's a lot of redundancy here but
82:34 - this should give us the basic idea right
82:36 - if I restart the
82:38 - server and I now refresh the
82:42 - client we have connected I got undefined
82:45 - undefined so I got the ID and I got 64
82:50 - why did I get undefined for the X's why
82:53 - so I'm going to have to debug that
82:54 - where's my debugging music someday I'll
82:56 - have it um let's look into this so where
82:59 - where are things being s oh I bet you I
83:01 - know why so the blob is actually using
83:05 - vectors so it has a position Vector so
83:09 - instead of um uh uh there when I'm
83:12 - sending the information I actually need
83:14 - to see blob said blob. dox blob. doy so
83:19 - now if I were to refresh this
83:23 - and see we can see now the client
83:26 - connects and it sends its ID it's X and
83:29 - it's Y and its size so just to make
83:32 - things kind of have a little variety
83:35 - right now what I want to do is I want
83:39 - the The Blob to send in a random
83:47 - location and a random size and the size
83:50 - will be smaller between 8 and 25
83:53 - four so let's refresh this again and uh
83:58 - and interestingly there's a zoom thing
84:00 - happening because um everything's based
84:04 - on having a size of 64 but that's fine
84:06 - I'm not going to there's that thing
84:08 - where we're zooming I'm going to just
84:09 - leave that b for right now um so whoops
84:12 - I went to the wrong place and we can see
84:14 - that uh you know it's very hard to debug
84:17 - in node because now I'm printing out
84:20 - these floating Point things we're
84:21 - getting all these values you can see the
84:23 - stuff is in different places so this is
84:24 - really good right we both
84:28 - have a uh we we have now a client who
84:31 - connects who gets a unique ID and who
84:35 - broadcasts its starting up I'm attached
84:38 - here who broadcast it's starting X and Y
84:41 - and size
84:44 - okay here we go let's keep moving
84:46 - everybody I'm excited we're getting
84:48 - we're getting to this uh so okay so now
84:52 - here's the thing every time through draw
84:55 - The Blob updates its location so what I
84:59 - think we need to do right now is update
85:04 - the server's sense of where I
85:07 - am so what I need to do here is now say
85:10 - in draw I want to do this
85:16 - again but I want to emit an update
85:19 - message so I could probably combine
85:21 - these two
85:22 - but in the beginning a start message
85:25 - means I'm a new blob and now in draw I
85:27 - want to update my X and Y location
85:29 - continuously now latency and scale and
85:32 - all that are going to be complicated
85:33 - questions we're going to have to deal
85:34 - with at some point or maybe I won't deal
85:36 - with it but you will have to deal with
85:37 - it but this is kind of getting started
85:40 - right uh the chat U someone writes don't
85:42 - forget uh don't forget to delete Blobs
85:45 - of disconnected clients which I'll
85:46 - certainly have to do at some point okay
85:48 - so now what I want to do is in the
85:51 - server
85:53 - I need whoops sorry I have too many
85:55 - things open I'm going to just go to the
85:57 - server in the server code I need to deal
86:00 - with another message so that's the start
86:09 - message and this
86:13 - is an update
86:16 - message and I'm going to leave this in
86:18 - here and now instead
86:21 - of instead of
86:25 - um instead of creating a new blob and
86:27 - putting it in the array what I want to
86:29 - do is find the blob with that ID now I'm
86:32 - going to do this in a terrible way I'm
86:34 - going to do this in a brute force method
86:35 - of just looping through the array to
86:36 - find the correct blob later I would love
86:39 - to improve this by using kind of like a
86:40 - Dictionary lookup um but I'm going to
86:43 - just to have the Simplicity of having an
86:44 - array right now I'm going to just leave
86:46 - it this way so uh which is I'm going to
86:50 - start with a blob called which which is
86:53 - the one actually I'm just going to say
86:55 - VAR blob and then I'm going to Loop
86:57 - through the length of that
87:01 - array and I'm going to say if blob. ID
87:06 - oh sorry if a
87:08 - socket. ID equals blob's indexi doid
87:12 - right I want to find the blob who has
87:14 - the same ID as the
87:16 - socket then I want to say blob equals
87:18 - blob's index
87:20 - I and then
87:22 - what I just want to do is update the
87:24 - location so I want to say blob dox
87:27 - equals uh data
87:31 - dox blob doy equals data doy and blob do
87:38 - again I could certainly improve this and
87:41 - just copy the object or make it the same
87:42 - object but for Simplicity I'm say blob.
87:45 - R equals data. R so this is essentially
87:48 - here now updating that array so what I'm
87:51 - doing doing now is as the blobs update
87:55 - their location the array keeping track
87:57 - of where all the blobs are gets updated
87:59 - as well okay uh now I don't need pause.
88:03 - X here this is I this is accidental
88:05 - because the way that I programmed it
88:06 - maybe you could do this in a different
88:07 - more better way but I'm using a vector
88:09 - in the client but I'm not using a vector
88:11 - in the server a vector object that is
88:15 - okay so uh let's see what happens now
88:18 - when I restart the
88:20 - server and I also do this we should see
88:25 - now you can see here the you can see
88:28 - that the location is moving continuously
88:31 - and it's just I don't know it's going
88:32 - down let's see if I move let's see if we
88:34 - can I can like move into the client to
88:36 - see it now it's going back up so we
88:38 - we're not seeing anything move right
88:39 - because it only moves that it's drawn um
88:42 - relative to itself but you can see that
88:45 - this is actually working on some level
88:47 - and I by the way I'm GNA have to put
88:48 - some you know constraints around where
88:50 - the blobs can move to
88:53 - okay uh so we're good we've got now
88:56 - every blob and you can see now if I were
88:58 - to connect a second
89:02 - one you would see here and if I kill the
89:04 - server for a second we should see I
89:07 - don't only see one
89:09 - ID so let me try that
89:13 - again let me hit refresh here let We
89:16 - Fresh here and there should be
89:20 - h
89:25 - I have a new clent oh okay hold on
89:28 - there's an error
89:30 - here cannot set property X of
89:34 - undefined so I got some sort of
89:37 - error uh ah it must be oh the if I don't
89:41 - restart the server no we did get two
89:43 - client so this is I I really have to
89:45 - always just restart the server because
89:46 - the server's got this persistent uh list
89:49 - of clients and if somebody connects
89:53 - uh and then can't find that um can't
89:55 - find that in the list we're going to
89:56 - have a sends an update message so
89:59 - restart the
90:01 - server so you know there's some cleanup
90:03 - here I need to do um but I don't know
90:06 - why I'm not seeing more than one uh
90:09 - client
90:11 - message I'm GNA time out here for a
90:13 - second um to try to investigate this
90:16 - this I have to get edited out of the
90:17 - public version of this because I I'm a
90:19 - little confused um what I want to do is
90:24 - uh take this
90:27 - out whoops and run the
90:32 - server so one client connected AAA
90:37 - here's the last four
90:38 - digits and now
90:42 - oops another client connected let's
90:45 - close this so I definitely had both
90:48 - clients connect with two different ID
90:50 - numbers and two different locations
90:54 - um so
91:00 - why let's do something now where in the
91:03 - client so I'm going to put this back
91:07 - in and I'm just going
91:10 - to only console log the socket ID and
91:14 - I'm going to change the
91:17 - client to have uh sorry I'm going to
91:21 - change the client to have a frame rate
91:23 - of one so those update messages don't
91:26 - come in so
91:28 - fast uh and I'm going to close
91:35 - these
91:42 - and so here we're seeing kind of a
91:45 - heartbeat every frame of that one
91:47 - client's
91:49 - ID and now I'm going to connect another
91:52 - client we have a new client and I see
91:55 - the heartbeat of the second one and how
91:58 - come I don't see the heartbeat of the
91:59 - first one
92:02 - anymore let's see if I have an error
92:08 - here there's no errors there oh no no no
92:12 - they're both
92:16 - there that's just weird
92:20 - how
92:23 - oh you know what it
92:24 - [Laughter]
92:30 - is the code is actually working just
92:34 - fine you know what the you know what you
92:36 - know what browsers do they try to be
92:38 - smart and uh uh maybe you haven't
92:41 - figured this out yet but I'm going to
92:42 - show
92:43 - you look
92:47 - uh I'm seeing now the B client and now I
92:52 - am seeing the a client and the B client
92:55 - let's see if I can make it do both of
92:57 - them
93:01 - nope now I'm seeing both of them so if
93:04 - the window is not in focus in the
93:06 - browser it shuts down that draw Loop so
93:09 - I'm not able to yeah yes so everyone is
93:12 - already uh everyone in the chat has
93:15 - already figured this out at the same
93:17 - time I did or earlier but
93:20 - anyway okay so so I can go back into the
93:23 - video
93:24 - now let me get back to where I
93:32 - was and uh I'm going to go to the client
93:37 - and undo a bunch of things I kind of
93:40 - like having the frame rate
93:42 - one oh uh that's all I did in the client
93:46 - I think the client is good now whoops
93:49 - and the server what did I do I just
93:51 - changed
93:53 - this so that's good um okay uh yeah okay
94:00 - so um how are we doing on time 350 all
94:03 - right we're in good shape everybody so
94:05 - I'm gonna go back into the video and
94:07 - explain what was
94:09 - wrong uh and Mata who is
94:13 - uh I can just only thank over and over
94:15 - again as much as possible we'll splice
94:17 - this together um and I'm going to now
94:21 - say
94:23 - let me run the server
94:29 - again okay um I am back after some
94:32 - debugging which I realized aha browsers
94:35 - will play tricks on you sometime notice
94:37 - how I'm only seeing the updated location
94:39 - of one client it's not because it's not
94:41 - working it's because my browser is
94:44 - actually only showing me one client and
94:46 - the other tab which is hidden has gone
94:48 - to sleep this is a smart thing because
94:50 - why update an animation in a tab you
94:52 - can't see but if I pull this tab out and
94:55 - make it visible now you can see that I
94:57 - have both of them showing up as they
94:59 - both neither's asleep so this is
95:00 - something I just have to keep an eye on
95:02 - as I develop uh things further so okay
95:05 - so I'm going to put this back I'll I'll
95:06 - pull it out or just actually close it
95:08 - I'll pull it out later when I need to so
95:11 - now we need to add a feature there's a
95:13 - problem here which is that
95:16 - um uh I'm letting these blobs just go
95:21 - infinit off into like an infinitely
95:23 - large space and you can see its location
95:25 - currently is um its location currently
95:29 - is like negative thousand, something so
95:31 - I need to put something in the code to
95:33 - constrain them to a fixed space in the
95:35 - screen and the uh I could be um there's
95:39 - a lot of ways I could do this but I'm
95:40 - going to just do it in a really uh I'm
95:43 - just going to write a blob.
95:47 - constrain and in the blob object I'm
95:50 - going to write a function called this.
95:53 - constrain uh and I'm going to make that
95:56 - blob. dox equals constrain blob. p.x
96:01 - zero and
96:04 - WID uh and actually I'm going to say
96:08 - negative width to width and I'm going to
96:10 - say uh y negative height to height and
96:14 - because it's 0 0 I think is technically
96:16 - the center the way that I've written
96:17 - this if you remember from the previous
96:19 - tutorial so again I could make a bigger
96:21 - I can make a smaller world I can make it
96:22 - a flexibly sized World depending on how
96:24 - many blobs are there but I'm just going
96:26 - to do this and this should give me a
96:28 - nice now if I refresh this you can't see
96:30 - me moving but if if I look at this
96:33 - location at some point I don't remember
96:34 - what the size of the window is I think
96:36 - it's around 600 uh you're going to see
96:38 - that it sort of stopped at -600 so this
96:40 - is really useful because as I'm testing
96:43 - it I don't I want to be able to see
96:44 - things within sort of like a similar
96:46 - World okay so now what I want to do
96:54 - what I want to do now aha so I have
96:56 - everything working I have a server which
97:01 - is receiving information from clients
97:03 - each client having its own blob that's
97:06 - moving around the screen what I'm not
97:07 - doing is
97:09 - broadcasting back to the the clients
97:12 - where everything else
97:14 - is so oh boy I'm realizing there's a big
97:18 - complication that's going to arise in a
97:20 - moment
97:22 - but it's okay we're gonna we're gonna
97:24 - we're going to get through this together
97:26 - be in a happy place figuring this out
97:28 - but what I at least want to be able to
97:30 - see is step two here I want to see
97:32 - somebody else's blob appear on my screen
97:34 - I want my blob to appear on their screen
97:37 - okay so here we go let's figure out how
97:40 - to do that what I need to do is I need
97:43 - the server to broadcast and if you look
97:49 - uh if if you look
97:54 - here
97:56 - um I'm trying to think of the best way
97:59 - to do this to start um let's go back to
98:01 - the the the sorry the server code or
98:05 - have I I think the server code I've
98:07 - destroyed it I need to go and grab
98:11 - sorry uh so what I want to
98:15 - do is what I want to I just want to
98:18 - create
98:20 - a I want to
98:25 - create I'm trying to think here I want
98:29 - to think that I want to do is create
98:31 - just a heartbeat that every so often the
98:34 - server sends a list of all the current
98:36 - blobs and their
98:40 - location so I am going let's go back to
98:43 - the canvas example which
98:46 - I uh sorry I lost my original code let
98:51 - me find it ah let me find it this
98:54 - way
98:57 - uh uh sockets uh server so what I'm
99:00 - looking for is uh this io. sockets emit
99:05 - sorry I could have this was what I want
99:07 - to do is I'm going to write a function
99:09 - called set
99:11 - interval and what I want to do is have a
99:15 - heartbeat function happen every I'm
99:18 - going to have it once per second now
99:19 - just to make it really slow to
99:22 - update and I want this function
99:27 - heartbeat to
99:30 - emit uh
99:32 - heartbeat uh I call it a heartbeat I
99:34 - think that's a common word in networking
99:36 - like it's like your heart is
99:37 - continuously beating at regular
99:38 - intervals this is something that the
99:40 - server is just going to do at regular
99:41 - intervals and what's it going to do it's
99:43 - going to send out the full list of blobs
99:45 - and actually right now it's just going
99:46 - to send out
99:48 - hello so I just want to see and I I
99:52 - I just want to see a message I want to
99:54 - see that I can get the
99:56 - client to receive a message from the
99:58 - server every second okay so let's see
100:01 - how that works so I'm G to go back to
100:03 - the client code and the client code I
100:06 - need to go back into the canvas and see
100:09 - I got I need to add this uh this on
100:12 - method I want to do something when I
100:14 - receive that heartbeat so I'm going to
100:16 - bring that in and I'm going to put it in
100:19 - setup and and when I receive the
100:23 - heartbeat I just want to
100:26 - say console.log data so I just want to
100:29 - see that message come in
100:34 - okay so now I've added a heartbeat to
100:37 - the server and a heartbeat to the client
100:39 - so let's run this again let's run the uh
100:44 - client and we should see hello hello
100:47 - hello hello hello server is sending that
100:50 - now let's change the server to do
100:51 - something else instead of sending hello
100:54 - I'm got to go back to the server let's
100:56 - actually send that array let's just put
100:59 - the array in there let's see what
101:01 - happens if we just put the array in
101:02 - there we might have to stringify it I'm
101:04 - not sure but let's just put the array in
101:05 - there and see what we get o that was a
101:07 - loud
101:08 - noise um okay uh so I'm going to restart
101:11 - the
101:13 - server and I'm going to refresh the
101:15 - client and object object let's look in
101:18 - object there it is it's an
101:22 - array with uh so it's actually sending
101:26 - it as an object which is terrific you
101:27 - can see the ID R so I'm actually getting
101:30 - all this information in the
101:31 - client
101:34 - now bear with me here let's connect a
101:37 - second
101:39 - client and a third client and a fourth
101:43 - client and let's look at what that
101:45 - heartbeat looks like
101:48 - now I got to go look look at this an
101:51 - array of four
101:53 - things there we go all four things right
101:56 - there so what is it that we want to
101:58 - do all I've got to do now is Loop
102:01 - through those four things and display
102:03 - them on the screen the server sending me
102:05 - here's where everything is here's where
102:07 - everything is here's where everything is
102:08 - oh this is wonderful so let's go ahead
102:10 - and do that so I'm going to add to the
102:11 - client
102:13 - code um where's my client code so many
102:17 - different things here it is I'm in
102:19 - draw
102:21 - uh okay so here so I need an array oh
102:24 - that array blobs I already have it I'm
102:26 - going to
102:28 - say blobs equals data so that was an
102:32 - array and then what I'm going to do is
102:35 - I'm going to say four VAR I equals zero
102:38 - I is less than oh I have that there so
102:41 - funny that I have this here already and
102:44 - I was going through it backwards but I I
102:46 - they're not actually blob objects boy
102:47 - I'm just going to draw just to see that
102:49 - they're there I'm just going to draw an
102:52 - ellipse blobs indexi dox blobs indexi
102:57 - doy blobs index i. R *
103:01 - 2 and I'm going to draw it and I'm going
103:04 - to make it a different
103:07 - color and I'm going to say uh let's just
103:09 - make it like a blue or something so we
103:11 - see it as a different color so let's
103:13 - just see how that
103:14 - works there we go look those are the
103:17 - other blobs and I can kind of walk
103:18 - around and try to find them those are
103:20 - from the other clients and I could go to
103:22 - the other client and I could try to find
103:24 - probably presumably I have to refresh I
103:27 - could find the other blobs now one thing
103:29 - I might like to do is actually display
103:31 - the ID is that's going to kind of um
103:35 - kind of help things I don't know what's
103:36 - going on there if new blobs are
103:37 - connecting
103:39 - continuously uh let's just see blobs do
103:44 - length
103:49 - whoops uh there we go yeah I don't know
103:53 - why I have so
103:56 - many um so I there's some debugging that
103:59 - I've got to do here
104:04 - uh seven no it's right I guess I have
104:07 - seven tabs open do I have oops do I have
104:10 - seven tabs open I can't keep track uh
104:14 - you know what though the server hasn't
104:15 - been restarted and I've been doing all
104:16 - sorts of crazy stuff so in these kind of
104:19 - cases it's generally good to start
104:22 - over so let's just do two
104:27 - blobs and see if things are
104:30 - working so I'm
104:34 - gonna whoops and I went to the wrong
104:37 - server the wrong project 3000 here we go
104:42 - Okay
104:49 - so time
104:52 - out what's going on here I think there's
104:55 - something going on with the way that I
104:57 - draw everything relative to
105:00 - itself oh I know what it
105:03 - is I know what it is never mind back
105:09 - in I'm drawing myself and I'm drawing
105:12 - myself only once per second so as I move
105:16 - around uh it sort of looks like I it's
105:19 - like I I'm still drawing myself in a
105:21 - previous historical location so that I'm
105:23 - going to fix as I stop drawing myself
105:25 - which I need to do so one thing I want
105:27 - to do is I want to
105:30 - draw the blobs with their ID so let me
105:34 - just for a second see if I can make that
105:36 - happen really kind of quickly in a in a
105:39 - like a not so awful I'm going to say
105:41 - Phill 255 text blobs index ID and then I
105:46 - want to say blobs index
105:48 - i.x blobs index i.y plus r blob's in uh
105:55 - index i. R times uh three let's have it
106:00 - appear below and let's say text
106:04 - align Center am I getting the
106:07 - ID yeah okay oh the way that's not so
106:10 - let's make the ID a lot
106:14 - smaller I think probably
106:16 - the uh window yeah uh text size uh
106:23 - 12 and uh the times three was
106:30 - unnecessary uh okay so I want to see uh
106:34 - let's make this
106:37 - six what's going on with text
106:42 - size okay that's kind of what I wanted
106:45 - to do so I just want to be able to see
106:46 - quickly the ID below each of the
106:49 - blobs
106:52 - okay we're getting somewhere we're
106:54 - getting close now here's the thing I
106:56 - want to not draw
106:58 - myself there's going to be a third part
107:00 - to this clearly we're getting pretty
107:02 - close and I'm going to release this code
107:04 - and you guys can kind of get further on
107:05 - your own I'll come back and do the third
107:07 - part at some point but the a couple
107:09 - things I want to fix here number one is
107:10 - I want to uh I want to know my own ID
107:12 - and not draw myself so I need to have um
107:16 - in this particular uh sketch my own ID
107:21 - and I would like the uh I would like to
107:26 - send from the server a message just back
107:29 - to myself now um so when I send this
107:32 - first start I want in
107:39 - server to
107:42 - um I want the server
107:45 - to send a message back with the clients
107:50 - I ID like the client needs to know its
107:52 - ID so the question is how do we in uh
107:57 - how do we use uh node websockets to send
108:00 - a message only to this particular client
108:03 - and uh it's probably something like
108:05 - socket. emit or something but I'm just
108:08 - going to look this up uh Set uh
108:11 - node uh sockets send message to one
108:16 - specific
108:19 - client
108:20 - uh so here uh so uh so how do we do this
108:26 - you have to grab the client ID uh and we
108:28 - can just say io. client session ID uh.
108:32 - send let's see if that
108:34 - works
108:37 - um uh so let's see if this works like
108:40 - what if I then say
108:43 - this and so I want to
108:47 - say uh
108:53 - uh
108:54 - socket. I wonder if the client has this
108:57 - built in somehow does the client have
109:00 - this built in somehow let's look at
109:07 - this oh look there's the
109:10 - ID look the client already knows its own
109:14 - ID isn't that wonderful so I don't need
109:16 - to send it back the client knows its own
109:18 - ID now why does the client have to have
109:20 - it as
109:25 - um without
109:27 - the without the extra num slash a number
109:30 - but that's fine we can work that out so
109:32 - what I want to do here now um so I don't
109:36 - need
109:38 - this what I want to do in the client is
109:42 - I want to when I'm drawing them I want
109:46 - to only draw them if the ID is not my my
109:50 - own ID so uh I want to say as long as
109:52 - blobs indexi doid does not equal uh
109:57 - socket.
109:58 - ID but the problem with that is blob's
110:03 - ID has a couple extra characters at the
110:06 - beginning so I'll just do this I can
110:10 - just chop those off I think with
110:12 - substring substring is a method that
110:15 - will give me a part of a string and if I
110:18 - go back to the sketch and look please
110:20 - don't move around uh you can see that
110:22 - there are there are just two extra
110:24 - characters 01 so I want the substring to
110:26 - start at
110:27 - two um so I want the substring to start
110:31 - at uh two comma uh and let's just uh
110:36 - let's make this simpler let's say VAR ID
110:39 - equals blobs indexi doid and then I can
110:44 - say um id. substring to to the length of
110:50 - the string so I want to make a substring
110:52 - from the second character all the way to
110:54 - the end uh and as long as that's not the
110:57 - case
111:00 - then I can draw that particular blob
111:04 - okay so let's see
111:07 - here so we should be good in that um
111:11 - well there's a whole lot of blobs now we
111:13 - can see that I can find other
111:15 - Blobs of varying sizes if I kind of poke
111:19 - around the
111:20 - screen but I am not drawing
111:23 - myself
111:25 - um so we're in pretty good shape here
111:28 - let's let's change a couple things first
111:31 - of all let's restart the
111:33 - server I think that we can now in the
111:37 - server do a away with this console.log
111:40 - that's happening over and over again as
111:41 - everyone updates itself and we can um
111:45 - what we can do is now really test out
111:47 - two particular clients so to do do this
111:50 - what I want to do is kind of divide
111:53 - my I'm going to get rid of the I want to
111:56 - divide my wi screen in half
111:59 - here and I'm going to
112:02 - uh just go
112:05 - to I have two windows open that aren't
112:08 - connected yet to the server then I want
112:13 - to run the
112:15 - server connect this one to uh sorry
112:19 - agario one and you can see there's a
112:22 - client connected then I want to connect
112:25 - this one to agario one and there's
112:29 - another client connected so we can see
112:32 - what their location starting locations
112:34 - are and I should be able to now move
112:37 - around and try to
112:38 - find
112:45 - it anybody
112:48 - anybody
112:50 - where are you other blob I know you're
112:53 - out there
112:54 - somewhere so okay so we're going to have
112:56 - to do
113:00 - this it's nice to just look at these
113:02 - circles on the screen okay so I got to
113:03 - figure out what went wrong here I think
113:05 - we're on the right path let's do a
113:07 - little debugging
113:09 - here uh let me make this a bit smaller
113:14 - oh I don't know why oh there it is I
113:17 - don't know why I couldn't find you
113:18 - before come back which
113:23 - way let's let's go over here and look at
113:25 - where these blobs are there's two of
113:28 - them one is that oh negative 600600
113:33 - which is over here I think should be the
113:36 - top
113:44 - left so where am
113:47 - I okay okay I am back okay so I'm going
113:50 - to um just uh
113:53 - console.log the blobs X and Y
113:56 - position uh so I can take a look at that
113:59 - and the other thing I was going to do
114:01 - here is only say if Mouse is
114:05 - pressed then uh update the location so
114:09 - I'm actually not going to move a
114:11 - particular
114:12 - blob unless uh unless you click the
114:16 - mouse so what I want to do is I need to
114:18 - find terminal again this is going to
114:19 - help me debug so I'm going to kill the
114:22 - server I'm going to uh re hit refresh
114:26 - which uh will make it so that it doesn't
114:28 - actually connect uh and then I'm going
114:30 - to restart the server I'm going to start
114:33 - one blob and it's saying undefined so
114:35 - hold on I need to fix that uh blob.
114:39 - p.x blob.
114:42 - doy uh so let me refresh again uh you
114:46 - can see okay so uh and that's now
114:48 - showing both of them
114:50 - them uh so hold on I'm got to restart
114:53 - the server and refresh this okay so you
114:57 - can see here this particular blob has
114:59 - shown up at this location
115:02 - 150 comma
115:04 - 24 and let me make this a little bigger
115:07 - there we go and now I'm going to go to
115:09 - the other
115:10 - blob I'm going to start a new one oops
115:14 - and you can see there it is so now I
115:16 - want to move this blob a little bit
115:18 - whoops
115:22 - uh and let me see if I ah and that
115:25 - worked there we go and it the thing is
115:27 - it's only
115:28 - updating it's only updating once a
115:31 - second uh and so I can move
115:34 - closer and you can see ah okay so let me
115:36 - fix that this this is totally working by
115:38 - the
115:41 - way uh but uh let's kill the server
115:43 - again I'm going to make this look a
115:45 - little bit better so I should I don't
115:48 - know what's reasonable but I'm going to
115:50 - have the server have its heartbeat um 30
115:54 - frames per second is uh um and there's a
115:59 - th milliseconds in one second so let's
116:02 - say let's have the heartbeat happen
116:04 - every uh like 33 milliseconds let's see
116:08 - if it can handle that so I'm going to
116:10 - restart the
116:12 - server and I'm hit refresh here and I'm
116:15 - going to take that out and I'm GNA hit
116:18 - refresh here whoops
116:20 - I'm hit refresh here and we should see
116:22 - now as I
116:24 - move and let's get a third one
116:29 - going let's get a ah this I'm gonna get
116:34 - a third one
116:38 - going and one more come on you can do it
116:45 - agario there we go so we can see here uh
116:48 - if I were to move move
116:51 - around uh they're all responding to each
116:54 - other we've got a multiplayer kind of
116:57 - beginnings of a multiplayer agario here
117:00 - so okay everybody this is the end of
117:02 - part two I don't know how long this
117:04 - video was or if it was at all
117:06 - understandable or useful at the very
117:07 - least you sort of saw how difficult this
117:09 - is and the and I will release the code
117:12 - for what I've got so far so there's a
117:14 - big missing piece here which is that
117:16 - I've got to check intersection and
117:18 - figure out what to do actually uh add
117:20 - add the game mechanics where you when
117:23 - they intersect the bigger one eats the
117:24 - smaller one the your game the smaller
117:26 - one's game is over maybe you can start
117:28 - again there's a lot more steps to add to
117:30 - this but this I think is going to get
117:32 - you a little bit further as you can see
117:33 - the sort of basic mechanics of having a
117:36 - server keep track of a list of everyone
117:38 - connected have the clients Implement
117:40 - their own motion physics update their
117:42 - location to the server and if the server
117:44 - send those new locations back to the
117:46 - clients so that they update so you know
117:48 - there's a question of you know how do
117:49 - you deploy this what would happen if you
117:51 - suddenly had 100,000 people playing this
117:52 - all at once is node and websockets going
117:54 - to support that but you can sort of see
117:56 - the basic ideas of how you can have this
117:59 - more sophisticated networking
118:00 - multiplayer networking um working um so
118:06 - um thanks for watching this particular
118:08 - video uh this was part two and at some
118:10 - point I will release a part three which
118:11 - I do a few more steps although it might
118:13 - be a while before I get to that thanks
118:16 - again okay um
118:21 - so every what somebody in the chat is
118:24 - telling me something about declaring ID
118:25 - at the top of the code and I think I
118:29 - that is um you're right that that is no
118:30 - longer necessary I'm not using that for
118:33 - anything so I can take that out if
118:35 - that's what you were telling me um at
118:37 - one point I was going to keep track
118:38 - socket. ID always has this particular um
118:42 - socket's
118:44 - ID
118:47 - um okay um let's let's do a
118:57 - quick okay so uh so there's a couple
118:59 - things there's a lot of things I haven't
119:01 - gotten to today that I wanted to get to
119:03 - but uh and I'll get to them later
119:05 - another
119:06 - time um but let me see here uh uh part
119:10 - three you're definitely not going to get
119:12 - to the Blobby circles thing that can be
119:13 - done that can be done before I really
119:15 - have to go so
119:18 - um let's let's make that
119:21 - happen um let me just set myself up in
119:27 - um let me do this in a slightly
119:29 - different way I'm going to
119:38 - do
119:43 - um whoa what happened
119:45 - there sorry something weird happened
119:52 - and
119:54 - uh so I'm just getting myself set up
119:57 - here and I'm just going to go back
120:03 - to
120:06 - uh am I still running the python server
120:11 - okay
120:14 - yep okay so what I'm going to do here in
120:18 - here
120:20 - oh I forgot this is now all got all the
120:21 - socket stuff in it I'm going to get rid
120:23 - of
120:26 - that just going to get rid of the socket
120:28 - stuff just to
120:31 - simplify
120:48 - uh
120:52 - oops and close this
120:58 - and this actually technically could go
121:01 - before I think in the order of release
121:03 - could go before the networking
121:05 - thing
121:09 - uh okay so what I want to do is make
121:12 - this uh more Blobby than just a circle
121:16 - so and uh one thing I want to do in
121:19 - terms of the zoom
121:23 - thing
121:25 - uh there we go is that okay so the
121:28 - cameras are about to shut
121:32 - off okay so this is going to be another
121:34 - coding challenge the Whiteboard is
121:37 - visible uh and I
121:43 - need this over here I'm over erasing the
121:46 - whiteboard in case you're wondering
121:47 - where I
121:48 - went
121:51 - and uh what I'm going to do
121:58 - is
122:00 - um stretch for a second do some yoga I
122:04 - don't have I have none of my sound
122:06 - effects or anything but okay so here we
122:09 - are and really I'm GNA sorry close a
122:12 - bunch of things this is
122:15 - important and uh let's just do this
122:30 - okay
122:34 - um okay
122:37 - so here we go so all
122:44 - right I don't know what to to say this
122:47 - is oh boy I really have to go this is a
122:49 - bad idea it's fine I'm G to do it
122:53 - anyway thank you guys for being here
122:55 - today uh at one point there were
122:57 - actually over 200 people watching this
123:00 - which is kind of insane and it
123:01 - rightfully so there are only a little
123:03 - over a hundred people right now which
123:05 - makes a lot of sense based on how this
123:07 - has been going um okay here we
123:12 - go hello and welcome to
123:16 - babby out let start over hello and
123:19 - welcome to a coating challenge which I'm
123:21 - going to call Blobby coating challenge I
123:24 - want to make something that's a blob
123:26 - this is a this is sort of loosely a part
123:28 - of the agario coating challenges where
123:30 - there are these circular things moving
123:31 - around the screen but I'm in this
123:33 - coating challenge only thinking about
123:34 - just that sort of stationary Circle
123:36 - which is a nice perfectly round
123:38 - beautiful happy little circle right
123:40 - there but I want it to be wavy curvy on
123:42 - the edges and kind of feel a little
123:44 - Blobby so let's think about I'm going to
123:46 - come over to the Whiteboard here and
123:47 - draw some stuff um right this is a
123:49 - perfect circle which is drawn as an
123:52 - ellipse but another way I could draw
123:55 - this per perfect circle is by using a
123:58 - call to a function called begin shape
124:01 - and a call to a function called end
124:03 - shape and in between there I could make
124:06 - a lot of calls to a function called
124:09 - vertex so if I were to say put a Vertex
124:12 - here put a Vertex here put a Vertex here
124:14 - vertex vertex vertex and connect them
124:16 - all then I have what I started with a
124:20 - nice Perfect Circle but what if I were
124:23 - to make this vertex go out over here and
124:26 - this one come in over here then I might
124:28 - have something that appears kind of
124:29 - curvy and what if these Wiggle all
124:31 - around and kind of blob around then I
124:34 - have something that appears kind of
124:35 - squishy and Blobby now there are a
124:37 - couple different ways I could do this uh
124:39 - option number one I could do some kind
124:41 - of physics simulation with a lot of
124:43 - springy forces so I have this like
124:45 - almost as if these are all connected by
124:48 - Springs and as you pull one it pulls the
124:50 - other and it kind of flips back and
124:51 - oscillates and jiggles and that sort of
124:53 - thing I'm going to do that in another
124:54 - coding challenge you can take a look at
124:56 - one of my uh toxic Libs uh kind of like
125:00 - cloth simulations to get an idea of how
125:01 - you might do that another way I could do
125:04 - this is with pearlin noise and I think
125:06 - I'm going to try that right now or I
125:07 - could use like a sine wave in other
125:09 - words all I want to do is Alter this
125:12 - radius right uh each of these points is
125:15 - calculated based on an angle which I'll
125:17 - call Theta and a radius if I iterate
125:19 - over all the different angles but change
125:21 - the radius uh and have those R radi move
125:25 - move up and down randomly I can get
125:26 - something that seems kind of squishy and
125:28 - Blobby so let's see if we can make that
125:30 - happen the first thing I want to do is
125:32 - go into the blob object and find this
125:36 - show function which is right down here
125:38 - and you can see what's happening here
125:40 - I'm drawing an ellipse but I'm going to
125:43 - change that now and I'm going to do a
125:46 - couple things one is I'm going to say
125:49 - push and pop because I'm going to also
125:52 - use translate because I want to First
125:55 - translate to the center of this object
125:58 - and then once I've done that I can say
126:00 - begin shape and I can say end
126:04 - shape and then I can have a loop so what
126:07 - do I want my Loop to do I want an angle
126:09 - to start at zero and I want to go all
126:12 - the way to two how do you spell two pi
126:15 - and I'm going to go up by some amount
126:18 - I'm going to say 0.1 and I really should
126:20 - be more thoughtful about this but I'm
126:22 - just going to randomly do this and then
126:24 - I'm going to say I have an X which is
126:26 - now
126:28 - this object's radius times cosine of
126:31 - that angle this is a polar to cartisian
126:34 - uh conversion which I would refer you to
126:36 - another video where I go through this
126:38 - math in a bit more detail but now I can
126:40 - just set the vertex to that X and Y
126:42 - position so let's run this and see if we
126:45 - get basically the same
126:47 - result I find it hard to believe that
126:51 - that's really what happened am I looking
126:53 - at the correct code let me comment that
126:55 - out oh it's not there shockingly that
126:58 - looks way too
127:01 - similar I guess that worked oh you can
127:03 - see that it actually changed because
127:04 - it's not so perfect there on the right
127:07 - let's um let's um just to see see how
127:11 - this is actually working let's draw
127:14 - little ellipses and take out the
127:16 - vertices right you can see that's what
127:18 - I've actually done I've drawn all these
127:19 - little circles and connected them uh so
127:22 - there we go so this actually worked the
127:24 - thing is I want this variable this R to
127:27 - be something that changes so what if I
127:30 - said R equals this. R plus a random
127:34 - amount between neg5 and five and so and
127:38 - I used r
127:40 - instead what would we get
127:43 - now we would get something that looks
127:45 - like this you can see those radi are
127:47 - changing What if I did something where I
127:50 - said um I want to have an offset which
127:54 - equals map s of the
127:57 - angle uh which goes between negative and
127:59 - one and one tog five and five and what
128:02 - if I say angle plus frame count times
128:06 - 0.01 or something so uh and so this is
128:10 - now this. R plus
128:14 - offset that didn't do very
128:17 - much
128:20 - oh you know
128:22 - um I just realized
128:27 - uh yeah that's just moving all the
128:30 - vertices together with the same offset
128:32 - so they have to be offset from each
128:34 - other anyway the point of what I want to
128:35 - do is not
128:38 - that actually I want to make this a sign
128:40 - this sine wave thing work okay what I
128:42 - want is for each one I want to do I want
128:45 - to get this to work let's make this
128:47 - actually work I want wanted to do this I
128:49 - want you to just see what it looks like
128:50 - when there's a sine wave so I want to
128:54 - have this I need a separate value uh
128:58 - that's I that really should work or I
129:00 - guess maybe these angles aren't are
129:01 - changing by too much hold on let's let's
129:05 - make this work right do I need to
129:07 - multiply this by like some tiny amount
129:09 - or
129:13 - something um what am I what have I done
129:17 - wrong
129:19 - uh okay uh pause Time
129:22 - Out Hold on let me figure I I I I'm I'm
129:25 - drawing a a blank here for a second so
129:32 - um uh they each oh be they each should
129:37 - have
129:39 - uh let's put the ellipses in for a
129:43 - second right so this is the idea but I
129:46 - want them to be off I want it to look
129:47 - like this but I want them to be offset
129:49 - from each other
129:53 - so right if I do
129:56 - this oh because they're all frame count
129:58 - is the
130:00 - same is this not enough like if I do
130:07 - this yeah oh maybe I just need to
130:11 - multiply it by like a
130:13 - lot there we
130:15 - go thank you okay uh I'm
130:19 - I'm back uh
130:23 - whoops oh I'm back so actually the the
130:26 - the angles I just forgot are only
130:27 - between zero and 2 pi so there's only
130:29 - one cycle of the sine wave so I actually
130:31 - want to multiply the angle by a lot uh
130:34 - if I want to see that sort of
130:36 - oscillation so I I can get something
130:38 - kind of like this and you know I could
130:41 - play around with these
130:43 - uh you know values anyway you could you
130:47 - could get the idea of how I might and I
130:48 - could off you can get the idea of how I
130:50 - can do various kinds of different
130:52 - offsets to change the quality of that
130:54 - shape but let's actually just use
130:56 - pearlin noise which I think will produce
130:58 - some interesting results so what if I
131:01 - were to say um
131:04 - noise uh and I want to have um an X
131:07 - offset which I'll say equals zero noise
131:10 - of X offset which goes between 0er and
131:15 - one and I want to map that between 25
131:18 - and 25 and I want that X offset to
131:22 - increase by some amount uh for each one
131:25 - of those so if we see this you can see
131:26 - now I have this kind of Blobby looking
131:28 - thing and each time I refresh it looks a
131:31 - little stranger now you'll notice I have
131:33 - an issue where I'm not able to connect
131:35 - the last point to the first point very
131:36 - well and there's ways we can kind of
131:38 - improve that but you can see I've got
131:41 - like this kind of goofy looking shape
131:43 - now what I can actually do there's a
131:45 - couple things I could do number one is I
131:47 - could add a y offset and the Y offset is
131:50 - kind of like uh a a global variable for
131:55 - this object it could start at it could
131:57 - start at zero
132:00 - itself and uh and the Y offset is a
132:03 - thing that doesn't change for each one
132:05 - but just changes over time itself so if
132:07 - I use two dimensional pearlin noise now
132:10 - you're going to see this kind of like
132:11 - Blobby of shape now the Y offset is
132:13 - changing rather fast so I might want to
132:16 - slow that down quite a bit and you can
132:18 - see now I've got some a more undulating
132:20 - like type thing I could have also by the
132:23 - way just not used two-dimensional noise
132:27 - but I could have just I could just say x
132:29 - offset plus y offset and you'll see this
132:32 - is doing something this looks like it's
132:33 - actually kind of like spinning because
132:35 - the noise values are actually kind of
132:36 - rotating around so that's another effect
132:39 - that you can kind of get by just like
132:40 - changing where the noise is beginning
132:43 - and even this like this doesn't bother
132:44 - me so much but you could consider using
132:46 - something like this in aario to make it
132:48 - kind of a little bit squishier and um
132:51 - and that sort of thing so this kind of
132:53 - gets you the basic idea of having a bit
132:55 - of a plin noise ball so to speak I think
132:58 - what I'll do hopefully remind me in the
133:00 - comments is when I publish this code I
133:02 - might uh simplify this even further to
133:04 - just have that kind of shape thing and
133:06 - you kind of tweak it and let's think
133:08 - about and about improvements that we
133:10 - could make to um to tie the last point
133:13 - back to the uh first point itself um
133:17 - okay so thanks for watching this at some
133:18 - point I'd like to show you how to add
133:20 - some spring forces to this which will be
133:21 - another uh another nice um kind of
133:24 - quality to it as well okay thanks for
133:26 - watching this uh coding Challenge and
133:27 - I'll see you again in a future
133:32 - video
133:33 - uh yeah thank you go to your meeting
133:36 - okay so I'm GNA wrap up here uh somebody
133:39 - requested the uh pearlin noise song
133:41 - which I will play myself out with if I
133:44 - can load this up here um I'll be back
133:47 - next Tuesday or w
133:48 - Wednesday
133:53 - um um so this was a kind of a mess today
133:57 - but I I did get some practice in uh and
134:00 - I thank you guys for watching I'm
134:02 - goingon to um whoops what did I oh that
134:05 - was just the um sorry that was my sound
134:08 - effect
134:11 - version
134:12 - um okay so uh we did some stuff today I
134:16 - kind of got some agario Network Stu in
134:18 - there I talked about the history of
134:19 - processing a little bit and I'll be back
134:22 - on Tuesday to start this
134:25 - um fall course I'm GNA lower the volume
134:27 - here uh I think I did that's what I did
134:31 - I'll to um start this fall course and
134:33 - stuff and more stuff that I'm doing uh
134:36 - my brain is completely fried and uh but
134:39 - I enjoyed being back here Live on
134:41 - YouTube again I'm glad that you guys
134:42 - were here to watch if you H subscribe
134:45 - like share all that kind of stuff
134:48 - um keep watching keep giving me feedback
134:51 - posting the rainbow topics and I'll see
134:52 - you guys next Tuesday or Wednesday I'm
134:54 - not entirely sure which it will be and
134:58 - uh what I'm going to cover by the way is
134:59 - Javascript and strings in JavaScript and
135:02 - some of the P5 Dom Library stuff that's
135:04 - what I'll be doing next week and getting
135:05 - started with that particular syllabus
135:07 - okay uh I really got to run I've got 25
135:09 - minutes to bike back over to NYU and
135:11 - hopefully I'll make it so I'm going to
135:13 - uh turn off the stream and have enjoy
135:16 - your holiday weekend if you're here in
135:17 - the unit States it's Labor Day um and I
135:20 - hope to see you all again soon thanks
135:22 - again you guys