00:00 - all right if you've actually managed to
00:01 - sit through and watch all of these
00:03 - videos about all of these different
00:04 - functions I'm kind of amazed and really
00:07 - the truth isn't that the point of what
00:08 - I'm doing is not to like because there's
00:10 - a lot more of these array functions is
00:11 - did I say this already in a previous
00:13 - video but is not to go through all these
00:16 - one at a time and explain every single
00:18 - one as useful as that possibly might be
00:20 - in some cases but if you can kind of
00:22 - understand how they work and then figure
00:24 - out how to look up in the reference in
00:26 - the documentation you can look at all
00:28 - the array functions to figure them out
00:29 - for yourself but I'm here let's do one
00:31 - more one more really useful one let's
00:33 - talk about sort so I'm gonna come back
00:37 - over here
00:38 - I'm gonna save I'm gonna come back to
00:40 - this word stuff cuz we're gonna need
00:42 - that in a second but let's just look at
00:44 - the let's just look at this array of
00:47 - vows for a second so I'm gonna say
00:49 - console.log boughs and I'm just gonna
00:52 - say vows sort with no function passed in
00:57 - and console dot log Val's so let's see
01:00 - what happens and let me give this the
01:01 - number nine I'm gonna hit refresh and we
01:04 - can see look at that
01:05 - it's sorted it in numerical order from
01:09 - lowest to highest
01:10 - that's ascending order and in fact it
01:12 - didn't make a new array it sorted
01:14 - exactly that array so this is important
01:17 - to realize this is a distinction that
01:18 - we've really got to pay attention to so
01:20 - far in looking at these filter makes a
01:24 - new array reduce well reduce doesn't
01:26 - make an array it reduces things down to
01:28 - a single but could make an array but
01:30 - that's a special case reduce and map
01:33 - make a new array Phil fills an existing
01:37 - array and sort sorry filter and map new
01:40 - array Phil and sort act on an existing
01:43 - array reduces a special case so that's
01:45 - kind of important distinction between
01:46 - all of these so but how did it know to
01:51 - do that well sort you kind of like would
01:54 - say like oh I sort it should sort by
01:56 - numerical order and if these were words
02:00 - you know a Hello be goodbye you would
02:08 - guess it's gonna sort them in
02:11 - alphabetical order now if this is
02:13 - capital B that shows up first because
02:18 - it's actually going to sort by capital
02:20 - letters first if there was something
02:24 - else that I was going to look at here
02:28 - I'm gonna say capital B yeah if it's
02:33 - also like numbers and letters it's gonna
02:41 - first put the numbers and then it out in
02:44 - numeric order and then the letters in
02:45 - alphabetical order so there are there's
02:47 - a default way that an array will be
02:50 - sorted now let's let's look at this case
02:53 - what if I had just an array of objects
02:56 - so what if my array was actually
03:00 - something like a bunch of XY pairs so
03:08 - this is now an array and I oughta format
03:10 - it for me of two objects each with an x
03:13 - and a y well what if I sort that well it
03:20 - didn't change didn't change the order
03:22 - five six to ten all right well let's be
03:24 - sure about this let's say to ten five
03:31 - six and let's do it again to ten is
03:35 - first well that's there and now after
03:37 - sorting it to ten it's the same order so
03:39 - this is the thing there is a default way
03:42 - of sorting stuff but JavaScript the sort
03:45 - function only knows that default way for
03:46 - certainly kind of obvious things like
03:48 - numbers and strings if you want to sort
03:52 - something yourself you need to write
03:54 - your own comparing function this is why
03:58 - sort is a higher order function because
04:01 - it expects the sort function expects as
04:05 - an argument a function which you could
04:07 - call the compare or the comparator it's
04:10 - not actually a word I just feel like
04:12 - there's all sorts of goofiness in Java
04:14 - with these like long winded strange
04:15 - words but you need to write a function
04:17 - that compares and what does that
04:19 - function look like so let's come back
04:20 - over here so let's say for this
04:22 - particular case here what I wanted to do
04:25 - is I wanted to
04:27 - this by the y-values so I would write a
04:32 - function I'm gonna call it compare and
04:35 - it's going to compare two elements this
04:38 - higher-order function requires two
04:40 - arguments two elements of the array and
04:42 - it's your job to say which one should go
04:46 - before the other and the way that you
04:47 - can tell the way that you can tell the
04:53 - sort function to do that is by returning
04:54 - a positive or negative number and I can
04:56 - never remember which is which but
04:58 - positive maybe means a goes before B
04:59 - negative means B goes before a and zero
05:02 - means they're equivalent or it's the
05:03 - other way around
05:03 - I always just try it both ways and
05:05 - eventually I figure it out so for
05:06 - example I could say return a dot Y minus
05:09 - B dot Y right that makes sense because
05:12 - in this case we're going to have 10
05:15 - minus 6 is 4 or 6 minus 10 is negative 4
05:18 - so if I put that compare function right
05:23 - here in Val's
05:24 - and I hit refresh we're going to see
05:29 - that 6 comes before 10 let's change this
05:33 - to B minus a and we're gonna see that 10
05:41 - comes before 6 I know this is small but
05:43 - can you see that 10 comes before 6 so
05:45 - this and if they're equal
05:46 - but that valley is gonna be 0 so what
05:49 - other ways can we have fun with this
05:51 - well let's go back to let's go back to
05:59 - this it was a dark and stormy false
06:02 - night who's trying to league that's
06:04 - false let's put this back in here and
06:06 - let's say what I did with filter in the
06:09 - previous video is I filtered out all of
06:12 - the words after I split up this text
06:16 - that were less than 3 characters and
06:18 - let's just split out let's let's
06:20 - actually well 3 or less so let's make it
06:22 - 2 or less so let's just make sure this
06:24 - still works we can see Oh Val's is not
06:26 - too fine I'm gonna gonna comment this
06:28 - out I'm not using that anymore so I'm
06:30 - just gonna look at this code and I'm
06:32 - gonna see ok so that's my was dark and
06:35 - stormy night now if I were to just say
06:37 - right before hear words dot sort
06:41 - I would get and dark stormy and dark
06:45 - night stormy was but what if I wanted to
06:48 - sort by the lengths of the words so I
06:50 - would we need to write a compare
06:52 - function and so I could start doing this
06:54 - with function compare a comma B return
06:58 - but here's the thing I'm trying to use
07:02 - as much as possible this arrow syntax to
07:05 - be able to sort of in line right there
07:07 - have the function that doesn't compare
07:09 - all in one line in very condensed way
07:11 - let's try to do that maybe we've done it
07:13 - I've done it enough times now they don't
07:14 - need to write it first as a long winded
07:16 - function then make an anonymous function
07:18 - then an arrow function let's do it all
07:20 - at once so I'm going to I'm gonna say
07:23 - we're word Ono so this is a comma B try
07:28 - always for up so this is the the the
07:31 - sort that compare function requires two
07:34 - arguments two elements of the array that
07:37 - I'm going to compare I'll keep this a
07:38 - and B sort of variable naming that's
07:41 - totally arbitrary I could call it cat
07:42 - and dog then I want to return the the
07:46 - difference between the lengths if one if
07:48 - one's length is bigger than the other it
07:50 - should be after it so I'm gonna say B
07:52 - and I don't need to say return I'm just
07:54 - gonna say B dot length minus a dot
07:56 - length so this should this should give
07:58 - me now a way of sorting the array where
08:02 - the longer ones appear at the end and
08:04 - let's see I probably got this backwards
08:05 - I always get it backwards
08:07 - I got it backwards of course where the
08:11 - longer ones are at the beginning so you
08:12 - know I could have figured that out but
08:14 - in the end I could just say a minus B
08:17 - and then there we go was and dark stormy
08:21 - so you can see three letter three letter
08:22 - for letter five letter five letter so
08:24 - this is the way that you can sort you
08:26 - can sort custom any list of any array of
08:30 - stuff based on however you want to
08:32 - compare two elements of that array all
08:35 - right now I'm trying to think if there's
08:41 - anything else I have to say I think
08:42 - that's it so we were done we've gotten
08:44 - through all this stuff what I want to do
08:46 - now is I want to look at taking a lot of
08:50 - these concepts into a kind of creative
08:53 - classic creative coding scenario
08:54 - a particle system and using a
08:57 - higher-order function to write a bunch
08:59 - of ways of managing to do a bunch of
09:02 - things to manage that array of particles
09:03 - and I'll do that in the next video which
09:05 - you might may or may not choose to watch
09:07 - thanks very much
09:12 - [Music]