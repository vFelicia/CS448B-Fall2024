00:00 - - I've got one more topic here,
00:02 - about object orientated
programming in ES6 with classes,
00:06 - and that is what is polymorphism?
00:09 - And what does polymorphism mean,
00:11 - and how is it applied in JavaScript?
00:13 - So just a review, the core idea
00:15 - of object orientated programming,
00:16 - creating a blueprint,
a template as a class,
00:19 - that makes, that encapsulates
00:21 - a whole bunch of data and
functionality together,
00:24 - that is the idea of encapsulation.
00:27 - It's a little package of an object,
00:28 - with data and functionality.
00:31 - Inheritance is the idea
of one side made a class,
00:33 - and I want a class to inherit
00:35 - a lot of properties or functions,
00:37 - but modified with its own custom stuff.
00:41 - That's the idea of inheritance,
00:42 - and inheritance is a thing
that happens in a tree,
00:45 - because you can have
something inherit something,
00:47 - which inherits something else.
00:48 - And actually, at the end of this video,
00:49 - I'm going to do a little bonus,
00:50 - and just show one little
trick about inheritance
00:53 - that might be kind of interesting.
00:55 - Now, what is polymorphism?
00:57 - So, polymorphism, if we
look at the word itself,
00:59 - poly, meaning many,
01:02 - and morphism, morph for like form,
01:04 - means we can treat an element,
01:08 - an object that has a particular type,
01:11 - like a Confetti object,
01:13 - as either a Confetti object
or a Particle object,
01:17 - depending on what's convenient for us.
01:19 - And yet, somehow, the
system, the compiler,
01:22 - the interpreter, the executor of the code,
01:25 - is going to know what to do correctly.
01:27 - And so, if I were in a
strongly typed language,
01:29 - which JavaScript is not.
01:30 - By strongly typed, I
mean you have to declare
01:33 - the type of the thing
before you make a variable.
01:36 - - One moment, please!
01:37 - So, during this video,
01:39 - I refer to Java as a
strongly typed language,
01:42 - and all the places I
looked on the internet,
01:44 - do describe Java as a
strongly typed language.
01:47 - However, the aspect that I was explaining
01:50 - is really something
known as explicit typing,
01:52 - meaning you have to,
01:54 - if you're going to declare
a variable, a variable p,
01:57 - I have to say what kind of
data I'm putting in there.
01:59 - Is it an integer, is it a
float, is it a particle?
02:01 - What "strongly typed" means,
02:03 - is that that type could never change.
02:07 - It has to remain the same.
02:09 - And there's really like
a lot of stricter rules
02:12 - around how that works.
02:13 - So like Python, for example,
is also strongly typed,
02:16 - but you don't have to declare,
02:18 - it's not explicit,
02:19 - you don't have to say what
kind of type that variable is.
02:21 - You just can't change it
later, you've got to be,
02:23 - it's got to work all what is compiled.
02:25 - So there's a lot of nuance to that,
02:26 - and I'll try to include
some reading material
02:29 - in this video's description,
to explain that better.
02:31 - But what I really meant
was explicit typing, okay?
02:34 - Now, back to the video.
02:37 - - Normally I would say, like
02:40 - Confetti, c equals a new Confetti object.
02:45 - This is the way, in a
strongly typed language,
02:48 - I would declare a variable, c,
02:49 - I would give it a type, it's Confetti,
02:51 - and I'd call the Confetti
constructor to make that object.
02:54 - In a strongly typed language,
02:56 - I could also say,
Particle p or Particle C,
03:01 - or whatever it is,
03:02 - equals new Confetti.
03:04 - And this would be allowed,
03:07 - because Confetti extends Particle.
03:10 - So, in that case,
03:11 - I could consider this variable
to be of different forms.
03:15 - I can consider it to be a
Particle when it's convenient,
03:17 - or a Confetti object when it's convenient.
03:20 - But, the compiler will always know
03:22 - to execute and use the
properties and functions
03:25 - of the Confetti class.
03:27 - And this is especially convenient
03:29 - when you want to put a
lot of stuff into an array
03:31 - in a strongly typed language,
03:33 - because you don't want to keep track
03:34 - of which types which things are.
03:36 - We can basically do the
same idea in JavaScript,
03:39 - it will just look less fantastic,
03:42 - because JavaScript is so
flexible anyway about types.
03:45 - But this is the core idea.
03:46 - So, let's actually go and do this.
03:48 - Over here, let's change --
03:52 - this is code from my previous
video about inheritance --
03:54 - let's change this to an array.
03:57 - And I'm going to make an
array called Particle.
04:01 - And I'm going to put a little for loop,
04:05 - to just add 10 Particles in setup.
04:10 - Then, just to get started,
04:13 - I'm going to say Particles,
index i is a new Particle,
04:18 - and I'll just put them all
in the center, whatever.
04:20 - And then, now I can say
for let p of particles.
04:29 - And I can say, and this in a for of loop,
04:32 - which lets me go through every particle,
04:34 - I could use a for each loop,
04:35 - I know a lot of people prefer those.
04:37 - But, let p update and show.
04:40 - So, now I should see, if I refresh this,
04:42 - I should see, here we go,
04:43 - I've got 10 particles moving around.
04:46 - Now, what if what I wanted to do was say,
04:49 - if random one is less than .5,
04:52 - so I basically want to give a 50% chance
04:55 - of either putting a Particle
object or a Confetti object.
05:06 - The magic of all of this
05:07 - is that I don't have to
change this code down here.
05:10 - I just can fill this same array
05:12 - with a bunch of different objects,
05:14 - as long as they're kind of linked
05:15 - through this idea of inheritance,
05:17 - they all have an update function,
05:18 - they all have a show function,
05:19 - polymorphism says this variable, p,
05:21 - is going to know for each one,
05:24 - whether it's a Confetti
or a Particle object,
05:26 - and it's going to execute the
right version of the function.
05:28 - So we should now see,
05:30 - we have a bunch Particles
and a bunch of Confettis.
05:32 - And every time I refresh this,
05:34 - there's a different random amount.
05:36 - So, that's polymorphism.
05:39 - Wow, I made kind of a short video.
05:41 - So, I promised a little extra tidbit
05:42 - here at the end of this video.
05:44 - So one of the things
that's really interesting
05:45 - about inheritance and
that inheritance tree,
05:48 - is that inheritance is not
just the thing that's useful
05:51 - because you designed
your own Particle class,
05:55 - and now you're designing
your own Confetti class
05:57 - that extends Particle.
05:58 - Maybe somebody else designed something
06:00 - and you want to inherit
everything from that.
06:03 - For example, there is a
thing in p5 called p5.Vector.
06:07 - I've used it in a lot of
coding challenges and videos.
06:09 - p5.Vector object is a vector object.
06:12 - It has an x, a y, and a z component,
06:14 - and has a lot of
functionality for vector math.
06:17 - So what I actually could do here,
06:20 - is I could say, look at this,
06:22 - I could say class Particle
extends p5.Vector.
06:27 - So in that case, now I'm just
going to say, super x, y,
06:33 - this is now an object
that's going to get x and y
06:38 - from the parent class.
06:41 - But, I can now start to use other stuff.
06:46 - So, for example, my Particle
might also have a velocity,
06:52 - which is, I want to make it random,
06:54 - so I'm actually going to use the
p5.Vector random 2D function,
07:02 - so it can have a random velocity,
07:04 - and then I can say, oh this is so crazy,
07:06 - but this.add, this.velocity.
07:08 - Because there's an add function
07:11 - and I want to add the
velocity to this object,
07:14 - because it is a p5.Vector, ah!
07:16 - And then I could just draw
it at this, .x and .y.
07:18 - Let's see if this works.
07:21 - Amazingly, this works.
07:22 - So, the behavior is very different,
07:25 - because it's not a
different random velocity,
07:27 - it's just a random direction,
07:28 - but you can see, this is very powerful.
07:31 - Particle extended p5.Vector,
07:33 - I suddenly got access to
07:35 - all of the vector math
that's in p5.Vector,
07:38 - and then Confetti extends Particle,
07:41 - so it's also a vector.
07:43 - And let's just look, I
think it would be useful
07:46 - for me to, very briefly, before I go,
07:49 - just go over to the console
and do something like,
07:52 - let a p equal a new Particle.
07:54 - Just look at this, look at this.
07:58 - Take a look at this.
07:59 - You can see that this is now,
08:03 - this Particle object has an x, y, and z,
08:05 - and this is actually how it
works underneath the hood.
08:09 - You can see here that its prototype,
08:11 - where it inherits everything from,
08:13 - is from this particular object.
08:15 - And if I looked at a Confetti object,
08:20 - this has to do with the prototype stuff,
08:21 - this is what ES6 classes
completely hides from you,
08:25 - and if I look at this object now,
08:27 - we can see, look, it
has the brightness in r,
08:30 - it has this velocity, it has an x, y, z,
08:33 - its prototype, what it inherits from,
08:35 - is Particle, and that prototype is vector!
08:39 - So you can actually see,
08:40 - this is generally a place you
kind of don't want to look,
08:42 - 'cause it's like super confusing,
08:44 - but you can see the inheritance
chain, the prototype chain,
08:48 - or the inheritance tree here.
08:50 - Confetti extends Particle,
which extends vector.
08:54 - And this s.Vector is
like a weird notation,
08:56 - 'cause of the way the p5 library works.
08:58 - Alright.
08:59 - So that was a little extra trick.
09:00 - You can think about that,
09:01 - maybe that will confuse you, that's okay,
09:03 - it kind of confused me
while I was explaining it.
09:05 - Hopefully you got a sense of
inheritance and polymorphism
09:08 - as features as aspects of
object oriented programming
09:12 - that you can apply in
JavaScript using ES6 JavaScript.
09:17 - Thanks very much, and I'll see you later.
09:19 - (upbeat music)