00:00 - [Music]
00:03 - hello welcome to a special spooky Cody
00:08 - train video about es6 the arrow function
00:13 - spooky arrow function hold on a sec
00:17 - [Music]
00:19 - recording this close to Halloween and
00:21 - when you're watching this in the future
00:22 - you won't care and that'll be ridiculous
00:24 - but that's what the video is storing
00:25 - with anyway what is this thing I have to
00:27 - say for a very long time I have seen
00:29 - this in code and I just kind of shrivel
00:32 - up and feel very worried because it's so
00:35 - we kind of don't understand and I think
00:36 - that I'm supposed to understand it and
00:38 - it's supposed to make things better but
00:40 - I I just don't understand so I've taken
00:41 - some time to attempt to understand it
00:43 - I've used it and I'm intending to use it
00:46 - in some future videos that I'm going to
00:47 - make possible even today so I feel it's
00:50 - time for me to attempt to talk about
00:52 - what this is to you the viewer the
00:55 - watching this video so there was a time
00:58 - in the past not too long ago when I made
01:02 - a video about yes 5 vs 6 I kind of
01:07 - talked about what those things were I
01:09 - messed up a lot of it if you read the
01:11 - comments you could see what I messed up
01:12 - but there was an aspect of it where I
01:15 - discussed this idea of var being the way
01:19 - to declare a variable in the previous
01:23 - version of JavaScript call TS 5 and now
01:26 - there is another way to declare a
01:28 - variable let which is part of es6 and
01:33 - then there is even another way to
01:35 - declare a variable known as Const which
01:39 - is also part of es6 and keys work in a
01:43 - slightly different way and they clean up
01:44 - some problems and they protect you
01:46 - against yourself than your own
01:48 - inevitable ability to make all sorts of
01:51 - strange errors and so that's a separate
01:53 - discussion now there is another change
01:56 - that can be looked at somewhat in the
01:59 - same way which is that there you I used
02:01 - to be able to say and I still can and I
02:04 - still will and I'll probably always will
02:07 - function don't go away from me I can
02:09 - declare a function like this
02:13 - with some amount of arguments there is a
02:17 - new way to do this exact same thing oh
02:20 - my goodness look I forgot to put a name
02:21 - I forgot to name this function and the
02:24 - reason why I forgot is because the thing
02:27 - that I'm talking about here with arrow
02:29 - functions that's what's gonna go over
02:30 - here this is es5 it's typically used I
02:34 - think actually it's the only way you
02:36 - could use it someone's gonna tell me
02:37 - then I'll correct myself later for
02:40 - anonymous functions anonymous functions
02:43 - unnamed functions inline functions will
02:46 - you'll see if that's not familiar to you
02:48 - I will explain that as well in the
02:50 - context of this video but what you can
02:53 - see here is I'm saying function with
02:54 - these arguments execute this code this
02:56 - function doesn't have a name it's not
02:57 - called unicorn fluffy x or whatever it's
03:02 - just called function so now instead I
03:07 - can say hey look at this these
03:08 - parenthesis here I can say hey let's
03:13 - instead of saying functions function
03:15 - let's say arrow which is an equals and a
03:20 - greater than arrow curly bracket close
03:24 - curly bracket so this is somewhat yes
03:29 - five yes six so one of the reasons to
03:36 - write functions like this two for this
03:40 - arrow syntax is simply beach conciseness
03:42 - less typing don't need function we just
03:46 - say equals greater than the interesting
03:51 - thing is this one of the reasons for
03:53 - doing this is this idea of conciseness
03:54 - this can become even more concise in
03:57 - fact these parentheses were going to see
03:59 - as I show you some examples are optional
04:02 - and in fact now in some cases this
04:06 - bracket is also optional oh and I'm
04:10 - totally writing somewhere you can't see
04:12 - but what I just wrote was optional and
04:13 - in fact let's say my function was gonna
04:16 - return something this return statement
04:20 - can in fact be optional or implicit it
04:23 - can be just sort of assumed that is
04:25 - that you're going to return something
04:27 - and eventually you can see I'm gonna
04:29 - give myself some more room here and not
04:31 - draw too high up there like I usually do
04:34 - but I might have just done and had to
04:36 - reach state what I'm staying we can
04:39 - eventually write things that look like
04:40 - this X arrow x times two what does this
04:46 - mean this means actually create a
04:49 - function that takes an argument X and
04:55 - returns x times two so one reason is a
05:01 - new syntax concise this common
05:06 - operations and actually one of the
05:07 - things I will show you is this this kind
05:09 - of writing can be really useful when I
05:11 - eventually make a video about some other
05:12 - array functions that I'm going to use
05:14 - for some other tutorials that I'm doing
05:16 - and if we look at the functions like map
05:18 - and reduce and filter these are array
05:24 - functions that you can perform
05:26 - operations like if I wanted to just
05:27 - double the element of every if I wanted
05:30 - to double the value of every element in
05:31 - an array I could say map and give it
05:32 - this and it's gonna just happen in a
05:34 - nice and concise way now there is
05:37 - another aspect of this that's key and
05:41 - someone crucial which is that there is a
05:44 - word a keyword in JavaScript called this
05:48 - and we've see you guys are familiar with
05:52 - it this is the word that I always forget
05:53 - especially when I'm doing
05:54 - object-oriented programming I need to
05:56 - save this dot X and this done why I'm
05:58 - always forgetting but this dot this can
06:01 - refer to different things in fact if I'm
06:02 - just in a JavaScript sketch and embed
06:04 - I've written a piece of code that's
06:06 - running in the browser if I just say
06:07 - this it refers to the window object a
06:09 - sort of global object this always refers
06:11 - to something it's the current context of
06:13 - where you are I may in this object I
06:15 - mean in the global scope and with this
06:18 - particular function syntax you might
06:23 - want to use it in a particular context
06:25 - where you want to keep a certain value
06:27 - of this and not lose track of it and in
06:29 - fact this old this old way of defining a
06:34 - function can forget about what this
06:36 - should be referring to and this way of
06:38 - doing it
06:39 - is a way where where JavaScript will not
06:41 - forget and so in previous versions of
06:44 - JavaScript you might have seen things
06:45 - like bind and apply you can use other
06:49 - functions to kind of bind and keep track
06:52 - of the this and with the arrow function
06:54 - but this will keep track of itself in a
06:56 - more elegant and hopefully way that you
06:58 - would have intended so I really think
07:01 - like out of context that probably makes
07:02 - absolutely no sense but I'm going to
07:05 - make a scenario in this video where I
07:07 - want this to equal something and writing
07:10 - it this way it fails and writing it this
07:12 - way it works I will say I erased my bar
07:17 - becomes let bar becomes bled is pretty
07:20 - friendly uh they're both three letter
07:21 - words bar needs variable let just kind
07:24 - of like let this equal something this
07:26 - transition smooth function means I'm
07:30 - defining a function era I guess we could
07:32 - make this sort of case that like these
07:35 - values these arguments become
07:36 - transformed or gets sent into here and
07:40 - do something X becomes x times two so
07:43 - there is some kind of meaning there but
07:45 - one one reason why I tend to avoid using
07:47 - arrow functions all the time is that it
07:51 - can make what make your code fewer
07:52 - characters which sometimes is valuable
07:55 - for making it readable it can be really
07:57 - hard for beginners and we're just
07:58 - starting out to be able to read and
08:00 - understand what the code is doing so
08:01 - this video is to explore you but you
08:03 - can't escape it I might like to run away
08:05 - and never look at an arrow function but
08:08 - I can't escape it so this video is an
08:09 - attempt to unpack this even more alright
08:12 - let's let's actually look at some code
08:14 - alright if you're still watching this
08:16 - video you're a very nice person and you
08:18 - really appreciate it I have a p5 sketch
08:21 - it's doing nothing it's just a blank
08:23 - canvas I want to add something to it I
08:25 - am going to say let button equal Create
08:29 - button press and then I'm going to say
08:34 - button dot mousepressed now whoops in an
08:41 - older life you know the goal in another
08:46 - time when I had less gray hair and was
08:50 - even a little bit more organized
08:52 - these video tutorials to be perfectly
08:53 - honest I would have done something like
08:55 - this change background and then I would
08:58 - have written a function down here
08:59 - function change background and I would
09:02 - have said this function is a callback to
09:06 - the mousepressed event on the button so
09:09 - button dot mousepressed that change
09:13 - background function run whatever code is
09:15 - in here whenever you press the mouse on
09:16 - the button and let's actually do that
09:17 - I'm going to say background you know
09:19 - random 255 so now if I go back to the
09:22 - browser and look at this code every time
09:24 - I press the button I get a new random
09:25 - greyscale background this is my way of
09:30 - writing this code when I want to work in
09:33 - a sort of the most easy-to-understand
09:35 - way in a beginner context very I'd
09:38 - really I have a function here I can see
09:40 - what its name is and see where it goes
09:42 - so one thing I could do in JavaScript
09:44 - which is it there's no reason why I have
09:47 - to name the function and then put it
09:48 - down here I could just take this whole
09:50 - function take this whole function and
09:52 - put it in between the parentheses and
09:54 - mousepressed so I'm gonna do that you
09:56 - just put it right there and I'm gonna
09:58 - just hit save it's gonna like auto
09:59 - format it and now that it's in there it
10:01 - doesn't need a name
10:02 - it sort of exists just just for the
10:06 - event right here I'm gonna put a
10:08 - function in there past the function in
10:09 - as the argument itself you know which do
10:11 - I like better one or the other who
10:13 - really knows I don't know but this is an
10:15 - anonymous function it has no name you
10:18 - could call it an inline function
10:20 - although it happens over multiple lines
10:21 - so that's step number one now if I hit
10:25 - refresh
10:25 - same exact thing is happening I could
10:29 - now be even more concise and I could get
10:33 - rid of the word function and I can say
10:36 - equal arrow and there we go hooray I've
10:41 - used an arrow function hit refresh and
10:44 - it's the same thing and I can I don't
10:47 - even I don't know do I need these could
10:50 - I even get away with something weird
10:52 - like this maybe oh that looks so strange
10:56 - is that could that possibly be right
10:58 - somehow I just find this hard to believe
11:01 - that that could possibly be right Oh
11:06 - what did I do wrong here maybe this see
11:09 - ah this yes maybe here yeah let's try
11:12 - this no okay I think I figured it out
11:16 - let's try this one more time
11:18 - what's optional oh yeah I could get rid
11:21 - of the curly brackets those are optional
11:23 - if I get rid of those curly brackets I
11:26 - also don't need this semicolon because
11:29 - it's one line and then I should be able
11:31 - to do this and now in theory this is
11:35 - also correct
11:37 - very spooky though and this works too is
11:42 - it have I helped anybody have I made the
11:44 - world a better place
11:45 - yes I can just wreck that in one line
11:47 - but I can and I sort of guess I
11:49 - understand what's going on but in the
11:51 - end I'm very happy with it there we go
11:59 - I'm very happy with it like this this is
12:01 - perfectly fine I feel like I could
12:04 - breathe I can relax I can name
12:06 - everything in my code and I can know
12:08 - what it's doing but there are some cases
12:09 - where the arrow function really does
12:12 - help and I forget to those eventually in
12:14 - these incredibly long-winded video
12:16 - tutorials that I'm making let's look at
12:17 - one such case so let's say that I'm
12:20 - going to create a class and I'm gonna
12:23 - call this class counter so this is a
12:26 - somewhat of a trivial example that
12:28 - doesn't have a lot of practical value
12:30 - although I would I think that I could
12:32 - expand it to start using like Dom
12:34 - element animations or API calls so let's
12:37 - begin with something though that's very
12:38 - very simple the idea of this class
12:40 - whenever I make a class I need a
12:43 - constructor I'm going to make a property
12:45 - called count and I'm going to set it
12:48 - equal to zero then I'm going to write a
12:50 - function called count it and I'm gonna
12:54 - say this dot count plus plus and I will
13:00 - just say oh yeah and let's do this
13:02 - let's also say this dot P equals create
13:06 - P so to make a paragraph element and
13:08 - then I'm gonna say this dot P dot html'
13:14 - this dot count what is going on my
13:18 - goodness
13:19 - so the idea here is that and I'm gonna
13:23 - get rid of all this stuff that I had
13:25 - from earlier in the video I'm gonna say
13:27 - no canvas and I'm gonna say let's
13:29 - counter 1 equal new counter and then I'm
13:34 - gonna say I guess I'm gonna I'm gonna do
13:39 - I'm gonna do
13:40 - I guess I'll use the draw you'll see I
13:43 - plan but for now I'm just gonna say
13:46 - function draw which is a little bit
13:48 - weird counter 1 dot count it am I ready
13:52 - so here we go what's gonna happen when I
13:55 - run this sketch it's gonna break because
14:00 - this needs to be a global variable and
14:02 - by the way this might be a time
14:08 - [Music]
14:10 - where I used Const I'm never going to
14:14 - read Eclair this object I don't know I'm
14:17 - just trying to use trying to get
14:18 - comfortable using Const when do I use
14:20 - Const if it's something that I want to
14:22 - not allow myself to reinitialize read
14:24 - Eclair in a different way and protecting
14:26 - myself from mistakes Hey Oh oh you've
14:32 - got to do it up there old boy well it
14:35 - can't you can't of course I can't do
14:37 - that I can't make the constant nothing
14:39 - and then read it that was a big failure
14:41 - for using constant house find yourself
14:47 - in fact ok never mind ok so let me just
14:49 - use let take it easy on me please I'm
14:52 - just gonna use that now let's run this
14:54 - and there it is look at that I've got my
14:57 - counter going like this here's the thing
15:00 - I didn't really want to use that draw
15:02 - loop I want each counter to count itself
15:04 - so what I want to do is when I make a
15:06 - counter I want to give it some things
15:09 - like I want to give it a starting value
15:10 - and I want to give it a wait a time so
15:16 - I'm gonna say what I want is this
15:17 - counter to start at 100 and I want it to
15:20 - count every 500 milliseconds so this dot
15:24 - count should start a start and I'm gonna
15:27 - have a new variable called this dot
15:28 - weight which will equal 500 now what am
15:32 - I gonna do I am going to use and I
15:36 - actually probably need to keep this dot
15:38 - wait we'll see in a second I could use
15:39 - this I'll call this wait you'll see in a
15:42 - second I'm going to use this function
15:43 - called set interval and what set
15:47 - interval does is it says here's a
15:51 - callback count it write that function
15:54 - down here and then do that every so
15:59 - often all right already
16:04 - so this is the idea I'm going to create
16:06 - a counter that is going to and I'm going
16:10 - to say like every 500 milliseconds count
16:12 - up from 100 and update that paragraph
16:14 - element let's see what happens ah
16:16 - counted is not defined oh yeah counted
16:19 - is not defined it's looked down in the
16:20 - scope here oh okay well I know I know I
16:23 - know
16:23 - I'm going to make this called a function
16:25 - counted so it's not really like a
16:27 - function that's part of the class
16:29 - anymore it's just like a function right
16:30 - so I'm gonna I'm gonna name it function
16:32 - and I'll I'll put it even here like this
16:35 - is how I did it with that Mouse pressed
16:36 - right count that function increase the
16:38 - count here we go here we go here we go
16:40 - now cannot read what it cannot do
16:44 - anything why why why so hold on a second
16:48 - let's just see something when I first
16:51 - run a sketch if I were to just do
16:52 - something like and say console dot log
16:54 - this what I get is this thing called a
16:59 - window object this refers to the global
17:02 - context the window object now if I'm in
17:07 - here if I'm in the constructor for
17:09 - example and I say console dot log this
17:11 - Oh I'm referring to the counter object
17:17 - because this JavaScript knows to repoint
17:20 - the keyword this to the current context
17:22 - which is the current counter object but
17:25 - why why why what is happening in here
17:28 - console dot log this this is inside the
17:32 - class it's a function inside the object
17:34 - can't I know that I'm talking about that
17:36 - object and so now I'm gonna refresh huh
17:40 - see it's what is it console logging the
17:43 - window object again spooky window up NAT
17:47 - sound like so so what do I do about this
17:52 - guess what this is where the arrow
17:55 - function comes in if I instead if I use
17:58 - an anonymous function right in here so I
18:00 - can take this whole thing and I can put
18:03 - it in here I can get rid of the name
18:05 - right so this is just me we creating
18:08 - this with an anonymous function I'm
18:11 - gonna hit refresh it's still referring
18:14 - to the window object because I've named
18:16 - this function but if I change this to
18:19 - the arrow syntax let's see what happens
18:23 - now there we go and now I have my
18:28 - counter that's working and here's the
18:30 - thing what's magical not really magical
18:32 - about this is that what I've done is
18:36 - because I made this object-oriented and
18:39 - actually to be honest this doesn't need
18:40 - to be because again let's make them
18:43 - constant there so constant it's I can't
18:47 - even begin to I can make a bunch of
18:50 - these starting at different values going
18:54 - in different with different speeds and
18:57 - we'll see here that there we go
19:00 - I've got a bunch of different counters
19:02 - each counting at their own rate each
19:04 - starting at a different value and this
19:06 - callback function remembers and you know
19:10 - I want to take this out just to see this
19:12 - callback function remembers the correct
19:14 - context and I can have callbacks now
19:16 - inside of my class a great point has
19:18 - been made in the chat actually when I
19:20 - was designing this scenario in my head
19:23 - to do this video this is actually not
19:25 - the way I wrote it in my head I meant to
19:27 - not get rid of the count it function so
19:30 - let me just put that back for a second
19:32 - so I'm gonna rewrite this a little bit
19:34 - which I think will be a little bit more
19:35 - clear and I'm gonna keep this in the
19:40 - counted function I actually am going to
19:44 - make a variable called this dot weight
19:45 - and have it equal to weight and then
19:48 - what I'm going to do is I'm going to
19:49 - write a new function and I'm gonna call
19:51 - it a start and there I'm gonna say this
19:59 - dot count so this is kind of what I
20:01 - meant count it this is I just rewrote
20:03 - this but another thing is slightly more
20:05 - clear way because now I have I'm
20:07 - creating a counter object it has a
20:09 - starting counter as an amount of time to
20:11 - wait and a Dom element associated with
20:13 - it it has a function which will always
20:14 - increase the count and put the count in
20:17 - the Dom element and then has the start
20:20 - function is what and this should say by
20:22 - the way I'm forgetting the this dot this
20:24 - dot weight but here this would break
20:27 - once again that's just put this back to
20:30 - function right this totally makes sense
20:32 - set interval this function count it with
20:35 - this amount of weight and I'm gonna say
20:38 - counter one dot start and counter to dot
20:45 - start by the way I could make an array
20:46 - of these all with random starts
20:50 - counter three-dot start now let me run
20:53 - this uncaught counting is not a function
20:56 - because it's forgotten function for is
20:59 - because it gets kind of globalized it
21:01 - forgot about the current actual context
21:03 - of this and it's just referring to
21:05 - window
21:06 - replace it with the arrow syntax and now
21:08 - but uh there we have our counter objects
21:11 - all counting separately so just to
21:14 - double back for a second on being
21:16 - completely totally what though that sort
21:18 - of like one-line way of writing this I
21:20 - could actually get rid of these brackets
21:22 - and this semicolon right because I can
21:28 - just now do this so in theory if you
21:32 - like to write code like this this should
21:35 - also work let's refresh yeah so this is
21:37 - now way to write this in one line I
21:39 - completely confused myself looking at
21:41 - this I kind of have no idea what's
21:42 - happening let me see if I can understand
21:43 - it I want to set an interval and what I
21:46 - want is for this dot count it to happen
21:48 - every this dot weight amount of time
21:50 - okay it kind of makes sense you know
21:52 - it's a little bit a little bit cryptic
21:53 - and weird because there's no arguments
21:55 - inside these parentheses but we'll see
21:57 - what happens we put arguments aside
21:58 - those parenthesis in another video
21:59 - thanks for watching I hope this context
22:01 - somewhat helps and I'll probably come
22:04 - back because here's the thing this is
22:07 - the first time I've ever taught about
22:08 - arrow functions and I only really
22:09 - learned about them a couple weeks ago so
22:11 - just you know be kind okay and not two
22:13 - but two everybody please in the world
22:15 - be kind alright talk to you soon goodbye
22:22 - [Music]