00:01 - part four of depth first search
00:03 - recursive backtracking maze generation
00:06 - algorithm this is the last part the
00:08 - final part by the end of this particular
00:10 - video I will have we will have finished
00:12 - this exact simulation and be drawing a
00:14 - full Maze and hopefully you will come up
00:16 - with some creative ideas and things you
00:18 - could do with it so where are we so far
00:20 - so this is what we've got so far if I
00:22 - hit refresh you can see we have this
00:24 - cell that's marching from marching
00:26 - around the grid removing walls and
00:27 - eventually it gets stuck because there's
00:29 - no cell that it hasn't visited already
00:31 - around it this is where backtracking
00:34 - comes in while it's marching around it
00:36 - needs to keep track of where it's been
00:38 - previously so when it gets stuck it
00:40 - could go back to a spot that still had
00:43 - available places for it to go this is
00:47 - the backtracking aspect so um so yeah so
00:50 - there's a lot of pieces to this and uh
00:52 - first uh and and so let's look at the
00:54 - algorithm and actually see what it says
00:56 - so look at this we let's what have we
01:00 - done so far so choose randomly one of
01:02 - the unvisited neighbors if I go to the
01:05 - code and if I go to the part where we
01:07 - are I've done that this is me choosing
01:09 - randomly one of the unvisited neighbors
01:11 - now push the current cell to the stack
01:13 - this is what I'm implement in this video
01:15 - remove the wall between the current cell
01:17 - and the chosen cell I've done that make
01:19 - the chosen cell the current cell and
01:20 - Market is visited done that so actually
01:22 - all that we need to do is add this step
01:24 - number two and then this other case down
01:27 - here of for what we're actually doing
01:28 - with the stack and this is actually
01:29 - going to be quite easy and uh actually
01:31 - writing the code I'm going to just only
01:33 - add like four lines of code to this
01:34 - program and suddenly it's going to be
01:35 - working but before I can add those lines
01:38 - of code what I would like to discuss to
01:39 - you is what is this thing called a stack
01:42 - and what do I need it for so a stack is
01:45 - a I I I like I have a little like um
01:50 - issue where it's I like if I I'm like
01:51 - allergic to the word computer science
01:53 - and if I say it I get like a little bit
01:55 - congested but stack is really kind of a
01:57 - term from computer science so to speak
02:00 - so what do I mean by that so uh if
02:03 - you're watching this
02:05 - video you
02:08 - are probably familiar with the idea of
02:11 - an array right I'm sorry like if I'm
02:13 - hungry I'm tired but I'm I'm going
02:15 - through with this right this idea of an
02:16 - array is like a list of things and each
02:18 - spot in the array has an
02:21 - index this is a data structure it keeps
02:23 - track of a bunch of things in a linear
02:25 - list each with an index a stack is
02:28 - another kind of data structure to keep
02:30 - track of information and a stack is a
02:32 - data structure that acts very much like
02:35 - a stack of things a stack of paper you
02:37 - could imagine you in olden times times
02:40 - of your when people had inboxes and
02:42 - outboxes that were actually physical
02:44 - things you'd be sitting at your desk and
02:46 - someone would people would keep coming
02:47 - in and adding things to your stack of
02:49 - paper so things are getting
02:52 - pushed into the stack added on top on
02:55 - top of top now you then arrive to work
02:57 - and you see your stack of paper what's
02:59 - the first item you're going to work on
03:01 - the thing on the top the last thing
03:03 - added to the stack that is referred to
03:05 - as popping so taking things out of the
03:08 - stack this is sort of a strange idea of
03:09 - the last thing in is the first thing out
03:12 - this is the polar opposite of this idea
03:14 - of a queue right if there is a uh I'm
03:18 - about to draw a tickets Booth right if
03:20 - there is a tickets Booth with a ticket
03:22 - salesperson I don't want to go too far
03:23 - with this and then you could imagine a
03:25 - queue of people waiting in line to buy
03:29 - tickets it's Q I totally spelled that
03:31 - wrong but whatever the the first person
03:33 - in line right the this if you're pushing
03:36 - if your people are lining up kind of
03:38 - like pieces of paper piling up on a
03:39 - stack is the first person to get tickets
03:41 - right you would never sell tickets to
03:43 - the last person in line um but a stack
03:46 - we're not using a queue in this
03:47 - particular pro project we're using a
03:49 - stack the idea of the last thing in is
03:52 - the first thing out so how do you
03:54 - program a stack well there's all sorts
03:56 - of different ways we could do it but
03:57 - honestly I'm just actually going to use
03:59 - a Java JavaScript array because a
04:01 - JavaScript array has a push function
04:02 - which adds things to it and in fact I'm
04:05 - pretty sure we'll find out we write the
04:07 - code it also has a pop function and the
04:09 - pop function allows you to pop things
04:11 - off so even though an array has all
04:12 - sorts of features like indexes and
04:14 - things can be added deleted from the
04:16 - middle we don't we're not going to use
04:17 - any of that we're just going to use an
04:18 - array to keep this stack of objects that
04:20 - we push in and pop stuff out so
04:23 - hopefully that clears up for you if you
04:24 - haven't heard about a stack before what
04:26 - that is and now let's look at number two
04:28 - here push the current cell to the stack
04:31 - let's add this to our code so I'm going
04:33 - to go over here to the code one thing I
04:35 - should mention is I moved the cell
04:37 - Constructor function to a separate file
04:39 - cell. JS just to keep things organized a
04:42 - little better so when you go download
04:43 - the code you'll see that and um I'm
04:46 - about to sneeze we'll see what see if I
04:47 - make it through the rest of this video
04:49 - ah so now I want to create a stack so
04:52 - I'm just going to make it an array and
04:53 - make a global variable called stack and
04:55 - I'm going to set it to be an empty array
04:57 - if I look at the algorithm again item
04:59 - two push the current cell to the stack
05:02 - let's go back to the code and where do I
05:04 - do that step two is right
05:07 - here it's not there I'm going to add it
05:09 - step two and I'm going to say stack dot
05:13 - stock stack stack. push current so there
05:18 - we go there's very little code to write
05:20 - here push the current cell to the stack
05:22 - I have done it now let's figure out the
05:24 - next piece so this here we need to deal
05:26 - with now remember when do we suddenly
05:28 - need to make use of that stack we're
05:30 - carving out this Maze We are a we are we
05:33 - are like a digger thing going underneath
05:35 - the Earth and carving a tunnel and at a
05:37 - certain point we get stuck we have to
05:40 - backtrack and find a spot that we kept
05:43 - track of in our stack to try going a
05:45 - different direction so we want to go and
05:47 - use the stack when we get stuck when do
05:50 - we get stuck we get stuck if there are
05:53 - no available neighbors remember this
05:55 - check neighbors function returns
05:57 - undefined if it has no neighbors that it
06:00 - can give back to you so if next is not
06:02 - undefined do all that normal stuff
06:06 - otherwise now we're stuck let's go and
06:10 - make use of the stack so what's the
06:12 - first thing that we do oh but it says
06:15 - else if stack is not empty right we can
06:17 - only use the stack if it's not empty so
06:20 - here I should say else if stack. length
06:23 - is greater than zero it's an array so we
06:25 - can check the length is greater than
06:26 - zero that's how we know if it's not
06:27 - empty what
06:29 - pop a cell from the
06:33 - stack VAR cell equals stack.pop this is
06:37 - when we find out if uh JavaScript arrays
06:40 - have a pop function I'm I'm like I I
06:42 - know that they do I being factious here
06:44 - because I recorded this video earlier
06:45 - but the sound didn't work and now I'm
06:46 - redoing it you don't need to know that
06:48 - because you're watching this at sometime
06:49 - in the future when robots have overtaken
06:51 - you anyway and you're a robot watching
06:52 - this hopefully not maybe anyway ah pop a
06:58 - sell from the stack and make it the
06:59 - current someone in YouTube is someone in
07:00 - the comments going complain that I'm off
07:03 - track but I'm back on track pop a cell
07:05 - for the stack and make it the current
07:07 - cell Uh current equals cell right and
07:11 - you know what what am I making this two
07:12 - lines of code for all I want to do is
07:15 - basically say if we're stuck go to the
07:18 - stack and we've got a new current spot
07:20 - so there we go and guess what I'm pretty
07:23 - sure that we've now made this work
07:26 - because it's notice how it's not getting
07:27 - stuck anymore because when it gets stuck
07:28 - it goes back now it's happening so fast
07:30 - it's sort of hard to see what's
07:31 - happening but you can see that it's
07:33 - eventually and the sound is still
07:34 - working that it's going to revisit every
07:36 - single spot now I'm not going to add too
07:39 - much more to this this is basically done
07:41 - and you can see eventually it's going to
07:42 - find its way back to the beginning and
07:43 - it sort of solved the Maze and now it's
07:45 - aaz that you could actually work with
07:47 - and do other things with I might if I
07:48 - were you trying to add some stuff to
07:50 - this you know as an exercise you might
07:51 - try highlighting the cells of different
07:53 - color that are currently in the stack
07:55 - you know another thing I could do this
07:56 - really quickly um just uh is I could set
07:59 - the frame rate again to something slower
08:02 - and here now we might be able to see
08:03 - like oh we might be able to like
08:04 - pinpoint the moment it gets stuck and
08:06 - goes back I'm watching it doesn't seem
08:08 - stuck yet doesn't see we get we're not
08:10 - getting lucky here uh come on get stuck
08:13 - get stuck oh there's a lot of room for
08:14 - it to go get stuck get stuck get stuck
08:17 - get
08:19 - stuck just my luck okay it probably now
08:22 - it got stuck and you can see how it's
08:24 - backtracking and going a different way
08:25 - and now look it's backtracking again
08:27 - moving along that stack and finding a
08:28 - different way now it's backtracking
08:30 - again so you can see now you can see
08:31 - what it's doing so you could sort of
08:33 - slow it down to watch this process um
08:35 - you know you might sort of see like how
08:37 - does this work uh you know with a much
08:41 - lower resolution and like a I mean this
08:44 - is kind of crazy what I'm about to do
08:46 - it's probably going to run really
08:49 - slow so this is this is a drawing
08:51 - problem like you know I could sort of
08:53 - generate this whole like super high
08:55 - resolution maze I mean you really can
08:57 - you know I might move to processing for
08:58 - this and I could render out a PDF of the
09:00 - Maze and I could have a website where
09:02 - people just log on and get infinitely
09:04 - generated mazes sent to them what kind
09:05 - of creative things could you do with
09:07 - this in terms of color and application
09:09 - and that sort of thing so I hope you
09:10 - will continue to explore that uh send me
09:13 - your questions in the comments share
09:14 - with me things you make from this but
09:16 - this I think really concludes I just
09:17 - want to make this work in a very simple
09:20 - way this really concludes
09:22 - um the uh tutorial on how to do
09:28 - the depth first search recursive
09:31 - backtracker we know what a stack is and
09:33 - all that kind of stuff algorithm for
09:34 - Maze generation I will mention that if
09:36 - you look at this Wikipedia page there
09:38 - are many other algorithms for generating
09:40 - mazes and if you look through it and
09:41 - have some interest and Implement one of
09:43 - these share it with me or write in the
09:44 - comments that you would really love a
09:46 - particular video doing a different
09:47 - algorithm uh try it in 3D make your maze
09:50 - happen in Minecraft I don't know
09:51 - whatever you could think of please do
09:53 - and let me know how it goes for you and
09:55 - I will see you in some other video in
09:57 - the future when I am hopefully not a
10:00 - robot goodbye