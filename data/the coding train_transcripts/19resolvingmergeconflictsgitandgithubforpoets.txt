00:00 - (ringing bell)
00:01 - - Hello, surprise.
00:03 - It's a video about Git and GitHub,
00:05 - and this video is about
resolving merge conflicts.
00:09 - So, I probably should be doing this video
00:11 - in my poem repository, which I use
00:14 - for all of my intro to
Git and GitHub videos
00:17 - but I happen to be here, streaming live,
00:19 - and working on this neural network library
00:22 - that I've been building in a
bunch of other video tutorials.
00:24 - So, if you just watched those Git
00:26 - and GitHub videos all about using
00:28 - a poem to sort of demonstrate
how Git and GitHub works,
00:31 - there'll be some aspects
of this that are confusing,
00:33 - but hopefully this will be helpful anyway.
00:35 - I can always double back
and make another video
00:37 - if this one doesn't work
but let's just try it.
00:39 - So, what is a merge
conflict, first of all?
00:41 - So, a merge conflict is when you have,
00:45 - let's say this is a file.
00:48 - In this case, it's my
file called matrix.js.
00:54 - So, I have a file called
matrix.js and it has code in it.
00:59 - Now, I had two people, two
separate people of the internet
01:04 - happen to be working on this file.
01:07 - So, we'll call one person
A and one person B.
01:13 - Now, any text file has lines in it.
01:16 - So, even if it were a poem, it
would have lines of the poem.
01:19 - If it's source code file, it
has lines of the source code.
01:22 - So, we can think of the lines as like
01:23 - one, two, three, four, five, six.
01:26 - Now, if person A makes a change
01:30 - and submits a pull
request, meaning hey, hey.
01:34 - You, the library, please
pull my changes, right?
01:38 - I want to push my changes to you
01:40 - but I'm asking, requesting
that you pull my changes.
01:43 - If this person just made
changes to lines five and six,
01:50 - and this person is doing the same thing
01:51 - but made changes to lines two and three,
01:56 - the Git system is smart enough
01:58 - to figure out how to pull both
02:00 - of these things in with no conflicts
02:02 - because there are no conflicts.
02:04 - If I want to accept changes
to lines two and three,
02:06 - I can accept those at the same time,
02:08 - one before the other, simultaneously,
02:11 - can't really do it simultaneously
as lines five and six.
02:14 - However, if right here person
B makes a change to line four
02:20 - and person A also makes
a change to line four,
02:23 - then we have what's known as a conflict,
02:26 - and typically what will happen,
02:27 - and what just happened to me right now
02:29 - is I merged this one, I merged this one.
02:32 - Wasn't thinking about it.
02:34 - I was done, it's finished,
and it worked fine.
02:36 - It merged with no problems but now,
02:38 - when I went to merge this one,
02:39 - I got a message saying resolve conflicts.
02:43 - Now, there are a variety of
ways you can resolve conflicts
02:47 - and I think that I've, in
some of my previous tutorials,
02:50 - looked at working with
Git command-line locally
02:53 - and I can have the text file, there
02:54 - but what I'm going to do is see
if I can resolve the conflict
02:57 - just through the GitHub interface, itself.
03:00 - So, let's take a look at how that works.
03:02 - Now, once again, this
isn't the best scenario
03:05 - and I might come back and do a follow-up
03:07 - because it would be nice to see
03:08 - kind of a trivial example where I can
03:10 - really know what the changes are
03:12 - but I'm just going to look and see
03:13 - there's a whole discussion, here,
03:15 - and we can see these are the files.
03:17 - These are the files that
have conflicts in them.
03:19 - Matrix.js and matrix.test.js.
03:21 - So, hopefully, you can
continue to watch this
03:23 - even if you don't understand what
03:24 - the code in the files is doing.
03:26 - I'm going to look and see
what the conflicts are.
03:29 - Oh, this is definitely, (laughing)
03:30 - this is definitely going
to go down the tubes,
03:34 - the internet tubes really quickly.
03:35 - So I'm going to click this
resolve conflicts button,
03:38 - and now it's, look at this, okay.
03:41 - Alright.
03:42 - I'm in matrix.js.
03:44 - Okay, have to figure out
what's going on, here.
03:46 - So, we can see, look.
03:47 - This is where the conflict is.
03:49 - Oh, look. (clapping)
03:50 - I think I know how to resolve this.
03:52 - Okay.
03:53 - So, this is where the conflict is.
03:56 - Now, what is it telling me, here?
03:57 - Map-improvements.
04:00 - Master, equals, equals, equals, equals.
04:02 - Greater than, greater than,
greater than, greater than.
04:03 - So, what this is showing me is
04:05 - this is showing me through kind
04:06 - of like a visual
interface of the text file
04:08 - that there are two proposed
ways that this code could run.
04:14 - One of the files had it this way
04:15 - and one of the files had it this way.
04:16 - In fact, the current
master has it this way
04:19 - but the one that I'm trying
to merge has it this way,
04:21 - and why does this one have it this way?
04:23 - This is the thing that I
changed, I wanted this.
04:25 - So, it's up to me, now.
04:26 - There's no right or wrong answer, here.
04:27 - As the kind of proprietor
of this GitHub repository,
04:31 - I've got to decide if both
pull requests works on,
04:38 - works on, sorry, if both pull requests
04:41 - worked on the same line,
I have to pick one.
04:43 - Which one do I want?
04:47 - I'm going to take this one at the bottom.
04:49 - So, I'm going to delete this.
04:56 - And I'm going to delete this.
04:57 - Whoops.
04:58 - What'd I just do?
05:01 - I'm going to delete this.
05:03 - (laughing) Now, if only I
knew how to use a computer.
05:05 - I'm going to delete this and now.
05:09 - Are there any other conflicts?
05:10 - Please be.
05:11 - No other conflicts.
05:12 - Oh, I'm so lucky.
05:13 - I'm going to now say mark as resolved.
05:16 - Now, one thing you can do if
you're the proprietor of a
05:19 - GitHub repository, you can just write
05:21 - to the persons making the pull requests.
05:22 - I'm so sorry but some conflicts arose.
05:24 - I love your pull requests.
05:25 - Do you think you could refactor it?
05:26 - Because you could leave
this up to the contributors,
05:28 - certainly, but I'm here,
live on the internet.
05:31 - Maybe I'm not live anymore, I'm recorded.
05:35 - And so, there we go.
05:36 - Oh, no.
05:36 - Okay.
05:37 - So, now I have this other file.
05:40 - Let's look at this.
05:41 - I might just quit while I'm ahead, here,
05:43 - but let's see if I can
look at this other file.
05:46 - So, this code might look
very strange to you.
05:48 - This is something called unit testing
05:50 - and actually related to this video series,
05:52 - I have a video series that I will link to
05:53 - in this video's description
about how you can run
05:56 - automated tests that make sure
05:58 - a change in your code doesn't
actually break your code.
06:00 - That's what this is doing, here.
06:02 - So, there's map-improvements.
06:04 - That's the pull request and master.
06:07 - You know what?
06:08 - I think this is a very trivial change.
06:11 - It looks to me like this
was just added at the end
06:14 - and there was like a line break
06:16 - or something that caused
the merge conflict.
06:17 - So, this looks like something
that I could actually
06:19 - just completely delete
here, and then delete here,
06:24 - and this is just some new stuff
06:25 - that got added to the end as
part of this pull request.
06:27 - There was like an extra
line break or something,
06:29 - so GitHub detected a conflict
06:31 - but it really was not a conflict.
06:33 - So, now I can go and I can click
06:36 - mark as resolved, and look at this.
06:41 - Commit merge.
06:42 - So, here's the thing.
06:43 - Where am I right now?
06:46 - I resolved all the conflicts.
06:48 - Do I want to do this?
06:50 - I think this button, if I'm right,
06:56 - is not actually (laughing)
I'm looking at the chat
07:00 - to see if anybody's complaining
about what I've done,
07:02 - is not actually merging the pull requests.
07:04 - I think this is the
committing the resolution
07:07 - of the conflicts to the pull requests.
07:10 - Let's find out.
07:11 - It's a green button.
07:12 - When I see a green button, it
just makes me want to click it.
07:15 - Click.
07:17 - So, I think the pull request is
07:19 - still going to be live and active.
07:20 - It's taking a while, yes.
07:22 - All it did, yeah.
07:24 - All it did was fix the conflicts.
07:26 - Where can I find that that was done, here?
07:30 - Yes, that was this.
07:32 - So, this is me.
07:32 - Now there's a little note that
07:34 - I merged branch master
into map-improvements.
07:37 - That's basically saying
there were conflicts
07:40 - between master and map-improvements.
07:42 - This pull request was map-improvements
07:44 - and there was me, merging them together,
07:46 - resolving the conflicts, and
now, I can actually go ahead.
07:50 - The conflicts are resolved and I can
07:53 - (drum rolling)
07:54 - merge the pull requests.
07:58 - (laughing) Nothing
exciting's going to happen.
08:00 - It really should.
08:00 - It should, like confetti should explode.
08:03 - Confirm and look but I
can make something happen.
08:06 - (trumpets playing)
08:08 - Yay, (clapping) okay.
08:10 - So, that was a video about
resolving merge conflicts
08:13 - through the GitHub interface.
08:15 - The sort of basic gist of it.
08:17 - Perhaps I missed something important
08:20 - that I will certainly
make a follow-up video.
08:21 - So, let me know what I missed,
08:23 - what questions you have in the comments,
08:25 - and thanks for watching this video about
08:27 - merging, no, resolving conflicts,
08:30 - merging them with a pull request,
08:31 - something something, GitHub, I don't know.
08:35 - Search engine, optimize
keywords, throw them in there.
08:37 - Okay, bye-bye.
08:38 - (cheerful music)