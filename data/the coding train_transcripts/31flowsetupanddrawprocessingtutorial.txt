00:02 - Hello
00:04 - so we have begun we have written are
first lines code, you...
00:08 - you've hopefully written your first.. created your
first processing sketches now. You're running stuff,
00:13 - you've stuff drawing to the screen we've begun
 we're on our way
00:17 - but truth be told
00:20 - we are missing a massive, a humongous
00:24 - conceptual piece to this puzzle of
00:27 - learning about writing software about
programming the computer
00:31 - that we really need to tackle right now so this
video and then the next video we're
00:35 - gonna tackle something we're going to
think about
00:37 - the.. we're gonna call this the flow of a program
00:40 - flooow of a program. So look.. umm ahh 
let's look at this.. let's consider
00:45 - this idea of flow in the context what we
have so far
00:48 - so umm over here we have a very simple
Processing sketch it's what we've kinda started with
00:53 - we have size of the window, we draw
background and we draw a rectangle on the
00:57 - screen and if I run it
00:58 - you can see this is the result.
What's the flow of this program?
01:02 - Well we can count one, two, three, four, five,
six lines of code
01:06 - it executes each one of those in order
and when it gets to the end it's
01:10 - done and voila -- rectangule on the screen!
01:14 - but truth be told I don't know I walked to
over hear but I like the white background
01:18 - truth be told this is not..
 that is not how most
01:22 - programs operate. Programs operate in a lot of
different ways you can think of something
01:27 - as event driven,
01:28 - for example if you're sitting there using Photoshop
every time you
01:32 - click something or pull down a menu item,
some event is triggered
01:35 - some code is executed and an image is processed. You 
can also think of a program as kind of running
01:40 - forever in this loop, if you're playing a
game in any..
01:44 - if you're playing a game or watching
some procedural animation
01:47 - it's happening over time. Draw the stuff on the
screen move the stuff, draw the stuff on the screen
01:52 - move the stuff. That's what 'Pong' is doing:
move the mouse draw the paddle over here
01:56 - move the mouse draw the paddle over
01:57 - here. Programs run over time. They keep track of
02:01 - data over time. They take different paths based on
what the user does or what
02:05 - inputs are coming to the program. We need
02:08 - a foundation for writing programs.. writing
02:12 - processing sketches that happen over time
whether that means
02:16 - they've run in the loop over and over
again or based on
02:19 - some event that happens when something 
in the program gets triggered
02:22 - we're going to look at both of these scenarios
but we're going to start...
02:26 - I think am talking about the right thing 
that I meant to in this video. We're going to start
02:30 - with actually just this idea of an animation loop
02:33 - and you can think this again if you were... if...
02:37 - someday I will come up with a better scenario
than just start with thinking of a game but if
02:41 - you were making a game Pong, Space Invaders..
something more
02:45 - modern I guess, you would..
 you would write a program
02:49 - that runs over time. It draws the stuff
it moves the stuff, it draws the stuff....
02:52 - I said that already. Okay so how are 
we going to do this? If we
02:56 - come back and look at this sketch what do
we need to add to the sketch so that it
03:00 - runs over time?
03:01 - This program really just executed, finished
we want it to draw
03:04 - over and over and over again so that we
can start to animate suff
03:08 - So in order to do this we need to introduce
03:12 - a new concept, this new concept is going
to be known as
03:16 - a block of code.
03:18 - I'll just write that over here "block of code"
03:21 - we're going to be using blocks of code all the time. We're going
03:25 - when we want to sort of like segment; this
part of our code does this, this part of our
03:29 - code does, this this is the definition of this,
03:31 - this is the definition of that, we
need to create a block of code.
03:35 - A block of code is always noted with in open
curly bracket
03:39 - to begin
03:44 - and a closed...
03:46 - a closed curly bracket to end.
03:51 - And then the code that is contained within that block
 goes in between those curly brackets
03:56 - so we need two blocks of code.
03:59 - Let's think about this, the flow of our
program is actually gonna be very very simple
04:04 - we're going to have two elements
one we're going to call
04:08 - 'setup', and one we're going to call 'draw'.
04:12 - I don't know what am drawing over here..
04:14 - this is going to be setup and this is
going to be draw. We need some lines of
04:18 - code in setup, we need some lines of code in draw.
And I need a bigger whiteboard...
04:21 - but anyway what can you do. 
Okay so why do we have this
04:25 - two blocks of code? Here is the flow of a
program that we're going to begin with
04:30 - our program is going to do
04:33 - somethings at the beginning we're gonna
think of these as the setup,
04:37 - the initialization conditions, and this (draw) is
going to do somethings
04:41 - over and over again. And so setup
is stuff that's going to happen
04:44 - once and only once.., once and only once
04:48 - draw is the stuff --I could like
04:51 - hide back here -- that's going to happen forever
 over and over again in a loop
04:57 - so when it gets to the end it comes
right back up and executes that code  again
05:01 - (Setup) - code that happens once,
(Draw) - code that happens over and over again.
05:05 - Why does this flow make sense for us?
This flow makes sense for us
05:09 - let's just take for example the game
Pong again
05:12 - because there are often a bunch of
things you want to do to initialize the
05:17 - program, Pong begins
05:19 - set the score to 0 set the level to 0
05:22 - place the paddles in their starting location 
place the pong in it's starting location
05:27 - that's the stuff that happens when you
initialize the program then
05:31 - as the program runs over and over and over
again looping and looping
05:34 - it does stuff like move the paddle draw the paddle
move the paddle draw the paddle
05:39 - if the pot hits the paddle turn the pot around
05:42 - if the pot goes past the paddle 
increase the score that type of thing..
05:45 - so all that stuff is always happening while
the program's running
05:48 - when does the program stop? I don't know
05:52 - in this case absolutely never...
you know when the computer breaks
05:56 - when the user turns it off or hits quit.
Obvioulsy we could create
05:59 - all sorts of different type of scenarios
where a program stops restarts all sorts of things..
06:04 - but but this is our basic foundation,
some stuff that happens at the beginning
06:08 - and some stuff that happens forever and ever
 so let's go back and look at this code for a second
06:13 - okay here are some things in this
program there's the size
06:17 - function there's the background function
06:20 - and there's the other stuff
06:23 - that draw the rectangle. What should
happen at the beginning?
06:27 - andd what should happen forever in a loop?
 we can look at this we can ask that question, you could
06:32 - pause the video right now
06:33 - and then try to answer it for yourself. Now you've 
unpaused or you probably didn't do that
06:38 - because who knows why...
06:40 - ahh anyway maybe you did. Thank you fo
like humouring me but
06:44 - umm I think there's one thing that is
incredibly obvious
06:48 - which is that size should go at the
beginning. Size is an initialization
06:52 - condition, we're setting up the size
of our window. Now ofcourse
06:56 - you could probably come up with some
 scenario where you want the window to dynamically
06:59 - resize while the program is running but that's not what
we're doing right now. What we're doing
07:03 - right now is we're saying size is 
something that we have to add..
07:07 - that we have to do once and only once
now in an animation program
07:12 - presumably we want to draw
07:16 - our stuff over and over again 
we always want to draw it in the window
07:20 - so I'm gonna say that our rectangle
method
07:23 - which I forget what the numbers are but I'll
just make some of them up, is going to go
07:28 - in draw and fill() and stroke() and 
all that stuff for drawing
07:32 - a rectangle.. we're going to.. we wanna draw
that stuff for ever and ever looping over and over again
07:37 - setup the initial conditions, draw thesev stuff over and over again
07:40 - so there's one more thing over here
07:43 - background.. I forgot to start the timer, I don't know how long I've been going
07:46 - background where does that go?
07:50 - Mmmh am gonna say there's no correct
answer to this question
07:54 - and for now I'm actually just going to
put background here
07:58 - and we're going to examine this later
what happens when you put background in
08:02 - setup what happens.. there're really a no right
answers to this question
08:06 - it's up to, it has to do with what you're creating
08:09 - you have stuff in setup that happens at the beginning and stuff that happens in
08:13 - draw over and over again..
how many times can I say that in one video
08:16 - I've probaply already done it too many times already
Ok, so this we've now established
08:20 - as what we want to do, we want to have
these blocks of
08:24 - code right? a block of code that is our setup
08:29 - a block code that is our draw but.. but
the truth of the matter is
08:34 - uh the syntax for how we're going
to write this is going to suddenly look a little odd
08:39 - so this is conceptually I think I have
established conceptually that we've
08:42 - got setup we have size in a block of code
08:45 - we've got draw which has background and rectangle in a block of code
08:48 - but what do we actually have to write
in processing?
08:52 - So I'm going to erase everything around this
08:55 - and am gonna look at
08:58 - what the actual processing syntax for
establishing setup and draw is
09:02 - what it is is we say void
09:05 - setup parentheses
09:09 - open bracket close bracket: ' void setup () {} '
09:12 - void draw parentheses 
open bracket closebracket:  ' void draw () {} '
09:17 - so the.. what we should recognize at least
from this discussion of a block
09:21 - code is these open bracket closed bracket. 
This is saying
09:24 - everything in between these two brackets
is the stuff that goes in
09:28 - draw, everything in between these two
brackets is the stuff that goes inside
09:32 - we now no longer want any code anywhere else.
Any stray code just
09:36 - somewhere outside these of two blocks
would not make any sense
09:40 - code only happens in setup() and draw(),
 of course there could be more
09:45 - functions and lots more stuff later but for
now we could sort of think in a simple way
09:49 - code only happens either at the beginning or
over and over again in a loop
09:53 - so looking at this we can understand 
now ahha setup this is the setup
09:59 - block of code, this is the draw block of code. But 
there's other syntax here that we dont understand
10:03 - this seems so sad like why do we
have this word void here.. I mean
10:08 - is my programming life void of meaning
and happiness and why is that word there
10:13 - and these parentheses there and I dont understand
10:16 - that and what... what what does all this
mean?
10:19 - [laughs] what does all of this mean? 
The truth of the matter is
10:23 - umm what the word void means will
come later
10:27 - why we have these parentheses here will come
later. But one thing we can sort of see
10:31 - about this.. but I will mention is
what we're actually doing is not defining
10:35 - this is a block of code in that it is contained
between curly brackets
10:38 - but what we're actually doing is defining our own
function, we're defining the
10:42 - that setup function we're defining the draw
function. Those functions
10:45 - are executed by processing automatically
setup at the beginning draw over and
10:49 - over again and we've now defined what
code should be inside those functions
10:55 - this will become more clear in video ____
10:59 - well sort and figure out what number that
actually is
11:02 - when I do a video that is all about
writing function.. more about this sort of syntax
11:06 - of defining functions but for now we just need
to kind of memorize this syntax and so
11:12 - let's go over to our processing sketch
11:13 - walk over here and let's add this in
11:18 - so I'm going to add in, I'm going to say void
setup ()
11:22 - curly bracket curly bracket
 void draw ()
11:25 - curly bracket curly bracket and I'm
gonna
11:29 - obnoxiously remove my comments here just
for a second. Ooh I did something
11:33 - AAAH!! Help everybody stop ahh
11:37 - what I wante... I auto.. so I did something
that's like a
11:40 - force of like unbelievable habit in nature
I hit command + T
11:44 - which didn't want to do because I wanted to at
least demonstrate before I did that
11:49 - what the way my code looked was like this
so one convention again remember
11:54 - line breaks got no meaning in the way the
code executes
11:58 - the curly brackets define the beginning
and end of a block, a semi-colon
12:01 - defines the end of a line but human beings
especially if you're a human being like me
12:06 - like to keep things incredibly orderly
and very nice and neet
12:09 - to feel comfortable and
relaxed and one's life
12:13 - and um the convention to be
able to make code a little bit more readable
12:17 - is when you have a block of code 
always indent
12:21 - the code inside that block.
So you can see here
12:25 - that in draw you can see all those lines
of code are slightly indented but then in setup
12:28 - its not. I could do that manually myself
space space umm..
12:32 - but one thing that processing has is under
edit it has a nice little
12:37 - option here called Auto Format and
Auto Format will auto indent and
12:42 - clean up all of your umm.. blocks of
12:45 - code for you, so probably that was a
little bit of an unnecessary digression
12:49 - but it's something that is...
12:50 - auto formatting and indentation and 
code commenting
12:54 - is something that is very meaningful
and important to me in my life and
12:57 - you should not be like me you should be a
free-spirit and just enjoy things and
13:01 - just don't worry about it
13:02 - you know if a couple of... if your code
looks like this:
13:06 - you should not have to like you know sit
down in the corner and like breathe deeply
13:10 - for like 15 minutes you know it'll be fine but anyway
13:13 - okay so I went off on a really long tangent
there which someone will download this video and edit
13:18 - that out and send it back to me so I can upload
it again without that but
13:21 - until that happens you had to sit 
through that. Okay so
13:24 - we've done it we now have setup size
happens once,
13:28 - draw this stuff happens over and over
again over and over and over again
13:31 - let's run our new program our dynamic
program that runs over time
13:35 - we run it we look at it we have the 
exciting amazing result of
13:39 - exactly what we before, [laughs] this is very sad
13:42 - this is a sad moment in computer programming
learning history
13:46 - fortunately it's not gonna be sad very long, the
next video we're going to take a step
13:50 - further. But why
13:51 - is it still a static program? The reason
why it's a static program
13:55 - is what did we say to do in draw over and
over again? exactly the same thing
13:59 - exactly the same thing, draw the rectangle at 320, 180
14:03 - draw a rectangle 320, 180
draw a rectangle 320, 180
14:07 - it never moves, it never changes color never 
grows never does anything. This is our next step
14:12 - if we have a program that runs over time
how do we introduce the concept of
14:17 - variation into this loop? So
14:21 - umm I suppose what I would suggest to you
before you watch the next video is find something
14:26 - you made
14:27 - and sort of get setup() and draw() into
your sketch try to type out the syntax see if
14:32 - you run into any errors, just get 
a sketch with this
14:35 - with this umm with setup and draw 
and something I will say umm
14:38 - for some reason you're following along
the learning processing but it does
14:41 - something which says
14:42 - take your elaborate crazy alien design
and put it in a dynamic program
14:47 - and actually what I would
14:48 - suggest to you do after some experience of using
14:51 - this book with teaching is don't do that,
 I would say
14:54 - come up with something really simple
make a very simple design
14:57 - one circle one rectangle because what
we're gonna
15:01 - focus on is less about all this code and
gobbling up for drawing elaborate patterns
15:06 - on the screen
15:06 - we want to focus on just starting to animate the simple elements
15:09 - how to.. how to introduce variations into our
program it's gonna be alot
15:13 - easier to do that with a simple sketch and
not an elaborate design
15:16 - later you can kinda understand what it
means to like start building
15:19 - more elaborate design but right now I want to
focus on this sort of flow of the
15:23 - program. So... ahh boy that was a much longer
video than I imagined even though I have no
15:28 - idea how long it was
15:29 - and I will be recording the next one
as soon as I press this stop button
15:33 - and the start button, see I just keep going. This is
artificial that I stop and start
15:37 - I think I would like them to be a lot more shorter
ones but I don't know am just doing the best I can
15:41 - thank you very much