00:01 - [TRAIN WHISTLE]
00:02 - Hello, welcome to
today's coding challenge.
00:04 - In today's coding
challenge, I'm going
00:06 - to attempt to program this, the
game of life cellular automaton
00:12 - in JavaScript.
00:12 - Going to use the
P5.js framework.
00:14 - What's running
right here right now
00:16 - is a processing example using
the Java programming language
00:19 - that I made several
years ago as part
00:21 - of The Nature of Code book.
00:23 - Now, if you're
interested in that,
00:24 - you can also look at my whole
playlist about this thing
00:27 - that I can't pronounce
called cellular automata,
00:30 - the plural of automaton.
00:32 - And I do have some
videos that give you
00:33 - some historical
background, and looking
00:36 - at different Wolfram's
elementary CA,
00:39 - and some exercises and things.
00:41 - But I'm really just
showing examples
00:43 - and talking about the
systems in those videos.
00:46 - In this video, I'm going to
try to start from no code
00:49 - and finish with the simulation.
00:51 - Hopefully it's going to work.
00:52 - It generally doesn't.
00:53 - So don't get your hopes up.
00:56 - But I do want to say that
I would encourage you
00:58 - to do some background reading.
01:00 - This is the first public
appearance of the game of life
01:06 - as created by John
Conway, a mathematician,
01:09 - from an article in
Scientific American in 1970
01:12 - by Martin Gardner.
01:13 - Of course, you can always
refer to the Wikipedia page.
01:16 - I'm going to need this,
which is going to--
01:18 - which outlines the rules
for how the system behaves.
01:21 - And you can also
see that there's
01:22 - a lot of possible stuff.
01:24 - There's all these kinds of
interesting repeating patterns
01:27 - and different types of things
that you could create and do
01:30 - with the Game of
Life simulation.
01:32 - But I'm going to program
a simple version of it.
01:35 - Hopefully that will happen.
01:36 - Then at the end, we'll
talk about some variations
01:38 - that you might think about.
01:39 - And maybe someday I'll
try to make one in 3D
01:41 - or something like that
OK, so let's get started.
01:45 - Here's what we need.
01:48 - A cellular automaton is a system
of cells that exist in a grid.
01:53 - It could be in one dimension,
two dimensions, three
01:55 - dimensions.
01:56 - The Game of Life system is one
that exists in two dimensions.
02:03 - And the idea is that
you have generations.
02:07 - So if this is
generation 0, I'm going
02:09 - to run some computation on
this system of cells on a grid.
02:13 - And then I'm going to have a
new set of cells on that grid.
02:19 - And that's going
to be generation 1.
02:23 - So the cells that exist on
that grid all have a state.
02:28 - That's part of a CA system.
02:30 - So that state could be
a floating point number.
02:32 - It could be a kind of animal.
02:34 - You could really imagine
a lot of different ways.
02:36 - I'm going to do something
very simple with the game,
02:39 - of The Game of Life is a simple
system of discrete states,
02:41 - two states, 0 or 1, on
or off, alive or dead.
02:45 - So you can imagine
a configuration
02:47 - of this being
something like this.
02:52 - And for each time, each
tick, each generation,
02:56 - each frame of animation, I
evaluate each cell one by one
03:02 - and get a new state based
on the previous state.
03:06 - So once I'm trying
to do this cell,
03:08 - I need this cell's
new state, I'm
03:10 - going to get a new state
based on this state
03:13 - and its neighbors.
03:14 - So what are its neighbors?
03:16 - That's up to us to define.
03:17 - It could be its left
neighbor, its right neighbor,
03:19 - only its neighbors to its left.
03:21 - But in The Game of Life
system, its neighborhood area
03:25 - are the eight cells
surrounding it.
03:27 - So it's this 3 by 3 area,
1, 2, 3, 4, 5, 6, 7, 8.
03:31 - So I need to evaluate
all of those cells
03:34 - and decide whether it should
stay as the 0 or turn into a 1.
03:39 - And the reason why it's called
The Game of Life is the rules.
03:44 - The rules for how we move
from one generation to another
03:48 - resembles some type
of biological process
03:52 - that you might think about,
population or bacterial growth.
03:55 - And the idea is that a cell that
is surrounded by neighbors that
04:00 - aren't alive cannot stay alive.
04:02 - A cell surrounded by neighbors
that are alive can come to life
04:06 - or stay alive.
04:07 - And a cell that's surrounded by
too many neighbors cannot stay
04:11 - alive due to overpopulation.
04:12 - And we can go back
to the Wikipedia page
04:14 - and read those rules
precisely right here.
04:17 - So any live cell with
fewer than two neighbors
04:21 - dies, as if caused
by underpopulation.
04:24 - Any live cell with
two or three neighbors
04:26 - lives onto the next generation.
04:28 - Any cell with more
than three neighbors
04:29 - dies by overpopulation.
04:31 - And any dead cell
with exactly three
04:34 - live neighbors
becomes a live cell.
04:35 - So this is written as
if by reproduction.
04:37 - So this is written in
somewhat of a confusing way.
04:40 - I think I could
simplify this, I think.
04:42 - We could say let's
say the cell is dead.
04:46 - It's a 0.
04:48 - It's only going to change to a 1
if it has three live neighbors.
04:54 - Then it changes to a 1.
04:55 - Otherwise, it stays a 0.
04:58 - A 1 is going to stay a 1
unless it has less than two,
05:05 - less than two live and
greater than three live.
05:10 - Then it dies.
05:13 - So birth, reproduction, happens
with exactly three neighbors.
05:18 - Death happens with fewer
than 2 or greater than 3.
05:22 - Now, I don't know if I
got those numbers right.
05:24 - Let's go check the
Wikipedia page again.
05:27 - [FANFARE]
05:29 - Thank you, thank you, I hit
the sound effect by accident.
05:35 - Live cell with fewer than
two live neighbors dies.
05:38 - Yes, less than two dies.
05:41 - Live cell with two or
three neighbors lives.
05:43 - I don't care about that.
05:44 - I'm not going to kind of
not care about change--
05:46 - that it stays the same.
05:47 - I can kind of ignore that.
05:48 - Live cell with more than
three neighbors dies.
05:51 - Yep, that's what
I've got over there.
05:53 - And then, any dead
cell with exactly three
05:55 - live neighbors becomes alive.
05:58 - OK, so I've got
those rules correct.
06:00 - So now, what do I need?
06:01 - You're over there.
06:02 - I'm going to go back over here.
06:03 - I need something.
06:04 - I need a-- all I need to
make this program work
06:07 - is a data structure
to store this grid.
06:10 - And this is where I'm
having a bit of a headache.
06:13 - I'm really not sure what to do.
06:16 - The way that I've always done
this in previous examples
06:18 - is by using something called
a two dimensional array.
06:20 - I think I have a video
tutorial about that
06:22 - somewhere, which I will link
to in this video's description.
06:25 - But two dimensional arrays
are kind of not so much fun
06:29 - in JavaScript.
06:30 - They can become a
little bit weird.
06:31 - And there really
is no such thing
06:32 - as a two-dimensional array.
06:33 - A two-dimensional
array is a construct
06:36 - of our own human mind, saying
it's really just an array
06:39 - of arrays, which makes sense.
06:41 - This is an array.
06:43 - Each row is an array.
06:44 - And then the grid
is an array of rows.
06:46 - Or each column is an array.
06:47 - And the grid is an
array of columns.
06:49 - So I think I'm going
to do it that way
06:50 - with the two-dimensional array.
06:51 - I just should say
that it's a little bit
06:53 - awkward, two-dimensional
arrays in JavaScript.
06:55 - But I'm going to
go ahead anyway.
06:56 - So the first thing that I
want to do in this program
06:58 - is just make a
two-dimensional array
07:02 - that stores a random
collection of 0s and 1s.
07:05 - So let's go to that.
07:08 - I'm going to go to the code.
07:09 - And you know what
I'm going to do?
07:12 - I'm going to actually
just write a function.
07:14 - I'm having weird deja vu.
07:15 - I probably did this in
another video somewhere.
07:17 - I'm going to just write a
function called make2Darray.
07:20 - And I want a certain
number of columns and rows.
07:23 - Because that way,
I can just say,
07:26 - I can have a global
variable called the grid.
07:29 - I'll call it grid.
07:30 - And I could just say
grid equals make2Darray.
07:34 - And I could say, I
want a 10 by 10 grid.
07:36 - So this is kind of
what I want to do.
07:38 - I'm going to just farm out
the making of the array
07:40 - to another function.
07:42 - And now I do
remember doing this.
07:44 - Because I'm going to
write this in a kind of--
07:46 - oh, there's a whole
coding challenge or video.
07:48 - I'm going to do this
in kind of horrific way
07:50 - and then everyone's going to
give me all these like amazing
07:53 - ES6 JavaScript fancy ways
of doing this whole function
07:56 - in one line of code.
07:57 - Someday, I'll come
back and do that.
07:58 - OK, so now, let me see here.
08:05 - So what I need to
do first is I need
08:07 - to have some sort of array.
08:09 - And it's going to be--
08:13 - this is always where
I get confused, too.
08:15 - Do I want the columns--
08:20 - the point of using a 2D array
is that eventually at some point
08:23 - I would be able to say something
like, grid know index 2,
08:28 - index 3.
08:30 - And I guess I usually think
of this as x and y and x
08:33 - being the columns.
08:35 - So I want this, the outer
array, if I think about arrays
08:38 - of arrays, to be every single
column, every single-- no, no,
08:45 - that's--
08:46 - x is column.
08:47 - And then the y is
every single row.
08:51 - So I'm going to do that.
08:52 - So I'm going to make a
new array of columns.
08:57 - And then, I am going to
say for let i equal 0,
09:04 - i is less than that
arr.length, i plus plus.
09:09 - Make array index i is
a new array of rows.
09:15 - Again, I know there are all
sorts of shorter and fancier
09:19 - automatic functions for
generating and configuring
09:21 - arrays, like fill,
and map, and reduce,
09:23 - and all that kind
of stuff, even more.
09:26 - So I'm going to do this.
09:28 - And then I am going to--
09:31 - what I want to do here now is
also want to fill them with--
09:37 - I guess I could fill
with values down here.
09:43 - So maybe I won't.
09:44 - Maybe I'll actually
just do that.
09:46 - So this is going to make me
an empty 2D array with nothing
09:49 - in it.
09:50 - And then I think what I
want is I probably want
09:55 - to have these global variables.
10:00 - I know this is a little bit
goofy that I'm doing this.
10:04 - And then what I'm going
to do, I could make an--
10:09 - and I'm going to
say let i equal 0.
10:13 - i is less than
columns, i plus plus.
10:17 - And then I'm going
to do j is less
10:20 - than 0. j is less than rows.
10:23 - I'm going to do a nested loop.
10:25 - So that I can say grid i
j equals floor random 2.
10:35 - This is going to give
me a nested loop.
10:38 - This is a nested loop.
10:39 - So I make this sort of 2D
array structure that's empty.
10:42 - And then I integrate
over every single column
10:45 - in every single row.
10:46 - And I fill each one with
a random number, 0 or 1.
10:52 - And I'm just-- now
I'm going to run this.
10:55 - And I'm going to go back to--
10:56 - I'm going to go to my code.
10:58 - OK, cannot read
property 0 of undefined.
11:01 - Well, you know it would be nice?
11:03 - If I actually
returned that array.
11:06 - So the make 2D function
array, it's making this array.
11:09 - It's also got to return it.
11:10 - So that I can get it back here.
11:14 - And then now, if I look
at grid, I'm going to see,
11:17 - it's an array of arrays.
11:18 - And I forgot, there's this
wonderful thing you can do,
11:20 - console.table grid,
which shows me.
11:25 - Now I can see it here.
11:26 - So we can see this is that
two-dimensional array.
11:30 - That's what it looks like.
11:31 - It's a two-dimensional
array with rows and columns,
11:33 - filled with 0s and 1s.
11:35 - So
11:35 - Step one is finished.
11:39 - Now, what I need to do is
I need some mechanism to,
11:44 - every frame of animation,
iterate over every single spot
11:47 - and set a new spot.
11:49 - Actually, you know what
I need to do first?
11:51 - I need to render this thing.
11:52 - I want to be able to see it as
a grid of red and blue squares,
11:57 - or black and white squares,
or 0s and 1s on the screen.
12:00 - There's any number of ways
you could render this.
12:02 - I'm going to do it in
the traditional way
12:04 - of a grid, the square, the
cell of the grid is black.
12:08 - If the value of 0, is white with
a value of 1, or vice versa.
12:11 - OK, what I want to do now is I'm
going to add a draw function.
12:17 - And I'm going to be using
this loop over and over again.
12:21 - I'm going to add this loop.
12:24 - Because I'm always
going to-- any time
12:26 - I want to look at
everything, I'm
12:27 - going to go through all the
columns and all the rows.
12:29 - It's been pointed
out in the chat
12:31 - that there are some JavaScript
libraries and packages that
12:34 - manage grid systems
and neighbors for you.
12:36 - Would be great to use those.
12:37 - I'm going to just do it
all without that right
12:39 - now, just to kind
of figure it out.
12:42 - I'm going to say background 0.
12:45 - And I'm going to
create a canvas.
12:47 - I think, to make my life
easier for the moment,
12:49 - I'm going to make the
canvas also a square.
12:54 - And then what I need to
do is I need to draw--
12:56 - I want to draw a
rectangle at an x and y
12:59 - with some width and height.
13:01 - And it's going to-- they're
going to be squares, so
13:03 - some width and width.
13:07 - And that value is going
to be the width of the--
13:15 - I should probably calculate
the number of columns and rows.
13:18 - Here's the thing.
13:18 - I'm going to redo the
way that I'm doing this.
13:21 - So I'm not going to
actually have a fixed
13:23 - number of columns and rows.
13:25 - I'm actually going
to do like a scale.
13:27 - I'm going to just have a
variable called resolution.
13:29 - And say that's 10, or 40.
13:33 - I'm going to say that's 40.
13:34 - So that'll be 10 by 10.
13:36 - And what I'm going
to do is I'm going
13:39 - to say columns equals the
width of the canvas divided
13:44 - by resolution.
13:45 - Rows equals the height of the
canvas divided by resolution.
13:50 - This way, I can kind of
dynamically-- you'll see what--
13:52 - I can dynamically
make a 2D array
13:55 - based on how big I
want the squares to be.
13:57 - So the columns and rows
are being calculated
13:59 - based on how big I
want the squares to be
14:01 - and the canvas size.
14:03 - And then I have that
global variable resolution,
14:05 - which is probably too long of a
name, which I can just use down
14:08 - here.
14:08 - And now, x equals i
times resolution and y
14:15 - equals j times resolution.
14:18 - And I'm going to now say if
grid i j equals 1, fill 255.
14:30 - And you know what, since
I made the background
14:32 - 0, I can actually,
in this case, I
14:35 - can just draw white rectangles
only for the values of 1.
14:39 - So let's see, I probably
got something wrong here.
14:41 - But let's try to run this.
14:42 - No, I didn't.
14:43 - So we can see there we go.
14:44 - There's some goofiness,
oh, it's sort
14:47 - of like my math is a little off.
14:48 - And what's this weird nonsense
over here, flickering?
14:54 - I kind of feel the
need to fix that.
14:58 - And the other thing that I can
do that this is going to help
15:00 - is if I make this 600 by
400, and I make this 20,
15:08 - it still works.
15:09 - Now, this is driving me crazy.
15:11 - I think what I want
to do is there's
15:14 - an issue with the stroke.
15:15 - So I could say, I could
also say stroke 255.
15:20 - And then I'm getting
something like this.
15:22 - But I don't know, design
wise, I'm not going
15:24 - to worry about that too much.
15:25 - Actually, I kind of like
being able to see the grid.
15:27 - So let me actually
put in stroke 0.
15:31 - And then I'm going to do
something kind of goofy, which
15:33 - is, I think if I say just
draw all the rectangles one
15:37 - pixel less, I think I'm going
to get the look that I want.
15:42 - Yeah, so whatever,
there's countless ways
15:45 - I could deal with this.
15:46 - But now I have the grid.
15:48 - I have all the cells.
15:49 - So now it's up to me to
simply implement these rules.
15:54 - I need to, for
every single cell,
15:57 - count the number
of live neighbors,
15:59 - look at its own state, and
have these rules play out.
16:04 - Here's the thing, this
is really important.
16:07 - While I'm checking each cell,
I check this cell first,
16:11 - let's say, I cannot change its
value and then go on and check
16:16 - the next cell.
16:17 - Because the next cell's
new state should not
16:20 - be dependent on this cell's new
state, but its previous state.
16:23 - And if I change the state,
I have lost its old state.
16:25 - So this is where
what I actually need
16:28 - is I need two
two-dimensional arrays.
16:31 - One is the sort of old one.
16:33 - And one is the new one.
16:35 - Now, probably the simplest
thing for me to do
16:38 - is just make a new
one every frame.
16:41 - That's sort of
like, in some ways,
16:43 - a bad idea in terms
of memory management.
16:45 - And if you look at
my processing example
16:48 - that I referenced at the
beginning of this video, what
16:49 - I actually do in that
example is I just
16:51 - have two different arrays.
16:52 - I have an old one and
then I have a new one.
16:54 - Then the new one is
then the old one.
16:56 - And I write the
new one over here.
16:57 - I just keep swapping them.
16:58 - So I could maybe add that in at
some point during this video.
17:00 - But for right now, at
the beginning of draw,
17:02 - I'm just always going to
make a new generation.
17:04 - At the beginning,
what I can do here--
17:07 - [FANFARE]
17:08 - Why's that keep happening when
I press the button to change
17:12 - the camera?
17:13 - At the beginning
of draw, I can say
17:17 - let next, for next generation,
equal make2Darray columns
17:23 - and rows.
17:26 - Now, I'm going to leave
this here for the rendering.
17:30 - And what I'm
actually going to do
17:32 - is at the end, what I'm going
to do is I'm going to say--
17:39 - I guess it doesn't
really matter.
17:40 - Do I want to render first?
17:43 - This is like a deep
philosophical question.
17:46 - Do I want to compute and then
render or render then compute?
17:50 - Kind of could matter
in some situations.
17:51 - In this situation
doesn't really matter.
17:53 - But the reason why
is I'm never going
17:55 - to see the first generation.
17:56 - Because what I want to do
is say grid equals next.
18:00 - So basically, the algorithm here
is compute next based on grid.
18:07 - Because draw is looping.
18:09 - So I want to compute the next
generation based on the grid,
18:12 - make grid that, render.
18:15 - And then compute the next
generation based on grid,
18:17 - make grid, render.
18:18 - So I don't know,
that's bothering me.
18:20 - I'm going to do this--
18:22 - I'm going to do this after.
18:23 - So at least I draw
the first one.
18:24 - And I'm going to do some
computation for the next frame.
18:28 - OK, so now, what do I
need to do once again?
18:31 - Loop through all of these,
loop through all of these.
18:38 - Now, what I need to do
is count live neighbors.
18:46 - I need to count the
number of live neighbors,
18:48 - the neighbors that have 1.
18:50 - So I could do a kind
of internal loop here.
18:55 - And that would probably
be a smart thing to do.
18:57 - Maybe I will do that.
18:59 - Where basically what I do
is I say I have a certain--
19:03 - I'm at a certain
cell, let me look
19:05 - at the cells between negative
1 and 1, negative 1 and 1,
19:08 - offset from where I am.
19:09 - I could also just do
something really silly.
19:14 - Let me do the really
silly thing first.
19:17 - I could say let sum equal 0.
19:19 - Then I could say sum plus
equal grid i minus 1 j.
19:26 - That would be the
neighbor to the--
19:29 - so right, if this is i,
j, i minus 1, j is there.
19:35 - i minus 1, j minus 1, i, j
minus 1, that sort of thing.
19:39 - So if I'm thinking about
this, I might add--
19:43 - I could manually put
in all the neighbors,
19:47 - just add them all up.
19:50 - This is like going
around the horn here.
19:55 - Plus i plus 1, j plus 1, i--
20:01 - sometimes I like doing
ridiculous things like this
20:03 - just to figure this stuff out.
20:06 - Now, I got to go i
minus 1, j plus 1.
20:11 - And then what's the
last one? i minus 1, j.
20:14 - This should be eight neighbors.
20:22 - This is eight neighbors, 1, 2,
3, 4, oh, wait, 1, 2, 3, 4, 5,
20:28 - 6, 7.
20:29 - What did I forget?
20:31 - i minus 1, j minus 1, i, j
minus 1, i plus 1, j minus 1.
20:40 - I forgot to do
that whole top row.
20:42 - And then i plus 1, j,
i plus 1, j plus 1, i.
20:50 - Yeah, so this
should now be eight.
20:52 - 1, 2, 3, 4, 1, 2, 3, 4.
20:55 - I kind of hate that I did this.
20:57 - You're all throwing your
tomatoes at your television
21:00 - screen, because of course,
you're all watching
21:02 - this on the television screen.
21:04 - So this is the idea.
21:05 - I need to add up
all those neighbors.
21:06 - Let's do this in a loop.
21:08 - So another way I could
do it is I could say.
21:11 - I have a better idea.
21:16 - Neighbors, I have a
better idea, let's
21:18 - write a function to do this,
neighbors equals count.
21:22 - I'm going to give it the grid.
21:23 - And I'm going to give
it the i and the j.
21:27 - So I'm going to
write a function,
21:30 - I'll put it all at the
bottom of my code, that
21:32 - receives I'm going
to call it count,
21:35 - countNeighbors, let's call it.
21:37 - And it's going to
receive some 2D array.
21:41 - And it's going to receive
an x and y location.
21:45 - And then what I'm
going to do is I'm
21:47 - going to say i equals
negative 1, i is less than 2 i
21:53 - plus plus.
21:55 - Then so I'm going to do a
little nested loop using i
21:58 - and j around that spot.
22:03 - And I'm going to say
let sum equals 0.
22:06 - And then I'm going to say
sum plus equals grid i, j.
22:12 - However, here's a problem.
22:14 - I don't want to count
myself as a neighbor.
22:19 - So there's a few different
ways I could do this.
22:21 - But it's a little bit silly.
22:22 - I'm just going to
subtract it at the end.
22:25 - I'll just subtract it out.
22:26 - I could have put an
if statement here,
22:28 - ignore it if i equals
x and j equals x,
22:32 - but I'm just going to
subtract it out at the end.
22:34 - And then I'm going
to return that sum.
22:36 - So this is-- you could see
a couple different ways
22:38 - of doing this right now.
22:40 - This is one way to
kind of do this.
22:42 - What this is doing
is it's saying
22:43 - let me do a little loop
around here, negative 1, 0,
22:47 - positive 1, negative
1, 0, positive 1.
22:49 - So let me check
this, this, this,
22:50 - and then subtract this
out, because I don't really
22:52 - want to count that one.
22:55 - So now, I should be able to--
22:57 - I'm going to just delete this.
22:59 - I've now counted all
of the neighbors.
23:02 - I've got a big problem.
23:05 - What do I do with the fact
that if I'm on the edge,
23:09 - there's no neighbor to the left?
23:12 - If I'm on the bottom,
there's no neighbor below.
23:15 - From the top, there's no
neighbor to the above.
23:16 - On the right there's no--
23:17 - if I'm on the edge, there's
no neighbor to the right.
23:19 - So what I could do, there's
a bunch of things I could do.
23:22 - I could consider this like
an infinite wraparound world,
23:25 - where this neighbor
to the right is this.
23:27 - This neighbor to
the left is this.
23:29 - I could-- there's other ways
that I could approach it.
23:31 - What I'm going to
do is I'm going
23:33 - to leave the edges
as fixed values
23:36 - and just not bother
to check them.
23:40 - So what I'm going to do
here is I am going to--
23:49 - I wanted to do, I was going
to do this loop like this.
23:53 - You know what?
23:54 - Let's do the wraparound.
23:55 - Do I-- no, no, no let's do
it the simple way first.
23:58 - I was like, oh, I'm just going
to add the wraparound code.
24:00 - Because I could add the
wraparound code here.
24:04 - But let me-- maybe I'll
leave that as an exercise
24:07 - or do that later.
24:08 - The issue is you know
what I really want?
24:11 - I think then-- the problem
is if I change this loop.
24:17 - So I have to--
24:17 - I have to treat the
edges differently.
24:19 - Oh, so much heartache here.
24:22 - But I can say, what I'm going
to do here is I'm going to say,
24:27 - oh this is the drawing.
24:31 - Oh, right, this is
the computation.
24:33 - So I'm going to say if i
equals 0 or i equals columns
24:39 - minus 1, minus 1, or j equals
0 or j equals rows minus 1,
24:52 - this is all of the edges.
24:54 - Just going to treat
them differently.
24:59 - I'm going to say next
i j equals grid i j.
25:08 - So I'm just going to keep
the same values from before.
25:11 - This is not a great solution.
25:13 - But it's a quick one
that I can do right now.
25:15 - So if I'm on an edge, I'm just
going to use the same value.
25:20 - Because now, what I can
do is say, look at this,
25:24 - my state is grid i j.
25:30 - Now it's time for me to
implement those rules.
25:33 - OK if my state is 0, and
3 neighbors are alive,
25:39 - change my state to 1.
25:43 - If state equals 0 and
neighbors equals 0,
25:50 - then next i j equals 1.
25:58 - That's rule number one.
26:02 - Not 0, equals 3.
26:04 - Now, what else?
26:06 - If I'm alive and less than 2
or greater than 3, are alive,
26:12 - then change my state to 0.
26:17 - Else if my state is 1 and
neighbors is less than 2
26:24 - or neighbors is greater
than 3, and I probably
26:28 - should put a little
parentheses around that one,
26:31 - and again, I'm sure there are
some nicer ways I could write
26:34 - this in a more concise way.
26:35 - But you can see,
this is the rule.
26:37 - If I'm alive, and
I have less than 2
26:39 - or greater than 3 neighbors,
then the new state is 0.
26:47 - In all other cases,
the next state
26:52 - is just the current-- is
just the current state.
26:58 - So this makes me want to
put this up here at the top.
27:02 - So that I can also
just use this here.
27:04 - So that's the state.
27:05 - The state, this is
the current state.
27:07 - If I'm an edge, just ignore me.
27:09 - I'm the same state.
27:11 - If I'm not an edge,
count all the neighbors.
27:13 - Check if I should change
my state or say the same.
27:16 - I'm seeing in the chat
there's a typo at neighbors
27:18 - in the first if.
27:20 - Thank you, neighbors.
27:24 - What's the chance I've
actually finished this?
27:28 - So there we go.
27:29 - I think I have mostly
all the code for it.
27:32 - OK, count is not defined.
27:35 - sketch.js, line 55,
oh right, because I
27:39 - called it countNeighbors,
which is a better name
27:41 - for the function than count.
27:42 - Try that.
27:45 - Cannot read property negative 1
of undefined at countNeighbors.
27:49 - So what is undefined?
27:52 - Oh, no, no, no, no, look at
this, this is a big mistake?
27:57 - What was I doing here?
27:58 - This loop-- negative,
this loop, which goes,
28:02 - which is basically a loop
for a little subsection,
28:07 - if this is x and y, i
is an offset negative 1
28:13 - to positive 1.
28:15 - j is an offset negative
1 to positive 1.
28:18 - The cells I'm looking at are not
i j, but x plus i and y plus j,
28:25 - because I'm just looking
relative to where that x, y
28:28 - point is.
28:29 - So that was a big mistake here.
28:31 - This should be x
plus i, y plus j.
28:41 - Oh, so close.
28:42 - countNeighbors at
draw sketch line 55.
28:47 - Line 55, countNeighbors,
wait, whoa,
28:51 - cannot read property
negative 1 of undefined.
28:53 - What's undefined?
28:54 - Grid?
28:56 - Neighbors?
28:57 - OK, hold on.
28:58 - Let's look at some stuff here.
28:59 - Or if j 0.
29:01 - Oh, look at this.
29:03 - I just keep going anyway,
so this, I really,
29:05 - I need to break out of the loop.
29:07 - So this is really like I'm done.
29:10 - Leave the loop, or
continue, or something.
29:14 - I don't know.
29:14 - I'm going to--
29:15 - I'm just going to put an elf in
here, as much as I hate that.
29:19 - Because I shouldn't be--
29:20 - I'm basically doing the
edges or the neighbors.
29:22 - Boy this would be much nicer
if I just, in this function,
29:26 - add some code to deal with
wraparound, which is not
29:28 - going to be that hard to do.
29:30 - So now, it should be good.
29:34 - There we go, the game of life.
29:35 - Now, it looks weird.
29:37 - Because the edges
aren't ever changing.
29:41 - But this is actually now
the game of life working.
29:47 - I really got to implement
this wraparound thing.
29:49 - So let's do that now.
29:51 - Let's fix it so that
the edges consider
29:53 - the other sides as neighbors.
29:56 - So how do I do that?
29:58 - Well, one way to do that is
with something called modulus.
30:02 - This is really, this is great.
30:03 - And I can refer you to Golan
Levin's guest tutorial video
30:07 - on modulus, which was made
as part of this channel.
30:09 - So I will link to that.
30:11 - But basically what
I'm saying here
30:15 - is if I have 10 columns,
0 through 9, what could--
30:24 - and I'm always looking
for the neighbor plus 1.
30:28 - So 0 plus 1 is 1, 1
plus 1 is 2, et cetera,
30:31 - et cetera, et cetera.
30:32 - 9 plus 1 is 10.
30:35 - But I want the neighbor to be 0.
30:37 - Well, guess what?
30:38 - 9 plus 1 modulus 10 equals 0,
because modulus is the operator
30:44 - gives you the
remainder of division.
30:47 - 10 divided by 10
is one remainder 0.
30:49 - So I encourage you to
watch that modulus video,
30:51 - if you're not
familiar with modulus.
30:53 - So this will actually
work, almost,
30:56 - getting closer, if I say,
I'm going to just say,
31:02 - I'm going to have a new--
31:04 - I need a new variable
name for x plus i--
31:07 - I guess I could say column.
31:10 - I don't-- column.
31:12 - And I'm going to say x
plus i modulus columns.
31:19 - And row equals y
plus j modulus rows.
31:24 - So this gets me close.
31:25 - It doesn't get me
all the way there.
31:26 - But it gets me close.
31:28 - So now I'm adding
it up like this.
31:31 - And I'm going to get rid
of this whole edges thing,
31:36 - because no longer.
31:39 - So I've got to get this--
31:40 - Now, I'm going to
have an error here.
31:42 - Right, I'm still getting
an out of bounds area,
31:44 - because I'm going to negative 1.
31:45 - Why?
31:46 - Because what if in the
case of i equal negative 1?
31:53 - So what if-- if i is 0, so let
me come to the console here.
32:02 - 10 modulus 10 is 0.
32:07 - But let's say I'm looking
for the left neighbors.
32:10 - So I'm going through negative
1, negative 1 modulus 10
32:15 - is negative 1.
32:17 - But I need that to be 9.
32:20 - I need negative 1 to the 9.
32:21 - Well guess what?
32:23 - If I actually just add
the number of columns
32:26 - to everything, if I'm actually
working with the numbers,
32:29 - instead of the number 0 through
9, the numbers 10 through 19,
32:35 - 10 minus 1 is 9,
modulus 10 is 9.
32:40 - So the formula is negative 1--
32:43 - is negative 1 plus
the number of columns
32:46 - modulus the number of columns.
32:51 - Oh but there's not 10.
32:52 - There's different
numbers in my system.
32:55 - So let's try to
confirm this again.
32:58 - The idea is that I have
an x and a y point.
33:02 - So that point might be,
let's say if it's on an edge,
33:05 - for example, might be like
0, it's on the left edge,
33:10 - might be something like
0, whatever the y is, 5.
33:15 - So this is the x value.
33:18 - And I want to take x plus i
plus the number of columns
33:26 - modulus the number of columns.
33:28 - I said it was
going to be simple.
33:29 - But it's kind of.
33:30 - It's really kind of
a crazy thing to do.
33:32 - But you might write this out,
practice it a bit on your own.
33:35 - It will make sense
to you eventually.
33:37 - So when this is going
to work, basically,
33:40 - let's say, i is going to be the
values negative 1, 0, and 1.
33:49 - x is going to be the
values 0 through 9
33:52 - if I'm thinking about
all the possible, all
33:55 - the possible columns.
33:56 - So let's just take 0 and
negative 1, for example.
34:00 - 0 minus 1 plus,
and in this case,
34:04 - I have 10 columns,
plus 10 modulus
34:08 - 10 is actually 9 modulus
10, which equals 9.
34:13 - So 0 negative 1,
to the left of it,
34:16 - that wraps it around to get
the neighbor on the right.
34:20 - Doesn't work for just any
arbitrary thing in the middle.
34:23 - If I take i to be 3--
34:27 - sorry, if I take, sorry, x
to be 3, 3 minus 1 plus 10
34:34 - modulus 10.
34:36 - well see how this 10 and 10
kind of cancels itself out?
34:38 - Can you see that?
34:39 - Am I off the whiteboard?
34:41 - I'm close to being
off the whiteboard.
34:43 - That equals 2.
34:46 - Because this is 12
modulus 10 is 2.
34:49 - So this actually works.
34:50 - And then what if
I'm on the edge?
34:51 - If I'm at 9, right,
if x is 9, 9 plus 1
34:58 - is 10, plus the number
of columns is 10,
35:01 - is 20, modulus columns, 20
divided by 10 is 2 remainder 0,
35:06 - so 9 to the right
gets neighbors 0.
35:09 - So this is kind of goofy.
35:10 - It shifts everything
over, so it can kind of
35:13 - look across the edge.
35:14 - So this is going to work.
35:16 - You can believe me
or not believe me.
35:17 - But it's going to work.
35:19 - And I'm going to put this in.
35:21 - So now what I want is
x plus i plus columns,
35:26 - modulus columns, y plus
j plus rows modulus rows,
35:33 - add those all up.
35:34 - And the game of life.
35:39 - [FANFARE]
35:41 - Thank you, thank you for
watching this coding challenge.
35:44 - Thank you, thank you.
35:45 - So let's try and make-- let's
try doing a couple of things,
35:48 - just to get a
little further here.
35:53 - I don't know, no,
I'm not going to--
35:55 - you do all the next stuff.
35:58 - I'm just curious let me
make the resolution 10,
36:01 - so we can see that's with a 10.
36:02 - So we can see it's running
pretty fast in the browser.
36:05 - I have a pretty low resolution.
36:09 - So here's what
you should do now.
36:10 - I'm going to stop.
36:11 - This is a perfect opportunity
for people watching this video
36:14 - to make some variations.
36:16 - Some things you can think about.
36:17 - Well, one thing is what
if you make each one
36:19 - of these cells an object?
36:21 - So its state might
not actually just be--
36:23 - it can keep track of more
than just its state 0 or 1.
36:26 - It could keep track of
whether it's changed state,
36:29 - or stayed the same, or how
long it stayed the same.
36:31 - What if you visualize those?
36:32 - What if you visualize
with different colors
36:34 - based on the history
of the system?
36:37 - What if you allow a user to draw
with the mouse, set cells on?
36:42 - What if you look up
some of these repeating,
36:44 - special repeating patterns
that you can create
36:46 - certain kinds of patterns?
36:48 - What if you-- you're
going to think of more.
36:52 - And what if you did the
edges in a different way?
36:54 - What if you used
a floating point
36:55 - numbers instead of 0s and 1s
and did an average or something?
36:59 - There are so many ways
you can create a system,
37:02 - lowering the resolution.
37:03 - What if you drew--
didn't draw squares,
37:04 - but circles, used images.
37:06 - How can you visualize
this system?
37:08 - How can you change the
rules or how can you
37:10 - visualize the system
in a different way
37:13 - to create a piece of art
or for some other purpose?
37:16 - I look forward to-- share
what you make in the comments.
37:18 - There will be the
code link from here
37:20 - and a Read Me where you
can submit your versions.
37:22 - And I'll come back in
a future livestream.
37:23 - I'll share some of the
community made versions.
37:25 - Run this again.
37:27 - There's one other thing.
37:28 - But I do think that making
cell objects is a path.
37:33 - Right now, I just have--
37:35 - oh, and you should probably
do the swapping thing.
37:37 - Maybe that's one other
thing you could do is maybe
37:40 - don't make a new 2D
array every time.
37:42 - But what I'm thinking
about here is
37:44 - what if instead of each one
of these being a random value,
37:48 - you said something
like new cell, i, j.
37:52 - And this cell
object can animate.
37:55 - It can move around.
37:56 - The cells could move, they
could grow, they could shrink.
37:58 - They could keep track
of their history.
37:59 - There's so many
possibilities there
38:01 - if you make an
object for the cell.
38:03 - OK, Thanks for watching.
38:05 - I hope you enjoyed
this coding challenge
38:06 - and you share with
me what you make.
38:08 - Goodbye.
38:09 - [MUSIC PLAYING]