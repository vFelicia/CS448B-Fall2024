00:00 - - Hello, and welcome
to a coding challenge:
00:02 - 2D raycasting.
00:03 - (dinging)
00:04 - So, what you're about to watch
00:05 - is an edited version of what I did
00:06 - on last week's live stream.
00:08 - This is the result of
the example that I made,
00:10 - but before I get started with the coding,
00:11 - let me talk to you a little bit
00:13 - about where I got this idea.
00:15 - So, a lot of people shared with me
00:17 - a recent YouTube video
from Sebastian Lague
00:19 - about the 2D raymarhing algorithm.
00:21 - This is part of his
coding adventure series.
00:23 - The video's really wonderful,
00:25 - and goes through the basic 2D algorithm
00:27 - and gets into also some
crazy 3D rendering stuff.
00:30 - So, I want to explore that
algorithm in a later video,
00:33 - but I wanted to start
with something simpler,
00:35 - and I looked back and
Brenda Dowd, back in 2016,
00:39 - posted a suggestion for
me to do 2D raycasting.
00:43 - So, about 3 years later,
I'm getting to it.
00:45 - So, I've been looking for inspiration
00:46 - and I found inspiration
00:47 - in one of my favorite internet artists,
00:49 - indie game creator, Nicky Case.
00:51 - So, Nicky Case made a game
called Nothing To Hide,
00:54 - and also an accompanying
explorable explantation
00:58 - that describes the process of creating
00:59 - this really beautiful 2D
shadow effect in the game.
01:03 - So, I encourage you to
check out Nicky Case's work,
01:05 - all of their explorable explanations,
01:07 - but in particular, down
the middle of this page
01:09 - is an example of exactly,
basically, what I tried to make
01:13 - in the coding challenge.
01:14 - There's also, from Red
Blob Games, Amit Patel.
01:17 - A wonderful interactive essay,
01:18 - explorable explanation, again, if you will
01:21 - of a 2D visibility, and
there's a source code
01:24 - and a variety of different languages
01:25 - and a whole bunch of interactive demos.
01:27 - So, this is what I wanted to make.
01:29 - I kind of got there.
01:30 - There's so much further it could be taken
01:33 - by you, the viewer, and I hope you make
01:34 - your own creative version of this
01:35 - and share it with me at TheCodingTrain.com
01:38 - So, I hope you enjoy
this coding challenge.
01:39 - (train whistling)
01:40 - Let's get started with,
actually, the coding of this.
01:42 - In JavaScript, using the p5.js library.
01:45 - So, let me map out what
I think I need, first.
01:48 - So, what I want to have,
01:50 - is I want to have two classes
01:52 - where I can make two kinds
of objects in my world.
01:55 - I want to have a boundary.
01:58 - This idea of a boundary,
02:00 - and the boundary really
just is line segments
02:03 - between two points, A
and B, or start and end,
02:05 - however I want to consider that.
02:07 - Then, I also want to
have an idea of a ray,
02:09 - and a ray has a position,
and then maybe a direction.
02:14 - So, presumably, if this was the ray
02:17 - at this position, with this direction,
02:19 - I need a function to tell me,
02:21 - where does this ray hit the boundary.
02:24 - So, two questions:
02:25 - One, does it hit the boundary?
02:26 - Yes
02:27 - or no.
02:29 - If it does hit the boundary,
02:31 - give me that point.
02:33 - If no, then just say no.
02:35 - So, this is what I need to do.
02:36 - If I can create this basic
ray class, a boundary class,
02:40 - I can have every ray find
its point on the boundary.
02:43 - Then all of those things
that I just showed you
02:45 - I should be able to create.
02:48 - I want to mention one other
reason why I'm doing this,
02:50 - and it might take me a
while to get to this,
02:52 - but in a future video, what
I intend to use this for,
02:55 - is also if I have a vehicle,
02:58 - I want to use this in an A.I. application.
03:00 - If I have a vehicle
03:02 - that's trying to drive
along some type of path,
03:07 - if I can give it sensors,
which are like rays
03:10 - that allow it to see
out from in front of it,
03:13 - the readings of those sensors,
03:15 - where those sensors, how far they are
03:17 - from the path's boundary could be inputs
03:20 - into a neural network
that would then determine
03:22 - which direction the vehicle should turn.
03:26 - So, this is where I'm also
going with this, eventually.
03:28 - But right now, in this
video, I just want this ray
03:32 - and this segment.
03:33 - Here I am with the code.
03:35 - So, I have three JavaScript files.
03:37 - I have sketch.js with my,
sort of, meme stuff in it
03:39 - set up in Draw.
03:41 - I have ray.js, where I
want to create a ray class,
03:43 - and boundary.js, where I want
to create my boundary class.
03:46 - So, let's do the boundary first.
03:49 - Class boundary,
03:51 - and then I need a constructor.
03:55 - And basically, I want two points.
03:57 - A
03:59 - equals createVector
04:01 - and
04:01 - B equals createVector.
04:03 - So, this is the idea of the boundary.
04:06 - I have two points.
04:07 - I could have them be separate variables.
04:09 - This.x1,
04:11 - this.y1,
04:11 - this.x2,
04:12 - this.y2,
04:14 - but I'm going to use A and B.
04:16 - Oh, but wait!
04:17 - Yeah, as vectors.
04:18 - So, A and B each get their own X and Y.
04:19 - Ha, okay.
04:21 - But maybe what I'll do
is I'll initialize it
04:25 - with four arguments, which
are the raw coordinate values.
04:28 - I might regret this later, but
let's see what happens here.
04:34 - Then, let me write a
function just to draw it.
04:37 - So, if were to draw it,
04:40 - all I want to do is say draw line
04:41 - from a.x, a.y, to b.x, b.y,
04:46 - and say stroke 255, okay.
04:48 - This is good.
04:49 - So, this is when things just
work out so specifically.
04:52 - So now, in sketch, I'm going to say,
04:55 - let's start with just one boundary.
04:57 - I'm going to call it B,
04:59 - and I'm going to say createCanvas
05:02 - 400,
05:04 - 400,
05:05 - and B is a new boundary
05:08 - between, I don't know,
05:10 - 300,
05:11 - 300,
05:13 - 300.
05:14 - No, 300, 100,
05:15 - 300,
05:17 - 300,
05:19 - and then
05:21 - background
05:23 - zero
05:23 - and b.show.
05:27 - Okay.
05:29 - Alrighty.
05:31 - Alrighty, alrighty, alrighty.
05:32 - (comical music)
05:37 - You'd think by now I
wouldn't have this problem.
05:41 - This comes from 15 years
of programming in Java
05:44 - before JavaScript, wasn't
that many years, maybe 10?
05:47 - There we go, look!
05:48 - Yay, I have a boundary!
05:50 - (trumpets blaring)
05:54 - Now, let's make the ray class.
05:56 - So, I'm going to say class ray,
05:59 - and, oh, there's so many
ways I could do this.
06:02 - I definitely need a constructor,
06:04 - and I want a position,
06:07 - which is going to be a createVector,
06:09 - and this a little bit.
06:11 - This is a little bit
silly, because ultimately,
06:13 - what is a ray
06:15 - but a vector?
06:17 - What I'm saying, though,
is that for my purposes,
06:20 - I want the ray to be a
vector that emminates
06:23 - from a particular location.
06:25 - So, instead of just
using P5 vector directly,
06:28 - I'm going to make my own ray
class, which wraps a P5 vector
06:31 - with a P5 vector, that's position.
06:34 - So, the ray will be initialized
at an X, Y location,
06:39 - and then its direction,
06:40 - I'm just going to hard
code that right now.
06:42 - CreateVector
06:45 - zero comma one, and then
what I'm going to do
06:48 - is write a draw function
06:51 - and I will say
06:54 - same thing, stroke 255.
06:56 - Let's translate to the position,
that'll make things easier.
07:00 - Translate to this.pos, I
didn't forget this time.
07:02 - This.pos.y, and then draw
a line from zero, zero
07:06 - to direction.x, direction.y,
07:08 - and
07:09 - pop.
07:10 - Maybe what I'll also do.
07:12 - So.
07:14 - If I make the vector that
size, it's going to be
07:17 - one pixel of length, which means draw,
07:20 - which is fine for just
knowing the direction.
07:22 - It's a unit vector, but for
drawing it, it's kind of tiny.
07:25 - So, I don't know, this is very silly,
07:27 - but I'm just going to multiply it by 10
07:30 - just so I can sort of see it
07:33 - right here.
07:34 - There's other more thoughtful
ways I could do this,
07:36 - but this will work.
07:37 - All right, let's go here.
07:38 - Oh, now I need to make a ray.
07:40 - So, now I'm going to say let R.
07:43 - Let's call this bound,
let's call this ray.
07:46 - Let's call this wall, let's call that ray.
07:50 - So, wall is a new boundary, wall.show.
07:53 - Ray is a new ray, and I will put this at,
07:57 - you're going to be surprised
about this location.
07:59 - (laughing)
08:00 - 100,
08:00 - 200,
08:02 - 100, 200, and then I'm
going to say ray.show.
08:08 - Okay,
08:09 - ah!
08:10 - Dir is not defined.
08:11 - This dot, this dot, I was so close
08:14 - to not forgetting my this dots.
08:16 - Oh, what?
08:18 - No!
08:19 - (coughing)
08:20 - Oh yeah, I want to point it to the right.
08:23 - So, there we go.
08:24 - X is the first component.
08:26 - Yes, okay, look at this!
08:27 - Oh, have I set myself up for
an exciting situation or what?
08:31 - So, if all goes according to plan,
08:33 - all I need to do now is write a function
08:35 - that says
08:37 - ray
08:38 - dot check
08:39 - wall.
08:42 - Ray.checkWall, that function
should either return maybe null
08:46 - or undefined if it doesn't intersect,
08:49 - or the point at which it
intersects if it does intersect.
08:55 - In other words, I want
to say let pt for point
08:58 - equal ray.intersect
09:01 - or cast.
09:01 - Let's call it cast against
the wall, I know it's weird,
09:05 - and then if point exists,
let's draw a point
09:09 - at point.x, point.y.
09:11 - We'll make this white
and maybe we'll make it,
09:14 - actually, an ellipse.
09:19 - So, this is the idea.
09:20 - I have a wall, I have a ray,
09:22 - and I'm going to cast
the ray towards the wall,
09:26 - and if I get a point back,
I'm going to draw it.
09:28 - So, in the ray class,
09:30 - I'm going to write a function called cast,
09:32 - and it's going to receive a
boundary, or I can call it wall.
09:36 - In order to do this, I need math.
09:38 - Right, I need to learn about
how do I determine if a line
09:41 - and another line are intersecting,
09:43 - and what's that point of intersection?
09:45 - There is a library, I'm
being told from the chat,
09:46 - called p5.collide2D
09:49 - that offers a lot of functionality
09:51 - for these types of geometry operations.
09:55 - Line-line intersection.
09:56 - You know, line-circle intersection.
09:58 - Circle-rectangle intersection.
10:00 - So, I could go and use that library
10:02 - and maybe it might be useful to do that
10:04 - and I'll come back to that
at the end of this video.
10:07 - I am, however, going to enjoy
looking at a Wikipedia page
10:11 - called line-line intersection
and finding the formula
10:15 - that I can use to apply to do
this math myself in the code.
10:19 - So, one thing I want to emphasize
10:21 - is that I mentioned
there's actually two steps.
10:24 - The first step is just to determine
10:26 - if it's even intersecting at all.
10:29 - Is it intersecting the line segment or no?
10:33 - And only if it is, then find that point.
10:37 - And so, in order to do this,
10:38 - and I'll go to the Wikipedia page itself,
10:41 - there's actually two values
that I need to calculate.
10:43 - One called T, and one called U.
10:46 - If T
10:47 - is between
10:48 - zero and one,
10:49 - and U is greater than zero,
10:54 - then the answer is yes.
10:56 - Both of these have to be true.
10:57 - Once the answer to that is yes,
10:59 - I can use T and U to then
calculate the actual point itself.
11:03 - I'm going to let you enjoy this.
11:05 - You can pause and read this
whole Wikipedia page yourself,
11:08 - but I'm going to scroll
down to the important part,
11:10 - and that is right here.
11:12 - The intersection point falls
within the first line segment
11:15 - if T is between zero and
one, and falls within
11:18 - the second line segment if
U is between zero and one.
11:22 - So, this is different
than what I said, right?
11:25 - Because, the thing is, that Wikipedia page
11:27 - is describing the point of intersection
11:31 - between two line segments.
11:33 - This boundary is an actual line segment.
11:36 - It has a start and an end.
11:38 - It's only this segment.
11:40 - The ray, however, is not
really a line segment
11:43 - the way I'm thinking of it.
11:44 - It is just an infinite line
11:47 - that goes off in both directions.
11:48 - So, this is why
11:49 - if T
11:50 - is for this
11:53 - boundary,
11:54 - then I know if this point is
really within this boundary
11:56 - if T is between zero and one,
11:59 - but for U, I just want to know
that the intersection point
12:03 - is on the positive side of the ray
12:05 - and not if the ray was
pointing in this direction
12:08 - on the negative side.
12:10 - So, this is my modification of that math
12:14 - on the Wikipedia page.
12:15 - So, let's calculate T and U.
12:18 - So, one thing you're looking
in this formula here,
12:20 - is this is the formula for T,
12:22 - and this is the formula for U.
12:24 - You'll notice that the denominator
12:26 - of both of these fractions
is exactly the same.
12:29 - So, let me first, in my code.
12:32 - I'm going to, just to reduce confusion,
12:35 - I'm going to say
12:36 - x1
12:37 - is
12:39 - wall.a.x,
12:43 - just so I can use the same notation
12:44 - that's on that Wikipedia page,
12:47 - and I'll skip through this more quickly.
12:50 - (calming music)
12:55 - So, the wall's start and end points
12:58 - are x1, y1,
12:59 - x2, y2.
13:00 - (calming music)
13:04 - And now, for the next.
13:06 - So, this one line segment
between x1, y1, x2, y2.
13:09 - Between the other line
segment x3, y3, x4, y4,
13:12 - I have the position of the ray
13:14 - and then the endpoint of
13:17 - the endpoint of that line segment,
13:20 - which is the position of the ray
13:21 - plus the direction of the ray.
13:23 - So, I'm making a line segment
13:25 - by saying here's the position of the ray,
13:27 - this is the direction vector.
13:28 - So, I have x3, y3, and
then this point right here
13:32 - is x4,
13:33 - y4.
13:34 - So, now that I've kind
of renamed all of this,
13:37 - and I could do the actual
math with vector operations
13:39 - and just keep these variable names,
13:42 - but this going to let me make sure
13:44 - that the Wikipedia formula matches
13:47 - exactly what I'm doing here.
13:49 - So, the first thing is to
calculate the denominator.
13:53 - Can I remember this?
13:54 - X1, x2,
13:55 - y3, y4,
13:55 - y1, y2,
13:56 - x3, x4.
13:58 - (calming music)
14:02 - Now, this is the formula
implemented as the denominator.
14:06 - Now, an interesting tidbit that
you might've noticed here is
14:09 - wow, the denominator is the
thing you're dividing by.
14:12 - What if it's zero?
14:13 - This could be zero.
14:14 - Well, guess what?
14:16 - If the value of that is zero,
14:18 - that means that the boundary and the ray
14:21 - are perfectly parallel, meaning
they would never intersect,
14:25 - even if you stretch them out
infinitely in both directions.
14:28 - So, that's something that I
need to look at right here,
14:31 - which is just to say
14:34 - if denominator equals zero,
14:36 - return null.
14:38 - So, this is, or just return,
I'll just say return.
14:41 - Get out of here if that's a zero.
14:43 - I'm done!
14:44 - I'm done with this, check.
14:47 - Now, I want to calculate T.
14:50 - So, T is going to be this
14:52 - x1, x3,
14:53 - y3, y4,
14:54 - y1, y3,
14:55 - x3, x4.
14:56 - (calming music)
15:03 - All right, now I've got T, the numerator
15:06 - divided by that denominator
I calculated above.
15:08 - Now, it's time for me to get U.
15:11 - X1, x2,
15:12 - y1, y3,
15:13 - y1, y2,
15:13 - x1, x3.
15:14 - This is actually the
same, it's just a two.
15:17 - (calming music)
15:22 - This is close, but if you're
not looking carefully,
15:25 - there is a nice little negative there,
15:28 - so I've got to also add that in for U.
15:31 - People in the chat are asking
15:32 - about these pipe symbols, what they mean.
15:34 - That means its the
determinate of a matrix.
15:36 - So, I've got a lot of different videos
15:38 - about matrix math beyond the scope
15:40 - of what I'm doing here right now,
15:41 - but that's certainly
something you could look into,
15:42 - and I'll try to include some resources
15:44 - in the video's description.
15:46 - But, what am I doing right now?
15:47 - Remember, I said.
15:50 - Right, what did I say?
15:51 - I said I was checking now if
T is between zero and one,
15:55 - and if U is greater than zero.
15:57 - So, let's try that.
15:59 - Let's just say
16:01 - if
16:02 - T is greater than zero,
and T is less than one,
16:08 - and U is greater than zero, than return.
16:12 - I'll just say return true.
16:14 - Otherwise,
16:16 - return.
16:17 - So now, in theory, if
the lines are parallel,
16:20 - I'll return there.
16:21 - If there is an intersection point,
16:23 - I'll return true.
16:24 - If there isn't, then I'll
just return nothing again.
16:27 - So, I haven't calculated
the point of intersection.
16:29 - Right now, this is just testing
16:30 - if there's a point of intersection.
16:32 - Let's see if that even works.
16:36 - So, back to sketch.js,
16:40 - and then if point.
16:43 - Actually, let's just comment this out.
16:48 - Console.log point.
16:52 - Let's see what we get.
16:55 - True!
16:56 - There is a point of intersection, yay!
16:59 - So, this is working.
17:00 - Now, will I get false?
17:02 - (dinging)
17:03 - So, the chat is pointing
out that I can just return
17:05 - the bullion result of that,
17:07 - and I would do that if this
was all that I want to do,
17:09 - but ultimately, if that's true,
17:11 - then I want to go and calculate
the actual point itself.
17:14 - So, that's why I'm breaking this out
17:15 - into a large if statement.
17:17 - Now.
17:19 - I need to do something where I actually
17:21 - set the direction of the ray.
17:23 - So, let me add a function called set.
17:28 - I'm just going to call
it update, I don't know.
17:30 - Or set, I don't know, set direction,
17:32 - and I'm going to give it
17:34 - an X and a Y,
17:36 - and
17:37 - I'm going to say this.dir equals,
17:41 - this.dir.x
17:42 - equals
17:44 - X minus
17:45 - this.pos.x.
17:48 - This.dir.y equals Y, minus this.pos.y,
17:52 - and then this.dir normalize.
17:55 - So, I'm just creating a vector
17:57 - that's pointing towards.
17:59 - This is kind of like,
17:59 - so let's actually make this
function called lookAt.
18:02 - I want to look at this particular point,
18:04 - and then in draw, what I can do is
18:07 - I can say ray
18:08 - look
18:09 - at
18:10 - mouseX,
18:12 - mouseY.
18:13 - So, now, let's see what happens.
18:16 - So, true, true, true, but
if I point up, undefined.
18:19 - Right here, it starts
being true, true, true.
18:22 - Undefined, undefined, undefined.
18:23 - So, this looks to me like it's working.
18:26 - I'm getting true when
I'm pointing at the wall
18:29 - and getting undefined
when I'm pointing away.
18:30 - That's a good sign.
18:31 - So, now, all I need to
do is get that point.
18:34 - So, right here, I want to create a vector.
18:40 - I want to create a vector and eventually,
18:41 - I want to say the X
value of that vector is,
18:44 - back to my Wikipedia page.
18:47 - Here, I can use either T
or U to find that point.
18:50 - I don't know that it really matters.
18:52 - Let's use T.
18:54 - X1
18:54 - plus T
18:55 - times x2 minus x1.
18:58 - X1 plus T
18:59 - times x2
19:00 - minus x1.
19:04 - And then
19:05 - the Y
19:06 - is
19:10 - Y1
19:11 - plus T times y2 minus y1.
19:14 - Y1
19:15 - plus T times
19:17 - y2
19:18 - minus y1,
19:19 - and then I can say return that point.
19:22 - So now, I should be able to go back here,
19:25 - and I should be able to add this.
19:27 - And here we go.
19:32 - Look, I'm casting my ray
all the way up to the edge.
19:36 - So, you might rightfully be wondering
19:38 - is this really working?
19:39 - I mean, I kind of set this up
in a really simple scenario
19:42 - where the line is perfectly vertical
19:44 - and the ray is right here positioned
19:46 - so that it's kind of
pointed directly at it
19:48 - from an obvious location.
19:50 - So, to know if this is really working,
19:51 - I might want to move the
line around, skew it,
19:54 - move the ray around.
19:58 - But ultimately, what I want to do,
20:00 - is I want to create something
like what Nicky Case
20:02 - has on their page,
20:04 - and I want to create a
world of many boundaries
20:07 - and an object that I can move
around and shoot rays out
20:10 - in all directions.
20:12 - So, I could approach that
by first setting rays out
20:15 - in all directions.
20:16 - Let's do that.
20:17 - Let's send rays out in all directions.
20:19 - This might be a little bit overkill,
20:21 - but I think I'm going
to make a particle class
20:25 - just to be the thing that's
moving around the screen.
20:28 - I don't really need that right now,
20:29 - but it's going to set me
up better for the future
20:31 - if I want to do raycasting
20:33 - from multiple vehicles driving around.
20:35 - So, let's make a particle class.
20:38 - I'm just going to give it.
20:40 - I'm just going to give it a position.
20:45 - This dot position equals createVector,
20:47 - and I'm going to put it
squarely in the center
20:51 - of the canvas, and then I'm going to
20:54 - create an array of rays.
20:56 - So, I'm going to say for
20:59 - let I equal zero, I is less than 360,
21:02 - I plus equal 10.
21:04 - So, I'm just going to think about the rays
21:06 - as every 10 degrees from zero to 360,
21:09 - and I am going to say
21:13 - this.rays
21:15 - equals a new
21:17 - ray
21:17 - position.x,
21:19 - position.y,
21:21 - and then I'm going to give it an angle.
21:23 - So, I am now going to, when
I create this.rays, index I.
21:27 - I'm going to make it
so when I create a ray,
21:34 - I give it, in addition to its position,
21:35 - I give it its angle.
21:36 - Actually, if all of the
rays are going to move
21:40 - as the particle moves, then, to be honest,
21:43 - it would make much more sense for me
21:44 - to actually just pass in
21:46 - the vector reference itself,
21:48 - and have the rays point to it,
21:49 - I don't even need to make
a copy of that vector.
21:52 - So, I could change the angle
mode to degrees, by the way,
21:55 - but I kind of like using radian,
21:57 - so I'm going to just use the
radians function to convert it,
21:59 - but I wanted to think in
degrees when doing the loop.
22:01 - So, if I go back to ray, I
need to change the constructor.
22:04 - So, the constructor now expects
a position and an angle.
22:10 - So, I can say this.position
just equals that position,
22:13 - and the angle, now,
equals p5.Vector.fromAngle
22:19 - angle.
22:19 - So, this is a function
in the P vector class.
22:22 - A static function that
allows me to create a vector
22:25 - pointing in the direction of an angle.
22:26 - So, now that I have that,
22:31 - I have my particle.
22:33 - I'm going to say let particle.
22:37 - Particle equals a new particle.
22:39 - There's no individual ray, anymore.
22:42 - I'm going to say particle.show,
22:46 - and in particle.show,
22:55 - I am going to comment all this out.
22:55 - In particle.show,
23:00 - I am going to say first fill
255, let's draw the particle,
23:04 - which is an ellipse at pos.x,
pos.y with, I don't know, 16,
23:10 - and then, I'm going to
say for let I equal zero,
23:12 - I is less than rays.length,
I plus plus, ray.show.
23:18 - So, let's look at this, now.
23:20 - Particle is not defined because
I forgot to include it as
23:25 - a file reference in my HTML.
23:27 - Pos is not defined because
I almost definitely forgot
23:32 - this dot
23:33 - everywhere.
23:35 - And then, actually, I
don't know what I'm doing
23:36 - with this loop here.
23:37 - I can just say for let ray of this.rays.
23:45 - Pos is not defined.
23:48 - Where was this.pos?
23:53 - There we go.
23:55 - Cannot read property show of
undefined at particle.show.
24:03 - Oh, this is terrible!
24:05 - This.rays, I didn't mean to do that.
24:08 - This is why I shouldn't
have called that I.
24:09 - This is really the angle,
24:12 - and what I want to do is just add a ray.
24:15 - So, I don't need to keep
track of the number of rays.
24:17 - So, there we go.
24:18 - I just want to use push
because I is not an index here.
24:22 - There we go, so you can
kind of see it there.
24:23 - Those are all the rays shooting out.
24:26 - Let's draw this smaller.
24:29 - So, you can see there they are.
24:31 - That's a little dot with
all the rays shooting out.
24:33 - Next step is to actually
find if any of those rays
24:38 - intersect
24:40 - the boundary.
24:41 - So, I have this cast function.
24:43 - So, I should be particle
24:45 - look.
24:47 - Look, I'll call it particle.look,
24:49 - and I need to give it the wall.
24:52 - Not sure if this is the smartest
24:54 - object-oriented structure,
but this will work.
24:57 - So, look at a wall, and
then I'm going to say,
25:00 - once again, I'm going
to look at all the rays,
25:02 - and I'm going to have every ray.
25:06 - When I say check,
25:07 - what is it called?
25:08 - In
25:11 - cast.
25:13 - Cast
25:14 - wall.
25:15 - Okay, let's try this and see what happens.
25:19 - So, what happens in cast?
25:21 - It does this.
25:22 - Oh, it returns the point.
25:24 - Okay.
25:25 - So now.
25:28 - Okay, so it returns the point.
25:30 - So, let
25:32 - const
25:32 - point equals ray.cast
25:34 - if point exists.
25:36 - Now, I want to draw a line
from this.pos.x, this.pos.y
25:41 - to point.x,
25:42 - point.y.
25:46 - There we go, you can
see those are the rays
25:48 - that intersect the wall.
25:50 - Now, if I, oh, this is the exciting part!
25:53 - If I say particle.update
25:56 - mouseX,
25:58 - mouseY,
25:59 - and in the particle, I add
a function called update
26:04 - with an X,Y, and I can
just say this.pos.set X,Y.
26:09 - Now, I can move this around
26:10 - and you can see that
it's showing me the rays
26:14 - that hit this boundary.
26:16 - Let's make sure this
works with the boundary
26:18 - being in a completely different location.
26:20 - So, now,
26:22 - the boundary could be
26:25 - 100, 100
26:26 - to 200, 300.
26:28 - Right, still works.
26:30 - I could move over here.
26:31 - So, these rays are hitting that boundary
26:34 - from wherever they are.
26:35 - I could draw the non-hitting
rays with a alpha.
26:38 - That could be kind of interesting.
26:40 - Just all the way.
26:41 - I could also add boundaries to the edge
26:43 - of the window, but what happens now.
26:45 - The real thing is to
have multiple boundaries.
26:47 - So, let's make multiple boundaries.
26:49 - I'm going to make it called walls,
26:50 - which is an array,
26:52 - then I'm going to say for
26:54 - let I equal zero, I is less
than five, I plus plus,
27:00 - and I'm going to say walls
index I is a new boundary,
27:04 - and let's, I don't know.
27:08 - This is probably a terrible idea,
27:10 - but let's make some random boundaries.
27:16 - Y1, Y2,
27:18 - height.
27:19 - Height.
27:21 - X1,
27:23 - Y1,
27:24 - X2,
27:25 - Y2.
27:25 - Then
27:27 - I need to show
27:29 - for
27:30 - let wall of walls
27:33 - show all the walls, and let's
comment out this look, now.
27:37 - All right, so this is what we get
27:39 - if I make five random boundaries.
27:41 - I probably should be more thoughtful
27:43 - about how I'm setting them up,
27:45 - but this should work, anyway.
27:46 - So, let's let this.
27:48 - Let's let this go.
27:49 - So, right now, if I were to just say
27:52 - look walls index zero,
27:55 - this should work with
just one of the walls,
27:57 - but what I want is for now this ray
28:01 - to stop here and not go to the next one.
28:04 - So, I need to check the ray
against every single wall
28:07 - and find the one that's closest.
28:09 - In other words, if I have
this wall and this wall,
28:12 - and I have a ray here,
extending this ray out,
28:16 - I get these two intersection points,
28:18 - but all I need to do is figure
out which one was closer,
28:22 - and that's the one that I
choose to draw the ray to,
28:26 - and then I sort of ignore this part.
28:27 - If this were a light source,
28:29 - the shadow would be cast there,
28:30 - but the light would arrive over here.
28:33 - So, you can see how
this idea of raycasting
28:35 - is related to how light
is sent out into a scene
28:40 - and shapes and shadows are rendered.
28:42 - So, if I change the particle look function
28:45 - and give it walls.
28:47 - Now, I can go in here
28:48 - and I can say,
28:50 - let ray
28:51 - of
28:51 - this.rays,
28:53 - and I can then say for
let, and this is walls,
28:57 - let
28:58 - wall of walls,
29:04 - and I want to find the record distance.
29:08 - So, if I start with infinity,
29:14 - and I look for that point,
29:18 - and then I say
29:20 - let's get the distance.
29:25 - The distance between
29:27 - this.pos
29:29 - and point.
29:31 - Right, this the p5.Vector function,
29:33 - and then I say D equals the minimum,
29:36 - whichever's smaller between
the distance and the record.
29:40 - Sorry, the record is that.
29:42 - The record is whatever's smaller between
29:44 - the new distance I've
found and the record.
29:47 - All of this I can only do if
point, if there is a point,
29:51 - then
29:53 - I need to keep track of the record point.
29:57 - So,
29:59 - I'll call this closest equals null,
30:04 - and if point,
30:05 - and if point.
30:07 - Oh, I really should check
if its a new record.
30:09 - So, I might as well just do here.
30:11 - There might be a better way to do this.
30:12 - If distance is less than the record,
30:16 - then the record equals distance,
30:19 - and the closest is that point.
30:23 - Oops, I typed closet instead of closest.
30:26 - So, now,
30:28 - if closest is a thing,
30:30 - then now, I'm going to draw that line
30:33 - from
30:34 - this.pos.x,
30:35 - this.pos.y,
30:37 - to closest.x,
30:39 - closest.y.
30:41 - So, this is now the same exact algorithm,
30:44 - but for each ray instead of
seeing if there is a point.
30:47 - For each ray, I'm
finding is there a point,
30:49 - and is it the closest one?
30:51 - So, let's see if that works.
30:55 - Yeah this, oh no.
30:56 - So, why do I have a bug here?
30:58 - Ah, here we go, this is the problem,
31:00 - thank you to the chat.
(dinging)
31:02 - The record is a thing that
I need to keep track of
31:06 - while I'm looking at every wall.
31:08 - So, I'm re-setting the record to infinity.
31:10 - That's not going to work.
31:11 - So, the record needs
to be set to infinity,
31:13 - and now I start checking all the walls.
31:15 - So, that should do the trick.
31:18 - There we go.
31:19 - So, we can see, now, my
beautiful raycasting is working.
31:24 - I'm going to do one more thing to this.
31:25 - This is really done.
31:26 - There's so much more that
can be done with this,
31:28 - and I'm really
31:30 - having a hard time stopping myself,
31:32 - but I'm going to do one thing.
31:32 - I want to let it just
move without the mouse,
31:36 - and the way that I'm going to do that
31:38 - is I am going to just use Perlin noise.
31:41 - So, let's say X offset and Y offset,
31:44 - and I know, I know there
was a whole long discussion
31:47 - about what's Perlin noise
31:48 - versus Simplex versus OpenSimplex.
31:50 - Let me just say Perlin noise.
31:52 - Please, please, let me just say it.
31:52 - You can find those videos if you want,
31:55 - and then I am going to
say particle.update,
32:00 - noise X offset times width,
32:03 - noise
32:05 - Y offset times height,
32:08 - and then I will increase X
offset by some small amount,
32:13 - and also Y offset by some small amount.
32:16 - That's going to move on the
diagonal if I don't start Y offset
32:19 - in a different place, and there we go.
32:21 - So, I just want it to move automatically,
32:23 - which I think is a little bit
more interesting to watch.
32:26 - Also, oh, there we go.
32:26 - Here's a nice configuration of boundaries.
32:29 - So, there we go!
32:30 - Now we have raycasting from a particle
32:33 - moving with Perlin
noise throughout a space
32:36 - in all 360 directions,
32:37 - only drawing the rays where
it actually hits a boundary.
32:41 - (dinging)
32:42 - (train whistling)
32:43 - There is so much you can do with this.
32:45 - I am going to return to do a video
32:48 - where I take this idea
and then render the view.
32:53 - So, a couple things I want to do.
32:54 - One is, I want these to be
sensors to a neural network.
32:58 - So, I want this object to
learn how to move about a space
33:01 - based on its ability to see
the boundaries around it.
33:04 - Another thing that I want to do
33:06 - is see if I can take this
and then render the view
33:09 - of a 3D scene.
33:10 - This is the kind of
classic DOOM or Wolfenstine
33:13 - Wolfenstine 3D, right,
one of those things.
33:16 - (chuckling)
33:17 - Effects.
33:18 - Stop me for a second, here.
33:19 - People are asking me to put
boundaries along the edges.
33:21 - So, why not?
33:23 - I'll fast-forward this for you.
33:25 - (calming music)
33:30 - Okay, so, here are four boundaries,
if I did this correctly.
33:33 - The top wall, the right
wall, the bottom wall,
33:35 - and the left wall.
33:36 - Let's see what that looks like.
33:39 - So, now you can see the rays
are always going to go out
33:42 - in every single direction.
33:43 - Alternatively, I kind of like it better
33:45 - without it casting
everything out to the walls.
33:48 - So, here is that again,
33:49 - and the chat is saying,
"More rays, please".
33:52 - More rays?
33:53 - So, let's add that.
33:54 - So, particle right now, I
made a very arbitrary decision
33:57 - to have the angle
increments at 10 degrees.
34:00 - If I change this to one.
34:02 - There we go, this feels
much more like light, right?
34:04 - You can almost, sort of, get the sense.
34:06 - Again, the boundaries are in
a sort of weird place here,
34:08 - but you can get the sense
of this casting of shadows.
34:11 - Oh, now I should put the walls back in,
34:14 - and maybe, just maybe,
34:16 - I might like to draw
34:18 - the ray.
34:20 - Just maybe I'd like to draw these lines
34:23 - with a stroke
34:24 - weight
34:25 - of,
34:26 - let's actually just give it an alpha.
34:28 - A little bit of transparency?
34:33 - And let's see what happens.
34:35 - There we go, ooh, I like that!
34:37 - So, yeah, so now you really
see it's like a light source
34:39 - that's just casting its light everywhere,
34:42 - and you can see where the shadows are.
34:44 - Thank you for watching this
raycasting coding challenge.
34:47 - This one was a lot of fun to do,
34:48 - and I think there are a lot
of creative possibilities
34:51 - that you could explore
building on top of this
34:54 - very basic example that I've made.
34:56 - I haven't added color to this,
34:57 - the boundaries are just
in random locations.
34:59 - They could be drawn by a user,
35:01 - they could be part of
some generative pattern.
35:05 - How the actual light source
moves about the space
35:08 - doesn't have to be by a user
interaction or Perlin noise.
35:11 - There could be multiple light sources,
35:12 - there could be different
kinds of boundaries.
35:13 - There are so many things you could do.
35:15 - I'm sure there are things you could do
35:16 - that I'm not even thinking of.
35:17 - There are a whole bunch
of follow-up videos
35:19 - I could also do exploring
this topic further.
35:21 - So, the first thing that
I want to try to tackle
35:24 - is just exploring this idea of raytracing.
35:26 - Could I render, sort of
like a 3D view of the scene
35:30 - from this little point of light
that's moving about a space?
35:34 - There's also another technique
for doing essentially
35:36 - the same exact thing, called raymarching.
35:38 - There's a wonderful coding adventure video
35:40 - by Sebastian Lague that I referenced
35:42 - at the beginning of this video
35:43 - that you should check out,
35:44 - and I'm going to come
back and do my own version
35:46 - of that raymarching in
2D algorithm as well.
35:48 - So, thanks for watching,
35:49 - and see you in a future coding challenge.
35:51 - (train whistling)
35:52 - (bright pop music)