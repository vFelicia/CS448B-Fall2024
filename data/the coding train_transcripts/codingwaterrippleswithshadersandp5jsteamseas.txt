00:01 - [Music]
00:23 - do
00:31 - [Music]
01:06 - [Music]
01:08 - hello everyone good afternoon it is
01:11 - friday
01:12 - the weekend is upon us welcome to a
01:14 - special team sees live stream this is my
01:17 - sound check
01:19 - i will be beginning in approximately
01:22 - [Music]
01:23 - two or three minutes let me know how the
01:25 - audio is the music is probably quite
01:27 - loud right now
01:29 - [Music]
01:33 - okay
01:34 - my voice might be a little quiet i'm
01:35 - happy to pump it up if i need to
01:38 - know
01:39 - [Music]
01:55 - [Music]
02:14 - do
02:18 - [Music]
02:37 - [Music]
02:43 - do
02:45 - [Music]
03:10 - [Music]
03:28 - or should i say
03:32 - dude no that's the train how do you
03:34 - [Music]
03:36 - i don't know i don't know how to make
03:37 - that before gloria this is freaking out
03:39 - that i'm making
03:40 - gloria's my dog maybe you just you've
03:42 - never watched the coding drain before oh
03:44 - hello welcome it's today's friday live
03:47 - stream
03:52 - i don't have an applause
03:55 - that i was going to play
03:58 - oh i swear i had them where my this
04:00 - whole sound board is completely messed
04:02 - up but
04:04 - there we go
04:05 - welcome
04:07 - today is a special live stream uh for
04:10 - team seas
04:12 - a fundraising initiative that launched
04:14 - approximately 30 minutes ago on youtube
04:17 - i thought i would uh start 30 minutes
04:19 - late maybe got a chance to watch some of
04:20 - the other team seas videos that are out
04:23 - there um i am really excited first of
04:26 - all to say a huge thank you to curiosity
04:30 - stream all right so normally
04:33 - during my live streams i would talk
04:35 - about i might be here talking to you
04:37 - about nebula and curiosity stream and
04:39 - telling you to sign up for those things
04:40 - and you probably should maybe but uh
04:43 - curiosity stream has been
04:45 - super generous to donate their sponsor
04:47 - time here so i can tell you about
04:50 - team
04:51 - c's so let's see um if i can manage to
04:55 - do that and then i'm going to get
04:57 - started doing some fun coding challenges
04:59 - stuff with shaders so if i come over
05:01 - here
05:02 - uh i know um this is the tmc's website i
05:06 - think you can donate through a button
05:08 - right there on youtube itself
05:10 - um
05:11 - but you can also donate it here on the
05:13 - website it looks like the donations are
05:15 - up to 519 but i really i had to look at
05:17 - this so many times i was like okay wait
05:20 - this is in pounds so how many dollars is
05:22 - that then i remembered no no no
05:25 - the goal is to remove 30 million pounds
05:27 - from the oceans one dollar per pound is
05:31 - the magic math that's happening in here
05:34 - um it's a global campaign
05:36 - um
05:37 - to remove 30 million uh pounds of
05:40 - plastic and trash from ocean rivers and
05:41 - beaches team seas has partnered with the
05:44 - ocean conservatory and the ocean cleanup
05:47 - all donations to team seas will be split
05:49 - by the two charities 50 50. one dollar
05:52 - equals one pound of trash removed so
05:56 - every donation counts so team sees.org
05:59 - is live um um neon ichiro is asking is
06:02 - this a team tree a reference yes about
06:05 - one year ago there was a fundraising
06:07 - initiative to plant trees called team
06:09 - trees this is the follow-up to that
06:13 - and the campaign launches today 1 p.m
06:15 - pacific time and it will end on january
06:17 - 1st
06:18 - 20-20
06:20 - um
06:21 - so there's lots of team seas um videos
06:23 - going on i thought one thing i would
06:24 - just quickly show you um is um
06:27 - well you know as you know all my
06:29 - favorite youtubers are also on the
06:31 - nebula
06:32 - streaming service and there's a
06:34 - wonderful uh takeover right now of of
06:36 - the of the nebula page so if you're
06:39 - looking for other interesting
06:41 - educational entertaining
06:43 - uh
06:44 - enlightening uh videos to watch um take
06:47 - a look at all these the law of pirates
06:50 - from legal eagle the world needs you
06:52 - from ephos vox chords that sound like
06:54 - waves revenge of the ports
06:56 - uh look at all these uh excellent and
06:58 - amazing videos therapist reacts to jaws
07:01 - okay so um
07:04 - uh
07:05 - check out all this stuff uh links in the
07:07 - description to this video uh teamses.org
07:12 - etc etc i'm gonna open up the um like
07:15 - the chat over here so i can keep an eye
07:17 - on it
07:18 - um
07:19 - and yes as joseph says for one night and
07:23 - one night only or maybe now we're just
07:24 - gonna do this forever it is the coding
07:28 - boat
07:30 - there it is and i forgot i've like
07:31 - really worked really hard to kind of
07:34 - update all of my buttons and various
07:35 - animations things so if things i forgot
07:38 - to press the most important button when
07:39 - i said and welcome to the cutting train
07:41 - the coding boat uh
07:44 - team c's fundraiser
07:49 - isn't that cool like the logo it like
07:50 - went in front of me and now it's like
07:53 - animating animating teamses.org
07:57 - and here i am again ah boy that just you
07:59 - know
07:59 - makes me so happy okay now what am i
08:02 - going to do during today's live stream
08:05 - um i have been
08:08 - um
08:09 - my mic is hissing a bit thank you um
08:12 - yazreem if anyone can
08:14 - confirm that for me you know i swapped
08:17 - out this really old lav mic for this
08:20 - newer one
08:21 - and i think the old one was working
08:22 - better i also forgot to pull my sound
08:24 - blankets over here so it might be
08:26 - particularly echoey
08:28 - right now i'm going to just go move
08:29 - those
08:30 - just to improve the sound slightly i
08:32 - still got to put my sound foam
08:34 - on the ceiling
08:36 - but i'm just over here you can't see me
08:39 - moving some sound blankets um
08:43 - you know i have these like
08:45 - clothes racks on wheels and then i
08:47 - draped sound blankets over them thank
08:49 - you for the idea from legal eagle gave
08:52 - me this idea
08:54 - and
08:57 - um now i'm coming back
08:59 - over here
09:00 - uh
09:01 - and yeah so let me know about the mic
09:04 - i'm looking at the member discord chat
09:07 - over here if there's an issue with the
09:08 - mic let me know i will try to resolve it
09:11 - i can always
09:12 - switch to this um tabletop mic if i need
09:16 - to
09:16 - uh instead of the lav silver welcome
09:19 - silver says this is my first time
09:21 - watching coding train live
09:24 - uh it sounds like a chord issue ground
09:26 - feedback loop
09:28 - uh high pitched yeah you know so one
09:31 - oh why do i always have the technical
09:33 - difficulties why even on the team seas
09:36 - day
09:41 - i'm tempted just i think something i can
09:44 - do
09:45 - with these lav mics is change the
09:47 - channel like the the radio frequency
09:51 - that it's transmitting is that a thing
09:54 - i think that's a thing right but i'm
09:56 - gonna have to mute myself to do that
09:58 - um
09:59 - let's see well please please
10:02 - bear with me for just one
10:04 - moment
10:05 - um i'll give you a nice little like play
10:07 - of this logo again and i'll be right
10:09 - back and mute myself
10:13 - [Music]
10:20 - [Music]
10:38 - [Music]
10:43 - oh
10:45 - [Music]
11:05 - test one two what's the chance that that
11:07 - improved anything i changed what
11:10 - frequency i'm transmitting
11:12 - so the sound was fine okay
11:15 - uh let's see let's put the music down
11:18 - and get going so um if you've been
11:20 - paying attention recently
11:22 - to um my live streams first of all
11:25 - uh um thank you again to alethia and
11:28 - eliza from curiously minded on twitch
11:31 - who sent me on this journey because you
11:32 - know you know what i have lots of free
11:35 - time lots of extra spare cycles to learn
11:38 - new stuff i'm not busy at all with any
11:41 - of the regular day-to-day things that i
11:43 - really should be doing
11:45 - so i thought now would be a time to
11:47 - dabble in shaders i'm not teaching any
11:49 - classes on shaders it's not part of my
11:51 - uh
11:53 - required sets it's not part of any
11:55 - recent playlist that i really need to
11:56 - get and keep updating so i'm very good
11:59 - at procrastinating by uh getting
12:01 - distracted by things so uh luckily for
12:04 - you you're probably interested i'm
12:06 - gathering based on just sort of
12:07 - anecdotal feedback in shaders and so i
12:10 - want to continue that journey today i
12:12 - thought for the tmc's
12:14 - fundraiser i would like to program
12:17 - something
12:18 - uh related to water and the ocean in
12:21 - some way you might recall you might
12:23 - remember me from my coding challenge
12:25 - coding ripples coding train
12:29 - i want to find the page here for it
12:32 - this was coding challenge 102 with a
12:34 - much
12:35 - more youthful uh oh you're not seeing my
12:38 - screen i'm such a
12:39 - um
12:41 - so this was an old coding challenge from
12:43 - what was the date of this one i wonder
12:45 - it doesn't say here on this page we
12:46 - could click over to youtube um
12:48 - what i did for this was implement this
12:52 - very um
12:54 - sort of classic
12:56 - water ripple algorithm which is only
12:59 - found on the wayback machine of the
13:02 - internet archive
13:04 - because the website is totally
13:06 - non-existent anymore so i this has been
13:09 - like referred to probably
13:11 - so many times in um computer graphics
13:14 - and creative coding and pixel demos and
13:17 - animations so i did my own version of it
13:20 - if i were to click over to the p5.js
13:22 - version
13:23 - uh and run it
13:25 - you can see it run here now it's pretty
13:27 - slow
13:29 - frame rate wise it's working it's
13:31 - running
13:32 - but one of the things i always talk
13:35 - about is if you are working with pixel
13:39 - operations in the canvas
13:42 - i'm seeing that there's still a high
13:44 - pitch noise every now and then
13:46 - i have a like weird sort of idea
13:50 - that i'm just going to attempt
13:55 - i moved the receiver
13:59 - i'm sure i could also put it in input
14:01 - two oh i gotta stop i gotta it's fine
14:04 - you're all managing i'm gonna manage uh
14:06 - all right well tell me if it's gotten
14:08 - better um what was i talking about uh
14:10 - yes i always
14:12 - i'm always here
14:14 - on the coding train doing some kind of
14:16 - like let me do this algorithm where i
14:19 - set every pixel one at a time to a
14:21 - particular color
14:22 - to
14:23 - demonstrate a particular
14:26 - visual effect
14:28 - and i might do it in processing in java
14:29 - and it's like oh look at it go look at
14:31 - it go it's super fast um i would expect
14:34 - here just to make this point if i'm um
14:36 - if i do download code for the processing
14:39 - sketch
14:40 - um and let's see how long it takes me to
14:42 - pull this up
14:46 - uh
14:47 - let's see what if this opens i hope this
14:49 - opens in processing four it may not by
14:51 - default no it's not but that's okay
14:53 - we'll survive so far so good yeah cat
14:56 - king is
14:57 - the only here's the only downside to the
14:59 - team c's fundraiser it's kind of taking
15:01 - i guess i could have somehow dressed up
15:03 - as a pirate because it's also halloween
15:05 - or something but i i kind of had thought
15:07 - maybe i'd do something for halloween but
15:09 - i think this is my uh
15:11 - this is my stream for the week so team
15:13 - c's so if we look at this look at that
15:15 - speed
15:17 - look at the speed of these water ripples
15:19 - now this isn't making use of any kind of
15:21 - hardware acceleration or shaders
15:24 - this is just the fact that
15:26 - java running you know is a kind of you
15:30 - know even though java is was often
15:31 - thought of to be kind of slow compared
15:33 - to something like c plus plus uh still
15:36 - having that kind of native access to the
15:38 - operating system's
15:40 - graphics engine through java closer to
15:42 - native access we just have a lot more
15:44 - power and speed with doing pixel by
15:46 - pixel based operations
15:49 - so um
15:51 - and i'm seeing in the chat that maybe
15:52 - moving the receiver fixed the issue i do
15:54 - think that if it's too close to the
15:56 - focusrite device that i have it does
15:58 - cause an issue and if i'm quiet i'm
16:00 - going to make myself a little bit louder
16:01 - here
16:03 - so
16:04 - canvas is just
16:07 - incredibly slow javascript canvas to
16:09 - iterate over and set every pixel this is
16:12 - slow and i always in a video i'll just
16:15 - casually say but you could probably use
16:18 - a shader with webgl
16:20 - run the same algorithm and have it super
16:21 - fast and then i then i move along
16:25 - but i don't know how to do that or i
16:26 - pretend that i know how to do that but
16:27 - i'm not going to do it now who knows
16:29 - what i do today
16:31 - is the day
16:33 - pick up my train whistle for this to
16:34 - gesture where i
16:36 - put my
16:39 - donated money to team c's where my mouth
16:42 - is no i don't know what i don't know
16:43 - what the expression i should say is but
16:45 - i'm gonna i'm gonna really just dive in
16:47 - there into the muck in with shaders and
16:50 - see if i can port this particular
16:52 - example
16:53 - staying with p5.js but loading a webgl
16:56 - shader and see what kind of performance
16:58 - improvement i can get we'll see where
17:00 - that leads i'm going to be here until
17:02 - about 6 p.m eastern time which is now an
17:04 - hour and 10 minutes from now
17:06 - um and
17:09 - let's see how this goes about shaders
17:10 - when i uh someday uh you know part of
17:13 - why i'm doing this is i hope to in the
17:15 - new year do uh kind of proper set of
17:18 - recorded edited step-by-step shader
17:20 - tutorials i'm sure i will be drawing
17:22 - heavy inspiration from the book of
17:24 - shaders for that um i also you know
17:27 - should shout out uh curiously minded the
17:30 - twitch stream which is on saturdays
17:32 - let's take a look at uh what's coming up
17:35 - next
17:35 - it's still me you have to travel back in
17:38 - time but i think you can see the replay
17:40 - on their stream but there is there is
17:42 - there is coming a new guest in a new uh
17:45 - stream for their next one but um eliza
17:47 - and alethia who run this twitch channel
17:49 - introduced me for the first time to
17:51 - shaders and i just can't stop now
17:54 - so thank you to eliza and alethia and
17:56 - then
17:58 - more important the most sort of like
17:59 - important reference that i'm going to
18:01 - pull from today
18:02 - is this
18:03 - um
18:05 - set of tutorials from uh louise and
18:07 - casey uh rhys alumni of the itp program
18:10 - at nyu who did this research project to
18:13 - develop a whole set of tutorials around
18:15 - p5.js shaders and there is an example in
18:18 - here this one image effects
18:21 - and i believe
18:22 - and i'm going to hit allow to allow to
18:24 - use my camera
18:27 - i believe
18:29 - that this
18:30 - example
18:32 - this effect of taking an image from the
18:35 - webcam and passing it as a texture to a
18:38 - shader and then operating on that
18:40 - texture in the shader to redraw it back
18:43 - and make it incredibly fast because of
18:45 - the sort of parallel nature of
18:47 - processing all the pixels on a gpu
18:50 - accelerated shader i just want to throw
18:52 - as many technical
18:55 - glsl acronym shadery language things out
18:58 - there as i can but i believe that this
19:00 - is the key to unlocking the water ripple
19:04 - sketch so i did a little bit i took like
19:06 - one or two little steps earlier today to
19:08 - sort of see if this might be the right
19:10 - direction but i'm just like to be
19:13 - perfectly
19:14 - frank
19:15 - although my name is dan
19:17 - um i have not done this and i don't know
19:18 - shaders at all so this is going to be me
19:20 - stumbling through possibly failing and
19:23 - getting nowhere
19:24 - and looking quite inept at this um so
19:28 - just all let's just let's just get that
19:30 - out there we're all on the same page
19:32 - you've chosen to be here you can leave
19:34 - at any time if you leave you know maybe
19:36 - consider taking a look at teamcs.org
19:38 - normally i would just say don't worry
19:40 - about watching me just go
19:42 - but i would like to encourage people to
19:45 - participate in this
19:47 - positive initiative to clean up the
19:48 - oceans all right
19:50 - so
19:51 - let's discuss
19:53 - a little bit about
19:55 - p5.js and shaders so i'm going to go to
20:01 - the i'm going to let's leave this open
20:03 - because i'm going to definitely need to
20:04 - refer to this code
20:06 - i'm going to open up a new tab
20:09 - oh my god a watch talks to me every once
20:11 - in a while and it absolutely terrifies
20:14 - me
20:15 - it just like starts talking sorry i'm
20:17 - like no
20:18 - jump out of my skin
20:20 - okay
20:21 - um
20:22 - so
20:24 - now with a p5 jet with shaders typically
20:27 - what i'm doing
20:28 - is i am doing all of my drawing
20:32 - here in setup or draw set up i'm
20:35 - starting the sketch i make this 400 by
20:37 - 400 canvas draw i draw a background
20:41 - if i wanted to make that background red
20:45 - i might set a color an rgb color to
20:48 - 25500
20:50 - and then i might draw a rectangle
20:56 - that fills the window i'm going to put
20:58 - on auto refresh so that it as i type it
21:00 - updates the code but i'm going to have
21:02 - to run it again
21:04 - we're going to call this
21:05 - shaders
21:07 - team trees oh c's sorry
21:14 - and uh
21:17 - so now i've got a red rectangle
21:19 - where was i going with this yeah now i
21:22 - recall
21:23 - so this rectangle is geometry
21:26 - essentially and in order to color it red
21:29 - i've used the fill function
21:31 - now
21:32 - this is a very convenient way and quite
21:34 - fast way to fill all the pixels of this
21:37 - particular piece of geometry but if i
21:40 - wanted to go lower level if i wanted to
21:43 - go deep into want to get on my scuba
21:45 - gear and go deep inside the engines of
21:48 - the computer
21:49 - under the water
21:51 - how far can i take this um
21:54 - i could operate a shader to work on
21:59 - every single one of those pixels and the
22:01 - big difference is
22:03 - even though we're not sort of seeing
22:05 - this in the code
22:07 - a computer algorithm a program being an
22:11 - algorithm being executed in javascript
22:14 - to operate on every pixel
22:16 - in a canvas is going to operate on every
22:19 - pixel one at a time we're going to
22:21 - operate on one go to the next one it can
22:23 - do that pretty fast
22:25 - but
22:26 - a shader which is operating on the
22:28 - pixels making use of the graphics
22:30 - hardware
22:32 - the gpu the memory the processing power
22:35 - of the gpu allows the pixels to be
22:38 - operated in parallel
22:40 - so instead of
22:41 - me painting every pixel one at a time i
22:44 - have a giant sort of like blaster that i
22:46 - can shoot a color at every pixel all at
22:49 - once
22:50 - that's the metaphor that i've kind of
22:52 - stuck in my head that eliza
22:54 - said to me in very different words and i
22:57 - i'm sticking with it so you know i'm
22:58 - definitely looking for those of you have
23:00 - experience with shaders to kind of help
23:02 - me oh yeah the meta balls challenge in
23:04 - shader says lori that is an excellent
23:06 - suggestion i mean if we could get this
23:08 - going today we could get them all going
23:10 - the meta balls one would actually be
23:11 - easier i should have but that's not very
23:14 - ocean is it kind of ocean wavy maybe i
23:16 - should do that one anyway
23:18 - uh i would love to i would love to like
23:19 - do all of them all of them i'm obsessed
23:22 - it's my thing now
23:23 - by the way my daughter who's 10 was like
23:25 - but isn't it like shading something and
23:28 - i was trying to understand like why is
23:29 - it called a shader like is it like
23:31 - you're in the shade like trying to
23:32 - understand that word shader because we
23:34 - were talking about shaders in
23:35 - relationship to minecraft and how you
23:37 - can have a shader
23:38 - kind of texture a block
23:40 - like there's a shader you can get in
23:42 - minecraft that makes the water very
23:43 - realistic water i should be doing that
23:46 - i'm not that far along in my shader
23:48 - journey yet but um so i'm really looking
23:50 - for your feedback and thoughts about how
23:52 - i am explaining and thinking about
23:54 - shaders because this is essentially
23:56 - practice and rehearsal for me to
23:57 - eventually make um sort of recorded set
23:59 - of tutorials that you could follow uh
24:01 - more quickly than my rambling
24:04 - streams which have you know maybe
24:07 - maybe you enjoy those more than the
24:09 - tutorials who knows
24:13 - okay
24:14 - um
24:15 - right
24:17 - in parallel so how do we do that well in
24:19 - order to work with
24:21 - shaders in p5.js i need to add different
24:25 - files to uh
24:27 - write the code for my shader now here's
24:29 - the thing
24:30 - in theory
24:31 - learning to code a shader is um kind of
24:35 - a language agnostic in the sense that
24:38 - the shader code is its own sort of
24:40 - syntax and set of functionality that you
24:43 - could then bring into any any
24:45 - environment whether it's processing
24:47 - whether it's c plus plus an opengl you
24:49 - could use 3js and you could put a shader
24:51 - in 3ds i'm just doing it in p5 because
24:53 - p5 is you know the sort of primary
24:56 - javascript library that i use on the
24:58 - channel it's one that i it's a community
25:00 - and uh initiative that i care deeply
25:02 - about um but and so but i would
25:05 - encourage you to think about could you
25:07 - take this shader and use it in whatever
25:09 - environment you're working with
25:10 - um and you most likely wouldn't have to
25:12 - change the code there i was learning
25:14 - today that if you write shaders on a
25:15 - site like shader toy they've adjusted
25:18 - certain things so you have hooks into
25:19 - different kind of features and
25:21 - functionality maybe the syntaxes or
25:22 - names of things are slightly different
25:24 - but overall the concept of a shader is
25:26 - across
25:28 - languages and environments but
25:31 - uh wherever you are you will need both a
25:33 - vertex shader we're going to call this
25:36 - ripples
25:38 - dot vert i think would be a good name
25:40 - for it
25:41 - and you need also
25:43 - a can you hear the little ding ding ding
25:45 - ding that's gloria just going back and
25:47 - forth today i have the garage door down
25:48 - so gloria can roam free inside the
25:50 - garage
25:51 - i do still need that dog cam then we
25:52 - need a fragment shader so i'm gonna say
25:55 - ripples.frag
25:58 - so what are if the idea of the shader is
26:01 - it's this giant blaster that's going to
26:04 - send a pixel operator on every pixel
26:07 - all at once in parallel
26:09 - the fragment shader is where that really
26:11 - happens the fragment shader is working
26:14 - on colors for every single pixel the
26:17 - vertex shader is manipulating the
26:19 - geometry where those pixels live and so
26:22 - in this case um if i'm you know i'm
26:25 - redoing what i did on my last stream my
26:27 - last live stream was getting me kind of
26:29 - warmed up here in this case instead of
26:32 - fill i want the shader to apply the red
26:35 - color to this particular rectangle so i
26:38 - will need to have a is it
26:41 - p shader no no i don't know there's no
26:43 - data typing javascript i'm so confused
26:46 - gonna have and i don't i don't i believe
26:48 - i don't want to use the variable name
26:50 - shader because i think the function name
26:52 - in p5 is shader so we'll call it um
26:56 - uh the shader is used in the p5 examples
26:59 - maybe i'll just call it ripple shader or
27:02 - i might call this like text no no let's
27:04 - just call it ripple shader yeah ripple
27:06 - shader
27:07 - and ripple
27:10 - oh and i will load it there's obviously
27:12 - you could load the shader asynchronously
27:14 - or in various different ways but the
27:15 - most convenient way in p5 is to say
27:18 - ripple shader equals load shader and
27:21 - then pass in as arguments to this
27:23 - function
27:24 - the first the vertex shader file
27:28 - actually i have no idea which one's
27:29 - first i'm just guessing and then the
27:32 - fragment shader file
27:34 - okay so we're everything's still working
27:36 - but of course it's just the fill let's
27:38 - take out the fill
27:40 - so we're waiting now to see this
27:42 - rectangle appear red i've got to get to
27:45 - that stage
27:46 - um and then
27:49 - i believe if i just say shader
27:52 - ripple shader
27:55 - just like the fill
27:57 - is being applied to this geometry now
28:00 - the there's a fly buzzing around me if
28:03 - anyone can like freeze frame the coding
28:05 - train and find the fly hopefully it's
28:07 - not gonna like land on my head in a very
28:09 - awkward and uncomfortable way
28:11 - um
28:14 - shader needs to be compiled and is
28:16 - language specific just not associated
28:17 - with what happens on the cpu side yeah
28:19 - that's a better way of putting it says
28:21 - gustavo
28:22 - thank you for that correction it is like
28:24 - c
28:26 - c c code basically the shader is is a
28:29 - language that you're writing i just
28:30 - meant you can apply a shader in
28:32 - different environments if that makes
28:33 - sense
28:34 - um oh right and i'm going with the glsl
28:37 - language ah
28:39 - okay
28:40 - yeah do i um so there's lots of great
28:43 - questions in the chat like do you always
28:45 - need a vertex and a fragment shader or
28:47 - can you just use a frag
28:49 - i think you always need both but in this
28:51 - case my vertex shader is going to
28:54 - be just like boilerplate sort of blank
28:56 - code that does nothing
28:58 - and i don't know it off the top of my
29:00 - head so i am just going to constantly be
29:03 - referring to
29:05 - um
29:06 - where am i going this particular example
29:09 - so let's look for the vertex shader
29:11 - first
29:12 - but actually i'm going to skip this
29:14 - texture thing
29:15 - um and so
29:17 - one the first thing we need for the
29:19 - vertex shader
29:21 - is to um
29:23 - whoops
29:27 - add an attribute
29:30 - so uh this is now specific to p5
29:34 - um p5 has pre-loaded or pre-loaded wrong
29:37 - word but like preset a particular
29:40 - attribute called a position
29:43 - which i would love to like read the
29:45 - explanation on this
29:47 - um let's see getting started let's look
29:50 - at this page a position
29:52 - like where will i find this what are
29:54 - shaders setting up shaders in p5 a
29:55 - position
29:57 - assuming
29:59 - it's got b5 just code
30:02 - a position well somewhere it's got a
30:04 - like how to write a shader
30:06 - a position there we go
30:09 - for shaders and p5 we must make sure one
30:12 - thing is always done in the dot vert
30:15 - files in the vertex file the pixel must
30:17 - be told where on the canvas it belongs
30:20 - this attribute is called vect3a position
30:22 - you cannot change its name and the
30:24 - attribute is read only meaning you
30:25 - cannot overwrite it attributes usually
30:27 - is named in with a as in prefix a
30:30 - something okay so this is also the case
30:32 - i remember in eliza and alethia's shader
30:34 - that they were teaching me with 3js that
30:37 - there needs to be this attribute
30:38 - position so that the shader knows what
30:41 - pixel like where that pixel is but they
30:44 - actually set that position attribute in
30:46 - their 3gs code so presumably there's
30:49 - some way for me to do it in my p5.js
30:51 - code but since this is required always
30:53 - forever
30:55 - this is like sort of pre-done for me um
30:58 - in
30:59 - um
31:00 - in p5 itself so i could just create the
31:03 - attribute and by the way let's follow
31:04 - this tutorial the other thing that's
31:06 - important is to um kind of have this
31:09 - definition here of what kind of numbers
31:12 - i'm using what kind of precision i
31:14 - require so float a floating point number
31:17 - is like everything to a shader basically
31:20 - and lower position precision is faster
31:23 - rendering but the cost of quality so we
31:25 - could try a high precision float or but
31:27 - let's go with a medium precision float
31:31 - so whoops i'm going to also put that
31:33 - into my
31:34 - shader code so this is just defining i
31:37 - think this goes in both
31:40 - the vertex and the fragment shader i
31:41 - imagine you've got to specify that in
31:43 - both places i don't actually know what
31:45 - would make sense i don't know what the
31:47 - error i'm getting here is like what have
31:49 - i i assume it's just i haven't finished
31:52 - oh haha this is a so i forgot kind of an
31:55 - incredibly important detail which is
31:57 - that i can only
32:00 - i
32:01 - you know i don't like to be trolled by
32:03 - the chat and i uh you know i i i'm very
32:06 - like uh people asking me to say their
32:08 - name or give them a shout out makes me
32:09 - feel very awkward and comfortable but
32:11 - there is a chat message saying they'll
32:12 - donate a thousand dollars if i say the
32:14 - name p5 warlord or sarcar so anyway
32:17 - we'll see if that happens um
32:21 - uh okay so but a shader
32:24 - is only supported in webgl mode so of
32:26 - course i've completely forgotten that a
32:28 - very critical thing i need to do is tell
32:31 - the canvas to be a webgl canvas so that
32:34 - the shader can be applied
32:36 - uh and i think now there's another error
32:39 - which is i'm missing
32:42 - i probably just haven't like put all the
32:44 - stuff oh i didn't load the shader no i
32:46 - did did i do it in the wrong order well
32:48 - we'll figure it out i assume i assume
32:50 - like eventually
32:51 - uh don't not telling my name says don't
32:54 - go with mid-p there's no reason these
32:56 - days okay i believe you
32:59 - okay i believe you
33:03 - i'm going to choose to just believe the
33:04 - chat
33:05 - and let's go back and do what was it
33:07 - high p
33:09 - yeah i'm a high p
33:11 - i'm a very high p kind of guy
33:14 - whatever that means
33:15 - i am no medium precision fellow
33:18 - no
33:19 - i am high precision all right uh all
33:22 - right let's keep going through this
33:23 - tutorial
33:25 - uh
33:26 - more bugs
33:28 - uh yeah all right so shader vert yeah
33:31 - yeah yeah where am i is this the right
33:33 - place is this where i was looking i
33:34 - don't even remember
33:36 - um
33:39 - yes okay
33:40 - um now
33:43 - right so i remember this from before
33:46 - so now we need to scale the a the
33:49 - attribute position before it can be
33:51 - passed to the frac the fragment shader
33:54 - um
33:55 - and uh here we're going to need to know
33:57 - about vector math so if i recall this
34:00 - correctly which i'm sure i don't
34:04 - i think i always need a main function is
34:06 - that right
34:07 - i want to create my own vec3
34:10 - called
34:12 - uh
34:13 - position i'll just call it position
34:15 - and i want to take the a position
34:19 - this cannot possibly be right
34:22 - i should just read the tutorial it's
34:24 - like i don't have this like loaded into
34:26 - my brain yet i've done this like this
34:28 - like the third time in my entire life
34:30 - i've ever done this
34:32 - so um let's just keep going though um
34:36 - let's look at this yeah position vect4
34:39 - okay so that's what i let's follow the
34:40 - naming convention of this tutorial i
34:42 - find that and it should be four
34:45 - position
34:46 - vect4
34:48 - no no
34:49 - yeah position vec4
34:52 - equals
34:54 - uh position vector oh so what i what is
34:57 - what's happening here
34:59 - this is
35:01 - so i need to get the position
35:04 - from
35:05 - a position do i just do this
35:09 - position
35:10 - vec 4 equals a position which is a vec3
35:15 - so i would say like vec4
35:18 - a position and then just add like a
35:20 - fourth dimension and add the number one
35:24 - i'm sure that's right
35:25 - now i'm now i'm remembering something
35:27 - here there's something going on and uh
35:29 - let's see if let's see how the
35:30 - whiteboard is going today where
35:34 - the shader itself
35:38 - the geometry of the shader is such that
35:41 - the center is zero zero
35:44 - and
35:45 - the left edge is negative one and the
35:48 - right edge is positive one same thing
35:50 - from horizontal to vertical and i
35:52 - believe the y axis points up which is
35:54 - another difference then in a sort of
35:55 - standard p5 canvas the y axis pointing
35:57 - down
35:59 - so if
36:00 - this
36:02 - a position
36:05 - is a value between 0 and 1 if that's
36:09 - what p5 is giving us oh and i'm not i've
36:12 - come back yet if that's what p5 is
36:15 - giving us
36:16 - then i would like to
36:19 - multiply it by 2.
36:26 - i need to declare it make this position
36:29 - for vector from a position
36:32 - multiply by two and subtract one and of
36:36 - course
36:37 - i always need the
36:46 - all right so i believe this is now me
36:49 - setting the position
36:51 - for the fragment shader to operate on
36:54 - and set a color
36:55 - i don't know if i've got this right okay
36:58 - i think that might be all i need to do
37:00 - oh look at this oh now i need to put
37:02 - that into gl position because the
37:05 - fragment shader is going to pick up the
37:07 - gl position the vertex shader requires
37:10 - there to be a vec4 output called gl
37:12 - position so what i'm doing in the vertex
37:14 - shader aha
37:16 - the vertex shader could manipulate the
37:18 - geometry so it can move all the vertices
37:21 - around
37:23 - but instead i'm just taking the literal
37:26 - p5 position and putting it in the gl
37:28 - position so that i can set the color in
37:31 - the fragment shader is that right i
37:32 - think that sounds about
37:34 - right so let's put this in here and i
37:38 - think now
37:39 - i have a finished vertex shader so this
37:42 - is kind of like your standard
37:44 - boilerplate um in line eight i need a
37:47 - decimal on that float ah yes
37:53 - [Music]
37:55 - okay i'm still getting errors which i'm
37:57 - really wondering why
37:59 - um okay gl position is pre-defined but i
38:03 - need to
38:05 - gl position with vect4 is the way to
38:07 - output a vertex to the rasterizer so the
38:09 - fragment shader is like the rasterizer
38:11 - it's rasterizing my vertex
38:15 - are your vertexes rasterized if not call
38:17 - one eight hundred we rasterize for you
38:22 - maybe that's a 1 900 number
38:24 - no that's weird okay
38:27 - cancel that thought um
38:29 - so now i believe i am ready to move on
38:34 - to the fragment shader
38:37 - now i want to i'm a high
38:40 - i'm a high precision fellow we've
38:42 - established that so let's have that i
38:44 - need a main function
38:48 - couldn't i get no error why am i still
38:50 - getting an error
38:52 - an error compiling the vertex shader
38:54 - nine okay dimension mix mismatch
38:59 - oh
39:00 - no
39:03 - ah this has to be position vect4 sorry
39:07 - there we go have you probably been
39:09 - saying this in the chat
39:11 - so many times missing a dot x y in the
39:14 - second line oh because i only want to do
39:16 - this for the x and the y
39:18 - that would make sense
39:20 - so um
39:21 - that seems to make sense so i only i
39:24 - want i'm only manipulating this
39:27 - uh scale change and it's kind of
39:30 - ridiculous to walk all the way over here
39:31 - just for this and how's the lighting by
39:33 - the way on the whiteboard
39:35 - better same good whatever i'm only doing
39:37 - the scale change for the x and y
39:40 - uh uh dimensions all right
39:44 - now
39:48 - your audio is capturing your computer
39:49 - audio too oh it plays two times on top
39:52 - [Music]
39:54 - it certainly does
39:55 - it certainly does
39:59 - i'll fix that sorry about that
40:01 - okay i've got a i'm still my open
40:03 - broadcast studio and audio routing set
40:05 - up everything is still a little bit in
40:07 - flux here please bear with me all right
40:09 - fragment shader
40:11 - so now i have my fragment shader and i
40:14 - believe
40:15 - if i were just to do something like gl
40:17 - frag gl underscore
40:20 - frag color
40:21 - so what it is
40:22 - is a vec
40:24 - three
40:28 - oh it's a vec4 because we need alpha
40:32 - what's the chance
40:35 - no
40:36 - what did i miss
40:39 - undeclared identifier maybe it's like gl
40:41 - frag color ah yeah there we go
40:43 - look at that i remembered something i
40:46 - remembered how shaders worked so now
40:49 - here i am
40:51 - setting every color
40:53 - according to
40:56 - its
40:56 - uh just setting it to red so this is the
40:58 - same this is what we half an hour later
41:02 - i've replaced fill
41:04 - with my own shader so my own shader sort
41:07 - of sets up the geometry in the vertex
41:10 - shader and then sets the color and
41:12 - remember there's no for loop here
41:14 - because this code is executing on every
41:17 - single
41:18 - pixel all at once in parallel
41:24 - all right now
41:27 - i want to be able to set
41:30 - every color
41:33 - differently based on where it is
41:36 - so i think now it's time for me to
41:38 - create a uv vector
41:41 - which is a sort of normalized version of
41:44 - the gl coordinate thing
41:49 - as far as i've got i'm gonna have to i'm
41:51 - gonna have to look this up all right
41:52 - let's keep going back to the tutorial
41:54 - um right so we can make a color
41:57 - i can set the frag color oh right and
41:59 - it's it's uh that kind of makes sense
42:01 - for me to sort of think of the way i'm
42:03 - doing this as to always have a vec3
42:06 - called color
42:09 - and there is where you know let's make
42:11 - it blue because this is team c's after
42:14 - all
42:15 - and then i can and it should be vect3
42:18 - and then i can when i go to create the
42:20 - color i can just add the alpha dimension
42:23 - across
42:24 - okay
42:25 - yes
42:26 - so that's next step thank you again i
42:29 - can't i cannot tell you how useful this
42:31 - tutorial is everyone should just in
42:33 - addition to like donating to team c's
42:35 - should send some good thank you vibes to
42:38 - louise and casey who created this
42:40 - wonderful uh tutorial all right so now
42:43 - yeah that's i've got that one color fill
42:45 - i'm following this along
42:47 - now
42:49 - um
42:51 - if i want to
42:53 - do a gradient shader that's kind of
42:55 - um
42:56 - texture coordinates
42:58 - maybe that's what i want here
43:01 - no i do want texture coordinates but not
43:02 - yet let's do basic gradient
43:05 - so position on a canvas is defined as a
43:08 - floating point number between 0 and 1.
43:11 - so that's very important where does that
43:13 - come from oh that comes from somewhere
43:14 - else okay so what i need
43:19 - now in the fragment shader is ah yes
43:24 - i know i remember
43:26 - ah uniforms so what's very important
43:29 - here is that the
43:32 - resolution of this canvas being 400
43:34 - 4x400 is something that the shader now
43:37 - needs to know about because it needs to
43:39 - map
43:40 - all of the pixels it's operating on onto
43:43 - this particular piece of geometry
43:46 - so to do that
43:48 - i need to have something called a
43:51 - uniform
43:52 - a uniform is a kind of variable that you
43:55 - can set from your external code system
43:59 - that you can sort of pass into the
44:01 - shader so the shader's not able to pick
44:03 - up the canvas width automatically
44:05 - instead it's up to me from my p5 code to
44:07 - tell the canvas what i'm going to also
44:09 - do with this
44:10 - at some point during this is give it the
44:11 - mouse coordinates
44:13 - so to do that i need to both add a
44:17 - uniform
44:18 - i think i just do this uniform
44:21 - do i say like vect2
44:23 - u and i think the convention is to do
44:25 - like u
44:26 - underscore resolution
44:28 - so i think if i create a uniform
44:31 - variable
44:32 - called u resolution
44:34 - then in p5 whoops
44:36 - i can say
44:39 - go back to sketch.js
44:41 - let's move this over here
44:43 - i can say
44:45 - um
44:50 - this fly is really getting on me
44:56 - you know next year might be like team
44:58 - save the insects i mean we should
44:59 - probably save the bees don't we need to
45:00 - save the bees i think so
45:02 - team b's i mean team trees team c's i'm
45:05 - calling it now
45:07 - mr beast and mark
45:09 - miss team bees
45:13 - um
45:15 - uh okay uh
45:17 - i've already forgot what i'm doing yes
45:19 - so now uh ripple shader
45:23 - set uniform i don't know
45:26 - uh width
45:28 - height
45:30 - i don't know if this is right
45:33 - it's not giving me an error but i'm
45:35 - pretty sure
45:37 - that this is now
45:39 - oh some people use uv and some people
45:40 - use st says nicole is here shader expert
45:44 - who i hear also does wonderful uh twitch
45:46 - streams about shaders uh nicole vela in
45:48 - the chat um what does st stand for i
45:51 - know uv
45:52 - is came out of kind of running out of
45:54 - xyz and i think it's if you go through
45:56 - the alphabet uv are kind of over there i
45:58 - think that's the origins of uv i don't
46:00 - know but what is s t
46:03 - uh
46:04 - s a b c d f g h i j k l n p q r s t s t
46:08 - u v ah it's just they're all those
46:09 - letters at the end of the alphabet
46:11 - um
46:13 - so
46:14 - i need to set the id right so i'm sure i
46:17 - need to give it
46:19 - like its name
46:20 - probably u resolution and then give it
46:23 - the values and i'm kind of putting some
46:25 - extra
46:26 - line breaks here
46:28 - oh oh um
46:30 - p5 is uh reformatting it to like it's
46:33 - fine i can i can i can manage this
46:36 - so i think it's something like this
46:38 - i mean i can obviously just refer to
46:40 - the tutorial yep look this looks right
46:44 - and then i have u resolution so now
46:48 - in the main function and they're using
46:50 - st here
46:52 - right the idea is take that x y
46:57 - which is now the newly mapped frag
47:00 - coordinate between negative one and one
47:03 - and divide it by the width and height
47:06 - that's to get
47:08 - the position of the pixel
47:10 - uh
47:11 - uh is a standard convention when writing
47:12 - shares to call this variable st
47:15 - yeah
47:16 - i still don't really like fully
47:17 - understand like what the values are that
47:20 - i'm normalizing here and why i'm
47:21 - normalizing it by like width and height
47:23 - because is it already between negative
47:25 - one and one and so why divide but anyway
47:27 - i mean it seems like it would be the
47:28 - other way around to scale it back up not
47:30 - really sure i have to think about this
47:32 - do some more reading
47:34 - um
47:36 - but i think the idea here now is that
47:40 - if i were to say
47:42 - vek
47:45 - three is is is gl frag position a vec3
47:49 - or a vec4 i've already forgotten
47:52 - it is
47:54 - oh but i just want a vec2
47:56 - ah and i can get the xy and the xy got
47:59 - it so i want to get an x y but that's
48:01 - the wrong that's definitely the wrong
48:02 - thing to call it i don't know why i feel
48:04 - like using uv
48:05 - uv is more comfortable important fix on
48:07 - the whiteboard the screen space is from
48:09 - zero to one not negative one to one oh
48:11 - that's why i'm multiplying it by two and
48:13 - subtracting one
48:15 - because it's from negative point five to
48:17 - five point five
48:22 - and adding one i'm so confused
48:27 - all right so there's a bunch of
48:28 - different screen spaces at play here
48:30 - maybe you can all help me this and
48:31 - unfortunately when i come over here i
48:33 - can't read the chat but i'll come back
48:36 - to it
48:37 - okay
48:40 - so i know there's my p5
48:44 - p5
48:46 - is between 0 and 400.
48:50 - the shader itself i thought
48:54 - the uv coordinates i want
48:57 - the for the gl frag coordinate
49:02 - these are between zero and one isn't
49:05 - that right
49:08 - so what's this middle step
49:11 - where i'm getting somehow a position
49:16 - and what did i do to it i multiplied it
49:18 - by 2 and i subtracted 1.
49:21 - so if i had a range
49:24 - between
49:26 - 0 and 1
49:29 - multiplying it by 2 would make it
49:30 - between 0 and 2 subtracting 1 would make
49:32 - it between negative 1 and 1. so that's
49:34 - where i got that number is it because
49:36 - the shader itself is actually between
49:38 - negative 1 and 1 and this
49:41 - what i'm getting from p5 is between zero
49:44 - and one so do that operation to it in
49:46 - order to make the uv work like this is
49:49 - this correct i mean i didn't really put
49:50 - anything here i thought i might need a
49:52 - sort of separate interim step here but
49:54 - this is what i'm doing in the vert vert
49:56 - shader
49:58 - like i'm taking a position which is
50:01 - between zero and one
50:04 - uh like sort of
50:06 - and then when i'm over here
50:08 - i wanna why do i divide it by 400 by 400
50:13 - if it's already between negative one and
50:14 - one that's where i'm a little lost like
50:17 - if gl frag is somehow mapped to this
50:20 - why does uv shouldn't i be scaling it up
50:22 - and like again
50:25 - undoing what i just did i'm gonna go
50:26 - look at the chat
50:30 - all right i see nicole writing a very
50:32 - important uh and the whiteboard is
50:34 - actually looking pretty good today
50:36 - um nicole says when you color your
50:38 - shader using its uv st coordinates you
50:40 - will quickly see how the coordinates
50:41 - work when you color shader by its uv
50:43 - location bottom left is black top right
50:45 - is white
50:46 - no what you get from p5 is from between
50:49 - zero and width shader is only between
50:50 - zero and one gl position is a 4d
50:53 - coordinate space all components would be
50:54 - negative one and one okay i'm kind of
50:56 - gathering so i'm going to say uv
50:59 - equals
51:00 - gl
51:01 - frag
51:03 - coordinate dot x y
51:05 - divided by u resolution dot x y right
51:10 - and then
51:11 - what we're doing here is to sort of
51:14 - understand this
51:16 - is if i were to say give me some red
51:18 - according to its x value oh u v x
51:24 - no
51:25 - um
51:27 - because
51:31 - the value is not
51:35 - divided by like why is this not a
51:37 - gradient
51:39 - like why is this not
51:47 - all right let's look at what's happening
51:49 - here
52:00 - x y use resolution x y
52:09 - this probably isn't right right
52:11 - no gl frag coordinate
52:27 - hmm
52:32 - uv11
52:36 - you have the blue
52:39 - am i just like i'm missing like
52:40 - something really obvious here right
52:46 - uh
53:01 - that doesn't
53:02 - i want it like
53:06 - oh
53:08 - right i only need three
53:11 - sorry i realize now what i want
53:17 - right it's all white
53:33 - just bear with me i'm trying to
53:35 - understand this
53:37 - i guess the set uniform isn't right yeah
53:39 - the set uniform must be wrong let's go
53:42 - let's go back
53:44 - we should look at what the uh what the
53:46 - actual p5 code is
53:52 - u resolution with height oh do i need to
53:54 - do this in draw
53:57 - you'd think i'd only need to um
54:00 - do it once
54:02 - but i wonder if
54:06 - um
54:15 - oh
54:17 - i guess they have to set the uniform
54:18 - continuously
54:21 - interesting why did it not work in setup
54:23 - to set the uniform just once
54:27 - um and i don't need this
54:31 - yeah yes okay
54:35 - so i was doing it right all along
54:44 - so now is this precisely the middle
54:48 - it's not exactly
54:50 - so why so one thing i think that is kind
54:52 - of off here that i probably need to
54:54 - address is i might need to say pixel
54:56 - density one
54:58 - just to be sure i know what's going on
54:59 - here yeah
55:04 - okay
55:05 - so now how to understand this
55:08 - i want to understand this mapping more
55:10 - precisely
55:12 - so let's do uv.x
55:16 - 0
55:18 - 0.
55:24 - yeah this looks right
55:26 - that now the mapping is perfectly so
55:29 - this
55:30 - must somehow be a value between zero and
55:34 - one so if gl frag
55:36 - coordinates is a range between negative
55:38 - one and one
55:40 - how does dividing by u resolution dot x
55:42 - y
55:43 - make this somehow map to zero to one
55:46 - that's what i don't 0 0 is the bottom
55:49 - left that makes sense yeah
55:51 - so if we did this to
55:54 - if i took the y value right 0 is at the
55:58 - bottom 0 0 is the bottom left yeah that
56:02 - makes sense
56:06 - you do have to pass uniforms with each
56:08 - frame that's interesting to note
56:10 - um
56:16 - okay
56:18 - all right so i'm gonna come back to try
56:19 - to understand the scaling stuff more
56:21 - deeply um um but i'm gonna move on from
56:24 - that right now because it's 5 30 already
56:28 - just like where i was
56:31 - like on monday's stream like and i'm
56:33 - redoing exactly what i did before
56:35 - because i've got to do this you know
56:37 - this is the process right you've got to
56:38 - kind of write the code talk it through
56:40 - multiple times before it starts to sink
56:42 - in at least that's my process
56:45 - all right now what's really exciting
56:47 - here and i'm going to just i'm going to
56:48 - jump forward very fast
56:50 - is in order to make this water ripples
56:54 - thing work
56:55 - i need to have what in essence is like
56:59 - the equivalent of
57:00 - this
57:02 - um
57:03 - and where where is that this a
57:05 - two-dimensional array
57:07 - right so i have these like current and
57:09 - previous
57:11 - dimensional arrays to keep track of
57:15 - all of the sort of height values of all
57:17 - the water ripples
57:19 - um
57:22 - the
57:23 - sorry i'm reading the chat um i'm
57:26 - reading the chat while i'm sort of
57:27 - thinking this through which i i
57:28 - shouldn't so i need to have this like
57:31 - data structure to store the height
57:33 - values of all of the
57:35 - points of water in this texture
57:38 - so one place that i could do that is in
57:41 - an image and so i believe that i can
57:43 - create this kind of like buffer or
57:44 - texture in
57:46 - glsl which is exactly what's happening
57:50 - in this particular example
57:53 - uh by doing the following so i'm going
57:56 - to make an image
57:58 - just a blank image i'm going to say
58:00 - image equals create image 400 by 400
58:05 - then i want to make another uniform
58:09 - ripple
58:10 - shader
58:11 - dot set uniform
58:14 - i'm going to have a texture i'm going to
58:15 - have two textures
58:17 - so i called them in the water ripples
58:20 - coding challenge previous and current
58:22 - because i need to calculate the next
58:24 - frame of ripples from the previous and
58:26 - then i swap them so previous and current
58:29 - to draw the current then this becomes
58:31 - the previous and this now is the new
58:33 - current
58:34 - do the math draw that one back and forth
58:36 - back and forth so actually i think i do
58:38 - want to have
58:40 - two of these so let's have an image zero
58:45 - and an image one i'm not 100 sure this
58:48 - is exactly right and then i want to
58:51 - texture one and i can make those image
58:54 - zero
58:56 - image one
58:58 - so i believe now
59:01 - and let me comment out this texture
59:05 - stop talking to me
59:07 - let me comment out this image one for a
59:09 - second
59:10 - and go into the fragment shader and add
59:13 - another uniform
59:16 - and it's like a texture
59:18 - let's look at the code here i think it's
59:19 - called texture
59:22 - there's
59:23 - where is the uni
59:26 - sampler 2d oh it's called a sampler 2d
59:29 - that's interesting
59:30 - okay i'll take that
59:32 - a sampler 2d
59:34 - i don't remember that i was like looking
59:36 - at this earlier and i don't remember it
59:37 - being sampler 2d at all
59:40 - and i see that
59:42 - ilari is writing an explanation gl frag
59:44 - core is zero to 400 then dividing by
59:46 - resolution is normalizing to zero and
59:47 - one got it
59:49 - got it okay i'm gonna i'm gonna need to
59:52 - return to that
59:53 - i don't know tweet at me later so i can
59:55 - discuss this so i can understand it but
59:57 - i gotta move on so a sampler
60:00 - and then i believe
60:03 - that i should be able to and let's just
60:05 - look at this here
60:07 - like
60:08 - get the um so do i need to change
60:11 - something in the um
60:13 - yeah oh i need to get the texture
60:15 - coordinate so there's a new texture
60:16 - coordinate attribute
60:19 - okay so in addition to the position
60:21 - we need the texture coordinate
60:23 - attribute
60:25 - that goes in the vertex shader
60:28 - so we've got another attribute and it's
60:30 - just a vector because textures don't
60:32 - live in 3d space the texture is by
60:34 - definition a 2d image essentially buffer
60:38 - i don't know if buffer is means
60:40 - something else in shader world but
60:41 - that's how i'm kind of thinking of it
60:43 - i'm gonna have to read back the whole
60:44 - chat from the stream later
60:47 - and then
60:48 - we need to create now what is this
60:50 - varying
60:51 - this is new to me so i understand that
60:53 - we want to do the same exact thing which
60:56 - is essentially
60:58 - basically this is a way of getting this
61:00 - attribute from p5 into a variable that i
61:04 - can access in the
61:05 - fragment shader so why is this called
61:08 - varying because by definition otherwise
61:10 - a vector would be a constant
61:13 - it's like something that changes is that
61:14 - all that means basically the opposite of
61:16 - constant so am i in the vertex shader
61:19 - and then i just want to say v text
61:22 - coordinate equals a position
61:25 - so this is me getting like the texture
61:29 - no not a position sorry a texture
61:31 - coordinate
61:35 - so what's the error here v text chord
61:41 - what's this what's this
61:43 - standard variable naming that they're
61:45 - using here
61:46 - is it t-e-x-t or just t-e-x so let's go
61:49 - with t-e-x
61:54 - so just t e x here
61:57 - great so i'm good to go
61:59 - um i
62:00 - i want to go back in the fragment shader
62:03 - to just having
62:05 - the frag color everything be white
62:08 - so i just want to go back to everything
62:10 - being white
62:13 - because ultimately what i want to do
62:14 - here is pull
62:17 - the color from the texture so if i
62:20 - create this image in p5 like if it were
62:22 - the webcam i want to pull the color from
62:25 - the webcam and set it as the color for
62:27 - the pixel in the shader
62:29 - but i'm not going to
62:32 - i'm not going to do the webcam but let's
62:34 - see so what else
62:36 - how do i do that so if we look back to
62:38 - what they're doing here
62:40 - in the fragment file
62:44 - the texture is loaded upside down and
62:46 - backwards by default
62:48 - right because
62:50 - so vector oh uv i want to get the
62:52 - texture coordinate interesting
62:55 - okay
62:56 - oh that's simpler
62:59 - so in this case
63:01 - in the fragment shader
63:04 - i just want to get
63:06 - my uv is now let me lower the console
63:09 - here so i can see more
63:11 - my uv
63:14 - is the
63:16 - texture coordinate
63:19 - but that's not is
63:22 - um
63:25 - is but i'm taking the v text coordinate
63:27 - yeah my one the thing that i set
63:31 - so i'm creating this v-text coordinate
63:33 - it's a varying
63:35 - vector
63:36 - and then in the fragment shader i am
63:39 - putting that in uv
63:42 - and then now why do i have an error here
63:50 - parameter one is not of the type webgl
63:52 - program an error occurred compound on
63:54 - the fragment chair v text court
63:55 - undeclared identifier
63:57 - so do i need to somehow
64:01 - oh
64:02 - is that why it's like a varying i have
64:04 - to redeclare it it's varying because
64:05 - it's coming from the vertex shader
64:10 - okay
64:12 - nicole these comments you're writing the
64:14 - chat are so helpful but i i'm not able
64:17 - to fully absorb them while i'm doing
64:18 - this in real time so i'm gonna figure
64:20 - out how to get back to them
64:22 - um
64:23 - uh okay so i need to also say in the
64:26 - fragment shader
64:28 - that there's this varying variable okay
64:31 - so now i've got the texture coordinates
64:33 - so if i were to just do like uv.x
64:39 - and
64:42 - manually divide it by 400
64:45 - no
64:49 - oh this has to be enough sorry
64:52 - i want to have a vec3 color
64:55 - which equals vect3
64:58 - i mean i'm just
64:59 - trying to understand like what's in
65:00 - these values it's it's hard to like
65:02 - console log value is there a way to just
65:04 - easily console log values
65:06 - that would be nice um
65:10 - so i want to uh
65:13 - see if this works
65:15 - okay that's good
65:20 - ah so these these texture coordinates
65:22 - are already normalized between zero and
65:24 - one which is why i don't so the frag
65:27 - coordinate is somehow actually i know
65:29 - you've been saying this in the chat
65:32 - gl frag coordinate is actually this
65:35 - unnormalized
65:36 - values
65:38 - oh we're making it
65:44 - i think i got it i think i got it
65:47 - what i'm getting
65:48 - from p5
65:50 - is like this range
65:53 - which then gives me a range between
65:56 - negative 400 and 400
65:59 - which i then need to like
66:04 - normalize out oh i'm so confused
66:08 - yeah yeah zero uh
66:11 - and then i divide it by width and height
66:14 - yeah yeah yeah cause i could
66:16 - i think i got it i think it took me so
66:17 - long i think what i get from p5 in the
66:21 - attribute is
66:23 - a pixel value between 0 and 400.
66:26 - then i take may turn it into this range
66:29 - and then i divide by the u resolution
66:32 - uniform to get numbers between negative
66:34 - one and one
66:36 - did i get it but then why
66:39 - oh and that's why i'm seeing black black
66:42 - black black black black and it only
66:43 - picks up from here
66:50 - no i'm seeing red in the texture
66:51 - coordinate but if i go back to this
66:57 - yes so why oh i missed i missed the step
67:01 - i was close it's just zero to four
67:02 - hundred
67:06 - i i was close cool such a guy i was
67:08 - close but i missed it somebody draw me
67:11 - that diagram that i'm trying to draw but
67:12 - correctly tweet it at me
67:15 - thank you i'm going to get it i'm going
67:17 - to get it i just i can't be bothered
67:19 - with it right now because i got to keep
67:20 - moving so back to texture coordinates
67:23 - okay now
67:25 - the next step is okay flip this right
67:29 - that's fine because it's upside down
67:31 - that's fine no big whoop that's easy to
67:34 - invert
67:36 - and then
67:38 - create a 2d texture
67:42 - from the uniform
67:44 - from the sampler okay
67:47 - um
67:49 - oh give me the is this basically saying
67:51 - like give me the
67:53 - effect 4
67:55 - from
67:57 - here at this uv oh it makes a co oh this
68:00 - is giving me the color
68:02 - in this sort of texture
68:04 - at this uv that must be what this is
68:06 - doing
68:08 - it's kind of like get
68:10 - so this is
68:12 - give me the color at this uv
68:15 - and if i were to just
68:18 - set the frag color to that color
68:21 - it's all black because i haven't set any
68:23 - colors so if i were going to go into the
68:25 - sketch now and i were to say
68:27 - 4 let i equal 0 i is less than image
68:31 - pixels.length
68:32 - i plus equals 4
68:35 - right then i would say image because
68:36 - there's four uh
68:38 - spots in the array rgb alpha so if i
68:41 - were to say image dot pixels i plus zero
68:45 - is red
68:50 - then blue
68:51 - let's uh then blue then green then blue
68:54 - let's make it blue
68:56 - let's make it a random value of blue
68:58 - and then let's say pixels i plus 3
69:02 - is 255 because that's the alpha
69:06 - what do i got still black maybe i need
69:09 - to say load pixels
69:13 - maybe i need to say update pixels
69:21 - okay what am i missing
69:23 - let's just very briefly
69:26 - draw the image to make sure
69:30 - without the shader
69:32 - okay that's fine so that is the image i
69:34 - mean it's off because i'm drawing it at
69:35 - 0 0 which is in the center
69:42 - so why
69:44 - how do i get the shader
69:46 - to set the colors correctly
69:49 - utex 0 is oh whoa whoa whoa whoa whoa
69:52 - whoa image zero
69:56 - that whole time all right everybody hold
69:58 - on i forgot that i called it image zero
70:02 - what a silly error
70:09 - [Music]
70:11 - that didn't fix it
70:15 - uh let's take a look at this
70:18 - oh duh okay
70:20 - oh i can't just give it
70:22 - this is giving it the brightness how
70:24 - come i can't just
70:25 - take the rgb
70:28 - this is doing like funky stuff to it
70:30 - which is not what i want to do
70:32 - i just want the raw color
70:35 - so what did i miss
70:36 - utex 0 is image 0.
70:41 - let's look at the fragment shader
70:46 - i've got text 0 vect2 vtex coordinate uv
70:50 - is that
70:51 - give me the
70:52 - vect4
70:54 - color
70:59 - i'm using image instead of image utex
71:02 - not text zero ah
71:04 - i'm not getting an error yeah i forgot
71:07 - that
71:07 - you text zero
71:09 - okay
71:11 - and
71:14 - okay so now
71:16 - what's the error
71:20 - texture oh hello
71:22 - hello silly me
71:26 - fragment shader
71:28 - this has to be utex zero
71:32 - ah
71:33 - yes oh now check this out
71:37 - uh so if
71:39 - i were to take this algorithm
71:42 - and put it in draw
71:47 - i don't really want to do this but
71:49 - just out of
71:52 - curiosity uh and let's make all these
71:55 - from the colors of an image in p5
71:57 - passing that image to the shader and
71:59 - then it's like
72:00 - tossing it into the canvas now the
72:02 - question is
72:04 - is this actually any opt speed
72:07 - optimization because the actual math and
72:09 - loop of all the pixels is happening here
72:11 - so ultimately when i do the water
72:13 - ripples i want that math to happen in
72:15 - the shader which should be quite
72:16 - possible so i'm going to go back to i
72:19 - think we're ready for the water ripples
72:20 - actually
72:22 - we are we totally are we totally are
72:24 - okay check this out
72:26 - so i'm going to do this
72:29 - and i'm actually going to set them all
72:32 - to black to start
72:37 - okay
72:38 - so all the pixels are going to be black
72:41 - to start now
72:44 - i want to add the mouse dragged function
72:49 - and in mouse dragged
72:52 - i want to
72:53 - get
72:56 - the index value from mousex
73:03 - so this is the index into the pixels
73:06 - and i guess let me call it just i so i
73:08 - can copy paste and use the exact same
73:09 - code
73:11 - and set it equal to 255
73:16 - and i probably need to say
73:19 - load pixels and update pixels i never
73:21 - know when that's entirely needed
73:23 - but let's use it now to be safe
73:31 - so now
73:33 - what i'm going to do
73:35 - is and we're going to have to zoom in
73:37 - here i think
73:39 - that i should see
73:41 - yeah oh no
73:44 - no that's not working what did i miss
73:52 - those pixels should be oh no set up draw
73:55 - shader
73:57 - um
74:00 - did i miss something here
74:03 - i
74:07 - i should see white pixels as i drag the
74:09 - mouse let's just make sure
74:13 - that something is happening here
74:16 - i should be looking at the chat probably
74:18 - yeah i'm getting pixel values
74:22 - so if i'm altering the pixels
74:26 - why and i'm resetting the texture
74:29 - why am i not seeing them
74:33 - let's once again draw the image just
74:35 - manually
74:44 - this should be image zero maybe there's
74:46 - something in the chat oh times four
74:47 - times four ah
74:49 - thank you thank you i don't need to do
74:51 - this
74:55 - i forgot that there are four
74:57 - values for every pixel so when i pick
75:00 - this
75:01 - index value i've got to scale it up by
75:04 - four
75:06 - there we go
75:08 - so you can see i'm now using the mouse
75:11 - to set values in the sort of shader
75:14 - texture
75:16 - thank you everybody okay
75:18 - thank you everyone times four times four
75:21 - uh 547
75:23 - all right we're actually not that far
75:25 - away i don't think
75:27 - okay so i also need to have
75:30 - now i need to have
75:31 - the the other image i'm pretty sure
75:34 - so let's create the second image
75:38 - um
75:39 - let's load it's
75:41 - can i just make it a copy
75:44 - i think if i just do
75:46 - um
75:47 - this is a little bit dangerous to do
75:49 - this but let's try it
75:51 - um
75:53 - image
75:56 - well i'm just going to be totally safe
75:57 - here there's probably a nice and just
76:00 - like redo this code
76:02 - obviously using an array would make a
76:04 - lot more sense copying the image would
76:07 - make a lot more sense
76:08 - but i just want to
76:12 - now i have both of these
76:14 - and i can set another uniform for
76:16 - texture 1
76:18 - to image one
76:20 - and um
76:22 - in the fragment shader
76:25 - i can have a uniform sampler
76:27 - utex one
76:30 - and so now i have both of those
76:33 - right so now
76:35 - i'm drawing little white things but if i
76:37 - change it to utex one
76:42 - i'm not setting the pixels of that image
76:44 - so i don't see anything
76:46 - and if i were to in the sketch just to
76:48 - make sure
76:49 - set utex one
76:52 - to blue there we go okay so i have both
76:55 - those textures i don't know that this is
76:57 - the right path by the way i'm just
76:59 - going with what i think will work
77:01 - i have both those textures in my shader
77:04 - so now
77:06 - what is the algorithm i have to go to
77:09 - the water ripples algorithm because what
77:11 - i need to do
77:13 - and i should be setting actually
77:17 - this should be setting
77:22 - hmm
77:24 - boy this is going to be weird
77:26 - i'm not so sure about what i'm doing
77:28 - here but i do think i want okay image 0
77:32 - is going to be previous
77:35 - and image 1 is going to be the next
77:37 - frame
77:39 - so i actually want to right now to do
77:41 - what i want to do
77:43 - i want to pull the colors
77:45 - from texture 1
77:47 - but i want to set the values in texture
77:50 - 0. because
77:53 - i believe
77:59 - oh my god how do i do this
78:02 - the other thing that's weird is i'm
78:04 - getting three values all right let's all
78:06 - right i'm gonna really need help from
78:07 - the chat here because i'm i'm a little
78:09 - lost like i unders i know this algorithm
78:10 - basically
78:13 - if i go to my code let's go to my code
78:16 - and this is what i need to do
78:20 - i wanna there's this dampening because i
78:22 - need floating points
78:24 - all right we're gonna we're not gonna
78:25 - have any dampening that's fine
78:27 - to start
78:29 - so i basically need to cut do its
78:31 - neighbors all right so hold on just let
78:33 - me grab this for a second
78:35 - basically conceptually what i want to do
78:39 - is right here
78:44 - i want to get
78:46 - the height value
78:50 - okay i have okay this
78:55 - i want
78:58 - texture 0 to be
79:00 - the color values from
79:03 - p5 in texture 0.
79:05 - and then
79:06 - the new color value i going to set it
79:09 - here how do i i don't know how i'm going
79:10 - to do that yet
79:12 - so wherever i am
79:15 - oh
79:16 - ah i need all the neighbors
79:18 - so
79:19 - basically
79:20 - neighbor one is
79:24 - um
79:27 - so there must be like
79:29 - vec
79:31 - neighbors can i write an array of
79:32 - vectors
79:33 - so like this would be left would be
79:36 - vector
79:37 - negative one
79:40 - zero
79:41 - right
79:42 - and then
79:43 - the
79:44 - this is so hard
79:46 - right this is let's just do the left
79:48 - neighbor i just want a path
79:50 - the color to the left neighbor that's
79:52 - all i want to do we're going to simplify
79:54 - things
79:55 - then i want to oh no
79:57 - so if i'm getting it from the left i'm
79:59 - actually passing it to the right i guess
80:01 - so let's pull the color from the left
80:03 - neighbor
80:05 - so uh
80:08 - so vec so left
80:11 - equals left
80:13 - plus
80:14 - uv
80:15 - right this is where i am
80:18 - uh or or i could say
80:21 - uv equals uv
80:23 - plus left that's like give me the left
80:25 - neighbor
80:26 - so then get me that
80:28 - color
80:30 - from the left neighbor
80:32 - but
80:35 - so i want a new one like uv
80:38 - let's call this
80:40 - neighbor
80:42 - left can i just do this
80:47 - so give me
80:48 - and let's call this uv left okay
80:51 - so give me the color to the left
80:58 - text left okay right give me the color
81:01 - from texture 0 on the left of wherever i
81:04 - am
81:05 - now how do i set the color
81:07 - that must be
81:09 - something that i see here well but how
81:12 - do i set the color of another texture
81:15 - oh
81:16 - all right i don't know
81:18 - i mean i could just color it
81:24 - like i don't
81:25 - i can get back come back to this right
81:28 - then basically what i want to do the
81:30 - equivalent of is like
81:33 - i'll just write this like i want to say
81:34 - like
81:37 - set
81:40 - uv
81:46 - somebody donated 1 billion to team c's
81:49 - i'm seeing it seems crazy
81:54 - oh joshua noble i'm not in brooklyn this
81:56 - weekend unfortunately
82:00 - um
82:01 - but send me a tweet or a message or
82:03 - something
82:04 - i'm sorry that i'll miss you um okay
82:08 - you're going to need to set text 1 as
82:10 - the render target and run text 2 with
82:12 - your shader enabled that's what i want
82:13 - to do tasteful toasty i don't know how
82:16 - like what i want to do is say set the uv
82:18 - coordinate of text 1 to
82:22 - text left
82:24 - right what's the
82:25 - this is not
82:27 - glsl
82:29 - code if that's even the right acronym
82:32 - g s l s g l s l
82:34 - graphics language shader language i
82:36 - think that's right and then
82:39 - color
82:44 - is
82:45 - this
82:47 - like
82:48 - color is the
82:52 - left color kind of or whatever
82:58 - use the ripple shader on an extra p5
83:00 - graphics object and set it as a texture
83:02 - input to the ripple shader again you
83:04 - can't set a texture in the shader oh
83:08 - hmm
83:11 - oh but i could
83:14 - i can't i could draw it
83:16 - and then couldn't i pick it up
83:23 - if i had a p graphics object okay wait
83:25 - see i was looking at um earlier i was
83:28 - looking at shader toy
83:30 - um
83:31 - game of life
83:35 - there was a nice i think it was this one
83:38 - this is what i was looking at which i
83:40 - think is doing exactly the same thing
83:42 - that i want to do
83:44 - which is it has two channels
83:50 - and
83:52 - we get the color from channel zero
83:58 - and then we create the color instead oh
84:00 - maybe because there's like
84:02 - two shaders operating on different
84:04 - images and then they get swapped yeah i
84:06 - really need help here
84:11 - isn't the entire point to give this
84:12 - computation to the jeep it uses a buffer
84:14 - so should i be using a buffer
84:16 - i could use a buffer that would work
84:19 - do i need to go back
84:21 - and use the buffer
84:23 - there's the concept of a back buffer
84:25 - oh did i did i go off in a direction
84:28 - that i cannot return should i go back to
84:30 - metaballs metaballs would be much easier
84:32 - to do
84:33 - if i have to i could go do this
84:34 - metabolise challenge
84:37 - just to have a win i think i don't even
84:39 - need this texture i thought like i could
84:41 - create the texture that is the water
84:44 - ripples
84:45 - and then have a secondary texture
84:51 - then i apply
84:52 - and i could just operate on it itself
84:54 - and then apply it and then like it could
84:56 - be like a sort of feedback loop
85:00 - back and front
85:02 - are swapped each frame
85:03 - i need a buffer
85:05 - i have no idea how to use a buffer i was
85:07 - researching this earlier
85:09 - and i didn't
85:12 - i don't know what to do can i just do
85:14 - the meta balls
85:16 - well let's put a quick poll
85:19 - because knowing that i have to go
85:21 - soon and uh
85:23 - feed my children dinner i promise to
85:25 - make pasta tonight
85:27 - no meatballs although uh my uh we um
85:31 - we're not like fully vegetarian but
85:33 - switch to metaballs
85:37 - but i kind of only eat fish i don't know
85:38 - why i'm talking about this now switch to
85:40 - metal balls
85:41 - be stubborn but keep going
85:45 - uh stick with
85:48 - what is it water ripples this pole is
85:50 - going to show up in the chat in a second
85:53 - oh
85:57 - okay
86:01 - just set the frag color and load the
86:03 - canvas okay hold on
86:07 - i want to read this
86:09 - i want to read this comment just set the
86:10 - frag color and load the canvas into
86:13 - image zero after the shader rendered it
86:15 - in the draw loop
86:16 - okay
86:19 - okay
86:21 - crab cakes then
86:23 - uh
86:24 - so far there's one vote
86:27 - wait wait wait wait okay
86:30 - ah what if i used
86:33 - oh i know what to do i think this will
86:36 - still work if i use
86:39 - create graphics what if i use create
86:41 - graphics instead of
86:45 - um
86:51 - i'm going to create graphics instead of
86:52 - create image
86:57 - create graphics
86:59 - webgl all right i think this might be
87:02 - the path to victory here
87:07 - probably a terrible idea for reasons i
87:09 - have not yet thought of
87:11 - and then
87:14 - the shader
87:18 - is apply to
87:21 - the image
87:24 - and then
87:27 - image
87:29 - zero uh
87:32 - uh draw the rectangle
87:39 - so the shader itself oh no but wait wait
87:41 - wait ah no no no no i still need an
87:45 - image which is the uniform to start
87:48 - right
87:49 - well i'm so confused
87:52 - yes yes okay hold on
87:56 - i got it i got it
87:58 - backing up for a second i mean this is
88:00 - way too much nonsense and it might not
88:03 - be right but just just bear with me i
88:05 - think i know what i'm doing i mean i
88:07 - definitely don't
88:09 - okay right this is what i want to do i'm
88:11 - going to call this
88:13 - previous
88:17 - okay let's keep my like i don't need the
88:19 - second texture probably the second image
88:21 - but fine
88:23 - previous
88:25 - equals create graphics 400 400 webgl
88:30 - in this sense
88:31 - i don't even need my canvas to be webgl
88:34 - but that's another story for another
88:35 - time
88:37 - then i want to apply the shader to this
88:41 - graphics object
88:43 - draw the rectangle there
88:45 - let's just make sure i put
88:48 - some blue color
88:52 - into image one
88:56 - because the shader is pulling the color
88:59 - from
89:01 - oh what did something weird here let's
89:03 - go back to what i had
89:07 - the texture color is
89:11 - the uv what is
89:13 - from the
89:14 - what's it called utex
89:16 - zero
89:17 - at the uv let's comment all this this
89:20 - nonsense out for a second the left
89:22 - neighbor
89:23 - and then set
89:29 - yeah this was not a thing you can do and
89:31 - set the color to this
89:33 - okay
89:34 - so now this plain vanilla shader which
89:38 - is pulling the colors from the pixels
89:45 - um
89:47 - oh is the vote
89:48 - is i don't see the poll results usually
89:50 - it shows up
89:52 - right here in my
89:54 - is it gone
89:56 - i think the poll disappeared what
89:57 - happened
90:00 - tell me if you see the poll i think it
90:01 - disappeared vote doesn't work
90:03 - okay i might have accidentally ended it
90:06 - let's try that again
90:12 - i'm i'm i'm quite well known for doing
90:15 - the opposite of whatever the poll says
90:18 - but
90:23 - i think it got ended by accident
90:28 - it ended after one vote okay
90:31 - hopefully it's going to show up again
90:32 - okay now
90:37 - um okay i see the pole again now okay
90:42 - now i'm applying the shader to that
90:45 - graphics object and then
90:49 - i am going to draw that graphics object
90:58 - do i need to hit play again
91:00 - okay what did i miss
91:04 - update pixels is not a function
91:07 - oh this is uh
91:10 - this should be image one
91:17 - okay great
91:19 - we're seeing it there
91:33 - whoops what just happened
91:36 - received three arguments
91:39 - oh
91:41 - yep
91:48 - okay no errors
91:52 - i thought i saw something when i did
91:54 - this
91:56 - yeah oh because it's just black
91:58 - okay
91:59 - so for whatever reason the um
92:04 - the shader is not properly picking up
92:06 - the color let's see if i can
92:08 - oh because it's getting it from
92:11 - text one there we go okay
92:18 - all right
92:19 - there
92:20 - there we go
92:22 - this is probably a terrible idea but
92:24 - you know we're gonna go with it i mean
92:26 - what i could do is just calculate the
92:29 - water ripples in p5 into an image and
92:32 - then render the image with the shader
92:34 - but that's not giving me any speed bump
92:37 - i don't think maybe a tiny bit because
92:39 - at least i'm using webgl to like draw
92:41 - the image but i might be doing that
92:43 - anyway just
92:45 - splitting an image to the canvas all
92:47 - right
92:48 - let's um i really want to do the
92:49 - computation in the shader that's the
92:51 - point
92:52 - okay
92:53 - so now
92:56 - if this is
93:00 - the okay okay okay i got it i think i
93:03 - got it
93:04 - oh my goodness
93:06 - oh my goodness i think i know what to do
93:09 - i think i can do this with one image
93:11 - right what if i have the image i start
93:13 - it i do the computation and i
93:16 - put the result onto the create graphics
93:18 - object then i copy it
93:20 - back onto the image
93:22 - and then do it again
93:26 - so we're going to go back to my sketch
93:28 - we're going to have only one image
93:32 - i'm going to comment out the other one
93:34 - in case i need to get it back
93:38 - and
93:39 - we're going to get rid of this one
93:45 - the shader
93:47 - should then pull the colors from
93:50 - this texture
93:54 - and i'm probably
93:57 - let's not set this uniform then
94:01 - okay and then just to be sure if i give
94:04 - this a green color
94:07 - great
94:08 - so now we are rendering the initial
94:10 - pixels from here
94:13 - if i were to
94:16 - drag the mouse
94:19 - no is that not operational
94:22 - why not
94:27 - i should always be applying it to this
94:32 - that's a little weird to me now why did
94:34 - i lose this
94:38 - the mouse dragged should still work the
94:40 - thing is
94:42 - i don't actually even need to i
94:47 - just want to understand why that's not
94:48 - working
94:50 - create image load the pixels set them
94:53 - all up update the pixels
94:56 - i'm going to really just get rid of this
94:57 - second one because it drives me crazy
94:59 - having this in the comments here
95:02 - let's put pixel density
95:04 - one earlier on
95:07 - and
95:09 - get rid of this
95:12 - previous is the create graphics
95:15 - don't need this
95:17 - uh
95:20 - it is working i just couldn't see it
95:25 - oh my god it is working okay it's just
95:27 - so tiny
95:28 - okay thank you
95:30 - it is working great
95:32 - so now what if
95:35 - i were to
95:38 - basically say
95:41 - image zero
95:44 - copy
95:45 - all the pixels from previous
95:50 - over
95:56 - so
95:57 - now
95:58 - it should still be the same oh but
96:00 - they're disappearing
96:04 - right because ooh now i now i don't
96:05 - understand the order of operations
96:08 - but this is what i'm thinking
96:10 - like what if
96:12 - i uh i put the new
96:16 - let's not do it here let's set some
96:18 - initially
96:19 - so if in setup
96:23 - just for a second let's get rid of this
96:24 - mouse dragged idea
96:26 - and let's just every once in a while
96:31 - i'm going to say like there's a if
96:33 - random one is less than like half the
96:36 - pixels this is like a really ridiculous
96:39 - way of doing it
96:41 - oh you know okay hold on hold on no this
96:43 - is a much better way
96:45 - so uh
96:47 - um
96:48 - let value equal zero if random 1 is less
96:52 - than 0.5 value equals 255.
97:03 - so now this is giving me
97:08 - fifty percent of the pixels are on
97:11 - let's do like ten percent
97:14 - uh
97:15 - one percent
97:17 - okay great i mean i'm gonna do 10 it's
97:19 - going to create a mess but i can see it
97:21 - more easily okay
97:26 - so now
97:32 - i really should go with the metaballs
97:33 - but people are voted for the water
97:35 - ripples i don't think i'm gonna get
97:36 - there i mean i gotta go with something
97:38 - like i'm already past due i don't think
97:40 - i'm gonna get to the one get there but
97:42 - we're gonna try
97:43 - um
97:44 - so if this is copying it in
97:48 - what if i were to
97:50 - in here
97:52 - very specifically
97:55 - do this i'm just curious like what if i
97:58 - were to do this again
98:00 - like do another like let's make this
98:02 - really one percent
98:04 - and then
98:06 - like i'm just gonna say like
98:08 - if mouse is
98:10 - pressed
98:14 - um
98:20 - like after you've
98:24 - sorry
98:24 - uh
98:25 - after you've copied it over
98:33 - i'm just curious
98:36 - oh because it's going to reset
98:38 - um
98:40 - yeah i only want to
98:45 - do like i want to leave the old pixels
98:47 - i'm just curious i'm kind of playing
98:49 - around here just to understand what's
98:50 - going on
98:51 - and by the way i should write like a set
98:53 - pixel function
98:54 - because this is ridiculous how often i
98:56 - have to do all four of these okay
99:01 - uh
99:05 - what just happened there oh
99:12 - yeah
99:13 - there we go
99:15 - so as i hold down the mouse more and
99:17 - more pixels are set and it's retaining
99:20 - the old one okay so i think now
99:23 - i just wanted to see that i should be
99:26 - able to do something
99:29 - like
99:34 - what i had before
99:35 - like why not add together
99:38 - my current color and my neighbor color
99:42 - like if i wanted to get
99:44 - the left
99:46 - color
99:49 - so this is the left
99:51 - texture
99:53 - and then what if i were to say text plus
99:55 - equal text left
99:57 - right if i'm getting the neighbor
100:01 - it's sort of passing the pixel along
100:04 - what
100:09 - so this what it seems i have a feeling
100:11 - what it's doing is this is somehow only
100:13 - if the leftmost one happens to be on it
100:16 - copied it the whole way across
100:18 - that's weird
100:20 - is it doing these one at a time
100:23 - i thought i was doing this all in
100:24 - parallel like and then i
100:32 - is it moving one pixel to the left it's
100:34 - not
100:37 - oh it's not
100:39 - it's not of course i need to
100:42 - divide by the resolution
100:52 - um
100:57 - no oh hey wait hold on no
101:02 - yeah i need to divide by the resolution
101:04 - right that's so weird
101:10 - how how did they get the neighbors
101:13 - uh okay hold on
101:15 - i lost
101:16 - that's not to the left like one let me
101:18 - just do this hard code this
101:29 - did i actually get an error there
101:41 - hold on
102:03 - what is the error
102:08 - uv redefinition oh whoops sorry i forgot
102:11 - i had this here
102:22 - text
102:32 - okay
102:34 - getting somewhere
102:38 - uh hold on nicole
102:44 - okay you should have permission now to
102:47 - post chat messages
102:50 - texture 2d new resolution got it
103:04 - uh
103:13 - so i'm getting
103:40 - right this is what i'm wanting to do
103:43 - so
103:45 - i what i was expecting to see is just
103:47 - like the colors slide across to the left
103:50 - because it's going to pick up the left
103:52 - color
103:53 - and then i i also should cap it at one
103:56 - so
104:02 - sample
104:05 - uh sample the left coordinate that's
104:07 - what i
104:09 - so how do i get the neighbors
104:11 - in a texture
104:13 - i'm looking for that link
104:16 - uh texture 2d
104:22 - [Music]
104:24 - yeah yeah this is what i'm doing right
104:30 - left
104:33 - oh do i need this to be 0.0
104:40 - i mean i think
104:44 - text left
104:46 - uv left what if i just do just for a
104:49 - second here what if i just do left
104:53 - yeah that's one uh okay
104:56 - but why don't they like
104:59 - shouldn't this be like shifting over
105:01 - like all moving
105:02 - to the side because
105:06 - i'm copying
105:08 - the new render
105:16 - oh image zero update pixels maybe
105:23 - no
105:25 - um
105:28 - um
105:31 - interestingly enough though something is
105:33 - working in the sense that
105:36 - uh if i go to my fragment shader
105:39 - and have the color be
105:41 - added
105:43 - can i is there some kind of like max
105:45 - thing i can do
105:47 - or like min
105:48 - like whichever one is bigger keep that
105:55 - i really want to get yeah
106:01 - uh one-on-one
106:04 - i want to do the components though
106:06 - component wise
106:11 - opera really makes sense for a scale max
106:13 - works
106:14 - so the min of one three four two is the
106:18 - lesser one
106:19 - and the
106:21 - um
106:25 - lesser one and the um i'm sorry
106:29 - the lesser one and the lesser two so i
106:31 - want max i mean this is sort of silly
106:33 - but like um
106:42 - right this is really i mean this should
106:43 - be the same
106:52 - maybe the copying
106:55 - book of shaders glossary okay
106:58 - um
106:59 - and maybe the copying is not actually
107:03 - working
107:20 - i don't understand the order of
107:21 - operations
107:23 - so when i apply the shader
107:27 - can i just update the image with the new
107:29 - thing that i've drawn and then we'll
107:31 - apply the shader again
107:37 - i really think like
107:40 - okay
107:41 - uh texture
107:43 - coordinate
107:49 - what is this called here in my fragment
107:51 - shader
107:54 - i'm using the
107:56 - uh
108:00 - texture
108:01 - [Music]
108:02 - coordinate text coordinate
108:05 - neighbor
108:07 - glsl
108:17 - texture size offset yeah
108:22 - this sampler 2d the texture map the
108:24 - offset
108:29 - is there a texture offset function
108:35 - ah texture offset
108:37 - there's a texture offset function
108:40 - well
108:42 - that's
108:44 - convenient well
108:46 - nobody told me that
108:50 - i'm not swapping the images i was just
108:53 - trying to
108:55 - swap it by copying it unto itself
109:00 - yeah i believe it needs a second pass
109:04 - first of all though let's use this
109:06 - texture offset function
109:10 - so
109:11 - i'm getting a 2d sampler
109:15 - the position and the offset okay
109:20 - so hold on
109:21 - where was i
109:24 - nobody
109:25 - this is new that i'm learning so texture
109:27 - left
109:30 - is
109:34 - texture
109:35 - offset
109:40 - back
109:42 - left
109:48 - is this not available to me here
109:59 - is it webgl oh
110:04 - can you have the shader output the uvs
110:07 - did i spell
110:11 - hi
110:11 - lee
110:12 - i don't know i'm not doing this right i
110:14 - failed i as i said in the beginning this
110:17 - is a total failure because i don't know
110:19 - enough i like
110:21 - thought like i'd be able to figure this
110:22 - out and i really have so okay so is is
110:25 - texture offsnet not not supported by
110:28 - webgl
110:31 - webgl2
110:36 - uh
110:39 - when webgl 2 seems like from a while ago
110:41 - though
110:42 - is it texture underscore offset
110:52 - okay
110:53 - let's go back to my
110:55 - manual offsetting
111:02 - right
111:04 - i'm getting
111:09 - the left pixel and this pixel
111:14 - and
111:15 - doing the max and setting the color
111:21 - once it does that
111:27 - i don't understand how to animate i
111:29 - think p5 doesn't support webgl too
111:31 - usually opengl draws when the frame is
111:33 - swapped at the end oh
111:38 - oh
111:39 - finish
111:41 - oh
111:42 - i see that makes sense
111:52 - all right let's try this
111:58 - do i have a mouse pressed function
112:06 - i don't think i need that all right
112:08 - so now
112:16 - you can see though that it's drawing
112:18 - them both next to each other right look
112:20 - at that
112:21 - so i've definitely got something right
112:23 - in the sense that
112:25 - if
112:27 - right if i just use the raw texture
112:29 - color
112:31 - look at these one dot everywhere begin
112:34 - draw end draw if i use
112:38 - the max of either of them
112:42 - every single one of these is two pixels
112:44 - wide so i am doing something right
112:48 - i am doing something right
112:54 - i just can't get it to do the next one
112:59 - right why won't it do the next one so
113:01 - begin draw oh oh oh
113:05 - oh my goodness
113:22 - well
113:23 - no
113:25 - is begin draw not a function
113:29 - i don't know how to but it's not this
113:31 - that i want to do i need like a whole
113:33 - separate
113:35 - graphics instance
113:43 - um
113:45 - oh did i lose the copy thing i lost the
113:47 - copy thing hold on
114:03 - it hasn't redrawn it yet before it
114:05 - copied but no i'm copying it from
114:07 - previous
114:08 - so it should be fine
114:18 - no
114:26 - no
114:28 - all right i'm i'm i'm stuck
114:31 - redraw
114:38 - redraw i really want to go to the meta
114:40 - balls
114:45 - i had to look at my text message how how
114:47 - bad am i what's going on here
114:52 - oh
114:55 - oh i have to go everybody
115:04 - i think things are urgently falling
115:06 - apart
115:10 - i'm gonna come back
115:14 - i'm gonna come back oh this is sad that
115:16 - this is the end
115:21 - oh no whoops i hit the wrong
115:23 - team
115:24 - c's everybody
115:28 - um i'm gonna come back
115:31 - um
115:32 - i'm gonna sort this out and i'm gonna
115:34 - come back stay tuned to my twitter i
115:36 - really have to go
115:39 - i mean i i
115:47 - okay um i um
116:05 - um
116:07 - when will i be back i don't know
116:11 - i'm sorry everybody
116:13 - there's so many people watching too
116:15 - i really want to like
116:18 - what if i just try to do the meta balls
116:20 - in the next 10 minutes
116:23 - okay
116:24 - all right
116:25 - everybody
116:27 - we need a win
116:29 - this is probably going to like make
116:31 - things worse
116:33 - but i'm going to put this to the side
116:35 - i'm going to do some more research i
116:37 - have to think about this more nicole and
116:39 - other people in the chat let's try to do
116:42 - the metaballs
116:45 - i mean they're kind of wavy like the
116:46 - ocean
116:54 - okay
116:59 - let's get the code for this
117:07 - okay right look out look how low
117:09 - resolution this has to be
117:11 - there's no reason why
117:14 - we shouldn't be able to first of all i'm
117:16 - going to do this with just one
117:19 - okay which i know is like sort of
117:21 - defeating the purpose in a way
117:23 - but
117:29 - this is what we need to do
117:32 - in
117:33 - oh my god
117:35 - i can do this
117:39 - the good news is let's okay okay
117:41 - duplicate this
117:44 - i i'm going to get rid of all these
117:46 - textures
117:47 - we don't need the textures the texture
117:49 - coordinate it's going to make things
117:51 - much simpler just need the uv coordinate
117:56 - we don't need this left stuff
117:58 - we're going back
118:00 - to
118:01 - what i used to be doing vec3
118:05 - uh color equals
118:08 - uh vect3 uv comma one
118:11 - we're going to set
118:13 - the frag to the color
118:15 - uh this we don't need the texture
118:17 - coordinate the varying
118:19 - we don't need
118:20 - we don't need this
118:24 - okay what am i missing here
118:29 - um
118:30 - equals i got him a syntax error you guys
118:32 - have really going to help me with this
118:34 - i'm going to make this happen fast
118:36 - fragment new resolution
118:39 - jail frag 1.0
118:44 - um
118:47 - what am i missing here
118:48 - what am i missing
118:51 - dimension mismatch okay hold on let's go
118:53 - back to sketch.js
118:56 - get rid of this
119:00 - all this image nonsense
119:03 - all these interesting ideas
119:06 - gone to the wayside
119:14 - uh shader
119:18 - uh ripple
119:20 - shader
119:23 - and then rectangle
119:26 - with height
119:28 - let's get back to the start of things
119:30 - okay what am i missing
119:33 - vek4 color
119:37 - thank you
119:40 - there's like a weird equals error
119:42 - somewhere
119:44 - fragment shader error equal dimension
119:46 - mismatch vect2uv
119:49 - effect two use resolution
119:53 - back four okay
119:58 - colors of x4 frag colors of x4
120:04 - back 3 vect4
120:08 - make 4 vs an xy gl position
120:12 - what what did i
120:15 - oh boy we're not going to get very far
120:16 - if i can't fix this
120:19 - constructor not enough data provided for
120:21 - construction
120:23 - oh my god
120:45 - okay
120:48 - that's fine
120:53 - oh it's a vector
120:56 - oh my god
121:00 - i'm just like
121:05 - oh my goodness silly me silly me silly
121:07 - me okay
121:08 - we're back in business people okay got
121:11 - it got it got it got it got it okay so
121:13 - now
121:14 - um
121:15 - metaballs
121:17 - so i'm gonna just use this idea of a
121:19 - blob
121:22 - which is a
121:24 - i'm closing this tab
121:27 - this is speed coding
121:30 - create file
121:32 - blob
121:33 - dot
121:35 - uh paste this in here
121:38 - um i am going to
121:40 - go here and we're just gonna have two
121:42 - blobs there's gotta be an away
121:44 - oh no i can pass a raise i can pass a
121:46 - raise to a shader probably right
121:49 - but i don't know how to do that so
121:53 - oh i what did i click on here
121:55 - i don't know what i clicked on here to
121:57 - get this
121:58 - strange comment in here but
122:01 - such is life am i in is this the
122:03 - fragment shader
122:04 - no this is so in this sketch
122:07 - we're gonna create um just two blobs
122:12 - okay yeah
122:13 - um
122:14 - i'm actually just gonna do one to start
122:16 - okay
122:18 - so
122:19 - come back over here
122:20 - come back over here
122:22 - i'm going to say
122:24 - let blob zero
122:29 - blob zero equals a new blob random width
122:33 - random height
122:37 - and
122:39 - we're going to have a
122:41 - in the fragment shader
122:43 - uniform
122:45 - vect2
122:47 - blob 0
122:49 - and basically
122:51 - where am i
122:54 - and index.html
122:58 - needs the blob
123:03 - geez what is going on
123:07 - i'm doing this wait random is not
123:09 - defined
123:15 - what is even going on
123:40 - the blob dot js
123:42 - yeah that's what i'm doing new uniform
123:44 - blob to shaber then calculate
123:47 - what what
123:49 - anything with v gl uniform ending with v
123:52 - for vector what what is going on here
124:03 - okay
124:23 - check out those comments
124:24 - what's going on here
124:37 - what
124:41 - losing my mind here all right i'm gonna
124:43 - just do something very silly for a
124:45 - second
124:46 - and take this
124:49 - and put it
124:52 - here
124:55 - blob has already been declared
125:04 - what
125:10 - i'm like this is crazy
125:17 - okay
125:21 - we're going to do create vector
125:24 - okay
125:25 - okay we're just going to use a vector
125:28 - object i don't know what's going on i'm
125:29 - really losing my mind
125:32 - really i'm really
125:34 - i'm really losing my mind here this is
125:36 - like it's such a disaster
125:39 - import blob after importing pv
125:43 - p5
125:45 - make
125:46 - make it the second import oh is that
125:48 - really am i like
125:50 - was it a simple
125:52 - uh
125:54 - that doesn't make any sense
126:01 - it doesn't make any sense
126:19 - right this is what i want to do
126:26 - something crazy is going on there that i
126:28 - cannot explain
126:29 - so
126:32 - then
126:34 - what i want to do is
126:41 - ripple shader set uniform
126:44 - u blob
126:46 - zero
126:48 - with uh
126:50 - blob zero dot x blob zero dot y
126:53 - okay
126:54 - i i don't know why my blob class wasn't
126:56 - working
126:57 - so now i should be putting
127:01 - the blobs location
127:03 - into the
127:04 - this um
127:06 - uniform blob zero
127:08 - then um
127:12 - blob
127:15 - u v equals blob
127:18 - zero dot x y divided by u resolution dot
127:21 - x y
127:23 - there should be a distance function
127:26 - is it called distance uv blob
127:29 - uv
127:31 - the color
127:34 - should be vect4
127:36 - distance distance distance well color
127:38 - should be vec3 distance
127:43 - color
127:44 - 1.0
127:49 - what did i get wrong here
127:54 - parameter one is not at the
127:56 - vector blob uv
128:03 - i've made things worse
128:05 - this is like the saddest day of my life
128:14 - you blob zero
128:17 - and in frag it is
128:22 - u blob zero
128:26 - view blob zero
128:29 - blob u v
128:34 - and sketch.js you blob zero
128:42 - line 12 in shader
128:45 - vect4
128:47 - ah vect3 there we go
128:49 - there we go okay
128:51 - there we go aye
128:53 - metaballs we're in business
128:55 - okay
128:57 - uh
129:00 - sketch particle
129:15 - and i'm going to write update
129:32 - okay
129:34 - um so
129:37 - the blob should be moving right
129:44 - oh it is just very slowly
129:47 - um
129:50 - so let's make let's make the bob at zero
129:53 - zero
129:54 - and then uh
129:57 - have it be
129:58 - moving um
130:02 - one one okay so we should see this
130:05 - moving across
130:06 - okay awesome
130:08 - moving across there we go okay
130:11 - um
130:13 - oh blob is a class from javascript
130:15 - that's why you're getting weird errors
130:16 - with the blob class yes that's
130:18 - definitely the issue but how come i
130:20 - didn't have that problem before i'll
130:21 - never know why i don't care i'm doing it
130:23 - this way
130:24 - it's a particle
130:26 - um okay okay so now
130:30 - we just need to have it bounce
130:45 - okay
130:46 - this is some very fast
130:48 - bouncing ball logic
131:04 - okay
131:06 - we should see it kind of like
131:10 - and i think did i lose my um okay that
131:14 - doesn't matter
131:15 - did i lose my
131:18 - pixel density issue yeah pixel
131:22 - density one
131:26 - okay great now let's go to
131:30 - the frag shader
131:32 - and let's have
131:35 - i don't actually care about flipping it
131:36 - i'm gonna leave it um let's have that
131:39 - distance be like um
131:43 - the distance is some number between
131:45 - let's just do one minus that's sort of
131:47 - silly but
131:50 - oh one point zero
131:59 - yeah that's fine uh
132:02 - okay so um it's brighter near there so
132:05 - now i just need to have like two of
132:06 - these
132:07 - which is this is very silly what i'm
132:09 - doing
132:13 - so and there's got to be a way we're
132:14 - going this is going to get so improved
132:18 - after i leave later tonight i will
132:23 - tweet it leave leave a link in the
132:24 - description i don't know
132:26 - um blob one equals 100
132:30 - comma 50.
132:32 - um let's also do another uniform blob
132:36 - one
132:37 - i mean this is a ridiculous thing that
132:38 - i'm doing here
132:40 - but it's gonna work in a sort of silly
132:43 - way
132:44 - um
132:46 - so we have you blob one
132:48 - uh we need to make update blob one
132:51 - and now
132:53 - i just need in here
132:56 - to basically do
132:58 - the metaballs algorithm with two
133:01 - different blobs
133:06 - i don't know how to use a raise with a
133:08 - uniform so we'll do that another time i
133:12 - mean i kind of have an idea of how i
133:13 - would do it but i'm already now i'm like
133:15 - i'm 45 minutes over but i'm like 10
133:17 - minutes like five minutes over the extra
133:19 - 10 minutes i got
133:21 - but i've got it i've got to get this
133:23 - okay so let's go to the code and now the
133:25 - math
133:27 - is
133:29 - the square root
133:35 - do i have everything like
133:37 - that's weird the difference is x my oh
133:40 - that's the given pixel the difference
133:42 - got it got it got it got it got it okay
133:44 - so we need to sum
133:45 - all right we're gonna do this algorithm
133:48 - here
133:49 - here we go everybody
133:50 - um
133:52 - come back to me
133:53 - fragment shader i'm so there i'm so
133:56 - there so basically
133:58 - i need to have
134:00 - the sum equals zero
134:02 - then i need to have a vector difference
134:06 - equal
134:08 - the
134:09 - uv
134:12 - minus
134:14 - blob
134:15 - 0
134:16 - xy
134:17 - right
134:19 - i want to look at the difference
134:21 - then
134:23 - sum
134:24 - plus okay oh oh the blob should have a
134:27 - radius so we're just going to
134:29 - arbitrarily make up a radius
134:31 - they're each going to be 0.1 i don't
134:33 - know if that makes sense that's pretty
134:35 - large the difference is these two things
134:38 - so now
134:41 - uh d equals is square root a function
134:46 - is square root of function in shaders
134:48 - we're about to find out it looks like it
134:50 - is
134:51 - uh square root of u v
134:54 - dot x times u v dot x i'm sure oh
134:56 - there's a length
134:58 - isn't there a length
135:01 - isn't it just this
135:04 - and then
135:06 - sum
135:08 - uh so this is diff 0
135:11 - and d0 sum plus equal
135:17 - 10 times r divided by d0 okay
135:21 - uh
135:27 - okay what's wrong here
135:34 - float oh
135:36 - okay
135:38 - no
135:39 - just zero
135:43 - no
135:44 - d zero
135:47 - ten point zero
135:50 - no
135:57 - yes length
136:00 - so what's what's wrong here
136:06 - u v x y minus blob zero ah
136:09 - blob
136:12 - blob zero u v that's what i want blob
136:14 - zero u v
136:18 - okay
136:19 - blob zero u v is u blob zero
136:23 - u v x y
136:26 - oh okay
136:27 - don't do that
136:29 - okay okay great so i've basically got
136:33 - the distance
136:35 - oh i could have just done that with the
136:36 - distance function but fine
136:39 - no big whoop
136:41 - uh now
136:45 - we're gonna do
136:47 - the distance and of course i need to use
136:49 - an array and a loop
136:56 - this one uv
137:00 - effect to blob one uv is you blob one
137:03 - okay
137:07 - what am i missing here did i forget to
137:09 - set the uniform you blob one
137:18 - uh
137:19 - [Music]
137:20 - so close right
137:24 - ah
137:29 - okay
137:30 - now the question is
137:33 - uh now
137:47 - i can't
137:48 - tell if this is
137:55 - oh
137:57 - some
138:00 - okay
138:03 - don't scale up
138:04 - oh yeah
138:06 - metal balls yes i did
138:10 - i did
138:12 - i did it
138:14 - okay hold on everybody
138:17 - i knew i could win this i knew i could
138:20 - win this ah yes um hold on hold on hold
138:23 - on
138:25 - oh this is like not a relevant file
138:26 - anymore delete that file yes something
138:30 - happened
138:32 - after all of this oh my god i'm so happy
138:35 - even though i'm gonna have i'm gonna
138:36 - have to like
138:38 - i don't know okay
138:43 - i mean there's just so much more
138:50 - okay it's only two they have the same
138:53 - radius
138:55 - i'm not doing color yet
138:57 - but um
138:59 - oh that's so satisfying
139:03 - uh
139:03 - like i can make them bigger oh look at
139:06 - that oh look at this
139:07 - let's see let's see how
139:09 - how far can we push this
139:12 - because
139:14 - just to be clear about this just to be
139:16 - clear why we're here even though i've
139:18 - got to go
139:25 - it's a little slow
139:28 - but i think it's just slow because the
139:29 - things are moving slow
139:32 - um because
139:39 - yeah look at this
139:44 - hold on hold on hold on i just
139:46 - really want this to demonstrate
139:51 - what i want to ex there we go okay look
139:54 - at this
139:56 - look how fast that's running just to
139:58 - show you just to show you actually i
140:00 - just started with this
140:02 - metabolism just if i go to just go back
140:06 - to my metaballs code in p5.js
140:09 - right this is
140:11 - 400 by 200 if i just make this 400 by
140:15 - 400 this is raw pixel operations
140:18 - if i make this 800 by 800
140:24 - i mean this runs so so so slow
140:28 - so now
140:30 - just to prove the point they're telling
140:32 - me bruno is saying make it full screen
140:34 - this is i've got to get out of here but
140:36 - i'm just so happy that this worked
140:38 - um
140:39 - no you know the thing is like it needs
140:41 - to be a square
140:43 - i mean i could have it not be a square
140:44 - it's gonna i'm not doing anything to
140:46 - account for
140:47 - non-square
140:49 - sizes but let's just do it anyway window
140:52 - with
140:53 - window height team c's everybody
141:09 - team c's
141:10 - everybody ah
141:13 - i've got to go goodbye everybody as
141:16 - always i always forget that this stock
141:17 - this stock it's stopping i hope you
141:19 - enjoyed
141:20 - this live stream
141:23 - don't forget about this stuff
141:38 - say goodbye adequately
141:41 - [Music]
142:05 - see you next time uh happy team seas
142:08 - everybody support tvcs
142:10 - goodbye
142:14 - never forget this stop
142:16 - i'm gonna do this
142:29 - you