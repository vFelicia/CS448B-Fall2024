00:00 - [BELL RINGS]
00:00 - Hello and welcome to chapter two
of the Nature of Code, forces.
00:06 - So I want to start
with this discussion
00:08 - by talking about
Newton's laws of motion.
00:11 - So by no means is
anything I'm going
00:14 - to do be a really accurate,
robust physics simulation.
00:18 - But at a minimum,
I want to examine
00:21 - what the basic laws of motion
are, the basic principles
00:24 - behind how things move,
and just make sure
00:27 - that the code I'm writing fits
with that for the most part.
00:32 - So let's start with
those laws of motion.
00:34 - Law number one.
00:38 - This is how it is often
referred to most informally--
00:41 - an object at rest stays at rest.
00:44 - However, a more accurate
statement of this
00:47 - might be, an object
at rest stays at rest
00:49 - and an object in motion stays
in motion at a constant speed
00:53 - and direction unless acted
upon by an unbalanced force.
00:57 - So that's a bit of
a mouthful of stuff,
00:59 - but let's unpack
that for a moment.
01:01 - Let's think about this in
the context of our P5 canvas
01:06 - and the object being
a circle that I'm
01:09 - drawing on that canvas.
01:11 - If this circle is going to
obey Newton's first law,
01:16 - if it's not moving, there's no
reason for it to start moving,
01:19 - or if it is moving at a
particular velocity vector,
01:24 - there's no reason for
that velocity vector
01:26 - to ever change unless
acted upon by a force.
01:31 - The definition that
I offered over here
01:33 - uses the term unbalanced force.
01:36 - So something that's very
important about this concept
01:38 - of staying at rest or staying
at a constant velocity
01:42 - is that it's not just whether
the force is there or not,
01:44 - but whether the
net force, the sum
01:47 - of all the forces
in the environments,
01:49 - add up to something non-zero.
01:51 - For example, with my
marker here, there's
01:53 - a force of gravity pulling
it down, presumably
01:57 - towards the center of the
earth, but there's also
01:59 - some other forces that I'm
applying to it to keep it up,
02:03 - that are pushing it up.
02:04 - And so if I try my best
to balance the force--
02:07 - balance the force-- then
it won't move at all.
02:10 - This diagram is another
example of this.
02:12 - So all of these forces
balance themselves out,
02:15 - and this object is at
a state of equilibrium,
02:17 - meaning it won't
start moving, or if it
02:19 - were, its velocity
would remain constant.
02:21 - And the reason I'm
harping on this
02:23 - so much is I really
want to make sure
02:25 - when I go to write
the next bits of code
02:27 - that I'm going to write, that
the simulation obeys this law.
02:31 - But in order for it to obey
this law in the first place,
02:34 - I have got to understand--
02:35 - I'm using the term force
all over the place.
02:37 - It's really important that
I think I take a moment now
02:39 - to define what I mean by force.
02:46 - A force is a vector that
causes an object with mass
02:51 - to accelerate.
02:52 - That is the technical
definition that I
02:54 - am going to use for force.
02:57 - Here's the good news.
02:59 - Vector-- check.
03:01 - We've got that.
03:01 - I just did a whole section of
videos about what is a vector,
03:05 - so we can understand
force as a vector.
03:07 - Here's more good news for you.
03:09 - Accelerate-- check.
03:11 - I just did a video tutorial
about how to apply acceleration
03:16 - in a P5 sketch.
03:17 - So if we can create
a vector and somehow
03:20 - have that vector affect
the object's acceleration,
03:24 - then we are
implementing a force.
03:27 - And if the way that we
implement the force in our code
03:30 - obeys this law,
then we are golden.
03:34 - One thing here--
mass is not something
03:37 - that I have discussed,
or used, or implemented
03:40 - as a property of any of the
things I've done so far.
03:43 - So let's put a question mark
there and return to that.
03:46 - Which leads me to
Newton's second law,
03:50 - F equals M times A, or Force
equals Mass times Acceleration.
04:00 - I can also describe this
law as a restatement
04:04 - of the definition of force.
04:06 - Force is a vector that causes an
object with mass to accelerate.
04:11 - We're turning back to
the code for a moment.
04:13 - I have these two lines of code--
04:16 - vel.add(this.acc),
pos.add(this.vel).
04:23 - And in this example, everything
starts with acceleration.
04:27 - I'm calculating an
acceleration based
04:29 - on a vector that points
from the object moving
04:33 - to the mouse itself.
04:35 - So if everything starts
with acceleration,
04:38 - maybe I need to rethink
the way that I'm
04:41 - describing this formula.
04:43 - And a different way that I could
consider it is acceleration
04:49 - equals force divided by mass.
04:53 - The idea being that if
I introduce some force--
04:56 - like let's say there
is a wind force
04:59 - with a magnitude and
direction that I want
05:01 - to put into this environment.
05:04 - If I have that force, I could
take that force, divide it
05:07 - by this object's mass, and
that would become the object's
05:11 - acceleration, which would then
affect its velocity, which
05:14 - would then affect its position.
05:16 - And this is the technique, the
strategy by which everything
05:20 - I do is going to be built upon.
05:23 - I'm really ready to start
implementing this in code.
05:25 - But before I do so, there's a
few things I want to address.
05:27 - One is you might
hear, when looking
05:30 - at how physics engines are
built, the term integration.
05:34 - And this is actually one
way of doing integration.
05:38 - This specific way is referred
to as Euler integration.
05:43 - Why is it called integration?
05:44 - I'm getting into the weeds here
into the math aspect of this,
05:47 - but it is important, and
I think this will help you
05:49 - as you move forward and
do more of this stuff
05:51 - when you see the lingo
popping up here and there.
05:54 - In calculus, there's the
concept of a derivative.
05:57 - And you might typically see
this as written as like dx
06:02 - over dt, the change in x
with the change in time.
06:06 - This is actually what
velocity is doing.
06:09 - Velocity is dx dt.
06:12 - If x is position,
velocity is the change
06:14 - in position over time.
06:16 - Acceleration is the change
in velocity over time.
06:19 - So velocity can be thought of
as the derivative of position,
06:24 - and acceleration can be
thought of as the derivative
06:26 - of velocity.
06:27 - But I'm not going
in that direction.
06:29 - I'm not starting with
position, and then
06:31 - figuring out what's
the velocity,
06:33 - and then figuring out
what's the acceleration.
06:34 - I'm going in the other way.
06:36 - I'm starting with
what's the acceleration,
06:38 - and then changing the velocity,
and then taking the velocity
06:41 - and changing the position.
06:42 - So the other direction
of doing the derivative
06:44 - is integration, the integral.
06:47 - So that's why this process
is tied to calculus
06:50 - and the concept of integration.
06:52 - The big difference
here is that calculus,
06:55 - being the study, in a way,
of infinitesimally small time
06:59 - steps, these time
steps are quite large.
07:03 - This algorithm is just being
applied 30 times per second.
07:07 - But as I move my
arm back and forth,
07:09 - are you seeing this animation
at 30 frames per second?
07:12 - Maybe because you're
watching a video, which
07:14 - is then recording me and playing
it back at 30 frames a second.
07:17 - But the actual physical
time space that I'm in
07:20 - is very continuous.
07:21 - The time step is
infinitesimally small.
07:24 - And if I were doing an accurate
calculation of a physics
07:26 - simulation, I would need to
take that under consideration.
07:30 - Instead, I'm using a technique
called Euler integration, which
07:33 - allows me to have fixed time
steps, which are rather large,
07:36 - and it's wildly inaccurate.
07:38 - And I'll maybe back
circle back to this
07:40 - as I look in future videos about
other integration techniques.
07:45 - There's Berlet
physics, and there's
07:46 - Runge Kutta integration.
07:48 - I probably didn't
say that correctly.
07:50 - And so maybe I could
circle back when
07:52 - we look at other
physics libraries that
07:53 - might have slightly more
robust methodologies
07:56 - underneath the hood.
07:57 - But the reason why I like this
methodology is, number one,
08:01 - it works just fine.
08:02 - I just want my particles
to spiral around the screen
08:04 - in pretty ways.
08:06 - And two, it's really fast
and really easy to implement.
08:09 - So it has its
advantages in terms
08:11 - of the kinds of examples
and demonstrations
08:13 - that I want to show you.
08:15 - Also, I know there's
so much more to this.
08:17 - Before you start typing your
comments in the chat about
08:20 - the theory of relativity,
and space-time continuum,
08:23 - and Planck time, and
also "Plonk" time--
08:25 - I don't even know
how to say it--
08:27 - my goal here is
not to go in-depth
08:28 - into the physics
of this, and I'm
08:29 - glad to include in this
video's description
08:31 - other resources
that do, but to take
08:33 - these ideas, these
core classic concepts,
08:37 - and then work out a way
to implement them in code.
08:40 - I should also mention there
is Newton's third law, which
08:44 - is often stated as,
for every action,
08:46 - there is an equal and
opposite reaction.
08:48 - That's a little bit
misleading, and I've written
08:50 - some thoughts about that here.
08:52 - Another way of
stating that law is,
08:54 - forces always occur in pairs.
08:56 - The two forces are
of equal strength
08:58 - but in opposite directions.
09:00 - So to be honest, this law is not
so meaningful to me right now.
09:04 - Trust me, it's
kind of important.
09:06 - But in terms of the simulation
that I want to start with,
09:09 - I am not going to
bother to simulate
09:12 - every possible
reaction and opposite
09:14 - interaction of every
force within the system.
09:17 - But this will come up again,
and I will look at this law
09:20 - when, in a future video
as part of this section,
09:23 - I look at gravitational
attraction
09:25 - and how two bodies both
attract each other,
09:29 - and those forces are
of equal strength
09:30 - but in the opposite direction.
09:32 - To get started implementing
Newton's second law in code,
09:35 - I want to build
off of the example
09:37 - that I finished with in the
previous section on vectors.
09:40 - So here, I have
this mover object.
09:41 - It starts at a
position 200, 200,
09:43 - and two functions are
called, update() and show().
09:46 - So if I run it,
the acceleration is
09:48 - being calculated as a vector
pointing towards the mouse.
09:51 - You could think
of it as a force,
09:53 - a gravitational attraction
force pulling into the mouse.
09:56 - It's not really that.
09:57 - Of course, it's not really that.
09:58 - It's just some
pixels on a screen.
10:00 - But I'm not even
using the formula
10:02 - for gravitational attraction.
10:03 - So I'm going to
circle back to that
10:05 - and make some changes to
this kind of idea later.
10:09 - But right now, what I want to do
is change the way the internals
10:14 - of the mover object
works because right now,
10:17 - the acceleration is being
calculated right here
10:19 - in update(), and I
don't want to do that.
10:22 - Instead, I want to
write a function that's
10:25 - basically Newton's second law.
10:31 - So I want to write a function--
10:33 - I'm going to change
its name in a moment--
10:35 - that implements
this particular law.
10:38 - The law, again, is force
equals mass times acceleration.
10:41 - But I've rewritten it
to acceleration equals
10:44 - force divided by mass.
10:46 - Guess what?
10:47 - Let's just pretend for a moment
that the world we live in,
10:50 - the world that I'm programming
in, there's no concept of mass.
10:53 - In fact, everything in
this entire universe
10:56 - has a mass of 1.
10:57 - So in that case, going
back to this law of force
11:00 - equals mass, which is
1, 1 times acceleration
11:07 - is really just same as
force equals acceleration
11:09 - or acceleration equals force.
11:11 - So these are the same concepts.
11:13 - Meaning, I could just
say this.acc = force.
11:18 - There we go.
11:18 - This is the simplified version
of Newton's second law in code.
11:24 - I'm going to change the
name to applyForce(),
11:28 - the idea being that what I
want to do is take a force that
11:31 - exists in the environment,
not something calculated from
11:35 - within the object.
11:36 - That's going to be
important later in some
11:38 - of the other videos I'll do.
11:39 - But right now,
imagine a wind force
11:41 - external to the object,
or a gravitational pull
11:43 - maybe pulling it down along the
y-axis external to the object.
11:48 - For example, let gravity
equal createVector(0, 1).
11:57 - I'm making a vector
that points down,
11:59 - and then I want to say
mover.applyForce(gravity).
12:05 - Let's run this code.
12:07 - Remember, this is the
applyForce() function.
12:09 - It sets the acceleration
equal to the force,
12:11 - and then that acceleration
is added to velocity
12:13 - and that velocity is
added to position.
12:16 - Ooh.
12:17 - [BUZZER]
12:19 - I forgot that I'm programming
in a class, and in a class,
12:23 - I don't use the keyword function
to define an instance method
12:26 - of that class, I just
say applyForce().
12:28 - Ugh.
12:32 - There we go.
12:34 - Look at that.
12:35 - There's that force of
gravity pulling it down.
12:38 - This sketch is a little bit
sad because the ball falls
12:41 - and it never comes back.
12:43 - So just for the purpose
of demonstration,
12:47 - I'm going to add an
artificial constraint
12:49 - to this particular
sketch, where what
12:51 - I'm going to do is I'm going
to look at this bottom edge,
12:54 - and if this circle
reaches the bottom edge,
12:57 - I'm going to take its
velocity and reverse it.
13:00 - Really, if I were doing
a physics simulation,
13:02 - I would think about this as an
object with a different mass,
13:05 - and what kind of
forces are happening
13:06 - when it hits that object.
13:08 - But I'm going to just bypass all
of that with a quick shortcut.
13:10 - I can come back and look at
that a little later, maybe.
13:13 - But I'm going to bypass
that with a quick shortcut
13:15 - of just inverting the velocity.
13:17 - And I'm going to do that by
adding a function called edges
13:19 - to keep track of when
the object hits an edge.
13:27 - So this is really your
classic bouncing ball code,
13:29 - and I have another video that
goes through this algorithm
13:33 - more specifically.
13:34 - But what I'm looking for
is anytime that y position
13:37 - is at the bottom of
the canvas or below--
13:39 - because testing if
it's equal to height
13:41 - is not going to do me any good.
13:43 - If it's not precisely equal,
it could easily move past--
13:45 - then I'm going to shove
it back up to height
13:48 - because if it goes too
far and it turns around,
13:50 - it could get stuck.
13:50 - So I'm going to make sure
even if it goes past height,
13:52 - I set its position to height
and then reverse its velocity.
13:55 - And let's take a look.
13:58 - Ooh, that didn't work.
13:59 - Why didn't it work?
14:00 - It's one thing to
write a function.
14:02 - It's another thing to call it.
14:04 - So let's say mover.edges().
14:09 - And there we are.
14:09 - So now this gravitational force
is pulling the object down
14:14 - and it's bouncing up or down.
14:15 - Why is it going off to
the right a little bit?
14:17 - It's going off to the
right because I gave it
14:19 - an initial random velocity.
14:21 - Interestingly, you
notice how it's
14:22 - slowing down and eventually
kind of losing its bounce
14:26 - and stopping?
14:27 - In a weird sort of way,
that's what I wanted to do.
14:29 - That feels realistic.
14:30 - But I can't see in the code why
it's doing that because really,
14:33 - I'm reversing its velocity.
14:35 - There's nothing causing it.
14:36 - It should go all the
way back up to the top,
14:37 - and then all the way back
down there, then all the way
14:39 - back up to the top.
14:39 - And this, I think, is because
of this Euler integration.
14:42 - I'm not looking at
continuous time.
14:44 - And there's a lot of
inaccuracies here.
14:45 - Not to mention the
fact that I'm violating
14:47 - all of the principles
of time and space
14:48 - by just resetting its
position back to the height
14:51 - if it got below
the height, so it's
14:52 - losing some time where it might
regain its velocity moving back
14:55 - up.
14:55 - So there's all sorts of
goofy stuff going on here.
14:57 - And these are the
kinds of things
14:59 - that as a programmer,
working with this
15:01 - in a creative
context, ultimately,
15:03 - I'm going to need to do
massaging and tweaking
15:05 - things to get it to
feel right, whatever
15:08 - the types of application it
is that I'm wanting to create.
15:11 - But right now, I just want to
test if Newton's second law is
15:15 - at play.
15:17 - And I'm going to test
that by doing this.
15:23 - Only if the mouse is pressed,
apply this force of gravity,
15:27 - meaning the net
force is currently 0
15:31 - so the object is at rest.
15:33 - Now I am going to
apply the force.
15:36 - I'm going to let go.
15:39 - Oh.
15:41 - [FAKE SOBS]
15:42 - [BELL DINGS]
15:45 - I'm applying gravity,
but when I let go,
15:47 - I think the gravity should
stop being applied because I'm
15:50 - no longer pressing the mouse.
15:51 - But the gravity still
seems to be there.
15:53 - Why is that?
15:55 - Well, there's a flaw in the
way that I programmed this.
15:58 - The flaw is that I'm setting
the acceleration equal to force.
16:01 - If the force goes away, I don't
set the acceleration back to 0,
16:05 - but I should.
16:06 - So one of the strange things
about this Euler integration
16:09 - and algorithm is that while
velocity and position are
16:13 - accumulating over
time, acceleration
16:16 - is just a function, a
calculation based on,
16:19 - at any given moment
in time, what
16:22 - are the forces in
the environment?
16:23 - So at any given
time, we should start
16:26 - with an acceleration of 0.
16:28 - And there only is
an acceleration
16:31 - if there is a non-0 force.
16:33 - So there's a variety of ways
that I could handle this.
16:37 - I'm going to just, I think, for
simplicity, say this.acc.set(0,
16:40 - 0).
16:43 - So this is me just
clearing the force out
16:47 - at the end of every
animation cycle.
16:50 - So now, let's see if
Newton's second law--
16:53 - sorry, first law-- is really
at play, and the second one.
16:56 - Oops.
16:57 - Cannot read properties
set of undefined because I
17:00 - haven't given acceleration
of value until I've applied
17:03 - the force, so this is just
a flaw in how I've written
17:06 - the constructor.
17:07 - I also need to say, initialize
a starting acceleration of 0.
17:13 - Now here we go.
17:16 - The object is staying at rest.
17:18 - There's no force.
17:19 - I click the mouse.
17:20 - Whoop.
17:21 - I let go of the mouse
and it just flew off.
17:23 - Let's make the
gravity less strong.
17:26 - I'm going to change this to 0.1.
17:29 - I'm holding down the mouse.
17:30 - There's gravity.
17:31 - I let go.
17:32 - The gravity is gone.
17:33 - The object keeps its
constant velocity
17:36 - because there's no
force acting on it.
17:39 - Let's try also now
adding a second force
17:43 - into the environment.
17:44 - So there's one force pointing
straight down called gravity.
17:48 - Let's add another force called
wind and point it to the right.
17:52 - Let's get rid of the
if (mouseIsPressed).
17:54 - I'll come back to
that in a little bit.
17:59 - So now I've got
gravity pointing down
18:03 - and wind pointing to the right.
18:05 - Of course, I could have
just made one force
18:08 - with this as the x component
and this as the y component.
18:10 - But I'm demonstrating an
idea that as you start
18:13 - to build these kinds
of simulations,
18:15 - there might be a variety of
forces that are at play or not
18:18 - at play, based on any
number of factors,
18:20 - and you can now separate those
out into different vectors
18:23 - and individually apply
them to your object.
18:25 - Let's run this sketch
and see what happens.
18:28 - Wait a second.
18:30 - This I anticipated-- this error.
18:32 - Why is gravity
not being applied?
18:36 - I only see wind.
18:38 - Let's change the order here.
18:40 - Let's put wind--
18:42 - I don't know.
18:42 - Let's move the code
around a little bit.
18:44 - Let's declare wind and
gravity there, but now
18:47 - apply them like this.
18:48 - I don't know.
18:48 - Is that going to do anything?
18:49 - Wait.
18:50 - Now, only gravity is being
applied, but not the wind.
18:53 - Go back into the mover.
18:55 - What's wrong?
18:57 - this.acc = force.
19:00 - So stepping through the
code, mover.applyForce(wind).
19:06 - this.acc = wind.
19:08 - move.applyForce(gravity).
19:10 - this.acc = gravity.
19:12 - I just overwrote the wind.
19:16 - The wind is ignored because
I'd take gravity and put it
19:18 - into acceleration.
19:20 - As I was diagramming
this and describing it,
19:22 - I think a couple of times,
I used this term net force,
19:27 - or the sum of all
forces, or this idea
19:30 - of force accumulation.
19:32 - Meaning the object's
acceleration
19:35 - is a result of the sum of all
of the forces in its environment
19:39 - at any given time.
19:40 - Wind and gravity both
act on the object,
19:43 - and both get added
into the acceleration.
19:46 - So this applyForce() function
shouldn't actually set
19:49 - acceleration equal to force,
but rather it should call add.
19:56 - this.acc.add(force).
19:58 - I can call applyForce() as many
times as I want and add up all
20:02 - the forces into
the acceleration.
20:05 - There we go.
20:07 - The visual result of that
isn't super interesting.
20:10 - Let's make it a little more
interesting by saying--
20:17 - and I'll make the gravity
a little stronger.
20:20 - So now the wind will only be
applied if I click the mouse,
20:24 - but gravity will
always be applied.
20:26 - Let's see if this works.
20:29 - There's the ball bouncing.
20:31 - And now I'm going to click
the mouse and the wind-- oh.
20:34 - Let's add some more edges.
20:42 - So now I've added a check
for the right and left edges,
20:45 - and make sure the x
slides back onto the edge,
20:48 - and the velocity is reversed.
20:50 - We have probably more elegant,
and efficient, and shorter way
20:52 - to write this, but I'm
just putting it in there
20:54 - to get it to work.
20:55 - Let's see how the
forces are going.
20:57 - Gravity.
20:58 - And now I'm going to click the
mouse, and wind is happening.
21:01 - You can see that.
21:01 - The wind is pushing
it in that direction.
21:03 - But let's let go of the
mouse and now the wind
21:06 - is no longer there and it's
bouncing back and forth.
21:08 - The x velocity is constant now
because there's no x component
21:15 - to the net force.
21:17 - But I could add the wind back
in and we can see now it's
21:20 - pushing it to the side.
21:21 - I could also just increase
the relative strength
21:24 - of these forces, just to
see what that looks like.
21:28 - And we can see that here.
21:30 - And we see I already
have a pretty interesting
21:32 - and dynamic simulation going.
21:34 - This is a small detail
and not super important,
21:36 - in terms of what
I'm doing, but it
21:38 - would be nice to actually
have the ball reverse
21:41 - its course when the
edge of the circle
21:43 - hits the edge of
the canvas, rather
21:45 - than the center of the circle.
21:47 - So in that sense, I could
add another variable for r
21:50 - to keep track of
the object's radius.
21:52 - So I'm going to say this.r =
16, and then draw the ellipsis,
21:56 - this.r * 2, and then use this.r
to determine where the edge is.
22:03 - Let me have it move a little
slower so this is hopefully
22:06 - a little more visible.
22:10 - Ooh.
22:11 - Whoa.
22:12 - I forgot something.
22:13 - I've got to set
it back to this.r.
22:22 - There we go.
22:23 - So that's a little bit
more realistic in terms
22:26 - of where it's actually bouncing
in terms of hitting the edge.
22:33 - So this is a good stopping
point for this example,
22:35 - I think there's of twists
you could do on this.
22:37 - First of all, I've just
hardcoded numbers here
22:39 - for wind and gravity.
22:41 - There might be other ways you
think about calculating those.
22:44 - For example, you could actually
pull from a weather API
22:46 - and get the actual wind and
have that affect this object.
22:49 - Or you could use Perlin noise.
22:50 - Maybe these vectors
are changing over time
22:53 - for some other reason, or
there's more than two forces.
22:55 - So many ways you could
go in this direction,
22:57 - but this is a bit
of a foundation,
22:59 - upon which you could build a
simple interactive simulation.
23:03 - There's a couple
of different things
23:05 - that I want to do with
this example, which
23:06 - I'll do in separate videos.
23:07 - Number one is there's
no concept of mass here.
23:10 - So what would it mean if I
added to the mover object
23:12 - a mass property, and how
would I use that mass value
23:16 - and actually bring that
back into the true Newton's
23:19 - second law, force equals
mass times acceleration?
23:22 - So I want to bring back mass.
23:24 - Bring back mass.
23:25 - Then I also want to
investigate other forces
23:28 - that I can look up a
real-world formula for
23:31 - and see if I can
implement those.
23:33 - And the first one
I'll do is friction.
23:34 - For example, there's
this thing happening
23:36 - where the ball comes
to a resting point,
23:38 - but then it just
rolls back and forth.
23:40 - Could I simulate the friction
of it against the edge
23:43 - and have it slow down and
reach a stopping point?
23:45 - So the next video, I'll start
with math, and then I'll
23:48 - look at friction, and
keep going from there,
23:50 - finishing up with looking
at the real formula
23:52 - for gravitational
attraction and how
23:54 - I might implement that in code.
23:55 - So maybe I'll see you, maybe I
won't, and go on with your day.
23:58 - May the force be with you.
23:59 - I said it.
23:59 - I said it.
24:00 - I said it.
24:01 - Goodbye.
24:01 - [MUSIC PLAYING]