00:00 - welcome so this video continues the
00:02 - series about building your own API in
00:05 - node and in this video what I want to do
00:07 - is add a very important very key piece
00:09 - of functionality which is persistence so
00:12 - right now this particular API that I'm
00:14 - building in node if you recall in the
00:16 - code at the top of the code just has
00:19 - hardcoded essentially a database a
00:21 - database of words and their sentiment
00:23 - score rainbow 5 unicorn 3 Doom neg3
00:26 - Gloom -2 so that there but there and and
00:30 - I can add um and I can add to it so I
00:32 - can I can go to a particular route and
00:35 - say add purple 4 and then if I go back
00:39 - to all I'll see that purple is there but
00:42 - as soon as I go to terminal quit and
00:45 - relaunch the server and go back purple
00:48 - is gone so I need some mechanism by
00:52 - which I can save the data
00:55 - forever whether or not I'm running the
00:57 - server quitting the server not just in
00:59 - memory and the way that this is done is
01:00 - typically with a database now a database
01:03 - is a big topic and I expect that in the
01:06 - uh what I imagine future amount of time
01:09 - that I have in my life to make videos
01:11 - I'll get into a lot of different facets
01:12 - of it so what do we have so far is we
01:15 - have just like uh
01:17 - data in
01:20 - memory that's what I have so far quit
01:23 - the program the data is
01:26 - lost one quick and dirty way to save
01:29 - data to have data persist over time is
01:31 - simply to save to a text file it's easy
01:36 - to forget that you could just have a
01:38 - text file as a database right I can have
01:40 - a text file that has a list of words in
01:43 - it word comma score word comma score and
01:45 - I could just save all the stuff and load
01:47 - that when I when I run the
01:49 - program a way to make this even easier
01:52 - is to actually save this to a Json file
01:55 - Json standing for JavaScript object
01:57 - notation so uh this data if you look at
02:02 - this this is this is Javascript object
02:05 - notation this syntax of having a
02:07 - variable full of key value pairs that's
02:10 - Json so I can
02:12 - actually nice option is just save the
02:14 - data to a Json file and then uh load
02:18 - that Json file every time the server
02:19 - starts so this is actually the way that
02:21 - I'm going to do it in this particular
02:23 - tutorial but this is very limiting first
02:25 - of all if I have a massive amount of
02:27 - data huge data set this isn't going to
02:29 - work for well I have to like load this
02:30 - like giant text file and like save this
02:32 - giant text file all the time that's not
02:34 - going to work very well you know if I if
02:36 - I care about security and I have like
02:37 - private data just having it all just
02:39 - sitting there in a big text file like
02:40 - text file full of everybody's like
02:41 - logins and passwords that's not going to
02:43 - work very well so there are a lot of
02:45 - reasons why this isn't a particular
02:46 - great solution but for a quick and dirty
02:49 - project for understanding how things
02:51 - work playing around in node I think this
02:53 - is going to be a great demonstration but
02:55 - I will be making videos in the future
02:57 - that look at other database systems
02:59 - namely one one called Firebase Firebase
03:01 - is something that's referred to it's a
03:03 - Google product database as service
03:07 - meaning fireb you don't have to have
03:09 - your own server you're just a program
03:10 - and you're like keeping track of stuff
03:12 - and you're like hey Firebase can you
03:13 - save this for me I'll ask for you later
03:16 - and then later you come back and say
03:17 - Firebase got I have that data so you get
03:19 - an account you sign up you send a data
03:21 - you ask for data and it has a lot of
03:22 - sophisticated um features so that's
03:25 - certainly one thing you can do and then
03:26 - of course you could use a quotequote a
03:28 - real database or some type of database
03:30 - system there are other database that
03:31 - service uh products by the way so you
03:33 - can find those but you could use
03:35 - something like uh
03:37 - couchdb or mongod
03:39 - DB uh or uh another uh database that I
03:43 - actually like which is very simple which
03:44 - is called nedb I think so these um are
03:47 - all database systems that you can use
03:49 - with node or other server side
03:50 - programming Frameworks so U at some
03:52 - point somebody remind me hey weren but
03:54 - I'm definitely I have a whole bunch of
03:55 - examples already for Firebase so I
03:56 - intend to do that but I'd love to uh
03:58 - look into this kind of stuff and make
04:00 - some examples with that as well but in
04:01 - this particular video let's look at even
04:03 - just what saving a Json file gets us
04:06 - okay so uh back over here I'm going to
04:10 - go back to the code and the first thing
04:14 - I want to do is let's just actually make
04:17 - that Json file ourself so right here I'm
04:19 - going to in my node project where my
04:22 - server code is I'm just going to create
04:24 - a new file and I'm going to call it a
04:27 - words.
04:28 - Json and in that file instead of um
04:34 - instead of having this in the code I'm
04:35 - just going to take
04:37 - this and I'm going to comment this out
04:40 - and I'm going to put this into words.
04:42 - Json so here is now a Json file uh with
04:46 - the initial data that I want for my
04:47 - program to start with so now what I want
04:50 - to do in the in in the program is
04:53 - instead of having VAR words equal the
04:56 - hardcoded data I want to just load from
04:58 - the file I want to do do something like
05:00 - you know if I were in like client side
05:02 - P5 land I would just say like loadjson
05:04 - words. Json right I want just to load
05:07 - whatever in that file and stick in words
05:09 - but this is not node code this is uh P5
05:12 - code so I need a different set of Syntax
05:14 - for that so how do I do that in node
05:16 - well what I need to use is the fs uh
05:19 - module so FS node um uh node I'm just
05:23 - going to Google fs and node which and
05:25 - here I'm going to get the documentation
05:27 - for the file system API which is built
05:29 - part of node it's not an extra thing I
05:31 - have to install so this is the
05:32 - documation documentation for it there's
05:34 - a lot a lot of functions what I'm
05:36 - looking for is one called read file and
05:38 - right here so you can see first of all
05:40 - there's fs. readfile and Fs read file
05:44 - sync so why would I use one versus the
05:47 - other this is something I definitely
05:48 - want to talk about but let's just at
05:50 - first and actually I'm going to start
05:51 - with using read file sync so what I'm
05:54 - going to do is I'm going to say VAR FS
05:57 - equals require FS I think that's right
06:00 - this is like importing the file system
06:03 - package it's built-in part of node I
06:05 - don't have to install it but I do have
06:06 - to reference it in an import or require
06:07 - statement and then I want to say words
06:09 - equals FS read file sync words.
06:14 - Json and let's just see and then I'm
06:17 - going to say console.log
06:20 - wordss let's see what's happening here
06:23 - ah okay so it runs and look I read the
06:26 - file there's the file perfect there's my
06:28 - contents what is that so one thing you
06:31 - have to realize is the node file system
06:33 - package is just reading the raw data of
06:35 - files and writing the raw data out it
06:37 - doesn't know oh I want this to be like
06:39 - Json and all of that so if I have that
06:42 - raw data from the file but I actually
06:44 - want it to be JavaScript and JavaScript
06:46 - object I need to parse it and there's a
06:48 - quick and easy way of doing that so
06:51 - actually what I want to do is I'm going
06:52 - to say I'm just going to say VAR data
06:54 - equals that and then I'm going to say
06:55 - VAR words equals Json parse data so this
06:59 - is something you're going to see once
07:01 - I'm using a a local files when I want to
07:03 - read a file I need to interpret it as
07:06 - Json when I have a JavaScript I need to
07:09 - interpret it as a JavaScript object
07:10 - before I can use it when I have a
07:12 - JavaScript object and I want to save it
07:14 - to the file I need to convert it to just
07:15 - plain old text and then save it to the
07:17 - file so let's look how that works now
07:20 - and you can see there we go so now my
07:22 - server is reading that stuff so we've
07:25 - got step one in that everything should
07:27 - work as it did before
07:30 - all and I could add something but I'm
07:31 - still going to have the problem as soon
07:33 - as I quit the
07:35 - server and relaunch it anything that
07:37 - I've added will be gone so how do I now
07:39 - have persistence where in my code do I
07:42 - want to save data to the file itself
07:47 - well I want to do that anytime I add
07:49 - something new to this list and if I go
07:51 - back to the server program the only time
07:53 - I add something new to the list is right
07:56 - here under adword add word so this is
07:58 - where I want to save data now this
08:01 - brings me to another important point
08:03 - which I glossed over which I will come
08:05 - over here to discuss for a
08:09 - second sync versus no
08:13 - sync so there are both read file
08:18 - sync that's a function as part of the
08:20 - node file system package and there is
08:22 - also read file without the word sync
08:26 - there's also write file sync and just
08:28 - write file what's the difference the
08:30 - difference is this is synchronous or
08:33 - also known as like a blocking line of
08:36 - code meaning if I come back here if I'm
08:39 - using the sync function the next line of
08:43 - code will not execute until that action
08:45 - has been finished and in this case
08:48 - that's what I want when the server
08:49 - starts up I don't want to do anything
08:51 - actually until the data has been read so
08:53 - I want to use the synchronous version so
08:55 - I load the data and it makes I don't
08:56 - have to have a call back and it makes
08:58 - writing the code a little a little bit
09:00 - simpler however if I'm going to perform
09:03 - an action where I'm reading and writing
09:04 - to files while a user is making an API
09:07 - request I don't want to use the sync
09:09 - method because that'll actually lock up
09:10 - the server while it's waiting to do this
09:12 - operation I want to use the non-sync
09:15 - asynchronous version so a call back will
09:17 - happen and the server can still listen
09:18 - for other connections and that type of
09:20 - thing so this is now a moment where
09:23 - right here under um ADW I want to write
09:28 - the data to back to the file but not but
09:31 - asynchronously so let me show you how
09:33 - that
09:35 - works so first of all
09:38 - um this is a little air handling that we
09:40 - built in last time so I don't want to
09:41 - write the data if there a score wasn't
09:43 - given so I want to write the data right
09:46 - here so I can say now
09:50 - write
09:52 - file uh words oh let's let's look at the
09:57 - documentation uh let's look for for WR
10:00 - file WR file so it looks like write file
10:03 - I need to give it the file name and the
10:05 - data and there's some other options and
10:07 - that sort of thing so but I'm going to
10:09 - do it simply I need to say write to
10:11 - words.
10:13 - Json and now a call uh the data which is
10:17 - words and then a call back uh finished
10:20 - I'll call it and then I could say
10:21 - function finished you know maybe it gets
10:23 - an error or something I don't actually
10:24 - know I should look this up just going to
10:26 - say console log all set
10:31 - so let's look at this now and see what
10:34 - happens now now first of all I've made a
10:35 - a big I've made a big mistake already
10:38 - but let's just see what happens anyway
10:39 - even with my mistake probably going to
10:41 - get an error or something like that so
10:43 - the the server has restarted it's
10:45 - listening and waiting let's go to the
10:46 - add route and I'm going to say uh I want
10:50 - to add the word purple and the score
10:53 - three now right file is not defined okay
10:57 - oops silly me I actually just made a
10:59 - mistake in my code where I need to say
11:00 - FS I need to refer to that file system
11:03 - module that package fs. WR file but
11:06 - that's not the error I was expecting uh
11:08 - the server should restart okay it has
11:11 - hit refresh H thank you for your word
11:14 - but let's look at ah crashed unexpected
11:17 - token blah blah blah object object it
11:20 - couldn't figure out how to write that to
11:22 - a file right because once again just as
11:26 - if I'm reading data from a file I'm
11:28 - getting the Raw bytes and I need to
11:30 - parse it as a JavaScript object before I
11:32 - can use it now what I need to do is I
11:34 - need to turn it into text based Data
11:36 - before I write it to the file and the
11:38 - way to do that I can say just VAR data
11:40 - equals json. the opposite of parse or
11:43 - the inverse is stringify so I can say
11:46 - stringify words and then write that data
11:51 - to the file so now that I've done that
11:53 - now one thing I want to do actually is I
11:54 - want to stop using nodon because nodon
11:57 - restarts the server
11:59 - uh every time um oops uh I have
12:05 - oops what's going on here error uh
12:08 - undefined one unexpected token Json oh
12:13 - you know what I I messed up the
12:15 - file so this is what I wrote to the file
12:18 - because when I made my mistake so that's
12:21 - why it's not
12:22 - working um so the reason why I don't
12:24 - want to use nodemon right now is because
12:27 - every time I rewrite that file it thinks
12:28 - like oh something changed it's going to
12:30 - restart the server which will mess
12:31 - things up so right now I just want to
12:32 - manually stop and start the server
12:34 - myself to make sure things are good so
12:36 - okay so now the server starts it reads
12:39 - the data from the file then uh what I'm
12:42 - going to do here is I'm going to now go
12:44 - to this route again and I'm going to hit
12:47 - enter thank you for your word I'm going
12:49 - to go back and I'm gonna look and look
12:51 - it's there oh but I lost the formatting
12:54 - like my Json file is all just one long
12:56 - thing so one thing that that's I mean
12:58 - this is sort of like a a small point and
13:00 - sometimes it it could matter in various
13:01 - scenarios but since we're talking about
13:03 - it I might as well talk about it um this
13:05 - stringify function takes the JavaScript
13:08 - object and kind of makes it a string
13:10 - with as few characters as possible so no
13:12 - white space to make it kind of human
13:13 - readable but I can use some other
13:15 - arguments um and I can add like uh I
13:18 - forget why you put null there to look at
13:20 - the documentation for stringify but uh
13:22 - two meaning that I want to use two
13:23 - spaces for an indent um so if I if I do
13:27 - this and I restart the server and by the
13:31 - way purple is already there so purple's
13:32 - now there forever and I can go to uh
13:36 - Pink and add the number six thank you
13:39 - for your word and if I go back and I
13:42 - look at that we can see there we go so
13:44 - every time I go to that route it
13:46 - rewrites the entire file with the
13:48 - current list of words every time I quit
13:51 - the server and start the server back up
13:53 - it reads the list of words so this is
13:55 - the full round trip you know there's
13:57 - lots of inefficiency and issues again
14:00 - with scalability and privacy but this
14:02 - works for a simple project where you
14:04 - just want to save a high score list or a
14:07 - table of words in their sentiment score
14:09 - you can do something like this and I'm
14:10 - sure you can imagine some other
14:11 - scenarios where just this basic idea is
14:13 - plenty good enough let me say another
14:16 - few things about this though before I
14:17 - move to the end of this video one is
14:20 - that I've kind of made a little bit of a
14:21 - mistake here which is that even if
14:25 - something goes wrong here I still send
14:28 - the reply like thank you for your word
14:31 - so really probably I should wait to send
14:33 - a reply to the client who added this
14:35 - word until that file has finished being
14:37 - written so I would say it probably makes
14:41 - sense to
14:44 - um to put that in here and I'm going to
14:48 - send the reply actually and and because
14:51 - I had this error checking I have to send
14:53 - the reply up here I could think about if
14:54 - there's a better way but I'm going to
14:55 - have if there's no score I send back a
14:57 - message scores requ required and if it
15:00 - gets the data if it gets the word adds
15:02 - it writes the file and all that is
15:04 - successful then I'm going to say and you
15:06 - know what I think is useful in an API is
15:08 - for a word to actually um for an API to
15:13 - just send you back the data that you've
15:15 - sent it and then I could say something
15:17 - like
15:18 - status uh
15:21 - success so in other words sometimes when
15:23 - you're making an API request or you're
15:25 - adding something you're sending some
15:27 - data to an API and you're doing that
15:29 - like many many times as a client when
15:31 - you get a reply back you need to match
15:33 - it with which one you sent so if you get
15:34 - some information back that you can match
15:36 - that can often be helpful so even though
15:38 - this is redundant and I don't personally
15:39 - need this information I think it's
15:41 - useful to add so and I did sort of a
15:43 - very awkward thing where my variables
15:44 - all have the same name but this will
15:46 - this will actually should work so let's
15:48 - uh restart the server one time we can
15:51 - see I've I've got all the words that I
15:53 - added before and now if I go back and I
15:55 - say add um uh uh
16:00 - um
16:02 - flower uh seven and I hit enter success
16:07 - the word flower was added and if I go to
16:09 - all we can see flower is in there pink
16:12 - is in there purple is in there and I can
16:15 - even restart the server I restart the
16:17 - server and there it all is again so this
16:21 - is the full round trip of how to receive
16:25 - from a get request through a route data
16:27 - from a user save that data to a file and
16:29 - have the server always keep track of
16:31 - that data so um I'm still got more to do
16:35 - in in terms of building this API which
16:36 - is actually like get some text and
16:38 - produce a sentiment score I need to look
16:40 - at well how would I build like a client
16:41 - a front end that would actually like
16:43 - interface and interact with the API but
16:45 - this at least now we've seen a little
16:46 - bit about saving data thanks for
16:52 - [Music]
16:57 - watching