00:00 - hello I am pleased to present another
00:03 - guest tutorial here on the Cody crane
00:05 - and today's guest tutorial is from
00:07 - yuning she and yuning she is an artist
00:10 - and researcher she's an alum of the
00:12 - program ITP where I teach she was also a
00:15 - resident researcher for a year here at
00:18 - ITP and she's done a lot she made a lot
00:20 - of contributions to p5.js org notably
00:24 - this project called p5 playground just
00:25 - totally amazing because usually you
00:27 - think about oh I'm gonna write some code
00:29 - and I'm gonna change the code and then
00:32 - I'm gonna see a new result but here
00:34 - watch this I'm gonna move this ellipse
00:36 - around and watch what happens to the
00:38 - code the code is changing so this is p5
00:41 - playground which allows you to
00:42 - manipulate the shapes on the canvas to
00:43 - see the code changes in real time she
00:46 - also have something called p5 live
00:47 - coding which is the other way around I
00:48 - encourage you to check out yuning's
00:51 - website to learn more about her work
00:53 - with p5 and other projects that'll be
00:56 - linked to in this video's description
00:57 - but what you are about to see is unique
01:01 - showing you a clever twist how to build
01:03 - a brick breaker like gamesome now maybe
01:05 - do my own code challenge of brick
01:07 - breaker but you'll see yuning's it's
01:09 - really wonderful and this brick breaker
01:10 - game was actually featured on the p5.js
01:12 - dot-org homepage as well so enjoy this
01:16 - video tutorial thank you yuning and I
01:19 - will see you all in another video bye
01:22 - hello everyone my name is Ian I am a
01:26 - researcher at NYU ITP
01:28 - I recently made a break breaker game in
01:32 - p5.js
01:32 - which was featured on P files homepage
01:35 - for two weeks in June the original
01:39 - inspiration for this game was Daniel
01:41 - shipments asteroids coding challenge so
01:44 - now I'm here at dance studio where he
01:48 - makes out his coding training videos and
01:51 - I'm going to talk about how to make a
01:54 - brick breaker game in p5 before we start
01:59 - let's take a look at the final result
02:01 - this is the original game and today we
02:06 - are going to make a simple version of it
02:08 - which is this one you can see the
02:11 - results
02:12 - the code my github account I will make
02:15 - sure to includes all those links in the
02:18 - description below so in the game you can
02:22 - press us to start the game and press a
02:27 - with the key to move the paddle around
02:31 - once the ball hits a break the brick
02:37 - will either become smaller or
02:39 - disappeared
02:39 - depending on the size of the break and
02:43 - we're going to use p5 to make this game
02:47 - in case you are not familiar with p5 p5
02:50 - is a JavaScript library for creating
02:53 - animations and graphics in the browser
02:56 - so here I have a basic p5 code template
03:01 - I have my index.html here which includes
03:08 - the basic structure of the web set and I
03:12 - am importing 3p5 libraries here and I'm
03:17 - also including for JavaScript files that
03:20 - I created let's go to the whiteboard to
03:23 - outline the gameplay first we have three
03:27 - key elements in this game paddle a ball
03:31 - and breaks a paddle can move to the left
03:36 - or to the right and a ball can bounce
03:40 - around the canvas and if the ball hits
03:44 - the paddle or if the ball hits the break
03:48 - the ball can bounce off and a larger
03:52 - break will become smaller and a smaller
03:55 - break will be destroyed if it's hit by a
03:59 - ball let's keep it simple for now and
04:02 - assume that if all the bricks are
04:05 - destroyed the player will win this game
04:09 - now we have our game play defined let's
04:13 - think about how we can approach each of
04:17 - the dynamics in a PFI sketch so in a PFI
04:21 - sketch we at first we need to draw a
04:24 - paddle
04:25 - can move to the left or to the right
04:27 - when we press a wordy on the keyboard
04:30 - and we also need to draw a ball that can
04:34 - bounce off of the surfaces and some
04:38 - bricks of different sizes and we need to
04:43 - write some logic to figure out what will
04:46 - happen if the ball meets the paddle or
04:49 - if the ball hits a brick finally we need
04:54 - to write some simple logic to start work
04:57 - into the game so as we discussed first
05:00 - we need to draw a paddle in order to
05:03 - better organize my code I have created a
05:08 - file called padded areas and in this
05:11 - palette or ES file I have a function
05:13 - called paddle so in this function I am
05:17 - going to give the paddle its weight and
05:21 - height this width equals to 160 this
05:27 - height equals to 20 and I'm also going
05:32 - to assign the paddle its initial XY
05:36 - position there's the part equal to MP 5
05:42 - there is a function called create vector
05:44 - that can create vector objects so we are
05:51 - going to use that function create vector
05:55 - and we are going to pass the XY position
05:59 - to this function which will be with
06:04 - divided by 2 and height minus 40 the
06:11 - weight and height variables here are the
06:14 - width and height of the canvas and I'm
06:17 - also going to have display function this
06:21 - that is a play because to function this
06:27 - disappear function were actually draw
06:30 - rectangle on the canvas in p5 there
06:35 - is function contract which will take
06:38 - four arguments which are XY weight and
06:41 - height and we're going to use Rex
06:44 - function to draw a rectangle on the
06:47 - canvas
06:48 - so react we're going to pass the XY
06:51 - position of this pedal which is this the
06:54 - post ax this post why this with this the
07:02 - height and now we have our pedal class
07:07 - defined let's go back to sketch Dodgers
07:11 - to create a pedal object out of this
07:14 - pedal cause so at first
07:17 - I were have a variable capital and then
07:23 - in the setup function I will say title
07:27 - equals to create not create pedal equals
07:32 - to new pedal and then in the draw
07:38 - function I am going to call the display
07:43 - function of the pedal object to actually
07:49 - draw a rectangle on the campus so now if
07:52 - I save my code and run my code we should
07:58 - be able to see a rectangle at the bottom
08:03 - of the canvas we are also going to have
08:07 - a function curve based on move
08:14 - this function is responsible for
08:17 - changing the exposition of the paddle
08:22 - also I want to be able to control the
08:25 - amount of disappointments of the paddle
08:28 - so I'm going to pass a variable called
08:31 - step to this move function so if so in
08:36 - this motor function we're going to
08:38 - change the x position of the paddle this
08:41 - has the ax plus equals two step so we we
08:49 - were at step two the x position of the
08:53 - paddle and now if I if in the now if in
09:01 - the sketch that is if I come paddle that
09:05 - move save the code when we call this
09:10 - move function I'm going to pass twenty
09:13 - to this function so in this case that
09:18 - will be 20 and we were at 22
09:22 - the x position of the paddle everytime
09:25 - when the draw function is called so if
09:29 - we run the code again we will say the
09:33 - paddle move moving to the right but we
09:36 - don't want to move the paddle unless we
09:40 - press a wordy key on the keyboard so in
09:47 - the sketched ideas we were have function
09:50 - cards key pressed this key press
09:57 - function comes from p5 it were big it
10:02 - were because every time a key is pressed
10:06 - so in this key press function I would
10:10 - say if he echoes to lowercase a were the
10:17 - key equals to uppercase e if the key is
10:24 - a I will move the paddle to the left
10:27 - else if the key is D I will move the
10:40 - pedal to the right in order to decide
10:44 - the moving direction of the pedal in the
10:48 - pedal Dodgers we're going to have two
10:50 - more properties for pedal so this is
10:55 - moving left this is moving right there
11:06 - are boolean Flags so at first they will
11:09 - be false and back to sketch ideas we
11:18 - will say if the key is a we were set
11:23 - paddle is moving left to true and if the
11:32 - key is D we were set peridot is moving
11:37 - left moving right teacher so now we will
11:44 - know the moving direction of the paddle
11:46 - so back to paddle dodges we will have
11:49 - another function called a star update
11:57 - this function were updates the
12:00 - exposition based on the paddles moving
12:04 - direction so in this function I would
12:07 - say if this dot is moving right is true
12:15 - I will call this the move function and
12:18 - pass 20 to this function to increase the
12:25 - exposition by 20 every time and also if
12:31 - this da is moving left is true I will
12:39 - also call this move function but I were
12:43 - passed negative 22 it to decrease the
12:47 - exposition by 20 every time back to
12:51 - sketch DOJ's we will replace pedo dot
12:54 - move function with paddled update
12:58 - function and save the code and let's run
13:04 - the code again to see what happens so
13:07 - [Music]
13:09 - here is the paddle and if I press a key
13:13 - they should move to the left and if i
13:20 - refresh the page and press D key it will
13:25 - moved to the right but you might notice
13:30 - that once we press the a key the paddle
13:35 - da is moving left will always be true so
13:38 - the paddle will keep moving to the left
13:42 - so we need another function to detect if
13:45 - I release this key once the key is
13:48 - released we were change
13:50 - Pagoda is moving left to false again to
13:54 - stop the paddle from moving so in the
13:58 - sketched areas we were have another
14:00 - function cut he released
14:08 - it was set paddled is moving left to
14:16 - fuzz pedal that is moving left right to
14:26 - fuss this key the key release function
14:31 - is from p5 to this function will because
14:35 - every time when we release okey so let's
14:40 - run the code again so now if I press a
14:46 - key and then release it the paddle
14:49 - should move to the left and then stop
14:53 - and if I press the key the Paulo should
14:59 - move to the right and if I really said I
15:02 - should stop yay it works okay the last
15:11 - thing that we need to do for paddle is
15:15 - to check the edges because for now if I
15:21 - move the paddle to the left so the
15:24 - paddle will move out of the canvas and
15:27 - we don't want that
15:28 - um this is the exposition of the paddle
15:34 - so we will say if the exposition of the
15:38 - paddle is less than 0 that means the
15:42 - paddle is definitely out of the canvas
15:46 - we were set the exposition of the paddle
15:50 - back to 0 and here this is the
15:53 - exposition of the paddle too and if the
15:57 - exposition of the paddle is beyond this
16:00 - point we will know that the pedal is
16:03 - definitely out of the canvas 2 and this
16:07 - point is actually the width of the
16:12 - canvas - the width of the paddle so
16:18 - it's this one and if this happens we
16:21 - will reset the exposition of the paddle
16:24 - back to with - the width of the paddle
16:28 - in the paddle Dodgers we are going to
16:32 - have another function called check edges
16:36 - I just because to function and we will
16:46 - say if this the pasta X is smaller than
16:54 - zero this the pass docks will be zero if
17:02 - it's out of the canvas we will reset it
17:05 - back and the house if they stop has the
17:12 - ax
17:14 - it's more than the width of the canvas -
17:19 - the width of the paddle we were reset it
17:26 - back to the width of the canvas - the
17:32 - width of the paddle ok and now if we
17:36 - call check out this function in the draw
17:41 - function there Chuck I just see the code
17:47 - and run the code again now if I press a
17:54 - key to move the paddle to the left
17:59 - even if I'm still pressing a key the
18:02 - paddle cannot move out of the canvas
18:04 - same with the D key if I keep pressing D
18:09 - key the pedal cannot go out of the
18:11 - cameras either
18:12 - cool so this is the end of the paddle
18:17 - that is the next step is to draw a ball
18:21 - the power have its initial XY position
18:25 - and
18:26 - so moving direction and they took can
18:29 - move around the canvas when it hits the
18:32 - edges it can bounce back so now I'm
18:36 - going to give the initial X Y position
18:39 - to the ball so the start pulse equals to
18:43 - create vector and I want this ball to be
18:51 - the center of the canvas so I will say
18:54 - with / - right
18:59 - / - and I also want to give the ball its
19:05 - radius so there's the R equals to 30
19:11 - then let's have a display function to
19:14 - actually draw a circle on the campus so
19:18 - this that is a play he goes to function
19:23 - I'll give you five there is a ellipse
19:27 - function that can draw a circle so we
19:30 - will use this ellipse function it takes
19:34 - X Y width and height so this post dot X
19:40 - this the past why the star are
19:46 - multiplied by two this dot R multiplied
19:51 - by two because ellipse function takes
19:54 - the diameter of the circle so we need to
19:59 - multiply a by two okay so now back to
20:05 - sketch ideas we will use this ball class
20:11 - to create object so here we will save
20:15 - our ball in the setup function similarly
20:21 - we will have pi equals two new ball and
20:27 - in the draw function we will say part
20:30 - out display and if we save the code run
20:36 - the code again
20:38 - we should be able to see a bar in the
20:41 - center of this campus so the next step
20:45 - is to move the ball in order to move the
20:48 - ball we need to give the bar its
20:50 - direction and velocity so back to
20:53 - Patraeus we are going to add two more
20:56 - properties and they're both vectors this
21:01 - that direction equals to create vector 1
21:09 - 1 this means the direction of the ball
21:12 - is 1 on the x axis and 1 on the y axis
21:16 - so the power will move towards to the
21:19 - right bottom of the canvas at first and
21:22 - then let's give the ball its velocity
21:28 - because to create vector and we are
21:35 - going to multiply this vector by 8 we
21:41 - use this number to control the speed of
21:44 - the ball so the bigger this number is
21:48 - the faster the ball were moved and here
21:52 - let's have new function call today's
21:54 - star update so we will use this function
22:03 - to update the position of the ball based
22:06 - on its previous position and its
22:09 - velocity and direction so here I will
22:13 - say this pasture ax plus equals to this
22:19 - the verdict x multiplied by its
22:23 - direction the ax so this means the ax
22:28 - position of the ball is itself plus the
22:32 - velocity and multiplied by its direction
22:39 - so the same with its Y position
22:43 - there's the pasta y plus it goes to this
22:46 - the velocity dawai
22:50 - fly it's why cool so now we have this
22:54 - update function so in the sketch Taj is
22:58 - let's call this update function to
23:01 - update the position of the ball the
23:05 - update and we save the code and run the
23:10 - code again we should be able to see the
23:13 - ball moving towards to the right bottom
23:17 - of the canvas but now the ball would
23:21 - just move out of the canvas after a
23:23 - while we want the ball to bounce back
23:25 - when it hits the edge of the canvas so
23:31 - like the paddle function we are also
23:35 - going to have track address function in
23:38 - the power function so this the track
23:42 - address equals to function and in this
23:47 - function we're going to check if the
23:49 - ball hits the edge of the canvas or not
23:53 - so in in this game if the ball hits the
23:58 - bottom of the canvas the game will be
24:01 - over but let's come back for this later
24:04 - and for now we are going to check our
24:08 - for sizes so for this one we were saying
24:16 - if the Y position of the ball is less
24:21 - than it's the radius of the ball and the
24:25 - y direction of the ball is less than
24:30 - zero we will know that the this ball is
24:34 - hitting the top of the canvas and also
24:38 - it's moving towards to its so in if this
24:43 - happens we were reverse its y direction
24:46 - by multiply its Y direction by minus 1
24:53 - similarly if the ball is here
25:00 - and it's we were saying if it's the y
25:05 - direction of the ball is more than the
25:10 - height of the canvas - the radius of the
25:14 - ball and also if it's Y direction is
25:18 - more than zero we will know that this
25:21 - ball is hitting the bottom of the canvas
25:24 - and we were childress its y direction -
25:27 - and here we were saying if the ax
25:31 - position of the ball is less than the
25:35 - radius of the ball and it's moving to
25:40 - the left in this way is ax direction
25:44 - will be will be less than zero we will
25:49 - reverse its ax direction and here if the
25:54 - ax position of the ball is more than the
25:57 - width of the canvas - the radius of the
26:02 - ball if this happens and also if the X
26:07 - direction of the ball it's more than
26:10 - zero we were also reverse its ax
26:14 - direction so here in the body is in the
26:18 - chalk edges function I will just say if
26:21 - this the pass that Y is less than the
26:25 - radius of the ball they start and this
26:31 - direction the Y is small a is smaller
26:38 - than zero then we will know that this
26:41 - ball is hitting the top of the canvas we
26:44 - will reverse its y direction they start
26:48 - direction Y multiply minus 1 and
26:57 - similarly if this top has that Y is more
27:04 - than the height of the canvas - the
27:11 - radius of the ball
27:15 - and the direction the Y Direction is
27:24 - more than zero we were also reverse its
27:30 - y direction also similarly for X
27:39 - position X direction we will say if it's
27:45 - x position is less than the rate its own
27:49 - radius and also its X direction is less
27:53 - than zero we will note the ball is
27:56 - hitting the left side of the canvas we
27:59 - will reverse its x direction similarly
28:02 - for this one if the ax direct if the x
28:15 - position is more than the width of the
28:18 - canvas minus the radius of the ball we
28:21 - will know and also the X Direction is
28:24 - more than 0 we will know this ball is
28:27 - hitting the right side of the canvas we
28:31 - were also reverse its x direction so
28:35 - this is our check address function and
28:38 - if we call this function in our sketch
28:41 - ideas but check I just and save our code
28:48 - and drawn the code again
28:52 - yay so now we have a bouncing ball great
28:58 - so the next step is to make the ball
29:04 - interact with the paddle when the ball
29:07 - hits the paddle the ball will bounce off
29:09 - to let's see this is our paddle this is
29:13 - the X Y position of the paddle and this
29:17 - is the X Y position of the ball actually
29:21 - we will know that
29:26 - if the if the Y position of the bar is
29:32 - in this range and the ax position of the
29:38 - ball is in this range we will know that
29:42 - the bar is meeting the paddle so let's
29:47 - take a look at those two ranges for this
29:51 - range this range so this is the Y
30:00 - position of the paddle so this is y and
30:08 - this this point is the y direction of
30:12 - the paddle minus the radius of the ball
30:19 - and for this range this point is the ax
30:28 - position of the paddle minus the radius
30:32 - of the ball and this point is the ax
30:38 - position of the paddle plus the width of
30:42 - the paddle plus the radius of the ball
30:49 - so here back to barrage is we're going
30:53 - to have a new function cut meats
31:03 - histamines use to function and in this
31:09 - midst of function it will take paddle as
31:15 - its parameter and it will return true or
31:19 - false to means the bar is meeting the
31:22 - paddle fast means it doesn't and
31:27 - remember we talked about those two
31:29 - ranges if the axe is in this range and
31:32 - if the Y is in this range we will know
31:35 - that the ball is meeting the paddle so
31:38 - now here we I'm going to say if this the
31:44 - pass that Y is smaller than the paddle
31:50 - top has that Y and also this top has dub
31:56 - why is bigger than paddle top has the Y
32:02 - minus the radius of the ball which is
32:06 - this art and also this the pasta X is
32:13 - more than this paddle the pasta ax - its
32:22 - art and this the pasta X is smaller than
32:31 - the ax position of the paddle plus the
32:38 - paddles with plus its own radius if this
32:45 - happens we will know that the ball is
32:48 - meeting the paddle so this function will
32:51 - return true otherwise
33:00 - it will return false cool so let's save
33:06 - the code and then back to sketched ideas
33:09 - in the draw function we are going to
33:12 - check if the bow is meeting the paddle
33:15 - at a time so we will say that meets and
33:19 - we pass in our paddle object so this
33:27 - function will return true or false so we
33:29 - were saying if bow meets the paddle and
33:39 - also we are going to check the y
33:42 - direction of the ball if the y direction
33:44 - of the ball is more than zero that means
33:47 - it's moving down to the paddle so we
33:52 - will say about direction
34:02 - why is more than zero in this way we
34:09 - know that the ball is hitting the paddle
34:11 - and then we were going to reverse the
34:15 - boss y direction so the ball can bounce
34:17 - back so we will say about that direction
34:22 - the Y multiplied minus one now if we
34:30 - save the code and run this code again
34:33 - and I am moving a wordy key to move the
34:40 - paddle and the paddle can catch the ball
34:47 - awesome so now we have we have a
34:52 - bouncing ball and we have a paddle that
34:55 - can catch this bouncing ball so in the
35:01 - prodigals in the chalk address function
35:04 - we don't need to check the bottom of the
35:07 - canvas anymore so we can just come we
35:12 - can just delete this line out cool
35:19 - because if the ball hits the bottom of
35:21 - the canvas the game will be over
35:24 - great so now if we run the code again
35:32 - the ball can bounce around but if it
35:36 - hits the bottom of the canvas we're not
35:40 - going to the ball won't bounce back
35:42 - great the next step is to draw some
35:46 - breaks of different sizes and when the
35:49 - ball hits one brick the one break will
35:51 - either become smaller will be destroyed
35:54 - depending on the size of the brick so
35:57 - here I have my break dodge as file and
36:00 - in the break function I'm going to give
36:03 - each break its radius this star R equals
36:07 - two random p5 has this random function
36:12 - that can generate
36:14 - a random number between 20 and 80 and
36:20 - I'm also going to give each brick its
36:26 - initial XY position so I will say this
36:29 - that pause equals 2 we will use create
36:33 - vector again and the ax position of each
36:40 - brake will be a random number between
36:43 - [Music]
36:45 - 102 with minus 100 the width of the
36:49 - canvas minus 100 and the the Y position
36:56 - of each brake will be a random number
37:00 - between 100 to height divided by a minus
37:07 - 400 okay so now we give each brake its
37:14 - radius and its position and we are also
37:18 - going to have a function called display
37:29 - in order to draw a polygon the first
37:32 - thing that I need to do is to translate
37:34 - the origin of the canvas from zero zero
37:39 - the left top corner of the canvas to the
37:44 - actual position of the current polygon
37:48 - and the four and we're going to draw
37:51 - hexagons and for hexagons we have a six
37:55 - six vertices here and since the center
38:01 - of the hexagon is zero zero now and we
38:05 - do know the radius of this hexagon and
38:10 - also we do know this angle this angle is
38:17 - 360 divided by six which is 60 degree
38:24 - and this is also 2 pi multiplied by 6
38:31 - and the things we know the radius and
38:35 - this angle we will know for this were
38:38 - just vertex it's x equals 2 our multiply
38:45 - cosine angle and its Y position is our
38:54 - multiply its sign and go so in this way
38:59 - we know we will know the X Y position
39:04 - for all the six vertices and all we need
39:09 - to do is to connect our six of them and
39:13 - then we will get a polygon as we
39:16 - discussed first we need to translate the
39:19 - wording of the canvas to the XY position
39:22 - of the polygon so here in the study
39:28 - spray function I will say translate this
39:33 - the past axis the pasta Y and we are
39:39 - also going to have another property
39:41 - they start total equals to 6 since it's
39:44 - hexagons and you can change this number
39:46 - to a torch off to have other kinds of
39:51 - polygons and after translate we are
39:55 - going to have a for loop for I equals to
40:00 - 0 I is less than this total I plus plus
40:06 - and in this for loop I am going to use a
40:12 - function called map from p5 to get the
40:16 - angle so I will say that angle equals to
40:22 - map and it will take a variable I which
40:29 - is from 0 to this total and it will give
40:37 - me an angle which is between 0 to 2 pi
40:45 - and cool so we have the angle now and
40:51 - according to our calculation we will
40:55 - have the exposition of the first vertex
41:00 - which is 4x equals to the star R
41:07 - multiplied by cosine angle and for y
41:17 - equals to this R multiply sine angle
41:23 - cool so now we know the actual position
41:27 - of the first tag vertex and we're going
41:32 - to have call another function called
41:34 - vertex to create some vertex out of this
41:39 - XY position and we're going to pass x
41:42 - and y in and after this for loop we will
41:46 - have 6 vertices
41:48 - and now we are going to call begin ship
41:57 - and end shape after the for loop to
42:05 - create to connect all six word vertices
42:13 - and we are also going to pass close to
42:16 - and ship function so the polygons were
42:20 - closed itself the last thing that I need
42:23 - to do is before I translate the origin I
42:28 - need to use PF eyes push function to
42:32 - save the current translation rotation
42:35 - and join settings and after I finish
42:39 - drawing my first polygon I will use pop
42:43 - function to restore those settings
42:46 - because the translate function were
42:49 - translated the wardroom based on its
42:52 - previous position which won't be zero
42:55 - zero after we draw the first polygon so
42:59 - after I draw the first polygon
43:01 - I will move the wardroom back to zero
43:03 - zero so when I'm joining the second
43:06 - polygon the wardroom will be translated
43:09 - correctly
43:10 - let's now let's go back to sketched
43:13 - ideas and to actually create some break
43:18 - objects I will have an empty array card
43:23 - breaks equals two empty array and in the
43:28 - setup function I will have a for loop he
43:35 - goes to zero is less than 20 so we will
43:39 - have 20 bricks I plus plus and in this
43:43 - for loop I am going to create a new
43:48 - break and push this new break object to
43:56 - bricks array
43:59 - and in the draw function I'm also going
44:05 - to loop through this BRICS array which
44:12 - will be i VAR j equals to 0 J is less
44:18 - than breaks the left J plus plus and
44:27 - break J is each brick object in this
44:31 - breakaway and I will call break J dot
44:34 - discipline to actually discipline the
44:38 - hexagons on the campus so now if we run
44:43 - the code break is now defined sketch 30
44:51 - you think I'm missing ass and that's
44:57 - wrong it again okay
45:01 - now if I save the code cool so now we
45:06 - will have 20 bricks on the campus and
45:11 - the next step is to to make the bricks
45:18 - either smaller or destroy this break
45:20 - when it's got it gets hit by a bomb so
45:26 - in the barrage as we were also going to
45:30 - have a function card-based are hits and
45:36 - we will pass the the break to this
45:42 - function and this function will return
45:46 - either true or false true means the ball
45:49 - is hitting this break this is the actual
45:54 - position of the break and this is the
45:57 - actual position of the ball and in p5
46:01 - there is a function cuttest
46:06 - that can calculate the distance between
46:09 - two points so by using this function we
46:13 - can catch the distance between the brake
46:16 - and the ball and we will say if the
46:19 - distance is less than the radius of the
46:22 - brake plus the radius of the ball we
46:25 - will know that the ball is hitting this
46:27 - brake so here in the apologies in our
46:33 - head function we will say at first we
46:37 - were create distance function for the
46:42 - distance equals to dist and we were
46:47 - passed through those two points there's
46:50 - the past acts this type has the Y and
46:57 - the brakes the past acts brick top house
47:05 - down Y and we can get the distance
47:09 - between those between the brick and the
47:12 - ball and then we were saying if distance
47:17 - is less than the radius of the brake
47:25 - plus the radius of the ball plus the
47:29 - radius of the break we will know that
47:34 - the ball is hitting the brake so we will
47:37 - return to otherwise we will return false
47:46 - cool so now in the sketch that is when
47:53 - we are looping through this breaks away
47:55 - before we display each break we were
47:59 - call this function if the hits we
48:08 - passing this current brake
48:13 - if ball hits brick is true we were we
48:22 - were delete this this break objects in
48:26 - this breaks array in JavaScript there is
48:30 - a splice function so we will say break
48:33 - start splice I won so in this way the
48:40 - splice function can delete one element
48:42 - in this array as the index of I call so
48:48 - now we see the code is not defined
48:55 - because I should be J okay
49:07 - so if the ball hits the break the break
49:10 - or disappear
49:11 - the break or disappear the break or
49:14 - disappeared the procore disappear next
49:17 - we're going to add one last feature of
49:20 - this game so when the ball hit hits one
49:24 - large break the break where becomes
49:27 - smaller so and if the break is small
49:30 - enough the break were be destroyed so in
49:34 - the Skagit Egeus when the ball hits the
49:37 - break we were also going to check the
49:41 - size the radius of the break so I would
49:44 - say if this break like J dot R is more
49:55 - than 40 I will change its radius to
50:06 - itself divided by 2 so if the radius was
50:11 - 60 then new radius will be 30 and if if
50:20 - the break is not big enough
50:23 - we were just deleted cool and now if we
50:30 - save the code and run the code again we
50:33 - should be able to see the break will
50:35 - become either smaller will be destroyed
50:38 - when it got hit by a ball hmm it does
50:42 - look very weird because the ball doesn't
50:47 - change its direction when it hits a
50:50 - break so come back to our work hold here
50:55 - we're saying if the ball hits a break
50:58 - the break will either become smaller
51:01 - where it will be destroyed and also the
51:04 - the power should change its direction so
51:08 - here we will also say about direction Y
51:13 - multiplied itself by minus 1 and let's
51:18 - save the code and you
51:20 - we run the code again so now when the
51:25 - ball hits a break the ball can bounce
51:29 - off great yes
51:31 - okay we're almost there bear with me the
51:38 - last step is to add some logic to this
51:42 - game in this game if the ball goes below
51:47 - the canvas the game should be over and
51:50 - we'll all those bricks are destroyed the
51:54 - player were win this game so in the
51:58 - sketch ideas we will have two more
52:01 - variables cut for playing game and it
52:08 - will be false at first and VAR u wing
52:15 - will be false - and here when people
52:23 - press us on the keyboard the game should
52:27 - start so here I was in the key press
52:30 - function I would say if key because to
52:34 - us or capital s I was sad playing game -
52:46 - true and I will also reset to you wing
52:51 - back to false to here the other thing
52:55 - we're going to do is to check if there
52:57 - is any breaks before we start the game
53:01 - the reason that we are going to check
53:03 - this is because even though we create 20
53:07 - blocks at the very beginning but if the
53:11 - user destroys all those bricks and the
53:15 - game will stop and then if I press s
53:20 - again there won't be any breaks so here
53:23 - I will also say if breaks the length
53:29 - equals to zero I will create 20
53:33 - he breaks objects and then push it into
53:37 - the bricks away so I were to break stop
53:43 - push new break so in this way we can
53:54 - make sure if there is no break we were
53:56 - create 20 more break anyway I need to
54:02 - wrap this in for loop
54:19 - in this way we created twenty new break
54:23 - break objects if there is no break
54:26 - anymore so so here if the user press s
54:33 - we will start again and at the beginning
54:39 - if user if playing game is false
54:43 - we're not going to move the paddle where
54:45 - the ball so here we're going to add
54:48 - another condition saying if playing game
54:53 - is true and were updated to the paddles
54:56 - position and if game over if if playing
55:03 - game is true our check paddles edges
55:06 - otherwise I won't if game if playing
55:10 - game is true I will update to the boss
55:12 - position if game playing is true our
55:15 - check
55:15 - I just for this ball otherwise I want to
55:18 - do anything to move the paddle or the
55:20 - bar so in the draw function if the ball
55:24 - goes below the canvas the game will be
55:26 - over so playing game will be false and
55:31 - also we are going to move the ball back
55:34 - to the center of the canvas so we will
55:38 - say if Bob position that Y is more than
55:48 - height playing game will be false and we
56:01 - were same bad position because to create
56:08 - factor with / - right / - so in this way
56:20 - we move the ball back to the center of
56:23 - the canvas and also if there is no
56:29 - breaks
56:30 - on the canvas anymore that means you win
56:33 - this game so I will also check if break
56:37 - stylus is zero if this happens you win
56:44 - it's true and I were also and also and
56:53 - and I will also stop the game so playing
57:00 - game is false cool so now let's show
57:09 - some text on the canvas when player wins
57:12 - the game p5 has another library copy
57:15 - fight Adam that can do a lot of Dom
57:19 - manipulations kind of like a jQuery we
57:23 - already includes this PFI Dom library in
57:26 - our index.html so now we can just use
57:30 - peer item to create pain HTML element so
57:36 - at first we are going to have a variable
57:40 - called wind tax that holds our text that
57:48 - holds our text and I will have a
57:52 - function called create text
58:03 - here I would say point ax equals to
58:07 - create P you wink and this creates P
58:18 - function is from PF item it will create
58:21 - a HTML P element and also we work if
58:28 - this HTML element position the position
58:34 - equals to width / 2 height minus 50 and
58:44 - 80 and at first your wing is false and
58:51 - we are going to hide this tap text we're
58:55 - going to do it later and in the
58:58 - discipline in the draw function we will
59:01 - say if your wing is true we were going
59:10 - to show the tax and if you win is false
59:14 - we're going to hide this text so with
59:19 - pivot on library we can just say win tax
59:23 - dot style
59:27 - DISA play if you want is true we're
59:32 - going to show it so it should be block
59:35 - and if you win is false we are going to
59:40 - hide this tax
59:41 - so we win tax that style display no
59:49 - great so I think this is the end of our
59:54 - code and then let's save the code and to
59:57 - see if it works okay can now raise
60:02 - property Y of undefined 44 now position
60:08 - its paws
60:10 - and this is positive okay so now can
60:18 - have a proper taste I often define 57 oh
60:25 - because we didn't call this create tax
60:28 - function so here in the setup function
60:30 - we're also going to call create text to
60:35 - create this text first and then in the
60:37 - draw function we were hide or show this
60:40 - text depending on the variable you win
60:42 - now if we refresh the page we will see
60:47 - this game and the power stopped at the
60:50 - center of the canvas and so when I press
60:54 - as the power start moving and the
60:59 - breaker becomes smaller will be
61:01 - destroyed by the ball and this it will
61:08 - take a while for me to win this game yes
61:17 - okay so now if you win this game the you
61:21 - win text will show up on the canvas -
61:23 - okay awesome this is just a basic
61:28 - version of the game there are a lot of
61:30 - more things that you can do to improvise
61:33 - you can create different kinds of breaks
61:36 - you can add colors and animations to the
61:39 - ball and to the brakes you can also add
61:43 - some the effects on interactions
61:45 - you could also design difficulty levels
61:49 - and rewards for example you can make
61:51 - stars for them when a break got hit by
61:54 - ball and if the paddle catches the star
61:59 - the squirrel will increase and the
62:02 - github with me there is a place for you
62:04 - to link your version of the code a feel
62:07 - free to submit a pull request to share
62:10 - your game with me thank you so much for
62:13 - watching bye bye
62:19 - [Music]
62:26 - you