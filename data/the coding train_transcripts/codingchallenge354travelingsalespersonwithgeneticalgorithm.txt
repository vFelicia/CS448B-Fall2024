00:00 - hello I am here in a coding challenge
00:03 - and this coding challenge is a follow-up
00:05 - on a previous one where I looked at
00:08 - something called the traveling
00:08 - salesperson problem now I would suggest
00:11 - if you didn't watch those videos they're
00:13 - linked in this video's description go
00:15 - watch those find out what the traveling
00:16 - salesperson problem is but guess quickly
00:18 - just in case you don't what the
00:20 - traveling salesperson problem is is you
00:21 - create a set of points cities in a
00:24 - two-dimensional space it could be
00:25 - three-dimensional could be
00:26 - four-dimensional but in this case
00:28 - two-dimensional and you try to find what
00:31 - is a path that connects every possible
00:34 - city starting from any city ending with
00:36 - any cities that is the shortest path
00:37 - what is the easiest way to visit every
00:40 - single city and get to every single one
00:42 - what's the shortest path or all the
00:44 - cities okay so this particular program
00:46 - which I did the previous coding
00:47 - challenge is looking at every single
00:49 - possibility it even just with one two
00:51 - three four five six seven cities it's
00:53 - taking quite a while to check every
00:55 - possible City it will get there
00:56 - eventually every time at every Buzzle
00:58 - city every possible order but if I just
01:00 - go and change this to like ten you know
01:04 - this is based this is really just never
01:06 - ever I mean it will finish at some point
01:08 - but changes eleven twelve there are 10
01:11 - factorial possibilities with ten cities
01:14 - 11 cities 1250 15 cities so is there a
01:16 - way we could do better
01:17 - so the strategy I'm going to look at
01:19 - here is using a genetic algorithm so
01:22 - these are the traveling salesperson
01:24 - previous videos that I would recommend
01:26 - you take a look at and if you haven't
01:28 - seen or looked at any of don't know what
01:30 - a genetic algorithm is then I would
01:32 - recommend this particular playlist so
01:34 - this video that I'm making is not on
01:35 - this list right now because but it will
01:38 - be in the future when you are watching
01:40 - it it will be there it's not there now
01:42 - but like it is now but if you're
01:43 - watching it anyone forget it right so uh
01:47 - only thing yes so this is going to go
01:50 - with its playlist so if you don't know
01:51 - what genetic algorithm is I recommend
01:52 - maybe you check out some of these videos
01:53 - first and then come back but I'm just
01:55 - going to start programming this
01:56 - straightaway so this idea of the genetic
01:59 - algorithm is what I want to have is a
02:03 - population so right now I'm checking but
02:05 - I have this idea of an order which is an
02:07 - order through all the cities so I'm just
02:09 - going to use the code I have some
02:10 - previous coding challenge and just start
02:12 - from
02:12 - hopefully this is I'm gonna this is
02:14 - going to work there's a bunch of stuff
02:16 - I'll be able to get rid of but one thing
02:17 - I need is a population so in the
02:21 - population I need a population of many
02:23 - orders so what I'm going to do now is
02:28 - I'm going to create that population so
02:31 - let's let's I'm going to so a couple
02:37 - things I don't need let's get rid of
02:38 - some stuff I don't need this total
02:39 - permutations or count let's just get rid
02:41 - of this stuff I do want to keep track of
02:43 - the best ever I don't think this
02:45 - individual order anymore there's not
02:47 - just one so I have the city's I have the
02:49 - total number of cities let's reduce that
02:50 - to five so we can see if it works or
02:52 - easily and I have a population okay so I
02:55 - need to create the cities first so first
02:58 - I create the cities now what I need to
02:59 - do is I need to create the number of the
03:03 - population so let's just start with ten
03:08 - so population index I equals what so how
03:15 - to do this so one way that I could do
03:18 - this is I could create I'm going to
03:21 - create I'm going to create actually a
03:22 - variable called order right here which
03:25 - is just order index I equals I okay what
03:31 - am i doing okay so the idea is that I
03:34 - have an array that keeps track of all of
03:39 - these vectors that's called cities now
03:47 - what I'm going to do is I'm going to
03:49 - create an array called order and what I
03:52 - want is just to have an order of how
03:54 - we're going to go through all those
03:55 - cities and so I can start with just this
03:57 - right so with their five cities 0 1 2 3
04:00 - 4 now my population the idea of the
04:03 - population is I want to make a whole lot
04:05 - of these and I want them to be random no
04:10 - they can't have zeros right I can only
04:12 - have one number I think it's so how to
04:16 - type so how do I create a whole bunch of
04:18 - random configurations of this well I
04:20 - could start with this regular order and
04:23 - then I could just shuffle
04:25 - around elements a bunch of times to
04:27 - randomize kind of like shuffling a deck
04:28 - of cards so let's do that
04:30 - so this is just the standard order this
04:34 - array is just 0 1 2 3 4 and now
04:37 - population is going to be order slice
04:40 - that slice I'm pretty sure the slice
04:43 - function in JavaScript is a function you
04:46 - can use it if you give it arguments to
04:47 - slice out a part of an array into a new
04:50 - array but what I'm doing here is I just
04:52 - want the whole thing so it essentially
04:53 - makes a copy of that array so if I just
04:55 - did this right if I just said population
04:59 - I equals order dot slice and I said
05:01 - console dot log population let's go to
05:06 - the browser
05:08 - oops and let's run this okay what's not
05:11 - defined there's lots of other stuff that
05:13 - but I can see here that look at this 0 1
05:17 - 2 3 4 0 1 2 3 4 0 1 2 3 4 that's what
05:21 - I've got so what I actually want to do a
05:23 - stop go away what I want to do now is I
05:26 - want to shuffle it so how do I shuffle
05:29 - it well let's should I make a separate
05:31 - function shuffle population index I why
05:34 - not so I'm going to create a function
05:36 - and there's probably like be surprised
05:38 - that there's a function that does
05:40 - shuffling maybe not or we could add it
05:42 - using prototype but anyway I'm just
05:44 - going to write my own function so I'm
05:46 - going to go down here to the very bottom
05:47 - I don't need this is something from the
05:49 - previous example that I don't need
05:50 - anymore I'm looking for the swap
05:53 - function where is the swap here it is so
05:57 - what I'm going to make use of this swap
05:59 - function so my shuffle function is going
06:02 - to receive an array why don't we give it
06:04 - like a number shuffle 10 times
06:06 - so like shuffle the deck 10 times so I'm
06:09 - going to say 4 of so this isn't know for
06:13 - VAR i equals 0 I is less than num I plus
06:17 - plus bar so let's use n because what I
06:27 - want to do is I want to pick two
06:29 - elements I want to say pick a random
06:33 - index and you know actually we can use I
06:36 - and then I'll just say this is like
06:39 - index one or index a is a random index
06:44 - into the array and index B is another
06:51 - random index into the array and then all
06:53 - I need to do is say swap array index
06:57 - index a index B so the idea is that I
07:02 - shuffle by saying ten times swap ten
07:05 - spots in the array or a hundred times or
07:07 - a thousand times so now if I were to
07:09 - come back up to the beginning of this
07:11 - program there's all this extra stuff
07:13 - that I don't know what I'm going to do
07:15 - with here so I'm just going to comment
07:16 - it all out what I'm going to do here and
07:21 - I'm going to comment this out too is
07:24 - what now if I look at this when I look
07:27 - at the populations I should see them all
07:28 - shuffled orders
07:31 - okay Oh p5 had problems creating the
07:35 - global function shuffle there's a p5
07:39 - function called shuffle whoo interesting
07:41 - well first let's see if my shuffle
07:42 - function worked and that's the first one
07:46 - oh it doesn't look like it worked
07:47 - mmm okay so what did I do wrong let's
07:52 - let's just make our own array did I not
07:57 - give it a number oh I forgot to give it
08:00 - a number I have to say shuffle a certain
08:02 - number of times so shuffle a hundred
08:03 - times let's try this again and let's
08:08 - look at it now there we go so you can
08:10 - see these shuffles into random orders so
08:12 - now I have a whole bunch of random
08:14 - orders perfect okay now what do I want
08:18 - to do here first I want to go look up
08:20 - click this shuffle function shuffle
08:24 - p5.js reference because maybe this does
08:27 - what we wanted to do oh yeah array
08:31 - function to shuffle look at that
08:34 - shuffle and array randomizes the order
08:37 - of elements and right implements fist
08:38 - sure engaged shuffle algorithm so this
08:40 - is a much fancier oh and look at this
08:42 - we're on this wonderful this is a
08:44 - beautiful Fischer Yates shuffle this is
08:46 - a great tutorial by Mike Bostock
08:48 - creator of d3 it's a different algorithm
08:51 - for shuffling an array which is maybe
08:53 - it's just different than mine but anyway
08:55 - let's just use it so let's let's get rid
08:59 - of my let's comment out my shuffle
09:02 - function learn and let's just leave the
09:06 - p5 shuffle function and see what happens
09:09 - run this again let's look at what we've
09:12 - got now they're not shuffled why are
09:15 - they not shuffle well I have a feeling
09:17 - that what it does is it makes a new copy
09:19 - of the array so actually what I want to
09:21 - do here is just say shuffle order so I'm
09:25 - using the p5 shuffle function I want to
09:27 - just take that array order shuffle it
09:30 - into a new array and put that in the
09:32 - population perfect and now if we look at
09:36 - this we can see there we go so both are
09:39 - good ways of doing it now I'm at the
09:40 - point where I have an array and I have a
09:43 - population of orders and I've shuffled
09:45 - up next step I want to find the best one
09:49 - in the population okay
09:52 - actually what I want to do is give each
09:54 - one a fitness score okay
09:57 - so I could do some kind of like
09:59 - object-oriented programming here where I
10:01 - create a wrapper object that stores the
10:03 - order and its fitness but for simplicity
10:06 - right now I'm just going to create
10:08 - another array called
10:09 - fitness and so for every element of the
10:11 - population I'm going to put a fitness
10:14 - score in the corresponding spot in that
10:16 - other array so what I'm going to do is
10:19 - now I'm going to loop through the entire
10:25 - population and I'm going to say what is
10:31 - first thing to say what is that distance
10:34 - the distance is and don't I have a calc
10:36 - from my previous example I have this
10:39 - calc distance function which is right
10:42 - here so this calculate distance function
10:44 - already calculates the distance of an
10:47 - array of points in a given order so
10:49 - that's perfect I don't have to add that
10:50 - code again I already have that from the
10:52 - previous coding challenge that's really
10:54 - nice so I'm going to say D equals calc
10:58 - distance
11:00 - cities in the particular order of the
11:04 - population and then I'm going to say
11:07 - Fitness index I equals that distance now
11:09 - that's not exactly right because I would
11:11 - have to do some mapping to the fitness
11:12 - because a smaller distance is a higher
11:15 - fitness but let's just leave that for
11:16 - right now and let's also write we have
11:19 - this idea of the best-ever record
11:20 - distance so I'm going to start with the
11:22 - record distance as infinity and while
11:25 - I'm doing that I'm going to say if
11:28 - distance is less than record distance
11:32 - record distance equals at distance and
11:35 - best-ever equals population index I that
11:39 - particular order okay great so now I'm
11:47 - going to take out this let's put this
11:51 - all this draw stuff back in to sort of
11:53 - see the best ever oh I'm going to leave
11:57 - the shuffle function with swap function
11:59 - calculus tense and now let's see what
12:02 - happens we run this okay order is not
12:04 - defined sketch that line 46 okay so this
12:10 - is this I don't need I just want to look
12:11 - at the best-ever so oh so I could say
12:17 - this should say best-ever dot length
12:20 - sorry
12:22 - and this should say best-ever dot length
12:27 - look I don't need two of these sorry I'm
12:31 - just going to there's all this
12:33 - extraneous stuff that I don't need I'm
12:36 - going to take all this out so I just
12:38 - want to draw the best one so you can see
12:42 - it's you know it's making however many
12:45 - and drawing the best one now
12:46 - interestingly enough if I were to
12:49 - increase the population size to 100 it's
12:54 - probably just out of 100 possibilities
12:56 - you know what's 5 factorial 5 times 4 is
12:59 - 20 times 3 is 60 times 2 is 120 so
13:03 - there's only actually 120 possibilities
13:05 - in here but if I were to make the number
13:09 - of cities something like 10 and I just
13:11 - have a hundred possibilities you can see
13:13 - got something better than just a random
13:14 - order but this is clearly not the best
13:16 - order okay
13:17 - so one thing I want to do right now just
13:19 - because a good time seeing things
13:21 - starting to get as I already have all
13:23 - this code I'm adding new code I'm going
13:25 - to create a new JavaScript file I'm just
13:27 - going to call it GA for genetic
13:29 - algorithms AF and then I'm going to add
13:32 - a reference to it in my index.html file
13:36 - and what I want to do is I want to take
13:40 - some of the stuff I don't need this next
13:44 - order any more function this should go
13:48 - away that was from the lexical order
13:50 - version calc distance swap these can all
13:54 - stay but I want to I want to have this
13:59 - other JavaScript file where I can start
14:01 - putting functions that are particularly
14:03 - relevant to the genetic algorithm itself
14:05 - there so all I view okay so all I have
14:08 - so far I know I just said it's like I
14:10 - recap this for myself is I create a
14:12 - whole bunch of random orders I try all
14:16 - of them out and I pick the best one so
14:17 - for the genetic algorithm to work what I
14:20 - want to do is after I've done that I
14:21 - want to generate a whole new set of
14:23 - algorithms Beit chart a whole new set of
14:25 - orders based on the orders that did
14:28 - better so one thing that I need to do
14:31 - here is where I am calculating those
14:34 - those distance values and I'm actually
14:37 - going to take all of this here and I'm
14:42 - going to make this in a function I'm
14:43 - going to say a calc fitness calculate
14:48 - fitness so this particular algorithm
14:52 - that goes through and assign the Fitness
14:54 - what I'm actually going to do is I'm
14:56 - going to map the distance you know that
15:00 - is a value between the Fitness is a
15:04 - distance that's a value between what
15:10 - should I do here what would be so this
15:12 - is kind of an interesting thing to think
15:13 - about you know what I'm going to do I'm
15:15 - not going to do that I'm going to invert
15:16 - it so if I have a number if I want to
15:21 - take if I want to make a number that's a
15:22 - high number and make
15:25 - the higher it is the higher it is a
15:29 - lower value the lower it is a higher
15:31 - value I can actually just say 1 divided
15:34 - by D now I could worry that D might be 0
15:37 - and if I could say 1 divided by D plus 1
15:40 - that way if D is ever 0 like the 0 being
15:42 - the you know absolute best distance ever
15:46 - you know which is unrealistic obviously
15:48 - because you're never honest all the
15:50 - points ranging or right on top of each
15:51 - other but then everything's going to be
15:52 - 0 but anyway then the fitness would be 1
15:54 - and everything else would be lower so
15:55 - I'm going to add that in there just as
15:57 - kind of a nice little extra thing and
15:59 - that's the fitness value okay then what
16:02 - I want to do is I actually want to write
16:04 - a function called normalized fitness
16:07 - because for the way that I'm going to
16:10 - pick them what I want to do is I'm going
16:14 - to mention another video that I made
16:16 - recently as I want all those Fitness
16:17 - values not to be just some arbitrary
16:20 - value that's higher or lower but I want
16:22 - them to map to a probability between 0%
16:25 - and 100% and I want all of them to add
16:27 - up to 100% so the way that I do that is
16:30 - I first need to calculate a sum then I
16:34 - need to loop through the entire
16:36 - population again and I need to say sum
16:41 - plus equals fitness index I so I want to
16:45 - get the total fitness and then all I
16:47 - have to do again and by only I can say
16:50 - fitness dot length because that's really
16:51 - the array that I'm working with although
16:52 - Fitness and population are gonna have
16:54 - the same length I'm going to then go
16:56 - through it again and say Fitness index I
16:58 - equals Fitness index I divided by sum so
17:03 - this is the process of normalizing all
17:05 - those Fitness values ok so if I go back
17:09 - to the sketch this is something I'm
17:10 - going to do every frame so now I really
17:13 - have my genetic algorithm the first
17:16 - thing I need to do is calculate fitness
17:20 - then I need to normalize Fitness ok so
17:24 - once we've done that I calculate a
17:25 - fitness I've normalized fitness now it's
17:28 - time to make the next generation and you
17:33 - know I suppose I could draw the best
17:34 - before I make the next generation but
17:36 - I'm not gonna worry about order too much
17:38 - right now right now okay calculate
17:40 - fitness normalized Fitness make the next
17:42 - generation so how do I make the next
17:44 - generation okay let's go back to here
17:48 - and I'm going to write that function
17:49 - next generation so I'm going to make
17:54 - another array I'm going to call it new
17:56 - population and what I want to do is I
18:00 - want to create something like this I
18:04 - want to say for every I want to say for
18:10 - every member of the existing population
18:12 - make a new member of the new population
18:15 - so I want if I have a hundred to start a
18:17 - one of them next generation has 100 the
18:18 - next generation at 100 so just as a
18:20 - little experiment here just to make sure
18:22 - things are working I'm just a new
18:23 - population index I equals population
18:28 - population index i dot splice so what if
18:33 - I just this is like not a genetic
18:34 - algorithm at all this is me just making
18:36 - an exact copy of the previous generation
18:39 - it is the new population and then at the
18:41 - end I can just say hey guess what
18:43 - population equals new population so make
18:47 - a new population that's a copy of the
18:49 - previous population and then have that
18:51 - be the new population so I should be
18:53 - able do this over and over again so I
18:54 - just want to see if this doesn't give me
18:55 - any errors it doesn't give me any errors
18:58 - but this is now this is now running in a
19:00 - loop the thing is I'm never going to
19:02 - have an improvement because my new
19:04 - population is just the same as the
19:05 - previous population so now here's what I
19:08 - want to do here we want to have a
19:09 - genetic algorithm so what I actually
19:12 - want to do is I want to say the new
19:16 - population is pick from the old
19:20 - population and I'm going to say and I'm
19:23 - actually going to say I'm just going to
19:24 - call this bar order equal because I'm
19:26 - going to need to add something called
19:27 - mutation pick one from the new
19:30 - population how do I pick one member of
19:34 - the old population according to its
19:36 - fitness value so things with a higher
19:39 - fitness I want to pick more often the
19:41 - things with a lower fitness I want to
19:42 - pick less often I want to just copy the
19:45 - ones that were good and not copy the
19:46 - ones that weren't
19:47 - so good okay so how do I do that so I've
19:50 - already Norma Matt I've already
19:52 - calculated fitness and normalized it oh
19:54 - I know how so guess what I just made
19:58 - another video about this a particular
20:00 - algorithm for doing that so I'm going to
20:01 - link to that video in this video I'm
20:03 - going to link to that video in this
20:04 - video's description and right now I'm
20:06 - just going to go and grab the code from
20:08 - that so that code is here in this
20:10 - particular sketch that I programmed
20:12 - earlier today called pool selection and
20:14 - I'm going to go and grab this function
20:16 - called pick one okay so I'm going to
20:20 - grab this function and I'm going to
20:22 - bring it over to my gif so what this
20:25 - function does it's a particular
20:27 - algorithm that I go through I'm going to
20:28 - describe it to you briefly if you
20:30 - imagine this as the population and this
20:33 - has a fitness of 70% this has a fitness
20:36 - problem a probability of 20% and this
20:39 - has a fitness map the probability of 10%
20:41 - well I could draw that almost like as a
20:45 - two-dimensional space with 70% being a
20:49 - 20% being B and you know I didn't draw
20:52 - that very well to scale 10 percent being
20:54 - C so how can I pick a random number
20:57 - between 0 and 1 and when I ever I picked
21:02 - from 0 to 0.7 I'm going to kind of land
21:04 - within here whenever I pick from 0 to
21:05 - 0.9 I'm gonna land within here and
21:07 - whenever I pick two point nine two point
21:08 - one I'm going to land in here so you can
21:10 - see that 70% of the time I'm gonna land
21:11 - in here and that's what this algorithm
21:13 - is doing and I go through it more detail
21:14 - in the other video but I do have to make
21:16 - some adjustments here because I'm
21:18 - picking one from this population and
21:22 - okay and I think I need two arrays here
21:25 - so lift and probabilities so I need to
21:31 - pick one from the population according
21:32 - to the fitness values so I need to just
21:36 - change this R equals R minus probability
21:39 - index and then return the index value
21:43 - that defines with that list so let's see
21:46 - if this what this does okay
21:49 - and I think I also want to I just want
21:52 - to make a copy of them might be of
21:55 - because I'm going to start messing with
21:56 - them so it's good for me to create a
21:57 - copy of it so get that order and copy
21:59 - so return a slice okay not seeing any
22:03 - errors but again no improvement
22:05 - why is there no improvement well even if
22:07 - I pick better ones more often if they
22:10 - never change whatever the best one is
22:12 - only the best one matter will ever be so
22:15 - this is where I'm going to add a
22:16 - function and I'm going to call it mutate
22:20 - so in next generation I'm now also going
22:24 - to say mutate order so now I need to
22:27 - write up sorry yeah you take oh and also
22:35 - I didn't I also have to actually put it
22:37 - in the population in the new population
22:39 - which I forgot to do so let's make sure
22:42 - things are still working when I do that
22:44 - whoops new population equals order and
22:50 - let's refresh okay ah uncaught error F
22:54 - is not defined G is line 45 hope there's
23:01 - like an extra straight character there
23:02 - okay okay great so it's working same
23:06 - problem now so I need to add mutation
23:08 - what I want to do is add some subtle
23:10 - changes to the ones that I want to take
23:12 - the ones that did really well and just
23:14 - change them a little bit how am I going
23:15 - to do that so I'm going to write a
23:17 - function called mutate and it's going to
23:21 - take an order and what I'm going to do
23:24 - is so now we have to take an ax mutation
23:26 - rate so let's think about this mutation
23:33 - so how do i mutate an order well one way
23:37 - to do it would actually just to be to
23:38 - take two or two random elements and swap
23:43 - them so this order was pretty good 0 1 2
23:46 - 3 4 but maybe 0 4 2 3 1 would be even
23:50 - better
23:50 - so let's try that so what I'm going to
23:53 - do is I'm going to say and I did this
23:56 - already in my shuffle probe I'll do it
23:58 - again index a equals floor random border
24:04 - dot length I'm going to pick index a and
24:07 - index B and then I'm going to say swap
24:10 - order and remember swap is a function
24:12 - that I've our
24:12 - written index a index P so in my mutate
24:18 - function I'm just always going to swap
24:20 - just one let's see how that does okay so
24:26 - I'm not seeing any improvement one thing
24:28 - I realized I probably forgot to do so
24:30 - let's take a look at the sketch is I'm
24:32 - not actually this thing where I check
24:37 - where do I check I need to actually
24:39 - check to see if I've got a new best one
24:42 - where is that did I lose that by
24:44 - accident where I went to find the best
24:46 - one somehow I lost not oh no it's right
24:49 - here
24:49 - oh no it's not okay so what I need to do
24:53 - is we have this record distance so I
24:56 - don't know where that went
24:57 - I have that coated already but what I
25:02 - want to do is I want to look at the
25:04 - distance did I put that in gaj s
25:09 - somewhere oh it's happening and
25:13 - calculates fitness actually so oh sorry
25:15 - hold on hold on a sec hold on a sec I
25:20 - don't like the way that I wrote this
25:21 - I've confused myself so even though I'm
25:24 - doing it in calculate Fitness I feel
25:26 - like this is a problem and so I am going
25:29 - to say a separate function called find
25:32 - best really makes sense to do it there
25:36 - because I don't this is an expensive
25:40 - operation to calculate the distance so
25:41 - I'm going to leave it never mind
25:44 - so in calculate distance it should be
25:46 - finding the best ever and I should get
25:53 - and this should be drawing the best ever
25:56 - so I would think that with mutation
26:02 - let's just make sure it I don't let's
26:06 - make sure this is running yep
26:09 - so this is doing this over and over
26:11 - again and let's uh let's look at let's
26:17 - let's try to debug this I don't know
26:19 - what I've done wrong here let's look at
26:23 - the record distance
26:28 - so it's finding the same record distance
26:31 - over and over and over again
26:33 - you would think that through some
26:36 - swapping so let's take a look it do I
26:38 - even have like a population a new
26:40 - population yes the population has stuff
26:44 - in it
26:44 - let's make sure that what's in it makes
26:47 - sense hold on
26:54 - so it wasn't working because I had put
26:57 - in the mutate function but i i i didn't
27:02 - uncomment it because I wrote the
27:04 - function and uncomment it so let's add
27:06 - that and now let's see and I got some
27:08 - console.log here that I probably want to
27:10 - get rid of or maybe I don't let's try
27:11 - refreshing it and see what happens
27:13 - oh yes so it's getting better over time
27:15 - this is working look at that how
27:18 - wonderful
27:19 - okay yay all right so um now what have I
27:27 - done have I really solved the traveling
27:31 - salesperson problem I don't think so so
27:33 - first of all is this the optimal order
27:36 - looks pretty good it's kind of hard to
27:39 - say like wouldn't it be better maybe to
27:40 - go like from here and then here and then
27:43 - there wouldn't that be less but I know
27:45 - it's hard for me to eyeball it but only
27:47 - way for us to check for sure would be
27:49 - also have the brute force solution going
27:51 - and have a check every possibility which
27:53 - I would love for somebody to contribute
27:54 - to this to add that functionality back
27:57 - in but let's just go to total cities
27:58 - equals 5 and we can see that bear and
28:02 - let's make the population size let's
28:04 - make that a variable let's make that
28:10 - let's just make that 10 right now and so
28:14 - we're I'm going to put that here and so
28:19 - you can see it kind of like finding it
28:21 - over a short period of time
28:23 - let's make this 6 so we can see that
28:27 - this is working for small numbers and
28:29 - even with 10 like oh that's not whoa
28:34 - that's the population size sorry and
28:39 - what I have it at total even with now
28:43 - with ten cities you're going to see like
28:47 - it's doing really really terribly but I
28:49 - only gave it a population of 10 so let's
28:51 - give it a population of 300 and you can
28:54 - see midtech I don't know maybe that's is
28:56 - that a good or no you could clearly see
28:58 - that you could get a much shorter order
29:00 - by going up those three and then across
29:02 - you can't my handles oh there it figured
29:05 - it out so look at this ah maybe there's
29:07 - some optimization here that could be
29:08 - done I don't know so you can see that
29:10 - this is working and I don't even do
29:12 - crossover all I'm doing is you tame
29:15 - swapping some points in ones that did
29:16 - well I didn't even make the disc the
29:18 - fitness function and exponential
29:20 - function so there's a lot of
29:21 - improvements we can make on this what
29:23 - I'm going to do in the next video and
29:25 - then you play through mutation is a
29:27 - little bit awkward what I'm going to do
29:28 - in the next video is see I can improve
29:30 - this so there's a part one it kind of
29:32 - got something going I'm going to try to
29:33 - and I'm going to try and I should really
29:35 - what I would like to do is also draw
29:36 - just the current populations best one
29:39 - down here and should add that in so what
29:41 - I'm going to do in the next video is I'm
29:42 - going to try to add some things to
29:43 - improve this and namely do crossover
29:46 - between two orders which will not be so
29:48 - obvious how to do that I don't think a
29:50 - lot so think about that in between when
29:52 - I hit stop recording and recording okay
29:54 - see you in the next video
29:58 - you
29:59 - [Music]