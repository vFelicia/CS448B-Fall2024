00:00 - yes I muted myself okay okay
00:13 - hello welcome to a very special coding
00:16 - train episode with a slightly different
00:19 - looking coding train logo FLE some like
00:22 - plants and flowers and things will start
00:24 - growing from here I'm kind of damping
00:27 - here to see if people would chat start
00:29 - to say hi that the sound is working and
00:31 - everything because I'm straight I'm on
00:34 - time today and the reason is because
00:36 - it's not actually me who will be
00:37 - presenting to you I'm very excited to
00:39 - introduce to you a guest CJ from the
00:43 - coding garden the coding garden is
00:45 - another YouTube channel that you should
00:47 - definitely subscribe to if you like
00:48 - coding tutorials watching them live
00:51 - streamed on YouTube will put links and
00:54 - all that stuff in the video description
00:55 - I'm sure you can find it just by typing
00:57 - coding garden into the search bar CJ is
01:02 - an educator a maker and full stack web
01:06 - developer so somebody who actually knows
01:08 - about proper full stack web development
01:11 - it's just something that I definitely do
01:13 - not know about so I'm excited to have CJ
01:15 - here for about an hour to do a tutorial
01:18 - I mean he'll tell you all about it I
01:20 - don't need to try to tell you about it
01:21 - I'm Varrick so I'm sure I'm gonna learn
01:23 - a ton watching it so and this will be a
01:26 - live stream I am going to tip toe off to
01:29 - the side and like sit with the laptop
01:31 - looking at the chat so if you have
01:32 - questions ask them there I'll kind of
01:34 - compile them we can interrupt CJ if we
01:36 - need to but otherwise we'll let him kind
01:38 - of present and then ask some more
01:40 - questions at the end as well did I miss
01:41 - anything
01:42 - okay can you hear see if you can hear
01:44 - its voice so we're gonna do the awkward
01:46 - shuffle now I don't have like I'm not
01:47 - like a professional talk show kind of
01:50 - like coding host thing where welcome and
01:53 - then I'm gonna mute my microphone so I
01:55 - don't by accident make too much noise
01:56 - welcome CJ thanks so much then first off
02:02 - just huge huge thanks to Dan and the
02:04 - coding train and
02:06 - coding trained community yes thank you
02:09 - and this is gonna be a lot of fun so the
02:11 - plan for today is to build a full stack
02:15 - application and the idea is I'm going to
02:17 - build a very basic Twitter clone to
02:20 - demonstrate all the parts and pieces of
02:21 - the full stack so the idea is we're
02:24 - going to be building me our which is
02:26 - Twitter for cats and it'll have two
02:28 - features cats can send em you which is
02:31 - like a tweet and cats can see all the
02:33 - Mews that they have sent so you can see
02:35 - a simple animation here but we're gonna
02:37 - be building basically we have a form you
02:39 - put in your mu and then when you click
02:42 - send it gets sent to the server it gets
02:44 - put in the database then the front-end
02:45 - requests all of them it all comes back
02:47 - and you see it all and we're gonna build
02:48 - that today from scratch so I have all of
02:51 - our objectives here the first one is to
02:53 - diagram the full stack so we're gonna
02:55 - draw a picture and talk about the
02:57 - different parts and pieces and how of
02:58 - this interacts together so let's do that
03:02 - so the full stack is typically split up
03:08 - into two pieces more pieces than that in
03:11 - each piece but you have the front end
03:13 - and the back end what is I think that's
03:17 - your head but uh front end and back end
03:26 - so here I'm going to draw the front end
03:30 - and then we also have the back end and
03:37 - when we talk about the front end this is
03:39 - what the user sees so I'll also be
03:42 - referring to this as the client the
03:45 - client but this is what the user sees so
03:47 - the user is uses a web browser so you
03:51 - could think of it like it's a little box
03:52 - here and they type in the URL and
03:55 - they'll have some place to type and
03:56 - they'll have a button that they can
03:57 - press but the front end is what the user
04:00 - actually sees and this gets loaded into
04:02 - a browser and so you can think of this
04:03 - on a laptop on a desktop on a mobile
04:07 - phone anything that has a web browser
04:09 - that is the client and that is the front
04:12 - end so there's also the back end
04:15 - and here we're gonna have a couple
04:17 - different back-end servers so the first
04:18 - one will be known as the static file
04:21 - server sir server server and this is
04:30 - where all of the files that we write to
04:33 - run inside of a client will live and I
04:36 - guess it's important to note that there
04:37 - are a lot of different ways you could
04:38 - build a full-stack application but the
04:40 - way I'm going to build it today
04:41 - kind of splits things up in this way but
04:43 - letting me know there are a lot of other
04:45 - ways you could do this and on the back
04:47 - end you also might have more of a
04:49 - dynamic server dynamic server and today
04:56 - we're going to be using node.js for that
05:00 - but there are a lot of other things you
05:03 - could use and specifically we are going
05:04 - to be using javascript for this dynamic
05:06 - server but you've probably heard of PHP
05:08 - or C sharp or Java those different
05:10 - things could be running on the server
05:11 - here at the end of the day whatever is
05:15 - running on here will return JSON data so
05:19 - this is we're going to be building a
05:21 - JSON API so if you've heard of API if
05:25 - you've heard the word cloud or I guess
05:28 - yeah cloud that's really when we're
05:30 - talking about the back when you when you
05:32 - say it's in the cloud it's it's some
05:33 - back-end type of server cool so we have
05:42 - the client that's the front end we have
05:44 - the back end so we will call this the
05:47 - dynamic server this is where nodejs
05:49 - build will be running for our static
05:51 - file server we're gonna be using
05:52 - something called live server
05:54 - I believe dan set up this the other day
05:57 - on your setup stream so he shows how you
06:01 - can install that I'm just gonna be using
06:03 - it to serve up our client and then
06:05 - another part of the backend is the
06:07 - database and that usually is drawn like
06:10 - this database and there are lots of
06:14 - different things you can use for your
06:16 - database
06:16 - there's meta part of sequel you might
06:19 - have heard of no sequel today
06:20 - specifically we're going to be using a
06:22 - no sequel database called MongoDB
06:29 - and you you might choose a different
06:33 - database depending on the application
06:34 - that you're building but today we are
06:36 - going to be using MongoDB and really
06:38 - when you build an application you pick
06:39 - and choose maybe what's the best type of
06:41 - database but the main idea with the
06:43 - database is that it is persistent
06:45 - storage persistent that might not be how
06:50 - you spell that storage but let's let's
06:53 - take an example so when you visit
06:56 - twitter.com/anncheno type a URL into
07:10 - your browser and hit enter that makes a
07:12 - request to in this case we'll say a
07:15 - static file server so the moment you
07:17 - type in a URL this will make a get
07:21 - request for some file in this case it's
07:23 - going to request index.html and the
07:28 - static file server will then respond
07:30 - with that file which contains all of the
07:33 - HTML contents HTML and this is the code
07:39 - that we write and it will be loaded into
07:41 - the browser and then the user will see
07:43 - it so this is kind of the first part of
07:45 - what's happening in the full stack let's
07:46 - write some code okay so the first thing
07:51 - we'll do is set up the client-side so in
07:54 - this directory here oh and before I
07:56 - forget I did all of this is on github
07:58 - right now it's just a checklist but as I
08:00 - code I'll push it off to github one of
08:03 - the mods can potentially share this link
08:05 - I put it in the slack you can share it
08:06 - in the chat people want to click on it
08:08 - but the first thing is we'll create a
08:10 - client folder and inside of that client
08:14 - folder here NBS code will create a new
08:17 - file and call it index.html I'll create
08:20 - a basic HTML document the title will be
08:25 - to it Oh now our meow or Twitter for
08:32 - cats and let's put like a little cat
08:35 - emoji there we go
08:36 - for now I'm going to get a little rid of
08:38 - this link in the script here in the body
08:40 - will add a
08:42 - and inside the header I'll have an h1
08:44 - that just says same thing now we're
08:47 - Twitter for cats okay so I have a basic
08:52 - HTML file this is what the user will see
08:55 - so in my terminal I am currently in the
08:58 - client folder and here is well round
09:00 - that live server so this will start up a
09:02 - static file server and then when the
09:04 - browser loads it loads that file that I
09:06 - created so if I change that file let's
09:10 - add more emojis cat another cat and save
09:14 - it live server automatically refresh but
09:16 - the browser will make a get request for
09:19 - this file so let's just see it happen I
09:21 - put this URL in I hit enter that's a get
09:24 - request to get the HTML the browser
09:26 - receives it parses it into the dome lots
09:28 - of stuff happens but ultimately this is
09:30 - what the user sees so so far we're at
09:34 - that first line in the diagram okay and
09:37 - let's set up like a basic skeleton of a
09:38 - web site so for this skeleton I'm going
09:41 - to be using this thing called skeleton
09:42 - CSS is a very basic CSS framework there
09:45 - are a lot of other CSS frameworks out
09:47 - there bootstrap is a really popular one
09:49 - or materialized basically it gives us
09:52 - some default styles so that our site
09:55 - looks good by default it's not like this
09:56 - ugly font so let's grab this so I can
10:01 - just grab this CSS file and then in here
10:05 - I'll add a link to it
10:06 - throw that in save it and if we go back
10:08 - to the browser looks a little bit nicer
10:11 - so this CSS framework automatically adds
10:13 - in fonts and different styles to make it
10:16 - look a little bit better inside of the
10:17 - browser let's add our own styles as well
10:20 - so right below here I'm gonna add a link
10:23 - to styles CSS and then in the folder
10:27 - I'll create a new file called styles dot
10:29 - CSS and let's just say the header let's
10:32 - give it a class
10:33 - so this h1 will give this a class of
10:36 - title and then in our CSS will say title
10:41 - has text-align:center and that should
10:47 - Center the text and if we go back to the
10:49 - browser there is it's in the center so
10:51 - just to talk about what's happening so
10:52 - far in the diagram you'll notice that
10:54 - our
10:55 - timo file has a link to a CSS file and a
10:58 - link to another CSS file so what happens
11:01 - is the browser will load the file and
11:04 - then it'll see those links and then it
11:05 - has to go out and request more files so
11:09 - let's look at the diagram here and so
11:14 - basically it first loaded the request
11:16 - made was made for the HTML file then it
11:19 - needed more things basically the browser
11:21 - parsed it and said oh you want a CSS
11:23 - file from get skeleton oh you want
11:25 - styles that CSS so more requests went
11:27 - out so there was a request here to get
11:29 - the Styles CSS and then the static file
11:35 - server which is live server responds the
11:37 - browser takes that and then loads it in
11:40 - and we see some beautiful styles and
11:42 - they're applied to the document so every
11:44 - single thing that's happening in here is
11:45 - part of a request that's going out to a
11:47 - server so now that the page is loaded it
11:50 - the at this point it's just static it's
11:53 - just sitting there we're seeing what we
11:54 - see it's not communicating to any
11:55 - servers anymore so what we want to do is
11:58 - we want to make it so that the user can
11:59 - type in their mu and then send it off to
12:01 - the server so let's get that going here
12:06 - so we created a header we created the
12:09 - form we brought in our CSS well we
12:16 - haven't created for him we will create
12:17 - the form any lingering questions or
12:19 - anything like that okay so in here I'm
12:24 - gonna add a main area and in here I'll
12:26 - add the form typically forms are what we
12:28 - use to get user input so if you've ever
12:29 - typed into a text box or something like
12:31 - that it is a form so on this form I want
12:35 - a label this will be for the user's name
12:37 - and then I'll add an input and this will
12:40 - be of text and we'll give it an ID of
12:43 - name and we'll give it a name of name
12:47 - and let's see what we get so by default
12:50 - if we get a nice little input box on the
12:51 - screen let's give it some Styles
12:53 - so built into skeleton is this class
12:55 - named you full width and you'll notice
13:00 - that the input went all the way across
13:01 - but I don't want it to take up the whole
13:03 - screen so let's add some more styles
13:05 - let's call this form let's give it class
13:08 - like you form and in here and the styles
13:13 - I'll add a new one from you form let's
13:16 - say the width is like 50% and it has
13:22 - margin:0 and auto so it should center
13:26 - there we go so our form is like a nice
13:27 - and center on the screen and that's for
13:29 - the name and then we also need a text
13:31 - area for them you okay so the four here
13:36 - will be call this content and will say
13:39 - this mu the ID will be content the name
13:42 - will be new sorry content and instead of
13:49 - an input we want a text area and that
13:55 - gives us an area where they can type in
13:57 - their content as well okay last thing we
13:59 - need is a button so that they can submit
14:01 - this form and send the data to the
14:02 - server so we'll just say send your you
14:06 - input nice little cat in there like that
14:10 - we get a nice little button another
14:12 - thing built in to skeleton is this
14:14 - button primary class and we'll give it a
14:16 - nice blue color so let's make this
14:17 - button - primary let me get a nice
14:20 - little button we can click cool so we
14:24 - have this form the user can type in here
14:26 - but now we actually want to send this
14:28 - data somewhere but let's look back at
14:29 - our checklist so we created a form we
14:32 - have name we have content we've listened
14:35 - we've setup full width and all the
14:37 - inputs but now we actually need
14:38 - JavaScript to listen for when this form
14:40 - is submitted so here's what I'll do I'll
14:43 - create a new file let's call this client
14:45 - jeaious I'm gonna be creating other
14:48 - JavaScript files so just to make sure
14:50 - we're clear as to where we are when
14:51 - we're working on them I'm gonna call
14:53 - this one the client a Jas and I'm gonna
14:55 - go ahead before I forget we'll add a
14:57 - script at the bottom here that will
15:00 - bring in our client dodges and just to
15:07 - make sure it's working let's just log
15:08 - hello world and back to the browser open
15:12 - the dev tools and it is working we get
15:14 - to the hello world log cool so now we
15:18 - actually want to listen for when the
15:19 - user clicks this button so that way we
15:21 - can grab all of the day
15:22 - that's in the form so first thing I'll
15:24 - do is get a reference to the form by
15:27 - using document document dot query
15:34 - selector and then with query selector
15:37 - you can pass in any valid CSS selector
15:39 - to choose some element on the page so in
15:41 - this case I want to select this form so
15:45 - a valid CSS selector for that is just a
15:47 - fascinating form and that will give me
15:48 - the form so part of our objectives were
15:51 - to differentiate between client-side
15:53 - JavaScript and server-side JavaScript
15:55 - anytime you see document that is
15:58 - client-side JavaScript because we're
16:00 - actually interacting with the webpage
16:03 - with the thing that the the user is
16:05 - interacting with so we have the form now
16:07 - we want to listen for when the user
16:09 - clicks submit so we're gonna add an
16:12 - event listener for the submit event
16:14 - we'll get access to the event and then
16:19 - for now let's just logout form' was
16:21 - submitted cool let's see what happens so
16:26 - my name is CJ my Mew is hello world
16:29 - world go and you'll notice it tried to
16:33 - log but then the page refreshed and
16:36 - you'll notice the URL changed here so by
16:38 - default when a form is submitted
16:40 - the browser automatically tries to send
16:44 - the data somewhere but we don't want
16:46 - that we want to stop it from happening
16:48 - so that we can handle it with JavaScript
16:50 - and for this we can do prevent default
16:54 - and now that we're preventing the
16:55 - default action the data won't go
16:56 - anywhere we're basically telling the
16:57 - browser oh now we want to do this with
16:59 - JavaScript so here let's try to log form
17:02 - submitted and then hello world we click
17:10 - Submit and it says form submitted cool
17:12 - so we've tapped into when the user
17:14 - clicks this button now we actually want
17:16 - to grab the data from the page so to do
17:18 - that I'm going to use form data so form
17:22 - data is built into the web browser and
17:26 - it works by passing in a reference to
17:29 - the forms because I already have this
17:30 - form variable we can pass it in here to
17:33 - form data
17:35 - and now we can grab some of the the user
17:38 - input from the page so specifically if I
17:41 - want to grab the name here because I
17:43 - have the name set up as name I can say
17:46 - let's say name is equal to form data yet
17:50 - and pass in a m-- and if I also want the
17:53 - content I set up the name here to be
17:55 - content so I can say content is form
18:00 - data get content and now I have what the
18:05 - user typed into both input boxes and so
18:07 - let's just create an object called mu
18:10 - and inside of it I'll have the name and
18:13 - the content and let's just log it out
18:16 - them you cool so now when the form is
18:19 - submitted we should see an object hello
18:23 - world so we have the object but remember
18:29 - we're still on the client side we
18:30 - haven't actually interacted with our
18:31 - dynamic server just yet so let's go back
18:33 - to our checklist we are listening for
18:38 - the submit I guess one thing we'll do is
18:39 - when the form is submitted we want the
18:41 - user to know that something is happening
18:43 - like the data is going somewhere so I'm
18:45 - actually going to show a little loading
18:47 - image so I have this loading Jif here
18:49 - and we put it in the client and in the
18:52 - HTML I'm going to have a div right below
18:54 - the form let's just give this a class of
18:57 - loading and inside of here I'll have an
19:02 - image its source will be loading dock
19:04 - jiff and by default it should like show
19:06 - on the page there it is but I want to
19:08 - like Center it first so in my CSS I'll
19:11 - say loading actually let's just give it
19:15 - the same 50% width as the meu form so
19:18 - that way it should automatically pop up
19:20 - in the middle almost good enough for me
19:24 - so the this is showing automatically
19:28 - when the page loads but I actually want
19:30 - to hide it the moment the page loads and
19:32 - then only show it whenever we've
19:34 - submitted the form so let's grab a
19:36 - reference to it so I'm going to call
19:37 - this the loading element this will be
19:39 - document query selector and we need to
19:42 - pass in some selector to get access to
19:44 - this div in this case I can tell it to
19:47 - grab the element with the low
19:49 - class and when the page loads I'm just
19:52 - going to hide it so to do that I can
19:54 - access its style so loading element
19:56 - style and set its display to none okay
20:02 - and so now when the page loads the
20:03 - loading actually hides but what we want
20:05 - is when we submit the form we will hide
20:09 - the form and show the loading so here's
20:11 - what I'll do I'll set the loading to be
20:14 - displayed and then I'll set the form to
20:18 - be hidden okay so my name is CJ my name
20:22 - is hello world and then when I click
20:25 - Submit we're logging into the console
20:28 - we're showing this loading image but now
20:30 - we actually need to send the data
20:31 - somewhere someone is giving me a tip you
20:36 - all is saying Center the gist with text
20:37 - align Center on the container let's do
20:39 - it so in here
20:40 - well actually I specifically want to say
20:42 - loading has text-align:center yeah
20:49 - thanks actually I just turned my mic
20:53 - back on a couple interesting questions
20:54 - notice you using using query selector
20:57 - and somebody at somebody asked well why
20:59 - don't you use on click or I know there's
21:01 - like document dot get element by etc can
21:05 - you talk a bit about why you'd use a
21:06 - query selector definitely so ultimately
21:08 - what I want to do with this line of code
21:10 - is select some element on the page so
21:12 - there are a lot of different ways to do
21:14 - it there's get element by ID
21:15 - there's get elements by class name you
21:17 - get on once my tag name there's if
21:20 - you've ever used jQuery it's just like
21:22 - dollar sign and putting the selector you
21:24 - want in there I mainly use this because
21:27 - it's convenient like I know what
21:29 - specifically what selector to use to
21:31 - select it but at the end of the day this
21:33 - is just grabbing an element on the page
21:35 - so you can use whatever you're
21:36 - comfortable with cool that's a good
21:39 - question other ones one person asked
21:47 - does use I you know for I think they
21:49 - were referring to this is Ahmad in the
21:52 - chat as does using a framework affect
21:54 - performance and I think that was
21:56 - referring to the CSS framework so like
22:00 - it is
22:01 - a big thing to load does it make the
22:02 - page run slower or their considerations
22:04 - they're definitely so I wouldn't say it
22:07 - makes the page run slow but there will
22:08 - be a little bit of time before the
22:11 - styles will kick in because the browser
22:13 - does have to download the CSS file but
22:15 - once that's downloaded the CSS file and
22:17 - it's up and going you're good to go
22:19 - there and a mental note I don't think we
22:22 - need to do this now but people are in
22:24 - love with your color themes I noticed
22:26 - you're the console in the browser was
22:28 - like a dark theme so maybe you a little
22:30 - bit at the end maybe you could show us
22:32 - like what fonts theme settings and so I
22:36 - totally glossed over this so on my
22:40 - channel I talk about UJS I talk about
22:42 - react to talk about a love a lot of
22:43 - other front-end frameworks and right now
22:45 - I'm doing all of this with what we call
22:47 - vanilla JavaScript meaning I mean I
22:48 - haven't add any added any JavaScript
22:50 - libraries really to just show how all
22:52 - this stuff is done manually but
22:54 - typically I'll use something like View
22:56 - jeaious which which fits in here on the
22:58 - diagram will kind of show where specific
23:00 - technologies fit in and if you have any
23:02 - questions about like where does this
23:03 - technology live throw that in the chat
23:04 - and we can put it in the diagram to okay
23:07 - let's look at our checklist we're hiding
23:10 - the form we're showing the loading we
23:12 - got the data form where we've logged it
23:13 - and now we have completed two objectives
23:15 - we have gotten user input on the client
23:17 - and we have hidden and shown elements on
23:19 - the client so this is typically how we
23:22 - get user input when you're dealing from
23:23 - some sort of form and when you're
23:25 - dealing with vanilla JavaScript just
23:26 - manipulating the display property of
23:28 - style is how you hide and show something
23:30 - so we're doing that now we move on to
23:34 - the backend so before and the code that
23:37 - we just wrote
23:40 - click into the chat you have to click
23:43 - back into the OBS oh this is this is me
23:46 - over here
23:47 - so the code the code that we just wrote
23:50 - it's very important note is is running
23:53 - right now it's running inside of the
23:55 - browser I don't know if you can see that
23:57 - right let me have a different color so
23:59 - we just created that index of HTML it's
24:01 - running in here so what we're about to
24:04 - do is we're going to jump to the backend
24:06 - and write some code that's gonna be
24:07 - running on our dynamic server over here
24:09 - so let's do that
24:11 - okay so first step let's create the
24:13 - server folder
24:14 - now as I mentioned there's a lot of
24:16 - different ways to do this you
24:16 - technically could put the client folder
24:18 - inside of the server folder but I'm just
24:20 - going to show them completely separate
24:22 - just to really differentiate between
24:23 - like what they are so here let's make a
24:27 - server folder and in the server folder
24:30 - this is going to be a node project so
24:32 - I'm gonna initialize this with a
24:34 - package.json so NPM it - why just gives
24:38 - it all of my defaults it tells it my
24:39 - name gives them my default license and
24:42 - then we need a couple of packages so
24:44 - specifically we're going to be using
24:46 - Express as our framework to listen for
24:51 - requests that come from the client and
24:52 - then respond with the appropriate data
24:54 - we're also going to be using a
24:56 - middleware library called Morgan which
24:59 - will log all of the incoming requests so
25:01 - we can kind of debug what's happening on
25:04 - the server so we're gonna install
25:05 - Express and Morgan awesome so those two
25:22 - things installed now we can set up our
25:23 - server so on the server new file let's
25:26 - call this index Jas and inside of here
25:29 - we're going to create our dynamic server
25:32 - our back-end application so let's bring
25:34 - in Express so if you're familiar with
25:36 - nodejs this is how we bring in a library
25:38 - that we've installed with NPM so I
25:41 - brought in the Express library and the
25:43 - first thing we do is create an
25:44 - application and this is just equal to AB
25:46 - equals Express invoked so now I have an
25:50 - Express application and now we want it
25:52 - to actually start listening so if you
25:54 - saw before right now I'm using this
25:56 - static file server which is live server
25:58 - and it's running on port 8080 every
26:01 - computer has many many different ports
26:02 - and so we're gonna have two servers
26:04 - running on my computer one will be on
26:06 - 8080 and the other one will be on 5,000
26:08 - so I want to start up this back-end
26:10 - server and I'm gonna tell it to listen
26:12 - on port 5,000 and when it's ready to go
26:15 - I'm going to just log out listening on
26:19 - HTTP colon slash slash localhost 5,000
26:25 - cool and so
26:27 - if I run this we should get a server
26:29 - that starts listening on port 5,000 so
26:31 - before I started in my package.json I'm
26:34 - going to add a start script so this is
26:36 - basically where you can put the command
26:39 - that should actually start up your
26:41 - server in this case it's node index
26:43 - touch I guess and by doing this now in
26:46 - the terminal I can just do NPM start and
26:48 - that will start up my server on port
26:49 - 5,000 so if we take a look at it right
26:52 - now it's nothing so we have a blink back
26:55 - in application it doesn't have any
26:56 - routes so when I try to request it it
26:58 - just says cannot get that and so
27:00 - basically we're going to start defining
27:01 - what happens when a client makes
27:03 - requests to this server so let's look at
27:06 - our check list we created the server
27:08 - folder we initialized it we install
27:10 - dependencies we have our basic set up
27:12 - now I'm going to add a listener for when
27:15 - a get request comes in on the slash
27:17 - route so as I mentioned earlier when you
27:19 - just put something in your browser and
27:21 - hit enter that is a get request and by
27:23 - default it's making a get request to the
27:26 - slash route so what I'm gonna do on my
27:29 - server is say is River when you get a
27:31 - get request on the slash route run this
27:34 - function and we have two variables in
27:36 - here typically they're abbreviated req
27:38 - and res which i like to do but they
27:40 - really stand for request and response
27:44 - and these are two variables that exactly
27:47 - correspond to our diagram so here this
27:52 - is the request it's it's what the server
27:57 - is asking for and then this arrow going
28:00 - from the back end to the front end this
28:02 - is the response now in in this diagram
28:06 - that's with our static file server but
28:08 - the exact same thing is going to happen
28:09 - with our back-end server so our client
28:13 - eventually will be making a get request
28:15 - to our dynamic server it's gonna say I
28:18 - want to get all news and the dynamic
28:22 - server will do some processing it'll
28:23 - talk to the database and then ultimately
28:25 - this thing will respond with a big JSON
28:28 - object probably actually an array it'll
28:30 - respond with an array of JSON objects
28:35 - various things inside of them but
28:38 - specifically the requests that the
28:40 - client will make
28:41 - here is the request and the response
28:45 - that the server gives here is the
28:48 - response I guess I'm using the word in
28:50 - what I'm talking about but inside of
28:52 - express those those two variables mean
28:54 - exactly that yes I don't have a question
28:56 - yes so I'm curious as to why or if it
29:00 - matters you're still using the live
29:02 - server for the static files is the idea
29:04 - that you would eventually move the
29:05 - static files also like why not have the
29:08 - dynamic server also hosts those static
29:11 - files yes so there are a lot of a lot of
29:13 - ways to do it you could do that but I am
29:15 - actually at the end I'll show how we put
29:16 - this on the Internet
29:17 - and the idea with keeping these on a
29:20 - separate server is that we can benefit
29:22 - from things like a CDN like content
29:24 - delivery network goddess and so let's
29:27 - say you get like thousands of users to
29:29 - your website they're all gonna be
29:31 - requesting the home page from this CDN
29:33 - which has it cached unlike thousands of
29:35 - servers all over the world and so that
29:37 - the initial web page will load really
29:39 - well it's good time event and so by by
29:44 - having it on a separate server it it
29:48 - keeps it it makes the the incoming
29:51 - requests go to different servers so the
29:53 - request for actual data will be to this
29:55 - server but when people are loading the
29:56 - page will load there and I will show how
29:58 - to put it on - you know totally makes
29:59 - sense
30:00 - cool hold on me flip this camera back
30:03 - I'll be so seamless no one will even
30:05 - know we're there other questions no that
30:09 - no I don't think I don't think so okay
30:11 - so as I was mentioning these two
30:14 - variables are like represent that
30:16 - incoming request and the outgoing
30:18 - response so I'm gonna rename these to
30:20 - rec and res and here's what we say so
30:24 - when the client makes a get request on
30:27 - the slash route we want to respond with
30:29 - some JSON in this case I'm just gonna
30:31 - pass in a message and it says meow and
30:36 - we'll throw in an emoji like a laughing
30:39 - cat cool so we now have our server set
30:42 - up when it's received as a get request
30:43 - on slash respond with a JSON object
30:45 - let's try it so we go to the browser we
30:48 - now request the data from our server
30:49 - which is on port 5,000 nothing happens
30:52 - so when you're working with nodejs
30:54 - if you ever modify the files you have to
30:56 - actually kill the server and then
30:58 - restart it and then it should work so we
31:01 - make the request and we get the data
31:03 - back but while I'm thinking about it
31:05 - there's this handy tool called node mom
31:07 - which will automatically refresh every
31:10 - time I change the server and install
31:13 - that and basically I'll run it and
31:16 - anytime I changed files on the server
31:18 - it'll automatically restart and we
31:19 - should see those changes when we make
31:20 - requests to it so node Mon is installed
31:24 - I'm gonna add a new script in my package
31:26 - JSON so I'm going to create a dev script
31:29 - node Mon and just do the same thing so
31:34 - tell node Mon to run against that file
31:36 - and now if I do npm run dev that starts
31:40 - up node Mon and anytime I make changes
31:42 - it should restart the server so this
31:44 - loads but if I go back to my server code
31:47 - and add a new emoji like the regular cat
31:53 - and I again make the request and so you
31:56 - might not be seeing this but I'm
31:57 - pressing command R so I'm refreshing the
31:59 - page which is making another get request
32:01 - to the server on slash and then I see
32:02 - about the latest result cool so we have
32:05 - a basic server setup that's responding
32:06 - to incoming requests if Rhonda I move on
32:10 - to this next thing any other there were
32:15 - some office mi off topic question yeah
32:17 - not be no related to web development but
32:19 - not exactly what you're coding so we can
32:21 - save those today and I think catalog
32:23 - cool
32:25 - so let's now work on the route for
32:28 - receiving than me so if we can remind
32:30 - ourselves what's about to happen here so
32:32 - on the client this will when we type in
32:38 - CJ and we type in some message like
32:40 - hello world and click send that has to
32:42 - send it to the server so we're going to
32:44 - create a route that's waiting for that
32:45 - incoming data and we'll actually then
32:48 - like insert it into our database so
32:49 - let's create the post route so here I'll
32:52 - do an app dot post and we'll make the
32:55 - route slash muse so when the server
32:58 - receives a post request on slash muse we
33:00 - go
33:01 - to run that this request Handler and for
33:04 - now I am just going to log the request
33:06 - body rec buddy let's login and what
33:11 - should happen is when some incoming post
33:13 - requests happens to my server it will
33:15 - log out whatever the client sent to us
33:19 - so now let's get that going on the
33:22 - client side so we're just logging it but
33:24 - now we're gonna go back to the front-end
33:26 - and actually send the data to the server
33:28 - so on our front-end
33:30 - we're gonna use something called fetch
33:31 - so right here instead of just logging
33:34 - out to the console we're gonna actually
33:37 - send that data somewhere so first thing
33:39 - is I need a variable to hold on to where
33:42 - is the server that I'm making requests
33:43 - to so we'll call this API URL and this
33:47 - will be HTTP colon slash slash local
33:51 - host local host port 5000 and slash muse
33:59 - so I'm going to be making a post request
34:02 - against this URL to actually send this
34:04 - object to our dynamic server so here
34:08 - we'll use fetch we'll pass in the URL
34:11 - that we're making the request against
34:13 - and then we have to specify a few
34:15 - different options so in this case we
34:17 - need to tell it that the method is post
34:19 - we need to say what is the body of the
34:22 - request in this case the body of the
34:25 - request or the thing we're sending to
34:26 - the server is the miu itself this object
34:28 - with name and content so we're going to
34:30 - set body to be mu and then also we need
34:33 - to specify some headers so we need to
34:36 - tell it what are we sending it in this
34:38 - case we'll specify the content type
34:40 - header and we'll say application JSON so
34:44 - we're telling the server
34:46 - hey server in the body of my request is
34:49 - JSON right now it's actually not so
34:51 - right now it is a JavaScript object but
34:53 - to turn it into JSON we have to use json
34:55 - stringify
34:56 - and this will actually take that object
34:59 - turn it into something that the server
35:00 - can parse and understand and then we
35:03 - should be able to see it on the server
35:04 - side so essentially what's happening
35:07 - here is when the form is submitted we
35:09 - grab the stuff from the form we put it
35:11 - in an object we show that loading
35:13 - spinner and then
35:14 - we attempted to send this data off to
35:16 - our back-end server so let's see what
35:22 - happens so actually let's let's set up
35:25 - okay I have the backend route I have the
35:26 - form let's let's see what happens we're
35:28 - gonna watch the server side logs because
35:32 - we want to make sure that we're actually
35:33 - seeing that incoming thing that the
35:35 - client is sending us let's see okay so
35:38 - my name is CJ my Mew is hello world and
35:43 - I throw in a cat and then we try to send
35:48 - it Oh No
35:50 - the dreaded cores error so you may have
35:53 - seen this before but it's right now it's
35:55 - saying responds to preflight request
35:56 - doesn't pass access control check no
35:58 - access control allow origin header is
36:01 - present on the requested resource
36:02 - so therefore origin one two 7.000 180 so
36:06 - you'll notice the webpage is currently
36:08 - on one two seven zero zero one 8080 that
36:11 - is the current origin is therefore not
36:14 - allowed access to the origin which is on
36:16 - port 5,000 so essentially the browser is
36:21 - trying to protect us it's doing this on
36:24 - our behalf like it doesn't want
36:25 - javascript to be able to talk to like
36:27 - just any server in the world unless
36:28 - those servers actually allow it so what
36:31 - we can do on our back-end is say I will
36:34 - allow incoming requests from any any any
36:37 - other origin so to fix this specifically
36:40 - we're going to install something on the
36:41 - backend now if you get this error you
36:43 - may not always be you may not always
36:46 - have your own server you might get this
36:48 - error because you're trying to talk to
36:49 - some other server and in that case there
36:51 - are other ways to get around it or fix
36:53 - it but in this case we were going to use
36:57 - a package on the back end which will
36:58 - automatically add this header this
37:00 - access control allow origin header so in
37:03 - our server folder here I'm going to
37:06 - install cores so this is a NPM package
37:10 - which is a express middleware and then
37:13 - in our server side so first before
37:16 - before we move on let's let's clarify
37:17 - where we are see the cores are a rebel
37:20 - in this moment you will see this error a
37:21 - lot there are different ways to fix it
37:23 - but specifically if you're in control of
37:25 - the server you can install the course
37:27 - so we saw it we recognized it we
37:29 - remembered pretty much how to fix it if
37:31 - we're in control of the server that was
37:33 - the front end we were working on code
37:36 - here that's sending data to the server
37:37 - and now we're going to transition back
37:40 - to the back end so we installed cores
37:44 - and now let's use it so the way this
37:48 - works is I can bring in the cores module
37:50 - and then do what's called using it so
37:55 - I'll say app dot use cores and this
37:57 - actually adds cores as a middleware so
37:59 - now any incoming requests to my server
38:01 - is gonna pass through this middleware
38:03 - and it's gonna automatically add those
38:05 - cores headers to it
38:06 - so this should get rid of that error and
38:09 - then we'll see if we're actually logging
38:10 - out what the client is sending us so
38:12 - we'll go back we'll try again my name is
38:16 - CJ my Mew is hello world we'll send it
38:20 - and we see undefined so another thing
38:23 - that you have to do on the server side
38:24 - is add a middleware that's going to
38:27 - parse incoming data so right now in the
38:29 - client we can see on network that this
38:33 - post request is attempting to happen so
38:36 - it's making a request here it's sending
38:39 - this data so we are sending it from the
38:41 - client but the server can't process it
38:44 - so for this we actually need to add the
38:46 - body parser middleware and this is built
38:48 - into Express so I can use express dot
38:51 - JSON and this is a JSON body parser so
38:59 - any incoming request that has a content
39:01 - type of application JSON will be parsed
39:05 - by this middleware and then put on the
39:06 - body so now we actually should get
39:08 - access to rec dot body let's try okay so
39:11 - name is CJ mu is hello world we're gonna
39:15 - add a cat here oh not that cat okay go
39:19 - and notice the server is now receiving
39:21 - the data so the client the user types in
39:24 - there for the other information they
39:26 - click the submit button it gets sent to
39:28 - the server and now the server has to
39:29 - actually do something with it so let's
39:32 - look at our checklist we have made sure
39:36 - that we're actually receiving that data
39:37 - so the moment I press this
39:40 - submit button the server is receiving it
39:42 - so I can try again
39:43 - what and the server is actually
39:46 - receiving that so we're taking it from
39:47 - the client and sending it to the server
39:49 - ok so we added our middleware and now we
39:53 - can process this incoming request so on
39:56 - the server side we actually want to do
39:58 - some validation we want to make sure
39:59 - that the client what they're sending us
40:01 - has a name has content so let's just do
40:04 - will say if is valid mu and we'll pass
40:07 - in rec top body and if it is then we'll
40:11 - insert into DB so we'll handle that in a
40:14 - bit but if it's not we actually want to
40:15 - respond with an error right now my my
40:19 - client side like technically you could
40:20 - click that submit button without typing
40:22 - anything in so I want to protect against
40:23 - people just submitting Blanc de Blanc
40:26 - data to the server so here I'm going to
40:30 - just do a res dot status I'm gonna set
40:32 - this to 42 and then here I'll do you
40:34 - arrest a chase on and just give them a
40:36 - message hey name and content or required
40:45 - cool and now let's write this function
40:48 - is valid new so is valid new nope not
40:51 - that takes in so this is a function it
40:54 - takes in mu and we want to make sure so
40:58 - if mu dot name is a thing and mu dot
41:02 - name to string dot trim so we're gonna
41:06 - take the name that they're sending us
41:08 - make it a string trim it to remove all
41:10 - whitespace and make sure that that does
41:13 - not equal the empty string so we're
41:15 - gonna make sure that they have actually
41:16 - sent us a name and this exact same thing
41:19 - for the content so here we'll make this
41:25 - content so we're gonna make sure that
41:27 - they're sending us a name they're
41:29 - sending us some content and then we'll
41:30 - insert it into the database and for now
41:33 - let's just create an object let's call
41:35 - this mu and it will have a name which
41:39 - will be wrecked by a name dot to string
41:42 - and then we'll also have a content and
41:46 - this will be wrecked body dot content to
41:49 - string there was actually an interesting
41:52 - question so I noticed you're doing
41:54 - validation do you ever use a library or
41:56 - this came from Noel Jose is there any
41:59 - library node module that you know that
42:01 - helps with data validation yeah
42:02 - absolutely kind of don't have to do all
42:04 - that code manual in your definitely so
42:06 - there is like it's literally called
42:07 - Express validator you can search it on
42:09 - NPM and they're probably a lot of other
42:11 - ones out there but these are various
42:14 - libraries that just make it a little bit
42:16 - easier to do validation on incoming
42:17 - requests so this is a pretty popular one
42:20 - maybe this is not the one but yes there
42:24 - are packages that will do that for you
42:25 - and then also if on my stream before
42:28 - I've used something called joy which is
42:32 - discussed in the chat and I was like I
42:35 - had no idea what everybody's talking
42:36 - about oh yeah so joy is a library that
42:38 - comes out of the happy team that so
42:41 - happy is another framework very similar
42:44 - to Express but you just do things a
42:45 - little bit differently but joy is a
42:47 - really cool library because you can do
42:49 - like object schema validation and like
42:51 - make sure something is a string and it's
42:53 - alphanumeric and it has like a very nice
42:55 - way of defining it I actually found one
42:57 - called I think it's called yup which was
42:59 - based on joy is very similar but yes
43:02 - there there are lots of them initially
43:05 - when you're getting started I like to
43:06 - just show this to show like what's
43:08 - happening but absolutely if you're if
43:10 - you have an object that has like ten
43:11 - properties you probably want to use some
43:12 - library like this oh no did I just close
43:15 - Chrome I think I did wait did I oh well
43:23 - localhost 3000 oh 5,000 and then
43:28 - localhost 8080 and what about is someone
43:34 - also asks something related to security
43:36 - yes but I well note about secure those
43:40 - routes for invalidations you talked
43:42 - about so yeah and like what's missing
43:45 - here in terms of security I guess
43:47 - definitely so the main thing is you
43:48 - always want to validate what you're
43:50 - putting into your database database and
43:52 - I'm doing that right here I'm making
43:53 - sure that the data they're sending us
43:54 - has a name and has some content and then
43:57 - the other thing I'm doing which kind of
43:59 - glossed over is whatever they're sending
44:01 - us I'm saying to string so when you're
44:03 - dealing with a database you want to
44:04 - prevent what's called in
44:06 - so if they tried to send us like a
44:09 - nested object instead of just a string
44:11 - and I didn't say to string we could
44:13 - potentially put that into our database
44:14 - so you want to be very careful there the
44:17 - main thing is if if you're dealing with
44:19 - receiving data from a client you always
44:21 - want to do validation and you always
44:22 - want to be very careful about what
44:23 - you're putting into your database they
44:25 - are correct and that I haven't done any
44:27 - validation on the client side but as
44:29 - long as I'm doing it on the server side
44:31 - no one's gonna be able to put bad stuff
44:33 - into my database definitely okay so now
44:37 - we're validating it and it should so
44:39 - actually if I let's look at the dev
44:41 - tools and I try to send this as an ad
44:43 - form you'll notice I get back an error
44:45 - I should probably handle it we don't
44:46 - have time but if I do send it good data
44:50 - then it logged it out and now we're
44:53 - ready to insert it into a database so
44:56 - let's look at our checklist we have
44:58 - validated the name and content it must
45:01 - be a string it's not empty if it's not
45:03 - valid we're responding with a 42 error
45:05 - and it we are making sure that it has
45:09 - name and content now we want to put this
45:11 - thing into a database so for the
45:13 - database I'm going to be using MongoDB
45:15 - and there are a lot of libraries for
45:17 - talking to MongoDB specifically the
45:19 - library I'm going to be using is called
45:21 - monk it's very simple very easy to
45:24 - interact with really popular when people
45:26 - use is called Mongoose but this is way
45:28 - simpler to get set up so I'm gonna
45:29 - install a package called monk and
45:31 - locally I have MongoDB installed on my
45:34 - computer so I can type that drops
45:36 - me into a shell and I can actually
45:38 - query the database insert stuff in and
45:40 - interact with it in this way but as long
45:43 - as you have it installed and running the
45:45 - stuff I'm showing now will allow you to
45:47 - connect it to your database so I
45:50 - installed monk and let's get it going so
45:53 - in my server we're still on the server
45:54 - let's create a connection to the
45:56 - database the first thing is we'll bring
45:57 - in monk and then we will create a
46:03 - connection to the database using monk so
46:05 - I'm gonna create a variable called DB
46:06 - this will be monk and then you pass in
46:08 - how does it connect to the database in
46:10 - this case my database is running on my
46:14 - local machine so I can do localhost and
46:15 - I tell it what database do I want to
46:19 - talk to
46:19 - in this case we'll call it me our and
46:22 - right now this just says connect to the
46:26 - MongoDB on my local machine to a
46:27 - database called an our simple enough
46:30 - the way works is with collections
46:33 - you can have different collections of
46:34 - data I think of a collection is just
46:36 - basically an array so ultimately what
46:38 - we're going to be doing is have we'll
46:40 - have an array and then every time
46:41 - someone submits them you will put an
46:43 - object in here that has like a name and
46:45 - it has some content and then will
46:49 - automatically assign it some unique ID
46:51 - but basically every time we put
46:54 - something in the database
46:55 - this array is just getting bigger and
46:57 - bigger and bigger but the cool thing
46:59 - about this is it's not just an array
47:01 - it's a full-fledged database it keeps
47:02 - track of the information if the server
47:04 - ever goes down it's all still there but
47:06 - that's pretty much what you can think of
47:08 - a collection as it's just a
47:09 - database that were an array that were
47:11 - just pushing data into so I want a
47:14 - collection called muse so I create a
47:17 - variable called muse and say DB get and
47:19 - we'll just pass in muse so this is now a
47:24 - collection and the cool thing about
47:26 -  is if the database doesn't exist
47:28 - this will automatically create it if the
47:30 - collection doesn't exist this will
47:31 - automatically create it so we basically
47:33 - are just connecting directly to the
47:36 - database and if it doesn't exist we're
47:40 - creating that collection awesome so now
47:41 - muse is a collection inside of our
47:44 - database and here after we've done all
47:47 - of our data validation we want to insert
47:49 - it into the database so let's just do
47:50 - muse insert and specifically if you want
47:54 - to know how to use monk more you can
47:56 - look at their documentation there's all
47:57 - kinds of methods like insert and update
47:59 - and find specifically I'm using the
48:01 - insert method and I'm gonna pass in the
48:03 - mute that I want to insert and then we
48:05 - should get back the created mu and in
48:09 - this case I'm just going to respond back
48:11 - to the client with what was just created
48:12 - so I'm gonna do a res dot JSON we'll
48:14 - pass in the created mu and let's see
48:17 - what happens so let's back up a little
48:21 - bit we are listening for when the the
48:24 - client is sending a post request to this
48:27 - URL
48:27 - they're sending as data we're gonna
48:29 - validate it before we insert it into our
48:31 - database we'll create the object
48:33 - then using our existing collection here
48:36 - we will insert it in and then once it's
48:38 - inserted we're going to respond with
48:41 - what was just inserted so save that
48:44 - let's check some boxes and then we'll
48:46 - check to make sure it works cool oh and
48:50 - one thing I forgot is before we insert
48:52 - it let's also give it a created date so
48:53 - we can actually show whenever these Mews
48:55 - were created so for this I'm just going
48:56 - to say created is a new date cool we've
49:01 - inserted it we've responded it with it
49:06 - and I've done everything right we should
49:09 - be actually inserting it into my
49:10 - database so now back to the front-end so
49:14 - if you remember this was all initiated
49:16 - by this post request here the client is
49:18 - sending our server some data and the
49:21 - date the the server is then inserting it
49:23 - into the database and then now we
49:26 - actually need to do something with it so
49:28 - here I'm just going to do a dot then
49:30 - we're gonna get back the response and I
49:33 - know that the response is JSON because
49:36 - my server is responding with JSON so on
49:39 - the client side I can say read such a
49:41 - song and then I get access to the
49:44 - created mu and for now let's just log it
49:48 - so our client will send the request the
49:50 - server will receive it and then we'll
49:51 - log it out cool let's see what happens
49:56 - so now c.j mind you is hello world there
50:02 - are some emojis go cool so you'll notice
50:13 - that I'm actually getting back an object
50:15 - and you'll notice it has an ID so this
50:17 - thing was actually inserted into the
50:18 - database and then it responded with that
50:21 - object so that's great it's in the
50:24 - database now we actually want to show
50:26 - all of the Meuse that have been created
50:28 - on the on the page here so let's do that
50:31 - let's look back here cool so we've
50:36 - logged it out and now what we'll do is
50:38 - after the post request we want to show
50:40 - the form again and hide the loading
50:42 - spinner so on the client side and we're
50:44 - on the client
50:45 - we'll say
50:47 - let's hide be loading elements we'll say
50:49 - done here and then let's show the form
50:52 - so basically when you're done submitting
50:54 - our eerie display the form so now if I
50:57 - say CJ hello again
51:02 - or cats send you notice the page
51:07 - refreshes probably one more thing I want
51:09 - to do is like reset the form so I sent
51:11 - it off it got put in the database let's
51:12 - clear out the form here
51:14 - easy enough we can just say form dot
51:16 - reset one person released
51:21 - it's not familiar with the fetch
51:22 - function Oh what's the fetch function
51:24 - doing definitely so if I believe in p5
51:27 - is a called load Jason hello Jason is
51:29 - equivalent yeah yes so in if you've ever
51:31 - worked with p5.js it's a way of
51:33 - requesting data from a server so there
51:36 - is low JSON if you've ever worked with
51:37 - jQuery its dollar sign get or dollar
51:39 - sign dot post essentially fetch is now
51:42 - built into the browser and it's a little
51:44 - bit easier way of making requests to to
51:47 - a server so this is like synonymous with
51:50 - Ajax or requesting to a server cool just
51:54 - like there's a lot of coding garden fans
51:57 - in the chat appreciate that awesome
52:01 - okay so where we at where we showed the
52:04 - form we hide the loading spinner okay
52:05 - we're in the home stretch we're very
52:07 - close here so the last thing we want to
52:09 - be able to do is all of the created news
52:12 - we need to show them on the page here so
52:14 - for that we're gonna make a request
52:16 - we're running low on time so don't we go
52:18 - back to the diagram just yet but let's
52:20 - let's get it going so basically what
52:22 - should happen is the an incoming get
52:26 - request to slash muse should get all of
52:28 - the records from the database and just
52:29 - respond with them in an array so what
52:32 - we'll do here on the server is say when
52:34 - the server receives a request on slash
52:36 - muse
52:37 - we will then query the database so we'll
52:41 - just say so if you remember muse is our
52:44 - variable that represents the collection
52:47 - and we'll just say muse dot find and if
52:50 - you don't pass in anything that just
52:51 - means find all of the things in the
52:53 - database and then we'll get back some
52:55 - muse and with those muse will just
52:58 - respond so res DOJ's on
53:00 - Mews so now when my server receives a
53:03 - get request on slash muse go into the
53:05 - database grab all of them and then just
53:06 - respond with them as an array so before
53:08 - I even test this on the client-side I
53:10 - can actually try it in the in the
53:12 - browser because if you remember when you
53:13 - put in a URL that is a get request so if
53:17 - I do slash muse there we go oh wow I put
53:19 - a lot of stuff in there but am I
53:23 - forgetting the creative date maybe that
53:25 - was before I had it created but now all
53:27 - of the information in the database is
53:29 - being listed here so now I actually want
53:31 - to make this request with my client-side
53:33 - code so that I can show it on the page
53:35 - so let's do just that get respond all
53:40 - right so on the front-end
53:43 - when the page loads I want to request
53:46 - all of them use so I'm going to create a
53:47 - function let's call it lists all amuse
53:50 - and actually by default I want the the
53:54 - spinning bar to be showing when the page
53:56 - loads because I'm going to be grabbing
53:57 - all of the muse so show the loading
53:59 - element and then list all muse so I have
54:01 - a function list all muse and we'll use
54:04 - fetch for this so we need to make a
54:06 - fetch and the the URL is actually the
54:08 - same so you'll notice this was the URL I
54:10 - was putting in my browser to request all
54:12 - of the muse so but instead of a post
54:15 - request I want to make a get request to
54:17 - get all of that data so let's do that so
54:19 - I want to make the fetch against API URL
54:21 - and the way fetch works is if you're
54:23 - making a get request you don't have to
54:25 - specify any options you can just say hey
54:27 - give me that data then we get back the
54:30 - response will parse it as JSON because
54:33 - we know that's what it is and then we
54:36 - get to all of the Meuse and for now
54:39 - let's just log those out so when the
54:41 - page loads will log out all of them use
54:44 - and then they are so now on the client
54:47 - side we have an array of all of our data
54:48 - now we actually want to add it to the
54:51 - page so one thing I'll do is just
54:55 - iterate over them so I'm just going to
54:56 - do muse dot for each we'll get access to
55:00 - each mu and in order to add it to the
55:02 - page I need some reference on the page
55:04 - of where I'm going to add it so in my
55:07 - HTML I basically need like an x marks
55:09 - the spot and I'm going to put them right
55:12 - here let's give this a class
55:13 - of use and so in my JavaScript I'll
55:19 - select this element and keep a hold of
55:21 - it and then anytime I want to Adam you
55:22 - I'm gonna put it into this elements
55:24 - we're gonna pin to the child so in our
55:26 - client let's create a variable called
55:29 - muse element and we'll do again document
55:33 - query selector and because I gave it a
55:37 - class of muse we can select it like that
55:39 - and now that I have the muse element for
55:43 - every element in this array
55:45 - I want to append it to the page or put
55:47 - it on the page so first thing is I'll
55:49 - need to create some elements so I'm
55:51 - gonna say like a div will be document
55:53 - dot create element and I'll pass in div
55:56 - and then we want probably a header to
56:00 - show the person's name so let's create a
56:02 - header and this will be document dot
56:04 - create element we'll pass them like h3
56:09 - maybe and then we want to set the
56:11 - contents of that header so we do a
56:13 - header dot text content and this is
56:15 - going to be new name because every mu
56:18 - has a name and then we also want the
56:21 - actual contents to be in like a
56:22 - paragraph tag so let's just say contents
56:25 - that'll be document dot create element P
56:31 - tag and then I'll say contents dot text
56:35 - content will be mu dot contents is it
56:39 - contents content with a singular okay so
56:46 - we're setting the h3 we're setting the P
56:49 - tag now we have to actually put these
56:50 - somewhere so when used document create
56:52 - element it doesn't actually put them on
56:53 - the page it just creates them so what
56:57 - I'll do is take this h3 and append it to
57:00 - the do so I'll say div dot append child
57:01 - header and then I'll take this P tag and
57:05 - append it to the div as well so div dot
57:08 - append child the contents and now this
57:13 - div has the name in it it has the
57:16 - content in it now I want to take this
57:18 - div and put it on this museum basically
57:20 - right here I want to put that element so
57:22 - I created that Muse element variable and
57:25 - I'm going to a
57:25 - and the div to it and just like that
57:28 - there they are but I think I misspelled
57:31 - some you've got a typo okay and I got it
57:33 - so where vo I think you misspelled
57:38 - content cont e t--'s the chat funny I'm
57:42 - not I'm barely watching this tree we're
57:44 - just watching the chat okay yeah so and
57:47 - it's working so we see the name of the
57:50 - two of them you starting out the tweet
57:52 - the contents of the tweet and they're
57:53 - all listed on the page here so when the
57:55 - page loads it makes that request it adds
57:57 - all of them to the page so that was
57:59 - fixed awesome
57:59 - but one thing we want to do is also like
58:01 - hide this loading spinner after all of
58:03 - them use load so let's just say loading
58:06 - element dot hide so after the page loads
58:10 - we get it all there I think I want to
58:13 - add a little bit of styling let's say
58:14 - the muse here has a width so in our
58:19 - styles let's say muse let's say it has a
58:23 - width of like eighty percent so that
58:25 - should like shrink it in a little bit
58:27 - but we also want to give it automatic
58:28 - margin so it's centered there's a good
58:32 - question here what's the difference
58:34 - between text content and inner text
58:41 - seems like I was like I have no idea
58:43 - that must be a good question let's look
58:44 - at it's not is it inner HTML or actually
58:47 - a term it might be a inner inner HTML
58:49 - but I think inner text and text content
58:52 - are probably synonymous but the main
58:54 - difference is in the meant one thing
58:55 - that I'm not using is inner HTML god if
58:57 - the text content is something special
58:59 - you're specifically using it over inner
59:01 - HTML yes and specifically because this
59:04 - data right here is coming from users
59:06 - right so people are entering in their
59:07 - names they're entering in like their
59:09 - muse and when I add it to the page I
59:13 - don't want to potentially add like some
59:16 - script tag or something that they put
59:17 - and typed in so if you use inner HTML
59:20 - whatever you set is in our HTML will
59:23 - actually get rendered on the page by
59:25 - using text content even if they typed in
59:28 - like some valid HTML you'll just see the
59:30 - HTML text it won't actually render so
59:32 - this is a security precaution to prevent
59:34 - what's known as cross-site scripting but
59:37 - then there's a difference between
59:39 - text content inner HTML there's outer
59:41 - HTML inter HTML and outer HTML are the
59:44 - same whatever you set it to will get
59:45 - rendered text content and then inner
59:47 - text probably have the same relationship
59:50 - I haven't really used inner text before
59:52 - cool but yeah that was a big question
59:55 - oh wait last thing I'm not showing the
59:56 - date so let's all show show the date so
59:58 - let's create a date and we'll say
60:01 - document dot create element okay so the
60:18 - last thing is I'll create like a small
60:19 - tag and then we will append it here so
60:23 - div dot IO start we needed to set the
60:25 - text content so I'll say date dot text
60:28 - content is equal to MU dot created and
60:32 - actually I'll pass this into a new date
60:34 - so it should give it some decent
60:35 - formatting and then we'll append the
60:42 - alka rights by the way one difference is
60:45 - inner text returns the visible text
60:47 - contained in the node while text content
60:49 - returns to full text okay and now we're
60:54 - showing something so apparently when I
60:56 - first started inserting I wasn't
60:57 - actually adding the date but on these
60:59 - later ones I am but one thing I want to
61:03 - do is I want to show these in reverse
61:05 - order because the more recent ones will
61:07 - appear at the top so all we have to do
61:08 - for that is before we add them to the
61:10 - page I'm just going to say muse dot
61:12 - reverse and I guess the other thing is
61:18 - reverse reverse is not a function cool
61:21 - and so the latest Muse should show up up
61:25 - at the top named CJ hello but now one
61:32 - thing I want to do is after I submit the
61:35 - form just get all of them again so that
61:37 - after you've immediately submitted it is
61:39 - added to the top of the page so getting
61:43 - a little sidetracked here okay we got
61:45 - all the muse we iterate over there array
61:47 - we have
61:47 - to the page we reversed them now we we
61:51 - are showing the form we're hiding the
61:52 - loading spinner last thing is after you
61:54 - create mu I want to refresh that list so
61:57 - that it actually pops up in the page and
62:00 - that should be easy because we have this
62:01 - function list all Muse and so after
62:05 - submitting so this is the submitting to
62:07 - the server after submitting we'll reset
62:09 - the form we'll show the form and then
62:12 - will list all Muse like this okay
62:18 - so name is CJ hello again again again
62:24 - like a cat more cats actually let's do a
62:28 - tiger go and okay something weird is
62:34 - happening so whenever I am listing all
62:37 - the Mews I'm just appending more and
62:38 - more and more and more to the page so
62:40 - one thing I actually need to do is clear
62:42 - out the list so that way I can riad them
62:43 - so let's do that basically before
62:45 - listing all music TM oh I'll just say
62:49 - here muse element dot innerhtml is
62:53 - nothing so basically blank out
62:57 - everything that was there before and
62:58 - then adds something new so names
63:00 - that's the legitimate way of removing a
63:02 - whole set of Dom elements you don't have
63:04 - to individually like iterate through
63:05 - them and remove them from the page you
63:07 - could I'm not aware like I don't know of
63:08 - the performance implications yes but yes
63:11 - yes yes somehow that always felt like a
63:15 - I'm not supposed to do I do it all the
63:17 - time
63:18 - cool and so now well those I just typed
63:20 - name was name oh but the whatever you
63:24 - are now submitting is getting inserted
63:27 - in here hello world let's do below G go
63:32 - and it shows up at the top of the list
63:34 - awesome so this is our app I do have
63:37 - only on the list here that I was going
63:38 - to deploy but I don't know we have
63:39 - enough time for that one thing I'll talk
63:42 - about in terms of like security
63:43 - implications there like putting this out
63:45 - there in the world I would want to
63:47 - prevent people from inserting bad words
63:50 - or different things like that so there
63:52 - is this package on NPM called bad words
63:54 - where basically before I insert it into
63:57 - the data
63:57 - I could filter it and that way get rid
63:58 - of any nasty words or anything like that
64:01 - and the other thing is to prevent people
64:02 - from spamming my server with a bunch of
64:05 - different music they could like because
64:08 - I've built this API they technically
64:10 - don't have to use this form right they
64:11 - could write some JavaScript that just
64:13 - makes a post request on my server over
64:15 - and over again so to prevent that you
64:17 - might do something called rate limiting
64:18 - and so there's a package calls express
64:21 - the rate limiter that just limits the
64:22 - request to you can set it up to 1 every
64:25 - 15 seconds or something like that I
64:27 - guess the last thing is let's just look
64:29 - at the diagram let's review what we
64:30 - built today and then we can we can recap
64:33 - answer questions and stuff ok so the
64:38 - page loads it initially makes the
64:40 - request to the static file server which
64:42 - is hosting all of our HTML and it makes
64:47 - the request for index.html and that gets
64:49 - loaded into the browser and then that
64:51 - HTML says I have a CSS file I have the
64:54 - skeleton CSS file which is on some other
64:56 - server and so your browser will then
64:58 - make the request to those servers to
65:00 - then load that content and actually load
65:02 - it into the page now the other thing
65:04 - that happens is well and even think
65:06 - about scripts so the fact that I have
65:07 - script source equals client jeaious at
65:11 - the bottom when the browser sees that it
65:13 - has to actually request that file from
65:15 - the static file server it loads it in
65:17 - and then runs the code that's inside of
65:20 - it and so when it runs that code it
65:23 - actually sees this fetch that says get
65:26 - the request from you so get it say a get
65:29 - request to the URL muse and specifically
65:32 - it's going to the server on port 5,000
65:34 - the server receives that request and
65:36 - then it actually has to talk to the
65:37 - database it says hello database please
65:41 - find so fine find all the things in the
65:51 - database return them and then we take
65:54 - those and we do res dodged a song which
65:56 - actually sends them back to the client
65:58 - side then the client will iterate over
66:00 - the array it'll add them all to the page
66:01 - they're nice and great and then lastly
66:04 - you have that post request so a user
66:06 - will enter into the form here they click
66:08 - Submit that makes
66:10 - a request out to our server which is a
66:12 - post to slash muse and that will have a
66:17 - body it'll have like what is your name
66:19 - and it will have the contents the server
66:26 - will receive that body
66:28 - it'll parse it it'll understand it it
66:29 - will then insert it into the database
66:32 - and then it will respond with the thing
66:36 - that was inserted and then our pays the
66:38 - way we've written the code was that
66:39 - after that's done it makes another
66:41 - request here to get all the latest ones
66:43 - and list those out on the page cool I
66:46 - think we've done it I think yep people
66:50 - are very I don't know how I don't mind
66:51 - staying a little longer okay people are
66:53 - very interested at least in like some
66:55 - tips or like how you would deploy it or
66:57 - if you have if it's kind of a thing that
66:59 - we think we could do now we could do it
67:00 - okay I mean do I have ten that's the
67:04 - point cuz it's kind of that so give them
67:06 - big that that's like the flourish at the
67:08 - end okay awesome
67:09 - so yeah and so we have this app and now
67:11 - I can I will show how we put this out in
67:13 - the world and then all of the wonderful
67:15 - people that are watching can submit
67:17 - their muse and we will be able to see
67:18 - them so I guess before I do that I do
67:20 - want to add these like the bad words and
67:23 - filter and express rate limit so there
67:26 - is a package on NPM called
67:28 - bad word so I'm going to install that
67:30 - there's another one that I use that's
67:32 - called like word filter or something but
67:34 - this one did you just go ahead and this
67:35 - one but it's interesting to note there a
67:36 - bunch of these yeah and I just found
67:38 - this the other day just by searching
67:40 - like profanity and people have assembled
67:43 - a list of how to do this
67:44 - well not how they observe a list of
67:46 - words that you can just add into your
67:47 - app so we'll bring it in and then any
67:51 - time we insert something in we'll just
67:53 - clean it to get rid of any potential bad
67:55 - things so this is going to be on the
67:56 - server side let's bring in filter and
68:00 - then we will create a filter let's
68:05 - create a filter right here and then
68:08 - before we insert it into the database
68:10 - which is right here we're creating the
68:12 - object I'm just going to do filter clean
68:14 - and I want to do this on the name and
68:18 - then also on the content
68:22 - cool so in theory this should work I
68:26 - don't want to type bad words on screen
68:28 - but it actually will filter it out and
68:30 - put like stars in there so as long as
68:32 - the server still running yeah we're good
68:34 - the other thing is rate limiting so I
68:35 - want to make sure that people can't just
68:37 - submit thousands and thousands of
68:39 - requests over and over so I'm going to
68:41 - use Express rate limit so let's install
68:43 - this and now that we have it we'll use
68:54 - it I'll look at on NPM to see how to use
68:55 - it Express rate limit and basically this
68:59 - one is based on IP address there are
69:00 - other rate limiting packages that will
69:02 - actually use a database to keep track of
69:03 - users that have visited your website so
69:06 - this is how we do it we bring in rate
69:08 - limit and then we need to use it just
69:14 - like we did our other middleware so I'll
69:16 - say app dot use rate limit dot something
69:19 - so we actually invoke rate limit with
69:22 - how how often we want to rate limit so
69:25 - in this case they're limiting it to 100
69:28 - requests every 15 minutes I'm gonna let
69:30 - you do one request every 30 seconds I
69:35 - think this is in milliseconds yeah so
69:39 - every 30 seconds you can only submit one
69:41 - you should I go lower than that what do
69:44 - you think so every 30 seconds cool and
69:50 - that should do it as well so one thing
69:51 - that should happen is on the client side
69:53 - now if I try to submit something and
69:57 - then send it too many requests already
70:01 - maybe I didn't specify this right so if
70:04 - we look at window milliseconds so 30
70:07 - times a thousand is a thousand
70:09 - milliseconds seconds 30 thousand
70:12 - milliseconds okay okay
70:18 - I think math is hard okay
70:22 - oh you know what it is I think it was
70:24 - because okay so the page load loaded
70:26 - that was one request to get it get to
70:29 - get the list and actually so this is it
70:32 - I only want a rate limit
70:34 - adding to the server so you can request
70:36 - all day long you can you can make
70:38 - requests over and over and over again
70:39 - that's fine but actually submitting one
70:42 - is that that's what I want a rate limit
70:44 - so by simply moving that app dot use
70:46 - down this will now only rate limit
70:48 - creating news okay we wait I so somehow
70:51 - I missed that it was it was by default
70:53 - at rate limits everything everything and
70:56 - just or where you put it in the code and
70:58 - so this has to do with with middlewares
71:00 - so in express when you do like app dot
71:02 - use it's you can think of it it's just a
71:04 - waterfall it's top down god-like every
71:06 - request coming into our app hit scores
71:08 - and it hits the JSON parser then it hits
71:10 - the rate limit but if we move it now
71:13 - when a request for muse comes in it
71:15 - basically hits this before it ever hits
71:17 - the rate limiter got it yes that makes
71:20 - sense well I did not realize that
71:21 - because I think of everything as
71:23 - asynchronous or the order doesn't matter
71:24 - so it the order of basically only
71:27 - matters when the app spins up yeah and
71:28 - so like it creates this ordered ordered
71:30 - list of things drawn okay so that that
71:32 - should do it so now we can request the
71:33 - page all day long but if I say my name
71:35 - is CJ and I say hello world go
71:40 - so that submitted it but if I try again
71:42 - within 30 seconds I get an error too
71:44 - many requests so this is gonna prevent
71:46 - people from submitting too many things
71:48 - and one thing I'll do is instead of
71:50 - showing the form immediately on the
71:52 - client is just wait 30 seconds before I
71:53 - show it so after submitting is
71:57 - successful let's just do a set timeout
72:00 - and in 30 seconds will unhide the form
72:06 - okay so CJ hello world send and then now
72:12 - in 30 seconds that form will pop back up
72:14 - and you can submit another one if you
72:15 - want to okay so I think we've done what
72:18 - we needed to do to get this thing ready
72:19 - to deploy let's deploy it so first thing
72:27 - is setup environment variables so my
72:29 - server side right now it's only talking
72:31 - to localhost at the hour I want to tell
72:33 - it when you're deployed talk to the
72:35 - deployed database so I'm gonna do
72:36 - process and e dot URI and I can
72:42 - call this whatever I want
72:43 - I'll show I'm gonna be using a
72:44 - deployment tool called now you can
72:46 - specify what are the environment
72:48 - that you deploy with and in this case
72:50 - I'm gonna create one called Mungo URI so
72:52 - what this says is if this environment
72:54 - variable is defined connect to that
72:56 - database otherwise connected to the
72:58 - localhost 1 so that's our database
73:00 - connection and we should be able to
73:05 - deploy it so for the database I'm using
73:07 - something called M lab and they let you
73:10 - set up free 500 megabyte databases
73:13 - and you can sign up login I think to
73:17 - hide my screen I'll do this that when
73:34 - you deploy it just to make sure no trust
73:37 - our bad words filtering and autre it's a
73:39 - wonderful audience of well nice lovely
73:41 - people but cool and so I've actually
73:45 - already created into the base so this
73:46 - should be cool so I've already created a
73:51 - database but you can log in you can sign
73:53 - up they have a way of creating one for
73:55 - free if you want more than that you can
73:56 - also pay for it but I've created the
73:58 - database you will need to create a user
74:00 - and then once you have a user you create
74:02 - this connection string and they show you
74:04 - where your username and your password
74:05 - goes in and then you need to add that as
74:09 - a secret on now so the way it works is
74:12 - you say now secrets add and you can call
74:16 - it anything you want it's already have
74:19 - one set up just because I didn't want to
74:20 - risk doing it but I can give it any name
74:22 - you want and then you give it the value
74:24 - so typically the value would be
74:25 - something like this and you would fill
74:27 - in your username and password and now
74:29 - inside of now there is a secret you can
74:32 - use called now or DB and that's what
74:34 - we'll actually use to deploy so the
74:37 - site's super easy to use I think people
74:39 - have been asking about we do have a
74:40 - coding Garden has a discord server so if
74:42 - you if you're trying to do this stuff
74:43 - and you have questions feel free to join
74:45 - in there we have a help channel you can
74:47 - help people work things out so this
74:50 - specifically is how we're going to
74:51 - deploy our database and now we deploy
74:54 - our back-end and tell it to talk to that
74:56 - database so to deploy I'm using a tool
75:00 - called now
75:01 - you can get it from a website called
75:02 - Zico it's a really really easy thing to
75:05 - do you just type now and it will
75:06 - automatically deploy that either server
75:09 - or client but in this case I want to
75:12 - tell it that my URI process in
75:16 - environment variable which I defined
75:17 - right here should come from my secret
75:20 - called now our DB so that should now
75:21 - when it's deployed connect to the
75:23 - database let's go
75:25 - apparently I'm using an older version
75:27 - but this should deploy the backend and
75:35 - the interesting thing about now is it
75:37 - gives you a unique URL every time you
75:39 - deploy but we can do is aleus it so i'm
75:42 - going to show you how i'll alias this
75:43 - thing okay and if everything went okay i
75:53 - can actually throw this in and I should
75:55 - get back the hour and if I do a slash
75:57 - Muse I should get back an empty array
75:58 - because there's nothing in the database
76:00 - so cool so we're on the internet one
76:01 - thing I'll do is I'll set up an alias
76:03 - and I'll say me our - API so my my
76:08 - back-end will be at me our API
76:11 - Sh so this alias will just so I don't
76:14 - have to type in that big long fun thing
76:16 - so now when I go here it's the exact
76:18 - same server it just has like a nice name
76:20 - and I can do like slash Muse and that
76:22 - gives me back in a Dra cool
76:23 - and now we want to deploy our front-end
76:26 - so our our back-end is now at this URL
76:29 - so our front-end we need to update the
76:31 - code right now it's pointed at localhost
76:33 - so I need to say if we're on localhost
76:37 - send the recs requests to localhost
76:38 - otherwise send the request to the now
76:42 - server so I'll say if process a and V no
76:45 - no sorry we're on the front sorry if
76:47 - window.location that hostname is equal
76:52 - to localhost and I'm gonna use a ternary
76:54 - I'll say use that URL otherwise use this
77:00 - URL HTTP colon slash slash slash muse so
77:06 - now when we're deployed it'll detect
77:09 - that it's not running on localhost and
77:10 - it'll make the request against our
77:12 - back-end
77:12 - that of the front end and I should do it
77:14 - okay so I'm gonna CD into the client
77:16 - folder we'll deploy it that was way too
77:20 - easy for deployment no I feel like I
77:23 - can't deploy this because I'll be Philby
77:24 - three hours before I have it yeah cool
77:29 - and actually did deploy this earlier so
77:31 - nobody could take my alias because
77:32 - somebody might have tried but now okay
77:37 - so I'm ahead of everybody in real time
77:40 - so what you are L I'll put it it's a
77:42 - meow or so in yo w er dot now SH gotta
77:48 - be the first one people are gonna be
78:00 - faster than me Oh No 49 oh no something
78:04 - broke
78:05 - I got a debug this really quick okay so
78:11 - that's that's worthy not a proper coding
78:13 - train up so does it just works I guess
78:15 - you can you can have stuff work on your
78:17 - channel and me it's all about it well I
78:20 - guess I guess I I prepared a lot for
78:22 - today but on my channel I guess I
78:24 - haven't talked about it sometimes I just
78:25 - just make errors I read the docs we
78:28 - figured things out live so the way I'm
78:31 - gonna debug this is I have the element
78:33 - inspector open and I want to look at the
78:36 - network tab to see what I'm actually
78:38 - sending to the server so when I click
78:41 - send this makes a post request to slash
78:46 - muse and I can see that I am sending the
78:50 - data and if I look at the response to
78:52 - many requests please try again later
78:54 - did you already add something I did
78:58 - attempt to and then I just got I mean
79:01 - I'm just looking at the console I just
79:02 - got uncaught syntax unexpected token in
79:05 - JSON okay I think it's working I just we
79:07 - I think we've just rate limited
79:08 - ourselves so oh yeah
79:11 - so yeah so like people are submitting
79:13 - things you just have to make sure that
79:15 - you don't do it every 30 seconds look at
79:18 - the backend it is could something be
79:21 - caching
79:27 - is it rate limiting by IP address so we
79:30 - would probably be I mean we're getting a
79:32 - dynamic IP address from the Wi-Fi here
79:34 - but it's ultimately gonna end up being
79:35 - the same yeah the same idea so that
79:37 - could get I'll just keep refreshing this
79:39 - okay where's the people there so it's
79:41 - working yourself I just didn't want to
79:43 - totally open it to the world because
79:46 - this could wreak havoc cool cool
79:54 - yeah so if there's other questions I
79:55 - guess I can talk about my my setup what
79:58 - I do on my channel oh yeah before that
80:00 - like what's next so this is this is very
80:02 - very basic right this is we have a forum
80:04 - you click Submit it gets listed on the
80:06 - page but if you think about Twitter
80:10 - there's more those user profiles there's
80:12 - searching tweets there's tagging so we
80:14 - could take this code here we can add
80:16 - comments and replies so you could reply
80:18 - to mu we could create user accounts
80:20 - where you can have specific ones work
80:22 - cuz right now if somebody else types in
80:24 - the same name they appear like they're
80:25 - coming from the same person I'm sorry to
80:28 - interrupt I don't know if this is true
80:29 - but the chat is suggesting that the rate
80:31 - limit is actually a single rate limit
80:33 - for everybody
80:34 - so only anybody it's like once somebody
80:36 - posts nobody could post for 30 more
80:38 - seconds I don't know if that's true that
80:39 - was this is based on IP address okay
80:44 - please well we don't have any bug but
80:51 - again like all the features of Twitter
80:52 - we could we could start to write this
80:53 - and so probably on my channel pretty
80:55 - soon I'll start to add features to this
80:57 - and we can work on it as well that's it
81:00 - awesome so before I do want to say a
81:02 - couple things one is well what as I are
81:05 - so interested in your kind of like theme
81:07 - set up font stuff do you want to take a
81:09 - minute to just you know so mostly I
81:12 - would suggest subscribe to CJ's channel
81:15 - and then they can go over all the stuff
81:17 - in like a lot more detail but just for
81:19 - the people watching right now are there
81:20 - a quick few things about like that what
81:22 - like terminal application using what
81:24 - theme using a visual studio could
81:26 - actually did a video on this so there
81:28 - you go but I will like talk through it
81:31 - but if you search on my channel its
81:34 - coding garden
81:36 - at a Mac I think yeah so setting up a
81:39 - Mac for a web development I talked about
81:43 - I talked about the code editor I'm using
81:46 - I talked about how I set up my terminal
81:48 - I talked about how I all the extensions
81:50 - I'm using four vs code I talked about
81:53 - basically how I have all this set up
81:55 - were there specific questions about I
81:57 - think people were just like which font
81:59 - what color so yeah then that could be
82:01 - the answer maybe you have this document
82:03 - sit in a separate video definitely just
82:04 - go so check that it's a good way to plug
82:07 - the channel right now would you guys
82:08 - please actually let's see how many
82:09 - subscribers am i okay okay cool
82:14 - but but the font i'm using is anonymous
82:17 - Pro I really like this font there's a
82:22 - lot of other fonts out there but I have
82:23 - this as my terminal font and my editor
82:24 - font but yeah if you check out that
82:26 - video I have links to all of my
82:29 - extensions my Styles all that stuff that
82:32 - I have set up inside of you
82:33 - few people said they just subscribed
82:34 - thank you so yeah so I mean what's
82:37 - amazing about this first of all it's CJ
82:38 - and I were discussing what he was gonna
82:40 - do it he said I think I'll make a
82:41 - Twitter close it's like in an hour I
82:43 - think that's crazy well no like user
82:46 - accounts and stripped down but still
82:49 - this was pretty incredible to see the
82:51 - full the full stack really I was trying
82:54 - to think of a different word for it but
82:55 - that's the word the full stack you know
82:57 - I so much to the stuff that I do is
82:58 - mostly client-side write algorithms
83:00 - visualization stuff sometimes I'll pull
83:03 - up a node thing or use a database but to
83:05 - see that whole picture altogether and
83:06 - also just seeing your kind of work flow
83:08 - is super super illuminating I feel like
83:11 - I learned a ton of snow I was like made
83:13 - some notes of things that I'd never seen
83:14 - before which was building I guess that's
83:16 - one thing to note like so I'm showing
83:18 - like the client was the browser but the
83:20 - client could be a desktop right it could
83:21 - be like a mobile phone native app and
83:24 - they could all work in a similar way and
83:25 - this is actually why I like to build
83:27 - like architectures this way because a
83:29 - mobile app could talk to the exact same
83:31 - back-end the only thing that changes is
83:32 - the client and are there other so when
83:36 - is so I know you've been in New York for
83:38 - a while you're going about you're based
83:39 - in Denver yes and you're going back
83:40 - there when is your next livestream
83:43 - are there other things people should
83:45 - check out like I don't know Twitter or
83:47 - Instagram or stuff like that
83:48 - yes thanks for the fun so I'm on I'm on
83:51 - Twitter
83:52 - coding underscore garden you can follow
83:55 - me there every time I go live it tweets
83:56 - here right now I do plan to stream I
83:59 - think on set I have a pretty busy week
84:01 - because I'm moving from New York back to
84:03 - Denver I got a pack up and my students
84:05 - are presenting Capstone's tomorrow's
84:07 - we're getting all that ready but if you
84:10 - look on my channel I typically try to do
84:13 - upcoming live streams and any any stream
84:16 - that's upcoming I'll put it here so you
84:18 - can click on it to know before it
84:19 - happens the other thing is I do have a
84:21 - discord and there is a live channel on
84:24 - the discord so if you look in one of my
84:27 - more recent videos there's a link to
84:31 - fill out a survey to join this discord
84:33 - and we have help channels but typically
84:36 - I'll post in the live channel if
84:38 - whenever I'm going live
84:39 - and are there you were doing some
84:43 - teaching here in New York are there
84:44 - other things you've got on the horizon
84:46 - of teaching experiences that you're
84:47 - thinking about doing or yeah like I
84:51 - really am like just focusing on when I
84:54 - get back to Denver I will have so before
84:56 - I came to New York I was streaming five
84:57 - days a week and I think that's why you
84:59 - found me because I'm like just there
85:00 - live show but yeah when I get back I do
85:04 - plan to do it more often lately it's
85:05 - just been so I'll talk about some of the
85:07 - streams I do so every either Saturday or
85:10 - Sunday I've been streaming with a friend
85:12 - named Tony and we do what's called noob
85:15 - quest where Tony is totally brand new to
85:17 - coding and what kind of pair and like
85:19 - work through things and then I also do a
85:23 - every mostly every Wednesday a code kata
85:26 - stream so if you're familiar with code
85:28 - where's code Coty's
85:29 - I'll just sit down for a couple of hours
85:31 - and I'll pick some out and then just
85:34 - solve them live but also show like ten
85:36 - different ways to solve the same thing
85:38 - and like how do we do it with the for
85:39 - loop how do we do it with reduce how do
85:41 - we do it with map and filter and I also
85:45 - have if you check out the github tons
85:49 - like every video I've ever done the code
85:51 - for it is free and open source here and
85:53 - there's also one for code kata
85:55 - so if you have suggestions for that you
85:57 - can submit them here as an issue
86:00 - so nicely organized easily to aspire to
86:02 - me awesome cool so thank you so much for
86:08 - being here I'm so glad that this worked
86:09 - out because I know it's like you're
86:12 - leaving this week we go and so many
86:17 - wonderful nice comments and the chat
86:19 - hope people will subscribe to CJ's
86:21 - channel when I come to Denver hopefully
86:23 - I can appear on the Cobra garden I just
86:26 - want to thank you like this has been
86:27 - amazing like to see the space also to
86:29 - the coding training community like all
86:31 - the mods K week Mon and they answer me
86:34 - and Alka like they've been hanging out
86:35 - in my channel and like they're like all
86:37 - wonderful people it's awesome oh cool
86:39 - and so thanks for tuning in I will have
86:42 - this cold which you might detect but it
86:43 - in theory is something I get a little
86:45 - better I'll be back on Friday maybe I'll
86:48 - try a quick sort again but I have some
86:51 - other things that I'm definitely
86:52 - planning to do so stay tuned for all
86:54 - that stuff on this live stream as soon
86:57 - as I hit stop streaming will be
86:59 - available to watch I mean sometimes it
87:01 - takes like a 15 minutes for like YouTube
87:02 - to process it but then it'll be
87:03 - available to watch as an archive
87:05 - sometimes I do you know as you've
87:07 - watched up do you like edited versions
87:09 - of last year's I kind of don't think
87:10 - that this needs an edited version
87:11 - because when we added I viewed it was
87:14 - like the whole thing was the face so so
87:16 - awesome so thanks thanks so much CJ
87:19 - thanks for your watching
87:21 - and I'm looking at the chat I'm gonna do
87:23 - wave goodbye little train whistle for CJ
87:28 - and now I'm gonna hit that again someday
87:32 - I'm gonna do that CJ was teaching me
87:34 - some stuff about open broadcast studio
87:35 - so maybe I'll get better at it maybe
87:37 - I'll have an outro thing but right now
87:38 - I'm just gonna hit the stop streaming
87:39 - button cool there we go bye everybody