01:53 - [Music]
02:32 - okay you hear me also recording her like
02:39 - this this is working so many technical
02:42 - difficulties hello welcome to today's
02:44 - live stream the irony here is that I
02:47 - actually was starting the live stream
02:49 - five minutes early and it didn't work so
02:53 - I'm just waiting till people see me they
02:56 - can say they sue music is loud okay that
02:59 - I can that can be adjusted
03:01 - I see greetings from Denmark okay ooh
03:05 - here we are
03:07 - Oh also so hard well life is so hard
03:11 - sometimes technology I was so ready so
03:14 - much energy
03:15 - hey need a plan I was prepared and now I
03:20 - feel at a complete and total loss I
03:22 - could because mentally I sort of like
03:23 - checked out I was like ah it's not gonna
03:25 - work I'm gonna I'm gonna just like stop
03:28 - I was I was like 2 to 2 or you were
03:33 - minutes from giving up
03:35 - I also unfortunately I'm getting over a
03:37 - cold and but I felt the need to
03:41 - livestream today because oh oh I'm gonna
03:47 - discuss nature of code down the third
03:49 - stop I felt the need to livestream today
03:50 - because I am going to be mostly on
03:54 - hiatus for quite a bit of the summer
03:56 - hiatus
03:57 - not from producing content but from
04:01 - producing video content because I am
04:03 - hoping to focus my energy and efforts
04:06 - towards the second edition of the nature
04:09 - of code book which I hope to finish by
04:11 - the end of August and then be back full
04:14 - steam live-streaming in the fall and
04:17 - making videos that accompany in a second
04:19 - issue of the book that's kind of the
04:20 - point
04:21 - so let me just mute myself for a second
04:25 - here why I blew my nose what's happening
04:43 - I'm sure today's sponsor brilliant
04:46 - taught org is thrilled to be sponsoring
04:49 - a youtuber who is muting their
04:51 - microphone and blowing their nose but I
04:54 - do want to thank brilliant org I'm
04:56 - excited about looking at brilliant org a
04:58 - bit today because I want to talk to
05:00 - about the nature of code book and I
05:02 - looked this morning at Borges daily
05:04 - challenge take a look at it now sign up
05:07 - it for free at brilliant org slash
05:09 - coding trained the daily challenge from
05:11 - today relates to examples from Chapter
05:14 - two of the nature of code so I'm gonna
05:16 - look at that challenge and solve it with
05:18 - you at the third stop of today's train
05:24 - alright but let me go straight I have
05:27 - not moved to my new studio asks for a
05:29 - chain
05:30 - let me move first to the first stop so
05:33 - this is my this is my schedule for today
05:35 - I am now unfortunately behind by 30
05:38 - minutes I have two and a half hours I
05:40 - had two and a half hours not only have
05:42 - two hours I probably should skip this
05:44 - first one but I always I'm putting the
05:47 - things that I always skip first and
05:50 - putting the things that I don't usually
05:51 - skip last so we'll see how this goes so
05:55 - hopefully this is gonna be a quick one
05:57 - I'm going to just move full steam ahead
05:59 - because I lost all that time so I will
06:07 - skip the usual pleasantries and I'm
06:12 - gonna go to github.com slash coding
06:15 - train slash web sites and I'm gonna go
06:24 - here this is all I need alright okay and
06:35 - let me fix this
06:41 - okay alright alright so the first thing
06:45 - I want to do today is actually walk
06:47 - through the steps to make a community
06:49 - contribution to the coding training calm
06:51 - especially if I won't be live-streaming
06:53 - for a while we can interact with each
06:55 - other by sharing more projects based on
06:58 - the existing coding challenges so let me
07:00 - also move this down a tiny bit there's
07:04 - like some stuff going on here what's
07:05 - over here there's something like that I
07:12 - feel like is showing up oh it's this
07:21 - okay you know there we go
07:27 - okay all right so I'm just gonna get
07:30 - started here with this
07:39 - all right here we go just before I do
07:44 - this quick tutorial taser cake is asking
07:47 - what's today's schedule let me pull that
07:50 - back up this is my schedule for today I
07:54 - don't know that I'll get through all of
07:55 - it but this is my goal all right oh very
08:00 - loud
08:00 - oh and I do have a bit of a sore throat
08:02 - and still sniffly nose it's like
08:04 - terrible cold it's so much better today
08:06 - I think it's completely incapacitated on
08:08 - Tuesday in today's Thursday so yesterday
08:10 - was sort of mild and today I feel better
08:12 - but there's some residual symptoms you
08:14 - brought hear it in my gravelly voice
08:16 - yeah I should be singing the ukulele my
08:18 - that would probably sound excellent
08:20 - later hello and welcome to a quick
08:34 - tutorial on how to submit a community
08:37 - contribution something you made based on
08:39 - one of my coding challenges to the
08:41 - coding train comm website alright so
08:44 - this is the coding trait comm website
08:46 - you can see the most recent coding
08:48 - challenge as the time this recording is
08:49 - number 147 and it is the Google Chrome
08:54 - dinosaur game but it was my own version
08:56 - with unicorns and that sort of thing
08:58 - so if I click here to up here I'm going
09:01 - to just click - coding challenges and
09:03 - now I'm on the page with all of the
09:05 - coding challenges so maybe you happen to
09:08 - make a project based on one of these
09:09 - let's find ten print so I think this
09:12 - particular coding challenge has the most
09:14 - community contributions that broke the
09:17 - record which whatever the record is but
09:24 - you know what let's try a little
09:26 - experiment here this I shouldn't do this
09:30 - on my live streams but I'm going to
09:31 - anyway I'm going to record this
09:39 - with the green behind me and Matthew is
09:42 - it so in the new studio that I'm
09:44 - planning to set up I'm gonna be I my
09:46 - goal is to be able to record all the
09:48 - different views cameras and screen
09:52 - captures two separate files so they can
09:55 - do more post-production and editing
09:56 - after the fact of the live streams right
09:58 - now I can't do that let me do my
10:00 - description you know you the viewer of
10:02 - this live stream right now you know what
10:04 - the coding train comm website looks like
10:06 - or you could look at it yourself so I'm
10:08 - going to just describe it and then
10:11 - Matthew who does video editing for the
10:13 - coding train we'll add it in the
10:14 - background after then when I do the
10:16 - actual tutorial of showing you the steps
10:17 - I'll come back in okay this is of course
10:22 - the camera goes off yes and now you're
10:33 - all seeing my nice green covered laptop
10:36 - this was the problem it's this is the
10:38 - problem it's folded in a weird way
10:40 - high-tech solution here everybody hello
10:46 - and welcome to a this is a bad idea I
10:52 - could tell hello and welcome to a quick
10:55 - tutorial on how to submit your own
10:57 - community contribution something you
10:59 - made based on what my coding challenges
11:01 - to the coding train comm so at the
11:03 - coding train comms homepage you can find
11:05 - the latest coding challenge you'll find
11:07 - a page there for that challenge that has
11:09 - the video itself links to the source
11:12 - code in with p5.js with processing with
11:16 - people hi just web editor just the raw
11:17 - source code on github all those things
11:19 - as well as any links to other
11:20 - supplemental material I refer to in the
11:23 - video itself then you'll find this
11:25 - section my favorite section called
11:27 - community contributions and if you've
11:29 - made a project based on that coding
11:31 - challenge you can submit your project to
11:34 - this page and what I want to do is show
11:36 - you how to do that in the context of
11:37 - this tutorial so there's two
11:38 - possibilities one is that the page won't
11:40 - have any contributions on it so far
11:42 - that's pretty rare and you have to be
11:44 - the first one to add it or if one if
11:47 - many contributions already exist then
11:48 - you just have to add yours to the
11:50 - existing list so let's go to let's pick
11:52 - a challenge I'm gonna pick the ten print
11:54 - coding challenge because it happens to
11:56 - have the most community contributions
11:57 - and I'm going to show you how to add
11:59 - your own contribution to that page but
12:02 - the same the same technique should of
12:05 - course apply to any of the commits the
12:08 - same technique of course should apply to
12:10 - any of the code of challenge pages
12:12 - editing editing editing alright so how
12:15 - can we go back to here I don't know if
12:18 - that was worth it
12:19 - get a little extra work for a Matthew
12:20 - where am I here where's my mouse here it
12:22 - is so let's go to ten print okay alright
12:34 - okay
12:48 - all right oh no I froze it froze froze
12:55 - frozen I wasn't recording to disk
13:25 - am i back I believe I am back let me
13:37 - know when you see me back hi again okay
13:41 - so I don't have to chat up on the
13:44 - monitor that I look at over here that
13:45 - you can't see so I will get that in a
13:47 - second I'm just going to redo that
13:49 - explanation because it crashed in the
13:51 - middle of it and I don't think it was
13:52 - recording properly okay boy we're really
13:55 - not getting through anything today thank
14:00 - you everybody for your patience
14:01 - welcome to Daniel shiffman's no good
14:04 - very terrible horrible bad bad day I
14:07 - don't I get that right no good
14:12 - it's called terrible horrible no good
14:16 - very bad day yes I should get the chat
14:23 - back up but let me just do this again
14:24 - okay hello and welcome to a quick
14:31 - tutorial on how to submit your own
14:33 - project to the community contributions
14:35 - on the coding train com
14:37 - so after coding drank on the homepage
14:39 - you'll find the most recent coding
14:40 - challenge and then if you click on
14:41 - coding challenges you'll find all the
14:43 - coding challenges that I've done and
14:45 - each one of those has an individual page
14:47 - with a description the video list of
14:51 - links of things all the source code with
14:52 - p5 web editor or on github as well as
14:55 - here it is my favorite part the list of
14:58 - things that other people have made in
14:59 - responses creative versions or twists or
15:02 - improvements on the thing that I coded
15:05 - in the video itself so if you're
15:07 - wondering how you can submit yours I'm
15:08 - going to show you how to do that so
15:09 - let's pick arbitrarily not so
15:11 - arbitrarily the ten print coding
15:12 - challenge it's the one that happens to
15:14 - have the most community contributions
15:15 - let's see if we can get another one to
15:17 - beat that record maybe and I'm gonna
15:20 - walk you through the steps gonna make my
15:21 - own little twist on it change the code
15:23 - and then submit my own version to it
15:25 - okay so let me go back to here hopefully
15:31 - that explanation made sense or I don't
15:34 - think this the stream is really working
15:36 - but
15:41 - yet this is on youtubes end this is not
15:45 - my problem
16:53 - all right okay all right you know
16:56 - interestingly enough I was streaming
16:57 - because of all the problems earlier I
16:59 - was streaming to YouTube's backup ingest
17:01 - server and I just switched it back to
17:03 - the primary one
17:04 - so hopefully that this is gonna resolve
17:08 - that issue uh I really think I could be
17:11 - wrong but I've had issues like this
17:14 - before which were problems on my end in
17:17 - terms of a computer freezing or having a
17:19 - poor internet connection that is not
17:22 - what's happening right now all of the
17:24 - checks and tests that I've looked at my
17:26 - on my end the data is moving out very
17:29 - very fast
17:30 - there's no bottleneck nothing is
17:31 - crashing or freezing and I'm getting
17:33 - error messages from YouTube itself so I
17:36 - could be wrong about that I just really
17:38 - I really don't think this is on my end
17:40 - this time so and so let me get the chat
17:47 - back up so at least I can see it just
17:49 - bear with me for a second and I'm gonna
17:53 - move on this is let me get the chat back
18:02 - up
18:12 - but I'm hoping that I have now resolved
18:16 - all the issues by switching back to
18:18 - YouTube's primary server okay
18:31 - okay so moving along okay here we go
18:57 - all right here we go first plate this
19:01 - place to start is on the Cody challenge
19:03 - page for the coding challenge you want
19:05 - to submit - and here wait so here we are
19:10 - on the 10:00 print coding challenge page
19:11 - you can see these are all of the
19:13 - community contributions each one has a
19:15 - link to it with creator's name and the
19:17 - source code other links discussing the
19:19 - challenge the description of the
19:21 - challenge what I want to do first is go
19:22 - to view code and I'm going to click on
19:24 - web editor and I'm gonna open this in a
19:26 - new tab which it does automatically and
19:28 - then hold on a second
19:31 - hold on a second everybody
19:48 - there we go logged in via dashlane
19:52 - previously was a sponsor things you -
19:54 - like uh okay great so hold on
20:03 - close this
20:11 - energy people energy so here I am on the
20:21 - 10:00 print cutting challenge page I've
20:22 - got the description I've got links
20:24 - described in the videos and then here
20:26 - look at all these community
20:27 - contributions awesome so there's a link
20:30 - here to add your own version I'm gonna
20:31 - go to that with some instructions you
20:33 - could just look at that but I instead
20:35 - I'm gonna try to walk you through the
20:36 - process so the first thing I need to do
20:38 - is make my own version presumably you've
20:39 - already made yours but I'm gonna go to
20:41 - view code web editor click on that and
20:43 - now I'm here this is the 10 print coding
20:46 - challenge I will make my own version by
20:48 - changing these to ellipse and I'm gonna
20:54 - make this spacing I'm going to call this
20:59 - I spelled the lips wrong ellipse I'm
21:04 - gonna call this spacing come in XY all
21:13 - right then I'm gonna say fill it will
21:18 - cut this part out this is not important
21:25 - it's trust again I have to make my own
21:32 - version so I'm going to click here if
21:34 - you code i'm gonna click over the web
21:36 - editor and then now let me quickly make
21:38 - my own version wait Odin oh wait I got
21:40 - it now
21:41 - Matthieu you'll speed through this
21:49 - okay I'm just gonna start this over
21:57 - again so here I am on the ten print
22:04 - coding challenge page I've got the video
22:06 - itself by our said that I've said all
22:08 - this stuff so here I am in the ten print
22:13 - cook Here I am on the so here I am on
22:16 - the ten print coding challenge page and
22:18 - I want to add my own version should note
22:20 - that I can just click this link and
22:21 - follow these instructions but I'm gonna
22:23 - walk you through that right now so the
22:25 - first thing that I want to do is make my
22:26 - own version
22:27 - I'm gonna go review code and click web
22:29 - editor and I'm gonna play it and quickly
22:33 - just make some changes sickness is bad
22:38 - so match here this will get sped up
22:40 - let's make my own version of this
22:47 - bollocks load corner
23:00 - ellipse spacing spacing
23:13 - no no stroke wait wait
23:21 - yes Phil I'm just gonna make it black or
23:29 - [Music]
23:30 - white okay and why does it look so
23:36 - pixely and I don't really care about
23:38 - that I guess all right
23:43 - oh shoot I forgot that I'm logged in as
23:50 - the coding train and I totally just over
23:52 - wrote the challenge you hold on get it
23:55 - back okay
24:04 - file duplicate imprint variation okay I
24:19 - made my own beautiful variation of the
24:21 - ten print challenge where instead of
24:23 - drawing a line forward or backward I'm
24:25 - drawing a circle with a white fill or a
24:27 - black fill there go beautiful right so
24:31 - this is the link to my sketch I actually
24:34 - want to go here and do share I also want
24:37 - to get this so there you go this is my
24:50 - variation of the ten print coding
24:52 - challenge where instead of drawing a
24:53 - line forward or backward I've drawn a
24:55 - circle and I have filled with white or
24:57 - filled it black so now that I've made
24:59 - this project I'm gonna save it I've got
25:02 - the link to it I'm gonna go over here to
25:03 - the coding train and I'm gonna click on
25:05 - add your own version so I'm gonna click
25:08 - on that it's gonna take me to this
25:10 - strange page oh what's the deal with
25:13 - this page Oh new member
25:20 - hello Justin monk's interest welcome
25:25 - thank you
25:26 - yay
25:29 - I should not be live-streaming when I'm
25:31 - getting a vertical the format for this
25:39 - page is something called llamo which
25:42 - stands for yet another cup language
25:44 - seriously and you can see here this is
25:47 - the metadata associated with this coding
25:49 - challenge it has a title of the number
25:52 - of the challenge the date it was
25:53 - recorded the video ID which is its
25:55 - YouTube video ID that's where the source
25:57 - code is that's the p5 web editor these
25:59 - are various links and what's most
26:01 - important here is contributions so this
26:04 - is the part that you need to edit and I
26:07 - would suggest that you just put yours at
26:09 - the end you could slot it in wherever
26:11 - you want you put it first because
26:13 - there's no actual system for this but in
26:15 - terms of where I would ask you to put it
26:18 - I think it makes sense to have these
26:19 - somewhat in order of contribution so I'm
26:22 - gonna go all the way to the end and the
26:24 - easiest thing for me to do is to simply
26:26 - copy/paste one of these contributions
26:30 - which has four fields in it title author
26:34 - URL source so I'm gonna copy paste this
26:38 - and then I'm going to paste it below
26:48 - sorry everyone now I just realized you
26:56 - might be asking kind of an important
26:58 - question where am i where am i editing
27:00 - this what's going on so this is actually
27:03 - the github website you'll notice this is
27:06 - a URL on github.com github is a website
27:09 - for hosting git repositories a git
27:12 - repository is a collection of documents
27:14 - with a history of all the versions of
27:17 - those documents mostly used for tracking
27:19 - the history of a source code related
27:21 - project I would refer you to my videos
27:23 - on git and github I have a whole series
27:26 - of about 10 to 15 videos that kind of
27:28 - like talk more about the that that this
27:31 - get software and the github website
27:33 - itself so if that's unfamiliar to you
27:34 - you might go back and look at those but
27:36 - you don't actually need to know anything
27:38 - you don't need to know all of those
27:40 - details to submit your
27:42 - you just need to be able to follow these
27:43 - steps however these steps will only work
27:46 - if you have a github account so if you
27:48 - don't already have a github account you
27:50 - will need to sign up and be logged in
27:52 - for this to work so once you've done
27:55 - that I'm gonna go down here I'm going to
27:56 - add mine I'm gonna change the title to
28:01 - coding train demo contribution the
28:06 - author is me Daniel XI mom and then now
28:12 - it's time for the URLs so I'm going to
28:15 - consider I'm gonna go under share I'm
28:17 - gonna consider and again yours might not
28:20 - be a p5 web editor sketch might just be
28:23 - a website it might be a git repository
28:25 - it could be anything but you just need a
28:27 - link to your documentation of the
28:29 - project so I'm gonna pick this full
28:31 - screen one whoops which is this and I am
28:35 - going to where was I I'm going to paste
28:38 - that in here then I am going to go back
28:43 - here and I'm just gonna do the editor
28:45 - view which is that and I'm gonna paste
28:47 - that in here and then one thing I'm
28:51 - gonna do is I'm going to automatically
28:53 - make a mistake because it's very common
28:55 - that you'll mess something up so for
28:57 - example what if I forget the quotes here
28:59 - I'm gonna make another mistake I'm gonna
29:02 - add like a couple of extra spaces here
29:04 - and I'm gonna have this I have an extra
29:06 - space here so I'm gonna make those
29:07 - mistakes on purpose and then I'm going
29:10 - to say I'm gonna say here adding my own
29:13 - con my 10:00 print contribution circles
29:31 - instead of lines now here's the other
29:34 - important thing that it would really
29:36 - like you to do when reviewing these pull
29:39 - requests it's really nice that there's a
29:41 - link to the project in this optional
29:44 - extended description it makes it really
29:45 - easy to click and see what you made and
29:47 - I let's me see them much more easily to
29:49 - like know what to share and like just be
29:51 - able to react to it so I would ask that
29:53 - you
29:54 - add a link to you here link to demo here
29:57 - so I'm gonna go back to here I'm gonna
29:59 - go under share I'm gonna click this and
30:04 - I'm gonna click this now then this is
30:08 - the optional it will say you cannot
30:09 - commit to the master branch but I want
30:13 - to go to create a new branch for this
30:15 - commit and start a pull request a pull
30:18 - request is a is terminology for git and
30:21 - github where you're saying I'm sorry
30:25 - excuse me a pull request is a term that
30:33 - refers to asking me or not mean
30:36 - particularly but the coding train web
30:38 - site to pull your new changes in to pull
30:41 - your submission in so I'm gonna call
30:43 - this Schiffman 10 print contribute just
30:47 - Schiffman 10 print I'm gonna hit commit
30:48 - changes now you can see this is now then
30:54 - the last step here open a pull request
30:56 - and it's pretty much filled in for me
30:59 - now because it took the commit
31:00 - description in here so I'm just going to
31:03 - click create pull request and then here
31:09 - is the next really important thing and
31:12 - we're gonna wait for this to run
31:15 - [Music]
31:21 - I should say what's running here this is
31:35 - what's known as a unit test is running
31:38 - and it's running via continuous
31:41 - integration on a service called circle
31:43 - CI so I actually have a whole set of
31:45 - video tutorials also on unit testing and
31:48 - continuous integration that you can
31:49 - check out but what it's doing is it's
31:51 - checking the syntax of your contribution
31:54 - to make sure there are no formatting
31:55 - mistakes in or no missing required data
31:58 - pieces and well it came back now all
32:01 - checks have failed meaning there's an
32:03 - error so this is something that helps
32:05 - you when you make your submission know
32:07 - whether it was done correctly and this
32:08 - is so sort of off-putting to have this
32:10 - big red axe and you feel so terrible
32:12 - like my submission was wrong in the test
32:14 - in past no no feel excited and feel feel
32:21 - good about yourself did you stretched
32:23 - and made an attempt and try to submit a
32:25 - pull request bagel is your first pull
32:27 - request don't get up it doesn't matter
32:29 - the check failed it's just the computer
32:31 - checking it you could now make some
32:32 - edits or you can ask for help at the
32:35 - coding train community is here on github
32:37 - to help you fix it up and make sure your
32:39 - submission goes in correctly but knowing
32:41 - that the test failed is a bit of extra
32:42 - information for you so I could actually
32:44 - go click here on details and it's gonna
32:47 - take me over and it's it's gonna have
32:49 - all this information that I could scan
32:51 - through and trying to find what the
32:52 - particular error message is but usually
32:55 - it's a missing piece of data it's a
32:57 - white space extra spaces or extra
33:00 - indentation I'm gonna go and fix those
33:02 - errors now the way to fix those errors
33:04 - would be to go to files changed click on
33:16 - wait a second
33:20 - isn't that where I want to go files
33:22 - changed Oh edit file yeah I guess it's
33:26 - just because no if the go-to files
33:33 - change and click on maybe I should
33:37 - actually show those errors hold on I
33:42 - just don't know if I'm showing anything
33:44 - let's see will this work for other
33:46 - people who are looking at this who
33:48 - aren't members of the coding train
33:58 - scrolling all the way down through all
34:00 - the tests we can get to the end and I
34:03 - can zoom in it says extra space at the
34:08 - end of this line URL editor so you can
34:11 - see this is the error this is and this
34:14 - is the error I need to fix unfortunately
34:15 - it just finds the first air it hasn't as
34:17 - I found all the errors but I can go back
34:20 - now to my pull request I can click on
34:23 - files changed I can go here and click on
34:26 - edit file and I can go back and I'm
34:30 - gonna just fix all these things so I'm
34:32 - gonna get rid of where this I'm gonna
34:36 - put the quotes around here we're gonna
34:39 - have those Oh added extra spaces here
34:41 - I'm gonna click on those and I'm gonna
34:43 - say commit directly to the Schiffman 10
34:46 - print branch that's gonna add those
34:48 - changes to the pull request I'm gonna
34:51 - hit commit changes and now if I go back
34:55 - to conversation we can see the unit
34:59 - tests are running again and let's hope
35:01 - they work this time
35:02 - [Music]
36:24 - there we go all checks have passed this
36:28 - branch has no conflicts with the base
36:29 - branch merging can be performed
36:31 - automatically merging is the act of
36:34 - accepting that pull request and merging
36:36 - the changes with the current website
36:38 - source code so you won't actually see
36:41 - this button squash and merge by the way
36:43 - if you're wondering what squash means it
36:45 - means this pull request has two commits
36:48 - to separate straight changes and squash
36:51 - will squash both those into one so it
36:54 - just could've cleans up the history of
36:56 - the project because we don't actually
36:57 - need to separate these two things out in
36:59 - the grand history of things even though
37:01 - they are two separate changes for this
37:03 - request so um you won't see this because
37:05 - you most likely are not an administrator
37:07 - of the coding train website and you will
37:09 - wait for somebody here to to press that
37:13 - button and once it's done you will see
37:15 - and I'm gonna do that now I'm gonna do
37:18 - that now there we go
37:19 - once that's done all I do is go back to
37:23 - the coding train dot-com website and I
37:25 - hit refresh it's gonna take a while this
37:29 - part out it's gonna take a little while
37:31 - because that's to rebuild the whole
37:33 - website
37:40 - Oh David is saying some David in the
37:46 - chat says please mention how to do it
37:48 - with YouTube video IDs because if the
37:50 - contribution is a YouTube video the
37:51 - direct link won't work okay so that's
37:55 - something we should Claire so that's
37:57 - something I'll be really helpful David
37:58 - actually to make a pull request to the
38:00 - instructions to explain that but I will
38:03 - also mention it
38:23 - I'm just gonna check what I'm gonna do
38:25 - is I'm gonna check over here to the
38:33 - challenge wow it's still not there how
38:39 - long does it take to rebuild the site my
38:41 - goodness
38:44 - Cessna Ty's asking what if we want to
38:47 - upload code I don't know exactly what
38:51 - you mean by that
38:52 - but you you can include a link to your
38:55 - source code in your contribution this is
38:59 - not a general how to make changes to the
39:02 - coding train website tutorial that would
39:05 - be a completely different type of thing
39:07 - this is just about adding your
39:09 - contribution to the yamo markup there it
39:13 - is okay it's there okay and now we can
39:20 - be on this page I don't see my
39:23 - contribution there but I can hit refresh
39:26 - I'm gonna get refreshed
39:32 - [Music]
39:35 - Daniel sheath bond is there and if I
39:38 - click on this it'll take me over to
39:41 - there's my contribution if I click on
39:43 - source code it'll take me over to the
39:46 - source code page so I should point out
39:48 - I'm just showing you my my contribution
39:51 - happened to be a p5 web editor sketch
39:53 - but what you might want to link to could
39:55 - be a YouTube video it could be just a
39:58 - full website it could be a blog post it
40:01 - could be anything you want
40:02 - one quick gotcha is that for things that
40:05 - are YouTube videos don't put the full
40:08 - URL to your YouTube video in the
40:11 - contribution just put the video ID the
40:14 - system itself knows to make the YouTube
40:16 - video URL out of just the video ID
40:18 - there's probably some other small
40:20 - details in theory those things are
40:22 - covered here under see how if I click on
40:24 - see how this is a guide to everything
40:26 - that I just showed you and you can see
40:28 - the actual format of how to put in your
40:33 - contribution and how to create a pull
40:35 - request but this is also something you
40:38 - could edit and offer contributions to if
40:42 - there are things missing from this guide
40:43 - or leave them in the comments of this
40:45 - video itself
40:57 - so thank you very much for watching this
41:00 - quick tutorial about submitting your own
41:01 - community contribution to the coda trade
41:03 - comm website I hope this encourages you
41:06 - to submit yours don't be shy don't be
41:08 - afraid we're here to welcome you in with
41:10 - open arms and rainbows and unicorns to
41:13 - try if this is your first time using
41:15 - github this is a great way for you to
41:17 - give that a try and see how it goes
41:19 - so thanks so much and look forward to
41:21 - seeing you in a future coda challenge
41:23 - and having your contribution on the coda
41:25 - trade comm website bye bye okay there we
41:32 - go everyone
41:35 - so Archer is asking what if it's a
41:37 - malicious site so nothing we're gonna
41:39 - check we I say we there's essentially a
41:42 - group of volunteers and so the people
41:45 - who would be checking this army group of
41:47 - volunteers on a gruesel house has been
41:49 - on github has been mostly monitoring the
41:53 - community contributions and merging them
41:54 - me I am so me has done a lot of work on
41:57 - the website Austin I'm sure forgetting
41:58 - to name people there's lots of people
42:02 - have made community contributions so if
42:04 - you want to participate in the
42:05 - maintenance of the coding train github
42:08 - repositories reach out to me I'm open to
42:10 - having more people help with that and I
42:13 - should also mention SCI who is the new
42:15 - coding trained community management
42:16 - manager mostly their work is focusing on
42:19 - social media and patreon and YouTube
42:22 - memberships less the github stuff does
42:24 - there's too much to do but in terms of
42:27 - thinking about the code of conduct and
42:28 - how to manage the community that's
42:29 - something that psy is doing a lot of
42:31 - thinking of it you could always reach
42:32 - out and contact sy at sy that's CY at
42:35 - the coding train com
42:38 - okay yeah people are wondering why I put
42:42 - the green screen there sorry there's a
42:44 - little it's not really an experiment
42:45 - it's usually what I do when I record
42:47 - offline if I'm not live-streaming but
42:49 - just to allow it to have a little bit
42:52 - more graphics and stuff behind me that
42:53 - we can add later for the edited edit
42:55 - version of this okay it is 12:10
43:02 - oh no no no I have to 1/30 I was
43:09 - confused I thought I only had 20 minutes
43:12 - left I was like oh my god I'm not
43:15 - getting anything done okay let's do the
43:22 - processing library so give me a second
43:30 - here so this is done
43:35 - all aboard we are going to the second
43:38 - stop really need music and animations
43:42 - coming soon to to future coding train
43:49 - live streams if you are an animator who
43:55 - likes making stuff like this
43:57 - get in touch I'm looking to probably
44:00 - hire somebody to create a lot of animal
44:02 - animations for the live stream that I
44:04 - can play for different segments and also
44:06 - I'm taking a break and before it starts
44:08 - and I'm going to ends that kind of thing
44:14 - okay so we're gonna open up eclipse
44:22 - where's this
44:25 - [Music]
44:29 - well let me try to time that better I
44:32 - [Music]
44:37 - got a better idea
44:39 - we're gonna make this work it launched
44:50 - too quickly okay
44:52 - good enough was written with a newer
44:55 - version of the product can be
44:56 - incompatible dis version yeah
44:59 - wait why am i holding up am i opening an
45:02 - older version of a cups Paxson no wait
45:03 - why did it open up this old version of
45:05 - Eclipse that was weird
45:08 - no no no exit yeah this one is what I
45:15 - want okay hold on I get another chance
45:20 - [Music]
45:26 - hold erosion no I want this version okay
45:42 - did I ever figure out how to change the
45:46 - general view to make the fonts of all
45:48 - these things bigger oh boy
45:51 - editor preferences well I cannot I think
46:00 - I'm just have to zoom
46:16 - all right so where I last left off so
46:20 - unfortunately if you didn't tune in to
46:22 - the previous live stream you will most
46:24 - likely be quite lost because I'm doing a
46:27 - lot of sort of obscure medieval stuff
46:29 - with building a Java library but just to
46:34 - quickly recap which I'm is I it got the
46:36 - library to build but haven't actually
46:39 - implemented any of the source code yet
46:41 - so and so I'm gonna finish that off I'm
46:51 - trying to think of what is important for
46:54 - me to say and do here let me open up
46:57 - processing
47:07 - let me make sure this is the right
47:09 - processing yes it's there okay okay
47:32 - but don't fear what I did in the
47:36 - previous livestream is currently being
47:38 - edited and will be uploaded it probably
47:40 - took me over an hour but it's edited
47:42 - down to 20 minutes so there'll be a 20
47:45 - minute part 1 which will show you how to
47:47 - get your environment set up and then I'm
47:50 - hoping this will be in approximately 20
47:52 - minute part 2 coding the library itself
47:55 - and then maybe I need to make a part 3
47:57 - about publishing your library
47:58 - documenting it that kind of thing
48:01 - ok is it really just as simple as oh
48:08 - it's that simple whoa whoa
48:13 - now I split my pain oh ah there we go
48:22 - but can I be over here no I well so this
48:26 - I was able to increase I want to
48:28 - increase the size of what's over here
48:29 - but I guess I'm just going to zoom into
48:31 - it when I want to look so that's what
48:33 - I'll do okay and then this over here is
48:41 - show view ant okay so I'm going to close
48:44 - this right now all right
48:49 - will it work here I don't know we'll
48:53 - find out okay hello and welcome back to
49:05 - part two of building your own processing
49:08 - library in Java look I'm working with
49:11 - eclipse
49:11 - I love the clips all of you will
49:13 - complain that I'm using eclipse and who
49:15 - care I love Eclipse it's one of the
49:18 - first places I learned to program so it
49:20 - has a special place in my heart so what
49:22 - I did in the previous part you're
49:24 - probably gonna want to go back and watch
49:25 - it if you're here and you didn't was set
49:28 - up the development environment so
49:30 - install eclipse make sure I have
49:32 - processing installed set up all the
49:34 - paths the build paths the project the
49:36 - template the cloning all of that stuff
49:38 - so what I am here right now I
49:40 - successfully built the library so it
49:43 - shows up now in processing under import
49:46 - library and remember I'm choosing open
49:48 - simplex noise as the topic it's very
49:50 - arbitrary but I want to build something
49:52 - that's actually useful can be published
49:54 - as a real library but the library is
49:56 - here but if I click this it
49:58 - automatically adds the import statement
50:00 - which you can see is just template
50:02 - library dot star so in this video what I
50:06 - want to do is code the library itself
50:09 - and make one example that uses it
50:12 - probably the hardest part of making a
50:14 - library is being thoughtful about the
50:16 - design an ape of the library API itself
50:19 - how you make the examples and as well as
50:22 - documenting it so that's more of a sort
50:25 - of broader topic related to how to
50:27 - maintain and publish an open source
50:30 - library but I'm going to mostly focus on
50:33 - the technical details of building the
50:35 - thing and maybe towards the end I can
50:37 - circle back and talk more about so this
50:39 - looks like key important concepts and
50:42 - topics to having a kind of healthy open
50:44 - source project so first thing that I
50:47 - want to do if I want to customize this
50:49 - it should say something like import
50:50 - Schiffman dot open simplex noise or
50:53 - something like that I mean I don't think
50:54 - it's what I'm going to call it I'm gonna
50:55 - go back to eclipse I'm gonna go over
50:57 - here and I'm looking for under
50:59 - and so look this is what's known as a
51:01 - package template dot library and so
51:04 - because the package name in the template
51:08 - is just template library that's why the
51:09 - import was template library so I'm gonna
51:12 - right click on this I'm gonna go to
51:14 - refactor and click rename and then I'm
51:18 - gonna come here and I got to pick a name
51:20 - for it let's call it noise open simplex
51:37 - know
51:46 - let's call it algorithms dot noise
51:52 - ultimately I think what could be
51:54 - exciting about this library is to
51:55 - implement a bunch of different noise
51:57 - algorithms open simplex noise fractal
52:00 - noise gradient noise whirly noise so
52:03 - many different kinds of noise algorithms
52:04 - could be in here that would be additions
52:07 - and enhancements to the built-in kind of
52:10 - original Perlin noise algorithm that's
52:12 - in processing itself so that'll be my
52:13 - name I'm gonna click OK excellent now I
52:17 - want to go into the source code which is
52:20 - called hello library so I am going to
52:23 - rename this also by going to refactor
52:26 - rename and I'm gonna name that let's
52:29 - call this particular Java class open
52:32 - simplex noise and I'm gonna do finish ok
52:39 - great I'm gonna go over here and there
52:41 - we go so now I'm gonna hit sit list now
52:53 - now let's just try rebuilding it to see
52:56 - what happens so I'm gonna hit save I'm
52:58 - gonna go under window show view ant
53:02 - whoops let's try rebuilding the library
53:08 - I don't need to rebuild it at every
53:09 - single stage but let's just rebuild it
53:11 - to see if what I did at least could have
53:13 - shows up with the proper naming
53:14 - conventions so I know the window show
53:16 - view ant click here
53:26 - click here and do ant build build
53:35 - successful is what you're looking for go
53:39 - back to processing sketch import library
53:43 - open simplex noise there we go
53:46 - so now you can see I got algorithms
53:49 - noise star why do I have an error
53:51 - message I have a feeling hold on a sec
54:07 - interestingly it's giving me an error
54:09 - message
54:10 - let's try restarting processing and see
54:12 - what happens oh I should have saved it
54:17 - but that's fine
54:34 - all right I restarted processing and the
54:38 - error message went away so certain
54:40 - things that you change if you're
54:41 - changing the package name even though
54:43 - the new library files are being built
54:45 - and brought over into processing
54:47 - processing has sort of like loaded what
54:49 - it thought all the package names were
54:50 - when it started up so you have to
54:52 - restart so I don't think with every
54:53 - single change you make while you're
54:55 - building library gonna have to restart
54:56 - processing but that certainly is
54:58 - something not to do from time to time
55:16 - so let me do this we make this bigger
55:23 - okay how's that font size a little bit
55:27 - bigger
55:44 - one of the things I like to do when
55:47 - designing an open-source library is
55:48 - actually write the example first in the
55:51 - way that I imagined that it might be so
55:53 - even though I haven't built any of the
55:54 - functionality of the library itself what
55:57 - I want what I want to do is look I want
55:59 - to take like a simple processing Perlin
56:02 - noise example that uses just the built
56:05 - in original Perlin noise for the 1980s
56:07 - algorithm and then change that example
56:10 - to use an open simplex noise so if I go
56:13 - to examples math that's what I'm looking
56:21 - for on p6 under basics under math let's
56:25 - just take knows 1d and let's look at
56:29 - this example this is assigning the x
56:33 - value of this particular circle to the
56:36 - wif Perlin noise this is assigning the x
56:41 - value of this particular circle with
56:42 - noise the noise algorithm I am so I'm so
56:46 - sad to be like in my head the angst of
56:49 - all of the discussions of which version
56:52 - of Perl in noise is not really pearl
56:53 - noises it noise as the purlin noises
56:55 - proc noise is like going on and on and
56:56 - on so let me just take that again this
56:59 - noise this noise 1d example is mapping
57:03 - the X location of this circle it's
57:06 - drawing to the noise implementation in
57:08 - processing so I'm gonna grab all this
57:13 - code copy it close this out and paste it
57:18 - in here and I'm gonna imagine what I
57:21 - might do so I might do something like
57:23 - open simplex noise noise and then I'm
57:30 - gonna say noise is a new open simplex
57:33 - noise so presumably the idea is that
57:37 - open simplex noise would be an object in
57:40 - algorithms noise and so presumably the
57:45 - idea is that open simplex noise would be
57:47 - an object inside of the package
57:49 - algorithms not noise maybe I want to
57:51 - name that just open simplex because by
57:54 - definition who knows but I want to
57:56 - create a new instance of
57:58 - maybe optionally there could be like a
58:01 - seed that goes in here because I could
58:03 - be randomly seating the noise and then
58:06 - what I would do is say so let me call it
58:11 - something different for it to be less
58:13 - confusion let me call it OS noise for
58:15 - open simplex noise and then probably
58:19 - what I want to do is say OS noise dot
58:22 - maybe value pass it this X offset and
58:26 - actually that's it
58:28 - cuz really this is such a like even
58:30 - though the open open simplex noise
58:31 - algorithm there's quite complex I just
58:33 - want one function that gives me the
58:35 - noise value back and I'll call that
58:37 - value or I could have called it noise I
58:39 - don't know what to call it
58:44 - excuse me but again these types of
58:51 - naming and API design decisions while
58:54 - incredibly important I'm gonna make a
58:57 - tackle later and through user testing
58:59 - and discussion and are less crucial
59:01 - right now in terms of the nuts and bolts
59:03 - of how to build your library how dumb
59:05 - how to think about making a an
59:07 - open-source library it's so important
59:09 - but right now I can kind of just pick
59:10 - something let's pick value I'm gonna go
59:14 - back to the library I'm going to this is
59:19 - so oh boy
59:28 - so much boilerplate I don't like boiler
59:32 - plates my throat hurts I know it noses
59:35 - sniffling
59:56 - let me go back to the library code and
59:59 - I'm gonna add a function now I'm gonna
60:01 - add a function called public value and
60:05 - it's going to receive an argument like X
60:10 - offset X off and I'm gonna say return
60:15 - negative 5 so I just want to test out
60:18 - this idea I want to add a function
60:21 - called oh this should be public float
60:25 - value because it's a Java function that
60:30 - returns a float it receives a float so
60:33 - again this is not the open simplex noise
60:35 - algorithm but I am just going to have it
60:38 - return negative 5 to see if it works
60:40 - and let's actually just give it like the
60:44 - number 50 well actually noise should
60:47 - return a value between 0 and 1 or in
60:50 - this case maybe between negative 1 and 1
60:52 - so let's actually make it negative 0.5
60:55 - and in Java if I want it to be a float
60:58 - I've actually got to add that F to
61:01 - indicate float so once again I am going
61:12 - to build the library
61:32 - did I freeze no I thought it was frozen
61:35 - was just me standing still
61:49 - yeah I'll have to get Simon and David
61:51 - are both discussing that actually the
61:53 - open simplex no Lee's algorithm one
61:55 - dimension but we can just fix the second
61:58 - dimension so I will handle that later
62:06 - all right so where was I the library is
62:10 - rebuilt let's go back to the code B now
62:14 - it's still giving me this error message
62:16 - because I think I 5 to restart
62:18 - processing again but let's just see if
62:23 - it works
62:36 - oh oh okay I just had to run it actually
62:44 - and I did okay oh wait I'm getting an
62:49 - error the constructor opens simplex
62:52 - noise is undefined why am I getting that
62:55 - error because I have a constructor open
62:59 - simplex noise oh it needs this thing P
63:03 - applet the parent aha what this is and
63:17 - how this works P applet the parent is
63:20 - probably something I should tackle or
63:22 - address in maybe a third part or a
63:24 - fourth part to this series because I
63:26 - don't think that I need it for this
63:29 - particular open simplex noise library
63:31 - but what that is it's actually a
63:34 - reference to the sketch the user of the
63:37 - library is writing themselves because
63:40 - there are times where the library has to
63:42 - interact with the sketch maybe the
63:44 - library triggers a callback event the
63:47 - video library does that for example the
63:49 - sound library belief may do that as well
63:51 - maybe the library looks up a particular
63:54 - property that's been set by the sketch
63:57 - itself so this is a way of having I
64:00 - don't know that to make any sense cut
64:03 - that last sentence this is a way of
64:06 - having the library know something and
64:09 - communicate to or execute functions in
64:11 - the users sketch itself it's not
64:13 - something I necessarily need for open
64:14 - simplex noise but let me just keep it in
64:16 - here for right now decide later if I can
64:19 - remove it but there's it's this is not a
64:22 - flaw of the library design it's now a
64:24 - flaw of my code where I need to say this
64:28 - the key word this in Java refers to this
64:31 - class and you're processing sketch is
64:33 - actually a class that's just hidden from
64:35 - you when you're working and processing
64:37 - itself so now let me run this and we
64:41 - could see the negative 320 why is it
64:43 - negative 320 because I'm multiplying it
64:46 - by width so that's right we
64:49 - is 6:40 the value only noise value ever
64:52 - get back is negative 0.5 x with is 300
64:55 - right so now we're building the library
64:56 - and we added our own function to the to
64:59 - a particular class in the library itself
65:00 - the next step is let's actually put in
65:03 - the open simplex noise algorithm so let
65:10 - me find that where was that originally
65:21 - mmm okay so let me go back to open
65:25 - simplex any of these will work
65:57 - we had this interesting oh it's eval is
65:59 - the is the function used here
66:20 - I'm trying to decide what to do so let
66:24 - me ask your advice here particularly
66:26 - love to hear from anyone anyone so I
66:32 - have two choices right now I could what
66:35 - I really was thinking that I would do is
66:37 - I would have just the I problem I think
66:40 - I want this open simplex noise
66:43 - implementation to remain entirely intact
66:46 - as a separate class and then I want to
66:48 - wrap it in my own thing the sort of
66:51 - issue is it is called open simplex noise
66:55 - and that's what I called my class for
66:59 - the library so I think so I could just
67:05 - like add my processing library stuff to
67:07 - this I think I don't want to do that I
67:09 - think I've decided all right I think
67:18 - I've decided this oh it you stand it oh
67:24 - right of course I could extend it that
67:26 - makes a lot of sense why didn't I think
67:29 - of that but what should I call mine then
67:32 - you know what makes sense I could just
67:35 - call it open simplex what if I just
67:40 - called it simplex noise but that's
67:43 - different than open simplex noise that's
67:45 - the patented Ken Perlin noise
67:52 - OS noise I could do new noise generator
68:01 - a string open simplex so I I don't so
68:06 - Simon is suggesting P open simplex noise
68:09 - which would make a lot of sense but the
68:10 - key word the letter P is reserved for
68:13 - core libraries so third-party libraries
68:16 - shouldn't use that I don't like using
68:21 - short hands like OS n you know what
68:24 - though here's what I'm gonna do I got it
68:26 - I got it I'm gonna rename this class to
68:29 - like open simplex noise Spencer or
68:34 - something or KS for this implementation
68:36 - and then I'll extend it so we'll still
68:39 - be open simplex noise let's do that
68:41 - let's do that okay okay let's do that
68:56 - okay coding training office yeah okay
69:08 - here is the works raw source code for
69:11 - Kurt Spencer's 2014 implementation of
69:14 - open simplex noise and Java now there's
69:16 - a little bit of an unfortunate thing
69:17 - which this class is also named open
69:20 - simplex noise again Here I am back to
69:22 - this naming thing everything is quite
69:24 - difficult but let's let me first just
69:26 - bring this into eclipse
69:27 - so there's a variety of ways I could do
69:28 - that but I'm just gonna copy paste it so
69:31 - I'm gonna make here I'm gonna create a
69:33 - new class and I'm gonna call it open
69:40 - simplex noise KS the KS for Kurt's
69:44 - spinsters spencer's I want to keep that
69:46 - implementation entirely intact so I'm
69:50 - gonna hit finish I am going to paste it
69:55 - in and then I am going to hit save and
70:03 - then I need to change this to KS I need
70:07 - to add package declaration and then I
70:13 - need to find other things like this
70:15 - should be KS this should be KS whoops
70:20 - this should be KS this should be KS this
70:24 - should be KS there we go so now in my
70:32 - open simplex noise whoa what just
70:34 - happened oh yeah you have any errors
70:43 - Oh welcome new member Marko's Hindman
70:50 - Eze you will be the proud recipient of
70:53 - some coding train and processing and
70:56 - other stickers sometime in the next year
70:59 - hopefully very soon thank you two side
71:02 - the coding trade community manager is
71:03 - whipping me into shape and getting me
71:06 - together with sending out these rewards
71:08 - here okay now I'm gonna go back to my
71:22 - open simplex noise class and what I'm
71:25 - actually going to do is say extends open
71:31 - simplex noise KS so what I can do
71:37 - basically is keep the original
71:39 - implementation intact but have open
71:41 - simplex noise inherit everything from it
71:44 - and add whatever I need for this
71:47 - particular implementation so when I
71:50 - create it I'm going to give it a
71:53 - reference to the parent as well as
71:55 - optionally a seed so hold on what do I
72:05 - need
72:15 - so how do I call I say super right
72:28 - so I thought right so must be first
72:39 - now I can generate the open simplex
72:42 - noise through the parent constructor
72:44 - just by referencing super and let me let
72:47 - me also give it a seed so I can also say
72:51 - P applet parent long seed or actor let
72:54 - me just say int seed because that's what
72:56 - you'd be getting from processing more
72:58 - likely and then I can say super seed and
73:03 - then I can also say this parent or the
73:09 - parent so this is I believe know how do
73:18 - I call like can't I oh no because that
73:23 - is super init nari or whatever
73:32 - so this is a way of overloading the
73:35 - constructor in Java I have two ways of
73:38 - calling you in strokes I shouldn't have
73:41 - gotten rid of that
73:51 - if the original s was a member yeah I'm
73:54 - wondering about that too so that's how I
73:56 - would have normally done it
73:57 - just make a instance of open simplex
74:01 - noise would that be better than this
74:04 - extend that's what I might that's what I
74:09 - wanted to do but I thought that was like
74:11 - bad and so I was doing the extend thing
74:14 - should I actually make it an instance
74:18 - what do you think like the other option
74:24 - excuse me the other option would be I'm
74:33 - gonna call it like generator this is
74:37 - what I was more inclined to do can I do
74:40 - it this way who's a Java programmer out
74:44 - there this is the way I like doing it
74:46 - I'm really wrapping it not extending it
74:50 - nobody nobody has an opinion there is a
74:59 - constructor in the parent class with the
75:01 - seed composition is better than
75:07 - extension that's called composition I
75:09 - did not know that
75:12 - yes all right I'm going for it
75:21 - so I'm backing up I don't like this way
75:26 - let me just undo
75:39 - Oh Marvin likes extends Albert your
75:43 - likes extends Nikki likes wrapping you
75:48 - should use extend there's a lot more
75:49 - normal as a Java programmer I didn't
75:52 - know that what that's called composition
75:54 - I think it might be clearer though so
76:13 - hard now I've gone down a rabbit hole
76:14 - died didn't want to go down all right
76:24 - let's uh
76:32 - I'm just curious oh this is like
76:38 - whatever
76:56 - twice some site full of ads here should
76:59 - be able to go to this
77:07 - I'm gonna vote for composition well it's
77:11 - one composition one everybody yay bye
77:21 - ghostly coding thanks for tuning in
77:24 - okay while we're thinking about this I'm
77:26 - gonna take a short break
77:27 - whose 12:45 and I'm gonna come back to
77:32 - finish building this library because I
77:37 - want to talk to you about the nature of
77:38 - code book and today sponsor brilliant
77:46 - org so let's go to brilliant org first
77:52 - and I want to talk to you about what
77:54 - brilliant is look at this look at this
77:56 - live this is exciting
77:59 - oh no no no no come on composition look
78:04 - at this it's so even that that leads me
78:07 - to believe that I I could be my vote
78:09 - could count a little bit extra oh boy oh
78:11 - boy I already let that keep going how
78:13 - are there that many people voting 44
78:15 - that's pretty good okay oh look at this
78:21 - composition heritance is really winning
78:23 - out here that means I should definitely
78:25 - do composition cuz I like to do the less
78:28 - conventional solution okay but wait I'm
78:36 - talking to you about brilliant org so
78:40 - thank you so much to the coding trains
78:43 - livestream sponsor brilliant odd or
78:45 - guess I mentioned in last livestream the
78:47 - new thing that I love about brilliant is
78:48 - there's an app actually and I looked at
78:52 - today's daily challenge on the app on
78:55 - the subway on my way to work this
78:57 - morning and I was like oh this is an
79:01 - example that's perfect with my nature of
79:04 - code book which is exactly what I want
79:05 - to talk about in livestream so first of
79:07 - all brilliant is a website which has
79:08 - interactive puzzles and lessons in a lot
79:11 - of topics computer science physics math
79:14 - geometry all sorts of stuff related to a
79:20 - lot of the things that I
79:21 - try to code on this channel so I
79:24 - encourage you to check it out that you
79:26 - could sign up for free at brilliant org
79:28 - slash coding trained especially with all
79:29 - my technical difficulties today who
79:31 - knows how many people are watching this
79:32 - live stream if you haven't signed up for
79:34 - it before I would really do be like a
79:36 - favor to me if you just went and signed
79:38 - up but and then you want to consider and
79:41 - think about whether you want a premium
79:42 - subscription or not and if you do the
79:44 - first two hundred people who sign up
79:46 - through that link will get 20% off of
79:48 - the premium subscription which unlocks
79:49 - all of the courses and the archive of
79:52 - the daily challenges and that sort of
79:54 - thing so what I like to do as part of
79:56 - the sponsor segment is just pick the
79:58 - actual today's daily challenge I thought
80:00 - use the one from like the day before but
80:02 - this one is good for today and see if we
80:04 - can solve it together so let me click on
80:07 - it and let's let's take a look and I'm
80:10 - gonna do my dramatic reading a few
80:12 - brilliant org daily challenge shooting
80:16 - from the moon if you fire a bullet and
80:18 - let's maybe think about it that it's
80:19 - it's not a bullet it's like a water
80:23 - bubble
80:25 - whatever's into the air it isn't going
80:28 - to hit the moon so why if I throw this
80:31 - marker up in the air it's coming back
80:35 - down why is it coming back down the
80:36 - force of gravity is stronger than the
80:40 - you energy and velocity at which I've
80:42 - thrown this up because gravity's pulling
80:44 - it down there's also air resistance
80:45 - slowing it down so that air resistance
80:47 - is really the main issue it causes a
80:49 - what a substantial breaking effect so
80:52 - what if you stood on the moon and did
80:53 - this could it leave could I take a
80:57 - marker standing on the moon throw it up
80:59 - in the air and have it leave so there's
81:01 - this particular way you can calculate
81:03 - how fast it needs to be going what it's
81:06 - the magnitude of its velocity needs to
81:08 - be for it to escape so and what's
81:13 - interesting about the moon is there's no
81:14 - atmosphere so there's no air resistance
81:15 - which makes a big difference so the
81:17 - bullet will gradually lose speed as it
81:19 - travels upwards due to the downward
81:21 - force of gravity but there's no air
81:23 - resistance so as it gets further from
81:25 - the moon right gravity the force the
81:29 - strength of gravitational attraction
81:30 - inversely proportional to the distance
81:32 - that force gets weaker and weaker so if
81:35 - we could just get far enough that force
81:36 - is gonna get weak enough and it can
81:38 - escape the moon's strength of grab that
81:42 - both you can escape and eventually get
81:45 - to the earth so there's a way to
81:48 - calculate this related to the moon's
81:52 - gravitational field is equal to the
81:56 - universal gravitational constant times
81:57 - the mass of the moon times the mass of
81:59 - my marker divided by the distance so
82:02 - that we know but thick but something
82:04 - that I don't talk about too much in the
82:06 - nature of codebook is the kinetic energy
82:09 - the energy and this is a way to figure
82:14 - out escape velocity so the kinetic
82:16 - energy of this marker thrown up is equal
82:18 - to 1/2 the mass of the marker times
82:22 - velocity squared so let me use the
82:25 - whiteboard over here I'm going to show
82:30 - you how this relates to one of my nature
82:31 - of code examples in a second so 1/2 M V
82:37 - squared this is the kinetic energy okay
82:42 - coming back over here if the kinetic
82:48 - energy is greater than the energy so
82:51 - this energy the moon's gravitational
82:54 - field is equal to the universal
82:59 - gravitational constant times the mass of
83:02 - the moon I'll make that big n the mass
83:05 - of the marker I'm throwing up little n /
83:10 - R what did I miss there from the formula
83:14 - nothing okay great
83:17 - so the way that you determine if
83:21 - something will escape completely escape
83:25 - the moon's gravity is by knowing this is
83:27 - we're just going to call this e if the
83:30 - kinetic energy is greater than the
83:33 - energy kinetic energy so all of these
83:37 - things are constants it's well the thing
83:39 - we're trying to solve for is V so I
83:40 - could solve for that like well let's do
83:42 - that velocity square
83:44 - equals G times M divided at times the
83:49 - mass of the marker divided by R and then
83:53 - we're also going to divide by M divided
83:55 - by 1/2 which is multiplied by to look at
83:58 - this that mass cancels out so which
84:01 - equals 2 times the gravitational livros
84:04 - gravitational constant times the mass of
84:06 - the moon divided by r the square root of
84:10 - that would be the velocity sorry I know
84:14 - my notation here is very poor but this
84:17 - would be so this is the actual escape
84:19 - velocity for the moon so I kind of went
84:24 - through I think what's explained here
84:26 - hopefully I did it correctly so let's
84:28 - look at the question you have traveled
84:31 - to the moon and brought with you a high
84:32 - velocity marker launcher which can fire
84:37 - brightest 100 off it ok the for your
84:42 - launcher the mass of the object does not
84:44 - affect the initial speed so which object
84:47 - would you fire to have the best chance
84:49 - of escaping the moon's gravity and
84:52 - getting back to Earth a bowling ball or
84:55 - a ping-pong ball or it makes no
84:57 - difference all right let you think about
84:59 - this for a second is there a typo
85:05 - somewhere tazer cake is making the
85:10 - suggestion to put the train schedule in
85:11 - the description a hundred percent I need
85:13 - to do that totally agree I will really
85:16 - try to do that and I like that Clippy
85:18 - saying tic-tac-toe since I don't know
85:20 - how I'm ever going to get to that but
85:21 - we'll see ok have you thought about this
85:25 - it should be very clear to you it makes
85:29 - no difference right because the
85:32 - gravitational force is proportional to
85:34 - the mass of the object and the kinetic
85:38 - energy is also proportional to the mass
85:40 - of the object if we just need to get the
85:42 - kinetic energy greater than the
85:43 - gravitational force if the mass is
85:45 - bigger then the force is bigger than
85:47 - sorry then then the energy is bigger the
85:49 - force is bigger it cancels itself out
85:51 - that's why it's divided out when I'm
85:52 - calculating for that what that escape
85:54 - velocity needs to be this wouldn't
85:56 - true on the earth because air resistance
86:01 - is not proportional to the mass so
86:05 - there's going to be a greater the the
86:11 - the acceleration is going to affect
86:13 - something of less mass more greatly
86:16 - because acceleration is equal to force
86:20 - force equals mass times acceleration so
86:22 - acceleration force divided by mass so
86:24 - this is this is where I want to
86:25 - demonstrate this to you I actually have
86:26 - an example so it should be it makes no
86:27 - difference and hit submit and I got it
86:31 - correct but I'm gonna go I'm gonna leave
86:40 - a challenge for you here's my challenge
86:42 - for you let me go to nature where am I
86:47 - gonna find this spring nineteen
86:49 - github.com slash nature of code I'm
86:54 - gonna go to my syllabus from this
86:55 - semester go to the wiki and go to web
87:00 - editor example links and then I'm
87:02 - looking under forces I'm gonna go to
87:04 - this fluid resistance one which is fluid
87:06 - and air resistance is really the same
87:09 - thing shouldn't actually really should
87:10 - be called drag so fluid resistance is an
87:14 - example of a drag force which could be a
87:16 - gas or a fluid and if I run this example
87:19 - you're gonna see exactly a demonstration
87:22 - of this so this is falling instead of
87:26 - shooting upwards but at the top here all
87:30 - of those objects of varying mass are
87:33 - falling through no atmosphere then
87:36 - suddenly they reach an atmosphere so the
87:39 - acceleration is equal to with all of
87:41 - them unless they're in an atmosphere or
87:44 - a fluid so you could actually revise
87:46 - this example to make a demonstration of
87:49 - that escape velocity so what I would
87:53 - love for somebody to do is to if you
87:57 - sign up for brilliant org at brilliant
88:00 - org slash coding train go and make make
88:03 - a p5 sketch that demonstrates this with
88:06 - at with the errors with with drag force
88:09 - and without drag for
88:10 - maybe based on my nature of code example
88:12 - and posted here and I'm later this
88:15 - afternoon to check it out and see if
88:16 - anybody posted anything so I can look at
88:18 - it maybe share it in a future livestream
88:20 - so once again thank you so much to
88:22 - brilliant
88:23 - org for the sponsorship of the coding
88:25 - train live streams that's really helping
88:27 - me grow what I'm doing as a channel and
88:29 - the community and I hope you will
88:31 - consider signing up and being inspired
88:34 - to make some coding challenges from the
88:36 - brilliant toward materials as well okay
88:38 - now just to give you a little bit of
88:41 - extra time I'm gonna take a short break
88:43 - I'm gonna leave you if someone could
88:46 - post this particular sketch into oh you
88:50 - can't see that URL if someone could post
88:52 - this particular sketch into the chat if
88:58 - people have well I'm gonna take like a
88:59 - five-minute break I will bring this back
89:01 - up we've done our third stop I'm in this
89:08 - down fourth stop processing library
89:13 - continued fifth stop is tic tac toe I
89:16 - don't know if we're gonna make it to
89:17 - that stop and I'm gonna say back in five
89:24 - minutes okay so and I'm gonna disappear
89:33 - and I'm gonna mute myself and I haven't
89:40 - buted myself yet have I so please take a
89:42 - minute to sign up for brilliant org and
89:44 - work on that problem if you're
89:45 - interested and I will be back in about
89:47 - five minutes
89:53 - [Music]
89:56 - oh people are asking to see them polka
90:27 - member thank you you'll be receiving
90:32 - your coding train stickers sometime in
90:35 - the next year thank you
90:41 - [Music]
91:16 - [Applause]
91:17 - [Music]
92:00 - [Applause]
92:02 - [Music]
92:10 - [Applause]
92:14 - [Music]
94:23 - [Applause]
94:26 - [Music]
95:16 - as always I always forget this I'm gonna
96:18 - do this this dot this dot the star this
96:21 - star song never forget the Vista as
96:24 - always I always forget the dis stop this
96:26 - stop it stop just stop this stop this
96:30 - this stop this stop this stop this stop
96:36 - [Music]
96:45 - [Music]
96:53 - [Music]
97:05 - [Music]
97:15 - [Music]
97:26 - this star this star the star this star
97:28 - song never forget the Vista and was
97:30 - happy to compose that song for me thank
97:34 - you everyone for allowing me that little
97:37 - moment of pure unadulterated happiness
97:41 - oh it got hot in here
97:46 - what am i doing now oh oh yeah I've
97:48 - really thought about this and thank you
97:50 - to CJ shoutout to coding garden with CJ
97:53 - if you're looking for more alive
97:54 - streaming on YouTube with coding highly
97:56 - recommend you check out CJ's coding
97:59 - garden channel kind of breath but CJ
98:07 - made a really good point which is that
98:09 - actually there is a mech there is a
98:12 - thought process for why there is a
98:15 - reason that I could consider for why I
98:17 - might choose composition over
98:19 - inheritance or vice-versa
98:21 - and so let's take a look at the poll
98:23 - which cut
98:25 - it's interesting how composition has
98:27 - really outpaced here inheritance but I
98:29 - think there's actually a reason for one
98:32 - or the other and I have a specific
98:34 - reason why I actually in this case want
98:35 - to choose composition although I could
98:37 - imagine the library being done in
98:38 - another way and I will address that in
98:42 - the actual tutorial that I'm about to
98:43 - consider continue so mat-su good luck to
98:46 - your editing you are a true genius so I
98:49 - don't worry about you figuring this out
98:50 - but I am going to close out of these did
98:55 - any
98:56 - bunny by the way make a let me just
98:59 - check I did anybody post anything to
99:03 - this challenge if you did let me know in
99:06 - the chat somebody could pick up a link
99:07 - to it or something and I'm posted in the
99:11 - slack channel that would be great okay
99:14 - but I'm gonna close this out now close
99:16 - this leave this open this we don't need
99:19 - and I need to go back to here let me get
99:24 - the clips back up and processing back up
99:31 - okay
99:37 - all right hold on a sec
99:49 - okay talk about the my parent thing and
99:58 - that okay I think I know where I am okay
100:10 - all right not a lot of time left people
100:14 - a certain now eleven year old has to be
100:18 - picked up from Canada so that's the
100:20 - thing you know how I often am like in my
100:22 - live streams I have to leave at this
100:23 - time and then somehow it's two hours
100:25 - longer that won't be happening today but
100:27 - let me at least see if I can get through
100:29 - this I don't know about tic-tac-toe oh I
100:31 - would love to do tic-tac-toe we'll see
100:32 - we'll see all right here we go I'm gonna
100:45 - go from here now that I have the
100:49 - original open simplex noise algorithm
100:52 - implemented as a separate class in my
100:54 - library I have a decision to make so one
100:58 - thing that I could do with my open
100:59 - simplex noise class which is what I
101:01 - ultimately want the user to make use of
101:03 - is I could extend open simplex noise KS
101:08 - and in fact I could make this private oh
101:12 - I'm not gonna make it there's also the
101:14 - public versus private thing well just
101:15 - give me one more shot at this now that I
101:22 - have the open simplex noise original
101:24 - implementation from Kurt Spencer as a
101:27 - separate class here in my library I have
101:30 - a decision to make ultimately what I
101:31 - want is for that functionality to appear
101:33 - in my open simplex noise class and so I
101:36 - could extend the open simplex noise KS
101:39 - class that would be known as inheritance
101:41 - or it could really just wrap it by
101:43 - making an object in here like open
101:46 - simplex noise KS generator that is an
101:51 - instance of a of Kurt Spencers open
101:54 - selects toys implementation and this is
101:57 - a referred
101:59 - composition maybe serve like a rapping
102:00 - another class as an object and instance
102:03 - inside of a class so the reason why I
102:05 - want to do this is I'm trying to I'm not
102:08 - trying to expose the full implementation
102:10 - and just add a few like window dressing
102:13 - things to it although that would be a
102:15 - legitimate way of designing with library
102:17 - but I'm gonna do it this way just to
102:19 - kind of really hide that but have my own
102:21 - set of functions too that make use of
102:25 - the implementation there so I'm gonna do
102:28 - that here and then so in the constructor
102:31 - I need to create a generator equals new
102:36 - open simplex noise why do I get an error
102:42 - oh sorry
102:48 - to create a new open simplex noise KS
103:00 - sorry everyone who
103:07 - and then in this value function and I
103:11 - don't need this say hello function that
103:14 - the welcome function is maybe nice to
103:17 - have this set I'm gonna get rid of this
103:19 - set variable and get variables those are
103:22 - all just sort of like template functions
103:24 - but what I want to do now is instead of
103:27 - returning some arbitrary number I want
103:29 - to return the generator and the function
103:31 - inside of the open simplex noise
103:34 - implementation is called eval
103:36 - so maybe I'm actually gonna call this
103:37 - noise and the function is called eval so
103:42 - I'm going to pass X offset to eval the
103:46 - thing is the eval the noise open simplex
103:50 - noise annotation doesn't allow for one
103:52 - dimension but for me to get one
103:54 - dimension I could always just pass as
103:56 - the second argument as zero so and of
103:59 - course I could be more thoughtful about
104:00 - that and this needs to probably this
104:03 - needs to be a double so I can cast it as
104:10 - a double will that fix it all right hold
104:13 - on whoops
104:26 - hmm so why do I have an error here let's
104:32 - look at what this error might be cannot
104:34 - convert from double to float oh right
104:38 - because open simplex noise
104:41 - implementation is all done with doubles
104:43 - but processing and sort of like
104:45 - simplification only works with floats so
104:47 - here's where I can now change this to be
104:49 - a float and there we go so now I have
104:53 - essentially wrapped the generally the
104:56 - eval function which works in two
104:59 - dimensions to work in one dimension with
105:01 - floating-point numbers and now if I
105:05 - rebuild the library by the way do I
105:16 - isn't there a way to rebuild the library
105:18 - without always going to there there's
105:20 - some ant build thing here how come I
105:23 - don't have like can I get the ant thing
105:25 - up here whatever
105:34 - by rebuild the library oh there's a
105:38 - keyboard shortcut option command X Q no
105:49 - oh alright let's just build a library
105:56 - the regular way that I know how
106:05 - rebuilding the library go back to
106:10 - processing and I'm gonna run this oh and
106:15 - it's called noise now I renamed it from
106:17 - value to noise oh now why look at it
106:23 - there it is ah so there is a big
106:24 - difference
106:25 - the Perlin noise implementation in
106:28 - processing itself ah so there is a big
106:32 - difference
106:33 - the noise implementation in processing
106:35 - itself gives you a value between zero
106:38 - and one whereas that opened simplex
106:40 - noise imitation and I'm using gives you
106:42 - a value between negative 1 and 1 and
106:43 - while I could remap in my library I
106:47 - think maybe hmm
106:50 - I'm trying to decide I kind of want to
106:55 - do I want to I mean in a way I should
106:58 - remap it so that you could all of your
107:00 - code still works with it but having a
107:02 - range between negative 1 and 1 is also
107:04 - sometimes often convenient feels wrong
107:13 - not having a default constructor I don't
107:15 - know what that means right saumur
107:20 - alright I know what I'm going to say aha
107:27 - so something interesting here is that
107:29 - I'm getting negative and positive
107:31 - numbers this has big ups ok the current
107:34 - the noise implementation that's built
107:35 - into processing gives you a value
107:37 - between 0 and 1
107:38 - that opens simplex noise implementation
107:40 - ah
107:49 - okay here one more try ah so I am
107:55 - actually also getting negative numbers
107:57 - here and this is because the noise
108:00 - implementation in processing the
108:01 - built-in noise implementation returns a
108:03 - value between 0 & 1 my new open simplex
108:06 - noise implantation which is that mine
108:07 - I'm kicking it from I really shouldn't
108:15 - allow for editing
108:16 - I give up it's totally done all of my
108:19 - youtubing the wrong way but it's too
108:21 - late now
108:21 - I must plow forward so this circle is
108:26 - disappearing off the screen because I'm
108:27 - getting negative numbers the the
108:29 - built-in noise implementation in
108:31 - processing always gives you a value
108:32 - between 0 and 1 whereas this open
108:35 - simplex noise ability sure gives you a
108:36 - value between negative 1 and 1 so
108:38 - there's probably some advantages for me
108:39 - keeping that range between negative 1
108:41 - and 1
108:41 - but if I want to make the case that what
108:44 - I want people to be able to use this for
108:46 - is to have their current processing code
108:48 - just work out of the box by changing it
108:51 - to the open simplex noise function then
108:54 - maybe what I should do is here I should
108:58 - actually say I'm gonna say I'm gonna
109:02 - just call a remap I'm gonna make a
109:05 - function called remap and we'll make
109:10 - this can make this private yeah private
109:14 - float or double remap double Val and
109:21 - what I'm doing is I'm saying return Vow
109:27 - plus 1 times 0.5 right because a value
109:34 - between negative 1 and 1 would shift
109:36 - between 0 & 2
109:37 - / - its shift between 0 & 1 so I'm gonna
109:40 - do that
109:47 - remap so what's my error now
109:58 - why do I have an error here
110:06 - this is a double
110:21 - oh there's another error
110:26 - what do I have on here oh because I mean
110:31 - to private what No
111:06 - what went wrong
111:18 - ah
111:29 - No
111:42 - so weird what's going wrong
111:58 - whoa
112:08 - it was a nice cast Campea something else
112:12 - went wrong
112:15 - hold on I've seen this happen before
112:19 - rebuild isn't there like a refresh a
112:23 - refresh
112:43 - huh
112:45 - what's going on
113:12 - oh the problem went away I don't know
113:16 - what just happened and put this code
113:22 - back
113:48 - okay that was weird
113:52 - I don't know what just happened but it's
113:54 - fixed now you watch let me use the doc
114:00 - okay
114:15 - let's now add functions right so I could
114:20 - rebuild and test this but I'm pretty
114:21 - sure that correction will work let's now
114:23 - add functions for 2d 3d and 4d noise to
114:29 - make sure those work as well so I'm
114:30 - gonna do this I'm just gonna do this a
114:37 - few more times and I'm going to add a Y
114:42 - offset I'm gonna add a Y offset and a Z
114:47 - offset and then I'm gonna add a Y offset
114:50 - Z offset and a u offset and so this
114:56 - would be X off Y off and again I could
115:01 - refactor this to probably have them call
115:04 - each other but I think this will work
115:06 - fairly well for me and then here so now
115:11 - so now we have 1d 2d 3d and 4d noise and
115:19 - I also should add a constructor which
115:23 - allows me to pass in a seed so I'm gonna
115:28 - say int seed and I'm gonna pass that
115:31 - seed to open simplex noise and with no
115:34 - seed what I'll actually just do is say
115:43 - there's
115:48 - it could generate a random seed aisle
115:50 - seat with like the milliseconds and with
115:56 - no seed maybe I'll change it to just
115:57 - call the other constructor this with the
116:03 - parent and a system current time
116:08 - milliseconds so I'll use that as the
116:12 - seed
116:22 - oh and this should be long sorry
116:33 - so I have an error here whoops oh it's
116:37 - because current time milliseconds is a
116:40 - long data type so maybe I'll change this
116:43 - to long I think that's probably okay
116:44 - because you can always give it an
116:46 - integer and so there we go
116:49 - so now I have two constructors if I just
116:52 - say open simplex Noyes this it'll pick a
116:54 - random seed or I can give it a specific
116:56 - seed and it'll generate with that seed
116:58 - so now I'm kind of done with the basic
117:01 - functionality of this library that I
117:02 - want it to build so let's go back and
117:05 - build it again
117:37 - the way that I did this is bothering
117:40 - people who are watching the livestream
117:41 - right now in the chat so another way
117:43 - that of course I could write this would
117:45 - be return noise X offset 0 now that I
117:50 - have this here and this could be return
117:54 - noise X offset 0 X offset Y offset 0 0
118:03 - and this one I think this would all be
118:05 - the same right would it all be the same
118:08 - you know what though the 4 D calculation
118:10 - is much slower so I think the actual
118:12 - implementation is different all right
118:17 - let me address this
118:26 - uh-oh it lost it again why does it keep
118:29 - doing this the clips is so weird
118:40 - it's
118:47 - to make this a private class oh no not
118:51 - this one private
119:07 - what is going on
119:13 - we flesh not refresh there's a whole
119:18 - thing where you can like I've had this
119:21 - problem before where I can like just
119:22 - rebuild thought it was refresh
119:38 - it's back I don't know why it's getting
119:41 - like lost and confused should I make
119:44 - this private okay hold on don't resist
119:52 - it
120:05 - so people are watching this live right
120:07 - now in the chat or rightfully
120:09 - complaining about my redundant
120:11 - duplicated code here at a minimum let me
120:14 - refactor this to just have the first one
120:17 - D noise function just returned this
120:21 - noise this dot noise this dot noise X
120:24 - offset zero I do think that the the
120:31 - implementations as you get to higher
120:32 - dimensions run more slowly so I don't
120:36 - actually want to call those with fixed
120:38 - dimensions but I only want to do that
120:39 - for the first one so again I'm sure
120:41 - there's a way to optimize or refactor
120:43 - that will come later in the building
120:44 - this library but I just want to get it
120:46 - to work
120:46 - so the other thing I want to do just for
120:48 - right now is let me make this a private
120:49 - class so that the user doesn't by
120:52 - accident create and their own instance
120:54 - of open simplex noise and of course it
120:57 - just made an error for me because
121:06 - because it hates me Oh is private like
121:13 - does that actually break it protected No
121:24 - I guess it has to be public alright now
121:26 - i won't i won't address that I'll just
121:30 - stop here let me rebuild the library one
121:35 - more time you can't make it private okay
121:46 - why can't I make it private can't I use
121:49 - it in the inside that package but other
121:53 - people can't that we do that you have
122:00 - our arts yeah yeah private constructor
122:06 - that's what I need alright I'm not gonna
122:08 - worry about that right now
122:15 - alright let me rebuild the library one
122:18 - more time
122:26 - huh it's not ant
122:37 - area
122:39 - let me rebuild the library one more time
122:48 - go back to processing and run it there
122:55 - we go the same exact example but now
122:58 - with open simplex noise and I hit save
123:03 - and I'm actually going to now make this
123:07 - one of the examples whoops
123:10 - so I'm gonna call this open simply oh oh
123:13 - s noise one D and then I'm also gonna
123:18 - save this as OS noise to D let's also go
123:23 - and grab noise to D and we're going to
123:33 - sketch import library open simplex noise
123:37 - for processing I'm gonna make a open
123:43 - simplex noise noise instance I'm gonna
123:47 - say noise equals new open simplex noise
123:51 - this then here I'm gonna say noise dot
123:59 - oh let's call this OS noise and I'm
124:08 - gonna say OS noise noise and let's run
124:11 - this look the same exact example but
124:14 - with open simplex noise change this to
124:18 - regular noise and run it it looks like
124:21 - this change this to improved what I
124:24 - would say is improved open simplex noise
124:26 - and it looks like this so that's another
124:29 - example and so now you'll see by the way
124:32 - in Eclipse
124:33 - oh man Thor so you know refresh we hit
124:35 - refresh you can see that the examples
124:39 - are showing up here and I can get rid of
124:40 - this hello example cuz I don't need that
124:45 - and I now have a fully functioning
124:48 - version of the library so there's more
124:51 - that I need to do to document this lot
124:53 - very to put you know I need to fill out
124:56 - what's that called
124:58 - Oh noise one D Oh rename the [ __ ] no I
125:05 - don't I don't want to do that for inner
125:09 - classes okay
125:26 - okay
125:51 - can I do tic-tac-toe in like 20 minutes
125:53 - because I could leave it to and I'll be
125:55 - fine and I'm just about done with this
126:07 - all right I thought only cycle the
126:13 - camera just so I'm taking this moment I
126:20 - finally have a fully functioning working
126:24 - version of the library with two examples
126:26 - here's the thing there's a lot more work
126:29 - for me to do I haven't added anything in
126:31 - the code comments that will help
126:33 - generate documentation for the library
126:36 - I haven't published the library in a way
126:38 - that it would show up here under import
126:41 - library add library in this actual list
126:43 - here this is a way of publishing it to
126:46 - the processing list of libraries itself
126:48 - so but this is a good stopping point
126:51 - because now I'm at a point where you the
126:53 - viewer could actually use this library
126:55 - so what I will come back and do a third
126:58 - video about cleaning up and finalizing
127:01 - and publishing the library in a more
127:02 - public way but right now what I'm going
127:04 - to ask of you the viewer is two things
127:07 - number one go and download and try this
127:10 - library yourself so I'm gonna compress
127:14 - this folder and make a file called open
127:17 - simplex for noise processing dot zip and
127:19 - I will add a link to this on to the
127:23 - github repo so the github repo for this
127:25 - library is
127:40 - okay
127:44 - I'll go you keep giving me a dollar why
127:46 - are you missing something important
127:50 - are you just testing J s doc thank you
127:55 - oh you should you be a dollar so I
127:57 - notice your comment so by the time
128:07 - you're watching this this readme file
128:10 - will be replaced and I will link from
128:12 - here actually can I just put it in a
128:14 - release I think I can add it to her
128:17 - Elise whatever I'm not gonna worry about
128:19 - this now I will here's the github repo
128:26 - for the library if you go here the link
128:28 - to this is in the video's description by
128:30 - the time you're watching this there will
128:32 - be more information who has read me
128:33 - about how to get your hands on this zip
128:36 - file and manually install it to your
128:39 - processing download so you can test the
128:40 - library you can give me feedbacks you
128:44 - can give me feedback by filing an issue
128:48 - here on github no issues have been filed
128:50 - yet and you can also contribute to the
128:53 - functionality of this and documentation
128:55 - in this library so if you have some time
128:57 - and would like to work out filling out
128:59 - this je s doc 2 information inside the
129:03 - source code itself if you really don't
129:05 - like the way I've written these for
129:07 - annoys bumptious
129:08 - and want to refactor that we can think
129:11 - about and have a discussion about the
129:12 - API design decisions and after I let
129:15 - that sort of cook for a little while
129:17 - I'll come back and do a third video to
129:19 - show you these updates what kinds of
129:21 - changes I've made and how to take that
129:23 - final last step to creating a website
129:26 - and publishing your processing library
129:29 - to a website and having it appear in the
129:31 - processing contributions manager itself
129:33 - alright I hope this has been helpful to
129:35 - you I look forward to seeing this
129:36 - project grow we can add some other noise
129:38 - algorithms to it there's gonna be a lot
129:40 - of fun in creating this open-source
129:42 - project as a coded train community and
129:43 - adding it to processing itself thanks
129:45 - for watching and I'll see you sometime
129:48 - soon in the third part to this series
129:49 - goodbye okay alright everybody
129:56 - I'm I'm just gonna speed through this
130:00 - exit the Eclipse IDE yes let me at least
130:04 - commit all everything I've done we're
130:09 - gonna move fast here people
130:21 - okay no no why why do I not have
130:37 - permission this has never happened to me
130:48 - I'm gonna have to debug this later I
130:50 - want to push this the github but I'm
130:51 - gonna worry about this later yeah I have
130:54 - hmm I don't know all right I'm gonna
130:56 - deal with that later today this is gonna
130:59 - be tic-tac-toe speedrun by the way I
131:10 - thanks Pedro for your super chat
131:12 - appreciate it quick word so I won't be
131:19 - live-streaming very much in July's there
131:22 - it won't be a complete nothing vegan
131:26 - burger possible burger no I don't like
131:31 - the expression nothing burger there
131:32 - there will there will be content and
131:34 - there will be some stuff happening but
131:36 - if if you are let me just quickly say
131:38 - this if you are currently supporting me
131:41 - as a patron on patreon or as a member on
131:44 - YouTube
131:45 - the actual video content will be slim to
131:49 - none through July in August but I will
131:51 - be working intensively on a second
131:53 - edition of the nature of code book and
131:55 - so I will be through the those
131:58 - communities releasing preview drafts of
132:00 - that book eventually the whole thing
132:02 - will of course come out and be on the
132:03 - new website for free for the public so
132:06 - you have two choices if you are
132:08 - currently supporting me unsubscribe for
132:09 - the next couple months because you feel
132:10 - like I'm not producing enough content to
132:12 - merit your patronage or stay and realize
132:16 - that I'm sort of switching gears I'm
132:18 - just and I'll be back in full force with
132:20 - video stuff in September and if you're
132:23 - thinking of joining now maybe you want
132:24 - to hold off because you feel like you
132:25 - want to join for that sort of like video
132:27 - stuff but if you want to get clued into
132:30 - the sort of inside track of the progress
132:33 - on the nature of code book I will be
132:35 - hopefully doing some member-only streams
132:37 - during for my work sessions on the
132:39 - nature of code book as well as sharing
132:40 - draft PDFs and drafts of the website in
132:42 - our coding train a slack channel which
132:46 - you get an invitation for okay so yes so
132:49 - I'm just saying don't edit the timers
132:51 - we'll put a timer in post and I am going
132:54 - to give myself till 2:10
133:02 - to create tic-tac-toe
133:12 - I have not practiced this at all I have
133:17 - no plan I'm definitely in big trouble
133:22 - here this is gonna be a total and
133:24 - complete disaster but I'm gonna do my
133:29 - best okay let me blow my nose cycle the
133:38 - camera oh do I gonna probably want to
133:41 - use the whiteboard for this periodically
133:45 - this is such a bad idea
133:51 - welcome to the coding Train otherwise
133:56 - called this is a bad idea
133:59 - is this the marker I want no is this the
134:04 - marker I want yes all right here we go
134:08 - people
134:10 - make sure there's no like emergency
134:12 - message for me about anything okay oh
134:20 - here we go
134:21 - all right
134:37 - okay oh hello and welcome to a Cody
134:45 - challenge
134:46 - tic-tac-toe I'm gonna make tic-tac-toe
134:49 - I'm hoping when you look at how long
134:50 - this video is it's very short cuz I
134:52 - don't have a lot of time right now so
134:54 - I'm gonna try a trick and make a very
134:56 - beginner friendly example of the game
134:58 - tic-tac-toe without any bells and
135:00 - whistles without a lot of fancy code I'm
135:02 - not gonna over engineer it I will come
135:04 - back and the reason why I'm making this
135:13 - is I eventually want to show you some
135:15 - different algorithms for an AI or at
135:18 - least a bot to play the game tic-tac-toe
135:20 - but that's not happening in this video
135:21 - I'm gonna make the most basic simple
135:23 - fredley version of tic-tac-toe right
135:26 - here using javascript the p5.js library
135:29 - and the p5 web editor follow along if
135:32 - you wish and see what happens I have not
135:34 - practiced or plan for this at all can I
135:40 - do this in a short amount of time let's
135:42 - see alright alright I need a board so I
135:43 - definitely need a board I'm gonna say
135:46 - let board and I'm gonna just it's going
135:48 - to be an array and maybe it'll be an
135:51 - array of arrays and let's use strings
135:53 - it's probably terrible idea so this will
135:55 - be the top row this will be the middle
135:58 - row right tic-tac-toe is three by three
136:01 - by three and then I need two players so
136:04 - player one is an X and player two is an
136:10 - O
136:16 - this is working so well so now I need to
136:19 - render the board let's put some like
136:20 - stuff in it let's just pretend it has
136:22 - some stuff so I want to render the board
136:24 - I mean I could use this with Donna
136:25 - there's so many ways I could do this I'm
136:26 - just gonna do this with canvas and in
136:29 - the draw loop so I'm gonna say for let I
136:32 - equals 0 is less than 3 I plus plus 4
136:36 - let's let J equals 0 J is less than 3 J
136:41 - plus plus so this is pretty tricky if
136:43 - you're a beginner programmer this is a
136:46 - nested loop and I've actually made this
136:48 - a grid so every spot in this grid
136:50 - let me actually fill it out just so we
136:55 - see something here I'm gonna pretend
136:59 - this has just been played right so the
137:02 - idea is that this two-dimensional array
137:04 - structure this list of lists is storing
137:08 - all the information for what the current
137:10 - state of each cell in the tic-tac-toe
137:13 - grid is at the beginning they're all
137:15 - blank and then as the players play X's
137:17 - and O's get filled in so now I go to
137:19 - nested loop through check every column
137:22 - check every row and render something so
137:26 - I could just use the text function right
137:29 - I could say let's spot equal the board
137:32 - index I index J and then I could say
137:36 - text that spot
137:39 - at X comma Y so where is x and y so I
137:44 - need a width like I need oh I'm gonna
137:47 - fill the whole canvas so with equals the
137:51 - width of the canvas divided by 3 and
137:54 - height equals the height of the canvas
137:56 - divided by 3 it would make sense for me
137:59 - to like have players in an array and
138:01 - maybe I could I don't I could have 3
138:04 - doesn't have to be a hard-coded number
138:05 - because I could make like a 5x5
138:06 - tic-tac-toe board but I mean I'm doing
138:08 - this in the simplest way possible so x
138:10 - equals width times I and and y equals
138:16 - height times I and then and let's let's
138:20 - run this what's gonna happen do you see
138:22 - anything some X's and O's they're sort
138:24 - of in there and then I'm going to say
138:31 - that's weird text size 32 to make it
138:38 - bigger
138:38 - why they all atop of each other like
138:40 - that
138:56 - Oh looking at the check can you guys
138:59 - discuss the thing about the community
139:01 - contribution thing later that's
139:03 - distracting me
139:04 - Oh oh I forgot Jay here there we go look
139:11 - there's Mike tic-tac-toe board but
139:14 - things are kind of like off o because of
139:16 - the way you know what I should just draw
139:18 - it as a circle let's just say if spot
139:21 - let's do this
139:22 - if spot equals equals player one right
139:29 - then draw an ellipse at X comma Y with
139:34 - with right and then otherwise if spot
139:40 - equals player two then draw a line from
139:47 - X Y to X plus W X plus h and another
139:51 - line from X plus W Z Y to X y plus h so
139:59 - that's me drawing a an X whoa that looks
140:04 - totally wrong so first of all we say no
140:06 - fill and the offset should be plus W
140:12 - divided by two so I need to offset all
140:15 - those spots whoa oh and then this would
140:19 - be oh no no no no oh my god oh let's
140:29 - diagram this I have a three by three
140:34 - board right
140:38 - this is kind of x equals zero this is x
140:41 - equals 1 this is x equals 2 this is y
140:44 - equals 0 this is y equals 1 this is y
140:46 - equals 2 so an X should be drawn from
140:51 - here from XY XY 2 X plus 8y plus h so
140:55 - the X I did correctly let's go back to
141:00 - here and comment out the ellipse and
141:03 - let's make the board all full of X's
141:08 - let's just make the top rail full of
141:10 - exes
141:20 - player 1 is an ex by the way no wonder
141:42 - Oh No 8/3
141:54 - what did I do wrong X Y X plus W X plus
141:58 - h x plus w y x y plus h they're all
142:08 - going to the bottom
142:20 - is there time somewhere let X equal W
142:25 - times J
142:33 - line 29
142:48 - XY oh this needs to be why everybody I
142:59 - just lost like towards like 45 minutes
143:02 - not really that long by accident because
143:04 - I had it X here this needs to be Y okay
143:07 - so now we can see the X's I could see
143:10 - X's let's draw the grid we could see the
143:13 - X's well those are really giant X's now
143:15 - let's put the circles back in ah the
143:19 - circles need to be I need to say ellipse
143:22 - mode corner there we go oh boy boy those
143:28 - X's are connecting in ways that look
143:30 - really awkward so the x's should
143:32 - actually also like have like an offset
143:35 - so let's make like a little buffer
143:36 - variable like 10 pixels and say x+
143:41 - buffer x+ buffer y minus buffer why - oh
143:52 - no wait hold on let's not do that should
143:59 - draw everything relative to the center
144:09 - so act so the x's are all kind of
144:12 - connected in a way that looks weird
144:13 - so actually would make sense to not draw
144:16 - everything relative to the corners but
144:19 - to draw everything relatives of the
144:20 - Centers and I could just use text-align
144:23 - and going back with the letters but I
144:26 - want to draw it I would have drawn so
144:27 - I'm gonna I'm gonna draw everything
144:29 - relative the center you'll see this is
144:30 - gonna improve it why this is a great
144:32 - this is really going super well so far
144:34 - so what I'm going to do is say each X is
144:38 - the its index into its column in row
144:41 - times the width plus plus width divided
144:45 - by 2 plus height divided by 2 that
144:48 - offsets everything by 1/2 and then I'm
144:51 - actually going to say the size I'm gonna
144:54 - have something called like the SOT like
144:56 - the call this the X size I'm going to
145:00 - have this equal to
145:02 - w / - half of that and then I'm going to
145:05 - say X - x size y - x size - x + X size ,
145:19 - let's just call this XR like kind of
145:23 - like the X is radius and then this one
145:30 - will be + XR 2y minus XR and then 2x
145:37 - minus XR 2y plus XR and then with / 4
145:45 - there we go there's my X's and let's
145:48 - make the stroke weight for there's my
145:54 - X's and now the O's no more ellipse mode
145:56 - and let's make this W divided by 4 or /
146:01 - - there we go look this is what the
146:04 - tic-tac-toe board looks like
146:05 - yeah like the way it looks better now
146:06 - that was painful
146:08 - so now let's set it up as blank oh and
146:15 - by the way I've reversed my X's and Y's
146:18 - so I should actually be the X's should
146:21 - be J and the Y's should be I or if I
146:23 - actually let's just do it the other way
146:24 - around
146:25 - let's keep X's I and Y's J but do the J
146:29 - loop as the outer loop and the I loop as
146:34 - the inner loop there we go okay
146:37 - whoo so now what I want to do next is
146:45 - play the game so let's say let's have a
146:50 - variable called current player and
146:52 - current player is equal to player 1
146:57 - let's have a let's randomly pick between
147:01 - player 1 and player 2 so every time we
147:03 - start the game the current player let's
147:08 - actually make these players equal let's
147:13 - make this an array I like the idea of
147:14 - making this an array
147:15 - for some reason and let's have the
147:18 - current player B players index 0 or the
147:21 - current players players index 1 and then
147:24 - this we can make one is a circle and
147:36 - sorry 0 is a circle 0 is the X I did it
147:42 - right 0 is the X and that's what is the
147:45 - circle what's going on here where's my
147:48 - error line 44 too many too many brackets
147:52 - huh oh I need a closing bracket for
147:56 - setup okay come back board and let's
148:00 - make the background as 255 okay ooh
148:08 - all right so every time we don't know
148:10 - who the player is now oh wait what no
148:14 - everything's fine everything's fine am I
148:22 - gonna do clicking should I have the user
148:25 - play in which case I need to draw the
148:27 - lines oh yeah yeah yeah oh this is very
148:35 - silly because I can say the whole reason
148:37 - for me doing is I can even p5 I can say
148:39 - current player equals random players so
148:43 - this will pick a random player I really
148:45 - need to see those lines so let's draw
148:48 - the lines let's draw a line from W 0 to
148:53 - W height oh no no no so to W the whole
148:58 - height then we'll draw a line from W
149:01 - times 2 so I just want to draw that
149:06 - crisscross and we'll do the same thing
149:09 - for 0 2 width and this will be H 2h and
149:19 - then H times 2 to H times 2 now really
149:26 - what I should do is make this now
149:28 - interactive so that you could click and
149:31 - add the X or the Y I think I might leave
149:33 - that as a little challenge to you I'm
149:36 - just gonna have the computer play the
149:38 - game tic-tac-toe and see if somebody
149:40 - wins
149:40 - so either the board will be full and
149:43 - it's a tie or somebody win and I won't
149:45 - use any intelligent algorithm I'm just
149:47 - gonna have each player place a random
149:50 - pick a random spot so what I'm gonna do
149:55 - is I'm also going to make an array
149:57 - called available and so each available
150:06 - spot in the beginning I'll just say
150:09 - enesta I'm gonna make a nested loop so
150:14 - much for making me be a super beginner
150:16 - friendly tic-tac-toe it's all these
150:19 - things are so much harder so what I want
150:21 - to do forget about this big super
150:27 - beginners could do it the way that I'm
150:29 - doing I think I kind of want to make
150:31 - this a 1 dimensional array
150:36 - I'll leave it as a two-dimensional array
150:37 - so I'm gonna say available dot push an
150:42 - eye in a J so this is right now every
150:47 - little pair of of index values for that
150:50 - grid is available so each time through
150:53 - draw let's make a function that's called
150:55 - like next turn and we'll say a spot that
151:02 - I'm picking is a random I'm gonna have
151:05 - to get an index index because I want to
151:10 - remove it is a index is a random number
151:15 - that's between 0 and the length of how
151:18 - many things are available and then the
151:21 - spot is I'm gonna take that array
151:24 - available and remove that index value
151:29 - the splice function will remove it and
151:31 - put it in spot and then I'm going to say
151:34 - board spot 0 spot 1 oh that's so awkward
151:41 - but spot is a little array with two
151:43 - values in it 0 and 1 and so this is not
151:46 - a comma it's another little bracket look
151:49 - how horrible that looks let's say let's
151:52 - do let I equals spot index 0 let J equal
151:57 - spot index 1 and then I'm in the board
152:00 - IJ j I'm going to say it's going to
152:12 - equal the player current player and then
152:17 - current player should equal let's just
152:20 - pick a random player I mean this is not
152:25 - the right way to do it mouse let's just
152:27 - see if this works
152:28 - mousepressed next turn so every time I
152:34 - click the mouse current player is not a
152:37 - thing random players cannot set property
152:44 - undefined of undefined board
152:46 - it's not called board
152:50 - what's spot all right
152:52 - console dot log spot array of two things
152:58 - in it array of two things in it oh
153:01 - that's weird
153:02 - why is it two arrays
153:24 - it's two o'clock
153:32 - see five dead serve well yeah this is
153:44 - right all right so that's right
153:52 - let me console.log I J oh no oh when
154:03 - it's when I spliced it out does it come
154:05 - in an array oh how awful it comes in an
154:08 - array so I need to do that
154:09 - there we go recode something up the
154:12 - board okay
154:15 - this that I've done this in such a super
154:18 - awkward way I might want to rethink this
154:20 - but it does work are you watching this
154:23 - will make a nicer version of this okay
154:25 - but I want to go back and forth between
154:27 - the players so current player should
154:30 - actually be an index into that array so
154:34 - I actually want to say random players
154:36 - dot length because I want that to be an
154:45 - index because then when I am adding the
154:51 - things of the board I want it to be
154:53 - player's index current player because
154:56 - the next player should be current player
154:59 - plus one modulus players dot length so I
155:06 - built this in a way that you could have
155:08 - more than more than two players so it
155:10 - should be Oh
155:11 - X Oh X 0 X 0 X oh hey oh one that one
155:17 - all right so this works with my wacky
155:20 - implementation now I don't need mouse
155:23 - press to call next turn I just want draw
155:26 - to call next turn so it fills up but I
155:33 - also want to check for a winner check
155:36 - for a winner
155:38 - so what I'm going to do I'm gonna write
155:40 - a function called check winner
155:46 - and what I'm gonna do in check winner is
155:49 - see first of all if bored dots if
155:55 - available dot length equals zero then
156:01 - console dot log tie so it was a tie so
156:08 - if the board fills up it was a tie now I
156:10 - need to check but but first I need to
156:17 - check is there a winner so let win or
156:22 - equal on no so I'm gonna say there's a
156:26 - there's a winner now what I'm going to
156:28 - do is check all of the first I'm gonna
156:33 - check all of the ways across so let's
156:35 - first check horizontal so I is now the
156:45 - row so if board index I well that's the
156:51 - is that the row I don't remember
156:53 - 0 equals board index i1 equals board
156:58 - index I to then winner equals board
157:07 - index whatever I whichever one it is
157:09 - okay so if all three of those are equal
157:13 - then the winner is whoever you picked I
157:18 - can also check I can check now the
157:23 - columns I don't remember which is which
157:25 - but whatever I'm doing one or the other
157:31 - right then the winner is if they're all
157:35 - equal then I've got a winner now I need
157:39 - to check so this would be vertical
157:41 - except it might be the other way around
157:44 - and now I need to check diagonal so
157:49 - that's easy I just want to say if board
157:51 - 0 0 is equal to board 1 1 is equal to
157:57 - board 2 2
158:01 - then the winner is bored zero zero and
158:09 - then I can also check if bored to 0 is
158:17 - equal to bored 1 1 is equal to bored 0 2
158:20 - that would be the other diagonal then
158:22 - the winner is four to zero
158:24 - and now if there is no if if winner is
158:29 - still null and available is length
158:32 - console tie console.log tie otherwise
158:38 - console.log winner all right x is the
158:52 - winner but if there's a winner so let
159:01 - result equals check winner
159:07 - if result is not equal to null then no
159:16 - Luke stop the looping console dot log
159:20 - results okay why am I getting errors
159:25 - sketch line 59 it doesn't like that oh
159:32 - okay
159:33 - his next turn happening next earnest has
159:36 - to happen after this No
159:49 - oh I I did something so nuts look at
160:00 - this I was like that doesn't work if
160:01 - this equals this equals that that
160:04 - doesn't work this is the this is the
160:08 - concept I'm gonna write a function
160:12 - called equals three ABC and I'm gonna
160:18 - return if a equals B and B equals C and
160:26 - a equals C so this this is really the
160:32 - only way I mean there's other ways but
160:34 - this will actually check if a is equal
160:36 - to b and b is equal to c and a is equal
160:38 - to C if all of them are equal then all
160:40 - three of them are equal so I'm sure
160:42 - people have been screaming at there so
160:44 - now I can say equals three and like this
160:54 - equals 3 0 I 1 I 2 2 I and then same
161:09 - thing here board 0 0 1 1 2 2 when I'm
161:17 - missing parenthesis equals 3 board what
161:23 - I say 2 0 1 1 0 2 let's see where do I
161:30 - have parenthesis off give myself some
161:33 - more room I'm missing a parenthesis here
161:41 - I'm missing a curly bracket there right
161:46 - missing a parenthesis here coding is
161:49 - hard why do i torture myself no there we
161:55 - go just missing parentheses oh I got an
161:57 - extra one their line sixty-four where
162:01 - does it not like me so this is checking
162:08 - all the horizontal this is checking all
162:12 - the vertical even I have this mixed up
162:13 - this is checking the two diagonals if
162:16 - the winner is null and available link is
162:20 - zero we have a tie and so otherwise next
162:30 - turn so I really shouldn't see any
162:35 - errors is that redundant yes this is
162:42 - redundant yes can I tree line 62 I
162:52 - equals spot next turn why am i calling
163:01 - next turn if there's nothing of there I
163:06 - just should be a winner or nothing
163:08 - available we run this one more time so
163:15 - oh there's lots of console logging going
163:17 - on oops oops where am I my console
163:24 - logging somewhere else
163:25 - oh I forgot it oh I'm not rich I'm not
163:31 - returning the winner and I'm console
163:35 - logging a lot of other nonsense here
163:37 - it's just a return
163:40 - oh my god it's 211
163:46 - I'm doing a horrible job at this I am
163:50 - NOT Rita this should be returned I'm
163:52 - rushing you should never code and write
163:54 - take a deep breath and relax while
163:56 - you're coding return tie otherwise
164:02 - return winner
164:05 - now winners No oh they could be equal
164:16 - they can't be other can't be blank they
164:19 - can't all be dead somebody wins so in my
164:22 - check equals rich if a is blank which if
164:38 - okay I just they have to be full so okay
164:44 - and a is not equal to blank right
164:59 - S is not defined line 22 oh whoops
165:01 - there's s there there we go
165:03 - X is the winner let's run it again X is
165:07 - the winner
165:08 - o is the winner x is the winner so let's
165:12 - at least make a let's at least say
165:21 - create p x a crepey winner style color
165:33 - FFF a result tie yeah I have made my
165:47 - version of tic-tac-toe in kind of a
165:50 - horrible way this is it oh and you can't
165:54 - see it now let me scoot this over here
165:56 - this was a tie only refresh x1 this one
166:02 - let's make it more dramatic I don't know
166:05 - why I'm how do I do a sighs the style
166:16 - font size was the most ridiculous away
166:25 - 832 point there we go that's what I'm
166:30 - looking for okay now every time I run it
166:32 - ty o x o wins and let's change the frame
166:38 - way we're gonna make this super dramatic
166:44 - frame rate it's 2:15 I really got to go
166:50 - frame rate one okay here we go everybody
166:52 - Oh X Oh where's X gonna go Oh
166:56 - X oh oh
167:00 - it was a tie oh no 101
167:04 - [Music]
167:05 - let's play this one more time what will
167:19 - happen place your bets this is like
167:27 - excellent congratulations ex wow you
167:39 - really won that one alright thanks for
167:42 - watching this Cody challenge where I
167:43 - hate an AI laik tic-tac-toe against
167:46 - itself you can see how well it's
167:47 - learning ex just keeps winning over over
167:49 - again up I will come back you know the
167:52 - future second part in this I know I say
167:54 - this for like so many Cody challenge do
167:55 - you think I'm never coming back son I
167:57 - think several years I will come back and
168:00 - fix this as well something called the
168:04 - min Matt and minimax is it called
168:06 - minimax yes the minimax algorithm to
168:15 - actually make thoughtful smart decisions
168:18 - for how to to actually make thoughtful
168:24 - smart decisions for how to place your
168:26 - X's and your own for an AI to up them to
168:29 - learn how to beat this game and to
168:31 - always win tic-tac-toe and it's a
168:32 - challenge to you the viewer take this
168:35 - version of my tic-tac-toe coding
168:37 - challenge and when one of the when when
168:40 - xro wins draw a nice little line through
168:42 - it to indicate the winning I don't have
168:44 - time for that right now I should really
168:46 - add this to this but please add this to
168:47 - this go to the coding train website
168:50 - where you will find this challenge on
168:54 - the website itself and a place to add
168:56 - your community contribution as well as a
168:58 - video tutorial about how to add your
169:01 - community contribution is out now as
169:02 - well so I hope to see lots of
169:04 - tic-tac-toe games and computers playing
169:06 - them people playing them and have a lot
169:08 - of fun making those and I'll see you in
169:10 - a future coding challenge good bye it's
169:15 - not minimax I feel like it's minimax
169:30 - I think it's minimax all right everybody
169:36 - I really have to go I don't know what's
169:38 - gonna happen with all this stuff that I
169:40 - did today someone could find this link
169:45 - and share it people can start playing
169:46 - around with this code and I've really
169:49 - got a rush out of here
169:50 - oh the music's is on the loud side
169:54 - let me rerecord like let me rerecord
170:00 - that end without music and then so much
170:04 - if he needs to like make it nicer but
170:07 - like include music to make it fun we
170:09 - could do that oh yeah the music is all
170:13 - the way up hello to the Brazilians and
170:17 - the Argentinians and all the people want
170:19 - what is it min max or mini max somebody
170:22 - give me a definitive answer its min max
170:32 - some mini max sometimes min Max or
170:35 - saddle point is a decision rule yes mini
170:40 - max thanks Dave Dave who submits a lot
170:42 - they burchett easements lots of
170:43 - wonderful variations on these coding
170:45 - challenges alright let me do this again
170:51 - let's set the frame rate to like two
170:55 - will make it a little less dramatic okay
170:57 - good oh and also how come the I'm
171:01 - nothing wearing alright wait why does oh
171:04 - look at this so hold on I know why this
171:06 - has been looking weird this whole time
171:08 - something's been bothering me about this
171:10 - the in the draw function the first time
171:14 - it draws this the stroke weight is not 4
171:17 - so let's put that here and run it all
171:22 - right everybody place your bets here it
171:24 - goes who's gonna win X wins all right
171:27 - let's run it again you know what you
171:29 - should do as your own version of this
171:31 - coding challenge is you should actually
171:33 - like when a wins you should draw a line
171:35 - through the winner
171:36 - I'm not gonna add that cuz but I'm gonna
171:39 - leave it like this who's gonna win X
171:40 - wins let's see if we can get a tie
171:42 - come on tie I don't know why I'm having
171:45 - the slow dramatic build Oh X wins again
171:47 - I really want to see a tie back to frame
171:57 - rate 30 Oh X I wonder what the
172:03 - probability of there being a tie through
172:05 - this random method is you can see that
172:07 - it's certainly not one out of three
172:09 - right there we go we've got a tie
172:13 - alright thank you for watching this
172:15 - coding challenge now there's so much
172:17 - that I didn't do in this but the and
172:19 - it's kind of a mess so I'm gonna come
172:20 - back and eventually make a second part
172:23 - to this oh I'm not screen capturing
172:24 - that's fine hold on that's an issue with
172:29 - my hold on hold on it's a little extra
172:37 - just gonna do a little extra something
172:39 - here okay so if you're wondering why I
172:46 - switch to the green screen I'm gonna let
172:47 - Matt's you add other visuals with the
172:49 - coding train web site behind me later
172:51 - but I don't feel like pulling up now
172:52 - when this gets edited thank you for
172:57 - watching this coding challenge with me
172:58 - doing my darndest to make a very sort of
173:01 - like ridiculously programmed version of
173:04 - an AI just picking randomly that is a
173:07 - way that is one possible methodology for
173:10 - playing the game tic-tac-toe pick a
173:11 - random spot play the game to Keiko I
173:13 - will come back I'm gonna do I know this
173:15 - might not lets might be it might take a
173:16 - while for me to get to this so hopefully
173:18 - you're we keep reminding me in the
173:19 - comments but I'm gonna come back and do
173:21 - a second part the reason why I built it
173:23 - I'm gonna need to refactor the code to
173:24 - make it more manageable and I'm sure
173:25 - people will give me some nice
173:26 - suggestions and make some variations of
173:29 - that I'm gonna make a oh I hate the way
173:32 - that I'm explaining this min/max
173:35 - algorithm take a look at la lanterne
173:38 - Shelli
173:39 - alright hold on
173:44 - I recorded this explanation all right
173:49 - thank you so much for watching this kind
173:52 - of strangely implemented version of a
173:54 - computer playing itself against
173:55 - tic-tac-toe with its highly intelligent
173:57 - algorithm of just picking a random spot
173:59 - each time um please go to the coding
174:01 - train com where you'll find a web page
174:03 - for this coding challenge and make a
174:05 - variation of this you know whether it's
174:07 - I'm sure there's so much visual stuff
174:08 - interactivity design that you could add
174:10 - to this refactoring the code I also
174:13 - recently made a video about how to add
174:14 - your own community contribution so I'm
174:16 - hoping this tic-tac-toe
174:18 - coding challenge will break the record
174:19 - for the most community contributions and
174:21 - I will come back some point in the
174:22 - future and actually look at some too
174:27 - traditional
174:27 - algorithms for solving the tic-tac-toe
174:30 - game the sort of standard one would be
174:31 - something called min Max our minimax
174:33 - which is a sort of decision tree like
174:36 - solution for looking at all the possible
174:38 - moves and picking the optimal one so
174:40 - I've got a refactor the code and
174:41 - actually build an intelligent algorithm
174:44 - that's not just randomly picking which
174:46 - space to go next for the computer to
174:48 - maybe play against a user and I'll come
174:50 - back and do that at some point in the
174:51 - future have a wonderful rest of your day
174:55 - programming or doing whatever it is that
174:57 - you're doing today and I'll see you soon
174:59 - good bye okay I now I've screen captured
175:06 - because you know obviously I need the
175:09 - this thing to be behind me that makes no
175:13 - sense okay screen tic-tac-toe
175:17 - tic-tac-toe desktop all right everyone
175:23 - thank you so much for supporting me by
175:27 - watching by signing up for really tough
175:31 - origin proceeds out of our coding trades
175:33 - by joining patreon or being a member or
175:35 - just by being a person like you
175:38 - being a human being who exists in the
175:40 - universe that we all share let's share
175:43 - it well together and I'm going on
175:48 - vacation tomorrow for a week so the
175:51 - least stuff happening on the channel
175:52 - because I won't be publishing new videos
175:53 - while I'm away or other people will be
175:55 - publishing them and then when I get back
175:57 - focusing on that nature of code book so
175:59 - you will see very little life swimming
176:01 - for me well it will happen I'll be back
176:03 - in full force in September when the new
176:06 - semester begins a new studio thank you
176:10 - goodbye I'm going down to cup my spot at
176:14 - camp at 3:00 it's like a 20-minute
176:16 - subway ride so if I can get to the
176:18 - subway in the next 15 minutes I'll be
176:20 - there on time
176:20 - okay good bye everybody
176:27 - [Music]
176:35 - [Music]
177:17 - [Music]
177:39 - [Music]
178:13 - [Music]
178:17 - oh look I think I'm back by accident