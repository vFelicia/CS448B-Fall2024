00:00 - hello and welcome to another genetic
00:02 - algorithms video in this video I want to
00:04 - talk about something called pool
00:06 - selection based on Fitness and actually
00:08 - this this this video is inspired by a
00:10 - comment that came in on GitHub from
00:12 - Sinclair zx81 who writes thanks for the
00:16 - video regarding genetic algorithms in
00:18 - this video you suggest an algorithm for
00:20 - pool selection based on Fitness now if
00:22 - you remember what was my
00:25 - algorithm my algorithm was I have a
00:28 - bunch of elements in a population like a
00:30 - b and c they each get a fitness score
00:33 - like a fitness score of eight a fitness
00:35 - score of Two and a fitness score of one
00:38 - and what I do is I create a pool a
00:40 - mating pool not a swimming pool or I
00:43 - don't it's not any of these things it's
00:44 - just some computer thing which is an
00:46 - array but essentially I create that pool
00:48 - and I put a in eight times a a a a a a a
00:52 - a I put B in twice and I put C in once
00:56 - so their the amount of times are in the
00:58 - pool is relative to their Fitness
01:00 - function and then if I go and say
01:01 - magically pick me a random element from
01:04 - that pool I am four times as more likely
01:06 - to Pick A over B I'm eight times as more
01:08 - likely to pick a over C etc etc so you
01:11 - can see how their Fitness in this case
01:13 - maps to probability but this solution is
01:15 - not the greatest greatest Solution on
01:17 - Earth or in the universe or whatever um
01:21 - and this and the reason for this as
01:23 - Sinclair writes is the method you
01:25 - described involves populating a large
01:27 - array of elements um and this this can
01:30 - actually you might have noticed while I
01:32 - was doing the smart Rockets coding
01:34 - challenge like there was a lot of like
01:35 - stuttering at the end of the generation
01:37 - so this can really be a problem suddenly
01:38 - I made this array that has like 100,000
01:40 - or a million elements in it and things
01:41 - can run really really slow so uh
01:44 - Sinclair suggests a different approach
01:45 - for selection a bit more generalized and
01:48 - supports arbitrary Fitness values and
01:49 - should be fairly quick so I encourage
01:51 - you to look at Sinclair's code I'll link
01:53 - to this GitHub issue thread um but uh a
01:56 - lot of this code uses sort of advanced
01:57 - JavaScript array functionality stuff
02:00 - which is kind of beyond the scope of
02:01 - what I'm doing so I'm going to try to
02:02 - implement this strategy that Sinclair
02:05 - outlines um in a sort of simpler way
02:08 - perhaps less efficient but I'm I'm going
02:09 - to try to do it in this video now what
02:11 - this strategy is also referred to as uh
02:14 - often referred to as rejection sampling
02:16 - or accept reject algorithm and um this
02:19 - is a kind of Monte Carlo method I always
02:21 - just if anytime I could say Monte Carlo
02:23 - I like to say Monte Carlo if I could
02:25 - just leave and go have some I I I don't
02:28 - want to talk about gambling in Monte car
02:30 - there's no reason that let me come back
02:30 - over to the Whiteboard um and so let's
02:33 - talk about how this algorithm is
02:34 - different what
02:36 - if I could pick so in this case I'm
02:39 - picking a single random number a random
02:41 - number and index into this array what if
02:44 - uh we forget about this giant array
02:46 - thing and what if I were to just pick a
02:48 - b or c I would be picking If This Were
02:50 - an array 0 1 or two right I would be
02:56 - picking a random
02:58 - value 0 one or sorry between zero and
03:03 - three and I would say
03:05 - floor so what that's going to give me is
03:08 - this function uh is going to give me
03:10 - zero one or two so if I do that if this
03:12 - is all I do then and this should be a
03:14 - one up here if this is all I do then I
03:17 - have a onethird chance of picking a a
03:19 - onethird chance of picking b and a
03:21 - onethird chance of picking C this will
03:23 - not do because I want to have a higher
03:25 - probability of picking a a higher a
03:27 - medium probability of picking b and a
03:29 - lower probability picking C scaled
03:30 - according to their Fitness so let's
03:32 - think about what I mean by accept reject
03:35 - so I'm still going to do I'm going to
03:36 - have this is going to be a two-step
03:38 - process step one is going to be this
03:41 - pick a b or c now though step
03:45 - two with an equal probability for each
03:49 - accept or reject that's the question I
03:53 - need to ask I picked 01 or two but am I
03:56 - going to accept that as my pick or I'm
03:57 - going to reject it and try again and
03:59 - here's a way I could do that what if I
04:01 - also picked a random
04:03 - number between 0 and
04:06 - 10 and if that random number happened to
04:10 - be less than the fitness
04:12 - score then I'm going to say
04:15 - accept if it is not less than the
04:18 - fitness score I'm going to say
04:21 - reject right and you could think about
04:23 - how this might work pretty often if I
04:25 - pick a random number between 0 and 10
04:27 - that's pretty often going to be less
04:28 - than eight but very rarely going to be
04:30 - less than I mean rarely going to be less
04:31 - than one or only 10% of the time it's
04:33 - going to be less than one but 80% of the
04:34 - time it's going to be less than eight so
04:36 - you can see how this idea and if I
04:38 - accept then I keep it and I use that
04:40 - parent if I reject it then I go back and
04:42 - pick again so I might have to do it
04:44 - multiple times per pick but in the end
04:47 - I'm going to have a way of mapping the
04:50 - uh mapping the fitness values according
04:52 - to mapping the probability of picking an
04:54 - element according to its Fitness value
04:56 - so this is the theory behind it and
04:57 - let's go try to implement that in code
04:59 - okay so coming back over here I want to
05:01 - show you something I actually have a
05:02 - processing example that I will uh link
05:04 - to the source code for this uh and and
05:06 - before I get to the genetic algorithm
05:08 - I'm just going to run this example and
05:10 - what this example is doing right now is
05:12 - it's picking random numbers between zero
05:14 - and the width of this window and it's
05:15 - graphing the distribution of how often
05:17 - they've been picked and look at that I'm
05:19 - getting kind of an even distribution
05:21 - from the and it's kind of normalizing
05:23 - them to the height of the window it's
05:24 - doing all this stuff so you can see over
05:25 - time a good random number generator
05:27 - should put pick an even distribution of
05:29 - numbers
05:30 - across the spectrum of what you're
05:31 - picking but I'm going to uh now change
05:35 - something really quickly in the
05:37 - code and I will uh and run it again now
05:41 - look at this distribution so this is now
05:43 - a program that's picking random numbers
05:45 - between zero and the width of the window
05:48 - but it's much more likely to pick higher
05:51 - numbers than it is to pick lower numbers
05:53 - and it's you can see this graph is
05:54 - actually just a linear graph of like
05:56 - yals X and how is that working well I
05:59 - have have this function called accept
06:01 - reject and notice what it does is it
06:04 - picks two random numbers why Am I
06:06 - Casting it I must have written this at
06:08 - one point in like eclipse or something
06:11 - because it's totally unnecessary to I
06:13 - don't know why I have that there the
06:15 - that extra it still works um you can see
06:17 - that it picks two random numbers and
06:20 - what it does is it says and this really
06:22 - I'm going to change this variable name
06:24 - like
06:26 - probability the probability whether or
06:29 - not we should accept random number one
06:31 - is equal to random number one so the
06:34 - higher random number one is the higher
06:35 - its probability and then I just check
06:38 - was R2 less than the probability if it
06:40 - was return that value otherwise go back
06:42 - and pick again and I you know I have
06:44 - this like goofy little thing here this
06:45 - hack where I'm like if for some reason I
06:47 - tried to pick a random number 10,000
06:49 - times I didn't get anything then
06:50 - something is going wrong and let's at
06:52 - least get out of here and not like be an
06:53 - infinite Loop but you can see how this
06:55 - code kind of works so what I want to do
06:57 - now is try to take this same idea and
07:00 - bring it into the genetic algorithms but
07:02 - rather than have the probability be
07:03 - based on the random number itself right
07:06 - I want the probability be based on the
07:08 - fitness of that of that particular
07:10 - element okay so I'm going to go back I'm
07:12 - going to leave processing and I'm going
07:14 - to go back to uh
07:17 - JavaScript and I'm going to look for
07:19 - this uh natural selection function so
07:22 - let me just make sure I'm going hit save
07:25 - this is the example that I'm running
07:26 - it's this to be or not to be that is the
07:28 - question example example which is trying
07:30 - to evolve to be or not to be uh and I'm
07:33 - going to go back to here where uh I'm
07:37 - creating this mating pool so I am now
07:38 - going to get rid of this mating pole
07:40 - tunks goodbye mating pool okay so I'm
07:44 - going to uh keep this maximum Fitness
07:46 - you're going to see that I'm going to
07:47 - use it in a second but I don't need this
07:49 - whole thing where I build this
07:52 - extra mating pool and in fact this whole
07:56 - function is kind of irrelevant except
07:58 - for this maximum Fitness value so I'm
08:00 - actually just going to take this out and
08:03 - do this maximum Fitness thing in the
08:05 - generate function so right here this is
08:08 - the issue I need to replace this part of
08:11 - the code this is the part of the code
08:13 - where I pick parent a and parent b as an
08:16 - index into that particular mating pool
08:19 - but I don't want to do that anymore
08:21 - instead what I want to say is I'm going
08:24 - to just have another function I'm going
08:25 - to say
08:27 - accept reject
08:30 - um something in the popul I'm going to I
08:33 - need to pick a random element in the
08:35 - population and I also need to know I
08:38 - need to pass in that maximum Fitness
08:40 - will be a value I need to write a new
08:41 - function called accept reject and you
08:44 - know what I it can just be in this uh
08:49 - object so I just I think it would be
08:51 - nice to encapsulate this in another
08:53 - function rather than write the code here
08:54 - especially since I have to do it twice
08:56 - so I'm going to write this down here now
08:58 - as oops
09:00 - um this do accept and uh I
09:07 - forgot oh my goodness never mind I was
09:10 - trying to use my sound for
09:12 - it uh I'm G to write a function called
09:15 - accept reject okay and what I want to do
09:18 - is the first thing I want to do is pick
09:21 - a random index so I need to say random
09:24 - number between zero and this.
09:27 - population. length and the Z is kind of
09:29 - an optional argument that I don't need
09:31 - so I need a random number between zero
09:33 - and the length of the population and I
09:35 - want to floor
09:38 - that then what I need to do is pick
09:41 - another random number I'm just going to
09:43 - call that R which
09:46 - is a random value between zero and
09:51 - maximum
09:54 - Fitness so I want some value that goes
09:57 - between zero and the maximum Fitness
10:01 - if
10:04 - R is less than oh sorry sorry if okay so
10:09 - now sorry the
10:11 - uh the uh member of the population the
10:15 - partner the
10:16 - parent is this.
10:23 - population index so this is the actual
10:26 - partner that I picked so I'm picking a
10:28 - random element from the population this
10:30 - is kind of and then I want to get and
10:32 - then I want to get like that the index
10:34 - into the array and then I want the
10:35 - actual object itself because what I want
10:37 - to test is if that
10:39 - partner's Fitness is less than
10:45 - R let's think about this no no no if
10:49 - R is less than that partner's
10:53 - Fitness let's think about this right if
10:55 - the fitness values go between zero and
10:57 - 100 I'm picking a random number now
11:00 - between 0 and 100 if the partner if this
11:02 - particular element has a fitness value
11:04 - of 100 this second the random number is
11:07 - always going to qualify I'm always going
11:08 - to re accept it if it has 50 it'll be
11:10 - 50% of the time if it's 25 the is 25 it
11:13 - will'll be 20% of the time and I can say
11:16 - return that
11:21 - partner otherwise what do it again so I
11:26 - want to say while I'm just going to do
11:27 - this while true over and over over again
11:29 - the return will get me out of this
11:32 - function so this accept reject strategy
11:34 - is going to always pick a random
11:37 - population member of the population pick
11:39 - a random number and if it qualifies if
11:41 - it should be accepted return it uh I'm
11:44 - forgetting some I I'm forgetting some
11:46 - this dots people are telling me in the
11:47 - chat uh line 51 and 52 uh yep thank you
11:52 - so now this should be this. accept this.
11:55 - reject this. accept reject okay so the
11:58 - other thing I want to do is I'm just
11:59 - going to say uh um be safe be safe
12:03 - equals
12:05 - zero be
12:07 - safe
12:09 - Plus+ and if B safe is ever greater than
12:14 - 10,000 return null I don't know what
12:17 - this is really doing but I just want to
12:18 - like get out of that infinite Loop like
12:20 - I feel like something's wrong if this
12:21 - takes 10,000 times to find uh to find a
12:24 - a correct value so uh so let's look at
12:27 - this and let's just see I don't know how
12:29 - I do let's run this okay so clearly I'm
12:31 - getting an error uh the error is
12:34 - population. natural selection is not a
12:35 - function right I eliminated an entire
12:38 - function from this particular scenario
12:40 - sketch. JS uh line 40 um so I'm going to
12:44 - go to line 40 and I'm going to delete
12:47 - this function doesn't exist anymore uh
12:49 - Max Fitness is not defined uh in
12:55 - um so um I'm back I after a little bit
12:59 - debugging I had some sort of significant
13:00 - issues you can see right now what's
13:02 - happening is I'm not kind of getting any
13:04 - Evolution um there's a couple reasons
13:06 - why this isn't this happening um number
13:08 - one is that uh my the fitness function
13:11 - that I'm
13:13 - using at the beginning when I pick a lot
13:15 - of random phrases a lot of them don't
13:16 - have any correct characters and I'm
13:18 - getting a fitness function of zero and
13:20 - in this new algorithm that we've
13:22 - designed if the fitness value is zero
13:25 - this thing has no chance ever of being
13:27 - picked because I can never pick a random
13:29 - number between zero and something that's
13:31 - less than zero so as a like a little bit
13:34 - this isn't the best solution but as a
13:35 - little bit of a hack I'm just going to
13:37 - in the fitness function add 01 so I can
13:41 - at at a minimum the fitness function is
13:43 - 0.0 the fitness value is 01 so
13:46 - everything has at least like a 1% chance
13:49 - of being picked according to this uh
13:50 - rejection sampling model that I'm now
13:52 - using but there's another significant
13:54 - problem and I could run this um uh I
13:57 - could run this again now
13:59 - and it's sort of doing some stuff now
14:01 - it's going to break here and there or do
14:02 - weird things so there and it's not
14:04 - really evolving very well there's also a
14:05 - major issue um if you notice in the code
14:09 - if I go back to this code this is what
14:11 - I'm doing and the comment says it all
14:13 - refill the population with children from
14:15 - The Mating pool so what I was doing
14:18 - before is I had a separate array that I
14:20 - was pulling from to create child objects
14:23 - to put in the population but I'm no
14:25 - longer doing that I'm now actually
14:27 - picking from the population to put
14:28 - things back into the population but I
14:30 - can't be putting the Next Generation
14:32 - into the population while I'm continuing
14:34 - to pick the current population so what I
14:36 - need is a whole separate array um I'm
14:39 - going to call this new population and
14:41 - it's just an empty array and instead of
14:43 - filling the existing population I want
14:45 - to fill that new population and then at
14:49 - the end I can happily say this.
14:53 - population equals new population so that
14:57 - is a fix that I also need
14:59 - here um and now I should be able to run
15:02 - it and we should see that we're back to
15:04 - our old tricks again we've got to be or
15:07 - not to be evolving now it actually I
15:09 - think there's going to be an issue see
15:10 - it got to be or not to be but it's still
15:12 - going there's a reason why it's still
15:14 - going because I have a bit of code that
15:17 - says I uh somewhere I believe in the um
15:21 - in evaluate here yes it says if the best
15:25 - fitness is equal to the Perfect Score
15:28 - then you finish the simulation the
15:30 - problem is the fitness the perfect score
15:31 - is one but remember I added 01 to it so
15:34 - I'm just going to change this to if it's
15:36 - greater than or equals to the Perfect
15:38 - Score being one 100% of the character is
15:39 - correct but I'm just going to check if
15:41 - it's greater than that now because I had
15:42 - that I added that 01 thing so now we
15:45 - should run this again and we should see
15:47 - this is doing exactly what we did before
15:49 - so there's really H you know my
15:51 - assumption here is there's not a
15:52 - significant difference between the
15:54 - behavior of this version of the genetic
15:56 - algorithm and the one that I did with
15:57 - the building the large array mating pool
16:00 - um but using this uh accept reject
16:03 - strategy this rejection sampling
16:04 - strategy I've done away with this giant
16:07 - array thing which I think in a lot of
16:09 - scenarios can be a useful solution to
16:11 - use as well so as an exercise you might
16:13 - go and find the um the uh uh smart
16:16 - Rockets example that I built in a
16:18 - previous video in the coding Challenge
16:19 - and see if you can take that and apply
16:21 - this except reject uh algorithm and in
16:24 - that one in particular I know I was
16:25 - building this really big array which was
16:26 - making it run kind of slow and see if it
16:28 - runs faster with this algorithm okay
16:30 - thanks for watching this video