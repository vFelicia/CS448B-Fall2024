00:00 - [TOOTING THE TRAIN WHISTLE]
00:01 - Hello, and welcome to a coding
challenge about springs.
00:04 - This is the example that I
make in this coding challenge.
00:06 - This is the end product.
00:08 - I'm just going to jump
right in, but let me say,
00:09 - this one's a little bit long.
00:10 - I mean, some of my videos are
a lot longer than this one,
00:13 - but I'm going to go
through this very slowly.
00:15 - So I'm going to start with this
idea of calculating a spring
00:17 - force with just a single
variable, like the y
00:20 - value moving up and down.
00:21 - Then I'm going to
look at vectors.
00:23 - What does it mean to
have a spring force be
00:24 - calculated with a vector?
00:26 - And that's going to allow me to
transition into making things
00:28 - like this, where I have a system
of particle objects and spring
00:32 - objects, and everything
is connected,
00:34 - and everything is all boingy
boingy boingy all day long.
00:37 - So without further ado, enjoy.
00:41 - I'm going to begin this journey
through exploring springs
00:44 - with Hooke's law.
00:45 - So Hooke's law is
named for Robert Hooke,
00:47 - a British physicist,
yes, who developed
00:50 - the formula, this
law, in the 1660s.
00:53 - So Hooke's law was
originally stated
00:55 - in latin as ut tensio, sic vis,
as the extension, so the force.
01:01 - But it's more commonly
written out as an equation,
01:04 - and the equation
looks like this.
01:08 - As the extension, x standing
in for the extension--
01:13 - another word for that
might be displacement--
01:17 - so goes the force.
01:19 - K is a value commonly referred
to as the spring constant,
01:24 - so it's how stiff is
the spring, how springy
01:28 - is the spring, if you will.
01:29 - To understand what the
extension is or displacement
01:32 - is, let's draw the
diagram as follows.
01:34 - A spring is made up
of three things--
01:36 - an anchor, a bob--
01:40 - hi, Bob-- and the spring,
the boingy thing, the spring
01:44 - itself.
01:45 - This thing is really the spring.
01:46 - So if the spring is at rest,
meaning it's not moving at all,
01:50 - then we have something
called the rest length, which
01:52 - is the distance between
one end and the other end
01:55 - of the spring, or in this
case, the anchor and the bob.
01:57 - This is the rest length.
02:00 - Intuitively, you probably
understand a spring
02:02 - as, if I were to pull
it down and release,
02:05 - it would spring back up.
02:06 - If I were to contract
it and push it in,
02:08 - it would spring back out.
02:09 - That contraction,
or that extension,
02:11 - is the displacement,
or the extension.
02:14 - So let's say I were to
pull it down to here,
02:17 - the distance between
where this bob currently
02:20 - is and where it
would be at rest,
02:23 - this is known as the
extension, or in this case, x.
02:27 - And the reason
why the negative 1
02:28 - is there is because, even though
the extension is positive,
02:33 - the spring is being-- the
force is pulling it back
02:35 - in a negative direction,
the opposite direction
02:37 - of that extension itself.
02:39 - Ultimately, I want to
do this with vectors,
02:41 - these little things known
as arrows, so that this
02:43 - could be anywhere,
and the spring
02:45 - could point in any which way.
02:46 - But let's work it out just in a
sort of one dimensional spring
02:49 - with just a single
y value first.
02:51 - I'll begin with just this
really basic sketch, just one
02:54 - variable, just y itself.
02:56 - So y, being 200, so
we'll say I got it.
02:58 - We'll say that y
position 200, the spring
03:01 - will assume as
attached to the top.
03:03 - And then the rest length
would therefore be 200 or 200
03:06 - minus y.
03:07 - So the displacement,
or x, would be
03:10 - wherever the current
y is minus 200,
03:16 - and I should make
that rest a variable.
03:20 - So in this case, the
displacement is 0.
03:22 - The spring shouldn't
move, which is what I see.
03:24 - But what happens if the
displacement is not 0,
03:27 - like if I make it 250?
03:29 - So clearly, it should
spring back up,
03:32 - so I need to calculate that
force that I've got over there.
03:36 - And I can make up
a spring constant.
03:38 - Let's just use the value
1 for lack of anything
03:41 - else right now.
03:42 - So what do I do with that force?
03:43 - How does that force
change the y position?
03:46 - Well, this goes back to
core foundational principles
03:49 - of my Nature of Code series.
03:51 - An object has a position.
03:53 - The velocity changes
the position.
03:55 - The acceleration
changes the velocity.
03:56 - I cover that extensively.
03:58 - I'll link to those videos here.
03:59 - Other thing that's really
critical about that series
04:02 - is Newton's second law--
04:03 - force equals mass
times acceleration.
04:06 - And if I were to
simplify that law,
04:09 - just say, well,
forget about the mass.
04:10 - It's equal to 1 for
everything in our world.
04:12 - Force equals acceleration or
acceleration equals force.
04:16 - So if I were to say the
velocity changes by the force,
04:22 - which is the same
as acceleration,
04:23 - and the position, which
is y in this case,
04:25 - changes by the velocity,
that's all I need.
04:28 - Change y by velocity.
04:30 - Change velocity by force.
04:31 - The only thing is, I
need a velocity variable,
04:34 - and I need it to start at 0.
04:38 - Oh, boy, interesting.
04:40 - I'm getting something.
04:41 - It's springy for sure, but
I think the issue here is
04:44 - my value of k is much too high.
04:46 - So let's use a lower
value, and we can see,
04:49 - there it is, springing
back and forth.
04:51 - Look at that spring.
04:52 - Oh, it's so springy.
04:53 - Let me add a little
damping in here and just
04:56 - say velocity times
equals 0.99, meaning
05:00 - it's going to lose 1% of
its velocity every frame,
05:05 - and that's how you might
imagine maybe there's
05:07 - some air resistance or some
other kind of force that slows
05:10 - the spring down over
time, and eventually it
05:12 - comes back to at rest.
05:14 - So you could pause this
video now and maybe try
05:16 - some interesting things,
have more than one spring.
05:18 - Could you move it up
and down with the mouse?
05:20 - Could you have it
go left and right?
05:21 - But really, there's
not a lot that I
05:23 - can do with this without
adding in the idea of a vector,
05:27 - so let me redraw this
diagram with it at an angle
05:30 - so that we can bring in the
concept of vectors here.
05:35 - I mean, the concept of
vectors could have existed
05:37 - with my previous diagram.
05:38 - It's just I think I'm going to
be able to illustrate it better
05:40 - if it's an angle.
05:48 - Now, if vectors are
unfamiliar to you,
05:50 - again, I could refer you
back to that whole video
05:52 - series about
vectors, but the idea
05:55 - of a vector in one
sentence is an entity
05:57 - with magnitude and direction.
05:59 - And so I could draw it in
this diagram here as an arrow.
06:03 - This could be the spring force.
06:08 - It has two elements to it.
06:10 - It has its direction.
06:11 - Which way is it pointing--
back towards the bob--
06:14 - or towards the
anchor, I suppose?
06:16 - And it has a magnitude.
06:17 - How strong is it?
06:18 - What is its length?
06:19 - This formula still
gives me the magnitude,
06:23 - the force of the
spring, the magnitude,
06:25 - the length of this vector
is negative k, the spring
06:28 - constant, times x,
the displacement.
06:32 - The issue is, I need to
figure out the direction,
06:34 - and the way that I can
figure out the direction
06:36 - is, if I know the anchor point,
if I know this as position a,
06:42 - and I know where the bob is
currently down here, if I call
06:46 - this position b, I can create
a vector that points from a all
06:53 - the way to b by
taking b minus a.
06:57 - If we think of a
vector as having
06:58 - two components, an x
component and a y component,
07:04 - I just need to subtract b's x
minus a's x to get this value,
07:10 - b's y minus a's y--
07:12 - this is very awkward to say--
07:13 - to get this value, b minus a.
07:16 - So coming back to
the code-- and let me
07:18 - create a new version of this.
07:22 - Instead of y, I want
to have position,
07:24 - or maybe I'll call it bob.
07:26 - And let's also have a
vector that keeps track
07:29 - of the position of the anchor.
07:34 - So you can see the Create Vector
function creates the vector,
07:36 - and it's really just storing an
x and a 300 for x, 200 for y;
07:40 - 300 for x, 0 for y.
07:46 - Let's draw both of them.
07:47 - I'm going to comment this
stuff out, and we can see I
07:50 - have two vectors,
one for the bob
07:52 - position, one for
the anchor position.
07:54 - Now, I need to get a vector
that points from the anchor
07:57 - to the bob.
08:01 - Now, this might look like a
totally insane line of code
08:03 - to you.
08:04 - It would be much
nicer if I could just
08:05 - write bob minus anchor.
08:07 - I have to use the
specific vector functions.
08:10 - This one is for subtract.
08:11 - I can make a vector from
subtracting bob minus anchor.
08:15 - Again, all this stuff
is covered quite more
08:16 - extensively in my vector
videos, but for now, we
08:19 - can just realize, in that
side, that variable v is
08:22 - a vector that points from
here all the way to there.
08:25 - A vector that is exclusively
noting the direction
08:29 - is what's known as a
unit vector of length 1.
08:32 - So I can call this function
Normalize to take that vector
08:37 - and normalize it
to a unit length 1.
08:40 - In a way, I can add
it to this formula
08:42 - here, v with a hat on it.
08:45 - This means the unit vector,
this is the direction.
08:47 - So I have a unit vector
pointing in this direction.
08:52 - I just need to multiply
it by the spring
08:55 - constant, the
displacement, and then
08:57 - reverse its direction a
negative 1 to go this way.
09:00 - v.multiply times k,
v.multiply negative 1,
09:05 - and then v.multiply
by the displacement.
09:08 - How do I get the displacement?
09:11 - Aha, guess what?
09:13 - Remember when I got
this vector that pointed
09:15 - all the way from a to b?
09:16 - The magnitude of that vector,
the length of that vector,
09:19 - is the distance between
those two points.
09:21 - Perfect.
09:22 - So before I normalize it,
let's say let x equals v.mag,
09:25 - and obviously, I'm
being silly by having
09:27 - these three lines of code.
09:28 - I can multiply it by
negative 1 times k times x.
09:35 - That is now the
spring force, and I
09:38 - think I'd rather rename
this variable now to force.
09:42 - And I've done essentially
exactly what's
09:45 - in these two lines of code,
but now with a vector.
09:50 - Now, I just need to adjust
these two lines of code
09:53 - to work with vectors.
09:54 - I need to have-- velocity
has to be a vector.
09:57 - Oh, so this has to be a vector,
and force is already a vector.
10:03 - So I could change this to
adding the force to velocity.
10:08 - That's the vector way of adding,
and then bob.add velocity,
10:14 - and then
velocity.multiply by 0.99.
10:19 - So again, I'm doing
everything exactly as before.
10:23 - I just needed instead to--
10:26 - oh, interesting.
10:28 - Oh, look at this.
10:30 - Ah, I made a mistake!
10:32 - Hold on, but let me
finish my thought.
10:34 - I basically just
changed everything,
10:37 - but one of the things about
working with P5 vector
10:40 - is you can't use plus,
minus, multiply--
10:42 - the traditional operators.
10:43 - I've got to use the
mathematical functions--
10:45 - velocity.add, velocity.multiply,
et cetera, et cetera.
10:49 - But I forgot something.
10:50 - I forgot about the rest length.
10:52 - We still have this
rest length of 200.
10:55 - x is not just the raw magnitude
of this particular vector.
11:01 - It's this particular vector
minus the rest length.
11:04 - It's this displacement.
11:06 - So I should say x equals
force.mag minus restlength.
11:15 - Oh, well, I should move
the bob down 50 pixels,
11:19 - and we could see it springing.
11:21 - I should probably
draw a line just
11:23 - to have that line in there.
11:29 - And silly, but I
think I prefer having
11:32 - the line before the
circle, and there we go.
11:36 - We've got our nice spring.
11:37 - Let's see what happens
if I take the spring
11:41 - and move it off to the side.
11:43 - If I've done everything
right with vectors,
11:45 - I should be able to position
that spring anywhere,
11:47 - and it will move in
the same fashion.
11:50 - So let's give it a start of 350
comma 250, and there you go.
11:57 - Now, you might be
wondering, that's weird,
12:00 - it feels like it should be
falling down or coming around
12:03 - to the center.
12:03 - Well, maybe if
there were gravity,
12:06 - but this is just a
totally made up thing.
12:08 - So this is just-- it's almost
more of a top down view, where
12:11 - I'm looking at a table, maybe
where you're pulling something
12:13 - out and springing
back and forth.
12:15 - But it is interesting
to think about,
12:16 - what if I do add gravity here?
12:19 - And yes, this is an
oversimplification
12:21 - because I'm not
thinking about math
12:23 - and all sorts of other factors.
12:24 - But I could just make gravity
a vector that points down,
12:31 - and then I could also add
that force to the velocity.
12:39 - And now, you see it's kind
of, interestingly enough,
12:42 - acting like the pendulum.
12:44 - Let's move it all the
way over to the side
12:48 - and see what happens.
12:51 - And it's kind of
awkward and weird,
12:54 - but we've got a springy pendulum
swinging back and forth.
12:57 - Maybe that gravity
should be a lot stronger.
12:59 - Maybe I should be
thinking about math.
13:01 - I'll leave you to
play with all of that.
13:04 - Just to add one
more thing to this,
13:05 - I think it would
make sense for me
13:07 - to be able to move the
bob around with the mouse.
13:10 - And I could do this in
a much more elegant way,
13:12 - but I'm just going to
say, if mouse is pressed,
13:17 - I'm going to set the bob's
position to the mouse location,
13:20 - and then also, I'm going to set
the velocity to 0 because I'm
13:26 - locking it in place.
13:27 - It's no longer moving.
13:28 - So I can click the mouse, and
I can move it anywhere I want.
13:31 - So if I move it over here,
it should spring back up.
13:35 - And then if I click the mouse
again, I can move it here,
13:38 - and it'll spring back down.
13:40 - So that's just one
thing for you to see.
13:41 - You can play with it.
13:42 - Again, awkward interaction.
13:44 - I encourage you to see
what kinds of things
13:47 - you could add to this to make it
feel a little bit more elegant
13:49 - and visualize it
in a different way.
13:52 - But I'm not done yet.
13:53 - I have barely
scratched the surface
13:55 - of what's possible
to do with springs,
13:57 - and in order to get
further with this,
14:01 - I need to expand my thinking
beyond the idea of just
14:05 - there's one anchor, there's
one bob, there's one spring.
14:08 - I should really not even be
distinguishing between the idea
14:11 - of an anchor and a bob.
14:12 - Really, what I want to have
are particles and springs.
14:15 - Let's say I have a bunch
of particles like this,
14:19 - and each one is
connected with a spring.
14:22 - I pull one, it pulls
the other, which
14:24 - pulls the other,
which pulls the other.
14:26 - I can start to create
simulations of soft bodies.
14:29 - I can even make a square,
attach the edges with springs,
14:34 - put some crosshatching
in it with springs,
14:36 - and I've almost got a skeleton
of a squishy, spongy body.
14:40 - Now, ultimately, I
have video tutorials
14:43 - that show a lot more about
how to do this with physics
14:46 - libraries, like toxiclibs, and
you could go explore those.
14:51 - You don't need to code
your own spring forces.
14:54 - But I'm just going
to go with it.
14:55 - What I want to do is create
a particle class, which
15:00 - would represent any
one of these dots,
15:02 - and then a spring class,
which would represent
15:06 - any one of these lines,
and have the spring class
15:09 - be responsible for the
spring force calculation,
15:12 - and see what happens.
15:13 - Now, as much as
I might like just
15:15 - to sit here and type out all
the code for a particle class,
15:18 - I've done this in so
many videos before,
15:21 - and it's outlined in chapter
4 of the Nature of Code.
15:24 - So I'm going to go
over to that example
15:26 - that I have on GitHub, which
has an entire particle class,
15:30 - and I'm going to bring
that into my code.
15:32 - I'll talk through what the
bits and pieces are in there,
15:34 - but rather than type
it all the way through.
15:38 - Going to make a new
file called particle.js,
15:43 - reference it in index.html,
and then paste in that code.
15:48 - Now, there's a few
things that I don't need.
15:50 - For example, I don't need
this idea of lifespan
15:52 - because I'm not going
to have particles
15:54 - that fade away in this example,
though you could conceivably
15:57 - have that.
15:57 - I'm going to get rid
of this Run function
15:59 - because I want to just use
update and display separately.
16:03 - I like to call this
show these days,
16:05 - so I'll change it to show.
16:06 - No real reason.
16:07 - And I also don't need
this IsDead function,
16:09 - because again, the particles
are going to live forever.
16:12 - It's a wonderful place where
particles live forever.
16:16 - So what is this particle?
16:17 - It's an object that has
a position, a velocity,
16:19 - and an acceleration.
16:20 - It happens to have a mass,
although the mass is just 1.
16:23 - It has it apply force function,
which takes any given force,
16:27 - applies it to the
acceleration, and it
16:29 - has an update method,
which once again, I
16:31 - can get rid of this lifespan.
16:33 - Add the acceleration
to the velocity.
16:34 - Add the velocity
to the position.
16:36 - And then it has a show
function which draws it.
16:40 - Going to the sketch,
I want bob and anchor
16:43 - to be particles now, so I want
to say bob is a new particle.
16:48 - Anchor is a new particle.
16:50 - And I'm passing
them the xy position
16:52 - of where they begin, so just
checking the particle system
16:54 - class.
16:55 - I did this in a
slightly different way,
16:57 - so let's give the
constructor arguments xy
16:59 - and say create vector xy.
17:02 - I guess this particle also
is initialized with a random
17:04 - velocity, but I don't want
that, so create vector 00.
17:14 - Now, I should be able to get
rid of velocity from here
17:16 - because velocity is part
of the particle itself.
17:18 - Gravity, you could still
consider part of the world,
17:20 - so that could be a global
variable out in the main sketch
17:23 - area, but I'll worry
about that later.
17:25 - Ultimately, let me
get rid of circle
17:28 - these two calls to circle and
all the fill and the stroke,
17:32 - and I just want to say
bob.show, anchor.show.
17:41 - Get rid of this, and I'll
comment all this out.
17:45 - Great, so there are
the bob and the anchor.
17:47 - Let's move the bob down
a little bit, and also--
17:50 - I mean, this is all
a little bit silly,
17:52 - but I'm going to make
them a little bit bigger.
17:56 - I can get the nice blue color
I had before, and there we go.
18:00 - So what's next?
18:02 - I want to take the
idea of a spring, which
18:05 - is here of the rest length, k.
18:07 - It's the idea of being connected
between the bob and the anchor,
18:10 - and I want to package that
all up into a spring object.
18:13 - For example, ultimately,
velocity shouldn't be here.
18:16 - I just need one more variable.
18:17 - I need to call it spring,
and these would not
18:21 - be separate variables anymore.
18:22 - I would then just say
spring equals a new spring,
18:27 - and maybe it has a
value of k, of 0.1.
18:31 - It has a rest length
of 200, and it connects
18:34 - the bom and the anchor.
18:37 - These are all the pieces of
data that I need for a spring.
18:41 - What is it connected
between, what is k,
18:45 - and what is the rest length?
18:46 - Clearly, I need
another JavaScript file
18:50 - to put my spring class.
18:55 - Let me fill out the
basic skeletal structure
18:57 - of the class.
19:02 - What are the
elements that I need?
19:07 - A value of k, a rest
length, and two particles.
19:12 - These can all be arguments
to the constructor.
19:16 - Then when it's time to update
the spring, what do I do?
19:20 - Hooke's law.
19:21 - This is where that should go.
19:23 - The idea of updating the spring
is calculating the spring force
19:26 - and applying it to
those two particles.
19:28 - So all of this code
that I worked out before
19:31 - can go right in there.
19:35 - Now, I've changed the
name of some things.
19:37 - So the force, I'm
subtracting a from b
19:40 - now inside of this
generic spring class.
19:44 - The rest length is a
property, so I need this dot.
19:48 - And k is a property,
so I need this dot.
19:50 - And then I need to
apply those forces.
19:55 - However, there's a little
bit of an issue here.
19:58 - If the force is being applied
to both particles, the force--
20:02 - if this is the spring,
and I were to extend it,
20:08 - the force for this particle
would point inward,
20:10 - and the force for this
particle would also
20:12 - point inward, pointing
in opposite directions.
20:15 - So let's take out the
negative here, apply it
20:18 - to this particle, then
multiply it by negative 1
20:22 - to reverse its direction and
apply it to the next particle.
20:25 - I might have gotten which
one should be negative wrong.
20:29 - I could think about it
and probably get it right,
20:31 - but I'm just going
to keep going.
20:32 - I also want to draw the spring.
20:35 - I'm going to say
stroke weight 4.
20:43 - So this became a
little bit convoluted.
20:45 - I almost just typed this dot
a dot x, this dot b dot x,
20:49 - but I forgot the actual x value
is inside of a position vector
20:53 - inside of the particle a.
20:54 - So I've got to draw a
line between a's position
20:57 - x, a's position y, b's
position x, b's position y.
21:00 - So let's go back to sketch
and try adding in spring.show.
21:07 - Now we see that line,
and this is very silly,
21:09 - but I want to have
these after that.
21:13 - So now, we see them
connected, and--
21:14 - I don't know.
21:15 - I show play a drum
roll or something.
21:16 - If I just type spring.update, is
that force going to be applied,
21:21 - and it's going to work?
21:23 - I'm going to type it very
slowly with my eyes closed.
21:25 - [DRUM ROLLING PLAYING]
21:28 - There's no chance this works.
21:31 - No, OK, got an error.
21:33 - Good.
21:33 - Well, it wouldn't be
a coding challenge
21:35 - if I didn't get any errors.
21:36 - There's an error as copy
could not be called.
21:39 - v.1.copy is not a function.
21:41 - Spring line 11.
21:43 - All right, let's go
back to spring line 11--
21:46 - oh, look at that.
21:48 - So the mistake that I
didn't make inside of line,
21:52 - I made up in update.
21:54 - I want to subtract b's
position minus a's position,
21:59 - but not the
particles themselves.
22:01 - I need to say a.position
and b.position.
22:09 - Good.
22:11 - I don't know.
22:12 - I don't have any errors, but
I don't see anything moving.
22:15 - Oh, guess what?
22:17 - So I'm applying the spring
force to the particles,
22:23 - but the particles, I'm not
calling the update method.
22:26 - The update method is once
that spring force ends up
22:29 - in the acceleration, in
updates their velocity
22:31 - and updates their
position, so that is
22:33 - something I also need to add--
22:35 - bob.update, anchor.update,
spring.update.
22:43 - Whoa, I think maybe I
had the directions wrong,
22:48 - so most likely, it's
the other way around.
22:51 - If I go back into the
spring, this makes sense.
22:55 - I want to take the one
without the negative 1
22:57 - and apply it to b, and
the one with negative 1
22:59 - and apply it to a.
23:00 - No?
23:01 - Oh, yeah, whoa, this
is kind of interesting.
23:04 - Something is wrong here.
23:06 - Oh, look at this.
23:08 - There's just a literal typo.
23:10 - I said this dot position.
23:12 - I don't know what
it's getting there.
23:16 - There we go.
23:18 - That's what it should
have been all along.
23:20 - And actually, I had
it right in my head,
23:23 - but I should have said b minus
a, and then this would be a,
23:30 - and this would be b.
23:33 - There we go.
23:34 - Now, there's no other
forces in the system.
23:37 - There's no friction or
drag force in the system.
23:41 - So I might here, in
the particles function,
23:44 - if I wanted to, optionally,
I could include that back.
23:50 - And over time, you could
see it would eventually
23:52 - spring to being at rest.
23:54 - Let's add back in
the mouse control.
24:05 - So now, you could see,
as I drag this around,
24:07 - I'm pulling this thing that's
attached to me by a spring,
24:11 - and I can swing it around and
do all sorts of fun physics-y
24:15 - things with it.
24:16 - But I'm still missing those
wonderful possibilities
24:20 - of creating an entirely
interconnected system.
24:23 - So I don't know-- there's just
so many different directions
24:26 - this could go in, and I really
want you to try and experiment
24:30 - on your own.
24:31 - But I'll just give you a
little bit of a starting point.
24:34 - Let's create a line of springs.
24:37 - So first, let me give myself
a lot more vertical space
24:41 - to play with, and
instead of a separate bob
24:45 - and an anchor and a single
spring, let me make two arrays.
24:51 - Then let's space out particles
by an arbitrary number.
24:57 - I'm going to say
50 pixels, and I'm
25:01 - going to create five particles.
25:10 - And instead of showing and
updating each individual one,
25:14 - let me do that in a loop.
25:17 - Great, there's all my particle.
25:19 - Let's space them out
a little bit more.
25:22 - I also want to
make them smaller.
25:27 - And there we go.
25:28 - Now, I need to connect
each one with a spring.
25:32 - How do I do that?
25:33 - Looking at this, I can see
that the second particle should
25:37 - be connected to the first.
25:38 - I mean, they're
index 0, index 1.
25:40 - So index 1 should be connected
to index 0, index 2 to index 1.
25:44 - So as long as I'm not in
this loop in the 0 element,
25:51 - as long as I'm not in
the first particle,
25:53 - then a is particles index i,
and b is particles index i
25:59 - minus 1, the previous one.
26:02 - And so the spring that I
want to have is a new spring.
26:06 - Maybe the rest
length is spacing.
26:09 - What was the order of the
things in the constructor?
26:11 - k, rest length, a, b.
26:15 - I'm going to make a
global variable, k.
26:16 - They obviously could all have
individual k's, but I'm not
26:18 - going to worry about that.
26:20 - k, spacing, particle
a, particle b,
26:23 - then let me add that to
the array of springs.
26:27 - So this is a way of
saying, every particle
26:29 - connect to the previous
one in the array.
26:31 - Then I want to update
and show all the springs.
26:38 - So far, so good.
26:40 - So how do I know if
this is really working?
26:41 - Everything's at rest,
so nothing's moving.
26:44 - Well, what if I
were to say the--
26:47 - I'll consider the tail,
meaning the last one.
26:50 - I'm going to say let tail
equals particles index
26:55 - the length minus 1, which is the
last one, and if the mouse is
26:59 - pressed, set the tail's position
and the tail's velocity.
27:06 - There we go.
27:07 - Look at them, all squishy
squashy with each other.
27:10 - That is awesome.
27:12 - And I can do things
like make the spacing 20
27:17 - and have 20 of them, and I can
start to pull them like this.
27:26 - I could also consider having
an option in the particle
27:30 - class itself to have a
Boolean variable called lock.
27:36 - Basically, if this particle--
27:38 - I'll call it "locked."
27:41 - If this particle is locked--
27:44 - or if it's not locked,
update all the physics.
27:48 - So basically, if a particle
is locked, no physics.
27:52 - It can't move.
27:52 - It can't do anything.
27:53 - Then I could say,
in the main sketch,
27:58 - after I make all the
particles, particles index
28:01 - 0 locked equals true, so that
first particle will always
28:06 - be locked to the top.
28:13 - Now, I've made-- is the
rest length still 200?
28:18 - No.
28:19 - I wonder if I want to make--
28:20 - I'm just curious.
28:21 - This is a very squishy.
28:22 - What if, I guess, maybe if I
increase the actual k value?
28:32 - Yeah, this is more what
I might have imagined.
28:34 - But also, now, I could
add back in some gravity
28:39 - to make it feel like it's
a thing that's hanging,
28:42 - so let's actually add
back in the gravity.
28:44 - Basically, I'm also going to
say p apply force gravity.
28:50 - So take that gravity force that
I created, and you can see,
28:55 - oh, it's pulling them down.
28:57 - So that makes sense.
28:58 - It would always pull
it down slightly.
29:00 - I almost don't want
to see the particles,
29:04 - so I'm going to take out
the showing the particles.
29:09 - So I just have this string,
and I can move it around.
29:14 - Let's give myself a lot
more space to work with.
29:17 - Set it in the middle and go
back to 50, and just have five.
29:25 - And we can see all the kinds
of different behaviors I get.
29:28 - So there's lots of parameters
of this system that
29:30 - could be played with.
29:31 - A place where you might
start is just change the way
29:34 - this is being drawn.
29:35 - Am I drawing the particles?
29:36 - Am I drawing the springs?
29:37 - Which things?
29:38 - How am I drawing them?
29:38 - How am I connecting them?
29:39 - For example, what if I used
begin shape and end shape
29:43 - instead of the positions
of all the particles
29:46 - to connect them with vertices?
29:47 - Let's see.
29:55 - Look at this.
29:55 - It's actually a
closed shape, so it's
29:57 - almost as if I have
this piece of cloth
30:00 - that I'm swinging around.
30:02 - And incidentally, I
could use curve vertex,
30:09 - and now, it's going to look
much more curvy along the side.
30:13 - Now, strangely enough,
it looks like where's
30:15 - the top point and
the bottom point?
30:16 - One of the things about curves--
and this is a bit of an aside
30:19 - here, but curves need an entry
point into the curve defined
30:23 - and an exit point out
of the curve defined.
30:25 - One quick thing that
I could do is just--
30:28 - I mean, I already
have this tail.
30:29 - I could-- well, I'm
just going to do it.
30:31 - I can just say, let's add an
additional vertex for the tail,
30:40 - and then also for the head.
30:45 - So I'm just doubling up on the
first and last point, and now,
30:49 - we can see-- and I
kind of want to--
30:51 - I love this idea of this cloth.
30:53 - But ultimately, let's just see
what happens if I say no fill.
31:00 - We can see this feels much
more like this soft string
31:04 - that I am curling around.
31:06 - So I really hope that you've
enjoyed this long process
31:11 - of starting with just a single
variable, moving to vectors,
31:14 - and then moving to objects.
31:15 - If you create
something from this,
31:17 - please look in the
video's description.
31:19 - There's a link to the
Coding Train website
31:21 - where there is a web
page that you can share
31:24 - a link to your own creation.
31:25 - I think there's a
lot of possibilities
31:26 - here, whether you explore
the way this is visualized,
31:29 - whether you explore
how you are mapping out
31:33 - your whole structure.
31:33 - Can you make like a
little squishy robot
31:35 - character out of a head
and a body and some legs?
31:39 - There's a lot of things
you could do here.
31:41 - Of course, I should
also note that this
31:43 - is a common enough
technique that there
31:45 - are many other physics
libraries that you
31:48 - could use that have particles
and springs built into them.
31:52 - Box2D, Matter.JS,
ToxicLibs, and I do have
31:56 - other videos that cover those.
31:58 - And a lot of them have more
robust and accurate techniques
32:01 - in terms of how the actual
physics is calculated,
32:03 - so I encourage you
to explore those.
32:05 - I'll leave links in
the video's description
32:06 - for you to explore
those, but there
32:08 - is something nice about having
it right here in your code.
32:10 - This will integrate into any
p5.js sketch you already have.
32:13 - If you've been working
through the Nature of Code,
32:15 - and you have sketches with
different forces in them,
32:17 - spring forces will just
add right in seamlessly
32:21 - because this is
set up in the way
32:22 - that all those
examples are set up.
32:24 - So there's a lot of
possibilities here.
32:25 - Thank you so much for
staying all the way
32:27 - to the end of this video,
and I'll see you next time
32:30 - on the Coding Train goodbye.
32:31 - [TOOTING THE TRAIN WHISTLE]
32:33 - [MUSIC PLAYING]