00:00 - Welcome back to another episode
of Coding in the Cabana.
00:03 - I'm going to head
into the cabana.
00:04 - I've got an exciting topic
called the Collatz conjecture
00:07 - that I'm going to do today.
00:08 - And I can't wait to get started.
00:10 - Come on.
00:11 - [MUSIC PLAYING]
00:27 - I'm here in the cabana,
and I'm ready to start
00:29 - coding the Collatz conjecture.
00:32 - The Collatz conjecture
is a conjecture
00:34 - in mathematics related
to a number sequence,
00:36 - and the number sequence
goes like this.
00:38 - Take any number n.
00:40 - If the number is even, set it
equal to itself divided by 2.
00:44 - If the number is odd, set it
equal to itself times 3 plus 1.
00:49 - So why is this conjecture,
why is this sequence
00:52 - interesting,
meaningful, mysterious?
00:54 - Let's start with a number.
00:55 - Let's say I'm going to
start with the number 5.
00:58 - So following this, 5 is odd.
01:00 - Multiply it by 3.
01:01 - 15 Add 1, I get 16.
01:04 - OK.
01:05 - Ah, that's even.
01:06 - Divide it by 2, I get 8.
01:08 - Cool.
01:08 - The scratching on the
chalkboard's bothering me.
01:11 - Now 8.
01:12 - Oh, that's even.
01:13 - Divide it by 2.
01:14 - [MUSIC PLAYING]
01:18 - We're going to get
this looping sequence.
01:20 - Once we get down
to 1, it's always
01:22 - going to go 4, 2,
1, 4, 2, 1, 4, 2, 1.
01:25 - And the conjecture
is, any number
01:28 - that I start with, I
started with 5 here,
01:31 - it's always going
to end up as 1.
01:33 - It might take a very long
time, but it's always
01:36 - going to end up as 1.
01:37 - I should note that n is--
01:38 - in this conjecture
is a positive number.
01:40 - So not a negative
number and not 0.
01:41 - You can see here on
the Wikipedia page,
01:43 - the conjecture stated
with arithmetic notation.
01:47 - You can see some examples here.
01:48 - For n starting at
27 takes 111 steps,
01:52 - and you can graph the value
as it takes those 111 steps.
01:57 - So this idea was
originally suggested on--
02:01 - as a topic suggestion
on August 8, 2016.
02:04 - And there's some
wonderful links here
02:06 - that I'll include in this
video's description for you
02:08 - to look at and see
different code examples
02:10 - and visualizations of it.
02:11 - I'm going to attempt
to do my own here.
02:12 - And what I am looking
and hoping to create
02:15 - is inspired by the
number file video
02:18 - about the Collatz
conjecture, which
02:20 - uses a particular
visualization technique.
02:23 - One way to visualize
it is as a tree.
02:26 - And you can sort of
like think about all
02:28 - the different-- with
any given number,
02:30 - the path that it's
going to take.
02:32 - So 25 becomes 76,
becomes 38, becomes 19.
02:35 - You know, 18, if
you start with 18,
02:37 - it's going to
eventually end up as 22.
02:40 - So if you start with 25, you're
eventually going to reach 22,
02:43 - but you'll also reach 22 if
you start with the number 18.
02:47 - So you can kind of visualize
as this branch, this graph,
02:51 - this tree all converging
eventually every sequence
02:54 - all the way down to one.
02:56 - But I'm here in the
cabana in the sun,
02:58 - with the garden outside,
and I want to see--
03:02 - I'm inspired by this
particular number file
03:05 - video, which creates a
visualization of the Collatz
03:08 - conjecture that looks like this.
03:10 - It's a seaweed or a
plant, it's so organic.
03:13 - Why and how out of this
very mathematical algorithm
03:16 - do we get this
seaweed like pattern?
03:18 - The visualization
that I'm going to try
03:20 - is directly from that
number file video,
03:22 - and the rules for it were
designed by Edmund Harris.
03:24 - A link to the number
file video and more
03:26 - about Edmund Harris's work will
be in this video's description.
03:29 - This is how the
visualization works.
03:31 - If I start with a number, the
next number in the sequence
03:34 - is going to be
either even or odd.
03:36 - If the next number in
the sequence is even,
03:38 - I'm going to go
slightly to the right.
03:39 - If it's odd, I'm
going to go slightly
03:41 - to the left or clockwise
versus counterclockwise.
03:44 - So let's say I start
with the number 10.
03:48 - 10 is an even number,
so it's divided by 2.
03:51 - So I'm going to go
slightly to the left
03:52 - to get to the next number, 5.
03:55 - And then 5 is an odd number,
so it's multiplied by 3,
03:59 - and then I add 1, which gives
me 16, which is an even number.
04:03 - So now I have 16.
04:04 - I'm going to go
slightly to the right.
04:05 - And then 16, I divide by 2.
04:07 - I get 8.
04:07 - That's an even number.
04:08 - I'm going to go
slightly to the right
04:10 - again, and so on and so forth.
04:11 - I'm going to attempt to program
this sequence in processing
04:14 - Java based creative
coding environment.
04:16 - One of the things I
love about processing
04:18 - is there's a library
in processing that
04:21 - allows you to render
out a drawing to a PDF
04:23 - that you could blow
up to large scale
04:25 - and print as a nice poster.
04:26 - So maybe I'll make a nice,
beautiful Collatz conjecture
04:29 - Coding Train poster.
04:31 - First thing I need
is a function that's
04:33 - going to do the number sequence.
04:35 - So let's just call
that collatz, and it'll
04:37 - be a function that will
receive any number.
04:39 - And one way we can
test for even or odd
04:41 - is using the modulo operator.
04:43 - If n modulo 2, meaning the
remainder of n divided by 2,
04:48 - is 0, this is an even number.
04:52 - And then otherwise,
this is an odd number.
04:55 - OK.
04:56 - So what do I do?
04:57 - If it's even, I say,
return n divided by 2.
05:02 - If it's odd, I'm going
to say n times 3 plus 1.
05:07 - So now that I have
this function,
05:09 - let's just test it out.
05:10 - I'm going to use
the console here.
05:12 - I'm going to bring the
console up a little higher.
05:14 - And I'm going to
just say-- let's say
05:16 - we start with the number 5, and
let's say print line collatz
05:23 - 5, right?
05:24 - What should I get?
05:25 - I should get 16, right?
05:26 - 16.
05:27 - There it is, down
there in the corner.
05:29 - OK, that's good.
05:30 - If I start with the
number 10, I should get 5.
05:34 - Now let's think about putting
that into a loop, right?
05:36 - Let's see how long it takes for
the number to get back to 1.
05:41 - This is like a weird scenario
where maybe I might actually
05:43 - need to use a do while loop.
05:45 - [MIMICKING SCREAMING]
05:48 - [BELL RINGS]
05:51 - Here is a do while loop.
05:53 - I really think this might be
the first time in my entire life
05:56 - that I've used a do while loop.
05:58 - Do.
05:59 - The statement I want is
n equals collatz of n,
06:05 - and I want to do this
while n is not equal to 1.
06:09 - I think this is right.
06:10 - And then, let's just print n.
06:13 - So we should see--
06:14 - we should just
see an n come out.
06:18 - 1, perfect.
06:19 - And then here, what we
could do print line n here,
06:23 - and we should see
the full sequence.
06:26 - 5, 16, 8, 4, 2, 1.
06:28 - Perfect.
06:29 - So now we can test the
Collatz conjecture.
06:32 - Let's say n equals 100.
06:34 - We got 1.
06:36 - N equals 1,000.
06:38 - We got to 1.
06:39 - N equals 835291.
06:42 - Oh, I need my book
of random numbers
06:43 - to try to start with
a random number.
06:46 - We got to 1.
06:47 - Cool!
06:48 - The Collatz conjecture
seems to be true based
06:51 - on my simple processing code.
06:54 - Lets, just out of curiosity, see
the number of steps it takes.
06:58 - That equals 0, and then
every time I call the Collatz
07:02 - function, steps goes up by 1.
07:06 - Now, rather than print out the
sequence, let's just print out
07:10 - the number of steps.
07:13 - 175 for that particular number.
07:17 - If I go back to
the Wikipedia page,
07:18 - I can test to see if my
code is performing correctly
07:21 - by picking--
07:22 - let's just say--
let's pick this number
07:24 - that's less than 1
billion, this number,
07:26 - and that takes 986 steps.
07:28 - Don't want the commas,
just an integer.
07:31 - I'm going to run it.
07:35 - Uh oh, it's stuck.
07:37 - I think what might
be going wrong here
07:38 - is there's a limit to the
largest size number you
07:42 - can store in an integer.
07:44 - The largest number in Java
that an integer can store,
07:47 - using 32 bits of memory,
is a little over 2 billion.
07:50 - So I think I've gone
probably way above that.
07:52 - So somewhere in the sequence.
07:54 - Even though I started with
a number around 670 million,
07:57 - I went way above the range
probably of a 32-bit integer.
08:01 - So I think a way
that I could probably
08:02 - fix this is by changing
this to a long.
08:05 - Long is a data type in Java that
also stores numbers, but uses
08:09 - more memory than 32 bits.
08:10 - I believe it's 64 bits.
08:11 - And I'll correct that if
that's wrong, somehow.
08:14 - So I need to change the
function also to return a long
08:18 - and to accept a long.
08:22 - Let's run it again.
08:24 - 986, that's the number of steps.
08:26 - 986 steps.
08:28 - Great.
08:29 - I'm going to do this
visualization with all numbers
08:31 - up to 10,000.
08:32 - So I can go back to using
integers without a problem,
08:34 - because I don't think
I'll get out of the range.
08:37 - Now it's time to try
to add some drawing.
08:39 - I'll use i as my number.
08:42 - I starts at 1, and I want to
go all the way up to 10,000.
08:48 - And I want to create a canvas.
08:51 - I'll just make it 600 by 600,
and set the background to 0.
08:56 - So right now, I'm going
to do all of the code
08:58 - in Setup, because I'm just going
to have the whole thing drawn
09:00 - all at once.
09:02 - But, and maybe
this is a challenge
09:04 - I'm going leave to
you, I would really
09:05 - love to see this pattern
grow, emerge over time.
09:09 - So that animating
it, using the draw
09:10 - loop might be a wonderful--
would be a wonderful thing
09:13 - to try.
09:14 - So just so we know
something's happening,
09:17 - let's put a print
statement at the end
09:19 - to make sure this loop
can actually finish
09:21 - and doesn't get stuck.
09:22 - Finished.
09:23 - So it actually did that
incredibly quickly.
09:25 - Running through the full
Collatz conjecture algorithm
09:28 - for every single number
from 1 to 10,000 happens--
09:32 - a computer can do
that super quickly.
09:33 - Let's see what happens
if I start drawing.
09:35 - So I think an
effective way for me
09:37 - to do this would be used
to translate function.
09:40 - So the translate-- and the
translate and rotate functions.
09:43 - So in processing, the translate
function takes an x and a y
09:47 - and will move the origin
point along a path
09:51 - according to that x and y value.
09:52 - So that x value,
that y value, 0,
09:55 - 0 is translated to
here, potentially.
09:58 - So let's say what I want to
do is start the visualization
10:02 - at the bottom, right here.
10:03 - The first thing
that I would do, I
10:05 - would translate to width divided
by 2, or in this case, 300,
10:11 - and then all the
way to the bottom
10:12 - of the canvas, the window,
which would be height.
10:16 - So let's say, with each
iteration of the Collatz
10:20 - algorithm, I want to move up.
10:23 - So I'm going to say
translate, and let's
10:25 - create a variable
here, like length,
10:27 - which equals let's just say
60 as a kind of arbitrary
10:30 - decision.
10:31 - I want to translate by 0
comma negative length, which
10:36 - would move up like this.
10:40 - But I want to move
slightly to the right
10:42 - or slightly to the
left by some angle.
10:44 - So I could use vector math and
I could figure out, OK, well,
10:48 - if I'm moving 60--
10:49 - a distance of 60 pixels to
the right at 30 degrees,
10:53 - I could use sine and cosine.
10:54 - And I've done this to like
calculate the difference in x
10:57 - and the difference in
y, but this is what
10:59 - the rotate function can do.
11:02 - The rotate function-- like
the translate function
11:04 - moves the origin.
11:05 - It kind of shifts your
view of the entire canvas.
11:08 - The rotate function rotates.
11:10 - So in other words, if I were to
just like tilt this chalkboard
11:13 - and then still draw relative
to where I am straight up,
11:16 - and then tilt it back
down, I've gone that way.
11:19 - So visually, the viewer
is seeing it slightly off
11:23 - to the left,
because I've rotated
11:25 - the orientation of the
window, but I'm still
11:27 - drawing 0 by that same
path, 0 comma negative 60.
11:32 - So in theory, what I
should be able to do,
11:34 - I want to say if n, this
new n, is even, rotate--
11:44 - and let's pick an angle.
11:46 - I don't know what angle was
used in the number file video.
11:48 - I'm going to pick 30 degrees
somewhat arbitrarily.
11:50 - Or that's-- but if
pi is 180 degrees,
11:53 - this would be pi divided by 6.
11:55 - And I should also
make this a variable,
11:58 - so let's call this
angle, and let's say
12:00 - that's pi divided by 6.
12:02 - So we're going to rotate by
the angle in one direction.
12:05 - Otherwise, rotate by the angle
in the negative direction.
12:11 - For every number I'm going to--
12:13 - I want to--
12:14 - I'm about to move
along this path,
12:17 - I want to check if
it's even or odd.
12:19 - So I want to rotate
this way or that way,
12:20 - and then I want to
move in that direction.
12:22 - But I need to draw something.
12:24 - So let's-- before I translate,
let's say, stroke 255,
12:29 - and let's draw a line
from wherever I am 0,
12:32 - 0 to 0 comma negative length.
12:35 - And then I'm going to move
to the end of this line.
12:37 - This is very similar to what I
did in the fractal tree coding
12:40 - challenge.
12:40 - So actually, I think
to test this out--
12:43 - I've got two things
going on here.
12:44 - I've got this like outer loop.
12:46 - I think I want to comment out
the outer loop for a second,
12:50 - and I just want to
test this idea out
12:52 - by starting with
any given number.
12:54 - So let's start with the number
500 and see what happens.
12:57 - OK.
12:59 - This is something
kind of interesting.
13:02 - So now let's try doing
it for all the numbers.
13:06 - And I think, though,
what I have to sort
13:08 - of like figure out here,
which is pretty different,
13:11 - is that I want all of the
numbers to start back at--
13:18 - start at the same place.
13:19 - So if I'm doing this
in a loop, all of these
13:22 - translate and rotate, and when
I come back to the next number,
13:24 - I'm going to be picking
up from where it left off.
13:26 - So one way to deal with
this is actually just
13:29 - call this function reset matrix,
which will reset everything
13:33 - just back to the
original orientation,
13:35 - and then I can put that original
translation right there.
13:39 - N equals i.
13:42 - Uh, this is taking
a very long time.
13:45 - Whoa!
13:47 - [LAUGHS]
13:48 - And I got the
visualization hairball.
13:51 - I think that I've
made a major error.
13:54 - I think the idea is that
we're visualizing everything
13:59 - that converges back to 1.
14:01 - So 1 is the starting point here.
14:04 - So while I'm starting
with the number 100,
14:06 - I'm not starting with 100
and going right or left
14:08 - with the Collatz conjecture.
14:09 - And I know that I
said that incorrectly
14:12 - earlier in the video, so
hopefully you kept watching.
14:17 - Even though I got these kind
of interesting patterns,
14:19 - I want to start with the end
and see how that sequence is.
14:24 - So how am I going to do that?
14:25 - I think I'm going to
need to do two passes.
14:27 - Oh, this is going to be fine.
14:29 - So here's how we're
going to do this.
14:30 - Here's how I'm going to do this.
14:31 - I'm going to create something
called a float list.
14:34 - A float list in processing--
14:37 - and I'm going to
call that sequence--
14:39 - is just a sequence of numbers.
14:41 - And I could just use a plain
array or an array list,
14:43 - but the float list is nice,
because it just works really
14:47 - easily with floating
point numbers,
14:48 - and it's completely realizable.
14:50 - And I can iterate,
I can reverse it.
14:51 - I can do all sorts of things.
14:53 - So I want to create
a float list,
14:55 - and I'm going to take all
of this drawing stuff out.
14:58 - Let's just put it down here.
14:59 - Comment it.
15:02 - So now I'm going to
take that float list,
15:04 - and every single value
of n, I'm going to say,
15:08 - sequence.append n.
15:11 - I think I should also
add 1 to it at the end.
15:15 - Oh, you know what,
this is so silly.
15:16 - This shouldn't be a float
list, it should be an int list.
15:19 - It's just numbers.
15:20 - I don't know what
I said float list.
15:21 - It's just integers,
so it can only
15:23 - be integers in the
C Collatz sequence.
15:25 - Now I can visualize the list.
15:30 - I want to visualize
the list with the end--
15:33 - from the end all the
way up to the beginning.
15:35 - Sequence.reverse, and now
I just want to-- and then
15:40 - iterate through the entire list.
15:42 - Int j equals 0.
15:45 - J is less than sequence.size.
15:50 - J plus plus.
15:52 - And then I can
say int n equals--
15:56 - I'm going to have a problem
here, because I used n up here.
15:58 - Let's just say value
equals sequence.
16:01 - I might want to rethink
some of my naming stuff,
16:03 - but sequence.get j, OK?
16:08 - And then now this is where
all this stuff comes in.
16:10 - So what I'm going
to do here first,
16:13 - right, I'm about to iterate
over it is I want the parameters
16:17 - and I want to start
from the bottom.
16:19 - So length and angle,
start from the bottom.
16:24 - Then I need this, exactly the
same stuff, based on the value.
16:32 - I'm going to rotate one
direction or another based
16:35 - on whether it's
even or odd, but I'm
16:37 - doing that according to value.
16:40 - Let's see what happens now.
16:41 - Ooh, I'm excited!
16:45 - Let me try this once again
with just one number.
16:57 - That seems right.
16:57 - So I'm just going to try
different numbers to sort
16:59 - of get the feeling of it.
17:01 - Let's try-- let's
try pi divided by 12.
17:05 - So I'm going to have that.
17:06 - Yeah, this is-- I
think it's probably
17:09 - like a very small amount.
17:10 - So we can see that's what's
happening with the number 100.
17:15 - I also might want to think
about like which way am I going.
17:18 - That could-- it's kind of going
to orient this whole pattern.
17:21 - And maybe actually I'm
starting in a direction
17:26 - that's not straight.
17:27 - But all that aside, I think
I'm ready to now just see
17:32 - what happens with all of the
numbers from 1 to 10,000.
17:37 - Drum roll please.
17:41 - [LAUGHS]
17:45 - Is my path just way too long?
17:48 - I took a little break.
17:49 - One camera died.
17:50 - One memory card filled up.
17:52 - I'm still sort of figuring
out this video stuff.
17:54 - I also took a moment to ping
the Slack channel for a Coding
17:57 - Train members and
patrons, in case
17:59 - you want to join, and ask if
anybody had done this before
18:03 - and what I might be missing.
18:05 - And one-- and something
that I'm missing here
18:08 - is actually suggested in a
different number file video
18:11 - about the Collatz conjecture.
18:13 - Any time I apply the
algorithm for when
18:17 - I have an odd number, 3n
plus 1, that is always going
18:23 - to result in an even number.
18:25 - So what's the next step?
18:26 - Divide by 2.
18:27 - So I could actually, in the
Collatz conjecture code,
18:30 - sort of speed up the
process of getting to 1.
18:33 - It's not going to compute
the exact number of steps,
18:35 - but it could speed
up the process
18:36 - of getting to 1 by just
taking this down here-- oops,
18:40 - by just taking this down here.
18:41 - And by the way, I changed
the font size also here.
18:44 - Hopefully this will--
18:44 - I don't know why had
it so big before.
18:47 - I could just take this, n times
3 plus 1, and divide that by 2.
18:51 - I'm still going to
get the same sequence.
18:53 - Now, if I run this
with my visualization,
18:57 - I can get something that's
quite a bit more controlled
18:59 - and, in a way more, closer to
what the result in that number
19:03 - file video is.
19:05 - So I think there's a bit
more that I can do with this.
19:07 - Number one is let me
instead of moving up,
19:09 - let me give myself
more space to work with
19:11 - and move in a
horizontal direction.
19:15 - So I'm actually going to start
at 0, height divided by 2,
19:22 - and I'm always going to
translate along the x-axis.
19:26 - So translate by length
comma 0, and draw the line
19:31 - to length comma 0.
19:35 - This means I'm always
going to be moving across,
19:39 - starting from here across.
19:41 - The other thing that
I could do is then
19:42 - I'll give myself much
more space to work
19:44 - with by having the size
of the window be 1,200.
19:48 - And like I can
even move further.
19:51 - I can move like 10 pixels per--
19:55 - look at this.
19:56 - Interesting.
19:58 - The other thing about what's
going on here is all--
20:00 - since everything converges
to 1, ultimately, there's
20:03 - a lot of repeating patterns.
20:05 - So I think this could have
a more organic like feel
20:08 - if I start to give
the line some alpha so
20:11 - that the repeating patterns
become much brighter, and as it
20:15 - branches out, it
sort of fades away.
20:17 - So let me just give
everything an alpha of 50.
20:20 - What happens if I make that
angle really, really small?
20:23 - And maybe I should
stop dividing by pi
20:26 - and just do something
like 0.0, 0.02.
20:30 - Think this is starting to look
a little bit more similar.
20:35 - Obviously, mine is
doing some more stuff.
20:36 - Maybe it's going further or
maybe the length is changing.
20:39 - I don't know what I'm missing
to get this exact drawing,
20:43 - but I'm pretty darn close.
20:45 - Just take a minute
to ponder the fact
20:48 - that this very formal,
mathematical, highly
20:54 - repetitious pattern
can somehow be turned
20:57 - into this feeling of
seaweed, of growth,
21:02 - of organic nature
like the plants that
21:04 - are right outside this window.
21:06 - What kind of beauty can you
make out of this algorithm?
21:09 - I would love to see.
21:10 - Let me show you one
more thing very quickly.
21:12 - Let me have this
rendered to a PDF
21:14 - so I can blow it up and
make it a very big poster
21:16 - if I wanted to.
21:17 - Let me show you how to do that.
21:18 - So I'm here on the
PDF export page,
21:20 - on the processing website,
and there's a bunch
21:22 - of different ways to do it.
21:23 - This is actually what I want
to do here, single frame--
21:26 - actually, I want to
see it on screen.
21:28 - So let me do it this way, single
frame with screen display.
21:31 - So this is a nice case where
I want to render the PDF,
21:33 - but I also want to
see it in the window.
21:35 - But I don't have an
animation, I'm not layering,
21:37 - so this way makes it
quite simple to do.
21:39 - I just want to import
the processing library--
21:41 - the PDF library that is.
21:44 - Then I just need to
call begin record,
21:47 - right here at the
beginning of setup.
21:50 - Begin record collatz.pdf.
21:53 - I'm going to do all this drawing
stuff, which is what I'm doing.
21:56 - And then at the very end,
I'm going to call and record.
21:58 - That was really
easy to add that.
22:00 - Hopefully this is going
to work when we run it.
22:02 - Might take a much,
much longer now.
22:07 - Didn't take that much longer.
22:10 - I can open it up.
22:11 - It's taking a while
for it to load,
22:13 - but what's nice about
this it's vector graphics.
22:16 - So you can see my machine
and the Mac preview app
22:19 - is having taken a
while to render,
22:21 - but I can blow this
up very, very large
22:24 - and it won't be pixelated.
22:25 - So make a version of this.
22:27 - Make a PDF vector
file of it, print it.
22:31 - I'm going to hang
one of these up back
22:33 - here in my office somewhere,
in the studio at NYU,
22:36 - or here in the cabana.
22:37 - Who knows?
22:38 - Thank you for watching this
second episode of Coding
22:41 - in the Cabana.
22:43 - I'm going to go
water the plants.
22:45 - [MUSIC PLAYING]
22:51 - Hey.
22:51 - Thanks so much for
spending your time with me.
22:54 - And I hope to see you next
time on Coding in the Cabana.
22:56 - Bye.
22:57 - [MUSIC PLAYING]