everyone welcome to part 2 of the egg hatching system in this video we're going to be working on the inventory as well as how to make your pet appear next to your character so first things first we need to set up this inventory and the way it's going to work is in your player objects when you join the game there will be a folder inserted into your player and if you go into the players and your player just like leader stats will have another folder and we're going to call this folder pet inventory whenever you buy a pets and it's then going to go in your inventory we will store it as a value we'll store its name as a value in that folder which we're going to create and then what we can do is we can use that folder to just keep all of our pets that we have in there and that way we can we can show them all in a GUI we can then save them later on in a data store which will probably cover it in the third episode and it's just the best way to do it so if we just stop the game here and we go into our script here I'm actually gonna call this the main scripts and what we need to do need to create those two folders Oh actually we're gonna create a folder for the pet inventory I'm also going to have another value and that value is going to be for the pet that's equipped so when you equip a pet we're gonna store that in a value so we know which pet you have got equipped so to do that very simple we're going to create a variable for the pet inventory so local inventory equals instance dot new and we're going to insert a folder okay now this inventory we're just gonna call it pets inner industry and it's going to go in the player just like that and for I equipped pet we can say local equipped pet equals instance new and because we're going to be storing the name of the equipped pet we're gonna have a string value so a string value just holds some text and in this case it will be the name of the pet anyway let's name this value equipped pet and we'll put it inside the player as well so now we've set those two things up the folder and the equipped pets will be able to then put pets inside the folder so we'll have a more string values just like the equip to pet but they will go inside the pet inventory so I'll give you an example if we had a larva Lord pet then it would look like this the name would be a string value the name of the pet would be in this string value and it would be inside the pet inventory and so if we have lots of different pets say we have a monkey or we had a B then we just need to look inside this folder and we'd see all of the pet names of the pets that we own so every time we buy a pet we'll insert a value into this folder and every time we load our data store which has the saved these saved names will load the values so this pet inventory is going to be where each player's pets that they own are stored not the objects though just their name so it's a reference to the pet so that we can load the pet out of replicated storage okay next we need to create the GUI so it's gonna be very simple I'm gonna insert a screen GUI I'm gonna call it inventory then inside of there we're gonna have a mainframe now I'm gonna set the background color in fact before we do that I'm going to go to plugins UI design and click around if I you don't have to do this I'm just doing it for the design to make it look nicer and that converts it into an image so it has a nice rounded corners then I'm gonna go and set the image code 3 to be a nice light blue now what we've done that I need to change this size because right now it is calculated in pixels and that's not very good if you have different screen sizes because 100 pixels is different on different devices based on the resolution so we need to change it to a scale based size which will change with the size of the screen so I'm going to set it to take up 50% of the xaxis so to do that I just set the scale value on the X so the first value to be no point five and the second value will be zero because we need to deal with the pixels then on the y axis I want it to take up threequarters of the screen so I'm going to say north point seven five comma zero and again no a fourth value because that's offset and we don't want to deal with offset now when you've done that I'm going to set the anchor point to be naught point 5 comma naught point 5 this means that when we set the position which we're about to do it's going to set it in the middle because currently is being set in the topleft corner so whatever you set the position value to be is where this anchor point in the top left corner is going to be positioned if you want it to be in the true middle of the screen you have to set it in the middle so if I do that you can see it has moved because 0 0 0 0 is the top left of the screen and that's where the anchor point now is so we can set this to naught point 5 comma 0 comma naught point 5 comma 0 to put it in the middle of the screen 50% of the way on the y and x axes now that we've done that I'm going to insert a nice little title and in fact I'm going to change this frame a bit to be called pets now in here as I said the title we're going to insert a text label and what I'll do is I'll set text scalar to be true so it makes it the text bigger and I'm going to change the text to say inventory now I can change the font if I would like let's go with saw Sam's bold and I'm going to set the text color 3 to be white now we can't see it anymore but that's ok because we're about to make it transparent so set the background transparency to be 1 now I just need to set the size so it could it covers the entire of the xaxis for the frame so to do that I just set the scale on the X to be 1 comma 0 because we don't need the offset and if we just oops 1 comma 0 and then for the y axis I want it make up about 10% of the yaxis so about 10% of this length which will be about here so I'm going to set it to naught point 1 2 5 comma 0 let's see how that looks perfect so I don't need to change the position because it's already at the top of the screen now why do know is that because I've taken I've used up naught point 1 to 5 or 12.5 percent of the screen of off the frames size and don't forget it's out of 1 the the the size left to be used is going to be 1 minus naught point 1 to 5 now if you were to calculate that one naught point 125 miles not point 1 to be fine you would get north 0.875 so that's going to be the size for our frame so insert a scrolling frame this scrolling frame is going to allow us to scroll through the different pets so we want it to cover the whole of the x axis only so we're going to set that to 1 comma 0 for the X for the y however we know that there's naught point 8 7 5 amount of scale were left on this honest on the frame so we can set the scale on the Y to naught point 8 7 5 comma 0 and now we have a little gap at the bottom all we need to do now is set the white scale position sorry the position value of the X its scale property will be no point one two five sorry only why not on the X not put one two five okay because that's the size of this text label so now our GUI is ready to go I'm going to set the background transparency to be one and the last thing we need to do is insert a UI grid layout to do that you just insert UI grid layout like this and what that will do is when you add pets into this frame they will be ordered into a grid so you don't have to worry about positioning them roblox does it for you so how cool is that all right final thing now we just need to insert a little button so we can open and close the GUI so click on the inventory then click on the plus click on text button and I'm going to change this to just be called button whoops button and then I'm going to click on the plus click on local scripts and inside of here we just need to write some simple code and all we need to do is it's so easy I'm going to just skip to what I've done it ok so script up peridot mouse button 1 click connect function so when you click on the button we're going to set its visible property to be the opposite of what it currently is so script parent parent is the inventory wait for child pets is this image label here got visible that's the visibility property we're going to set it to the opposite of what it currently is so when you say not it's just it gives you the inverse of this so if this was true then this would be false now what we need to do is just test it out and make it look good as well so I'm going to again use the round if I plugin on this one you don't have to it's totally optional but I just like using it if you don't see the text anymore just make sure that the zindex of your button is bigger than the zindex of the image label that it's put inside the button so I'm gonna set this to 2 then text scaled is going to be true and I'm gonna set the gonna go into the image label and I'm gonna set the image color 3 gonna click pick screen color and let's select the color of the inventory that will just give us the same color then on the button and I set the text color 3 to be white I'm going to set the text stroke transparency to be not 0.5 I'm gonna set the text to say inventory then you can change the font if you'd like I'm going to leave it as it is now okay we'll go saw Suns bold again and then to position it all you need to do is well we're gonna change the size from offset to be scale so let's try not point one two comma zero naught point naught 5 comma zero that usually works for me there we go that gives us a nice button size and to position it all we need to do is set the position if you want it to be a little tiny bit away from the edge on the xaxis you can set it to a naught point naught naught 5 or something like that comma zero comma and then for the Y to put it in the middle naught point 5 comma zero you can see there's naught point naught naught 5 on the X has just edged it away from the side of the screen and finally now we're going to set the anchor point to be 0 because we don't need an anchor point on the xaxis common or point 5 that just puts it in the true middle of the screen on the yaxis the reason we don't have it for the xaxis is because it's only a short amount away from the side of the screen and we don't want it to drift away any further so that's doesn't matter okay now we set our GUI up and we're ready to go now what I'm going to do is I'm going to take my local scripts that we created in the last video and I'm going to drag this and keep it inside of my inventory I'm gonna change the name of it as well to be GUI client just so that we can know what all of our scripts do I'll change this one as well to be inventory button okay now we need to create a template for our pets and that's going to be an image button and it will be able to display the pet in the GUI and will also have its name and also it will be clickable so when we click the template we'll be able to equip our pets so let's go and create that now so I'm going to insert into the scrolling frame a image button and I'm going to call this template in the properties window and inside of there I'm going to insert a viewport frame the viewport frame is going to be used to display the pets because you can display roblox objects in a 3d world inside the viewport frame and I'm going to set the size of that so it covers the whole of the image button so it's gonna be 1 comma 0 1 comma Z comma 1 comma 0 so it's 1 on the x and y scale so that just covers the entire image button we're then just going to insert a text label inside of here and this is gonna be the pet name so we'll call this pet name and we need to change the size of this as well so because we want it to take up the entirety of the templates xaxis we'll do 1 comma 0 for the X and then for the Y we only want it to take up around 20% of the Y value of the y scale so naught point 2 comma 0 and there we go it's just made the text label text label fit the button with then going to set the position so it's at the bottom of the template so we can say zero comma zero comma zero square sorry comma 1 comma zero like this so the third number is going to be 1 so it covers it so it's the bottom of the Y like that and we can just set the anchor point to be 0 comma 1 so the position is set from the bottom of the text label so that it doesn't go outside of the image button it's still within the square of this template now last thing we need to do is we're going to need to show on the screen whether this is equipped or not so I'm gonna insert another text label and same thing again really we're just going to set the size of this to be what I'm going to do naught point eight because I only want it to take up 80% of the templates X size instead of spanning the whole width so naught point 8 80% of the x width comma 0 and then for the y we'll do 20% again so common naught point 2 comma 0 just like that and now we need to put it in the middle of the x axis so we can say naught point 5 comma 0 comma 0 comma 0 now in the middle we need to change the anchor point again so because we want it to be taking the exposition from the middle we need to change the first anchor point the ex anchor point to not point five just like that now I'm going to set the background transparency to one and I'm also going to do that for the pet name so that's a one let's name the other text label though I'm going to name it equipped and if you want you can spice up a little bit by changing the fonts I'm gonna change them to Gotham bold and that you can change the text if you really want but it doesn't really matter what I am going to do though is I'm going to set the border size pixel to three and I'm also going to change the border mode to inset on the template this means that I'll have a nice border surrounding it and it won't get cut off by the scrolling frame because we're using the insert method you can play around with your image label make it look however you want it to look mine looks fine now I'm happy with mine so all I'm going to change the background transparency of the you can change the background transparent of the viewport as well if you want if you don't want a white background you can change the color so yeah you can customize it however you want but you need to make sure you've got your template with viewport frame pet name and the equipt in there okay so when you film that I'm just going to duplicate a couple just to show you you can see our UI grid layout is ordering them in a nice grid like this so you can delete all but one and I'm just going to put this template into the GUI client local scripts because you don't need it for now and we can just store it in the local scripts and when we need to add a new pad we can clone out of that and update the text and everything right so now we can begin scripting it okay so we're going to firstly begin coding by creating a function which is going to add that template into our scrolling frame when we need to call it so just at the top of the script here I'm going to create a local function it's local to this script and we're going to call it ad to frame like this okay now inside of here we're gonna create a new template we're going to clone the template inside the local script so local new templates equals and we need to create a variable for our template wishing we can just say script cut on wait for child template so now we can just say template curl on clone then we can give it a name new templates dot name ah but how do we know the name of the pet which we're going to want to insert let's pass that to our function as an argument so when we do call a function we can tell the name of the pet because remember when we hatched an egg we're being sent the pet so we can just easily get its name and call this function so we'll send the object pet so we can do all sorts of things with it so new template dot name equals pet name and we want to then set the pet name text label inside of it because remember we just created that new template pet name dot text equals pet's name and we'll put it inside that scrolling frame so new template dot parent equals let's create variable for the scrolling frame local scrolling frame equals templates sorry not templates yes scripts dot parent wait for child pets wait for child scrolling frame okay so put that inside the scrolling frame and then what we can do is insert the whole a camera and pet for our viewport frame so if you don't know what a viewport frame is it renders roadblocks objects in in a GUI and you have to put those objects inside the viewport frame and also have a camera object so it knows where to look at so local camera equals instance new camera and then camera dot see frame we're setting the seat frame in the camera so telling it where to you look in order to view the pets and let's think about this yeah this will work because what we've got to do is we've got to position it to be looking at the pet what orders will plone the pet in fur so we'll do local new pets equals pet clone we can then set the pets parents new pet parents to be the viewport frame so new template dot viewport frame and then we can position the camera to be looking at that pet so camera dot C frame equals new pet so C frame new so when we give two bits of data to the C framed on you the position where the cameras going to be and what it looks at so we want it to be positioned just in front of the pets so we can say pets dot all new pets even new pet primary part dot position and then we can do plus new pets dot primary parts dot C frame dot look the vector x three okay so what this is doing is getting the current position of the pet and then we are getting its forwardfacing direction and we are moving three studs away from it so if the pet is here we are positioning the camera if you imagine the camera is the blue or greenish square we would be moving it three studs away from the forwardfacing direction so the forward facing direction is here so we're going to move the camera we've currently positioned the camera here but we need to add on those three studs so one two three and now the camera is you know it's away from the pet so we it will be able to actually see it but what we need to do now is tell the script which direction the camera should be looking at because it could be looking this way that way we needed to look directly at the camera so to do this we just need to give it this the position of the pets and it will work out the direction it needs to look at so to do that we can just say pet dot primary part dot position or new pet doctor primary part dot position there we go so that will position the camera to be looking at the pet and the pet of course is in our viewport frame so anything that's in the viewport frame if the camera is looking at it it will get rendered so camera adopted parents we need to put that inside the viewport frame as well so new template viewport frame and we need to set the viewport frames current camera property so new templates got viewport frame whoops viewport frame dot current camera equals camera just like that so that will make the pet appear in the viewport frame okay so let's go and test this out I'm just going to call the function and in fact I'm going to add a quick yeah I'm going to go to the bottom of the script I'm going to do a weight 5 and then we're gonna say add to frame and we're gonna pass game don't replicate the storage dot pets and then monkey ok just in it as an example and let's see if this will display it in the GUI ok here we go wait 5 seconds and there we go so the monkey is now in the inventory GUI and we can see it because the viewport frame has rendered it only thing is that it doesn't display whether it is equipped or not yet that's because we obviously haven't coded it we will be doing that soon however so I'm gonna go back to my DUI client I'm gonna delete those two lines of code that we just added because we don't need them and it will cause a few issues if we keep that in there because it's a pet that we don't actually own what we do want to do though is we want to call this function when you hatch the egg so at the just after our on client event just inside this on client event just before we change the camera type we can say add to frame and we can put the pet in there because the pet is going to be the one that is sent from the server when we click the dispenser it's going to be the random pet which was selected and then we can just add it to the frame because we now own it and that will add the frame to our inventory once again let's go and try it out so I'll just close my inventory will all the way over here okay here we are click on the dispenser it's gonna hatch itself I'm also going to be it is a TV so if we check our inventory we now have the TV okay so very cool let's move on okay so let's park the local script coding for a little bit because I know you want to get to the good stuff you want to know how can I make this pet follow my character and it's a good question and that's what we're going to be scripting now and it involves using something called a line position and a line orientation and those two objects allow a parts to keep on moving and keep on following a certain point and to be attached to that point and what we can do we can set up two attachments and if you imagine your roblox character is this badly drawn version here we can set up an attachment and an attachment is basically a point that just moves through the character so it could be here right and we could also have our pet and the pet will have an attachment in it so if this was our pet the pet would have an attachment and we would create an unlined position and a line orientation which would which would take the two attachments and it would basically put them in the same position so you would tell the align position and the align orientation to move the pets attachment to always be in the same position as the characters one and as the character moves your attachment moves and so does the pet because the align orientation and the line position is telling the pet and is making the pet stay and and go wherever your character and your attachment goes so let's go ahead and create that now so in our main script in the server script service we're going to create a function this function local function we're going to call it a quick pet like this okay now we're gonna need two arguments we need to know the player who is calling the function who we need to equip the pet for so player and also the pet object so pet now we will supply these when we call a function and we'll have to know which player and which pet you know we don't already know the player or the pattern this is just like a placeholder so in this function what we need to do is we need to get the player's character so local character equals player dot character this is their model in the workspace with all their body parts so if the pet is not nil and the character also isn't new so when we say nil it means not that so if the character and the pets are there and they haven't been deleted for some reason something weird happen then we work we know we're going to be able to equip the pet for them because everything we need is there so let's firstly just check to see if they have a pet because when we do create this pet we will name it their name and then pets so in fact what we'll do is we'll say pet don't name so I'm so the way it's gonna work is we'll know the pet that they're going to equip and it's going to be the already cloned out for us and ready to go so we're gonna set this net is name this patent to be player name dot dot and then in a string we can say an apostrophe and an S patent so might be album blocks is pet or shedletsky is pet and this way the reason we're naming it is because if they already have a pet equipped we need to check to see if they have one in their character and we can just use this name because we know that this will be the identifier of their pet so if they had a TV or a monkey yes they're different pets but when they're in the character that they'll have the same name so we can just check to see if they already have a pet equipped by saying if character curl fine first child player dot or player name dot this is pets then character and then in square brackets you put player name dot and then pet in a string like that you can call and destroy on it and basically get rid of the old pet in from the character so once you've done that we're just setting the name of the new pet and we need to put that pet inside of their character so pets lock parents equals character but that's going to be the last thing we do because we want to make sure all of its properties are already set and it needs to be in position and aligned because if we parent it first it could just fall out of the of position and and possibly fall out of the map because we haven't constrained it yet to be attached to to someone's character anyway we need to set the pets primary Part C frame so sets primary part C frame this is just positioning it in place so it's going to be character humanoid root part dot C frame this is so the reason we're doing this is you might be wondering while we're about to use in a long position and align orientation to constrain it to the players character the reason we're doing this is because if you set up the align position the align orientation if it was quite far away it would have to travel all the way to our character so if we just position it to be by the character it will slowly move into position and you'll see that very soon so we've just positioned it the pet to be nearby the character now let's actually set up those aligned positions and orientations so that it constantly moves with the player so firstly let's get the size of the model so we'll set as a variable model size equals pets dot primary parts dot size now let's create the attachments remember the attachments are just they used to specify a position where you want something to go and this attachment will be relative to the player's character and it will move with a place character so local attachment character equals instance new attachments attachment character dot visible equals false make it invisible we don't need to see it and then we need to position it to be just away from the player's character so attachment character dot position equals back to three new and this is a relative think of this as being relative to where it's going to be right so I'll give you an example if it is parented to the humanoid root part attachment character dot parents equals character dot humanoid roots parts if this is parented to the humanoid root part then it is going to be relative to that so this vector three is just the number of studs away from the humanoid root part on each axis so I want it to be one away on the xaxis so it's not directly touching your torso and one stood above so it's just near you nearer to your head and it's as if it's floating we don't need to position it away on these Zed axis because it's already in line with our character and then we'll do atom model size here's if your model you're on your model to be touching your character will be interfering with your character if you just add on the model size it will position in it further away so depending on the size of the hitbox if it's too far away maybe reduce the size that hitbox or reduce this vector3 value here but this will position it just to be away from your your character okay let's do the same for the pets so local attachment pet equals incidence new attachment just inserting a new one into the game attachment pet dot visible equals false and we don't need to position it because it's when we parent it to the pets like this it will just be in the middle the attachment will be in the middle we don't need to do any positioning because we needed to position the previous one because we're telling it where the where to attach the pet to whereas we just know that the pet will be following the character attachment so it will be linked up the two attachments will kind of be stuck together in the same position so as long as the knee attachment for the pet is in the middle that's fine right now we can get to the good stuff we can insert an align position so this will basically align the two attachments if you had for example the the pet one over here and then you know you have the character one the we want like the pet one out here to always keep moving towards the characters one and and ideally you want them to be stuck together in the same place so if that was you know this is the character that's the character attachment you want the pets to be in the same place so local align and that's what the align position will do a line position it was instance dot new a line position so you have to give it a maximum amount of force to use when moving the pet towards the character so I only set that's 25,000 I've done a bit of testing that works out that 25,000 is that is an optimum value then we need to set the two attachments so it knows which attachments are going to be you know used and which one should be moving towards the other one so a line position doctor attachment zero that's going to be the pets okay and it's going to be the pet that is moving towards the character and we don't want the character to move moving towards the pet so a line position to attachment one is going to be attachment of character and then we need to set the responsiveness the responsiveness is the degree of how quick it is to respond to new movement so if you move your character how quickly should the pets respond and like as if wake up and start moving with you if you're if you're stood still again twenty five optimum value and then the last thing to do is parent it to the pets because this is going to be inside the pet right so if you were to test this out the pet would start moving with you but it would be a problem it would it wouldn't be rotated correctly and it would probably be spinning round and round and around now if you want to test it out I guess we could go and do that let's just add a wait five seconds at the bottom of the scripts sorry no will do a wait five seconds inside the player added and then we can say equip pets and we can give the player and game don't replicate this storage dot pets but monkey code on clone because we need to make a clone of the pet right let's click on play and hopefully this will work obviously we haven't tested it yet but after the five seconds okay cool we have an error so that's that's okay we can see what caused that on line 22 function equip attachments must be parented to apart instance oh my bad it needs to be parented to the primary part because with we're trying to parent it to the model so it needs to when you're doing an attachment it needs to go in the primary part so it will go in the hitbox it's just that we parented it to the model my bad okay let's try again then and here we go so you can see it's now the position is being aligned you know it's moving in the right place but it's the orientation is is not aligned so it's not constraining its orientation or its rotation so it's just letting it freely move around in the air but let me show you this it's called album blocks as pet and if we look in the hitbox we have an attachment in the past we have an attachment you can you see that little green dot well we've also got an attachment in our player somewhere I think it's in the humanoid root part here oh here it is attachment you can see they're in the same place so the attachment of the pet is is always going to be in the same position as the humanoid root part one and who nod root part one is is moving with our player all the time because it's moving when the humanoid root part moves and it is offset it relative to that the position of the united root part so whenever we move the attachments are moving and the pet is moving with us because the aligning position is forcing the pets to to move in to move so it's always so that this attachment here is always in the same position as the other attachment which means that the pet will be moving with us we just need to now set up the align orientation so it so it sets the rotation automatically so again this is quite simple quite similar to the align position local align orientation equals instance new online orientation make sure you get the spelling right and then again we set the max force I'm setting mine to 25,000 again just you can play around with it if you like you have to use the same values as mine but these are the optimal values that I've figured out and then a lion orientation dot attachment sorry it's not max force it's not max force it's max talk and that is the it's the amount of rotation so how how much it will rotate and the amount of like force it puts into that rotation so so attachments zero is going to be the attachment pet an attachment sorry a line orientation dot attachment 1 equals attachment character and then a line orientation dot responsiveness again how quickly it check it responds to a change in position 25 and lastly alone orientation dot parent equals pet and now this should make its rotated properly it should just keep it in one rotation there we go so the pet is always gonna be facing us and moving with our character awesome now here's what it looks like if you reset the attachment is there an attachment when you swap them around you could see that I was actually being pulled towards the the pet so that's why it's just good to keep it as I did and that is because by default the force is applied to attachment 0 so the thing that you want the force to be applied to in this case the pet to move it towards the character will be attachment 0 now since we know that this works I'm going to delete the two lines in the player added script because we don't want that and we also you know we don't know the pet that you want to equip yet we'll be doing that later on so the way this is going to work we've got our function done to equip the pet so this equipped pets string value whenever this changes its value changes currently it's got no value but the equipped pet will change its value when we click on a pet to equip when we click on one of the templates it's going to change the equipped pet value what we're going to do is we're going to set up an event so that's when at this value changes we fire dysfunction to equip the new equipped pets and also when the players character is added so when it's first added to the game but also when they reset and the reason we are going to have these two events is because the character added event we could begin late and it might not so your character might have loaded before you're equipped pets data has been loaded so you need that second event to detect when the equipped pets value changes and when it does change when the date has been loaded and it's been loaded it's really the value of the equipped pet changes to the latest saved data then that second event will be like a fallback option so the players pet always gets loaded so we can say let's firstly do the character added one so when the new character spawns into the game and the character is the player's model in the workspace so either when they first join or when they respawn so player character added Connect function and then we are given an argument for the character I'm just going to call it car like this CH AR and what we can do is we can check to see if there is a pet in replicated storage with the name being the value of the equipped pets string value so if the equipped pet has a value for example it could be monkey then we'd look up its value in replicated storage in the pets folder so if game got replicated storage waits for child and then there would put pets and we say cutoff fine first child equipped pets value so if there is a pet with the in Inlet folder from our equipped pet value then we can equip it so we can call the equip pet function and we need to provide the player who is going to equip the pet so we already know that because it's the player that will join the game and we also then need to make of the pet so let's just copy this line just excluding the if and then and we do a comma and we paste it in as our second parameter we just need to add clone so we're making a clone of this pet now just make sure you have the right amount of brackets or parentheses on the end so we've got one here at one opening bracket here and another one here as well so make sure you've got two closing brackets on the end one for the clone to close that off and the second one to close off the whole equip pet function so that is going to call the equip that function to equip your pet when you either respawn or join the game but you could join the game and you're equipped pet won't might not have loaded yet because the data store now we will be coding data store in the next video so you'll learn more about why we need to have this but also if you change your pet if you're playing the game and you decide to equip a different pet we're gonna just update this a quick pet value so we can check to see when the value of this string value called a quick pet changes and when it does change to a new pet we can call a quick pet again so to do that we use a changed event so equipped but not changed colon connects function so when a property of the string value changes so the property that's going to change is going to be the value so when it's value changes it will run when any property changes but we know that the only property that we're going to change is going to be the value of it because it's going to store the the name of our equipment Pet will say if equipped pets value is not nil then we want to check again to see if it is a pet in replicated storage we can just copy this code and put it in there just like this so we've got that second if statement checking to see if there is a pet in replicated storage with the with the name from the value of the equipped pet and if there is and we can call a quit pet again and another problem that we just have is that as we equip more and more pets we're going to have lots of attachments being added to the player so what we can do is we can just give them a name let's give each attachment a names of attachment character dot name equals attachment character and attachment pets the pet the attachment pet doesn't matter who's going to be deleted we already delete that but anything in the character let's have a look so the align position and a line orientation are going to be okay because they're just going to get deleted because they're inside the pet and we destroy old pets but the attachment character is going to need to be deleted so we can just say if the character dot humanoid root parts curl on fine first child attachment character capital C although if you've named it something different then if you use your own name code on destroy oh sorry then and then you just copy it again and we can say destroy on the end of it there I should really put this onto three lines let's do that so it's just going to remove that attachment if you had a pet already equipped it would remove that attachment before adds the new one so now that that gets destroyed let's go ahead and try it out so if we click on play and just close down the inventory open the outputs okay I go on the server and we change the equipped pet value to TV I've got a TV and if I change it to monkey I now have a monkey so you can see that the equipped pet got changed function is firing because when we change the value of the equipped pet is checking to see if it's an actual it's not nil and there's actually some text there and then it's checking to see if it's an actual pet in the folder in replicated storage and if it is then it's going to it's going to execute our equip patter function it's going to make it's going to look at that pet and equip it for our player so that is a success all we need to do now really is just do a bit of coding so that when you click one of your pets that will appear in this inventory GUI it will fire a remote event and then when we pick that remote event up on the server we can change the players equipped pets value because you can only change values that are stored in the player from the server house the changes won't take effect if you change them on the client side so that's what we're going to do next so here we are back inside the GUI client scripts and within the add to frame function we need to set up an event when you click on the templates button so we have a look inside the templates it's obviously an image button so we can just set up a mouse button one click event from that so if we just go to the bottom of the function here and we can set up a table to handle all of our connections now if you don't know what a connection is when you set up an event the scripts is constantly listening out for you to do the action so if I set up a mouse put some on click event the script is always going to be checking to see if I'm clicking the button yep so it's constantly checking that and that's using up memory and as you add more frames to your GUI that's more and more of these connections more events which are constantly checking to see if each individual button is getting clicked now if you have loads and loads of connections and it might be that you know you no longer need those connections because you might have some pets that you no longer own or something it's just a good idea to keep track of all of your connections because you can disconnect them and when you disconnect them it means that you're no longer listening out to see if that thing is happening and so you are saving a memory leak and a memory leak is when you just have unnecessary events which keep checking things for no reason even though you have no purpose in that so if we just have a table and we can fill that up with our connections and if we ever wanted to disconnect them for example if you sold a pet you would no longer want to check if you've clicked the button because you don't want it anymore you can just disconnect that connection so local button connections equals and a blank table like that at the top of the scripts is a variable and then to put the event connection in that table you can save button connections and do square brackets and then hash tag button connections plus one so it's just this is just a fancy way of saying table dot inserts but because you can't say well I mean could I guess but this is the better way because you're inserting it at the next available position so hash tag button connections is the number of objects so if you have got six objects currently in the table then the thing we're going to set this to they're going to be the seventh because it's six add one seven so the seventh index in the table basically the next available free index in the table that's going to be equal to new templates drop Mouse person one flick code on connect function so now this connection is stored in a table if we ever want to disconnect it we could loop through this table and disconnect everything inside of it but we don't need to do that but in the future if we need it to do that's why it's good practice to set it opposite connection like that so we the pet is either going to be equipped or unequipped alright if it is currently equipped than the text of the equipped text like what was going to say equipped if it's not currently equipped it's gonna say unequipped so we can check see if new template dot equipped dots text equals equipped it's gonna be in capital letters for me by the way then so if it is so is it just the text currently says equipped we know that as it is already equipped they want to unequip it so if they click it again once they've already equipped it they want to unequip it they want to they don't have to pay anymore so if they do want to do that then we'll have some code that will fire a remote events to tell the server that we want to unequip that pet but for now let's just deal with unequipping it so else if B text is not equipped then it must be unequipped and so we will know that it is already unequipped and now they want to equip it so to equip it we can create a remote event and we're gonna call this remote events equip heads and then we can say game don't replicate the storage dot equip pets curl on fire server and we need to send the name of the pet don't we so we can tell the server the name of the pet that we want to equip and obviously because we have our pet as an argument in this function because when we call the function we're supplying the pet which we know from our hatch egg event which tells us when it gets fired we can just send the pet's name just like that and yeah so we will deal with this for now so we'll go back to the main script and now at the bottom of the scripts we can pick up that server we're most sorry that remote events which will get fired we can pick it up in an event on the server so game the replicate this storage dot acquit pet dot on server event when it gets fired to the server from the client I'm gonna connect that to a function and we've got two pieces of information the first one is automatically sent by roblox that's going to be the player who fired there are most events and the second one is the one that we sent and it's going to be the pet name you don't you know you know you can call them whatever you like is the order that matters so the player always comes first and then from then on it's the order that you put them in so that you don't have to have the same name as I have so in here all we need to do is check if it's a natural pet in replicated storage so let's create a variable for it local pets equals game replicate the storage dot pets code on a find first child pet name so this pet variable is either going to be an object or it's going to be nil so if it's nil we'll just check because it's no there won't be a pet with the name in that folder so if pets then we also want to make sure that you own the pet so we can check to see if it's in your pet inventory because we don't want people to fire this remote event and say that they want to equip a pet that they don't actually own so we need to check they have it in their inventory so if pets and player got pets inventory find first child pet name because we have a value in that pet inventory folder with the same name as the pet so now that we've verified that they own the pet we can set their equip the value and when we when we change the value of the equipped pet then it will fire off this changed event and it will equip the pet for us so we can say player dot equipped pets dot value equals pet's name and then that way because the value has been changed it's awfully going to trigger this event and the pet is going to be equipped on the player so now what we need to do is we need to now you've equipped it we need to change the text on the client only because if you've if it was saying unequipped and you just equipped it we need to change the text to say equips or vice versa so the next time you click the button the new template dot equipped dot text will be something different and that's how you get unequipped first time then when you click it it goes equipped and when you click it again it goes unequipped because if you change the text you can just always check to see if the text is one or the other and then that will tell you what you want to do so we will create a function to do this because we also want to change the other frame so if you have five template frames in your inventory and one of them was already equipped and you clicked another you'd want to set them all except the one that you've just clicked to be unequipped so you want to reset the others so we will create a function outside of at the frame local function and we'll call it set template equipped so we want we're going to pass to this function make sure you add the ending by the way I'm going to pass this function the object of the template which is going to be equipped okay so it's template and then firstly we'll just loop through everything in the scrolling frame and then we'll set it to be unequipped so for I comma V in pairs scrolling frame get children do so we need to check to see if the objects we're currently looping through is a is a is a template so if V curl on find first child it quits we know it's going to be a template if it has the equipped text label inside of it so if it does have that equipped we know it's a template so we can say we can set the equips text to then say unequip s' because we're setting them all to be unequipped first we're just resetting all the other buttons and you can also change the color of the texts label so V dot text color 3 equals color 3 dot from RGB now if it's unequipped i want it to be red so we know that red is going to be 2 5 5 comma 0 comma 0 it's an RGB value so there's no green there's no blue there's just a 100% red if you wanted to get your own RGB value and you could just go into equipped go into text color three choose the color and there would be these three values here these three values make up a color that's just how it works thing it in the computing RGB red green blue Nick get three values mix them together and it creates a color so this will make it red so now that we've reset them all reset all the templates to be unequipped we want to set the one that we've just equipped to say that it's equipped so templates dots equipped dot text equals equipped and template dot equipped dot text color three and this time you might want it to be green so color three dot from RGB 0 255 comma zero and that will be a green color because only the green value has got a value above zero and it's 255 which means it's a hundred percent green no so again you could just use the color picker if you wanted to pick your own shade of green and you would put 103 to 1 to 53 in this case but I'm just doing a simple color which will give us green so this is making one template say equips and all the others are being set to unequipped now we have this for loop before we change the the the object that we want to say equipped because this is going to set all of the templates including the one that we want to set to equipped it will go unequipped first momentarily and then it will instantly set the one we want to be equipped so it's resetting them all to say unequipped and go red and then the one that we want is gonna say equipments gonna go green so that is why we have this function and then when we have equipped a pet we can just call set templates equipped and we want to give the new template the one that we just clicked because that's going to become our equips and pets are its frame now if it's already equipped when we want to equip it so we can we'll have another write event we'll call it an equip pet earn it quick pet and all fire that's now on the server we'll pick that up and we'll just set the changed about the a.m. quits pet value to be nil so game to replicate the storage dots burn equip pet coal on fire server we don't need to send any parameters we don't need to tell you the name of the pet because we're an equipping the pet we don't want any pet so once you've done that we just need to set the new templates equipped the text to be unequipped and its color as well new templates got equipped dot text color 3 equals color 3 from RGB and that's going to be red so we know that the Reds gonna be 2 5 5 comma 0 comma 0 4 again you can use whatever RGB value you'd like so this is going to set it to be gonna quit and just make it look red again so it shows that it isn't equipped and that is going to you know switch so when you click it first time it'll equip it and then the second time you'll become owner quiz so make sure that you're equipped text label is the text is set too unequipped has to be set to unequipped so this isn't going to work if it's not set so gonna quit this text label here then it's not going to well it it would work to be honest but it's just a good idea that we have we have it set to unequipped to begin with because that way it's in line with with what we're currently doing because it's like the text is are they going to be equipped or an equipped and by default it won't be equipped so who set it to be on equips ok so as i said we're gonna go back to the main script and we're going to do this unequip pets remote event now so very simple I'm just gonna copy and paste the equip pet code I'm gonna change the name from unequip from equip pet to only quit pet and we don't need the parameter or the argument for the pet name we just need to set the players player dot equipped pet dog value will just be an empty string like this instead of setting it to nil we set it to an empty string like this because I think you can have neil string values they have to just be an empty string like that so because wants it unequip the pet we need to delete any pet that they currently have in their character so to do this we can say if player dog character Kerlin fine first try old and then because we named it to be player name dots pet we can say player name dot dot was pets like this then you'll just say player doctor actor and then in square brackets because we know it's there now we don't use find for his child but if we were to use the square brackets in the if statement it could give us an error if it wasn't there so that's why we use find for a child just who doesn't break the script if it isn't there it doesn't cause an error so fine for his child is like a fallback option in case it isn't there so we can say player dot name dot is pet curl on destroy like this and that's going to delete the pet from their character and as well we will delete the attachment let's let's take yeah let's do if player dot characters a humanoid root part color find first child attachment character then player character the humanoid root parts find first child attachment character destroy okay and that will delete the attachment from their character that which we do delete in the equipped pet functions but if they're not equipping a new pet it will stay there so we can just delete it there and then so i think that's everything let's just have a quick scan through so we have set up our events for when the player respawns and when they're equipped pet changes so they can get a new pets and we've also done the client coding as well so that when they click on a button they can either Equipe or unequip the pets so let's go and give it a try I'm going to go join the game and we're gonna have to walk all the way over to that inventory I capture but that's okay just try to speed things up a little bit so if we go and buy our egg for five hundred cash we can see that it's going to hatch what do we get we get a larva Lord I believe that is so let's check our inventory we have a lava Lord and it is unequipped or I forgot to set the text to be read the property to be read so when the game first starts and the template is first created it's black into the red but that's okay we click it and okay let's have a look text color three is not a valid member of image person that's okay we'll check it out so that's gonna be on line 16 oh yeah we need to set the dots equipped dot text color 3 not V Delta X row 3 that was my bad because V is the image button it's the equipt it's the template whereas the acquit is inside of the template so it's V dot equipped dot txt color 3 okay let's move in front of the in front of the dispenser and I'll click it and let's see what we hatched this time so it's gonna be the TV that's what the output saying yeah and the TV is in our inventory so if we click on it it's now equipped and there is no TV by our side okay that's cool we can check it out so look in the equipt pets and it is it's set to nothing let's try that again okay so what we can deduce from this is that it is not setting the equipped to pet the value when we click on it so let's check this out so see equip pets oh I know I know why I know why it's because it's because we haven't yet I forgot to do this this is my bad we have one week we buy the pets but it doesn't go into your pet inventory look isn't going to your pet inventory here so we need to insert a value which goes into the pet inventory when you buy this item so that we can tell you own it if you were to have it in the pet inventory that will give an example what would just hatch we hatched a TV so if if the TV was to go in here we had our value and we equipped it yeah it would acquit so it's because we haven't put it in the pet inventory and it's failing it's failing when we get to this part so because obviously it isn't in our you know our pet in Vitoria so when we do buy it let's go into our dispenser I can't really see it we go into the dispenser and our scripts and we do choose random pets we can just say local value equals instance I thought I'll just call it pet val equals instance new string value and pet valve name equals pet dog named pet val godparent equals player dot pets inventory let's try it again so this way it's inserting the value into the pet inventory so we will know that they own it so if we just do the egg again so we all get the monkey and if we just go and click on the equips we now have the monkey and the monkeys following us and we can unequip it and it's gone we can bring it back and yeah let's go and get another one so we're now getting the lava Lord and this time it says unequipped but the monkeys still equipped with we honor if we equip the lava Lord you can see the monkey is unequipped and the lava Lord is equipped so there you go so what I'm going to do now is I'm going to reset so we can test that it loads the it's pet so let's just take a look at this this shouldn't reset ok it has resets I know why that is though don't worry but we know that the pet is stayed with us and his respawn that's because look at the character added event but how do we stop the pets from going away when we reset very simple we need to go into the inventory here and the inventory has a property called reset on spawn if you set that to be unchecked it's not going to reset when you respawn and the last thing is I'm going to go into the equipped I'm going to set the text color 3 to be 255 comma zero comma zero and I'm also going to set text stroke transparency to be not 0.5 so we have a little with a black outline so we can read the we can read it easily we can read that the equipped and owner quits values so let's just try this one more time so this is called testing and making sure that your program when your product is free of bugs and it's working to the standard you expect and the reason I'm leaving this in and I'm not edit editing it out is because it's something you can have to go through as a programmer I'm keeping it real and this is the what you'll have to go through if you're programming your own roblox games lots of testing lots of iteration all of that and that's what goes down to making good products and good services so I might have overdone it with the text stroke transparency a little bit I might increase that to about nine point seven five so it makes it a bit easier to read but I can equip the monkey I can equip the lava Lord doesn't matter I'll equip the monkey though and we'll reset and remember that it's updating our equipped pet to be whichever one is currently equipped and that is what is allowing us to respawn them in and keep track of the the pets we have the pets now get inserted into the pet inventory if you wanted we could equip the lava Lord so working very well in my opinion all that's left to do with the data stores and I'm not going to do that in this episode because this one has taken me a while to record and maybe it's a challenge for you you could try and work out how to data store your own pets before that video comes out hopefully it will be out within a week or so but the issue it probably will be out by the time you're watching this video if you're watching it in the future but yeah so thanks for watching this has been episode number two in how to make a pet system in roblox I recommend you watch some of my other videos and fats I'll leave it on the screen for you to go ahead and watch now so why don't you go ahead watch it and don't forget to subscribe to the channel as well and like the video if you've enjoyed it and share it with a friend as well who you think might find this out forum so thanks for watching I'll see you in the next one Cheers