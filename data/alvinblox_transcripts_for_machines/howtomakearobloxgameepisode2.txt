so welcome back what we're gonna do now is we're going to choose a random map and get it loaded into the game so the player can be teleported it later on so let's begin don't forget if you're new to my channel then click on the notification bar and make sure to subscribe so you don't miss out on upload a brand new video so what we're gonna do is we're going to firstly get the maps okay from this maps folder so we can say the local available Maps equals and then the same maps folder curran get children with a pair of brackets on the end this is gonna return a table okay my table looks like this and it's just a list of all of the different maps that we can choose from so it might be desert for one grass for another and we're gonna make it pick a random number from one to however many entries we have in this table so there's two entries so we're gonna want to pick one of two and because in a table each item is attributed to a number so desert is the first item in the table so it's starts at position one okay so this one is position 1 and we have position 2 and the value of position 2 is grass so if number 2 was picked then it would be the grass map if number 1 was picked it would be the desert map you get the idea so what we're going to do is we've got our table and we want to find a random map from this table so we can do the local chosen map equals available Maps and then what we want to get something from a table we do square brackets and we put the number okay so if we wanted desert we would put 1 if you wanted grass we would put 2 but we want a random number so what we can put in here is math dot random and then a pair of normal brackets or parentheses however you want to say it and we want to pick a random number from 1 so that's the first number then we do comma to show it we want it now to the second number and the number want to go up to is however many maps we have so an easy way to find out how many maps you have is to put a hashtag and then available maps and that will give you the number of items in the available maps table so if there are three maps then hashtag available maps will be three so we're picking a map in the maps table from one to three okay so if there were three values it'd be one two three if there were ten maps it would be one to ten you get the idea so chosen map will be the model of the chosen map so what we can do is we can say status not value equals chosen map dot name and then we want to put chosen okay so we want to concatenate here so you want to put two things together we have the name of our map which we don't know and we also have chosen which is in speech marks so this is a string and we want to concatenate this together so put the two together and to do that we put two dots or periods in between the two things we want to put together so concatenate basically means put together so we're putting the name of the map together with chosen to show that specific map has been chosen so now that we've done that what we can do is we can clone this map and put it into the workspace so that we can teleport players to that map so local cloned map and once again we do another variable equals chosen map code on clone with a capital C clone doesn't really matter but it is good practice to use capital C and remember put a pair of brackets parenthesis on the end of that because it's an inbuilt function to clone something and we want to say clone map dot parent equals you can just say workspace you could say game dot workspace but it is acceptable to put workspace so we want to now teleport players to that map now remember in part one where we created our map and we added these spawn points what we're gonna do is we're gonna index every single spawn point and teleport each player to one of those specific spawn points so go back to the main script and what we're gonna do is when the same local spawn points equals to clone the map because we're not using the chosen map using the one that we cloned and to say find first child and then in brackets and speech marks wouldn't say spawn points so we're just telling the map to look for these spawn points here find first child will send back the first item it sees which is called spawn points so these ballin points we're gonna just chair to see if you actually have the spawn points in your map so if not spawn points then it should print you do not have actually you could just print spawn points not found now this shouldn't run but if you see spawn points not found in your output window at the end that means that you haven't put spawn points in your map so double check that and make sure that spawn points is spelled correctly everything looks like mine this is just a little way to check to see if you've done it right or you don't need to add it in but we'll keep in anyway so we now want to do the same thing as we did with the maps we want to find these spawn points that are available because we don't want to teleport people to the same spawn point so we can say local available spawn points equals spawn points get children okay with parent rackets or parentheses on the end and that is gonna return as I said earlier another table okay so this is our table and we might have multiple spawns in here and so we have spawn points because they're all called spawn point don't forget okay but imagine all these spawn points are at different positions in the map so we have one we have two we have three we have four we have five okay so imagine we have five spawn points we're gonna choose a random number from one to five and then whichever spawn point gets chosen we will teleport that specific player to that spawn will then remove it from the table okay this is the available spawn points table so nobody else can get teleported to that spawn and then when everyone has been teleported then the game can begin now I need to stress that you need to have more spawns than the number of players in your game if you have six players in your game but only five spawns then one person isn't gonna to get teleported because there won't be enough spawn points left so make sure you have enough spawn points I recommend you do double because you know roblox might mess up the servers and give you more than your allocated amount so if your server size is 5 where blocks might mess up and give you 7 or 8 because the server's might get overloaded or you might accidentally bump up the server count and forget to update the spawns so make sure you have enough spawns for everyone in your game else it won't work so we've got children we've got the children we've got all the spawn points now in this table all we need to do is loop through each player in the player's table we made earlier doing say for I comma player in pairs and in these brackets the table that we're going to loop through is the players table so PL RS do and for each player we want to check to see if they still exist so if player then and if the player is there then we want to firstly get their character so character equals player door character now the player might have left the game already so we need to see if their carrot if the player still exists and if there isn't a character which is their their model their actual player that you see in the game if not character then well actually yes let's just say if character first so if there's a character we'll do code to teleport themselves there is no character okay maybe they reset maybe their character got destroyed something happened but there is no character so we need to check to see if they're still in the game because this is a warning sign that we need to kick them out of the table because if they've already left we don't want them to win just because they're sitting there in the table being inactive so we're gonna do is we're just gonna check to see if not to play up then so if the player isn't there then we know that they've left the game so we can remove them from the players table so because it's inevitable that somebody is gonna leave the game drawing the game okay rage quit four stars okay so if someone leaves the game they're gonna still be in the table and the script the game is still gonna think that they're in the game because they've left but they're still in this table so we need to constantly be checking to see if they've left the game yet and if they have we're gonna do table not remove and then we're gonna specify the players table and then the the number remember I said only about the numbers being attributed to each item in the table we need to find their number okay because you can't just say players don't remove and put their user name in okay doesn't work like that okay you can't do that you have to say the number at which they exist so now luckily because we're already looping through this players table we know what number order yeah because if we've got to this current player we know that their number is I because I is the number of times or the current table index will loop through so if there is it's the fourth object in the table I is gonna be four by the time we get around to looping through to them so what we need to do is we just can you say players comma I because I is the number where they are on the table for we passed in it for us so now that we've removed them from the table we can actually work on teleporting them if they're still in the game so what we need to do is we need to say character hold on find first child humanoid root part now the humanoid root part is a part that exists in the player and it will work for all body types are six are 15 and throw because our 16 and our 15 are different you can't tell whether someone is our six or our 15 where you can but I'll take a lot more code so if it was our six you'd have to teleport their torso if it was our 15 you'd have to move their lower torso or upper torso because there's no such thing as a torso in our 15 but our six our 15 and anthro have a part called a humanoid root part so it doesn't matter what body type they are we can just change the position of the humanoid root part and their whole character will follow with them and we're just getting the first humanoid root part that we see I'm gonna say dot C frame equals available spawn points and we want to get the first object in this table now we're not getting a specific spawn point because we're teleporting one player to the spawn point okay so let's say we teleport the first player to the first object in the spawn points table and then we will move whatever's at position one from the table so that spawn point is going to be gone so all the other spawn points at position two three four five six are gonna move along and shift along one space so that the spawn point in position two will shift into position one so there's always going to be a spawn point at position one no matter what so we don't need to worry about getting a specific spawn point what we just need to do is say dot C frame so that is the position of the spawn point and we're teleporting the players humanoid route part to that C frame okay so if we just go into a game I just want to show you this to you right ok we'll add it into the game now I'm gonna go into the workspace go into my player and you can see we've got upper torso right lower torso okay we can see you've got this humanoid root part now if we move the humanoid root part to a different position say 78 and let's just move ourselves you can see my entire body moves with the part so that's why we're moving the humanoid root part so now that we've teleported the player we need to remove that spawn point from the available spawn points table so that no one else can be teleported to that spawn point and as I said all the other spawn points can shift down so we can say of table don't remove available spawn points , and then one because as I said we're dealing with the first objects in the table to make it simpler we're always teleporting to the first object removing that first object so they all shift down and we'll have the objects in first position for the next person so there we go we have teleported the player all this left is to give them a sword and we can move on to the actual game getting started seeing if everybody's died and we can give out rewards later on so let's go ahead and do that now we're going to just going to give them a sword and as I said earlier we've got this sword in server storage here and it's also gonna mean in description so you just need to go to the link in the description then you need to take that model so purchase it and then go into your toolbox and then if you click on my models it should be there ok my models and you can click it insert it into your game and drag it into service storage right so what we're going to do is we're going to give them the sword so you can say local sword equals server storage dot sword Curlin comb we're copying we're basically making a clone of it copying the sword I'm gonna say sword doc parent equals player backpack and this will put it in their inventory so they can equip the sword and fight other people with it now the next thing that we're gonna do is we're gonna insert something called a game tag now a game tag is what we use to track how many players are left in the game because when the game starts we want to know how many players are left from that original players table because we want to know who's died and because this is last month's standing we want to make sure that we reward whoever is the last person standing so we'll have a game tag and we'll insert this tag into the player's character and when they die we're going to remove this tag and then when we do the before loop from when the game is running every second we will check each player to see if they have a game tag and if they don't we'll remove them from the players table and eventually when there's one player left in the players table we'll know that one person is left standing so what we can do is end the game give them some reward and move on to the next game so that's why we're using a game tag is basically a value which isn't going which is going to go into the player's character and you'll see more how it works in a minute so to do this we're just gonna say a local game tag equals instance dot new bull value although it could be any type of value we're not using the value type we just inserting this tag so that we can reference it later on in the script to show that they're still in the game and he wants to anyone anyone still in the game will have this game tag anyone that's died won't have it because we all remove it so we can see who's still in the game and who is dead so we can say game tag dot name equals game tag with capital G and capital T and game tied parent equals player dot character okay this is why it's so important to check if the characters there because if there isn't a character this script is gonna break because there is no characters no character has been found how can we insert a game tag into the players character if there isn't a character so that's what we do the if statement to check to see if the characters there and if it is we can run this code but in case it isn't there which could happen because they could leave the game we can remove them from this table and move on to the next person in the for loop so now that we've inserted the game tag we can get started on the actual game mechanic so that we can count down from our game length and constantly check to see if there's one player left standing so what we'll do is we'll do that in the next part of the video but just to finish this one off we're just gonna do a little bonus and add the GUI so that you can see the status value in action so what we're gonna do is we're gonna create a nice little GUI which shows the current status so it will update for all players now I'm going to be using a plugin for this called around if I I'm gonna leave a link to it in the description down below if you want to use it you don't have to all you're gonna do is make our geo eyes look really nice and smooth so we're gonna go and complains we're going to go to manage plugins and we're gonna click on find plugins and once that's loaded we're gonna go to search and we're gonna click on search when it loads up and type in around if I and click on round fight by stell Rex click on install and that's going to install it into our roblox studio so just wait for that and it should come up saying yep installed and you can see round if I has been added so we're gonna go into starter GUI because that's where all of the GUI graphical user interface elements are made and we can click on the plus and insert a screen GUI we're gonna call this screens UIs status and then we're going to click on text label okay text label is a GUI element which allows you to show text on the screen so the user can't click it button it just shows text so we're gonna take this label click it and we're gonna scroll down here and set the position to naught point 5 100 because that's half of the size which is 200 0 50 okay now that puts it in the middle of our screen um actually let's just go ahead and make this a little bit bigger I'm gonna set it to 500 and then we can change this 102 250 because that is half of 500 if you having a bit of trouble with this you don't know what I'm doing here I'm just positioning it not 0.5 puts it in the middle of the screen and negative 250 is the offset so that it sets it back 250 pixels so that it is truly in the middle and you can see on all devices it's in the middle and then here 0 50 we're just putting it 50 pixels down the screen from the top so if that was a bit confusing you can just drag it around but this method is better for it appearing on all devices because you can now see if we go into test emulator you can see it scales pretty good on all devices so you can see iPhone X works fine so yes there you go what we want to do now is just go down to properties click on text scaled so that the text becomes nice and big and you can change the text if you want it doesn't matter though because that's not going to be shown when the game starts so all that's left to do is round defy this so we can click on plugins round if I and you can see the GUI ker it's got nice curved edges and looks much cleaner now you'll have to go back to text label and set zindex to two that just makes it appear on top of the image label if you can't see your text set the C index to two so there you go if round fight isn't working for you then don't use it maybe in future if it's broken I don't think it's broken or gets updated it might be little bit different but that's how it is today so that is how you do the GUI design now we just need to do the the actual coding of it which doesn't take long so we're gonna insert a local script into this text label not a normal scripts a local script because it's local to the client to that player so what we're gonna do is we're going to firstly create a variable for our status so you can say local status equals game colon get service and replicate the storage because that's where it's stored code on wait for child status remember waiting for it to be added because the script might already be running executing before the status has been added into the game so now that we've got that we can just say script dot parent dot x equals status got value now this is updating it when they first join the game but what about when the status party changes because it's bound to change so we have to make sure that when it changes we have a function that we can fire off to update the text so it's quite simple reason to say status get property changed signal and the property that we want to update the text when it's changed is value so when the value of status changes we're gonna update the text label so we can say current connect function function like this drop a couple of lines and say script parent text label dot text equal status dot value now just a quick reminder guys make sure that you've saved your project click on file and then click on save as and make sure it's saved in case something but happens you can get it back and let's go ahead and test this out so we're heading into the game so there we go we're in the game and you can see the status bar has been updated because first time we joined the game it set the text to whatever the status currently is which is waiting for enough players now if we go ahead and change this status okay on the server so imagine this is the script that goes in and changes this status okay I press Enter and we go back right let's have a look okay so it's not it's not actually changing okay so let's go into the output here and we've got an error okay and this is fine and it says text label it's not a valid member of text label let's go back to the local script to see what happened it's on line seven and it says script parent text label dot text aha so there's our issue what I did was I put the local script in the text label but I accidentally said script parent dot text label okay but the text label already is the parent because it's inside so if we get rid of that text label and retry everything should be all good so that is all you do if you find an error you go into the output you have a look where it is you try and fire them out what's going wrong and you try and fix it so let's go back into the replicated storage let's change it to hello and there you go you can see that the status has changed now usually the server will update this but if a client or a player tried to change this to exploit the server only they would see it okay so let's imagine I'm a hacker okay and I'm changing this value to goodbye okay you can see it's changed for me but if we switch to the server and we go in here you can see it still says waiting for enough players it didn't even say hello because we changed that on the client as well so you don't need to worry about that too much that's quite advanced but we have got our status bar working now and we should be ready to go on to scripting the actual game in the next part so make sure that you subscribe to my channel already if you haven't make sure you turned on the notification bar and you've liked these videos to let me know that you want more if you want to go straight to part 3 which I do recommend you should click on the video thumbnail on your screen now I'll see you over there in part 3