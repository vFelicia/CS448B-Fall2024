I'm going to show you how to very simply store data on Roblox using data store service so firstly you need to create a variable for the data store service which will do just like this and once you've got the data store service we need to actually create a data store for our game now you can have many you can have as many data stores as you like so I'm just going to create a variable for this by saying data store service get data store and you have to give it a name so I can call it my data store one if you wanted to wipe not wipe but if you wanted to reset everybody's data you could just increment this value to two and it will store data in a different data store so we'll just keep it as my data store you know whatever you want basically and then what you have to do in order to set some data is you need to have a key and you need to have a value so the value is obviously whatever value you want to store so it could be the number of coins you have or the number of XP or it could be the name of the pet that you have got equipped it could be any any data right it could be a table it could be a string it could be a number could be any any data really you although you can't store things like vector 3 values um things like that has to be quite basic data forms so tables strings numbers and true or false values that's basically what you can store in a data store so you've got pretty you know pretty good scope of what you can say save um so that's the value so so that's the actual data but if we were saving data for loads of players we wouldn't know whose data it actually is you know if we had all these different values you know um millions and millions of these values if you had millions of players you don't know whose data you're dealing with so what's the point in Saving data if you don't know who it belongs to well that's where the key comes in and the key is like an identifier or some kind of tag that just goes along and is stored hand inand with that data with those values to say who it belongs to and we it needs to be unique for every single player otherwise we would have players who have the same data so we need some kind of identifier some some kind of you know piece of data that is unique to every player it's different for every single player almost like a fingerprint to identify a player's data and luckily what we can use for that is their user ID so every user on Roblox has a user ID and if you're wondering how you can find that well just go to your Roblox profile and you will find that we all have a user ID in fact you can see here is mine okay uh 14943 069 that's my user ID so by using a player's ID we can um separate and distinguish their data from somebody else's so it would end up looking like this so you'd have your ID and it corresponds to your data and then every other player would also have their own ID you know so we know these would be three separate players but since they have different IDs if we wanted to look up my data we could just look for my user ID and it would correspond to my data so let me show you how this works so we have the key we have the value so how do we set somebody's data well you see you get your data store which we've just set as a variable here and you say colon set a sync and set a sync lets you set a value to a particular key so let's firstly provide the key now this will be my Roblox user ID and then we'll have a comma and now we can actually store our data so I could set it to a table and in this table we could have coins equals 50 50 XP equal 0 you know uh we could you could have even more table you could have a table to store all of your pets you could have a daily login streak you know um you could store all your data in here and then it would go up to the data store so if we were to click on run uh oh we need to publish the game so if we click on stop and we go to file and publish okay I'm just going to publish the game here and then I'm going to go to game settings I'm going to click on security and I'm going to enable Studio access to API Services click on Save and then click on run and what will you can't see anything that's happened nothing has happened in the output but our data store request will have gone through and a really easy way to check this is by going to plugins and getting the data store editor by slight Nick okay you can find this I'll leave a link in the description I think it cost Robux um so you don't have to get it but I'm just going to use it to prove that our data has been saved here so I'm going to connect to my data store I need the name of my data store which we set as my data store and again this is per place okay so this won't be uh saved between Roblox games it's only for this one place so we now need to look for our key which is going to be 1494 3069 because that's my user ID and the keys are always strings whilst this is a number it has to be a string so we have to wrap it in speech marks and you can see look my data is there um it's we've saved the the coins login streak pets and XP so it is there the next question is how do we actually get this data so what if you want to get someone's data well it's very very similar we will just say get async in this instance and we only need to provide the key we don't need to provide any other data because we're getting not setting uh and this should be data store my bad and so we could then print data store get async and this should print the table that we've just saved which it's just done so that is how you set and get data however there's a few things we still need to go over now because this get async Returns the data we can actually set it as a variable okay so you might want to do something with this data later on perhaps you want to you know print a specific value such as data. daily login streak where and that will print out one okay there you go um but there's a few things we need to actually look at before we go forwards now firstly we're only setting data for a specific player here right because we've provided my user id how would we do this for any player who joins the game well what we' need to do is we need to firstly wrap this in a player added function like this okay and we now have access to a player that will join the game so we'll take this code and instead we'll put it in our player added event and instead of giving the user ID here directly as mine we'll say player. user ID but because this is a number we need to convert it to a string so we'll put it in Brackets and we'll write two string and now for every player that joins the game they're going to have this template data stored to the data store under their user ID and the next thing we need to do is we need to actually put this in a p call now because this is an API call where we're making a request to roblox's servers to set someone's data there's a chance that could go wrong so we are going to wrap this in a p call and you say p call and then in Brackets you have a function like this and you need to have a closing bracket on the end of it and what this will do is because it's now wrapped in a PE call if something goes wrong for examp for example if roblox's servers go down this isn't going to break our script it's not going to throw an error okay and this you know this is quite common because roblocks can have outages which means that their servers go down you can't access data stores and so we wouldn't want to break our script and stop it from running if that was to happen but by wrapping it in a PE call it it wouldn't it wouldn't throw an error that would uh that would stop the script from running so we've Now set a player data a template data when they join the game but what would happen here is every time they rejoin the game it would overwrite their data so we only want to do this if they're a new player so how do we check to see if they're a new player how do we know if they haven't played the game before well we could we could try and make a request to the data store to say has this player played before so we could say local data equals data store get a sync to string player. user ID and if data is nil then we will set the player's data to this template and I'm actually going to move this table outside of the uh set a sync I'm just going to put it at the top of our script and this can be the template data file okay so if the player doesn't have any data then we will just set the data to be the template actually no we shouldn't do that what we'll do is we will set a sync like this okay and then then what we'll do is down here perhaps you have some data that you want to load for example their coins right you could then say in the else down here uh if the data is is is there it's loaded obviously so you could print uh data. XP you could print data. coins you know uh but if they are a new player then we will say data equals and you're going to make a deep I'm going to make a deep copy of a table and what that means is I want to create a clone of this table of this template without any relation to it if I was to say data equals template then this could get a little bit messy because there would still be a link between this table and the data so if I made any changes to it it might alter the the template table I'm not too sure on this but what I like to do for safety is I just like to set it as a deep copy so it's a completely separate um unrelated table to the template here uh and then this can actually get moved out of the if statement right okay this should this should work well so let me just explain what I've done so if the player has no data we are going to set their data variable to be a completely fresh copy of the template uh rather than a a link to this specific template variable and then we're setting that to their data store and then outside of this if statement by the time we get to here the player will have some data whether it's the data that's been loaded from the data store or the data from the template table so we can do whatever we want with their data if they you know if you have some leader stats you could set their leader stats to these values uh if you wanted to imple increment their login streak you could do that but every time you alter their data table you'll need to set a sync okay so if I was to later on if I was to increment their coins I would need to always call set a sync now this is a very very basic implementation of data store and there's many different ways you can do it um for example you could use a uh a framework such as the profile service or data store 2 the the purpose of this video was more so to teach you how get a sync and set a sync works this isn't necessarily how you would do it if you had a big game for example um but it's just meant to teach you how Keys work values work and data store in general so um that that's it basically let me know if you found it useful if you have any more uh ideas for videos and I'll see you in the next one