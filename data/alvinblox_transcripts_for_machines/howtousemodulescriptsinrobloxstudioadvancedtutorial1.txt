everyone and welcome to the first episode in my brand new series this is a roblox advanced scripting series now I've asked you guys for video suggestions for this series and I've got a lot to get through in this series so it's gonna be a good one and we're kicking it off with module scripts now this series isn't for beginner roblox descriptors if you are new to roblox scripting and game development I recommend you watch my 2020 beginner roblox scripting tutorial series I did start it at the end of last year although it does still work in 2020 and in years to come as well it will still work so I recommend you go and check those out there are currently 23 videos although for this topic module scripts the key things that you need to know so the key videos that you should watch are going to be functions which is on the sixth episode of that series function parameters and arguments which is episode seven and also returning which is episode number eight so I'd recommend you check those out already if you haven't although we will kind of touch on them in this video so if you've got a basic knowledge of scripting and this should be good for you so module scripts are very very useful in coding and a lot of people don't understand them and think they're really complicated and I did as well when I first started using them but now I actually realize how useful they can be and they're really really useful for organizing your code and also as part of something called the DRI principle so Dr why don't repeat yourself and you don't repeat yourself principle is because sometimes you're writing code and you need to use that code over and over again so instead of writing it loads of times in your scripts you can use a function and that function you can call it at different times module scripts are basically an extension of that in that you can write functions in a module and you can call them from other scripts so I could have one function which does something and I might want to call it from different scripts so instead of having to declare that function in every single script I could declare it once in my module script and then I wouldn't need to write it anywhere else because I could just call it from any but because it's in the module script we can access it from there so we only need to write a function once and we can call it from multiple scripts now also it's a good way to organize your code because you could have your most important functions in your module and then you could have like a game logic which is what I covered in my piggie series so I have all my important functions in my module and I can call them from my script so it reduces the size of my loop scripts like my game round so if I just had a function for the intermission choosing the player to be the murderer teleporting players in this module instead of having to make this main script where I'm going to be calling all these functions really long it because sure and you'd be able to see step by step the program in a more organized way because you're not having to have lots of code in there anyway so how do you use module scripts well a module script works very very simply in that in the module script when you first create one you'll see that you've got this table variable so this is a variable it's called module you can call it whatever you like it doesn't matter but what's important is that the value of this variable is a table and at the bottom of the script is being returned so we're saying return module but what does that mean well we're going to be accessing this module script from different scripts so we need to sort of download the contents of the module script into the script where it's being where we're going to call these functions from because we're not calling the functions from inside the module script we're going to be calling them from a different script so we need to somehow access all of the functions and things inside of the module script so to do that we need to require it so very very simple you say require and then in these brackets we need to tell the script where the module is we need to give a path to the module now it's in server script service so you could either say game dot service crypt service module script or you could just say script dot parents dot module script okay one of the most common mistakes with module scripts is people instead of saying require they just write the path to the module script and you can't do this I'll explain why later on so because we want to have a a reference to this we want to store it we're going to store it as a variable so local and you can call it where if you want I'm just gonna call it my module and the this variable here it doesn't have to have the same name as your module variable in the module scripts that doesn't matter all you need to do though is call the require function is the built in function to roblox tell the script where your module script is and now you will have access to the functions inside that module script you'll be able to run them from this script here so what we've done when we've called this require function the script has looked at this module script and it's returning everything inside this table back to our script as this variable so this variable my module is now going to be a reference to this module variable in the module script which has been returned back to the script so whenever you say require the scripts basically looking up the module script and it's going to send back whatever's in this table and so you might have guessed inside this table we're going to have functions because we can store functions inside the table just like we can store any other type of data be it a string a number a boolean you know an object it doesn't matter you can have function as well store it in a table so we're gonna have our functions stored in the table let's just imagine that these are functions functions that will run a code we will write these functions in the module in their module script but we'll put them inside the table and then when we return this table back to wherever it's been required from so in this case the script what's going to happen is my module the variable actually going to hold that table of functions so we can now call these functions from the main script which is outside of the module so how do we put the functions inside the table was very simple firstly what you want to do is say module or the name of your variable the name of the table and then we have to do a dot and we write the name of our function so well it's kind of like a variable because say I wanted to call it my funk okay that's what I would write if I wanted to call the function okay so module dot my funk equals you want it to be equal to a function okay and now you can see it's add at the end we could write some code inside of here okay so when we call this function is going to print hey there this is the my func function now you may be wondering hold on it's not in the table because it's not within these brackets but it actually is because what we've basically done is we've created a new object by using this this variable we've quotas new index in the table called my thunk and reset it to be equal to a function so now inside the table we've added this function so when we return that table back to wherever it's been required from if you wanted to execute this function we would firstly need to get the table which is gonna be my module and if we say dot you can see myfunc has appeared in the intellisense so it's it is smart because script knows that we've required and we've kind of downloaded and sotospeak the contents of the module and it sees that there's a function in that module table called myfunc so if you just press enter or write out my funk you can see as the brackets so it's called the function so to call them a function inside the module you firstly have to have the function sorry the variable of the required module script so you've got access to that table and obviously that table has the different functions inside of it because we gave it a name my funk and we set it equal to be this function here what's happening is we can then call it from outside the module script so if you now run the game it prints out hey there this is the my func function now something I must add is that when you are using a module scripts the code isn't actually running on the module scripts is running in your script now I'm going to show you an example of this now you probably know that we have client code and server code in roblox in that code can either run on a player's computer in our local scripts in their service such as the player GUI or backpack or even in their player objects or it can run on the server in a place such as the service script service or server storage so model scripts they can either run well they run wherever they're being required from so if you require a module script which is in replicated storage which is a service which can be seen and accessed by the server and the client if you were to require that in the client in a local script it would be running on your computer but if you were to require the same module from the server that code would be running on the server okay so the whole require thing is basically running the code in the module script within that script so if it's a service width it's going to be running on the server if it's a client script it's in local scripts in somewhere like player GUI it's going to be running on the client and I'm going to show this to you so if we call it from the server script service but we also just take this code and we put it in a local script in started GUI watch what happens when I play the game oh whoops my bad we transferred it to replicator storage one moment okay brilliant so if we just ignore these plugin errors we have two prints and you can see the green one when it's green it means that is run on the server when it's blue it means it's run on the client so what's happened is the green one if you click it is taking us to the is green because it's run on the server so it's run in the script in service script service but in the blue one it's been run in the client because it's blue so it's been running the local script so it's not actually running in in the replicated storage in this module script it's it's running wherever you require it to so it's I guess an analogy which I don't think it's the best but it's a good way to try and explain it is this as if I if I was to put a tutorial or some instructions on the Internet of how to bake a cake right and I just published it on my website but then loads of people around the world in different countries were downloading this recipe or these instructions and actually executing them in their own kitchens in their own houses right they're using my instructions but they're not running them in my kitchen they're doing it in their own kitchens in their own homes but it's just that I've supplied the the instructions the recipe and you can think of the recipe as being the module scripts and the individual scripts that are requiring and calling that the module script as being the people all around the world downloading the recipes and actually following them and using them in their own kitchens so it's not that it's it's just running for me it's not running in the module script it's people are taking the recipe and using it and following it in their own kitchens across the world for that's one recipe or instruction was posted online so everybody can access it so it can be accessed from multiple place and multiple places around the world so just kinda in that sense the mortal script is a good way for you to put code which you're going to execute you know that you're going to run it a lot over and over again especially in different scripts so instead of repeating yourself and writing that same function over and over again in loads of different scripts you can write it once in your module and you can call it from lots of different places so let me give you a practical example of this okay so an example of this is if you have a round based game it's likely that you're gonna be want to be using countdowns a lot and so you'd be need to you need to be using for loops so you might have a countdown for the intermission a countdown until the next player gets chosen countdown for players to hide if you've got a hide and seek game a countdown for then the round that's in progress before it ends all sorts of countdowns so you can consolidate this and you might need to count down in different scripts as well so in my module I've created a function called countdown and I've got four parameters it's going to be the number to count down from the number to stop at the incrementer so the number of seconds of delay each each time and the prefix as well to print before thee because it will print out the countdown so the prefix could be like intermission and then game in progress so it will print before the time left so now that I've created this function to countdown I know like no I no longer have to do lots of for loops in my main script where I'm calling it from all I need to do is just call this function and it's really neat just one line I can pass all the information I need to my function so I want to count down from 30 to zero going down by one each time waiting one second and then the prefix is going to say intermission before the I number so you can see I just call the function once it's completed it will move on to the next thing and then it will countdown 100 so I'm going to actually change this to 10 seconds just so that you won't have to wait as long but if we open up the output this was from when I just tested it you can see it counts down from 10 9 8 7 6 5 4 and this is running in the server script as well it's just been required from the module obviously and then it starts counting down from 100 so you can see 1 for loop in one function and yet we're able to use it over and over again not just for the intermission countdown but also for the round in progress and you can see how it saved these lines of code and it's more efficient because we've only had to write out the for loop once but we're using it over and over again in that function so very very useful on module scripts I'm now going to show you another way of putting functions in this table which might make it a little bit easier for you to understand so you don't have to do this way you can do the the other method I just showed you you're saying module dot and injure the name of the function equals function so if we just expand this table a little bit so we can work with it very simple all we need to do is write the name of our function so this could be countdown again and we just say equals function like this okay so we've created a object on index in the table called countdown so that we can reference this function and we've made it equal to this function here if I was to do prints executed and we were to just call the countdown function and run it again it would say executed so same sort of thing ready you know whichever way you do it the function is still going to be put inside of the table still going to have the same name so you can call it so that's just another way of putting functions in your module table and the reason people return the people returned tables well the reason the module variable is a table is because it's likely you're going to want to return multiple functions to the script if you only had he didn't have a table you would only be able to return one value so function whereas you might have multiple functions in your module script that you want to execute so so you can have multiple functions so I could call another one test equals function but you can see there's a red line underneath it and that's because in a table you have to separate each object with a comma or a semicolon like this so when you do that the red line will go away and you now have two functions so you could call the count down one or you could call the test one as well doesn't matter so you can see they both worked so when you're adding a new function to your table like this obviously you need to put the comma in but if you're just creating a new function in the previous way that I showed you like this okay if you wanted to create another one afterwards you wouldn't have to add a a comma because it's essentially doing it for you when you're saying module test the module countdown it's inserting it into the table for you you know we can't see it right now because the table is blank to begin with but then we insert into the table with this function and then we also insert another one so it adds it for you and the name just gives it a really simple way for us to look up and locate each function when we want to call it as well from the script so just some key takeaways then and to conclude we'll do some frequently asked questions that I've found on the internet so that we can try and answer some of your questions so regenerate on a dev form says I am trying to become accustomed to using module scripts I already know that I have to call require on any module script in order to run it my question is how do you use specific functions you define in a module script in a script or a local script so that's what we've gone over obviously in the module scripts we're returning this big table and that table is going to contain all of our functions which we've just added here and because we've given each function it sort of a name kind of like a variable the name for it is indexing the table and to execute the function because it's tied to this name we just need to get the module and we need to require it in our script and that basically gives us a copy of the module script that we now have access to in our script so that we can see the because when we use require it gives us the return value from the module script so because we returned the module table which contains all these functions my module the variable is now going to be equal to this module table and that module table is going to contain all of these functions which we can call so now we have access to that table in our scripts we can call all of those functions as we do here and when we do call those functions they're being executed within this script so if you're requiring or getting the module in a local script which is in player GUI or somewhere else it's located on the client it's going to run on your computer it's going to run in a client environment but if you run it on the server it's going to run in a server environment you know in a server scripts so for example if you're requiring a module on the client which is trying to access something in server storage it's not going to work because it's running on the client whereas if you do it in the server it's gonna work because the server has access to service storage or as the client does not so very simple we just pull it all all of our functions in this table return the table and then whenever we require it it's essentially just running the module scripts and returning whatever we returned so in this case the module table back to our variable here in the scripts we now have access to all those functions okay module scripts they don't have to be used just for functions so for example I've just changed the module variable in the module script to be 350 and so when I say return module obviously you can't say my module countdown or death or call any functions anymore because we've got rid of them we just got 350 so we're returning the number 350 back whenever we require it so my module is now gonna be equal to 350 like this so this is useful if you're having a module for an inventory in your games if you've got information about all the different items that you sell in your game so you had like a shop or a pet shop you could have a module script which in the table you could have sub tables so for example if we just have a pet called dragon and we that has a sub table and it has information about its cost or its I don't know its age maybe the dragon has its own age in years or its health maybe it has 150 HP so you can have all of your different pets or items in your game don't forget the comma or semicolon like this okay I'll just call this one bird okay changes whoops change its cost something else okay but then when you return this table you just have to be called module either you could call it item table or pets let's just call this module script pets module module okay so if I wanted to for example let's imagine that this module script is running in a shop GUI or I know it's not in the client but let's imagine that we need to get all the information about all the different pets that we can buy in the game so we can show them to a user well because we've required the module and it's returning this table of pets we could loop through everything we could loop through this this table of pets because it's now my module because it got returned from the module script back to the service script so we could say for I the in pairs I don't think I've explained this to you yet by the way but when you are looping through a table like this like a dictionary where you've got names of tables like the dragon and so this is going to be a key and it's going to be the value so inside this big table we've got keys and each key has its own value so you can look up the dragon by using the key name dragon and it will give you the the value of that key so when you loop through a table like this the I I usually call it name and that's going to not is instead of being the number so the first index second index it's gonna be the name of this table or this key so in this case will be dragon and the key value will be this table so if we wanted to get the cost we would just say key value because that's the table and inside of it there's a key inside of that table called cost okay so I could we could say prince the key name to begin with and we could print out the cost and then we could print out the age then we could print out what else was it the health okay if you print this out you can see it's printed out dragon then 350 cuz that's the cost and then the age is five and the health is 150 and then the bird five six four to 100 so what's happened is the scripts as this is running the script by the way so it's looked up its required the pet module the pet module has sent back the pets table which is full of all this information about the different pets in the game then we've looped through every key or sub table in that table and printed out the name of the pets the cost the age the health etc so you can see where this is going so if this was running in a GUI you could create a new button or image label for each pet and you could hook up a load of events to it like a mouse button one click events you know mouse button I don't know whatever so that when you click that frame you'd be able to buy that pet so very very simple but you can see where I'm going with this whole module stuff because not only can you hold functions but you can hold information about things in your game because you might want to access the information about the pets in different scripts so you might have a script in the client which is getting all of the names of the pets and all the information about all the pets you can buy to show to someone who's in the shop but you could also have a server scripts that is doing like it's just it needs to check the cost or the health or age of a certain pet so it can just look up in the pet module and because it's a replicated storage it's visible to both the client and the server but the module scripts they can be anywhere and they're useful for lots of the and things but you have to return something from otaru scripts you always have to return something so that when you require you can that you can send something back so again it doesn't have to be a function it doesn't have to be a table it could be a number it could be a boolean you know it could be a an object if you wanted I'm not not really sure why you'd want to do that though so I the main use cases for a module script is for information about things like inventories or tables or you know things that are in a shop but also another main use is for functions for holding functions so you can execute these functions in different scripts okay and so you don't repeat yourself another good reason to use module scripts and for functions is that if you need to update your function instead of having the same function in loads of scripts you'd have to go through and update every single script you can just update it once in the module script and because you're calling the function from the module script in different scripts it's going to update itself because you updated it once in the module scripts it's going to take effect everywhere so that's a very very useful and reason to use module scripts but you shouldn't be using them all the time so don't go thinking that you know every single function that you write you need to do in a module script now if you're only going to use it once in one scripts and don't bother with the module scripts and I write lots of functions that are just going to be used in one script to do something so don't just think that you have to go and use module scripts all the time for everything and because you can you can over complicate things and and you know there they are unnecessary for some things now a lot of other people a lot of people have been asking me about something else called G and what that is compared to modular scripts now G is basically a global variable which can be accessed from different scripts so in this script script one I'm saying under I think it's an underscore G dot awesome variable equals 50 and that's created a global variable which I can access from other scripts so in script 2 if I wanted to print out the value of G dot awesome variable which if you notice I haven't created in script to I've actually created it in script 1 but if I run it it would after two seconds prints out 50 because that global variable has now been initialized by script 1 it was created in the script 1 and so I can get its value and but there are a lot of downsides to this and it's kind of its kind of useless nowadays because we have module script so I just wanted to touch on it cuz a lot of people have been asking about it there are some flaws to it especially if you are trying to get the global variable the G variable before it's been created so sometimes you might be trying to access it but it hasn't been created by the other script yet and it gets really messy as well you can't you can't create one on the server and then try and fetch it from the client so if I created it in script one on the server then try to access it from from a client script it wouldn't work it would just return nil because you can only have global variables which are created on a server you can only view them from the server in other service scripts or created on the client you can only view other client scripts so it's not useful and please don't use it just use module scripts instead because module scripts are much better because you can create a module script and access it from the server and the client if it's in replicated storage and also module scripts are a lot faster as well because G is a old and slow way of having global variables when a quote thinly I am lag from the developer forum who says that module scripts are a much better option than using G and it's definitely what roblox is trying to lean developers towards in my experience G is less efficient causes lag and is less favorable and I would absolutely echo that definitely use multiple scripts wherever you can it's the new practice and G has been around for ages before module scripts so use module scripts don't use G it's a bad practice module scripts are the way you know unlike G variables you don't have to wait for a value or variable to be created with a module script because you know that it's there as soon as you've required it so you could you know go local my pet module equals game require own fat I need to touch on that so I said in earlier in the video a lot of people is the common mistake not to use require I'm gonna show you why so if I was just to say game dot replicate the storage dot pets module and then I wanted to print out the pet module so I want to print out the okay I changed the pets thing by the way to show you something I've removed the pets but I've just had it I've put an index in there called awesome variable so if I wanted to get the value of awesome variable I would just say pet module thought awesome variable okay because it's in that table that got returned to me now because I haven't used require this is just a normal variable for an object so the script thinks that the pet module where the pet module is an object right it's the object of the module script so the script is trying to look for an object inside the pet module so as if there was something inside of it called awesome variable right but there's not an object inside a bit called an awesome variable so it's going to cause an error you can see it says awesome variable is not a valid member of module script and this is because it's looking for an actual object an actual thing like a part or something inside of the pet module not the actual table in the script so when we say require it's getting that return table and so pet module is going to be a table object or whatever we return so if we don't return a table we just return 500 it would be a number so if it's a table and it contains the awesome variable is going to work because it's going to look up the awesome variable inside the table that's going to print out its value which is going to be 500 just like that anyway I hope you found that video useful on module scripts if you did please leave a like share it with anybody you know who'd benefit from this and oversubscribe to my channel for more roblox scripting videos again I have a 23 part and accounting beginner series which is useful as well if you need to catch up on some things that you have forgotten or if there's just some things that you've you've missed the need to learn I recommend you go back and check those out anyway I hope you enjoyed this video thanks for watching I'll see you in the next one Cheers bye