everyone Arvin blocks here with episode number 19 of the scripting series today we're gonna be looking at services now I'll be honest I couldn't really think of a good explanation for services because they are quite that they're easy to understand but just hard to explain so I went online did a little bit of research before I recorded the video try to find as good an explanation as I could find and I came to the roblox fandom wiki site and they've got a little bit of explanation about it but I've only got a paragraph but they say that a service is an object that contains built in properties built in functions events and and that's what a service is it contains properties functions and events and you may be thinking well that makes no sense we've covered events we've covered functions we've covered properties why does a service even need properties I mean I don't even know what a service is yet well you probably do know what a services but you just actually not realized that is a service so we've said that it will have properties yeah so we've got properties it will have functions okay and it will have events as well so events which will trigger when something happens so the event will be looking out waiting for something to happen the functions will you know can be we can use functions or methods on this service to help us do things so for example an example could be destroy that's a function like we learnt in the inbuilt functions video although it's not actually a part of a service that's just a function that we can use on any roblox objects but I do recommend you give the inbuilt functions a video a watch so my channel episode number 9 it will just give you a quick introduction to inbuilt functions and what they're useful for so you should be hot on that but a service is actually these things here in there in the Explorer the things at the very top here so we don't with the things where we don't click arrows on the things that have their own arrows which have things inside these things at the very top level our services so we look at the workspace here the workspace is a service that has properties so you know things like whether it's filtering it enabled that's a property gravity so we have got properties here on these services you select any service you're likely to have properties even if it's a name property but these are the the main services and I'll be honest there aren't many properties or functions because we don't tend to well well services are used to help us in roblox development they help us speed things up instead of having to write our own code to do a simple action so for example instead of writing code which constantly checks to see if someone's bought a game pass there's actually a service called the marketplace service and the game pass service which will which provide us with events which will trigger code when someone buys a game pass so you can see we don't have to write code that's constantly checking to see if someone's purchased the game pass because roblox has built this into their backend so we can use these events to trigger code when someone buys a game pass and immediately we have relieved ourselves of doing all the hard work of checking when someone buys a game pass so you can see how a service can be designed by roblox and they can only be made by roblox we can't make our own services they are made by roblox to make our lives easier so when I say they contain properties well yeah they every service will have a couple of properties but I like to differentiate between two types of services so we have the everyday service that we will use in roblox development so these things so things like the workspace replicated storage server storage players these are I'm gonna call them main services and the reason I call them main services is because well one they're automatically generated and added into our game when the place is started up and when we first make a game they're added into the Explorer there are some services well any service that isn't listed here you have to insert using something called get service you have to insert it through a script so we'll just call them other services so the main services they are the ones that we can we can see their properties because they're already in the game so they're the ones that have properties now other services do have properties as well but the main services are the ones that have properties that were most likely to change it's likely that we're not going to bother with any properties that other services have because usually we just use other services for the events and also for things like the functions that they may give us so other services are things like the the game pass okay so the GP for game passes where as main services are things that we will probably use for storing things you know storing items in the game so like maps and weapons they're what these main service is going to be used for so the ones that are also generated and that we use all the time other things like the game path service there are loads of different services we're probably just going to use them for their handy events and handy functions but you know they probably still do come with properties but we're just less likely to use them because you know really things like lighting they have useful properties like ambient like brightness that allow you to change how your game settings what they look like so you could change the time of day that's a useful property and you know you might even there might even be some properties of workspace that you want to change like gravity but personally as a roblox developer I don't think I've ever changed a property of another service so like the game past because really I just used them for the events so for example when someone buys a game pass I want to use the game pass service to trigger some code we don't really have events or functions that come with the workspace now I'm sure there are just like I'm sure there's properties for these other services but I hardly ever would would use those functions or events because these are main services that are used for it for a small number of things so things like the workspace service script service replicated storage the main use of these things are just for storing objects and so yeah that's why I differentiate between what I like to think of them as two different kinds of services you can class these things over here as your main services because they're things that are always going to be inserted into the game automatically by roblox they're kind of like the essentials right whereas services that we can't see listed here but we can also insert and there's loads of them by the way and you're gonna be asking what how can I find these services and I'll explain in a minute which are handy for a couple of things so you're gonna have loads of services that only do there are only useful for for certain times so you're not going to be using the game path service all the time that's only useful if you're working with game passes so that's how I like to think of them we have our you know main essential services here which we use all the time and that's what gets people confused because they're like oh well I didn't I didn't think this was a service okay granted it is called service crypt service but people don't understand that this is a service when I you know when we're saying get service people oh what's a service well this is a service but it's there's also another type of serve service we which you are likely to use game get service for because everybody says to me okay what's the point of using game get service I see loads of people using it but you know what's that useful for people think oh you have to a service it's only a service if you're saying game get service so if I'm saying game dot workspace that can't be a service hour in blocks because you're not saying game curran get service workspace well actually it is a service workspace is a service just like everything else here in the workspace that's at the high top level obviously this script isn't a service because it's inside of something so it's not at the top level so a service is gonna be at the top level of the Explorer it's going to be top of the hierarchy we have a look at the Explorer over here you can see that's the services here are are at the highest level of indentation right there here whereas anything inside of the service is here at this smaller red line so you can see the gap between them this is indentation just like you would tab a script you can see anything that's on the outer edge here is basically at the top of the Explorer so it's at the top of the hierarchy so we can tell that it's a service so and a lot of people ask me this so what's the point of saying game get service well some services are already in the game automatically put in the game for us as you can see here like workspace players call GUI lighting replicated first on storage service crypt service self storage basically every service that I've highlighted here is automatically added into the game because they are the ones that are used the most and that are essential to roblox development you are probably not going to use every single service in roblox for your project so it is useless and it is a waste of space having them all in the Explorer plus it would be it would make the Explorer very very long and that would mean that you'd have to scroll through all the services in what's already a very long Explorer if you have lots of items inside each service so we have our main services over here which are children of the roblox game so that's why we say game dot workspace because all of these services are going to be children of the game because game is that is the highest thing we can go to so some of these services will be automatically well it they will be already here already inserted into the game just like all of these ones highlighted because they are essential to to our game and their walk they're going to be used quite often by us however there are some services which might not exist when the game runs so we will need to insert them basically and there will be some as well which are not loaded by the time the game has run because the game runs very quickly and your script will run almost immediately after the game has started running but by that time by the time the script starts running all of these services might not be loaded into the game yet because there are quite a lot of services the other services I'm talking about here as well which aren't going to be fully loaded by the time your script runs so as well as that there are some services that you just can't access by saying game dot service name because it will just throw an error and an example service which does that is user input service you don't need to know what user input service does but it is a service that is required quite often by developers which we do use when we get on to things like mobile development so if I was to just say game dot workspace for example well that would be fine I've got a error here because it is expecting me to write something else but if I was to say games like user input service for example and then I wanted to call one of its functions here so if I was to call this function and what this function would do just to give you a further example of what services do I said they provide you with functions that give you useful information so this function you have to look very closely in the bottom left corner of the screen by the way I'm afraid it is called get connected gamepads and what they would do when you call it it would return to you would give you information it would give you a list of controllers that are currently connected to your computer so if you have plugged in a controller and you ran this line of code it would tell us the information about all of the controllers that are currently connected to this work to this computer that we could use in game so if I was to run this it says user input service is not a valid member of data model now data model is basically another way of just saying game as in game dot workspace so that's game which is a which which houses all of our services it's basically telling us this error is saying well there is no in user input service you haven't loaded it in yet so there are some services which will give you errors like that now most sir well there's quite a few services that are other services that aren't you know automatically loaded where if you did say game dot service name it would still work fine if you didn't say get service but most are services most services that that are not these main ones here that you have to actually load yourself you would have to use gate game curl on get a service and what that does is it goes and gets the service and loads it into the game and so it's good practice to use game get serviced all of the time because it is possible for services to not be loaded by the time that you are running code and you also have services like user input service which just require you to use get service to load it in and it just will not like you if you say game dot user input service so because it's hard to remember all of the services that are like this and just to stop you from having headaches in the future around do I need to use get service on this service it does you no harm just to say game get service and then in brackets in speech marks you just put the name of the service like this it will do exactly the same thing as if you were regularly gonna say game dot user input service or game dot workspace but you can be assured that it will work so if I try this again boom no error so it worked and there are no connected game paths to this computer anyway so you can see when I say game get service it works a charm so if the service that you are trying to use is not there because when we say game dot user input service these scripts immediately thinks that this service is already in the game like a main service so it's going to look for it then it realizes that it's not there so we would need to add it to the game somehow but what gets service does is it firstly checks to see if the service is there and if it isn't there it will create the service for you so it will add it into the game for you which is just what we need because get service will check to see if it's there if it's not there it will create it for you problem solved so that is why we use get service because there are some services which will not be loaded into the game when the script runs and so it will create it for you but there's also just some services which are weird in the fact that they don't let us say game dot service name they just have to be so weird that they have to make us use get service because I don't know I think the people that made roblox Lua are trying to play some games with us I don't know who knows but it's just good practice as a roblox developer to use game get service with the name of the service going here when you are inserting or trying to use a service which is not a main service so you don't need to say game Curlin get service for these ones here because these were already inserted into the game the only time you would use these you would use get service on one of these main services is if you have changed the name of a service so you can change the name of any of these services they will still do the same thing so I could change this to doc right so from now on I would have to say game dog dots time of day equals I don't know let's just let it to nearly midnight and if we were to run this script guess what it's going to become dark but that's because I changed the service to dog that's why we have to say game dot dog what time of day so if you were to then say lighting and you've changed the name of the lighting it's gonna get confused it's gonna give you the same error because it's try to look in the game for a service called lighting it's not found it because there is no service called lighting anymore yes there may still be a service that does the same action as the lighting service but it's called dog so we've been looking for lighting not for dog so if you wanted to insert lighting again you'd have to say if you want this code to still work even though you've changed the name of each after say game get service lighting got time of day and it's going to look up in the game for a service called lighting and it couldn't find it so what it did was it created the service let's just have a look at this again it creates the service called lighting so we've now got a reference to it in our code but it's actually changed the name of it again to dog because that's we've told the game what we want it to be called so what will happen is it will basically create the service again and add it to the game so we've got a reference to it but then it will change its name which is pretty cool but my recommendation is that you just do not change the name of any services there is no need and if anyone else comes onto your project or reviews your code they're going to be confused it just really is not a good idea so keep all of your services named the same thing but when you're accessing something like game dot workspace it's fine to reference it like this but when you're actually getting a service that is not a main service that's not automatically added into the game you would say game go on get service and then you'd write that service in here so like marketplace service ok so that is what a service is on roblox and what get service is as well I did say that a service has handy functions and the events and we can have a look at some of those I'm not sure if they will appear here yes they do appear so if you were to do a comma a colon after you've got the service this predictor UI will appear and it comes up with your functions you know your basic functions like clear all children and clone destroy but it's not really applicable to a service because we're not going to be cloning a service or destroying it but if we scroll down we'll see that there are some functions and a yes some functions that are useful so such as prompt game pass purchase if I was to use this function which is a function of the marketplace service I code prompt a player to purchase a game pass so I could put a player objects in here so game drop players for Alvin underscore blocks and then a comma and the ID of the game pass so let's just use 1 2 3 as an example now how did I know the information I was going to put in here well if we just step back a bit and we type it out again you can see it's giving us the function and inside of these brackets is telling us it needs an instance so an instance is an object's value and it wants the object of the player and it also then wants a number and that number is the game pass ID you can see it's separated by a comma so it wants us to put in these brackets in the order that it's given us it wants the player to go first so we need to supply a player that we want to prompt this to so Alvin and score blocks and then comma and then the ID of the game pass so I'm going to do 1 2 3 isn't as an example now this code would not work because Alvin rocks is not currently in the game and this script would run before I've joined the game so I would need to actually put this in an event so let's just do game duck players got player added connects function player and do this so because we've now got the player argument which is going to is going to represent the player that joins the game we can just put player instead of game drop players die out and blocks and now this will work with any player that joins the game so when they join the game we are harnessing the power of this service called marketplace service and the marketplace service has given us the extra power the extra tools to be able to prompt a player to purchase a game pass and we've supplied the player object just like it asks for because roblox automatically gets the players object when they join the game and supplies it as an argument so this player argument is going to be the player that joins the game so we're going to want to supply that player with a game pass prompt and we're also going to want to give the game pass ID so we have told the service to we've called this function which is a function of the service so without this service we wouldn't be able to perform this code we wouldn't be able to prompt a player to buy this game pass without this service because the whole game past purchase prompting is it's done by roblox on on the backend so we have to harness their tools for game pass purchasing is all done on the backend by using their services their services supply us with useful functions events properties so the properties would give us information we could get information about a player maybe what game passed they the game passes they've bought we can use these functions though to actually do things just like prompting a player to buy a game pass so without the service we wouldn't be able to do this because roblox as I've said have built this for us and have built it into this service so we as developers have to access these services to then access their their functions so let's play this game and see what happens so I joined the game they player added fires it passes the player argument to the scripts and then these scripts prompts us to purchase the game pass notice how we didn't do any coding to create this GUI to put the the ro books here or even to handle the purchasing when it is bought roblox has done that for us but where has that code to make that happen come from well we've actually required it from the service it's all happening behind the scenes but to access that to make it happen we had to access the service and the service is made by roblox and the service contains all of that useful code on the backend which we can't see we can't see the code that's prompting the player to buy this but we are telling the game that we want it to run we want to prompt this player we want them to ask them if they want to buy this game pass which is why we use the service the service is what houses this code it's what roblox has written the code to it's written the code for prompting game pass purchasing into this service so we just need to get the service and then you've got the service we've got access to all of those functions all of those events so we can then use that service to do things which we wouldn't be able to without them so we wouldn't be able to prompt the game pass purchase without the marketplace service but that is what services are so marketplace service is what our class as being an other service as we mentioned earlier and a other service instead of a main service is what we'd have to actually get using get service it's not automatically in the game we have to get it ourselves using get service but really using get service it's not a huge inconvenience to us when the services that we can get provide us with all this extra functionality to prompt game past purchases etc now services can't don't just prompt game passes there are loads and loads of services but we're not going to focus on them all I just wanted to make clear what our services we will be looking at more services as the video tutorials go on but this is just an example that I am using but there are make more functions that we can use way more functions that we can use with these services so let's just try and bring up the hold on why is the predictor not showing up for some reason no worries if we can't get the predictor to appear you can also check them out I believe in the object browser yes brilliant so go to view object browser and you can see you see these little icons here the ones that look like this yeah these ones it's it's it's a it's a blownup image but you know what they look like so these icons indicate that it's a service so you can see sorry my bad my bad these are not services where are the services a service service service ok it doesn't want it doesn't show the services here for some reason oh it does show the services but it shares the icon with with other with other objects as well so you can't actually tell it's a service unless it's got service on the end of it so we've got bad service for example what else have we got we've got context action service that's one that you won't really need to know much about but when you click it you can see all of these functions appear so we've got our function for binding action and it gives you a summary of what this function will do let's go to the marketplace service areas and we look for the function because this means function this icon here so we've got our usual ones like wait for child destroy clone but as I said earlier we don't use those on services even though there were hardly ever going to use them but we've got new ones like prompt game Pass purchase or prompt purchase if you if you want to prompt them with the tshirts if they want to buy a tshirt you can prompt them to buy a tshirt or or develop a product so we've got different functions for different use cases here so there are loads of different services and you firstly have to get the service and then once you've got the service you can use their functions you can use their properties if they have properties they also have events and things called callbacks which we won't be going into detail today on but you can see we've got events as well so we've got an event here called prompt game Pass purchase finished now what this will do is if we were to say dot prompt game Pass purchase finished kerlun connects function what would happen is and we don't need to use the player added stuff anymore because we're not prompting a player this could run for anybody so if we have a look here we've got some arguments we can take so the player that prompted the game pass their game pass ID and whether it was purchased so we can use this information that the service is giving us and you don't have to use the same names that they've given so they've called it player game pass ID I'll I've called the ID so this data is being passed to our event from the marketplace service when somebody finishes buying a game pass they could have either purchased it or click the cancel button so we can print out player name dot was prompted to buy game pass and then I'm going to put the ID and I'm gonna say they let's say um was purchased and then we can print out what what what it whether it was purchased or not okay let's join the game now if I was to prompt myself to buy a game pass and I've just ruined this through the command bar and I do buy the game pass when the transaction finishes what we'll do it all we've got an error let's just check that out I know what it was is because it's a boolean value and this is a string so we have to convert the data type here so let's just do that and we don't need to do we don't need to do it for the number because I think that will convert it to a string automatically okay let's prompt the game pass again let's buy it and once it's finished it's firing that event so when we press ok the marketplace service is going to trigger the event called prompt game past purchase finished because we have finished with this prompt GUI so when we click OK is going to send some information to this function the player so the it's going to send these arguments and if you haven't watched my video on arguments and events I do recommend you go and watch that video in the series because it is very very useful I believe that the events videos are episode number well yeah 10 episode 10 because we looked at the builtin functions in episode 9 then we went on to events in number 10 and then all that good stuff as well which is very very useful but we also did parameters and arguments in number 7 so go to parameters and arguments number seven go back to events number 10 and as well whilst you're at it go back to inbuilt functions at number nine very useful videos for you I'm not telling you just to watch them for the fun of it you're actually going to learn some good stuff so it's passed the information player who the player that was prompted and that's a player object so that's why we're getting their name property the ID of the game pass which was prompted and whether it was purchased or not so a true or false value let's click OK and it says Alvin blocks was prompted to buy a game pass one two three was it purchased yes it was purchased let's try again this time I'm going to cancel and it should say Ivan rocks was prompted to buy a game pass one two three was purchased oh because I didn't buy it so you can see how the service has basically given us the tools to handle gain past purchasing firstly if we look in the command bar it's given us the function to prompt a player to buy a game pass but then it's also given us an event and that event will trigger any time a player has finished with the prompt GUI so whether they bought or not is going to tell us it's gonna give us all that information and from that if we wanted to code some extra functionality so a quick example would be if somebody has canceled a purchase you could say oh that's a shame that you cancelled here is 50% off if you want to buy it again right and we know you don't want to buy it now but we're gonna try and entice you to buy it even more by giving you 50% off now that's probably against the rules but you can see where I'm going with this so if somebody bought a game pass you could use this event to put some confetti on the screen or play you know like a party popper because everybody's happy that you've now bought to the game pass so that is an example of what it's of what it is used for but that is what services are on roblox they provide us with very useful functions events and also properties so that we can get information about things so things that you would of thought well how on earth do I do that how on earth do i code a game pass all right that is enough where do I start well this is where services come into play because there are loads of services for different things and that's how we code a lot of the things on roblox that you probably weren't sure about so because roblox provides us with that code on the back end and we can harness that code that they've written for us to to deal with good stuff because you think about it we have basically prompted a player to buy a game pass we are we are giving them the ability to purchase roblox item from a game how awesome is that and we have written three lines of code so with three lines of code we have been able to prompt a player to purchase a game pass and we've also written the code to pick up the purchase so you can see that's what the service is for and you can check the ID and if the ID is a certain game pass you can give them certain perks and if it's a different ID you can give them different perks so if you has you could check if if the game pass if ID equals one two three and you had a game pass with ID 1 2 3 that gave you and let's say two times walk walk speed then you could say player dot character dot humanoid dot walk speed equals 500 for example and if we run that because don't forget I'm prompting them with the game pass one two three down here in the in the in the command bar I am using the command bar it's just a quick way to prompt players although this would usually go in a local script in somewhere like the starter GUI so I'm prompting the player I click buy now and watch my speed when we finish hopefully just hopefully uh oh I know why it didn't work because I made it a string not a number because the game pass ID is actually a number my bad let's try that again so I'm prompted with the game pass I'm going to click on the thing when it when I prompt it I click buy now and I click OK and then that event fires and I get super speed because what happened was we finished the game pass prompt and we also need to check whether it was actually purchased because this does fire whether you cancelled the purchase so the ID could have been one two three but you could have actually not purchased it so if the ID is the correct one and you did actually buy it then we can give that player five hundred walk speed so that is just some of the great things that services can be used for and we have had a big emphasis on the marketplace service don't just think that this whole get service stuff and all these functions and events can be used for marketplace service because there are loads and loads of events and functions for different services for different things we've just focused on the marketplace service today because it's one of the most easiest services that you can get your head around and you can tell that my voice is starting to go because I've done a lot of talking in this video and in the last video the last video was 55 minutes long so good one to get your teeth into if you haven't checked that one out so thank you for watching this video as I said any questions please do put them in the description down below and please like the vid subscribe to the channel for more videos and you can subscribe by clicking the avinash logo in the middle of your screen that should come up anytime now do consider becoming a channel member you can click the join button at the bottom of the screen support the channel and get some cool perks as well and I'll see you in the next video Cheers bye