hi everyone welcome to episode number six in my beginner scripting series and in this video we're going to look at instance dot new so it's called instancing and it allows us to create parts and other objects not just parts any object in roblox studio we can create them in a script using a function called instance.new but before we get into that i just need to tell you about class names so objects in roblox studio there's loads of different objects okay if we just click on the little plus icon here we have a list of all of the different objects in the game and there's a lot of them okay we've got things such as the values we've got sounds we've got scripts we've got lights body movers ui ui stuff and we've got a part so i've inserted a part here and we can call this part whatever we like so we could call it um brick we could call it hello we could call it alvin blocks but all of these parts they are still parts they may be named differently but they are still parts and that is where class name comes into the showcase because if we have a look at this property called class name we can't change it we cannot change the class name because it is fixed it's locked because roblox decides the class name of different objects in roblox studio but we can name these parts differently but they will always have the same class name because it tells us what type of object the objects are so in this case these are parts their class name is part and then the class name is usually the default name of an object so if i was to insert a decal then the name of the part of the name of the decal is decal but its class name is also decal but when we change the name of the decal the class name doesn't change so class name it tells us the uh or the original name of the object and it tells us what it actually is if it's named differently you'll see that the spawn location has its own class name any object in roblox has a class name and it tells us uh let's have a look let's hover over to say anything yes it says the string name of this instance is most derived class so it's the base class is the base identifier of objects in roblox and we can also call them instances and that's why we say instance dot new because we're creating a new object a new instance using a script so let me show you how to do that let's go into a script here which i've put into server script service and it's very simple all we need to do is say instance dot new and you'll see here that it does show that we need to provide a string value for the name of the of the part so we need to give that class name to this function we need to tell it which object we want to insert so that's why we use the class name so we say instance dot new and we'll put in that class name of parts and it's also saying it wants an instance for the parent now you can set the parent of this object this new instance from this function so we could say game dot workspace and close it off like that and that will insert a part into the workspace but this is actually not recommended do not do this okay you you never ever want to parent an object uh straight from the function so never ever put the parent inside this function you literally only just want to have the class name of the part and i'll explain why later on but it's very bad practice if you set the parent within this argument here so if you set the parent argument in the function it's very bad for for reasons to do with optimization and performance so we'll get onto that later on but this will create a new part in the game world the only problem is we haven't been able to tell the script um where to put it and that's because obviously i've just said we've there's a performance issue there but what we can do is we can set this to a variable so let's just give a new variable we'll call it my parts and the function instance.new is built into roblox so it will create this object and it will return it so the uh value of my part will be the the parts which we just created because it's going to create the new object and it's going to send it back uh it's going to set it to this variable so we will be able to reference it later on so now that we've done that we can set some properties so for example we could set the transparency of my parts so just like any other object that we reference since we now have a reference to this part which we've just created we can set its properties so we could make it semitransparent for example um we could make it anchored and when once you finally set all of the properties that you want okay then you parent the object so we haven't told the script where we want it to be parented where we want it to to be and to do that we will just say my part dot parent equals game dot workspace now the reason we're doing this last it's very is recommended to always set the parent of an instance last of all the last thing that you do after you've set all of the properties that you want to set then parent it to wherever you want and it just from a performance perspective it is much better to set the properties of the part before you parent it i'm not going to go into why because it's to do with the performance and it just is a it's slightly better than setting the the parent instance in the instance.new function so just one thing to remember always set the parent property last and if you don't set a parent property where you're not going to you're not going to see your part it's not going to be spawned in the game world because the script doesn't know where to put it if we have a look here you can see our part is nowhere to be seen we've got the three which we which we manually generated but the one which came from our script isn't there so what we'll do is we'll say my part dot parent equals game dot workspace and we click on run and it should insert the part into the game let's have a look in the workspace and there we go we have a part and let's see where is it let's click on f on the keyboard and there it is it's hiding just under the spawn location there so we can also set its position and to do that we can set a vector3 value so mypart.position equals vector3.new and we can set some coordinates in the gameworld so for example we could put it in this position over here so 53.422 0.5 32.139 let's just put this in our vector3 value we'll learn a bit more about positions in a future video so don't worry too much about this if you don't understand it and let's click on run and you can see our part its position property was set to this value here so that's how you generate new objects from a script we use the instance.new function and we can put any class name in here it doesn't just have to be a part we could insert anything let's have a look at what we could insert here we could insert a particle emitter and i'm just going to remove these properties and i'm going to change the name of the variable so we don't get confused so i'm just going to call it mype for particle emitter and we can say mype dot parent equals game.workspace.hello because we've already got a brick in here in the workspace so let's click on run and our particle emitter should be inserted into the hello part and it is so as soon as the game starts running our script here executes it instances in a new particular emitter and then that is set as the value of this variable and then since we now have it set as a variable we can reference it and that's why we set it as a variable if we didn't set it as a variable then we don't have a way of being able to keep a reference to this particle emitter because we haven't set the returned value from this function which creates the object and will return the object we haven't set it to anything so we can't say later on particle emitter dot enabled equals false we can't set any of its properties because we don't have a reference to it so what we can do is we can set it as a variable like this and then we can set its properties so that's why we set it as a variable because a variable lets us hold data which we can use later on and we can set the enabled property to false and if we look in our part um we have an error let's see what's happened see oh we didn't parent it there we go so we didn't parent the particle emitter so it didn't get placed anywhere in the game world it didn't know where to put it so that's why you should parent your instances from the script otherwise they're not going to be placed anywhere in the game the game won't know where to put it all right before we finish let me just give you a quick reason as to why the second parameter of the instance.new function which i mentioned earlier is a bad practice first of all it's deprecated so roblox doesn't support it anymore and they recommend not to use it but the reason why is because if we were to set the parent of the object first then the particle emitter is immediately going to be placed into the game world so let's just imagine that we we run the code and we get the line one and the particle emitter is inserted now it's much more costly for the game to look up the particle emitter every time we want to change something so if we want to change the enabled property well we have to firstly look up the particle emitter in the game and we set the property to false and then it has to replicate to all of the clients in the game so all of the players that are connected we have to send this change to them all so we have to tell all of the connected players that we've changed the enabled property to false and so we'll have to look it up and set that property to false so everyone connected to the game all of their clients will automatically have to do this so the change will have to be replicated and so for every single property that we change after we've parented it we have to go and replicate it again and that it will take much more time than if we just didn't parent it to begin with and then we set the properties that we wanted and then afterwards if we were to go and parent it to the workspace well because we already set the properties we only have to replicate the particle emitter to all of the other clients in the game once because if we've set the properties then it's how we want it to be we don't have to change anything else and we can just send the one particle emitter to all of the clients in the game and then there won't be any more data having to be sent over the network about other properties which have to be changed because they're already there they're already set in the particle emitter and we're only parenting it we're only putting it in the game and replicating it to all the different players when we've set the properties that we want and it's good to go so if you don't understand that don't worry too much about it what you just need to know is it is bad practice to use this second parent argument it is supported but don't use it because i never use it and most programmers don't use it nowadays in roblox we just set the parent property once we have um sorry we set the parent property once we've set all the other properties which we want okay so that was a quick tutorial on how to use instancing instance.new in roblox to generate parts you can set it as a variable um so that you can keep track of your objects and change properties in the future and it's a very very useful function you'll be using it all the time in scripting so thanks for watching leave a like if you enjoyed it and i'll see you in the next video cheers