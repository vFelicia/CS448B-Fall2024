now I know this is a really long video and I appreciate that not all of you gonna want to watch it this goes very in detail on events so if you really want to know how to use them you want to get the most out of this you want to know you want to be good at events then I recommend watching this but I'm also going to make a shorter version maybe like 10 minutes teaching how to use events the basics all you might need to know for now so leave that as a card in the top right corner if you want to go and check that out also leave a link in the description I appreciate that you might not have the time or the willpower to watch this fully get that so I'm going to make another shorter video that tries to explain this in a shorter way so thank you hello and welcome to episode number ten in my scripting series in this video we're gonna be looking at events now in the previous of videos in this series we've been learning all about functions variables properties all that good stuff but this is where it starts to get more interesting and more exciting because events are a very main an integral part of roblox scripting and game development they are used everywhere in every game you will be using events and events are what help things happen in game so for example events allow us to trigger things what an event does is it listens out and waits for something to happen and when something specific does happen what we can do is we can we can get off script to do something to do an action when this event is triggered when it listens out for something for example I could tell the script that whenever I step on a banana then I could trip over it and fall over and then when I when I do step on it we fall over so how have I been able to make the script listen out for that and know that when I'm touching that banana or for example how can I do something when a player clicks a button it's all thanks to events an event listens out waits for something to happen and when it does it triggers an action so some reallife examples for example if you had an alarm clock your alarm clock is constantly going to be checking the time and let's say you want it to wake you up at seven o'clock well if the time is 658 a.m. it's not going to set off if it's 659 it's not going to set off but when it gets to 700 a.m. yeah it's gonna turn on your radio it's gonna wake you up so it's constantly checking constantly waiting for something to happen for your alarm clock to reach 7 o'clock when it does reach 7 o'clock it triggers an action that action being that it's going to turn your alarm clock on it's gonna wake you up and with the button when I click the button it's constantly waiting to see if it's been clicked and when it has we can fire an action to happen so events are all around us and you know if you turn on your computer you click on the on button on your on your computer it's gonna trigger it to boot up so it's the same in roblox we can make triggers or we can trigger things to happen in the game using events so let me show you how they work so they're actually quite simple all we need to do is set up an event and then we need to connect it to a function now if you haven't already watched my videos on functions you're completely new to this I recommend you go ahead watch them so that you know I'm talking about actually might lose track so I'll leave a card in the top right corner of the screen and also a link in the description I'm gonna take this nice and slow as well and I'm probably gonna do a couple videos on events because you might think they are a little bit tricky but trust me they are they are quite easy and it just takes a little bit of practice so every I'm gonna start off by saying about an object in in roblox so you know that if you've been watching previous videos you know that an object in a roblox game it has properties so things like its color is transparency its reflectance whether it's anchored or not so there are properties and they define what an object looks like or how its how it behaves in the game you know does it fall through the map if it's angered you can we collide with it etc so we have got properties we've also got functions of objects and we covered that last time in the inbuilt functions video which I'll leave the card to as well if you're interested in that and what that means is that an object can have its own predefined functions for example destroy destroy is a common function built into an object or clone or clear all children as we looked at previously but we also have another thing built into objects and they are events so we have properties we have builtin functions and we have events and an event is something that will get triggered when something's specific happens to that object now to have a look at all the events available there are loads of them that we can track and we can set up to trigger things we're going to go to the object browser so click on View and click object browser now on the Left panel here these are all of the different objects available to us in roblox and on the right are all of their events functions and properties so let's select a part because that is the the base class and we'll use as an example so let's see p4 parts part here we go so I'm going to click on parts and you can see that we have our built in functions these are the the pink icon one so we've got break joints what that does is basically just makes a model or a group of parts if they are welded together they would just fall apart we've said about clone and destroy so these are the different things that we can call on an object to do an action such as cloning it or destroying it but we're not looking at that today and we've also got our property such as anchored brick color C frame these are the blue icons so the things that change the parts doing the objects appearance or how it behaves and then at the bottom here in yellow we've got our event and these are the ones with the lightning bolt this is what we're gonna be focusing focusing on today so we've got loads of different events here and these are things that we can track and what we can do is we can set up a listener and a listener is basically waiting it's it's code that will wait for one of these events to happen so all of these lightning bolt things here are things that could happen for this specific object and don't forget these are predefined by roblox you can't make your own events that wait out for something specific to happen so for example wait for Alvin blocks to I don't know chats a message well you can but you can't just have a really specific event like that you'd have to have an event that there's been already created and then you have to do checks once it fires but if we're just thinking about events that come you know predefined premade built into an object that's what we're gonna be looking at today and these are the ones that roadblocks have built in to the part objects and ones that we can listen out for on a part so we've got touched and what that means is when when a part has been touched by something so maybe it's hit a player of they've stepped on it or something touch ended which is when so if somebody has stopped touching or something has stopped touching a part and we've got these other ones we won't be focusing on yet but these are the events that we can set up to listen out for and when we set them up in our scripts when we say listen out for it means we're telling the scripts that when this event happens when it's triggered do something because they will trigger themselves the script will know when it's been touched because these events have been set up are constantly looking out for whatever is to happen so the touched event is constantly checking to see if an object has been touched but we don't have to do anything else to determine if it has because roblox is doing it in the background because you might be thinking oh well how how how do I know if somebody is stepping on it on a brick or something and that's why you don't need to check that because it's it's already been made for us by roblox and that's why we've got the touched event the touched event is going to be looking out for us it's always gonna be constantly check in we don't need to do it ourselves that's why it's built in that's why it's a built in event so let's choose the touch to them and you can see I've set up a touched event here and you might be thinking oh my goodness how am I supposed to understand this but I'm gonna walk you through it firstly what we do is we get the part that and we're focusing just on the touch Deven right now but we're getting the object that we want to listen out for the event on so in this case we want when this player when a player touches this bananapeel we want them to slip over so well firstly we've got the script inside of the banana so we're firstly getting the banana so we're referencing it so we're saying script dot parents or we could say game dot workspace banana that's what we're doing we're getting the banana and then wrong we have got the banana I'm just gonna write it again to show you we do the dots and like we have done before it shows up all the properties that we could choose but we don't want to choose a property we want to choose an event we want to listen out for when this part or object has been touched by something but we're also see down here that it's suggesting events so we want to listen out for when the banana has been touched so we're saying to the script okay right we want to set up an event for when the begin banana gets touched and that's what we've done we've set up our event but nothing's gonna happen right now because we haven't told the script what we want to do when it has been touched and this is where Connect comes in so Connect is basically telling the script that when the event happens when it gets triggered because roblox is the one that is triggering it behind the scenes in the week I mean it's checking to see if it's triggered behind the scenes we're not the one that's constantly going okay after I touched it yep have they touched it yet because it's happening behind the scenes as long as as long as we've said squid dot parent touched or ever the event is roblox is then or just touched I mean if we've referenced it I mean you could say game to work space dot part touched or script or parent as long as you've referenced it and said the name of the event that you want to listen out for roblox will take care of that roblox behind the scenes will constantly check to see if you know your your event has triggered and that's the great thing about events just like inbuilt functions roblox is taking the work or what away from us we don't have to be the ones constantly checking like with the inbuilt functions in the previous video I said you don't have to be the one if you're calling destroy the the destroy function on a part you don't have to worry about getting rid of that objects you can just say destroy and roblox takes care cover it for you it deletes it so as long as we've said the event name and we have tied it to an object which supports that event because not all objects do if we take a rave al you for example that doesn't have a touched event so as long as the object has the event and you are calling it then it will trigger but we need to tell the script what we want happen when it does trigger we need to set up the action so you have a trigger and you have an action so this is where connect comes in so connect tells the script okay when the event that you just said about happens we need to run some code right so we can set up a function and I said before in a previous video a function is a predefined code that we run at certain times a function we could have a function call it hello and we can just print hello this function isn't gonna run until I call it until I say hello okay so what we can do is we can set up our event to trigger this function whenever the event is fired whenever it is you know triggered when somebody do step on that sparked when roblox sends the signal because they're constantly checking to see if someone has touched it when they had when it when they when somebody has touched that part we can fire a function we can fire predefined code so I've got my function how do I connect it to that event and there are two ways obviously you just saw you know about 15 seconds ago when I before I deleted the the code how it works but there's two ways I'm gonna show you a simpler way first so we've got our game dot workspace banana or script dot parent doesn't matter doesn't matter what you say we've got our parts we need to get the touched event again because that is the event that we are listening out for last the thing that we want to trigger our function when the banana has been touched and yes it has to because it has to be called touched because that is what has what roblox have set the events name we can't do anything about that so you have to say touched so what we now do we want to trigger the function hello when somebody touches the banana so we say Connect and then what we have to do when we say connect we have to do brackets because then inside of these brackets we can specify the function that we want to run so inside of these brackets after the connect we're gonna write hello now you may be wondering do we put the brackets afterwards like we usually do over here and no you do not you do not put the brackets afterwards like this do not do that okay and if you do it will not work I will show you I will play the game and it says attempt to connect failed past value is not a function that is because we are calling the function we are not actually passing the function up here so we get rid of these two brackets or parenthesis may be a little bit confusing but when you are doing connect this way you just with a predefined function in this case because this function has already been defined before we have set up the touch to listener we just give the name of the function okay so now if we play the game it is going to print hello when we step on the banana peel I can trust me 100% is going to work there we go I've stepped on the banana and would you look at that as printed hello and let's just go over why that's happened again but has happened because we've set up a function called hello it's gonna print hello when we call it and we've told script whenever the banana has been touched whenever this event which is connect which is which is basically say it's its own event it's like a member of the part because it sits in the object browser it's an event of that of that part objects when it has been touched we are then because we have connected the the function hello to this event what's going to happen is when the banana is touched then it's always going to run this function no matter how many times you touch it if you touch it one time it will run the function once if you touch it ten times it will run it ten times you can see after the hello it got a times seven that just means that it's printed the same message seven times but instead of flooding the output it has printed it once and then at time seven to show just to shorten it down but what that means is the function hello has been triggered seven times because we stepped on the part seven times now it may just look like we stepped on it once and okay fair enough we kind of did but the reason it triggered seven times is because the touched event will trigger when any part no matter what interacts with that banana when it you know touches it basically and when we walked over it all of my body parts were touching it at the same time let me prove it to you if I select all of my body parts you can see that my character is made up of loads of different parts the left foot left hand left lower arm torso etc you see all these different parts that highlighted in blue yeah and I highlight the banana as well well look when I'm doing I'm touching it they're like what three four five if parts on it at the same time when I'm constantly moving it constantly keeps touching the banana so it's gonna be running multiple times and in the future video I'll learn about how to stop that so that only it runs once ok but you don't need to worry about that for now what you need to know is that the touched event we have tied it to a function called hello what you also need to know is that you must define at the function if you're doing this method you must define the function before you set up the event listener ok the event listener is this thing here this is the event listener because it is listening out waiting for that touch event to fire to be triggered ok when we say trigger and fire it moves the same thing just for context when you step on the banana it is firing the touched events that touched event is getting sent off as being fired then it's being picked up by this event listener okay so this is listening out waiting for us to step on the brick when we step on the brick then we're triggering this we're firing it means the same thing but you can't have the function below the event listener because the script goes in steps it works its way down so it goes line 1 line 2 line 3 line 4 hasn't seen line 6 yet because it hasn't got to it we're at line for where we're currently here we were at line 1 we worked our way down to line 4 we're currently here we won't move on to line 5 until we have executed and completed line 4 and on line 4 we're saying when the banana has been touched connect that's fine but it's when we could say hello he's saying connect the function hello to the banana but because the script hasn't got to line 6 yet it hasn't even defined the function yet it's thinking well what's hello don't know what hello is hasn't been defined yet so we're gonna throw an error and I'm gonna show you that we run the game boom attempt to connect failed passed value is not a function of course it's not a function it's a nil value because we haven't defined it yet only a function when we define it later on so you cannot set up the eventlistener until you have to find the function if we put it below the function it's gonna work fine a tree but you have to make sure you have to find your function first if you're doing it this way there's also another way to set up event.listen as it was the way I showed you in the when I first opened the script I forgot to clear it but what that method is is basically when you want to set up a function on the fly a function that you haven't already set up yet but you can set it up in the in the connect so it's kind of like you're setting them up at the same time you're setting up your event listener and you're also setting up the function that's gonna be fired because sometimes you're not gonna need to define a function you might not want to because you're only gonna use it for when this banana is touched so I'll just show you how you do that as well now so instead of saying hello because that's no longer a function it's not a predefined function anymore we want to define our function in this in this line for in this connect so we want to execute a function that's that does not exist currently so we can just say connect inside of here we're doing the exact same thing basically just creating a function so what we're saying is when this banana is touched we want to want to run some code and we can just power function inside of these brackets kind of justice to do just the same thing basically and I think they call it an anonymous function because we don't actually give it a name whereas in the previous example we just gave it a name hello and then referenced it by putting hello in here whereas in this case we're just putting the function in there so we do function and then pair of brackets for our parameters for our arguments we'll get to that in a future video just like our parameters we did in previous videos I'll leave a card to that in the topright corner in the description so we create our function don't forget we still have to close this bracket off but we haven't added our end in yet so we add the end to close the function and then we add a closing bracket right so what's basically what we've basically done is we've created a function and any code that we put in here so print hello that is going to run so what we basically you can't just say print hello and put it inside this connect it's not going to work you have to put it in a function basically because when you do connect the script always things that you're gonna have a function in here but actually you're not you can don't want to run some code so it has to be you might want to print hello but it thinks that you want to run a function and even if you haven't already created the function you still have to put the code in a function like we just did here but if we do it like this so we basically just create our function we've wrapped a print inside of it and then we've closed it off with an end okay it's not connected to these parentheses or anything it's just a function and their only difference is that we've not separated it with lines so we could do this right this looks more like a function right that we've done previously because it is a function it's just a function without a name we could give it a name myfunc but there's no point and it's not gonna work anyway because it's inside of this Connect so this is an anonymous function because it has no name and if we run this code it's gonna print hello when we step on the banana as it did before and the only difference is that we haven't given a name because we don't need to because we're not going to be referencing it anyway we're not gonna be calling anywhere else we're only calling this function when the banana is touched so that's what it looks like but the way that we format this and the way that we lay out and the way that you're supposed to write it is having the function up here right and then you put the end you put the bracket after the end like this okay so it looks like this you've got your game that works place top banana dot touch to connect then you've got your function okay you don't have two closing brackets you only have one closing here and your last closing bracket goes after the end because if you think about it you you creating your function you're putting your code in there then you're stopping your function but remember all of this code is still wrapped between these two brackets so you've got your closing bracket on the end here and you open bracket here to enclose this function so what we've done is we've connected it to a function that we haven't yet created well what I mean we have created it we've just told the front what I'm trying to say is instead of pre defining the function like we did earlier with the function hello we are telling it we want to run this code when the banana is touched we're kind of doing it on the fly and we set up a function so that we can just once put some code in here because you can't just put the code without a function in the in the connect if you get what I mean so basic rundown we have referenced the parts the objects every object has its own events that we can select by doing dot and then all they all of them show up we then do the name of the event once we've got the name of the event we then have to connect it to a function now that function couldn't already be made right we could have function hello or whatever you want to call it like this print hello and instead of saying connect function we could just say hello like that or if we didn't need to create the function buff beforehand if it only has one use in this event we can just put the function in there we don't need to bother with any of those function variable names or anything we can just say function in here we do the brackets for that function for its arguments or ever then we drop the line and roblox it ends the function for us and it puts that closing bracket to close off this connect and then we set ourselves up so that we can put any code that we want to run when the banana has been touched inside of here so we could say prints hello okay so what's going to happen is when I touch the banana it's going to fire the touched events but then we immediately can because because we've done we've connected that touched events to the function that we created inside of the Connect it's going to ruin that function all the time forever and ever you can see I keep stepping on it it's gonna keep running that function it's gonna keep running that function to print hello so there we go an event is something that you can set up to run a code when something happens in your roblox game now let's get back to what we were working on at the start when a player touches the banana we can make them sit down now I haven't told you this yet but because these events are roblox made their predefined they come with different objects they're already created by roblox and they're done behind the scenes sometimes there is data passed between these events for example when something touches the banana how do we know what ice touched that banana we might want to do something to it for example we might want to make them slip over we might want to if it is a player that has touched that banana we want to make them slip over so how do we know what is touched it and how do we do something to whatever has touched it well that is where the arguments come in when we have these events that are pre pre made by roblox they automatically send data to our function when they are triggered so for example when something touches the banana the touched event will automatically log what has touched that banana part and it will send it to this function as an argument so we've got a pre set argument that comes with this function so whenever you do a touched event there are some arguments that passed you can see if we look in the object browser it says event that's just telling us what it is what these things are if I clicked on a property it would say vector3 or all the data type so whether it's a surface type or vector3 basically an INT is a number so that's the property type if it's an event it's gonna tell you it's an event if it's an instant it's gonna tell you it's an instant but events it says event it says the name of the event that you have to say when you want to listen out for it you can't just make up a name for your event you have to use the one that's given but then and these brackets are the arguments that automatically get passed to your function you've create a function that gets run when the event is fired that's fine but also there are going to be arguments that automatically get passed by the by the event by by the function by by the script sorry because roblox has set them up to do that when something touches the banana the script is going to automatically pass an argument of off the object that has touched it and that is the other part so the other part that touched the first part getting confusing but if we think of the banana being the first part the argument is gonna go in here is the part that touched it you can chords whatever you want you can call it parts that touched it okay you could call it my part but it's always gonna be the first argument because it says here it's the first argument it's the first one it's the only one and it's called other part you don't have to call it other part that's just describing what it is the data that gets sent to our function but when an event is fired sometimes the script will pass data to our function because you might need to use that data well you know for example we need to know the player that touched the part so the script is going to pass the object that touched the part obviously it might not be a player so it's just going to send the object if a part touched the banana it's going it's gonna send the object of that part so usually when we're doing a touched event we call this argument hit that's just like the standard that everyone uses and just to prove this to you because I'm gonna show you that later actually has been sent because it sends an object value not a lot not like text or anything it's going to send like an object so for example the banana and then we'd we'd be able to get his properties so we could say hit dot name if I print that out when we step on the banana and I know this video is getting really long sorry about that but this is gonna get really good a bit if I step on this what's happening is I'm going to step on the banana the touched event is gonna fire and then because we know that the script automatically sends data and argument to our function the data type is an instance that was what I was trying to say with an object whenever I say an instant it means an object in the game so like a part or a model or terrain or camera these are all instances they're all objects so it's gonna send the object that got sent to hit the banana it's gonna send that to the function that we created and we're picking it up as the first argument it's always the first argument if you have multiple arguments then it will put them in order and it will tell you which one to go first so it would say for example if you had three arguments it would have one here one here one here but they would come in order but luckily we only have one argument so you have to worry about that but it's passing the the objects that touch the banana we obviously don't know what that objects might be you know we can't predict the future so we give it a substitute name hit for now and then whatever that object is whatever we've done to hit it will do to the objects so a printing hits name so if the object is a my left leg it's going to print out the name of my left leg which is just a left leg as I said earlier it's gonna fire loads of time times as multiple body parts are touching the banana as I said we have loads of body parts over here that all are going to be touching the banana at the same time but anyway let's just watch the output as I do this it's gonna print out all of the parts that are colliding with the banana because it's going to constantly be firing that touched event loads of times here we go as I keep walking into it printing out the objects that are touching the banana and it's it's firing every time you see a print it's firing that event loads of times because it's constantly checking to see what's touching it so we might have two things touching it the same time but it's gonna fire the event twice so it's not firing the event once all of these different body parts is firing the event once for every body part that is touching and you can see I've stopped moving and it's triggered the event once so it's not gonna keep triggering it unless I move again and because I'm now still my character is being animated so some of the body parts are still moving but if I start to touch it and stop moving it's not gonna register any more touches until I start moving again but you can see what happens is that banana' gets touched it connects because we've connected it to the function it's firing this function and it's sending automatically the event data that roblox has set up behind the scenes that's the that gets sent we're not telling it what to send roblox when they make these events themselves behind the scenes and allow us to use them they are they are telling us what data they will send when one of them is triggered so these arguments allow us to do things when an event fires and get these specific things that are interacting with something so this is just one event and this may seem really confusing to you but I'm gonna try and make it as simple as I can what we're doing is we're referencing the part that we'll get right sorry we're firstly referencing the parts then we're getting the event that we're listening out for that we want to trigger that we're listening out for okay and then when that event happens when it is fired in this case when the banana is touched what we've done is we've connected this event to a function that's going to run whenever the event fires so whenever the banana is touched we're running a function and this function is used to define code that's going to run when the event fires so when the bananas churched we're going to run some code but we can't just run some code without a function so we have to create a function and by doing that we can then have some data sent over to this function to tell us information about the event so sometimes you will pass data from an event to a function and that automatically gets passed by the script you have to do anything in this case the object or the instance that touch the banana automatically gets passed to our function as an argument okay and then what we're doing is this function is going to run and because obviously we have defined the function beforehand before any of these events have fired with having the script what to do when it's fired but we don't know the objects that are going to touch the parts yet okay because the game isn't running but we know that when the banana is touched then we know what is touching it and we can do something with whatever touched it so the data is passed to a variable this isn't this is kind of like a variable and you can think of hit being a variable but whenever we say hit we're actually talking about anything that will touch the banana because it kind of gets substituted so if we think about my left upper leg what is happening is it's printing out the name of the part that hits the banana in this case it was the left upper leg so when the when the event was fired when I stepped on it it sent the left upper leg to this function and it printed out the name of whatever hit the banana in this case it was the left upper leg so I hope this is making sense for you we will cover this more and more it is very very confusing topic I will try and make I will make more videos on this but I'm just trying to make this very simple and easy but please leave any questions you have in the description I will try and answer them in the next video and your questions that you might be having if you're watching this video in the future might get answered in the next one but you all want to know how to make the player sleep over fair enough I'm going to show you how to do that so we know that something's gonna hit we've got the head obviously we don't know what that hit object is it could be a player it could be a part and there are some properties that a player has that's the part doesn't so if I was to say now let me just say the part that's going to touch the banana if I step on it it's gonna be one of my body parts it's not gonna be my players character model if we look in the game when I join my player is a model but that model consists of loads of parts when I step on this banana it's not actually Alvin blocks that is touching it it's not the model it's the it's one of my body parts so the left foot or the left leg which is inside of my player object so if I wanted to get the humanoid which is how we make them slip I would have to say hits thoughts parents because imagine that the hit was the left leg which is inside of my player model to get that player model I'd have to say hit dock parent and if I say Prince hit da parents dot name then it should print the name of the body parks parent so if the left leg all the left foot touched the banana the parent of that part is Alvin blocks and if we're printing out that parents name they prints out having blocks so we've just got my player model by saying hit door parent name so I could say hit dot parent got humanoid because the humanoids inside on the player model you don't really necessarily need to know how to do this yet but the humanoid inside is inside of the player object and to get to the humanoid from the body part we have to say hit dot parent to jump back up to the player model and then dot humanoid because the humanoid is also in the player model and then we can say dots it equals true and that will make the player sit and it will make him look as if they're tripping over the banana peel so whenever I touch the banana it's gonna fire the events and our function runs we makes my body parts parent the model object against the humanoid and it sets the humanoid sit proxy because there was a property of a humanoid called sit when you do that when you set it to true it will make you sit and if we step on the banana you can see it makes me sit so there we go but obviously we can't predict what is going to touch the banana for example a part could touch the banana but a part doesn't have a parent and it doesn't have a humanoid either so it's gonna does n't have a sit property in the humanoid so if I made this part fall on the banana it's gonna cause an error let's an anchor it and see what happens and could probably I need to make what's happened to you why isn't that oh it's a trick look at that that's beautiful and it looked as if it was on top of the banana but it wasn't but let's make it fall onto the banana and zoo Athens ok humanoid is not a valid member of workspace so what's happened is something has touched the banana in this case it's the block and it's true our event because whenever anything touches the banana is gonna trigger that function and hit is now equal to that part it's the part object so we're saying okay the part which is hit dot parent well the parent of the part is work space so this is already going wrong and human own work space has no property called humanoid and there's not even a part in the workspace called humanoid either so it's got confused and obviously when we're doing a touched events and we want to change a property of a player and something else there isn't a player or a player's body part touches the banana it's going to cause an error it's gonna break off script so how do we only make this work for players in the game well you'd have to do you'd have to do an if statement to check that and I don't think we've covered if statements yet but it's something that we're going to go into detail on in the future but I'm just going to do one over here just you and so we're gonna say if and then we can use a function of game dot players to actually check if the part is a player so we can say get a player from character and if it is a player and it's their body part as touch the banana then it's been they're going to have a parent of that body part so hit dot parents then and do an end ok so this is giving you a little bit of a preview into if statements so when we're calling this inbuilt function which was what we did in the previous video an inbuilt function on the player service get player from character if we pass the player model so in this case it will be hit dot parent if it is a body part say a left foot then the parent of that will be Alvin blocks the player model then this function is going to check if it is actually a player in the game and if it is then this condition will be true and the if statement will allow the code inside of it to run if it's not true then it's not gonna run this line of code and then it's not gonna error because if we think about the part touching the banana if hit the parent is then the workspace because the parent of this part is the workspace and we pass workspace to this function this function is going to find out whether the players character model is actually a player in the game so workspace is not a player model it's not a character model and it is not a player in the game so it's not going to allow that code to run what it does is basically takes a model or an object it sees if it's an actual character model of a player in the game because in the game this is getting slightly offtopic now I'm sorry a player in the game you have their player ingame top players but you also have their player's character in game but workspace this is their character this is their player so if what we can do is we can check to see if this character belongs to an actual player in the game and when we say get to play from character it's seeing if a character model belongs to an actual player or an object if it belongs to a player if we pass something that isn't a player such as this part or its parent we say hit door parent because if it was a body part such as left foot then its parent would be the player's model but if it's the part then that parts parent would be workspace and then workspace wouldn't be a player it wouldn't be a character and so there wouldn't be a player in the game so it wouldn't allow this line of code to run unless there was a player unless that character belong to an actual player so if we were to drop the part on the banana again it wouldn't error because yes the touched event has run and yes if we print out hits dot name it's still gonna print out part but it's got to this if statement and it said okay hit that parent oh that's workspace let's try and get that player see if it's a player from its character and the character being hit the parent and then it's figured out that it's not so it's not ruined this line of code but you can see how a touch event will run if anything touches the part regardless of whether it's a player whether it's a part that it's not in the player whether it's a hat whether it's the base plate etc if I was to drop this banana on the base plate you would get the same issue it's anchored at the minute little anchor it boom base plate so you can see regardless of what it touches it still runs the function but you have to implement checks to make sure that it's touching the thing that you want it to touch the hit argument is automatically passed to our function it's automatically passed by the event every event has its own event data that gets passed to the event and you have to check each event to see wallets and event data is aha in this event ancestry change you don't need to know what it does but you can see it has two arguments the child and the parents so these are both objects so if you were going to pass if the script was passing two objects to this event function you would have to put them in order the child object would go first the parent object would go second so you would have your child object you'd have your parent object like that obviously you can name them whatever you want but it's the order you could get them mixed up you could say parent objects and child objects but because this is the first argument the parent object should actually be the child one and the child one would actually be the parent one because you have not put them in the right order you have to put them in the order that you are told to but you can call the arguments whatever you want it's just the data that gets passed to them will be passed in order okay so with our touched event you only have one argument if you have two arguments hit two while hit two is not gonna be equal to anything because doesn't get passed nothing gets passed to the function because touched event only passes one argument is told us only passes one argument so if we were to print hit two dot name hit two is gonna be nil it's gonna cause an error let me show you that it's anchored then just an anchor the banana boom attempt to index local hit two and no value when it's a no value is equal to nothing nothing is set to it so what's happened is if you print out what hit just what hit got name is okay run the game boom it's printed actually it won't have printed because we've printed hit to first and it's gonna error and it won't run rush the script but if we print app hit first hit will get printed this base plate but then it tries to move on to the next line printing hit but hit is not equal to anything because nothing got passed to that argument in the function only one thing got passed to hit because it passes data to the first argument and in this case there was only one argument you could switch it round you could make the first argument hit and the second one called hit and then you could print hit but hit is gonna be nil now because I said before it doesn't matter what you call them the first argument the first the first argument will get passed to the first one here so because we've only got one one argument that gets passed to the touched event and if we put hit to first while it's the first argument so that's the one that the date is gonna get passed to and there's nothing for this there's no second argument so hit is nothing so it all depends on the order of your arguments doesn't matter what they're called we just call it hit because that's the standard what people call it I could call it part that's touched it but then I'd have to replace hit over here and it would do the same thing for print if I play the game it would still slip me over we still trip me up boom doesn't matter what you call your arguments it just matters that all do you put them in if you have more than one argument so Wow 50 minutes long but this was such a good tutorial I think it's taught a lot to you basically in roblox that we can set up event listeners that were always watching always listening in your game always waiting for something to happen in this case we have referenced the object that we are that we want to apply an event to we have got the name of the event from the object browser touched remember there are only a certain number of events we cannot create events only roblox can and they tell us which events we can use in the object browser they are the ones with the lightning bolts we then say the name of the event and then the script will be start listening out for that event to happen but when the event does happen when it gets fired when you do step on a banana how do we tell the script what we want to happen or we have to connect the event to a function a function that will be able to run code code that we want to run when we step on the banana so we say Connect we then open up bracket so we can put our function inside to tell it the function that we want to trigger the function can be a predefined one that we can access by giving its name or it can be in an anonymous one one that we just create on the fly in the connect one that we only want to use for this connect function I always do my events like this I always set them up like this with my function in here I don't bother with predefined functions unless I'm calling that function somewhere else for another purpose if I would say 99% at the time you're gonna do your events like this so you've got the name of the event you've got the object that that event is being applied to so the touch event is being applied to this banana you have to say game choice based on banana you could say script op parent in this case because the script is inside the banana if you took the script out with a banana that would not work that only works because it is a another way that you can reference the banana so you firstly get it you reference it and then you get the event name that you want you connect it and then you put your function in there you get it connect it and don't forget to end it okay so wow that was such a long video on events in roblox if you enjoyed this video please do leave a like took me quite a while to make got more videos coming on event soon because there are loads of events that we haven't covered yet touch is just the easiest event I can tell you about if you didn't understand that get player from character or if statement stuff do not worry we'll be covering if statements in the future what if statements do those they just allow you to check thing to make sure that your code only works for certain conditions in this case we only want to be code to run if the thing that touched it was a member of a player object just to prevent other things like parts that weren't in a player from from triggering it and causing errors so that is the end of this video please please please share the video with anybody you know who will benefit from this share it with your friends share the knowledge and it really helps my channel out as well please use code star code Argan box when buying Roy books or premium on the robots website that is star code Alvin blocks don't forget to subscribe to the channel leave a comment with any questions you have I'll try to answer them in an upcoming video thank you for watching and if you want to go to the next one you can click on the thumbnail on the right side of your screen if you want to subscribe to the channel you can click on the album blocks logo in the middle of the screen thank you very very much for watching and I will see you in the next one