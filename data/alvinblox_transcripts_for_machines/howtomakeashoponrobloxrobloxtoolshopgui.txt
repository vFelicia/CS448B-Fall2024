hi everyone Arvin blocks here in this video I'm gonna show you how to make a simple shop GUI that will give you a tool in roblox to do so you'll be able to have a shop and it will save the tools it will shape save your cash it will also give you feedback if you click the button and you already own the item it's gonna go red but if you don't already own the item and the purchase was successful it's gonna go green so lots to learn in this video so keep watching can I also you remind you that I have a star code on roblox so if you're enjoying my videos you're finding them useful and you want to support my channel at no extra cost when you're buying Roy books or premium you can use the star code Alvin blocks at the checkout and that way I'll receive a commission and it will support the channel at no extra cost to you thank you the first thing which we're going to do is create our GUI so in the starter GUI click on the plus and insert a screen GUI I'm going to name mine shop and inside of there I'm gonna add a frame now this frame I'm gonna set the size so I'm going to set the scale on the X and y axis so that it scales with the screen size so when it gets smaller then the shop GUI will also get smaller but if the screen gets bigger it will also increase so we can set the size property to naught point 5 comma 0 comma naught point to 5 comma 0 in fact I've changed the naught 0.25 to around not point naught point 6 there we go then I'm going to set the anchor point to naught point 5 comma North point 5 this means that when you set the position value the position will be set in the middle of the frame so it's perfectly centered so I can then set the position property to naught point 5 comma 0 comma naught point 5 comma 0 this puts it in the middle on the X and y axis so now it's in the middle of our screen and you can see when I make my screen smaller then you can see that the GUI scale is work that's because we're using the scale properties not the offset properties so once we've done that we're going to insert a UI layout and this means that any GUI elements inside of this frame will get ordered into a grid the next thing I'm going to do is create a template frame this template frame is going to be live easy it's going to show the tools that we have and for each tool we'll copy it and change the text inside the frame to the tools name etc so I'm going to name this frame template and I'm going to go into the UI grid layout here and in fact you can add a few more frames just to see what it looks like I'm going to go into the UI grid layout I'm going to change the cell size because currently it's using offset we want to be using scale so that again scales with the size of the GUI so I'm going to set it to around nine point one so it takes up a tenth of the screen of the frame size on the xaxis and again the same for the yaxis and I need to make it a little bit longer on the yaxis so let's try and not point to perfect so now we've got the grids set up like that now in fact I might just change it to not 0.25 so that it's a little bit wider there we go that works with me so now what will happen is whenever I add a new template if it can't fit on the end of the row it will create a new row for us and they'll all fit in like this so I'm going to add a few more just to see if it fits perfectly and so we've got a bit of clipping so I'm gonna set my frame I'm gonna set clipped it's eclipsed descendants to be true so that it doesn't show any items that are outside of the frame and if you want it to be a scrolling frame just insert a scrolling frame instead of a normal frame and put everything inside of there so I'm just going to go back into the into the glue i grid layouts and I'm going to change the horizontal alignment to Center I'm also going to change the cell padding to naught point naught 5 comma 0 nor point naught 5 comma 0 again this is using scale so what will happen is that will dynamically change when the size of the GUI changes so now that we've got our our grid basically of items in fact I'm not too happy without because it's just a grid and there's nothing else you know there's no padding at the sides so I'm going to set the fill direction max sales to be five so there can only be five sales on each row then I'm going to set the horizontal alignment to be centered and also the vertical alignment to be centered so now it looks a little bit nicer so the next thing I'm going to do I'm going to delete all of the frames all the template frames apart from one so we can customize what it looks like now if you want to you can you can change the vertical alignment if you do if you want them to start at the top we want to start at the bottom I'm gonna keep mine at the top so I'm going to customize my template now I'm going to firstly change the actual frame to make it look a bit better I'm going to change the style to be drop shadow then I'm going to change the border size pixel to be three so we've got a bit of a border on here and I'm going to change the back to be a light blue color and then I can put a viewport frame in there I'm going to set the scale of that viewport frame to take up the entirety of the frame it's inside of by setting the size to 1 comma 0 1 comma 0 so that will fill the X&Y axis because it's scale and I'm also gonna set the background transparency to be 1 now what we can do is begin scripting it so I'm going to create some tools I'm going to put them in a server storage I'm going to create a folder in fact I'll put the folder in the replicated storage so we can see it on the client and we can get all the information about the tools I'm going to call this folder tools just like that now we need to get a loaded tool so I'm going to go to the I'm gonna go to the free model section I'm just gonna insert a few tools to test I'm gonna click no when it says to put it into the starter pack because we want to put it into our folder in a minute so just get as many in as you can we've got a gravity coil here I'm gonna delete the new because it says delete me and what else we got let's do sword okay so cool so when you've got your items just take them and drag them into that folder now we are going to insert a local script into the shop and let's just outline what we need to do in the code so firstly we need to insert a templates for every single item in that folder so let's loop through everything in that tools folder and insert a template for each item now I'm going to insert into this template a text label and this text text label is going to be the name of the object now we can't name this text label just name because it will think that we're accessing its name property of the parent so if we were to say template name is thinking that we're accessing the name property of the template frame so we'll just call it object name I'm going to set the size because I want it to fill the entire of the xaxis in the frame so the whole of the X in the frame will be filled it's going to be 1 comma 0 and then I only want it want it to take up about a tenth or two tenths of the yaxis so when I say the yaxis I'm only meaning this much here so naught point 2 comma 0 awesome I then want it to be positioned at the bottom of the screen so I'm going to set the position to be zero comma zero learning to do anything like the xaxis but then we'll do 1 comma 0 to put it at the bottom but then just to bring it up because it's outside of the frame we're going to set the anchor point so the position is taken from the bottom of the screen so we'll set it to 0 comma 1 the anchor point is where the position is taken from so if I tell the script that I want the position to be set from the bottom then it's going to set the bottom of the GUI to be at that point so it's still within the frame then I'm gonna set the background transparency to be 1 and that's all we need to do so let's loop through as I said the folder in a replicated storage so make a quick variable for that folder local folder equals game don't replicate this storage how long wait for child in case it's not already there yet tools then we can say for underscore because we don't need the I so underscore would be the counter but then we will say it all in pairs folder get children do so we're looping through eat every tool in that folder and we'll say we'll make a variable for the template frame as well local templates equals in fact local yeah local local frame will be the frame first this frame here equals scripts dot parents wait for child frame we can then get the template that's inside the frame so Franko long wait for child template right now we can say template clone we'll assign that to a variable called new template and we need to set the name of the template so new template dot name equals to name then we need to set the text of the object name text label that we just made so new template got object name text equals tool name and then later on we need to put the tool in the viewport frame we'll do that in a bit so now if we test the game we should see if a frame for every single tool now I'm gonna make my template a visible property false and then when we add a new template for the proper tools we can set the visibility of each individual frame to be true so the template one won't show up you click on play we should see it in action oh my bad we need to parent it don't we to the frame so new templates got parents equals frame yeah put it inside the frame so if you click play then you can see we now have four frames for our our tools in fact I've just realized in order for us to be able to click them they it needs that the frame needs to be a text button so very simple all we need to do is if you've not got a plugin that can convert the class just insert a text button and I'm going to name it templates and I'm just going to copy the if I don't to copy anything I can just take my viewport frame and object name and put them in the template and get rid of the frame so your template needs to be a text button but I'm going to set the background transparency of the text button to be sorry I'm going to keep the background transparency at zero but I'm going to get rid of the text called button in it there and if you want to add the order back the border of three and the nice little outline you can do that so just make sure it's a text button and that way we can click it so again I'm going to make it invisible visible property sets false and what we can then do is we'll just create a event for when you click it so we can say new template mouse button one click curl on connect function and we're going to have a remote function a remote function is something that you can invoke which is basically calling it from the client and then we can pick up pick it up on the server and do our checks to see if you own if you can buy the item if you have enough money and if you do then the remote function can send the message back to our local script so whether the transaction was a success or not whereas with a remote event it won't be able to send anything back so we can have some feedback so make maybe play a sound if it went well or make the button red or green depending on whether it whether it was a success or not so when we replicated storage I'm going to insert a remote function and I'm going to call this by item or though you can call it whatever you like so when you click this I want to fire that or invoke that remote function so I can say game got replicated storage by item invokes server now we're going to pick this up on the server so we need to know the item that we've bought so because we're going to name the item after the tool we could either send tool name or new template name because they're going to be the same but I'm gonna send the name of the tool okay so yeah so so when you've done that when you click the book when you click buy item when you click the button it will fire invoke this remote function and it will send the name of the tool so if we go to the servus script service only out of service script so we can do the coding of when you click this button now to see if you have enough money we can do the on server invoke event so we can say game dot replicated storage dot by item dot on server invoke equals function no connect because it's a callback function that means that it will trigger this function when it's invoked and you can return things as well so key because you can return something from the function it's going to be waiting for that function to be completed so a lot of people also ask why are we checking this on a server why are we checking if you have enough money and it's because if you're checking on the client in your local script because it's running on your computer you could exploit and trick the local script into thinking you have enough money or ice on the server the server can see and has the main copy of the game you can't change things on the server so if you try and change the amount of money you have it'll only apply on your computer on your end so the local script which is running on your computer will think that you have enough money to buy it whereas on the server even if you do change your money to 9 on a 9 cache then the server still C is the amount that you had before because if you try and change something on your end on the client it won't take effect now the in on server evoke invoke takes an automatic argument of the player that invokes it that's sent automatically but we had our other argument which we sent and that argument is the name of the item so we will just call it to name so we need to have a amount of we need to somehow and give a price for each item so by doing that we can insert an int value into each tool here so we can say we call the in value cost and then the value of this is going to be its price so if you want it to cost 500 you'd set the value to 500 but you need to make sure you have one of these in each item so right click copy and then select your other tools and right click and click paste into selected and that will paste it into every single tool so just go ahead and update the value change the value to however much you want each item to cost so now that we've done that because we know that each tool will have a cost value inside of it we can say we can firstly get the tool out of the folder because we've got its name so we can say if games replicated storage dot tools curl on find first child will use find first child because if it isn't there it won't cause an error so if it finds the tool name in that folder then we can say if and then what we'll do is we'll actually make a variable for this so we don't have to keep repeating ourselves so local tool equals game that replicate the storage find first child a tool name if the tool isn't there this variable will be nil so we can say if tool then if tool code on find first child cost just to make sure we have that cost value in there and you haven't forgotten it we can then say if tool cost value is greater than or equal to the player's cash we're gonna in we're gonna write some code that will insert a cash value into your player very soon but for now we'll just say player dot leader stats dot cash value then we can say you can buy this item and for now we will just return true okay else we will return false and if there isn't at all we will also return false I'll explain this in a second and if there is no cost of I live inside the tool we will also return false so as I said in a remote function you can return some data back to the local script so when we say return any data that comes after it so this true or this false will be sent back to the local script and we can see this data if we set it as a variable so if we set this to a variable let's call it results then if it returned true for example then result would then be equal to true so we could say okay if results it's true then we know that it was a it was a success else it must have been false so we know it went wrong you can also Reno return strings or numbers or whatever so you could send error messages but in this case very simple just return either true or false so if you bought the item will return true because we know you have enough money and will write some code in the minute to put the tool in your backpack but for now let's just insert a nother script I just like to keep things organized by having different things in different scripts I'm going to name the first one I'll just name it by item and the second one will be called leader stats now inside of the leader starts one I'm gonna say game not players but player added curl on connect function and then we have an argument that's automatically sent for the player that will draw in the game so we can insert a folder into this player so instance new folder folder dot name equals leader stats make sure you call it NIDA starts with a lowercase L and that way just parent it to the players we're also forwarded up playing folder dot parent equals PLR or whatever you've called your player argument when you have a folder called leader stats if you then creates your currency value I'm gonna call it cash so instance new and it's going to be an int value because it it holds integers cash dot name equals cash and cash got parents if you parent this to your folder called leadest as if it's called leader stats then it will appear on your screen in the top right corner and then I'm going to set the value cash till value equals a thousand so we'll have a thousand cash when we begin so we have enough money to buy everything so now if you go into the game by the way you will see that the leaderboard appears and it has your cash so what we can now do if we go back to our by item script because I've set this up before now we have our leader stats it will check if we have enough money and if cash and if we do have or sorry no that's wrong I should be saying if two lot cost or value is less than sorry no yeah if yeah if your player doubly disaster cost or value is greater than or equal to the cost of the item you should be allowed to buy it so we can then say player if you have enough money to buy it we need to determine you look the money so we can say player dot lead is a stochastic value equals players or latest art store cash drop value minus tool cost or value like this okay and that will take the money away next how do we put this item into your inventory so you keep it or we can say local new tool and we'll create a clone of it equals tool curl on clone and then we'll say new tool got parents equals player backpack like that and when it goes into your backpack then you should keep it when you reset so let's just click it and you can see it took away 500 cash and I have the tool in my backpack now let's just reset to make sure that this actually just stay in your inventory I'm not entirely sure if it does so we'll just double check that okay it doesn't okay I know what's happening so if you want it to come back once you've reset then you there's either two ways to do it so you could either clone it again and create a second version of the tool but this time put it into player dot starter gear and when you put it into player dot starter gear it basically is put into a saved list of tools that will go back into your backpack when you die for that specific player but obviously it won't save now I hope maybe in a future video to do a saving part so this is a temporary version because when you save tools we'd probably have a folder which would which when you die we'd save the contents of that folder and then load it in and that way we can keep track of all the tools that you have but for now this is a way that when you buy at all and you you obviously get it and then you reset and then when you respawn you will keep it because it's gone into your starter year and whenever you reset it will copy everything out of the starter get back into your backpack like that so we know that's working fine and actually it's very very easy to save the tools that you have I'm going to show you how you can do that now so let's insert another in fact note we can go into the leader start script and do it there so first things first we need to get the datastore service so local data store equals game get service data store service then we can get our datastore code on get datastore and just give a name for your data store for your place you can call it whether you want it's basically just naming the data store uniquely to your game so it doesn't matter what you what you call it I can call it my datastore next what we need to do is we need to save the players tools when they leave so game the players dot player removing player removing is an event which will fire a function when a player leaves the game just like player added it will provide you the argument for the player that is leaving so what we can do is we can create a table we'll call it tools table and we're going to loop through all of the tools in your backpack and add their names to this table so it could be if you had a sword and a gun that the table would look like this so it's the names because you can't save objects to a data store but what we can do is then get that data those names when we load into the game and look for them in the tools folder and then clone them into your backpack so for underscore comma tool in pairs player backpack get children do if tool in fact I know we can just say instance sorry yeah if game don't replicated storage dot tools curl on fine first child tool name then so if it is an actual tool in replicated storage then we can say tools table dot sorry table dot insert so insert into the tools table tool dot name an obviously tool name is a string so we'll just insert the name of that tool into the table and then we can write to a pin a peak or wrap it in a peak or function because a peak all is if the code inside of that peak or function errors then it won't break the script because it gets caught within the peak or so local success a peak all will return to values success and an error message so and that's going to be equal to P call function like this and there we go make sure you have a closing bracket on the end there because it's a got two brackets here one pair there and another pair here so inside of here we can say data store curl on set async we need to have a key so a key uniquely identifies the player's data this can just be their user ID so player user ID capital you for user in capital I ID then a comma and then we need to tell it the data we want to write to the data store under this key so it's going to be the tools table so we are going to save the tools table to the data store under this key so this is the unique key which we can use to identify that data so we know that this data is it's got the key of the place user ID so once that's saved we can then when a player joins the game we can create a variable for the data we then need another another P call so local success common error message equals P call function para brackets on the end there and also an end with a closing bracket needs to go here and a lot of people ask are what's the point in the P call or the thing with data stores that data stores they can break they can go down they're unpredictable at times and when they do go down they can cause errors in your script and if one data store error breaks the entire script it stops it from running so no one's data is going to save if it breaks or as if we put it in a P call if there is an error the script won't throw up and break the entire script it will keep running for the rest of the players in the game and if there is an error then it will either say that this is false and it will put the error message here as this variable so success can either be true or false and if success is true there won't be an error message but if success is false error message will be populated with the string of the error message but anyway we inside the P call we can say data store or we can set data to the data store gets async and we need to give it the key to uniquely identify the data stored in there and that is going to be the player's user ID and of course they won't have any data at all so data could be nil so we have to check if data is not nil then we know they have some data and we can loop through all the data in that table and copy out the tools from the replicated storage into their backpack so for underscore comma tool and name because it's gonna be the name of the tool not at all objects because we saved the name into the tools table so for underscore comma tool name in pairs looping through the data do and so what we'll say is if game don't replicate the storage tools kernel find first child so if it finds a tool with the name if it finds that the stored tool name in replicated storage if there's an actual tool with the same name then we will say when in fact we'll just store this as a variable so we can you have to write out again so local tool equals game truncate storage also find first child so if tool if the tool is actually there in the replicated storage then we can clone out so local new tool equals told colon clone new tool parent equals player dot backpack and we'll do the same thing again we'll clone it once more so it goes into their starter gear as well when it goes into their starter gear then it will be put back into the backpack when they respawn it won't get lost and one final thing to do is a bind to closed event so if you're the last player in the server it's possible that the server could close down before your data gets saved so adding a bind to close means that any code within the bind to close will be executed before the service shuts down it delays the server from shutting down until that code is executed so we can do game column bind to close and then inside this function at these brackets or parentheses we're going to do a function like this so you should have an a closing bracket on your end here and then we'll loop through all the players left in the game so for I comma Player or underscore it doesn't matter we're not going to use the index variable so I'm just going to say for underscore player in pairs game dot players get players we're going to loop through all the players currently left in the game and we're going to say well we can just now copy this code from the player removing that's going to get there it's going to get their tools and put them in a Tools table but I'll change the player that our variable to PLR as well so it's just consistent with the rest of the code because it's looking up the players backpack so this will loop through all players in the game and it will put all of their tools into a table for each player and then set a sink in that it will store it in the players data store so it's basically running the player removing event for every player that's currently left in the game if you're the last person in the game the server might shut down before your day to get saved anyway let's try this out now to make sure that data stores work firstly publish the game so go to file click on publish to roblox go ahead give it a name whatever make sure it's published once you've done that go to game settings at the top click on options and make sure enable studio access to API services is turned on this way you're able to test out your data stores from roblox studio because you're a ruling you're enabling it to access the external API spurred a historic cetera that would only be usually available in a row box game anyway let's buy our rocket launcher classic saw and graph the coil for some reason put the graphical into my backpack but we'll check that out later on but I've left the game I'm gonna go back into the game and you can see I saved the rocket launcher and the sword oh I know why it's because I ran out of money in the game so as well if you want to save the amount of money that you have that's very simple as well but for now let me just give myself even more cash give myself 5,000 cash here and you might see that I have more tools that's because I bought them a few more times to actually see why it wasn't working but now I can buy my gravity coil on my pistol etc and they're getting added to my backpack and I leave the game it saves perfectly there's a little delay just because it's delaying the server from shutting down so it can save my data since I'm the last person here but then if I play the game again I should have all of my tools there you go they're right back where they where they were when I left so birth perfect so how do you save your couch well very very simple so go down to the player removing and we will just copy this set a syncline we're gonna paste it again but this time we're going to change the key so I'm going to do player user ID but then I'm going to also add on to it cash okay I recommend you also do the same with your tools once so we can know what you're saving to each key so that you have a unique keys for each because if you if you if you have the same key it would overwrite your data so I'm going to change player user ID to play the user ID dot dot tools so it concatenates them together and up here I'm going to say play that user ID dot dot tools my list okay and then when you when you've done that obviously changed the tool table to play out dot leader stats doctor cash value now see if you're using a different currency name change cash to the currency name that you're using and then to load it we can create another variable yeah okay we'll say local cash stored and then we'll say cash stored equals datastore get a sink and the the key is going to be player dot user ID dot cash and then we can say if cash stored is not equal to nil then cash value equals cash stored else if their cash datastore is nil and they don't have any cash stored we can give them a default value of 5000 so if you want the default number of cash to be a certain number change this so if you wanted to give them zero cash to begin with set it to zero okay I'm going to set it to 100 in fact now said it's a 5,000 because we won't be able to afford anything and also one last thing to do in the by item script we don't want people to be able to buy a tool that they already have so what you can also do is say if tool in this top if statement here if tool and not player dot backpack curl on find first child tool name then in fact we'll say starter gear because if if they have it equipped it will be taken out with their backpack but it will always remain in the starter gear so let me go in and show you again so this time if I try to buy my data hasn't loaded oh I know why it's because I updated my key because I added the tools in cash it would have reset so don't worry about that it won't do that anymore it's just the first time because there's a brand new key I changed it so if I buy a rocket launcher I can no longer buy another rocket launcher i buy a classic sword I can no longer buy another classic sword so I can get all the items but never buy them again you can see my cash has gone down if I eat the game and then go and rejoin then it's going to load them all back in its gonna load my cash load everything and you can see I still can't buy it okay very last thing how do we make the items appear in the viewport frame very simple so click on stop and go back to the local script now what we need to do is we need to clone the object out of replicated storage and into the viewport frame so local object equals no yeah local object equals tool colon clone because tall is the object an object that parents were going to parent it to the viewport frame equals new templates dot viewport frame then we need to create a camera so that it can look at the item and we can tell the camera the viewport frame which camera is going to be looking at it so it can start rendering local camera equals instance new camera camera dr. C frame equals is going to be objects dots let's think about this so each tool is going to need to have a part named handle ok make sure every single tool has a part name handle they usually do but make sure you have one called handle object handle dot C frame okay object handle dot C frame and then we'll say plus object dot handle dot C frame dot look vector times five okay that is going to basically add five studs on from its forward facing direction and we'll just we'll put it in a in a C frame new so C frame new so this will be the position where the camera is and then we'll do a comma and we're going to then tell the script what it's going to be looking at so when we tell the script where the camera will be positioned so imagine that this is our item and this is our camera really bad at drawing of a camera but firstly we're telling it where it's positioned so here but then we're also telling it where to look out so is it going to be looking here or is it gonna be looking here so when we then say object got handle dots dot position because it takes a vector3 the value then in fact they should take object a handle drop position here my apologies so we're giving it two position values because C frame is position and rotation but it takes vector threes here we're telling it where to be positioned which is here and what to look at then we can say camera parent equals new template dot viewport frame and a new template dot viewport frame dot current camera equals camera just like that okay so when we set the camera then it will start rendering the object now I hope this works let's go and test it out and there we go the items are there they do obviously some of them they aren't you know totally right that is because that the handle so he wanted them to be better I would recommend that in each sword in each item let's take the gravity core for example I would have a I'm just trying to think about this hmm one thing I can think of doing is taking the position and then adding vector three new and you can add on some height or some rotation or position the camera to the side a little bit so it's looking down on the object maybe that will help but still you're able to see the item yeah there you go that makes it a little bit better so each items going to vary of course you can't get it right for each item but it is displaying the items in the viewport frame which is good you can obviously tinker around with those values that it's just a very quick quick addition a quick way of adding it on for me there so play around with it that's a very simple way of showing items in a viewport frame I'm sure you'll be able to find out a better way of doing it but they go a simple shop that's what I wanted to teach you today how to make a simple shop on roblox and if you want to provide some feedback on the text buttons whether the transaction was a success or not because why the returning true or false in the local script if it's true then you could say new templates and if we just look here it was a success we could set the background color 3 to a green color so new template back ground color 3 equals color 3 dot from RGB and you paste your green color in there else if it went wrong you could do a red color so we'll do a red like this copy it only set it back to white which is 2 4 5 2 4 5 2 4 5 I'm gonna paste my red color in there then I'm gonna wait about a second and then I'm gonna set it back to 255 255 255 which is white so now when you click it it's going to return either true or false and depending on that I'll hide the template in a minute you can see it's really it's gone red because we already own that item but if you didn't have it already and it was not in your starter gear so of course to remove it from your starter gear and this was removed from the backpack it would go green so there you go and don't forget to put the template set the frame template dot visible to false so it won't appear last little thing that we've forgotten to do is to add a button to make the shop opening closed so in this green GUI I'm going to insert a text button I'm going to set the anchor point to naught point 5 comma naught to point 5 and then I'm going to set in fact now I'm going to set anchor points to 0 come on 0.25 because I only want it to be perfectly centered in the middle on the yaxis because I'm not going to moving it away on the xaxis so I'm going to set the position to 0 comma 0 comma naught point five so it's middle on the yaxis comma 0 just like that then I'm going to make sure text scale is set to true I'm going to set the text to shop and you can change the font if you like and you can also change the color to whatever you like once you've done that's I'm gonna just name it um open or button awkward it button in the local script just outside of any other code we're going to say scripts got parents code on wait for child button dot mouse button one click colon connect function and we're gonna say script the parents in fact will create a variable for the button at the top here local button it calls the script up parent wait for child button and then we can just say button mouse button one click and then inside we can say button not button it will be the frame wearing it so frames not visible equals not frames not visible and the knot will set it to the opposite of what it currently is so if it's open it will close it and if it is closed it will open it so that is how you add the button to open and close the shop obviously my shop do I doesn't look the nicest but you can spruce yours up a little bit very easily for example if you wanted to change the color you could set the style to custom and then you could change the color if you wanted to have a text label that said shop at the top you could you could set the anchor I'm going to put it inside a folder so that it is intact so it isn't bothered in fact no sorry I'm going to put it into the into the shop GUI but not in the frame and you can just get the position of the frame and sets it to the position of the text label set the anchor point to not point five not point five but change the Y so it's just above the shop a little bit so at not point to or not 0.15 like this and then let's have a look so the frame of the shop is north point five on the xaxis so not point 5 comma zero and then about not point 1 comma zero and on the yaxis and then if you do tech scaled change the text say shop and if you want and get rid of the border size pixel you could set that color to be maybe a dark color and the frame is a little bit lighter and that's up to you mine's going to be white as I said like that but yeah that's how you can spruce up the shop a little bit obviously you know you can do a much better job than then I have done and also one final thing if you are going to have any GUI elements outside of the frame and you'll need to also make set the visibility of them as well so for example scripts dock parents got header dot visible equals not scripts got parent got header dot visible and then if you make them both visible set to false then they will appear and disappear when you click the shop button really we should have designed it a little bit better so that you had a mainframe and then you had all your GUI elements inside there but you know it still a good working shop and if you did want to change it so that your header and frame were combined in one big frame then that is possible that is definitely possible so you could put the header in there but then create a sub frame inside of this one and put the UI grid in there and put the template in there as well and then sets the subframes size to 1 comma 0 1 comma 0 so it takes up the whole size or you could change the Y so that maybe takes up threequarters of the screen and then you position it a quarter of the way down at not 0.25 and then your header could take up 1 comma 0 for the entirety of the frame and then not point to 5 comma 0 for the y axis just like that and then get rid of that not 0.15 and also I'm going to get rid of the anchor point on the yaxis okay that might sound a little bit confusing but basically what we've done is we've just made a new vehicle changed the old frame and put the UI grid and template into a new frame that's taking up three quarters of the of this big frame here and then that way you wouldn't need to do this with the script apparently I had to go to doc physical stuff like that but what you would need to do is I'm just going to change the name of this frame to be item frame what you would need to do is go into the local scripts and when you're parenting it to the frame we would say frame dots item frame like this and let's just see if we've used the frame anywhere else I don't think so so let's make the main frame invisible and click the shop oh it's not pairing let's just check that out let's check that see how it's not working frame doctor visible script got parent wait for child frame that seems to be working ah I know why it is because I think it's hanging here so you're saying frame wait for child template but the template is now actually inside the item frame so we'll say frame wait for child item frame wait for child template okay so this is just because I've changed how my frame looks and that there you go they're appearing and I can it will enable and disable so that's very good and as I've said again you can play around with the UI grid layout if you want that padding maybe you want it to start from the center it's all up to you how you customize the stroke I've just shown you a way of how you could customize it but obviously when you do start customizing it you'd have to change your or your frame as well and your script set up to make sure everything's still being depended on it's obviously it was depending on the template being in the main frame we moved it so you to update those sort of things anyway that's the end of this video if you'd like to take the source code it's available to my channel members you can click the join button below to become a premium channel member and then that's available in my members discord server just a way to help support my channel or they're watching the video and copying out yourself from the vid is a great way to learn so thank you for watching don't forget to subscribe and like for more videos and obviously even the next one Cheers on by the way data stores are quite hard to debug if you're having problems with them I recommend using the data store editor plugin by crazy man 32 to help you look into them if you have any but yeah thanks for watching and I'll see you in the next one Cheers