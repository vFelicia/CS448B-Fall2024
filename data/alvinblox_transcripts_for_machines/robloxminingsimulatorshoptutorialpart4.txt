if you new to my channel make sure to subscribe and click on the notification bow so you never miss out when I upload a brand new video so now we're going to work on the buy button and the create transaction remote function so that we can check to see if the player has enough money and give them their item so let's insert a local script into the buy button and we're gonna start off by justifying just defining one variable at the moment which is gonna be a model name and that is gonna be equal to script dot per and dot parent dot model name which is the value of the model which we're currently looking up well they're gonna want to have a mouse button one click event for when the button has been pressed and we're going to want to invoke the create transaction remote function and there's gonna be an outcome from this whether we can buy the whether the the purchase has been granted or declined maybe because they don't have enough money or something so that outcome is gonna be either true or false well not true or false because we're gonna we're gonna send back an error message and but we can say game don't replicate its storage but create transaction hold on invoke server and we're going to pass through as a as a parameter script dot parent dot parent in fact we can just say model name doctor value okay so we're passing the name of the model and then on the server we're gonna check to see if the player has enough of money to buy that item and if they do we will return true and we'll let them buy the item so let's head into our main server script so that we can script this create transaction remote function in the server so it will go into the script and at the bottom here let's begin by saying game dot replicated storage but create transaction but on server invoke equals function and then we'll drop a line so we've got our end added in and in the in the local script we're passing the name of the model so if we go back into the server script we can put the arguments for the player that invoked the remote event and the name of the item so this will be the item named instead of the object so not object okay so now that we've done that what we're going to do is we're just going to define two variables the first variable is gonna be how much cash the player currently has so we can say local money equals a game dot players find first child player dot name so getting that players object so the player objects in the game dot player service and then we want to get their leader stats dot cash because that is where the money value is stored we then want to get how much the item costs the item that they want to buy so to do this what we're going to do is we're going to say local cost equals game dot serve storage then we're going to go to tool models and then in square brackets we're gonna say the items name so it's just item because it's not the the object for item so you instead if it was the object would say item name but because we're passing the the actual name not the objects we just did say item and then we're gonna say dot information dot cost okay so we've got our two variables in here now what we need to do is we need to check to see if they have enough money so we can say if money is good if money value is greater than or equal to cost value and not so we need to make sure they don't currently have the item equipped and not game dot so storage not player tools and then inscribe brackets we can say player dot name because that's the name of their folder find first child whoops on first round item then the line so if they have enough money and this item isn't already they haven't already bought it then success and the player has enough money so we can go along with the rest of purchase however else if cost dot value is greater than money dot value not greater than or equal to just greater if they if the cost is higher than the amount of money they can only have and not game dot server storage but player tools same thing dot name and square brackets find first child Isum then we know that they don't have enough money but what if the player already owns this item well we've got this and not we've got this and condition here so they have to have enough money but they also have to have not got this item okay but if they have got the item we can say else and we can return back to the local script that it's already bought okay so if we just return this string this is gonna be our error message okay so what I think we're gonna return true if it went well if the purchase succeeded else we're gonna return an error message if something went wrong so this else/if will only execute if they have enough money and if they so if they don't have enough money and they don't currently own the item if we get to this else here we know that it can't be that they don't have enough money it must be that they already have this item so returning that's all he bought but in this else if here we can just return not enough cash okay yeah sure I'm just going to keep it as three different words you can do it however you want you need to make sure that in the local script you're using these same strings so a returning non enough cash they don't have enough cash but if they actually do have enough money and they actually you know are serious with this purchase they want to buy an item we can now begin scripting it so that we can give them the tool and we can update their equipped value so what we're gonna do is firstly whoops back firstly what we're gonna do is we're going to deduct the cash from their balance so what we'll do is we're just going to say money value equals money value minus the cost okay so cost stop value so this is just taking the money on their balance because they're paying for it we then want to unequip their tools because we're going to be clearing their backpack of tools because they might already have a specific tool now let's imagine you're making mining simulator you only want them to have one tool at the time so we're going to unequip their tools to put them all back into the backpack so though he can search through them and loop through them because if you're holding an item when it's equipped it's not you know it's not actually in your backpack it's actually in your player so you can go test that out and you'll see when you equip the item it goes into your player model until you unequip it which is when it goes into your backpack so we need to unequip the tools to have them all in one place so that we can loop through them absolutely we might miss one out when when it's being held so we can say player character and then we say doc humanoid pull on own equip tools just like this and then what we want to do we want to loop through all the tools in their backpack so you can say 4i comma tool in pairs player dot backpack get children because everything will be in their backpack now all of their tools we want to check to see if that tools name whoops i spelt it wrong we want to check if that Talton name is equal to the value of our equipped value because remember we're updating that equipped value whenever we equip an item so when we get the item so if that tool is currently equipped then we've got the item we've got the tool which we need to destroy from the players backpack so he can say tall destroy so we've now deleted the equipped tool from their inventory from the backpack and now what we can do is put the new item into their backpack and set it to equipped so we can say player doctor equipped value equals item remember it's just the name of the item so now we can take the tool and clone it by saying local tool equals game dot server storage doc tools hold on find the first child item clone and then we're gonna say tool dot parent equals game dot server storage got player tools and then we can say player dot name and square brackets because that's their folder so we're placing it into their folder first and now we're just gonna duplicate this code there's two lines of code and paste it just below it and we're going to just change the parent to their backpack so you can just delete the game dot service storage top player tools and replace it with player dot backpack just like that and then we're just going to want to return true to let the client know that the transaction will success and there were no errors so that is all we need to do before the crate transaction remote function now we just need to do the client side of it so that we can show on the GUI that everything went well and that the player can now have their item so we're gonna go back into the Buy button here and you can see we invoked the remote function and we set it to a variable called outcome and what we want to do is we want to check to see if the outcome is equal to true so if outcome equals equals true then we know that the purchase was successful okay and they've now got that tool so we can say script parent look text equals equipped because when we buy the tool we just equipped it by setting the equipped value and we put it into their backpack so it is equipped so what we're going to want to do now is check to see if the outcome was something different because they could have been a not enough cash or you might have already bought the item so that's what we have to deal with so let's drop a line and say else if outcome equals equals not enough cash then we're just gonna write a comment saying that they do not have enough cash and then I made a spelling mistake and then we're gonna do the other outcome so we say else if outcome equals equals already bought then so if they've already bought the item and they're clicking the button again then they will be wanting to equip the item so we can say if game got players dot a local player that's the player which the script is running on dot equipped dot value is not equal to model name dot value so if the item which he's looking at right now he or she is looking at right now is not the equipped item then and then have clicked the button then they obviously want to equip this item so we're going to want to fire at one of our remote events called equip tool so we'd say game dot replicated storage the equip tool but on fire server model name value now this is going to make the make the tool equipped okay just without any of the of the purchase restrictions or checking to see if he has enough careful deducting the cash because he's already bought the item he just wants to equip it so we're gonna have to create a separate function for this remote event which we'll do later on we will code the equip tool event so that so that we can give the player the item then we just want to say script parent dot x equals equipped because the player will have sit by them so that's all we need to do for the buy button that's that's everything I've done for the buying however we just need to work on updating the buy button when the item changes because if they're looking at an item and it costs $500 and then they switched to another item which costs $1000 we need to update that and we also need to update the status of the Buy button so whether it's the play needs to buy that item whether it needs to be equipped unequipped etc so to do that we're gonna say script doctor int look parent not parent doc current box so that's the number of the ox that were currently on not changed in fact we're gonna say get property changed signal and that's going to be the value and let me say connect function and we can drop a few lines now this is going to run when the value of the current box has changed so we can say a local model equals nil because that's the model which we're going to be using or the model which can be found from that box so we can say a local box name equal script dot parent dot parent got parent dr. current box in fact what we can do is we can put this at the top of the script box name and then we can change this script a parent a parent around a coin box to just box name so box name get property change signal value connect function so whenever the current box Berry has been changed this function will run so we're doing the same thing as we did earlier on we're going to say for AI comma objects in pairs game got work space the item roller and then in square brackets from us a box box name drop value so if oh if current box is equal to zero and that will be box zero we're just adding box to the number that we're on I'd get children come on get children so we're just getting as we did earlier on we need to ever do here actually we're at it so we're getting all of the objects inside of that box which is inside the item roller I'm going to check to see if the object is a model so if objects Jack Cohen is a model then we can say model equals object so we're just setting the model variable to eat objects okay so now that that's done we've got our actual model object we want to get the tools that are already bought by that player okay so we're gonna say our local tool was bought equals and this is another one of our remote events I'm going to say game got replicated storage no he said get tools bought her on invoked server like this what we're going to do is in our server script we're going to program this remote function get tools port to loop through everything in the players folder inside player tools and just send it back to the client as a table so let's go back into our script and at the bottom we can just right you know insane game replicated storage but get tools bought on server invoke whose function and then we can pass our argument of player because that's the player who invoked this remote function so which client invoked it and drop a line to add their end in and we just want to create a table called tools and we're going to loop through all of the tools in that person's folder which inside player tools you can say for i/o mark let's zoom in a little bit go or I object sorry tools but I told in pairs game dot server storage dot player tools and then we are just going to give the name of that folder which is their name and square brackets Curran get children do inside of this for loop we can just say table dot insert tools all dot name so inserting we just change tools to tool when searching into the tools table the name of each tool in their player tools folder so it will just get everything in their inventory and put all of the names of those objects into that table and then we're going to return that table back by saying return tools so we're sending it back to the client so now let's head back into our local script in the by button and our tools bought should look like this now it should be our table and it will hold a bunch of different tools tour name so you could have a mega drill for example you could have I know an epic drill excuse my spelling we could have a gun you know all of your tools in your inventory are gonna be in that table own only the ones that are for sale they're in your shop so what we're going to want to do is we're going to want to use this table I'm going to loop through it so we're going to say for I comma tool in pairs and we can loop through the tools wart table do and inside of this for loop we're going to say if tool equals equals model name drift the tool in that table is equal to the model right which we've which we're currently looking at then we know that it's already been bought by the player so what we can do is we can set the text of the Bible turn to equip okay else we know that it hasn't been bought yet so you can same scripts what I mean hasn't been equipped yet so we can say script up pair under text equals equip so what we're doing here is we're just making it so that we don't have to check every single item each time this is just an automatic function which is going to this one is basically going to check if you own the item and it's going to update the Buy button to make it so that you either have to equip that's all unequip the tool or buy it so it's pretty cool and we don't need to touch this anymore because I think we are pretty much done with the buy button I think we are yep and what we can do is we can go check this out and play the game and most of it should work we haven't got the we haven't got the functionality for the equip tool yet but that shouldn't affect anything so let's say game located storage open shop and you see says 550 here and I'm not sure if it should be changing or not no I think it's better yeah we haven't bought the items yet so we have how we have an error let's have a look so I found the issue and the issue is in the create transaction event because when we were trying to click on the buy button there was some issue and it said leaders that is not a valid member of player and you see we have not got any leader stats in our player and that is because in the saving script I forgot to give a parent to the leader stats and the cash during sale a disaster parent equals player and then if we say cash dot parent equals alias that's and if we say in shop dot parent equals player and equipped dot parent equals player as well it should all work so you always have to give a parent to your values so that they know where to go and you can see we now have five thousand cash in the game and all of our other values are in the players were equipped in shop etc you can see if we click the button it says equipped and I have now got the superpower drill in my inventory which is pretty cool and you can see if we go on to the next drill it says $550 if we go back to this one it updates to equipped so what we've just done is we've programmed it to check if we own the item and if we do it will say equipped and we change this one you see we've now got the better power drill equipped and this super power drill has changed to say equip and our backpack item has changed to a better power drill I've bought them all now and you see we've got a nice responsive Buy button which will change depending on each on status of each button so there we go so next what we need to do we need to program that equip tool remote event which we were working on earlier in the buy button this is so that if the player has already bought the item they can equip it again so if we head into the Buy button here you can see we are equipped we are firing this equipped tool remote event with the name of the model which they want to equip so let's go back into our server script and create in a function from event connected an event so we can say game but replicated storage but equipped tool but on server event turn on connect and in brackets would say function another pair of brackets and the arguments for this function will be player and tool name so the name of the tool which we which they would like to equip so let's just zoom in a little bit and what we're gonna do is we're gonna want to make the unequip their tool so it's just oh it will be the same as giving the tool when they buy the item but just without these currency deduction so we can say player dot character humanoid and on own equip tools like that and then we want to check to see if they have anything equipped and say if I dot equipped dot value is not equal to nothing so if they have something equipped we want to find the item and destroy it and get rid of it from there what we want to get rid of the equipped we want to basically clear the equipped value so we want say if a player backpack find first child dr. equips value so that's gonna be the name of the tool then player dots it for backpack and in square brackets we can say player dots a cool whoops drop of value and we can say destroy so we're finding the item which they currently have equipped in their backpack and destroying it we then want to update the equipped value to the tool name and we want to clone the tool and put it into their backpack so we can actually scroll up here and just copy this tool is this code from earlier which will clone the tool and I'm just paste it in down here in our equipped all event and that should work okay we just need to change item to tool name over here and there we go the equipped tool event is fully scripted so now if we go and try it out again we should be able to equip and unequip items which we've already bought so let's go and fire the event to open up the shop and if we click buy an item you can see it's as equipped now let's buy another item epic power drill now what you wanted to reequip the super power drill which we've already bought if we click it you can see we now have the super power drill equipped so I think that's it for the Buy button we've now got camera done we have got most of the bots walk we've got all of the buying done and most of the client coding done the only thing left to do now is to close the shop to do data saving to be able to open the shop when they walk up to maker 88 and we'll also want to make sure that when the player resets everything will be back to normal so what we're going to do is we're going to program these close shop event now okay so we're gonna be scripting the exit button so what we're going to do is we're going to create a another local script in the exit button and inside of this local script we're going to say scripts parent or mouse button one down that's a reverse button and click connect a function okay so anything in here is going to run when the exit button has been clicked so first things first we're going to want to make the frame invisible so that the player can see themselves in the game world again we're then going to want two sets that we set some values so we're going to want to say script parent dot parent parent current box dot value equals zero so resets in the current box because the next time they go into the shop they'll be back to the first object they'll be looking at the first object so we want to set that to zero we're then going to set the model name back to zero it's a script or parent or parent this time dot module name dot value equals zero then we're going to set the colors of the back and forward buttons back to just completely lit up so they're both enabled the script or parent or parent got forward dot image color 3 equals color 3 dot from RGB and then completely white will be two four five two four five two four five and remember this is a tint it's not actually the color of the image it's just a tint it like a hue and saturation on an image editing program I'm gonna do the same thing again for the back button color.3 but from gb two five five two four five zero five and then we want to work on manipulating the camera to get it back to normal I remember except as scriptable at the minute because we're manipulating it we want to put it back to the default so we can say they get to a game dot workspace not current camera doctor camera type equals custom and then we're just going to want to set the camera subject so what the camera is looking at game don't work space dock on camera but cameras object equals game but players local player dot character doctor annoyed and then we're going to want to set the we're gonna wanna fire the clothes shop event soon say game the replicated storage close shop come on fire server and this is so that we can clean up things on the server to get ready for the next time that you want to use it so if we head back into our server script we're going to want to start working on this bow shop event so what we can do is we can go back to script and at the bottom here what we're going to say is game don't replicate a storage but close shop on server event coming up next connect whoops function player and that's gonna be the player let's trigger this event and what we want to do is we want to set the players humanoid route Part C frame back to a different area away from the shop so that it doesn't trigger again so let's just go and insert a part into our game we're gonna call it this part TP part okay with a capital T and the capital P for part and drag you want to take this part and you want to drag it wherever you want the player to be respawned when they exit the shop now I'm just gonna place mine in front of the shop so they're not standing on this part again which will trigger the shop and we're gonna want to just put this brick in the air okay because if the plays a little bit too big and it's on the floor they might get stuck in the ground like and then or they might get flung off the map so make sure that you put it above ground and you anchor it okay it must be anchored if it's gonna fall out the sky you also need to set can collide to false house your player might get flung off the map because it will intersect with the pot and you also want to make this part completely transparent so set transparency to 1 once we've done that we can go back to our server script and we can say game don't workspace and then we want to have the player's name because we don't actually know it yet so we put it in square brackets got a humanoid a root part but see frame equals game dot workspace teepee parked but see frame so we're teleporting them to the exact location of that part so they'll go there and then they'll fall onto the base plate we then want to set their walk speed back to 16 which is the default value if you're selling something like a double a double speed pass you might want to add some code in to get their speed or something but to keep it simple we're just going to set at 16 the game dot workspace paired up named as we just did got humanoid gotta walk speed equals 16 then we're gonna wait 2 seconds and we're gonna set their player dot in shop dot value to false so now they're completely out of the shop and it should be good to go you