this is a quick tutorial on how to save data in your roblox game so you want to save data and to do that you need to use the datastore service okay so to get the datastore service don't mind these events down here we'll get to them in a minute to get these service we're just gonna firstly make a variable okay and just to guess it was the game come on get service and the name of the service you might have guessed is datastore service okay so we've got the service and now we need to create a datastore okay so to create a datastore once again we're going to set it to a variable so I'm going to call the variable my datastore and we then just going to set it to datastore service to create a new datastore you say curl on get data store and give it a name inside of these brackets so I'm just going to call it my datastore just like that alright so we've made our data store and now we need to store some data inside of it so each data store will save values for players okay so you can you can save data to a datastore by saying the datastore which is my datastore and then at Curran set a Singh okay so set async saves theta okay and we need to give two pieces of information in order to save data okay we need to give the player who we're going to save it to and we also need to save a value so we need to have a unique identifier for each player okay because each player is going to be different to another and different data is going to be stored for four different players okay so a unique identifier is something such as the player's user ID we don't use their name because if a player changes their name then their previous data is going to be lost because it's tied to that name but their user ID is constant and doesn't change okay so we will use the players ID and then we will save a value to this datastore so if you were saving some cash then you would save the amount of cash so what we're going to do we're just going to create a simple script which saves of cash you have in a game and then it loads it back in when you join the game so what we're going to do is we're gonna get rid of this line here you know how it works now how does how to actually save data but lets us go ahead and quickly add some leader stats for this player and also it will add some cash for them because we what we'll do is once we've got that in the game we'll save it and then we'll load it back in and when they leave so we'll just say local leader stats equals instance dot new folder leader start/stop named leader stats and parent it was player you should know how this all works a datastore is it's kind of like an advanced topic so you shouldn't already know how to how to do this stuff so I'm just inserting a cash value now inside of that leader stats folder okay cash dot name was cash and cash parent leader stats okay so I've got some cash in there got our leader stats if we go ahead and check this out and game should have the leaderboard there there we go yep and now what we can do is we can firstly go down here into player moving and work on saving the data okay so whenever you want to save the data I said you need to you set a sink now sometimes data stores can fail and roblox won't tell you about it data source and can sometimes go down something might go wrong when saving and so the players data might not be saved and this can cause an error in your entire script and cause it to break so we don't want that to happen and so what we'll do is we're gonna wrap the set async and something called a P cool and if there's an error when we do that set a sink then it's going to be contained within that peak or it's not going to break the entire script okay so that's why we're gonna do a peak also do one it's very very simple we're firstly just going to write out our set async so we can say my data store okay and we can say set a sink and we're going to want to then our unique ID which is going to be the players user ID and as well as that I'm going to concatenate it because if you're having multiple keys in one data store say that you're saving and their cash there and their XP okay if you use the same ID so yeah the same key which is just their ID you're going to overwrite it when you save the XP and when you save the calf so we need to make them different so I'm writing the plays user ID and then I'm concatenate it with a string okay and this string is just going to have a hyphen and the value that we're saving so in this case cash okay it's up to you it just makes it unique okay so once we've put the key in we're just going to then and get the the value which we're going to save for that key so it will be player dot leader stats doc cash whoops made a spelling mistake Lee stats not to cache dot value okay now we can't say cash because it's a local variable and it's only within the scope of player added and because outside of that event into the player moving we have to say player or Lida starts to cash the value okay so that has got the data but obviously we need to wrap it in a peak or so we can say peak or and then in brackets we're going to do a function here so while she's putting the set async in a function and then we're calling it with a peak or if if that makes sense and this is the function and we're just wrapping it in peak or here with these brackets so peak all there that will contain it if there's an error but it also gives us two bits of information whether at least whether whatever happened in the function was a success and if it wasn't a success if there was an error it will tell us the error message so we save these to a piece of data to a variable okay so we've got the success so whether it was a success or not and we've also got the error message that's it will return back if there is an error and then we just say is equal to this peak or okay and so if everything was a success then success is gonna be true okay so if success is equal to true or just if success then we can print data successfully saved okay so because a player data successfully saved okay Alps if it was not a success we can print there was an error when saving data okay and then I'm just going to do a war and Warren is the same as print it's just in orange text so you can see it I'm gonna print out the error message okay so if there was an error it's gonna print out what the error message was and there you go we've just saved a player's data to their key and now we need to get that data so he can load it to their cache so go back into the player added event here and we need to do get a sync so we're going to do exactly the same thing again local success comment error message because in another peak or equals P call function okay and inside of here we're gonna do our gets async so it's pretty much the same as set async however this time because we're not actually setting a value to the data store we're just getting about you we only need the players key so we can say my data store get async and inside of here we're gonna add their key so player dot user ID dot and we're gonna have our string as we've concatenated it to cache player ID user ID and then cache that will be the players key and that is getting the data but we need to store this data as to a variable okay so I'm going to create a variable outside of this Pecor and I'm going to call it local data I'm gonna leave at nothing for now so it's currently set to nil I'm just making this this variable right now initializing it okay so if if the P cool it goes smoothly and we get the data I can then set data to whatever is returned from the get a sync so data isn't going to be nil anymore cuz it's actually set to something but if it wasn't a success okay then data is going to be nil okay so we can say if success then we can say data and we just want to say cash you equals data okay so success is basically the same thing as saying if data is not equal to nil because if there is something set to data we know that some data has been sent back here from the guess a sink so you can say if data they know but I'm going to say success because if it wasn't a success then we can get our error message from the Pico and we can say warn error message and we can also print there was an error whilst getting your data okay so that is how you get data and this is how you save data okay very very simple a lot of people think it's really hard but really it isn't and you might want to consider saving data at other points in your game not only when the player leaves okay so maybe you want to save in timed increments in case the server switch down maybe when they buy cash in your game then you want to save the data as well because if they've just made a purchase you want to make sure that the cash that they've just bought has been saved etc and I also need to let you know there are a few limits with data stores so you if you keep saving too often then you'll hit a limit and then those data store requests will become throttled okay and that means that you you're not allowed to make any more data store requests for a while because you've hit your limit because if you made too many requests then data stores would start to crash okay you can read more on the roblox developer hub ok they've got a great article on it and I'll leave a link to it in the description and but essentially there are some limits you need to make sure that you keep within them here we go datastore errors and limits you have some error codes here if you're getting some errors and we have limits here so on get async you can only send 60 plus the number of players currently in game times 10 so if you have two players in game then that would be thing 80 requests per minute and so if you throttle you thought oh if you go over this this limit and you can see for set async and on update as well which we might look at in a future video so thanks for watching this video it was on how to actually do data stores if you want to see in action we can go ahead and check it out ingame and I'll show you that it worked if we just go ahead and load up roblox here and just wait for the game to load and what we'll do is we'll give ourselves some cash and then rejoin the game so if I just say console and go into the server here and I say game dot players got Alvin underscore blocks don't need a stats Doc's a cash value equals 50 okay and then I leave the game and let us wait for the server to shut down you don't have to do this we're just going to show you though if we go into a new server there we go then hopefully our data should have loaded and we should have 50 cash when we join there we go we are 50 cash and if we go into the console and click on server okay it didn't print out for us and because if we go back into studio here let's go back in whoops there we go and because we are we didn't print when it was successfully loaded so you can print and it would have printed out success but you can see it didn't print out there was an error so everything went well and our data was added in so there you go that's how you date stores in your robots game to save cash I'll do some videos on how to say what other things which has items on a plot in a base to new infantry although it's quite similar it's all about though just using set a sink and get a sink so I hope that was useful if it was please leave a like don't forget to subscribe to my channel because nearly a hundred thousand subscribers now so thanks for the support and I'll see you in the next video