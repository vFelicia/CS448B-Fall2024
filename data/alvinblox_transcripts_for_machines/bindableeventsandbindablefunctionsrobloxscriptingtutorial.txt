okay I'm going to show you how to use bindable events and bindable functions in Roblox so what is a bindable event well you might have come across a time where you've wanted to share some information between a scripts perhaps you have a function which you want to call from another script but because that function was not declared in the same script you cannot run it directly from your other script let me give you an example so if we create a function to delete the base plate okay and in that function we do indeed decide to delete the base plate what if I wanted to call this function from another script now there's not really any point in doing that because you could just delete the Basse plate from another script but let's imagine you have some code which you only have in one script which you want to call from another script so I've got my main script I've got my other script and in my main script I've got the delete Bas plate function how do I call this function from another script okay well I'm going to show you how to do it so you'll use a bindable event and a bindable event is essentially an object which you can use to trigger some kind of action in another script you can call it from one script and then you can have a listener set up in another script to listen out for it and then you can call a function from that other script so essentially it's one script telling another script to run some code or run a particular function that exists in that other script so here we go I'm in my other script and I want to call the delete base plate function but the delete base plate function is in the main script so we're going to create a bindable event in the main script and we're going to call it delete base plate you can call it whatever you like doesn't have to correspond to the function's name in any way at all and then we'll just say game. servscript service main script. delete base plate fire colon fire okay and then in the main script we'll say script do delete base plate doevents connect function okay like this and I suppose it's probably best to put this in a wa for child just to make sure the event gets created and then inside of there we can say delete base plate or even we could just say delete base plate like this so let's just do a task. weight of 2 seconds so we can actually see this change and if we click on play you will notice that after 2 seconds the base plate gets destroyed even though we didn't run the function directly from the main script we merely set up an event listener which would listen out for when the delete base play is fired and it would fire the function when that event does get fired and then it's from the other script where we fired the bindable event so that is how it works that's it now what's the difference between a bindable event and a bindable function well this is where it starts to get interesting because I've not really shown you any practical examples of where a bindable event would be used just yet but one in particular would be if you had a data store script okay we'll just call this data store and let's imagine when a player joins the game you'll load their data store into a global table okay so you might have you know if Alvin blocks is in the game then I'll have a table with my data file where you can make any changes you could make changes to the amount of cash that I've got you could make changes to the amount of you know items if I place down an item you'll want to update this table now let's say that I have another script which is it's got the task of handling item placement okay so when I place down an item in this script I now need to update my data file but the data files are handled in the data store script because it's in this table so how can I from this placement script how can I send some kind of request to add this new item that I've just placed down into my data file without having to use the data store service to load my data store again because my data file is probably already open it's already open in this data store script so I can't access it from another script because then we run the risk of overwriting my data so what we can do is we can use a bindable event and so it would be a simple as saying if we just change the name of this to place item for example we could say game. server script service. data store. Place item fire and I could pass some information such as the item name uh such as table and perhaps I could also pass its position if I wanted to and then we could in our data source script we could set up a listener for that very event and we take the item name we take the item position and we could say table. insert we'd also want to you know pass the player um but we'll just assume that we know that it's Alvin blocks in this example so we could say data stores Alvin block and we could insert into the items table this new table we could say the name equals name position equals position just like so and then we could print out the data stores table if we just have a look at this in action you'll see where I'm going with this in a second um with the bindable functions which we'll get onto just give me a pass. we there so we can actually see the changes and after two seconds you'll notice that in the items table we now have that item listed there so that is a practical example so where do the bindable functions come in well bindable functions they do the exact same thing as bindable events except they also allow you to then return some kind of value or message back to the original script you called it from so let's say for example this didn't go wrong maybe it went wrong sorry maybe it didn't go right something happened I couldn't insert it into the table some kind of error occurred maybe we couldn't find the data file maybe the data stores were down I don't know well how do we tell the placement script that something went wrong so that we could potentially show a message to our player or prevent the item from being placed because it couldn't go into our data file well that's where the bindable function comes in and the bindable function it's a callback which means it's always going to the the purpose of it is to send some information back to where you called it from so let's turn this into a bindable function and we'll call it Place item we'll just remove the bindable event well since this is now a bindable function and it's a call back we have to call it a little differently so rather than saying fire we will say invoke okay and since we're expecting some kind of value to be returned we're going to create a variable I'm going to call it something different than return we'll just call it value this is going to be the the value that gets returned back to our placement script from the data store script so we're going to keep the parameters that we gave and in the data store script we also need to change this do event it's going to be do on invoke and we're no longer connecting it to a function we are giving it a callback function so it just becomes on invoke equals function which means we no longer need this closing bracket okay so now we will need to return a value so we'll just return true because everything seems to have gone well and then this value will be true because it's what we've returned so if I was to return a string for example that said hello then our value would be hello and if I was to print out hello sorry if it was to print out value it would be hello as you can see so there's there's not really a practical use for a bindable function in this case because we know it's it's going to insert into the table uh I'm trying to think of where it would be useful here maybe if the player was buying an item right and we checked to see if they could afford it then you could say if can afford item or if you can't afford the item then you might want to return false or you might want to return cannot afford okay and then you could check to see if the value was can afford and if it was cannot afford you'd probably want to delete the item what you need to know here is that a bindable function will let you return some kind of value or message to the original script so you from your placement scripts will be able to know if the operation that you're trying to conduct in this function was successful or not okay that's the basis of it um so it's allowing you twoway communication really you can send that message from the placement script to another script you can you can signal some kind of code to be to to start running in another script but not only that because what I've just outlined is what you can do in a bindable event you can trigger some code in another script you can trigger a function in another script using a bindable events but with a bindable function you can do the exact same thing but return something back perhaps you're expecting something from your bindable function you know you could even request a asset right we could we could create a new instance right we could create a new part or a new folder in the workspace and we could return it and then in the placement script we could uh actually do things with with that value so we could say value dot uh we'll just print out the name right we'll print out the name and then you'll see what happens so the folder has been has been created in the data store scripts and we've returned it which means we now have a reference to that folder that we've just created despite not having created it in this placement script because we created it in the data source script and we've just returned it so that's that's it really bindable events allows you to trigger code in a different script bindable function allows you to trigger code and also send back some data whether that's an object a number string whatever or even a true or false value just to say everything went well that's it only other key difference is a bindable function will yield so the code in my placement script will pause until something is returned from the bindable function now I think there is some kind of timeout if a value doesn't get returned after X amount of seconds it might carry on you might need to qu me on that but it's one of those things which you probably don't really need to worry about okay but bindable functions they yield so if I was to do a task. weit of 3 seconds here and we had some code underneath watch what would happen I click on play the bindable event has fired but the code code underneath it is not running until that value gets returned from the on invoke function so I hope that video was useful uh one other thing to note is that binda bles can only work in the environment that they are set up in for example you can't have server client here if you you have a bindable event on the server it will only be able to be called and listened to on the server if you have a bindable event set up on the client then you can't call it from the server right that's where remote events remote functions come in I do another video on those in the future essentially the same thing except instead of calling it from the server to the server or the client to the client it's the client calling the remote event or the remote function between the server and back and forth okay so we'll do another video on that but this is all you need to know about binda bles um I hope they're useful and like I say they work just the same on the client although you'd be using them between two client scripts so thanks for watching let me know if you enjoyed the video please subscribe if you find it useful let me know if there's any other videos you'd like to see and I'll catch you in the next one