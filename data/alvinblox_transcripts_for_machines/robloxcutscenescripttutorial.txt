so a lot of people want to know how to make cutscenes in roblox very very simple so firstly insert a part this is where the camera is going to be at the start to begin with so what you need to do is anchor the part that can collider to false and whether you make it transparent or not doesn't really matter I'm going to leave it half transparent for now so we can see it but the most important thing is if you go to the surface tap in the properties window and you click on front surface so if you think of the camera we're going to position the camera to be in this position so it's going to be looking at where the front surface is so if you do that and you just position the front surface to be rotated and positioned in the way you want it to be so the front surface will be wherever the camera is going to face okay so when you've got your first one let's just name it you know test one let's insert another part and what you can do actually is set the front surface to a motor so you can actually see it it's now pointing out from the front surface you can see that it's going to be in this direction so let's just duplicate this and put it somewhere else over here for example so now we've got our two parts I'm going to name this one part two let's go ahead and script them okay so to make a tween it's very simple we have to do it in a local scripts because the camera is controlled locally on the client for each player so in our local script I've put it in the starter GUI we firstly have to make a variable for the tween service then I'm making a variable for the camera because that's what we're gonna be animating and I'm also creating a variable for the length of the cutscene so if you want it to last 12 seconds keep it at 12 but change it to the amount of seconds you want then I set up between info now this is required to tell the script what our tween should look like so we have to give it the time which is going to be in seconds I've just passed the variable then a comma to separate from everything else then the style so what the animation will look like you can choose from a predefined list I've chosen sine or there you can choose any of these have a play with them easing direction you have to choose in or out or in out not shake it all about so choose one of these and that just determines the way that the animation plays so does it go from you know just go from backwards you know and plays it the other way around so I've kept it a tap out and then we've got the repeats count so whether it will repeat itself I don't want that so I've set to zero then this false is gonna be whether it reverses obviously it's not going to repeat so it can't reverse so that's false and also zero is the delay time so if you wanted it to delay once it's got there before it goes back if you did repeat it you'd put an amount of seconds in there but what I've done is I've created a function and it's called tween and it will take two arguments Part one and Part two so part one is an object and so it's part two and part one is going to be the part where the camera starts off at so we firstly have to set the cameras camera type to be scriptable so it's an enum and when he set it to scriptable that's allowing you to edit the camera with the scripts if he didn't do this it wouldn't work properly because the camera wouldn't go from part one it would go from your character so once we've set a descriptor ball we're then able to change the C frame so the position and rotation of the camera to be looking at part one so the way that part one is facing so if you imagine because it's fate is going to be looking from the front surface going outwards it would be looking here okay so then we create the tween we give it the camera because that's the object which we're going to change the properties of in this case we'll be changing its C frame property we're going to give it some tween info so this is the info we've created to tell the scripts how the tween is going to animate and what it will look like and then this table here the third argument is the list of properties which we're going to change so we're only going to change the camera C frame we're telling the script that we want to move the camera to part two C frame so if part two was over there well the script would would just animate it like this and it would just find the fastest route to get to this part to get to the second part C frame and it will smoothly animate it because we've given the tween info which tells us how long it should last for the style of the animation etc so we then play the tween and then we have to wait 12 seconds because this doesn't yield as soon as we press play and we start the tween it will just move on to the next line of code which would be to reset the camera to be looking at your character again we don't want to do that straightaway we need to wait the length of the cutscene so have the weights with the same amount of time after the tween between code and play then we'll wait the 12 seconds before it resets the camera when it sets the camera type it back to custom so outside of the function I'm just waiting two seconds to allow the player to spawn in and then calling the function and I'm passing through the two parts so game dot work space test1 is where the camera will start off and game dot work space test2 is where it's going to end up so let me go and show you this now and we wait the two seconds so that we can spawn in you can see the camera is now smoothly transitioning to the second part so really really cool and of course you can edit and change it so it could be starting over here and you know we could have it just a part over here just to show you the camera moving and if we just go in and change the length maybe to ten like this and we start it up again you'll see the just really smoothly animates once again from the first part to the second part just like that and you've got a really lovely cutscene so obviously you don't have to you don't you have to keep these these parts visible you can just make them transparent as long as they're anchored so they stay in position and can collide is false so you can't collide with them which is really important to know that the camera will be looking at whatever the front surface of each part is going to be looking at and if you wanted to do this you know multiple times just keep calling this tween function so for example if you wanted to do it again from going from test to two then another part called test three just put another part in there call it test three and we'll just change the name test three and you've got that second function cool so once the first tween is done and with the camera is now at test two you can put it to test three so let's go and give that a try and set the cutscene to three seconds for now here we go ghost one and then it goes to part two just like that pretty awesome huh and you might want different times for you know different tweens so you could move the cutscene time and the whole tween info stuff into the tween function like this so it's a different cutscene time and you could have an argument called let's call it cutscene time you can't use the word time because that's using scripting for something else but you could then just get rid of this variable and change the cutscene time in between info to the cutscene time argument is now in the tween and then if you passed the timer you would see one second for the first ten second for the second and it would go at different speeds so the first tween should be really fast whereas the second one shouldn't be see really fast and then really really long so that's how you do tweening in roblox with the camera I hope you found this useful do check out my video on see frames it should make it easy to understand and yeah please like the video subscribe if you enjoyed it share it with a friend and I'll see you in the next one thanks for watching