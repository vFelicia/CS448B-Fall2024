hi everyone Alvin blocks here with a tutorial and advanced scripting tutorial on C frames really excited to be doing this one and I'm just gonna kick it off and so a lot of people think that C frames are hard to understand if they are not hard at all they're very very simple it's just that a lot of people don't understand them which makes them hard but the understanding is very simple of how they work so in roblox if you want to move something we're going to use a part for example if you want to move something you have to change its position property ok so if I wanted to change the position of something I would have to set its position to a vector3 value and that vector3 value is made up of three numbers and I'm using the income and plugin as a way to demonstrate this so I can write code and easily show it to you the plugin is available in the description 425 rare books I recommend it so it's basically like a command bar so if I want to position the block I have to supply three numbers those numbers are x y&z in roblox we have three axes we have the x axis y axis and z axis when you click on a part you will see when you use the Move tool that we have these arrows for each axis so we have the green arrow which goes up and down for the y axis so that determines the position the vertical position so whether it goes up or down we then have the x axis which is the red one and that goes across like this we also have the blue arrow which is the z axis and that also goes across but in a different direction so it's perpendicular to the x axis so we've got one we've got the y axis which goes up and down so one goes up and down and we have two which go across but they go across in different directions so the the x axis is the red one and that goes across like this we also have the dead axis which goes across in a different direction perpendicular to the x axis so these three axes x y&z determine where apart is positioned because in roblox we have something called the origin so in every roblox world there is an origin position and that is called zero zero zero when the x y and z values are all zero now to see the origin you can go to view and click on show grid and you'll see these three arrows appear you can see where these arrows meet in the middle that is the exact origin the exact middle area of a roblox world is not the middle of the baseplate if we take away the baseplate you can see it's still there but the origin is this location here and just think of it as like the kind of like the middle of the game world so the base position so let me just bring the base plate back if I was to set the position of this part to be zero zero zero the middle of the part so in the middle here so inside of it if you think inside if we just let's try and make it semitransparent so imagine that if this is the middle of the part that little orange block in the middle of it just imagine it that is the middle of that part right if you if you thinking about it that is the middle if you go inside is there so when you position something it's actually the middle is the position is being taken from the middle of that part so if I was to change the position of this parts to change to put it to zero zero zero and let's run it you can see that it goes that now the origin is in the middle of the part so when you position an object in roblox it's being moved and placed so that the position value that you give is where the middle of the part is going to be positioned so obviously this part is now at the origin and if we take away the base plate again you can see you can better see that it is in the middle of the of the origin so the part the middle of the part gets positioned and so we've got a little bit going under the base a little bit above it etc but what you need to know is that when you position something in roblox those three values the x y&z values if you look closely here at this position property and don't take your eyes off it when I move I'm going to set the snap to grid to one stood when I move the part away from this origin you can see I'm moving the xaxis so the X comes first and it is decreasing so as I'm moving it further away it is decreasing okay the more times I move it the more stood so I'll drag it away that X number is decreasing if I was to move it in the other direction let's put it back at zero if I was to move it in your direction it would start increasing so we can see as we move the x axis the X number is either going up or going down so it goes positive when I move it to the left of the origin well it left in this thinnest in this in his terms because obviously it can be different and on which way you look at it but as I move it left its increasing as I move it right it's decreasing so it's telling us how many studs away we are from the origin now if I was to move it up in the air it starts increasingly Y value and if I was to move it down it would decrease okay so if I move the z axis you can see that these that value is changing so really what's happening here and I forgot to move the base plate back so give me a second there we go so you can see that the position is basically telling us how far away we are from this origin point so what what the position value tells us is that we are thirty seven studs on the x axis away from the origin so we are thirty seven studs away in this direction away from the origin so let me try this so we are 37 studs away from being back at the origin on the xaxis but if we were to look at the yaxis the white goes vertical we are 19 studs away so to get back to the ground we would have to go down 19 studs okay and looking at it on these ED axis which is also a which also goes across just like this ad but in a different direction to get back to the origin we would have to go 80 instance forward like this so what backwards even because we're going with we've gone forward already so we would go back 18 studs in this direction just like we would go back 19 studs in the Y and we would also go back 37 studs in the X okay so you can see that the position value is only it's not it's not telling us well it is telling us where it is in the world and he's using the origin point as a reference so the origin is our reference and by using it the position value tells us how far away we are from the origin point but also we can you now use that because all other objects in the game are using the position we can use it to to find out where things are in the roblox world so the position you can see as you move it around is constantly changing but really all it is is it's telling us how far away we are from the origin on each axis so what it's telling me is to go back to this origin here we need to go backwards 156 studs so I will now demonstrate this to you with code okay so if I just go here and I take away a hundred and fiftysix studs from its current position because it's currently 156 positive studs away from the origin if I go and take away those 156 studs oh I need to change the name of it to block there we go you can see that the origin well sorry the xvalue is now zero so it is at the origin in terms of X because X is zero we now just need to edit the Y and Zed values so now if I just take away 142 from the Z value look it's taken 100 it's moved it backwards by 142 studs and it's brought us back to the origin but you can just see it is actually two studs above the origin so we now need to just take away those two studs and now it is back at the origin so you can see I've just proven to you that the position value is just telling us how far away it is from this origin point but we can use it to work out where things are in the game world so that is what position is and really it's not that complicated it is just three numbers which tell us how far it is away in each direction from this origin point and together those three points constructs a position value and you can and by the way is measured in studs so when you say vector 3 u 0 to 0 it's taking away two studs understood is if you set the snap to grid to be one stood this is how this is this is the increment that it moves by so that's a stood and you can see the size of a stood on the on the base plate that's a guide so so that is that is what position is position is just telling us how far away is an object from the origin point of 0 0 0 now what is C frame well C frame is pretty much the same thing if I wanted to set the position of an object I could say game got workspace dot block dot C frame he calls the direct no F say C frame dot new okay and I'll explain why because see frame it has to be a see frame data type but you can put a vector3 inside of here so if I wanted to say one five six one five six one five six and click run it moves up into the air over here okay I could also say one five six one five six one five six like this it would do the same thing look if I move it it puts it back here so what it's done is because C frame contains both position and rotation it has set the position of the object but it has giving it the standard rotation okay of zero zero zero because we have not told it the rotation we've just given it a position but if we wanted to give it a a rotation we could do that again normally if you wanted to give a rotation you'd first have to set the position property and because you can't set rotation with position you'd have to set the orientation afterwards but a C frame just combines it together in one let me show you so what if I wanted to position this block so that the face is looking at the bar well if I try to do that I could say game the workspace don't block dock position equals game dot workspace dock bar dot position okay and then we will just add on we'll add on about 20 in the xdirection let's do let me show you that so that it is to the left of the bar but you can see the face is not facing the bar we want the face to be looking at the bar like this and so we haven't been able to make that happen using our scripts because it makes it face it doesn't alter the orientation if I alter if I set the orientation of the part myself like this to be looking diagonally in this direction and I set the position it has not changed the orientation that I said because position does not alter the rotation of a part only see frame camp when you want to position something so how can I do this well let me show you again let's let's move let's put the part in our rotation like this I want it to be looking in the opposite direction when it's moved over here I wanted to be looking at the bar so I can say game not workspace dot block dot C frame equals C frame new and what I can do is I can tell it the position where I want it to go so it's going to be vector three position so it will be vector three and the vector three has to come first so the position has to come first so it will be it will be game dot workspace bar dot position so the bars position with twenty studs added on in the xaxis okay so that's done can you see that it has set the rotation back to the default zero zero zero because I haven't supplied one yet that's going to come next so once I've done the position I can do a comma and if I now supply another position value for example games at workspace bar dot position this is the award value so the second position that you give in a C frame so we've got the first one here which is the bars current position with twenty added on in the xaxis to move it over here so twenty stood to the left of the bar that's the first position separated by a comma the second position is what it's going to look at and magically the C frame is going to rotate the block to be looking at the second position now the second position is going to be the middle of the bar because remember I said earlier the position value is taken from the middle of the object so it would it would be looking at a roundabout here the middle of the bar so if I run this Wow look at that the block is now facing the bar and this isn't this isn't you know a onetime thing if I was to move the block again and maybe put it over here all right I want the the the face to now be looking in that direction so I just need to run it again set the C frame once again and boom you can see it moved that's because I still wanted it 20 stood in front of the of the bar but it is still looking at this middle position of me of the of the bar which is awesome so let me show you a few more times I can so I can set its position to be what it is currently out so game that works basic block dock position if I didn't want its position to change I just wanted this rotation to be looking at the bar I could do that and you can see now is turned towards it if I move it over here it's done it's moved over again so it's looking at the bar how cool is this so this is just a function of the C frame it's built in so that the second piece of the second position that you supply is gonna be the thing that it looks at the first position that you supply is where it's going to position itself so it's basically setting the position property to wherever you want it to be the second position is where you want it to look at so the thing is going to face so it's going to face that position it's not gonna face the block it's gonna face the position of the block okay so that is how you can set a a block to be looking at something okay because a lot of people they want to position something but they also want it to be looking in a certain direction so that's one way of doing it you can also edit the rotation yourself let me show you so you don't need that second position all the time if you just want to set the position of an object you can do that so I could set the C frame so firstly I'm going to position it to be actually I don't need the vector three don't you we can just put the position in here so 10 10 10 so that will be 10 studs away from the origin on all axes so x y&z so if I run that that will put it over there just above the origin and ten students in each direction but if I wanted to rotate the part I could do I could multiply it by C frame the angles and when you multiply by C frame door angles you need to supply three angles in degrees so in x y&z because once again if you use the rotate tool you will see that we have three axes you can rotate it on the x axis on the z axis and on the y axis although this time the y axis doesn't go up and down so you can just think of it of three different axes in three different directions anyway let's reset that and let me show you how you do it with the script so if you're not familiar with angles or mathematics you may know we won't know but there are two ways to give an angle you can give an angle in degrees so that's the most likely one that you know so you can do 90 degrees whatever you know however many degrees really for wanting to do 114 point eight seven six five degrees you can do that so you can supply an angle in degrees we can also supply an angle in radians okay and I'm not going to get into what radians are but they're just another way of measuring an angle and so it's an easy way to basically when you're using C frame two angles you have to supply the angles in radians now if you don't want to use radians and because you probably don't know how to give a Radian because a Radian is a complete different scale you can give your angles in degrees which is what we're going to do but you have to convert them into radians which is why we use the function builtin to roblox called math dot around so we need three three of these for each for each axis don't we and so if we want to give the angle in degrees we just put the angle in degrees in the brackets and it will convert it so if I wanted to rotate this on the x axis not by 90 degrees let me set the orientation to zero zero zero if I want to rotate this 90 degrees I could put 90 in the air column I'm gonna put it in math or at though so it converts into a Radian and now if we click run let's go to the output number expected got an effect oh my god so if you're not going to use the others just put a zero or you could put Sarah in the math dot right it doesn't matter but because I didn't give a number to the math or add function it didn't work so there we go it has rotated 90 degrees and positively so it's rotated 90 degrees positively if you wanted to do it in your direction you would do minus 90 and why is it gone there is so that has rotated it 90 degrees negatively on the xaxis show you again so every time I'm running this it is doing it it's resetting it so because we're firstly setting the C frame and then we're setting then we're moving it back with 90 degrees it is it's going to give the same one each time each time I run the script if I wanted to keep on rotating I could say until they're giving it a new position I could say game workspace but Block C frame so it's currency frame which keeps the rotation by the way because the rotation is handled by the C frame and because in the last example I set the position I said I set a new C frame it reset the orientation but in this example because I'm using the current C frame which will take into account the current rotation of 90 degrees on the xaxis and also the current position if I run this again you can see it's now on this this side and if I run again it's on the bottom and if I run again we're back where we started so you can you can put any order number in here but it won't make any sense what's happening because this is a this is a Radian so if you want to do it in degrees say you wanted to now rotate it on the y axis by 180 degrees you'd put that in math dot wrap and it is now rotating 180 degrees and you can see if I was to rotate this normally there's 90 degrees 180 degrees there's another 90 degrees so that's 270 and that's 360 degrees so we're back where we started so that is C framed at angles that's how you rotate a C frame you have to supply it in radians but if you don't want to supply in radians you can use the math dot rad function which will take your angle in degrees and convert it to a Radian and I will prove that to you if I go down here and I print out math dot rad 90 it gives us one point five seven zero seven nine six three two six seven nine for nine radians go to Google and I do radians to degrees and let's put in what it gave us and it's given us 90 degrees with a little bit of rounding error there but not to worry about so basically 90 degrees one point five seven oh seven radians do need to remember that nobody I don't think ever uses radians we just use degrees because everybody knows what degrees are 90 degrees is going to be you know you know what's gonna happen if I rotate this 90 degrees yeah the face is going to be on this side boom as expected so that is how you rotate a C frame but what I want you to take away from this is that if you were if you wanted to rotate something with the position right you would firstly have to go game little workspace block dock position equals vector three dot new 101010 game dot workspace dot block but orientation respect or three new 9000 let's run that okay there you go now I've just managed to do that with one with C frame you know what one property is controlling those two you may be wondering you know what's the point in C frame when he can just firstly position an object and then rotate it well C frame much easier and it's very very very easy if you didn't want to take its current orientation and rotate it even more it's just much easier because see frame it will look date both properties for you orientation and position but also see frame has some really handy functions built into it which are useful very useful and I'm going to show you some of them now okay so the first one I want to show you is called loop so linear interpolation and you can see that if you have three parts let me let's create three parts let's do what the example is showing us so let's see we've got point 1 and point 2 so we'll just call this p1 for point 1 p2 for point 2 what if you wanted to position the block or C frame the block rather in the exact middle between these two parts because our reason over here as well we've got a diagonal line we have got a diagonal line between the two positions the imagine these are the two positions of each part here and here how do we know the exact middle you know is it here is it here here how do we know well thanks to the C frame lerp function we can see frame this so is positioned unrotated in the exact middle in between them let's go back to the example and have another look so I'm going to set the blocks C frame and then using to pick one of one of the parts it could be p1 or p2 it doesn't matter just one of them so game thought workspace p1 get there C frame and because the C frame has functions that we can now use we can use the lerp function so lower case and inside of here if we go back to the example we can see it takes two arguments the first argument is the C frame of the other part that's going to be on the other side which you want the face the story the block to be in between so the other parts and also the percentage and I'll explain that to you in a minute so the other part is going to be p2 so if you use p1 over here to begin with the second one would be p2 so game that was they stop P 2 dot C frame and that there C frames yeah they're not parts that we're using here we're using their C frames and then the second argument is how long how so where should the block be place so if you go back to our example here if you want the block to be placed in the middle you set it to not 0.5 because not 0.5 would be here 1 would be here 0 would be here so if you wanted it to be about here used to probably say about not 0.25 wouldn't you so I'm gonna say Northpoint 5 because that's half now if you click on run boom it's in the exact middle between them and because it's C frame deals with rotation as well if you click on sorry another station if you move the part upwards it's going to is going to make sure it's in the middle as well on on the yaxis as well so if you were to draw a line you know from this part to this part yeah that's that's pretty much bang on isn't it the part well it is exactly behind is exactly now in the middle equidistant to each point so that is one of the useful functions that comes with C frame you wouldn't be able to do that with position but because C frame you know is is more advanced it comes to these functions you can start doing this sort of stuff with it so like the example says if you want it to be placed 70% of the way away from the other part you would say nor point seven and that's that's why you know one of them has to come first if you wanted it the other way around you just change p2 to p1 not that okay so very very cool function there I'll show you a few more now in fact I will not I will leave that for a future video because also I want to show you two world space and two object space which will be coming in a future video which is useful for things like item placement on a grid sorry on on a base so you can save it and load it relative to the base so that will come in a future video I hope but one last thing I want to show you is how to at sea frames on so let's say we wanted to move we want to move the block 10 stood in front of where it currently is so you could say game that works based up Block C frame equals game dot workspace block dot C frame and you wouldn't say plus C frame new you would not say that because remember a new C frame would have a new orientation a new position we just want to move it forwards or backwards or left or right so you want to add on position so to add on position we use vector 3 because position is measured in vector 3 so we would say Roxy frame respect to 3 new and then you would put in the amount of studs on each axis so you want to move it 10 studs along on the x axis you would go 10 maybe you want to move it 2 studs upon the y axis and maybe you want to move it back five studs on his head axis he may be getting confused with which axis is which but if you look in the view selector you can see if you just look at it it changes based on where your camera is so we know that adding 10 to the x axis would move it this way over there adding 2 onto the y axis would move it up a bit and removing 5 from the z axis if we look closely you can see the z axis is actually going this way so it would move it back like that so let's click run and see what happens okay there we go so you can see that it is every time I click run it's going to move it away in that direction and so it is moving up diagonally really if you look at it like that because it's moving up it's moving on all axes if I was to let's move it back down here let's go back to let's go back near the origin let's go to the origin knit knit nearly if I was to just if I only wanted to move it in a certain axis I would leave the other two axes blank with 0 and you can see that it has moved 10 studs along positively in the xaxis direction like this and it will keep on doing that as long as I keep on pressing 1 and adding on 10 studs with the vector 3 so that is how you add more on to a vector to a C frame and so this is where the camera comes into play because if you want to position the camera you have to set it C frame and let me show you for example if I just drag in something from the toolbox for example a zombie in fact not as on because it will run away a tense you know a barrel or whatever and I want the camera to be looking at this I could set firstly a part don't know where the parts gone parts part part bars here we go so if I put a part here and ice let's just imagine that this is called camp art and let's anchor it and can collide whatever make it invisible go and we have a second part and we'll put it over here and we'll call this part focus part the names don't matter but now if I wanted to put a see from the camera so it was positioned here and looking at the focus parts I could say game thought works based camera I'm firstly going to set its camera type to be scriptable and you always have to do that so that you can set the camera see frame then I'm going to say game but works play stock camera dot C frame equals C frame new and we'll say game thought workspace dot camp RC frame so I want the camera to be positioned here yeah but I haven't told it what to look at yet don't it's looking here or here or up here I haven't said yet so if we were to do that oh my god it has to be a position doesn't it have to be a position you have to put a vector3 position in the C frame that is my bad so yeah run this again you can see it is just looking in this direction just it was just lucky that it was in this direction but we can actually set the focus the second position to be game thought workspace dot focus parts and then it's actually gonna look in that direction so if I was to move these items over here and do it again you can see it's now looking over there so that is how you there's a brief introduction into camera movement and positioning but you can see where this is going so brief recap see frames they take position and orientation rotation into account and it will if you you can either rotate the see frame by saying by using a second argument a second position which will be where it's looking out or you can set the see frame of something and multiply it by C frame dot angles and you can give the angles in radians so if I wanted to rotate by 90 degrees like this on the xaxis I would be doing so I could just rotate by 10 degrees or I could do it on a different axis like this so you can see where this is going so I'm actually gonna set this to game got workspace camera dot C frame so it's gonna take its current C frame and just keep adding on ten degrees to it like this and you can see how it's rotating on that axis on those axes because it's rotating on the X and y axis so that is some brief camera C frame stuff sopia camera sorry C frame it controls the position and rotation so it isn't it's a representation a data type of position and rotation in one so you can set a C frame and it will be a point with the rotation and position and there are also some useful functions for C frame one of which we've looked at today we'll go into some more in a future video you don't need to know them yet but we need to know is that C frame the data type in roblox similar to position but it also can control the rotation of an object and by the C frame property isn't visible in the properties window okay it is there what I mean is a property but you just can't see it but you can see the changes it makes to the orientation and the position properties okay guys I know we nearly ended the tutorial but I just remembered one last thing that I have to show you which is really awesome with C frames it's called look vector so if we think about a parts C frame or any C frame it's going to have a look vector it's also going to have a right to vector and an OP vector you may be wondering what are these well let's imagine that this is our C frame okay and well the look vector is basically a a unit vector which means it's it's it's a it's a direction with no with no magnitude I think is its no no scale basically so it's not like a it's got a set it's got a set distance but it's pointing in the forward direction and the forward Direction is you can tell it's the forward direction because this surface here of the part is called the front surface and you can see in this surface window it will be there but the the look vector is the forward facing vector so the direction the forward facing direction of that part of that C frame so if you were to take the look vector and set the C frame to be the currency frame plus look vector times 10 it would move it 10 studs forward in that direction so let me show you so game doctor workspace dot block dr. C frame and we're going to set it to its currency frame to keep the position and orientation but then what if you want to move it so let me give you an example right of course you could move this block forward by adding on them like we did earlier vector3 you and the amount of studs but it gets quite hard to do that when it's rotated in a funny way so you don't know the exact amount of studs to move this forward like this in this direction it's not you know it's a very complex vector3 value to move it forward in this direction so you just want to keep moving forward in this direction like a bullet would do you can get it to look vector and this is a great example actually they look vector is going to be in this direction of the blue of the blue arrow it might not be the blue arrow in all cases it's just because this is the front surface you see here in the brach front surface so the look vector will always be coming out of the front surface and so what I can do is we can get the blocks currency frame and we can add on we're gonna add on game dot workspace dot block dot C frame dot look vector so I'm doing the lowercase L and uppercase v but I don't think it matters so you're adding on the look at vector because it's a property of the C frame you can't just say block look vector it has to be block doc the C frame don't look vector because it's a property of the C frame so we're adding on if you think about it this is just a position so it's a vector three position value so we're adding on this position and if you do that you it because it's the unit vector I think the scale of it is one so like once stood so it's going to move one stood in that direction so you can see it's moving like that so if you wanted to increase that's if you wanted it to go further you could times it by a number so you could times it by ten if you wanted it to go ten steps in that direction and look it does so it's going in that direction because the look vector is basically the direction of this arrow here and it's going to keep moving in that direction but imagine that the the arrow is only one stood and so if you want to go further you have the times that they look vector by a bigger number and you can see off it goes now there's also a negative to get the opposite direction you could just do it negative game but workspace block looked vector and it will start coming back the other way and there's also there is also an output vector and that vector comes out of the top of the part or the top of the C frame and let's change it to say vector if it goes up in the sky you want it to go down you just change it to negative so there's no down vector because you can just say negative up vector or negative look vector so let's go back to that part there is also a right vector like this and that all this has changed that to five so that is sending it to the right and I know it looks to the left on my side but it's because the right surface is here and if we look at it from this angle it is going to the right so we all need to go to the left you do a minus right vector and it's now going to the left so can you see what's happening here so you think about it though the the look vector up vector right vector they are not they're just the direction so it's telling you the direction and then you multiply it by an amount of studs for it to go in that direction by that much so the scale of it that of the right vector is I think it's only like one stood so if you think about it the right vector will only be one stood and the up vector will only be one stood so and the and the rot the look vector which will be going out at the front will only be one stood so if you wanted to move it ten studs you'd have to take the look vector and times it by ten so it goes ten studs out I'm not too sure on the specifics that but you just think of the the look vector right vector up vector as directions so it's telling you which way it will go and then you multiply that by a number it will travel X studs in that direction okay so that the look vector is the forward direction and that's taken from the front surface and it's going to move in that direction the right vector is taken by the right surface okay and the up vector is taken from the top surface so that's all I'm gonna do on C frames for this video I hope it was useful if it was please share it with a friend share it you know wherever you can to support the channel as I get as I said subscribe like the video and I'll see you in the next one cheers for watching