hello and welcome to your fifth roblox scripting tutorial now in this video we're going to look at variables and variables they hold data which we can access later on in our scripts for example if we wanted to keep track of a score and we wanted to keep adding to that score we can keep track of it and access it later on in a script or for example if we chose who the murderer was in a murder mystery game and we wanted to store that so we could keep coming back to access that player we could store that as variable they're script specific so if i create a variable in this script i can't access it from another script and they can change so let me show you how to create variable firstly we say local then we set the name of our variable and it can be anything you want except for a few conditions which we'll talk about later on so you can call it myvariable and then you write an equal sign and then you set the value that you want this variable to be so if i wanted it to be equal to 50 then my variable is now holding the value 50. so variables they hold values think of it like a box cardboard box you can put a label on it and you can put whatever you want in the box so if you wanted to store some books then you could put books in the box and then whenever you want to get your books you know that they're going to be stored in your box now like i said earlier you can track things such as scores or you could even hold some text if it's a string you could have a boolean value so true or false you could even hold an object such as game.workspace.baseplate now i said as well the variables can change so if you were to print out myvariable.name then it's going to print out to the output baseplate okay but if i then put in between these two lines my variable equals game.workspace.spawnlocation we've updated the value of this variable where it's no longer going to hold the baseplate as its value it does at the start but then we immediately change it to hold spawn location instead we've changed the value of the variable so if we were to put two print lines in here one just before we change it when we print here it's going to print base plate but then we're changing its value so it's now holding different data and when we go to print for the second time it's going to print out spawn location so it should print out base plate and spawn location there you go so you can see how a variable can change and that is why variables are so powerful because they let us hold data and we can change data as well but we can also look up the value of our variable so you can see why it's useful to hold data now i'll show you some practical examples very soon but what i'm going to show you is how you can use variables to save you from typing out long references so if we wanted to say local and in fact let's just go into our base plate here and spawn location and let's make it a model okay and then inside of the base plate let's insert a point light okay actually we'll put it in the spawn location so we can see it then let's just change the range there we go so we can see our light now imagine i wanted to keep changing the color of this point light every time i would want to change it i'd have to say game dot workspace dot model dot spawn location dot point light dot color equals color three dot from rgb and this is how you specify a color there we go and that's what i'd have to do to change the color of the light okay you go it's changed now if i wanted to keep doing this and kind of do like a disco light i'd have to keep writing out this code over and over again but instead of having to write out game.workspace.model.spawnlocation.pointlight.com i could create a variable for that and i could say local and i could say light equals game.workspace.model.spawnlocation.pointlight we don't uh want the property as our variable we just want the object okay and now what we can do is we can replace all of these references here to light and then we can say light dot color equals color three dot new dot from rgb um sorry and we can dramatically reduce the amount of code to just light dot color so you can see how variables can help us reduce the amount of code lines that we write and then we could put weight 1 in between these lines here and we've got a quick little disco light going on here there we go and it keeps changing color you can see how variables save you from having to type out long references now one other thing i need to mention is what we just spoke about a couple of minutes ago is that there are a couple of naming conventions which you can't use when creating a variable so for example you can't start your variable off with a number and you can't use a couple of names i'm going to put them on the screen now because they are reserved by the lua scripting language for other important things um such as a function you can't call your variable function you can't call it um while for example because these are reserved by the scripting language now also variables are case sensitive so if i have two variables one called test var and another one called test bar these are actually two different variables because one is in uppercase and one is uh is written with an uppercase t for test and v for var but they are two separate variables but if they were both written like this then they would be the same variable so you can't use the same name you would have to use a different type of of case so they are two separate variables there so when you're defining a variable you can have variables with the same name as long as the case is different but i would recommend that you don't use the same names for your variables just so that you can not confuse yourself now the next thing we're going to talk about is scope and when you're in a script you have different levels of scope now let me give you an example of this scope is basically just where a variable can be seen or accessed and in this case my variable can be accessed anywhere in this script if you wanted to add to it in this function then we could just say myvariable equals myvariable at 50. that's how you update a variable by the way you just say the name of the variable and you set it equal to what it currently is and then you add on a number if you're dealing with a number variable so we can access and change this variable anywhere because we've defined it outside of any code blocks it's at the very top of our script it's not within any code blocks you might be wondering what's a code block and a code block is is take your function for example this is an example of a code block because it's got code inside of it that's indented inside of it that's in between our function and our end it's it's inside this function it's the code that will run inside this function and so when this function runs this variable called result now this function will add two numbers together so this function uh this variable called results will be the result of adding number one and number two but because we defined this variable within our function the scope of this variable is this function so it can only be accessed from within this function so you couldn't say print result okay you can see it's not it's not appearing on the autocomplete that's because it's not defined to the entire script like my variable is we could print my variable that's fine because it's defined uh within the the the scope of the entire script because it's not inside a function it's not inside a code block and so if we were to print my variable you can see 50 but if we were to print out result we will get an error because result is nil nil means nonexistent there's nothing it thinks this variable hasn't been defined it can't find the variable that's because it's only been defined within this function and it's only going to it's only able to be accessed from this function so we could say print result within this function because it's been defined locally to this function here so let's call the function add numbers with one and two and it should print out three yeah because one add two over here there are parameters we then add our parameters together set them to this variable and print it out so that is what scope is scope's all about where you define your variables and if you define your variable within a code block such as a function there's other code blocks as well such as loops and if statements and we'll get onto those in future videos but that's just to show you how local variables are local to this to the code block and the scope block that they're in now there's also another type of variable and that is called global variables and a global variable doesn't require the local sign next to it and when you do have a global variable uh it means that you can actually uh you could print out results from here because results is global to the entire script now if we were to just uh get rid of this print here you can see it's saying global result is only used in this function you should consider changing it to local now if we were to print results again it doesn't even matter that we didn't define it at the top of our script because it's being defined in this function here and even though we defined it in the function we can still print it because it's global it hasn't got that local when we use local is telling the function right we only want this variable to be used within this function only to be seen within this function and accessed within this function now there is a downside to global variables and it's best practice to use local variables all of the time so that's why we always say local before our variables here local variables are faster than global variables because local variables are stored in cpu registers which are much faster to access than ram which is where global variables are stored so that's why it's better to always use local variables since there's a slight performance boost which you don't get when you use globals but it also makes it clear to other coders that when we use local it just tells us that we're defining a variable so everyone else uses so when you're working with people it's best that everyone's doing the same thing that's why we use local so even if you want your variable to be accessed from other scopes such as my variable because we've defined it outside of any other scopes in our in our scripts we haven't defined it in a function since it's it's in the highest scope of the script and it's local that still means it can be accessed anywhere in a function outside a function in any code block but when you have a local variable within a function then you're limited by the scope because the scope of the code block of this function means that we can only since we've defined it within this function we can only access it update it and read it from within this function now we did touch upon nil values as well so nil means nothing means it's nonexistent so if you did not set anything as your variable you would then print it out then the value of this it would be nil it would be nothing because we haven't set anything as our value for this variable so nil just means nothing at all and one final thing each script has a 200 variable limit so you can only have 200 variables now this isn't anything to worry about it's unlikely that you will hit 200 variables on just telling you uh that there is this limit to be aware of if you have got loads of variables but trust me you will you won't need to worry about that too much unless you've got loads and loads of variables but per script 200 variable limit okay so hopefully that video has taught you everything you need to know about variables if you enjoyed it please do like the video subscribe if you're new and i'll see you in the next one thanks for watching