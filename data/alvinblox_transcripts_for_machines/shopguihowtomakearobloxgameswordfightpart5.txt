hello and welcome back to part 5 in the roblox sword fight game series today I'm going to be showing you how to add this really nice shop to your game so that players can buy different swords with their books ingame and they'll be able to equip and equip them so what I'm gonna do is I'm going to give you this GUI you don't have to crazy yourself because it's gonna take a really long time to create it so I'm gonna make it a model and I'm gonna leave the link to that model in the description so just go to that link in description and then you'll be taken to that page if you click on get and take that model then it will appear in my models and if you just click on that model and drag it into the starter GUI you'll be good to go and I'll put another video out I'll leave that under description of how I made the GUI if you are interested in how I did that so let's get straight into the video on how to actually code it and get it working so I haven't put the code in the model I've left that out because I'm going to show you how to code it in this video so you actually learn something if you do want to take the source code though you can become a channel member by clicking the join button which is next to the subscribe button or if you're on android or iOS then there'll be a link in the description if you want to do that but let's get to the scripting then what we're going to do we're going to start off with the with the stats script and we're gonna need to add a few things in here before we get started so the first thing that we need to do is we're going to need to create a folder and that folder is going to store our information about each player so the item that they currently have equipped and the items that they own in their inventory so that folder is going to be called a player data and so to create it what we can say is a local player data equals instance new and then in these brackets in speech marks we're gonna say folder then we'll give it a name so player data dot name equals player dot name okay and we're gonna parent that to go inside of our folder which we've got to create so what I'll do here is I'm going to add a folder into server storage and I'm gonna name this folder player data now if you don't see a folder called items in your game don't worry this is going to come later on in the video I'll explain everything about that very soon so player data dot parent equals game dot server storage dot player data okay so we're inserting a folder into game block service storage player data and we're giving it a name which is the name of their player so if should let's key join the game then it would just be called shedletsky and that forward it would go inside of here and we're just calling it player data in the variable although that does not matter so next thing we want to do want to do exactly the same thing now I'm just gonna speed this up and just quickly paste that in here and explain it so we're creating another variable for our equipped value and that is going to be storing the current item which the player has equipped and we're calling it equipped there we're giving a name and equipped dot parent is player data so it's going inside of that folder which we just created and we're gonna do exactly the same thing again although this time we're doing it for a folder and this folder is going to be called inventory so instance new folder and then the name is going to be inventory and we're putting that inside of the player data folder so it's another folder and inside of that folder we can store all of the tools which that player owns okay so now that we have got our player data folder we were able to store data about each player what we can do is we can just add to our data saving down here so we just go scroll down to line 50 where we have player data here we're going to add two more variables so a local weapons data because that's going to be saving all of the weapons that the player has and we're going to be loading it to that variable and we're going to do local equipped data and equip data will be just storing the data we get from the data store about which item the player has equipped now we're going to have to do get a sync again on these two new pieces of data so we're going to copy this Pico and paste it twice and this time we're going to change player data to weapons data and it's going to be data doors get a sink but the key this time is going to be weapons ok or or web slette us do webs because that's what I have called it in my source code so weapons data equals data stores get the sink webs and we'll be saving this data later on I'm just handling the getting parts right now and once again we're gonna do it for equipped data we're gonna get whatever item the player had equipped from our data store and the key is going to be the player's ID and then equipped value okay so that is the get async parts and now we're just going to drop a few lines down here and we're going to say if weapons data so if they have data saved and they have weapons which have been saved then what we're gonna do is we're going to we're just going to leave a comment for now and we're going to come back to this later on and we're going to do a a for loop through the weapons saved all right so we're going to loop through all of the weapons that we saved and we're gonna load them in and also we're going to set the equips value okay so we're going to do that later on in the video once we have saved that data so the way this is going to work is when a player buys a weapon we're going to make a clone of that weapon and store it in their inventory folder so let's go ahead and just open up the game here so they're going to have that inventory folder inside of their folder inside of player data as you can see in player data they have a folder with their name and inside of that they have an inventory so let's say that they have a sort in their inventory then when they leave the game we're going to save everything inside of this inventory folder and then whenever they joined the game we're gonna loop through everything that was saved to that datastore and place it back into the inventory folder and we're gonna set the equipt value to whichever item they last had equipped as well now if you haven't got this items folder which you probably won't have because I already had it in from the start you're gonna want to insert another folder into server storage they go click on folder and call it I Tamar to put all of your items that you want to sell in this GUI make sure you put them in this folder because we're not going to be actually adding each item into the GUI manually it's all going to be done automatically so let's go into the core local script here and you can see that I've given you some variables that were going to be working with now what we need to do is we need to insert our remote events and remote functions so let's go into replicated storage here and if we go in here we should see another folder and this folder before we go on to the remote functions it's called tool models I'll get to that later on as well so we're going to want to make sure that we have three remote functions added in here one's going to be called get tools one's going to be called item check and one is going to be called purchase item make sure that you've got the capitalization correct as you've got your capital G and T for get tools as we've written it up here and what this remote function is going to do is it's going to invoke the server and it's going to ask the server to send back all of the items we have for sale so everything inside of this items folder in replicated it's all right in server storage because a client can't access anything in server storage but what we can do is we can use a remote function to request to the server in the replicator storage which can see replicate storage and it can pick up that request and send back to the client the data from items because the server script can see everything inside of items so that's just going to return back to us a table of tools which we have for sale and we need to code this so it returns back the items which we have so what we're going to do now is we're going to go into service script service and let's add a new script okay this script is going to be called server Handler and it's going to handle all of our remote function remote events all of that good stuff so we're gonna say game not replicated storage and get tools dots on server invoke in fact let's say or wait for child wait for child gets tools dots on server invoke and then when I say equals function and player okay so add player in brackets and drop a line so this function is going to run when the server has been invoked by the client which we did at the start of our local script which is saying invoke server and so once that request is received we pick it up and this function is going to run and we've got the argument parameter of player which is the player who has invoked this remote function so let's create a table and this table is gonna be called items and then we're going to make that equal to a table and inside of here we're going to loop through every single item in the in the items folder in server storage and we're going to add it to another table and then we're gonna put that table into the first table and it's going to be a nested table so it's gonna look something like this okay so we have our first table and our second table like this so we could have the name of the item so maybe a pistol and then we could have the price okay so 350 so that would be our first item and then we could have a second item etc so that's why we do a nested table like this so let's do a for loop to loop through everything inside of that folder so we can say for what for we just gonna do an underscore because we don't need to say what I is which is gonna be our counter and then objects in pairs and we're going to loop through game dot server storage come on wait for child we insert items because it's the items folder I wouldn't say Curran get children and that's going to loop through every child in that folder so basically everything which is in the items a folder and then when you say do at the end of that because it's a loop and we're gonna create our second table called item properties and that is just going to be a table again but we can say table dots inserts now into item properties so into the first table items we can insert item properties so inside of this item properties table we're going to store the objects name and the objects price okay so what you need to do for all of your items which you insert into the items folder now this is really important you need to make sure that you insert a number value into that into that item so just click on the plus type in a number value and then name it price and give it a value of however much money you want it to cost okay so if you want it to cost 500 books set the value to 500 if you don't add a price value it's not going to work so if it doesn't work make sure that you've added your price value so we're gonna say object not price value just like that and that's going to insert this mini table into this big table so it's kind of like the nested table as I talked about and then what we'll do is we'll just return that big table back to the client so this table of items which will contain all the information about each item that we're selling we're gonna return it back to the local script and that table this one here is going to be equal to this what's going to be set to this variable available tools so if we were to say print available tools then that is going to print out this items table and everything that is inside of it because we've gone from server to client using the remote function because a remote function and always feeds back to the client after it's been called by that client so it goes back with some information so we're returning that items table picking up here in the client and it's gonna be set to this available tools variable okay so now that that is done we will get to actually making the items shop in the GUI in just a little while but for now let's just do a bit of the easy stuff get out of the way let's program the open button here to open and close the GUI so we can say well we've got our variables here and I've defined the open button as a shopper button so we can say shop button dot mouse button oneclick curl and connect function we don't need any arguments here or parameters we're going to call them and we're all we need to say to toggle it open or closed is main frame because that's what we defined it as main frame up here as you can see in the GUI we have our main frame main frame not visible equals and not main frame not visible okay and that is going to set the current visibility property to the opposite of whatever it is right now so if it was set to true here then we're just going to set it to the opposite because we've got knots here so if it's true then it's going to be set to not true so false and if it was already set to false then it would be set to not false which is true so that is going to toggle it when it's closed and it closed when it's open now if you want to go test it out you can do click on plate and if you click on shop a few times it should open and close there we go okay so we've done the shop button and now let's work on making the items show up in the frame so we're gonna want to firstly define some more variables so first variable is gonna be called local padding underscore X well actually it's a constant because we're never gonna change it again it's gonna always be the same values that's why it's another case because it's a constant and difference between constant and variable is a variable can be changed and a constant we we don't really what we never change it once it's constant you change is gonna stay the same forever so the padding X is gonna beat naught point naught I'll explain all of this in a moment and I'm gonna do local dropdown underscore y equals not point two and local dropdown underscore X equals not 0.25 okay so the padding X is well because we're automatically generating these boxes okay we're gonna want to for the first box in each new row we don't want it to be at the well if I show you here the main frame and we go into safe area an item frame you can see if I just change the background transparency so you can see it if I make it red okay you can see that if we were to add a new item to a new row and it was the first item then it should be right up against the frame right it should be like this right it should be up against the frame but it doesn't really look very good in my opinion so you want to do a little bit of padding just to offset it from the left side so what we can do is we can add naught point naught 2 or we can set the scale on the xaxis to naught point naught 2 all right so so it's not point naught 2 of the way across the entire frame okay and that just looks nicer in my opinion and every time we had a new row we're gonna need to set this this padding to that box so it's it's off its offset it from from the left side of that frame and it's in line with all the other iron rose okay so that is why we have padding X okay because it's not put not as you can see the first box is set to naught point naught 2 as well it's just the scale units from which offset that box from the start of the frame if it's the first item in that row okay drop down Y is another unit of scale so it's twotenths of the screen and it just means whenever we drop a new line we're going to add that many units of scale on to the current y scale position so it moves down a row okay and drop down X it's the same thing but for the xaxis so if we have another box which is on the same row as the previous one we're just going to add not point two five units of scale to the new box so that it shifts to the right and it's next to the previous box okay so what we're gonna do is we're going to create a for loop which is going to loop through every single box in that available tools table which returned back to the client from the server and what we're doing up here in line 10 is we're saying local number of items equals hashtag available tools now what this does is it return it returns the number of values in the number of indexes or objects or whatever you want to call it and inside of the available tools table okay so if we have five items there's going to be five entries into that table one for each item because we have those five nested tables and so there's going to be five items so we're going to need five boxes okay so our for loop is going to loop through all of these boxes and so do you get the number of times we need to loop we can say for and then I which is just our counter which counts how many loops we've already done i equals and it goes from one okay so one it's the starting number and then comma for our next number and the next number is going to be the number that it goes up to and that's gonna be on a number of items so if it's five it's gonna loop five times and every time it loops it's going to increase that's I incremented I counter by one and whenever I reaches the number of items because each time that we do this loop and it loops through I increases by one which is our value here whenever I gets to number of items imagine it's five it's gonna stop looping okay because all the items have been done so we can say do and then just drop a line and we should have this this end added in for us and what we're gonna do is we're firstly going to check to see if I is equal to one okay so if I is equal to one then drop a line and we'll have this end in here now before we move on just add a couple more variables we want to create a variable for item 1 and that's going to be our template item frame okay so when we want to add another item we're just gonna copy that template and we'll duplicate it change the name and picture of the of the item insider etc so local item 1 equals item frame call on wait for child item 1 all right and then we're just gonna create two more variables local box and we're just going to use this for the current box that we're looping through for our duplicate and then set it to nothing and then we're gonna leave it as nil and we're going to create another variable for the number of rows which are currently on so local num rows equals 1 so if I is equal to 1 and we're looping through it for the first time then our box is going to be equal to item 1 so we can just say box equals item 1 but if it isn't and we've already gone past the first box so on the second box for the third box etc we're gonna want to create a clone of item 1 so box is equal to item 1 come on clone and that's going to make a duplicate of item 1 and we want to just name this box item and we're going to concatenate it with I okay so I is the number of times people loop through so for on the second box is going to be 2 so the box name will be item 2 so we're just putting it together item with the the current or the counter of how many times we've looped through so it will be item 2 okay and then we're gonna say box doc parent equals item frame and that's gonna put it in the item frame here where item 1 currently is what we're now gonna do is going to do the detection to see if we are on the current if we need a new row or not okay and where to position this box because we're generating it with a script so we need to make sure that we position everything correctly and so they don't end up on top of each other so what we're gonna say is and this may sound really confused but I'll write out then I go over it if I minus 1 in brackets / in brackets again 4 times num rows equals 1 then what this means is okay now we're gonna have in a row there's gonna be 4 boxes per row okay and when we get to the fifth box I'm gonna drop a line now the way to detect that is now remember because I is the number of boxes that were currently on so if I was four okay and what we'll do here is we want to create the fourth box we would say if I minus one which is 3/4 times the number of rows which is because we're on our first row still that's going to be 4 so if 3/4 is equal to one then we're gonna create a new row but that's equal to null point seven five because it's three quarters so we don't need to create a new a new row yet but say we're on the fifth box now okay 5 minus 1 is 4 divided by 4 times numrows which is 4 so 4 divided by 4 that equals 1 and that tells us that we need a new row for the fifth box so then we just can make sure that end is added in for our if statement so that means we need a new row so we're gonna say 'numrows equals none rows plus 1 to increment our variable and then we're gonna say box top position equals you dim to new and what I'm gonna do is we're going to insert our padding X which I said just offsets it from the left side of that frame and then a 0 because we don't need any offset we're just using scale and then for the scale on the yaxis we're going to get the boxes at current scale which is just as it is right now here at the top which is have a look not point not to five so we can just say box dot position dot y dot scale and that's the current y scale value comma zero cuz we don't need any offset and then we're just gonna add to that we're gonna add you dim to new so another GUI p.m. another GUI value position value at zero zero because we're not actually incrementing the xaxis we only want to drop it down on the Y because it's new a new row and then for the y scale we're going to take the drop down Y value which is currently set to nought point two but in case that we're on maybe the third row we're not actually going to put it not point to down the screen yet because we've all done a row with that sir about you okay so let's say we've just in our first row then it would be fine just to do this because we're setting it to nor point two which is you know for the second row but if we go to our third row it's going to position it on top of the second row so we need to do x and then in brackets we'll do number o's minus one now we'll do the minus one because let's say on the first row okay and then number rows is going to be equal to two we take away one from it to put it back to at one because we only want to add one lot of it one lot of not point two to it before on say our third row then because num rows is going to be three we take away one and we get two and then we add two times not point two which is no point four so we add on naught point four it'll be not point four of the way down on the screen if that makes sense so that is what we do to position a new box but if it's not a new row that's needed we're going to add an else and we know that we just need to add to the Y to the X or e to the X only so we can say box top position equals and then we're gonna say item frame because we want to get the previous boxes position and then when do square brackets to access the previous box I'm gonna say item and concatenate it with I minus one okay putting it in bracket if you want not to be done first and then outside of the square brackets now that we've got the previous box we can say dot position plus udimm dot new drop down X because we want to out that drop down X value to the the previous box's position to move it to the right and then because we're only changing the scale on the x axis we can just leave the other values as zero just like that and there we go that's all we need to do to create our boxes and that will position them correctly on the screen no matter how many you have it will keep adding rows until we've run out of boxes to add now I think if we go and test this out it might work for us I think we've done enough coding for it to actually work and there we go it's positioned the boxes for us we've got three boxes now and in the output we have no errors so we're gonna go back here and I'm just going to set the item frame back to white and back to transparent and there we go we've done the boxes so now I'm going to teach you about the tool models and also about viewport frames because that's how we're going to be rendering the item pictures basically we don't need to have asset IDs you don't have to take screenshots of the items to make them show up in your game all you need to do is you need to learn how to use a few port frames now a viewport frame is it's a GUI element and error and it renders an object in 3d space okay now let me give you a demonstration so what I'll do is I'm going to click on our equipped item a viewport actually no we'll use we're going to item information and we'll click on the item of viewport now this is a viewport frame and if I just expand the properties tab here and just there you go and scroll down to current camera now what happens is when I set the current camera to a camera object okay let's set it to the camera currently in the workspace this UI element is going to render anything which that camera can see okay so now if I was to move the camera around it would start rendering objects which are inside that viewport frame so if you want the viewport frame to render something then that object which is going to be rendered on to the screen needs to be inside the viewport frame so if I took the lobby and I dragged it inside of the item viewport it would appear in the viewport and you can see when I scroll the mouse it it renders and moves around the cameras moving around so it's basically recording the camera and showing it on this GUI viewport frame okay so it's rendering anything inside of the viewport which the camera can see so what we're going to do is we're going to create a new camera every time someone well in every box is gonna be a new camera and this camera is gonna be looking at the item okay and then what we're going to do is we're going to what we need to find the we need to get the position of the camera for each tool okay so we're going to get those see frame values for the camera we're gonna store them inside of the tool and then whenever the player clicks a box we're going to copy that tool in to the viewport frame and set the camera camera C frame to the corresponding C frame which we'll set now if it doesn't make much sense don't worry we'll go over again and but that's what viewport frames are so I'm going to take the lobby and put it back into the workspace here and what we're gonna need to do is we're going to need to instead of using the tool we're gonna have to add some tools to tool models now if you haven't got a tool models already which probably happen in replicator storage you're gonna want to insert a folder into allocated storage okay folder and make sure you call it tool models okay just like I have capital T capital M okay now what we're going to do is for each item we have you don't want to just go into the item and take the hand now only the handle okay if you have mortal parts which make up this tool maybe like a weapon you have different parts for a gun copy them all but we only want to copy the parts in this tool so no scripts no values no animations just the handle or any other parts associated with it so you want to take this handle and copy it okay and we're gonna paste it into tool models so you must paste it into tool models and then you must name the handle the same as the tool okay so this is from the Azrael sword so I'm gonna call it as your sword and then you need to right handle after it okay so it's whatever the name of the tool is plus handle and it will look like that okay so now that you've done that open up the handle and delete any sounds or fire or point lights or sparkles because they don't render yet in the viewport frame and you need to make sure you delete your sounds else they're gonna keep playing when you click them you don't want that so delete your sounds delete your fire and everything else but make sure you leave the mesh in there okay so now that you've got that and you've got your handle then we're good to go so I'm just going to do it for the other items we've got so that you can just remember how we are going to do it so I'm gonna go to the second item which is the pistol I'm gonna just take the handle copy it and paste it in turtle models now this tool was cooled at the pistol so I'm going to rename the handle to pistol handle because we need to make sure we have that handle on the end of it and you'll see why very soon and I'm gonna delete this world because it's not needed we only need the mesh in there and there we go we've done the pistol I'm gonna go for the rocket launcher now take the handle copy it go up to models paste it in I'm gonna call it rocket launcher handle okay I'm gonna go into the rocket launcher and there we go we've only got the mesh in there so I'm gonna keep that in there so now what we need to do now that we've got our tool models is because we're gonna clone at these tool models these are these handles we're gonna clone them into the viewport frame we need to make sure that they're in view okay because we need to get there see frame so we can set the camera the camera see frame so it's looking directly at that at that handle so for each tool model you're gonna want to take it and this is just to calibrate it for the viewport frame so one by one what we're gonna do is we're gonna set up the camera C frame and then we're gonna store that C frame in a value in that tool model and then we can just quickly reference it from our script so we're gonna start off with the actual sword handle I'm just going to take this handle and I'm gonna drag it into the item viewport and I'm gonna make sure that the current camera is set to camera in the workspace now we wouldn't usually be set to camera we're only setting it to the camera in the workspace so that we can calibrate it and we can see the item in that viewport now I can already see it over here so I'm gonna go and zoom in on it just like I would with a normal camera and there we go I'm gonna get it in view in our view ports just like that and when I've got the perfect position like this it's time for us to get the C frame value now there are two ways of doing this now you can just you could get it by saying print game not workspace dots dart current camera dot C frame okay you could just do that and open up the output and it would print out that C frame but because C frame values you can't well it's kind of hard to write them you can't just go in and change their their value property there's a really cool plugin made by Ty Ridge 77 I believe and it basically will get the current C frame of the camera and it will create a C frame value and it will put it inside of your handle okay I'm gonna show you how to get this plugin I'm gonna leave link to in the description so you want to go to the link in the description and go to manage plugins in studio click on find plugins and then if you go to library and you click on plugins and type in cam to CF which is a camera to see frame click it it's by toy age 77 and click on install and then go back to your place it should appear up here you should see a camera icon saying create now if this plugin isn't available anymore in the future or you can't see it we have some trouble and then I'll show you a backup solution but all you have to do when you've got your item in view is click on the add your sword inside your viewport and click create okay if you open it up you can see it's out of the camera see frame and an fov field of view you can delete the field of view because we don't need that you just need your camera see frame now you won't be able to see the value because the camera see frame it's just a very weird class in roblox you can't view the value just by looking in the properties window although there is a value saved to it ok the camera see frame has been saved to this value okay because you'll notice you can't see the see frame and property either but in a part but it is saving the value don't worry and you've now saved the camera see frame into that handle so all you need to do now is drag that back into tool models and we're going to go back and do it again for the rocket launcher I'm going to drag it into the item viewport now I've got to make this very clear before we carry on what you need to do is we're gonna take all of our tool models from the folder first and I need to show you this before we carry on because once you've done your first item ok you need to make sure that the other items aren't in directed view of it ok because you'll end up with something looking like this okay the other items will be behind it and it will look really messy so just take the other items don't move the as your sword else you will mess up the current camera with a C frame that we just did but take the other items and move them out of view okay I'm going to do the same for the pistol and move it away from the rocket launcher so if you were to look at the as your sword you would get the sword if you were to look at the rocket launcher you just get the rocket launcher and the pistol as well is it's on its own okay so that is why we have to make them separate from each other apart from each other so drag them back into tool models and let's go back and do the rocket launcher this time now I'm going to show you how to how to do this if you don't have a if you can't get the plugin let's just open up the GUI again so you don't have the plugin you can't get it don't worry we're gonna open the output and we're gonna drag to the side here just so we can see what's going on and I'll clear it here so you want to get your item in view okay now you can still use the plugin I would recommend doing the plugin but if you can't use the plugin this is what you do you get to in view and then what you want to do is you want to go inside of this rocket launcher click on the plus type in C frame value and then you want to name this C frame about you just like this make sure that you've got the spelling and capitalization correct and then we're just going to say game whoops game dot start a GUI dot shop dot mainframe dots safe area and then dot item information dot equipped also item viewport m dot rocket launcher handle dot C frame value dot value equals game dot work space doc current camera dot C frame okay that should set the value of the camera to and this C frame value so it's looking at this this rocket launcher and just to make sure that it did it we can just say print and print this value and see if it's saved and there we go we've got the c4 in value it successfully saved so that's how you do it if you haven't got the plugin but I do recommend you do use the plugin so we're going to take the rocket launcher and we're going to put it back into tool models I'm going to take the pistol and we may put it into the item viewport I'm gonna look around see if we can find it and here it is here's the pistol okay and I'm just gonna go the other way and get a different camera view on it so working it from side on and there we go over lined it we're gonna use Taiwanese pull again I'm gonna go to plugins make sure that the pistol is selected if you're using the plugin you don't have to create that C frame value because the plate is it for you so click it and you've got your camera C frame and your point of view so just delete that fov we can also delete this well because we don't need it and we're gonna take the pistol handle and drag it back into tool models and there we go you have got your viewport frames done so if you've got any more items make sure that you do the same thing again just to reiterate you need to firstly take the handle from your tool and drag it into tool models you then need to change the name of that handle to firstly having the name of your tool and then writing handle after it then open up that handle and delete anything such as sounds fire point light spotlights and sparkles etc so you only have the mesh for that handle in there if your handle doesn't have a mesh you don't need to insert a mesh you then want to take your handle drag it into your item viewport make sure that current camera is set to camera in the workspace then you want to align it up until you see your handle and then click on the handle go to plugins use the plugin and then delete the field of view put it back into tool models and you should be good to go and you don't need you can get rid of the current camera now you don't need to set it to camera anymore just leave it blank so that is everything you need to do to make the picture show up as a viewport frame we're now going to go in and code it so that these viewport frames and can show each item when we click a specific one okay so now we're going to script it so that when if you click a box then we're gonna make the item show up over here in the item viewport so let's go back to the core local script and then just outside of this this if statement here but still in the for loop so just here and more going to do is we're going to create a mouse button one click event for the box so when it's clicked so box mouse button one click connect function okay so when that box the current box that we're looping through has been clicked then firstly we want to make sure that the item viewport is clear of any other items that may have been in it before such as luck another item if we've just clicked off a different one okay so we can say it for underscore V in pairs okay cuz we're not doing any counting this time we just need the the V for the object which we're looping through and all objects that we're going to loop through this time are going to be in the item viewport so we can say item viewports gets children and then do and drop a line and then we need to say if not V is a frame then because we've got the frame inside the item viewport which gives it that nice shadow and we don't want to delete that so if it's not a frame then we can just say V destroy and that will get rid of anything else that isn't a frame inside that item of you books you don't want that in there I also be a load of overlapping with the viewport frames so the next thing we need to do we need to create a dummy camera which will look at our selected item so we can say local item a viewport camp equals instance dot new camera and item a viewport cam dot parent equals item viewport this is going into the item viewport and will make it look at that item then we want to clone the handle from tool models so we can say local handle equals game replicated storage can wait for child to let models kind of find first child in case it's not there our available tools because we're getting the name of the tool from the available tools a table I said we've got we have our nested table so because we're looking at the the eye or the enth entry in this table because obviously is the number of counts and say on the second loop then would look for the second table inside that big table and then the first entry in that nested table will be the name so that is the the name of the tool so we're looking for that and then we're going to say dot handle because we put the we put handle on the end of the tool here so we're getting that handle from tool models and then we're just gonna say curl on clone okay and that will make a duplicate of that that handle and we can say handle dot parent equals item viewport and then we just need to set the current camera that see frame which we made so not the current camera the camera we just made the item a viewport cam dot current camera sorry no the item viewport is a V for frame and we want to set the current camera property of that which you can see here current camera want to set that to the camera we just created so we can say item viewport account and then we can say item of viewports cam dot C frame equals handle dot camera C frame dot value because we're taking that a seafoam value which we created with Ty Ridge 77s plugin earlier on which I said make sure you name it C frame value just like this and we're setting the camera C frame to that value so it's looking directly at our item we then want to update the buy button and to see whether you own it or not or whether you need to buy it purchase it etc and so we're going to need to create a another remote event so a remote function because we're sending data back to the client once we have invoked it to the server and this one's gonna be called item check and we're gonna check the players inventory to see if they own that item then we're going to return whether it's owned or not back to the client and then we can check to see and while we can check see if it's equipped also and if it is equipped we can just say unequip if it's not equipped we could say equip and if they don't own it at all we can say bye so we're gonna say local owned equals game don't replicate the storage the item check curl on invoke server and the cert only data that we're going to pass the server is the name of the tool so you can say available tools available tools I because it's the current tech table of the item were looping through and the first entry in that one is the player's name all right so we're doing a server request to see if the item is in the players inventory or not we're going to need to now go into server Handler and pick this up and write out the the server part to pick this up so this is quite simple we're going to just say game don't replicate a storage come on wait for child and item check this time is the name of the remote function I'm gonna say dot on server invoke equals a function and player is argument again so we're also gonna want to have the item name up here and because that is the item we're passing through from the local scripts here so we're gonna pick that up on the server there we go and we just want to see if game dot server storage player data find first child player dot name in case they something happen to their data or something inventory I can't find first child item name then so if the item is in their inventory because we're using item name here to see if it's in there then we're gonna return true else we're gonna return false okay I'm going to send this information back to the the local script and we can say if owned is actually what we'll do first is we'll check to see if it's equipped first so if equipped item because we're going to be saving the item that they click on to the equipped value so if equipped item dot value is equal to available tools I won so if it's equal to the the name of the current tool which we're looping through then we know that it's already equipped so we can say info frame cash dot text equals owned okay the info frame is this one right here and then the item name is this text label which shows up here we can set that text or two owned and then we can say info frame and set leave I button absolute by Burton dot text equals an equip because if it's already equipped and they click it again they're gonna want to unequip it so else if owned is equal to true and they do own it but it's not equipped then we can set it to equip because they own the item but it's just not equipped so info frame cache text equals owned and info frame dot Buy button text equals equip ok else if they do not own it at all then we can say info frame dots by button dot text equals by just like that and then say info frame cache dot text and we want to set that to the price and because in our nested table that was the second entry we can say available tools in fact we'll do a dollar sign first in us in a string and concatenate that with two dots at with the available tools I too just like that well strut it outside of the for loop we're gonna set the info frames item name text to the name of the item so available tools and then I and then one for the name of that item and then we're going to set the selected item you to the same thing just like that and that's just gonna set the name over here I think I said earlier it will set the name earlier it should set the cash but this will set the name and they're also the selected value which is here so now that we have done that's all that we need to do is give the frame a nice little border to show that it is selected but we need to firstly remove any other border from any other items item item frames because if we've already got an item selected and then we click a new one if we were to give the border first and then get rid of the water for everything else it would just delete the the border we just gave so we get rid of all the other boarders first by saying for and then underscore the in pairs I'm going to loop through everything inside the item frame and say do let's see add a little space here there we go so if the descendant or not the story the child is a image button because that's what our item one is then the border size pixel equals zero and that's just the thickness of the of the border okay and I've set the border as you can see to a nice green turquoise color so you can change that if you want to by going into item one and changing the border color three and then we're just gonna set the border size of the current box which we just selected two two two so we can say item frame and then we can say item dot dot I got border size pixel equals two like that and that will just give it a nice little outline to show it that it is selected so if we don't check this out and click play then we should be a point where we can see it in action so if we click on one of our boxes we haven't set the the text or the the viewport frame on the boxes yet we can see did data appears in the sidebar and we can collect different ones and it will show up and there seems to be an issue with the third we'll know more see if we can fix that right now so whenever I click it it says camera C frame is not a valued member of part so this shows that there was an issue with our tool model so let's go into the tool model for the rocket launcher and see what's happened here or whoops oh dear and say I must have cooled the value the wrong thing so it should be called camera C frame not C frame volume sorry about that guys now earlier when I did the backup the backup solution telling you to add in the value yourself make sure that you call it camera C frame not sir C frame value sorry that was my fault so if we go back in here it should be all good now yep there we go all is good and the pistol as your sword and the rocket launcher are in there and we can select them now so what we're going to do next is make sure that the same thing pops up for each box so we're now just going to make the image and the title change for each box so we can go back to the core local script and outside of the mouse button one click event for our box we're just going to drop a few lines here and we're going to create another fake camera and this time it's gonna go inside the box so we can say local fake cam equals instance dot new camera okay and we can say fake cam doctor parent equals box dot v PF okay so VP F is the viewport frame inside of each box and what we're going to want to do is copy the handle again so you can go up here to where we we did the the cloning of handle and we can just copy this and paste it down here and what we'll do is we want to say handle your parent equals box vpf to put it inside the V port for him because that viewport frame only renders objects which inside of it and then we're gonna drop another line and this time we're gonna set the the current camera to the handles and C frame value so we can say box vpf current camera dot what we first we want to set the current camera to fake cam and then we're gonna say fake cam dot C frame equals handle dot C frame no sorry camera C frame dot value there we go and because we called the value C for a camera C frame not C frame value we're then I'm just going to set the text of the box to the items name so we'd say item frame and item dot I dot item name dot text equals available tools I one just like that and if we go ahead and run the game again this time the boxes should be populated with some information ok so we've got the pistol as your sword and rocket launcher ad in there you can see all the items and we don't have any errors apart from that on which is a plugin issue so don't worry about that and you can see that the border size pixel actually you can see it changes when we click on each item and we have that nice little turquoise border so we have done the boxes now and you can click a box to see more information about it what we've got to do next is the handling of the transaction when you click on the Buy button because nothing happens at the minute so I'm going to go back to the court local script and just outside of the for loop here now that we've finished generating our boxes I'm going to create a mouse button one click event for the buy button so we can say buy button mouse button won't click connects a function okay and drop a line and this event is going to run whenever we click the Buy button but obviously because we don't know whether you've already bought the item equipped it or you want to unequip it etc we need to do another request to our to a new remote function so you're gonna need to make a new remote function if you haven't got it already this one's going to be called purchase item it's a remote function so make sure you add it into replicated storage and we're going to use that too you handle the transaction if they haven't already bought it and then will return back whether it was bought or not whether it was equipped or unequipped or if they don't have enough money to buy the item so we're just gonna store this result as a variable and we're going to get that result by saying game replicated storage doctor purchase item invoker server okay and we're going to send the selected item value okay which they have selected because obviously when they click the value sorry when they click the box then we are setting the selected item value to the name of the item so we're going to send that to the server I'm gonna go pick that up in the server handler we're gonna say a game don't replicated storage wave child and whoops did purchase sorry whoops child purchase item dot on server invoke equals function and we have the player and the item name again I'm going to drop a line and now we're just gonna get some variables to help us out here so we're gonna get the player's books so we can say local books equals player dot leader SATs dot books and then we're gonna get the item as well which they're trying to buy swing state local item equals game that's so storage doctor items come on find first child item name now we do I would do do we do find first child in case if the item isn't there then it's not going to break the script so if an exploiter tries to add a funny item which actually isn't stored in the server and tries to break the script it won't break so we using fine first child and then if we drop a line here that is the item that they want to buy stream say if item then we know it exists and we're gonna say if game server storage dot player data and then we say player dots in fact we'll do find first child play up name and we'll say dot inventory find first chart and felt in fact what we'll do is we'll just say player data player dot name square brackets dot inventory come on fine first child item name so if that item is in their inventory then we're going to set the we know that they've already bought it right so we don't need to handle the transaction so we'll check to see if it's already equipped so we can say if game drops over storage player data name dot equipped dot value if it is not equal to item name then it's unequipped currently unequipped so let's now equip it by saying it's over storage player data Gaelic name got equips got value I'm gonna make that equal to item name now we've only got one equal sign here because we're actually changing the value of that equipped but when we're checking we've got the well we usually would have to equal sign we've got the we've got the not equal to sign here just to check if it's if it's not already equipped so if it is not already equipped we've just equipped it right there and we're gonna stop this function right now and just return back to that local script that's it was equipped okay else we know that it is already equipped and if they've clicked the button then they're gonna want to unequip it so we're gonna say game looks so storage got to player data player dot name just equips sorry dots equipped dot value equals nothing we just do some maps and a string just an empty string and then we can return unequipped okay so if they have the item already and if it is not already equipped we're going to equip it else if it is equipped already we're going unequip it okay so now outside of that if statement but still in the the if item if statement we're going to see if they have enough money to buy it okay so if if they don't already have the item then we're gonna see if they have enough money so if books value so then the the value of that books variable that we just defined it's greater than or equal to item dot price got value because remember I said earlier on you need to make sure you have that price value inside of your your item so if you have the same amount of money or more then you're eligible to purchase it so we need to deduct that money from your account by saying books dot value equals books value minus item dots price value so that the money taken from your account and then we're going to add this to your inventory so we can create a new value for this this tool so we can say local item value equals instance not new object value because the value is going to be a specific object in this case the the tool object and we're going to say item value don't name equals item name so the name lap tool add item value parent whoops now we need to make sure that name has capital n and item a your parent equals game dot server storage doctor playdate up and then we're going to put it in the player's name folder so if you should let Skeets gonna go into this let's give order dot inventory that's where we can store it so that later on we can save and load these values and then we know that the player would have purchased the item so we can just return true and if we return true then that's going to mean that the player purchased it else we're gonna return they don't have enough money so return not enough books and make sure you're returning the same strings as I am because we're gonna be using them soon to check to see whether this value is equal to something so if the value is not enough books then we'll display on the screen that they don't have enough money so outside of this if statement here we're going we're gonna just say oh yes sorry and because obviously if the item isn't there we didn't just say else return no item if they if there was some error and the item actually didn't exist we could just return no item and end it there so that's all we need to do for this purchase item function here and that's going to check whether you're eligible to buy the item and if you are then it's going to buy it for you or equip it or and equip it and I'm gonna go back to our core local script and we will have return to value here either equipped unequipped not enough books or no item so let's go back to the core local script now and actually handle this on the client and change the buttons text or color depending on the outcome which we've just programmed in this server so back in the local script down here in the by button mouse button one click events we have let's go down here to the bottom of the script we have got our results variable and we want to firstly check to see if results is equal to true because remember we said if it's true then we know that the players purchased the item so if result is equal to true then it's going to drop a few lines that we've got enough space so if it's all true then we want to make the background color 3 a nice green color and to show that it has been bought ok so we can say Buy button dot background color 3 whoops equals color 3 dot from RGB with a lowercase F for from but RGB wouldn't uppercase and as you can see from RGB and then you're gonna you want to put your three RGB values in here so RGB it's made up of three values one for the amount of red one for the amount of green one for the blue and all together they make up color so I've picked a nice green color and you can just put in 42 14942 if you want to choose your own green color though just go to a GOI element open up a background color 3 and pick a color and you'll see the three values here so that is the green color so we're gonna set it to green and we're going to change the buy buttons text to say bought okay and then we're going to wait no point five seconds and then we'll say buy button text equals equip because now that they've bought it they can then they now have the ability to equip it and we want to set the the back the by Britain's cutter battery like a darker shade of green just to show that it's it's returned back to normal okay so background color three and I'm gonna set this color to a dark green and we'll do 55 193 55 okay that is a nicer color and you'll see it later on in action when we test this out so if it's true then that's all that we need to do because they've purchased the item and but else if so if another resort was happened so if they if they don't have enough books so if the result was not enough books because remember that's what we returned over here so if the result was that then we want to make a red color okay because there's been an error so we can just copy the same code from over here which sets the background color three but we're going to change the color three from RGB to more a red color okay so I've chosen 204 31 31 and that's like a a reddish color if I input the values here 204 31 31 okay there we go and that has given me a nice so red color and then I can set the buy buttons texture to say not enough books okay I'm just tap that in and then we're gonna wait Nonpoint five seconds again I'm gonna set the buy buttons text to say bye because they didn't have enough money this time and we can go back to the buy screen as if they don't have the item and we're gonna set the buy button back to its original 55 193 55 color so you can just copy this line from here so now that's the purchase success and not enough books eventualities covered but if they already bought the item and they've just equipped it then the result will be equipped and what we're gonna have to say here let's just add in our end by the way all I want to say here is we want to change the equipped item value to whichever value was selected so equipped item to bio equals less than that value now you might notice that we have two values on here for equipped we have one in the GUI and wooden which we created in these stat scripts now that's because we use the equipped file in the GUI just to show which item they currently have selected in the GUI but because this can easily be exploited and an exploit you could change it to whatever they like we store another one on the server which can't be changed by the client I'm going to only be changed by the server so if I if an exploiter tries to change the one on the client to whatever they want then nothing's gonna happen they're just gonna see an item that they don't have so that's why we have the two equipped items and we're just changing it here to show the item that we have equipped and we're doing this because later on and the bottom left of the screen we're gonna make it show the item that they have equipped okay so we've just updated the equipped item to whatever they have selected and then we're going to set the Buy button to that green not a nice green color again from the top up here and we're gonna wait to 0.5 seconds and then we're going to say buy button in fact we need to set the text of the by president before we do the wait so by buttoned up text equals equipped and I'm going to do the weight and 0.5 and we're gonna set the buy person we're gonna set the buy buttons text to say unequip because now it's equipped they might want to unequip it so we'll also just set the background color back to the original I think enough to you don't use the same colors as me this is what I'm using here and then we're going to want go on to the next eventualities which is unequipped so if results sequel equips and they've already bought it they would have it equipped and when they clicked it they've just gone and unequipped the item so we can set the equipped item value back to nothing okay equips item to buy it equals nothing so just an empty string or nil and there you can say in fact yeah we'll just do an empty string and buy button dot background code 3 equals and then we'll do the original in fact we'll do the the lighter one here so the lighter green color and we'll say Buy button dot text equals unequipped like that we'll wait nine point five seconds and then we're going to say a Buy button text equals equip because they've unequipped it they're not going to equip it the next time and we'll save Buy button got background color three equal to the original darker green color fiftyfive one nine three fiftyfive just like that so what that's going to do is going to pick up the result from the server whether we own the item or we don't own it or we have it equipped etc and depending on what that resources it's gonna change the buy buttons text and background color to show whether it was a success or not okay and the next thing that we're gonna do is we're gonna work on the equipped frame down here in the bottom left and what this does is it's going to show you the item which you have equipped when you equip a new one or if you join the game it will show up in the bottom left corner so you don't have to open up the shop to see what you have equipped and but first let's go ahead and test out the game and see what we have so far so let's just go click play and wait for it to load up and I've got 1111 books so if I go and click on the rocket launcher I can see the information about the products and if I click on Buy you can see it says bought and I can equip it if I want to so I can click on equip and there we go it's equipped and now says unequip and if we go into the server in the service storage player data and my name you can see that rocket launcher is set the equipped value and it's also in my inventory and what we'll do is we will make this show up in the bottom left corner of the screen and then later on I'll make it so that you are given your equipped item when the game begins so let's go back into the core script here and what I'm going to do is this is going to run as soon as the game starts so I'm going to say if ok because we want in an event or anything the coach is gonna run straight away so if equipped item dot value is not equal to nil okay or just empty speech marks your round to speech marks then so if there is an item that is equipped then we're going to want to just get rid of everything that's currently in the what in the equipped item viewports ok because the equipped item viewports is this one right here okay and it's only got some UI elements in there so what would you actually will insert a camera into there first so local fake cam equals instance new camera because we've got another viewport frame here and we're gonna say fake camp dot parent equals equipped item viewport and then we're gonna just get the handle of the item again so we can go up here where we did earlier and just copy this line of code and paste it in here and instead of saying I this time okay in available tools we're gonna say equipped all right instead of saying available tools I one into the whole thing we're just gonna say equipped item thoughts of value okay dot dot and then concatenating with handle and then we're gonna say handle dot parent equals equipped item viewport and we're going to set the equipped item viewport current camera to fake camp like that and we're then gonna say fake camp don't see frame equals handle got camp dot camera see frame dot value okay now that's just pointing the camera ass our item and then we're gonna do an else so if if there is nothing currently equipped then what we can just do is do nothing okay and I'm going to end that there so we don't actually need that and for now but we'll keep it there and what that does is it sees if we've got an equipped item saved and if we do have nice and saved we are just loading it we're pointing the camera at it because the equipped item will be loaded in now we're going to do the same thing again we're just going to do a a get property change signal on the value so one of the value of the equipped item changes we run this code again so we're gonna say equipped item gets a property change signal and I put value in here so when the value changes we're going to connect up to this event with function and inside of here we're just going to copy this code and paste it in here because every time it changes we want this to run again and let's just indent everything in here but this time we're going to add an else and because there might be an equipped item already in the equipped item viewports we're going to do a for loop like this okay and it's for underscore V in pairs and it's getting everything inside of the item viewport okay don't forget I need to add a curl on here for connect everything in size about item viewport we didn't get children so inside of equipped item viewport so everything inside of here now if it is not a folder because we have all of our shadows and text in here you don't want to get rid of I've put them in this folder so if it's not a folder then it's going to be destroyed so that the folder is spared and it won't be deleted okay so that is basically deleting any other cameras or items were previously in the equipped item viewport because you want to add our own in now so if there is no item or no equipped item we just deleting everything anyway and what we'll do is we'll do the same thing again we'll just copy this this these lines of code here let's just indent that one that and whoops there we go sorry let's copy this for loop and let's put it up here as well with our other fake cam so if there isn't a quick value we're just getting rid of whatever was that was in the frame last time okay but obviously we'd only still up here because it's running for the first time so this is pretty much all off the client coding done for now we are gonna have to come back to it later on just for something very very quick but for now we should have a pretty good shop and let's go ahead and test out see if we have any bugs I can open up the output I'm gonna clear it and we can select our weapons let's see if we can buy one all right we bought it and let's equip it and there we go it appears in the bottom left corner of the screen let's try and pick another one and equip that one and there you go you can see that the equips icon in the bottom of corner of the screen is changing and rendering the equipped item for us and we can change our equipped item so I'm currently got the as your sword and you see it's changed to equip when I go to the rocket launcher and you can see that all of these are owned and there we go it's all working in perfect condition everything's going well and that is everything so far that we need to do for the local scripts so the next thing that we're going to need to do is we're going to go back to saving the the tools and loading them that's what we were doing earlier on in the server stats of script so let's go back in and do that so what we're going to do here is we're going to what we firstly check to see if there is weapon data and so if there is no weapon data then we know that they don't have anything equipped right because no weapons and are equipped so what we can do here is we can firstly loop through all of the weapons that they have saved and load them in and then we will set their equipped value okay let's get rid of these comments and let's get straight to it we're gonna loop through all of the weapons that we've saved because we're gonna save them as a table okay and the table that we save is gonna look something like this okay it's gonna look like that okay so you've got your table on each entry is gonna be the name of the sort or the weapon okay so we're gonna say for for under school cuz we want using the counter weapon okay cuz that's the weapon we're gonna loop through doesn't matter what you call it in pairs and I'm gonna loop through weapons data table do and inside of this for loop we're gonna say if game dot server storage dot items come on fine first child weapon okay because we're not saying weapon name because it's at is that a string okay it's not an object so if we can find that weapon in service storage then we're gonna make a clone of it okay so a local weapon clone equals game server storage items and then square brackets we're gonna write I'm gonna write weapon and we're gonna clone that that tool and we can say weapon a clone doctor parents equals inventory okay that's going straight into the inventory which we defined up here alright so now that we've done that we can just print to say weapon dot dot loaded in just so you know that everything's loaded in fine you don't have to add this but it's good for debugging purposes and so outside of this full loop we're then going to just check to see if they have a quick data because obviously if they do have weapons we don't know whether they had one equipped or not so if equipped data then and we can say acquit so if there is data there we can set their equipped value which we defined up here and we can set that to equipped data okay and then we're going to wait for the player GUI and we're doing this because once the player GUI is loaded in what we're going to do is we're going to fire a remote events which is going to send the equipped value from the data store to the client so that we can display it in our viewport frame the bottom left corner of the screen okay so would wait for child play GUI because this server can't actually see anything inside the player GUI and then we're gonna say game got replicate the storage dot send equipped now if you haven't got this remote events make sure to add it I'm talking about a remote event not a remote function so add a remote event into replicated storage name it send equipped with capital S and E so send equipped and then we're gonna say curl on fire client so we're sending a request to a specific client in this case the player that joined the game because we're using the parameter of player and we're going to send with what with this request the equipped data so whether and what whichever tool is equipped or not ok and that is going to be it for loading the weapons what we'll do is we'll just add an else here to this if statement if weapons data we can say else print no weapons data and we've got our end there to finish it off okay so we'll deal with these send equipped very soon but we're just sending over the equipped the equipped data what they quit weapon from the data store over to the client because the client can't read from a data store so now we're going to go and save these tools ok and it's going to be relatively straightforward we're going to do is going to add another Pico after the after the first books they store and I've moved this players left one just outside of the Pico for now and we're gonna say P call function just to handle it well to keep the arrow enclosed if something goes wrong Pikul function and then we're gonna do and say local weapons equal with game server storage dot twoplayer data and we're gonna get the player the players folder dot inventory get children so we're just saving as a variable and we're gonna get we're gonna make weapons table okay so what pins table equals and then we're just can throw out our table there so what we're gonna do is we're going to loop through so four underscore V in pairs at weapons so we're looping through all of the weapons in the inventory as we've justified here do and we're just going to insert each weapon into that weapons table so into weapons table we're going to insert V dot name okay so the name of the tool and once we've got all of our tools into that table we can just say data stores code on set async and we can say player got user ID dot dot and then we can concatenate it with a string with a hyphen and reps because web swooz the key that we're using up here the unique key for each player cuz we're using that user ID to make it unique so webs and then outside of the speech marks but still in the brackets we're gonna say weapons of table because that's what we're saving to this key we're saving this table of all of the weapons that the player owns okay because remember it's not weapons actually it's it's gonna be values okay cuz we made that value from the item when they got it okay so we we make an object value and we set the value to two the item that they have and then they get saved because we get the the name so it's not actually the the tool it's a value that we that we are save so next we're going to save the equipped value so if games got server storage dot player data and then obviously their name their folder I've got equips dot value is not equal to nil so it's not equal to nothing then we can say local equipped save value you games or service storage thought to play at data and then get a folder again dot equipped thoughts value okay so that's just the the value that we that we're saving it to we said we're saving it's a variable okay in fact I'll get rid of the value here and just set it to the objects so we'll just say local equipped vow equals again for self storage playdates presently we've got equipped and then we can say data stores called onset async okay and we can say player dot user ID dot dot and concatenate it with equipped value because that is the key that we used up here for the equipped data and then we're just going to do equipped vow thought about you okay so getting the value of this equipped object value okay and then we can just do a little print outside of it saying saved weapons and points and then we can do the deduction of players left and we can fire at the bindable event and then we've got our bind to clothes and that will pick it up and ensure that the last player's data is saved when they leave the game okay so there we go we've got we've got our we've got our saving done just remove that and that should be everything for the stat script I believe and what we can do now is we can move on to the final part which is that send equips resent which we dealing with on the client so back here in the court local script we're gonna store scroll up to the top and just after our variables here we're going to do a a on a client event to pick up that send equipped which is the the equipped data the the tool that was equipped and was saved in the data so we're just passing it from the server to the client so we can update our viewport for him over here in the bottom left of the screen so if we go back to the core we can say game dot replicators storage doctor send equipped dot on clients events connects function and our arguments here it's just gonna be equipped and we say equipped because equipped is obviously the name of the tool which was equipped when they user last left the game and we'll use this to show in a few poor frame and we just say equipped because it is the the name of the tool because it was a string value okay and we've passed we passed through if you look in the stat scripts you can see that we said equipped Val that value which is this it's acquitted value here which is a string value so if we go back to the core and what we need to do here is we just need to update that equipped item viewport which is very very simple all we need to do is we need to firstly set the equipped item value on the client to the same value which we pass through so equips item value equals equipped and then we're gonna say if equips item value is not equal to nothing or just an empty string then we're just doing to create a another fake cam and do what we did down here if we have a look at in the get property change signal if we just take this these lines here when we generate the camera with the instance new to where we change the fake cam C frame and we copy that and just paste that up here that is all that we need okay because what we're doing is we're creating this fake cam and but this time we're going to do is we're gonna just change the parent and instead of being in the equipped item it's going to be in the equipped item viewport and I think that should be the same down here as well fake hand apparently who is equipped item viewport yes it should so make sure that it says the equipped item view put down here and let me just see if I made it in a house yep make sure you change equipped item to equips item viewport that's just a mistake made by me sorry guys so make sure that the fake cam doc parent is indeed equipped item viewport I sounded quite fat if I made this mistake anywhere else folk camp apparent equals equipped awesome viewport I think we're all good so make sure that you set it to equip so I some a viewport here and I think that is everything that we need because we are just basically cloning the the handle from two models we're putting into the equipped item viewport setting the current camera of that viewport to the fake cam and then changing the see frame to the camera see frame there so it's just getting the equipped data from the data store and then as soon as we get that we're going to fire it off here to the local script which which was where it will be picked up and then we just set the equips item viewport down here to display that information about that tall so anyway let's go ahead and test this out so I'm gonna go into my shop here and I'm going to set the main frame I'm gonna go and set it to invisible by unchecking the visible property and let's go and click play see if it works so if we load in here and open up the output you see it says no weapons data and if I click on the shop button to open it up we've got all of our items in here you can see I haven't got any equipped items because this is the first time I've actually played really when we've done the data saving and I can select an item here which everything looks good let's buy it anas your sword and let's equip it alright so I've got my as your sword equipped and what we're gonna do we're gonna go into the game but I've seen what we don't be giving it yet cuz we need to actually add it into the main script which we'll do next but we can unequip and we can equip the rocket launcher instead and we can buy all of these items so if I click stop you can see it's saved and if we go back into the game they might not have saved because we're gonna play solo here yeah it didn't save because we replaced hello but if you were to check this out in a real web locks game and it should work for you but anyway let's go into the main script and just add in the final part to make this work to give you your weapon so in the main script what we're gonna do going to scroll down to where you get your sword here what we do is we're going to let's just go here we're going to get your equipped value okay so locally quickly whose game door so storage top player data playdoh named equipped alright you need to add that in and then we're gonna say if equipped value is not equal to two just empty speech marks then local sword equals game dot server storage dots items and in square brackets we're gonna say equips dr. value and outside of that we're going to say at current clone all right we're cloning you're equipped sort a quit weapon but instead of saying sword and because it's a weapon or you might have a sword in your game minds focused around swords but you could have a gun so you can call it weapon if you want so local weapon equals game to a server storage dot items are quit via clone and you can say weapon dots apparent equals player doctor backpack okay and then you can say else and you do the same thing again local what this time if they don't have anything equipped you can take this local sword equals self storage sort of sword clone and just put it in here okay so just take it from where we originally had it and put it inside of this if statement in the else here and what I should do is it will just give you the normal default sword which we have got here in server storage so don't put that don't put the sword in the items folder keep that in serve storage because it's the default sword what you're going to use okay so if you don't have anything equipped then you're gonna get the normal sword and then if we scroll down even further to where we delete the sword over here what we're going to do is we're into we're gonna say let's get rid let's get rid of this sir this sword here it's sort this these two if statements and we're gonna say four underscore comma tool in pairs player dot backpack column get children do if tool cannot find first child price then told destroy and let's just copy this if statement and paste it again but this time we're gonna do it for the character okay for your character because you might be holding the sword so we're just going to change player up backpack call and get children to character curl and get children okay just like that and what that's going to do is it's going to see if you have a price inside of your sword it's going to destroy it but obviously the normal sword here doesn't have a price value so we're just gonna be a bit sneaky and we're gonna add a number value in here even though we're not gonna put a price on this sword we just not add a price so that that too will get deleted even though it's not worth anything okay so make sure your price goes into this sword tool here and we should be good to go alright so let's go and play the game and see if it loads in our air our tool so we're gonna open up the shop I'm gonna equip with the actual sword and let's see if we get given it there we go I was given my as your sword and what I want to have a different weapon I can just equip my rocket launcher here and wait for the next round to begin and we should be given our rocket launcher there we go what the rocket launcher and boom there we go everything clean still working fine and if we went to test this in a real game then it should save our data Wow so I think that is the end of this part in the series thanks for watching so far I'm sorry for the delay in in guessing these videos out I was very busy and I will try and get some more videos out around this series very soon so that would be impatient I'll leave the GUI in the description for you to take but if you want leave the entire source code and so you don't have to copy out from this video you can become a channel member for 4.99 in your country and you'll be able to get the source code there and don't forget to like the video and subscribe to a notification bar we do appreciate it very close to hundred thousand square was now and if there is something that is you know not working in this video then make sure to always check out the description because I'll always had some information in there if there's something wrong with it or if it needs updating and if you have any questions or ideas for future videos or for this series let me know in the comments so I just joined the game previously and I went and bought some items and then I left and let's go and rejoin I had the Azrael sword equipped and there we go it's loaded in again and you can see that the the books have loaded them as well but what if I go and equip the pistol and if you have a look it's now equipped and all the other items say equip but the epistle says unequip if I leave the game and we go ahead and rejoin it should have saved the pistol in our equipped item viewport so let's go in again it's gonna join the server and boom there we go the pistol is in our equipped viewport and it says unequip whilst the other items still say owned but we can still equip them so that's the end of this video I hope it was very useful if it was to drop a like don't forget to subscribe hit the notification bell and I'll try to some more videos in this series I know I haven't done a video in this series for a long time really sorry about that I just had other things to do and I wasn't able to find the time but I will have more videos coming out soon so make sure you subscribe for that and I'll see you in the next part