hey everyone it's great to be back and i'd just like to apologize for the lack of videos in the last few weeks i've just had a lot of things to do been working hard on my roblox game which i'm looking forward to showing you uh very soon but uh i'm hoping to get back to a regular uh more consistent schedule now so hopefully this is the first of many so a question that a lot of people have been asking is how can you make the pets from your egg hatching system save and load and i thought well i'll create this video but also if you're not working on the egg hatching system you can also watch along and this video will help you learn how to save things such as objects or inventories for other things so you'll be able to learn how to save items in a data store by the way the code from this video is going to my channel members so if you want to get that code that source code you can become a channel member and it's available in my discord server for members so what we're going to do is i'm just going to show you what we've got so far so we've got this inventory folder in my player and when you buy or hatch an egg the name of the pet which you just unlocked goes into this folder it's a string value is inserted and the name of that string value is lavalord so what we can do is we can loop through this folder when you leave the game we can get all of the names of the patent that you own from this inventory and we can put them in a table which stores uh information or data and then we can save that table which contains all of the names of our pets to a data store and then when we load the game up next time when we next rejoin we'll be able to get that table from our data store loop through all of the names of the pets that are stored in the table and load them back in so what we need to do is do the coding to put the pets names into a table save it to the data store and then load them all back again when saved so if you're not already aware what data store is data stores roblox is a way of allowing you to save and load data and what we'll do is we'll just go into our main script here and we're going to work on the saving part first so i'm going to collapse the equipping function because we don't need that at the minute um just to i'm going to collapse these two as well because we don't need to deal with them at the moment but at the top of the script looks like they've opened themselves up again i'm going to get the data store service now this is what you need in order to call the essential functions relating to data source so set async get async etc so local data store service equals oh by the way um i should put this on dark mode for you guys because i know you don't really like it when it's light there we go so data store service equals game colon get service and we'll say data store service okay now we need to i'm gonna do the coding for when you leave the game so when you leave the game we're gonna get all of the pets that you own and put them into that table so we can use a handy event called player removing and it will fire when a player leaves the game game.players.player removing colon connect function and we have an argument or parameter of the uh player so this argument tell will will be the player who leaves the game obviously we don't know who is going to leave the game so whatever we do with this player argument will be done to the player that leaves the game so we can firstly check to see if the player has that pet inventory in their player object which they should but just in case they don't if player cannot find first child and we called it pet inventory that's the name of the folder then we can create that table so local table in fact we'll just we'll call it something different um inventory equals and we'll do a blank table right next we're going to loop through all of the pets in that inventory and add them to the table so for i comma v in pairs and we're going to loop through the pet inventory so we can just say player.pet inventory now because we know it's there colon get children so when we use get children over here it generates a table of all of the objects in the folder so then because it's a table we're able to loop through it using a for loop and a for loop allows us to one by one execute code for every single item in that folder and what we want to do oh by the way i forgot to add a do on the end there so inside of here any code that we write is going to run for every single pet in there so if we've got five pets any code in here is going to run five times so what we're going to do is we're going to just insert the name of this pet into the table above and how do we know the name of each pet well luckily we have these two values here of our variables i get i guess i and v so i is the counter so the first object that we loop through is going to be the first one so i is one then when it finishes executing the code goes to the next one i is going to be two and it keeps on going up depending on how many objects we have but we're not going to worry about that what we're interested in is this one here the v v stands for value it's the and it's going to be the object that is being currently looped through so we have a direct reference to each object when it gets when we're looping through it so v is going to be one of the values in a table and there's no link between v mean value and and the children of the folder being string values it's just that we always call v the value but you can change them to whatever you want you could call it burger and it would still have the same um object attributed to it so we are just going to say table dot insert and we're going to insert into the inventory table i'm going to insert v dot name so we're we're storing the name of that pet in this inventory table and it's basically what these three lines have done they've dumped all names of the pets that we own into the inventory table so now we can save the inventory table to the data store and the reason we're saving the name of the pet is because you can't save instances to data source so you can't save objects to data stores you have to serialize them so that means um saving its its properties and then you can assign those properties when you load them so we're not doing that too much here because we're just saving the name and obviously we can just look up the pet in replicated storage by giving its name um when we load it in so we now need to save it to the data store so we can say data in fact we need to create our data store so we've got the data store service but we haven't actually created the data store for our game the data store object so we have to do local data store and the data store is what we're going to um call our functions on so like uh cassette sync get async we're doing it for this particular data store for this game well not for this game but for these pets so we've got a specific data store for our pets if you wanted another data store you could create another one but this specific data store i'm going to call it pet data store actually so pet data store equals data store service colon get data store and we can give a name for this specific data store so i'm going to give it pet data store it doesn't matter what you call it because this is this name is local to your game so as long as you don't have two data stores name the same thing in the same game you'll be fine so now we can say pet data store set async and that just means save something to the a store now when we save something to the data store we need to supply two bits of information because we need to tell our script um well if we have loads of players playing our game then how do we tell who's whose data is which we need to uniquely identify each player's data and we do that with a key so a key is supposed to be unique and for our data store here because we have one single data store for our pets and we're not saving anything else to this data store what we can do is we can just supply the player's user id so player dot user id now if you wanted to you could do dot dot and you could add a little string at the end just to identify your key so you could put pet and this would be useful if you had one data store so whoops you only had one data store here and you were saving things like your coins your pets etc you'd have one key using the user id and then you've got hyphen pet on the end and then another one might be hyphen coins and that way you can distinguish between the two keys but when we load the data store we're actually going to tell the script to look up in the data store based off a specific key so we're just going to use this key here now we add a comma and now we can tell the script the data that we want to save and in this case we're going to save that table now you can save tables to data stores but you can't save objects as i said earlier hence why we've had to do this thing here where we've looped through all of the values in your pet inventory and added them into this table so now that we've done this it's going to save to the data store but we just need to add a p call because data stores can fail when you request something from the data store service they could be down they could be not working you know and they can they can send back an error and if it sends back an error it's going to crash our entire script is basically going to stop it and it's not going to save any more data so in the event of a data store failure we just want to catch that error we don't want to stop the whole script because it could just be an error with that individual player we don't want to stop the script because that would stop everyone else's data from being saved so we can use a p call and a p call is uh it contains a function and if any code in that function fails then it won't error you'll still be able to like read the error message but it just won't stop the entire script it will just carry on running as usual so local success comma error message these are my two variables which will return back information equals p call function and like this you can see i just indent it and i have an end with a closing bracket and any code inside of this p call will now it won't stop the script if it errors and it's just that we do that with a data store since they're the most likely to fail out of any other code in the script because this is obviously making a call to roblox's servers which could potentially go down so we just want to say if success then print data saved so success will either be true or false and it's automatically set by the p call when it is finished the code inside the success and error message will be populated with some information so if success is true then we won't have an error message else if success is not true we can print error and we can also just do a dot dot and concatenate so join together with that string print out our error message like that so that is now going to save our pets to the data store and we can see if this saved because i've got a handy plugin called uh datastore editor by crazyman32 so i'm just gonna go into the game and in fact i'll just show you the datastore first let me just get the plugin up and running so the plugin allows you to enter a key for the data store and then you can check any data that is stored you can see if your data saved properly whatever so if we go in here and i put in my data store name it's obviously going to be pet data store okay and connect we don't need a scope oh my bad i need to turn on the studio access to api services so if you click on the game settings go to i'm not sure where it is actually it's here somewhere here we go security tab click on enable studio access to api services this allows us to make requests to the data store straight from roblox studio because normally you're only going to make those requests from a roblox game but we can test it in roblox studio by turning this on so i'm just going to x out of here um it seems that actually it's stuck so i'll get back to you okay i think we're back uh basically my studio uh just got stuck on this screen and it wouldn't work for some reason but i've turned it on and if we go back to the data store editor now i can put in the name again pets data store and connect and now we're connected to the games data store so what with this specific data store because you can have multiple data stores for a game now i need to give my key so i need to uniquely identify my data store so that's going to be my user id which is 14943069 you can find it in the address bar on your profile and then hyphen pets because that's what i said it was going to be and obviously there's no data yet because we haven't gone into the game but if i close this down go into the game i hope my scripts saved um because i got an auto i got an auto recovery file anyway let's go over here and let's click on the egg hatcher currently gotten only got one pet because it's going to be the monkey that i just unboxed so the monkey is now in my pet inventory i'm going to leave the game i'm going to open up the output window at the same time don't worry about these error messages if i stop the game oh we didn't get any messages ah that might be because um the play solo yeah because we're in play solo mode what would have happened is it would have shut down the game before um it's a chance to save that's only in play solo to counteract against this though very simple we can just say game code on bind to close and we can do a function inside of here and then we can just loop through all the players in the game so for i comma v in pairs game dot players can't get players do and what i'm going to do actually is i'm going to take this code out of my player removing just so that we don't have it repeated twice here and here i'm going to take it out and create a function local function save data we're going to take an argument for the player so we can specify whose data is going to be saved and then that way instead of having to repeat it in the player removing and in the bind to close we can just say save data player we need we we passed each player in so we passed the player as an argument from the player a moving event to the function so the function knows who's data to save and we're going to do it here as well but in this case because we're looping through the players in the game using get players get players is is a is a different it's similar it's basically does the same thing as get children but it only returns player objects so this time because i've called it v in my for loop i said earlier the value can be called whatever you want so i can call it player and i can call save data on the player now let's head back and try it once more so what this does this bind to close is because when i click the stop button in play solo it stops the server immediately so if we're just about to run the save data code in the player removing events then it would just stop before it saved the data because we've shut down the server whereas in a roblox game they usually shut down a few seconds after you leave so it's not instant but buying to close it only stops the server when um something we've put in the bind to close has finished so in this case we've put the save data you can see now when we press stop there's more of a delay um when we press the stop button it's about 10 seconds or so if we open up the output it says data saved and it's done it twice because it's managed to do it in the player removing there's been enough time for that but because we were the last players in the game when their server was about to shut down it looped through and just made sure that it saved again so this time let's go into date store editor okay back in here connect to our data store let's put in the key one four nine four three six nine hyphen pets and there we go we've got a piece of data saved in our data store table and it's a lavalord so you go in here we've got our lavalord so we've managed to save the data and next what we need to do is load the data so this is this is going to be uh simple to do we go into the player added function here we need to um load the players data from the data store so we're going to use get async now i'm just thinking of the best way to do this now obviously the data that's saved is a table so let's create a little variable here call it data we just won't set it to anything at the moment we're just establishing the variable because if we load the data and the data is nil then we we want the data um we want basically we want to i'll show you in a minute basically but because the data could either have some value in it or it could be nil because if it's nil you have no data or you might be a new player uh we're going to need to set the data value variable to something and then we want to access it from outside of the for loop which we're about to do the sorry the if statement that we're about to do the if statement that we're about to do is going to check if you have a data or not so um we can say if data store serve sorry if pet data store get a sync sorry let me just think about this um yeah so let's do local data equals pet data store colon get async so get async allows us to query the data store servers asking if it has data for a specific key and we know that our key is going to be the player's user id so player.userid dot dot and then we got hyphen pet on the end because that's what we added now when we do this it's going to look up in the data store for this specific key and it's going to return any data there so if there is a table and there is some data then this data variable is going to actually change it's going to actually hold the data stored in this data store in this key so data is going to be our table of pets but obviously data could be nil and it could be nil if you're a new player or if there was an error when saving your data or if it got corrupted so we have to have an if statement check to see if that data is actually there so if data then and data basically just tells us if it's not equal to nil now if data was nil then this if statement would not run the code inside of it so we can add an else so else we know that there's no data so we can print no data found must be a new player or something else happened to the data so if it was a new player we don't actually have to do anything because um if they do have data we can just load it in if they don't have data we don't need to load it so we are going to loop through that table because obviously we now know we now know that data is a table containing the names of the pets nuts they own so because it's names and objects we need to look up each individual pet in replicated storage dot pets so what we can do is we can go for i comma v in pairs and we're looping through the table which is data do remember you can only loop through tables in a for loop like this so for iv in pairs data do now we don't need to focus on the i i is just going to be the index so the position in the table so if it was the first object in the table it would be one the second one would be two but it's going to loop through all of those names in the table so v is going to be our pet name so i'm going to change v to be pet name now we need to check if there is an actual pet in replicatedstorage.pets with this name so we can say um if game dot replicated storage column wait for child pets colon find first child pet name then so if the pet does exist in replicated storage dot pets then we can call equip now we don't want to call it quit pet we just want to add it to the pet inventory so we can say local value or string value even doesn't matter really equals instance dot new now when i was saying earlier about serializing you can see that we're now deserializing the data in a very simple way the serialized data was not the pet object itself it was the pet object's name we're now deserializing by creating a value in that pet inventory from the name of the pet so we can say instance dot new string value insert that string value give it a name of the pet name and we'll parent it to the player's pet inventory so player dot pet inventory okay now now that we've done that it should be in the pet inventory so let's go and test it out i'm just going to publish the game make sure it's up to date and click play and we're nearly there guys nearly there um so if we go into the players album blocks pet inventory you can see our lava lord is added to the folder because it was stored in the data store and we got nothing printed in the output because obviously it was only going to print if it said no data found but it looped through the data that we saved in that table and we only had the lava lord stored but the lava lord has gone into our pet inventory however it does not show up in our gui that's because we haven't inserted it on the client we haven't created the template for it so we just need to create that template and we should be good to go so if we just go into our gui client we have this function called add to frame don't we so what we need to do is send the loaded information from this data store into the client script now what i'm going to do is i'm going to use a remote event for this so what we can do is we can create a remote event so we can send the table of the pet names to the client and then on the client we can create those templates we can call the add to frame function for every single one so i'm just going to duplicate this remote event and i'm going to call it um send data and then in the main script we can say just after the if statement still within the if data then if statement we can say game dot replicated storage dots send data colon fire client so we're going to fire this remote event for a specific client it's going to be our that that specific player not all the players but just a specific player so player is going to be the player that we send it to so the player when you're doing fire client it has to be the first argument that you send the first one else you're going to mess it up because it's done in a specific order so then we just need to send our pets our data we just send that that data because it is a table okay so if you're not sure what a remote event does obviously because we want to run some code to add the the the pet to our gui that's done on the client because of the gui guis are stored on the client and it's not a good idea to edit gui's from the server it's a much better idea to just handle all of the gui coding on the client so this is a server script we don't want to edit the gui from the server so we're firing a remote events and we're going for this specific player and then in the gui we're going to code an event which listens out and waits for this remote event to be fired and when it does get fired in the local script we can pick it up and we can we have some data that gets sent with a remote event so in this case the list of pets the data we can pick that up on the clients and we can run this add to frame function for every single pet in that table so i'm just going to do that right now with obviously five we've done the code that will fire the remote event we now need to just pick it up so just after the add to frame function i'm going to say game.replicatorstorage dot um send data dot on client event so when there's a fire client we're going to connect it to a function and inside the brackets of this function we can obviously pick up our arguments and that's going to be the data or the pet names you don't have to call it the same thing so i've called it data here because that's obviously the variable that we're sending but however when we pick it up you can call it whatever you like but it has to be in order and you might notice as well that we haven't actually written we haven't actually put the player argument in here on the client and that's because it gets sent or well it doesn't need to get sent does it we don't need it because we know on the client we know who our player is going to be running locally on that player's computer if you wanted to get the player you just say game dot players dot local player because the local script is going to be running on that player's computer so so we know who the player is going to be we don't even need it so we've got our table of pet names and what we can do is we can loop through that table once again for i comma pet name in pairs pet names we're going to do get children because it's just a table of strings a table of text a table of names not objects and get children only works when you call it on an object so do and then again index is just a number the position of that pet name within the table we just need to call add to frame actually add to frame is going to be uh the pet object isn't it so um we could just let's think about this we we want to call um let me just think about this petal name we're doing anything i don't think yeah we can just what we can do is we can just get the pets object out of replicated storage game dot replicator storage dot pets and we could do find first child pet name like that ah there we go okay and let's just think about this yep that should be that should be good uh in fact we'll just do a security check so if game dot replicate storage dot pets find first child pet name just to make sure that is definitely there you never know um it might have been deleted for some reason or um if you accidentally took the pet out of this out of the folder for some reason then it would it would stop working however we seem to be good to go with that let's just do a print to you know know that it got picked up so we can pick picked up on the client and we'll just print off over here we'll just print fired send data all right we're almost good to go guys so thanks for sticking around with the tutorial so far i think we we will have this wrapped up in a couple of minutes so there we go we've got our lava lord you can see it's in our pet inventory and it is now showing up in the infantry gui and guess what i can equip the pet go onto server mode and it's there you can see it's still there in server mode as well and let's go ahead and unbox a pet like this and we've got another lava lord and i'm not sure if the if it's still weighed to give you the same pet nope we get a tv this time so we now have three pets two lava lords and a tv you can see they're in our uh they're in the in their industry if we leave the game however we need to wait a couple of seconds for it to shut down the server and save our data successfully we head into the data store editor this time again one four nine four three oh six nine it's my key you'll have a different one i've been pet you can see the three of them got saved to the data store this plugin is just a way of being able to see what's stored in the data store um api and we play the game again and click on inventory you can see that it has saved the three pets just like this and we can get them out again it all seems to be working really well okay one last thing that you might have spotted uh it has not saved the equipped pets so we can do that now and it's going to be a good thing to show you actually because i remember earlier we talked about having this one data saw in our game but what if we wanted to save multiple things that one data saw well we're going to want to save the equipped pet aren't we so if we go back to our save data function we can say if player find first child uh equipped pet so that's the name of the value equipped to pet then we can say if player dot equipped pet dot value is it's not equal to nil so if there is actually some data stored in this equipped value then we can say we do another p call because we're obviously dealing with data saw and it's a little bit dangerous if we don't have a p call because it could break the script if it goes wrong local success comma error message equals p call function like this and we can say pet data store cut on set async and this time we're going to use a different key because we don't want to overwrite our pet key we're just going to have a different key so you can have you can have one data store for your game like this so this could this would be your main data store but you could have different keys so you could have you know one one key for your bets and you could have another key for your uh for your equipped pet your ep equipped pets and so you can get these different pets uh different keys within the one data store like that so this time we're gonna still use the player they their user id because we need to uniquely identify them however we're just going to change the suffix so the thing that goes on the end and that's going to be equipped pets you can call it whatever you want you could call it equipped you could call it um dog right but it doesn't make sense calling it dog because you're gonna have a hard time remembering your keys so equipped pets then a comma and we're gonna save player dot equipped pet dot value okay so that will have saved it to the data store if you don't believe me let's go and check it out just publish the game again just to make sure that it all gets saved we'll head back in and i'll equip a lava lord i'll stop the game head back to our data store editor now this time if we go into our game's data store one four nine four three six nine we now have two keys so we have a key for the pets that we have but also one four nine four six 4369 hyphen equipped pet and that's going to tell us it's lava lord so there we go um and it saved us a string this time it's not saved as a table we saved our pets as a table because we we set it to this inventory table however this time we've just saved a string because it's a string value so the value of that is going to be a string a string is just characters or text so we just need to load it in now so we can say we're going to have a separate if statement for our second key so we can say local equipped pet data equals pet data store colon get async player dot user id dot dot and then equipped pet because that was our key for this equipped pet data so we can say if equipped pets data then we don't really need an else unless you wanted to print out that there was no data found that's what we did over here you don't really need that you get rid of if you wanted but we can just say uh equipped pet dot value equals equipped pets uh data i think we can do that because the equipped pet value if we just double check down here yeah we set the equipped pet value to the pet name and because we've already above already in the code this is why i've done it at the bottom here i've done it at the bottom because by now the equipped pet dot changed event will be running so when the equipped pet value does change it will fire this equip pet function for us so we need to right at the end it's the last thing that's going to happen it's going to check if we have that data stored for our equipment pets and if we do going to change the value of the equipped pet which we created up here and obviously when it does change that value it gets picked up by this changed event and then it will equip the pet for us so let's again check out the game for one last time and we obviously have the lava lord set as our equipped pet so let's see if it spawns in for us okay moment of truth and there we go the um pet has been equipped for us however it does not show up as equipped in the inventory uh that's the last thing we need to do then okay so let's create one more remote events and we'll just call it um set equipped pet and then we can say uh over here game.replicatorstorage.sets oh sorry i'm in the wrong place that's my bad we go up here to the player added when we set the equipped value we can say uh in fact yeah we can say game dot replicator storage dot set equipped pet code on fire fire client we want to again fire it to this player only who's going to have joined the game um then we can say player and we can send their equipped pet data it's also going to be the name of the equipped pet then in the gui client we just do another uh event for our remote event we can say game.replicatorstorage.set equipped pet dot on client event colon connects function and this time the argument which we've sent is the pet name so we can now the way that i've coded this is it doesn't really matter so if we had like five lavalords and we need to set a lava law to be equipped we don't think it really matters which one we equip just as long as one of them gets set to equipped so it doesn't matter which specific lava lord or which specific pet of that name gets equipped if you have multiple of them so we just need to um we need to do the set template equipped function but we need to provide a template object so let's just find a random one in our inventory so let's just say if uh scrolling frame because it should be in there by now the the it should have already been added to the frame our pet template fine first so if scrolling frame find first child pet name so just double checking that it's there then double check that the pet template has been created so if it's there then we can just say set template equipped on scrolling frame dot and then we're doing square brackets pet name because pet name is an argument it's not an actual name of an object if we did dot pet name like this it would think that there's an actual object there called pet name whereas in this case the pet name is the value and it's holding an actual name of the pet so it's going to be replaced with the actual name of the pet okay so now let's go and try this out hopefully one of our lava lords should be set to equip so here comes the lava lord hopefully there we go there it is and we go in here boom lava lord equips check the output seems all good and if we click this it goes unequipped we can equip another lavalord seems to be working rather well so that concludes today's tutorial teaching you how to save pets and you know you could do this for other objects as well it doesn't have to be pets it could be swords it could be um anything you know anything that's like an object in your game hopefully this has given you some insight in how that works i do want to do some more videos especially on like how to save things on a base plate and going into more things like serialization i think you'd really benefit from those videos so again do let me know in the comments section if you do want to see those it's been a good video this one i've enjoyed making it and hopefully i can make some more as well coming soon so thanks for watching leave a like it was helpful share it with a friend if you want to share the knowledge and don't forget to subscribe if you're new as well i'll catch you in the next video cheers bye