so in this video I'm gonna show you how to create a daily reward system which allows your players to receive a reward every 24 hours which they can claim they'll get a random reward and then it will make them want to come back the next time so that they can get another reward so let's go ahead and get straight into the video now a daily reward system isn't too hard to make most of it will just be actually coding the amount of time since the last visit and then we're gonna use this nice GUI and then there'll be a nice little animation effect when the player claims their award to save some time I'm going to put the link to the model of this GUI in the description so if you want to take it then you can go to the the link in the description and take the model and then go in the toolbox go to my models and you'll be able to insert the GUI from there into the start GUI but I'm not going to give the code if you want to get the code you can become a channel member by clicking the join button for the source code but if you want to learn more about scripting I recommend that you watch the whole of the video and copy from the video as we go along so that you learn how everything works alright so let's go ahead and go into a new place then alright so to begin with I'm gonna go ahead and take my GUI as I say you can go get this from the description and insert it into the starter GUI and I'm just gonna remove the local script here because you won't have that but we have a daily reward GUI and we've got a mainframe here now it's an image label because I used around if I plug in to make it nice and round I'm then going I've got a text button which is a claim button as well that's been round if I'd I've got a come back text label and that will say how long it is until your next reward and also got a title text label and that just says daily rewards so pretty selfexplanatory we've also got the reward notice that is when you click the claim button you get a nice little animation and it pops up saying how much cash you got so we're gonna script that but the first thing we're going to do is we're going to just go ahead and click on the add a Lee ward GUI and set enable to false and then we're going to begin scripting the daily login system so how this works is we're going to run the player first joins and they get the daily reward GUI pop up we're gonna get them to press the claim button and then when they press that claim button we're going to save the current time and then the next time they rejoin we'll compare the current time to the time when they last claimed a reward and see whether that time has exceeded 24 hours or however long you want it to be between rewards and so once that time limit has been exceeded then we'll give them another award else we'll just wait until they they have not had one for over 24 hours so it basically lets people you know Gary Ward for Quinn back playing your game and so people will want to come back and play again so to begin we're going to click on service crypt service and I'm going to insert a script and I'm just gonna make this a little bit bigger so you can see it and inside of this script the first thing that we're going to do is we're going to get the data store service so this is what I'm going to use to save our values our times etc all ready for the next next time at they join so we can just say local let me get my other keyboard so it's nice and quiet so local data store equals a game and then we're gonna get the data store service so see we can say get service data store service and then we can say current get data store and then we need to give this data store a name so I'm just going to call it daily rewards so this data store is going to be where we store all of our data related all our values relating to the the daily reward system for this game only now if we were to change the name of this data store it would wipe all of the current data that is stored in it but obviously we don't have any data yet so we're all good to go we're now going to define some variables so the our weight in between you in between your rewards so if you want this to be 24 hours then set to 24 so local our weights equals 24 and then we're also going to do a table called possible rewards we'll get into scripting this later on but this is just going to give the player a bit of look a bit of chance so they might get they might have you know that there might be 500 cash that they could get or they might just get 5 so it just you know it's a bit of look in there because they might get there's a bit of a chance look sort of thing so they can get a different kind of prize at each time so we can say possible rewards equals and then I'm just going to define a table like that so next thing we're going to need to do is we're gonna need to create an event an event is something that will trigger code or when a certain when something happens so in this case we want to fire some code we want to actually get the time since the last player joined when they join the game again so we can say game dot players top player added curl on connect function so this is just connecting the event listener which is waiting for a new player to join the game to this function and this function will run obviously when a new play player joins the game we're going to pass an argument here for that specific player obviously we don't know the name of anyone who's going to join the game so we just say player and that argument is going to be the the player that will join the game okay so we just referenced them as player right now so anything we do to player will be done to any player that joins the game so inside of this player added event then what we're going to do is we're going to create some leader stats for them obviously there's going to be some kind of reward that they get so we're going to need to give them some cash to begin with so like a leaderboard so we can say local leader stats equals instance dot new folder this folder is going to contain their cash that value and any anything else that you want to appear on a leaderboard in the top right we're then going to say leader stats dot name equals leader stats and if you want your leaderboard to appear in the top right you have to call it leader stats lower case just like this as I have spelt it actually not going to see a leaderboard appear and then we can say leader stats dot parent equals player so now that we've done that we can create our cash and then put that into the the leader stats so it shows up on the leader board so I'm going to call my currency coin so in say local coins equals instance dot new int value and then we can say coins dot name equals coins and then coins dot parent equals leader stats now I'm not going to do any saving of coins in this video I have done a video on how to save currency though in the past so I'll leave a little card in the top right if you want to go and check that out but with the knowledge that you're getting today from data stores you should be able to learn how to save the coins yourself anyway cuz it's pretty simple so you should be able to do that so now that we have created our coins leader stats we now want to get the current time so the time at which they join so that later on we can compare this time to the last saved time when they last claimed their reward now a good way to do this is to use OS dot time so we can say local time now equals OS I'm saving this as a variable OS time is a number of seconds since January 1st 1970 I believe there's something called the epoch OS dot time is going to return the amount of seconds since that time okay midnight on January the 1st so what we can do is we can we can say OS dot time here when they join the game and then when they claim the reward we can also save OS dot time now because whenever the player rejoins the game again is going to be a few more seconds into the future we can subtract these OS time values and then we'll have a number of seconds since the player last joined the game so what we'll be able to do is we'll be able to see whether that number in seconds we can see whether it is greater than or less than 86,400 which is 24 hours in two seconds and if it is more then we will give them their daily reward so OS up time is the amount of time in seconds since the epoch and so what we can do is we're going to we want to see if they have data saved ok so if the player has joined again before and claim the reward then we will have saved some data with the data store so we'll have saved the OS time value so what we're gonna do is we're going to say local data and because we don't know whether they have data saved or not we're not going to set data to anything just yet so we're going to drop a line but we're still going to have a variable defined so we can say in a peak or so Peak or function and drop a line so this Pico is going to try and get the class data now because the player might not have any data or there might be an error with data stores or something that just makes the get async line fail for some reason we don't want it to break the entire script so that the handling of of the daily reward system is not impacted for other players because data stores might go down you know no and they might cause an error in your code because you know if they'd stores aren't working then that's not very good so with picot it just contains the error but it keeps the script working it doesn't break the entire script so we can say data equals datastore colon gets async and then what get async does is it looks for data within a key now the way data stores work is that each player has their own unique key and for a games datastore you will assign a value to that key so that you can look that key up and see if there's a value attached to it and if it is then you can get that value using get async so I'm gonna do is I'm going to look to see if there is an OS time value saved for our current player now as I said we don't know the name of the player who has joined the game right now so we just use player ok as our argument and then when a player does join the game whatever we're doing to player in this event will be done to the player that joins the game so inside of the get async we need to give them a key now the key I'm going to use is I'm going to take their user ID and then we're gonna attach daily reward to it so it's unique to each player but we still know what the key is now the issue of using a player's name for the key is that maybe if they change their name their date is gonna be reset you've got lots of issues that arouse if you use the players name so we use the player's user ID so we say player dot user ID and then we say dot and then we're gonna attach a daily reward to it okay so just like this we're saying daily reward so a player's key might look something like this okay like that okay so we'll look in the datastore for any data or any value associated with that key and if there is data found then we're storing it in this variable called data okay so now that we have got the data we can just prints getting data and then outside of this P cool because we're no longer dealing with finding the data what we can we can now say is we can actually check this data and see if there was data found or not because there might not be data found so if there is no data then there going to be a new player to the game so what we're going to do is we're going to check to see if if the data is equal to nil okay so if there is equal to nil then it's a new player so what we're going to do is instead of saying if data is equal to new or say if data is not equal to no and then we'll add an else statement and we'll deal with the new the new players there so we can say if beta is not equal to nil so if there is some data then we know that it is a returning player to the game else we know that it is a new player and so if is a new player then what we're going to to do is we're just going to print new player and then we'll deal with that later on when we get to the actual saving part so if they are a returning player to the game then we want to get the time since the last play now I said earlier that to do this we're going to subtract the two OS time of our use so what we'll do is we'll create a variable here called local time since last play and this is going to be equal to time now which is our variable that we defined up here on line 18 which is the current number of seconds since the epoch on first of January 1970 and then we're going to take that number of seconds now because the time now is going to be in the future okay it's going to be ahead of the last claim time then in order to keep it a positive number then we're going to do time now takeaway or minus data okay so that should give us a number in seconds since the last reward was claimed okay so we're going to save the data later on as I said but we're going to save the OS dot time value and then we can take these two away and get the time since last play and so if you want to print that out and then we can just say print last what we could say I think instead of saying last play we should do last claim because what I'm going to do later on is we're gonna save it not when the player leaves the game but when they actually claim so I'm gonna say time since last claim equals time now data so number in seconds since the last reward was claimed because they might claim the reward when they join but then they might be in the game for two hours so that's giving a an inaccurate result so what we can do again is you can print time since last claim and then we can cut it we can concatenate this string to the time since the last claim all we need to do now is use an if statement to check to see whether the time since last claim in seconds is greater than a day okay or however long you want it to be so because we've got a variable here it's not constant so you might want to change it to two days 40 hours between daily rewards or even three days or you might want to just keep it you know short and you get a reward every two hours or 12 hours it's up to you so you can set the number of hours in between rewards in your our weight variable so what we're going to do is we're going to say if time time since last claim divided by 3,600 okay it's taking them number of seconds it's dividing it by 60 and it's dividing it by 60 again because 60 times 60 is 3600 obviously this is in seconds and we want to convert it to hours so diff 3,600 well firstly / 62 put it in two minutes and then divide by 60 again to put it in two hours because 60 seconds were in one minute and 60 minutes are in one hour so we're dividing by 3600 and that should give us a number of hours or what since they last claimed their award okay we want to see if that number is greater than or equal to our weight okay so our weight is currently set to 24 so if it's greater than or equal to 24 hours then we know that that they are eligible for a reward okay so what we want to do now is we want to actually choose a reward to give to the player so this is where the possible rewards table comes in because we defined it earlier on on line 5 and what we're gonna do is we're gonna we're gonna add an element of look okay because you know you don't want to come back to the game you want a player to come back to your game in 24 hours and they know what they're gonna get because if they just keep getting the same thing then it gets boring they don't want to come back again so there might be a chance that if they come back they might get a massive jackpot okay which is super rare or they might just get like five coins or something really really basic but it just it makes a you know a nice little fun thing to add to the daily reward system so up here in the possible rewards table I'm just gonna add a bunch of different rewards that you can get okay so we can do 10 15 10 10 10 5 5 5 5 so these were the common ones which can get so you can get ten coins 15 coins 10 coins these are all in coins okay so it's the number of coins that you're going to get all right so I'm just gonna add a bunch of these in here so five is gonna be written common 10 less so 15 is so common and then we'll do 1 500 coins so if you're really lucky you're gonna get 500 coins added into your balance so now that we've done this we've got a table of different values okay table just holds multiple bits of data okay and what we'll be able to do is we'll be able to pick a random number because each object in this table has its own index okay so the first objects in the table will have an index of up one this will be number two number three number four five six seven all the way to the end okay so each object has its own index attached to it so we can we can choose an a random number between one and however many numbers there are here so I don't know how many there are but you choose a random number and let's say the random number was seven then we would go one two three four five six seven okay we're gonna pick the seventh entry into this table and boom you've won yourself five coins so to pick a a random number from this table what we can do is we can firstly create a variable for the reward they're going to receive so we can say local reward equals and then we're gonna get the possible rewards table and then we're going to select an entry from that table so we can inscribe square brackets we can specify the index number okay so I said remember each object has its own index okay so from one to two however many to however many entries there are in the table but to pick a random one we can use math dot random which will pick a random number for us so we can say math dot random and then in parentheses or brackets here we can say one so the random number will be between 1 and then however many entries are in that table now a really quick way to find out how many entries or objects are in that table or all numbers in that table you can just put our hash tag and write the name of the table so in this case possible rewards now let's actually count how many entries there are okay so 25 entries in this table so it will be between 1 and 25 right so it's going to take the 25th entry so let's say that 20 the 25 was the random number it will take 25th entry in this table which is 500 and we'll set reward to 500 so the reward is going to be the number of coins that you're going to get so what we want to do now is we want to show on the player screen the GUI okay and to do this we're going to use a remote event okay just to make sure that the game is compatible with filtering enabled as well so that it works perfectly and we can display to the user how many coins they got so it will display this daily reward GUI and then when they click the claim button we will use the reward notice and we'll do a nice little animation on it and it will come up on the screen and say you won 10 coins all right or 15 coins however many coins you got just them so as I get as I said again when they click that claim button they don't know what they're gonna get is sort of like a random draw a sort of thing I said when they kick claim that they're gonna get that nice pop up and it will look really nice and polished so let's go and just set the GUI to enabled equals false we're gonna uncheck it and what we're going to do is we're going to insert our most event here so the remote events it allows the server their server script here which is obviously running on the roblox's server machine it will let us it will let us show it will let us execute some code on the the player also known as the client so a server script can't access a player's UI GUI so we have to use a remote event and we then fire that event in replicated storage which the server and client can both see and then actually in the players GUI as we can't access it we can add some code which will be replicated to that players GUI so that we can pick up that request from the remote event whenever we fire it from the server and we can we can show the GUI and will tell the local script which we're going to make to actually show that GUI so that we can we can say that it's time for a reward and they can then click claim and we'll do the same thing just going the other way will fire a remote event from the client to the server and then when they've clicked the claim button we will give them that reward so if you're not too sure on what remote events or filter enabled our don't worry I'm gonna be doing a few more tutorials on it soon I've already got a couple on my channel as well so make sure you've subscribed so that you don't miss out on those so we're gonna click on replicator storage and I'm going to add in the remote events and then I'm gonna just name this event show daily reward okay so show daily reward and obviously this is going to be fired by the server I'm going to pick it up on the in the GUI on the client so that we can make that GUI enabled so we can show it and show that they have got a reward so you can go back into the service script here now make sure that you've saved your work ctrl s and then make sure you've got it saved I'm going to save it as daily log in and so what we'll do is we'll go under this line 36 underneath local reward and we'll say game not replicate the storage got show daily reward code on fire client okay because we're firing this revised event to be picked up on the client okay so the client that we want to fire this to is the player who is going to claim their reward so we can just say player but we also want to pass some information across to this player we want to we want to pass the hour wait and we also want to pass the reward okay so the hour wait will tell the player how long it is until the next reward and the the reward argument they were passing through will just pass through to the client the amount of cash that they're going to receive and then we can pick up this information and then we can share it in that nice animation which will pop up saying you got 50 coins or you got five coins so we're passing it through now and then we'll pick it up on the on the client and then energy you I will just show it in that GUI and make it look nice and fancy so now that we've fired this remote event we don't need to do any more server coding for now we can start actually going into our GUI and coding that to pick pick this remote event request up so by now you should have the GUI imminently started GUI as I said I'm gonna put it in the description down below so have look in the description and then go take the model add it to your inventory then if you go to my models you should find it so go ahead and click it and then it should be added into your game make sure that you've dragged it into started GUI so what we're going to do is we're going to add a local script to this GUI and then inside of here we're going to pick up that remotes that remote events trigger which we fired from the lis server so we can say game don't replicator storage dot show daily reward and then we can say on client events so it's going to like I said with the player added event it's going to run any code inside of here when that remote event has been triggered by the server so in say on client events curl on connect and then the the information we passed to this from the server to the client was the hours the hour wait so the hour the hours to next reward and also the reward amount now I know that we we passed through let's just add a lot dropper a line here oh we forgot to do function whoops connect function hours to next reward reward amount and the nest dropper line there we go so I we didn't name these two arguments the same in each script this one was called hours to next reward but we actually we sent it as our weights and we sent a reward and picked it up as reward amount real isn't matter what you name them as long as they're in the right order so that they get passed into the to the to the same the same arguments and parameters you know I mean so obviously because our wait is the second one it says it's the second argument we don't count player because you don't need to pick that one up we only need to tell the server what to send it to so we don't need to pick that one up on the client because we already know who the player is because it's running locally on that player's machine so we've got the hours to next reward and the reward amount so the first thing we want to do is we want to show the daily reward GUI so you can say scripts not parent but enabled it was true we then want to set the come back to text which is let's just let me show you it's this one here so we want to update it so it says come back in the amount of hours for your next reward so we can go ahead and go back into the local script and say script doctoring dot frame got to come back got text equals come back in and then we can concatenate the hours to next reward and then we can say hours for your next reward just like that so that's gonna update that text and then we want to have a mouse button one click event for when we click the claim button okay so when we click that claim button we're then going to fire another remote event as I said earlier on and then when that's event is fired then we will go back to the server and then we will add on the reward to their coins buttons okay so what we're going to do is we're to say script dot parent dot frame dot claim dot mouse button one click turn on connect and then function in parentheses with another pair of parentheses after that and then we'll drop a line Edmond we don't need to have any arguments here for this event as we did with the on server event on client event ones that we just did the on client event one so all we need to do inside of this mouth put some one click event so one whenever the the claim button has been clicked we want to fire another or most of it so we're gonna go to our replicated storage here and we're going to just duplicate this remote event and I'm gonna call this one claim reward so we can say game dot so we can say Ashley we're gonna say local reward equals in fact we don't need to say look old we could just say because it's not a remote function game don't replicate a storage got claim or award fired server okay so this is going to send a request off to our remote event and whenever it's triggered we're gonna pick that up in the server script and then we'll go ahead and give them their reward okay because we thought you enabled you can't update a player's coins or you know currency from the client because it's only going to update for them it's gonna be blocked by the server because filter enabled blocks all requests to edit something on the server from clients okay as I said if you want to learn more baffle to enabled often quite a few videos on my channel about it so now that we've fired this claim reward event all we need to do is we just them to flash up our nice little reward notice so to do that we can say script doctor and not reward notice and then we say dot txt equals and then in speech marks we're gonna say you got and I'm gonna do space to concatenate it with with a reward amount argument and we passed in like that and then we'll just say coins after after that okay if you want to make yours a little bit more fancy then you can do so by adding emojis that's what I'm going to do so I'm going and emojis to each side of the string because roblox now supports emojis in its UI so you can utilize them and then we're just going to tween that reward notice it just basically means animate the GUI element so it it gets it basically just grows on our screen and it flashes up so to do this we can say script dot parent dot reward notice and we can say come on tween size and position okay and so we just need to give the you diem two values for the position and for the size so for the position so for the size because size goes first we can say au dem dot new and then we can say not point six zero no point one five zero okay this is the size of the of what the reward notice will be when it's when it's you know when it's acted when it's finished animating okay what if that's the desired size we're then going to do a comma and then we're gonna do the position value so it's a udimm to dot new and we can say not 0.5 0 not 0.5 0 okay because on the reward notice we've set the anchor point to not 0.5 so that whenever you set the position to not 0.5 it will be truly in the middle okay so now that we have twinned it we're going to want to make the frame here so this frame which says daily reward we want to hide that so we can actually see the nice smooth animation so we can say scripts got parent dot frame not visible equals false notice how the reward notice isn't in the frame so that when we make the frame invisible their reward notice doesn't go with it then we're going to wait 1.5 seconds and then we're just going to obviously when the tween is finished then we can do the same thing again so i'm just going to copy this line okay and I'm gonna set the size to just zero all around and we're going to keep the position the same because you want it to retain its constant position we just want it to get smaller so now that we've done that we can do script so parent enabled equals false and script doctorand not frame not visible equals true we want to make the frame visible for next time obviously we're making the entire GUI go off screen but next time it appears we want the frame to be visible but not a reward notice because it's going back to its size of zero zero so we can do another weight here if you want another weight one point five to see it smoothly go off screen if you want to edit your your your speed values or the the way that the easing style or direction of the tween you can do so by adding more there are more parameters or arguments available check the object browser if you're interested in those but that is all of the clientside coding finished okay we now just need to work on claimant reward and that will be very quick and also saving the time when when that player when that player clicks it that's going to be very very quick and all we need to do we need to go back to the server script and then over here by the by way we've done fire client for our show daily reward we're just going to set up a connection here now we're doing this because we want to disconnect the event that we're about to make after it's been fired for the first time now you'll see how this makes sense I want to once we've done the event but it will make perfect sense very shortly so we're just doing local connection and then we're setting that connection variable to our our event okay make sure to save your work and we're going to just say game don't replicate a storage doc frame reward dot on server event Curren connect function player okay so the argument here is the player that triggered the claim reward event okay and that will be sent from the local script from the client and obviously because we don't know which which player will have triggered it okay in this case because we've put the event inside of our player added event inside of this it's if statement then it's it's going to to be fired only when that player's reward is eligible so in the unlikely event that two players get the reward at the exact same time and just to be sure that this does not happen we can just check that if player is equal to in fact we should change this this player parameter just to say player so we could just say triggering player okay so this is just a player that triggered the the remote event to to fire but will just give me a different name to the player argument over here so if triggering player is equal to the player so it's the same player and we know that we've got the right person so what we can do is we can say print reward claimed so we know that they've now claimed their reward or we can say player dot leader stats doc poins dot value equal player dot leader stats whoops doc poins dot value plus reward we're adding our reward the reward where is it where's the reward reward here we go the possible rewards so that number that we got from the table we're adding it onto the number of coins that they have and once we've done that all we need to do is we need to save the time at which they click that button so to do that we can say datastore current set async we say player user ID which is that key I can catenate it with the daily reward okay and then we're just going to save the value to that key and that value is gonna be OS dot time okay so the number of seconds since generally the first 1970 and then because we've saved that when they next during the game we can check it against time now to see time since the last claim okay and now that we've done that what we can do is we can say connection and then we can say curl on disconnect so it's going to prevent this player from triggering it more than once okay because if we didn't have this disconnect in this connection they'd be able to constantly trigger this claim reward event or an exploiter would would fire this event like tons of times every second so they would keep getting their reward so we disconnected it once they've got their reward the first time and obviously the next time they join we set up the connection ready for their next reward okay so that should have done the actual saving for players that have played the game before and we also now need to focus on players that haven't drawn in the game before okay we can add an else here if you want else if the our wait hasn't been exceeded so if they have come back within 24 hours okay they're not eligible for award we can print player is on eligible and edgy ball right now okay but that should be everything for returning players now all we need to do for players that are new to the game we just need to do a quick little play removing event and then we'll be all done so we can say game dot players got player removing okay connect function player and this will be the player that leaves the game obviously we don't know their name again now all we want to do is you want to have a peak or function here because we want to get the data again so we can say local data and then we can what we can do here is in fact what do we just get rid of the speaker or do local data outside of it and then we'll do P cool function there we go and then inside of this peek all we can do data equals data store current gets async and we use the player's user ID as the key again so daily reward and then we can just print getting the data then outside of this people we can say if data is equal to nil then we know that there are new player and what we can do is we can say local time Val equals OS dot time okay so when they first go in the game we're going to save there the current time and then what we can do is we can say data store curl on set async player dot user ID and then we can set their key as well daily reward just like that and then we can print saved because you are a new player okay and we'll just do the same we'll put this in a P call as well so that in case of errors it doesn't break the entire script and let's just make sure that's properly indented so if a player joins the game for the first time they're not going to get a daily reward straight away okay now if you wanted this to be the case okay then in this else here what you can do is you can you can take this this this code here and you can copy it and you can paste it into this else here okay in fact I think I put it into the wrong house there we go it needs to be in this one over here where it says new player so a new player then we want to give them a reward okay and then we can set that their daily reward if they're a new player now if that's the case then you don't really need this I'm this part of down here which is which is actually setting a player's time if they haven't you know because because if we've got the if we're giving them a daily reward it's straight away when they join then you don't you don't need this this code over here because you don't need to check for it's nil because the player will have some data so you can comment that out if you want and that you can actually comment the entire B you can comment the entire thing out here and that's not needed if you want to give them a reward when they join for the first time so I'm just going to go and just make sure this is properly indented and then we can go ahead and test it out so I'm gonna go ahead and test my game now if you want this to work in studio you need to publish your game and then click on the three dots next to the title of your game click configure game and then there should be a button which says enable access to studio API services you go ahead and click that that should allow you to use data stores in studio but if you still a bit confused don't worry just go ahead publish your game and go actually try it out in roblox go click the play button but I've got mine configured correctly now make sure that the daily reward GUI is set to disabled okay so enable is set to false okay else every player is going to get a daily reward as soon as they join ok or when they reset etc because it's going to be on screen so make sure it's disabled and turned off now let's go ahead and play it click the play button and you can see it says getting data and it saw that I'm a new player so it says come back in 24 hours for your next reward so I'm gonna click on claim and there we go I've got 5 coins and it got added to my balance now if I go ahead and leave and I come back then I am uh nella jabal because 24 hours have not passed you can see 10 seconds passed since my last visit and if we go ahead and play the game again you can see that it is updated to 23 seconds so it's not it's not updating the it's not resetting the time back to zero when you leave it's just adding on to it okay because it's only resetting it when you click claim again now just for the purposes of the tutorial I'm gonna go back to the script here and I'm gonna change our weight to not point one one more sorry not point naught naught naught naught 1 ok so you you you don't have to wait to get your next reward ok this is just to speed things up cuz we're not gonna wait an entire a day and you can see it's messed up the comeback in hours that's because I did a fractional amount of hours but I can claim my reward and the reward of claim time will have reset from 54 it should go down to okay there we go 6 seconds and I can get some more coins and it is a random chance each time it doesn't matter and because it's taking a random number from that table so it doesn't matter you know you what you get because you're always gonna get something different so there we go we've got a nice little daily reward system here let's go ahead and change this back to 24 so there we go if you want to take the source code then become a channel member click the join button next to the subscribe button you get all the source code from my huge videos and also if you want to take the GUI I'll leave that for free in description for you thanks for watching make sure to leave a thumbs up don't forget to subscribe and click on the bell icon so you never miss out on a new upload and I'll see you in the next video