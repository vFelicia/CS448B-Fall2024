okay so next we need to do the data saving this won't take long at all all we need to do is go into the event handling scripts and at the top here let's create a variable for the datastore service which is used to save data so local data store service equals game get service data store service then we're gonna get our datastore for this specific game to hold everyone's data so a local datastore equals the datastore service code on get data store and you need to give a name for this datastore now the name I'm gonna give is my data store very very simple you can name it whatever you like but if you change the name of this there's something different then it's going to start using new data so let's say for example you publish this game and 10 people came and had their data saved to the my datastore but then you went and change the name of the datastore to my datastore too and then people rejoined their data would get lost so choose a name and stick with it okay it doesn't matter no one else is gonna see it so now you put your data store what we need to do is because it for a datastore each player has their own key and that key is used to identify their data so we can save data to a key for each player and we can identify the key by their user ID so every player on roblox has a user ID and you can find your user ID by going to your profile it's in the web web address link you don't need to know it though what we need to do is we need to save the data so what we'll do is just after the player added events down here just before the trap debounce we're going to say game dot players play out removing Connect function and player it's gonna be one of the arguments so this will run the code inside of it when a player leaves the game so what we're gonna do is we need to create a table for all their data so there's gonna be lots of data that goes in here for example they're tokens they're equipped trap or skin the skins they own the traps they own etc so what we'll do is we're going to create sub indexes inside this table so there could be a table inside this big data table which contains all the skins they have and I know the table inside of it which contains all the traps they have so to create an index in the table you just have to say the table name and then the name the index so for example if I want it to name if I wanted to save the tokens in the table I could say data dot tokens equals player dot tokens dot value and now that is inside the table a bit like so it might look a bit like this ok so that's what it might look like at the minute so now that we've put the two water we're gonna put all this data into the big tip into the big data table then we're just gonna save this one table to the datastore so it's saving everything to our key I have a full video on my channel as well on how to use data stores if you are a little bit so unsure but this will give you a quick intro and brief about them so now that we've saved these tokens we need to save the equipt trap and equipped skin so data not equipped trap equals player dot equipped trap value and data equipped skin equals player dot equipped skin dot value then we need to create a sub table for all the skins you have so data dot skins equals a blank table now I'm using a capital letter for skins so a capital S and a capital T for traps so I've created those two tables and now I need to use a for loop to loop through the skin inventory table and the trap inventory table so for IV in pairs player got skin inventory get children so because the skin inventory get children returns us a list of all of the skins in your inventory the eye is going to be the number of where it is in the table and the V is going to be the value so it's going to be the the value that's in there so V is like the object the value that's in there and I is like how the number of of where it is in that table so in a table so in that table it could look a bit like this it could have Mangala boy if that was the name of her skin ghost piggy and what was the other one we had shaggy boy okay so if we so the first time so for the first index would be one second index would be two third index would be 3/4 index was before so I it's just the the number of the index that were currently on so if we were currently looping through the ghost then I would be 2 and V would be ghost okay so what we're gonna do is make sure you had to do on the end of that for loop and then we're going to insert into the table table dot inserts we're going to insert into date skins and then comma the name of the current objects were looping through so the name of the skin that's in that in that inventory so if there's five skins in the skin inventory we're going to loop through every single one and five times we're going to insert the name of that skin so we're gonna insert the name of every skin in that skin inventory into the table data dot skins okay so this data got skins it's gonna get populated with every single skin for that player will own okay and the way that we get all the skins that they own is because we get basically taking everything that's in the skin from inventory folder and cloning it into the data dot skins but we can't just set they still skins to player dot skin inventory come on get children because you can't save objects through a data store so what we're doing is we're kind of serializing it so that we're saving their name not the object and then when we load the data we'll be able to look up the skin using its name in the replicated storage so we can't save objects to date stores but we can save object names instead so I'm also going to prints the name of V of the object that we're looping through so that it'll print out all of the objects that get added that to that table so we know that the that they got saved for sure to the datastore then I'm going to copy and paste but change skin inventory to trap inventory and also data dot skins will be changed today to traps so make sure that you change the truck the skin inventory to trap inventory in the clone in the second for loop and they thought they'd allot skins will become data thought traps okay so we are populating the data dot skins and the data's or traps folders with the names of these skins and the traps that you own and now that we've populated this big data table with all this data we can save that big table to our data store for a specific player who's leaving the game so data store colonel onset async that's how we save to a datastore and we need to provide the key so the key is going to be unique for each player and the best way to uniquely identify each player is by using their roblox user ID because nobody is going to have the same user ID so we can say player got user ID comma and then the second argument is going to be the data that we save so in this case we're going to save our table called data to the datastore and then what we need to do is we need to wrap it in a peak or in case it goes wrong so local success error message equals P call and then in brackets function with another pair of brackets and make sure you close it off with an end and a closing bracket now a P call basically because sometimes a data store could error maybe this data store service could be down or something data stores can error and they can break your whole scripts but when you wrap them inside a peak or function it's um thing goes wrong it won't break the script the arrow won't cause the script to stop you just simply won't save your data so instead of losing even more data by breaking the scripts in it no longer running so it will no longer be checking for when someone leaves the game it will just catch the error and it will not break the script it will just put it to one side and not stop the script for it so and in all it will also if it was a success this values variable called success which we've also created will be true and if success is false then there will be an error message and that what error message will be the error message variable that i've also created will be populated and it will be updated with the error message so if it was the success then prints successfully saved okay so that will successfully save somebody's data to the datastore now we need to load the data when they rejoin the game which is very very simple so if you go back to the player added event so this is when a player joins the game we can get the players data from the data store if they have some data because of you there could be a new player and there wouldn't be any data for them we're gonna get it anyway local data equals and this variable it doesn't have to be called data I'll just make calling it data because it makes sense sooo so if you are copying what I'm doing probably best to use the same name so you don't get confused local data he was datastore gets async and we need to provide the key which we saved the data to so we can look up that key in the datastore and see if there's any data attached to it so the key which we saved was their user ID so we're just gonna say player but user ID make sure the user ID you have an uppercase I but a lowercase D and that uppercase u for user so comfortable you for user then come to I but a lowercase D is it we're confusing but you have to write it like I do obviously it will not work so you do a your user ID with a capital D not gonna work has to be a lowercase D so if there is data in the datastore and it should be this table that we saved because this data at this table was going to have the tokens they equipped route the equipped skin everything attached to it because it's gonna be inside that table so if there is data then it's going to be then the data variable is going to hold that data but again it because we're using data stores it could go wrong there could be an error when we get the data so we need to do a peak or so a local success common error message equals P call function like this make sure you get the brackets on the end of the function and you also have a closing bracket for the end like this so P call an open bracket and you have a function with another pair of brackets and you have to close the first bracket off there as well so actually what we'll do is we will define the data variable outside of the P call because we will because if we were to define it inside the P call then we'd only be able to access the data from inside the peek or what we want to access the data from outside the people as well so only isn't the P cool for when we when were for only for this line when we're getting the data because that's the only time where it could error and it could break the script so once we have the data we need to check to see if the data is not equal to nil so if data is not equal to nil when it's not equal to nil we know that there is data there if the data was nilnil means nothing so there's no data stored so if there is any nil data then we're not going to do anything but if there is not any new data so that's what this operator is so if data is not nil and there is some data then we want to load this data so we know that we need to load the equipped trap we know that we need to load the equipped skin we know that we need to load the tokens we know that we need to load the skins inventory I also know that we need to load the traps inventory so we're creating these folders for the equipped trap sorry for the trap inventory skin inventory and the values for the equipped trap equipped skin and tokens but what we need is we just need to set the value of these things to the values from the data store so firstly we're going to say if data because Mary's a table so there we are our sub tables and indexes inside of it so if data don't equip the trap then equipped value sorry equip the trap dot value equals data equipped trap and then we can say if data not equipped skin I'm doing them all in the if statement in case they're not there for some reason so if they start equipped skin then equipped skin dot value equals data but equipped skin then we're gonna say if data got tokens then I'm gonna say piggy tokens remember if you named your variable something different which is not picky tokens you would be saying the name of your variable here so if it was cash for example piggy tokens value equals data dot tokens and the same thing if you saved your data your tokens are something different like data cache equals player dot data player got cash no value you would say data's or cash or data got money your data dot tickets or something else but because it's tokens for me I am loading the data tokens right then I'm going to load in the skins a little bit more work needed but not a lot at all if theta dot skins then I'm gonna say for I comma V in pairs data dot skins because it's a table I'm gonna loop through the data dot skins table do and I'm going to create a string value because remember in the skin inventory and the trap inventory all it is is a folder which will contain lots of string values and the string values will be named with the same name as the skins and the traps that we own so it's a way of telling us which skins and traps be owned by inserting string values with the same names so we can just loop through and get the names of all of the string values in that's in that equipped so in that skinned in retreat wraps inventory II they will be string values they won't be the actual skins and trap models themselves but they will be a reference because I'll have the same names so local Val or string value doesn't matter because instance new string value foul name we're going to set the name with a string value to be V because V is going to be the name of each skin because it's not gonna be V dot name it's just gonna be V because it's a string it's not an object because when we save the data we saved V dot name not the object itself not be the object but V dot name so he saved a string to the datastore cause remember I said earlier you cannot save an object through datastore you have to save H string to a datastore so a valid name equals V we're just giving it the name of the other skin that was the week that was saved one of the skins that were saved because we're doing if every skin is gonna loop through it's gonna create a new string value for every single skin there's not data's or skins table and then we're gonna parent it to the skin inventory so Valdo parent equals skin inventory then all we need to do is just copy this for loop and same thing again if data dot wraps then and we're going to loop through theta dot wraps and insert a new string value name it the name of the trap but we're going to parent it to the trap infantry okay so there we go we've just loaded all of the data in but because we only want to now what I did earlier was in the client shop after five seconds I call the add skins and our traps I only want to do this when your data has loaded so once your data has loaded and we know that it's loaded so what I'm gonna do is I'm going to create a rotor I'm gonna create a remote event in the replicated storage and remote events I'm going to call it send data so what we can do is I'm got replicated storage got send data curl on fire clients I'm going to fire it for the player who just joined the game I'm going to send their data as well so the data we got from the data store I'm going to send to the client okay and then when the data gets picked up sorry when that Verizon gets picked up down here I'm gonna get rid of the white 5 I'm gonna change it to dick game tool replicate his storage dot send data but on client event Connect function and we don't need to play our argument because it's on the client I'm going to put the ad skins and our traps function inside this event so the traps and the skins are only going to be loaded into our GUI once once they once the date has been loaded so once the data about our equipped values and our skins that we own has been loaded only then will I create all the frames in the skins and traps frames and show them only once the date has been loaded and we know the date has been loaded because after all of this equipped trap setting and adding all the skins to the skin inventory in the trap inventory only then do I fire the Sun data remote events so that will only fire once the data's loaded and it only picks up once the data's loaded so moment of truth let's see if this will work first things you need to do is rightclick and click on publish to roblox ass if you haven't already make sure you publish it as a roblox game ok I'm gonna try again publish to roblox ass doesn't want to work for some reason yeah there we go every started studio and now it seems to work so I'm going to publish it or update a already published game just make sure it's published to roblox and then click on game settings go to options this is very very important make sure that enable studio access to API services is turned on okay turn that on enable studio access to API services on click Save and then you'll be able to test your game and your data stores in roblox studio ok now I recommend that you test it in a proper game ok I recommend you do that and that is what I'm going to do and if it takes ages to load the server don't worry it's probably because roblox is under a lot of load it did take me a while to open this server up but if I go and purchase a few things let's purchase the ghost and the shaggy mane and the invisi trap let's equip the invisi trap and equip this shaggy man let's leave the server and rejoin okay moment of truth and I'm just gonna say this as well data stores it is likely you might have problems with it and it's one of the hardest things to debug ok so it looks like our data hasn't loaded here so I'm going to check the developer console just to see if anything's gone wrong and just to make sure let's do game thoughts players thought Alvin under school blocks thought equipped trap value let's print that out just to see if anything was saved okay so it says the equipped one was the invisi trap so what I think's happened yes ok I know what's happened so it has loaded the data but it's just not it's not updating the the cost text or the button image so because look when we click on the button sorry when we click on let's go back when I click on the shaggy man it instantly equips it and this turns to owned so it knows that we already own it it's just that we haven't coded it on the client so when the when we first insert these frames it doesn't automatically update to say the it doesn't load the equipped or owned values in the GUI it load it updates the values but it doesn't update the GUI so let's have a look at that now so I've got a very very simple fix for this if we go back into the main GUI into the shop and client shop what we can do in the ad skins and the other trap is we will say if game dot players got a local player so the player which this script is running on so for the current player local player dot trap inventory cannot find first child or Jesus for the skinning of inventory as well very soon find first child the V dot name then so if if it's in your if the skin that we're looping through was already the trap that were looping through is in your trap inventory so you you own it then we can set the frames cost of text to be owned and the frames button image to be the green tick straight away and so they're having to wait for us to click the button so because this is running when the data is sent when the data is loaded we can check to see if you have that trap in your trap inventory and if you do then we will change it to say owned Anna green tick and we'll do another if statement to see if you have it equipped so if game got players that local player does equipped trap dot value equals equals V dot name because we don't name is the name of the trap so if you have this trap equipped we can say frame dot cost of text equals equipped and frame but button dot image equals green tick just like that so it's going to instantly say whether you own it or whether you have it equipped now I'm going to copy these two if statements we're gonna go oh my bad I've done the trap one in add skins so I need to change it to skin inventory and equipped skin let's take these copy them let's go to the add traps one and paste them into our traps but change skin inventory to trap inventory and equipped skin to equipped trap okay so what it's going to do is it's going to instantly check to see if you own the trap or the skin or whether it's equipped and if it is it will automatically update the frame just say to say whether it is owned or equipped now I'm going to publish the game again and go check it out so what should happen is it should instantly show me my loaded owned and equipped skins and Trump's so let's go to the store and there we go straight off the bat it says oK you've got the shaggy man equips because that is what we did equip in the last time we were in the game about two minutes ago and also it says that we own the ghost and also that the invisi trap is equipped and the yellow trap is also owned so if I go and buy everything and buy buy buy I'm going to equip the ghost and equip the red trap now I'm going to leave the game and go back in now if you're testing new studio sometimes it might not save your data and I think that's because the game is closing down before it's managed to save in time because it's in roblox to do this shouldn't happen in a real game and it shouldn't affect you because I've tested it quite a lot and it hasn't caused me any problems but anyway you can see that the ghost is equipped and the red trap is also equipped and everything else is owned and if I wanted to I could change the equipt values and it's everything else is becoming unequipped but the yellow trap is now equipped and now universi traffic equipped and the other trap is now owned so it seems to be working really really well ok so now I'm going to show you how to make the skins and the traps appear in the GUI here in these gray squares and we're gonna be using viewport frames viewport frames allow you to render roblox objects in a GUI so in this case we want to render the piggy skin and the traps so to render them they need to be cloned into the viewport frame and then we also need to have a camera which will be looking directly out those objects so in roblox we can have an objects called a camera and we can tie that camera we can set the viewport frames current camera property to that camera objects and then it will be looking we can set the see frame like the position of that camera to be looking at our cloned piggy characters so I'm gonna show you how you can you can do that now so we're gonna go into the client shop script I'm going to go up to the create frame function so right now we've only just we've only copied our template in there we haven't done anything to do with the viewport frames so what we're going to need to do is we're going to need to take the objects argument which is the actual object of the skin or Liam trap we're gonna have to clone it out and put it inside our viewport frame because the only things that put into the viewport frame can be rendered on the screen so we can say local vpf obj so if you put frame objects you can call it whatever you like this is just the name I made up equals objects current clone then we can say vpf or parent equals frame doctor viewport frame so we're putting it inside that viewport frightened there so now that we've put our objects in the viewport frame we need to create our camera which will be looking at it because the camera is the thing that's going to render everything in the viewport frame on the screen so it's a local cam it was instance got new camera cam parent I'm gonna put this inside the viewport frame as well equus frame dot viewport frame now we've done that we can say if item type Oh in fact yeah sorry I was just reading off my script I forgot to so what we gonna do we're gonna create a fifth argument and this is gonna be called item type so that we can tell the function whether we're gonna insert a skin or a trap so in the add skins function on line 54 that's where my line is it might not be on your line 54 but where we're calling create frame in the add skins function we're going to add that v argument and we're just gonna add a string we're going to call it skin just like we do down here in the by item so we can tell the function that we're going to be adding a skin and you'll see why is because we need to make the camera a look at a certain object look at a certain part so for the skin we'll just make it we'll make the camera look at the the skin head right that the head objects inside the piggy character but a trap obviously won't have a part called head so we will just need to well because the of the object for the trap will just be a part we can make it look at that part the reason I'm doing that is because if you don't make it look at the head for the piggy then we wouldn't be able to see it it will probably just look at its torso and we won't get a view of its head so if we position the camera to be looking at the head of the piggy character we'll be able to see his face whereas it doesn't matter for the trap because we can just make it look at that one part because the trap is only made up of one part so well this is going to tell us whether it's a skin or a trap so if we go down to the out traps function we're going to have that faith argument in there as well but the argument is gonna be called trap the both they're both going to be strings as well so trap and skin and once you've done that we can then say if item type is equal remember doll equals because it's an if statement is equal to a skin then we can set the camera C frame to the to the character's head whereas else if the item type double equals is a trap then we can just set the camera C frame to the object because it's just going to be a part because if you think about it if you're going to replicate the storage got traps and then look these are just obvious just parts right and they're just done by their mesh parts but they still a part there's one object isn't it so to set the camera C frame to be the character's head I also have a video coming out on see frames very soon so if you find it a little bit hard to understand check that video out it's gonna be in the advanced series but anybody can watch it you don't need any prior experience for that one so what what we'll do we'll set the C frame C frame is basically position with rotation so in this case we're going to position the camera to be just a little bit far out from the place character so we can actually see them but we're going to be pointing it towards the player's head so it's going to be rotated towards their head so a little example here if we've got imagine this is the character really badly drawn but imagine this is the character we're gonna put our camera around about here about five studs away from the character and if I will put it around here because it'll be up in the air a little bit and it's going to be looking at their head so it's gonna be angled down this way so if that's the camera and that's the Piggy character it's going to be looking at their head because normally if we didn't do this it would just be looking at their torso so we're gonna do it like this and to do that we're gonna say cam dot C frame equals C frame new and this C frame is going to be object because it's a character we know that the object is their character model so we can say object dot head position so the position of their head with we're gonna add on to that we're going to add on in the direction that's their character is facing so currently if you think about that diagram again if we've currently got their head position so the cameras around about here where the arrow head is we need to get the forwardfacing direction and we need to multiply it by a certain number to bring it out to around about here so we want to bring the camera out to around about here currently the cameras here we want the camera to be about five or ten studs away from the character and then we can point it towards a character so we can actually get their head in the view okay because all of this stuff won't be seen because it's out of the characters out the cameras view so we can say inside of here we're doing another pair of brackets and inside of it we'll say object dot head dot C frame so then we'll say look vector so look vector is a property of C frame but it's actually a position value this probably might be making sense but if it doesn't as I said don't worry I have a C frame video coming out multiply that by five and then what we can do is we can add some height to it so about two studs of height okay so I'm adding two studs of heights because I want it to be the camera just to be a little bit higher than the players head so we can look down on their head and that just gives a better experience and it fits more into the into the camera frame and then so this this part of the code this first part it's just positioning the camera so what we've done is we've positioned the camera well we firstly got the position of the players head which is around about here right if you imagine this is the players character and this is the you know this is the position of their head we're then getting the look vector the look vector is the forwardfacing direction so the forward direction and that's so that's a nicer vector so we're multiplying it by five so we can move that thing you don't get my words out and so we're moving this five studs forward this is moving the camera five studs forward so the camera was here and it's now probably about here we're then moving it to studs in the air so now the camera is here and the next thing we're going to do after this comma is we're going to tell the scripts where we wanted to be facing because we the camera could be facing this way could be facing that way could be facing that way so how do we tell it we want it to look at the head which is here well that's what we'll do so to do that we can just write objects got head got position because it would then just point the camera towards the the character's head so that is going to set this camera C frame to the character's head now what about if it's a trap well it's a little bit easy if it's a trap all we need to do is say cam got C frame obviously equals C frame new objects drop position because the trap is just going to be a part now if your trap is a model is made up of loads of parts you will need to say objects and then the parts name so for example if yours was in a group like this you'd have to say object bear underscore trap dot position in fact you wouldn't you'd have to have you'd have to have a part in that model which is named the same throughout all models so we have multiple models you would just say an object dot handle and handle would be the the main part right which is used by this viewport frame which it which is where the camera is looking at so object dot handle sorry notice it so yeah that's if you're using a model right so you'd say objects that handled opposition all right so instead of saying object opposition you'd say object dot handle but if you are just if you're like me and you're not you've only got one part traps I'm using a mesh part by the way which is why I can make them look good and just use one part because there are mesh using a mesh ID so I'm just going to rename this to be bear underscore trap so yeah if you're just like me and they're not in models they're just single parts I'm going to say object dot position because object is the part itself because it will be passed to the function and we're going to add on object dot C frame got to look vector so that's the forward facing component multiply it by five so we can be so it's the is five studs away from the object so that the camera actually is able to see it fully and then we will say plus vector three dot new zero to zero so it's just a little bit higher up in the air so that we can still we can get a nice view on it then we'll do a comma and then because the second argument in a C frame is the what is going to look at we just needed to look at the trap itself so object opposition so the camera will be facing the object okay so now that we've set the camera C frame we just need to set the if you put frame its current camera property to be that camera so frame dot viewport frame dot current camera equals yeah okay so now as soon as that current camera is set to our camera it will start rendering the objects in our people frame so let's go ahead and test it out hope this works really hope it does it would be amazing if it worked first time so we're gonna go to store oh yeah we need to make that button work don't we but there we go you can see we've got shaggy man Piggy and the ghost so all of our skins are loaded in and all of our traps are loaded in as well you can see the Envisat wrap is kind of hard to see but I can see it on my screen is because it's nearly invisible hence the name invisi trap but there we go we can now see our objects in there very very nicely some people probably will ask how do you make them spin good question it would take a little bit more coding I'm not going to go into it today but you can probably look up how to do that it involves having a loop which would repeatedly set the C frame of the object to be moving around or you could loop setting the C frame of the camera to loop around it but that is not necessary and I think this looks fine as it is it just requires less work so that is how you get the characters in a viewport frame like that so very very nice I am pleased with that right next I'm going to show you how you can add the piggy tokens to the bottom of the screen so we can see how much money we've got so I am going to insert into the main GUI I'm going to add a text label on that text label I'm going to call it tokens and I will set the position of this text label to one zero one zero and that will put it at the bottom right corner of the screen but you can't really see it that is because it's positioning it from the middle so if we set it to be positioned from the top right sorry the bottom right by setting the anchor point to be 1 1 it is now in the bottom right corner of the screen I'm going to set the background transparency to be 1 and I'm going to set these text scale would have to be true I can change the font if I like I'm going to change it to Gotham bold and I'm also going to change the size I'm going to change it from offset to scale so that it scales with the size of the screen so I'm going to set it to not 0.15 so it takes up well it takes up yeah that that's it's kind of like a fraction so naught point 1 5 would be 15 percent of the screen on the xaxis and then it's going to take up a tenth of the screen on the yaxis that didn't work some reason no point 1 5 comma 0 naught point 1 comma 0 there we go that's better then I'm going to change the text and to whatever really it's going to be updated anyway and I'm going to change the text color 3 to a nice pinky color let's see let's see what we've got okay I know I've got a saved color so we'll use 255 comma 1 1 6 comma 1 3 4 perfect that's a nice color so now that we've done that we can start coding it so if we go into the client main script I mean if you could do it in any script really but I'm going to do it in this one because that's where I've done the rest of the coding for this sort of stuff so I'm going to create two variables the first one is going to be the the text label so local tokens label equals the script dot parent which is a Gy color on wait for child tokens ok the next thing I'm going to create a variable for is going to be the actual tokens value which is in my player so local tokens whose game dot players but local player wait for child tokens okay so they've got the same name but they're in different they're in different places and they're different things because this one is the value with our tokens in the player object whereas this is the text label in our main GUI so now that we've got those two what we can do is we can create some simple events which will whenever the value gets changed we can update the text of the text label so very very simple we're just going to say I will do it mmm we'll do it here are these data stuff we'll say firstly because the game will load and the and because beer oh because the game will load and this script sorry what awesome so what I'm trying to say is we're going to set up a changed event a get property change signal to change the text when the value changes but it might not we want to set the value sorry the text of the text label to its current value before we set up that event because it might be changed before the event is running so we can say tokens label dot text equals tokens dot value and then we can say tokens gets property changed signal a value so when the value property changes we can say you can connect it to a function and that function is going to fire and inside of that function we can say the same thing again tokens label dot text equals tokens dot value so if we load the game it should immediately change the text to zero so we shouldn't see you one three three seven there we go so after two seconds obviously because we have to do the twosecond wait for the script to load up but it has loaded up with seven hundred and thirty eight poins so that's obviously been taken from a data store that got saved last time so if I go in to the server because you can only change your values like your tokens value on the server house it won't take effect let's change it to one one zero obviously you won't be able to see the amount of tokens on the server because its client based there we go it says 110 so I leave the game I'm also going to change the tokens text from one three three seven just to nothing so that it doesn't give a fake amount of coins that you don't actually have okay it didn't seem to load for some reason but it's well it loaded the old value but it didn't save the one from the previous game I think that's because the play solo shut down before it managed to save it in time so yeah we'll see about that but we have got the tokens working now which is which is good okay next we need to code the buttons don't we the buttons in the menu here so that it loads the store and also this close button here so we'll begin with the close button because that won't take very long to do at all so we can go to the client main script and at the bottom here I'm going to create an event for the close button so we can say scripts dot parents come on wait for child shop and then we can say dot wait for child close doctor mouse button one click connect function and then inside of here very very simply we can just say well firstly we need to see if you're in the menu because you could close the shop when you're in the menu or you could close the shop when you're out of the menu so depending on that if you are in the menu and you close it we want to show you the menu screen again but if you aren't in the menu we just want to close the GUI so we already know if you're in the menu or not because you've got like in menu value in your player so we can say if game dot player's dot local player curl on find first child in menu then we know you are in the menu so because of that we will say intro dr. serve 1 equals true we'll make that intro frame visible and then also because this will apply for whether you're in the menu or not we will close the shop so script doctor parent wait before child shop dot visible it was false so we're going to hide that shop so we have just scripted the close button let's go and test it out in fact we can test it out until we've made the shop store button in the menu work so we will say intro because in the intro he can see we've got a person called store so intro dot store dot mouse button oneclick colon connect function and then we will say when you click that store button we want to firstly hide as well we want to enable the shop so script dot parents come on wait for child shop thought visible it was true and we're gonna hide the intro because if you're in the intro we want to hide it so intros look visible equals false right let's go and try it now so we play the game and if we click on store you can see it opens up the camera stays there because we're still in the menu it still got that in menu value so we can browse the store and when we're finished we're back in the menu and then we can get out of the menu in menu has gone away and we can open the shop normally if we want to click the button to close it you can see it doesn't open the menu again so very very good we have now managed to make the menu in the shop work let's just do one more test we'll set it to one one one close the game and click play again yes we I don't think it's managed to save the values in time because the play solo has quit before it's managed to save I've never experienced that in a running game before but ok I'm going to show you a way to fix that problem where it doesn't save your data if you leave the play solo because there's a chance it could happen in a real server as well if you're the last player in the game because we're the last player in the game to play solo the server can shut down before the script has finished saving your data so to fix this we can use an event called bind to close so game bind to close then we're just going to put a function in there no connect or anything just like this so any code inside of here will ruin when the server is about to shut down so when the last player has left the server will not trip down unless this code is finished executing so we can loop through all of the players that are left in the game like this and if we just set the V to player and we copy this code inside the player removing and we put it inside of here and we just indent it like this there we go it will make sure your data gets saved before the server shuts down so I'll show you this I'll show you once more my data will appear my amount of tokens will be very very large because I just tested that if we go in and we set my tokens to be 11 for example and I leave the game and I go back in you can see it successfully saved it friendly is successfully saved this time we go back in I have got as if by magic an 11 tokens so that is the data store problem fixed one last bug I'd like to address which I have found after testing the game after I put the series out it's not a big book or a big game breaking book at all it's just that sometimes it can bug out because if you reset when a game isn't happening and the map isn't loaded then it will it will get through this if statement and it will try to drop your tools using games at workspace dock map and I'll see there won't be a game that works based on map because the map won't have been loaded yet so to fix this we can say if in this humanoid root part a statement we can say if player cannot find first child contestant so if they're in the game currently and they've got the contestant tag they wouldn't have it if a game wasn't in progress and game dot workspace cannot find first child map then just put this these two lines in there to drop the tools and we can put an end in there so this is just an example of how you know books can pop up after you've made something and they won't pop up for a while because that eventualities one happen so in this case the eventualities was that no player reset themselves when a game wasn't happening and that took a while to find out it's not something that people usually do but when they do do it if they do do it it would break your script so that's how you fix a book there and that is a book that we have fixed so again it's not a huge book because they know the chances of somebody even resetting in the lobby are minimal it's not like somebody will do that anyway and I don't think it would break the whole script it just wouldn't it would cause a small error but it's there you go that's another book that we have squashed right then I think we do one last test and we'll be good to go so let's just insert yeah two players should do okay so i have equipped the shaggy mane and the invisi trap on this account so if you can see that the shaggy man has loaded in and if they press the truck button there you go there's the invisi trap it's loaded perfectly so everything just seems to be working and no complaints from me let's just place another trap let's get stuck in the trap there we go and ooh ah got one more thing it says killed by the piggie um now I'm not too worried about that to be honest because yeah I'm fine with that just if you're naming your your game something different so I don't know like bacon or whatever then you would want to go into your game logic scripts and your client script where it says player was killed by the piggy and changed that player was killed by the bacon etc but again please be original when you're quoting these piggy games please credit me in them because you know I've spent a lot of time working on this series so I think it's just right that you credit me in the video so in your game or you know in the description that you've used my kit so that others can know how you made it and can help grow my channel because I've said a lot effort into this series you know if biggest serious I've ever done it and I've done it in the smallest amount of time I've ever done before so thanks for watching the series as I said this will be the last one because you know it's got to end at some point got to end at some point you know for me to go on and make even more series and more videos I've got to stop making these ones because they take up way too much of my time but that is everything for part 7 please do like the video if you've enjoyed it please do subscribe if you're interested in more videos do check out my 23 part beginner series and my advanced series after that because it will help you become a roblox crypto so you can make your own games without me having to show you because I'll be awesome when you when you know how to make your own games it's awesome because you get an idea it comes in your head and you can just make it straight away so it's really really awesome and you can also make a lot of money from roblox a lot of money so if you're interested in that you interested in learning how to make your own roblox games then do go ahead and click the subscribe button share it with your friends or like the videos so I know you like them and it's been a blast thank you for watching this piggie series how to make a piggy game from scratch it really has been fun making this game and I'm glad you've had fun watching it as well do check my website if you have any problems or bugs to learn how to fix your books I've also got a video showing how to fix books if you come across them and not to give up and remember you can become a channel member if you want to take the full source code and get a load of other awesome perks which you can check out by clicking the join button on my channel so after all of that I would just like to say a final thank you to everybody who has watched the series and everybody else who has helped me test my channel members have spent an awful lot of time testing the game with me even before I launched the first video and I alter them so you know who you are thank you for that and also thank you to Linda in 2009 for developing a map as well much appreciated for that so thank you everybody for watching and I'll see you in the next tutorial Cheers