today I'm going to be showing you how to monetize your game with a currency system let's get started welcome to this tutorial my name is Albin blocks and on my youtube channel I create tons of scripting tutorials and tip and tricks videos and today we're gonna be learning how to add a currency system into your game so you finish creating your game it's all ready to be published but you haven't monetized it yet so you won't be able to make any money from your players and if you want to advertise your game you really want to make sure that you're monetizing it so you can make a profit on your spending so in this tutorial we're going to create a system which will save currency for every player in your game and will also be able to distribute currency to different players for say for example if they want a game we can distribute some currency to them or we can take some currency away if they were to buy something so let's begin by inserting a script into service script service and we're gonna call this currency script so what we're going to say in the script we're going to create an event which will create a folder in the player which will store all of the currency and other values and then this will show up in game as a leaderboard so to do this we're going to say game dot players dot player added Connect function PLR just written like this now this is an event and this event will run whenever a new player joins the game and we've got an argument called PLR let's just changes to player so it's a little bit more understandable so this player variable or argument is going to be the player which enters the game obviously we don't know the name yet so we're just gonna refer to them as player so we're gonna want to create a folder in that person in that person's player objects so we're gonna say local folder equals instance new and then in parentheses we can say fold up and we want to give this folder a name so folder dot name equals and then in speech marks what we have to do is we have to call this folder a special name we have to call it leader stats spoke like this with a lowercase L at the beginning if you it's not spelt like this or capitalized correctly it's not going to show up on the leaderboard for your leaderboard to show up on the top right corner of the screen it needs to be called leader stats and then we can put all of our values inside of the leader stats for example we're gonna have a currency we're going to create our currency object now so you're going to want to customize your currency to a different name than mine so we're just gonna say local currency name at the top equals and then in speech marks you can write the name of your currency so if you wanted to call it points you can write points up here or if you want to call it coins you can write your currency up here so I'm going to keep mine at coins and then I'm just gonna want to create this currency value I'm gonna want to store it inside of the folder so to do this we're gonna say a local currency equals instance new and then inside of these parentheses again we're gonna say int value because security is going to be a number an integer so we're just gonna choose an int value and then we're gonna say currency got name equals currency name which is the variable we just declared so you won't have to change the name of the currency in the code you just have to change it at the top here which is much more simple and then we're not gonna assign a value to it yet because we're going to save the data and I'll get onto that later on because we want to load the data we don't to reset it so now that we've done that what we should do is open up the game and the leaderboard doesn't show now that is because we didn't put the currency inside of the folder so we need to say currency dot parents equals folder and we also need to put the folder inside of the player so when they say folder got parent people's player it's best practice to assign the parent of an object after you declared all the properties so don't don't say folder that parent at the start you should declare your other properties first such as the name for example so let's go and run the game now and hopefully you should have a leaderboard yep they'll go so if you have a look at the top right corner of the screen it says our name and also has the coins next to it so if we go and update this value manually in the leader stats it's changed to 500 you can go 5,000 even you can see that the leader leaders that has it dated to 5,000 but when we leave the game it's going to reset back to zero whenever it decides to load there we go so it's reset back to zero and if we just leave the game we're gonna start work on data saving so we want to save the players data whenever they leave and rejoin the game because mainly the player wants to buy some currency if if it gets wiped when they leave the game they're not going to be very happy because they might have just bought it so to save data we're going to use the data store service and so to do this we're gonna create a variable at the top local data store equals a game get service and then in speech marks we can say data store service and then we want to get our data store which is unique to this game so we say get data store in brackets I'm gonna give our data store and name so you can call this whatever you want I'm gonna call it I'm just going to call it test data store but once you've decided on a name don't change it else you run the risk of wiping your data because all data saved in this data store will be local to the datastore with the name of test data store so if you went and published your game now and people went into your game and save some data and later only changed it to a different name all of that data is going to be wiped so you need to keep it a test data store so now we've done that all we want to do is we want to create a unique identifier for each player's data now the way datastore works is there'll be a key for each player and so each key will have a value assigned to it and so this key can look like this I'm gonna called ID so local ID equals I'm gonna give it a name so name of our currency and then we could say dot dot and then we can say player but user ID that's not good practice to put the players name in the datastore it's best to use their user ID so we're gonna do is we're just gonna give this currency name dot player ID so this is concatenating two things together so it's actually what we're gonna do is we're going to have some speech marks and then another dot dot I'm gonna have a hyphen in between it now what this is gonna look like is because our currency name is coins it's gonna look something like this coins and then the player's user ID now because each user ID is unique to a player you're not going to get somebody who has the same key as someone else so what we can do is we can use this key to reference data for a specific player and load it and save it so this ID is basically just used to store a player's data and to find it whenever we want to load or save something so what we're going to want to do now is we're going to want to get the saved data from this ID so to do this we can say local saved data equals datastore which is what we just declared up here we've got our data store and we want to get async and what this does is it looks for any data that is saved in this players ID and then we're just attribute it to this variable so that we can come back to it and we can easily reference it so we want to put the players ID in here because we want to get the data for this this user and then what we're going to want to do is we're gonna want to check to see if they've already got some data because if they've already got data in this variable if it's already been saved we know that they're not a new player so if they're our new player we want to give them a default amount of cash but if they're not we want to load their data that's what we're gonna do right now but of course there's the chance that something might go wrong whilst at the data stores trying to get someone's date or there's an error so what we want to do here with this get async is we want to wrap it in something called a peak or and what that will do is it will if there is an error it will just handle the error and move on so it won't create a massive error which will stop the entire script from working it will just handle it and move on so to do this we're just gonna say Peak or function and then a pair of parentheses and we're just gonna wrap our get async line of code in here so that should make sure that the script doesn't completely break if something goes wrong and what we want to do is we want to check to make sure that this data that we're trying to load is actually there and that this player isn't isn't brand new so what we're going to do is we're going to say if save data in fact what were going to do is we're just going to put we're gonna take the save data out of local here and we're going to say a local saved data equals nil so we're defining up here because if there was an issue and this save data didn't didn't get anything then this wouldn't run and so there might not be a variable called to save data so I'm just defining it up here just to make sure that everything is okay and defined so that the script doesn't throw back any other issues so what we can do is we can say if saved data is not equal to null so if there is save data then we want to load this data into the player now we know that this is going to be their currency so what we can do is update their currency value to this save data so because they can't see that value equals saved data okay however if there is not any save data so if save data is equal to nil and put it in this else all I want to do is we know that this player is a new player to the game so new player so you want to give them the default amount of cash when they start out so we're gonna say currency stop value equals and then you can set this number to whatever you want whatever number of whatever amount of currency you want a new player to receive when they first open the game so if you just want them to have 50 cash starting out keep this at 50 if you want them to have 500 set it to 500 but I'm gonna keep mine at 50 like that's that's a fair amount and we're just gonna print a new player to game and then over here we're just going to print they that are loaded because the data will have successfully have been loaded into the player so what we've done here is we've managed to rate code which will load a player's data from the datastore and we're updating their value their currency value so what we want to do now is we want to create a another event which will save the data whenever they leave the game and when the game shuts down so to do this we're going to use something called a player remove event removing event so what this will do is it will fire just when a player is about to leave the game and we'll be able to save their data so that it's ready wouldn't when they join the game next time we're also gonna have another event function which will run when the game is about to shut down so that we can save the last player's data before the server shuts down and maybe accidentally wipes it so to firstly get started we're going to create an event for player removing this is what looks like it says game top players stop play at removing connect cut on connect function here are we just gonna change this argument to player again just to make it a little bit less confusing for you as I said earlier the player over here is just a dummy sort of model for the player that is actually going to be leaving the game so obviously we don't know a name with a player that's going to leave the game yet so we have to use this this dummy called player so that this player is the player object over the play who's going to leave the game so what we're gonna want to do is we're gonna want to save the data so we do this by calling another quite similar to get async it's good to set a sink we're gonna call that on the datastore and that will basically I set a value in the datastore and they will save it so whenever they're leaving about to leave we can save this data and by the next time that they join the data should be ready to be loaded with get async so much more simple than what we've just done to save the day so we just need to say datastore and say set async open bracket close bracket or parentheses and in here what we're gonna have to do we're gonna want to have that specific key again and we had the ID over here earlier what we can do is we can just take this line of code copy it and just paste it into this play removing event so we've got our ID we just want to specify the ID and we also want to give the value of the currency which is going to be updated which is going to be set so we want to say player dot Leader stats and then we want to have the currency name so in square brackets because we don't know the actual name of it and then we also just want to say dot value so what that's going to do is it's going to update the value of coins for that specific key which of course is the ID variable up here it's going to set the value and save it whenever someone leaves the game now what about the last player in the game because we all know that when you're in a game and you're the last person in the game and you leave the game the game shuts down if the game trips down then there is a chance that this script which is saving the data might not finish saving by the time it shut down so what we're gonna do we're gonna have a function called bind to clothes now this runs when the game when you whenever a game is ready to shut down this wall run and we can put some code to delay the server from shutting down we can kick all of the players currently in the game so that everyone will have gone all the data to be saved and then we can have a time delay just to make sure all the data is saved and ready for the players to rejoin so to do this we just have to say game dot bind to clothes sorry game code off the vine too close and then we can just say in parentheses function with another set of parentheses and drop a line and you've got this end down here it should look like this and so this will be called when game is ready to shut down or waiting for any code inside of here to be executed and once it's executed the game will shut down so we want to kick every single player in the game so that we can initiate this play removing event which will save all the data so to do this we're gonna say for I come up play up in pairs and then inside of these parentheses we're gonna have the all the players in the game currently between say game block players so long get players and then do after this and this is going to loop through every single player in the game and we just want to check that there if there's a player so if Claire then play out a kick and we can supply a message when they're being kicked to say this game is shutting down so we're getting all the players in the game looping through them I is the number of times this loop through if it's looping through the second player it would be two player is the object of the current player we're looping through and we're just checking to see if the player is still in their game if they are we're gonna kick them by saying Claire kick we're giving a message to let them know that the game is shutting down now remember that this is only gonna run when the game is about to shut down so it's just kicking all the players from the game before the game trips down and we're just gonna also add a little time delay of about five seconds just so that once they're all gone you can make sure that all the data is saved and we are ready you shut down the game to make sure that if you're following along with the tutorial that you've saved your data I must say your data saved your game make sure to click on save and save it somewhere I'm just gonna call mine at the data saving and that is everything for the data saving so let's go and test it out what all you have to do first though is we're going to enable a few things just to make sure that we're able to test this out in place solo and also because what happens is if we want to test datastore you have to publish your game to a place first so I'm going to show you how to do that we're going to want to just click on file publish to roblox as and then this screen grab and you're going to want to just click on new place and we're just gonna call this data saving I'm going to make mine public and I'm also going to just update the preferred Play account and I'm also just going to make sure that chat type is all good everything else seems cool I'm going to create the place and don't forget if you were really good if you've got your own game and you're adding this script in then you can just save it to your original game you can have to do the next step so we're going to want to click on next and you want to see this page where it's got the link to your game so you don't want to copy this link or if you've already got your game you want to click done and you want to just find your game what we're gonna do is we're gonna open up a web browser I'm going to navigate to your game and we're just going to go to your games page so we're gonna paste this link into our web browser and we're going to go to it and this is the place where we just publish to so we're going to want to enable API access and that will allow us to test out the data saving from roblox to do so to do that we're going to go and click on configure this place if I want config this game we want to check enable studio access to API services this will allow us to just get a sink and set a sink from play solo but a word of warning if you're going to test this out remember that this is going to be the same datastore which you're setting to getting from that is going to be live in your game so if you have servers running you may not want to test this in play solo of course up to you the best way to test is in a real world locks game though so let's go and test this out hope there'll be no errors but if there are we'll be able to solve them open up the output and clear it and let's click on play solo I hate no errors so far but what has happened is the output has printed new player to the game because we have loaded our data and there is no data currently saved and so it's given us the default value of 50 coins so we're gonna want to do now is just update this value as a test and we're going to leave the game and we join to see if it saves so I'm going to update this value to 999 when I click on stop um there is a little bit of delay and now don't worry your studio isn't crashing or anything the reason this is delaying is because the game is ready to shut down just waiting a couple seconds before it returns to normal this is the bind to closed event which is triggering when the game is about to shutdown is keeping everyone from the game and it's waiting five seconds so don't worry gonna rejoin the game and hopefully we have a 909 cache which we do you see in the output it says data is loaded so what's happened is it saved our data when we left the game and now it is loaded our data to the new player and this should work in a normal roblox game I haven't yet to test it but we shall go and test it now go click stop let's head back to our web browser once the game has reset gonna go back to my web browser I'm going to click on save to get back to our game and we're gonna click on delay so we're gonna enter the game we're gonna give ourselves some cash using the developer console and we're also just going to make sure that we can see everything printing in the output and then we'll leave the game rejoin and hopefully our data will have saved actually what should happen is we should load in with 999 coins because studio and roblox working together saving the same data because we've got API access turned on these data which we saved from roblox studio should load in the client here so let's see if that works for joining server and you see we have 999 cash as I said the studio testing which we listed will update the data stores in every single live game so is a little bit I needs bit of it cautious when you're updating your data stores from Studio so if we go in into the console you can say slash console in the chat to bring this up or you can use a new console all new is the old one for now if this contour isn't working by the time you're watching this video just try saying the new console and you will get a brand new console so we're gonna go to the old console and it says data loaded yeah and we go into the server log now only we can access a server log because we are the creator of the game so don't try going into jailbreak and giving yourself a million cash because it's not gonna work we're gonna say game dot players hour in blocks or your name dot latest apps dark coins top value equals and let's just change this to 1 3 3 7 and click enter and you can see that the coins have updated let's go and leave the game and let's go and just wait for this server to shut down after 5 seconds it should go away walk 5 any moment now there we go it's been deleted so we can enter a new server and see if it gets our data and loads it into our leader stats awaiting and joining server and you see we've got our data 1377 coins alone into the game and I said data loaded there we go that is how we save data we've now created the currency system which loads data saves data and initializes the leader stats folder in game so that is a very basic currency system now let's go a little bit deeper and look at buying currency so we're back here in a roblox studio and we're going to now work on buying currency now this is a little bit more advanced than a data saving because it does actually include some data saving what we're gonna do we're gonna use developer products to allow us to purchase different amounts of cash and then we will create script which records each purchase and when bought it will increase your currency value so to do this we're first going to want to head back to our games page so that we can create some developer products on the website we're going to click on configure this place this time instead of configure this game and you're gonna want to click on the developer products tab if you've never heard of developer products before it's a great way to monetize your game along with game passes now a game pass is a purchasable item which you can only buy a once and it will grant you an everlasting item or or booster in your game which you can code if now a developer product is a bit different similar to a game pass however it can be bought multiple times can be bought as many times you like there's no limit on how many you can buy an example of this is a stamina booster you might want to program a cereal bar or something which gives you 10 health and once you eat it it's disappeared you have to buy another so you're allowed to keep on buying these stamina bars and the same goes with currency you can keep buying currency and because you might you might run out you might want some more so this is why we used other products because you can buy them multiple times so we're going to create a developer product here and we're going to need to memorize an ID now you can see I have a developer product here on my game now this is one I created earlier so we're going to go ahead and create a new one we're gonna click on create new and you're gonna want to give you a developer products a name so we're gonna be giving cash so ours is going to give you 100 cash if you buy it so I'm gonna change this then I'm gonna give the name call it 100 cash and you can give it a description if you really want but it's not going to actually show up so the players won't see it so you don't actually need to and you can also give a price in Road books so for a hundred cash in my game I'm gonna charge ten row books once you doing that you want to give it an image I'm just gonna go and give an image or one of my thumbnails and I'm going to click on update once it's ready right now that's created here and you can see it's added an item to our list we've got our name of our developer product on your cash how much it costs and we also got the ID of our developer product now this is gonna be really important so let's just keep this page open for now and I'm also just going to copy this ID because you'll see why it's so important in a minute let's head back to roblox studio and get started on our develop products so here we are again in studio we are going to create another script in a moment we're gonna just do though is make sure we've got that thing that's ID copied and we can begin work so we're going to use the marketplace service well wash you're gonna have a GUI button which will prompt the player to purchase the developer product and then on the server side we'll have some code which will detect when a developer products bought and it will check which player has bought it and we will give them the cash so let's go and click on server script service again make sure our game is saved and click on scripts I'm going to call this by cash script so in the scripts it's gonna allow the players to buy some cash we are going to firstly want to define two services the marketplace service which will be used to handle the purchasing of the developer product marketplace service equals game colon get service and then whoops I spelt it wrong and then in parentheses we can say in speech marks marketplace service you have to make sure that you spell it and and capitalize it correct else you'll get some errors so make sure it looks like this let me just in large it a little bit we also want to define the datastore service once again because we want to keep the receipts of the previous purchases in case they leave the game we want to make sure that when they rejoin for example they still get their stuff we can save the purchases I would say local data store service equals game code on get service oops our sponsor on again and we can say data store service ok so now that we've done that we want to get our data store and I remember in the original currency script we got our test data store that's where we will store our currency and our saved currency in this script we're going to be saving purchase history so it receipts previous purchases we're going to want to just call this previous so previous purchases equals equals datastore service get datastore whoops we did get descendants get to the datastore Open bracket close bracket previous purchases okay so we've just got our data store and we gonna save purchase receipts so that in future we just know what they've bought what each player's bought previously and we also want to put our IDs in now so breach ID there is a developer product which gives a certain item so in our case we have a developer product which is going to give you 100 cash so we need to make a variable for each developer product we have so you can call or whatever you want I'd recommend calling your variable for your IDs something which is which will tell you what it's going to give so for example one underscore hundred underscore cash okay equals and then you put your ID so you give it a name and you put your ID so I like to have a variable you put here what you're gonna get and you put your ID just to store it as a variable so you don't have to keep putting IDs everywhere and have to keep checking what ID and what each ID attributes what it what it gives you for example so make them or wearables if you create more products keep making variables and write down what you're gonna give and make it equal to D okay so we've done that we can actually get started on creating our callback function which is process receipt so when I say Marketplace service dot process receipt equals function open bracket close bracket or parentheses with receipts in there now whenever a developer product is bought in the game this callback function is going to fire any code inside of it will run and the server's going to keep checking back to see whether it was a success or whether it's not finished yet or something went wrong so we're going to want to firstly we've got this receipt here this receipt argument and this receipt is it's basically a table made of parks six values so the receipt it has a purchase ID it has a player ID it has a product ID it has a currency spent value I also has a currency type value and it also has a place ID where purchased value so all of these different values make up the receipt and it allows us to see a unique ID for the purchase the play who purchased it what did they buy what did they buy it with did they buy it with Roy books but I mean how much did they pay what currency did they pay with obviously there's gonna be ro books but before we had tix as well we don't have that anymore and we also have the place ID where this was purchased so what game was it purchasing all of these create a picture telling you where the player bought it and it just tells you lots of little details about the purchase about the transaction we can use this to check to see if it's they've already bought it or that they were in the process of buying it and then they're sent left or disconnected so we can pick it up and always have a receipt of of this player's purchase and we're going to want to save save this to a data store so we want to create an ID again okay so what we want to make sure that if they've already purchased it before that we create a new purchase everyone we don't want them to have bought something and if they're trying to buy the same thing again so we're going to just say local ID this is our datastore ID our unique identifier and we're just going to set this to receipt dot player ID dot dot and then in speech marks we have a dot dot receipt dot purchase ID now this is gonna look something a bit like this so the ID would be your player ID and a hyphen and then a weirdlookin or CID for your developer product which looks a little bit like this you've got the unique identifier of the developer product and your players unique identifier in their ID now you'll see why we're doing this in a minute because what we're gonna do is we're gonna actually check if previous purchases I remember this is gonna fire when a player buys the developer product so if previous purchases get a sync ID then this is either gonna return true or false so this will tell us has it's already been bought okay and if it has then the purchase has already been done because we don't want the same same purchase for the same item if the same purchased I did you get you can you can purchase it multiple times but in this case each time you purchase it there's a different purchase ID do if it's the same purchase ID we don't want this to go through because we know they've already purchased it they've already bought this so we want to create a separate transaction so we can just return enum dot product purchase decision dot purchase granted okay what's go outta turn so we're just returning back to the scripts that this approach is already been done and if they want to buy another we can let them so what we now want to do is we want so we know by the time that gets here we know that the player wants to purchase another one hope that they've already purchased it so by the time this runs they will have purchased it so we know they've just purchased the developer product so we want to get the player that purchased this this product being say local player equal scandal players how long get player by user ID and then we can use the player ID from the receipt to identify them so we can say receipts got player ID we've now got the player which bought this developer product and we want to check if they've if they're still in the game because if they've left the game there's not going to be a player and we won't be able to grant them their rewards so we want to say if not player then so if not player we know that they've either left or disconnected okay so we need to somehow give this to them when they rejoin right so this is why we've done we've done this if statement so if they've disconnected we want to return enum dot product purchase decision but not purchase not processed yet so we're still waiting to give them their rewards but they're not currently in the game so we need to wait until they next join the game and so if they haven't got the rewards then what we're gonna do is we're gonna give them to them next time that the player joins the game however if the player is in the game Weibull to give them the rewards right now so what we can do is say else and now in this huge block of code we're going to want to give them their rewards so we only have one developer product at the moment so this will make our lives a bit easier because we only have to do this once however if you've got multiple developer products so you've got 3 1 gives 100 cash 1 gifts 250 + 1 gives 500 you're gonna have three of these variables you're gonna have to do what we're about to do three times so what would you have to do is say if receipts lots it's gonna be product ID equals equals 100 cash or the ID which is attributed to the variable 100 cash then drop a line just get rid of these lines here drop line and in here we want to we know that they've bought one in the cash because we've checked their product ID which they just bought against the 100 cash ID appear if you had multiple ones you'd have to have three of these if statements you'd have to change each one to be different ID so this one would probably be 250 cash if you if that's the variable you declare and this one will probably be 500 you get the idea so you only have one so we only have to deal with one if statement so we want to give them their so to do this we're gonna say player don't need us that's and then we're going to want to create a variable at the top here for the currency name again so in our case it's coins we're going to want to then put in the square brackets security name and then we want to say dot value equals and because what updating the value the current value you're gonna paste this in and just say add 100 so we're taking their current value and updating it to what it currently is plus 100 so this is going to give them 100 extra cash so you want to copy this if statement and paste it and update the values so that would be 250 or 500 depending on how much you give you want to change this variable as well if you have more than one developed product but to keep it simple we're only going to have one so what we want to do now is update our data store and say that we have successfully made this purchase so we can say data store come on set sync and then we want to say if ID and then truth in fact let's just put let's just change this to previous purchases in the other script is called data store but in this script it's called previous purchases because that's the name of our data store which we gave let's also just write this in the people a people okay I just so that in case something goes wrong and let's do that at the top here with our get async let's just change this I get async to success changes to success and then we can say local success equals nil and then we can say P call function we can say success equals previous purchases gets a sync ID just in case something goes wrong and what we can now do is return purchase granted to tell the script that everything went fine we gave them their rewards and the transaction went through so we can say return enum dot product purchase decision dot purchase granted so that is all of the serverside coding done for this developer product which can zoom out so if you want to copy it down or you miss something what's the video and now is your time to copy it down okay so what we've done on the server side we now just need to create a little GUI which will prompt the user with the development product but we also want to just create a nice little UI we're going to go into the Royal Box UI editor click on screen GUI and then click on text button you're going to drag it to the side wherever you want it to go gonna open up the properties window make sure it's open head back to you I select text scaled we're going to call it 100 cash we're gonna give it a name of 100 cash and also just going to change the styling remember you can change yours to however you want it to look I'm just gonna make mine look good ok I've got my button and we're now just gonna insert a local script inside of this button so that we can prompt the player whenever they click it so we're going to want to have a activated event so script got parent don't activate it connect open racket function closed bracket or parentheses we're at the top we want to get the marketplace service so local marketplace service equals game can only get service market place service we just need to say the local player equals game but playing is not local player so we're getting our player and then we just want to prompt the purchase whenever this is clicked so we can say marketplace service curl and prompt product purchase player and then you just want to get the ID of your developer products now because this is the 100 cash button we want to get the 100 cash ID and paste in here if your button was fired from your cache you want to update the ID and here with the correct ID for 500 cash so they can't all be the same they have to be different if you have different developer products okay so that is everything done for the buying let's open up the output run the game and hope that everything works fine and then their errors but if there are we can fix them we've run the game date has been loaded we're gonna buy 100 cash it prompts us we're gonna click buy now you process receipt should run and there we go it gave us an extra 100 cash we now have 1437 you didn't see that and click again click buy now and it's updated to 1537 let's leave the game remember it's delaying because of bind closed for 5 seconds let's reenter the game and you see data saved and we've now got 1537 coins so you've just monetized your game with developer products and the currency system now players in your game have the ability to buy currency but what if they want to spend their currency on other items well in a future video only we showing you how to create a shop which will are your players to buy items with the King game currency and keep night for that because that's coming soon don't forget to subscribe to my youtube channel album blocks if you want to find more quality roblox scripting tutorials for free help you master a roblox scripting thanks for watching and I'll see you next time