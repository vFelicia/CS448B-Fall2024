so a developer product can be purchased over and over again unlike a Game Pass which can only be purchased once to create one you firstly have to publish your game so go to file publish to Roblox as or press control shift p to get that published and then if you go to game settings at the top here you go to monetization you can then see this tab here for developer products now you can also access your developer products at create. roblox.com if you select your game there's a tab on the left side which lets you do the exact same thing as what we're going to do here so I'm going to create a developer product I'm going to click on the three dots going to click on edit and you can give it a name so we'll just call it test product and we'll set a price of 100 Roo once we've done this we can go back to game settings scroll down and you see we have a product ID this identifies our specific developer product so we're going to copy that using the three dots and clicking copy ID to clipboard alternatively if you created yours on the website you'll find the ID somewhere there probably be in the in the URL or listed on the page and then in a local script somewhere on the client so it could be in the start of GUI for example we want to prompt the user to buy our product by saying Marketplace service prompt product purchase and we're using this specific function because it is for developer products we specify the player that we want to prompt this to since it's on the client it's going to be the local player and then we also pass the product ID and once we've done this when we play our game you'll see that we get prompted to purchase the developer product now this is in studio therefore we're not going to be charged any roo if we purchase this but the same thing is going to happen as if we were to purchase this in a running game now perhaps you want to prompt the player to purchase a developer product when they click on a button very simple all you need to do is create a screen GUI have a text button or an image button and then you could have your code so that when the button is clicked using the mouse button one click event we do the same thing here we would just prompt them to buy the product so we've just moved this code into an event so it will run rather than running when we first join the game it will run when we click on the button so that is the prompting side done now that we've bought the developer product how do we actually give the user what they purchased now of course there are loads of different things you can do with developer products I'm not here to show you how to make every single developer product Under the Sun however I will show you how to process a payment right once the payment's gone through how do you give them the goods the deliverables and to do that we're going to switch to a server script now we've prompted the user to buy the product on the client that's all we need to do over there but we actually want to now process it on the server and it's always good to handle this stuff on the server because it's authoritative it means the server has full control can't be touched by exploiters so we do all of this on the server when we're processing the payment and to do that we will say Marketplace service. process receipts and this will allow us to call a function whenever a developer product has been purchased and then in that function we can work out which spefic specific products has been purchased and we can run some specific code to execute the transaction and to give the deliverables for that specific product so Marketplace service. process receipt equals function and as part of this function it will take an argument for the details of the developer product transaction so we can call this whatever you like but as per the Roblox docs I'm just going to call this receipt info okay and then this receipt info we it will contain all of the information relating to the transaction that just happened so it will contain the user ID of the player who purchased the developer product so we can identify them and it will also contain the developer product ID as well and that's really all the information that we need because we now know which user bought the product and which product did they buy now that's not it there's also some other information that gets sent to this process receipt function when we buy a developer product you've got the currency spent which is the price currency type the place ID where the purchase was made the player ID the product ID and the purchase ID so we want to get the user ID and the product ID so we'll create a variable for the player who the player ID and that will be receip info. player idid and we also want the product ID which is going to be receip info. product ID and I just printed this to the output to show you all of this information and then what you can do is you can say if product ID equals equals and we'll just get our product ID that we made a couple of minutes ago just put it in there we now can put any code in here inside this if statement and that will run if our specific product has been purchased so we can say test product has been purchased now let's just head back in and we will buy our developer product again this is going to call the process receipt function and it's printed out that the test product has been purchased now if we were to purchase a different developer product this would not print because this is only going to print if our specific product has been purchased and then you'll put your code in here to give the player what they've bought this could be for example walk speed that might last for a couple of seconds it might be additional currency uh we will show you some examples very soon on how to do that but we'll just assume we've we've given them all of their stuff that they've purchased that's all good we now need to return a value from the process receipt to tell Roblox that it's all good the the trans transaction has successfully completed we've given them everything they need it's it's all good so we can just return enum do product purchase decision dot purchase granted and that just means we've given them everything they've bought and we don't have to worry about it anymore the reason this exists is if for some reason the purchase didn't go through maybe there was a Roblox uh issue error that prevented us from processing the transaction we would return not processed yet and then that would mean the next time they join the game we could um make sure that that goes through and they are given what they paid for but if we return purchase granted it means yep all good they've they've got what they've purchased you don't have to worry about it anymore um so it's like a status code so what we will then do is we need to make sure that the player is actually in the game right because maybe they left just as they bought the product so we can't give them their stuff right that would be a reason why the transaction might not go through because if they've left the game we can't get their character anymore so we will firstly look to see if the player's in the game by saying game. players get player by user ID and we'll put the player ID in there and we say okay if player then and then we can Well what we'll do is we'll put that in here there we go we'll put that in here because perhaps we need to firstly get the player if we want to give them walk speed for example and so if the player exists then great we'll have the code that adjusts their walk speed or adjusts their currency however if the player isn't there then let's return not processed yet because obviously we can't process what they've purchased um and I mean it's most likely that you're going to need the player to exist anyway right to give any of their benefits that is pretty much it that is how you process a developer product but this could get quite messy because imagine we had 10 different developer products we'd have to start doing loads of else ifs like this and we'd have to keep copying and pasting the same stuff here so I'm going to show you a better way of doing it pretty much how they do it on the Roblox documentations so rather than having our code here let's just put it at the bottom and just forget about it for a second what we can do is we can actually have have a table of our products and then for every single product we can index it in our table like this and we can set it to be a function and then we can have an argument for the player that bought it and we can put our code into this function and then we can return true or false depending on whether it went through just like this so if the player exists we give them what they purchased we return true to show that everything went well otherwise if the player doesn't exist let's return false and you can do this for every product that you have you know you might have three products you can have three different functions and in this function you might give them their walk speed in this function you might give them even more walk speed in this function you might give them 100 cash so all of your handling is done in this function because you've got the player and you know what the product ID is so you can do all of that stuff up there and then rather than having this if statement that checks the product ID and you might have to have three or four of them if you have multiple IDs we can just get the function from this table by passing in the ID so you could say products if products product ID then because this value is going to be a function we can just call that function by having a pair of brackets on the end or parentheses and we put the player object that we've just gotten via get player by user ID as the argument as the parameter to this function and then we'll get the result which gets returned because it will either return true or return false and then we can say if result then return enum do product purchase decision purchase granted else return enum do product purchase decision do notprocessed yet and that will mean that we no longer have to have loads of code in in this function whenever we want to add a new developer product we just add a new entry to our table like this and we paste in the ID we have the code that gives the product we're good to go so let me show you how to actually process some developer products so for example if the player has bought 100 cach we could say player. leer stats. C.V Value Plus equals 100 and this would be for 100 cash if you then had a product for a th000 cash you would simply make another entry into the table and change the value here accordingly now we don't have a leader stats so I'm going to pause the video and set one up for the purpose of this video okay so I just created my leaderboard very very simple and I'm going to buy my test product and if you watch the value here it is increased by 100 and that's because and I'll just buy again just to show you now it's 200 and that's because when we buy the developer product the process receipt function on the server gets called we look up the product ID that we've created here uh we look up the function for that product ID that we've put into our products table and obviously it exists so we then call that function we pass the player that bought it to the function and then the player exists obviously so we increment that cash value by 100 and we return true to show that the purchase went through now let me show you how you can make some changes to the player's character for example you might want to give them speed for 20 seconds well you can get their character by saying player. character and you might want to check that it firstly exists like this if it does you can then say player. character. humanoid walkspeed equals 50 and then if you want it to wear off after 20 seconds you can do a task. delay uh uh and you could say 20 seconds function player. character. humanoid walkspeed equals 16 and that will set it back to default now the task. delay um creates a separate thread so that it doesn't yield this function it just does it in the background and after 5 Seconds it will run this function so it will uh reset the player character so walk speed back to 16 after 5 seconds but it won't yield the rest of the function from returning so let me show this to you if I go and purchase the developer product you see I'm walking at normal speed right now I purchase it suddenly I'm walking fast and then after the 5 seconds are up I go back to normal speed and if I want to I can purchase it again because it's a developer product and it can be purchased over and over again so that is how to create developer products on Roblox I hope you found this uh tutorial useful if if you did please leave a thumbs up subscribe let me know if you have any more videos you'd like me to make and I'll see you in the next one thanks for watching