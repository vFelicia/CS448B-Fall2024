if you want to learn how to use bindable functions in roblox to do to allow two scripts to communicate with each other and send information there you're going to want to make sure you watch all this video so you don't miss out on anything let's get started welcome back to another video my name is Ivan blocks if it's your first time here make sure you subscribed and the eternal notification bell today we are gonna be learning about bindable functions so in my previous video we had a look at bindable events and what bind will events let you do is they let you they let you have two scripts in the server and you can have one script call call the other script and trigger it to do another task so the difference between bindable events and bindable functions is that a bindable event will trigger another script to do something and the bind will function will do the same thing but the difference is that a bindable function the script which you trigger will return a value back to the original script and we're gonna have a look at some examples in a minute but an exist a quick example would be you could return whether what you triggered was a success or whether it aired or if something went wrong but the example that we can be looking at today is we are going to have a set of parts in the game let's just bring them up here so these are our parts and we're going to have two scripts one is going to be an invoker and that's going to be this script which triggers the bindable function and tells the second script to execute some code and then the second script over here get number of parts is where we're actually going to code it to find out how how many parts are in the game and then we're going to also code it so that it will send back the number of parts to this original invoker script so it's two scripts working together to perform a specific task now you could of course do this all in one scripts but this is obviously just for tutorial to show you how this all works so a bindable function just like a bindable event it can only go or it can only talk between two server scripts okay so you can't you can't have a bindable function working with a local script which is on the client on a player and also talking with a server script on the server it has to be servertoserver so you could have two scripts on the server but not when you're trying to work with filtering enabled or experimental mode or anything like that so if you want to use if you want to make your game filter enabled you'd have to use remote events and functions I've done some videos on those as well you can click on the card in the top right corner of the screen to see those so let's get started by going into our invoker scripts now this is where we're going to call this bindable function and all you have to do is well because what's going to happen is we're going to call this bind will function and because it's returning a value to us we'll have to set it as a variable so my variable is called number of parts and I'm just setting that to game dot workspace stop bind your function invoke now what this means is it's going to imagine that it's going to substitute this piece of code here what I've selected with the actual value so let's say the second script counted 50 parts in the game then just imagine that this selection would get substituted and the word and the numbers 50 would be added in there and if we print it out later on it'll print out 50 so the script this piece of code is making a request to the bindable event and it's going to return back the number of parts to this variable and then later we will be able to print this variable out and it will give us the number of parts in the game it will in this model so that's all you have to do to invoke it you have to reference the bindable function so game dog space dog mind will function because it's in here and then you have to say invoke with a pair of parentheses so if you want to add a bindable function and you don't yet know you just have to click on the workspace or if you want to put it click on this little plus and then type in find it'll function and there you go you can also insert a bindable event if you want so that is how you invoke and you see I've got a little comment so the user wants to count how many the number of parts in the game and this is what's going to do it this is what's going to make the call to do this so that is the invoking part done what we're going to do now though is we're going to actually work with the get number of part script so that we can we can actually code it so that it counts how many parts and it sends back this value okay so I'm in the get number of part script and you can see it looks a little bit different I've just written out the the the way that you have to write these out this function just to save a little bit of time so on the on the get number of part script this is what's going to be receiving the request from the bindable function and we're going to want to write some code inside of here so any code inside of here i will run when the bindable function is invoked okay so if we put print hello in here and we ran up this script it's going to print out hello because the first script has made a request to the second script and the second script has been scripted to print out the words hello whenever it gets invoked so we've just invoked our bind to a function and we've printed something out so let's go back into our script and let's adjust this to make it a little bit more advanced we're going to count up how many parts we've got in the game and then we're going to send them back so to do this what we're going to ought to do is we're going to want to first get the children of this model because we only want to count how many are in this model so we're gonna say local parts equals game don't work space dot parts colon and get children okay so this part's variable will be it will be all of the children it contains every single part inside of this model we then want to just get the number of parts so to do that we can say local number of parts equals hashtag parts and this will return the number of parts contained in this variable so we've just got all the children so all of these are children of the model and this line is just counting up how many of those parts there are so now we've done that we just want to return back the number of parts to the original scripts to do this we just have to say return and we can say the variable number of parts so hopefully this is going to count up all of the parts in the game and then what it's going to do is it's going to return the number of parts back to us so let's have a go at doing that now and let's go and run this script open up the output and that's right see what it says and you see it has printed out 120 which means that if you were to count it if you were to pause the video and count up every single part here you would see 120 parts trust me so now that we've done that we're gonna take things to the next level and make them a little bit more advanced now what if we wanted to make the script only counterparts with a specific name we can pass an argument for that so argument is well let's say for example we want the script to count up the number of parts with a name brick okay instead of part we can pass an argument here in this parentheses block and in speech marks we can provide as a string a name for our parts which wants it to count up so let's say we only wanted it to count up parts which are called brick we concert' we can supply it with an argument called brick but at the minute this script this get number of part scripts doesn't know what's what this brick means we have to give it a meaning so because we've sent an argument on the invoker side we have to go in to our second script which is picking up the trigger and we also have to add it in here but it doesn't have to be the same name because we obviously might we might not know or what this argument might be because we might call it midway through a game with a specific value which might change so we always have to call it something different and as I said earlier remember when I say how we're substituting in with this part here we got we were we were substituting to this back to this variable the number of parts just like arguments what we're going to do is we're going to substitute let's have a very risk all this argument name we're gonna substitute name with the argument which we provide so in this case is going to be brick let's go back into the get number of parts script and what we can do now is we can say print name and what this is going to do is it's going to print out the word brick let's have a look and see if it does that let's open up the output and let's go and run the game okay so you can see it has printed out brick as well as the hundred twenty because it has got the name which has been passed over as brick and is now going to print it out so that is how you use arguments and now we can put this all together to modify our script to make it only only return mark the number of parts which are called a specific name so to do this let's just hide your pod code by just removing a couple of things we don't need let's just get rid of this print name because we won't be needing that and let's just get rid of this local number of parts for now because we're not actually going to be counting up how many of these parts there are yet we're gonna have to use a forloop to increment a variable because we don't know whether the parts going is called the argument but if it's called brick or not so we don't want to automatically count them up before checking so what we're going to want to do is we're going to just want to create a for loop which will loop through all of these parts and check whether it's name is equal to the argument so to do this we can say for I and I is gonna be the counter so each time it runs it's gonna increment increase by one and then we can say comma part part's going to be the current part which we're iterating through and then we can say in pairs open bracket close bracket parts do and we can drop our line and parts is what we're going to be iterating through so all of the parts through get children and so inside of here we just need to check if part dot name equals equals name which is our argument so if the parts name is the same as the argument then what we want to do is you just want to quickly write our number of parts variable again assumes a local number of parts equals zero for now and remember each time this gets invoked it will be reset to zero and then we can increase it every time we have a part which matches the name of the argument so we can say number of parts equals number of parts plus one and now what we can do is we can make sure that we're returning number of parts back to the original scripts so we need to have some parts which are called brick for this to actually work but for now let's head back and run this again remember none of our parts are currently called brick so it should return zero there we go so it's returns zero because there are no parts in the game called brick let's go and change a couple of parts to brick and let's rerun this you can see now that there are twelve parts called brick and if we go into our model you can see one two three four five six seven eight nine ten eleven twelve twelve parts are called brick so what's happened is the invoker has passed this argument it's been picked up by our second script substituted in as name and it's checked to see whether the parts name is equal to the argument if it is the number of parts is being incremented by one and then we're returning number of parts back to the original scripts so that we can then use it to print out on our original script but you may be thinking why do we have to use two scripts for this instead of just one well you could just use one script if you want but there are lots of different purpose for bindable events you may want to return something back to it to your original script from a different script and then use it in your original scripts to work out some other things lots of different uses you can use them for server to server talking for talking between two scripts but it's something you really need to know and it's very helpful when you're working on your game you might want to have one script for doing one thing and another script for doing something else and you want to trigger each one based on different things and you want to pass messages and arguments between them so it's very useful for that kind of communication but if you want to do remote events remote functions I've got lots of tutorials on my channel as I've already said there's a link in the card which were able to click and that is the end of this tutorial so if you enjoyed it please leave a like make sure to subscribe turn notification bell and I will see you in the next video this is Allan blocks telling you to keep scripting you