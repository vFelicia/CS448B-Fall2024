welcome to your third roblox scripting tutorial today we're going to learn about functions now a function allows you to run code over and over again now you may be wondering well why can't we just copy and paste this code right it's going to run over and over again now okay kind of true but let me show you what our function does a function could allow you to reduce this code down to maybe this much right so if we wanted to change the transparency of this part we could create a function which would set the transparency of the part but instead of having to say game.workspace.alvinblocks.transparency every single time we could just call it by a simple name let me create a function for you so if we say function and then you give it a name so this function is going to have some code in it which will do something and my function is going to change the transparency of a part so i could say change transparency that could be my name now what you do after that you put a pair of parentheses or brackets then you drop a line and you can see that the script has added this end for me now you can see this arrow here has indented the code when we say indented it means that it's just uh pushed it forward a little bit and you can see if you press tab it indents it even more so it's typically around the size of four spaces right that's the size of an indent but if we press the tab here to indent our code it's always good practice to indent your code when you are inside a block of code this is called a code block because it's the code that's going to go in the middle is sandwiched within this function so it's a code block now any code that we've put inside of here in between these two lines within this function is going to run whenever we call the function so it's not going to run immediately so if we put this code in here get rid of that now if we run the game it's not going to change the transparency of the part nothing has happened and that's because we have not yet called our function so we have declared this function we've defined the function we have told the script this is a function whenever we call it it's going to change the transparency of the part to one but it has not uh it's not executed itself yet we haven't called the function now if you wanted to call the function it's very simple we just have to write out the name of the function and put a pair of brackets after it and that is telling to the script that we want to run this function we want to execute it we want to run the lines of code that are inside of it so it's going to get to line one it's going to see okay this is a function we have got it defined so the script now knows that if you ever call the name of the function with a pair of brackets later on in the script it is going to run any code inside of it so we get to line one okay this is a function call let's get to line three we're not going to run any code with it within it we're just simply acknowledging that it's there and later on we might use it so then we go to line four nothing here line five okay right change transparency and the script remembers that this is a function that we just created so it's going to look up the function that we made here and it's gonna say okay let's run all of the code that is inside of it line by line so it's going to start at the top it's going to say game.workspace.alvin blocks.transparency equals one it's going to set that part transparency and it will then move on to the next line and it will see that we're at the end of the function so it's going to stop running this function it's just going to go back to line 5 now so now that this function has finished if there was any code that was underneath it such as this print hello it would move on to the next line and it would print out hello but in this case we have no lines after this function call uh on line five this is where we're calling the function we're telling it to run so it's just going to end the script if we run the code you can see the part has gone transparent from the uh from the get go from the very beginning and that is because we have forward the function first in the script the first thing we've done right aside from defining this function so it's going to happen instantly so there's not much really that's different in terms of you start the game and boom the part already goes transparent so what is so good about functions well it's a way to reduce the amount of code that you have to write so if we have this function here and we want to keep changing the transparency of a part we wouldn't have to keep on writing game.workspace.alvinblocks.transparency we could just say change transparency but this is just going to set the transparency of a single part to one value all the time so why is this useful well what we can do is instead of just setting the transparency of one part because that's the only part that's going to change because the part in our function is always the same one we can use parameters and parameters are really really useful they allow us to keep our functions dynamic and when i say dynamic i mean that each time that we call this function it could do something slightly different it could change a different part each time or it could set a transparency value to something different each time but we still wouldn't have to be saying game.workspace then put the part name and then put the property name and then set the value right so a parameter is some data which you will input into the function here well it is we haven't got on the variables yet we'll get on to variables in another video but we can put some parameters and these are the things that will change each time we run the function so for example we could have a parameter for the part that we're going to change the transparency of and we could have a parameter for the new transparency value so we could set new transparency okay these they don't matter what they call them you can call them anything you like you just have to remember the order that you um set up your parameters for and then the order matters because whenever you call the function you will have to specify the part first so it could be game.workspace.alvin blocks that's going to be our part and so game.org start having blocks is going to be our part okay and then we do a comma to tell the script that we now are going to write us our second parameter and we're going to write the new transparency value so i could say one okay and now let's change the code inside our function because we want to say part.transparency because part is the object that we are defining here and we're setting that to our new transparency value so the script is expecting for the part parameter to be an object which it is this is an object in the workspace and it's expecting the new transparency to be a number which it is because we're setting the transparency property which of course requires a number now something i just wanted to note is that the parameters are the placeholders which you define in your function and the correct name for these values the values that you put in when you call your function these are called arguments so the arguments are the ones which contain the actual values which are going to insert to your function and these are the parameters because they're just the placeholders the names of your future arguments so these are the parameters and these are the arguments so now that we've done that we run the code and it's going to do the exact same thing make the part transparent fully transparent but now we could change this to 0.5 and it's going to become semitransparent there we go you could even set it to zero it would it would stay as it currently is totally opaque would be able to see through it but what you can see is that we've set up this function we've basically written out the code to change the transparency one time and if we wanted to change the transparency later down the line when the game was running say five seconds later you can say wait and then in parentheses or brackets you write the number of seconds that you want to pause for and the script will just pause at this line so you can see the changes that you made earlier and then if you wait five seconds we could change the transparency to something else let's set this to two seconds actually because i don't want to wait that long so we've called the function again and this time it's going to set the transparency to 0.75 so we we should see it being half transparent when the game starts and then two seconds later it goes even more transparent so the function allows us to save code because we can call the function multiple times and we can stop having to write out game.workspace to album blocks dot transparency all the time but also it just is really simple it allows us to call a function and we don't have to do the same thing each time we can have different transparency values we could have different parts you know it doesn't just have to be the part in the workspace called alvin blocks we could have a part called subscribe and we can go back into our script and we don't have to say game.workspace.subscribe.transparency we could say change transparency and we this time we say game.workspace game.workspace.subscribe and we can set that parts transparency as well so if we click on run we should have one going half transparent and one going fully transparent okay so that is how a function can be used and you may be wondering well you know what's the point i mean it's not too bad having to write out game.workspace.alvin block.transparency all the time and you'll see that in the next video because in the next video we're going to look at events how to make things happen in the game how do you run code when something happens in the game like how do i make some code run when i step on that brick or when a new player joins the game or when someone says something you know how do you hook up the code that you want to run to the event you know to the thing that's going to happen when a player steps on a brick for example and that's what we're going to look at in the next video but that's why it's so important to learn about functions they're so cool because they let you they let you write code that you're going to execute later on so you can write out your code which you might not necessarily want to run straight away because we know that a script runs when the script starts running when the game starts and we don't want all of our code to run as soon as the game starts so we can write functions which we can call later on in the game so thanks for watching your third scripting tutorial like i said the next video is going to be about events it's going to be really exciting it's going to make you able to do really cool things in roblox studio so subscribe like the video if you enjoyed it share it with a friend if you thought it was helpful and i'll see you in the next one thanks for watching