so in this video we're going to discuss instance. new this is a way of being able to insert objects into your game from a script now you might want to insert objects whilst a round is running uh there's always going to be use cases where you'll want to do this after your game has been published and a server has been opened you can't do anything else unless you do things from inside a script so you can't manually insert parts or manually insert objects like you can right now in studio so how do we insert an item from a script well it's really simple you say instance. new and then you put a pair of brackets or parentheses and then you insert the name of the object you want to insert and this is the class name so every object in Roblox can have its own specific name for example we've got a base plate a spawn location these are all custom names however the class name is the actual uh underlying name of what the item actually is so our base plate is called base plate but it's actually a part right it's the same as any other part in the game but it's just because it's so big and it's called the base plate it's got a different name but the class name is what matters here so if we wanted to insert a part we would just say in a string format by having two speech Marks here part it's got to be case specific you've got to have that capital P for part you can view the all of the different class names in the object Brown so there's all these different items that you can insert some of these are services so you've got things like Parts which you can insert um have a look through later on but what this will do is it will insert a part into the game however we can't set any properties of this part yet we can't set its name we can't set its position we can't parent it to anywhere so this won't do anything it will insert a part but it won't put it anywhere in the game so we won't be able to see it if we want to make further changes to this um new part we we've created well the instance. new will return that part so anything we would now then do to this part would be done so we could for example say parent equals game. workpace okay but still how can we do things like changing properties if I then wanted to change its transparency what would I do so you could say transparency equals 1 but the problem here is firstly we haven't parented the the object yet uh and I'll come on to that later but secondly we can only set one property I've set the property now how do I set the reflectance no that doesn't seem to want to work produces a red line so what we need to do is we need to store The Returned part from this instance. new as a variable just like this you can call the variable whatever you like doesn't have to to be K sensitive I could call it cheeseburger if I wanted to or anything but I'm just going to call it part for Simplicity and then I can say part. transparency equals 1 part. anchored equals true part. position could be a vector 3 value of some location you can set as many properties as you like you can even set the name I could call it my part but we still need to parent this part nothing is going to appear in the game World unless we parent parent it and when I say parent it it means we have to put it somewhere in the game so we can see it and that means we need to put it into the workspace because the workspace is where everything gets rendered for us to see so part. parent equals game. workspace and what this will do is it will place our part in the game if I click on run straight away when this script runs we look around we should find our part let's have a look in the workspace okay here it is my part of course we can't see it because I set the transparency to one however you can see it has been created there okay so you will notice that I've parented the instance last why have I set the parent property last this is because I want to firstly create my part I want to set all of the properties and then I want to place it into the game world and this is because when we place it into the game World it will be replicated to all of the other players in the game so we've created this part on the server the game server has created it and once it's been created it's going to send a signal to all of the other players in the game saying okay there's been a change we've inserted this part and this part has got transparency of one it is anchored its position is here we've called it my part that's all the information you need and we could just broadcast that in one signal now this is all done under the hood by Roblox you won't see it happening but when a is parented that is when the server sort of broadcasts this message to all of the players in the game saying okay this part has been created here is the latest update if we were to start then if we were to parent it first and we were then going to change all these properties afterwards every time we change the property it would have to broadcast one of those messages it would do it for the transparency for the anchored property for the part position for the name right so instead of having to have those individual signals being sent every time we make a change to this part right we what we could just set all the properties in one go before the part has been replicated and then parent it which is going to replicate it with just one signal now I'm sort of explaining this a high level it's a little bit more complex than that but you just don't really need to understand what I'm saying is for best practice you want to parent the object to wherever you're putting it after after you set all of the properties okay you you may have seen in other videos um what people have done is they've parented the item straight away by having a second argument here in the instance. new and whilst this does work again it's not best practice because it is parenting the item first to the workspace and then we're changing all these properties on the server and the server has got to replicate all of these changes by sending a message over the network to the connected player or the connected clients so what we can do is we can save having to send those repeated signals out by setting the properties first and then parenting it once they've all been set and it's just best practice it's not going to you know it's probably not going to cause noticeable problems in your game but among scriptors it's the best practice to set your properties first and then parent it okay so that is instance. new you don't have to just use it for parts you could use it for all sorts of different um use cases you know for example in your game you might have a game mode where um it is murderers against sheriffs you want to insert a murderer team you can just say instance. new team murderers. name equals murderers okay and murderers. parents equals game. teams and you could do the same thing for a sheriff's team okay now you may be saying okay okay but why not just have the teams created in studio you know why why do you have to create them via script that's very true but you might have different rounds and if the murderers V Sheriff's round is selected you only want to have these teams created if you might have another round where it's a completely different set of teams I'm just showing you how you can use instance. new to insert teams into your game like this okay um and there we go our murderous team is there not sure why the sheriffs aren't showing up I think that's a UI bug with Roblox however that is instance. new hopefully you get the idea of how to use it let me know if you have any more um questions video ideas uh drop a like if you found this useful don't forget to subscribe and I'll see you next time