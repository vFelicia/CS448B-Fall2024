so imagine you have a group of items in Roblox perhaps you have loads of parts and perhaps they're inside a model or even inside of a folder okay and what you want to do is you want to do something to all of these parts perhaps you want to change the color of all of these parts at once without having to say workspace doart one. color workspace dop part2 dot color you get the idea so let's put all of these parts into a folder and let me show you how you can do a bulk update to all of these parts using get children so I'm firstly just going to Anchor these parts so they don't fall over when we run the game but in a script I'm going to show you how to use get children so get children will allow you to get all of the children of an instance now what is a child well in Roblox terms a child is any object or instance it's another word of saying object which is inside of an another instance so for example this part is a child of the folder and the folder is a child of the workspace and you can see this by the arrow which is next to our folder so we can expand and collapse it and you can also see there's a slight level of indentation which shows the parts being within the folder because we have this Blank Space near where my cursor is so what we can do is we can get the children of any instance by calling the function and get children so firstly we need to have the reference to our folder now in this case the folder is known as the parent because it houses the parts it has some other objects inside of it so the folder is the parent but all of these parts are the children so to get these children we're just going to say colon get children like this but now what what can we do with those children well we haven't stored this as a variable we need to store it as a variable so I'm going to create a variable I'm going to call it children you can call it anything the name doesn't matter what matters though is that it's going to be storing a reference to all of these children and it's going to be storing it in the format of a table a table allows you to store more than one value so in this case we're going to have a table which looks like this and it's going to have an index for every single uh object inside of our folder so an index is just a value okay so for example our table would look something like this now we won't be able to see this table but I'm just going to show you this is what it would look like okay I don't know how many parts we've got here 1 2 3 4 5 six seven eight we've got eight so 1 two 3 four five six seven eight okay so it would look something like this we have eight references to each part obviously named the same thing uh in this example but just imagine that they are different so that's what the table would look like that is what our children variable would be because we've got the children and we've just put them into a table so we've got a collection of all of those parts what we then want to do and uh I'm just going to keep this here but I'm just going to comment it out okay so the script ignores it because this is just a visualization what we can then do is we can Loop through that table we can Loop through all of the children and we can say look for every single child in this table we want to do such and such okay if we want to change the color of all of those parts we can do that if you want to rename all those parts we can do that if we want to delete them all together we can do it so I'm going to show you how to do that we're going to use a in pairs Loop and it looks something like this so you'll say for index comma value in children do okay and you might notice if you have been a scripter for a while that I'm not saying in pairs okay it used to be that you'd have to put the children like this but you don't have to do that anymore so we just say for index value in children do and then whatever you do this value because this value is forget about the index value we're not going to talk about that today the index is just current the the number right so if it's the first in the table the index is one if it's the second it would be two if it's the eighth index would be eight but we don't need the index for today what we what we are interested in is the value and the value is just going to be each object in our table here that We're looping over so it will start with the first one and the whatever we do to this value will be done to every object in our table so we could say value do color and we could set the color to Red for example okay and if we run this code it's going to set the color property of every single child that's in our table here and if we click on run you'll notice all of the parts went red and you'll notice that it happened instantly but with a for loop it's actually doing it one by one in order it just happens so quickly that we fail to notice and if we were to add a task. weight of 1 second here you would be able to see each individual part being looped over it's not doing it in any particular order here either it's just it's doing it based on the order of the table which might not correspond to the order that our parts are are laid out in but you can see it did it one by one so that is how we can Loop over the table and I'll do a more indepth video on four Loops this video wasn't meant to be intended for that but it's meant to show you that the get children function returns a table and then we used the four Loop to Loop through every object in that table okay so again you can do whatever you like here you could print the name of the part not that you'd really want to okay because they're all the same at the moment but you know we could we could say part one we could say part three and it would print those out one by one okay and again it doesn't necessarily mean that's the order that they're going to be printed out in but you can see it's printing out each part as it Loops over it so that is get children okay and I'll probably make another video about a separate uh function called get descendants okay you can also say get descendants and the difference here is get children will only Loop over the first set of children if I had another child inside one of my parts get descendants would also Loop through those as well it would it would Loop through absolutely everything in our folder okay even if there was something inside our part it would still be counted but if we said get children because we're only looking for the direct children of that folder technically this second part that I just created is parented it's a child of the part not the folder so it wouldn't get counted but if you say get descendants it would contain it okay it would it would class it as well because it is still a descendant of the folder it's still within the folder it might not be directly parented to the folder but it is still a descendant of it okay because if you collapse the folder the part disappears so that was how to use get children hope you found it useful if you did please leave a like Please Subscribe let me know any other videos you'd like me to cover and I'll see you in the next one thanks for watching