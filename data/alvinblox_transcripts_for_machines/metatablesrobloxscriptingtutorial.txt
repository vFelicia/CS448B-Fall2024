hey everyone in this video we're going to be going over meta tables in roblox so in roblox obviously we have tables and tables can store data so let's just create a table my table like this and inside of it you could have a string or a number or whatever you could have any data in here and you can you can store multiple um pieces of data within a table so what we can also do is we can get items from that table by saying my table and then indexing it with a number so my table one or my table two because we've got two items in this table so if you if we were to say my table one that would be string if it were to say my table two then it would give us 30 the number 30. so this is really all that we can do with tables we can write to them by inserting new pieces of data either by adding it when you create the table like this or by saying table dot insert like this after you've created it so tables limited functionality inserting things and removing things as well because you can say table dot remove and remove from the table so if i was to remove the second index then it would get the second index which is 30 and it would remove it from the table so that is basic functionality of how a table works but we can actually make these tables more powerful and that might be something that you've heard quite a lot when you've looked at meta tables or meta tables make tables more powerful but how could how does that table become more powerful you know what does it mean to become more powerful and really i don't really like that explanation i just met a tables they give you more functionality they allow tables to do things that otherwise they wouldn't have been able to do and i'm going to show you uh one or two of these things that come as part of the extra functionality with meta tables and so what we do is well i'm going to show you actually we're going to create a new table and we're going to have meta methods within that table so let's create a second table and call it my meta table okay and the meta table it just needs to be a table okay there's nothing special about it it's just a table which contains meta methods so meta table is a table containing meta methods but what are method meta methods meta methods they are kind of like events so if you've been scripting for a while you'll know what events are events are triggered when certain things happen and that can allow us to run code at certain times so for example when you touch a brick then a touched event will be fired and it will run some code that's within your touched event so for example we could create a meta method and i'm just going to call it an event right now it's not um officially known as an event but just to make things a bit clearer i'll be calling a meta method and events that's probably not the best you know regarded definition but that's what i'm going to call it to try and help explain it to you so i could have a event within my meta table which will fire some code if you try to index this table you try to index something in the table that isn't there so if i was to say my table and my table four okay i want to get the fourth index in my table but we only have three indexes so an index is just an item in the table so we've got the first one here string the second one is 30 and the third one is another string although this time it's called hey but there is no fourth index so if we tried to index the table and try to get the fourth item out of that table by indexing it with the number four hit over here that would not that would be nil because there is nothing at the fourth index within our table so my table 4 would be if we were to print that for example it would print out nil okay and just to show you here i don't know why it's gone really small apologies for that if i run the game it prints out nil because there is no object uh no item at the fourth index if we did insert another piece of data then this will be our fourth index but as it stands right now we do not have a fourth index in the table we have one two and three so we can create an event which will fire whenever we try to index um try to get an in an index from the table where there's nothing there so in this case we try to get the fourth index in the table then if we had an event within our meta table that would um trigger when we tried to get my table four and we could do a number of things with that we could just print out to the output and say hey you try to access the fourth index in my table but it isn't there but what is the use of that you know what's the point um you may be wondering saying well you know if there's nothing in the table why just have a meta table to print things in in the output that's not going to do anything and that's why the meta table events allow us to have contingency plans so if we desperately need something from this my table 4 call even if it's like a if we needed some data right say we had a script and we had to get a number out of a table and we tried to index the table and there was no number we could have a default value which it returns instead and that's where meta tables are handy because you can say okay i'm gonna get this out of the table but just in case isn't there for some weird reason you know and there's there is no data for the index that i've specified then let's just give it this dummy data instead you know it's kind of it's a bit like if you are loading a player's data and you're loading their cash but they don't have any cash saved when you're looking for it in your data store you're trying to retrieve it but they don't have any cash well let's give them 50 by default and there might be a new player so they don't have any data currently saved so let's give them a default value of 50 coins when they first join the game it's quite similar to that because if we were to say my table four and just to make this a little bit more realistic let's just say we have 30 20 10 5 okay just imagine this is a table of numbers and the numbers mean something right and you need to get a number out of that table at the fourth let's do the fifth index now right because we don't have anything stored at the fifth index but if we um try to get a number or a piece of data from the table at the fifth index one two three four oh look at that we don't have any data stored at the fifth index in the table so what are we gonna do because you might need a number to be returned because you could have my number equals my table five and then immediately after that you might do my number times we could just do local another number here equals my number times five now this needs to be a number my number needs to be a number it can't be nil because if it was nil we'd get an error because you'd say um nil times five you can't do that because it's not a number so you'd get an error so if we didn't want our script to cause an error um for example it could be your gameplay script and if this breaks the if this causes an error it's going to stop the entire script and your game is going to break so this has to be a number right and even if we um looked up at the fifth index in the table and we got nil we don't want it to return nil we want it to instead return us a default number any number just give us a number because we don't want our script to fall over and crash when we when we try to multiply nil by five so we just want it to be a number even if it was one right or or a hundred we don't care we just need a number so we can harness the power of meta tables and we can create our own event which detects when you try to get a piece of data from the table and if it's nil and it's not there we can return a default value instead so we could just return the number one for example so it would look up the fifth index find out that it's nil but then because we've got our meta table which has an event inside of it telling us that if you ever look up in the table and find that um there's no data stored for the index that you're trying to find then we'll just return this number instead because we don't want any problems to arise later on in the script if we rely upon this this variable or this call which we do because it's returning a number and then later on we want to multiply that number by five so obviously right now we haven't created our meta table fully um so if we just ignore this line here it doesn't do anything anyway but if we run the script it's going to throw an error because if we look line 6 attempt to perform arithmetic which is just math multiplication you're trying to multiply uh a nil which is my number and a number so you obviously can't do that you can't multiply a number by nil it's just impossible you have to be able to multiply a number by another one so we need to set up this meta table um to to set up that event to trigger when we try to index the table and the index that we want the data that we want to get from that index isn't there so how do we do that well what i'm going to do is i'm just going to put our meta table um onto a few lines let's give ourselves a couple of lines of space here and now you're probably wondering well how do we create these events do we make them ourselves or is there a predefined list of events which we can choose from and yes there are a predefined list of events which we can use in our meta table provided by roblox and these are called meta methods okay now let's go and find a list of all these events where can we find them well i will show you i'm just gonna go look online and grab them for us okey dokey so we are on the roblox developer website and i've gone on to the meta tables page now we're not going to worry about any of this because we're going through that in the video but the thing we do want to look at is the meta method section and in case this website or this page isn't available in the future here you go so meta methods are the functions that are stored inside a meta table so we've got our meta table here we're going to put our meta methods inside of it and then we're going to um link it to our main table here so this will be the meta table of this okay and any of these events which we put inside of here will only work with this table because we're going to connect them in a few minutes but we've got all of these different um methods here and these are all um you know given to us by roblox and we can't create our own we have to use the ones that we're given but to be honest all the ones that we are given um satisfy the purposes of meta tables and i've never had to um there's never been a meta method that i've needed and it isn't there because really the two main meta methods are index and new index and i hardly ever use any of these other ones i don't think i've ever used some of them so forget about these ones for now let's just look at the first two okay these are probably the ones that you will only use i guess um and the ones you need to know especially before you go on to doing things like object oriented programming in roblox um and we'll get on to that in another video hopefully so you can see that it's um it's a little bit strange the way it's written it's it's it's an underscore there's two underscores and then it's index that's the name of the meta method and then we've got a pair of brackets for our arguments to go in here um so i'm going to show you well i'll just tell you what index does it's basically what we just spoke about so if you try to index a table and there's no data at that index like i've just shown you with my table five there's nothing stored there it's um is going to fire this meta method so this meta method called index is going to be fired when you index a table and there is no data at that index so let's use this method method so we're going to use the method method called index so as it said in the um page you have to have two hyphens and then index and then we've got two parameters here called table and index so underscore underscore and then we write index and then we um put the brackets like this and it's going to be table comma index now because this is a meta method and we want it to fire when something happens we want it to trigger some code so we're actually going to make this function so after the hyphen hyphen index we're going to put equals function okay we're going to have our brackets for the parameters then we're going to drop a line and we're going to make sure that this end is added in so now within this function any code that we write is going to fire and it's going to run whenever uh you try to index the table and for the index that you specified if there is no data there if it's nil then the code within this function will run so just to prove it i can print um no data at this index and if we run the code oh it won't work yet actually because we have not connected our meta table to our table so what we're going to do is um there we go i just wanted to double check that we're still recording um we are going to connect this meta table to my table so that if we ever um you know index our table and there's no data or index we can run through our list of meta methods and um hopefully they will fire so we're going to say set meta table this is how we connect the meta table to the normal table and all that will do is basically tell our meta table um which table we're looking at you know so um these events need to know which table they are looking at so you know they're going to be constantly checking um to see if we have um in this case whenever we try to index a something in my table that isn't there then when we have connected uh or set my meta table to be the meta table of my table then it will be looking out for that that table so if we ever index it and there's nothing there we'll have our meta table our index events to print out no data at this index so we're going to set it and we're going to connect them by going um uh my table you first i think i'm pretty sure my table comes first and then my meta table comes second so let's just double check that run and yes so what's happened is we still had our error and that's fine because we haven't actually returned a default value yet because this index event when it prints because it's um it has fired because it's printed no data at this index so we've obviously tried to index something that isn't there in the table so it's printed out no data with this index as it should but now we want to return a default value um such as one right in case you need to do something later on with what you thought would be a number but in fact is now nil it's still nil because we haven't actually given it we haven't returned a default value yet so if we return uh one what's going to happen is my number is suddenly going to be one and then another number is going to be one times five so it'll be five and that way the script won't cause an error and it won't stop working so if we print out my number and another number and we click run just clear the output you can see it has worked perfectly because we have tried to index my table at the fifth index we've tried to get the data from the fifth object in that table the fifth piece of data but it's not there so what's happened is it's it's gone to check our meta tables our meta methods we've got the index meta method which will fire whenever you try to index something that isn't there so it's fired it's printed out there's no data at this index so we're going to use our full back option uh and if we if our if whatever we tried to find was nil and not there we need a backup option and so that's why we're returning the number one now this is all done by roblox like the returning stuff we don't have to worry about it we know that when we return something such as a number then it's going to go straight back to where we um try to retrieve the data out of the table so in this case because we try to set the variable mynumber to be whatever data is stored at the fifth index in my table it's not there obviously we're going to return one that's going to go back down here and my number is going to be equal to one so then we move on to the next line of code and what usually would have then caused an error because we were trying to multiply nil by five my number is not nil because it's it's one it's our default value um thanks to our meta method which is there looking out for us in case something goes wrong and so my number is one one times five another number is going to be five obviously because one times five is five um and then we print out the two numbers and just to double check you can see we've pretty printed out one and it's printed out the five afterwards it does look like 15 but trust me there is a space in between them so it's printed out one and then five so hopefully you can see um why we use meta tables why they're useful and uh you might think well why do you need to do this you know why would you ever need to use this in a game right um and hopefully we can now go over some examples and actually see where this would be used in a game now i'm going to show you a post from the roblox developer forum from a developer who is actually using meta tables and the index method meta method in their game but before i do that i just need to clarify something so you don't get a little bit confused so the way i've set up my meta methods is i've created a variable for a table and i've put them in here however you can also just take a table like this and put it as the second argument like this in the set meta table so we've got the first argument is always the table which you want to put the meta meta table on which you want the meta table to be uh connected to so my table comes first and then second you just need to provide a table so it could be a variable which is linked to a table like we just did or you can actually just go and put your table within the set meta table and some people prefer that because it's just simpler quicker um et cetera so that's all i needed to show you just in case you got a bit confused but let me show you that now so on the roblox developer forum returned true says i commonly use the index meta method which don't forget is the meta method event which if you try to index uh something in the table that isn't there it might be nil for example then it's going to return something instead so that it doesn't error if we need to use it later on so it's no longer nil so he uses the index meta method for adding a default value to my table if something doesn't exist or to return true etc here's a little example so he's got a table in his game of all of the monsters um that are available right so all of the enemies i guess that could spawn in his game and each one has different levels of damage and health so troll has 10 damage and 100 health whereas the yeti has 20 damage and 150 health so what he's doing at the bottom here is he is um printing out the damage of each monster here so the troll and the yeti and the loch ness monster so for the troll you would look in the monsters table dot troll uh dot damage and it's 10 so it prints out 10 and then you know this this part down here this is just an example right um his an ideal use case instead he's just printing them out as an example here but a real world ingame example could be that this list here is like a inventory and you could buy different um you could buy different monsters right and you could type in the monster that you want to buy and if you typed in troll then it would look up in the table but if you looked up um something that wasn't there such as dragon it's not in the table so you might want to just return a default value or something that was just a made up example right but you can kind of see um where this would be used so what he's then doing on the third line is he is trying to get the damage of the loch ness monster but there is no loch ness monster in his monsters table so that is going to be nil right but he's got a backup option instead because if there is um no such thing as a loch ness monster or no such thing as if i was to try and say monsters and then hamburger or monsters um dragon right something that's not there and then i try to get its damage well firstly there's no such table within this monster table called loch ness monster but we've got this index meta method here and it's just the same thing that i showed you his second parameter is just a blank tape well not a blank table but it's a table that isn't linked to a to a variable but inside of that table he's got a meta method called index and it's the one we've just used and what it does is it returns a default table with 5 damage and 50 health so when he tries to get the loch ness monster then obviously the script looks within the monsters table realizes that there is no such table as loch ness monster and so it just returns a default table and the loch ness monster would then be it would be equal to having 5 damage and 50 health it's basically a fallback option right so i'm i'm pretty sure it's not added to the table it's just given this table so that you can then get its damage or its health right it doesn't then get added into the monsters table it's just that if you were to reference this loch ness monster it would um it would be given this this default table just in case it doesn't exist and just to stop his script from breaking so what's happened is when he goes to get the damage of the loch ness monster or whatever that's not in the table it will return this table so what he's basically said here he has just accessed this table here and so he can get the damage he can get the health etc uh so it's being returned so since it's being returned the loch ness monster um the part that i've highlighted would then be equal to this table it it would be this table um probably a clone of it since it's being returned but when you then say damage dot health you get 5 and 50. so just to finish the video off you can also get a meta table from a table just if you wanted to print it out for example um not really sure why you need to do this but you could also say get meta table and you'd pass in the table which the meta table is assigned to and then if you really wanted to you could print it out but pardon me i've got a bit of a cold at the minute so um yeah if you were to print this out you just get a memory address of a table and um it seems to have the script seems to have broken here maybe it was because i was messing around with it um beforehand but you can see it printed out the memory address anyway of that table oh yes i know why it failed it was because i'd accidentally set our index method method to be new index which is a completely different meta method i'll just quickly explain it to you right now so new index is another meta method event which will fire when you set a you set some data to an index in the table that is currently nil so let me just show you here so if you were to say my table and we were going to set the fifth index which still has no data because one two three four five is unoccupied there is nothing at the fifth index so we could set it to hey and then if we just have an extra parameter for the value that you set it to so that would be hey um you don't need to return anything this time you can print out you just set the um you just set and then we'll say to string just to make sure it's a string index of the table to to string value and that will print whenever you set an index in the table that is currently nil so you if you were to set index 2 to hey this wouldn't fire because it's already set something but in this case index five is nil so when we set it to hey it's going to print out it's going to fire our new index meta method it's going to print out you just set um in well five it will say five but we could say index five of the table to hey so print that out and it says you just set index five of the table to hey and just to prove to you that it is not printing it straight away if we wait five seconds before we set the fifth index to hey to three four five you go you just set index five of the table to hey and you could do it you know with index 1 for example it's not going to do anything because index 1 is currently set to 30. so we go 2 3 4 5 nothing has happened although what it has happened actually because even though let's get rid of this weight even though it hasn't printed out if you were to then print out my table 1 it would print out hey and it wouldn't print out 30 anymore so look i can show you you print out my table one before let's just put a weight here weight one waits i just need to wait one there so when the script first runs um we've obviously set the meta table and the meta method is now listening waiting for us to set our indexes to a new value so at first it's going to print out 30. then we're going to set my table 1 to be hey it won't print out here but then if you print my table 1 again it's going to be hey because we've changed the current value to something else so new index will only fire when you set um an index that is is currently nil so it doesn't have any data currently associated with it that's why they call it a new index because it's a new index if it's not had any data set to it before whereas 30 20 10 and 5 the first four indexes are obviously being used right now so they've got data attached to them so when we go and change them it's not a new index it's just updating it um with a new new value so if we just run the scripts so it's 30 to begin with then you wait one second you set the first index of my table to be hey and then you print it out again and it has changed to hey although it hasn't printed out and again we just change it so we change my table five you print out my table five to begin with it's going to be nil and then after one second you set it again uh you set it the first time actually to be hey and then because it's the first time you're set you're setting it because it was nil beforehand it was it was not um it didn't have any data attached to it it's going to fire off the new index meta method it's going to print out you just set index 5 of the table to hey so you have that extra parameter with new index for the value so the value is the thing that you set at that index in this case it's hey and we're setting it to index five and this is just the table object uh so it would be my table so my table would go here the index would be five the value would be um hey in this case so they are the two main meta methods and we're not going to go over any other ones because these two are the most important and the index one is all you need to know before you go on to objectoriented programming which is what most people want to do and which is the main use of meta tables so the index meta method is the most important one in my opinion so the difference between new index and index just to end the video is that new index will only fire when you set um an index in the table which is currently nil so like the fifth one in the table and there's nothing already stored there then it would fire new index an index is used when you try to access something from the table and it's nil so if i was to then say my table 5 and print that out obviously that is nil because there's nothing currently there so it would return a default value if we chose to you could just print out that it's a nil value you didn't have to return anything from index but if you wanted to make sure it prints out something that isn't nil then you could return a default value such as one as we did earlier in the video so they are the two main important meta methods and i hope you found this video useful if you did please click the like button comment down below if you have any questions or things you want me to cover next and i'll see you in the next video thank you very much for watching