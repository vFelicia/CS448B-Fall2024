okay in this video I'm gonna talk about user input service so it's used for handling user input and user input can be anything it could be when you press a key on the keyboard when you click your mouse when you touch the screen on your mobile device or when you press a key on your Xbox gamepad that is input now because input happens on your computer it's your computer is what your keyboard mouse controller are plugged into it can we can only detect this input on our computers on the client we can't detect it when you press the key on the server using server scripts which is why we have to write this code in our local script and that is stored on the client and it can be stored on the client when it's in a client service such as the starter GUI because it will go into the player GUI which is on your client or the starter pack or start to play your scripts so you can only use user input service on the client because you're getting user inputs now there are two important events which we'll be looking at today input began and input ended and also we'll be looking at user input type and key code and these are enums so an enum is short for enumeration and it is sort of like a list where you can choose an item from a preset list so in this case the user input type for example will tell us what type of input we are receiving so is a keyboard input is a mouse input is a touch import or is it a gamepad input now obviously it's only going to be one of these four so we'll have to choose from a list and the list is the enum so we'll cut onto that a little bit later but firstly input began so input began is an event and it will fire a function when the event is triggered so in this case whenever any input is started so whether you press a key on the keyboard or click the mouse or whatever no matter what the input is this event is going to fire a function and the function has got two arguments input and gain processed events now inputs is all of the data to do with happened so if you clicked the mouse then the input is going to tell us what you've done or if you've pressed akaky it's gonna tell us what he pressed whereas the game processed event tells us whether you've you've clicked a GUI so if you've clicked the mouse but you've also clicked the GUI it will tell us so sometimes for example if you're clicking a GUI you might not want a mouse event to register or if you're pressing a key you might not want it to go to the chat box if you have the chat box open so that is what the game processed event is we'll be looking a little bit more of that later on but what I really want to show you is the input argument because that is the most important so I said that no matter what the input is as long as there is input the input began will fire and I'll show you that right now so if I just print out input began and I open the place if I start if I just clear the output here I think that's a plug in yes so you can see look as soon as I start clicking the mouse you can see that it's printing out input began if I start pressing keys on the keyboard if I start typing really quickly you can see that's going up that number of prints going up very rapidly because I'm pressing lots of keys so no matter no matter what key I'm pressing I can also get my xbox controller out and if I press a key a button on there you can see it's going up as well so input began will fire when any type of input is registered on your computer so what if you only wanted to run some code when you press a certain key a lot of people they want to make things like press e to use or press e to sit down so firstly you have to check if you're pressing the right key and that's where input key code comes in so you can say if input key code and well at first you might want to actually check if you have a keyboard if the input was from a keyboard so you could say and this is what I mean by enum by the way so because obviously we want to choose from a preset list of the input so the input type we could say if inputs dot user input type equals equals enum dot user input type so we type in the name of the property or thing we're looking for and then we do a dots and it will tell us all of the different user input types that we can choose from so we can only choose from this preset list so obviously we want keyboard so if you've pressed the keyboard you pressed a button on your keyboard that's the user input type then we can print you pressed the keyboard okay and if we run this code and I start clicking when it loads click click click click nothing's happening nothing's being printed okay if I started using my xbox controller I press some buttons and nothing's happening but if I start typing you can see it says you press the keyboard so it's only now going to print if the input type is a keyboard and again you can change this to mouse button one if you only want code to run when you press the left mouse button and that will also work perfectly you could do it for mouse button two mouse button three I'm not sure that is maybe that's for certain mice that have other buttons or it might be when you click down on the mouse wheel actually but so what I want to get back to is the key code so this is for I think this is for consoles or keyboards because the key code enum let's have a look if we can get it in and got key code ok so the key code enum has loads of different key codes so if you pressed any key on the keyboard you've got all the alphabetical keys there you've got things like um semicolon scroll lock tab you've also got thumb stick one and thumb stick to thumb stick one is the left thumbstick on an Xbox controller thumb stick 2 is the right one okay so if you wanted to check to see if you press down a certain key you could say if in Hertz dr. Keith code and you can see how user input type and key code they are properties of the input arguments so this input contains loads of data about the the input so obviously so you've got like the int user input type which tells you what type of input it is then the actual key that's been pressed if you're on a keyboard or controller so you could say if input key code equals equals enum dot key code and again an enum is just a preset list of things and we use it just to easily choose something so if I wanted the Q key to be pressed I could say enum dock eco dot Q then prints you pressed Q if we click play then I start pressing the mouse nothing will happen because it's waiting for keyboard I start pressing keys again nothing happens but when we press the Q saying that you've pressed Q and the more times I press it the more time it's going to print so it's still firing the event each time it's just not getting past these if statements if it's the wrong input so you know you could print out inputs again but it still won't print out that you press the Q there we go if I press Q it will so there you go so that's input began and it will run whenever any input is registered on your computer and I've also shown you the key code and user input type enums which just allow you to choose a user input type such as the keyboard the mouse or controller or touch and also you can choose a key code easily now the next thing I want to show you is input ended so if I just get rid of of this user input service dots inputs ended Connect function so input ended this will run the code inside of it when the input stops so when you release a key or when you release the mouse button or when you stop pressing the screen with your touch so very simple play the game and if I click my hold down hold on yeah you can see I click and I let go and it says input ended so if I start typing it's still going to register when I press the keys but it will only register when I take my fingers off the keys so if you press the keys ten times it's still going to print out ten times but it only prints out when you stop pressing it so that's input ended now again you can have the input and game processed event arguments for input ended and you can still print out the key code or check if they're pressing a certain if they were pressing a certain key when it ended so that's you know you can still do that on input ended I just want to now show you about game processed event because a lot of people will be wondering what it isn't what it's used for so basically if you click the mouse or you do any input but your mouse is hovering over a GUI object or you were interacting with the GUI object when you when the input was happening then it would be true but if you weren't then it would be false and let me show you so if I print out on input began I print out the game processed event and I've got a text button here just to show you so if I click the mouse without clicking on the GUI you can see that it is false if I now click on that the GUI is true so because I'm interacting with the GUI objects the game protest event is going to be true now this is useful as I said earlier because you might not want your to you you might not want to fire the code within this input began if the game processed event is true so if you're clicking a GUI you might not want some mouse input or a function that might do something like create an explosion if you were to click you might not want that to happen if you look at GUI because you know your you might be in a shop GUI and because you haven't to click the GUI you don't want those explosions to happen so that's what a game processed event is it will tell you if you interacting with a UI element and the last thing I want to talk about in this tutorial is keyboard enabled touch enabled a gamepad enabled etcetera so what I'm going to do is I'm just going to do a an if statement here so you could say if user input service dot keyboard enabled then print you have a keyboard connected and you can do the same thing for mobile to see if you have a touch touch screen and you can also do the same for gamepad if gamepad enabled then we know that you have a a gamepad connected and you can also check if the user has a mouse connected to the device so Mouse enabled you have our mouse connected so now if we run the game we will be able to see what is connected to my computer so if we scroll up here it has gone purple for some reason it says you have a keyboard connected a gamepad connected and a mouse connected awesome so it's just a way of figuring out what devices somebody is on so you could say if you wanted to show certain things to a mobile player then you can use user input service dot touch enabled keyboard enabled gamepad enabled and mouse and able to work that out now the user input service is also really useful for mobile so there's a lot of events that will fire to do with touching the screen if you have a mobile device so touch started will fire when you place your finger on the screen so startingly touch input but there's also lots of other events that you could check out such as touch tap touch pan touch pinch touch rotate touch swipe etc so and also touch ended so when someone takes their finger off the screen so these are useful when you are making your game work on mobile so let's let's try one else okay so we can see it comes with three parameters touch swipe this this one so the swipe direction will tell us and again this is an enum so because there are only a certain number of ways you can swipe left right up down then you can only choose from these values so that's why enums I use all they just allow you to pick from a predefined list so it will tell us the swipe direction it will tell us the number of fingers that were involved so whether you use two fingers or one finger or whether it was a game processed event so whether you you were interacting with the GUI elements now this is hard to imitate it's hard to swipe when you are in an emulator mode so what I've done is I've set the camera to scriptable so it just gets locked in the same position we can't move the camera and you can see I've set up the event by saying user input service dot touch swipe code on connect function and I've got my three parameters which we just looked at there the swipe direction the number of touches and whether it's again processed events and the arguments they don't need to be named the same thing it's the order that counts so it will print whether you swiped left right up or down and or none at all and I'm using two string to convert it into a string because Direction is a enum value and it's not a string to begin with so it's going to print out the direction so if we if I just try and swipe let's clear the output swipe down down on down on down let's go up again I did say it was quite it's quite hard to do this on mobile there we go you swipe up it's hard to do because I'm just clicking and dragging the mouse this would be better on an actual touchscreen but I can't show you that right now swipe left maybe yeah there we go left and right right left up up down yeah you can see how it works so that is the swipe Terk swipe events and also just one last thing if you are working with xbox controllers and you want them to be able to press a button on there such as the a butter how do you differentiate between the ables and on the keyboard and the actual a button on the Xbox well it's very simple you would just say button either a be l1 l2 l3 r1 r2 r3 so anything with button before it that is the Xbox so we'll say if the input dock egotism dokie code word an A then printout Xbox a I'll see you won't be able to see this but when I press a on my xbox controller then it will print that out and again one last thing it also works for the thumb stick so if you do use the thumb stick on Xbox and start moving it around or you press it down or what doesn't seem to work yeah I know I'll work that will come for a future video then because Xbox input is there's a lot more to Xbox input and things like detecting the position of the thumb stick which is fun stuff as well so I'll leave the video there because it's over 15 minutes already but there is the user input service that's all you need to know as a beginner infant began input ended user input type will tell you whether you're on a keyboard mouse gamepad a touchscreen etc or on mobile etc key code as well will tell you the input type so it's not the input the tight so they so with the press the keyboard button or the mouse button or certain Xbox controller button enums are just a data type which is a set of preset values and you can choose one of them you've also got your mobile events just touch began touch ended touch swipe which you can play play with and also keyboard enabled Mouse enabled a gamepad enabled is a great way of checking what device you are on so thank you for watching I hope you found this video useful if you did please subscribe to my youtube channel arvind blocks for more show it with a friend who may be interested learning about the user input service and I'll catch you in the next advanced scripting tutorial thanks for watching and have a great day