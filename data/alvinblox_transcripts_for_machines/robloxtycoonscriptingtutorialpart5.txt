all right so in the previous video we learned how to get our conveyor working so that we could actually start making money in our Tycoon now we're going to focus on how to save the players data so we're going to want to save their items and their currency so the way we're going to do this is we're going to save the IDS of the items that they have purchased and rather than saving the positions of the items we're just going to save the IDS because in the future we might want to change the way our uh Tycoon is um designed like we want won't want to move things around and if we save the positions then we won't be able to um update them for a player who has got an outdated position in the data file so if we just save the IDS instead then we can move our items around on the template plot and they will just be repositioned when the player rejoins joins so first things first is we're going to need to get a module called profile service uh in order to save data so we are going to go to the top left click on the tool box uh and actually what you're going to do is you're going to go to the link in the description and you're going to take the model called profile service and once you've got that module called profile service uh you're going to want to search for it so I'm just going to search profile service so yeah there'll be a link in the description you just need to go and take the model um click the green button that says buy and then just click on it to insert it now once you've done that you'll see the profile service appear over here we're going to drag it into server script Service uh in fact we're going to put it into our data script just there okay so it's a child of the data script and then in that data script uh we are going to require the module so we're going to say local profile service equals require script wait for child profile service just like that okay and then what we want to do is we just want to add some boilerplate code which is going to um if the player is new to the game we need to give them a a template so a template is just what their data file is going to look like when they first join so local profile template this is going to be a table so we're just going to put in here all of the um possible things that we're going to save so we want to save their cash by default their cash is going to be zero when they join the game and we'll have a table for their items so we're going to be saving the IDS of the items that they own like this okay um but when they first join the game this table is going to be empty so this is just what the data file is going to look like for a brand new player now down here in the player added we are just going to write uh just give me a sec we're firstly going to get their profile so what this means is we're going to get their saved data if there is any so we're going to say local profile equals and then we need to firstly get our store so we need to actually create a a data store or profile store which will store all of the players data uh that play our game so we will just say local profile store equals profile service colon sorry. getet profile store and then inside of here we're going to give it a name we'll just call it player data and then a comma and we're going to assign a template table which is the one we've just created so we will say profile template like this okay so this is going to store the profiles of all of the players that join our game okay and it's got the name player data so so we can now look up a specific players's profile in that store so we can say profile store um do load profile async okay so load this time with a comma uh sorry with a colon load profile async and we want to say uh player uh comma un so underscore and then dot dot player do user ID this is the unique identifier which will identify our player's profile profile is just another name for data file okay it will contain everything that's in this template here for that specific player and we use load profile as sync to get the um profile for this unique player and it's Unique because the player's user ID is unique to them only they have that one user ID so by saying player uncore user ID this is the name of their profile which we are looking up now if they do not have a profile we need to create one because they might be a new player in the game so we say if profile then we will say profile go on add user ID player. user ID we have to do this for gdpr compliance um because we have to associate their user ID to the profile so that if they want to request their data gets wiped we are able to look it up then we say profile codon reconcile and this fills in any missing parts that um are in this profile template that might have been added in the future so if we then added a separate update where there are some things that aren't in that in their current data file but we've added it to the template it will reconcile them and it will basically update their data file to the latest version of the template then we say profile colon listen to release and then we put function inside of here so this is when the uh player leaves the game we want to we want to kick the player um because they might have joined another server so we don't want to have duplicate sessions and what we'll also do is we will um store the profiles for all the players in the game in a table so that we can read them at any time so we'll create a table and call it profiles and then uh we will remove the players's profile when they leave the game so profiles player equals nil so this is for when they leave the game uh and then we can load their profile into that table just below it so we'll say if player is descendant of game. players then uh equals equals true we have to put that because that's what it says in the documentation I don't want to uh i' basically just looking at the documentation here to be honest because I hardly ever have to set up profile service I just copy this code usually but I'm trying to explain how it works um so anyone in the comments that's how it is in the documentation so if the player is in the game do players that means that they're actually in the game um and it's good to go so we can set that set their profile into this table like this uh and then yeah that should be that should be pretty much it um oh otherwise if they're not a descendant of the players then the player has left the game for some reason so we just are going to release their profile which means when you release the profile it means they can they can join another server and we can access that profile in another server um because the great thing about profile service is that it only lets you read and write sorry write to a profile from one server at a time so you can't get any any dupe glitches or or anything and then here we'll just do an else um for some reason if the profile hasn't loaded then we can just say player colon kick okay because if their profile hasn't loaded um then they shouldn't be in the game because there's obviously been some kind of error and we don't want to uh cause any problems so yeah once player joins the game we're just loading their profile here uh and we're reconciling it which just loads all the necessary values uh and that should all be taken care of now what we're going to do is we're going to take this code here and if you just give me a moment to zoom out yeah we're going to take this code and we're just going to cut it we're going to put it in its own little function so we're just going to say local function player added we're going to paste our code in here we're going to put the player as an argument and then we're going to call back function from here so we're just going to call player added from this event uh and we're doing this because uh we want to call this function again when the game starts up because there could be a case where players are in the game um before this script has gotten to this point so we don't want to forget about them um because obviously this code is running takes some time to start up and there is an edge case where sometimes players can be in the game before this script started to run so we're just going to take some code from documentation again and we're going to say outside of this event for underscore comma player in iirs uh game. players get players uh do I mean we can even just say game. players get players we don't need the I pairs really these days do and we're going to say task. spawn player added player and that will just run this function all the players that are currently in the game so no one gets left behind and then finally we're going to say uh game. players. player removing so this is for when players leave the game we want to clear up their data files we're going to say local profile equals profiles player and if profile then oops needs to be lowercase if profile then very simple profile release all right and that should be everything good to go now it's just a case of updating this profile in the profiles player table whenever something happens in the game okay so this is the first part done we've set up like the backbone of our code uh now we just actually need to update the profile when their cash and items change going to show you how to do that in a moment but let's just do a Qui quick recap so firstly we got the profile service this is because we're using an external module to control the saving and loading of data we created a template profile um which will contain all of the values that we're going to save we've basically given a name and a value a default value of zero for the cach and an empty table for the items so this means when a new player joins the game this table is going to be their data file so they're going to have no cache to start with and no items if you wanted player to have you know 100 cash when they join you'd set the profile template and then as a new player they would get that exact table now if we added a future update where we added something to the profile template perhaps we wanted to add pets then that would be fine we just update the table and then whenever a new player joined sorry or an existing player joined if they didn't have this pets table in their data file it would get added to it okay so it wouldn't give them a brand new file it would just add anything that that has since been added to the profile template to their data file so they'll keep their cach they'll keep their items they'll just get an empty pets table that is called reconciling so now we've got our profile store and this is basically the unique collection of profiles for this game uh we've given it a name player data and we've told to get the uh Prof we've told the game that basically any profile in this particular store will have this template so um then we've created this table called profiles that's going to store all of the active profiles of players in the game so when a player joins the game we are going to load their specific profile based on their user ID we've basically attached it to this player underscore just to give it a little bit of meaning uh and then if a profile does exist which it should because if they haven't got any data it will just return the profile template we're associating their user ID to the profile so that we can look it up if they ever need to wipe their data we're reconciling the table to the profile template in case anything has changed we're list we're creating an event so that when the profile gets released um for example if they leave the game we remove it from this active table and then we kick the player from the game and then once we're sure that the player has joined and their character or player object has loaded we add it to this table um now this is a little bit um um this is a little bit over the top uh not going to lie but that's because we've just taken it straight from the documentation um like usually I would skip a few things like this uh but I'm just trying to show you it from the documentation trying to give you an example um so you shouldn't worry too much about this uh but yeah the main thing to to to see is that we've got this big table called profiles going to contain the data files of all players in the game and we've we've set it as a very able here because then we can just easily um look it up and add stuff to players data and then whatever we change in this profiles table will just repeatedly get saved to their data store so we just change the profile in this table and we should be good to go so let me show you how to save some data first thing we want to save is obviously the cash so the cash value we want to change this when we're loading the cache we're going to say uh we first want to get their profile so local profile equals profiles player all right so once we've got that profile want to make sure it actually exists so if not profile then warn no profile return end because by now the profile should have been set up if it doesn't exist something has gone wrong we don't want to go any further so we're going to return and just kill the script at this point now if the profile does exist we want to set the cach value to profile. dat. cach or zero so if their profile exists we're just going to set their cache value to whatever's in the data file if for some reason there is no cash value in the in the profile then we just set it to zero and whenever you want to get a value from the profile we have to say profile. dat not profile. cach it's got to be profile. dat docash so now that's done um we just need to uh save it so how do we save players cache to the data file well easiest way to do it is when this value changes so cache Cur on get property changed signal value Cur on connect function we can just say uh so so this will fire whenever the value of cash changes so we can say profile. data. cach equals cach value like that and this should save our data and it should load it as well because we've just sorted out the loading and we've sorted out the saving um because we've set the value here last thing you need to do is you need to go to the top left go to the Home tab click on game settings go to security allow Studio access to API Services make sure that is green click on Save back to the top left click on play and let's have a look and see if we've got any errors so we have an error on line 16 attempt to index nil with user ID let's have a look line 16 attempt to index nil with user ID um so obviously player is nil because we're trying to index that so we may have forgotten to pass the player to this function which we have so on Line 39 here we're going to pass player to to our player added so we're going to click on play again and we're going to go back no errors this time so I'm going to go to the um going to go up here to the client and change it to server I'm going to go and change the cache in the Explorer and to change that to 500 then we're going to go back to client mode we'll open up the output you see that we now have 500 cach I've just updated that going to leave the game and now I'm going to show you if you don't if I'm just going to show you with a plugin I've got this plugin called uh data store editor it's really good if you're dealing with data Stores um let me just zoom to the correct Place apologies yeah data store editor so this plugin lets you look up a data store to see what data is stored in it so our data store is called let's just have a look here uh player data okay so if we use the name player data and click connect and then we insert our key and we wrote that as being player uncore and then the user ID so my user id you'll see we have our profile so this is our profile and then in the data part of it because we always have to say player. data you'll see that it has saved my cach as 500 and we have our items a so we know that my data was saved we just now want to see if it loads so let's click on the play button again and we'll see what happens so we should see that my data of 500 cach gets loaded there we go so we've now been able to save and load the cache last thing we need to do is save the items so every time a player steps on a button we just want to add the ID of the item they've unlocked to their whoops to their items table so to do that we are going to go to our plot Handler okay and in the plot Handler we're going to go to where our touch event is and we want to make sure that we've gotten to the point where we know the player can afford and unlock the item that is here uh we are going to fire an event so we're going to want to um create a let me just think what's the better way to do this yeah so what we're going to do is in the Explorer of our data script we're going to insert a bindable event okay and we're going to name this event item unlocked and then in the code here if I just zoom out we're going to say game do server script service do data do item unlocked fire and we're going to pass the player and we're also going to pass the item ID so we want to take the item to unlock ID and yeah so this is just going to fire this event and then in the data script we're going to say outside of uh these functions uh yeah we'll do it we'll do it just in between these two why not uh in fact we'll do it right at the very bottom script. data so script uh wait for child data sorry what am I saying script wait for child item unlocked do event colon connect function player Item ID and then we're going to say um local profile equals profiles layer and then we're going to say table. insert profile. dat. items uh item id okay and this will add the item ID to the items table so what we can now do is we can uh when the player rejoins the game we want to load these items that are already unlocked because they will be getting a template plot which doesn't have any template items in it anymore because we remove the template items from the template plot um when the player joins the game well we don't remove them we just don't load them at all um because they they get a separate items folder but what we want to do is we want to load any items that they've already unlocked back onto the plot so let's create another bindable event inside the plot Handler findable events we're just going to call this load items now back in our plot Handler script we're going to create a event for this so script wait for child load items do event connect function player item IDs table and we are going to cycle through the these item IDs firstly we're going to get the players um plot so local plot uh we need to get the players's plot I'm just thinking of the best way to do that let's create a function local function get plot player and then we will say for underscore plot in plots get children do if plot get attribute owner uh in fact we'll make this a variable local owner equals plot get attribute owner if uh if not owner then continue end if owner is not equal to um uh player uh player. user ID then continue end and then we will say return plot so this function we will give it a player and it will return us the plot so we no longer have to keep saying uh you know cycle through all the plots whatever we can just use this one function so local player so local plot equals get plot player and then or underscore Item ID in item ID's table do we're going to want to scroll down to the uh part here where we we are loading the template items and I'm just going to copy this line from 82 it might be different on your end the lines but from here where we're cloning the item uh and in fact what we'll do is we will just cycle through the template plot so we will say uh local item equals template plot in fact let's just have a look here so we're going to create I think another function to get item get item from template plot Item ID so if we then uh just cycle through for underscore item in template plot. items get children do if item uh get attribute I believe we called it idid yep ID equals item id then return item so local item equals get item from template plot item id if not item then continue end but we want to make a clone of this and we're just going to go back to our code down here and we're going to copy this part about the C frame and the relative item C frame and this part as well I'm just going to copy that I'm going to paste it here and this will obviously check to see if it's a model or a part we mentioned in the last video about the differences there and this should position it on the plot perfectly we then just need to say item item clone. parent equals plot Dot items okay and that should be that I think should be all good let's now just go and call our load items event from the other script so when a player joins the game we have loaded their profile we then want to say um let's look so I'm just thinking here I'm just thinking when's the best time to do this because we obviously want to make sure they've been allocated a plot and we also want to make sure that their data has loaded all right I'm going to be honest I'm not very happy with this code um because I don't like how we've got two player added events here um so what I'm going to do is I'm going to change this slightly so what we're going to do do is we're going to get in our data script um we are going to um we're going to call another event so I'm going to create another event and I'm going to put it into the plot Handler and I'm going to call this create plot and I'm going to call um game. server script service Dot Plot Handler wait for child sorry plot Handler wait for child create plot fire player so from this script when the player's data is loaded I'm going to fire this call it create plot and I'm going to send the profile. dat. items with it okay and then in the plot Handler we're going to change this player added to script wait for child create plot create plot do event connect function player already owned items and that should be good so this is now only going to give the player the plot when their data has been loaded because otherwise we would have had these two player added events firing at the same time and we would have had a scenario where perhaps the plot hasn't loaded before the data or the or um the plot has loaded but the data hasn't so it would have been a mess but now this will go in the order that the data is loaded and then the plot gets loaded and this also gives us an easy way to pass the items they already have unlocked to the create plot function so we can instead of then saying load items do event connect function blah blah blah we're going to change this to just be a normal function so we'll say local function load items player uh item IDs table in fact we'll just change the already owned items to item ID's table for consistency as well and then we can just say um where is it where is it where is it when we get to this part uh we can say load items player item IDs table and finally what we want to do is we want to we we don't want to load any buttons for the items that have been been loaded so simple way to fix this is the buttons will have the ID of item to unlock property so we can say if table. find button get attribute ID of item to unlock so sorry the first argument is going to be the item ID's table if it finds the ID of the button in this table then we just want to continue continue end and we'll put this right at the top here so it won't load a button if the ID of that item to unlock of that button is in the already owned item IDs table all right um that was a lot process let's just have a look through everything so we no longer need our um load items we can delete that we can delete that event um and everything else looks good to go yeah let's give this a go here goes nothing so click on play all right we have an error on the plot Handler line 49 this will just be that we've forgotten a closing bracket hopefully line 49 uh yep oh we converted it from an event to a function so we no longer needed that closing bracket click on play again all right looks good so far let's just uh head on over to our plot and we have the default plot for now because we haven't unlocked anything yet we have our 500 cach let's purchase the starter item now let's leave the game and let's see if the ID of this item was added to our data store I'm going to use the data store editor so we type in the name of our data store player data and then player underscore and my user ID in the data table we now have an item with the ID of one added to our table so the saving has worked let's click on the play button again and let's see if this item gets loaded oh yeah look at that there it is um so you'll see there is no button but the item is indeed there um which is really good news really good uh so yeah I think it all seems to be working the uh the value has saved as well of our cash it's no longer 500 it was It was obviously reduced to 450 but uh this is all positive so uh it looks like we can unlock the conveyor and we can also unlock the dropper again I'm just going to leave the game and I'm going to rejoin by the way if you want a really quick way to go over to your plot you can uh press uh the arrow here and click on play here and it will spawn you wherever your camera is and just like that our Tycoon has saved and loaded now data saving is always a very tough thing to add uh you might get some errors you might get some issues it might not be working for you uh it is a difficult to debug so if you do have any problems then I do recommend getting the data store editor plugin uh I'll leave a link in the description it's just a great way to see what data was saved if you notice your data wasn't saving then it's obviously a problem with the saving if it's not loading however it is being saved you know it's a problem with the loading so uh all the best um if you do get issues try to work through them data sa saving is very hard to add to your games uh it does take a lot of practice however if you've gotten this far in the video uh I do commend you so well done and I'll catch you in the next one