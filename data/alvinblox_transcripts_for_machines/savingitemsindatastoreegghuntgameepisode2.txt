hey everyone welcome to episode 2 in my how to make an egg hunt series hope you're having a great Easter if you are celebrating and today we are going to be looking at data stores so how do we save the eggs which a player has gotten so you may be wondering how this will work and as many of you might not have even doing any data store work before but the way datastore works is it's pretty simple all we do is we tell the script we give a key for each player they have their own key which uniquely identifies their data which will be stored in the data store service and then we can write data to that key or get the data from that key so we can use get a sync to grab the data from the data store and set a sync to set the data store now you can't just save objects to a data store because it's not allowed to do that you can't just save an egg so the way we're going to do it is we're going to have a folder in the player which gets generated when they join the game and then whenever they step on an egg we are going to insert a string value into that folder with the name of the egg okay so after steps on the rainbow egg and you can see a string well it doesn't have to be a string value or it just has to be a value it could be any object really just as long as it's got like a a thing with its name in there so I've gone for a ball value as long as it's named whatever the egg is called we've basically got a store a temporary store of all of the eggs that you've caught currently in the game so when you catch a new egg it will add those values in there and then what we can do is when we leave the game we can loop through this egg folder and then what we can do is we can insert into a table the names of all of these values here all of these value objects so we could insert edit egg of Doge mystery egg and rainbow egg into our table and you allowed to save tables so what we're doing is we're saving a table of all of the eggs that we found so far okay and we're going to be inserting into this table when we find an egg so we'll be able to keep track of how many eggs we've got in the game which will be useful in the next part of the video series when we will be making a collection GUI like an inventory GUI but also it helps us because then we can just save the names of those eggs in that folder to the data store and then when we rejoin the game we can just get them from our data store and then insert them back into that inventory okay so let's go ahead and get started and don't forget if you are enjoying the series so far then why not show your support by liking the video subscribing if you haven't already you can also become a channel member by flicking the join button next to the subscribe button to get some cool perks and also to be able to download all of the source code and GUIs okay so let's get going I'm gonna insert another scripts into the service script service I'm going to call this script data or there you can call it whatever you like now once we've done this I'm gonna create a player added event listener and what that's gonna do is gonna fire some code when a player joins the game so game dot sorry go back in here game dot players dot play added code on connect function and then in these brackets we're gonna have the argument so the player that will join the game okay so this player object here this this player here that's going to be the player who joins the game so whatever we do to this player this will be their player objects will be done to any player who joins the game so firstly don't want to have that we want to insert a folder into their player we want to insert that eggs folder now here's what its gonna look like so I'm just gonna change that player here we go so firstly we are instancing a folder so we're inserting a fault we're inserting a folder and we've tied it to a variable called X folder so we can easily reference it we've then set its name to eggs and we're parenting it inside the players object so that that folder that I just showed you gets created whenever you join the game next what we need to do is we need to check to see if you've got any eggs saved currently because if you have then we're going to have to load them into that folder so we're gonna use datastore so let's insert well firstly let's get the data store service so local data store service and that is going to be game get service data store service ok I'm just speeding things up a little bit so that we can get this tutorial done a little bit faster because that's what we all want next thing we want to do is we want to actually get our data store we've got the service but we need to actually create our data store for this place so we can say local data store equals data store service get data store and inside these brackets inside speech marks you're going to have to give your data store for this place a name so I'm gonna call it egg hunt again you can call it whatever you'd like as long as it's you know it's good idea to have it submit something similar to what the game is about so you actually can easily understand it and and if anyone else looks at it don't know what the data store is for and it's just for this place so now that we've done that I'm gonna quit variable for replicated storage because we're probably gonna be using that quite often because our eggs folder is in there so a local replicated storage equals game got and get service replicated storage awesome we're ready to go now what we need to do first is we need to create a variable and that variable is gonna be our data now we're not going to set it to anything yet but we're just having it here so that if there is any data that we find we can set that variable to be the data if there is any found next what we need to do is we need to actually get the data from the data store so we're gonna say later I'm going to set that beta to be datastore gets async so this is going to the datastore in the cloud on a server somewhere owned by roblox and we're gonna ask it if it's got any data for our particular player but we need to give it that key that thing that uniquely identifies the player so we're gonna say egg data that's gonna be my key and the key could be anything as long as it was uniquely identifies the player the egg data part just tells us that it's the key for their collected eggs so if you wanted to call it collected eggs you could do so so I'm just going to call it egg data and I'm gonna do a you can do you have to do a I'm just doing it to separate the player ID which next from the egg data so it's easier to read and then we're going to concatenate it with a player's ID because the player's ID is unique and only you are going to have your unique ID so every player's gonna have to a different user ID so you can say dot player dot user ID and the dot dot just concatenate it with this string so now we've got a unique reference for our key so for example my key might be egg data one four nine four 306 nine because that is my roblox ID now nobody else is going to have that key because I am the only person on roblox to have the ID one four nine four 306 nine and if you don't know you use user ID if you go to your roblox profile it'll appear in the URL okay it's that string of numbers right there next what we need to do is we need to put this in a pea cool because data stores might go down or they might fail and when they fail they'll cause an error in the script and when we get an error it will stop the entire script which means nobody's data will get saved or loaded from then on and we don't want that if there's one error with one player we don't wanna break the whole script for everybody else so what we can do is use a pea call and a pea call will catch an error if there is one so if there's an error it won't break the entire script it will keep it running but it will just it will catch that's error before it breaks the rest of the scripts and stops it from running so it contains it within that peak or so local and then we're gonna have two variables success and there an error message so if everything went well success is going to be true and there's not going to be an error message so this will be nil but if there wasn't if it wasn't a success and something went wrong so there was an error success would be false but error message would have the error typed is variable so it's a good way of tracking any errors without breaking the script so equals P cool and then brackets when it's a function another pair of brackets here and then we're going to indent this data line and add an end with a closing bracket like this so this is our P cool so now what we want to do is we want to check this if it was if it was a success so if success then that just means if success was true and everything went well then we know that the data store request was successful we managed to Paul roblox's data tour servers and it's either sent us back some data or there was no data stored from the player there might be a new player to the game so if success and data so if data is not nil and if there is actually some value associated with this variable which there currently isn't but we're updating it here now when we have got the data there should be some data then what we're going to do is when I loop through the data because the data that we get is gonna be a table we're gonna save it later on to be a table like this so we're gonna have egg named comma egg name okay so we're gonna have all the egg names in this table are strings separated by commas so what I'm gonna do is going to loop through them using a for loop so we're gonna say for underscore cuz we're not using the index variable there's no need for it for underscore egg name in pairs and then we're gonna loop through the data which is gonna be a table then L so you do and then we're gonna say an end down here to close that for loop now for every single egg in the table we're gonna loop through it and so whatever we do in this for loop is going to it's gonna happen for each item in the table so for the every egg name we need to firstly check if it is natural egg in replicate storage in that folder in replicated storage called eggs because it is a real egg there will be an Associated egg model or parts in there so if replicated storage dot eggs yeah kind of find first child egg name then we know there is a real egg okay and maybe if the data store got corrupted or someone tried to explore it and put a name of an egg that wasn't actually in there or something or we accidentally deleted the egg out the folder you know we're just doing this if statement to check for any potential errors that may arise what we can do is we can then insert that value into their eggs folder because remember I said earlier that when you get an egg is going to insert that value into your player we need to then save all the names of those values so basically all the eggs you have in the datastore but then when we read you in the game you're gonna have to reinsert that folder it's gonna be empty so you have to loop through all the eggs I've been saved in the latest we then need to insert the value for each one again so we can see all of the eggs that you currently have in your player so local egg value equals incidence new and I'm choosing a ball value you could do a string value or anything else you can even do a model or another folder but I'm doing a ball value because it's just you know simple and we usually do use ball values or string values when we're doing the sort of stuff so egg value dot name equals egg name okay pretty simple we're just setting the values name to whatever the egg is that was in that datastore table and then we're going to put the egg value inside of that eggs folder so egg value dot parent equals x folder all right brilliant so we've just now set it up so that if there is data stored in your data store then it's going to loop through all of that data and it's going to insert a value for every egg that's inside this table now we haven't actually made the saving work yet but what we can do is I'm just gonna do a test on my end to see if the loading is working because I'm going to insert some dummy data into my data store from a plugin which allows me to edit it okay so I'm gonna go into the data store editor by a crazy man 32 or you can get this plugin if you like I'll leave it in the description but it's not essential it's just a way to test if they're working and to debug them so the datastore name is gonna be egg hunt because that's what I put up here in the datastore name and then I'm gonna click connect don't worry about the scope or whoops I need to go to home game settings options and allow HTTP request and enable studio access to API services try again okay now I need to put the players key unique identifier for a player and that's gonna be egg egg data that was the name of the key and then my user ID 149 4306 9 ok no data excellent so there is no data because they haven't written to the datastore yet but when we save data we should be able to go into this plugin and see the data that we've saved ok so we'll leave this open for now with our date with our key in there and now we're gonna script the we're gonna script the saving of data so hopefully we can check it out in this editor and see it back in so this next part is gonna be pretty easy we've got over the hard part now so we're on the home straight so we're gonna do game dot players dot play out removing so this is the same as player added but it's just a little bit different in that the event is going to run it's gonna be triggered when a player leaves the game okay not when they join it but when I play out leaves so we're gonna do player removing curl on connects function layer okay so now what we need to do is we need to get all of the eggs inside of their folder that X folder that we created and then we need to put them in a table to save it to dig to the data store because we're taking the data we're getting it in table form so we need to save it in table form so let's create an egg table local exhale rule and which one do a blank table for now now we need to loop through all of those egg values in there player eggs folder so I'm gonna say four underscore again it's not using the index value have no need for that so you can just make it if you're not using it for underscore comma egg in pairs and then we're gonna be looping through player dots eggs get children okay so all of the things inside that eggs folder which is gonna be their values and this isn't the eggs folder in replicated storage or in you know workspace it's actually going to be in their player object because we create it at the start so for everything inside of this folder we're gonna insert it into the table so for each egg we're gonna insert into the X table the egg name so egg dot name we're gonna insert that into the X table okay brilliant and then just for some extra peace of mind it actually has been inserted you could print out f dot name okay and that will just print out if it's been inserted next thing we need to set a sink so we need to send the data to roblox's datasource and we need to tell it that we want to save this table to our players key so to do that we're going to say datastore curl onset async and then inside of here we firstly need to give the key so the same key that we've done up here to uniquely identify a player and the data store so egg data and then we'll do dot I user ID so it has to be the exact same as you've done up here in the guess async they can't be different okay and a lot of people are saying well why do you have to have this string here at the start with yeah actually okay so if you have multiple data stores so let's say you had a datastore for your coins or your cash and then your eggs that you've got okay if you just used player don't user ID then you'd have the same key for two different data stores so eventually it would overwrite so if you were writing your cash to the datastore with user ID and then you wrote your egg data you write the egg data with the same key without a string or anything you'd be overwriting the caf so you need different keys and you do that by having a string before it with the name of the thing that you're saving and that way you have two separate keys and it also just keeps it easy to understand what you're saving so now that we've written out the key we need to do a comma and we need to write the actual thing that you want to save to this datastore so I'm gonna save the X table okay so second thing is the thing you're gonna save and that's gonna be the X table and by now it will be full of eggs okay because we've loosed we've used this for loop to loop through all of the eggs in your players folder and then we're using tabled or insert which will insert the eggs name into the table and then by when it comes to get async then we will be able to get that table from the datastore which was safe the last time you left and it will be full of strings of eggs names and then what we can do is we can loop through that data which we got from the datastore we can check if it is actually in the eggs folder and if it is then we can insert that egg value back into your back into your door back into your folder okay so what we now need to do is we need to do another peek or in case the set async goes wrong so same thing again local success common error message equals P call function and if there are any errors that arise during the saving maybe data stores go down because they do do they do go down if you've ever had you've ever gone into a roblox game and your data's been lost or corrupted that's probably because they still went down or there's a problem so that's why Pecos are so importantly it doesn't break your script so we can then say if success then Prince saved elfs Prince error message because the else statement will only run if success is false and when success is false then obviously there will be an error message so you can print it out okay so now let's go ahead and test it out now again I'm just gonna tell you that in order for this to work in roblox to do you firstly need to publish the place then you need to go to game settings options and make sure that enable studio access to API services is turned on okay now you can also test it in a roblox game if it's not working for you if it isn't working for you it is kind of hard to debug data stores but don't be you know don't be down if it doesn't work okay because data stores are the hardest things to debug because you don't get much error data from them but just keep trying okay and make sure you followed the tutorial to a tee so let's head into the game now we're going to have to collect some eggs obviously you can see that the eggs folder has been added into my player which is a good start and we need to go and pick up an egg and let's firstly see if it gets added into our folder let's see I don't think we scripted that actually ok we can script that actually that was my that was my bad and we actually need to script in the egg spawns to insert it into your folder when you actually pick up an egg because we're only inserting into your folder right now when we're loading the save data but you can't have any save data if you can't pick up any eggs to begin with so what we're going to do is inside this egg clone dot touched event here if player then we can do is just after this found egg fire clients that's right if player find first child eggs so if they have that egg folder inside their player then we're gonna do we're gonna check to see if it isn't already there so if if the if there is a value for that egg already there then we know that there they've touched an egg cause I've already picked up so we don't want to have loads of loads and loads and loads and loads are the same values for the same egg so we only want one egg one value pack so we need to check if it's not already there so if not player got eggs come on find first child egg clone got name then and then it have an end here so now if we get inside this if statement we know that's the egg in already in the player okay because we've used to not and not it's like the inverse so if the egg is not in the player eggs folder already then we can add it okay so we can say local egg value for instance don't new and I'm doing a bull value again just to keep it consistent with the other script which inserts bull values egg value dot name equals egg clone dot name an egg value dot parent equals player's eggs and again don't worry about it being a bull value it could be any type of value just as long as it's an object that we can give a name to because we're not worrying about value property whether it's a bull value string value number value in value etc we don't care as long as we just have an object which we can give a name and then we can read that name from the data store script okay so let's head over and pick up one of these eggs let's open up the ex folder now watch it carefully see if an arrow appears which will mean there's something inside of it when step from the egg okay brilliant it did we found the rainbow egg and now you can see inside the eggs folder we have that rainbow egg a value now what we should expect to see now is when we leave the game the script is going to loop through everything in this X folder and it's gonna add it to a table so you should have a table with that rainbow egg inside of it when we leave the game and that should be saved to our datastore now let's see what happened okay we left the game and it printed out rainbow egg now one thing we're also going to do is because if you're the last player in the game then what could happen is that the when you leave the game the server could immediately shut down and it could shut down before this datastore code is finished now in the case of studio testing this could happen because you're going to be the only player in the game so when you leave the game when you take a stop with them it could happen that the the game the play solo just shuts down before your datastore code is finished so what we're gonna do is we're going to prolong the server from well when the server does shutdown we're going to keep it running and make sure that everyone's data is saved before it shuts down and you can do this by something called bind to close let me show you what this is about so if you say game Columbine to close then you have open brackets and you can put a function in here just like you do an event like this then inside of here what what happen is when the server is about to shut down it won't shut down until code inside of here is executed okay so until so the server will own shut down when we finished and inside of here I've done another I've done for loop for all players in the game and then wife done is I've copied the code from this player removing just into this for loop so every player in the game is gonna have their data saved that is current in the game so if you're the last player in the game then it's going to save your data for you even though you let you've left the server is still open so it's going to be able to do this for you okay so it's just saving your data if you have left the game when the server is shutting down only for the last person and that will make sure that your data to just get saved because sometimes you can leave the game and you're you've done everything correctly in your data store but it's still not saving and it's probably because you're the last person in the game and the server has shut down before your data store code is executed so this code it will create another X table folder and for every single egg in your player 2 X folder it will insert that egg and then it will set it to your datastore and if it was a success it will then print that it's saved on find 2 clothes for you ok I'm going to close BTC so now I'm gonna do is I'm going to in fact I'm going to just change the name of my data store here because I have them some testing before I've showed you this and I've currently got some data in my key so we're using a brand new data store called aircon to when you change the name of this it will just basically everyone who joins the game will have brandnew data because it's a different data store if you were to change it about as egg hunt then it would have the data that I've just saved but let's try again then let's go into the game and again players having blocks and the eggs folder is currently empty so I'm gonna go in here I'm gonna go pick up an egg this one here have a rainbow egg and step on it okay great you found the rainbow egg and it's gone into our folder here if I try and step on it again okay it still says you found the rainbow egg but it hasn't inserted another egg into the folder because we did that check with the if statement earlier so that's good now let's leave the game it should loop through our X folder and insert that rainbow egg into the table and it has because it's printed that rainbow egg and now I've just redoing the game and there we go I've got my rainbow egg still in here so it's managed to save my data we leave the game again okay it's it's saved and now we head back in and eggs rainbow egg it's still in there okay and just to show you if I head in here and I insert a string or anything more value it isn't math water is I'm just going to call it test 1 2 3 and we stopped the game I've done that on the client as well you can see it printed out test 1 2 3 and we joined the game again and we're going to eggs oh it's not there you know why because test 1 2 3 isn't an actual egg in the X folder so what it's doing is its tested that and because it's not an actual like it didn't add it into our folder so there we go that's a working datastore scripts now if it isn't working for you test it in a roblox game okay you can see here it saved it on buying too close so sometimes in studio it might not work and I'm not sure why that happens but hopefully the binder clothes just fix that but I think it should work perfectly in a proper roblox game so that it's gonna be the end for today's part egg egg hunt part 2 if you would like to get the code you can become a channel member a premium channel member for 4 dollars 99 a month help support the channel as well you can click the join button underneath the video both subscribe button or and make sure that you like the video as well and subscribe if you haven't already now hopefully in the next part if I manage to get around to doing that hopefully it'll be soon then we'll be learning how to make an inventory UI where it shows you the eggs that you currently got so make sure you subscribe for that and I'll see you in the next video thank you for watching and I'll see you next time davin blocks dying off Cheers