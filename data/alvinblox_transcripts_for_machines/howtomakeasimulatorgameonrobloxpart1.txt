in this video I'm gonna be showing you how to create your own simulator game on roblox so that you can get bigger and a rebirth when you hit a certain amount of strength let's go ahead and get started so welcome back to another tutorial my name is Alvin blocks if it's your first time on my channel make sure that you subscribe and you clicked on the notification mail so you never miss out when I upload a brand new video so we're gonna making a simple simulator game in this tutorial you'll be able to have a wait tool and obviously when you click the tool you will gain strength and once you hit a certain number of strengths you'll be able to rebirth and so all your stats will be reset but you gain one rebirth and you'll be able to gain more strength over time so let's begin by firstly making our work area look nice I'm gonna just set my base plate to a green color and to a grass texture and also gonna get rid of the studs on the top surface just like this there we go we've got a bright green base plates and I'm going to also make the sky look nice as well you don't have to do this I just like to do it because it makes the the game that we're working in look really nice so I'm gonna insert a sunless blue sky box into the lighting and we can get started with the simulator so what we're going to do first is design our tool now what I'm gonna do is I'm going to go on starter pack click on the plus and add a tool then I'm gonna name this tool wait the next thing that you're gonna want to do is design your tool what I'm gonna do I'm gonna insert a part into the workspace here and this part is going to be a simple little tool which which will be the thing which we lift okay so what I'm going to do is I'm just going to make it yellow and if you want to you can make this look much nicer but you need to make sure that you call it handle now I'm gonna make sure that it's unanchored and that can collide is set to false on the tool so that it doesn't collide with anything if it touches something so we're going to take this handle and I'm going to place it inside of the weight tool and if you go ahead and play the game you should see that we have a tool in our inventory and if we open it up you can see that we are holding a weight if you want to learn how to customize the tool keep watching and we'll get onto that later on in the video so next thing that we're going to do is we're going to start coding the the actual tool so first things that we're going to do is we're going to insert a local script into here and we're also going to need a module script for later on so I'm just going to insert those now so that we don't have to do those later on so first thing that we're going to do is we're going to work on our local script so what we're going to do is we're going to create a function which will run when we click the mouse so we're gonna do some variables first we're just gonna get our module script by saying local module equals a require and then in the brackets we can say script dot to parent dr. module script or wait for child module scripts just to make sure that it's fully loaded ready for us to call to we're then going to want to make sure we have the the closing bracket so you have two closing brackets on that line well then gonna have a variable for the player who's who's well these scripts are executing so they're local player will be game dot players dot local player and we're also going to get the players mouth because we're gonna need that for when they actually click the screen so we can say local mouse equals player current get mouse and we can also use the mouse for some onscreen effect when they click the mouse as well so to know when the player has clicked the mouse what we need to do is do an activated event so we can say script dot karent's dot activate it colon connects function in brackets and then another pair of brackets and then drop a line like this so this event will run whenever what this function will run whenever the player clicks their mouse so what we're going to do is we're going to create a function in our module script which will control all the flee be lifting and then we can call that module when we want to lift the weight so over here what we're going to do is we're going to drop a line and say a local replicated storage equals game codon get service a replicated storage just like this now in the replicated storage what we're going to do is we're going to store our remote events and when we play a click so we're going to fire and event to give them some more strength so that it is able to comply with those from enabled so that your game does not break and it is protected from exploiters so what we're going to do is want to create a function and this function will run when we click the mouse so we can just say function and then give it a name module dot lift okay and then drop a line and you should have this end added in here which shows that it is a function and any cut any code inside of this function will run when we call module dot lifts in the local script so we can just fire off our events but we need to actually create the event first so let's create a folder in replicated storage and we'll call this folder remotes because our remote events and functions are going to go in there and we're going to create a remote event called lift now if you don't know what a remote event is I'm just gonna quickly explain it so a roblox game works like this you have all of the players in the game which are called clients they're all connected to one big computer owned by roblox called the server and all the scripts on this server helped to control the game and what's happening at the moment and so what happens is when somebody moves their character the server will see this change and it will update everybody else's a game all of the clients to show that the the other that the player that moved so that their character gets moved so the server just controls all of the players in the game and what we do is if we ran code on the client then somebody could exploit that for their own good so if we handle all of the strength giving on the clients and we gave all of the strength in this local script then somebody could easily exploit that and give themselves in 999 infinite cache or strength so we do all of the checks on the server and we give the strength on the server because and no clients can actually see server scripts and they can't edit them so that the game cannot be exploited so that's why we're using remote events because it is a way to communicate between the client and the server but if you don't understand this I don't worry too much because especially for a beginner because I do have lots of more videos on filtering enabled on my channel so make sure you go ahead and check those out so inside of this activated events what we can do is we can cool our module IFFT by saying module which is our variable up here and then we can say dot lyft and that will basically call that function in the module okay so now that we've done that what we can do is we can go back to the module script and we can actually fire our remote events okay so to do this all we need to do let's give it a name first we're gonna call this one lift so we're gonna fire it by saying replicated storage come wait for child remotes and part we don't need to wait for it because this is going to be called when replicated storage has been what when the it's good the player is going to click their mouse so we don't actually need to wait for it because the game isn't starting up so we can say replicated storage dot remotes dot lift occurred on a fire server and this is going to send a request to this remote event and then we will pick it up in a server script and then we will give the player some strength when they when that request is received so we'll go ahead and make a script in service script service now and this is going to handle all of the remotes as we've said so let's go ahead and create a variable for replicated storage because that's where the remote events are located so we can say local replicated storage equals game current get service replicated storage what we can do now is we can get the what what what to do is we want to have some data okay what are some data about the players currently in the game and what this data is going to do is it's going to create debounce so that the player cannot spam click so we're gonna have a filter which prevents the player from spam clicking to get strength so what we're going to do is we're going to say local remote data equals game come on get service server storage and then we're gonna say come on wait for child remote data and what we're going to do is just instead of storage here we're going to create a folder and we're going to call it remote a data so we're storing the debounce in server storage so that if they click the button again and we receive another request we can check that the debounce value which we're going to put in this folder and if it's true then we know that they have already clicked the button in the last second or so but if it's false we know that they haven't clicked the button and the cooldown which we're going to make has that's been completed so that they're able to click the button again so debounce basically works by preventing a user from doing an action multiple times within a set amount of time so what we're gonna do is we're going to add a little cool down here so local cooldown equals one okay so that is the number of seconds between clicks and you can edit that to your liking so we actually need to have a function here and an event which will trigger this function and the event is going to be listening out for this remote events to be cooled by the client and obviously one it is will pick it up and we will check to see if the player can gain strength whether that the bounce cooldown has been exceeded or not and if they're able to if the if if they're not currently in a cooldown then we will let them gain some strength so we can say replicated storage dot remotes dot lifts and then on server events like this column connect function player okay now what we're going to do what doing here is I've said we're picking up the request because obviously in the local script here in the module script we are we're saying fire server so that's triggering the events and firing a request to the server and then when we get that request so on server events we're going to connect up and execute this function so inside of here we actually want to first we're actually passing through the player as an argument here and an argument is basically some data which is passed through when this when this event is triggered okay and the data which gets passed through with this remote event is the player that triggered the event so we want to check first to see if the player has a remote data folder so we are going to actually need to create this folder and what we'll do is we'll do this when the player enters the game so let's go ahead and do that now we're going to just create another script just to keep things organized and this script is going to be called stats and while we're at it let's just change the other script to be called remotes because that's handling all of our remote events and remote functions so inside of these stats scripts we're going to do a very simple game dot player's thoughts player added function like this or events and this is going to run when a new player joins the game so what we want to do is we want to create a remote we want to once create a folder inside of the remote data folder with their name and then we can store their debounce value in there so what we're going to say is we're going to do local folder or remote data folder or just data folder because that's what I've called it in my script beforehand surds want to keep it all organized local data folder equals instance dot new and then we'll call that folder because we're inserting a folder instance and we're going to give that data folder and name and that name is going to be the name of the player we're also going to pass an argument over here because the argument that we can pass is the player that joined the game because obviously we don't know the name of any players that are going to join the game we can't predict the future so we just say player and that is going to be the player who joins the game and then what we're gonna do is when it's a data folder dot parent equals game dot server storage dot remote data okay let's just say game gets service in fact let's make a variable for server storage at the top here local server storage equals game colon get service server storage now we put the folder in server storage because it can't be accessed by any clients so exploiters cannot change it so if so they can't change it so that they're able to spam click for example so now that we've got that folder in there all we need to do is quit the debounce of value so we say local debounce equals instance dot new and then we say bull value because our there gonna be a true or false value whether the d bounce is in effect or not and let's just do a closing bracket I mean say debounce lock name equals d bouts and D bounce dots parent equals data folder so if we go ahead and join the game we should be able to head into the server you can see that the client actually can't access service storage but if we go to the server and we go to server storage inside the remote day so we have a folder with our name and we have our D bounce value now when we click and the event is fired this will be set to true and we'll have an if statement checking to see if it is true and if it is the player won't be allowed to get any more strength until it is set to false again so it's stopping them from being able to span clicks or like rate limiting so if we go back to the remote scripts we're now able to check to see if they have that remote data folder and if they don't have it then we can't actually action their request to give them strength because if they don't have a D bounce then they'll be able to spam click so we're just gonna say if not remote data fine first child player dot name then let's just get rid of that then we can return no folder and end so what this is doing is we're checking to see if there is no folder so saying if and this part's not remote data so remote data is all we're doing here in the highlighted part is checking to see if they have a folder inside of that remote data and the not basically inverts inverses what we've got here so if there isn't a folder then we're just gonna return back to the local scripts because what we're doing here is we're just returning this function so that it just breaks okay it stops it does continue any longer because they don't have a phone they don't have a folder so we can't do anything else because we can't check to see if they've got a debounce so we just we just stop it but if they have got the folder then they will have passed that if statement check and any further code in this event will execute so we want to get their debounce value now because we know that they've got a folder if they've got to this point so we can say local debounce equals remote data and then we're gonna get their folder by saying in square brackets player dot name so that's just getting the the folder because off see if we did remote data dot player name it wouldn't make sense so we put the name in these square brackets and then we can just save dot d bounce so we've got the value and all we need to do now is check to see if not D bounce then this is a typical debounce script so not debounce basically means if the D bounce is false and if the D bounce is false then we're gonna allow them to gain strength okay so if the debounce is false then anything sort of this if statement is going to run so we can say D bounce dot value equals true because we want to set it to true and when it's true if they try to send another requesting then it's going this this this it's not going to pass through this if statement right it's true so they won't be able to spam click because their request will be blocked by this D bounce until it's set to false again so what we can do is we can give them some more strength so you can say player dot needed starts strength dot value equals player blocked leader stats dot strength value plus 25 and now what we're going to do is obviously if you rebirth then you you're going to want to gain more strength because you've just given up all of your strength to start again from nothing so you're gonna want to have more strength each time you click when you rebirth so we can take 25 here and multiply it by the number of rebirths you have so we can have player dot leaders that's dr. rebirths value now obviously if this was set to zero and you had no rebirth you wouldn't be gaining any strength at all because 25 multiplied by zero would always give you zero so we have to add one so that even if you are on one rebirth or none at all you will still get 25 cash so what that's going to do is just give you some more strength so what we want to do is we want to wait for our cooldown to finish which we set over here to be one second so we're just waiting one second and then we will set D bounce back to false okay and obviously when the D bounce is set to false again then you will be able to get some more strength so the D bounce basically stops you from being able to spam click so we've actually given them more strength here but we haven't actually created these statistics yeah so let's go into our player added script in our stats and let's give them some leader stats and some strength so we can say local leader stats now if you didn't know lead to get a leaderboard in the top right corner of your screen you need to insert something called leader stats into your player and any values inside of that leader stats will be shown on the leader board right so we can say local leader stats equals and then we can say instance dot new folder and leader stats dot name equals leader stats now you need to make sure that leader stats is in lowercase and it's all one word oshi leader board is not going to show up and then we can say leader stats doc parent equals player and then we're going to do the same thing for the strength but we're just going to put the strength inside of the leader stats folder so local strength equals instance dot new and then we're going to do a number of value I'm gonna say strength dot name equals strength with capital S that's what I'm doing because it's a name and then we could say strength dot parent equals leader stats just like this so if we go back to the base plate and click play we should have some leader stats and there we go we have strength on our leader board here we can just go ahead and add the rebirth in right now so I'm gonna say local rebirths equals instance new and this is going to be an integer value because we only want integers so numbers that aren't decimal because you're only going to be able to rebirth once twice three times etc so int value and we could say rebirths don't name equals rebirths and rebirths dot parents equals leader stats all right let's go ahead and see if that works so we're gonna go and just see yep it's in our leader board over here so let's click on weights but we're not be strength when we click the tool let's go ahead and try and debug this then now if you see some printing already in the output on screen you can see actually above that if statement we've got a print fired and we've also got a print hello in the output that was because I was trying to just make sure that the leader starts working earlier on which they were and I forgot to take those prints out so you don't have to add them in that was just so I was trying to pinpoint the problem so the tutorial wasn't long enough because in the end that was not what was causing the tool to break so you don't need to worry about that I'm just gonna carry on with the debugging now so let's see if it gets past our if statement here so we can say prints got past the if statement and we'll see if that runs I'm purposely leaving this in the video so that you know how to debug your code so we're gonna click again and it did get past the if statement okay so let's go ahead and see if it gets past the debounce here I think it would so let's see if it gets past the debounce variable pretty sure it would so we'll click Play and we'll fire the events so they got past the debounce variable and now let's see if it gets past I think I found the issue dies I think I found the issue what we're doing is we're just saying debounce we're not saying debunk value because we need to actually check the value of this debounce we're not saying divan stock value so if I was to put this this print in here and we say get past the debounce if statement then I don't think this is going to print because it can't find the debounce value of course yep there we go so what it's doing is it's going to this D bounce at but it's not actually checking the data stored in that value so if you were to go to the service storage and remote data it would just be looking at this object it wouldn't actually be looking at the value here it would just be giving this object and it would be saying what do I do with this so we actually need to just say dot value okay if not debounce dot value and that should do it so we'll go ahead and run this again and we click on wait and there we go we are getting 25 strength per time and if I go ahead and try to auto click you can see I'm not it's not spamming although the event is being spamed our if statement our d bounce is preventing it from giving us multiple lots of strength and we're only being given strength every one second so there we go guys that is the first part of our simulator game finished now if you want to be able to do in data saving rebirths and much more then you're going to want to go to part 2 in this simulator series and that will be on your screen now so go ahead go to part 2 don't forget to subscribe to my youtube channel our and blocks by clicking on the logo and if you want to take the source code then you can click the join button at next to the subscribe button to become a channel member you'll get all of the source code straight away without having to do any of the work so thanks for watching and the salvan blocks telling you to keep scripting