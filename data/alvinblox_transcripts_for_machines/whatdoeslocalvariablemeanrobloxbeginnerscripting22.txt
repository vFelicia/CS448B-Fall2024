welcome to episode 22 in my scripting series today we're going to look at local variables so a local variable is a type of variable there's two types so you can have global and local and we use local pretty much all the time because they are accessed quicker by the script quicker than global variables so they're more efficient but what a local variable actually does is it's local to the code block that it was created in so that means that if I was to make this local variable if I was to define it inside of this function because this is a code block any code block is like an if statement for loop while loop function in pairs loop anything where you've got indentation and you've got code inside of something in between two lines such as you know in this function that's called a code block so the difference when it's a local variable is that you can only access that variable from the code block that it's inside now if you define a variable outside of any code blocks like this then you can access it from anywhere in the script so I could access it from this function I could access it later on if I wanted to add on to it you know I can access it from anywhere and modify it from anywhere but when you actually define the variable inside of a code block like inside of this function it's local to this function and when we say local to the function or local to the code block we say that it can only be accessed inside that code block so local to block means can only be accessed in that block so if we were to then say my variable you can see there's a red line underneath it and it's not Auto filling the rest of the code because it can't it doesn't actually it can't actually see that function because to the script we're outside of the function and because that variable is local to function we cannot access it because it's within the functions scope so when we say inside its scope it's inside of that code block and the variable can only be accessed from inside of that function because it's a local variable so it's only it's only going to be inside that function which is why it's faster to be acquired or obtained because it is integrated into the environment in which they were created that's the official definition from roblox and what that means is that because it's been created in the function it's going to be much quicker to access because we know it's inside there and we're only going to be accessing it from inside the function but what you need to know is that a local variable is can only will only be accessed and available to modify from the code block in which has been defined if you define a local variable at the top of your script were not at the top of your script but outside of any code blocks if this was not inside the function or inside a code block we would be able to access it from anywhere would be able to access it in the function and I know it has got a red line under it now and that's just because we didn't write the equals but we can access it from there you can see it's pre filling it for anywhere in the script so we can change your access it from anywhere because it's the scope that that variable is now in is it's at the top of the script so when it's at the top of the we're not at the top of the script but it's outside of any code blocks it can be accessed from anywhere so inside this function over here but when it is defined in a code block it's only available to be used in that code block so we could say my variable he calls my variable plus 10 in this function but we wouldn't be able to say my variable equals my variable plus 10 outside of the function you and error because it would say attempt to perform arithmetic so you're trying to do math on a variable a global that just means variable called my variable but it's an ill value because it hasn't been defined and it hasn't been defined because we're not actually running code in that function right now we're trying to access a variable that is created in a function and because it's local to that function we can't access it from outside of it and also we haven't even run the function yet so the variable hasn't even been created but if we did you know call this function still wouldn't work because we don't have access to the variable because it's local to that function and anything you want to do it would have to be within that code block but it's not just applicable to functions we could have an if statement so let's just say if two plus two actually unless create a variable called number set it to five if number equals five then local new number equals number times two okay so we're just creating a local variable if the number is five which it is but if it isn't five then we will just end the script but then what about if you want to access that new number later on and we can't we can't access it if you wanted to print it we can't do that because what we've done is we have defined the variable inside of this if statement so it's local to this code block this if statement so we'd be able to do it if we would be able to do it if we put the print inside of this if statement as well but if it was outside of the if statement then it would just say it's nil because that's what we can only access that local variable and there we go it has printed 10 because we can access the variable new number when we're inside the code block but because we defined it using this local actually inside the code block we can only then access it because it's local to that black code block we can only access it when we are inside of it now that's what a local variable is and when you are defining variables outside of a code block like we are up here that's totally fine you can use local and it's good practice that you use local just because you've used local and you know in a code block doesn't mean that you will be restricted from using it when you are not in a code block and you know you're just writing it in your Swift with no indentation or anything there and you're not inside of a code block you'll be able to access it from anywhere so for example we could say number actually let's just do a local new number and define it outside of a code block I set it to zero for now we can then do new number equals number times two and then outside of the if statement we can print out what new number is and it will give us ten even though we haven't printed it inside the code block because the scope of this variable is the entire script now because we've defined it outside of a code block so we can access it from anywhere so inside of this code block we have set its value and then outside of it we've accessed its new value and printed it out but obviously if number was not five this if statement wouldn't run and the value of new number wouldn't be updated but it would still print out zero because it is defined within the scope of the script not inside the scope of a code block so we can still access its value now what is the difference between this and a global variable well a global variable is just a variable without the local and it's pretty much the same thing as having a local variable defined not in a code block so within the scope of the script so because you'll be able to access it from anywhere but the difference is let's say that we were actually defining the variable for the first time inside the if statement would still actually be able to access it from outside of the if statement it's currently printed nil that's because we have not set a number back to 5 so the if statement won't run but if we do set it back to 5 what will happen is new number will be set a value of 10 so double 5 and because we've created that variable inside the if statement but it's a global variable when we say global it means can be accessed from anywhere regardless of the scope or we know what code block is being created in because it's global we can access it from anywhere so you know just think about it is you can be in different countries and maybe a code block is one country and a different code block is another country but you can still access you know something regardless of what country you're in because it's global so you know like the internet you can access it from any country because it is global so if we run this it prints out 10 even though the variable hasn't been defined at the start it was actually defined within this code block but because it's global we can access it from anywhere so you may be wondering what's the whole purpose of using a local variable I don't really see any need for using it and that's a fair point when you get into more advanced game development and scripting work there are things where you will want a local variable and you will only want it to be accessed within a certain scope it's just important that you know what it is and what it's used what it can be used for right now but as a script so I don't really use global variables I just use local variables because if you do want that global variable that you know that global ability to access it from any way you can just still a local variable which is still faster and best practice to use but you don't declare it inside of your your code block you define it just before you enter that code block and that way you can still access it from anywhere later on in the script but you're still getting that optimization in your script because the local variables are just faster than the global variables that's just the way that it works on the on the back backend of roblox studio and it's faster for your computer only by a little bit but still good practice to use local variables and another explanation from a user called unclear on scripting helpers org described local variables as having a specific scope that they're limited to so if the local variable was defined in this if statement then its scope would be the if statement and it's only limited to be accessed in that if statement so the local variable can only work inside of the area that it specializes in so because we have defined it in the if statement it is specialized to that I statement and can only be accessed from in there you can see when we changed this variable to be local if you look at this new number print here it suddenly goes blue and when it goes blue and we hover over it becomes unknown because the script can no longer access it because because it's local to that if statement it's only specialized to be used within that s statement so if we try and use it outside of it outside of that code block it's not going to work because that's not the area that it specializes in and here we have some more examples of code blocks like I said earlier it doesn't have to be an if statement or a function this is a code block so is the if statement the for loop the while loop the repeat loop and a function as well so these are all code blocks and you know it's easy to work out when you are using a code block as you can see in the example here and the reason why these local variables are faster is because when you have that local variable defined inside of your scope the script only has to look inside of that scope to find it so it doesn't have to search the entire script thus making it faster to find them so overall takeaway from this video is to just always use local variables and if you are going to want to use them later on in a script just define them at the you know not in any of these code blocks but define them as local and that way you can still access them from inside of these code blocks instead of actually defining them inside of them as being local so there we go that's all you need to know about local variables for now I am gonna link a article from the scripting helpers website in the description it was very very useful for you if you're still struggling with it so thank you very much for watching if you did enjoy the video please share it with anybody you know who would find it useful don't forget to subscribe by clicking the oven blocks logo in the middle of your screen and don't forget to like the video as well so that I know you want more of these because they've been getting quite a lot of likes recently which is good so that's why I've kept on doing them so that's watching and I'll see you in the next one Cheers bye