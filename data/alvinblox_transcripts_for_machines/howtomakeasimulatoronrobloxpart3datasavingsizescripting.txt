hello and welcome to part three in the how to make simulates game on roblox today we're gonna be focusing on saving data and making the player bigger so let's jump straight in with the data saving we're going to go into the stat script and I'm gonna go over this quite quickly I have got some other videos on data stores which I'll link in the description if you want to check those out so the first thing we're gonna do is define the datastore service okay so a local datastore equals a game called on get service and this is going to be the datastore service and then we're gonna create our datastore by saying get datastore and you want to give that a name okay so I'm gonna call it player save three okay completely random so once you've got your datastore set up what we can do is down here in the player added script we can firstly define our strength data and our a rebirth data okay I'm separating it with a comma because they are gonna mean the same thing now they're gonna be set to know at the minute because we're gonna do a P call function and a picot function is a function where if the code inside of it breaks then or errors it's not going to break the entire script it's going to be contained within that function okay so we're gonna write data from the datastore to these variables okay so P call returns whether it was a success or not whether the code inside it run without error and if there was an error it would return an error message okay so it's gonna return success and an error message okay there won't be an error message if if success is isn't true if success is true okay because everything would have gone well so that is it going to be equal to P call function and inside of here we're going to set the strength data and the rebirth data to the data from the datastore so to do this we're gonna say strength data equals a datastore data store get a sync and then we're going to provide a key and this just uniquely identifies the the data in for a specific player so we want to get the strength data so we're just going to do strength and then a hi you can call it anything as long as it makes sense to you so strength play out dot user ID okay so the unique the unique identifier is the player's user ID and then this strength string over here just tells us what we're saved okay so that's got the data for the strength and we can also do rebirths later and we can set that to datastore quorum gets a sync but this time instead of strength we're gonna say rebirths okay so rebirths and and then we're gonna say don't play out user ID okay so the rebirths and the strength in the string tells us the data that is stored and then the player user ID tells us which player is stored for okay so now that we have got the data from like a they think we can say if success so if the datastore and script work to find that function if success then we can say if there is strength data so if it's not equal to nil which it was set to originally up here because there was nothing assigned to it so if it isn't then what we can do is we can say strength dot value which we defined up here the strength and number value is equal to strength data okay and we can do the same rebirths rebirths dot value equals rebirths data okay so that is getting the data now we need to work on saving it okay so this is very very simple what we're gonna do is gonna drop out of this player added function and we're gonna say game top players dot play out removing so this is an event that will fire when a player leaves the game curl on connect open bracket function and then we're going to pass through an argument of the player that's leaving okay so what we're gonna do is we're gonna do another peak or so local success comment error message a message equals p call function and inside of this p call function we're gonna just set a value to our datastore so datastore Curran set async okay and then we need to provide the key which we're going to write to and that key is going to be strength with a hyphen and then dot player thought user ID catenate it together as one big key and then we're gonna do a comma and we're gonna write the data which is going to be stored okay and this is going to be the path to their strength file you so player thought leader stats dot strength dot value okay because we created or up here and you can see it stored in the leaders that so we're going to this strength we're just getting its value and we're going to store it to that key so it's stored in the data store so now that we've done that we can just write the same line again for rebirths so data store color and sets a sink this time however the key is gonna be rebirths with a hyphen and then dot player dot user ID to make it unique for that player and same thing again we're gonna write to it the player don't need a stats dot rebirths value okay so that's just wrong the data in the data store to a players key and then up here we're looking up that key and we're storing whatever get async returns from the datastore in these two variables we're checking to see if it was a success and if there is some data and if there is then updating their strength and rebirths values up here to the data that was returned okay so that is the data saving we've done now we can go ahead and test this out so I'm gonna just go and publish at the game and let's go into into roblox now to play it so we're gonna just click on play and load in here and hopefully it should have saved so let's go in and see if it has and then once we've done this we'll move on quickly to making the player bigger as you use the tool ok so joining server and I've got 3,500 because that was what was originally stored and because I've been testing this out before so if I go ahead and get some strength I've got 4,500 so I'll leave the game and play again and this time we should have the same amount of the cache show will go ahead and wait for a server and if we have got the cache then that we great because we can move straight on and there we go we've got 4,500 strength and everything saved perfectly alright let's go back to studio then and we're gonna start working on the on making the play bigger so to do this it's really really simple we're going to do is here in the player added events we're just going to before the in fact we'll do it after the datastore so we're going to create an event called character appearance loaded and this is gonna run when the players character is fully in the game so whenever they respawn or when they join the game this is going to fire so player dot character appearance appearance loaded they're I'm gonna say connect function character okay and inside of here we're going to make our variable for their humanoid and this is going to be used for setting their scale values for their character so humanoid equals character humanoid and then we can say humanoid call on wait for child body depth scale because there are loads of values that are inserted into the humanoid and it's basically a set of numbers and those values deem how big the player's character is okay so depth scale dock value and now I've just worked out a nice little formula to calculate the size based on how much strength they have so you can say 0.5 plus strength dot value over 250 I believe this is a decimal number which is why I'm doing the the division here so it's just taking the amount of strength they have so if they have say 250,000 it will divide it by 250 and then it will add it to point five because you need point five to begin with else you'll be really really small and then we're going to do humanoid or wait for a child waiting for trial and this one's going to be called body height scale so how tall you are and it's because they've all got to be in proportional with the other values then they've all got to be around the same else you're gonna look stretched so this again is going to be 0.5 plus strength value over 250 and let's just copy this line again copy it and paste it onto the next but we're gonna change it from body height scale to body width scale and that's gonna be the same and we're gonna do the same again this time to scale their head with the rest of the body so instead of saying body height scale we're gonna say head scale and give it the same value and lastly we're gonna set their walk speed so if they're getting bigger than they should be able to walk quite faster as well so humanoid warp speed equals 16 multiplied by strength strength dot value over 250 and you can change these values if you want this is just what I've come up with but if you find something better then feel free to change it however what we're gonna do is because this is only for the first time I play into the game we're gonna make it so that if the players strength changes so we can say strength get property changed signal and then that's going to be the values if the value of strength changes we can connect it to a function and this function is gonna do the exact same thing okay so you can just take this code okay where it changes all of the scales and just paste it in here because it's only going to do this code once but every time that strength changes we need to update the players and scale okay so let's go and check this out when you go into the game and click on play and hopefully our character should size up with the tool so here we go and I'm quite tall all right it quite big because the script has already changed my body values but if we use the strength tool you can see that I'm growing much bigger now we do have a little problem here with the tool it doesn't seem to be increasing in size so I'll check that out for you and try and we'll try and fix that in the next part of the series if you want to have a go at fixing it yourself though you'll want to look into the tool mesh scale okay and the size of the other parts in the tool but it shouldn't be too bad to fix I'll see if I can get that fixed in the next part but we have added scaling to the character in this let's have a look at the play if the character resets does it go back to zero no it doesn't you keep the same size which is great and when you click the tool you gain strength as well and on top of that we've added data saving so thanks for watching this part if you liked it please leave a thumbs up don't forget to subscribe and turn on the notification about account already and if you'd like to take the source code you can become a channel member and on top of that you get a load of extra cool perks which you can see by clicking the join button have a great race today and I'll see you in the next video