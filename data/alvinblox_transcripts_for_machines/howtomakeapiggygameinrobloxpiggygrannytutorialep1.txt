hey I'm Alvin blocks and today I'll show you how to make the best piggy type game on roblox easily and quickly man I wonder how I can make a piggy game oh I know just the guy alright we're just gonna go on over to the youtubes owl then blocks a little hole pirate it's perfect let me just find the right video here alright how to make a piggy game on roblox this should be good this should be good on my channel I've taught hundreds of thousands of people how to make roblox games so you've come to the right place I'm also officially recognized as a featured educator by roblox and with my videos you'll be able to make your own games and even make ro books from them so if you're interested in that please click the subscribe button below it really does help my channel grow and it motivates me to continue making this content there's more to this than what meets the eye when it comes to creating these videos I've worked all day every day for a whole week to create this picky game testing it for over 10 hours to make sure that you get the best experience from this video and as an added bonus I've created a piggie kit for you to use so that we can speed at the time it takes for you to make your piggie game this piggie kit will give you a map piggy character scripts for making the doors work as well as the keys which will unlock them on top of that you'll also get a lobby and a menu GUI to use as well as some other things which we'll go over later all I ask is that you subscribe to my channel in return for using this model this kit isn't the full game you're gonna need to watch the whole video to learn how to use it and to add more to it as this kit doesn't contain the vital game scripts which are needed to make the game work and that's what we will be making in this video so think of as a head start I'll also be making separate videos and linking to them from this video if you want to learn how to make the things in the kit for yourself from scratch if you'd if you want access to the finished project for yourself with all of the scripts inside and can become a premium channel member for 4.99 a month that way you'll have exclusive access to my project file which will contain the finished product all scripts included and fully working not only that you'll also get the code from my other video tutorials and more exclusive perks which you'll be able to see on the screen now including a badge icon next to your comments so just click the join button underneath the video next to the subscribe button where you can go to the link in the description so without any further ado let's get straight into the video so firstly you're going to want to go and take the piggie kit so head to the description of the video click on show more and then go to the link here where it says piggie kit that will take you to this free model so make sure you click on get and take the model for free it won't cost you anything when you've done that you don't want to open up roblox studio if you haven't already installed roblox studio firstly just check your computer by searching to see if it's already there because it could have already been installed when you first played roblox you just wouldn't know about it so I'm gonna search for roblox studio and here it is so just click it to open it up and it may prompt you to login for the first time if you haven't used it before so just go ahead and log in with your usual roblox account details it's totally safe because it's created by roblox and if you see something pop up about an autosave file just press ignore that is not important to us for now what you're gonna want to do though is click on new over here and then click on baseplate that's going to give us a nice blank area to create our piggy game because we don't need any of these templates now your roblox studio might look a little bit different to mine that's because I've got some different panels open up and I'm using the dark theme but I'm just going to show you how you can set yours up correctly so if you don't see these panels the Explorer and properties window go to the View tab up top and then click on Explorer and properties and they should show up here Explorer and properties are the two main windows that we will be using we don't need to use the output for now once you've done that let's go ahead and insert our piggy kit which we've just taken as a free model heads to the toolbox in the home tab and then click on the grid here of the four so it's little squares this will be your inventory and then make sure that you've selected my models at the top here you should see my piggy kit which you've just taken if you haven't sit if you don't see it there make sure you've actually taken the model and you've clicked the get button so that it's in your inventory so click it and that will insert the piggy kit into your game now remember this is not the full game and you need to keep watching the rest of the video to learn how to make the piggy game work because we've still got some scripting to do this is just like a head start so that we can cut out the boring bits and the things like designing of the map for example but what we need to do is we need to put all of our different objects into the right places because currently that they're all in the workspace and we don't want them to be here so we're going to open up the model we're going to click on this little arrow here and it's going to open up all these different object inside and it's telling us to ungroup these different models in certain services so for example the replicator storage starter GUI workspace so we're going to drag each model to the place it's telling us to put them in so for example this one here it's telling us to ungroup in the workspace so firstly we're gonna just drag it into the workspace here then we're gonna rightclick and click on ungroup make sure you click on ungroup and not select children ungroup so you can press ungroup there or press control U or command U if you're on a Mac and you'll see that these three selected models are now in the workspace now I'm just gonna drag all of the other models here into their areas so we're just going to leave this one here this first one we'll get to that in a minute because it's to do with our game logic which we haven't set up yeah but this one is full start to GUI so can I drag that one down into the start of GUI service and we're going to see this GUI appear and that's alright just right click and click ungroup and then just delete this warning GUI this is just a GUI for those that aren't watching the video to tell them to come and watch it which you should be doing right now so I'm going to delete this GUI and it's gone away then I'm gonna go and take the fifth model and it's gonna say ungroup in serve storage so I'm going to put it in service storage rightclick and ungroup and we've got some objects in there as well next one is a replicated storage so we can drag that one in there rightclick and ungroup and by the way the order that you do this in doesn't matter as long as you just ungroup everything in the right places then we've got the stun script and we've got to put that into service script service and finally this one here the ungroup in your game logic script so we asking you to create that script so we're going to click on the little plus here next to server script service insert a script and we're going to call this script game space logic it's very important that you call it game logic so that we know what what each script does and I'm gonna drag this model into the game logic script right click and click ungroup ok this is one of our modules the door module and it handles the doors which will be able to swing and also for when the keys which the player will pick up when they touch the door we can open and close it so there we go we have just put all of our objects from the piggy kit into the correct places where you can now do is you can read this script if you want it's only for those though that haven't started watching the video if they just take the the model so it's not important to us so I'm gonna delete that and also going to delete the thumbnail camera and we can delete the main model because we no longer need it whilst I'm at it I'm going to delete the base plate because we don't need it so now we have all of our objects needed for our piggy game insert it into the game I'm gonna walk you through what each of them do so firstly in the workspace we've got our lobby this is just a simple model containing parts and inside of it we've got a folder called spawns inside of here we've got a load of spawn location objects and this is where the players are going to respawn if they die now if you're creating your own lobby it's really important that you have a folder in that lobby model called spawns with all of your spawn locations in here okay and they also need to be spawn location objects so you can insert them by going to model and spawn but just make sure that you've put them inside that spawns folder and that your lobby is called lobby okay your lobby your lobby model it's all grouped together like this okay next we have intro tunnel now the intro tunnel is just a model of it's a little setup where the camera will look when you first join the game and we can have a piggy character here if you wanted and it's what the cameras gonna look at when you're in the main menu we're not gonna be dealing with this until later on so I'm just gonna leave it here for now and of course you can create your own as long as you've got two parts a camera face and a camera origin and this is going to tell our camera where to look at but again we won't be working on this until later on so don't worry about it and then over here we have a waiting room and this is where the piggy will get teleported to when they first get chosen so it just has it's a blank white room with two things on the walls two a piece of text telling the piggy that they need to wait and that when they're released to what they have to do so then moving on to the replicated storage we've got a folder in here called chapters and if you don't know piggy each map in picki is called a chapter so you have like chapter one chapter two and at the start of each round a different chapter is chosen so if you do make a map then you're going to want to put your map your map model was in this chapters folder okay so if you wanted to make a new map you just crate it in the workspace and then drag it into the chapters folder okay really important you do have that chapters folder and that all of the chapters are inside of it moving on to service storage now and we have two folders key handles and tools now the tools folder has all of the different tools that you will need in the game such as the keys to open the doors a crossbow that can kill the piggy the green keys that can unlock the door just to the other colored keys red key purple key orange key for example we've got a hammer which can break wooden blocks at the piggy bat obviously which can kill players the white key which will be needed to escape and things like the wood plank which can bridge the gap between the two different floors and also the wrench to turn certain things like electrical generators on or off we've also got key handles and the key handles are the parts which look like the tools which will be in the map so when you click on them you'll be able to equip the tool we'll get onto that later on and then we also have a model called piggy here and this is the piggy character let's just drag it into workspace so I can show you what it looks like so you're a generic piggy character and that's what we will be using that later on when we actually set the players character to look like the piggy so we'll keep that in server storage we also have a bear trap which is the default mesh for a trap that the piggy will be able to place we need to script that and let's just move that back into service storage and we also have a hitbox and I'll be explaining more what that does later on is the transparent parts which will be attached to a player so it's easier for the piggy to click a player so we're going to put that in server storage now our GUI is we have a stamina script which will which will stop you from spamming jumping so that after a couple of jumps you won't be able to jump for a couple of seconds just makes it easier for the PE to kill you now I did not create the script it was created by a gaming guy 88 and he posted it on the roblox dev forum so this game this script isn't essential to the game it's just an added feature then we have the bat GUI it's currently disabled but if we enable it in the properties tab you'll see that this just appears when you equip the bats tellingly piggy that they need to tap the character or click them within eight studs to be able to kill them we then have the main GUI and this is currently enabled but the frames inside are disabled and we've got a black frame which will appear when you die and it covers the entire screen we've got an intro as well and if we make this visible you have to see that this is the intro screen which appears when you start the game we then have a Crouch button which when I enable it here looks like this and it will just tell the player that they can press control or tapped Crouch will be looking into the Crouch stuff later on and we also have a announcement for when you escaped a kill feed which will appear when somebody gets killed and also a top status bar which will have the game update such as when the intermission is occurring or it will tell us how many seconds are left in the game okay then in the service script service this is the most important part so we've got a stun script which we won't be focusing on yet but that's for the crossbow when you fire it at the piggy then they will be stunned for a number of seconds they can't move so we don't even worry about that but the most important script which we will be working with today is the game logic script and this script is where we're going to control the actual game and the round itself we're going to script everything to do with the round you know teleporting everybody choosing who's the piggy choosing the map detecting when people have escaped detecting when somebody's been killed ending the round all of that good stuff and that's what we're going to be looking at today in this game logic script now what we will be using is a module scripts and we'll be explaining that more in just a little while but the game logic will basically do everything to do with the rounds because currently if we play this game it won't do anything if you just put this piggie kit into your game and you try and play it you will not be able to play the game okay there will be a lot of errors in the output and that is because we haven't scripted our things yet and also because the piggie kit is relying on certain scripts which we have which we haven't created yet basically so that's why you need to watch the video so that you can learn how to code this game okay so don't go anywhere keep watching because this is going to be awesome so what we're gonna do is we're gonna have a module script inside of this game logic script now we've already got one for the doors but we're also gonna have another one for all of the round stuff so for managing the round so I'm gonna look for a module script and I'm gonna name this module script round scripts around module sorry now a module contains code which can be executed from another script it's just an organized way of having all of your code stored in blocks called functions which we can then call from another script this way you don't have all of your code stored in one big script which makes it shorter and that way you can call different functions to run different blocks of code at different times for different things for example you could have a function to count down your intermission in a module script and that function could be five to ten lines long you would then call that function from your game logic script with only one line of code of course you could have all of the functions stored in your game logic scripts without any modules but this way is just more organized and better practice to use module scripts the module script code is actually running in your game logic script it's actually just stored in the module script but it's being retrieved and executed by the game logic scripts so think of it like an instruction manual for something the instructions are actually stored in the manual we have to get the manual to read them but it's actually us who are following and doing the instructions the instruction manual isn't carrying out the instructions for us what happens in the module script is all of the functions are added to a table called module and then we return that table or that module yeah that table back to the game logic scripts but how does it know where to return it back to well that's because we have to require the module so in our game logic script we're going to say local round equals require and then in brackets parentheses we're going to say script dot around module okay because the round module is inside of the script we just say script to get the current script dot round module okay so now that we've required it we are in control of the module so what happens is the module will return all of the functions which we haven't yet declared or written out all of the functions though will be inside this module table so we have access to run them from this game logic script so don't worry whew a little bit confused we'll still be going over this whilst we keep coding the game now for our intermission we want to show text on the screen to tell people when the next game will start so to do that we need to insert a status value I have done a video on how to make a status bar so if you don't understand this you can check it out by going to the video in the top right corner of the screen or also link it in the description what it requires is having a value stored in the replicated storage a string value and I'm gonna call this value status and that way we can update this value we can give it where we can give it a value from the game logic script and then our GU eyes can show the value of the status objects as a text label so it will appear on the screen wherever the value property of the status object is will appear on the screen and that's what we'll get into coding on the client later on but all we need to do to set a message is to change the value of this status object so in the round module we're going to create our first function so to do that it's very very easy we just need to say function module and then we give it a name so we have to say module first to tell it that it's part of this table that we want to send it back to our game logic script so function module and I'm just going to call it intermission with the castle I ok like this so for module 2 intermission and then we're going to have a pair of parentheses and then we're gonna drop the line now inside of here all we need to do is we need to a countdown so we're going to use a for loop for that so for I equals and then we supply three numbers so the value we want to count down from so let's just say 30 for example and then the second number is the value that we want to stop at so when we get to zero and then the third value is the how much you will decrease by every second so minus one then I'm gonna say do and then drop a line and it will add this end for us and then we can do a weight weight one because we want to wait one second before it moves on wait one second 30 times and then you've been waiting for 30 seconds then what we need to do is we need to update the value of this status so let's create a variable for that status because sure we'll be constantly using it so local status and that's going to be equal to game got replicated storage wait for child status okay because we've got the status value in the replicated storage and we're using wait for child just a wait until it has been added into the game in case it's added a little bit late and it's not there by the time that this this script is looking for it so we're just waiting until it's there then we can say status dot value equals and then we can do a string which is just some text in speech marks saying next round starts in and then space and then dot dot I dot dot and then in speech marks again seconds like this and the dot dot I is inserting the I value and the I value is going to be that countdown so it's going to be the number of seconds so it's going to count down from 30 down to zero it's going to decrease by one every second and then when we say dot dot we are basically combining this text with a variable and this variable is our I value so it's gonna tell us how many seconds until the next round stars and what if we wanted to have a custom length though that we so if we were to call at this intermission we would need to now do from what game logic script to say round dots intermission so the what that would do is it would start the intermission for us okay but what what we wanted to tell the round module how many seconds we want the intermission to last for from where we call it from here so if I wanted to say five seconds well what would need to do is we need to firstly put that number inside the brackets and then the round module we would just quite an argument so this is cut the car like a variable and it's just going to be the number of seconds that we've passed to it so we're going to call it length then we can change the thirty to be the length so because we have passed a number in these brackets is going to send that to the function when it starts and length is now going to be five so it will count down from five but instead of having to change in here we can just always have length so you could have different intermissions if you wanted to we want to do an intermission after you can do 115 seconds so it's just a quicker way of us being able to pass how long we want to wait for in here and that's an argument he wants to learn more about functions and arguments I have got a video on that which you can check out in the top right corner of the screen or in the description so that's our intermission done and if we were to go and check it out in game you would see that the replicated storage value would be counting down from 5 now let's make it a little bit longer I'm gonna make it 30 seconds I'm going to play the game I'm going to show you this happening in action so if you go into replicated storage into con status and you open up the properties it will say next round starts in 6 7 16 15 14 13 and it's counting down every single second from that 25 which is awesome so we know that's working and that's good and can also see that it's now appearing magically in our GUI how is it done that well speakers in the piggy kit I went over adding this status bar and the client scripting he went into client main you would see that we've got a change to forget property change signal on the status so replicate his storage wait for child status when the value changes just change the top statuses text to the statuses value which I also went over in the status bar video which I mentioned a couple of minutes ago the next thing we want to do is in insert the map don't we want to choose a random map from the chapters folder and insert it into the game so let's head back to our round and module script and we're going to create another function and this function is going to select a random map now I've gone ahead and already created our second function module dot select chapter as I'm sure you'll be able to know how to make functions now and inside of here we're gonna firstly create a random seed and that's going to help us generate a random map so we're gonna say local R and just a variable and it's gonna create our new seed random dot new and that is kind of like when you put a seed for map generation so for example in Minecraft you generated a new seed kind of like that it's just generating a bunch of random numbers for us next I'm going to create a variable for all of our chapters so we can say game dot replicated storage dot chapters that chapters folder colon get children and when we say get children it's going to give us a table of all of the chapters or all of the objects inside that folder so it's gonna give us a table of all the map models basically and then we need to pick a random chapter out of that table a random map object out of that table if you do want to learn more about tables and how they work I've got a video on tables or leave it in the description down below and in the card as well so now to pick a random chapter we can just say it we can create a variable for the one that's gonna be chosen local chosen chapter equals chapters because that's a folder and then a pair of square brackets tells us that we want to pick one of them out so we pick it out by giving it a number because they will have an index every map between 1 and how ever many they're asked with first 10 they're all gonna be numbered 1 to 10 and if you choose a random number such as 6 it's gonna pick the sixth one out so to do that we just need to then select a number between 1 and however many there are so we say round because that's our random seed colon next integer and that will select a random number so integer int eg er and then inside of there we give our first number there's going to be between it's gonna be between 1 and then comma and hash tag chapters when you say hash tag and the table name it will basically give you the number of items in that table so if there's 5 hash tag chapters will be 5 so it's gonna pick a random number between 1 and 5 and pick that chosen chapter out then we need to send that chapter map object back to our game logic script so we can say return chosen chapter and that will send that back to a game logic script so if we then said round dot select chapter and put our to bracket our pair brackets after that's what would need to do is we need to set it as a variable so local chosen chapter equals round dot select chapter and when that returns the chosen map back chosen chapter will then be equal to it will be the the map objects itself so we can manipulate it so this map here that we've chosen is actually the one that stealing replicated storage we don't want to move it out we just want to create a clone of it okay so we're gonna say look we're gonna we're gonna create a clone of it we're gonna say local cloned chapter equals chosen chapter we're going to take that chosen the map and I'm going to make a clone of it by saying clone okay with a capital C then we're gonna say clone chapter we need to we're gonna change its name because they cloned chapter dot name equals map the reason for this is because they've all got different names we could have chapter one chapter two chapter three but we want to insert it into the workspace and we want to call it in map and when we do that then from other scripts which may not know the name with a map that was chosen we can just identify the map by calling it map and there from other scripts if you want to get the map we can say game dat workspace dot map and the reason we've cloned is because we don't want to change the maps in replicated storage because they're gonna get chosen the next round we don't want to mess them up so we're gonna say cloned chapter dot parent equals game dot workspace we're just gonna put it in the workspace when it's in the workspace we can see it and we can we can teleport everybody into the map and if you go and test the game when the intermission gets to zero if we head into server mode by clicking on current client and changing it to server and you move around you should you should see that the map has now been inserted into the game which it has so that's good now we know that that worked perfectly next we're going to choose a random player to become the piggy so we're gonna create a table called a local contestants and it's going to be equal to a blank table like this then we're gonna loop through all of the players in the game and we're going to insert those who aren't in the menu into this table called contestants now how do we know if the players in the menu or not well when they first spawn into the game we're going to insert a value into their player then give it like a tag so that's we can loop through all of the players in the game and if they do have that tag then we'll know that they're in the menu but when they click the menu play button we can remove that tag okay so we basically have a way of telling if they're in the menu or not and that way we will have the players that are not afk in the round so that nobody is afk and delaying around so to do that we're gonna have to insert a neuro script into the game now I'm gonna click on cell script service I'm gonna insert a script this script however I'm gonna rename it I'm gonna call it event handling it's gonna handle all of our remote events in the future as well as the events when a player first joins the game so inside of here it's very very easy we're gonna say we're gonna do an event for when the player first joins the game so inside of the script very very simple we've got a player added event and this event is going to run when a player first joins the game and the player argument here is going to be the player that just join so whatever we do to player will be done to the player that joins and so what we'll do is going to insert using instance don't need a ball value it doesn't matter really about what type of value it is it's just a tag but this ball value we're gonna give it a name call it in menu I'm gonna put it inside the player so when we join the game if you look inside players Alvin blocks or your player you'll see that you've got this in menu and when we press play what we're gonna do is we're in to create a remote event that will destroy this value as I said we'll know that you are ready to play when that values been destroyed because if you haven't got the in menu value stored in your player will know that you're not in the menu and will know that you're ready to play now because you're only out of the menu when you press play on the GUI the GUI is actually stored on the client on your computer and when we want to change something when you do something on the clients you just click a button we have these remote events so that we can trigger the remote event from the GUI on the client and then we can pick it up on the server because all of our code such as the event handling is stored on the server which is owned by roblox and we communicate over the internet because the client and GUI is stored on your computer and the server can't tell when you've clicked a button which is why we have to use remote events to tell the server code when we've done something so in this case we are gonna do our most events and fire it when you click on the play button so they work on the server we can pick it up and remove that in menu value from your player so again very simple just click on the replicate the storage and click on the plus and inserts a remote event this remote events I'm gonna rename it and I'm gonna call it menu play because it's going to be fired when you press play on the menu then inside the event handling script we're going to create another event which will pick this up and then code we'll be able to ruin it on the server when this remote event is triggered so game replicated storage dots menu play dots on server events because when it's event that's been fired to the server from the client connects a function and we've got an end with a bracket added here now we need to know on the server which player has fired this event which player has click the menu so we have an argument which is automatically sent over called player ok and you will see inside of the client main local script which came in the menu the main GUI which was in the piggy kit you will see that when you press the intro play button we've got this event here which fires when you click the play button it will actually fire that remote event so we've already done that so it's been fired and we're now handling it on the server ok so what we're going to do is firstly just gonna check if the player has that's in menu value inside of them so if player call on find first child in menu and when we say find first child is because in case it's not there if you were to just say if player door in menu then it would cause an error if it wasn't there so find first child will look for the thing that you want to find so in this case the in menu but if it's not there it won't throw an error so it's just a better way of looking for things so they have got the menu value in them then we know that they do have it so we can say player dot in menu destroy it's gonna remove it so when we then check in the round module for all players without the in menu tag and we can add them to that table so what we've done now if we play the game again is we've just created a value that gets put into players when they first join when they're in the menu but then when they click on the menu play button let's look in our player here we go we have the in menu but at airport value but already press the play button look closely it's gone it gets deleted because we fired that remote event and then the server has deleted it for us so we can now be counted as an active player who is an afk because we've clicked the play button so what we can now do is go back to the game logic script and what I'm going to do is when it loop through every single player in the game so what we're gonna say is a full loop so if you haven't seen four loops before it basically allows us to loop through a table in this case we're looping through every single player in the game and for every single player the player is represented as B and it's gonna loop through every player in the game so if the player does not have that's in menu in them because we thought the not here which inverts it so if the player does not have in menu in their character or in their player object then we're going to insert that player their player object into the contestants table and now after that for loop is finished running our contestants table should be full up of all of the players that are ready to play so it could look something like this so we've got three players player objects not names because actual objects in game door player so Alvin blocks sure let's key and knock or 88 there are three players for example that are in the game so that's the end of the first video now you can go straight to the next one by clicking the thumbnail in the middle of your screen and that's recommended so you can just carry on where you left off and we will be creating that function where we choose the piggy and then we'll be creating the rest of the game loop so I'll see you in the second part just jump straight into it by clicking the thumbnail