With timestamps:

00:01 - hello everyone
00:03 - uh thank you so much for joining us for
00:06 - today's teacher training
00:07 - about breaking down k2 coding
00:10 - i'm going to wait just a couple more
00:12 - minutes to see if more people will be
00:14 - joining us
00:14 - but this webinar will be recorded so if
00:17 - you need to
00:18 - leave for whatever reason if you want to
00:22 - review some of the things we talk about
00:23 - without taking notes today
00:25 - you will be able to do that so
00:28 - in this webinar today we're going to be
00:30 - covering some of the most very basics of
00:33 - bringing coding into your k2 classroom
00:36 - and this is for complete beginners or if
00:39 - you are someone who has
00:41 - already shown interest in coding with
00:42 - your k2 students and want a little bit
00:45 - of a refresher
00:46 - going into next school year this is made
00:48 - for you as well
00:50 - we're going to be covering what k2
00:52 - coding means
00:53 - for five to seven-year-olds as well as
00:56 - some of the benefits not just for your
00:58 - students but for you the teacher or
01:01 - the administrators at your school
01:03 - there's a lot of benefits when you bring
01:05 - coding into your classroom so we'll chat
01:07 - about that and
01:08 - we'll be sure to cover how to join the
01:11 - amazing community of stem teachers that
01:13 - exist
01:14 - in the k2 coding sphere and there's some
01:16 - really awesome teachers doing great work
01:18 - so i'll talk about how you can connect
01:20 - with them if you want to learn a little
01:22 - bit more
01:23 - before we begin yeah i just want to
01:26 - mention one more housekeeping item which
01:28 - is that
01:29 - we have a couple other webinars coming
01:30 - up we have this one today which is
01:33 - really about the basics introducing you
01:35 - to
01:36 - k2 coding in general but next week on
01:39 - wednesday or on tuesday excuse me we'll
01:41 - be talking about
01:43 - the steps to take to actually start
01:44 - coding with your students
01:46 - so step by step where to start what to
01:48 - do next
01:49 - so if that's interesting to you that's
01:51 - happening next tuesday and then
01:53 - in october we're also going to be
01:55 - chatting about
01:56 - progress tracking measuring achievement
01:59 - and
02:00 - evaluating success in a coding classroom
02:02 - so
02:03 - be sure to check that out that'll be in
02:05 - october we have links to those webinars
02:08 - on our website and if you have any
02:10 - questions please feel free to
02:12 - reach out to us at codable or to me
02:15 - and we can tell you a little bit more
02:17 - about what those webinars will be about
02:19 - so i am going to jump into the training
02:23 - today
02:23 - breaking down k2 coding and i do want to
02:26 - mention that if you have any questions
02:27 - throughout the webinar
02:28 - please feel free to write into the chat
02:30 - i have my colleagues brie
02:32 - and gretchen hanging out in there
02:34 - they're ready to answer any questions
02:35 - you might
02:36 - have and then i will of course be
02:38 - checking that chat throughout
02:40 - the webinar and answering anything that
02:42 - i can do as well
02:44 - so i am going to hop into our slides
02:47 - today
02:48 - breaking down k2 coding and i'm going to
02:51 - kick us off with the agenda for today's
02:53 - training session
02:54 - um this training is going to be a little
02:56 - bit more conversational in style
02:58 - than some webinars that i've seen in the
03:00 - past the reason being that
03:02 - this information is not one size fits
03:04 - all it's really going to
03:06 - change or evolve based on the needs of
03:08 - your students and your classroom
03:10 - so hopefully the information we cover
03:13 - today will provide a bit of a background
03:15 - and then we're here as well if you want
03:17 - to reach out and and make a plan
03:19 - a little bit more specific for your
03:21 - school so this is going to be an
03:23 - overview
03:23 - i will give a short introduction about
03:26 - me where i'm from
03:27 - and why i'm hosting this webinar today
03:30 - we'll go over
03:31 - what coding really means for a
03:33 - kindergarten a first
03:34 - or a second grader it's not the same as
03:37 - what coding will mean
03:38 - for us adults next we'll chat about the
03:42 - benefits of introducing coding to your
03:44 - youngest elementary students
03:46 - and like i mentioned before we'll chat
03:48 - about benefits not just for students but
03:50 - for teachers and for admin as well
03:54 - we will do a short vocabulary review i
03:57 - love
03:57 - how much teachers love vocabulary so
04:00 - we're going to cover some terminology
04:02 - that you might see as you're researching
04:04 - or investigating
04:06 - k2 coding resources a lot of words
04:09 - kind of look the same but they mean
04:11 - something different so we'll break down
04:12 - some some coding terms
04:15 - i will give some tips and tricks for how
04:17 - to connect with other teachers doing
04:19 - similar work in this field
04:21 - and finally at the end we'll leave some
04:23 - time for
04:24 - question and answers but like i
04:26 - mentioned before i'll be checking that
04:28 - chat on the side
04:29 - oh hello everyone thank you for joining
04:31 - i'll be checking that chat on the side
04:33 - and answering questions as we go and
04:35 - brie and gretchen are in there too
04:37 - to check in and answer any questions you
04:39 - might have so again here's our roadmap
04:41 - for the training today
04:43 - and we're going to start with a quick
04:44 - introduction
04:47 - so a little bit about me my name is
04:49 - hannah i'm based out of san francisco
04:51 - and i'm the instructional designer at
04:54 - codable
04:56 - here i am hello and
04:59 - i love teaching kids to code i've been
05:02 - doing work in this field both as a
05:04 - teacher and a curriculum designer and
05:06 - have had the pleasure of doing so
05:08 - in a wide variety of settings i've been
05:10 - a museum educator
05:12 - a camp director a preschool teacher and
05:15 - taught computer science both at the
05:17 - elementary and middle school levels
05:19 - so i really just love kids coding in
05:20 - general i earned my master's of
05:23 - education in learning design and
05:24 - technology
05:25 - with a focus in designing kids coding
05:28 - apps and resources and was thrilled when
05:30 - i joined the codable team
05:32 - in 2019 so i'm so excited to have all of
05:35 - you joining me today
05:36 - if you feel like it i love that many of
05:38 - you are already introducing yourself in
05:40 - the comments if you want to tell us
05:42 - where you're from or what role you hold
05:44 - and why you're interested in
05:46 - kids coding please feel free i want that
05:48 - to be
05:49 - a real community where you guys can ask
05:51 - questions and introduce yourself
05:52 - throughout the webinar
05:54 - and i'm excited to learn from all of you
05:55 - as well
05:57 - so like i said i work at codable codable
06:00 - teaches kids to code using fun
06:02 - interactive games and a large audience
06:05 - that we
06:05 - that we have are k through two
06:08 - classrooms but our games do cover
06:10 - topics ranging all the way up to fifth
06:12 - grade computer science standards so a k5
06:16 - uh a k5 range so this teach
06:19 - this training is geared for any teacher
06:22 - using any tool you do not need to know
06:24 - about codable or have a free codable
06:26 - account
06:27 - to learn alongside me today and that
06:30 - said i will be using codeable in most of
06:32 - my examples during the webinar today
06:34 - since that is the tool that i know the
06:35 - best
06:36 - so if you're interested in learning more
06:38 - about codable
06:39 - please don't hesitate to reach out to me
06:42 - directly
06:43 - or the codeable team we're happy to chat
06:45 - and brainstorm about
06:46 - how to make codable work for your
06:47 - classroom and again
06:49 - this is for any teacher but i wanted to
06:51 - point out that
06:53 - codable is the tool that i will be
06:54 - talking about the most
06:57 - so let's jump in with the big one this
06:59 - is the the main topic of today's
07:01 - training
07:02 - what does coding mean in kindergarten
07:04 - for first or
07:05 - second grade um when i tell people that
07:08 - i work for
07:08 - a company that teaches elementary
07:10 - students to code
07:12 - i often get uh skeptical responses
07:15 - people saying
07:16 - really how does how exactly does that
07:18 - work are are those kids really learning
07:20 - how to code
07:21 - and i get the skepticism when we think
07:23 - of coding we often think of
07:26 - you know a a person working alone in a
07:28 - dark room with a glowing computer
07:30 - screen writing sentences and sentences
07:31 - of this
07:33 - random jar bowl of symbols and numbers
07:35 - and text
07:37 - so it's not going to look like that but
07:39 - yes i'm here to tell you that kids can
07:40 - code it'll look
07:41 - different than this picture we have in
07:43 - our head but they can do it so that's
07:45 - what the first part of our chat will be
07:47 - about
07:47 - we're going to break down some
07:48 - assumptions about what is coding and
07:50 - what does it mean for our youngest
07:52 - students so what is coding
07:56 - at its core coding means
08:00 - giving a computer clear instructions
08:03 - in a language it understands to produce
08:06 - a specific result
08:07 - so in other words it's telling a
08:09 - computer
08:10 - what to do and we can't do that just by
08:14 - telling it what to do in english or any
08:16 - other human speaking language
08:18 - we do that with code that's the language
08:20 - that computers understand
08:22 - so like i said you might picture someone
08:24 - coding like this
08:25 - maybe they're working in isolation
08:27 - they're writing lines and lines and
08:29 - lines of
08:30 - letters and numbers and symbols and this
08:33 - is what coding
08:34 - might look like for a lot of adults in
08:37 - certain settings
08:38 - but when we talk about kids coding we
08:40 - are definitely referring to something
08:42 - different we would not expect our
08:45 - elementary students to type
08:47 - lines and lines of syntax in front of a
08:50 - screen for hours we know
08:52 - that that's not developmentally
08:53 - appropriate or interesting for them at
08:55 - all
08:56 - however kids can absolutely do what this
08:59 - definition of coding
09:01 - describes they can give a computer
09:04 - really clear instructions to produce a
09:08 - result to have some sort of outcome
09:10 - so this is what we mean when we say kids
09:13 - can code
09:14 - and you might ask well if kids aren't
09:18 - typing out lines of code then how
09:20 - exactly are they still coding what does
09:23 - coding mean in this case and
09:27 - typically effective k2 coding apps or
09:30 - resources will employ
09:32 - some sort of drag and drop interactive
09:35 - something
09:36 - that engages fine motor skills that
09:39 - might cater to pre-readers with
09:41 - symbols and shapes and colors as opposed
09:44 - to
09:45 - text and words so this picture on the
09:48 - right this is an example of a young
09:51 - student working
09:52 - in codable and you can see already that
09:55 - it's a bit more interactive
09:56 - than that picture prior where you're
09:58 - just typing
09:59 - on a keyboard kids coding can be
10:02 - really visual really interactive and
10:05 - engaging
10:06 - and it doesn't have to be like what we
10:08 - sometimes picture adults doing when
10:10 - they're coding
10:12 - so let's dive in a little bit more to
10:15 - what
10:15 - k kindergarten first second or really
10:18 - elementary school in general what coding
10:20 - can be like what else
10:21 - is out there so
10:24 - one way to teach young students to code
10:27 - is through block-based
10:28 - coding and you might have seen examples
10:31 - of block-based coding maybe it's in
10:34 - a recommended curriculum for you to use
10:36 - or
10:37 - just through your own research of
10:40 - examples like scratch junior that's what
10:42 - you see here
10:44 - regular scratch so here's this example
10:48 - code.org does block-based coding there's
10:50 - a lot of other
10:51 - options as well so these platforms
10:55 - utilize
10:56 - some sort of drag-and-drop learning
10:59 - environment
11:00 - where learners use these coding
11:02 - instructional blocks you can see those
11:05 - colorful blocks
11:06 - that sort of snap together like puzzle
11:08 - pieces
11:09 - in a certain order to create their code
11:13 - those instructions we talked about on
11:15 - the last slide the the instructions
11:17 - you're giving to a computer
11:18 - so that's an example of block-based
11:20 - coding coding that
11:21 - is appropriate for younger students and
11:24 - then another way to teach
11:26 - k2 students to code is through
11:28 - game-based
11:29 - puzzles game-based tasks so here is an
11:32 - example
11:33 - in codable this is a game-based puzzle
11:36 - that also
11:37 - employs a drag and drop mechanic
11:40 - so students are dragging those arrow
11:42 - commands or those
11:44 - other commands up into those boxes
11:47 - in a certain order just like in block
11:49 - based coding where they
11:50 - link together in a certain order that
11:53 - will produce some sort of result
11:55 - in the game so in the codable example
11:58 - students are putting arrow commands in
12:01 - order to tell
12:02 - a little fuzzy character what directions
12:04 - to roll
12:05 - through the maze so in
12:09 - both examples in block-based coding and
12:12 - in
12:12 - the codable game-based puzzle there is
12:15 - a program there's code somewhere on the
12:18 - screen
12:19 - and then there's also a stage and the
12:22 - stage is
12:22 - the outcome it's showing what the code
12:25 - what the code does it's having some sort
12:27 - of a cause and effect
12:29 - and that's a really strong connection
12:31 - for our young students to make
12:32 - so when we think about why this works
12:36 - why these platforms really work for
12:39 - young students to learn how to code
12:41 - it's because there is that sensory
12:43 - feedback to
12:44 - every action changing the code or
12:47 - the input will change the output so what
12:50 - the learner sees
12:52 - or hears and students can utilize a lot
12:55 - of tools and resources that they might
12:57 - use in other subjects like
12:59 - the scientific method when they're
13:01 - learning to code so they're forming
13:03 - hypotheses about
13:04 - what their code will do and then they
13:07 - actually get to see
13:08 - the outcome what the code actually did
13:12 - and if there is something wrong in the
13:14 - code if
13:15 - one of those blocks are out of order or
13:17 - it's the wrong arrow command
13:20 - then they'll be able to see it
13:21 - immediately that feedback is right there
13:24 - they'll know that their code has a bug
13:26 - and then they can
13:27 - search they can go out and try to start
13:29 - fixing it so
13:31 - these platforms work to teach kids to
13:33 - code because they're visual
13:34 - they're interactive and they're
13:35 - oftentimes
13:37 - there's many possible solutions so
13:40 - there's not just
13:40 - one single way that a kid can solve a
13:43 - game-based puzzle or put together a
13:45 - block-based code
13:47 - there's many possible solutions to serve
13:49 - all different types of students
13:51 - but i do want to say that k2 coding
13:54 - does not only need to take place online
13:57 - or on tech devices i would say it's a
14:00 - little easier because
14:02 - if it's online then students can iterate
14:04 - faster and if they make a mistake they
14:06 - can change it
14:07 - and try something new a little bit
14:08 - faster than if they were
14:10 - writing with pen or paper but there are
14:13 - tons of unplugged
14:15 - pen and paper coding options that are a
14:17 - wonderful way to engage and get started
14:19 - with coding so if you don't have tech
14:21 - devices
14:22 - or you don't have one-to-one devices
14:24 - that doesn't need to be the reason why
14:26 - you don't pursue coding in your
14:27 - classroom
14:28 - here are some examples of worksheets
14:31 - that
14:31 - engage some of the similar computational
14:34 - thinking skills
14:35 - that those online coding platforms do
14:38 - and you can find a lot of these on our
14:39 - website
14:40 - but we've also seen some awesome
14:42 - examples on teachers pay teachers
14:44 - or pinterest or blogs there's a lot of
14:47 - options out there if you don't have tech
14:49 - devices for your students
14:52 - so how exactly do these programs teach
14:56 - kids to code
14:57 - we know why they might work but what are
14:59 - kids actually
15:00 - learning from these different types of
15:02 - programs they're doing
15:04 - two main things the first is that
15:07 - they are helping learners develop a real
15:10 - understanding of coding concepts
15:12 - the fundamental concepts like
15:15 - sequencing so putting things in order
15:19 - conditional statements so if then
15:22 - statements which are like
15:23 - if something happens then something else
15:25 - will happen
15:26 - that's a core coding concept also loops
15:29 - so having some sort of repetition
15:32 - debugging
15:33 - solving problems these core coding
15:36 - concepts
15:36 - students can learn in kindergarten or
15:39 - even before
15:40 - so they are able to learn some of the
15:42 - main coding concepts that they would
15:44 - then use
15:45 - for their entire coding trajectory and
15:48 - the reason why it's possible
15:50 - for kids to learn about these
15:51 - fundamentals at such a young age
15:53 - is because there are truly examples of
15:56 - all of these concepts
15:58 - all around us these coding concepts all
16:01 - have a real world
16:02 - analogy that kids have likely already
16:05 - seen they've already experienced and the
16:07 - role of a coding teacher
16:09 - is just to help them reframe it when we
16:12 - teach code
16:13 - we're helping them draw on this existing
16:15 - knowledge around the world
16:17 - and apply it in a new way so a good
16:18 - example might be
16:20 - sequence putting something in order your
16:23 - students have likely
16:25 - followed some sort of set of
16:27 - instructions in their life maybe they've
16:28 - put together
16:29 - a lego build where they followed
16:31 - step-by-step instructions
16:33 - perhaps they've executed a recipe
16:36 - they've baked something and they
16:37 - followed step-by-step instructions
16:39 - they know that if one of their
16:41 - instructions are out of order
16:43 - then the thing won't happen the way that
16:45 - they expect
16:46 - so they've seen examples of sequence and
16:49 - we just reframe it we say just like you
16:52 - follow a recipe step by step
16:54 - your computer is going to follow your
16:56 - instructions and code step by step
16:58 - there's really clear links and that's
17:00 - why it's possible for
17:01 - even our youngest students to
17:05 - to learn the concepts and to learn how
17:07 - to code
17:08 - and i do see i have a comment on the
17:11 - side from mona who's asking
17:13 - if we have vocabulary cards for the
17:16 - coding concepts
17:17 - and we do have vocabulary cards um
17:20 - at codable we're happy to connect you
17:23 - with those
17:24 - and if you want to create your own it's
17:27 - pretty easy to put these words onto
17:29 - cards and then to have them up in your
17:31 - classroom so
17:32 - that way if you see an example of
17:34 - sequence
17:35 - in an everyday life throughout the
17:37 - school day you can point to it
17:38 - and make that connection a little bit
17:40 - clearer so that's a great question
17:43 - and then the second way that kids coding
17:46 - programs can help teach
17:48 - kids to code besides just learning
17:51 - the coding concepts is to help develop
17:54 - a coding mindset and this is
17:57 - a really core piece of why
18:01 - it's important to teach kids to code
18:03 - especially at a young age
18:05 - so we're talking about skills that
18:08 - coders have that can benefit students
18:12 - in all walks of their life so this
18:14 - includes
18:15 - you know creative problem solving
18:17 - resilience
18:19 - creativity logical thinking knowing when
18:22 - to ask for help
18:24 - these are skills that will permeate into
18:26 - all other subjects and not just be
18:29 - helpful when learning to code so
18:33 - i always like to say that these programs
18:35 - are doing both of these things at the
18:36 - same time and that's why they're really
18:38 - effective learning tools
18:40 - now because coding education is drawing
18:43 - on
18:44 - such a wide range of personal skills the
18:46 - way that coding looks
18:48 - in a k2 classroom is going to be
18:51 - hugely diverse and different from class
18:53 - to class the way that your students
18:56 - code and engage with these coding
18:58 - platforms is going to be totally
19:00 - different
19:01 - from the way students in another
19:03 - classroom might engage with the same
19:05 - tools so i just wanted to show some
19:08 - images of what
19:10 - k2 coding might look like sometimes
19:14 - it could be head down focus i remember
19:16 - when i was
19:17 - teaching my middle schoolers how to code
19:20 - there were some class periods where it
19:22 - was totally silent you could hear a pin
19:24 - drop
19:25 - nobody was talking they were all in flow
19:27 - and really focused on their work
19:29 - but most of the time i would say because
19:31 - coding is so fun
19:34 - it might be a little bit more lively
19:36 - than
19:37 - other classes so there could be cheering
19:39 - and pointing
19:40 - and leaning into each other hands up
19:43 - talking
19:44 - chatter it there's there's a little bit
19:46 - of a spark in the classroom when
19:48 - kids are are learning how to code
19:50 - because it's a new skill
19:52 - and it's something that's engaging all
19:54 - of those
19:55 - those coding mindsets that i mentioned
19:57 - on the last slide
19:58 - so there will also be some frustrated
20:01 - size
20:02 - and some you know some noises that are
20:05 - indicating that
20:06 - kids are are stuck and that's also the
20:09 - beauty of coding
20:10 - they will ask their classmates or find a
20:12 - way on their own to solve the problems
20:14 - and
20:15 - that's important too okay wow i went
20:19 - through a lot just then so that was our
20:21 - section of the webinar where we were
20:23 - talking about what
20:24 - is coding for a young student we went
20:27 - through
20:27 - some of the platforms that you might see
20:30 - when
20:30 - looking up what to bring into your
20:32 - classroom as well as
20:35 - what kids are actually learning from
20:36 - these programs and what it might look
20:38 - like in your classroom
20:39 - i am going to take a quick pause right
20:42 - here i'm going to turn my attention
20:44 - over to the side and the comments on the
20:47 - side
20:48 - to say if you have any questions about
20:49 - what we talked about
20:51 - please type it now and i can help
20:54 - address them before we move on to the
20:56 - benefits
20:58 - so i'm just going to look for a couple
21:00 - minutes
21:01 - seconds really and to see if anything
21:04 - comes in and it looks like
21:05 - brie and gretchen have been popping in
21:08 - over there to help with some questions
21:10 - so thank you both
21:12 - great well it looks like we don't have
21:14 - any specific questions coming
21:16 - in of course another reminder if you
21:18 - have
21:19 - any questions that come up later please
21:21 - feel free to reach out and i will have a
21:23 - little q a
21:24 - moment at the end of the of the training
21:26 - as well
21:28 - so now that we've talked about the what
21:31 - of k2 coding what it is we can talk
21:34 - about the why
21:34 - and my guess is if you're watching this
21:37 - webinar
21:38 - chances are you do have some
21:41 - idea of how coding education can benefit
21:45 - your students but you might not know all
21:47 - the details and that's why we're here
21:49 - so i've broken this section down into
21:51 - three parts the benefits for students
21:53 - the benefits for teachers because there
21:55 - are some benefits for you
21:56 - and some benefits for admin and and
21:59 - school-wide benefits as well
22:02 - so first benefits for students this is
22:05 - likely why we're bringing coding into
22:06 - the classroom we want
22:08 - uh to help our students be the best that
22:11 - they can be and
22:12 - that's what we're going to talk about
22:13 - now so the first big benefit
22:17 - is the soft skills that students learn
22:20 - while coding that can be helpful in all
22:22 - areas of school
22:24 - and beyond so unlike hard skills
22:28 - that can be learned and evaluated
22:31 - these soft skills are they're a little
22:35 - bit more subtle
22:36 - they're they're harder to identify
22:39 - and they might be a little bit more
22:40 - difficult to measure but they are
22:42 - developed and fostered and nurtured
22:45 - through
22:46 - practice so we're talking about skills
22:49 - like teamwork and collaboration
22:51 - creative thinking and problem solving
22:53 - mental flexibility
22:55 - resilience and work ethic traditional
22:58 - schooling
22:59 - requires teachers to cover so much
23:01 - specific
23:02 - content knowledge that kids will be
23:04 - tested on so finding time
23:06 - to nurture and practice these soft
23:09 - skills can be really difficult
23:12 - and coding is one way to actively
23:14 - practice
23:15 - these soft skills that are you know
23:18 - they're equally as important these are
23:20 - skills that are going to serve them for
23:22 - their entire life so coding can really
23:25 - help with those soft skills for sure
23:28 - the next is developing executive
23:31 - functioning skills
23:33 - so similar to soft skills that are a
23:36 - little bit harder
23:37 - to target in traditional school but are
23:39 - still vital
23:41 - for future success coding can help
23:44 - target
23:44 - executive function skills like planning
23:47 - planning ahead
23:49 - self-pacing figuring out what pace would
23:52 - work best for you if working on a task
23:54 - by yourself
23:55 - working memory so remembering things in
23:59 - a short
23:59 - period of time and adaptability when
24:03 - faced with challenges so when presented
24:06 - with a challenge how do you
24:08 - respond and get through that challenge
24:12 - coding since there are so many
24:14 - opportunities to
24:16 - make mistakes but then also identify
24:18 - them and solve them
24:19 - it's really great for staying adaptable
24:22 - when faced with challenge and
24:24 - in general developing those executive
24:26 - function skills
24:28 - the third benefit for students is
24:30 - language development
24:31 - i think we all know that children are
24:33 - are better able to learn new languages
24:35 - when they're younger
24:36 - and code is just that it's a language
24:39 - and sometimes it's easy to forget that
24:42 - but it is a language that children can
24:45 - learn when they're
24:46 - younger they'll have a faster time to
24:47 - catch on as opposed to
24:49 - us adults who are interested in learning
24:50 - to code when we're older and we have a
24:52 - little bit more difficulty
24:54 - as well as being able to learn a
24:56 - language faster
24:58 - when they're younger language learning
25:00 - has been shown to improve
25:01 - a lot of things with student cognitive
25:04 - function so that includes
25:06 - you know enhanced problem-solving skills
25:08 - improved verbal abilities
25:10 - again better memory and creative
25:13 - thinking
25:14 - so because code is a language and
25:16 - language development has a lot of these
25:18 - benefits
25:19 - i just like to point that out it's one
25:20 - more benefit for your students
25:23 - and then the fourth one is increased
25:26 - self-efficacy so when we're talking
25:28 - about
25:28 - self-efficacy we're referring to a
25:31 - couple things
25:32 - one includes mental flexibility so how
25:35 - children are
25:36 - judging their own abilities their
25:38 - confidence levels
25:41 - their confidence in the ability to like
25:43 - exert control over
25:45 - one's own motivation and behavior and
25:48 - social environment uh coding and
25:51 - computer science lessons have been
25:52 - linked
25:52 - to increased self-efficacy especially
25:55 - for
25:56 - early elementary students these students
25:58 - have been shown to
25:59 - be more likely to stay on task to stay
26:02 - motivated to control their
26:04 - responses to stimuli in the classroom so
26:06 - that's another huge benefit
26:08 - for coding education so in summary
26:11 - for your benefits for students coding
26:14 - skills translate
26:15 - to many different areas and benefits
26:18 - students far beyond
26:20 - just learning to code which is why i
26:22 - love it so much
26:24 - okay up next is benefits for teachers so
26:28 - while i'm guessing most of you
26:30 - might be implementing a coding program
26:33 - for the benefit
26:34 - of your students there are some
26:36 - additional benefits for teachers that
26:38 - are a huge added bonus so the first
26:41 - is a classroom culture crafting a
26:44 - classroom culture
26:46 - that is meaningful for you and your
26:47 - students so what i mean by this
26:49 - is that coding can be difficult
26:52 - and by incorporating it you're telling
26:55 - your students that your classroom
26:57 - is a safe place to try something new to
27:00 - take a risk
27:01 - to come up and generate with multiple
27:03 - possible solutions
27:05 - when i was teaching i know my students
27:07 - would come to my classroom at their
27:10 - recess or their lunch breaks to just to
27:12 - ask crazy questions or to pitch
27:15 - a project idea just to let their
27:18 - creativity kind of run wild
27:20 - because they knew that the coding
27:21 - classroom that they entered was a place
27:24 - where
27:24 - they could do that they didn't have to
27:26 - do everything perfect they just had to
27:28 - put forward effort and
27:32 - express themselves how they wanted so
27:34 - even if you
27:35 - don't have your own classroom dedicated
27:37 - to coding if you are trying to
27:39 - incorporate coding
27:40 - or computer science into a math
27:42 - classroom or an english classroom
27:44 - just know that by doing so you are
27:47 - bringing in opportunities for
27:49 - problem solving and for risk taking and
27:52 - that's something really special for
27:53 - classroom culture
27:56 - and as well coding is oftentimes you
27:59 - know project-based
28:00 - which means students have the
28:01 - opportunity to bring in their own
28:03 - personal expression to your classroom so
28:06 - you have that opportunity for responsive
28:08 - teaching
28:10 - the second benefit for teachers is we
28:12 - talked about it a little bit on the last
28:14 - slide but
28:14 - student engagement and motivation as i
28:17 - mentioned on that student benefits slide
28:19 - coding and computer science has been
28:21 - linked to
28:22 - increased student engagement and
28:26 - motivation to learn really so this is
28:28 - obviously great news for your kiddos but
28:30 - it's a huge plus for you as the teacher
28:33 - it's so much more fun
28:34 - and easy to teach when students are
28:36 - excited to be at school and excited to
28:38 - be learning
28:40 - which really is the key coding is fun
28:43 - and my students were motivated in class
28:45 - because it was something different
28:46 - it was something that was drawing on
28:48 - parts of their their brain that
28:51 - the other classes weren't the other
28:52 - subjects weren't you get to make things
28:54 - and share
28:55 - projects so seeing my students happy was
28:57 - a real benefit to me and i'm
29:00 - happy and engaged and motivated and i'm
29:03 - sure it would be for you too
29:07 - and then the third benefit for teachers
29:09 - is going to be
29:11 - student self-sufficiency again they all
29:13 - kind of weave together but
29:15 - the nature of coding is filled with
29:17 - trial and error
29:19 - forming hypotheses testing iterating
29:22 - debugging you know there will be an
29:24 - uncountable
29:25 - number of times where students need to
29:28 - get unstuck
29:30 - and the joy of coding is that there are
29:32 - possible ways to make that happen so
29:34 - you'll see students helping themselves
29:37 - helping their classmates
29:38 - to solve their problems in a way that
29:40 - works for them
29:42 - and practice is key right so if you
29:45 - bring coding into your classroom and
29:46 - there are so many chances for them to
29:48 - solve their own problems
29:49 - they are going to reach self-sufficiency
29:52 - faster this example on the right this
29:55 - picture you're seeing was sent to us
29:56 - from a teacher who uses codable in their
29:59 - classroom
30:00 - and it's filled with recommendation
30:02 - questions that
30:03 - students can ask each other when they
30:06 - get stuck so it's a way for
30:08 - kids to help each other and to not have
30:10 - to raise their hand
30:11 - and ask the teacher when they're stuck
30:13 - every single time
30:14 - they can solve the problem on their own
30:17 - with the help from their classmates and
30:18 - that's really great
30:22 - finally there are benefits for school
30:25 - admin
30:26 - or for school-wide benefits as well
30:29 - and these are somewhat similar to
30:31 - benefits for teachers but i do think
30:32 - it's worth mentioning them on a
30:34 - school-wide a school-wide scale
30:36 - a bigger scale so the first bringing
30:39 - coding into your school
30:40 - can increase that culture of hard work
30:43 - we've talked about it a bunch but it's
30:44 - asking questions creative problem
30:46 - solving
30:47 - this doesn't need to be siloed to a
30:49 - single computer science room and frankly
30:51 - it shouldn't be it should be
30:53 - school-wide and i've seen a lot of
30:55 - schools have success
30:57 - when teachers buy in and are infusing
31:00 - coding or
31:00 - stem into every subject and not treating
31:04 - it just as an extra
31:06 - um i think this is important because
31:08 - when we treat computer science or stem
31:10 - as an add-on
31:11 - then our students are smart and they're
31:13 - learning
31:14 - that that stem and coding is separate
31:17 - from english and math and science and
31:19 - social studies
31:20 - when in the real world they're all
31:22 - really linked together stem
31:24 - and coding and computer science touch
31:26 - all of these subjects
31:27 - once they leave the school yard so i do
31:31 - like to encourage
31:33 - schools to be incorporating this and not
31:36 - treat it as separate
31:37 - that said fully integrating stem into a
31:41 - curriculum takes a ton of time and it's
31:43 - not going to happen overnight
31:44 - but i do think that coding especially is
31:46 - a a good smaller place to start
31:51 - and then a third benefit for admin is
31:54 - exposing children to new career paths
31:56 - you've likely seen some sort of a chart
31:59 - or
32:00 - like a bar graph that shows how exposure
32:03 - to computer science at a young age
32:05 - increases the likelihood that that child
32:08 - will pursue it again in the future
32:09 - either
32:10 - in graduate study or as a career and
32:13 - that is still totally true
32:15 - we never know what sort of interest we
32:17 - can spark
32:18 - with a new subject or a new experience
32:21 - so
32:21 - bringing coding into the classroom or
32:23 - into the school is a good way to
32:26 - expose students to something that they
32:28 - might not have realized was a
32:29 - possibility for them
32:33 - all right so we just went through the
32:35 - benefits we talked about benefits for
32:37 - students for teachers and for admin
32:39 - i'm again going to pause and just peek
32:41 - over to the
32:42 - the questions on the side to see if
32:45 - anything hasn't been touched on yet and
32:47 - if you have a question
32:48 - that you've been holding on to for this
32:50 - section please
32:51 - ask it now and i will see if i can get
32:53 - to it
32:57 - oh great yes i see some questions about
32:59 - digital citizenship
33:00 - cyber security oh goodness those are so
33:03 - important
33:04 - um we do have yeah i see that um brie
33:07 - responded we do have some
33:09 - introductory lessons on that i would
33:11 - also say
33:12 - that there are some other great digital
33:14 - citizenship resources with
33:17 - common sense media and code.org has a
33:21 - couple
33:21 - so there are digital citizenship
33:24 - resources out there if you have more
33:26 - questions
33:28 - okay great i don't see any more
33:32 - questions coming in specifically about
33:34 - the benefits so i'll move on to our
33:36 - buzzword review
33:37 - this is our vocabulary it's not a test
33:39 - we're just going to walk through
33:41 - some some vocab that if you're thinking
33:44 - about starting a coding program at your
33:45 - school you might run into
33:47 - and like i mentioned at the introduction
33:49 - some of these terms
33:50 - sound the same but mean different things
33:52 - and it can get confusing so
33:54 - i'm going to walk through all of them
33:56 - some of them are specifically related to
33:58 - coding they're coding terms and then
34:00 - some are more
34:01 - field-wide terms that you might run into
34:04 - in your research
34:06 - so the first we've talked about this one
34:08 - a bunch already but coding is
34:10 - giving a computer instructions for k2
34:13 - students we talked about how this can
34:14 - happen in the form of games or puzzles
34:17 - or worksheets
34:18 - or projects and a lot more options
34:21 - coding for k2 students is really all
34:23 - about sequencing
34:24 - so putting things in order recognizing
34:26 - when they're out of order
34:27 - and then employing other commands
34:31 - or other tools that can change the
34:33 - sequence
34:34 - can change the path of your code and
34:36 - again a huge emphasis
34:38 - for k2 coding specifically is debugging
34:41 - so recognizing when there's a problem
34:43 - being able to locate it
34:45 - and then trying many different
34:47 - possibilities for how to solve it
34:51 - now you've you've likely also heard me
34:53 - say program a couple times
34:55 - sometimes i use those interchangeably so
34:57 - if
34:58 - coding is giving a computer instructions
35:02 - then a program is the instructions
35:05 - themselves that's the word we
35:06 - use to refer to the actual instructions
35:09 - that a programmer gives to a computer
35:13 - so as you can see from this definition a
35:16 - program is the specific set of
35:17 - instructions that
35:19 - is that we give to a computer to read
35:21 - and follow
35:22 - and the the key here in a program
35:25 - order sequence as i mentioned before it
35:28 - really matters
35:28 - a computer will read a computer program
35:32 - the same way that we read a book
35:34 - from left to right top to bottom and if
35:35 - one of the instructions is out of order
35:37 - or written incorrectly then the program
35:41 - will not do what it's supposed to do it
35:43 - will not run properly
35:47 - and the third term here is algorithm and
35:50 - this is kind of one level deeper
35:52 - so i before i before i wrap up algorithm
35:54 - i do want to say
35:56 - if this is confusing and if these words
35:58 - mean the same thing um this again will
36:00 - be recorded you can always
36:01 - revisit i know sometimes if you're a
36:04 - super beginner to coding and you you
36:06 - have not been exposed to these words
36:07 - they can all
36:08 - kind of sound the same um but let's talk
36:10 - about algorithms so this is an exact
36:13 - specific set of steps needed for a
36:16 - computer to
36:17 - reach a specific outcome to do a
36:19 - specific thing
36:20 - so in code written by adults like the
36:24 - code that was written that allows me
36:26 - to speak to you on this live stream
36:28 - there are tons and tons and tons
36:31 - of algorithms in a single program tons
36:34 - of little tasks
36:35 - that the computer has to do for this to
36:38 - work properly
36:39 - in k2 coding because our students are so
36:42 - young
36:43 - there will often only be one or possibly
36:46 - two
36:47 - algorithms two tasks that students are
36:49 - controlling at any time so this will
36:51 - help with focus
36:53 - and they won't get bogged down with
36:55 - needing to remember
36:56 - tons of little things they want the
36:58 - computer to do there's typically
37:00 - only one and algorithms
37:03 - are all around us a great example is a
37:06 - recipe so you can see the image on the
37:08 - right
37:08 - is an algorithm showing how to
37:11 - make a peanut butter and jelly sandwich
37:14 - and
37:15 - this is an example of something that
37:17 - like mona had mentioned you can put on a
37:19 - word wall or you can put up on your wall
37:22 - as an anchor chart
37:23 - to show an everyday algorithm so in this
37:26 - case
37:27 - you need to follow the steps in the
37:29 - specific order
37:31 - in order to have the outcome you want
37:33 - make a peanut butter and jelly sandwich
37:35 - and if one of these things are out of
37:37 - order like you spread the peanut butter
37:39 - before you've cut the bread
37:41 - then you won't be able to make your
37:43 - sandwich properly so that is an example
37:45 - of an algorithm
37:48 - we're going on we're we're entering the
37:50 - world of computer science now so
37:52 - you've heard me jump between coding and
37:53 - computer science and here's the
37:55 - clarification
37:56 - computer science includes coding coding
37:59 - is a part of computer science
38:01 - but this field also looks at how
38:04 - computers and programs
38:06 - work and interact in the real world so
38:09 - there are some broader implications in
38:11 - computer science that might include
38:13 - things like robotics game design
38:16 - hardware and software digital
38:18 - citizenship like we were talking about
38:20 - in the chat
38:21 - these are all things that make up the
38:23 - field of computer science
38:25 - so you might be interested in just
38:27 - teaching coding
38:28 - really honing in on giving a computer
38:31 - specific instructions
38:33 - or if you're incorporating computer
38:36 - science you might be also looking at
38:38 - how things like robots and hardware and
38:41 - software
38:42 - and being a digital citizen what these
38:44 - things mean
38:45 - um in the real world
38:49 - stem we likely all know what stem stands
38:51 - for science technology engineering and
38:54 - math but something that i've noticed
38:55 - when i do my own research
38:57 - is that stem is really used quite
39:00 - frequently nowadays
39:01 - um in a lot to mean a lot of different
39:03 - things sometimes it means all four of
39:05 - these
39:06 - topics on their own but i personally
39:08 - think the key to stem
39:09 - is when these four words are grouped
39:11 - together it's that strong
39:13 - integration so i believe that
39:16 - with stem we're intentionally melding
39:18 - these disciplines together
39:20 - and this integration will encourage
39:22 - students to draw a connection between
39:24 - all four components
39:25 - so a good example is computer science
39:27 - it's a wonderful representation of the
39:29 - spirit of stem
39:30 - because as a field it integrates science
39:33 - technology engineering and math all for
39:35 - our
39:36 - are super incorporated which is also
39:38 - great if you're a math teacher and
39:40 - perhaps you've been prompted
39:42 - to bring coding into your math
39:44 - curriculum
39:45 - computer science already has so much
39:47 - math involved
39:48 - that it's a it's a really easy
39:50 - integration and
39:51 - is possible for any of us to do even
39:53 - with our youngest students
39:57 - okay we're almost done we have two more
39:58 - words the first is makerspace
40:01 - so if you're looking to start off with
40:03 - stem but
40:05 - you're not sure if you want to dive
40:06 - straight into coding
40:08 - there is another place to start and
40:09 - that's with maker spaces
40:11 - so maker spaces don't they do not need
40:14 - to be high-tech
40:15 - and they do not need to look like a
40:16 - pinterest board a maker space
40:19 - is really defined by the mindset
40:22 - having a maker's mindset is really
40:24 - powerful when students are
40:26 - constructing and building and creating
40:29 - things we're emphasizing
40:31 - that the process is as important as the
40:35 - product
40:36 - and having that maker's mindset is what
40:38 - defines the space
40:39 - you don't need all the bells and
40:40 - whistles to make it happen computer
40:42 - science concepts
40:43 - like robotics design or engineering
40:46 - app design um game design these are all
40:50 - things that can organically
40:52 - evolve from work in maker spaces
40:55 - and if uh i think makerspaces are a
40:59 - really stellar place to start if you
41:01 - want to see
41:02 - what your students are interested in you
41:04 - can give them open-ended creation time
41:06 - you'll see where they gravitate towards
41:08 - you'll see what sorts of things they are
41:10 - innately interested in making and then
41:13 - you can kind of build off of that
41:14 - to construct your stem or your computer
41:18 - science curriculum and
41:20 - you have options so you could have a
41:23 - maker corner in your classroom
41:25 - you could do like a pop-up maker space
41:28 - for a singular
41:29 - project when i taught computer science
41:32 - we did a game design
41:34 - unit where the classroom was transformed
41:37 - into a makerspace for a couple weeks so
41:38 - they could build
41:39 - board games before we then coded them
41:43 - using scratch so that's an option but
41:46 - you could also do a virtual
41:47 - maker space we saw virtual maker spaces
41:50 - really
41:51 - become popular during the school
41:53 - shutdowns with the pandemic
41:54 - so having some sort of place online that
41:57 - your students
41:58 - can go to like a google slide deck or
42:01 - some other
42:02 - website where there's multiple projects
42:05 - they can choose from they can click on
42:06 - them
42:07 - and then do you know a level encodable
42:10 - for example
42:10 - that's one option if you don't have a
42:12 - space to actually
42:14 - make a physical maker um it's not
42:16 - required
42:17 - and i'm wondering if maybe brie or
42:18 - gretchen you guys can
42:20 - uh plop the link to the blog post for
42:22 - the
42:23 - virtual makerspaces that we wrote we
42:26 - have a good one just for getting started
42:27 - if you're interested in that
42:31 - all right and then our final word today
42:33 - is project based learning
42:34 - this is a big one and honestly i could
42:36 - do an entire webinar just on this
42:38 - so i'm going to keep it brief but i did
42:40 - want to bring it up here because i think
42:41 - it's a fabulous way to
42:42 - help students start to draw connections
42:45 - between computer science and the world
42:47 - around them
42:48 - so project-based learning is really what
42:50 - it sounds like
42:51 - it's projects and learning
42:54 - through working on a longer project and
42:58 - these are often presented as like a
42:59 - challenge or a real world problem
43:01 - that will ask students to come up with a
43:04 - real
43:05 - solution and since computer science as
43:07 - we mentioned it
43:08 - it covers a wide range of topics that
43:11 - students are interacting with every day
43:13 - through technology or the apps on their
43:15 - phones hopefully your k2 students don't
43:17 - have phones but i know that they do
43:18 - because
43:19 - i saw when i was a teacher all of these
43:21 - things that they're interacting with
43:23 - daily
43:24 - you can they can come up with better
43:26 - solutions for them if there's a problem
43:27 - that they're facing and project-based
43:29 - learning
43:29 - is one way to do that
43:34 - oh okay we made it we're on to our last
43:36 - section before i dive in
43:38 - i'm gonna one more time turn my
43:40 - attention to the
43:42 - the questions and the comments just to
43:43 - see what you guys are chatting about
43:44 - over there and then we will
43:46 - jump into our final section which is how
43:48 - to connect with members of the stem
43:50 - community um oh great so i see
43:54 - some of us talking about our goals for
43:57 - the school year erica said my goal is to
43:59 - collaborate with teachers and combine
44:00 - coding and lessons being taught in the
44:02 - classroom
44:02 - i love that mona said i would like to
44:04 - incorporate
44:06 - coding into science and social studies
44:09 - we will be talking more about
44:10 - subject integration in next week's
44:12 - webinar so
44:14 - i recommend if you are interested in
44:16 - figuring out how
44:18 - computer science or coding might be
44:21 - integrated into
44:22 - whatever what other subjects you're
44:24 - teaching i highly recommend
44:26 - giving that one a peek we're going to
44:28 - dive into it a little bit more
44:29 - and make those connections clearer
44:32 - okey dokes so i don't see any more
44:35 - questions coming in
44:36 - i'm going to wrap up our webinar today
44:38 - with how to ask questions and get ideas
44:40 - from other teachers
44:41 - so if there's before i began i realized
44:44 - i don't have a slide for this but i did
44:45 - want to mention it
44:47 - if there's a coding or a stem program
44:49 - that you're curious about
44:51 - like codable or scratch
44:54 - and before you start you you would love
44:57 - to talk to a teacher who's already using
44:59 - it just to see how they're doing it
45:00 - and to learn a little bit more about the
45:02 - practical application
45:04 - i would recommend reaching out to
45:08 - somebody on that team somebody who works
45:10 - on the product like a customer service
45:12 - rep or somebody at the company
45:14 - i can speak from codable's experience we
45:16 - have teachers all over the world using
45:18 - codable in a
45:19 - wide variety of educational environments
45:22 - and we would love
45:23 - to connect you with a teacher who is
45:25 - also
45:26 - using that also using codable or
45:28 - whatever program
45:30 - in a similar way to offer insights or to
45:32 - answer questions since
45:34 - um they would be able to know some of
45:36 - the ins and outs
45:37 - better than we would since they have a
45:39 - similar teaching experience so that's
45:40 - just one thing i wanted to mention
45:42 - if you have specific questions about a
45:44 - program see if
45:45 - they can't connect you with a teacher
45:46 - who is also using that program i think
45:49 - it's a really nice way to learn
45:52 - okay so two ways to get involved and to
45:55 - get some of your questions answered are
45:56 - webinars and conferences
45:58 - these are two webinars that we love but
46:00 - there are a ton out there
46:02 - that one on the bottom that's computer
46:03 - science for rhode island those are not
46:05 - just rhode island
46:06 - themed webinars they just have a nice
46:08 - section on their website that
46:10 - maps out some free webinars that are
46:12 - coming up that
46:14 - you might be interested in signing up
46:15 - for and then as i mentioned
46:17 - at the beginning we have a couple
46:19 - webinars through codable
46:21 - happening next week on tuesday and then
46:23 - again in october and hopefully we can
46:25 - offer
46:26 - a lot more in the future as well and
46:28 - then conferences are
46:29 - an option they're a little bit more
46:31 - intensive because you are
46:32 - putting time aside to attend sometimes
46:34 - there is cost involved
46:36 - but it is a great place to meet with
46:38 - like-minded teachers and admin and
46:40 - learn about programs that you didn't
46:43 - even know
46:43 - existed so those are two options to
46:46 - start
46:47 - and then social media is really alive
46:50 - with stem and coding communities they're
46:52 - super active
46:54 - and these are two on facebook that we
46:56 - that we love and then
46:57 - a couple of our favorite instagram
46:59 - influencers
47:00 - stem influencers i mean they're a great
47:02 - place to get ideas
47:04 - like project ideas or classroom ideas
47:06 - and i know that many are really willing
47:08 - to connect and chat i mean they are
47:10 - teachers and parents
47:12 - just like you so that's one other place
47:14 - to go for
47:15 - for quick inspiration if you are
47:17 - interested in learning more about
47:19 - what coding might look like in different
47:22 - classrooms and actually see real
47:23 - pictures and videos from
47:25 - their work
47:28 - and with that we have reached the end of
47:31 - the presentation portion of this
47:32 - training
47:33 - i really hope that you gained some new
47:36 - ideas and some insights
47:38 - into k2 coding and that you you might be
47:41 - able to start picturing
47:42 - what it would mean for you and your
47:44 - students
47:46 - i don't see any more questions that have
47:47 - come in but i am going to quickly check
47:51 - my other list of questions to see if
47:53 - there were any more that might have
47:55 - come in throughout the webinar that we
47:57 - didn't have a chance to quickly answer
48:00 - and as i mentioned before if you don't
48:03 - if we don't have a chance to touch on
48:04 - your question
48:05 - or you didn't have a chance to ask it
48:07 - please do not hesitate to
48:10 - reach out i'm going to pop
48:13 - my um let me see if i can
48:17 - pop my oh it's already on there go
48:19 - hannah um i have my email
48:20 - on the screen here so if you have any
48:23 - other questions you can reach out to me
48:25 - directly and i'm happy to connect with
48:27 - you one to
48:29 - talk through how to bring codable into
48:30 - your classroom but also just to answer
48:32 - any other questions you might have
48:35 - so let's see great
48:38 - well i think that is it i'm going to
48:40 - close my presentation again
48:41 - thank you so much for joining us for
48:43 - today's webinar i had a blast
48:45 - i hope you learned something and you get
48:46 - to take something away i mentioned it
48:48 - before
48:49 - this webinar will be recorded please
48:51 - come back feel free to check in
48:52 - and review anything that you might have
48:55 - missed or
48:55 - to check in on our other free webinars
48:57 - that are coming up but i hope you have a
48:59 - wonderful day
49:00 - and happy coding bye

Cleaned transcript:

hello everyone uh thank you so much for joining us for today's teacher training about breaking down k2 coding i'm going to wait just a couple more minutes to see if more people will be joining us but this webinar will be recorded so if you need to leave for whatever reason if you want to review some of the things we talk about without taking notes today you will be able to do that so in this webinar today we're going to be covering some of the most very basics of bringing coding into your k2 classroom and this is for complete beginners or if you are someone who has already shown interest in coding with your k2 students and want a little bit of a refresher going into next school year this is made for you as well we're going to be covering what k2 coding means for five to sevenyearolds as well as some of the benefits not just for your students but for you the teacher or the administrators at your school there's a lot of benefits when you bring coding into your classroom so we'll chat about that and we'll be sure to cover how to join the amazing community of stem teachers that exist in the k2 coding sphere and there's some really awesome teachers doing great work so i'll talk about how you can connect with them if you want to learn a little bit more before we begin yeah i just want to mention one more housekeeping item which is that we have a couple other webinars coming up we have this one today which is really about the basics introducing you to k2 coding in general but next week on wednesday or on tuesday excuse me we'll be talking about the steps to take to actually start coding with your students so step by step where to start what to do next so if that's interesting to you that's happening next tuesday and then in october we're also going to be chatting about progress tracking measuring achievement and evaluating success in a coding classroom so be sure to check that out that'll be in october we have links to those webinars on our website and if you have any questions please feel free to reach out to us at codable or to me and we can tell you a little bit more about what those webinars will be about so i am going to jump into the training today breaking down k2 coding and i do want to mention that if you have any questions throughout the webinar please feel free to write into the chat i have my colleagues brie and gretchen hanging out in there they're ready to answer any questions you might have and then i will of course be checking that chat throughout the webinar and answering anything that i can do as well so i am going to hop into our slides today breaking down k2 coding and i'm going to kick us off with the agenda for today's training session um this training is going to be a little bit more conversational in style than some webinars that i've seen in the past the reason being that this information is not one size fits all it's really going to change or evolve based on the needs of your students and your classroom so hopefully the information we cover today will provide a bit of a background and then we're here as well if you want to reach out and and make a plan a little bit more specific for your school so this is going to be an overview i will give a short introduction about me where i'm from and why i'm hosting this webinar today we'll go over what coding really means for a kindergarten a first or a second grader it's not the same as what coding will mean for us adults next we'll chat about the benefits of introducing coding to your youngest elementary students and like i mentioned before we'll chat about benefits not just for students but for teachers and for admin as well we will do a short vocabulary review i love how much teachers love vocabulary so we're going to cover some terminology that you might see as you're researching or investigating k2 coding resources a lot of words kind of look the same but they mean something different so we'll break down some some coding terms i will give some tips and tricks for how to connect with other teachers doing similar work in this field and finally at the end we'll leave some time for question and answers but like i mentioned before i'll be checking that chat on the side oh hello everyone thank you for joining i'll be checking that chat on the side and answering questions as we go and brie and gretchen are in there too to check in and answer any questions you might have so again here's our roadmap for the training today and we're going to start with a quick introduction so a little bit about me my name is hannah i'm based out of san francisco and i'm the instructional designer at codable here i am hello and i love teaching kids to code i've been doing work in this field both as a teacher and a curriculum designer and have had the pleasure of doing so in a wide variety of settings i've been a museum educator a camp director a preschool teacher and taught computer science both at the elementary and middle school levels so i really just love kids coding in general i earned my master's of education in learning design and technology with a focus in designing kids coding apps and resources and was thrilled when i joined the codable team in 2019 so i'm so excited to have all of you joining me today if you feel like it i love that many of you are already introducing yourself in the comments if you want to tell us where you're from or what role you hold and why you're interested in kids coding please feel free i want that to be a real community where you guys can ask questions and introduce yourself throughout the webinar and i'm excited to learn from all of you as well so like i said i work at codable codable teaches kids to code using fun interactive games and a large audience that we that we have are k through two classrooms but our games do cover topics ranging all the way up to fifth grade computer science standards so a k5 uh a k5 range so this teach this training is geared for any teacher using any tool you do not need to know about codable or have a free codable account to learn alongside me today and that said i will be using codeable in most of my examples during the webinar today since that is the tool that i know the best so if you're interested in learning more about codable please don't hesitate to reach out to me directly or the codeable team we're happy to chat and brainstorm about how to make codable work for your classroom and again this is for any teacher but i wanted to point out that codable is the tool that i will be talking about the most so let's jump in with the big one this is the the main topic of today's training what does coding mean in kindergarten for first or second grade um when i tell people that i work for a company that teaches elementary students to code i often get uh skeptical responses people saying really how does how exactly does that work are are those kids really learning how to code and i get the skepticism when we think of coding we often think of you know a a person working alone in a dark room with a glowing computer screen writing sentences and sentences of this random jar bowl of symbols and numbers and text so it's not going to look like that but yes i'm here to tell you that kids can code it'll look different than this picture we have in our head but they can do it so that's what the first part of our chat will be about we're going to break down some assumptions about what is coding and what does it mean for our youngest students so what is coding at its core coding means giving a computer clear instructions in a language it understands to produce a specific result so in other words it's telling a computer what to do and we can't do that just by telling it what to do in english or any other human speaking language we do that with code that's the language that computers understand so like i said you might picture someone coding like this maybe they're working in isolation they're writing lines and lines and lines of letters and numbers and symbols and this is what coding might look like for a lot of adults in certain settings but when we talk about kids coding we are definitely referring to something different we would not expect our elementary students to type lines and lines of syntax in front of a screen for hours we know that that's not developmentally appropriate or interesting for them at all however kids can absolutely do what this definition of coding describes they can give a computer really clear instructions to produce a result to have some sort of outcome so this is what we mean when we say kids can code and you might ask well if kids aren't typing out lines of code then how exactly are they still coding what does coding mean in this case and typically effective k2 coding apps or resources will employ some sort of drag and drop interactive something that engages fine motor skills that might cater to prereaders with symbols and shapes and colors as opposed to text and words so this picture on the right this is an example of a young student working in codable and you can see already that it's a bit more interactive than that picture prior where you're just typing on a keyboard kids coding can be really visual really interactive and engaging and it doesn't have to be like what we sometimes picture adults doing when they're coding so let's dive in a little bit more to what k kindergarten first second or really elementary school in general what coding can be like what else is out there so one way to teach young students to code is through blockbased coding and you might have seen examples of blockbased coding maybe it's in a recommended curriculum for you to use or just through your own research of examples like scratch junior that's what you see here regular scratch so here's this example code.org does blockbased coding there's a lot of other options as well so these platforms utilize some sort of draganddrop learning environment where learners use these coding instructional blocks you can see those colorful blocks that sort of snap together like puzzle pieces in a certain order to create their code those instructions we talked about on the last slide the the instructions you're giving to a computer so that's an example of blockbased coding coding that is appropriate for younger students and then another way to teach k2 students to code is through gamebased puzzles gamebased tasks so here is an example in codable this is a gamebased puzzle that also employs a drag and drop mechanic so students are dragging those arrow commands or those other commands up into those boxes in a certain order just like in block based coding where they link together in a certain order that will produce some sort of result in the game so in the codable example students are putting arrow commands in order to tell a little fuzzy character what directions to roll through the maze so in both examples in blockbased coding and in the codable gamebased puzzle there is a program there's code somewhere on the screen and then there's also a stage and the stage is the outcome it's showing what the code what the code does it's having some sort of a cause and effect and that's a really strong connection for our young students to make so when we think about why this works why these platforms really work for young students to learn how to code it's because there is that sensory feedback to every action changing the code or the input will change the output so what the learner sees or hears and students can utilize a lot of tools and resources that they might use in other subjects like the scientific method when they're learning to code so they're forming hypotheses about what their code will do and then they actually get to see the outcome what the code actually did and if there is something wrong in the code if one of those blocks are out of order or it's the wrong arrow command then they'll be able to see it immediately that feedback is right there they'll know that their code has a bug and then they can search they can go out and try to start fixing it so these platforms work to teach kids to code because they're visual they're interactive and they're oftentimes there's many possible solutions so there's not just one single way that a kid can solve a gamebased puzzle or put together a blockbased code there's many possible solutions to serve all different types of students but i do want to say that k2 coding does not only need to take place online or on tech devices i would say it's a little easier because if it's online then students can iterate faster and if they make a mistake they can change it and try something new a little bit faster than if they were writing with pen or paper but there are tons of unplugged pen and paper coding options that are a wonderful way to engage and get started with coding so if you don't have tech devices or you don't have onetoone devices that doesn't need to be the reason why you don't pursue coding in your classroom here are some examples of worksheets that engage some of the similar computational thinking skills that those online coding platforms do and you can find a lot of these on our website but we've also seen some awesome examples on teachers pay teachers or pinterest or blogs there's a lot of options out there if you don't have tech devices for your students so how exactly do these programs teach kids to code we know why they might work but what are kids actually learning from these different types of programs they're doing two main things the first is that they are helping learners develop a real understanding of coding concepts the fundamental concepts like sequencing so putting things in order conditional statements so if then statements which are like if something happens then something else will happen that's a core coding concept also loops so having some sort of repetition debugging solving problems these core coding concepts students can learn in kindergarten or even before so they are able to learn some of the main coding concepts that they would then use for their entire coding trajectory and the reason why it's possible for kids to learn about these fundamentals at such a young age is because there are truly examples of all of these concepts all around us these coding concepts all have a real world analogy that kids have likely already seen they've already experienced and the role of a coding teacher is just to help them reframe it when we teach code we're helping them draw on this existing knowledge around the world and apply it in a new way so a good example might be sequence putting something in order your students have likely followed some sort of set of instructions in their life maybe they've put together a lego build where they followed stepbystep instructions perhaps they've executed a recipe they've baked something and they followed stepbystep instructions they know that if one of their instructions are out of order then the thing won't happen the way that they expect so they've seen examples of sequence and we just reframe it we say just like you follow a recipe step by step your computer is going to follow your instructions and code step by step there's really clear links and that's why it's possible for even our youngest students to to learn the concepts and to learn how to code and i do see i have a comment on the side from mona who's asking if we have vocabulary cards for the coding concepts and we do have vocabulary cards um at codable we're happy to connect you with those and if you want to create your own it's pretty easy to put these words onto cards and then to have them up in your classroom so that way if you see an example of sequence in an everyday life throughout the school day you can point to it and make that connection a little bit clearer so that's a great question and then the second way that kids coding programs can help teach kids to code besides just learning the coding concepts is to help develop a coding mindset and this is a really core piece of why it's important to teach kids to code especially at a young age so we're talking about skills that coders have that can benefit students in all walks of their life so this includes you know creative problem solving resilience creativity logical thinking knowing when to ask for help these are skills that will permeate into all other subjects and not just be helpful when learning to code so i always like to say that these programs are doing both of these things at the same time and that's why they're really effective learning tools now because coding education is drawing on such a wide range of personal skills the way that coding looks in a k2 classroom is going to be hugely diverse and different from class to class the way that your students code and engage with these coding platforms is going to be totally different from the way students in another classroom might engage with the same tools so i just wanted to show some images of what k2 coding might look like sometimes it could be head down focus i remember when i was teaching my middle schoolers how to code there were some class periods where it was totally silent you could hear a pin drop nobody was talking they were all in flow and really focused on their work but most of the time i would say because coding is so fun it might be a little bit more lively than other classes so there could be cheering and pointing and leaning into each other hands up talking chatter it there's there's a little bit of a spark in the classroom when kids are are learning how to code because it's a new skill and it's something that's engaging all of those those coding mindsets that i mentioned on the last slide so there will also be some frustrated size and some you know some noises that are indicating that kids are are stuck and that's also the beauty of coding they will ask their classmates or find a way on their own to solve the problems and that's important too okay wow i went through a lot just then so that was our section of the webinar where we were talking about what is coding for a young student we went through some of the platforms that you might see when looking up what to bring into your classroom as well as what kids are actually learning from these programs and what it might look like in your classroom i am going to take a quick pause right here i'm going to turn my attention over to the side and the comments on the side to say if you have any questions about what we talked about please type it now and i can help address them before we move on to the benefits so i'm just going to look for a couple minutes seconds really and to see if anything comes in and it looks like brie and gretchen have been popping in over there to help with some questions so thank you both great well it looks like we don't have any specific questions coming in of course another reminder if you have any questions that come up later please feel free to reach out and i will have a little q a moment at the end of the of the training as well so now that we've talked about the what of k2 coding what it is we can talk about the why and my guess is if you're watching this webinar chances are you do have some idea of how coding education can benefit your students but you might not know all the details and that's why we're here so i've broken this section down into three parts the benefits for students the benefits for teachers because there are some benefits for you and some benefits for admin and and schoolwide benefits as well so first benefits for students this is likely why we're bringing coding into the classroom we want uh to help our students be the best that they can be and that's what we're going to talk about now so the first big benefit is the soft skills that students learn while coding that can be helpful in all areas of school and beyond so unlike hard skills that can be learned and evaluated these soft skills are they're a little bit more subtle they're they're harder to identify and they might be a little bit more difficult to measure but they are developed and fostered and nurtured through practice so we're talking about skills like teamwork and collaboration creative thinking and problem solving mental flexibility resilience and work ethic traditional schooling requires teachers to cover so much specific content knowledge that kids will be tested on so finding time to nurture and practice these soft skills can be really difficult and coding is one way to actively practice these soft skills that are you know they're equally as important these are skills that are going to serve them for their entire life so coding can really help with those soft skills for sure the next is developing executive functioning skills so similar to soft skills that are a little bit harder to target in traditional school but are still vital for future success coding can help target executive function skills like planning planning ahead selfpacing figuring out what pace would work best for you if working on a task by yourself working memory so remembering things in a short period of time and adaptability when faced with challenges so when presented with a challenge how do you respond and get through that challenge coding since there are so many opportunities to make mistakes but then also identify them and solve them it's really great for staying adaptable when faced with challenge and in general developing those executive function skills the third benefit for students is language development i think we all know that children are are better able to learn new languages when they're younger and code is just that it's a language and sometimes it's easy to forget that but it is a language that children can learn when they're younger they'll have a faster time to catch on as opposed to us adults who are interested in learning to code when we're older and we have a little bit more difficulty as well as being able to learn a language faster when they're younger language learning has been shown to improve a lot of things with student cognitive function so that includes you know enhanced problemsolving skills improved verbal abilities again better memory and creative thinking so because code is a language and language development has a lot of these benefits i just like to point that out it's one more benefit for your students and then the fourth one is increased selfefficacy so when we're talking about selfefficacy we're referring to a couple things one includes mental flexibility so how children are judging their own abilities their confidence levels their confidence in the ability to like exert control over one's own motivation and behavior and social environment uh coding and computer science lessons have been linked to increased selfefficacy especially for early elementary students these students have been shown to be more likely to stay on task to stay motivated to control their responses to stimuli in the classroom so that's another huge benefit for coding education so in summary for your benefits for students coding skills translate to many different areas and benefits students far beyond just learning to code which is why i love it so much okay up next is benefits for teachers so while i'm guessing most of you might be implementing a coding program for the benefit of your students there are some additional benefits for teachers that are a huge added bonus so the first is a classroom culture crafting a classroom culture that is meaningful for you and your students so what i mean by this is that coding can be difficult and by incorporating it you're telling your students that your classroom is a safe place to try something new to take a risk to come up and generate with multiple possible solutions when i was teaching i know my students would come to my classroom at their recess or their lunch breaks to just to ask crazy questions or to pitch a project idea just to let their creativity kind of run wild because they knew that the coding classroom that they entered was a place where they could do that they didn't have to do everything perfect they just had to put forward effort and express themselves how they wanted so even if you don't have your own classroom dedicated to coding if you are trying to incorporate coding or computer science into a math classroom or an english classroom just know that by doing so you are bringing in opportunities for problem solving and for risk taking and that's something really special for classroom culture and as well coding is oftentimes you know projectbased which means students have the opportunity to bring in their own personal expression to your classroom so you have that opportunity for responsive teaching the second benefit for teachers is we talked about it a little bit on the last slide but student engagement and motivation as i mentioned on that student benefits slide coding and computer science has been linked to increased student engagement and motivation to learn really so this is obviously great news for your kiddos but it's a huge plus for you as the teacher it's so much more fun and easy to teach when students are excited to be at school and excited to be learning which really is the key coding is fun and my students were motivated in class because it was something different it was something that was drawing on parts of their their brain that the other classes weren't the other subjects weren't you get to make things and share projects so seeing my students happy was a real benefit to me and i'm happy and engaged and motivated and i'm sure it would be for you too and then the third benefit for teachers is going to be student selfsufficiency again they all kind of weave together but the nature of coding is filled with trial and error forming hypotheses testing iterating debugging you know there will be an uncountable number of times where students need to get unstuck and the joy of coding is that there are possible ways to make that happen so you'll see students helping themselves helping their classmates to solve their problems in a way that works for them and practice is key right so if you bring coding into your classroom and there are so many chances for them to solve their own problems they are going to reach selfsufficiency faster this example on the right this picture you're seeing was sent to us from a teacher who uses codable in their classroom and it's filled with recommendation questions that students can ask each other when they get stuck so it's a way for kids to help each other and to not have to raise their hand and ask the teacher when they're stuck every single time they can solve the problem on their own with the help from their classmates and that's really great finally there are benefits for school admin or for schoolwide benefits as well and these are somewhat similar to benefits for teachers but i do think it's worth mentioning them on a schoolwide a schoolwide scale a bigger scale so the first bringing coding into your school can increase that culture of hard work we've talked about it a bunch but it's asking questions creative problem solving this doesn't need to be siloed to a single computer science room and frankly it shouldn't be it should be schoolwide and i've seen a lot of schools have success when teachers buy in and are infusing coding or stem into every subject and not treating it just as an extra um i think this is important because when we treat computer science or stem as an addon then our students are smart and they're learning that that stem and coding is separate from english and math and science and social studies when in the real world they're all really linked together stem and coding and computer science touch all of these subjects once they leave the school yard so i do like to encourage schools to be incorporating this and not treat it as separate that said fully integrating stem into a curriculum takes a ton of time and it's not going to happen overnight but i do think that coding especially is a a good smaller place to start and then a third benefit for admin is exposing children to new career paths you've likely seen some sort of a chart or like a bar graph that shows how exposure to computer science at a young age increases the likelihood that that child will pursue it again in the future either in graduate study or as a career and that is still totally true we never know what sort of interest we can spark with a new subject or a new experience so bringing coding into the classroom or into the school is a good way to expose students to something that they might not have realized was a possibility for them all right so we just went through the benefits we talked about benefits for students for teachers and for admin i'm again going to pause and just peek over to the the questions on the side to see if anything hasn't been touched on yet and if you have a question that you've been holding on to for this section please ask it now and i will see if i can get to it oh great yes i see some questions about digital citizenship cyber security oh goodness those are so important um we do have yeah i see that um brie responded we do have some introductory lessons on that i would also say that there are some other great digital citizenship resources with common sense media and code.org has a couple so there are digital citizenship resources out there if you have more questions okay great i don't see any more questions coming in specifically about the benefits so i'll move on to our buzzword review this is our vocabulary it's not a test we're just going to walk through some some vocab that if you're thinking about starting a coding program at your school you might run into and like i mentioned at the introduction some of these terms sound the same but mean different things and it can get confusing so i'm going to walk through all of them some of them are specifically related to coding they're coding terms and then some are more fieldwide terms that you might run into in your research so the first we've talked about this one a bunch already but coding is giving a computer instructions for k2 students we talked about how this can happen in the form of games or puzzles or worksheets or projects and a lot more options coding for k2 students is really all about sequencing so putting things in order recognizing when they're out of order and then employing other commands or other tools that can change the sequence can change the path of your code and again a huge emphasis for k2 coding specifically is debugging so recognizing when there's a problem being able to locate it and then trying many different possibilities for how to solve it now you've you've likely also heard me say program a couple times sometimes i use those interchangeably so if coding is giving a computer instructions then a program is the instructions themselves that's the word we use to refer to the actual instructions that a programmer gives to a computer so as you can see from this definition a program is the specific set of instructions that is that we give to a computer to read and follow and the the key here in a program order sequence as i mentioned before it really matters a computer will read a computer program the same way that we read a book from left to right top to bottom and if one of the instructions is out of order or written incorrectly then the program will not do what it's supposed to do it will not run properly and the third term here is algorithm and this is kind of one level deeper so i before i before i wrap up algorithm i do want to say if this is confusing and if these words mean the same thing um this again will be recorded you can always revisit i know sometimes if you're a super beginner to coding and you you have not been exposed to these words they can all kind of sound the same um but let's talk about algorithms so this is an exact specific set of steps needed for a computer to reach a specific outcome to do a specific thing so in code written by adults like the code that was written that allows me to speak to you on this live stream there are tons and tons and tons of algorithms in a single program tons of little tasks that the computer has to do for this to work properly in k2 coding because our students are so young there will often only be one or possibly two algorithms two tasks that students are controlling at any time so this will help with focus and they won't get bogged down with needing to remember tons of little things they want the computer to do there's typically only one and algorithms are all around us a great example is a recipe so you can see the image on the right is an algorithm showing how to make a peanut butter and jelly sandwich and this is an example of something that like mona had mentioned you can put on a word wall or you can put up on your wall as an anchor chart to show an everyday algorithm so in this case you need to follow the steps in the specific order in order to have the outcome you want make a peanut butter and jelly sandwich and if one of these things are out of order like you spread the peanut butter before you've cut the bread then you won't be able to make your sandwich properly so that is an example of an algorithm we're going on we're we're entering the world of computer science now so you've heard me jump between coding and computer science and here's the clarification computer science includes coding coding is a part of computer science but this field also looks at how computers and programs work and interact in the real world so there are some broader implications in computer science that might include things like robotics game design hardware and software digital citizenship like we were talking about in the chat these are all things that make up the field of computer science so you might be interested in just teaching coding really honing in on giving a computer specific instructions or if you're incorporating computer science you might be also looking at how things like robots and hardware and software and being a digital citizen what these things mean um in the real world stem we likely all know what stem stands for science technology engineering and math but something that i've noticed when i do my own research is that stem is really used quite frequently nowadays um in a lot to mean a lot of different things sometimes it means all four of these topics on their own but i personally think the key to stem is when these four words are grouped together it's that strong integration so i believe that with stem we're intentionally melding these disciplines together and this integration will encourage students to draw a connection between all four components so a good example is computer science it's a wonderful representation of the spirit of stem because as a field it integrates science technology engineering and math all for our are super incorporated which is also great if you're a math teacher and perhaps you've been prompted to bring coding into your math curriculum computer science already has so much math involved that it's a it's a really easy integration and is possible for any of us to do even with our youngest students okay we're almost done we have two more words the first is makerspace so if you're looking to start off with stem but you're not sure if you want to dive straight into coding there is another place to start and that's with maker spaces so maker spaces don't they do not need to be hightech and they do not need to look like a pinterest board a maker space is really defined by the mindset having a maker's mindset is really powerful when students are constructing and building and creating things we're emphasizing that the process is as important as the product and having that maker's mindset is what defines the space you don't need all the bells and whistles to make it happen computer science concepts like robotics design or engineering app design um game design these are all things that can organically evolve from work in maker spaces and if uh i think makerspaces are a really stellar place to start if you want to see what your students are interested in you can give them openended creation time you'll see where they gravitate towards you'll see what sorts of things they are innately interested in making and then you can kind of build off of that to construct your stem or your computer science curriculum and you have options so you could have a maker corner in your classroom you could do like a popup maker space for a singular project when i taught computer science we did a game design unit where the classroom was transformed into a makerspace for a couple weeks so they could build board games before we then coded them using scratch so that's an option but you could also do a virtual maker space we saw virtual maker spaces really become popular during the school shutdowns with the pandemic so having some sort of place online that your students can go to like a google slide deck or some other website where there's multiple projects they can choose from they can click on them and then do you know a level encodable for example that's one option if you don't have a space to actually make a physical maker um it's not required and i'm wondering if maybe brie or gretchen you guys can uh plop the link to the blog post for the virtual makerspaces that we wrote we have a good one just for getting started if you're interested in that all right and then our final word today is project based learning this is a big one and honestly i could do an entire webinar just on this so i'm going to keep it brief but i did want to bring it up here because i think it's a fabulous way to help students start to draw connections between computer science and the world around them so projectbased learning is really what it sounds like it's projects and learning through working on a longer project and these are often presented as like a challenge or a real world problem that will ask students to come up with a real solution and since computer science as we mentioned it it covers a wide range of topics that students are interacting with every day through technology or the apps on their phones hopefully your k2 students don't have phones but i know that they do because i saw when i was a teacher all of these things that they're interacting with daily you can they can come up with better solutions for them if there's a problem that they're facing and projectbased learning is one way to do that oh okay we made it we're on to our last section before i dive in i'm gonna one more time turn my attention to the the questions and the comments just to see what you guys are chatting about over there and then we will jump into our final section which is how to connect with members of the stem community um oh great so i see some of us talking about our goals for the school year erica said my goal is to collaborate with teachers and combine coding and lessons being taught in the classroom i love that mona said i would like to incorporate coding into science and social studies we will be talking more about subject integration in next week's webinar so i recommend if you are interested in figuring out how computer science or coding might be integrated into whatever what other subjects you're teaching i highly recommend giving that one a peek we're going to dive into it a little bit more and make those connections clearer okey dokes so i don't see any more questions coming in i'm going to wrap up our webinar today with how to ask questions and get ideas from other teachers so if there's before i began i realized i don't have a slide for this but i did want to mention it if there's a coding or a stem program that you're curious about like codable or scratch and before you start you you would love to talk to a teacher who's already using it just to see how they're doing it and to learn a little bit more about the practical application i would recommend reaching out to somebody on that team somebody who works on the product like a customer service rep or somebody at the company i can speak from codable's experience we have teachers all over the world using codable in a wide variety of educational environments and we would love to connect you with a teacher who is also using that also using codable or whatever program in a similar way to offer insights or to answer questions since um they would be able to know some of the ins and outs better than we would since they have a similar teaching experience so that's just one thing i wanted to mention if you have specific questions about a program see if they can't connect you with a teacher who is also using that program i think it's a really nice way to learn okay so two ways to get involved and to get some of your questions answered are webinars and conferences these are two webinars that we love but there are a ton out there that one on the bottom that's computer science for rhode island those are not just rhode island themed webinars they just have a nice section on their website that maps out some free webinars that are coming up that you might be interested in signing up for and then as i mentioned at the beginning we have a couple webinars through codable happening next week on tuesday and then again in october and hopefully we can offer a lot more in the future as well and then conferences are an option they're a little bit more intensive because you are putting time aside to attend sometimes there is cost involved but it is a great place to meet with likeminded teachers and admin and learn about programs that you didn't even know existed so those are two options to start and then social media is really alive with stem and coding communities they're super active and these are two on facebook that we that we love and then a couple of our favorite instagram influencers stem influencers i mean they're a great place to get ideas like project ideas or classroom ideas and i know that many are really willing to connect and chat i mean they are teachers and parents just like you so that's one other place to go for for quick inspiration if you are interested in learning more about what coding might look like in different classrooms and actually see real pictures and videos from their work and with that we have reached the end of the presentation portion of this training i really hope that you gained some new ideas and some insights into k2 coding and that you you might be able to start picturing what it would mean for you and your students i don't see any more questions that have come in but i am going to quickly check my other list of questions to see if there were any more that might have come in throughout the webinar that we didn't have a chance to quickly answer and as i mentioned before if you don't if we don't have a chance to touch on your question or you didn't have a chance to ask it please do not hesitate to reach out i'm going to pop my um let me see if i can pop my oh it's already on there go hannah um i have my email on the screen here so if you have any other questions you can reach out to me directly and i'm happy to connect with you one to talk through how to bring codable into your classroom but also just to answer any other questions you might have so let's see great well i think that is it i'm going to close my presentation again thank you so much for joining us for today's webinar i had a blast i hope you learned something and you get to take something away i mentioned it before this webinar will be recorded please come back feel free to check in and review anything that you might have missed or to check in on our other free webinars that are coming up but i hope you have a wonderful day and happy coding bye
