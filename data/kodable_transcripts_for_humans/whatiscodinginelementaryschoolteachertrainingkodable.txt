With timestamps:

00:06 - [Music]
00:15 - [Music]
00:17 - let's jump in with the big one this is
00:19 - the the main topic of today's training
00:21 - what does coding mean in kindergarten
00:24 - first or
00:24 - second grade when i tell people that i
00:27 - work for a company that teaches
00:29 - elementary students to code i often get
00:32 - uh skeptical responses people saying
00:35 - really
00:36 - how does how exactly does that work are
00:38 - are those kids really learning how to
00:40 - code
00:40 - and i get the skepticism when we think
00:42 - of coding we often think
00:44 - of you know a person working alone
00:47 - in a dark room with a glowing computer
00:49 - screen writing sentences and sentences
00:51 - of
00:51 - this uh random garble of symbols and
00:54 - numbers and
00:55 - text so it's not going to look like that
00:58 - but yes i'm here to tell you that kids
00:59 - can code it'll look different than
01:01 - this picture we have in our head but
01:03 - they can do it so that's what the first
01:05 - part of our chat will be about
01:06 - we're going to break down some
01:07 - assumptions about what is coding and
01:10 - what does it mean for our youngest
01:11 - students
01:14 - so what is coding at its core
01:17 - coding means giving a computer
01:21 - clear instructions in a language it
01:23 - understands
01:24 - to produce a specific result in other
01:27 - words it's telling a computer
01:29 - what to do and we can't do that just by
01:33 - telling it what to do in english or any
01:35 - other human speaking language
01:37 - we do that with code that's the language
01:39 - that computers understand
01:42 - like i said you might picture someone
01:43 - coding like this maybe they're working
01:46 - in isolation
01:47 - they're writing lines and lines and
01:48 - lines of letters and numbers and symbols
01:51 - and this is what coding might look like
01:54 - for
01:55 - a lot of adults in certain settings but
01:58 - when we talk about kids coding we are
02:00 - definitely referring to something
02:02 - different we would not expect our
02:04 - elementary students to type
02:07 - lines and lines of syntax in front of a
02:09 - screen for hours
02:10 - we know that that's not developmentally
02:12 - appropriate or
02:13 - interesting for them at all however kids
02:17 - can absolutely do what this definition
02:19 - of coding
02:20 - describes they can give a computer
02:24 - really clear instructions to
02:27 - produce a result to have some sort of
02:29 - outcome so this is what we mean when we
02:31 - say
02:32 - kids can code and you might ask well
02:36 - if kids aren't typing out lines of code
02:38 - then
02:39 - how exactly are they still coding what
02:41 - does
02:42 - coding mean in this case and
02:46 - typically effective k2 coding apps or
02:49 - resources
02:50 - will employ some sort of drag and drop
02:54 - interactive something that engages fine
02:57 - motor skills
02:58 - that might cater to pre-readers with
03:01 - symbols and shapes and colors
03:03 - as opposed to text and words
03:06 - so this picture on the right this is an
03:09 - example of a young
03:10 - student working in codable and you can
03:13 - see already that
03:14 - it's a bit more interactive than that
03:16 - picture prior where you're just typing
03:19 - on a keyboard kid's coding can be
03:22 - really visual really interactive and
03:24 - engaging
03:25 - and it doesn't have to be like what we
03:28 - sometimes picture adults doing when
03:29 - they're coding
03:31 - so let's dive in a little bit more to
03:34 - what
03:35 - kindergarten for a second or really
03:37 - elementary school in general what coding
03:39 - can be like what else
03:40 - is out there so
03:43 - one way to teach young students to code
03:46 - is through
03:47 - block-based coding and you might have
03:50 - seen
03:50 - examples of block-based coding maybe
03:52 - it's in a recommended curriculum for you
03:55 - to use
03:56 - or just through your own research
03:59 - of examples like scratch junior that's
04:02 - what you see here
04:03 - um regular scratch so here's this
04:06 - example
04:07 - code.org does block-based coding there's
04:10 - a lot of other
04:11 - options as well these platforms
04:14 - utilize some sort of drag and drop
04:18 - learning environment where learners use
04:20 - these coding
04:22 - instructional blocks you can see those
04:24 - colorful blocks
04:25 - that sort of snap together like puzzle
04:27 - pieces in
04:28 - a certain order to create their code
04:33 - those instructions we talked about on
04:34 - the last slide the the instructions
04:36 - you're giving to a computer
04:38 - so that's an example of block-based
04:39 - coding coding that is appropriate for
04:42 - younger students
04:43 - and then another way to teach k2
04:46 - students to code is through
04:47 - game-based puzzles game-based tasks
04:51 - so here is an example in codable
04:54 - this is a game-based puzzle that also
04:57 - employs
04:58 - a drag-and-drop mechanic so students are
05:01 - dragging those arrow commands or those
05:03 - other commands up into those boxes
05:07 - in a certain order just like in block
05:09 - based coding where they link together in
05:10 - a certain order
05:12 - that will produce some sort of result in
05:14 - the game so in the codable
05:16 - example students are putting arrow
05:20 - commands in order to tell a little fuzzy
05:22 - character
05:23 - what directions to roll through the maze
05:27 - so in both examples in block-based
05:30 - coding
05:30 - and in the codable game-based puzzle
05:34 - there is a program there's code
05:37 - somewhere on the screen
05:38 - and then there's also a stage and the
05:41 - stage is the outcome it's showing what
05:43 - the code
05:44 - what the code does it's having some sort
05:46 - of a cause and effect
05:48 - and that's a really strong connection
05:50 - for our young students to make
05:52 - so when we think about why this works
05:55 - why these platforms really work for
05:58 - young students to learn how to code
06:00 - it's because there is that sensory
06:02 - feedback to every action
06:05 - changing the code or the input
06:08 - will change the output so what the
06:10 - learner sees
06:11 - or hears and students can utilize a lot
06:14 - of tools and resources that they might
06:17 - use in other subjects like
06:18 - the scientific method when they're
06:20 - learning to code so they're forming
06:22 - hypotheses about
06:24 - what their code will do and then they
06:26 - actually get to see
06:28 - the outcome what the code actually did
06:31 - and if there's something wrong in the
06:33 - code if
06:34 - one of those blocks are out of order or
06:37 - it's the wrong arrow command
06:39 - then they'll be able to see it
06:41 - immediately that feedback is right there
06:43 - they'll know that their code has a bug
06:46 - and
06:46 - then they can cert they can go out and
06:48 - try to start fixing it
06:49 - so these platforms work to teach kids to
06:52 - code because they're visual
06:53 - they're interactive and there are
06:55 - oftentimes um
06:57 - there's many possible solutions so
06:59 - there's not just one single way that a
07:01 - kid can solve
07:02 - a game-based puzzle or put together a
07:04 - block-based code
07:06 - there's many possible solutions to serve
07:08 - all different types of students
07:11 - i do want to say that k2 coding does not
07:14 - only
07:15 - need to take place online or on tech
07:17 - devices
07:18 - i would say it's a little easier because
07:21 - if it's online then students can iterate
07:23 - faster and if they make a mistake they
07:25 - can change it
07:26 - and try something new a little bit
07:28 - faster than if they were
07:29 - writing with pen or paper but there are
07:32 - tons
07:33 - of unplugged pen and paper coding
07:35 - options
07:36 - that are a wonderful way to engage and
07:38 - get started with coding so if you don't
07:40 - have tech devices
07:41 - or you don't have one-to-one devices
07:43 - that doesn't need to be the reason why
07:45 - you don't pursue coding in your
07:46 - classroom
07:47 - here are some examples of worksheets
07:50 - that
07:51 - engage some of the similar computational
07:53 - thinking skills
07:54 - that those online coding platforms do
07:57 - and you can find a lot of these on our
07:59 - website
08:00 - but we've also seen some awesome
08:01 - examples on teachers pay teachers or
08:03 - pinterest
08:04 - or blogs there's a lot of options out
08:06 - there if you don't have
08:08 - tech devices for your students
08:12 - so how exactly do these programs teach
08:15 - kids to code we know why they might work
08:18 - but what are kids actually
08:20 - learning from these different types of
08:22 - programs they're doing
08:23 - two main things the first is that
08:26 - they are helping learners develop a real
08:29 - understanding of coding concepts the
08:32 - fundamental
08:33 - concepts like sequencing
08:36 - so putting things in order conditional
08:39 - statements
08:40 - so if then statements which are like if
08:42 - something happens then something else
08:44 - will happen
08:45 - that's a core coding concept also loops
08:49 - so having some sort of repetition
08:51 - debugging
08:52 - solving problems these core coding
08:55 - concepts
08:56 - students can learn in kindergarten or
08:58 - even before
09:00 - so they are able to learn some of the
09:02 - main coding concepts that they would
09:03 - then use
09:04 - for their entire coding trajectory and
09:07 - the reason why it's possible
09:09 - for kids to learn about these
09:10 - fundamentals at such a young age is
09:13 - because
09:13 - there are truly examples of all of these
09:16 - concepts
09:18 - all around us these coding concepts all
09:20 - have a real world analogy
09:22 - that kids have likely already seen
09:25 - they've already experienced
09:26 - and the role of a coding teacher is just
09:29 - to help them reframe it
09:31 - when we teach code we're helping them
09:33 - draw on this existing knowledge around
09:35 - the world
09:36 - and apply it in a new way so a good
09:38 - example might be
09:39 - sequence putting something in order your
09:42 - students have likely
09:44 - followed some sort of set of
09:46 - instructions in their life maybe they've
09:48 - put together
09:49 - a lego build where they followed
09:50 - step-by-step instructions
09:52 - perhaps they've executed a recipe
09:55 - they've baked something and they've
09:56 - followed step by step instructions
09:58 - they know that if one of their
10:00 - instructions are out of order
10:02 - then the thing won't happen the way that
10:05 - they expect so they've seen examples of
10:07 - sequence
10:08 - and we just reframe it we say just like
10:11 - you follow a recipe step by step
10:13 - your computer is going to follow your
10:15 - instructions and code step by step
10:17 - there's really clear links and that's
10:19 - why it's possible for
10:21 - even our youngest students to um
10:24 - to learn the concepts and to learn how
10:26 - to code
10:28 - and i do see i have a comment on the
10:30 - side from mona who's
10:32 - asking if we have vocabulary cards for
10:35 - the coding concepts and we do have
10:37 - vocabulary cards
10:39 - um at codable we're happy to connect you
10:42 - with those
10:43 - and if you want to create your own it's
10:46 - pretty easy to put these words onto
10:48 - cards and then to have them up in your
10:50 - classroom so that way
10:52 - if you see an example of sequence in an
10:54 - everyday life
10:56 - throughout the school day you can point
10:57 - to it and make that connection a little
10:59 - bit clearer so that's a great question
11:02 - and then the second way that kids coding
11:05 - programs can help teach kids to code
11:08 - besides just learning the coding
11:11 - concepts
11:12 - is to help develop a coding mindset
11:15 - and this is a really core piece
11:18 - of why it's important to teach kids to
11:22 - code especially at a young age
11:24 - so we're talking about skills that
11:27 - coders have
11:29 - that can benefit students in all walks
11:32 - of their life
11:33 - so this includes you know creative
11:35 - problem solving
11:37 - resilience creativity
11:40 - logical thinking knowing when to ask for
11:42 - help
11:43 - these are skills that will permeate into
11:46 - all other subjects and not just
11:48 - be helpful when learning to code
11:52 - i always like to say that these programs
11:54 - are doing both of these things at the
11:56 - same time and that's why they're really
11:58 - effective learning tools
12:00 - now because coding education is drawing
12:02 - on
12:03 - such a wide range of personal skills the
12:06 - way that coding
12:07 - looks in a k2 classroom is going to be
12:10 - hugely diverse and different from class
12:13 - to class the way that your students
12:15 - code and engage with these coding
12:18 - platforms is going to be totally
12:19 - different
12:20 - from the way students in another
12:22 - classroom might engage
12:24 - with the same tools so i just wanted to
12:27 - show
12:27 - some images of what k2 coding might look
12:31 - like
12:32 - sometimes it could be head down focus
12:35 - i remember when i was teaching my middle
12:38 - schoolers
12:38 - how to code there were some class
12:40 - periods where it was totally
12:42 - silent you could hear a pin drop nobody
12:45 - was talking they were all
12:46 - in flow and really focused on their work
12:48 - but most of the time i would say
12:50 - because coding is so fun it might be a
12:53 - little bit more lively
12:55 - than other classes so there could be
12:58 - cheering and pointing and leaning into
13:01 - each other hands up
13:02 - talking chatter um if there's there's a
13:05 - little bit of a
13:06 - spark in the classroom when kids are are
13:08 - learning how to code because it's a new
13:10 - skill
13:11 - and it's something that's engaging all
13:13 - of those
13:14 - uh those coding mindsets that i
13:16 - mentioned on the last slide
13:18 - so there will also be some frustrated
13:20 - sighs
13:21 - and some you know some noises that are
13:24 - indicating that kids are
13:26 - are stuck and that's also the beauty of
13:28 - coding they will
13:30 - ask their classmates or find a way on
13:32 - their own to solve the problems
13:34 - and that's important too

Cleaned transcript:

let's jump in with the big one this is the the main topic of today's training what does coding mean in kindergarten first or second grade when i tell people that i work for a company that teaches elementary students to code i often get uh skeptical responses people saying really how does how exactly does that work are are those kids really learning how to code and i get the skepticism when we think of coding we often think of you know a person working alone in a dark room with a glowing computer screen writing sentences and sentences of this uh random garble of symbols and numbers and text so it's not going to look like that but yes i'm here to tell you that kids can code it'll look different than this picture we have in our head but they can do it so that's what the first part of our chat will be about we're going to break down some assumptions about what is coding and what does it mean for our youngest students so what is coding at its core coding means giving a computer clear instructions in a language it understands to produce a specific result in other words it's telling a computer what to do and we can't do that just by telling it what to do in english or any other human speaking language we do that with code that's the language that computers understand like i said you might picture someone coding like this maybe they're working in isolation they're writing lines and lines and lines of letters and numbers and symbols and this is what coding might look like for a lot of adults in certain settings but when we talk about kids coding we are definitely referring to something different we would not expect our elementary students to type lines and lines of syntax in front of a screen for hours we know that that's not developmentally appropriate or interesting for them at all however kids can absolutely do what this definition of coding describes they can give a computer really clear instructions to produce a result to have some sort of outcome so this is what we mean when we say kids can code and you might ask well if kids aren't typing out lines of code then how exactly are they still coding what does coding mean in this case and typically effective k2 coding apps or resources will employ some sort of drag and drop interactive something that engages fine motor skills that might cater to prereaders with symbols and shapes and colors as opposed to text and words so this picture on the right this is an example of a young student working in codable and you can see already that it's a bit more interactive than that picture prior where you're just typing on a keyboard kid's coding can be really visual really interactive and engaging and it doesn't have to be like what we sometimes picture adults doing when they're coding so let's dive in a little bit more to what kindergarten for a second or really elementary school in general what coding can be like what else is out there so one way to teach young students to code is through blockbased coding and you might have seen examples of blockbased coding maybe it's in a recommended curriculum for you to use or just through your own research of examples like scratch junior that's what you see here um regular scratch so here's this example code.org does blockbased coding there's a lot of other options as well these platforms utilize some sort of drag and drop learning environment where learners use these coding instructional blocks you can see those colorful blocks that sort of snap together like puzzle pieces in a certain order to create their code those instructions we talked about on the last slide the the instructions you're giving to a computer so that's an example of blockbased coding coding that is appropriate for younger students and then another way to teach k2 students to code is through gamebased puzzles gamebased tasks so here is an example in codable this is a gamebased puzzle that also employs a draganddrop mechanic so students are dragging those arrow commands or those other commands up into those boxes in a certain order just like in block based coding where they link together in a certain order that will produce some sort of result in the game so in the codable example students are putting arrow commands in order to tell a little fuzzy character what directions to roll through the maze so in both examples in blockbased coding and in the codable gamebased puzzle there is a program there's code somewhere on the screen and then there's also a stage and the stage is the outcome it's showing what the code what the code does it's having some sort of a cause and effect and that's a really strong connection for our young students to make so when we think about why this works why these platforms really work for young students to learn how to code it's because there is that sensory feedback to every action changing the code or the input will change the output so what the learner sees or hears and students can utilize a lot of tools and resources that they might use in other subjects like the scientific method when they're learning to code so they're forming hypotheses about what their code will do and then they actually get to see the outcome what the code actually did and if there's something wrong in the code if one of those blocks are out of order or it's the wrong arrow command then they'll be able to see it immediately that feedback is right there they'll know that their code has a bug and then they can cert they can go out and try to start fixing it so these platforms work to teach kids to code because they're visual they're interactive and there are oftentimes um there's many possible solutions so there's not just one single way that a kid can solve a gamebased puzzle or put together a blockbased code there's many possible solutions to serve all different types of students i do want to say that k2 coding does not only need to take place online or on tech devices i would say it's a little easier because if it's online then students can iterate faster and if they make a mistake they can change it and try something new a little bit faster than if they were writing with pen or paper but there are tons of unplugged pen and paper coding options that are a wonderful way to engage and get started with coding so if you don't have tech devices or you don't have onetoone devices that doesn't need to be the reason why you don't pursue coding in your classroom here are some examples of worksheets that engage some of the similar computational thinking skills that those online coding platforms do and you can find a lot of these on our website but we've also seen some awesome examples on teachers pay teachers or pinterest or blogs there's a lot of options out there if you don't have tech devices for your students so how exactly do these programs teach kids to code we know why they might work but what are kids actually learning from these different types of programs they're doing two main things the first is that they are helping learners develop a real understanding of coding concepts the fundamental concepts like sequencing so putting things in order conditional statements so if then statements which are like if something happens then something else will happen that's a core coding concept also loops so having some sort of repetition debugging solving problems these core coding concepts students can learn in kindergarten or even before so they are able to learn some of the main coding concepts that they would then use for their entire coding trajectory and the reason why it's possible for kids to learn about these fundamentals at such a young age is because there are truly examples of all of these concepts all around us these coding concepts all have a real world analogy that kids have likely already seen they've already experienced and the role of a coding teacher is just to help them reframe it when we teach code we're helping them draw on this existing knowledge around the world and apply it in a new way so a good example might be sequence putting something in order your students have likely followed some sort of set of instructions in their life maybe they've put together a lego build where they followed stepbystep instructions perhaps they've executed a recipe they've baked something and they've followed step by step instructions they know that if one of their instructions are out of order then the thing won't happen the way that they expect so they've seen examples of sequence and we just reframe it we say just like you follow a recipe step by step your computer is going to follow your instructions and code step by step there's really clear links and that's why it's possible for even our youngest students to um to learn the concepts and to learn how to code and i do see i have a comment on the side from mona who's asking if we have vocabulary cards for the coding concepts and we do have vocabulary cards um at codable we're happy to connect you with those and if you want to create your own it's pretty easy to put these words onto cards and then to have them up in your classroom so that way if you see an example of sequence in an everyday life throughout the school day you can point to it and make that connection a little bit clearer so that's a great question and then the second way that kids coding programs can help teach kids to code besides just learning the coding concepts is to help develop a coding mindset and this is a really core piece of why it's important to teach kids to code especially at a young age so we're talking about skills that coders have that can benefit students in all walks of their life so this includes you know creative problem solving resilience creativity logical thinking knowing when to ask for help these are skills that will permeate into all other subjects and not just be helpful when learning to code i always like to say that these programs are doing both of these things at the same time and that's why they're really effective learning tools now because coding education is drawing on such a wide range of personal skills the way that coding looks in a k2 classroom is going to be hugely diverse and different from class to class the way that your students code and engage with these coding platforms is going to be totally different from the way students in another classroom might engage with the same tools so i just wanted to show some images of what k2 coding might look like sometimes it could be head down focus i remember when i was teaching my middle schoolers how to code there were some class periods where it was totally silent you could hear a pin drop nobody was talking they were all in flow and really focused on their work but most of the time i would say because coding is so fun it might be a little bit more lively than other classes so there could be cheering and pointing and leaning into each other hands up talking chatter um if there's there's a little bit of a spark in the classroom when kids are are learning how to code because it's a new skill and it's something that's engaging all of those uh those coding mindsets that i mentioned on the last slide so there will also be some frustrated sighs and some you know some noises that are indicating that kids are are stuck and that's also the beauty of coding they will ask their classmates or find a way on their own to solve the problems and that's important too
