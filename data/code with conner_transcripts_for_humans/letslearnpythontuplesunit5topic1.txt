With timestamps:

00:02 - hello humans
00:03 - welcome back again this is code with
00:04 - connor we are doing the let's learn
00:06 - python tutorial course
00:08 - we are now in unit number five which is
00:10 - our last
00:11 - unit let me double check that yep it's
00:13 - our last unit
00:14 - so we are in our last unit which is a
00:16 - big one it's on data structures
00:17 - this is kind of like everything's coming
00:19 - together into an important piece
00:21 - that lets us do a lot of other stuff in
00:23 - coding hopefully the unifor project went
00:25 - okay for you
00:26 - and you managed to get through that
00:28 - little palindrome checker
00:30 - looping through the words and we're
00:31 - going to jump into topic five we're
00:32 - going to start with tubals
00:34 - you know tubals are one of these things
00:35 - where it's like they have a niche and
00:36 - there's going to be times when you're
00:37 - like yeah i love some tubals
00:40 - and then when i'm going to teach you
00:40 - lists you're going to be like why would
00:42 - i ever use tubals
00:43 - but don't get me wrong there's still a
00:44 - great purpose for them and we should
00:46 - definitely hit on them it's just going
00:47 - to be a small lesson so here i am in my
00:48 - file
00:49 - and this is topic one for unit five
00:51 - we're gonna talk about two bulls now
00:53 - the important thing to understand about
00:54 - data structures up to this point every
00:57 - time we create a variable
00:58 - in our language that variable is allowed
01:00 - to store one thing
01:02 - and maybe we can change that thing like
01:04 - we can store a string
01:05 - called maestra and we can make it equal
01:07 - to hello and then later we can reassign
01:09 - it to be equal to world
01:11 - and that's all cool every variable we've
01:13 - created has only been able to be
01:14 - assigned one value
01:16 - and that's where data structures come in
01:17 - because that's not feasible
01:19 - you can't realistically program these
01:22 - large-scale projects
01:24 - when every single piece of information
01:26 - has to have its own variable name
01:28 - and that's when we get into data
01:29 - structures and data structures allow us
01:31 - to have a single variable name
01:33 - that can contain a bunch of different
01:36 - values and some of those values might be
01:39 - able to be reassigned if we're talking
01:40 - about lists
01:41 - some of those values might be now
01:42 - permanently stored within that that data
01:44 - structure
01:45 - like tubals so that's what we mean when
01:47 - we talk about data structures
01:49 - it's not anything crazy fancy it's just
01:50 - it provides that flexibility
01:52 - then now we can have a single variable
01:54 - name just one of them
01:56 - but that variable name might be might
01:57 - allow us to reference a bunch of stuff
02:00 - think about strings and how we had a
02:02 - string but technically
02:03 - we had a whole bunch of characters and
02:06 - we could index and
02:07 - access individual characters within a
02:09 - string using
02:10 - just the strings variable name same idea
02:13 - here
02:13 - but now we can control what's in these
02:16 - kind of
02:17 - lists or these data structures so tubals
02:19 - use rounded brackets
02:21 - they look something like this so i have
02:23 - x as an
02:24 - input from the user i'll just get rid of
02:26 - these ones that was
02:27 - when i was testing so user inputs an x
02:30 - and a y
02:31 - and then this is me creating a tuple i
02:33 - called it chords
02:34 - and you'll notice it's rounded brackets
02:38 - comma separated values this idea of
02:40 - comma separated values is the norm in
02:42 - data structures when programming
02:44 - okay so here's the first comma here's
02:47 - the second
02:48 - all right now all i'm doing is storing
02:50 - it and then printing it i'm just
02:52 - printing
02:53 - the variable chord so let's just run
02:54 - that real quick and then we'll go from
02:56 - there
02:56 - so x let's say three y four and then i
02:59 - could see it prints
03:01 - rounded brackets three comma four so
03:04 - it's printing the x and the y using the
03:07 - variable
03:08 - chords okay now we can use index
03:11 - notation on this as well
03:12 - so instead of printing chords i could
03:15 - print
03:16 - chords box 0
03:19 - which should only print the x so
03:22 - x negative 1 y 5
03:26 - and it only prints the x variable okay
03:29 - because i can use that index notation to
03:30 - isolate one element
03:32 - within my data structure coming back
03:34 - over we could do the same
03:36 - with box one where it would only print
03:38 - the y or we could get a little fancier
03:40 - we could do something like x
03:46 - where we use the x and the y strings in
03:49 - combination with the items from the data
03:51 - structure
03:52 - now because these are in we have to make
03:53 - sure we cast them to strings
03:56 - because if we're concatenating them with
03:57 - other strings it doesn't know what to do
04:00 - and you'll see my error from before when
04:01 - i tried it and realized
04:04 - because i also make mistakes and there
04:06 - we go x is five
04:07 - y is negative one so it's reading from
04:09 - that thing and really
04:11 - you're not seeing the power of data
04:12 - structures here but if you had a long
04:14 - list of things
04:15 - that you wanted to reference and then
04:17 - you want to be able to grab from that
04:18 - list throughout your program
04:20 - you can create that list as a tuple and
04:22 - then just a single variable name allows
04:24 - you to grab it
04:25 - so imagine doing a hangman game for
04:27 - example and you want to have a tuple
04:29 - that has a whole bunch of puzzles in it
04:32 - so it might have
04:33 - you know 100 hangman puzzles stored in
04:35 - it as strings
04:36 - and then you want to have a random
04:37 - generator that picks a number within the
04:39 - size range of the tuple
04:40 - and then it can just grab it right out
04:42 - of that data structure because it knows
04:44 - that it can use the same variable name
04:46 - and then an index with an integer
04:49 - to reference one of the puzzles so
04:51 - things like that
04:52 - you start to see the value in data
04:53 - structures versus having to have
04:54 - individual variables
04:56 - for all of these and how do you pick one
04:58 - well they all have different variable
04:59 - names they can't just randomly pick a
05:00 - variable name
05:01 - but i can randomly pick a number and
05:03 - that number could be an index
05:04 - of a data structure which then points to
05:07 - a string
05:08 - so we start to kind of put it together
05:09 - like that now really quickly
05:11 - there's something called immutability
05:13 - that we need to talk about so i'm going
05:15 - to
05:15 - bring something up here let's do
05:19 - so immutability is going to be the
05:22 - ability
05:23 - for something to be able to be
05:24 - overwritten in memory or not overwritten
05:26 - in memory
05:27 - so examples are all over the place but a
05:30 - lot of times programming languages kind
05:31 - of fake immune
05:32 - fade commutability in that if you
05:35 - reassign a variable it just points to a
05:36 - different memory address or
05:38 - if you have a bunch of things that all
05:39 - have the same value technically the
05:41 - value is only stored in memory one place
05:43 - but all the things are pointing at that
05:45 - same place but they have the ability to
05:47 - point somewhere else if you change their
05:48 - value
05:49 - and then there's things that are
05:50 - immutable where it's like once we define
05:52 - them or
05:53 - once we initialize them they're kind of
05:55 - set and those values are not changing
05:57 - so tuples are a great example of that so
06:00 - i've set the value of chords to be
06:02 - x and y now x and y are variable names
06:04 - they represent integers so
06:06 - if i change the value of x and y does
06:09 - that change the value of chords
06:11 - so if i go x is now 20 and y is now
06:14 - 30 and i reprint the chords variable
06:17 - will they change let's run it and see
06:21 - so we'll set it to two and zero so i see
06:24 - two and zero
06:25 - but then between this line of code and
06:27 - this line of code
06:28 - they should have changed value but
06:30 - chords is still printing the old x value
06:32 - and the old y value and that's a
06:34 - demonstration of that immutability that
06:36 - we were talking about
06:37 - even though these were variables when
06:39 - they were put into chords
06:41 - when those variables got passed into
06:43 - this tubal
06:44 - the tuple read the actual value of those
06:46 - variables
06:47 - and stored the value into the tuple it
06:50 - did not store a reference to the
06:52 - variable
06:53 - and so the variable can then change
06:55 - later on and it does not change the
06:57 - tuple
07:00 - okay
07:02 - so now one last thing before we move on
07:04 - from this let's say i try to manually
07:06 - change the value directly
07:08 - in my tuple so i do chords box 0 is now
07:11 - 20
07:12 - right so i'm going to say you know what
07:14 - i want to override that value forget
07:15 - that it's a variable not a variable
07:17 - whatever
07:18 - i need to change it in my tuple let's
07:20 - run this
07:21 - and it doesn't like it it says type
07:23 - error tubal object does not support item
07:25 - assignment
07:26 - so once you set up your tuple it's set
07:30 - up
07:30 - right that's that immutability piece and
07:33 - that's where we'll see more flexibility
07:34 - when we look at
07:35 - strings that's where we'll see the
07:37 - flexibility of using lists versus tuples
07:40 - is we have the ability to assign and
07:41 - change values dynamically
07:43 - okay so that's kind of an intro crash
07:45 - course with data structures
07:47 - let's look quickly at the challenge for
07:49 - this lesson
07:50 - which is not super practical because you
07:52 - wouldn't normally use tubals for
07:54 - something like this
07:55 - but you know what it kind of proves the
07:56 - point of what we're doing and that's
07:58 - okay sometimes that's all we need to do
07:59 - so here's our challenge x1
08:03 - let's do 0 0 for x and y1 and then a
08:06 - secondary point
08:07 - so let's do 5 and 2 and then it
08:10 - calculates the slope of the line
08:13 - so remember your slope formula and you
08:15 - google it if you need to
08:16 - it's y2 minus y1 all divided by x2 minus
08:19 - x1
08:20 - okay now what i want you to do and again
08:24 - not necessary but for the sake of
08:26 - practicing tuples
08:27 - store the first point as a coordinate
08:32 - store that first point the x1 y1 as a
08:34 - tuple store the second point the x2 y2
08:37 - as a tuple and then use the tuples with
08:39 - index notation
08:41 - when doing your slope calculation and
08:43 - that's just a good way to test
08:44 - and make sure we're using that tuple
08:46 - stuff correctly
08:47 - all right so good luck with the
08:50 - challenge we're into topic five this is
08:52 - the data structures unit we're almost
08:53 - there
08:54 - and we'll see you back here for lesson
08:55 - number two very soon
08:57 - don't forget like share subscribe and
08:59 - good luck with your coding
09:02 - see ya

Cleaned transcript:

hello humans welcome back again this is code with connor we are doing the let's learn python tutorial course we are now in unit number five which is our last unit let me double check that yep it's our last unit so we are in our last unit which is a big one it's on data structures this is kind of like everything's coming together into an important piece that lets us do a lot of other stuff in coding hopefully the unifor project went okay for you and you managed to get through that little palindrome checker looping through the words and we're going to jump into topic five we're going to start with tubals you know tubals are one of these things where it's like they have a niche and there's going to be times when you're like yeah i love some tubals and then when i'm going to teach you lists you're going to be like why would i ever use tubals but don't get me wrong there's still a great purpose for them and we should definitely hit on them it's just going to be a small lesson so here i am in my file and this is topic one for unit five we're gonna talk about two bulls now the important thing to understand about data structures up to this point every time we create a variable in our language that variable is allowed to store one thing and maybe we can change that thing like we can store a string called maestra and we can make it equal to hello and then later we can reassign it to be equal to world and that's all cool every variable we've created has only been able to be assigned one value and that's where data structures come in because that's not feasible you can't realistically program these largescale projects when every single piece of information has to have its own variable name and that's when we get into data structures and data structures allow us to have a single variable name that can contain a bunch of different values and some of those values might be able to be reassigned if we're talking about lists some of those values might be now permanently stored within that that data structure like tubals so that's what we mean when we talk about data structures it's not anything crazy fancy it's just it provides that flexibility then now we can have a single variable name just one of them but that variable name might be might allow us to reference a bunch of stuff think about strings and how we had a string but technically we had a whole bunch of characters and we could index and access individual characters within a string using just the strings variable name same idea here but now we can control what's in these kind of lists or these data structures so tubals use rounded brackets they look something like this so i have x as an input from the user i'll just get rid of these ones that was when i was testing so user inputs an x and a y and then this is me creating a tuple i called it chords and you'll notice it's rounded brackets comma separated values this idea of comma separated values is the norm in data structures when programming okay so here's the first comma here's the second all right now all i'm doing is storing it and then printing it i'm just printing the variable chord so let's just run that real quick and then we'll go from there so x let's say three y four and then i could see it prints rounded brackets three comma four so it's printing the x and the y using the variable chords okay now we can use index notation on this as well so instead of printing chords i could print chords box 0 which should only print the x so x negative 1 y 5 and it only prints the x variable okay because i can use that index notation to isolate one element within my data structure coming back over we could do the same with box one where it would only print the y or we could get a little fancier we could do something like x where we use the x and the y strings in combination with the items from the data structure now because these are in we have to make sure we cast them to strings because if we're concatenating them with other strings it doesn't know what to do and you'll see my error from before when i tried it and realized because i also make mistakes and there we go x is five y is negative one so it's reading from that thing and really you're not seeing the power of data structures here but if you had a long list of things that you wanted to reference and then you want to be able to grab from that list throughout your program you can create that list as a tuple and then just a single variable name allows you to grab it so imagine doing a hangman game for example and you want to have a tuple that has a whole bunch of puzzles in it so it might have you know 100 hangman puzzles stored in it as strings and then you want to have a random generator that picks a number within the size range of the tuple and then it can just grab it right out of that data structure because it knows that it can use the same variable name and then an index with an integer to reference one of the puzzles so things like that you start to see the value in data structures versus having to have individual variables for all of these and how do you pick one well they all have different variable names they can't just randomly pick a variable name but i can randomly pick a number and that number could be an index of a data structure which then points to a string so we start to kind of put it together like that now really quickly there's something called immutability that we need to talk about so i'm going to bring something up here let's do so immutability is going to be the ability for something to be able to be overwritten in memory or not overwritten in memory so examples are all over the place but a lot of times programming languages kind of fake immune fade commutability in that if you reassign a variable it just points to a different memory address or if you have a bunch of things that all have the same value technically the value is only stored in memory one place but all the things are pointing at that same place but they have the ability to point somewhere else if you change their value and then there's things that are immutable where it's like once we define them or once we initialize them they're kind of set and those values are not changing so tuples are a great example of that so i've set the value of chords to be x and y now x and y are variable names they represent integers so if i change the value of x and y does that change the value of chords so if i go x is now 20 and y is now 30 and i reprint the chords variable will they change let's run it and see so we'll set it to two and zero so i see two and zero but then between this line of code and this line of code they should have changed value but chords is still printing the old x value and the old y value and that's a demonstration of that immutability that we were talking about even though these were variables when they were put into chords when those variables got passed into this tubal the tuple read the actual value of those variables and stored the value into the tuple it did not store a reference to the variable and so the variable can then change later on and it does not change the tuple okay so now one last thing before we move on from this let's say i try to manually change the value directly in my tuple so i do chords box 0 is now 20 right so i'm going to say you know what i want to override that value forget that it's a variable not a variable whatever i need to change it in my tuple let's run this and it doesn't like it it says type error tubal object does not support item assignment so once you set up your tuple it's set up right that's that immutability piece and that's where we'll see more flexibility when we look at strings that's where we'll see the flexibility of using lists versus tuples is we have the ability to assign and change values dynamically okay so that's kind of an intro crash course with data structures let's look quickly at the challenge for this lesson which is not super practical because you wouldn't normally use tubals for something like this but you know what it kind of proves the point of what we're doing and that's okay sometimes that's all we need to do so here's our challenge x1 let's do 0 0 for x and y1 and then a secondary point so let's do 5 and 2 and then it calculates the slope of the line so remember your slope formula and you google it if you need to it's y2 minus y1 all divided by x2 minus x1 okay now what i want you to do and again not necessary but for the sake of practicing tuples store the first point as a coordinate store that first point the x1 y1 as a tuple store the second point the x2 y2 as a tuple and then use the tuples with index notation when doing your slope calculation and that's just a good way to test and make sure we're using that tuple stuff correctly all right so good luck with the challenge we're into topic five this is the data structures unit we're almost there and we'll see you back here for lesson number two very soon don't forget like share subscribe and good luck with your coding see ya
