With timestamps:

00:01 - [Music]
00:05 - for this lesson we're going to talk
00:06 - about strings in java as well some
00:08 - string methods looping printing
00:10 - all that fun stuff indexing and then
00:12 - we'll kind of be able to use those in
00:14 - the work that we do moving forward it's
00:16 - important to note that strings are not a
00:17 - primitive data type in java they're an
00:19 - object type so when we create a string
00:20 - there's a couple of different ways we
00:21 - can do it so let's look at a couple
00:23 - options
00:26 - so we can do something like a literal
00:28 - string which is our string wrap
00:29 - quotation marks so characters in
00:31 - quotation marks strung together to make
00:33 - a string
00:34 - and we can do it using the capital s
00:36 - string
00:37 - as the type
00:38 - word is the variable name and then
00:40 - equals quotes and just do a literal
00:41 - string you can also do string word two
00:44 - equals new string using object notation
00:50 - you won't really use that um but it's
00:53 - good to know that we can
00:58 - so we can print these out
01:04 - and we'll see that the strings print out
01:07 - so
01:08 - what we need to understand about strings
01:10 - is that strings are broken into indices
01:12 - starting from zero moving the way up and
01:14 - every single character that is strung
01:16 - together gets an index all the way from
01:17 - zero up to the end so there's a couple
01:20 - of important values one of them is
01:21 - length a length which is a method so it
01:24 - has double brackets so if we call
01:26 - word.length
01:29 - these are strings and we're going to
01:30 - print the length of each of these
01:32 - strings so when we look
01:36 - 19 and 60.
01:37 - so let's start counting starting with
01:38 - the acid superman so zero one
01:41 - sorry one for acid we're counting we
01:44 - start at one so one two three four five
01:46 - six seven eight nine ten eleven twelve
01:48 - thirty four to fifty sixteen seven
01:50 - eighteen nineteen so there's nineteen
01:51 - characters the spaces came as characters
01:54 - that's important okay so let's see here
01:56 - starting to count one two three four
01:58 - five so if i'm counting from one the
02:00 - fifth letter is r
02:02 - so i could also do what's called box
02:04 - notation to print an individual index so
02:07 - i could do box 5 which is just going to
02:09 - print the character found
02:12 - at oh no sorry
02:14 - so i can do something called a char app
02:16 - method char at
02:18 - where i put an index in and it will
02:20 - print only the character there so we
02:22 - counted and the fifth character was an r
02:25 - we run that and we get an m well it
02:27 - doesn't really make sense oh that's the
02:29 - one
02:30 - after hm let's start from zero zero one
02:33 - two three four five oh it's because
02:35 - we're starting at zero
02:37 - so remember the indices start at zero so
02:39 - when we're trying to pick a character we
02:41 - have to make sure that we use that
02:41 - notation okay
02:43 - you can also use a substring
02:47 - method where you can put a starting and
02:48 - an ending value so you could do like
02:51 - four comma five
02:54 - which would print the fourth character
02:56 - but not the fifth character but it
02:58 - prints it as a string
03:00 - so there's my r
03:02 - as opposed to as a character which is a
03:04 - primitive data type
03:05 - you can do longer ones like you could do
03:07 - from zero to five
03:09 - and print that
03:11 - right
03:12 - you could also just do five and then
03:15 - it'll print from five to the end of the
03:16 - word
03:19 - right
03:20 - so there's lots of different ways to use
03:22 - the substring method it's important that
03:23 - we recognize those ways when you do a
03:25 - double parameter
03:27 - it will include the first but exclude
03:30 - the second so this would be two three
03:32 - and four
03:33 - so zero one this would be p e and r
03:36 - okay so it's important that we recognize
03:37 - the fifth would not be included in that
03:40 - so we can also use the length method
03:42 - combined with substrings or combine with
03:44 - charades so let's say we wanted to print
03:45 - the last character
03:47 - in this we could do something like
03:49 - um
03:52 - the length of the word remember
03:54 - don't use the length as an index because
03:56 - it won't be there
03:57 - so minus two or minus one
04:01 - and then we could print that substring
04:05 - right there's the last
04:07 - character of the string and that's
04:09 - dynamic too so if i go back up to my
04:10 - thing and i add a couple exclamation
04:12 - points on the end
04:13 - and i run that
04:16 - you'll see that it has dynamically
04:17 - adjusted to the last character
04:19 - okay so lots of different ways we can do
04:21 - that
04:22 - we can also loop through
04:24 - our words
04:26 - so we could do something like four
04:28 - into i
04:30 - four into i equals zero i less than word
04:34 - dot length
04:36 - i plus plus
04:39 - system dot o dot print line
04:42 - um
04:43 - word dot char at
04:45 - i
04:47 - for example so print individual
04:48 - characters
04:49 - damn and i'll just shorten these to just
04:52 - superman and batman
04:54 - just to make shorter work
04:56 - okay so if i run that
04:59 - you'll see superman each character
05:01 - printed on an individual line
05:03 - because i'm accessing them one at a time
05:05 - using a loop remember this will not
05:06 - include length as an index so you're
05:08 - safe on getting hit with an out of
05:10 - bounds error which obviously you don't
05:12 - want to do
05:13 - you could have also done this with
05:14 - substring
05:16 - using i comma i plus 1 and that's fine
05:20 - again because this is exclusive so even
05:22 - at the end when that is going to be
05:24 - equal to length it won't include that
05:26 - value so you're not going to hit it out
05:27 - of bounds error
05:28 - and that'll print the exact same thing
05:31 - just record it as a string
05:33 - so we can do these loops so you can do
05:35 - while loops or all kinds of loops but
05:37 - this is the most common way we're going
05:38 - to loop through a word is using the
05:40 - length of the word and then grabbing
05:42 - substrings from within that word so
05:46 - you kind of get the sense
05:48 - how you can work with them now you can
05:49 - also concatenate strings together
05:51 - right so you can do something like
05:52 - string word three equals word
05:55 - one plus
05:57 - is in love with space plus word two
06:02 - and then
06:03 - system.out.printline word three
06:07 - right so it's going to take whatever the
06:08 - characters in word one are it's going to
06:10 - take this literal string concatenate it
06:12 - onto the end and then it's going to take
06:14 - this and it's going to concatenate it
06:15 - onto the end again
06:17 - print that
06:19 - oh
06:21 - oops
06:23 - where did i mess it up uh
06:25 - no semicolon that'll do it
06:29 - nope that wasn't it
06:34 - because it's not called word one it's
06:36 - called word there we go and we run that
06:39 - and there it is all concatenated
06:41 - together as one string
06:44 - so the java quick reference guide that
06:45 - you get with all your tests in the exam
06:47 - has a whole bunch of examples of the
06:48 - string methods that you're going to use
06:50 - but the the number one challenge that
06:51 - people have when it comes to strings is
06:53 - the indexing you need to be able to
06:54 - interpret the indexing in a string so
06:56 - knowing what character blocks are where
06:58 - and how you're going to loop through
07:00 - looking for certain things
07:03 - and that's really where the challenge is
07:04 - going to come we start talking about
07:05 - problem solving around strings so
07:07 - hopefully that helped talk to you later
07:09 - have a good day
07:12 - [Music]
07:20 - you

Cleaned transcript:

for this lesson we're going to talk about strings in java as well some string methods looping printing all that fun stuff indexing and then we'll kind of be able to use those in the work that we do moving forward it's important to note that strings are not a primitive data type in java they're an object type so when we create a string there's a couple of different ways we can do it so let's look at a couple options so we can do something like a literal string which is our string wrap quotation marks so characters in quotation marks strung together to make a string and we can do it using the capital s string as the type word is the variable name and then equals quotes and just do a literal string you can also do string word two equals new string using object notation you won't really use that um but it's good to know that we can so we can print these out and we'll see that the strings print out so what we need to understand about strings is that strings are broken into indices starting from zero moving the way up and every single character that is strung together gets an index all the way from zero up to the end so there's a couple of important values one of them is length a length which is a method so it has double brackets so if we call word.length these are strings and we're going to print the length of each of these strings so when we look 19 and 60. so let's start counting starting with the acid superman so zero one sorry one for acid we're counting we start at one so one two three four five six seven eight nine ten eleven twelve thirty four to fifty sixteen seven eighteen nineteen so there's nineteen characters the spaces came as characters that's important okay so let's see here starting to count one two three four five so if i'm counting from one the fifth letter is r so i could also do what's called box notation to print an individual index so i could do box 5 which is just going to print the character found at oh no sorry so i can do something called a char app method char at where i put an index in and it will print only the character there so we counted and the fifth character was an r we run that and we get an m well it doesn't really make sense oh that's the one after hm let's start from zero zero one two three four five oh it's because we're starting at zero so remember the indices start at zero so when we're trying to pick a character we have to make sure that we use that notation okay you can also use a substring method where you can put a starting and an ending value so you could do like four comma five which would print the fourth character but not the fifth character but it prints it as a string so there's my r as opposed to as a character which is a primitive data type you can do longer ones like you could do from zero to five and print that right you could also just do five and then it'll print from five to the end of the word right so there's lots of different ways to use the substring method it's important that we recognize those ways when you do a double parameter it will include the first but exclude the second so this would be two three and four so zero one this would be p e and r okay so it's important that we recognize the fifth would not be included in that so we can also use the length method combined with substrings or combine with charades so let's say we wanted to print the last character in this we could do something like um the length of the word remember don't use the length as an index because it won't be there so minus two or minus one and then we could print that substring right there's the last character of the string and that's dynamic too so if i go back up to my thing and i add a couple exclamation points on the end and i run that you'll see that it has dynamically adjusted to the last character okay so lots of different ways we can do that we can also loop through our words so we could do something like four into i four into i equals zero i less than word dot length i plus plus system dot o dot print line um word dot char at i for example so print individual characters damn and i'll just shorten these to just superman and batman just to make shorter work okay so if i run that you'll see superman each character printed on an individual line because i'm accessing them one at a time using a loop remember this will not include length as an index so you're safe on getting hit with an out of bounds error which obviously you don't want to do you could have also done this with substring using i comma i plus 1 and that's fine again because this is exclusive so even at the end when that is going to be equal to length it won't include that value so you're not going to hit it out of bounds error and that'll print the exact same thing just record it as a string so we can do these loops so you can do while loops or all kinds of loops but this is the most common way we're going to loop through a word is using the length of the word and then grabbing substrings from within that word so you kind of get the sense how you can work with them now you can also concatenate strings together right so you can do something like string word three equals word one plus is in love with space plus word two and then system.out.printline word three right so it's going to take whatever the characters in word one are it's going to take this literal string concatenate it onto the end and then it's going to take this and it's going to concatenate it onto the end again print that oh oops where did i mess it up uh no semicolon that'll do it nope that wasn't it because it's not called word one it's called word there we go and we run that and there it is all concatenated together as one string so the java quick reference guide that you get with all your tests in the exam has a whole bunch of examples of the string methods that you're going to use but the the number one challenge that people have when it comes to strings is the indexing you need to be able to interpret the indexing in a string so knowing what character blocks are where and how you're going to loop through looking for certain things and that's really where the challenge is going to come we start talking about problem solving around strings so hopefully that helped talk to you later have a good day you
