With timestamps:

00:02 - hello humans
00:03 - all right here we are in code with conor
00:05 - we're going to be looking at
00:07 - uh ap computer science stuff java stuff
00:09 - we're looking at recursion
00:11 - today so we're gonna do a little mini
00:12 - lesson on recursion and talk a bit about
00:15 - what it is and how it works let's jump
00:17 - into some code and start there
00:18 - okay so here i am in my class let's just
00:20 - go over briefly what i have
00:22 - i've got a my program file my
00:25 - program.java
00:26 - which has a main method then i have a
00:28 - non-public class inside
00:30 - that same file you can do multi-classes
00:31 - in the same file you just can't have
00:33 - multiple public classes in the same file
00:36 - which is fine
00:36 - again if you want to have a separate
00:38 - file do that so this just can be my main
00:40 - where i'm going to make objects and
00:41 - stuff
00:41 - in my recursor class we're going to talk
00:44 - about this function here
00:45 - we're done with this method here the
00:46 - factorial now we already know how to do
00:48 - a factorial
00:49 - okay so 5 factorial is 5 times 4
00:52 - times 3 times 2 times 1. it stops at 1
00:55 - because if we times by 0 then the whole
00:56 - thing's zero so
00:58 - obviously we don't want to do that so
01:00 - the idea here is using recursion in
01:02 - order to do that so what is recursion
01:03 - well
01:04 - i'll show you just right here inside of
01:06 - our factorial method
01:08 - you can see that there is a call to
01:11 - the factorial method this is creating
01:14 - what's called like a recursive
01:15 - stack or a recursive set of calls when
01:18 - you are
01:18 - calling the function from within the
01:20 - function
01:21 - essentially what happens is the first
01:24 - call
01:24 - can't end until all the nested calls
01:28 - have
01:28 - ended kind of imagine a set of like
01:31 - russian nesting dolls
01:32 - right if you were to take them all apart
01:34 - and you keep taking the tops off
01:37 - you can't put the thing back together
01:40 - again
01:41 - unless you close each of the inner
01:45 - pieces of it and then finally at the end
01:48 - you put the outer top back
01:49 - on it's the same idea as soon as you
01:51 - open that recursive box
01:53 - by doing a function call from within
01:55 - itself you have to let
01:57 - all of those inner function calls
01:59 - resolve themselves
02:01 - before your kind of outer function ends
02:04 - up
02:04 - being able to end okay so this means
02:07 - every time we do
02:08 - recursive functions we have to make sure
02:10 - that there's what's called a base
02:12 - case which means there has to be a way
02:15 - for the function to fully execute
02:18 - without
02:19 - calling itself if that doesn't exist
02:22 - there's no way for the function to end
02:24 - without calling itself then you'll end
02:26 - up in an infinite recursive loop
02:28 - because if not you'll end up in a
02:30 - recursive infinite loop which you don't
02:32 - want
02:33 - okay so let's look and find our base
02:35 - case in this factorial method
02:37 - so we have if n is not equal to zero
02:40 - return n so our current value multiplied
02:43 - by the factorial
02:45 - of n minus one else so in this case
02:48 - look at our precondition our
02:49 - precondition said that n has to be
02:51 - greater than or equal to zero coming
02:52 - into the function
02:54 - so if n is not equal to zero then it's
02:56 - anything above zero
02:58 - else should really just be the condition
02:59 - of if n is zero
03:01 - so else return one and you'll notice
03:04 - this line of code can execute
03:05 - without ever triggering another call to
03:09 - the factorial func method
03:10 - and because of that it's our base case
03:12 - so when n
03:13 - equals zero we are going to return a
03:17 - value of
03:18 - one okay that's going to be our base
03:21 - case
03:22 - got it so let's code trace this a little
03:25 - bit so we can see what's going on
03:27 - don't mind my handwriting it's terrible
03:28 - so let's say we wanted to do four
03:29 - factorial
03:31 - okay so we're gonna pass four to the
03:33 - first call of factory
03:36 - so four is going to come in here for n
03:39 - so n is not equal to zero so we're not
03:41 - running the else we're running the if
03:44 - n its value is four so you can see that
03:46 - there
03:47 - and it's gonna do four times by but then
03:51 - it's gonna start a new call
03:52 - and it's gonna pass a three
03:55 - and we're back calling the function
03:57 - again
03:59 - okay so now this is a three which means
04:02 - n is not zero so this is a three this is
04:05 - not happening
04:06 - now we're going to call it again on two
04:10 - scroll down now we're calling it again
04:14 - with two and is not zero so this is
04:18 - two this is not happening we're going to
04:20 - call it again with
04:21 - one okay come down here
04:26 - this is now one okay which means n is
04:29 - not
04:29 - zero so this is now one and we're going
04:32 - to call it again
04:33 - this time with zero
04:36 - zero is going to come into the function
04:39 - n
04:40 - is not equal to zero that's not true
04:42 - anymore so that's not happening
04:44 - so we are going to run the else which
04:47 - means we're going to return one
04:48 - now we need to trace backwards on the
04:50 - returns
04:52 - where does this one go this one is gonna
04:56 - track up here
04:57 - and all of this is gonna get replaced
05:00 - with a one
05:01 - so now it's gonna do one times one and
05:04 - then that's gonna get returned
05:06 - so it's gonna return one times one which
05:09 - is one
05:10 - and that's going to come here and
05:11 - replace this whole method call
05:14 - that's a one now it's ready to turn this
05:16 - one so it'll do two
05:18 - times one and it'll return that two
05:20 - value
05:21 - [Music]
05:23 - so this whole factorial is gone replaced
05:26 - with two
05:27 - three times two is going to return six
05:32 - so this whole factorial is gone replaced
05:34 - with six
05:35 - four times six is going to get returned
05:37 - and we're out
05:39 - this whole thing is 24.
05:42 - so this is the idea of that recursive
05:44 - stack okay
05:46 - some people like to think of it um kind
05:48 - of like nested like square bracket style
05:50 - i'll show you that as well
05:52 - so when we call factorial four
05:55 - it does four times by
06:00 - fact three fact three goes again
06:04 - which is three times
06:07 - fact two okay which runs
06:10 - its code which gives it two times
06:14 - fact one fact one
06:17 - which runs its code and does one times
06:21 - fact zero fact zero
06:24 - returns one then this
06:28 - returns one this returns
06:31 - two which returns six which returns
06:35 - 24. so there's a couple of different
06:37 - ways to visualize
06:38 - that nested idea but the idea with
06:41 - recursion is you have to have that base
06:43 - case
06:44 - okay without the base case infinite
06:46 - recursion happens bad things happen
06:48 - you also have to make sure that you can
06:50 - reach your base case
06:51 - so if we had just called factorial n
06:55 - within our function within our method
06:58 - then the value had never been going down
07:00 - which means it never would have reached
07:02 - our base case
07:03 - or if we had called it on a negative end
07:06 - to start
07:07 - it would have just kept going down
07:08 - forever never would have reached the
07:09 - base case
07:10 - so it's both having a base case but then
07:13 - also ensuring that our code
07:15 - allows the base case to be reached
07:18 - all right that's it for the tg bit let's
07:20 - jump over and just kind of look at some
07:21 - code examples
07:22 - of recursion so we've already looked at
07:24 - our factorial example
07:25 - okay so if i run my code and show you
07:27 - what it looks like there it is i know
07:29 - it's small i'm sorry i can't make it
07:30 - bigger on code hs
07:32 - 4 factorial is 24. cool so that works
07:35 - so couple other functions that work well
07:37 - with recursion i'll show you one is a
07:38 - sum
07:39 - function so you can see it here in my
07:41 - code
07:42 - so precondition is k is greater than or
07:44 - equal to zero so it takes one integer
07:46 - okay it doesn't need to be static here
07:49 - ditch that
07:50 - so if k is greater than zero then it
07:53 - returns k
07:54 - plus a recursive call to sum with k
07:56 - minus 1.
07:57 - very similar we saw with factorials but
07:59 - with a plus and then
08:00 - else which would mean k would be equal
08:02 - to zero we return
08:04 - zero now the reason we couldn't return
08:05 - zero in the last one is because it was
08:07 - multiplicative
08:08 - if we returned to zero the whole thing
08:09 - would be zero so we needed our base case
08:11 - to return
08:12 - one right so this is almost identical
08:15 - code with summing
08:16 - so let's consider that for an example
08:19 - here so let's do
08:21 - int n equals 10.
08:26 - [Applause]
08:30 - okay so i have indent is 10 result is
08:33 - now mr.sum of n
08:35 - print out the sum of all integers up to
08:37 - n equals and then the result
08:38 - so let's run this and see how it works
08:42 - the sum of all this up to 10 is 55 10
08:45 - 19 27 34
08:49 - 40 45 49
08:53 - 52 54 55
08:57 - and works okay
09:00 - so that was one example the other one
09:02 - was a sum that takes two parameters
09:05 - so this one takes a start and an end
09:07 - value so we obviously want the n to be
09:09 - bigger than the start and we need them
09:10 - both to be positive
09:11 - so we need star to be greater than equal
09:13 - to zero and n to be greater than zero
09:15 - and the idea is it sums all the integer
09:18 - values between the two
09:19 - so if end is greater than start then we
09:22 - still have some room to go
09:24 - so then return our end value plus the
09:27 - sum
09:27 - of our start and n minus one so
09:30 - taking in one so essentially if we did
09:33 - like from two to five
09:34 - it's going to start at the 5 value it's
09:36 - going to hang on to that then it's going
09:37 - to call it again
09:38 - from 2 to 4. it's going to hang on to
09:40 - the the answer to the 4
09:42 - and then call it again from 2 to 3. hang
09:44 - on to the 3
09:46 - call it again on 2-2 get a base case
09:48 - then back
09:49 - up to the two to five okay so
09:53 - call with the end stuck in our current
09:55 - function the sum
09:57 - start to n minus one and then else so
09:59 - once end and start are equal
10:01 - we just return that n value so whatever
10:03 - that final value is which will now be
10:05 - equal to start as well
10:07 - so we can see like if i called it on two
10:09 - five it would start here with
10:11 - five is greater than two keep the five
10:15 - call it again from two to four okay keep
10:17 - the four call it again from two to three
10:19 - keep the three call it again from two to
10:21 - two two to two is going to return two
10:25 - and then it's gonna be two plus three
10:27 - and then it's gonna be that answer plus
10:28 - four and then that answer plus five
10:31 - and then we're going to get our result
10:32 - okay so we can do this thing again
10:35 - let's do uh n1 is two
10:38 - and n2 is five
10:46 - okay i got this all typed out m1 is two
10:48 - n2 is five
10:49 - call it on the double variable okay this
10:52 - is overloaded
10:53 - and then n1 to n2 is a result
10:56 - and there we go sum of all integers from
10:58 - two to five is fourteen
11:00 - okay two to five two from three
11:04 - so let's go the other way because that's
11:05 - where the code goes five plus four
11:08 - okay actually the code does go the other
11:10 - way so we go
11:11 - two and three is five and then another
11:13 - four is nine and then five is fourteen
11:15 - hey it's working
11:17 - okay just a couple of examples of that
11:18 - recursive piece there
11:20 - and i'll share a snippet of this code in
11:23 - the description of the video so you can
11:24 - go check it out
11:25 - if you wanna kind of explore it and play
11:27 - with it a little bit but that's the idea
11:29 - of recursion and i
11:30 - realized that one of my print lines was
11:32 - cut off in the video but
11:33 - you know what you got to be able to
11:35 - concatenate strings
11:37 - on your own if you're doing a lesson on
11:38 - recursion and you're stressed out about
11:41 - how i printed variables with strings
11:43 - together you might want to go back and
11:45 - learn that no offense don't you okay
11:48 - so i'll share that code so you can have
11:49 - a look at a little bit more but this is
11:50 - the idea of recursion
11:51 - just use recursion with intent use it
11:54 - you know in a way that's going to help
11:55 - you
11:56 - always remember the base case and always
11:57 - make sure that your code is way to reach
11:59 - the base case
12:00 - that's super important all right
12:03 - thanks for watching see you soon bye
12:08 - humans

Cleaned transcript:

hello humans all right here we are in code with conor we're going to be looking at uh ap computer science stuff java stuff we're looking at recursion today so we're gonna do a little mini lesson on recursion and talk a bit about what it is and how it works let's jump into some code and start there okay so here i am in my class let's just go over briefly what i have i've got a my program file my program.java which has a main method then i have a nonpublic class inside that same file you can do multiclasses in the same file you just can't have multiple public classes in the same file which is fine again if you want to have a separate file do that so this just can be my main where i'm going to make objects and stuff in my recursor class we're going to talk about this function here we're done with this method here the factorial now we already know how to do a factorial okay so 5 factorial is 5 times 4 times 3 times 2 times 1. it stops at 1 because if we times by 0 then the whole thing's zero so obviously we don't want to do that so the idea here is using recursion in order to do that so what is recursion well i'll show you just right here inside of our factorial method you can see that there is a call to the factorial method this is creating what's called like a recursive stack or a recursive set of calls when you are calling the function from within the function essentially what happens is the first call can't end until all the nested calls have ended kind of imagine a set of like russian nesting dolls right if you were to take them all apart and you keep taking the tops off you can't put the thing back together again unless you close each of the inner pieces of it and then finally at the end you put the outer top back on it's the same idea as soon as you open that recursive box by doing a function call from within itself you have to let all of those inner function calls resolve themselves before your kind of outer function ends up being able to end okay so this means every time we do recursive functions we have to make sure that there's what's called a base case which means there has to be a way for the function to fully execute without calling itself if that doesn't exist there's no way for the function to end without calling itself then you'll end up in an infinite recursive loop because if not you'll end up in a recursive infinite loop which you don't want okay so let's look and find our base case in this factorial method so we have if n is not equal to zero return n so our current value multiplied by the factorial of n minus one else so in this case look at our precondition our precondition said that n has to be greater than or equal to zero coming into the function so if n is not equal to zero then it's anything above zero else should really just be the condition of if n is zero so else return one and you'll notice this line of code can execute without ever triggering another call to the factorial func method and because of that it's our base case so when n equals zero we are going to return a value of one okay that's going to be our base case got it so let's code trace this a little bit so we can see what's going on don't mind my handwriting it's terrible so let's say we wanted to do four factorial okay so we're gonna pass four to the first call of factory so four is going to come in here for n so n is not equal to zero so we're not running the else we're running the if n its value is four so you can see that there and it's gonna do four times by but then it's gonna start a new call and it's gonna pass a three and we're back calling the function again okay so now this is a three which means n is not zero so this is a three this is not happening now we're going to call it again on two scroll down now we're calling it again with two and is not zero so this is two this is not happening we're going to call it again with one okay come down here this is now one okay which means n is not zero so this is now one and we're going to call it again this time with zero zero is going to come into the function n is not equal to zero that's not true anymore so that's not happening so we are going to run the else which means we're going to return one now we need to trace backwards on the returns where does this one go this one is gonna track up here and all of this is gonna get replaced with a one so now it's gonna do one times one and then that's gonna get returned so it's gonna return one times one which is one and that's going to come here and replace this whole method call that's a one now it's ready to turn this one so it'll do two times one and it'll return that two value so this whole factorial is gone replaced with two three times two is going to return six so this whole factorial is gone replaced with six four times six is going to get returned and we're out this whole thing is 24. so this is the idea of that recursive stack okay some people like to think of it um kind of like nested like square bracket style i'll show you that as well so when we call factorial four it does four times by fact three fact three goes again which is three times fact two okay which runs its code which gives it two times fact one fact one which runs its code and does one times fact zero fact zero returns one then this returns one this returns two which returns six which returns 24. so there's a couple of different ways to visualize that nested idea but the idea with recursion is you have to have that base case okay without the base case infinite recursion happens bad things happen you also have to make sure that you can reach your base case so if we had just called factorial n within our function within our method then the value had never been going down which means it never would have reached our base case or if we had called it on a negative end to start it would have just kept going down forever never would have reached the base case so it's both having a base case but then also ensuring that our code allows the base case to be reached all right that's it for the tg bit let's jump over and just kind of look at some code examples of recursion so we've already looked at our factorial example okay so if i run my code and show you what it looks like there it is i know it's small i'm sorry i can't make it bigger on code hs 4 factorial is 24. cool so that works so couple other functions that work well with recursion i'll show you one is a sum function so you can see it here in my code so precondition is k is greater than or equal to zero so it takes one integer okay it doesn't need to be static here ditch that so if k is greater than zero then it returns k plus a recursive call to sum with k minus 1. very similar we saw with factorials but with a plus and then else which would mean k would be equal to zero we return zero now the reason we couldn't return zero in the last one is because it was multiplicative if we returned to zero the whole thing would be zero so we needed our base case to return one right so this is almost identical code with summing so let's consider that for an example here so let's do int n equals 10. okay so i have indent is 10 result is now mr.sum of n print out the sum of all integers up to n equals and then the result so let's run this and see how it works the sum of all this up to 10 is 55 10 19 27 34 40 45 49 52 54 55 and works okay so that was one example the other one was a sum that takes two parameters so this one takes a start and an end value so we obviously want the n to be bigger than the start and we need them both to be positive so we need star to be greater than equal to zero and n to be greater than zero and the idea is it sums all the integer values between the two so if end is greater than start then we still have some room to go so then return our end value plus the sum of our start and n minus one so taking in one so essentially if we did like from two to five it's going to start at the 5 value it's going to hang on to that then it's going to call it again from 2 to 4. it's going to hang on to the the answer to the 4 and then call it again from 2 to 3. hang on to the 3 call it again on 22 get a base case then back up to the two to five okay so call with the end stuck in our current function the sum start to n minus one and then else so once end and start are equal we just return that n value so whatever that final value is which will now be equal to start as well so we can see like if i called it on two five it would start here with five is greater than two keep the five call it again from two to four okay keep the four call it again from two to three keep the three call it again from two to two two to two is going to return two and then it's gonna be two plus three and then it's gonna be that answer plus four and then that answer plus five and then we're going to get our result okay so we can do this thing again let's do uh n1 is two and n2 is five okay i got this all typed out m1 is two n2 is five call it on the double variable okay this is overloaded and then n1 to n2 is a result and there we go sum of all integers from two to five is fourteen okay two to five two from three so let's go the other way because that's where the code goes five plus four okay actually the code does go the other way so we go two and three is five and then another four is nine and then five is fourteen hey it's working okay just a couple of examples of that recursive piece there and i'll share a snippet of this code in the description of the video so you can go check it out if you wanna kind of explore it and play with it a little bit but that's the idea of recursion and i realized that one of my print lines was cut off in the video but you know what you got to be able to concatenate strings on your own if you're doing a lesson on recursion and you're stressed out about how i printed variables with strings together you might want to go back and learn that no offense don't you okay so i'll share that code so you can have a look at a little bit more but this is the idea of recursion just use recursion with intent use it you know in a way that's going to help you always remember the base case and always make sure that your code is way to reach the base case that's super important all right thanks for watching see you soon bye humans
