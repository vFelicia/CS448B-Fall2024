With timestamps:

00:01 - [Music]
00:11 - hello Internet students welcome back to
00:14 - arid we know basics tutorial series my
00:15 - name is Adam this is lesson number
00:17 - eighteen we're gonna be controlling an
00:19 - RGB LED using an infrared remote alright
00:23 - let's jump right into the wiring diagram
00:25 - I'm gonna show you two wiring diagrams
00:27 - as to whether or no you have an IR
00:29 - sensor that's on a breakout board or one
00:31 - that's not so we'll start with one
00:32 - that's not on a breakout board I'm gonna
00:34 - start with the RGB LED cuz this is
00:36 - something we've done before
00:37 - so when RGB remember has one long leg
00:39 - which is the anode which is gonna go to
00:41 - Graham pending on the orientation of
00:42 - your LED this might read from left to
00:44 - right or am I read from right to left so
00:46 - my anode here is going to grab to the
00:48 - left of the anode all by itself is my
00:51 - red which is going through a 220 ohm
00:53 - resistor into pin number 11 to the right
00:55 - of the anode is migraine so 220 ohm
00:58 - resister green into pink 10 and then
01:01 - finally my blue which is 220 ohm
01:04 - resister independent or not so I'm using
01:06 - 11 10 9 for RGB on my for my IR sensor
01:11 - okay so this is a non breakout board IR
01:13 - sensor it's three pins reading from left
01:16 - to right is the pin the control pin
01:18 - that's going into pin 7 on my Arduino
01:20 - the ground and then the 5 volt and I'm
01:24 - using the 5 volt and ground rose on my
01:27 - breadboard if you have ones on breakout
01:29 - board it reads from left to right like
01:31 - this ground 5 volt and then your control
01:35 - or your sensor pen which is going into
01:37 - pin number 7 on our Arduino so that's
01:40 - the only difference between the 2
01:41 - wirings so take a few minutes get this
01:43 - all set up and wired then meet me back
01:45 - in the code interface and we'll so ready
01:47 - some code for this IR mantra here we are
01:50 - in our coding interface we're gonna
01:52 - start off by bringing in a library so
01:55 - we're gonna use the IR remote dot H
01:56 - library which is going to allow us
01:58 - access to a lot of functions that are
01:59 - going to be required to make this IR
02:01 - sensor remote relationship work still
02:03 - above the setup function we're gonna
02:04 - bring in some pins and some variables
02:05 - that we're going to need for the IR so
02:08 - we have a constant int called IR pin
02:10 - which is pin 7 I have an IR receiver
02:12 - object called
02:13 - I are receive and he uses the IR pin and
02:16 - then I have a decode results results
02:18 - variable this is important because it
02:20 - allows the IR remote module to decode
02:22 - the results that we're getting from the
02:23 - IR into something that we can actually
02:25 - understand next we'll set up our pins
02:27 - for our LED so my red is 11 my green is
02:30 - 10 and my blue is 9 we'll set up a
02:32 - couple more constants and variables to
02:34 - use throughout our code I have one to
02:36 - store the current red value the current
02:37 - green value and the current blue value
02:39 - and I've initialized them all to 0 to
02:41 - start out I'm gonna bring in two more
02:43 - variables that I'll explain as we get
02:44 - into our code a little bit deeper the
02:48 - first one is a boolean as to whether or
02:49 - not the LED is currently on and it is
02:51 - set to false the next is actually an
02:53 - array of three strings RG and B called
02:57 - current color and then an integer for
03:00 - color tracker which is set to zero we're
03:02 - gonna be using these to toggle or to
03:04 - cycle through the colors on the RGB LED
03:06 - okay an array is actually a list of
03:09 - three different strings and we can
03:11 - access individual strings in this array
03:13 - using only one variable name using box
03:16 - brackets and then using an integer value
03:19 - for index 0 for our one for green or two
03:23 - for B current color box zero is our
03:26 - current color box one is G and current
03:30 - color box 2 is B and we'll use that
03:32 - notation to help us decide which Curt
03:35 - color should be displayed on the RGB and
03:37 - to help us cycle through the colors
03:39 - later in our code so now we're into our
03:41 - setup function we're going to set up our
03:42 - serial for debugging we're also going to
03:44 - enable our ir receiver serial monitor
03:47 - setup to enable the ir we call the ir
03:50 - object ir receive dot enable ir in and i
03:54 - are received uplink 13 is true these are
03:57 - going to set it up and have it ready to
03:58 - listen on the right channels for ir
04:00 - signals
04:01 - next we'll set up all the pins for the
04:02 - RGB LED 2 outputs so I set my red green
04:06 - and blue LED pins to outputs so the goal
04:09 - in this lesson is we're going to use the
04:11 - ok button on our remote to toggle the
04:14 - LED on and then off and then we're going
04:17 - to use the left and right arrows to
04:18 - cycle through the 3 primary colors red
04:21 - green and blue so if we press the right
04:23 - arrow it'll go to green and blue
04:25 - then back to red if we press the left
04:27 - arrow it'll go backwards if the LED is
04:29 - already on the color will just change on
04:31 - the fly if the LEDs off while I'm
04:34 - pressing the arrows it'll still be
04:36 - changing the color in the background so
04:38 - that the next time I turn the LED on
04:39 - I'll see whatever the new color is
04:41 - that's the functionality we're going for
04:44 - in order to do that we're gonna have to
04:46 - do a few things we're gonna have to
04:47 - figure out the hex codes for the buttons
04:49 - on our remote which is one thing that
04:51 - we'll do we're gonna have to create some
04:53 - functions to kind of set the color
04:55 - values on the LED and a function to
04:58 - toggle the LED on or off and then we'll
05:00 - use those within our loop function so
05:03 - what we haven't written it yet we're
05:04 - gonna put a collier to the set LED
05:06 - function and then we're gonna go and
05:07 - we're gonna write that function in the
05:10 - set LED function we're gonna use our
05:12 - color tracker variable and our array of
05:14 - color values to figure out which color
05:17 - we're currently on assign that to our
05:20 - color values and potentially write it to
05:22 - our LED so we want to do an if statement
05:24 - to check which color we're currently on
05:27 - if current color which is my array in
05:30 - box color tracker is equal to R that
05:33 - means the current color is red okay then
05:36 - we want to assign the proper values to
05:38 - those three variables we said at the
05:39 - beginning so our red value our green
05:41 - value in our blue value in this case we
05:44 - want a red value to be 255 and our green
05:46 - and blue to be zero so we've now set the
05:48 - variables but if our LED was currently
05:51 - turned on we need to actually write
05:53 - those values out to the LED so that the
05:57 - color changes right away okay so we
05:59 - would do that with another if statement
06:01 - so remember we have that boolean for
06:03 - whether or not the LED is currently
06:05 - turned on so let's use that and it's
06:07 - really just a simple saying if LED on
06:09 - because remember this is a boolean value
06:11 - so it's always going to be true or false
06:12 - so if it's true then it allows the if
06:14 - statement to execute if it's false it
06:16 - doesn't and now we're gonna do our three
06:18 - analog rights to the RGB LED so I'm
06:21 - gonna analog right the red value to the
06:23 - red pin the green value to the green pin
06:25 - and the blue value to the blue pin if
06:27 - the LED was on it will do this right now
06:30 - if the LED wasn't on it still assigns
06:32 - the variables so that the next time we
06:34 - turn the LED on the right color will
06:36 - show up but it doesn't bother writing
06:39 - because we don't want to turn the LED on
06:40 - right now unless they push the okay
06:42 - button so this is gonna allow the colors
06:44 - to cycle for us well it's part of the
06:47 - code that's gonna allow the colors to
06:48 - cycle we're gonna essentially repeat
06:50 - this whole block of code but as an else
06:52 - if for green and an else if for blue so
06:56 - we can copy that whole block come down
06:59 - add the word else and then paste it okay
07:03 - and we'll change the R to a G red will
07:07 - now be zero green will now be 255 and
07:10 - the rest will remain the same now we
07:12 - don't need to do the else if this time
07:14 - because blue is the only color left
07:17 - because we only put three colors into
07:20 - our array RG and B so if it's not our
07:22 - and it's not G it has to be B so I can
07:25 - just grab the code from inside and put
07:29 - it in here red value zero Queen value
07:32 - zero blue value 255 so this set LED
07:37 - method here's what it does it's going to
07:40 - assign our variables red green and blue
07:42 - values with the appropriate color values
07:44 - for the current position in our array so
07:48 - if our array happens to be at zero it's
07:50 - going to assign them to the red if our
07:52 - array happens to be at 1 it's going to
07:55 - assign them for green if our array
07:58 - happens to be 2
07:59 - it's gonna assign them for blue okay so
08:03 - the next math that we need to write is
08:05 - one to toggle the LED on or off when the
08:07 - ok button is pushed so we're going to
08:09 - call this one toggle LED okay so it's
08:12 - going to depend really on whether or not
08:13 - the boolean LED on it's true or false so
08:17 - if LED on which means the LED is
08:21 - currently on and then else
08:28 - which means the LED is currently off
08:31 - okay so we're gonna break it in two
08:33 - spots what do we want to do if the LEDs
08:35 - already on we want to turn the LED off
08:36 - if the LEDs already off what we want to
08:39 - turn it on so if the LED is already on
08:41 - we're gonna print to the serial LED
08:44 - turned off we're gonna write zeros to
08:46 - all three of the LED pins and we're
08:49 - gonna set the boolean to false because
08:51 - now the LED has been turned off and I
08:53 - put in a small delay and then if the LED
08:55 - was already off then we want to turn the
08:58 - LED on we want to set the red pin to the
09:01 - currently stored red value green pin to
09:02 - green value blue pin to blue value and
09:05 - set the LED on variable to true because
09:08 - now the LED is currently turned on so we
09:11 - have our methods set up that will allow
09:12 - us to toggle the LED on or off and we
09:15 - have a method that's set up to set the
09:17 - color value of the LED depending on
09:19 - where we're currently at with our color
09:22 - index or our color tracker variable
09:24 - we're ready now to head into the loop
09:25 - function first figure out how the IR
09:27 - remote works and then use that IR remote
09:30 - to trigger these methods so jumping into
09:32 - our loop function we're gonna start by
09:34 - making sure that we're reading things
09:36 - from the IR remote properly and we're
09:38 - just going to print out values from the
09:40 - buttons that we get so we can understand
09:42 - what our buttons are actually doing so
09:45 - we're gonna do an if statement the if
09:47 - statement checks the IR receiver module
09:48 - decodes the results and it's going to
09:51 - return true if it's decoding the results
09:54 - properly that brings us into our if
09:56 - statement we're then going to do two
09:58 - commands we're gonna do a serial dot
09:59 - print line results dog value as a
10:01 - hexadecimal number and then we're gonna
10:03 - resume reading IR data so all this is
10:06 - gonna do is print to the serial what the
10:08 - current value is reading from our IR
10:11 - module so it's not gonna use our set LED
10:13 - method it's not going to use our toggle
10:15 - LED method but that's okay we need to
10:17 - first learn how our IR works so let's
10:19 - push this out to the Arduino if I pull
10:21 - up my serial monitor I shouldn't be
10:23 - seeing anything now if I'm in a room
10:25 - that has a lot of IR interference I can
10:27 - be seeing all kinds of crazy numbers
10:28 - coming up here so you might need to
10:30 - create a kind of a shield over the IR
10:32 - sensor in order to shield some of that
10:34 - IR interference so I'm gonna press the
10:36 - ok button on my remote and I see the
10:39 - value now if I hold it down
10:42 - it's going to show the value once which
10:44 - is FF 3 8c 7 and then it's going to just
10:47 - show full laughs hex fights okay so I
10:50 - press that again you can see now I'll
10:52 - press my left and my right laughing
10:54 - right okay and I can map these and I
10:58 - should just store this in a text
10:59 - document somewhere so I know from my
11:01 - remote what the okay value is from my
11:04 - erm oh what the left what the right with
11:05 - the up but the down values are and that
11:07 - way I have them so that I can now jump
11:10 - into my code and actually get things
11:11 - working properly okay so coming back
11:14 - into my code I'm gonna actually just
11:15 - comment out the line where I'm printing
11:17 - the codes out I might want it later but
11:20 - we'll set it aside for now we're gonna
11:22 - write a new kind of statement we're
11:23 - gonna write something called a switch
11:24 - statement which is kind of like a whole
11:26 - bunch of if and else statements okay so
11:28 - it just simplifies the structure a
11:30 - little bit and I just thought it'd be
11:31 - worth it to show you how they work so a
11:35 - switch statement has to have a value to
11:37 - switch on in this case it's the results
11:39 - top value which is a hex code and then
11:41 - we get to put a bunch of cases so if the
11:43 - value is a certain thing if the value is
11:45 - something else and so on so they're
11:47 - called cases so I'm gonna set up a
11:49 - couple of cases here for okay left and
11:52 - right now the way a case works you put a
11:57 - case and then you put the value now I
11:58 - need to put the 0x in front of the hex
12:00 - code to make sure that it compares it
12:02 - properly to the value coming out of the
12:04 - IR decoder so for okay this was my hex
12:08 - code so what do I want to do when they
12:09 - press ok well I want to toggle the LED
12:11 - whether it be on or off so I'm gonna
12:13 - call my toggle LED method okay I also
12:16 - want to print a debug statement to the
12:18 - serial monitor and then you have to put
12:20 - a break so the way switch statement
12:23 - works you set the switch statement value
12:24 - you check one case against a specific
12:27 - value if that it's true it runs this
12:29 - code but it needs a break statement to
12:31 - avoid all the other cases okay because
12:33 - you don't have the same if-else
12:35 - structure so toggle the LED print this
12:38 - out and then break to begin it again
12:40 - okay so if left is pressed now this gets
12:43 - a little bit complex so I'm going to try
12:45 - to explain it as I go I need to
12:47 - increment my color tracker beer so
12:49 - remember it's I want it to be zero one
12:51 - two and then I want it to go back to
12:53 - zero one
12:54 - to 0 1 2 0 1 2 well to do this I'm going
12:58 - to use what's called modular arithmetic
12:59 - modular arithmetic just means when you
13:01 - divide by something instead of looking
13:04 - at how many times it divides evenly you
13:06 - look at what's left over you look at the
13:07 - remainder okay so for example 5 divided
13:10 - by 2 is 2 point 5 or 2 and 1/2 so if you
13:15 - do 5 mod 2 you get that remainder of 1
13:18 - numerator of the fraction and the mixed
13:20 - number
13:21 - okay that's what you get left with so we
13:23 - can use mod operations to do this
13:25 - because if I'm not 0 and I go up when I
13:28 - go to 1 and then 2 and then I want to go
13:31 - back to 0 again so if I'm modding by 3
13:34 - the only possible remainders are 0 1 & 2
13:37 - because it's either divided evenly by 3
13:40 - which would be a remainder of 0 or it's
13:41 - one above or it's 2 above but it can't
13:44 - be 3 above because then it's back to a
13:46 - remainder of 0 because now it's
13:47 - divisible by 3 again so that's what
13:49 - we're going to use to do this left and
13:51 - right incrementation of the color
13:52 - tracker value so I'm going to do color
13:54 - tracker color tracker equals bracket
13:59 - color tracker plus 2 mod 3 now let's
14:04 - just think about this for a second so if
14:06 - I'm at red which is 0 and I press the
14:09 - left button I want to end up at 3 okay
14:12 - so I need to add 2 which brings me all
14:16 - the way up to position 2 and I'm mod 3
14:19 - because if I was also at 1 and I want to
14:21 - go back to 0 I would add to and then mod
14:24 - 3 from a 3 and I want to go back to 2 I
14:27 - add 2 and I mod 3 we're just iterating
14:30 - through the modular arithmetic here so
14:33 - this one is going to go to the left so
14:35 - if I was at 2 it's going to go 1 then 0
14:38 - then 2 then 1 then 0 to 1 0 if I'm going
14:43 - to the right we're just going to add one
14:46 - and then mod 3 ok because adding 1 and
14:50 - then modding 3 is going to take us 1 to
14:51 - the wreck remember there's only 3
14:52 - possible numbers here okay that's why
14:54 - adding 2 works subtracting 1 doesn't
14:57 - work the way that you think because of
14:58 - the way the negative values work if you
15:00 - use the absolute values and you did the
15:02 - subtraction it might work out properly
15:03 - but it works better by adding 2 which is
15:06 - kind of your Mac
15:07 - zero one two when you want to go left
15:10 - and then adding one and you want to go
15:12 - to the right so we increment
15:13 - colorchecker now we're gonna set the LED
15:16 - color okay so now that we've set the
15:19 - color tracker variable we're gonna
15:21 - assign the color to the LED so that's
15:23 - gonna store it in our variables now if
15:25 - our LED was already on our cell LED
15:28 - method is also going to change the color
15:29 - on the fly if the LED was off it just
15:31 - assigns the values so the next time we
15:33 - turn it on it'll have the proper color
15:35 - I'll print a debug statement and then
15:37 - I'll brake now I do need to make sure I
15:41 - kept that IR received I'll resume
15:43 - outside of my switch statement so this
15:45 - should work okay and the modular
15:48 - arithmetic might be a little confusing I
15:49 - will post a link in the description to a
15:52 - video by somebody else
15:53 - explaining modular arithmetic in a
15:55 - little more detail just in case you
15:57 - struggle with that concept let's push
16:00 - this to the arduino and let's see what
16:01 - happens so I've pushed the code out to
16:03 - the Arduino and first I'll just show you
16:05 - the button presses and then I'll show
16:06 - you the LED itself if I press ok it says
16:09 - LED turned on okay pressed my LED is
16:12 - currently on if I press ok again the LED
16:16 - turns off LED on the off Le'Veon let's
16:21 - press the right arrow changes color
16:24 - now it doesn't like green because of my
16:26 - chroma key that I got go on and then
16:29 - blue red if I keep pressing the right
16:33 - we'll see it cycles through if I press
16:36 - left it cycles through in the opposite
16:39 - order and if I turn it off and then
16:43 - cycle the color so it was green but now
16:46 - it's red I can cycle it to blue and then
16:49 - turn it back on right so we can do the
16:53 - full cycle turn on and off in the remote
16:57 - so there we go
16:58 - I mean that's the base lesson that's the
17:00 - lot going on here there's a lot to make
17:02 - sense of in the code in terms of
17:04 - structure in terms of the methods and
17:05 - how they're working and what they're
17:07 - doing in terms of getting the IR codes
17:09 - properly from the remote all that kind
17:11 - of stuff so take some time with this
17:13 - make sure you're positive video a lot to
17:14 - get all the code down and then play with
17:16 - the code a little bit and see what you
17:18 - can get to make happen now that we're
17:19 - done the base lesson
17:21 - to the extension great job in the bass
17:23 - lesson for the extension on this one
17:25 - again just code modification so that you
17:27 - understand what the current code does
17:29 - and you can modify it so all I want you
17:31 - to do for this is the left and right
17:33 - buttons that are changing the color I
17:34 - only want them to work if the LED is on
17:37 - if the LEDs off don't change the color
17:40 - values because it just gets confusing as
17:42 - to what color it's going to be when it
17:43 - turns back on so only allow the left and
17:46 - right button presses to do anything if
17:47 - the LED is already on
17:49 - so that's your extension meet me back
17:51 - here and we'll look at your challenge
17:53 - all right great job in the extension and
17:56 - the challenge we're gonna add any up and
17:58 - down arrows which are gonna adjust the
18:00 - brightness of our LED so we can cycle
18:03 - through our colors if I press the up
18:05 - arrow you'll see it registers that the
18:07 - up arrow is pressed now let's press the
18:10 - down arrow and we see our LED dim and
18:13 - again and I have it set to 4 brightness
18:16 - settings and then it's off I can come
18:18 - back up I can cycle through my colors
18:21 - all dimmed and I can turn it back off
18:22 - this challenge is gonna involve you
18:24 - setting up a flow variable for a
18:25 - brightness or an integer variable for
18:27 - brightness and then using that in
18:29 - complement with the up and down button
18:32 - pushes to adjust the color value
18:33 - dynamically good luck with a challenge
18:35 - and thanks for sticking with us through
18:37 - 18 lessons I hope that you're starting
18:38 - to understand a little bit more about
18:40 - what's involved in writing software as
18:42 - well as what's involved with the
18:43 - physical engineering side of all the
18:44 - things that we use every day if you
18:46 - enjoy the videos be sure to like the
18:48 - videos and subscribe to the channel to
18:49 - stay up to date as we continue to
18:51 - produce more content otherwise I'll see
18:53 - you back here in Lesson number 19 my
18:55 - name is Adam and thanks so much for
18:57 - watching have a great day
18:58 - [Music]

Cleaned transcript:

hello Internet students welcome back to arid we know basics tutorial series my name is Adam this is lesson number eighteen we're gonna be controlling an RGB LED using an infrared remote alright let's jump right into the wiring diagram I'm gonna show you two wiring diagrams as to whether or no you have an IR sensor that's on a breakout board or one that's not so we'll start with one that's not on a breakout board I'm gonna start with the RGB LED cuz this is something we've done before so when RGB remember has one long leg which is the anode which is gonna go to Graham pending on the orientation of your LED this might read from left to right or am I read from right to left so my anode here is going to grab to the left of the anode all by itself is my red which is going through a 220 ohm resistor into pin number 11 to the right of the anode is migraine so 220 ohm resister green into pink 10 and then finally my blue which is 220 ohm resister independent or not so I'm using 11 10 9 for RGB on my for my IR sensor okay so this is a non breakout board IR sensor it's three pins reading from left to right is the pin the control pin that's going into pin 7 on my Arduino the ground and then the 5 volt and I'm using the 5 volt and ground rose on my breadboard if you have ones on breakout board it reads from left to right like this ground 5 volt and then your control or your sensor pen which is going into pin number 7 on our Arduino so that's the only difference between the 2 wirings so take a few minutes get this all set up and wired then meet me back in the code interface and we'll so ready some code for this IR mantra here we are in our coding interface we're gonna start off by bringing in a library so we're gonna use the IR remote dot H library which is going to allow us access to a lot of functions that are going to be required to make this IR sensor remote relationship work still above the setup function we're gonna bring in some pins and some variables that we're going to need for the IR so we have a constant int called IR pin which is pin 7 I have an IR receiver object called I are receive and he uses the IR pin and then I have a decode results results variable this is important because it allows the IR remote module to decode the results that we're getting from the IR into something that we can actually understand next we'll set up our pins for our LED so my red is 11 my green is 10 and my blue is 9 we'll set up a couple more constants and variables to use throughout our code I have one to store the current red value the current green value and the current blue value and I've initialized them all to 0 to start out I'm gonna bring in two more variables that I'll explain as we get into our code a little bit deeper the first one is a boolean as to whether or not the LED is currently on and it is set to false the next is actually an array of three strings RG and B called current color and then an integer for color tracker which is set to zero we're gonna be using these to toggle or to cycle through the colors on the RGB LED okay an array is actually a list of three different strings and we can access individual strings in this array using only one variable name using box brackets and then using an integer value for index 0 for our one for green or two for B current color box zero is our current color box one is G and current color box 2 is B and we'll use that notation to help us decide which Curt color should be displayed on the RGB and to help us cycle through the colors later in our code so now we're into our setup function we're going to set up our serial for debugging we're also going to enable our ir receiver serial monitor setup to enable the ir we call the ir object ir receive dot enable ir in and i are received uplink 13 is true these are going to set it up and have it ready to listen on the right channels for ir signals next we'll set up all the pins for the RGB LED 2 outputs so I set my red green and blue LED pins to outputs so the goal in this lesson is we're going to use the ok button on our remote to toggle the LED on and then off and then we're going to use the left and right arrows to cycle through the 3 primary colors red green and blue so if we press the right arrow it'll go to green and blue then back to red if we press the left arrow it'll go backwards if the LED is already on the color will just change on the fly if the LEDs off while I'm pressing the arrows it'll still be changing the color in the background so that the next time I turn the LED on I'll see whatever the new color is that's the functionality we're going for in order to do that we're gonna have to do a few things we're gonna have to figure out the hex codes for the buttons on our remote which is one thing that we'll do we're gonna have to create some functions to kind of set the color values on the LED and a function to toggle the LED on or off and then we'll use those within our loop function so what we haven't written it yet we're gonna put a collier to the set LED function and then we're gonna go and we're gonna write that function in the set LED function we're gonna use our color tracker variable and our array of color values to figure out which color we're currently on assign that to our color values and potentially write it to our LED so we want to do an if statement to check which color we're currently on if current color which is my array in box color tracker is equal to R that means the current color is red okay then we want to assign the proper values to those three variables we said at the beginning so our red value our green value in our blue value in this case we want a red value to be 255 and our green and blue to be zero so we've now set the variables but if our LED was currently turned on we need to actually write those values out to the LED so that the color changes right away okay so we would do that with another if statement so remember we have that boolean for whether or not the LED is currently turned on so let's use that and it's really just a simple saying if LED on because remember this is a boolean value so it's always going to be true or false so if it's true then it allows the if statement to execute if it's false it doesn't and now we're gonna do our three analog rights to the RGB LED so I'm gonna analog right the red value to the red pin the green value to the green pin and the blue value to the blue pin if the LED was on it will do this right now if the LED wasn't on it still assigns the variables so that the next time we turn the LED on the right color will show up but it doesn't bother writing because we don't want to turn the LED on right now unless they push the okay button so this is gonna allow the colors to cycle for us well it's part of the code that's gonna allow the colors to cycle we're gonna essentially repeat this whole block of code but as an else if for green and an else if for blue so we can copy that whole block come down add the word else and then paste it okay and we'll change the R to a G red will now be zero green will now be 255 and the rest will remain the same now we don't need to do the else if this time because blue is the only color left because we only put three colors into our array RG and B so if it's not our and it's not G it has to be B so I can just grab the code from inside and put it in here red value zero Queen value zero blue value 255 so this set LED method here's what it does it's going to assign our variables red green and blue values with the appropriate color values for the current position in our array so if our array happens to be at zero it's going to assign them to the red if our array happens to be at 1 it's going to assign them for green if our array happens to be 2 it's gonna assign them for blue okay so the next math that we need to write is one to toggle the LED on or off when the ok button is pushed so we're going to call this one toggle LED okay so it's going to depend really on whether or not the boolean LED on it's true or false so if LED on which means the LED is currently on and then else which means the LED is currently off okay so we're gonna break it in two spots what do we want to do if the LEDs already on we want to turn the LED off if the LEDs already off what we want to turn it on so if the LED is already on we're gonna print to the serial LED turned off we're gonna write zeros to all three of the LED pins and we're gonna set the boolean to false because now the LED has been turned off and I put in a small delay and then if the LED was already off then we want to turn the LED on we want to set the red pin to the currently stored red value green pin to green value blue pin to blue value and set the LED on variable to true because now the LED is currently turned on so we have our methods set up that will allow us to toggle the LED on or off and we have a method that's set up to set the color value of the LED depending on where we're currently at with our color index or our color tracker variable we're ready now to head into the loop function first figure out how the IR remote works and then use that IR remote to trigger these methods so jumping into our loop function we're gonna start by making sure that we're reading things from the IR remote properly and we're just going to print out values from the buttons that we get so we can understand what our buttons are actually doing so we're gonna do an if statement the if statement checks the IR receiver module decodes the results and it's going to return true if it's decoding the results properly that brings us into our if statement we're then going to do two commands we're gonna do a serial dot print line results dog value as a hexadecimal number and then we're gonna resume reading IR data so all this is gonna do is print to the serial what the current value is reading from our IR module so it's not gonna use our set LED method it's not going to use our toggle LED method but that's okay we need to first learn how our IR works so let's push this out to the Arduino if I pull up my serial monitor I shouldn't be seeing anything now if I'm in a room that has a lot of IR interference I can be seeing all kinds of crazy numbers coming up here so you might need to create a kind of a shield over the IR sensor in order to shield some of that IR interference so I'm gonna press the ok button on my remote and I see the value now if I hold it down it's going to show the value once which is FF 3 8c 7 and then it's going to just show full laughs hex fights okay so I press that again you can see now I'll press my left and my right laughing right okay and I can map these and I should just store this in a text document somewhere so I know from my remote what the okay value is from my erm oh what the left what the right with the up but the down values are and that way I have them so that I can now jump into my code and actually get things working properly okay so coming back into my code I'm gonna actually just comment out the line where I'm printing the codes out I might want it later but we'll set it aside for now we're gonna write a new kind of statement we're gonna write something called a switch statement which is kind of like a whole bunch of if and else statements okay so it just simplifies the structure a little bit and I just thought it'd be worth it to show you how they work so a switch statement has to have a value to switch on in this case it's the results top value which is a hex code and then we get to put a bunch of cases so if the value is a certain thing if the value is something else and so on so they're called cases so I'm gonna set up a couple of cases here for okay left and right now the way a case works you put a case and then you put the value now I need to put the 0x in front of the hex code to make sure that it compares it properly to the value coming out of the IR decoder so for okay this was my hex code so what do I want to do when they press ok well I want to toggle the LED whether it be on or off so I'm gonna call my toggle LED method okay I also want to print a debug statement to the serial monitor and then you have to put a break so the way switch statement works you set the switch statement value you check one case against a specific value if that it's true it runs this code but it needs a break statement to avoid all the other cases okay because you don't have the same ifelse structure so toggle the LED print this out and then break to begin it again okay so if left is pressed now this gets a little bit complex so I'm going to try to explain it as I go I need to increment my color tracker beer so remember it's I want it to be zero one two and then I want it to go back to zero one to 0 1 2 0 1 2 well to do this I'm going to use what's called modular arithmetic modular arithmetic just means when you divide by something instead of looking at how many times it divides evenly you look at what's left over you look at the remainder okay so for example 5 divided by 2 is 2 point 5 or 2 and 1/2 so if you do 5 mod 2 you get that remainder of 1 numerator of the fraction and the mixed number okay that's what you get left with so we can use mod operations to do this because if I'm not 0 and I go up when I go to 1 and then 2 and then I want to go back to 0 again so if I'm modding by 3 the only possible remainders are 0 1 & 2 because it's either divided evenly by 3 which would be a remainder of 0 or it's one above or it's 2 above but it can't be 3 above because then it's back to a remainder of 0 because now it's divisible by 3 again so that's what we're going to use to do this left and right incrementation of the color tracker value so I'm going to do color tracker color tracker equals bracket color tracker plus 2 mod 3 now let's just think about this for a second so if I'm at red which is 0 and I press the left button I want to end up at 3 okay so I need to add 2 which brings me all the way up to position 2 and I'm mod 3 because if I was also at 1 and I want to go back to 0 I would add to and then mod 3 from a 3 and I want to go back to 2 I add 2 and I mod 3 we're just iterating through the modular arithmetic here so this one is going to go to the left so if I was at 2 it's going to go 1 then 0 then 2 then 1 then 0 to 1 0 if I'm going to the right we're just going to add one and then mod 3 ok because adding 1 and then modding 3 is going to take us 1 to the wreck remember there's only 3 possible numbers here okay that's why adding 2 works subtracting 1 doesn't work the way that you think because of the way the negative values work if you use the absolute values and you did the subtraction it might work out properly but it works better by adding 2 which is kind of your Mac zero one two when you want to go left and then adding one and you want to go to the right so we increment colorchecker now we're gonna set the LED color okay so now that we've set the color tracker variable we're gonna assign the color to the LED so that's gonna store it in our variables now if our LED was already on our cell LED method is also going to change the color on the fly if the LED was off it just assigns the values so the next time we turn it on it'll have the proper color I'll print a debug statement and then I'll brake now I do need to make sure I kept that IR received I'll resume outside of my switch statement so this should work okay and the modular arithmetic might be a little confusing I will post a link in the description to a video by somebody else explaining modular arithmetic in a little more detail just in case you struggle with that concept let's push this to the arduino and let's see what happens so I've pushed the code out to the Arduino and first I'll just show you the button presses and then I'll show you the LED itself if I press ok it says LED turned on okay pressed my LED is currently on if I press ok again the LED turns off LED on the off Le'Veon let's press the right arrow changes color now it doesn't like green because of my chroma key that I got go on and then blue red if I keep pressing the right we'll see it cycles through if I press left it cycles through in the opposite order and if I turn it off and then cycle the color so it was green but now it's red I can cycle it to blue and then turn it back on right so we can do the full cycle turn on and off in the remote so there we go I mean that's the base lesson that's the lot going on here there's a lot to make sense of in the code in terms of structure in terms of the methods and how they're working and what they're doing in terms of getting the IR codes properly from the remote all that kind of stuff so take some time with this make sure you're positive video a lot to get all the code down and then play with the code a little bit and see what you can get to make happen now that we're done the base lesson to the extension great job in the bass lesson for the extension on this one again just code modification so that you understand what the current code does and you can modify it so all I want you to do for this is the left and right buttons that are changing the color I only want them to work if the LED is on if the LEDs off don't change the color values because it just gets confusing as to what color it's going to be when it turns back on so only allow the left and right button presses to do anything if the LED is already on so that's your extension meet me back here and we'll look at your challenge all right great job in the extension and the challenge we're gonna add any up and down arrows which are gonna adjust the brightness of our LED so we can cycle through our colors if I press the up arrow you'll see it registers that the up arrow is pressed now let's press the down arrow and we see our LED dim and again and I have it set to 4 brightness settings and then it's off I can come back up I can cycle through my colors all dimmed and I can turn it back off this challenge is gonna involve you setting up a flow variable for a brightness or an integer variable for brightness and then using that in complement with the up and down button pushes to adjust the color value dynamically good luck with a challenge and thanks for sticking with us through 18 lessons I hope that you're starting to understand a little bit more about what's involved in writing software as well as what's involved with the physical engineering side of all the things that we use every day if you enjoy the videos be sure to like the videos and subscribe to the channel to stay up to date as we continue to produce more content otherwise I'll see you back here in Lesson number 19 my name is Adam and thanks so much for watching have a great day
