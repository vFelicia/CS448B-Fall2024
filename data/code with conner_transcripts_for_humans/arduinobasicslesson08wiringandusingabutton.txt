With timestamps:

00:01 - [Music]
00:11 - hello fellow human fellow human fellow
00:14 - human welcome back to the Arduino basics
00:17 - tutorial series this is lesson number
00:18 - eight we're gonna be learning how to use
00:20 - a button in our circuits let's go
00:23 - through the wiring that you're going to
00:25 - need to setup in order to do this
00:26 - project once we set up the wiring we'll
00:28 - explain a little bit more with how the
00:29 - button actually works to start you'll
00:31 - need a few materials you'll need a 220
00:33 - ohm resistor a 10 kiloohm resistor
00:36 - standard four pin push button and an LED
00:39 - so the first thing we're gonna do is
00:41 - we're gonna connect to pin number 4 up
00:43 - onto our breadboard I've got mine going
00:45 - to pin 20 make that a yellow wire next
00:49 - I'm gonna put my button on the bridge of
00:51 - my breadboard so here's a standard 4 pin
00:53 - button with the buttons you'll notice
00:55 - the pins stick out on opposite sides so
00:57 - two pins on one side two pins opposite
00:59 - and we're gonna cover over the bridge of
01:02 - the breadboard with our button so the
01:04 - bottom left-hand leg is connected
01:06 - through to pin number 4 on our Arduino
01:08 - board next we're gonna take the top left
01:10 - hand leg we're gonna connect through a
01:11 - 10 kiloohm resistor to the ground row so
01:14 - now I have the top left hand leg
01:16 - connected through a 10 kiloohm resistor
01:17 - to the ground row the top right hand leg
01:20 - we're just going to connect with a wire
01:21 - directly to voltage so our button bottom
01:24 - left leg pin going down through pin 4
01:27 - and Arduino
01:27 - top left through a 10 kilo ohm resistor
01:29 - to ground top right through a voltage
01:31 - wire to the voltage row of our red book
01:33 - next we're gonna wire up our LED which
01:35 - we're already familiar how to do I'm
01:37 - gonna use pin number 8 connect it up
01:39 - onto my breadboard then I'm gonna use a
01:40 - 220 ohm resistor over the bridge of my
01:43 - breadboard the long leg of my LED pin
01:46 - and then the short leg through to ground
01:49 - so this is what our completed circuit
01:51 - will be how does the button work what's
01:53 - happening inside of a button as you can
01:55 - see in this pin out is that the opposite
01:58 - legs are already connected to each other
02:00 - so top left and bottom left are already
02:02 - connected top right and bottom right are
02:05 - already connected pushing in the button
02:07 - makes the lateral connection so it would
02:09 - connect bottom left to bottom right
02:12 - or top left to top right so right now
02:14 - our pin number four is connected
02:16 - directly through the button to the
02:18 - ground through a 10 kilo ohm resistor
02:20 - when the button gets pushed down it is
02:22 - going to connect top right and top left
02:25 - now that voltage that current is going
02:27 - to be choosing between going through the
02:29 - 10 kilo ohm resistor to ground or with
02:31 - no resistance into the Arduino well it
02:33 - will choose the path of least resistance
02:35 - and it will come into the Arduino and
02:37 - that's where we're gonna get our button
02:39 - reading when the voltage is passing
02:41 - through so when the button is pushed
02:42 - voltage is going to pass through the
02:44 - Arduino when the button is not pushed no
02:46 - voltage is gonna pass through we call
02:48 - this a passive low state you can switch
02:50 - this ground and voltage wire and Cree
02:52 - what's called a passive high state we're
02:54 - not gonna worry about doing that in this
02:56 - particular lesson so here we are in the
02:59 - code interface for lesson 8 I've created
03:01 - a new file new sketch called lesson 8
03:03 - and we're ready to start our code so
03:06 - we're gonna start by declaring a pin for
03:08 - the LED and a pin for the button as you
03:11 - remember we wired up our button to 4 and
03:13 - our led to pin 8 so I've assigned those
03:15 - variables to those particular integer
03:17 - values next in our setup function we're
03:19 - going to set those as input or output
03:21 - pins so our LED pin it's gonna be an
03:23 - output pin our button pin is going to be
03:26 - an input pin I'll normally setup the
03:31 - serial monitor as well just in case I
03:33 - need to do any debugging in my program
03:34 - just in case I need to do any debugging
03:36 - in my program that's it for our set up
03:40 - function let's head over to the loop
03:41 - function now so inside of our loop
03:44 - function we need a variable that's going
03:45 - to tell us the state of the button
03:47 - whether it's high or low on or off so
03:53 - what I've done is I've created an
03:54 - integer called button state that's going
03:56 - to do a digital read on the button pin
03:58 - remember button pin is an input so it's
03:59 - going to be listening to pin number 4
04:01 - for the state of the button and it's
04:03 - going to read it as an integer now that
04:05 - integer we can think of as 0 or 1 or we
04:07 - can also think of it as the constant
04:08 - slow and hot so now we get into if
04:11 - statements so we're going to set up an
04:12 - if statement that's gonna check the
04:14 - state of the button the way an if
04:18 - statement works is it's going to check
04:20 - the condition is button state equal to
04:22 - hot if it is it's going to run the code
04:24 - inside
04:25 - curly brackets if it is not true it's
04:28 - going to skip the code inside of these
04:30 - curly brackets so in here we need to
04:32 - turn the LED on which we've done before
04:36 - using a digital right led pin hot then
04:39 - we can do something called an else
04:40 - statement an else statement says if the
04:43 - if statement is not true therefore the
04:45 - code inside these curly brackets does
04:47 - not run will automatically look for an
04:50 - else if there's a else it will run code
04:52 - instead and this creates an either-or
04:54 - situation either do this or do this but
04:57 - don't ever do both in the else I can do
05:00 - it a digital write led pin low and this
05:04 - is going to turn my LED back off so if
05:07 - the button is reading a high value it's
05:09 - going to turn the LED on otherwise or
05:12 - else in any other situation which would
05:14 - be low it's going to turn the LED off so
05:18 - let's push this out to our board and
05:19 - test it and see if it works and here we
05:25 - have it as I'm holding down the button
05:28 - the LED is on when I release the button
05:30 - the LED turns back off so it's working
05:33 - the way that we wanted it to work great
05:37 - job with the bass lesson for the
05:39 - extension instead of having the LED off
05:40 - when the button isn't being pressed have
05:43 - the LED dim and then when the button
05:45 - gets pressed the LED should brighten up
05:47 - I'll give you a hint you will need to
05:48 - mess with your wiring and with your code
05:50 - to make this happen and remember when we
05:52 - talked about analog versus digital how
05:55 - that affects the pins we use and how
05:57 - that affects the calls that we use
05:58 - inside of our code good luck for the
06:02 - challenge for lesson eight you're gonna
06:03 - need to look into using a variable as a
06:05 - toggle because what I want to happen now
06:07 - is when I press the button the LED
06:09 - should turn on when I press the button
06:11 - again the LED should turn off but I
06:14 - shouldn't need to hold the button down
06:15 - for it to stay on think of it like a
06:17 - light switch when you enter a room this
06:18 - one's going to take a little bit more
06:20 - digging and you might have to do some
06:21 - research online to make it happen good
06:23 - luck and I'll see you back here in
06:24 - Lesson number nine thanks for watching
06:26 - if you liked what you saw like the video
06:27 - and subscribe to our channel to stay up
06:29 - to date as we post more in the Arduino
06:31 - basics tutorial series
06:32 - [Music]
06:38 - [Music]

Cleaned transcript:

hello fellow human fellow human fellow human welcome back to the Arduino basics tutorial series this is lesson number eight we're gonna be learning how to use a button in our circuits let's go through the wiring that you're going to need to setup in order to do this project once we set up the wiring we'll explain a little bit more with how the button actually works to start you'll need a few materials you'll need a 220 ohm resistor a 10 kiloohm resistor standard four pin push button and an LED so the first thing we're gonna do is we're gonna connect to pin number 4 up onto our breadboard I've got mine going to pin 20 make that a yellow wire next I'm gonna put my button on the bridge of my breadboard so here's a standard 4 pin button with the buttons you'll notice the pins stick out on opposite sides so two pins on one side two pins opposite and we're gonna cover over the bridge of the breadboard with our button so the bottom lefthand leg is connected through to pin number 4 on our Arduino board next we're gonna take the top left hand leg we're gonna connect through a 10 kiloohm resistor to the ground row so now I have the top left hand leg connected through a 10 kiloohm resistor to the ground row the top right hand leg we're just going to connect with a wire directly to voltage so our button bottom left leg pin going down through pin 4 and Arduino top left through a 10 kilo ohm resistor to ground top right through a voltage wire to the voltage row of our red book next we're gonna wire up our LED which we're already familiar how to do I'm gonna use pin number 8 connect it up onto my breadboard then I'm gonna use a 220 ohm resistor over the bridge of my breadboard the long leg of my LED pin and then the short leg through to ground so this is what our completed circuit will be how does the button work what's happening inside of a button as you can see in this pin out is that the opposite legs are already connected to each other so top left and bottom left are already connected top right and bottom right are already connected pushing in the button makes the lateral connection so it would connect bottom left to bottom right or top left to top right so right now our pin number four is connected directly through the button to the ground through a 10 kilo ohm resistor when the button gets pushed down it is going to connect top right and top left now that voltage that current is going to be choosing between going through the 10 kilo ohm resistor to ground or with no resistance into the Arduino well it will choose the path of least resistance and it will come into the Arduino and that's where we're gonna get our button reading when the voltage is passing through so when the button is pushed voltage is going to pass through the Arduino when the button is not pushed no voltage is gonna pass through we call this a passive low state you can switch this ground and voltage wire and Cree what's called a passive high state we're not gonna worry about doing that in this particular lesson so here we are in the code interface for lesson 8 I've created a new file new sketch called lesson 8 and we're ready to start our code so we're gonna start by declaring a pin for the LED and a pin for the button as you remember we wired up our button to 4 and our led to pin 8 so I've assigned those variables to those particular integer values next in our setup function we're going to set those as input or output pins so our LED pin it's gonna be an output pin our button pin is going to be an input pin I'll normally setup the serial monitor as well just in case I need to do any debugging in my program just in case I need to do any debugging in my program that's it for our set up function let's head over to the loop function now so inside of our loop function we need a variable that's going to tell us the state of the button whether it's high or low on or off so what I've done is I've created an integer called button state that's going to do a digital read on the button pin remember button pin is an input so it's going to be listening to pin number 4 for the state of the button and it's going to read it as an integer now that integer we can think of as 0 or 1 or we can also think of it as the constant slow and hot so now we get into if statements so we're going to set up an if statement that's gonna check the state of the button the way an if statement works is it's going to check the condition is button state equal to hot if it is it's going to run the code inside curly brackets if it is not true it's going to skip the code inside of these curly brackets so in here we need to turn the LED on which we've done before using a digital right led pin hot then we can do something called an else statement an else statement says if the if statement is not true therefore the code inside these curly brackets does not run will automatically look for an else if there's a else it will run code instead and this creates an eitheror situation either do this or do this but don't ever do both in the else I can do it a digital write led pin low and this is going to turn my LED back off so if the button is reading a high value it's going to turn the LED on otherwise or else in any other situation which would be low it's going to turn the LED off so let's push this out to our board and test it and see if it works and here we have it as I'm holding down the button the LED is on when I release the button the LED turns back off so it's working the way that we wanted it to work great job with the bass lesson for the extension instead of having the LED off when the button isn't being pressed have the LED dim and then when the button gets pressed the LED should brighten up I'll give you a hint you will need to mess with your wiring and with your code to make this happen and remember when we talked about analog versus digital how that affects the pins we use and how that affects the calls that we use inside of our code good luck for the challenge for lesson eight you're gonna need to look into using a variable as a toggle because what I want to happen now is when I press the button the LED should turn on when I press the button again the LED should turn off but I shouldn't need to hold the button down for it to stay on think of it like a light switch when you enter a room this one's going to take a little bit more digging and you might have to do some research online to make it happen good luck and I'll see you back here in Lesson number nine thanks for watching if you liked what you saw like the video and subscribe to our channel to stay up to date as we post more in the Arduino basics tutorial series
