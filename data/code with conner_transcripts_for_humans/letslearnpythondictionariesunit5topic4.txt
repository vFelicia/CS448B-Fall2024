With timestamps:

00:02 - hello humans
00:03 - welcome back to code with conor this is
00:05 - the let's learn python
00:07 - course we are in unit five topic number
00:09 - four
00:10 - and i just gotta say i'm really proud of
00:12 - you because you're here and that's
00:14 - incredible
00:15 - and this this right here this is our
00:17 - last lesson
00:19 - now i mean you're not done you're still
00:21 - gonna have a project and an end of
00:22 - course project and other stuff like that
00:24 - to do but
00:25 - this is it this is all i'm gonna teach
00:26 - you about python and then there's a lot
00:28 - more
00:28 - to learn about python let's be clear
00:31 - this is an introduction
00:32 - to the language and the programming but
00:36 - hopefully you built a good foundation
00:37 - going through the program so i'm glad
00:38 - you're here
00:39 - i think that's awesome to start we have
00:42 - to go back and look at probably the
00:43 - hardest challenge that we've done
00:44 - so far which was the maze let's do that
00:48 - right now okay so in the last one we
00:50 - created a maze and we were able to use
00:52 - wasd
00:53 - pressing enter which with each input not
00:55 - dynamic
00:56 - in order to kind of navigate our maze so
00:59 - let's look
00:59 - at the code and see how we pulled it off
01:01 - so i have a couple variables of r1 and
01:03 - c1 that represents my current player
01:05 - position
01:06 - i am in row one
01:09 - column one remember they start at zero
01:11 - row zero row one
01:13 - column zero column one okay so i'm in
01:15 - one one
01:16 - this is my maze it's a two dimensional
01:19 - list so it's a list of lists you'll
01:21 - notice
01:21 - opening bracket closing bracket both
01:24 - square
01:24 - that represents the greater list and
01:26 - then what's inside of it
01:28 - each of these rows is also a list of
01:30 - strings
01:31 - comma separated values i've used x for
01:34 - the walls i've used an at symbol for the
01:36 - player
01:36 - spaces to represent where i'll actually
01:38 - move through the maze
01:40 - and then we end it off here i've got an
01:42 - asterisk here for the
01:43 - goal where you're headed to reach so i
01:46 - broke my thing into functions
01:47 - i have a make move function that's our
01:49 - big one i'm going to come back to that
01:50 - in a minute
01:51 - first we'll look at game one so i needed
01:54 - a way to quickly make sure
01:55 - that i won the game so it's really
01:57 - simple i just
01:59 - global my maze now i'm not going to
02:01 - modify maze here so technically i don't
02:02 - need to do this
02:04 - i can still view it but you know what i
02:06 - i'm in the habit of
02:07 - i reference my globals and then if maze
02:10 - box rc
02:11 - so current player position is equal to
02:14 - star
02:14 - then return true so i'm going to use
02:16 - that function
02:17 - somewhere in my make move to confirm
02:19 - whether or not the game is over
02:21 - okay so then i did a print maze so let's
02:24 - look at this real quick
02:25 - global maze so i have my nested for
02:27 - loops so for i in range
02:29 - length of maze so that is the length of
02:32 - the outer list so that's going to be
02:34 - how many rows there are so this is
02:37 - iterating through rows
02:39 - this is saying for i in range length of
02:41 - maize box
02:42 - zero so that's saying take the list
02:45 - that's in the first spot
02:46 - and count its size that's going to be
02:48 - your number of columns
02:51 - so this is going to loop number of rows
02:53 - this is going to loop number of columns
02:55 - then it's going to print an individual
02:57 - element
02:58 - followed by a space and not
03:02 - go to a new line it's going to do that
03:05 - for the entire row
03:06 - so each element in that row and then
03:09 - when it's done
03:10 - it's going to jump to a new line and
03:12 - then jump to a new row
03:14 - and then print everything in the next
03:15 - row and so so this is my way of printing
03:18 - it in a kind of a clean way
03:20 - all right at the bottom i just call the
03:22 - make move function that's where
03:23 - everything happens so let's look at that
03:24 - so i pull in my globals rc and maze and
03:28 - i chunk everything into a wild true loop
03:30 - i'm going to call printmates so bam
03:31 - here's your maze look at it
03:33 - okay then collect their choice wasd
03:37 - we'll look at my f structure if it's w
03:40 - else if it's a else if
03:44 - it's s and then else if it's d
03:48 - and then else is just print invalid
03:50 - entry continue
03:52 - so what's in each of these will be
03:54 - pretty much the same code with little
03:55 - tweaks
03:56 - so if they entered w w should represent
03:59 - moving
04:00 - up in my maze so moving up actually
04:02 - means my row value is going
04:04 - down by one if i'm making that move so i
04:08 - check
04:08 - if maize position r minus one
04:12 - and c so my row value is going down 1
04:15 - but my column values are going to change
04:17 - if that's not an x so in other words the
04:20 - position above me
04:21 - is empty if it's not an x you could have
04:24 - also done equal equals a space
04:26 - okay if it's not an x then we're going
04:29 - to move
04:30 - up into that position so we're now going
04:32 - to say
04:33 - maze in my current position is now a
04:36 - space
04:38 - i'm going to change my r value of my
04:40 - player okay
04:42 - and then at the end here i'm going to
04:43 - write the new position to be
04:46 - the atom but in between those
04:49 - decrementing r and doing this i'm just
04:52 - going to double check that i'm not at
04:53 - the end of the maze
04:54 - so i check i've adjusted my player
04:56 - position but i haven't drawn the at yet
04:59 - the reason i'm checking first is because
05:01 - if i draw the at
05:02 - over top of the asterisk then i'll never
05:05 - be able to see that the asterisk was
05:06 - there
05:07 - so i'm going to do if game one that
05:10 - checks if i'm currently standing on an
05:13 - asterisk space
05:14 - then print you in and break the loop if
05:16 - i made it past that if statement
05:18 - then i know i'm not on a winning block
05:21 - so i change the value to the app
05:23 - else so if this was an
05:26 - x then i'm going to print invalid move
05:29 - and continue
05:30 - so they tried to run into a wall and
05:32 - then we're just going to repeat this
05:33 - code
05:33 - four times the only thing that's going
05:35 - to change
05:36 - is how we iterate either the row or
05:39 - column value based on direction
05:42 - so when i go here to a a should be a
05:44 - move to the left
05:45 - so column value going down by one column
05:48 - value going down by one
05:50 - everything else remains the same when i
05:52 - look at s
05:54 - trying to go down my row value is going
05:56 - to go up by one
05:58 - check row value up by one increment by
06:00 - one
06:01 - okay if i'm pressing d i'm going to the
06:04 - right
06:05 - so column plus one column plus one
06:08 - so that's how we built the maze game in
06:11 - the last lesson
06:12 - that's a big one and i know i haven't
06:14 - gone through line for life and i know i
06:15 - don't give you the code and i know that
06:17 - drives you crazy because you just want
06:18 - me to give you the code
06:20 - cool i mean if you just want to find
06:22 - someone else's code go google it
06:24 - i want you to type i want you to write
06:26 - code i want you to struggle a little bit
06:28 - that's how you're going to learn
06:31 - so yeah yeah i'd be frustrated with me
06:33 - for not giving you the code but
06:35 - oh well here's what it is all right so
06:38 - that's it for the challenge from the
06:39 - last lesson let's jump ahead and let's
06:40 - look at our last lesson unit 5
06:43 - topic 4. here we are the last of the
06:46 - data structures that we're going to talk
06:47 - about which are
06:48 - dictionaries dictionaries are kind of
06:51 - like lists
06:52 - the only difference is with lists you
06:55 - have this
06:56 - indexing system built in the same
06:58 - indexing system we use with strings
07:00 - where it's index zero up and it's an
07:02 - integer index value
07:04 - with dictionaries we get to control not
07:07 - just the values in the data structure
07:09 - but we also control the keys so those
07:12 - are the indices
07:13 - and they're not just numbers so let's
07:15 - jump in and see
07:16 - so i'm going to make a dictionary my
07:18 - dictionary equals
07:20 - we're going to use the squigglers the
07:22 - squiggly braces
07:23 - okay these are going to define my
07:25 - dictionary there's other ways to do this
07:26 - too with the dict function
07:28 - okay we're just going to do it the
07:29 - old-fashioned way for now and you can
07:31 - look at
07:31 - the link in the description if you want
07:33 - to see more
07:35 - and then what goes in it comma separated
07:37 - values right
07:39 - there's a value right here boom comma
07:42 - then there's the next one
07:43 - comma and so on these are the items that
07:45 - are going in my dictionary
07:46 - you'll notice my item consists of two
07:48 - parts
07:50 - the part on the left then a colon and
07:52 - then the part on the right
07:54 - this is the key this is how we're going
07:56 - to find this item
07:58 - in my data structure this is the value
08:02 - okay so key value
08:06 - pairs are what go inside dictionaries
08:08 - now in this case i've made my keys
08:10 - strings and i've made my values strings
08:12 - with the exception of this
08:14 - i made this a list of strings
08:17 - so couple of quick notes about setting
08:19 - up dictionaries
08:20 - one your keys do not need to be strings
08:25 - however they do need to be immutable
08:29 - which means they cannot be something
08:31 - that
08:32 - is dynamic so a string is fine
08:36 - an integer is fine a boolean is
08:40 - fine but you can't put like a list as a
08:43 - key
08:44 - right a tuple is fine you can't just
08:47 - modify the values dynamically within
08:49 - that
08:50 - that variable's data range so you need
08:52 - to make sure that that's what you're
08:53 - using for a key
08:54 - now it's important to note if you use
08:56 - integers
08:58 - the order is not there in the same way
09:00 - that it is with lists
09:02 - the order is not really a thing with
09:04 - dictionaries and technically it is but
09:06 - it's
09:07 - it's not something that's relevant okay
09:09 - it's all about the key
09:11 - value pair that's what really matters
09:14 - and we're going to play with this really
09:15 - quickly so let's
09:16 - i'm going to comment out some code and
09:17 - then we're going to print this so we're
09:19 - going to run this
09:20 - just real quick all we have in there is
09:22 - it prints out our dictionary so you'll
09:24 - see it prints
09:25 - the key and then the value in pairs
09:28 - right all the way through the list so
09:30 - let's play a little bit with what we can
09:32 - do with this let's say
09:32 - maybe we want this key to be an actual
09:34 - integer for example
09:36 - and maybe we want this to be a value of
09:40 - 15.5 so this is a float
09:42 - just to see how we can have those
09:44 - different pieces of
09:45 - variable types in there run that nothing
09:48 - changes
09:49 - right everything's the same so accessing
09:51 - elements of the dictionaries just like
09:53 - accessing elements of a list
09:55 - it's just we don't have an index now we
09:57 - have a key so
09:58 - instead of printing my dictionary maybe
10:00 - i want to print box
10:02 - and this is where we're a little
10:03 - different we're not entering an integer
10:04 - based on order
10:06 - we are entering a key so
10:09 - key 3 which is a string so i can do that
10:12 - that should print 15.5
10:16 - prints 15.5 perfect
10:20 - what if we wanted to print what's in box
10:23 - 2. now remember box 2 is not about order
10:26 - it is about the key value
10:30 - and there it is this is the second value
10:34 - what if we wanted to print oh i don't
10:35 - know this fav colors so let's do that
10:38 - fave colors because that's my key
10:44 - and there it is now what if i wanted to
10:45 - just print orange
10:47 - so that element that's in there this is
10:49 - a list now lists
10:51 - still have their same indexing procedure
10:53 - so once i've done this my dictionary box
10:56 - fav colors
10:57 - that's returning an entire list to me
10:59 - and now i have the power of a list
11:01 - and i can do stuff with it so for
11:03 - example i can add another box here
11:06 - and put box two zero one two
11:09 - run that and there's orange
11:12 - so once i have my list i can then use
11:16 - regular list notation
11:17 - the list is a value stored with a
11:20 - matching key in a dictionary
11:22 - so this is how we use dictionaries and
11:24 - they can be used for all kinds of
11:25 - purposes
11:26 - and the nice thing about a dictionary is
11:28 - you can add stuff to it
11:29 - um so you can have you can add new items
11:32 - to the dictionary you can overwrite old
11:34 - items you can remove items you can pop
11:36 - you've got a lot of that same
11:37 - functionality that you would have with a
11:39 - list it's just you're not
11:40 - limited to this index system of
11:43 - numerical ordered indices
11:45 - you're able to be flexible with the key
11:46 - value and how that compares to the value
11:49 - so that's nice piece with the the way
11:51 - that they work
11:52 - one thing that's important to note is
11:54 - you can't have more than
11:56 - one key value that are the same if you
11:59 - try to do that
12:00 - what happens is it just overwrites
12:03 - whatever the value was that was paired
12:05 - with that key before
12:06 - i'll give you an example so we'll just
12:08 - print box two here
12:11 - and let's do my dictionary
12:16 - box two equals
12:20 - seven this is just going to overwrite
12:23 - whatever's associated with that key
12:25 - right it's not actually going to make
12:27 - another addition
12:28 - to my dictionary if you wanted to add
12:31 - something that wasn't already there you
12:32 - could just do
12:33 - my dictionary box and then put the key
12:37 - value in
12:38 - so new key and then equals and then put
12:41 - the actual value that you want it to
12:42 - have
12:43 - true and that's now going to be
12:46 - in that dictionary so if i ran that
12:50 - say like that and then run it
12:53 - right you can see that that's now in
12:54 - their new key troop
12:56 - so we can add things like that there are
12:58 - some functions we can use too to kind of
12:59 - pull stuff or whatever and i'll review
13:01 - just a couple quickly and then we'll
13:02 - wrap it up
13:03 - all right so quickly we'll just go over
13:05 - deleting so if you want to delete an
13:06 - element from a list
13:07 - so here's a way we can do that so let's
13:10 - say
13:11 - key one so the del command is reserved
13:14 - in python
13:15 - so d e l from my dictionary key one and
13:18 - this will remove the key
13:19 - value pair that exists with
13:22 - this key value so it's not just going to
13:25 - eliminate the value and leave the key
13:27 - it's like the whole pair has to come out
13:28 - together so this will work to delete
13:30 - that value
13:31 - you just do dell my dictionary key one
13:34 - and that works great
13:35 - if you want to remove something you also
13:37 - have the ability to do some of the
13:38 - similar stuff you did with lists like
13:39 - pop
13:40 - and then you have it right and then you
13:42 - can do something with it if you wanted
13:44 - to do that which removes it
13:45 - and gives it back to you which can be
13:47 - really useful there's a clear function
13:49 - that you can use on dictionaries to
13:51 - you know wipe the whole dictionary
13:53 - there's also a get
13:54 - which will like give you the value if
13:56 - for some reason you wanted to do that
13:57 - using a function
13:58 - versus just going directly to the key so
14:01 - there's a bunch of stuff there
14:02 - and i'll put a link in the description
14:03 - with a little bit more detail about
14:04 - dictionaries
14:05 - but that's kind of the the idea of how
14:07 - this data structure works and how it's
14:09 - different than lists
14:10 - which we've already used so just
14:12 - remember the key value is in your
14:14 - control
14:15 - you can't duplicate it and it needs to
14:17 - be an immutable data type
14:19 - typically we'll use strings or something
14:21 - similar
14:22 - then the value can be of any data type
14:24 - all right those are some important
14:26 - pieces to know with dictionaries
14:27 - we're not going to do a challenge for
14:29 - this last one because we're going to
14:30 - jump in and look at the unit project
14:32 - next which is a big one so i don't think
14:35 - there was a need to do a little mini
14:36 - challenge on dictionaries
14:38 - thank you for sticking with me for the
14:39 - lessons this has been really fun to make
14:42 - and i hope that it's been helpful for
14:44 - the people that are out there trying to
14:45 - learn python
14:46 - uh for the first time and i'd love to
14:48 - extend on it do something a little more
14:50 - advanced in the future
14:51 - we're gonna see it back real soon to do
14:53 - the project and then the
14:55 - end of course project which we'll do at
14:57 - the very end
14:58 - in the last video so like share
15:00 - subscribe do all those fun things kind
15:02 - of keeps me motivated
15:03 - we'll see you back real soon

Cleaned transcript:

hello humans welcome back to code with conor this is the let's learn python course we are in unit five topic number four and i just gotta say i'm really proud of you because you're here and that's incredible and this this right here this is our last lesson now i mean you're not done you're still gonna have a project and an end of course project and other stuff like that to do but this is it this is all i'm gonna teach you about python and then there's a lot more to learn about python let's be clear this is an introduction to the language and the programming but hopefully you built a good foundation going through the program so i'm glad you're here i think that's awesome to start we have to go back and look at probably the hardest challenge that we've done so far which was the maze let's do that right now okay so in the last one we created a maze and we were able to use wasd pressing enter which with each input not dynamic in order to kind of navigate our maze so let's look at the code and see how we pulled it off so i have a couple variables of r1 and c1 that represents my current player position i am in row one column one remember they start at zero row zero row one column zero column one okay so i'm in one one this is my maze it's a two dimensional list so it's a list of lists you'll notice opening bracket closing bracket both square that represents the greater list and then what's inside of it each of these rows is also a list of strings comma separated values i've used x for the walls i've used an at symbol for the player spaces to represent where i'll actually move through the maze and then we end it off here i've got an asterisk here for the goal where you're headed to reach so i broke my thing into functions i have a make move function that's our big one i'm going to come back to that in a minute first we'll look at game one so i needed a way to quickly make sure that i won the game so it's really simple i just global my maze now i'm not going to modify maze here so technically i don't need to do this i can still view it but you know what i i'm in the habit of i reference my globals and then if maze box rc so current player position is equal to star then return true so i'm going to use that function somewhere in my make move to confirm whether or not the game is over okay so then i did a print maze so let's look at this real quick global maze so i have my nested for loops so for i in range length of maze so that is the length of the outer list so that's going to be how many rows there are so this is iterating through rows this is saying for i in range length of maize box zero so that's saying take the list that's in the first spot and count its size that's going to be your number of columns so this is going to loop number of rows this is going to loop number of columns then it's going to print an individual element followed by a space and not go to a new line it's going to do that for the entire row so each element in that row and then when it's done it's going to jump to a new line and then jump to a new row and then print everything in the next row and so so this is my way of printing it in a kind of a clean way all right at the bottom i just call the make move function that's where everything happens so let's look at that so i pull in my globals rc and maze and i chunk everything into a wild true loop i'm going to call printmates so bam here's your maze look at it okay then collect their choice wasd we'll look at my f structure if it's w else if it's a else if it's s and then else if it's d and then else is just print invalid entry continue so what's in each of these will be pretty much the same code with little tweaks so if they entered w w should represent moving up in my maze so moving up actually means my row value is going down by one if i'm making that move so i check if maize position r minus one and c so my row value is going down 1 but my column values are going to change if that's not an x so in other words the position above me is empty if it's not an x you could have also done equal equals a space okay if it's not an x then we're going to move up into that position so we're now going to say maze in my current position is now a space i'm going to change my r value of my player okay and then at the end here i'm going to write the new position to be the atom but in between those decrementing r and doing this i'm just going to double check that i'm not at the end of the maze so i check i've adjusted my player position but i haven't drawn the at yet the reason i'm checking first is because if i draw the at over top of the asterisk then i'll never be able to see that the asterisk was there so i'm going to do if game one that checks if i'm currently standing on an asterisk space then print you in and break the loop if i made it past that if statement then i know i'm not on a winning block so i change the value to the app else so if this was an x then i'm going to print invalid move and continue so they tried to run into a wall and then we're just going to repeat this code four times the only thing that's going to change is how we iterate either the row or column value based on direction so when i go here to a a should be a move to the left so column value going down by one column value going down by one everything else remains the same when i look at s trying to go down my row value is going to go up by one check row value up by one increment by one okay if i'm pressing d i'm going to the right so column plus one column plus one so that's how we built the maze game in the last lesson that's a big one and i know i haven't gone through line for life and i know i don't give you the code and i know that drives you crazy because you just want me to give you the code cool i mean if you just want to find someone else's code go google it i want you to type i want you to write code i want you to struggle a little bit that's how you're going to learn so yeah yeah i'd be frustrated with me for not giving you the code but oh well here's what it is all right so that's it for the challenge from the last lesson let's jump ahead and let's look at our last lesson unit 5 topic 4. here we are the last of the data structures that we're going to talk about which are dictionaries dictionaries are kind of like lists the only difference is with lists you have this indexing system built in the same indexing system we use with strings where it's index zero up and it's an integer index value with dictionaries we get to control not just the values in the data structure but we also control the keys so those are the indices and they're not just numbers so let's jump in and see so i'm going to make a dictionary my dictionary equals we're going to use the squigglers the squiggly braces okay these are going to define my dictionary there's other ways to do this too with the dict function okay we're just going to do it the oldfashioned way for now and you can look at the link in the description if you want to see more and then what goes in it comma separated values right there's a value right here boom comma then there's the next one comma and so on these are the items that are going in my dictionary you'll notice my item consists of two parts the part on the left then a colon and then the part on the right this is the key this is how we're going to find this item in my data structure this is the value okay so key value pairs are what go inside dictionaries now in this case i've made my keys strings and i've made my values strings with the exception of this i made this a list of strings so couple of quick notes about setting up dictionaries one your keys do not need to be strings however they do need to be immutable which means they cannot be something that is dynamic so a string is fine an integer is fine a boolean is fine but you can't put like a list as a key right a tuple is fine you can't just modify the values dynamically within that that variable's data range so you need to make sure that that's what you're using for a key now it's important to note if you use integers the order is not there in the same way that it is with lists the order is not really a thing with dictionaries and technically it is but it's it's not something that's relevant okay it's all about the key value pair that's what really matters and we're going to play with this really quickly so let's i'm going to comment out some code and then we're going to print this so we're going to run this just real quick all we have in there is it prints out our dictionary so you'll see it prints the key and then the value in pairs right all the way through the list so let's play a little bit with what we can do with this let's say maybe we want this key to be an actual integer for example and maybe we want this to be a value of 15.5 so this is a float just to see how we can have those different pieces of variable types in there run that nothing changes right everything's the same so accessing elements of the dictionaries just like accessing elements of a list it's just we don't have an index now we have a key so instead of printing my dictionary maybe i want to print box and this is where we're a little different we're not entering an integer based on order we are entering a key so key 3 which is a string so i can do that that should print 15.5 prints 15.5 perfect what if we wanted to print what's in box 2. now remember box 2 is not about order it is about the key value and there it is this is the second value what if we wanted to print oh i don't know this fav colors so let's do that fave colors because that's my key and there it is now what if i wanted to just print orange so that element that's in there this is a list now lists still have their same indexing procedure so once i've done this my dictionary box fav colors that's returning an entire list to me and now i have the power of a list and i can do stuff with it so for example i can add another box here and put box two zero one two run that and there's orange so once i have my list i can then use regular list notation the list is a value stored with a matching key in a dictionary so this is how we use dictionaries and they can be used for all kinds of purposes and the nice thing about a dictionary is you can add stuff to it um so you can have you can add new items to the dictionary you can overwrite old items you can remove items you can pop you've got a lot of that same functionality that you would have with a list it's just you're not limited to this index system of numerical ordered indices you're able to be flexible with the key value and how that compares to the value so that's nice piece with the the way that they work one thing that's important to note is you can't have more than one key value that are the same if you try to do that what happens is it just overwrites whatever the value was that was paired with that key before i'll give you an example so we'll just print box two here and let's do my dictionary box two equals seven this is just going to overwrite whatever's associated with that key right it's not actually going to make another addition to my dictionary if you wanted to add something that wasn't already there you could just do my dictionary box and then put the key value in so new key and then equals and then put the actual value that you want it to have true and that's now going to be in that dictionary so if i ran that say like that and then run it right you can see that that's now in their new key troop so we can add things like that there are some functions we can use too to kind of pull stuff or whatever and i'll review just a couple quickly and then we'll wrap it up all right so quickly we'll just go over deleting so if you want to delete an element from a list so here's a way we can do that so let's say key one so the del command is reserved in python so d e l from my dictionary key one and this will remove the key value pair that exists with this key value so it's not just going to eliminate the value and leave the key it's like the whole pair has to come out together so this will work to delete that value you just do dell my dictionary key one and that works great if you want to remove something you also have the ability to do some of the similar stuff you did with lists like pop and then you have it right and then you can do something with it if you wanted to do that which removes it and gives it back to you which can be really useful there's a clear function that you can use on dictionaries to you know wipe the whole dictionary there's also a get which will like give you the value if for some reason you wanted to do that using a function versus just going directly to the key so there's a bunch of stuff there and i'll put a link in the description with a little bit more detail about dictionaries but that's kind of the the idea of how this data structure works and how it's different than lists which we've already used so just remember the key value is in your control you can't duplicate it and it needs to be an immutable data type typically we'll use strings or something similar then the value can be of any data type all right those are some important pieces to know with dictionaries we're not going to do a challenge for this last one because we're going to jump in and look at the unit project next which is a big one so i don't think there was a need to do a little mini challenge on dictionaries thank you for sticking with me for the lessons this has been really fun to make and i hope that it's been helpful for the people that are out there trying to learn python uh for the first time and i'd love to extend on it do something a little more advanced in the future we're gonna see it back real soon to do the project and then the end of course project which we'll do at the very end in the last video so like share subscribe do all those fun things kind of keeps me motivated we'll see you back real soon
