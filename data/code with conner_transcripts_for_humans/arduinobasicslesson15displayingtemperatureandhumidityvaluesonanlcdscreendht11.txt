With timestamps:

00:01 - [Music]
00:11 - hello future engineer welcome back to
00:14 - the Arduino basics tutorial series on
00:16 - code with Connor this is lesson number
00:17 - 15 where we're gonna use an LCD screen
00:19 - to display temperature and humidity
00:21 - values based on a temperature humidity
00:23 - sensor so let's get started with the
00:25 - wiring for this lesson I'm using a dht11
00:28 - temperature and humidity sensor these
00:30 - come in a three pin and a 4 pin model in
00:32 - each case I'm still only gonna wire up
00:33 - three of the pins and it allows me to
00:35 - get a decent reading on the temperature
00:36 - and the humidity inside of a room
00:38 - reading from left to right on the
00:40 - humidity sensor the left pin is gonna go
00:42 - to voltage next pin the second pin in is
00:46 - going to go to our due√±o board I
00:47 - currently have this one going to a pin
00:50 - number seven and then the third or final
00:53 - pin depending on whether you have a
00:54 - three pin or a four pin will go to the
00:56 - ground if you have a four pin DHC sensor
00:59 - it's the third from the left that you'll
01:00 - skip okay and the final pin will go to
01:02 - ground like I have in the diagram that's
01:04 - all the wiring we need for the sensor
01:05 - it's like in a previous lesson we're
01:06 - gonna wire up our LCD display using an
01:09 - i2c chip ground goes to the ground row
01:12 - the VCC goes to the voltage row our SDA
01:16 - our data pin is going to a four and our
01:19 - SCL our clock pin is going to a thigh so
01:23 - this is what our wiring setup is gonna
01:24 - look like in order for our sensor to be
01:26 - able to read in temperature and humidity
01:27 - values from the room and our LCD screen
01:30 - to connect to our code so that we can
01:32 - eventually print those values out to the
01:34 - screen now the wiring is all done we're
01:36 - gonna jump over to the code and figure
01:38 - out how to write the code for this
01:39 - project so here we are in our coding
01:41 - interface I've created a new file for
01:43 - lesson number 15 well we're gonna
01:44 - display temperature and humidity values
01:46 - on an LCD screen to start things off we
01:49 - need to bring in a few libraries in
01:50 - order to work with both our LCD screen
01:52 - as well as with our DHT sensor for the
01:56 - DHT library I can do D H th and DHT
01:59 - underscore U dot H for universal these
02:02 - are two DHT libraries if you look it up
02:04 - through the library section on idea
02:05 - Arduino web interface these will be the
02:07 - ones that will automatically pull into
02:09 - your code when you search for DHT our
02:11 - same library our liquid crystal i2c lie
02:13 - that we used earlier to bring in the
02:16 - library needed to work with our LCD
02:17 - display now that we have our libraries
02:19 - in let's put in the code to initialize
02:21 - our LCD display and this is the code we
02:24 - used earlier liquid-crystal underscore
02:27 - i2c which is our library call this one
02:29 - LCD and then 0 X - 7 xx + 4 helps set it
02:33 - up as a 16 by 2 line display which is
02:36 - what our standard LCD display is next up
02:39 - we're gonna set up the pins and
02:40 - initialize our sensor so I'm going to
02:43 - define a DHT pin as 7 and defined DHT
02:47 - type as DHT 11 and then I set up my DHT
02:51 - object th TD HD using the pin and the
02:54 - type so now a lowercase DHT can be used
02:57 - when referencing our sensor and lower
02:59 - case LCD can be used in referencing our
03:01 - screen so this has set up all of the
03:04 - initial functionality with our libraries
03:07 - and our sensor in our screen that we can
03:09 - now jump into our setup function and
03:11 - begin writing our own code first thing
03:12 - we're going to do inside of our setup
03:14 - function is initialize our screen and
03:16 - our sensor to initialize our screen like
03:20 - in the previous lesson LCD on it
03:22 - followed by LCD backlight ok this sets
03:26 - it up is ready to print values to it and
03:28 - turns the backlight on on the LCD
03:29 - display the sensor uses a begin function
03:32 - so DHT dot begin to initialize the
03:35 - sensor so it's now ready to read values
03:37 - and finally in our setup function we'll
03:40 - print some basic debug and intro
03:41 - statements out to our serial monitor
03:43 - just to use for debugging and
03:44 - understanding how our sensor is reading
03:46 - values so I will begin my serial monitor
03:49 - wait half of a second for the system to
03:52 - boot up and then I'm going to print
03:53 - dht11 humidity and temperature sensor
03:56 - backslash n backslash n now this is a
03:58 - newline character backslash n so that
04:01 - forces our serum owner to jump down to a
04:04 - newline kind of like pressing enter so
04:06 - by adding those inside the quotation
04:07 - marks can jump extra lines it's good for
04:09 - formatting things sometimes and then
04:11 - delay one second before we actually go
04:13 - into our loop function this is just an
04:15 - initialization set of print statements
04:18 - now we're ready to write the actual code
04:19 - to read our temperature sensor and then
04:22 - display those values on our screen so in
04:24 - order to read the values from our sensor
04:25 - we need
04:26 - some functions that are built into our
04:28 - library particular read humidity and
04:31 - read temperature so these are gonna
04:34 - return what's called a float value which
04:36 - is a decimal value of that decimal
04:38 - varial type so float H is going to be
04:41 - set equal to DHT don't read humidity I'm
04:44 - creating my own variable H which is of
04:45 - type float and I'm gonna store the
04:48 - return from read humidity into that vine
04:50 - I have floaties it's gonna be the h2
04:53 - read temperature now by default this is
04:55 - going to return the temperature in
04:56 - Celsius which is what we want you can
04:59 - actually pass a true value a boolean
05:03 - statement like true into that which will
05:05 - make it return the value in Fahrenheit
05:07 - instead of in cells
05:09 - we're going to keep it as Celsius so at
05:13 - this point H and T should have our
05:15 - humidity and temperature stored in them
05:17 - but we need to verify that it actually
05:18 - read the values properly from the sensor
05:20 - okay so we're going to use a function
05:22 - and an if statement to check this so
05:25 - let's read through this if is man is n a
05:29 - n humidity or is NaN T so is NaN as a
05:35 - built-in function in arduino which
05:37 - stands for is not a number so if H is
05:41 - somehow not a numerical value then this
05:44 - will fail the if statement if
05:47 - temperature is not a numerical number
05:49 - then this if statement will fail so if
05:51 - either one of these turns out to be true
05:53 - that temperature who humidity is not a
05:55 - number then it will print failed to read
05:58 - from the sensor and it will return which
06:00 - just exits this particular loop and
06:02 - let's the loop function recall over
06:05 - again so this is just a way of checking
06:07 - that it actually read numerical values
06:09 - from the sensor properly so now that
06:11 - we've done that now we're ready to print
06:13 - the values out we've already confirmed
06:15 - they are in fact numerical values so
06:17 - we're gonna print it to two places we're
06:19 - gonna print it to our serial monitor and
06:20 - we're going to print it to our LCD
06:22 - screen so let's start with humidity to
06:25 - print humidity to the serial monitor I
06:27 - do a serial dot print current humidity
06:29 - equals a serial dot print H and then a
06:33 - serial dot print line percentage and
06:35 - another couple of spaces so this should
06:38 - print current humidity equals
06:40 - the actual number followed by a
06:41 - percentage sign to print the humidity to
06:44 - the LCD display I set my cursor to the
06:47 - top row left hand side print H um equals
06:50 - and a space print the humidity value
06:53 - print a percentage sign okay I have less
06:55 - characters to work with so you'll notice
06:57 - I didn't write the entire word humidity
06:59 - so that should print our community to
07:01 - cereal and R cubed e to the LCD let's
07:03 - repeat that process for temperature to
07:06 - print the temperature to the cereal
07:07 - temperature equals print T now this is a
07:10 - little special in Arduino we can use the
07:14 - Unicode value for the degree symbol so
07:15 - this is utf-8 which is backslash X
07:18 - capital C - backslash X capital B 0 and
07:22 - this will put the degree symbol into our
07:25 - serial monitor and then the c4 Celsius
07:27 - so there's just a formatting thing you
07:29 - can look these kind of things up online
07:31 - you can look like Unicode or ASCII value
07:33 - for a degree symbol and you can find the
07:35 - print codes as to what you would put
07:37 - there to print those characters so I
07:39 - wanted to try that it's a different
07:40 - character on the LCD because again the
07:42 - way that it's being written is using a
07:45 - different formatting style so I set the
07:47 - cursor to the second row left hand side
07:49 - print temp print the temperature and
07:51 - then this one uses a char value and a C
07:54 - char belly for 223 which is the degree
07:57 - symbol and then see for Celsius okay so
08:00 - this will print my temperature to
08:01 - serial.print my temp the LCD and then i
08:03 - want to wait I don't need it constantly
08:06 - trying to print all at the same time I
08:09 - want to you know gather the temperature
08:11 - and humidity and then wait a few seconds
08:14 - so I have it waiting five seconds then
08:16 - it'll read the temperature I made it
08:17 - again and update the values in our
08:19 - serial monitor and on our LCD display so
08:23 - this code should read our value make
08:27 - sure it's a valid value print humidity
08:29 - to the LCD and the serial print
08:31 - temperature to the LCD in serial and
08:32 - then wait five seconds and do it all
08:34 - over again let's push it into the code
08:36 - and have a look at how it works
08:38 - we'll start in the serial monitor so we
08:40 - can see on here what we're reading from
08:43 - our humidity sensor so current humidity
08:45 - value with a percentage temperature
08:47 - value of the degree symbol in Celsius
08:49 - and you'll see every five seconds is
08:51 - going to up
08:52 - room I'm in right now is 11 percent
08:54 - humidity 24 degrees Celsius okay and
08:58 - it's gonna continue to update and we can
08:59 - see those values you can also play
09:02 - around like you could wrap your hand
09:03 - around the temperature sensor and see it
09:04 - go up if we look at the LCD display let
09:08 - me just bring this up for you
09:09 - so we can see humidity value temperature
09:12 - value and it updates as the serial
09:15 - monitor updates okay and we get the
09:18 - degree symbol on there so it looks nice
09:19 - works well great job with the bass
09:22 - lesson hopefully you understand a little
09:23 - bit about how to read in values from the
09:25 - sensors know if you don't happen to have
09:26 - a dht11 Tama humidity sensor if you look
09:29 - up whatever type of sensor you have on
09:31 - Google you can usually find the
09:33 - libraries necessary and the basic
09:35 - initialization instructions necessary in
09:38 - order to modify this code to work with a
09:39 - different sensor for the extension for
09:42 - this one what we're gonna do is if you
09:44 - remember I was telling you about how you
09:45 - can add that true parameter into the
09:48 - read temperature value on the sensor to
09:49 - get the value in Fahrenheit so if we
09:52 - have a look at my LCD here you'll see
09:54 - that instead of it doing a new reading
09:57 - every five seconds but every
09:59 - two-and-a-half seconds it's actually
10:01 - reading between or switching between a
10:04 - Celsius and a Fahrenheit reading for the
10:07 - temperature so the humidity is still
10:09 - just in percentage values but now it's
10:11 - displaying the humidity on one line and
10:13 - the temperature in Celsius two and a
10:15 - half seconds later switches out to
10:17 - Fahrenheit and then new reading Celsius
10:20 - switch to Fahrenheit and then new
10:23 - reading Celsius switch to Fahrenheit and
10:25 - so on so that's what we're doing for the
10:27 - extension for this activity just gonna
10:29 - have to read in that extra value from
10:31 - the sensor using the true parameter
10:33 - store it in a different variable and
10:35 - then include that into our print line
10:36 - statements so that we can see it in
10:38 - Fahrenheit and in Celsius and it's just
10:40 - a matter of having some delays in
10:41 - between the prints to the LCD screen so
10:43 - we can see the print in Celsius and a
10:46 - slight delay then the print in
10:47 - Fahrenheit and then it'll redo the loop
10:50 - function which will read new values and
10:51 - repeat the process again so that's what
10:54 - we're looking at for the extension for
10:55 - lesson number 15
10:56 - hopefully the extension went well and
10:59 - you're now comfortable with adding in
11:00 - that new variable and using that read
11:02 - temperature function with
11:04 - without that your parameter to get
11:05 - Celsius or Fahrenheit for the challenge
11:08 - I'm just gonna show you my LCD here so
11:09 - you have an idea what we're looking at
11:11 - now don't worry too much about the
11:12 - timing of it all but just look at the
11:14 - format of the structure so we've got
11:16 - humidity on the top line with a
11:18 - percentage then it switches to
11:19 - temperature and it'll show both the
11:21 - Celsius and the Fahrenheit temperature
11:22 - underneath and then it rotates back and
11:25 - forth maybe you want it a little slower
11:27 - a little faster but the idea there is
11:29 - about having that again that loop
11:31 - structure so it'll display the humidity
11:34 - with the percentage value then it'll
11:35 - switch over display the temperature and
11:37 - then the Celsius and Fahrenheit values
11:39 - you may want to make use of the LCD
11:41 - clear method which allows you to clear
11:44 - anything that's been printed to the LCD
11:45 - screen before you print new values out
11:48 - to the screen you know that could be
11:50 - helpful as well good luck with the
11:52 - challenge I hope it goes well I'm
11:53 - excited to see you back here in Lesson
11:55 - number 16 for the Arduino basics
11:57 - tutorial series if you like what we're
11:58 - doing please like the video subscribe to
12:00 - our channel my name is Adam have
12:02 - yourself a great day
12:02 - [Music]

Cleaned transcript:

hello future engineer welcome back to the Arduino basics tutorial series on code with Connor this is lesson number 15 where we're gonna use an LCD screen to display temperature and humidity values based on a temperature humidity sensor so let's get started with the wiring for this lesson I'm using a dht11 temperature and humidity sensor these come in a three pin and a 4 pin model in each case I'm still only gonna wire up three of the pins and it allows me to get a decent reading on the temperature and the humidity inside of a room reading from left to right on the humidity sensor the left pin is gonna go to voltage next pin the second pin in is going to go to our due√±o board I currently have this one going to a pin number seven and then the third or final pin depending on whether you have a three pin or a four pin will go to the ground if you have a four pin DHC sensor it's the third from the left that you'll skip okay and the final pin will go to ground like I have in the diagram that's all the wiring we need for the sensor it's like in a previous lesson we're gonna wire up our LCD display using an i2c chip ground goes to the ground row the VCC goes to the voltage row our SDA our data pin is going to a four and our SCL our clock pin is going to a thigh so this is what our wiring setup is gonna look like in order for our sensor to be able to read in temperature and humidity values from the room and our LCD screen to connect to our code so that we can eventually print those values out to the screen now the wiring is all done we're gonna jump over to the code and figure out how to write the code for this project so here we are in our coding interface I've created a new file for lesson number 15 well we're gonna display temperature and humidity values on an LCD screen to start things off we need to bring in a few libraries in order to work with both our LCD screen as well as with our DHT sensor for the DHT library I can do D H th and DHT underscore U dot H for universal these are two DHT libraries if you look it up through the library section on idea Arduino web interface these will be the ones that will automatically pull into your code when you search for DHT our same library our liquid crystal i2c lie that we used earlier to bring in the library needed to work with our LCD display now that we have our libraries in let's put in the code to initialize our LCD display and this is the code we used earlier liquidcrystal underscore i2c which is our library call this one LCD and then 0 X 7 xx + 4 helps set it up as a 16 by 2 line display which is what our standard LCD display is next up we're gonna set up the pins and initialize our sensor so I'm going to define a DHT pin as 7 and defined DHT type as DHT 11 and then I set up my DHT object th TD HD using the pin and the type so now a lowercase DHT can be used when referencing our sensor and lower case LCD can be used in referencing our screen so this has set up all of the initial functionality with our libraries and our sensor in our screen that we can now jump into our setup function and begin writing our own code first thing we're going to do inside of our setup function is initialize our screen and our sensor to initialize our screen like in the previous lesson LCD on it followed by LCD backlight ok this sets it up is ready to print values to it and turns the backlight on on the LCD display the sensor uses a begin function so DHT dot begin to initialize the sensor so it's now ready to read values and finally in our setup function we'll print some basic debug and intro statements out to our serial monitor just to use for debugging and understanding how our sensor is reading values so I will begin my serial monitor wait half of a second for the system to boot up and then I'm going to print dht11 humidity and temperature sensor backslash n backslash n now this is a newline character backslash n so that forces our serum owner to jump down to a newline kind of like pressing enter so by adding those inside the quotation marks can jump extra lines it's good for formatting things sometimes and then delay one second before we actually go into our loop function this is just an initialization set of print statements now we're ready to write the actual code to read our temperature sensor and then display those values on our screen so in order to read the values from our sensor we need some functions that are built into our library particular read humidity and read temperature so these are gonna return what's called a float value which is a decimal value of that decimal varial type so float H is going to be set equal to DHT don't read humidity I'm creating my own variable H which is of type float and I'm gonna store the return from read humidity into that vine I have floaties it's gonna be the h2 read temperature now by default this is going to return the temperature in Celsius which is what we want you can actually pass a true value a boolean statement like true into that which will make it return the value in Fahrenheit instead of in cells we're going to keep it as Celsius so at this point H and T should have our humidity and temperature stored in them but we need to verify that it actually read the values properly from the sensor okay so we're going to use a function and an if statement to check this so let's read through this if is man is n a n humidity or is NaN T so is NaN as a builtin function in arduino which stands for is not a number so if H is somehow not a numerical value then this will fail the if statement if temperature is not a numerical number then this if statement will fail so if either one of these turns out to be true that temperature who humidity is not a number then it will print failed to read from the sensor and it will return which just exits this particular loop and let's the loop function recall over again so this is just a way of checking that it actually read numerical values from the sensor properly so now that we've done that now we're ready to print the values out we've already confirmed they are in fact numerical values so we're gonna print it to two places we're gonna print it to our serial monitor and we're going to print it to our LCD screen so let's start with humidity to print humidity to the serial monitor I do a serial dot print current humidity equals a serial dot print H and then a serial dot print line percentage and another couple of spaces so this should print current humidity equals the actual number followed by a percentage sign to print the humidity to the LCD display I set my cursor to the top row left hand side print H um equals and a space print the humidity value print a percentage sign okay I have less characters to work with so you'll notice I didn't write the entire word humidity so that should print our community to cereal and R cubed e to the LCD let's repeat that process for temperature to print the temperature to the cereal temperature equals print T now this is a little special in Arduino we can use the Unicode value for the degree symbol so this is utf8 which is backslash X capital C backslash X capital B 0 and this will put the degree symbol into our serial monitor and then the c4 Celsius so there's just a formatting thing you can look these kind of things up online you can look like Unicode or ASCII value for a degree symbol and you can find the print codes as to what you would put there to print those characters so I wanted to try that it's a different character on the LCD because again the way that it's being written is using a different formatting style so I set the cursor to the second row left hand side print temp print the temperature and then this one uses a char value and a C char belly for 223 which is the degree symbol and then see for Celsius okay so this will print my temperature to serial.print my temp the LCD and then i want to wait I don't need it constantly trying to print all at the same time I want to you know gather the temperature and humidity and then wait a few seconds so I have it waiting five seconds then it'll read the temperature I made it again and update the values in our serial monitor and on our LCD display so this code should read our value make sure it's a valid value print humidity to the LCD and the serial print temperature to the LCD in serial and then wait five seconds and do it all over again let's push it into the code and have a look at how it works we'll start in the serial monitor so we can see on here what we're reading from our humidity sensor so current humidity value with a percentage temperature value of the degree symbol in Celsius and you'll see every five seconds is going to up room I'm in right now is 11 percent humidity 24 degrees Celsius okay and it's gonna continue to update and we can see those values you can also play around like you could wrap your hand around the temperature sensor and see it go up if we look at the LCD display let me just bring this up for you so we can see humidity value temperature value and it updates as the serial monitor updates okay and we get the degree symbol on there so it looks nice works well great job with the bass lesson hopefully you understand a little bit about how to read in values from the sensors know if you don't happen to have a dht11 Tama humidity sensor if you look up whatever type of sensor you have on Google you can usually find the libraries necessary and the basic initialization instructions necessary in order to modify this code to work with a different sensor for the extension for this one what we're gonna do is if you remember I was telling you about how you can add that true parameter into the read temperature value on the sensor to get the value in Fahrenheit so if we have a look at my LCD here you'll see that instead of it doing a new reading every five seconds but every twoandahalf seconds it's actually reading between or switching between a Celsius and a Fahrenheit reading for the temperature so the humidity is still just in percentage values but now it's displaying the humidity on one line and the temperature in Celsius two and a half seconds later switches out to Fahrenheit and then new reading Celsius switch to Fahrenheit and then new reading Celsius switch to Fahrenheit and so on so that's what we're doing for the extension for this activity just gonna have to read in that extra value from the sensor using the true parameter store it in a different variable and then include that into our print line statements so that we can see it in Fahrenheit and in Celsius and it's just a matter of having some delays in between the prints to the LCD screen so we can see the print in Celsius and a slight delay then the print in Fahrenheit and then it'll redo the loop function which will read new values and repeat the process again so that's what we're looking at for the extension for lesson number 15 hopefully the extension went well and you're now comfortable with adding in that new variable and using that read temperature function with without that your parameter to get Celsius or Fahrenheit for the challenge I'm just gonna show you my LCD here so you have an idea what we're looking at now don't worry too much about the timing of it all but just look at the format of the structure so we've got humidity on the top line with a percentage then it switches to temperature and it'll show both the Celsius and the Fahrenheit temperature underneath and then it rotates back and forth maybe you want it a little slower a little faster but the idea there is about having that again that loop structure so it'll display the humidity with the percentage value then it'll switch over display the temperature and then the Celsius and Fahrenheit values you may want to make use of the LCD clear method which allows you to clear anything that's been printed to the LCD screen before you print new values out to the screen you know that could be helpful as well good luck with the challenge I hope it goes well I'm excited to see you back here in Lesson number 16 for the Arduino basics tutorial series if you like what we're doing please like the video subscribe to our channel my name is Adam have yourself a great day
