With timestamps:

00:02 - hello humans who are trying to learn to
00:04 - code for some reason
00:06 - i don't know why here we are this is
00:08 - code with conor unit three topic number
00:10 - two
00:11 - we're going to start off by looking at
00:12 - the challenge from the last lesson let's
00:14 - go
00:15 - right i left you with two functions to
00:16 - write the setup turtle and the draw
00:18 - square
00:18 - now yours might be different than mine
00:19 - because i kind of just moved my turtle
00:21 - to a specific location
00:22 - you might have moved here somewhere else
00:24 - i set my pen width to a specific value
00:26 - yours might be different and so on so i
00:28 - showed you the basics we import
00:30 - we set up the window we set up our
00:31 - turtle i called mine timmy hi timmy
00:34 - in my setup turtle i lifted the pen
00:36 - moved him backward moved him all over
00:38 - the place
00:39 - until he was in a position i was happy
00:41 - then i stuck the pen
00:42 - down again set his pen size to 10
00:45 - pretty good pen size timmy and then i
00:47 - said his color to blue
00:49 - again this is going to look so different
00:50 - depending on what you were trying to
00:51 - accomplish
00:52 - i just tried to pull him down into the
00:54 - left a little bit made sure he was
00:55 - pointing to the right
00:57 - pointing east and then i set his color
00:58 - to blue gave him a nice wide pen size
01:01 - draw square we've seen this code before
01:03 - for i in range 4
01:05 - timmy forward 400 timmy left 90.
01:08 - right so i just created this little draw
01:10 - square for
01:11 - i just created this little draw square
01:12 - method where we do four
01:14 - moves and that was that was it that was
01:16 - all i added
01:17 - then i just called the two functions set
01:19 - up and draw that was it
01:21 - so that was a challenge from unit three
01:22 - topic one now we're gonna jump in
01:25 - we're going to look at today's lesson
01:27 - which is functions that take a parameter
01:29 - but do not return values we're not there
01:31 - yet all right we're actually going to
01:32 - start our code
01:34 - with the challenge code from the last
01:36 - lesson
01:38 - crazy so here's the code from the last
01:40 - lesson i'm going to ditch set up turtle
01:42 - for right now we're going to come back
01:43 - to that later
01:44 - i want to start with the draw square so
01:46 - one thing that i think would be
01:47 - interesting would be
01:48 - instead of only allowing us to draw a
01:50 - square of size 400
01:51 - what if we wrote a function that was
01:52 - dynamic it could draw a square of any
01:54 - size
01:55 - so what we're going to do here is in
01:57 - these brackets in these parentheses we
01:59 - can put a variable name
02:00 - now this doesn't have to be a variable
02:02 - that i've already defined
02:04 - so size is not defined anywhere else in
02:07 - my code
02:07 - but that's fine that variable is going
02:09 - to get defined when the function gets
02:11 - called it's what we call a local
02:12 - variable
02:13 - and it's only going to exist inside the
02:16 - block
02:16 - okay inside the function block then as
02:18 - soon as the function runs
02:20 - it's gone it disappears so what i'm
02:23 - going to do is
02:24 - when they go to draw a square when they
02:26 - call my function draw square
02:28 - they're going to have to give me the
02:29 - size that they want the square to be
02:31 - and then for i in range 4 instead of
02:34 - moving forward 400
02:36 - i'm going to move forward by size so
02:38 - what i'm doing is i'm telling the user
02:40 - or not necessarily the user but the
02:42 - programmer you want to call my function
02:45 - cool you have to give me a size variable
02:47 - and
02:48 - this brings in what's called a
02:49 - precondition
02:51 - a precondition is something that you're
02:53 - telling the coder
02:54 - or the user that in order to do this you
02:57 - need to give me the right thing
02:58 - okay takes an integer value
03:01 - that must be greater
03:05 - than zero this takes an integer value
03:07 - that must be greater than zero so in
03:08 - other words in order to use this
03:10 - function
03:10 - you have to give me an integer that's
03:12 - greater than zero if you give me
03:13 - anything other than that
03:14 - things are going to get messy or it's
03:16 - gonna break the code make sure you do
03:18 - this so
03:18 - as a coder when you're working on a
03:21 - project for example and there's a large
03:22 - code base
03:23 - and your buddy writes a function and you
03:26 - need to write something that uses your
03:27 - buddy's function
03:28 - you're going to look at the precondition
03:30 - for that function so you make sure
03:32 - that your code calls on their function
03:34 - correctly
03:35 - how does this affect when i call it when
03:37 - i call draw square now
03:39 - this is where i'm going to put the
03:40 - number so if i put 100 there what
03:43 - happens in execution
03:45 - is it still doesn't execute this just
03:47 - stores the function
03:49 - gets here and takes that 100 and
03:52 - sends it up and makes size equal to 100
03:56 - temporarily runs the block of code
04:00 - and then ends and then size is gone
04:02 - again okay let's run that and see it
04:04 - we see there's our little 100 square
04:07 - perfect
04:08 - so that's how we can pass a parameter to
04:10 - a function so let's beef up our program
04:12 - a little bit here that we had started
04:13 - with we'll leave this draw square
04:15 - exactly like it is
04:16 - so i'll just hide it for now you know
04:19 - i'll leave it there in case you're
04:20 - pausing the video and you want to see it
04:22 - so we're going to modify our setup
04:23 - turtle just to be a little bit cleaner
04:25 - why don't we do a set position instead
04:27 - of all this nonsense
04:29 - so we'll do a timmy dot set
04:32 - position and why don't we ask the user
04:35 - when they set up the turtle to give us
04:37 - an x and a y value
04:39 - and then we're going to set the position
04:41 - to those x and y values
04:43 - so that the user when they call our
04:45 - setup turtle they get to tell us where
04:47 - they want it to start
04:49 - okay now notice the comma this means i'm
04:51 - taking two parameters
04:53 - so here again precondition is going to
04:56 - be
04:57 - takes two integers representing
05:01 - starting coordinates of turtle
05:05 - so we're going to use the set position
05:07 - on our turtle
05:08 - to stick it where we want it i've got my
05:10 - pen size and i've got my color
05:13 - so now when my user calls set up turtle
05:16 - we could decide to stick it kind of
05:17 - maybe down down to the left
05:19 - negative 200 negative 200
05:22 - so when i'm calling this i'm giving x
05:25 - the value of negative 200
05:26 - and why the value of negative 200 and
05:28 - then i'm going to draw the square
05:30 - of the given size right and we could
05:32 - even maybe extend this a tiny bit
05:35 - so what if we did x xval
05:38 - equals int input starting
05:41 - x
05:45 - and then we do that again for y
05:50 - starting y and then we'll do
05:53 - side length equals int input
05:58 - side length so
06:01 - what i'm doing here add my brackets what
06:05 - i'm doing is i'm asking the user for
06:07 - these three values
06:08 - so now when i call my functions instead
06:10 - of sending it negative 200
06:12 - i'm going to send it the user given x
06:14 - value and then i'm going to send it
06:16 - y val and when i go to draw my square
06:19 - i'm going to draw it
06:20 - side length so i'm getting variables
06:23 - from the user
06:24 - that i'm then passing as parameters to
06:27 - my functions
06:28 - which are then being used to run
06:30 - execution chain
06:31 - always be thinking about the execution
06:33 - chain
06:34 - okay when when a line of code runs you
06:36 - should know what line of code ran before
06:38 - it
06:38 - right we should always be able to trace
06:40 - that jumping around in a program
06:42 - jumping back for a second to the setup
06:44 - turtle function when i deleted some of
06:46 - that code from the challenge
06:47 - i forgot to put the pen down so after
06:49 - set position make sure you do a timmy
06:51 - dot pen
06:52 - down so that it's going to behave the
06:53 - way we want it to now let's save it and
06:56 - run it and see how it looks
06:58 - so our starting x value let's do
07:00 - negative
07:02 - 300 starting y let's do negative 100
07:05 - and side length let's do something big
07:07 - like 500. so we should see it shoot down
07:09 - to the left and then draw
07:12 - here we go so it works exactly as
07:15 - intended
07:16 - uh even though now we're obviously
07:18 - dealing with it differently in terms of
07:19 - how we're handling user input
07:21 - and now we're passing that user input
07:23 - into functions
07:25 - so hopefully that makes sense in terms
07:27 - of passing parameters into functions
07:29 - and it's important that we recognize
07:31 - that these variables are local they only
07:32 - exist
07:33 - during the execution of that block of
07:35 - code and then as soon as it ends they
07:37 - stop existing
07:38 - now you can use variable names here that
07:40 - you use
07:41 - outside of all functions in your code
07:43 - but it's not recommended
07:45 - what is totally fine is to use the same
07:48 - variable names for parameters of
07:50 - multiple functions
07:51 - that's very commonplace and that's
07:53 - totally fine because no two functions
07:55 - can ever be
07:56 - kind of running at the exact same time
07:58 - you're either in one or you're in the
07:59 - other
08:00 - right and so from that regard it doesn't
08:03 - really matter that those variables are
08:05 - existing by the same names and different
08:07 - functions they're still local within
08:09 - their code block
08:10 - it's not recommended that you use a
08:11 - variable name and a function
08:13 - that you're using outside of all
08:15 - functions in your main code
08:16 - that's not recommended and we'll talk
08:18 - about why later in this unit
08:20 - when we talk about global variables all
08:22 - right it's time to talk challenge
08:24 - now this one is a big one and it's going
08:26 - to take a little bit of work for you to
08:27 - pull it off
08:28 - so i want to show you how it runs now
08:30 - it's similar to what we left off with
08:32 - in the main lesson but it's going to add
08:34 - some complexity to it
08:35 - so you'll see that i'm pulling on the
08:37 - unit project from the last unit
08:39 - in this user menu so i've got a user
08:42 - menu where they've got the choice of
08:43 - draw square draw triangle draw irregular
08:45 - polygon
08:46 - that's a tough one clear screen move
08:49 - turtle
08:49 - and quit program all right so the user
08:52 - is prompted so if i
08:54 - choose draw square it asks me for the
08:57 - side length of the square
08:58 - 300 and it's going to draw my square
09:02 - and then it brings me back to my user
09:04 - menu so i can clear the screen
09:06 - i can see where my turtle is currently
09:08 - located i'm going to move my turtle
09:11 - i'm going to move my turtle left 300
09:15 - and down 300 to a new position
09:19 - now i'm going to draw a square
09:24 - of size 600. i draw a real big square
09:29 - so i cleared the screen by accident
09:31 - that's fine now i'm going to draw a
09:32 - regular polygon so that's c
09:35 - it asks me how many sides i'm going to
09:36 - do an eight-sided polygon
09:39 - and the side length for each one 200
09:42 - and it's going to draw me an eight-sided
09:44 - regular polygon
09:46 - cool i like that a lot and then i can
09:49 - clear it
09:51 - never drew a triangle yet let's do that
09:53 - draw a triangle with side length 50
09:56 - tiny little triangle and then q quits
09:59 - the program
10:00 - so that's the challenge and that's how
10:02 - it's going to work now there's a lot
10:04 - going on in the code to make this uh
10:06 - work
10:06 - i'm not going to give away too much but
10:07 - here's what i will show you okay
10:10 - import the turtle set up the screen set
10:11 - up to whatever set up the pen size cool
10:13 - i created a string called menu just like
10:15 - i did before
10:17 - nice little menu with the three quotes
10:20 - my code's pretty straightforward i have
10:22 - this draw polygon
10:23 - it takes number of sides and x this is a
10:25 - very hard function to write
10:27 - you're going to have to get mathy in
10:29 - order to figure out how to do it
10:30 - properly
10:31 - draw a triangle we've seen draw a square
10:33 - we've seen and then i have this user
10:34 - menu that's actually going to do the
10:35 - while true loop
10:37 - to do the prompting of the user value
10:39 - and you'll see the only actual code
10:41 - after my functions are defined is one
10:43 - call to user menu
10:45 - and then user menu loops until they hit
10:46 - quit and when
10:48 - it's done it ends the function which
10:50 - then ends the file
10:52 - and stops running the program so that's
10:54 - what we're looking for for the challenge
10:55 - here for unit 3 topic 2.
10:58 - you're going to be pushing yourself a
10:59 - little bit especially if you're gonna do
11:00 - the draw regular polygon
11:01 - but the nice thing about us doing
11:02 - something a little bit harder now is
11:04 - we can go through this code in the next
11:06 - video and maybe help you understand it a
11:08 - bit whereas the projects i'm not going
11:10 - through with you
11:10 - and showing you how that code works so
11:12 - you're left on your own so this one
11:13 - we're definitely going to go through
11:14 - because it's important we understand
11:16 - that structure
11:17 - because now we're starting to build
11:18 - programs that actually have a little bit
11:19 - of functionality to them
11:21 - again you're great humans i assume
11:23 - you're here watching this you must be
11:25 - right
11:25 - i think that's how that works either way
11:27 - thanks for being here like share
11:28 - subscribe it's awesome
11:30 - we'll see you back in the next video bye
11:34 - humans

Cleaned transcript:

hello humans who are trying to learn to code for some reason i don't know why here we are this is code with conor unit three topic number two we're going to start off by looking at the challenge from the last lesson let's go right i left you with two functions to write the setup turtle and the draw square now yours might be different than mine because i kind of just moved my turtle to a specific location you might have moved here somewhere else i set my pen width to a specific value yours might be different and so on so i showed you the basics we import we set up the window we set up our turtle i called mine timmy hi timmy in my setup turtle i lifted the pen moved him backward moved him all over the place until he was in a position i was happy then i stuck the pen down again set his pen size to 10 pretty good pen size timmy and then i said his color to blue again this is going to look so different depending on what you were trying to accomplish i just tried to pull him down into the left a little bit made sure he was pointing to the right pointing east and then i set his color to blue gave him a nice wide pen size draw square we've seen this code before for i in range 4 timmy forward 400 timmy left 90. right so i just created this little draw square for i just created this little draw square method where we do four moves and that was that was it that was all i added then i just called the two functions set up and draw that was it so that was a challenge from unit three topic one now we're gonna jump in we're going to look at today's lesson which is functions that take a parameter but do not return values we're not there yet all right we're actually going to start our code with the challenge code from the last lesson crazy so here's the code from the last lesson i'm going to ditch set up turtle for right now we're going to come back to that later i want to start with the draw square so one thing that i think would be interesting would be instead of only allowing us to draw a square of size 400 what if we wrote a function that was dynamic it could draw a square of any size so what we're going to do here is in these brackets in these parentheses we can put a variable name now this doesn't have to be a variable that i've already defined so size is not defined anywhere else in my code but that's fine that variable is going to get defined when the function gets called it's what we call a local variable and it's only going to exist inside the block okay inside the function block then as soon as the function runs it's gone it disappears so what i'm going to do is when they go to draw a square when they call my function draw square they're going to have to give me the size that they want the square to be and then for i in range 4 instead of moving forward 400 i'm going to move forward by size so what i'm doing is i'm telling the user or not necessarily the user but the programmer you want to call my function cool you have to give me a size variable and this brings in what's called a precondition a precondition is something that you're telling the coder or the user that in order to do this you need to give me the right thing okay takes an integer value that must be greater than zero this takes an integer value that must be greater than zero so in other words in order to use this function you have to give me an integer that's greater than zero if you give me anything other than that things are going to get messy or it's gonna break the code make sure you do this so as a coder when you're working on a project for example and there's a large code base and your buddy writes a function and you need to write something that uses your buddy's function you're going to look at the precondition for that function so you make sure that your code calls on their function correctly how does this affect when i call it when i call draw square now this is where i'm going to put the number so if i put 100 there what happens in execution is it still doesn't execute this just stores the function gets here and takes that 100 and sends it up and makes size equal to 100 temporarily runs the block of code and then ends and then size is gone again okay let's run that and see it we see there's our little 100 square perfect so that's how we can pass a parameter to a function so let's beef up our program a little bit here that we had started with we'll leave this draw square exactly like it is so i'll just hide it for now you know i'll leave it there in case you're pausing the video and you want to see it so we're going to modify our setup turtle just to be a little bit cleaner why don't we do a set position instead of all this nonsense so we'll do a timmy dot set position and why don't we ask the user when they set up the turtle to give us an x and a y value and then we're going to set the position to those x and y values so that the user when they call our setup turtle they get to tell us where they want it to start okay now notice the comma this means i'm taking two parameters so here again precondition is going to be takes two integers representing starting coordinates of turtle so we're going to use the set position on our turtle to stick it where we want it i've got my pen size and i've got my color so now when my user calls set up turtle we could decide to stick it kind of maybe down down to the left negative 200 negative 200 so when i'm calling this i'm giving x the value of negative 200 and why the value of negative 200 and then i'm going to draw the square of the given size right and we could even maybe extend this a tiny bit so what if we did x xval equals int input starting x and then we do that again for y starting y and then we'll do side length equals int input side length so what i'm doing here add my brackets what i'm doing is i'm asking the user for these three values so now when i call my functions instead of sending it negative 200 i'm going to send it the user given x value and then i'm going to send it y val and when i go to draw my square i'm going to draw it side length so i'm getting variables from the user that i'm then passing as parameters to my functions which are then being used to run execution chain always be thinking about the execution chain okay when when a line of code runs you should know what line of code ran before it right we should always be able to trace that jumping around in a program jumping back for a second to the setup turtle function when i deleted some of that code from the challenge i forgot to put the pen down so after set position make sure you do a timmy dot pen down so that it's going to behave the way we want it to now let's save it and run it and see how it looks so our starting x value let's do negative 300 starting y let's do negative 100 and side length let's do something big like 500. so we should see it shoot down to the left and then draw here we go so it works exactly as intended uh even though now we're obviously dealing with it differently in terms of how we're handling user input and now we're passing that user input into functions so hopefully that makes sense in terms of passing parameters into functions and it's important that we recognize that these variables are local they only exist during the execution of that block of code and then as soon as it ends they stop existing now you can use variable names here that you use outside of all functions in your code but it's not recommended what is totally fine is to use the same variable names for parameters of multiple functions that's very commonplace and that's totally fine because no two functions can ever be kind of running at the exact same time you're either in one or you're in the other right and so from that regard it doesn't really matter that those variables are existing by the same names and different functions they're still local within their code block it's not recommended that you use a variable name and a function that you're using outside of all functions in your main code that's not recommended and we'll talk about why later in this unit when we talk about global variables all right it's time to talk challenge now this one is a big one and it's going to take a little bit of work for you to pull it off so i want to show you how it runs now it's similar to what we left off with in the main lesson but it's going to add some complexity to it so you'll see that i'm pulling on the unit project from the last unit in this user menu so i've got a user menu where they've got the choice of draw square draw triangle draw irregular polygon that's a tough one clear screen move turtle and quit program all right so the user is prompted so if i choose draw square it asks me for the side length of the square 300 and it's going to draw my square and then it brings me back to my user menu so i can clear the screen i can see where my turtle is currently located i'm going to move my turtle i'm going to move my turtle left 300 and down 300 to a new position now i'm going to draw a square of size 600. i draw a real big square so i cleared the screen by accident that's fine now i'm going to draw a regular polygon so that's c it asks me how many sides i'm going to do an eightsided polygon and the side length for each one 200 and it's going to draw me an eightsided regular polygon cool i like that a lot and then i can clear it never drew a triangle yet let's do that draw a triangle with side length 50 tiny little triangle and then q quits the program so that's the challenge and that's how it's going to work now there's a lot going on in the code to make this uh work i'm not going to give away too much but here's what i will show you okay import the turtle set up the screen set up to whatever set up the pen size cool i created a string called menu just like i did before nice little menu with the three quotes my code's pretty straightforward i have this draw polygon it takes number of sides and x this is a very hard function to write you're going to have to get mathy in order to figure out how to do it properly draw a triangle we've seen draw a square we've seen and then i have this user menu that's actually going to do the while true loop to do the prompting of the user value and you'll see the only actual code after my functions are defined is one call to user menu and then user menu loops until they hit quit and when it's done it ends the function which then ends the file and stops running the program so that's what we're looking for for the challenge here for unit 3 topic 2. you're going to be pushing yourself a little bit especially if you're gonna do the draw regular polygon but the nice thing about us doing something a little bit harder now is we can go through this code in the next video and maybe help you understand it a bit whereas the projects i'm not going through with you and showing you how that code works so you're left on your own so this one we're definitely going to go through because it's important we understand that structure because now we're starting to build programs that actually have a little bit of functionality to them again you're great humans i assume you're here watching this you must be right i think that's how that works either way thanks for being here like share subscribe it's awesome we'll see you back in the next video bye humans
