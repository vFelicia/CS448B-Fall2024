With timestamps:

00:01 - [Music]
00:11 - hello everyone
00:13 - welcome back to the Arduino basics
00:15 - tutorial series this is lesson number 11
00:18 - what we're gonna learn to work with a
00:19 - servo motor is the first step on your
00:21 - path to eventually create your own
00:23 - Terminator
00:24 - what's a servo motor servo motor is a
00:26 - small motor usually it's blue sometimes
00:29 - it's black you can attach these little
00:31 - plastic pieces onto the top to allow you
00:33 - to attach different things to the motor
00:35 - the motor allows you to have a range of
00:37 - motion of 180 degrees so you can move
00:40 - 180 and 180 back the other way
00:42 - and so kind of like running along the
00:44 - edge of a protractor so that's the range
00:46 - of motion we get of a servo motor it's
00:48 - not the same as a motor that you use to
00:49 - power the wheels on a car and then move
00:51 - in one direction but can move all the
00:52 - way around this allows us to go in both
00:54 - directions but only within that range
00:56 - okay so we're gonna learn how to use a
00:59 - servo motor in this lesson we're also
01:02 - going to focus a little bit on class
01:03 - structure and code in this lesson and
01:06 - learn about something called methods and
01:07 - ways that we can create our own blocks
01:08 - of code so first things first we need to
01:11 - do the wiring for this very very simple
01:13 - wiring you need to dig out your servo
01:14 - motor servo motors come with three wire
01:17 - attachments okay you'll need to use some
01:19 - jumper wires to connect to the Arduino
01:20 - there'll be a brown or a black wire that
01:24 - represents the ground so we're gonna
01:25 - connect out to one of the ground pins on
01:27 - our Arduino and I'll just take a second
01:30 - and make the wiring look pretty they
01:34 - also have a red pin which is going to
01:35 - connect to our power or a 5 volt pin on
01:37 - our Arduino so we'll go ahead and
01:40 - connect that pin to the 5 volt and then
01:42 - we'll clean it up a bit and the final
01:46 - pin is the pin that's actually going to
01:48 - be the signal pin that's gonna connect
01:49 - to our Arduino for this lesson we're
01:51 - gonna connect it to pin number 3 which
01:53 - you'll notice is a PWM pin okay which is
01:57 - important that we have that so let's set
01:59 - that pin to orange and let's clean it up
02:03 - so there we have our wiring diagram our
02:05 - servo motor is connected to the ground
02:07 - to the voltage and a pin number 3 that's
02:10 - all the why we're going to do the rest
02:11 - of this lesson we're gonna spend looking
02:12 - at our
02:13 - code so let's head over there now here
02:16 - we are in the code we got a blank file
02:19 - ready to go just naming it lesson 11
02:21 - where we're gonna learn to use our
02:22 - server motor and work a little bit with
02:24 - method structure so for our code we're
02:27 - gonna start above our setup function the
02:30 - three things that we're going to include
02:32 - above our setup function are a library
02:34 - we're going to include the servo h
02:37 - library you can do this a number of ways
02:39 - like in the early lessons we can go to
02:41 - the libraries tab and grab it through
02:42 - there if you're in the actual Arduino
02:44 - IDE you can do it up through the menus
02:46 - where you can go to include libraries
02:48 - and look for a servo dot H once we've
02:50 - included the library to work with the
02:51 - servo we need to declare the pin on
02:53 - which our servo is plugged in we plugged
02:56 - our servo into pin number three so my
02:58 - integer servo pin is set equal to three
03:00 - we then need to create a servo object
03:02 - which is going to allow us to send
03:05 - commands to the motor we do this using a
03:07 - capital S servo and a name that we chose
03:10 - which was servo one you could give this
03:12 - a different name if you chose I chose to
03:14 - call it servo one so now that we have
03:16 - that we're ready to jump into our setup
03:18 - function and make sure our code knows
03:20 - how to communicate with our Arduino so
03:24 - in order to do that we need to send an
03:25 - attach command to the servo motor that
03:27 - we just created so we do servo 1 dot
03:30 - attach and then in the brackets we need
03:35 - to tell it what pin we've plugged it
03:37 - into so this line of code allows our
03:42 - Duino software to communicate with the
03:45 - servo motor via that servo pin we're
03:48 - also going to initialize our serial
03:49 - monitor as we may want to use it for
03:50 - user input and debugging panels out a
03:53 - few comments in for clarity that's all
03:57 - the code that we need in our setup
03:58 - function now we're ready to jump into
04:00 - our loop function where we're actually
04:01 - going to do some stuff with our code
04:03 - we're gonna do a few things we're gonna
04:04 - print out some messages to the screen
04:06 - and ask the user for some input we're
04:07 - gonna use that to manipulate our servo
04:09 - motor and then we're gonna kind of up it
04:11 - a little bit and we're gonna play around
04:12 - with a little bit more structure to our
04:14 - code so to start it off we're gonna
04:16 - prompt the user for a number from 0 to
04:19 - 180 then we're going to use that value
04:21 - to move or point the servo motor at that
04:24 - specific angle so here's the code to get
04:26 - the user input value from the user so
04:30 - this code is going to prompt the user
04:31 - using serial and ask for a position from
04:33 - 0 to 180 so we have a print line
04:35 - statement enter a value from 0 to 180 to
04:38 - move the servo to that position then we
04:40 - have the while serial dog available loop
04:42 - so waiting for the response and then
04:43 - we're storing what they give us in an
04:45 - integer called user Val and we're gonna
04:47 - use the serial purse int because we want
04:49 - that value to be read as an integer so
04:51 - now we have a number that the user has
04:53 - given us we now need to send the
04:55 - servomotor to that particular angle so
04:58 - we can do a servo 1 dot right which is
05:02 - going to tell the servo to point to a
05:04 - specific angle what angle well the user
05:07 - Val so the number that the user gave us
05:10 - is where we want to point the servo
05:12 - motor and then we'll put a delay of some
05:13 - sort in before it prompts the user again
05:17 - okay so this should ask the user for a
05:19 - value from 0 to 180 point the servo
05:21 - motor at that value and then wait one
05:24 - second push this code out and we'll have
05:27 - a quick look at how it works
05:28 - so we'll hop over to the serial monitor
05:30 - here set this to no line ending so enter
05:33 - a value from 0 to 180 to move the servo
05:35 - to that position so I'm just gonna hold
05:36 - my servo up here so you can see it so
05:38 - I'll start with 0 and we'll see if it
05:40 - moves well there we go and then they'll
05:43 - try 90 Eric O's and then we'll jump all
05:47 - the way over 280 and there it goes again
05:51 - so by sending that command I get to move
05:54 - it to the position that I want ok so
05:57 - that would be our first step with
05:58 - learning to work with the servo motor is
06:01 - being able to get it off in the user and
06:03 - point the servo motor at that specific
06:05 - value so that's what we've done so far
06:07 - now we're gonna take it a step further
06:09 - and we're gonna actually start doing
06:12 - methods so methods are a block of code
06:15 - in which we can store code that we might
06:18 - want to use over and over again so give
06:20 - you the example we've already been using
06:21 - two methods this whole time the set up
06:23 - method and the loop method so we're
06:27 - gonna write our phone method I'm gonna
06:29 - call this method control so I'm outside
06:31 - of all of my code hit enter and I'm
06:34 - gonna do void control
06:37 - okay brackets and I'm gonna take an
06:39 - integer called X I open my squigglies
06:43 - so this i've created a method the
06:46 - methods names control and in order for
06:49 - us to use the code in this method we
06:51 - need to give it a number if we give it a
06:54 - number the code inside this method can
06:56 - run well what I'm actually gonna do is
06:58 - I'm gonna take the code that we already
07:00 - have this code here the serial servo dot
07:03 - right so let's take this servo 1 dot
07:05 - write code I'm gonna get rid of it from
07:08 - the loop and I'm gonna move it into here
07:12 - what I'm gonna do is instead of writing
07:14 - the user value I'm going to write X so
07:17 - what happens here okay so in my loop
07:19 - function I'm gonna write control user
07:22 - Val so let's trace this code when it
07:26 - gets to this line it's already gotten
07:28 - the number from the user it says call
07:31 - the control method finds that and give
07:34 - it the number that you just got from the
07:36 - user so what this does is it jumps down
07:38 - to line 28 of my code and sets the value
07:42 - of x to whatever the value was here then
07:45 - it enters the method now inside the
07:48 - method it can write that value to the
07:50 - server so this code is going to function
07:52 - exactly the same as the code that we
07:54 - just ran but now i've taken this and
07:57 - i've put it into its own block now i'm
08:00 - gonna write another method we're gonna
08:02 - write a sweep method void sweep and this
08:06 - one's not gonna take any parameters so
08:09 - it's just gonna be void sweep with the
08:11 - closed brackets okay now in this method
08:14 - we want to kind of treat our server like
08:16 - a windshield wiper so we're gonna start
08:18 - at at zero sweep it all the way to 180
08:20 - and then sweep it all the way back to
08:22 - zero we're gonna have to do that using
08:24 - for loops so let's go through this
08:26 - quickly for parentheses integer i equals
08:31 - 0 this says create an integer called i
08:34 - set it equal to a starting value of 0
08:36 - semicolon as long as I is less than 180
08:40 - we'll iterate by by 1 which means we'll
08:43 - add 1 to I each time so for loop has 3
08:47 - parts your variable and it's starting
08:49 - value
08:50 - your condition of success so as long as
08:53 - I is less than 180 it will execute the
08:55 - code in the loop and then your iterator
08:57 - what happens after each execution by
09:00 - goes up by one okay so inside of this I
09:03 - want to do a servo 1 dot right ah now
09:07 - that's going to set I to zero or the
09:09 - servo to 0 then the servo to 1 then the
09:11 - servo to 2 and so on
09:13 - now it'll happen superfast if I don't
09:15 - have a delay in there so we'll put a
09:17 - delay of 5 milliseconds just so that it
09:20 - isn't so stuttering I'm trying to do it
09:22 - super fast so that's going to sweep us
09:24 - from 0 to 180 now we want to sweep dock
09:27 - in the other direction so let's do that
09:30 - for int I equals 180 so we're going to
09:34 - start at the top this time I is greater
09:38 - than 0 by minus minus so starting at 180
09:43 - as long as we're bigger than 0 continue
09:45 - to take one off serve a 1 dot right
09:49 - by the way thought this code is going to
09:54 - sweep me from 0 to 180 and this code is
09:58 - gonna sweep me back we want to use this
10:00 - method at some point so right now we're
10:03 - asking the user to enter a position from
10:06 - 0 to 180 and then we're just calling
10:08 - control so we're just doing that right
10:10 - let's give them a second option let's
10:12 - say that instead of that they could give
10:14 - us say negative 1
10:15 - and we'll do a sweep for them or enter
10:18 - negative 1 to sweep ok enter a value
10:23 - from 0 to 180 to move the serve of that
10:24 - position or negative 1 to sweep we'll
10:28 - collect their value right here before we
10:31 - do this we need to add in let's call the
10:33 - conditional and we've done this an if
10:35 - statement so if the value they gave us
10:38 - was negative 1 then we're gonna call
10:42 - sweet otherwise else if now this will
10:48 - get a little technical I'll try to
10:49 - explain it after I type it out so what I
10:54 - said here was otherwise if user Val is
10:57 - greater than or equal to 0 and it's less
11:00 - than or equal to 180 so it's in the
11:01 - right range okay and as
11:04 - with two of the ampersand symbols is
11:05 - found above the seven key on your
11:07 - keyboard okay great the user values
11:09 - greater than equal to zero and it is
11:10 - less than or equal to 180 that's when
11:13 - we're gonna call the control so this now
11:16 - gives the user two choices they can
11:18 - choose to do the sweep or they can
11:21 - choose to just enter a value and it'll
11:24 - move the motor to that position okay so
11:27 - now we've created our own methods we're
11:29 - calling our own methods and we're using
11:31 - a bit of structure around how our code
11:34 - works we're starting to get things to
11:36 - look a little bit more like actual
11:38 - programs where we now have to think
11:40 - about code structure we have to think
11:42 - about how do we break this into logical
11:44 - chunks and that's a big part of
11:46 - programming let's run this and have a
11:48 - look at how it executes so we upload
11:50 - this to our thing and we open up the
11:52 - serial monitor and I'll bring my servo
11:55 - up here so you can see it okay so it
11:58 - asks me to enter my value so I'm gonna
12:01 - start with that negative one and we're
12:02 - gonna see the sweep so there it goes
12:05 - sweeps from one side to the other let's
12:07 - run that one more time so you can see it
12:12 - like a windshield wiper and then if I
12:15 - did want to enter a value say 45 it
12:18 - jumps to position 45
12:20 - I can't revision 80 and it'll jump to
12:24 - position 80 now if I enter something out
12:26 - of the range so 400 it should just do
12:29 - nothing wait one second and prompt me
12:31 - again nothing happens and it prompts me
12:34 - again okay so go to session 102 and then
12:39 - let's do a sweep again so I should jump
12:42 - back to zero and then sweep it goes cool
12:45 - so we now have a working servo motor we
12:49 - have code that has some actual structure
12:51 - to it we learn how to write some methods
12:53 - we've looked at some loops we've looked
12:55 - at some if statements things are
12:57 - starting to kind of come together you
12:58 - know we're halfway through now so over
13:00 - the next nine lessons as we get to less
13:02 - than 20 this kind of stuffs gonna become
13:03 - more common where we're looking at
13:05 - larger files we're looking at chunking
13:07 - up code using if statements using loops
13:10 - within our code if you made it this far
13:12 - good for you you either have a teacher
13:14 - standing over your shoulder making sure
13:15 - you get there or you
13:16 - a bit more motivation than most people
13:18 - so that's great let's talk about what we
13:22 - could do for an extension for this so a
13:23 - couple options one would be look at your
13:26 - sweep method and let's see if we can
13:27 - change the speed of that suite that
13:30 - would be a first kind of intro extension
13:31 - for you to do another one would be
13:33 - instead of sweeping maybe you can come
13:35 - up with another pattern that you could
13:36 - do with your servo motor and put that in
13:38 - your sweep method or write another
13:40 - method that does a different pattern
13:42 - kind of bounce around the motor can run
13:45 - a few times okay and just kind of get
13:47 - familiar with how you manipulate things
13:49 - or how you create methods within this
13:51 - code because the code structure here is
13:53 - really important not just the writing to
13:56 - the servo now if you're looking for a
13:57 - challenge I'm just gonna show you some
13:59 - functionality of some code and then we
14:02 - can kind of see if you can reproduce
14:04 - that my prompt is the same as it was in
14:06 - the lesson from 0 to 180 or an to
14:08 - negative 1 to sweet now when I enter
14:10 - negative 1 to sweep it's gonna add in
14:12 - two prompts it's gonna ask me for the
14:14 - delay so think about windshield wipers
14:16 - right there's something called the
14:18 - intermittent windshield wiper which
14:20 - basically puts a delay in between each
14:23 - sweep so this is my option to give that
14:26 - delay in seconds so two-second delay
14:28 - let's say and then the second prompt is
14:30 - how many times do I want it to sweep
14:33 - okay now with windshield wipers you
14:35 - actually have a switch so you can turn
14:36 - on and off for us we're gonna hard-code
14:38 - so let's say I want five sweeps can I
14:41 - put that in and we're gonna see I'm
14:44 - sweeping and then I'm waiting one two
14:48 - and I'm sweeping and it's gonna do this
14:50 - five times so we're adding some
14:52 - functionality and we're gonna have a
14:53 - play with our method headers our suite
14:56 - method is now going to have to take a
14:57 - variable it's gonna have to take a delay
14:59 - variable and it's gonna have a loop of
15:01 - some kind to loop it number of sweeps
15:04 - time so there's a definitely more
15:06 - conceptual coding stuff going on in
15:08 - order to make this work so this is a
15:11 - great little challenge for you at this
15:12 - point in the course if it's too much
15:14 - talk to your teacher if you have a
15:15 - classroom teacher and maybe they can
15:17 - help guide you in the right direction
15:19 - thanks for watching lesson 11 in the
15:21 - Arduino basics tutorial series my name
15:23 - is Adam I'm excited to come back here in
15:26 - lesson 12 as we work towards finishing
15:28 - up this course so don't forget to like
15:30 - and
15:30 - subscribe to the channel if you like
15:31 - what we're doing and you're in what
15:33 - might come next have a great day
15:37 - [Music]

Cleaned transcript:

hello everyone welcome back to the Arduino basics tutorial series this is lesson number 11 what we're gonna learn to work with a servo motor is the first step on your path to eventually create your own Terminator what's a servo motor servo motor is a small motor usually it's blue sometimes it's black you can attach these little plastic pieces onto the top to allow you to attach different things to the motor the motor allows you to have a range of motion of 180 degrees so you can move 180 and 180 back the other way and so kind of like running along the edge of a protractor so that's the range of motion we get of a servo motor it's not the same as a motor that you use to power the wheels on a car and then move in one direction but can move all the way around this allows us to go in both directions but only within that range okay so we're gonna learn how to use a servo motor in this lesson we're also going to focus a little bit on class structure and code in this lesson and learn about something called methods and ways that we can create our own blocks of code so first things first we need to do the wiring for this very very simple wiring you need to dig out your servo motor servo motors come with three wire attachments okay you'll need to use some jumper wires to connect to the Arduino there'll be a brown or a black wire that represents the ground so we're gonna connect out to one of the ground pins on our Arduino and I'll just take a second and make the wiring look pretty they also have a red pin which is going to connect to our power or a 5 volt pin on our Arduino so we'll go ahead and connect that pin to the 5 volt and then we'll clean it up a bit and the final pin is the pin that's actually going to be the signal pin that's gonna connect to our Arduino for this lesson we're gonna connect it to pin number 3 which you'll notice is a PWM pin okay which is important that we have that so let's set that pin to orange and let's clean it up so there we have our wiring diagram our servo motor is connected to the ground to the voltage and a pin number 3 that's all the why we're going to do the rest of this lesson we're gonna spend looking at our code so let's head over there now here we are in the code we got a blank file ready to go just naming it lesson 11 where we're gonna learn to use our server motor and work a little bit with method structure so for our code we're gonna start above our setup function the three things that we're going to include above our setup function are a library we're going to include the servo h library you can do this a number of ways like in the early lessons we can go to the libraries tab and grab it through there if you're in the actual Arduino IDE you can do it up through the menus where you can go to include libraries and look for a servo dot H once we've included the library to work with the servo we need to declare the pin on which our servo is plugged in we plugged our servo into pin number three so my integer servo pin is set equal to three we then need to create a servo object which is going to allow us to send commands to the motor we do this using a capital S servo and a name that we chose which was servo one you could give this a different name if you chose I chose to call it servo one so now that we have that we're ready to jump into our setup function and make sure our code knows how to communicate with our Arduino so in order to do that we need to send an attach command to the servo motor that we just created so we do servo 1 dot attach and then in the brackets we need to tell it what pin we've plugged it into so this line of code allows our Duino software to communicate with the servo motor via that servo pin we're also going to initialize our serial monitor as we may want to use it for user input and debugging panels out a few comments in for clarity that's all the code that we need in our setup function now we're ready to jump into our loop function where we're actually going to do some stuff with our code we're gonna do a few things we're gonna print out some messages to the screen and ask the user for some input we're gonna use that to manipulate our servo motor and then we're gonna kind of up it a little bit and we're gonna play around with a little bit more structure to our code so to start it off we're gonna prompt the user for a number from 0 to 180 then we're going to use that value to move or point the servo motor at that specific angle so here's the code to get the user input value from the user so this code is going to prompt the user using serial and ask for a position from 0 to 180 so we have a print line statement enter a value from 0 to 180 to move the servo to that position then we have the while serial dog available loop so waiting for the response and then we're storing what they give us in an integer called user Val and we're gonna use the serial purse int because we want that value to be read as an integer so now we have a number that the user has given us we now need to send the servomotor to that particular angle so we can do a servo 1 dot right which is going to tell the servo to point to a specific angle what angle well the user Val so the number that the user gave us is where we want to point the servo motor and then we'll put a delay of some sort in before it prompts the user again okay so this should ask the user for a value from 0 to 180 point the servo motor at that value and then wait one second push this code out and we'll have a quick look at how it works so we'll hop over to the serial monitor here set this to no line ending so enter a value from 0 to 180 to move the servo to that position so I'm just gonna hold my servo up here so you can see it so I'll start with 0 and we'll see if it moves well there we go and then they'll try 90 Eric O's and then we'll jump all the way over 280 and there it goes again so by sending that command I get to move it to the position that I want ok so that would be our first step with learning to work with the servo motor is being able to get it off in the user and point the servo motor at that specific value so that's what we've done so far now we're gonna take it a step further and we're gonna actually start doing methods so methods are a block of code in which we can store code that we might want to use over and over again so give you the example we've already been using two methods this whole time the set up method and the loop method so we're gonna write our phone method I'm gonna call this method control so I'm outside of all of my code hit enter and I'm gonna do void control okay brackets and I'm gonna take an integer called X I open my squigglies so this i've created a method the methods names control and in order for us to use the code in this method we need to give it a number if we give it a number the code inside this method can run well what I'm actually gonna do is I'm gonna take the code that we already have this code here the serial servo dot right so let's take this servo 1 dot write code I'm gonna get rid of it from the loop and I'm gonna move it into here what I'm gonna do is instead of writing the user value I'm going to write X so what happens here okay so in my loop function I'm gonna write control user Val so let's trace this code when it gets to this line it's already gotten the number from the user it says call the control method finds that and give it the number that you just got from the user so what this does is it jumps down to line 28 of my code and sets the value of x to whatever the value was here then it enters the method now inside the method it can write that value to the server so this code is going to function exactly the same as the code that we just ran but now i've taken this and i've put it into its own block now i'm gonna write another method we're gonna write a sweep method void sweep and this one's not gonna take any parameters so it's just gonna be void sweep with the closed brackets okay now in this method we want to kind of treat our server like a windshield wiper so we're gonna start at at zero sweep it all the way to 180 and then sweep it all the way back to zero we're gonna have to do that using for loops so let's go through this quickly for parentheses integer i equals 0 this says create an integer called i set it equal to a starting value of 0 semicolon as long as I is less than 180 we'll iterate by by 1 which means we'll add 1 to I each time so for loop has 3 parts your variable and it's starting value your condition of success so as long as I is less than 180 it will execute the code in the loop and then your iterator what happens after each execution by goes up by one okay so inside of this I want to do a servo 1 dot right ah now that's going to set I to zero or the servo to 0 then the servo to 1 then the servo to 2 and so on now it'll happen superfast if I don't have a delay in there so we'll put a delay of 5 milliseconds just so that it isn't so stuttering I'm trying to do it super fast so that's going to sweep us from 0 to 180 now we want to sweep dock in the other direction so let's do that for int I equals 180 so we're going to start at the top this time I is greater than 0 by minus minus so starting at 180 as long as we're bigger than 0 continue to take one off serve a 1 dot right by the way thought this code is going to sweep me from 0 to 180 and this code is gonna sweep me back we want to use this method at some point so right now we're asking the user to enter a position from 0 to 180 and then we're just calling control so we're just doing that right let's give them a second option let's say that instead of that they could give us say negative 1 and we'll do a sweep for them or enter negative 1 to sweep ok enter a value from 0 to 180 to move the serve of that position or negative 1 to sweep we'll collect their value right here before we do this we need to add in let's call the conditional and we've done this an if statement so if the value they gave us was negative 1 then we're gonna call sweet otherwise else if now this will get a little technical I'll try to explain it after I type it out so what I said here was otherwise if user Val is greater than or equal to 0 and it's less than or equal to 180 so it's in the right range okay and as with two of the ampersand symbols is found above the seven key on your keyboard okay great the user values greater than equal to zero and it is less than or equal to 180 that's when we're gonna call the control so this now gives the user two choices they can choose to do the sweep or they can choose to just enter a value and it'll move the motor to that position okay so now we've created our own methods we're calling our own methods and we're using a bit of structure around how our code works we're starting to get things to look a little bit more like actual programs where we now have to think about code structure we have to think about how do we break this into logical chunks and that's a big part of programming let's run this and have a look at how it executes so we upload this to our thing and we open up the serial monitor and I'll bring my servo up here so you can see it okay so it asks me to enter my value so I'm gonna start with that negative one and we're gonna see the sweep so there it goes sweeps from one side to the other let's run that one more time so you can see it like a windshield wiper and then if I did want to enter a value say 45 it jumps to position 45 I can't revision 80 and it'll jump to position 80 now if I enter something out of the range so 400 it should just do nothing wait one second and prompt me again nothing happens and it prompts me again okay so go to session 102 and then let's do a sweep again so I should jump back to zero and then sweep it goes cool so we now have a working servo motor we have code that has some actual structure to it we learn how to write some methods we've looked at some loops we've looked at some if statements things are starting to kind of come together you know we're halfway through now so over the next nine lessons as we get to less than 20 this kind of stuffs gonna become more common where we're looking at larger files we're looking at chunking up code using if statements using loops within our code if you made it this far good for you you either have a teacher standing over your shoulder making sure you get there or you a bit more motivation than most people so that's great let's talk about what we could do for an extension for this so a couple options one would be look at your sweep method and let's see if we can change the speed of that suite that would be a first kind of intro extension for you to do another one would be instead of sweeping maybe you can come up with another pattern that you could do with your servo motor and put that in your sweep method or write another method that does a different pattern kind of bounce around the motor can run a few times okay and just kind of get familiar with how you manipulate things or how you create methods within this code because the code structure here is really important not just the writing to the servo now if you're looking for a challenge I'm just gonna show you some functionality of some code and then we can kind of see if you can reproduce that my prompt is the same as it was in the lesson from 0 to 180 or an to negative 1 to sweet now when I enter negative 1 to sweep it's gonna add in two prompts it's gonna ask me for the delay so think about windshield wipers right there's something called the intermittent windshield wiper which basically puts a delay in between each sweep so this is my option to give that delay in seconds so twosecond delay let's say and then the second prompt is how many times do I want it to sweep okay now with windshield wipers you actually have a switch so you can turn on and off for us we're gonna hardcode so let's say I want five sweeps can I put that in and we're gonna see I'm sweeping and then I'm waiting one two and I'm sweeping and it's gonna do this five times so we're adding some functionality and we're gonna have a play with our method headers our suite method is now going to have to take a variable it's gonna have to take a delay variable and it's gonna have a loop of some kind to loop it number of sweeps time so there's a definitely more conceptual coding stuff going on in order to make this work so this is a great little challenge for you at this point in the course if it's too much talk to your teacher if you have a classroom teacher and maybe they can help guide you in the right direction thanks for watching lesson 11 in the Arduino basics tutorial series my name is Adam I'm excited to come back here in lesson 12 as we work towards finishing up this course so don't forget to like and subscribe to the channel if you like what we're doing and you're in what might come next have a great day
