With timestamps:

00:03 - hello humans
00:04 - welcome back to code with conor in the
00:05 - let's learn python tutorial
00:07 - series we're ready to start unit number
00:10 - four
00:10 - that's crazy there's only five units in
00:12 - the course uh we're doing good
00:14 - uh hopefully that project went well for
00:16 - you back unit 3 share with me what you
00:17 - did i'd love to see it
00:19 - in unit number 4 we're going to be
00:20 - looking at strings so
00:22 - strings we've already introduced we've
00:23 - done a little bit of printing with them
00:24 - but we need to dive a little bit
00:26 - deeper in terms of how we can access and
00:28 - use strings in our code
00:31 - in this lesson we're going to be
00:32 - focusing on string indexing and sub
00:34 - strings
00:35 - we'll also have a brief conversation
00:36 - about something called immutability
00:38 - for the challenge in this one we're
00:39 - going to be creating a little substring
00:41 - function
00:42 - that uses user input has some loops has
00:44 - some functions that return we're kind of
00:46 - bringing everything together again
00:48 - and that's going to be normal with this
00:49 - kind of stuff we build off of everything
00:50 - we've already done before
00:53 - let's get into it so coming into our
00:55 - code we're going to start with this
00:56 - teeny little program right
00:58 - here so i have a variable called my
01:00 - string which i've set equal to the
01:02 - literal string
01:02 - superman all right literal string
01:05 - defined by quotation marks
01:07 - this is just a variable name we're going
01:09 - to talk about index notation for a
01:11 - string
01:12 - so for i and range len my string let's
01:15 - talk about this function for a second
01:17 - len is the length function and a length
01:21 - function is going to return the number
01:22 - of characters in the
01:23 - string variable here my strength
01:26 - so if i go counting one two three
01:30 - four five six seven eight there are
01:33 - eight
01:34 - characters in this string now if it was
01:36 - super space man
01:37 - that space counts as a character so make
01:40 - sure you're considering that when you're
01:41 - talking with the length
01:42 - now there are string methods you can use
01:44 - to remove some of the spaces but for
01:46 - right now let's just remember that they
01:48 - do count
01:49 - so this is a for for loop for i in range
01:52 - and the length of the string so it'll
01:53 - start
01:54 - at zero it'll loop up two but not
01:56 - including eight
01:57 - so it'll go zero one two three four five
01:59 - six seven it's going to print the word
02:02 - index
02:02 - followed by the actual number that we're
02:04 - at uh
02:06 - semicolon and then it's going to use
02:08 - this box notation
02:10 - okay this is what we're going to use
02:11 - anytime we get into data structures
02:13 - we're looking at elements inside of a
02:15 - variable so in this case my variable is
02:17 - called my string
02:18 - and it contains a whole bunch of
02:20 - characters because remember that's what
02:21 - a string
02:22 - is so what we're doing with the box
02:24 - notation is we're looking
02:25 - inside of this variable at a specific
02:27 - index
02:28 - so at index i so that should cycle
02:31 - through index 0 through
02:32 - 7. okay let's run this and see what it
02:34 - looks like so we can understand it
02:36 - better
02:38 - so when i run this you see index zero is
02:40 - an s
02:41 - one two three four five six seven and
02:44 - you can see the word superman down there
02:46 - okay so zero up to seven so you'll
02:49 - notice that the index notation doesn't
02:50 - start at one
02:51 - the length counter starts at one and
02:54 - goes to eight
02:54 - but the index counter starts at zero and
02:57 - goes to seven
02:58 - so it's important that we recognize that
02:59 - because any time we work with indices
03:01 - and they don't work with strings or
03:02 - later when we work with lists and other
03:04 - data structures
03:05 - that index notation remains consistent
03:07 - through all of programming
03:08 - so we're going to look at this little
03:09 - program now so i've got one string x is
03:12 - a big long one
03:13 - batman's clearly matched by the green
03:14 - lantern second one y is just a short one
03:16 - it's just superman
03:18 - so we can do that same index notation
03:19 - but i want to add to it
03:21 - so we can actually do a little range in
03:23 - here using a colon and we put the index
03:25 - that we start at on the left
03:27 - and the index that we end at on the
03:28 - right so let's say we wanted the word
03:30 - clearly
03:31 - so zero one two three four five spaces
03:35 - six
03:36 - seven eight nine ten so we're going to
03:38 - start at 10
03:39 - that's the c of clearly and then 11
03:42 - 12 13 40 50 16 the y is 16.
03:46 - stick that in and let's run it
03:50 - and we get clear little that's not quite
03:53 - what we want
03:54 - it didn't include the y even though that
03:56 - was index 16.
03:57 - so the right bound just like in the
03:59 - range function the right bound is
04:01 - exclusive
04:02 - it is not going to include that
04:03 - character so if you want a character
04:05 - included you need to go to the next
04:07 - index so 10 to 17 should fix my problem
04:10 - and now i get clearly you can also do an
04:13 - open
04:14 - ended so i could do from 10 colon and
04:16 - then just leave it blank
04:18 - inside my square brackets and that will
04:20 - start at index 10
04:21 - and go all the way to the end of the
04:23 - string so run that
04:25 - and i get clearly matched by the green
04:27 - lantern
04:29 - now you can do that the other way as
04:30 - well so i could do like colon up to 18
04:34 - right that's gonna start at the
04:36 - beginning and go up two but not
04:38 - including 18.
04:40 - so batman is clearly right so starting
04:42 - at the meeting going there
04:43 - so that there's a couple of ways that
04:45 - you can do that um there's
04:47 - other notations here for strings like
04:49 - putting in a negative and stuff like
04:50 - that
04:50 - that i'm not going to get into i'll put
04:52 - a link in the description for w3schools
04:54 - give you a little bit more on strings
04:56 - but we're going to work through the
04:57 - lessons
04:58 - for this unit and we'll kind of get to
05:00 - some of that let's say we wanted to
05:01 - check the man
05:03 - from the two and see that they were
05:04 - equal so let's say in the first one
05:07 - i'm going to do 0 1 2 3
05:11 - so 3 is the m so 3
05:14 - 4 5 6 to get the man from the first one
05:18 - and i want to see if that's equal to y
05:21 - and 0 1 2 3 4 5
05:25 - to the end of the file so this should be
05:27 - man equals man
05:30 - so it should yield true so run that
05:35 - and we are true so this is the basics of
05:37 - using substrings and index notation on
05:39 - strings
05:40 - it can get complicated okay especially
05:43 - when you're trying to create these
05:44 - general case
05:45 - things that are going to loop through
05:46 - strings of any length
05:48 - and are going to be able to properly do
05:50 - what you want them to do so imagine
05:52 - trying to take a string and put it in
05:53 - alphabetical order right but it works
05:55 - for any string
05:56 - so the indexing piece starts to get
05:58 - pretty tricky and there's a lot in there
06:00 - but it's a great introduction just kind
06:01 - of get us started
06:20 - now we're going to look at the challenge
06:22 - for this lesson so you can see kind of
06:23 - how it works i'll show you a tiny bit of
06:24 - the code
06:25 - and then we'll look at execution tiny
06:27 - bit of code for the challenge i've got
06:29 - this function i've called print
06:30 - sub which is going to be like a
06:31 - substring print thing it takes an
06:33 - s a min and a max and it's actually
06:35 - going to return a true or a false value
06:38 - and then i have this other one print
06:39 - word indices it takes a string
06:41 - s and it's just going to do a nice print
06:43 - out of the word with their indices and
06:45 - i'll show you that in a second
06:46 - then i've got a while true loop where
06:48 - i'm essentially going to loop
06:50 - and as long as print sub is returning
06:53 - false i'm going to keep looping so if
06:55 - they're not doing it properly if they're
06:57 - making mistakes
06:58 - i'm going to keep looping as soon as
07:00 - they do it properly and they give me the
07:02 - right min and max values for the string
07:04 - then it's going to return true and it's
07:05 - going to kick me out of my loop and end
07:07 - my program
07:08 - let's look at it in execution so in
07:10 - execution it's going to ask me for a
07:12 - word
07:12 - superman it's going to give me this nice
07:15 - printout
07:16 - which is one of my functions with the
07:18 - indexes on top
07:20 - and then the letters underneath them
07:22 - okay and i had to get a little creative
07:23 - with my print statements to make it look
07:24 - that pretty
07:25 - and then it's asking me for a starting
07:27 - index so let's say 2
07:30 - and an ending index say six and it
07:33 - prints p-e-r-m so it prints two three
07:36 - four and five
07:37 - okay not including six and it ended
07:40 - now if i did that again and i did an
07:42 - invalid entry
07:44 - so let's say i wanted to go from
07:49 - 4 to 12. well 12 is beyond the scope of
07:52 - the string
07:53 - so it just says invalid index for the
07:56 - given word and lets me go again
07:58 - and i have a bunch of conditions in
07:59 - there what if i put
08:01 - the minimum value bigger than the
08:03 - maximum value
08:04 - no good won't let me do that okay what
08:07 - do i put a negative in
08:10 - no won't let me do that right so there
08:12 - should be protection
08:14 - in there for all the different
08:16 - situations so maybe i
08:18 - start at uh five and i put five again
08:22 - now i won't let me do that so i've got
08:24 - this protection built in now that's
08:25 - going to be boolean statements
08:27 - inside of an if that's going to make
08:28 - that happen now i chained my using
08:30 - and operators you might have another way
08:32 - that you want to do that
08:34 - so there's some stuff in there it's
08:35 - definitely got it's got some spice to it
08:37 - you're going to have to put a bit of
08:38 - work to get it working properly
08:40 - so good luck with it i hope it goes well
08:42 - that's it
08:43 - for the first topic of unit number four
08:45 - which is strings
08:47 - good luck with the challenge we'll see
08:48 - you back here for topic number two
08:49 - remember like share subscribe
08:51 - and we'll see you back here real soon
08:53 - bye humans

Cleaned transcript:

hello humans welcome back to code with conor in the let's learn python tutorial series we're ready to start unit number four that's crazy there's only five units in the course uh we're doing good uh hopefully that project went well for you back unit 3 share with me what you did i'd love to see it in unit number 4 we're going to be looking at strings so strings we've already introduced we've done a little bit of printing with them but we need to dive a little bit deeper in terms of how we can access and use strings in our code in this lesson we're going to be focusing on string indexing and sub strings we'll also have a brief conversation about something called immutability for the challenge in this one we're going to be creating a little substring function that uses user input has some loops has some functions that return we're kind of bringing everything together again and that's going to be normal with this kind of stuff we build off of everything we've already done before let's get into it so coming into our code we're going to start with this teeny little program right here so i have a variable called my string which i've set equal to the literal string superman all right literal string defined by quotation marks this is just a variable name we're going to talk about index notation for a string so for i and range len my string let's talk about this function for a second len is the length function and a length function is going to return the number of characters in the string variable here my strength so if i go counting one two three four five six seven eight there are eight characters in this string now if it was super space man that space counts as a character so make sure you're considering that when you're talking with the length now there are string methods you can use to remove some of the spaces but for right now let's just remember that they do count so this is a for for loop for i in range and the length of the string so it'll start at zero it'll loop up two but not including eight so it'll go zero one two three four five six seven it's going to print the word index followed by the actual number that we're at uh semicolon and then it's going to use this box notation okay this is what we're going to use anytime we get into data structures we're looking at elements inside of a variable so in this case my variable is called my string and it contains a whole bunch of characters because remember that's what a string is so what we're doing with the box notation is we're looking inside of this variable at a specific index so at index i so that should cycle through index 0 through 7. okay let's run this and see what it looks like so we can understand it better so when i run this you see index zero is an s one two three four five six seven and you can see the word superman down there okay so zero up to seven so you'll notice that the index notation doesn't start at one the length counter starts at one and goes to eight but the index counter starts at zero and goes to seven so it's important that we recognize that because any time we work with indices and they don't work with strings or later when we work with lists and other data structures that index notation remains consistent through all of programming so we're going to look at this little program now so i've got one string x is a big long one batman's clearly matched by the green lantern second one y is just a short one it's just superman so we can do that same index notation but i want to add to it so we can actually do a little range in here using a colon and we put the index that we start at on the left and the index that we end at on the right so let's say we wanted the word clearly so zero one two three four five spaces six seven eight nine ten so we're going to start at 10 that's the c of clearly and then 11 12 13 40 50 16 the y is 16. stick that in and let's run it and we get clear little that's not quite what we want it didn't include the y even though that was index 16. so the right bound just like in the range function the right bound is exclusive it is not going to include that character so if you want a character included you need to go to the next index so 10 to 17 should fix my problem and now i get clearly you can also do an open ended so i could do from 10 colon and then just leave it blank inside my square brackets and that will start at index 10 and go all the way to the end of the string so run that and i get clearly matched by the green lantern now you can do that the other way as well so i could do like colon up to 18 right that's gonna start at the beginning and go up two but not including 18. so batman is clearly right so starting at the meeting going there so that there's a couple of ways that you can do that um there's other notations here for strings like putting in a negative and stuff like that that i'm not going to get into i'll put a link in the description for w3schools give you a little bit more on strings but we're going to work through the lessons for this unit and we'll kind of get to some of that let's say we wanted to check the man from the two and see that they were equal so let's say in the first one i'm going to do 0 1 2 3 so 3 is the m so 3 4 5 6 to get the man from the first one and i want to see if that's equal to y and 0 1 2 3 4 5 to the end of the file so this should be man equals man so it should yield true so run that and we are true so this is the basics of using substrings and index notation on strings it can get complicated okay especially when you're trying to create these general case things that are going to loop through strings of any length and are going to be able to properly do what you want them to do so imagine trying to take a string and put it in alphabetical order right but it works for any string so the indexing piece starts to get pretty tricky and there's a lot in there but it's a great introduction just kind of get us started now we're going to look at the challenge for this lesson so you can see kind of how it works i'll show you a tiny bit of the code and then we'll look at execution tiny bit of code for the challenge i've got this function i've called print sub which is going to be like a substring print thing it takes an s a min and a max and it's actually going to return a true or a false value and then i have this other one print word indices it takes a string s and it's just going to do a nice print out of the word with their indices and i'll show you that in a second then i've got a while true loop where i'm essentially going to loop and as long as print sub is returning false i'm going to keep looping so if they're not doing it properly if they're making mistakes i'm going to keep looping as soon as they do it properly and they give me the right min and max values for the string then it's going to return true and it's going to kick me out of my loop and end my program let's look at it in execution so in execution it's going to ask me for a word superman it's going to give me this nice printout which is one of my functions with the indexes on top and then the letters underneath them okay and i had to get a little creative with my print statements to make it look that pretty and then it's asking me for a starting index so let's say 2 and an ending index say six and it prints perm so it prints two three four and five okay not including six and it ended now if i did that again and i did an invalid entry so let's say i wanted to go from 4 to 12. well 12 is beyond the scope of the string so it just says invalid index for the given word and lets me go again and i have a bunch of conditions in there what if i put the minimum value bigger than the maximum value no good won't let me do that okay what do i put a negative in no won't let me do that right so there should be protection in there for all the different situations so maybe i start at uh five and i put five again now i won't let me do that so i've got this protection built in now that's going to be boolean statements inside of an if that's going to make that happen now i chained my using and operators you might have another way that you want to do that so there's some stuff in there it's definitely got it's got some spice to it you're going to have to put a bit of work to get it working properly so good luck with it i hope it goes well that's it for the first topic of unit number four which is strings good luck with the challenge we'll see you back here for topic number two remember like share subscribe and we'll see you back here real soon bye humans
