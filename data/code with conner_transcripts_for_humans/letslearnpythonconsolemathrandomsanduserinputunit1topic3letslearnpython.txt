With timestamps:

00:02 - hello humans
00:03 - welcome back to the let's learn python
00:06 - series here on code with connor
00:08 - this is unit one topic number three
00:12 - and yeah we're gonna get into it so
00:14 - we're gonna start off by looking at the
00:15 - challenge from the last lesson
00:18 - we had a string for each of the
00:21 - pieces that we wanted to put into the
00:22 - mad lib so i had a string word one a
00:24 - string word two word three and those
00:26 - were the variable names that i chose
00:28 - for these strings and then we have the
00:30 - literal quotation marks and then inside
00:32 - of them
00:33 - we have the characters for the word now
00:35 - i chose these words harry book ran
00:37 - slowly
00:38 - you might have chose others the mad lib
00:40 - that i linked in the description
00:41 - had this exact order adjective noun verb
00:44 - past tense adverb adjective and so on
00:46 - so i just kind of made a little comment
00:48 - to remind me what i was supposed to be
00:50 - entering
00:50 - and then i went through and i entered
00:52 - one of each once those were filled in it
00:54 - was all about the print statement that's
00:56 - what the real challenge was so let's
00:57 - have a look at it
00:58 - so you'll see i started my print
00:59 - statement with my parentheses
01:01 - and my triple quotation marks and then i
01:03 - started here today i went to the zoo
01:05 - i saw on and then i closed the triple
01:08 - quotes
01:08 - that ends that string the plus sign
01:10 - prepares to concatenate
01:12 - you'll notice i didn't use the stra the
01:14 - str function
01:15 - because i already have a string word one
01:18 - is
01:18 - of type string so i concatenate word one
01:21 - then i just put a space and i use single
01:23 - quotes for that you could use triple if
01:25 - you wanted to
01:26 - there was no need i didn't need any
01:28 - spacing in there like enters and
01:29 - formatting so i just use a single
01:31 - set of quotes with a space in between
01:33 - then i concatenated the next word
01:35 - then i reopened my triple quotes again
01:38 - don't put the plus sign at the end of
01:39 - the line it causes problems
01:40 - and then we continue with the text from
01:42 - the mad lib jumping up and down and it's
01:44 - tree period he
01:45 - and then end the quotes concatenate the
01:47 - next word a space
01:49 - and the next word back into the triple
01:51 - quotes through the large tunnel that led
01:53 - to its
01:54 - you know end it variable space variable
01:57 - back into the triple quotes
01:59 - i got some peanuts and pass them through
02:01 - the cage to a gigantic gray
02:03 - back to the variables back to the
02:05 - literal string
02:06 - and so on and so on all the way to the
02:08 - end we end it with the triple quotes
02:10 - and the parentheses so this was our
02:12 - hard-coded mad lib
02:14 - now if we run this okay
02:17 - i got my phone a little bit bigger if it
02:18 - was a little hard to read in the last
02:19 - video so i'll scroll it
02:21 - and you can see it just print it out you
02:23 - can see our words that were stored as
02:24 - strings
02:25 - are there printed out right a hairy
02:28 - book and so it's working exactly as we
02:31 - intended it to work
02:32 - which is great so that was our challenge
02:35 - from the last lesson which was the
02:36 - hard-coded mad lib
02:38 - now we're going to jump in and we're
02:39 - going to look at unit one topic number
02:41 - three
02:41 - in this one we're going to look at
02:43 - console programs math
02:45 - in python we're going to talk about
02:47 - randoms and then we're going to talk
02:48 - about user input so we can start to have
02:50 - that interactivity piece
02:52 - kicking it off is console programs so
02:55 - what is a console program well
02:57 - everything that we've been running in
02:58 - windows powershell
02:59 - is an example of a console program these
03:01 - are programs that only interact
03:03 - using input and output via this
03:04 - text-based interface
03:06 - of the command prompt or the powershell
03:08 - or the terminal window
03:10 - etc in 2020 these are not programs that
03:12 - the typical
03:13 - user is ever going to interact with in
03:16 - their you know day-to-day use of a
03:17 - computer
03:18 - if you start to get in to do special
03:20 - things like you want to run a ram
03:21 - diagnostic or whatever
03:23 - you might have had some experience with
03:24 - this if you're ancient like me
03:26 - you probably remember the days when
03:27 - there was an entire command line
03:29 - operating system called dos
03:31 - and we used to use that so we have some
03:34 - experience with this where other people
03:35 - might not
03:36 - so console programs are great for this
03:38 - learning to code piece but they're also
03:40 - really useful for like background
03:41 - scripts
03:42 - you might have noticed sometime when
03:43 - you're installing software in your
03:44 - computer a little black command prompt
03:46 - window might pop
03:47 - up see a bunch of text scrolling through
03:49 - the screen and then
03:50 - quickly disappear that's because there's
03:52 - a script running that's doing things
03:54 - like
03:54 - unpacking files or moving things or
03:57 - assigning windows registry values or
03:59 - whatever
03:59 - in the background those are all little
04:01 - scripts that are running as part of an
04:03 - installation of a piece of software
04:04 - and a lot of times those kinds of things
04:06 - can be written as console programs
04:08 - in a various number of languages python
04:10 - being one of them
04:11 - so these console programs are a great
04:13 - way for us to learn they allow that
04:15 - little bit of interactivity
04:17 - through user input and printing things
04:18 - out to the screen using text
04:20 - you can get a little bit more creative
04:22 - with visuals using things like assiat
04:24 - and special unicode characters and stuff
04:26 - like that but the goal
04:28 - is not graphics here the goal is
04:29 - function and understanding these
04:31 - underlying principles of programming
04:33 - we'll touch on like turtle graphics a
04:35 - little bit which allow like
04:37 - very very minimal graphic interaction
04:40 - but they're not anything fancy and then
04:42 - if you want to get further you can get
04:43 - into pie game and whatever but
04:45 - if your goal is graphics you're probably
04:46 - not going to be living your life in
04:47 - python for very long
04:49 - you're going to move on to other
04:50 - programming languages you're going to be
04:51 - working in unity or other things like
04:53 - that
04:53 - where graphics are really at the core of
04:55 - those languages so that's what i mean
04:57 - when i talk about
04:58 - console programs so the first thing
04:59 - we're going to code today we're going to
05:00 - talk about
05:01 - math so there's a couple of topics when
05:03 - we look at math in python
05:05 - that we need to hit on the first is
05:07 - things like basic order of operations
05:09 - using hard-coded numerical values or
05:11 - variables
05:12 - doesn't really matter so for the
05:13 - purposes of this we'll create three
05:15 - variables we'll make an x y and z
05:17 - and we'll make two of them in in and one
05:19 - of them will flow
05:20 - so i have x equals 5 y equals 10 and z
05:23 - equals 0.5
05:24 - so these are going to be my variables so
05:26 - let's do some math now we can do math
05:28 - directly in a print statement
05:30 - because they're all numerical values it
05:32 - will know
05:33 - to do a numerical operation so let's try
05:35 - that
05:37 - what would happen if i do a print x plus
05:39 - y plus z remember we typically saw plus
05:41 - being a concatenation
05:42 - and we had a tight mismatch error last
05:44 - time when we tried to concatenate a
05:46 - string with an integer
05:47 - so i wonder what's going to happen when
05:48 - we do this i don't know let's try it
05:50 - save
05:52 - we run it and it gives us the number it
05:54 - didn't give us a type mismatch error
05:56 - it actually did the math and the reason
05:57 - for that is it's pretty straightforward
05:59 - the reason for that really is just
06:00 - because there is no string
06:02 - at the beginning of the print statement
06:04 - that it's trying to concatenate two
06:06 - it knows how to do math on numbers and
06:08 - if everything that we're trying to add
06:10 - or do math on
06:11 - is a number no problem at all but if one
06:14 - of them is a string
06:15 - it's like what do you want me to do here
06:17 - do you want me to add the string
06:20 - character values or am i concatenating
06:23 - like
06:23 - it becomes confused as to how do i
06:25 - handle the mismatch of types
06:27 - where all of these are numerical values
06:29 - it's perfectly comfortable doing the
06:31 - math
06:31 - and then printing that result of the
06:32 - screen as characters and this math
06:34 - doesn't have to just be addition
06:36 - you know we could put a times operator
06:38 - in here standard order of operation
06:40 - rules are going to apply
06:41 - it's going to do multiplication and
06:42 - division as a higher priority than
06:43 - addition subtraction
06:44 - so it's going to do y times n which is
06:47 - 10 times 0.5 which is 5.
06:49 - and then it's going to add it to 5. so
06:50 - it should print 10. let's test it
06:55 - and we get 10.0 now the point 0 is
06:57 - interesting so
06:58 - it is just 10 but the thing is that 10
07:01 - is no longer an integer
07:03 - as soon as we brought in the float to
07:05 - the math operator
07:06 - we now have a float value that we're
07:08 - dealing with and a float value is going
07:09 - to have a decimal
07:11 - piece so that decimal piece in this case
07:13 - is a point zero
07:14 - so it's going to be 10.0 and this
07:17 - doesn't seem important right now but
07:18 - when we start looking at division
07:21 - that's when this starts to seem more
07:22 - important now you can also use brackets
07:24 - to change order of operations again
07:27 - nothing different than your like
07:28 - middle school algebra here or middle
07:30 - school order of operations brackets come
07:31 - first
07:32 - that's going to force the addition to
07:33 - happen first then it's going to times
07:36 - it's still going to be a float okay
07:39 - we run it we're good if we were to try
07:41 - to bring a string into the mix
07:43 - so if we were to try to do something
07:45 - like
07:46 - x plus y plus z
07:50 - equals and kind of make it look like a
07:52 - math equation
07:53 - then we would have to bring in the strip
07:59 - because now i want it to do all the math
08:01 - and it's going to do it
08:03 - it's going to still add up these numbers
08:04 - right here and then it's going to
08:06 - convert the answer to a string to allow
08:08 - it to concatenate it
08:09 - to the rest of the values so if i save
08:11 - that and run it
08:14 - you can see it does x plus y plus z
08:17 - equals that's all just that little
08:18 - string
08:19 - and then 15.5 came from doing the actual
08:22 - math equation
08:23 - so you can kind of see how that works
08:25 - with concatenation
08:26 - all order of operations apply we'll hit
08:28 - on a couple of quick
08:30 - math operators that maybe you're not
08:31 - familiar with let's get rid of that and
08:33 - let's just do first
08:34 - squaring or raising something to a power
08:37 - so in python this is pretty easy
08:39 - you can do this with double times
08:41 - operator so if i do something like x
08:43 - double times 2
08:44 - that's x squared so in that case 5
08:47 - squared should be 25. let's save and run
08:52 - 25. so we can do that for power based
08:55 - operations so base to the exponent
08:57 - we can use that double times operator
08:59 - the one thing we really need to spend a
09:00 - minute talking about is
09:01 - division and what's called modulus first
09:03 - things first let's look at a simple
09:05 - division
09:06 - y divided by x pretty straightforward
09:09 - right
09:09 - y is 10 x is 5. 10 divided by 5 should
09:12 - be 2
09:12 - they're both integers so the answer
09:15 - should be an integer it's 2.0
09:17 - what happens if it is not evenly
09:19 - divisible so if x was now
09:21 - three let's run this and let's see what
09:23 - happens
09:25 - it will keep and convert to a float now
09:28 - this is
09:28 - great that python does this a lot of
09:31 - programming languages do not do this
09:34 - a lot of programming languages when
09:36 - they're dividing
09:37 - two integers will give the answer as an
09:40 - integer which means they won't
09:42 - give you that decimal piece they would
09:44 - only give you the
09:45 - integer a python is great if you wanted
09:47 - to force it
09:48 - to behave in a way that's a bit more
09:50 - reminiscent of some other languages
09:52 - you could wrap it into an int function
09:54 - which is going to force it
09:55 - to treat it like an integer and you'll
09:58 - see that gives me that result of just
10:00 - 3. which we all know 10 divided by 3 is
10:02 - not 3
10:03 - but sometimes and in a lot of
10:05 - programming languages if 10 and 3 are
10:06 - both integers
10:07 - it's going to do that okay so that's
10:09 - great and we should talk about that the
10:11 - last one we want to talk about is
10:12 - something called
10:13 - modulus so it's a percent symbols
10:17 - operator so y percent 3 this is a
10:19 - modulus operator
10:20 - and what this says is it says do
10:24 - y divided by 3
10:28 - and then take the remainder so when you
10:30 - do 10 divided by 3 the
10:32 - answer is 3. that's the whole number
10:34 - answer so we're going to chuck that to
10:35 - the side
10:36 - we're going to look at the remainder so
10:38 - after you remove three threes from 10
10:40 - which is three threes is nine how many
10:43 - values you have left we have one
10:44 - left so the remainder is actually 1. so
10:47 - if i do
10:48 - y percent 3 the answer of that operation
10:50 - is going to be
10:51 - 1. okay if you think of it in terms of
10:53 - fractions
10:55 - when you do 10 divided by 3 the answer
10:57 - is 3 and 1 3.
10:59 - it's that one-third that one on the
11:01 - numerator of the remainder
11:03 - that we're looking for when we look at
11:05 - doing the modulus operation
11:07 - so where is this powerful well i think
11:08 - the best place for this
11:10 - is when we're looking at even versus odd
11:12 - and that's doing a percent
11:14 - two operator so later in the code
11:17 - we're going to look at doing if
11:18 - statements and a lot of times
11:20 - looking at whether something's even or
11:22 - odd can give us kind of a neat way to do
11:24 - a quick flag check to do a lot of things
11:26 - let's just say for a second that y was
11:27 - equal to 11 and i do y percent two well
11:30 - anything that's odd is gonna have a
11:32 - remainder of one when you try to divide
11:34 - by two
11:34 - anything that's even is going to have a
11:36 - remainder of zero when you try to divide
11:38 - it by two
11:39 - so let's run this and i should get 1
11:42 - beautiful
11:43 - if i were to change y to an even number
11:46 - say 4
11:47 - and i run it again i get 0.
11:51 - so this is that modulus operator that we
11:53 - can use
11:54 - to determine whether something is or is
11:56 - not evenly divisible by another number
11:59 - so if it is evenly divisible the modulus
12:01 - operator will give zero
12:03 - if it's not evenly divisible then the
12:05 - modulus operator is going to give
12:06 - some value in between zero and the
12:09 - actual divisor
12:10 - so that's where the modulus comes in
12:12 - really really cool little math tool
12:13 - all right that's the basics of math now
12:15 - be aware of things like concatenating
12:16 - the strings in the math
12:18 - be aware of integers and floats and how
12:20 - those might interact
12:21 - when you're working with your coding
12:22 - stuff the next topic we're going to look
12:24 - at is
12:24 - randoms all right now randoms is kind of
12:27 - a interesting topic in a lot of
12:28 - different ways but
12:29 - that's what we're going to jump off to
12:30 - next in randoms we get to do the first
12:33 - import of a library now before we do
12:36 - that
12:37 - what's a library well the thing about
12:39 - programming languages is
12:40 - they don't actually expect you to write
12:42 - every single line of code yourself
12:44 - there is a lot of code already written
12:47 - sometimes by the developers of the
12:49 - languages themselves
12:50 - so in the example of java there is a
12:52 - massive amount of existing classes and
12:55 - libraries
12:56 - in the java world that have been written
12:58 - by oracle or sun microsystems
13:00 - in the world of python there's all kinds
13:02 - of existing libraries written by python
13:04 - then we get into a lot of libraries that
13:06 - are actually user created or
13:08 - other you know created outside of the
13:10 - realm of the company that made the
13:12 - language but they've become kind of
13:14 - sanctioned or approved by the language
13:16 - as these wonderful third party library
13:18 - so there's all kinds of these
13:20 - existing code bases out there that we
13:22 - can use in our code to kind of make
13:24 - things a little easier for us
13:25 - one example of those is random anytime
13:27 - you're importing libraries you should do
13:28 - it at the top of your file
13:30 - it looks like this import and then the
13:33 - name of the library
13:35 - now random is a built-in library with
13:36 - python so i don't need to go
13:39 - and download this library from a website
13:41 - or using pip or using some other
13:42 - software
13:44 - as soon as i installed python 3 on my
13:45 - computer this library is already
13:47 - accessible
13:48 - to me and there's a whole bunch of those
13:50 - you can look them up i'll post a link in
13:51 - the description
13:52 - that lists the libraries available with
13:54 - python 3. so you can have a look around
13:56 - just don't fall too deep down the rabbit
13:58 - hole when we talk about random numbers
13:59 - in a basic introductory programming
14:01 - course it's important that we recognize
14:03 - that what we call
14:04 - random is not really random now i'm not
14:07 - going to get into the high level
14:09 - reasons behind this in terms of
14:11 - pseudorandom versus random and
14:13 - where these numbers are seeded and
14:14 - generated you want to read about that
14:16 - you can go read about that
14:18 - forever there is so much out there about
14:21 - the seeds of these random values and
14:22 - there's
14:23 - places where random really matters and
14:25 - there's places where it really doesn't
14:27 - you know if you're creating a simple
14:29 - dice game that's not going to be you
14:31 - know billions of dollars on the line
14:33 - you probably don't care if your one to
14:36 - six role is pseudo-random or random
14:38 - so now that we have the library there
14:40 - now you can go look online at some
14:41 - different functions within this library
14:42 - that we can use but i'm just going to
14:44 - talk about
14:45 - one function which is the rand int
14:46 - function and it's great for things like
14:49 - dice rolls you know random choices
14:51 - things like that
14:52 - it's perfect for what we need so import
14:55 - random that's great
14:56 - so we're going to call a function called
14:58 - random.randint now
15:00 - a couple of things about this function
15:02 - we're going to go yellow this function
15:03 - and we're going to say hey give me a
15:04 - random integer
15:05 - and it's going to yell back and answer
15:07 - so we need to store that answer
15:09 - in a variable so i'm just going to do x
15:11 - equals
15:12 - okay maybe not the best variable name
15:14 - choice but
15:15 - it's fine so x is a variable that i've
15:17 - created is going to be equal to what i
15:19 - get back from this call to random now
15:21 - randint requires me to give it
15:25 - it requires a min and a max so it
15:27 - requires the left
15:28 - and the right bounds of that random so
15:31 - let's say i wanted to roll a dice
15:33 - so one to six right and then i want to
15:36 - print this out
15:36 - to my screen print x
15:40 - so this is going to when my code runs
15:42 - it's going to import the random library
15:44 - it's going to use the random library to
15:45 - generate a random integer from 1 to 6.
15:48 - it's going to store that value in x and
15:50 - then i'm going to print the value of x
15:53 - to the screen pretty straightforward
15:54 - program let's save it and run it
15:58 - two okay let's run it again six
16:02 - one five four
16:06 - get the idea it is generating a random
16:09 - number from one to six
16:11 - and then it is printing that number out
16:12 - to the screen it is storing it in a
16:14 - variable which is important
16:15 - now i could just wrap the random.ran it
16:18 - in a print statement
16:19 - but a lot of times it's important that
16:21 - we recognize that calling a function
16:23 - like
16:23 - randint is giving us something back and
16:26 - we're going to do a whole section on
16:27 - this in our functions unit but
16:29 - we need to handle that in some way and
16:30 - most of the time in our code we're not
16:32 - just going to want to print it
16:33 - we're going to want to do background
16:34 - things with that value
16:36 - outside of just printing it to the
16:37 - display so that's why i like to store it
16:40 - in a variable just to build those habits
16:42 - okay so this is the random integer
16:43 - function it's great there are
16:45 - other more complex functions around
16:47 - randoms like seeds etc
16:49 - and feel free to do some reading on that
16:50 - again this is an introductory python
16:52 - course
16:52 - my goal with this is for you to
16:54 - understand the core concepts
16:55 - so these are inclusive values one and
16:58 - six
16:58 - they're gonna give us a random in that
17:00 - range now you can then manipulate that
17:02 - random
17:03 - outside of that range if you wanted to
17:04 - you can do math on x for some reason
17:07 - if that was within your nature once you
17:09 - have the value you have it
17:11 - but you have to call randint again each
17:12 - time you want a new random number
17:14 - okay you can't just call x again x is
17:17 - going to just be the last
17:19 - random that it generated so you might
17:21 - need to recall random if you want to get
17:22 - another
17:23 - random integer for example all right
17:25 - that wraps up randoms
17:27 - next up we're going to look at user
17:28 - input so user input is going to provide
17:31 - that little
17:32 - piece of interactivity with our console
17:35 - program
17:36 - and this is one of those things where
17:37 - yeah people make interactive console
17:39 - programs for
17:40 - some purposes like a ram diagnostic
17:42 - program or whatever
17:43 - might have some basic you know user
17:45 - interaction over the command line but
17:47 - you know most of the time beyond the
17:50 - scope of this course and learning your
17:51 - first programming language
17:53 - you're probably not going to do a lot of
17:54 - user interactivity within console
17:56 - unless you're doing debugging and stuff
17:58 - like that you're going to be in a
17:59 - graphical interface because that's
18:01 - where we are in 2020. you're writing
18:03 - apps you're using graphical interface
18:04 - using
18:04 - you know touch interactions and hotspots
18:07 - clickable values you know
18:09 - all that kind of stuff gesture controls
18:10 - you're not using
18:12 - typing in a black or a blue console
18:15 - but for the sake of what we're trying to
18:17 - learn it is perfect
18:18 - so user input we don't need to bring in
18:20 - any libraries
18:21 - again similar to random when we use this
18:24 - built-in
18:25 - input function in python it's going to
18:27 - give us a value back
18:28 - one of the most common things i see when
18:30 - people are learning this is they'll do
18:31 - something like this
18:32 - input enter your name
18:36 - cool that's awesome
18:40 - you use an input function it's going to
18:42 - print to the screen
18:43 - enter your name and it's going to give
18:45 - the user the opportunity to type
18:46 - something
18:47 - and hit enter and then nothing's going
18:50 - to happen
18:51 - because they answered and you weren't
18:54 - listening for the answer
18:55 - it would be the equivalent of greeting
18:57 - someone face to face and going hey
18:58 - what's your name and then turning around
19:00 - and walking out of the room
19:02 - it makes no sense whatsoever we need to
19:04 - listen for that response
19:06 - so we need to create a variable we need
19:07 - to store the answer
19:09 - from the user and then we can use that
19:12 - answer
19:12 - in all kinds of places we could just do
19:14 - a simple print statement
19:16 - where we greet them i print
19:19 - nice to meet you comma a space and then
19:22 - i'm going to print the name that they
19:23 - just gave me
19:24 - right this is the computer is now
19:26 - sentient it's talking to you
19:28 - you know this input brings in a string
19:30 - value which i store
19:32 - in a variable called name and then i use
19:34 - that variable called name it's running
19:39 - enter your name and notice it's waiting
19:42 - the cursor is blinking it's like what do
19:44 - i do
19:45 - right so my name is adam connor
19:49 - i hit enter nice to meet you adam connor
19:52 - it stored that value from the user input
19:55 - in a variable
19:56 - and then brought in that variable in a
19:58 - print statement now
19:59 - you don't have to just bring it in a
20:01 - print statement you could bring it in in
20:02 - all kinds of places in your code right
20:04 - it could be stored for
20:06 - later to show up with a profile or
20:08 - whatever but
20:09 - getting that value is great but you need
20:11 - to store it somewhere
20:12 - that's why we talk about variables
20:14 - before we talk about input
20:15 - because getting that answer from the
20:17 - user is important now that's going to
20:18 - bring in
20:19 - a string the input function by default
20:22 - brings in a string if i wanted the
20:25 - user's age
20:28 - i could do something like this now let's
20:30 - say i wanted to know
20:32 - how many years until this person was 55
20:36 - so
20:36 - traditional retirement age probably not
20:38 - accurate in 2020 but whatever
20:40 - okay i keep saying 20 20. it's 20 21.
20:42 - it's fine
20:43 - i'm just stuck in 2020 like so many
20:46 - people all right so
20:48 - let's say i wanted to know that time
20:50 - until
20:52 - retirement equals 55 minus
20:56 - h print time until retirement
21:00 - i'm going to ask the user for their name
21:01 - store it and name i'm going to ask the
21:02 - user for their age i'm going to store it
21:03 - in age
21:04 - i'm going to do some math time until
21:06 - retirement equals 55 minus age
21:08 - i'm going to print that there's going to
21:10 - be an error let's see it
21:13 - enter your name adam enter your age 37.
21:17 - uh oh i got a runtime error in the
21:21 - middle of interacting with my program i
21:22 - got an error
21:23 - i got a type error unsupported operand
21:26 - for type
21:26 - string and integer oh okay
21:30 - okay all right let's go back to the code
21:32 - right here line number
21:35 - 13 okay hop
21:38 - over line 13 is right here oh i can't do
21:41 - that why can't i do that well
21:43 - because input automatically yields a
21:45 - string
21:46 - if i want an int i need to use the in
21:48 - function
21:49 - now there's an int function there's a
21:51 - float function there's a bool function
21:52 - if you want to force the user to use a
21:54 - specific data type with an input
21:56 - you need to wrap that input in that
21:58 - specific function int
22:01 - float bool whatever and that way it's
22:03 - going to force it and the benefit of
22:05 - that is
22:05 - integers allow us to do things that
22:07 - strings don't like math for example
22:09 - same with floats so we might need that
22:12 - booleans allow us to do conditional
22:13 - operators
22:14 - in a different way so we might need that
22:16 - from the user
22:17 - so it's important that we recognize now
22:19 - let's run this
22:22 - enter your name enter your age
22:25 - and it works it printed the years until
22:27 - retirement now what happens
22:30 - in that same situation if i don't enter
22:33 - a number
22:34 - so i'm not paying attention i throw an a
22:37 - in there
22:38 - bam i get a value error okay invalid
22:41 - literal for int with base 10
22:42 - a a is not an integer so we'll deal with
22:46 - this much later in the course but
22:47 - we would then have to be prepared for
22:49 - that error so we'd have to do a try and
22:51 - a catch
22:52 - so we're not going to worry about that
22:53 - right now so this is how we can add in
22:55 - that user input piece
22:56 - okay it's a really simple function we
22:59 - just need to know how it operates
23:01 - and how it works with variables and
23:02 - variable types again everything's going
23:04 - to come back to variables
23:06 - awesome all right time for the challenge
23:10 - so remember last week we did the mad lib
23:12 - with the hard-coded values
23:13 - all right so this time we're going to
23:15 - take that same mad lib
23:17 - okay and you can use a different mad lib
23:19 - if you want to that's up to you
23:21 - but you see all these words that we hard
23:23 - coded in here
23:24 - that's clunky we should rewrite this
23:27 - with user input
23:28 - so instead of word one being hardcoded
23:30 - to harry
23:31 - maybe we ask the user for an adjective
23:34 - and then we
23:34 - ask the user for a nail and so on
23:37 - and then we suddenly have an interactive
23:39 - mad lib where you could
23:41 - hand it to your baby brother or sister
23:43 - on your laptop
23:44 - and they get the prompt it says enter an
23:45 - attitude they do it they enter each one
23:47 - and when they're done
23:48 - it prints their mad lib to the screen
23:51 - that's great
23:52 - so that's what i want you to do for the
23:53 - challenge on this lesson
23:55 - i want you to modify the mad lib from
23:57 - last time
23:58 - with the hard coded values to benefit
24:00 - from user input
24:02 - and we'll quickly look at a solution to
24:03 - that in the next video thank you for
24:05 - watching
24:06 - don't forget if you like the content
24:08 - like the video share subscribe
24:10 - it's great to know that people want this
24:12 - and people enjoy it hit me up in the
24:14 - comments if you have questions
24:15 - happy to try to answer them as best that
24:17 - i can good luck with the challenge and
24:19 - we will see you back
24:20 - next time

Cleaned transcript:

hello humans welcome back to the let's learn python series here on code with connor this is unit one topic number three and yeah we're gonna get into it so we're gonna start off by looking at the challenge from the last lesson we had a string for each of the pieces that we wanted to put into the mad lib so i had a string word one a string word two word three and those were the variable names that i chose for these strings and then we have the literal quotation marks and then inside of them we have the characters for the word now i chose these words harry book ran slowly you might have chose others the mad lib that i linked in the description had this exact order adjective noun verb past tense adverb adjective and so on so i just kind of made a little comment to remind me what i was supposed to be entering and then i went through and i entered one of each once those were filled in it was all about the print statement that's what the real challenge was so let's have a look at it so you'll see i started my print statement with my parentheses and my triple quotation marks and then i started here today i went to the zoo i saw on and then i closed the triple quotes that ends that string the plus sign prepares to concatenate you'll notice i didn't use the stra the str function because i already have a string word one is of type string so i concatenate word one then i just put a space and i use single quotes for that you could use triple if you wanted to there was no need i didn't need any spacing in there like enters and formatting so i just use a single set of quotes with a space in between then i concatenated the next word then i reopened my triple quotes again don't put the plus sign at the end of the line it causes problems and then we continue with the text from the mad lib jumping up and down and it's tree period he and then end the quotes concatenate the next word a space and the next word back into the triple quotes through the large tunnel that led to its you know end it variable space variable back into the triple quotes i got some peanuts and pass them through the cage to a gigantic gray back to the variables back to the literal string and so on and so on all the way to the end we end it with the triple quotes and the parentheses so this was our hardcoded mad lib now if we run this okay i got my phone a little bit bigger if it was a little hard to read in the last video so i'll scroll it and you can see it just print it out you can see our words that were stored as strings are there printed out right a hairy book and so it's working exactly as we intended it to work which is great so that was our challenge from the last lesson which was the hardcoded mad lib now we're going to jump in and we're going to look at unit one topic number three in this one we're going to look at console programs math in python we're going to talk about randoms and then we're going to talk about user input so we can start to have that interactivity piece kicking it off is console programs so what is a console program well everything that we've been running in windows powershell is an example of a console program these are programs that only interact using input and output via this textbased interface of the command prompt or the powershell or the terminal window etc in 2020 these are not programs that the typical user is ever going to interact with in their you know daytoday use of a computer if you start to get in to do special things like you want to run a ram diagnostic or whatever you might have had some experience with this if you're ancient like me you probably remember the days when there was an entire command line operating system called dos and we used to use that so we have some experience with this where other people might not so console programs are great for this learning to code piece but they're also really useful for like background scripts you might have noticed sometime when you're installing software in your computer a little black command prompt window might pop up see a bunch of text scrolling through the screen and then quickly disappear that's because there's a script running that's doing things like unpacking files or moving things or assigning windows registry values or whatever in the background those are all little scripts that are running as part of an installation of a piece of software and a lot of times those kinds of things can be written as console programs in a various number of languages python being one of them so these console programs are a great way for us to learn they allow that little bit of interactivity through user input and printing things out to the screen using text you can get a little bit more creative with visuals using things like assiat and special unicode characters and stuff like that but the goal is not graphics here the goal is function and understanding these underlying principles of programming we'll touch on like turtle graphics a little bit which allow like very very minimal graphic interaction but they're not anything fancy and then if you want to get further you can get into pie game and whatever but if your goal is graphics you're probably not going to be living your life in python for very long you're going to move on to other programming languages you're going to be working in unity or other things like that where graphics are really at the core of those languages so that's what i mean when i talk about console programs so the first thing we're going to code today we're going to talk about math so there's a couple of topics when we look at math in python that we need to hit on the first is things like basic order of operations using hardcoded numerical values or variables doesn't really matter so for the purposes of this we'll create three variables we'll make an x y and z and we'll make two of them in in and one of them will flow so i have x equals 5 y equals 10 and z equals 0.5 so these are going to be my variables so let's do some math now we can do math directly in a print statement because they're all numerical values it will know to do a numerical operation so let's try that what would happen if i do a print x plus y plus z remember we typically saw plus being a concatenation and we had a tight mismatch error last time when we tried to concatenate a string with an integer so i wonder what's going to happen when we do this i don't know let's try it save we run it and it gives us the number it didn't give us a type mismatch error it actually did the math and the reason for that is it's pretty straightforward the reason for that really is just because there is no string at the beginning of the print statement that it's trying to concatenate two it knows how to do math on numbers and if everything that we're trying to add or do math on is a number no problem at all but if one of them is a string it's like what do you want me to do here do you want me to add the string character values or am i concatenating like it becomes confused as to how do i handle the mismatch of types where all of these are numerical values it's perfectly comfortable doing the math and then printing that result of the screen as characters and this math doesn't have to just be addition you know we could put a times operator in here standard order of operation rules are going to apply it's going to do multiplication and division as a higher priority than addition subtraction so it's going to do y times n which is 10 times 0.5 which is 5. and then it's going to add it to 5. so it should print 10. let's test it and we get 10.0 now the point 0 is interesting so it is just 10 but the thing is that 10 is no longer an integer as soon as we brought in the float to the math operator we now have a float value that we're dealing with and a float value is going to have a decimal piece so that decimal piece in this case is a point zero so it's going to be 10.0 and this doesn't seem important right now but when we start looking at division that's when this starts to seem more important now you can also use brackets to change order of operations again nothing different than your like middle school algebra here or middle school order of operations brackets come first that's going to force the addition to happen first then it's going to times it's still going to be a float okay we run it we're good if we were to try to bring a string into the mix so if we were to try to do something like x plus y plus z equals and kind of make it look like a math equation then we would have to bring in the strip because now i want it to do all the math and it's going to do it it's going to still add up these numbers right here and then it's going to convert the answer to a string to allow it to concatenate it to the rest of the values so if i save that and run it you can see it does x plus y plus z equals that's all just that little string and then 15.5 came from doing the actual math equation so you can kind of see how that works with concatenation all order of operations apply we'll hit on a couple of quick math operators that maybe you're not familiar with let's get rid of that and let's just do first squaring or raising something to a power so in python this is pretty easy you can do this with double times operator so if i do something like x double times 2 that's x squared so in that case 5 squared should be 25. let's save and run 25. so we can do that for power based operations so base to the exponent we can use that double times operator the one thing we really need to spend a minute talking about is division and what's called modulus first things first let's look at a simple division y divided by x pretty straightforward right y is 10 x is 5. 10 divided by 5 should be 2 they're both integers so the answer should be an integer it's 2.0 what happens if it is not evenly divisible so if x was now three let's run this and let's see what happens it will keep and convert to a float now this is great that python does this a lot of programming languages do not do this a lot of programming languages when they're dividing two integers will give the answer as an integer which means they won't give you that decimal piece they would only give you the integer a python is great if you wanted to force it to behave in a way that's a bit more reminiscent of some other languages you could wrap it into an int function which is going to force it to treat it like an integer and you'll see that gives me that result of just 3. which we all know 10 divided by 3 is not 3 but sometimes and in a lot of programming languages if 10 and 3 are both integers it's going to do that okay so that's great and we should talk about that the last one we want to talk about is something called modulus so it's a percent symbols operator so y percent 3 this is a modulus operator and what this says is it says do y divided by 3 and then take the remainder so when you do 10 divided by 3 the answer is 3. that's the whole number answer so we're going to chuck that to the side we're going to look at the remainder so after you remove three threes from 10 which is three threes is nine how many values you have left we have one left so the remainder is actually 1. so if i do y percent 3 the answer of that operation is going to be 1. okay if you think of it in terms of fractions when you do 10 divided by 3 the answer is 3 and 1 3. it's that onethird that one on the numerator of the remainder that we're looking for when we look at doing the modulus operation so where is this powerful well i think the best place for this is when we're looking at even versus odd and that's doing a percent two operator so later in the code we're going to look at doing if statements and a lot of times looking at whether something's even or odd can give us kind of a neat way to do a quick flag check to do a lot of things let's just say for a second that y was equal to 11 and i do y percent two well anything that's odd is gonna have a remainder of one when you try to divide by two anything that's even is going to have a remainder of zero when you try to divide it by two so let's run this and i should get 1 beautiful if i were to change y to an even number say 4 and i run it again i get 0. so this is that modulus operator that we can use to determine whether something is or is not evenly divisible by another number so if it is evenly divisible the modulus operator will give zero if it's not evenly divisible then the modulus operator is going to give some value in between zero and the actual divisor so that's where the modulus comes in really really cool little math tool all right that's the basics of math now be aware of things like concatenating the strings in the math be aware of integers and floats and how those might interact when you're working with your coding stuff the next topic we're going to look at is randoms all right now randoms is kind of a interesting topic in a lot of different ways but that's what we're going to jump off to next in randoms we get to do the first import of a library now before we do that what's a library well the thing about programming languages is they don't actually expect you to write every single line of code yourself there is a lot of code already written sometimes by the developers of the languages themselves so in the example of java there is a massive amount of existing classes and libraries in the java world that have been written by oracle or sun microsystems in the world of python there's all kinds of existing libraries written by python then we get into a lot of libraries that are actually user created or other you know created outside of the realm of the company that made the language but they've become kind of sanctioned or approved by the language as these wonderful third party library so there's all kinds of these existing code bases out there that we can use in our code to kind of make things a little easier for us one example of those is random anytime you're importing libraries you should do it at the top of your file it looks like this import and then the name of the library now random is a builtin library with python so i don't need to go and download this library from a website or using pip or using some other software as soon as i installed python 3 on my computer this library is already accessible to me and there's a whole bunch of those you can look them up i'll post a link in the description that lists the libraries available with python 3. so you can have a look around just don't fall too deep down the rabbit hole when we talk about random numbers in a basic introductory programming course it's important that we recognize that what we call random is not really random now i'm not going to get into the high level reasons behind this in terms of pseudorandom versus random and where these numbers are seeded and generated you want to read about that you can go read about that forever there is so much out there about the seeds of these random values and there's places where random really matters and there's places where it really doesn't you know if you're creating a simple dice game that's not going to be you know billions of dollars on the line you probably don't care if your one to six role is pseudorandom or random so now that we have the library there now you can go look online at some different functions within this library that we can use but i'm just going to talk about one function which is the rand int function and it's great for things like dice rolls you know random choices things like that it's perfect for what we need so import random that's great so we're going to call a function called random.randint now a couple of things about this function we're going to go yellow this function and we're going to say hey give me a random integer and it's going to yell back and answer so we need to store that answer in a variable so i'm just going to do x equals okay maybe not the best variable name choice but it's fine so x is a variable that i've created is going to be equal to what i get back from this call to random now randint requires me to give it it requires a min and a max so it requires the left and the right bounds of that random so let's say i wanted to roll a dice so one to six right and then i want to print this out to my screen print x so this is going to when my code runs it's going to import the random library it's going to use the random library to generate a random integer from 1 to 6. it's going to store that value in x and then i'm going to print the value of x to the screen pretty straightforward program let's save it and run it two okay let's run it again six one five four get the idea it is generating a random number from one to six and then it is printing that number out to the screen it is storing it in a variable which is important now i could just wrap the random.ran it in a print statement but a lot of times it's important that we recognize that calling a function like randint is giving us something back and we're going to do a whole section on this in our functions unit but we need to handle that in some way and most of the time in our code we're not just going to want to print it we're going to want to do background things with that value outside of just printing it to the display so that's why i like to store it in a variable just to build those habits okay so this is the random integer function it's great there are other more complex functions around randoms like seeds etc and feel free to do some reading on that again this is an introductory python course my goal with this is for you to understand the core concepts so these are inclusive values one and six they're gonna give us a random in that range now you can then manipulate that random outside of that range if you wanted to you can do math on x for some reason if that was within your nature once you have the value you have it but you have to call randint again each time you want a new random number okay you can't just call x again x is going to just be the last random that it generated so you might need to recall random if you want to get another random integer for example all right that wraps up randoms next up we're going to look at user input so user input is going to provide that little piece of interactivity with our console program and this is one of those things where yeah people make interactive console programs for some purposes like a ram diagnostic program or whatever might have some basic you know user interaction over the command line but you know most of the time beyond the scope of this course and learning your first programming language you're probably not going to do a lot of user interactivity within console unless you're doing debugging and stuff like that you're going to be in a graphical interface because that's where we are in 2020. you're writing apps you're using graphical interface using you know touch interactions and hotspots clickable values you know all that kind of stuff gesture controls you're not using typing in a black or a blue console but for the sake of what we're trying to learn it is perfect so user input we don't need to bring in any libraries again similar to random when we use this builtin input function in python it's going to give us a value back one of the most common things i see when people are learning this is they'll do something like this input enter your name cool that's awesome you use an input function it's going to print to the screen enter your name and it's going to give the user the opportunity to type something and hit enter and then nothing's going to happen because they answered and you weren't listening for the answer it would be the equivalent of greeting someone face to face and going hey what's your name and then turning around and walking out of the room it makes no sense whatsoever we need to listen for that response so we need to create a variable we need to store the answer from the user and then we can use that answer in all kinds of places we could just do a simple print statement where we greet them i print nice to meet you comma a space and then i'm going to print the name that they just gave me right this is the computer is now sentient it's talking to you you know this input brings in a string value which i store in a variable called name and then i use that variable called name it's running enter your name and notice it's waiting the cursor is blinking it's like what do i do right so my name is adam connor i hit enter nice to meet you adam connor it stored that value from the user input in a variable and then brought in that variable in a print statement now you don't have to just bring it in a print statement you could bring it in in all kinds of places in your code right it could be stored for later to show up with a profile or whatever but getting that value is great but you need to store it somewhere that's why we talk about variables before we talk about input because getting that answer from the user is important now that's going to bring in a string the input function by default brings in a string if i wanted the user's age i could do something like this now let's say i wanted to know how many years until this person was 55 so traditional retirement age probably not accurate in 2020 but whatever okay i keep saying 20 20. it's 20 21. it's fine i'm just stuck in 2020 like so many people all right so let's say i wanted to know that time until retirement equals 55 minus h print time until retirement i'm going to ask the user for their name store it and name i'm going to ask the user for their age i'm going to store it in age i'm going to do some math time until retirement equals 55 minus age i'm going to print that there's going to be an error let's see it enter your name adam enter your age 37. uh oh i got a runtime error in the middle of interacting with my program i got an error i got a type error unsupported operand for type string and integer oh okay okay all right let's go back to the code right here line number 13 okay hop over line 13 is right here oh i can't do that why can't i do that well because input automatically yields a string if i want an int i need to use the in function now there's an int function there's a float function there's a bool function if you want to force the user to use a specific data type with an input you need to wrap that input in that specific function int float bool whatever and that way it's going to force it and the benefit of that is integers allow us to do things that strings don't like math for example same with floats so we might need that booleans allow us to do conditional operators in a different way so we might need that from the user so it's important that we recognize now let's run this enter your name enter your age and it works it printed the years until retirement now what happens in that same situation if i don't enter a number so i'm not paying attention i throw an a in there bam i get a value error okay invalid literal for int with base 10 a a is not an integer so we'll deal with this much later in the course but we would then have to be prepared for that error so we'd have to do a try and a catch so we're not going to worry about that right now so this is how we can add in that user input piece okay it's a really simple function we just need to know how it operates and how it works with variables and variable types again everything's going to come back to variables awesome all right time for the challenge so remember last week we did the mad lib with the hardcoded values all right so this time we're going to take that same mad lib okay and you can use a different mad lib if you want to that's up to you but you see all these words that we hard coded in here that's clunky we should rewrite this with user input so instead of word one being hardcoded to harry maybe we ask the user for an adjective and then we ask the user for a nail and so on and then we suddenly have an interactive mad lib where you could hand it to your baby brother or sister on your laptop and they get the prompt it says enter an attitude they do it they enter each one and when they're done it prints their mad lib to the screen that's great so that's what i want you to do for the challenge on this lesson i want you to modify the mad lib from last time with the hard coded values to benefit from user input and we'll quickly look at a solution to that in the next video thank you for watching don't forget if you like the content like the video share subscribe it's great to know that people want this and people enjoy it hit me up in the comments if you have questions happy to try to answer them as best that i can good luck with the challenge and we will see you back next time
