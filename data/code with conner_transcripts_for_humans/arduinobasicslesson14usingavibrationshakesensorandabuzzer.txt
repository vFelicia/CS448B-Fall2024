With timestamps:

00:01 - [Music]
00:11 - hello coders welcome back to the Arduino
00:14 - basics tutorial series this is lesson
00:16 - number 14 in this lesson we're going to
00:18 - be working with a vibration or a shake
00:20 - sensor along with a buzzer we're gonna
00:23 - use a simple two leg vibration switch
00:26 - sometimes called a shake switch or a
00:28 - shake sensor we're also going to use one
00:30 - of the standard two leg buzzers start
00:35 - out let's look at the wiring diagram to
00:37 - set this thing up but we have our
00:39 - vibration sensor right here plugged into
00:42 - our breadboard now it doesn't actually
00:44 - matter left leg a right leg as long as
00:46 - one of them is sent to a zero on Arduino
00:49 - and one of them is sent to voltage so I
00:52 - have the left leg going to voltage the
00:54 - right leg going down into a zero on my
00:57 - Arduino my buzzer has a positive and a
01:00 - negative and it'll be written right on
01:01 - your buzzer which side is the positive
01:03 - which side is the negative my positive
01:05 - end I'm going to take two pin number
01:07 - four on my Arduino my negative end I'm
01:11 - gonna take to the ground row on my
01:13 - breadboard so ground that out that's all
01:15 - the wiring we need to get this thing up
01:17 - and running just take a second get it
01:19 - wired up the meeting dock in the coding
01:21 - environment so here we are back in our
01:23 - code environment I have a new file
01:25 - called lesson 14 where we're gonna
01:27 - trigger a buzzer when shaking the
01:29 - Arduino board so we use that vibration
01:31 - sensor to do that first things first
01:33 - let's add in our pin declarations as
01:36 - well as a variable that we'll use for
01:37 - our sensor value we plug our buzzer into
01:40 - pin 4 and our sensor into a 0 so we've
01:43 - defined these as buzzer pin and sensor
01:45 - pin I've also have an integer called
01:47 - sensor Val which is going to store the
01:49 - value coming in from our sensor the
01:51 - value has a range of 0 to 10 24 we'll
01:54 - see that later with a print line
01:55 - statement that we'll do next
01:57 - in our setup function we have two things
01:59 - to do we're going to initialize our
02:00 - serial monitor and we're going to set
02:02 - the pin mode for the buzzer pin so our
02:04 - serial monitor is set up for debugging
02:06 - and for print statements and then our
02:08 - pin mode for the buzzer pin will be an
02:09 - output pin so we can output voltage to
02:12 - turn the buzzer
02:12 - now we're ready to move on to our loop
02:14 - function the first thing we need to do
02:16 - every time our code loops is we need to
02:18 - read the value from the vibration sensor
02:20 - so to do that we use an analog read on
02:23 - our sensor pin and I'm going to store
02:25 - the value in our sensor Val this is the
02:27 - variable that we created at the top of
02:29 - the file so sensor Val is now equal to
02:31 - the value read through an analog Channel
02:34 - and the sensor pin so pin number 4 read
02:37 - an analog stored in sensor value ok
02:40 - so now we have that number we can
02:42 - actually look at it next thing is gonna
02:43 - be using an if statement to see if that
02:45 - value has changed so what you'll notice
02:47 - when we look at our print line statement
02:49 - is our vibration switch tends to hover
02:51 - right around the value 1024 when no
02:53 - vibration is occurring maybe sometimes
02:55 - dips down to 10 23 and then we'll really
02:58 - not dip down below 10 23 unless
03:00 - something actually happens like it gets
03:02 - shaken or moved or bumped or whatever so
03:05 - we'll use 10 22 as a threshold value so
03:08 - we'll do an if statement here with that
03:10 - value the sensor value and 10 22 if my
03:14 - sensor value is less than 10 22 this
03:16 - means that the board has been shaken or
03:18 - the sensor has been bumped or something
03:21 - has happened otherwise it wouldn't get
03:23 - below 10 22 it would be hovering around
03:25 - 10 23 1024 so what do we want to have it
03:27 - and we're gonna use a new function that
03:29 - we haven't used before called tone
03:30 - buzzers are pretty standard with Arduino
03:32 - so we have a function we can call to
03:34 - send a specific tone over a pin so what
03:38 - pin do we want to use
03:39 - buzzer pin and what pitch of the tone do
03:41 - we want to send it out I'll send this
03:43 - one out at 300 so this says send a tone
03:46 - over this pin at this pitch okay so we
03:50 - can modify the pitch and things like
03:51 - that later on if we want to in the
03:53 - extensions of the challenge so now we
03:56 - have our if statement so if the sensor
03:58 - is reading at a certain value it's going
04:01 - to trigger a tone so if the value is no
04:04 - longer reading under that so the
04:06 - vibration has ceased so this is our else
04:08 - statement we need to call a function
04:10 - called no tone and this just takes a pin
04:13 - value and this stops sending a tone over
04:16 - that signal so our if statement says the
04:18 - sense of value dips below 10 22 that's
04:20 - only gonna happen when the vibration
04:21 - occurs then we trigger the tone on the
04:23 - buzzer pin at this pitch otherwise
04:26 - so we should probably have a delay in
04:28 - here somewhere as well put a short delay
04:30 - at the end and we should add some debug
04:32 - statements in so something so that we
04:34 - can see the sensor values as they're
04:36 - happening so I'll actually put that up
04:38 - here before the if statement so here are
04:41 - a couple of print line statements that
04:43 - we can use print the sensor value with a
04:45 - colon after it and then print line the
04:48 - actual value and this will just give us
04:50 - a nice quick readout of what the
04:51 - vibration sensor is reading the tone is
04:54 - pretty quick right now because our delay
04:56 - is so short okay we could have the delay
04:58 - be longer and that would allow the tone
05:00 - to play for longer before it goes back
05:02 - to detecting vibration again so let's
05:05 - push this code out to our board and
05:06 - let's see it in action so now that we've
05:09 - pushed there to the board let's open up
05:10 - the serial monitor so that we can see
05:12 - the values so here we see 10:23 is
05:15 - recording pretty much across the board
05:16 - and if I just come over here and give a
05:18 - little flick to my sensor you see that
05:22 - number of seven hundred and thirty two
05:24 - cascading it's way up and you heard the
05:25 - tone occur so if I flick it a few more
05:28 - times so we can see how the vibration is
05:35 - being triggered and the range of values
05:37 - that we're seeing usually in the eight
05:39 - hundred nine hundred maybe in the seven
05:40 - hundred range depending on how severe
05:42 - vibration occurs that's set up and
05:44 - that's working properly this is just a
05:46 - great simple example of taking an input
05:48 - and then producing an output which is
05:50 - really what we want to do with these
05:52 - boards we want to be able to get the
05:54 - input that we want do any calculations
05:56 - or logic with those inputs and then
05:58 - produce a certain kind of output that's
06:00 - the reason we learn this kind of code
06:02 - create job on this short quick lesson on
06:05 - using a vibration sensor and a buzzer
06:07 - will keep the extension short as well so
06:09 - for an extension on this why don't we
06:11 - just modify the beep or the buzz that we
06:14 - get why don't we see if we can get it to
06:16 - buzz or beep twice when the vibration
06:19 - occurs and maybe hold each one a little
06:21 - bit longer so instead of just the really
06:23 - quick beep we get along though maybe a
06:26 - half second or a one-second beep beep
06:28 - before it goes back to normal operation
06:31 - ok great job with a quick extension
06:33 - let's move on to a quick challenge for
06:35 - the challenge I'd like you to use the
06:36 - actual values coming in from the serial
06:38 - monitor so
06:39 - said that we saw them around seven
06:40 - hundred eight hundred nine hundred and
06:42 - create a range of tones on the buzzer so
06:45 - the more severe the vibration the higher
06:49 - pitch the tone so we set up a little
06:51 - range there you can all these like a
06:52 - mathematical range or you could just use
06:54 - several if statements you know
06:56 - essentially if the sensor value comes in
06:58 - under seven hundred play bits if it's
06:59 - under eight hundred to do this one nine
07:00 - hundred whatever so setting up some
07:02 - ranges so we have at least three
07:04 - different tones that are gonna occur
07:05 - depending on the severity of the
07:07 - vibration and that's it for the
07:08 - challenge on this one we wanted to keep
07:10 - this one pretty quick and pretty short
07:11 - but still getting you using these core
07:13 - principles of programming like
07:15 - conditional statements analyzing inputs
07:17 - and producing outputs thank you so much
07:20 - for watching I hope you enjoyed the
07:21 - video I hope you learned something from
07:23 - it and I hope I see you back here in
07:24 - Lesson number fifteen if you did enjoy
07:26 - it be sure to LIKE the video and
07:28 - subscribe to our channel to stay up to
07:29 - date as we continue to post the Arduino
07:31 - basics tutorial series have a great day
07:34 - [Music]

Cleaned transcript:

hello coders welcome back to the Arduino basics tutorial series this is lesson number 14 in this lesson we're going to be working with a vibration or a shake sensor along with a buzzer we're gonna use a simple two leg vibration switch sometimes called a shake switch or a shake sensor we're also going to use one of the standard two leg buzzers start out let's look at the wiring diagram to set this thing up but we have our vibration sensor right here plugged into our breadboard now it doesn't actually matter left leg a right leg as long as one of them is sent to a zero on Arduino and one of them is sent to voltage so I have the left leg going to voltage the right leg going down into a zero on my Arduino my buzzer has a positive and a negative and it'll be written right on your buzzer which side is the positive which side is the negative my positive end I'm going to take two pin number four on my Arduino my negative end I'm gonna take to the ground row on my breadboard so ground that out that's all the wiring we need to get this thing up and running just take a second get it wired up the meeting dock in the coding environment so here we are back in our code environment I have a new file called lesson 14 where we're gonna trigger a buzzer when shaking the Arduino board so we use that vibration sensor to do that first things first let's add in our pin declarations as well as a variable that we'll use for our sensor value we plug our buzzer into pin 4 and our sensor into a 0 so we've defined these as buzzer pin and sensor pin I've also have an integer called sensor Val which is going to store the value coming in from our sensor the value has a range of 0 to 10 24 we'll see that later with a print line statement that we'll do next in our setup function we have two things to do we're going to initialize our serial monitor and we're going to set the pin mode for the buzzer pin so our serial monitor is set up for debugging and for print statements and then our pin mode for the buzzer pin will be an output pin so we can output voltage to turn the buzzer now we're ready to move on to our loop function the first thing we need to do every time our code loops is we need to read the value from the vibration sensor so to do that we use an analog read on our sensor pin and I'm going to store the value in our sensor Val this is the variable that we created at the top of the file so sensor Val is now equal to the value read through an analog Channel and the sensor pin so pin number 4 read an analog stored in sensor value ok so now we have that number we can actually look at it next thing is gonna be using an if statement to see if that value has changed so what you'll notice when we look at our print line statement is our vibration switch tends to hover right around the value 1024 when no vibration is occurring maybe sometimes dips down to 10 23 and then we'll really not dip down below 10 23 unless something actually happens like it gets shaken or moved or bumped or whatever so we'll use 10 22 as a threshold value so we'll do an if statement here with that value the sensor value and 10 22 if my sensor value is less than 10 22 this means that the board has been shaken or the sensor has been bumped or something has happened otherwise it wouldn't get below 10 22 it would be hovering around 10 23 1024 so what do we want to have it and we're gonna use a new function that we haven't used before called tone buzzers are pretty standard with Arduino so we have a function we can call to send a specific tone over a pin so what pin do we want to use buzzer pin and what pitch of the tone do we want to send it out I'll send this one out at 300 so this says send a tone over this pin at this pitch okay so we can modify the pitch and things like that later on if we want to in the extensions of the challenge so now we have our if statement so if the sensor is reading at a certain value it's going to trigger a tone so if the value is no longer reading under that so the vibration has ceased so this is our else statement we need to call a function called no tone and this just takes a pin value and this stops sending a tone over that signal so our if statement says the sense of value dips below 10 22 that's only gonna happen when the vibration occurs then we trigger the tone on the buzzer pin at this pitch otherwise so we should probably have a delay in here somewhere as well put a short delay at the end and we should add some debug statements in so something so that we can see the sensor values as they're happening so I'll actually put that up here before the if statement so here are a couple of print line statements that we can use print the sensor value with a colon after it and then print line the actual value and this will just give us a nice quick readout of what the vibration sensor is reading the tone is pretty quick right now because our delay is so short okay we could have the delay be longer and that would allow the tone to play for longer before it goes back to detecting vibration again so let's push this code out to our board and let's see it in action so now that we've pushed there to the board let's open up the serial monitor so that we can see the values so here we see 1023 is recording pretty much across the board and if I just come over here and give a little flick to my sensor you see that number of seven hundred and thirty two cascading it's way up and you heard the tone occur so if I flick it a few more times so we can see how the vibration is being triggered and the range of values that we're seeing usually in the eight hundred nine hundred maybe in the seven hundred range depending on how severe vibration occurs that's set up and that's working properly this is just a great simple example of taking an input and then producing an output which is really what we want to do with these boards we want to be able to get the input that we want do any calculations or logic with those inputs and then produce a certain kind of output that's the reason we learn this kind of code create job on this short quick lesson on using a vibration sensor and a buzzer will keep the extension short as well so for an extension on this why don't we just modify the beep or the buzz that we get why don't we see if we can get it to buzz or beep twice when the vibration occurs and maybe hold each one a little bit longer so instead of just the really quick beep we get along though maybe a half second or a onesecond beep beep before it goes back to normal operation ok great job with a quick extension let's move on to a quick challenge for the challenge I'd like you to use the actual values coming in from the serial monitor so said that we saw them around seven hundred eight hundred nine hundred and create a range of tones on the buzzer so the more severe the vibration the higher pitch the tone so we set up a little range there you can all these like a mathematical range or you could just use several if statements you know essentially if the sensor value comes in under seven hundred play bits if it's under eight hundred to do this one nine hundred whatever so setting up some ranges so we have at least three different tones that are gonna occur depending on the severity of the vibration and that's it for the challenge on this one we wanted to keep this one pretty quick and pretty short but still getting you using these core principles of programming like conditional statements analyzing inputs and producing outputs thank you so much for watching I hope you enjoyed the video I hope you learned something from it and I hope I see you back here in Lesson number fifteen if you did enjoy it be sure to LIKE the video and subscribe to our channel to stay up to date as we continue to post the Arduino basics tutorial series have a great day
