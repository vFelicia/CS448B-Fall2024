With timestamps:

00:03 - hello humans
00:04 - this is a b computer science a and we
00:06 - are looking at array lists
00:08 - all right so we're going to jump right
00:10 - into eclipse here
00:12 - there we are and we're going to go
00:14 - through some arraylist basics so i want
00:15 - to start with the most important part of
00:17 - arraylist which is the
00:18 - declaration and initialization because
00:21 - when we
00:22 - start dealing with a new variable type
00:23 - we need to know how to declare it and
00:24 - how to initialize it
00:26 - now arraylists are an object type
00:27 - similar to strings so there's an
00:29 - arraylist
00:30 - class in java that's going to be at the
00:32 - core of how this
00:33 - variable functions versus something like
00:35 - a primitive type like an int
00:37 - because it's an object type it's
00:38 - actually an object type that can store
00:40 - multiple objects within it so like a
00:43 - list of other
00:44 - objects now we can throw primitives into
00:46 - it so we can throw ins in it but what it
00:48 - really does is it
00:49 - puts integer objects in it which is
00:51 - integer is a wrapper class
00:54 - in java which is like capital i integer
00:57 - and there's like a capital d double and
00:59 - they basically just take a primitive
01:00 - type like an int and convert it into an
01:02 - object format
01:03 - so that it can be stored inside of an
01:04 - arraylist so we can do that we can put
01:06 - integers and doubles and stuff in there
01:08 - but they'll be treated
01:10 - like objects when they're in the
01:11 - arraylist so that's an important
01:13 - distinction to make
01:14 - let's look at notation so i have a
01:16 - private arraylist you'll notice the
01:17 - capitalization here because it is an
01:19 - object type capital a capital l
01:22 - and then triangular brackets our first
01:24 - time dealing with triangular
01:26 - brackets inside there we declare the
01:28 - type of object that we're going to store
01:29 - in this list
01:30 - now unlike lists in python where you can
01:33 - store
01:34 - objects of different types in the same
01:36 - list array lists make you declare the
01:38 - type of variable that can be in that
01:39 - list
01:40 - and that's it only one type per list all
01:43 - right so this one's going to be filled
01:44 - with strings
01:45 - here's my variable name i called it
01:46 - fruits equals
01:48 - new so we're calling on a constructor
01:50 - here a new arraylist object
01:52 - full of strings double brackets for the
01:55 - constructor and then semicolon now
01:57 - you'll notice
01:58 - no size so with arrays we had to hard
02:01 - code that size when we
02:02 - declared it and initialized it don't
02:04 - have to do that with arraylist so it can
02:06 - be empty
02:07 - and then we can add to it oh that's
02:10 - going to be exciting
02:11 - all right all right so let's look at how
02:13 - we can do this so in my main i'm just
02:14 - going to call my constructor
02:16 - so arraylist practice my object's new
02:18 - arraylist practice awesome
02:20 - and all my constructor is going to do is
02:22 - it's going to call this
02:23 - method filaret so let's see what's
02:25 - happening in fill array
02:26 - then we'll go from there so here's
02:27 - filaret all i'm doing is calling on the
02:30 - name of my
02:31 - list which in this case is fruits and
02:32 - it's a field variable it's a class
02:34 - variable
02:34 - so i can access it in my constructor dot
02:37 - add
02:38 - that's one of the many methods that come
02:39 - with array lists when you look at the
02:41 - autofill menu when you do fruits dot you
02:43 - can see that there's a lot of methods
02:45 - there
02:45 - you can go look at the arraylist
02:46 - documentation to see how many methods
02:48 - there are and what you can do with them
02:50 - so the dot add is just going to add
02:52 - something onto the end of the list
02:53 - okay and what is it going to add well
02:55 - it's going to add what my literal string
02:57 - is now this could be a variable string
02:58 - as well
02:59 - this could also be like new string
03:02 - new string banana that's also fine
03:06 - create a new temporary object and then
03:08 - pass it directly to the ad
03:10 - however you want to do that it's going
03:11 - to function the same way so i'm just
03:12 - using the add to put these
03:13 - in here in order so first to last so the
03:16 - last one this will be banana
03:18 - first one on the list is banana all
03:20 - right so let's say i want to call this
03:23 - so i want to let's say i want to print
03:25 - this so the first thing we should try is
03:26 - just
03:27 - printing it so like if i did a
03:30 - system.out.printline
03:32 - my
03:36 - my obj dot fruits
03:40 - let's just see what happens when we try
03:41 - to print that so
03:43 - you'll see it actually printed it
03:46 - do you know why because it's an object
03:49 - class
03:50 - and it's got a tostring method
03:53 - which means it's actually going to make
03:55 - sense of the arraylist without having to
03:57 - manually loop through to print it
03:59 - it's beautiful once you've worked with
04:01 - arrays for a little while
04:03 - you really can enjoy arraylists very
04:05 - quickly that's one thing there let's see
04:07 - what other methods i've got written
04:08 - so i've got one to remove all that takes
04:11 - a string
04:12 - and a list it's going to remove all
04:14 - elements of that string
04:16 - from the list all right so let's say i
04:19 - wanted to remove all the bananas
04:21 - from this list so let's do print it
04:25 - and then let's do my obs dot remove
04:28 - all and we're going to remove banana
04:32 - from my obs
04:35 - dot fruits from that particular
04:39 - list now i could always have that list
04:41 - called directly as a class variable
04:43 - inside the function
04:44 - but it's good for us to practice passing
04:45 - things as parameters to methods
04:47 - it's very normal and then we're going to
04:49 - print it again
04:54 - here we go i'm just gonna print it out
04:59 - all right all right a bunch of bananas
05:01 - in there and that's gonna print it again
05:02 - and there's no banana so it successfully
05:05 - removed them now how did it do that
05:10 - we're looping we're looping through the
05:12 - array list
05:13 - starting from zero oh we got a new
05:14 - method again dot size and notice it's a
05:16 - method it's got the double parentheses
05:18 - so arrays we'd use dot length with no
05:20 - parentheses
05:21 - now we're using arraylist with
05:23 - parentheses and it's a size not a length
05:26 - very common mistake usually ap colors
05:28 - board won't penalize you if you use size
05:30 - instead of length or length instead of
05:31 - size
05:32 - but it's good practice especially for
05:33 - coding you're going to need to get it
05:34 - right
05:36 - and then if s dot equals ignore case
05:39 - array dot get i so s remember is a
05:41 - string i brought in
05:43 - if it's equal to the dot get known as
05:45 - get now we're going and grabbing
05:47 - something
05:47 - at an index this would have been box
05:49 - notation with arrays
05:51 - now we're using dot get to go grab it so
05:53 - we grab it
05:54 - now we've got it okay so then we do the
05:56 - comparison between the strings
05:58 - and we're going to now do a remove so go
06:00 - to index i
06:01 - and remove that from the list bumping
06:03 - everything back down to the position
06:05 - so that great little functionality here
06:07 - with removes and adds and gets
06:09 - awesome and then i do this silly i minus
06:11 - minus now i wonder why i did this
06:14 - oh that's right because it's dynamically
06:17 - sized
06:18 - list so what happens when i remove it
06:20 - let's say i was looping through 10
06:22 - items so when i first got to my for loop
06:25 - array.size was 10.
06:26 - okay starting with zero going to nine
06:29 - that's awesome
06:30 - as soon as i call this remove my array
06:32 - size is now nine which means when it
06:34 - comes back up to rerun the loop
06:36 - it's now only going from zero to eight
06:38 - well what is gonna happen is as soon as
06:40 - i remove that item
06:41 - my index i has not changed but it's now
06:44 - pointing at a different
06:45 - value so what's gonna happen is when it
06:47 - increments i plus plus
06:48 - that value will have gotten skipped so
06:51 - what i'm doing is when i remove the item
06:52 - from the list
06:53 - i'm decrementing i by one to make sure i
06:57 - don't
06:57 - skip over the new thing that's in the
07:00 - box
07:00 - where the value i removed is is pointing
07:04 - right because that box used to have a
07:05 - banana in it
07:07 - but now it has whatever came after
07:08 - banana in it so if i just iterate i will
07:10 - have skipped it
07:11 - by doing an i minus minus i go back so
07:13 - that i'll actually look in that box
07:15 - again to see that it has a new value in
07:17 - it
07:17 - so that's really important and really
07:19 - key so i also have a display arraylist
07:23 - this is just lubing to show it now i
07:25 - obviously have it here with
07:26 - just using the tostring but there's no
07:28 - reason we can't also
07:31 - write our own right so i can do my own
07:36 - and i have mine doing it vertically
07:39 - right so you can see the difference
07:40 - between mine and the two string
07:43 - okay so how am i doing that well i think
07:45 - i did it with a
07:46 - for each loop for each string
07:49 - called e contained in the array
07:54 - which is the arraylist object that's
07:56 - been passed to my method
07:59 - print out that element with a new line
08:01 - at the end
08:02 - so this is just a really quick for each
08:04 - loop now you can do some funky stuff and
08:06 - for each loops be very careful
08:08 - when you're inside of a for each loop
08:10 - because you don't have access to the
08:11 - index that you're at so they're really
08:14 - helpful
08:15 - to use for each loops with arraylists
08:17 - for all kinds of purposes
08:18 - but typically if we want to do any
08:19 - removing or any manipulation like that
08:22 - we want to make sure that we're in a
08:23 - standard for loop so we have control
08:25 - over the index
08:27 - and then i have a display arraylist
08:29 - backwards so this is just going to
08:31 - run through from the top down so there's
08:34 - a couple ways to do this you could use a
08:36 - for loop
08:36 - and do the index i size minus one and
08:39 - then go down
08:40 - but we can also call this
08:41 - collections.reverse
08:43 - so an arraylist is part of a collections
08:45 - class and we talk about inheritance
08:46 - later
08:47 - you can start to see a little bit of how
08:48 - that works but the
08:50 - collections class is like above the
08:53 - arraylist class in the hierarchy
08:54 - so you can call collections.reverse and
08:57 - pass it the arraylist
08:58 - and what it's going to do is it's going
09:00 - to reverse the values
09:01 - in that list and then i just do a 4h to
09:04 - print them
09:05 - and then i just reverse it again so it's
09:06 - back to its original state
09:08 - so this is actually modifying that
09:11 - temporary variable
09:12 - so it's important to note that that is
09:14 - how that's working
09:15 - okay now let's just run that real quick
09:18 - with the with the reversal
09:20 - so we'll run it backwards okay and we'll
09:23 - run that
09:25 - so here it is printed out backwards so
09:27 - let's just do a little bit tweaking here
09:28 - we're going to
09:29 - comment out a few things here what i
09:31 - want to do is this i'm going to print it
09:33 - backwards
09:34 - and then i'm going to print it forwards
09:36 - but in between the two
09:37 - i'm not going to re-reverse the list now
09:40 - the reason i'm doing this let's think
09:42 - for a second
09:43 - i'm passing a variable to this method
09:46 - and then the method
09:47 - is reversing that temporary local
09:49 - variable inside of my method
09:51 - and then printing and then i'm exiting
09:53 - the method
09:54 - so if we're dealing with something that
09:56 - is not passed by reference
09:58 - then the second print
10:01 - should be totally normal the string the
10:05 - list should not have been reversed still
10:07 - but if we're dealing with pass by
10:08 - reference like we were with a raise
10:10 - then the list is still going to be
10:12 - reversed so let's run this and see what
10:14 - happens
10:16 - so i get my banana down to my banana
10:21 - and then banana banana
10:25 - the list is still reversed okay
10:28 - maybe we can make this a little simpler
10:29 - if we were using numbers or something
10:31 - like that in our fill array
10:33 - i'm just going to replace my fill array
10:35 - with like the words one two three four
10:37 - five
10:38 - and then we'll come back and we'll look
10:39 - at how it works then
10:44 - okay so my array should now be filled
10:45 - with one two three four five
10:47 - so if i print it before i call the
10:50 - reversal
10:53 - and then re print the reversal and then
10:54 - print it again maybe i'll just stick
10:58 - some dashes in the middle
11:02 - so i got one to three four five then in
11:04 - reverse five four three two one
11:06 - and then still reverse five four three
11:07 - two one which means these array lists
11:09 - are being passed by reference
11:11 - when they're getting passed to it
11:13 - because the fruits variable is getting
11:15 - passed
11:16 - as a variable to the method the method
11:18 - is only modifying the local variable
11:20 - name that it has
11:21 - and yet the original variable fruits is
11:24 - still being considered
11:25 - to be reversed so just be cautious with
11:27 - that when we're dealing with arraylists
11:36 - so just to iterate that one last time i
11:38 - just made a few modifications here
11:40 - so i created a little method called
11:42 - messer which takes an arraylist called
11:44 - al and all it does is it does a dot out
11:46 - of six
11:47 - so then if i fill my array with one to
11:50 - three for five
11:51 - i print it i call messer which should
11:54 - add that but remember passing that
11:57 - to there so typical variables are
12:00 - actually going to only modify the local
12:01 - variable inside
12:02 - of the method but this is going to
12:04 - actually add
12:05 - to the original fruits array because you
12:08 - can see when we print fruits again at
12:10 - the end
12:12 - the six is there all right so that's
12:14 - your intro to arraylists good luck with
12:16 - it
12:16 - and we'll see you back soon

Cleaned transcript:

hello humans this is a b computer science a and we are looking at array lists all right so we're going to jump right into eclipse here there we are and we're going to go through some arraylist basics so i want to start with the most important part of arraylist which is the declaration and initialization because when we start dealing with a new variable type we need to know how to declare it and how to initialize it now arraylists are an object type similar to strings so there's an arraylist class in java that's going to be at the core of how this variable functions versus something like a primitive type like an int because it's an object type it's actually an object type that can store multiple objects within it so like a list of other objects now we can throw primitives into it so we can throw ins in it but what it really does is it puts integer objects in it which is integer is a wrapper class in java which is like capital i integer and there's like a capital d double and they basically just take a primitive type like an int and convert it into an object format so that it can be stored inside of an arraylist so we can do that we can put integers and doubles and stuff in there but they'll be treated like objects when they're in the arraylist so that's an important distinction to make let's look at notation so i have a private arraylist you'll notice the capitalization here because it is an object type capital a capital l and then triangular brackets our first time dealing with triangular brackets inside there we declare the type of object that we're going to store in this list now unlike lists in python where you can store objects of different types in the same list array lists make you declare the type of variable that can be in that list and that's it only one type per list all right so this one's going to be filled with strings here's my variable name i called it fruits equals new so we're calling on a constructor here a new arraylist object full of strings double brackets for the constructor and then semicolon now you'll notice no size so with arrays we had to hard code that size when we declared it and initialized it don't have to do that with arraylist so it can be empty and then we can add to it oh that's going to be exciting all right all right so let's look at how we can do this so in my main i'm just going to call my constructor so arraylist practice my object's new arraylist practice awesome and all my constructor is going to do is it's going to call this method filaret so let's see what's happening in fill array then we'll go from there so here's filaret all i'm doing is calling on the name of my list which in this case is fruits and it's a field variable it's a class variable so i can access it in my constructor dot add that's one of the many methods that come with array lists when you look at the autofill menu when you do fruits dot you can see that there's a lot of methods there you can go look at the arraylist documentation to see how many methods there are and what you can do with them so the dot add is just going to add something onto the end of the list okay and what is it going to add well it's going to add what my literal string is now this could be a variable string as well this could also be like new string new string banana that's also fine create a new temporary object and then pass it directly to the ad however you want to do that it's going to function the same way so i'm just using the add to put these in here in order so first to last so the last one this will be banana first one on the list is banana all right so let's say i want to call this so i want to let's say i want to print this so the first thing we should try is just printing it so like if i did a system.out.printline my my obj dot fruits let's just see what happens when we try to print that so you'll see it actually printed it do you know why because it's an object class and it's got a tostring method which means it's actually going to make sense of the arraylist without having to manually loop through to print it it's beautiful once you've worked with arrays for a little while you really can enjoy arraylists very quickly that's one thing there let's see what other methods i've got written so i've got one to remove all that takes a string and a list it's going to remove all elements of that string from the list all right so let's say i wanted to remove all the bananas from this list so let's do print it and then let's do my obs dot remove all and we're going to remove banana from my obs dot fruits from that particular list now i could always have that list called directly as a class variable inside the function but it's good for us to practice passing things as parameters to methods it's very normal and then we're going to print it again here we go i'm just gonna print it out all right all right a bunch of bananas in there and that's gonna print it again and there's no banana so it successfully removed them now how did it do that we're looping we're looping through the array list starting from zero oh we got a new method again dot size and notice it's a method it's got the double parentheses so arrays we'd use dot length with no parentheses now we're using arraylist with parentheses and it's a size not a length very common mistake usually ap colors board won't penalize you if you use size instead of length or length instead of size but it's good practice especially for coding you're going to need to get it right and then if s dot equals ignore case array dot get i so s remember is a string i brought in if it's equal to the dot get known as get now we're going and grabbing something at an index this would have been box notation with arrays now we're using dot get to go grab it so we grab it now we've got it okay so then we do the comparison between the strings and we're going to now do a remove so go to index i and remove that from the list bumping everything back down to the position so that great little functionality here with removes and adds and gets awesome and then i do this silly i minus minus now i wonder why i did this oh that's right because it's dynamically sized list so what happens when i remove it let's say i was looping through 10 items so when i first got to my for loop array.size was 10. okay starting with zero going to nine that's awesome as soon as i call this remove my array size is now nine which means when it comes back up to rerun the loop it's now only going from zero to eight well what is gonna happen is as soon as i remove that item my index i has not changed but it's now pointing at a different value so what's gonna happen is when it increments i plus plus that value will have gotten skipped so what i'm doing is when i remove the item from the list i'm decrementing i by one to make sure i don't skip over the new thing that's in the box where the value i removed is is pointing right because that box used to have a banana in it but now it has whatever came after banana in it so if i just iterate i will have skipped it by doing an i minus minus i go back so that i'll actually look in that box again to see that it has a new value in it so that's really important and really key so i also have a display arraylist this is just lubing to show it now i obviously have it here with just using the tostring but there's no reason we can't also write our own right so i can do my own and i have mine doing it vertically right so you can see the difference between mine and the two string okay so how am i doing that well i think i did it with a for each loop for each string called e contained in the array which is the arraylist object that's been passed to my method print out that element with a new line at the end so this is just a really quick for each loop now you can do some funky stuff and for each loops be very careful when you're inside of a for each loop because you don't have access to the index that you're at so they're really helpful to use for each loops with arraylists for all kinds of purposes but typically if we want to do any removing or any manipulation like that we want to make sure that we're in a standard for loop so we have control over the index and then i have a display arraylist backwards so this is just going to run through from the top down so there's a couple ways to do this you could use a for loop and do the index i size minus one and then go down but we can also call this collections.reverse so an arraylist is part of a collections class and we talk about inheritance later you can start to see a little bit of how that works but the collections class is like above the arraylist class in the hierarchy so you can call collections.reverse and pass it the arraylist and what it's going to do is it's going to reverse the values in that list and then i just do a 4h to print them and then i just reverse it again so it's back to its original state so this is actually modifying that temporary variable so it's important to note that that is how that's working okay now let's just run that real quick with the with the reversal so we'll run it backwards okay and we'll run that so here it is printed out backwards so let's just do a little bit tweaking here we're going to comment out a few things here what i want to do is this i'm going to print it backwards and then i'm going to print it forwards but in between the two i'm not going to rereverse the list now the reason i'm doing this let's think for a second i'm passing a variable to this method and then the method is reversing that temporary local variable inside of my method and then printing and then i'm exiting the method so if we're dealing with something that is not passed by reference then the second print should be totally normal the string the list should not have been reversed still but if we're dealing with pass by reference like we were with a raise then the list is still going to be reversed so let's run this and see what happens so i get my banana down to my banana and then banana banana the list is still reversed okay maybe we can make this a little simpler if we were using numbers or something like that in our fill array i'm just going to replace my fill array with like the words one two three four five and then we'll come back and we'll look at how it works then okay so my array should now be filled with one two three four five so if i print it before i call the reversal and then re print the reversal and then print it again maybe i'll just stick some dashes in the middle so i got one to three four five then in reverse five four three two one and then still reverse five four three two one which means these array lists are being passed by reference when they're getting passed to it because the fruits variable is getting passed as a variable to the method the method is only modifying the local variable name that it has and yet the original variable fruits is still being considered to be reversed so just be cautious with that when we're dealing with arraylists so just to iterate that one last time i just made a few modifications here so i created a little method called messer which takes an arraylist called al and all it does is it does a dot out of six so then if i fill my array with one to three for five i print it i call messer which should add that but remember passing that to there so typical variables are actually going to only modify the local variable inside of the method but this is going to actually add to the original fruits array because you can see when we print fruits again at the end the six is there all right so that's your intro to arraylists good luck with it and we'll see you back soon
