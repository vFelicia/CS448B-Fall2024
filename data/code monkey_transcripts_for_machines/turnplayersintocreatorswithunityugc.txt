hello and welcome I'm your code monkey and here let's learn how to use a very exciting new Unity tool called user generated content basically this lets you add modding or any kind of user content onto your game nowadays games are more and more driven by user content people love making things and watching other people play what they create and this tool makes adding that feature to your game super easy it's up to you as a developer to decide what content users can build for your game it can be new levels new weapons perhaps new NPCs or quests it can literally be anything you want user generated content is just data and you as developer can decide what that data represents then for your players as creators they can create mods and upload them and as just players they can browse all the mods that creators have made and install the ones they want the API is really easy to use if you've used any of the other Unity gaming Services apis you won't find this very familiar the dashboard makes it really easy for you as a developer to manage all of the user generated content there's a Creator Center webpage where creators can manage off their own mods it also has moderation tools so you can make some users into moderators to keep track of what content your users are generating for creating mods you can either create some ingame tools yourself and have the players build and upload mods from directly inside the game alternatively they can upload them through the Creator Center webpage and coming soon is a really exciting ugc Unity Bridge which lets players use Unity itself in order to create and upload mods directly from Unity oh and by the way all this this is also engine agnostic so if you're using a real or Godot or a custom engine you can still use this tool in this first video I will teach you how to use the API from scratch just uploading and downloading some basic data and seeing all the other things the API can do I will also show you the dashboard Creator Center and moderate tools and then in a future video I will showcase a fully complete download that I'm working on using my kitchen chaos game where players can mod it by adding custom recipes and custom objects so watch this video to learn the basics and stay tuned for that one to see a practical use case also finally in the end of this video I'll also address how this young compare shares with Steam Workshop how this tune was different and what it can do better this video is sponsored by unity and this tool the user generated content this is now in open Beta check the link description to sign up and get started also YouTube videos cannot be updated so go check the pin comment where I won't be updating it with any news like for example when ugc bridge is out or when the student is out of beta alright so let's begin by looking at the absolute Basics just learning how to create some content upload it and then download it as a player first thing we need to do is link our ENT project so that's the same thing as using any other ugs tools so inside Unity on the top left corner up here make sure you are signed in if you see a button saying sign in then click on it and sign in if you have issues then close Unity open ENT Hub make sure you are signed in there before opening the project so sign in then go into edit project settings over here go into the services Tab and then we can either create a brand new Unity project ID or we can use an existing one now in my case I have already created the project so I'm going to be using this one and just link the project ID and if there is project was linked successfully okay great now we can go into the NT dashboard and sign in now here on the left side let's go under live Ops now here up top make sure you select the same project then on the left side let's go into live Ops then over here let's scroll down to find user generated content and now let's go ahead and enable ugc all right that sense so now let's follow this setup guide first thing we need is to install the ugc package so for this one let's open up the package manager and right now at the time of this recording since this tool is in open Beta the package is actually marked as preview prerelease so if you don't see it you need to enable preview packages so on the top right corner go into the three dots and go into project settings and over here make sure you enable prerelease packages and now you should be able to see the user generated content package alternatively you can just install it through the name so click on the plus icon add package by name and use this name com.unity.services.ugc okay so go ahead and install this package now here I am in a completely empty scene let's create a nice script to test it so I'm going to create a brand new csharp script call this test Unity ugc let's make a game object with the same name keep things nice and clean let's reset the transform attach the script and open it okay so now here if you've already used any of the other Unity gaming service systems then this API won't look extremely familiar which is awesome once you know how one of their tools works you will easily learn how to use all the others so if you've already seen my video on using Lobby or relay or Matchmaker or game server hosting or if you've seen my free multiplayer course then the code we're going to write here is going to look extremely familiar personally I really love how Unity made all these tools follow the same pattern it makes them all super easy to use if you know one you know them all so just like in all those other tools We Begin by initializing these services and authenticating the user so let's begin by making a simple function private avoid let's call it init and sign in then over here we want to initialize ENT services so let's go inside UNT Services which exists inside the namespace unity.services.com and let's call the function initialize async now this is an async com which is available so let's await this in order to be able to use a weight we need to mark this function as async now if you don't know about async away then it's pretty simple basically this lets you run your code asynchronously meaning that when the code comes here and runs this function it is basically going to contact Unity servers to initialize these services and that will not freeze the game so the execution won't contact the servers and then continue running the rest of it everything will keep running until it receives a response from the server and then it continues running this function you don't need to know the specifics about a weight in the sync you just need to know that on these async function calls you should add the away keyword and if you wanted that then you must Mark the function as async okay so with this we are initializing the services afterwards we need to log in so let's authenticate let's use the authentication the authentication Service inside unity.services.authentication and let's access the instance and call the function sign in we've got all kinds of sign in functions and normally for most CGS tools I just sign in anonymously it is super quick super simple and for regular players that works great they can easily download any user generated content but in order for your creators to be able to manage their own mods on the web portal they need to have a persistent auth method so they can log in in the web portal using the same auth they used in game if not if they are only using Anonymous sign in then they can really only manage their created mods through the game depending on the game that might or might not be a problem but if you want to make your user account a bit more robust and you should probably be using one of these persistent auth methods I'm going to use that in a little bit but for now just for a quick test let's do it just with an anonymous account okay so we sign in again let's await this call and afterwards we can access the authentication Service the instance and get the player ID so let's just do a debug download say signed in and print the player ID okay great no let's just call this function just for testing let's make a part of it away can only call this okay let's do a quick test to see if we are signing in and if there's a login we are indeed signed in okay great so now that we are signed in we want to create some content and for Content like I said this can be whatever you want it can be unlevel it can be a weapon it can be a quest or an entire game mode content is really just data and that data can be anything it's up to you as a developer to decide that so here for a simple test let's just use the most basic data just some text here in my project files I've got a super simple text file it literally is just a DOT text file and inside we can see it contains just some basic text okay so let's use this as our content let's make a function to that so private world and let's call it create content then here first thing we want is to be able to read that file and the way that is shown in documentation is to use file which is inside using system.io so we're going to file and then we call open this one takes a path so I'm going to find the path to that file so that's using application.datapath and then in my case I put it inside a folder the folder is called test ugc and then I called it my mod.text okay so it's a file and for this one let's open it as open let's give it file access to read and file share also for reading okay so this will open the file and this will return of type file stream for the content file stream and also One external important thing when working with file streams you need to make sure to dispose of them so you don't end up with a member link so you can either dispose them manually so you can do whatever you want and then call this pose so that's one way or you can just add using keyword and just like this as soon as this function ends and this variable is disposive it will automatically dispose the memory but this is very important make sure you don't forget using keyword otherwise you're going to end up with memory leaks okay so with this we have our file stream and now for creating and uploading some content we access the ugc service so this one inside Unity Dot services.ugc we access the static instance and we call the function create contents async this will take some parameters of this type so let's create of type create content args we need to give it a name so let's give it test content then let's give it a description so test description and finally the Stream So This is the file stream that contains the content so let's pass in the content file stream and once again this is an async call so let's await in order to awake let's mark this function as async okay so this is going to create and upload our content then let you see what we did with unlock just make sure that it worked so created content and then let's print out the content which is going to be returned from here so this returns of type content call it content and let's print out the content dot ID and finally just like with all the other UNT gaming Services tools let's make sure to wrap this in a try catch to catch any exceptions so let's just do a try run our code then we've got a catch let's catch of type ugc exception and if something bad happens let you see what the evil dialog on the error and let's put this one over here okay great so this really only takes to create a mod we create a file stream to read our data and then we simply upload it to ugc now for testing let's just call this function from somewhere so for testing let's do a simple and prep void update and over here just as for a simple input so let's go get key down let's say the T key for testing and let's call create content okay so with this let's test so here we are looking at the console we can see that we've signed in okay great now if I press the testing key and if you look at that it did work it created content and generate this new ID now back in the ugc dashboard we can go over here into the content Tab and up here we do see our test content so yep everything worked all right awesome now over here we can view the content so I can click on it to go inside now here one note if you click on the content you see this error then go into the service settings then on the left side go into the web portal setup and over here for site visibility and let's swap this and make it enabled and save and that's it saved so now back to the content and you should be able to see this here we can view the content we can inspect to see the player ID of the player who created it we can read the name description and see all kinds of stats also for some reason it doesn't show here the ID for this content it shows the environment where it was created and the version ID but it does not show the content ID although if you want to find that you can actually unlock in url so in the URL at the very end you won't find Yep this is the content ID then here we even have a download button so we can download the file and note how this does not have a DOT text extension like I said content can be whatever you want what we are downloading here is really just some bytes so this could be an entire level or a game mode or a brand new weapon or in our case we know we just uploaded some basic text so if I just opened this one with notepad yep there's our mod text alright awesome then optionally when creating content we can include some more data so when we are creating the create content args up here at the end we can add the currently braces and now inside we've got all kinds of things we can modify for example we can set as public and set this to go public right away then we can also include a thumbnail this one takes a stream type so the way you have the thumbnail is pretty simple we just use exactly the same thing so we do another file stream let's call this one the thumbnail file stream in my case here in the project files of the same folder I've got the mod and I've got a simple Gamepad icon so I'm just going to use this so gamepad.png once again open it for reading okay so that's the thumbnail file stream and let's pass in as the thumbnail then you can also include a list of tags now importantly this list is a list of string however it is not a list of text for the tag name if we go back to dashboard on the left side we go down into service settings over here we've got labels these are the tags I'm going to cover that in more detail in a little bit but just on the names that you see here these are not the names that you use in that parameter inside each of these tags has an actual unique ID and that's the one that you should use but again I'm going to cover that in a little bit then you can also add some custom ID for your content so again this is up to you this is a basic string it's up to you to Define what it means and same thing for some metadata but for now let's just upload it just like this let's go on with super test content my new test description and let's upload it set following to true and give it the thumbnail okay so let's run this and see here we are signed in Press On T and if there you go we create the content it uploaded and generated a brand new ID and back here on dashboard if we go into content and if there it is we see our brand new super task content we can see by default it is public and it does have a nice thumbnail so with this you can see how easy it is to create and upload some user generated content literally just takes one line of code and it's done now let's see the other side how to download some user generated content for that first we actually need to find it so let's make a function for that a private void call it find contents and over here we can go inside the ugc service and we can call the function get contents async it's this one with plural not this one without the S so it's this one in plural and basically this will return a bunch of contents it takes an optional parameter of this type get contents args so you can construct it to inspect it here we see how we can add some filters for searching we can include the total number of results we can limit how many results you get we can give it an offset search for something specific or only get certain tags so we can do all kinds of searching on this one function or alternatively we can actually remove this optional component and this won't simply return all the results now also note the return value on this function it returns of type page results so let's grab this so page results it's going to be of type content and again this was in a weight of Hong Kong so let's mark this as async okay now note just by the type here this is Page result meaning this does not necessarily contain all the results now if you have thousands of mods you really don't want to get them all at once so that is why the result is paginated so if you wanted to get them all and you had thousands you would have to make multiple accounts to this and pass in a different offset but in our case we just have one so this is fine let's just cycle through all these results so just do a simple for each content inside content go inside the page results and grab the results which is a list of content so you do this and let's just do a simple debug download let's just print out the content.id then let's also print out the content.name and let's also print out the content.description and as always let's wrap this inside a nice try catch catch of type BGC exception okay just like this okay so let's see if this finds our content so up here on our testing key and let's not create let's just find contents okay let's test so here we are in press and now this actually gives an error that the project is hidden to solve that let's go back to the dashboard and let's go into the web portal setup and over here under site visibility let's swap it from hidden and make it enabled so back in here let's press the testing key and if there you go it did find our content so here it is with the names description and the content ID okay so that's great we found it however this is just fine the content and returning the ID it does not download it just yet for that let's make another function so let's go here a private void let's call it download content and now in here we use ugc service the instance and let's call download content data async however over here we can see this requires a Content object now technically we have a Content object up here when finding contents so we could download it directly after finding it but if we just want to download some content actually what we need in order to generate some content is just get the content ID so here in the console I still have the content ID that we search for so for example let's grab the unless one over here so here's the ID let's just copy this and over here let's just find a string for the count ID and pass in the string okay so with this ID we can take this string Content ID and convert it into an actual content for that let's just go into the EGC service the instance and let's call get content so not contents not the power one so let's go into this one this one takes get contact hours so let's create one and over here we can input the content ID so let's pass it down this one is once again it's available and it's going to return of type content so let's put content content equals and let's await this and as always if we wait let's async Okay so with that we have the content and over here we can use that so let's hit the content then for download content let's put it on true we want to download it and the thumbnail in this case we don't need it we just want to download the content so let's put it on phones and just like it says here the download that will be put inside the content parameter so this column returns nothing so let's just put a simpler weight okay so this is actually going to download the data and now we can access that data by going inside content and let's access the downloaded content this one as you can see is a a byte array now in our simple test all we're doing is just uploading some text so let's just convert these bytes back into text and how we can do that is we have our byte array we can go inside system.txt.encoding let's use utf8 and let's call get string and this one basically converts an array of bytes into a string so let's convert this rare bytes into our string so string for our mod text and then let's just do a simple download so our mod text and then we have the mod text now as always when working with gdgc let's make sure that everything is nice and safe so let's put this inside a try catch so everything inside a try and let's catch for a ugc service exception and just do a debug download okay so that's it so we've got the content ID string we use that we call get content async in order to convert it into a content and then we call download content data async in order to actually download the bytes and then we do whatever we want with those bytes in this case over here we are converting into a string and doing a log all right right so let's go up here and simply run this function send so let's comment out this one and run this one and let's test okay so here we are and press a button and if there you go it takes a little bit for the download but here is the mod text this is my mod contents which is exactly what we uploaded alright awesome okay so with that here we can now download any content now one concept you might be familiar with in terms of modding tools is subscribing to something that's actually an optional step it's not mandatory as you can see you can download something without being subscribed but if the player subscribes then it's easier to keep track of what content the player wants to keep downloaded and updating now subscribing is very easy let's just make a private void subscribe content and now here we just go inside the ugc service and let's call create subscription async this and as you can see it takes a Content ID so let's use the same one that we had so let's use this one and that's running it this one will subscribe to that content so let's async await this as always put the try catch okay so this is going to create a subscription then we can make another function to cycle through everything that the player is subscribed to so let's make a proud void download subscribe content and once again let's go inside the ugc service and now first we need to get the subscription so get subscriptions async this one takes some optional parameters but so far we want all of them so let's just get all of them let's await and we can see that this is actually going to return once again page results of type subscription so let's grab that page results of type subscription all right so we have this then let's just do a for each of type subscription in the pageresults.results so we cycle through all of them and we have all of our subscriptions and inside the subscription we actually have access to the content and inside the content we have access to the ID so over here we can do literally the same thing with it up here for downloading some content so let's just copy the exact same code so we go and for the content we get it with this ID we grab the content downloaded and do whatever we want with it so once again let's just put this inside a try catch and now for testing let's run once just to subscribe and then one suggest to download so let's go up here and instead of downloading directly let's just subscribe to the content okay let's test so here we are and press a button any of it subscribed we forgot to add a debug.log but yep it did subscribe so now let's run the other function so comment this one and let's run download the subscribed content so here we are and press a button and if there you go it did find all these subscriptions which was just one mod and it did download the mod contents alright great next like I mentioned a while ago you can include tags in the content but like I said that list of string was not the tag name it's the tag ID and to get the tag list sectionally super simple so let's do a private void get tag list and we go inside the ugc service the instance and let's just call get tags async this is going to return in list of tags so in list of tag for the tag list and let's await this so this returns only to tag let's just do a for each and let's just see we debug download on the tag let's print out the tag name and then the tag ID okay just like this and I'm here in the dashboard on the left side if we go under service settings over here we've got labels these are the actual tags we can click on the button in order to edit them and right now this zone is in beta so there's a bunch of testing tags over here let's add a manual one just for testing so let's come with testing tag and let's press enter and there you go the tag was indeed added so now back in the code let's just run this function for testing so comment this one and run this one okay and press our button and you look at that all of the various tags and again note how the default tags these all have some strange IDs but we can see down here the one that we had properly this one has a proper ID so here we've got the name testing tag and then a really nice unique ID so this is how you would get the tags get the tag name and the tag ID and then back in our function for creating the content over here we've got the various options and we could add the tags ID we could do a new list and for example we could copy this tag let's paste this one like this and let's create another piece of content so let's call it test tag content okay let's run this so like this let's test here create and there you go create the content and here in the dashboard let's refresh yep there's the content and this won't create our content with this tag okay so here we already covered lots of things we covered how to create content so how to upload how to find contents how to download it subscribe and download subscriber content and get the tag list now there's a bunch more stuff we can do with the API here are the docs here's the quick start guide which has all the things we've already done and then over here all the various things you can do so as you can see we can create content we can update content so that's useful we can delete update just the metadata then do a search for Content get the player's content page through all the results search for a bunch of content and over here is also a really useful helper function here's a function which takes some content and simply converts it into an actual Sprite so what it does is really just creates a texture 2D just an empty texture 3D and uses the unload image function in order to convert the bytes into an actual texture and then just call sprite.create in order to create a Sprite based on that sure so this super useful with this you either have a texture or a Sprite Which you can then use to easily display in the UI or anything then down here more things related to subscribing and unsubscribing and even rating content and then some representations these are essentially different versions of your content like for example you make a mod that has a certain data when used on PC but different data when used on PlayStation that would be a different representation and finally down here A bunch of moderation API calls this still has a very robust set of moderation actions you can take so using all of these API endpoints you can either approve content you can report it reject it and so on so you've got all this stuff you can do through the package API and alternatively there is also a web service API using all of these various API endpoints using this you can build pretty much anything so you can either use Unity Zone Creator Center tool or you can just implement this directly onto your own website now let's just inspect the rest of the dashboard so if we go on to the overview over here we can see a bunch of SATs we can see how much content we have how many downloads subscriptions reports the creators and so on then we can obviously view all the various content next is on the moderation tab over here we can view some moderation settings so we can set a report threshold set it to either flexible or strict we can assign a bunch of specific moderators so we can click on ADD moderate then we just need to assign the player ID then we've got a list of band players that we want to bend for some reason and then the moderate logs this is where you'd see how some moderator bans some content for some reason next is the service settings tab first up you can set it to use Unity CDN this means it won't be using unity's cloudcon delivery now if you don't know about it this is unity's content delivery Network it's randomly used in their addressable system for delivering content to your players like for example game updates or DLC I've got several lectures on my ultimate TNT overview course covering both addressables addressables remote and cloudcon delivery so if you want to learn more definitely check out the course then here like we saw so you can also add tags there are categories which is a sort of a different thing that is coming in the future and then here you've got IDs for the various authentication providers next we've got the web hooks so like I said this Zone can integrate with your own website in many ways with this you can easily set up some web hooks so for example you can set your website to receive some data when some content was created then using that perhaps you could connect to the Discord API and post some kind of message that something was created so you can really build on top of this and build anything you want on your own interface your own website your own anything and then of course we have the web portal setup you can set up some basic settings making it as visible and then click on preview however when you do you might see this there are no authentication providers so we need to assign this in order to actually use this Creator Center so this is like I said a while ago which is in order for this to work we need some kind of persistent signin method now like I said a while ago in order for this to work we need some kind of persistent signin method if we use the anonymous sign in to upload some content then we can't accident over here on the query Center since we don't know what the generated Anonymous user ID is so right now we can't log in here we need a nonanonymous method and the unity authentication package supports many persistent signin methods if you're making Android games you've got Google and Google play games if you're on iOS you've got apple and the apple game center and then if you're on PC you've got same Facebook or Oculus or you can even make it work with anything that implements the open ID standard so for example if you have some website for your game you can make it work with that login now you can use any of these as persistent signin methods also quick note since I recorded this video UNT player counts as Internet beta this is Unity Zone authentication solution which works on all platforms so this is another development option if you're working on PC if you're watching this in the future then check the pin comment for any updates in my case for demo I'm developing this on PC and I don't have an app ID for this tutorial so I can't use steam so I opted to test with the Facebook method now this actually took a ton of work to figure out how to use it there's no guide anywhere or rather Unity itself has a guide but it doesn't seem to work I've found lots of issues however after a much strong error I finally got it working I made a post over here on the forums that covered how I finally got it working basically the only way it works is by using what Facebook console device login then doing a bunch of things so if you want to see the actual implementation of how I did it then you can watch this post but like I said with regards to ugc it works with any of these methods so it doesn't have to be Facebook you can use any of these with that here I've got a function to authenticate with Facebook and here really I'm running yep it did work okay great now with this I can upload the same content that we saw a while ago and now it won't be linked with the Facebook account that is linked with this player ID so over here we're going to run the create content function which is going to create this call it persistent account content okay so let's see here we are signed in press the button to upload and there you go created the content okay great now the only thing I need is to go under service settings and over here make sure to input the Facebook client ID and now if we go into the web portal and we preview it yep here we've got a regular login with Facebook button and yep I've signed in and here is the creator Center and up here I do see my persistent account content over here I can view some stats so how many people are subscribing viewing rating reporting and downloading and so on then under content management I can see all the mods that I have uploaded and over here directly from the AI portal I can actually directly add some content so I can just drag the content over here give it a title description tags and so on so as you can see this website the Creator Center this one is extremely useful to be able to do so much without actually having to go in game and then next to the Creator Center over here is the moderation Center so this is where mother is will come in to see what assets work content has been flagged and decide what to do with it so this will importantly created Center and moderation Center are super useful and there is yet another even more useful thing that is coming soon in the future which is their web portal basically that's a browser for the players rather than the creators so they can browse for all the mods install them come and do all kinds of things some of these webbased cmosis are super awesome really makes it easy to handle and manage mods in your game there's also one more really awesome thing that is not available right now but won't be coming in the future which is the ugc bridge basically this is a plugin that you can add to the unity editor itself and with that you can create mods directly from inside unity and actually upload them so you don't need to add modding tools onto your game code you can just use Unity editor itself as the tool for building your mods that really enables so many more use cases so much more complexity you can add validation you can add all kinds of logic all kinds of requirements for how your mods should go and your users can use the entire power of unity to actually edit and build their mods so that way you can use all the power of DNT editor without having to build all that tooling yourself finally let's cover the pricing for this tool just like all the other ENT gaming Services units I think the pricing is actually extremely Fair we can scroll down to find user generated content alright so here it is and it's based on two things it's on storage and download so basically how much data you are storing in all of the user generated content and how much of it is being downloaded per month here we can see the free tier and then the pay tier now whether this free tier whether this is enough or not is really going to depend on what kind of mods you allow for your game for example if you allow players to create massive open worlds with tons and tons of AK textures then perhaps this amount might not be enough but in the vast majority of cases mod files are really tiny for example in my steam game Battle Royal Tycoon I added mod support for making custom VIPs and in this case each VIP is really just a character sprite and some text so in total as you can see only it's only just 36 kilobytes so that's a tiny amount meaning that with a free tier I can literally have millions of user generated VIPs some based on that I would say these three tiers do seem quite capable if you're a small scale in the dev like me then you probably will never have to spend one cent and of course speaking of the workshop let me address the question that many of you might have which is also the first question that I had when I first heard about istio which is how does it compare with the Steam Workshop and the first answer is simply that this tune is multiplatform meaning it works on every platform that UNT supports whereas Steam Workshop only works if your game is on scene with this serial you can use it with a game that you publish on it you can publish on mobile web consoles or literally anything so based on how easy this tool is to use you could definitely make some fun experiments on game jams and upload it to Edge the second answer is how the Sim Workshop hasn't really improved in the last decade whereas this tune was being built right now to support the needs of the games today so it has all those extra very useful features that we saw like the Creator Center and the upcoming web portal also the very robust moderation tools which are definitely a must nowadays it also has web hooks which can be triggered based on all kinds of conditions so using this you can easily extend it with whatever extra automated tools you have like for example posting something on your games Discord when someone uploads a new content and perhaps best of only is the ugc unity bridge by allowing players to build mods directly inside Unity itself it really enables all kinds of interesting use case it allows you to support extremely complex scenarios and add all kinds of validation and you can do all that directly inside Unity using the regular Unity workflow so the Sim Workshop is definitely indeed great and this tune builds upon that Foundation to help you take your game modding to the next level alright so that's unity's user generated content tool personally I really love it as soon as I heard about this you know the first time I was immediately interested I've implemented some kind of modding in pretty much all of my Sim games people love making things and it's one of those things that can really help you take your game to Next Level it can keep your game alive for many years after release so nowadays ugc is a really powerful thing and thanks to this tool it is actually surprisingly easy so check the link in the description to get started using user generated content also YouTube videos cannot be updated so go check the pin comment where I won't be updating it with any news like for example when ugc bridge is out or when this tune is out of beta and stay tuned for the upcoming video where I will showcase how I added some complex mods to my kitchen calcium alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time foreign