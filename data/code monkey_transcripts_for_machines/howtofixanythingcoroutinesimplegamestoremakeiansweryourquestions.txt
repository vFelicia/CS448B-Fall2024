hello and welcome i'm your code monkey and i've been making videos on this channel for over four years now i've covered tons and tons of topics and over 500 videos one thing that i always made sure to do since the very beginning is read through all the comments every day the first thing that i do when i wake up is i go through all the comments and answer any questions that i find usually i reply directly to that person but if at least one person has a question then chances are there's more people wondering the same thing so in this video let's check out some interesting questions that i saw that maybe you would also like to know the answer to if you find this format useful go ahead and hit the like button i've already answered probably over a thousand questions so if you find this helpful i've got many more questions and answers that i can highlight in future videos but before i get to any specific questions let me just answer a general comment that i see many times usually it's some form of i didn't understand anything or alternatively this doesn't work my answer to those is always the same you need to first identify and specify what it is exactly you don't understand i'm trying to help people but there's not much i can do someone just says that so what specifically didn't you understand how exactly does not work is that a certain object that is not spawning or maybe just not visible is the code not compelling is there some errors in the console basically without knowing exactly what doesn't work or what they didn't understand without that there's really not much i can do to help the only way to learn is to first identify what it is you're trying to learn so if somebody asks me how csharp events work i can point them to my video and elaborate further on that if someone tells me they have a null reference exception i can also tell them my method for finding the culprit using debug.log if an object isn't glowing i can point them to the blue checklist and so on but if someone just says it didn't work or i didn't understand anything then from that comment i really don't have enough information to be able to help maybe that person doesn't understand unt basics maybe they don't know what is a component or what is a game object maybe they don't know what is a c sharp delegate or was it variable maybe they understood the code but not the why so anyways my point to this is if you've ever watched a video and you thought to yourself you don't understand anything stop the video and take some time to identify exactly what it is you don't understand if you do that i guarantee you will learn much much quicker okay so with that general comment out of the way let's look at some specific questions and a while ago i made a video and posted it for youtube channel members and patreon patrons if you remember you can ask a question in that video check the link in the member page or click the button below to join the youtube membership so starting off with a question posted from that video here ken asks about a project taking longer and longer to open as you add more and more assets basically if you import a bunch of mega bundles that have thousands of assets if you do that then your project becomes huge and pretty difficult to work with my solution to that is one that i covered in another video basically you should only import the assets that you really need so what i do is i have a test project where i import tons of assets so that project is truly massive and takes a long time to open since it has thousands of assets then in that project i find the specific answer that i'm looking for and when i do i just select that asset i export just that asset along with any textures or materials that it requires i do just that make a simple ent package with that single asset and that is the only thing that i import into my main project so basically my main project ends up only containing the assets that i actually use instead of a massive library where 99 of it is never used just doing that very simple process really helps keep the project lean and fast so that's the process for keeping the project fast with regards to assets but over here ken also mentions a unity tool that can help with a similar issue the assembly definitions these are some simple messages you can create in your project which lets you separate your code into multiple assemblies meaning that when you go to compile your code unity only compiles the assemblies that need recompiling instead of recompiling your entire code base every time so on a massive project if you organize things correctly and each thing in its own assembly if you do that then making changes in the code won't compile super fast i have a lecture on my ultimate unity overview course explaining how to use assembly definitions in detail definitely super useful on those massive projects that course covers tons of things like for example this one that are really hard to include in regular videos because of the youtube algorithm so if you're interested in learning about those more niche things check out the course this next question is a simple one it's on my video on how i made a function timer class in my utilities it's a super simple class that takes in a delegate and runs it after a certain amount of time it's really easy to use and lets me add some timing to the code in a really simple way and the question comes from something who asks simply why not using co routine code routines are indeed useful for triggering actions after some time you have yield return wait for seconds to wait for a certain amount of time so that's one way to do it however the reason why i personally doesn't like co routines is because of the pattern that they force it to use for a co routine to work you need to change the function return type to i enumerator you also need to use the on return then you need to call start co routine somewhere to start it and you also need a mono behavior to run it for me i find that entire pattern to be quite clumsy and a very rigid set of requirements so for me i much rather create just an extremely simple class with a basic follow timer and a delegate that i can use in any way but on the other hand if you like using core routines then don't let me discourage you if the goal is to trigger an action after some time then either method works this next question is related to animations it's from the video on how to aim and shoot at the mouse in 2d in the video i teach how to create a game object rotate it to facing mouse position and trigger an animation to shoot then for the question this person asks how am i able to shoot and restart the animation before the animation ends and actually this question isn't really correct in the video in this demo i am not able to restart the animation before it ends the reason why it looks like that is simply because i made the shoot animation super fast like literally just one or two frames however what you can learn from this question is that the animator has a special state called any state which is indeed intended exactly for this use case if you make a transition from any state to something else then that transition won't be tested regardless of which is the current active state so in this particular case if you had a shoot animation that is pretty long and you wanted to make sure that the player could cancel the previous shoot animation with another shoot action to do that you could simply make a transition from any state onto the shoot state that way even if you shoot while the shoot animation is still playing it would indeed shoot again so always remember to use the any state in the animator it's super useful and absolutely essential for making your animations nice and responsive to player input this next question is an interesting one all about simple games to remake it's from the video 7 steps to become a game developer it's a pretty nice video where i cover 7 concrete steps you can take to start making games if you're the kind of person who films overwhelmed by all of the options and a simple stepbystep guide like this one can be helpful and in the video step 1 is start by making a ton of extremely tiny simple games the goal is basically to learn through quantity making tons of tiny games will teach you a lot more than making a single large game when you're just starting out so this question comes from srinivasa paduri sorry if i messed up your name and the question is pretty much can you share some games to replicate in the step 1 and my answer to that is pretty much any of the classic games we'll do for example snake is pretty simple you just move a snake with simple movement you'll learn about collisions and you eat some fruit then arcanoid is also pretty simple it helps you learn about physics and angles pong is similar to that one but also helps you create some basic ai or of course just recreate a bunch of simple mobile games things on the scale of flappy bird even for a beginner you can definitely build that in one week and learn quite a bit if you want something a step above that then perhaps look into pacman maybe into pinball maybe missile command basically if you're on that stage try making as many super tiny games as you can this is pretty much how i unintentionally started my game dev journey as you might know i started by making flash games back in 2008. i covered my gamedev journey in another video it's a really nice one so if you haven't seen that one go ahead and give it a watch in the 5 years that i was making flash games i ended up making about 40 unique games i made everything from shooters to strategy racing tycoon games and everything in between i really believe that doing that process is what helped me massively grow my gamedev skills i certainly believe that i learned a lot more making those 40 unique games than if i had attempted to make just one single giant game so if you're in the beginner stage i really recommend you try doing that try making tons and tons of extremely simple games and when you're done with that that is essentially step one so check out the other steps in that video this next question is all about various rotation methods and comes from my recently released turn based strategy course in there one of the lecture is all about handling the unit rotation making it rotate towards the move direction so the unit rotates and moves forward to do that i explained that there are basically three methods you can modify the transform.rotation this one involves working with quaternions which i always find pretty confusing so i tend to avoid this method the next one is you can modify the transform.euler angles this lets you work with regular angles that you're probably familiar with you know the ones that go from 0 to 360 and finally you can rotate the object by modifying the transform dot 4 directly this is the method that i find simplest so it's the one that i used in the course and this question comes from clayton rumley who asks what about transform.lookat is this one a good alternative or is there any reason why you shouldn't use it and the answer is yep that is indeed a great alternative transform down look at does exactly the same thing as modifying transform.forward the only difference is that when modifying the transform.foreign for that one you use a direction whereas for transform.lookout for that one you use the target position but either way both methods work perfectly so whenever you need to rotate a certain object these are the multiple ways you can do that if you want to learn how to make a complex game step by step then check out that turn based strategy course link in the description it will help you transition from the beginner stage into advanced alright so those are a bunch of your questions and my answers to those like i said this is a new format that i'm trying out if you like this format go ahead and hit the like button let me know in the comments since i've been answering questions like this for the past four years i have hundreds or even thousands of interesting questions so there's tons that i could include in videos like this one which may answer some questions that some of you might also have so like i said do let me know in the comments if you find this helpful and if you'd like to see some more like this thanks to these awesome patreon supporters for making these videos possible thank you for watching and i'll see you next time