hello and welcome I'm your code monkey and in this video we're going to learn what a transform is and what it's used for let's begin so a transform is the main way to move rotate and scale game objects in your scene every game object has a transform by default let's go in the scene hierarchy in here and create a new game object here in the inspector you can see it automatically added the transform component every game object always has a transform component here you can see the three main values for the transform the position the rotation and the scale they are represented as a vector three so they have an X a Y and a Z value let's add a sprite renderer so we can see the result of modifying the transform so add component sprite renderer into drag this right in here so we can see visually our game object so here's the sprite and up here I can change the transform changing the position will move the sprite on the xaxis I can change it on the yaxis and since I have the scene setup in 2d you normally would not modify the zaxis since that would be towards and away from the camera so in 2d you simply leave this at zero I can also rotate my sprite however again since this is in 2d you normally would only rotate these z axis which would provide that rotation the x and y would apply some rotation that is only applicable in a 3d environment the scale modifies the size of the game object using a sprite renderer means that the size this object that you can see in here is dependent on the settings of these sprites when imported so in here as you can see this spaceship sprite as a size of 64 by 64 and in pixels per unit I've selected 64 that means 64 pixels in this texture will equal one unit in game so as you can see this texture is 64 by 64 using 64 pixels per unit means that the sprite by default won't be one by one as you can see the size it is in one by one unit right there and if I modify the scale it will modify according to that sprite scale so I can modify the X I can modify the Y and again I can modify this but since this is in 2d let's leave that at 1 one more thing that is related to transforms and these freights is when you import a sprite you can modify the pivot the pivot won't affect how the sprite rotates so by default it's in the center let's say I would put the pivot back here hit apply and now if I rotate on these z axes you can see that rotated around that pivot okay so that's movement rotation and scale of a single transform you can also parent various transforms so let's go in our hierarchy and duplicate our current game object and let's make the second one a child of the first game object move it to the side so you can see in so this in here and let me tend so you can easily see this is the child game object now when I modify the parent you can see that those changes are also applied to the child so if I move both of them move if I rotate both of them rotate and if I scale both of them scale on the inspector what you see are the local transform values and not become own values so if I go into the channel game object you can see that the values in here are represented in the Enloe composition space so let's put this one on 1 and 0 if I put my parent on to 0 then the world position of this one is on 3 0 but it shows 1 0 again this is the local and not the global position this difference between local and common space is very important to fully understand the same thing is applied to the rotation and scale what you see here are the local values and if you apply them outside you won't still see the local values in here all right so that's what we can do with the transform from the editor now let's write some code let's make a new csharp script and let's name it transform test we're going to add this script to the parent transform and let's rename this to sprite and here a child transform just to have more proper names to deal through code with our script running on the parent let's go into the code and in here you can access the transform component by simply writing transform so let's make a debug log of the transform and see if it correctly prints out our transform object yep in the console as you can see our current transform has the name of sprite and it is of type int engine transfer so let's modify the transform position we do that by going into the transform dot position which won't set the transform can work on position and we're going to put it on vector three and let's say one zero zero so as you can see our transform is on two zero zero and if we run the code as soon as it starts you can see that it was a reposition to one zero zero so now let's move our transform on update so let's copy this in here and we're going to set our transform dot position to transform that position plus a new vector3 of let's say 0.01 per frame so essentially every single frame we're going to move this transform point zero one to the right side since we are moving on the x axis and here so let's test yep there you go as you can see the spaceship is moving and the champion object as you can see is moving with it now there are many ways to rotate a transform depending on if you are working in 2d or 3d for me since I work in 2d the easiest way is to modify transform the owner angles so let's do a transform dot Euler angles which again are represented as a new vector3 and again if you remember in 2d we only want to modify the Z value so let's do the same thing with it previously and increase the owner angles by 0.1 F every frame so this should make our sprite rotate continuously yep as you can say this sprite is rotating on the z axis so finally we can modify the scale of our transform by going to transform dot local scale and we're going to the same thing set the in local scale to the local scale plus a vector 3 and let's increase by point zero one point zero one also on the Y and 0 on the Z so this should increase the size of our transform once maintaining the aspect ratio yep there you go you can see the scale increasing friend so now we have a sprite that is changing position moving to the right side changing rotation by rotating and also changing the scale those are the three main properties of a transform so all these values that you see in here are global values there is a second set of variables to handle local values for position set of transform that position you have transformed our local position for the rotation you have local Euler angles or local rotation if you want to deal with quaternions and for the local scale you have the local scale so as we saw previously the inspector displays the local values of that transform on the child in here you can see the unload composition it is on 1 0 0 and we can see that through code what's going to our start and first of all in order to access the transform of the child we use transform dot fine and then we find the name of our transform which in this case child transform this is the reference to our child transform so now with that child transform let's print out the local and global position so let's do a debug log of the in local position which should display exactly the same as we see in the inspector and the position which should show something different and let's stop moving the parent don't start all right so let's see what these two values are at this point as you can see in the console the in local value is 1 0 0 but the global value is 3 0 0 so the in local matches what you see in the inspector but the global is different if we were to set the parent to 0 0 0 then the awoken would be the same as the global so there you have it we covered what is a transform and all the ways we can modify it both in the editor and through code if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time