in this video we're going to make a simple character jump in 2d the jump will be using unity physics so we can easily implement a platforming level let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with indepth tutorials made by a professional indie game developer so if you find the video helpful consider subscribing so this is what we want to make we have this character here with some nice animations I can press space to make him jump and as you can see the jump uses the Unity physics system so he jumps up and gets pushed down by gravity there are also three modes that we can apply to our jump so for example we can have our character have full control once the jump is in midair we can also make it have no control whilst in the air so if we jump he keeps going on the same direction and we can also set it to have some control in midair so I jump to the right and then I can stop and stop it for a bit of these various jump types are dependent on your game design so we're going to create these three modes and then it's up to you to figure out which mode best suits your game alright so let's get to it first here is my starting scene with my character oh yes are some simple animations there's no movement or jumping whatsoever so let's see the simplest way to implement jumping for that let's first go into the player game object and in here in order to be able to use unity physics we're going to add a rigidbody 2d this is the main component that interacts with the physic system and just by adding this we can already test to see those physics being applied so let's run the code and yep there it is the character starts falling along with gravity okay so let's have a simple platformer for that we come here we create an empty game object call this a platformer let's add a sprite renderer so we can see it and hear on the sprite renderer without any texture it's not visible so let's add the white pixel texture this texture is literally just a 1x1 white pixel and by adding that we can now view the game object in our scene so now let's stretch it to make our platform okay so let's say this is the size that we want now let's add the box Collider 2d component and that's pretty much it for adding physics to a platform this object now has a hitbox that won't be used by the physics system however if we run the code there's the character falling down and yep it goes through the platform that's because our character also needs a head box so let's go back into the character and in here at also a box Collider 2d make sure that the head box size matches that of the sprite okay now it should work let's see there's the character falling down and yep there you go he stops falling down once he had supplied one okay great so now we have our basic physics set up now let's make it so that our character can jump here on the character game object I already have two squares applied the prescript is what handles the animation so don't worry about that one for now since the animations are irrelevant regarding the jump system so for that let's open the player script okay here we are as you can see it is pretty much empty on has is a reference to the player base component so we can play our animations so in here let's first listen to player input so for that we make a private void update and now in order to listen to simple input we simply do if input that get you down and let's test for Kiko dot space so on the frame when we press the spacebar this will be true and when we do that we want to jump now in order to jump we're going to change something in our rigidbody so let's go up here and make a reference for the rigidbody 2d so with our reference you cannot go in here and modify the rigid body down philosophy velocity is how fast the rigid body is moving so by changing it directly we won't have a correct jump instead of adding force which would be more gradual so velocity takes a vector two for our vector two we wanted to move up so we do a vector two that up and then multiplied by a certain jump velocity so let's do it here a float for the jump velocity and then we multiply it in here okay so that should do it when we press our spacebar we are modifying the velocity to make our character jump up let's see okay there's a character sitting on the platform and when our press space yep there you go as you can see it did indeed jump up and fall down now the jump feels a bit floaty so we can play around with the values to get a nice jump feel here on the originally scale so by increasing it we can make the jump much less floating okay so these vowels that are obviously gonna depend heavily on the scale of your sprites and your own levels but in this case a gravity scale of 25 and a jump velocity of 100 makes for a nice jump here it is in the game and if I jump yep I have a much better jump it's much less floaty and much more accurate okay quick in here we can also go into the constraints in order to freeze our rotation so the character doesn't bounce around when you go it to an edge now one issue that we do have in here is that essentially we can keep jumping so if I spam space as you can see he just keeps jumping nonstop and essentially our character can fly so that means we need to test when the character is on the ground and only if the character is on the ground then we can jump so let's go into the code and now in here we only want to do this jump if our character is grounded so in order to test if the character is grounded we have several options depending on how we want our game to work the simplest way possible is just with a simple ray cast so you do a ray cast from the center pointing down any test that works fine but it only works on a perfect line meaning if your character is on an edge the center of the character will not be on top so it will not as being grounded if you want your character to essentially occupy just one pixel that would be a valid way however for our character were using a box Collider so we want to occupy more than just a single point so instead of a raycast we're going to do a box cast so let's go in here make a private loan comic is grounded and in here we're going to go into the physics 2d class and do a box cast so we need an origin for our box and the origin will be our box Collider so let's go up here and grab that reference a reference to our box Collider 2d so we can use the Box Collider dot bounce dot Center so the center of the box Collider is going to be our origin for the size we use the same size as our box Collider now for the angle we don't want the box to be rotated so we just give it 0 and for the direction we want to point down so let's do a vector 2 dot down and we want to move down by just a tiny amount just enough to check if there's something in there so in here we need to multiply by a certain distance amount so in this case let's say just point 1f this is just so that the box casts that we're doing is just slightly offset from where the player is sitting ok so this is our function and this box has returns a rake a set to Dean so great asset to D and then all we need to do is check if the array cast it to be that Collider if it is different from no if it isn't that means we hit something so we are indeed run so just for testing let's do a debug down walk to make sure we are hearing what we want and here on update we're only going to jump if our character is grounded and we press the spacebar ok that should do it now let's see so here is the character on the platform however here in the WoW you can see an issue the array cast is hitting the player's hitbox so essentially we still have the same behavior where we can essentially jump since he's hitting the player pit hitbox so he's constantly ground what we need is to ignore the player's hitbox and test for the platforms for that we can use a layer so we click here on layer at the new layer this will be the layer for our platforms and now we go into our platform sprite and we set it to the platform's layer ok and now we can go back into our code and up here let's add a field for a layer mask so a private layer mask this is essentially what describes which layers we want to hit with our raycast we're going to set this in the editor so let's make it a serialize field let's see how it looks in the editor here we are on the player as you can see there's the layer mask we're going to set this to only hit on platforms so our layer mask will only hit platforms and now back in the code let's rename this to platforms layer mask just to make a better name and down here when we are checking if we are grounded on this function we can also pass in a and layer mask ok so that's pretty much it so now this box cast will only hit things that are on the platform layer so we can now go back and test and see if our ground code is now correctly working and yep here it is in the log as you can see it's no longer interacting with the player but rather with a platform soon here I can press space and yep there you go a normal jump and if I spam space if there you go I can no longer fly now I can only jump when I'm touching the floor right great so we now have vertical jumping working perfectly fine now that we have that let's see on with some movement whilst in the air so before that I'm going to write some quick simple movement code okay so here is the movement code I want this video to be focused on jumping so I won't go into too much detail but let me know if you would like a video focused on various types of movement so in here all I'm doing is checking for the in left and right arrow keys when no key is pressed then the rigidbody a velocity suddenly stops when I'm pressing left I put the velocity on move speed on on right on pause moves me so this makes our movement very snappy and controlled so let's see it in action so I can move to the left move to the right I can jump and you up there you go I have full control over movement okay now let's add our animations to make this song look much better okay so here is the set animations code we just check if we are grounded if we are grounded and the velocity is zero then we play the idle animation if we are ground and velocity is not zero then we play the movement animation and if we are not grounded then we play the jump animation so here they are movement left move rides as you can see the animations and jump and yep there you go everything looks right okay great so with all that working now with regards to the jump we can do several things the way that it's currently implemented we have full control lost in me there so in here I can jump it right then midair stop and come back this is one way to do it however now let's say in your design you want the player to have no control whilst in midair so let's go to the cone here on the movement code we're setting the velocity once the key is held down so we need to do is make sure that this code only runs when the character is grounded so in here in handling the movement to assembly do if is grounded then we handle movement if it is not grounded then we do not handle movement okay let's see okay we are moving now I jump any of there you go I cannot change my direction one time in the middle of the air so I can jump to the right now I pressing left and doesn't work it only works when I fell down so this is one possibility again all this depends on your design now let's check out another possible design so let's say we want to have some Cutrone well in midair but not example like on the form so let's first go back to the code where we had full control okay here we are and I have absolute full control once the character is in midair okay and now in our handle movement code we're going to do some different things in here for example when we are not pressing any Keys when we are grounded it is grounded then we're going to do exactly this we're going to completely stop but when we are not grounded we're going to leave the velocity as it is so if we don't let go of the keys he keeps going on the same direction now when pressing left if we are grounded then we change the velocity exactly as previously however when not grounded we're going to modify the velocity a bit to the left so we modify the velocity we don't change the Y and we change the X here since we are running this on every frame we need to multiply by time.deltatime so essentially when we are not grounded we are constantly pushing the velocity to the left side now let's add also a variable to check our midair control so it's low to mid air control and then we can play around with this value and then let's make sure it is always within valid ranges okay so we shift the velocity to the left side by a certain amount then we make sure that our rigidbody velocity X stays within moves speed and pause move speed and we don't let go of the velocity of Y so all this essentially means that we slow down while in midair so let's see if this works okay here we are now I jump to the right and then I'm gonna try to stop my jump jump and try to stop when II up there you go I had some control as you can see if I go and just let go he goes on the way there if I get when I stop yup there we go I have some control in me there now we can increase this amount but yep that's exactly what we want now let's apply it to the other side okay let's test here we are jump to the right and yep I can control it slightly and jump to the left and I can also control it slightly so I can for example jump then I see I'm going to overshoot it and I can try to cancel it again the valleys are easy to change so if we want more we can change it so here instead of minute control like that let's put three so I go I jump and yep there you go I can almost change direction fully whilst in midair so I jump and I can fall exactly on the same point jump in there and come back and I found out okay great so as you can see we have three possible rule sets we can have full control while in midair we can have no control or some control whichever you choose will depend on the design for your game now let's see one final problem that we have first let's set another platform to the side and now let's revert back to being able to move in midair okay so I have separated all the behaviors in three functions so you can use which one best suits your game so here we have the phone midair control send me their control and know me their control so now let's use the format error control and now let's test how things work with this second platform okay there's the second platform I can go into it and yep there you go I can jump on top okay everything seems nice however if I jump at an angle straight to it there go the character is now stuck in me there that is because I am holding down the right key so he's constantly trying to move to the side which stops his phone so he found let go of the right key there you go he falls and works from so the issue in here is because of friction so if I'm pushing to the right and is causing freshing then that friction is keeping him whilst on midair so for that we can pause our scene here on our rigid body we have a place where we can add a physics material so we can create one let's go in here create a new physics material and we're going to call this no friction and here on we need to do is set our friction to zero drag it onto our rigidbody okay and now let's test here we aren't if I jump at an angle yep there you go he hugged the wall and kept moving up and then fall down so as you can see he no longer get stuck if we hit the wall from the side so there you have it who created a simple jump using the Unity physics system using this as a base we can now create any number of platforming games we can easily do in level design by creating multiple platforms and managing the player jump height as always you can download the project fountain utilities from unity cosmic comm if you liked the video subscribe the channel for more unity tutorials post any questions you have in the comments and I'll do to answer them alright see you next time