hello and welcome I'm your codm and here is how I added modding to my kitchen chaos game now this video is a showcase SL tututorial on how I added this and how you can add complex mods to your game in a previous video I already covered how to get started with unity's user generated content tool and in there I mentioned how user generated cont can really be anything it's really just btes it's up to you as a developer to decide what content you want to allow as mods every game is unique so I can't really make a stepbystep tutorial that covers how to add modding to every single different game type every game implementation is going to be different so I don't want you to look at this video as a stepbystep tutorial but rather just learn the Core Concepts behind out to add modding to any game which in reality modding is actually pretty simple your players will have the final build of your game then you probably have some special modding folder and your players will add some files to that folder inside your game files then your game needs to dynamically load those files that the player added in some way depending on their type after you load them then you give the player some UI to create whatever mods you want to enable with your game using the player assets then you create some sort of file that contains those rules or whatever that the player selected and then optionally take that file and upload it to something like Steam Workshop or unities user generated content tool so in general terms those are the steps for how to implement modding in any game by the way in the future I will be following this tutorial myself when I add modding to my seam game dinky Guardians which has just come out in fact let me actually take this time to ask you what types of mods would you like to see in that game I'm obviously thinking of letting the player mod new resource types and crafting recipes perhaps even some new machines with some custom on logic and maybe even some completely new game modes and scenarios kind of like factoral does it so I have plenty of ideas myself but you'll let me know your ideas for mods so as a demo here I have my game kitchen chaos this game was fully built from scratch in my free complete course and then I also expanded it into multiplayer in the second course now this game is all about controlling a character and cooking some food some customer requests come in and the player needs to prepare the food and cook it in various ways to match a final recipe soly the game is all about recipes and objects here is the recipo script M object which is made from scratch in the complete course as you can see it really just has a list of kitchen object so and then the kitchen objecto this is the type for every individual kitchen object type so every ingredient all of that is made up of this and in turn this one contains a prefab so we transform for the prefab that is ineni this is what contains the 3D mesh then it has a simple Sprite icon and finally string for the object name so as a developer I decid that this is what I want to make modable I want players to be able to create new kitchen objects so here in my demo I've got a bunch of completely new kitchen objects that I created as simple mods for example this one over here this one is a battery it doesn't really make sense in the context of this game but it's a great example of how after you build the tools then your players can mod anything they want it doesn't have to match the actual game itself so I've got a container counter which has my modable item and I can interact with it and pick it up just like I can pick up any of the builtin items here you can see how this is a working kitchen object and importantly the mod includes the battery over here the 3D mesh it includes the texture it includes a 2d icon and the name itself all of that data all of that was added by a player so none of this was included in the original game build then I also created a recipe with that custom kitchen object so for example one of the customers is requesting a recipe with a battery so I just pick up a plate I put the battery on the plate and yep there it is again a complely custom object and I can deliver it and yep success everything worked perfectly so here we can see a custom mod so a player created object and all of it is working on top of the game that I built following all the rules then here is the super basic ingame UI for how to actually create a mod I basically just created a special folder and I called it mods input now in the original build the game this folder would have been completely empty and then I as a player I created all these assets and I dump them inside this folder you can see over here I've got some mesh files some obj I've got some icons some pgs and some textures so some jpegs then in unity this simply why simply Cycles through all the files in that folder it identifies which files are meshes which files are textures and which ones are icons so in here I can just select whatever I want like for example select the battery I can select the texture for the battery mesh I can select battery I icon and give the object a name then I can create a mod and now there's a second folder this one called mods complete and on this one yep here it is the battery that I just created then back in the main game window and yep there it is the mod was correctly loaded and here is my custom battery my custom mod okay so that's the concept now let's see how I implemented all of this but again keep in mind every single game is different so pay attention to the concepts that I'm doing and not exactly the specifics so like I said the first step for adding modding to your games is being able to load some assets dynamically in order to support custom objects need to be able to load a 3D mesh then I also need to be able to load a texture for that mesh also need a Sprite for the icon and then just a basic string for the name out of all of those the trickest one to load is just the Dynam loading the 3D mesh that one was actually surprisingly difficult normally I use fpx files for my meshes it's really the most Wily used format if you've bought any asses from the store chances are they are in fbx however it turns out that fbx files are actually really complex and loading them at runtime is really difficult now there are some pay tools on the store that apparently can do that so so that's still an option but for modding I also don't specifically need the mesh to be in fbx it can be in other formats for example obj which is apparently quite a bit simpler and while Unity doesn't have a builtin method for unloading them there is a simple free asset on the store that does exactly that so I originally started with this battery mesh I grabb this one from the polygon military pack in order to convert this fbx onto a obj it's actually quite simple you can just drag the mesh onto a scene then you can open this mesh with probuilder so just go into tools probuilder and open the pro window then you can ProBuild Riz this mesh and then here you can click on export click on the plus icon and up here you can select all the various types that you can export into so exporting into obj exactly what I want so just export this and yep you convert a fbx into a obj so with that yep here I have the obj file then here is a code for using that asset which takes a path for the obj file and then simply loads it as a game object then that game object simply has a regular mesh filter component and from that I can easily grab the mesh data so that handles that load a mesh by the way for getting that path you really just need to cyle through a directory here is the code that I have on that UI window that is doing just that so You' got a path for the mod inputs folder for that one I'm just using application. datapath this contains the path to the game data folder so just add and then I put it on a subfolder mods input so just creating a directory info from that one and then just calling get files and get files just this extension so in this case I'm all looking for obj that returns a file info array and then inside this file info you've got two things you've got the name which is just the name of the file and then You' got the full name which contains the Full path to that object the F path is what you use over here on the OBG loader okay so like I said that handles dyamic loading the mesh then for dynamically loading a texture that one is actually super easy un already has a builtin method for doing just that here is some simple code so basically just get the path to the actual texture then just use file. read all bytes in order to read all the bytes of that file and load it onto a b array then with that you can create a brand new texture 2D make it a completely empty texture and then just call texture td. load image and pass in the by the right and that will load this texture and loaded onto this texture to the image then you can use this texture in the material that we can apply to the previous mesh okay so the next data that we need this is Sprite this one is also super easy once again we just get the path and we read the bytes from that path then we unload an image onto a texture Tod so exactly the same as previously then we just use sprite. create in order to basically convert this icon texture into an actual icon Sprite and finally the string for the object name this one doesn't really require anything special so I just used a regular text mesh Pro input field component and just grab the text so with all of that we can easily grab all the data that we need we can Dynam load all of it based on whatever the player drops in that mods input folder and then I opted to put all that data all the mod data in a single mod file now you don't have to do this this step is optional if you want you can keep the mesh and the textures and whatever objects you have you can keep all of them as separate files but to make things easier I just merge them all into a single file now I'm going to show the code but if you want to learn about this process of saving multiple pieces of data in a single file if you want to see that in more detail I covered that in the save file screenshot video so here I have my save mod function as you can see it takes various paths as parameters so path to the mesh object a path to the texture the icon and a string for the object name here it has all the paths and then the code is just what we saw for saving we really just want to read those objects just load them and then grab all the bytes that we're going to use in the final save data so here I'm using the obj loader so I'm using that asset in order to load the mesh obj onto a game object then I grab the mesh from that game object and then I simply made a mesh that struct here it is it just a super basic structure just holds the vertices youv and triangles this is really all the data that makes up a mesh so here we grab the load mesh and we store all the vertices triangles and UVS then with this mesh data over here I opted to save this data as Json now this is obviously not the best in terms of space compression but for this simple demo it works great so I just convert all that data into a Json string and then I take that Json string and convert into an array of bytes then I just save those bites in my save file and add extra data to my header again I covered basic save and loading with Json in another video and I also covered how to make a complex save file with extra data in the save file screenshot video what I'm doing here is literally the exact same thing that I'm doing there so this just saves all the mesh data then for the texture we really just read the bytes over here we don't even want to load a texture same thing for the icon and for the name bite array so we really just convert a string into some bytes then here we are constructing the file header with all the data and finally completing all the bytes for the final file like I said this is optional you can have your mods made up of multiple files or you can put them all into a single file like I did here and then simply fil out write all bytes to write all these bytes onto a single file and also like I mentioned the unity user generated con tutorial on that video I mentioned how that tool Works simply with some bytes and Y over here as you can see we do have a list of bytes now in the demo all I'm doing is just saving these locally but you could definitely take these bites and instead of saving to a local file you could upload it to unity's ugc or perhaps something like seam Workshop again remember how mod data is really just bites it's up to you as a developer to decide what those bites represent then for loading here here is my loading function it's really just doing the exact same thing but reverse logic so it starts out with a bite array which I load with file. load on bytes and then I may have some output parameters for the things that this going to Output so it grabs the complete bite list then grabs the correct bytes based on the offsets first it grabs the header it parses that Json back into an actual object with the header loaded I then know the file data and all the sizes for all the various data types so over here I'm grabbing the icon bite list and then like we saw once I have a bite list or a bite array with that I can easily load that icon bytes into an actual icon Sprite for the object name that is really just converting bytes back into a string for the texture once again we just go into texture 2D and call load image to convert bytes into a texture and finally for the mesh data like I said I opted to store this as a simple Json file so I just grab that Json data and construct the brand new mesh using the vertices triangles and UVS and yep with all that this load function this one loads all the objects on a given bite array it loads all that and outputs all the save data that that was saved in the mod file then with that data here is a simple function for creating a kitchen object as so over here I've got all the parameters that I need in order to turn that data into a kitchen object as so here it just duplicates a default material and then sets the Bas map texture then enenes a debug prefab it gives it a name it goes into the mesh filter and assigns the mesh we just loaded it goes into the mesh render and assigns the material then uses script M object create instance of type kitchen object so in order to create a brand new Script Mod object and just fills in the data for that Script Mod object so the object name the prefab and Sprite and then goes into the prefab and tells it okay now you belong to this kitchen object as so so finally with all this we end up with a mod kitchen object so for unloading all the mods like we saw I'm here going through the entire mods complete folder CLE through all the mods in that folder then I'm going to load all of those create a kitchen object as so for all of those and then just for testing here I've got some nice code I just manually Place some container counters and set them to this kitchen object I made sure to add this brand new kitchen object so to the kitchen object so Val list on the plate otherwise I couldn't add it to a plate and again just for testing I created the brand new re PSO that takes just get this kitchen object to make it all work and that's really it since the rest of the game was written to work with kitchen object SOS regardless of where they came from everything else already works perfectly so here is the demo again and I've got my three counters with my three modable objects I can go up here and Y there you go I'm picking up a crystal that I added as a modable object I can pick up a pig and a battery so all of these all these objects these were all added afterwards so none of these files none of these meshes and textures none of this was included in the original game build and then I've got the testing recipes that I created so for example someone wants a crystal so I can pick up a plate add the crystal to the plate and deliver it and yep success it works all right awesome now once again like I said it's up to you as developer to decide what you want to enable as modding for your games in this case all I did was just enable just brand new kitchen objects but of course you can follow the exact same logic to expand upon it and allow modding for multiple different things for example you could expand upon this and mod the actual recipes instead of just making testing recipes you could make the entire level modable so that players could create their own levels you can enable players to create brand new counter types you can enable players to edit all the rules so for example the level timer how many recipes are spawn and so on again it's up to you as a developer to figure out what you want to enable as modding all right so to recap to add moding to your game every game will be unique so these are the general steps you need to follow your players will have the final build of your game then you probably have some special mding folder where your players can add some files then your game needs to dynamically load those files in some way depending on their type after you load them then you need to give the player some UI to create whatever mods you want to enable for your game then you can create some file that contains those rules or whatever that the player select for the mod and then optionally you can take that file and upload it to something like seam Workshop or unties user generated cont tool so in general terms those are the steps for how to implement modding to any game now if you want to learn how this game was built from scratch check out my two free complete courses first on making the game in single player and then multiplayer and also for uploading your mods check out unity's user generated Contour then check out my new game and let me know what I've what support you'd like me to add any future update all right hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time