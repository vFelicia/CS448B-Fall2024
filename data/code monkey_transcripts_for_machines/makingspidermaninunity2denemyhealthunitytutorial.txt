hello and welcome I am your code monkey in the series of creating spiderman in unity 2d in this video we're going to take our enemies and add a health system let's begin so here's the scene so far we have our Spider Man he can attack towards the mouse there are two enemies in here they are being spawned from prefabs so we can instantiate as many as we want and if I go here and I click near him I can attack that one and if I click on this one I can attack this alright so far everything looks great except obviously for the fact that no matter how many times I hit him the enemies never actually die so we need to have a simple health system to the enemies now before we do that and let's sort out one issue now the enemy that I attack is being selected based on the position near where I click so if I'm near the enemy and I click on him it looks just fine however if I'm Way over here and I click you can see that it still attacks the enemy this is because we are calculating an enemy near the mouse position where it should be near the spiderman position but pointed towards the mouse position so if I click in here I should be looking for enemies around this area so let's go into the code here in our spiderman class down here on the handle attack we are checking for the closest and me to the attack position which is set on the mouse world position instead of doing that let's calculate the attack position to be near the Spider Man but towards the direction of the mouse so let's complete a vector3 of the direction to the mouse cutting like that taking the mouse role position our Spider Man position and then normalize the whole thing so now our tack position will be the gap position so the position of our Spider Man plays the direction towards the mouse position and multiplied by an offset of let's say about 20 units so this contemplates a position moving 20 units away from the Spider Man position towards the mouse so that's at the attack position and the rest of the code works perfectly fine alright so here I am in between both of them and if I click on here yep I'm attacking now one click on this one attack this one okay and now if I go away and I click right on top of this one yep you can see that he's no longer being hit I'm attacking but since there are no enemies near around this position then that it's not being hit and if I move closer yep no he's being hit okay great let's just clean up our code in here to remove these magic numbers all right so our code is now clear and very easy to follow so now let's set up the enemy health we're going to keep things very nice and simple so let's first go into the enemy class and in here on the member variables let's just simply define an INT or the enemy helm very simple on awake let's set the health to three okay and down here on our damage function let's decrease the health by one okay then let's also make a public bomb function for testing if he is dead and to simply return if the health is under zero and in here on damage if this enemy is now dead then let's simply destroy the game object now we also need to go up here when grabbing the closest enemy we have to ignore the enemies that are dead so in here simply do if the enemy dot is then so if this enemy is dead then continue so let's just ignore this one continue simply continues to the next enemy on the cycle so if the enemy is dead this does not get run now can also simply remove him from the list when he dies but for now let's leave them all in there so let's run the game okay there's the enemies and now if I hit him one two three and poof he vanishes so he is correctly taking damage and since he has three home after three hits he vanishes now just for testing let's go back into the game hammer and here we set this function to automatically create enemy so let's remove that comment just so we can test them adding multiple enemies okay so here I am as you can see enemies are being spawned and if I hit him yep three hits he's dead one two three he's gone one two three gone one two three gone and it works with all that okay great now just vanishing enemies obviously isn't very fun so let's make them fly away when they actually done now in order to make them fly I'm going to use the script that we created in a previous the flying body script you can check out the video to see the home creation of the script but essentially it's very simple we have a static create function we give it a prefab a spawn position and a fly direction it in Senshi AIT's the prefab adds the fine body component and sets up with the flying direction then on update that simply moves the transform towards the fire Direction it increases the scale every update rotates them and after one second destroys itself so it's a pretty simple but satisfying effect now in order to use it the one thing we need is a prefab to instantiate so let's create an empty game object and give it the sprite renderer and in here I have a texture for an enemy flying body so this is a sprite that won't be flying away so let's make it into a prefab so create a new prefab TF enemy flying body and drag the game object onto it okay now let's go into the game assets to add a reference for our prefabs so a public transform PF enemy flying body now in here let's drag the reference okay and now let's go back into the enemy script and down here when he takes damage if he is dead we still destroy this game object but then we want to instantiate the flying body so let's do flying body dot create using the static create function now again in here we take a prefab so we go into the game assets not instance not grab the enemy flying body prefab we spawn him on this position and with regards to the flow direction it won't be the same direction that he was attacked in so in here we are currently the direction to the attacker so we want to reverse of that to keep going from where the attacker attacked him so direction to attacker x 1 f alright it's not when he dies he should spawn a flying body let's see alright there's the enemy and if I hit him 1 2 3 and yep there you go he's flying away 1 2 3 fine fly fine alright so we now have a nice satisfying effect for winning and me is killed now let's make it more impactful by moving spiderman for on attack and giving the enemy a slight knock back so first let's go into our enemy code and in here we are going to check if he is dead then we do that if he is not that then we do something else so enemy is still alive and essentially in here we only want to play the hit animation if he is still alive if he's dead obviously it doesn't matter and if he's still alive then let's knock him back so we do that by moving the transform dot position move it towards the direction to the attacker times minus 1/2 since we don't want to move to towards the attacker brother away from the attacker so move them away by let's say five units so minus 1/2 times 500k so float knock back distance let's put up five up and that's what we're going to use in here so if he's still alive we move him away from the attacker by a distance of knockback this is so now let's go into the spiderman and in here when we are attacking first in here we are checking if there is an enemy or not so in here there's an enemy range if not there's no enemy and right so if there is no enemy in range then we are simply punching into the air then let's move in towards the attack direction so we need to actually define the attack direction up here we do have to recount late if we do have an enemy so common later it again in there and calculate it in here so if there is no enemy in range then simply do a transform dot position and move them towards the attack dere by a dash forward okay so if there is no enemy simply move them forward by this amount all right now if there is an enemy first we're gonna call the damage function so that the enemy gets knocked back or killed and then after we do first we need to check out if he is that so if the enemy dot is dead if he is dead then we want to move forward the same as before okay but if he is not dead let's position him relative to where the enemy was not back to so we're going to say the transform dot position to be at the enemy that get position plus the attack direction reversed multiplied by a distance to enemy hello distance to enemy and let's say five okay so if the enemy is dead then we dash forward the same as if there is no enemy if the enemy is not dead then he's still there so the enemy was knocked back then we grabbed a position where he was knocked back to then we applied the reverse of the attack direction and we moved by a certain amount this way every time we attack an enemy we stay exactly within the same distance of him okay so we should be seeing the enemy knocked back and spiderman right next to him okay so here I am first of all let's try and see if we when we attack and yep there you go he's moving slightly forward every time we talk okay and now if I approach an enemy and I hit him the enemy should get knocked back and I should also move forward and yep there it is he's moving towards the enemy the enemy gets knocked back and as you can see no matter how far I attack him so if I take him this far he goes exactly within the same distance and if I'm very close also the same distance so the animation always connects all right so far so good now the hit particles shouldn't really only spawn if I hit something so if I'm hitting the air it really doesn't make much sense to see all of these head particles so let's make sure the only spawn when I actually hit an enemy so back on our spiderman class down here we are spawning the hit particles in here inside our play punch or kick animation now we only want to trigger this if we do attack an enemy so let's go up here and simply define a ball for hit enemy and if the enemy is not know that we did hit an enemy so hit enemy set to true and if no enemy is in range then set to false because we didn't hit any enemy and down here we are simply going to spawn the impact effect if we did hit the enemy if not then we don't spawn anyway do the same thing there and in here all right so now the hit particles should only spawn if I actually hit something so in here if I hit the air yep no particles didn't hit anything just punching the air and if I hit him yep there's the particles there's a nice solid hit all right good so now final and let's add a little screen shake there is a simple screen shape function on the code monkey utility so let's use that and we want to shake only when we actually hit an enemy so in here let's do the utah's class not shake camera and we give it an intensity and the timer so let's test out these values all right here I am and if I hit the air yep no particles no screen shake okay and if I hit an enemy if there your very slight screen shake and the particles as well now let's make a tiny bit more screen shake when we actually kill an enemy just to differentiate D 2 so in here instead of shaking every time when we don't hit an enemy do a screen shake when you do hit an enemy do slightly more ok Here I am and I hit nothing and nothing happens hit an enemy 1 2 3 and as you can see on the third one when he was killed it shake a bit more 1 2 3 and yep so we can now attack the various enemies and it looks very nice and they fly away alright so there you have it we added help to the enemies and various effects to make hitting them feel very satisfying in the next video we're going to setup enemy movement as always you can download the project family Nutella tease from unity code monkey comm if you have any questions post them in the comments and I'll do my best to answer them subscribe for more videos and I'll see you next time you